// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 308 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 05_Tanks_4
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_STRING 05_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 05_FastBreakthrough_6
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 05_StevensStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 05_ApeTechsStatus_7
  93: PPUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 0
  99: PUSH
 100: LD_INT 0
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: EMPTY
 127: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 128: LD_ADDR_EXP 8
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 135: LD_ADDR_EXP 9
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 143: LD_ADDR_EXP 10
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 151: LD_ADDR_EXP 11
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 159: LD_ADDR_EXP 12
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// dial_NorthBlocker = false ;
 167: LD_ADDR_EXP 13
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 175: LD_ADDR_EXP 14
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 183: LD_ADDR_EXP 15
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// claimTerminalBase = false ;
 191: LD_ADDR_EXP 16
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostAgainBase = false ;
 199: LD_ADDR_EXP 17
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// savedVsevolod = false ;
 215: LD_ADDR_EXP 19
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 223: LD_ADDR_EXP 20
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// enableVsevolodCounter = false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// canGoNorth = false ;
 239: LD_ADDR_EXP 21
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// canSpawnReinforces = false ;
 247: LD_ADDR_EXP 23
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// canEndMission = false ;
 255: LD_ADDR_EXP 24
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// canRemoveUnits = false ;
 263: LD_ADDR_EXP 25
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 271: LD_ADDR_EXP 26
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// cratesSpawned = 0 ;
 279: LD_ADDR_EXP 27
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// PrepareRussians ;
 287: CALL 913 0 0
// PrepareAmericans ;
 291: CALL 3344 0 0
// Nef_PrepareNature ;
 295: CALL 4459 0 0
// MissionIntro ;
 299: CALL 16068 0 0
// end ; end_of_file
 303: LD_VAR 0 1
 307: RET
// export function InitMapConfig ; begin
 308: LD_INT 0
 310: PPUSH
// BaseMapConfig ;
 311: CALL 324 0 0
// MissionMapConfig ;
 315: CALL 414 0 0
// end ;
 319: LD_VAR 0 1
 323: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 327: LD_ADDR_EXP 28
 331: PUSH
 332: LD_INT 3
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 354: LD_ADDR_EXP 29
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: ST_TO_ADDR
// animalsAgression = 3 ;
 377: LD_ADDR_EXP 30
 381: PUSH
 382: LD_INT 3
 384: ST_TO_ADDR
// debugMode = 0 ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// missionPrefix = 06_ ;
 393: LD_ADDR_EXP 31
 397: PUSH
 398: LD_STRING 06_
 400: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 401: LD_ADDR_EXP 32
 405: PUSH
 406: LD_STRING 05_
 408: ST_TO_ADDR
// end ;
 409: LD_VAR 0 1
 413: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 414: LD_INT 0
 416: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: PUSH
 440: LD_OWVAR 67
 444: ARRAY
 445: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 , 30 ] [ Difficulty ] ;
 446: LD_ADDR_EXP 35
 450: PUSH
 451: LD_INT 150
 453: PUSH
 454: LD_INT 100
 456: PUSH
 457: LD_INT 50
 459: PUSH
 460: LD_INT 30
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 , 30 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 100
 482: PUSH
 483: LD_INT 70
 485: PUSH
 486: LD_INT 50
 488: PUSH
 489: LD_INT 30
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: PUSH
 498: LD_OWVAR 67
 502: ARRAY
 503: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] ;
 504: LD_ADDR_EXP 37
 508: PUSH
 509: LD_INT 4
 511: PPUSH
 512: LD_INT 5
 514: PPUSH
 515: CALL_OW 12
 519: PUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 6
 525: PPUSH
 526: CALL_OW 12
 530: PUSH
 531: LD_INT 6
 533: PPUSH
 534: LD_INT 7
 536: PPUSH
 537: CALL_OW 12
 541: PUSH
 542: LD_INT 7
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: LD_OWVAR 67
 555: ARRAY
 556: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 , 10 10$0 ] [ Difficulty ] ;
 557: LD_ADDR_EXP 38
 561: PUSH
 562: LD_INT 25200
 564: PUSH
 565: LD_INT 23100
 567: PUSH
 568: LD_INT 21000
 570: PUSH
 571: LD_INT 21000
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// end ;
 586: LD_VAR 0 1
 590: RET
// every 0 0$1 trigger debugMode do var i ;
 591: LD_EXP 33
 595: IFFALSE 910
 597: GO 599
 599: DISABLE
 600: LD_INT 0
 602: PPUSH
// begin enable ;
 603: ENABLE
// FogOff ( your_side ) ;
 604: LD_OWVAR 2
 608: PPUSH
 609: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 613: LD_ADDR_VAR 0 1
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_OWVAR 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 2
 632: PUSH
 633: LD_INT 21
 635: PUSH
 636: LD_INT 1
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 21
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PPUSH
 662: CALL_OW 69
 666: PUSH
 667: FOR_IN
 668: IFFALSE 684
// SetLives ( i , 1000 ) ;
 670: LD_VAR 0 1
 674: PPUSH
 675: LD_INT 1000
 677: PPUSH
 678: CALL_OW 234
 682: GO 667
 684: POP
 685: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 686: LD_ADDR_VAR 0 1
 690: PUSH
 691: LD_INT 22
 693: PUSH
 694: LD_OWVAR 2
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PUSH
 703: LD_INT 21
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PPUSH
 717: CALL_OW 69
 721: PUSH
 722: FOR_IN
 723: IFFALSE 787
// begin SetSkill ( i , skill_combat , 10 ) ;
 725: LD_VAR 0 1
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 10
 735: PPUSH
 736: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 740: LD_VAR 0 1
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 10
 750: PPUSH
 751: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 755: LD_VAR 0 1
 759: PPUSH
 760: LD_INT 3
 762: PPUSH
 763: LD_INT 10
 765: PPUSH
 766: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 4
 777: PPUSH
 778: LD_INT 10
 780: PPUSH
 781: CALL_OW 237
// end ;
 785: GO 722
 787: POP
 788: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 789: LD_ADDR_VAR 0 1
 793: PUSH
 794: LD_INT 22
 796: PUSH
 797: LD_OWVAR 2
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PUSH
 806: LD_INT 2
 808: PUSH
 809: LD_INT 30
 811: PUSH
 812: LD_INT 0
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PUSH
 819: LD_INT 30
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 69
 842: PUSH
 843: FOR_IN
 844: IFFALSE 908
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 274
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 9999
 861: PPUSH
 862: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 866: LD_VAR 0 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 2
 878: PPUSH
 879: LD_INT 9999
 881: PPUSH
 882: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 886: LD_VAR 0 1
 890: PPUSH
 891: CALL_OW 274
 895: PPUSH
 896: LD_INT 3
 898: PPUSH
 899: LD_INT 9999
 901: PPUSH
 902: CALL_OW 277
// end ;
 906: GO 843
 908: POP
 909: POP
// end ; end_of_file
 910: PPOPN 1
 912: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor , Boris ; export ConvoyBoris , ConvoyIbrahim ; export function PrepareRussians ; begin
 913: LD_INT 0
 915: PPUSH
// PrepareHeroes ;
 916: CALL 925 0 0
// end ;
 920: LD_VAR 0 1
 924: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , bigCargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 925: LD_INT 0
 927: PPUSH
 928: PPUSH
 929: PPUSH
 930: PPUSH
 931: PPUSH
 932: PPUSH
 933: PPUSH
 934: PPUSH
 935: PPUSH
 936: PPUSH
 937: PPUSH
 938: PPUSH
 939: PPUSH
// point = [ 170 , 208 ] ;
 940: LD_ADDR_VAR 0 8
 944: PUSH
 945: LD_INT 170
 947: PUSH
 948: LD_INT 208
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 955: LD_ADDR_VAR 0 9
 959: PUSH
 960: LD_INT 1
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 517
 970: ST_TO_ADDR
// uc_side = 3 ;
 971: LD_ADDR_OWVAR 20
 975: PUSH
 976: LD_INT 3
 978: ST_TO_ADDR
// uc_nation = 3 ;
 979: LD_ADDR_OWVAR 21
 983: PUSH
 984: LD_INT 3
 986: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 987: LD_ADDR_EXP 39
 991: PUSH
 992: LD_STRING Burlak
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL 11785 0 3
1005: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1006: LD_ADDR_EXP 44
1010: PUSH
1011: LD_STRING Titov
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 11785 0 3
1024: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1025: LD_ADDR_EXP 45
1029: PUSH
1030: LD_STRING Dolgov
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL 11785 0 3
1043: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1044: LD_ADDR_EXP 46
1048: PUSH
1049: LD_STRING Lipshchin
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL 11785 0 3
1062: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Karamazov
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: CALL 11785 0 3
1081: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1082: LD_ADDR_EXP 41
1086: PUSH
1087: LD_STRING Petrovova
1089: PPUSH
1090: LD_INT 1
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL 11785 0 3
1100: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1101: LD_ADDR_EXP 42
1105: PUSH
1106: LD_STRING Gleb
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL 11785 0 3
1119: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1120: LD_ADDR_EXP 43
1124: PUSH
1125: LD_STRING Petrosyan
1127: PPUSH
1128: LD_INT 1
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: CALL 11785 0 3
1138: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1139: LD_ADDR_EXP 47
1143: PUSH
1144: LD_STRING Platonov
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_INT 0
1152: PPUSH
1153: CALL 11785 0 3
1157: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1158: LD_STRING 04_Kirilenkova
1160: PPUSH
1161: CALL_OW 28
1165: IFFALSE 1192
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1167: LD_ADDR_EXP 48
1171: PUSH
1172: LD_STRING 04_Kirilenkova
1174: PPUSH
1175: CALL_OW 34
1179: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1180: LD_EXP 48
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1192: LD_STRING 04_Belkov
1194: PPUSH
1195: CALL_OW 28
1199: IFFALSE 1226
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1201: LD_ADDR_EXP 49
1205: PUSH
1206: LD_STRING 04_Belkov
1208: PPUSH
1209: CALL_OW 34
1213: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1214: LD_EXP 49
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1226: LD_STRING 04_Belkov2
1228: PPUSH
1229: CALL_OW 28
1233: IFFALSE 1260
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1235: LD_ADDR_EXP 50
1239: PUSH
1240: LD_STRING 04_Belkov2
1242: PPUSH
1243: CALL_OW 34
1247: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1248: LD_EXP 50
1252: PPUSH
1253: LD_INT 1
1255: PPUSH
1256: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: DOUBLE
1266: LD_INT 1
1268: DEC
1269: ST_TO_ADDR
1270: LD_EXP 1
1274: PUSH
1275: FOR_TO
1276: IFFALSE 1938
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_EXP 1
1287: PUSH
1288: LD_VAR 0 2
1292: ARRAY
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1298: LD_ADDR_OWVAR 37
1302: PUSH
1303: LD_EXP 1
1307: PUSH
1308: LD_VAR 0 2
1312: ARRAY
1313: PUSH
1314: LD_INT 2
1316: ARRAY
1317: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1318: LD_ADDR_OWVAR 39
1322: PUSH
1323: LD_EXP 1
1327: PUSH
1328: LD_VAR 0 2
1332: ARRAY
1333: PUSH
1334: LD_INT 3
1336: ARRAY
1337: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1338: LD_ADDR_OWVAR 38
1342: PUSH
1343: LD_EXP 1
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: PUSH
1354: LD_INT 4
1356: ARRAY
1357: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1358: LD_ADDR_OWVAR 40
1362: PUSH
1363: LD_EXP 1
1367: PUSH
1368: LD_VAR 0 2
1372: ARRAY
1373: PUSH
1374: LD_INT 5
1376: ARRAY
1377: ST_TO_ADDR
// uc_direction := 0 ;
1378: LD_ADDR_OWVAR 24
1382: PUSH
1383: LD_INT 0
1385: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1386: LD_ADDR_OWVAR 41
1390: PUSH
1391: LD_INT 10
1393: PPUSH
1394: LD_INT 15
1396: PPUSH
1397: CALL_OW 12
1401: ST_TO_ADDR
// car := CreateVehicle ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: CALL_OW 45
1411: ST_TO_ADDR
// distance = 999 ;
1412: LD_ADDR_VAR 0 12
1416: PUSH
1417: LD_INT 999
1419: ST_TO_ADDR
// index = 1 ;
1420: LD_ADDR_VAR 0 13
1424: PUSH
1425: LD_INT 1
1427: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1428: LD_ADDR_VAR 0 3
1432: PUSH
1433: DOUBLE
1434: LD_INT 1
1436: DEC
1437: ST_TO_ADDR
1438: LD_VAR 0 9
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PUSH
1447: FOR_TO
1448: IFFALSE 1619
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1450: LD_VAR 0 8
1454: PUSH
1455: LD_INT 1
1457: ARRAY
1458: PPUSH
1459: LD_VAR 0 8
1463: PUSH
1464: LD_INT 2
1466: ARRAY
1467: PPUSH
1468: LD_VAR 0 9
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PPUSH
1483: LD_VAR 0 9
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PUSH
1492: LD_VAR 0 3
1496: ARRAY
1497: PPUSH
1498: CALL_OW 298
1502: PUSH
1503: LD_VAR 0 12
1507: LESS
1508: IFFALSE 1617
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1510: LD_ADDR_VAR 0 12
1514: PUSH
1515: LD_VAR 0 8
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: LD_VAR 0 8
1528: PUSH
1529: LD_INT 2
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 9
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PPUSH
1563: CALL_OW 298
1567: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1568: LD_ADDR_VAR 0 10
1572: PUSH
1573: LD_VAR 0 9
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PUSH
1582: LD_VAR 0 3
1586: ARRAY
1587: PUSH
1588: LD_VAR 0 9
1592: PUSH
1593: LD_INT 2
1595: ARRAY
1596: PUSH
1597: LD_VAR 0 3
1601: ARRAY
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
// index = j ;
1607: LD_ADDR_VAR 0 13
1611: PUSH
1612: LD_VAR 0 3
1616: ST_TO_ADDR
// end ; end ;
1617: GO 1447
1619: POP
1620: POP
// if not burlakPosition then
1621: LD_VAR 0 11
1625: NOT
1626: IFFALSE 1638
// burlakPosition = nearPosition ;
1628: LD_ADDR_VAR 0 11
1632: PUSH
1633: LD_VAR 0 10
1637: ST_TO_ADDR
// if areaPoints then
1638: LD_VAR 0 9
1642: IFFALSE 1690
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1644: LD_ADDR_VAR 0 9
1648: PUSH
1649: LD_VAR 0 9
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: LD_VAR 0 13
1661: PPUSH
1662: CALL 12614 0 3
1666: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1667: LD_ADDR_VAR 0 9
1671: PUSH
1672: LD_VAR 0 9
1676: PPUSH
1677: LD_INT 2
1679: PPUSH
1680: LD_VAR 0 13
1684: PPUSH
1685: CALL 12614 0 3
1689: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1690: LD_VAR 0 4
1694: PPUSH
1695: LD_VAR 0 10
1699: PUSH
1700: LD_INT 1
1702: ARRAY
1703: PPUSH
1704: LD_VAR 0 10
1708: PUSH
1709: LD_INT 2
1711: ARRAY
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1720: LD_EXP 1
1724: PUSH
1725: LD_VAR 0 2
1729: ARRAY
1730: PUSH
1731: LD_INT 6
1733: ARRAY
1734: PUSH
1735: LD_STRING Bur
1737: DOUBLE
1738: EQUAL
1739: IFTRUE 1743
1741: GO 1760
1743: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1744: LD_EXP 39
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL_OW 52
1758: GO 1936
1760: LD_STRING Kar
1762: DOUBLE
1763: EQUAL
1764: IFTRUE 1768
1766: GO 1785
1768: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1769: LD_EXP 40
1773: PPUSH
1774: LD_VAR 0 4
1778: PPUSH
1779: CALL_OW 52
1783: GO 1936
1785: LD_STRING Ptr
1787: DOUBLE
1788: EQUAL
1789: IFTRUE 1793
1791: GO 1810
1793: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1794: LD_EXP 41
1798: PPUSH
1799: LD_VAR 0 4
1803: PPUSH
1804: CALL_OW 52
1808: GO 1936
1810: LD_STRING Glb
1812: DOUBLE
1813: EQUAL
1814: IFTRUE 1818
1816: GO 1835
1818: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1819: LD_EXP 42
1823: PPUSH
1824: LD_VAR 0 4
1828: PPUSH
1829: CALL_OW 52
1833: GO 1936
1835: LD_STRING Pet
1837: DOUBLE
1838: EQUAL
1839: IFTRUE 1843
1841: GO 1860
1843: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1844: LD_EXP 43
1848: PPUSH
1849: LD_VAR 0 4
1853: PPUSH
1854: CALL_OW 52
1858: GO 1936
1860: LD_STRING Dol
1862: DOUBLE
1863: EQUAL
1864: IFTRUE 1868
1866: GO 1885
1868: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1869: LD_EXP 45
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL_OW 52
1883: GO 1936
1885: LD_STRING Lip
1887: DOUBLE
1888: EQUAL
1889: IFTRUE 1893
1891: GO 1910
1893: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1894: LD_EXP 46
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL_OW 52
1908: GO 1936
1910: LD_STRING Tit
1912: DOUBLE
1913: EQUAL
1914: IFTRUE 1918
1916: GO 1935
1918: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1919: LD_EXP 44
1923: PPUSH
1924: LD_VAR 0 4
1928: PPUSH
1929: CALL_OW 52
1933: GO 1936
1935: POP
// end ;
1936: GO 1275
1938: POP
1939: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
1940: LD_ADDR_VAR 0 6
1944: PUSH
1945: LD_INT 22
1947: PUSH
1948: LD_INT 3
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 21
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 34
1970: PUSH
1971: LD_INT 51
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 34
1980: PUSH
1981: LD_INT 32
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 34
1990: PUSH
1991: LD_INT 12
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
2014: LD_ADDR_VAR 0 7
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 21
2031: PUSH
2032: LD_INT 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 34
2041: PUSH
2042: LD_INT 89
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PPUSH
2054: CALL_OW 69
2058: ST_TO_ADDR
// if cargoList then
2059: LD_VAR 0 6
2063: IFFALSE 2253
// for i = 1 to cargoList do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_VAR 0 6
2079: PUSH
2080: FOR_TO
2081: IFFALSE 2251
// if resourcesFrom05 then
2083: LD_EXP 2
2087: IFFALSE 2249
// begin if not resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2089: LD_EXP 2
2093: PUSH
2094: LD_VAR 0 2
2098: ARRAY
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PUSH
2104: LD_INT 100
2106: GREATER
2107: NOT
2108: PUSH
2109: LD_EXP 2
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 2
2122: ARRAY
2123: PUSH
2124: LD_INT 100
2126: GREATER
2127: OR
2128: PUSH
2129: LD_EXP 2
2133: PUSH
2134: LD_VAR 0 2
2138: ARRAY
2139: PUSH
2140: LD_INT 3
2142: ARRAY
2143: PUSH
2144: LD_INT 100
2146: GREATER
2147: OR
2148: IFFALSE 2249
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2150: LD_VAR 0 6
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 1
2163: PPUSH
2164: LD_EXP 2
2168: PUSH
2169: LD_VAR 0 2
2173: ARRAY
2174: PUSH
2175: LD_INT 1
2177: ARRAY
2178: PPUSH
2179: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2183: LD_VAR 0 6
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: LD_EXP 2
2201: PUSH
2202: LD_VAR 0 2
2206: ARRAY
2207: PUSH
2208: LD_INT 2
2210: ARRAY
2211: PPUSH
2212: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2216: LD_VAR 0 6
2220: PUSH
2221: LD_VAR 0 2
2225: ARRAY
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: PUSH
2241: LD_INT 3
2243: ARRAY
2244: PPUSH
2245: CALL_OW 291
// end ; end ;
2249: GO 2080
2251: POP
2252: POP
// if bigCargoList then
2253: LD_VAR 0 7
2257: IFFALSE 2446
// for i = 1 to bigCargoList do
2259: LD_ADDR_VAR 0 2
2263: PUSH
2264: DOUBLE
2265: LD_INT 1
2267: DEC
2268: ST_TO_ADDR
2269: LD_VAR 0 7
2273: PUSH
2274: FOR_TO
2275: IFFALSE 2444
// if resourcesFrom05 then
2277: LD_EXP 2
2281: IFFALSE 2442
// begin if resourcesFrom05 [ i ] [ 1 ] > 100 or resourcesFrom05 [ i ] [ 2 ] > 100 or resourcesFrom05 [ i ] [ 3 ] > 100 then
2283: LD_EXP 2
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PUSH
2298: LD_INT 100
2300: GREATER
2301: PUSH
2302: LD_EXP 2
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: PUSH
2313: LD_INT 2
2315: ARRAY
2316: PUSH
2317: LD_INT 100
2319: GREATER
2320: OR
2321: PUSH
2322: LD_EXP 2
2326: PUSH
2327: LD_VAR 0 2
2331: ARRAY
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PUSH
2337: LD_INT 100
2339: GREATER
2340: OR
2341: IFFALSE 2442
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2343: LD_VAR 0 7
2347: PUSH
2348: LD_VAR 0 2
2352: ARRAY
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: LD_EXP 2
2361: PUSH
2362: LD_VAR 0 2
2366: ARRAY
2367: PUSH
2368: LD_INT 1
2370: ARRAY
2371: PPUSH
2372: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2376: LD_VAR 0 7
2380: PUSH
2381: LD_VAR 0 2
2385: ARRAY
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: LD_EXP 2
2394: PUSH
2395: LD_VAR 0 2
2399: ARRAY
2400: PUSH
2401: LD_INT 2
2403: ARRAY
2404: PPUSH
2405: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2409: LD_VAR 0 7
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_EXP 2
2427: PUSH
2428: LD_VAR 0 2
2432: ARRAY
2433: PUSH
2434: LD_INT 3
2436: ARRAY
2437: PPUSH
2438: CALL_OW 291
// end ; end ;
2442: GO 2274
2444: POP
2445: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2446: LD_INT 22
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 21
2458: PUSH
2459: LD_INT 1
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 23
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 25
2478: PUSH
2479: LD_INT 2
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 69
2496: NOT
2497: IFFALSE 2602
// begin if IsOk ( Lipshchin ) then
2499: LD_EXP 46
2503: PPUSH
2504: CALL_OW 302
2508: IFFALSE 2524
// SetClass ( Lipshchin , class_engineer ) else
2510: LD_EXP 46
2514: PPUSH
2515: LD_INT 2
2517: PPUSH
2518: CALL_OW 336
2522: GO 2602
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2524: LD_ADDR_VAR 0 5
2528: PUSH
2529: LD_INT 22
2531: PUSH
2532: LD_INT 3
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 21
2541: PUSH
2542: LD_INT 1
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 50
2561: PUSH
2562: EMPTY
2563: LIST
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2576: LD_VAR 0 5
2580: PUSH
2581: LD_INT 0
2583: PPUSH
2584: LD_VAR 0 5
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_EXP 5
2612: PUSH
2613: LD_INT 1
2615: ARRAY
2616: PPUSH
2617: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 3
2626: PPUSH
2627: LD_EXP 5
2631: PUSH
2632: LD_INT 2
2634: ARRAY
2635: PPUSH
2636: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2640: LD_INT 11
2642: PPUSH
2643: LD_INT 3
2645: PPUSH
2646: LD_EXP 5
2650: PUSH
2651: LD_INT 3
2653: ARRAY
2654: PPUSH
2655: CALL_OW 322
// end ;
2659: LD_VAR 0 1
2663: RET
// export function PrepareVsevolod ; var i , un ; begin
2664: LD_INT 0
2666: PPUSH
2667: PPUSH
2668: PPUSH
// uc_side = 6 ;
2669: LD_ADDR_OWVAR 20
2673: PUSH
2674: LD_INT 6
2676: ST_TO_ADDR
// uc_nation = 3 ;
2677: LD_ADDR_OWVAR 21
2681: PUSH
2682: LD_INT 3
2684: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2685: LD_ADDR_EXP 52
2689: PUSH
2690: EMPTY
2691: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2692: LD_ADDR_EXP 51
2696: PUSH
2697: LD_STRING Vsevolod
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: LD_INT 1
2705: PPUSH
2706: CALL 11785 0 3
2710: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2711: LD_EXP 51
2715: PPUSH
2716: LD_INT 7
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2726: LD_ADDR_EXP 52
2730: PUSH
2731: LD_EXP 52
2735: PUSH
2736: LD_EXP 51
2740: ADD
2741: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_engineer ) ;
2742: LD_ADDR_EXP 53
2746: PUSH
2747: LD_STRING SPetr
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: LD_INT 2
2755: PPUSH
2756: CALL 11785 0 3
2760: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2761: LD_EXP 53
2765: PPUSH
2766: LD_INT 7
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2776: LD_ADDR_EXP 52
2780: PUSH
2781: LD_EXP 52
2785: PUSH
2786: LD_EXP 53
2790: ADD
2791: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2792: LD_ADDR_EXP 54
2796: PUSH
2797: LD_STRING SIgor
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: CALL 11785 0 3
2810: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2811: LD_EXP 54
2815: PPUSH
2816: LD_INT 7
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2826: LD_ADDR_EXP 52
2830: PUSH
2831: LD_EXP 52
2835: PUSH
2836: LD_EXP 54
2840: ADD
2841: ST_TO_ADDR
// Boris = PrepareUnitExt ( SBoris , false , class_soldier ) ;
2842: LD_ADDR_EXP 55
2846: PUSH
2847: LD_STRING SBoris
2849: PPUSH
2850: LD_INT 0
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: CALL 11785 0 3
2860: ST_TO_ADDR
// PlaceUnitArea ( Boris , VsevolodSpawnArea , false ) ;
2861: LD_EXP 55
2865: PPUSH
2866: LD_INT 7
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Boris ;
2876: LD_ADDR_EXP 52
2880: PUSH
2881: LD_EXP 52
2885: PUSH
2886: LD_EXP 55
2890: ADD
2891: ST_TO_ADDR
// end ;
2892: LD_VAR 0 1
2896: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
// uc_side = 3 ;
2903: LD_ADDR_OWVAR 20
2907: PUSH
2908: LD_INT 3
2910: ST_TO_ADDR
// uc_nation = 3 ;
2911: LD_ADDR_OWVAR 21
2915: PUSH
2916: LD_INT 3
2918: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2919: LD_INT 0
2921: PPUSH
2922: LD_INT 4
2924: PPUSH
2925: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2929: LD_INT 22
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 43
2940: PUSH
2941: LD_INT 44
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 1
2950: PPUSH
2951: LD_INT 2
2953: PPUSH
2954: CALL_OW 12
2958: ARRAY
2959: PPUSH
2960: LD_INT 50
2962: PPUSH
2963: LD_INT 60
2965: PPUSH
2966: CALL_OW 12
2970: PPUSH
2971: CALL 49144 0 5
// veh = CreateVehicle ;
2975: LD_ADDR_VAR 0 4
2979: PUSH
2980: CALL_OW 45
2984: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2985: LD_VAR 0 4
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2997: LD_VAR 0 4
3001: PPUSH
3002: LD_INT 134
3004: PPUSH
3005: LD_INT 230
3007: PPUSH
3008: LD_INT 0
3010: PPUSH
3011: CALL_OW 48
// if Belkov then
3015: LD_EXP 49
3019: IFFALSE 3037
// PlaceHumanInUnit ( Belkov , veh ) else
3021: LD_EXP 49
3025: PPUSH
3026: LD_VAR 0 4
3030: PPUSH
3031: CALL_OW 52
3035: GO 3090
// if Difficulty = 1 or Difficulty = 2 then
3037: LD_OWVAR 67
3041: PUSH
3042: LD_INT 1
3044: EQUAL
3045: PUSH
3046: LD_OWVAR 67
3050: PUSH
3051: LD_INT 2
3053: EQUAL
3054: OR
3055: IFFALSE 3090
// begin ConvoyBoris = PrepareUnitExt ( SCBoris , false , class_soldier ) ;
3057: LD_ADDR_EXP 56
3061: PUSH
3062: LD_STRING SCBoris
3064: PPUSH
3065: LD_INT 0
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL 11785 0 3
3075: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyBoris , veh ) ;
3076: LD_EXP 56
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3090: LD_INT 22
3092: PPUSH
3093: LD_INT 1
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 51
3101: PPUSH
3102: LD_INT 50
3104: PPUSH
3105: LD_INT 60
3107: PPUSH
3108: CALL_OW 12
3112: PPUSH
3113: CALL 49144 0 5
// veh = CreateVehicle ;
3117: LD_ADDR_VAR 0 4
3121: PUSH
3122: CALL_OW 45
3126: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3127: LD_VAR 0 4
3131: PPUSH
3132: LD_INT 0
3134: PPUSH
3135: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
3139: LD_VAR 0 4
3143: PPUSH
3144: LD_INT 134
3146: PPUSH
3147: LD_INT 233
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3157: LD_VAR 0 4
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: LD_INT 100
3167: PPUSH
3168: CALL_OW 290
// if Belkov2 then
3172: LD_EXP 50
3176: IFFALSE 3194
// PlaceHumanInUnit ( Belkov2 , veh ) else
3178: LD_EXP 50
3182: PPUSH
3183: LD_VAR 0 4
3187: PPUSH
3188: CALL_OW 52
3192: GO 3237
// if Difficulty = 1 then
3194: LD_OWVAR 67
3198: PUSH
3199: LD_INT 1
3201: EQUAL
3202: IFFALSE 3237
// begin ConvoyIbrahim = PrepareUnitExt ( SCIbrahim , false , class_soldier ) ;
3204: LD_ADDR_EXP 57
3208: PUSH
3209: LD_STRING SCIbrahim
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: LD_INT 1
3217: PPUSH
3218: CALL 11785 0 3
3222: ST_TO_ADDR
// PlaceHumanInUnit ( ConvoyIbrahim , veh ) ;
3223: LD_EXP 57
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL_OW 52
// end ; if Kirilenkova then
3237: LD_EXP 48
3241: IFFALSE 3339
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3243: LD_INT 22
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 51
3254: PPUSH
3255: LD_INT 50
3257: PPUSH
3258: LD_INT 60
3260: PPUSH
3261: CALL_OW 12
3265: PPUSH
3266: CALL 49144 0 5
// veh = CreateVehicle ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: CALL_OW 45
3279: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
3292: LD_VAR 0 4
3296: PPUSH
3297: LD_INT 134
3299: PPUSH
3300: LD_INT 236
3302: PPUSH
3303: LD_INT 0
3305: PPUSH
3306: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
3310: LD_VAR 0 4
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: LD_INT 100
3320: PPUSH
3321: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
3325: LD_EXP 48
3329: PPUSH
3330: LD_VAR 0 4
3334: PPUSH
3335: CALL_OW 52
// end ; end ; end_of_file
3339: LD_VAR 0 1
3343: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
3344: LD_INT 0
3346: PPUSH
// PrepareOvsyenko ;
3347: CALL 3364 0 0
// PrepareTerminal ;
3351: CALL 3565 0 0
// PrepareMainAmericanBase ;
3355: CALL 3648 0 0
// end ;
3359: LD_VAR 0 1
3363: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
// uc_side = 1 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
// uc_nation = nation_american ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiersAmount = 3 ;
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: LD_INT 3
3391: ST_TO_ADDR
// if fastBreakthrough then
3392: LD_EXP 3
3396: IFFALSE 3414
// begin RemoveUnit ( ovs_bun2 ) ;
3398: LD_INT 229
3400: PPUSH
3401: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3405: LD_INT 258
3407: PPUSH
3408: CALL_OW 64
// end else
3412: GO 3422
// soldiersAmount = 4 ;
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: LD_INT 4
3421: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3422: LD_ADDR_EXP 59
3426: PUSH
3427: LD_INT 86
3429: PPUSH
3430: LD_INT 3
3432: PPUSH
3433: LD_STRING ovsyenko
3435: PPUSH
3436: LD_EXP 34
3440: PPUSH
3441: LD_EXP 35
3445: PUSH
3446: LD_INT 50
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_VAR 0 2
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: LD_INT 0
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: PPUSH
3480: CALL 12686 0 7
3484: ST_TO_ADDR
// case Difficulty of 1 :
3485: LD_OWVAR 67
3489: PUSH
3490: LD_INT 1
3492: DOUBLE
3493: EQUAL
3494: IFTRUE 3498
3496: GO 3511
3498: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3499: LD_INT 97
3501: PPUSH
3502: LD_INT 5
3504: PPUSH
3505: CALL_OW 431
3509: GO 3560
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3532
3519: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 .. 4 :
3520: LD_INT 97
3522: PPUSH
3523: LD_INT 3
3525: PPUSH
3526: CALL_OW 431
3530: GO 3560
3532: LD_INT 3
3534: DOUBLE
3535: GREATEREQUAL
3536: IFFALSE 3544
3538: LD_INT 4
3540: DOUBLE
3541: LESSEQUAL
3542: IFTRUE 3546
3544: GO 3559
3546: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3547: LD_INT 97
3549: PPUSH
3550: LD_INT 4
3552: PPUSH
3553: CALL_OW 431
3557: GO 3560
3559: POP
// end ;
3560: LD_VAR 0 1
3564: RET
// function PrepareTerminal ; begin
3565: LD_INT 0
3567: PPUSH
// uc_side = 1 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 1
3575: ST_TO_ADDR
// uc_nation = nation_american ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 1
3583: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3584: LD_ADDR_EXP 60
3588: PUSH
3589: LD_INT 168
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_STRING terminal
3597: PPUSH
3598: LD_EXP 34
3602: PPUSH
3603: LD_INT 100
3605: PUSH
3606: LD_INT 50
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PUSH
3623: LD_INT 1
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL 12686 0 7
3642: ST_TO_ADDR
// end ;
3643: LD_VAR 0 1
3647: RET
// function PrepareMainAmericanBase ; begin
3648: LD_INT 0
3650: PPUSH
// uc_side = 1 ;
3651: LD_ADDR_OWVAR 20
3655: PUSH
3656: LD_INT 1
3658: ST_TO_ADDR
// uc_nation = nation_american ;
3659: LD_ADDR_OWVAR 21
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// if fastBreakthrough then
3667: LD_EXP 3
3671: IFFALSE 3680
// RemoveUnit ( ovs_bun2 ) ;
3673: LD_INT 229
3675: PPUSH
3676: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3680: LD_ADDR_EXP 61
3684: PUSH
3685: LD_INT 106
3687: PPUSH
3688: LD_INT 5
3690: PPUSH
3691: LD_STRING 
3693: PPUSH
3694: LD_EXP 34
3698: PPUSH
3699: LD_INT 3000
3701: PUSH
3702: LD_INT 1000
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 9
3718: PUSH
3719: LD_INT 3
3721: PUSH
3722: LD_INT 6
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PPUSH
3734: CALL 12686 0 7
3738: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3739: LD_ADDR_EXP 58
3743: PUSH
3744: LD_STRING VanHouten
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: LD_INT 1
3752: PPUSH
3753: CALL 11785 0 3
3757: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3758: LD_ADDR_EXP 61
3762: PUSH
3763: LD_EXP 61
3767: PUSH
3768: LD_EXP 58
3772: ADD
3773: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3774: LD_EXP 58
3778: PPUSH
3779: LD_INT 35
3781: PPUSH
3782: LD_INT 57
3784: PPUSH
3785: LD_INT 3
3787: PPUSH
3788: LD_INT 0
3790: PPUSH
3791: CALL_OW 50
// end ;
3795: LD_VAR 0 1
3799: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3800: LD_INT 0
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
// uc_side = 1 ;
3806: LD_ADDR_OWVAR 20
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// uc_nation = nation_american ;
3814: LD_ADDR_OWVAR 21
3818: PUSH
3819: LD_INT 1
3821: ST_TO_ADDR
// for i := 1 to trapAmount do
3822: LD_ADDR_VAR 0 2
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_EXP 37
3836: PUSH
3837: FOR_TO
3838: IFFALSE 3972
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3840: LD_INT 0
3842: PPUSH
3843: LD_EXP 34
3847: PPUSH
3848: CALL_OW 381
// un = CreateHuman ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3862: LD_ADDR_EXP 62
3866: PUSH
3867: LD_EXP 62
3871: PUSH
3872: LD_VAR 0 3
3876: ADD
3877: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_INT 11
3885: PPUSH
3886: LD_INT 0
3888: PPUSH
3889: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3893: LD_ADDR_VAR 0 4
3897: PUSH
3898: LD_INT 22
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: PPUSH
3911: CALL_OW 69
3915: PPUSH
3916: LD_VAR 0 3
3920: PPUSH
3921: CALL_OW 74
3925: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3926: LD_VAR 0 3
3930: PPUSH
3931: LD_VAR 0 4
3935: PPUSH
3936: CALL_OW 250
3940: PPUSH
3941: LD_VAR 0 4
3945: PPUSH
3946: CALL_OW 251
3950: PPUSH
3951: CALL_OW 114
// AddComAgressiveMove ( un , 106 , 124 ) ;
3955: LD_VAR 0 3
3959: PPUSH
3960: LD_INT 106
3962: PPUSH
3963: LD_INT 124
3965: PPUSH
3966: CALL_OW 174
// end ;
3970: GO 3837
3972: POP
3973: POP
// end ;
3974: LD_VAR 0 1
3978: RET
// export function PrepareSoldiersInBunkers ; begin
3979: LD_INT 0
3981: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3982: LD_EXP 34
3986: PPUSH
3987: LD_INT 236
3989: PPUSH
3990: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3994: LD_EXP 34
3998: PPUSH
3999: LD_INT 240
4001: PPUSH
4002: CALL 15230 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
4006: LD_EXP 34
4010: PPUSH
4011: LD_INT 243
4013: PPUSH
4014: CALL 15230 0 2
// end ;
4018: LD_VAR 0 1
4022: RET
// export function PrepareConvoy ; var i , un , veh ; begin
4023: LD_INT 0
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// convoyTeam = [ ] ;
4029: LD_ADDR_EXP 63
4033: PUSH
4034: EMPTY
4035: ST_TO_ADDR
// uc_side = 1 ;
4036: LD_ADDR_OWVAR 20
4040: PUSH
4041: LD_INT 1
4043: ST_TO_ADDR
// uc_nation = nation_american ;
4044: LD_ADDR_OWVAR 21
4048: PUSH
4049: LD_INT 1
4051: ST_TO_ADDR
// for i := 1 to 2 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 2
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4197
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 12
4079: PPUSH
4080: LD_INT 80
4082: PPUSH
4083: CALL 49144 0 5
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 100
4107: PPUSH
4108: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
4112: LD_ADDR_EXP 63
4116: PUSH
4117: LD_EXP 63
4121: PUSH
4122: LD_VAR 0 4
4126: ADD
4127: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 8
4135: PPUSH
4136: LD_INT 0
4138: PPUSH
4139: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4143: LD_INT 0
4145: PPUSH
4146: LD_EXP 34
4150: PPUSH
4151: CALL_OW 383
// un = CreateHuman ;
4155: LD_ADDR_VAR 0 3
4159: PUSH
4160: CALL_OW 44
4164: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
4165: LD_ADDR_EXP 63
4169: PUSH
4170: LD_EXP 63
4174: PUSH
4175: LD_VAR 0 3
4179: ADD
4180: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4181: LD_VAR 0 3
4185: PPUSH
4186: LD_VAR 0 4
4190: PPUSH
4191: CALL_OW 52
// end ;
4195: GO 4065
4197: POP
4198: POP
// end ;
4199: LD_VAR 0 1
4203: RET
// export function PrepareAttack ; var i , un , veh ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
4208: PPUSH
4209: PPUSH
// uc_side = 1 ;
4210: LD_ADDR_OWVAR 20
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// uc_nation = nation_american ;
4218: LD_ADDR_OWVAR 21
4222: PUSH
4223: LD_INT 1
4225: ST_TO_ADDR
// for i := 1 to 4 do
4226: LD_ADDR_VAR 0 2
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_INT 4
4238: PUSH
4239: FOR_TO
4240: IFFALSE 4379
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
4242: LD_INT 3
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: LD_INT 3
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: LD_INT 4
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PPUSH
4271: CALL_OW 12
4275: ARRAY
4276: PPUSH
4277: LD_INT 80
4279: PPUSH
4280: CALL 49144 0 5
// veh = CreateVehicle ;
4284: LD_ADDR_VAR 0 4
4288: PUSH
4289: CALL_OW 45
4293: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
4294: LD_ADDR_EXP 64
4298: PUSH
4299: LD_EXP 64
4303: PUSH
4304: LD_VAR 0 4
4308: ADD
4309: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_INT 17
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4325: LD_INT 0
4327: PPUSH
4328: LD_EXP 34
4332: PPUSH
4333: CALL_OW 383
// un = CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4347: LD_ADDR_EXP 64
4351: PUSH
4352: LD_EXP 64
4356: PUSH
4357: LD_VAR 0 3
4361: ADD
4362: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: CALL_OW 52
// end ;
4377: GO 4239
4379: POP
4380: POP
// for i := 1 to 3 do
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: DOUBLE
4387: LD_INT 1
4389: DEC
4390: ST_TO_ADDR
4391: LD_INT 3
4393: PUSH
4394: FOR_TO
4395: IFFALSE 4452
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4397: LD_INT 0
4399: PPUSH
4400: LD_EXP 34
4404: PPUSH
4405: CALL_OW 381
// un = CreateHuman ;
4409: LD_ADDR_VAR 0 3
4413: PUSH
4414: CALL_OW 44
4418: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4419: LD_ADDR_EXP 64
4423: PUSH
4424: LD_EXP 64
4428: PUSH
4429: LD_VAR 0 3
4433: ADD
4434: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4435: LD_VAR 0 3
4439: PPUSH
4440: LD_INT 17
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4394
4452: POP
4453: POP
// end ; end_of_file
4454: LD_VAR 0 1
4458: RET
// export function Nef_PrepareNature ; var i , un ; begin
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4464: LD_ADDR_VAR 0 2
4468: PUSH
4469: DOUBLE
4470: LD_INT 1
4472: DEC
4473: ST_TO_ADDR
4474: LD_EXP 28
4478: PUSH
4479: LD_INT 1
4481: ARRAY
4482: PUSH
4483: FOR_TO
4484: IFFALSE 4594
// begin uc_side = 0 ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_INT 0
4493: ST_TO_ADDR
// uc_nation = nation_nature ;
4494: LD_ADDR_OWVAR 21
4498: PUSH
4499: LD_INT 0
4501: ST_TO_ADDR
// hc_class = class_apeman ;
4502: LD_ADDR_OWVAR 28
4506: PUSH
4507: LD_INT 12
4509: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4510: LD_ADDR_OWVAR 31
4514: PUSH
4515: LD_EXP 29
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PUSH
4524: LD_EXP 29
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PUSH
4533: LD_EXP 29
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PUSH
4542: LD_EXP 29
4546: PUSH
4547: LD_INT 4
4549: ARRAY
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4557: LD_ADDR_OWVAR 35
4561: PUSH
4562: LD_EXP 30
4566: ST_TO_ADDR
// un = CreateHuman ;
4567: LD_ADDR_VAR 0 3
4571: PUSH
4572: CALL_OW 44
4576: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4577: LD_VAR 0 3
4581: PPUSH
4582: LD_INT 2
4584: PPUSH
4585: LD_INT 0
4587: PPUSH
4588: CALL_OW 49
// end ;
4592: GO 4483
4594: POP
4595: POP
// for i := 1 to animalsAmount [ 2 ] do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_EXP 28
4610: PUSH
4611: LD_INT 2
4613: ARRAY
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4726
// begin uc_side = 0 ;
4618: LD_ADDR_OWVAR 20
4622: PUSH
4623: LD_INT 0
4625: ST_TO_ADDR
// uc_nation = nation_nature ;
4626: LD_ADDR_OWVAR 21
4630: PUSH
4631: LD_INT 0
4633: ST_TO_ADDR
// hc_class = class_phororhacos ;
4634: LD_ADDR_OWVAR 28
4638: PUSH
4639: LD_INT 18
4641: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_EXP 29
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PUSH
4656: LD_EXP 29
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PUSH
4665: LD_EXP 29
4669: PUSH
4670: LD_INT 3
4672: ARRAY
4673: PUSH
4674: LD_EXP 29
4678: PUSH
4679: LD_INT 4
4681: ARRAY
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4689: LD_ADDR_OWVAR 35
4693: PUSH
4694: LD_EXP 30
4698: ST_TO_ADDR
// un = CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4709: LD_VAR 0 3
4713: PPUSH
4714: LD_INT 2
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: CALL_OW 49
// end ;
4724: GO 4615
4726: POP
4727: POP
// for i := 1 to animalsAmount [ 3 ] do
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: DOUBLE
4734: LD_INT 1
4736: DEC
4737: ST_TO_ADDR
4738: LD_EXP 28
4742: PUSH
4743: LD_INT 3
4745: ARRAY
4746: PUSH
4747: FOR_TO
4748: IFFALSE 4858
// begin uc_side = 0 ;
4750: LD_ADDR_OWVAR 20
4754: PUSH
4755: LD_INT 0
4757: ST_TO_ADDR
// uc_nation = nation_nature ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 0
4765: ST_TO_ADDR
// hc_class = class_tiger ;
4766: LD_ADDR_OWVAR 28
4770: PUSH
4771: LD_INT 14
4773: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4774: LD_ADDR_OWVAR 31
4778: PUSH
4779: LD_EXP 29
4783: PUSH
4784: LD_INT 1
4786: ARRAY
4787: PUSH
4788: LD_EXP 29
4792: PUSH
4793: LD_INT 2
4795: ARRAY
4796: PUSH
4797: LD_EXP 29
4801: PUSH
4802: LD_INT 3
4804: ARRAY
4805: PUSH
4806: LD_EXP 29
4810: PUSH
4811: LD_INT 4
4813: ARRAY
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4821: LD_ADDR_OWVAR 35
4825: PUSH
4826: LD_EXP 30
4830: ST_TO_ADDR
// un = CreateHuman ;
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: CALL_OW 44
4840: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_INT 2
4848: PPUSH
4849: LD_INT 0
4851: PPUSH
4852: CALL_OW 49
// end ;
4856: GO 4747
4858: POP
4859: POP
// for i := 1 to animalsAmount [ 4 ] do
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: DOUBLE
4866: LD_INT 1
4868: DEC
4869: ST_TO_ADDR
4870: LD_EXP 28
4874: PUSH
4875: LD_INT 4
4877: ARRAY
4878: PUSH
4879: FOR_TO
4880: IFFALSE 4990
// begin uc_side = 0 ;
4882: LD_ADDR_OWVAR 20
4886: PUSH
4887: LD_INT 0
4889: ST_TO_ADDR
// uc_nation = nation_nature ;
4890: LD_ADDR_OWVAR 21
4894: PUSH
4895: LD_INT 0
4897: ST_TO_ADDR
// hc_class = 21 ;
4898: LD_ADDR_OWVAR 28
4902: PUSH
4903: LD_INT 21
4905: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4906: LD_ADDR_OWVAR 31
4910: PUSH
4911: LD_EXP 29
4915: PUSH
4916: LD_INT 1
4918: ARRAY
4919: PUSH
4920: LD_EXP 29
4924: PUSH
4925: LD_INT 2
4927: ARRAY
4928: PUSH
4929: LD_EXP 29
4933: PUSH
4934: LD_INT 3
4936: ARRAY
4937: PUSH
4938: LD_EXP 29
4942: PUSH
4943: LD_INT 4
4945: ARRAY
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4953: LD_ADDR_OWVAR 35
4957: PUSH
4958: LD_EXP 30
4962: ST_TO_ADDR
// un = CreateHuman ;
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: CALL_OW 44
4972: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4973: LD_VAR 0 3
4977: PPUSH
4978: LD_INT 2
4980: PPUSH
4981: LD_INT 0
4983: PPUSH
4984: CALL_OW 49
// end ;
4988: GO 4879
4990: POP
4991: POP
// for i := 1 to animalsAmount [ 5 ] do
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: DOUBLE
4998: LD_INT 1
5000: DEC
5001: ST_TO_ADDR
5002: LD_EXP 28
5006: PUSH
5007: LD_INT 5
5009: ARRAY
5010: PUSH
5011: FOR_TO
5012: IFFALSE 5073
// begin uc_side = 0 ;
5014: LD_ADDR_OWVAR 20
5018: PUSH
5019: LD_INT 0
5021: ST_TO_ADDR
// uc_nation = nation_nature ;
5022: LD_ADDR_OWVAR 21
5026: PUSH
5027: LD_INT 0
5029: ST_TO_ADDR
// vc_chassis := 31 ;
5030: LD_ADDR_OWVAR 37
5034: PUSH
5035: LD_INT 31
5037: ST_TO_ADDR
// vc_control := control_rider ;
5038: LD_ADDR_OWVAR 38
5042: PUSH
5043: LD_INT 4
5045: ST_TO_ADDR
// un := CreateVehicle ;
5046: LD_ADDR_VAR 0 3
5050: PUSH
5051: CALL_OW 45
5055: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5056: LD_VAR 0 3
5060: PPUSH
5061: LD_INT 2
5063: PPUSH
5064: LD_INT 0
5066: PPUSH
5067: CALL_OW 49
// end ;
5071: GO 5011
5073: POP
5074: POP
// end ; end_of_file
5075: LD_VAR 0 1
5079: RET
// every 0 0$1 do
5080: GO 5082
5082: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: LD_EXP 59
5093: PPUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 1
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 72
5108: PPUSH
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 6
5114: PPUSH
5115: LD_INT 0
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: LD_INT 0
5123: PPUSH
5124: LD_INT 0
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: LD_INT 0
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL 5248 0 12
5140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
5141: LD_INT 22
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 50
5153: PUSH
5154: EMPTY
5155: LIST
5156: PUSH
5157: LD_INT 34
5159: PUSH
5160: LD_INT 14
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 69
5176: IFFALSE 5245
5178: GO 5180
5180: DISABLE
5181: LD_INT 0
5183: PPUSH
// begin enable ;
5184: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
5185: LD_ADDR_VAR 0 1
5189: PUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 50
5202: PUSH
5203: EMPTY
5204: LIST
5205: PUSH
5206: LD_INT 34
5208: PUSH
5209: LD_INT 14
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: PUSH
5226: FOR_IN
5227: IFFALSE 5243
// CutTreeInArea ( unit , TreeArea ) ;
5229: LD_VAR 0 1
5233: PPUSH
5234: LD_INT 18
5236: PPUSH
5237: CALL 15087 0 2
5241: GO 5226
5243: POP
5244: POP
// end ;
5245: PPOPN 1
5247: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
5262: PPUSH
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
5276: PPUSH
5277: PPUSH
5278: PPUSH
5279: PPUSH
5280: PPUSH
5281: PPUSH
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
// personel = [ ] ;
5288: LD_ADDR_VAR 0 19
5292: PUSH
5293: EMPTY
5294: ST_TO_ADDR
// vehicles = [ ] ;
5295: LD_ADDR_VAR 0 25
5299: PUSH
5300: EMPTY
5301: ST_TO_ADDR
// destroyedBuildings = [ ] ;
5302: LD_ADDR_VAR 0 35
5306: PUSH
5307: EMPTY
5308: ST_TO_ADDR
// for unit in basePersonel do
5309: LD_ADDR_VAR 0 18
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: FOR_IN
5320: IFFALSE 5340
// personel = personel ^ unit ;
5322: LD_ADDR_VAR 0 19
5326: PUSH
5327: LD_VAR 0 19
5331: PUSH
5332: LD_VAR 0 18
5336: ADD
5337: ST_TO_ADDR
5338: GO 5319
5340: POP
5341: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
5342: LD_ADDR_VAR 0 24
5346: PUSH
5347: LD_VAR 0 4
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_VAR 0 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: LD_INT 21
5366: PUSH
5367: LD_INT 2
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 50
5376: PUSH
5377: EMPTY
5378: LIST
5379: PUSH
5380: LD_INT 3
5382: PUSH
5383: LD_INT 2
5385: PUSH
5386: LD_INT 34
5388: PUSH
5389: LD_INT 12
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 34
5398: PUSH
5399: LD_INT 51
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 34
5408: PUSH
5409: LD_INT 32
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: LD_INT 34
5418: PUSH
5419: LD_INT 31
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 70
5447: PUSH
5448: FOR_IN
5449: IFFALSE 5469
// vehicles = vehicles ^ vehicle ;
5451: LD_ADDR_VAR 0 25
5455: PUSH
5456: LD_VAR 0 25
5460: PUSH
5461: LD_VAR 0 24
5465: ADD
5466: ST_TO_ADDR
5467: GO 5448
5469: POP
5470: POP
// repeat soldiers = [ ] ;
5471: LD_ADDR_VAR 0 20
5475: PUSH
5476: EMPTY
5477: ST_TO_ADDR
// engineers = [ ] ;
5478: LD_ADDR_VAR 0 21
5482: PUSH
5483: EMPTY
5484: ST_TO_ADDR
// mechanics = [ ] ;
5485: LD_ADDR_VAR 0 22
5489: PUSH
5490: EMPTY
5491: ST_TO_ADDR
// scientists = [ ] ;
5492: LD_ADDR_VAR 0 23
5496: PUSH
5497: EMPTY
5498: ST_TO_ADDR
// baseBuildings = [ ] ;
5499: LD_ADDR_VAR 0 34
5503: PUSH
5504: EMPTY
5505: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5506: LD_ADDR_VAR 0 39
5510: PUSH
5511: LD_VAR 0 4
5515: PPUSH
5516: LD_INT 22
5518: PUSH
5519: LD_VAR 0 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 21
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 50
5540: PUSH
5541: EMPTY
5542: LIST
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 30
5549: PUSH
5550: LD_INT 0
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 30
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 70
5582: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5583: LD_ADDR_VAR 0 40
5587: PUSH
5588: LD_VAR 0 4
5592: PPUSH
5593: LD_INT 22
5595: PUSH
5596: LD_VAR 0 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 50
5617: PUSH
5618: EMPTY
5619: LIST
5620: PUSH
5621: LD_INT 2
5623: PUSH
5624: LD_INT 30
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 30
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5660: LD_ADDR_VAR 0 41
5664: PUSH
5665: LD_VAR 0 4
5669: PPUSH
5670: LD_INT 22
5672: PUSH
5673: LD_VAR 0 1
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 21
5684: PUSH
5685: LD_INT 3
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 50
5694: PUSH
5695: EMPTY
5696: LIST
5697: PUSH
5698: LD_INT 2
5700: PUSH
5701: LD_INT 30
5703: PUSH
5704: LD_INT 6
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 30
5713: PUSH
5714: LD_INT 7
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 30
5723: PUSH
5724: LD_INT 8
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 70
5747: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5748: LD_ADDR_VAR 0 42
5752: PUSH
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_VAR 0 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 21
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 50
5782: PUSH
5783: EMPTY
5784: LIST
5785: PUSH
5786: LD_INT 2
5788: PUSH
5789: LD_INT 30
5791: PUSH
5792: LD_INT 31
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 30
5801: PUSH
5802: LD_INT 32
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 70
5824: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5825: LD_ADDR_VAR 0 43
5829: PUSH
5830: LD_VAR 0 4
5834: PPUSH
5835: LD_INT 22
5837: PUSH
5838: LD_VAR 0 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 3
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 50
5859: PUSH
5860: EMPTY
5861: LIST
5862: PUSH
5863: LD_INT 2
5865: PUSH
5866: LD_INT 30
5868: PUSH
5869: LD_INT 4
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 30
5878: PUSH
5879: LD_INT 5
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PPUSH
5897: CALL_OW 70
5901: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5902: LD_ADDR_VAR 0 44
5906: PUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 22
5914: PUSH
5915: LD_VAR 0 1
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 50
5926: PUSH
5927: EMPTY
5928: LIST
5929: PUSH
5930: LD_INT 2
5932: PUSH
5933: LD_INT 21
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 21
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 30
5963: PUSH
5964: LD_INT 36
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 34
5973: PUSH
5974: LD_INT 31
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 70
5996: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5997: LD_ADDR_VAR 0 38
6001: PUSH
6002: LD_VAR 0 4
6006: PPUSH
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 21
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 57
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PPUSH
6047: CALL_OW 70
6051: ST_TO_ADDR
// for i := 1 to personel do
6052: LD_ADDR_VAR 0 14
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_VAR 0 19
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6236
// begin if GetLives ( personel [ i ] ) = 1000 then
6070: LD_VAR 0 19
6074: PUSH
6075: LD_VAR 0 14
6079: ARRAY
6080: PPUSH
6081: CALL_OW 256
6085: PUSH
6086: LD_INT 1000
6088: EQUAL
6089: IFFALSE 6111
// SetTag ( personel [ i ] , 1 ) else
6091: LD_VAR 0 19
6095: PUSH
6096: LD_VAR 0 14
6100: ARRAY
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
6109: GO 6191
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
6111: LD_VAR 0 19
6115: PUSH
6116: LD_VAR 0 14
6120: ARRAY
6121: PPUSH
6122: CALL_OW 256
6126: PUSH
6127: LD_INT 950
6129: LESSEQUAL
6130: PUSH
6131: LD_VAR 0 19
6135: PUSH
6136: LD_VAR 0 14
6140: ARRAY
6141: PPUSH
6142: CALL_OW 256
6146: PUSH
6147: LD_INT 250
6149: GREATER
6150: AND
6151: IFFALSE 6191
// begin SetTag ( personel [ i ] , 0 ) ;
6153: LD_VAR 0 19
6157: PUSH
6158: LD_VAR 0 14
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
6171: LD_VAR 0 19
6175: PUSH
6176: LD_VAR 0 14
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 5
6186: PPUSH
6187: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
6191: LD_VAR 0 19
6195: PUSH
6196: LD_VAR 0 14
6200: ARRAY
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 100
6209: LESS
6210: IFFALSE 6234
// personel = personel diff personel [ i ] ;
6212: LD_ADDR_VAR 0 19
6216: PUSH
6217: LD_VAR 0 19
6221: PUSH
6222: LD_VAR 0 19
6226: PUSH
6227: LD_VAR 0 14
6231: ARRAY
6232: DIFF
6233: ST_TO_ADDR
// end ;
6234: GO 6067
6236: POP
6237: POP
// for i := 1 to vehicles do
6238: LD_ADDR_VAR 0 14
6242: PUSH
6243: DOUBLE
6244: LD_INT 1
6246: DEC
6247: ST_TO_ADDR
6248: LD_VAR 0 25
6252: PUSH
6253: FOR_TO
6254: IFFALSE 6616
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
6256: LD_VAR 0 25
6260: PUSH
6261: LD_VAR 0 14
6265: ARRAY
6266: PUSH
6267: LD_INT 1
6269: ARRAY
6270: PPUSH
6271: CALL_OW 256
6275: PUSH
6276: LD_INT 1000
6278: EQUAL
6279: IFFALSE 6443
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6281: LD_VAR 0 25
6285: PUSH
6286: LD_VAR 0 14
6290: ARRAY
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: CALL_OW 263
6300: PUSH
6301: LD_INT 1
6303: EQUAL
6304: IFFALSE 6383
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
6306: LD_VAR 0 25
6310: PUSH
6311: LD_VAR 0 14
6315: ARRAY
6316: PUSH
6317: LD_INT 2
6319: ARRAY
6320: PPUSH
6321: CALL_OW 310
6325: NOT
6326: PUSH
6327: LD_VAR 0 25
6331: PUSH
6332: LD_VAR 0 14
6336: ARRAY
6337: PUSH
6338: LD_INT 2
6340: ARRAY
6341: PPUSH
6342: CALL_OW 302
6346: AND
6347: IFFALSE 6383
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
6349: LD_VAR 0 25
6353: PUSH
6354: LD_VAR 0 14
6358: ARRAY
6359: PUSH
6360: LD_INT 2
6362: ARRAY
6363: PPUSH
6364: LD_VAR 0 25
6368: PUSH
6369: LD_VAR 0 14
6373: ARRAY
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
6383: LD_VAR 0 27
6387: PUSH
6388: LD_VAR 0 10
6392: LESS
6393: IFFALSE 6419
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
6395: LD_VAR 0 25
6399: PUSH
6400: LD_VAR 0 14
6404: ARRAY
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_INT 2
6412: PPUSH
6413: CALL_OW 109
6417: GO 6441
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
6419: LD_VAR 0 25
6423: PUSH
6424: LD_VAR 0 14
6428: ARRAY
6429: PUSH
6430: LD_INT 1
6432: ARRAY
6433: PPUSH
6434: LD_INT 3
6436: PPUSH
6437: CALL_OW 109
// end else
6441: GO 6564
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6443: LD_VAR 0 25
6447: PUSH
6448: LD_VAR 0 14
6452: ARRAY
6453: PUSH
6454: LD_INT 1
6456: ARRAY
6457: PPUSH
6458: CALL_OW 256
6462: PUSH
6463: LD_INT 650
6465: LESSEQUAL
6466: PUSH
6467: LD_VAR 0 25
6471: PUSH
6472: LD_VAR 0 14
6476: ARRAY
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: CALL_OW 256
6486: PUSH
6487: LD_INT 250
6489: GREATER
6490: AND
6491: PUSH
6492: LD_VAR 0 25
6496: PUSH
6497: LD_VAR 0 14
6501: ARRAY
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: CALL_OW 263
6511: PUSH
6512: LD_INT 1
6514: EQUAL
6515: AND
6516: IFFALSE 6564
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6518: LD_VAR 0 25
6522: PUSH
6523: LD_VAR 0 14
6527: ARRAY
6528: PUSH
6529: LD_INT 1
6531: ARRAY
6532: PPUSH
6533: LD_INT 0
6535: PPUSH
6536: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6540: LD_VAR 0 25
6544: PUSH
6545: LD_VAR 0 14
6549: ARRAY
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PPUSH
6555: LD_VAR 0 6
6559: PPUSH
6560: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6564: LD_VAR 0 25
6568: PUSH
6569: LD_VAR 0 14
6573: ARRAY
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: CALL_OW 256
6583: PUSH
6584: LD_INT 250
6586: LESS
6587: IFFALSE 6614
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6589: LD_ADDR_VAR 0 25
6593: PUSH
6594: LD_VAR 0 25
6598: PUSH
6599: LD_VAR 0 25
6603: PUSH
6604: LD_VAR 0 14
6608: ARRAY
6609: PUSH
6610: EMPTY
6611: LIST
6612: DIFF
6613: ST_TO_ADDR
// end ; end ;
6614: GO 6253
6616: POP
6617: POP
// for i := 1 to personel do
6618: LD_ADDR_VAR 0 14
6622: PUSH
6623: DOUBLE
6624: LD_INT 1
6626: DEC
6627: ST_TO_ADDR
6628: LD_VAR 0 19
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6685
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6636: LD_ADDR_VAR 0 20
6640: PUSH
6641: LD_VAR 0 20
6645: PUSH
6646: LD_VAR 0 19
6650: PUSH
6651: LD_VAR 0 14
6655: ARRAY
6656: PPUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 1
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: LD_INT 50
6669: PUSH
6670: EMPTY
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 72
6681: ADD
6682: ST_TO_ADDR
6683: GO 6633
6685: POP
6686: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6687: LD_VAR 0 20
6691: PUSH
6692: LD_VAR 0 42
6696: PPUSH
6697: LD_INT 58
6699: PUSH
6700: EMPTY
6701: LIST
6702: PPUSH
6703: CALL_OW 72
6707: AND
6708: IFFALSE 6966
// begin for i := 1 to soldiers do
6710: LD_ADDR_VAR 0 14
6714: PUSH
6715: DOUBLE
6716: LD_INT 1
6718: DEC
6719: ST_TO_ADDR
6720: LD_VAR 0 20
6724: PUSH
6725: FOR_TO
6726: IFFALSE 6962
// if GetTag ( soldiers [ i ] ) = 1 then
6728: LD_VAR 0 20
6732: PUSH
6733: LD_VAR 0 14
6737: ARRAY
6738: PPUSH
6739: CALL_OW 110
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 6960
// begin if GetTaskList ( soldiers [ i ] ) then
6749: LD_VAR 0 20
6753: PUSH
6754: LD_VAR 0 14
6758: ARRAY
6759: PPUSH
6760: CALL_OW 437
6764: IFFALSE 6853
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6766: LD_VAR 0 20
6770: PUSH
6771: LD_VAR 0 14
6775: ARRAY
6776: PPUSH
6777: CALL_OW 437
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PUSH
6790: LD_STRING e
6792: EQUAL
6793: PUSH
6794: LD_VAR 0 20
6798: PUSH
6799: LD_VAR 0 14
6803: ARRAY
6804: PPUSH
6805: CALL_OW 437
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PUSH
6814: LD_INT 4
6816: ARRAY
6817: PPUSH
6818: CALL_OW 266
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: IN
6833: AND
6834: IFFALSE 6853
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6836: LD_VAR 0 20
6840: PUSH
6841: LD_VAR 0 14
6845: ARRAY
6846: PPUSH
6847: EMPTY
6848: PPUSH
6849: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6853: LD_ADDR_VAR 0 49
6857: PUSH
6858: LD_VAR 0 42
6862: PPUSH
6863: LD_INT 3
6865: PUSH
6866: LD_INT 59
6868: PUSH
6869: EMPTY
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 72
6880: PUSH
6881: FOR_IN
6882: IFFALSE 6958
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6884: LD_VAR 0 20
6888: PUSH
6889: LD_VAR 0 14
6893: ARRAY
6894: PPUSH
6895: CALL_OW 314
6899: NOT
6900: PUSH
6901: LD_VAR 0 20
6905: PUSH
6906: LD_VAR 0 14
6910: ARRAY
6911: PPUSH
6912: CALL_OW 310
6916: PPUSH
6917: CALL_OW 266
6921: PUSH
6922: LD_INT 31
6924: PUSH
6925: LD_INT 32
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: IN
6932: NOT
6933: AND
6934: IFFALSE 6956
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6936: LD_VAR 0 20
6940: PUSH
6941: LD_VAR 0 14
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 49
6951: PPUSH
6952: CALL_OW 120
6956: GO 6881
6958: POP
6959: POP
// end ;
6960: GO 6725
6962: POP
6963: POP
// end else
6964: GO 7138
// if soldiers and barracks then
6966: LD_VAR 0 20
6970: PUSH
6971: LD_VAR 0 43
6975: AND
6976: IFFALSE 7098
// begin for i := 1 to soldiers do
6978: LD_ADDR_VAR 0 14
6982: PUSH
6983: DOUBLE
6984: LD_INT 1
6986: DEC
6987: ST_TO_ADDR
6988: LD_VAR 0 20
6992: PUSH
6993: FOR_TO
6994: IFFALSE 7094
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6996: LD_VAR 0 20
7000: PUSH
7001: LD_VAR 0 14
7005: ARRAY
7006: PPUSH
7007: CALL_OW 110
7011: PUSH
7012: LD_INT 1
7014: EQUAL
7015: PUSH
7016: LD_VAR 0 20
7020: PUSH
7021: LD_VAR 0 14
7025: ARRAY
7026: PPUSH
7027: LD_INT 56
7029: PUSH
7030: EMPTY
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: AND
7038: PUSH
7039: LD_VAR 0 20
7043: PUSH
7044: LD_VAR 0 14
7048: ARRAY
7049: PPUSH
7050: CALL_OW 314
7054: NOT
7055: AND
7056: IFFALSE 7092
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
7058: LD_VAR 0 20
7062: PUSH
7063: LD_VAR 0 14
7067: ARRAY
7068: PPUSH
7069: LD_VAR 0 43
7073: PUSH
7074: LD_INT 1
7076: PPUSH
7077: LD_VAR 0 43
7081: PPUSH
7082: CALL_OW 12
7086: ARRAY
7087: PPUSH
7088: CALL_OW 120
7092: GO 6993
7094: POP
7095: POP
// end else
7096: GO 7138
// for i := 1 to soldiers do
7098: LD_ADDR_VAR 0 14
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 20
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7136
// SetTag ( soldiers [ i ] , 3 ) ;
7116: LD_VAR 0 20
7120: PUSH
7121: LD_VAR 0 14
7125: ARRAY
7126: PPUSH
7127: LD_INT 3
7129: PPUSH
7130: CALL_OW 109
7134: GO 7113
7136: POP
7137: POP
// for i := 1 to personel do
7138: LD_ADDR_VAR 0 14
7142: PUSH
7143: DOUBLE
7144: LD_INT 1
7146: DEC
7147: ST_TO_ADDR
7148: LD_VAR 0 19
7152: PUSH
7153: FOR_TO
7154: IFFALSE 7195
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
7156: LD_ADDR_VAR 0 21
7160: PUSH
7161: LD_VAR 0 21
7165: PUSH
7166: LD_VAR 0 19
7170: PUSH
7171: LD_VAR 0 14
7175: ARRAY
7176: PPUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 72
7191: ADD
7192: ST_TO_ADDR
7193: GO 7153
7195: POP
7196: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7197: LD_VAR 0 21
7201: PUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: LD_INT 22
7209: PUSH
7210: LD_VAR 0 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 3
7231: PUSH
7232: LD_INT 24
7234: PUSH
7235: LD_INT 1000
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 70
7255: AND
7256: IFFALSE 7484
// begin for i := 1 to engineers do
7258: LD_ADDR_VAR 0 14
7262: PUSH
7263: DOUBLE
7264: LD_INT 1
7266: DEC
7267: ST_TO_ADDR
7268: LD_VAR 0 21
7272: PUSH
7273: FOR_TO
7274: IFFALSE 7480
// if GetTag ( engineers [ i ] ) = 1 then
7276: LD_VAR 0 21
7280: PUSH
7281: LD_VAR 0 14
7285: ARRAY
7286: PPUSH
7287: CALL_OW 110
7291: PUSH
7292: LD_INT 1
7294: EQUAL
7295: IFFALSE 7478
// begin if GetTaskList ( engineers [ i ] ) then
7297: LD_VAR 0 21
7301: PUSH
7302: LD_VAR 0 14
7306: ARRAY
7307: PPUSH
7308: CALL_OW 437
7312: IFFALSE 7360
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
7314: LD_VAR 0 21
7318: PUSH
7319: LD_VAR 0 14
7323: ARRAY
7324: PPUSH
7325: CALL_OW 437
7329: PUSH
7330: LD_INT 1
7332: ARRAY
7333: PUSH
7334: LD_INT 1
7336: ARRAY
7337: PUSH
7338: LD_STRING e
7340: EQUAL
7341: IFFALSE 7360
// SetTaskList ( engineers [ i ] , [ ] ) ;
7343: LD_VAR 0 21
7347: PUSH
7348: LD_VAR 0 14
7352: ARRAY
7353: PPUSH
7354: EMPTY
7355: PPUSH
7356: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
7360: LD_VAR 0 21
7364: PUSH
7365: LD_VAR 0 14
7369: ARRAY
7370: PPUSH
7371: CALL_OW 310
7375: IFFALSE 7392
// ComExitBuilding ( engineers [ i ] ) ;
7377: LD_VAR 0 21
7381: PUSH
7382: LD_VAR 0 14
7386: ARRAY
7387: PPUSH
7388: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7392: LD_ADDR_VAR 0 47
7396: PUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: LD_INT 22
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 24
7429: PUSH
7430: LD_INT 1000
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 70
7450: PUSH
7451: FOR_IN
7452: IFFALSE 7476
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7454: LD_VAR 0 21
7458: PUSH
7459: LD_VAR 0 14
7463: ARRAY
7464: PPUSH
7465: LD_VAR 0 47
7469: PPUSH
7470: CALL_OW 190
7474: GO 7451
7476: POP
7477: POP
// end ;
7478: GO 7273
7480: POP
7481: POP
// end else
7482: GO 7791
// if engineers and destroyedBuildings then
7484: LD_VAR 0 21
7488: PUSH
7489: LD_VAR 0 35
7493: AND
7494: IFFALSE 7670
// begin for i := 1 to engineers do
7496: LD_ADDR_VAR 0 14
7500: PUSH
7501: DOUBLE
7502: LD_INT 1
7504: DEC
7505: ST_TO_ADDR
7506: LD_VAR 0 21
7510: PUSH
7511: FOR_TO
7512: IFFALSE 7666
// if GetTag ( engineers [ i ] ) = 1 then
7514: LD_VAR 0 21
7518: PUSH
7519: LD_VAR 0 14
7523: ARRAY
7524: PPUSH
7525: CALL_OW 110
7529: PUSH
7530: LD_INT 1
7532: EQUAL
7533: IFFALSE 7664
// begin if IsInUnit ( engineers [ i ] ) then
7535: LD_VAR 0 21
7539: PUSH
7540: LD_VAR 0 14
7544: ARRAY
7545: PPUSH
7546: CALL_OW 310
7550: IFFALSE 7567
// ComExitBuilding ( engineers [ i ] ) ;
7552: LD_VAR 0 21
7556: PUSH
7557: LD_VAR 0 14
7561: ARRAY
7562: PPUSH
7563: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7567: LD_ADDR_VAR 0 15
7571: PUSH
7572: DOUBLE
7573: LD_INT 1
7575: DEC
7576: ST_TO_ADDR
7577: LD_VAR 0 35
7581: PUSH
7582: LD_INT 4
7584: DIVREAL
7585: PUSH
7586: FOR_TO
7587: IFFALSE 7662
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7589: LD_VAR 0 21
7593: PUSH
7594: LD_VAR 0 14
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 35
7604: PUSH
7605: LD_VAR 0 15
7609: ARRAY
7610: PPUSH
7611: LD_VAR 0 35
7615: PUSH
7616: LD_VAR 0 15
7620: PUSH
7621: LD_INT 1
7623: PLUS
7624: ARRAY
7625: PPUSH
7626: LD_VAR 0 35
7630: PUSH
7631: LD_VAR 0 15
7635: PUSH
7636: LD_INT 2
7638: PLUS
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 35
7645: PUSH
7646: LD_VAR 0 15
7650: PUSH
7651: LD_INT 3
7653: PLUS
7654: ARRAY
7655: PPUSH
7656: CALL_OW 205
7660: GO 7586
7662: POP
7663: POP
// end ;
7664: GO 7511
7666: POP
7667: POP
// end else
7668: GO 7791
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7670: LD_VAR 0 21
7674: PUSH
7675: LD_VAR 0 21
7679: PPUSH
7680: LD_INT 56
7682: PUSH
7683: EMPTY
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: AND
7691: PUSH
7692: LD_VAR 0 39
7696: AND
7697: PUSH
7698: LD_VAR 0 35
7702: NOT
7703: AND
7704: IFFALSE 7791
// for i := 1 to engineers do
7706: LD_ADDR_VAR 0 14
7710: PUSH
7711: DOUBLE
7712: LD_INT 1
7714: DEC
7715: ST_TO_ADDR
7716: LD_VAR 0 21
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7789
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7724: LD_VAR 0 21
7728: PUSH
7729: LD_VAR 0 14
7733: ARRAY
7734: PPUSH
7735: CALL_OW 110
7739: PUSH
7740: LD_INT 1
7742: EQUAL
7743: PUSH
7744: LD_VAR 0 21
7748: PUSH
7749: LD_VAR 0 14
7753: ARRAY
7754: PPUSH
7755: CALL_OW 314
7759: NOT
7760: AND
7761: IFFALSE 7787
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7763: LD_VAR 0 21
7767: PUSH
7768: LD_VAR 0 14
7772: ARRAY
7773: PPUSH
7774: LD_VAR 0 39
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: CALL_OW 120
// end ;
7787: GO 7721
7789: POP
7790: POP
// for i := 1 to personel do
7791: LD_ADDR_VAR 0 14
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 19
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7848
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7809: LD_ADDR_VAR 0 22
7813: PUSH
7814: LD_VAR 0 22
7818: PUSH
7819: LD_VAR 0 19
7823: PUSH
7824: LD_VAR 0 14
7828: ARRAY
7829: PPUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 72
7844: ADD
7845: ST_TO_ADDR
7846: GO 7806
7848: POP
7849: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7850: LD_VAR 0 22
7854: PUSH
7855: LD_VAR 0 4
7859: PPUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 3
7884: PUSH
7885: LD_INT 24
7887: PUSH
7888: LD_INT 1000
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 70
7908: AND
7909: IFFALSE 8489
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7911: LD_ADDR_VAR 0 48
7915: PUSH
7916: LD_VAR 0 4
7920: PPUSH
7921: LD_INT 22
7923: PUSH
7924: LD_VAR 0 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 21
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 24
7948: PUSH
7949: LD_INT 1000
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 70
7969: PUSH
7970: FOR_IN
7971: IFFALSE 8485
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7973: LD_VAR 0 48
7977: PPUSH
7978: LD_VAR 0 6
7982: PPUSH
7983: CALL_OW 299
7987: PUSH
7988: LD_INT 5
7990: LESSEQUAL
7991: IFFALSE 8080
// for i := 1 to vehicles do
7993: LD_ADDR_VAR 0 14
7997: PUSH
7998: DOUBLE
7999: LD_INT 1
8001: DEC
8002: ST_TO_ADDR
8003: LD_VAR 0 25
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8078
// if vehicles [ i ] [ 1 ] = damageUnit then
8011: LD_VAR 0 25
8015: PUSH
8016: LD_VAR 0 14
8020: ARRAY
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PUSH
8026: LD_VAR 0 48
8030: EQUAL
8031: IFFALSE 8076
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
8033: LD_VAR 0 25
8037: PUSH
8038: LD_VAR 0 14
8042: ARRAY
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
8052: LD_VAR 0 25
8056: PUSH
8057: LD_VAR 0 14
8061: ARRAY
8062: PUSH
8063: LD_INT 2
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 48
8071: PPUSH
8072: CALL_OW 189
// end ;
8076: GO 8008
8078: POP
8079: POP
// for i := 1 to mechanics do
8080: LD_ADDR_VAR 0 14
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: LD_VAR 0 22
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8264
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8098: LD_VAR 0 22
8102: PUSH
8103: LD_VAR 0 14
8107: ARRAY
8108: PPUSH
8109: CALL_OW 110
8113: PUSH
8114: LD_INT 1
8116: EQUAL
8117: PUSH
8118: LD_VAR 0 22
8122: PUSH
8123: LD_VAR 0 14
8127: ARRAY
8128: PPUSH
8129: CALL_OW 310
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 3
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: IN
8144: AND
8145: IFFALSE 8262
// begin if GetTaskList ( mechanics [ i ] ) then
8147: LD_VAR 0 22
8151: PUSH
8152: LD_VAR 0 14
8156: ARRAY
8157: PPUSH
8158: CALL_OW 437
8162: IFFALSE 8210
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8164: LD_VAR 0 22
8168: PUSH
8169: LD_VAR 0 14
8173: ARRAY
8174: PPUSH
8175: CALL_OW 437
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PUSH
8188: LD_STRING e
8190: EQUAL
8191: IFFALSE 8210
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8193: LD_VAR 0 22
8197: PUSH
8198: LD_VAR 0 14
8202: ARRAY
8203: PPUSH
8204: EMPTY
8205: PPUSH
8206: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8210: LD_VAR 0 22
8214: PUSH
8215: LD_VAR 0 14
8219: ARRAY
8220: PPUSH
8221: CALL_OW 310
8225: IFFALSE 8242
// ComExitBuilding ( mechanics [ i ] ) ;
8227: LD_VAR 0 22
8231: PUSH
8232: LD_VAR 0 14
8236: ARRAY
8237: PPUSH
8238: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8242: LD_VAR 0 22
8246: PUSH
8247: LD_VAR 0 14
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 48
8257: PPUSH
8258: CALL_OW 189
// end ;
8262: GO 8095
8264: POP
8265: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8266: LD_VAR 0 48
8270: PPUSH
8271: CALL_OW 256
8275: PUSH
8276: LD_INT 250
8278: LESS
8279: PUSH
8280: LD_VAR 0 48
8284: PPUSH
8285: LD_VAR 0 4
8289: PPUSH
8290: CALL_OW 308
8294: AND
8295: IFFALSE 8483
// for i := 1 to personel do
8297: LD_ADDR_VAR 0 14
8301: PUSH
8302: DOUBLE
8303: LD_INT 1
8305: DEC
8306: ST_TO_ADDR
8307: LD_VAR 0 19
8311: PUSH
8312: FOR_TO
8313: IFFALSE 8481
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
8315: LD_VAR 0 22
8319: PUSH
8320: LD_VAR 0 14
8324: ARRAY
8325: PPUSH
8326: CALL_OW 110
8330: PUSH
8331: LD_INT 1
8333: EQUAL
8334: PUSH
8335: LD_VAR 0 22
8339: PUSH
8340: LD_VAR 0 14
8344: ARRAY
8345: PPUSH
8346: CALL_OW 310
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: IN
8361: AND
8362: IFFALSE 8479
// begin if GetTaskList ( mechanics [ i ] ) then
8364: LD_VAR 0 22
8368: PUSH
8369: LD_VAR 0 14
8373: ARRAY
8374: PPUSH
8375: CALL_OW 437
8379: IFFALSE 8427
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
8381: LD_VAR 0 22
8385: PUSH
8386: LD_VAR 0 14
8390: ARRAY
8391: PPUSH
8392: CALL_OW 437
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PUSH
8405: LD_STRING e
8407: EQUAL
8408: IFFALSE 8427
// SetTaskList ( mechanics [ i ] , [ ] ) ;
8410: LD_VAR 0 22
8414: PUSH
8415: LD_VAR 0 14
8419: ARRAY
8420: PPUSH
8421: EMPTY
8422: PPUSH
8423: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8427: LD_VAR 0 22
8431: PUSH
8432: LD_VAR 0 14
8436: ARRAY
8437: PPUSH
8438: CALL_OW 310
8442: IFFALSE 8459
// ComExitBuilding ( mechanics [ i ] ) ;
8444: LD_VAR 0 22
8448: PUSH
8449: LD_VAR 0 14
8453: ARRAY
8454: PPUSH
8455: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8459: LD_VAR 0 22
8463: PUSH
8464: LD_VAR 0 14
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 48
8474: PPUSH
8475: CALL_OW 189
// end ;
8479: GO 8312
8481: POP
8482: POP
// end ;
8483: GO 7970
8485: POP
8486: POP
// end else
8487: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8489: LD_VAR 0 22
8493: PUSH
8494: LD_VAR 0 22
8498: PPUSH
8499: LD_INT 56
8501: PUSH
8502: EMPTY
8503: LIST
8504: PPUSH
8505: CALL_OW 72
8509: AND
8510: PUSH
8511: LD_VAR 0 44
8515: PPUSH
8516: LD_INT 58
8518: PUSH
8519: EMPTY
8520: LIST
8521: PPUSH
8522: CALL_OW 72
8526: AND
8527: IFFALSE 8644
// begin for i := 1 to mechanics do
8529: LD_ADDR_VAR 0 14
8533: PUSH
8534: DOUBLE
8535: LD_INT 1
8537: DEC
8538: ST_TO_ADDR
8539: LD_VAR 0 22
8543: PUSH
8544: FOR_TO
8545: IFFALSE 8640
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8547: LD_VAR 0 22
8551: PUSH
8552: LD_VAR 0 14
8556: ARRAY
8557: PPUSH
8558: CALL_OW 110
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: PUSH
8567: LD_VAR 0 22
8571: PUSH
8572: LD_VAR 0 14
8576: ARRAY
8577: PPUSH
8578: CALL_OW 314
8582: NOT
8583: AND
8584: PUSH
8585: LD_VAR 0 22
8589: PUSH
8590: LD_VAR 0 14
8594: ARRAY
8595: PPUSH
8596: CALL_OW 310
8600: NOT
8601: AND
8602: IFFALSE 8638
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8604: LD_VAR 0 22
8608: PUSH
8609: LD_VAR 0 14
8613: ARRAY
8614: PPUSH
8615: LD_VAR 0 44
8619: PUSH
8620: LD_INT 1
8622: PPUSH
8623: LD_VAR 0 44
8627: PPUSH
8628: CALL_OW 12
8632: ARRAY
8633: PPUSH
8634: CALL_OW 120
8638: GO 8544
8640: POP
8641: POP
// end else
8642: GO 8786
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8644: LD_VAR 0 22
8648: PUSH
8649: LD_VAR 0 22
8653: PPUSH
8654: LD_INT 56
8656: PUSH
8657: EMPTY
8658: LIST
8659: PPUSH
8660: CALL_OW 72
8664: AND
8665: PUSH
8666: LD_VAR 0 40
8670: AND
8671: IFFALSE 8786
// for i := 1 to mechanics do
8673: LD_ADDR_VAR 0 14
8677: PUSH
8678: DOUBLE
8679: LD_INT 1
8681: DEC
8682: ST_TO_ADDR
8683: LD_VAR 0 22
8687: PUSH
8688: FOR_TO
8689: IFFALSE 8784
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8691: LD_VAR 0 22
8695: PUSH
8696: LD_VAR 0 14
8700: ARRAY
8701: PPUSH
8702: CALL_OW 110
8706: PUSH
8707: LD_INT 1
8709: EQUAL
8710: PUSH
8711: LD_VAR 0 22
8715: PUSH
8716: LD_VAR 0 14
8720: ARRAY
8721: PPUSH
8722: CALL_OW 314
8726: NOT
8727: AND
8728: PUSH
8729: LD_VAR 0 22
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PPUSH
8740: CALL_OW 310
8744: NOT
8745: AND
8746: IFFALSE 8782
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8748: LD_VAR 0 22
8752: PUSH
8753: LD_VAR 0 14
8757: ARRAY
8758: PPUSH
8759: LD_VAR 0 40
8763: PUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_VAR 0 40
8771: PPUSH
8772: CALL_OW 12
8776: ARRAY
8777: PPUSH
8778: CALL_OW 120
8782: GO 8688
8784: POP
8785: POP
// for i := 1 to personel do
8786: LD_ADDR_VAR 0 14
8790: PUSH
8791: DOUBLE
8792: LD_INT 1
8794: DEC
8795: ST_TO_ADDR
8796: LD_VAR 0 19
8800: PUSH
8801: FOR_TO
8802: IFFALSE 8843
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8804: LD_ADDR_VAR 0 23
8808: PUSH
8809: LD_VAR 0 23
8813: PUSH
8814: LD_VAR 0 19
8818: PUSH
8819: LD_VAR 0 14
8823: ARRAY
8824: PPUSH
8825: LD_INT 25
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 72
8839: ADD
8840: ST_TO_ADDR
8841: GO 8801
8843: POP
8844: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8845: LD_VAR 0 23
8849: PUSH
8850: LD_VAR 0 4
8854: PPUSH
8855: LD_INT 22
8857: PUSH
8858: LD_VAR 0 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 1
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 3
8879: PUSH
8880: LD_INT 24
8882: PUSH
8883: LD_INT 1000
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 70
8903: AND
8904: IFFALSE 9341
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8906: LD_ADDR_VAR 0 48
8910: PUSH
8911: LD_VAR 0 4
8915: PPUSH
8916: LD_INT 22
8918: PUSH
8919: LD_VAR 0 1
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 21
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 3
8940: PUSH
8941: LD_INT 24
8943: PUSH
8944: LD_INT 1000
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 70
8964: PUSH
8965: FOR_IN
8966: IFFALSE 9337
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8968: LD_VAR 0 48
8972: PPUSH
8973: LD_VAR 0 5
8977: PPUSH
8978: CALL_OW 299
8982: PUSH
8983: LD_INT 5
8985: LESSEQUAL
8986: IFFALSE 9146
// for i := 1 to scientists do
8988: LD_ADDR_VAR 0 14
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 23
9002: PUSH
9003: FOR_TO
9004: IFFALSE 9144
// if GetTag ( scientists [ i ] ) = 1 then
9006: LD_VAR 0 23
9010: PUSH
9011: LD_VAR 0 14
9015: ARRAY
9016: PPUSH
9017: CALL_OW 110
9021: PUSH
9022: LD_INT 1
9024: EQUAL
9025: IFFALSE 9142
// begin if GetTaskList ( scientists [ i ] ) then
9027: LD_VAR 0 23
9031: PUSH
9032: LD_VAR 0 14
9036: ARRAY
9037: PPUSH
9038: CALL_OW 437
9042: IFFALSE 9090
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9044: LD_VAR 0 23
9048: PUSH
9049: LD_VAR 0 14
9053: ARRAY
9054: PPUSH
9055: CALL_OW 437
9059: PUSH
9060: LD_INT 1
9062: ARRAY
9063: PUSH
9064: LD_INT 1
9066: ARRAY
9067: PUSH
9068: LD_STRING e
9070: EQUAL
9071: IFFALSE 9090
// SetTaskList ( scientists [ i ] , [ ] ) ;
9073: LD_VAR 0 23
9077: PUSH
9078: LD_VAR 0 14
9082: ARRAY
9083: PPUSH
9084: EMPTY
9085: PPUSH
9086: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9090: LD_VAR 0 23
9094: PUSH
9095: LD_VAR 0 14
9099: ARRAY
9100: PPUSH
9101: CALL_OW 310
9105: IFFALSE 9122
// ComExitBuilding ( scientists [ i ] ) ;
9107: LD_VAR 0 23
9111: PUSH
9112: LD_VAR 0 14
9116: ARRAY
9117: PPUSH
9118: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9122: LD_VAR 0 23
9126: PUSH
9127: LD_VAR 0 14
9131: ARRAY
9132: PPUSH
9133: LD_VAR 0 48
9137: PPUSH
9138: CALL_OW 188
// end ;
9142: GO 9003
9144: POP
9145: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
9146: LD_VAR 0 48
9150: PPUSH
9151: CALL_OW 256
9155: PUSH
9156: LD_INT 250
9158: LESS
9159: PUSH
9160: LD_VAR 0 48
9164: PPUSH
9165: LD_VAR 0 4
9169: PPUSH
9170: CALL_OW 308
9174: AND
9175: IFFALSE 9335
// for i := 1 to scientists do
9177: LD_ADDR_VAR 0 14
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_VAR 0 23
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9333
// if GetTag ( scientists [ i ] ) = 1 then
9195: LD_VAR 0 23
9199: PUSH
9200: LD_VAR 0 14
9204: ARRAY
9205: PPUSH
9206: CALL_OW 110
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9331
// begin if GetTaskList ( scientists [ i ] ) then
9216: LD_VAR 0 23
9220: PUSH
9221: LD_VAR 0 14
9225: ARRAY
9226: PPUSH
9227: CALL_OW 437
9231: IFFALSE 9279
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
9233: LD_VAR 0 23
9237: PUSH
9238: LD_VAR 0 14
9242: ARRAY
9243: PPUSH
9244: CALL_OW 437
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PUSH
9257: LD_STRING e
9259: EQUAL
9260: IFFALSE 9279
// SetTaskList ( scientists [ i ] , [ ] ) ;
9262: LD_VAR 0 23
9266: PUSH
9267: LD_VAR 0 14
9271: ARRAY
9272: PPUSH
9273: EMPTY
9274: PPUSH
9275: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
9279: LD_VAR 0 23
9283: PUSH
9284: LD_VAR 0 14
9288: ARRAY
9289: PPUSH
9290: CALL_OW 310
9294: IFFALSE 9311
// ComExitBuilding ( scientists [ i ] ) ;
9296: LD_VAR 0 23
9300: PUSH
9301: LD_VAR 0 14
9305: ARRAY
9306: PPUSH
9307: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
9311: LD_VAR 0 23
9315: PUSH
9316: LD_VAR 0 14
9320: ARRAY
9321: PPUSH
9322: LD_VAR 0 48
9326: PPUSH
9327: CALL_OW 188
// end ;
9331: GO 9192
9333: POP
9334: POP
// end ;
9335: GO 8965
9337: POP
9338: POP
// end else
9339: GO 9483
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
9341: LD_VAR 0 23
9345: PUSH
9346: LD_VAR 0 23
9350: PPUSH
9351: LD_INT 56
9353: PUSH
9354: EMPTY
9355: LIST
9356: PPUSH
9357: CALL_OW 72
9361: AND
9362: PUSH
9363: LD_VAR 0 41
9367: AND
9368: IFFALSE 9483
// for i := 1 to scientists do
9370: LD_ADDR_VAR 0 14
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 23
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9481
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
9388: LD_VAR 0 23
9392: PUSH
9393: LD_VAR 0 14
9397: ARRAY
9398: PPUSH
9399: CALL_OW 110
9403: PUSH
9404: LD_INT 1
9406: EQUAL
9407: PUSH
9408: LD_VAR 0 23
9412: PUSH
9413: LD_VAR 0 14
9417: ARRAY
9418: PPUSH
9419: CALL_OW 314
9423: NOT
9424: AND
9425: PUSH
9426: LD_VAR 0 23
9430: PUSH
9431: LD_VAR 0 14
9435: ARRAY
9436: PPUSH
9437: CALL_OW 310
9441: NOT
9442: AND
9443: IFFALSE 9479
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9445: LD_VAR 0 23
9449: PUSH
9450: LD_VAR 0 14
9454: ARRAY
9455: PPUSH
9456: LD_VAR 0 41
9460: PUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 41
9468: PPUSH
9469: CALL_OW 12
9473: ARRAY
9474: PPUSH
9475: CALL_OW 120
9479: GO 9385
9481: POP
9482: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9483: LD_INT 22
9485: PUSH
9486: LD_VAR 0 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 34
9497: PUSH
9498: LD_INT 14
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 69
9513: NOT
9514: IFFALSE 9541
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9516: LD_VAR 0 40
9520: PUSH
9521: LD_INT 1
9523: ARRAY
9524: PPUSH
9525: LD_INT 4
9527: PPUSH
9528: LD_INT 1
9530: PPUSH
9531: LD_INT 2
9533: PPUSH
9534: LD_INT 14
9536: PPUSH
9537: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9541: LD_VAR 0 25
9545: PUSH
9546: LD_VAR 0 8
9550: LESS
9551: PUSH
9552: LD_VAR 0 40
9556: AND
9557: IFFALSE 9805
// begin tmp = vehiclesAmount - vehicles ;
9559: LD_ADDR_VAR 0 16
9563: PUSH
9564: LD_VAR 0 8
9568: PUSH
9569: LD_VAR 0 25
9573: MINUS
9574: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9575: LD_ADDR_VAR 0 32
9579: PUSH
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 2
9589: PPUSH
9590: CALL 14415 0 2
9594: ST_TO_ADDR
// for i := 1 to tmp do
9595: LD_ADDR_VAR 0 14
9599: PUSH
9600: DOUBLE
9601: LD_INT 1
9603: DEC
9604: ST_TO_ADDR
9605: LD_VAR 0 16
9609: PUSH
9610: FOR_TO
9611: IFFALSE 9801
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9613: LD_ADDR_VAR 0 16
9617: PUSH
9618: LD_VAR 0 32
9622: PUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_VAR 0 32
9630: PPUSH
9631: CALL_OW 12
9635: ARRAY
9636: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9637: LD_VAR 0 16
9641: PUSH
9642: LD_INT 6
9644: PUSH
9645: LD_INT 34
9647: PUSH
9648: LD_INT 14
9650: PUSH
9651: LD_INT 71
9653: PUSH
9654: LD_INT 47
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: IN
9664: IFFALSE 9702
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9666: LD_ADDR_VAR 0 33
9670: PUSH
9671: LD_INT 4
9673: PUSH
9674: EMPTY
9675: LIST
9676: PUSH
9677: LD_INT 14
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_INT 24
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: LD_VAR 0 2
9698: ARRAY
9699: ST_TO_ADDR
9700: GO 9756
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9702: LD_ADDR_VAR 0 33
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 4
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 13
9719: PUSH
9720: LD_INT 14
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 23
9732: PUSH
9733: LD_INT 24
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: LD_VAR 0 2
9754: ARRAY
9755: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9756: LD_VAR 0 40
9760: PUSH
9761: LD_INT 1
9763: ARRAY
9764: PPUSH
9765: LD_VAR 0 33
9769: PUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_VAR 0 33
9777: PPUSH
9778: CALL_OW 12
9782: ARRAY
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 2
9789: PPUSH
9790: LD_VAR 0 16
9794: PPUSH
9795: CALL_OW 185
// end ;
9799: GO 9610
9801: POP
9802: POP
// end else
9803: GO 9818
// ComCancel ( factory [ 1 ] ) ;
9805: LD_VAR 0 40
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: PPUSH
9814: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9818: LD_ADDR_VAR 0 24
9822: PUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: LD_INT 22
9830: PUSH
9831: LD_VAR 0 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: EMPTY
9854: LIST
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 34
9864: PUSH
9865: LD_INT 12
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 34
9874: PUSH
9875: LD_INT 51
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 34
9884: PUSH
9885: LD_INT 32
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 34
9894: PUSH
9895: LD_INT 31
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 10080
// begin vehicleInList = false ;
9927: LD_ADDR_VAR 0 26
9931: PUSH
9932: LD_INT 0
9934: ST_TO_ADDR
// for i := 1 to vehicles do
9935: LD_ADDR_VAR 0 14
9939: PUSH
9940: DOUBLE
9941: LD_INT 1
9943: DEC
9944: ST_TO_ADDR
9945: LD_VAR 0 25
9949: PUSH
9950: FOR_TO
9951: IFFALSE 9981
// if vehicle in vehicles [ i ] then
9953: LD_VAR 0 24
9957: PUSH
9958: LD_VAR 0 25
9962: PUSH
9963: LD_VAR 0 14
9967: ARRAY
9968: IN
9969: IFFALSE 9979
// vehicleInList = true ;
9971: LD_ADDR_VAR 0 26
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
9979: GO 9950
9981: POP
9982: POP
// if not vehicleInList then
9983: LD_VAR 0 26
9987: NOT
9988: IFFALSE 10078
// begin if vehicles < vehiclesToAttackAmount then
9990: LD_VAR 0 25
9994: PUSH
9995: LD_VAR 0 10
9999: LESS
10000: IFFALSE 10041
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
10002: LD_ADDR_VAR 0 25
10006: PUSH
10007: LD_VAR 0 25
10011: PUSH
10012: LD_VAR 0 24
10016: PUSH
10017: LD_VAR 0 24
10021: PPUSH
10022: CALL_OW 313
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: ADD
10038: ST_TO_ADDR
10039: GO 10078
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
10041: LD_ADDR_VAR 0 25
10045: PUSH
10046: LD_VAR 0 25
10050: PUSH
10051: LD_VAR 0 24
10055: PUSH
10056: LD_VAR 0 24
10060: PPUSH
10061: CALL_OW 313
10065: PUSH
10066: LD_INT 1
10068: ARRAY
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: ADD
10077: ST_TO_ADDR
// end ; end ;
10078: GO 9924
10080: POP
10081: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
10082: LD_ADDR_VAR 0 50
10086: PUSH
10087: LD_INT 81
10089: PUSH
10090: LD_VAR 0 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: FOR_IN
10105: IFFALSE 10623
// begin offensiveUnits = [ ] ;
10107: LD_ADDR_VAR 0 27
10111: PUSH
10112: EMPTY
10113: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
10114: LD_ADDR_VAR 0 28
10118: PUSH
10119: LD_INT 0
10121: ST_TO_ADDR
// for i := 1 to vehicles do
10122: LD_ADDR_VAR 0 14
10126: PUSH
10127: DOUBLE
10128: LD_INT 1
10130: DEC
10131: ST_TO_ADDR
10132: LD_VAR 0 25
10136: PUSH
10137: FOR_TO
10138: IFFALSE 10346
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
10140: LD_VAR 0 25
10144: PUSH
10145: LD_VAR 0 14
10149: ARRAY
10150: PUSH
10151: LD_INT 1
10153: ARRAY
10154: PPUSH
10155: CALL_OW 110
10159: PUSH
10160: LD_INT 2
10162: EQUAL
10163: IFFALSE 10344
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
10165: LD_VAR 0 25
10169: PUSH
10170: LD_VAR 0 14
10174: ARRAY
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PPUSH
10180: CALL_OW 256
10184: PUSH
10185: LD_INT 650
10187: GREATER
10188: IFFALSE 10204
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
10190: LD_ADDR_VAR 0 28
10194: PUSH
10195: LD_VAR 0 28
10199: PUSH
10200: LD_INT 1
10202: PLUS
10203: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
10204: LD_VAR 0 25
10208: PUSH
10209: LD_VAR 0 14
10213: ARRAY
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: LD_VAR 0 4
10223: PPUSH
10224: CALL_OW 308
10228: IFFALSE 10256
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
10230: LD_ADDR_VAR 0 27
10234: PUSH
10235: LD_VAR 0 27
10239: PUSH
10240: LD_VAR 0 25
10244: PUSH
10245: LD_VAR 0 14
10249: ARRAY
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: ADD
10255: ST_TO_ADDR
// for j = 1 to personel do
10256: LD_ADDR_VAR 0 15
10260: PUSH
10261: DOUBLE
10262: LD_INT 1
10264: DEC
10265: ST_TO_ADDR
10266: LD_VAR 0 19
10270: PUSH
10271: FOR_TO
10272: IFFALSE 10342
// if personel [ j ] = vehicles [ i ] [ 2 ] then
10274: LD_VAR 0 19
10278: PUSH
10279: LD_VAR 0 15
10283: ARRAY
10284: PUSH
10285: LD_VAR 0 25
10289: PUSH
10290: LD_VAR 0 14
10294: ARRAY
10295: PUSH
10296: LD_INT 2
10298: ARRAY
10299: EQUAL
10300: IFFALSE 10340
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
10302: LD_ADDR_VAR 0 19
10306: PUSH
10307: LD_VAR 0 19
10311: PPUSH
10312: LD_VAR 0 15
10316: PUSH
10317: LD_VAR 0 19
10321: PUSH
10322: LD_VAR 0 15
10326: ARRAY
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 3
10334: PPUSH
10335: CALL 49266 0 3
10339: ST_TO_ADDR
10340: GO 10271
10342: POP
10343: POP
// end ;
10344: GO 10137
10346: POP
10347: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
10348: LD_VAR 0 10
10352: PUSH
10353: LD_VAR 0 28
10357: LESSEQUAL
10358: IFFALSE 10621
// begin for i := 1 to offensiveUnits do
10360: LD_ADDR_VAR 0 14
10364: PUSH
10365: DOUBLE
10366: LD_INT 1
10368: DEC
10369: ST_TO_ADDR
10370: LD_VAR 0 27
10374: PUSH
10375: FOR_TO
10376: IFFALSE 10619
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
10378: LD_ADDR_VAR 0 29
10382: PUSH
10383: LD_INT 81
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PPUSH
10398: LD_VAR 0 27
10402: PUSH
10403: LD_VAR 0 14
10407: ARRAY
10408: PPUSH
10409: CALL_OW 74
10413: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
10414: LD_ADDR_VAR 0 30
10418: PUSH
10419: LD_INT 81
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: LD_INT 59
10434: PUSH
10435: EMPTY
10436: LIST
10437: PUSH
10438: LD_INT 21
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 21
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PPUSH
10476: LD_VAR 0 27
10480: PUSH
10481: LD_VAR 0 14
10485: ARRAY
10486: PPUSH
10487: CALL_OW 74
10491: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10492: LD_VAR 0 27
10496: PUSH
10497: LD_VAR 0 14
10501: ARRAY
10502: PPUSH
10503: LD_VAR 0 29
10507: PPUSH
10508: CALL_OW 296
10512: PUSH
10513: LD_INT 9
10515: PLUS
10516: PUSH
10517: LD_VAR 0 27
10521: PUSH
10522: LD_VAR 0 14
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 30
10532: PPUSH
10533: CALL_OW 296
10537: LESS
10538: IFFALSE 10562
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10540: LD_VAR 0 27
10544: PUSH
10545: LD_VAR 0 14
10549: ARRAY
10550: PPUSH
10551: LD_VAR 0 29
10555: PPUSH
10556: CALL_OW 115
10560: GO 10582
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10562: LD_VAR 0 27
10566: PUSH
10567: LD_VAR 0 14
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 30
10577: PPUSH
10578: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10582: LD_VAR 0 27
10586: PUSH
10587: LD_VAR 0 14
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 50
10597: PPUSH
10598: CALL_OW 250
10602: PPUSH
10603: LD_VAR 0 50
10607: PPUSH
10608: CALL_OW 251
10612: PPUSH
10613: CALL_OW 174
// end ;
10617: GO 10375
10619: POP
10620: POP
// end ; end ;
10621: GO 10104
10623: POP
10624: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10625: LD_ADDR_VAR 0 50
10629: PUSH
10630: LD_VAR 0 7
10634: PPUSH
10635: LD_INT 81
10637: PUSH
10638: LD_VAR 0 1
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 70
10651: PUSH
10652: FOR_IN
10653: IFFALSE 10881
// begin defenceUnits = [ ] ;
10655: LD_ADDR_VAR 0 31
10659: PUSH
10660: EMPTY
10661: ST_TO_ADDR
// for i := 1 to personel do
10662: LD_ADDR_VAR 0 14
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_VAR 0 19
10676: PUSH
10677: FOR_TO
10678: IFFALSE 10725
// if GetTag ( personel [ i ] ) = 3 then
10680: LD_VAR 0 19
10684: PUSH
10685: LD_VAR 0 14
10689: ARRAY
10690: PPUSH
10691: CALL_OW 110
10695: PUSH
10696: LD_INT 3
10698: EQUAL
10699: IFFALSE 10723
// defenceUnits = defenceUnits ^ personel [ i ] ;
10701: LD_ADDR_VAR 0 31
10705: PUSH
10706: LD_VAR 0 31
10710: PUSH
10711: LD_VAR 0 19
10715: PUSH
10716: LD_VAR 0 14
10720: ARRAY
10721: ADD
10722: ST_TO_ADDR
10723: GO 10677
10725: POP
10726: POP
// for i := 1 to vehicles do
10727: LD_ADDR_VAR 0 14
10731: PUSH
10732: DOUBLE
10733: LD_INT 1
10735: DEC
10736: ST_TO_ADDR
10737: LD_VAR 0 25
10741: PUSH
10742: FOR_TO
10743: IFFALSE 10798
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10745: LD_VAR 0 25
10749: PUSH
10750: LD_VAR 0 14
10754: ARRAY
10755: PUSH
10756: LD_INT 1
10758: ARRAY
10759: PPUSH
10760: CALL_OW 110
10764: PUSH
10765: LD_INT 3
10767: EQUAL
10768: IFFALSE 10796
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10770: LD_ADDR_VAR 0 31
10774: PUSH
10775: LD_VAR 0 31
10779: PUSH
10780: LD_VAR 0 25
10784: PUSH
10785: LD_VAR 0 14
10789: ARRAY
10790: PUSH
10791: LD_INT 1
10793: ARRAY
10794: ADD
10795: ST_TO_ADDR
10796: GO 10742
10798: POP
10799: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10800: LD_VAR 0 31
10804: PPUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 60
10810: PUSH
10811: EMPTY
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 72
10822: PPUSH
10823: LD_VAR 0 50
10827: PPUSH
10828: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10832: LD_VAR 0 31
10836: PPUSH
10837: LD_INT 3
10839: PUSH
10840: LD_INT 60
10842: PUSH
10843: EMPTY
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 72
10854: PPUSH
10855: LD_VAR 0 50
10859: PPUSH
10860: CALL_OW 250
10864: PPUSH
10865: LD_VAR 0 50
10869: PPUSH
10870: CALL_OW 251
10874: PPUSH
10875: CALL_OW 174
// end ;
10879: GO 10652
10881: POP
10882: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10883: LD_ADDR_VAR 0 45
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_VAR 0 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 30
10905: PUSH
10906: LD_INT 31
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 30
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 30
10925: PUSH
10926: LD_INT 33
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 30
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 30
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PPUSH
10965: CALL_OW 69
10969: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10970: LD_ADDR_VAR 0 46
10974: PUSH
10975: LD_INT 81
10977: PUSH
10978: LD_VAR 0 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 21
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 58
10999: PUSH
11000: EMPTY
11001: LIST
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
11013: LD_VAR 0 45
11017: PUSH
11018: LD_VAR 0 46
11022: AND
11023: IFFALSE 11093
// for i in attackBuildings do
11025: LD_ADDR_VAR 0 14
11029: PUSH
11030: LD_VAR 0 45
11034: PUSH
11035: FOR_IN
11036: IFFALSE 11091
// for j in enemyBuildings do
11038: LD_ADDR_VAR 0 15
11042: PUSH
11043: LD_VAR 0 46
11047: PUSH
11048: FOR_IN
11049: IFFALSE 11087
// if GetDistUnits ( i , j ) < 12 then
11051: LD_VAR 0 14
11055: PPUSH
11056: LD_VAR 0 15
11060: PPUSH
11061: CALL_OW 296
11065: PUSH
11066: LD_INT 12
11068: LESS
11069: IFFALSE 11085
// ComAttackUnit ( i , j ) ;
11071: LD_VAR 0 14
11075: PPUSH
11076: LD_VAR 0 15
11080: PPUSH
11081: CALL_OW 115
11085: GO 11048
11087: POP
11088: POP
11089: GO 11035
11091: POP
11092: POP
// if canRebuild then
11093: LD_VAR 0 12
11097: IFFALSE 11766
// begin tmp = false ;
11099: LD_ADDR_VAR 0 16
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// unit = false ;
11107: LD_ADDR_VAR 0 18
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
11115: LD_ADDR_VAR 0 36
11119: PUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_INT 22
11127: PUSH
11128: LD_VAR 0 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 21
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 250
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 70
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11277
// begin unit = destroyedBuilding ;
11177: LD_ADDR_VAR 0 18
11181: PUSH
11182: LD_VAR 0 36
11186: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
11187: LD_ADDR_VAR 0 14
11191: PUSH
11192: DOUBLE
11193: LD_INT 1
11195: DEC
11196: ST_TO_ADDR
11197: LD_VAR 0 35
11201: PUSH
11202: LD_INT 4
11204: DIVREAL
11205: PUSH
11206: FOR_TO
11207: IFFALSE 11273
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
11209: LD_VAR 0 35
11213: PUSH
11214: LD_VAR 0 14
11218: PUSH
11219: LD_INT 1
11221: PLUS
11222: ARRAY
11223: PUSH
11224: LD_VAR 0 36
11228: PPUSH
11229: CALL_OW 250
11233: EQUAL
11234: PUSH
11235: LD_VAR 0 35
11239: PUSH
11240: LD_VAR 0 14
11244: PUSH
11245: LD_INT 2
11247: PLUS
11248: ARRAY
11249: PUSH
11250: LD_VAR 0 36
11254: PPUSH
11255: CALL_OW 251
11259: EQUAL
11260: AND
11261: IFFALSE 11271
// tmp = true ;
11263: LD_ADDR_VAR 0 16
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
11271: GO 11206
11273: POP
11274: POP
// end ;
11275: GO 11174
11277: POP
11278: POP
// if not tmp and unit then
11279: LD_VAR 0 16
11283: NOT
11284: PUSH
11285: LD_VAR 0 18
11289: AND
11290: IFFALSE 11550
// begin if GetBType ( unit ) = 1 then
11292: LD_VAR 0 18
11296: PPUSH
11297: CALL_OW 266
11301: PUSH
11302: LD_INT 1
11304: EQUAL
11305: IFFALSE 11359
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11307: LD_ADDR_VAR 0 35
11311: PUSH
11312: LD_VAR 0 35
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: LD_VAR 0 18
11324: PPUSH
11325: CALL_OW 250
11329: PUSH
11330: LD_VAR 0 18
11334: PPUSH
11335: CALL_OW 251
11339: PUSH
11340: LD_VAR 0 18
11344: PPUSH
11345: CALL_OW 254
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: ADD
11356: ST_TO_ADDR
11357: GO 11550
// if GetBType ( unit ) = 3 then
11359: LD_VAR 0 18
11363: PPUSH
11364: CALL_OW 266
11368: PUSH
11369: LD_INT 3
11371: EQUAL
11372: IFFALSE 11426
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11374: LD_ADDR_VAR 0 35
11378: PUSH
11379: LD_VAR 0 35
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_VAR 0 18
11391: PPUSH
11392: CALL_OW 250
11396: PUSH
11397: LD_VAR 0 18
11401: PPUSH
11402: CALL_OW 251
11406: PUSH
11407: LD_VAR 0 18
11411: PPUSH
11412: CALL_OW 254
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: ADD
11423: ST_TO_ADDR
11424: GO 11550
// if GetBType ( unit ) = 5 then
11426: LD_VAR 0 18
11430: PPUSH
11431: CALL_OW 266
11435: PUSH
11436: LD_INT 5
11438: EQUAL
11439: IFFALSE 11493
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11441: LD_ADDR_VAR 0 35
11445: PUSH
11446: LD_VAR 0 35
11450: PUSH
11451: LD_INT 4
11453: PUSH
11454: LD_VAR 0 18
11458: PPUSH
11459: CALL_OW 250
11463: PUSH
11464: LD_VAR 0 18
11468: PPUSH
11469: CALL_OW 251
11473: PUSH
11474: LD_VAR 0 18
11478: PPUSH
11479: CALL_OW 254
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: ADD
11490: ST_TO_ADDR
11491: GO 11550
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11493: LD_ADDR_VAR 0 35
11497: PUSH
11498: LD_VAR 0 35
11502: PUSH
11503: LD_VAR 0 18
11507: PPUSH
11508: CALL_OW 266
11512: PUSH
11513: LD_VAR 0 18
11517: PPUSH
11518: CALL_OW 250
11522: PUSH
11523: LD_VAR 0 18
11527: PPUSH
11528: CALL_OW 251
11532: PUSH
11533: LD_VAR 0 18
11537: PPUSH
11538: CALL_OW 254
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ADD
11549: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11550: LD_ADDR_VAR 0 37
11554: PUSH
11555: LD_VAR 0 38
11559: PUSH
11560: FOR_IN
11561: IFFALSE 11764
// for i := 1 to destroyedBuildings / 4 do
11563: LD_ADDR_VAR 0 14
11567: PUSH
11568: DOUBLE
11569: LD_INT 1
11571: DEC
11572: ST_TO_ADDR
11573: LD_VAR 0 35
11577: PUSH
11578: LD_INT 4
11580: DIVREAL
11581: PUSH
11582: FOR_TO
11583: IFFALSE 11760
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11585: LD_VAR 0 35
11589: PUSH
11590: LD_VAR 0 14
11594: PUSH
11595: LD_INT 1
11597: PLUS
11598: ARRAY
11599: PUSH
11600: LD_VAR 0 37
11604: PPUSH
11605: CALL_OW 250
11609: EQUAL
11610: PUSH
11611: LD_VAR 0 35
11615: PUSH
11616: LD_VAR 0 14
11620: PUSH
11621: LD_INT 2
11623: PLUS
11624: ARRAY
11625: PUSH
11626: LD_VAR 0 37
11630: PPUSH
11631: CALL_OW 251
11635: EQUAL
11636: AND
11637: PUSH
11638: LD_VAR 0 37
11642: PPUSH
11643: CALL_OW 302
11647: AND
11648: IFFALSE 11758
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11650: LD_ADDR_VAR 0 35
11654: PUSH
11655: LD_VAR 0 35
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 3
11667: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11668: LD_ADDR_VAR 0 35
11672: PUSH
11673: LD_VAR 0 35
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 3
11685: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11686: LD_ADDR_VAR 0 35
11690: PUSH
11691: LD_VAR 0 35
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 3
11703: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11704: LD_ADDR_VAR 0 35
11708: PUSH
11709: LD_VAR 0 35
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 3
11721: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11722: LD_VAR 0 37
11726: PPUSH
11727: CALL_OW 247
11731: PUSH
11732: LD_INT 32
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: IN
11742: IFFALSE 11758
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11744: LD_VAR 0 37
11748: PPUSH
11749: LD_VAR 0 32
11753: PPUSH
11754: CALL_OW 208
// end ;
11758: GO 11582
11760: POP
11761: POP
11762: GO 11560
11764: POP
11765: POP
// end ; wait ( 0 0$01 ) ;
11766: LD_INT 35
11768: PPUSH
11769: CALL_OW 67
// until not personel ;
11773: LD_VAR 0 19
11777: NOT
11778: IFFALSE 5471
// end ; end_of_file
11780: LD_VAR 0 13
11784: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
// if debugMode then
11789: LD_EXP 33
11793: IFFALSE 11810
// unit := NewCharacter ( ident ) ;
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: LD_VAR 0 1
11804: PPUSH
11805: CALL_OW 25
11809: ST_TO_ADDR
// if exist_mode and not debugMode then
11810: LD_VAR 0 2
11814: PUSH
11815: LD_EXP 33
11819: NOT
11820: AND
11821: IFFALSE 11846
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11823: LD_ADDR_VAR 0 5
11827: PUSH
11828: LD_EXP 32
11832: PUSH
11833: LD_VAR 0 1
11837: STR
11838: PPUSH
11839: CALL_OW 34
11843: ST_TO_ADDR
11844: GO 11868
// if not debugMode then
11846: LD_EXP 33
11850: NOT
11851: IFFALSE 11868
// unit := NewCharacter ( ident ) ;
11853: LD_ADDR_VAR 0 5
11857: PUSH
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 25
11867: ST_TO_ADDR
// if class then
11868: LD_VAR 0 3
11872: IFFALSE 11888
// SetClass ( unit , class ) ;
11874: LD_VAR 0 5
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: CALL_OW 336
// result := unit ;
11888: LD_ADDR_VAR 0 4
11892: PUSH
11893: LD_VAR 0 5
11897: ST_TO_ADDR
// end ;
11898: LD_VAR 0 4
11902: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11903: LD_INT 0
11905: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 255
11915: PUSH
11916: LD_VAR 0 3
11920: EQUAL
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 302
11931: AND
11932: IFFALSE 11954
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11934: LD_VAR 0 1
11938: PPUSH
11939: LD_EXP 31
11943: PUSH
11944: LD_VAR 0 2
11948: STR
11949: PPUSH
11950: CALL_OW 38
// end ;
11954: LD_VAR 0 4
11958: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
// resultCharactersToSave = [ ] ;
11964: LD_ADDR_VAR 0 6
11968: PUSH
11969: EMPTY
11970: ST_TO_ADDR
// for unit in characters do
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: LD_VAR 0 1
11980: PUSH
11981: FOR_IN
11982: IFFALSE 12030
// if GetSide ( unit ) = side and IsOK ( unit ) then
11984: LD_VAR 0 5
11988: PPUSH
11989: CALL_OW 255
11993: PUSH
11994: LD_VAR 0 3
11998: EQUAL
11999: PUSH
12000: LD_VAR 0 5
12004: PPUSH
12005: CALL_OW 302
12009: AND
12010: IFFALSE 12028
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12012: LD_ADDR_VAR 0 6
12016: PUSH
12017: LD_VAR 0 6
12021: PUSH
12022: LD_VAR 0 5
12026: ADD
12027: ST_TO_ADDR
12028: GO 11981
12030: POP
12031: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12032: LD_VAR 0 6
12036: PPUSH
12037: LD_EXP 31
12041: PUSH
12042: LD_VAR 0 2
12046: STR
12047: PPUSH
12048: CALL_OW 38
// end ;
12052: LD_VAR 0 4
12056: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
// for unit in units do
12061: LD_ADDR_VAR 0 5
12065: PUSH
12066: LD_VAR 0 1
12070: PUSH
12071: FOR_IN
12072: IFFALSE 12095
// PlaceUnitArea ( unit , area , spawnMode ) ;
12074: LD_VAR 0 5
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 49
12093: GO 12071
12095: POP
12096: POP
// end ;
12097: LD_VAR 0 4
12101: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12102: LD_INT 0
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// units = characters ;
12108: LD_ADDR_VAR 0 9
12112: PUSH
12113: LD_VAR 0 1
12117: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12118: LD_ADDR_VAR 0 9
12122: PUSH
12123: LD_VAR 0 9
12127: PUSH
12128: LD_EXP 39
12132: PUSH
12133: LD_EXP 40
12137: PUSH
12138: LD_EXP 41
12142: PUSH
12143: LD_EXP 42
12147: PUSH
12148: LD_EXP 43
12152: PUSH
12153: LD_EXP 44
12157: PUSH
12158: LD_EXP 45
12162: PUSH
12163: LD_EXP 46
12167: PUSH
12168: LD_EXP 51
12172: PUSH
12173: LD_EXP 48
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: DIFF
12190: ST_TO_ADDR
// if not units and not canTalkHero then
12191: LD_VAR 0 9
12195: NOT
12196: PUSH
12197: LD_VAR 0 5
12201: NOT
12202: AND
12203: IFFALSE 12207
// exit ;
12205: GO 12380
// if not units then
12207: LD_VAR 0 9
12211: NOT
12212: IFFALSE 12233
// units = characters diff [ Burlak ] ;
12214: LD_ADDR_VAR 0 9
12218: PUSH
12219: LD_VAR 0 1
12223: PUSH
12224: LD_EXP 39
12228: PUSH
12229: EMPTY
12230: LIST
12231: DIFF
12232: ST_TO_ADDR
// if not units and canTalkHero then
12233: LD_VAR 0 9
12237: NOT
12238: PUSH
12239: LD_VAR 0 5
12243: AND
12244: IFFALSE 12248
// exit ;
12246: GO 12380
// speaker := units [ rand ( 1 , units ) ] ;
12248: LD_ADDR_VAR 0 8
12252: PUSH
12253: LD_VAR 0 9
12257: PUSH
12258: LD_INT 1
12260: PPUSH
12261: LD_VAR 0 9
12265: PPUSH
12266: CALL_OW 12
12270: ARRAY
12271: ST_TO_ADDR
// if radio then
12272: LD_VAR 0 4
12276: IFFALSE 12325
// begin if GetSex ( speaker ) = sex_male then
12278: LD_VAR 0 8
12282: PPUSH
12283: CALL_OW 258
12287: PUSH
12288: LD_INT 1
12290: EQUAL
12291: IFFALSE 12309
// SayRadio ( speaker , dialogMID ) else
12293: LD_VAR 0 8
12297: PPUSH
12298: LD_VAR 0 2
12302: PPUSH
12303: CALL_OW 94
12307: GO 12323
// SayRadio ( speaker , dialogFID ) ;
12309: LD_VAR 0 8
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: CALL_OW 94
// end else
12323: GO 12370
// begin if GetSex ( speaker ) = sex_male then
12325: LD_VAR 0 8
12329: PPUSH
12330: CALL_OW 258
12334: PUSH
12335: LD_INT 1
12337: EQUAL
12338: IFFALSE 12356
// Say ( speaker , dialogMID ) else
12340: LD_VAR 0 8
12344: PPUSH
12345: LD_VAR 0 2
12349: PPUSH
12350: CALL_OW 88
12354: GO 12370
// Say ( speaker , dialogFID ) ;
12356: LD_VAR 0 8
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: CALL_OW 88
// end ; result := speaker ;
12370: LD_ADDR_VAR 0 6
12374: PUSH
12375: LD_VAR 0 8
12379: ST_TO_ADDR
// end ;
12380: LD_VAR 0 6
12384: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12385: LD_INT 0
12387: PPUSH
12388: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12389: LD_ADDR_VAR 0 4
12393: PUSH
12394: LD_VAR 0 2
12398: PPUSH
12399: CALL_OW 254
12403: PUSH
12404: LD_INT 3
12406: MINUS
12407: ST_TO_ADDR
// if dir < 0 then
12408: LD_VAR 0 4
12412: PUSH
12413: LD_INT 0
12415: LESS
12416: IFFALSE 12432
// dir := 6 + dir ;
12418: LD_ADDR_VAR 0 4
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: LD_VAR 0 4
12430: PLUS
12431: ST_TO_ADDR
// SetDir ( un , dir ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_VAR 0 4
12441: PPUSH
12442: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_VAR 0 2
12455: PPUSH
12456: CALL_OW 52
// result = un ;
12460: LD_ADDR_VAR 0 3
12464: PUSH
12465: LD_VAR 0 1
12469: ST_TO_ADDR
// end ;
12470: LD_VAR 0 3
12474: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
// for eng in engs do
12479: LD_ADDR_VAR 0 4
12483: PUSH
12484: LD_VAR 0 1
12488: PUSH
12489: FOR_IN
12490: IFFALSE 12607
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12492: LD_VAR 0 4
12496: PPUSH
12497: CALL_OW 257
12501: PUSH
12502: LD_INT 2
12504: EQUAL
12505: PUSH
12506: LD_VAR 0 4
12510: PPUSH
12511: CALL_OW 302
12515: AND
12516: PUSH
12517: LD_VAR 0 2
12521: AND
12522: PUSH
12523: LD_VAR 0 2
12527: PPUSH
12528: CALL_OW 255
12532: PUSH
12533: LD_VAR 0 4
12537: PPUSH
12538: CALL_OW 255
12542: EQUAL
12543: NOT
12544: AND
12545: IFFALSE 12605
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12547: LD_VAR 0 4
12551: PPUSH
12552: LD_STRING e
12554: PUSH
12555: LD_VAR 0 2
12559: PPUSH
12560: CALL_OW 250
12564: PUSH
12565: LD_VAR 0 2
12569: PPUSH
12570: CALL_OW 251
12574: PUSH
12575: LD_VAR 0 2
12579: PUSH
12580: LD_INT 0
12582: PUSH
12583: LD_INT 0
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: PPUSH
12601: CALL_OW 447
12605: GO 12489
12607: POP
12608: POP
12609: LD_VAR 0 3
12613: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12614: LD_INT 0
12616: PPUSH
12617: PPUSH
12618: PPUSH
12619: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12620: LD_ADDR_VAR 0 7
12624: PUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_VAR 0 2
12634: ARRAY
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: CALL_OW 3
12645: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12646: LD_ADDR_VAR 0 1
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: LD_VAR 0 2
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: CALL_OW 1
12670: ST_TO_ADDR
// result := tab ;
12671: LD_ADDR_VAR 0 4
12675: PUSH
12676: LD_VAR 0 1
12680: ST_TO_ADDR
// end ;
12681: LD_VAR 0 4
12685: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12686: LD_INT 0
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
// result := [ ] ;
12700: LD_ADDR_VAR 0 8
12704: PUSH
12705: EMPTY
12706: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 266
12716: PUSH
12717: LD_INT 0
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: IN
12727: NOT
12728: IFFALSE 12732
// exit ;
12730: GO 14410
// if name then
12732: LD_VAR 0 3
12736: IFFALSE 12752
// SetBName ( base_dep , name ) ;
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: CALL_OW 500
// base := GetBase ( base_dep ) ;
12752: LD_ADDR_VAR 0 16
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 274
12766: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12767: LD_ADDR_VAR 0 17
12771: PUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 255
12781: ST_TO_ADDR
// if sources then
12782: LD_VAR 0 5
12786: IFFALSE 12833
// for i = 1 to 3 do
12788: LD_ADDR_VAR 0 9
12792: PUSH
12793: DOUBLE
12794: LD_INT 1
12796: DEC
12797: ST_TO_ADDR
12798: LD_INT 3
12800: PUSH
12801: FOR_TO
12802: IFFALSE 12831
// AddResourceType ( base , i , sources [ i ] ) ;
12804: LD_VAR 0 16
12808: PPUSH
12809: LD_VAR 0 9
12813: PPUSH
12814: LD_VAR 0 5
12818: PUSH
12819: LD_VAR 0 9
12823: ARRAY
12824: PPUSH
12825: CALL_OW 276
12829: GO 12801
12831: POP
12832: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12833: LD_ADDR_VAR 0 18
12837: PUSH
12838: LD_VAR 0 16
12842: PPUSH
12843: LD_VAR 0 2
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL 52012 0 3
12855: ST_TO_ADDR
// InitHc ;
12856: CALL_OW 19
// InitUc ;
12860: CALL_OW 18
// uc_side := side ;
12864: LD_ADDR_OWVAR 20
12868: PUSH
12869: LD_VAR 0 17
12873: ST_TO_ADDR
// uc_nation := nation ;
12874: LD_ADDR_OWVAR 21
12878: PUSH
12879: LD_VAR 0 6
12883: ST_TO_ADDR
// if buildings then
12884: LD_VAR 0 18
12888: IFFALSE 14269
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12890: LD_ADDR_VAR 0 19
12894: PUSH
12895: LD_VAR 0 18
12899: PPUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 29
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 72
12932: ST_TO_ADDR
// if tmp then
12933: LD_VAR 0 19
12937: IFFALSE 12985
// for i in tmp do
12939: LD_ADDR_VAR 0 9
12943: PUSH
12944: LD_VAR 0 19
12948: PUSH
12949: FOR_IN
12950: IFFALSE 12983
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12952: LD_VAR 0 9
12956: PPUSH
12957: CALL_OW 250
12961: PPUSH
12962: LD_VAR 0 9
12966: PPUSH
12967: CALL_OW 251
12971: PPUSH
12972: LD_VAR 0 17
12976: PPUSH
12977: CALL_OW 441
12981: GO 12949
12983: POP
12984: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12985: LD_VAR 0 18
12989: PPUSH
12990: LD_INT 2
12992: PUSH
12993: LD_INT 30
12995: PUSH
12996: LD_INT 31
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: LD_INT 32
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 72
13033: IFFALSE 13132
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13035: LD_ADDR_VAR 0 9
13039: PUSH
13040: LD_VAR 0 18
13044: PPUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 30
13050: PUSH
13051: LD_INT 31
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 30
13060: PUSH
13061: LD_INT 32
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 33
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 72
13088: PUSH
13089: FOR_IN
13090: IFFALSE 13130
// begin if not GetBWeapon ( i ) then
13092: LD_VAR 0 9
13096: PPUSH
13097: CALL_OW 269
13101: NOT
13102: IFFALSE 13128
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13104: LD_VAR 0 9
13108: PPUSH
13109: LD_VAR 0 9
13113: PPUSH
13114: LD_VAR 0 2
13118: PPUSH
13119: CALL 54274 0 2
13123: PPUSH
13124: CALL_OW 431
// end ;
13128: GO 13089
13130: POP
13131: POP
// end ; for i = 1 to personel do
13132: LD_ADDR_VAR 0 9
13136: PUSH
13137: DOUBLE
13138: LD_INT 1
13140: DEC
13141: ST_TO_ADDR
13142: LD_VAR 0 7
13146: PUSH
13147: FOR_TO
13148: IFFALSE 14249
// begin if i > 4 then
13150: LD_VAR 0 9
13154: PUSH
13155: LD_INT 4
13157: GREATER
13158: IFFALSE 13162
// break ;
13160: GO 14249
// case i of 1 :
13162: LD_VAR 0 9
13166: PUSH
13167: LD_INT 1
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13266
13175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13176: LD_ADDR_VAR 0 13
13180: PUSH
13181: LD_VAR 0 18
13185: PPUSH
13186: LD_INT 22
13188: PUSH
13189: LD_VAR 0 17
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 58
13200: PUSH
13201: EMPTY
13202: LIST
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 31
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 30
13219: PUSH
13220: LD_INT 32
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 30
13229: PUSH
13230: LD_INT 4
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 30
13239: PUSH
13240: LD_INT 5
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 72
13263: ST_TO_ADDR
13264: GO 13499
13266: LD_INT 2
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13336
13274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13275: LD_ADDR_VAR 0 13
13279: PUSH
13280: LD_VAR 0 18
13284: PPUSH
13285: LD_INT 22
13287: PUSH
13288: LD_VAR 0 17
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 0
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PPUSH
13329: CALL_OW 72
13333: ST_TO_ADDR
13334: GO 13499
13336: LD_INT 3
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13417
13344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13345: LD_ADDR_VAR 0 13
13349: PUSH
13350: LD_VAR 0 18
13354: PPUSH
13355: LD_INT 22
13357: PUSH
13358: LD_VAR 0 17
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 36
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 30
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 30
13392: PUSH
13393: LD_INT 3
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 72
13414: ST_TO_ADDR
13415: GO 13499
13417: LD_INT 4
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13498
13425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13426: LD_ADDR_VAR 0 13
13430: PUSH
13431: LD_VAR 0 18
13435: PPUSH
13436: LD_INT 22
13438: PUSH
13439: LD_VAR 0 17
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 6
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 7
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 30
13473: PUSH
13474: LD_INT 8
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 72
13495: ST_TO_ADDR
13496: GO 13499
13498: POP
// if i = 1 then
13499: LD_VAR 0 9
13503: PUSH
13504: LD_INT 1
13506: EQUAL
13507: IFFALSE 13625
// begin tmp := [ ] ;
13509: LD_ADDR_VAR 0 19
13513: PUSH
13514: EMPTY
13515: ST_TO_ADDR
// for j in f do
13516: LD_ADDR_VAR 0 10
13520: PUSH
13521: LD_VAR 0 13
13525: PUSH
13526: FOR_IN
13527: IFFALSE 13607
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13529: LD_VAR 0 10
13533: PPUSH
13534: CALL_OW 266
13538: PUSH
13539: LD_INT 31
13541: PUSH
13542: LD_INT 32
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: IN
13549: IFFALSE 13576
// tmp := Insert ( tmp , 1 , j ) else
13551: LD_ADDR_VAR 0 19
13555: PUSH
13556: LD_VAR 0 19
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: LD_VAR 0 10
13568: PPUSH
13569: CALL_OW 2
13573: ST_TO_ADDR
13574: GO 13605
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13576: LD_ADDR_VAR 0 19
13580: PUSH
13581: LD_VAR 0 19
13585: PPUSH
13586: LD_VAR 0 19
13590: PUSH
13591: LD_INT 1
13593: PLUS
13594: PPUSH
13595: LD_VAR 0 10
13599: PPUSH
13600: CALL_OW 2
13604: ST_TO_ADDR
13605: GO 13526
13607: POP
13608: POP
// if tmp then
13609: LD_VAR 0 19
13613: IFFALSE 13625
// f := tmp ;
13615: LD_ADDR_VAR 0 13
13619: PUSH
13620: LD_VAR 0 19
13624: ST_TO_ADDR
// end ; x := personel [ i ] ;
13625: LD_ADDR_VAR 0 14
13629: PUSH
13630: LD_VAR 0 7
13634: PUSH
13635: LD_VAR 0 9
13639: ARRAY
13640: ST_TO_ADDR
// if x = - 1 then
13641: LD_VAR 0 14
13645: PUSH
13646: LD_INT 1
13648: NEG
13649: EQUAL
13650: IFFALSE 13844
// begin for j in f do
13652: LD_ADDR_VAR 0 10
13656: PUSH
13657: LD_VAR 0 13
13661: PUSH
13662: FOR_IN
13663: IFFALSE 13840
// repeat InitHc ;
13665: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13669: LD_VAR 0 10
13673: PPUSH
13674: CALL_OW 266
13678: PUSH
13679: LD_INT 5
13681: EQUAL
13682: IFFALSE 13737
// begin if UnitsInside ( j ) < 3 then
13684: LD_VAR 0 10
13688: PPUSH
13689: CALL_OW 313
13693: PUSH
13694: LD_INT 3
13696: LESS
13697: IFFALSE 13718
// PrepareHuman ( false , i , skill ) else
13699: LD_INT 0
13701: PPUSH
13702: LD_VAR 0 9
13706: PPUSH
13707: LD_VAR 0 4
13711: PPUSH
13712: CALL_OW 380
13716: GO 13735
// PrepareHuman ( false , i , skill ) ;
13718: LD_INT 0
13720: PPUSH
13721: LD_VAR 0 9
13725: PPUSH
13726: LD_VAR 0 4
13730: PPUSH
13731: CALL_OW 380
// end else
13735: GO 13754
// PrepareHuman ( false , i , skill ) ;
13737: LD_INT 0
13739: PPUSH
13740: LD_VAR 0 9
13744: PPUSH
13745: LD_VAR 0 4
13749: PPUSH
13750: CALL_OW 380
// un := CreateHuman ;
13754: LD_ADDR_VAR 0 15
13758: PUSH
13759: CALL_OW 44
13763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13764: LD_ADDR_VAR 0 8
13768: PUSH
13769: LD_VAR 0 8
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: LD_VAR 0 15
13781: PPUSH
13782: CALL_OW 2
13786: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13787: LD_VAR 0 15
13791: PPUSH
13792: LD_VAR 0 10
13796: PPUSH
13797: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13801: LD_VAR 0 10
13805: PPUSH
13806: CALL_OW 313
13810: PUSH
13811: LD_INT 6
13813: EQUAL
13814: PUSH
13815: LD_VAR 0 10
13819: PPUSH
13820: CALL_OW 266
13824: PUSH
13825: LD_INT 32
13827: PUSH
13828: LD_INT 31
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: IN
13835: OR
13836: IFFALSE 13665
13838: GO 13662
13840: POP
13841: POP
// end else
13842: GO 14247
// for j = 1 to x do
13844: LD_ADDR_VAR 0 10
13848: PUSH
13849: DOUBLE
13850: LD_INT 1
13852: DEC
13853: ST_TO_ADDR
13854: LD_VAR 0 14
13858: PUSH
13859: FOR_TO
13860: IFFALSE 14245
// begin InitHc ;
13862: CALL_OW 19
// if not f then
13866: LD_VAR 0 13
13870: NOT
13871: IFFALSE 13960
// begin PrepareHuman ( false , i , skill ) ;
13873: LD_INT 0
13875: PPUSH
13876: LD_VAR 0 9
13880: PPUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: CALL_OW 380
// un := CreateHuman ;
13890: LD_ADDR_VAR 0 15
13894: PUSH
13895: CALL_OW 44
13899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13900: LD_ADDR_VAR 0 8
13904: PUSH
13905: LD_VAR 0 8
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_VAR 0 15
13917: PPUSH
13918: CALL_OW 2
13922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13923: LD_VAR 0 15
13927: PPUSH
13928: LD_VAR 0 1
13932: PPUSH
13933: CALL_OW 250
13937: PPUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 251
13947: PPUSH
13948: LD_INT 10
13950: PPUSH
13951: LD_INT 0
13953: PPUSH
13954: CALL_OW 50
// continue ;
13958: GO 13859
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13960: LD_VAR 0 13
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 313
13973: PUSH
13974: LD_VAR 0 13
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: CALL_OW 266
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: IN
13998: AND
13999: PUSH
14000: LD_VAR 0 13
14004: PUSH
14005: LD_INT 1
14007: ARRAY
14008: PPUSH
14009: CALL_OW 313
14013: PUSH
14014: LD_INT 3
14016: EQUAL
14017: PUSH
14018: LD_VAR 0 13
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: CALL_OW 266
14031: PUSH
14032: LD_INT 36
14034: EQUAL
14035: AND
14036: OR
14037: PUSH
14038: LD_VAR 0 13
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: CALL_OW 313
14051: PUSH
14052: LD_INT 6
14054: EQUAL
14055: OR
14056: IFFALSE 14076
// f := Delete ( f , 1 ) ;
14058: LD_ADDR_VAR 0 13
14062: PUSH
14063: LD_VAR 0 13
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 3
14075: ST_TO_ADDR
// if not f then
14076: LD_VAR 0 13
14080: NOT
14081: IFFALSE 14099
// begin x := x + 2 ;
14083: LD_ADDR_VAR 0 14
14087: PUSH
14088: LD_VAR 0 14
14092: PUSH
14093: LD_INT 2
14095: PLUS
14096: ST_TO_ADDR
// continue ;
14097: GO 13859
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14099: LD_VAR 0 13
14103: PUSH
14104: LD_INT 1
14106: ARRAY
14107: PPUSH
14108: CALL_OW 266
14112: PUSH
14113: LD_INT 5
14115: EQUAL
14116: IFFALSE 14175
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14118: LD_VAR 0 13
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: CALL_OW 313
14131: PUSH
14132: LD_INT 3
14134: LESS
14135: IFFALSE 14156
// PrepareHuman ( false , i , skill ) else
14137: LD_INT 0
14139: PPUSH
14140: LD_VAR 0 9
14144: PPUSH
14145: LD_VAR 0 4
14149: PPUSH
14150: CALL_OW 380
14154: GO 14173
// PrepareHuman ( false , i , skill ) ;
14156: LD_INT 0
14158: PPUSH
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_VAR 0 4
14168: PPUSH
14169: CALL_OW 380
// end else
14173: GO 14192
// PrepareHuman ( false , i , skill ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_VAR 0 9
14182: PPUSH
14183: LD_VAR 0 4
14187: PPUSH
14188: CALL_OW 380
// un := CreateHuman ;
14192: LD_ADDR_VAR 0 15
14196: PUSH
14197: CALL_OW 44
14201: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14202: LD_ADDR_VAR 0 8
14206: PUSH
14207: LD_VAR 0 8
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 15
14219: PPUSH
14220: CALL_OW 2
14224: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14225: LD_VAR 0 15
14229: PPUSH
14230: LD_VAR 0 13
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: CALL_OW 52
// end ;
14243: GO 13859
14245: POP
14246: POP
// end ;
14247: GO 13147
14249: POP
14250: POP
// result := result ^ buildings ;
14251: LD_ADDR_VAR 0 8
14255: PUSH
14256: LD_VAR 0 8
14260: PUSH
14261: LD_VAR 0 18
14265: ADD
14266: ST_TO_ADDR
// end else
14267: GO 14410
// begin for i = 1 to personel do
14269: LD_ADDR_VAR 0 9
14273: PUSH
14274: DOUBLE
14275: LD_INT 1
14277: DEC
14278: ST_TO_ADDR
14279: LD_VAR 0 7
14283: PUSH
14284: FOR_TO
14285: IFFALSE 14408
// begin if i > 4 then
14287: LD_VAR 0 9
14291: PUSH
14292: LD_INT 4
14294: GREATER
14295: IFFALSE 14299
// break ;
14297: GO 14408
// x := personel [ i ] ;
14299: LD_ADDR_VAR 0 14
14303: PUSH
14304: LD_VAR 0 7
14308: PUSH
14309: LD_VAR 0 9
14313: ARRAY
14314: ST_TO_ADDR
// if x = - 1 then
14315: LD_VAR 0 14
14319: PUSH
14320: LD_INT 1
14322: NEG
14323: EQUAL
14324: IFFALSE 14328
// continue ;
14326: GO 14284
// PrepareHuman ( false , i , skill ) ;
14328: LD_INT 0
14330: PPUSH
14331: LD_VAR 0 9
14335: PPUSH
14336: LD_VAR 0 4
14340: PPUSH
14341: CALL_OW 380
// un := CreateHuman ;
14345: LD_ADDR_VAR 0 15
14349: PUSH
14350: CALL_OW 44
14354: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14355: LD_VAR 0 15
14359: PPUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 250
14369: PPUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 251
14379: PPUSH
14380: LD_INT 10
14382: PPUSH
14383: LD_INT 0
14385: PPUSH
14386: CALL_OW 50
// result := result ^ un ;
14390: LD_ADDR_VAR 0 8
14394: PUSH
14395: LD_VAR 0 8
14399: PUSH
14400: LD_VAR 0 15
14404: ADD
14405: ST_TO_ADDR
// end ;
14406: GO 14284
14408: POP
14409: POP
// end ; end ;
14410: LD_VAR 0 8
14414: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14415: LD_INT 0
14417: PPUSH
14418: PPUSH
14419: PPUSH
14420: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14421: LD_ADDR_VAR 0 6
14425: PUSH
14426: LD_INT 34
14428: PUSH
14429: LD_INT 71
14431: PUSH
14432: LD_INT 70
14434: PUSH
14435: LD_INT 69
14437: PUSH
14438: LD_INT 39
14440: PUSH
14441: LD_INT 31
14443: PUSH
14444: LD_INT 14
14446: PUSH
14447: LD_INT 10
14449: PUSH
14450: LD_INT 40
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// resultWeapons = [ ] ;
14464: LD_ADDR_VAR 0 5
14468: PUSH
14469: EMPTY
14470: ST_TO_ADDR
// for i := 1 to weaponTechs do
14471: LD_ADDR_VAR 0 4
14475: PUSH
14476: DOUBLE
14477: LD_INT 1
14479: DEC
14480: ST_TO_ADDR
14481: LD_VAR 0 6
14485: PUSH
14486: FOR_TO
14487: IFFALSE 14674
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14489: LD_VAR 0 6
14493: PUSH
14494: LD_VAR 0 4
14498: ARRAY
14499: PPUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL_OW 482
14509: PUSH
14510: LD_VAR 0 6
14514: PUSH
14515: LD_VAR 0 4
14519: ARRAY
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 321
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: AND
14535: IFFALSE 14672
// case nation of nation_american :
14537: LD_VAR 0 2
14541: PUSH
14542: LD_INT 1
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14585
14550: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14551: LD_ADDR_VAR 0 5
14555: PUSH
14556: LD_VAR 0 5
14560: PUSH
14561: LD_VAR 0 6
14565: PUSH
14566: LD_VAR 0 4
14570: ARRAY
14571: PPUSH
14572: LD_VAR 0 2
14576: PPUSH
14577: CALL 14691 0 2
14581: ADD
14582: ST_TO_ADDR
14583: GO 14672
14585: LD_INT 2
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14628
14593: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14594: LD_ADDR_VAR 0 5
14598: PUSH
14599: LD_VAR 0 5
14603: PUSH
14604: LD_VAR 0 6
14608: PUSH
14609: LD_VAR 0 4
14613: ARRAY
14614: PPUSH
14615: LD_VAR 0 2
14619: PPUSH
14620: CALL 14691 0 2
14624: ADD
14625: ST_TO_ADDR
14626: GO 14672
14628: LD_INT 3
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14671
14636: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14637: LD_ADDR_VAR 0 5
14641: PUSH
14642: LD_VAR 0 5
14646: PUSH
14647: LD_VAR 0 6
14651: PUSH
14652: LD_VAR 0 4
14656: ARRAY
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 14691 0 2
14667: ADD
14668: ST_TO_ADDR
14669: GO 14672
14671: POP
// end ;
14672: GO 14486
14674: POP
14675: POP
// result = resultWeapons ;
14676: LD_ADDR_VAR 0 3
14680: PUSH
14681: LD_VAR 0 5
14685: ST_TO_ADDR
// end ;
14686: LD_VAR 0 3
14690: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14691: LD_INT 0
14693: PPUSH
// case tech of tech_AdvMet :
14694: LD_VAR 0 1
14698: PUSH
14699: LD_INT 34
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14735
14707: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14708: LD_ADDR_VAR 0 3
14712: PUSH
14713: LD_INT 6
14715: PUSH
14716: LD_STRING 
14718: PUSH
14719: LD_INT 46
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: LD_VAR 0 2
14731: ARRAY
14732: ST_TO_ADDR
14733: GO 15024
14735: LD_INT 71
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14771
14743: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_STRING 
14751: PUSH
14752: LD_STRING 
14754: PUSH
14755: LD_INT 47
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: LD_VAR 0 2
14767: ARRAY
14768: ST_TO_ADDR
14769: GO 15024
14771: LD_INT 70
14773: DOUBLE
14774: EQUAL
14775: IFTRUE 14779
14777: GO 14807
14779: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_STRING 
14787: PUSH
14788: LD_INT 26
14790: PUSH
14791: LD_STRING 
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: LD_VAR 0 2
14803: ARRAY
14804: ST_TO_ADDR
14805: GO 15024
14807: LD_INT 69
14809: DOUBLE
14810: EQUAL
14811: IFTRUE 14815
14813: GO 14843
14815: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14816: LD_ADDR_VAR 0 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 25
14826: PUSH
14827: LD_INT 43
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_VAR 0 2
14839: ARRAY
14840: ST_TO_ADDR
14841: GO 15024
14843: LD_INT 39
14845: DOUBLE
14846: EQUAL
14847: IFTRUE 14851
14849: GO 14879
14851: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 44
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: LD_VAR 0 2
14875: ARRAY
14876: ST_TO_ADDR
14877: GO 15024
14879: LD_INT 31
14881: DOUBLE
14882: EQUAL
14883: IFTRUE 14887
14885: GO 14915
14887: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14888: LD_ADDR_VAR 0 3
14892: PUSH
14893: LD_STRING 
14895: PUSH
14896: LD_STRING 
14898: PUSH
14899: LD_INT 49
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: LD_VAR 0 2
14911: ARRAY
14912: ST_TO_ADDR
14913: GO 15024
14915: LD_INT 14
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 14951
14923: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_STRING 
14934: PUSH
14935: LD_STRING 
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_VAR 0 2
14947: ARRAY
14948: ST_TO_ADDR
14949: GO 15024
14951: LD_INT 10
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 14987
14959: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 9
14967: PUSH
14968: LD_STRING 
14970: PUSH
14971: LD_STRING 
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: LD_VAR 0 2
14983: ARRAY
14984: ST_TO_ADDR
14985: GO 15024
14987: LD_INT 40
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15023
14995: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: LD_INT 7
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: LD_INT 45
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: LD_VAR 0 2
15019: ARRAY
15020: ST_TO_ADDR
15021: GO 15024
15023: POP
// end ;
15024: LD_VAR 0 3
15028: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15033: LD_ADDR_VAR 0 2
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 289
15050: PUSH
15051: LD_VAR 0 1
15055: PPUSH
15056: LD_INT 2
15058: PPUSH
15059: CALL_OW 289
15063: PUSH
15064: LD_VAR 0 1
15068: PPUSH
15069: LD_INT 3
15071: PPUSH
15072: CALL_OW 289
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: ST_TO_ADDR
// end ;
15082: LD_VAR 0 2
15086: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15087: LD_INT 0
15089: PPUSH
15090: PPUSH
// area = ListEnvironmentArea ( area ) ;
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: LD_VAR 0 2
15100: PPUSH
15101: CALL_OW 353
15105: ST_TO_ADDR
// if bulldozer > 0 then
15106: LD_VAR 0 1
15110: PUSH
15111: LD_INT 0
15113: GREATER
15114: IFFALSE 15225
// for i = area downto 1 do
15116: LD_ADDR_VAR 0 4
15120: PUSH
15121: DOUBLE
15122: LD_VAR 0 2
15126: INC
15127: ST_TO_ADDR
15128: LD_INT 1
15130: PUSH
15131: FOR_DOWNTO
15132: IFFALSE 15223
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15134: LD_VAR 0 2
15138: PUSH
15139: LD_VAR 0 4
15143: ARRAY
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 2
15153: PUSH
15154: LD_VAR 0 4
15158: ARRAY
15159: PUSH
15160: LD_INT 2
15162: ARRAY
15163: PPUSH
15164: CALL_OW 351
15168: IFFALSE 15221
// if not HasTask ( bulldozer ) then
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 314
15179: NOT
15180: IFFALSE 15221
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15182: LD_VAR 0 1
15186: PPUSH
15187: LD_VAR 0 2
15191: PUSH
15192: LD_VAR 0 4
15196: ARRAY
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: LD_VAR 0 2
15206: PUSH
15207: LD_VAR 0 4
15211: ARRAY
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: CALL_OW 171
15221: GO 15131
15223: POP
15224: POP
// end ;
15225: LD_VAR 0 3
15229: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15230: LD_INT 0
15232: PPUSH
15233: PPUSH
15234: PPUSH
// uc_side := GetSide ( b ) ;
15235: LD_ADDR_OWVAR 20
15239: PUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 255
15249: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15250: LD_ADDR_OWVAR 21
15254: PUSH
15255: LD_VAR 0 2
15259: PPUSH
15260: CALL_OW 248
15264: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15265: LD_INT 0
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 380
// un = CreateHuman ;
15280: LD_ADDR_VAR 0 4
15284: PUSH
15285: CALL_OW 44
15289: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: CALL_OW 254
15304: PUSH
15305: LD_INT 3
15307: MINUS
15308: ST_TO_ADDR
// if dir < 0 then
15309: LD_VAR 0 5
15313: PUSH
15314: LD_INT 0
15316: LESS
15317: IFFALSE 15333
// dir := 6 + dir ;
15319: LD_ADDR_VAR 0 5
15323: PUSH
15324: LD_INT 6
15326: PUSH
15327: LD_VAR 0 5
15331: PLUS
15332: ST_TO_ADDR
// SetDir ( un , dir ) ;
15333: LD_VAR 0 4
15337: PPUSH
15338: LD_VAR 0 5
15342: PPUSH
15343: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15347: LD_VAR 0 4
15351: PPUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 52
// result = un ;
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// end ;
15371: LD_VAR 0 3
15375: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_INT 22
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 21
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 23
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: PUSH
15431: LD_EXP 39
15435: PUSH
15436: LD_EXP 51
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: DIFF
15445: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15446: LD_ADDR_VAR 0 3
15450: PUSH
15451: LD_VAR 0 3
15455: PUSH
15456: LD_EXP 52
15460: DIFF
15461: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15462: LD_ADDR_EXP 52
15466: PUSH
15467: LD_EXP 52
15471: PUSH
15472: LD_EXP 51
15476: DIFF
15477: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15478: LD_ADDR_VAR 0 6
15482: PUSH
15483: LD_VAR 0 3
15487: PUSH
15488: LD_INT 2
15490: DIV
15491: PUSH
15492: LD_VAR 0 3
15496: PUSH
15497: LD_INT 2
15499: MOD
15500: PLUS
15501: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15502: LD_ADDR_VAR 0 4
15506: PUSH
15507: LD_STRING text
15509: PPUSH
15510: LD_INT 0
15512: PPUSH
15513: LD_INT 3
15515: PPUSH
15516: LD_EXP 39
15520: PUSH
15521: LD_INT -3
15523: PUSH
15524: LD_INT -5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: LD_VAR 0 3
15536: ADD
15537: PUSH
15538: LD_INT -2
15540: PUSH
15541: EMPTY
15542: LIST
15543: ADD
15544: PUSH
15545: LD_EXP 52
15549: ADD
15550: PUSH
15551: LD_INT -4
15553: PUSH
15554: LD_EXP 51
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: ADD
15563: PPUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 4
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 42
15586: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15587: LD_INT 22
15589: PUSH
15590: LD_INT 3
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 23
15609: PUSH
15610: LD_INT 3
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PPUSH
15622: CALL_OW 69
15626: PPUSH
15627: LD_INT 6
15629: PPUSH
15630: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_INT 3
15641: PPUSH
15642: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
15646: LD_EXP 39
15650: PPUSH
15651: LD_INT 3
15653: PPUSH
15654: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 21
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PPUSH
15687: CALL_OW 69
15691: PUSH
15692: FOR_IN
15693: IFFALSE 15726
// if IsInUnit ( i ) then
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 310
15704: IFFALSE 15724
// begin ComExitVehicle ( i ) ;
15706: LD_VAR 0 2
15710: PPUSH
15711: CALL_OW 121
// ComExitBuilding ( i ) ;
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 122
// end ;
15724: GO 15692
15726: POP
15727: POP
// if not Vsevolod in selectedPeople then
15728: LD_EXP 51
15732: PUSH
15733: LD_VAR 0 4
15737: IN
15738: NOT
15739: IFFALSE 15756
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15741: LD_EXP 51
15745: PPUSH
15746: LD_STRING Vsevolod
15748: PPUSH
15749: LD_INT 6
15751: PPUSH
15752: CALL 11903 0 3
// if not Karamazov in selectedPeople then
15756: LD_EXP 40
15760: PUSH
15761: LD_VAR 0 4
15765: IN
15766: NOT
15767: IFFALSE 15784
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15769: LD_EXP 40
15773: PPUSH
15774: LD_STRING VSKaramazov
15776: PPUSH
15777: LD_INT 6
15779: PPUSH
15780: CALL 11903 0 3
// if not Petrovova in selectedPeople then
15784: LD_EXP 41
15788: PUSH
15789: LD_VAR 0 4
15793: IN
15794: NOT
15795: IFFALSE 15812
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15797: LD_EXP 41
15801: PPUSH
15802: LD_STRING VSPetrovova
15804: PPUSH
15805: LD_INT 6
15807: PPUSH
15808: CALL 11903 0 3
// if not Gleb in selectedPeople then
15812: LD_EXP 42
15816: PUSH
15817: LD_VAR 0 4
15821: IN
15822: NOT
15823: IFFALSE 15840
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15825: LD_EXP 42
15829: PPUSH
15830: LD_STRING VSGleb
15832: PPUSH
15833: LD_INT 6
15835: PPUSH
15836: CALL 11903 0 3
// if not Petrosyan in selectedPeople then
15840: LD_EXP 43
15844: PUSH
15845: LD_VAR 0 4
15849: IN
15850: NOT
15851: IFFALSE 15868
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15853: LD_EXP 43
15857: PPUSH
15858: LD_STRING VSPetrosyan
15860: PPUSH
15861: LD_INT 6
15863: PPUSH
15864: CALL 11903 0 3
// if not Titov in selectedPeople then
15868: LD_EXP 44
15872: PUSH
15873: LD_VAR 0 4
15877: IN
15878: NOT
15879: IFFALSE 15896
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15881: LD_EXP 44
15885: PPUSH
15886: LD_STRING VSTitov
15888: PPUSH
15889: LD_INT 6
15891: PPUSH
15892: CALL 11903 0 3
// if not Dolgov in selectedPeople then
15896: LD_EXP 45
15900: PUSH
15901: LD_VAR 0 4
15905: IN
15906: NOT
15907: IFFALSE 15924
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15909: LD_EXP 45
15913: PPUSH
15914: LD_STRING VSDolgov
15916: PPUSH
15917: LD_INT 6
15919: PPUSH
15920: CALL 11903 0 3
// if not Lipshchin in selectedPeople then
15924: LD_EXP 46
15928: PUSH
15929: LD_VAR 0 4
15933: IN
15934: NOT
15935: IFFALSE 15952
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15937: LD_EXP 46
15941: PPUSH
15942: LD_STRING VSLipshchin
15944: PPUSH
15945: LD_INT 6
15947: PPUSH
15948: CALL 11903 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15952: LD_ADDR_VAR 0 5
15956: PUSH
15957: LD_INT 22
15959: PUSH
15960: LD_INT 6
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 21
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 23
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PPUSH
15992: CALL_OW 69
15996: PUSH
15997: LD_EXP 40
16001: PUSH
16002: LD_EXP 41
16006: PUSH
16007: LD_EXP 42
16011: PUSH
16012: LD_EXP 43
16016: PUSH
16017: LD_EXP 44
16021: PUSH
16022: LD_EXP 45
16026: PUSH
16027: LD_EXP 46
16031: PUSH
16032: LD_EXP 51
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: DIFF
16047: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
16048: LD_VAR 0 5
16052: PPUSH
16053: LD_STRING other_survivors_with_vsevolod
16055: PPUSH
16056: LD_INT 6
16058: PPUSH
16059: CALL 11959 0 3
// end ; end_of_file
16063: LD_VAR 0 1
16067: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
16074: LD_EXP 39
16078: PPUSH
16079: CALL_OW 310
16083: PPUSH
16084: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
16088: LD_ADDR_VAR 0 4
16092: PUSH
16093: LD_INT 22
16095: PUSH
16096: LD_INT 3
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 21
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16187
// begin if ( i mod 2 ) = 0 then
16125: LD_VAR 0 2
16129: PUSH
16130: LD_INT 2
16132: MOD
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: IFFALSE 16156
// ComMoveXY ( unit , 156 , 205 ) else
16139: LD_VAR 0 4
16143: PPUSH
16144: LD_INT 156
16146: PPUSH
16147: LD_INT 205
16149: PPUSH
16150: CALL_OW 111
16154: GO 16171
// ComMoveXY ( unit , 160 , 215 ) ;
16156: LD_VAR 0 4
16160: PPUSH
16161: LD_INT 160
16163: PPUSH
16164: LD_INT 215
16166: PPUSH
16167: CALL_OW 111
// i = i + 1 ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_VAR 0 2
16180: PUSH
16181: LD_INT 1
16183: PLUS
16184: ST_TO_ADDR
// end ;
16185: GO 16122
16187: POP
16188: POP
// if IsOK ( Karamazov ) then
16189: LD_EXP 40
16193: PPUSH
16194: CALL_OW 302
16198: IFFALSE 16212
// ruEng = Karamazov else
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_EXP 40
16209: ST_TO_ADDR
16210: GO 16295
// if IsOK ( Lipshchin ) then
16212: LD_EXP 46
16216: PPUSH
16217: CALL_OW 302
16221: IFFALSE 16235
// ruEng = Lipshchin else
16223: LD_ADDR_VAR 0 3
16227: PUSH
16228: LD_EXP 46
16232: ST_TO_ADDR
16233: GO 16295
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
16235: LD_ADDR_VAR 0 3
16239: PUSH
16240: LD_INT 22
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 21
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 23
16262: PUSH
16263: LD_INT 3
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: ST_TO_ADDR
// wait ( 0 0$3 ) ;
16295: LD_INT 105
16297: PPUSH
16298: CALL_OW 67
// CenterOnXY ( 160 , 213 ) ;
16302: LD_INT 160
16304: PPUSH
16305: LD_INT 213
16307: PPUSH
16308: CALL_OW 84
// wait ( 0 0$3 ) ;
16312: LD_INT 105
16314: PPUSH
16315: CALL_OW 67
// CenterOnXY ( 149 , 211 ) ;
16319: LD_INT 149
16321: PPUSH
16322: LD_INT 211
16324: PPUSH
16325: CALL_OW 84
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
16329: LD_VAR 0 3
16333: PPUSH
16334: CALL_OW 310
16338: PPUSH
16339: LD_INT 149
16341: PPUSH
16342: LD_INT 212
16344: PPUSH
16345: CALL_OW 111
// wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
16356: LD_VAR 0 3
16360: PPUSH
16361: CALL_OW 310
16365: PPUSH
16366: LD_INT 149
16368: PPUSH
16369: LD_INT 212
16371: PPUSH
16372: CALL_OW 297
16376: PUSH
16377: LD_INT 2
16379: LESSEQUAL
16380: IFFALSE 16329
// ComExitVehicle ( ruEng ) ;
16382: LD_VAR 0 3
16386: PPUSH
16387: CALL_OW 121
// wait ( 0 0$1 ) ;
16391: LD_INT 35
16393: PPUSH
16394: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_INT 74
16405: PPUSH
16406: CALL 12475 0 2
// repeat wait ( 0 0$1 ) ;
16410: LD_INT 35
16412: PPUSH
16413: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
16417: LD_INT 74
16419: PPUSH
16420: CALL_OW 255
16424: PUSH
16425: LD_INT 3
16427: EQUAL
16428: IFFALSE 16410
// ComEnterUnit ( ruEng , rudepot ) ;
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 74
16437: PPUSH
16438: CALL_OW 120
// wait ( 0 0$2 ) ;
16442: LD_INT 70
16444: PPUSH
16445: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
16449: LD_INT 22
16451: PUSH
16452: LD_INT 6
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16471: LD_ADDR_VAR 0 4
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: FOR_IN
16506: IFFALSE 16539
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16508: LD_VAR 0 4
16512: PPUSH
16513: CALL_OW 310
16517: PPUSH
16518: CALL_OW 247
16522: PUSH
16523: LD_INT 2
16525: EQUAL
16526: IFFALSE 16537
// ComExitVehicle ( unit ) ;
16528: LD_VAR 0 4
16532: PPUSH
16533: CALL_OW 121
16537: GO 16505
16539: POP
16540: POP
// if ruEng = Karamazov then
16541: LD_VAR 0 3
16545: PUSH
16546: LD_EXP 40
16550: EQUAL
16551: IFFALSE 16567
// Say ( Karamazov , DStart-Kar-1 ) else
16553: LD_EXP 40
16557: PPUSH
16558: LD_STRING DStart-Kar-1
16560: PPUSH
16561: CALL_OW 88
16565: GO 16591
// if ruEng = Lipshchin then
16567: LD_VAR 0 3
16571: PUSH
16572: LD_EXP 46
16576: EQUAL
16577: IFFALSE 16591
// Say ( Lipshchin , DStart-Lip-1 ) ;
16579: LD_EXP 46
16583: PPUSH
16584: LD_STRING DStart-Lip-1
16586: PPUSH
16587: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
16591: LD_VAR 0 3
16595: PPUSH
16596: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16600: LD_ADDR_VAR 0 4
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: LD_INT 250
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: PUSH
16652: FOR_IN
16653: IFFALSE 16706
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16655: LD_INT 22
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 21
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 25
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: PPUSH
16695: LD_VAR 0 4
16699: PPUSH
16700: CALL_OW 190
16704: GO 16652
16706: POP
16707: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16708: LD_EXP 39
16712: PPUSH
16713: LD_STRING DStart-Bur-1
16715: PPUSH
16716: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16720: LD_EXP 47
16724: PPUSH
16725: LD_STRING DStart-Pla-1
16727: PPUSH
16728: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16732: LD_EXP 39
16736: PPUSH
16737: LD_STRING DStart-Bur-2
16739: PPUSH
16740: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16744: LD_EXP 47
16748: PPUSH
16749: LD_STRING DStart-Pla-2
16751: PPUSH
16752: CALL_OW 94
// if IsOK ( Petrovova ) then
16756: LD_EXP 41
16760: PPUSH
16761: CALL_OW 302
16765: IFFALSE 16779
// Say ( Petrovova , DStart-Ptr-2 ) ;
16767: LD_EXP 41
16771: PPUSH
16772: LD_STRING DStart-Ptr-2
16774: PPUSH
16775: CALL_OW 88
// InGameOff ;
16779: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16783: LD_STRING MStart
16785: PPUSH
16786: CALL_OW 337
// SaveForQuickRestart ;
16790: CALL_OW 22
// wait ( 0 0$10 ) ;
16794: LD_INT 350
16796: PPUSH
16797: CALL_OW 67
// if IsOK ( Petrosyan ) then
16801: LD_EXP 43
16805: PPUSH
16806: CALL_OW 302
16810: IFFALSE 16826
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16812: LD_EXP 43
16816: PPUSH
16817: LD_STRING DMatPrediction-Pty-1
16819: PPUSH
16820: CALL_OW 88
16824: GO 16849
// if IsOK ( Dolgov ) then
16826: LD_EXP 45
16830: PPUSH
16831: CALL_OW 302
16835: IFFALSE 16849
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16837: LD_EXP 45
16841: PPUSH
16842: LD_STRING DMatPrediction-Dol-1
16844: PPUSH
16845: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16849: LD_EXP 43
16853: PPUSH
16854: CALL_OW 302
16858: PUSH
16859: LD_EXP 45
16863: PPUSH
16864: CALL_OW 302
16868: OR
16869: IFFALSE 16883
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16871: LD_EXP 39
16875: PPUSH
16876: LD_STRING DMatPrediction-Bur-1
16878: PPUSH
16879: CALL_OW 88
// if IsOK ( Petrosyan ) then
16883: LD_EXP 43
16887: PPUSH
16888: CALL_OW 302
16892: IFFALSE 16908
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16894: LD_EXP 43
16898: PPUSH
16899: LD_STRING DMatPrediction-Pty-2
16901: PPUSH
16902: CALL_OW 88
16906: GO 16931
// if IsOK ( Dolgov ) then
16908: LD_EXP 45
16912: PPUSH
16913: CALL_OW 302
16917: IFFALSE 16931
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16919: LD_EXP 45
16923: PPUSH
16924: LD_STRING DMatPrediction-Dol-2
16926: PPUSH
16927: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16931: LD_EXP 43
16935: PPUSH
16936: CALL_OW 302
16940: PUSH
16941: LD_EXP 45
16945: PPUSH
16946: CALL_OW 302
16950: OR
16951: IFFALSE 16965
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16953: LD_EXP 39
16957: PPUSH
16958: LD_STRING DMatPrediction-Bur-2
16960: PPUSH
16961: CALL_OW 88
// if IsOK ( Petrosyan ) then
16965: LD_EXP 43
16969: PPUSH
16970: CALL_OW 302
16974: IFFALSE 16990
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16976: LD_EXP 43
16980: PPUSH
16981: LD_STRING DMatPrediction-Pty-3
16983: PPUSH
16984: CALL_OW 88
16988: GO 17013
// if IsOK ( Dolgov ) then
16990: LD_EXP 45
16994: PPUSH
16995: CALL_OW 302
16999: IFFALSE 17013
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
17001: LD_EXP 45
17005: PPUSH
17006: LD_STRING DMatPrediction-Dol-3
17008: PPUSH
17009: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
17013: LD_STRING MPred
17015: PPUSH
17016: CALL_OW 337
// end ;
17020: LD_VAR 0 1
17024: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
17025: LD_EXP 59
17029: PPUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 72
17044: NOT
17045: IFFALSE 17267
17047: GO 17049
17049: DISABLE
// begin DialogueOn ;
17050: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
17054: LD_EXP 39
17058: PPUSH
17059: LD_STRING DOvsyenkoTaken-Bur-1
17061: PPUSH
17062: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
17066: LD_EXP 47
17070: PPUSH
17071: LD_STRING DOvsyenkoTaken-Pla-1
17073: PPUSH
17074: CALL_OW 94
// if IsOK ( Karamazov ) then
17078: LD_EXP 40
17082: PPUSH
17083: CALL_OW 302
17087: IFFALSE 17101
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
17089: LD_EXP 40
17093: PPUSH
17094: LD_STRING DOvsyenkoTaken-Kar-1
17096: PPUSH
17097: CALL_OW 88
// if IsOK ( Titov ) then
17101: LD_EXP 44
17105: PPUSH
17106: CALL_OW 302
17110: IFFALSE 17124
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
17112: LD_EXP 44
17116: PPUSH
17117: LD_STRING DOvsyenkoTaken-Tit-1
17119: PPUSH
17120: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
17124: LD_EXP 46
17128: PPUSH
17129: CALL_OW 302
17133: PUSH
17134: LD_EXP 40
17138: PPUSH
17139: CALL_OW 302
17143: PUSH
17144: LD_EXP 44
17148: PPUSH
17149: CALL_OW 302
17153: OR
17154: AND
17155: IFFALSE 17192
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
17157: LD_EXP 46
17161: PPUSH
17162: LD_STRING DOvsyenkoTaken-Lip-1
17164: PPUSH
17165: CALL_OW 88
// if IsOK ( Gleb ) then
17169: LD_EXP 42
17173: PPUSH
17174: CALL_OW 302
17178: IFFALSE 17192
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
17180: LD_EXP 42
17184: PPUSH
17185: LD_STRING DOvsyenkoTaken-Glb-1
17187: PPUSH
17188: CALL_OW 88
// end ; DialogueOff ;
17192: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
17196: LD_STRING MOutCapture
17198: PPUSH
17199: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
17203: LD_STRING MAddMine
17205: PPUSH
17206: CALL_OW 337
// claimOvsyenkoBase = true ;
17210: LD_ADDR_EXP 15
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// wait ( 1 1$10 ) ;
17218: LD_INT 2450
17220: PPUSH
17221: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
17225: LD_INT 1
17227: PPUSH
17228: LD_INT 1
17230: PPUSH
17231: LD_EXP 61
17235: PPUSH
17236: LD_INT 5
17238: PPUSH
17239: LD_INT 9
17241: PPUSH
17242: LD_INT 0
17244: PPUSH
17245: LD_INT 5
17247: PPUSH
17248: LD_INT 6
17250: PPUSH
17251: LD_INT 2
17253: PPUSH
17254: LD_INT 4
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL 5248 0 12
// end ;
17267: END
// export function Dial_SibTechs ; begin
17268: LD_INT 0
17270: PPUSH
// dial_SibTechsBlocker = true ;
17271: LD_ADDR_EXP 9
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// DialogueOn ;
17279: CALL_OW 6
// if IsOK ( Petrosyan ) then
17283: LD_EXP 43
17287: PPUSH
17288: CALL_OW 302
17292: IFFALSE 17308
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
17294: LD_EXP 43
17298: PPUSH
17299: LD_STRING DSibResearch-Pty-1
17301: PPUSH
17302: CALL_OW 88
17306: GO 17331
// if IsOK ( Dolgov ) then
17308: LD_EXP 45
17312: PPUSH
17313: CALL_OW 302
17317: IFFALSE 17331
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
17319: LD_EXP 45
17323: PPUSH
17324: LD_STRING DSibResearch-Dol-1
17326: PPUSH
17327: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
17331: LD_EXP 39
17335: PPUSH
17336: LD_STRING DSibResearch-Bur-1
17338: PPUSH
17339: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
17343: LD_EXP 47
17347: PPUSH
17348: LD_STRING DSibResearch-Pla-1
17350: PPUSH
17351: CALL_OW 94
// DialogueOff ;
17355: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
17359: LD_STRING MResearch
17361: PPUSH
17362: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
17366: LD_INT 21
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
17379: LD_INT 28
17381: PPUSH
17382: LD_INT 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
17392: LD_INT 11
17394: PPUSH
17395: LD_INT 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
17405: LD_INT 14
17407: PPUSH
17408: LD_INT 3
17410: PPUSH
17411: LD_INT 1
17413: PPUSH
17414: CALL_OW 324
// end ;
17418: LD_VAR 0 1
17422: RET
// export function Dial_ResearchMatPredictions ; begin
17423: LD_INT 0
17425: PPUSH
// techMatPredStatus = state_researched ;
17426: LD_ADDR_EXP 6
17430: PUSH
17431: LD_INT 2
17433: ST_TO_ADDR
// ChangeMissionObjectives ( MOutPred ) ;
17434: LD_STRING MOutPred
17436: PPUSH
17437: CALL_OW 337
// DialogueOn ;
17441: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
17445: LD_EXP 43
17449: PPUSH
17450: CALL_OW 302
17454: PUSH
17455: LD_EXP 45
17459: PPUSH
17460: CALL_OW 302
17464: OR
17465: IFFALSE 17587
// begin if IsOK ( Petrosyan ) then
17467: LD_EXP 43
17471: PPUSH
17472: CALL_OW 302
17476: IFFALSE 17492
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17478: LD_EXP 43
17482: PPUSH
17483: LD_STRING DNoMaterial-Pty-1
17485: PPUSH
17486: CALL_OW 88
17490: GO 17515
// if IsOK ( Dolgov ) then
17492: LD_EXP 45
17496: PPUSH
17497: CALL_OW 302
17501: IFFALSE 17515
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17503: LD_EXP 45
17507: PPUSH
17508: LD_STRING DNoMaterial-Dol-1
17510: PPUSH
17511: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17515: LD_EXP 39
17519: PPUSH
17520: LD_STRING DNoMaterial-Bur-1
17522: PPUSH
17523: CALL_OW 88
// if IsOK ( Petrosyan ) then
17527: LD_EXP 43
17531: PPUSH
17532: CALL_OW 302
17536: IFFALSE 17552
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17538: LD_EXP 43
17542: PPUSH
17543: LD_STRING DNoMaterial-Pty-2
17545: PPUSH
17546: CALL_OW 88
17550: GO 17575
// if IsOK ( Dolgov ) then
17552: LD_EXP 45
17556: PPUSH
17557: CALL_OW 302
17561: IFFALSE 17575
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17563: LD_EXP 45
17567: PPUSH
17568: LD_STRING DNoMaterial-Dol-2
17570: PPUSH
17571: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17575: LD_EXP 39
17579: PPUSH
17580: LD_STRING DNoMaterial-Bur-2
17582: PPUSH
17583: CALL_OW 88
// end ; DialogueOff ;
17587: CALL_OW 7
// end ;
17591: LD_VAR 0 1
17595: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17596: LD_EXP 9
17600: NOT
17601: PUSH
17602: LD_INT 116
17604: PPUSH
17605: LD_INT 123
17607: PPUSH
17608: LD_INT 3
17610: PPUSH
17611: CALL_OW 440
17615: PUSH
17616: LD_INT 72
17618: PPUSH
17619: LD_INT 86
17621: PPUSH
17622: LD_INT 3
17624: PPUSH
17625: CALL_OW 440
17629: OR
17630: AND
17631: IFFALSE 17640
17633: GO 17635
17635: DISABLE
// Dial_SibTechs ;
17636: CALL 17268 0 0
17640: END
// every 5 5$0 trigger claimOvsyenkoBase do
17641: LD_EXP 15
17645: IFFALSE 17669
17647: GO 17649
17649: DISABLE
// begin PrepareVsevolod ;
17650: CALL 2664 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17654: LD_EXP 52
17658: PPUSH
17659: LD_INT 61
17661: PPUSH
17662: LD_INT 45
17664: PPUSH
17665: CALL_OW 114
// end ;
17669: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17670: LD_EXP 18
17674: IFFALSE 17712
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
// begin enable ;
17682: ENABLE
// for unit in vsevolodTeam do
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_EXP 52
17692: PUSH
17693: FOR_IN
17694: IFFALSE 17710
// SetLives ( unit , 1000 ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 1000
17703: PPUSH
17704: CALL_OW 234
17708: GO 17693
17710: POP
17711: POP
// end ;
17712: PPOPN 1
17714: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17715: LD_INT 170
17717: PPUSH
17718: CALL_OW 256
17722: PUSH
17723: LD_INT 650
17725: LESSEQUAL
17726: PUSH
17727: LD_INT 174
17729: PPUSH
17730: CALL_OW 256
17734: PUSH
17735: LD_INT 650
17737: LESSEQUAL
17738: OR
17739: IFFALSE 18900
17741: GO 17743
17743: DISABLE
17744: LD_INT 0
17746: PPUSH
17747: PPUSH
17748: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17749: LD_EXP 60
17753: PPUSH
17754: LD_INT 21
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 72
17768: PPUSH
17769: LD_INT 35
17771: PPUSH
17772: LD_INT 58
17774: PPUSH
17775: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17779: LD_EXP 60
17783: PPUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 72
17798: PPUSH
17799: LD_INT 6
17801: PPUSH
17802: CALL_OW 235
// immortalVsevolodTeam = false ;
17806: LD_ADDR_EXP 18
17810: PUSH
17811: LD_INT 0
17813: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 3 ] ] , ter_arm1 ) ;
17814: LD_EXP 51
17818: PUSH
17819: LD_EXP 52
17823: PUSH
17824: LD_INT 3
17826: ARRAY
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: LD_INT 174
17834: PPUSH
17835: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 4 ] , ter_bun1 ) ;
17839: LD_EXP 52
17843: PUSH
17844: LD_INT 4
17846: ARRAY
17847: PPUSH
17848: LD_INT 170
17850: PPUSH
17851: CALL_OW 120
// SetLives ( Petr , 500 ) ;
17855: LD_EXP 53
17859: PPUSH
17860: LD_INT 500
17862: PPUSH
17863: CALL_OW 234
// ComEnterUnit ( vsevolodTeam [ 2 ] , terminal ) ;
17867: LD_EXP 52
17871: PUSH
17872: LD_INT 2
17874: ARRAY
17875: PPUSH
17876: LD_INT 168
17878: PPUSH
17879: CALL_OW 120
// wait ( 0 0$5 ) ;
17883: LD_INT 175
17885: PPUSH
17886: CALL_OW 67
// DialogueOn ;
17890: CALL_OW 6
// if IsOK ( Dolgov ) then
17894: LD_EXP 45
17898: PPUSH
17899: CALL_OW 302
17903: IFFALSE 17917
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17905: LD_EXP 45
17909: PPUSH
17910: LD_STRING DVsevolod-Dol-1
17912: PPUSH
17913: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17917: LD_EXP 51
17921: PPUSH
17922: LD_STRING DVsevolod-Vse-1
17924: PPUSH
17925: CALL_OW 94
// if IsOK ( Gleb ) then
17929: LD_EXP 42
17933: PPUSH
17934: CALL_OW 302
17938: IFFALSE 17976
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17940: LD_EXP 39
17944: PPUSH
17945: LD_STRING DVsevolod-Bur-1
17947: PPUSH
17948: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17952: LD_EXP 42
17956: PPUSH
17957: LD_STRING DVsevolod-Glb-1
17959: PPUSH
17960: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17964: LD_EXP 51
17968: PPUSH
17969: LD_STRING DVsevolod-Vse-2
17971: PPUSH
17972: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17976: LD_EXP 39
17980: PPUSH
17981: LD_STRING DVsevolod-Bur-2
17983: PPUSH
17984: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17988: LD_EXP 51
17992: PPUSH
17993: LD_STRING DVsevolod-Vse-3
17995: PPUSH
17996: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
18000: LD_EXP 39
18004: PPUSH
18005: LD_STRING DVsevolod-Bur-3
18007: PPUSH
18008: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
18012: LD_EXP 51
18016: PPUSH
18017: LD_STRING DVsevolod-Vse-4
18019: PPUSH
18020: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
18024: LD_EXP 39
18028: PPUSH
18029: LD_STRING DVsevolod-Bur-4
18031: PPUSH
18032: CALL_OW 88
// if IsOK ( Gleb ) then
18036: LD_EXP 42
18040: PPUSH
18041: CALL_OW 302
18045: IFFALSE 18073
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
18047: LD_EXP 42
18051: PPUSH
18052: LD_STRING DVsevolod-Glb-4
18054: PPUSH
18055: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
18059: LD_EXP 39
18063: PPUSH
18064: LD_STRING DVsevolod-Bur-5
18066: PPUSH
18067: CALL_OW 88
// end else
18071: GO 18147
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
18073: LD_INT 22
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 50
18095: PUSH
18096: EMPTY
18097: LIST
18098: PUSH
18099: LD_INT 26
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: PPUSH
18131: LD_STRING DVsevolod-RSol1-5
18133: PPUSH
18134: LD_STRING 
18136: PPUSH
18137: LD_INT 0
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
18147: LD_EXP 39
18151: PPUSH
18152: LD_STRING DVsevolod-Bur-6
18154: PPUSH
18155: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
18159: LD_INT 59
18161: PPUSH
18162: LD_INT 40
18164: PPUSH
18165: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
18169: LD_INT 3
18171: PPUSH
18172: LD_INT 4
18174: PPUSH
18175: CALL_OW 332
// if IsOK ( Dolgov ) then
18179: LD_EXP 45
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// Say ( Dolgov , DVsevolod-Dol-6 ) else
18190: LD_EXP 45
18194: PPUSH
18195: LD_STRING DVsevolod-Dol-6
18197: PPUSH
18198: CALL_OW 88
18202: GO 18278
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18204: LD_INT 22
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 50
18226: PUSH
18227: EMPTY
18228: LIST
18229: PUSH
18230: LD_INT 26
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 23
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PPUSH
18257: CALL_OW 69
18261: PPUSH
18262: LD_STRING DVsevolod-Dol-6
18264: PPUSH
18265: LD_STRING 
18267: PPUSH
18268: LD_INT 0
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL 12102 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
18278: LD_EXP 39
18282: PPUSH
18283: LD_STRING DVsevolod-Bur-7
18285: PPUSH
18286: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
18290: LD_EXP 51
18294: PPUSH
18295: LD_STRING DVsevolod-Vse-7
18297: PPUSH
18298: CALL_OW 94
// DialogueOff ;
18302: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
18306: LD_STRING MVsevolod
18308: PPUSH
18309: CALL_OW 337
// enableVsevolodCounter = true ;
18313: LD_ADDR_EXP 22
18317: PUSH
18318: LD_INT 1
18320: ST_TO_ADDR
// canGoNorth = true ;
18321: LD_ADDR_EXP 21
18325: PUSH
18326: LD_INT 1
18328: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
18329: CALL 3979 0 0
// wait ( 0 0$7 ) ;
18333: LD_INT 245
18335: PPUSH
18336: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
18340: LD_ADDR_VAR 0 1
18344: PUSH
18345: LD_STRING 02_Belkov
18347: PPUSH
18348: CALL_OW 28
18352: ST_TO_ADDR
// DialogueOn ;
18353: CALL_OW 6
// if belkovSavedIn02 then
18357: LD_VAR 0 1
18361: IFFALSE 18562
// begin if IsOK ( Gleb ) then
18363: LD_EXP 42
18367: PPUSH
18368: CALL_OW 302
18372: IFFALSE 18386
// Say ( Gleb , DHelp1-Glb-1 ) ;
18374: LD_EXP 42
18378: PPUSH
18379: LD_STRING DHelp1-Glb-1
18381: PPUSH
18382: CALL_OW 88
// if IsOK ( Dolgov ) then
18386: LD_EXP 45
18390: PPUSH
18391: CALL_OW 302
18395: IFFALSE 18409
// Say ( Dolgov , DHelp1-Dol-1 ) ;
18397: LD_EXP 45
18401: PPUSH
18402: LD_STRING DHelp1-Dol-1
18404: PPUSH
18405: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 50
18436: PUSH
18437: EMPTY
18438: LIST
18439: PUSH
18440: LD_INT 26
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 23
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PUSH
18472: LD_EXP 42
18476: PUSH
18477: LD_EXP 45
18481: PUSH
18482: LD_EXP 44
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: DIFF
18492: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18493: LD_VAR 0 2
18497: PPUSH
18498: LD_STRING DHelp1-RSol1-1
18500: PPUSH
18501: LD_STRING 
18503: PPUSH
18504: LD_INT 0
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL 12102 0 5
// if IsOK ( Titov ) then
18514: LD_EXP 44
18518: PPUSH
18519: CALL_OW 302
18523: IFFALSE 18537
// Say ( Titov , DHelp1-Tit-1 ) ;
18525: LD_EXP 44
18529: PPUSH
18530: LD_STRING DHelp1-Tit-1
18532: PPUSH
18533: CALL_OW 88
// if IsOK ( Gleb ) then
18537: LD_EXP 42
18541: PPUSH
18542: CALL_OW 302
18546: IFFALSE 18560
// Say ( Gleb , DHelp1-Glb-2 ) ;
18548: LD_EXP 42
18552: PPUSH
18553: LD_STRING DHelp1-Glb-2
18555: PPUSH
18556: CALL_OW 88
// end else
18560: GO 18773
// begin if IsOK ( Titov ) then
18562: LD_EXP 44
18566: PPUSH
18567: CALL_OW 302
18571: IFFALSE 18585
// Say ( Titov , DHelp2-Tit-1 ) ;
18573: LD_EXP 44
18577: PPUSH
18578: LD_STRING DHelp2-Tit-1
18580: PPUSH
18581: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18585: LD_ADDR_VAR 0 2
18589: PUSH
18590: LD_INT 22
18592: PUSH
18593: LD_INT 3
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 21
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 50
18612: PUSH
18613: EMPTY
18614: LIST
18615: PUSH
18616: LD_INT 26
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 23
18628: PUSH
18629: LD_INT 3
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: LD_EXP 42
18652: PUSH
18653: LD_EXP 44
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: DIFF
18662: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18663: LD_ADDR_VAR 0 3
18667: PUSH
18668: LD_VAR 0 2
18672: PPUSH
18673: LD_STRING DHelp2-RSol1-1
18675: PPUSH
18676: LD_STRING 
18678: PPUSH
18679: LD_INT 0
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL 12102 0 5
18689: ST_TO_ADDR
// if IsOK ( Gleb ) then
18690: LD_EXP 42
18694: PPUSH
18695: CALL_OW 302
18699: IFFALSE 18713
// Say ( Gleb , DHelp2-Glb-1 ) ;
18701: LD_EXP 42
18705: PPUSH
18706: LD_STRING DHelp2-Glb-1
18708: PPUSH
18709: CALL_OW 88
// tmp = tmp diff speaker ;
18713: LD_ADDR_VAR 0 2
18717: PUSH
18718: LD_VAR 0 2
18722: PUSH
18723: LD_VAR 0 3
18727: DIFF
18728: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_STRING DHelp2-RSol2-1
18736: PPUSH
18737: LD_STRING 
18739: PPUSH
18740: LD_INT 0
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL 12102 0 5
// if IsOK ( Titov ) then
18750: LD_EXP 44
18754: PPUSH
18755: CALL_OW 302
18759: IFFALSE 18773
// Say ( Titov , DHelp2-Tit-2 ) ;
18761: LD_EXP 44
18765: PPUSH
18766: LD_STRING DHelp2-Tit-2
18768: PPUSH
18769: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18773: LD_EXP 39
18777: PPUSH
18778: LD_STRING DHelp3-Bur-1
18780: PPUSH
18781: CALL_OW 88
// if IsOK ( Lipshchin ) then
18785: LD_EXP 46
18789: PPUSH
18790: CALL_OW 302
18794: IFFALSE 18810
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18796: LD_EXP 46
18800: PPUSH
18801: LD_STRING DHelp3-Lip-1
18803: PPUSH
18804: CALL_OW 88
18808: GO 18884
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18810: LD_INT 22
18812: PUSH
18813: LD_INT 3
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 50
18832: PUSH
18833: EMPTY
18834: LIST
18835: PUSH
18836: LD_INT 26
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 23
18848: PUSH
18849: LD_INT 3
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: PPUSH
18868: LD_STRING DVsevolod-Dol-6
18870: PPUSH
18871: LD_STRING 
18873: PPUSH
18874: LD_INT 0
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL 12102 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18884: LD_EXP 39
18888: PPUSH
18889: LD_STRING DHelp3-Bur-2
18891: PPUSH
18892: CALL_OW 88
// DialogueOff ;
18896: CALL_OW 7
// end ;
18900: PPOPN 3
18902: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18903: LD_EXP 15
18907: PUSH
18908: LD_INT 3
18910: PPUSH
18911: LD_INT 22
18913: PUSH
18914: LD_INT 3
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 59
18936: PUSH
18937: EMPTY
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 70
18964: NOT
18965: AND
18966: PUSH
18967: LD_INT 3
18969: PPUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: LD_INT 21
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 70
19016: AND
19017: IFFALSE 19184
19019: GO 19021
19021: DISABLE
// begin lostAgainBase = true ;
19022: LD_ADDR_EXP 17
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
19030: LD_INT 3
19032: PPUSH
19033: LD_INT 22
19035: PUSH
19036: LD_INT 3
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 21
19045: PUSH
19046: LD_INT 3
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 70
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 235
// if IsOK ( Gleb ) then
19069: LD_EXP 42
19073: PPUSH
19074: CALL_OW 302
19078: IFFALSE 19104
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
19080: LD_EXP 42
19084: PPUSH
19085: LD_STRING DOvsyenkoCaptured-Glb-1
19087: PPUSH
19088: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
19092: LD_EXP 39
19096: PPUSH
19097: LD_STRING DOvsyenkoCaptured-Bur-1
19099: PPUSH
19100: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
19104: LD_INT 22
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 21
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 50
19126: PUSH
19127: EMPTY
19128: LIST
19129: PUSH
19130: LD_INT 26
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 23
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: PUSH
19162: LD_EXP 42
19166: DIFF
19167: PPUSH
19168: LD_STRING DOvsyenkoCaptured-RSol1-1
19170: PPUSH
19171: LD_STRING 
19173: PPUSH
19174: LD_INT 0
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL 12102 0 5
// end ;
19184: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
19185: LD_INT 12
19187: PPUSH
19188: LD_INT 22
19190: PUSH
19191: LD_INT 3
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 50
19200: PUSH
19201: EMPTY
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 70
19212: IFFALSE 19221
19214: GO 19216
19216: DISABLE
// PrepareTrap ;
19217: CALL 3800 0 0
19221: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
19222: LD_EXP 11
19226: NOT
19227: IFFALSE 19445
19229: GO 19231
19231: DISABLE
19232: LD_INT 0
19234: PPUSH
19235: PPUSH
19236: PPUSH
// begin enable ;
19237: ENABLE
// for unit in trapTeam do
19238: LD_ADDR_VAR 0 3
19242: PUSH
19243: LD_EXP 62
19247: PUSH
19248: FOR_IN
19249: IFFALSE 19443
// if See ( 3 , unit ) then
19251: LD_INT 3
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: CALL_OW 292
19263: IFFALSE 19441
// begin dial_TrapDialogBlocker = true ;
19265: LD_ADDR_EXP 11
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// DialogueOn ;
19273: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
19277: LD_ADDR_VAR 0 1
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 50
19304: PUSH
19305: EMPTY
19306: LIST
19307: PUSH
19308: LD_INT 26
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 23
19320: PUSH
19321: LD_INT 3
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: PPUSH
19335: CALL_OW 69
19339: PUSH
19340: LD_EXP 42
19344: DIFF
19345: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
19346: LD_ADDR_VAR 0 2
19350: PUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: LD_STRING DPartyAttacked-RSol1-1
19358: PPUSH
19359: LD_STRING 
19361: PPUSH
19362: LD_INT 0
19364: PPUSH
19365: LD_INT 1
19367: PPUSH
19368: CALL 12102 0 5
19372: ST_TO_ADDR
// tmp = tmp diff speaker ;
19373: LD_ADDR_VAR 0 1
19377: PUSH
19378: LD_VAR 0 1
19382: PUSH
19383: LD_VAR 0 2
19387: DIFF
19388: ST_TO_ADDR
// if IsOK ( Gleb ) then
19389: LD_EXP 42
19393: PPUSH
19394: CALL_OW 302
19398: IFFALSE 19412
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
19400: LD_EXP 42
19404: PPUSH
19405: LD_STRING DPartyAttacked-Glb-1
19407: PPUSH
19408: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
19412: LD_VAR 0 1
19416: PPUSH
19417: LD_STRING DPartyAttacked-RSol1-2
19419: PPUSH
19420: LD_STRING 
19422: PPUSH
19423: LD_INT 0
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL 12102 0 5
// DialogueOff ;
19433: CALL_OW 7
// exit ;
19437: POP
19438: POP
19439: GO 19445
// end ;
19441: GO 19248
19443: POP
19444: POP
// end ;
19445: PPOPN 3
19447: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
19448: LD_EXP 19
19452: NOT
19453: PUSH
19454: LD_EXP 51
19458: PPUSH
19459: CALL_OW 302
19463: AND
19464: PUSH
19465: LD_INT 4
19467: PPUSH
19468: LD_INT 22
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 50
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 23
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 70
19535: AND
19536: IFFALSE 20178
19538: GO 19540
19540: DISABLE
19541: LD_INT 0
19543: PPUSH
19544: PPUSH
19545: PPUSH
// begin savedVsevolod = true ;
19546: LD_ADDR_EXP 19
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19554: LD_STRING MVsevolodOut
19556: PPUSH
19557: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19561: LD_ADDR_VAR 0 2
19565: PUSH
19566: LD_INT 4
19568: PPUSH
19569: LD_INT 22
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 50
19581: PUSH
19582: EMPTY
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 23
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: PPUSH
19632: CALL_OW 70
19636: ST_TO_ADDR
// unit = unit [ 1 ] ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 1
19649: ARRAY
19650: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19651: LD_VAR 0 2
19655: PPUSH
19656: CALL_OW 247
19660: PUSH
19661: LD_INT 2
19663: EQUAL
19664: IFFALSE 19685
// unit = UnitsInside ( unit ) [ 1 ] ;
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: LD_VAR 0 2
19675: PPUSH
19676: CALL_OW 313
19680: PUSH
19681: LD_INT 1
19683: ARRAY
19684: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19685: LD_INT 22
19687: PUSH
19688: LD_INT 6
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: PPUSH
19700: LD_INT 3
19702: PPUSH
19703: CALL_OW 235
// if not unit = Burlak then
19707: LD_VAR 0 2
19711: PUSH
19712: LD_EXP 39
19716: EQUAL
19717: NOT
19718: IFFALSE 19895
// begin vsevolodWaitGorky = true ;
19720: LD_ADDR_EXP 20
19724: PUSH
19725: LD_INT 1
19727: ST_TO_ADDR
// DialogueOn ;
19728: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19732: LD_EXP 51
19736: PPUSH
19737: LD_STRING DOtherMeetVsev-Vse-1
19739: PPUSH
19740: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19744: LD_VAR 0 2
19748: PPUSH
19749: CALL_OW 258
19753: PUSH
19754: LD_INT 2
19756: EQUAL
19757: IFFALSE 19877
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: LD_INT 22
19766: PUSH
19767: LD_INT 3
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 21
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 50
19786: PUSH
19787: EMPTY
19788: LIST
19789: PUSH
19790: LD_INT 26
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 3
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: PUSH
19822: LD_EXP 52
19826: DIFF
19827: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_VAR 0 3
19837: PUSH
19838: LD_EXP 42
19842: DIFF
19843: ST_TO_ADDR
// if maleRandomUnits then
19844: LD_VAR 0 3
19848: IFFALSE 19875
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 1
19857: ARRAY
19858: PPUSH
19859: LD_STRING DOtherMeetVsev-RSol1-1
19861: PPUSH
19862: LD_STRING 
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL 12102 0 5
// end else
19875: GO 19889
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_STRING DOtherMeetVsev-RSol1-1
19884: PPUSH
19885: CALL_OW 88
// DialogueOff ;
19889: CALL_OW 7
// end else
19893: GO 20178
// begin DialogueOn ;
19895: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19899: LD_EXP 51
19903: PPUSH
19904: LD_STRING DMeetVsev-Vse-1
19906: PPUSH
19907: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19911: LD_EXP 39
19915: PPUSH
19916: LD_STRING DMeetVsev-Bur-1
19918: PPUSH
19919: CALL_OW 88
// if lostAgainBase then
19923: LD_EXP 17
19927: IFFALSE 19967
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19929: LD_EXP 51
19933: PPUSH
19934: LD_STRING DMeetVsev2-Vse-1
19936: PPUSH
19937: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19941: LD_EXP 39
19945: PPUSH
19946: LD_STRING DMeetVsev2-Bur-1
19948: PPUSH
19949: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19953: LD_EXP 51
19957: PPUSH
19958: LD_STRING DMeetVsev2-Vse-2
19960: PPUSH
19961: CALL_OW 88
// end else
19965: GO 20003
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19967: LD_EXP 51
19971: PPUSH
19972: LD_STRING DMeetVsev2-Vse-2a
19974: PPUSH
19975: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19979: LD_EXP 39
19983: PPUSH
19984: LD_STRING DMeetVsev2-Bur-2
19986: PPUSH
19987: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19991: LD_EXP 51
19995: PPUSH
19996: LD_STRING DMeetVsev2-Vse-3
19998: PPUSH
19999: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20003: LD_EXP 39
20007: PPUSH
20008: LD_STRING DMeetVsev3-Bur-1
20010: PPUSH
20011: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20015: LD_EXP 51
20019: PPUSH
20020: LD_STRING DMeetVsev3-Vse-1
20022: PPUSH
20023: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20027: LD_EXP 39
20031: PPUSH
20032: LD_STRING DMeetVsev3-Bur-2
20034: PPUSH
20035: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20039: LD_EXP 51
20043: PPUSH
20044: LD_STRING DMeetVsev3-Vse-2
20046: PPUSH
20047: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20051: LD_EXP 39
20055: PPUSH
20056: LD_STRING DMeetVsev3-Bur-3
20058: PPUSH
20059: CALL_OW 88
// if stevensStatus = 0 then
20063: LD_EXP 4
20067: PUSH
20068: LD_INT 0
20070: EQUAL
20071: IFFALSE 20085
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20073: LD_EXP 39
20077: PPUSH
20078: LD_STRING DMeetVsev4-Bur-1
20080: PPUSH
20081: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20085: LD_EXP 39
20089: PPUSH
20090: LD_STRING DMeetVsev5-Bur-1
20092: PPUSH
20093: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20097: LD_EXP 51
20101: PPUSH
20102: LD_STRING DMeetVsev5-Vse-1
20104: PPUSH
20105: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20109: LD_EXP 39
20113: PPUSH
20114: LD_STRING DMeetVsev6-Bur-1
20116: PPUSH
20117: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20121: LD_EXP 51
20125: PPUSH
20126: LD_STRING DMeetVsev6-Vse-1
20128: PPUSH
20129: CALL_OW 88
// DialogueOff ;
20133: CALL_OW 7
// wait ( 0 0$20 ) ;
20137: LD_INT 700
20139: PPUSH
20140: CALL_OW 67
// PrepareConvoy ;
20144: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20148: LD_EXP 63
20152: PPUSH
20153: LD_INT 57
20155: PPUSH
20156: LD_INT 40
20158: PPUSH
20159: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20163: LD_EXP 63
20167: PPUSH
20168: LD_INT 37
20170: PPUSH
20171: LD_INT 59
20173: PPUSH
20174: CALL_OW 171
// end ; end ;
20178: PPOPN 3
20180: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
20181: LD_EXP 20
20185: PUSH
20186: LD_EXP 51
20190: PPUSH
20191: LD_EXP 39
20195: PPUSH
20196: CALL_OW 296
20200: PUSH
20201: LD_INT 7
20203: LESSEQUAL
20204: AND
20205: IFFALSE 20501
20207: GO 20209
20209: DISABLE
// begin vsevolodWaitGorky = false ;
20210: LD_ADDR_EXP 20
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// DialogueOn ;
20218: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
20222: LD_EXP 51
20226: PPUSH
20227: LD_STRING DMeetVsev-Vse-1
20229: PPUSH
20230: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
20234: LD_EXP 39
20238: PPUSH
20239: LD_STRING DMeetVsev-Bur-1
20241: PPUSH
20242: CALL_OW 88
// if lostAgainBase then
20246: LD_EXP 17
20250: IFFALSE 20290
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
20252: LD_EXP 51
20256: PPUSH
20257: LD_STRING DMeetVsev2-Vse-1
20259: PPUSH
20260: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
20264: LD_EXP 39
20268: PPUSH
20269: LD_STRING DMeetVsev2-Bur-1
20271: PPUSH
20272: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
20276: LD_EXP 51
20280: PPUSH
20281: LD_STRING DMeetVsev2-Vse-2
20283: PPUSH
20284: CALL_OW 88
// end else
20288: GO 20326
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
20290: LD_EXP 51
20294: PPUSH
20295: LD_STRING DMeetVsev2-Vse-2a
20297: PPUSH
20298: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
20302: LD_EXP 39
20306: PPUSH
20307: LD_STRING DMeetVsev2-Bur-2
20309: PPUSH
20310: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
20314: LD_EXP 51
20318: PPUSH
20319: LD_STRING DMeetVsev2-Vse-3
20321: PPUSH
20322: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
20326: LD_EXP 39
20330: PPUSH
20331: LD_STRING DMeetVsev3-Bur-1
20333: PPUSH
20334: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
20338: LD_EXP 51
20342: PPUSH
20343: LD_STRING DMeetVsev3-Vse-1
20345: PPUSH
20346: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
20350: LD_EXP 39
20354: PPUSH
20355: LD_STRING DMeetVsev3-Bur-2
20357: PPUSH
20358: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
20362: LD_EXP 51
20366: PPUSH
20367: LD_STRING DMeetVsev3-Vse-2
20369: PPUSH
20370: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
20374: LD_EXP 39
20378: PPUSH
20379: LD_STRING DMeetVsev3-Bur-3
20381: PPUSH
20382: CALL_OW 88
// if stevensStatus = 0 then
20386: LD_EXP 4
20390: PUSH
20391: LD_INT 0
20393: EQUAL
20394: IFFALSE 20408
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
20396: LD_EXP 39
20400: PPUSH
20401: LD_STRING DMeetVsev4-Bur-1
20403: PPUSH
20404: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
20408: LD_EXP 39
20412: PPUSH
20413: LD_STRING DMeetVsev5-Bur-1
20415: PPUSH
20416: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
20420: LD_EXP 51
20424: PPUSH
20425: LD_STRING DMeetVsev5-Vse-1
20427: PPUSH
20428: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
20432: LD_EXP 51
20436: PPUSH
20437: LD_STRING DMeetVsev6-Vse-1
20439: PPUSH
20440: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
20444: LD_EXP 39
20448: PPUSH
20449: LD_STRING DMeetVsev6-Bur-1
20451: PPUSH
20452: CALL_OW 88
// DialogueOff ;
20456: CALL_OW 7
// wait ( 0 0$20 ) ;
20460: LD_INT 700
20462: PPUSH
20463: CALL_OW 67
// PrepareConvoy ;
20467: CALL 4023 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
20471: LD_EXP 63
20475: PPUSH
20476: LD_INT 57
20478: PPUSH
20479: LD_INT 40
20481: PPUSH
20482: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20486: LD_EXP 63
20490: PPUSH
20491: LD_INT 37
20493: PPUSH
20494: LD_INT 59
20496: PPUSH
20497: CALL_OW 171
// end ;
20501: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20502: LD_EXP 12
20506: NOT
20507: IFFALSE 20637
20509: GO 20511
20511: DISABLE
20512: LD_INT 0
20514: PPUSH
20515: PPUSH
20516: PPUSH
// begin enable ;
20517: ENABLE
// for unit in convoyTeam do
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_EXP 63
20527: PUSH
20528: FOR_IN
20529: IFFALSE 20635
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20531: LD_INT 3
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 292
20543: PUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_INT 19
20551: PPUSH
20552: CALL_OW 308
20556: NOT
20557: AND
20558: IFFALSE 20633
// begin dial_ConvoyDialogBlocker = true ;
20560: LD_ADDR_EXP 12
20564: PUSH
20565: LD_INT 1
20567: ST_TO_ADDR
// DialogueOn ;
20568: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20572: LD_ADDR_VAR 0 2
20576: PUSH
20577: LD_EXP 63
20581: PPUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PPUSH
20592: CALL_OW 72
20596: PUSH
20597: LD_INT 1
20599: ARRAY
20600: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_STRING DTruck-Sol1-1
20608: PPUSH
20609: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
20613: LD_EXP 39
20617: PPUSH
20618: LD_STRING DTruck-Bur-1
20620: PPUSH
20621: CALL_OW 88
// DialogueOff ;
20625: CALL_OW 7
// exit ;
20629: POP
20630: POP
20631: GO 20637
// end ;
20633: GO 20528
20635: POP
20636: POP
// end ;
20637: PPOPN 3
20639: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20640: LD_EXP 26
20644: PUSH
20645: LD_EXP 38
20649: GREATEREQUAL
20650: IFFALSE 20689
20652: GO 20654
20654: DISABLE
// begin PrepareAttack ;
20655: CALL 4204 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20659: LD_EXP 64
20663: PPUSH
20664: LD_INT 60
20666: PPUSH
20667: LD_INT 41
20669: PPUSH
20670: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20674: LD_EXP 64
20678: PPUSH
20679: LD_INT 107
20681: PPUSH
20682: LD_INT 125
20684: PPUSH
20685: CALL_OW 174
// end ;
20689: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20690: LD_EXP 19
20694: NOT
20695: PUSH
20696: LD_EXP 51
20700: PPUSH
20701: CALL_OW 256
20705: PUSH
20706: LD_INT 500
20708: LESSEQUAL
20709: AND
20710: IFFALSE 20735
20712: GO 20714
20714: DISABLE
// begin DialogueOn ;
20715: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20719: LD_EXP 51
20723: PPUSH
20724: LD_STRING DDieVsev2-Vse-1
20726: PPUSH
20727: CALL_OW 94
// DialogueOff ;
20731: CALL_OW 7
// end ;
20735: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20736: LD_INT 0
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
// DialogueOn ;
20742: CALL_OW 6
// if IsOK ( Petrosyan ) then
20746: LD_EXP 43
20750: PPUSH
20751: CALL_OW 302
20755: IFFALSE 20771
// Say ( Petrosyan , DStasis-Pty-1 ) else
20757: LD_EXP 43
20761: PPUSH
20762: LD_STRING DStasis-Pty-1
20764: PPUSH
20765: CALL_OW 88
20769: GO 20993
// if IsOK ( Dolgov ) then
20771: LD_EXP 45
20775: PPUSH
20776: CALL_OW 302
20780: IFFALSE 20796
// Say ( Dolgov , DStasis-Dol-1 ) else
20782: LD_EXP 45
20786: PPUSH
20787: LD_STRING DStasis-Dol-1
20789: PPUSH
20790: CALL_OW 88
20794: GO 20993
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20796: LD_ADDR_VAR 0 3
20800: PUSH
20801: LD_INT 22
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 50
20823: PUSH
20824: EMPTY
20825: LIST
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 4
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 23
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: PUSH
20870: LD_EXP 39
20874: DIFF
20875: ST_TO_ADDR
// if not sci then
20876: LD_VAR 0 3
20880: NOT
20881: IFFALSE 20952
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 3
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 50
20910: PUSH
20911: EMPTY
20912: LIST
20913: PUSH
20914: LD_INT 26
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 23
20926: PUSH
20927: LD_INT 3
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 69
20945: PUSH
20946: LD_EXP 39
20950: DIFF
20951: ST_TO_ADDR
// if sci then
20952: LD_VAR 0 3
20956: IFFALSE 20993
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_VAR 0 3
20967: PPUSH
20968: LD_STRING DStasis-RSol1-1
20970: PPUSH
20971: LD_STRING 
20973: PPUSH
20974: LD_INT 0
20976: PPUSH
20977: LD_INT 1
20979: PPUSH
20980: CALL 12102 0 5
20984: ST_TO_ADDR
// randomTalkDialog = true ;
20985: LD_ADDR_VAR 0 4
20989: PUSH
20990: LD_INT 1
20992: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20993: LD_EXP 43
20997: PPUSH
20998: CALL_OW 302
21002: PUSH
21003: LD_EXP 45
21007: PPUSH
21008: CALL_OW 302
21012: OR
21013: PUSH
21014: LD_VAR 0 4
21018: OR
21019: IFFALSE 21116
// begin Say ( Burlak , DStasis-Bur-1 ) ;
21021: LD_EXP 39
21025: PPUSH
21026: LD_STRING DStasis-Bur-1
21028: PPUSH
21029: CALL_OW 88
// if IsOK ( Petrosyan ) then
21033: LD_EXP 43
21037: PPUSH
21038: CALL_OW 302
21042: IFFALSE 21058
// Say ( Petrosyan , DStasis-Pty-2 ) else
21044: LD_EXP 43
21048: PPUSH
21049: LD_STRING DStasis-Pty-2
21051: PPUSH
21052: CALL_OW 88
21056: GO 21104
// if IsOK ( Dolgov ) then
21058: LD_EXP 45
21062: PPUSH
21063: CALL_OW 302
21067: IFFALSE 21083
// Say ( Dolgov , DStasis-Dol-2 ) else
21069: LD_EXP 45
21073: PPUSH
21074: LD_STRING DStasis-Dol-2
21076: PPUSH
21077: CALL_OW 88
21081: GO 21104
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
21083: LD_VAR 0 2
21087: PPUSH
21088: LD_STRING DStasis-RSol1-2
21090: PPUSH
21091: LD_STRING 
21093: PPUSH
21094: LD_INT 0
21096: PPUSH
21097: LD_INT 1
21099: PPUSH
21100: CALL 12102 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
21104: LD_EXP 39
21108: PPUSH
21109: LD_STRING DStasis-Bur-2
21111: PPUSH
21112: CALL_OW 88
// end ; DialogueOff ;
21116: CALL_OW 7
// if GetTech ( tech_SibEng , 3 ) = state_researched then
21120: LD_INT 22
21122: PPUSH
21123: LD_INT 3
21125: PPUSH
21126: CALL_OW 321
21130: PUSH
21131: LD_INT 2
21133: EQUAL
21134: IFFALSE 21143
// ChangeMissionObjectives ( MOutResearch ) ;
21136: LD_STRING MOutResearch
21138: PPUSH
21139: CALL_OW 337
// end ;
21143: LD_VAR 0 1
21147: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
21148: LD_INT 22
21150: PPUSH
21151: LD_INT 3
21153: PPUSH
21154: CALL_OW 321
21158: PUSH
21159: LD_INT 2
21161: EQUAL
21162: PUSH
21163: LD_INT 30
21165: PPUSH
21166: LD_INT 3
21168: PPUSH
21169: CALL_OW 321
21173: PUSH
21174: LD_INT 2
21176: EQUAL
21177: AND
21178: PUSH
21179: LD_EXP 14
21183: NOT
21184: AND
21185: IFFALSE 21528
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
// begin wait ( 0 0$15 ) ;
21195: LD_INT 525
21197: PPUSH
21198: CALL_OW 67
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21202: LD_ADDR_VAR 0 1
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_INT 3
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 50
21219: PUSH
21220: EMPTY
21221: LIST
21222: PUSH
21223: LD_INT 21
21225: PUSH
21226: LD_INT 3
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 30
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 30
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: ST_TO_ADDR
// sibCounter = 0 ;
21272: LD_ADDR_VAR 0 3
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// for depot in depots do
21280: LD_ADDR_VAR 0 2
21284: PUSH
21285: LD_VAR 0 1
21289: PUSH
21290: FOR_IN
21291: IFFALSE 21324
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
21293: LD_ADDR_VAR 0 3
21297: PUSH
21298: LD_VAR 0 3
21302: PUSH
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL_OW 274
21312: PPUSH
21313: LD_INT 3
21315: PPUSH
21316: CALL_OW 275
21320: PLUS
21321: ST_TO_ADDR
21322: GO 21290
21324: POP
21325: POP
// if sibCounter >= 100 then
21326: LD_VAR 0 3
21330: PUSH
21331: LD_INT 100
21333: GREATEREQUAL
21334: IFFALSE 21520
// begin ChangeMissionObjectives ( MOutMine ) ;
21336: LD_STRING MOutMine
21338: PPUSH
21339: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
21343: LD_ADDR_EXP 14
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// DialogueOn ;
21351: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
21355: LD_EXP 47
21359: PPUSH
21360: LD_STRING DNextMiss1-Pla-1
21362: PPUSH
21363: CALL_OW 94
// if not savedVsevolod then
21367: LD_EXP 19
21371: NOT
21372: IFFALSE 21418
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
21374: LD_EXP 47
21378: PPUSH
21379: LD_STRING DNextMiss2-Pla-1
21381: PPUSH
21382: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21386: LD_EXP 39
21390: PPUSH
21391: LD_STRING DNextMiss4-Bur-1
21393: PPUSH
21394: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
21398: LD_EXP 51
21402: PPUSH
21403: LD_STRING DDieVsev1-Vse-1
21405: PPUSH
21406: CALL_OW 94
// ForceFinishGame ;
21410: CALL 22201 0 0
// exit ;
21414: GO 21528
// end else
21416: GO 21454
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
21418: LD_EXP 47
21422: PPUSH
21423: LD_STRING DNextMiss3-Pla-1
21425: PPUSH
21426: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
21430: LD_EXP 47
21434: PPUSH
21435: LD_STRING DNextMiss4-Pla-1
21437: PPUSH
21438: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
21442: LD_EXP 39
21446: PPUSH
21447: LD_STRING DNextMiss4-Bur-1
21449: PPUSH
21450: CALL_OW 88
// end ; DialogueOff ;
21454: CALL_OW 7
// SelectCharacters ;
21458: CALL 15376 0 0
// canSpawnReinforces = true ;
21462: LD_ADDR_EXP 23
21466: PUSH
21467: LD_INT 1
21469: ST_TO_ADDR
// canRemoveUnits = true ;
21470: LD_ADDR_EXP 25
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21478: LD_INT 1
21480: PPUSH
21481: LD_INT 6
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21494: LD_INT 14
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
21504: LD_STRING MOutResearch
21506: PPUSH
21507: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
21511: LD_STRING MCars
21513: PPUSH
21514: CALL_OW 337
// exit ;
21518: GO 21528
// end ; wait ( 0 0$10 ) ;
21520: LD_INT 350
21522: PPUSH
21523: CALL_OW 67
// enable ;
21527: ENABLE
// end ;
21528: PPOPN 3
21530: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21531: LD_EXP 25
21535: IFFALSE 21645
21537: GO 21539
21539: DISABLE
21540: LD_INT 0
21542: PPUSH
// begin enable ;
21543: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21544: LD_EXP 51
21548: PPUSH
21549: LD_INT 1000
21551: PPUSH
21552: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21556: LD_INT 22
21558: PUSH
21559: LD_INT 6
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PPUSH
21580: CALL_OW 69
21584: PPUSH
21585: LD_INT 14
21587: PPUSH
21588: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21592: LD_ADDR_VAR 0 1
21596: PUSH
21597: LD_INT 14
21599: PPUSH
21600: LD_INT 22
21602: PUSH
21603: LD_INT 6
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PPUSH
21624: CALL_OW 70
21628: PUSH
21629: FOR_IN
21630: IFFALSE 21643
// RemoveUnit ( un ) ;
21632: LD_VAR 0 1
21636: PPUSH
21637: CALL_OW 64
21641: GO 21629
21643: POP
21644: POP
// end ;
21645: PPOPN 1
21647: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21648: LD_EXP 21
21652: NOT
21653: PUSH
21654: LD_INT 15
21656: PPUSH
21657: LD_INT 22
21659: PUSH
21660: LD_INT 3
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 50
21669: PUSH
21670: EMPTY
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: LD_INT 21
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 70
21710: AND
21711: IFFALSE 21843
21713: GO 21715
21715: DISABLE
21716: LD_INT 0
21718: PPUSH
// begin enable ;
21719: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21720: LD_ADDR_VAR 0 1
21724: PUSH
21725: LD_INT 15
21727: PPUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 3
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 50
21740: PUSH
21741: EMPTY
21742: LIST
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: LD_INT 21
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: PPUSH
21777: CALL_OW 70
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21799
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_INT 16
21792: PPUSH
21793: CALL_OW 113
21797: GO 21782
21799: POP
21800: POP
// if not dial_NorthBlocker then
21801: LD_EXP 13
21805: NOT
21806: IFFALSE 21843
// begin dial_NorthBlocker = true ;
21808: LD_ADDR_EXP 13
21812: PUSH
21813: LD_INT 1
21815: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21816: LD_EXP 39
21820: PPUSH
21821: LD_STRING DMoveNorth-Bur-1
21823: PPUSH
21824: CALL_OW 88
// wait ( 0 0$5 ) ;
21828: LD_INT 175
21830: PPUSH
21831: CALL_OW 67
// dial_NorthBlocker = false ;
21835: LD_ADDR_EXP 13
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// end ; end ;
21843: PPOPN 1
21845: END
// every 2 2$30 trigger canSpawnReinforces do
21846: LD_EXP 23
21850: IFFALSE 21906
21852: GO 21854
21854: DISABLE
// begin SpawnPlatonovReinforces ;
21855: CALL 2897 0 0
// CenterOnXY ( 134 , 233 ) ;
21859: LD_INT 134
21861: PPUSH
21862: LD_INT 233
21864: PPUSH
21865: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21869: LD_EXP 48
21873: PUSH
21874: LD_EXP 48
21878: PPUSH
21879: CALL_OW 305
21883: AND
21884: IFFALSE 21898
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21886: LD_EXP 48
21890: PPUSH
21891: LD_STRING DMeetKirilenkova-Kir-1
21893: PPUSH
21894: CALL_OW 88
// canEndMission = true ;
21898: LD_ADDR_EXP 24
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// end ; end_of_file
21906: END
// export function Lose_Burlak ; begin
21907: LD_INT 0
21909: PPUSH
// YouLost ( Burlak ) ;
21910: LD_STRING Burlak
21912: PPUSH
21913: CALL_OW 104
// end ;
21917: LD_VAR 0 1
21921: RET
// export function Lose_Gleb ; begin
21922: LD_INT 0
21924: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21925: LD_EXP 47
21929: PPUSH
21930: LD_STRING DKillGleb-Pla-1
21932: PPUSH
21933: CALL_OW 94
// YouLost ( Gleb ) ;
21937: LD_STRING Gleb
21939: PPUSH
21940: CALL_OW 104
// end ;
21944: LD_VAR 0 1
21948: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21949: LD_EXP 24
21953: NOT
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: LD_INT 25
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 30
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 30
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 30
22000: PUSH
22001: LD_INT 6
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 7
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 30
22020: PUSH
22021: LD_INT 8
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: NOT
22046: AND
22047: IFFALSE 22059
22049: GO 22051
22051: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
22052: LD_STRING NoDepotNoEngineerNoLab
22054: PPUSH
22055: CALL_OW 104
22059: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
22060: LD_INT 0
22062: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
22063: LD_STRING NoDepotNoEngineerNoLab
22065: PPUSH
22066: CALL_OW 104
// end ; end_of_file
22070: LD_VAR 0 1
22074: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
22075: LD_EXP 24
22079: PUSH
22080: LD_INT 14
22082: PPUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 50
22095: PUSH
22096: EMPTY
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 21
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 21
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 59
22127: PUSH
22128: EMPTY
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 71
22150: NOT
22151: AND
22152: IFFALSE 22198
22154: GO 22156
22156: DISABLE
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
// begin case Query ( QEndGame ) of 1 :
22161: LD_STRING QEndGame
22163: PPUSH
22164: CALL_OW 97
22168: PUSH
22169: LD_INT 1
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22196
22177: POP
// begin SetRewards ;
22178: CALL 22225 0 0
// SavePlayerCharacters ;
22182: CALL 22389 0 0
// SaveGlobalVariables ;
22186: CALL 22778 0 0
// YouWin ;
22190: CALL_OW 103
// end ; end ;
22194: GO 22197
22196: POP
// enable ;
22197: ENABLE
// end ;
22198: PPOPN 2
22200: END
// export function ForceFinishGame ; begin
22201: LD_INT 0
22203: PPUSH
// SetRewards ;
22204: CALL 22225 0 0
// SavePlayerCharacters ;
22208: CALL 22389 0 0
// SaveGlobalVariables ;
22212: CALL 22778 0 0
// YouWin ;
22216: CALL_OW 103
// end ;
22220: LD_VAR 0 1
22224: RET
// function SetRewards ; begin
22225: LD_INT 0
22227: PPUSH
// if savedVsevolod then
22228: LD_EXP 19
22232: IFFALSE 22246
// AddMedal ( Vsevolod , 1 ) else
22234: LD_STRING Vsevolod
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 101
22244: GO 22257
// AddMedal ( Vsevolod , - 1 ) ;
22246: LD_STRING Vsevolod
22248: PPUSH
22249: LD_INT 1
22251: NEG
22252: PPUSH
22253: CALL_OW 101
// if not lostAgainBase then
22257: LD_EXP 17
22261: NOT
22262: IFFALSE 22276
// AddMedal ( Ovsyenko , 1 ) else
22264: LD_STRING Ovsyenko
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 101
22274: GO 22287
// AddMedal ( Ovsyenko , - 1 ) ;
22276: LD_STRING Ovsyenko
22278: PPUSH
22279: LD_INT 1
22281: NEG
22282: PPUSH
22283: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
22287: LD_INT 9
22289: PPUSH
22290: LD_INT 3
22292: PPUSH
22293: CALL_OW 321
22297: PUSH
22298: LD_INT 2
22300: EQUAL
22301: IFFALSE 22315
// AddMedal ( Prediction , 1 ) else
22303: LD_STRING Prediction
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: CALL_OW 101
22313: GO 22326
// AddMedal ( Prediction , - 1 ) ;
22315: LD_STRING Prediction
22317: PPUSH
22318: LD_INT 1
22320: NEG
22321: PPUSH
22322: CALL_OW 101
// GiveMedals ( Main ) ;
22326: LD_STRING Main
22328: PPUSH
22329: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
22333: LD_INT 22
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 23
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 50
22365: PUSH
22366: EMPTY
22367: LIST
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: PPUSH
22375: CALL_OW 69
22379: PPUSH
22380: CALL_OW 43
// end ;
22384: LD_VAR 0 1
22388: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
22393: LD_EXP 39
22397: PPUSH
22398: LD_STRING Burlak
22400: PPUSH
22401: LD_INT 3
22403: PPUSH
22404: CALL 11903 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
22408: LD_EXP 40
22412: PPUSH
22413: LD_STRING Karamazov
22415: PPUSH
22416: LD_INT 3
22418: PPUSH
22419: CALL 11903 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
22423: LD_EXP 41
22427: PPUSH
22428: LD_STRING Petrovova
22430: PPUSH
22431: LD_INT 3
22433: PPUSH
22434: CALL 11903 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
22438: LD_EXP 42
22442: PPUSH
22443: LD_STRING Gleb
22445: PPUSH
22446: LD_INT 3
22448: PPUSH
22449: CALL 11903 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
22453: LD_EXP 43
22457: PPUSH
22458: LD_STRING Petrosyan
22460: PPUSH
22461: LD_INT 3
22463: PPUSH
22464: CALL 11903 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
22468: LD_EXP 45
22472: PPUSH
22473: LD_STRING Dolgov
22475: PPUSH
22476: LD_INT 3
22478: PPUSH
22479: CALL 11903 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
22483: LD_EXP 46
22487: PPUSH
22488: LD_STRING Lipshchin
22490: PPUSH
22491: LD_INT 3
22493: PPUSH
22494: CALL 11903 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22498: LD_EXP 44
22502: PPUSH
22503: LD_STRING Titov
22505: PPUSH
22506: LD_INT 3
22508: PPUSH
22509: CALL 11903 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22513: LD_EXP 48
22517: PPUSH
22518: LD_STRING Kirilenkova
22520: PPUSH
22521: LD_INT 3
22523: PPUSH
22524: CALL 11903 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22528: LD_EXP 49
22532: PPUSH
22533: LD_STRING Belkov
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: CALL 11903 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22543: LD_EXP 50
22547: PPUSH
22548: LD_STRING Belkov2
22550: PPUSH
22551: LD_INT 3
22553: PPUSH
22554: CALL 11903 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22558: LD_INT 22
22560: PUSH
22561: LD_INT 3
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 12
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 25
22593: PUSH
22594: LD_INT 16
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 15
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: PPUSH
22627: LD_STRING other_apemans
22629: PPUSH
22630: LD_INT 3
22632: PPUSH
22633: CALL 11959 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_INT 3
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 23
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 50
22674: PUSH
22675: EMPTY
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: PPUSH
22684: CALL_OW 69
22688: PUSH
22689: LD_EXP 39
22693: PUSH
22694: LD_EXP 40
22698: PUSH
22699: LD_EXP 41
22703: PUSH
22704: LD_EXP 42
22708: PUSH
22709: LD_EXP 43
22713: PUSH
22714: LD_EXP 44
22718: PUSH
22719: LD_EXP 45
22723: PUSH
22724: LD_EXP 46
22728: PUSH
22729: LD_EXP 48
22733: PUSH
22734: LD_EXP 49
22738: PUSH
22739: LD_EXP 50
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: DIFF
22757: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_STRING other_survivors
22765: PPUSH
22766: LD_INT 3
22768: PPUSH
22769: CALL 11959 0 3
// end ;
22773: LD_VAR 0 1
22777: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22778: LD_INT 0
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
// resourcesFrom06 = [ ] ;
22784: LD_ADDR_EXP 8
22788: PUSH
22789: EMPTY
22790: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22791: LD_EXP 6
22795: PPUSH
22796: LD_STRING 06_TechMatPredStatus_1
22798: PPUSH
22799: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_INT 14
22810: PPUSH
22811: LD_INT 22
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 59
22823: PUSH
22824: EMPTY
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 34
22832: PUSH
22833: LD_INT 51
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 34
22842: PUSH
22843: LD_INT 32
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 34
22852: PUSH
22853: LD_INT 12
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 34
22862: PUSH
22863: LD_INT 89
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 70
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22916
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22890: LD_ADDR_EXP 8
22894: PUSH
22895: LD_EXP 8
22899: PUSH
22900: LD_VAR 0 2
22904: PPUSH
22905: CALL 15029 0 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: ADD
22913: ST_TO_ADDR
22914: GO 22887
22916: POP
22917: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22918: LD_EXP 8
22922: PPUSH
22923: LD_STRING 06_ResourcesInCargo_3
22925: PPUSH
22926: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22930: LD_ADDR_VAR 0 2
22934: PUSH
22935: LD_INT 14
22937: PPUSH
22938: LD_INT 22
22940: PUSH
22941: LD_INT 3
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 59
22960: PUSH
22961: EMPTY
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 70
22973: PUSH
22974: FOR_IN
22975: IFFALSE 23379
// begin driver = UnitsInside ( i ) [ 1 ] ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 2
22986: PPUSH
22987: CALL_OW 313
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: ST_TO_ADDR
// if driver = Burlak then
22996: LD_VAR 0 3
23000: PUSH
23001: LD_EXP 39
23005: EQUAL
23006: IFFALSE 23016
// driverShortName = Bur ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_STRING Bur
23015: ST_TO_ADDR
// if driver = Karamazov then
23016: LD_VAR 0 3
23020: PUSH
23021: LD_EXP 40
23025: EQUAL
23026: IFFALSE 23036
// driverShortName = Kar ;
23028: LD_ADDR_VAR 0 4
23032: PUSH
23033: LD_STRING Kar
23035: ST_TO_ADDR
// if driver = Petrovova then
23036: LD_VAR 0 3
23040: PUSH
23041: LD_EXP 41
23045: EQUAL
23046: IFFALSE 23056
// driverShortName = Ptr ;
23048: LD_ADDR_VAR 0 4
23052: PUSH
23053: LD_STRING Ptr
23055: ST_TO_ADDR
// if driver = Gleb then
23056: LD_VAR 0 3
23060: PUSH
23061: LD_EXP 42
23065: EQUAL
23066: IFFALSE 23076
// driverShortName = Glb ;
23068: LD_ADDR_VAR 0 4
23072: PUSH
23073: LD_STRING Glb
23075: ST_TO_ADDR
// if driver = Petrosyan then
23076: LD_VAR 0 3
23080: PUSH
23081: LD_EXP 43
23085: EQUAL
23086: IFFALSE 23096
// driverShortName = Pet ;
23088: LD_ADDR_VAR 0 4
23092: PUSH
23093: LD_STRING Pet
23095: ST_TO_ADDR
// if driver = Dolgov then
23096: LD_VAR 0 3
23100: PUSH
23101: LD_EXP 45
23105: EQUAL
23106: IFFALSE 23116
// driverShortName = Dol ;
23108: LD_ADDR_VAR 0 4
23112: PUSH
23113: LD_STRING Dol
23115: ST_TO_ADDR
// if driver = Lipshchin then
23116: LD_VAR 0 3
23120: PUSH
23121: LD_EXP 46
23125: EQUAL
23126: IFFALSE 23136
// driverShortName = Lip ;
23128: LD_ADDR_VAR 0 4
23132: PUSH
23133: LD_STRING Lip
23135: ST_TO_ADDR
// if driver = Titov then
23136: LD_VAR 0 3
23140: PUSH
23141: LD_EXP 44
23145: EQUAL
23146: IFFALSE 23156
// driverShortName = Tit ;
23148: LD_ADDR_VAR 0 4
23152: PUSH
23153: LD_STRING Tit
23155: ST_TO_ADDR
// if driver = Kirilenkova then
23156: LD_VAR 0 3
23160: PUSH
23161: LD_EXP 48
23165: EQUAL
23166: IFFALSE 23176
// driverShortName = Kir ;
23168: LD_ADDR_VAR 0 4
23172: PUSH
23173: LD_STRING Kir
23175: ST_TO_ADDR
// if driver = Belkov then
23176: LD_VAR 0 3
23180: PUSH
23181: LD_EXP 49
23185: EQUAL
23186: IFFALSE 23196
// driverShortName = Bel ;
23188: LD_ADDR_VAR 0 4
23192: PUSH
23193: LD_STRING Bel
23195: ST_TO_ADDR
// if driver = Belkov2 then
23196: LD_VAR 0 3
23200: PUSH
23201: LD_EXP 50
23205: EQUAL
23206: IFFALSE 23216
// driverShortName = Bel2 ;
23208: LD_ADDR_VAR 0 4
23212: PUSH
23213: LD_STRING Bel2
23215: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
23216: LD_VAR 0 3
23220: PUSH
23221: LD_EXP 39
23225: PUSH
23226: LD_EXP 40
23230: PUSH
23231: LD_EXP 41
23235: PUSH
23236: LD_EXP 42
23240: PUSH
23241: LD_EXP 43
23245: PUSH
23246: LD_EXP 44
23250: PUSH
23251: LD_EXP 45
23255: PUSH
23256: LD_EXP 46
23260: PUSH
23261: LD_EXP 48
23265: PUSH
23266: LD_EXP 49
23270: PUSH
23271: LD_EXP 50
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: IN
23289: NOT
23290: IFFALSE 23300
// driverShortName = rand ;
23292: LD_ADDR_VAR 0 4
23296: PUSH
23297: LD_STRING rand
23299: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
23300: LD_ADDR_EXP 7
23304: PUSH
23305: LD_EXP 7
23309: PUSH
23310: LD_VAR 0 2
23314: PPUSH
23315: CALL_OW 248
23319: PUSH
23320: LD_VAR 0 2
23324: PPUSH
23325: CALL_OW 265
23329: PUSH
23330: LD_VAR 0 2
23334: PPUSH
23335: CALL_OW 262
23339: PUSH
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 263
23349: PUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: CALL_OW 264
23359: PUSH
23360: LD_VAR 0 4
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: ADD
23376: ST_TO_ADDR
// end ;
23377: GO 22974
23379: POP
23380: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
23381: LD_EXP 7
23385: PPUSH
23386: LD_STRING 06_Vehicles_2
23388: PPUSH
23389: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
23393: LD_EXP 19
23397: PPUSH
23398: LD_STRING 06_VsevolodStatus_4
23400: PPUSH
23401: CALL_OW 39
// end ; end_of_file
23405: LD_VAR 0 1
23409: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
23410: LD_VAR 0 1
23414: PUSH
23415: LD_EXP 59
23419: IN
23420: IFFALSE 23438
// ovsyenkoBase = ovsyenkoBase diff unit ;
23422: LD_ADDR_EXP 59
23426: PUSH
23427: LD_EXP 59
23431: PUSH
23432: LD_VAR 0 1
23436: DIFF
23437: ST_TO_ADDR
// if unit = Burlak then
23438: LD_VAR 0 1
23442: PUSH
23443: LD_EXP 39
23447: EQUAL
23448: IFFALSE 23454
// Lose_Burlak ;
23450: CALL 21907 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
23454: LD_VAR 0 1
23458: PUSH
23459: LD_EXP 51
23463: EQUAL
23464: PUSH
23465: LD_EXP 51
23469: PPUSH
23470: CALL_OW 255
23474: PUSH
23475: LD_INT 3
23477: EQUAL
23478: AND
23479: IFFALSE 23489
// savedVsevolod = false ;
23481: LD_ADDR_EXP 19
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
23489: LD_VAR 0 1
23493: PUSH
23494: LD_INT 86
23496: EQUAL
23497: PUSH
23498: LD_INT 86
23500: PPUSH
23501: CALL_OW 255
23505: PUSH
23506: LD_INT 3
23508: EQUAL
23509: AND
23510: IFFALSE 23520
// lostAgainBase = true ;
23512: LD_ADDR_EXP 17
23516: PUSH
23517: LD_INT 1
23519: ST_TO_ADDR
// end ;
23520: PPOPN 1
23522: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23523: LD_VAR 0 1
23527: PUSH
23528: LD_EXP 42
23532: EQUAL
23533: PUSH
23534: LD_VAR 0 2
23538: PUSH
23539: LD_INT 3
23541: EQUAL
23542: AND
23543: IFFALSE 23549
// Lose_Gleb ;
23545: CALL 21922 0 0
// if unit = Vsevolod then
23549: LD_VAR 0 1
23553: PUSH
23554: LD_EXP 51
23558: EQUAL
23559: IFFALSE 23569
// savedVsevolod = false ;
23561: LD_ADDR_EXP 19
23565: PUSH
23566: LD_INT 0
23568: ST_TO_ADDR
// end ;
23569: PPOPN 3
23571: END
// on BuildingComplete ( building ) do begin end ;
23572: PPOPN 1
23574: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23575: LD_VAR 0 3
23579: PPUSH
23580: CALL_OW 255
23584: PUSH
23585: LD_INT 3
23587: EQUAL
23588: PUSH
23589: LD_VAR 0 1
23593: PPUSH
23594: CALL_OW 266
23598: PUSH
23599: LD_INT 30
23601: EQUAL
23602: AND
23603: PUSH
23604: LD_EXP 9
23608: NOT
23609: AND
23610: IFFALSE 23616
// Dial_SibTechs ;
23612: CALL 17268 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23616: LD_VAR 0 3
23620: PPUSH
23621: CALL_OW 255
23625: PUSH
23626: LD_INT 3
23628: EQUAL
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 266
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: IN
23650: AND
23651: PUSH
23652: LD_VAR 0 1
23656: PPUSH
23657: CALL_OW 274
23661: PPUSH
23662: LD_INT 3
23664: PPUSH
23665: CALL_OW 275
23669: PUSH
23670: LD_INT 0
23672: GREATER
23673: AND
23674: PUSH
23675: LD_EXP 9
23679: NOT
23680: AND
23681: IFFALSE 23687
// Dial_SibTechs ;
23683: CALL 17268 0 0
// end ;
23687: PPOPN 3
23689: END
// on Contact ( side1 , side2 ) do begin end ;
23690: PPOPN 2
23692: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 255
23707: PUSH
23708: LD_INT 1
23710: EQUAL
23711: IFFALSE 23878
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23713: LD_ADDR_VAR 0 4
23717: PUSH
23718: LD_INT 5
23720: PPUSH
23721: LD_INT 22
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 50
23733: PUSH
23734: EMPTY
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 21
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: LD_INT 36
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 34
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: PPUSH
23799: CALL_OW 70
23803: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23804: LD_VAR 0 1
23808: PPUSH
23809: CALL_OW 263
23813: PUSH
23814: LD_INT 2
23816: EQUAL
23817: PUSH
23818: LD_VAR 0 4
23822: AND
23823: IFFALSE 23878
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23825: LD_ADDR_VAR 0 5
23829: PUSH
23830: LD_VAR 0 4
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PPUSH
23839: CALL_OW 313
23843: ST_TO_ADDR
// if tmp then
23844: LD_VAR 0 5
23848: IFFALSE 23878
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23850: LD_VAR 0 1
23854: PPUSH
23855: LD_VAR 0 5
23859: PUSH
23860: LD_INT 1
23862: PPUSH
23863: LD_VAR 0 5
23867: PPUSH
23868: CALL_OW 12
23872: ARRAY
23873: PPUSH
23874: CALL_OW 53
// end ; end ; end ;
23878: PPOPN 5
23880: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23881: LD_VAR 0 1
23885: PUSH
23886: LD_INT 30
23888: EQUAL
23889: IFFALSE 23895
// Dial_ResearchTauField ;
23891: CALL 20736 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23895: LD_VAR 0 1
23899: PUSH
23900: LD_INT 22
23902: EQUAL
23903: PUSH
23904: LD_INT 30
23906: PPUSH
23907: LD_INT 3
23909: PPUSH
23910: CALL_OW 321
23914: PUSH
23915: LD_INT 2
23917: EQUAL
23918: AND
23919: IFFALSE 23928
// ChangeMissionObjectives ( MOutResearch ) ;
23921: LD_STRING MOutResearch
23923: PPUSH
23924: CALL_OW 337
// if research = tech_MatPred then
23928: LD_VAR 0 1
23932: PUSH
23933: LD_INT 9
23935: EQUAL
23936: IFFALSE 23942
// Dial_ResearchMatPredictions ;
23938: CALL 17423 0 0
// end ; end_of_file
23942: PPOPN 2
23944: END
// every 0 0$1 trigger enableVsevolodCounter do
23945: LD_EXP 22
23949: IFFALSE 23969
23951: GO 23953
23953: DISABLE
// begin enable ;
23954: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23955: LD_ADDR_EXP 26
23959: PUSH
23960: LD_EXP 26
23964: PUSH
23965: LD_INT 35
23967: PLUS
23968: ST_TO_ADDR
// end ; end_of_file
23969: END
// every 0 0$01 do var timer ;
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
// begin timer := 5 5$30 ;
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_INT 11550
23983: ST_TO_ADDR
// repeat wait ( timer ) ;
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23993: LD_INT 3
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: CALL_OW 12
24003: PPUSH
24004: LD_INT 20
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24014: LD_ADDR_EXP 27
24018: PUSH
24019: LD_EXP 27
24023: PUSH
24024: LD_INT 1
24026: PLUS
24027: ST_TO_ADDR
// until cratesSpawned = 3 ;
24028: LD_EXP 27
24032: PUSH
24033: LD_INT 3
24035: EQUAL
24036: IFFALSE 23984
// end ; end_of_file
24038: PPOPN 1
24040: END
// export ru_radar end_of_file every 0 0$1 do
24041: GO 24043
24043: DISABLE
// begin enable ;
24044: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
24045: LD_STRING updateTimer(
24047: PUSH
24048: LD_OWVAR 1
24052: STR
24053: PUSH
24054: LD_STRING );
24056: STR
24057: PPUSH
24058: CALL_OW 559
// end ;
24062: END
// export function SOS_MapStart ( ) ; begin
24063: LD_INT 0
24065: PPUSH
// if streamModeActive then
24066: LD_EXP 66
24070: IFFALSE 24079
// DefineStreamItems ( true ) ;
24072: LD_INT 1
24074: PPUSH
24075: CALL 25883 0 1
// UpdateLuaVariables ( ) ;
24079: CALL 24096 0 0
// UpdateFactoryWaypoints ( ) ;
24083: CALL 38744 0 0
// UpdateWarehouseGatheringPoints ( ) ;
24087: CALL 39001 0 0
// end ;
24091: LD_VAR 0 1
24095: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
24096: LD_INT 0
24098: PPUSH
// if not globalGameSaveCounter then
24099: LD_EXP 65
24103: NOT
24104: IFFALSE 24115
// ToLua ( setGameSaveCounter(0) ) else
24106: LD_STRING setGameSaveCounter(0)
24108: PPUSH
24109: CALL_OW 559
24113: GO 24147
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
24115: LD_ADDR_EXP 65
24119: PUSH
24120: LD_EXP 65
24124: PPUSH
24125: CALL 82958 0 1
24129: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
24130: LD_STRING setGameSaveCounter(
24132: PUSH
24133: LD_EXP 65
24137: STR
24138: PUSH
24139: LD_STRING )
24141: STR
24142: PPUSH
24143: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
24147: LD_STRING setGameDifficulty(
24149: PUSH
24150: LD_OWVAR 67
24154: STR
24155: PUSH
24156: LD_STRING )
24158: STR
24159: PPUSH
24160: CALL_OW 559
// end ;
24164: LD_VAR 0 1
24168: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24169: LD_INT 0
24171: PPUSH
// if p2 = stream_mode then
24172: LD_VAR 0 2
24176: PUSH
24177: LD_INT 100
24179: EQUAL
24180: IFFALSE 25183
// begin if not StreamModeActive then
24182: LD_EXP 66
24186: NOT
24187: IFFALSE 24197
// StreamModeActive := true ;
24189: LD_ADDR_EXP 66
24193: PUSH
24194: LD_INT 1
24196: ST_TO_ADDR
// if p3 = 0 then
24197: LD_VAR 0 3
24201: PUSH
24202: LD_INT 0
24204: EQUAL
24205: IFFALSE 24211
// InitStreamMode ;
24207: CALL 25419 0 0
// if p3 = 1 then
24211: LD_VAR 0 3
24215: PUSH
24216: LD_INT 1
24218: EQUAL
24219: IFFALSE 24229
// sRocket := true ;
24221: LD_ADDR_EXP 71
24225: PUSH
24226: LD_INT 1
24228: ST_TO_ADDR
// if p3 = 2 then
24229: LD_VAR 0 3
24233: PUSH
24234: LD_INT 2
24236: EQUAL
24237: IFFALSE 24247
// sSpeed := true ;
24239: LD_ADDR_EXP 70
24243: PUSH
24244: LD_INT 1
24246: ST_TO_ADDR
// if p3 = 3 then
24247: LD_VAR 0 3
24251: PUSH
24252: LD_INT 3
24254: EQUAL
24255: IFFALSE 24265
// sEngine := true ;
24257: LD_ADDR_EXP 72
24261: PUSH
24262: LD_INT 1
24264: ST_TO_ADDR
// if p3 = 4 then
24265: LD_VAR 0 3
24269: PUSH
24270: LD_INT 4
24272: EQUAL
24273: IFFALSE 24283
// sSpec := true ;
24275: LD_ADDR_EXP 69
24279: PUSH
24280: LD_INT 1
24282: ST_TO_ADDR
// if p3 = 5 then
24283: LD_VAR 0 3
24287: PUSH
24288: LD_INT 5
24290: EQUAL
24291: IFFALSE 24301
// sLevel := true ;
24293: LD_ADDR_EXP 73
24297: PUSH
24298: LD_INT 1
24300: ST_TO_ADDR
// if p3 = 6 then
24301: LD_VAR 0 3
24305: PUSH
24306: LD_INT 6
24308: EQUAL
24309: IFFALSE 24319
// sArmoury := true ;
24311: LD_ADDR_EXP 74
24315: PUSH
24316: LD_INT 1
24318: ST_TO_ADDR
// if p3 = 7 then
24319: LD_VAR 0 3
24323: PUSH
24324: LD_INT 7
24326: EQUAL
24327: IFFALSE 24337
// sRadar := true ;
24329: LD_ADDR_EXP 75
24333: PUSH
24334: LD_INT 1
24336: ST_TO_ADDR
// if p3 = 8 then
24337: LD_VAR 0 3
24341: PUSH
24342: LD_INT 8
24344: EQUAL
24345: IFFALSE 24355
// sBunker := true ;
24347: LD_ADDR_EXP 76
24351: PUSH
24352: LD_INT 1
24354: ST_TO_ADDR
// if p3 = 9 then
24355: LD_VAR 0 3
24359: PUSH
24360: LD_INT 9
24362: EQUAL
24363: IFFALSE 24373
// sHack := true ;
24365: LD_ADDR_EXP 77
24369: PUSH
24370: LD_INT 1
24372: ST_TO_ADDR
// if p3 = 10 then
24373: LD_VAR 0 3
24377: PUSH
24378: LD_INT 10
24380: EQUAL
24381: IFFALSE 24391
// sFire := true ;
24383: LD_ADDR_EXP 78
24387: PUSH
24388: LD_INT 1
24390: ST_TO_ADDR
// if p3 = 11 then
24391: LD_VAR 0 3
24395: PUSH
24396: LD_INT 11
24398: EQUAL
24399: IFFALSE 24409
// sRefresh := true ;
24401: LD_ADDR_EXP 79
24405: PUSH
24406: LD_INT 1
24408: ST_TO_ADDR
// if p3 = 12 then
24409: LD_VAR 0 3
24413: PUSH
24414: LD_INT 12
24416: EQUAL
24417: IFFALSE 24427
// sExp := true ;
24419: LD_ADDR_EXP 80
24423: PUSH
24424: LD_INT 1
24426: ST_TO_ADDR
// if p3 = 13 then
24427: LD_VAR 0 3
24431: PUSH
24432: LD_INT 13
24434: EQUAL
24435: IFFALSE 24445
// sDepot := true ;
24437: LD_ADDR_EXP 81
24441: PUSH
24442: LD_INT 1
24444: ST_TO_ADDR
// if p3 = 14 then
24445: LD_VAR 0 3
24449: PUSH
24450: LD_INT 14
24452: EQUAL
24453: IFFALSE 24463
// sFlag := true ;
24455: LD_ADDR_EXP 82
24459: PUSH
24460: LD_INT 1
24462: ST_TO_ADDR
// if p3 = 15 then
24463: LD_VAR 0 3
24467: PUSH
24468: LD_INT 15
24470: EQUAL
24471: IFFALSE 24481
// sKamikadze := true ;
24473: LD_ADDR_EXP 90
24477: PUSH
24478: LD_INT 1
24480: ST_TO_ADDR
// if p3 = 16 then
24481: LD_VAR 0 3
24485: PUSH
24486: LD_INT 16
24488: EQUAL
24489: IFFALSE 24499
// sTroll := true ;
24491: LD_ADDR_EXP 91
24495: PUSH
24496: LD_INT 1
24498: ST_TO_ADDR
// if p3 = 17 then
24499: LD_VAR 0 3
24503: PUSH
24504: LD_INT 17
24506: EQUAL
24507: IFFALSE 24517
// sSlow := true ;
24509: LD_ADDR_EXP 92
24513: PUSH
24514: LD_INT 1
24516: ST_TO_ADDR
// if p3 = 18 then
24517: LD_VAR 0 3
24521: PUSH
24522: LD_INT 18
24524: EQUAL
24525: IFFALSE 24535
// sLack := true ;
24527: LD_ADDR_EXP 93
24531: PUSH
24532: LD_INT 1
24534: ST_TO_ADDR
// if p3 = 19 then
24535: LD_VAR 0 3
24539: PUSH
24540: LD_INT 19
24542: EQUAL
24543: IFFALSE 24553
// sTank := true ;
24545: LD_ADDR_EXP 95
24549: PUSH
24550: LD_INT 1
24552: ST_TO_ADDR
// if p3 = 20 then
24553: LD_VAR 0 3
24557: PUSH
24558: LD_INT 20
24560: EQUAL
24561: IFFALSE 24571
// sRemote := true ;
24563: LD_ADDR_EXP 96
24567: PUSH
24568: LD_INT 1
24570: ST_TO_ADDR
// if p3 = 21 then
24571: LD_VAR 0 3
24575: PUSH
24576: LD_INT 21
24578: EQUAL
24579: IFFALSE 24589
// sPowell := true ;
24581: LD_ADDR_EXP 97
24585: PUSH
24586: LD_INT 1
24588: ST_TO_ADDR
// if p3 = 22 then
24589: LD_VAR 0 3
24593: PUSH
24594: LD_INT 22
24596: EQUAL
24597: IFFALSE 24607
// sTeleport := true ;
24599: LD_ADDR_EXP 100
24603: PUSH
24604: LD_INT 1
24606: ST_TO_ADDR
// if p3 = 23 then
24607: LD_VAR 0 3
24611: PUSH
24612: LD_INT 23
24614: EQUAL
24615: IFFALSE 24625
// sOilTower := true ;
24617: LD_ADDR_EXP 102
24621: PUSH
24622: LD_INT 1
24624: ST_TO_ADDR
// if p3 = 24 then
24625: LD_VAR 0 3
24629: PUSH
24630: LD_INT 24
24632: EQUAL
24633: IFFALSE 24643
// sShovel := true ;
24635: LD_ADDR_EXP 103
24639: PUSH
24640: LD_INT 1
24642: ST_TO_ADDR
// if p3 = 25 then
24643: LD_VAR 0 3
24647: PUSH
24648: LD_INT 25
24650: EQUAL
24651: IFFALSE 24661
// sSheik := true ;
24653: LD_ADDR_EXP 104
24657: PUSH
24658: LD_INT 1
24660: ST_TO_ADDR
// if p3 = 26 then
24661: LD_VAR 0 3
24665: PUSH
24666: LD_INT 26
24668: EQUAL
24669: IFFALSE 24679
// sEarthquake := true ;
24671: LD_ADDR_EXP 106
24675: PUSH
24676: LD_INT 1
24678: ST_TO_ADDR
// if p3 = 27 then
24679: LD_VAR 0 3
24683: PUSH
24684: LD_INT 27
24686: EQUAL
24687: IFFALSE 24697
// sAI := true ;
24689: LD_ADDR_EXP 107
24693: PUSH
24694: LD_INT 1
24696: ST_TO_ADDR
// if p3 = 28 then
24697: LD_VAR 0 3
24701: PUSH
24702: LD_INT 28
24704: EQUAL
24705: IFFALSE 24715
// sCargo := true ;
24707: LD_ADDR_EXP 110
24711: PUSH
24712: LD_INT 1
24714: ST_TO_ADDR
// if p3 = 29 then
24715: LD_VAR 0 3
24719: PUSH
24720: LD_INT 29
24722: EQUAL
24723: IFFALSE 24733
// sDLaser := true ;
24725: LD_ADDR_EXP 111
24729: PUSH
24730: LD_INT 1
24732: ST_TO_ADDR
// if p3 = 30 then
24733: LD_VAR 0 3
24737: PUSH
24738: LD_INT 30
24740: EQUAL
24741: IFFALSE 24751
// sExchange := true ;
24743: LD_ADDR_EXP 112
24747: PUSH
24748: LD_INT 1
24750: ST_TO_ADDR
// if p3 = 31 then
24751: LD_VAR 0 3
24755: PUSH
24756: LD_INT 31
24758: EQUAL
24759: IFFALSE 24769
// sFac := true ;
24761: LD_ADDR_EXP 113
24765: PUSH
24766: LD_INT 1
24768: ST_TO_ADDR
// if p3 = 32 then
24769: LD_VAR 0 3
24773: PUSH
24774: LD_INT 32
24776: EQUAL
24777: IFFALSE 24787
// sPower := true ;
24779: LD_ADDR_EXP 114
24783: PUSH
24784: LD_INT 1
24786: ST_TO_ADDR
// if p3 = 33 then
24787: LD_VAR 0 3
24791: PUSH
24792: LD_INT 33
24794: EQUAL
24795: IFFALSE 24805
// sRandom := true ;
24797: LD_ADDR_EXP 115
24801: PUSH
24802: LD_INT 1
24804: ST_TO_ADDR
// if p3 = 34 then
24805: LD_VAR 0 3
24809: PUSH
24810: LD_INT 34
24812: EQUAL
24813: IFFALSE 24823
// sShield := true ;
24815: LD_ADDR_EXP 116
24819: PUSH
24820: LD_INT 1
24822: ST_TO_ADDR
// if p3 = 35 then
24823: LD_VAR 0 3
24827: PUSH
24828: LD_INT 35
24830: EQUAL
24831: IFFALSE 24841
// sTime := true ;
24833: LD_ADDR_EXP 117
24837: PUSH
24838: LD_INT 1
24840: ST_TO_ADDR
// if p3 = 36 then
24841: LD_VAR 0 3
24845: PUSH
24846: LD_INT 36
24848: EQUAL
24849: IFFALSE 24859
// sTools := true ;
24851: LD_ADDR_EXP 118
24855: PUSH
24856: LD_INT 1
24858: ST_TO_ADDR
// if p3 = 101 then
24859: LD_VAR 0 3
24863: PUSH
24864: LD_INT 101
24866: EQUAL
24867: IFFALSE 24877
// sSold := true ;
24869: LD_ADDR_EXP 83
24873: PUSH
24874: LD_INT 1
24876: ST_TO_ADDR
// if p3 = 102 then
24877: LD_VAR 0 3
24881: PUSH
24882: LD_INT 102
24884: EQUAL
24885: IFFALSE 24895
// sDiff := true ;
24887: LD_ADDR_EXP 84
24891: PUSH
24892: LD_INT 1
24894: ST_TO_ADDR
// if p3 = 103 then
24895: LD_VAR 0 3
24899: PUSH
24900: LD_INT 103
24902: EQUAL
24903: IFFALSE 24913
// sFog := true ;
24905: LD_ADDR_EXP 87
24909: PUSH
24910: LD_INT 1
24912: ST_TO_ADDR
// if p3 = 104 then
24913: LD_VAR 0 3
24917: PUSH
24918: LD_INT 104
24920: EQUAL
24921: IFFALSE 24931
// sReset := true ;
24923: LD_ADDR_EXP 88
24927: PUSH
24928: LD_INT 1
24930: ST_TO_ADDR
// if p3 = 105 then
24931: LD_VAR 0 3
24935: PUSH
24936: LD_INT 105
24938: EQUAL
24939: IFFALSE 24949
// sSun := true ;
24941: LD_ADDR_EXP 89
24945: PUSH
24946: LD_INT 1
24948: ST_TO_ADDR
// if p3 = 106 then
24949: LD_VAR 0 3
24953: PUSH
24954: LD_INT 106
24956: EQUAL
24957: IFFALSE 24967
// sTiger := true ;
24959: LD_ADDR_EXP 85
24963: PUSH
24964: LD_INT 1
24966: ST_TO_ADDR
// if p3 = 107 then
24967: LD_VAR 0 3
24971: PUSH
24972: LD_INT 107
24974: EQUAL
24975: IFFALSE 24985
// sBomb := true ;
24977: LD_ADDR_EXP 86
24981: PUSH
24982: LD_INT 1
24984: ST_TO_ADDR
// if p3 = 108 then
24985: LD_VAR 0 3
24989: PUSH
24990: LD_INT 108
24992: EQUAL
24993: IFFALSE 25003
// sWound := true ;
24995: LD_ADDR_EXP 94
24999: PUSH
25000: LD_INT 1
25002: ST_TO_ADDR
// if p3 = 109 then
25003: LD_VAR 0 3
25007: PUSH
25008: LD_INT 109
25010: EQUAL
25011: IFFALSE 25021
// sBetray := true ;
25013: LD_ADDR_EXP 98
25017: PUSH
25018: LD_INT 1
25020: ST_TO_ADDR
// if p3 = 110 then
25021: LD_VAR 0 3
25025: PUSH
25026: LD_INT 110
25028: EQUAL
25029: IFFALSE 25039
// sContamin := true ;
25031: LD_ADDR_EXP 99
25035: PUSH
25036: LD_INT 1
25038: ST_TO_ADDR
// if p3 = 111 then
25039: LD_VAR 0 3
25043: PUSH
25044: LD_INT 111
25046: EQUAL
25047: IFFALSE 25057
// sOil := true ;
25049: LD_ADDR_EXP 101
25053: PUSH
25054: LD_INT 1
25056: ST_TO_ADDR
// if p3 = 112 then
25057: LD_VAR 0 3
25061: PUSH
25062: LD_INT 112
25064: EQUAL
25065: IFFALSE 25075
// sStu := true ;
25067: LD_ADDR_EXP 105
25071: PUSH
25072: LD_INT 1
25074: ST_TO_ADDR
// if p3 = 113 then
25075: LD_VAR 0 3
25079: PUSH
25080: LD_INT 113
25082: EQUAL
25083: IFFALSE 25093
// sBazooka := true ;
25085: LD_ADDR_EXP 108
25089: PUSH
25090: LD_INT 1
25092: ST_TO_ADDR
// if p3 = 114 then
25093: LD_VAR 0 3
25097: PUSH
25098: LD_INT 114
25100: EQUAL
25101: IFFALSE 25111
// sMortar := true ;
25103: LD_ADDR_EXP 109
25107: PUSH
25108: LD_INT 1
25110: ST_TO_ADDR
// if p3 = 115 then
25111: LD_VAR 0 3
25115: PUSH
25116: LD_INT 115
25118: EQUAL
25119: IFFALSE 25129
// sRanger := true ;
25121: LD_ADDR_EXP 119
25125: PUSH
25126: LD_INT 1
25128: ST_TO_ADDR
// if p3 = 116 then
25129: LD_VAR 0 3
25133: PUSH
25134: LD_INT 116
25136: EQUAL
25137: IFFALSE 25147
// sComputer := true ;
25139: LD_ADDR_EXP 120
25143: PUSH
25144: LD_INT 1
25146: ST_TO_ADDR
// if p3 = 117 then
25147: LD_VAR 0 3
25151: PUSH
25152: LD_INT 117
25154: EQUAL
25155: IFFALSE 25165
// s30 := true ;
25157: LD_ADDR_EXP 121
25161: PUSH
25162: LD_INT 1
25164: ST_TO_ADDR
// if p3 = 118 then
25165: LD_VAR 0 3
25169: PUSH
25170: LD_INT 118
25172: EQUAL
25173: IFFALSE 25183
// s60 := true ;
25175: LD_ADDR_EXP 122
25179: PUSH
25180: LD_INT 1
25182: ST_TO_ADDR
// end ; if p2 = hack_mode then
25183: LD_VAR 0 2
25187: PUSH
25188: LD_INT 101
25190: EQUAL
25191: IFFALSE 25319
// begin case p3 of 1 :
25193: LD_VAR 0 3
25197: PUSH
25198: LD_INT 1
25200: DOUBLE
25201: EQUAL
25202: IFTRUE 25206
25204: GO 25213
25206: POP
// hHackUnlimitedResources ; 2 :
25207: CALL 37490 0 0
25211: GO 25319
25213: LD_INT 2
25215: DOUBLE
25216: EQUAL
25217: IFTRUE 25221
25219: GO 25228
25221: POP
// hHackSetLevel10 ; 3 :
25222: CALL 37623 0 0
25226: GO 25319
25228: LD_INT 3
25230: DOUBLE
25231: EQUAL
25232: IFTRUE 25236
25234: GO 25243
25236: POP
// hHackSetLevel10YourUnits ; 4 :
25237: CALL 37708 0 0
25241: GO 25319
25243: LD_INT 4
25245: DOUBLE
25246: EQUAL
25247: IFTRUE 25251
25249: GO 25258
25251: POP
// hHackInvincible ; 5 :
25252: CALL 38156 0 0
25256: GO 25319
25258: LD_INT 5
25260: DOUBLE
25261: EQUAL
25262: IFTRUE 25266
25264: GO 25273
25266: POP
// hHackInvisible ; 6 :
25267: CALL 38267 0 0
25271: GO 25319
25273: LD_INT 6
25275: DOUBLE
25276: EQUAL
25277: IFTRUE 25281
25279: GO 25288
25281: POP
// hHackChangeYourSide ; 7 :
25282: CALL 38324 0 0
25286: GO 25319
25288: LD_INT 7
25290: DOUBLE
25291: EQUAL
25292: IFTRUE 25296
25294: GO 25303
25296: POP
// hHackChangeUnitSide ; 8 :
25297: CALL 38366 0 0
25301: GO 25319
25303: LD_INT 8
25305: DOUBLE
25306: EQUAL
25307: IFTRUE 25311
25309: GO 25318
25311: POP
// hHackFog ; end ;
25312: CALL 38467 0 0
25316: GO 25319
25318: POP
// end ; if p2 = game_save_mode then
25319: LD_VAR 0 2
25323: PUSH
25324: LD_INT 102
25326: EQUAL
25327: IFFALSE 25392
// begin if p3 = 1 then
25329: LD_VAR 0 3
25333: PUSH
25334: LD_INT 1
25336: EQUAL
25337: IFFALSE 25349
// globalGameSaveCounter := p4 ;
25339: LD_ADDR_EXP 65
25343: PUSH
25344: LD_VAR 0 4
25348: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
25349: LD_VAR 0 3
25353: PUSH
25354: LD_INT 2
25356: EQUAL
25357: PUSH
25358: LD_EXP 65
25362: AND
25363: IFFALSE 25382
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
25365: LD_STRING setGameSaveCounter(
25367: PUSH
25368: LD_EXP 65
25372: STR
25373: PUSH
25374: LD_STRING )
25376: STR
25377: PPUSH
25378: CALL_OW 559
// display_strings := globalGameSaveCounter ;
25382: LD_ADDR_OWVAR 47
25386: PUSH
25387: LD_EXP 65
25391: ST_TO_ADDR
// end ; end ;
25392: LD_VAR 0 7
25396: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
25397: GO 25399
25399: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25400: LD_STRING initStreamRollete();
25402: PPUSH
25403: CALL_OW 559
// InitStreamMode ;
25407: CALL 25419 0 0
// DefineStreamItems ( false ) ;
25411: LD_INT 0
25413: PPUSH
25414: CALL 25883 0 1
// end ;
25418: END
// function InitStreamMode ; begin
25419: LD_INT 0
25421: PPUSH
// streamModeActive := false ;
25422: LD_ADDR_EXP 66
25426: PUSH
25427: LD_INT 0
25429: ST_TO_ADDR
// normalCounter := 36 ;
25430: LD_ADDR_EXP 67
25434: PUSH
25435: LD_INT 36
25437: ST_TO_ADDR
// hardcoreCounter := 18 ;
25438: LD_ADDR_EXP 68
25442: PUSH
25443: LD_INT 18
25445: ST_TO_ADDR
// sRocket := false ;
25446: LD_ADDR_EXP 71
25450: PUSH
25451: LD_INT 0
25453: ST_TO_ADDR
// sSpeed := false ;
25454: LD_ADDR_EXP 70
25458: PUSH
25459: LD_INT 0
25461: ST_TO_ADDR
// sEngine := false ;
25462: LD_ADDR_EXP 72
25466: PUSH
25467: LD_INT 0
25469: ST_TO_ADDR
// sSpec := false ;
25470: LD_ADDR_EXP 69
25474: PUSH
25475: LD_INT 0
25477: ST_TO_ADDR
// sLevel := false ;
25478: LD_ADDR_EXP 73
25482: PUSH
25483: LD_INT 0
25485: ST_TO_ADDR
// sArmoury := false ;
25486: LD_ADDR_EXP 74
25490: PUSH
25491: LD_INT 0
25493: ST_TO_ADDR
// sRadar := false ;
25494: LD_ADDR_EXP 75
25498: PUSH
25499: LD_INT 0
25501: ST_TO_ADDR
// sBunker := false ;
25502: LD_ADDR_EXP 76
25506: PUSH
25507: LD_INT 0
25509: ST_TO_ADDR
// sHack := false ;
25510: LD_ADDR_EXP 77
25514: PUSH
25515: LD_INT 0
25517: ST_TO_ADDR
// sFire := false ;
25518: LD_ADDR_EXP 78
25522: PUSH
25523: LD_INT 0
25525: ST_TO_ADDR
// sRefresh := false ;
25526: LD_ADDR_EXP 79
25530: PUSH
25531: LD_INT 0
25533: ST_TO_ADDR
// sExp := false ;
25534: LD_ADDR_EXP 80
25538: PUSH
25539: LD_INT 0
25541: ST_TO_ADDR
// sDepot := false ;
25542: LD_ADDR_EXP 81
25546: PUSH
25547: LD_INT 0
25549: ST_TO_ADDR
// sFlag := false ;
25550: LD_ADDR_EXP 82
25554: PUSH
25555: LD_INT 0
25557: ST_TO_ADDR
// sKamikadze := false ;
25558: LD_ADDR_EXP 90
25562: PUSH
25563: LD_INT 0
25565: ST_TO_ADDR
// sTroll := false ;
25566: LD_ADDR_EXP 91
25570: PUSH
25571: LD_INT 0
25573: ST_TO_ADDR
// sSlow := false ;
25574: LD_ADDR_EXP 92
25578: PUSH
25579: LD_INT 0
25581: ST_TO_ADDR
// sLack := false ;
25582: LD_ADDR_EXP 93
25586: PUSH
25587: LD_INT 0
25589: ST_TO_ADDR
// sTank := false ;
25590: LD_ADDR_EXP 95
25594: PUSH
25595: LD_INT 0
25597: ST_TO_ADDR
// sRemote := false ;
25598: LD_ADDR_EXP 96
25602: PUSH
25603: LD_INT 0
25605: ST_TO_ADDR
// sPowell := false ;
25606: LD_ADDR_EXP 97
25610: PUSH
25611: LD_INT 0
25613: ST_TO_ADDR
// sTeleport := false ;
25614: LD_ADDR_EXP 100
25618: PUSH
25619: LD_INT 0
25621: ST_TO_ADDR
// sOilTower := false ;
25622: LD_ADDR_EXP 102
25626: PUSH
25627: LD_INT 0
25629: ST_TO_ADDR
// sShovel := false ;
25630: LD_ADDR_EXP 103
25634: PUSH
25635: LD_INT 0
25637: ST_TO_ADDR
// sSheik := false ;
25638: LD_ADDR_EXP 104
25642: PUSH
25643: LD_INT 0
25645: ST_TO_ADDR
// sEarthquake := false ;
25646: LD_ADDR_EXP 106
25650: PUSH
25651: LD_INT 0
25653: ST_TO_ADDR
// sAI := false ;
25654: LD_ADDR_EXP 107
25658: PUSH
25659: LD_INT 0
25661: ST_TO_ADDR
// sCargo := false ;
25662: LD_ADDR_EXP 110
25666: PUSH
25667: LD_INT 0
25669: ST_TO_ADDR
// sDLaser := false ;
25670: LD_ADDR_EXP 111
25674: PUSH
25675: LD_INT 0
25677: ST_TO_ADDR
// sExchange := false ;
25678: LD_ADDR_EXP 112
25682: PUSH
25683: LD_INT 0
25685: ST_TO_ADDR
// sFac := false ;
25686: LD_ADDR_EXP 113
25690: PUSH
25691: LD_INT 0
25693: ST_TO_ADDR
// sPower := false ;
25694: LD_ADDR_EXP 114
25698: PUSH
25699: LD_INT 0
25701: ST_TO_ADDR
// sRandom := false ;
25702: LD_ADDR_EXP 115
25706: PUSH
25707: LD_INT 0
25709: ST_TO_ADDR
// sShield := false ;
25710: LD_ADDR_EXP 116
25714: PUSH
25715: LD_INT 0
25717: ST_TO_ADDR
// sTime := false ;
25718: LD_ADDR_EXP 117
25722: PUSH
25723: LD_INT 0
25725: ST_TO_ADDR
// sTools := false ;
25726: LD_ADDR_EXP 118
25730: PUSH
25731: LD_INT 0
25733: ST_TO_ADDR
// sSold := false ;
25734: LD_ADDR_EXP 83
25738: PUSH
25739: LD_INT 0
25741: ST_TO_ADDR
// sDiff := false ;
25742: LD_ADDR_EXP 84
25746: PUSH
25747: LD_INT 0
25749: ST_TO_ADDR
// sFog := false ;
25750: LD_ADDR_EXP 87
25754: PUSH
25755: LD_INT 0
25757: ST_TO_ADDR
// sReset := false ;
25758: LD_ADDR_EXP 88
25762: PUSH
25763: LD_INT 0
25765: ST_TO_ADDR
// sSun := false ;
25766: LD_ADDR_EXP 89
25770: PUSH
25771: LD_INT 0
25773: ST_TO_ADDR
// sTiger := false ;
25774: LD_ADDR_EXP 85
25778: PUSH
25779: LD_INT 0
25781: ST_TO_ADDR
// sBomb := false ;
25782: LD_ADDR_EXP 86
25786: PUSH
25787: LD_INT 0
25789: ST_TO_ADDR
// sWound := false ;
25790: LD_ADDR_EXP 94
25794: PUSH
25795: LD_INT 0
25797: ST_TO_ADDR
// sBetray := false ;
25798: LD_ADDR_EXP 98
25802: PUSH
25803: LD_INT 0
25805: ST_TO_ADDR
// sContamin := false ;
25806: LD_ADDR_EXP 99
25810: PUSH
25811: LD_INT 0
25813: ST_TO_ADDR
// sOil := false ;
25814: LD_ADDR_EXP 101
25818: PUSH
25819: LD_INT 0
25821: ST_TO_ADDR
// sStu := false ;
25822: LD_ADDR_EXP 105
25826: PUSH
25827: LD_INT 0
25829: ST_TO_ADDR
// sBazooka := false ;
25830: LD_ADDR_EXP 108
25834: PUSH
25835: LD_INT 0
25837: ST_TO_ADDR
// sMortar := false ;
25838: LD_ADDR_EXP 109
25842: PUSH
25843: LD_INT 0
25845: ST_TO_ADDR
// sRanger := false ;
25846: LD_ADDR_EXP 119
25850: PUSH
25851: LD_INT 0
25853: ST_TO_ADDR
// sComputer := false ;
25854: LD_ADDR_EXP 120
25858: PUSH
25859: LD_INT 0
25861: ST_TO_ADDR
// s30 := false ;
25862: LD_ADDR_EXP 121
25866: PUSH
25867: LD_INT 0
25869: ST_TO_ADDR
// s60 := false ;
25870: LD_ADDR_EXP 122
25874: PUSH
25875: LD_INT 0
25877: ST_TO_ADDR
// end ;
25878: LD_VAR 0 1
25882: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
25883: LD_INT 0
25885: PPUSH
25886: PPUSH
25887: PPUSH
25888: PPUSH
25889: PPUSH
25890: PPUSH
25891: PPUSH
// result := [ ] ;
25892: LD_ADDR_VAR 0 2
25896: PUSH
25897: EMPTY
25898: ST_TO_ADDR
// if campaign_id = 1 then
25899: LD_OWVAR 69
25903: PUSH
25904: LD_INT 1
25906: EQUAL
25907: IFFALSE 29073
// begin case mission_number of 1 :
25909: LD_OWVAR 70
25913: PUSH
25914: LD_INT 1
25916: DOUBLE
25917: EQUAL
25918: IFTRUE 25922
25920: GO 25998
25922: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
25923: LD_ADDR_VAR 0 2
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: LD_INT 4
25933: PUSH
25934: LD_INT 11
25936: PUSH
25937: LD_INT 12
25939: PUSH
25940: LD_INT 15
25942: PUSH
25943: LD_INT 16
25945: PUSH
25946: LD_INT 22
25948: PUSH
25949: LD_INT 23
25951: PUSH
25952: LD_INT 26
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 101
25968: PUSH
25969: LD_INT 102
25971: PUSH
25972: LD_INT 106
25974: PUSH
25975: LD_INT 116
25977: PUSH
25978: LD_INT 117
25980: PUSH
25981: LD_INT 118
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: ST_TO_ADDR
25996: GO 29071
25998: LD_INT 2
26000: DOUBLE
26001: EQUAL
26002: IFTRUE 26006
26004: GO 26090
26006: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
26007: LD_ADDR_VAR 0 2
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: LD_INT 4
26017: PUSH
26018: LD_INT 11
26020: PUSH
26021: LD_INT 12
26023: PUSH
26024: LD_INT 15
26026: PUSH
26027: LD_INT 16
26029: PUSH
26030: LD_INT 22
26032: PUSH
26033: LD_INT 23
26035: PUSH
26036: LD_INT 26
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 101
26052: PUSH
26053: LD_INT 102
26055: PUSH
26056: LD_INT 105
26058: PUSH
26059: LD_INT 106
26061: PUSH
26062: LD_INT 108
26064: PUSH
26065: LD_INT 116
26067: PUSH
26068: LD_INT 117
26070: PUSH
26071: LD_INT 118
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: ST_TO_ADDR
26088: GO 29071
26090: LD_INT 3
26092: DOUBLE
26093: EQUAL
26094: IFTRUE 26098
26096: GO 26186
26098: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
26099: LD_ADDR_VAR 0 2
26103: PUSH
26104: LD_INT 2
26106: PUSH
26107: LD_INT 4
26109: PUSH
26110: LD_INT 5
26112: PUSH
26113: LD_INT 11
26115: PUSH
26116: LD_INT 12
26118: PUSH
26119: LD_INT 15
26121: PUSH
26122: LD_INT 16
26124: PUSH
26125: LD_INT 22
26127: PUSH
26128: LD_INT 26
26130: PUSH
26131: LD_INT 36
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 101
26148: PUSH
26149: LD_INT 102
26151: PUSH
26152: LD_INT 105
26154: PUSH
26155: LD_INT 106
26157: PUSH
26158: LD_INT 108
26160: PUSH
26161: LD_INT 116
26163: PUSH
26164: LD_INT 117
26166: PUSH
26167: LD_INT 118
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: ST_TO_ADDR
26184: GO 29071
26186: LD_INT 4
26188: DOUBLE
26189: EQUAL
26190: IFTRUE 26194
26192: GO 26290
26194: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
26195: LD_ADDR_VAR 0 2
26199: PUSH
26200: LD_INT 2
26202: PUSH
26203: LD_INT 4
26205: PUSH
26206: LD_INT 5
26208: PUSH
26209: LD_INT 8
26211: PUSH
26212: LD_INT 11
26214: PUSH
26215: LD_INT 12
26217: PUSH
26218: LD_INT 15
26220: PUSH
26221: LD_INT 16
26223: PUSH
26224: LD_INT 22
26226: PUSH
26227: LD_INT 23
26229: PUSH
26230: LD_INT 26
26232: PUSH
26233: LD_INT 36
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 101
26252: PUSH
26253: LD_INT 102
26255: PUSH
26256: LD_INT 105
26258: PUSH
26259: LD_INT 106
26261: PUSH
26262: LD_INT 108
26264: PUSH
26265: LD_INT 116
26267: PUSH
26268: LD_INT 117
26270: PUSH
26271: LD_INT 118
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: ST_TO_ADDR
26288: GO 29071
26290: LD_INT 5
26292: DOUBLE
26293: EQUAL
26294: IFTRUE 26298
26296: GO 26410
26298: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
26299: LD_ADDR_VAR 0 2
26303: PUSH
26304: LD_INT 2
26306: PUSH
26307: LD_INT 4
26309: PUSH
26310: LD_INT 5
26312: PUSH
26313: LD_INT 6
26315: PUSH
26316: LD_INT 8
26318: PUSH
26319: LD_INT 11
26321: PUSH
26322: LD_INT 12
26324: PUSH
26325: LD_INT 15
26327: PUSH
26328: LD_INT 16
26330: PUSH
26331: LD_INT 22
26333: PUSH
26334: LD_INT 23
26336: PUSH
26337: LD_INT 25
26339: PUSH
26340: LD_INT 26
26342: PUSH
26343: LD_INT 36
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 101
26364: PUSH
26365: LD_INT 102
26367: PUSH
26368: LD_INT 105
26370: PUSH
26371: LD_INT 106
26373: PUSH
26374: LD_INT 108
26376: PUSH
26377: LD_INT 109
26379: PUSH
26380: LD_INT 112
26382: PUSH
26383: LD_INT 116
26385: PUSH
26386: LD_INT 117
26388: PUSH
26389: LD_INT 118
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: ST_TO_ADDR
26408: GO 29071
26410: LD_INT 6
26412: DOUBLE
26413: EQUAL
26414: IFTRUE 26418
26416: GO 26550
26418: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
26419: LD_ADDR_VAR 0 2
26423: PUSH
26424: LD_INT 2
26426: PUSH
26427: LD_INT 4
26429: PUSH
26430: LD_INT 5
26432: PUSH
26433: LD_INT 6
26435: PUSH
26436: LD_INT 8
26438: PUSH
26439: LD_INT 11
26441: PUSH
26442: LD_INT 12
26444: PUSH
26445: LD_INT 15
26447: PUSH
26448: LD_INT 16
26450: PUSH
26451: LD_INT 20
26453: PUSH
26454: LD_INT 21
26456: PUSH
26457: LD_INT 22
26459: PUSH
26460: LD_INT 23
26462: PUSH
26463: LD_INT 25
26465: PUSH
26466: LD_INT 26
26468: PUSH
26469: LD_INT 30
26471: PUSH
26472: LD_INT 31
26474: PUSH
26475: LD_INT 32
26477: PUSH
26478: LD_INT 36
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 101
26504: PUSH
26505: LD_INT 102
26507: PUSH
26508: LD_INT 105
26510: PUSH
26511: LD_INT 106
26513: PUSH
26514: LD_INT 108
26516: PUSH
26517: LD_INT 109
26519: PUSH
26520: LD_INT 112
26522: PUSH
26523: LD_INT 116
26525: PUSH
26526: LD_INT 117
26528: PUSH
26529: LD_INT 118
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: ST_TO_ADDR
26548: GO 29071
26550: LD_INT 7
26552: DOUBLE
26553: EQUAL
26554: IFTRUE 26558
26556: GO 26670
26558: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
26559: LD_ADDR_VAR 0 2
26563: PUSH
26564: LD_INT 2
26566: PUSH
26567: LD_INT 4
26569: PUSH
26570: LD_INT 5
26572: PUSH
26573: LD_INT 7
26575: PUSH
26576: LD_INT 11
26578: PUSH
26579: LD_INT 12
26581: PUSH
26582: LD_INT 15
26584: PUSH
26585: LD_INT 16
26587: PUSH
26588: LD_INT 20
26590: PUSH
26591: LD_INT 21
26593: PUSH
26594: LD_INT 22
26596: PUSH
26597: LD_INT 23
26599: PUSH
26600: LD_INT 25
26602: PUSH
26603: LD_INT 26
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 101
26624: PUSH
26625: LD_INT 102
26627: PUSH
26628: LD_INT 103
26630: PUSH
26631: LD_INT 105
26633: PUSH
26634: LD_INT 106
26636: PUSH
26637: LD_INT 108
26639: PUSH
26640: LD_INT 112
26642: PUSH
26643: LD_INT 116
26645: PUSH
26646: LD_INT 117
26648: PUSH
26649: LD_INT 118
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: ST_TO_ADDR
26668: GO 29071
26670: LD_INT 8
26672: DOUBLE
26673: EQUAL
26674: IFTRUE 26678
26676: GO 26818
26678: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
26679: LD_ADDR_VAR 0 2
26683: PUSH
26684: LD_INT 2
26686: PUSH
26687: LD_INT 4
26689: PUSH
26690: LD_INT 5
26692: PUSH
26693: LD_INT 6
26695: PUSH
26696: LD_INT 7
26698: PUSH
26699: LD_INT 8
26701: PUSH
26702: LD_INT 11
26704: PUSH
26705: LD_INT 12
26707: PUSH
26708: LD_INT 15
26710: PUSH
26711: LD_INT 16
26713: PUSH
26714: LD_INT 20
26716: PUSH
26717: LD_INT 21
26719: PUSH
26720: LD_INT 22
26722: PUSH
26723: LD_INT 23
26725: PUSH
26726: LD_INT 25
26728: PUSH
26729: LD_INT 26
26731: PUSH
26732: LD_INT 30
26734: PUSH
26735: LD_INT 31
26737: PUSH
26738: LD_INT 32
26740: PUSH
26741: LD_INT 36
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 101
26768: PUSH
26769: LD_INT 102
26771: PUSH
26772: LD_INT 103
26774: PUSH
26775: LD_INT 105
26777: PUSH
26778: LD_INT 106
26780: PUSH
26781: LD_INT 108
26783: PUSH
26784: LD_INT 109
26786: PUSH
26787: LD_INT 112
26789: PUSH
26790: LD_INT 116
26792: PUSH
26793: LD_INT 117
26795: PUSH
26796: LD_INT 118
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: ST_TO_ADDR
26816: GO 29071
26818: LD_INT 9
26820: DOUBLE
26821: EQUAL
26822: IFTRUE 26826
26824: GO 26974
26826: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
26827: LD_ADDR_VAR 0 2
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: LD_INT 4
26837: PUSH
26838: LD_INT 5
26840: PUSH
26841: LD_INT 6
26843: PUSH
26844: LD_INT 7
26846: PUSH
26847: LD_INT 8
26849: PUSH
26850: LD_INT 11
26852: PUSH
26853: LD_INT 12
26855: PUSH
26856: LD_INT 15
26858: PUSH
26859: LD_INT 16
26861: PUSH
26862: LD_INT 20
26864: PUSH
26865: LD_INT 21
26867: PUSH
26868: LD_INT 22
26870: PUSH
26871: LD_INT 23
26873: PUSH
26874: LD_INT 25
26876: PUSH
26877: LD_INT 26
26879: PUSH
26880: LD_INT 28
26882: PUSH
26883: LD_INT 30
26885: PUSH
26886: LD_INT 31
26888: PUSH
26889: LD_INT 32
26891: PUSH
26892: LD_INT 36
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 101
26920: PUSH
26921: LD_INT 102
26923: PUSH
26924: LD_INT 103
26926: PUSH
26927: LD_INT 105
26929: PUSH
26930: LD_INT 106
26932: PUSH
26933: LD_INT 108
26935: PUSH
26936: LD_INT 109
26938: PUSH
26939: LD_INT 112
26941: PUSH
26942: LD_INT 114
26944: PUSH
26945: LD_INT 116
26947: PUSH
26948: LD_INT 117
26950: PUSH
26951: LD_INT 118
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: ST_TO_ADDR
26972: GO 29071
26974: LD_INT 10
26976: DOUBLE
26977: EQUAL
26978: IFTRUE 26982
26980: GO 27178
26982: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
26983: LD_ADDR_VAR 0 2
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: LD_INT 4
26993: PUSH
26994: LD_INT 5
26996: PUSH
26997: LD_INT 6
26999: PUSH
27000: LD_INT 7
27002: PUSH
27003: LD_INT 8
27005: PUSH
27006: LD_INT 9
27008: PUSH
27009: LD_INT 10
27011: PUSH
27012: LD_INT 11
27014: PUSH
27015: LD_INT 12
27017: PUSH
27018: LD_INT 13
27020: PUSH
27021: LD_INT 14
27023: PUSH
27024: LD_INT 15
27026: PUSH
27027: LD_INT 16
27029: PUSH
27030: LD_INT 17
27032: PUSH
27033: LD_INT 18
27035: PUSH
27036: LD_INT 19
27038: PUSH
27039: LD_INT 20
27041: PUSH
27042: LD_INT 21
27044: PUSH
27045: LD_INT 22
27047: PUSH
27048: LD_INT 23
27050: PUSH
27051: LD_INT 24
27053: PUSH
27054: LD_INT 25
27056: PUSH
27057: LD_INT 26
27059: PUSH
27060: LD_INT 28
27062: PUSH
27063: LD_INT 30
27065: PUSH
27066: LD_INT 31
27068: PUSH
27069: LD_INT 32
27071: PUSH
27072: LD_INT 36
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 101
27108: PUSH
27109: LD_INT 102
27111: PUSH
27112: LD_INT 103
27114: PUSH
27115: LD_INT 104
27117: PUSH
27118: LD_INT 105
27120: PUSH
27121: LD_INT 106
27123: PUSH
27124: LD_INT 107
27126: PUSH
27127: LD_INT 108
27129: PUSH
27130: LD_INT 109
27132: PUSH
27133: LD_INT 110
27135: PUSH
27136: LD_INT 111
27138: PUSH
27139: LD_INT 112
27141: PUSH
27142: LD_INT 114
27144: PUSH
27145: LD_INT 116
27147: PUSH
27148: LD_INT 117
27150: PUSH
27151: LD_INT 118
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: ST_TO_ADDR
27176: GO 29071
27178: LD_INT 11
27180: DOUBLE
27181: EQUAL
27182: IFTRUE 27186
27184: GO 27390
27186: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
27187: LD_ADDR_VAR 0 2
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: LD_INT 4
27200: PUSH
27201: LD_INT 5
27203: PUSH
27204: LD_INT 6
27206: PUSH
27207: LD_INT 7
27209: PUSH
27210: LD_INT 8
27212: PUSH
27213: LD_INT 9
27215: PUSH
27216: LD_INT 10
27218: PUSH
27219: LD_INT 11
27221: PUSH
27222: LD_INT 12
27224: PUSH
27225: LD_INT 13
27227: PUSH
27228: LD_INT 14
27230: PUSH
27231: LD_INT 15
27233: PUSH
27234: LD_INT 16
27236: PUSH
27237: LD_INT 17
27239: PUSH
27240: LD_INT 18
27242: PUSH
27243: LD_INT 19
27245: PUSH
27246: LD_INT 20
27248: PUSH
27249: LD_INT 21
27251: PUSH
27252: LD_INT 22
27254: PUSH
27255: LD_INT 23
27257: PUSH
27258: LD_INT 24
27260: PUSH
27261: LD_INT 25
27263: PUSH
27264: LD_INT 26
27266: PUSH
27267: LD_INT 28
27269: PUSH
27270: LD_INT 30
27272: PUSH
27273: LD_INT 31
27275: PUSH
27276: LD_INT 32
27278: PUSH
27279: LD_INT 34
27281: PUSH
27282: LD_INT 36
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 101
27320: PUSH
27321: LD_INT 102
27323: PUSH
27324: LD_INT 103
27326: PUSH
27327: LD_INT 104
27329: PUSH
27330: LD_INT 105
27332: PUSH
27333: LD_INT 106
27335: PUSH
27336: LD_INT 107
27338: PUSH
27339: LD_INT 108
27341: PUSH
27342: LD_INT 109
27344: PUSH
27345: LD_INT 110
27347: PUSH
27348: LD_INT 111
27350: PUSH
27351: LD_INT 112
27353: PUSH
27354: LD_INT 114
27356: PUSH
27357: LD_INT 116
27359: PUSH
27360: LD_INT 117
27362: PUSH
27363: LD_INT 118
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: ST_TO_ADDR
27388: GO 29071
27390: LD_INT 12
27392: DOUBLE
27393: EQUAL
27394: IFTRUE 27398
27396: GO 27618
27398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
27399: LD_ADDR_VAR 0 2
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: LD_INT 2
27409: PUSH
27410: LD_INT 3
27412: PUSH
27413: LD_INT 4
27415: PUSH
27416: LD_INT 5
27418: PUSH
27419: LD_INT 6
27421: PUSH
27422: LD_INT 7
27424: PUSH
27425: LD_INT 8
27427: PUSH
27428: LD_INT 9
27430: PUSH
27431: LD_INT 10
27433: PUSH
27434: LD_INT 11
27436: PUSH
27437: LD_INT 12
27439: PUSH
27440: LD_INT 13
27442: PUSH
27443: LD_INT 14
27445: PUSH
27446: LD_INT 15
27448: PUSH
27449: LD_INT 16
27451: PUSH
27452: LD_INT 17
27454: PUSH
27455: LD_INT 18
27457: PUSH
27458: LD_INT 19
27460: PUSH
27461: LD_INT 20
27463: PUSH
27464: LD_INT 21
27466: PUSH
27467: LD_INT 22
27469: PUSH
27470: LD_INT 23
27472: PUSH
27473: LD_INT 24
27475: PUSH
27476: LD_INT 25
27478: PUSH
27479: LD_INT 26
27481: PUSH
27482: LD_INT 27
27484: PUSH
27485: LD_INT 28
27487: PUSH
27488: LD_INT 30
27490: PUSH
27491: LD_INT 31
27493: PUSH
27494: LD_INT 32
27496: PUSH
27497: LD_INT 33
27499: PUSH
27500: LD_INT 34
27502: PUSH
27503: LD_INT 36
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 101
27544: PUSH
27545: LD_INT 102
27547: PUSH
27548: LD_INT 103
27550: PUSH
27551: LD_INT 104
27553: PUSH
27554: LD_INT 105
27556: PUSH
27557: LD_INT 106
27559: PUSH
27560: LD_INT 107
27562: PUSH
27563: LD_INT 108
27565: PUSH
27566: LD_INT 109
27568: PUSH
27569: LD_INT 110
27571: PUSH
27572: LD_INT 111
27574: PUSH
27575: LD_INT 112
27577: PUSH
27578: LD_INT 113
27580: PUSH
27581: LD_INT 114
27583: PUSH
27584: LD_INT 116
27586: PUSH
27587: LD_INT 117
27589: PUSH
27590: LD_INT 118
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: ST_TO_ADDR
27616: GO 29071
27618: LD_INT 13
27620: DOUBLE
27621: EQUAL
27622: IFTRUE 27626
27624: GO 27834
27626: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
27627: LD_ADDR_VAR 0 2
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: LD_INT 3
27640: PUSH
27641: LD_INT 4
27643: PUSH
27644: LD_INT 5
27646: PUSH
27647: LD_INT 8
27649: PUSH
27650: LD_INT 9
27652: PUSH
27653: LD_INT 10
27655: PUSH
27656: LD_INT 11
27658: PUSH
27659: LD_INT 12
27661: PUSH
27662: LD_INT 14
27664: PUSH
27665: LD_INT 15
27667: PUSH
27668: LD_INT 16
27670: PUSH
27671: LD_INT 17
27673: PUSH
27674: LD_INT 18
27676: PUSH
27677: LD_INT 19
27679: PUSH
27680: LD_INT 20
27682: PUSH
27683: LD_INT 21
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_INT 23
27691: PUSH
27692: LD_INT 24
27694: PUSH
27695: LD_INT 25
27697: PUSH
27698: LD_INT 26
27700: PUSH
27701: LD_INT 27
27703: PUSH
27704: LD_INT 28
27706: PUSH
27707: LD_INT 30
27709: PUSH
27710: LD_INT 31
27712: PUSH
27713: LD_INT 32
27715: PUSH
27716: LD_INT 33
27718: PUSH
27719: LD_INT 34
27721: PUSH
27722: LD_INT 36
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 101
27760: PUSH
27761: LD_INT 102
27763: PUSH
27764: LD_INT 103
27766: PUSH
27767: LD_INT 104
27769: PUSH
27770: LD_INT 105
27772: PUSH
27773: LD_INT 106
27775: PUSH
27776: LD_INT 107
27778: PUSH
27779: LD_INT 108
27781: PUSH
27782: LD_INT 109
27784: PUSH
27785: LD_INT 110
27787: PUSH
27788: LD_INT 111
27790: PUSH
27791: LD_INT 112
27793: PUSH
27794: LD_INT 113
27796: PUSH
27797: LD_INT 114
27799: PUSH
27800: LD_INT 116
27802: PUSH
27803: LD_INT 117
27805: PUSH
27806: LD_INT 118
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: ST_TO_ADDR
27832: GO 29071
27834: LD_INT 14
27836: DOUBLE
27837: EQUAL
27838: IFTRUE 27842
27840: GO 28066
27842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
27843: LD_ADDR_VAR 0 2
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 3
27856: PUSH
27857: LD_INT 4
27859: PUSH
27860: LD_INT 5
27862: PUSH
27863: LD_INT 6
27865: PUSH
27866: LD_INT 7
27868: PUSH
27869: LD_INT 8
27871: PUSH
27872: LD_INT 9
27874: PUSH
27875: LD_INT 10
27877: PUSH
27878: LD_INT 11
27880: PUSH
27881: LD_INT 12
27883: PUSH
27884: LD_INT 13
27886: PUSH
27887: LD_INT 14
27889: PUSH
27890: LD_INT 15
27892: PUSH
27893: LD_INT 16
27895: PUSH
27896: LD_INT 17
27898: PUSH
27899: LD_INT 18
27901: PUSH
27902: LD_INT 19
27904: PUSH
27905: LD_INT 20
27907: PUSH
27908: LD_INT 21
27910: PUSH
27911: LD_INT 22
27913: PUSH
27914: LD_INT 23
27916: PUSH
27917: LD_INT 24
27919: PUSH
27920: LD_INT 25
27922: PUSH
27923: LD_INT 26
27925: PUSH
27926: LD_INT 27
27928: PUSH
27929: LD_INT 28
27931: PUSH
27932: LD_INT 29
27934: PUSH
27935: LD_INT 30
27937: PUSH
27938: LD_INT 31
27940: PUSH
27941: LD_INT 32
27943: PUSH
27944: LD_INT 33
27946: PUSH
27947: LD_INT 34
27949: PUSH
27950: LD_INT 36
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 101
27992: PUSH
27993: LD_INT 102
27995: PUSH
27996: LD_INT 103
27998: PUSH
27999: LD_INT 104
28001: PUSH
28002: LD_INT 105
28004: PUSH
28005: LD_INT 106
28007: PUSH
28008: LD_INT 107
28010: PUSH
28011: LD_INT 108
28013: PUSH
28014: LD_INT 109
28016: PUSH
28017: LD_INT 110
28019: PUSH
28020: LD_INT 111
28022: PUSH
28023: LD_INT 112
28025: PUSH
28026: LD_INT 113
28028: PUSH
28029: LD_INT 114
28031: PUSH
28032: LD_INT 116
28034: PUSH
28035: LD_INT 117
28037: PUSH
28038: LD_INT 118
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: ST_TO_ADDR
28064: GO 29071
28066: LD_INT 15
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28074
28072: GO 28298
28074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
28075: LD_ADDR_VAR 0 2
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 3
28088: PUSH
28089: LD_INT 4
28091: PUSH
28092: LD_INT 5
28094: PUSH
28095: LD_INT 6
28097: PUSH
28098: LD_INT 7
28100: PUSH
28101: LD_INT 8
28103: PUSH
28104: LD_INT 9
28106: PUSH
28107: LD_INT 10
28109: PUSH
28110: LD_INT 11
28112: PUSH
28113: LD_INT 12
28115: PUSH
28116: LD_INT 13
28118: PUSH
28119: LD_INT 14
28121: PUSH
28122: LD_INT 15
28124: PUSH
28125: LD_INT 16
28127: PUSH
28128: LD_INT 17
28130: PUSH
28131: LD_INT 18
28133: PUSH
28134: LD_INT 19
28136: PUSH
28137: LD_INT 20
28139: PUSH
28140: LD_INT 21
28142: PUSH
28143: LD_INT 22
28145: PUSH
28146: LD_INT 23
28148: PUSH
28149: LD_INT 24
28151: PUSH
28152: LD_INT 25
28154: PUSH
28155: LD_INT 26
28157: PUSH
28158: LD_INT 27
28160: PUSH
28161: LD_INT 28
28163: PUSH
28164: LD_INT 29
28166: PUSH
28167: LD_INT 30
28169: PUSH
28170: LD_INT 31
28172: PUSH
28173: LD_INT 32
28175: PUSH
28176: LD_INT 33
28178: PUSH
28179: LD_INT 34
28181: PUSH
28182: LD_INT 36
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 101
28224: PUSH
28225: LD_INT 102
28227: PUSH
28228: LD_INT 103
28230: PUSH
28231: LD_INT 104
28233: PUSH
28234: LD_INT 105
28236: PUSH
28237: LD_INT 106
28239: PUSH
28240: LD_INT 107
28242: PUSH
28243: LD_INT 108
28245: PUSH
28246: LD_INT 109
28248: PUSH
28249: LD_INT 110
28251: PUSH
28252: LD_INT 111
28254: PUSH
28255: LD_INT 112
28257: PUSH
28258: LD_INT 113
28260: PUSH
28261: LD_INT 114
28263: PUSH
28264: LD_INT 116
28266: PUSH
28267: LD_INT 117
28269: PUSH
28270: LD_INT 118
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: ST_TO_ADDR
28296: GO 29071
28298: LD_INT 16
28300: DOUBLE
28301: EQUAL
28302: IFTRUE 28306
28304: GO 28442
28306: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
28307: LD_ADDR_VAR 0 2
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: LD_INT 4
28317: PUSH
28318: LD_INT 5
28320: PUSH
28321: LD_INT 7
28323: PUSH
28324: LD_INT 11
28326: PUSH
28327: LD_INT 12
28329: PUSH
28330: LD_INT 15
28332: PUSH
28333: LD_INT 16
28335: PUSH
28336: LD_INT 20
28338: PUSH
28339: LD_INT 21
28341: PUSH
28342: LD_INT 22
28344: PUSH
28345: LD_INT 23
28347: PUSH
28348: LD_INT 25
28350: PUSH
28351: LD_INT 26
28353: PUSH
28354: LD_INT 30
28356: PUSH
28357: LD_INT 31
28359: PUSH
28360: LD_INT 32
28362: PUSH
28363: LD_INT 33
28365: PUSH
28366: LD_INT 34
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 101
28392: PUSH
28393: LD_INT 102
28395: PUSH
28396: LD_INT 103
28398: PUSH
28399: LD_INT 106
28401: PUSH
28402: LD_INT 108
28404: PUSH
28405: LD_INT 112
28407: PUSH
28408: LD_INT 113
28410: PUSH
28411: LD_INT 114
28413: PUSH
28414: LD_INT 116
28416: PUSH
28417: LD_INT 117
28419: PUSH
28420: LD_INT 118
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: ST_TO_ADDR
28440: GO 29071
28442: LD_INT 17
28444: DOUBLE
28445: EQUAL
28446: IFTRUE 28450
28448: GO 28674
28450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
28451: LD_ADDR_VAR 0 2
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: LD_INT 3
28464: PUSH
28465: LD_INT 4
28467: PUSH
28468: LD_INT 5
28470: PUSH
28471: LD_INT 6
28473: PUSH
28474: LD_INT 7
28476: PUSH
28477: LD_INT 8
28479: PUSH
28480: LD_INT 9
28482: PUSH
28483: LD_INT 10
28485: PUSH
28486: LD_INT 11
28488: PUSH
28489: LD_INT 12
28491: PUSH
28492: LD_INT 13
28494: PUSH
28495: LD_INT 14
28497: PUSH
28498: LD_INT 15
28500: PUSH
28501: LD_INT 16
28503: PUSH
28504: LD_INT 17
28506: PUSH
28507: LD_INT 18
28509: PUSH
28510: LD_INT 19
28512: PUSH
28513: LD_INT 20
28515: PUSH
28516: LD_INT 21
28518: PUSH
28519: LD_INT 22
28521: PUSH
28522: LD_INT 23
28524: PUSH
28525: LD_INT 24
28527: PUSH
28528: LD_INT 25
28530: PUSH
28531: LD_INT 26
28533: PUSH
28534: LD_INT 27
28536: PUSH
28537: LD_INT 28
28539: PUSH
28540: LD_INT 29
28542: PUSH
28543: LD_INT 30
28545: PUSH
28546: LD_INT 31
28548: PUSH
28549: LD_INT 32
28551: PUSH
28552: LD_INT 33
28554: PUSH
28555: LD_INT 34
28557: PUSH
28558: LD_INT 36
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 101
28600: PUSH
28601: LD_INT 102
28603: PUSH
28604: LD_INT 103
28606: PUSH
28607: LD_INT 104
28609: PUSH
28610: LD_INT 105
28612: PUSH
28613: LD_INT 106
28615: PUSH
28616: LD_INT 107
28618: PUSH
28619: LD_INT 108
28621: PUSH
28622: LD_INT 109
28624: PUSH
28625: LD_INT 110
28627: PUSH
28628: LD_INT 111
28630: PUSH
28631: LD_INT 112
28633: PUSH
28634: LD_INT 113
28636: PUSH
28637: LD_INT 114
28639: PUSH
28640: LD_INT 116
28642: PUSH
28643: LD_INT 117
28645: PUSH
28646: LD_INT 118
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: ST_TO_ADDR
28672: GO 29071
28674: LD_INT 18
28676: DOUBLE
28677: EQUAL
28678: IFTRUE 28682
28680: GO 28830
28682: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
28683: LD_ADDR_VAR 0 2
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: LD_INT 4
28693: PUSH
28694: LD_INT 5
28696: PUSH
28697: LD_INT 7
28699: PUSH
28700: LD_INT 11
28702: PUSH
28703: LD_INT 12
28705: PUSH
28706: LD_INT 15
28708: PUSH
28709: LD_INT 16
28711: PUSH
28712: LD_INT 20
28714: PUSH
28715: LD_INT 21
28717: PUSH
28718: LD_INT 22
28720: PUSH
28721: LD_INT 23
28723: PUSH
28724: LD_INT 25
28726: PUSH
28727: LD_INT 26
28729: PUSH
28730: LD_INT 30
28732: PUSH
28733: LD_INT 31
28735: PUSH
28736: LD_INT 32
28738: PUSH
28739: LD_INT 33
28741: PUSH
28742: LD_INT 34
28744: PUSH
28745: LD_INT 35
28747: PUSH
28748: LD_INT 36
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 101
28776: PUSH
28777: LD_INT 102
28779: PUSH
28780: LD_INT 103
28782: PUSH
28783: LD_INT 106
28785: PUSH
28786: LD_INT 108
28788: PUSH
28789: LD_INT 112
28791: PUSH
28792: LD_INT 113
28794: PUSH
28795: LD_INT 114
28797: PUSH
28798: LD_INT 115
28800: PUSH
28801: LD_INT 116
28803: PUSH
28804: LD_INT 117
28806: PUSH
28807: LD_INT 118
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: ST_TO_ADDR
28828: GO 29071
28830: LD_INT 19
28832: DOUBLE
28833: EQUAL
28834: IFTRUE 28838
28836: GO 29070
28838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
28839: LD_ADDR_VAR 0 2
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: LD_INT 3
28852: PUSH
28853: LD_INT 4
28855: PUSH
28856: LD_INT 5
28858: PUSH
28859: LD_INT 6
28861: PUSH
28862: LD_INT 7
28864: PUSH
28865: LD_INT 8
28867: PUSH
28868: LD_INT 9
28870: PUSH
28871: LD_INT 10
28873: PUSH
28874: LD_INT 11
28876: PUSH
28877: LD_INT 12
28879: PUSH
28880: LD_INT 13
28882: PUSH
28883: LD_INT 14
28885: PUSH
28886: LD_INT 15
28888: PUSH
28889: LD_INT 16
28891: PUSH
28892: LD_INT 17
28894: PUSH
28895: LD_INT 18
28897: PUSH
28898: LD_INT 19
28900: PUSH
28901: LD_INT 20
28903: PUSH
28904: LD_INT 21
28906: PUSH
28907: LD_INT 22
28909: PUSH
28910: LD_INT 23
28912: PUSH
28913: LD_INT 24
28915: PUSH
28916: LD_INT 25
28918: PUSH
28919: LD_INT 26
28921: PUSH
28922: LD_INT 27
28924: PUSH
28925: LD_INT 28
28927: PUSH
28928: LD_INT 29
28930: PUSH
28931: LD_INT 30
28933: PUSH
28934: LD_INT 31
28936: PUSH
28937: LD_INT 32
28939: PUSH
28940: LD_INT 33
28942: PUSH
28943: LD_INT 34
28945: PUSH
28946: LD_INT 35
28948: PUSH
28949: LD_INT 36
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 101
28992: PUSH
28993: LD_INT 102
28995: PUSH
28996: LD_INT 103
28998: PUSH
28999: LD_INT 104
29001: PUSH
29002: LD_INT 105
29004: PUSH
29005: LD_INT 106
29007: PUSH
29008: LD_INT 107
29010: PUSH
29011: LD_INT 108
29013: PUSH
29014: LD_INT 109
29016: PUSH
29017: LD_INT 110
29019: PUSH
29020: LD_INT 111
29022: PUSH
29023: LD_INT 112
29025: PUSH
29026: LD_INT 113
29028: PUSH
29029: LD_INT 114
29031: PUSH
29032: LD_INT 115
29034: PUSH
29035: LD_INT 116
29037: PUSH
29038: LD_INT 117
29040: PUSH
29041: LD_INT 118
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: ST_TO_ADDR
29068: GO 29071
29070: POP
// end else
29071: GO 29302
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
29073: LD_ADDR_VAR 0 2
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 2
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: LD_INT 4
29089: PUSH
29090: LD_INT 5
29092: PUSH
29093: LD_INT 6
29095: PUSH
29096: LD_INT 7
29098: PUSH
29099: LD_INT 8
29101: PUSH
29102: LD_INT 9
29104: PUSH
29105: LD_INT 10
29107: PUSH
29108: LD_INT 11
29110: PUSH
29111: LD_INT 12
29113: PUSH
29114: LD_INT 13
29116: PUSH
29117: LD_INT 14
29119: PUSH
29120: LD_INT 15
29122: PUSH
29123: LD_INT 16
29125: PUSH
29126: LD_INT 17
29128: PUSH
29129: LD_INT 18
29131: PUSH
29132: LD_INT 19
29134: PUSH
29135: LD_INT 20
29137: PUSH
29138: LD_INT 21
29140: PUSH
29141: LD_INT 22
29143: PUSH
29144: LD_INT 23
29146: PUSH
29147: LD_INT 24
29149: PUSH
29150: LD_INT 25
29152: PUSH
29153: LD_INT 26
29155: PUSH
29156: LD_INT 27
29158: PUSH
29159: LD_INT 28
29161: PUSH
29162: LD_INT 29
29164: PUSH
29165: LD_INT 30
29167: PUSH
29168: LD_INT 31
29170: PUSH
29171: LD_INT 32
29173: PUSH
29174: LD_INT 33
29176: PUSH
29177: LD_INT 34
29179: PUSH
29180: LD_INT 35
29182: PUSH
29183: LD_INT 36
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 101
29226: PUSH
29227: LD_INT 102
29229: PUSH
29230: LD_INT 103
29232: PUSH
29233: LD_INT 104
29235: PUSH
29236: LD_INT 105
29238: PUSH
29239: LD_INT 106
29241: PUSH
29242: LD_INT 107
29244: PUSH
29245: LD_INT 108
29247: PUSH
29248: LD_INT 109
29250: PUSH
29251: LD_INT 110
29253: PUSH
29254: LD_INT 111
29256: PUSH
29257: LD_INT 112
29259: PUSH
29260: LD_INT 113
29262: PUSH
29263: LD_INT 114
29265: PUSH
29266: LD_INT 115
29268: PUSH
29269: LD_INT 116
29271: PUSH
29272: LD_INT 117
29274: PUSH
29275: LD_INT 118
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: ST_TO_ADDR
// if result then
29302: LD_VAR 0 2
29306: IFFALSE 30092
// begin normal :=  ;
29308: LD_ADDR_VAR 0 5
29312: PUSH
29313: LD_STRING 
29315: ST_TO_ADDR
// hardcore :=  ;
29316: LD_ADDR_VAR 0 6
29320: PUSH
29321: LD_STRING 
29323: ST_TO_ADDR
// active :=  ;
29324: LD_ADDR_VAR 0 7
29328: PUSH
29329: LD_STRING 
29331: ST_TO_ADDR
// for i = 1 to normalCounter do
29332: LD_ADDR_VAR 0 8
29336: PUSH
29337: DOUBLE
29338: LD_INT 1
29340: DEC
29341: ST_TO_ADDR
29342: LD_EXP 67
29346: PUSH
29347: FOR_TO
29348: IFFALSE 29449
// begin tmp := 0 ;
29350: LD_ADDR_VAR 0 3
29354: PUSH
29355: LD_STRING 0
29357: ST_TO_ADDR
// if result [ 1 ] then
29358: LD_VAR 0 2
29362: PUSH
29363: LD_INT 1
29365: ARRAY
29366: IFFALSE 29431
// if result [ 1 ] [ 1 ] = i then
29368: LD_VAR 0 2
29372: PUSH
29373: LD_INT 1
29375: ARRAY
29376: PUSH
29377: LD_INT 1
29379: ARRAY
29380: PUSH
29381: LD_VAR 0 8
29385: EQUAL
29386: IFFALSE 29431
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29388: LD_ADDR_VAR 0 2
29392: PUSH
29393: LD_VAR 0 2
29397: PPUSH
29398: LD_INT 1
29400: PPUSH
29401: LD_VAR 0 2
29405: PUSH
29406: LD_INT 1
29408: ARRAY
29409: PPUSH
29410: LD_INT 1
29412: PPUSH
29413: CALL_OW 3
29417: PPUSH
29418: CALL_OW 1
29422: ST_TO_ADDR
// tmp := 1 ;
29423: LD_ADDR_VAR 0 3
29427: PUSH
29428: LD_STRING 1
29430: ST_TO_ADDR
// end ; normal := normal & tmp ;
29431: LD_ADDR_VAR 0 5
29435: PUSH
29436: LD_VAR 0 5
29440: PUSH
29441: LD_VAR 0 3
29445: STR
29446: ST_TO_ADDR
// end ;
29447: GO 29347
29449: POP
29450: POP
// for i = 1 to hardcoreCounter do
29451: LD_ADDR_VAR 0 8
29455: PUSH
29456: DOUBLE
29457: LD_INT 1
29459: DEC
29460: ST_TO_ADDR
29461: LD_EXP 68
29465: PUSH
29466: FOR_TO
29467: IFFALSE 29572
// begin tmp := 0 ;
29469: LD_ADDR_VAR 0 3
29473: PUSH
29474: LD_STRING 0
29476: ST_TO_ADDR
// if result [ 2 ] then
29477: LD_VAR 0 2
29481: PUSH
29482: LD_INT 2
29484: ARRAY
29485: IFFALSE 29554
// if result [ 2 ] [ 1 ] = 100 + i then
29487: LD_VAR 0 2
29491: PUSH
29492: LD_INT 2
29494: ARRAY
29495: PUSH
29496: LD_INT 1
29498: ARRAY
29499: PUSH
29500: LD_INT 100
29502: PUSH
29503: LD_VAR 0 8
29507: PLUS
29508: EQUAL
29509: IFFALSE 29554
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29511: LD_ADDR_VAR 0 2
29515: PUSH
29516: LD_VAR 0 2
29520: PPUSH
29521: LD_INT 2
29523: PPUSH
29524: LD_VAR 0 2
29528: PUSH
29529: LD_INT 2
29531: ARRAY
29532: PPUSH
29533: LD_INT 1
29535: PPUSH
29536: CALL_OW 3
29540: PPUSH
29541: CALL_OW 1
29545: ST_TO_ADDR
// tmp := 1 ;
29546: LD_ADDR_VAR 0 3
29550: PUSH
29551: LD_STRING 1
29553: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29554: LD_ADDR_VAR 0 6
29558: PUSH
29559: LD_VAR 0 6
29563: PUSH
29564: LD_VAR 0 3
29568: STR
29569: ST_TO_ADDR
// end ;
29570: GO 29466
29572: POP
29573: POP
// if isGameLoad then
29574: LD_VAR 0 1
29578: IFFALSE 30053
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
29580: LD_ADDR_VAR 0 4
29584: PUSH
29585: LD_EXP 71
29589: PUSH
29590: LD_EXP 70
29594: PUSH
29595: LD_EXP 72
29599: PUSH
29600: LD_EXP 69
29604: PUSH
29605: LD_EXP 73
29609: PUSH
29610: LD_EXP 74
29614: PUSH
29615: LD_EXP 75
29619: PUSH
29620: LD_EXP 76
29624: PUSH
29625: LD_EXP 77
29629: PUSH
29630: LD_EXP 78
29634: PUSH
29635: LD_EXP 79
29639: PUSH
29640: LD_EXP 80
29644: PUSH
29645: LD_EXP 81
29649: PUSH
29650: LD_EXP 82
29654: PUSH
29655: LD_EXP 90
29659: PUSH
29660: LD_EXP 91
29664: PUSH
29665: LD_EXP 92
29669: PUSH
29670: LD_EXP 93
29674: PUSH
29675: LD_EXP 95
29679: PUSH
29680: LD_EXP 96
29684: PUSH
29685: LD_EXP 97
29689: PUSH
29690: LD_EXP 100
29694: PUSH
29695: LD_EXP 102
29699: PUSH
29700: LD_EXP 103
29704: PUSH
29705: LD_EXP 104
29709: PUSH
29710: LD_EXP 106
29714: PUSH
29715: LD_EXP 107
29719: PUSH
29720: LD_EXP 110
29724: PUSH
29725: LD_EXP 111
29729: PUSH
29730: LD_EXP 112
29734: PUSH
29735: LD_EXP 113
29739: PUSH
29740: LD_EXP 114
29744: PUSH
29745: LD_EXP 115
29749: PUSH
29750: LD_EXP 116
29754: PUSH
29755: LD_EXP 117
29759: PUSH
29760: LD_EXP 118
29764: PUSH
29765: LD_EXP 83
29769: PUSH
29770: LD_EXP 84
29774: PUSH
29775: LD_EXP 87
29779: PUSH
29780: LD_EXP 88
29784: PUSH
29785: LD_EXP 89
29789: PUSH
29790: LD_EXP 85
29794: PUSH
29795: LD_EXP 86
29799: PUSH
29800: LD_EXP 94
29804: PUSH
29805: LD_EXP 98
29809: PUSH
29810: LD_EXP 99
29814: PUSH
29815: LD_EXP 101
29819: PUSH
29820: LD_EXP 105
29824: PUSH
29825: LD_EXP 108
29829: PUSH
29830: LD_EXP 109
29834: PUSH
29835: LD_EXP 119
29839: PUSH
29840: LD_EXP 120
29844: PUSH
29845: LD_EXP 121
29849: PUSH
29850: LD_EXP 122
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: ST_TO_ADDR
// tmp :=  ;
29911: LD_ADDR_VAR 0 3
29915: PUSH
29916: LD_STRING 
29918: ST_TO_ADDR
// for i = 1 to normalCounter do
29919: LD_ADDR_VAR 0 8
29923: PUSH
29924: DOUBLE
29925: LD_INT 1
29927: DEC
29928: ST_TO_ADDR
29929: LD_EXP 67
29933: PUSH
29934: FOR_TO
29935: IFFALSE 29971
// begin if flags [ i ] then
29937: LD_VAR 0 4
29941: PUSH
29942: LD_VAR 0 8
29946: ARRAY
29947: IFFALSE 29969
// tmp := tmp & i & ; ;
29949: LD_ADDR_VAR 0 3
29953: PUSH
29954: LD_VAR 0 3
29958: PUSH
29959: LD_VAR 0 8
29963: STR
29964: PUSH
29965: LD_STRING ;
29967: STR
29968: ST_TO_ADDR
// end ;
29969: GO 29934
29971: POP
29972: POP
// for i = 1 to hardcoreCounter do
29973: LD_ADDR_VAR 0 8
29977: PUSH
29978: DOUBLE
29979: LD_INT 1
29981: DEC
29982: ST_TO_ADDR
29983: LD_EXP 68
29987: PUSH
29988: FOR_TO
29989: IFFALSE 30035
// begin if flags [ normalCounter + i ] then
29991: LD_VAR 0 4
29995: PUSH
29996: LD_EXP 67
30000: PUSH
30001: LD_VAR 0 8
30005: PLUS
30006: ARRAY
30007: IFFALSE 30033
// tmp := tmp & ( 100 + i ) & ; ;
30009: LD_ADDR_VAR 0 3
30013: PUSH
30014: LD_VAR 0 3
30018: PUSH
30019: LD_INT 100
30021: PUSH
30022: LD_VAR 0 8
30026: PLUS
30027: STR
30028: PUSH
30029: LD_STRING ;
30031: STR
30032: ST_TO_ADDR
// end ;
30033: GO 29988
30035: POP
30036: POP
// if tmp then
30037: LD_VAR 0 3
30041: IFFALSE 30053
// active := tmp ;
30043: LD_ADDR_VAR 0 7
30047: PUSH
30048: LD_VAR 0 3
30052: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
30053: LD_STRING getStreamItemsFromMission("
30055: PUSH
30056: LD_VAR 0 5
30060: STR
30061: PUSH
30062: LD_STRING ","
30064: STR
30065: PUSH
30066: LD_VAR 0 6
30070: STR
30071: PUSH
30072: LD_STRING ","
30074: STR
30075: PUSH
30076: LD_VAR 0 7
30080: STR
30081: PUSH
30082: LD_STRING ")
30084: STR
30085: PPUSH
30086: CALL_OW 559
// end else
30090: GO 30099
// ToLua ( getStreamItemsFromMission("","","") ) ;
30092: LD_STRING getStreamItemsFromMission("","","")
30094: PPUSH
30095: CALL_OW 559
// end ;
30099: LD_VAR 0 2
30103: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
30104: LD_EXP 66
30108: PUSH
30109: LD_EXP 71
30113: AND
30114: IFFALSE 30238
30116: GO 30118
30118: DISABLE
30119: LD_INT 0
30121: PPUSH
30122: PPUSH
// begin enable ;
30123: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
30124: LD_ADDR_VAR 0 2
30128: PUSH
30129: LD_INT 22
30131: PUSH
30132: LD_OWVAR 2
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 2
30143: PUSH
30144: LD_INT 34
30146: PUSH
30147: LD_INT 7
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 34
30156: PUSH
30157: LD_INT 45
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 34
30166: PUSH
30167: LD_INT 28
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 34
30176: PUSH
30177: LD_INT 47
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PPUSH
30195: CALL_OW 69
30199: ST_TO_ADDR
// if not tmp then
30200: LD_VAR 0 2
30204: NOT
30205: IFFALSE 30209
// exit ;
30207: GO 30238
// for i in tmp do
30209: LD_ADDR_VAR 0 1
30213: PUSH
30214: LD_VAR 0 2
30218: PUSH
30219: FOR_IN
30220: IFFALSE 30236
// begin SetLives ( i , 0 ) ;
30222: LD_VAR 0 1
30226: PPUSH
30227: LD_INT 0
30229: PPUSH
30230: CALL_OW 234
// end ;
30234: GO 30219
30236: POP
30237: POP
// end ;
30238: PPOPN 2
30240: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
30241: LD_EXP 66
30245: PUSH
30246: LD_EXP 72
30250: AND
30251: IFFALSE 30335
30253: GO 30255
30255: DISABLE
30256: LD_INT 0
30258: PPUSH
30259: PPUSH
// begin enable ;
30260: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
30261: LD_ADDR_VAR 0 2
30265: PUSH
30266: LD_INT 22
30268: PUSH
30269: LD_OWVAR 2
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 32
30280: PUSH
30281: LD_INT 3
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PPUSH
30292: CALL_OW 69
30296: ST_TO_ADDR
// if not tmp then
30297: LD_VAR 0 2
30301: NOT
30302: IFFALSE 30306
// exit ;
30304: GO 30335
// for i in tmp do
30306: LD_ADDR_VAR 0 1
30310: PUSH
30311: LD_VAR 0 2
30315: PUSH
30316: FOR_IN
30317: IFFALSE 30333
// begin SetLives ( i , 0 ) ;
30319: LD_VAR 0 1
30323: PPUSH
30324: LD_INT 0
30326: PPUSH
30327: CALL_OW 234
// end ;
30331: GO 30316
30333: POP
30334: POP
// end ;
30335: PPOPN 2
30337: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
30338: LD_EXP 66
30342: PUSH
30343: LD_EXP 69
30347: AND
30348: IFFALSE 30441
30350: GO 30352
30352: DISABLE
30353: LD_INT 0
30355: PPUSH
// begin enable ;
30356: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
30357: LD_ADDR_VAR 0 1
30361: PUSH
30362: LD_INT 22
30364: PUSH
30365: LD_OWVAR 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: LD_INT 25
30379: PUSH
30380: LD_INT 5
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 25
30389: PUSH
30390: LD_INT 9
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 25
30399: PUSH
30400: LD_INT 8
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PPUSH
30417: CALL_OW 69
30421: PUSH
30422: FOR_IN
30423: IFFALSE 30439
// begin SetClass ( i , 1 ) ;
30425: LD_VAR 0 1
30429: PPUSH
30430: LD_INT 1
30432: PPUSH
30433: CALL_OW 336
// end ;
30437: GO 30422
30439: POP
30440: POP
// end ;
30441: PPOPN 1
30443: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
30444: LD_EXP 66
30448: PUSH
30449: LD_EXP 70
30453: AND
30454: PUSH
30455: LD_OWVAR 65
30459: PUSH
30460: LD_INT 7
30462: LESS
30463: AND
30464: IFFALSE 30478
30466: GO 30468
30468: DISABLE
// begin enable ;
30469: ENABLE
// game_speed := 7 ;
30470: LD_ADDR_OWVAR 65
30474: PUSH
30475: LD_INT 7
30477: ST_TO_ADDR
// end ;
30478: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
30479: LD_EXP 66
30483: PUSH
30484: LD_EXP 73
30488: AND
30489: IFFALSE 30691
30491: GO 30493
30493: DISABLE
30494: LD_INT 0
30496: PPUSH
30497: PPUSH
30498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30499: LD_ADDR_VAR 0 3
30503: PUSH
30504: LD_INT 81
30506: PUSH
30507: LD_OWVAR 2
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 21
30518: PUSH
30519: LD_INT 1
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PPUSH
30530: CALL_OW 69
30534: ST_TO_ADDR
// if not tmp then
30535: LD_VAR 0 3
30539: NOT
30540: IFFALSE 30544
// exit ;
30542: GO 30691
// if tmp > 5 then
30544: LD_VAR 0 3
30548: PUSH
30549: LD_INT 5
30551: GREATER
30552: IFFALSE 30564
// k := 5 else
30554: LD_ADDR_VAR 0 2
30558: PUSH
30559: LD_INT 5
30561: ST_TO_ADDR
30562: GO 30574
// k := tmp ;
30564: LD_ADDR_VAR 0 2
30568: PUSH
30569: LD_VAR 0 3
30573: ST_TO_ADDR
// for i := 1 to k do
30574: LD_ADDR_VAR 0 1
30578: PUSH
30579: DOUBLE
30580: LD_INT 1
30582: DEC
30583: ST_TO_ADDR
30584: LD_VAR 0 2
30588: PUSH
30589: FOR_TO
30590: IFFALSE 30689
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30592: LD_VAR 0 3
30596: PUSH
30597: LD_VAR 0 1
30601: ARRAY
30602: PPUSH
30603: LD_VAR 0 1
30607: PUSH
30608: LD_INT 4
30610: MOD
30611: PUSH
30612: LD_INT 1
30614: PLUS
30615: PPUSH
30616: CALL_OW 259
30620: PUSH
30621: LD_INT 10
30623: LESS
30624: IFFALSE 30687
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30626: LD_VAR 0 3
30630: PUSH
30631: LD_VAR 0 1
30635: ARRAY
30636: PPUSH
30637: LD_VAR 0 1
30641: PUSH
30642: LD_INT 4
30644: MOD
30645: PUSH
30646: LD_INT 1
30648: PLUS
30649: PPUSH
30650: LD_VAR 0 3
30654: PUSH
30655: LD_VAR 0 1
30659: ARRAY
30660: PPUSH
30661: LD_VAR 0 1
30665: PUSH
30666: LD_INT 4
30668: MOD
30669: PUSH
30670: LD_INT 1
30672: PLUS
30673: PPUSH
30674: CALL_OW 259
30678: PUSH
30679: LD_INT 1
30681: PLUS
30682: PPUSH
30683: CALL_OW 237
30687: GO 30589
30689: POP
30690: POP
// end ;
30691: PPOPN 3
30693: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30694: LD_EXP 66
30698: PUSH
30699: LD_EXP 74
30703: AND
30704: IFFALSE 30724
30706: GO 30708
30708: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30709: LD_INT 4
30711: PPUSH
30712: LD_OWVAR 2
30716: PPUSH
30717: LD_INT 0
30719: PPUSH
30720: CALL_OW 324
30724: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30725: LD_EXP 66
30729: PUSH
30730: LD_EXP 103
30734: AND
30735: IFFALSE 30755
30737: GO 30739
30739: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30740: LD_INT 19
30742: PPUSH
30743: LD_OWVAR 2
30747: PPUSH
30748: LD_INT 0
30750: PPUSH
30751: CALL_OW 324
30755: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30756: LD_EXP 66
30760: PUSH
30761: LD_EXP 75
30765: AND
30766: IFFALSE 30868
30768: GO 30770
30770: DISABLE
30771: LD_INT 0
30773: PPUSH
30774: PPUSH
// begin enable ;
30775: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30776: LD_ADDR_VAR 0 2
30780: PUSH
30781: LD_INT 22
30783: PUSH
30784: LD_OWVAR 2
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 2
30795: PUSH
30796: LD_INT 34
30798: PUSH
30799: LD_INT 11
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 34
30808: PUSH
30809: LD_INT 30
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PPUSH
30825: CALL_OW 69
30829: ST_TO_ADDR
// if not tmp then
30830: LD_VAR 0 2
30834: NOT
30835: IFFALSE 30839
// exit ;
30837: GO 30868
// for i in tmp do
30839: LD_ADDR_VAR 0 1
30843: PUSH
30844: LD_VAR 0 2
30848: PUSH
30849: FOR_IN
30850: IFFALSE 30866
// begin SetLives ( i , 0 ) ;
30852: LD_VAR 0 1
30856: PPUSH
30857: LD_INT 0
30859: PPUSH
30860: CALL_OW 234
// end ;
30864: GO 30849
30866: POP
30867: POP
// end ;
30868: PPOPN 2
30870: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30871: LD_EXP 66
30875: PUSH
30876: LD_EXP 76
30880: AND
30881: IFFALSE 30901
30883: GO 30885
30885: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30886: LD_INT 32
30888: PPUSH
30889: LD_OWVAR 2
30893: PPUSH
30894: LD_INT 0
30896: PPUSH
30897: CALL_OW 324
30901: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30902: LD_EXP 66
30906: PUSH
30907: LD_EXP 77
30911: AND
30912: IFFALSE 31093
30914: GO 30916
30916: DISABLE
30917: LD_INT 0
30919: PPUSH
30920: PPUSH
30921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30922: LD_ADDR_VAR 0 2
30926: PUSH
30927: LD_INT 22
30929: PUSH
30930: LD_OWVAR 2
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 33
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PPUSH
30953: CALL_OW 69
30957: ST_TO_ADDR
// if not tmp then
30958: LD_VAR 0 2
30962: NOT
30963: IFFALSE 30967
// exit ;
30965: GO 31093
// side := 0 ;
30967: LD_ADDR_VAR 0 3
30971: PUSH
30972: LD_INT 0
30974: ST_TO_ADDR
// for i := 1 to 8 do
30975: LD_ADDR_VAR 0 1
30979: PUSH
30980: DOUBLE
30981: LD_INT 1
30983: DEC
30984: ST_TO_ADDR
30985: LD_INT 8
30987: PUSH
30988: FOR_TO
30989: IFFALSE 31037
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30991: LD_OWVAR 2
30995: PUSH
30996: LD_VAR 0 1
31000: NONEQUAL
31001: PUSH
31002: LD_OWVAR 2
31006: PPUSH
31007: LD_VAR 0 1
31011: PPUSH
31012: CALL_OW 81
31016: PUSH
31017: LD_INT 2
31019: EQUAL
31020: AND
31021: IFFALSE 31035
// begin side := i ;
31023: LD_ADDR_VAR 0 3
31027: PUSH
31028: LD_VAR 0 1
31032: ST_TO_ADDR
// break ;
31033: GO 31037
// end ;
31035: GO 30988
31037: POP
31038: POP
// if not side then
31039: LD_VAR 0 3
31043: NOT
31044: IFFALSE 31048
// exit ;
31046: GO 31093
// for i := 1 to tmp do
31048: LD_ADDR_VAR 0 1
31052: PUSH
31053: DOUBLE
31054: LD_INT 1
31056: DEC
31057: ST_TO_ADDR
31058: LD_VAR 0 2
31062: PUSH
31063: FOR_TO
31064: IFFALSE 31091
// if Prob ( 60 ) then
31066: LD_INT 60
31068: PPUSH
31069: CALL_OW 13
31073: IFFALSE 31089
// SetSide ( i , side ) ;
31075: LD_VAR 0 1
31079: PPUSH
31080: LD_VAR 0 3
31084: PPUSH
31085: CALL_OW 235
31089: GO 31063
31091: POP
31092: POP
// end ;
31093: PPOPN 3
31095: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
31096: LD_EXP 66
31100: PUSH
31101: LD_EXP 79
31105: AND
31106: IFFALSE 31225
31108: GO 31110
31110: DISABLE
31111: LD_INT 0
31113: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
31114: LD_ADDR_VAR 0 1
31118: PUSH
31119: LD_INT 22
31121: PUSH
31122: LD_OWVAR 2
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 21
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 3
31143: PUSH
31144: LD_INT 23
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: PPUSH
31163: CALL_OW 69
31167: PUSH
31168: FOR_IN
31169: IFFALSE 31223
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
31171: LD_VAR 0 1
31175: PPUSH
31176: CALL_OW 257
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: LD_INT 3
31189: PUSH
31190: LD_INT 4
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: IN
31199: IFFALSE 31221
// SetClass ( un , rand ( 1 , 4 ) ) ;
31201: LD_VAR 0 1
31205: PPUSH
31206: LD_INT 1
31208: PPUSH
31209: LD_INT 4
31211: PPUSH
31212: CALL_OW 12
31216: PPUSH
31217: CALL_OW 336
31221: GO 31168
31223: POP
31224: POP
// end ;
31225: PPOPN 1
31227: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
31228: LD_EXP 66
31232: PUSH
31233: LD_EXP 78
31237: AND
31238: IFFALSE 31317
31240: GO 31242
31242: DISABLE
31243: LD_INT 0
31245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31246: LD_ADDR_VAR 0 1
31250: PUSH
31251: LD_INT 22
31253: PUSH
31254: LD_OWVAR 2
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 21
31265: PUSH
31266: LD_INT 3
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PPUSH
31277: CALL_OW 69
31281: ST_TO_ADDR
// if not tmp then
31282: LD_VAR 0 1
31286: NOT
31287: IFFALSE 31291
// exit ;
31289: GO 31317
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
31291: LD_VAR 0 1
31295: PUSH
31296: LD_INT 1
31298: PPUSH
31299: LD_VAR 0 1
31303: PPUSH
31304: CALL_OW 12
31308: ARRAY
31309: PPUSH
31310: LD_INT 100
31312: PPUSH
31313: CALL_OW 234
// end ;
31317: PPOPN 1
31319: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
31320: LD_EXP 66
31324: PUSH
31325: LD_EXP 80
31329: AND
31330: IFFALSE 31428
31332: GO 31334
31334: DISABLE
31335: LD_INT 0
31337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31338: LD_ADDR_VAR 0 1
31342: PUSH
31343: LD_INT 22
31345: PUSH
31346: LD_OWVAR 2
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 21
31357: PUSH
31358: LD_INT 1
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PPUSH
31369: CALL_OW 69
31373: ST_TO_ADDR
// if not tmp then
31374: LD_VAR 0 1
31378: NOT
31379: IFFALSE 31383
// exit ;
31381: GO 31428
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
31383: LD_VAR 0 1
31387: PUSH
31388: LD_INT 1
31390: PPUSH
31391: LD_VAR 0 1
31395: PPUSH
31396: CALL_OW 12
31400: ARRAY
31401: PPUSH
31402: LD_INT 1
31404: PPUSH
31405: LD_INT 4
31407: PPUSH
31408: CALL_OW 12
31412: PPUSH
31413: LD_INT 3000
31415: PPUSH
31416: LD_INT 9000
31418: PPUSH
31419: CALL_OW 12
31423: PPUSH
31424: CALL_OW 492
// end ;
31428: PPOPN 1
31430: END
// every 0 0$1 trigger StreamModeActive and sDepot do
31431: LD_EXP 66
31435: PUSH
31436: LD_EXP 81
31440: AND
31441: IFFALSE 31461
31443: GO 31445
31445: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
31446: LD_INT 1
31448: PPUSH
31449: LD_OWVAR 2
31453: PPUSH
31454: LD_INT 0
31456: PPUSH
31457: CALL_OW 324
31461: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
31462: LD_EXP 66
31466: PUSH
31467: LD_EXP 82
31471: AND
31472: IFFALSE 31555
31474: GO 31476
31476: DISABLE
31477: LD_INT 0
31479: PPUSH
31480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31481: LD_ADDR_VAR 0 2
31485: PUSH
31486: LD_INT 22
31488: PUSH
31489: LD_OWVAR 2
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 21
31500: PUSH
31501: LD_INT 3
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PPUSH
31512: CALL_OW 69
31516: ST_TO_ADDR
// if not tmp then
31517: LD_VAR 0 2
31521: NOT
31522: IFFALSE 31526
// exit ;
31524: GO 31555
// for i in tmp do
31526: LD_ADDR_VAR 0 1
31530: PUSH
31531: LD_VAR 0 2
31535: PUSH
31536: FOR_IN
31537: IFFALSE 31553
// SetBLevel ( i , 10 ) ;
31539: LD_VAR 0 1
31543: PPUSH
31544: LD_INT 10
31546: PPUSH
31547: CALL_OW 241
31551: GO 31536
31553: POP
31554: POP
// end ;
31555: PPOPN 2
31557: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31558: LD_EXP 66
31562: PUSH
31563: LD_EXP 83
31567: AND
31568: IFFALSE 31679
31570: GO 31572
31572: DISABLE
31573: LD_INT 0
31575: PPUSH
31576: PPUSH
31577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31578: LD_ADDR_VAR 0 3
31582: PUSH
31583: LD_INT 22
31585: PUSH
31586: LD_OWVAR 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 25
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PPUSH
31609: CALL_OW 69
31613: ST_TO_ADDR
// if not tmp then
31614: LD_VAR 0 3
31618: NOT
31619: IFFALSE 31623
// exit ;
31621: GO 31679
// un := tmp [ rand ( 1 , tmp ) ] ;
31623: LD_ADDR_VAR 0 2
31627: PUSH
31628: LD_VAR 0 3
31632: PUSH
31633: LD_INT 1
31635: PPUSH
31636: LD_VAR 0 3
31640: PPUSH
31641: CALL_OW 12
31645: ARRAY
31646: ST_TO_ADDR
// if Crawls ( un ) then
31647: LD_VAR 0 2
31651: PPUSH
31652: CALL_OW 318
31656: IFFALSE 31667
// ComWalk ( un ) ;
31658: LD_VAR 0 2
31662: PPUSH
31663: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31667: LD_VAR 0 2
31671: PPUSH
31672: LD_INT 5
31674: PPUSH
31675: CALL_OW 336
// end ;
31679: PPOPN 3
31681: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
31682: LD_EXP 66
31686: PUSH
31687: LD_EXP 84
31691: AND
31692: PUSH
31693: LD_OWVAR 67
31697: PUSH
31698: LD_INT 4
31700: LESS
31701: AND
31702: IFFALSE 31721
31704: GO 31706
31706: DISABLE
// begin Difficulty := Difficulty + 1 ;
31707: LD_ADDR_OWVAR 67
31711: PUSH
31712: LD_OWVAR 67
31716: PUSH
31717: LD_INT 1
31719: PLUS
31720: ST_TO_ADDR
// end ;
31721: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31722: LD_EXP 66
31726: PUSH
31727: LD_EXP 85
31731: AND
31732: IFFALSE 31835
31734: GO 31736
31736: DISABLE
31737: LD_INT 0
31739: PPUSH
// begin for i := 1 to 5 do
31740: LD_ADDR_VAR 0 1
31744: PUSH
31745: DOUBLE
31746: LD_INT 1
31748: DEC
31749: ST_TO_ADDR
31750: LD_INT 5
31752: PUSH
31753: FOR_TO
31754: IFFALSE 31833
// begin uc_nation := nation_nature ;
31756: LD_ADDR_OWVAR 21
31760: PUSH
31761: LD_INT 0
31763: ST_TO_ADDR
// uc_side := 0 ;
31764: LD_ADDR_OWVAR 20
31768: PUSH
31769: LD_INT 0
31771: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31772: LD_ADDR_OWVAR 29
31776: PUSH
31777: LD_INT 12
31779: PUSH
31780: LD_INT 12
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: ST_TO_ADDR
// hc_agressivity := 20 ;
31787: LD_ADDR_OWVAR 35
31791: PUSH
31792: LD_INT 20
31794: ST_TO_ADDR
// hc_class := class_tiger ;
31795: LD_ADDR_OWVAR 28
31799: PUSH
31800: LD_INT 14
31802: ST_TO_ADDR
// hc_gallery :=  ;
31803: LD_ADDR_OWVAR 33
31807: PUSH
31808: LD_STRING 
31810: ST_TO_ADDR
// hc_name :=  ;
31811: LD_ADDR_OWVAR 26
31815: PUSH
31816: LD_STRING 
31818: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31819: CALL_OW 44
31823: PPUSH
31824: LD_INT 0
31826: PPUSH
31827: CALL_OW 51
// end ;
31831: GO 31753
31833: POP
31834: POP
// end ;
31835: PPOPN 1
31837: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31838: LD_EXP 66
31842: PUSH
31843: LD_EXP 86
31847: AND
31848: IFFALSE 31857
31850: GO 31852
31852: DISABLE
// StreamSibBomb ;
31853: CALL 31858 0 0
31857: END
// export function StreamSibBomb ; var i , x , y ; begin
31858: LD_INT 0
31860: PPUSH
31861: PPUSH
31862: PPUSH
31863: PPUSH
// result := false ;
31864: LD_ADDR_VAR 0 1
31868: PUSH
31869: LD_INT 0
31871: ST_TO_ADDR
// for i := 1 to 16 do
31872: LD_ADDR_VAR 0 2
31876: PUSH
31877: DOUBLE
31878: LD_INT 1
31880: DEC
31881: ST_TO_ADDR
31882: LD_INT 16
31884: PUSH
31885: FOR_TO
31886: IFFALSE 32085
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31888: LD_ADDR_VAR 0 3
31892: PUSH
31893: LD_INT 10
31895: PUSH
31896: LD_INT 20
31898: PUSH
31899: LD_INT 30
31901: PUSH
31902: LD_INT 40
31904: PUSH
31905: LD_INT 50
31907: PUSH
31908: LD_INT 60
31910: PUSH
31911: LD_INT 70
31913: PUSH
31914: LD_INT 80
31916: PUSH
31917: LD_INT 90
31919: PUSH
31920: LD_INT 100
31922: PUSH
31923: LD_INT 110
31925: PUSH
31926: LD_INT 120
31928: PUSH
31929: LD_INT 130
31931: PUSH
31932: LD_INT 140
31934: PUSH
31935: LD_INT 150
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: PPUSH
31958: LD_INT 15
31960: PPUSH
31961: CALL_OW 12
31965: ARRAY
31966: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31967: LD_ADDR_VAR 0 4
31971: PUSH
31972: LD_INT 10
31974: PUSH
31975: LD_INT 20
31977: PUSH
31978: LD_INT 30
31980: PUSH
31981: LD_INT 40
31983: PUSH
31984: LD_INT 50
31986: PUSH
31987: LD_INT 60
31989: PUSH
31990: LD_INT 70
31992: PUSH
31993: LD_INT 80
31995: PUSH
31996: LD_INT 90
31998: PUSH
31999: LD_INT 100
32001: PUSH
32002: LD_INT 110
32004: PUSH
32005: LD_INT 120
32007: PUSH
32008: LD_INT 130
32010: PUSH
32011: LD_INT 140
32013: PUSH
32014: LD_INT 150
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: PPUSH
32037: LD_INT 15
32039: PPUSH
32040: CALL_OW 12
32044: ARRAY
32045: ST_TO_ADDR
// if ValidHex ( x , y ) then
32046: LD_VAR 0 3
32050: PPUSH
32051: LD_VAR 0 4
32055: PPUSH
32056: CALL_OW 488
32060: IFFALSE 32083
// begin result := [ x , y ] ;
32062: LD_ADDR_VAR 0 1
32066: PUSH
32067: LD_VAR 0 3
32071: PUSH
32072: LD_VAR 0 4
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: ST_TO_ADDR
// break ;
32081: GO 32085
// end ; end ;
32083: GO 31885
32085: POP
32086: POP
// if result then
32087: LD_VAR 0 1
32091: IFFALSE 32151
// begin ToLua ( playSibBomb() ) ;
32093: LD_STRING playSibBomb()
32095: PPUSH
32096: CALL_OW 559
// wait ( 0 0$14 ) ;
32100: LD_INT 490
32102: PPUSH
32103: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
32107: LD_VAR 0 1
32111: PUSH
32112: LD_INT 1
32114: ARRAY
32115: PPUSH
32116: LD_VAR 0 1
32120: PUSH
32121: LD_INT 2
32123: ARRAY
32124: PPUSH
32125: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
32129: LD_VAR 0 1
32133: PUSH
32134: LD_INT 1
32136: ARRAY
32137: PPUSH
32138: LD_VAR 0 1
32142: PUSH
32143: LD_INT 2
32145: ARRAY
32146: PPUSH
32147: CALL_OW 429
// end ; end ;
32151: LD_VAR 0 1
32155: RET
// every 0 0$1 trigger StreamModeActive and sReset do
32156: LD_EXP 66
32160: PUSH
32161: LD_EXP 88
32165: AND
32166: IFFALSE 32178
32168: GO 32170
32170: DISABLE
// YouLost (  ) ;
32171: LD_STRING 
32173: PPUSH
32174: CALL_OW 104
32178: END
// every 0 0$1 trigger StreamModeActive and sFog do
32179: LD_EXP 66
32183: PUSH
32184: LD_EXP 87
32188: AND
32189: IFFALSE 32203
32191: GO 32193
32193: DISABLE
// FogOff ( your_side ) ;
32194: LD_OWVAR 2
32198: PPUSH
32199: CALL_OW 344
32203: END
// every 0 0$1 trigger StreamModeActive and sSun do
32204: LD_EXP 66
32208: PUSH
32209: LD_EXP 89
32213: AND
32214: IFFALSE 32242
32216: GO 32218
32218: DISABLE
// begin solar_recharge_percent := 0 ;
32219: LD_ADDR_OWVAR 79
32223: PUSH
32224: LD_INT 0
32226: ST_TO_ADDR
// wait ( 5 5$00 ) ;
32227: LD_INT 10500
32229: PPUSH
32230: CALL_OW 67
// solar_recharge_percent := 100 ;
32234: LD_ADDR_OWVAR 79
32238: PUSH
32239: LD_INT 100
32241: ST_TO_ADDR
// end ;
32242: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
32243: LD_EXP 66
32247: PUSH
32248: LD_EXP 90
32252: AND
32253: IFFALSE 32492
32255: GO 32257
32257: DISABLE
32258: LD_INT 0
32260: PPUSH
32261: PPUSH
32262: PPUSH
// begin tmp := [ ] ;
32263: LD_ADDR_VAR 0 3
32267: PUSH
32268: EMPTY
32269: ST_TO_ADDR
// for i := 1 to 6 do
32270: LD_ADDR_VAR 0 1
32274: PUSH
32275: DOUBLE
32276: LD_INT 1
32278: DEC
32279: ST_TO_ADDR
32280: LD_INT 6
32282: PUSH
32283: FOR_TO
32284: IFFALSE 32389
// begin uc_nation := nation_nature ;
32286: LD_ADDR_OWVAR 21
32290: PUSH
32291: LD_INT 0
32293: ST_TO_ADDR
// uc_side := 0 ;
32294: LD_ADDR_OWVAR 20
32298: PUSH
32299: LD_INT 0
32301: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
32302: LD_ADDR_OWVAR 29
32306: PUSH
32307: LD_INT 12
32309: PUSH
32310: LD_INT 12
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: ST_TO_ADDR
// hc_agressivity := 20 ;
32317: LD_ADDR_OWVAR 35
32321: PUSH
32322: LD_INT 20
32324: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
32325: LD_ADDR_OWVAR 28
32329: PUSH
32330: LD_INT 17
32332: ST_TO_ADDR
// hc_gallery :=  ;
32333: LD_ADDR_OWVAR 33
32337: PUSH
32338: LD_STRING 
32340: ST_TO_ADDR
// hc_name :=  ;
32341: LD_ADDR_OWVAR 26
32345: PUSH
32346: LD_STRING 
32348: ST_TO_ADDR
// un := CreateHuman ;
32349: LD_ADDR_VAR 0 2
32353: PUSH
32354: CALL_OW 44
32358: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
32359: LD_VAR 0 2
32363: PPUSH
32364: LD_INT 1
32366: PPUSH
32367: CALL_OW 51
// tmp := tmp ^ un ;
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: LD_VAR 0 3
32380: PUSH
32381: LD_VAR 0 2
32385: ADD
32386: ST_TO_ADDR
// end ;
32387: GO 32283
32389: POP
32390: POP
// repeat wait ( 0 0$1 ) ;
32391: LD_INT 35
32393: PPUSH
32394: CALL_OW 67
// for un in tmp do
32398: LD_ADDR_VAR 0 2
32402: PUSH
32403: LD_VAR 0 3
32407: PUSH
32408: FOR_IN
32409: IFFALSE 32483
// begin if IsDead ( un ) then
32411: LD_VAR 0 2
32415: PPUSH
32416: CALL_OW 301
32420: IFFALSE 32440
// begin tmp := tmp diff un ;
32422: LD_ADDR_VAR 0 3
32426: PUSH
32427: LD_VAR 0 3
32431: PUSH
32432: LD_VAR 0 2
32436: DIFF
32437: ST_TO_ADDR
// continue ;
32438: GO 32408
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
32440: LD_VAR 0 2
32444: PPUSH
32445: LD_INT 3
32447: PUSH
32448: LD_INT 22
32450: PUSH
32451: LD_INT 0
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PPUSH
32462: CALL_OW 69
32466: PPUSH
32467: LD_VAR 0 2
32471: PPUSH
32472: CALL_OW 74
32476: PPUSH
32477: CALL_OW 115
// end ;
32481: GO 32408
32483: POP
32484: POP
// until not tmp ;
32485: LD_VAR 0 3
32489: NOT
32490: IFFALSE 32391
// end ;
32492: PPOPN 3
32494: END
// every 0 0$1 trigger StreamModeActive and sTroll do
32495: LD_EXP 66
32499: PUSH
32500: LD_EXP 91
32504: AND
32505: IFFALSE 32559
32507: GO 32509
32509: DISABLE
// begin ToLua ( displayTroll(); ) ;
32510: LD_STRING displayTroll();
32512: PPUSH
32513: CALL_OW 559
// wait ( 3 3$00 ) ;
32517: LD_INT 6300
32519: PPUSH
32520: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32524: LD_STRING hideTroll();
32526: PPUSH
32527: CALL_OW 559
// wait ( 1 1$00 ) ;
32531: LD_INT 2100
32533: PPUSH
32534: CALL_OW 67
// ToLua ( displayTroll(); ) ;
32538: LD_STRING displayTroll();
32540: PPUSH
32541: CALL_OW 559
// wait ( 1 1$00 ) ;
32545: LD_INT 2100
32547: PPUSH
32548: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32552: LD_STRING hideTroll();
32554: PPUSH
32555: CALL_OW 559
// end ;
32559: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32560: LD_EXP 66
32564: PUSH
32565: LD_EXP 92
32569: AND
32570: IFFALSE 32633
32572: GO 32574
32574: DISABLE
32575: LD_INT 0
32577: PPUSH
// begin p := 0 ;
32578: LD_ADDR_VAR 0 1
32582: PUSH
32583: LD_INT 0
32585: ST_TO_ADDR
// repeat game_speed := 1 ;
32586: LD_ADDR_OWVAR 65
32590: PUSH
32591: LD_INT 1
32593: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32594: LD_INT 35
32596: PPUSH
32597: CALL_OW 67
// p := p + 1 ;
32601: LD_ADDR_VAR 0 1
32605: PUSH
32606: LD_VAR 0 1
32610: PUSH
32611: LD_INT 1
32613: PLUS
32614: ST_TO_ADDR
// until p >= 60 ;
32615: LD_VAR 0 1
32619: PUSH
32620: LD_INT 60
32622: GREATEREQUAL
32623: IFFALSE 32586
// game_speed := 4 ;
32625: LD_ADDR_OWVAR 65
32629: PUSH
32630: LD_INT 4
32632: ST_TO_ADDR
// end ;
32633: PPOPN 1
32635: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32636: LD_EXP 66
32640: PUSH
32641: LD_EXP 93
32645: AND
32646: IFFALSE 32792
32648: GO 32650
32650: DISABLE
32651: LD_INT 0
32653: PPUSH
32654: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32655: LD_ADDR_VAR 0 1
32659: PUSH
32660: LD_INT 22
32662: PUSH
32663: LD_OWVAR 2
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 30
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 30
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PPUSH
32704: CALL_OW 69
32708: ST_TO_ADDR
// if not depot then
32709: LD_VAR 0 1
32713: NOT
32714: IFFALSE 32718
// exit ;
32716: GO 32792
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32718: LD_ADDR_VAR 0 2
32722: PUSH
32723: LD_VAR 0 1
32727: PUSH
32728: LD_INT 1
32730: PPUSH
32731: LD_VAR 0 1
32735: PPUSH
32736: CALL_OW 12
32740: ARRAY
32741: PPUSH
32742: CALL_OW 274
32746: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32747: LD_VAR 0 2
32751: PPUSH
32752: LD_INT 1
32754: PPUSH
32755: LD_INT 0
32757: PPUSH
32758: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32762: LD_VAR 0 2
32766: PPUSH
32767: LD_INT 2
32769: PPUSH
32770: LD_INT 0
32772: PPUSH
32773: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32777: LD_VAR 0 2
32781: PPUSH
32782: LD_INT 3
32784: PPUSH
32785: LD_INT 0
32787: PPUSH
32788: CALL_OW 277
// end ;
32792: PPOPN 2
32794: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32795: LD_EXP 66
32799: PUSH
32800: LD_EXP 94
32804: AND
32805: IFFALSE 32902
32807: GO 32809
32809: DISABLE
32810: LD_INT 0
32812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32813: LD_ADDR_VAR 0 1
32817: PUSH
32818: LD_INT 22
32820: PUSH
32821: LD_OWVAR 2
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 21
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: LD_INT 23
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: PPUSH
32862: CALL_OW 69
32866: ST_TO_ADDR
// if not tmp then
32867: LD_VAR 0 1
32871: NOT
32872: IFFALSE 32876
// exit ;
32874: GO 32902
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32876: LD_VAR 0 1
32880: PUSH
32881: LD_INT 1
32883: PPUSH
32884: LD_VAR 0 1
32888: PPUSH
32889: CALL_OW 12
32893: ARRAY
32894: PPUSH
32895: LD_INT 200
32897: PPUSH
32898: CALL_OW 234
// end ;
32902: PPOPN 1
32904: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32905: LD_EXP 66
32909: PUSH
32910: LD_EXP 95
32914: AND
32915: IFFALSE 32994
32917: GO 32919
32919: DISABLE
32920: LD_INT 0
32922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32923: LD_ADDR_VAR 0 1
32927: PUSH
32928: LD_INT 22
32930: PUSH
32931: LD_OWVAR 2
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 21
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PPUSH
32954: CALL_OW 69
32958: ST_TO_ADDR
// if not tmp then
32959: LD_VAR 0 1
32963: NOT
32964: IFFALSE 32968
// exit ;
32966: GO 32994
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32968: LD_VAR 0 1
32972: PUSH
32973: LD_INT 1
32975: PPUSH
32976: LD_VAR 0 1
32980: PPUSH
32981: CALL_OW 12
32985: ARRAY
32986: PPUSH
32987: LD_INT 60
32989: PPUSH
32990: CALL_OW 234
// end ;
32994: PPOPN 1
32996: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32997: LD_EXP 66
33001: PUSH
33002: LD_EXP 96
33006: AND
33007: IFFALSE 33106
33009: GO 33011
33011: DISABLE
33012: LD_INT 0
33014: PPUSH
33015: PPUSH
// begin enable ;
33016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
33017: LD_ADDR_VAR 0 1
33021: PUSH
33022: LD_INT 22
33024: PUSH
33025: LD_OWVAR 2
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 61
33036: PUSH
33037: EMPTY
33038: LIST
33039: PUSH
33040: LD_INT 33
33042: PUSH
33043: LD_INT 2
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: PPUSH
33055: CALL_OW 69
33059: ST_TO_ADDR
// if not tmp then
33060: LD_VAR 0 1
33064: NOT
33065: IFFALSE 33069
// exit ;
33067: GO 33106
// for i in tmp do
33069: LD_ADDR_VAR 0 2
33073: PUSH
33074: LD_VAR 0 1
33078: PUSH
33079: FOR_IN
33080: IFFALSE 33104
// if IsControledBy ( i ) then
33082: LD_VAR 0 2
33086: PPUSH
33087: CALL_OW 312
33091: IFFALSE 33102
// ComUnlink ( i ) ;
33093: LD_VAR 0 2
33097: PPUSH
33098: CALL_OW 136
33102: GO 33079
33104: POP
33105: POP
// end ;
33106: PPOPN 2
33108: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
33109: LD_EXP 66
33113: PUSH
33114: LD_EXP 97
33118: AND
33119: IFFALSE 33259
33121: GO 33123
33123: DISABLE
33124: LD_INT 0
33126: PPUSH
33127: PPUSH
// begin ToLua ( displayPowell(); ) ;
33128: LD_STRING displayPowell();
33130: PPUSH
33131: CALL_OW 559
// uc_side := 0 ;
33135: LD_ADDR_OWVAR 20
33139: PUSH
33140: LD_INT 0
33142: ST_TO_ADDR
// uc_nation := 2 ;
33143: LD_ADDR_OWVAR 21
33147: PUSH
33148: LD_INT 2
33150: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33151: LD_ADDR_OWVAR 37
33155: PUSH
33156: LD_INT 14
33158: ST_TO_ADDR
// vc_engine := engine_siberite ;
33159: LD_ADDR_OWVAR 39
33163: PUSH
33164: LD_INT 3
33166: ST_TO_ADDR
// vc_control := control_apeman ;
33167: LD_ADDR_OWVAR 38
33171: PUSH
33172: LD_INT 5
33174: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
33175: LD_ADDR_OWVAR 40
33179: PUSH
33180: LD_INT 29
33182: ST_TO_ADDR
// un := CreateVehicle ;
33183: LD_ADDR_VAR 0 2
33187: PUSH
33188: CALL_OW 45
33192: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33193: LD_VAR 0 2
33197: PPUSH
33198: LD_INT 1
33200: PPUSH
33201: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33205: LD_INT 35
33207: PPUSH
33208: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33212: LD_VAR 0 2
33216: PPUSH
33217: LD_INT 22
33219: PUSH
33220: LD_OWVAR 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PPUSH
33229: CALL_OW 69
33233: PPUSH
33234: LD_VAR 0 2
33238: PPUSH
33239: CALL_OW 74
33243: PPUSH
33244: CALL_OW 115
// until IsDead ( un ) ;
33248: LD_VAR 0 2
33252: PPUSH
33253: CALL_OW 301
33257: IFFALSE 33205
// end ;
33259: PPOPN 2
33261: END
// every 0 0$1 trigger StreamModeActive and sStu do
33262: LD_EXP 66
33266: PUSH
33267: LD_EXP 105
33271: AND
33272: IFFALSE 33288
33274: GO 33276
33276: DISABLE
// begin ToLua ( displayStucuk(); ) ;
33277: LD_STRING displayStucuk();
33279: PPUSH
33280: CALL_OW 559
// ResetFog ;
33284: CALL_OW 335
// end ;
33288: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
33289: LD_EXP 66
33293: PUSH
33294: LD_EXP 98
33298: AND
33299: IFFALSE 33440
33301: GO 33303
33303: DISABLE
33304: LD_INT 0
33306: PPUSH
33307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33308: LD_ADDR_VAR 0 2
33312: PUSH
33313: LD_INT 22
33315: PUSH
33316: LD_OWVAR 2
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 21
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PPUSH
33339: CALL_OW 69
33343: ST_TO_ADDR
// if not tmp then
33344: LD_VAR 0 2
33348: NOT
33349: IFFALSE 33353
// exit ;
33351: GO 33440
// un := tmp [ rand ( 1 , tmp ) ] ;
33353: LD_ADDR_VAR 0 1
33357: PUSH
33358: LD_VAR 0 2
33362: PUSH
33363: LD_INT 1
33365: PPUSH
33366: LD_VAR 0 2
33370: PPUSH
33371: CALL_OW 12
33375: ARRAY
33376: ST_TO_ADDR
// SetSide ( un , 0 ) ;
33377: LD_VAR 0 1
33381: PPUSH
33382: LD_INT 0
33384: PPUSH
33385: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
33389: LD_VAR 0 1
33393: PPUSH
33394: LD_OWVAR 3
33398: PUSH
33399: LD_VAR 0 1
33403: DIFF
33404: PPUSH
33405: LD_VAR 0 1
33409: PPUSH
33410: CALL_OW 74
33414: PPUSH
33415: CALL_OW 115
// wait ( 0 0$20 ) ;
33419: LD_INT 700
33421: PPUSH
33422: CALL_OW 67
// SetSide ( un , your_side ) ;
33426: LD_VAR 0 1
33430: PPUSH
33431: LD_OWVAR 2
33435: PPUSH
33436: CALL_OW 235
// end ;
33440: PPOPN 2
33442: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
33443: LD_EXP 66
33447: PUSH
33448: LD_EXP 99
33452: AND
33453: IFFALSE 33559
33455: GO 33457
33457: DISABLE
33458: LD_INT 0
33460: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33461: LD_ADDR_VAR 0 1
33465: PUSH
33466: LD_INT 22
33468: PUSH
33469: LD_OWVAR 2
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 2
33480: PUSH
33481: LD_INT 30
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 30
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: LIST
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PPUSH
33510: CALL_OW 69
33514: ST_TO_ADDR
// if not depot then
33515: LD_VAR 0 1
33519: NOT
33520: IFFALSE 33524
// exit ;
33522: GO 33559
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
33524: LD_VAR 0 1
33528: PUSH
33529: LD_INT 1
33531: ARRAY
33532: PPUSH
33533: CALL_OW 250
33537: PPUSH
33538: LD_VAR 0 1
33542: PUSH
33543: LD_INT 1
33545: ARRAY
33546: PPUSH
33547: CALL_OW 251
33551: PPUSH
33552: LD_INT 70
33554: PPUSH
33555: CALL_OW 495
// end ;
33559: PPOPN 1
33561: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33562: LD_EXP 66
33566: PUSH
33567: LD_EXP 100
33571: AND
33572: IFFALSE 33783
33574: GO 33576
33576: DISABLE
33577: LD_INT 0
33579: PPUSH
33580: PPUSH
33581: PPUSH
33582: PPUSH
33583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33584: LD_ADDR_VAR 0 5
33588: PUSH
33589: LD_INT 22
33591: PUSH
33592: LD_OWVAR 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 21
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PPUSH
33615: CALL_OW 69
33619: ST_TO_ADDR
// if not tmp then
33620: LD_VAR 0 5
33624: NOT
33625: IFFALSE 33629
// exit ;
33627: GO 33783
// for i in tmp do
33629: LD_ADDR_VAR 0 1
33633: PUSH
33634: LD_VAR 0 5
33638: PUSH
33639: FOR_IN
33640: IFFALSE 33781
// begin d := rand ( 0 , 5 ) ;
33642: LD_ADDR_VAR 0 4
33646: PUSH
33647: LD_INT 0
33649: PPUSH
33650: LD_INT 5
33652: PPUSH
33653: CALL_OW 12
33657: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33658: LD_ADDR_VAR 0 2
33662: PUSH
33663: LD_VAR 0 1
33667: PPUSH
33668: CALL_OW 250
33672: PPUSH
33673: LD_VAR 0 4
33677: PPUSH
33678: LD_INT 3
33680: PPUSH
33681: LD_INT 12
33683: PPUSH
33684: CALL_OW 12
33688: PPUSH
33689: CALL_OW 272
33693: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33694: LD_ADDR_VAR 0 3
33698: PUSH
33699: LD_VAR 0 1
33703: PPUSH
33704: CALL_OW 251
33708: PPUSH
33709: LD_VAR 0 4
33713: PPUSH
33714: LD_INT 3
33716: PPUSH
33717: LD_INT 12
33719: PPUSH
33720: CALL_OW 12
33724: PPUSH
33725: CALL_OW 273
33729: ST_TO_ADDR
// if ValidHex ( x , y ) then
33730: LD_VAR 0 2
33734: PPUSH
33735: LD_VAR 0 3
33739: PPUSH
33740: CALL_OW 488
33744: IFFALSE 33779
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33746: LD_VAR 0 1
33750: PPUSH
33751: LD_VAR 0 2
33755: PPUSH
33756: LD_VAR 0 3
33760: PPUSH
33761: LD_INT 3
33763: PPUSH
33764: LD_INT 6
33766: PPUSH
33767: CALL_OW 12
33771: PPUSH
33772: LD_INT 1
33774: PPUSH
33775: CALL_OW 483
// end ;
33779: GO 33639
33781: POP
33782: POP
// end ;
33783: PPOPN 5
33785: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33786: LD_EXP 66
33790: PUSH
33791: LD_EXP 101
33795: AND
33796: IFFALSE 33890
33798: GO 33800
33800: DISABLE
33801: LD_INT 0
33803: PPUSH
33804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33805: LD_ADDR_VAR 0 2
33809: PUSH
33810: LD_INT 22
33812: PUSH
33813: LD_OWVAR 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 32
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 21
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: LIST
33846: PPUSH
33847: CALL_OW 69
33851: ST_TO_ADDR
// if not tmp then
33852: LD_VAR 0 2
33856: NOT
33857: IFFALSE 33861
// exit ;
33859: GO 33890
// for i in tmp do
33861: LD_ADDR_VAR 0 1
33865: PUSH
33866: LD_VAR 0 2
33870: PUSH
33871: FOR_IN
33872: IFFALSE 33888
// SetFuel ( i , 0 ) ;
33874: LD_VAR 0 1
33878: PPUSH
33879: LD_INT 0
33881: PPUSH
33882: CALL_OW 240
33886: GO 33871
33888: POP
33889: POP
// end ;
33890: PPOPN 2
33892: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33893: LD_EXP 66
33897: PUSH
33898: LD_EXP 102
33902: AND
33903: IFFALSE 33969
33905: GO 33907
33907: DISABLE
33908: LD_INT 0
33910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33911: LD_ADDR_VAR 0 1
33915: PUSH
33916: LD_INT 22
33918: PUSH
33919: LD_OWVAR 2
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 30
33930: PUSH
33931: LD_INT 29
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PPUSH
33942: CALL_OW 69
33946: ST_TO_ADDR
// if not tmp then
33947: LD_VAR 0 1
33951: NOT
33952: IFFALSE 33956
// exit ;
33954: GO 33969
// DestroyUnit ( tmp [ 1 ] ) ;
33956: LD_VAR 0 1
33960: PUSH
33961: LD_INT 1
33963: ARRAY
33964: PPUSH
33965: CALL_OW 65
// end ;
33969: PPOPN 1
33971: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33972: LD_EXP 66
33976: PUSH
33977: LD_EXP 104
33981: AND
33982: IFFALSE 34111
33984: GO 33986
33986: DISABLE
33987: LD_INT 0
33989: PPUSH
// begin uc_side := 0 ;
33990: LD_ADDR_OWVAR 20
33994: PUSH
33995: LD_INT 0
33997: ST_TO_ADDR
// uc_nation := nation_arabian ;
33998: LD_ADDR_OWVAR 21
34002: PUSH
34003: LD_INT 2
34005: ST_TO_ADDR
// hc_gallery :=  ;
34006: LD_ADDR_OWVAR 33
34010: PUSH
34011: LD_STRING 
34013: ST_TO_ADDR
// hc_name :=  ;
34014: LD_ADDR_OWVAR 26
34018: PUSH
34019: LD_STRING 
34021: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
34022: LD_INT 1
34024: PPUSH
34025: LD_INT 11
34027: PPUSH
34028: LD_INT 10
34030: PPUSH
34031: CALL_OW 380
// un := CreateHuman ;
34035: LD_ADDR_VAR 0 1
34039: PUSH
34040: CALL_OW 44
34044: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34045: LD_VAR 0 1
34049: PPUSH
34050: LD_INT 1
34052: PPUSH
34053: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
34057: LD_INT 35
34059: PPUSH
34060: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
34064: LD_VAR 0 1
34068: PPUSH
34069: LD_INT 22
34071: PUSH
34072: LD_OWVAR 2
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PPUSH
34081: CALL_OW 69
34085: PPUSH
34086: LD_VAR 0 1
34090: PPUSH
34091: CALL_OW 74
34095: PPUSH
34096: CALL_OW 115
// until IsDead ( un ) ;
34100: LD_VAR 0 1
34104: PPUSH
34105: CALL_OW 301
34109: IFFALSE 34057
// end ;
34111: PPOPN 1
34113: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
34114: LD_EXP 66
34118: PUSH
34119: LD_EXP 106
34123: AND
34124: IFFALSE 34136
34126: GO 34128
34128: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
34129: LD_STRING earthquake(getX(game), 0, 32)
34131: PPUSH
34132: CALL_OW 559
34136: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
34137: LD_EXP 66
34141: PUSH
34142: LD_EXP 107
34146: AND
34147: IFFALSE 34238
34149: GO 34151
34151: DISABLE
34152: LD_INT 0
34154: PPUSH
// begin enable ;
34155: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
34156: LD_ADDR_VAR 0 1
34160: PUSH
34161: LD_INT 22
34163: PUSH
34164: LD_OWVAR 2
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 21
34175: PUSH
34176: LD_INT 2
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 33
34185: PUSH
34186: LD_INT 3
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: PPUSH
34198: CALL_OW 69
34202: ST_TO_ADDR
// if not tmp then
34203: LD_VAR 0 1
34207: NOT
34208: IFFALSE 34212
// exit ;
34210: GO 34238
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34212: LD_VAR 0 1
34216: PUSH
34217: LD_INT 1
34219: PPUSH
34220: LD_VAR 0 1
34224: PPUSH
34225: CALL_OW 12
34229: ARRAY
34230: PPUSH
34231: LD_INT 1
34233: PPUSH
34234: CALL_OW 234
// end ;
34238: PPOPN 1
34240: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
34241: LD_EXP 66
34245: PUSH
34246: LD_EXP 108
34250: AND
34251: IFFALSE 34392
34253: GO 34255
34255: DISABLE
34256: LD_INT 0
34258: PPUSH
34259: PPUSH
34260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34261: LD_ADDR_VAR 0 3
34265: PUSH
34266: LD_INT 22
34268: PUSH
34269: LD_OWVAR 2
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 25
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PPUSH
34292: CALL_OW 69
34296: ST_TO_ADDR
// if not tmp then
34297: LD_VAR 0 3
34301: NOT
34302: IFFALSE 34306
// exit ;
34304: GO 34392
// un := tmp [ rand ( 1 , tmp ) ] ;
34306: LD_ADDR_VAR 0 2
34310: PUSH
34311: LD_VAR 0 3
34315: PUSH
34316: LD_INT 1
34318: PPUSH
34319: LD_VAR 0 3
34323: PPUSH
34324: CALL_OW 12
34328: ARRAY
34329: ST_TO_ADDR
// if Crawls ( un ) then
34330: LD_VAR 0 2
34334: PPUSH
34335: CALL_OW 318
34339: IFFALSE 34350
// ComWalk ( un ) ;
34341: LD_VAR 0 2
34345: PPUSH
34346: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
34350: LD_VAR 0 2
34354: PPUSH
34355: LD_INT 9
34357: PPUSH
34358: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
34362: LD_INT 28
34364: PPUSH
34365: LD_OWVAR 2
34369: PPUSH
34370: LD_INT 2
34372: PPUSH
34373: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
34377: LD_INT 29
34379: PPUSH
34380: LD_OWVAR 2
34384: PPUSH
34385: LD_INT 2
34387: PPUSH
34388: CALL_OW 322
// end ;
34392: PPOPN 3
34394: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
34395: LD_EXP 66
34399: PUSH
34400: LD_EXP 109
34404: AND
34405: IFFALSE 34516
34407: GO 34409
34409: DISABLE
34410: LD_INT 0
34412: PPUSH
34413: PPUSH
34414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_INT 22
34422: PUSH
34423: LD_OWVAR 2
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 25
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PPUSH
34446: CALL_OW 69
34450: ST_TO_ADDR
// if not tmp then
34451: LD_VAR 0 3
34455: NOT
34456: IFFALSE 34460
// exit ;
34458: GO 34516
// un := tmp [ rand ( 1 , tmp ) ] ;
34460: LD_ADDR_VAR 0 2
34464: PUSH
34465: LD_VAR 0 3
34469: PUSH
34470: LD_INT 1
34472: PPUSH
34473: LD_VAR 0 3
34477: PPUSH
34478: CALL_OW 12
34482: ARRAY
34483: ST_TO_ADDR
// if Crawls ( un ) then
34484: LD_VAR 0 2
34488: PPUSH
34489: CALL_OW 318
34493: IFFALSE 34504
// ComWalk ( un ) ;
34495: LD_VAR 0 2
34499: PPUSH
34500: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34504: LD_VAR 0 2
34508: PPUSH
34509: LD_INT 8
34511: PPUSH
34512: CALL_OW 336
// end ;
34516: PPOPN 3
34518: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
34519: LD_EXP 66
34523: PUSH
34524: LD_EXP 110
34528: AND
34529: IFFALSE 34673
34531: GO 34533
34533: DISABLE
34534: LD_INT 0
34536: PPUSH
34537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
34538: LD_ADDR_VAR 0 2
34542: PUSH
34543: LD_INT 22
34545: PUSH
34546: LD_OWVAR 2
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 21
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: LD_INT 34
34570: PUSH
34571: LD_INT 12
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 34
34580: PUSH
34581: LD_INT 51
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 34
34590: PUSH
34591: LD_INT 32
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: PPUSH
34609: CALL_OW 69
34613: ST_TO_ADDR
// if not tmp then
34614: LD_VAR 0 2
34618: NOT
34619: IFFALSE 34623
// exit ;
34621: GO 34673
// for i in tmp do
34623: LD_ADDR_VAR 0 1
34627: PUSH
34628: LD_VAR 0 2
34632: PUSH
34633: FOR_IN
34634: IFFALSE 34671
// if GetCargo ( i , mat_artifact ) = 0 then
34636: LD_VAR 0 1
34640: PPUSH
34641: LD_INT 4
34643: PPUSH
34644: CALL_OW 289
34648: PUSH
34649: LD_INT 0
34651: EQUAL
34652: IFFALSE 34669
// SetCargo ( i , mat_siberit , 100 ) ;
34654: LD_VAR 0 1
34658: PPUSH
34659: LD_INT 3
34661: PPUSH
34662: LD_INT 100
34664: PPUSH
34665: CALL_OW 290
34669: GO 34633
34671: POP
34672: POP
// end ;
34673: PPOPN 2
34675: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34676: LD_EXP 66
34680: PUSH
34681: LD_EXP 111
34685: AND
34686: IFFALSE 34869
34688: GO 34690
34690: DISABLE
34691: LD_INT 0
34693: PPUSH
34694: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34695: LD_ADDR_VAR 0 2
34699: PUSH
34700: LD_INT 22
34702: PUSH
34703: LD_OWVAR 2
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PPUSH
34712: CALL_OW 69
34716: ST_TO_ADDR
// if not tmp then
34717: LD_VAR 0 2
34721: NOT
34722: IFFALSE 34726
// exit ;
34724: GO 34869
// for i := 1 to 2 do
34726: LD_ADDR_VAR 0 1
34730: PUSH
34731: DOUBLE
34732: LD_INT 1
34734: DEC
34735: ST_TO_ADDR
34736: LD_INT 2
34738: PUSH
34739: FOR_TO
34740: IFFALSE 34867
// begin uc_side := your_side ;
34742: LD_ADDR_OWVAR 20
34746: PUSH
34747: LD_OWVAR 2
34751: ST_TO_ADDR
// uc_nation := nation_american ;
34752: LD_ADDR_OWVAR 21
34756: PUSH
34757: LD_INT 1
34759: ST_TO_ADDR
// vc_chassis := us_morphling ;
34760: LD_ADDR_OWVAR 37
34764: PUSH
34765: LD_INT 5
34767: ST_TO_ADDR
// vc_engine := engine_siberite ;
34768: LD_ADDR_OWVAR 39
34772: PUSH
34773: LD_INT 3
34775: ST_TO_ADDR
// vc_control := control_computer ;
34776: LD_ADDR_OWVAR 38
34780: PUSH
34781: LD_INT 3
34783: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34784: LD_ADDR_OWVAR 40
34788: PUSH
34789: LD_INT 10
34791: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34792: LD_VAR 0 2
34796: PUSH
34797: LD_INT 1
34799: ARRAY
34800: PPUSH
34801: CALL_OW 310
34805: NOT
34806: IFFALSE 34853
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34808: CALL_OW 45
34812: PPUSH
34813: LD_VAR 0 2
34817: PUSH
34818: LD_INT 1
34820: ARRAY
34821: PPUSH
34822: CALL_OW 250
34826: PPUSH
34827: LD_VAR 0 2
34831: PUSH
34832: LD_INT 1
34834: ARRAY
34835: PPUSH
34836: CALL_OW 251
34840: PPUSH
34841: LD_INT 12
34843: PPUSH
34844: LD_INT 1
34846: PPUSH
34847: CALL_OW 50
34851: GO 34865
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34853: CALL_OW 45
34857: PPUSH
34858: LD_INT 1
34860: PPUSH
34861: CALL_OW 51
// end ;
34865: GO 34739
34867: POP
34868: POP
// end ;
34869: PPOPN 2
34871: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34872: LD_EXP 66
34876: PUSH
34877: LD_EXP 112
34881: AND
34882: IFFALSE 35104
34884: GO 34886
34886: DISABLE
34887: LD_INT 0
34889: PPUSH
34890: PPUSH
34891: PPUSH
34892: PPUSH
34893: PPUSH
34894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34895: LD_ADDR_VAR 0 6
34899: PUSH
34900: LD_INT 22
34902: PUSH
34903: LD_OWVAR 2
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 21
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 3
34924: PUSH
34925: LD_INT 23
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: LIST
34943: PPUSH
34944: CALL_OW 69
34948: ST_TO_ADDR
// if not tmp then
34949: LD_VAR 0 6
34953: NOT
34954: IFFALSE 34958
// exit ;
34956: GO 35104
// s1 := rand ( 1 , 4 ) ;
34958: LD_ADDR_VAR 0 2
34962: PUSH
34963: LD_INT 1
34965: PPUSH
34966: LD_INT 4
34968: PPUSH
34969: CALL_OW 12
34973: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34974: LD_ADDR_VAR 0 4
34978: PUSH
34979: LD_VAR 0 6
34983: PUSH
34984: LD_INT 1
34986: ARRAY
34987: PPUSH
34988: LD_VAR 0 2
34992: PPUSH
34993: CALL_OW 259
34997: ST_TO_ADDR
// if s1 = 1 then
34998: LD_VAR 0 2
35002: PUSH
35003: LD_INT 1
35005: EQUAL
35006: IFFALSE 35026
// s2 := rand ( 2 , 4 ) else
35008: LD_ADDR_VAR 0 3
35012: PUSH
35013: LD_INT 2
35015: PPUSH
35016: LD_INT 4
35018: PPUSH
35019: CALL_OW 12
35023: ST_TO_ADDR
35024: GO 35034
// s2 := 1 ;
35026: LD_ADDR_VAR 0 3
35030: PUSH
35031: LD_INT 1
35033: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
35034: LD_ADDR_VAR 0 5
35038: PUSH
35039: LD_VAR 0 6
35043: PUSH
35044: LD_INT 1
35046: ARRAY
35047: PPUSH
35048: LD_VAR 0 3
35052: PPUSH
35053: CALL_OW 259
35057: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
35058: LD_VAR 0 6
35062: PUSH
35063: LD_INT 1
35065: ARRAY
35066: PPUSH
35067: LD_VAR 0 2
35071: PPUSH
35072: LD_VAR 0 5
35076: PPUSH
35077: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
35081: LD_VAR 0 6
35085: PUSH
35086: LD_INT 1
35088: ARRAY
35089: PPUSH
35090: LD_VAR 0 3
35094: PPUSH
35095: LD_VAR 0 4
35099: PPUSH
35100: CALL_OW 237
// end ;
35104: PPOPN 6
35106: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
35107: LD_EXP 66
35111: PUSH
35112: LD_EXP 113
35116: AND
35117: IFFALSE 35196
35119: GO 35121
35121: DISABLE
35122: LD_INT 0
35124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
35125: LD_ADDR_VAR 0 1
35129: PUSH
35130: LD_INT 22
35132: PUSH
35133: LD_OWVAR 2
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 30
35144: PUSH
35145: LD_INT 3
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PPUSH
35156: CALL_OW 69
35160: ST_TO_ADDR
// if not tmp then
35161: LD_VAR 0 1
35165: NOT
35166: IFFALSE 35170
// exit ;
35168: GO 35196
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
35170: LD_VAR 0 1
35174: PUSH
35175: LD_INT 1
35177: PPUSH
35178: LD_VAR 0 1
35182: PPUSH
35183: CALL_OW 12
35187: ARRAY
35188: PPUSH
35189: LD_INT 1
35191: PPUSH
35192: CALL_OW 234
// end ;
35196: PPOPN 1
35198: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
35199: LD_EXP 66
35203: PUSH
35204: LD_EXP 114
35208: AND
35209: IFFALSE 35321
35211: GO 35213
35213: DISABLE
35214: LD_INT 0
35216: PPUSH
35217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
35218: LD_ADDR_VAR 0 2
35222: PUSH
35223: LD_INT 22
35225: PUSH
35226: LD_OWVAR 2
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 30
35240: PUSH
35241: LD_INT 27
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 30
35250: PUSH
35251: LD_INT 26
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 30
35260: PUSH
35261: LD_INT 28
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PPUSH
35278: CALL_OW 69
35282: ST_TO_ADDR
// if not tmp then
35283: LD_VAR 0 2
35287: NOT
35288: IFFALSE 35292
// exit ;
35290: GO 35321
// for i in tmp do
35292: LD_ADDR_VAR 0 1
35296: PUSH
35297: LD_VAR 0 2
35301: PUSH
35302: FOR_IN
35303: IFFALSE 35319
// SetLives ( i , 1 ) ;
35305: LD_VAR 0 1
35309: PPUSH
35310: LD_INT 1
35312: PPUSH
35313: CALL_OW 234
35317: GO 35302
35319: POP
35320: POP
// end ;
35321: PPOPN 2
35323: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
35324: LD_EXP 66
35328: PUSH
35329: LD_EXP 115
35333: AND
35334: IFFALSE 35621
35336: GO 35338
35338: DISABLE
35339: LD_INT 0
35341: PPUSH
35342: PPUSH
35343: PPUSH
// begin i := rand ( 1 , 7 ) ;
35344: LD_ADDR_VAR 0 1
35348: PUSH
35349: LD_INT 1
35351: PPUSH
35352: LD_INT 7
35354: PPUSH
35355: CALL_OW 12
35359: ST_TO_ADDR
// case i of 1 :
35360: LD_VAR 0 1
35364: PUSH
35365: LD_INT 1
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35373
35371: GO 35383
35373: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
35374: LD_STRING earthquake(getX(game), 0, 32)
35376: PPUSH
35377: CALL_OW 559
35381: GO 35621
35383: LD_INT 2
35385: DOUBLE
35386: EQUAL
35387: IFTRUE 35391
35389: GO 35405
35391: POP
// begin ToLua ( displayStucuk(); ) ;
35392: LD_STRING displayStucuk();
35394: PPUSH
35395: CALL_OW 559
// ResetFog ;
35399: CALL_OW 335
// end ; 3 :
35403: GO 35621
35405: LD_INT 3
35407: DOUBLE
35408: EQUAL
35409: IFTRUE 35413
35411: GO 35517
35413: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35414: LD_ADDR_VAR 0 2
35418: PUSH
35419: LD_INT 22
35421: PUSH
35422: LD_OWVAR 2
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 25
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PPUSH
35445: CALL_OW 69
35449: ST_TO_ADDR
// if not tmp then
35450: LD_VAR 0 2
35454: NOT
35455: IFFALSE 35459
// exit ;
35457: GO 35621
// un := tmp [ rand ( 1 , tmp ) ] ;
35459: LD_ADDR_VAR 0 3
35463: PUSH
35464: LD_VAR 0 2
35468: PUSH
35469: LD_INT 1
35471: PPUSH
35472: LD_VAR 0 2
35476: PPUSH
35477: CALL_OW 12
35481: ARRAY
35482: ST_TO_ADDR
// if Crawls ( un ) then
35483: LD_VAR 0 3
35487: PPUSH
35488: CALL_OW 318
35492: IFFALSE 35503
// ComWalk ( un ) ;
35494: LD_VAR 0 3
35498: PPUSH
35499: CALL_OW 138
// SetClass ( un , class_mortar ) ;
35503: LD_VAR 0 3
35507: PPUSH
35508: LD_INT 8
35510: PPUSH
35511: CALL_OW 336
// end ; 4 :
35515: GO 35621
35517: LD_INT 4
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35525
35523: GO 35599
35525: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35526: LD_ADDR_VAR 0 2
35530: PUSH
35531: LD_INT 22
35533: PUSH
35534: LD_OWVAR 2
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 30
35545: PUSH
35546: LD_INT 29
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PPUSH
35557: CALL_OW 69
35561: ST_TO_ADDR
// if not tmp then
35562: LD_VAR 0 2
35566: NOT
35567: IFFALSE 35571
// exit ;
35569: GO 35621
// CenterNowOnUnits ( tmp [ 1 ] ) ;
35571: LD_VAR 0 2
35575: PUSH
35576: LD_INT 1
35578: ARRAY
35579: PPUSH
35580: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
35584: LD_VAR 0 2
35588: PUSH
35589: LD_INT 1
35591: ARRAY
35592: PPUSH
35593: CALL_OW 65
// end ; 5 .. 7 :
35597: GO 35621
35599: LD_INT 5
35601: DOUBLE
35602: GREATEREQUAL
35603: IFFALSE 35611
35605: LD_INT 7
35607: DOUBLE
35608: LESSEQUAL
35609: IFTRUE 35613
35611: GO 35620
35613: POP
// StreamSibBomb ; end ;
35614: CALL 31858 0 0
35618: GO 35621
35620: POP
// end ;
35621: PPOPN 3
35623: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35624: LD_EXP 66
35628: PUSH
35629: LD_EXP 116
35633: AND
35634: IFFALSE 35790
35636: GO 35638
35638: DISABLE
35639: LD_INT 0
35641: PPUSH
35642: PPUSH
35643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35644: LD_ADDR_VAR 0 2
35648: PUSH
35649: LD_INT 81
35651: PUSH
35652: LD_OWVAR 2
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 2
35663: PUSH
35664: LD_INT 21
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 21
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PPUSH
35693: CALL_OW 69
35697: ST_TO_ADDR
// if not tmp then
35698: LD_VAR 0 2
35702: NOT
35703: IFFALSE 35707
// exit ;
35705: GO 35790
// p := 0 ;
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: LD_INT 0
35714: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35715: LD_INT 35
35717: PPUSH
35718: CALL_OW 67
// p := p + 1 ;
35722: LD_ADDR_VAR 0 3
35726: PUSH
35727: LD_VAR 0 3
35731: PUSH
35732: LD_INT 1
35734: PLUS
35735: ST_TO_ADDR
// for i in tmp do
35736: LD_ADDR_VAR 0 1
35740: PUSH
35741: LD_VAR 0 2
35745: PUSH
35746: FOR_IN
35747: IFFALSE 35778
// if GetLives ( i ) < 1000 then
35749: LD_VAR 0 1
35753: PPUSH
35754: CALL_OW 256
35758: PUSH
35759: LD_INT 1000
35761: LESS
35762: IFFALSE 35776
// SetLives ( i , 1000 ) ;
35764: LD_VAR 0 1
35768: PPUSH
35769: LD_INT 1000
35771: PPUSH
35772: CALL_OW 234
35776: GO 35746
35778: POP
35779: POP
// until p > 20 ;
35780: LD_VAR 0 3
35784: PUSH
35785: LD_INT 20
35787: GREATER
35788: IFFALSE 35715
// end ;
35790: PPOPN 3
35792: END
// every 0 0$1 trigger StreamModeActive and sTime do
35793: LD_EXP 66
35797: PUSH
35798: LD_EXP 117
35802: AND
35803: IFFALSE 35838
35805: GO 35807
35807: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35808: LD_INT 28
35810: PPUSH
35811: LD_OWVAR 2
35815: PPUSH
35816: LD_INT 2
35818: PPUSH
35819: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35823: LD_INT 30
35825: PPUSH
35826: LD_OWVAR 2
35830: PPUSH
35831: LD_INT 2
35833: PPUSH
35834: CALL_OW 322
// end ;
35838: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35839: LD_EXP 66
35843: PUSH
35844: LD_EXP 118
35848: AND
35849: IFFALSE 35970
35851: GO 35853
35853: DISABLE
35854: LD_INT 0
35856: PPUSH
35857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35858: LD_ADDR_VAR 0 2
35862: PUSH
35863: LD_INT 22
35865: PUSH
35866: LD_OWVAR 2
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 21
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 3
35887: PUSH
35888: LD_INT 23
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: PPUSH
35907: CALL_OW 69
35911: ST_TO_ADDR
// if not tmp then
35912: LD_VAR 0 2
35916: NOT
35917: IFFALSE 35921
// exit ;
35919: GO 35970
// for i in tmp do
35921: LD_ADDR_VAR 0 1
35925: PUSH
35926: LD_VAR 0 2
35930: PUSH
35931: FOR_IN
35932: IFFALSE 35968
// begin if Crawls ( i ) then
35934: LD_VAR 0 1
35938: PPUSH
35939: CALL_OW 318
35943: IFFALSE 35954
// ComWalk ( i ) ;
35945: LD_VAR 0 1
35949: PPUSH
35950: CALL_OW 138
// SetClass ( i , 2 ) ;
35954: LD_VAR 0 1
35958: PPUSH
35959: LD_INT 2
35961: PPUSH
35962: CALL_OW 336
// end ;
35966: GO 35931
35968: POP
35969: POP
// end ;
35970: PPOPN 2
35972: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35973: LD_EXP 66
35977: PUSH
35978: LD_EXP 119
35982: AND
35983: IFFALSE 36271
35985: GO 35987
35987: DISABLE
35988: LD_INT 0
35990: PPUSH
35991: PPUSH
35992: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35993: LD_OWVAR 2
35997: PPUSH
35998: LD_INT 9
36000: PPUSH
36001: LD_INT 1
36003: PPUSH
36004: LD_INT 1
36006: PPUSH
36007: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
36011: LD_INT 9
36013: PPUSH
36014: LD_OWVAR 2
36018: PPUSH
36019: CALL_OW 343
// uc_side := 9 ;
36023: LD_ADDR_OWVAR 20
36027: PUSH
36028: LD_INT 9
36030: ST_TO_ADDR
// uc_nation := 2 ;
36031: LD_ADDR_OWVAR 21
36035: PUSH
36036: LD_INT 2
36038: ST_TO_ADDR
// hc_name := Dark Warrior ;
36039: LD_ADDR_OWVAR 26
36043: PUSH
36044: LD_STRING Dark Warrior
36046: ST_TO_ADDR
// hc_gallery :=  ;
36047: LD_ADDR_OWVAR 33
36051: PUSH
36052: LD_STRING 
36054: ST_TO_ADDR
// hc_noskilllimit := true ;
36055: LD_ADDR_OWVAR 76
36059: PUSH
36060: LD_INT 1
36062: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
36063: LD_ADDR_OWVAR 31
36067: PUSH
36068: LD_INT 30
36070: PUSH
36071: LD_INT 30
36073: PUSH
36074: LD_INT 30
36076: PUSH
36077: LD_INT 30
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: ST_TO_ADDR
// un := CreateHuman ;
36086: LD_ADDR_VAR 0 3
36090: PUSH
36091: CALL_OW 44
36095: ST_TO_ADDR
// hc_noskilllimit := false ;
36096: LD_ADDR_OWVAR 76
36100: PUSH
36101: LD_INT 0
36103: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36104: LD_VAR 0 3
36108: PPUSH
36109: LD_INT 1
36111: PPUSH
36112: CALL_OW 51
// ToLua ( playRanger() ) ;
36116: LD_STRING playRanger()
36118: PPUSH
36119: CALL_OW 559
// p := 0 ;
36123: LD_ADDR_VAR 0 2
36127: PUSH
36128: LD_INT 0
36130: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
36131: LD_INT 35
36133: PPUSH
36134: CALL_OW 67
// p := p + 1 ;
36138: LD_ADDR_VAR 0 2
36142: PUSH
36143: LD_VAR 0 2
36147: PUSH
36148: LD_INT 1
36150: PLUS
36151: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
36152: LD_VAR 0 3
36156: PPUSH
36157: CALL_OW 256
36161: PUSH
36162: LD_INT 1000
36164: LESS
36165: IFFALSE 36179
// SetLives ( un , 1000 ) ;
36167: LD_VAR 0 3
36171: PPUSH
36172: LD_INT 1000
36174: PPUSH
36175: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
36179: LD_VAR 0 3
36183: PPUSH
36184: LD_INT 81
36186: PUSH
36187: LD_OWVAR 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 91
36198: PUSH
36199: LD_VAR 0 3
36203: PUSH
36204: LD_INT 30
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PPUSH
36216: CALL_OW 69
36220: PPUSH
36221: LD_VAR 0 3
36225: PPUSH
36226: CALL_OW 74
36230: PPUSH
36231: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
36235: LD_VAR 0 2
36239: PUSH
36240: LD_INT 80
36242: GREATER
36243: PUSH
36244: LD_VAR 0 3
36248: PPUSH
36249: CALL_OW 301
36253: OR
36254: IFFALSE 36131
// if un then
36256: LD_VAR 0 3
36260: IFFALSE 36271
// RemoveUnit ( un ) ;
36262: LD_VAR 0 3
36266: PPUSH
36267: CALL_OW 64
// end ;
36271: PPOPN 3
36273: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
36274: LD_EXP 120
36278: IFFALSE 36394
36280: GO 36282
36282: DISABLE
36283: LD_INT 0
36285: PPUSH
36286: PPUSH
36287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36288: LD_ADDR_VAR 0 2
36292: PUSH
36293: LD_INT 81
36295: PUSH
36296: LD_OWVAR 2
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 21
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PPUSH
36319: CALL_OW 69
36323: ST_TO_ADDR
// ToLua ( playComputer() ) ;
36324: LD_STRING playComputer()
36326: PPUSH
36327: CALL_OW 559
// if not tmp then
36331: LD_VAR 0 2
36335: NOT
36336: IFFALSE 36340
// exit ;
36338: GO 36394
// for i in tmp do
36340: LD_ADDR_VAR 0 1
36344: PUSH
36345: LD_VAR 0 2
36349: PUSH
36350: FOR_IN
36351: IFFALSE 36392
// for j := 1 to 4 do
36353: LD_ADDR_VAR 0 3
36357: PUSH
36358: DOUBLE
36359: LD_INT 1
36361: DEC
36362: ST_TO_ADDR
36363: LD_INT 4
36365: PUSH
36366: FOR_TO
36367: IFFALSE 36388
// SetSkill ( i , j , 10 ) ;
36369: LD_VAR 0 1
36373: PPUSH
36374: LD_VAR 0 3
36378: PPUSH
36379: LD_INT 10
36381: PPUSH
36382: CALL_OW 237
36386: GO 36366
36388: POP
36389: POP
36390: GO 36350
36392: POP
36393: POP
// end ;
36394: PPOPN 3
36396: END
// every 0 0$1 trigger s30 do var i , tmp ;
36397: LD_EXP 121
36401: IFFALSE 36470
36403: GO 36405
36405: DISABLE
36406: LD_INT 0
36408: PPUSH
36409: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36410: LD_ADDR_VAR 0 2
36414: PUSH
36415: LD_INT 22
36417: PUSH
36418: LD_OWVAR 2
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PPUSH
36427: CALL_OW 69
36431: ST_TO_ADDR
// if not tmp then
36432: LD_VAR 0 2
36436: NOT
36437: IFFALSE 36441
// exit ;
36439: GO 36470
// for i in tmp do
36441: LD_ADDR_VAR 0 1
36445: PUSH
36446: LD_VAR 0 2
36450: PUSH
36451: FOR_IN
36452: IFFALSE 36468
// SetLives ( i , 300 ) ;
36454: LD_VAR 0 1
36458: PPUSH
36459: LD_INT 300
36461: PPUSH
36462: CALL_OW 234
36466: GO 36451
36468: POP
36469: POP
// end ;
36470: PPOPN 2
36472: END
// every 0 0$1 trigger s60 do var i , tmp ;
36473: LD_EXP 122
36477: IFFALSE 36546
36479: GO 36481
36481: DISABLE
36482: LD_INT 0
36484: PPUSH
36485: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36486: LD_ADDR_VAR 0 2
36490: PUSH
36491: LD_INT 22
36493: PUSH
36494: LD_OWVAR 2
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PPUSH
36503: CALL_OW 69
36507: ST_TO_ADDR
// if not tmp then
36508: LD_VAR 0 2
36512: NOT
36513: IFFALSE 36517
// exit ;
36515: GO 36546
// for i in tmp do
36517: LD_ADDR_VAR 0 1
36521: PUSH
36522: LD_VAR 0 2
36526: PUSH
36527: FOR_IN
36528: IFFALSE 36544
// SetLives ( i , 600 ) ;
36530: LD_VAR 0 1
36534: PPUSH
36535: LD_INT 600
36537: PPUSH
36538: CALL_OW 234
36542: GO 36527
36544: POP
36545: POP
// end ;
36546: PPOPN 2
36548: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
36549: LD_INT 0
36551: PPUSH
// case cmd of 301 :
36552: LD_VAR 0 1
36556: PUSH
36557: LD_INT 301
36559: DOUBLE
36560: EQUAL
36561: IFTRUE 36565
36563: GO 36597
36565: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
36566: LD_VAR 0 6
36570: PPUSH
36571: LD_VAR 0 7
36575: PPUSH
36576: LD_VAR 0 8
36580: PPUSH
36581: LD_VAR 0 4
36585: PPUSH
36586: LD_VAR 0 5
36590: PPUSH
36591: CALL 37798 0 5
36595: GO 36718
36597: LD_INT 302
36599: DOUBLE
36600: EQUAL
36601: IFTRUE 36605
36603: GO 36642
36605: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
36606: LD_VAR 0 6
36610: PPUSH
36611: LD_VAR 0 7
36615: PPUSH
36616: LD_VAR 0 8
36620: PPUSH
36621: LD_VAR 0 9
36625: PPUSH
36626: LD_VAR 0 4
36630: PPUSH
36631: LD_VAR 0 5
36635: PPUSH
36636: CALL 37889 0 6
36640: GO 36718
36642: LD_INT 303
36644: DOUBLE
36645: EQUAL
36646: IFTRUE 36650
36648: GO 36687
36650: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
36651: LD_VAR 0 6
36655: PPUSH
36656: LD_VAR 0 7
36660: PPUSH
36661: LD_VAR 0 8
36665: PPUSH
36666: LD_VAR 0 9
36670: PPUSH
36671: LD_VAR 0 4
36675: PPUSH
36676: LD_VAR 0 5
36680: PPUSH
36681: CALL 36723 0 6
36685: GO 36718
36687: LD_INT 304
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36695
36693: GO 36717
36695: POP
// hHackTeleport ( unit , x , y ) ; end ;
36696: LD_VAR 0 2
36700: PPUSH
36701: LD_VAR 0 4
36705: PPUSH
36706: LD_VAR 0 5
36710: PPUSH
36711: CALL 38482 0 3
36715: GO 36718
36717: POP
// end ;
36718: LD_VAR 0 12
36722: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
36723: LD_INT 0
36725: PPUSH
36726: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
36727: LD_VAR 0 1
36731: PUSH
36732: LD_INT 1
36734: LESS
36735: PUSH
36736: LD_VAR 0 1
36740: PUSH
36741: LD_INT 3
36743: GREATER
36744: OR
36745: PUSH
36746: LD_VAR 0 5
36750: PPUSH
36751: LD_VAR 0 6
36755: PPUSH
36756: CALL_OW 428
36760: OR
36761: IFFALSE 36765
// exit ;
36763: GO 37485
// uc_side := your_side ;
36765: LD_ADDR_OWVAR 20
36769: PUSH
36770: LD_OWVAR 2
36774: ST_TO_ADDR
// uc_nation := nation ;
36775: LD_ADDR_OWVAR 21
36779: PUSH
36780: LD_VAR 0 1
36784: ST_TO_ADDR
// bc_level = 1 ;
36785: LD_ADDR_OWVAR 43
36789: PUSH
36790: LD_INT 1
36792: ST_TO_ADDR
// case btype of 1 :
36793: LD_VAR 0 2
36797: PUSH
36798: LD_INT 1
36800: DOUBLE
36801: EQUAL
36802: IFTRUE 36806
36804: GO 36817
36806: POP
// bc_type := b_depot ; 2 :
36807: LD_ADDR_OWVAR 42
36811: PUSH
36812: LD_INT 0
36814: ST_TO_ADDR
36815: GO 37429
36817: LD_INT 2
36819: DOUBLE
36820: EQUAL
36821: IFTRUE 36825
36823: GO 36836
36825: POP
// bc_type := b_warehouse ; 3 :
36826: LD_ADDR_OWVAR 42
36830: PUSH
36831: LD_INT 1
36833: ST_TO_ADDR
36834: GO 37429
36836: LD_INT 3
36838: DOUBLE
36839: EQUAL
36840: IFTRUE 36844
36842: GO 36855
36844: POP
// bc_type := b_lab ; 4 .. 9 :
36845: LD_ADDR_OWVAR 42
36849: PUSH
36850: LD_INT 6
36852: ST_TO_ADDR
36853: GO 37429
36855: LD_INT 4
36857: DOUBLE
36858: GREATEREQUAL
36859: IFFALSE 36867
36861: LD_INT 9
36863: DOUBLE
36864: LESSEQUAL
36865: IFTRUE 36869
36867: GO 36921
36869: POP
// begin bc_type := b_lab_half ;
36870: LD_ADDR_OWVAR 42
36874: PUSH
36875: LD_INT 7
36877: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
36878: LD_ADDR_OWVAR 44
36882: PUSH
36883: LD_INT 10
36885: PUSH
36886: LD_INT 11
36888: PUSH
36889: LD_INT 12
36891: PUSH
36892: LD_INT 15
36894: PUSH
36895: LD_INT 14
36897: PUSH
36898: LD_INT 13
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: PUSH
36909: LD_VAR 0 2
36913: PUSH
36914: LD_INT 3
36916: MINUS
36917: ARRAY
36918: ST_TO_ADDR
// end ; 10 .. 13 :
36919: GO 37429
36921: LD_INT 10
36923: DOUBLE
36924: GREATEREQUAL
36925: IFFALSE 36933
36927: LD_INT 13
36929: DOUBLE
36930: LESSEQUAL
36931: IFTRUE 36935
36933: GO 37012
36935: POP
// begin bc_type := b_lab_full ;
36936: LD_ADDR_OWVAR 42
36940: PUSH
36941: LD_INT 8
36943: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
36944: LD_ADDR_OWVAR 44
36948: PUSH
36949: LD_INT 10
36951: PUSH
36952: LD_INT 12
36954: PUSH
36955: LD_INT 14
36957: PUSH
36958: LD_INT 13
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: PUSH
36967: LD_VAR 0 2
36971: PUSH
36972: LD_INT 9
36974: MINUS
36975: ARRAY
36976: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
36977: LD_ADDR_OWVAR 45
36981: PUSH
36982: LD_INT 11
36984: PUSH
36985: LD_INT 15
36987: PUSH
36988: LD_INT 12
36990: PUSH
36991: LD_INT 15
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: PUSH
37000: LD_VAR 0 2
37004: PUSH
37005: LD_INT 9
37007: MINUS
37008: ARRAY
37009: ST_TO_ADDR
// end ; 14 :
37010: GO 37429
37012: LD_INT 14
37014: DOUBLE
37015: EQUAL
37016: IFTRUE 37020
37018: GO 37031
37020: POP
// bc_type := b_workshop ; 15 :
37021: LD_ADDR_OWVAR 42
37025: PUSH
37026: LD_INT 2
37028: ST_TO_ADDR
37029: GO 37429
37031: LD_INT 15
37033: DOUBLE
37034: EQUAL
37035: IFTRUE 37039
37037: GO 37050
37039: POP
// bc_type := b_factory ; 16 :
37040: LD_ADDR_OWVAR 42
37044: PUSH
37045: LD_INT 3
37047: ST_TO_ADDR
37048: GO 37429
37050: LD_INT 16
37052: DOUBLE
37053: EQUAL
37054: IFTRUE 37058
37056: GO 37069
37058: POP
// bc_type := b_ext_gun ; 17 :
37059: LD_ADDR_OWVAR 42
37063: PUSH
37064: LD_INT 17
37066: ST_TO_ADDR
37067: GO 37429
37069: LD_INT 17
37071: DOUBLE
37072: EQUAL
37073: IFTRUE 37077
37075: GO 37105
37077: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
37078: LD_ADDR_OWVAR 42
37082: PUSH
37083: LD_INT 19
37085: PUSH
37086: LD_INT 23
37088: PUSH
37089: LD_INT 19
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: PUSH
37097: LD_VAR 0 1
37101: ARRAY
37102: ST_TO_ADDR
37103: GO 37429
37105: LD_INT 18
37107: DOUBLE
37108: EQUAL
37109: IFTRUE 37113
37111: GO 37124
37113: POP
// bc_type := b_ext_radar ; 19 :
37114: LD_ADDR_OWVAR 42
37118: PUSH
37119: LD_INT 20
37121: ST_TO_ADDR
37122: GO 37429
37124: LD_INT 19
37126: DOUBLE
37127: EQUAL
37128: IFTRUE 37132
37130: GO 37143
37132: POP
// bc_type := b_ext_radio ; 20 :
37133: LD_ADDR_OWVAR 42
37137: PUSH
37138: LD_INT 22
37140: ST_TO_ADDR
37141: GO 37429
37143: LD_INT 20
37145: DOUBLE
37146: EQUAL
37147: IFTRUE 37151
37149: GO 37162
37151: POP
// bc_type := b_ext_siberium ; 21 :
37152: LD_ADDR_OWVAR 42
37156: PUSH
37157: LD_INT 21
37159: ST_TO_ADDR
37160: GO 37429
37162: LD_INT 21
37164: DOUBLE
37165: EQUAL
37166: IFTRUE 37170
37168: GO 37181
37170: POP
// bc_type := b_ext_computer ; 22 :
37171: LD_ADDR_OWVAR 42
37175: PUSH
37176: LD_INT 24
37178: ST_TO_ADDR
37179: GO 37429
37181: LD_INT 22
37183: DOUBLE
37184: EQUAL
37185: IFTRUE 37189
37187: GO 37200
37189: POP
// bc_type := b_ext_track ; 23 :
37190: LD_ADDR_OWVAR 42
37194: PUSH
37195: LD_INT 16
37197: ST_TO_ADDR
37198: GO 37429
37200: LD_INT 23
37202: DOUBLE
37203: EQUAL
37204: IFTRUE 37208
37206: GO 37219
37208: POP
// bc_type := b_ext_laser ; 24 :
37209: LD_ADDR_OWVAR 42
37213: PUSH
37214: LD_INT 25
37216: ST_TO_ADDR
37217: GO 37429
37219: LD_INT 24
37221: DOUBLE
37222: EQUAL
37223: IFTRUE 37227
37225: GO 37238
37227: POP
// bc_type := b_control_tower ; 25 :
37228: LD_ADDR_OWVAR 42
37232: PUSH
37233: LD_INT 36
37235: ST_TO_ADDR
37236: GO 37429
37238: LD_INT 25
37240: DOUBLE
37241: EQUAL
37242: IFTRUE 37246
37244: GO 37257
37246: POP
// bc_type := b_breastwork ; 26 :
37247: LD_ADDR_OWVAR 42
37251: PUSH
37252: LD_INT 31
37254: ST_TO_ADDR
37255: GO 37429
37257: LD_INT 26
37259: DOUBLE
37260: EQUAL
37261: IFTRUE 37265
37263: GO 37276
37265: POP
// bc_type := b_bunker ; 27 :
37266: LD_ADDR_OWVAR 42
37270: PUSH
37271: LD_INT 32
37273: ST_TO_ADDR
37274: GO 37429
37276: LD_INT 27
37278: DOUBLE
37279: EQUAL
37280: IFTRUE 37284
37282: GO 37295
37284: POP
// bc_type := b_turret ; 28 :
37285: LD_ADDR_OWVAR 42
37289: PUSH
37290: LD_INT 33
37292: ST_TO_ADDR
37293: GO 37429
37295: LD_INT 28
37297: DOUBLE
37298: EQUAL
37299: IFTRUE 37303
37301: GO 37314
37303: POP
// bc_type := b_armoury ; 29 :
37304: LD_ADDR_OWVAR 42
37308: PUSH
37309: LD_INT 4
37311: ST_TO_ADDR
37312: GO 37429
37314: LD_INT 29
37316: DOUBLE
37317: EQUAL
37318: IFTRUE 37322
37320: GO 37333
37322: POP
// bc_type := b_barracks ; 30 :
37323: LD_ADDR_OWVAR 42
37327: PUSH
37328: LD_INT 5
37330: ST_TO_ADDR
37331: GO 37429
37333: LD_INT 30
37335: DOUBLE
37336: EQUAL
37337: IFTRUE 37341
37339: GO 37352
37341: POP
// bc_type := b_solar_power ; 31 :
37342: LD_ADDR_OWVAR 42
37346: PUSH
37347: LD_INT 27
37349: ST_TO_ADDR
37350: GO 37429
37352: LD_INT 31
37354: DOUBLE
37355: EQUAL
37356: IFTRUE 37360
37358: GO 37371
37360: POP
// bc_type := b_oil_power ; 32 :
37361: LD_ADDR_OWVAR 42
37365: PUSH
37366: LD_INT 26
37368: ST_TO_ADDR
37369: GO 37429
37371: LD_INT 32
37373: DOUBLE
37374: EQUAL
37375: IFTRUE 37379
37377: GO 37390
37379: POP
// bc_type := b_siberite_power ; 33 :
37380: LD_ADDR_OWVAR 42
37384: PUSH
37385: LD_INT 28
37387: ST_TO_ADDR
37388: GO 37429
37390: LD_INT 33
37392: DOUBLE
37393: EQUAL
37394: IFTRUE 37398
37396: GO 37409
37398: POP
// bc_type := b_oil_mine ; 34 :
37399: LD_ADDR_OWVAR 42
37403: PUSH
37404: LD_INT 29
37406: ST_TO_ADDR
37407: GO 37429
37409: LD_INT 34
37411: DOUBLE
37412: EQUAL
37413: IFTRUE 37417
37415: GO 37428
37417: POP
// bc_type := b_siberite_mine ; end ;
37418: LD_ADDR_OWVAR 42
37422: PUSH
37423: LD_INT 30
37425: ST_TO_ADDR
37426: GO 37429
37428: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
37429: LD_ADDR_VAR 0 8
37433: PUSH
37434: LD_VAR 0 5
37438: PPUSH
37439: LD_VAR 0 6
37443: PPUSH
37444: LD_VAR 0 3
37448: PPUSH
37449: CALL_OW 47
37453: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
37454: LD_OWVAR 42
37458: PUSH
37459: LD_INT 32
37461: PUSH
37462: LD_INT 33
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: IN
37469: IFFALSE 37485
// PlaceWeaponTurret ( b , weapon ) ;
37471: LD_VAR 0 8
37475: PPUSH
37476: LD_VAR 0 4
37480: PPUSH
37481: CALL_OW 431
// end ;
37485: LD_VAR 0 7
37489: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
37490: LD_INT 0
37492: PPUSH
37493: PPUSH
37494: PPUSH
37495: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37496: LD_ADDR_VAR 0 4
37500: PUSH
37501: LD_INT 22
37503: PUSH
37504: LD_OWVAR 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: LD_INT 30
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 30
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PPUSH
37545: CALL_OW 69
37549: ST_TO_ADDR
// if not tmp then
37550: LD_VAR 0 4
37554: NOT
37555: IFFALSE 37559
// exit ;
37557: GO 37618
// for i in tmp do
37559: LD_ADDR_VAR 0 2
37563: PUSH
37564: LD_VAR 0 4
37568: PUSH
37569: FOR_IN
37570: IFFALSE 37616
// for j = 1 to 3 do
37572: LD_ADDR_VAR 0 3
37576: PUSH
37577: DOUBLE
37578: LD_INT 1
37580: DEC
37581: ST_TO_ADDR
37582: LD_INT 3
37584: PUSH
37585: FOR_TO
37586: IFFALSE 37612
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
37588: LD_VAR 0 2
37592: PPUSH
37593: CALL_OW 274
37597: PPUSH
37598: LD_VAR 0 3
37602: PPUSH
37603: LD_INT 99999
37605: PPUSH
37606: CALL_OW 277
37610: GO 37585
37612: POP
37613: POP
37614: GO 37569
37616: POP
37617: POP
// end ;
37618: LD_VAR 0 1
37622: RET
// export function hHackSetLevel10 ; var i , j ; begin
37623: LD_INT 0
37625: PPUSH
37626: PPUSH
37627: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37628: LD_ADDR_VAR 0 2
37632: PUSH
37633: LD_INT 21
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PPUSH
37643: CALL_OW 69
37647: PUSH
37648: FOR_IN
37649: IFFALSE 37701
// if IsSelected ( i ) then
37651: LD_VAR 0 2
37655: PPUSH
37656: CALL_OW 306
37660: IFFALSE 37699
// begin for j := 1 to 4 do
37662: LD_ADDR_VAR 0 3
37666: PUSH
37667: DOUBLE
37668: LD_INT 1
37670: DEC
37671: ST_TO_ADDR
37672: LD_INT 4
37674: PUSH
37675: FOR_TO
37676: IFFALSE 37697
// SetSkill ( i , j , 10 ) ;
37678: LD_VAR 0 2
37682: PPUSH
37683: LD_VAR 0 3
37687: PPUSH
37688: LD_INT 10
37690: PPUSH
37691: CALL_OW 237
37695: GO 37675
37697: POP
37698: POP
// end ;
37699: GO 37648
37701: POP
37702: POP
// end ;
37703: LD_VAR 0 1
37707: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
37708: LD_INT 0
37710: PPUSH
37711: PPUSH
37712: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
37713: LD_ADDR_VAR 0 2
37717: PUSH
37718: LD_INT 22
37720: PUSH
37721: LD_OWVAR 2
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 21
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PPUSH
37744: CALL_OW 69
37748: PUSH
37749: FOR_IN
37750: IFFALSE 37791
// begin for j := 1 to 4 do
37752: LD_ADDR_VAR 0 3
37756: PUSH
37757: DOUBLE
37758: LD_INT 1
37760: DEC
37761: ST_TO_ADDR
37762: LD_INT 4
37764: PUSH
37765: FOR_TO
37766: IFFALSE 37787
// SetSkill ( i , j , 10 ) ;
37768: LD_VAR 0 2
37772: PPUSH
37773: LD_VAR 0 3
37777: PPUSH
37778: LD_INT 10
37780: PPUSH
37781: CALL_OW 237
37785: GO 37765
37787: POP
37788: POP
// end ;
37789: GO 37749
37791: POP
37792: POP
// end ;
37793: LD_VAR 0 1
37797: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
37798: LD_INT 0
37800: PPUSH
// uc_side := your_side ;
37801: LD_ADDR_OWVAR 20
37805: PUSH
37806: LD_OWVAR 2
37810: ST_TO_ADDR
// uc_nation := nation ;
37811: LD_ADDR_OWVAR 21
37815: PUSH
37816: LD_VAR 0 1
37820: ST_TO_ADDR
// InitHc ;
37821: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
37825: LD_INT 0
37827: PPUSH
37828: LD_VAR 0 2
37832: PPUSH
37833: LD_VAR 0 3
37837: PPUSH
37838: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
37842: LD_VAR 0 4
37846: PPUSH
37847: LD_VAR 0 5
37851: PPUSH
37852: CALL_OW 428
37856: PUSH
37857: LD_INT 0
37859: EQUAL
37860: IFFALSE 37884
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
37862: CALL_OW 44
37866: PPUSH
37867: LD_VAR 0 4
37871: PPUSH
37872: LD_VAR 0 5
37876: PPUSH
37877: LD_INT 1
37879: PPUSH
37880: CALL_OW 48
// end ;
37884: LD_VAR 0 6
37888: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
37889: LD_INT 0
37891: PPUSH
37892: PPUSH
// uc_side := your_side ;
37893: LD_ADDR_OWVAR 20
37897: PUSH
37898: LD_OWVAR 2
37902: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
37903: LD_VAR 0 1
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: LD_INT 2
37913: PUSH
37914: LD_INT 3
37916: PUSH
37917: LD_INT 4
37919: PUSH
37920: LD_INT 5
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: IN
37930: IFFALSE 37942
// uc_nation := nation_american else
37932: LD_ADDR_OWVAR 21
37936: PUSH
37937: LD_INT 1
37939: ST_TO_ADDR
37940: GO 37985
// if chassis in [ 11 , 12 , 13 , 14 ] then
37942: LD_VAR 0 1
37946: PUSH
37947: LD_INT 11
37949: PUSH
37950: LD_INT 12
37952: PUSH
37953: LD_INT 13
37955: PUSH
37956: LD_INT 14
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: IN
37965: IFFALSE 37977
// uc_nation := nation_arabian else
37967: LD_ADDR_OWVAR 21
37971: PUSH
37972: LD_INT 2
37974: ST_TO_ADDR
37975: GO 37985
// uc_nation := nation_russian ;
37977: LD_ADDR_OWVAR 21
37981: PUSH
37982: LD_INT 3
37984: ST_TO_ADDR
// vc_chassis := chassis ;
37985: LD_ADDR_OWVAR 37
37989: PUSH
37990: LD_VAR 0 1
37994: ST_TO_ADDR
// vc_engine := engine ;
37995: LD_ADDR_OWVAR 39
37999: PUSH
38000: LD_VAR 0 2
38004: ST_TO_ADDR
// vc_control := control ;
38005: LD_ADDR_OWVAR 38
38009: PUSH
38010: LD_VAR 0 3
38014: ST_TO_ADDR
// vc_weapon := weapon ;
38015: LD_ADDR_OWVAR 40
38019: PUSH
38020: LD_VAR 0 4
38024: ST_TO_ADDR
// un := CreateVehicle ;
38025: LD_ADDR_VAR 0 8
38029: PUSH
38030: CALL_OW 45
38034: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
38035: LD_VAR 0 8
38039: PPUSH
38040: LD_INT 0
38042: PPUSH
38043: LD_INT 5
38045: PPUSH
38046: CALL_OW 12
38050: PPUSH
38051: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
38055: LD_VAR 0 8
38059: PPUSH
38060: LD_VAR 0 5
38064: PPUSH
38065: LD_VAR 0 6
38069: PPUSH
38070: LD_INT 1
38072: PPUSH
38073: CALL_OW 48
// end ;
38077: LD_VAR 0 7
38081: RET
// export hInvincible ; every 1 do
38082: GO 38084
38084: DISABLE
// hInvincible := [ ] ;
38085: LD_ADDR_EXP 123
38089: PUSH
38090: EMPTY
38091: ST_TO_ADDR
38092: END
// every 10 do var i ;
38093: GO 38095
38095: DISABLE
38096: LD_INT 0
38098: PPUSH
// begin enable ;
38099: ENABLE
// if not hInvincible then
38100: LD_EXP 123
38104: NOT
38105: IFFALSE 38109
// exit ;
38107: GO 38153
// for i in hInvincible do
38109: LD_ADDR_VAR 0 1
38113: PUSH
38114: LD_EXP 123
38118: PUSH
38119: FOR_IN
38120: IFFALSE 38151
// if GetLives ( i ) < 1000 then
38122: LD_VAR 0 1
38126: PPUSH
38127: CALL_OW 256
38131: PUSH
38132: LD_INT 1000
38134: LESS
38135: IFFALSE 38149
// SetLives ( i , 1000 ) ;
38137: LD_VAR 0 1
38141: PPUSH
38142: LD_INT 1000
38144: PPUSH
38145: CALL_OW 234
38149: GO 38119
38151: POP
38152: POP
// end ;
38153: PPOPN 1
38155: END
// export function hHackInvincible ; var i ; begin
38156: LD_INT 0
38158: PPUSH
38159: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
38160: LD_ADDR_VAR 0 2
38164: PUSH
38165: LD_INT 2
38167: PUSH
38168: LD_INT 21
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 21
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: PPUSH
38193: CALL_OW 69
38197: PUSH
38198: FOR_IN
38199: IFFALSE 38260
// if IsSelected ( i ) then
38201: LD_VAR 0 2
38205: PPUSH
38206: CALL_OW 306
38210: IFFALSE 38258
// begin if i in hInvincible then
38212: LD_VAR 0 2
38216: PUSH
38217: LD_EXP 123
38221: IN
38222: IFFALSE 38242
// hInvincible := hInvincible diff i else
38224: LD_ADDR_EXP 123
38228: PUSH
38229: LD_EXP 123
38233: PUSH
38234: LD_VAR 0 2
38238: DIFF
38239: ST_TO_ADDR
38240: GO 38258
// hInvincible := hInvincible union i ;
38242: LD_ADDR_EXP 123
38246: PUSH
38247: LD_EXP 123
38251: PUSH
38252: LD_VAR 0 2
38256: UNION
38257: ST_TO_ADDR
// end ;
38258: GO 38198
38260: POP
38261: POP
// end ;
38262: LD_VAR 0 1
38266: RET
// export function hHackInvisible ; var i , j ; begin
38267: LD_INT 0
38269: PPUSH
38270: PPUSH
38271: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
38272: LD_ADDR_VAR 0 2
38276: PUSH
38277: LD_INT 21
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PPUSH
38287: CALL_OW 69
38291: PUSH
38292: FOR_IN
38293: IFFALSE 38317
// if IsSelected ( i ) then
38295: LD_VAR 0 2
38299: PPUSH
38300: CALL_OW 306
38304: IFFALSE 38315
// ComForceInvisible ( i ) ;
38306: LD_VAR 0 2
38310: PPUSH
38311: CALL_OW 496
38315: GO 38292
38317: POP
38318: POP
// end ;
38319: LD_VAR 0 1
38323: RET
// export function hHackChangeYourSide ; begin
38324: LD_INT 0
38326: PPUSH
// if your_side = 8 then
38327: LD_OWVAR 2
38331: PUSH
38332: LD_INT 8
38334: EQUAL
38335: IFFALSE 38347
// your_side := 0 else
38337: LD_ADDR_OWVAR 2
38341: PUSH
38342: LD_INT 0
38344: ST_TO_ADDR
38345: GO 38361
// your_side := your_side + 1 ;
38347: LD_ADDR_OWVAR 2
38351: PUSH
38352: LD_OWVAR 2
38356: PUSH
38357: LD_INT 1
38359: PLUS
38360: ST_TO_ADDR
// end ;
38361: LD_VAR 0 1
38365: RET
// export function hHackChangeUnitSide ; var i , j ; begin
38366: LD_INT 0
38368: PPUSH
38369: PPUSH
38370: PPUSH
// for i in all_units do
38371: LD_ADDR_VAR 0 2
38375: PUSH
38376: LD_OWVAR 3
38380: PUSH
38381: FOR_IN
38382: IFFALSE 38460
// if IsSelected ( i ) then
38384: LD_VAR 0 2
38388: PPUSH
38389: CALL_OW 306
38393: IFFALSE 38458
// begin j := GetSide ( i ) ;
38395: LD_ADDR_VAR 0 3
38399: PUSH
38400: LD_VAR 0 2
38404: PPUSH
38405: CALL_OW 255
38409: ST_TO_ADDR
// if j = 8 then
38410: LD_VAR 0 3
38414: PUSH
38415: LD_INT 8
38417: EQUAL
38418: IFFALSE 38430
// j := 0 else
38420: LD_ADDR_VAR 0 3
38424: PUSH
38425: LD_INT 0
38427: ST_TO_ADDR
38428: GO 38444
// j := j + 1 ;
38430: LD_ADDR_VAR 0 3
38434: PUSH
38435: LD_VAR 0 3
38439: PUSH
38440: LD_INT 1
38442: PLUS
38443: ST_TO_ADDR
// SetSide ( i , j ) ;
38444: LD_VAR 0 2
38448: PPUSH
38449: LD_VAR 0 3
38453: PPUSH
38454: CALL_OW 235
// end ;
38458: GO 38381
38460: POP
38461: POP
// end ;
38462: LD_VAR 0 1
38466: RET
// export function hHackFog ; begin
38467: LD_INT 0
38469: PPUSH
// FogOff ( true ) ;
38470: LD_INT 1
38472: PPUSH
38473: CALL_OW 344
// end ;
38477: LD_VAR 0 1
38481: RET
// export function hHackTeleport ( unit , x , y ) ; begin
38482: LD_INT 0
38484: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
38485: LD_VAR 0 1
38489: PPUSH
38490: LD_VAR 0 2
38494: PPUSH
38495: LD_VAR 0 3
38499: PPUSH
38500: LD_INT 1
38502: PPUSH
38503: LD_INT 1
38505: PPUSH
38506: CALL_OW 483
// CenterOnXY ( x , y ) ;
38510: LD_VAR 0 2
38514: PPUSH
38515: LD_VAR 0 3
38519: PPUSH
38520: CALL_OW 84
// end ;
38524: LD_VAR 0 4
38528: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
38529: LD_INT 0
38531: PPUSH
38532: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
38533: LD_VAR 0 1
38537: NOT
38538: PUSH
38539: LD_VAR 0 2
38543: PPUSH
38544: LD_VAR 0 3
38548: PPUSH
38549: CALL_OW 488
38553: NOT
38554: OR
38555: PUSH
38556: LD_VAR 0 1
38560: PPUSH
38561: CALL_OW 266
38565: PUSH
38566: LD_INT 3
38568: NONEQUAL
38569: PUSH
38570: LD_VAR 0 1
38574: PPUSH
38575: CALL_OW 247
38579: PUSH
38580: LD_INT 1
38582: EQUAL
38583: NOT
38584: AND
38585: OR
38586: IFFALSE 38590
// exit ;
38588: GO 38739
// if GetType ( factory ) = unit_human then
38590: LD_VAR 0 1
38594: PPUSH
38595: CALL_OW 247
38599: PUSH
38600: LD_INT 1
38602: EQUAL
38603: IFFALSE 38620
// factory := IsInUnit ( factory ) ;
38605: LD_ADDR_VAR 0 1
38609: PUSH
38610: LD_VAR 0 1
38614: PPUSH
38615: CALL_OW 310
38619: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
38620: LD_VAR 0 1
38624: PPUSH
38625: CALL_OW 266
38629: PUSH
38630: LD_INT 3
38632: NONEQUAL
38633: IFFALSE 38637
// exit ;
38635: GO 38739
// if HexInfo ( x , y ) = factory then
38637: LD_VAR 0 2
38641: PPUSH
38642: LD_VAR 0 3
38646: PPUSH
38647: CALL_OW 428
38651: PUSH
38652: LD_VAR 0 1
38656: EQUAL
38657: IFFALSE 38684
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
38659: LD_ADDR_EXP 124
38663: PUSH
38664: LD_EXP 124
38668: PPUSH
38669: LD_VAR 0 1
38673: PPUSH
38674: LD_INT 0
38676: PPUSH
38677: CALL_OW 1
38681: ST_TO_ADDR
38682: GO 38735
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
38684: LD_ADDR_EXP 124
38688: PUSH
38689: LD_EXP 124
38693: PPUSH
38694: LD_VAR 0 1
38698: PPUSH
38699: LD_VAR 0 1
38703: PPUSH
38704: CALL_OW 255
38708: PUSH
38709: LD_VAR 0 1
38713: PUSH
38714: LD_VAR 0 2
38718: PUSH
38719: LD_VAR 0 3
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: PPUSH
38730: CALL_OW 1
38734: ST_TO_ADDR
// UpdateFactoryWaypoints ;
38735: CALL 38744 0 0
// end ;
38739: LD_VAR 0 4
38743: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
38744: LD_INT 0
38746: PPUSH
38747: PPUSH
38748: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
38749: LD_STRING resetFactoryWaypoint();
38751: PPUSH
38752: CALL_OW 559
// if factoryWaypoints then
38756: LD_EXP 124
38760: IFFALSE 38886
// begin list := PrepareArray ( factoryWaypoints ) ;
38762: LD_ADDR_VAR 0 3
38766: PUSH
38767: LD_EXP 124
38771: PPUSH
38772: NOP4
38776: ST_TO_ADDR
// for i := 1 to list do
38777: LD_ADDR_VAR 0 2
38781: PUSH
38782: DOUBLE
38783: LD_INT 1
38785: DEC
38786: ST_TO_ADDR
38787: LD_VAR 0 3
38791: PUSH
38792: FOR_TO
38793: IFFALSE 38884
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
38795: LD_STRING setFactoryWaypointXY(
38797: PUSH
38798: LD_VAR 0 3
38802: PUSH
38803: LD_VAR 0 2
38807: ARRAY
38808: PUSH
38809: LD_INT 1
38811: ARRAY
38812: STR
38813: PUSH
38814: LD_STRING ,
38816: STR
38817: PUSH
38818: LD_VAR 0 3
38822: PUSH
38823: LD_VAR 0 2
38827: ARRAY
38828: PUSH
38829: LD_INT 2
38831: ARRAY
38832: STR
38833: PUSH
38834: LD_STRING ,
38836: STR
38837: PUSH
38838: LD_VAR 0 3
38842: PUSH
38843: LD_VAR 0 2
38847: ARRAY
38848: PUSH
38849: LD_INT 3
38851: ARRAY
38852: STR
38853: PUSH
38854: LD_STRING ,
38856: STR
38857: PUSH
38858: LD_VAR 0 3
38862: PUSH
38863: LD_VAR 0 2
38867: ARRAY
38868: PUSH
38869: LD_INT 4
38871: ARRAY
38872: STR
38873: PUSH
38874: LD_STRING )
38876: STR
38877: PPUSH
38878: CALL_OW 559
38882: GO 38792
38884: POP
38885: POP
// end ; end ;
38886: LD_VAR 0 1
38890: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
38891: LD_INT 0
38893: PPUSH
// if HexInfo ( x , y ) = warehouse then
38894: LD_VAR 0 2
38898: PPUSH
38899: LD_VAR 0 3
38903: PPUSH
38904: CALL_OW 428
38908: PUSH
38909: LD_VAR 0 1
38913: EQUAL
38914: IFFALSE 38941
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
38916: LD_ADDR_EXP 125
38920: PUSH
38921: LD_EXP 125
38925: PPUSH
38926: LD_VAR 0 1
38930: PPUSH
38931: LD_INT 0
38933: PPUSH
38934: CALL_OW 1
38938: ST_TO_ADDR
38939: GO 38992
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
38941: LD_ADDR_EXP 125
38945: PUSH
38946: LD_EXP 125
38950: PPUSH
38951: LD_VAR 0 1
38955: PPUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 255
38965: PUSH
38966: LD_VAR 0 1
38970: PUSH
38971: LD_VAR 0 2
38975: PUSH
38976: LD_VAR 0 3
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: PPUSH
38987: CALL_OW 1
38991: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
38992: CALL 39001 0 0
// end ;
38996: LD_VAR 0 4
39000: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
39001: LD_INT 0
39003: PPUSH
39004: PPUSH
39005: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
39006: LD_STRING resetWarehouseGatheringPoints();
39008: PPUSH
39009: CALL_OW 559
// if warehouseGatheringPoints then
39013: LD_EXP 125
39017: IFFALSE 39143
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
39019: LD_ADDR_VAR 0 3
39023: PUSH
39024: LD_EXP 125
39028: PPUSH
39029: NOP4
39033: ST_TO_ADDR
// for i := 1 to list do
39034: LD_ADDR_VAR 0 2
39038: PUSH
39039: DOUBLE
39040: LD_INT 1
39042: DEC
39043: ST_TO_ADDR
39044: LD_VAR 0 3
39048: PUSH
39049: FOR_TO
39050: IFFALSE 39141
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
39052: LD_STRING setWarehouseGatheringPointXY(
39054: PUSH
39055: LD_VAR 0 3
39059: PUSH
39060: LD_VAR 0 2
39064: ARRAY
39065: PUSH
39066: LD_INT 1
39068: ARRAY
39069: STR
39070: PUSH
39071: LD_STRING ,
39073: STR
39074: PUSH
39075: LD_VAR 0 3
39079: PUSH
39080: LD_VAR 0 2
39084: ARRAY
39085: PUSH
39086: LD_INT 2
39088: ARRAY
39089: STR
39090: PUSH
39091: LD_STRING ,
39093: STR
39094: PUSH
39095: LD_VAR 0 3
39099: PUSH
39100: LD_VAR 0 2
39104: ARRAY
39105: PUSH
39106: LD_INT 3
39108: ARRAY
39109: STR
39110: PUSH
39111: LD_STRING ,
39113: STR
39114: PUSH
39115: LD_VAR 0 3
39119: PUSH
39120: LD_VAR 0 2
39124: ARRAY
39125: PUSH
39126: LD_INT 4
39128: ARRAY
39129: STR
39130: PUSH
39131: LD_STRING )
39133: STR
39134: PPUSH
39135: CALL_OW 559
39139: GO 39049
39141: POP
39142: POP
// end ; end ;
39143: LD_VAR 0 1
39147: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
39148: LD_EXP 125
39152: IFFALSE 39837
39154: GO 39156
39156: DISABLE
39157: LD_INT 0
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
// begin enable ;
39168: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
39169: LD_ADDR_VAR 0 3
39173: PUSH
39174: LD_EXP 125
39178: PPUSH
39179: NOP4
39183: ST_TO_ADDR
// if not list then
39184: LD_VAR 0 3
39188: NOT
39189: IFFALSE 39193
// exit ;
39191: GO 39837
// for i := 1 to list do
39193: LD_ADDR_VAR 0 1
39197: PUSH
39198: DOUBLE
39199: LD_INT 1
39201: DEC
39202: ST_TO_ADDR
39203: LD_VAR 0 3
39207: PUSH
39208: FOR_TO
39209: IFFALSE 39835
// begin depot := list [ i ] [ 2 ] ;
39211: LD_ADDR_VAR 0 8
39215: PUSH
39216: LD_VAR 0 3
39220: PUSH
39221: LD_VAR 0 1
39225: ARRAY
39226: PUSH
39227: LD_INT 2
39229: ARRAY
39230: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
39231: LD_ADDR_VAR 0 5
39235: PUSH
39236: LD_VAR 0 3
39240: PUSH
39241: LD_VAR 0 1
39245: ARRAY
39246: PUSH
39247: LD_INT 1
39249: ARRAY
39250: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
39251: LD_VAR 0 8
39255: PPUSH
39256: CALL_OW 301
39260: PUSH
39261: LD_VAR 0 5
39265: PUSH
39266: LD_VAR 0 8
39270: PPUSH
39271: CALL_OW 255
39275: NONEQUAL
39276: OR
39277: IFFALSE 39306
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
39279: LD_ADDR_EXP 125
39283: PUSH
39284: LD_EXP 125
39288: PPUSH
39289: LD_VAR 0 8
39293: PPUSH
39294: LD_INT 0
39296: PPUSH
39297: CALL_OW 1
39301: ST_TO_ADDR
// exit ;
39302: POP
39303: POP
39304: GO 39837
// end ; x := list [ i ] [ 3 ] ;
39306: LD_ADDR_VAR 0 6
39310: PUSH
39311: LD_VAR 0 3
39315: PUSH
39316: LD_VAR 0 1
39320: ARRAY
39321: PUSH
39322: LD_INT 3
39324: ARRAY
39325: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
39326: LD_ADDR_VAR 0 7
39330: PUSH
39331: LD_VAR 0 3
39335: PUSH
39336: LD_VAR 0 1
39340: ARRAY
39341: PUSH
39342: LD_INT 4
39344: ARRAY
39345: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
39346: LD_ADDR_VAR 0 9
39350: PUSH
39351: LD_VAR 0 6
39355: PPUSH
39356: LD_VAR 0 7
39360: PPUSH
39361: LD_INT 16
39363: PPUSH
39364: CALL 83943 0 3
39368: ST_TO_ADDR
// if not cratesNearbyPoint then
39369: LD_VAR 0 9
39373: NOT
39374: IFFALSE 39380
// exit ;
39376: POP
39377: POP
39378: GO 39837
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
39380: LD_ADDR_VAR 0 4
39384: PUSH
39385: LD_INT 22
39387: PUSH
39388: LD_VAR 0 5
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 3
39399: PUSH
39400: LD_INT 60
39402: PUSH
39403: EMPTY
39404: LIST
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 91
39412: PUSH
39413: LD_VAR 0 8
39417: PUSH
39418: LD_INT 6
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 25
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 25
39441: PUSH
39442: LD_INT 16
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: PPUSH
39460: CALL_OW 69
39464: PUSH
39465: LD_VAR 0 8
39469: PPUSH
39470: CALL_OW 313
39474: PPUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 60
39480: PUSH
39481: EMPTY
39482: LIST
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 25
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 25
39503: PUSH
39504: LD_INT 16
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PPUSH
39520: CALL_OW 72
39524: UNION
39525: ST_TO_ADDR
// if tmp then
39526: LD_VAR 0 4
39530: IFFALSE 39610
// begin tmp := ShrinkArray ( tmp , 3 ) ;
39532: LD_ADDR_VAR 0 4
39536: PUSH
39537: LD_VAR 0 4
39541: PPUSH
39542: LD_INT 3
39544: PPUSH
39545: CALL 81912 0 2
39549: ST_TO_ADDR
// for j in tmp do
39550: LD_ADDR_VAR 0 2
39554: PUSH
39555: LD_VAR 0 4
39559: PUSH
39560: FOR_IN
39561: IFFALSE 39604
// begin if IsInUnit ( j ) then
39563: LD_VAR 0 2
39567: PPUSH
39568: CALL_OW 310
39572: IFFALSE 39583
// ComExit ( j ) ;
39574: LD_VAR 0 2
39578: PPUSH
39579: CALL 81995 0 1
// AddComCollect ( j , x , y ) ;
39583: LD_VAR 0 2
39587: PPUSH
39588: LD_VAR 0 6
39592: PPUSH
39593: LD_VAR 0 7
39597: PPUSH
39598: CALL_OW 177
// end ;
39602: GO 39560
39604: POP
39605: POP
// exit ;
39606: POP
39607: POP
39608: GO 39837
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
39610: LD_ADDR_VAR 0 4
39614: PUSH
39615: LD_INT 22
39617: PUSH
39618: LD_VAR 0 5
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 91
39629: PUSH
39630: LD_VAR 0 8
39634: PUSH
39635: LD_INT 8
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 2
39645: PUSH
39646: LD_INT 34
39648: PUSH
39649: LD_INT 12
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 34
39658: PUSH
39659: LD_INT 51
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 34
39668: PUSH
39669: LD_INT 32
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 34
39678: PUSH
39679: LD_INT 89
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: PPUSH
39698: CALL_OW 69
39702: ST_TO_ADDR
// if tmp then
39703: LD_VAR 0 4
39707: IFFALSE 39833
// begin for j in tmp do
39709: LD_ADDR_VAR 0 2
39713: PUSH
39714: LD_VAR 0 4
39718: PUSH
39719: FOR_IN
39720: IFFALSE 39831
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
39722: LD_VAR 0 2
39726: PPUSH
39727: CALL_OW 262
39731: PUSH
39732: LD_INT 3
39734: EQUAL
39735: PUSH
39736: LD_VAR 0 2
39740: PPUSH
39741: CALL_OW 261
39745: PUSH
39746: LD_INT 20
39748: GREATER
39749: OR
39750: PUSH
39751: LD_VAR 0 2
39755: PPUSH
39756: CALL_OW 314
39760: NOT
39761: AND
39762: PUSH
39763: LD_VAR 0 2
39767: PPUSH
39768: CALL_OW 263
39772: PUSH
39773: LD_INT 1
39775: NONEQUAL
39776: PUSH
39777: LD_VAR 0 2
39781: PPUSH
39782: CALL_OW 311
39786: OR
39787: AND
39788: IFFALSE 39829
// begin ComCollect ( j , x , y ) ;
39790: LD_VAR 0 2
39794: PPUSH
39795: LD_VAR 0 6
39799: PPUSH
39800: LD_VAR 0 7
39804: PPUSH
39805: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
39809: LD_VAR 0 2
39813: PPUSH
39814: LD_VAR 0 8
39818: PPUSH
39819: CALL_OW 172
// exit ;
39823: POP
39824: POP
39825: POP
39826: POP
39827: GO 39837
// end ;
39829: GO 39719
39831: POP
39832: POP
// end ; end ;
39833: GO 39208
39835: POP
39836: POP
// end ; end_of_file
39837: PPOPN 9
39839: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
39840: LD_INT 0
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
39846: LD_VAR 0 1
39850: PPUSH
39851: CALL_OW 264
39855: PUSH
39856: LD_INT 91
39858: EQUAL
39859: IFFALSE 39931
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39861: LD_INT 68
39863: PPUSH
39864: LD_VAR 0 1
39868: PPUSH
39869: CALL_OW 255
39873: PPUSH
39874: CALL_OW 321
39878: PUSH
39879: LD_INT 2
39881: EQUAL
39882: IFFALSE 39894
// eff := 70 else
39884: LD_ADDR_VAR 0 4
39888: PUSH
39889: LD_INT 70
39891: ST_TO_ADDR
39892: GO 39902
// eff := 30 ;
39894: LD_ADDR_VAR 0 4
39898: PUSH
39899: LD_INT 30
39901: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
39902: LD_VAR 0 1
39906: PPUSH
39907: CALL_OW 250
39911: PPUSH
39912: LD_VAR 0 1
39916: PPUSH
39917: CALL_OW 251
39921: PPUSH
39922: LD_VAR 0 4
39926: PPUSH
39927: CALL_OW 495
// end ; end ;
39931: LD_VAR 0 2
39935: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
39936: LD_INT 0
39938: PPUSH
// end ;
39939: LD_VAR 0 4
39943: RET
// export function SOS_Command ( cmd ) ; begin
39944: LD_INT 0
39946: PPUSH
// end ;
39947: LD_VAR 0 2
39951: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
39952: LD_INT 0
39954: PPUSH
// end ;
39955: LD_VAR 0 6
39959: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
39960: LD_INT 0
39962: PPUSH
39963: PPUSH
// if not vehicle or not factory then
39964: LD_VAR 0 1
39968: NOT
39969: PUSH
39970: LD_VAR 0 2
39974: NOT
39975: OR
39976: IFFALSE 39980
// exit ;
39978: GO 40211
// if factoryWaypoints >= factory then
39980: LD_EXP 124
39984: PUSH
39985: LD_VAR 0 2
39989: GREATEREQUAL
39990: IFFALSE 40211
// if factoryWaypoints [ factory ] then
39992: LD_EXP 124
39996: PUSH
39997: LD_VAR 0 2
40001: ARRAY
40002: IFFALSE 40211
// begin if GetControl ( vehicle ) = control_manual then
40004: LD_VAR 0 1
40008: PPUSH
40009: CALL_OW 263
40013: PUSH
40014: LD_INT 1
40016: EQUAL
40017: IFFALSE 40098
// begin driver := IsDrivenBy ( vehicle ) ;
40019: LD_ADDR_VAR 0 4
40023: PUSH
40024: LD_VAR 0 1
40028: PPUSH
40029: CALL_OW 311
40033: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
40034: LD_VAR 0 4
40038: PPUSH
40039: LD_EXP 124
40043: PUSH
40044: LD_VAR 0 2
40048: ARRAY
40049: PUSH
40050: LD_INT 3
40052: ARRAY
40053: PPUSH
40054: LD_EXP 124
40058: PUSH
40059: LD_VAR 0 2
40063: ARRAY
40064: PUSH
40065: LD_INT 4
40067: ARRAY
40068: PPUSH
40069: CALL_OW 171
// AddComExitVehicle ( driver ) ;
40073: LD_VAR 0 4
40077: PPUSH
40078: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
40082: LD_VAR 0 4
40086: PPUSH
40087: LD_VAR 0 2
40091: PPUSH
40092: CALL_OW 180
// end else
40096: GO 40211
// if GetControl ( vehicle ) = control_remote then
40098: LD_VAR 0 1
40102: PPUSH
40103: CALL_OW 263
40107: PUSH
40108: LD_INT 2
40110: EQUAL
40111: IFFALSE 40172
// begin wait ( 0 0$2 ) ;
40113: LD_INT 70
40115: PPUSH
40116: CALL_OW 67
// if Connect ( vehicle ) then
40120: LD_VAR 0 1
40124: PPUSH
40125: CALL 52235 0 1
40129: IFFALSE 40170
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
40131: LD_VAR 0 1
40135: PPUSH
40136: LD_EXP 124
40140: PUSH
40141: LD_VAR 0 2
40145: ARRAY
40146: PUSH
40147: LD_INT 3
40149: ARRAY
40150: PPUSH
40151: LD_EXP 124
40155: PUSH
40156: LD_VAR 0 2
40160: ARRAY
40161: PUSH
40162: LD_INT 4
40164: ARRAY
40165: PPUSH
40166: CALL_OW 171
// end else
40170: GO 40211
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
40172: LD_VAR 0 1
40176: PPUSH
40177: LD_EXP 124
40181: PUSH
40182: LD_VAR 0 2
40186: ARRAY
40187: PUSH
40188: LD_INT 3
40190: ARRAY
40191: PPUSH
40192: LD_EXP 124
40196: PUSH
40197: LD_VAR 0 2
40201: ARRAY
40202: PUSH
40203: LD_INT 4
40205: ARRAY
40206: PPUSH
40207: CALL_OW 171
// end ; end ;
40211: LD_VAR 0 3
40215: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40216: LD_INT 0
40218: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40219: LD_VAR 0 1
40223: PUSH
40224: LD_INT 250
40226: EQUAL
40227: PUSH
40228: LD_VAR 0 2
40232: PPUSH
40233: CALL_OW 264
40237: PUSH
40238: LD_INT 81
40240: EQUAL
40241: AND
40242: IFFALSE 40263
// MinerPlaceMine ( unit , x , y ) ;
40244: LD_VAR 0 2
40248: PPUSH
40249: LD_VAR 0 4
40253: PPUSH
40254: LD_VAR 0 5
40258: PPUSH
40259: CALL 42648 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40263: LD_VAR 0 1
40267: PUSH
40268: LD_INT 251
40270: EQUAL
40271: PUSH
40272: LD_VAR 0 2
40276: PPUSH
40277: CALL_OW 264
40281: PUSH
40282: LD_INT 81
40284: EQUAL
40285: AND
40286: IFFALSE 40307
// MinerDetonateMine ( unit , x , y ) ;
40288: LD_VAR 0 2
40292: PPUSH
40293: LD_VAR 0 4
40297: PPUSH
40298: LD_VAR 0 5
40302: PPUSH
40303: CALL 42923 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40307: LD_VAR 0 1
40311: PUSH
40312: LD_INT 252
40314: EQUAL
40315: PUSH
40316: LD_VAR 0 2
40320: PPUSH
40321: CALL_OW 264
40325: PUSH
40326: LD_INT 81
40328: EQUAL
40329: AND
40330: IFFALSE 40351
// MinerCreateMinefield ( unit , x , y ) ;
40332: LD_VAR 0 2
40336: PPUSH
40337: LD_VAR 0 4
40341: PPUSH
40342: LD_VAR 0 5
40346: PPUSH
40347: CALL 43340 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40351: LD_VAR 0 1
40355: PUSH
40356: LD_INT 253
40358: EQUAL
40359: PUSH
40360: LD_VAR 0 2
40364: PPUSH
40365: CALL_OW 257
40369: PUSH
40370: LD_INT 5
40372: EQUAL
40373: AND
40374: IFFALSE 40395
// ComBinocular ( unit , x , y ) ;
40376: LD_VAR 0 2
40380: PPUSH
40381: LD_VAR 0 4
40385: PPUSH
40386: LD_VAR 0 5
40390: PPUSH
40391: CALL 43709 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40395: LD_VAR 0 1
40399: PUSH
40400: LD_INT 254
40402: EQUAL
40403: PUSH
40404: LD_VAR 0 2
40408: PPUSH
40409: CALL_OW 264
40413: PUSH
40414: LD_INT 99
40416: EQUAL
40417: AND
40418: PUSH
40419: LD_VAR 0 3
40423: PPUSH
40424: CALL_OW 263
40428: PUSH
40429: LD_INT 3
40431: EQUAL
40432: AND
40433: IFFALSE 40449
// HackDestroyVehicle ( unit , selectedUnit ) ;
40435: LD_VAR 0 2
40439: PPUSH
40440: LD_VAR 0 3
40444: PPUSH
40445: CALL 42012 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40449: LD_VAR 0 1
40453: PUSH
40454: LD_INT 255
40456: EQUAL
40457: PUSH
40458: LD_VAR 0 2
40462: PPUSH
40463: CALL_OW 264
40467: PUSH
40468: LD_INT 14
40470: PUSH
40471: LD_INT 53
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: IN
40478: AND
40479: PUSH
40480: LD_VAR 0 4
40484: PPUSH
40485: LD_VAR 0 5
40489: PPUSH
40490: CALL_OW 488
40494: AND
40495: IFFALSE 40519
// CutTreeXYR ( unit , x , y , 12 ) ;
40497: LD_VAR 0 2
40501: PPUSH
40502: LD_VAR 0 4
40506: PPUSH
40507: LD_VAR 0 5
40511: PPUSH
40512: LD_INT 12
40514: PPUSH
40515: CALL 40582 0 4
// if cmd = 256 then
40519: LD_VAR 0 1
40523: PUSH
40524: LD_INT 256
40526: EQUAL
40527: IFFALSE 40548
// SetFactoryWaypoint ( unit , x , y ) ;
40529: LD_VAR 0 2
40533: PPUSH
40534: LD_VAR 0 4
40538: PPUSH
40539: LD_VAR 0 5
40543: PPUSH
40544: CALL 38529 0 3
// if cmd = 257 then
40548: LD_VAR 0 1
40552: PUSH
40553: LD_INT 257
40555: EQUAL
40556: IFFALSE 40577
// SetWarehouseGatheringPoint ( unit , x , y ) ;
40558: LD_VAR 0 2
40562: PPUSH
40563: LD_VAR 0 4
40567: PPUSH
40568: LD_VAR 0 5
40572: PPUSH
40573: CALL 38891 0 3
// end ;
40577: LD_VAR 0 6
40581: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40582: LD_INT 0
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
40590: PPUSH
40591: PPUSH
40592: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40593: LD_VAR 0 1
40597: NOT
40598: PUSH
40599: LD_VAR 0 2
40603: PPUSH
40604: LD_VAR 0 3
40608: PPUSH
40609: CALL_OW 488
40613: NOT
40614: OR
40615: PUSH
40616: LD_VAR 0 4
40620: NOT
40621: OR
40622: IFFALSE 40626
// exit ;
40624: GO 40966
// list := [ ] ;
40626: LD_ADDR_VAR 0 13
40630: PUSH
40631: EMPTY
40632: ST_TO_ADDR
// if x - r < 0 then
40633: LD_VAR 0 2
40637: PUSH
40638: LD_VAR 0 4
40642: MINUS
40643: PUSH
40644: LD_INT 0
40646: LESS
40647: IFFALSE 40659
// min_x := 0 else
40649: LD_ADDR_VAR 0 7
40653: PUSH
40654: LD_INT 0
40656: ST_TO_ADDR
40657: GO 40675
// min_x := x - r ;
40659: LD_ADDR_VAR 0 7
40663: PUSH
40664: LD_VAR 0 2
40668: PUSH
40669: LD_VAR 0 4
40673: MINUS
40674: ST_TO_ADDR
// if y - r < 0 then
40675: LD_VAR 0 3
40679: PUSH
40680: LD_VAR 0 4
40684: MINUS
40685: PUSH
40686: LD_INT 0
40688: LESS
40689: IFFALSE 40701
// min_y := 0 else
40691: LD_ADDR_VAR 0 8
40695: PUSH
40696: LD_INT 0
40698: ST_TO_ADDR
40699: GO 40717
// min_y := y - r ;
40701: LD_ADDR_VAR 0 8
40705: PUSH
40706: LD_VAR 0 3
40710: PUSH
40711: LD_VAR 0 4
40715: MINUS
40716: ST_TO_ADDR
// max_x := x + r ;
40717: LD_ADDR_VAR 0 9
40721: PUSH
40722: LD_VAR 0 2
40726: PUSH
40727: LD_VAR 0 4
40731: PLUS
40732: ST_TO_ADDR
// max_y := y + r ;
40733: LD_ADDR_VAR 0 10
40737: PUSH
40738: LD_VAR 0 3
40742: PUSH
40743: LD_VAR 0 4
40747: PLUS
40748: ST_TO_ADDR
// for _x = min_x to max_x do
40749: LD_ADDR_VAR 0 11
40753: PUSH
40754: DOUBLE
40755: LD_VAR 0 7
40759: DEC
40760: ST_TO_ADDR
40761: LD_VAR 0 9
40765: PUSH
40766: FOR_TO
40767: IFFALSE 40884
// for _y = min_y to max_y do
40769: LD_ADDR_VAR 0 12
40773: PUSH
40774: DOUBLE
40775: LD_VAR 0 8
40779: DEC
40780: ST_TO_ADDR
40781: LD_VAR 0 10
40785: PUSH
40786: FOR_TO
40787: IFFALSE 40880
// begin if not ValidHex ( _x , _y ) then
40789: LD_VAR 0 11
40793: PPUSH
40794: LD_VAR 0 12
40798: PPUSH
40799: CALL_OW 488
40803: NOT
40804: IFFALSE 40808
// continue ;
40806: GO 40786
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40808: LD_VAR 0 11
40812: PPUSH
40813: LD_VAR 0 12
40817: PPUSH
40818: CALL_OW 351
40822: PUSH
40823: LD_VAR 0 11
40827: PPUSH
40828: LD_VAR 0 12
40832: PPUSH
40833: CALL_OW 554
40837: AND
40838: IFFALSE 40878
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
40840: LD_ADDR_VAR 0 13
40844: PUSH
40845: LD_VAR 0 13
40849: PPUSH
40850: LD_VAR 0 13
40854: PUSH
40855: LD_INT 1
40857: PLUS
40858: PPUSH
40859: LD_VAR 0 11
40863: PUSH
40864: LD_VAR 0 12
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PPUSH
40873: CALL_OW 2
40877: ST_TO_ADDR
// end ;
40878: GO 40786
40880: POP
40881: POP
40882: GO 40766
40884: POP
40885: POP
// if not list then
40886: LD_VAR 0 13
40890: NOT
40891: IFFALSE 40895
// exit ;
40893: GO 40966
// for i in list do
40895: LD_ADDR_VAR 0 6
40899: PUSH
40900: LD_VAR 0 13
40904: PUSH
40905: FOR_IN
40906: IFFALSE 40964
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
40908: LD_VAR 0 1
40912: PPUSH
40913: LD_STRING M
40915: PUSH
40916: LD_VAR 0 6
40920: PUSH
40921: LD_INT 1
40923: ARRAY
40924: PUSH
40925: LD_VAR 0 6
40929: PUSH
40930: LD_INT 2
40932: ARRAY
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: PPUSH
40958: CALL_OW 447
40962: GO 40905
40964: POP
40965: POP
// end ;
40966: LD_VAR 0 5
40970: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40971: LD_EXP 127
40975: NOT
40976: IFFALSE 41026
40978: GO 40980
40980: DISABLE
// begin initHack := true ;
40981: LD_ADDR_EXP 127
40985: PUSH
40986: LD_INT 1
40988: ST_TO_ADDR
// hackTanks := [ ] ;
40989: LD_ADDR_EXP 128
40993: PUSH
40994: EMPTY
40995: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40996: LD_ADDR_EXP 129
41000: PUSH
41001: EMPTY
41002: ST_TO_ADDR
// hackLimit := 3 ;
41003: LD_ADDR_EXP 130
41007: PUSH
41008: LD_INT 3
41010: ST_TO_ADDR
// hackDist := 12 ;
41011: LD_ADDR_EXP 131
41015: PUSH
41016: LD_INT 12
41018: ST_TO_ADDR
// hackCounter := [ ] ;
41019: LD_ADDR_EXP 132
41023: PUSH
41024: EMPTY
41025: ST_TO_ADDR
// end ;
41026: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41027: LD_EXP 127
41031: PUSH
41032: LD_INT 34
41034: PUSH
41035: LD_INT 99
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PPUSH
41042: CALL_OW 69
41046: AND
41047: IFFALSE 41300
41049: GO 41051
41051: DISABLE
41052: LD_INT 0
41054: PPUSH
41055: PPUSH
// begin enable ;
41056: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41057: LD_ADDR_VAR 0 1
41061: PUSH
41062: LD_INT 34
41064: PUSH
41065: LD_INT 99
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PPUSH
41072: CALL_OW 69
41076: PUSH
41077: FOR_IN
41078: IFFALSE 41298
// begin if not i in hackTanks then
41080: LD_VAR 0 1
41084: PUSH
41085: LD_EXP 128
41089: IN
41090: NOT
41091: IFFALSE 41174
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41093: LD_ADDR_EXP 128
41097: PUSH
41098: LD_EXP 128
41102: PPUSH
41103: LD_EXP 128
41107: PUSH
41108: LD_INT 1
41110: PLUS
41111: PPUSH
41112: LD_VAR 0 1
41116: PPUSH
41117: CALL_OW 1
41121: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41122: LD_ADDR_EXP 129
41126: PUSH
41127: LD_EXP 129
41131: PPUSH
41132: LD_EXP 129
41136: PUSH
41137: LD_INT 1
41139: PLUS
41140: PPUSH
41141: EMPTY
41142: PPUSH
41143: CALL_OW 1
41147: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41148: LD_ADDR_EXP 132
41152: PUSH
41153: LD_EXP 132
41157: PPUSH
41158: LD_EXP 132
41162: PUSH
41163: LD_INT 1
41165: PLUS
41166: PPUSH
41167: EMPTY
41168: PPUSH
41169: CALL_OW 1
41173: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41174: LD_VAR 0 1
41178: PPUSH
41179: CALL_OW 302
41183: NOT
41184: IFFALSE 41197
// begin HackUnlinkAll ( i ) ;
41186: LD_VAR 0 1
41190: PPUSH
41191: CALL 41303 0 1
// continue ;
41195: GO 41077
// end ; HackCheckCapturedStatus ( i ) ;
41197: LD_VAR 0 1
41201: PPUSH
41202: CALL 41746 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41206: LD_ADDR_VAR 0 2
41210: PUSH
41211: LD_INT 81
41213: PUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 255
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 33
41230: PUSH
41231: LD_INT 3
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 91
41240: PUSH
41241: LD_VAR 0 1
41245: PUSH
41246: LD_EXP 131
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 50
41258: PUSH
41259: EMPTY
41260: LIST
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: PPUSH
41268: CALL_OW 69
41272: ST_TO_ADDR
// if not tmp then
41273: LD_VAR 0 2
41277: NOT
41278: IFFALSE 41282
// continue ;
41280: GO 41077
// HackLink ( i , tmp ) ;
41282: LD_VAR 0 1
41286: PPUSH
41287: LD_VAR 0 2
41291: PPUSH
41292: CALL 41439 0 2
// end ;
41296: GO 41077
41298: POP
41299: POP
// end ;
41300: PPOPN 2
41302: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41303: LD_INT 0
41305: PPUSH
41306: PPUSH
41307: PPUSH
// if not hack in hackTanks then
41308: LD_VAR 0 1
41312: PUSH
41313: LD_EXP 128
41317: IN
41318: NOT
41319: IFFALSE 41323
// exit ;
41321: GO 41434
// index := GetElementIndex ( hackTanks , hack ) ;
41323: LD_ADDR_VAR 0 4
41327: PUSH
41328: LD_EXP 128
41332: PPUSH
41333: LD_VAR 0 1
41337: PPUSH
41338: CALL 49051 0 2
41342: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41343: LD_EXP 129
41347: PUSH
41348: LD_VAR 0 4
41352: ARRAY
41353: IFFALSE 41434
// begin for i in hackTanksCaptured [ index ] do
41355: LD_ADDR_VAR 0 3
41359: PUSH
41360: LD_EXP 129
41364: PUSH
41365: LD_VAR 0 4
41369: ARRAY
41370: PUSH
41371: FOR_IN
41372: IFFALSE 41398
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41374: LD_VAR 0 3
41378: PUSH
41379: LD_INT 1
41381: ARRAY
41382: PPUSH
41383: LD_VAR 0 3
41387: PUSH
41388: LD_INT 2
41390: ARRAY
41391: PPUSH
41392: CALL_OW 235
41396: GO 41371
41398: POP
41399: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41400: LD_ADDR_EXP 129
41404: PUSH
41405: LD_EXP 129
41409: PPUSH
41410: LD_VAR 0 4
41414: PPUSH
41415: EMPTY
41416: PPUSH
41417: CALL_OW 1
41421: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41422: LD_VAR 0 1
41426: PPUSH
41427: LD_INT 0
41429: PPUSH
41430: CALL_OW 505
// end ; end ;
41434: LD_VAR 0 2
41438: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41439: LD_INT 0
41441: PPUSH
41442: PPUSH
41443: PPUSH
// if not hack in hackTanks or not vehicles then
41444: LD_VAR 0 1
41448: PUSH
41449: LD_EXP 128
41453: IN
41454: NOT
41455: PUSH
41456: LD_VAR 0 2
41460: NOT
41461: OR
41462: IFFALSE 41466
// exit ;
41464: GO 41741
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41466: LD_ADDR_VAR 0 2
41470: PUSH
41471: LD_VAR 0 1
41475: PPUSH
41476: LD_VAR 0 2
41480: PPUSH
41481: LD_INT 1
41483: PPUSH
41484: LD_INT 1
41486: PPUSH
41487: CALL 49701 0 4
41491: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41492: LD_ADDR_VAR 0 5
41496: PUSH
41497: LD_EXP 128
41501: PPUSH
41502: LD_VAR 0 1
41506: PPUSH
41507: CALL 49051 0 2
41511: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41512: LD_EXP 129
41516: PUSH
41517: LD_VAR 0 5
41521: ARRAY
41522: PUSH
41523: LD_EXP 130
41527: LESS
41528: IFFALSE 41717
// begin for i := 1 to vehicles do
41530: LD_ADDR_VAR 0 4
41534: PUSH
41535: DOUBLE
41536: LD_INT 1
41538: DEC
41539: ST_TO_ADDR
41540: LD_VAR 0 2
41544: PUSH
41545: FOR_TO
41546: IFFALSE 41715
// begin if hackTanksCaptured [ index ] = hackLimit then
41548: LD_EXP 129
41552: PUSH
41553: LD_VAR 0 5
41557: ARRAY
41558: PUSH
41559: LD_EXP 130
41563: EQUAL
41564: IFFALSE 41568
// break ;
41566: GO 41715
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41568: LD_ADDR_EXP 132
41572: PUSH
41573: LD_EXP 132
41577: PPUSH
41578: LD_VAR 0 5
41582: PPUSH
41583: LD_EXP 132
41587: PUSH
41588: LD_VAR 0 5
41592: ARRAY
41593: PUSH
41594: LD_INT 1
41596: PLUS
41597: PPUSH
41598: CALL_OW 1
41602: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41603: LD_ADDR_EXP 129
41607: PUSH
41608: LD_EXP 129
41612: PPUSH
41613: LD_VAR 0 5
41617: PUSH
41618: LD_EXP 129
41622: PUSH
41623: LD_VAR 0 5
41627: ARRAY
41628: PUSH
41629: LD_INT 1
41631: PLUS
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PPUSH
41637: LD_VAR 0 2
41641: PUSH
41642: LD_VAR 0 4
41646: ARRAY
41647: PUSH
41648: LD_VAR 0 2
41652: PUSH
41653: LD_VAR 0 4
41657: ARRAY
41658: PPUSH
41659: CALL_OW 255
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PPUSH
41668: CALL 49266 0 3
41672: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41673: LD_VAR 0 2
41677: PUSH
41678: LD_VAR 0 4
41682: ARRAY
41683: PPUSH
41684: LD_VAR 0 1
41688: PPUSH
41689: CALL_OW 255
41693: PPUSH
41694: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41698: LD_VAR 0 2
41702: PUSH
41703: LD_VAR 0 4
41707: ARRAY
41708: PPUSH
41709: CALL_OW 141
// end ;
41713: GO 41545
41715: POP
41716: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41717: LD_VAR 0 1
41721: PPUSH
41722: LD_EXP 129
41726: PUSH
41727: LD_VAR 0 5
41731: ARRAY
41732: PUSH
41733: LD_INT 0
41735: PLUS
41736: PPUSH
41737: CALL_OW 505
// end ;
41741: LD_VAR 0 3
41745: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41746: LD_INT 0
41748: PPUSH
41749: PPUSH
41750: PPUSH
41751: PPUSH
// if not hack in hackTanks then
41752: LD_VAR 0 1
41756: PUSH
41757: LD_EXP 128
41761: IN
41762: NOT
41763: IFFALSE 41767
// exit ;
41765: GO 42007
// index := GetElementIndex ( hackTanks , hack ) ;
41767: LD_ADDR_VAR 0 4
41771: PUSH
41772: LD_EXP 128
41776: PPUSH
41777: LD_VAR 0 1
41781: PPUSH
41782: CALL 49051 0 2
41786: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41787: LD_ADDR_VAR 0 3
41791: PUSH
41792: DOUBLE
41793: LD_EXP 129
41797: PUSH
41798: LD_VAR 0 4
41802: ARRAY
41803: INC
41804: ST_TO_ADDR
41805: LD_INT 1
41807: PUSH
41808: FOR_DOWNTO
41809: IFFALSE 41981
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41811: LD_ADDR_VAR 0 5
41815: PUSH
41816: LD_EXP 129
41820: PUSH
41821: LD_VAR 0 4
41825: ARRAY
41826: PUSH
41827: LD_VAR 0 3
41831: ARRAY
41832: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
41833: LD_VAR 0 5
41837: PUSH
41838: LD_INT 1
41840: ARRAY
41841: PPUSH
41842: CALL_OW 302
41846: NOT
41847: PUSH
41848: LD_VAR 0 5
41852: PUSH
41853: LD_INT 1
41855: ARRAY
41856: PPUSH
41857: CALL_OW 255
41861: PUSH
41862: LD_VAR 0 1
41866: PPUSH
41867: CALL_OW 255
41871: NONEQUAL
41872: OR
41873: IFFALSE 41979
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
41875: LD_VAR 0 5
41879: PUSH
41880: LD_INT 1
41882: ARRAY
41883: PPUSH
41884: CALL_OW 305
41888: PUSH
41889: LD_VAR 0 5
41893: PUSH
41894: LD_INT 1
41896: ARRAY
41897: PPUSH
41898: CALL_OW 255
41902: PUSH
41903: LD_VAR 0 1
41907: PPUSH
41908: CALL_OW 255
41912: EQUAL
41913: AND
41914: IFFALSE 41938
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
41916: LD_VAR 0 5
41920: PUSH
41921: LD_INT 1
41923: ARRAY
41924: PPUSH
41925: LD_VAR 0 5
41929: PUSH
41930: LD_INT 2
41932: ARRAY
41933: PPUSH
41934: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41938: LD_ADDR_EXP 129
41942: PUSH
41943: LD_EXP 129
41947: PPUSH
41948: LD_VAR 0 4
41952: PPUSH
41953: LD_EXP 129
41957: PUSH
41958: LD_VAR 0 4
41962: ARRAY
41963: PPUSH
41964: LD_VAR 0 3
41968: PPUSH
41969: CALL_OW 3
41973: PPUSH
41974: CALL_OW 1
41978: ST_TO_ADDR
// end ; end ;
41979: GO 41808
41981: POP
41982: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41983: LD_VAR 0 1
41987: PPUSH
41988: LD_EXP 129
41992: PUSH
41993: LD_VAR 0 4
41997: ARRAY
41998: PUSH
41999: LD_INT 0
42001: PLUS
42002: PPUSH
42003: CALL_OW 505
// end ;
42007: LD_VAR 0 2
42011: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42012: LD_INT 0
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
// if not hack in hackTanks then
42018: LD_VAR 0 1
42022: PUSH
42023: LD_EXP 128
42027: IN
42028: NOT
42029: IFFALSE 42033
// exit ;
42031: GO 42118
// index := GetElementIndex ( hackTanks , hack ) ;
42033: LD_ADDR_VAR 0 5
42037: PUSH
42038: LD_EXP 128
42042: PPUSH
42043: LD_VAR 0 1
42047: PPUSH
42048: CALL 49051 0 2
42052: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42053: LD_ADDR_VAR 0 4
42057: PUSH
42058: DOUBLE
42059: LD_INT 1
42061: DEC
42062: ST_TO_ADDR
42063: LD_EXP 129
42067: PUSH
42068: LD_VAR 0 5
42072: ARRAY
42073: PUSH
42074: FOR_TO
42075: IFFALSE 42116
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42077: LD_EXP 129
42081: PUSH
42082: LD_VAR 0 5
42086: ARRAY
42087: PUSH
42088: LD_VAR 0 4
42092: ARRAY
42093: PUSH
42094: LD_INT 1
42096: ARRAY
42097: PUSH
42098: LD_VAR 0 2
42102: EQUAL
42103: IFFALSE 42114
// KillUnit ( vehicle ) ;
42105: LD_VAR 0 2
42109: PPUSH
42110: CALL_OW 66
42114: GO 42074
42116: POP
42117: POP
// end ;
42118: LD_VAR 0 3
42122: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42123: LD_EXP 133
42127: NOT
42128: IFFALSE 42163
42130: GO 42132
42132: DISABLE
// begin initMiner := true ;
42133: LD_ADDR_EXP 133
42137: PUSH
42138: LD_INT 1
42140: ST_TO_ADDR
// minersList := [ ] ;
42141: LD_ADDR_EXP 134
42145: PUSH
42146: EMPTY
42147: ST_TO_ADDR
// minerMinesList := [ ] ;
42148: LD_ADDR_EXP 135
42152: PUSH
42153: EMPTY
42154: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42155: LD_ADDR_EXP 136
42159: PUSH
42160: LD_INT 5
42162: ST_TO_ADDR
// end ;
42163: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42164: LD_EXP 133
42168: PUSH
42169: LD_INT 34
42171: PUSH
42172: LD_INT 81
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PPUSH
42179: CALL_OW 69
42183: AND
42184: IFFALSE 42645
42186: GO 42188
42188: DISABLE
42189: LD_INT 0
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
// begin enable ;
42195: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42196: LD_ADDR_VAR 0 1
42200: PUSH
42201: LD_INT 34
42203: PUSH
42204: LD_INT 81
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PPUSH
42211: CALL_OW 69
42215: PUSH
42216: FOR_IN
42217: IFFALSE 42289
// begin if not i in minersList then
42219: LD_VAR 0 1
42223: PUSH
42224: LD_EXP 134
42228: IN
42229: NOT
42230: IFFALSE 42287
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42232: LD_ADDR_EXP 134
42236: PUSH
42237: LD_EXP 134
42241: PPUSH
42242: LD_EXP 134
42246: PUSH
42247: LD_INT 1
42249: PLUS
42250: PPUSH
42251: LD_VAR 0 1
42255: PPUSH
42256: CALL_OW 1
42260: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42261: LD_ADDR_EXP 135
42265: PUSH
42266: LD_EXP 135
42270: PPUSH
42271: LD_EXP 135
42275: PUSH
42276: LD_INT 1
42278: PLUS
42279: PPUSH
42280: EMPTY
42281: PPUSH
42282: CALL_OW 1
42286: ST_TO_ADDR
// end end ;
42287: GO 42216
42289: POP
42290: POP
// for i := minerMinesList downto 1 do
42291: LD_ADDR_VAR 0 1
42295: PUSH
42296: DOUBLE
42297: LD_EXP 135
42301: INC
42302: ST_TO_ADDR
42303: LD_INT 1
42305: PUSH
42306: FOR_DOWNTO
42307: IFFALSE 42643
// begin if IsLive ( minersList [ i ] ) then
42309: LD_EXP 134
42313: PUSH
42314: LD_VAR 0 1
42318: ARRAY
42319: PPUSH
42320: CALL_OW 300
42324: IFFALSE 42352
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42326: LD_EXP 134
42330: PUSH
42331: LD_VAR 0 1
42335: ARRAY
42336: PPUSH
42337: LD_EXP 135
42341: PUSH
42342: LD_VAR 0 1
42346: ARRAY
42347: PPUSH
42348: CALL_OW 505
// if not minerMinesList [ i ] then
42352: LD_EXP 135
42356: PUSH
42357: LD_VAR 0 1
42361: ARRAY
42362: NOT
42363: IFFALSE 42367
// continue ;
42365: GO 42306
// for j := minerMinesList [ i ] downto 1 do
42367: LD_ADDR_VAR 0 2
42371: PUSH
42372: DOUBLE
42373: LD_EXP 135
42377: PUSH
42378: LD_VAR 0 1
42382: ARRAY
42383: INC
42384: ST_TO_ADDR
42385: LD_INT 1
42387: PUSH
42388: FOR_DOWNTO
42389: IFFALSE 42639
// begin side := GetSide ( minersList [ i ] ) ;
42391: LD_ADDR_VAR 0 3
42395: PUSH
42396: LD_EXP 134
42400: PUSH
42401: LD_VAR 0 1
42405: ARRAY
42406: PPUSH
42407: CALL_OW 255
42411: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42412: LD_ADDR_VAR 0 4
42416: PUSH
42417: LD_EXP 135
42421: PUSH
42422: LD_VAR 0 1
42426: ARRAY
42427: PUSH
42428: LD_VAR 0 2
42432: ARRAY
42433: PUSH
42434: LD_INT 1
42436: ARRAY
42437: PPUSH
42438: LD_EXP 135
42442: PUSH
42443: LD_VAR 0 1
42447: ARRAY
42448: PUSH
42449: LD_VAR 0 2
42453: ARRAY
42454: PUSH
42455: LD_INT 2
42457: ARRAY
42458: PPUSH
42459: CALL_OW 428
42463: ST_TO_ADDR
// if not tmp then
42464: LD_VAR 0 4
42468: NOT
42469: IFFALSE 42473
// continue ;
42471: GO 42388
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42473: LD_VAR 0 4
42477: PUSH
42478: LD_INT 81
42480: PUSH
42481: LD_VAR 0 3
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PPUSH
42490: CALL_OW 69
42494: IN
42495: PUSH
42496: LD_EXP 135
42500: PUSH
42501: LD_VAR 0 1
42505: ARRAY
42506: PUSH
42507: LD_VAR 0 2
42511: ARRAY
42512: PUSH
42513: LD_INT 1
42515: ARRAY
42516: PPUSH
42517: LD_EXP 135
42521: PUSH
42522: LD_VAR 0 1
42526: ARRAY
42527: PUSH
42528: LD_VAR 0 2
42532: ARRAY
42533: PUSH
42534: LD_INT 2
42536: ARRAY
42537: PPUSH
42538: CALL_OW 458
42542: AND
42543: IFFALSE 42637
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42545: LD_EXP 135
42549: PUSH
42550: LD_VAR 0 1
42554: ARRAY
42555: PUSH
42556: LD_VAR 0 2
42560: ARRAY
42561: PUSH
42562: LD_INT 1
42564: ARRAY
42565: PPUSH
42566: LD_EXP 135
42570: PUSH
42571: LD_VAR 0 1
42575: ARRAY
42576: PUSH
42577: LD_VAR 0 2
42581: ARRAY
42582: PUSH
42583: LD_INT 2
42585: ARRAY
42586: PPUSH
42587: LD_VAR 0 3
42591: PPUSH
42592: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42596: LD_ADDR_EXP 135
42600: PUSH
42601: LD_EXP 135
42605: PPUSH
42606: LD_VAR 0 1
42610: PPUSH
42611: LD_EXP 135
42615: PUSH
42616: LD_VAR 0 1
42620: ARRAY
42621: PPUSH
42622: LD_VAR 0 2
42626: PPUSH
42627: CALL_OW 3
42631: PPUSH
42632: CALL_OW 1
42636: ST_TO_ADDR
// end ; end ;
42637: GO 42388
42639: POP
42640: POP
// end ;
42641: GO 42306
42643: POP
42644: POP
// end ;
42645: PPOPN 4
42647: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
42648: LD_INT 0
42650: PPUSH
42651: PPUSH
// result := false ;
42652: LD_ADDR_VAR 0 4
42656: PUSH
42657: LD_INT 0
42659: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42660: LD_VAR 0 1
42664: PPUSH
42665: CALL_OW 264
42669: PUSH
42670: LD_INT 81
42672: EQUAL
42673: NOT
42674: IFFALSE 42678
// exit ;
42676: GO 42918
// index := GetElementIndex ( minersList , unit ) ;
42678: LD_ADDR_VAR 0 5
42682: PUSH
42683: LD_EXP 134
42687: PPUSH
42688: LD_VAR 0 1
42692: PPUSH
42693: CALL 49051 0 2
42697: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42698: LD_EXP 135
42702: PUSH
42703: LD_VAR 0 5
42707: ARRAY
42708: PUSH
42709: LD_EXP 136
42713: GREATEREQUAL
42714: IFFALSE 42718
// exit ;
42716: GO 42918
// ComMoveXY ( unit , x , y ) ;
42718: LD_VAR 0 1
42722: PPUSH
42723: LD_VAR 0 2
42727: PPUSH
42728: LD_VAR 0 3
42732: PPUSH
42733: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42737: LD_INT 35
42739: PPUSH
42740: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42744: LD_VAR 0 1
42748: PPUSH
42749: LD_VAR 0 2
42753: PPUSH
42754: LD_VAR 0 3
42758: PPUSH
42759: CALL 80406 0 3
42763: NOT
42764: PUSH
42765: LD_VAR 0 1
42769: PPUSH
42770: CALL_OW 314
42774: AND
42775: IFFALSE 42779
// exit ;
42777: GO 42918
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42779: LD_VAR 0 2
42783: PPUSH
42784: LD_VAR 0 3
42788: PPUSH
42789: CALL_OW 428
42793: PUSH
42794: LD_VAR 0 1
42798: EQUAL
42799: PUSH
42800: LD_VAR 0 1
42804: PPUSH
42805: CALL_OW 314
42809: NOT
42810: AND
42811: IFFALSE 42737
// PlaySoundXY ( x , y , PlantMine ) ;
42813: LD_VAR 0 2
42817: PPUSH
42818: LD_VAR 0 3
42822: PPUSH
42823: LD_STRING PlantMine
42825: PPUSH
42826: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
42830: LD_VAR 0 2
42834: PPUSH
42835: LD_VAR 0 3
42839: PPUSH
42840: LD_VAR 0 1
42844: PPUSH
42845: CALL_OW 255
42849: PPUSH
42850: LD_INT 0
42852: PPUSH
42853: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
42857: LD_ADDR_EXP 135
42861: PUSH
42862: LD_EXP 135
42866: PPUSH
42867: LD_VAR 0 5
42871: PUSH
42872: LD_EXP 135
42876: PUSH
42877: LD_VAR 0 5
42881: ARRAY
42882: PUSH
42883: LD_INT 1
42885: PLUS
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PPUSH
42891: LD_VAR 0 2
42895: PUSH
42896: LD_VAR 0 3
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PPUSH
42905: CALL 49266 0 3
42909: ST_TO_ADDR
// result := true ;
42910: LD_ADDR_VAR 0 4
42914: PUSH
42915: LD_INT 1
42917: ST_TO_ADDR
// end ;
42918: LD_VAR 0 4
42922: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
42923: LD_INT 0
42925: PPUSH
42926: PPUSH
42927: PPUSH
// if not unit in minersList then
42928: LD_VAR 0 1
42932: PUSH
42933: LD_EXP 134
42937: IN
42938: NOT
42939: IFFALSE 42943
// exit ;
42941: GO 43335
// index := GetElementIndex ( minersList , unit ) ;
42943: LD_ADDR_VAR 0 6
42947: PUSH
42948: LD_EXP 134
42952: PPUSH
42953: LD_VAR 0 1
42957: PPUSH
42958: CALL 49051 0 2
42962: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
42963: LD_ADDR_VAR 0 5
42967: PUSH
42968: DOUBLE
42969: LD_EXP 135
42973: PUSH
42974: LD_VAR 0 6
42978: ARRAY
42979: INC
42980: ST_TO_ADDR
42981: LD_INT 1
42983: PUSH
42984: FOR_DOWNTO
42985: IFFALSE 43146
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
42987: LD_EXP 135
42991: PUSH
42992: LD_VAR 0 6
42996: ARRAY
42997: PUSH
42998: LD_VAR 0 5
43002: ARRAY
43003: PUSH
43004: LD_INT 1
43006: ARRAY
43007: PUSH
43008: LD_VAR 0 2
43012: EQUAL
43013: PUSH
43014: LD_EXP 135
43018: PUSH
43019: LD_VAR 0 6
43023: ARRAY
43024: PUSH
43025: LD_VAR 0 5
43029: ARRAY
43030: PUSH
43031: LD_INT 2
43033: ARRAY
43034: PUSH
43035: LD_VAR 0 3
43039: EQUAL
43040: AND
43041: IFFALSE 43144
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43043: LD_EXP 135
43047: PUSH
43048: LD_VAR 0 6
43052: ARRAY
43053: PUSH
43054: LD_VAR 0 5
43058: ARRAY
43059: PUSH
43060: LD_INT 1
43062: ARRAY
43063: PPUSH
43064: LD_EXP 135
43068: PUSH
43069: LD_VAR 0 6
43073: ARRAY
43074: PUSH
43075: LD_VAR 0 5
43079: ARRAY
43080: PUSH
43081: LD_INT 2
43083: ARRAY
43084: PPUSH
43085: LD_VAR 0 1
43089: PPUSH
43090: CALL_OW 255
43094: PPUSH
43095: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43099: LD_ADDR_EXP 135
43103: PUSH
43104: LD_EXP 135
43108: PPUSH
43109: LD_VAR 0 6
43113: PPUSH
43114: LD_EXP 135
43118: PUSH
43119: LD_VAR 0 6
43123: ARRAY
43124: PPUSH
43125: LD_VAR 0 5
43129: PPUSH
43130: CALL_OW 3
43134: PPUSH
43135: CALL_OW 1
43139: ST_TO_ADDR
// exit ;
43140: POP
43141: POP
43142: GO 43335
// end ; end ;
43144: GO 42984
43146: POP
43147: POP
// for i := minerMinesList [ index ] downto 1 do
43148: LD_ADDR_VAR 0 5
43152: PUSH
43153: DOUBLE
43154: LD_EXP 135
43158: PUSH
43159: LD_VAR 0 6
43163: ARRAY
43164: INC
43165: ST_TO_ADDR
43166: LD_INT 1
43168: PUSH
43169: FOR_DOWNTO
43170: IFFALSE 43333
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43172: LD_EXP 135
43176: PUSH
43177: LD_VAR 0 6
43181: ARRAY
43182: PUSH
43183: LD_VAR 0 5
43187: ARRAY
43188: PUSH
43189: LD_INT 1
43191: ARRAY
43192: PPUSH
43193: LD_EXP 135
43197: PUSH
43198: LD_VAR 0 6
43202: ARRAY
43203: PUSH
43204: LD_VAR 0 5
43208: ARRAY
43209: PUSH
43210: LD_INT 2
43212: ARRAY
43213: PPUSH
43214: LD_VAR 0 2
43218: PPUSH
43219: LD_VAR 0 3
43223: PPUSH
43224: CALL_OW 298
43228: PUSH
43229: LD_INT 6
43231: LESS
43232: IFFALSE 43331
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43234: LD_EXP 135
43238: PUSH
43239: LD_VAR 0 6
43243: ARRAY
43244: PUSH
43245: LD_VAR 0 5
43249: ARRAY
43250: PUSH
43251: LD_INT 1
43253: ARRAY
43254: PPUSH
43255: LD_EXP 135
43259: PUSH
43260: LD_VAR 0 6
43264: ARRAY
43265: PUSH
43266: LD_VAR 0 5
43270: ARRAY
43271: PUSH
43272: LD_INT 2
43274: ARRAY
43275: PPUSH
43276: LD_VAR 0 1
43280: PPUSH
43281: CALL_OW 255
43285: PPUSH
43286: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43290: LD_ADDR_EXP 135
43294: PUSH
43295: LD_EXP 135
43299: PPUSH
43300: LD_VAR 0 6
43304: PPUSH
43305: LD_EXP 135
43309: PUSH
43310: LD_VAR 0 6
43314: ARRAY
43315: PPUSH
43316: LD_VAR 0 5
43320: PPUSH
43321: CALL_OW 3
43325: PPUSH
43326: CALL_OW 1
43330: ST_TO_ADDR
// end ; end ;
43331: GO 43169
43333: POP
43334: POP
// end ;
43335: LD_VAR 0 4
43339: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43340: LD_INT 0
43342: PPUSH
43343: PPUSH
43344: PPUSH
43345: PPUSH
43346: PPUSH
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43351: LD_VAR 0 1
43355: PPUSH
43356: CALL_OW 264
43360: PUSH
43361: LD_INT 81
43363: EQUAL
43364: NOT
43365: PUSH
43366: LD_VAR 0 1
43370: PUSH
43371: LD_EXP 134
43375: IN
43376: NOT
43377: OR
43378: IFFALSE 43382
// exit ;
43380: GO 43704
// index := GetElementIndex ( minersList , unit ) ;
43382: LD_ADDR_VAR 0 6
43386: PUSH
43387: LD_EXP 134
43391: PPUSH
43392: LD_VAR 0 1
43396: PPUSH
43397: CALL 49051 0 2
43401: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43402: LD_ADDR_VAR 0 8
43406: PUSH
43407: LD_EXP 136
43411: PUSH
43412: LD_EXP 135
43416: PUSH
43417: LD_VAR 0 6
43421: ARRAY
43422: MINUS
43423: ST_TO_ADDR
// if not minesFreeAmount then
43424: LD_VAR 0 8
43428: NOT
43429: IFFALSE 43433
// exit ;
43431: GO 43704
// tmp := [ ] ;
43433: LD_ADDR_VAR 0 7
43437: PUSH
43438: EMPTY
43439: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43440: LD_ADDR_VAR 0 5
43444: PUSH
43445: DOUBLE
43446: LD_INT 1
43448: DEC
43449: ST_TO_ADDR
43450: LD_VAR 0 8
43454: PUSH
43455: FOR_TO
43456: IFFALSE 43651
// begin _d := rand ( 0 , 5 ) ;
43458: LD_ADDR_VAR 0 11
43462: PUSH
43463: LD_INT 0
43465: PPUSH
43466: LD_INT 5
43468: PPUSH
43469: CALL_OW 12
43473: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43474: LD_ADDR_VAR 0 12
43478: PUSH
43479: LD_INT 2
43481: PPUSH
43482: LD_INT 6
43484: PPUSH
43485: CALL_OW 12
43489: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43490: LD_ADDR_VAR 0 9
43494: PUSH
43495: LD_VAR 0 2
43499: PPUSH
43500: LD_VAR 0 11
43504: PPUSH
43505: LD_VAR 0 12
43509: PPUSH
43510: CALL_OW 272
43514: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43515: LD_ADDR_VAR 0 10
43519: PUSH
43520: LD_VAR 0 3
43524: PPUSH
43525: LD_VAR 0 11
43529: PPUSH
43530: LD_VAR 0 12
43534: PPUSH
43535: CALL_OW 273
43539: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43540: LD_VAR 0 9
43544: PPUSH
43545: LD_VAR 0 10
43549: PPUSH
43550: CALL_OW 488
43554: PUSH
43555: LD_VAR 0 9
43559: PUSH
43560: LD_VAR 0 10
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_VAR 0 7
43573: IN
43574: NOT
43575: AND
43576: PUSH
43577: LD_VAR 0 9
43581: PPUSH
43582: LD_VAR 0 10
43586: PPUSH
43587: CALL_OW 458
43591: NOT
43592: AND
43593: IFFALSE 43635
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43595: LD_ADDR_VAR 0 7
43599: PUSH
43600: LD_VAR 0 7
43604: PPUSH
43605: LD_VAR 0 7
43609: PUSH
43610: LD_INT 1
43612: PLUS
43613: PPUSH
43614: LD_VAR 0 9
43618: PUSH
43619: LD_VAR 0 10
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PPUSH
43628: CALL_OW 1
43632: ST_TO_ADDR
43633: GO 43649
// i := i - 1 ;
43635: LD_ADDR_VAR 0 5
43639: PUSH
43640: LD_VAR 0 5
43644: PUSH
43645: LD_INT 1
43647: MINUS
43648: ST_TO_ADDR
// end ;
43649: GO 43455
43651: POP
43652: POP
// for i in tmp do
43653: LD_ADDR_VAR 0 5
43657: PUSH
43658: LD_VAR 0 7
43662: PUSH
43663: FOR_IN
43664: IFFALSE 43702
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43666: LD_VAR 0 1
43670: PPUSH
43671: LD_VAR 0 5
43675: PUSH
43676: LD_INT 1
43678: ARRAY
43679: PPUSH
43680: LD_VAR 0 5
43684: PUSH
43685: LD_INT 2
43687: ARRAY
43688: PPUSH
43689: CALL 42648 0 3
43693: NOT
43694: IFFALSE 43700
// exit ;
43696: POP
43697: POP
43698: GO 43704
43700: GO 43663
43702: POP
43703: POP
// end ;
43704: LD_VAR 0 4
43708: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
43709: LD_INT 0
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
43715: PPUSH
43716: PPUSH
43717: PPUSH
// if not GetClass ( unit ) = class_sniper then
43718: LD_VAR 0 1
43722: PPUSH
43723: CALL_OW 257
43727: PUSH
43728: LD_INT 5
43730: EQUAL
43731: NOT
43732: IFFALSE 43736
// exit ;
43734: GO 44124
// dist := 8 ;
43736: LD_ADDR_VAR 0 5
43740: PUSH
43741: LD_INT 8
43743: ST_TO_ADDR
// viewRange := 12 ;
43744: LD_ADDR_VAR 0 7
43748: PUSH
43749: LD_INT 12
43751: ST_TO_ADDR
// side := GetSide ( unit ) ;
43752: LD_ADDR_VAR 0 6
43756: PUSH
43757: LD_VAR 0 1
43761: PPUSH
43762: CALL_OW 255
43766: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43767: LD_INT 61
43769: PPUSH
43770: LD_VAR 0 6
43774: PPUSH
43775: CALL_OW 321
43779: PUSH
43780: LD_INT 2
43782: EQUAL
43783: IFFALSE 43793
// viewRange := 16 ;
43785: LD_ADDR_VAR 0 7
43789: PUSH
43790: LD_INT 16
43792: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43793: LD_VAR 0 1
43797: PPUSH
43798: LD_VAR 0 2
43802: PPUSH
43803: LD_VAR 0 3
43807: PPUSH
43808: CALL_OW 297
43812: PUSH
43813: LD_VAR 0 5
43817: GREATER
43818: IFFALSE 43897
// begin ComMoveXY ( unit , x , y ) ;
43820: LD_VAR 0 1
43824: PPUSH
43825: LD_VAR 0 2
43829: PPUSH
43830: LD_VAR 0 3
43834: PPUSH
43835: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43839: LD_INT 35
43841: PPUSH
43842: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
43846: LD_VAR 0 1
43850: PPUSH
43851: LD_VAR 0 2
43855: PPUSH
43856: LD_VAR 0 3
43860: PPUSH
43861: CALL 80406 0 3
43865: NOT
43866: IFFALSE 43870
// exit ;
43868: GO 44124
// until GetDistUnitXY ( unit , x , y ) < dist ;
43870: LD_VAR 0 1
43874: PPUSH
43875: LD_VAR 0 2
43879: PPUSH
43880: LD_VAR 0 3
43884: PPUSH
43885: CALL_OW 297
43889: PUSH
43890: LD_VAR 0 5
43894: LESS
43895: IFFALSE 43839
// end ; ComTurnXY ( unit , x , y ) ;
43897: LD_VAR 0 1
43901: PPUSH
43902: LD_VAR 0 2
43906: PPUSH
43907: LD_VAR 0 3
43911: PPUSH
43912: CALL_OW 118
// wait ( 5 ) ;
43916: LD_INT 5
43918: PPUSH
43919: CALL_OW 67
// _d := GetDir ( unit ) ;
43923: LD_ADDR_VAR 0 10
43927: PUSH
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL_OW 254
43937: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
43938: LD_ADDR_VAR 0 8
43942: PUSH
43943: LD_VAR 0 1
43947: PPUSH
43948: CALL_OW 250
43952: PPUSH
43953: LD_VAR 0 10
43957: PPUSH
43958: LD_VAR 0 5
43962: PPUSH
43963: CALL_OW 272
43967: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
43968: LD_ADDR_VAR 0 9
43972: PUSH
43973: LD_VAR 0 1
43977: PPUSH
43978: CALL_OW 251
43982: PPUSH
43983: LD_VAR 0 10
43987: PPUSH
43988: LD_VAR 0 5
43992: PPUSH
43993: CALL_OW 273
43997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43998: LD_VAR 0 8
44002: PPUSH
44003: LD_VAR 0 9
44007: PPUSH
44008: CALL_OW 488
44012: NOT
44013: IFFALSE 44017
// exit ;
44015: GO 44124
// ComAnimCustom ( unit , 1 ) ;
44017: LD_VAR 0 1
44021: PPUSH
44022: LD_INT 1
44024: PPUSH
44025: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44029: LD_VAR 0 8
44033: PPUSH
44034: LD_VAR 0 9
44038: PPUSH
44039: LD_VAR 0 6
44043: PPUSH
44044: LD_VAR 0 7
44048: PPUSH
44049: CALL_OW 330
// repeat wait ( 1 ) ;
44053: LD_INT 1
44055: PPUSH
44056: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44060: LD_VAR 0 1
44064: PPUSH
44065: CALL_OW 316
44069: PUSH
44070: LD_VAR 0 1
44074: PPUSH
44075: CALL_OW 314
44079: OR
44080: PUSH
44081: LD_VAR 0 1
44085: PPUSH
44086: CALL_OW 302
44090: NOT
44091: OR
44092: PUSH
44093: LD_VAR 0 1
44097: PPUSH
44098: CALL_OW 301
44102: OR
44103: IFFALSE 44053
// RemoveSeeing ( _x , _y , side ) ;
44105: LD_VAR 0 8
44109: PPUSH
44110: LD_VAR 0 9
44114: PPUSH
44115: LD_VAR 0 6
44119: PPUSH
44120: CALL_OW 331
// end ; end_of_file
44124: LD_VAR 0 4
44128: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44129: LD_INT 0
44131: PPUSH
44132: PPUSH
// if exist_mode then
44133: LD_VAR 0 2
44137: IFFALSE 44162
// unit := CreateCharacter ( prefix & ident ) else
44139: LD_ADDR_VAR 0 5
44143: PUSH
44144: LD_VAR 0 3
44148: PUSH
44149: LD_VAR 0 1
44153: STR
44154: PPUSH
44155: CALL_OW 34
44159: ST_TO_ADDR
44160: GO 44177
// unit := NewCharacter ( ident ) ;
44162: LD_ADDR_VAR 0 5
44166: PUSH
44167: LD_VAR 0 1
44171: PPUSH
44172: CALL_OW 25
44176: ST_TO_ADDR
// result := unit ;
44177: LD_ADDR_VAR 0 4
44181: PUSH
44182: LD_VAR 0 5
44186: ST_TO_ADDR
// end ;
44187: LD_VAR 0 4
44191: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44192: LD_INT 0
44194: PPUSH
44195: PPUSH
// if not side or not nation then
44196: LD_VAR 0 1
44200: NOT
44201: PUSH
44202: LD_VAR 0 2
44206: NOT
44207: OR
44208: IFFALSE 44212
// exit ;
44210: GO 44980
// case nation of nation_american :
44212: LD_VAR 0 2
44216: PUSH
44217: LD_INT 1
44219: DOUBLE
44220: EQUAL
44221: IFTRUE 44225
44223: GO 44439
44225: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
44226: LD_ADDR_VAR 0 4
44230: PUSH
44231: LD_INT 35
44233: PUSH
44234: LD_INT 45
44236: PUSH
44237: LD_INT 46
44239: PUSH
44240: LD_INT 47
44242: PUSH
44243: LD_INT 82
44245: PUSH
44246: LD_INT 83
44248: PUSH
44249: LD_INT 84
44251: PUSH
44252: LD_INT 85
44254: PUSH
44255: LD_INT 86
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 6
44266: PUSH
44267: LD_INT 15
44269: PUSH
44270: LD_INT 16
44272: PUSH
44273: LD_INT 7
44275: PUSH
44276: LD_INT 12
44278: PUSH
44279: LD_INT 13
44281: PUSH
44282: LD_INT 10
44284: PUSH
44285: LD_INT 14
44287: PUSH
44288: LD_INT 20
44290: PUSH
44291: LD_INT 21
44293: PUSH
44294: LD_INT 22
44296: PUSH
44297: LD_INT 25
44299: PUSH
44300: LD_INT 32
44302: PUSH
44303: LD_INT 27
44305: PUSH
44306: LD_INT 36
44308: PUSH
44309: LD_INT 69
44311: PUSH
44312: LD_INT 39
44314: PUSH
44315: LD_INT 34
44317: PUSH
44318: LD_INT 40
44320: PUSH
44321: LD_INT 48
44323: PUSH
44324: LD_INT 49
44326: PUSH
44327: LD_INT 50
44329: PUSH
44330: LD_INT 51
44332: PUSH
44333: LD_INT 52
44335: PUSH
44336: LD_INT 53
44338: PUSH
44339: LD_INT 54
44341: PUSH
44342: LD_INT 55
44344: PUSH
44345: LD_INT 56
44347: PUSH
44348: LD_INT 57
44350: PUSH
44351: LD_INT 58
44353: PUSH
44354: LD_INT 59
44356: PUSH
44357: LD_INT 60
44359: PUSH
44360: LD_INT 61
44362: PUSH
44363: LD_INT 62
44365: PUSH
44366: LD_INT 80
44368: PUSH
44369: LD_INT 82
44371: PUSH
44372: LD_INT 83
44374: PUSH
44375: LD_INT 84
44377: PUSH
44378: LD_INT 85
44380: PUSH
44381: LD_INT 86
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: ST_TO_ADDR
44437: GO 44904
44439: LD_INT 2
44441: DOUBLE
44442: EQUAL
44443: IFTRUE 44447
44445: GO 44673
44447: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
44448: LD_ADDR_VAR 0 4
44452: PUSH
44453: LD_INT 35
44455: PUSH
44456: LD_INT 45
44458: PUSH
44459: LD_INT 46
44461: PUSH
44462: LD_INT 47
44464: PUSH
44465: LD_INT 82
44467: PUSH
44468: LD_INT 83
44470: PUSH
44471: LD_INT 84
44473: PUSH
44474: LD_INT 85
44476: PUSH
44477: LD_INT 87
44479: PUSH
44480: LD_INT 70
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 11
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: LD_INT 4
44494: PUSH
44495: LD_INT 5
44497: PUSH
44498: LD_INT 6
44500: PUSH
44501: LD_INT 15
44503: PUSH
44504: LD_INT 18
44506: PUSH
44507: LD_INT 7
44509: PUSH
44510: LD_INT 17
44512: PUSH
44513: LD_INT 8
44515: PUSH
44516: LD_INT 20
44518: PUSH
44519: LD_INT 21
44521: PUSH
44522: LD_INT 22
44524: PUSH
44525: LD_INT 72
44527: PUSH
44528: LD_INT 26
44530: PUSH
44531: LD_INT 69
44533: PUSH
44534: LD_INT 39
44536: PUSH
44537: LD_INT 40
44539: PUSH
44540: LD_INT 41
44542: PUSH
44543: LD_INT 42
44545: PUSH
44546: LD_INT 43
44548: PUSH
44549: LD_INT 48
44551: PUSH
44552: LD_INT 49
44554: PUSH
44555: LD_INT 50
44557: PUSH
44558: LD_INT 51
44560: PUSH
44561: LD_INT 52
44563: PUSH
44564: LD_INT 53
44566: PUSH
44567: LD_INT 54
44569: PUSH
44570: LD_INT 55
44572: PUSH
44573: LD_INT 56
44575: PUSH
44576: LD_INT 60
44578: PUSH
44579: LD_INT 61
44581: PUSH
44582: LD_INT 62
44584: PUSH
44585: LD_INT 66
44587: PUSH
44588: LD_INT 67
44590: PUSH
44591: LD_INT 68
44593: PUSH
44594: LD_INT 81
44596: PUSH
44597: LD_INT 82
44599: PUSH
44600: LD_INT 83
44602: PUSH
44603: LD_INT 84
44605: PUSH
44606: LD_INT 85
44608: PUSH
44609: LD_INT 87
44611: PUSH
44612: LD_INT 88
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: ST_TO_ADDR
44671: GO 44904
44673: LD_INT 3
44675: DOUBLE
44676: EQUAL
44677: IFTRUE 44681
44679: GO 44903
44681: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44682: LD_ADDR_VAR 0 4
44686: PUSH
44687: LD_INT 46
44689: PUSH
44690: LD_INT 47
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: LD_INT 82
44701: PUSH
44702: LD_INT 83
44704: PUSH
44705: LD_INT 84
44707: PUSH
44708: LD_INT 85
44710: PUSH
44711: LD_INT 86
44713: PUSH
44714: LD_INT 11
44716: PUSH
44717: LD_INT 9
44719: PUSH
44720: LD_INT 20
44722: PUSH
44723: LD_INT 19
44725: PUSH
44726: LD_INT 21
44728: PUSH
44729: LD_INT 24
44731: PUSH
44732: LD_INT 22
44734: PUSH
44735: LD_INT 25
44737: PUSH
44738: LD_INT 28
44740: PUSH
44741: LD_INT 29
44743: PUSH
44744: LD_INT 30
44746: PUSH
44747: LD_INT 31
44749: PUSH
44750: LD_INT 37
44752: PUSH
44753: LD_INT 38
44755: PUSH
44756: LD_INT 32
44758: PUSH
44759: LD_INT 27
44761: PUSH
44762: LD_INT 33
44764: PUSH
44765: LD_INT 69
44767: PUSH
44768: LD_INT 39
44770: PUSH
44771: LD_INT 34
44773: PUSH
44774: LD_INT 40
44776: PUSH
44777: LD_INT 71
44779: PUSH
44780: LD_INT 23
44782: PUSH
44783: LD_INT 44
44785: PUSH
44786: LD_INT 48
44788: PUSH
44789: LD_INT 49
44791: PUSH
44792: LD_INT 50
44794: PUSH
44795: LD_INT 51
44797: PUSH
44798: LD_INT 52
44800: PUSH
44801: LD_INT 53
44803: PUSH
44804: LD_INT 54
44806: PUSH
44807: LD_INT 55
44809: PUSH
44810: LD_INT 56
44812: PUSH
44813: LD_INT 57
44815: PUSH
44816: LD_INT 58
44818: PUSH
44819: LD_INT 59
44821: PUSH
44822: LD_INT 63
44824: PUSH
44825: LD_INT 64
44827: PUSH
44828: LD_INT 65
44830: PUSH
44831: LD_INT 82
44833: PUSH
44834: LD_INT 83
44836: PUSH
44837: LD_INT 84
44839: PUSH
44840: LD_INT 85
44842: PUSH
44843: LD_INT 86
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: ST_TO_ADDR
44901: GO 44904
44903: POP
// if state > - 1 and state < 3 then
44904: LD_VAR 0 3
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: GREATER
44913: PUSH
44914: LD_VAR 0 3
44918: PUSH
44919: LD_INT 3
44921: LESS
44922: AND
44923: IFFALSE 44980
// for i in result do
44925: LD_ADDR_VAR 0 5
44929: PUSH
44930: LD_VAR 0 4
44934: PUSH
44935: FOR_IN
44936: IFFALSE 44978
// if GetTech ( i , side ) <> state then
44938: LD_VAR 0 5
44942: PPUSH
44943: LD_VAR 0 1
44947: PPUSH
44948: CALL_OW 321
44952: PUSH
44953: LD_VAR 0 3
44957: NONEQUAL
44958: IFFALSE 44976
// result := result diff i ;
44960: LD_ADDR_VAR 0 4
44964: PUSH
44965: LD_VAR 0 4
44969: PUSH
44970: LD_VAR 0 5
44974: DIFF
44975: ST_TO_ADDR
44976: GO 44935
44978: POP
44979: POP
// end ;
44980: LD_VAR 0 4
44984: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44985: LD_INT 0
44987: PPUSH
44988: PPUSH
44989: PPUSH
// result := true ;
44990: LD_ADDR_VAR 0 3
44994: PUSH
44995: LD_INT 1
44997: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44998: LD_ADDR_VAR 0 5
45002: PUSH
45003: LD_VAR 0 2
45007: PPUSH
45008: CALL_OW 480
45012: ST_TO_ADDR
// if not tmp then
45013: LD_VAR 0 5
45017: NOT
45018: IFFALSE 45022
// exit ;
45020: GO 45071
// for i in tmp do
45022: LD_ADDR_VAR 0 4
45026: PUSH
45027: LD_VAR 0 5
45031: PUSH
45032: FOR_IN
45033: IFFALSE 45069
// if GetTech ( i , side ) <> state_researched then
45035: LD_VAR 0 4
45039: PPUSH
45040: LD_VAR 0 1
45044: PPUSH
45045: CALL_OW 321
45049: PUSH
45050: LD_INT 2
45052: NONEQUAL
45053: IFFALSE 45067
// begin result := false ;
45055: LD_ADDR_VAR 0 3
45059: PUSH
45060: LD_INT 0
45062: ST_TO_ADDR
// exit ;
45063: POP
45064: POP
45065: GO 45071
// end ;
45067: GO 45032
45069: POP
45070: POP
// end ;
45071: LD_VAR 0 3
45075: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45076: LD_INT 0
45078: PPUSH
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
45086: PPUSH
45087: PPUSH
45088: PPUSH
45089: PPUSH
45090: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45091: LD_VAR 0 1
45095: NOT
45096: PUSH
45097: LD_VAR 0 1
45101: PPUSH
45102: CALL_OW 257
45106: PUSH
45107: LD_INT 9
45109: NONEQUAL
45110: OR
45111: IFFALSE 45115
// exit ;
45113: GO 45688
// side := GetSide ( unit ) ;
45115: LD_ADDR_VAR 0 9
45119: PUSH
45120: LD_VAR 0 1
45124: PPUSH
45125: CALL_OW 255
45129: ST_TO_ADDR
// tech_space := tech_spacanom ;
45130: LD_ADDR_VAR 0 12
45134: PUSH
45135: LD_INT 29
45137: ST_TO_ADDR
// tech_time := tech_taurad ;
45138: LD_ADDR_VAR 0 13
45142: PUSH
45143: LD_INT 28
45145: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45146: LD_ADDR_VAR 0 11
45150: PUSH
45151: LD_VAR 0 1
45155: PPUSH
45156: CALL_OW 310
45160: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45161: LD_VAR 0 11
45165: PPUSH
45166: CALL_OW 247
45170: PUSH
45171: LD_INT 2
45173: EQUAL
45174: IFFALSE 45178
// exit ;
45176: GO 45688
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45178: LD_ADDR_VAR 0 8
45182: PUSH
45183: LD_INT 81
45185: PUSH
45186: LD_VAR 0 9
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 3
45197: PUSH
45198: LD_INT 21
45200: PUSH
45201: LD_INT 3
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PPUSH
45216: CALL_OW 69
45220: ST_TO_ADDR
// if not tmp then
45221: LD_VAR 0 8
45225: NOT
45226: IFFALSE 45230
// exit ;
45228: GO 45688
// if in_unit then
45230: LD_VAR 0 11
45234: IFFALSE 45258
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45236: LD_ADDR_VAR 0 10
45240: PUSH
45241: LD_VAR 0 8
45245: PPUSH
45246: LD_VAR 0 11
45250: PPUSH
45251: CALL_OW 74
45255: ST_TO_ADDR
45256: GO 45278
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45258: LD_ADDR_VAR 0 10
45262: PUSH
45263: LD_VAR 0 8
45267: PPUSH
45268: LD_VAR 0 1
45272: PPUSH
45273: CALL_OW 74
45277: ST_TO_ADDR
// if not enemy then
45278: LD_VAR 0 10
45282: NOT
45283: IFFALSE 45287
// exit ;
45285: GO 45688
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45287: LD_VAR 0 11
45291: PUSH
45292: LD_VAR 0 11
45296: PPUSH
45297: LD_VAR 0 10
45301: PPUSH
45302: CALL_OW 296
45306: PUSH
45307: LD_INT 13
45309: GREATER
45310: AND
45311: PUSH
45312: LD_VAR 0 1
45316: PPUSH
45317: LD_VAR 0 10
45321: PPUSH
45322: CALL_OW 296
45326: PUSH
45327: LD_INT 12
45329: GREATER
45330: OR
45331: IFFALSE 45335
// exit ;
45333: GO 45688
// missile := [ 1 ] ;
45335: LD_ADDR_VAR 0 14
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45346: LD_VAR 0 9
45350: PPUSH
45351: LD_VAR 0 12
45355: PPUSH
45356: CALL_OW 325
45360: IFFALSE 45389
// missile := Replace ( missile , missile + 1 , 2 ) ;
45362: LD_ADDR_VAR 0 14
45366: PUSH
45367: LD_VAR 0 14
45371: PPUSH
45372: LD_VAR 0 14
45376: PUSH
45377: LD_INT 1
45379: PLUS
45380: PPUSH
45381: LD_INT 2
45383: PPUSH
45384: CALL_OW 1
45388: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45389: LD_VAR 0 9
45393: PPUSH
45394: LD_VAR 0 13
45398: PPUSH
45399: CALL_OW 325
45403: PUSH
45404: LD_VAR 0 10
45408: PPUSH
45409: CALL_OW 255
45413: PPUSH
45414: LD_VAR 0 13
45418: PPUSH
45419: CALL_OW 325
45423: NOT
45424: AND
45425: IFFALSE 45454
// missile := Replace ( missile , missile + 1 , 3 ) ;
45427: LD_ADDR_VAR 0 14
45431: PUSH
45432: LD_VAR 0 14
45436: PPUSH
45437: LD_VAR 0 14
45441: PUSH
45442: LD_INT 1
45444: PLUS
45445: PPUSH
45446: LD_INT 3
45448: PPUSH
45449: CALL_OW 1
45453: ST_TO_ADDR
// if missile < 2 then
45454: LD_VAR 0 14
45458: PUSH
45459: LD_INT 2
45461: LESS
45462: IFFALSE 45466
// exit ;
45464: GO 45688
// x := GetX ( enemy ) ;
45466: LD_ADDR_VAR 0 4
45470: PUSH
45471: LD_VAR 0 10
45475: PPUSH
45476: CALL_OW 250
45480: ST_TO_ADDR
// y := GetY ( enemy ) ;
45481: LD_ADDR_VAR 0 5
45485: PUSH
45486: LD_VAR 0 10
45490: PPUSH
45491: CALL_OW 251
45495: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45496: LD_ADDR_VAR 0 6
45500: PUSH
45501: LD_VAR 0 4
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PPUSH
45510: LD_INT 1
45512: PPUSH
45513: CALL_OW 12
45517: PLUS
45518: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45519: LD_ADDR_VAR 0 7
45523: PUSH
45524: LD_VAR 0 5
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PPUSH
45533: LD_INT 1
45535: PPUSH
45536: CALL_OW 12
45540: PLUS
45541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45542: LD_VAR 0 6
45546: PPUSH
45547: LD_VAR 0 7
45551: PPUSH
45552: CALL_OW 488
45556: NOT
45557: IFFALSE 45579
// begin _x := x ;
45559: LD_ADDR_VAR 0 6
45563: PUSH
45564: LD_VAR 0 4
45568: ST_TO_ADDR
// _y := y ;
45569: LD_ADDR_VAR 0 7
45573: PUSH
45574: LD_VAR 0 5
45578: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45579: LD_ADDR_VAR 0 3
45583: PUSH
45584: LD_INT 1
45586: PPUSH
45587: LD_VAR 0 14
45591: PPUSH
45592: CALL_OW 12
45596: ST_TO_ADDR
// case i of 1 :
45597: LD_VAR 0 3
45601: PUSH
45602: LD_INT 1
45604: DOUBLE
45605: EQUAL
45606: IFTRUE 45610
45608: GO 45627
45610: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45611: LD_VAR 0 1
45615: PPUSH
45616: LD_VAR 0 10
45620: PPUSH
45621: CALL_OW 115
45625: GO 45688
45627: LD_INT 2
45629: DOUBLE
45630: EQUAL
45631: IFTRUE 45635
45633: GO 45657
45635: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45636: LD_VAR 0 1
45640: PPUSH
45641: LD_VAR 0 6
45645: PPUSH
45646: LD_VAR 0 7
45650: PPUSH
45651: CALL_OW 153
45655: GO 45688
45657: LD_INT 3
45659: DOUBLE
45660: EQUAL
45661: IFTRUE 45665
45663: GO 45687
45665: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45666: LD_VAR 0 1
45670: PPUSH
45671: LD_VAR 0 6
45675: PPUSH
45676: LD_VAR 0 7
45680: PPUSH
45681: CALL_OW 154
45685: GO 45688
45687: POP
// end ;
45688: LD_VAR 0 2
45692: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45693: LD_INT 0
45695: PPUSH
45696: PPUSH
45697: PPUSH
45698: PPUSH
45699: PPUSH
45700: PPUSH
// if not unit or not building then
45701: LD_VAR 0 1
45705: NOT
45706: PUSH
45707: LD_VAR 0 2
45711: NOT
45712: OR
45713: IFFALSE 45717
// exit ;
45715: GO 45875
// x := GetX ( building ) ;
45717: LD_ADDR_VAR 0 5
45721: PUSH
45722: LD_VAR 0 2
45726: PPUSH
45727: CALL_OW 250
45731: ST_TO_ADDR
// y := GetY ( building ) ;
45732: LD_ADDR_VAR 0 6
45736: PUSH
45737: LD_VAR 0 2
45741: PPUSH
45742: CALL_OW 251
45746: ST_TO_ADDR
// for i = 0 to 5 do
45747: LD_ADDR_VAR 0 4
45751: PUSH
45752: DOUBLE
45753: LD_INT 0
45755: DEC
45756: ST_TO_ADDR
45757: LD_INT 5
45759: PUSH
45760: FOR_TO
45761: IFFALSE 45873
// begin _x := ShiftX ( x , i , 3 ) ;
45763: LD_ADDR_VAR 0 7
45767: PUSH
45768: LD_VAR 0 5
45772: PPUSH
45773: LD_VAR 0 4
45777: PPUSH
45778: LD_INT 3
45780: PPUSH
45781: CALL_OW 272
45785: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45786: LD_ADDR_VAR 0 8
45790: PUSH
45791: LD_VAR 0 6
45795: PPUSH
45796: LD_VAR 0 4
45800: PPUSH
45801: LD_INT 3
45803: PPUSH
45804: CALL_OW 273
45808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45809: LD_VAR 0 7
45813: PPUSH
45814: LD_VAR 0 8
45818: PPUSH
45819: CALL_OW 488
45823: NOT
45824: IFFALSE 45828
// continue ;
45826: GO 45760
// if HexInfo ( _x , _y ) = 0 then
45828: LD_VAR 0 7
45832: PPUSH
45833: LD_VAR 0 8
45837: PPUSH
45838: CALL_OW 428
45842: PUSH
45843: LD_INT 0
45845: EQUAL
45846: IFFALSE 45871
// begin ComMoveXY ( unit , _x , _y ) ;
45848: LD_VAR 0 1
45852: PPUSH
45853: LD_VAR 0 7
45857: PPUSH
45858: LD_VAR 0 8
45862: PPUSH
45863: CALL_OW 111
// exit ;
45867: POP
45868: POP
45869: GO 45875
// end ; end ;
45871: GO 45760
45873: POP
45874: POP
// end ;
45875: LD_VAR 0 3
45879: RET
// export function ScanBase ( side , base_area ) ; begin
45880: LD_INT 0
45882: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45883: LD_ADDR_VAR 0 3
45887: PUSH
45888: LD_VAR 0 2
45892: PPUSH
45893: LD_INT 81
45895: PUSH
45896: LD_VAR 0 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PPUSH
45905: CALL_OW 70
45909: ST_TO_ADDR
// end ;
45910: LD_VAR 0 3
45914: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45915: LD_INT 0
45917: PPUSH
45918: PPUSH
45919: PPUSH
45920: PPUSH
// result := false ;
45921: LD_ADDR_VAR 0 2
45925: PUSH
45926: LD_INT 0
45928: ST_TO_ADDR
// side := GetSide ( unit ) ;
45929: LD_ADDR_VAR 0 3
45933: PUSH
45934: LD_VAR 0 1
45938: PPUSH
45939: CALL_OW 255
45943: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45944: LD_ADDR_VAR 0 4
45948: PUSH
45949: LD_VAR 0 1
45953: PPUSH
45954: CALL_OW 248
45958: ST_TO_ADDR
// case nat of 1 :
45959: LD_VAR 0 4
45963: PUSH
45964: LD_INT 1
45966: DOUBLE
45967: EQUAL
45968: IFTRUE 45972
45970: GO 45983
45972: POP
// tech := tech_lassight ; 2 :
45973: LD_ADDR_VAR 0 5
45977: PUSH
45978: LD_INT 12
45980: ST_TO_ADDR
45981: GO 46022
45983: LD_INT 2
45985: DOUBLE
45986: EQUAL
45987: IFTRUE 45991
45989: GO 46002
45991: POP
// tech := tech_mortar ; 3 :
45992: LD_ADDR_VAR 0 5
45996: PUSH
45997: LD_INT 41
45999: ST_TO_ADDR
46000: GO 46022
46002: LD_INT 3
46004: DOUBLE
46005: EQUAL
46006: IFTRUE 46010
46008: GO 46021
46010: POP
// tech := tech_bazooka ; end ;
46011: LD_ADDR_VAR 0 5
46015: PUSH
46016: LD_INT 44
46018: ST_TO_ADDR
46019: GO 46022
46021: POP
// if Researched ( side , tech ) then
46022: LD_VAR 0 3
46026: PPUSH
46027: LD_VAR 0 5
46031: PPUSH
46032: CALL_OW 325
46036: IFFALSE 46063
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46038: LD_ADDR_VAR 0 2
46042: PUSH
46043: LD_INT 5
46045: PUSH
46046: LD_INT 8
46048: PUSH
46049: LD_INT 9
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: PUSH
46057: LD_VAR 0 4
46061: ARRAY
46062: ST_TO_ADDR
// end ;
46063: LD_VAR 0 2
46067: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46068: LD_INT 0
46070: PPUSH
46071: PPUSH
46072: PPUSH
// if not mines then
46073: LD_VAR 0 2
46077: NOT
46078: IFFALSE 46082
// exit ;
46080: GO 46226
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46082: LD_ADDR_VAR 0 5
46086: PUSH
46087: LD_INT 81
46089: PUSH
46090: LD_VAR 0 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: PUSH
46102: LD_INT 21
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PPUSH
46120: CALL_OW 69
46124: ST_TO_ADDR
// for i in mines do
46125: LD_ADDR_VAR 0 4
46129: PUSH
46130: LD_VAR 0 2
46134: PUSH
46135: FOR_IN
46136: IFFALSE 46224
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46138: LD_VAR 0 4
46142: PUSH
46143: LD_INT 1
46145: ARRAY
46146: PPUSH
46147: LD_VAR 0 4
46151: PUSH
46152: LD_INT 2
46154: ARRAY
46155: PPUSH
46156: CALL_OW 458
46160: NOT
46161: IFFALSE 46165
// continue ;
46163: GO 46135
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46165: LD_VAR 0 4
46169: PUSH
46170: LD_INT 1
46172: ARRAY
46173: PPUSH
46174: LD_VAR 0 4
46178: PUSH
46179: LD_INT 2
46181: ARRAY
46182: PPUSH
46183: CALL_OW 428
46187: PUSH
46188: LD_VAR 0 5
46192: IN
46193: IFFALSE 46222
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46195: LD_VAR 0 4
46199: PUSH
46200: LD_INT 1
46202: ARRAY
46203: PPUSH
46204: LD_VAR 0 4
46208: PUSH
46209: LD_INT 2
46211: ARRAY
46212: PPUSH
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL_OW 456
// end ;
46222: GO 46135
46224: POP
46225: POP
// end ;
46226: LD_VAR 0 3
46230: RET
// export function Count ( array ) ; var i ; begin
46231: LD_INT 0
46233: PPUSH
46234: PPUSH
// result := 0 ;
46235: LD_ADDR_VAR 0 2
46239: PUSH
46240: LD_INT 0
46242: ST_TO_ADDR
// for i in array do
46243: LD_ADDR_VAR 0 3
46247: PUSH
46248: LD_VAR 0 1
46252: PUSH
46253: FOR_IN
46254: IFFALSE 46278
// if i then
46256: LD_VAR 0 3
46260: IFFALSE 46276
// result := result + 1 ;
46262: LD_ADDR_VAR 0 2
46266: PUSH
46267: LD_VAR 0 2
46271: PUSH
46272: LD_INT 1
46274: PLUS
46275: ST_TO_ADDR
46276: GO 46253
46278: POP
46279: POP
// end ;
46280: LD_VAR 0 2
46284: RET
// export function IsEmpty ( building ) ; begin
46285: LD_INT 0
46287: PPUSH
// if not building then
46288: LD_VAR 0 1
46292: NOT
46293: IFFALSE 46297
// exit ;
46295: GO 46340
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46297: LD_ADDR_VAR 0 2
46301: PUSH
46302: LD_VAR 0 1
46306: PUSH
46307: LD_INT 22
46309: PUSH
46310: LD_VAR 0 1
46314: PPUSH
46315: CALL_OW 255
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 58
46326: PUSH
46327: EMPTY
46328: LIST
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PPUSH
46334: CALL_OW 69
46338: IN
46339: ST_TO_ADDR
// end ;
46340: LD_VAR 0 2
46344: RET
// export function IsNotFull ( building ) ; var places ; begin
46345: LD_INT 0
46347: PPUSH
46348: PPUSH
// if not building then
46349: LD_VAR 0 1
46353: NOT
46354: IFFALSE 46358
// exit ;
46356: GO 46529
// result := false ;
46358: LD_ADDR_VAR 0 2
46362: PUSH
46363: LD_INT 0
46365: ST_TO_ADDR
// places := 0 ;
46366: LD_ADDR_VAR 0 3
46370: PUSH
46371: LD_INT 0
46373: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
46374: LD_VAR 0 1
46378: PPUSH
46379: CALL_OW 266
46383: PUSH
46384: LD_INT 0
46386: DOUBLE
46387: EQUAL
46388: IFTRUE 46446
46390: LD_INT 1
46392: DOUBLE
46393: EQUAL
46394: IFTRUE 46446
46396: LD_INT 6
46398: DOUBLE
46399: EQUAL
46400: IFTRUE 46446
46402: LD_INT 7
46404: DOUBLE
46405: EQUAL
46406: IFTRUE 46446
46408: LD_INT 8
46410: DOUBLE
46411: EQUAL
46412: IFTRUE 46446
46414: LD_INT 4
46416: DOUBLE
46417: EQUAL
46418: IFTRUE 46446
46420: LD_INT 5
46422: DOUBLE
46423: EQUAL
46424: IFTRUE 46446
46426: LD_INT 2
46428: DOUBLE
46429: EQUAL
46430: IFTRUE 46446
46432: LD_INT 3
46434: DOUBLE
46435: EQUAL
46436: IFTRUE 46446
46438: LD_INT 35
46440: DOUBLE
46441: EQUAL
46442: IFTRUE 46446
46444: GO 46457
46446: POP
// places := 6 ; b_bunker , b_breastwork :
46447: LD_ADDR_VAR 0 3
46451: PUSH
46452: LD_INT 6
46454: ST_TO_ADDR
46455: GO 46502
46457: LD_INT 32
46459: DOUBLE
46460: EQUAL
46461: IFTRUE 46471
46463: LD_INT 31
46465: DOUBLE
46466: EQUAL
46467: IFTRUE 46471
46469: GO 46482
46471: POP
// places := 1 ; b_control_tower :
46472: LD_ADDR_VAR 0 3
46476: PUSH
46477: LD_INT 1
46479: ST_TO_ADDR
46480: GO 46502
46482: LD_INT 36
46484: DOUBLE
46485: EQUAL
46486: IFTRUE 46490
46488: GO 46501
46490: POP
// places := 3 ; end ;
46491: LD_ADDR_VAR 0 3
46495: PUSH
46496: LD_INT 3
46498: ST_TO_ADDR
46499: GO 46502
46501: POP
// if places then
46502: LD_VAR 0 3
46506: IFFALSE 46529
// result := UnitsInside ( building ) < places ;
46508: LD_ADDR_VAR 0 2
46512: PUSH
46513: LD_VAR 0 1
46517: PPUSH
46518: CALL_OW 313
46522: PUSH
46523: LD_VAR 0 3
46527: LESS
46528: ST_TO_ADDR
// end ;
46529: LD_VAR 0 2
46533: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46534: LD_INT 0
46536: PPUSH
46537: PPUSH
46538: PPUSH
46539: PPUSH
// tmp := [ ] ;
46540: LD_ADDR_VAR 0 3
46544: PUSH
46545: EMPTY
46546: ST_TO_ADDR
// list := [ ] ;
46547: LD_ADDR_VAR 0 5
46551: PUSH
46552: EMPTY
46553: ST_TO_ADDR
// for i = 16 to 25 do
46554: LD_ADDR_VAR 0 4
46558: PUSH
46559: DOUBLE
46560: LD_INT 16
46562: DEC
46563: ST_TO_ADDR
46564: LD_INT 25
46566: PUSH
46567: FOR_TO
46568: IFFALSE 46641
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46570: LD_ADDR_VAR 0 3
46574: PUSH
46575: LD_VAR 0 3
46579: PUSH
46580: LD_INT 22
46582: PUSH
46583: LD_VAR 0 1
46587: PPUSH
46588: CALL_OW 255
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 91
46599: PUSH
46600: LD_VAR 0 1
46604: PUSH
46605: LD_INT 6
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 30
46615: PUSH
46616: LD_VAR 0 4
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: PUSH
46630: EMPTY
46631: LIST
46632: PPUSH
46633: CALL_OW 69
46637: ADD
46638: ST_TO_ADDR
46639: GO 46567
46641: POP
46642: POP
// for i = 1 to tmp do
46643: LD_ADDR_VAR 0 4
46647: PUSH
46648: DOUBLE
46649: LD_INT 1
46651: DEC
46652: ST_TO_ADDR
46653: LD_VAR 0 3
46657: PUSH
46658: FOR_TO
46659: IFFALSE 46747
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46661: LD_ADDR_VAR 0 5
46665: PUSH
46666: LD_VAR 0 5
46670: PUSH
46671: LD_VAR 0 3
46675: PUSH
46676: LD_VAR 0 4
46680: ARRAY
46681: PPUSH
46682: CALL_OW 266
46686: PUSH
46687: LD_VAR 0 3
46691: PUSH
46692: LD_VAR 0 4
46696: ARRAY
46697: PPUSH
46698: CALL_OW 250
46702: PUSH
46703: LD_VAR 0 3
46707: PUSH
46708: LD_VAR 0 4
46712: ARRAY
46713: PPUSH
46714: CALL_OW 251
46718: PUSH
46719: LD_VAR 0 3
46723: PUSH
46724: LD_VAR 0 4
46728: ARRAY
46729: PPUSH
46730: CALL_OW 254
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: ADD
46744: ST_TO_ADDR
46745: GO 46658
46747: POP
46748: POP
// result := list ;
46749: LD_ADDR_VAR 0 2
46753: PUSH
46754: LD_VAR 0 5
46758: ST_TO_ADDR
// end ;
46759: LD_VAR 0 2
46763: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46764: LD_INT 0
46766: PPUSH
46767: PPUSH
46768: PPUSH
46769: PPUSH
46770: PPUSH
46771: PPUSH
46772: PPUSH
// if not factory then
46773: LD_VAR 0 1
46777: NOT
46778: IFFALSE 46782
// exit ;
46780: GO 47375
// if control = control_apeman then
46782: LD_VAR 0 4
46786: PUSH
46787: LD_INT 5
46789: EQUAL
46790: IFFALSE 46899
// begin tmp := UnitsInside ( factory ) ;
46792: LD_ADDR_VAR 0 8
46796: PUSH
46797: LD_VAR 0 1
46801: PPUSH
46802: CALL_OW 313
46806: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46807: LD_VAR 0 8
46811: PPUSH
46812: LD_INT 25
46814: PUSH
46815: LD_INT 12
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PPUSH
46822: CALL_OW 72
46826: NOT
46827: IFFALSE 46837
// control := control_manual ;
46829: LD_ADDR_VAR 0 4
46833: PUSH
46834: LD_INT 1
46836: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46837: LD_ADDR_VAR 0 8
46841: PUSH
46842: LD_VAR 0 1
46846: PPUSH
46847: CALL 46534 0 1
46851: ST_TO_ADDR
// if tmp then
46852: LD_VAR 0 8
46856: IFFALSE 46899
// begin for i in tmp do
46858: LD_ADDR_VAR 0 7
46862: PUSH
46863: LD_VAR 0 8
46867: PUSH
46868: FOR_IN
46869: IFFALSE 46897
// if i [ 1 ] = b_ext_radio then
46871: LD_VAR 0 7
46875: PUSH
46876: LD_INT 1
46878: ARRAY
46879: PUSH
46880: LD_INT 22
46882: EQUAL
46883: IFFALSE 46895
// begin control := control_remote ;
46885: LD_ADDR_VAR 0 4
46889: PUSH
46890: LD_INT 2
46892: ST_TO_ADDR
// break ;
46893: GO 46897
// end ;
46895: GO 46868
46897: POP
46898: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46899: LD_VAR 0 1
46903: PPUSH
46904: LD_VAR 0 2
46908: PPUSH
46909: LD_VAR 0 3
46913: PPUSH
46914: LD_VAR 0 4
46918: PPUSH
46919: LD_VAR 0 5
46923: PPUSH
46924: CALL_OW 448
46928: IFFALSE 46963
// begin result := [ chassis , engine , control , weapon ] ;
46930: LD_ADDR_VAR 0 6
46934: PUSH
46935: LD_VAR 0 2
46939: PUSH
46940: LD_VAR 0 3
46944: PUSH
46945: LD_VAR 0 4
46949: PUSH
46950: LD_VAR 0 5
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: ST_TO_ADDR
// exit ;
46961: GO 47375
// end ; _chassis := AvailableChassisList ( factory ) ;
46963: LD_ADDR_VAR 0 9
46967: PUSH
46968: LD_VAR 0 1
46972: PPUSH
46973: CALL_OW 475
46977: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46978: LD_ADDR_VAR 0 11
46982: PUSH
46983: LD_VAR 0 1
46987: PPUSH
46988: CALL_OW 476
46992: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46993: LD_ADDR_VAR 0 12
46997: PUSH
46998: LD_VAR 0 1
47002: PPUSH
47003: CALL_OW 477
47007: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47008: LD_ADDR_VAR 0 10
47012: PUSH
47013: LD_VAR 0 1
47017: PPUSH
47018: CALL_OW 478
47022: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47023: LD_VAR 0 9
47027: NOT
47028: PUSH
47029: LD_VAR 0 11
47033: NOT
47034: OR
47035: PUSH
47036: LD_VAR 0 12
47040: NOT
47041: OR
47042: PUSH
47043: LD_VAR 0 10
47047: NOT
47048: OR
47049: IFFALSE 47084
// begin result := [ chassis , engine , control , weapon ] ;
47051: LD_ADDR_VAR 0 6
47055: PUSH
47056: LD_VAR 0 2
47060: PUSH
47061: LD_VAR 0 3
47065: PUSH
47066: LD_VAR 0 4
47070: PUSH
47071: LD_VAR 0 5
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: ST_TO_ADDR
// exit ;
47082: GO 47375
// end ; if not chassis in _chassis then
47084: LD_VAR 0 2
47088: PUSH
47089: LD_VAR 0 9
47093: IN
47094: NOT
47095: IFFALSE 47121
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47097: LD_ADDR_VAR 0 2
47101: PUSH
47102: LD_VAR 0 9
47106: PUSH
47107: LD_INT 1
47109: PPUSH
47110: LD_VAR 0 9
47114: PPUSH
47115: CALL_OW 12
47119: ARRAY
47120: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47121: LD_VAR 0 2
47125: PPUSH
47126: LD_VAR 0 3
47130: PPUSH
47131: CALL 47380 0 2
47135: NOT
47136: IFFALSE 47195
// repeat engine := _engine [ 1 ] ;
47138: LD_ADDR_VAR 0 3
47142: PUSH
47143: LD_VAR 0 11
47147: PUSH
47148: LD_INT 1
47150: ARRAY
47151: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47152: LD_ADDR_VAR 0 11
47156: PUSH
47157: LD_VAR 0 11
47161: PPUSH
47162: LD_INT 1
47164: PPUSH
47165: CALL_OW 3
47169: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47170: LD_VAR 0 2
47174: PPUSH
47175: LD_VAR 0 3
47179: PPUSH
47180: CALL 47380 0 2
47184: PUSH
47185: LD_VAR 0 11
47189: PUSH
47190: EMPTY
47191: EQUAL
47192: OR
47193: IFFALSE 47138
// if not control in _control then
47195: LD_VAR 0 4
47199: PUSH
47200: LD_VAR 0 12
47204: IN
47205: NOT
47206: IFFALSE 47232
// control := _control [ rand ( 1 , _control ) ] ;
47208: LD_ADDR_VAR 0 4
47212: PUSH
47213: LD_VAR 0 12
47217: PUSH
47218: LD_INT 1
47220: PPUSH
47221: LD_VAR 0 12
47225: PPUSH
47226: CALL_OW 12
47230: ARRAY
47231: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47232: LD_VAR 0 2
47236: PPUSH
47237: LD_VAR 0 5
47241: PPUSH
47242: CALL 47600 0 2
47246: NOT
47247: IFFALSE 47306
// repeat weapon := _weapon [ 1 ] ;
47249: LD_ADDR_VAR 0 5
47253: PUSH
47254: LD_VAR 0 10
47258: PUSH
47259: LD_INT 1
47261: ARRAY
47262: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47263: LD_ADDR_VAR 0 10
47267: PUSH
47268: LD_VAR 0 10
47272: PPUSH
47273: LD_INT 1
47275: PPUSH
47276: CALL_OW 3
47280: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47281: LD_VAR 0 2
47285: PPUSH
47286: LD_VAR 0 5
47290: PPUSH
47291: CALL 47600 0 2
47295: PUSH
47296: LD_VAR 0 10
47300: PUSH
47301: EMPTY
47302: EQUAL
47303: OR
47304: IFFALSE 47249
// result := [ ] ;
47306: LD_ADDR_VAR 0 6
47310: PUSH
47311: EMPTY
47312: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47313: LD_VAR 0 1
47317: PPUSH
47318: LD_VAR 0 2
47322: PPUSH
47323: LD_VAR 0 3
47327: PPUSH
47328: LD_VAR 0 4
47332: PPUSH
47333: LD_VAR 0 5
47337: PPUSH
47338: CALL_OW 448
47342: IFFALSE 47375
// result := [ chassis , engine , control , weapon ] ;
47344: LD_ADDR_VAR 0 6
47348: PUSH
47349: LD_VAR 0 2
47353: PUSH
47354: LD_VAR 0 3
47358: PUSH
47359: LD_VAR 0 4
47363: PUSH
47364: LD_VAR 0 5
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: ST_TO_ADDR
// end ;
47375: LD_VAR 0 6
47379: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47380: LD_INT 0
47382: PPUSH
// if not chassis or not engine then
47383: LD_VAR 0 1
47387: NOT
47388: PUSH
47389: LD_VAR 0 2
47393: NOT
47394: OR
47395: IFFALSE 47399
// exit ;
47397: GO 47595
// case engine of engine_solar :
47399: LD_VAR 0 2
47403: PUSH
47404: LD_INT 2
47406: DOUBLE
47407: EQUAL
47408: IFTRUE 47412
47410: GO 47450
47412: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47413: LD_ADDR_VAR 0 3
47417: PUSH
47418: LD_INT 11
47420: PUSH
47421: LD_INT 12
47423: PUSH
47424: LD_INT 13
47426: PUSH
47427: LD_INT 14
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 3
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: ST_TO_ADDR
47448: GO 47579
47450: LD_INT 1
47452: DOUBLE
47453: EQUAL
47454: IFTRUE 47458
47456: GO 47520
47458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47459: LD_ADDR_VAR 0 3
47463: PUSH
47464: LD_INT 11
47466: PUSH
47467: LD_INT 12
47469: PUSH
47470: LD_INT 13
47472: PUSH
47473: LD_INT 14
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: LD_INT 4
47487: PUSH
47488: LD_INT 5
47490: PUSH
47491: LD_INT 21
47493: PUSH
47494: LD_INT 23
47496: PUSH
47497: LD_INT 22
47499: PUSH
47500: LD_INT 24
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: ST_TO_ADDR
47518: GO 47579
47520: LD_INT 3
47522: DOUBLE
47523: EQUAL
47524: IFTRUE 47528
47526: GO 47578
47528: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47529: LD_ADDR_VAR 0 3
47533: PUSH
47534: LD_INT 13
47536: PUSH
47537: LD_INT 14
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: LD_INT 4
47548: PUSH
47549: LD_INT 5
47551: PUSH
47552: LD_INT 21
47554: PUSH
47555: LD_INT 22
47557: PUSH
47558: LD_INT 23
47560: PUSH
47561: LD_INT 24
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: ST_TO_ADDR
47576: GO 47579
47578: POP
// result := ( chassis in result ) ;
47579: LD_ADDR_VAR 0 3
47583: PUSH
47584: LD_VAR 0 1
47588: PUSH
47589: LD_VAR 0 3
47593: IN
47594: ST_TO_ADDR
// end ;
47595: LD_VAR 0 3
47599: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47600: LD_INT 0
47602: PPUSH
// if not chassis or not weapon then
47603: LD_VAR 0 1
47607: NOT
47608: PUSH
47609: LD_VAR 0 2
47613: NOT
47614: OR
47615: IFFALSE 47619
// exit ;
47617: GO 48679
// case weapon of us_machine_gun :
47619: LD_VAR 0 2
47623: PUSH
47624: LD_INT 2
47626: DOUBLE
47627: EQUAL
47628: IFTRUE 47632
47630: GO 47662
47632: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47633: LD_ADDR_VAR 0 3
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 3
47646: PUSH
47647: LD_INT 4
47649: PUSH
47650: LD_INT 5
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: ST_TO_ADDR
47660: GO 48663
47662: LD_INT 3
47664: DOUBLE
47665: EQUAL
47666: IFTRUE 47670
47668: GO 47700
47670: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47671: LD_ADDR_VAR 0 3
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: LD_INT 4
47687: PUSH
47688: LD_INT 5
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: ST_TO_ADDR
47698: GO 48663
47700: LD_INT 11
47702: DOUBLE
47703: EQUAL
47704: IFTRUE 47708
47706: GO 47738
47708: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47709: LD_ADDR_VAR 0 3
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: LD_INT 4
47725: PUSH
47726: LD_INT 5
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: ST_TO_ADDR
47736: GO 48663
47738: LD_INT 4
47740: DOUBLE
47741: EQUAL
47742: IFTRUE 47746
47744: GO 47772
47746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47747: LD_ADDR_VAR 0 3
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: LD_INT 4
47760: PUSH
47761: LD_INT 5
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: ST_TO_ADDR
47770: GO 48663
47772: LD_INT 5
47774: DOUBLE
47775: EQUAL
47776: IFTRUE 47780
47778: GO 47806
47780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47781: LD_ADDR_VAR 0 3
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 3
47791: PUSH
47792: LD_INT 4
47794: PUSH
47795: LD_INT 5
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: ST_TO_ADDR
47804: GO 48663
47806: LD_INT 9
47808: DOUBLE
47809: EQUAL
47810: IFTRUE 47814
47812: GO 47840
47814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47815: LD_ADDR_VAR 0 3
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 3
47825: PUSH
47826: LD_INT 4
47828: PUSH
47829: LD_INT 5
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: ST_TO_ADDR
47838: GO 48663
47840: LD_INT 7
47842: DOUBLE
47843: EQUAL
47844: IFTRUE 47848
47846: GO 47874
47848: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47849: LD_ADDR_VAR 0 3
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: LD_INT 4
47862: PUSH
47863: LD_INT 5
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: ST_TO_ADDR
47872: GO 48663
47874: LD_INT 12
47876: DOUBLE
47877: EQUAL
47878: IFTRUE 47882
47880: GO 47908
47882: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47883: LD_ADDR_VAR 0 3
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 3
47893: PUSH
47894: LD_INT 4
47896: PUSH
47897: LD_INT 5
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: ST_TO_ADDR
47906: GO 48663
47908: LD_INT 13
47910: DOUBLE
47911: EQUAL
47912: IFTRUE 47916
47914: GO 47942
47916: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47917: LD_ADDR_VAR 0 3
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: LD_INT 3
47927: PUSH
47928: LD_INT 4
47930: PUSH
47931: LD_INT 5
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: ST_TO_ADDR
47940: GO 48663
47942: LD_INT 14
47944: DOUBLE
47945: EQUAL
47946: IFTRUE 47950
47948: GO 47968
47950: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47951: LD_ADDR_VAR 0 3
47955: PUSH
47956: LD_INT 4
47958: PUSH
47959: LD_INT 5
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: ST_TO_ADDR
47966: GO 48663
47968: LD_INT 6
47970: DOUBLE
47971: EQUAL
47972: IFTRUE 47976
47974: GO 47994
47976: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47977: LD_ADDR_VAR 0 3
47981: PUSH
47982: LD_INT 4
47984: PUSH
47985: LD_INT 5
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: ST_TO_ADDR
47992: GO 48663
47994: LD_INT 10
47996: DOUBLE
47997: EQUAL
47998: IFTRUE 48002
48000: GO 48020
48002: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
48003: LD_ADDR_VAR 0 3
48007: PUSH
48008: LD_INT 4
48010: PUSH
48011: LD_INT 5
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: ST_TO_ADDR
48018: GO 48663
48020: LD_INT 22
48022: DOUBLE
48023: EQUAL
48024: IFTRUE 48028
48026: GO 48054
48028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48029: LD_ADDR_VAR 0 3
48033: PUSH
48034: LD_INT 11
48036: PUSH
48037: LD_INT 12
48039: PUSH
48040: LD_INT 13
48042: PUSH
48043: LD_INT 14
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: ST_TO_ADDR
48052: GO 48663
48054: LD_INT 23
48056: DOUBLE
48057: EQUAL
48058: IFTRUE 48062
48060: GO 48088
48062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48063: LD_ADDR_VAR 0 3
48067: PUSH
48068: LD_INT 11
48070: PUSH
48071: LD_INT 12
48073: PUSH
48074: LD_INT 13
48076: PUSH
48077: LD_INT 14
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: ST_TO_ADDR
48086: GO 48663
48088: LD_INT 24
48090: DOUBLE
48091: EQUAL
48092: IFTRUE 48096
48094: GO 48122
48096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48097: LD_ADDR_VAR 0 3
48101: PUSH
48102: LD_INT 11
48104: PUSH
48105: LD_INT 12
48107: PUSH
48108: LD_INT 13
48110: PUSH
48111: LD_INT 14
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: ST_TO_ADDR
48120: GO 48663
48122: LD_INT 30
48124: DOUBLE
48125: EQUAL
48126: IFTRUE 48130
48128: GO 48156
48130: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48131: LD_ADDR_VAR 0 3
48135: PUSH
48136: LD_INT 11
48138: PUSH
48139: LD_INT 12
48141: PUSH
48142: LD_INT 13
48144: PUSH
48145: LD_INT 14
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: ST_TO_ADDR
48154: GO 48663
48156: LD_INT 25
48158: DOUBLE
48159: EQUAL
48160: IFTRUE 48164
48162: GO 48182
48164: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48165: LD_ADDR_VAR 0 3
48169: PUSH
48170: LD_INT 13
48172: PUSH
48173: LD_INT 14
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: ST_TO_ADDR
48180: GO 48663
48182: LD_INT 27
48184: DOUBLE
48185: EQUAL
48186: IFTRUE 48190
48188: GO 48208
48190: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
48191: LD_ADDR_VAR 0 3
48195: PUSH
48196: LD_INT 13
48198: PUSH
48199: LD_INT 14
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: ST_TO_ADDR
48206: GO 48663
48208: LD_INT 92
48210: DOUBLE
48211: EQUAL
48212: IFTRUE 48216
48214: GO 48242
48216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48217: LD_ADDR_VAR 0 3
48221: PUSH
48222: LD_INT 11
48224: PUSH
48225: LD_INT 12
48227: PUSH
48228: LD_INT 13
48230: PUSH
48231: LD_INT 14
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
48240: GO 48663
48242: LD_INT 28
48244: DOUBLE
48245: EQUAL
48246: IFTRUE 48250
48248: GO 48268
48250: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48251: LD_ADDR_VAR 0 3
48255: PUSH
48256: LD_INT 13
48258: PUSH
48259: LD_INT 14
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: ST_TO_ADDR
48266: GO 48663
48268: LD_INT 29
48270: DOUBLE
48271: EQUAL
48272: IFTRUE 48276
48274: GO 48294
48276: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48277: LD_ADDR_VAR 0 3
48281: PUSH
48282: LD_INT 13
48284: PUSH
48285: LD_INT 14
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: ST_TO_ADDR
48292: GO 48663
48294: LD_INT 31
48296: DOUBLE
48297: EQUAL
48298: IFTRUE 48302
48300: GO 48320
48302: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48303: LD_ADDR_VAR 0 3
48307: PUSH
48308: LD_INT 13
48310: PUSH
48311: LD_INT 14
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: ST_TO_ADDR
48318: GO 48663
48320: LD_INT 26
48322: DOUBLE
48323: EQUAL
48324: IFTRUE 48328
48326: GO 48346
48328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48329: LD_ADDR_VAR 0 3
48333: PUSH
48334: LD_INT 13
48336: PUSH
48337: LD_INT 14
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: ST_TO_ADDR
48344: GO 48663
48346: LD_INT 42
48348: DOUBLE
48349: EQUAL
48350: IFTRUE 48354
48352: GO 48380
48354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48355: LD_ADDR_VAR 0 3
48359: PUSH
48360: LD_INT 21
48362: PUSH
48363: LD_INT 22
48365: PUSH
48366: LD_INT 23
48368: PUSH
48369: LD_INT 24
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: ST_TO_ADDR
48378: GO 48663
48380: LD_INT 43
48382: DOUBLE
48383: EQUAL
48384: IFTRUE 48388
48386: GO 48414
48388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48389: LD_ADDR_VAR 0 3
48393: PUSH
48394: LD_INT 21
48396: PUSH
48397: LD_INT 22
48399: PUSH
48400: LD_INT 23
48402: PUSH
48403: LD_INT 24
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: ST_TO_ADDR
48412: GO 48663
48414: LD_INT 44
48416: DOUBLE
48417: EQUAL
48418: IFTRUE 48422
48420: GO 48448
48422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48423: LD_ADDR_VAR 0 3
48427: PUSH
48428: LD_INT 21
48430: PUSH
48431: LD_INT 22
48433: PUSH
48434: LD_INT 23
48436: PUSH
48437: LD_INT 24
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: ST_TO_ADDR
48446: GO 48663
48448: LD_INT 45
48450: DOUBLE
48451: EQUAL
48452: IFTRUE 48456
48454: GO 48482
48456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48457: LD_ADDR_VAR 0 3
48461: PUSH
48462: LD_INT 21
48464: PUSH
48465: LD_INT 22
48467: PUSH
48468: LD_INT 23
48470: PUSH
48471: LD_INT 24
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: ST_TO_ADDR
48480: GO 48663
48482: LD_INT 49
48484: DOUBLE
48485: EQUAL
48486: IFTRUE 48490
48488: GO 48516
48490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48491: LD_ADDR_VAR 0 3
48495: PUSH
48496: LD_INT 21
48498: PUSH
48499: LD_INT 22
48501: PUSH
48502: LD_INT 23
48504: PUSH
48505: LD_INT 24
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: ST_TO_ADDR
48514: GO 48663
48516: LD_INT 51
48518: DOUBLE
48519: EQUAL
48520: IFTRUE 48524
48522: GO 48550
48524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48525: LD_ADDR_VAR 0 3
48529: PUSH
48530: LD_INT 21
48532: PUSH
48533: LD_INT 22
48535: PUSH
48536: LD_INT 23
48538: PUSH
48539: LD_INT 24
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: ST_TO_ADDR
48548: GO 48663
48550: LD_INT 52
48552: DOUBLE
48553: EQUAL
48554: IFTRUE 48558
48556: GO 48584
48558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48559: LD_ADDR_VAR 0 3
48563: PUSH
48564: LD_INT 21
48566: PUSH
48567: LD_INT 22
48569: PUSH
48570: LD_INT 23
48572: PUSH
48573: LD_INT 24
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: ST_TO_ADDR
48582: GO 48663
48584: LD_INT 53
48586: DOUBLE
48587: EQUAL
48588: IFTRUE 48592
48590: GO 48610
48592: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48593: LD_ADDR_VAR 0 3
48597: PUSH
48598: LD_INT 23
48600: PUSH
48601: LD_INT 24
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: ST_TO_ADDR
48608: GO 48663
48610: LD_INT 46
48612: DOUBLE
48613: EQUAL
48614: IFTRUE 48618
48616: GO 48636
48618: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48619: LD_ADDR_VAR 0 3
48623: PUSH
48624: LD_INT 23
48626: PUSH
48627: LD_INT 24
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: ST_TO_ADDR
48634: GO 48663
48636: LD_INT 47
48638: DOUBLE
48639: EQUAL
48640: IFTRUE 48644
48642: GO 48662
48644: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48645: LD_ADDR_VAR 0 3
48649: PUSH
48650: LD_INT 23
48652: PUSH
48653: LD_INT 24
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: ST_TO_ADDR
48660: GO 48663
48662: POP
// result := ( chassis in result ) ;
48663: LD_ADDR_VAR 0 3
48667: PUSH
48668: LD_VAR 0 1
48672: PUSH
48673: LD_VAR 0 3
48677: IN
48678: ST_TO_ADDR
// end ;
48679: LD_VAR 0 3
48683: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48684: LD_INT 0
48686: PPUSH
48687: PPUSH
48688: PPUSH
48689: PPUSH
48690: PPUSH
48691: PPUSH
48692: PPUSH
// result := array ;
48693: LD_ADDR_VAR 0 5
48697: PUSH
48698: LD_VAR 0 1
48702: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48703: LD_VAR 0 1
48707: NOT
48708: PUSH
48709: LD_VAR 0 2
48713: NOT
48714: OR
48715: PUSH
48716: LD_VAR 0 3
48720: NOT
48721: OR
48722: PUSH
48723: LD_VAR 0 2
48727: PUSH
48728: LD_VAR 0 1
48732: GREATER
48733: OR
48734: PUSH
48735: LD_VAR 0 3
48739: PUSH
48740: LD_VAR 0 1
48744: GREATER
48745: OR
48746: IFFALSE 48750
// exit ;
48748: GO 49046
// if direction then
48750: LD_VAR 0 4
48754: IFFALSE 48818
// begin d := 1 ;
48756: LD_ADDR_VAR 0 9
48760: PUSH
48761: LD_INT 1
48763: ST_TO_ADDR
// if i_from > i_to then
48764: LD_VAR 0 2
48768: PUSH
48769: LD_VAR 0 3
48773: GREATER
48774: IFFALSE 48800
// length := ( array - i_from ) + i_to else
48776: LD_ADDR_VAR 0 11
48780: PUSH
48781: LD_VAR 0 1
48785: PUSH
48786: LD_VAR 0 2
48790: MINUS
48791: PUSH
48792: LD_VAR 0 3
48796: PLUS
48797: ST_TO_ADDR
48798: GO 48816
// length := i_to - i_from ;
48800: LD_ADDR_VAR 0 11
48804: PUSH
48805: LD_VAR 0 3
48809: PUSH
48810: LD_VAR 0 2
48814: MINUS
48815: ST_TO_ADDR
// end else
48816: GO 48879
// begin d := - 1 ;
48818: LD_ADDR_VAR 0 9
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: ST_TO_ADDR
// if i_from > i_to then
48827: LD_VAR 0 2
48831: PUSH
48832: LD_VAR 0 3
48836: GREATER
48837: IFFALSE 48857
// length := i_from - i_to else
48839: LD_ADDR_VAR 0 11
48843: PUSH
48844: LD_VAR 0 2
48848: PUSH
48849: LD_VAR 0 3
48853: MINUS
48854: ST_TO_ADDR
48855: GO 48879
// length := ( array - i_to ) + i_from ;
48857: LD_ADDR_VAR 0 11
48861: PUSH
48862: LD_VAR 0 1
48866: PUSH
48867: LD_VAR 0 3
48871: MINUS
48872: PUSH
48873: LD_VAR 0 2
48877: PLUS
48878: ST_TO_ADDR
// end ; if not length then
48879: LD_VAR 0 11
48883: NOT
48884: IFFALSE 48888
// exit ;
48886: GO 49046
// tmp := array ;
48888: LD_ADDR_VAR 0 10
48892: PUSH
48893: LD_VAR 0 1
48897: ST_TO_ADDR
// for i = 1 to length do
48898: LD_ADDR_VAR 0 6
48902: PUSH
48903: DOUBLE
48904: LD_INT 1
48906: DEC
48907: ST_TO_ADDR
48908: LD_VAR 0 11
48912: PUSH
48913: FOR_TO
48914: IFFALSE 49034
// begin for j = 1 to array do
48916: LD_ADDR_VAR 0 7
48920: PUSH
48921: DOUBLE
48922: LD_INT 1
48924: DEC
48925: ST_TO_ADDR
48926: LD_VAR 0 1
48930: PUSH
48931: FOR_TO
48932: IFFALSE 49020
// begin k := j + d ;
48934: LD_ADDR_VAR 0 8
48938: PUSH
48939: LD_VAR 0 7
48943: PUSH
48944: LD_VAR 0 9
48948: PLUS
48949: ST_TO_ADDR
// if k > array then
48950: LD_VAR 0 8
48954: PUSH
48955: LD_VAR 0 1
48959: GREATER
48960: IFFALSE 48970
// k := 1 ;
48962: LD_ADDR_VAR 0 8
48966: PUSH
48967: LD_INT 1
48969: ST_TO_ADDR
// if not k then
48970: LD_VAR 0 8
48974: NOT
48975: IFFALSE 48987
// k := array ;
48977: LD_ADDR_VAR 0 8
48981: PUSH
48982: LD_VAR 0 1
48986: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48987: LD_ADDR_VAR 0 10
48991: PUSH
48992: LD_VAR 0 10
48996: PPUSH
48997: LD_VAR 0 8
49001: PPUSH
49002: LD_VAR 0 1
49006: PUSH
49007: LD_VAR 0 7
49011: ARRAY
49012: PPUSH
49013: CALL_OW 1
49017: ST_TO_ADDR
// end ;
49018: GO 48931
49020: POP
49021: POP
// array := tmp ;
49022: LD_ADDR_VAR 0 1
49026: PUSH
49027: LD_VAR 0 10
49031: ST_TO_ADDR
// end ;
49032: GO 48913
49034: POP
49035: POP
// result := array ;
49036: LD_ADDR_VAR 0 5
49040: PUSH
49041: LD_VAR 0 1
49045: ST_TO_ADDR
// end ;
49046: LD_VAR 0 5
49050: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49051: LD_INT 0
49053: PPUSH
49054: PPUSH
// result := 0 ;
49055: LD_ADDR_VAR 0 3
49059: PUSH
49060: LD_INT 0
49062: ST_TO_ADDR
// if not array or not value in array then
49063: LD_VAR 0 1
49067: NOT
49068: PUSH
49069: LD_VAR 0 2
49073: PUSH
49074: LD_VAR 0 1
49078: IN
49079: NOT
49080: OR
49081: IFFALSE 49085
// exit ;
49083: GO 49139
// for i = 1 to array do
49085: LD_ADDR_VAR 0 4
49089: PUSH
49090: DOUBLE
49091: LD_INT 1
49093: DEC
49094: ST_TO_ADDR
49095: LD_VAR 0 1
49099: PUSH
49100: FOR_TO
49101: IFFALSE 49137
// if value = array [ i ] then
49103: LD_VAR 0 2
49107: PUSH
49108: LD_VAR 0 1
49112: PUSH
49113: LD_VAR 0 4
49117: ARRAY
49118: EQUAL
49119: IFFALSE 49135
// begin result := i ;
49121: LD_ADDR_VAR 0 3
49125: PUSH
49126: LD_VAR 0 4
49130: ST_TO_ADDR
// exit ;
49131: POP
49132: POP
49133: GO 49139
// end ;
49135: GO 49100
49137: POP
49138: POP
// end ;
49139: LD_VAR 0 3
49143: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49144: LD_INT 0
49146: PPUSH
// vc_chassis := chassis ;
49147: LD_ADDR_OWVAR 37
49151: PUSH
49152: LD_VAR 0 1
49156: ST_TO_ADDR
// vc_engine := engine ;
49157: LD_ADDR_OWVAR 39
49161: PUSH
49162: LD_VAR 0 2
49166: ST_TO_ADDR
// vc_control := control ;
49167: LD_ADDR_OWVAR 38
49171: PUSH
49172: LD_VAR 0 3
49176: ST_TO_ADDR
// vc_weapon := weapon ;
49177: LD_ADDR_OWVAR 40
49181: PUSH
49182: LD_VAR 0 4
49186: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49187: LD_ADDR_OWVAR 41
49191: PUSH
49192: LD_VAR 0 5
49196: ST_TO_ADDR
// end ;
49197: LD_VAR 0 6
49201: RET
// export function WantPlant ( unit ) ; var task ; begin
49202: LD_INT 0
49204: PPUSH
49205: PPUSH
// result := false ;
49206: LD_ADDR_VAR 0 2
49210: PUSH
49211: LD_INT 0
49213: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49214: LD_ADDR_VAR 0 3
49218: PUSH
49219: LD_VAR 0 1
49223: PPUSH
49224: CALL_OW 437
49228: ST_TO_ADDR
// if task then
49229: LD_VAR 0 3
49233: IFFALSE 49261
// if task [ 1 ] [ 1 ] = p then
49235: LD_VAR 0 3
49239: PUSH
49240: LD_INT 1
49242: ARRAY
49243: PUSH
49244: LD_INT 1
49246: ARRAY
49247: PUSH
49248: LD_STRING p
49250: EQUAL
49251: IFFALSE 49261
// result := true ;
49253: LD_ADDR_VAR 0 2
49257: PUSH
49258: LD_INT 1
49260: ST_TO_ADDR
// end ;
49261: LD_VAR 0 2
49265: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49266: LD_INT 0
49268: PPUSH
49269: PPUSH
49270: PPUSH
49271: PPUSH
// if pos < 1 then
49272: LD_VAR 0 2
49276: PUSH
49277: LD_INT 1
49279: LESS
49280: IFFALSE 49284
// exit ;
49282: GO 49587
// if pos = 1 then
49284: LD_VAR 0 2
49288: PUSH
49289: LD_INT 1
49291: EQUAL
49292: IFFALSE 49325
// result := Replace ( arr , pos [ 1 ] , value ) else
49294: LD_ADDR_VAR 0 4
49298: PUSH
49299: LD_VAR 0 1
49303: PPUSH
49304: LD_VAR 0 2
49308: PUSH
49309: LD_INT 1
49311: ARRAY
49312: PPUSH
49313: LD_VAR 0 3
49317: PPUSH
49318: CALL_OW 1
49322: ST_TO_ADDR
49323: GO 49587
// begin tmp := arr ;
49325: LD_ADDR_VAR 0 6
49329: PUSH
49330: LD_VAR 0 1
49334: ST_TO_ADDR
// s_arr := [ tmp ] ;
49335: LD_ADDR_VAR 0 7
49339: PUSH
49340: LD_VAR 0 6
49344: PUSH
49345: EMPTY
49346: LIST
49347: ST_TO_ADDR
// for i = 1 to pos - 1 do
49348: LD_ADDR_VAR 0 5
49352: PUSH
49353: DOUBLE
49354: LD_INT 1
49356: DEC
49357: ST_TO_ADDR
49358: LD_VAR 0 2
49362: PUSH
49363: LD_INT 1
49365: MINUS
49366: PUSH
49367: FOR_TO
49368: IFFALSE 49413
// begin tmp := tmp [ pos [ i ] ] ;
49370: LD_ADDR_VAR 0 6
49374: PUSH
49375: LD_VAR 0 6
49379: PUSH
49380: LD_VAR 0 2
49384: PUSH
49385: LD_VAR 0 5
49389: ARRAY
49390: ARRAY
49391: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49392: LD_ADDR_VAR 0 7
49396: PUSH
49397: LD_VAR 0 7
49401: PUSH
49402: LD_VAR 0 6
49406: PUSH
49407: EMPTY
49408: LIST
49409: ADD
49410: ST_TO_ADDR
// end ;
49411: GO 49367
49413: POP
49414: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49415: LD_ADDR_VAR 0 6
49419: PUSH
49420: LD_VAR 0 6
49424: PPUSH
49425: LD_VAR 0 2
49429: PUSH
49430: LD_VAR 0 2
49434: ARRAY
49435: PPUSH
49436: LD_VAR 0 3
49440: PPUSH
49441: CALL_OW 1
49445: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49446: LD_ADDR_VAR 0 7
49450: PUSH
49451: LD_VAR 0 7
49455: PPUSH
49456: LD_VAR 0 7
49460: PPUSH
49461: LD_VAR 0 6
49465: PPUSH
49466: CALL_OW 1
49470: ST_TO_ADDR
// for i = s_arr downto 2 do
49471: LD_ADDR_VAR 0 5
49475: PUSH
49476: DOUBLE
49477: LD_VAR 0 7
49481: INC
49482: ST_TO_ADDR
49483: LD_INT 2
49485: PUSH
49486: FOR_DOWNTO
49487: IFFALSE 49571
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49489: LD_ADDR_VAR 0 6
49493: PUSH
49494: LD_VAR 0 7
49498: PUSH
49499: LD_VAR 0 5
49503: PUSH
49504: LD_INT 1
49506: MINUS
49507: ARRAY
49508: PPUSH
49509: LD_VAR 0 2
49513: PUSH
49514: LD_VAR 0 5
49518: PUSH
49519: LD_INT 1
49521: MINUS
49522: ARRAY
49523: PPUSH
49524: LD_VAR 0 7
49528: PUSH
49529: LD_VAR 0 5
49533: ARRAY
49534: PPUSH
49535: CALL_OW 1
49539: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49540: LD_ADDR_VAR 0 7
49544: PUSH
49545: LD_VAR 0 7
49549: PPUSH
49550: LD_VAR 0 5
49554: PUSH
49555: LD_INT 1
49557: MINUS
49558: PPUSH
49559: LD_VAR 0 6
49563: PPUSH
49564: CALL_OW 1
49568: ST_TO_ADDR
// end ;
49569: GO 49486
49571: POP
49572: POP
// result := s_arr [ 1 ] ;
49573: LD_ADDR_VAR 0 4
49577: PUSH
49578: LD_VAR 0 7
49582: PUSH
49583: LD_INT 1
49585: ARRAY
49586: ST_TO_ADDR
// end ; end ;
49587: LD_VAR 0 4
49591: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49592: LD_INT 0
49594: PPUSH
49595: PPUSH
// if not list then
49596: LD_VAR 0 1
49600: NOT
49601: IFFALSE 49605
// exit ;
49603: GO 49696
// i := list [ pos1 ] ;
49605: LD_ADDR_VAR 0 5
49609: PUSH
49610: LD_VAR 0 1
49614: PUSH
49615: LD_VAR 0 2
49619: ARRAY
49620: ST_TO_ADDR
// if not i then
49621: LD_VAR 0 5
49625: NOT
49626: IFFALSE 49630
// exit ;
49628: GO 49696
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49630: LD_ADDR_VAR 0 1
49634: PUSH
49635: LD_VAR 0 1
49639: PPUSH
49640: LD_VAR 0 2
49644: PPUSH
49645: LD_VAR 0 1
49649: PUSH
49650: LD_VAR 0 3
49654: ARRAY
49655: PPUSH
49656: CALL_OW 1
49660: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49661: LD_ADDR_VAR 0 1
49665: PUSH
49666: LD_VAR 0 1
49670: PPUSH
49671: LD_VAR 0 3
49675: PPUSH
49676: LD_VAR 0 5
49680: PPUSH
49681: CALL_OW 1
49685: ST_TO_ADDR
// result := list ;
49686: LD_ADDR_VAR 0 4
49690: PUSH
49691: LD_VAR 0 1
49695: ST_TO_ADDR
// end ;
49696: LD_VAR 0 4
49700: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49701: LD_INT 0
49703: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49704: LD_ADDR_VAR 0 5
49708: PUSH
49709: LD_VAR 0 1
49713: PPUSH
49714: CALL_OW 250
49718: PPUSH
49719: LD_VAR 0 1
49723: PPUSH
49724: CALL_OW 251
49728: PPUSH
49729: LD_VAR 0 2
49733: PPUSH
49734: LD_VAR 0 3
49738: PPUSH
49739: LD_VAR 0 4
49743: PPUSH
49744: CALL 49754 0 5
49748: ST_TO_ADDR
// end ;
49749: LD_VAR 0 5
49753: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49754: LD_INT 0
49756: PPUSH
49757: PPUSH
49758: PPUSH
49759: PPUSH
// if not list then
49760: LD_VAR 0 3
49764: NOT
49765: IFFALSE 49769
// exit ;
49767: GO 50157
// result := [ ] ;
49769: LD_ADDR_VAR 0 6
49773: PUSH
49774: EMPTY
49775: ST_TO_ADDR
// for i in list do
49776: LD_ADDR_VAR 0 7
49780: PUSH
49781: LD_VAR 0 3
49785: PUSH
49786: FOR_IN
49787: IFFALSE 49989
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49789: LD_ADDR_VAR 0 9
49793: PUSH
49794: LD_VAR 0 7
49798: PPUSH
49799: LD_VAR 0 1
49803: PPUSH
49804: LD_VAR 0 2
49808: PPUSH
49809: CALL_OW 297
49813: ST_TO_ADDR
// if not result then
49814: LD_VAR 0 6
49818: NOT
49819: IFFALSE 49845
// result := [ [ i , tmp ] ] else
49821: LD_ADDR_VAR 0 6
49825: PUSH
49826: LD_VAR 0 7
49830: PUSH
49831: LD_VAR 0 9
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: EMPTY
49841: LIST
49842: ST_TO_ADDR
49843: GO 49987
// begin if result [ result ] [ 2 ] < tmp then
49845: LD_VAR 0 6
49849: PUSH
49850: LD_VAR 0 6
49854: ARRAY
49855: PUSH
49856: LD_INT 2
49858: ARRAY
49859: PUSH
49860: LD_VAR 0 9
49864: LESS
49865: IFFALSE 49907
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49867: LD_ADDR_VAR 0 6
49871: PUSH
49872: LD_VAR 0 6
49876: PPUSH
49877: LD_VAR 0 6
49881: PUSH
49882: LD_INT 1
49884: PLUS
49885: PPUSH
49886: LD_VAR 0 7
49890: PUSH
49891: LD_VAR 0 9
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PPUSH
49900: CALL_OW 2
49904: ST_TO_ADDR
49905: GO 49987
// for j = 1 to result do
49907: LD_ADDR_VAR 0 8
49911: PUSH
49912: DOUBLE
49913: LD_INT 1
49915: DEC
49916: ST_TO_ADDR
49917: LD_VAR 0 6
49921: PUSH
49922: FOR_TO
49923: IFFALSE 49985
// begin if tmp < result [ j ] [ 2 ] then
49925: LD_VAR 0 9
49929: PUSH
49930: LD_VAR 0 6
49934: PUSH
49935: LD_VAR 0 8
49939: ARRAY
49940: PUSH
49941: LD_INT 2
49943: ARRAY
49944: LESS
49945: IFFALSE 49983
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49947: LD_ADDR_VAR 0 6
49951: PUSH
49952: LD_VAR 0 6
49956: PPUSH
49957: LD_VAR 0 8
49961: PPUSH
49962: LD_VAR 0 7
49966: PUSH
49967: LD_VAR 0 9
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PPUSH
49976: CALL_OW 2
49980: ST_TO_ADDR
// break ;
49981: GO 49985
// end ; end ;
49983: GO 49922
49985: POP
49986: POP
// end ; end ;
49987: GO 49786
49989: POP
49990: POP
// if result and not asc then
49991: LD_VAR 0 6
49995: PUSH
49996: LD_VAR 0 4
50000: NOT
50001: AND
50002: IFFALSE 50077
// begin tmp := result ;
50004: LD_ADDR_VAR 0 9
50008: PUSH
50009: LD_VAR 0 6
50013: ST_TO_ADDR
// for i = tmp downto 1 do
50014: LD_ADDR_VAR 0 7
50018: PUSH
50019: DOUBLE
50020: LD_VAR 0 9
50024: INC
50025: ST_TO_ADDR
50026: LD_INT 1
50028: PUSH
50029: FOR_DOWNTO
50030: IFFALSE 50075
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
50032: LD_ADDR_VAR 0 6
50036: PUSH
50037: LD_VAR 0 6
50041: PPUSH
50042: LD_VAR 0 9
50046: PUSH
50047: LD_VAR 0 7
50051: MINUS
50052: PUSH
50053: LD_INT 1
50055: PLUS
50056: PPUSH
50057: LD_VAR 0 9
50061: PUSH
50062: LD_VAR 0 7
50066: ARRAY
50067: PPUSH
50068: CALL_OW 1
50072: ST_TO_ADDR
50073: GO 50029
50075: POP
50076: POP
// end ; tmp := [ ] ;
50077: LD_ADDR_VAR 0 9
50081: PUSH
50082: EMPTY
50083: ST_TO_ADDR
// if mode then
50084: LD_VAR 0 5
50088: IFFALSE 50157
// begin for i = 1 to result do
50090: LD_ADDR_VAR 0 7
50094: PUSH
50095: DOUBLE
50096: LD_INT 1
50098: DEC
50099: ST_TO_ADDR
50100: LD_VAR 0 6
50104: PUSH
50105: FOR_TO
50106: IFFALSE 50145
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
50108: LD_ADDR_VAR 0 9
50112: PUSH
50113: LD_VAR 0 9
50117: PPUSH
50118: LD_VAR 0 7
50122: PPUSH
50123: LD_VAR 0 6
50127: PUSH
50128: LD_VAR 0 7
50132: ARRAY
50133: PUSH
50134: LD_INT 1
50136: ARRAY
50137: PPUSH
50138: CALL_OW 1
50142: ST_TO_ADDR
50143: GO 50105
50145: POP
50146: POP
// result := tmp ;
50147: LD_ADDR_VAR 0 6
50151: PUSH
50152: LD_VAR 0 9
50156: ST_TO_ADDR
// end ; end ;
50157: LD_VAR 0 6
50161: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
50162: LD_INT 0
50164: PPUSH
50165: PPUSH
50166: PPUSH
50167: PPUSH
50168: PPUSH
50169: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
50170: LD_ADDR_VAR 0 5
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: ST_TO_ADDR
// if not x or not y then
50192: LD_VAR 0 2
50196: NOT
50197: PUSH
50198: LD_VAR 0 3
50202: NOT
50203: OR
50204: IFFALSE 50208
// exit ;
50206: GO 51858
// if not range then
50208: LD_VAR 0 4
50212: NOT
50213: IFFALSE 50223
// range := 10 ;
50215: LD_ADDR_VAR 0 4
50219: PUSH
50220: LD_INT 10
50222: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50223: LD_ADDR_VAR 0 8
50227: PUSH
50228: LD_INT 81
50230: PUSH
50231: LD_VAR 0 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 92
50242: PUSH
50243: LD_VAR 0 2
50247: PUSH
50248: LD_VAR 0 3
50252: PUSH
50253: LD_VAR 0 4
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 3
50266: PUSH
50267: LD_INT 21
50269: PUSH
50270: LD_INT 3
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: PPUSH
50286: CALL_OW 69
50290: ST_TO_ADDR
// if not tmp then
50291: LD_VAR 0 8
50295: NOT
50296: IFFALSE 50300
// exit ;
50298: GO 51858
// for i in tmp do
50300: LD_ADDR_VAR 0 6
50304: PUSH
50305: LD_VAR 0 8
50309: PUSH
50310: FOR_IN
50311: IFFALSE 51833
// begin points := [ 0 , 0 , 0 ] ;
50313: LD_ADDR_VAR 0 9
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: LIST
50331: ST_TO_ADDR
// bpoints := 1 ;
50332: LD_ADDR_VAR 0 10
50336: PUSH
50337: LD_INT 1
50339: ST_TO_ADDR
// case GetType ( i ) of unit_human :
50340: LD_VAR 0 6
50344: PPUSH
50345: CALL_OW 247
50349: PUSH
50350: LD_INT 1
50352: DOUBLE
50353: EQUAL
50354: IFTRUE 50358
50356: GO 50936
50358: POP
// begin if GetClass ( i ) = 1 then
50359: LD_VAR 0 6
50363: PPUSH
50364: CALL_OW 257
50368: PUSH
50369: LD_INT 1
50371: EQUAL
50372: IFFALSE 50393
// points := [ 10 , 5 , 3 ] ;
50374: LD_ADDR_VAR 0 9
50378: PUSH
50379: LD_INT 10
50381: PUSH
50382: LD_INT 5
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: LIST
50392: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
50393: LD_VAR 0 6
50397: PPUSH
50398: CALL_OW 257
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: LD_INT 3
50408: PUSH
50409: LD_INT 4
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: LIST
50416: IN
50417: IFFALSE 50438
// points := [ 3 , 2 , 1 ] ;
50419: LD_ADDR_VAR 0 9
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: LIST
50437: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50438: LD_VAR 0 6
50442: PPUSH
50443: CALL_OW 257
50447: PUSH
50448: LD_INT 5
50450: EQUAL
50451: IFFALSE 50472
// points := [ 130 , 5 , 2 ] ;
50453: LD_ADDR_VAR 0 9
50457: PUSH
50458: LD_INT 130
50460: PUSH
50461: LD_INT 5
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: LIST
50471: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50472: LD_VAR 0 6
50476: PPUSH
50477: CALL_OW 257
50481: PUSH
50482: LD_INT 8
50484: EQUAL
50485: IFFALSE 50506
// points := [ 35 , 35 , 30 ] ;
50487: LD_ADDR_VAR 0 9
50491: PUSH
50492: LD_INT 35
50494: PUSH
50495: LD_INT 35
50497: PUSH
50498: LD_INT 30
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50506: LD_VAR 0 6
50510: PPUSH
50511: CALL_OW 257
50515: PUSH
50516: LD_INT 9
50518: EQUAL
50519: IFFALSE 50540
// points := [ 20 , 55 , 40 ] ;
50521: LD_ADDR_VAR 0 9
50525: PUSH
50526: LD_INT 20
50528: PUSH
50529: LD_INT 55
50531: PUSH
50532: LD_INT 40
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50540: LD_VAR 0 6
50544: PPUSH
50545: CALL_OW 257
50549: PUSH
50550: LD_INT 12
50552: PUSH
50553: LD_INT 16
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: IN
50560: IFFALSE 50581
// points := [ 5 , 3 , 2 ] ;
50562: LD_ADDR_VAR 0 9
50566: PUSH
50567: LD_INT 5
50569: PUSH
50570: LD_INT 3
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50581: LD_VAR 0 6
50585: PPUSH
50586: CALL_OW 257
50590: PUSH
50591: LD_INT 17
50593: EQUAL
50594: IFFALSE 50615
// points := [ 100 , 50 , 75 ] ;
50596: LD_ADDR_VAR 0 9
50600: PUSH
50601: LD_INT 100
50603: PUSH
50604: LD_INT 50
50606: PUSH
50607: LD_INT 75
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50615: LD_VAR 0 6
50619: PPUSH
50620: CALL_OW 257
50624: PUSH
50625: LD_INT 15
50627: EQUAL
50628: IFFALSE 50649
// points := [ 10 , 5 , 3 ] ;
50630: LD_ADDR_VAR 0 9
50634: PUSH
50635: LD_INT 10
50637: PUSH
50638: LD_INT 5
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50649: LD_VAR 0 6
50653: PPUSH
50654: CALL_OW 257
50658: PUSH
50659: LD_INT 14
50661: EQUAL
50662: IFFALSE 50683
// points := [ 10 , 0 , 0 ] ;
50664: LD_ADDR_VAR 0 9
50668: PUSH
50669: LD_INT 10
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50683: LD_VAR 0 6
50687: PPUSH
50688: CALL_OW 257
50692: PUSH
50693: LD_INT 11
50695: EQUAL
50696: IFFALSE 50717
// points := [ 30 , 10 , 5 ] ;
50698: LD_ADDR_VAR 0 9
50702: PUSH
50703: LD_INT 30
50705: PUSH
50706: LD_INT 10
50708: PUSH
50709: LD_INT 5
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50717: LD_VAR 0 1
50721: PPUSH
50722: LD_INT 5
50724: PPUSH
50725: CALL_OW 321
50729: PUSH
50730: LD_INT 2
50732: EQUAL
50733: IFFALSE 50750
// bpoints := bpoints * 1.8 ;
50735: LD_ADDR_VAR 0 10
50739: PUSH
50740: LD_VAR 0 10
50744: PUSH
50745: LD_REAL  1.80000000000000E+0000
50748: MUL
50749: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50750: LD_VAR 0 6
50754: PPUSH
50755: CALL_OW 257
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: LD_INT 4
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: IN
50778: PUSH
50779: LD_VAR 0 1
50783: PPUSH
50784: LD_INT 51
50786: PPUSH
50787: CALL_OW 321
50791: PUSH
50792: LD_INT 2
50794: EQUAL
50795: AND
50796: IFFALSE 50813
// bpoints := bpoints * 1.2 ;
50798: LD_ADDR_VAR 0 10
50802: PUSH
50803: LD_VAR 0 10
50807: PUSH
50808: LD_REAL  1.20000000000000E+0000
50811: MUL
50812: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50813: LD_VAR 0 6
50817: PPUSH
50818: CALL_OW 257
50822: PUSH
50823: LD_INT 5
50825: PUSH
50826: LD_INT 7
50828: PUSH
50829: LD_INT 9
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: LIST
50836: IN
50837: PUSH
50838: LD_VAR 0 1
50842: PPUSH
50843: LD_INT 52
50845: PPUSH
50846: CALL_OW 321
50850: PUSH
50851: LD_INT 2
50853: EQUAL
50854: AND
50855: IFFALSE 50872
// bpoints := bpoints * 1.5 ;
50857: LD_ADDR_VAR 0 10
50861: PUSH
50862: LD_VAR 0 10
50866: PUSH
50867: LD_REAL  1.50000000000000E+0000
50870: MUL
50871: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50872: LD_VAR 0 1
50876: PPUSH
50877: LD_INT 66
50879: PPUSH
50880: CALL_OW 321
50884: PUSH
50885: LD_INT 2
50887: EQUAL
50888: IFFALSE 50905
// bpoints := bpoints * 1.1 ;
50890: LD_ADDR_VAR 0 10
50894: PUSH
50895: LD_VAR 0 10
50899: PUSH
50900: LD_REAL  1.10000000000000E+0000
50903: MUL
50904: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50905: LD_ADDR_VAR 0 10
50909: PUSH
50910: LD_VAR 0 10
50914: PUSH
50915: LD_VAR 0 6
50919: PPUSH
50920: LD_INT 1
50922: PPUSH
50923: CALL_OW 259
50927: PUSH
50928: LD_REAL  1.15000000000000E+0000
50931: MUL
50932: MUL
50933: ST_TO_ADDR
// end ; unit_vehicle :
50934: GO 51762
50936: LD_INT 2
50938: DOUBLE
50939: EQUAL
50940: IFTRUE 50944
50942: GO 51750
50944: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50945: LD_VAR 0 6
50949: PPUSH
50950: CALL_OW 264
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 42
50960: PUSH
50961: LD_INT 24
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: LIST
50968: IN
50969: IFFALSE 50990
// points := [ 25 , 5 , 3 ] ;
50971: LD_ADDR_VAR 0 9
50975: PUSH
50976: LD_INT 25
50978: PUSH
50979: LD_INT 5
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50990: LD_VAR 0 6
50994: PPUSH
50995: CALL_OW 264
50999: PUSH
51000: LD_INT 4
51002: PUSH
51003: LD_INT 43
51005: PUSH
51006: LD_INT 25
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: IN
51014: IFFALSE 51035
// points := [ 40 , 15 , 5 ] ;
51016: LD_ADDR_VAR 0 9
51020: PUSH
51021: LD_INT 40
51023: PUSH
51024: LD_INT 15
51026: PUSH
51027: LD_INT 5
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
51035: LD_VAR 0 6
51039: PPUSH
51040: CALL_OW 264
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: LD_INT 23
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: IN
51055: IFFALSE 51076
// points := [ 7 , 25 , 8 ] ;
51057: LD_ADDR_VAR 0 9
51061: PUSH
51062: LD_INT 7
51064: PUSH
51065: LD_INT 25
51067: PUSH
51068: LD_INT 8
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51076: LD_VAR 0 6
51080: PPUSH
51081: CALL_OW 264
51085: PUSH
51086: LD_INT 5
51088: PUSH
51089: LD_INT 27
51091: PUSH
51092: LD_INT 44
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: IN
51100: IFFALSE 51121
// points := [ 14 , 50 , 16 ] ;
51102: LD_ADDR_VAR 0 9
51106: PUSH
51107: LD_INT 14
51109: PUSH
51110: LD_INT 50
51112: PUSH
51113: LD_INT 16
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: LIST
51120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
51121: LD_VAR 0 6
51125: PPUSH
51126: CALL_OW 264
51130: PUSH
51131: LD_INT 6
51133: PUSH
51134: LD_INT 46
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: IN
51141: IFFALSE 51162
// points := [ 32 , 120 , 70 ] ;
51143: LD_ADDR_VAR 0 9
51147: PUSH
51148: LD_INT 32
51150: PUSH
51151: LD_INT 120
51153: PUSH
51154: LD_INT 70
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
51162: LD_VAR 0 6
51166: PPUSH
51167: CALL_OW 264
51171: PUSH
51172: LD_INT 7
51174: PUSH
51175: LD_INT 28
51177: PUSH
51178: LD_INT 45
51180: PUSH
51181: LD_INT 92
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: IN
51190: IFFALSE 51211
// points := [ 35 , 20 , 45 ] ;
51192: LD_ADDR_VAR 0 9
51196: PUSH
51197: LD_INT 35
51199: PUSH
51200: LD_INT 20
51202: PUSH
51203: LD_INT 45
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51211: LD_VAR 0 6
51215: PPUSH
51216: CALL_OW 264
51220: PUSH
51221: LD_INT 47
51223: PUSH
51224: EMPTY
51225: LIST
51226: IN
51227: IFFALSE 51248
// points := [ 67 , 45 , 75 ] ;
51229: LD_ADDR_VAR 0 9
51233: PUSH
51234: LD_INT 67
51236: PUSH
51237: LD_INT 45
51239: PUSH
51240: LD_INT 75
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: LIST
51247: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
51248: LD_VAR 0 6
51252: PPUSH
51253: CALL_OW 264
51257: PUSH
51258: LD_INT 26
51260: PUSH
51261: EMPTY
51262: LIST
51263: IN
51264: IFFALSE 51285
// points := [ 120 , 30 , 80 ] ;
51266: LD_ADDR_VAR 0 9
51270: PUSH
51271: LD_INT 120
51273: PUSH
51274: LD_INT 30
51276: PUSH
51277: LD_INT 80
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
51285: LD_VAR 0 6
51289: PPUSH
51290: CALL_OW 264
51294: PUSH
51295: LD_INT 22
51297: PUSH
51298: EMPTY
51299: LIST
51300: IN
51301: IFFALSE 51322
// points := [ 40 , 1 , 1 ] ;
51303: LD_ADDR_VAR 0 9
51307: PUSH
51308: LD_INT 40
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: LIST
51321: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
51322: LD_VAR 0 6
51326: PPUSH
51327: CALL_OW 264
51331: PUSH
51332: LD_INT 29
51334: PUSH
51335: EMPTY
51336: LIST
51337: IN
51338: IFFALSE 51359
// points := [ 70 , 200 , 400 ] ;
51340: LD_ADDR_VAR 0 9
51344: PUSH
51345: LD_INT 70
51347: PUSH
51348: LD_INT 200
51350: PUSH
51351: LD_INT 400
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: LIST
51358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
51359: LD_VAR 0 6
51363: PPUSH
51364: CALL_OW 264
51368: PUSH
51369: LD_INT 14
51371: PUSH
51372: LD_INT 53
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: IN
51379: IFFALSE 51400
// points := [ 40 , 10 , 20 ] ;
51381: LD_ADDR_VAR 0 9
51385: PUSH
51386: LD_INT 40
51388: PUSH
51389: LD_INT 10
51391: PUSH
51392: LD_INT 20
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51400: LD_VAR 0 6
51404: PPUSH
51405: CALL_OW 264
51409: PUSH
51410: LD_INT 9
51412: PUSH
51413: EMPTY
51414: LIST
51415: IN
51416: IFFALSE 51437
// points := [ 5 , 70 , 20 ] ;
51418: LD_ADDR_VAR 0 9
51422: PUSH
51423: LD_INT 5
51425: PUSH
51426: LD_INT 70
51428: PUSH
51429: LD_INT 20
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51437: LD_VAR 0 6
51441: PPUSH
51442: CALL_OW 264
51446: PUSH
51447: LD_INT 10
51449: PUSH
51450: EMPTY
51451: LIST
51452: IN
51453: IFFALSE 51474
// points := [ 35 , 110 , 70 ] ;
51455: LD_ADDR_VAR 0 9
51459: PUSH
51460: LD_INT 35
51462: PUSH
51463: LD_INT 110
51465: PUSH
51466: LD_INT 70
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51474: LD_VAR 0 6
51478: PPUSH
51479: CALL_OW 265
51483: PUSH
51484: LD_INT 25
51486: EQUAL
51487: IFFALSE 51508
// points := [ 80 , 65 , 100 ] ;
51489: LD_ADDR_VAR 0 9
51493: PUSH
51494: LD_INT 80
51496: PUSH
51497: LD_INT 65
51499: PUSH
51500: LD_INT 100
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51508: LD_VAR 0 6
51512: PPUSH
51513: CALL_OW 263
51517: PUSH
51518: LD_INT 1
51520: EQUAL
51521: IFFALSE 51556
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51523: LD_ADDR_VAR 0 10
51527: PUSH
51528: LD_VAR 0 10
51532: PUSH
51533: LD_VAR 0 6
51537: PPUSH
51538: CALL_OW 311
51542: PPUSH
51543: LD_INT 3
51545: PPUSH
51546: CALL_OW 259
51550: PUSH
51551: LD_INT 4
51553: MUL
51554: MUL
51555: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51556: LD_VAR 0 6
51560: PPUSH
51561: CALL_OW 263
51565: PUSH
51566: LD_INT 2
51568: EQUAL
51569: IFFALSE 51620
// begin j := IsControledBy ( i ) ;
51571: LD_ADDR_VAR 0 7
51575: PUSH
51576: LD_VAR 0 6
51580: PPUSH
51581: CALL_OW 312
51585: ST_TO_ADDR
// if j then
51586: LD_VAR 0 7
51590: IFFALSE 51620
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51592: LD_ADDR_VAR 0 10
51596: PUSH
51597: LD_VAR 0 10
51601: PUSH
51602: LD_VAR 0 7
51606: PPUSH
51607: LD_INT 3
51609: PPUSH
51610: CALL_OW 259
51614: PUSH
51615: LD_INT 3
51617: MUL
51618: MUL
51619: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51620: LD_VAR 0 6
51624: PPUSH
51625: CALL_OW 264
51629: PUSH
51630: LD_INT 5
51632: PUSH
51633: LD_INT 6
51635: PUSH
51636: LD_INT 46
51638: PUSH
51639: LD_INT 44
51641: PUSH
51642: LD_INT 47
51644: PUSH
51645: LD_INT 45
51647: PUSH
51648: LD_INT 28
51650: PUSH
51651: LD_INT 7
51653: PUSH
51654: LD_INT 27
51656: PUSH
51657: LD_INT 29
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: IN
51672: PUSH
51673: LD_VAR 0 1
51677: PPUSH
51678: LD_INT 52
51680: PPUSH
51681: CALL_OW 321
51685: PUSH
51686: LD_INT 2
51688: EQUAL
51689: AND
51690: IFFALSE 51707
// bpoints := bpoints * 1.2 ;
51692: LD_ADDR_VAR 0 10
51696: PUSH
51697: LD_VAR 0 10
51701: PUSH
51702: LD_REAL  1.20000000000000E+0000
51705: MUL
51706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51707: LD_VAR 0 6
51711: PPUSH
51712: CALL_OW 264
51716: PUSH
51717: LD_INT 6
51719: PUSH
51720: LD_INT 46
51722: PUSH
51723: LD_INT 47
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: LIST
51730: IN
51731: IFFALSE 51748
// bpoints := bpoints * 1.2 ;
51733: LD_ADDR_VAR 0 10
51737: PUSH
51738: LD_VAR 0 10
51742: PUSH
51743: LD_REAL  1.20000000000000E+0000
51746: MUL
51747: ST_TO_ADDR
// end ; unit_building :
51748: GO 51762
51750: LD_INT 3
51752: DOUBLE
51753: EQUAL
51754: IFTRUE 51758
51756: GO 51761
51758: POP
// ; end ;
51759: GO 51762
51761: POP
// for j = 1 to 3 do
51762: LD_ADDR_VAR 0 7
51766: PUSH
51767: DOUBLE
51768: LD_INT 1
51770: DEC
51771: ST_TO_ADDR
51772: LD_INT 3
51774: PUSH
51775: FOR_TO
51776: IFFALSE 51829
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51778: LD_ADDR_VAR 0 5
51782: PUSH
51783: LD_VAR 0 5
51787: PPUSH
51788: LD_VAR 0 7
51792: PPUSH
51793: LD_VAR 0 5
51797: PUSH
51798: LD_VAR 0 7
51802: ARRAY
51803: PUSH
51804: LD_VAR 0 9
51808: PUSH
51809: LD_VAR 0 7
51813: ARRAY
51814: PUSH
51815: LD_VAR 0 10
51819: MUL
51820: PLUS
51821: PPUSH
51822: CALL_OW 1
51826: ST_TO_ADDR
51827: GO 51775
51829: POP
51830: POP
// end ;
51831: GO 50310
51833: POP
51834: POP
// result := Replace ( result , 4 , tmp ) ;
51835: LD_ADDR_VAR 0 5
51839: PUSH
51840: LD_VAR 0 5
51844: PPUSH
51845: LD_INT 4
51847: PPUSH
51848: LD_VAR 0 8
51852: PPUSH
51853: CALL_OW 1
51857: ST_TO_ADDR
// end ;
51858: LD_VAR 0 5
51862: RET
// export function DangerAtRange ( unit , range ) ; begin
51863: LD_INT 0
51865: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51866: LD_ADDR_VAR 0 3
51870: PUSH
51871: LD_VAR 0 1
51875: PPUSH
51876: CALL_OW 255
51880: PPUSH
51881: LD_VAR 0 1
51885: PPUSH
51886: CALL_OW 250
51890: PPUSH
51891: LD_VAR 0 1
51895: PPUSH
51896: CALL_OW 251
51900: PPUSH
51901: LD_VAR 0 2
51905: PPUSH
51906: CALL 50162 0 4
51910: ST_TO_ADDR
// end ;
51911: LD_VAR 0 3
51915: RET
// export function DangerInArea ( side , area ) ; begin
51916: LD_INT 0
51918: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51919: LD_ADDR_VAR 0 3
51923: PUSH
51924: LD_VAR 0 2
51928: PPUSH
51929: LD_INT 81
51931: PUSH
51932: LD_VAR 0 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PPUSH
51941: CALL_OW 70
51945: ST_TO_ADDR
// end ;
51946: LD_VAR 0 3
51950: RET
// export function IsExtension ( b ) ; begin
51951: LD_INT 0
51953: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51954: LD_ADDR_VAR 0 2
51958: PUSH
51959: LD_VAR 0 1
51963: PUSH
51964: LD_INT 23
51966: PUSH
51967: LD_INT 20
51969: PUSH
51970: LD_INT 22
51972: PUSH
51973: LD_INT 17
51975: PUSH
51976: LD_INT 24
51978: PUSH
51979: LD_INT 21
51981: PUSH
51982: LD_INT 19
51984: PUSH
51985: LD_INT 16
51987: PUSH
51988: LD_INT 25
51990: PUSH
51991: LD_INT 18
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: IN
52006: ST_TO_ADDR
// end ;
52007: LD_VAR 0 2
52011: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
52012: LD_INT 0
52014: PPUSH
52015: PPUSH
52016: PPUSH
// result := [ ] ;
52017: LD_ADDR_VAR 0 4
52021: PUSH
52022: EMPTY
52023: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
52024: LD_ADDR_VAR 0 5
52028: PUSH
52029: LD_VAR 0 2
52033: PPUSH
52034: LD_INT 21
52036: PUSH
52037: LD_INT 3
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PPUSH
52044: CALL_OW 70
52048: ST_TO_ADDR
// if not tmp then
52049: LD_VAR 0 5
52053: NOT
52054: IFFALSE 52058
// exit ;
52056: GO 52122
// if checkLink then
52058: LD_VAR 0 3
52062: IFFALSE 52112
// begin for i in tmp do
52064: LD_ADDR_VAR 0 6
52068: PUSH
52069: LD_VAR 0 5
52073: PUSH
52074: FOR_IN
52075: IFFALSE 52110
// if GetBase ( i ) <> base then
52077: LD_VAR 0 6
52081: PPUSH
52082: CALL_OW 274
52086: PUSH
52087: LD_VAR 0 1
52091: NONEQUAL
52092: IFFALSE 52108
// ComLinkToBase ( base , i ) ;
52094: LD_VAR 0 1
52098: PPUSH
52099: LD_VAR 0 6
52103: PPUSH
52104: CALL_OW 169
52108: GO 52074
52110: POP
52111: POP
// end ; result := tmp ;
52112: LD_ADDR_VAR 0 4
52116: PUSH
52117: LD_VAR 0 5
52121: ST_TO_ADDR
// end ;
52122: LD_VAR 0 4
52126: RET
// export function ComComplete ( units , b ) ; var i ; begin
52127: LD_INT 0
52129: PPUSH
52130: PPUSH
// if not units then
52131: LD_VAR 0 1
52135: NOT
52136: IFFALSE 52140
// exit ;
52138: GO 52230
// for i in units do
52140: LD_ADDR_VAR 0 4
52144: PUSH
52145: LD_VAR 0 1
52149: PUSH
52150: FOR_IN
52151: IFFALSE 52228
// if BuildingStatus ( b ) = bs_build then
52153: LD_VAR 0 2
52157: PPUSH
52158: CALL_OW 461
52162: PUSH
52163: LD_INT 1
52165: EQUAL
52166: IFFALSE 52226
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52168: LD_VAR 0 4
52172: PPUSH
52173: LD_STRING h
52175: PUSH
52176: LD_VAR 0 2
52180: PPUSH
52181: CALL_OW 250
52185: PUSH
52186: LD_VAR 0 2
52190: PPUSH
52191: CALL_OW 251
52195: PUSH
52196: LD_VAR 0 2
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: PUSH
52219: EMPTY
52220: LIST
52221: PPUSH
52222: CALL_OW 446
52226: GO 52150
52228: POP
52229: POP
// end ;
52230: LD_VAR 0 3
52234: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
52235: LD_INT 0
52237: PPUSH
52238: PPUSH
52239: PPUSH
52240: PPUSH
52241: PPUSH
52242: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
52243: LD_VAR 0 1
52247: NOT
52248: PUSH
52249: LD_VAR 0 1
52253: PPUSH
52254: CALL_OW 263
52258: PUSH
52259: LD_INT 2
52261: NONEQUAL
52262: OR
52263: IFFALSE 52267
// exit ;
52265: GO 52583
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
52267: LD_ADDR_VAR 0 6
52271: PUSH
52272: LD_INT 22
52274: PUSH
52275: LD_VAR 0 1
52279: PPUSH
52280: CALL_OW 255
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: LD_INT 30
52294: PUSH
52295: LD_INT 36
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 34
52304: PUSH
52305: LD_INT 31
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PPUSH
52321: CALL_OW 69
52325: ST_TO_ADDR
// if not tmp then
52326: LD_VAR 0 6
52330: NOT
52331: IFFALSE 52335
// exit ;
52333: GO 52583
// result := [ ] ;
52335: LD_ADDR_VAR 0 2
52339: PUSH
52340: EMPTY
52341: ST_TO_ADDR
// for i in tmp do
52342: LD_ADDR_VAR 0 3
52346: PUSH
52347: LD_VAR 0 6
52351: PUSH
52352: FOR_IN
52353: IFFALSE 52424
// begin t := UnitsInside ( i ) ;
52355: LD_ADDR_VAR 0 4
52359: PUSH
52360: LD_VAR 0 3
52364: PPUSH
52365: CALL_OW 313
52369: ST_TO_ADDR
// if t then
52370: LD_VAR 0 4
52374: IFFALSE 52422
// for j in t do
52376: LD_ADDR_VAR 0 7
52380: PUSH
52381: LD_VAR 0 4
52385: PUSH
52386: FOR_IN
52387: IFFALSE 52420
// result := Replace ( result , result + 1 , j ) ;
52389: LD_ADDR_VAR 0 2
52393: PUSH
52394: LD_VAR 0 2
52398: PPUSH
52399: LD_VAR 0 2
52403: PUSH
52404: LD_INT 1
52406: PLUS
52407: PPUSH
52408: LD_VAR 0 7
52412: PPUSH
52413: CALL_OW 1
52417: ST_TO_ADDR
52418: GO 52386
52420: POP
52421: POP
// end ;
52422: GO 52352
52424: POP
52425: POP
// if not result then
52426: LD_VAR 0 2
52430: NOT
52431: IFFALSE 52435
// exit ;
52433: GO 52583
// mech := result [ 1 ] ;
52435: LD_ADDR_VAR 0 5
52439: PUSH
52440: LD_VAR 0 2
52444: PUSH
52445: LD_INT 1
52447: ARRAY
52448: ST_TO_ADDR
// if result > 1 then
52449: LD_VAR 0 2
52453: PUSH
52454: LD_INT 1
52456: GREATER
52457: IFFALSE 52569
// begin for i = 2 to result do
52459: LD_ADDR_VAR 0 3
52463: PUSH
52464: DOUBLE
52465: LD_INT 2
52467: DEC
52468: ST_TO_ADDR
52469: LD_VAR 0 2
52473: PUSH
52474: FOR_TO
52475: IFFALSE 52567
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52477: LD_ADDR_VAR 0 4
52481: PUSH
52482: LD_VAR 0 2
52486: PUSH
52487: LD_VAR 0 3
52491: ARRAY
52492: PPUSH
52493: LD_INT 3
52495: PPUSH
52496: CALL_OW 259
52500: PUSH
52501: LD_VAR 0 2
52505: PUSH
52506: LD_VAR 0 3
52510: ARRAY
52511: PPUSH
52512: CALL_OW 432
52516: MINUS
52517: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52518: LD_VAR 0 4
52522: PUSH
52523: LD_VAR 0 5
52527: PPUSH
52528: LD_INT 3
52530: PPUSH
52531: CALL_OW 259
52535: PUSH
52536: LD_VAR 0 5
52540: PPUSH
52541: CALL_OW 432
52545: MINUS
52546: GREATEREQUAL
52547: IFFALSE 52565
// mech := result [ i ] ;
52549: LD_ADDR_VAR 0 5
52553: PUSH
52554: LD_VAR 0 2
52558: PUSH
52559: LD_VAR 0 3
52563: ARRAY
52564: ST_TO_ADDR
// end ;
52565: GO 52474
52567: POP
52568: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52569: LD_VAR 0 1
52573: PPUSH
52574: LD_VAR 0 5
52578: PPUSH
52579: CALL_OW 135
// end ;
52583: LD_VAR 0 2
52587: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52588: LD_INT 0
52590: PPUSH
52591: PPUSH
52592: PPUSH
52593: PPUSH
52594: PPUSH
52595: PPUSH
52596: PPUSH
52597: PPUSH
52598: PPUSH
52599: PPUSH
52600: PPUSH
52601: PPUSH
52602: PPUSH
// result := [ ] ;
52603: LD_ADDR_VAR 0 7
52607: PUSH
52608: EMPTY
52609: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52610: LD_VAR 0 1
52614: PPUSH
52615: CALL_OW 266
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: IN
52630: NOT
52631: IFFALSE 52635
// exit ;
52633: GO 54269
// if name then
52635: LD_VAR 0 3
52639: IFFALSE 52655
// SetBName ( base_dep , name ) ;
52641: LD_VAR 0 1
52645: PPUSH
52646: LD_VAR 0 3
52650: PPUSH
52651: CALL_OW 500
// base := GetBase ( base_dep ) ;
52655: LD_ADDR_VAR 0 15
52659: PUSH
52660: LD_VAR 0 1
52664: PPUSH
52665: CALL_OW 274
52669: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52670: LD_ADDR_VAR 0 16
52674: PUSH
52675: LD_VAR 0 1
52679: PPUSH
52680: CALL_OW 255
52684: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52685: LD_ADDR_VAR 0 17
52689: PUSH
52690: LD_VAR 0 1
52694: PPUSH
52695: CALL_OW 248
52699: ST_TO_ADDR
// if sources then
52700: LD_VAR 0 5
52704: IFFALSE 52751
// for i = 1 to 3 do
52706: LD_ADDR_VAR 0 8
52710: PUSH
52711: DOUBLE
52712: LD_INT 1
52714: DEC
52715: ST_TO_ADDR
52716: LD_INT 3
52718: PUSH
52719: FOR_TO
52720: IFFALSE 52749
// AddResourceType ( base , i , sources [ i ] ) ;
52722: LD_VAR 0 15
52726: PPUSH
52727: LD_VAR 0 8
52731: PPUSH
52732: LD_VAR 0 5
52736: PUSH
52737: LD_VAR 0 8
52741: ARRAY
52742: PPUSH
52743: CALL_OW 276
52747: GO 52719
52749: POP
52750: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52751: LD_ADDR_VAR 0 18
52755: PUSH
52756: LD_VAR 0 15
52760: PPUSH
52761: LD_VAR 0 2
52765: PPUSH
52766: LD_INT 1
52768: PPUSH
52769: CALL 52012 0 3
52773: ST_TO_ADDR
// InitHc ;
52774: CALL_OW 19
// InitUc ;
52778: CALL_OW 18
// uc_side := side ;
52782: LD_ADDR_OWVAR 20
52786: PUSH
52787: LD_VAR 0 16
52791: ST_TO_ADDR
// uc_nation := nation ;
52792: LD_ADDR_OWVAR 21
52796: PUSH
52797: LD_VAR 0 17
52801: ST_TO_ADDR
// if buildings then
52802: LD_VAR 0 18
52806: IFFALSE 54128
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52808: LD_ADDR_VAR 0 19
52812: PUSH
52813: LD_VAR 0 18
52817: PPUSH
52818: LD_INT 2
52820: PUSH
52821: LD_INT 30
52823: PUSH
52824: LD_INT 29
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 30
52833: PUSH
52834: LD_INT 30
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: PPUSH
52846: CALL_OW 72
52850: ST_TO_ADDR
// if tmp then
52851: LD_VAR 0 19
52855: IFFALSE 52903
// for i in tmp do
52857: LD_ADDR_VAR 0 8
52861: PUSH
52862: LD_VAR 0 19
52866: PUSH
52867: FOR_IN
52868: IFFALSE 52901
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52870: LD_VAR 0 8
52874: PPUSH
52875: CALL_OW 250
52879: PPUSH
52880: LD_VAR 0 8
52884: PPUSH
52885: CALL_OW 251
52889: PPUSH
52890: LD_VAR 0 16
52894: PPUSH
52895: CALL_OW 441
52899: GO 52867
52901: POP
52902: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52903: LD_VAR 0 18
52907: PPUSH
52908: LD_INT 2
52910: PUSH
52911: LD_INT 30
52913: PUSH
52914: LD_INT 32
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 30
52923: PUSH
52924: LD_INT 33
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: PPUSH
52936: CALL_OW 72
52940: IFFALSE 53028
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52942: LD_ADDR_VAR 0 8
52946: PUSH
52947: LD_VAR 0 18
52951: PPUSH
52952: LD_INT 2
52954: PUSH
52955: LD_INT 30
52957: PUSH
52958: LD_INT 32
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 30
52967: PUSH
52968: LD_INT 33
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: LIST
52979: PPUSH
52980: CALL_OW 72
52984: PUSH
52985: FOR_IN
52986: IFFALSE 53026
// begin if not GetBWeapon ( i ) then
52988: LD_VAR 0 8
52992: PPUSH
52993: CALL_OW 269
52997: NOT
52998: IFFALSE 53024
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
53000: LD_VAR 0 8
53004: PPUSH
53005: LD_VAR 0 8
53009: PPUSH
53010: LD_VAR 0 2
53014: PPUSH
53015: CALL 54274 0 2
53019: PPUSH
53020: CALL_OW 431
// end ;
53024: GO 52985
53026: POP
53027: POP
// end ; for i = 1 to personel do
53028: LD_ADDR_VAR 0 8
53032: PUSH
53033: DOUBLE
53034: LD_INT 1
53036: DEC
53037: ST_TO_ADDR
53038: LD_VAR 0 6
53042: PUSH
53043: FOR_TO
53044: IFFALSE 54108
// begin if i > 4 then
53046: LD_VAR 0 8
53050: PUSH
53051: LD_INT 4
53053: GREATER
53054: IFFALSE 53058
// break ;
53056: GO 54108
// case i of 1 :
53058: LD_VAR 0 8
53062: PUSH
53063: LD_INT 1
53065: DOUBLE
53066: EQUAL
53067: IFTRUE 53071
53069: GO 53151
53071: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
53072: LD_ADDR_VAR 0 12
53076: PUSH
53077: LD_VAR 0 18
53081: PPUSH
53082: LD_INT 22
53084: PUSH
53085: LD_VAR 0 16
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 58
53096: PUSH
53097: EMPTY
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 30
53105: PUSH
53106: LD_INT 32
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 30
53115: PUSH
53116: LD_INT 4
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 30
53125: PUSH
53126: LD_INT 5
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: LIST
53143: PPUSH
53144: CALL_OW 72
53148: ST_TO_ADDR
53149: GO 53373
53151: LD_INT 2
53153: DOUBLE
53154: EQUAL
53155: IFTRUE 53159
53157: GO 53221
53159: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53160: LD_ADDR_VAR 0 12
53164: PUSH
53165: LD_VAR 0 18
53169: PPUSH
53170: LD_INT 22
53172: PUSH
53173: LD_VAR 0 16
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: LD_INT 30
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 30
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PPUSH
53214: CALL_OW 72
53218: ST_TO_ADDR
53219: GO 53373
53221: LD_INT 3
53223: DOUBLE
53224: EQUAL
53225: IFTRUE 53229
53227: GO 53291
53229: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
53230: LD_ADDR_VAR 0 12
53234: PUSH
53235: LD_VAR 0 18
53239: PPUSH
53240: LD_INT 22
53242: PUSH
53243: LD_VAR 0 16
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 30
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 30
53267: PUSH
53268: LD_INT 3
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PPUSH
53284: CALL_OW 72
53288: ST_TO_ADDR
53289: GO 53373
53291: LD_INT 4
53293: DOUBLE
53294: EQUAL
53295: IFTRUE 53299
53297: GO 53372
53299: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
53300: LD_ADDR_VAR 0 12
53304: PUSH
53305: LD_VAR 0 18
53309: PPUSH
53310: LD_INT 22
53312: PUSH
53313: LD_VAR 0 16
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: LD_INT 30
53327: PUSH
53328: LD_INT 6
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 30
53337: PUSH
53338: LD_INT 7
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 30
53347: PUSH
53348: LD_INT 8
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PPUSH
53365: CALL_OW 72
53369: ST_TO_ADDR
53370: GO 53373
53372: POP
// if i = 1 then
53373: LD_VAR 0 8
53377: PUSH
53378: LD_INT 1
53380: EQUAL
53381: IFFALSE 53492
// begin tmp := [ ] ;
53383: LD_ADDR_VAR 0 19
53387: PUSH
53388: EMPTY
53389: ST_TO_ADDR
// for j in f do
53390: LD_ADDR_VAR 0 9
53394: PUSH
53395: LD_VAR 0 12
53399: PUSH
53400: FOR_IN
53401: IFFALSE 53474
// if GetBType ( j ) = b_bunker then
53403: LD_VAR 0 9
53407: PPUSH
53408: CALL_OW 266
53412: PUSH
53413: LD_INT 32
53415: EQUAL
53416: IFFALSE 53443
// tmp := Insert ( tmp , 1 , j ) else
53418: LD_ADDR_VAR 0 19
53422: PUSH
53423: LD_VAR 0 19
53427: PPUSH
53428: LD_INT 1
53430: PPUSH
53431: LD_VAR 0 9
53435: PPUSH
53436: CALL_OW 2
53440: ST_TO_ADDR
53441: GO 53472
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53443: LD_ADDR_VAR 0 19
53447: PUSH
53448: LD_VAR 0 19
53452: PPUSH
53453: LD_VAR 0 19
53457: PUSH
53458: LD_INT 1
53460: PLUS
53461: PPUSH
53462: LD_VAR 0 9
53466: PPUSH
53467: CALL_OW 2
53471: ST_TO_ADDR
53472: GO 53400
53474: POP
53475: POP
// if tmp then
53476: LD_VAR 0 19
53480: IFFALSE 53492
// f := tmp ;
53482: LD_ADDR_VAR 0 12
53486: PUSH
53487: LD_VAR 0 19
53491: ST_TO_ADDR
// end ; x := personel [ i ] ;
53492: LD_ADDR_VAR 0 13
53496: PUSH
53497: LD_VAR 0 6
53501: PUSH
53502: LD_VAR 0 8
53506: ARRAY
53507: ST_TO_ADDR
// if x = - 1 then
53508: LD_VAR 0 13
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: EQUAL
53517: IFFALSE 53726
// begin for j in f do
53519: LD_ADDR_VAR 0 9
53523: PUSH
53524: LD_VAR 0 12
53528: PUSH
53529: FOR_IN
53530: IFFALSE 53722
// repeat InitHc ;
53532: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53536: LD_VAR 0 9
53540: PPUSH
53541: CALL_OW 266
53545: PUSH
53546: LD_INT 5
53548: EQUAL
53549: IFFALSE 53619
// begin if UnitsInside ( j ) < 3 then
53551: LD_VAR 0 9
53555: PPUSH
53556: CALL_OW 313
53560: PUSH
53561: LD_INT 3
53563: LESS
53564: IFFALSE 53600
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53566: LD_INT 0
53568: PPUSH
53569: LD_INT 5
53571: PUSH
53572: LD_INT 8
53574: PUSH
53575: LD_INT 9
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: PUSH
53583: LD_VAR 0 17
53587: ARRAY
53588: PPUSH
53589: LD_VAR 0 4
53593: PPUSH
53594: CALL_OW 380
53598: GO 53617
// PrepareHuman ( false , i , skill ) ;
53600: LD_INT 0
53602: PPUSH
53603: LD_VAR 0 8
53607: PPUSH
53608: LD_VAR 0 4
53612: PPUSH
53613: CALL_OW 380
// end else
53617: GO 53636
// PrepareHuman ( false , i , skill ) ;
53619: LD_INT 0
53621: PPUSH
53622: LD_VAR 0 8
53626: PPUSH
53627: LD_VAR 0 4
53631: PPUSH
53632: CALL_OW 380
// un := CreateHuman ;
53636: LD_ADDR_VAR 0 14
53640: PUSH
53641: CALL_OW 44
53645: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53646: LD_ADDR_VAR 0 7
53650: PUSH
53651: LD_VAR 0 7
53655: PPUSH
53656: LD_INT 1
53658: PPUSH
53659: LD_VAR 0 14
53663: PPUSH
53664: CALL_OW 2
53668: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53669: LD_VAR 0 14
53673: PPUSH
53674: LD_VAR 0 9
53678: PPUSH
53679: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53683: LD_VAR 0 9
53687: PPUSH
53688: CALL_OW 313
53692: PUSH
53693: LD_INT 6
53695: EQUAL
53696: PUSH
53697: LD_VAR 0 9
53701: PPUSH
53702: CALL_OW 266
53706: PUSH
53707: LD_INT 32
53709: PUSH
53710: LD_INT 31
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: IN
53717: OR
53718: IFFALSE 53532
53720: GO 53529
53722: POP
53723: POP
// end else
53724: GO 54106
// for j = 1 to x do
53726: LD_ADDR_VAR 0 9
53730: PUSH
53731: DOUBLE
53732: LD_INT 1
53734: DEC
53735: ST_TO_ADDR
53736: LD_VAR 0 13
53740: PUSH
53741: FOR_TO
53742: IFFALSE 54104
// begin InitHc ;
53744: CALL_OW 19
// if not f then
53748: LD_VAR 0 12
53752: NOT
53753: IFFALSE 53842
// begin PrepareHuman ( false , i , skill ) ;
53755: LD_INT 0
53757: PPUSH
53758: LD_VAR 0 8
53762: PPUSH
53763: LD_VAR 0 4
53767: PPUSH
53768: CALL_OW 380
// un := CreateHuman ;
53772: LD_ADDR_VAR 0 14
53776: PUSH
53777: CALL_OW 44
53781: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53782: LD_ADDR_VAR 0 7
53786: PUSH
53787: LD_VAR 0 7
53791: PPUSH
53792: LD_INT 1
53794: PPUSH
53795: LD_VAR 0 14
53799: PPUSH
53800: CALL_OW 2
53804: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53805: LD_VAR 0 14
53809: PPUSH
53810: LD_VAR 0 1
53814: PPUSH
53815: CALL_OW 250
53819: PPUSH
53820: LD_VAR 0 1
53824: PPUSH
53825: CALL_OW 251
53829: PPUSH
53830: LD_INT 10
53832: PPUSH
53833: LD_INT 0
53835: PPUSH
53836: CALL_OW 50
// continue ;
53840: GO 53741
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53842: LD_VAR 0 12
53846: PUSH
53847: LD_INT 1
53849: ARRAY
53850: PPUSH
53851: CALL_OW 313
53855: PUSH
53856: LD_VAR 0 12
53860: PUSH
53861: LD_INT 1
53863: ARRAY
53864: PPUSH
53865: CALL_OW 266
53869: PUSH
53870: LD_INT 32
53872: PUSH
53873: LD_INT 31
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: IN
53880: AND
53881: PUSH
53882: LD_VAR 0 12
53886: PUSH
53887: LD_INT 1
53889: ARRAY
53890: PPUSH
53891: CALL_OW 313
53895: PUSH
53896: LD_INT 6
53898: EQUAL
53899: OR
53900: IFFALSE 53920
// f := Delete ( f , 1 ) ;
53902: LD_ADDR_VAR 0 12
53906: PUSH
53907: LD_VAR 0 12
53911: PPUSH
53912: LD_INT 1
53914: PPUSH
53915: CALL_OW 3
53919: ST_TO_ADDR
// if not f then
53920: LD_VAR 0 12
53924: NOT
53925: IFFALSE 53943
// begin x := x + 2 ;
53927: LD_ADDR_VAR 0 13
53931: PUSH
53932: LD_VAR 0 13
53936: PUSH
53937: LD_INT 2
53939: PLUS
53940: ST_TO_ADDR
// continue ;
53941: GO 53741
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53943: LD_VAR 0 12
53947: PUSH
53948: LD_INT 1
53950: ARRAY
53951: PPUSH
53952: CALL_OW 266
53956: PUSH
53957: LD_INT 5
53959: EQUAL
53960: IFFALSE 54034
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53962: LD_VAR 0 12
53966: PUSH
53967: LD_INT 1
53969: ARRAY
53970: PPUSH
53971: CALL_OW 313
53975: PUSH
53976: LD_INT 3
53978: LESS
53979: IFFALSE 54015
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53981: LD_INT 0
53983: PPUSH
53984: LD_INT 5
53986: PUSH
53987: LD_INT 8
53989: PUSH
53990: LD_INT 9
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: LIST
53997: PUSH
53998: LD_VAR 0 17
54002: ARRAY
54003: PPUSH
54004: LD_VAR 0 4
54008: PPUSH
54009: CALL_OW 380
54013: GO 54032
// PrepareHuman ( false , i , skill ) ;
54015: LD_INT 0
54017: PPUSH
54018: LD_VAR 0 8
54022: PPUSH
54023: LD_VAR 0 4
54027: PPUSH
54028: CALL_OW 380
// end else
54032: GO 54051
// PrepareHuman ( false , i , skill ) ;
54034: LD_INT 0
54036: PPUSH
54037: LD_VAR 0 8
54041: PPUSH
54042: LD_VAR 0 4
54046: PPUSH
54047: CALL_OW 380
// un := CreateHuman ;
54051: LD_ADDR_VAR 0 14
54055: PUSH
54056: CALL_OW 44
54060: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54061: LD_ADDR_VAR 0 7
54065: PUSH
54066: LD_VAR 0 7
54070: PPUSH
54071: LD_INT 1
54073: PPUSH
54074: LD_VAR 0 14
54078: PPUSH
54079: CALL_OW 2
54083: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
54084: LD_VAR 0 14
54088: PPUSH
54089: LD_VAR 0 12
54093: PUSH
54094: LD_INT 1
54096: ARRAY
54097: PPUSH
54098: CALL_OW 52
// end ;
54102: GO 53741
54104: POP
54105: POP
// end ;
54106: GO 53043
54108: POP
54109: POP
// result := result ^ buildings ;
54110: LD_ADDR_VAR 0 7
54114: PUSH
54115: LD_VAR 0 7
54119: PUSH
54120: LD_VAR 0 18
54124: ADD
54125: ST_TO_ADDR
// end else
54126: GO 54269
// begin for i = 1 to personel do
54128: LD_ADDR_VAR 0 8
54132: PUSH
54133: DOUBLE
54134: LD_INT 1
54136: DEC
54137: ST_TO_ADDR
54138: LD_VAR 0 6
54142: PUSH
54143: FOR_TO
54144: IFFALSE 54267
// begin if i > 4 then
54146: LD_VAR 0 8
54150: PUSH
54151: LD_INT 4
54153: GREATER
54154: IFFALSE 54158
// break ;
54156: GO 54267
// x := personel [ i ] ;
54158: LD_ADDR_VAR 0 13
54162: PUSH
54163: LD_VAR 0 6
54167: PUSH
54168: LD_VAR 0 8
54172: ARRAY
54173: ST_TO_ADDR
// if x = - 1 then
54174: LD_VAR 0 13
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: EQUAL
54183: IFFALSE 54187
// continue ;
54185: GO 54143
// PrepareHuman ( false , i , skill ) ;
54187: LD_INT 0
54189: PPUSH
54190: LD_VAR 0 8
54194: PPUSH
54195: LD_VAR 0 4
54199: PPUSH
54200: CALL_OW 380
// un := CreateHuman ;
54204: LD_ADDR_VAR 0 14
54208: PUSH
54209: CALL_OW 44
54213: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54214: LD_VAR 0 14
54218: PPUSH
54219: LD_VAR 0 1
54223: PPUSH
54224: CALL_OW 250
54228: PPUSH
54229: LD_VAR 0 1
54233: PPUSH
54234: CALL_OW 251
54238: PPUSH
54239: LD_INT 10
54241: PPUSH
54242: LD_INT 0
54244: PPUSH
54245: CALL_OW 50
// result := result ^ un ;
54249: LD_ADDR_VAR 0 7
54253: PUSH
54254: LD_VAR 0 7
54258: PUSH
54259: LD_VAR 0 14
54263: ADD
54264: ST_TO_ADDR
// end ;
54265: GO 54143
54267: POP
54268: POP
// end ; end ;
54269: LD_VAR 0 7
54273: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
54274: LD_INT 0
54276: PPUSH
54277: PPUSH
54278: PPUSH
54279: PPUSH
54280: PPUSH
54281: PPUSH
54282: PPUSH
54283: PPUSH
54284: PPUSH
54285: PPUSH
54286: PPUSH
54287: PPUSH
54288: PPUSH
54289: PPUSH
54290: PPUSH
54291: PPUSH
// result := false ;
54292: LD_ADDR_VAR 0 3
54296: PUSH
54297: LD_INT 0
54299: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
54300: LD_VAR 0 1
54304: NOT
54305: PUSH
54306: LD_VAR 0 1
54310: PPUSH
54311: CALL_OW 266
54315: PUSH
54316: LD_INT 32
54318: PUSH
54319: LD_INT 33
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: IN
54326: NOT
54327: OR
54328: IFFALSE 54332
// exit ;
54330: GO 55441
// nat := GetNation ( tower ) ;
54332: LD_ADDR_VAR 0 12
54336: PUSH
54337: LD_VAR 0 1
54341: PPUSH
54342: CALL_OW 248
54346: ST_TO_ADDR
// side := GetSide ( tower ) ;
54347: LD_ADDR_VAR 0 16
54351: PUSH
54352: LD_VAR 0 1
54356: PPUSH
54357: CALL_OW 255
54361: ST_TO_ADDR
// x := GetX ( tower ) ;
54362: LD_ADDR_VAR 0 10
54366: PUSH
54367: LD_VAR 0 1
54371: PPUSH
54372: CALL_OW 250
54376: ST_TO_ADDR
// y := GetY ( tower ) ;
54377: LD_ADDR_VAR 0 11
54381: PUSH
54382: LD_VAR 0 1
54386: PPUSH
54387: CALL_OW 251
54391: ST_TO_ADDR
// if not x or not y then
54392: LD_VAR 0 10
54396: NOT
54397: PUSH
54398: LD_VAR 0 11
54402: NOT
54403: OR
54404: IFFALSE 54408
// exit ;
54406: GO 55441
// weapon := 0 ;
54408: LD_ADDR_VAR 0 18
54412: PUSH
54413: LD_INT 0
54415: ST_TO_ADDR
// fac_list := [ ] ;
54416: LD_ADDR_VAR 0 17
54420: PUSH
54421: EMPTY
54422: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
54423: LD_ADDR_VAR 0 6
54427: PUSH
54428: LD_VAR 0 1
54432: PPUSH
54433: CALL_OW 274
54437: PPUSH
54438: LD_VAR 0 2
54442: PPUSH
54443: LD_INT 0
54445: PPUSH
54446: CALL 52012 0 3
54450: PPUSH
54451: LD_INT 30
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PPUSH
54461: CALL_OW 72
54465: ST_TO_ADDR
// if not factories then
54466: LD_VAR 0 6
54470: NOT
54471: IFFALSE 54475
// exit ;
54473: GO 55441
// for i in factories do
54475: LD_ADDR_VAR 0 8
54479: PUSH
54480: LD_VAR 0 6
54484: PUSH
54485: FOR_IN
54486: IFFALSE 54511
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54488: LD_ADDR_VAR 0 17
54492: PUSH
54493: LD_VAR 0 17
54497: PUSH
54498: LD_VAR 0 8
54502: PPUSH
54503: CALL_OW 478
54507: UNION
54508: ST_TO_ADDR
54509: GO 54485
54511: POP
54512: POP
// if not fac_list then
54513: LD_VAR 0 17
54517: NOT
54518: IFFALSE 54522
// exit ;
54520: GO 55441
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54522: LD_ADDR_VAR 0 5
54526: PUSH
54527: LD_INT 4
54529: PUSH
54530: LD_INT 5
54532: PUSH
54533: LD_INT 9
54535: PUSH
54536: LD_INT 10
54538: PUSH
54539: LD_INT 6
54541: PUSH
54542: LD_INT 7
54544: PUSH
54545: LD_INT 11
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 27
54559: PUSH
54560: LD_INT 28
54562: PUSH
54563: LD_INT 26
54565: PUSH
54566: LD_INT 30
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 43
54577: PUSH
54578: LD_INT 44
54580: PUSH
54581: LD_INT 46
54583: PUSH
54584: LD_INT 45
54586: PUSH
54587: LD_INT 47
54589: PUSH
54590: LD_INT 49
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: PUSH
54606: LD_VAR 0 12
54610: ARRAY
54611: ST_TO_ADDR
// list := list isect fac_list ;
54612: LD_ADDR_VAR 0 5
54616: PUSH
54617: LD_VAR 0 5
54621: PUSH
54622: LD_VAR 0 17
54626: ISECT
54627: ST_TO_ADDR
// if not list then
54628: LD_VAR 0 5
54632: NOT
54633: IFFALSE 54637
// exit ;
54635: GO 55441
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54637: LD_VAR 0 12
54641: PUSH
54642: LD_INT 3
54644: EQUAL
54645: PUSH
54646: LD_INT 49
54648: PUSH
54649: LD_VAR 0 5
54653: IN
54654: AND
54655: PUSH
54656: LD_INT 31
54658: PPUSH
54659: LD_VAR 0 16
54663: PPUSH
54664: CALL_OW 321
54668: PUSH
54669: LD_INT 2
54671: EQUAL
54672: AND
54673: IFFALSE 54733
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54675: LD_INT 22
54677: PUSH
54678: LD_VAR 0 16
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 35
54689: PUSH
54690: LD_INT 49
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 91
54699: PUSH
54700: LD_VAR 0 1
54704: PUSH
54705: LD_INT 10
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: LIST
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: LIST
54717: PPUSH
54718: CALL_OW 69
54722: NOT
54723: IFFALSE 54733
// weapon := ru_time_lapser ;
54725: LD_ADDR_VAR 0 18
54729: PUSH
54730: LD_INT 49
54732: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54733: LD_VAR 0 12
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 2
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: IN
54748: PUSH
54749: LD_INT 11
54751: PUSH
54752: LD_VAR 0 5
54756: IN
54757: PUSH
54758: LD_INT 30
54760: PUSH
54761: LD_VAR 0 5
54765: IN
54766: OR
54767: AND
54768: PUSH
54769: LD_INT 6
54771: PPUSH
54772: LD_VAR 0 16
54776: PPUSH
54777: CALL_OW 321
54781: PUSH
54782: LD_INT 2
54784: EQUAL
54785: AND
54786: IFFALSE 54951
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54788: LD_INT 22
54790: PUSH
54791: LD_VAR 0 16
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 35
54805: PUSH
54806: LD_INT 11
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 35
54815: PUSH
54816: LD_INT 30
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 91
54830: PUSH
54831: LD_VAR 0 1
54835: PUSH
54836: LD_INT 18
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: LIST
54848: PPUSH
54849: CALL_OW 69
54853: NOT
54854: PUSH
54855: LD_INT 22
54857: PUSH
54858: LD_VAR 0 16
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: LD_INT 30
54872: PUSH
54873: LD_INT 32
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 30
54882: PUSH
54883: LD_INT 33
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 91
54897: PUSH
54898: LD_VAR 0 1
54902: PUSH
54903: LD_INT 12
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: PPUSH
54919: CALL_OW 69
54923: PUSH
54924: LD_INT 2
54926: GREATER
54927: AND
54928: IFFALSE 54951
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54930: LD_ADDR_VAR 0 18
54934: PUSH
54935: LD_INT 11
54937: PUSH
54938: LD_INT 30
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_VAR 0 12
54949: ARRAY
54950: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54951: LD_VAR 0 18
54955: NOT
54956: PUSH
54957: LD_INT 40
54959: PPUSH
54960: LD_VAR 0 16
54964: PPUSH
54965: CALL_OW 321
54969: PUSH
54970: LD_INT 2
54972: EQUAL
54973: AND
54974: PUSH
54975: LD_INT 7
54977: PUSH
54978: LD_VAR 0 5
54982: IN
54983: PUSH
54984: LD_INT 28
54986: PUSH
54987: LD_VAR 0 5
54991: IN
54992: OR
54993: PUSH
54994: LD_INT 45
54996: PUSH
54997: LD_VAR 0 5
55001: IN
55002: OR
55003: AND
55004: IFFALSE 55258
// begin hex := GetHexInfo ( x , y ) ;
55006: LD_ADDR_VAR 0 4
55010: PUSH
55011: LD_VAR 0 10
55015: PPUSH
55016: LD_VAR 0 11
55020: PPUSH
55021: CALL_OW 546
55025: ST_TO_ADDR
// if hex [ 1 ] then
55026: LD_VAR 0 4
55030: PUSH
55031: LD_INT 1
55033: ARRAY
55034: IFFALSE 55038
// exit ;
55036: GO 55441
// height := hex [ 2 ] ;
55038: LD_ADDR_VAR 0 15
55042: PUSH
55043: LD_VAR 0 4
55047: PUSH
55048: LD_INT 2
55050: ARRAY
55051: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
55052: LD_ADDR_VAR 0 14
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: LD_INT 5
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: ST_TO_ADDR
// for i in tmp do
55075: LD_ADDR_VAR 0 8
55079: PUSH
55080: LD_VAR 0 14
55084: PUSH
55085: FOR_IN
55086: IFFALSE 55256
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
55088: LD_ADDR_VAR 0 9
55092: PUSH
55093: LD_VAR 0 10
55097: PPUSH
55098: LD_VAR 0 8
55102: PPUSH
55103: LD_INT 5
55105: PPUSH
55106: CALL_OW 272
55110: PUSH
55111: LD_VAR 0 11
55115: PPUSH
55116: LD_VAR 0 8
55120: PPUSH
55121: LD_INT 5
55123: PPUSH
55124: CALL_OW 273
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55133: LD_VAR 0 9
55137: PUSH
55138: LD_INT 1
55140: ARRAY
55141: PPUSH
55142: LD_VAR 0 9
55146: PUSH
55147: LD_INT 2
55149: ARRAY
55150: PPUSH
55151: CALL_OW 488
55155: IFFALSE 55254
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
55157: LD_ADDR_VAR 0 4
55161: PUSH
55162: LD_VAR 0 9
55166: PUSH
55167: LD_INT 1
55169: ARRAY
55170: PPUSH
55171: LD_VAR 0 9
55175: PUSH
55176: LD_INT 2
55178: ARRAY
55179: PPUSH
55180: CALL_OW 546
55184: ST_TO_ADDR
// if hex [ 1 ] then
55185: LD_VAR 0 4
55189: PUSH
55190: LD_INT 1
55192: ARRAY
55193: IFFALSE 55197
// continue ;
55195: GO 55085
// h := hex [ 2 ] ;
55197: LD_ADDR_VAR 0 13
55201: PUSH
55202: LD_VAR 0 4
55206: PUSH
55207: LD_INT 2
55209: ARRAY
55210: ST_TO_ADDR
// if h + 7 < height then
55211: LD_VAR 0 13
55215: PUSH
55216: LD_INT 7
55218: PLUS
55219: PUSH
55220: LD_VAR 0 15
55224: LESS
55225: IFFALSE 55254
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
55227: LD_ADDR_VAR 0 18
55231: PUSH
55232: LD_INT 7
55234: PUSH
55235: LD_INT 28
55237: PUSH
55238: LD_INT 45
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: PUSH
55246: LD_VAR 0 12
55250: ARRAY
55251: ST_TO_ADDR
// break ;
55252: GO 55256
// end ; end ; end ;
55254: GO 55085
55256: POP
55257: POP
// end ; if not weapon then
55258: LD_VAR 0 18
55262: NOT
55263: IFFALSE 55323
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
55265: LD_ADDR_VAR 0 5
55269: PUSH
55270: LD_VAR 0 5
55274: PUSH
55275: LD_INT 11
55277: PUSH
55278: LD_INT 30
55280: PUSH
55281: LD_INT 49
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: LIST
55288: DIFF
55289: ST_TO_ADDR
// if not list then
55290: LD_VAR 0 5
55294: NOT
55295: IFFALSE 55299
// exit ;
55297: GO 55441
// weapon := list [ rand ( 1 , list ) ] ;
55299: LD_ADDR_VAR 0 18
55303: PUSH
55304: LD_VAR 0 5
55308: PUSH
55309: LD_INT 1
55311: PPUSH
55312: LD_VAR 0 5
55316: PPUSH
55317: CALL_OW 12
55321: ARRAY
55322: ST_TO_ADDR
// end ; if weapon then
55323: LD_VAR 0 18
55327: IFFALSE 55441
// begin tmp := CostOfWeapon ( weapon ) ;
55329: LD_ADDR_VAR 0 14
55333: PUSH
55334: LD_VAR 0 18
55338: PPUSH
55339: CALL_OW 451
55343: ST_TO_ADDR
// j := GetBase ( tower ) ;
55344: LD_ADDR_VAR 0 9
55348: PUSH
55349: LD_VAR 0 1
55353: PPUSH
55354: CALL_OW 274
55358: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
55359: LD_VAR 0 9
55363: PPUSH
55364: LD_INT 1
55366: PPUSH
55367: CALL_OW 275
55371: PUSH
55372: LD_VAR 0 14
55376: PUSH
55377: LD_INT 1
55379: ARRAY
55380: GREATEREQUAL
55381: PUSH
55382: LD_VAR 0 9
55386: PPUSH
55387: LD_INT 2
55389: PPUSH
55390: CALL_OW 275
55394: PUSH
55395: LD_VAR 0 14
55399: PUSH
55400: LD_INT 2
55402: ARRAY
55403: GREATEREQUAL
55404: AND
55405: PUSH
55406: LD_VAR 0 9
55410: PPUSH
55411: LD_INT 3
55413: PPUSH
55414: CALL_OW 275
55418: PUSH
55419: LD_VAR 0 14
55423: PUSH
55424: LD_INT 3
55426: ARRAY
55427: GREATEREQUAL
55428: AND
55429: IFFALSE 55441
// result := weapon ;
55431: LD_ADDR_VAR 0 3
55435: PUSH
55436: LD_VAR 0 18
55440: ST_TO_ADDR
// end ; end ;
55441: LD_VAR 0 3
55445: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55446: LD_INT 0
55448: PPUSH
55449: PPUSH
// result := true ;
55450: LD_ADDR_VAR 0 3
55454: PUSH
55455: LD_INT 1
55457: ST_TO_ADDR
// if array1 = array2 then
55458: LD_VAR 0 1
55462: PUSH
55463: LD_VAR 0 2
55467: EQUAL
55468: IFFALSE 55528
// begin for i = 1 to array1 do
55470: LD_ADDR_VAR 0 4
55474: PUSH
55475: DOUBLE
55476: LD_INT 1
55478: DEC
55479: ST_TO_ADDR
55480: LD_VAR 0 1
55484: PUSH
55485: FOR_TO
55486: IFFALSE 55524
// if array1 [ i ] <> array2 [ i ] then
55488: LD_VAR 0 1
55492: PUSH
55493: LD_VAR 0 4
55497: ARRAY
55498: PUSH
55499: LD_VAR 0 2
55503: PUSH
55504: LD_VAR 0 4
55508: ARRAY
55509: NONEQUAL
55510: IFFALSE 55522
// begin result := false ;
55512: LD_ADDR_VAR 0 3
55516: PUSH
55517: LD_INT 0
55519: ST_TO_ADDR
// break ;
55520: GO 55524
// end ;
55522: GO 55485
55524: POP
55525: POP
// end else
55526: GO 55536
// result := false ;
55528: LD_ADDR_VAR 0 3
55532: PUSH
55533: LD_INT 0
55535: ST_TO_ADDR
// end ;
55536: LD_VAR 0 3
55540: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55541: LD_INT 0
55543: PPUSH
55544: PPUSH
// if not array1 or not array2 then
55545: LD_VAR 0 1
55549: NOT
55550: PUSH
55551: LD_VAR 0 2
55555: NOT
55556: OR
55557: IFFALSE 55561
// exit ;
55559: GO 55625
// result := true ;
55561: LD_ADDR_VAR 0 3
55565: PUSH
55566: LD_INT 1
55568: ST_TO_ADDR
// for i = 1 to array1 do
55569: LD_ADDR_VAR 0 4
55573: PUSH
55574: DOUBLE
55575: LD_INT 1
55577: DEC
55578: ST_TO_ADDR
55579: LD_VAR 0 1
55583: PUSH
55584: FOR_TO
55585: IFFALSE 55623
// if array1 [ i ] <> array2 [ i ] then
55587: LD_VAR 0 1
55591: PUSH
55592: LD_VAR 0 4
55596: ARRAY
55597: PUSH
55598: LD_VAR 0 2
55602: PUSH
55603: LD_VAR 0 4
55607: ARRAY
55608: NONEQUAL
55609: IFFALSE 55621
// begin result := false ;
55611: LD_ADDR_VAR 0 3
55615: PUSH
55616: LD_INT 0
55618: ST_TO_ADDR
// break ;
55619: GO 55623
// end ;
55621: GO 55584
55623: POP
55624: POP
// end ;
55625: LD_VAR 0 3
55629: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55630: LD_INT 0
55632: PPUSH
55633: PPUSH
55634: PPUSH
// pom := GetBase ( fac ) ;
55635: LD_ADDR_VAR 0 5
55639: PUSH
55640: LD_VAR 0 1
55644: PPUSH
55645: CALL_OW 274
55649: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55650: LD_ADDR_VAR 0 4
55654: PUSH
55655: LD_VAR 0 2
55659: PUSH
55660: LD_INT 1
55662: ARRAY
55663: PPUSH
55664: LD_VAR 0 2
55668: PUSH
55669: LD_INT 2
55671: ARRAY
55672: PPUSH
55673: LD_VAR 0 2
55677: PUSH
55678: LD_INT 3
55680: ARRAY
55681: PPUSH
55682: LD_VAR 0 2
55686: PUSH
55687: LD_INT 4
55689: ARRAY
55690: PPUSH
55691: CALL_OW 449
55695: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55696: LD_ADDR_VAR 0 3
55700: PUSH
55701: LD_VAR 0 5
55705: PPUSH
55706: LD_INT 1
55708: PPUSH
55709: CALL_OW 275
55713: PUSH
55714: LD_VAR 0 4
55718: PUSH
55719: LD_INT 1
55721: ARRAY
55722: GREATEREQUAL
55723: PUSH
55724: LD_VAR 0 5
55728: PPUSH
55729: LD_INT 2
55731: PPUSH
55732: CALL_OW 275
55736: PUSH
55737: LD_VAR 0 4
55741: PUSH
55742: LD_INT 2
55744: ARRAY
55745: GREATEREQUAL
55746: AND
55747: PUSH
55748: LD_VAR 0 5
55752: PPUSH
55753: LD_INT 3
55755: PPUSH
55756: CALL_OW 275
55760: PUSH
55761: LD_VAR 0 4
55765: PUSH
55766: LD_INT 3
55768: ARRAY
55769: GREATEREQUAL
55770: AND
55771: ST_TO_ADDR
// end ;
55772: LD_VAR 0 3
55776: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55777: LD_INT 0
55779: PPUSH
55780: PPUSH
55781: PPUSH
55782: PPUSH
// pom := GetBase ( building ) ;
55783: LD_ADDR_VAR 0 3
55787: PUSH
55788: LD_VAR 0 1
55792: PPUSH
55793: CALL_OW 274
55797: ST_TO_ADDR
// if not pom then
55798: LD_VAR 0 3
55802: NOT
55803: IFFALSE 55807
// exit ;
55805: GO 55977
// btype := GetBType ( building ) ;
55807: LD_ADDR_VAR 0 5
55811: PUSH
55812: LD_VAR 0 1
55816: PPUSH
55817: CALL_OW 266
55821: ST_TO_ADDR
// if btype = b_armoury then
55822: LD_VAR 0 5
55826: PUSH
55827: LD_INT 4
55829: EQUAL
55830: IFFALSE 55840
// btype := b_barracks ;
55832: LD_ADDR_VAR 0 5
55836: PUSH
55837: LD_INT 5
55839: ST_TO_ADDR
// if btype = b_depot then
55840: LD_VAR 0 5
55844: PUSH
55845: LD_INT 0
55847: EQUAL
55848: IFFALSE 55858
// btype := b_warehouse ;
55850: LD_ADDR_VAR 0 5
55854: PUSH
55855: LD_INT 1
55857: ST_TO_ADDR
// if btype = b_workshop then
55858: LD_VAR 0 5
55862: PUSH
55863: LD_INT 2
55865: EQUAL
55866: IFFALSE 55876
// btype := b_factory ;
55868: LD_ADDR_VAR 0 5
55872: PUSH
55873: LD_INT 3
55875: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55876: LD_ADDR_VAR 0 4
55880: PUSH
55881: LD_VAR 0 5
55885: PPUSH
55886: LD_VAR 0 1
55890: PPUSH
55891: CALL_OW 248
55895: PPUSH
55896: CALL_OW 450
55900: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55901: LD_ADDR_VAR 0 2
55905: PUSH
55906: LD_VAR 0 3
55910: PPUSH
55911: LD_INT 1
55913: PPUSH
55914: CALL_OW 275
55918: PUSH
55919: LD_VAR 0 4
55923: PUSH
55924: LD_INT 1
55926: ARRAY
55927: GREATEREQUAL
55928: PUSH
55929: LD_VAR 0 3
55933: PPUSH
55934: LD_INT 2
55936: PPUSH
55937: CALL_OW 275
55941: PUSH
55942: LD_VAR 0 4
55946: PUSH
55947: LD_INT 2
55949: ARRAY
55950: GREATEREQUAL
55951: AND
55952: PUSH
55953: LD_VAR 0 3
55957: PPUSH
55958: LD_INT 3
55960: PPUSH
55961: CALL_OW 275
55965: PUSH
55966: LD_VAR 0 4
55970: PUSH
55971: LD_INT 3
55973: ARRAY
55974: GREATEREQUAL
55975: AND
55976: ST_TO_ADDR
// end ;
55977: LD_VAR 0 2
55981: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55982: LD_INT 0
55984: PPUSH
55985: PPUSH
55986: PPUSH
// pom := GetBase ( building ) ;
55987: LD_ADDR_VAR 0 4
55991: PUSH
55992: LD_VAR 0 1
55996: PPUSH
55997: CALL_OW 274
56001: ST_TO_ADDR
// if not pom then
56002: LD_VAR 0 4
56006: NOT
56007: IFFALSE 56011
// exit ;
56009: GO 56112
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56011: LD_ADDR_VAR 0 5
56015: PUSH
56016: LD_VAR 0 2
56020: PPUSH
56021: LD_VAR 0 1
56025: PPUSH
56026: CALL_OW 248
56030: PPUSH
56031: CALL_OW 450
56035: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56036: LD_ADDR_VAR 0 3
56040: PUSH
56041: LD_VAR 0 4
56045: PPUSH
56046: LD_INT 1
56048: PPUSH
56049: CALL_OW 275
56053: PUSH
56054: LD_VAR 0 5
56058: PUSH
56059: LD_INT 1
56061: ARRAY
56062: GREATEREQUAL
56063: PUSH
56064: LD_VAR 0 4
56068: PPUSH
56069: LD_INT 2
56071: PPUSH
56072: CALL_OW 275
56076: PUSH
56077: LD_VAR 0 5
56081: PUSH
56082: LD_INT 2
56084: ARRAY
56085: GREATEREQUAL
56086: AND
56087: PUSH
56088: LD_VAR 0 4
56092: PPUSH
56093: LD_INT 3
56095: PPUSH
56096: CALL_OW 275
56100: PUSH
56101: LD_VAR 0 5
56105: PUSH
56106: LD_INT 3
56108: ARRAY
56109: GREATEREQUAL
56110: AND
56111: ST_TO_ADDR
// end ;
56112: LD_VAR 0 3
56116: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
56117: LD_INT 0
56119: PPUSH
56120: PPUSH
56121: PPUSH
56122: PPUSH
56123: PPUSH
56124: PPUSH
56125: PPUSH
56126: PPUSH
56127: PPUSH
56128: PPUSH
56129: PPUSH
// result := false ;
56130: LD_ADDR_VAR 0 8
56134: PUSH
56135: LD_INT 0
56137: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
56138: LD_VAR 0 5
56142: NOT
56143: PUSH
56144: LD_VAR 0 1
56148: NOT
56149: OR
56150: PUSH
56151: LD_VAR 0 2
56155: NOT
56156: OR
56157: PUSH
56158: LD_VAR 0 3
56162: NOT
56163: OR
56164: IFFALSE 56168
// exit ;
56166: GO 56982
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
56168: LD_ADDR_VAR 0 14
56172: PUSH
56173: LD_VAR 0 1
56177: PPUSH
56178: LD_VAR 0 2
56182: PPUSH
56183: LD_VAR 0 3
56187: PPUSH
56188: LD_VAR 0 4
56192: PPUSH
56193: LD_VAR 0 5
56197: PUSH
56198: LD_INT 1
56200: ARRAY
56201: PPUSH
56202: CALL_OW 248
56206: PPUSH
56207: LD_INT 0
56209: PPUSH
56210: CALL 58215 0 6
56214: ST_TO_ADDR
// if not hexes then
56215: LD_VAR 0 14
56219: NOT
56220: IFFALSE 56224
// exit ;
56222: GO 56982
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56224: LD_ADDR_VAR 0 17
56228: PUSH
56229: LD_VAR 0 5
56233: PPUSH
56234: LD_INT 22
56236: PUSH
56237: LD_VAR 0 13
56241: PPUSH
56242: CALL_OW 255
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 30
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 30
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PPUSH
56283: CALL_OW 72
56287: ST_TO_ADDR
// for i = 1 to hexes do
56288: LD_ADDR_VAR 0 9
56292: PUSH
56293: DOUBLE
56294: LD_INT 1
56296: DEC
56297: ST_TO_ADDR
56298: LD_VAR 0 14
56302: PUSH
56303: FOR_TO
56304: IFFALSE 56980
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56306: LD_ADDR_VAR 0 13
56310: PUSH
56311: LD_VAR 0 14
56315: PUSH
56316: LD_VAR 0 9
56320: ARRAY
56321: PUSH
56322: LD_INT 1
56324: ARRAY
56325: PPUSH
56326: LD_VAR 0 14
56330: PUSH
56331: LD_VAR 0 9
56335: ARRAY
56336: PUSH
56337: LD_INT 2
56339: ARRAY
56340: PPUSH
56341: CALL_OW 428
56345: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
56346: LD_VAR 0 14
56350: PUSH
56351: LD_VAR 0 9
56355: ARRAY
56356: PUSH
56357: LD_INT 1
56359: ARRAY
56360: PPUSH
56361: LD_VAR 0 14
56365: PUSH
56366: LD_VAR 0 9
56370: ARRAY
56371: PUSH
56372: LD_INT 2
56374: ARRAY
56375: PPUSH
56376: CALL_OW 351
56380: PUSH
56381: LD_VAR 0 14
56385: PUSH
56386: LD_VAR 0 9
56390: ARRAY
56391: PUSH
56392: LD_INT 1
56394: ARRAY
56395: PPUSH
56396: LD_VAR 0 14
56400: PUSH
56401: LD_VAR 0 9
56405: ARRAY
56406: PUSH
56407: LD_INT 2
56409: ARRAY
56410: PPUSH
56411: CALL_OW 488
56415: NOT
56416: OR
56417: PUSH
56418: LD_VAR 0 13
56422: PPUSH
56423: CALL_OW 247
56427: PUSH
56428: LD_INT 3
56430: EQUAL
56431: OR
56432: IFFALSE 56438
// exit ;
56434: POP
56435: POP
56436: GO 56982
// if not tmp then
56438: LD_VAR 0 13
56442: NOT
56443: IFFALSE 56447
// continue ;
56445: GO 56303
// result := true ;
56447: LD_ADDR_VAR 0 8
56451: PUSH
56452: LD_INT 1
56454: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
56455: LD_VAR 0 6
56459: PUSH
56460: LD_VAR 0 13
56464: PPUSH
56465: CALL_OW 247
56469: PUSH
56470: LD_INT 2
56472: EQUAL
56473: AND
56474: PUSH
56475: LD_VAR 0 13
56479: PPUSH
56480: CALL_OW 263
56484: PUSH
56485: LD_INT 1
56487: EQUAL
56488: AND
56489: IFFALSE 56653
// begin if IsDrivenBy ( tmp ) then
56491: LD_VAR 0 13
56495: PPUSH
56496: CALL_OW 311
56500: IFFALSE 56504
// continue ;
56502: GO 56303
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56504: LD_VAR 0 6
56508: PPUSH
56509: LD_INT 3
56511: PUSH
56512: LD_INT 60
56514: PUSH
56515: EMPTY
56516: LIST
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: LD_INT 55
56527: PUSH
56528: EMPTY
56529: LIST
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PPUSH
56539: CALL_OW 72
56543: IFFALSE 56651
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56545: LD_ADDR_VAR 0 18
56549: PUSH
56550: LD_VAR 0 6
56554: PPUSH
56555: LD_INT 3
56557: PUSH
56558: LD_INT 60
56560: PUSH
56561: EMPTY
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: LD_INT 55
56573: PUSH
56574: EMPTY
56575: LIST
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PPUSH
56585: CALL_OW 72
56589: PUSH
56590: LD_INT 1
56592: ARRAY
56593: ST_TO_ADDR
// if IsInUnit ( driver ) then
56594: LD_VAR 0 18
56598: PPUSH
56599: CALL_OW 310
56603: IFFALSE 56614
// ComExit ( driver ) ;
56605: LD_VAR 0 18
56609: PPUSH
56610: CALL 81995 0 1
// AddComEnterUnit ( driver , tmp ) ;
56614: LD_VAR 0 18
56618: PPUSH
56619: LD_VAR 0 13
56623: PPUSH
56624: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56628: LD_VAR 0 18
56632: PPUSH
56633: LD_VAR 0 7
56637: PPUSH
56638: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56642: LD_VAR 0 18
56646: PPUSH
56647: CALL_OW 181
// end ; continue ;
56651: GO 56303
// end ; if not cleaners or not tmp in cleaners then
56653: LD_VAR 0 6
56657: NOT
56658: PUSH
56659: LD_VAR 0 13
56663: PUSH
56664: LD_VAR 0 6
56668: IN
56669: NOT
56670: OR
56671: IFFALSE 56978
// begin if dep then
56673: LD_VAR 0 17
56677: IFFALSE 56813
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56679: LD_ADDR_VAR 0 16
56683: PUSH
56684: LD_VAR 0 17
56688: PUSH
56689: LD_INT 1
56691: ARRAY
56692: PPUSH
56693: CALL_OW 250
56697: PPUSH
56698: LD_VAR 0 17
56702: PUSH
56703: LD_INT 1
56705: ARRAY
56706: PPUSH
56707: CALL_OW 254
56711: PPUSH
56712: LD_INT 5
56714: PPUSH
56715: CALL_OW 272
56719: PUSH
56720: LD_VAR 0 17
56724: PUSH
56725: LD_INT 1
56727: ARRAY
56728: PPUSH
56729: CALL_OW 251
56733: PPUSH
56734: LD_VAR 0 17
56738: PUSH
56739: LD_INT 1
56741: ARRAY
56742: PPUSH
56743: CALL_OW 254
56747: PPUSH
56748: LD_INT 5
56750: PPUSH
56751: CALL_OW 273
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56760: LD_VAR 0 16
56764: PUSH
56765: LD_INT 1
56767: ARRAY
56768: PPUSH
56769: LD_VAR 0 16
56773: PUSH
56774: LD_INT 2
56776: ARRAY
56777: PPUSH
56778: CALL_OW 488
56782: IFFALSE 56813
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56784: LD_VAR 0 13
56788: PPUSH
56789: LD_VAR 0 16
56793: PUSH
56794: LD_INT 1
56796: ARRAY
56797: PPUSH
56798: LD_VAR 0 16
56802: PUSH
56803: LD_INT 2
56805: ARRAY
56806: PPUSH
56807: CALL_OW 111
// continue ;
56811: GO 56303
// end ; end ; r := GetDir ( tmp ) ;
56813: LD_ADDR_VAR 0 15
56817: PUSH
56818: LD_VAR 0 13
56822: PPUSH
56823: CALL_OW 254
56827: ST_TO_ADDR
// if r = 5 then
56828: LD_VAR 0 15
56832: PUSH
56833: LD_INT 5
56835: EQUAL
56836: IFFALSE 56846
// r := 0 ;
56838: LD_ADDR_VAR 0 15
56842: PUSH
56843: LD_INT 0
56845: ST_TO_ADDR
// for j = r to 5 do
56846: LD_ADDR_VAR 0 10
56850: PUSH
56851: DOUBLE
56852: LD_VAR 0 15
56856: DEC
56857: ST_TO_ADDR
56858: LD_INT 5
56860: PUSH
56861: FOR_TO
56862: IFFALSE 56976
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56864: LD_ADDR_VAR 0 11
56868: PUSH
56869: LD_VAR 0 13
56873: PPUSH
56874: CALL_OW 250
56878: PPUSH
56879: LD_VAR 0 10
56883: PPUSH
56884: LD_INT 2
56886: PPUSH
56887: CALL_OW 272
56891: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56892: LD_ADDR_VAR 0 12
56896: PUSH
56897: LD_VAR 0 13
56901: PPUSH
56902: CALL_OW 251
56906: PPUSH
56907: LD_VAR 0 10
56911: PPUSH
56912: LD_INT 2
56914: PPUSH
56915: CALL_OW 273
56919: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56920: LD_VAR 0 11
56924: PPUSH
56925: LD_VAR 0 12
56929: PPUSH
56930: CALL_OW 488
56934: PUSH
56935: LD_VAR 0 11
56939: PPUSH
56940: LD_VAR 0 12
56944: PPUSH
56945: CALL_OW 428
56949: NOT
56950: AND
56951: IFFALSE 56974
// begin ComMoveXY ( tmp , _x , _y ) ;
56953: LD_VAR 0 13
56957: PPUSH
56958: LD_VAR 0 11
56962: PPUSH
56963: LD_VAR 0 12
56967: PPUSH
56968: CALL_OW 111
// break ;
56972: GO 56976
// end ; end ;
56974: GO 56861
56976: POP
56977: POP
// end ; end ;
56978: GO 56303
56980: POP
56981: POP
// end ;
56982: LD_VAR 0 8
56986: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56987: LD_INT 0
56989: PPUSH
// result := true ;
56990: LD_ADDR_VAR 0 3
56994: PUSH
56995: LD_INT 1
56997: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56998: LD_VAR 0 2
57002: PUSH
57003: LD_INT 24
57005: DOUBLE
57006: EQUAL
57007: IFTRUE 57017
57009: LD_INT 33
57011: DOUBLE
57012: EQUAL
57013: IFTRUE 57017
57015: GO 57042
57017: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
57018: LD_ADDR_VAR 0 3
57022: PUSH
57023: LD_INT 32
57025: PPUSH
57026: LD_VAR 0 1
57030: PPUSH
57031: CALL_OW 321
57035: PUSH
57036: LD_INT 2
57038: EQUAL
57039: ST_TO_ADDR
57040: GO 57358
57042: LD_INT 20
57044: DOUBLE
57045: EQUAL
57046: IFTRUE 57050
57048: GO 57075
57050: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
57051: LD_ADDR_VAR 0 3
57055: PUSH
57056: LD_INT 6
57058: PPUSH
57059: LD_VAR 0 1
57063: PPUSH
57064: CALL_OW 321
57068: PUSH
57069: LD_INT 2
57071: EQUAL
57072: ST_TO_ADDR
57073: GO 57358
57075: LD_INT 22
57077: DOUBLE
57078: EQUAL
57079: IFTRUE 57089
57081: LD_INT 36
57083: DOUBLE
57084: EQUAL
57085: IFTRUE 57089
57087: GO 57114
57089: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
57090: LD_ADDR_VAR 0 3
57094: PUSH
57095: LD_INT 15
57097: PPUSH
57098: LD_VAR 0 1
57102: PPUSH
57103: CALL_OW 321
57107: PUSH
57108: LD_INT 2
57110: EQUAL
57111: ST_TO_ADDR
57112: GO 57358
57114: LD_INT 30
57116: DOUBLE
57117: EQUAL
57118: IFTRUE 57122
57120: GO 57147
57122: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
57123: LD_ADDR_VAR 0 3
57127: PUSH
57128: LD_INT 20
57130: PPUSH
57131: LD_VAR 0 1
57135: PPUSH
57136: CALL_OW 321
57140: PUSH
57141: LD_INT 2
57143: EQUAL
57144: ST_TO_ADDR
57145: GO 57358
57147: LD_INT 28
57149: DOUBLE
57150: EQUAL
57151: IFTRUE 57161
57153: LD_INT 21
57155: DOUBLE
57156: EQUAL
57157: IFTRUE 57161
57159: GO 57186
57161: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
57162: LD_ADDR_VAR 0 3
57166: PUSH
57167: LD_INT 21
57169: PPUSH
57170: LD_VAR 0 1
57174: PPUSH
57175: CALL_OW 321
57179: PUSH
57180: LD_INT 2
57182: EQUAL
57183: ST_TO_ADDR
57184: GO 57358
57186: LD_INT 16
57188: DOUBLE
57189: EQUAL
57190: IFTRUE 57194
57192: GO 57219
57194: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
57195: LD_ADDR_VAR 0 3
57199: PUSH
57200: LD_INT 84
57202: PPUSH
57203: LD_VAR 0 1
57207: PPUSH
57208: CALL_OW 321
57212: PUSH
57213: LD_INT 2
57215: EQUAL
57216: ST_TO_ADDR
57217: GO 57358
57219: LD_INT 19
57221: DOUBLE
57222: EQUAL
57223: IFTRUE 57233
57225: LD_INT 23
57227: DOUBLE
57228: EQUAL
57229: IFTRUE 57233
57231: GO 57258
57233: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
57234: LD_ADDR_VAR 0 3
57238: PUSH
57239: LD_INT 83
57241: PPUSH
57242: LD_VAR 0 1
57246: PPUSH
57247: CALL_OW 321
57251: PUSH
57252: LD_INT 2
57254: EQUAL
57255: ST_TO_ADDR
57256: GO 57358
57258: LD_INT 17
57260: DOUBLE
57261: EQUAL
57262: IFTRUE 57266
57264: GO 57291
57266: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
57267: LD_ADDR_VAR 0 3
57271: PUSH
57272: LD_INT 39
57274: PPUSH
57275: LD_VAR 0 1
57279: PPUSH
57280: CALL_OW 321
57284: PUSH
57285: LD_INT 2
57287: EQUAL
57288: ST_TO_ADDR
57289: GO 57358
57291: LD_INT 18
57293: DOUBLE
57294: EQUAL
57295: IFTRUE 57299
57297: GO 57324
57299: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
57300: LD_ADDR_VAR 0 3
57304: PUSH
57305: LD_INT 40
57307: PPUSH
57308: LD_VAR 0 1
57312: PPUSH
57313: CALL_OW 321
57317: PUSH
57318: LD_INT 2
57320: EQUAL
57321: ST_TO_ADDR
57322: GO 57358
57324: LD_INT 27
57326: DOUBLE
57327: EQUAL
57328: IFTRUE 57332
57330: GO 57357
57332: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
57333: LD_ADDR_VAR 0 3
57337: PUSH
57338: LD_INT 35
57340: PPUSH
57341: LD_VAR 0 1
57345: PPUSH
57346: CALL_OW 321
57350: PUSH
57351: LD_INT 2
57353: EQUAL
57354: ST_TO_ADDR
57355: GO 57358
57357: POP
// end ;
57358: LD_VAR 0 3
57362: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
57363: LD_INT 0
57365: PPUSH
57366: PPUSH
57367: PPUSH
57368: PPUSH
57369: PPUSH
57370: PPUSH
57371: PPUSH
57372: PPUSH
57373: PPUSH
57374: PPUSH
57375: PPUSH
// result := false ;
57376: LD_ADDR_VAR 0 6
57380: PUSH
57381: LD_INT 0
57383: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
57384: LD_VAR 0 1
57388: NOT
57389: PUSH
57390: LD_VAR 0 1
57394: PPUSH
57395: CALL_OW 266
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: IN
57410: NOT
57411: OR
57412: PUSH
57413: LD_VAR 0 2
57417: NOT
57418: OR
57419: PUSH
57420: LD_VAR 0 5
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: LD_INT 4
57439: PUSH
57440: LD_INT 5
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: IN
57451: NOT
57452: OR
57453: PUSH
57454: LD_VAR 0 3
57458: PPUSH
57459: LD_VAR 0 4
57463: PPUSH
57464: CALL_OW 488
57468: NOT
57469: OR
57470: IFFALSE 57474
// exit ;
57472: GO 58210
// side := GetSide ( depot ) ;
57474: LD_ADDR_VAR 0 9
57478: PUSH
57479: LD_VAR 0 1
57483: PPUSH
57484: CALL_OW 255
57488: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
57489: LD_VAR 0 9
57493: PPUSH
57494: LD_VAR 0 2
57498: PPUSH
57499: CALL 56987 0 2
57503: NOT
57504: IFFALSE 57508
// exit ;
57506: GO 58210
// pom := GetBase ( depot ) ;
57508: LD_ADDR_VAR 0 10
57512: PUSH
57513: LD_VAR 0 1
57517: PPUSH
57518: CALL_OW 274
57522: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57523: LD_ADDR_VAR 0 11
57527: PUSH
57528: LD_VAR 0 2
57532: PPUSH
57533: LD_VAR 0 1
57537: PPUSH
57538: CALL_OW 248
57542: PPUSH
57543: CALL_OW 450
57547: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57548: LD_VAR 0 10
57552: PPUSH
57553: LD_INT 1
57555: PPUSH
57556: CALL_OW 275
57560: PUSH
57561: LD_VAR 0 11
57565: PUSH
57566: LD_INT 1
57568: ARRAY
57569: GREATEREQUAL
57570: PUSH
57571: LD_VAR 0 10
57575: PPUSH
57576: LD_INT 2
57578: PPUSH
57579: CALL_OW 275
57583: PUSH
57584: LD_VAR 0 11
57588: PUSH
57589: LD_INT 2
57591: ARRAY
57592: GREATEREQUAL
57593: AND
57594: PUSH
57595: LD_VAR 0 10
57599: PPUSH
57600: LD_INT 3
57602: PPUSH
57603: CALL_OW 275
57607: PUSH
57608: LD_VAR 0 11
57612: PUSH
57613: LD_INT 3
57615: ARRAY
57616: GREATEREQUAL
57617: AND
57618: NOT
57619: IFFALSE 57623
// exit ;
57621: GO 58210
// if GetBType ( depot ) = b_depot then
57623: LD_VAR 0 1
57627: PPUSH
57628: CALL_OW 266
57632: PUSH
57633: LD_INT 0
57635: EQUAL
57636: IFFALSE 57648
// dist := 28 else
57638: LD_ADDR_VAR 0 14
57642: PUSH
57643: LD_INT 28
57645: ST_TO_ADDR
57646: GO 57656
// dist := 36 ;
57648: LD_ADDR_VAR 0 14
57652: PUSH
57653: LD_INT 36
57655: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57656: LD_VAR 0 1
57660: PPUSH
57661: LD_VAR 0 3
57665: PPUSH
57666: LD_VAR 0 4
57670: PPUSH
57671: CALL_OW 297
57675: PUSH
57676: LD_VAR 0 14
57680: GREATER
57681: IFFALSE 57685
// exit ;
57683: GO 58210
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57685: LD_ADDR_VAR 0 12
57689: PUSH
57690: LD_VAR 0 2
57694: PPUSH
57695: LD_VAR 0 3
57699: PPUSH
57700: LD_VAR 0 4
57704: PPUSH
57705: LD_VAR 0 5
57709: PPUSH
57710: LD_VAR 0 1
57714: PPUSH
57715: CALL_OW 248
57719: PPUSH
57720: LD_INT 0
57722: PPUSH
57723: CALL 58215 0 6
57727: ST_TO_ADDR
// if not hexes then
57728: LD_VAR 0 12
57732: NOT
57733: IFFALSE 57737
// exit ;
57735: GO 58210
// hex := GetHexInfo ( x , y ) ;
57737: LD_ADDR_VAR 0 15
57741: PUSH
57742: LD_VAR 0 3
57746: PPUSH
57747: LD_VAR 0 4
57751: PPUSH
57752: CALL_OW 546
57756: ST_TO_ADDR
// if hex [ 1 ] then
57757: LD_VAR 0 15
57761: PUSH
57762: LD_INT 1
57764: ARRAY
57765: IFFALSE 57769
// exit ;
57767: GO 58210
// height := hex [ 2 ] ;
57769: LD_ADDR_VAR 0 13
57773: PUSH
57774: LD_VAR 0 15
57778: PUSH
57779: LD_INT 2
57781: ARRAY
57782: ST_TO_ADDR
// for i = 1 to hexes do
57783: LD_ADDR_VAR 0 7
57787: PUSH
57788: DOUBLE
57789: LD_INT 1
57791: DEC
57792: ST_TO_ADDR
57793: LD_VAR 0 12
57797: PUSH
57798: FOR_TO
57799: IFFALSE 58129
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57801: LD_VAR 0 12
57805: PUSH
57806: LD_VAR 0 7
57810: ARRAY
57811: PUSH
57812: LD_INT 1
57814: ARRAY
57815: PPUSH
57816: LD_VAR 0 12
57820: PUSH
57821: LD_VAR 0 7
57825: ARRAY
57826: PUSH
57827: LD_INT 2
57829: ARRAY
57830: PPUSH
57831: CALL_OW 488
57835: NOT
57836: PUSH
57837: LD_VAR 0 12
57841: PUSH
57842: LD_VAR 0 7
57846: ARRAY
57847: PUSH
57848: LD_INT 1
57850: ARRAY
57851: PPUSH
57852: LD_VAR 0 12
57856: PUSH
57857: LD_VAR 0 7
57861: ARRAY
57862: PUSH
57863: LD_INT 2
57865: ARRAY
57866: PPUSH
57867: CALL_OW 428
57871: PUSH
57872: LD_INT 0
57874: GREATER
57875: OR
57876: PUSH
57877: LD_VAR 0 12
57881: PUSH
57882: LD_VAR 0 7
57886: ARRAY
57887: PUSH
57888: LD_INT 1
57890: ARRAY
57891: PPUSH
57892: LD_VAR 0 12
57896: PUSH
57897: LD_VAR 0 7
57901: ARRAY
57902: PUSH
57903: LD_INT 2
57905: ARRAY
57906: PPUSH
57907: CALL_OW 351
57911: OR
57912: IFFALSE 57918
// exit ;
57914: POP
57915: POP
57916: GO 58210
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57918: LD_ADDR_VAR 0 8
57922: PUSH
57923: LD_VAR 0 12
57927: PUSH
57928: LD_VAR 0 7
57932: ARRAY
57933: PUSH
57934: LD_INT 1
57936: ARRAY
57937: PPUSH
57938: LD_VAR 0 12
57942: PUSH
57943: LD_VAR 0 7
57947: ARRAY
57948: PUSH
57949: LD_INT 2
57951: ARRAY
57952: PPUSH
57953: CALL_OW 546
57957: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57958: LD_VAR 0 8
57962: PUSH
57963: LD_INT 1
57965: ARRAY
57966: PUSH
57967: LD_VAR 0 8
57971: PUSH
57972: LD_INT 2
57974: ARRAY
57975: PUSH
57976: LD_VAR 0 13
57980: PUSH
57981: LD_INT 2
57983: PLUS
57984: GREATER
57985: OR
57986: PUSH
57987: LD_VAR 0 8
57991: PUSH
57992: LD_INT 2
57994: ARRAY
57995: PUSH
57996: LD_VAR 0 13
58000: PUSH
58001: LD_INT 2
58003: MINUS
58004: LESS
58005: OR
58006: PUSH
58007: LD_VAR 0 8
58011: PUSH
58012: LD_INT 3
58014: ARRAY
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 8
58021: PUSH
58022: LD_INT 9
58024: PUSH
58025: LD_INT 10
58027: PUSH
58028: LD_INT 11
58030: PUSH
58031: LD_INT 12
58033: PUSH
58034: LD_INT 13
58036: PUSH
58037: LD_INT 16
58039: PUSH
58040: LD_INT 17
58042: PUSH
58043: LD_INT 18
58045: PUSH
58046: LD_INT 19
58048: PUSH
58049: LD_INT 20
58051: PUSH
58052: LD_INT 21
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: IN
58070: NOT
58071: OR
58072: PUSH
58073: LD_VAR 0 8
58077: PUSH
58078: LD_INT 5
58080: ARRAY
58081: NOT
58082: OR
58083: PUSH
58084: LD_VAR 0 8
58088: PUSH
58089: LD_INT 6
58091: ARRAY
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: LD_INT 7
58101: PUSH
58102: LD_INT 9
58104: PUSH
58105: LD_INT 10
58107: PUSH
58108: LD_INT 11
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: IN
58119: NOT
58120: OR
58121: IFFALSE 58127
// exit ;
58123: POP
58124: POP
58125: GO 58210
// end ;
58127: GO 57798
58129: POP
58130: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58131: LD_VAR 0 9
58135: PPUSH
58136: LD_VAR 0 3
58140: PPUSH
58141: LD_VAR 0 4
58145: PPUSH
58146: LD_INT 20
58148: PPUSH
58149: CALL 50162 0 4
58153: PUSH
58154: LD_INT 4
58156: ARRAY
58157: IFFALSE 58161
// exit ;
58159: GO 58210
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
58161: LD_VAR 0 2
58165: PUSH
58166: LD_INT 29
58168: PUSH
58169: LD_INT 30
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: IN
58176: PUSH
58177: LD_VAR 0 3
58181: PPUSH
58182: LD_VAR 0 4
58186: PPUSH
58187: LD_VAR 0 9
58191: PPUSH
58192: CALL_OW 440
58196: NOT
58197: AND
58198: IFFALSE 58202
// exit ;
58200: GO 58210
// result := true ;
58202: LD_ADDR_VAR 0 6
58206: PUSH
58207: LD_INT 1
58209: ST_TO_ADDR
// end ;
58210: LD_VAR 0 6
58214: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
58215: LD_INT 0
58217: PPUSH
58218: PPUSH
58219: PPUSH
58220: PPUSH
58221: PPUSH
58222: PPUSH
58223: PPUSH
58224: PPUSH
58225: PPUSH
58226: PPUSH
58227: PPUSH
58228: PPUSH
58229: PPUSH
58230: PPUSH
58231: PPUSH
58232: PPUSH
58233: PPUSH
58234: PPUSH
58235: PPUSH
58236: PPUSH
58237: PPUSH
58238: PPUSH
58239: PPUSH
58240: PPUSH
58241: PPUSH
58242: PPUSH
58243: PPUSH
58244: PPUSH
58245: PPUSH
58246: PPUSH
58247: PPUSH
58248: PPUSH
58249: PPUSH
58250: PPUSH
58251: PPUSH
58252: PPUSH
58253: PPUSH
58254: PPUSH
58255: PPUSH
58256: PPUSH
58257: PPUSH
58258: PPUSH
58259: PPUSH
58260: PPUSH
58261: PPUSH
58262: PPUSH
58263: PPUSH
58264: PPUSH
58265: PPUSH
58266: PPUSH
58267: PPUSH
58268: PPUSH
58269: PPUSH
58270: PPUSH
58271: PPUSH
58272: PPUSH
58273: PPUSH
58274: PPUSH
// result = [ ] ;
58275: LD_ADDR_VAR 0 7
58279: PUSH
58280: EMPTY
58281: ST_TO_ADDR
// temp_list = [ ] ;
58282: LD_ADDR_VAR 0 9
58286: PUSH
58287: EMPTY
58288: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
58289: LD_VAR 0 4
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 3
58305: PUSH
58306: LD_INT 4
58308: PUSH
58309: LD_INT 5
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: IN
58320: NOT
58321: PUSH
58322: LD_VAR 0 1
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: IN
58337: PUSH
58338: LD_VAR 0 5
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: IN
58357: NOT
58358: AND
58359: OR
58360: IFFALSE 58364
// exit ;
58362: GO 76755
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
58364: LD_VAR 0 1
58368: PUSH
58369: LD_INT 6
58371: PUSH
58372: LD_INT 7
58374: PUSH
58375: LD_INT 8
58377: PUSH
58378: LD_INT 13
58380: PUSH
58381: LD_INT 12
58383: PUSH
58384: LD_INT 15
58386: PUSH
58387: LD_INT 11
58389: PUSH
58390: LD_INT 14
58392: PUSH
58393: LD_INT 10
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: IN
58407: IFFALSE 58417
// btype = b_lab ;
58409: LD_ADDR_VAR 0 1
58413: PUSH
58414: LD_INT 6
58416: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58417: LD_VAR 0 6
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: LIST
58435: IN
58436: NOT
58437: PUSH
58438: LD_VAR 0 1
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: LD_INT 6
58457: PUSH
58458: LD_INT 36
58460: PUSH
58461: LD_INT 4
58463: PUSH
58464: LD_INT 5
58466: PUSH
58467: LD_INT 31
58469: PUSH
58470: LD_INT 32
58472: PUSH
58473: LD_INT 33
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: IN
58489: NOT
58490: PUSH
58491: LD_VAR 0 6
58495: PUSH
58496: LD_INT 1
58498: EQUAL
58499: AND
58500: OR
58501: PUSH
58502: LD_VAR 0 1
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: IN
58517: NOT
58518: PUSH
58519: LD_VAR 0 6
58523: PUSH
58524: LD_INT 2
58526: EQUAL
58527: AND
58528: OR
58529: IFFALSE 58539
// mode = 0 ;
58531: LD_ADDR_VAR 0 6
58535: PUSH
58536: LD_INT 0
58538: ST_TO_ADDR
// case mode of 0 :
58539: LD_VAR 0 6
58543: PUSH
58544: LD_INT 0
58546: DOUBLE
58547: EQUAL
58548: IFTRUE 58552
58550: GO 70005
58552: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58553: LD_ADDR_VAR 0 11
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 3
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58746: LD_ADDR_VAR 0 12
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 2
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58942: LD_ADDR_VAR 0 13
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: NEG
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: LD_INT 3
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59141: LD_ADDR_VAR 0 14
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 3
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 3
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 2
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59337: LD_ADDR_VAR 0 15
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 2
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 3
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59530: LD_ADDR_VAR 0 16
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: LD_INT 2
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 2
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 2
59665: NEG
59666: PUSH
59667: LD_INT 2
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 3
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59723: LD_ADDR_VAR 0 17
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 2
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59953: LD_ADDR_VAR 0 18
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 2
60152: NEG
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60183: LD_ADDR_VAR 0 19
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 2
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60413: LD_ADDR_VAR 0 20
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 1
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: LD_INT 2
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 2
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: NEG
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60643: LD_ADDR_VAR 0 21
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 2
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60873: LD_ADDR_VAR 0 22
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 2
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 2
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61103: LD_ADDR_VAR 0 23
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 2
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: NEG
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: LD_INT 2
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: NEG
61315: PUSH
61316: LD_INT 3
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 3
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
61383: LD_ADDR_VAR 0 24
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 2
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 2
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: NEG
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 2
61570: NEG
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: NEG
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 3
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61659: LD_ADDR_VAR 0 25
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 2
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 2
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 2
61835: NEG
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: LD_INT 1
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 2
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: LD_INT 3
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61933: LD_ADDR_VAR 0 26
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: LD_INT 2
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 3
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62209: LD_ADDR_VAR 0 27
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 2
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: NEG
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 2
62396: NEG
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 2
62408: NEG
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: LD_INT 2
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 3
62442: NEG
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: NEG
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62489: LD_ADDR_VAR 0 28
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: LD_INT 2
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 2
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 2
62688: NEG
62689: PUSH
62690: LD_INT 2
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: NEG
62701: PUSH
62702: LD_INT 3
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: LD_INT 3
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: NEG
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 3
62736: NEG
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62771: LD_ADDR_VAR 0 29
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: LD_INT 2
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 2
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: LD_INT 2
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: NEG
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 2
62937: NEG
62938: PUSH
62939: LD_INT 1
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 2
62949: NEG
62950: PUSH
62951: LD_INT 2
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 2
62961: NEG
62962: PUSH
62963: LD_INT 3
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 3
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: LD_INT 3
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 2
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 3
63015: NEG
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63050: LD_ADDR_VAR 0 30
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: NEG
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: LD_INT 2
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 2
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 1
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 2
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: LD_INT 1
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: LD_INT 2
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 1
63205: NEG
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: LD_INT 3
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: LD_INT 2
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 3
63262: PUSH
63263: LD_INT 2
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: LD_INT 3
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 3
63293: NEG
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63328: LD_ADDR_VAR 0 31
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: LD_INT 2
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 2
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 2
63452: PUSH
63453: LD_INT 2
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 2
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: LD_INT 2
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 2
63493: NEG
63494: PUSH
63495: LD_INT 1
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 2
63517: NEG
63518: PUSH
63519: LD_INT 3
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 3
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: LD_INT 2
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 3
63571: NEG
63572: PUSH
63573: LD_INT 2
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63606: LD_ADDR_VAR 0 32
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: NEG
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: LD_INT 2
63702: NEG
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 2
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: NEG
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: LD_INT 3
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 3
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: LD_INT 3
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 2
63838: NEG
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 3
63849: NEG
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63884: LD_ADDR_VAR 0 33
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: LD_INT 0
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: LD_INT 1
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 2
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 2
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 0
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 2
64039: NEG
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: NEG
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: NEG
64063: PUSH
64064: LD_INT 2
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 2
64074: NEG
64075: PUSH
64076: LD_INT 3
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 2
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 3
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 3
64128: NEG
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64163: LD_ADDR_VAR 0 34
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 1
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: LD_INT 2
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: LD_INT 2
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 2
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: LD_INT 2
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 1
64308: NEG
64309: PUSH
64310: LD_INT 1
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 2
64319: NEG
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 2
64330: NEG
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 2
64342: NEG
64343: PUSH
64344: LD_INT 2
64346: NEG
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: LD_INT 3
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: LD_INT 2
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: LD_INT 2
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 3
64408: NEG
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64443: LD_ADDR_VAR 0 35
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 2
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 2
64534: NEG
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64555: LD_ADDR_VAR 0 36
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: LD_INT 2
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 2
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64667: LD_ADDR_VAR 0 37
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 1
64725: NEG
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 1
64759: NEG
64760: PUSH
64761: LD_INT 1
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64779: LD_ADDR_VAR 0 38
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: LD_INT 1
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 1
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 2
64870: NEG
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64891: LD_ADDR_VAR 0 39
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65003: LD_ADDR_VAR 0 40
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: LD_INT 1
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65115: LD_ADDR_VAR 0 41
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 1
65196: NEG
65197: PUSH
65198: LD_INT 2
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 2
65239: PUSH
65240: LD_INT 2
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: LD_INT 1
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 2
65293: NEG
65294: PUSH
65295: LD_INT 2
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 2
65305: NEG
65306: PUSH
65307: LD_INT 3
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 2
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 3
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 3
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 3
65348: PUSH
65349: LD_INT 2
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 3
65358: PUSH
65359: LD_INT 3
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 2
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 2
65378: NEG
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 3
65389: NEG
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 3
65400: NEG
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 3
65412: NEG
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 3
65424: NEG
65425: PUSH
65426: LD_INT 3
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65465: LD_ADDR_VAR 0 42
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: LD_INT 1
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: LD_INT 2
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 2
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 2
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: LD_INT 2
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 1
65620: NEG
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 2
65643: NEG
65644: PUSH
65645: LD_INT 2
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 2
65655: NEG
65656: PUSH
65657: LD_INT 3
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: LD_INT 3
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: LD_INT 3
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 3
65701: PUSH
65702: LD_INT 2
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 3
65711: PUSH
65712: LD_INT 3
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 2
65721: PUSH
65722: LD_INT 3
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: LD_INT 3
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: LD_INT 3
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 3
65762: NEG
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 3
65774: NEG
65775: PUSH
65776: LD_INT 3
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65815: LD_ADDR_VAR 0 43
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: LD_INT 1
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: LD_INT 1
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 1
65896: NEG
65897: PUSH
65898: LD_INT 2
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: LD_INT 2
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: LD_INT 1
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: LD_INT 2
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 2
65981: NEG
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 1
66004: NEG
66005: PUSH
66006: LD_INT 3
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: LD_INT 3
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 2
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 3
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 3
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 3
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: LD_INT 3
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: LD_INT 1
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 3
66111: NEG
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 3
66122: NEG
66123: PUSH
66124: LD_INT 1
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66163: LD_ADDR_VAR 0 44
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: LD_INT 1
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: NEG
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: LD_INT 1
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: PUSH
66246: LD_INT 2
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: LD_INT 1
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 2
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 2
66287: PUSH
66288: LD_INT 2
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 1
66297: PUSH
66298: LD_INT 2
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 1
66307: NEG
66308: PUSH
66309: LD_INT 1
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 2
66318: NEG
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 2
66329: NEG
66330: PUSH
66331: LD_INT 1
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: LD_INT 2
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 2
66353: NEG
66354: PUSH
66355: LD_INT 3
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 2
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 3
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 3
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 3
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 3
66406: PUSH
66407: LD_INT 3
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 2
66416: PUSH
66417: LD_INT 3
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 2
66426: NEG
66427: PUSH
66428: LD_INT 1
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 3
66448: NEG
66449: PUSH
66450: LD_INT 1
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 3
66460: NEG
66461: PUSH
66462: LD_INT 2
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 3
66472: NEG
66473: PUSH
66474: LD_INT 3
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66513: LD_ADDR_VAR 0 45
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: LD_INT 1
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 1
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 1
66551: PUSH
66552: LD_INT 1
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: LD_INT 1
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 1
66571: NEG
66572: PUSH
66573: LD_INT 0
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: LD_INT 1
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: LD_INT 2
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: LD_INT 2
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 2
66628: PUSH
66629: LD_INT 1
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 2
66638: PUSH
66639: LD_INT 2
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: LD_INT 2
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: LD_INT 2
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 1
66668: NEG
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 2
66679: NEG
66680: PUSH
66681: LD_INT 1
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 2
66691: NEG
66692: PUSH
66693: LD_INT 2
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 2
66703: NEG
66704: PUSH
66705: LD_INT 3
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 1
66715: NEG
66716: PUSH
66717: LD_INT 3
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_INT 3
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: LD_INT 2
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 3
66749: PUSH
66750: LD_INT 2
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 3
66759: PUSH
66760: LD_INT 3
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 2
66769: PUSH
66770: LD_INT 3
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: LD_INT 3
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: LD_INT 3
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 1
66799: NEG
66800: PUSH
66801: LD_INT 2
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 3
66810: NEG
66811: PUSH
66812: LD_INT 2
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 3
66822: NEG
66823: PUSH
66824: LD_INT 3
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66863: LD_ADDR_VAR 0 46
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: LD_INT 0
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: LD_INT 1
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: LD_INT 1
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 1
66944: NEG
66945: PUSH
66946: LD_INT 2
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: LD_INT 2
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 2
66988: PUSH
66989: LD_INT 1
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 1
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: LD_INT 2
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 2
67029: NEG
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 2
67040: NEG
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: LD_INT 3
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 3
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 3
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: LD_INT 3
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: LD_INT 3
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: NEG
67138: PUSH
67139: LD_INT 2
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 3
67159: NEG
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 3
67170: NEG
67171: PUSH
67172: LD_INT 1
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67211: LD_ADDR_VAR 0 47
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: LD_INT 1
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 1
67239: PUSH
67240: LD_INT 0
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 1
67249: PUSH
67250: LD_INT 1
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 1
67269: NEG
67270: PUSH
67271: LD_INT 0
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 1
67280: NEG
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: LD_INT 2
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 0
67304: PUSH
67305: LD_INT 2
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: LD_INT 1
67318: NEG
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 2
67326: NEG
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 2
67338: NEG
67339: PUSH
67340: LD_INT 2
67342: NEG
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67362: LD_ADDR_VAR 0 48
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: LD_INT 1
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 1
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 1
67400: PUSH
67401: LD_INT 1
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: LD_INT 1
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: LD_INT 0
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 1
67431: NEG
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 1
67443: NEG
67444: PUSH
67445: LD_INT 2
67447: NEG
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: LD_INT 2
67458: NEG
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 1
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 2
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67509: LD_ADDR_VAR 0 49
67513: PUSH
67514: LD_INT 0
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: LD_INT 1
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: LD_INT 0
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 1
67547: PUSH
67548: LD_INT 1
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 0
67557: PUSH
67558: LD_INT 1
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 1
67578: NEG
67579: PUSH
67580: LD_INT 1
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 1
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: LD_INT 0
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: LD_INT 1
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: LD_INT 2
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 1
67631: PUSH
67632: LD_INT 2
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67653: LD_ADDR_VAR 0 50
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: LD_INT 0
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: LD_INT 1
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: LD_INT 0
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: LD_INT 1
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 1
67711: NEG
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 1
67722: NEG
67723: PUSH
67724: LD_INT 1
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 2
67734: PUSH
67735: LD_INT 1
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 2
67744: PUSH
67745: LD_INT 2
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 1
67754: PUSH
67755: LD_INT 2
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: LD_INT 2
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 1
67774: NEG
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67797: LD_ADDR_VAR 0 51
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: LD_INT 1
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 1
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 1
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 1
67855: NEG
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 1
67866: NEG
67867: PUSH
67868: LD_INT 1
67870: NEG
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 1
67878: PUSH
67879: LD_INT 2
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 0
67888: PUSH
67889: LD_INT 2
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 1
67898: NEG
67899: PUSH
67900: LD_INT 1
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: NEG
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: NEG
67921: PUSH
67922: LD_INT 1
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67944: LD_ADDR_VAR 0 52
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: LD_INT 1
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 1
67972: PUSH
67973: LD_INT 0
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 1
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: LD_INT 1
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 1
68025: NEG
68026: PUSH
68027: LD_INT 2
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 1
68037: NEG
68038: PUSH
68039: LD_INT 1
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 2
68048: NEG
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 2
68059: NEG
68060: PUSH
68061: LD_INT 1
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 2
68071: NEG
68072: PUSH
68073: LD_INT 2
68075: NEG
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68095: LD_ADDR_VAR 0 53
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 0
68112: PUSH
68113: LD_INT 1
68115: NEG
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 1
68123: PUSH
68124: LD_INT 0
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 1
68133: PUSH
68134: LD_INT 1
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: LD_INT 1
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: LD_INT 0
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 1
68164: NEG
68165: PUSH
68166: LD_INT 1
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: NEG
68177: PUSH
68178: LD_INT 2
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 2
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 2
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 2
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 2
68230: PUSH
68231: LD_INT 2
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 1
68240: PUSH
68241: LD_INT 2
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: LD_INT 2
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 1
68260: NEG
68261: PUSH
68262: LD_INT 1
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 2
68271: NEG
68272: PUSH
68273: LD_INT 0
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 2
68282: NEG
68283: PUSH
68284: LD_INT 1
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 2
68294: NEG
68295: PUSH
68296: LD_INT 2
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68325: LD_ADDR_VAR 0 54
68329: PUSH
68330: LD_INT 0
68332: PUSH
68333: LD_INT 0
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 0
68342: PUSH
68343: LD_INT 1
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 1
68353: PUSH
68354: LD_INT 0
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 1
68363: PUSH
68364: LD_INT 1
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 0
68373: PUSH
68374: LD_INT 1
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 1
68383: NEG
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 1
68394: NEG
68395: PUSH
68396: LD_INT 1
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 1
68406: NEG
68407: PUSH
68408: LD_INT 2
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: LD_INT 2
68421: NEG
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 1
68429: PUSH
68430: LD_INT 1
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 2
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 2
68450: PUSH
68451: LD_INT 1
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 2
68460: PUSH
68461: LD_INT 2
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 1
68470: PUSH
68471: LD_INT 2
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: LD_INT 2
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 1
68490: NEG
68491: PUSH
68492: LD_INT 1
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 2
68501: NEG
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 2
68512: NEG
68513: PUSH
68514: LD_INT 1
68516: NEG
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 2
68524: NEG
68525: PUSH
68526: LD_INT 2
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68555: LD_ADDR_VAR 0 55
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: LD_INT 0
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 0
68572: PUSH
68573: LD_INT 1
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 1
68583: PUSH
68584: LD_INT 0
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: LD_INT 1
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 0
68603: PUSH
68604: LD_INT 1
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 1
68613: NEG
68614: PUSH
68615: LD_INT 0
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 1
68624: NEG
68625: PUSH
68626: LD_INT 1
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 1
68636: NEG
68637: PUSH
68638: LD_INT 2
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: LD_INT 2
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 1
68659: PUSH
68660: LD_INT 1
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 2
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 2
68680: PUSH
68681: LD_INT 1
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 2
68690: PUSH
68691: LD_INT 2
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 1
68700: PUSH
68701: LD_INT 2
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 0
68710: PUSH
68711: LD_INT 2
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 1
68720: NEG
68721: PUSH
68722: LD_INT 1
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 2
68731: NEG
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 2
68742: NEG
68743: PUSH
68744: LD_INT 1
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 2
68754: NEG
68755: PUSH
68756: LD_INT 2
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68785: LD_ADDR_VAR 0 56
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: LD_INT 0
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 0
68802: PUSH
68803: LD_INT 1
68805: NEG
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 1
68813: PUSH
68814: LD_INT 0
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 1
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 0
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 1
68843: NEG
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 1
68854: NEG
68855: PUSH
68856: LD_INT 1
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 1
68866: NEG
68867: PUSH
68868: LD_INT 2
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: LD_INT 2
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: LD_INT 1
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 2
68900: PUSH
68901: LD_INT 0
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 2
68910: PUSH
68911: LD_INT 1
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 2
68920: PUSH
68921: LD_INT 2
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 1
68930: PUSH
68931: LD_INT 2
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: LD_INT 2
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 1
68950: NEG
68951: PUSH
68952: LD_INT 1
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 2
68961: NEG
68962: PUSH
68963: LD_INT 0
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 2
68972: NEG
68973: PUSH
68974: LD_INT 1
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 2
68984: NEG
68985: PUSH
68986: LD_INT 2
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69015: LD_ADDR_VAR 0 57
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: LD_INT 0
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: LD_INT 1
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 1
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 1
69053: PUSH
69054: LD_INT 1
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 0
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: NEG
69074: PUSH
69075: LD_INT 0
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 1
69084: NEG
69085: PUSH
69086: LD_INT 1
69088: NEG
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 1
69096: NEG
69097: PUSH
69098: LD_INT 2
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 0
69108: PUSH
69109: LD_INT 2
69111: NEG
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 1
69119: PUSH
69120: LD_INT 1
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 2
69140: PUSH
69141: LD_INT 1
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 2
69150: PUSH
69151: LD_INT 2
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 1
69160: PUSH
69161: LD_INT 2
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: LD_INT 2
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 1
69180: NEG
69181: PUSH
69182: LD_INT 1
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 2
69191: NEG
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 2
69202: NEG
69203: PUSH
69204: LD_INT 1
69206: NEG
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 2
69214: NEG
69215: PUSH
69216: LD_INT 2
69218: NEG
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69245: LD_ADDR_VAR 0 58
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 0
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 1
69273: PUSH
69274: LD_INT 0
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: LD_INT 1
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 1
69303: NEG
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 1
69314: NEG
69315: PUSH
69316: LD_INT 1
69318: NEG
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: LD_INT 2
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 0
69338: PUSH
69339: LD_INT 2
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 1
69349: PUSH
69350: LD_INT 1
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 2
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 2
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 2
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 1
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 0
69400: PUSH
69401: LD_INT 2
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 1
69410: NEG
69411: PUSH
69412: LD_INT 1
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 2
69421: NEG
69422: PUSH
69423: LD_INT 0
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 2
69432: NEG
69433: PUSH
69434: LD_INT 1
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 2
69444: NEG
69445: PUSH
69446: LD_INT 2
69448: NEG
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69475: LD_ADDR_VAR 0 59
69479: PUSH
69480: LD_INT 0
69482: PUSH
69483: LD_INT 0
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: LD_INT 1
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 1
69503: PUSH
69504: LD_INT 0
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 1
69513: PUSH
69514: LD_INT 1
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 1
69544: NEG
69545: PUSH
69546: LD_INT 1
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69563: LD_ADDR_VAR 0 60
69567: PUSH
69568: LD_INT 0
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: LD_INT 1
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 1
69591: PUSH
69592: LD_INT 0
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 1
69601: PUSH
69602: LD_INT 1
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 1
69621: NEG
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 1
69632: NEG
69633: PUSH
69634: LD_INT 1
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69651: LD_ADDR_VAR 0 61
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: LD_INT 0
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: LD_INT 0
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 1
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 0
69699: PUSH
69700: LD_INT 1
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 1
69709: NEG
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 1
69720: NEG
69721: PUSH
69722: LD_INT 1
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69739: LD_ADDR_VAR 0 62
69743: PUSH
69744: LD_INT 0
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: LD_INT 1
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 1
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 1
69777: PUSH
69778: LD_INT 1
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 0
69787: PUSH
69788: LD_INT 1
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 1
69797: NEG
69798: PUSH
69799: LD_INT 0
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 1
69808: NEG
69809: PUSH
69810: LD_INT 1
69812: NEG
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69827: LD_ADDR_VAR 0 63
69831: PUSH
69832: LD_INT 0
69834: PUSH
69835: LD_INT 0
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 0
69844: PUSH
69845: LD_INT 1
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 1
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 1
69865: PUSH
69866: LD_INT 1
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: LD_INT 1
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 1
69885: NEG
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 1
69896: NEG
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69915: LD_ADDR_VAR 0 64
69919: PUSH
69920: LD_INT 0
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 0
69932: PUSH
69933: LD_INT 1
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 1
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: LD_INT 1
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 0
69963: PUSH
69964: LD_INT 1
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 1
69973: NEG
69974: PUSH
69975: LD_INT 0
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 1
69984: NEG
69985: PUSH
69986: LD_INT 1
69988: NEG
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: ST_TO_ADDR
// end ; 1 :
70003: GO 75900
70005: LD_INT 1
70007: DOUBLE
70008: EQUAL
70009: IFTRUE 70013
70011: GO 72636
70013: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70014: LD_ADDR_VAR 0 11
70018: PUSH
70019: LD_INT 1
70021: NEG
70022: PUSH
70023: LD_INT 3
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 0
70033: PUSH
70034: LD_INT 3
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 1
70044: PUSH
70045: LD_INT 2
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: LIST
70057: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70058: LD_ADDR_VAR 0 12
70062: PUSH
70063: LD_INT 2
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 3
70086: PUSH
70087: LD_INT 1
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: LIST
70098: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70099: LD_ADDR_VAR 0 13
70103: PUSH
70104: LD_INT 3
70106: PUSH
70107: LD_INT 2
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 3
70116: PUSH
70117: LD_INT 3
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 2
70126: PUSH
70127: LD_INT 3
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: LIST
70138: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70139: LD_ADDR_VAR 0 14
70143: PUSH
70144: LD_INT 1
70146: PUSH
70147: LD_INT 3
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: LD_INT 3
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 1
70166: NEG
70167: PUSH
70168: LD_INT 2
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: LIST
70179: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70180: LD_ADDR_VAR 0 15
70184: PUSH
70185: LD_INT 2
70187: NEG
70188: PUSH
70189: LD_INT 1
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 3
70198: NEG
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 3
70209: NEG
70210: PUSH
70211: LD_INT 1
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: LIST
70223: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70224: LD_ADDR_VAR 0 16
70228: PUSH
70229: LD_INT 2
70231: NEG
70232: PUSH
70233: LD_INT 3
70235: NEG
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 3
70243: NEG
70244: PUSH
70245: LD_INT 2
70247: NEG
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 3
70255: NEG
70256: PUSH
70257: LD_INT 3
70259: NEG
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70270: LD_ADDR_VAR 0 17
70274: PUSH
70275: LD_INT 1
70277: NEG
70278: PUSH
70279: LD_INT 3
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: LD_INT 3
70292: NEG
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 1
70300: PUSH
70301: LD_INT 2
70303: NEG
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: LIST
70313: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70314: LD_ADDR_VAR 0 18
70318: PUSH
70319: LD_INT 2
70321: PUSH
70322: LD_INT 1
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: PUSH
70333: LD_INT 0
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 3
70342: PUSH
70343: LD_INT 1
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: LIST
70354: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70355: LD_ADDR_VAR 0 19
70359: PUSH
70360: LD_INT 3
70362: PUSH
70363: LD_INT 2
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 3
70372: PUSH
70373: LD_INT 3
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 2
70382: PUSH
70383: LD_INT 3
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: LIST
70394: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70395: LD_ADDR_VAR 0 20
70399: PUSH
70400: LD_INT 1
70402: PUSH
70403: LD_INT 3
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_INT 3
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 1
70422: NEG
70423: PUSH
70424: LD_INT 2
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: LIST
70435: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70436: LD_ADDR_VAR 0 21
70440: PUSH
70441: LD_INT 2
70443: NEG
70444: PUSH
70445: LD_INT 1
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 3
70454: NEG
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 3
70465: NEG
70466: PUSH
70467: LD_INT 1
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: LIST
70479: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70480: LD_ADDR_VAR 0 22
70484: PUSH
70485: LD_INT 2
70487: NEG
70488: PUSH
70489: LD_INT 3
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 3
70499: NEG
70500: PUSH
70501: LD_INT 2
70503: NEG
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 3
70511: NEG
70512: PUSH
70513: LD_INT 3
70515: NEG
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: LIST
70525: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70526: LD_ADDR_VAR 0 23
70530: PUSH
70531: LD_INT 0
70533: PUSH
70534: LD_INT 3
70536: NEG
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 1
70544: NEG
70545: PUSH
70546: LD_INT 4
70548: NEG
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 1
70556: PUSH
70557: LD_INT 3
70559: NEG
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: LIST
70569: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70570: LD_ADDR_VAR 0 24
70574: PUSH
70575: LD_INT 3
70577: PUSH
70578: LD_INT 0
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 3
70587: PUSH
70588: LD_INT 1
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 4
70598: PUSH
70599: LD_INT 1
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: LIST
70610: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70611: LD_ADDR_VAR 0 25
70615: PUSH
70616: LD_INT 3
70618: PUSH
70619: LD_INT 3
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 4
70628: PUSH
70629: LD_INT 3
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 3
70638: PUSH
70639: LD_INT 4
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70651: LD_ADDR_VAR 0 26
70655: PUSH
70656: LD_INT 0
70658: PUSH
70659: LD_INT 3
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 1
70668: PUSH
70669: LD_INT 4
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 1
70678: NEG
70679: PUSH
70680: LD_INT 3
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: LIST
70691: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70692: LD_ADDR_VAR 0 27
70696: PUSH
70697: LD_INT 3
70699: NEG
70700: PUSH
70701: LD_INT 0
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 3
70710: NEG
70711: PUSH
70712: LD_INT 1
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 4
70721: NEG
70722: PUSH
70723: LD_INT 1
70725: NEG
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: LIST
70735: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70736: LD_ADDR_VAR 0 28
70740: PUSH
70741: LD_INT 3
70743: NEG
70744: PUSH
70745: LD_INT 3
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 3
70755: NEG
70756: PUSH
70757: LD_INT 4
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 4
70767: NEG
70768: PUSH
70769: LD_INT 3
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: LIST
70781: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70782: LD_ADDR_VAR 0 29
70786: PUSH
70787: LD_INT 1
70789: NEG
70790: PUSH
70791: LD_INT 3
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 0
70801: PUSH
70802: LD_INT 3
70804: NEG
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 1
70812: PUSH
70813: LD_INT 2
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 1
70823: NEG
70824: PUSH
70825: LD_INT 4
70827: NEG
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 0
70835: PUSH
70836: LD_INT 4
70838: NEG
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 1
70846: PUSH
70847: LD_INT 3
70849: NEG
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 1
70857: NEG
70858: PUSH
70859: LD_INT 5
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: LD_INT 5
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 1
70880: PUSH
70881: LD_INT 4
70883: NEG
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 1
70891: NEG
70892: PUSH
70893: LD_INT 6
70895: NEG
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 0
70903: PUSH
70904: LD_INT 6
70906: NEG
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 1
70914: PUSH
70915: LD_INT 5
70917: NEG
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70937: LD_ADDR_VAR 0 30
70941: PUSH
70942: LD_INT 2
70944: PUSH
70945: LD_INT 1
70947: NEG
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 3
70955: PUSH
70956: LD_INT 0
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 3
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 3
70975: PUSH
70976: LD_INT 1
70978: NEG
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 4
70986: PUSH
70987: LD_INT 0
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 4
70996: PUSH
70997: LD_INT 1
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 4
71006: PUSH
71007: LD_INT 1
71009: NEG
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 5
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 5
71027: PUSH
71028: LD_INT 1
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 5
71037: PUSH
71038: LD_INT 1
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 6
71048: PUSH
71049: LD_INT 0
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 6
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
71080: LD_ADDR_VAR 0 31
71084: PUSH
71085: LD_INT 3
71087: PUSH
71088: LD_INT 2
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 3
71097: PUSH
71098: LD_INT 3
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 2
71107: PUSH
71108: LD_INT 3
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 4
71117: PUSH
71118: LD_INT 3
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 4
71127: PUSH
71128: LD_INT 4
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 3
71137: PUSH
71138: LD_INT 4
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 5
71147: PUSH
71148: LD_INT 4
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 5
71157: PUSH
71158: LD_INT 5
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 4
71167: PUSH
71168: LD_INT 5
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 6
71177: PUSH
71178: LD_INT 5
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 6
71187: PUSH
71188: LD_INT 6
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 5
71197: PUSH
71198: LD_INT 6
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71219: LD_ADDR_VAR 0 32
71223: PUSH
71224: LD_INT 1
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 0
71236: PUSH
71237: LD_INT 3
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 1
71246: NEG
71247: PUSH
71248: LD_INT 2
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 1
71257: PUSH
71258: LD_INT 4
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 0
71267: PUSH
71268: LD_INT 4
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 1
71277: NEG
71278: PUSH
71279: LD_INT 3
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 1
71288: PUSH
71289: LD_INT 5
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 0
71298: PUSH
71299: LD_INT 5
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 1
71308: NEG
71309: PUSH
71310: LD_INT 4
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 1
71319: PUSH
71320: LD_INT 6
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 0
71329: PUSH
71330: LD_INT 6
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 1
71339: NEG
71340: PUSH
71341: LD_INT 5
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
71362: LD_ADDR_VAR 0 33
71366: PUSH
71367: LD_INT 2
71369: NEG
71370: PUSH
71371: LD_INT 1
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 3
71380: NEG
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 3
71391: NEG
71392: PUSH
71393: LD_INT 1
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 3
71403: NEG
71404: PUSH
71405: LD_INT 1
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 4
71414: NEG
71415: PUSH
71416: LD_INT 0
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 4
71425: NEG
71426: PUSH
71427: LD_INT 1
71429: NEG
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 4
71437: NEG
71438: PUSH
71439: LD_INT 1
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 5
71448: NEG
71449: PUSH
71450: LD_INT 0
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 5
71459: NEG
71460: PUSH
71461: LD_INT 1
71463: NEG
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 5
71471: NEG
71472: PUSH
71473: LD_INT 1
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 6
71482: NEG
71483: PUSH
71484: LD_INT 0
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 6
71493: NEG
71494: PUSH
71495: LD_INT 1
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71517: LD_ADDR_VAR 0 34
71521: PUSH
71522: LD_INT 2
71524: NEG
71525: PUSH
71526: LD_INT 3
71528: NEG
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 3
71536: NEG
71537: PUSH
71538: LD_INT 2
71540: NEG
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 3
71548: NEG
71549: PUSH
71550: LD_INT 3
71552: NEG
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 3
71560: NEG
71561: PUSH
71562: LD_INT 4
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 4
71572: NEG
71573: PUSH
71574: LD_INT 3
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 4
71584: NEG
71585: PUSH
71586: LD_INT 4
71588: NEG
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 4
71596: NEG
71597: PUSH
71598: LD_INT 5
71600: NEG
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 5
71608: NEG
71609: PUSH
71610: LD_INT 4
71612: NEG
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 5
71620: NEG
71621: PUSH
71622: LD_INT 5
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 5
71632: NEG
71633: PUSH
71634: LD_INT 6
71636: NEG
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 6
71644: NEG
71645: PUSH
71646: LD_INT 5
71648: NEG
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 6
71656: NEG
71657: PUSH
71658: LD_INT 6
71660: NEG
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71680: LD_ADDR_VAR 0 41
71684: PUSH
71685: LD_INT 0
71687: PUSH
71688: LD_INT 2
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 1
71698: NEG
71699: PUSH
71700: LD_INT 3
71702: NEG
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 1
71710: PUSH
71711: LD_INT 2
71713: NEG
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: LIST
71723: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71724: LD_ADDR_VAR 0 42
71728: PUSH
71729: LD_INT 2
71731: PUSH
71732: LD_INT 0
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 2
71741: PUSH
71742: LD_INT 1
71744: NEG
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 3
71752: PUSH
71753: LD_INT 1
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: LIST
71764: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71765: LD_ADDR_VAR 0 43
71769: PUSH
71770: LD_INT 2
71772: PUSH
71773: LD_INT 2
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 3
71782: PUSH
71783: LD_INT 2
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 2
71792: PUSH
71793: LD_INT 3
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: LIST
71804: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71805: LD_ADDR_VAR 0 44
71809: PUSH
71810: LD_INT 0
71812: PUSH
71813: LD_INT 2
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PUSH
71820: LD_INT 1
71822: PUSH
71823: LD_INT 3
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 1
71832: NEG
71833: PUSH
71834: LD_INT 2
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: LIST
71845: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71846: LD_ADDR_VAR 0 45
71850: PUSH
71851: LD_INT 2
71853: NEG
71854: PUSH
71855: LD_INT 0
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 2
71864: NEG
71865: PUSH
71866: LD_INT 1
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 3
71875: NEG
71876: PUSH
71877: LD_INT 1
71879: NEG
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: LIST
71889: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71890: LD_ADDR_VAR 0 46
71894: PUSH
71895: LD_INT 2
71897: NEG
71898: PUSH
71899: LD_INT 2
71901: NEG
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PUSH
71907: LD_INT 2
71909: NEG
71910: PUSH
71911: LD_INT 3
71913: NEG
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 3
71921: NEG
71922: PUSH
71923: LD_INT 2
71925: NEG
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: LIST
71935: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71936: LD_ADDR_VAR 0 47
71940: PUSH
71941: LD_INT 2
71943: NEG
71944: PUSH
71945: LD_INT 3
71947: NEG
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 1
71955: NEG
71956: PUSH
71957: LD_INT 3
71959: NEG
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71969: LD_ADDR_VAR 0 48
71973: PUSH
71974: LD_INT 1
71976: PUSH
71977: LD_INT 2
71979: NEG
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 2
71987: PUSH
71988: LD_INT 1
71990: NEG
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
72000: LD_ADDR_VAR 0 49
72004: PUSH
72005: LD_INT 3
72007: PUSH
72008: LD_INT 1
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 3
72017: PUSH
72018: LD_INT 2
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
72029: LD_ADDR_VAR 0 50
72033: PUSH
72034: LD_INT 2
72036: PUSH
72037: LD_INT 3
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 1
72046: PUSH
72047: LD_INT 3
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72058: LD_ADDR_VAR 0 51
72062: PUSH
72063: LD_INT 1
72065: NEG
72066: PUSH
72067: LD_INT 2
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 2
72076: NEG
72077: PUSH
72078: LD_INT 1
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72089: LD_ADDR_VAR 0 52
72093: PUSH
72094: LD_INT 3
72096: NEG
72097: PUSH
72098: LD_INT 1
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 3
72108: NEG
72109: PUSH
72110: LD_INT 2
72112: NEG
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72122: LD_ADDR_VAR 0 53
72126: PUSH
72127: LD_INT 1
72129: NEG
72130: PUSH
72131: LD_INT 3
72133: NEG
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: LD_INT 0
72141: PUSH
72142: LD_INT 3
72144: NEG
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 1
72152: PUSH
72153: LD_INT 2
72155: NEG
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: LIST
72165: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72166: LD_ADDR_VAR 0 54
72170: PUSH
72171: LD_INT 2
72173: PUSH
72174: LD_INT 1
72176: NEG
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 3
72184: PUSH
72185: LD_INT 0
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 3
72194: PUSH
72195: LD_INT 1
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: LIST
72206: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72207: LD_ADDR_VAR 0 55
72211: PUSH
72212: LD_INT 3
72214: PUSH
72215: LD_INT 2
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 3
72224: PUSH
72225: LD_INT 3
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 2
72234: PUSH
72235: LD_INT 3
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: LIST
72246: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72247: LD_ADDR_VAR 0 56
72251: PUSH
72252: LD_INT 1
72254: PUSH
72255: LD_INT 3
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 0
72264: PUSH
72265: LD_INT 3
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 1
72274: NEG
72275: PUSH
72276: LD_INT 2
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: LIST
72287: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72288: LD_ADDR_VAR 0 57
72292: PUSH
72293: LD_INT 2
72295: NEG
72296: PUSH
72297: LD_INT 1
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 3
72306: NEG
72307: PUSH
72308: LD_INT 0
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 3
72317: NEG
72318: PUSH
72319: LD_INT 1
72321: NEG
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: LIST
72331: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72332: LD_ADDR_VAR 0 58
72336: PUSH
72337: LD_INT 2
72339: NEG
72340: PUSH
72341: LD_INT 3
72343: NEG
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 3
72351: NEG
72352: PUSH
72353: LD_INT 2
72355: NEG
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 3
72363: NEG
72364: PUSH
72365: LD_INT 3
72367: NEG
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: LIST
72377: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
72378: LD_ADDR_VAR 0 59
72382: PUSH
72383: LD_INT 1
72385: NEG
72386: PUSH
72387: LD_INT 2
72389: NEG
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 0
72397: PUSH
72398: LD_INT 2
72400: NEG
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 1
72408: PUSH
72409: LD_INT 1
72411: NEG
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: LIST
72421: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72422: LD_ADDR_VAR 0 60
72426: PUSH
72427: LD_INT 1
72429: PUSH
72430: LD_INT 1
72432: NEG
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 2
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 2
72450: PUSH
72451: LD_INT 1
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: LIST
72462: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72463: LD_ADDR_VAR 0 61
72467: PUSH
72468: LD_INT 2
72470: PUSH
72471: LD_INT 1
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 2
72480: PUSH
72481: LD_INT 2
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 1
72490: PUSH
72491: LD_INT 2
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: LIST
72502: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72503: LD_ADDR_VAR 0 62
72507: PUSH
72508: LD_INT 1
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 0
72520: PUSH
72521: LD_INT 2
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 1
72530: NEG
72531: PUSH
72532: LD_INT 1
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: LIST
72543: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72544: LD_ADDR_VAR 0 63
72548: PUSH
72549: LD_INT 1
72551: NEG
72552: PUSH
72553: LD_INT 1
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 2
72562: NEG
72563: PUSH
72564: LD_INT 0
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 2
72573: NEG
72574: PUSH
72575: LD_INT 1
72577: NEG
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: LIST
72587: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72588: LD_ADDR_VAR 0 64
72592: PUSH
72593: LD_INT 1
72595: NEG
72596: PUSH
72597: LD_INT 2
72599: NEG
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 2
72607: NEG
72608: PUSH
72609: LD_INT 1
72611: NEG
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 2
72619: NEG
72620: PUSH
72621: LD_INT 2
72623: NEG
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: LIST
72633: ST_TO_ADDR
// end ; 2 :
72634: GO 75900
72636: LD_INT 2
72638: DOUBLE
72639: EQUAL
72640: IFTRUE 72644
72642: GO 75899
72644: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72645: LD_ADDR_VAR 0 29
72649: PUSH
72650: LD_INT 4
72652: PUSH
72653: LD_INT 0
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 4
72662: PUSH
72663: LD_INT 1
72665: NEG
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 5
72673: PUSH
72674: LD_INT 0
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 5
72683: PUSH
72684: LD_INT 1
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 4
72693: PUSH
72694: LD_INT 1
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 3
72703: PUSH
72704: LD_INT 0
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 3
72713: PUSH
72714: LD_INT 1
72716: NEG
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: LD_INT 3
72724: PUSH
72725: LD_INT 2
72727: NEG
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 5
72735: PUSH
72736: LD_INT 2
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 3
72745: PUSH
72746: LD_INT 3
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: LD_INT 3
72755: PUSH
72756: LD_INT 2
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 4
72765: PUSH
72766: LD_INT 3
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 4
72775: PUSH
72776: LD_INT 4
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 3
72785: PUSH
72786: LD_INT 4
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 2
72795: PUSH
72796: LD_INT 3
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 2
72805: PUSH
72806: LD_INT 2
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 4
72815: PUSH
72816: LD_INT 2
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 2
72825: PUSH
72826: LD_INT 4
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: LD_INT 4
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PUSH
72843: LD_INT 0
72845: PUSH
72846: LD_INT 3
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 1
72855: PUSH
72856: LD_INT 4
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 1
72865: PUSH
72866: LD_INT 5
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: LD_INT 0
72875: PUSH
72876: LD_INT 5
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PUSH
72883: LD_INT 1
72885: NEG
72886: PUSH
72887: LD_INT 4
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: PUSH
72894: LD_INT 1
72896: NEG
72897: PUSH
72898: LD_INT 3
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 2
72907: PUSH
72908: LD_INT 5
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 2
72917: NEG
72918: PUSH
72919: LD_INT 3
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 3
72928: NEG
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 3
72939: NEG
72940: PUSH
72941: LD_INT 1
72943: NEG
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_INT 2
72951: NEG
72952: PUSH
72953: LD_INT 0
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 2
72962: NEG
72963: PUSH
72964: LD_INT 1
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 3
72973: NEG
72974: PUSH
72975: LD_INT 1
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 4
72984: NEG
72985: PUSH
72986: LD_INT 0
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 4
72995: NEG
72996: PUSH
72997: LD_INT 1
72999: NEG
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 4
73007: NEG
73008: PUSH
73009: LD_INT 2
73011: NEG
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 2
73019: NEG
73020: PUSH
73021: LD_INT 2
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 4
73030: NEG
73031: PUSH
73032: LD_INT 4
73034: NEG
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 4
73042: NEG
73043: PUSH
73044: LD_INT 5
73046: NEG
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 3
73054: NEG
73055: PUSH
73056: LD_INT 4
73058: NEG
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 3
73066: NEG
73067: PUSH
73068: LD_INT 3
73070: NEG
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PUSH
73076: LD_INT 4
73078: NEG
73079: PUSH
73080: LD_INT 3
73082: NEG
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 5
73090: NEG
73091: PUSH
73092: LD_INT 4
73094: NEG
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 5
73102: NEG
73103: PUSH
73104: LD_INT 5
73106: NEG
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 3
73114: NEG
73115: PUSH
73116: LD_INT 5
73118: NEG
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 5
73126: NEG
73127: PUSH
73128: LD_INT 3
73130: NEG
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73183: LD_ADDR_VAR 0 30
73187: PUSH
73188: LD_INT 4
73190: PUSH
73191: LD_INT 4
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: PUSH
73198: LD_INT 4
73200: PUSH
73201: LD_INT 3
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 5
73210: PUSH
73211: LD_INT 4
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: LD_INT 5
73220: PUSH
73221: LD_INT 5
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 4
73230: PUSH
73231: LD_INT 5
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PUSH
73238: LD_INT 3
73240: PUSH
73241: LD_INT 4
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: LD_INT 3
73250: PUSH
73251: LD_INT 3
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 5
73260: PUSH
73261: LD_INT 3
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 3
73270: PUSH
73271: LD_INT 5
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: PUSH
73278: LD_INT 0
73280: PUSH
73281: LD_INT 3
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: LD_INT 2
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 1
73300: PUSH
73301: LD_INT 3
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: LD_INT 1
73310: PUSH
73311: LD_INT 4
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: PUSH
73318: LD_INT 0
73320: PUSH
73321: LD_INT 4
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 1
73330: NEG
73331: PUSH
73332: LD_INT 3
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 1
73341: NEG
73342: PUSH
73343: LD_INT 2
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 2
73352: PUSH
73353: LD_INT 4
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 2
73362: NEG
73363: PUSH
73364: LD_INT 2
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 4
73373: NEG
73374: PUSH
73375: LD_INT 0
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: PUSH
73382: LD_INT 4
73384: NEG
73385: PUSH
73386: LD_INT 1
73388: NEG
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: LD_INT 3
73396: NEG
73397: PUSH
73398: LD_INT 0
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: LD_INT 3
73407: NEG
73408: PUSH
73409: LD_INT 1
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 4
73418: NEG
73419: PUSH
73420: LD_INT 1
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 5
73429: NEG
73430: PUSH
73431: LD_INT 0
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: LD_INT 5
73440: NEG
73441: PUSH
73442: LD_INT 1
73444: NEG
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PUSH
73450: LD_INT 5
73452: NEG
73453: PUSH
73454: LD_INT 2
73456: NEG
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 3
73464: NEG
73465: PUSH
73466: LD_INT 2
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 3
73475: NEG
73476: PUSH
73477: LD_INT 3
73479: NEG
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PUSH
73485: LD_INT 3
73487: NEG
73488: PUSH
73489: LD_INT 4
73491: NEG
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 2
73499: NEG
73500: PUSH
73501: LD_INT 3
73503: NEG
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: PUSH
73509: LD_INT 2
73511: NEG
73512: PUSH
73513: LD_INT 2
73515: NEG
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: LD_INT 3
73523: NEG
73524: PUSH
73525: LD_INT 2
73527: NEG
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PUSH
73533: LD_INT 4
73535: NEG
73536: PUSH
73537: LD_INT 3
73539: NEG
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 4
73547: NEG
73548: PUSH
73549: LD_INT 4
73551: NEG
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 2
73559: NEG
73560: PUSH
73561: LD_INT 4
73563: NEG
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: LD_INT 4
73571: NEG
73572: PUSH
73573: LD_INT 2
73575: NEG
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: LD_INT 0
73583: PUSH
73584: LD_INT 4
73586: NEG
73587: PUSH
73588: EMPTY
73589: LIST
73590: LIST
73591: PUSH
73592: LD_INT 0
73594: PUSH
73595: LD_INT 5
73597: NEG
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: LD_INT 1
73605: PUSH
73606: LD_INT 4
73608: NEG
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 1
73616: PUSH
73617: LD_INT 3
73619: NEG
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 0
73627: PUSH
73628: LD_INT 3
73630: NEG
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PUSH
73636: LD_INT 1
73638: NEG
73639: PUSH
73640: LD_INT 4
73642: NEG
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: LD_INT 1
73650: NEG
73651: PUSH
73652: LD_INT 5
73654: NEG
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_INT 2
73662: PUSH
73663: LD_INT 3
73665: NEG
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: PUSH
73671: LD_INT 2
73673: NEG
73674: PUSH
73675: LD_INT 5
73677: NEG
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73730: LD_ADDR_VAR 0 31
73734: PUSH
73735: LD_INT 0
73737: PUSH
73738: LD_INT 4
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: LD_INT 3
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 1
73757: PUSH
73758: LD_INT 4
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 1
73767: PUSH
73768: LD_INT 5
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 0
73777: PUSH
73778: LD_INT 5
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PUSH
73785: LD_INT 1
73787: NEG
73788: PUSH
73789: LD_INT 4
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 1
73798: NEG
73799: PUSH
73800: LD_INT 3
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 2
73809: PUSH
73810: LD_INT 5
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 2
73819: NEG
73820: PUSH
73821: LD_INT 3
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 3
73830: NEG
73831: PUSH
73832: LD_INT 0
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_INT 3
73841: NEG
73842: PUSH
73843: LD_INT 1
73845: NEG
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: LD_INT 2
73853: NEG
73854: PUSH
73855: LD_INT 0
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: LD_INT 2
73864: NEG
73865: PUSH
73866: LD_INT 1
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: PUSH
73873: LD_INT 3
73875: NEG
73876: PUSH
73877: LD_INT 1
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 4
73886: NEG
73887: PUSH
73888: LD_INT 0
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: PUSH
73895: LD_INT 4
73897: NEG
73898: PUSH
73899: LD_INT 1
73901: NEG
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: PUSH
73907: LD_INT 4
73909: NEG
73910: PUSH
73911: LD_INT 2
73913: NEG
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: LD_INT 2
73921: NEG
73922: PUSH
73923: LD_INT 2
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_INT 4
73932: NEG
73933: PUSH
73934: LD_INT 4
73936: NEG
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: PUSH
73942: LD_INT 4
73944: NEG
73945: PUSH
73946: LD_INT 5
73948: NEG
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 3
73956: NEG
73957: PUSH
73958: LD_INT 4
73960: NEG
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 3
73968: NEG
73969: PUSH
73970: LD_INT 3
73972: NEG
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: LD_INT 4
73980: NEG
73981: PUSH
73982: LD_INT 3
73984: NEG
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PUSH
73990: LD_INT 5
73992: NEG
73993: PUSH
73994: LD_INT 4
73996: NEG
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 5
74004: NEG
74005: PUSH
74006: LD_INT 5
74008: NEG
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PUSH
74014: LD_INT 3
74016: NEG
74017: PUSH
74018: LD_INT 5
74020: NEG
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_INT 5
74028: NEG
74029: PUSH
74030: LD_INT 3
74032: NEG
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: PUSH
74038: LD_INT 0
74040: PUSH
74041: LD_INT 3
74043: NEG
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 0
74051: PUSH
74052: LD_INT 4
74054: NEG
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 1
74062: PUSH
74063: LD_INT 3
74065: NEG
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: PUSH
74071: LD_INT 1
74073: PUSH
74074: LD_INT 2
74076: NEG
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 0
74084: PUSH
74085: LD_INT 2
74087: NEG
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: LD_INT 1
74095: NEG
74096: PUSH
74097: LD_INT 3
74099: NEG
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_INT 1
74107: NEG
74108: PUSH
74109: LD_INT 4
74111: NEG
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 2
74119: PUSH
74120: LD_INT 2
74122: NEG
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 2
74130: NEG
74131: PUSH
74132: LD_INT 4
74134: NEG
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: LD_INT 4
74142: PUSH
74143: LD_INT 0
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PUSH
74150: LD_INT 4
74152: PUSH
74153: LD_INT 1
74155: NEG
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_INT 5
74163: PUSH
74164: LD_INT 0
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: PUSH
74171: LD_INT 5
74173: PUSH
74174: LD_INT 1
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: PUSH
74181: LD_INT 4
74183: PUSH
74184: LD_INT 1
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 3
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 3
74203: PUSH
74204: LD_INT 1
74206: NEG
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 3
74214: PUSH
74215: LD_INT 2
74217: NEG
74218: PUSH
74219: EMPTY
74220: LIST
74221: LIST
74222: PUSH
74223: LD_INT 5
74225: PUSH
74226: LD_INT 2
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
74280: LD_ADDR_VAR 0 32
74284: PUSH
74285: LD_INT 4
74287: NEG
74288: PUSH
74289: LD_INT 0
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: LD_INT 4
74298: NEG
74299: PUSH
74300: LD_INT 1
74302: NEG
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: PUSH
74308: LD_INT 3
74310: NEG
74311: PUSH
74312: LD_INT 0
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: LD_INT 3
74321: NEG
74322: PUSH
74323: LD_INT 1
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: PUSH
74330: LD_INT 4
74332: NEG
74333: PUSH
74334: LD_INT 1
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 5
74343: NEG
74344: PUSH
74345: LD_INT 0
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PUSH
74352: LD_INT 5
74354: NEG
74355: PUSH
74356: LD_INT 1
74358: NEG
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PUSH
74364: LD_INT 5
74366: NEG
74367: PUSH
74368: LD_INT 2
74370: NEG
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 3
74378: NEG
74379: PUSH
74380: LD_INT 2
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 3
74389: NEG
74390: PUSH
74391: LD_INT 3
74393: NEG
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: LD_INT 3
74401: NEG
74402: PUSH
74403: LD_INT 4
74405: NEG
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 2
74413: NEG
74414: PUSH
74415: LD_INT 3
74417: NEG
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: PUSH
74423: LD_INT 2
74425: NEG
74426: PUSH
74427: LD_INT 2
74429: NEG
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 3
74437: NEG
74438: PUSH
74439: LD_INT 2
74441: NEG
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: PUSH
74447: LD_INT 4
74449: NEG
74450: PUSH
74451: LD_INT 3
74453: NEG
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: PUSH
74459: LD_INT 4
74461: NEG
74462: PUSH
74463: LD_INT 4
74465: NEG
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: PUSH
74471: LD_INT 2
74473: NEG
74474: PUSH
74475: LD_INT 4
74477: NEG
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 4
74485: NEG
74486: PUSH
74487: LD_INT 2
74489: NEG
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 0
74497: PUSH
74498: LD_INT 4
74500: NEG
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: LD_INT 0
74508: PUSH
74509: LD_INT 5
74511: NEG
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 1
74519: PUSH
74520: LD_INT 4
74522: NEG
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 1
74530: PUSH
74531: LD_INT 3
74533: NEG
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: PUSH
74539: LD_INT 0
74541: PUSH
74542: LD_INT 3
74544: NEG
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PUSH
74550: LD_INT 1
74552: NEG
74553: PUSH
74554: LD_INT 4
74556: NEG
74557: PUSH
74558: EMPTY
74559: LIST
74560: LIST
74561: PUSH
74562: LD_INT 1
74564: NEG
74565: PUSH
74566: LD_INT 5
74568: NEG
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: PUSH
74574: LD_INT 2
74576: PUSH
74577: LD_INT 3
74579: NEG
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 2
74587: NEG
74588: PUSH
74589: LD_INT 5
74591: NEG
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 3
74599: PUSH
74600: LD_INT 0
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 3
74609: PUSH
74610: LD_INT 1
74612: NEG
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 4
74620: PUSH
74621: LD_INT 0
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: PUSH
74628: LD_INT 4
74630: PUSH
74631: LD_INT 1
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: PUSH
74638: LD_INT 3
74640: PUSH
74641: LD_INT 1
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PUSH
74648: LD_INT 2
74650: PUSH
74651: LD_INT 0
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: PUSH
74658: LD_INT 2
74660: PUSH
74661: LD_INT 1
74663: NEG
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PUSH
74669: LD_INT 2
74671: PUSH
74672: LD_INT 2
74674: NEG
74675: PUSH
74676: EMPTY
74677: LIST
74678: LIST
74679: PUSH
74680: LD_INT 4
74682: PUSH
74683: LD_INT 2
74685: PUSH
74686: EMPTY
74687: LIST
74688: LIST
74689: PUSH
74690: LD_INT 4
74692: PUSH
74693: LD_INT 4
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: PUSH
74700: LD_INT 4
74702: PUSH
74703: LD_INT 3
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 5
74712: PUSH
74713: LD_INT 4
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: LD_INT 5
74722: PUSH
74723: LD_INT 5
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: PUSH
74730: LD_INT 4
74732: PUSH
74733: LD_INT 5
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 3
74742: PUSH
74743: LD_INT 4
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 3
74752: PUSH
74753: LD_INT 3
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 5
74762: PUSH
74763: LD_INT 3
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 3
74772: PUSH
74773: LD_INT 5
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74827: LD_ADDR_VAR 0 33
74831: PUSH
74832: LD_INT 4
74834: NEG
74835: PUSH
74836: LD_INT 4
74838: NEG
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: LD_INT 4
74846: NEG
74847: PUSH
74848: LD_INT 5
74850: NEG
74851: PUSH
74852: EMPTY
74853: LIST
74854: LIST
74855: PUSH
74856: LD_INT 3
74858: NEG
74859: PUSH
74860: LD_INT 4
74862: NEG
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: PUSH
74868: LD_INT 3
74870: NEG
74871: PUSH
74872: LD_INT 3
74874: NEG
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: LD_INT 4
74882: NEG
74883: PUSH
74884: LD_INT 3
74886: NEG
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PUSH
74892: LD_INT 5
74894: NEG
74895: PUSH
74896: LD_INT 4
74898: NEG
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: PUSH
74904: LD_INT 5
74906: NEG
74907: PUSH
74908: LD_INT 5
74910: NEG
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: PUSH
74916: LD_INT 3
74918: NEG
74919: PUSH
74920: LD_INT 5
74922: NEG
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: PUSH
74928: LD_INT 5
74930: NEG
74931: PUSH
74932: LD_INT 3
74934: NEG
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PUSH
74940: LD_INT 0
74942: PUSH
74943: LD_INT 3
74945: NEG
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: PUSH
74951: LD_INT 0
74953: PUSH
74954: LD_INT 4
74956: NEG
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: LD_INT 1
74964: PUSH
74965: LD_INT 3
74967: NEG
74968: PUSH
74969: EMPTY
74970: LIST
74971: LIST
74972: PUSH
74973: LD_INT 1
74975: PUSH
74976: LD_INT 2
74978: NEG
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: PUSH
74984: LD_INT 0
74986: PUSH
74987: LD_INT 2
74989: NEG
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 1
74997: NEG
74998: PUSH
74999: LD_INT 3
75001: NEG
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PUSH
75007: LD_INT 1
75009: NEG
75010: PUSH
75011: LD_INT 4
75013: NEG
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 2
75021: PUSH
75022: LD_INT 2
75024: NEG
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 2
75032: NEG
75033: PUSH
75034: LD_INT 4
75036: NEG
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: PUSH
75042: LD_INT 4
75044: PUSH
75045: LD_INT 0
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: PUSH
75052: LD_INT 4
75054: PUSH
75055: LD_INT 1
75057: NEG
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PUSH
75063: LD_INT 5
75065: PUSH
75066: LD_INT 0
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: PUSH
75073: LD_INT 5
75075: PUSH
75076: LD_INT 1
75078: PUSH
75079: EMPTY
75080: LIST
75081: LIST
75082: PUSH
75083: LD_INT 4
75085: PUSH
75086: LD_INT 1
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PUSH
75093: LD_INT 3
75095: PUSH
75096: LD_INT 0
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PUSH
75103: LD_INT 3
75105: PUSH
75106: LD_INT 1
75108: NEG
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PUSH
75114: LD_INT 3
75116: PUSH
75117: LD_INT 2
75119: NEG
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: PUSH
75125: LD_INT 5
75127: PUSH
75128: LD_INT 2
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PUSH
75135: LD_INT 3
75137: PUSH
75138: LD_INT 3
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: PUSH
75145: LD_INT 3
75147: PUSH
75148: LD_INT 2
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: PUSH
75155: LD_INT 4
75157: PUSH
75158: LD_INT 3
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: LD_INT 4
75167: PUSH
75168: LD_INT 4
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 3
75177: PUSH
75178: LD_INT 4
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 2
75187: PUSH
75188: LD_INT 3
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: LD_INT 2
75197: PUSH
75198: LD_INT 2
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 4
75207: PUSH
75208: LD_INT 2
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 2
75217: PUSH
75218: LD_INT 4
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: PUSH
75225: LD_INT 0
75227: PUSH
75228: LD_INT 4
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: PUSH
75235: LD_INT 0
75237: PUSH
75238: LD_INT 3
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: PUSH
75245: LD_INT 1
75247: PUSH
75248: LD_INT 4
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: PUSH
75255: LD_INT 1
75257: PUSH
75258: LD_INT 5
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: PUSH
75265: LD_INT 0
75267: PUSH
75268: LD_INT 5
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PUSH
75275: LD_INT 1
75277: NEG
75278: PUSH
75279: LD_INT 4
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: PUSH
75286: LD_INT 1
75288: NEG
75289: PUSH
75290: LD_INT 3
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: LD_INT 2
75299: PUSH
75300: LD_INT 5
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 2
75309: NEG
75310: PUSH
75311: LD_INT 3
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
75365: LD_ADDR_VAR 0 34
75369: PUSH
75370: LD_INT 0
75372: PUSH
75373: LD_INT 4
75375: NEG
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PUSH
75381: LD_INT 0
75383: PUSH
75384: LD_INT 5
75386: NEG
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PUSH
75392: LD_INT 1
75394: PUSH
75395: LD_INT 4
75397: NEG
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PUSH
75403: LD_INT 1
75405: PUSH
75406: LD_INT 3
75408: NEG
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: LD_INT 0
75416: PUSH
75417: LD_INT 3
75419: NEG
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 1
75427: NEG
75428: PUSH
75429: LD_INT 4
75431: NEG
75432: PUSH
75433: EMPTY
75434: LIST
75435: LIST
75436: PUSH
75437: LD_INT 1
75439: NEG
75440: PUSH
75441: LD_INT 5
75443: NEG
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: PUSH
75449: LD_INT 2
75451: PUSH
75452: LD_INT 3
75454: NEG
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PUSH
75460: LD_INT 2
75462: NEG
75463: PUSH
75464: LD_INT 5
75466: NEG
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PUSH
75472: LD_INT 3
75474: PUSH
75475: LD_INT 0
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 3
75484: PUSH
75485: LD_INT 1
75487: NEG
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: PUSH
75493: LD_INT 4
75495: PUSH
75496: LD_INT 0
75498: PUSH
75499: EMPTY
75500: LIST
75501: LIST
75502: PUSH
75503: LD_INT 4
75505: PUSH
75506: LD_INT 1
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: PUSH
75513: LD_INT 3
75515: PUSH
75516: LD_INT 1
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PUSH
75523: LD_INT 2
75525: PUSH
75526: LD_INT 0
75528: PUSH
75529: EMPTY
75530: LIST
75531: LIST
75532: PUSH
75533: LD_INT 2
75535: PUSH
75536: LD_INT 1
75538: NEG
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: PUSH
75544: LD_INT 2
75546: PUSH
75547: LD_INT 2
75549: NEG
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: PUSH
75555: LD_INT 4
75557: PUSH
75558: LD_INT 2
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PUSH
75565: LD_INT 4
75567: PUSH
75568: LD_INT 4
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 4
75577: PUSH
75578: LD_INT 3
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 5
75587: PUSH
75588: LD_INT 4
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: LD_INT 5
75597: PUSH
75598: LD_INT 5
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: PUSH
75605: LD_INT 4
75607: PUSH
75608: LD_INT 5
75610: PUSH
75611: EMPTY
75612: LIST
75613: LIST
75614: PUSH
75615: LD_INT 3
75617: PUSH
75618: LD_INT 4
75620: PUSH
75621: EMPTY
75622: LIST
75623: LIST
75624: PUSH
75625: LD_INT 3
75627: PUSH
75628: LD_INT 3
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: PUSH
75635: LD_INT 5
75637: PUSH
75638: LD_INT 3
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: PUSH
75645: LD_INT 3
75647: PUSH
75648: LD_INT 5
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: PUSH
75655: LD_INT 0
75657: PUSH
75658: LD_INT 3
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PUSH
75665: LD_INT 0
75667: PUSH
75668: LD_INT 2
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: PUSH
75675: LD_INT 1
75677: PUSH
75678: LD_INT 3
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: PUSH
75685: LD_INT 1
75687: PUSH
75688: LD_INT 4
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: PUSH
75695: LD_INT 0
75697: PUSH
75698: LD_INT 4
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: PUSH
75705: LD_INT 1
75707: NEG
75708: PUSH
75709: LD_INT 3
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: PUSH
75716: LD_INT 1
75718: NEG
75719: PUSH
75720: LD_INT 2
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: PUSH
75727: LD_INT 2
75729: PUSH
75730: LD_INT 4
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 2
75739: NEG
75740: PUSH
75741: LD_INT 2
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: PUSH
75748: LD_INT 4
75750: NEG
75751: PUSH
75752: LD_INT 0
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: PUSH
75759: LD_INT 4
75761: NEG
75762: PUSH
75763: LD_INT 1
75765: NEG
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 3
75773: NEG
75774: PUSH
75775: LD_INT 0
75777: PUSH
75778: EMPTY
75779: LIST
75780: LIST
75781: PUSH
75782: LD_INT 3
75784: NEG
75785: PUSH
75786: LD_INT 1
75788: PUSH
75789: EMPTY
75790: LIST
75791: LIST
75792: PUSH
75793: LD_INT 4
75795: NEG
75796: PUSH
75797: LD_INT 1
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: LD_INT 5
75806: NEG
75807: PUSH
75808: LD_INT 0
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: LD_INT 5
75817: NEG
75818: PUSH
75819: LD_INT 1
75821: NEG
75822: PUSH
75823: EMPTY
75824: LIST
75825: LIST
75826: PUSH
75827: LD_INT 5
75829: NEG
75830: PUSH
75831: LD_INT 2
75833: NEG
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PUSH
75839: LD_INT 3
75841: NEG
75842: PUSH
75843: LD_INT 2
75845: PUSH
75846: EMPTY
75847: LIST
75848: LIST
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: ST_TO_ADDR
// end ; end ;
75897: GO 75900
75899: POP
// case btype of b_depot , b_warehouse :
75900: LD_VAR 0 1
75904: PUSH
75905: LD_INT 0
75907: DOUBLE
75908: EQUAL
75909: IFTRUE 75919
75911: LD_INT 1
75913: DOUBLE
75914: EQUAL
75915: IFTRUE 75919
75917: GO 76120
75919: POP
// case nation of nation_american :
75920: LD_VAR 0 5
75924: PUSH
75925: LD_INT 1
75927: DOUBLE
75928: EQUAL
75929: IFTRUE 75933
75931: GO 75989
75933: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75934: LD_ADDR_VAR 0 9
75938: PUSH
75939: LD_VAR 0 11
75943: PUSH
75944: LD_VAR 0 12
75948: PUSH
75949: LD_VAR 0 13
75953: PUSH
75954: LD_VAR 0 14
75958: PUSH
75959: LD_VAR 0 15
75963: PUSH
75964: LD_VAR 0 16
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: PUSH
75977: LD_VAR 0 4
75981: PUSH
75982: LD_INT 1
75984: PLUS
75985: ARRAY
75986: ST_TO_ADDR
75987: GO 76118
75989: LD_INT 2
75991: DOUBLE
75992: EQUAL
75993: IFTRUE 75997
75995: GO 76053
75997: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75998: LD_ADDR_VAR 0 9
76002: PUSH
76003: LD_VAR 0 17
76007: PUSH
76008: LD_VAR 0 18
76012: PUSH
76013: LD_VAR 0 19
76017: PUSH
76018: LD_VAR 0 20
76022: PUSH
76023: LD_VAR 0 21
76027: PUSH
76028: LD_VAR 0 22
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: PUSH
76041: LD_VAR 0 4
76045: PUSH
76046: LD_INT 1
76048: PLUS
76049: ARRAY
76050: ST_TO_ADDR
76051: GO 76118
76053: LD_INT 3
76055: DOUBLE
76056: EQUAL
76057: IFTRUE 76061
76059: GO 76117
76061: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
76062: LD_ADDR_VAR 0 9
76066: PUSH
76067: LD_VAR 0 23
76071: PUSH
76072: LD_VAR 0 24
76076: PUSH
76077: LD_VAR 0 25
76081: PUSH
76082: LD_VAR 0 26
76086: PUSH
76087: LD_VAR 0 27
76091: PUSH
76092: LD_VAR 0 28
76096: PUSH
76097: EMPTY
76098: LIST
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: PUSH
76105: LD_VAR 0 4
76109: PUSH
76110: LD_INT 1
76112: PLUS
76113: ARRAY
76114: ST_TO_ADDR
76115: GO 76118
76117: POP
76118: GO 76673
76120: LD_INT 2
76122: DOUBLE
76123: EQUAL
76124: IFTRUE 76134
76126: LD_INT 3
76128: DOUBLE
76129: EQUAL
76130: IFTRUE 76134
76132: GO 76190
76134: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
76135: LD_ADDR_VAR 0 9
76139: PUSH
76140: LD_VAR 0 29
76144: PUSH
76145: LD_VAR 0 30
76149: PUSH
76150: LD_VAR 0 31
76154: PUSH
76155: LD_VAR 0 32
76159: PUSH
76160: LD_VAR 0 33
76164: PUSH
76165: LD_VAR 0 34
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: LIST
76177: PUSH
76178: LD_VAR 0 4
76182: PUSH
76183: LD_INT 1
76185: PLUS
76186: ARRAY
76187: ST_TO_ADDR
76188: GO 76673
76190: LD_INT 16
76192: DOUBLE
76193: EQUAL
76194: IFTRUE 76252
76196: LD_INT 17
76198: DOUBLE
76199: EQUAL
76200: IFTRUE 76252
76202: LD_INT 18
76204: DOUBLE
76205: EQUAL
76206: IFTRUE 76252
76208: LD_INT 19
76210: DOUBLE
76211: EQUAL
76212: IFTRUE 76252
76214: LD_INT 22
76216: DOUBLE
76217: EQUAL
76218: IFTRUE 76252
76220: LD_INT 20
76222: DOUBLE
76223: EQUAL
76224: IFTRUE 76252
76226: LD_INT 21
76228: DOUBLE
76229: EQUAL
76230: IFTRUE 76252
76232: LD_INT 23
76234: DOUBLE
76235: EQUAL
76236: IFTRUE 76252
76238: LD_INT 24
76240: DOUBLE
76241: EQUAL
76242: IFTRUE 76252
76244: LD_INT 25
76246: DOUBLE
76247: EQUAL
76248: IFTRUE 76252
76250: GO 76308
76252: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
76253: LD_ADDR_VAR 0 9
76257: PUSH
76258: LD_VAR 0 35
76262: PUSH
76263: LD_VAR 0 36
76267: PUSH
76268: LD_VAR 0 37
76272: PUSH
76273: LD_VAR 0 38
76277: PUSH
76278: LD_VAR 0 39
76282: PUSH
76283: LD_VAR 0 40
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: PUSH
76296: LD_VAR 0 4
76300: PUSH
76301: LD_INT 1
76303: PLUS
76304: ARRAY
76305: ST_TO_ADDR
76306: GO 76673
76308: LD_INT 6
76310: DOUBLE
76311: EQUAL
76312: IFTRUE 76364
76314: LD_INT 7
76316: DOUBLE
76317: EQUAL
76318: IFTRUE 76364
76320: LD_INT 8
76322: DOUBLE
76323: EQUAL
76324: IFTRUE 76364
76326: LD_INT 13
76328: DOUBLE
76329: EQUAL
76330: IFTRUE 76364
76332: LD_INT 12
76334: DOUBLE
76335: EQUAL
76336: IFTRUE 76364
76338: LD_INT 15
76340: DOUBLE
76341: EQUAL
76342: IFTRUE 76364
76344: LD_INT 11
76346: DOUBLE
76347: EQUAL
76348: IFTRUE 76364
76350: LD_INT 14
76352: DOUBLE
76353: EQUAL
76354: IFTRUE 76364
76356: LD_INT 10
76358: DOUBLE
76359: EQUAL
76360: IFTRUE 76364
76362: GO 76420
76364: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
76365: LD_ADDR_VAR 0 9
76369: PUSH
76370: LD_VAR 0 41
76374: PUSH
76375: LD_VAR 0 42
76379: PUSH
76380: LD_VAR 0 43
76384: PUSH
76385: LD_VAR 0 44
76389: PUSH
76390: LD_VAR 0 45
76394: PUSH
76395: LD_VAR 0 46
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: LIST
76407: PUSH
76408: LD_VAR 0 4
76412: PUSH
76413: LD_INT 1
76415: PLUS
76416: ARRAY
76417: ST_TO_ADDR
76418: GO 76673
76420: LD_INT 36
76422: DOUBLE
76423: EQUAL
76424: IFTRUE 76428
76426: GO 76484
76428: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76429: LD_ADDR_VAR 0 9
76433: PUSH
76434: LD_VAR 0 47
76438: PUSH
76439: LD_VAR 0 48
76443: PUSH
76444: LD_VAR 0 49
76448: PUSH
76449: LD_VAR 0 50
76453: PUSH
76454: LD_VAR 0 51
76458: PUSH
76459: LD_VAR 0 52
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: PUSH
76472: LD_VAR 0 4
76476: PUSH
76477: LD_INT 1
76479: PLUS
76480: ARRAY
76481: ST_TO_ADDR
76482: GO 76673
76484: LD_INT 4
76486: DOUBLE
76487: EQUAL
76488: IFTRUE 76510
76490: LD_INT 5
76492: DOUBLE
76493: EQUAL
76494: IFTRUE 76510
76496: LD_INT 34
76498: DOUBLE
76499: EQUAL
76500: IFTRUE 76510
76502: LD_INT 37
76504: DOUBLE
76505: EQUAL
76506: IFTRUE 76510
76508: GO 76566
76510: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76511: LD_ADDR_VAR 0 9
76515: PUSH
76516: LD_VAR 0 53
76520: PUSH
76521: LD_VAR 0 54
76525: PUSH
76526: LD_VAR 0 55
76530: PUSH
76531: LD_VAR 0 56
76535: PUSH
76536: LD_VAR 0 57
76540: PUSH
76541: LD_VAR 0 58
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: LIST
76550: LIST
76551: LIST
76552: LIST
76553: PUSH
76554: LD_VAR 0 4
76558: PUSH
76559: LD_INT 1
76561: PLUS
76562: ARRAY
76563: ST_TO_ADDR
76564: GO 76673
76566: LD_INT 31
76568: DOUBLE
76569: EQUAL
76570: IFTRUE 76616
76572: LD_INT 32
76574: DOUBLE
76575: EQUAL
76576: IFTRUE 76616
76578: LD_INT 33
76580: DOUBLE
76581: EQUAL
76582: IFTRUE 76616
76584: LD_INT 27
76586: DOUBLE
76587: EQUAL
76588: IFTRUE 76616
76590: LD_INT 26
76592: DOUBLE
76593: EQUAL
76594: IFTRUE 76616
76596: LD_INT 28
76598: DOUBLE
76599: EQUAL
76600: IFTRUE 76616
76602: LD_INT 29
76604: DOUBLE
76605: EQUAL
76606: IFTRUE 76616
76608: LD_INT 30
76610: DOUBLE
76611: EQUAL
76612: IFTRUE 76616
76614: GO 76672
76616: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76617: LD_ADDR_VAR 0 9
76621: PUSH
76622: LD_VAR 0 59
76626: PUSH
76627: LD_VAR 0 60
76631: PUSH
76632: LD_VAR 0 61
76636: PUSH
76637: LD_VAR 0 62
76641: PUSH
76642: LD_VAR 0 63
76646: PUSH
76647: LD_VAR 0 64
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: PUSH
76660: LD_VAR 0 4
76664: PUSH
76665: LD_INT 1
76667: PLUS
76668: ARRAY
76669: ST_TO_ADDR
76670: GO 76673
76672: POP
// temp_list2 = [ ] ;
76673: LD_ADDR_VAR 0 10
76677: PUSH
76678: EMPTY
76679: ST_TO_ADDR
// for i in temp_list do
76680: LD_ADDR_VAR 0 8
76684: PUSH
76685: LD_VAR 0 9
76689: PUSH
76690: FOR_IN
76691: IFFALSE 76743
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76693: LD_ADDR_VAR 0 10
76697: PUSH
76698: LD_VAR 0 10
76702: PUSH
76703: LD_VAR 0 8
76707: PUSH
76708: LD_INT 1
76710: ARRAY
76711: PUSH
76712: LD_VAR 0 2
76716: PLUS
76717: PUSH
76718: LD_VAR 0 8
76722: PUSH
76723: LD_INT 2
76725: ARRAY
76726: PUSH
76727: LD_VAR 0 3
76731: PLUS
76732: PUSH
76733: EMPTY
76734: LIST
76735: LIST
76736: PUSH
76737: EMPTY
76738: LIST
76739: ADD
76740: ST_TO_ADDR
76741: GO 76690
76743: POP
76744: POP
// result = temp_list2 ;
76745: LD_ADDR_VAR 0 7
76749: PUSH
76750: LD_VAR 0 10
76754: ST_TO_ADDR
// end ;
76755: LD_VAR 0 7
76759: RET
// export function EnemyInRange ( unit , dist ) ; begin
76760: LD_INT 0
76762: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76763: LD_ADDR_VAR 0 3
76767: PUSH
76768: LD_VAR 0 1
76772: PPUSH
76773: CALL_OW 255
76777: PPUSH
76778: LD_VAR 0 1
76782: PPUSH
76783: CALL_OW 250
76787: PPUSH
76788: LD_VAR 0 1
76792: PPUSH
76793: CALL_OW 251
76797: PPUSH
76798: LD_VAR 0 2
76802: PPUSH
76803: CALL 50162 0 4
76807: PUSH
76808: LD_INT 4
76810: ARRAY
76811: ST_TO_ADDR
// end ;
76812: LD_VAR 0 3
76816: RET
// export function PlayerSeeMe ( unit ) ; begin
76817: LD_INT 0
76819: PPUSH
// result := See ( your_side , unit ) ;
76820: LD_ADDR_VAR 0 2
76824: PUSH
76825: LD_OWVAR 2
76829: PPUSH
76830: LD_VAR 0 1
76834: PPUSH
76835: CALL_OW 292
76839: ST_TO_ADDR
// end ;
76840: LD_VAR 0 2
76844: RET
// export function ReverseDir ( unit ) ; begin
76845: LD_INT 0
76847: PPUSH
// if not unit then
76848: LD_VAR 0 1
76852: NOT
76853: IFFALSE 76857
// exit ;
76855: GO 76880
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76857: LD_ADDR_VAR 0 2
76861: PUSH
76862: LD_VAR 0 1
76866: PPUSH
76867: CALL_OW 254
76871: PUSH
76872: LD_INT 3
76874: PLUS
76875: PUSH
76876: LD_INT 6
76878: MOD
76879: ST_TO_ADDR
// end ;
76880: LD_VAR 0 2
76884: RET
// export function ReverseArray ( array ) ; var i ; begin
76885: LD_INT 0
76887: PPUSH
76888: PPUSH
// if not array then
76889: LD_VAR 0 1
76893: NOT
76894: IFFALSE 76898
// exit ;
76896: GO 76953
// result := [ ] ;
76898: LD_ADDR_VAR 0 2
76902: PUSH
76903: EMPTY
76904: ST_TO_ADDR
// for i := array downto 1 do
76905: LD_ADDR_VAR 0 3
76909: PUSH
76910: DOUBLE
76911: LD_VAR 0 1
76915: INC
76916: ST_TO_ADDR
76917: LD_INT 1
76919: PUSH
76920: FOR_DOWNTO
76921: IFFALSE 76951
// result := Join ( result , array [ i ] ) ;
76923: LD_ADDR_VAR 0 2
76927: PUSH
76928: LD_VAR 0 2
76932: PPUSH
76933: LD_VAR 0 1
76937: PUSH
76938: LD_VAR 0 3
76942: ARRAY
76943: PPUSH
76944: CALL 81597 0 2
76948: ST_TO_ADDR
76949: GO 76920
76951: POP
76952: POP
// end ;
76953: LD_VAR 0 2
76957: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76958: LD_INT 0
76960: PPUSH
76961: PPUSH
76962: PPUSH
76963: PPUSH
76964: PPUSH
76965: PPUSH
// if not unit or not hexes then
76966: LD_VAR 0 1
76970: NOT
76971: PUSH
76972: LD_VAR 0 2
76976: NOT
76977: OR
76978: IFFALSE 76982
// exit ;
76980: GO 77105
// dist := 9999 ;
76982: LD_ADDR_VAR 0 5
76986: PUSH
76987: LD_INT 9999
76989: ST_TO_ADDR
// for i = 1 to hexes do
76990: LD_ADDR_VAR 0 4
76994: PUSH
76995: DOUBLE
76996: LD_INT 1
76998: DEC
76999: ST_TO_ADDR
77000: LD_VAR 0 2
77004: PUSH
77005: FOR_TO
77006: IFFALSE 77093
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77008: LD_ADDR_VAR 0 6
77012: PUSH
77013: LD_VAR 0 1
77017: PPUSH
77018: LD_VAR 0 2
77022: PUSH
77023: LD_VAR 0 4
77027: ARRAY
77028: PUSH
77029: LD_INT 1
77031: ARRAY
77032: PPUSH
77033: LD_VAR 0 2
77037: PUSH
77038: LD_VAR 0 4
77042: ARRAY
77043: PUSH
77044: LD_INT 2
77046: ARRAY
77047: PPUSH
77048: CALL_OW 297
77052: ST_TO_ADDR
// if tdist < dist then
77053: LD_VAR 0 6
77057: PUSH
77058: LD_VAR 0 5
77062: LESS
77063: IFFALSE 77091
// begin hex := hexes [ i ] ;
77065: LD_ADDR_VAR 0 8
77069: PUSH
77070: LD_VAR 0 2
77074: PUSH
77075: LD_VAR 0 4
77079: ARRAY
77080: ST_TO_ADDR
// dist := tdist ;
77081: LD_ADDR_VAR 0 5
77085: PUSH
77086: LD_VAR 0 6
77090: ST_TO_ADDR
// end ; end ;
77091: GO 77005
77093: POP
77094: POP
// result := hex ;
77095: LD_ADDR_VAR 0 3
77099: PUSH
77100: LD_VAR 0 8
77104: ST_TO_ADDR
// end ;
77105: LD_VAR 0 3
77109: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
77110: LD_INT 0
77112: PPUSH
77113: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
77114: LD_VAR 0 1
77118: NOT
77119: PUSH
77120: LD_VAR 0 1
77124: PUSH
77125: LD_INT 21
77127: PUSH
77128: LD_INT 2
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PUSH
77135: LD_INT 23
77137: PUSH
77138: LD_INT 2
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PPUSH
77149: CALL_OW 69
77153: IN
77154: NOT
77155: OR
77156: IFFALSE 77160
// exit ;
77158: GO 77207
// for i = 1 to 3 do
77160: LD_ADDR_VAR 0 3
77164: PUSH
77165: DOUBLE
77166: LD_INT 1
77168: DEC
77169: ST_TO_ADDR
77170: LD_INT 3
77172: PUSH
77173: FOR_TO
77174: IFFALSE 77205
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77176: LD_VAR 0 1
77180: PPUSH
77181: CALL_OW 250
77185: PPUSH
77186: LD_VAR 0 1
77190: PPUSH
77191: CALL_OW 251
77195: PPUSH
77196: LD_INT 1
77198: PPUSH
77199: CALL_OW 453
77203: GO 77173
77205: POP
77206: POP
// end ;
77207: LD_VAR 0 2
77211: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77212: LD_INT 0
77214: PPUSH
77215: PPUSH
77216: PPUSH
77217: PPUSH
77218: PPUSH
77219: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77220: LD_VAR 0 1
77224: NOT
77225: PUSH
77226: LD_VAR 0 2
77230: NOT
77231: OR
77232: PUSH
77233: LD_VAR 0 1
77237: PPUSH
77238: CALL_OW 314
77242: OR
77243: IFFALSE 77247
// exit ;
77245: GO 77714
// if GetLives ( i ) < 250 then
77247: LD_VAR 0 4
77251: PPUSH
77252: CALL_OW 256
77256: PUSH
77257: LD_INT 250
77259: LESS
77260: IFFALSE 77273
// begin ComAutodestruct ( i ) ;
77262: LD_VAR 0 4
77266: PPUSH
77267: CALL 77110 0 1
// exit ;
77271: GO 77714
// end ; x := GetX ( enemy_unit ) ;
77273: LD_ADDR_VAR 0 7
77277: PUSH
77278: LD_VAR 0 2
77282: PPUSH
77283: CALL_OW 250
77287: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77288: LD_ADDR_VAR 0 8
77292: PUSH
77293: LD_VAR 0 2
77297: PPUSH
77298: CALL_OW 251
77302: ST_TO_ADDR
// if not x or not y then
77303: LD_VAR 0 7
77307: NOT
77308: PUSH
77309: LD_VAR 0 8
77313: NOT
77314: OR
77315: IFFALSE 77319
// exit ;
77317: GO 77714
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
77319: LD_ADDR_VAR 0 6
77323: PUSH
77324: LD_VAR 0 7
77328: PPUSH
77329: LD_INT 0
77331: PPUSH
77332: LD_INT 4
77334: PPUSH
77335: CALL_OW 272
77339: PUSH
77340: LD_VAR 0 8
77344: PPUSH
77345: LD_INT 0
77347: PPUSH
77348: LD_INT 4
77350: PPUSH
77351: CALL_OW 273
77355: PUSH
77356: EMPTY
77357: LIST
77358: LIST
77359: PUSH
77360: LD_VAR 0 7
77364: PPUSH
77365: LD_INT 1
77367: PPUSH
77368: LD_INT 4
77370: PPUSH
77371: CALL_OW 272
77375: PUSH
77376: LD_VAR 0 8
77380: PPUSH
77381: LD_INT 1
77383: PPUSH
77384: LD_INT 4
77386: PPUSH
77387: CALL_OW 273
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: PUSH
77396: LD_VAR 0 7
77400: PPUSH
77401: LD_INT 2
77403: PPUSH
77404: LD_INT 4
77406: PPUSH
77407: CALL_OW 272
77411: PUSH
77412: LD_VAR 0 8
77416: PPUSH
77417: LD_INT 2
77419: PPUSH
77420: LD_INT 4
77422: PPUSH
77423: CALL_OW 273
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: PUSH
77432: LD_VAR 0 7
77436: PPUSH
77437: LD_INT 3
77439: PPUSH
77440: LD_INT 4
77442: PPUSH
77443: CALL_OW 272
77447: PUSH
77448: LD_VAR 0 8
77452: PPUSH
77453: LD_INT 3
77455: PPUSH
77456: LD_INT 4
77458: PPUSH
77459: CALL_OW 273
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: PUSH
77468: LD_VAR 0 7
77472: PPUSH
77473: LD_INT 4
77475: PPUSH
77476: LD_INT 4
77478: PPUSH
77479: CALL_OW 272
77483: PUSH
77484: LD_VAR 0 8
77488: PPUSH
77489: LD_INT 4
77491: PPUSH
77492: LD_INT 4
77494: PPUSH
77495: CALL_OW 273
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: PUSH
77504: LD_VAR 0 7
77508: PPUSH
77509: LD_INT 5
77511: PPUSH
77512: LD_INT 4
77514: PPUSH
77515: CALL_OW 272
77519: PUSH
77520: LD_VAR 0 8
77524: PPUSH
77525: LD_INT 5
77527: PPUSH
77528: LD_INT 4
77530: PPUSH
77531: CALL_OW 273
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PUSH
77540: EMPTY
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: ST_TO_ADDR
// for i = tmp downto 1 do
77548: LD_ADDR_VAR 0 4
77552: PUSH
77553: DOUBLE
77554: LD_VAR 0 6
77558: INC
77559: ST_TO_ADDR
77560: LD_INT 1
77562: PUSH
77563: FOR_DOWNTO
77564: IFFALSE 77665
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77566: LD_VAR 0 6
77570: PUSH
77571: LD_VAR 0 4
77575: ARRAY
77576: PUSH
77577: LD_INT 1
77579: ARRAY
77580: PPUSH
77581: LD_VAR 0 6
77585: PUSH
77586: LD_VAR 0 4
77590: ARRAY
77591: PUSH
77592: LD_INT 2
77594: ARRAY
77595: PPUSH
77596: CALL_OW 488
77600: NOT
77601: PUSH
77602: LD_VAR 0 6
77606: PUSH
77607: LD_VAR 0 4
77611: ARRAY
77612: PUSH
77613: LD_INT 1
77615: ARRAY
77616: PPUSH
77617: LD_VAR 0 6
77621: PUSH
77622: LD_VAR 0 4
77626: ARRAY
77627: PUSH
77628: LD_INT 2
77630: ARRAY
77631: PPUSH
77632: CALL_OW 428
77636: PUSH
77637: LD_INT 0
77639: NONEQUAL
77640: OR
77641: IFFALSE 77663
// tmp := Delete ( tmp , i ) ;
77643: LD_ADDR_VAR 0 6
77647: PUSH
77648: LD_VAR 0 6
77652: PPUSH
77653: LD_VAR 0 4
77657: PPUSH
77658: CALL_OW 3
77662: ST_TO_ADDR
77663: GO 77563
77665: POP
77666: POP
// j := GetClosestHex ( unit , tmp ) ;
77667: LD_ADDR_VAR 0 5
77671: PUSH
77672: LD_VAR 0 1
77676: PPUSH
77677: LD_VAR 0 6
77681: PPUSH
77682: CALL 76958 0 2
77686: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77687: LD_VAR 0 1
77691: PPUSH
77692: LD_VAR 0 5
77696: PUSH
77697: LD_INT 1
77699: ARRAY
77700: PPUSH
77701: LD_VAR 0 5
77705: PUSH
77706: LD_INT 2
77708: ARRAY
77709: PPUSH
77710: CALL_OW 111
// end ;
77714: LD_VAR 0 3
77718: RET
// export function PrepareApemanSoldier ( ) ; begin
77719: LD_INT 0
77721: PPUSH
// uc_nation := 0 ;
77722: LD_ADDR_OWVAR 21
77726: PUSH
77727: LD_INT 0
77729: ST_TO_ADDR
// hc_sex := sex_male ;
77730: LD_ADDR_OWVAR 27
77734: PUSH
77735: LD_INT 1
77737: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77738: LD_ADDR_OWVAR 28
77742: PUSH
77743: LD_INT 15
77745: ST_TO_ADDR
// hc_gallery :=  ;
77746: LD_ADDR_OWVAR 33
77750: PUSH
77751: LD_STRING 
77753: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77754: LD_ADDR_OWVAR 31
77758: PUSH
77759: LD_INT 0
77761: PPUSH
77762: LD_INT 3
77764: PPUSH
77765: CALL_OW 12
77769: PUSH
77770: LD_INT 0
77772: PPUSH
77773: LD_INT 3
77775: PPUSH
77776: CALL_OW 12
77780: PUSH
77781: LD_INT 0
77783: PUSH
77784: LD_INT 0
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: LIST
77791: LIST
77792: ST_TO_ADDR
// end ;
77793: LD_VAR 0 1
77797: RET
// export function PrepareApemanEngineer ( ) ; begin
77798: LD_INT 0
77800: PPUSH
// uc_nation := 0 ;
77801: LD_ADDR_OWVAR 21
77805: PUSH
77806: LD_INT 0
77808: ST_TO_ADDR
// hc_sex := sex_male ;
77809: LD_ADDR_OWVAR 27
77813: PUSH
77814: LD_INT 1
77816: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77817: LD_ADDR_OWVAR 28
77821: PUSH
77822: LD_INT 16
77824: ST_TO_ADDR
// hc_gallery :=  ;
77825: LD_ADDR_OWVAR 33
77829: PUSH
77830: LD_STRING 
77832: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77833: LD_ADDR_OWVAR 31
77837: PUSH
77838: LD_INT 0
77840: PPUSH
77841: LD_INT 3
77843: PPUSH
77844: CALL_OW 12
77848: PUSH
77849: LD_INT 0
77851: PPUSH
77852: LD_INT 3
77854: PPUSH
77855: CALL_OW 12
77859: PUSH
77860: LD_INT 0
77862: PUSH
77863: LD_INT 0
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: LIST
77870: LIST
77871: ST_TO_ADDR
// end ;
77872: LD_VAR 0 1
77876: RET
// export function PrepareApeman ( agressivity ) ; begin
77877: LD_INT 0
77879: PPUSH
// uc_side := 0 ;
77880: LD_ADDR_OWVAR 20
77884: PUSH
77885: LD_INT 0
77887: ST_TO_ADDR
// uc_nation := 0 ;
77888: LD_ADDR_OWVAR 21
77892: PUSH
77893: LD_INT 0
77895: ST_TO_ADDR
// hc_sex := sex_male ;
77896: LD_ADDR_OWVAR 27
77900: PUSH
77901: LD_INT 1
77903: ST_TO_ADDR
// hc_class := class_apeman ;
77904: LD_ADDR_OWVAR 28
77908: PUSH
77909: LD_INT 12
77911: ST_TO_ADDR
// hc_gallery :=  ;
77912: LD_ADDR_OWVAR 33
77916: PUSH
77917: LD_STRING 
77919: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77920: LD_ADDR_OWVAR 35
77924: PUSH
77925: LD_VAR 0 1
77929: NEG
77930: PPUSH
77931: LD_VAR 0 1
77935: PPUSH
77936: CALL_OW 12
77940: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77941: LD_ADDR_OWVAR 31
77945: PUSH
77946: LD_INT 0
77948: PPUSH
77949: LD_INT 3
77951: PPUSH
77952: CALL_OW 12
77956: PUSH
77957: LD_INT 0
77959: PPUSH
77960: LD_INT 3
77962: PPUSH
77963: CALL_OW 12
77967: PUSH
77968: LD_INT 0
77970: PUSH
77971: LD_INT 0
77973: PUSH
77974: EMPTY
77975: LIST
77976: LIST
77977: LIST
77978: LIST
77979: ST_TO_ADDR
// end ;
77980: LD_VAR 0 2
77984: RET
// export function PrepareTiger ( agressivity ) ; begin
77985: LD_INT 0
77987: PPUSH
// uc_side := 0 ;
77988: LD_ADDR_OWVAR 20
77992: PUSH
77993: LD_INT 0
77995: ST_TO_ADDR
// uc_nation := 0 ;
77996: LD_ADDR_OWVAR 21
78000: PUSH
78001: LD_INT 0
78003: ST_TO_ADDR
// hc_class := class_tiger ;
78004: LD_ADDR_OWVAR 28
78008: PUSH
78009: LD_INT 14
78011: ST_TO_ADDR
// hc_gallery :=  ;
78012: LD_ADDR_OWVAR 33
78016: PUSH
78017: LD_STRING 
78019: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
78020: LD_ADDR_OWVAR 35
78024: PUSH
78025: LD_VAR 0 1
78029: NEG
78030: PPUSH
78031: LD_VAR 0 1
78035: PPUSH
78036: CALL_OW 12
78040: ST_TO_ADDR
// end ;
78041: LD_VAR 0 2
78045: RET
// export function PrepareEnchidna ( ) ; begin
78046: LD_INT 0
78048: PPUSH
// uc_side := 0 ;
78049: LD_ADDR_OWVAR 20
78053: PUSH
78054: LD_INT 0
78056: ST_TO_ADDR
// uc_nation := 0 ;
78057: LD_ADDR_OWVAR 21
78061: PUSH
78062: LD_INT 0
78064: ST_TO_ADDR
// hc_class := class_baggie ;
78065: LD_ADDR_OWVAR 28
78069: PUSH
78070: LD_INT 13
78072: ST_TO_ADDR
// hc_gallery :=  ;
78073: LD_ADDR_OWVAR 33
78077: PUSH
78078: LD_STRING 
78080: ST_TO_ADDR
// end ;
78081: LD_VAR 0 1
78085: RET
// export function PrepareFrog ( ) ; begin
78086: LD_INT 0
78088: PPUSH
// uc_side := 0 ;
78089: LD_ADDR_OWVAR 20
78093: PUSH
78094: LD_INT 0
78096: ST_TO_ADDR
// uc_nation := 0 ;
78097: LD_ADDR_OWVAR 21
78101: PUSH
78102: LD_INT 0
78104: ST_TO_ADDR
// hc_class := class_frog ;
78105: LD_ADDR_OWVAR 28
78109: PUSH
78110: LD_INT 19
78112: ST_TO_ADDR
// hc_gallery :=  ;
78113: LD_ADDR_OWVAR 33
78117: PUSH
78118: LD_STRING 
78120: ST_TO_ADDR
// end ;
78121: LD_VAR 0 1
78125: RET
// export function PrepareFish ( ) ; begin
78126: LD_INT 0
78128: PPUSH
// uc_side := 0 ;
78129: LD_ADDR_OWVAR 20
78133: PUSH
78134: LD_INT 0
78136: ST_TO_ADDR
// uc_nation := 0 ;
78137: LD_ADDR_OWVAR 21
78141: PUSH
78142: LD_INT 0
78144: ST_TO_ADDR
// hc_class := class_fish ;
78145: LD_ADDR_OWVAR 28
78149: PUSH
78150: LD_INT 20
78152: ST_TO_ADDR
// hc_gallery :=  ;
78153: LD_ADDR_OWVAR 33
78157: PUSH
78158: LD_STRING 
78160: ST_TO_ADDR
// end ;
78161: LD_VAR 0 1
78165: RET
// export function PrepareBird ( ) ; begin
78166: LD_INT 0
78168: PPUSH
// uc_side := 0 ;
78169: LD_ADDR_OWVAR 20
78173: PUSH
78174: LD_INT 0
78176: ST_TO_ADDR
// uc_nation := 0 ;
78177: LD_ADDR_OWVAR 21
78181: PUSH
78182: LD_INT 0
78184: ST_TO_ADDR
// hc_class := class_phororhacos ;
78185: LD_ADDR_OWVAR 28
78189: PUSH
78190: LD_INT 18
78192: ST_TO_ADDR
// hc_gallery :=  ;
78193: LD_ADDR_OWVAR 33
78197: PUSH
78198: LD_STRING 
78200: ST_TO_ADDR
// end ;
78201: LD_VAR 0 1
78205: RET
// export function PrepareHorse ( ) ; begin
78206: LD_INT 0
78208: PPUSH
// uc_side := 0 ;
78209: LD_ADDR_OWVAR 20
78213: PUSH
78214: LD_INT 0
78216: ST_TO_ADDR
// uc_nation := 0 ;
78217: LD_ADDR_OWVAR 21
78221: PUSH
78222: LD_INT 0
78224: ST_TO_ADDR
// hc_class := class_horse ;
78225: LD_ADDR_OWVAR 28
78229: PUSH
78230: LD_INT 21
78232: ST_TO_ADDR
// hc_gallery :=  ;
78233: LD_ADDR_OWVAR 33
78237: PUSH
78238: LD_STRING 
78240: ST_TO_ADDR
// end ;
78241: LD_VAR 0 1
78245: RET
// export function PrepareMastodont ( ) ; begin
78246: LD_INT 0
78248: PPUSH
// uc_side := 0 ;
78249: LD_ADDR_OWVAR 20
78253: PUSH
78254: LD_INT 0
78256: ST_TO_ADDR
// uc_nation := 0 ;
78257: LD_ADDR_OWVAR 21
78261: PUSH
78262: LD_INT 0
78264: ST_TO_ADDR
// vc_chassis := class_mastodont ;
78265: LD_ADDR_OWVAR 37
78269: PUSH
78270: LD_INT 31
78272: ST_TO_ADDR
// vc_control := control_rider ;
78273: LD_ADDR_OWVAR 38
78277: PUSH
78278: LD_INT 4
78280: ST_TO_ADDR
// end ;
78281: LD_VAR 0 1
78285: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78286: LD_INT 0
78288: PPUSH
78289: PPUSH
78290: PPUSH
// uc_side = 0 ;
78291: LD_ADDR_OWVAR 20
78295: PUSH
78296: LD_INT 0
78298: ST_TO_ADDR
// uc_nation = 0 ;
78299: LD_ADDR_OWVAR 21
78303: PUSH
78304: LD_INT 0
78306: ST_TO_ADDR
// InitHc_All ( ) ;
78307: CALL_OW 584
// InitVc ;
78311: CALL_OW 20
// if mastodonts then
78315: LD_VAR 0 6
78319: IFFALSE 78386
// for i = 1 to mastodonts do
78321: LD_ADDR_VAR 0 11
78325: PUSH
78326: DOUBLE
78327: LD_INT 1
78329: DEC
78330: ST_TO_ADDR
78331: LD_VAR 0 6
78335: PUSH
78336: FOR_TO
78337: IFFALSE 78384
// begin vc_chassis := 31 ;
78339: LD_ADDR_OWVAR 37
78343: PUSH
78344: LD_INT 31
78346: ST_TO_ADDR
// vc_control := control_rider ;
78347: LD_ADDR_OWVAR 38
78351: PUSH
78352: LD_INT 4
78354: ST_TO_ADDR
// animal := CreateVehicle ;
78355: LD_ADDR_VAR 0 12
78359: PUSH
78360: CALL_OW 45
78364: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78365: LD_VAR 0 12
78369: PPUSH
78370: LD_VAR 0 8
78374: PPUSH
78375: LD_INT 0
78377: PPUSH
78378: CALL 80514 0 3
// end ;
78382: GO 78336
78384: POP
78385: POP
// if horses then
78386: LD_VAR 0 5
78390: IFFALSE 78457
// for i = 1 to horses do
78392: LD_ADDR_VAR 0 11
78396: PUSH
78397: DOUBLE
78398: LD_INT 1
78400: DEC
78401: ST_TO_ADDR
78402: LD_VAR 0 5
78406: PUSH
78407: FOR_TO
78408: IFFALSE 78455
// begin hc_class := 21 ;
78410: LD_ADDR_OWVAR 28
78414: PUSH
78415: LD_INT 21
78417: ST_TO_ADDR
// hc_gallery :=  ;
78418: LD_ADDR_OWVAR 33
78422: PUSH
78423: LD_STRING 
78425: ST_TO_ADDR
// animal := CreateHuman ;
78426: LD_ADDR_VAR 0 12
78430: PUSH
78431: CALL_OW 44
78435: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78436: LD_VAR 0 12
78440: PPUSH
78441: LD_VAR 0 8
78445: PPUSH
78446: LD_INT 0
78448: PPUSH
78449: CALL 80514 0 3
// end ;
78453: GO 78407
78455: POP
78456: POP
// if birds then
78457: LD_VAR 0 1
78461: IFFALSE 78528
// for i = 1 to birds do
78463: LD_ADDR_VAR 0 11
78467: PUSH
78468: DOUBLE
78469: LD_INT 1
78471: DEC
78472: ST_TO_ADDR
78473: LD_VAR 0 1
78477: PUSH
78478: FOR_TO
78479: IFFALSE 78526
// begin hc_class = 18 ;
78481: LD_ADDR_OWVAR 28
78485: PUSH
78486: LD_INT 18
78488: ST_TO_ADDR
// hc_gallery =  ;
78489: LD_ADDR_OWVAR 33
78493: PUSH
78494: LD_STRING 
78496: ST_TO_ADDR
// animal := CreateHuman ;
78497: LD_ADDR_VAR 0 12
78501: PUSH
78502: CALL_OW 44
78506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78507: LD_VAR 0 12
78511: PPUSH
78512: LD_VAR 0 8
78516: PPUSH
78517: LD_INT 0
78519: PPUSH
78520: CALL 80514 0 3
// end ;
78524: GO 78478
78526: POP
78527: POP
// if tigers then
78528: LD_VAR 0 2
78532: IFFALSE 78616
// for i = 1 to tigers do
78534: LD_ADDR_VAR 0 11
78538: PUSH
78539: DOUBLE
78540: LD_INT 1
78542: DEC
78543: ST_TO_ADDR
78544: LD_VAR 0 2
78548: PUSH
78549: FOR_TO
78550: IFFALSE 78614
// begin hc_class = class_tiger ;
78552: LD_ADDR_OWVAR 28
78556: PUSH
78557: LD_INT 14
78559: ST_TO_ADDR
// hc_gallery =  ;
78560: LD_ADDR_OWVAR 33
78564: PUSH
78565: LD_STRING 
78567: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78568: LD_ADDR_OWVAR 35
78572: PUSH
78573: LD_INT 7
78575: NEG
78576: PPUSH
78577: LD_INT 7
78579: PPUSH
78580: CALL_OW 12
78584: ST_TO_ADDR
// animal := CreateHuman ;
78585: LD_ADDR_VAR 0 12
78589: PUSH
78590: CALL_OW 44
78594: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78595: LD_VAR 0 12
78599: PPUSH
78600: LD_VAR 0 8
78604: PPUSH
78605: LD_INT 0
78607: PPUSH
78608: CALL 80514 0 3
// end ;
78612: GO 78549
78614: POP
78615: POP
// if apemans then
78616: LD_VAR 0 3
78620: IFFALSE 78743
// for i = 1 to apemans do
78622: LD_ADDR_VAR 0 11
78626: PUSH
78627: DOUBLE
78628: LD_INT 1
78630: DEC
78631: ST_TO_ADDR
78632: LD_VAR 0 3
78636: PUSH
78637: FOR_TO
78638: IFFALSE 78741
// begin hc_class = class_apeman ;
78640: LD_ADDR_OWVAR 28
78644: PUSH
78645: LD_INT 12
78647: ST_TO_ADDR
// hc_gallery =  ;
78648: LD_ADDR_OWVAR 33
78652: PUSH
78653: LD_STRING 
78655: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78656: LD_ADDR_OWVAR 35
78660: PUSH
78661: LD_INT 2
78663: NEG
78664: PPUSH
78665: LD_INT 2
78667: PPUSH
78668: CALL_OW 12
78672: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78673: LD_ADDR_OWVAR 31
78677: PUSH
78678: LD_INT 1
78680: PPUSH
78681: LD_INT 3
78683: PPUSH
78684: CALL_OW 12
78688: PUSH
78689: LD_INT 1
78691: PPUSH
78692: LD_INT 3
78694: PPUSH
78695: CALL_OW 12
78699: PUSH
78700: LD_INT 0
78702: PUSH
78703: LD_INT 0
78705: PUSH
78706: EMPTY
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: ST_TO_ADDR
// animal := CreateHuman ;
78712: LD_ADDR_VAR 0 12
78716: PUSH
78717: CALL_OW 44
78721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78722: LD_VAR 0 12
78726: PPUSH
78727: LD_VAR 0 8
78731: PPUSH
78732: LD_INT 0
78734: PPUSH
78735: CALL 80514 0 3
// end ;
78739: GO 78637
78741: POP
78742: POP
// if enchidnas then
78743: LD_VAR 0 4
78747: IFFALSE 78814
// for i = 1 to enchidnas do
78749: LD_ADDR_VAR 0 11
78753: PUSH
78754: DOUBLE
78755: LD_INT 1
78757: DEC
78758: ST_TO_ADDR
78759: LD_VAR 0 4
78763: PUSH
78764: FOR_TO
78765: IFFALSE 78812
// begin hc_class = 13 ;
78767: LD_ADDR_OWVAR 28
78771: PUSH
78772: LD_INT 13
78774: ST_TO_ADDR
// hc_gallery =  ;
78775: LD_ADDR_OWVAR 33
78779: PUSH
78780: LD_STRING 
78782: ST_TO_ADDR
// animal := CreateHuman ;
78783: LD_ADDR_VAR 0 12
78787: PUSH
78788: CALL_OW 44
78792: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78793: LD_VAR 0 12
78797: PPUSH
78798: LD_VAR 0 8
78802: PPUSH
78803: LD_INT 0
78805: PPUSH
78806: CALL 80514 0 3
// end ;
78810: GO 78764
78812: POP
78813: POP
// if fishes then
78814: LD_VAR 0 7
78818: IFFALSE 78885
// for i = 1 to fishes do
78820: LD_ADDR_VAR 0 11
78824: PUSH
78825: DOUBLE
78826: LD_INT 1
78828: DEC
78829: ST_TO_ADDR
78830: LD_VAR 0 7
78834: PUSH
78835: FOR_TO
78836: IFFALSE 78883
// begin hc_class = 20 ;
78838: LD_ADDR_OWVAR 28
78842: PUSH
78843: LD_INT 20
78845: ST_TO_ADDR
// hc_gallery =  ;
78846: LD_ADDR_OWVAR 33
78850: PUSH
78851: LD_STRING 
78853: ST_TO_ADDR
// animal := CreateHuman ;
78854: LD_ADDR_VAR 0 12
78858: PUSH
78859: CALL_OW 44
78863: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78864: LD_VAR 0 12
78868: PPUSH
78869: LD_VAR 0 9
78873: PPUSH
78874: LD_INT 0
78876: PPUSH
78877: CALL 80514 0 3
// end ;
78881: GO 78835
78883: POP
78884: POP
// end ;
78885: LD_VAR 0 10
78889: RET
// export function WantHeal ( sci , unit ) ; begin
78890: LD_INT 0
78892: PPUSH
// if GetTaskList ( sci ) > 0 then
78893: LD_VAR 0 1
78897: PPUSH
78898: CALL_OW 437
78902: PUSH
78903: LD_INT 0
78905: GREATER
78906: IFFALSE 78976
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78908: LD_VAR 0 1
78912: PPUSH
78913: CALL_OW 437
78917: PUSH
78918: LD_INT 1
78920: ARRAY
78921: PUSH
78922: LD_INT 1
78924: ARRAY
78925: PUSH
78926: LD_STRING l
78928: EQUAL
78929: PUSH
78930: LD_VAR 0 1
78934: PPUSH
78935: CALL_OW 437
78939: PUSH
78940: LD_INT 1
78942: ARRAY
78943: PUSH
78944: LD_INT 4
78946: ARRAY
78947: PUSH
78948: LD_VAR 0 2
78952: EQUAL
78953: AND
78954: IFFALSE 78966
// result := true else
78956: LD_ADDR_VAR 0 3
78960: PUSH
78961: LD_INT 1
78963: ST_TO_ADDR
78964: GO 78974
// result := false ;
78966: LD_ADDR_VAR 0 3
78970: PUSH
78971: LD_INT 0
78973: ST_TO_ADDR
// end else
78974: GO 78984
// result := false ;
78976: LD_ADDR_VAR 0 3
78980: PUSH
78981: LD_INT 0
78983: ST_TO_ADDR
// end ;
78984: LD_VAR 0 3
78988: RET
// export function HealTarget ( sci ) ; begin
78989: LD_INT 0
78991: PPUSH
// if not sci then
78992: LD_VAR 0 1
78996: NOT
78997: IFFALSE 79001
// exit ;
78999: GO 79066
// result := 0 ;
79001: LD_ADDR_VAR 0 2
79005: PUSH
79006: LD_INT 0
79008: ST_TO_ADDR
// if GetTaskList ( sci ) then
79009: LD_VAR 0 1
79013: PPUSH
79014: CALL_OW 437
79018: IFFALSE 79066
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
79020: LD_VAR 0 1
79024: PPUSH
79025: CALL_OW 437
79029: PUSH
79030: LD_INT 1
79032: ARRAY
79033: PUSH
79034: LD_INT 1
79036: ARRAY
79037: PUSH
79038: LD_STRING l
79040: EQUAL
79041: IFFALSE 79066
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
79043: LD_ADDR_VAR 0 2
79047: PUSH
79048: LD_VAR 0 1
79052: PPUSH
79053: CALL_OW 437
79057: PUSH
79058: LD_INT 1
79060: ARRAY
79061: PUSH
79062: LD_INT 4
79064: ARRAY
79065: ST_TO_ADDR
// end ;
79066: LD_VAR 0 2
79070: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
79071: LD_INT 0
79073: PPUSH
79074: PPUSH
79075: PPUSH
79076: PPUSH
// if not base_units then
79077: LD_VAR 0 1
79081: NOT
79082: IFFALSE 79086
// exit ;
79084: GO 79173
// result := false ;
79086: LD_ADDR_VAR 0 2
79090: PUSH
79091: LD_INT 0
79093: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
79094: LD_ADDR_VAR 0 5
79098: PUSH
79099: LD_VAR 0 1
79103: PPUSH
79104: LD_INT 21
79106: PUSH
79107: LD_INT 3
79109: PUSH
79110: EMPTY
79111: LIST
79112: LIST
79113: PPUSH
79114: CALL_OW 72
79118: ST_TO_ADDR
// if not tmp then
79119: LD_VAR 0 5
79123: NOT
79124: IFFALSE 79128
// exit ;
79126: GO 79173
// for i in tmp do
79128: LD_ADDR_VAR 0 3
79132: PUSH
79133: LD_VAR 0 5
79137: PUSH
79138: FOR_IN
79139: IFFALSE 79171
// begin result := EnemyInRange ( i , 22 ) ;
79141: LD_ADDR_VAR 0 2
79145: PUSH
79146: LD_VAR 0 3
79150: PPUSH
79151: LD_INT 22
79153: PPUSH
79154: CALL 76760 0 2
79158: ST_TO_ADDR
// if result then
79159: LD_VAR 0 2
79163: IFFALSE 79169
// exit ;
79165: POP
79166: POP
79167: GO 79173
// end ;
79169: GO 79138
79171: POP
79172: POP
// end ;
79173: LD_VAR 0 2
79177: RET
// export function FilterByTag ( units , tag ) ; begin
79178: LD_INT 0
79180: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
79181: LD_ADDR_VAR 0 3
79185: PUSH
79186: LD_VAR 0 1
79190: PPUSH
79191: LD_INT 120
79193: PUSH
79194: LD_VAR 0 2
79198: PUSH
79199: EMPTY
79200: LIST
79201: LIST
79202: PPUSH
79203: CALL_OW 72
79207: ST_TO_ADDR
// end ;
79208: LD_VAR 0 3
79212: RET
// export function IsDriver ( un ) ; begin
79213: LD_INT 0
79215: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
79216: LD_ADDR_VAR 0 2
79220: PUSH
79221: LD_VAR 0 1
79225: PUSH
79226: LD_INT 55
79228: PUSH
79229: EMPTY
79230: LIST
79231: PPUSH
79232: CALL_OW 69
79236: IN
79237: ST_TO_ADDR
// end ;
79238: LD_VAR 0 2
79242: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
79243: LD_INT 0
79245: PPUSH
79246: PPUSH
// list := [ ] ;
79247: LD_ADDR_VAR 0 5
79251: PUSH
79252: EMPTY
79253: ST_TO_ADDR
// case d of 0 :
79254: LD_VAR 0 3
79258: PUSH
79259: LD_INT 0
79261: DOUBLE
79262: EQUAL
79263: IFTRUE 79267
79265: GO 79400
79267: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
79268: LD_ADDR_VAR 0 5
79272: PUSH
79273: LD_VAR 0 1
79277: PUSH
79278: LD_INT 4
79280: MINUS
79281: PUSH
79282: LD_VAR 0 2
79286: PUSH
79287: LD_INT 4
79289: MINUS
79290: PUSH
79291: LD_INT 2
79293: PUSH
79294: EMPTY
79295: LIST
79296: LIST
79297: LIST
79298: PUSH
79299: LD_VAR 0 1
79303: PUSH
79304: LD_INT 3
79306: MINUS
79307: PUSH
79308: LD_VAR 0 2
79312: PUSH
79313: LD_INT 1
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: LIST
79320: PUSH
79321: LD_VAR 0 1
79325: PUSH
79326: LD_INT 4
79328: PLUS
79329: PUSH
79330: LD_VAR 0 2
79334: PUSH
79335: LD_INT 4
79337: PUSH
79338: EMPTY
79339: LIST
79340: LIST
79341: LIST
79342: PUSH
79343: LD_VAR 0 1
79347: PUSH
79348: LD_INT 3
79350: PLUS
79351: PUSH
79352: LD_VAR 0 2
79356: PUSH
79357: LD_INT 3
79359: PLUS
79360: PUSH
79361: LD_INT 5
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: LIST
79368: PUSH
79369: LD_VAR 0 1
79373: PUSH
79374: LD_VAR 0 2
79378: PUSH
79379: LD_INT 4
79381: PLUS
79382: PUSH
79383: LD_INT 0
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: LIST
79390: PUSH
79391: EMPTY
79392: LIST
79393: LIST
79394: LIST
79395: LIST
79396: LIST
79397: ST_TO_ADDR
// end ; 1 :
79398: GO 80098
79400: LD_INT 1
79402: DOUBLE
79403: EQUAL
79404: IFTRUE 79408
79406: GO 79541
79408: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79409: LD_ADDR_VAR 0 5
79413: PUSH
79414: LD_VAR 0 1
79418: PUSH
79419: LD_VAR 0 2
79423: PUSH
79424: LD_INT 4
79426: MINUS
79427: PUSH
79428: LD_INT 3
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: LIST
79435: PUSH
79436: LD_VAR 0 1
79440: PUSH
79441: LD_INT 3
79443: MINUS
79444: PUSH
79445: LD_VAR 0 2
79449: PUSH
79450: LD_INT 3
79452: MINUS
79453: PUSH
79454: LD_INT 2
79456: PUSH
79457: EMPTY
79458: LIST
79459: LIST
79460: LIST
79461: PUSH
79462: LD_VAR 0 1
79466: PUSH
79467: LD_INT 4
79469: MINUS
79470: PUSH
79471: LD_VAR 0 2
79475: PUSH
79476: LD_INT 1
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: LIST
79483: PUSH
79484: LD_VAR 0 1
79488: PUSH
79489: LD_VAR 0 2
79493: PUSH
79494: LD_INT 3
79496: PLUS
79497: PUSH
79498: LD_INT 0
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: LIST
79505: PUSH
79506: LD_VAR 0 1
79510: PUSH
79511: LD_INT 4
79513: PLUS
79514: PUSH
79515: LD_VAR 0 2
79519: PUSH
79520: LD_INT 4
79522: PLUS
79523: PUSH
79524: LD_INT 5
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: LIST
79531: PUSH
79532: EMPTY
79533: LIST
79534: LIST
79535: LIST
79536: LIST
79537: LIST
79538: ST_TO_ADDR
// end ; 2 :
79539: GO 80098
79541: LD_INT 2
79543: DOUBLE
79544: EQUAL
79545: IFTRUE 79549
79547: GO 79678
79549: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79550: LD_ADDR_VAR 0 5
79554: PUSH
79555: LD_VAR 0 1
79559: PUSH
79560: LD_VAR 0 2
79564: PUSH
79565: LD_INT 3
79567: MINUS
79568: PUSH
79569: LD_INT 3
79571: PUSH
79572: EMPTY
79573: LIST
79574: LIST
79575: LIST
79576: PUSH
79577: LD_VAR 0 1
79581: PUSH
79582: LD_INT 4
79584: PLUS
79585: PUSH
79586: LD_VAR 0 2
79590: PUSH
79591: LD_INT 4
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: LIST
79598: PUSH
79599: LD_VAR 0 1
79603: PUSH
79604: LD_VAR 0 2
79608: PUSH
79609: LD_INT 4
79611: PLUS
79612: PUSH
79613: LD_INT 0
79615: PUSH
79616: EMPTY
79617: LIST
79618: LIST
79619: LIST
79620: PUSH
79621: LD_VAR 0 1
79625: PUSH
79626: LD_INT 3
79628: MINUS
79629: PUSH
79630: LD_VAR 0 2
79634: PUSH
79635: LD_INT 1
79637: PUSH
79638: EMPTY
79639: LIST
79640: LIST
79641: LIST
79642: PUSH
79643: LD_VAR 0 1
79647: PUSH
79648: LD_INT 4
79650: MINUS
79651: PUSH
79652: LD_VAR 0 2
79656: PUSH
79657: LD_INT 4
79659: MINUS
79660: PUSH
79661: LD_INT 2
79663: PUSH
79664: EMPTY
79665: LIST
79666: LIST
79667: LIST
79668: PUSH
79669: EMPTY
79670: LIST
79671: LIST
79672: LIST
79673: LIST
79674: LIST
79675: ST_TO_ADDR
// end ; 3 :
79676: GO 80098
79678: LD_INT 3
79680: DOUBLE
79681: EQUAL
79682: IFTRUE 79686
79684: GO 79819
79686: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79687: LD_ADDR_VAR 0 5
79691: PUSH
79692: LD_VAR 0 1
79696: PUSH
79697: LD_INT 3
79699: PLUS
79700: PUSH
79701: LD_VAR 0 2
79705: PUSH
79706: LD_INT 4
79708: PUSH
79709: EMPTY
79710: LIST
79711: LIST
79712: LIST
79713: PUSH
79714: LD_VAR 0 1
79718: PUSH
79719: LD_INT 4
79721: PLUS
79722: PUSH
79723: LD_VAR 0 2
79727: PUSH
79728: LD_INT 4
79730: PLUS
79731: PUSH
79732: LD_INT 5
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: LIST
79739: PUSH
79740: LD_VAR 0 1
79744: PUSH
79745: LD_INT 4
79747: MINUS
79748: PUSH
79749: LD_VAR 0 2
79753: PUSH
79754: LD_INT 1
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: LIST
79761: PUSH
79762: LD_VAR 0 1
79766: PUSH
79767: LD_VAR 0 2
79771: PUSH
79772: LD_INT 4
79774: MINUS
79775: PUSH
79776: LD_INT 3
79778: PUSH
79779: EMPTY
79780: LIST
79781: LIST
79782: LIST
79783: PUSH
79784: LD_VAR 0 1
79788: PUSH
79789: LD_INT 3
79791: MINUS
79792: PUSH
79793: LD_VAR 0 2
79797: PUSH
79798: LD_INT 3
79800: MINUS
79801: PUSH
79802: LD_INT 2
79804: PUSH
79805: EMPTY
79806: LIST
79807: LIST
79808: LIST
79809: PUSH
79810: EMPTY
79811: LIST
79812: LIST
79813: LIST
79814: LIST
79815: LIST
79816: ST_TO_ADDR
// end ; 4 :
79817: GO 80098
79819: LD_INT 4
79821: DOUBLE
79822: EQUAL
79823: IFTRUE 79827
79825: GO 79960
79827: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79828: LD_ADDR_VAR 0 5
79832: PUSH
79833: LD_VAR 0 1
79837: PUSH
79838: LD_VAR 0 2
79842: PUSH
79843: LD_INT 4
79845: PLUS
79846: PUSH
79847: LD_INT 0
79849: PUSH
79850: EMPTY
79851: LIST
79852: LIST
79853: LIST
79854: PUSH
79855: LD_VAR 0 1
79859: PUSH
79860: LD_INT 3
79862: PLUS
79863: PUSH
79864: LD_VAR 0 2
79868: PUSH
79869: LD_INT 3
79871: PLUS
79872: PUSH
79873: LD_INT 5
79875: PUSH
79876: EMPTY
79877: LIST
79878: LIST
79879: LIST
79880: PUSH
79881: LD_VAR 0 1
79885: PUSH
79886: LD_INT 4
79888: PLUS
79889: PUSH
79890: LD_VAR 0 2
79894: PUSH
79895: LD_INT 4
79897: PUSH
79898: EMPTY
79899: LIST
79900: LIST
79901: LIST
79902: PUSH
79903: LD_VAR 0 1
79907: PUSH
79908: LD_VAR 0 2
79912: PUSH
79913: LD_INT 3
79915: MINUS
79916: PUSH
79917: LD_INT 3
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: LIST
79924: PUSH
79925: LD_VAR 0 1
79929: PUSH
79930: LD_INT 4
79932: MINUS
79933: PUSH
79934: LD_VAR 0 2
79938: PUSH
79939: LD_INT 4
79941: MINUS
79942: PUSH
79943: LD_INT 2
79945: PUSH
79946: EMPTY
79947: LIST
79948: LIST
79949: LIST
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: ST_TO_ADDR
// end ; 5 :
79958: GO 80098
79960: LD_INT 5
79962: DOUBLE
79963: EQUAL
79964: IFTRUE 79968
79966: GO 80097
79968: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79969: LD_ADDR_VAR 0 5
79973: PUSH
79974: LD_VAR 0 1
79978: PUSH
79979: LD_INT 4
79981: MINUS
79982: PUSH
79983: LD_VAR 0 2
79987: PUSH
79988: LD_INT 1
79990: PUSH
79991: EMPTY
79992: LIST
79993: LIST
79994: LIST
79995: PUSH
79996: LD_VAR 0 1
80000: PUSH
80001: LD_VAR 0 2
80005: PUSH
80006: LD_INT 4
80008: MINUS
80009: PUSH
80010: LD_INT 3
80012: PUSH
80013: EMPTY
80014: LIST
80015: LIST
80016: LIST
80017: PUSH
80018: LD_VAR 0 1
80022: PUSH
80023: LD_INT 4
80025: PLUS
80026: PUSH
80027: LD_VAR 0 2
80031: PUSH
80032: LD_INT 4
80034: PLUS
80035: PUSH
80036: LD_INT 5
80038: PUSH
80039: EMPTY
80040: LIST
80041: LIST
80042: LIST
80043: PUSH
80044: LD_VAR 0 1
80048: PUSH
80049: LD_INT 3
80051: PLUS
80052: PUSH
80053: LD_VAR 0 2
80057: PUSH
80058: LD_INT 4
80060: PUSH
80061: EMPTY
80062: LIST
80063: LIST
80064: LIST
80065: PUSH
80066: LD_VAR 0 1
80070: PUSH
80071: LD_VAR 0 2
80075: PUSH
80076: LD_INT 3
80078: PLUS
80079: PUSH
80080: LD_INT 0
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: LIST
80087: PUSH
80088: EMPTY
80089: LIST
80090: LIST
80091: LIST
80092: LIST
80093: LIST
80094: ST_TO_ADDR
// end ; end ;
80095: GO 80098
80097: POP
// result := list ;
80098: LD_ADDR_VAR 0 4
80102: PUSH
80103: LD_VAR 0 5
80107: ST_TO_ADDR
// end ;
80108: LD_VAR 0 4
80112: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
80113: LD_INT 0
80115: PPUSH
80116: PPUSH
80117: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
80118: LD_VAR 0 1
80122: NOT
80123: PUSH
80124: LD_VAR 0 2
80128: PUSH
80129: LD_INT 1
80131: PUSH
80132: LD_INT 2
80134: PUSH
80135: LD_INT 3
80137: PUSH
80138: LD_INT 4
80140: PUSH
80141: EMPTY
80142: LIST
80143: LIST
80144: LIST
80145: LIST
80146: IN
80147: NOT
80148: OR
80149: IFFALSE 80153
// exit ;
80151: GO 80236
// tmp := [ ] ;
80153: LD_ADDR_VAR 0 5
80157: PUSH
80158: EMPTY
80159: ST_TO_ADDR
// for i in units do
80160: LD_ADDR_VAR 0 4
80164: PUSH
80165: LD_VAR 0 1
80169: PUSH
80170: FOR_IN
80171: IFFALSE 80205
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
80173: LD_ADDR_VAR 0 5
80177: PUSH
80178: LD_VAR 0 5
80182: PPUSH
80183: LD_VAR 0 4
80187: PPUSH
80188: LD_VAR 0 2
80192: PPUSH
80193: CALL_OW 259
80197: PPUSH
80198: CALL 81597 0 2
80202: ST_TO_ADDR
80203: GO 80170
80205: POP
80206: POP
// if not tmp then
80207: LD_VAR 0 5
80211: NOT
80212: IFFALSE 80216
// exit ;
80214: GO 80236
// result := SortListByListDesc ( units , tmp ) ;
80216: LD_ADDR_VAR 0 3
80220: PUSH
80221: LD_VAR 0 1
80225: PPUSH
80226: LD_VAR 0 5
80230: PPUSH
80231: CALL_OW 77
80235: ST_TO_ADDR
// end ;
80236: LD_VAR 0 3
80240: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
80241: LD_INT 0
80243: PPUSH
80244: PPUSH
80245: PPUSH
// result := false ;
80246: LD_ADDR_VAR 0 3
80250: PUSH
80251: LD_INT 0
80253: ST_TO_ADDR
// if not building then
80254: LD_VAR 0 2
80258: NOT
80259: IFFALSE 80263
// exit ;
80261: GO 80401
// x := GetX ( building ) ;
80263: LD_ADDR_VAR 0 4
80267: PUSH
80268: LD_VAR 0 2
80272: PPUSH
80273: CALL_OW 250
80277: ST_TO_ADDR
// y := GetY ( building ) ;
80278: LD_ADDR_VAR 0 5
80282: PUSH
80283: LD_VAR 0 2
80287: PPUSH
80288: CALL_OW 251
80292: ST_TO_ADDR
// if not x or not y then
80293: LD_VAR 0 4
80297: NOT
80298: PUSH
80299: LD_VAR 0 5
80303: NOT
80304: OR
80305: IFFALSE 80309
// exit ;
80307: GO 80401
// if GetTaskList ( unit ) then
80309: LD_VAR 0 1
80313: PPUSH
80314: CALL_OW 437
80318: IFFALSE 80401
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80320: LD_STRING e
80322: PUSH
80323: LD_VAR 0 1
80327: PPUSH
80328: CALL_OW 437
80332: PUSH
80333: LD_INT 1
80335: ARRAY
80336: PUSH
80337: LD_INT 1
80339: ARRAY
80340: EQUAL
80341: PUSH
80342: LD_VAR 0 4
80346: PUSH
80347: LD_VAR 0 1
80351: PPUSH
80352: CALL_OW 437
80356: PUSH
80357: LD_INT 1
80359: ARRAY
80360: PUSH
80361: LD_INT 2
80363: ARRAY
80364: EQUAL
80365: AND
80366: PUSH
80367: LD_VAR 0 5
80371: PUSH
80372: LD_VAR 0 1
80376: PPUSH
80377: CALL_OW 437
80381: PUSH
80382: LD_INT 1
80384: ARRAY
80385: PUSH
80386: LD_INT 3
80388: ARRAY
80389: EQUAL
80390: AND
80391: IFFALSE 80401
// result := true end ;
80393: LD_ADDR_VAR 0 3
80397: PUSH
80398: LD_INT 1
80400: ST_TO_ADDR
// end ;
80401: LD_VAR 0 3
80405: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80406: LD_INT 0
80408: PPUSH
// result := false ;
80409: LD_ADDR_VAR 0 4
80413: PUSH
80414: LD_INT 0
80416: ST_TO_ADDR
// if GetTaskList ( unit ) then
80417: LD_VAR 0 1
80421: PPUSH
80422: CALL_OW 437
80426: IFFALSE 80509
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80428: LD_STRING M
80430: PUSH
80431: LD_VAR 0 1
80435: PPUSH
80436: CALL_OW 437
80440: PUSH
80441: LD_INT 1
80443: ARRAY
80444: PUSH
80445: LD_INT 1
80447: ARRAY
80448: EQUAL
80449: PUSH
80450: LD_VAR 0 2
80454: PUSH
80455: LD_VAR 0 1
80459: PPUSH
80460: CALL_OW 437
80464: PUSH
80465: LD_INT 1
80467: ARRAY
80468: PUSH
80469: LD_INT 2
80471: ARRAY
80472: EQUAL
80473: AND
80474: PUSH
80475: LD_VAR 0 3
80479: PUSH
80480: LD_VAR 0 1
80484: PPUSH
80485: CALL_OW 437
80489: PUSH
80490: LD_INT 1
80492: ARRAY
80493: PUSH
80494: LD_INT 3
80496: ARRAY
80497: EQUAL
80498: AND
80499: IFFALSE 80509
// result := true ;
80501: LD_ADDR_VAR 0 4
80505: PUSH
80506: LD_INT 1
80508: ST_TO_ADDR
// end ; end ;
80509: LD_VAR 0 4
80513: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80514: LD_INT 0
80516: PPUSH
80517: PPUSH
80518: PPUSH
80519: PPUSH
// if not unit or not area then
80520: LD_VAR 0 1
80524: NOT
80525: PUSH
80526: LD_VAR 0 2
80530: NOT
80531: OR
80532: IFFALSE 80536
// exit ;
80534: GO 80700
// tmp := AreaToList ( area , i ) ;
80536: LD_ADDR_VAR 0 6
80540: PUSH
80541: LD_VAR 0 2
80545: PPUSH
80546: LD_VAR 0 5
80550: PPUSH
80551: CALL_OW 517
80555: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80556: LD_ADDR_VAR 0 5
80560: PUSH
80561: DOUBLE
80562: LD_INT 1
80564: DEC
80565: ST_TO_ADDR
80566: LD_VAR 0 6
80570: PUSH
80571: LD_INT 1
80573: ARRAY
80574: PUSH
80575: FOR_TO
80576: IFFALSE 80698
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80578: LD_ADDR_VAR 0 7
80582: PUSH
80583: LD_VAR 0 6
80587: PUSH
80588: LD_INT 1
80590: ARRAY
80591: PUSH
80592: LD_VAR 0 5
80596: ARRAY
80597: PUSH
80598: LD_VAR 0 6
80602: PUSH
80603: LD_INT 2
80605: ARRAY
80606: PUSH
80607: LD_VAR 0 5
80611: ARRAY
80612: PUSH
80613: EMPTY
80614: LIST
80615: LIST
80616: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80617: LD_VAR 0 7
80621: PUSH
80622: LD_INT 1
80624: ARRAY
80625: PPUSH
80626: LD_VAR 0 7
80630: PUSH
80631: LD_INT 2
80633: ARRAY
80634: PPUSH
80635: CALL_OW 428
80639: PUSH
80640: LD_INT 0
80642: EQUAL
80643: IFFALSE 80696
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80645: LD_VAR 0 1
80649: PPUSH
80650: LD_VAR 0 7
80654: PUSH
80655: LD_INT 1
80657: ARRAY
80658: PPUSH
80659: LD_VAR 0 7
80663: PUSH
80664: LD_INT 2
80666: ARRAY
80667: PPUSH
80668: LD_VAR 0 3
80672: PPUSH
80673: CALL_OW 48
// result := IsPlaced ( unit ) ;
80677: LD_ADDR_VAR 0 4
80681: PUSH
80682: LD_VAR 0 1
80686: PPUSH
80687: CALL_OW 305
80691: ST_TO_ADDR
// exit ;
80692: POP
80693: POP
80694: GO 80700
// end ; end ;
80696: GO 80575
80698: POP
80699: POP
// end ;
80700: LD_VAR 0 4
80704: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80705: LD_INT 0
80707: PPUSH
80708: PPUSH
80709: PPUSH
// if not side or side > 8 then
80710: LD_VAR 0 1
80714: NOT
80715: PUSH
80716: LD_VAR 0 1
80720: PUSH
80721: LD_INT 8
80723: GREATER
80724: OR
80725: IFFALSE 80729
// exit ;
80727: GO 80916
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80729: LD_ADDR_VAR 0 4
80733: PUSH
80734: LD_INT 22
80736: PUSH
80737: LD_VAR 0 1
80741: PUSH
80742: EMPTY
80743: LIST
80744: LIST
80745: PUSH
80746: LD_INT 21
80748: PUSH
80749: LD_INT 3
80751: PUSH
80752: EMPTY
80753: LIST
80754: LIST
80755: PUSH
80756: EMPTY
80757: LIST
80758: LIST
80759: PPUSH
80760: CALL_OW 69
80764: ST_TO_ADDR
// if not tmp then
80765: LD_VAR 0 4
80769: NOT
80770: IFFALSE 80774
// exit ;
80772: GO 80916
// enable_addtolog := true ;
80774: LD_ADDR_OWVAR 81
80778: PUSH
80779: LD_INT 1
80781: ST_TO_ADDR
// AddToLog ( [ ) ;
80782: LD_STRING [
80784: PPUSH
80785: CALL_OW 561
// for i in tmp do
80789: LD_ADDR_VAR 0 3
80793: PUSH
80794: LD_VAR 0 4
80798: PUSH
80799: FOR_IN
80800: IFFALSE 80907
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80802: LD_STRING [
80804: PUSH
80805: LD_VAR 0 3
80809: PPUSH
80810: CALL_OW 266
80814: STR
80815: PUSH
80816: LD_STRING , 
80818: STR
80819: PUSH
80820: LD_VAR 0 3
80824: PPUSH
80825: CALL_OW 250
80829: STR
80830: PUSH
80831: LD_STRING , 
80833: STR
80834: PUSH
80835: LD_VAR 0 3
80839: PPUSH
80840: CALL_OW 251
80844: STR
80845: PUSH
80846: LD_STRING , 
80848: STR
80849: PUSH
80850: LD_VAR 0 3
80854: PPUSH
80855: CALL_OW 254
80859: STR
80860: PUSH
80861: LD_STRING , 
80863: STR
80864: PUSH
80865: LD_VAR 0 3
80869: PPUSH
80870: LD_INT 1
80872: PPUSH
80873: CALL_OW 268
80877: STR
80878: PUSH
80879: LD_STRING , 
80881: STR
80882: PUSH
80883: LD_VAR 0 3
80887: PPUSH
80888: LD_INT 2
80890: PPUSH
80891: CALL_OW 268
80895: STR
80896: PUSH
80897: LD_STRING ],
80899: STR
80900: PPUSH
80901: CALL_OW 561
// end ;
80905: GO 80799
80907: POP
80908: POP
// AddToLog ( ]; ) ;
80909: LD_STRING ];
80911: PPUSH
80912: CALL_OW 561
// end ;
80916: LD_VAR 0 2
80920: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80921: LD_INT 0
80923: PPUSH
80924: PPUSH
80925: PPUSH
80926: PPUSH
80927: PPUSH
// if not area or not rate or not max then
80928: LD_VAR 0 1
80932: NOT
80933: PUSH
80934: LD_VAR 0 2
80938: NOT
80939: OR
80940: PUSH
80941: LD_VAR 0 4
80945: NOT
80946: OR
80947: IFFALSE 80951
// exit ;
80949: GO 81140
// while 1 do
80951: LD_INT 1
80953: IFFALSE 81140
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80955: LD_ADDR_VAR 0 9
80959: PUSH
80960: LD_VAR 0 1
80964: PPUSH
80965: LD_INT 1
80967: PPUSH
80968: CALL_OW 287
80972: PUSH
80973: LD_INT 10
80975: MUL
80976: ST_TO_ADDR
// r := rate / 10 ;
80977: LD_ADDR_VAR 0 7
80981: PUSH
80982: LD_VAR 0 2
80986: PUSH
80987: LD_INT 10
80989: DIVREAL
80990: ST_TO_ADDR
// time := 1 1$00 ;
80991: LD_ADDR_VAR 0 8
80995: PUSH
80996: LD_INT 2100
80998: ST_TO_ADDR
// if amount < min then
80999: LD_VAR 0 9
81003: PUSH
81004: LD_VAR 0 3
81008: LESS
81009: IFFALSE 81027
// r := r * 2 else
81011: LD_ADDR_VAR 0 7
81015: PUSH
81016: LD_VAR 0 7
81020: PUSH
81021: LD_INT 2
81023: MUL
81024: ST_TO_ADDR
81025: GO 81053
// if amount > max then
81027: LD_VAR 0 9
81031: PUSH
81032: LD_VAR 0 4
81036: GREATER
81037: IFFALSE 81053
// r := r / 2 ;
81039: LD_ADDR_VAR 0 7
81043: PUSH
81044: LD_VAR 0 7
81048: PUSH
81049: LD_INT 2
81051: DIVREAL
81052: ST_TO_ADDR
// time := time / r ;
81053: LD_ADDR_VAR 0 8
81057: PUSH
81058: LD_VAR 0 8
81062: PUSH
81063: LD_VAR 0 7
81067: DIVREAL
81068: ST_TO_ADDR
// if time < 0 then
81069: LD_VAR 0 8
81073: PUSH
81074: LD_INT 0
81076: LESS
81077: IFFALSE 81094
// time := time * - 1 ;
81079: LD_ADDR_VAR 0 8
81083: PUSH
81084: LD_VAR 0 8
81088: PUSH
81089: LD_INT 1
81091: NEG
81092: MUL
81093: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
81094: LD_VAR 0 8
81098: PUSH
81099: LD_INT 35
81101: PPUSH
81102: LD_INT 875
81104: PPUSH
81105: CALL_OW 12
81109: PLUS
81110: PPUSH
81111: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
81115: LD_INT 1
81117: PPUSH
81118: LD_INT 5
81120: PPUSH
81121: CALL_OW 12
81125: PPUSH
81126: LD_VAR 0 1
81130: PPUSH
81131: LD_INT 1
81133: PPUSH
81134: CALL_OW 55
// end ;
81138: GO 80951
// end ;
81140: LD_VAR 0 5
81144: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
81145: LD_INT 0
81147: PPUSH
81148: PPUSH
81149: PPUSH
81150: PPUSH
81151: PPUSH
81152: PPUSH
81153: PPUSH
81154: PPUSH
// if not turrets or not factories then
81155: LD_VAR 0 1
81159: NOT
81160: PUSH
81161: LD_VAR 0 2
81165: NOT
81166: OR
81167: IFFALSE 81171
// exit ;
81169: GO 81478
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
81171: LD_ADDR_VAR 0 10
81175: PUSH
81176: LD_INT 5
81178: PUSH
81179: LD_INT 6
81181: PUSH
81182: EMPTY
81183: LIST
81184: LIST
81185: PUSH
81186: LD_INT 2
81188: PUSH
81189: LD_INT 4
81191: PUSH
81192: EMPTY
81193: LIST
81194: LIST
81195: PUSH
81196: LD_INT 3
81198: PUSH
81199: LD_INT 5
81201: PUSH
81202: EMPTY
81203: LIST
81204: LIST
81205: PUSH
81206: EMPTY
81207: LIST
81208: LIST
81209: LIST
81210: PUSH
81211: LD_INT 24
81213: PUSH
81214: LD_INT 25
81216: PUSH
81217: EMPTY
81218: LIST
81219: LIST
81220: PUSH
81221: LD_INT 23
81223: PUSH
81224: LD_INT 27
81226: PUSH
81227: EMPTY
81228: LIST
81229: LIST
81230: PUSH
81231: EMPTY
81232: LIST
81233: LIST
81234: PUSH
81235: LD_INT 42
81237: PUSH
81238: LD_INT 43
81240: PUSH
81241: EMPTY
81242: LIST
81243: LIST
81244: PUSH
81245: LD_INT 44
81247: PUSH
81248: LD_INT 46
81250: PUSH
81251: EMPTY
81252: LIST
81253: LIST
81254: PUSH
81255: LD_INT 45
81257: PUSH
81258: LD_INT 47
81260: PUSH
81261: EMPTY
81262: LIST
81263: LIST
81264: PUSH
81265: EMPTY
81266: LIST
81267: LIST
81268: LIST
81269: PUSH
81270: EMPTY
81271: LIST
81272: LIST
81273: LIST
81274: ST_TO_ADDR
// result := [ ] ;
81275: LD_ADDR_VAR 0 3
81279: PUSH
81280: EMPTY
81281: ST_TO_ADDR
// for i in turrets do
81282: LD_ADDR_VAR 0 4
81286: PUSH
81287: LD_VAR 0 1
81291: PUSH
81292: FOR_IN
81293: IFFALSE 81476
// begin nat := GetNation ( i ) ;
81295: LD_ADDR_VAR 0 7
81299: PUSH
81300: LD_VAR 0 4
81304: PPUSH
81305: CALL_OW 248
81309: ST_TO_ADDR
// weapon := 0 ;
81310: LD_ADDR_VAR 0 8
81314: PUSH
81315: LD_INT 0
81317: ST_TO_ADDR
// if not nat then
81318: LD_VAR 0 7
81322: NOT
81323: IFFALSE 81327
// continue ;
81325: GO 81292
// for j in list [ nat ] do
81327: LD_ADDR_VAR 0 5
81331: PUSH
81332: LD_VAR 0 10
81336: PUSH
81337: LD_VAR 0 7
81341: ARRAY
81342: PUSH
81343: FOR_IN
81344: IFFALSE 81385
// if GetBWeapon ( i ) = j [ 1 ] then
81346: LD_VAR 0 4
81350: PPUSH
81351: CALL_OW 269
81355: PUSH
81356: LD_VAR 0 5
81360: PUSH
81361: LD_INT 1
81363: ARRAY
81364: EQUAL
81365: IFFALSE 81383
// begin weapon := j [ 2 ] ;
81367: LD_ADDR_VAR 0 8
81371: PUSH
81372: LD_VAR 0 5
81376: PUSH
81377: LD_INT 2
81379: ARRAY
81380: ST_TO_ADDR
// break ;
81381: GO 81385
// end ;
81383: GO 81343
81385: POP
81386: POP
// if not weapon then
81387: LD_VAR 0 8
81391: NOT
81392: IFFALSE 81396
// continue ;
81394: GO 81292
// for k in factories do
81396: LD_ADDR_VAR 0 6
81400: PUSH
81401: LD_VAR 0 2
81405: PUSH
81406: FOR_IN
81407: IFFALSE 81472
// begin weapons := AvailableWeaponList ( k ) ;
81409: LD_ADDR_VAR 0 9
81413: PUSH
81414: LD_VAR 0 6
81418: PPUSH
81419: CALL_OW 478
81423: ST_TO_ADDR
// if not weapons then
81424: LD_VAR 0 9
81428: NOT
81429: IFFALSE 81433
// continue ;
81431: GO 81406
// if weapon in weapons then
81433: LD_VAR 0 8
81437: PUSH
81438: LD_VAR 0 9
81442: IN
81443: IFFALSE 81470
// begin result := [ i , weapon ] ;
81445: LD_ADDR_VAR 0 3
81449: PUSH
81450: LD_VAR 0 4
81454: PUSH
81455: LD_VAR 0 8
81459: PUSH
81460: EMPTY
81461: LIST
81462: LIST
81463: ST_TO_ADDR
// exit ;
81464: POP
81465: POP
81466: POP
81467: POP
81468: GO 81478
// end ; end ;
81470: GO 81406
81472: POP
81473: POP
// end ;
81474: GO 81292
81476: POP
81477: POP
// end ;
81478: LD_VAR 0 3
81482: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81483: LD_INT 0
81485: PPUSH
// if not side or side > 8 then
81486: LD_VAR 0 3
81490: NOT
81491: PUSH
81492: LD_VAR 0 3
81496: PUSH
81497: LD_INT 8
81499: GREATER
81500: OR
81501: IFFALSE 81505
// exit ;
81503: GO 81564
// if not range then
81505: LD_VAR 0 4
81509: NOT
81510: IFFALSE 81521
// range := - 12 ;
81512: LD_ADDR_VAR 0 4
81516: PUSH
81517: LD_INT 12
81519: NEG
81520: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81521: LD_VAR 0 1
81525: PPUSH
81526: LD_VAR 0 2
81530: PPUSH
81531: LD_VAR 0 3
81535: PPUSH
81536: LD_VAR 0 4
81540: PPUSH
81541: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81545: LD_VAR 0 1
81549: PPUSH
81550: LD_VAR 0 2
81554: PPUSH
81555: LD_VAR 0 3
81559: PPUSH
81560: CALL_OW 331
// end ;
81564: LD_VAR 0 5
81568: RET
// export function Video ( mode ) ; begin
81569: LD_INT 0
81571: PPUSH
// ingame_video = mode ;
81572: LD_ADDR_OWVAR 52
81576: PUSH
81577: LD_VAR 0 1
81581: ST_TO_ADDR
// interface_hidden = mode ;
81582: LD_ADDR_OWVAR 54
81586: PUSH
81587: LD_VAR 0 1
81591: ST_TO_ADDR
// end ;
81592: LD_VAR 0 2
81596: RET
// export function Join ( array , element ) ; begin
81597: LD_INT 0
81599: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81600: LD_ADDR_VAR 0 3
81604: PUSH
81605: LD_VAR 0 1
81609: PPUSH
81610: LD_VAR 0 1
81614: PUSH
81615: LD_INT 1
81617: PLUS
81618: PPUSH
81619: LD_VAR 0 2
81623: PPUSH
81624: CALL_OW 1
81628: ST_TO_ADDR
// end ;
81629: LD_VAR 0 3
81633: RET
// export function JoinUnion ( array , element ) ; begin
81634: LD_INT 0
81636: PPUSH
// result := array union element ;
81637: LD_ADDR_VAR 0 3
81641: PUSH
81642: LD_VAR 0 1
81646: PUSH
81647: LD_VAR 0 2
81651: UNION
81652: ST_TO_ADDR
// end ;
81653: LD_VAR 0 3
81657: RET
// export function GetBehemoths ( side ) ; begin
81658: LD_INT 0
81660: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81661: LD_ADDR_VAR 0 2
81665: PUSH
81666: LD_INT 22
81668: PUSH
81669: LD_VAR 0 1
81673: PUSH
81674: EMPTY
81675: LIST
81676: LIST
81677: PUSH
81678: LD_INT 31
81680: PUSH
81681: LD_INT 25
81683: PUSH
81684: EMPTY
81685: LIST
81686: LIST
81687: PUSH
81688: EMPTY
81689: LIST
81690: LIST
81691: PPUSH
81692: CALL_OW 69
81696: ST_TO_ADDR
// end ;
81697: LD_VAR 0 2
81701: RET
// export function Shuffle ( array ) ; var i , index ; begin
81702: LD_INT 0
81704: PPUSH
81705: PPUSH
81706: PPUSH
// result := [ ] ;
81707: LD_ADDR_VAR 0 2
81711: PUSH
81712: EMPTY
81713: ST_TO_ADDR
// if not array then
81714: LD_VAR 0 1
81718: NOT
81719: IFFALSE 81723
// exit ;
81721: GO 81822
// Randomize ;
81723: CALL_OW 10
// for i = array downto 1 do
81727: LD_ADDR_VAR 0 3
81731: PUSH
81732: DOUBLE
81733: LD_VAR 0 1
81737: INC
81738: ST_TO_ADDR
81739: LD_INT 1
81741: PUSH
81742: FOR_DOWNTO
81743: IFFALSE 81820
// begin index := rand ( 1 , array ) ;
81745: LD_ADDR_VAR 0 4
81749: PUSH
81750: LD_INT 1
81752: PPUSH
81753: LD_VAR 0 1
81757: PPUSH
81758: CALL_OW 12
81762: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81763: LD_ADDR_VAR 0 2
81767: PUSH
81768: LD_VAR 0 2
81772: PPUSH
81773: LD_VAR 0 2
81777: PUSH
81778: LD_INT 1
81780: PLUS
81781: PPUSH
81782: LD_VAR 0 1
81786: PUSH
81787: LD_VAR 0 4
81791: ARRAY
81792: PPUSH
81793: CALL_OW 2
81797: ST_TO_ADDR
// array := Delete ( array , index ) ;
81798: LD_ADDR_VAR 0 1
81802: PUSH
81803: LD_VAR 0 1
81807: PPUSH
81808: LD_VAR 0 4
81812: PPUSH
81813: CALL_OW 3
81817: ST_TO_ADDR
// end ;
81818: GO 81742
81820: POP
81821: POP
// end ;
81822: LD_VAR 0 2
81826: RET
// export function GetBaseMaterials ( base ) ; begin
81827: LD_INT 0
81829: PPUSH
// result := [ 0 , 0 , 0 ] ;
81830: LD_ADDR_VAR 0 2
81834: PUSH
81835: LD_INT 0
81837: PUSH
81838: LD_INT 0
81840: PUSH
81841: LD_INT 0
81843: PUSH
81844: EMPTY
81845: LIST
81846: LIST
81847: LIST
81848: ST_TO_ADDR
// if not base then
81849: LD_VAR 0 1
81853: NOT
81854: IFFALSE 81858
// exit ;
81856: GO 81907
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81858: LD_ADDR_VAR 0 2
81862: PUSH
81863: LD_VAR 0 1
81867: PPUSH
81868: LD_INT 1
81870: PPUSH
81871: CALL_OW 275
81875: PUSH
81876: LD_VAR 0 1
81880: PPUSH
81881: LD_INT 2
81883: PPUSH
81884: CALL_OW 275
81888: PUSH
81889: LD_VAR 0 1
81893: PPUSH
81894: LD_INT 3
81896: PPUSH
81897: CALL_OW 275
81901: PUSH
81902: EMPTY
81903: LIST
81904: LIST
81905: LIST
81906: ST_TO_ADDR
// end ;
81907: LD_VAR 0 2
81911: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81912: LD_INT 0
81914: PPUSH
81915: PPUSH
// result := array ;
81916: LD_ADDR_VAR 0 3
81920: PUSH
81921: LD_VAR 0 1
81925: ST_TO_ADDR
// if size >= result then
81926: LD_VAR 0 2
81930: PUSH
81931: LD_VAR 0 3
81935: GREATEREQUAL
81936: IFFALSE 81940
// exit ;
81938: GO 81990
// if size then
81940: LD_VAR 0 2
81944: IFFALSE 81990
// for i := array downto size do
81946: LD_ADDR_VAR 0 4
81950: PUSH
81951: DOUBLE
81952: LD_VAR 0 1
81956: INC
81957: ST_TO_ADDR
81958: LD_VAR 0 2
81962: PUSH
81963: FOR_DOWNTO
81964: IFFALSE 81988
// result := Delete ( result , result ) ;
81966: LD_ADDR_VAR 0 3
81970: PUSH
81971: LD_VAR 0 3
81975: PPUSH
81976: LD_VAR 0 3
81980: PPUSH
81981: CALL_OW 3
81985: ST_TO_ADDR
81986: GO 81963
81988: POP
81989: POP
// end ;
81990: LD_VAR 0 3
81994: RET
// export function ComExit ( unit ) ; var tmp ; begin
81995: LD_INT 0
81997: PPUSH
81998: PPUSH
// if not IsInUnit ( unit ) then
81999: LD_VAR 0 1
82003: PPUSH
82004: CALL_OW 310
82008: NOT
82009: IFFALSE 82013
// exit ;
82011: GO 82073
// tmp := IsInUnit ( unit ) ;
82013: LD_ADDR_VAR 0 3
82017: PUSH
82018: LD_VAR 0 1
82022: PPUSH
82023: CALL_OW 310
82027: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
82028: LD_VAR 0 3
82032: PPUSH
82033: CALL_OW 247
82037: PUSH
82038: LD_INT 2
82040: EQUAL
82041: IFFALSE 82054
// ComExitVehicle ( unit ) else
82043: LD_VAR 0 1
82047: PPUSH
82048: CALL_OW 121
82052: GO 82063
// ComExitBuilding ( unit ) ;
82054: LD_VAR 0 1
82058: PPUSH
82059: CALL_OW 122
// result := tmp ;
82063: LD_ADDR_VAR 0 2
82067: PUSH
82068: LD_VAR 0 3
82072: ST_TO_ADDR
// end ;
82073: LD_VAR 0 2
82077: RET
// export function ComExitAll ( units ) ; var i ; begin
82078: LD_INT 0
82080: PPUSH
82081: PPUSH
// if not units then
82082: LD_VAR 0 1
82086: NOT
82087: IFFALSE 82091
// exit ;
82089: GO 82117
// for i in units do
82091: LD_ADDR_VAR 0 3
82095: PUSH
82096: LD_VAR 0 1
82100: PUSH
82101: FOR_IN
82102: IFFALSE 82115
// ComExit ( i ) ;
82104: LD_VAR 0 3
82108: PPUSH
82109: CALL 81995 0 1
82113: GO 82101
82115: POP
82116: POP
// end ;
82117: LD_VAR 0 2
82121: RET
// export function ResetHc ; begin
82122: LD_INT 0
82124: PPUSH
// InitHc ;
82125: CALL_OW 19
// hc_importance := 0 ;
82129: LD_ADDR_OWVAR 32
82133: PUSH
82134: LD_INT 0
82136: ST_TO_ADDR
// end ;
82137: LD_VAR 0 1
82141: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
82142: LD_INT 0
82144: PPUSH
82145: PPUSH
82146: PPUSH
// _x := ( x1 + x2 ) div 2 ;
82147: LD_ADDR_VAR 0 6
82151: PUSH
82152: LD_VAR 0 1
82156: PUSH
82157: LD_VAR 0 3
82161: PLUS
82162: PUSH
82163: LD_INT 2
82165: DIV
82166: ST_TO_ADDR
// if _x < 0 then
82167: LD_VAR 0 6
82171: PUSH
82172: LD_INT 0
82174: LESS
82175: IFFALSE 82192
// _x := _x * - 1 ;
82177: LD_ADDR_VAR 0 6
82181: PUSH
82182: LD_VAR 0 6
82186: PUSH
82187: LD_INT 1
82189: NEG
82190: MUL
82191: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
82192: LD_ADDR_VAR 0 7
82196: PUSH
82197: LD_VAR 0 2
82201: PUSH
82202: LD_VAR 0 4
82206: PLUS
82207: PUSH
82208: LD_INT 2
82210: DIV
82211: ST_TO_ADDR
// if _y < 0 then
82212: LD_VAR 0 7
82216: PUSH
82217: LD_INT 0
82219: LESS
82220: IFFALSE 82237
// _y := _y * - 1 ;
82222: LD_ADDR_VAR 0 7
82226: PUSH
82227: LD_VAR 0 7
82231: PUSH
82232: LD_INT 1
82234: NEG
82235: MUL
82236: ST_TO_ADDR
// result := [ _x , _y ] ;
82237: LD_ADDR_VAR 0 5
82241: PUSH
82242: LD_VAR 0 6
82246: PUSH
82247: LD_VAR 0 7
82251: PUSH
82252: EMPTY
82253: LIST
82254: LIST
82255: ST_TO_ADDR
// end ;
82256: LD_VAR 0 5
82260: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
82261: LD_INT 0
82263: PPUSH
82264: PPUSH
82265: PPUSH
82266: PPUSH
// task := GetTaskList ( unit ) ;
82267: LD_ADDR_VAR 0 7
82271: PUSH
82272: LD_VAR 0 1
82276: PPUSH
82277: CALL_OW 437
82281: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
82282: LD_VAR 0 7
82286: NOT
82287: PUSH
82288: LD_VAR 0 1
82292: PPUSH
82293: LD_VAR 0 2
82297: PPUSH
82298: CALL_OW 308
82302: NOT
82303: AND
82304: IFFALSE 82308
// exit ;
82306: GO 82426
// if IsInArea ( unit , area ) then
82308: LD_VAR 0 1
82312: PPUSH
82313: LD_VAR 0 2
82317: PPUSH
82318: CALL_OW 308
82322: IFFALSE 82340
// begin ComMoveToArea ( unit , goAway ) ;
82324: LD_VAR 0 1
82328: PPUSH
82329: LD_VAR 0 3
82333: PPUSH
82334: CALL_OW 113
// exit ;
82338: GO 82426
// end ; if task [ 1 ] [ 1 ] <> M then
82340: LD_VAR 0 7
82344: PUSH
82345: LD_INT 1
82347: ARRAY
82348: PUSH
82349: LD_INT 1
82351: ARRAY
82352: PUSH
82353: LD_STRING M
82355: NONEQUAL
82356: IFFALSE 82360
// exit ;
82358: GO 82426
// x := task [ 1 ] [ 2 ] ;
82360: LD_ADDR_VAR 0 5
82364: PUSH
82365: LD_VAR 0 7
82369: PUSH
82370: LD_INT 1
82372: ARRAY
82373: PUSH
82374: LD_INT 2
82376: ARRAY
82377: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
82378: LD_ADDR_VAR 0 6
82382: PUSH
82383: LD_VAR 0 7
82387: PUSH
82388: LD_INT 1
82390: ARRAY
82391: PUSH
82392: LD_INT 3
82394: ARRAY
82395: ST_TO_ADDR
// if InArea ( x , y , area ) then
82396: LD_VAR 0 5
82400: PPUSH
82401: LD_VAR 0 6
82405: PPUSH
82406: LD_VAR 0 2
82410: PPUSH
82411: CALL_OW 309
82415: IFFALSE 82426
// ComStop ( unit ) ;
82417: LD_VAR 0 1
82421: PPUSH
82422: CALL_OW 141
// end ;
82426: LD_VAR 0 4
82430: RET
// export function Abs ( value ) ; begin
82431: LD_INT 0
82433: PPUSH
// result := value ;
82434: LD_ADDR_VAR 0 2
82438: PUSH
82439: LD_VAR 0 1
82443: ST_TO_ADDR
// if value < 0 then
82444: LD_VAR 0 1
82448: PUSH
82449: LD_INT 0
82451: LESS
82452: IFFALSE 82469
// result := value * - 1 ;
82454: LD_ADDR_VAR 0 2
82458: PUSH
82459: LD_VAR 0 1
82463: PUSH
82464: LD_INT 1
82466: NEG
82467: MUL
82468: ST_TO_ADDR
// end ;
82469: LD_VAR 0 2
82473: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82474: LD_INT 0
82476: PPUSH
82477: PPUSH
82478: PPUSH
82479: PPUSH
82480: PPUSH
82481: PPUSH
82482: PPUSH
82483: PPUSH
// if not unit or not building then
82484: LD_VAR 0 1
82488: NOT
82489: PUSH
82490: LD_VAR 0 2
82494: NOT
82495: OR
82496: IFFALSE 82500
// exit ;
82498: GO 82726
// x := GetX ( building ) ;
82500: LD_ADDR_VAR 0 4
82504: PUSH
82505: LD_VAR 0 2
82509: PPUSH
82510: CALL_OW 250
82514: ST_TO_ADDR
// y := GetY ( building ) ;
82515: LD_ADDR_VAR 0 6
82519: PUSH
82520: LD_VAR 0 2
82524: PPUSH
82525: CALL_OW 251
82529: ST_TO_ADDR
// d := GetDir ( building ) ;
82530: LD_ADDR_VAR 0 8
82534: PUSH
82535: LD_VAR 0 2
82539: PPUSH
82540: CALL_OW 254
82544: ST_TO_ADDR
// r := 4 ;
82545: LD_ADDR_VAR 0 9
82549: PUSH
82550: LD_INT 4
82552: ST_TO_ADDR
// for i := 1 to 5 do
82553: LD_ADDR_VAR 0 10
82557: PUSH
82558: DOUBLE
82559: LD_INT 1
82561: DEC
82562: ST_TO_ADDR
82563: LD_INT 5
82565: PUSH
82566: FOR_TO
82567: IFFALSE 82724
// begin _x := ShiftX ( x , d , r + i ) ;
82569: LD_ADDR_VAR 0 5
82573: PUSH
82574: LD_VAR 0 4
82578: PPUSH
82579: LD_VAR 0 8
82583: PPUSH
82584: LD_VAR 0 9
82588: PUSH
82589: LD_VAR 0 10
82593: PLUS
82594: PPUSH
82595: CALL_OW 272
82599: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82600: LD_ADDR_VAR 0 7
82604: PUSH
82605: LD_VAR 0 6
82609: PPUSH
82610: LD_VAR 0 8
82614: PPUSH
82615: LD_VAR 0 9
82619: PUSH
82620: LD_VAR 0 10
82624: PLUS
82625: PPUSH
82626: CALL_OW 273
82630: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82631: LD_VAR 0 5
82635: PPUSH
82636: LD_VAR 0 7
82640: PPUSH
82641: CALL_OW 488
82645: PUSH
82646: LD_VAR 0 5
82650: PPUSH
82651: LD_VAR 0 7
82655: PPUSH
82656: CALL_OW 428
82660: PPUSH
82661: CALL_OW 247
82665: PUSH
82666: LD_INT 3
82668: PUSH
82669: LD_INT 2
82671: PUSH
82672: EMPTY
82673: LIST
82674: LIST
82675: IN
82676: NOT
82677: AND
82678: IFFALSE 82722
// begin ComMoveXY ( unit , _x , _y ) ;
82680: LD_VAR 0 1
82684: PPUSH
82685: LD_VAR 0 5
82689: PPUSH
82690: LD_VAR 0 7
82694: PPUSH
82695: CALL_OW 111
// result := [ _x , _y ] ;
82699: LD_ADDR_VAR 0 3
82703: PUSH
82704: LD_VAR 0 5
82708: PUSH
82709: LD_VAR 0 7
82713: PUSH
82714: EMPTY
82715: LIST
82716: LIST
82717: ST_TO_ADDR
// exit ;
82718: POP
82719: POP
82720: GO 82726
// end ; end ;
82722: GO 82566
82724: POP
82725: POP
// end ;
82726: LD_VAR 0 3
82730: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82731: LD_INT 0
82733: PPUSH
82734: PPUSH
82735: PPUSH
// result := 0 ;
82736: LD_ADDR_VAR 0 3
82740: PUSH
82741: LD_INT 0
82743: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82744: LD_VAR 0 1
82748: PUSH
82749: LD_INT 0
82751: LESS
82752: PUSH
82753: LD_VAR 0 1
82757: PUSH
82758: LD_INT 8
82760: GREATER
82761: OR
82762: PUSH
82763: LD_VAR 0 2
82767: PUSH
82768: LD_INT 0
82770: LESS
82771: OR
82772: PUSH
82773: LD_VAR 0 2
82777: PUSH
82778: LD_INT 8
82780: GREATER
82781: OR
82782: IFFALSE 82786
// exit ;
82784: GO 82861
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82786: LD_ADDR_VAR 0 4
82790: PUSH
82791: LD_INT 22
82793: PUSH
82794: LD_VAR 0 2
82798: PUSH
82799: EMPTY
82800: LIST
82801: LIST
82802: PPUSH
82803: CALL_OW 69
82807: PUSH
82808: FOR_IN
82809: IFFALSE 82859
// begin un := UnitShoot ( i ) ;
82811: LD_ADDR_VAR 0 5
82815: PUSH
82816: LD_VAR 0 4
82820: PPUSH
82821: CALL_OW 504
82825: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82826: LD_VAR 0 5
82830: PPUSH
82831: CALL_OW 255
82835: PUSH
82836: LD_VAR 0 1
82840: EQUAL
82841: IFFALSE 82857
// begin result := un ;
82843: LD_ADDR_VAR 0 3
82847: PUSH
82848: LD_VAR 0 5
82852: ST_TO_ADDR
// exit ;
82853: POP
82854: POP
82855: GO 82861
// end ; end ;
82857: GO 82808
82859: POP
82860: POP
// end ;
82861: LD_VAR 0 3
82865: RET
// export function GetCargoBay ( units ) ; begin
82866: LD_INT 0
82868: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82869: LD_ADDR_VAR 0 2
82873: PUSH
82874: LD_VAR 0 1
82878: PPUSH
82879: LD_INT 2
82881: PUSH
82882: LD_INT 34
82884: PUSH
82885: LD_INT 12
82887: PUSH
82888: EMPTY
82889: LIST
82890: LIST
82891: PUSH
82892: LD_INT 34
82894: PUSH
82895: LD_INT 51
82897: PUSH
82898: EMPTY
82899: LIST
82900: LIST
82901: PUSH
82902: LD_INT 34
82904: PUSH
82905: LD_INT 32
82907: PUSH
82908: EMPTY
82909: LIST
82910: LIST
82911: PUSH
82912: LD_INT 34
82914: PUSH
82915: LD_INT 89
82917: PUSH
82918: EMPTY
82919: LIST
82920: LIST
82921: PUSH
82922: EMPTY
82923: LIST
82924: LIST
82925: LIST
82926: LIST
82927: LIST
82928: PPUSH
82929: CALL_OW 72
82933: ST_TO_ADDR
// end ;
82934: LD_VAR 0 2
82938: RET
// export function Negate ( value ) ; begin
82939: LD_INT 0
82941: PPUSH
// result := not value ;
82942: LD_ADDR_VAR 0 2
82946: PUSH
82947: LD_VAR 0 1
82951: NOT
82952: ST_TO_ADDR
// end ;
82953: LD_VAR 0 2
82957: RET
// export function Inc ( value ) ; begin
82958: LD_INT 0
82960: PPUSH
// result := value + 1 ;
82961: LD_ADDR_VAR 0 2
82965: PUSH
82966: LD_VAR 0 1
82970: PUSH
82971: LD_INT 1
82973: PLUS
82974: ST_TO_ADDR
// end ;
82975: LD_VAR 0 2
82979: RET
// export function Dec ( value ) ; begin
82980: LD_INT 0
82982: PPUSH
// result := value - 1 ;
82983: LD_ADDR_VAR 0 2
82987: PUSH
82988: LD_VAR 0 1
82992: PUSH
82993: LD_INT 1
82995: MINUS
82996: ST_TO_ADDR
// end ;
82997: LD_VAR 0 2
83001: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
83002: LD_INT 0
83004: PPUSH
83005: PPUSH
83006: PPUSH
83007: PPUSH
83008: PPUSH
83009: PPUSH
83010: PPUSH
83011: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
83012: LD_VAR 0 1
83016: PPUSH
83017: LD_VAR 0 2
83021: PPUSH
83022: CALL_OW 488
83026: NOT
83027: PUSH
83028: LD_VAR 0 3
83032: PPUSH
83033: LD_VAR 0 4
83037: PPUSH
83038: CALL_OW 488
83042: NOT
83043: OR
83044: IFFALSE 83057
// begin result := - 1 ;
83046: LD_ADDR_VAR 0 5
83050: PUSH
83051: LD_INT 1
83053: NEG
83054: ST_TO_ADDR
// exit ;
83055: GO 83292
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
83057: LD_ADDR_VAR 0 12
83061: PUSH
83062: LD_VAR 0 1
83066: PPUSH
83067: LD_VAR 0 2
83071: PPUSH
83072: LD_VAR 0 3
83076: PPUSH
83077: LD_VAR 0 4
83081: PPUSH
83082: CALL 82142 0 4
83086: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
83087: LD_ADDR_VAR 0 11
83091: PUSH
83092: LD_VAR 0 1
83096: PPUSH
83097: LD_VAR 0 2
83101: PPUSH
83102: LD_VAR 0 12
83106: PUSH
83107: LD_INT 1
83109: ARRAY
83110: PPUSH
83111: LD_VAR 0 12
83115: PUSH
83116: LD_INT 2
83118: ARRAY
83119: PPUSH
83120: CALL_OW 298
83124: ST_TO_ADDR
// distance := 9999 ;
83125: LD_ADDR_VAR 0 10
83129: PUSH
83130: LD_INT 9999
83132: ST_TO_ADDR
// for i := 0 to 5 do
83133: LD_ADDR_VAR 0 6
83137: PUSH
83138: DOUBLE
83139: LD_INT 0
83141: DEC
83142: ST_TO_ADDR
83143: LD_INT 5
83145: PUSH
83146: FOR_TO
83147: IFFALSE 83290
// begin _x := ShiftX ( x1 , i , centerDist ) ;
83149: LD_ADDR_VAR 0 7
83153: PUSH
83154: LD_VAR 0 1
83158: PPUSH
83159: LD_VAR 0 6
83163: PPUSH
83164: LD_VAR 0 11
83168: PPUSH
83169: CALL_OW 272
83173: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
83174: LD_ADDR_VAR 0 8
83178: PUSH
83179: LD_VAR 0 2
83183: PPUSH
83184: LD_VAR 0 6
83188: PPUSH
83189: LD_VAR 0 11
83193: PPUSH
83194: CALL_OW 273
83198: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
83199: LD_VAR 0 7
83203: PPUSH
83204: LD_VAR 0 8
83208: PPUSH
83209: CALL_OW 488
83213: NOT
83214: IFFALSE 83218
// continue ;
83216: GO 83146
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
83218: LD_ADDR_VAR 0 9
83222: PUSH
83223: LD_VAR 0 12
83227: PUSH
83228: LD_INT 1
83230: ARRAY
83231: PPUSH
83232: LD_VAR 0 12
83236: PUSH
83237: LD_INT 2
83239: ARRAY
83240: PPUSH
83241: LD_VAR 0 7
83245: PPUSH
83246: LD_VAR 0 8
83250: PPUSH
83251: CALL_OW 298
83255: ST_TO_ADDR
// if tmp < distance then
83256: LD_VAR 0 9
83260: PUSH
83261: LD_VAR 0 10
83265: LESS
83266: IFFALSE 83288
// begin result := i ;
83268: LD_ADDR_VAR 0 5
83272: PUSH
83273: LD_VAR 0 6
83277: ST_TO_ADDR
// distance := tmp ;
83278: LD_ADDR_VAR 0 10
83282: PUSH
83283: LD_VAR 0 9
83287: ST_TO_ADDR
// end ; end ;
83288: GO 83146
83290: POP
83291: POP
// end ;
83292: LD_VAR 0 5
83296: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83297: LD_INT 0
83299: PPUSH
83300: PPUSH
// if not driver or not IsInUnit ( driver ) then
83301: LD_VAR 0 1
83305: NOT
83306: PUSH
83307: LD_VAR 0 1
83311: PPUSH
83312: CALL_OW 310
83316: NOT
83317: OR
83318: IFFALSE 83322
// exit ;
83320: GO 83412
// vehicle := IsInUnit ( driver ) ;
83322: LD_ADDR_VAR 0 3
83326: PUSH
83327: LD_VAR 0 1
83331: PPUSH
83332: CALL_OW 310
83336: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83337: LD_VAR 0 1
83341: PPUSH
83342: LD_STRING \
83344: PUSH
83345: LD_INT 0
83347: PUSH
83348: LD_INT 0
83350: PUSH
83351: LD_INT 0
83353: PUSH
83354: LD_INT 0
83356: PUSH
83357: LD_INT 0
83359: PUSH
83360: LD_INT 0
83362: PUSH
83363: EMPTY
83364: LIST
83365: LIST
83366: LIST
83367: LIST
83368: LIST
83369: LIST
83370: LIST
83371: PUSH
83372: LD_STRING E
83374: PUSH
83375: LD_INT 0
83377: PUSH
83378: LD_INT 0
83380: PUSH
83381: LD_VAR 0 3
83385: PUSH
83386: LD_INT 0
83388: PUSH
83389: LD_INT 0
83391: PUSH
83392: LD_INT 0
83394: PUSH
83395: EMPTY
83396: LIST
83397: LIST
83398: LIST
83399: LIST
83400: LIST
83401: LIST
83402: LIST
83403: PUSH
83404: EMPTY
83405: LIST
83406: LIST
83407: PPUSH
83408: CALL_OW 446
// end ;
83412: LD_VAR 0 2
83416: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83417: LD_INT 0
83419: PPUSH
83420: PPUSH
// if not driver or not IsInUnit ( driver ) then
83421: LD_VAR 0 1
83425: NOT
83426: PUSH
83427: LD_VAR 0 1
83431: PPUSH
83432: CALL_OW 310
83436: NOT
83437: OR
83438: IFFALSE 83442
// exit ;
83440: GO 83532
// vehicle := IsInUnit ( driver ) ;
83442: LD_ADDR_VAR 0 3
83446: PUSH
83447: LD_VAR 0 1
83451: PPUSH
83452: CALL_OW 310
83456: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83457: LD_VAR 0 1
83461: PPUSH
83462: LD_STRING \
83464: PUSH
83465: LD_INT 0
83467: PUSH
83468: LD_INT 0
83470: PUSH
83471: LD_INT 0
83473: PUSH
83474: LD_INT 0
83476: PUSH
83477: LD_INT 0
83479: PUSH
83480: LD_INT 0
83482: PUSH
83483: EMPTY
83484: LIST
83485: LIST
83486: LIST
83487: LIST
83488: LIST
83489: LIST
83490: LIST
83491: PUSH
83492: LD_STRING E
83494: PUSH
83495: LD_INT 0
83497: PUSH
83498: LD_INT 0
83500: PUSH
83501: LD_VAR 0 3
83505: PUSH
83506: LD_INT 0
83508: PUSH
83509: LD_INT 0
83511: PUSH
83512: LD_INT 0
83514: PUSH
83515: EMPTY
83516: LIST
83517: LIST
83518: LIST
83519: LIST
83520: LIST
83521: LIST
83522: LIST
83523: PUSH
83524: EMPTY
83525: LIST
83526: LIST
83527: PPUSH
83528: CALL_OW 447
// end ;
83532: LD_VAR 0 2
83536: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83537: LD_INT 0
83539: PPUSH
83540: PPUSH
83541: PPUSH
// tmp := [ ] ;
83542: LD_ADDR_VAR 0 5
83546: PUSH
83547: EMPTY
83548: ST_TO_ADDR
// for i in units do
83549: LD_ADDR_VAR 0 4
83553: PUSH
83554: LD_VAR 0 1
83558: PUSH
83559: FOR_IN
83560: IFFALSE 83598
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83562: LD_ADDR_VAR 0 5
83566: PUSH
83567: LD_VAR 0 5
83571: PPUSH
83572: LD_VAR 0 5
83576: PUSH
83577: LD_INT 1
83579: PLUS
83580: PPUSH
83581: LD_VAR 0 4
83585: PPUSH
83586: CALL_OW 256
83590: PPUSH
83591: CALL_OW 2
83595: ST_TO_ADDR
83596: GO 83559
83598: POP
83599: POP
// if not tmp then
83600: LD_VAR 0 5
83604: NOT
83605: IFFALSE 83609
// exit ;
83607: GO 83657
// if asc then
83609: LD_VAR 0 2
83613: IFFALSE 83637
// result := SortListByListAsc ( units , tmp ) else
83615: LD_ADDR_VAR 0 3
83619: PUSH
83620: LD_VAR 0 1
83624: PPUSH
83625: LD_VAR 0 5
83629: PPUSH
83630: CALL_OW 76
83634: ST_TO_ADDR
83635: GO 83657
// result := SortListByListDesc ( units , tmp ) ;
83637: LD_ADDR_VAR 0 3
83641: PUSH
83642: LD_VAR 0 1
83646: PPUSH
83647: LD_VAR 0 5
83651: PPUSH
83652: CALL_OW 77
83656: ST_TO_ADDR
// end ;
83657: LD_VAR 0 3
83661: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83662: LD_INT 0
83664: PPUSH
83665: PPUSH
// task := GetTaskList ( mech ) ;
83666: LD_ADDR_VAR 0 4
83670: PUSH
83671: LD_VAR 0 1
83675: PPUSH
83676: CALL_OW 437
83680: ST_TO_ADDR
// if not task then
83681: LD_VAR 0 4
83685: NOT
83686: IFFALSE 83690
// exit ;
83688: GO 83732
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83690: LD_ADDR_VAR 0 3
83694: PUSH
83695: LD_VAR 0 4
83699: PUSH
83700: LD_INT 1
83702: ARRAY
83703: PUSH
83704: LD_INT 1
83706: ARRAY
83707: PUSH
83708: LD_STRING r
83710: EQUAL
83711: PUSH
83712: LD_VAR 0 4
83716: PUSH
83717: LD_INT 1
83719: ARRAY
83720: PUSH
83721: LD_INT 4
83723: ARRAY
83724: PUSH
83725: LD_VAR 0 2
83729: EQUAL
83730: AND
83731: ST_TO_ADDR
// end ;
83732: LD_VAR 0 3
83736: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83737: LD_INT 0
83739: PPUSH
// SetDir ( unit , d ) ;
83740: LD_VAR 0 1
83744: PPUSH
83745: LD_VAR 0 4
83749: PPUSH
83750: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83754: LD_VAR 0 1
83758: PPUSH
83759: LD_VAR 0 2
83763: PPUSH
83764: LD_VAR 0 3
83768: PPUSH
83769: LD_VAR 0 5
83773: PPUSH
83774: CALL_OW 48
// end ;
83778: LD_VAR 0 6
83782: RET
// export function ToNaturalNumber ( number ) ; begin
83783: LD_INT 0
83785: PPUSH
// result := number div 1 ;
83786: LD_ADDR_VAR 0 2
83790: PUSH
83791: LD_VAR 0 1
83795: PUSH
83796: LD_INT 1
83798: DIV
83799: ST_TO_ADDR
// if number < 0 then
83800: LD_VAR 0 1
83804: PUSH
83805: LD_INT 0
83807: LESS
83808: IFFALSE 83818
// result := 0 ;
83810: LD_ADDR_VAR 0 2
83814: PUSH
83815: LD_INT 0
83817: ST_TO_ADDR
// end ;
83818: LD_VAR 0 2
83822: RET
// export function SortByClass ( units , class ) ; var un ; begin
83823: LD_INT 0
83825: PPUSH
83826: PPUSH
// if not units or not class then
83827: LD_VAR 0 1
83831: NOT
83832: PUSH
83833: LD_VAR 0 2
83837: NOT
83838: OR
83839: IFFALSE 83843
// exit ;
83841: GO 83938
// result := [ ] ;
83843: LD_ADDR_VAR 0 3
83847: PUSH
83848: EMPTY
83849: ST_TO_ADDR
// for un in units do
83850: LD_ADDR_VAR 0 4
83854: PUSH
83855: LD_VAR 0 1
83859: PUSH
83860: FOR_IN
83861: IFFALSE 83936
// if GetClass ( un ) = class then
83863: LD_VAR 0 4
83867: PPUSH
83868: CALL_OW 257
83872: PUSH
83873: LD_VAR 0 2
83877: EQUAL
83878: IFFALSE 83905
// result := Insert ( result , 1 , un ) else
83880: LD_ADDR_VAR 0 3
83884: PUSH
83885: LD_VAR 0 3
83889: PPUSH
83890: LD_INT 1
83892: PPUSH
83893: LD_VAR 0 4
83897: PPUSH
83898: CALL_OW 2
83902: ST_TO_ADDR
83903: GO 83934
// result := Replace ( result , result + 1 , un ) ;
83905: LD_ADDR_VAR 0 3
83909: PUSH
83910: LD_VAR 0 3
83914: PPUSH
83915: LD_VAR 0 3
83919: PUSH
83920: LD_INT 1
83922: PLUS
83923: PPUSH
83924: LD_VAR 0 4
83928: PPUSH
83929: CALL_OW 1
83933: ST_TO_ADDR
83934: GO 83860
83936: POP
83937: POP
// end ;
83938: LD_VAR 0 3
83942: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83943: LD_INT 0
83945: PPUSH
83946: PPUSH
83947: PPUSH
83948: PPUSH
83949: PPUSH
83950: PPUSH
83951: PPUSH
// result := [ ] ;
83952: LD_ADDR_VAR 0 4
83956: PUSH
83957: EMPTY
83958: ST_TO_ADDR
// if x - r < 0 then
83959: LD_VAR 0 1
83963: PUSH
83964: LD_VAR 0 3
83968: MINUS
83969: PUSH
83970: LD_INT 0
83972: LESS
83973: IFFALSE 83985
// min_x := 0 else
83975: LD_ADDR_VAR 0 8
83979: PUSH
83980: LD_INT 0
83982: ST_TO_ADDR
83983: GO 84001
// min_x := x - r ;
83985: LD_ADDR_VAR 0 8
83989: PUSH
83990: LD_VAR 0 1
83994: PUSH
83995: LD_VAR 0 3
83999: MINUS
84000: ST_TO_ADDR
// if y - r < 0 then
84001: LD_VAR 0 2
84005: PUSH
84006: LD_VAR 0 3
84010: MINUS
84011: PUSH
84012: LD_INT 0
84014: LESS
84015: IFFALSE 84027
// min_y := 0 else
84017: LD_ADDR_VAR 0 7
84021: PUSH
84022: LD_INT 0
84024: ST_TO_ADDR
84025: GO 84043
// min_y := y - r ;
84027: LD_ADDR_VAR 0 7
84031: PUSH
84032: LD_VAR 0 2
84036: PUSH
84037: LD_VAR 0 3
84041: MINUS
84042: ST_TO_ADDR
// max_x := x + r ;
84043: LD_ADDR_VAR 0 9
84047: PUSH
84048: LD_VAR 0 1
84052: PUSH
84053: LD_VAR 0 3
84057: PLUS
84058: ST_TO_ADDR
// max_y := y + r ;
84059: LD_ADDR_VAR 0 10
84063: PUSH
84064: LD_VAR 0 2
84068: PUSH
84069: LD_VAR 0 3
84073: PLUS
84074: ST_TO_ADDR
// for _x = min_x to max_x do
84075: LD_ADDR_VAR 0 5
84079: PUSH
84080: DOUBLE
84081: LD_VAR 0 8
84085: DEC
84086: ST_TO_ADDR
84087: LD_VAR 0 9
84091: PUSH
84092: FOR_TO
84093: IFFALSE 84194
// for _y = min_y to max_y do
84095: LD_ADDR_VAR 0 6
84099: PUSH
84100: DOUBLE
84101: LD_VAR 0 7
84105: DEC
84106: ST_TO_ADDR
84107: LD_VAR 0 10
84111: PUSH
84112: FOR_TO
84113: IFFALSE 84190
// begin if not ValidHex ( _x , _y ) then
84115: LD_VAR 0 5
84119: PPUSH
84120: LD_VAR 0 6
84124: PPUSH
84125: CALL_OW 488
84129: NOT
84130: IFFALSE 84134
// continue ;
84132: GO 84112
// if GetResourceTypeXY ( _x , _y ) then
84134: LD_VAR 0 5
84138: PPUSH
84139: LD_VAR 0 6
84143: PPUSH
84144: CALL_OW 283
84148: IFFALSE 84188
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
84150: LD_ADDR_VAR 0 4
84154: PUSH
84155: LD_VAR 0 4
84159: PPUSH
84160: LD_VAR 0 4
84164: PUSH
84165: LD_INT 1
84167: PLUS
84168: PPUSH
84169: LD_VAR 0 5
84173: PUSH
84174: LD_VAR 0 6
84178: PUSH
84179: EMPTY
84180: LIST
84181: LIST
84182: PPUSH
84183: CALL_OW 1
84187: ST_TO_ADDR
// end ;
84188: GO 84112
84190: POP
84191: POP
84192: GO 84092
84194: POP
84195: POP
// end ;
84196: LD_VAR 0 4
84200: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
84201: LD_INT 0
84203: PPUSH
84204: PPUSH
84205: PPUSH
84206: PPUSH
84207: PPUSH
84208: PPUSH
84209: PPUSH
84210: PPUSH
// if not units then
84211: LD_VAR 0 1
84215: NOT
84216: IFFALSE 84220
// exit ;
84218: GO 84744
// result := UnitFilter ( units , [ f_ok ] ) ;
84220: LD_ADDR_VAR 0 3
84224: PUSH
84225: LD_VAR 0 1
84229: PPUSH
84230: LD_INT 50
84232: PUSH
84233: EMPTY
84234: LIST
84235: PPUSH
84236: CALL_OW 72
84240: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
84241: LD_ADDR_VAR 0 8
84245: PUSH
84246: LD_VAR 0 1
84250: PUSH
84251: LD_INT 1
84253: ARRAY
84254: PPUSH
84255: CALL_OW 255
84259: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
84260: LD_ADDR_VAR 0 10
84264: PUSH
84265: LD_INT 29
84267: PUSH
84268: LD_INT 91
84270: PUSH
84271: LD_INT 49
84273: PUSH
84274: EMPTY
84275: LIST
84276: LIST
84277: LIST
84278: ST_TO_ADDR
// if not result then
84279: LD_VAR 0 3
84283: NOT
84284: IFFALSE 84288
// exit ;
84286: GO 84744
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
84288: LD_ADDR_VAR 0 5
84292: PUSH
84293: LD_INT 81
84295: PUSH
84296: LD_VAR 0 8
84300: PUSH
84301: EMPTY
84302: LIST
84303: LIST
84304: PPUSH
84305: CALL_OW 69
84309: ST_TO_ADDR
// for i in result do
84310: LD_ADDR_VAR 0 4
84314: PUSH
84315: LD_VAR 0 3
84319: PUSH
84320: FOR_IN
84321: IFFALSE 84742
// begin tag := GetTag ( i ) + 1 ;
84323: LD_ADDR_VAR 0 9
84327: PUSH
84328: LD_VAR 0 4
84332: PPUSH
84333: CALL_OW 110
84337: PUSH
84338: LD_INT 1
84340: PLUS
84341: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
84342: LD_ADDR_VAR 0 7
84346: PUSH
84347: LD_VAR 0 4
84351: PPUSH
84352: CALL_OW 250
84356: PPUSH
84357: LD_VAR 0 4
84361: PPUSH
84362: CALL_OW 251
84366: PPUSH
84367: LD_INT 6
84369: PPUSH
84370: CALL 83943 0 3
84374: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
84375: LD_VAR 0 4
84379: PPUSH
84380: CALL_OW 247
84384: PUSH
84385: LD_INT 2
84387: EQUAL
84388: PUSH
84389: LD_VAR 0 7
84393: AND
84394: PUSH
84395: LD_VAR 0 4
84399: PPUSH
84400: CALL_OW 264
84404: PUSH
84405: LD_VAR 0 10
84409: IN
84410: NOT
84411: AND
84412: IFFALSE 84451
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84414: LD_VAR 0 4
84418: PPUSH
84419: LD_VAR 0 7
84423: PUSH
84424: LD_INT 1
84426: ARRAY
84427: PUSH
84428: LD_INT 1
84430: ARRAY
84431: PPUSH
84432: LD_VAR 0 7
84436: PUSH
84437: LD_INT 1
84439: ARRAY
84440: PUSH
84441: LD_INT 2
84443: ARRAY
84444: PPUSH
84445: CALL_OW 116
84449: GO 84740
// if path > tag then
84451: LD_VAR 0 2
84455: PUSH
84456: LD_VAR 0 9
84460: GREATER
84461: IFFALSE 84669
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
84463: LD_ADDR_VAR 0 6
84467: PUSH
84468: LD_VAR 0 5
84472: PPUSH
84473: LD_INT 91
84475: PUSH
84476: LD_VAR 0 4
84480: PUSH
84481: LD_INT 8
84483: PUSH
84484: EMPTY
84485: LIST
84486: LIST
84487: LIST
84488: PPUSH
84489: CALL_OW 72
84493: ST_TO_ADDR
// if nearEnemy then
84494: LD_VAR 0 6
84498: IFFALSE 84567
// begin if GetWeapon ( i ) = ru_time_lapser then
84500: LD_VAR 0 4
84504: PPUSH
84505: CALL_OW 264
84509: PUSH
84510: LD_INT 49
84512: EQUAL
84513: IFFALSE 84541
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84515: LD_VAR 0 4
84519: PPUSH
84520: LD_VAR 0 6
84524: PPUSH
84525: LD_VAR 0 4
84529: PPUSH
84530: CALL_OW 74
84534: PPUSH
84535: CALL_OW 112
84539: GO 84565
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84541: LD_VAR 0 4
84545: PPUSH
84546: LD_VAR 0 6
84550: PPUSH
84551: LD_VAR 0 4
84555: PPUSH
84556: CALL_OW 74
84560: PPUSH
84561: CALL_OW 115
// end else
84565: GO 84667
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84567: LD_VAR 0 4
84571: PPUSH
84572: LD_VAR 0 2
84576: PUSH
84577: LD_VAR 0 9
84581: ARRAY
84582: PUSH
84583: LD_INT 1
84585: ARRAY
84586: PPUSH
84587: LD_VAR 0 2
84591: PUSH
84592: LD_VAR 0 9
84596: ARRAY
84597: PUSH
84598: LD_INT 2
84600: ARRAY
84601: PPUSH
84602: CALL_OW 297
84606: PUSH
84607: LD_INT 6
84609: GREATER
84610: IFFALSE 84653
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84612: LD_VAR 0 4
84616: PPUSH
84617: LD_VAR 0 2
84621: PUSH
84622: LD_VAR 0 9
84626: ARRAY
84627: PUSH
84628: LD_INT 1
84630: ARRAY
84631: PPUSH
84632: LD_VAR 0 2
84636: PUSH
84637: LD_VAR 0 9
84641: ARRAY
84642: PUSH
84643: LD_INT 2
84645: ARRAY
84646: PPUSH
84647: CALL_OW 114
84651: GO 84667
// SetTag ( i , tag ) ;
84653: LD_VAR 0 4
84657: PPUSH
84658: LD_VAR 0 9
84662: PPUSH
84663: CALL_OW 109
// end else
84667: GO 84740
// if enemy then
84669: LD_VAR 0 5
84673: IFFALSE 84740
// begin if GetWeapon ( i ) = ru_time_lapser then
84675: LD_VAR 0 4
84679: PPUSH
84680: CALL_OW 264
84684: PUSH
84685: LD_INT 49
84687: EQUAL
84688: IFFALSE 84716
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84690: LD_VAR 0 4
84694: PPUSH
84695: LD_VAR 0 5
84699: PPUSH
84700: LD_VAR 0 4
84704: PPUSH
84705: CALL_OW 74
84709: PPUSH
84710: CALL_OW 112
84714: GO 84740
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84716: LD_VAR 0 4
84720: PPUSH
84721: LD_VAR 0 5
84725: PPUSH
84726: LD_VAR 0 4
84730: PPUSH
84731: CALL_OW 74
84735: PPUSH
84736: CALL_OW 115
// end ; end ;
84740: GO 84320
84742: POP
84743: POP
// end ;
84744: LD_VAR 0 3
84748: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84749: LD_INT 0
84751: PPUSH
84752: PPUSH
84753: PPUSH
// if not unit or IsInUnit ( unit ) then
84754: LD_VAR 0 1
84758: NOT
84759: PUSH
84760: LD_VAR 0 1
84764: PPUSH
84765: CALL_OW 310
84769: OR
84770: IFFALSE 84774
// exit ;
84772: GO 84865
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84774: LD_ADDR_VAR 0 4
84778: PUSH
84779: LD_VAR 0 1
84783: PPUSH
84784: CALL_OW 250
84788: PPUSH
84789: LD_VAR 0 2
84793: PPUSH
84794: LD_INT 1
84796: PPUSH
84797: CALL_OW 272
84801: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84802: LD_ADDR_VAR 0 5
84806: PUSH
84807: LD_VAR 0 1
84811: PPUSH
84812: CALL_OW 251
84816: PPUSH
84817: LD_VAR 0 2
84821: PPUSH
84822: LD_INT 1
84824: PPUSH
84825: CALL_OW 273
84829: ST_TO_ADDR
// if ValidHex ( x , y ) then
84830: LD_VAR 0 4
84834: PPUSH
84835: LD_VAR 0 5
84839: PPUSH
84840: CALL_OW 488
84844: IFFALSE 84865
// ComTurnXY ( unit , x , y ) ;
84846: LD_VAR 0 1
84850: PPUSH
84851: LD_VAR 0 4
84855: PPUSH
84856: LD_VAR 0 5
84860: PPUSH
84861: CALL_OW 118
// end ;
84865: LD_VAR 0 3
84869: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84870: LD_INT 0
84872: PPUSH
84873: PPUSH
// result := false ;
84874: LD_ADDR_VAR 0 3
84878: PUSH
84879: LD_INT 0
84881: ST_TO_ADDR
// if not units then
84882: LD_VAR 0 2
84886: NOT
84887: IFFALSE 84891
// exit ;
84889: GO 84936
// for i in units do
84891: LD_ADDR_VAR 0 4
84895: PUSH
84896: LD_VAR 0 2
84900: PUSH
84901: FOR_IN
84902: IFFALSE 84934
// if See ( side , i ) then
84904: LD_VAR 0 1
84908: PPUSH
84909: LD_VAR 0 4
84913: PPUSH
84914: CALL_OW 292
84918: IFFALSE 84932
// begin result := true ;
84920: LD_ADDR_VAR 0 3
84924: PUSH
84925: LD_INT 1
84927: ST_TO_ADDR
// exit ;
84928: POP
84929: POP
84930: GO 84936
// end ;
84932: GO 84901
84934: POP
84935: POP
// end ;
84936: LD_VAR 0 3
84940: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84941: LD_INT 0
84943: PPUSH
84944: PPUSH
84945: PPUSH
84946: PPUSH
// if not unit or not points then
84947: LD_VAR 0 1
84951: NOT
84952: PUSH
84953: LD_VAR 0 2
84957: NOT
84958: OR
84959: IFFALSE 84963
// exit ;
84961: GO 85053
// dist := 99999 ;
84963: LD_ADDR_VAR 0 5
84967: PUSH
84968: LD_INT 99999
84970: ST_TO_ADDR
// for i in points do
84971: LD_ADDR_VAR 0 4
84975: PUSH
84976: LD_VAR 0 2
84980: PUSH
84981: FOR_IN
84982: IFFALSE 85051
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84984: LD_ADDR_VAR 0 6
84988: PUSH
84989: LD_VAR 0 1
84993: PPUSH
84994: LD_VAR 0 4
84998: PUSH
84999: LD_INT 1
85001: ARRAY
85002: PPUSH
85003: LD_VAR 0 4
85007: PUSH
85008: LD_INT 2
85010: ARRAY
85011: PPUSH
85012: CALL_OW 297
85016: ST_TO_ADDR
// if tmpDist < dist then
85017: LD_VAR 0 6
85021: PUSH
85022: LD_VAR 0 5
85026: LESS
85027: IFFALSE 85049
// begin result := i ;
85029: LD_ADDR_VAR 0 3
85033: PUSH
85034: LD_VAR 0 4
85038: ST_TO_ADDR
// dist := tmpDist ;
85039: LD_ADDR_VAR 0 5
85043: PUSH
85044: LD_VAR 0 6
85048: ST_TO_ADDR
// end ; end ;
85049: GO 84981
85051: POP
85052: POP
// end ;
85053: LD_VAR 0 3
85057: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
85058: LD_INT 0
85060: PPUSH
// uc_side := side ;
85061: LD_ADDR_OWVAR 20
85065: PUSH
85066: LD_VAR 0 1
85070: ST_TO_ADDR
// uc_nation := 3 ;
85071: LD_ADDR_OWVAR 21
85075: PUSH
85076: LD_INT 3
85078: ST_TO_ADDR
// vc_chassis := 25 ;
85079: LD_ADDR_OWVAR 37
85083: PUSH
85084: LD_INT 25
85086: ST_TO_ADDR
// vc_engine := engine_siberite ;
85087: LD_ADDR_OWVAR 39
85091: PUSH
85092: LD_INT 3
85094: ST_TO_ADDR
// vc_control := control_computer ;
85095: LD_ADDR_OWVAR 38
85099: PUSH
85100: LD_INT 3
85102: ST_TO_ADDR
// vc_weapon := 59 ;
85103: LD_ADDR_OWVAR 40
85107: PUSH
85108: LD_INT 59
85110: ST_TO_ADDR
// result := CreateVehicle ;
85111: LD_ADDR_VAR 0 5
85115: PUSH
85116: CALL_OW 45
85120: ST_TO_ADDR
// SetDir ( result , d ) ;
85121: LD_VAR 0 5
85125: PPUSH
85126: LD_VAR 0 4
85130: PPUSH
85131: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
85135: LD_VAR 0 5
85139: PPUSH
85140: LD_VAR 0 2
85144: PPUSH
85145: LD_VAR 0 3
85149: PPUSH
85150: LD_INT 0
85152: PPUSH
85153: CALL_OW 48
// end ;
85157: LD_VAR 0 5
85161: RET
