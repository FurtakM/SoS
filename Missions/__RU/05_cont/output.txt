// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 226 0 0
// omarStatus = 0 ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// stevensStatus = 0 ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// labDestroyed = 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  48: LD_ADDR_EXP 5
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  55: LD_ADDR_EXP 6
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  62: LD_ADDR_EXP 4
  66: PUSH
  67: LD_STRING 05_TanksIntro_1
  69: PPUSH
  70: EMPTY
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// actionTime = 0 0$00 ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  85: LD_ADDR_EXP 10
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
  93: LD_ADDR_EXP 11
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// sawArabianBase = false ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// sawApeman = false ;
 109: LD_ADDR_EXP 9
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// stevensPlaced = false ;
 117: LD_ADDR_EXP 14
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// stevensFollow = false ;
 125: LD_ADDR_EXP 15
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// stevensDepot = false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// stevensWasInDepot = false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// stevensCanExitMap = false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// cratesSpawned = 0 ;
 165: LD_ADDR_EXP 22
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// fastBreakthrough = false ;
 173: LD_ADDR_EXP 23
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// finishMissionBool = false ;
 181: LD_ADDR_EXP 24
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// omarCanExitMap = false ;
 189: LD_ADDR_EXP 20
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// arabianCanExitMap = false ;
 197: LD_ADDR_EXP 21
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// PrepareRussians ;
 205: CALL 885 0 0
// PrepareArabians ;
 209: CALL 1632 0 0
// Nef_PrepareNature ;
 213: CALL 19735 0 0
// MissionIntro ;
 217: CALL 2964 0 0
// end ; end_of_file
 221: LD_VAR 0 1
 225: RET
// export function InitMapConfig ; begin
 226: LD_INT 0
 228: PPUSH
// BaseMapConfig ;
 229: CALL 242 0 0
// MissionMapConfig ;
 233: CALL 332 0 0
// end ;
 237: LD_VAR 0 1
 241: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 242: LD_INT 0
 244: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 245: LD_ADDR_EXP 25
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 1
 258: PUSH
 259: LD_INT 0
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 2
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 2
 285: PUSH
 286: LD_INT 2
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: ST_TO_ADDR
// animalsAgression = 0 ;
 295: LD_ADDR_EXP 27
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// debugMode = 0 ;
 303: LD_ADDR_EXP 30
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// missionPrefix = 05_ ;
 311: LD_ADDR_EXP 28
 315: PUSH
 316: LD_STRING 05_
 318: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 319: LD_ADDR_EXP 29
 323: PUSH
 324: LD_STRING 04_
 326: ST_TO_ADDR
// end ;
 327: LD_VAR 0 1
 331: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 332: LD_INT 0
 334: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 ] [ Difficulty ] ;
 335: LD_ADDR_EXP 31
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: LD_INT 3
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_OWVAR 67
 358: ARRAY
 359: ST_TO_ADDR
// arabBreakthrough = [ 35 35$0 , 33 33$0 , 30 30$0 ] [ Difficulty ] ;
 360: LD_ADDR_EXP 32
 364: PUSH
 365: LD_INT 73500
 367: PUSH
 368: LD_INT 69300
 370: PUSH
 371: LD_INT 63000
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_OWVAR 67
 383: ARRAY
 384: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: LD_INT 1
 395: PUSH
 396: LD_INT 6
 398: PUSH
 399: LD_INT 3
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: ST_TO_ADDR
// arabianPatrolVehiclesAmount = 1 ;
 408: LD_ADDR_EXP 34
 412: PUSH
 413: LD_INT 1
 415: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 ] [ Difficulty ] ;
 416: LD_ADDR_EXP 35
 420: PUSH
 421: LD_INT 2
 423: PUSH
 424: LD_INT 3
 426: PUSH
 427: LD_INT 3
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 441: LD_ADDR_EXP 36
 445: PUSH
 446: LD_INT 108
 448: PUSH
 449: LD_INT 15
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PUSH
 456: LD_INT 102
 458: PUSH
 459: LD_INT 45
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: PUSH
 466: LD_INT 65
 468: PUSH
 469: LD_INT 23
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 37
 478: PUSH
 479: LD_INT 28
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 32
 488: PUSH
 489: LD_INT 40
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: LD_INT 45
 498: PUSH
 499: LD_INT 74
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 69
 508: PUSH
 509: LD_INT 98
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 101
 518: PUSH
 519: LD_INT 101
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 117
 528: PUSH
 529: LD_INT 84
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 158
 538: PUSH
 539: LD_INT 132
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// end ;
 558: LD_VAR 0 1
 562: RET
// every 0 0$1 trigger debugMode do var i ;
 563: LD_EXP 30
 567: IFFALSE 882
 569: GO 571
 571: DISABLE
 572: LD_INT 0
 574: PPUSH
// begin enable ;
 575: ENABLE
// FogOff ( your_side ) ;
 576: LD_OWVAR 2
 580: PPUSH
 581: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 585: LD_ADDR_VAR 0 1
 589: PUSH
 590: LD_INT 22
 592: PUSH
 593: LD_OWVAR 2
 597: PUSH
 598: EMPTY
 599: LIST
 600: LIST
 601: PUSH
 602: LD_INT 2
 604: PUSH
 605: LD_INT 21
 607: PUSH
 608: LD_INT 1
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: PUSH
 615: LD_INT 21
 617: PUSH
 618: LD_INT 2
 620: PUSH
 621: EMPTY
 622: LIST
 623: LIST
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: LIST
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PPUSH
 634: CALL_OW 69
 638: PUSH
 639: FOR_IN
 640: IFFALSE 656
// SetLives ( i , 1000 ) ;
 642: LD_VAR 0 1
 646: PPUSH
 647: LD_INT 1000
 649: PPUSH
 650: CALL_OW 234
 654: GO 639
 656: POP
 657: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 658: LD_ADDR_VAR 0 1
 662: PUSH
 663: LD_INT 22
 665: PUSH
 666: LD_OWVAR 2
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 21
 677: PUSH
 678: LD_INT 1
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PPUSH
 689: CALL_OW 69
 693: PUSH
 694: FOR_IN
 695: IFFALSE 759
// begin SetSkill ( i , skill_combat , 10 ) ;
 697: LD_VAR 0 1
 701: PPUSH
 702: LD_INT 1
 704: PPUSH
 705: LD_INT 10
 707: PPUSH
 708: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 712: LD_VAR 0 1
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 10
 722: PPUSH
 723: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 727: LD_VAR 0 1
 731: PPUSH
 732: LD_INT 3
 734: PPUSH
 735: LD_INT 10
 737: PPUSH
 738: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 742: LD_VAR 0 1
 746: PPUSH
 747: LD_INT 4
 749: PPUSH
 750: LD_INT 10
 752: PPUSH
 753: CALL_OW 237
// end ;
 757: GO 694
 759: POP
 760: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 761: LD_ADDR_VAR 0 1
 765: PUSH
 766: LD_INT 22
 768: PUSH
 769: LD_OWVAR 2
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 2
 780: PUSH
 781: LD_INT 30
 783: PUSH
 784: LD_INT 0
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PUSH
 791: LD_INT 30
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PPUSH
 810: CALL_OW 69
 814: PUSH
 815: FOR_IN
 816: IFFALSE 880
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 818: LD_VAR 0 1
 822: PPUSH
 823: CALL_OW 274
 827: PPUSH
 828: LD_INT 1
 830: PPUSH
 831: LD_INT 9999
 833: PPUSH
 834: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 838: LD_VAR 0 1
 842: PPUSH
 843: CALL_OW 274
 847: PPUSH
 848: LD_INT 2
 850: PPUSH
 851: LD_INT 9999
 853: PPUSH
 854: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 858: LD_VAR 0 1
 862: PPUSH
 863: CALL_OW 274
 867: PPUSH
 868: LD_INT 3
 870: PPUSH
 871: LD_INT 9999
 873: PPUSH
 874: CALL_OW 277
// end ;
 878: GO 815
 880: POP
 881: POP
// end ; end_of_file
 882: PPOPN 1
 884: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 885: LD_INT 0
 887: PPUSH
// PrepareHeroes ;
 888: CALL 897 0 0
// end ;
 892: LD_VAR 0 1
 896: RET
// function PrepareHeroes ; var i , car ; begin
 897: LD_INT 0
 899: PPUSH
 900: PPUSH
 901: PPUSH
// ruCars = [ ] ;
 902: LD_ADDR_EXP 46
 906: PUSH
 907: EMPTY
 908: ST_TO_ADDR
// uc_side = 3 ;
 909: LD_ADDR_OWVAR 20
 913: PUSH
 914: LD_INT 3
 916: ST_TO_ADDR
// uc_nation = 3 ;
 917: LD_ADDR_OWVAR 21
 921: PUSH
 922: LD_INT 3
 924: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 925: LD_ADDR_EXP 37
 929: PUSH
 930: LD_STRING Burlak
 932: PPUSH
 933: LD_INT 1
 935: PPUSH
 936: LD_INT 3
 938: PPUSH
 939: CALL 8400 0 3
 943: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 944: LD_ADDR_EXP 42
 948: PUSH
 949: LD_STRING Titov
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: CALL 8400 0 3
 962: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 963: LD_ADDR_EXP 43
 967: PUSH
 968: LD_STRING Dolgov
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: LD_INT 4
 976: PPUSH
 977: CALL 8400 0 3
 981: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
 982: LD_ADDR_EXP 44
 986: PUSH
 987: LD_STRING Lipshchin
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: LD_INT 1
 995: PPUSH
 996: CALL 8400 0 3
1000: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1001: LD_ADDR_EXP 38
1005: PUSH
1006: LD_STRING Karamazov
1008: PPUSH
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 2
1014: PPUSH
1015: CALL 8400 0 3
1019: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1020: LD_ADDR_EXP 39
1024: PUSH
1025: LD_STRING Petrovova
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 8400 0 3
1038: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1039: LD_ADDR_EXP 40
1043: PUSH
1044: LD_STRING Gleb
1046: PPUSH
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 1
1052: PPUSH
1053: CALL 8400 0 3
1057: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1058: LD_ADDR_EXP 41
1062: PUSH
1063: LD_STRING Petrosyan
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: LD_INT 4
1071: PPUSH
1072: CALL 8400 0 3
1076: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1077: LD_ADDR_EXP 45
1081: PUSH
1082: LD_STRING Platonov
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL 8400 0 3
1095: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1096: LD_ADDR_VAR 0 2
1100: PUSH
1101: DOUBLE
1102: LD_INT 1
1104: DEC
1105: ST_TO_ADDR
1106: LD_EXP 4
1110: PUSH
1111: FOR_TO
1112: IFFALSE 1490
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1114: LD_ADDR_OWVAR 37
1118: PUSH
1119: LD_EXP 4
1123: PUSH
1124: LD_VAR 0 2
1128: ARRAY
1129: PUSH
1130: LD_INT 1
1132: ARRAY
1133: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1134: LD_ADDR_OWVAR 39
1138: PUSH
1139: LD_EXP 4
1143: PUSH
1144: LD_VAR 0 2
1148: ARRAY
1149: PUSH
1150: LD_INT 2
1152: ARRAY
1153: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1154: LD_ADDR_OWVAR 38
1158: PUSH
1159: LD_EXP 4
1163: PUSH
1164: LD_VAR 0 2
1168: ARRAY
1169: PUSH
1170: LD_INT 3
1172: ARRAY
1173: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1174: LD_ADDR_OWVAR 40
1178: PUSH
1179: LD_EXP 4
1183: PUSH
1184: LD_VAR 0 2
1188: ARRAY
1189: PUSH
1190: LD_INT 4
1192: ARRAY
1193: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1194: LD_ADDR_OWVAR 24
1198: PUSH
1199: LD_INT 3
1201: PPUSH
1202: LD_INT 4
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1210: LD_ADDR_OWVAR 41
1214: PUSH
1215: LD_INT 25
1217: PPUSH
1218: LD_INT 40
1220: PPUSH
1221: CALL_OW 12
1225: ST_TO_ADDR
// car := CreateVehicle ;
1226: LD_ADDR_VAR 0 3
1230: PUSH
1231: CALL_OW 45
1235: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1236: LD_ADDR_EXP 46
1240: PUSH
1241: LD_EXP 46
1245: PUSH
1246: LD_VAR 0 3
1250: ADD
1251: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1252: LD_EXP 4
1256: PUSH
1257: LD_VAR 0 2
1261: ARRAY
1262: PUSH
1263: LD_INT 5
1265: ARRAY
1266: PUSH
1267: LD_STRING Bur
1269: DOUBLE
1270: EQUAL
1271: IFTRUE 1275
1273: GO 1292
1275: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1276: LD_EXP 37
1280: PPUSH
1281: LD_VAR 0 3
1285: PPUSH
1286: CALL_OW 52
1290: GO 1468
1292: LD_STRING Kar
1294: DOUBLE
1295: EQUAL
1296: IFTRUE 1300
1298: GO 1317
1300: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1301: LD_EXP 38
1305: PPUSH
1306: LD_VAR 0 3
1310: PPUSH
1311: CALL_OW 52
1315: GO 1468
1317: LD_STRING Ptr
1319: DOUBLE
1320: EQUAL
1321: IFTRUE 1325
1323: GO 1342
1325: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1326: LD_EXP 39
1330: PPUSH
1331: LD_VAR 0 3
1335: PPUSH
1336: CALL_OW 52
1340: GO 1468
1342: LD_STRING Glb
1344: DOUBLE
1345: EQUAL
1346: IFTRUE 1350
1348: GO 1367
1350: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1351: LD_EXP 40
1355: PPUSH
1356: LD_VAR 0 3
1360: PPUSH
1361: CALL_OW 52
1365: GO 1468
1367: LD_STRING Pet
1369: DOUBLE
1370: EQUAL
1371: IFTRUE 1375
1373: GO 1392
1375: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1376: LD_EXP 41
1380: PPUSH
1381: LD_VAR 0 3
1385: PPUSH
1386: CALL_OW 52
1390: GO 1468
1392: LD_STRING Dol
1394: DOUBLE
1395: EQUAL
1396: IFTRUE 1400
1398: GO 1417
1400: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1401: LD_EXP 43
1405: PPUSH
1406: LD_VAR 0 3
1410: PPUSH
1411: CALL_OW 52
1415: GO 1468
1417: LD_STRING Lip
1419: DOUBLE
1420: EQUAL
1421: IFTRUE 1425
1423: GO 1442
1425: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1426: LD_EXP 44
1430: PPUSH
1431: LD_VAR 0 3
1435: PPUSH
1436: CALL_OW 52
1440: GO 1468
1442: LD_STRING Tit
1444: DOUBLE
1445: EQUAL
1446: IFTRUE 1450
1448: GO 1467
1450: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1451: LD_EXP 42
1455: PPUSH
1456: LD_VAR 0 3
1460: PPUSH
1461: CALL_OW 52
1465: GO 1468
1467: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1468: LD_VAR 0 3
1472: PPUSH
1473: LD_INT 251
1475: PPUSH
1476: LD_INT 800
1478: PPUSH
1479: CALL_OW 12
1483: PPUSH
1484: CALL_OW 234
// end ;
1488: GO 1111
1490: POP
1491: POP
// for i in ruCars do
1492: LD_ADDR_VAR 0 2
1496: PUSH
1497: LD_EXP 46
1501: PUSH
1502: FOR_IN
1503: IFFALSE 1522
// PlaceUnitArea ( i , ru_place2 , false ) ;
1505: LD_VAR 0 2
1509: PPUSH
1510: LD_INT 18
1512: PPUSH
1513: LD_INT 0
1515: PPUSH
1516: CALL_OW 49
1520: GO 1502
1522: POP
1523: POP
// RevealFogArea ( 3 , co_vidi ) ;
1524: LD_INT 3
1526: PPUSH
1527: LD_INT 19
1529: PPUSH
1530: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1534: LD_EXP 46
1538: PPUSH
1539: LD_INT 3
1541: PPUSH
1542: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1546: LD_INT 4
1548: PPUSH
1549: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1553: LD_EXP 37
1557: PPUSH
1558: CALL_OW 310
1562: PPUSH
1563: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1567: LD_INT 3
1569: PPUSH
1570: LD_INT 22
1572: PUSH
1573: LD_INT 3
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PUSH
1580: LD_INT 21
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 70
1598: PUSH
1599: LD_INT 5
1601: LESS
1602: IFFALSE 1627
// begin wait ( 0 0$1 ) ;
1604: LD_INT 35
1606: PPUSH
1607: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1611: LD_EXP 37
1615: PPUSH
1616: CALL_OW 310
1620: PPUSH
1621: CALL_OW 85
// end ;
1625: GO 1567
// end ; end_of_file
1627: LD_VAR 0 1
1631: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts , arabianPatrolTroops ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1632: LD_INT 0
1634: PPUSH
// arabianUnitsInBase = [ ] ;
1635: LD_ADDR_EXP 49
1639: PUSH
1640: EMPTY
1641: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1642: LD_ADDR_EXP 51
1646: PUSH
1647: EMPTY
1648: ST_TO_ADDR
// arabianPatrolTroops = [ ] ;
1649: LD_ADDR_EXP 52
1653: PUSH
1654: EMPTY
1655: ST_TO_ADDR
// arabLeftExit = true ;
1656: LD_ADDR_EXP 53
1660: PUSH
1661: LD_INT 1
1663: ST_TO_ADDR
// PrepareHeroes ;
1664: CALL 1697 0 0
// PrepareBuildings ;
1668: CALL 1763 0 0
// PrepareUnits ;
1672: CALL 2115 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1676: LD_EXP 34
1680: PPUSH
1681: LD_INT 42
1683: PPUSH
1684: CALL 2652 0 2
// PrepareArabianHovercraft ;
1688: CALL 2811 0 0
// end ;
1692: LD_VAR 0 1
1696: RET
// function PrepareHeroes ; begin
1697: LD_INT 0
1699: PPUSH
// uc_side = 2 ;
1700: LD_ADDR_OWVAR 20
1704: PUSH
1705: LD_INT 2
1707: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1708: LD_ADDR_EXP 47
1712: PUSH
1713: LD_STRING Heike
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL 8400 0 3
1726: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1727: LD_ADDR_EXP 48
1731: PUSH
1732: LD_STRING Omar
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: LD_INT 11
1740: PPUSH
1741: CALL 8400 0 3
1745: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1746: LD_EXP 48
1750: PPUSH
1751: LD_INT 1
1753: PPUSH
1754: CALL_OW 52
// end ;
1758: LD_VAR 0 1
1762: RET
// function PrepareBuildings ; var depot ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
// uc_side = 2 ;
1767: LD_ADDR_OWVAR 20
1771: PUSH
1772: LD_INT 2
1774: ST_TO_ADDR
// uc_nation = nation_arabian ;
1775: LD_ADDR_OWVAR 21
1779: PUSH
1780: LD_INT 2
1782: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1783: LD_ADDR_OWVAR 43
1787: PUSH
1788: LD_EXP 31
1792: ST_TO_ADDR
// bc_type = b_breastwork ;
1793: LD_ADDR_OWVAR 42
1797: PUSH
1798: LD_INT 31
1800: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1801: LD_INT 118
1803: PPUSH
1804: LD_INT 63
1806: PPUSH
1807: LD_INT 1
1809: PPUSH
1810: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1814: LD_INT 120
1816: PPUSH
1817: LD_INT 66
1819: PPUSH
1820: LD_INT 1
1822: PPUSH
1823: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1827: LD_INT 123
1829: PPUSH
1830: LD_INT 73
1832: PPUSH
1833: LD_INT 1
1835: PPUSH
1836: CALL_OW 47
// if Difficulty = 2 then
1840: LD_OWVAR 67
1844: PUSH
1845: LD_INT 2
1847: EQUAL
1848: IFFALSE 1863
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1850: LD_INT 145
1852: PPUSH
1853: LD_INT 83
1855: PPUSH
1856: LD_INT 0
1858: PPUSH
1859: CALL_OW 47
// if Difficulty = 3 then
1863: LD_OWVAR 67
1867: PUSH
1868: LD_INT 3
1870: EQUAL
1871: IFFALSE 1899
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1873: LD_INT 145
1875: PPUSH
1876: LD_INT 83
1878: PPUSH
1879: LD_INT 0
1881: PPUSH
1882: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1886: LD_INT 151
1888: PPUSH
1889: LD_INT 81
1891: PPUSH
1892: LD_INT 5
1894: PPUSH
1895: CALL_OW 47
// end ; bc_type = b_depot ;
1899: LD_ADDR_OWVAR 42
1903: PUSH
1904: LD_INT 0
1906: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: LD_INT 124
1914: PPUSH
1915: LD_INT 60
1917: PPUSH
1918: LD_INT 2
1920: PPUSH
1921: CALL_OW 47
1925: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1926: LD_VAR 0 2
1930: PPUSH
1931: CALL_OW 274
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: LD_INT 3000
1941: PPUSH
1942: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1946: LD_INT 131
1948: PPUSH
1949: LD_INT 51
1951: PPUSH
1952: LD_INT 2
1954: PPUSH
1955: CALL_OW 441
// bc_type = b_oil_mine ;
1959: LD_ADDR_OWVAR 42
1963: PUSH
1964: LD_INT 29
1966: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
1967: LD_INT 131
1969: PPUSH
1970: LD_INT 51
1972: PPUSH
1973: LD_INT 2
1975: PPUSH
1976: CALL_OW 47
// case Difficulty of 1 :
1980: LD_OWVAR 67
1984: PUSH
1985: LD_INT 1
1987: DOUBLE
1988: EQUAL
1989: IFTRUE 1993
1991: GO 2009
1993: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
1994: LD_INT 48
1996: PPUSH
1997: LD_INT 2
1999: PPUSH
2000: LD_INT 2
2002: PPUSH
2003: CALL_OW 322
// end ; 2 :
2007: GO 2110
2009: LD_INT 2
2011: DOUBLE
2012: EQUAL
2013: IFTRUE 2017
2015: GO 2046
2017: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2018: LD_INT 48
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2031: LD_INT 51
2033: PPUSH
2034: LD_INT 2
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: CALL_OW 322
// end ; 3 :
2044: GO 2110
2046: LD_INT 3
2048: DOUBLE
2049: EQUAL
2050: IFTRUE 2054
2052: GO 2109
2054: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2055: LD_INT 48
2057: PPUSH
2058: LD_INT 2
2060: PPUSH
2061: LD_INT 2
2063: PPUSH
2064: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2068: LD_INT 51
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: LD_INT 2
2076: PPUSH
2077: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2081: LD_INT 49
2083: PPUSH
2084: LD_INT 2
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2094: LD_INT 52
2096: PPUSH
2097: LD_INT 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: CALL_OW 322
// end ; end ;
2107: GO 2110
2109: POP
// end ;
2110: LD_VAR 0 1
2114: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2115: LD_INT 0
2117: PPUSH
2118: PPUSH
2119: PPUSH
2120: PPUSH
// uc_side = 2 ;
2121: LD_ADDR_OWVAR 20
2125: PUSH
2126: LD_INT 2
2128: ST_TO_ADDR
// uc_nation = 2 ;
2129: LD_ADDR_OWVAR 21
2133: PUSH
2134: LD_INT 2
2136: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2137: LD_ADDR_VAR 0 4
2141: PUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 2
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 30
2154: PUSH
2155: LD_INT 31
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: PPUSH
2166: CALL_OW 69
2170: PUSH
2171: FOR_IN
2172: IFFALSE 2228
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2174: LD_INT 0
2176: PPUSH
2177: LD_EXP 31
2181: PPUSH
2182: CALL_OW 381
// unit = CreateHuman ;
2186: LD_ADDR_VAR 0 3
2190: PUSH
2191: CALL_OW 44
2195: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2196: LD_VAR 0 3
2200: PPUSH
2201: LD_VAR 0 4
2205: PPUSH
2206: CALL 9000 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2210: LD_ADDR_EXP 49
2214: PUSH
2215: LD_EXP 49
2219: PUSH
2220: LD_VAR 0 3
2224: ADD
2225: ST_TO_ADDR
// end ;
2226: GO 2171
2228: POP
2229: POP
// for i := 1 to arabianUnits [ 1 ] do
2230: LD_ADDR_VAR 0 2
2234: PUSH
2235: DOUBLE
2236: LD_INT 1
2238: DEC
2239: ST_TO_ADDR
2240: LD_EXP 33
2244: PUSH
2245: LD_INT 1
2247: ARRAY
2248: PUSH
2249: FOR_TO
2250: IFFALSE 2307
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2252: LD_INT 0
2254: PPUSH
2255: LD_EXP 31
2259: PPUSH
2260: CALL_OW 381
// unit = CreateHuman ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: CALL_OW 44
2273: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2274: LD_VAR 0 3
2278: PPUSH
2279: LD_INT 38
2281: PPUSH
2282: LD_INT 0
2284: PPUSH
2285: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2289: LD_ADDR_EXP 49
2293: PUSH
2294: LD_EXP 49
2298: PUSH
2299: LD_VAR 0 3
2303: ADD
2304: ST_TO_ADDR
// end ;
2305: GO 2249
2307: POP
2308: POP
// for i := 1 to arabianUnits [ 2 ] do
2309: LD_ADDR_VAR 0 2
2313: PUSH
2314: DOUBLE
2315: LD_INT 1
2317: DEC
2318: ST_TO_ADDR
2319: LD_EXP 33
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: PUSH
2328: FOR_TO
2329: IFFALSE 2386
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2331: LD_INT 0
2333: PPUSH
2334: LD_EXP 31
2338: PPUSH
2339: CALL_OW 382
// unit = CreateHuman ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: CALL_OW 44
2352: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2353: LD_VAR 0 3
2357: PPUSH
2358: LD_INT 38
2360: PPUSH
2361: LD_INT 0
2363: PPUSH
2364: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2368: LD_ADDR_EXP 49
2372: PUSH
2373: LD_EXP 49
2377: PUSH
2378: LD_VAR 0 3
2382: ADD
2383: ST_TO_ADDR
// end ;
2384: GO 2328
2386: POP
2387: POP
// for i := 1 to arabianUnits [ 3 ] do
2388: LD_ADDR_VAR 0 2
2392: PUSH
2393: DOUBLE
2394: LD_INT 1
2396: DEC
2397: ST_TO_ADDR
2398: LD_EXP 33
2402: PUSH
2403: LD_INT 3
2405: ARRAY
2406: PUSH
2407: FOR_TO
2408: IFFALSE 2465
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2410: LD_INT 0
2412: PPUSH
2413: LD_EXP 31
2417: PPUSH
2418: CALL_OW 383
// unit = CreateHuman ;
2422: LD_ADDR_VAR 0 3
2426: PUSH
2427: CALL_OW 44
2431: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2432: LD_VAR 0 3
2436: PPUSH
2437: LD_INT 38
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2447: LD_ADDR_EXP 49
2451: PUSH
2452: LD_EXP 49
2456: PUSH
2457: LD_VAR 0 3
2461: ADD
2462: ST_TO_ADDR
// end ;
2463: GO 2407
2465: POP
2466: POP
// for i := 1 to arabianUnits [ 4 ] do
2467: LD_ADDR_VAR 0 2
2471: PUSH
2472: DOUBLE
2473: LD_INT 1
2475: DEC
2476: ST_TO_ADDR
2477: LD_EXP 33
2481: PUSH
2482: LD_INT 4
2484: ARRAY
2485: PUSH
2486: FOR_TO
2487: IFFALSE 2544
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2489: LD_INT 0
2491: PPUSH
2492: LD_EXP 31
2496: PPUSH
2497: CALL_OW 384
// unit = CreateHuman ;
2501: LD_ADDR_VAR 0 3
2505: PUSH
2506: CALL_OW 44
2510: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2511: LD_VAR 0 3
2515: PPUSH
2516: LD_INT 38
2518: PPUSH
2519: LD_INT 0
2521: PPUSH
2522: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2526: LD_ADDR_EXP 49
2530: PUSH
2531: LD_EXP 49
2535: PUSH
2536: LD_VAR 0 3
2540: ADD
2541: ST_TO_ADDR
// end ;
2542: GO 2486
2544: POP
2545: POP
// end ;
2546: LD_VAR 0 1
2550: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2551: LD_INT 0
2553: PPUSH
2554: PPUSH
2555: PPUSH
// uc_side = 2 ;
2556: LD_ADDR_OWVAR 20
2560: PUSH
2561: LD_INT 2
2563: ST_TO_ADDR
// uc_nation = 2 ;
2564: LD_ADDR_OWVAR 21
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2572: LD_ADDR_VAR 0 2
2576: PUSH
2577: DOUBLE
2578: LD_INT 1
2580: DEC
2581: ST_TO_ADDR
2582: LD_EXP 35
2586: PUSH
2587: FOR_TO
2588: IFFALSE 2645
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2590: LD_INT 0
2592: PPUSH
2593: LD_EXP 31
2597: PPUSH
2598: CALL_OW 381
// unit = CreateHuman ;
2602: LD_ADDR_VAR 0 3
2606: PUSH
2607: CALL_OW 44
2611: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2612: LD_VAR 0 3
2616: PPUSH
2617: LD_INT 45
2619: PPUSH
2620: LD_INT 0
2622: PPUSH
2623: CALL_OW 49
// arabianPatrolTroops = arabianPatrolTroops ^ unit ;
2627: LD_ADDR_EXP 52
2631: PUSH
2632: LD_EXP 52
2636: PUSH
2637: LD_VAR 0 3
2641: ADD
2642: ST_TO_ADDR
// end ;
2643: GO 2587
2645: POP
2646: POP
// end ;
2647: LD_VAR 0 1
2651: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2652: LD_INT 0
2654: PPUSH
2655: PPUSH
2656: PPUSH
// uc_side = 2 ;
2657: LD_ADDR_OWVAR 20
2661: PUSH
2662: LD_INT 2
2664: ST_TO_ADDR
// uc_nation = 2 ;
2665: LD_ADDR_OWVAR 21
2669: PUSH
2670: LD_INT 2
2672: ST_TO_ADDR
// for i := 1 to amount do
2673: LD_ADDR_VAR 0 4
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_VAR 0 1
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2804
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2691: LD_INT 14
2693: PPUSH
2694: LD_INT 1
2696: PPUSH
2697: LD_INT 1
2699: PPUSH
2700: LD_INT 26
2702: PUSH
2703: LD_INT 25
2705: PUSH
2706: LD_INT 27
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 1
2716: PPUSH
2717: LD_INT 3
2719: PPUSH
2720: CALL_OW 12
2724: ARRAY
2725: PPUSH
2726: LD_INT 100
2728: PPUSH
2729: CALL 27764 0 5
// veh = CreateVehicle ;
2733: LD_ADDR_VAR 0 5
2737: PUSH
2738: CALL_OW 45
2742: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2743: LD_ADDR_EXP 50
2747: PUSH
2748: LD_EXP 50
2752: PUSH
2753: LD_VAR 0 5
2757: ADD
2758: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2759: LD_VAR 0 5
2763: PPUSH
2764: LD_VAR 0 2
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2776: LD_INT 0
2778: PPUSH
2779: LD_EXP 31
2783: PPUSH
2784: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2788: CALL_OW 44
2792: PPUSH
2793: LD_VAR 0 5
2797: PPUSH
2798: CALL_OW 52
// end ;
2802: GO 2688
2804: POP
2805: POP
// end ;
2806: LD_VAR 0 3
2810: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2811: LD_INT 0
2813: PPUSH
2814: PPUSH
2815: PPUSH
// uc_side = 2 ;
2816: LD_ADDR_OWVAR 20
2820: PUSH
2821: LD_INT 2
2823: ST_TO_ADDR
// uc_nation = 2 ;
2824: LD_ADDR_OWVAR 21
2828: PUSH
2829: LD_INT 2
2831: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: DOUBLE
2838: LD_INT 1
2840: DEC
2841: ST_TO_ADDR
2842: LD_EXP 34
2846: PUSH
2847: FOR_TO
2848: IFFALSE 2957
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2850: LD_INT 11
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_INT 1
2858: PPUSH
2859: LD_INT 24
2861: PUSH
2862: LD_INT 23
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PUSH
2869: LD_INT 1
2871: PPUSH
2872: LD_INT 2
2874: PPUSH
2875: CALL_OW 12
2879: ARRAY
2880: PPUSH
2881: LD_INT 100
2883: PPUSH
2884: CALL 27764 0 5
// veh = CreateVehicle ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: CALL_OW 45
2897: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2898: LD_ADDR_EXP 51
2902: PUSH
2903: LD_EXP 51
2907: PUSH
2908: LD_VAR 0 3
2912: ADD
2913: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2914: LD_VAR 0 3
2918: PPUSH
2919: LD_INT 47
2921: PPUSH
2922: LD_INT 0
2924: PPUSH
2925: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2929: LD_INT 0
2931: PPUSH
2932: LD_EXP 31
2936: PPUSH
2937: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2941: CALL_OW 44
2945: PPUSH
2946: LD_VAR 0 3
2950: PPUSH
2951: CALL_OW 52
// end ;
2955: GO 2847
2957: POP
2958: POP
// end ; end_of_file
2959: LD_VAR 0 1
2963: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
2964: LD_INT 0
2966: PPUSH
2967: PPUSH
2968: PPUSH
2969: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
2970: LD_ADDR_VAR 0 3
2974: PUSH
2975: LD_INT 66
2977: PUSH
2978: LD_INT 87
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: PUSH
2985: LD_INT 66
2987: PUSH
2988: LD_INT 86
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PUSH
2995: LD_INT 67
2997: PUSH
2998: LD_INT 86
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 69
3007: PUSH
3008: LD_INT 87
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 70
3017: PUSH
3018: LD_INT 88
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 71
3027: PUSH
3028: LD_INT 89
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 72
3037: PUSH
3038: LD_INT 90
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 72
3047: PUSH
3048: LD_INT 91
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3065: LD_INT 280
3067: PPUSH
3068: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3072: LD_EXP 37
3076: PPUSH
3077: LD_STRING DStart-Bur-1
3079: PPUSH
3080: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3084: LD_EXP 45
3088: PPUSH
3089: LD_STRING DStart-Pla-1
3091: PPUSH
3092: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3096: LD_EXP 37
3100: PPUSH
3101: LD_STRING DStart-Bur-2
3103: PPUSH
3104: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3108: LD_EXP 45
3112: PPUSH
3113: LD_STRING DStart-Pla-2
3115: PPUSH
3116: CALL_OW 94
// x = 0 ;
3120: LD_ADDR_VAR 0 4
3124: PUSH
3125: LD_INT 0
3127: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3128: LD_ADDR_VAR 0 2
3132: PUSH
3133: LD_INT 22
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 21
3145: PUSH
3146: LD_INT 1
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: PPUSH
3157: CALL_OW 69
3161: PUSH
3162: FOR_IN
3163: IFFALSE 3251
// begin ComExitVehicle ( unit ) ;
3165: LD_VAR 0 2
3169: PPUSH
3170: CALL_OW 121
// wait ( 0 0$1 ) ;
3174: LD_INT 35
3176: PPUSH
3177: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3181: LD_VAR 0 2
3185: PPUSH
3186: LD_VAR 0 3
3190: PUSH
3191: LD_VAR 0 4
3195: ARRAY
3196: PUSH
3197: LD_INT 1
3199: ARRAY
3200: PPUSH
3201: LD_VAR 0 3
3205: PUSH
3206: LD_VAR 0 4
3210: ARRAY
3211: PUSH
3212: LD_INT 2
3214: ARRAY
3215: PPUSH
3216: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_INT 69
3227: PPUSH
3228: LD_INT 96
3230: PPUSH
3231: CALL_OW 178
// x = x + 1 ;
3235: LD_ADDR_VAR 0 4
3239: PUSH
3240: LD_VAR 0 4
3244: PUSH
3245: LD_INT 1
3247: PLUS
3248: ST_TO_ADDR
// end ;
3249: GO 3162
3251: POP
3252: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3253: LD_EXP 37
3257: PPUSH
3258: CALL_OW 87
// x = 0 ;
3262: LD_ADDR_VAR 0 4
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3270: LD_ADDR_VAR 0 2
3274: PUSH
3275: LD_INT 22
3277: PUSH
3278: LD_INT 3
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 21
3287: PUSH
3288: LD_INT 1
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PPUSH
3299: CALL_OW 69
3303: PUSH
3304: FOR_IN
3305: IFFALSE 3377
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3307: LD_VAR 0 2
3311: PPUSH
3312: LD_VAR 0 3
3316: PUSH
3317: LD_VAR 0 4
3321: ARRAY
3322: PUSH
3323: LD_INT 1
3325: ARRAY
3326: PPUSH
3327: LD_VAR 0 3
3331: PUSH
3332: LD_VAR 0 4
3336: ARRAY
3337: PUSH
3338: LD_INT 2
3340: ARRAY
3341: PPUSH
3342: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3346: LD_VAR 0 2
3350: PPUSH
3351: LD_INT 69
3353: PPUSH
3354: LD_INT 96
3356: PPUSH
3357: CALL_OW 178
// x = x + 1 ;
3361: LD_ADDR_VAR 0 4
3365: PUSH
3366: LD_VAR 0 4
3370: PUSH
3371: LD_INT 1
3373: PLUS
3374: ST_TO_ADDR
// end ;
3375: GO 3304
3377: POP
3378: POP
// wait ( 0 0$1 ) ;
3379: LD_INT 35
3381: PPUSH
3382: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3386: LD_EXP 37
3390: PPUSH
3391: LD_INT 70
3393: PPUSH
3394: LD_INT 90
3396: PPUSH
3397: CALL_OW 297
3401: PUSH
3402: LD_INT 7
3404: LESS
3405: PUSH
3406: LD_EXP 38
3410: PPUSH
3411: LD_INT 70
3413: PPUSH
3414: LD_INT 90
3416: PPUSH
3417: CALL_OW 297
3421: PUSH
3422: LD_INT 7
3424: LESS
3425: AND
3426: PUSH
3427: LD_EXP 39
3431: PPUSH
3432: LD_INT 70
3434: PPUSH
3435: LD_INT 90
3437: PPUSH
3438: CALL_OW 297
3442: PUSH
3443: LD_INT 7
3445: LESS
3446: AND
3447: PUSH
3448: LD_EXP 40
3452: PPUSH
3453: LD_INT 70
3455: PPUSH
3456: LD_INT 90
3458: PPUSH
3459: CALL_OW 297
3463: PUSH
3464: LD_INT 7
3466: LESS
3467: AND
3468: PUSH
3469: LD_EXP 44
3473: PPUSH
3474: LD_INT 70
3476: PPUSH
3477: LD_INT 90
3479: PPUSH
3480: CALL_OW 297
3484: PUSH
3485: LD_INT 7
3487: LESS
3488: AND
3489: IFFALSE 3253
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3491: LD_EXP 38
3495: PPUSH
3496: LD_STRING DDoubts-Kar-1
3498: PPUSH
3499: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3503: LD_EXP 39
3507: PPUSH
3508: LD_STRING DDoubts-Ptr-1
3510: PPUSH
3511: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-1 ) ;
3515: LD_EXP 37
3519: PPUSH
3520: LD_STRING DDoubts-Bur-1
3522: PPUSH
3523: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3527: LD_EXP 38
3531: PPUSH
3532: LD_STRING DDoubts-Kar-2
3534: PPUSH
3535: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3539: LD_EXP 40
3543: PPUSH
3544: LD_STRING DDoubts-Glb-2
3546: PPUSH
3547: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3551: LD_EXP 37
3555: PPUSH
3556: LD_STRING DDoubts-Bur-2
3558: PPUSH
3559: CALL_OW 88
// InGameOff ;
3563: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3567: LD_STRING MBegin
3569: PPUSH
3570: CALL_OW 337
// SaveForQuickRestart ;
3574: CALL_OW 22
// BuildBase ;
3578: CALL 10471 0 0
// end ;
3582: LD_VAR 0 1
3586: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3587: LD_EXP 8
3591: NOT
3592: IFFALSE 3838
3594: GO 3596
3596: DISABLE
3597: LD_INT 0
3599: PPUSH
// begin enable ;
3600: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ f_side , 2 ] ) do
3601: LD_ADDR_VAR 0 1
3605: PUSH
3606: LD_INT 34
3608: PPUSH
3609: LD_INT 22
3611: PUSH
3612: LD_INT 2
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: PPUSH
3619: CALL_OW 70
3623: PUSH
3624: FOR_IN
3625: IFFALSE 3836
// if See ( 3 , unit ) then
3627: LD_INT 3
3629: PPUSH
3630: LD_VAR 0 1
3634: PPUSH
3635: CALL_OW 292
3639: IFFALSE 3834
// begin sawArabianBase = true ;
3641: LD_ADDR_EXP 8
3645: PUSH
3646: LD_INT 1
3648: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3649: LD_VAR 0 1
3653: PPUSH
3654: CALL_OW 87
// DialogueOn ;
3658: CALL_OW 6
// if IsOk ( Lipshchin ) then
3662: LD_EXP 44
3666: PPUSH
3667: CALL_OW 302
3671: IFFALSE 3685
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3673: LD_EXP 44
3677: PPUSH
3678: LD_STRING DArabs-RSol1-1
3680: PPUSH
3681: CALL_OW 88
// if IsOk ( Karamazov ) then
3685: LD_EXP 38
3689: PPUSH
3690: CALL_OW 302
3694: IFFALSE 3708
// Say ( Karamazov , DArabs-Kar-1 ) ;
3696: LD_EXP 38
3700: PPUSH
3701: LD_STRING DArabs-Kar-1
3703: PPUSH
3704: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3708: LD_EXP 37
3712: PPUSH
3713: LD_STRING DArabs-Bur-1
3715: PPUSH
3716: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3720: LD_EXP 45
3724: PPUSH
3725: LD_STRING DArabs-Pla-1
3727: PPUSH
3728: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3732: LD_EXP 48
3736: PPUSH
3737: LD_STRING DSurrender-Omar-1
3739: PPUSH
3740: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3744: LD_STRING QSurrender
3746: PPUSH
3747: CALL_OW 97
3751: PUSH
3752: LD_INT 1
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3760
3758: GO 3779
3760: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3761: LD_EXP 37
3765: PPUSH
3766: LD_STRING DQrSurrender#1-Bur-1
3768: PPUSH
3769: CALL_OW 88
// Lose_Survive ;
3773: CALL 17114 0 0
// end ; 2 :
3777: GO 3826
3779: LD_INT 2
3781: DOUBLE
3782: EQUAL
3783: IFTRUE 3787
3785: GO 3802
3787: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3788: LD_EXP 37
3792: PPUSH
3793: LD_STRING DQrSurrender#2-Bur-1
3795: PPUSH
3796: CALL_OW 88
3800: GO 3826
3802: LD_INT 3
3804: DOUBLE
3805: EQUAL
3806: IFTRUE 3810
3808: GO 3825
3810: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3811: LD_EXP 37
3815: PPUSH
3816: LD_STRING DQrSurrender#3-Bur-1
3818: PPUSH
3819: CALL_OW 88
3823: GO 3826
3825: POP
// DialogueOff ;
3826: CALL_OW 7
// exit ;
3830: POP
3831: POP
3832: GO 3838
// end ;
3834: GO 3624
3836: POP
3837: POP
// end ;
3838: PPOPN 1
3840: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3841: LD_EXP 9
3845: NOT
3846: PUSH
3847: LD_INT 1
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 321
3857: PUSH
3858: LD_INT 1
3860: EQUAL
3861: AND
3862: IFFALSE 4227
3864: GO 3866
3866: DISABLE
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
// begin enable ;
3871: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3872: LD_ADDR_VAR 0 1
3876: PUSH
3877: LD_INT 22
3879: PUSH
3880: LD_INT 0
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: PUSH
3887: LD_INT 25
3889: PUSH
3890: LD_INT 12
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: PPUSH
3901: CALL_OW 69
3905: PUSH
3906: FOR_IN
3907: IFFALSE 4225
// if See ( 3 , unit ) then
3909: LD_INT 3
3911: PPUSH
3912: LD_VAR 0 1
3916: PPUSH
3917: CALL_OW 292
3921: IFFALSE 4223
// begin sawApeman = true ;
3923: LD_ADDR_EXP 9
3927: PUSH
3928: LD_INT 1
3930: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3931: LD_ADDR_VAR 0 2
3935: PUSH
3936: LD_INT 22
3938: PUSH
3939: LD_INT 3
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 21
3948: PUSH
3949: LD_INT 1
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 26
3958: PUSH
3959: LD_INT 1
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 50
3968: PUSH
3969: EMPTY
3970: LIST
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: LD_INT 25
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 25
3987: PUSH
3988: LD_INT 2
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 25
3997: PUSH
3998: LD_INT 3
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: LD_INT 25
4007: PUSH
4008: LD_INT 4
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PPUSH
4029: CALL_OW 69
4033: PPUSH
4034: LD_VAR 0 1
4038: PPUSH
4039: CALL_OW 74
4043: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4044: LD_VAR 0 1
4048: PPUSH
4049: CALL_OW 87
// DialogueOn ;
4053: CALL_OW 6
// if nearUnit = Burlak then
4057: LD_VAR 0 2
4061: PUSH
4062: LD_EXP 37
4066: EQUAL
4067: IFFALSE 4083
// Say ( Burlak , DApeSpot-Bur-1a ) else
4069: LD_EXP 37
4073: PPUSH
4074: LD_STRING DApeSpot-Bur-1a
4076: PPUSH
4077: CALL_OW 88
4081: GO 4095
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4083: LD_VAR 0 2
4087: PPUSH
4088: LD_STRING DApeSpot-RSol1-1
4090: PPUSH
4091: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4095: LD_EXP 37
4099: PPUSH
4100: LD_STRING DApeSpot-Bur-1
4102: PPUSH
4103: CALL_OW 88
// if IsOK ( Petrosyan ) then
4107: LD_EXP 41
4111: PPUSH
4112: CALL_OW 302
4116: IFFALSE 4215
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4118: LD_EXP 41
4122: PPUSH
4123: LD_STRING DApeSpot-Pty-1
4125: PPUSH
4126: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4130: LD_INT 22
4132: PUSH
4133: LD_INT 3
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 21
4142: PUSH
4143: LD_INT 3
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 2
4152: PUSH
4153: LD_INT 30
4155: PUSH
4156: LD_INT 6
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 30
4165: PUSH
4166: LD_INT 7
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: PPUSH
4183: CALL_OW 69
4187: IFFALSE 4203
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4189: LD_EXP 41
4193: PPUSH
4194: LD_STRING DApeSpot-Pty-1a
4196: PPUSH
4197: CALL_OW 88
4201: GO 4215
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4203: LD_EXP 41
4207: PPUSH
4208: LD_STRING DApeSpot-Pty-1b
4210: PPUSH
4211: CALL_OW 88
// end ; DialogueOff ;
4215: CALL_OW 7
// exit ;
4219: POP
4220: POP
4221: GO 4227
// end ;
4223: GO 3906
4225: POP
4226: POP
// end ;
4227: PPOPN 2
4229: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) do
4230: LD_EXP 41
4234: PPUSH
4235: CALL_OW 302
4239: PUSH
4240: LD_INT 22
4242: PUSH
4243: LD_INT 3
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 21
4252: PUSH
4253: LD_INT 3
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PUSH
4260: LD_INT 2
4262: PUSH
4263: LD_INT 30
4265: PUSH
4266: LD_INT 6
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: LD_INT 30
4275: PUSH
4276: LD_INT 7
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: LIST
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: PPUSH
4293: CALL_OW 69
4297: NOT
4298: AND
4299: IFFALSE 4316
4301: GO 4303
4303: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4304: LD_EXP 41
4308: PPUSH
4309: LD_STRING DApeLab-Pty-1
4311: PPUSH
4312: CALL_OW 88
4316: END
// export function Dial_ResearchApeLang ; begin
4317: LD_INT 0
4319: PPUSH
// DialogueOn ;
4320: CALL_OW 6
// if IsOK ( Petrosyan ) then
4324: LD_EXP 41
4328: PPUSH
4329: CALL_OW 302
4333: IFFALSE 4419
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4335: LD_EXP 41
4339: PPUSH
4340: LD_STRING DApeLangCompl-Pty-1
4342: PPUSH
4343: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4347: LD_EXP 37
4351: PPUSH
4352: LD_STRING DApeLangCompl-Bur-1
4354: PPUSH
4355: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4359: LD_EXP 41
4363: PPUSH
4364: LD_STRING DApeLangCompl-Pty-2
4366: PPUSH
4367: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4371: LD_EXP 37
4375: PPUSH
4376: LD_STRING DApeLangCompl-Bur-2
4378: PPUSH
4379: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4383: LD_EXP 41
4387: PPUSH
4388: LD_STRING DApeLangCompl-Pty-3
4390: PPUSH
4391: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4395: LD_EXP 37
4399: PPUSH
4400: LD_STRING DApeLangCompl-Bur-3
4402: PPUSH
4403: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4407: LD_EXP 41
4411: PPUSH
4412: LD_STRING DApeLangCompl-Pty-4
4414: PPUSH
4415: CALL_OW 88
// end ; DialogueOff ;
4419: CALL_OW 7
// end ;
4423: LD_VAR 0 1
4427: RET
// export function Dial_TameApe ( sci ) ; begin
4428: LD_INT 0
4430: PPUSH
// dial_tameApeBlocker = true ;
4431: LD_ADDR_EXP 10
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4439: LD_VAR 0 1
4443: PPUSH
4444: CALL_OW 258
4448: PUSH
4449: LD_INT 1
4451: EQUAL
4452: IFFALSE 4468
// Say ( sci , DApeTame-Sci1-1 ) else
4454: LD_VAR 0 1
4458: PPUSH
4459: LD_STRING DApeTame-Sci1-1
4461: PPUSH
4462: CALL_OW 88
4466: GO 4632
// begin if IsOK ( Petrosyan ) then
4468: LD_EXP 41
4472: PPUSH
4473: CALL_OW 302
4477: IFFALSE 4493
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4479: LD_EXP 41
4483: PPUSH
4484: LD_STRING DApeTame-Sci1-1
4486: PPUSH
4487: CALL_OW 88
4491: GO 4632
// if IsOK ( Dolgov ) then
4493: LD_EXP 43
4497: PPUSH
4498: CALL_OW 302
4502: IFFALSE 4518
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4504: LD_EXP 43
4508: PPUSH
4509: LD_STRING DApeTame-Sci1-1
4511: PPUSH
4512: CALL_OW 88
4516: GO 4632
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4518: LD_INT 22
4520: PUSH
4521: LD_INT 3
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 21
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 26
4540: PUSH
4541: LD_INT 1
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 50
4550: PUSH
4551: EMPTY
4552: LIST
4553: PUSH
4554: LD_INT 2
4556: PUSH
4557: LD_INT 25
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 25
4569: PUSH
4570: LD_INT 2
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 25
4579: PUSH
4580: LD_INT 3
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 25
4589: PUSH
4590: LD_INT 4
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: PPUSH
4611: CALL_OW 69
4615: PPUSH
4616: LD_STRING DApeTame-Sci1-1
4618: PPUSH
4619: LD_STRING 
4621: PPUSH
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 1
4627: PPUSH
4628: CALL 8717 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4632: LD_EXP 37
4636: PPUSH
4637: LD_STRING DApeTame-Bur-1
4639: PPUSH
4640: CALL_OW 88
// end ;
4644: LD_VAR 0 2
4648: RET
// export function Dial_ApeEnterLab ; begin
4649: LD_INT 0
4651: PPUSH
// dial_apeEnterLabBlocker = true ;
4652: LD_ADDR_EXP 11
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// DialogueOn ;
4660: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4664: LD_EXP 37
4668: PPUSH
4669: LD_STRING DApeWorkSol-Bur-1
4671: PPUSH
4672: CALL_OW 88
// if IsOK ( Petrosyan ) then
4676: LD_EXP 41
4680: PPUSH
4681: CALL_OW 302
4685: IFFALSE 4701
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4687: LD_EXP 41
4691: PPUSH
4692: LD_STRING DApeWorkSol-Pty-1
4694: PPUSH
4695: CALL_OW 88
4699: GO 4840
// if IsOK ( Dolgov ) then
4701: LD_EXP 43
4705: PPUSH
4706: CALL_OW 302
4710: IFFALSE 4726
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4712: LD_EXP 43
4716: PPUSH
4717: LD_STRING DApeWorkSol-Pty-1
4719: PPUSH
4720: CALL_OW 88
4724: GO 4840
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4726: LD_INT 22
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 21
4738: PUSH
4739: LD_INT 1
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: LD_INT 26
4748: PUSH
4749: LD_INT 1
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 50
4758: PUSH
4759: EMPTY
4760: LIST
4761: PUSH
4762: LD_INT 2
4764: PUSH
4765: LD_INT 25
4767: PUSH
4768: LD_INT 1
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 25
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 25
4787: PUSH
4788: LD_INT 3
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 25
4797: PUSH
4798: LD_INT 4
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: PPUSH
4819: CALL_OW 69
4823: PPUSH
4824: LD_STRING DApeWorkSol-Pty-1
4826: PPUSH
4827: LD_STRING 
4829: PPUSH
4830: LD_INT 0
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL 8717 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4840: LD_EXP 37
4844: PPUSH
4845: LD_STRING DApeWorkSol-Bur-2
4847: PPUSH
4848: CALL_OW 88
// DialogueOff ;
4852: CALL_OW 7
// end ;
4856: LD_VAR 0 1
4860: RET
// export function Dial_ResearchApePsych ; begin
4861: LD_INT 0
4863: PPUSH
// DialogueOn ;
4864: CALL_OW 6
// if IsOK ( Petrosyan ) then
4868: LD_EXP 41
4872: PPUSH
4873: CALL_OW 302
4877: IFFALSE 4893
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4879: LD_EXP 41
4883: PPUSH
4884: LD_STRING DApeWorkCompl-Pty-1
4886: PPUSH
4887: CALL_OW 88
4891: GO 5032
// if IsOK ( Dolgov ) then
4893: LD_EXP 43
4897: PPUSH
4898: CALL_OW 302
4902: IFFALSE 4918
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4904: LD_EXP 43
4908: PPUSH
4909: LD_STRING DApeWorkCompl-Pty-1
4911: PPUSH
4912: CALL_OW 88
4916: GO 5032
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4918: LD_INT 22
4920: PUSH
4921: LD_INT 3
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 21
4930: PUSH
4931: LD_INT 1
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 26
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 50
4950: PUSH
4951: EMPTY
4952: LIST
4953: PUSH
4954: LD_INT 2
4956: PUSH
4957: LD_INT 25
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 25
4969: PUSH
4970: LD_INT 2
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 25
4979: PUSH
4980: LD_INT 3
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 25
4989: PUSH
4990: LD_INT 4
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: PPUSH
5011: CALL_OW 69
5015: PPUSH
5016: LD_STRING DApeWorkCompl-Pty-1
5018: PPUSH
5019: LD_STRING 
5021: PPUSH
5022: LD_INT 0
5024: PPUSH
5025: LD_INT 1
5027: PPUSH
5028: CALL 8717 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5032: LD_EXP 37
5036: PPUSH
5037: LD_STRING DApeWorkCompl-Bur-1
5039: PPUSH
5040: CALL_OW 88
// DialogueOff ;
5044: CALL_OW 7
// end ;
5048: LD_VAR 0 1
5052: RET
// export function Dial_ResearchApeAgress ; begin
5053: LD_INT 0
5055: PPUSH
// DialogueOn ;
5056: CALL_OW 6
// if IsOK ( Petrosyan ) then
5060: LD_EXP 41
5064: PPUSH
5065: CALL_OW 302
5069: IFFALSE 5085
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5071: LD_EXP 41
5075: PPUSH
5076: LD_STRING DApeSolCompl-Pty-1
5078: PPUSH
5079: CALL_OW 88
5083: GO 5224
// if IsOK ( Dolgov ) then
5085: LD_EXP 43
5089: PPUSH
5090: CALL_OW 302
5094: IFFALSE 5110
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5096: LD_EXP 43
5100: PPUSH
5101: LD_STRING DApeSolCompl-Pty-1
5103: PPUSH
5104: CALL_OW 88
5108: GO 5224
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5110: LD_INT 22
5112: PUSH
5113: LD_INT 3
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: LD_INT 21
5122: PUSH
5123: LD_INT 1
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 26
5132: PUSH
5133: LD_INT 1
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 50
5142: PUSH
5143: EMPTY
5144: LIST
5145: PUSH
5146: LD_INT 2
5148: PUSH
5149: LD_INT 25
5151: PUSH
5152: LD_INT 1
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 25
5161: PUSH
5162: LD_INT 2
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 25
5171: PUSH
5172: LD_INT 3
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 25
5181: PUSH
5182: LD_INT 4
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 69
5207: PPUSH
5208: LD_STRING DApeSolCompl-Pty-1
5210: PPUSH
5211: LD_STRING 
5213: PPUSH
5214: LD_INT 0
5216: PPUSH
5217: LD_INT 1
5219: PPUSH
5220: CALL 8717 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5224: LD_EXP 37
5228: PPUSH
5229: LD_STRING DApeSolCompl-Bur-1
5231: PPUSH
5232: CALL_OW 88
// DialogueOff ;
5236: CALL_OW 7
// end ;
5240: LD_VAR 0 1
5244: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5245: LD_INT 3
5247: PPUSH
5248: LD_INT 74
5250: PPUSH
5251: LD_INT 115
5253: PPUSH
5254: CALL_OW 293
5258: IFFALSE 5389
5260: GO 5262
5262: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5263: LD_INT 22
5265: PUSH
5266: LD_INT 3
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: PUSH
5273: LD_INT 21
5275: PUSH
5276: LD_INT 1
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 26
5285: PUSH
5286: LD_INT 1
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 50
5295: PUSH
5296: EMPTY
5297: LIST
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 25
5304: PUSH
5305: LD_INT 1
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: PUSH
5312: LD_INT 25
5314: PUSH
5315: LD_INT 2
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: PUSH
5322: LD_INT 25
5324: PUSH
5325: LD_INT 3
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: LD_INT 25
5334: PUSH
5335: LD_INT 4
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PPUSH
5356: CALL_OW 69
5360: PPUSH
5361: LD_STRING DShipments-RSol1-1
5363: PPUSH
5364: LD_STRING 
5366: PPUSH
5367: LD_INT 0
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: CALL 8717 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5377: LD_EXP 37
5381: PPUSH
5382: LD_STRING DShipments-Bur-1
5384: PPUSH
5385: CALL_OW 88
// end ;
5389: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5390: LD_INT 3
5392: PPUSH
5393: LD_INT 81
5395: PPUSH
5396: LD_INT 132
5398: PPUSH
5399: CALL_OW 293
5403: IFFALSE 5543
5405: GO 5407
5407: DISABLE
5408: LD_INT 0
5410: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5411: LD_ADDR_VAR 0 1
5415: PUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 3
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PUSH
5426: LD_INT 21
5428: PUSH
5429: LD_INT 1
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 26
5438: PUSH
5439: LD_INT 1
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 50
5448: PUSH
5449: EMPTY
5450: LIST
5451: PUSH
5452: LD_INT 2
5454: PUSH
5455: LD_INT 25
5457: PUSH
5458: LD_INT 1
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 25
5467: PUSH
5468: LD_INT 2
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 25
5477: PUSH
5478: LD_INT 3
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: LD_INT 25
5487: PUSH
5488: LD_INT 4
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: PPUSH
5509: CALL_OW 69
5513: PPUSH
5514: LD_STRING DRoad-RSol1-1
5516: PPUSH
5517: LD_STRING 
5519: PPUSH
5520: LD_INT 0
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL 8717 0 5
5530: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5531: LD_VAR 0 1
5535: PPUSH
5536: LD_STRING DRoad-RSol1-1a
5538: PPUSH
5539: CALL_OW 88
// end ;
5543: PPOPN 1
5545: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5546: LD_INT 33
5548: PPUSH
5549: LD_INT 22
5551: PUSH
5552: LD_INT 3
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 21
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: LD_INT 26
5571: PUSH
5572: LD_INT 1
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: LD_INT 50
5581: PUSH
5582: EMPTY
5583: LIST
5584: PUSH
5585: LD_INT 2
5587: PUSH
5588: LD_INT 25
5590: PUSH
5591: LD_INT 1
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: PUSH
5598: LD_INT 25
5600: PUSH
5601: LD_INT 2
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 25
5610: PUSH
5611: LD_INT 3
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: LD_INT 25
5620: PUSH
5621: LD_INT 4
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: PPUSH
5642: CALL_OW 70
5646: PUSH
5647: LD_EXP 37
5651: PUSH
5652: EMPTY
5653: LIST
5654: DIFF
5655: PUSH
5656: LD_INT 22
5658: PUSH
5659: LD_INT 3
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: PUSH
5666: LD_INT 21
5668: PUSH
5669: LD_INT 3
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PUSH
5676: LD_INT 30
5678: PUSH
5679: LD_INT 0
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PUSH
5686: LD_INT 50
5688: PUSH
5689: EMPTY
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PPUSH
5698: CALL_OW 69
5702: AND
5703: IFFALSE 5730
5705: GO 5707
5707: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5708: LD_INT 36
5710: PPUSH
5711: CALL 20596 0 1
// wait ( 0 0$1.5 ) ;
5715: LD_INT 52
5717: PPUSH
5718: CALL_OW 67
// stevensPlaced = true ;
5722: LD_ADDR_EXP 14
5726: PUSH
5727: LD_INT 1
5729: ST_TO_ADDR
// end ;
5730: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5731: LD_INT 3
5733: PPUSH
5734: LD_EXP 55
5738: PPUSH
5739: CALL_OW 292
5743: PUSH
5744: LD_EXP 14
5748: AND
5749: PUSH
5750: LD_EXP 24
5754: NOT
5755: AND
5756: IFFALSE 6098
5758: GO 5760
5760: DISABLE
5761: LD_INT 0
5763: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5764: LD_ADDR_VAR 0 1
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 3
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 21
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 26
5791: PUSH
5792: LD_INT 1
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 50
5801: PUSH
5802: EMPTY
5803: LIST
5804: PUSH
5805: LD_INT 2
5807: PUSH
5808: LD_INT 25
5810: PUSH
5811: LD_INT 1
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 25
5820: PUSH
5821: LD_INT 2
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: LD_INT 25
5830: PUSH
5831: LD_INT 3
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: PUSH
5838: LD_INT 25
5840: PUSH
5841: LD_INT 4
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: PPUSH
5862: CALL_OW 69
5866: PPUSH
5867: LD_EXP 55
5871: PPUSH
5872: CALL_OW 74
5876: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5877: LD_EXP 55
5881: PPUSH
5882: CALL_OW 87
// InGameOn ;
5886: CALL_OW 8
// DialogueOn ;
5890: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5894: LD_VAR 0 1
5898: PPUSH
5899: LD_STRING DStevens-RSol1-1
5901: PPUSH
5902: CALL_OW 88
// DialogueOff ;
5906: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5910: LD_INT 52
5912: PPUSH
5913: CALL_OW 67
// if IsOK ( Petrosyan ) then
5917: LD_EXP 41
5921: PPUSH
5922: CALL_OW 302
5926: IFFALSE 6094
// begin SetSide ( Stevens , 6 ) ;
5928: LD_EXP 55
5932: PPUSH
5933: LD_INT 6
5935: PPUSH
5936: CALL_OW 235
// DialogueOn ;
5940: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
5944: LD_EXP 55
5948: PPUSH
5949: LD_STRING DStevens-Huck-1
5951: PPUSH
5952: CALL_OW 88
// if nearUnit = Petrosyan then
5956: LD_VAR 0 1
5960: PUSH
5961: LD_EXP 41
5965: EQUAL
5966: IFFALSE 6062
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
5968: LD_EXP 41
5972: PPUSH
5973: LD_STRING DStevens-Pty-1a
5975: PPUSH
5976: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
5980: LD_EXP 55
5984: PPUSH
5985: LD_STRING DStevens-Huck-2
5987: PPUSH
5988: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
5992: LD_EXP 41
5996: PPUSH
5997: LD_STRING DStevens-Pty-2
5999: PPUSH
6000: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6004: LD_EXP 55
6008: PPUSH
6009: LD_STRING DStevens-Huck-3
6011: PPUSH
6012: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6016: LD_EXP 41
6020: PPUSH
6021: LD_STRING DStevens-Pty-3
6023: PPUSH
6024: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6028: LD_EXP 55
6032: PPUSH
6033: LD_STRING DStevens-Huck-4
6035: PPUSH
6036: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6040: LD_EXP 41
6044: PPUSH
6045: LD_STRING DStevens-Pty-4
6047: PPUSH
6048: CALL_OW 88
// stevensFollow = true ;
6052: LD_ADDR_EXP 15
6056: PUSH
6057: LD_INT 1
6059: ST_TO_ADDR
// end else
6060: GO 6090
// begin stevensFollow = true ;
6062: LD_ADDR_EXP 15
6066: PUSH
6067: LD_INT 1
6069: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6070: LD_ADDR_EXP 16
6074: PUSH
6075: LD_INT 1
6077: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6078: LD_EXP 41
6082: PPUSH
6083: LD_STRING DStevens-Pty-1
6085: PPUSH
6086: CALL_OW 88
// end ; DialogueOff ;
6090: CALL_OW 7
// end ; InGameOff ;
6094: CALL_OW 9
// end ;
6098: PPOPN 1
6100: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6101: LD_EXP 16
6105: PUSH
6106: LD_EXP 41
6110: PPUSH
6111: LD_EXP 55
6115: PPUSH
6116: CALL_OW 296
6120: PUSH
6121: LD_INT 20
6123: LESS
6124: AND
6125: PUSH
6126: LD_EXP 41
6130: PPUSH
6131: CALL_OW 302
6135: AND
6136: PUSH
6137: LD_EXP 24
6141: NOT
6142: AND
6143: IFFALSE 6248
6145: GO 6147
6147: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6148: LD_ADDR_EXP 16
6152: PUSH
6153: LD_INT 0
6155: ST_TO_ADDR
// DialogueOn ;
6156: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6160: LD_EXP 41
6164: PPUSH
6165: LD_STRING DStevens-Pty-1a
6167: PPUSH
6168: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6172: LD_EXP 55
6176: PPUSH
6177: LD_STRING DStevens-Huck-2
6179: PPUSH
6180: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6184: LD_EXP 41
6188: PPUSH
6189: LD_STRING DStevens-Pty-2
6191: PPUSH
6192: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6196: LD_EXP 55
6200: PPUSH
6201: LD_STRING DStevens-Huck-3
6203: PPUSH
6204: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6208: LD_EXP 41
6212: PPUSH
6213: LD_STRING DStevens-Pty-3
6215: PPUSH
6216: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6220: LD_EXP 55
6224: PPUSH
6225: LD_STRING DStevens-Huck-4
6227: PPUSH
6228: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6232: LD_EXP 41
6236: PPUSH
6237: LD_STRING DStevens-Pty-4
6239: PPUSH
6240: CALL_OW 88
// DialogueOff ;
6244: CALL_OW 7
// end ;
6248: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and IsOK ( Petrosyan ) and not finishMissionBool do
6249: LD_EXP 55
6253: PPUSH
6254: LD_EXP 37
6258: PPUSH
6259: CALL_OW 296
6263: PUSH
6264: LD_INT 15
6266: LESS
6267: PUSH
6268: LD_EXP 41
6272: PPUSH
6273: CALL_OW 302
6277: AND
6278: PUSH
6279: LD_EXP 24
6283: NOT
6284: AND
6285: IFFALSE 6500
6287: GO 6289
6289: DISABLE
// begin DialogueOn ;
6290: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6294: LD_EXP 41
6298: PPUSH
6299: LD_STRING DStevensBurlak-Pty-1
6301: PPUSH
6302: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6306: LD_EXP 37
6310: PPUSH
6311: LD_STRING DStevensBurlak-Bur-1
6313: PPUSH
6314: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6318: LD_EXP 41
6322: PPUSH
6323: LD_STRING DStevensBurlak-Pty-2
6325: PPUSH
6326: CALL_OW 88
// case Query ( QKill ) of 1 :
6330: LD_STRING QKill
6332: PPUSH
6333: CALL_OW 97
6337: PUSH
6338: LD_INT 1
6340: DOUBLE
6341: EQUAL
6342: IFTRUE 6346
6344: GO 6424
6346: POP
// begin stevensCanExitMap = true ;
6347: LD_ADDR_EXP 19
6351: PUSH
6352: LD_INT 1
6354: ST_TO_ADDR
// stevensFollow = false ;
6355: LD_ADDR_EXP 15
6359: PUSH
6360: LD_INT 0
6362: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6363: LD_EXP 37
6367: PPUSH
6368: LD_STRING DKill-1-Bur-1
6370: PPUSH
6371: CALL_OW 88
// if IsOK ( Gleb ) then
6375: LD_EXP 40
6379: PPUSH
6380: CALL_OW 302
6384: IFFALSE 6398
// Say ( Gleb , DKill-1-Glb-1 ) ;
6386: LD_EXP 40
6390: PPUSH
6391: LD_STRING DKill-1-Glb-1
6393: PPUSH
6394: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6398: LD_EXP 55
6402: PPUSH
6403: LD_INT 1
6405: PPUSH
6406: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6410: LD_EXP 55
6414: PPUSH
6415: LD_INT 37
6417: PPUSH
6418: CALL_OW 113
// end ; 2 :
6422: GO 6496
6424: LD_INT 2
6426: DOUBLE
6427: EQUAL
6428: IFTRUE 6432
6430: GO 6495
6432: POP
// begin stevensCanExitMap = true ;
6433: LD_ADDR_EXP 19
6437: PUSH
6438: LD_INT 1
6440: ST_TO_ADDR
// stevensFollow = false ;
6441: LD_ADDR_EXP 15
6445: PUSH
6446: LD_INT 0
6448: ST_TO_ADDR
// stevensDepot = true ;
6449: LD_ADDR_EXP 17
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6457: LD_EXP 37
6461: PPUSH
6462: LD_STRING DKill-2-Bur-1
6464: PPUSH
6465: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6469: LD_EXP 41
6473: PPUSH
6474: LD_STRING DKill-2-Pty-1
6476: PPUSH
6477: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6481: LD_EXP 37
6485: PPUSH
6486: LD_STRING DKill-2-Bur-2
6488: PPUSH
6489: CALL_OW 88
// end ; end ;
6493: GO 6496
6495: POP
// DialogueOff ;
6496: CALL_OW 7
// end ;
6500: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6501: LD_EXP 15
6505: IFFALSE 6645
6507: GO 6509
6509: DISABLE
6510: LD_INT 0
6512: PPUSH
// begin enable ;
6513: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6514: LD_ADDR_VAR 0 1
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 3
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 21
6531: PUSH
6532: LD_INT 1
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 50
6541: PUSH
6542: EMPTY
6543: LIST
6544: PUSH
6545: LD_INT 2
6547: PUSH
6548: LD_INT 25
6550: PUSH
6551: LD_INT 1
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 25
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 25
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 4
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: PPUSH
6601: CALL_OW 69
6605: PPUSH
6606: LD_EXP 55
6610: PPUSH
6611: CALL_OW 74
6615: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6616: LD_EXP 55
6620: PPUSH
6621: LD_VAR 0 1
6625: PPUSH
6626: CALL_OW 250
6630: PPUSH
6631: LD_VAR 0 1
6635: PPUSH
6636: CALL_OW 251
6640: PPUSH
6641: CALL_OW 111
// end ;
6645: PPOPN 1
6647: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6648: LD_EXP 17
6652: PUSH
6653: LD_INT 22
6655: PUSH
6656: LD_INT 3
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 21
6665: PUSH
6666: LD_INT 3
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 30
6675: PUSH
6676: LD_INT 0
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 50
6685: PUSH
6686: EMPTY
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: PPUSH
6695: CALL_OW 69
6699: NOT
6700: AND
6701: IFFALSE 6728
6703: GO 6705
6705: DISABLE
// begin enable ;
6706: ENABLE
// SetSide ( Stevens , 6 ) ;
6707: LD_EXP 55
6711: PPUSH
6712: LD_INT 6
6714: PPUSH
6715: CALL_OW 235
// ComHold ( Stevens ) ;
6719: LD_EXP 55
6723: PPUSH
6724: CALL_OW 140
// end ;
6728: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6729: LD_EXP 17
6733: PUSH
6734: LD_INT 22
6736: PUSH
6737: LD_INT 3
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 21
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PUSH
6754: LD_INT 30
6756: PUSH
6757: LD_INT 0
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 50
6766: PUSH
6767: EMPTY
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: PPUSH
6776: CALL_OW 69
6780: AND
6781: IFFALSE 7312
6783: GO 6785
6785: DISABLE
6786: LD_INT 0
6788: PPUSH
6789: PPUSH
6790: PPUSH
// begin enable ;
6791: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_INT 22
6799: PUSH
6800: LD_INT 3
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 21
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 30
6819: PUSH
6820: LD_INT 0
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 50
6829: PUSH
6830: EMPTY
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: PPUSH
6839: CALL_OW 69
6843: PUSH
6844: LD_INT 1
6846: ARRAY
6847: ST_TO_ADDR
// if not depot then
6848: LD_VAR 0 1
6852: NOT
6853: IFFALSE 6857
// exit ;
6855: GO 7312
// for depotUnit in depot do
6857: LD_ADDR_VAR 0 2
6861: PUSH
6862: LD_VAR 0 1
6866: PUSH
6867: FOR_IN
6868: IFFALSE 6894
// if not IsConstructed ( depotUnit ) then
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 304
6879: NOT
6880: IFFALSE 6892
// constructDepot = depotUnit ;
6882: LD_ADDR_VAR 0 3
6886: PUSH
6887: LD_VAR 0 2
6891: ST_TO_ADDR
6892: GO 6867
6894: POP
6895: POP
// if not constructDepot then
6896: LD_VAR 0 3
6900: NOT
6901: IFFALSE 6905
// exit ;
6903: GO 7312
// if not stevensWasInDepot then
6905: LD_EXP 18
6909: NOT
6910: IFFALSE 7050
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6912: LD_EXP 55
6916: PPUSH
6917: CALL_OW 310
6921: NOT
6922: PUSH
6923: LD_EXP 55
6927: PPUSH
6928: LD_VAR 0 1
6932: PPUSH
6933: CALL_OW 296
6937: PUSH
6938: LD_INT 8
6940: LESS
6941: NOT
6942: AND
6943: IFFALSE 6976
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
6945: LD_EXP 55
6949: PPUSH
6950: LD_VAR 0 3
6954: PPUSH
6955: CALL_OW 250
6959: PPUSH
6960: LD_VAR 0 3
6964: PPUSH
6965: CALL_OW 251
6969: PPUSH
6970: CALL_OW 111
6974: GO 7048
// begin InGameOn ;
6976: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
6980: LD_EXP 55
6984: PPUSH
6985: LD_INT 3
6987: PPUSH
6988: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
6992: LD_EXP 55
6996: PPUSH
6997: LD_VAR 0 3
7001: PPUSH
7002: CALL_OW 120
// wait ( 0 0$1 ) ;
7006: LD_INT 35
7008: PPUSH
7009: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7013: LD_EXP 55
7017: PPUSH
7018: CALL_OW 310
7022: PUSH
7023: LD_EXP 55
7027: PPUSH
7028: CALL_OW 302
7032: NOT
7033: OR
7034: IFFALSE 6980
// InGameOff ;
7036: CALL_OW 9
// stevensWasInDepot = true ;
7040: LD_ADDR_EXP 18
7044: PUSH
7045: LD_INT 1
7047: ST_TO_ADDR
// end ; end else
7048: GO 7312
// begin if not IsInUnit ( Stevens ) then
7050: LD_EXP 55
7054: PPUSH
7055: CALL_OW 310
7059: NOT
7060: IFFALSE 7312
// begin DialogueOn ;
7062: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_STRING DRelease-Bur-1
7073: PPUSH
7074: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7078: LD_STRING QKillAgain
7080: PPUSH
7081: CALL_OW 97
7085: PUSH
7086: LD_INT 1
7088: DOUBLE
7089: EQUAL
7090: IFTRUE 7094
7092: GO 7157
7094: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7095: LD_EXP 37
7099: PPUSH
7100: LD_STRING DQrKillAgain#1-Bur-1
7102: PPUSH
7103: CALL_OW 88
// stevensCanExitMap = true ;
7107: LD_ADDR_EXP 19
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// stevensWasInDepot = false ;
7115: LD_ADDR_EXP 18
7119: PUSH
7120: LD_INT 0
7122: ST_TO_ADDR
// stevensDepot = false ;
7123: LD_ADDR_EXP 17
7127: PUSH
7128: LD_INT 0
7130: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7131: LD_EXP 55
7135: PPUSH
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7143: LD_EXP 55
7147: PPUSH
7148: LD_INT 37
7150: PPUSH
7151: CALL_OW 113
// end ; 2 :
7155: GO 7308
7157: LD_INT 2
7159: DOUBLE
7160: EQUAL
7161: IFTRUE 7165
7163: GO 7216
7165: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7166: LD_EXP 37
7170: PPUSH
7171: LD_STRING DQrKillAgain#2-Bur-1
7173: PPUSH
7174: CALL_OW 88
// stevensCanExitMap = true ;
7178: LD_ADDR_EXP 19
7182: PUSH
7183: LD_INT 1
7185: ST_TO_ADDR
// stevensWasInDepot = false ;
7186: LD_ADDR_EXP 18
7190: PUSH
7191: LD_INT 0
7193: ST_TO_ADDR
// stevensDepot = false ;
7194: LD_ADDR_EXP 17
7198: PUSH
7199: LD_INT 0
7201: ST_TO_ADDR
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7202: LD_EXP 55
7206: PPUSH
7207: LD_INT 37
7209: PPUSH
7210: CALL_OW 113
// end ; 3 :
7214: GO 7308
7216: LD_INT 3
7218: DOUBLE
7219: EQUAL
7220: IFTRUE 7224
7222: GO 7307
7224: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7225: LD_EXP 37
7229: PPUSH
7230: LD_STRING DQrKillAgain#2-Bur-1a
7232: PPUSH
7233: CALL_OW 88
// DialogueOff ;
7237: CALL_OW 7
// InGameOn ;
7241: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7245: LD_EXP 55
7249: PPUSH
7250: LD_INT 3
7252: PPUSH
7253: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7257: LD_EXP 55
7261: PPUSH
7262: LD_VAR 0 3
7266: PPUSH
7267: CALL_OW 120
// wait ( 0 0$1 ) ;
7271: LD_INT 35
7273: PPUSH
7274: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7278: LD_EXP 55
7282: PPUSH
7283: CALL_OW 310
7287: PUSH
7288: LD_EXP 55
7292: PPUSH
7293: CALL_OW 302
7297: NOT
7298: OR
7299: IFFALSE 7245
// InGameOff ;
7301: CALL_OW 9
// end ; end ;
7305: GO 7308
7307: POP
// DialogueOff ;
7308: CALL_OW 7
// end ; end ; end ;
7312: PPOPN 3
7314: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7315: LD_EXP 19
7319: PUSH
7320: LD_EXP 55
7324: PPUSH
7325: LD_INT 37
7327: PPUSH
7328: CALL_OW 308
7332: AND
7333: IFFALSE 7380
7335: GO 7337
7337: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7338: LD_EXP 55
7342: PPUSH
7343: CALL_OW 255
7347: PUSH
7348: LD_INT 6
7350: EQUAL
7351: IFFALSE 7363
// stevensStatus = 1 else
7353: LD_ADDR_EXP 2
7357: PUSH
7358: LD_INT 1
7360: ST_TO_ADDR
7361: GO 7371
// stevensStatus = 2 ;
7363: LD_ADDR_EXP 2
7367: PUSH
7368: LD_INT 2
7370: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7371: LD_EXP 55
7375: PPUSH
7376: CALL_OW 64
// end ;
7380: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7381: LD_INT 3
7383: PPUSH
7384: LD_INT 1
7386: PPUSH
7387: CALL_OW 292
7391: IFFALSE 7591
7393: GO 7395
7395: DISABLE
7396: LD_INT 0
7398: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7399: LD_ADDR_VAR 0 1
7403: PUSH
7404: LD_INT 1
7406: PPUSH
7407: LD_INT 2
7409: PPUSH
7410: CALL_OW 12
7414: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7415: LD_INT 1
7417: PPUSH
7418: CALL_OW 87
// DialogueOn ;
7422: CALL_OW 6
// if rnd = 1 then
7426: LD_VAR 0 1
7430: PUSH
7431: LD_INT 1
7433: EQUAL
7434: IFFALSE 7450
// Say ( Burlak , DMastodon-Bur-1 ) else
7436: LD_EXP 37
7440: PPUSH
7441: LD_STRING DMastodon-Bur-1
7443: PPUSH
7444: CALL_OW 88
7448: GO 7564
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7450: LD_INT 22
7452: PUSH
7453: LD_INT 3
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 21
7462: PUSH
7463: LD_INT 1
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 26
7472: PUSH
7473: LD_INT 1
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 50
7482: PUSH
7483: EMPTY
7484: LIST
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 25
7491: PUSH
7492: LD_INT 1
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 25
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: LD_INT 25
7511: PUSH
7512: LD_INT 3
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: LD_INT 25
7521: PUSH
7522: LD_INT 4
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: PPUSH
7543: CALL_OW 69
7547: PPUSH
7548: LD_STRING DMastodon-RSol1-1
7550: PPUSH
7551: LD_STRING 
7553: PPUSH
7554: LD_INT 0
7556: PPUSH
7557: LD_INT 1
7559: PPUSH
7560: CALL 8717 0 5
// if IsOK ( Gleb ) then
7564: LD_EXP 40
7568: PPUSH
7569: CALL_OW 302
7573: IFFALSE 7587
// Say ( Gleb , DMastodon-Glb-1 ) ;
7575: LD_EXP 40
7579: PPUSH
7580: LD_STRING DMastodon-Glb-1
7582: PPUSH
7583: CALL_OW 88
// DialogueOff ;
7587: CALL_OW 7
// end ;
7591: PPOPN 1
7593: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7594: LD_INT 1
7596: PPUSH
7597: CALL_OW 302
7601: NOT
7602: IFFALSE 7681
7604: GO 7606
7606: DISABLE
// begin omarCanExitMap = true ;
7607: LD_ADDR_EXP 20
7611: PUSH
7612: LD_INT 1
7614: ST_TO_ADDR
// DialogueOn ;
7615: CALL_OW 6
// if IsOK ( Karamazov ) then
7619: LD_EXP 38
7623: PPUSH
7624: CALL_OW 302
7628: IFFALSE 7642
// Say ( Karamazov , DOmar-Kar-1 ) ;
7630: LD_EXP 38
7634: PPUSH
7635: LD_STRING DOmar-Kar-1
7637: PPUSH
7638: CALL_OW 88
// if IsOK ( Petrovova ) then
7642: LD_EXP 39
7646: PPUSH
7647: CALL_OW 302
7651: IFFALSE 7665
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7653: LD_EXP 39
7657: PPUSH
7658: LD_STRING DOmar-Ptr-1
7660: PPUSH
7661: CALL_OW 88
// DialogueOff ;
7665: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7669: LD_EXP 48
7673: PPUSH
7674: LD_INT 41
7676: PPUSH
7677: CALL_OW 113
// end ;
7681: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7682: LD_EXP 48
7686: PPUSH
7687: LD_INT 41
7689: PPUSH
7690: CALL_OW 308
7694: PUSH
7695: LD_EXP 20
7699: AND
7700: IFFALSE 7722
7702: GO 7704
7704: DISABLE
// begin RemoveUnit ( Omar ) ;
7705: LD_EXP 48
7709: PPUSH
7710: CALL_OW 64
// omarStatus = 1 ;
7714: LD_ADDR_EXP 1
7718: PUSH
7719: LD_INT 1
7721: ST_TO_ADDR
// end ;
7722: END
// every 0 0$1 trigger IsDead ( Omar ) do
7723: LD_EXP 48
7727: PPUSH
7728: CALL_OW 301
7732: IFFALSE 7890
7734: GO 7736
7736: DISABLE
// begin DialogueOn ;
7737: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7741: LD_INT 22
7743: PUSH
7744: LD_INT 3
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 1
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 26
7763: PUSH
7764: LD_INT 1
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 50
7773: PUSH
7774: EMPTY
7775: LIST
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: LD_INT 25
7782: PUSH
7783: LD_INT 1
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 25
7792: PUSH
7793: LD_INT 2
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 25
7802: PUSH
7803: LD_INT 3
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 25
7812: PUSH
7813: LD_INT 4
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: PPUSH
7834: CALL_OW 69
7838: PPUSH
7839: LD_STRING DOmar-RSol1-1
7841: PPUSH
7842: LD_STRING 
7844: PPUSH
7845: LD_INT 0
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: CALL 8717 0 5
// wait ( 0 0$1 ) ;
7855: LD_INT 35
7857: PPUSH
7858: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
7862: LD_EXP 47
7866: PPUSH
7867: LD_STRING DOmar-Hke-1
7869: PPUSH
7870: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
7874: LD_EXP 37
7878: PPUSH
7879: LD_STRING DOmar-Bur-1
7881: PPUSH
7882: CALL_OW 88
// DialogueOff ;
7886: CALL_OW 7
// end ;
7890: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
7891: LD_EXP 48
7895: PPUSH
7896: CALL_OW 301
7900: PUSH
7901: LD_EXP 48
7905: PPUSH
7906: CALL_OW 305
7910: NOT
7911: OR
7912: PUSH
7913: LD_EXP 49
7917: PUSH
7918: LD_INT 3
7920: LESS
7921: AND
7922: IFFALSE 8073
7924: GO 7926
7926: DISABLE
// begin if actionTime < arabBreakthrough then
7927: LD_EXP 7
7931: PUSH
7932: LD_EXP 32
7936: LESS
7937: IFFALSE 7947
// fastBreakthrough = true ;
7939: LD_ADDR_EXP 23
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// DialogueOn ;
7947: CALL_OW 6
// if IsOK ( Petrovova ) then
7951: LD_EXP 39
7955: PPUSH
7956: CALL_OW 302
7960: IFFALSE 7974
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
7962: LD_EXP 39
7966: PPUSH
7967: LD_STRING DBreakthrough-Ptr-1
7969: PPUSH
7970: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
7974: LD_EXP 37
7978: PPUSH
7979: LD_STRING DBreakthrough-Bur-1
7981: PPUSH
7982: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
7986: LD_EXP 45
7990: PPUSH
7991: LD_STRING DBreakthrough-Pla-1
7993: PPUSH
7994: CALL_OW 94
// if fastBreakthrough then
7998: LD_EXP 23
8002: IFFALSE 8018
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8004: LD_EXP 45
8008: PPUSH
8009: LD_STRING DBreakthrough-Pla-1a
8011: PPUSH
8012: CALL_OW 94
8016: GO 8030
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8018: LD_EXP 45
8022: PPUSH
8023: LD_STRING DBreakthrough-Pla-1b
8025: PPUSH
8026: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8030: LD_EXP 45
8034: PPUSH
8035: LD_STRING DBreakthrough-Pla-1c
8037: PPUSH
8038: CALL_OW 94
// DialogueOff ;
8042: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8046: LD_STRING MAddLab
8048: PPUSH
8049: CALL_OW 337
// arabianCanExitMap = true ;
8053: LD_ADDR_EXP 21
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8061: LD_EXP 49
8065: PPUSH
8066: LD_INT 41
8068: PPUSH
8069: CALL_OW 113
// end ;
8073: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8074: LD_EXP 21
8078: IFFALSE 8143
8080: GO 8082
8082: DISABLE
8083: LD_INT 0
8085: PPUSH
// begin enable ;
8086: ENABLE
// for unit in arabianUnitsInBase do
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_EXP 49
8096: PUSH
8097: FOR_IN
8098: IFFALSE 8141
// if IsInArea ( unit , ArabianExitArea ) then
8100: LD_VAR 0 1
8104: PPUSH
8105: LD_INT 41
8107: PPUSH
8108: CALL_OW 308
8112: IFFALSE 8139
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8114: LD_ADDR_EXP 49
8118: PUSH
8119: LD_EXP 49
8123: PUSH
8124: LD_VAR 0 1
8128: DIFF
8129: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8130: LD_VAR 0 1
8134: PPUSH
8135: CALL_OW 64
// end ;
8139: GO 8097
8141: POP
8142: POP
// end ;
8143: PPOPN 1
8145: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8146: LD_EXP 12
8150: NOT
8151: IFFALSE 8389
8153: GO 8155
8155: DISABLE
8156: LD_INT 0
8158: PPUSH
// begin for unit in arabianPatrolVehicles do
8159: LD_ADDR_VAR 0 1
8163: PUSH
8164: LD_EXP 50
8168: PUSH
8169: FOR_IN
8170: IFFALSE 8387
// if See ( 3 , unit ) then
8172: LD_INT 3
8174: PPUSH
8175: LD_VAR 0 1
8179: PPUSH
8180: CALL_OW 292
8184: IFFALSE 8385
// begin dial_southRoadBlocker = true ;
8186: LD_ADDR_EXP 12
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8194: LD_VAR 0 1
8198: PPUSH
8199: CALL_OW 87
// if IsOK ( Karamazov ) then
8203: LD_EXP 38
8207: PPUSH
8208: CALL_OW 302
8212: IFFALSE 8226
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8214: LD_EXP 38
8218: PPUSH
8219: LD_STRING DPatrol-Kar-1
8221: PPUSH
8222: CALL_OW 88
// if IsOK ( Petrovova ) then
8226: LD_EXP 39
8230: PPUSH
8231: CALL_OW 302
8235: IFFALSE 8249
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8237: LD_EXP 39
8241: PPUSH
8242: LD_STRING DPatrol-Ptr-1
8244: PPUSH
8245: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8249: LD_INT 22
8251: PUSH
8252: LD_INT 3
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 21
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 26
8271: PUSH
8272: LD_INT 1
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 50
8281: PUSH
8282: EMPTY
8283: LIST
8284: PUSH
8285: LD_INT 2
8287: PUSH
8288: LD_INT 25
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 25
8300: PUSH
8301: LD_INT 2
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: LD_INT 25
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 25
8320: PUSH
8321: LD_INT 4
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: PPUSH
8342: CALL_OW 69
8346: PUSH
8347: LD_EXP 38
8351: DIFF
8352: PPUSH
8353: LD_STRING DPatrol-RSol1-1
8355: PPUSH
8356: LD_STRING 
8358: PPUSH
8359: LD_INT 0
8361: PPUSH
8362: LD_INT 1
8364: PPUSH
8365: CALL 8717 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8369: LD_EXP 37
8373: PPUSH
8374: LD_STRING DPatrol-Bur-1
8376: PPUSH
8377: CALL_OW 88
// exit ;
8381: POP
8382: POP
8383: GO 8389
// end ;
8385: GO 8169
8387: POP
8388: POP
// end ;
8389: PPOPN 1
8391: END
// every 10 10$0 do
8392: GO 8394
8394: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8395: CALL 2551 0 0
8399: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8400: LD_INT 0
8402: PPUSH
8403: PPUSH
// if debugMode then
8404: LD_EXP 30
8408: IFFALSE 8425
// unit := NewCharacter ( ident ) ;
8410: LD_ADDR_VAR 0 5
8414: PUSH
8415: LD_VAR 0 1
8419: PPUSH
8420: CALL_OW 25
8424: ST_TO_ADDR
// if exist_mode and not debugMode then
8425: LD_VAR 0 2
8429: PUSH
8430: LD_EXP 30
8434: NOT
8435: AND
8436: IFFALSE 8461
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8438: LD_ADDR_VAR 0 5
8442: PUSH
8443: LD_EXP 29
8447: PUSH
8448: LD_VAR 0 1
8452: STR
8453: PPUSH
8454: CALL_OW 34
8458: ST_TO_ADDR
8459: GO 8483
// if not debugMode then
8461: LD_EXP 30
8465: NOT
8466: IFFALSE 8483
// unit := NewCharacter ( ident ) ;
8468: LD_ADDR_VAR 0 5
8472: PUSH
8473: LD_VAR 0 1
8477: PPUSH
8478: CALL_OW 25
8482: ST_TO_ADDR
// if class then
8483: LD_VAR 0 3
8487: IFFALSE 8503
// SetClass ( unit , class ) ;
8489: LD_VAR 0 5
8493: PPUSH
8494: LD_VAR 0 3
8498: PPUSH
8499: CALL_OW 336
// result := unit ;
8503: LD_ADDR_VAR 0 4
8507: PUSH
8508: LD_VAR 0 5
8512: ST_TO_ADDR
// end ;
8513: LD_VAR 0 4
8517: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8518: LD_INT 0
8520: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8521: LD_VAR 0 1
8525: PPUSH
8526: CALL_OW 255
8530: PUSH
8531: LD_VAR 0 3
8535: EQUAL
8536: PUSH
8537: LD_VAR 0 1
8541: PPUSH
8542: CALL_OW 302
8546: AND
8547: IFFALSE 8569
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8549: LD_VAR 0 1
8553: PPUSH
8554: LD_EXP 28
8558: PUSH
8559: LD_VAR 0 2
8563: STR
8564: PPUSH
8565: CALL_OW 38
// end ;
8569: LD_VAR 0 4
8573: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8574: LD_INT 0
8576: PPUSH
8577: PPUSH
8578: PPUSH
// resultCharactersToSave = [ ] ;
8579: LD_ADDR_VAR 0 6
8583: PUSH
8584: EMPTY
8585: ST_TO_ADDR
// for unit in characters do
8586: LD_ADDR_VAR 0 5
8590: PUSH
8591: LD_VAR 0 1
8595: PUSH
8596: FOR_IN
8597: IFFALSE 8645
// if GetSide ( unit ) = side and IsOK ( unit ) then
8599: LD_VAR 0 5
8603: PPUSH
8604: CALL_OW 255
8608: PUSH
8609: LD_VAR 0 3
8613: EQUAL
8614: PUSH
8615: LD_VAR 0 5
8619: PPUSH
8620: CALL_OW 302
8624: AND
8625: IFFALSE 8643
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8627: LD_ADDR_VAR 0 6
8631: PUSH
8632: LD_VAR 0 6
8636: PUSH
8637: LD_VAR 0 5
8641: ADD
8642: ST_TO_ADDR
8643: GO 8596
8645: POP
8646: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8647: LD_VAR 0 6
8651: PPUSH
8652: LD_EXP 28
8656: PUSH
8657: LD_VAR 0 2
8661: STR
8662: PPUSH
8663: CALL_OW 38
// end ;
8667: LD_VAR 0 4
8671: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8672: LD_INT 0
8674: PPUSH
8675: PPUSH
// for unit in units do
8676: LD_ADDR_VAR 0 5
8680: PUSH
8681: LD_VAR 0 1
8685: PUSH
8686: FOR_IN
8687: IFFALSE 8710
// PlaceUnitArea ( unit , area , spawnMode ) ;
8689: LD_VAR 0 5
8693: PPUSH
8694: LD_VAR 0 2
8698: PPUSH
8699: LD_VAR 0 3
8703: PPUSH
8704: CALL_OW 49
8708: GO 8686
8710: POP
8711: POP
// end ;
8712: LD_VAR 0 4
8716: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8717: LD_INT 0
8719: PPUSH
8720: PPUSH
8721: PPUSH
8722: PPUSH
// units = characters ;
8723: LD_ADDR_VAR 0 9
8727: PUSH
8728: LD_VAR 0 1
8732: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8733: LD_ADDR_VAR 0 9
8737: PUSH
8738: LD_VAR 0 9
8742: PUSH
8743: LD_EXP 37
8747: PUSH
8748: LD_EXP 38
8752: PUSH
8753: LD_EXP 39
8757: PUSH
8758: LD_EXP 40
8762: PUSH
8763: LD_EXP 41
8767: PUSH
8768: LD_EXP 42
8772: PUSH
8773: LD_EXP 43
8777: PUSH
8778: LD_EXP 44
8782: PUSH
8783: LD_EXP 55
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: DIFF
8799: ST_TO_ADDR
// if not units and not canTalkHero then
8800: LD_VAR 0 9
8804: NOT
8805: PUSH
8806: LD_VAR 0 5
8810: NOT
8811: AND
8812: IFFALSE 8816
// exit ;
8814: GO 8995
// if not units then
8816: LD_VAR 0 9
8820: NOT
8821: IFFALSE 8848
// units = characters diff [ Burlak , Stevens ] ;
8823: LD_ADDR_VAR 0 9
8827: PUSH
8828: LD_VAR 0 1
8832: PUSH
8833: LD_EXP 37
8837: PUSH
8838: LD_EXP 55
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: DIFF
8847: ST_TO_ADDR
// if not units and canTalkHero then
8848: LD_VAR 0 9
8852: NOT
8853: PUSH
8854: LD_VAR 0 5
8858: AND
8859: IFFALSE 8863
// exit ;
8861: GO 8995
// speaker := units [ rand ( 1 , units ) ] ;
8863: LD_ADDR_VAR 0 8
8867: PUSH
8868: LD_VAR 0 9
8872: PUSH
8873: LD_INT 1
8875: PPUSH
8876: LD_VAR 0 9
8880: PPUSH
8881: CALL_OW 12
8885: ARRAY
8886: ST_TO_ADDR
// if radio then
8887: LD_VAR 0 4
8891: IFFALSE 8940
// begin if GetSex ( speaker ) = sex_male then
8893: LD_VAR 0 8
8897: PPUSH
8898: CALL_OW 258
8902: PUSH
8903: LD_INT 1
8905: EQUAL
8906: IFFALSE 8924
// SayRadio ( speaker , dialogMID ) else
8908: LD_VAR 0 8
8912: PPUSH
8913: LD_VAR 0 2
8917: PPUSH
8918: CALL_OW 94
8922: GO 8938
// SayRadio ( speaker , dialogFID ) ;
8924: LD_VAR 0 8
8928: PPUSH
8929: LD_VAR 0 3
8933: PPUSH
8934: CALL_OW 94
// end else
8938: GO 8985
// begin if GetSex ( speaker ) = sex_male then
8940: LD_VAR 0 8
8944: PPUSH
8945: CALL_OW 258
8949: PUSH
8950: LD_INT 1
8952: EQUAL
8953: IFFALSE 8971
// Say ( speaker , dialogMID ) else
8955: LD_VAR 0 8
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 88
8969: GO 8985
// Say ( speaker , dialogFID ) ;
8971: LD_VAR 0 8
8975: PPUSH
8976: LD_VAR 0 3
8980: PPUSH
8981: CALL_OW 88
// end ; result := speaker ;
8985: LD_ADDR_VAR 0 6
8989: PUSH
8990: LD_VAR 0 8
8994: ST_TO_ADDR
// end ;
8995: LD_VAR 0 6
8999: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9000: LD_INT 0
9002: PPUSH
9003: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9004: LD_ADDR_VAR 0 4
9008: PUSH
9009: LD_VAR 0 2
9013: PPUSH
9014: CALL_OW 254
9018: PUSH
9019: LD_INT 3
9021: MINUS
9022: ST_TO_ADDR
// if dir < 0 then
9023: LD_VAR 0 4
9027: PUSH
9028: LD_INT 0
9030: LESS
9031: IFFALSE 9047
// dir := 6 + dir ;
9033: LD_ADDR_VAR 0 4
9037: PUSH
9038: LD_INT 6
9040: PUSH
9041: LD_VAR 0 4
9045: PLUS
9046: ST_TO_ADDR
// SetDir ( un , dir ) ;
9047: LD_VAR 0 1
9051: PPUSH
9052: LD_VAR 0 4
9056: PPUSH
9057: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9061: LD_VAR 0 1
9065: PPUSH
9066: LD_VAR 0 2
9070: PPUSH
9071: CALL_OW 52
// result = un ;
9075: LD_ADDR_VAR 0 3
9079: PUSH
9080: LD_VAR 0 1
9084: ST_TO_ADDR
// end ;
9085: LD_VAR 0 3
9089: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
9094: PPUSH
9095: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9096: LD_ADDR_VAR 0 6
9100: PUSH
9101: LD_INT 34
9103: PUSH
9104: LD_INT 71
9106: PUSH
9107: LD_INT 70
9109: PUSH
9110: LD_INT 69
9112: PUSH
9113: LD_INT 39
9115: PUSH
9116: LD_INT 31
9118: PUSH
9119: LD_INT 14
9121: PUSH
9122: LD_INT 10
9124: PUSH
9125: LD_INT 40
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: ST_TO_ADDR
// resultWeapons = [ ] ;
9139: LD_ADDR_VAR 0 5
9143: PUSH
9144: EMPTY
9145: ST_TO_ADDR
// for i := 1 to weaponTechs do
9146: LD_ADDR_VAR 0 4
9150: PUSH
9151: DOUBLE
9152: LD_INT 1
9154: DEC
9155: ST_TO_ADDR
9156: LD_VAR 0 6
9160: PUSH
9161: FOR_TO
9162: IFFALSE 9349
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9164: LD_VAR 0 6
9168: PUSH
9169: LD_VAR 0 4
9173: ARRAY
9174: PPUSH
9175: LD_VAR 0 2
9179: PPUSH
9180: CALL_OW 482
9184: PUSH
9185: LD_VAR 0 6
9189: PUSH
9190: LD_VAR 0 4
9194: ARRAY
9195: PPUSH
9196: LD_VAR 0 1
9200: PPUSH
9201: CALL_OW 321
9205: PUSH
9206: LD_INT 2
9208: EQUAL
9209: AND
9210: IFFALSE 9347
// case nation of nation_american :
9212: LD_VAR 0 2
9216: PUSH
9217: LD_INT 1
9219: DOUBLE
9220: EQUAL
9221: IFTRUE 9225
9223: GO 9260
9225: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9226: LD_ADDR_VAR 0 5
9230: PUSH
9231: LD_VAR 0 5
9235: PUSH
9236: LD_VAR 0 6
9240: PUSH
9241: LD_VAR 0 4
9245: ARRAY
9246: PPUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: CALL 9366 0 2
9256: ADD
9257: ST_TO_ADDR
9258: GO 9347
9260: LD_INT 2
9262: DOUBLE
9263: EQUAL
9264: IFTRUE 9268
9266: GO 9303
9268: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9269: LD_ADDR_VAR 0 5
9273: PUSH
9274: LD_VAR 0 5
9278: PUSH
9279: LD_VAR 0 6
9283: PUSH
9284: LD_VAR 0 4
9288: ARRAY
9289: PPUSH
9290: LD_VAR 0 2
9294: PPUSH
9295: CALL 9366 0 2
9299: ADD
9300: ST_TO_ADDR
9301: GO 9347
9303: LD_INT 3
9305: DOUBLE
9306: EQUAL
9307: IFTRUE 9311
9309: GO 9346
9311: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9312: LD_ADDR_VAR 0 5
9316: PUSH
9317: LD_VAR 0 5
9321: PUSH
9322: LD_VAR 0 6
9326: PUSH
9327: LD_VAR 0 4
9331: ARRAY
9332: PPUSH
9333: LD_VAR 0 2
9337: PPUSH
9338: CALL 9366 0 2
9342: ADD
9343: ST_TO_ADDR
9344: GO 9347
9346: POP
// end ;
9347: GO 9161
9349: POP
9350: POP
// result = resultWeapons ;
9351: LD_ADDR_VAR 0 3
9355: PUSH
9356: LD_VAR 0 5
9360: ST_TO_ADDR
// end ;
9361: LD_VAR 0 3
9365: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9366: LD_INT 0
9368: PPUSH
// case tech of tech_AdvMet :
9369: LD_VAR 0 1
9373: PUSH
9374: LD_INT 34
9376: DOUBLE
9377: EQUAL
9378: IFTRUE 9382
9380: GO 9410
9382: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9383: LD_ADDR_VAR 0 3
9387: PUSH
9388: LD_INT 6
9390: PUSH
9391: LD_STRING 
9393: PUSH
9394: LD_INT 46
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: PUSH
9402: LD_VAR 0 2
9406: ARRAY
9407: ST_TO_ADDR
9408: GO 9699
9410: LD_INT 71
9412: DOUBLE
9413: EQUAL
9414: IFTRUE 9418
9416: GO 9446
9418: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9419: LD_ADDR_VAR 0 3
9423: PUSH
9424: LD_STRING 
9426: PUSH
9427: LD_STRING 
9429: PUSH
9430: LD_INT 47
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: PUSH
9438: LD_VAR 0 2
9442: ARRAY
9443: ST_TO_ADDR
9444: GO 9699
9446: LD_INT 70
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9482
9454: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9455: LD_ADDR_VAR 0 3
9459: PUSH
9460: LD_STRING 
9462: PUSH
9463: LD_INT 26
9465: PUSH
9466: LD_STRING 
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: LIST
9473: PUSH
9474: LD_VAR 0 2
9478: ARRAY
9479: ST_TO_ADDR
9480: GO 9699
9482: LD_INT 69
9484: DOUBLE
9485: EQUAL
9486: IFTRUE 9490
9488: GO 9518
9490: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9491: LD_ADDR_VAR 0 3
9495: PUSH
9496: LD_INT 4
9498: PUSH
9499: LD_INT 25
9501: PUSH
9502: LD_INT 43
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: LIST
9509: PUSH
9510: LD_VAR 0 2
9514: ARRAY
9515: ST_TO_ADDR
9516: GO 9699
9518: LD_INT 39
9520: DOUBLE
9521: EQUAL
9522: IFTRUE 9526
9524: GO 9554
9526: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9527: LD_ADDR_VAR 0 3
9531: PUSH
9532: LD_INT 5
9534: PUSH
9535: LD_INT 27
9537: PUSH
9538: LD_INT 44
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: LD_VAR 0 2
9550: ARRAY
9551: ST_TO_ADDR
9552: GO 9699
9554: LD_INT 31
9556: DOUBLE
9557: EQUAL
9558: IFTRUE 9562
9560: GO 9590
9562: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9563: LD_ADDR_VAR 0 3
9567: PUSH
9568: LD_STRING 
9570: PUSH
9571: LD_STRING 
9573: PUSH
9574: LD_INT 49
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: PUSH
9582: LD_VAR 0 2
9586: ARRAY
9587: ST_TO_ADDR
9588: GO 9699
9590: LD_INT 14
9592: DOUBLE
9593: EQUAL
9594: IFTRUE 9598
9596: GO 9626
9598: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9599: LD_ADDR_VAR 0 3
9603: PUSH
9604: LD_INT 10
9606: PUSH
9607: LD_STRING 
9609: PUSH
9610: LD_STRING 
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: PUSH
9618: LD_VAR 0 2
9622: ARRAY
9623: ST_TO_ADDR
9624: GO 9699
9626: LD_INT 10
9628: DOUBLE
9629: EQUAL
9630: IFTRUE 9634
9632: GO 9662
9634: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9635: LD_ADDR_VAR 0 3
9639: PUSH
9640: LD_INT 9
9642: PUSH
9643: LD_STRING 
9645: PUSH
9646: LD_STRING 
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: PUSH
9654: LD_VAR 0 2
9658: ARRAY
9659: ST_TO_ADDR
9660: GO 9699
9662: LD_INT 40
9664: DOUBLE
9665: EQUAL
9666: IFTRUE 9670
9668: GO 9698
9670: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9671: LD_ADDR_VAR 0 3
9675: PUSH
9676: LD_INT 7
9678: PUSH
9679: LD_INT 28
9681: PUSH
9682: LD_INT 45
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: LD_VAR 0 2
9694: ARRAY
9695: ST_TO_ADDR
9696: GO 9699
9698: POP
// end ;
9699: LD_VAR 0 3
9703: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9704: LD_INT 0
9706: PPUSH
9707: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9708: LD_ADDR_VAR 0 2
9712: PUSH
9713: LD_VAR 0 1
9717: PPUSH
9718: LD_INT 1
9720: PPUSH
9721: CALL_OW 289
9725: PUSH
9726: LD_VAR 0 1
9730: PPUSH
9731: LD_INT 2
9733: PPUSH
9734: CALL_OW 289
9738: PUSH
9739: LD_VAR 0 1
9743: PPUSH
9744: LD_INT 3
9746: PPUSH
9747: CALL_OW 289
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: ST_TO_ADDR
// end ; end_of_file
9757: LD_VAR 0 2
9761: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 255
9771: PUSH
9772: LD_INT 3
9774: EQUAL
9775: PUSH
9776: LD_VAR 0 1
9780: PPUSH
9781: CALL_OW 266
9785: PUSH
9786: LD_INT 0
9788: EQUAL
9789: AND
9790: IFFALSE 9804
// SetBname ( building , bukharin ) ;
9792: LD_VAR 0 1
9796: PPUSH
9797: LD_STRING bukharin
9799: PPUSH
9800: CALL_OW 500
// if GetSide ( building ) = 2 then
9804: LD_VAR 0 1
9808: PPUSH
9809: CALL_OW 255
9813: PUSH
9814: LD_INT 2
9816: EQUAL
9817: IFFALSE 9958
// begin if GetBType ( building ) = b_lab then
9819: LD_VAR 0 1
9823: PPUSH
9824: CALL_OW 266
9828: PUSH
9829: LD_INT 6
9831: EQUAL
9832: IFFALSE 9846
// ComUpgradeLab ( building , b_lab_weapon ) ;
9834: LD_VAR 0 1
9838: PPUSH
9839: LD_INT 10
9841: PPUSH
9842: CALL_OW 147
// if GetBType ( building ) = b_workshop then
9846: LD_VAR 0 1
9850: PPUSH
9851: CALL_OW 266
9855: PUSH
9856: LD_INT 2
9858: EQUAL
9859: IFFALSE 9870
// ComUpgrade ( building ) ;
9861: LD_VAR 0 1
9865: PPUSH
9866: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
9870: LD_VAR 0 1
9874: PPUSH
9875: CALL_OW 266
9879: PUSH
9880: LD_INT 17
9882: EQUAL
9883: IFFALSE 9958
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 2 , 2 , 3 ] [ Difficulty ] , 1 , [ 1 , 1 , 2 ] [ Difficulty ] , true ) ;
9885: LD_INT 2
9887: PPUSH
9888: LD_INT 2
9890: PPUSH
9891: LD_EXP 49
9895: PPUSH
9896: LD_INT 34
9898: PPUSH
9899: LD_INT 39
9901: PPUSH
9902: LD_INT 40
9904: PPUSH
9905: LD_INT 35
9907: PPUSH
9908: LD_INT 2
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: LD_INT 3
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: LIST
9921: PUSH
9922: LD_OWVAR 67
9926: ARRAY
9927: PPUSH
9928: LD_INT 1
9930: PPUSH
9931: LD_INT 1
9933: PUSH
9934: LD_INT 1
9936: PUSH
9937: LD_INT 2
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: PUSH
9945: LD_OWVAR 67
9949: ARRAY
9950: PPUSH
9951: LD_INT 1
9953: PPUSH
9954: CALL 10715 0 11
// end ; end ;
9958: PPOPN 1
9960: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
9961: LD_VAR 0 2
9965: PPUSH
9966: CALL_OW 255
9970: PUSH
9971: LD_INT 3
9973: EQUAL
9974: PUSH
9975: LD_VAR 0 2
9979: PPUSH
9980: CALL_OW 248
9984: PUSH
9985: LD_INT 3
9987: EQUAL
9988: AND
9989: PUSH
9990: LD_EXP 10
9994: NOT
9995: AND
9996: IFFALSE 10007
// Dial_TameApe ( human ) ;
9998: LD_VAR 0 2
10002: PPUSH
10003: CALL 4428 0 1
// end ;
10007: PPOPN 2
10009: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10010: LD_VAR 0 1
10014: PUSH
10015: LD_INT 1
10017: EQUAL
10018: PUSH
10019: LD_VAR 0 2
10023: PPUSH
10024: CALL_OW 255
10028: PUSH
10029: LD_INT 3
10031: EQUAL
10032: AND
10033: IFFALSE 10039
// Dial_ResearchApeLang ;
10035: CALL 4317 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10039: LD_VAR 0 1
10043: PUSH
10044: LD_INT 2
10046: EQUAL
10047: PUSH
10048: LD_VAR 0 2
10052: PPUSH
10053: CALL_OW 255
10057: PUSH
10058: LD_INT 3
10060: EQUAL
10061: AND
10062: IFFALSE 10068
// Dial_ResearchApePsych ;
10064: CALL 4861 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10068: LD_VAR 0 1
10072: PUSH
10073: LD_INT 11
10075: EQUAL
10076: PUSH
10077: LD_VAR 0 2
10081: PPUSH
10082: CALL_OW 255
10086: PUSH
10087: LD_INT 3
10089: EQUAL
10090: AND
10091: IFFALSE 10097
// Dial_ResearchApeAgress ;
10093: CALL 5053 0 0
// end ;
10097: PPOPN 2
10099: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10100: LD_VAR 0 2
10104: PPUSH
10105: CALL_OW 255
10109: PUSH
10110: LD_INT 3
10112: EQUAL
10113: PUSH
10114: LD_VAR 0 2
10118: PPUSH
10119: CALL_OW 257
10123: PUSH
10124: LD_INT 12
10126: EQUAL
10127: AND
10128: PUSH
10129: LD_VAR 0 1
10133: PPUSH
10134: CALL_OW 266
10138: PUSH
10139: LD_INT 6
10141: EQUAL
10142: PUSH
10143: LD_VAR 0 1
10147: PPUSH
10148: CALL_OW 266
10152: PUSH
10153: LD_INT 7
10155: EQUAL
10156: OR
10157: AND
10158: PUSH
10159: LD_EXP 11
10163: NOT
10164: AND
10165: IFFALSE 10171
// Dial_ApeEnterLab ;
10167: CALL 4649 0 0
// end ;
10171: PPOPN 2
10173: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10174: LD_VAR 0 1
10178: PUSH
10179: LD_EXP 50
10183: IN
10184: IFFALSE 10202
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10186: LD_ADDR_EXP 50
10190: PUSH
10191: LD_EXP 50
10195: PUSH
10196: LD_VAR 0 1
10200: DIFF
10201: ST_TO_ADDR
// if unit in arabianHovercrafts then
10202: LD_VAR 0 1
10206: PUSH
10207: LD_EXP 51
10211: IN
10212: IFFALSE 10230
// arabianHovercrafts = arabianHovercrafts diff unit ;
10214: LD_ADDR_EXP 51
10218: PUSH
10219: LD_EXP 51
10223: PUSH
10224: LD_VAR 0 1
10228: DIFF
10229: ST_TO_ADDR
// if unit in arabianPatrolTroops then
10230: LD_VAR 0 1
10234: PUSH
10235: LD_EXP 52
10239: IN
10240: IFFALSE 10258
// arabianPatrolTroops = arabianPatrolTroops diff unit ;
10242: LD_ADDR_EXP 52
10246: PUSH
10247: LD_EXP 52
10251: PUSH
10252: LD_VAR 0 1
10256: DIFF
10257: ST_TO_ADDR
// end ;
10258: PPOPN 1
10260: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10261: LD_VAR 0 1
10265: PUSH
10266: LD_EXP 49
10270: IN
10271: IFFALSE 10289
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10273: LD_ADDR_EXP 49
10277: PUSH
10278: LD_EXP 49
10282: PUSH
10283: LD_VAR 0 1
10287: DIFF
10288: ST_TO_ADDR
// if unit = Burlak then
10289: LD_VAR 0 1
10293: PUSH
10294: LD_EXP 37
10298: EQUAL
10299: IFFALSE 10305
// Lose_Burlak ;
10301: CALL 17099 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10305: LD_INT 22
10307: PUSH
10308: LD_INT 3
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 21
10317: PUSH
10318: LD_INT 1
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 23
10327: PUSH
10328: LD_INT 3
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: PPUSH
10340: CALL_OW 69
10344: PUSH
10345: LD_INT 6
10347: LESS
10348: IFFALSE 10354
// Lose_Survive ;
10350: CALL 17114 0 0
// end ;
10354: PPOPN 1
10356: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10357: LD_VAR 0 1
10361: PUSH
10362: LD_INT 3
10364: EQUAL
10365: PUSH
10366: LD_VAR 0 2
10370: PUSH
10371: LD_INT 6
10373: EQUAL
10374: AND
10375: PUSH
10376: LD_VAR 0 1
10380: PUSH
10381: LD_INT 6
10383: EQUAL
10384: PUSH
10385: LD_VAR 0 2
10389: PUSH
10390: LD_INT 3
10392: EQUAL
10393: AND
10394: OR
10395: PUSH
10396: LD_EXP 55
10400: PPUSH
10401: CALL_OW 255
10405: PUSH
10406: LD_INT 6
10408: EQUAL
10409: AND
10410: IFFALSE 10468
// begin stevensFollow = false ;
10412: LD_ADDR_EXP 15
10416: PUSH
10417: LD_INT 0
10419: ST_TO_ADDR
// stevensCanExitMap = true ;
10420: LD_ADDR_EXP 19
10424: PUSH
10425: LD_INT 1
10427: ST_TO_ADDR
// stevensWasInDepot = false ;
10428: LD_ADDR_EXP 18
10432: PUSH
10433: LD_INT 0
10435: ST_TO_ADDR
// stevensDepot = false ;
10436: LD_ADDR_EXP 17
10440: PUSH
10441: LD_INT 0
10443: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10444: LD_EXP 55
10448: PPUSH
10449: LD_INT 1
10451: PPUSH
10452: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10456: LD_EXP 55
10460: PPUSH
10461: LD_INT 37
10463: PPUSH
10464: CALL_OW 113
// end ; end ; end_of_file
10468: PPOPN 2
10470: END
// export function BuildBase ; var engs ; begin
10471: LD_INT 0
10473: PPUSH
10474: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10475: LD_ADDR_VAR 0 2
10479: PUSH
10480: LD_INT 22
10482: PUSH
10483: LD_INT 2
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: LD_INT 21
10492: PUSH
10493: LD_INT 1
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 25
10502: PUSH
10503: LD_INT 2
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: LIST
10514: PPUSH
10515: CALL_OW 69
10519: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10520: LD_VAR 0 2
10524: PPUSH
10525: LD_INT 4
10527: PPUSH
10528: LD_INT 129
10530: PPUSH
10531: LD_INT 74
10533: PPUSH
10534: LD_INT 2
10536: PPUSH
10537: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10541: LD_VAR 0 2
10545: PPUSH
10546: LD_INT 26
10548: PPUSH
10549: LD_INT 128
10551: PPUSH
10552: LD_INT 53
10554: PPUSH
10555: LD_INT 2
10557: PPUSH
10558: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 127 , 56 , 1 ) ;
10562: LD_VAR 0 2
10566: PPUSH
10567: LD_INT 26
10569: PPUSH
10570: LD_INT 127
10572: PPUSH
10573: LD_INT 56
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10583: LD_VAR 0 2
10587: PPUSH
10588: LD_INT 6
10590: PPUSH
10591: LD_INT 138
10593: PPUSH
10594: LD_INT 78
10596: PPUSH
10597: LD_INT 5
10599: PPUSH
10600: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10604: LD_VAR 0 2
10608: PPUSH
10609: LD_INT 2
10611: PPUSH
10612: LD_INT 137
10614: PPUSH
10615: LD_INT 63
10617: PPUSH
10618: LD_INT 4
10620: PPUSH
10621: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10625: LD_VAR 0 2
10629: PPUSH
10630: LD_INT 23
10632: PPUSH
10633: LD_INT 137
10635: PPUSH
10636: LD_INT 60
10638: PPUSH
10639: LD_INT 3
10641: PPUSH
10642: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10646: LD_VAR 0 2
10650: PPUSH
10651: LD_INT 16
10653: PPUSH
10654: LD_INT 140
10656: PPUSH
10657: LD_INT 66
10659: PPUSH
10660: LD_INT 5
10662: PPUSH
10663: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10667: LD_VAR 0 2
10671: PPUSH
10672: LD_INT 17
10674: PPUSH
10675: LD_INT 133
10677: PPUSH
10678: LD_INT 59
10680: PPUSH
10681: LD_INT 2
10683: PPUSH
10684: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10688: LD_INT 1
10690: PUSH
10691: LD_EXP 48
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PPUSH
10700: LD_INT 128
10702: PPUSH
10703: LD_INT 66
10705: PPUSH
10706: CALL_OW 111
// end ;
10710: LD_VAR 0 1
10714: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , offensiveReadyCounter , target1 , target2 , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10715: LD_INT 0
10717: PPUSH
10718: PPUSH
10719: PPUSH
10720: PPUSH
10721: PPUSH
10722: PPUSH
10723: PPUSH
10724: PPUSH
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
10732: PPUSH
10733: PPUSH
10734: PPUSH
10735: PPUSH
10736: PPUSH
10737: PPUSH
10738: PPUSH
10739: PPUSH
10740: PPUSH
10741: PPUSH
10742: PPUSH
10743: PPUSH
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
10748: PPUSH
// personel = [ ] ;
10749: LD_ADDR_VAR 0 18
10753: PUSH
10754: EMPTY
10755: ST_TO_ADDR
// vehicles = [ ] ;
10756: LD_ADDR_VAR 0 24
10760: PUSH
10761: EMPTY
10762: ST_TO_ADDR
// for unit in basePersonel do
10763: LD_ADDR_VAR 0 17
10767: PUSH
10768: LD_VAR 0 3
10772: PUSH
10773: FOR_IN
10774: IFFALSE 10822
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
10776: LD_ADDR_VAR 0 18
10780: PUSH
10781: LD_VAR 0 18
10785: PUSH
10786: LD_VAR 0 17
10790: PUSH
10791: LD_VAR 0 17
10795: PPUSH
10796: CALL_OW 310
10800: PUSH
10801: LD_VAR 0 17
10805: PPUSH
10806: CALL_OW 302
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: PUSH
10816: EMPTY
10817: LIST
10818: ADD
10819: ST_TO_ADDR
10820: GO 10773
10822: POP
10823: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
10824: LD_ADDR_VAR 0 23
10828: PUSH
10829: LD_VAR 0 4
10833: PPUSH
10834: LD_INT 22
10836: PUSH
10837: LD_VAR 0 1
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 21
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 50
10858: PUSH
10859: EMPTY
10860: LIST
10861: PUSH
10862: LD_INT 3
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 31
10870: PUSH
10871: LD_INT 31
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 34
10880: PUSH
10881: LD_INT 12
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 34
10890: PUSH
10891: LD_INT 51
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 34
10900: PUSH
10901: LD_INT 32
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: PPUSH
10925: CALL_OW 70
10929: PUSH
10930: LD_EXP 50
10934: DIFF
10935: PUSH
10936: FOR_IN
10937: IFFALSE 10985
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
10939: LD_ADDR_VAR 0 24
10943: PUSH
10944: LD_VAR 0 24
10948: PUSH
10949: LD_VAR 0 23
10953: PUSH
10954: LD_VAR 0 23
10958: PPUSH
10959: CALL_OW 310
10963: PUSH
10964: LD_VAR 0 23
10968: PPUSH
10969: CALL_OW 302
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: ADD
10982: ST_TO_ADDR
10983: GO 10936
10985: POP
10986: POP
// repeat soldiers = [ ] ;
10987: LD_ADDR_VAR 0 19
10991: PUSH
10992: EMPTY
10993: ST_TO_ADDR
// engineers = [ ] ;
10994: LD_ADDR_VAR 0 20
10998: PUSH
10999: EMPTY
11000: ST_TO_ADDR
// mechanics = [ ] ;
11001: LD_ADDR_VAR 0 21
11005: PUSH
11006: EMPTY
11007: ST_TO_ADDR
// scientists = [ ] ;
11008: LD_ADDR_VAR 0 22
11012: PUSH
11013: EMPTY
11014: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11015: LD_ADDR_VAR 0 33
11019: PUSH
11020: LD_VAR 0 4
11024: PPUSH
11025: LD_INT 22
11027: PUSH
11028: LD_VAR 0 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 21
11039: PUSH
11040: LD_INT 3
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 50
11049: PUSH
11050: EMPTY
11051: LIST
11052: PUSH
11053: LD_INT 2
11055: PUSH
11056: LD_INT 30
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 30
11068: PUSH
11069: LD_INT 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: PPUSH
11087: CALL_OW 70
11091: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11092: LD_ADDR_VAR 0 34
11096: PUSH
11097: LD_VAR 0 4
11101: PPUSH
11102: LD_INT 22
11104: PUSH
11105: LD_VAR 0 1
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 21
11116: PUSH
11117: LD_INT 3
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 50
11126: PUSH
11127: EMPTY
11128: LIST
11129: PUSH
11130: LD_INT 2
11132: PUSH
11133: LD_INT 30
11135: PUSH
11136: LD_INT 2
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 30
11145: PUSH
11146: LD_INT 3
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: PPUSH
11164: CALL_OW 70
11168: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11169: LD_ADDR_VAR 0 35
11173: PUSH
11174: LD_VAR 0 4
11178: PPUSH
11179: LD_INT 22
11181: PUSH
11182: LD_VAR 0 1
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 21
11193: PUSH
11194: LD_INT 3
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 50
11203: PUSH
11204: EMPTY
11205: LIST
11206: PUSH
11207: LD_INT 2
11209: PUSH
11210: LD_INT 30
11212: PUSH
11213: LD_INT 6
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 30
11222: PUSH
11223: LD_INT 7
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 30
11232: PUSH
11233: LD_INT 8
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 70
11256: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11257: LD_ADDR_VAR 0 36
11261: PUSH
11262: LD_VAR 0 4
11266: PPUSH
11267: LD_INT 22
11269: PUSH
11270: LD_VAR 0 1
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: LD_INT 3
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: LD_INT 50
11291: PUSH
11292: EMPTY
11293: LIST
11294: PUSH
11295: LD_INT 2
11297: PUSH
11298: LD_INT 30
11300: PUSH
11301: LD_INT 31
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 30
11310: PUSH
11311: LD_INT 32
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 70
11333: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11334: LD_ADDR_VAR 0 37
11338: PUSH
11339: LD_VAR 0 4
11343: PPUSH
11344: LD_INT 22
11346: PUSH
11347: LD_VAR 0 1
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: LD_INT 21
11358: PUSH
11359: LD_INT 3
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 50
11368: PUSH
11369: EMPTY
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 30
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 30
11387: PUSH
11388: LD_INT 5
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: PPUSH
11406: CALL_OW 70
11410: ST_TO_ADDR
// for i := 1 to personel do
11411: LD_ADDR_VAR 0 13
11415: PUSH
11416: DOUBLE
11417: LD_INT 1
11419: DEC
11420: ST_TO_ADDR
11421: LD_VAR 0 18
11425: PUSH
11426: FOR_TO
11427: IFFALSE 11633
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11429: LD_VAR 0 18
11433: PUSH
11434: LD_VAR 0 13
11438: ARRAY
11439: PUSH
11440: LD_INT 1
11442: ARRAY
11443: PPUSH
11444: CALL_OW 256
11448: PUSH
11449: LD_INT 1000
11451: EQUAL
11452: IFFALSE 11494
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11454: LD_ADDR_VAR 0 18
11458: PUSH
11459: LD_VAR 0 18
11463: PPUSH
11464: LD_VAR 0 13
11468: PUSH
11469: LD_VAR 0 18
11473: PUSH
11474: LD_VAR 0 13
11478: ARRAY
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PPUSH
11484: LD_INT 1
11486: PPUSH
11487: CALL 27886 0 3
11491: ST_TO_ADDR
// end else
11492: GO 11581
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11494: LD_VAR 0 18
11498: PUSH
11499: LD_VAR 0 13
11503: ARRAY
11504: PUSH
11505: LD_INT 1
11507: ARRAY
11508: PPUSH
11509: CALL_OW 256
11513: PUSH
11514: LD_INT 950
11516: LESSEQUAL
11517: IFFALSE 11581
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
11519: LD_ADDR_VAR 0 18
11523: PUSH
11524: LD_VAR 0 18
11528: PPUSH
11529: LD_VAR 0 13
11533: PUSH
11534: LD_VAR 0 18
11538: PUSH
11539: LD_VAR 0 13
11543: ARRAY
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PPUSH
11549: LD_INT 0
11551: PPUSH
11552: CALL 27886 0 3
11556: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11557: LD_VAR 0 18
11561: PUSH
11562: LD_VAR 0 13
11566: ARRAY
11567: PUSH
11568: LD_INT 1
11570: ARRAY
11571: PPUSH
11572: LD_VAR 0 5
11576: PPUSH
11577: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11581: LD_VAR 0 18
11585: PUSH
11586: LD_VAR 0 13
11590: ARRAY
11591: PUSH
11592: LD_INT 1
11594: ARRAY
11595: PPUSH
11596: CALL_OW 256
11600: PUSH
11601: LD_INT 250
11603: LESS
11604: IFFALSE 11631
// personel = personel diff [ personel [ i ] ] ;
11606: LD_ADDR_VAR 0 18
11610: PUSH
11611: LD_VAR 0 18
11615: PUSH
11616: LD_VAR 0 18
11620: PUSH
11621: LD_VAR 0 13
11625: ARRAY
11626: PUSH
11627: EMPTY
11628: LIST
11629: DIFF
11630: ST_TO_ADDR
// end ;
11631: GO 11426
11633: POP
11634: POP
// for i := 1 to vehicles do
11635: LD_ADDR_VAR 0 13
11639: PUSH
11640: DOUBLE
11641: LD_INT 1
11643: DEC
11644: ST_TO_ADDR
11645: LD_VAR 0 24
11649: PUSH
11650: FOR_TO
11651: IFFALSE 12037
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
11653: LD_VAR 0 24
11657: PUSH
11658: LD_VAR 0 13
11662: ARRAY
11663: PUSH
11664: LD_INT 1
11666: ARRAY
11667: PPUSH
11668: CALL_OW 261
11672: PUSH
11673: LD_INT 50
11675: LESS
11676: IFFALSE 11700
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
11678: LD_VAR 0 24
11682: PUSH
11683: LD_VAR 0 13
11687: ARRAY
11688: PUSH
11689: LD_INT 1
11691: ARRAY
11692: PPUSH
11693: LD_INT 100
11695: PPUSH
11696: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11700: LD_VAR 0 24
11704: PUSH
11705: LD_VAR 0 13
11709: ARRAY
11710: PUSH
11711: LD_INT 1
11713: ARRAY
11714: PPUSH
11715: CALL_OW 256
11719: PUSH
11720: LD_INT 1000
11722: EQUAL
11723: IFFALSE 11898
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11725: LD_VAR 0 24
11729: PUSH
11730: LD_VAR 0 13
11734: ARRAY
11735: PUSH
11736: LD_INT 1
11738: ARRAY
11739: PPUSH
11740: CALL_OW 263
11744: PUSH
11745: LD_INT 1
11747: EQUAL
11748: IFFALSE 11806
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
11750: LD_VAR 0 24
11754: PUSH
11755: LD_VAR 0 13
11759: ARRAY
11760: PUSH
11761: LD_INT 2
11763: ARRAY
11764: PPUSH
11765: CALL_OW 310
11769: NOT
11770: IFFALSE 11806
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
11772: LD_VAR 0 24
11776: PUSH
11777: LD_VAR 0 13
11781: ARRAY
11782: PUSH
11783: LD_INT 2
11785: ARRAY
11786: PPUSH
11787: LD_VAR 0 24
11791: PUSH
11792: LD_VAR 0 13
11796: ARRAY
11797: PUSH
11798: LD_INT 1
11800: ARRAY
11801: PPUSH
11802: CALL_OW 120
// if offensiveunits < vehiclesToAttackAmount then
11806: LD_VAR 0 27
11810: PUSH
11811: LD_VAR 0 10
11815: LESS
11816: IFFALSE 11858
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
11818: LD_ADDR_VAR 0 24
11822: PUSH
11823: LD_VAR 0 24
11827: PPUSH
11828: LD_VAR 0 13
11832: PUSH
11833: LD_VAR 0 24
11837: PUSH
11838: LD_VAR 0 13
11842: ARRAY
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: LD_INT 3
11850: PPUSH
11851: CALL 27886 0 3
11855: ST_TO_ADDR
11856: GO 11896
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
11858: LD_ADDR_VAR 0 24
11862: PUSH
11863: LD_VAR 0 24
11867: PPUSH
11868: LD_VAR 0 13
11872: PUSH
11873: LD_VAR 0 24
11877: PUSH
11878: LD_VAR 0 13
11882: ARRAY
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PPUSH
11888: LD_INT 2
11890: PPUSH
11891: CALL 27886 0 3
11895: ST_TO_ADDR
// end else
11896: GO 11985
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
11898: LD_VAR 0 24
11902: PUSH
11903: LD_VAR 0 13
11907: ARRAY
11908: PUSH
11909: LD_INT 1
11911: ARRAY
11912: PPUSH
11913: CALL_OW 256
11917: PUSH
11918: LD_INT 650
11920: LESSEQUAL
11921: IFFALSE 11985
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
11923: LD_ADDR_VAR 0 24
11927: PUSH
11928: LD_VAR 0 24
11932: PPUSH
11933: LD_VAR 0 13
11937: PUSH
11938: LD_VAR 0 24
11942: PUSH
11943: LD_VAR 0 13
11947: ARRAY
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PPUSH
11953: LD_INT 0
11955: PPUSH
11956: CALL 27886 0 3
11960: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
11961: LD_VAR 0 24
11965: PUSH
11966: LD_VAR 0 13
11970: ARRAY
11971: PUSH
11972: LD_INT 1
11974: ARRAY
11975: PPUSH
11976: LD_VAR 0 6
11980: PPUSH
11981: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
11985: LD_VAR 0 24
11989: PUSH
11990: LD_VAR 0 13
11994: ARRAY
11995: PUSH
11996: LD_INT 1
11998: ARRAY
11999: PPUSH
12000: CALL_OW 256
12004: PUSH
12005: LD_INT 250
12007: LESS
12008: IFFALSE 12035
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12010: LD_ADDR_VAR 0 24
12014: PUSH
12015: LD_VAR 0 24
12019: PUSH
12020: LD_VAR 0 24
12024: PUSH
12025: LD_VAR 0 13
12029: ARRAY
12030: PUSH
12031: EMPTY
12032: LIST
12033: DIFF
12034: ST_TO_ADDR
// end ;
12035: GO 11650
12037: POP
12038: POP
// for i := 1 to personel do
12039: LD_ADDR_VAR 0 13
12043: PUSH
12044: DOUBLE
12045: LD_INT 1
12047: DEC
12048: ST_TO_ADDR
12049: LD_VAR 0 18
12053: PUSH
12054: FOR_TO
12055: IFFALSE 12096
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12057: LD_ADDR_VAR 0 19
12061: PUSH
12062: LD_VAR 0 19
12066: PUSH
12067: LD_VAR 0 18
12071: PUSH
12072: LD_VAR 0 13
12076: ARRAY
12077: PPUSH
12078: LD_INT 25
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PPUSH
12088: CALL_OW 72
12092: ADD
12093: ST_TO_ADDR
12094: GO 12054
12096: POP
12097: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12098: LD_VAR 0 19
12102: PUSH
12103: LD_VAR 0 36
12107: PPUSH
12108: LD_INT 3
12110: PUSH
12111: LD_INT 59
12113: PUSH
12114: EMPTY
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PPUSH
12121: CALL_OW 72
12125: AND
12126: IFFALSE 12414
// begin for i := 1 to personel do
12128: LD_ADDR_VAR 0 13
12132: PUSH
12133: DOUBLE
12134: LD_INT 1
12136: DEC
12137: ST_TO_ADDR
12138: LD_VAR 0 18
12142: PUSH
12143: FOR_TO
12144: IFFALSE 12410
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12146: LD_VAR 0 18
12150: PUSH
12151: LD_VAR 0 13
12155: ARRAY
12156: PUSH
12157: LD_INT 1
12159: ARRAY
12160: PPUSH
12161: CALL_OW 257
12165: PUSH
12166: LD_INT 1
12168: EQUAL
12169: PUSH
12170: LD_VAR 0 18
12174: PUSH
12175: LD_VAR 0 13
12179: ARRAY
12180: PUSH
12181: LD_INT 3
12183: ARRAY
12184: PUSH
12185: LD_INT 1
12187: EQUAL
12188: AND
12189: IFFALSE 12408
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12191: LD_VAR 0 18
12195: PUSH
12196: LD_VAR 0 13
12200: ARRAY
12201: PUSH
12202: LD_INT 1
12204: ARRAY
12205: PPUSH
12206: CALL_OW 437
12210: IFFALSE 12311
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12212: LD_VAR 0 18
12216: PUSH
12217: LD_VAR 0 13
12221: ARRAY
12222: PUSH
12223: LD_INT 1
12225: ARRAY
12226: PPUSH
12227: CALL_OW 437
12231: PUSH
12232: LD_INT 1
12234: ARRAY
12235: PUSH
12236: LD_INT 1
12238: ARRAY
12239: PUSH
12240: LD_STRING e
12242: EQUAL
12243: PUSH
12244: LD_VAR 0 18
12248: PUSH
12249: LD_VAR 0 13
12253: ARRAY
12254: PUSH
12255: LD_INT 1
12257: ARRAY
12258: PPUSH
12259: CALL_OW 437
12263: PUSH
12264: LD_INT 1
12266: ARRAY
12267: PUSH
12268: LD_INT 4
12270: ARRAY
12271: PPUSH
12272: CALL_OW 266
12276: PUSH
12277: LD_INT 4
12279: PUSH
12280: LD_INT 5
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: IN
12287: AND
12288: IFFALSE 12311
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12290: LD_VAR 0 18
12294: PUSH
12295: LD_VAR 0 13
12299: ARRAY
12300: PUSH
12301: LD_INT 1
12303: ARRAY
12304: PPUSH
12305: EMPTY
12306: PPUSH
12307: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12311: LD_ADDR_VAR 0 40
12315: PUSH
12316: LD_VAR 0 36
12320: PPUSH
12321: LD_INT 3
12323: PUSH
12324: LD_INT 59
12326: PUSH
12327: EMPTY
12328: LIST
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PPUSH
12334: CALL_OW 72
12338: PUSH
12339: FOR_IN
12340: IFFALSE 12406
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12342: LD_VAR 0 18
12346: PUSH
12347: LD_VAR 0 13
12351: ARRAY
12352: PUSH
12353: LD_INT 1
12355: ARRAY
12356: PPUSH
12357: CALL_OW 310
12361: PPUSH
12362: CALL_OW 266
12366: PUSH
12367: LD_INT 31
12369: PUSH
12370: LD_INT 32
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: IN
12377: NOT
12378: IFFALSE 12404
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12380: LD_VAR 0 18
12384: PUSH
12385: LD_VAR 0 13
12389: ARRAY
12390: PUSH
12391: LD_INT 1
12393: ARRAY
12394: PPUSH
12395: LD_VAR 0 40
12399: PPUSH
12400: CALL_OW 120
12404: GO 12339
12406: POP
12407: POP
// end ; end ;
12408: GO 12143
12410: POP
12411: POP
// end else
12412: GO 12629
// if soldiers and barracks then
12414: LD_VAR 0 19
12418: PUSH
12419: LD_VAR 0 37
12423: AND
12424: IFFALSE 12629
// for i := 1 to personel do
12426: LD_ADDR_VAR 0 13
12430: PUSH
12431: DOUBLE
12432: LD_INT 1
12434: DEC
12435: ST_TO_ADDR
12436: LD_VAR 0 18
12440: PUSH
12441: FOR_TO
12442: IFFALSE 12627
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12444: LD_VAR 0 18
12448: PUSH
12449: LD_VAR 0 13
12453: ARRAY
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PPUSH
12459: CALL_OW 257
12463: PUSH
12464: LD_INT 1
12466: EQUAL
12467: PUSH
12468: LD_VAR 0 18
12472: PUSH
12473: LD_VAR 0 13
12477: ARRAY
12478: PUSH
12479: LD_INT 3
12481: ARRAY
12482: PUSH
12483: LD_INT 1
12485: EQUAL
12486: AND
12487: PUSH
12488: LD_VAR 0 18
12492: PUSH
12493: LD_VAR 0 13
12497: ARRAY
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: PPUSH
12503: LD_INT 56
12505: PUSH
12506: EMPTY
12507: LIST
12508: PPUSH
12509: CALL_OW 72
12513: AND
12514: IFFALSE 12625
// begin if not personel [ i ] [ 2 ] then
12516: LD_VAR 0 18
12520: PUSH
12521: LD_VAR 0 13
12525: ARRAY
12526: PUSH
12527: LD_INT 2
12529: ARRAY
12530: NOT
12531: IFFALSE 12591
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12533: LD_ADDR_VAR 0 18
12537: PUSH
12538: LD_VAR 0 18
12542: PPUSH
12543: LD_VAR 0 13
12547: PUSH
12548: LD_VAR 0 18
12552: PUSH
12553: LD_VAR 0 13
12557: ARRAY
12558: PUSH
12559: LD_INT 1
12561: MINUS
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: LD_VAR 0 37
12571: PUSH
12572: LD_INT 1
12574: PPUSH
12575: LD_VAR 0 37
12579: PPUSH
12580: CALL_OW 12
12584: ARRAY
12585: PPUSH
12586: CALL 27886 0 3
12590: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12591: LD_VAR 0 18
12595: PUSH
12596: LD_VAR 0 13
12600: ARRAY
12601: PUSH
12602: LD_INT 1
12604: ARRAY
12605: PPUSH
12606: LD_VAR 0 18
12610: PUSH
12611: LD_VAR 0 13
12615: ARRAY
12616: PUSH
12617: LD_INT 2
12619: ARRAY
12620: PPUSH
12621: CALL_OW 120
// end ;
12625: GO 12441
12627: POP
12628: POP
// for i := 1 to personel do
12629: LD_ADDR_VAR 0 13
12633: PUSH
12634: DOUBLE
12635: LD_INT 1
12637: DEC
12638: ST_TO_ADDR
12639: LD_VAR 0 18
12643: PUSH
12644: FOR_TO
12645: IFFALSE 12686
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12647: LD_ADDR_VAR 0 20
12651: PUSH
12652: LD_VAR 0 20
12656: PUSH
12657: LD_VAR 0 18
12661: PUSH
12662: LD_VAR 0 13
12666: ARRAY
12667: PPUSH
12668: LD_INT 25
12670: PUSH
12671: LD_INT 2
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PPUSH
12678: CALL_OW 72
12682: ADD
12683: ST_TO_ADDR
12684: GO 12644
12686: POP
12687: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12688: LD_VAR 0 20
12692: PUSH
12693: LD_VAR 0 4
12697: PPUSH
12698: LD_INT 22
12700: PUSH
12701: LD_VAR 0 1
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 21
12712: PUSH
12713: LD_INT 3
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 3
12722: PUSH
12723: LD_INT 24
12725: PUSH
12726: LD_INT 1000
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: PPUSH
12742: CALL_OW 70
12746: AND
12747: IFFALSE 13023
// begin for i := 1 to personel do
12749: LD_ADDR_VAR 0 13
12753: PUSH
12754: DOUBLE
12755: LD_INT 1
12757: DEC
12758: ST_TO_ADDR
12759: LD_VAR 0 18
12763: PUSH
12764: FOR_TO
12765: IFFALSE 13019
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
12767: LD_VAR 0 18
12771: PUSH
12772: LD_VAR 0 13
12776: ARRAY
12777: PUSH
12778: LD_INT 1
12780: ARRAY
12781: PPUSH
12782: CALL_OW 257
12786: PUSH
12787: LD_INT 2
12789: EQUAL
12790: PUSH
12791: LD_VAR 0 18
12795: PUSH
12796: LD_VAR 0 13
12800: ARRAY
12801: PUSH
12802: LD_INT 3
12804: ARRAY
12805: PUSH
12806: LD_INT 1
12808: EQUAL
12809: AND
12810: IFFALSE 13017
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12812: LD_VAR 0 18
12816: PUSH
12817: LD_VAR 0 13
12821: ARRAY
12822: PUSH
12823: LD_INT 1
12825: ARRAY
12826: PPUSH
12827: CALL_OW 437
12831: IFFALSE 12887
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
12833: LD_VAR 0 18
12837: PUSH
12838: LD_VAR 0 13
12842: ARRAY
12843: PUSH
12844: LD_INT 1
12846: ARRAY
12847: PPUSH
12848: CALL_OW 437
12852: PUSH
12853: LD_INT 1
12855: ARRAY
12856: PUSH
12857: LD_INT 1
12859: ARRAY
12860: PUSH
12861: LD_STRING e
12863: EQUAL
12864: IFFALSE 12887
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12866: LD_VAR 0 18
12870: PUSH
12871: LD_VAR 0 13
12875: ARRAY
12876: PUSH
12877: LD_INT 1
12879: ARRAY
12880: PPUSH
12881: EMPTY
12882: PPUSH
12883: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
12887: LD_VAR 0 18
12891: PUSH
12892: LD_VAR 0 13
12896: ARRAY
12897: PUSH
12898: LD_INT 1
12900: ARRAY
12901: PPUSH
12902: CALL_OW 310
12906: IFFALSE 12927
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
12908: LD_VAR 0 18
12912: PUSH
12913: LD_VAR 0 13
12917: ARRAY
12918: PUSH
12919: LD_INT 1
12921: ARRAY
12922: PPUSH
12923: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
12927: LD_ADDR_VAR 0 38
12931: PUSH
12932: LD_VAR 0 4
12936: PPUSH
12937: LD_INT 22
12939: PUSH
12940: LD_VAR 0 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 3
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 3
12961: PUSH
12962: LD_INT 24
12964: PUSH
12965: LD_INT 1000
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: PPUSH
12981: CALL_OW 70
12985: PUSH
12986: FOR_IN
12987: IFFALSE 13015
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
12989: LD_VAR 0 18
12993: PUSH
12994: LD_VAR 0 13
12998: ARRAY
12999: PUSH
13000: LD_INT 1
13002: ARRAY
13003: PPUSH
13004: LD_VAR 0 38
13008: PPUSH
13009: CALL_OW 190
13013: GO 12986
13015: POP
13016: POP
// end ;
13017: GO 12764
13019: POP
13020: POP
// end else
13021: GO 13285
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13023: LD_VAR 0 20
13027: PUSH
13028: LD_VAR 0 20
13032: PPUSH
13033: LD_INT 56
13035: PUSH
13036: EMPTY
13037: LIST
13038: PPUSH
13039: CALL_OW 72
13043: AND
13044: PUSH
13045: LD_VAR 0 33
13049: AND
13050: IFFALSE 13285
// for i := 1 to personel do
13052: LD_ADDR_VAR 0 13
13056: PUSH
13057: DOUBLE
13058: LD_INT 1
13060: DEC
13061: ST_TO_ADDR
13062: LD_VAR 0 18
13066: PUSH
13067: FOR_TO
13068: IFFALSE 13283
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13070: LD_VAR 0 18
13074: PUSH
13075: LD_VAR 0 13
13079: ARRAY
13080: PUSH
13081: LD_INT 1
13083: ARRAY
13084: PPUSH
13085: CALL_OW 257
13089: PUSH
13090: LD_INT 2
13092: EQUAL
13093: PUSH
13094: LD_VAR 0 18
13098: PUSH
13099: LD_VAR 0 13
13103: ARRAY
13104: PUSH
13105: LD_INT 3
13107: ARRAY
13108: PUSH
13109: LD_INT 1
13111: EQUAL
13112: AND
13113: IFFALSE 13281
// begin if not personel [ i ] [ 2 ] then
13115: LD_VAR 0 18
13119: PUSH
13120: LD_VAR 0 13
13124: ARRAY
13125: PUSH
13126: LD_INT 2
13128: ARRAY
13129: NOT
13130: IFFALSE 13247
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13132: LD_ADDR_VAR 0 18
13136: PUSH
13137: LD_VAR 0 18
13141: PPUSH
13142: LD_VAR 0 13
13146: PUSH
13147: LD_VAR 0 18
13151: PUSH
13152: LD_VAR 0 13
13156: ARRAY
13157: PUSH
13158: LD_INT 1
13160: MINUS
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PPUSH
13166: LD_VAR 0 4
13170: PPUSH
13171: LD_INT 22
13173: PUSH
13174: LD_VAR 0 1
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 21
13185: PUSH
13186: LD_INT 3
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 50
13195: PUSH
13196: EMPTY
13197: LIST
13198: PUSH
13199: LD_INT 2
13201: PUSH
13202: LD_INT 30
13204: PUSH
13205: LD_INT 0
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 30
13214: PUSH
13215: LD_INT 1
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: PPUSH
13233: CALL_OW 70
13237: PUSH
13238: LD_INT 1
13240: ARRAY
13241: PPUSH
13242: CALL 27886 0 3
13246: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13247: LD_VAR 0 18
13251: PUSH
13252: LD_VAR 0 13
13256: ARRAY
13257: PUSH
13258: LD_INT 1
13260: ARRAY
13261: PPUSH
13262: LD_VAR 0 18
13266: PUSH
13267: LD_VAR 0 13
13271: ARRAY
13272: PUSH
13273: LD_INT 2
13275: ARRAY
13276: PPUSH
13277: CALL_OW 120
// end ; end ;
13281: GO 13067
13283: POP
13284: POP
// for i := 1 to personel do
13285: LD_ADDR_VAR 0 13
13289: PUSH
13290: DOUBLE
13291: LD_INT 1
13293: DEC
13294: ST_TO_ADDR
13295: LD_VAR 0 18
13299: PUSH
13300: FOR_TO
13301: IFFALSE 13342
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13303: LD_ADDR_VAR 0 21
13307: PUSH
13308: LD_VAR 0 21
13312: PUSH
13313: LD_VAR 0 18
13317: PUSH
13318: LD_VAR 0 13
13322: ARRAY
13323: PPUSH
13324: LD_INT 25
13326: PUSH
13327: LD_INT 3
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PPUSH
13334: CALL_OW 72
13338: ADD
13339: ST_TO_ADDR
13340: GO 13300
13342: POP
13343: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13344: LD_VAR 0 21
13348: PUSH
13349: LD_VAR 0 4
13353: PPUSH
13354: LD_INT 22
13356: PUSH
13357: LD_VAR 0 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 21
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 3
13378: PUSH
13379: LD_INT 24
13381: PUSH
13382: LD_INT 1000
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: PPUSH
13398: CALL_OW 70
13402: AND
13403: IFFALSE 13837
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13405: LD_ADDR_VAR 0 39
13409: PUSH
13410: LD_VAR 0 4
13414: PPUSH
13415: LD_INT 22
13417: PUSH
13418: LD_VAR 0 1
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 21
13429: PUSH
13430: LD_INT 2
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: LD_INT 24
13442: PUSH
13443: LD_INT 1000
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 70
13463: PUSH
13464: FOR_IN
13465: IFFALSE 13833
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13467: LD_VAR 0 39
13471: PPUSH
13472: LD_VAR 0 6
13476: PPUSH
13477: CALL_OW 299
13481: PUSH
13482: LD_INT 5
13484: LESS
13485: IFFALSE 13831
// begin for i := 1 to vehicles do
13487: LD_ADDR_VAR 0 13
13491: PUSH
13492: DOUBLE
13493: LD_INT 1
13495: DEC
13496: ST_TO_ADDR
13497: LD_VAR 0 24
13501: PUSH
13502: FOR_TO
13503: IFFALSE 13572
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13505: LD_VAR 0 24
13509: PUSH
13510: LD_VAR 0 13
13514: ARRAY
13515: PUSH
13516: LD_INT 1
13518: ARRAY
13519: PUSH
13520: LD_VAR 0 39
13524: EQUAL
13525: IFFALSE 13546
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13527: LD_VAR 0 24
13531: PUSH
13532: LD_VAR 0 13
13536: ARRAY
13537: PUSH
13538: LD_INT 2
13540: ARRAY
13541: PPUSH
13542: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13546: LD_VAR 0 24
13550: PUSH
13551: LD_VAR 0 13
13555: ARRAY
13556: PUSH
13557: LD_INT 2
13559: ARRAY
13560: PPUSH
13561: LD_VAR 0 39
13565: PPUSH
13566: CALL_OW 189
// end ;
13570: GO 13502
13572: POP
13573: POP
// for i := 1 to personel do
13574: LD_ADDR_VAR 0 13
13578: PUSH
13579: DOUBLE
13580: LD_INT 1
13582: DEC
13583: ST_TO_ADDR
13584: LD_VAR 0 18
13588: PUSH
13589: FOR_TO
13590: IFFALSE 13829
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13592: LD_VAR 0 18
13596: PUSH
13597: LD_VAR 0 13
13601: ARRAY
13602: PUSH
13603: LD_INT 1
13605: ARRAY
13606: PPUSH
13607: CALL_OW 257
13611: PUSH
13612: LD_INT 3
13614: EQUAL
13615: PUSH
13616: LD_VAR 0 18
13620: PUSH
13621: LD_VAR 0 13
13625: ARRAY
13626: PUSH
13627: LD_INT 3
13629: ARRAY
13630: PUSH
13631: LD_INT 1
13633: EQUAL
13634: AND
13635: IFFALSE 13827
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13637: LD_VAR 0 18
13641: PUSH
13642: LD_VAR 0 13
13646: ARRAY
13647: PUSH
13648: LD_INT 1
13650: ARRAY
13651: PPUSH
13652: CALL_OW 437
13656: IFFALSE 13712
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13658: LD_VAR 0 18
13662: PUSH
13663: LD_VAR 0 13
13667: ARRAY
13668: PUSH
13669: LD_INT 1
13671: ARRAY
13672: PPUSH
13673: CALL_OW 437
13677: PUSH
13678: LD_INT 1
13680: ARRAY
13681: PUSH
13682: LD_INT 1
13684: ARRAY
13685: PUSH
13686: LD_STRING e
13688: EQUAL
13689: IFFALSE 13712
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13691: LD_VAR 0 18
13695: PUSH
13696: LD_VAR 0 13
13700: ARRAY
13701: PUSH
13702: LD_INT 1
13704: ARRAY
13705: PPUSH
13706: EMPTY
13707: PPUSH
13708: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13712: LD_VAR 0 18
13716: PUSH
13717: LD_VAR 0 13
13721: ARRAY
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: CALL_OW 310
13731: IFFALSE 13752
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13733: LD_VAR 0 18
13737: PUSH
13738: LD_VAR 0 13
13742: ARRAY
13743: PUSH
13744: LD_INT 1
13746: ARRAY
13747: PPUSH
13748: CALL_OW 122
// if not IsInArea ( personel [ i ] [ 1 ] , baseArea ) then
13752: LD_VAR 0 18
13756: PUSH
13757: LD_VAR 0 13
13761: ARRAY
13762: PUSH
13763: LD_INT 1
13765: ARRAY
13766: PPUSH
13767: LD_VAR 0 4
13771: PPUSH
13772: CALL_OW 308
13776: NOT
13777: IFFALSE 13803
// ComMoveToArea ( personel [ i ] [ 1 ] , baseArea ) ;
13779: LD_VAR 0 18
13783: PUSH
13784: LD_VAR 0 13
13788: ARRAY
13789: PUSH
13790: LD_INT 1
13792: ARRAY
13793: PPUSH
13794: LD_VAR 0 4
13798: PPUSH
13799: CALL_OW 113
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
13803: LD_VAR 0 18
13807: PUSH
13808: LD_VAR 0 13
13812: ARRAY
13813: PUSH
13814: LD_INT 1
13816: ARRAY
13817: PPUSH
13818: LD_VAR 0 39
13822: PPUSH
13823: CALL_OW 189
// end ;
13827: GO 13589
13829: POP
13830: POP
// end ; end ;
13831: GO 13464
13833: POP
13834: POP
// end else
13835: GO 14042
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
13837: LD_VAR 0 21
13841: PUSH
13842: LD_VAR 0 21
13846: PPUSH
13847: LD_INT 56
13849: PUSH
13850: EMPTY
13851: LIST
13852: PPUSH
13853: CALL_OW 72
13857: AND
13858: PUSH
13859: LD_VAR 0 34
13863: AND
13864: IFFALSE 14042
// for i := 1 to personel do
13866: LD_ADDR_VAR 0 13
13870: PUSH
13871: DOUBLE
13872: LD_INT 1
13874: DEC
13875: ST_TO_ADDR
13876: LD_VAR 0 18
13880: PUSH
13881: FOR_TO
13882: IFFALSE 14040
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13884: LD_VAR 0 18
13888: PUSH
13889: LD_VAR 0 13
13893: ARRAY
13894: PUSH
13895: LD_INT 1
13897: ARRAY
13898: PPUSH
13899: CALL_OW 257
13903: PUSH
13904: LD_INT 3
13906: EQUAL
13907: PUSH
13908: LD_VAR 0 18
13912: PUSH
13913: LD_VAR 0 13
13917: ARRAY
13918: PUSH
13919: LD_INT 3
13921: ARRAY
13922: PUSH
13923: LD_INT 1
13925: EQUAL
13926: AND
13927: IFFALSE 14038
// begin if not personel [ i ] [ 2 ] then
13929: LD_VAR 0 18
13933: PUSH
13934: LD_VAR 0 13
13938: ARRAY
13939: PUSH
13940: LD_INT 2
13942: ARRAY
13943: NOT
13944: IFFALSE 14004
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
13946: LD_ADDR_VAR 0 18
13950: PUSH
13951: LD_VAR 0 18
13955: PPUSH
13956: LD_VAR 0 13
13960: PUSH
13961: LD_VAR 0 18
13965: PUSH
13966: LD_VAR 0 13
13970: ARRAY
13971: PUSH
13972: LD_INT 1
13974: MINUS
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PPUSH
13980: LD_VAR 0 34
13984: PUSH
13985: LD_INT 1
13987: PPUSH
13988: LD_VAR 0 34
13992: PPUSH
13993: CALL_OW 12
13997: ARRAY
13998: PPUSH
13999: CALL 27886 0 3
14003: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14004: LD_VAR 0 18
14008: PUSH
14009: LD_VAR 0 13
14013: ARRAY
14014: PUSH
14015: LD_INT 1
14017: ARRAY
14018: PPUSH
14019: LD_VAR 0 18
14023: PUSH
14024: LD_VAR 0 13
14028: ARRAY
14029: PUSH
14030: LD_INT 2
14032: ARRAY
14033: PPUSH
14034: CALL_OW 120
// end ;
14038: GO 13881
14040: POP
14041: POP
// for i := 1 to personel do
14042: LD_ADDR_VAR 0 13
14046: PUSH
14047: DOUBLE
14048: LD_INT 1
14050: DEC
14051: ST_TO_ADDR
14052: LD_VAR 0 18
14056: PUSH
14057: FOR_TO
14058: IFFALSE 14099
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14060: LD_ADDR_VAR 0 22
14064: PUSH
14065: LD_VAR 0 22
14069: PUSH
14070: LD_VAR 0 18
14074: PUSH
14075: LD_VAR 0 13
14079: ARRAY
14080: PPUSH
14081: LD_INT 25
14083: PUSH
14084: LD_INT 4
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 72
14095: ADD
14096: ST_TO_ADDR
14097: GO 14057
14099: POP
14100: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14101: LD_VAR 0 22
14105: PUSH
14106: LD_VAR 0 4
14110: PPUSH
14111: LD_INT 22
14113: PUSH
14114: LD_VAR 0 1
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 21
14125: PUSH
14126: LD_INT 1
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 3
14135: PUSH
14136: LD_INT 24
14138: PUSH
14139: LD_INT 1000
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 70
14159: AND
14160: IFFALSE 14677
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14162: LD_ADDR_VAR 0 39
14166: PUSH
14167: LD_VAR 0 4
14171: PPUSH
14172: LD_INT 22
14174: PUSH
14175: LD_VAR 0 1
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 21
14186: PUSH
14187: LD_INT 1
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 3
14196: PUSH
14197: LD_INT 24
14199: PUSH
14200: LD_INT 1000
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: PPUSH
14216: CALL_OW 70
14220: PUSH
14221: FOR_IN
14222: IFFALSE 14673
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14224: LD_VAR 0 39
14228: PPUSH
14229: LD_VAR 0 5
14233: PPUSH
14234: CALL_OW 299
14238: PUSH
14239: LD_INT 5
14241: LESS
14242: IFFALSE 14450
// for i := 1 to personel do
14244: LD_ADDR_VAR 0 13
14248: PUSH
14249: DOUBLE
14250: LD_INT 1
14252: DEC
14253: ST_TO_ADDR
14254: LD_VAR 0 18
14258: PUSH
14259: FOR_TO
14260: IFFALSE 14448
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14262: LD_VAR 0 18
14266: PUSH
14267: LD_VAR 0 13
14271: ARRAY
14272: PUSH
14273: LD_INT 1
14275: ARRAY
14276: PPUSH
14277: CALL_OW 257
14281: PUSH
14282: LD_INT 4
14284: EQUAL
14285: PUSH
14286: LD_VAR 0 18
14290: PUSH
14291: LD_VAR 0 13
14295: ARRAY
14296: PUSH
14297: LD_INT 3
14299: ARRAY
14300: PUSH
14301: LD_INT 1
14303: EQUAL
14304: AND
14305: IFFALSE 14446
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14307: LD_VAR 0 18
14311: PUSH
14312: LD_VAR 0 13
14316: ARRAY
14317: PUSH
14318: LD_INT 1
14320: ARRAY
14321: PPUSH
14322: CALL_OW 437
14326: IFFALSE 14382
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14328: LD_VAR 0 18
14332: PUSH
14333: LD_VAR 0 13
14337: ARRAY
14338: PUSH
14339: LD_INT 1
14341: ARRAY
14342: PPUSH
14343: CALL_OW 437
14347: PUSH
14348: LD_INT 1
14350: ARRAY
14351: PUSH
14352: LD_INT 1
14354: ARRAY
14355: PUSH
14356: LD_STRING e
14358: EQUAL
14359: IFFALSE 14382
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14361: LD_VAR 0 18
14365: PUSH
14366: LD_VAR 0 13
14370: ARRAY
14371: PUSH
14372: LD_INT 1
14374: ARRAY
14375: PPUSH
14376: EMPTY
14377: PPUSH
14378: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14382: LD_VAR 0 18
14386: PUSH
14387: LD_VAR 0 13
14391: ARRAY
14392: PUSH
14393: LD_INT 1
14395: ARRAY
14396: PPUSH
14397: CALL_OW 310
14401: IFFALSE 14422
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14403: LD_VAR 0 18
14407: PUSH
14408: LD_VAR 0 13
14412: ARRAY
14413: PUSH
14414: LD_INT 1
14416: ARRAY
14417: PPUSH
14418: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14422: LD_VAR 0 18
14426: PUSH
14427: LD_VAR 0 13
14431: ARRAY
14432: PUSH
14433: LD_INT 1
14435: ARRAY
14436: PPUSH
14437: LD_VAR 0 39
14441: PPUSH
14442: CALL_OW 188
// end ;
14446: GO 14259
14448: POP
14449: POP
// if GetLives ( damageUnit ) < 250 then
14450: LD_VAR 0 39
14454: PPUSH
14455: CALL_OW 256
14459: PUSH
14460: LD_INT 250
14462: LESS
14463: IFFALSE 14671
// for i := 1 to personel do
14465: LD_ADDR_VAR 0 13
14469: PUSH
14470: DOUBLE
14471: LD_INT 1
14473: DEC
14474: ST_TO_ADDR
14475: LD_VAR 0 18
14479: PUSH
14480: FOR_TO
14481: IFFALSE 14669
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14483: LD_VAR 0 18
14487: PUSH
14488: LD_VAR 0 13
14492: ARRAY
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: CALL_OW 257
14502: PUSH
14503: LD_INT 4
14505: EQUAL
14506: PUSH
14507: LD_VAR 0 18
14511: PUSH
14512: LD_VAR 0 13
14516: ARRAY
14517: PUSH
14518: LD_INT 3
14520: ARRAY
14521: PUSH
14522: LD_INT 1
14524: EQUAL
14525: AND
14526: IFFALSE 14667
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14528: LD_VAR 0 18
14532: PUSH
14533: LD_VAR 0 13
14537: ARRAY
14538: PUSH
14539: LD_INT 1
14541: ARRAY
14542: PPUSH
14543: CALL_OW 437
14547: IFFALSE 14603
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14549: LD_VAR 0 18
14553: PUSH
14554: LD_VAR 0 13
14558: ARRAY
14559: PUSH
14560: LD_INT 1
14562: ARRAY
14563: PPUSH
14564: CALL_OW 437
14568: PUSH
14569: LD_INT 1
14571: ARRAY
14572: PUSH
14573: LD_INT 1
14575: ARRAY
14576: PUSH
14577: LD_STRING e
14579: EQUAL
14580: IFFALSE 14603
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14582: LD_VAR 0 18
14586: PUSH
14587: LD_VAR 0 13
14591: ARRAY
14592: PUSH
14593: LD_INT 1
14595: ARRAY
14596: PPUSH
14597: EMPTY
14598: PPUSH
14599: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14603: LD_VAR 0 18
14607: PUSH
14608: LD_VAR 0 13
14612: ARRAY
14613: PUSH
14614: LD_INT 1
14616: ARRAY
14617: PPUSH
14618: CALL_OW 310
14622: IFFALSE 14643
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14624: LD_VAR 0 18
14628: PUSH
14629: LD_VAR 0 13
14633: ARRAY
14634: PUSH
14635: LD_INT 1
14637: ARRAY
14638: PPUSH
14639: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14643: LD_VAR 0 18
14647: PUSH
14648: LD_VAR 0 13
14652: ARRAY
14653: PUSH
14654: LD_INT 1
14656: ARRAY
14657: PPUSH
14658: LD_VAR 0 39
14662: PPUSH
14663: CALL_OW 188
// end ;
14667: GO 14480
14669: POP
14670: POP
// end ;
14671: GO 14221
14673: POP
14674: POP
// end else
14675: GO 14882
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14677: LD_VAR 0 22
14681: PUSH
14682: LD_VAR 0 22
14686: PPUSH
14687: LD_INT 56
14689: PUSH
14690: EMPTY
14691: LIST
14692: PPUSH
14693: CALL_OW 72
14697: AND
14698: PUSH
14699: LD_VAR 0 35
14703: AND
14704: IFFALSE 14882
// for i := 1 to personel do
14706: LD_ADDR_VAR 0 13
14710: PUSH
14711: DOUBLE
14712: LD_INT 1
14714: DEC
14715: ST_TO_ADDR
14716: LD_VAR 0 18
14720: PUSH
14721: FOR_TO
14722: IFFALSE 14880
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14724: LD_VAR 0 18
14728: PUSH
14729: LD_VAR 0 13
14733: ARRAY
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: PPUSH
14739: CALL_OW 257
14743: PUSH
14744: LD_INT 4
14746: EQUAL
14747: PUSH
14748: LD_VAR 0 18
14752: PUSH
14753: LD_VAR 0 13
14757: ARRAY
14758: PUSH
14759: LD_INT 3
14761: ARRAY
14762: PUSH
14763: LD_INT 1
14765: EQUAL
14766: AND
14767: IFFALSE 14878
// begin if not personel [ i ] [ 2 ] then
14769: LD_VAR 0 18
14773: PUSH
14774: LD_VAR 0 13
14778: ARRAY
14779: PUSH
14780: LD_INT 2
14782: ARRAY
14783: NOT
14784: IFFALSE 14844
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
14786: LD_ADDR_VAR 0 18
14790: PUSH
14791: LD_VAR 0 18
14795: PPUSH
14796: LD_VAR 0 13
14800: PUSH
14801: LD_VAR 0 18
14805: PUSH
14806: LD_VAR 0 13
14810: ARRAY
14811: PUSH
14812: LD_INT 1
14814: MINUS
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PPUSH
14820: LD_VAR 0 35
14824: PUSH
14825: LD_INT 1
14827: PPUSH
14828: LD_VAR 0 35
14832: PPUSH
14833: CALL_OW 12
14837: ARRAY
14838: PPUSH
14839: CALL 27886 0 3
14843: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14844: LD_VAR 0 18
14848: PUSH
14849: LD_VAR 0 13
14853: ARRAY
14854: PUSH
14855: LD_INT 1
14857: ARRAY
14858: PPUSH
14859: LD_VAR 0 18
14863: PUSH
14864: LD_VAR 0 13
14868: ARRAY
14869: PUSH
14870: LD_INT 2
14872: ARRAY
14873: PPUSH
14874: CALL_OW 120
// end ;
14878: GO 14721
14880: POP
14881: POP
// wait ( 0 0$01 ) ;
14882: LD_INT 35
14884: PPUSH
14885: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
14889: LD_VAR 0 24
14893: PUSH
14894: LD_VAR 0 8
14898: LESS
14899: PUSH
14900: LD_VAR 0 34
14904: AND
14905: IFFALSE 15151
// begin tmp = vehiclesAmount - vehicles ;
14907: LD_ADDR_VAR 0 15
14911: PUSH
14912: LD_VAR 0 8
14916: PUSH
14917: LD_VAR 0 24
14921: MINUS
14922: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
14923: LD_ADDR_VAR 0 31
14927: PUSH
14928: LD_VAR 0 1
14932: PPUSH
14933: LD_VAR 0 2
14937: PPUSH
14938: CALL 9090 0 2
14942: ST_TO_ADDR
// for i := 1 to tmp do
14943: LD_ADDR_VAR 0 13
14947: PUSH
14948: DOUBLE
14949: LD_INT 1
14951: DEC
14952: ST_TO_ADDR
14953: LD_VAR 0 15
14957: PUSH
14958: FOR_TO
14959: IFFALSE 15147
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
14961: LD_ADDR_VAR 0 15
14965: PUSH
14966: LD_VAR 0 31
14970: PUSH
14971: LD_INT 1
14973: PPUSH
14974: LD_VAR 0 31
14978: PPUSH
14979: CALL_OW 12
14983: ARRAY
14984: ST_TO_ADDR
// if tmp then
14985: LD_VAR 0 15
14989: IFFALSE 15145
// begin if tmp in [ 34 , 14 , 71 ] then
14991: LD_VAR 0 15
14995: PUSH
14996: LD_INT 34
14998: PUSH
14999: LD_INT 14
15001: PUSH
15002: LD_INT 71
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: IN
15010: IFFALSE 15048
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15012: LD_ADDR_VAR 0 32
15016: PUSH
15017: LD_INT 4
15019: PUSH
15020: EMPTY
15021: LIST
15022: PUSH
15023: LD_INT 14
15025: PUSH
15026: EMPTY
15027: LIST
15028: PUSH
15029: LD_INT 24
15031: PUSH
15032: EMPTY
15033: LIST
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: PUSH
15040: LD_VAR 0 2
15044: ARRAY
15045: ST_TO_ADDR
15046: GO 15102
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15048: LD_ADDR_VAR 0 32
15052: PUSH
15053: LD_INT 2
15055: PUSH
15056: LD_INT 3
15058: PUSH
15059: LD_INT 4
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 14
15069: PUSH
15070: EMPTY
15071: LIST
15072: PUSH
15073: LD_INT 21
15075: PUSH
15076: LD_INT 23
15078: PUSH
15079: LD_INT 24
15081: PUSH
15082: LD_INT 22
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: PUSH
15096: LD_VAR 0 2
15100: ARRAY
15101: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15102: LD_VAR 0 34
15106: PUSH
15107: LD_INT 1
15109: ARRAY
15110: PPUSH
15111: LD_VAR 0 32
15115: PUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_VAR 0 32
15123: PPUSH
15124: CALL_OW 12
15128: ARRAY
15129: PPUSH
15130: LD_INT 1
15132: PPUSH
15133: LD_INT 1
15135: PPUSH
15136: LD_VAR 0 15
15140: PPUSH
15141: CALL_OW 185
// end ; end ;
15145: GO 14958
15147: POP
15148: POP
// end else
15149: GO 15164
// ComCancel ( factory [ 1 ] ) ;
15151: LD_VAR 0 34
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: PPUSH
15160: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15164: LD_ADDR_VAR 0 23
15168: PUSH
15169: LD_VAR 0 4
15173: PPUSH
15174: LD_INT 22
15176: PUSH
15177: LD_VAR 0 1
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 21
15188: PUSH
15189: LD_INT 2
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 50
15198: PUSH
15199: EMPTY
15200: LIST
15201: PUSH
15202: LD_INT 3
15204: PUSH
15205: LD_INT 2
15207: PUSH
15208: LD_INT 31
15210: PUSH
15211: LD_INT 31
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 34
15220: PUSH
15221: LD_INT 12
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 34
15230: PUSH
15231: LD_INT 51
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 34
15240: PUSH
15241: LD_INT 32
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: PPUSH
15265: CALL_OW 70
15269: PUSH
15270: LD_EXP 50
15274: DIFF
15275: PUSH
15276: FOR_IN
15277: IFFALSE 15440
// begin vehicleInList = false ;
15279: LD_ADDR_VAR 0 25
15283: PUSH
15284: LD_INT 0
15286: ST_TO_ADDR
// for i := 1 to vehicles do
15287: LD_ADDR_VAR 0 13
15291: PUSH
15292: DOUBLE
15293: LD_INT 1
15295: DEC
15296: ST_TO_ADDR
15297: LD_VAR 0 24
15301: PUSH
15302: FOR_TO
15303: IFFALSE 15333
// begin if vehicle in vehicles [ i ] then
15305: LD_VAR 0 23
15309: PUSH
15310: LD_VAR 0 24
15314: PUSH
15315: LD_VAR 0 13
15319: ARRAY
15320: IN
15321: IFFALSE 15331
// vehicleInList = true ;
15323: LD_ADDR_VAR 0 25
15327: PUSH
15328: LD_INT 1
15330: ST_TO_ADDR
// end ;
15331: GO 15302
15333: POP
15334: POP
// if not vehicleInList then
15335: LD_VAR 0 25
15339: NOT
15340: IFFALSE 15438
// if vehicles < vehiclesToAttackAmount then
15342: LD_VAR 0 24
15346: PUSH
15347: LD_VAR 0 10
15351: LESS
15352: IFFALSE 15397
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15354: LD_ADDR_VAR 0 24
15358: PUSH
15359: LD_VAR 0 24
15363: PUSH
15364: LD_VAR 0 23
15368: PUSH
15369: LD_VAR 0 23
15373: PPUSH
15374: CALL_OW 313
15378: PUSH
15379: LD_INT 1
15381: ARRAY
15382: PUSH
15383: LD_INT 3
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: ADD
15394: ST_TO_ADDR
15395: GO 15438
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15397: LD_ADDR_VAR 0 24
15401: PUSH
15402: LD_VAR 0 24
15406: PUSH
15407: LD_VAR 0 23
15411: PUSH
15412: LD_VAR 0 23
15416: PPUSH
15417: CALL_OW 313
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PUSH
15426: LD_INT 2
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: LIST
15433: PUSH
15434: EMPTY
15435: LIST
15436: ADD
15437: ST_TO_ADDR
// end ;
15438: GO 15276
15440: POP
15441: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15442: LD_ADDR_VAR 0 41
15446: PUSH
15447: LD_INT 81
15449: PUSH
15450: LD_VAR 0 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PPUSH
15459: CALL_OW 69
15463: PUSH
15464: FOR_IN
15465: IFFALSE 15947
// begin offensiveUnits = [ ] ;
15467: LD_ADDR_VAR 0 27
15471: PUSH
15472: EMPTY
15473: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
15474: LD_ADDR_VAR 0 28
15478: PUSH
15479: LD_INT 0
15481: ST_TO_ADDR
// for i := 1 to vehicles do
15482: LD_ADDR_VAR 0 13
15486: PUSH
15487: DOUBLE
15488: LD_INT 1
15490: DEC
15491: ST_TO_ADDR
15492: LD_VAR 0 24
15496: PUSH
15497: FOR_TO
15498: IFFALSE 15679
// if vehicles [ i ] [ 3 ] = 3 then
15500: LD_VAR 0 24
15504: PUSH
15505: LD_VAR 0 13
15509: ARRAY
15510: PUSH
15511: LD_INT 3
15513: ARRAY
15514: PUSH
15515: LD_INT 3
15517: EQUAL
15518: IFFALSE 15677
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
15520: LD_VAR 0 24
15524: PUSH
15525: LD_VAR 0 13
15529: ARRAY
15530: PUSH
15531: LD_INT 1
15533: ARRAY
15534: PPUSH
15535: CALL_OW 256
15539: PUSH
15540: LD_INT 650
15542: GREATER
15543: IFFALSE 15559
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
15545: LD_ADDR_VAR 0 28
15549: PUSH
15550: LD_VAR 0 28
15554: PUSH
15555: LD_INT 1
15557: PLUS
15558: ST_TO_ADDR
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15559: LD_ADDR_VAR 0 27
15563: PUSH
15564: LD_VAR 0 27
15568: PUSH
15569: LD_VAR 0 24
15573: PUSH
15574: LD_VAR 0 13
15578: ARRAY
15579: PUSH
15580: LD_INT 1
15582: ARRAY
15583: ADD
15584: ST_TO_ADDR
// for j = 1 to personel do
15585: LD_ADDR_VAR 0 14
15589: PUSH
15590: DOUBLE
15591: LD_INT 1
15593: DEC
15594: ST_TO_ADDR
15595: LD_VAR 0 18
15599: PUSH
15600: FOR_TO
15601: IFFALSE 15675
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15603: LD_VAR 0 18
15607: PUSH
15608: LD_VAR 0 14
15612: ARRAY
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PUSH
15618: LD_VAR 0 24
15622: PUSH
15623: LD_VAR 0 13
15627: ARRAY
15628: PUSH
15629: LD_INT 2
15631: ARRAY
15632: EQUAL
15633: IFFALSE 15673
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
15635: LD_ADDR_VAR 0 18
15639: PUSH
15640: LD_VAR 0 18
15644: PPUSH
15645: LD_VAR 0 14
15649: PUSH
15650: LD_VAR 0 18
15654: PUSH
15655: LD_VAR 0 14
15659: ARRAY
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: LD_INT 3
15667: PPUSH
15668: CALL 27886 0 3
15672: ST_TO_ADDR
15673: GO 15600
15675: POP
15676: POP
// end ;
15677: GO 15497
15679: POP
15680: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
15681: LD_VAR 0 10
15685: PUSH
15686: LD_VAR 0 28
15690: LESSEQUAL
15691: IFFALSE 15945
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , offensiveUnits [ 1 ] ) ;
15693: LD_ADDR_VAR 0 29
15697: PUSH
15698: LD_INT 81
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PPUSH
15708: CALL_OW 69
15712: PPUSH
15713: LD_VAR 0 27
15717: PUSH
15718: LD_INT 1
15720: ARRAY
15721: PPUSH
15722: CALL_OW 74
15726: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 2 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ 1 ] ) ;
15727: LD_ADDR_VAR 0 30
15731: PUSH
15732: LD_INT 81
15734: PUSH
15735: LD_INT 2
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 2
15744: PUSH
15745: LD_INT 59
15747: PUSH
15748: EMPTY
15749: LIST
15750: PUSH
15751: LD_INT 21
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 21
15763: PUSH
15764: LD_INT 2
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: EMPTY
15782: LIST
15783: PPUSH
15784: CALL_OW 69
15788: PPUSH
15789: LD_VAR 0 27
15793: PUSH
15794: LD_INT 1
15796: ARRAY
15797: PPUSH
15798: CALL_OW 74
15802: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ 1 ] , target1 ) + 8 < GetDistUnits ( offensiveUnits [ 1 ] , target2 ) then
15803: LD_VAR 0 27
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: LD_VAR 0 29
15816: PPUSH
15817: CALL_OW 296
15821: PUSH
15822: LD_INT 8
15824: PLUS
15825: PUSH
15826: LD_VAR 0 27
15830: PUSH
15831: LD_INT 1
15833: ARRAY
15834: PPUSH
15835: LD_VAR 0 30
15839: PPUSH
15840: CALL_OW 296
15844: LESS
15845: IFFALSE 15881
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target1 ) else
15847: LD_VAR 0 27
15851: PPUSH
15852: LD_INT 3
15854: PUSH
15855: LD_INT 60
15857: PUSH
15858: EMPTY
15859: LIST
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PPUSH
15865: CALL_OW 72
15869: PPUSH
15870: LD_VAR 0 29
15874: PPUSH
15875: CALL_OW 115
15879: GO 15913
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target2 ) ;
15881: LD_VAR 0 27
15885: PPUSH
15886: LD_INT 3
15888: PUSH
15889: LD_INT 60
15891: PUSH
15892: EMPTY
15893: LIST
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PPUSH
15899: CALL_OW 72
15903: PPUSH
15904: LD_VAR 0 30
15908: PPUSH
15909: CALL_OW 115
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
15913: LD_VAR 0 27
15917: PPUSH
15918: LD_INT 3
15920: PUSH
15921: LD_INT 60
15923: PUSH
15924: EMPTY
15925: LIST
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PPUSH
15931: CALL_OW 72
15935: PPUSH
15936: LD_VAR 0 41
15940: PPUSH
15941: CALL_OW 175
// end ; end ;
15945: GO 15464
15947: POP
15948: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
15949: LD_ADDR_VAR 0 41
15953: PUSH
15954: LD_VAR 0 7
15958: PPUSH
15959: LD_INT 81
15961: PUSH
15962: LD_VAR 0 1
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 70
15975: PUSH
15976: FOR_IN
15977: IFFALSE 16156
// begin defenceUnits = [ ] ;
15979: LD_ADDR_VAR 0 26
15983: PUSH
15984: EMPTY
15985: ST_TO_ADDR
// for i := 1 to personel do
15986: LD_ADDR_VAR 0 13
15990: PUSH
15991: DOUBLE
15992: LD_INT 1
15994: DEC
15995: ST_TO_ADDR
15996: LD_VAR 0 18
16000: PUSH
16001: FOR_TO
16002: IFFALSE 16052
// if personel [ i ] [ 3 ] = 2 then
16004: LD_VAR 0 18
16008: PUSH
16009: LD_VAR 0 13
16013: ARRAY
16014: PUSH
16015: LD_INT 3
16017: ARRAY
16018: PUSH
16019: LD_INT 2
16021: EQUAL
16022: IFFALSE 16050
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16024: LD_ADDR_VAR 0 26
16028: PUSH
16029: LD_VAR 0 26
16033: PUSH
16034: LD_VAR 0 18
16038: PUSH
16039: LD_VAR 0 13
16043: ARRAY
16044: PUSH
16045: LD_INT 1
16047: ARRAY
16048: ADD
16049: ST_TO_ADDR
16050: GO 16001
16052: POP
16053: POP
// for i := 1 to vehicles do
16054: LD_ADDR_VAR 0 13
16058: PUSH
16059: DOUBLE
16060: LD_INT 1
16062: DEC
16063: ST_TO_ADDR
16064: LD_VAR 0 24
16068: PUSH
16069: FOR_TO
16070: IFFALSE 16120
// if vehicles [ i ] [ 3 ] = 2 then
16072: LD_VAR 0 24
16076: PUSH
16077: LD_VAR 0 13
16081: ARRAY
16082: PUSH
16083: LD_INT 3
16085: ARRAY
16086: PUSH
16087: LD_INT 2
16089: EQUAL
16090: IFFALSE 16118
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16092: LD_ADDR_VAR 0 26
16096: PUSH
16097: LD_VAR 0 26
16101: PUSH
16102: LD_VAR 0 24
16106: PUSH
16107: LD_VAR 0 13
16111: ARRAY
16112: PUSH
16113: LD_INT 1
16115: ARRAY
16116: ADD
16117: ST_TO_ADDR
16118: GO 16069
16120: POP
16121: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16122: LD_VAR 0 26
16126: PPUSH
16127: LD_INT 3
16129: PUSH
16130: LD_INT 60
16132: PUSH
16133: EMPTY
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PPUSH
16140: CALL_OW 72
16144: PPUSH
16145: LD_VAR 0 41
16149: PPUSH
16150: CALL_OW 175
// end ;
16154: GO 15976
16156: POP
16157: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16158: LD_ADDR_VAR 0 42
16162: PUSH
16163: LD_INT 22
16165: PUSH
16166: LD_VAR 0 1
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 2
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 31
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 30
16190: PUSH
16191: LD_INT 32
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 30
16200: PUSH
16201: LD_INT 33
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 30
16210: PUSH
16211: LD_INT 4
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 30
16220: PUSH
16221: LD_INT 5
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PPUSH
16240: CALL_OW 69
16244: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16245: LD_ADDR_VAR 0 43
16249: PUSH
16250: LD_INT 81
16252: PUSH
16253: LD_VAR 0 1
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 21
16264: PUSH
16265: LD_INT 3
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 58
16274: PUSH
16275: EMPTY
16276: LIST
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: LIST
16282: PPUSH
16283: CALL_OW 69
16287: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16288: LD_VAR 0 42
16292: PUSH
16293: LD_VAR 0 43
16297: AND
16298: IFFALSE 16368
// for i in attackBuildings do
16300: LD_ADDR_VAR 0 13
16304: PUSH
16305: LD_VAR 0 42
16309: PUSH
16310: FOR_IN
16311: IFFALSE 16366
// for j in enemyBuildings do
16313: LD_ADDR_VAR 0 14
16317: PUSH
16318: LD_VAR 0 43
16322: PUSH
16323: FOR_IN
16324: IFFALSE 16362
// if GetDistUnits ( i , j ) < 12 then
16326: LD_VAR 0 13
16330: PPUSH
16331: LD_VAR 0 14
16335: PPUSH
16336: CALL_OW 296
16340: PUSH
16341: LD_INT 12
16343: LESS
16344: IFFALSE 16360
// ComAttackUnit ( i , j ) ;
16346: LD_VAR 0 13
16350: PPUSH
16351: LD_VAR 0 14
16355: PPUSH
16356: CALL_OW 115
16360: GO 16323
16362: POP
16363: POP
16364: GO 16310
16366: POP
16367: POP
// until not personel or arabianCanExitMap ;
16368: LD_VAR 0 18
16372: NOT
16373: PUSH
16374: LD_EXP 21
16378: OR
16379: IFFALSE 10987
// end ;
16381: LD_VAR 0 12
16385: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16386: LD_EXP 50
16390: NOT
16391: IFFALSE 16425
16393: GO 16395
16395: DISABLE
// begin enable ;
16396: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16397: LD_EXP 34
16401: PPUSH
16402: LD_INT 42
16404: PPUSH
16405: CALL 2652 0 2
// arabLeftExit = true ;
16409: LD_ADDR_EXP 53
16413: PUSH
16414: LD_INT 1
16416: ST_TO_ADDR
// arabRightExit = false ;
16417: LD_ADDR_EXP 54
16421: PUSH
16422: LD_INT 0
16424: ST_TO_ADDR
// end ;
16425: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base ;
16426: LD_EXP 50
16430: PUSH
16431: LD_EXP 53
16435: AND
16436: IFFALSE 16631
16438: GO 16440
16440: DISABLE
16441: LD_INT 0
16443: PPUSH
16444: PPUSH
16445: PPUSH
// begin enable ;
16446: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16447: LD_EXP 50
16451: PPUSH
16452: LD_INT 71
16454: PPUSH
16455: LD_INT 137
16457: PPUSH
16458: CALL_OW 114
// for veh in arabianPatrolVehicles do
16462: LD_ADDR_VAR 0 1
16466: PUSH
16467: LD_EXP 50
16471: PUSH
16472: FOR_IN
16473: IFFALSE 16629
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16475: LD_VAR 0 1
16479: PPUSH
16480: LD_INT 43
16482: PPUSH
16483: CALL_OW 308
16487: IFFALSE 16627
// begin if arabianPatrolVehicles then
16489: LD_EXP 50
16493: IFFALSE 16522
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 313
16504: PUSH
16505: LD_INT 1
16507: ARRAY
16508: PPUSH
16509: CALL_OW 64
// RemoveUnit ( veh ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: CALL_OW 64
// end ; x = 0 ;
16522: LD_ADDR_VAR 0 2
16526: PUSH
16527: LD_INT 0
16529: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16530: LD_ADDR_VAR 0 1
16534: PUSH
16535: LD_EXP 50
16539: PUSH
16540: FOR_IN
16541: IFFALSE 16571
// if not IsPlaced ( veh ) then
16543: LD_VAR 0 1
16547: PPUSH
16548: CALL_OW 305
16552: NOT
16553: IFFALSE 16569
// x = x + 1 ;
16555: LD_ADDR_VAR 0 2
16559: PUSH
16560: LD_VAR 0 2
16564: PUSH
16565: LD_INT 1
16567: PLUS
16568: ST_TO_ADDR
16569: GO 16540
16571: POP
16572: POP
// if x = arabianPatrolVehicles then
16573: LD_VAR 0 2
16577: PUSH
16578: LD_EXP 50
16582: EQUAL
16583: IFFALSE 16627
// begin arabLeftExit = false ;
16585: LD_ADDR_EXP 53
16589: PUSH
16590: LD_INT 0
16592: ST_TO_ADDR
// arabRightExit = true ;
16593: LD_ADDR_EXP 54
16597: PUSH
16598: LD_INT 1
16600: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16601: LD_INT 4200
16603: PPUSH
16604: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16608: LD_ADDR_EXP 50
16612: PUSH
16613: EMPTY
16614: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16615: LD_EXP 34
16619: PPUSH
16620: LD_INT 43
16622: PPUSH
16623: CALL 2652 0 2
// end ; end ; end ;
16627: GO 16472
16629: POP
16630: POP
// end ;
16631: PPOPN 3
16633: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16634: LD_EXP 50
16638: PUSH
16639: LD_EXP 54
16643: AND
16644: IFFALSE 16839
16646: GO 16648
16648: DISABLE
16649: LD_INT 0
16651: PPUSH
16652: PPUSH
16653: PPUSH
// begin enable ;
16654: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16655: LD_EXP 50
16659: PPUSH
16660: LD_INT 184
16662: PPUSH
16663: LD_INT 134
16665: PPUSH
16666: CALL_OW 114
// for veh in arabianPatrolVehicles do
16670: LD_ADDR_VAR 0 1
16674: PUSH
16675: LD_EXP 50
16679: PUSH
16680: FOR_IN
16681: IFFALSE 16837
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16683: LD_VAR 0 1
16687: PPUSH
16688: LD_INT 42
16690: PPUSH
16691: CALL_OW 308
16695: IFFALSE 16835
// begin if arabianPatrolVehicles then
16697: LD_EXP 50
16701: IFFALSE 16730
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16703: LD_VAR 0 1
16707: PPUSH
16708: CALL_OW 313
16712: PUSH
16713: LD_INT 1
16715: ARRAY
16716: PPUSH
16717: CALL_OW 64
// RemoveUnit ( veh ) ;
16721: LD_VAR 0 1
16725: PPUSH
16726: CALL_OW 64
// end ; x = 0 ;
16730: LD_ADDR_VAR 0 2
16734: PUSH
16735: LD_INT 0
16737: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16738: LD_ADDR_VAR 0 1
16742: PUSH
16743: LD_EXP 50
16747: PUSH
16748: FOR_IN
16749: IFFALSE 16779
// if not IsPlaced ( veh ) then
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 305
16760: NOT
16761: IFFALSE 16777
// x = x + 1 ;
16763: LD_ADDR_VAR 0 2
16767: PUSH
16768: LD_VAR 0 2
16772: PUSH
16773: LD_INT 1
16775: PLUS
16776: ST_TO_ADDR
16777: GO 16748
16779: POP
16780: POP
// if x = arabianPatrolVehicles then
16781: LD_VAR 0 2
16785: PUSH
16786: LD_EXP 50
16790: EQUAL
16791: IFFALSE 16835
// begin arabLeftExit = true ;
16793: LD_ADDR_EXP 53
16797: PUSH
16798: LD_INT 1
16800: ST_TO_ADDR
// arabRightExit = false ;
16801: LD_ADDR_EXP 54
16805: PUSH
16806: LD_INT 0
16808: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16809: LD_INT 4200
16811: PPUSH
16812: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16816: LD_ADDR_EXP 50
16820: PUSH
16821: EMPTY
16822: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16823: LD_EXP 34
16827: PPUSH
16828: LD_INT 42
16830: PPUSH
16831: CALL 2652 0 2
// end ; end ; end ;
16835: GO 16680
16837: POP
16838: POP
// end ;
16839: PPOPN 3
16841: END
// every 6 6$0 trigger not arabianHovercrafts and not arabianCanExitMap do
16842: LD_EXP 51
16846: NOT
16847: PUSH
16848: LD_EXP 21
16852: NOT
16853: AND
16854: IFFALSE 16864
16856: GO 16858
16858: DISABLE
// begin enable ;
16859: ENABLE
// PrepareArabianHovercraft ;
16860: CALL 2811 0 0
// end ;
16864: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
16865: LD_EXP 51
16869: IFFALSE 17025
16871: GO 16873
16873: DISABLE
16874: LD_INT 0
16876: PPUSH
16877: PPUSH
// begin enable ;
16878: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
16879: LD_EXP 51
16883: PPUSH
16884: LD_INT 100
16886: PPUSH
16887: CALL_OW 240
// for i := 1 to arabianHovercraftsPath do
16891: LD_ADDR_VAR 0 1
16895: PUSH
16896: DOUBLE
16897: LD_INT 1
16899: DEC
16900: ST_TO_ADDR
16901: LD_EXP 36
16905: PUSH
16906: FOR_TO
16907: IFFALSE 16950
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
16909: LD_EXP 51
16913: PPUSH
16914: LD_EXP 36
16918: PUSH
16919: LD_VAR 0 1
16923: ARRAY
16924: PUSH
16925: LD_INT 1
16927: ARRAY
16928: PPUSH
16929: LD_EXP 36
16933: PUSH
16934: LD_VAR 0 1
16938: ARRAY
16939: PUSH
16940: LD_INT 2
16942: ARRAY
16943: PPUSH
16944: CALL_OW 174
16948: GO 16906
16950: POP
16951: POP
// x = arabianHovercraftsPath ;
16952: LD_ADDR_VAR 0 2
16956: PUSH
16957: LD_EXP 36
16961: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
16962: LD_EXP 51
16966: PPUSH
16967: LD_EXP 36
16971: PUSH
16972: LD_VAR 0 2
16976: ARRAY
16977: PUSH
16978: LD_INT 1
16980: ARRAY
16981: PPUSH
16982: LD_EXP 36
16986: PUSH
16987: LD_VAR 0 2
16991: ARRAY
16992: PUSH
16993: LD_INT 2
16995: ARRAY
16996: PPUSH
16997: CALL_OW 174
// x = x - 1 ;
17001: LD_ADDR_VAR 0 2
17005: PUSH
17006: LD_VAR 0 2
17010: PUSH
17011: LD_INT 1
17013: MINUS
17014: ST_TO_ADDR
// until x = 0 ;
17015: LD_VAR 0 2
17019: PUSH
17020: LD_INT 0
17022: EQUAL
17023: IFFALSE 16962
// end ;
17025: PPOPN 2
17027: END
// every 0 0$1 trigger arabianPatrolTroops do
17028: LD_EXP 52
17032: IFFALSE 17098
17034: GO 17036
17036: DISABLE
// begin enable ;
17037: ENABLE
// AddComAgressiveMove ( arabianPatrolTroops , 127 , 100 ) ;
17038: LD_EXP 52
17042: PPUSH
17043: LD_INT 127
17045: PPUSH
17046: LD_INT 100
17048: PPUSH
17049: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 141 , 133 ) ;
17053: LD_EXP 52
17057: PPUSH
17058: LD_INT 141
17060: PPUSH
17061: LD_INT 133
17063: PPUSH
17064: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 80 , 132 ) ;
17068: LD_EXP 52
17072: PPUSH
17073: LD_INT 80
17075: PPUSH
17076: LD_INT 132
17078: PPUSH
17079: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 174 , 122 ) ;
17083: LD_EXP 52
17087: PPUSH
17088: LD_INT 174
17090: PPUSH
17091: LD_INT 122
17093: PPUSH
17094: CALL_OW 174
// end ; end_of_file
17098: END
// export function Lose_Burlak ; begin
17099: LD_INT 0
17101: PPUSH
// YouLost ( Burlak ) ;
17102: LD_STRING Burlak
17104: PPUSH
17105: CALL_OW 104
// end ;
17109: LD_VAR 0 1
17113: RET
// export function Lose_Survive ; begin
17114: LD_INT 0
17116: PPUSH
// YouLost ( Survive ) ;
17117: LD_STRING Survive
17119: PPUSH
17120: CALL_OW 104
// end ;
17124: LD_VAR 0 1
17128: RET
// export function Lose_Surrender ; begin
17129: LD_INT 0
17131: PPUSH
// YouLost ( Surrender ) ;
17132: LD_STRING Surrender
17134: PPUSH
17135: CALL_OW 104
// end ; end_of_file
17139: LD_VAR 0 1
17143: RET
// every 0 0$5 do
17144: GO 17146
17146: DISABLE
// begin enable ;
17147: ENABLE
// if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
17148: LD_EXP 24
17152: NOT
17153: PUSH
17154: LD_INT 22
17156: PPUSH
17157: LD_INT 22
17159: PUSH
17160: LD_INT 3
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 21
17169: PUSH
17170: LD_INT 2
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 50
17179: PUSH
17180: EMPTY
17181: LIST
17182: PUSH
17183: LD_INT 59
17185: PUSH
17186: EMPTY
17187: LIST
17188: PUSH
17189: LD_INT 2
17191: PUSH
17192: LD_INT 31
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 31
17204: PUSH
17205: LD_INT 24
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 31
17214: PUSH
17215: LD_INT 14
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: PPUSH
17235: CALL_OW 70
17239: AND
17240: PUSH
17241: LD_INT 22
17243: PPUSH
17244: LD_INT 22
17246: PUSH
17247: LD_INT 3
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 21
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 23
17266: PUSH
17267: LD_INT 3
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 50
17276: PUSH
17277: EMPTY
17278: LIST
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: PPUSH
17286: CALL_OW 70
17290: AND
17291: IFFALSE 17300
// Query ( QVehicles ) ;
17293: LD_STRING QVehicles
17295: PPUSH
17296: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17300: LD_EXP 37
17304: PPUSH
17305: CALL_OW 310
17309: PPUSH
17310: LD_INT 22
17312: PPUSH
17313: CALL_OW 308
17317: PUSH
17318: LD_EXP 24
17322: NOT
17323: AND
17324: PUSH
17325: LD_INT 22
17327: PPUSH
17328: LD_INT 22
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 21
17340: PUSH
17341: LD_INT 2
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 59
17350: PUSH
17351: EMPTY
17352: LIST
17353: PUSH
17354: LD_INT 50
17356: PUSH
17357: EMPTY
17358: LIST
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: LD_INT 31
17365: PUSH
17366: LD_INT 22
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 31
17375: PUSH
17376: LD_INT 24
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 31
17385: PUSH
17386: LD_INT 14
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: PPUSH
17406: CALL_OW 70
17410: PUSH
17411: LD_INT 22
17413: PUSH
17414: LD_INT 3
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 21
17423: PUSH
17424: LD_INT 1
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 23
17433: PUSH
17434: LD_INT 3
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 2
17443: PUSH
17444: LD_INT 25
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 25
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 25
17466: PUSH
17467: LD_INT 3
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 25
17476: PUSH
17477: LD_INT 4
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: PPUSH
17497: CALL_OW 69
17501: GREATEREQUAL
17502: AND
17503: IFFALSE 17509
// FinishMission ;
17505: CALL 17830 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17509: LD_EXP 37
17513: PPUSH
17514: CALL_OW 310
17518: PPUSH
17519: LD_INT 22
17521: PPUSH
17522: CALL_OW 308
17526: PUSH
17527: LD_EXP 24
17531: NOT
17532: AND
17533: PUSH
17534: LD_INT 22
17536: PPUSH
17537: LD_INT 22
17539: PUSH
17540: LD_INT 3
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 21
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 59
17559: PUSH
17560: EMPTY
17561: LIST
17562: PUSH
17563: LD_INT 50
17565: PUSH
17566: EMPTY
17567: LIST
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: LD_INT 31
17574: PUSH
17575: LD_INT 22
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 31
17584: PUSH
17585: LD_INT 24
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 31
17594: PUSH
17595: LD_INT 14
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: PPUSH
17615: CALL_OW 70
17619: PUSH
17620: LD_INT 6
17622: GREATEREQUAL
17623: AND
17624: PUSH
17625: LD_INT 22
17627: PPUSH
17628: LD_INT 22
17630: PUSH
17631: LD_INT 3
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 21
17640: PUSH
17641: LD_INT 2
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 59
17650: PUSH
17651: EMPTY
17652: LIST
17653: PUSH
17654: LD_INT 50
17656: PUSH
17657: EMPTY
17658: LIST
17659: PUSH
17660: LD_INT 2
17662: PUSH
17663: LD_INT 31
17665: PUSH
17666: LD_INT 22
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 31
17675: PUSH
17676: LD_INT 24
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 31
17685: PUSH
17686: LD_INT 14
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: PPUSH
17706: CALL_OW 70
17710: PUSH
17711: LD_INT 22
17713: PUSH
17714: LD_INT 3
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 21
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 23
17733: PUSH
17734: LD_INT 3
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 2
17743: PUSH
17744: LD_INT 25
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 25
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 25
17766: PUSH
17767: LD_INT 3
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 25
17776: PUSH
17777: LD_INT 4
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: PPUSH
17797: CALL_OW 69
17801: LESS
17802: AND
17803: IFFALSE 17829
// begin case Query ( QEndMission ) of 1 :
17805: LD_STRING QEndMission
17807: PPUSH
17808: CALL_OW 97
17812: PUSH
17813: LD_INT 1
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17828
17821: POP
// FinishMission ; end ;
17822: CALL 17830 0 0
17826: GO 17829
17828: POP
// end ; end ;
17829: END
// function FinishMission ; var nearUnit ; begin
17830: LD_INT 0
17832: PPUSH
17833: PPUSH
// finishMissionBool = true ;
17834: LD_ADDR_EXP 24
17838: PUSH
17839: LD_INT 1
17841: ST_TO_ADDR
// if stevensDepot then
17842: LD_EXP 17
17846: IFFALSE 18015
// begin DialogueOn ;
17848: CALL_OW 6
// if IsOK ( Petrosyan ) then
17852: LD_EXP 41
17856: PPUSH
17857: CALL_OW 302
17861: IFFALSE 17877
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
17863: LD_EXP 41
17867: PPUSH
17868: LD_STRING DStevensLeftBehind-Pty-1
17870: PPUSH
17871: CALL_OW 88
17875: GO 17991
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
17877: LD_INT 22
17879: PUSH
17880: LD_INT 3
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 21
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 26
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 50
17909: PUSH
17910: EMPTY
17911: LIST
17912: PUSH
17913: LD_INT 2
17915: PUSH
17916: LD_INT 25
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 25
17928: PUSH
17929: LD_INT 2
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 25
17938: PUSH
17939: LD_INT 3
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 25
17948: PUSH
17949: LD_INT 4
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: PPUSH
17970: CALL_OW 69
17974: PPUSH
17975: LD_STRING StevensLeftBehind-RSol1-1
17977: PPUSH
17978: LD_STRING 
17980: PPUSH
17981: LD_INT 0
17983: PPUSH
17984: LD_INT 1
17986: PPUSH
17987: CALL 8717 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
17991: LD_EXP 37
17995: PPUSH
17996: LD_STRING DStevensLeftBehind-Bur-1
17998: PPUSH
17999: CALL_OW 88
// DialogueOff ;
18003: CALL_OW 7
// stevensStatus = 1 ;
18007: LD_ADDR_EXP 2
18011: PUSH
18012: LD_INT 1
18014: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
18015: LD_EXP 14
18019: NOT
18020: PUSH
18021: LD_EXP 41
18025: PPUSH
18026: CALL_OW 302
18030: AND
18031: IFFALSE 18563
// begin PrepareStevens ( exit_rus ) ;
18033: LD_INT 22
18035: PPUSH
18036: CALL 20596 0 1
// wait ( 0 0$1.5 ) ;
18040: LD_INT 52
18042: PPUSH
18043: CALL_OW 67
// stevensPlaced = true ;
18047: LD_ADDR_EXP 14
18051: PUSH
18052: LD_INT 1
18054: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
18055: LD_ADDR_VAR 0 2
18059: PUSH
18060: LD_INT 22
18062: PUSH
18063: LD_INT 3
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 21
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 26
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 50
18092: PUSH
18093: EMPTY
18094: LIST
18095: PUSH
18096: LD_INT 2
18098: PUSH
18099: LD_INT 25
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 25
18111: PUSH
18112: LD_INT 2
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 25
18121: PUSH
18122: LD_INT 3
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 25
18131: PUSH
18132: LD_INT 4
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: PPUSH
18153: CALL_OW 69
18157: PPUSH
18158: LD_EXP 55
18162: PPUSH
18163: CALL_OW 74
18167: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
18168: LD_EXP 55
18172: PPUSH
18173: CALL_OW 87
// InGameOn ;
18177: CALL_OW 8
// wait ( 0 0$1.5 ) ;
18181: LD_INT 52
18183: PPUSH
18184: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18188: LD_EXP 55
18192: PPUSH
18193: LD_INT 6
18195: PPUSH
18196: CALL_OW 235
// DialogueOn ;
18200: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18204: LD_EXP 55
18208: PPUSH
18209: LD_STRING DStevens-Huck-1
18211: PPUSH
18212: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18216: LD_EXP 41
18220: PPUSH
18221: LD_STRING DStevens-Pty-1
18223: PPUSH
18224: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18228: LD_EXP 41
18232: PPUSH
18233: LD_STRING DStevens-Pty-1a
18235: PPUSH
18236: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18240: LD_EXP 55
18244: PPUSH
18245: LD_STRING DStevens-Huck-2
18247: PPUSH
18248: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18252: LD_EXP 41
18256: PPUSH
18257: LD_STRING DStevens-Pty-2
18259: PPUSH
18260: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18264: LD_EXP 55
18268: PPUSH
18269: LD_STRING DStevens-Huck-3
18271: PPUSH
18272: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18276: LD_EXP 41
18280: PPUSH
18281: LD_STRING DStevens-Pty-3
18283: PPUSH
18284: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18288: LD_EXP 55
18292: PPUSH
18293: LD_STRING DStevens-Huck-4
18295: PPUSH
18296: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18300: LD_EXP 41
18304: PPUSH
18305: LD_STRING DStevensBurlak-Pty-1
18307: PPUSH
18308: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18312: LD_EXP 37
18316: PPUSH
18317: LD_STRING DStevensBurlak-Bur-1
18319: PPUSH
18320: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18324: LD_EXP 41
18328: PPUSH
18329: LD_STRING DStevensBurlak-Pty-2
18331: PPUSH
18332: CALL_OW 88
// case Query ( QKill ) of 1 :
18336: LD_STRING QKill
18338: PPUSH
18339: CALL_OW 97
18343: PUSH
18344: LD_INT 1
18346: DOUBLE
18347: EQUAL
18348: IFTRUE 18352
18350: GO 18479
18352: POP
// begin stevensCanExitMap = true ;
18353: LD_ADDR_EXP 19
18357: PUSH
18358: LD_INT 1
18360: ST_TO_ADDR
// stevensFollow = false ;
18361: LD_ADDR_EXP 15
18365: PUSH
18366: LD_INT 0
18368: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18369: LD_EXP 37
18373: PPUSH
18374: LD_STRING DKill-1-Bur-1
18376: PPUSH
18377: CALL_OW 88
// if IsOK ( Gleb ) then
18381: LD_EXP 40
18385: PPUSH
18386: CALL_OW 302
18390: IFFALSE 18404
// Say ( Gleb , DKill-1-Glb-1 ) ;
18392: LD_EXP 40
18396: PPUSH
18397: LD_STRING DKill-1-Glb-1
18399: PPUSH
18400: CALL_OW 88
// DialogueOff ;
18404: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18408: LD_EXP 55
18412: PPUSH
18413: LD_INT 1
18415: PPUSH
18416: CALL_OW 235
// stevensStatus = 0 ;
18420: LD_ADDR_EXP 2
18424: PUSH
18425: LD_INT 0
18427: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18428: LD_INT 22
18430: PUSH
18431: LD_INT 3
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PPUSH
18438: CALL_OW 69
18442: PPUSH
18443: LD_EXP 55
18447: PPUSH
18448: CALL_OW 115
// wait ( 0 0$1 ) ;
18452: LD_INT 35
18454: PPUSH
18455: CALL_OW 67
// until IsDead ( Stevens ) ;
18459: LD_EXP 55
18463: PPUSH
18464: CALL_OW 301
18468: IFFALSE 18428
// wait ( 0 0$1.5 ) ;
18470: LD_INT 52
18472: PPUSH
18473: CALL_OW 67
// end ; 2 :
18477: GO 18563
18479: LD_INT 2
18481: DOUBLE
18482: EQUAL
18483: IFTRUE 18487
18485: GO 18562
18487: POP
// begin stevensCanExitMap = true ;
18488: LD_ADDR_EXP 19
18492: PUSH
18493: LD_INT 1
18495: ST_TO_ADDR
// stevensWasInDepot = false ;
18496: LD_ADDR_EXP 18
18500: PUSH
18501: LD_INT 0
18503: ST_TO_ADDR
// stevensDepot = false ;
18504: LD_ADDR_EXP 17
18508: PUSH
18509: LD_INT 0
18511: ST_TO_ADDR
// stevensStatus = 1 ;
18512: LD_ADDR_EXP 2
18516: PUSH
18517: LD_INT 1
18519: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18520: LD_EXP 37
18524: PPUSH
18525: LD_STRING DKill-2-Bur-1
18527: PPUSH
18528: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18532: LD_EXP 41
18536: PPUSH
18537: LD_STRING DKill-2-Pty-1
18539: PPUSH
18540: CALL_OW 88
// DialogueOff ;
18544: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18548: LD_EXP 55
18552: PPUSH
18553: LD_INT 37
18555: PPUSH
18556: CALL_OW 113
// end ; end ;
18560: GO 18563
18562: POP
// end ; SetRewards ;
18563: CALL 18584 0 0
// SavePlayerCharacters ;
18567: CALL 18825 0 0
// SaveGlobalVariables ;
18571: CALL 19170 0 0
// YouWin ;
18575: CALL_OW 103
// end ;
18579: LD_VAR 0 1
18583: RET
// function SetRewards ; begin
18584: LD_INT 0
18586: PPUSH
// if fastBreakthrough then
18587: LD_EXP 23
18591: IFFALSE 18605
// AddMedal ( Time , 1 ) else
18593: LD_STRING Time
18595: PPUSH
18596: LD_INT 1
18598: PPUSH
18599: CALL_OW 101
18603: GO 18616
// AddMedal ( Time , - 1 ) ;
18605: LD_STRING Time
18607: PPUSH
18608: LD_INT 1
18610: NEG
18611: PPUSH
18612: CALL_OW 101
// if dial_tameApeBlocker then
18616: LD_EXP 10
18620: IFFALSE 18634
// AddMedal ( Apemen , 1 ) else
18622: LD_STRING Apemen
18624: PPUSH
18625: LD_INT 1
18627: PPUSH
18628: CALL_OW 101
18632: GO 18681
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18634: LD_EXP 10
18638: NOT
18639: PUSH
18640: LD_INT 1
18642: PPUSH
18643: LD_INT 3
18645: PPUSH
18646: CALL_OW 321
18650: PUSH
18651: LD_INT 1
18653: EQUAL
18654: AND
18655: IFFALSE 18670
// AddMedal ( Apemen , - 1 ) else
18657: LD_STRING Apemen
18659: PPUSH
18660: LD_INT 1
18662: NEG
18663: PPUSH
18664: CALL_OW 101
18668: GO 18681
// AddMedal ( Apemen , - 2 ) ;
18670: LD_STRING Apemen
18672: PPUSH
18673: LD_INT 2
18675: NEG
18676: PPUSH
18677: CALL_OW 101
// if not omarStatus then
18681: LD_EXP 1
18685: NOT
18686: IFFALSE 18700
// AddMedal ( Abdul , 1 ) else
18688: LD_STRING Abdul
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 101
18698: GO 18711
// AddMedal ( Abdul , - 1 ) ;
18700: LD_STRING Abdul
18702: PPUSH
18703: LD_INT 1
18705: NEG
18706: PPUSH
18707: CALL_OW 101
// GiveMedals ( Main ) ;
18711: LD_STRING Main
18713: PPUSH
18714: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18718: LD_INT 22
18720: PUSH
18721: LD_INT 3
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 23
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 50
18750: PUSH
18751: EMPTY
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 25
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 25
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 25
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 25
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: PPUSH
18811: CALL_OW 69
18815: PPUSH
18816: CALL_OW 43
// end ;
18820: LD_VAR 0 1
18824: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
18825: LD_INT 0
18827: PPUSH
18828: PPUSH
18829: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
18830: LD_EXP 37
18834: PPUSH
18835: LD_STRING Burlak
18837: PPUSH
18838: LD_INT 3
18840: PPUSH
18841: CALL 8518 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
18845: LD_EXP 38
18849: PPUSH
18850: CALL_OW 310
18854: PPUSH
18855: LD_INT 22
18857: PPUSH
18858: CALL_OW 308
18862: IFFALSE 18879
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
18864: LD_EXP 38
18868: PPUSH
18869: LD_STRING Karamazov
18871: PPUSH
18872: LD_INT 3
18874: PPUSH
18875: CALL 8518 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
18879: LD_EXP 39
18883: PPUSH
18884: CALL_OW 310
18888: PPUSH
18889: LD_INT 22
18891: PPUSH
18892: CALL_OW 308
18896: IFFALSE 18913
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
18898: LD_EXP 39
18902: PPUSH
18903: LD_STRING Petrovova
18905: PPUSH
18906: LD_INT 3
18908: PPUSH
18909: CALL 8518 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
18913: LD_EXP 40
18917: PPUSH
18918: CALL_OW 310
18922: PPUSH
18923: LD_INT 22
18925: PPUSH
18926: CALL_OW 308
18930: IFFALSE 18947
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
18932: LD_EXP 40
18936: PPUSH
18937: LD_STRING Gleb
18939: PPUSH
18940: LD_INT 3
18942: PPUSH
18943: CALL 8518 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
18947: LD_EXP 41
18951: PPUSH
18952: CALL_OW 310
18956: PPUSH
18957: LD_INT 22
18959: PPUSH
18960: CALL_OW 308
18964: IFFALSE 18981
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
18966: LD_EXP 41
18970: PPUSH
18971: LD_STRING Petrosyan
18973: PPUSH
18974: LD_INT 3
18976: PPUSH
18977: CALL 8518 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
18981: LD_EXP 43
18985: PPUSH
18986: CALL_OW 310
18990: PPUSH
18991: LD_INT 22
18993: PPUSH
18994: CALL_OW 308
18998: IFFALSE 19015
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
19000: LD_EXP 43
19004: PPUSH
19005: LD_STRING Dolgov
19007: PPUSH
19008: LD_INT 3
19010: PPUSH
19011: CALL 8518 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
19015: LD_EXP 44
19019: PPUSH
19020: CALL_OW 310
19024: PPUSH
19025: LD_INT 22
19027: PPUSH
19028: CALL_OW 308
19032: IFFALSE 19049
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
19034: LD_EXP 44
19038: PPUSH
19039: LD_STRING Lipshchin
19041: PPUSH
19042: LD_INT 3
19044: PPUSH
19045: CALL 8518 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
19049: LD_EXP 42
19053: PPUSH
19054: CALL_OW 310
19058: PPUSH
19059: LD_INT 22
19061: PPUSH
19062: CALL_OW 308
19066: IFFALSE 19083
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
19068: LD_EXP 42
19072: PPUSH
19073: LD_STRING Titov
19075: PPUSH
19076: LD_INT 3
19078: PPUSH
19079: CALL 8518 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
19083: LD_INT 22
19085: PPUSH
19086: LD_INT 22
19088: PUSH
19089: LD_INT 3
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 21
19098: PUSH
19099: LD_INT 1
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 25
19111: PUSH
19112: LD_INT 12
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 25
19121: PUSH
19122: LD_INT 16
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 25
19131: PUSH
19132: LD_INT 15
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 70
19154: PPUSH
19155: LD_STRING other_apemans
19157: PPUSH
19158: LD_INT 3
19160: PPUSH
19161: CALL 8574 0 3
// end ;
19165: LD_VAR 0 1
19169: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
19170: LD_INT 0
19172: PPUSH
19173: PPUSH
19174: PPUSH
19175: PPUSH
19176: PPUSH
// resources = [ ] ;
19177: LD_ADDR_VAR 0 3
19181: PUSH
19182: EMPTY
19183: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19184: LD_ADDR_EXP 5
19188: PUSH
19189: EMPTY
19190: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19191: LD_EXP 2
19195: PPUSH
19196: LD_STRING 05_StevensStatus_1
19198: PPUSH
19199: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19203: LD_EXP 1
19207: PPUSH
19208: LD_STRING 05_OmarStatus_2
19210: PPUSH
19211: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) do
19215: LD_ADDR_VAR 0 2
19219: PUSH
19220: LD_INT 22
19222: PPUSH
19223: LD_INT 22
19225: PUSH
19226: LD_INT 3
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 59
19235: PUSH
19236: EMPTY
19237: LIST
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: LD_INT 34
19244: PUSH
19245: LD_INT 51
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 34
19254: PUSH
19255: LD_INT 32
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: PPUSH
19272: CALL_OW 70
19276: PUSH
19277: FOR_IN
19278: IFFALSE 19306
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19280: LD_ADDR_VAR 0 3
19284: PUSH
19285: LD_VAR 0 3
19289: PUSH
19290: LD_VAR 0 2
19294: PPUSH
19295: CALL 9704 0 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: ADD
19303: ST_TO_ADDR
19304: GO 19277
19306: POP
19307: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19308: LD_VAR 0 3
19312: PPUSH
19313: LD_STRING 05_ResourcesInCargo_3
19315: PPUSH
19316: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19320: LD_ADDR_VAR 0 2
19324: PUSH
19325: LD_INT 22
19327: PPUSH
19328: LD_INT 22
19330: PUSH
19331: LD_INT 3
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 21
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 59
19350: PUSH
19351: EMPTY
19352: LIST
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: LIST
19358: PPUSH
19359: CALL_OW 70
19363: PUSH
19364: FOR_IN
19365: IFFALSE 19625
// begin driver = UnitsInside ( i ) [ 1 ] ;
19367: LD_ADDR_VAR 0 4
19371: PUSH
19372: LD_VAR 0 2
19376: PPUSH
19377: CALL_OW 313
19381: PUSH
19382: LD_INT 1
19384: ARRAY
19385: ST_TO_ADDR
// if driver = Burlak then
19386: LD_VAR 0 4
19390: PUSH
19391: LD_EXP 37
19395: EQUAL
19396: IFFALSE 19406
// driverShortName = Bur ;
19398: LD_ADDR_VAR 0 5
19402: PUSH
19403: LD_STRING Bur
19405: ST_TO_ADDR
// if driver = Karamazov then
19406: LD_VAR 0 4
19410: PUSH
19411: LD_EXP 38
19415: EQUAL
19416: IFFALSE 19426
// driverShortName = Kar ;
19418: LD_ADDR_VAR 0 5
19422: PUSH
19423: LD_STRING Kar
19425: ST_TO_ADDR
// if driver = Petrovova then
19426: LD_VAR 0 4
19430: PUSH
19431: LD_EXP 39
19435: EQUAL
19436: IFFALSE 19446
// driverShortName = Ptr ;
19438: LD_ADDR_VAR 0 5
19442: PUSH
19443: LD_STRING Ptr
19445: ST_TO_ADDR
// if driver = Gleb then
19446: LD_VAR 0 4
19450: PUSH
19451: LD_EXP 40
19455: EQUAL
19456: IFFALSE 19466
// driverShortName = Glb ;
19458: LD_ADDR_VAR 0 5
19462: PUSH
19463: LD_STRING Glb
19465: ST_TO_ADDR
// if driver = Petrosyan then
19466: LD_VAR 0 4
19470: PUSH
19471: LD_EXP 41
19475: EQUAL
19476: IFFALSE 19486
// driverShortName = Pet ;
19478: LD_ADDR_VAR 0 5
19482: PUSH
19483: LD_STRING Pet
19485: ST_TO_ADDR
// if driver = Dolgov then
19486: LD_VAR 0 4
19490: PUSH
19491: LD_EXP 43
19495: EQUAL
19496: IFFALSE 19506
// driverShortName = Dol ;
19498: LD_ADDR_VAR 0 5
19502: PUSH
19503: LD_STRING Dol
19505: ST_TO_ADDR
// if driver = Lipshchin then
19506: LD_VAR 0 4
19510: PUSH
19511: LD_EXP 44
19515: EQUAL
19516: IFFALSE 19526
// driverShortName = Lip ;
19518: LD_ADDR_VAR 0 5
19522: PUSH
19523: LD_STRING Lip
19525: ST_TO_ADDR
// if driver = Titov then
19526: LD_VAR 0 4
19530: PUSH
19531: LD_EXP 42
19535: EQUAL
19536: IFFALSE 19546
// driverShortName = Tit ;
19538: LD_ADDR_VAR 0 5
19542: PUSH
19543: LD_STRING Tit
19545: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19546: LD_ADDR_EXP 5
19550: PUSH
19551: LD_EXP 5
19555: PUSH
19556: LD_VAR 0 2
19560: PPUSH
19561: CALL_OW 248
19565: PUSH
19566: LD_VAR 0 2
19570: PPUSH
19571: CALL_OW 265
19575: PUSH
19576: LD_VAR 0 2
19580: PPUSH
19581: CALL_OW 262
19585: PUSH
19586: LD_VAR 0 2
19590: PPUSH
19591: CALL_OW 263
19595: PUSH
19596: LD_VAR 0 2
19600: PPUSH
19601: CALL_OW 264
19605: PUSH
19606: LD_VAR 0 5
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: PUSH
19619: EMPTY
19620: LIST
19621: ADD
19622: ST_TO_ADDR
// end ;
19623: GO 19364
19625: POP
19626: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19627: LD_EXP 5
19631: PPUSH
19632: LD_STRING 05_Tanks_4
19634: PPUSH
19635: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19639: LD_INT 22
19641: PUSH
19642: LD_INT 3
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 23
19651: PUSH
19652: LD_INT 3
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 21
19661: PUSH
19662: LD_INT 3
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: LD_INT 30
19674: PUSH
19675: LD_INT 6
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 30
19684: PUSH
19685: LD_INT 7
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: PPUSH
19703: CALL_OW 69
19707: NOT
19708: IFFALSE 19718
// labDestroyed = 1 ;
19710: LD_ADDR_EXP 3
19714: PUSH
19715: LD_INT 1
19717: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
19718: LD_EXP 3
19722: PPUSH
19723: LD_STRING 05_LabDestroyed_5
19725: PPUSH
19726: CALL_OW 39
// end ; end_of_file
19730: LD_VAR 0 1
19734: RET
// export function Nef_PrepareNature ; var i , un ; begin
19735: LD_INT 0
19737: PPUSH
19738: PPUSH
19739: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
19740: LD_ADDR_VAR 0 2
19744: PUSH
19745: DOUBLE
19746: LD_INT 1
19748: DEC
19749: ST_TO_ADDR
19750: LD_EXP 25
19754: PUSH
19755: LD_INT 1
19757: ARRAY
19758: PUSH
19759: FOR_TO
19760: IFFALSE 19870
// begin uc_side = 0 ;
19762: LD_ADDR_OWVAR 20
19766: PUSH
19767: LD_INT 0
19769: ST_TO_ADDR
// uc_nation = nation_nature ;
19770: LD_ADDR_OWVAR 21
19774: PUSH
19775: LD_INT 0
19777: ST_TO_ADDR
// hc_class = class_apeman ;
19778: LD_ADDR_OWVAR 28
19782: PUSH
19783: LD_INT 12
19785: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19786: LD_ADDR_OWVAR 31
19790: PUSH
19791: LD_EXP 26
19795: PUSH
19796: LD_INT 1
19798: ARRAY
19799: PUSH
19800: LD_EXP 26
19804: PUSH
19805: LD_INT 2
19807: ARRAY
19808: PUSH
19809: LD_EXP 26
19813: PUSH
19814: LD_INT 3
19816: ARRAY
19817: PUSH
19818: LD_EXP 26
19822: PUSH
19823: LD_INT 4
19825: ARRAY
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19833: LD_ADDR_OWVAR 35
19837: PUSH
19838: LD_EXP 27
19842: ST_TO_ADDR
// un = CreateHuman ;
19843: LD_ADDR_VAR 0 3
19847: PUSH
19848: CALL_OW 44
19852: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19853: LD_VAR 0 3
19857: PPUSH
19858: LD_INT 33
19860: PPUSH
19861: LD_INT 0
19863: PPUSH
19864: CALL_OW 49
// end ;
19868: GO 19759
19870: POP
19871: POP
// for i := 1 to animalsAmount [ 2 ] do
19872: LD_ADDR_VAR 0 2
19876: PUSH
19877: DOUBLE
19878: LD_INT 1
19880: DEC
19881: ST_TO_ADDR
19882: LD_EXP 25
19886: PUSH
19887: LD_INT 2
19889: ARRAY
19890: PUSH
19891: FOR_TO
19892: IFFALSE 20002
// begin uc_side = 0 ;
19894: LD_ADDR_OWVAR 20
19898: PUSH
19899: LD_INT 0
19901: ST_TO_ADDR
// uc_nation = nation_nature ;
19902: LD_ADDR_OWVAR 21
19906: PUSH
19907: LD_INT 0
19909: ST_TO_ADDR
// hc_class = class_phororhacos ;
19910: LD_ADDR_OWVAR 28
19914: PUSH
19915: LD_INT 18
19917: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19918: LD_ADDR_OWVAR 31
19922: PUSH
19923: LD_EXP 26
19927: PUSH
19928: LD_INT 1
19930: ARRAY
19931: PUSH
19932: LD_EXP 26
19936: PUSH
19937: LD_INT 2
19939: ARRAY
19940: PUSH
19941: LD_EXP 26
19945: PUSH
19946: LD_INT 3
19948: ARRAY
19949: PUSH
19950: LD_EXP 26
19954: PUSH
19955: LD_INT 4
19957: ARRAY
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19965: LD_ADDR_OWVAR 35
19969: PUSH
19970: LD_EXP 27
19974: ST_TO_ADDR
// un = CreateHuman ;
19975: LD_ADDR_VAR 0 3
19979: PUSH
19980: CALL_OW 44
19984: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19985: LD_VAR 0 3
19989: PPUSH
19990: LD_INT 33
19992: PPUSH
19993: LD_INT 0
19995: PPUSH
19996: CALL_OW 49
// end ;
20000: GO 19891
20002: POP
20003: POP
// for i := 1 to animalsAmount [ 3 ] do
20004: LD_ADDR_VAR 0 2
20008: PUSH
20009: DOUBLE
20010: LD_INT 1
20012: DEC
20013: ST_TO_ADDR
20014: LD_EXP 25
20018: PUSH
20019: LD_INT 3
20021: ARRAY
20022: PUSH
20023: FOR_TO
20024: IFFALSE 20134
// begin uc_side = 0 ;
20026: LD_ADDR_OWVAR 20
20030: PUSH
20031: LD_INT 0
20033: ST_TO_ADDR
// uc_nation = nation_nature ;
20034: LD_ADDR_OWVAR 21
20038: PUSH
20039: LD_INT 0
20041: ST_TO_ADDR
// hc_class = class_tiger ;
20042: LD_ADDR_OWVAR 28
20046: PUSH
20047: LD_INT 14
20049: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20050: LD_ADDR_OWVAR 31
20054: PUSH
20055: LD_EXP 26
20059: PUSH
20060: LD_INT 1
20062: ARRAY
20063: PUSH
20064: LD_EXP 26
20068: PUSH
20069: LD_INT 2
20071: ARRAY
20072: PUSH
20073: LD_EXP 26
20077: PUSH
20078: LD_INT 3
20080: ARRAY
20081: PUSH
20082: LD_EXP 26
20086: PUSH
20087: LD_INT 4
20089: ARRAY
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20097: LD_ADDR_OWVAR 35
20101: PUSH
20102: LD_EXP 27
20106: ST_TO_ADDR
// un = CreateHuman ;
20107: LD_ADDR_VAR 0 3
20111: PUSH
20112: CALL_OW 44
20116: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20117: LD_VAR 0 3
20121: PPUSH
20122: LD_INT 33
20124: PPUSH
20125: LD_INT 0
20127: PPUSH
20128: CALL_OW 49
// end ;
20132: GO 20023
20134: POP
20135: POP
// for i := 1 to animalsAmount [ 4 ] do
20136: LD_ADDR_VAR 0 2
20140: PUSH
20141: DOUBLE
20142: LD_INT 1
20144: DEC
20145: ST_TO_ADDR
20146: LD_EXP 25
20150: PUSH
20151: LD_INT 4
20153: ARRAY
20154: PUSH
20155: FOR_TO
20156: IFFALSE 20266
// begin uc_side = 0 ;
20158: LD_ADDR_OWVAR 20
20162: PUSH
20163: LD_INT 0
20165: ST_TO_ADDR
// uc_nation = nation_nature ;
20166: LD_ADDR_OWVAR 21
20170: PUSH
20171: LD_INT 0
20173: ST_TO_ADDR
// hc_class = 21 ;
20174: LD_ADDR_OWVAR 28
20178: PUSH
20179: LD_INT 21
20181: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20182: LD_ADDR_OWVAR 31
20186: PUSH
20187: LD_EXP 26
20191: PUSH
20192: LD_INT 1
20194: ARRAY
20195: PUSH
20196: LD_EXP 26
20200: PUSH
20201: LD_INT 2
20203: ARRAY
20204: PUSH
20205: LD_EXP 26
20209: PUSH
20210: LD_INT 3
20212: ARRAY
20213: PUSH
20214: LD_EXP 26
20218: PUSH
20219: LD_INT 4
20221: ARRAY
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20229: LD_ADDR_OWVAR 35
20233: PUSH
20234: LD_EXP 27
20238: ST_TO_ADDR
// un = CreateHuman ;
20239: LD_ADDR_VAR 0 3
20243: PUSH
20244: CALL_OW 44
20248: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20249: LD_VAR 0 3
20253: PPUSH
20254: LD_INT 33
20256: PPUSH
20257: LD_INT 0
20259: PPUSH
20260: CALL_OW 49
// end ;
20264: GO 20155
20266: POP
20267: POP
// for i := 1 to animalsAmount [ 5 ] do
20268: LD_ADDR_VAR 0 2
20272: PUSH
20273: DOUBLE
20274: LD_INT 1
20276: DEC
20277: ST_TO_ADDR
20278: LD_EXP 25
20282: PUSH
20283: LD_INT 5
20285: ARRAY
20286: PUSH
20287: FOR_TO
20288: IFFALSE 20349
// begin uc_side = 0 ;
20290: LD_ADDR_OWVAR 20
20294: PUSH
20295: LD_INT 0
20297: ST_TO_ADDR
// uc_nation = nation_nature ;
20298: LD_ADDR_OWVAR 21
20302: PUSH
20303: LD_INT 0
20305: ST_TO_ADDR
// vc_chassis := 31 ;
20306: LD_ADDR_OWVAR 37
20310: PUSH
20311: LD_INT 31
20313: ST_TO_ADDR
// vc_control := control_rider ;
20314: LD_ADDR_OWVAR 38
20318: PUSH
20319: LD_INT 4
20321: ST_TO_ADDR
// un := CreateVehicle ;
20322: LD_ADDR_VAR 0 3
20326: PUSH
20327: CALL_OW 45
20331: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20332: LD_VAR 0 3
20336: PPUSH
20337: LD_INT 33
20339: PPUSH
20340: LD_INT 0
20342: PPUSH
20343: CALL_OW 49
// end ;
20347: GO 20287
20349: POP
20350: POP
// end ; end_of_file
20351: LD_VAR 0 1
20355: RET
// every 0 0$1 do
20356: GO 20358
20358: DISABLE
// begin enable ;
20359: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20360: LD_ADDR_OWVAR 47
20364: PUSH
20365: LD_STRING #Am01-1
20367: PUSH
20368: LD_EXP 7
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20377: LD_ADDR_EXP 7
20381: PUSH
20382: LD_EXP 7
20386: PUSH
20387: LD_INT 35
20389: PLUS
20390: ST_TO_ADDR
// end ; end_of_file
20391: END
// every 0 0$01 do var timer ;
20392: GO 20394
20394: DISABLE
20395: LD_INT 0
20397: PPUSH
// begin timer := 0 0$30 ;
20398: LD_ADDR_VAR 0 1
20402: PUSH
20403: LD_INT 1050
20405: ST_TO_ADDR
// repeat wait ( timer ) ;
20406: LD_VAR 0 1
20410: PPUSH
20411: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20415: LD_EXP 22
20419: PUSH
20420: LD_INT 6
20422: GREATEREQUAL
20423: PUSH
20424: LD_EXP 22
20428: PUSH
20429: LD_INT 12
20431: LESS
20432: AND
20433: IFFALSE 20449
// timer := timer + 0 0$3 ;
20435: LD_ADDR_VAR 0 1
20439: PUSH
20440: LD_VAR 0 1
20444: PUSH
20445: LD_INT 105
20447: PLUS
20448: ST_TO_ADDR
// if cratesSpawned >= 12 then
20449: LD_EXP 22
20453: PUSH
20454: LD_INT 12
20456: GREATEREQUAL
20457: IFFALSE 20473
// timer := timer + 0 0$9 ;
20459: LD_ADDR_VAR 0 1
20463: PUSH
20464: LD_VAR 0 1
20468: PUSH
20469: LD_INT 315
20471: PLUS
20472: ST_TO_ADDR
// if timer > 3 3$00 then
20473: LD_VAR 0 1
20477: PUSH
20478: LD_INT 6300
20480: GREATER
20481: IFFALSE 20491
// timer := 0 0$50 ;
20483: LD_ADDR_VAR 0 1
20487: PUSH
20488: LD_INT 1750
20490: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20491: LD_INT 3
20493: PPUSH
20494: LD_INT 5
20496: PPUSH
20497: CALL_OW 12
20501: PPUSH
20502: LD_INT 46
20504: PPUSH
20505: LD_INT 1
20507: PPUSH
20508: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20512: LD_ADDR_EXP 22
20516: PUSH
20517: LD_EXP 22
20521: PUSH
20522: LD_INT 1
20524: PLUS
20525: ST_TO_ADDR
// until false ;
20526: LD_INT 0
20528: IFFALSE 20406
// end ;
20530: PPOPN 1
20532: END
// every 0 0$5 do
20533: GO 20535
20535: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20536: LD_INT 5
20538: PPUSH
20539: LD_INT 48
20541: PPUSH
20542: LD_INT 1
20544: PPUSH
20545: CALL_OW 55
// wait ( 0 0$40 ) ;
20549: LD_INT 1400
20551: PPUSH
20552: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20556: LD_INT 5
20558: PPUSH
20559: LD_INT 48
20561: PPUSH
20562: LD_INT 1
20564: PPUSH
20565: CALL_OW 55
// end ;
20569: END
// every 10 10$0 do
20570: GO 20572
20572: DISABLE
// begin enable ;
20573: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20574: LD_INT 3
20576: PPUSH
20577: LD_INT 5
20579: PPUSH
20580: CALL_OW 12
20584: PPUSH
20585: LD_INT 48
20587: PPUSH
20588: LD_INT 1
20590: PPUSH
20591: CALL_OW 55
// end ; end_of_file
20595: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20596: LD_INT 0
20598: PPUSH
// uc_side = 1 ;
20599: LD_ADDR_OWVAR 20
20603: PUSH
20604: LD_INT 1
20606: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20607: LD_ADDR_EXP 55
20611: PUSH
20612: LD_STRING Stevens
20614: PPUSH
20615: LD_INT 0
20617: PPUSH
20618: LD_INT 0
20620: PPUSH
20621: CALL 8400 0 3
20625: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20626: LD_EXP 55
20630: PPUSH
20631: LD_VAR 0 1
20635: PPUSH
20636: LD_INT 1
20638: PPUSH
20639: CALL_OW 49
// end ; end_of_file
20643: LD_VAR 0 2
20647: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
20648: LD_INT 0
20650: PPUSH
20651: PPUSH
// if not missionNumber then
20652: LD_VAR 0 2
20656: NOT
20657: IFFALSE 20661
// exit ;
20659: GO 20791
// achiv := false ;
20661: LD_ADDR_VAR 0 7
20665: PUSH
20666: LD_INT 0
20668: ST_TO_ADDR
// case campaignNumber of 1 :
20669: LD_VAR 0 1
20673: PUSH
20674: LD_INT 1
20676: DOUBLE
20677: EQUAL
20678: IFTRUE 20682
20680: GO 20693
20682: POP
// achiv := ACH_GOTA ; 2 :
20683: LD_ADDR_VAR 0 7
20687: PUSH
20688: LD_STRING ACH_GOTA
20690: ST_TO_ADDR
20691: GO 20743
20693: LD_INT 2
20695: DOUBLE
20696: EQUAL
20697: IFTRUE 20701
20699: GO 20704
20701: POP
// ; 3 :
20702: GO 20743
20704: LD_INT 3
20706: DOUBLE
20707: EQUAL
20708: IFTRUE 20712
20710: GO 20723
20712: POP
// achiv := ACH_MOTSU ; 4 :
20713: LD_ADDR_VAR 0 7
20717: PUSH
20718: LD_STRING ACH_MOTSU
20720: ST_TO_ADDR
20721: GO 20743
20723: LD_INT 4
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20742
20731: POP
// achiv := ACH_LOP ; end ;
20732: LD_ADDR_VAR 0 7
20736: PUSH
20737: LD_STRING ACH_LOP
20739: ST_TO_ADDR
20740: GO 20743
20742: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
20743: LD_OWVAR 67
20747: PUSH
20748: LD_INT 3
20750: EQUAL
20751: PUSH
20752: LD_VAR 0 7
20756: AND
20757: PUSH
20758: LD_VAR 0 3
20762: AND
20763: PUSH
20764: LD_VAR 0 4
20768: AND
20769: PUSH
20770: LD_VAR 0 5
20774: AND
20775: IFFALSE 20791
// SetAchievementEX ( achiv , missionNumber ) ;
20777: LD_VAR 0 7
20781: PPUSH
20782: LD_VAR 0 2
20786: PPUSH
20787: CALL_OW 564
// end ;
20791: LD_VAR 0 6
20795: RET
// export function SA_BehemothConstructed ; begin
20796: LD_INT 0
20798: PPUSH
// SetAchievement ( ACH_SMC ) ;
20799: LD_STRING ACH_SMC
20801: PPUSH
20802: CALL_OW 543
// end ;
20806: LD_VAR 0 1
20810: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
20811: LD_VAR 0 2
20815: PUSH
20816: LD_INT 1
20818: DOUBLE
20819: EQUAL
20820: IFTRUE 20824
20822: GO 20831
20824: POP
// HackUnlimitedResources ; 2 :
20825: CALL 21015 0 0
20829: GO 21012
20831: LD_INT 2
20833: DOUBLE
20834: EQUAL
20835: IFTRUE 20839
20837: GO 20846
20839: POP
// HackSetLevel10 ; 3 :
20840: CALL 21148 0 0
20844: GO 21012
20846: LD_INT 3
20848: DOUBLE
20849: EQUAL
20850: IFTRUE 20854
20852: GO 20861
20854: POP
// HackSetLevel10YourUnits ; 4 :
20855: CALL 21233 0 0
20859: GO 21012
20861: LD_INT 4
20863: DOUBLE
20864: EQUAL
20865: IFTRUE 20869
20867: GO 20891
20869: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
20870: LD_VAR 0 3
20874: PPUSH
20875: LD_VAR 0 4
20879: PPUSH
20880: LD_VAR 0 5
20884: PPUSH
20885: CALL 21323 0 3
20889: GO 21012
20891: LD_INT 5
20893: DOUBLE
20894: EQUAL
20895: IFTRUE 20899
20897: GO 20906
20899: POP
// HackSpawnVehicle ; 6 :
20900: CALL 21384 0 0
20904: GO 21012
20906: LD_INT 6
20908: DOUBLE
20909: EQUAL
20910: IFTRUE 20914
20912: GO 20921
20914: POP
// HackInvincible ; 7 :
20915: CALL 22459 0 0
20919: GO 21012
20921: LD_INT 7
20923: DOUBLE
20924: EQUAL
20925: IFTRUE 20929
20927: GO 20936
20929: POP
// HackInvisible ; 8 :
20930: CALL 22570 0 0
20934: GO 21012
20936: LD_INT 8
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 20951
20944: POP
// HackChangeYourSide ; 9 :
20945: CALL 22627 0 0
20949: GO 21012
20951: LD_INT 9
20953: DOUBLE
20954: EQUAL
20955: IFTRUE 20959
20957: GO 20966
20959: POP
// HackChangeUnitSide ; 10 :
20960: CALL 22669 0 0
20964: GO 21012
20966: LD_INT 10
20968: DOUBLE
20969: EQUAL
20970: IFTRUE 20974
20972: GO 20981
20974: POP
// HackFog ; 11 :
20975: CALL 22770 0 0
20979: GO 21012
20981: LD_INT 11
20983: DOUBLE
20984: EQUAL
20985: IFTRUE 20989
20987: GO 20996
20989: POP
// HackApeman ; 12 :
20990: CALL 22785 0 0
20994: GO 21012
20996: LD_INT 12
20998: DOUBLE
20999: EQUAL
21000: IFTRUE 21004
21002: GO 21011
21004: POP
// HackBoom ; end ;
21005: CALL 22870 0 0
21009: GO 21012
21011: POP
// end ;
21012: PPOPN 6
21014: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
21015: LD_INT 0
21017: PPUSH
21018: PPUSH
21019: PPUSH
21020: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21021: LD_ADDR_VAR 0 4
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_OWVAR 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: LD_INT 30
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 30
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PPUSH
21070: CALL_OW 69
21074: ST_TO_ADDR
// if not tmp then
21075: LD_VAR 0 4
21079: NOT
21080: IFFALSE 21084
// exit ;
21082: GO 21143
// for i in tmp do
21084: LD_ADDR_VAR 0 2
21088: PUSH
21089: LD_VAR 0 4
21093: PUSH
21094: FOR_IN
21095: IFFALSE 21141
// for j = 1 to 3 do
21097: LD_ADDR_VAR 0 3
21101: PUSH
21102: DOUBLE
21103: LD_INT 1
21105: DEC
21106: ST_TO_ADDR
21107: LD_INT 3
21109: PUSH
21110: FOR_TO
21111: IFFALSE 21137
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21113: LD_VAR 0 2
21117: PPUSH
21118: CALL_OW 274
21122: PPUSH
21123: LD_VAR 0 3
21127: PPUSH
21128: LD_INT 99999
21130: PPUSH
21131: CALL_OW 277
21135: GO 21110
21137: POP
21138: POP
21139: GO 21094
21141: POP
21142: POP
// end ;
21143: LD_VAR 0 1
21147: RET
// export function HackSetLevel10 ; var i , j ; begin
21148: LD_INT 0
21150: PPUSH
21151: PPUSH
21152: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PPUSH
21168: CALL_OW 69
21172: PUSH
21173: FOR_IN
21174: IFFALSE 21226
// if IsSelected ( i ) then
21176: LD_VAR 0 2
21180: PPUSH
21181: CALL_OW 306
21185: IFFALSE 21224
// begin for j := 1 to 4 do
21187: LD_ADDR_VAR 0 3
21191: PUSH
21192: DOUBLE
21193: LD_INT 1
21195: DEC
21196: ST_TO_ADDR
21197: LD_INT 4
21199: PUSH
21200: FOR_TO
21201: IFFALSE 21222
// SetSkill ( i , j , 10 ) ;
21203: LD_VAR 0 2
21207: PPUSH
21208: LD_VAR 0 3
21212: PPUSH
21213: LD_INT 10
21215: PPUSH
21216: CALL_OW 237
21220: GO 21200
21222: POP
21223: POP
// end ;
21224: GO 21173
21226: POP
21227: POP
// end ;
21228: LD_VAR 0 1
21232: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
21233: LD_INT 0
21235: PPUSH
21236: PPUSH
21237: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21238: LD_ADDR_VAR 0 2
21242: PUSH
21243: LD_INT 22
21245: PUSH
21246: LD_OWVAR 2
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 21
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PPUSH
21269: CALL_OW 69
21273: PUSH
21274: FOR_IN
21275: IFFALSE 21316
// begin for j := 1 to 4 do
21277: LD_ADDR_VAR 0 3
21281: PUSH
21282: DOUBLE
21283: LD_INT 1
21285: DEC
21286: ST_TO_ADDR
21287: LD_INT 4
21289: PUSH
21290: FOR_TO
21291: IFFALSE 21312
// SetSkill ( i , j , 10 ) ;
21293: LD_VAR 0 2
21297: PPUSH
21298: LD_VAR 0 3
21302: PPUSH
21303: LD_INT 10
21305: PPUSH
21306: CALL_OW 237
21310: GO 21290
21312: POP
21313: POP
// end ;
21314: GO 21274
21316: POP
21317: POP
// end ;
21318: LD_VAR 0 1
21322: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
21323: LD_INT 0
21325: PPUSH
// uc_side := your_side ;
21326: LD_ADDR_OWVAR 20
21330: PUSH
21331: LD_OWVAR 2
21335: ST_TO_ADDR
// uc_nation := nation ;
21336: LD_ADDR_OWVAR 21
21340: PUSH
21341: LD_VAR 0 1
21345: ST_TO_ADDR
// InitHc ;
21346: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21350: LD_INT 0
21352: PPUSH
21353: LD_VAR 0 2
21357: PPUSH
21358: LD_VAR 0 3
21362: PPUSH
21363: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
21367: CALL_OW 44
21371: PPUSH
21372: LD_INT 1
21374: PPUSH
21375: CALL_OW 51
// end ;
21379: LD_VAR 0 4
21383: RET
// export function HackSpawnVehicle ; begin
21384: LD_INT 0
21386: PPUSH
// uc_side := your_side ;
21387: LD_ADDR_OWVAR 20
21391: PUSH
21392: LD_OWVAR 2
21396: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
21397: LD_ADDR_OWVAR 21
21401: PUSH
21402: LD_INT 1
21404: PPUSH
21405: LD_INT 3
21407: PPUSH
21408: CALL_OW 12
21412: ST_TO_ADDR
// InitVc ;
21413: CALL_OW 20
// case uc_nation of 1 :
21417: LD_OWVAR 21
21421: PUSH
21422: LD_INT 1
21424: DOUBLE
21425: EQUAL
21426: IFTRUE 21430
21428: GO 21737
21430: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
21431: LD_ADDR_OWVAR 37
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: LD_INT 2
21441: PUSH
21442: LD_INT 3
21444: PUSH
21445: LD_INT 4
21447: PUSH
21448: LD_INT 5
21450: PUSH
21451: LD_INT 11
21453: PUSH
21454: LD_INT 12
21456: PUSH
21457: LD_INT 13
21459: PUSH
21460: LD_INT 14
21462: PUSH
21463: LD_INT 21
21465: PUSH
21466: LD_INT 22
21468: PUSH
21469: LD_INT 23
21471: PUSH
21472: LD_INT 24
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: PPUSH
21493: LD_INT 13
21495: PPUSH
21496: CALL_OW 12
21500: ARRAY
21501: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
21502: LD_ADDR_OWVAR 38
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 3
21512: PUSH
21513: LD_INT 4
21515: PUSH
21516: LD_INT 5
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 1
21527: PPUSH
21528: LD_INT 4
21530: PPUSH
21531: CALL_OW 12
21535: ARRAY
21536: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
21537: LD_ADDR_OWVAR 39
21541: PUSH
21542: LD_INT 1
21544: PUSH
21545: LD_INT 2
21547: PUSH
21548: LD_INT 3
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PPUSH
21559: LD_INT 3
21561: PPUSH
21562: CALL_OW 12
21566: ARRAY
21567: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
21568: LD_ADDR_OWVAR 40
21572: PUSH
21573: LD_INT 14
21575: PUSH
21576: LD_INT 12
21578: PUSH
21579: LD_INT 13
21581: PUSH
21582: LD_INT 5
21584: PUSH
21585: LD_INT 10
21587: PUSH
21588: LD_INT 4
21590: PUSH
21591: LD_INT 6
21593: PUSH
21594: LD_INT 9
21596: PUSH
21597: LD_INT 3
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: LD_INT 11
21605: PUSH
21606: LD_INT 7
21608: PUSH
21609: LD_INT 8
21611: PUSH
21612: LD_INT 15
21614: PUSH
21615: LD_INT 32
21617: PUSH
21618: LD_INT 31
21620: PUSH
21621: LD_INT 24
21623: PUSH
21624: LD_INT 26
21626: PUSH
21627: LD_INT 25
21629: PUSH
21630: LD_INT 27
21632: PUSH
21633: LD_INT 23
21635: PUSH
21636: LD_INT 22
21638: PUSH
21639: LD_INT 30
21641: PUSH
21642: LD_INT 28
21644: PUSH
21645: LD_INT 29
21647: PUSH
21648: LD_INT 53
21650: PUSH
21651: LD_INT 51
21653: PUSH
21654: LD_INT 52
21656: PUSH
21657: LD_INT 43
21659: PUSH
21660: LD_INT 44
21662: PUSH
21663: LD_INT 46
21665: PUSH
21666: LD_INT 42
21668: PUSH
21669: LD_INT 47
21671: PUSH
21672: LD_INT 45
21674: PUSH
21675: LD_INT 48
21677: PUSH
21678: LD_INT 55
21680: PUSH
21681: LD_INT 49
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: PPUSH
21726: LD_INT 37
21728: PPUSH
21729: CALL_OW 12
21733: ARRAY
21734: ST_TO_ADDR
// end ; 2 :
21735: GO 22368
21737: LD_INT 2
21739: DOUBLE
21740: EQUAL
21741: IFTRUE 21745
21743: GO 22052
21745: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
21746: LD_ADDR_OWVAR 37
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: LD_INT 2
21756: PUSH
21757: LD_INT 3
21759: PUSH
21760: LD_INT 4
21762: PUSH
21763: LD_INT 5
21765: PUSH
21766: LD_INT 11
21768: PUSH
21769: LD_INT 12
21771: PUSH
21772: LD_INT 13
21774: PUSH
21775: LD_INT 14
21777: PUSH
21778: LD_INT 21
21780: PUSH
21781: LD_INT 22
21783: PUSH
21784: LD_INT 23
21786: PUSH
21787: LD_INT 24
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: PPUSH
21808: LD_INT 13
21810: PPUSH
21811: CALL_OW 12
21815: ARRAY
21816: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
21817: LD_ADDR_OWVAR 38
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: LD_INT 4
21830: PUSH
21831: LD_INT 5
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 1
21842: PPUSH
21843: LD_INT 4
21845: PPUSH
21846: CALL_OW 12
21850: ARRAY
21851: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
21852: LD_ADDR_OWVAR 39
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: LD_INT 2
21862: PUSH
21863: LD_INT 3
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 1
21873: PPUSH
21874: LD_INT 3
21876: PPUSH
21877: CALL_OW 12
21881: ARRAY
21882: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
21883: LD_ADDR_OWVAR 40
21887: PUSH
21888: LD_INT 14
21890: PUSH
21891: LD_INT 12
21893: PUSH
21894: LD_INT 13
21896: PUSH
21897: LD_INT 5
21899: PUSH
21900: LD_INT 10
21902: PUSH
21903: LD_INT 4
21905: PUSH
21906: LD_INT 6
21908: PUSH
21909: LD_INT 9
21911: PUSH
21912: LD_INT 3
21914: PUSH
21915: LD_INT 2
21917: PUSH
21918: LD_INT 11
21920: PUSH
21921: LD_INT 7
21923: PUSH
21924: LD_INT 8
21926: PUSH
21927: LD_INT 15
21929: PUSH
21930: LD_INT 32
21932: PUSH
21933: LD_INT 31
21935: PUSH
21936: LD_INT 24
21938: PUSH
21939: LD_INT 26
21941: PUSH
21942: LD_INT 25
21944: PUSH
21945: LD_INT 27
21947: PUSH
21948: LD_INT 23
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_INT 30
21956: PUSH
21957: LD_INT 28
21959: PUSH
21960: LD_INT 29
21962: PUSH
21963: LD_INT 53
21965: PUSH
21966: LD_INT 51
21968: PUSH
21969: LD_INT 52
21971: PUSH
21972: LD_INT 43
21974: PUSH
21975: LD_INT 44
21977: PUSH
21978: LD_INT 46
21980: PUSH
21981: LD_INT 42
21983: PUSH
21984: LD_INT 47
21986: PUSH
21987: LD_INT 45
21989: PUSH
21990: LD_INT 48
21992: PUSH
21993: LD_INT 55
21995: PUSH
21996: LD_INT 49
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 1
22040: PPUSH
22041: LD_INT 37
22043: PPUSH
22044: CALL_OW 12
22048: ARRAY
22049: ST_TO_ADDR
// end ; 3 :
22050: GO 22368
22052: LD_INT 3
22054: DOUBLE
22055: EQUAL
22056: IFTRUE 22060
22058: GO 22367
22060: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
22061: LD_ADDR_OWVAR 37
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: LD_INT 3
22074: PUSH
22075: LD_INT 4
22077: PUSH
22078: LD_INT 5
22080: PUSH
22081: LD_INT 11
22083: PUSH
22084: LD_INT 12
22086: PUSH
22087: LD_INT 13
22089: PUSH
22090: LD_INT 14
22092: PUSH
22093: LD_INT 21
22095: PUSH
22096: LD_INT 22
22098: PUSH
22099: LD_INT 23
22101: PUSH
22102: LD_INT 24
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 1
22122: PPUSH
22123: LD_INT 13
22125: PPUSH
22126: CALL_OW 12
22130: ARRAY
22131: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
22132: LD_ADDR_OWVAR 38
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: LD_INT 3
22142: PUSH
22143: LD_INT 4
22145: PUSH
22146: LD_INT 5
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 1
22157: PPUSH
22158: LD_INT 4
22160: PPUSH
22161: CALL_OW 12
22165: ARRAY
22166: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
22167: LD_ADDR_OWVAR 39
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 3
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: PPUSH
22189: LD_INT 3
22191: PPUSH
22192: CALL_OW 12
22196: ARRAY
22197: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
22198: LD_ADDR_OWVAR 40
22202: PUSH
22203: LD_INT 14
22205: PUSH
22206: LD_INT 12
22208: PUSH
22209: LD_INT 13
22211: PUSH
22212: LD_INT 5
22214: PUSH
22215: LD_INT 10
22217: PUSH
22218: LD_INT 4
22220: PUSH
22221: LD_INT 6
22223: PUSH
22224: LD_INT 9
22226: PUSH
22227: LD_INT 3
22229: PUSH
22230: LD_INT 2
22232: PUSH
22233: LD_INT 11
22235: PUSH
22236: LD_INT 7
22238: PUSH
22239: LD_INT 8
22241: PUSH
22242: LD_INT 15
22244: PUSH
22245: LD_INT 32
22247: PUSH
22248: LD_INT 31
22250: PUSH
22251: LD_INT 24
22253: PUSH
22254: LD_INT 26
22256: PUSH
22257: LD_INT 25
22259: PUSH
22260: LD_INT 27
22262: PUSH
22263: LD_INT 23
22265: PUSH
22266: LD_INT 22
22268: PUSH
22269: LD_INT 30
22271: PUSH
22272: LD_INT 28
22274: PUSH
22275: LD_INT 29
22277: PUSH
22278: LD_INT 53
22280: PUSH
22281: LD_INT 51
22283: PUSH
22284: LD_INT 52
22286: PUSH
22287: LD_INT 43
22289: PUSH
22290: LD_INT 44
22292: PUSH
22293: LD_INT 46
22295: PUSH
22296: LD_INT 42
22298: PUSH
22299: LD_INT 47
22301: PUSH
22302: LD_INT 45
22304: PUSH
22305: LD_INT 48
22307: PUSH
22308: LD_INT 55
22310: PUSH
22311: LD_INT 49
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 1
22355: PPUSH
22356: LD_INT 37
22358: PPUSH
22359: CALL_OW 12
22363: ARRAY
22364: ST_TO_ADDR
// end ; end ;
22365: GO 22368
22367: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22368: CALL_OW 45
22372: PPUSH
22373: LD_INT 1
22375: PPUSH
22376: CALL_OW 51
// end ;
22380: LD_VAR 0 1
22384: RET
// export invincible ; every 1 do
22385: GO 22387
22387: DISABLE
// invincible := [ ] ;
22388: LD_ADDR_EXP 56
22392: PUSH
22393: EMPTY
22394: ST_TO_ADDR
22395: END
// every 10 do var i ;
22396: GO 22398
22398: DISABLE
22399: LD_INT 0
22401: PPUSH
// begin enable ;
22402: ENABLE
// if not invincible then
22403: LD_EXP 56
22407: NOT
22408: IFFALSE 22412
// exit ;
22410: GO 22456
// for i in invincible do
22412: LD_ADDR_VAR 0 1
22416: PUSH
22417: LD_EXP 56
22421: PUSH
22422: FOR_IN
22423: IFFALSE 22454
// if GetLives ( i ) < 1000 then
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 256
22434: PUSH
22435: LD_INT 1000
22437: LESS
22438: IFFALSE 22452
// SetLives ( i , 1000 ) ;
22440: LD_VAR 0 1
22444: PPUSH
22445: LD_INT 1000
22447: PPUSH
22448: CALL_OW 234
22452: GO 22422
22454: POP
22455: POP
// end ;
22456: PPOPN 1
22458: END
// export function HackInvincible ; var i ; begin
22459: LD_INT 0
22461: PPUSH
22462: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22463: LD_ADDR_VAR 0 2
22467: PUSH
22468: LD_INT 2
22470: PUSH
22471: LD_INT 21
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 21
22483: PUSH
22484: LD_INT 2
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: PPUSH
22496: CALL_OW 69
22500: PUSH
22501: FOR_IN
22502: IFFALSE 22563
// if IsSelected ( i ) then
22504: LD_VAR 0 2
22508: PPUSH
22509: CALL_OW 306
22513: IFFALSE 22561
// begin if i in invincible then
22515: LD_VAR 0 2
22519: PUSH
22520: LD_EXP 56
22524: IN
22525: IFFALSE 22545
// invincible := invincible diff i else
22527: LD_ADDR_EXP 56
22531: PUSH
22532: LD_EXP 56
22536: PUSH
22537: LD_VAR 0 2
22541: DIFF
22542: ST_TO_ADDR
22543: GO 22561
// invincible := invincible union i ;
22545: LD_ADDR_EXP 56
22549: PUSH
22550: LD_EXP 56
22554: PUSH
22555: LD_VAR 0 2
22559: UNION
22560: ST_TO_ADDR
// end ;
22561: GO 22501
22563: POP
22564: POP
// end ;
22565: LD_VAR 0 1
22569: RET
// export function HackInvisible ; var i , j ; begin
22570: LD_INT 0
22572: PPUSH
22573: PPUSH
22574: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22575: LD_ADDR_VAR 0 2
22579: PUSH
22580: LD_INT 21
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PPUSH
22590: CALL_OW 69
22594: PUSH
22595: FOR_IN
22596: IFFALSE 22620
// if IsSelected ( i ) then
22598: LD_VAR 0 2
22602: PPUSH
22603: CALL_OW 306
22607: IFFALSE 22618
// begin ComForceInvisible ( i ) ;
22609: LD_VAR 0 2
22613: PPUSH
22614: CALL_OW 496
// end ;
22618: GO 22595
22620: POP
22621: POP
// end ;
22622: LD_VAR 0 1
22626: RET
// export function HackChangeYourSide ; begin
22627: LD_INT 0
22629: PPUSH
// if your_side = 8 then
22630: LD_OWVAR 2
22634: PUSH
22635: LD_INT 8
22637: EQUAL
22638: IFFALSE 22650
// your_side := 0 else
22640: LD_ADDR_OWVAR 2
22644: PUSH
22645: LD_INT 0
22647: ST_TO_ADDR
22648: GO 22664
// your_side := your_side + 1 ;
22650: LD_ADDR_OWVAR 2
22654: PUSH
22655: LD_OWVAR 2
22659: PUSH
22660: LD_INT 1
22662: PLUS
22663: ST_TO_ADDR
// end ;
22664: LD_VAR 0 1
22668: RET
// export function HackChangeUnitSide ; var i , j ; begin
22669: LD_INT 0
22671: PPUSH
22672: PPUSH
22673: PPUSH
// for i in all_units do
22674: LD_ADDR_VAR 0 2
22678: PUSH
22679: LD_OWVAR 3
22683: PUSH
22684: FOR_IN
22685: IFFALSE 22763
// if IsSelected ( i ) then
22687: LD_VAR 0 2
22691: PPUSH
22692: CALL_OW 306
22696: IFFALSE 22761
// begin j := GetSide ( i ) ;
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: LD_VAR 0 2
22707: PPUSH
22708: CALL_OW 255
22712: ST_TO_ADDR
// if j = 8 then
22713: LD_VAR 0 3
22717: PUSH
22718: LD_INT 8
22720: EQUAL
22721: IFFALSE 22733
// j := 0 else
22723: LD_ADDR_VAR 0 3
22727: PUSH
22728: LD_INT 0
22730: ST_TO_ADDR
22731: GO 22747
// j := j + 1 ;
22733: LD_ADDR_VAR 0 3
22737: PUSH
22738: LD_VAR 0 3
22742: PUSH
22743: LD_INT 1
22745: PLUS
22746: ST_TO_ADDR
// SetSide ( i , j ) ;
22747: LD_VAR 0 2
22751: PPUSH
22752: LD_VAR 0 3
22756: PPUSH
22757: CALL_OW 235
// end ;
22761: GO 22684
22763: POP
22764: POP
// end ;
22765: LD_VAR 0 1
22769: RET
// export function HackFog ; begin
22770: LD_INT 0
22772: PPUSH
// FogOff ( true ) ;
22773: LD_INT 1
22775: PPUSH
22776: CALL_OW 344
// end ;
22780: LD_VAR 0 1
22784: RET
// export function HackApeman ; begin
22785: LD_INT 0
22787: PPUSH
// uc_side := your_side ;
22788: LD_ADDR_OWVAR 20
22792: PUSH
22793: LD_OWVAR 2
22797: ST_TO_ADDR
// uc_nation := 0 ;
22798: LD_ADDR_OWVAR 21
22802: PUSH
22803: LD_INT 0
22805: ST_TO_ADDR
// hc_name :=  ;
22806: LD_ADDR_OWVAR 26
22810: PUSH
22811: LD_STRING 
22813: ST_TO_ADDR
// hc_gallery :=  ;
22814: LD_ADDR_OWVAR 33
22818: PUSH
22819: LD_STRING 
22821: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
22822: LD_ADDR_OWVAR 31
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: ST_TO_ADDR
// hc_class := class_apeman ;
22845: LD_ADDR_OWVAR 28
22849: PUSH
22850: LD_INT 12
22852: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
22853: CALL_OW 44
22857: PPUSH
22858: LD_INT 1
22860: PPUSH
22861: CALL_OW 51
// end ;
22865: LD_VAR 0 1
22869: RET
// export function HackBoom ; begin
22870: LD_INT 0
22872: PPUSH
// uc_side := your_side ;
22873: LD_ADDR_OWVAR 20
22877: PUSH
22878: LD_OWVAR 2
22882: ST_TO_ADDR
// uc_nation := 1 ;
22883: LD_ADDR_OWVAR 21
22887: PUSH
22888: LD_INT 1
22890: ST_TO_ADDR
// vc_chassis := us_morphling ;
22891: LD_ADDR_OWVAR 37
22895: PUSH
22896: LD_INT 5
22898: ST_TO_ADDR
// vc_engine := engine_siberite ;
22899: LD_ADDR_OWVAR 39
22903: PUSH
22904: LD_INT 3
22906: ST_TO_ADDR
// vc_control := control_computer ;
22907: LD_ADDR_OWVAR 38
22911: PUSH
22912: LD_INT 3
22914: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
22915: LD_ADDR_OWVAR 40
22919: PUSH
22920: LD_INT 8
22922: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22923: CALL_OW 45
22927: PPUSH
22928: LD_INT 1
22930: PPUSH
22931: CALL_OW 51
// end ; end_of_file
22935: LD_VAR 0 1
22939: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22940: LD_INT 0
22942: PPUSH
22943: PPUSH
// if exist_mode then
22944: LD_VAR 0 2
22948: IFFALSE 22973
// unit := CreateCharacter ( prefix & ident ) else
22950: LD_ADDR_VAR 0 5
22954: PUSH
22955: LD_VAR 0 3
22959: PUSH
22960: LD_VAR 0 1
22964: STR
22965: PPUSH
22966: CALL_OW 34
22970: ST_TO_ADDR
22971: GO 22988
// unit := NewCharacter ( ident ) ;
22973: LD_ADDR_VAR 0 5
22977: PUSH
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL_OW 25
22987: ST_TO_ADDR
// result := unit ;
22988: LD_ADDR_VAR 0 4
22992: PUSH
22993: LD_VAR 0 5
22997: ST_TO_ADDR
// end ;
22998: LD_VAR 0 4
23002: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23003: LD_INT 0
23005: PPUSH
23006: PPUSH
// if not side or not nation then
23007: LD_VAR 0 1
23011: NOT
23012: PUSH
23013: LD_VAR 0 2
23017: NOT
23018: OR
23019: IFFALSE 23023
// exit ;
23021: GO 23787
// case nation of nation_american :
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 1
23030: DOUBLE
23031: EQUAL
23032: IFTRUE 23036
23034: GO 23250
23036: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23037: LD_ADDR_VAR 0 4
23041: PUSH
23042: LD_INT 35
23044: PUSH
23045: LD_INT 45
23047: PUSH
23048: LD_INT 46
23050: PUSH
23051: LD_INT 47
23053: PUSH
23054: LD_INT 82
23056: PUSH
23057: LD_INT 83
23059: PUSH
23060: LD_INT 84
23062: PUSH
23063: LD_INT 85
23065: PUSH
23066: LD_INT 86
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: LD_INT 2
23074: PUSH
23075: LD_INT 6
23077: PUSH
23078: LD_INT 15
23080: PUSH
23081: LD_INT 16
23083: PUSH
23084: LD_INT 7
23086: PUSH
23087: LD_INT 12
23089: PUSH
23090: LD_INT 13
23092: PUSH
23093: LD_INT 10
23095: PUSH
23096: LD_INT 14
23098: PUSH
23099: LD_INT 20
23101: PUSH
23102: LD_INT 21
23104: PUSH
23105: LD_INT 22
23107: PUSH
23108: LD_INT 25
23110: PUSH
23111: LD_INT 32
23113: PUSH
23114: LD_INT 27
23116: PUSH
23117: LD_INT 36
23119: PUSH
23120: LD_INT 69
23122: PUSH
23123: LD_INT 39
23125: PUSH
23126: LD_INT 34
23128: PUSH
23129: LD_INT 40
23131: PUSH
23132: LD_INT 48
23134: PUSH
23135: LD_INT 49
23137: PUSH
23138: LD_INT 50
23140: PUSH
23141: LD_INT 51
23143: PUSH
23144: LD_INT 52
23146: PUSH
23147: LD_INT 53
23149: PUSH
23150: LD_INT 54
23152: PUSH
23153: LD_INT 55
23155: PUSH
23156: LD_INT 56
23158: PUSH
23159: LD_INT 57
23161: PUSH
23162: LD_INT 58
23164: PUSH
23165: LD_INT 59
23167: PUSH
23168: LD_INT 60
23170: PUSH
23171: LD_INT 61
23173: PUSH
23174: LD_INT 62
23176: PUSH
23177: LD_INT 80
23179: PUSH
23180: LD_INT 82
23182: PUSH
23183: LD_INT 83
23185: PUSH
23186: LD_INT 84
23188: PUSH
23189: LD_INT 85
23191: PUSH
23192: LD_INT 86
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: ST_TO_ADDR
23248: GO 23711
23250: LD_INT 2
23252: DOUBLE
23253: EQUAL
23254: IFTRUE 23258
23256: GO 23480
23258: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
23259: LD_ADDR_VAR 0 4
23263: PUSH
23264: LD_INT 35
23266: PUSH
23267: LD_INT 45
23269: PUSH
23270: LD_INT 46
23272: PUSH
23273: LD_INT 47
23275: PUSH
23276: LD_INT 82
23278: PUSH
23279: LD_INT 83
23281: PUSH
23282: LD_INT 84
23284: PUSH
23285: LD_INT 85
23287: PUSH
23288: LD_INT 87
23290: PUSH
23291: LD_INT 70
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: LD_INT 11
23299: PUSH
23300: LD_INT 3
23302: PUSH
23303: LD_INT 4
23305: PUSH
23306: LD_INT 5
23308: PUSH
23309: LD_INT 6
23311: PUSH
23312: LD_INT 15
23314: PUSH
23315: LD_INT 18
23317: PUSH
23318: LD_INT 7
23320: PUSH
23321: LD_INT 17
23323: PUSH
23324: LD_INT 8
23326: PUSH
23327: LD_INT 20
23329: PUSH
23330: LD_INT 21
23332: PUSH
23333: LD_INT 22
23335: PUSH
23336: LD_INT 72
23338: PUSH
23339: LD_INT 26
23341: PUSH
23342: LD_INT 69
23344: PUSH
23345: LD_INT 39
23347: PUSH
23348: LD_INT 40
23350: PUSH
23351: LD_INT 41
23353: PUSH
23354: LD_INT 42
23356: PUSH
23357: LD_INT 43
23359: PUSH
23360: LD_INT 48
23362: PUSH
23363: LD_INT 49
23365: PUSH
23366: LD_INT 50
23368: PUSH
23369: LD_INT 51
23371: PUSH
23372: LD_INT 52
23374: PUSH
23375: LD_INT 53
23377: PUSH
23378: LD_INT 54
23380: PUSH
23381: LD_INT 55
23383: PUSH
23384: LD_INT 56
23386: PUSH
23387: LD_INT 60
23389: PUSH
23390: LD_INT 61
23392: PUSH
23393: LD_INT 62
23395: PUSH
23396: LD_INT 66
23398: PUSH
23399: LD_INT 67
23401: PUSH
23402: LD_INT 68
23404: PUSH
23405: LD_INT 81
23407: PUSH
23408: LD_INT 82
23410: PUSH
23411: LD_INT 83
23413: PUSH
23414: LD_INT 84
23416: PUSH
23417: LD_INT 85
23419: PUSH
23420: LD_INT 87
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: ST_TO_ADDR
23478: GO 23711
23480: LD_INT 3
23482: DOUBLE
23483: EQUAL
23484: IFTRUE 23488
23486: GO 23710
23488: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23489: LD_ADDR_VAR 0 4
23493: PUSH
23494: LD_INT 46
23496: PUSH
23497: LD_INT 47
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: LD_INT 2
23505: PUSH
23506: LD_INT 82
23508: PUSH
23509: LD_INT 83
23511: PUSH
23512: LD_INT 84
23514: PUSH
23515: LD_INT 85
23517: PUSH
23518: LD_INT 86
23520: PUSH
23521: LD_INT 11
23523: PUSH
23524: LD_INT 9
23526: PUSH
23527: LD_INT 20
23529: PUSH
23530: LD_INT 19
23532: PUSH
23533: LD_INT 21
23535: PUSH
23536: LD_INT 24
23538: PUSH
23539: LD_INT 22
23541: PUSH
23542: LD_INT 25
23544: PUSH
23545: LD_INT 28
23547: PUSH
23548: LD_INT 29
23550: PUSH
23551: LD_INT 30
23553: PUSH
23554: LD_INT 31
23556: PUSH
23557: LD_INT 37
23559: PUSH
23560: LD_INT 38
23562: PUSH
23563: LD_INT 32
23565: PUSH
23566: LD_INT 27
23568: PUSH
23569: LD_INT 33
23571: PUSH
23572: LD_INT 69
23574: PUSH
23575: LD_INT 39
23577: PUSH
23578: LD_INT 34
23580: PUSH
23581: LD_INT 40
23583: PUSH
23584: LD_INT 71
23586: PUSH
23587: LD_INT 23
23589: PUSH
23590: LD_INT 44
23592: PUSH
23593: LD_INT 48
23595: PUSH
23596: LD_INT 49
23598: PUSH
23599: LD_INT 50
23601: PUSH
23602: LD_INT 51
23604: PUSH
23605: LD_INT 52
23607: PUSH
23608: LD_INT 53
23610: PUSH
23611: LD_INT 54
23613: PUSH
23614: LD_INT 55
23616: PUSH
23617: LD_INT 56
23619: PUSH
23620: LD_INT 57
23622: PUSH
23623: LD_INT 58
23625: PUSH
23626: LD_INT 59
23628: PUSH
23629: LD_INT 63
23631: PUSH
23632: LD_INT 64
23634: PUSH
23635: LD_INT 65
23637: PUSH
23638: LD_INT 82
23640: PUSH
23641: LD_INT 83
23643: PUSH
23644: LD_INT 84
23646: PUSH
23647: LD_INT 85
23649: PUSH
23650: LD_INT 86
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: ST_TO_ADDR
23708: GO 23711
23710: POP
// if state > - 1 and state < 3 then
23711: LD_VAR 0 3
23715: PUSH
23716: LD_INT 1
23718: NEG
23719: GREATER
23720: PUSH
23721: LD_VAR 0 3
23725: PUSH
23726: LD_INT 3
23728: LESS
23729: AND
23730: IFFALSE 23787
// for i in result do
23732: LD_ADDR_VAR 0 5
23736: PUSH
23737: LD_VAR 0 4
23741: PUSH
23742: FOR_IN
23743: IFFALSE 23785
// if GetTech ( i , side ) <> state then
23745: LD_VAR 0 5
23749: PPUSH
23750: LD_VAR 0 1
23754: PPUSH
23755: CALL_OW 321
23759: PUSH
23760: LD_VAR 0 3
23764: NONEQUAL
23765: IFFALSE 23783
// result := result diff i ;
23767: LD_ADDR_VAR 0 4
23771: PUSH
23772: LD_VAR 0 4
23776: PUSH
23777: LD_VAR 0 5
23781: DIFF
23782: ST_TO_ADDR
23783: GO 23742
23785: POP
23786: POP
// end ;
23787: LD_VAR 0 4
23791: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23792: LD_INT 0
23794: PPUSH
23795: PPUSH
23796: PPUSH
// result := true ;
23797: LD_ADDR_VAR 0 3
23801: PUSH
23802: LD_INT 1
23804: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23805: LD_ADDR_VAR 0 5
23809: PUSH
23810: LD_VAR 0 2
23814: PPUSH
23815: CALL_OW 480
23819: ST_TO_ADDR
// if not tmp then
23820: LD_VAR 0 5
23824: NOT
23825: IFFALSE 23829
// exit ;
23827: GO 23878
// for i in tmp do
23829: LD_ADDR_VAR 0 4
23833: PUSH
23834: LD_VAR 0 5
23838: PUSH
23839: FOR_IN
23840: IFFALSE 23876
// if GetTech ( i , side ) <> state_researched then
23842: LD_VAR 0 4
23846: PPUSH
23847: LD_VAR 0 1
23851: PPUSH
23852: CALL_OW 321
23856: PUSH
23857: LD_INT 2
23859: NONEQUAL
23860: IFFALSE 23874
// begin result := false ;
23862: LD_ADDR_VAR 0 3
23866: PUSH
23867: LD_INT 0
23869: ST_TO_ADDR
// exit ;
23870: POP
23871: POP
23872: GO 23878
// end ;
23874: GO 23839
23876: POP
23877: POP
// end ;
23878: LD_VAR 0 3
23882: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23883: LD_INT 0
23885: PPUSH
23886: PPUSH
23887: PPUSH
23888: PPUSH
23889: PPUSH
23890: PPUSH
23891: PPUSH
23892: PPUSH
23893: PPUSH
23894: PPUSH
23895: PPUSH
23896: PPUSH
23897: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23898: LD_VAR 0 1
23902: NOT
23903: PUSH
23904: LD_VAR 0 1
23908: PPUSH
23909: CALL_OW 257
23913: PUSH
23914: LD_INT 9
23916: NONEQUAL
23917: OR
23918: IFFALSE 23922
// exit ;
23920: GO 24495
// side := GetSide ( unit ) ;
23922: LD_ADDR_VAR 0 9
23926: PUSH
23927: LD_VAR 0 1
23931: PPUSH
23932: CALL_OW 255
23936: ST_TO_ADDR
// tech_space := tech_spacanom ;
23937: LD_ADDR_VAR 0 12
23941: PUSH
23942: LD_INT 29
23944: ST_TO_ADDR
// tech_time := tech_taurad ;
23945: LD_ADDR_VAR 0 13
23949: PUSH
23950: LD_INT 28
23952: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23953: LD_ADDR_VAR 0 11
23957: PUSH
23958: LD_VAR 0 1
23962: PPUSH
23963: CALL_OW 310
23967: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23968: LD_VAR 0 11
23972: PPUSH
23973: CALL_OW 247
23977: PUSH
23978: LD_INT 2
23980: EQUAL
23981: IFFALSE 23985
// exit ;
23983: GO 24495
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23985: LD_ADDR_VAR 0 8
23989: PUSH
23990: LD_INT 81
23992: PUSH
23993: LD_VAR 0 9
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 3
24004: PUSH
24005: LD_INT 21
24007: PUSH
24008: LD_INT 3
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PPUSH
24023: CALL_OW 69
24027: ST_TO_ADDR
// if not tmp then
24028: LD_VAR 0 8
24032: NOT
24033: IFFALSE 24037
// exit ;
24035: GO 24495
// if in_unit then
24037: LD_VAR 0 11
24041: IFFALSE 24065
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24043: LD_ADDR_VAR 0 10
24047: PUSH
24048: LD_VAR 0 8
24052: PPUSH
24053: LD_VAR 0 11
24057: PPUSH
24058: CALL_OW 74
24062: ST_TO_ADDR
24063: GO 24085
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24065: LD_ADDR_VAR 0 10
24069: PUSH
24070: LD_VAR 0 8
24074: PPUSH
24075: LD_VAR 0 1
24079: PPUSH
24080: CALL_OW 74
24084: ST_TO_ADDR
// if not enemy then
24085: LD_VAR 0 10
24089: NOT
24090: IFFALSE 24094
// exit ;
24092: GO 24495
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24094: LD_VAR 0 11
24098: PUSH
24099: LD_VAR 0 11
24103: PPUSH
24104: LD_VAR 0 10
24108: PPUSH
24109: CALL_OW 296
24113: PUSH
24114: LD_INT 13
24116: GREATER
24117: AND
24118: PUSH
24119: LD_VAR 0 1
24123: PPUSH
24124: LD_VAR 0 10
24128: PPUSH
24129: CALL_OW 296
24133: PUSH
24134: LD_INT 12
24136: GREATER
24137: OR
24138: IFFALSE 24142
// exit ;
24140: GO 24495
// missile := [ 1 ] ;
24142: LD_ADDR_VAR 0 14
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: EMPTY
24151: LIST
24152: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24153: LD_VAR 0 9
24157: PPUSH
24158: LD_VAR 0 12
24162: PPUSH
24163: CALL_OW 325
24167: IFFALSE 24196
// missile := Insert ( missile , missile + 1 , 2 ) ;
24169: LD_ADDR_VAR 0 14
24173: PUSH
24174: LD_VAR 0 14
24178: PPUSH
24179: LD_VAR 0 14
24183: PUSH
24184: LD_INT 1
24186: PLUS
24187: PPUSH
24188: LD_INT 2
24190: PPUSH
24191: CALL_OW 2
24195: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24196: LD_VAR 0 9
24200: PPUSH
24201: LD_VAR 0 13
24205: PPUSH
24206: CALL_OW 325
24210: PUSH
24211: LD_VAR 0 10
24215: PPUSH
24216: CALL_OW 255
24220: PPUSH
24221: LD_VAR 0 13
24225: PPUSH
24226: CALL_OW 325
24230: NOT
24231: AND
24232: IFFALSE 24261
// missile := Insert ( missile , missile + 1 , 3 ) ;
24234: LD_ADDR_VAR 0 14
24238: PUSH
24239: LD_VAR 0 14
24243: PPUSH
24244: LD_VAR 0 14
24248: PUSH
24249: LD_INT 1
24251: PLUS
24252: PPUSH
24253: LD_INT 3
24255: PPUSH
24256: CALL_OW 2
24260: ST_TO_ADDR
// if missile < 2 then
24261: LD_VAR 0 14
24265: PUSH
24266: LD_INT 2
24268: LESS
24269: IFFALSE 24273
// exit ;
24271: GO 24495
// x := GetX ( enemy ) ;
24273: LD_ADDR_VAR 0 4
24277: PUSH
24278: LD_VAR 0 10
24282: PPUSH
24283: CALL_OW 250
24287: ST_TO_ADDR
// y := GetY ( enemy ) ;
24288: LD_ADDR_VAR 0 5
24292: PUSH
24293: LD_VAR 0 10
24297: PPUSH
24298: CALL_OW 251
24302: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24303: LD_ADDR_VAR 0 6
24307: PUSH
24308: LD_VAR 0 4
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PPUSH
24317: LD_INT 1
24319: PPUSH
24320: CALL_OW 12
24324: PLUS
24325: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24326: LD_ADDR_VAR 0 7
24330: PUSH
24331: LD_VAR 0 5
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PPUSH
24340: LD_INT 1
24342: PPUSH
24343: CALL_OW 12
24347: PLUS
24348: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24349: LD_VAR 0 6
24353: PPUSH
24354: LD_VAR 0 7
24358: PPUSH
24359: CALL_OW 488
24363: NOT
24364: IFFALSE 24386
// begin _x := x ;
24366: LD_ADDR_VAR 0 6
24370: PUSH
24371: LD_VAR 0 4
24375: ST_TO_ADDR
// _y := y ;
24376: LD_ADDR_VAR 0 7
24380: PUSH
24381: LD_VAR 0 5
24385: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24386: LD_ADDR_VAR 0 3
24390: PUSH
24391: LD_INT 1
24393: PPUSH
24394: LD_VAR 0 14
24398: PPUSH
24399: CALL_OW 12
24403: ST_TO_ADDR
// case i of 1 :
24404: LD_VAR 0 3
24408: PUSH
24409: LD_INT 1
24411: DOUBLE
24412: EQUAL
24413: IFTRUE 24417
24415: GO 24434
24417: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24418: LD_VAR 0 1
24422: PPUSH
24423: LD_VAR 0 10
24427: PPUSH
24428: CALL_OW 115
24432: GO 24495
24434: LD_INT 2
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24442
24440: GO 24464
24442: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24443: LD_VAR 0 1
24447: PPUSH
24448: LD_VAR 0 6
24452: PPUSH
24453: LD_VAR 0 7
24457: PPUSH
24458: CALL_OW 153
24462: GO 24495
24464: LD_INT 3
24466: DOUBLE
24467: EQUAL
24468: IFTRUE 24472
24470: GO 24494
24472: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24473: LD_VAR 0 1
24477: PPUSH
24478: LD_VAR 0 6
24482: PPUSH
24483: LD_VAR 0 7
24487: PPUSH
24488: CALL_OW 154
24492: GO 24495
24494: POP
// end ;
24495: LD_VAR 0 2
24499: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24500: LD_INT 0
24502: PPUSH
24503: PPUSH
24504: PPUSH
24505: PPUSH
24506: PPUSH
24507: PPUSH
// if not unit or not building then
24508: LD_VAR 0 1
24512: NOT
24513: PUSH
24514: LD_VAR 0 2
24518: NOT
24519: OR
24520: IFFALSE 24524
// exit ;
24522: GO 24682
// x := GetX ( building ) ;
24524: LD_ADDR_VAR 0 5
24528: PUSH
24529: LD_VAR 0 2
24533: PPUSH
24534: CALL_OW 250
24538: ST_TO_ADDR
// y := GetY ( building ) ;
24539: LD_ADDR_VAR 0 6
24543: PUSH
24544: LD_VAR 0 2
24548: PPUSH
24549: CALL_OW 251
24553: ST_TO_ADDR
// for i = 0 to 5 do
24554: LD_ADDR_VAR 0 4
24558: PUSH
24559: DOUBLE
24560: LD_INT 0
24562: DEC
24563: ST_TO_ADDR
24564: LD_INT 5
24566: PUSH
24567: FOR_TO
24568: IFFALSE 24680
// begin _x := ShiftX ( x , i , 3 ) ;
24570: LD_ADDR_VAR 0 7
24574: PUSH
24575: LD_VAR 0 5
24579: PPUSH
24580: LD_VAR 0 4
24584: PPUSH
24585: LD_INT 3
24587: PPUSH
24588: CALL_OW 272
24592: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24593: LD_ADDR_VAR 0 8
24597: PUSH
24598: LD_VAR 0 6
24602: PPUSH
24603: LD_VAR 0 4
24607: PPUSH
24608: LD_INT 3
24610: PPUSH
24611: CALL_OW 273
24615: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24616: LD_VAR 0 7
24620: PPUSH
24621: LD_VAR 0 8
24625: PPUSH
24626: CALL_OW 488
24630: NOT
24631: IFFALSE 24635
// continue ;
24633: GO 24567
// if HexInfo ( _x , _y ) = 0 then
24635: LD_VAR 0 7
24639: PPUSH
24640: LD_VAR 0 8
24644: PPUSH
24645: CALL_OW 428
24649: PUSH
24650: LD_INT 0
24652: EQUAL
24653: IFFALSE 24678
// begin ComMoveXY ( unit , _x , _y ) ;
24655: LD_VAR 0 1
24659: PPUSH
24660: LD_VAR 0 7
24664: PPUSH
24665: LD_VAR 0 8
24669: PPUSH
24670: CALL_OW 111
// exit ;
24674: POP
24675: POP
24676: GO 24682
// end ; end ;
24678: GO 24567
24680: POP
24681: POP
// end ;
24682: LD_VAR 0 3
24686: RET
// export function ScanBase ( side , base_area ) ; begin
24687: LD_INT 0
24689: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24690: LD_ADDR_VAR 0 3
24694: PUSH
24695: LD_VAR 0 2
24699: PPUSH
24700: LD_INT 81
24702: PUSH
24703: LD_VAR 0 1
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PPUSH
24712: CALL_OW 70
24716: ST_TO_ADDR
// end ;
24717: LD_VAR 0 3
24721: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24722: LD_INT 0
24724: PPUSH
24725: PPUSH
24726: PPUSH
24727: PPUSH
// result := false ;
24728: LD_ADDR_VAR 0 2
24732: PUSH
24733: LD_INT 0
24735: ST_TO_ADDR
// side := GetSide ( unit ) ;
24736: LD_ADDR_VAR 0 3
24740: PUSH
24741: LD_VAR 0 1
24745: PPUSH
24746: CALL_OW 255
24750: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24751: LD_ADDR_VAR 0 4
24755: PUSH
24756: LD_VAR 0 1
24760: PPUSH
24761: CALL_OW 248
24765: ST_TO_ADDR
// case nat of 1 :
24766: LD_VAR 0 4
24770: PUSH
24771: LD_INT 1
24773: DOUBLE
24774: EQUAL
24775: IFTRUE 24779
24777: GO 24790
24779: POP
// tech := tech_lassight ; 2 :
24780: LD_ADDR_VAR 0 5
24784: PUSH
24785: LD_INT 12
24787: ST_TO_ADDR
24788: GO 24829
24790: LD_INT 2
24792: DOUBLE
24793: EQUAL
24794: IFTRUE 24798
24796: GO 24809
24798: POP
// tech := tech_mortar ; 3 :
24799: LD_ADDR_VAR 0 5
24803: PUSH
24804: LD_INT 41
24806: ST_TO_ADDR
24807: GO 24829
24809: LD_INT 3
24811: DOUBLE
24812: EQUAL
24813: IFTRUE 24817
24815: GO 24828
24817: POP
// tech := tech_bazooka ; end ;
24818: LD_ADDR_VAR 0 5
24822: PUSH
24823: LD_INT 44
24825: ST_TO_ADDR
24826: GO 24829
24828: POP
// if Researched ( side , tech ) then
24829: LD_VAR 0 3
24833: PPUSH
24834: LD_VAR 0 5
24838: PPUSH
24839: CALL_OW 325
24843: IFFALSE 24870
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_INT 5
24852: PUSH
24853: LD_INT 8
24855: PUSH
24856: LD_INT 9
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: PUSH
24864: LD_VAR 0 4
24868: ARRAY
24869: ST_TO_ADDR
// end ;
24870: LD_VAR 0 2
24874: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24875: LD_INT 0
24877: PPUSH
24878: PPUSH
24879: PPUSH
// if not mines then
24880: LD_VAR 0 2
24884: NOT
24885: IFFALSE 24889
// exit ;
24887: GO 25033
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24889: LD_ADDR_VAR 0 5
24893: PUSH
24894: LD_INT 81
24896: PUSH
24897: LD_VAR 0 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 3
24908: PUSH
24909: LD_INT 21
24911: PUSH
24912: LD_INT 3
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PPUSH
24927: CALL_OW 69
24931: ST_TO_ADDR
// for i in mines do
24932: LD_ADDR_VAR 0 4
24936: PUSH
24937: LD_VAR 0 2
24941: PUSH
24942: FOR_IN
24943: IFFALSE 25031
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24945: LD_VAR 0 4
24949: PUSH
24950: LD_INT 1
24952: ARRAY
24953: PPUSH
24954: LD_VAR 0 4
24958: PUSH
24959: LD_INT 2
24961: ARRAY
24962: PPUSH
24963: CALL_OW 458
24967: NOT
24968: IFFALSE 24972
// continue ;
24970: GO 24942
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24972: LD_VAR 0 4
24976: PUSH
24977: LD_INT 1
24979: ARRAY
24980: PPUSH
24981: LD_VAR 0 4
24985: PUSH
24986: LD_INT 2
24988: ARRAY
24989: PPUSH
24990: CALL_OW 428
24994: PUSH
24995: LD_VAR 0 5
24999: IN
25000: IFFALSE 25029
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25002: LD_VAR 0 4
25006: PUSH
25007: LD_INT 1
25009: ARRAY
25010: PPUSH
25011: LD_VAR 0 4
25015: PUSH
25016: LD_INT 2
25018: ARRAY
25019: PPUSH
25020: LD_VAR 0 1
25024: PPUSH
25025: CALL_OW 456
// end ;
25029: GO 24942
25031: POP
25032: POP
// end ;
25033: LD_VAR 0 3
25037: RET
// export function Count ( array ) ; var i ; begin
25038: LD_INT 0
25040: PPUSH
25041: PPUSH
// result := 0 ;
25042: LD_ADDR_VAR 0 2
25046: PUSH
25047: LD_INT 0
25049: ST_TO_ADDR
// for i in array do
25050: LD_ADDR_VAR 0 3
25054: PUSH
25055: LD_VAR 0 1
25059: PUSH
25060: FOR_IN
25061: IFFALSE 25085
// if i then
25063: LD_VAR 0 3
25067: IFFALSE 25083
// result := result + 1 ;
25069: LD_ADDR_VAR 0 2
25073: PUSH
25074: LD_VAR 0 2
25078: PUSH
25079: LD_INT 1
25081: PLUS
25082: ST_TO_ADDR
25083: GO 25060
25085: POP
25086: POP
// end ;
25087: LD_VAR 0 2
25091: RET
// export function IsEmpty ( building ) ; begin
25092: LD_INT 0
25094: PPUSH
// if not building then
25095: LD_VAR 0 1
25099: NOT
25100: IFFALSE 25104
// exit ;
25102: GO 25147
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25104: LD_ADDR_VAR 0 2
25108: PUSH
25109: LD_VAR 0 1
25113: PUSH
25114: LD_INT 22
25116: PUSH
25117: LD_VAR 0 1
25121: PPUSH
25122: CALL_OW 255
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 58
25133: PUSH
25134: EMPTY
25135: LIST
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PPUSH
25141: CALL_OW 69
25145: IN
25146: ST_TO_ADDR
// end ;
25147: LD_VAR 0 2
25151: RET
// export function IsNotFull ( building ) ; begin
25152: LD_INT 0
25154: PPUSH
// if not building then
25155: LD_VAR 0 1
25159: NOT
25160: IFFALSE 25164
// exit ;
25162: GO 25183
// result := UnitsInside ( building ) < 6 ;
25164: LD_ADDR_VAR 0 2
25168: PUSH
25169: LD_VAR 0 1
25173: PPUSH
25174: CALL_OW 313
25178: PUSH
25179: LD_INT 6
25181: LESS
25182: ST_TO_ADDR
// end ;
25183: LD_VAR 0 2
25187: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25188: LD_INT 0
25190: PPUSH
25191: PPUSH
25192: PPUSH
25193: PPUSH
// tmp := [ ] ;
25194: LD_ADDR_VAR 0 3
25198: PUSH
25199: EMPTY
25200: ST_TO_ADDR
// list := [ ] ;
25201: LD_ADDR_VAR 0 5
25205: PUSH
25206: EMPTY
25207: ST_TO_ADDR
// for i = 16 to 25 do
25208: LD_ADDR_VAR 0 4
25212: PUSH
25213: DOUBLE
25214: LD_INT 16
25216: DEC
25217: ST_TO_ADDR
25218: LD_INT 25
25220: PUSH
25221: FOR_TO
25222: IFFALSE 25295
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25224: LD_ADDR_VAR 0 3
25228: PUSH
25229: LD_VAR 0 3
25233: PUSH
25234: LD_INT 22
25236: PUSH
25237: LD_VAR 0 1
25241: PPUSH
25242: CALL_OW 255
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 91
25253: PUSH
25254: LD_VAR 0 1
25258: PUSH
25259: LD_INT 6
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 30
25269: PUSH
25270: LD_VAR 0 4
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: PUSH
25284: EMPTY
25285: LIST
25286: PPUSH
25287: CALL_OW 69
25291: ADD
25292: ST_TO_ADDR
25293: GO 25221
25295: POP
25296: POP
// for i = 1 to tmp do
25297: LD_ADDR_VAR 0 4
25301: PUSH
25302: DOUBLE
25303: LD_INT 1
25305: DEC
25306: ST_TO_ADDR
25307: LD_VAR 0 3
25311: PUSH
25312: FOR_TO
25313: IFFALSE 25401
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25315: LD_ADDR_VAR 0 5
25319: PUSH
25320: LD_VAR 0 5
25324: PUSH
25325: LD_VAR 0 3
25329: PUSH
25330: LD_VAR 0 4
25334: ARRAY
25335: PPUSH
25336: CALL_OW 266
25340: PUSH
25341: LD_VAR 0 3
25345: PUSH
25346: LD_VAR 0 4
25350: ARRAY
25351: PPUSH
25352: CALL_OW 250
25356: PUSH
25357: LD_VAR 0 3
25361: PUSH
25362: LD_VAR 0 4
25366: ARRAY
25367: PPUSH
25368: CALL_OW 251
25372: PUSH
25373: LD_VAR 0 3
25377: PUSH
25378: LD_VAR 0 4
25382: ARRAY
25383: PPUSH
25384: CALL_OW 254
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: ADD
25398: ST_TO_ADDR
25399: GO 25312
25401: POP
25402: POP
// result := list ;
25403: LD_ADDR_VAR 0 2
25407: PUSH
25408: LD_VAR 0 5
25412: ST_TO_ADDR
// end ;
25413: LD_VAR 0 2
25417: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25418: LD_INT 0
25420: PPUSH
25421: PPUSH
25422: PPUSH
25423: PPUSH
25424: PPUSH
25425: PPUSH
25426: PPUSH
// if not factory then
25427: LD_VAR 0 1
25431: NOT
25432: IFFALSE 25436
// exit ;
25434: GO 26029
// if control = control_apeman then
25436: LD_VAR 0 4
25440: PUSH
25441: LD_INT 5
25443: EQUAL
25444: IFFALSE 25553
// begin tmp := UnitsInside ( factory ) ;
25446: LD_ADDR_VAR 0 8
25450: PUSH
25451: LD_VAR 0 1
25455: PPUSH
25456: CALL_OW 313
25460: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25461: LD_VAR 0 8
25465: PPUSH
25466: LD_INT 25
25468: PUSH
25469: LD_INT 12
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PPUSH
25476: CALL_OW 72
25480: NOT
25481: IFFALSE 25491
// control := control_manual ;
25483: LD_ADDR_VAR 0 4
25487: PUSH
25488: LD_INT 1
25490: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25491: LD_ADDR_VAR 0 8
25495: PUSH
25496: LD_VAR 0 1
25500: PPUSH
25501: CALL 25188 0 1
25505: ST_TO_ADDR
// if tmp then
25506: LD_VAR 0 8
25510: IFFALSE 25553
// begin for i in tmp do
25512: LD_ADDR_VAR 0 7
25516: PUSH
25517: LD_VAR 0 8
25521: PUSH
25522: FOR_IN
25523: IFFALSE 25551
// if i [ 1 ] = b_ext_radio then
25525: LD_VAR 0 7
25529: PUSH
25530: LD_INT 1
25532: ARRAY
25533: PUSH
25534: LD_INT 22
25536: EQUAL
25537: IFFALSE 25549
// begin control := control_remote ;
25539: LD_ADDR_VAR 0 4
25543: PUSH
25544: LD_INT 2
25546: ST_TO_ADDR
// break ;
25547: GO 25551
// end ;
25549: GO 25522
25551: POP
25552: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25553: LD_VAR 0 1
25557: PPUSH
25558: LD_VAR 0 2
25562: PPUSH
25563: LD_VAR 0 3
25567: PPUSH
25568: LD_VAR 0 4
25572: PPUSH
25573: LD_VAR 0 5
25577: PPUSH
25578: CALL_OW 448
25582: IFFALSE 25617
// begin result := [ chassis , engine , control , weapon ] ;
25584: LD_ADDR_VAR 0 6
25588: PUSH
25589: LD_VAR 0 2
25593: PUSH
25594: LD_VAR 0 3
25598: PUSH
25599: LD_VAR 0 4
25603: PUSH
25604: LD_VAR 0 5
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: ST_TO_ADDR
// exit ;
25615: GO 26029
// end ; _chassis := AvailableChassisList ( factory ) ;
25617: LD_ADDR_VAR 0 9
25621: PUSH
25622: LD_VAR 0 1
25626: PPUSH
25627: CALL_OW 475
25631: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25632: LD_ADDR_VAR 0 11
25636: PUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 476
25646: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25647: LD_ADDR_VAR 0 12
25651: PUSH
25652: LD_VAR 0 1
25656: PPUSH
25657: CALL_OW 477
25661: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25662: LD_ADDR_VAR 0 10
25666: PUSH
25667: LD_VAR 0 1
25671: PPUSH
25672: CALL_OW 478
25676: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25677: LD_VAR 0 9
25681: NOT
25682: PUSH
25683: LD_VAR 0 11
25687: NOT
25688: OR
25689: PUSH
25690: LD_VAR 0 12
25694: NOT
25695: OR
25696: PUSH
25697: LD_VAR 0 10
25701: NOT
25702: OR
25703: IFFALSE 25738
// begin result := [ chassis , engine , control , weapon ] ;
25705: LD_ADDR_VAR 0 6
25709: PUSH
25710: LD_VAR 0 2
25714: PUSH
25715: LD_VAR 0 3
25719: PUSH
25720: LD_VAR 0 4
25724: PUSH
25725: LD_VAR 0 5
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: ST_TO_ADDR
// exit ;
25736: GO 26029
// end ; if not chassis in _chassis then
25738: LD_VAR 0 2
25742: PUSH
25743: LD_VAR 0 9
25747: IN
25748: NOT
25749: IFFALSE 25775
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_VAR 0 9
25760: PUSH
25761: LD_INT 1
25763: PPUSH
25764: LD_VAR 0 9
25768: PPUSH
25769: CALL_OW 12
25773: ARRAY
25774: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25775: LD_VAR 0 2
25779: PPUSH
25780: LD_VAR 0 3
25784: PPUSH
25785: CALL 26034 0 2
25789: NOT
25790: IFFALSE 25849
// repeat engine := _engine [ 1 ] ;
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: LD_VAR 0 11
25801: PUSH
25802: LD_INT 1
25804: ARRAY
25805: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25806: LD_ADDR_VAR 0 11
25810: PUSH
25811: LD_VAR 0 11
25815: PPUSH
25816: LD_INT 1
25818: PPUSH
25819: CALL_OW 3
25823: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25824: LD_VAR 0 2
25828: PPUSH
25829: LD_VAR 0 3
25833: PPUSH
25834: CALL 26034 0 2
25838: PUSH
25839: LD_VAR 0 11
25843: PUSH
25844: EMPTY
25845: EQUAL
25846: OR
25847: IFFALSE 25792
// if not control in _control then
25849: LD_VAR 0 4
25853: PUSH
25854: LD_VAR 0 12
25858: IN
25859: NOT
25860: IFFALSE 25886
// control := _control [ rand ( 1 , _control ) ] ;
25862: LD_ADDR_VAR 0 4
25866: PUSH
25867: LD_VAR 0 12
25871: PUSH
25872: LD_INT 1
25874: PPUSH
25875: LD_VAR 0 12
25879: PPUSH
25880: CALL_OW 12
25884: ARRAY
25885: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25886: LD_VAR 0 2
25890: PPUSH
25891: LD_VAR 0 5
25895: PPUSH
25896: CALL 26254 0 2
25900: NOT
25901: IFFALSE 25960
// repeat weapon := _weapon [ 1 ] ;
25903: LD_ADDR_VAR 0 5
25907: PUSH
25908: LD_VAR 0 10
25912: PUSH
25913: LD_INT 1
25915: ARRAY
25916: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25917: LD_ADDR_VAR 0 10
25921: PUSH
25922: LD_VAR 0 10
25926: PPUSH
25927: LD_INT 1
25929: PPUSH
25930: CALL_OW 3
25934: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25935: LD_VAR 0 2
25939: PPUSH
25940: LD_VAR 0 5
25944: PPUSH
25945: CALL 26254 0 2
25949: PUSH
25950: LD_VAR 0 10
25954: PUSH
25955: EMPTY
25956: EQUAL
25957: OR
25958: IFFALSE 25903
// result := [ ] ;
25960: LD_ADDR_VAR 0 6
25964: PUSH
25965: EMPTY
25966: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25967: LD_VAR 0 1
25971: PPUSH
25972: LD_VAR 0 2
25976: PPUSH
25977: LD_VAR 0 3
25981: PPUSH
25982: LD_VAR 0 4
25986: PPUSH
25987: LD_VAR 0 5
25991: PPUSH
25992: CALL_OW 448
25996: IFFALSE 26029
// result := [ chassis , engine , control , weapon ] ;
25998: LD_ADDR_VAR 0 6
26002: PUSH
26003: LD_VAR 0 2
26007: PUSH
26008: LD_VAR 0 3
26012: PUSH
26013: LD_VAR 0 4
26017: PUSH
26018: LD_VAR 0 5
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: ST_TO_ADDR
// end ;
26029: LD_VAR 0 6
26033: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26034: LD_INT 0
26036: PPUSH
// if not chassis or not engine then
26037: LD_VAR 0 1
26041: NOT
26042: PUSH
26043: LD_VAR 0 2
26047: NOT
26048: OR
26049: IFFALSE 26053
// exit ;
26051: GO 26249
// case engine of engine_solar :
26053: LD_VAR 0 2
26057: PUSH
26058: LD_INT 2
26060: DOUBLE
26061: EQUAL
26062: IFTRUE 26066
26064: GO 26104
26066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26067: LD_ADDR_VAR 0 3
26071: PUSH
26072: LD_INT 11
26074: PUSH
26075: LD_INT 12
26077: PUSH
26078: LD_INT 13
26080: PUSH
26081: LD_INT 14
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: LD_INT 3
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: ST_TO_ADDR
26102: GO 26233
26104: LD_INT 1
26106: DOUBLE
26107: EQUAL
26108: IFTRUE 26112
26110: GO 26174
26112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26113: LD_ADDR_VAR 0 3
26117: PUSH
26118: LD_INT 11
26120: PUSH
26121: LD_INT 12
26123: PUSH
26124: LD_INT 13
26126: PUSH
26127: LD_INT 14
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: LD_INT 3
26138: PUSH
26139: LD_INT 4
26141: PUSH
26142: LD_INT 5
26144: PUSH
26145: LD_INT 21
26147: PUSH
26148: LD_INT 23
26150: PUSH
26151: LD_INT 22
26153: PUSH
26154: LD_INT 24
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: ST_TO_ADDR
26172: GO 26233
26174: LD_INT 3
26176: DOUBLE
26177: EQUAL
26178: IFTRUE 26182
26180: GO 26232
26182: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26183: LD_ADDR_VAR 0 3
26187: PUSH
26188: LD_INT 13
26190: PUSH
26191: LD_INT 14
26193: PUSH
26194: LD_INT 2
26196: PUSH
26197: LD_INT 3
26199: PUSH
26200: LD_INT 4
26202: PUSH
26203: LD_INT 5
26205: PUSH
26206: LD_INT 21
26208: PUSH
26209: LD_INT 22
26211: PUSH
26212: LD_INT 23
26214: PUSH
26215: LD_INT 24
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: ST_TO_ADDR
26230: GO 26233
26232: POP
// result := ( chassis in result ) ;
26233: LD_ADDR_VAR 0 3
26237: PUSH
26238: LD_VAR 0 1
26242: PUSH
26243: LD_VAR 0 3
26247: IN
26248: ST_TO_ADDR
// end ;
26249: LD_VAR 0 3
26253: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26254: LD_INT 0
26256: PPUSH
// if not chassis or not weapon then
26257: LD_VAR 0 1
26261: NOT
26262: PUSH
26263: LD_VAR 0 2
26267: NOT
26268: OR
26269: IFFALSE 26273
// exit ;
26271: GO 27299
// case weapon of us_machine_gun :
26273: LD_VAR 0 2
26277: PUSH
26278: LD_INT 2
26280: DOUBLE
26281: EQUAL
26282: IFTRUE 26286
26284: GO 26316
26286: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26287: LD_ADDR_VAR 0 3
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: LD_INT 2
26297: PUSH
26298: LD_INT 3
26300: PUSH
26301: LD_INT 4
26303: PUSH
26304: LD_INT 5
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: ST_TO_ADDR
26314: GO 27283
26316: LD_INT 3
26318: DOUBLE
26319: EQUAL
26320: IFTRUE 26324
26322: GO 26354
26324: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26325: LD_ADDR_VAR 0 3
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: LD_INT 3
26338: PUSH
26339: LD_INT 4
26341: PUSH
26342: LD_INT 5
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: ST_TO_ADDR
26352: GO 27283
26354: LD_INT 11
26356: DOUBLE
26357: EQUAL
26358: IFTRUE 26362
26360: GO 26392
26362: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26363: LD_ADDR_VAR 0 3
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: LD_INT 4
26379: PUSH
26380: LD_INT 5
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: ST_TO_ADDR
26390: GO 27283
26392: LD_INT 4
26394: DOUBLE
26395: EQUAL
26396: IFTRUE 26400
26398: GO 26426
26400: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26401: LD_ADDR_VAR 0 3
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: LD_INT 3
26411: PUSH
26412: LD_INT 4
26414: PUSH
26415: LD_INT 5
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: ST_TO_ADDR
26424: GO 27283
26426: LD_INT 5
26428: DOUBLE
26429: EQUAL
26430: IFTRUE 26434
26432: GO 26460
26434: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26435: LD_ADDR_VAR 0 3
26439: PUSH
26440: LD_INT 2
26442: PUSH
26443: LD_INT 3
26445: PUSH
26446: LD_INT 4
26448: PUSH
26449: LD_INT 5
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: ST_TO_ADDR
26458: GO 27283
26460: LD_INT 9
26462: DOUBLE
26463: EQUAL
26464: IFTRUE 26468
26466: GO 26494
26468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26469: LD_ADDR_VAR 0 3
26473: PUSH
26474: LD_INT 2
26476: PUSH
26477: LD_INT 3
26479: PUSH
26480: LD_INT 4
26482: PUSH
26483: LD_INT 5
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: ST_TO_ADDR
26492: GO 27283
26494: LD_INT 7
26496: DOUBLE
26497: EQUAL
26498: IFTRUE 26502
26500: GO 26528
26502: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26503: LD_ADDR_VAR 0 3
26507: PUSH
26508: LD_INT 2
26510: PUSH
26511: LD_INT 3
26513: PUSH
26514: LD_INT 4
26516: PUSH
26517: LD_INT 5
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: ST_TO_ADDR
26526: GO 27283
26528: LD_INT 12
26530: DOUBLE
26531: EQUAL
26532: IFTRUE 26536
26534: GO 26562
26536: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26537: LD_ADDR_VAR 0 3
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: LD_INT 3
26547: PUSH
26548: LD_INT 4
26550: PUSH
26551: LD_INT 5
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: ST_TO_ADDR
26560: GO 27283
26562: LD_INT 13
26564: DOUBLE
26565: EQUAL
26566: IFTRUE 26570
26568: GO 26596
26570: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26571: LD_ADDR_VAR 0 3
26575: PUSH
26576: LD_INT 2
26578: PUSH
26579: LD_INT 3
26581: PUSH
26582: LD_INT 4
26584: PUSH
26585: LD_INT 5
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: ST_TO_ADDR
26594: GO 27283
26596: LD_INT 14
26598: DOUBLE
26599: EQUAL
26600: IFTRUE 26604
26602: GO 26622
26604: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: LD_INT 4
26612: PUSH
26613: LD_INT 5
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: ST_TO_ADDR
26620: GO 27283
26622: LD_INT 6
26624: DOUBLE
26625: EQUAL
26626: IFTRUE 26630
26628: GO 26648
26630: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26631: LD_ADDR_VAR 0 3
26635: PUSH
26636: LD_INT 4
26638: PUSH
26639: LD_INT 5
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: ST_TO_ADDR
26646: GO 27283
26648: LD_INT 10
26650: DOUBLE
26651: EQUAL
26652: IFTRUE 26656
26654: GO 26674
26656: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26657: LD_ADDR_VAR 0 3
26661: PUSH
26662: LD_INT 4
26664: PUSH
26665: LD_INT 5
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: ST_TO_ADDR
26672: GO 27283
26674: LD_INT 22
26676: DOUBLE
26677: EQUAL
26678: IFTRUE 26682
26680: GO 26708
26682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26683: LD_ADDR_VAR 0 3
26687: PUSH
26688: LD_INT 11
26690: PUSH
26691: LD_INT 12
26693: PUSH
26694: LD_INT 13
26696: PUSH
26697: LD_INT 14
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: ST_TO_ADDR
26706: GO 27283
26708: LD_INT 23
26710: DOUBLE
26711: EQUAL
26712: IFTRUE 26716
26714: GO 26742
26716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26717: LD_ADDR_VAR 0 3
26721: PUSH
26722: LD_INT 11
26724: PUSH
26725: LD_INT 12
26727: PUSH
26728: LD_INT 13
26730: PUSH
26731: LD_INT 14
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: ST_TO_ADDR
26740: GO 27283
26742: LD_INT 24
26744: DOUBLE
26745: EQUAL
26746: IFTRUE 26750
26748: GO 26776
26750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26751: LD_ADDR_VAR 0 3
26755: PUSH
26756: LD_INT 11
26758: PUSH
26759: LD_INT 12
26761: PUSH
26762: LD_INT 13
26764: PUSH
26765: LD_INT 14
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: ST_TO_ADDR
26774: GO 27283
26776: LD_INT 30
26778: DOUBLE
26779: EQUAL
26780: IFTRUE 26784
26782: GO 26810
26784: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26785: LD_ADDR_VAR 0 3
26789: PUSH
26790: LD_INT 11
26792: PUSH
26793: LD_INT 12
26795: PUSH
26796: LD_INT 13
26798: PUSH
26799: LD_INT 14
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: ST_TO_ADDR
26808: GO 27283
26810: LD_INT 25
26812: DOUBLE
26813: EQUAL
26814: IFTRUE 26818
26816: GO 26836
26818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26819: LD_ADDR_VAR 0 3
26823: PUSH
26824: LD_INT 13
26826: PUSH
26827: LD_INT 14
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: ST_TO_ADDR
26834: GO 27283
26836: LD_INT 27
26838: DOUBLE
26839: EQUAL
26840: IFTRUE 26844
26842: GO 26862
26844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26845: LD_ADDR_VAR 0 3
26849: PUSH
26850: LD_INT 13
26852: PUSH
26853: LD_INT 14
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: ST_TO_ADDR
26860: GO 27283
26862: LD_INT 28
26864: DOUBLE
26865: EQUAL
26866: IFTRUE 26870
26868: GO 26888
26870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26871: LD_ADDR_VAR 0 3
26875: PUSH
26876: LD_INT 13
26878: PUSH
26879: LD_INT 14
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: ST_TO_ADDR
26886: GO 27283
26888: LD_INT 29
26890: DOUBLE
26891: EQUAL
26892: IFTRUE 26896
26894: GO 26914
26896: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26897: LD_ADDR_VAR 0 3
26901: PUSH
26902: LD_INT 13
26904: PUSH
26905: LD_INT 14
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: ST_TO_ADDR
26912: GO 27283
26914: LD_INT 31
26916: DOUBLE
26917: EQUAL
26918: IFTRUE 26922
26920: GO 26940
26922: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26923: LD_ADDR_VAR 0 3
26927: PUSH
26928: LD_INT 13
26930: PUSH
26931: LD_INT 14
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: ST_TO_ADDR
26938: GO 27283
26940: LD_INT 26
26942: DOUBLE
26943: EQUAL
26944: IFTRUE 26948
26946: GO 26966
26948: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26949: LD_ADDR_VAR 0 3
26953: PUSH
26954: LD_INT 13
26956: PUSH
26957: LD_INT 14
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: ST_TO_ADDR
26964: GO 27283
26966: LD_INT 42
26968: DOUBLE
26969: EQUAL
26970: IFTRUE 26974
26972: GO 27000
26974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26975: LD_ADDR_VAR 0 3
26979: PUSH
26980: LD_INT 21
26982: PUSH
26983: LD_INT 22
26985: PUSH
26986: LD_INT 23
26988: PUSH
26989: LD_INT 24
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: ST_TO_ADDR
26998: GO 27283
27000: LD_INT 43
27002: DOUBLE
27003: EQUAL
27004: IFTRUE 27008
27006: GO 27034
27008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27009: LD_ADDR_VAR 0 3
27013: PUSH
27014: LD_INT 21
27016: PUSH
27017: LD_INT 22
27019: PUSH
27020: LD_INT 23
27022: PUSH
27023: LD_INT 24
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: ST_TO_ADDR
27032: GO 27283
27034: LD_INT 44
27036: DOUBLE
27037: EQUAL
27038: IFTRUE 27042
27040: GO 27068
27042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27043: LD_ADDR_VAR 0 3
27047: PUSH
27048: LD_INT 21
27050: PUSH
27051: LD_INT 22
27053: PUSH
27054: LD_INT 23
27056: PUSH
27057: LD_INT 24
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: ST_TO_ADDR
27066: GO 27283
27068: LD_INT 45
27070: DOUBLE
27071: EQUAL
27072: IFTRUE 27076
27074: GO 27102
27076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27077: LD_ADDR_VAR 0 3
27081: PUSH
27082: LD_INT 21
27084: PUSH
27085: LD_INT 22
27087: PUSH
27088: LD_INT 23
27090: PUSH
27091: LD_INT 24
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: ST_TO_ADDR
27100: GO 27283
27102: LD_INT 49
27104: DOUBLE
27105: EQUAL
27106: IFTRUE 27110
27108: GO 27136
27110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27111: LD_ADDR_VAR 0 3
27115: PUSH
27116: LD_INT 21
27118: PUSH
27119: LD_INT 22
27121: PUSH
27122: LD_INT 23
27124: PUSH
27125: LD_INT 24
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: ST_TO_ADDR
27134: GO 27283
27136: LD_INT 51
27138: DOUBLE
27139: EQUAL
27140: IFTRUE 27144
27142: GO 27170
27144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27145: LD_ADDR_VAR 0 3
27149: PUSH
27150: LD_INT 21
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_INT 23
27158: PUSH
27159: LD_INT 24
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: ST_TO_ADDR
27168: GO 27283
27170: LD_INT 52
27172: DOUBLE
27173: EQUAL
27174: IFTRUE 27178
27176: GO 27204
27178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27179: LD_ADDR_VAR 0 3
27183: PUSH
27184: LD_INT 21
27186: PUSH
27187: LD_INT 22
27189: PUSH
27190: LD_INT 23
27192: PUSH
27193: LD_INT 24
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: ST_TO_ADDR
27202: GO 27283
27204: LD_INT 53
27206: DOUBLE
27207: EQUAL
27208: IFTRUE 27212
27210: GO 27230
27212: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27213: LD_ADDR_VAR 0 3
27217: PUSH
27218: LD_INT 23
27220: PUSH
27221: LD_INT 24
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: ST_TO_ADDR
27228: GO 27283
27230: LD_INT 46
27232: DOUBLE
27233: EQUAL
27234: IFTRUE 27238
27236: GO 27256
27238: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27239: LD_ADDR_VAR 0 3
27243: PUSH
27244: LD_INT 23
27246: PUSH
27247: LD_INT 24
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: ST_TO_ADDR
27254: GO 27283
27256: LD_INT 47
27258: DOUBLE
27259: EQUAL
27260: IFTRUE 27264
27262: GO 27282
27264: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27265: LD_ADDR_VAR 0 3
27269: PUSH
27270: LD_INT 23
27272: PUSH
27273: LD_INT 24
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: ST_TO_ADDR
27280: GO 27283
27282: POP
// result := ( chassis in result ) ;
27283: LD_ADDR_VAR 0 3
27287: PUSH
27288: LD_VAR 0 1
27292: PUSH
27293: LD_VAR 0 3
27297: IN
27298: ST_TO_ADDR
// end ;
27299: LD_VAR 0 3
27303: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27304: LD_INT 0
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
// result := array ;
27313: LD_ADDR_VAR 0 5
27317: PUSH
27318: LD_VAR 0 1
27322: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27323: LD_VAR 0 1
27327: NOT
27328: PUSH
27329: LD_VAR 0 2
27333: NOT
27334: OR
27335: PUSH
27336: LD_VAR 0 3
27340: NOT
27341: OR
27342: PUSH
27343: LD_VAR 0 2
27347: PUSH
27348: LD_VAR 0 1
27352: GREATER
27353: OR
27354: PUSH
27355: LD_VAR 0 3
27359: PUSH
27360: LD_VAR 0 1
27364: GREATER
27365: OR
27366: IFFALSE 27370
// exit ;
27368: GO 27666
// if direction then
27370: LD_VAR 0 4
27374: IFFALSE 27438
// begin d := 1 ;
27376: LD_ADDR_VAR 0 9
27380: PUSH
27381: LD_INT 1
27383: ST_TO_ADDR
// if i_from > i_to then
27384: LD_VAR 0 2
27388: PUSH
27389: LD_VAR 0 3
27393: GREATER
27394: IFFALSE 27420
// length := ( array - i_from ) + i_to else
27396: LD_ADDR_VAR 0 11
27400: PUSH
27401: LD_VAR 0 1
27405: PUSH
27406: LD_VAR 0 2
27410: MINUS
27411: PUSH
27412: LD_VAR 0 3
27416: PLUS
27417: ST_TO_ADDR
27418: GO 27436
// length := i_to - i_from ;
27420: LD_ADDR_VAR 0 11
27424: PUSH
27425: LD_VAR 0 3
27429: PUSH
27430: LD_VAR 0 2
27434: MINUS
27435: ST_TO_ADDR
// end else
27436: GO 27499
// begin d := - 1 ;
27438: LD_ADDR_VAR 0 9
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: ST_TO_ADDR
// if i_from > i_to then
27447: LD_VAR 0 2
27451: PUSH
27452: LD_VAR 0 3
27456: GREATER
27457: IFFALSE 27477
// length := i_from - i_to else
27459: LD_ADDR_VAR 0 11
27463: PUSH
27464: LD_VAR 0 2
27468: PUSH
27469: LD_VAR 0 3
27473: MINUS
27474: ST_TO_ADDR
27475: GO 27499
// length := ( array - i_to ) + i_from ;
27477: LD_ADDR_VAR 0 11
27481: PUSH
27482: LD_VAR 0 1
27486: PUSH
27487: LD_VAR 0 3
27491: MINUS
27492: PUSH
27493: LD_VAR 0 2
27497: PLUS
27498: ST_TO_ADDR
// end ; if not length then
27499: LD_VAR 0 11
27503: NOT
27504: IFFALSE 27508
// exit ;
27506: GO 27666
// tmp := array ;
27508: LD_ADDR_VAR 0 10
27512: PUSH
27513: LD_VAR 0 1
27517: ST_TO_ADDR
// for i = 1 to length do
27518: LD_ADDR_VAR 0 6
27522: PUSH
27523: DOUBLE
27524: LD_INT 1
27526: DEC
27527: ST_TO_ADDR
27528: LD_VAR 0 11
27532: PUSH
27533: FOR_TO
27534: IFFALSE 27654
// begin for j = 1 to array do
27536: LD_ADDR_VAR 0 7
27540: PUSH
27541: DOUBLE
27542: LD_INT 1
27544: DEC
27545: ST_TO_ADDR
27546: LD_VAR 0 1
27550: PUSH
27551: FOR_TO
27552: IFFALSE 27640
// begin k := j + d ;
27554: LD_ADDR_VAR 0 8
27558: PUSH
27559: LD_VAR 0 7
27563: PUSH
27564: LD_VAR 0 9
27568: PLUS
27569: ST_TO_ADDR
// if k > array then
27570: LD_VAR 0 8
27574: PUSH
27575: LD_VAR 0 1
27579: GREATER
27580: IFFALSE 27590
// k := 1 ;
27582: LD_ADDR_VAR 0 8
27586: PUSH
27587: LD_INT 1
27589: ST_TO_ADDR
// if not k then
27590: LD_VAR 0 8
27594: NOT
27595: IFFALSE 27607
// k := array ;
27597: LD_ADDR_VAR 0 8
27601: PUSH
27602: LD_VAR 0 1
27606: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27607: LD_ADDR_VAR 0 10
27611: PUSH
27612: LD_VAR 0 10
27616: PPUSH
27617: LD_VAR 0 8
27621: PPUSH
27622: LD_VAR 0 1
27626: PUSH
27627: LD_VAR 0 7
27631: ARRAY
27632: PPUSH
27633: CALL_OW 1
27637: ST_TO_ADDR
// end ;
27638: GO 27551
27640: POP
27641: POP
// array := tmp ;
27642: LD_ADDR_VAR 0 1
27646: PUSH
27647: LD_VAR 0 10
27651: ST_TO_ADDR
// end ;
27652: GO 27533
27654: POP
27655: POP
// result := array ;
27656: LD_ADDR_VAR 0 5
27660: PUSH
27661: LD_VAR 0 1
27665: ST_TO_ADDR
// end ;
27666: LD_VAR 0 5
27670: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27671: LD_INT 0
27673: PPUSH
27674: PPUSH
// result := 0 ;
27675: LD_ADDR_VAR 0 3
27679: PUSH
27680: LD_INT 0
27682: ST_TO_ADDR
// if not array or not value in array then
27683: LD_VAR 0 1
27687: NOT
27688: PUSH
27689: LD_VAR 0 2
27693: PUSH
27694: LD_VAR 0 1
27698: IN
27699: NOT
27700: OR
27701: IFFALSE 27705
// exit ;
27703: GO 27759
// for i = 1 to array do
27705: LD_ADDR_VAR 0 4
27709: PUSH
27710: DOUBLE
27711: LD_INT 1
27713: DEC
27714: ST_TO_ADDR
27715: LD_VAR 0 1
27719: PUSH
27720: FOR_TO
27721: IFFALSE 27757
// if value = array [ i ] then
27723: LD_VAR 0 2
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_VAR 0 4
27737: ARRAY
27738: EQUAL
27739: IFFALSE 27755
// begin result := i ;
27741: LD_ADDR_VAR 0 3
27745: PUSH
27746: LD_VAR 0 4
27750: ST_TO_ADDR
// exit ;
27751: POP
27752: POP
27753: GO 27759
// end ;
27755: GO 27720
27757: POP
27758: POP
// end ;
27759: LD_VAR 0 3
27763: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27764: LD_INT 0
27766: PPUSH
// vc_chassis := chassis ;
27767: LD_ADDR_OWVAR 37
27771: PUSH
27772: LD_VAR 0 1
27776: ST_TO_ADDR
// vc_engine := engine ;
27777: LD_ADDR_OWVAR 39
27781: PUSH
27782: LD_VAR 0 2
27786: ST_TO_ADDR
// vc_control := control ;
27787: LD_ADDR_OWVAR 38
27791: PUSH
27792: LD_VAR 0 3
27796: ST_TO_ADDR
// vc_weapon := weapon ;
27797: LD_ADDR_OWVAR 40
27801: PUSH
27802: LD_VAR 0 4
27806: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27807: LD_ADDR_OWVAR 41
27811: PUSH
27812: LD_VAR 0 5
27816: ST_TO_ADDR
// end ;
27817: LD_VAR 0 6
27821: RET
// export function WantPlant ( unit ) ; var task ; begin
27822: LD_INT 0
27824: PPUSH
27825: PPUSH
// result := false ;
27826: LD_ADDR_VAR 0 2
27830: PUSH
27831: LD_INT 0
27833: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27834: LD_ADDR_VAR 0 3
27838: PUSH
27839: LD_VAR 0 1
27843: PPUSH
27844: CALL_OW 437
27848: ST_TO_ADDR
// if task then
27849: LD_VAR 0 3
27853: IFFALSE 27881
// if task [ 1 ] [ 1 ] = p then
27855: LD_VAR 0 3
27859: PUSH
27860: LD_INT 1
27862: ARRAY
27863: PUSH
27864: LD_INT 1
27866: ARRAY
27867: PUSH
27868: LD_STRING p
27870: EQUAL
27871: IFFALSE 27881
// result := true ;
27873: LD_ADDR_VAR 0 2
27877: PUSH
27878: LD_INT 1
27880: ST_TO_ADDR
// end ;
27881: LD_VAR 0 2
27885: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27886: LD_INT 0
27888: PPUSH
27889: PPUSH
27890: PPUSH
27891: PPUSH
// if pos < 1 then
27892: LD_VAR 0 2
27896: PUSH
27897: LD_INT 1
27899: LESS
27900: IFFALSE 27904
// exit ;
27902: GO 28207
// if pos = 1 then
27904: LD_VAR 0 2
27908: PUSH
27909: LD_INT 1
27911: EQUAL
27912: IFFALSE 27945
// result := Replace ( arr , pos [ 1 ] , value ) else
27914: LD_ADDR_VAR 0 4
27918: PUSH
27919: LD_VAR 0 1
27923: PPUSH
27924: LD_VAR 0 2
27928: PUSH
27929: LD_INT 1
27931: ARRAY
27932: PPUSH
27933: LD_VAR 0 3
27937: PPUSH
27938: CALL_OW 1
27942: ST_TO_ADDR
27943: GO 28207
// begin tmp := arr ;
27945: LD_ADDR_VAR 0 6
27949: PUSH
27950: LD_VAR 0 1
27954: ST_TO_ADDR
// s_arr := [ tmp ] ;
27955: LD_ADDR_VAR 0 7
27959: PUSH
27960: LD_VAR 0 6
27964: PUSH
27965: EMPTY
27966: LIST
27967: ST_TO_ADDR
// for i = 1 to pos - 1 do
27968: LD_ADDR_VAR 0 5
27972: PUSH
27973: DOUBLE
27974: LD_INT 1
27976: DEC
27977: ST_TO_ADDR
27978: LD_VAR 0 2
27982: PUSH
27983: LD_INT 1
27985: MINUS
27986: PUSH
27987: FOR_TO
27988: IFFALSE 28033
// begin tmp := tmp [ pos [ i ] ] ;
27990: LD_ADDR_VAR 0 6
27994: PUSH
27995: LD_VAR 0 6
27999: PUSH
28000: LD_VAR 0 2
28004: PUSH
28005: LD_VAR 0 5
28009: ARRAY
28010: ARRAY
28011: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28012: LD_ADDR_VAR 0 7
28016: PUSH
28017: LD_VAR 0 7
28021: PUSH
28022: LD_VAR 0 6
28026: PUSH
28027: EMPTY
28028: LIST
28029: ADD
28030: ST_TO_ADDR
// end ;
28031: GO 27987
28033: POP
28034: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28035: LD_ADDR_VAR 0 6
28039: PUSH
28040: LD_VAR 0 6
28044: PPUSH
28045: LD_VAR 0 2
28049: PUSH
28050: LD_VAR 0 2
28054: ARRAY
28055: PPUSH
28056: LD_VAR 0 3
28060: PPUSH
28061: CALL_OW 1
28065: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28066: LD_ADDR_VAR 0 7
28070: PUSH
28071: LD_VAR 0 7
28075: PPUSH
28076: LD_VAR 0 7
28080: PPUSH
28081: LD_VAR 0 6
28085: PPUSH
28086: CALL_OW 1
28090: ST_TO_ADDR
// for i = s_arr downto 2 do
28091: LD_ADDR_VAR 0 5
28095: PUSH
28096: DOUBLE
28097: LD_VAR 0 7
28101: INC
28102: ST_TO_ADDR
28103: LD_INT 2
28105: PUSH
28106: FOR_DOWNTO
28107: IFFALSE 28191
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28109: LD_ADDR_VAR 0 6
28113: PUSH
28114: LD_VAR 0 7
28118: PUSH
28119: LD_VAR 0 5
28123: PUSH
28124: LD_INT 1
28126: MINUS
28127: ARRAY
28128: PPUSH
28129: LD_VAR 0 2
28133: PUSH
28134: LD_VAR 0 5
28138: PUSH
28139: LD_INT 1
28141: MINUS
28142: ARRAY
28143: PPUSH
28144: LD_VAR 0 7
28148: PUSH
28149: LD_VAR 0 5
28153: ARRAY
28154: PPUSH
28155: CALL_OW 1
28159: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28160: LD_ADDR_VAR 0 7
28164: PUSH
28165: LD_VAR 0 7
28169: PPUSH
28170: LD_VAR 0 5
28174: PUSH
28175: LD_INT 1
28177: MINUS
28178: PPUSH
28179: LD_VAR 0 6
28183: PPUSH
28184: CALL_OW 1
28188: ST_TO_ADDR
// end ;
28189: GO 28106
28191: POP
28192: POP
// result := s_arr [ 1 ] ;
28193: LD_ADDR_VAR 0 4
28197: PUSH
28198: LD_VAR 0 7
28202: PUSH
28203: LD_INT 1
28205: ARRAY
28206: ST_TO_ADDR
// end ; end ;
28207: LD_VAR 0 4
28211: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28212: LD_INT 0
28214: PPUSH
28215: PPUSH
// if not list then
28216: LD_VAR 0 1
28220: NOT
28221: IFFALSE 28225
// exit ;
28223: GO 28316
// i := list [ pos1 ] ;
28225: LD_ADDR_VAR 0 5
28229: PUSH
28230: LD_VAR 0 1
28234: PUSH
28235: LD_VAR 0 2
28239: ARRAY
28240: ST_TO_ADDR
// if not i then
28241: LD_VAR 0 5
28245: NOT
28246: IFFALSE 28250
// exit ;
28248: GO 28316
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28250: LD_ADDR_VAR 0 1
28254: PUSH
28255: LD_VAR 0 1
28259: PPUSH
28260: LD_VAR 0 2
28264: PPUSH
28265: LD_VAR 0 1
28269: PUSH
28270: LD_VAR 0 3
28274: ARRAY
28275: PPUSH
28276: CALL_OW 1
28280: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28281: LD_ADDR_VAR 0 1
28285: PUSH
28286: LD_VAR 0 1
28290: PPUSH
28291: LD_VAR 0 3
28295: PPUSH
28296: LD_VAR 0 5
28300: PPUSH
28301: CALL_OW 1
28305: ST_TO_ADDR
// result := list ;
28306: LD_ADDR_VAR 0 4
28310: PUSH
28311: LD_VAR 0 1
28315: ST_TO_ADDR
// end ;
28316: LD_VAR 0 4
28320: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28321: LD_INT 0
28323: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28324: LD_ADDR_VAR 0 5
28328: PUSH
28329: LD_VAR 0 1
28333: PPUSH
28334: CALL_OW 250
28338: PPUSH
28339: LD_VAR 0 1
28343: PPUSH
28344: CALL_OW 251
28348: PPUSH
28349: LD_VAR 0 2
28353: PPUSH
28354: LD_VAR 0 3
28358: PPUSH
28359: LD_VAR 0 4
28363: PPUSH
28364: CALL 28374 0 5
28368: ST_TO_ADDR
// end ;
28369: LD_VAR 0 5
28373: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28374: LD_INT 0
28376: PPUSH
28377: PPUSH
28378: PPUSH
28379: PPUSH
// if not list then
28380: LD_VAR 0 3
28384: NOT
28385: IFFALSE 28389
// exit ;
28387: GO 28777
// result := [ ] ;
28389: LD_ADDR_VAR 0 6
28393: PUSH
28394: EMPTY
28395: ST_TO_ADDR
// for i in list do
28396: LD_ADDR_VAR 0 7
28400: PUSH
28401: LD_VAR 0 3
28405: PUSH
28406: FOR_IN
28407: IFFALSE 28609
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28409: LD_ADDR_VAR 0 9
28413: PUSH
28414: LD_VAR 0 7
28418: PPUSH
28419: LD_VAR 0 1
28423: PPUSH
28424: LD_VAR 0 2
28428: PPUSH
28429: CALL_OW 297
28433: ST_TO_ADDR
// if not result then
28434: LD_VAR 0 6
28438: NOT
28439: IFFALSE 28465
// result := [ [ i , tmp ] ] else
28441: LD_ADDR_VAR 0 6
28445: PUSH
28446: LD_VAR 0 7
28450: PUSH
28451: LD_VAR 0 9
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: EMPTY
28461: LIST
28462: ST_TO_ADDR
28463: GO 28607
// begin if result [ result ] [ 2 ] < tmp then
28465: LD_VAR 0 6
28469: PUSH
28470: LD_VAR 0 6
28474: ARRAY
28475: PUSH
28476: LD_INT 2
28478: ARRAY
28479: PUSH
28480: LD_VAR 0 9
28484: LESS
28485: IFFALSE 28527
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28487: LD_ADDR_VAR 0 6
28491: PUSH
28492: LD_VAR 0 6
28496: PPUSH
28497: LD_VAR 0 6
28501: PUSH
28502: LD_INT 1
28504: PLUS
28505: PPUSH
28506: LD_VAR 0 7
28510: PUSH
28511: LD_VAR 0 9
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PPUSH
28520: CALL_OW 2
28524: ST_TO_ADDR
28525: GO 28607
// for j = 1 to result do
28527: LD_ADDR_VAR 0 8
28531: PUSH
28532: DOUBLE
28533: LD_INT 1
28535: DEC
28536: ST_TO_ADDR
28537: LD_VAR 0 6
28541: PUSH
28542: FOR_TO
28543: IFFALSE 28605
// begin if tmp < result [ j ] [ 2 ] then
28545: LD_VAR 0 9
28549: PUSH
28550: LD_VAR 0 6
28554: PUSH
28555: LD_VAR 0 8
28559: ARRAY
28560: PUSH
28561: LD_INT 2
28563: ARRAY
28564: LESS
28565: IFFALSE 28603
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28567: LD_ADDR_VAR 0 6
28571: PUSH
28572: LD_VAR 0 6
28576: PPUSH
28577: LD_VAR 0 8
28581: PPUSH
28582: LD_VAR 0 7
28586: PUSH
28587: LD_VAR 0 9
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PPUSH
28596: CALL_OW 2
28600: ST_TO_ADDR
// break ;
28601: GO 28605
// end ; end ;
28603: GO 28542
28605: POP
28606: POP
// end ; end ;
28607: GO 28406
28609: POP
28610: POP
// if result and not asc then
28611: LD_VAR 0 6
28615: PUSH
28616: LD_VAR 0 4
28620: NOT
28621: AND
28622: IFFALSE 28697
// begin tmp := result ;
28624: LD_ADDR_VAR 0 9
28628: PUSH
28629: LD_VAR 0 6
28633: ST_TO_ADDR
// for i = tmp downto 1 do
28634: LD_ADDR_VAR 0 7
28638: PUSH
28639: DOUBLE
28640: LD_VAR 0 9
28644: INC
28645: ST_TO_ADDR
28646: LD_INT 1
28648: PUSH
28649: FOR_DOWNTO
28650: IFFALSE 28695
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28652: LD_ADDR_VAR 0 6
28656: PUSH
28657: LD_VAR 0 6
28661: PPUSH
28662: LD_VAR 0 9
28666: PUSH
28667: LD_VAR 0 7
28671: MINUS
28672: PUSH
28673: LD_INT 1
28675: PLUS
28676: PPUSH
28677: LD_VAR 0 9
28681: PUSH
28682: LD_VAR 0 7
28686: ARRAY
28687: PPUSH
28688: CALL_OW 1
28692: ST_TO_ADDR
28693: GO 28649
28695: POP
28696: POP
// end ; tmp := [ ] ;
28697: LD_ADDR_VAR 0 9
28701: PUSH
28702: EMPTY
28703: ST_TO_ADDR
// if mode then
28704: LD_VAR 0 5
28708: IFFALSE 28777
// begin for i = 1 to result do
28710: LD_ADDR_VAR 0 7
28714: PUSH
28715: DOUBLE
28716: LD_INT 1
28718: DEC
28719: ST_TO_ADDR
28720: LD_VAR 0 6
28724: PUSH
28725: FOR_TO
28726: IFFALSE 28765
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28728: LD_ADDR_VAR 0 9
28732: PUSH
28733: LD_VAR 0 9
28737: PPUSH
28738: LD_VAR 0 7
28742: PPUSH
28743: LD_VAR 0 6
28747: PUSH
28748: LD_VAR 0 7
28752: ARRAY
28753: PUSH
28754: LD_INT 1
28756: ARRAY
28757: PPUSH
28758: CALL_OW 1
28762: ST_TO_ADDR
28763: GO 28725
28765: POP
28766: POP
// result := tmp ;
28767: LD_ADDR_VAR 0 6
28771: PUSH
28772: LD_VAR 0 9
28776: ST_TO_ADDR
// end ; end ;
28777: LD_VAR 0 6
28781: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28782: LD_INT 0
28784: PPUSH
28785: PPUSH
28786: PPUSH
28787: PPUSH
28788: PPUSH
28789: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28790: LD_ADDR_VAR 0 5
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: EMPTY
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: ST_TO_ADDR
// if not x or not y then
28812: LD_VAR 0 2
28816: NOT
28817: PUSH
28818: LD_VAR 0 3
28822: NOT
28823: OR
28824: IFFALSE 28828
// exit ;
28826: GO 30474
// if not range then
28828: LD_VAR 0 4
28832: NOT
28833: IFFALSE 28843
// range := 10 ;
28835: LD_ADDR_VAR 0 4
28839: PUSH
28840: LD_INT 10
28842: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28843: LD_ADDR_VAR 0 8
28847: PUSH
28848: LD_INT 81
28850: PUSH
28851: LD_VAR 0 1
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 92
28862: PUSH
28863: LD_VAR 0 2
28867: PUSH
28868: LD_VAR 0 3
28872: PUSH
28873: LD_VAR 0 4
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 3
28886: PUSH
28887: LD_INT 21
28889: PUSH
28890: LD_INT 3
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 69
28910: ST_TO_ADDR
// if not tmp then
28911: LD_VAR 0 8
28915: NOT
28916: IFFALSE 28920
// exit ;
28918: GO 30474
// for i in tmp do
28920: LD_ADDR_VAR 0 6
28924: PUSH
28925: LD_VAR 0 8
28929: PUSH
28930: FOR_IN
28931: IFFALSE 30449
// begin points := [ 0 , 0 , 0 ] ;
28933: LD_ADDR_VAR 0 9
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: LD_INT 0
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: LIST
28951: ST_TO_ADDR
// bpoints := 1 ;
28952: LD_ADDR_VAR 0 10
28956: PUSH
28957: LD_INT 1
28959: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28960: LD_VAR 0 6
28964: PPUSH
28965: CALL_OW 247
28969: PUSH
28970: LD_INT 1
28972: DOUBLE
28973: EQUAL
28974: IFTRUE 28978
28976: GO 29556
28978: POP
// begin if GetClass ( i ) = 1 then
28979: LD_VAR 0 6
28983: PPUSH
28984: CALL_OW 257
28988: PUSH
28989: LD_INT 1
28991: EQUAL
28992: IFFALSE 29013
// points := [ 10 , 5 , 3 ] ;
28994: LD_ADDR_VAR 0 9
28998: PUSH
28999: LD_INT 10
29001: PUSH
29002: LD_INT 5
29004: PUSH
29005: LD_INT 3
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: LIST
29012: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29013: LD_VAR 0 6
29017: PPUSH
29018: CALL_OW 257
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 4
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: LIST
29036: IN
29037: IFFALSE 29058
// points := [ 3 , 2 , 1 ] ;
29039: LD_ADDR_VAR 0 9
29043: PUSH
29044: LD_INT 3
29046: PUSH
29047: LD_INT 2
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29058: LD_VAR 0 6
29062: PPUSH
29063: CALL_OW 257
29067: PUSH
29068: LD_INT 5
29070: EQUAL
29071: IFFALSE 29092
// points := [ 130 , 5 , 2 ] ;
29073: LD_ADDR_VAR 0 9
29077: PUSH
29078: LD_INT 130
29080: PUSH
29081: LD_INT 5
29083: PUSH
29084: LD_INT 2
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: LIST
29091: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29092: LD_VAR 0 6
29096: PPUSH
29097: CALL_OW 257
29101: PUSH
29102: LD_INT 8
29104: EQUAL
29105: IFFALSE 29126
// points := [ 35 , 35 , 30 ] ;
29107: LD_ADDR_VAR 0 9
29111: PUSH
29112: LD_INT 35
29114: PUSH
29115: LD_INT 35
29117: PUSH
29118: LD_INT 30
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: LIST
29125: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29126: LD_VAR 0 6
29130: PPUSH
29131: CALL_OW 257
29135: PUSH
29136: LD_INT 9
29138: EQUAL
29139: IFFALSE 29160
// points := [ 20 , 55 , 40 ] ;
29141: LD_ADDR_VAR 0 9
29145: PUSH
29146: LD_INT 20
29148: PUSH
29149: LD_INT 55
29151: PUSH
29152: LD_INT 40
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: LIST
29159: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29160: LD_VAR 0 6
29164: PPUSH
29165: CALL_OW 257
29169: PUSH
29170: LD_INT 12
29172: PUSH
29173: LD_INT 16
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: IN
29180: IFFALSE 29201
// points := [ 5 , 3 , 2 ] ;
29182: LD_ADDR_VAR 0 9
29186: PUSH
29187: LD_INT 5
29189: PUSH
29190: LD_INT 3
29192: PUSH
29193: LD_INT 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: LIST
29200: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29201: LD_VAR 0 6
29205: PPUSH
29206: CALL_OW 257
29210: PUSH
29211: LD_INT 17
29213: EQUAL
29214: IFFALSE 29235
// points := [ 100 , 50 , 75 ] ;
29216: LD_ADDR_VAR 0 9
29220: PUSH
29221: LD_INT 100
29223: PUSH
29224: LD_INT 50
29226: PUSH
29227: LD_INT 75
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29235: LD_VAR 0 6
29239: PPUSH
29240: CALL_OW 257
29244: PUSH
29245: LD_INT 15
29247: EQUAL
29248: IFFALSE 29269
// points := [ 10 , 5 , 3 ] ;
29250: LD_ADDR_VAR 0 9
29254: PUSH
29255: LD_INT 10
29257: PUSH
29258: LD_INT 5
29260: PUSH
29261: LD_INT 3
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29269: LD_VAR 0 6
29273: PPUSH
29274: CALL_OW 257
29278: PUSH
29279: LD_INT 14
29281: EQUAL
29282: IFFALSE 29303
// points := [ 10 , 0 , 0 ] ;
29284: LD_ADDR_VAR 0 9
29288: PUSH
29289: LD_INT 10
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: LD_INT 0
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29303: LD_VAR 0 6
29307: PPUSH
29308: CALL_OW 257
29312: PUSH
29313: LD_INT 11
29315: EQUAL
29316: IFFALSE 29337
// points := [ 30 , 10 , 5 ] ;
29318: LD_ADDR_VAR 0 9
29322: PUSH
29323: LD_INT 30
29325: PUSH
29326: LD_INT 10
29328: PUSH
29329: LD_INT 5
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29337: LD_VAR 0 1
29341: PPUSH
29342: LD_INT 5
29344: PPUSH
29345: CALL_OW 321
29349: PUSH
29350: LD_INT 2
29352: EQUAL
29353: IFFALSE 29370
// bpoints := bpoints * 1.8 ;
29355: LD_ADDR_VAR 0 10
29359: PUSH
29360: LD_VAR 0 10
29364: PUSH
29365: LD_REAL  1.80000000000000E+0000
29368: MUL
29369: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29370: LD_VAR 0 6
29374: PPUSH
29375: CALL_OW 257
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 3
29388: PUSH
29389: LD_INT 4
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: IN
29398: PUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: LD_INT 51
29406: PPUSH
29407: CALL_OW 321
29411: PUSH
29412: LD_INT 2
29414: EQUAL
29415: AND
29416: IFFALSE 29433
// bpoints := bpoints * 1.2 ;
29418: LD_ADDR_VAR 0 10
29422: PUSH
29423: LD_VAR 0 10
29427: PUSH
29428: LD_REAL  1.20000000000000E+0000
29431: MUL
29432: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29433: LD_VAR 0 6
29437: PPUSH
29438: CALL_OW 257
29442: PUSH
29443: LD_INT 5
29445: PUSH
29446: LD_INT 7
29448: PUSH
29449: LD_INT 9
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: LIST
29456: IN
29457: PUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: LD_INT 52
29465: PPUSH
29466: CALL_OW 321
29470: PUSH
29471: LD_INT 2
29473: EQUAL
29474: AND
29475: IFFALSE 29492
// bpoints := bpoints * 1.5 ;
29477: LD_ADDR_VAR 0 10
29481: PUSH
29482: LD_VAR 0 10
29486: PUSH
29487: LD_REAL  1.50000000000000E+0000
29490: MUL
29491: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29492: LD_VAR 0 1
29496: PPUSH
29497: LD_INT 66
29499: PPUSH
29500: CALL_OW 321
29504: PUSH
29505: LD_INT 2
29507: EQUAL
29508: IFFALSE 29525
// bpoints := bpoints * 1.1 ;
29510: LD_ADDR_VAR 0 10
29514: PUSH
29515: LD_VAR 0 10
29519: PUSH
29520: LD_REAL  1.10000000000000E+0000
29523: MUL
29524: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29525: LD_ADDR_VAR 0 10
29529: PUSH
29530: LD_VAR 0 10
29534: PUSH
29535: LD_VAR 0 6
29539: PPUSH
29540: LD_INT 1
29542: PPUSH
29543: CALL_OW 259
29547: PUSH
29548: LD_REAL  1.15000000000000E+0000
29551: MUL
29552: MUL
29553: ST_TO_ADDR
// end ; unit_vehicle :
29554: GO 30378
29556: LD_INT 2
29558: DOUBLE
29559: EQUAL
29560: IFTRUE 29564
29562: GO 30366
29564: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29565: LD_VAR 0 6
29569: PPUSH
29570: CALL_OW 264
29574: PUSH
29575: LD_INT 2
29577: PUSH
29578: LD_INT 42
29580: PUSH
29581: LD_INT 24
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: IN
29589: IFFALSE 29610
// points := [ 25 , 5 , 3 ] ;
29591: LD_ADDR_VAR 0 9
29595: PUSH
29596: LD_INT 25
29598: PUSH
29599: LD_INT 5
29601: PUSH
29602: LD_INT 3
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: LIST
29609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29610: LD_VAR 0 6
29614: PPUSH
29615: CALL_OW 264
29619: PUSH
29620: LD_INT 4
29622: PUSH
29623: LD_INT 43
29625: PUSH
29626: LD_INT 25
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: IN
29634: IFFALSE 29655
// points := [ 40 , 15 , 5 ] ;
29636: LD_ADDR_VAR 0 9
29640: PUSH
29641: LD_INT 40
29643: PUSH
29644: LD_INT 15
29646: PUSH
29647: LD_INT 5
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29655: LD_VAR 0 6
29659: PPUSH
29660: CALL_OW 264
29664: PUSH
29665: LD_INT 3
29667: PUSH
29668: LD_INT 23
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: IN
29675: IFFALSE 29696
// points := [ 7 , 25 , 8 ] ;
29677: LD_ADDR_VAR 0 9
29681: PUSH
29682: LD_INT 7
29684: PUSH
29685: LD_INT 25
29687: PUSH
29688: LD_INT 8
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29696: LD_VAR 0 6
29700: PPUSH
29701: CALL_OW 264
29705: PUSH
29706: LD_INT 5
29708: PUSH
29709: LD_INT 27
29711: PUSH
29712: LD_INT 44
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: LIST
29719: IN
29720: IFFALSE 29741
// points := [ 14 , 50 , 16 ] ;
29722: LD_ADDR_VAR 0 9
29726: PUSH
29727: LD_INT 14
29729: PUSH
29730: LD_INT 50
29732: PUSH
29733: LD_INT 16
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29741: LD_VAR 0 6
29745: PPUSH
29746: CALL_OW 264
29750: PUSH
29751: LD_INT 6
29753: PUSH
29754: LD_INT 46
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: IN
29761: IFFALSE 29782
// points := [ 32 , 120 , 70 ] ;
29763: LD_ADDR_VAR 0 9
29767: PUSH
29768: LD_INT 32
29770: PUSH
29771: LD_INT 120
29773: PUSH
29774: LD_INT 70
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: LIST
29781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
29782: LD_VAR 0 6
29786: PPUSH
29787: CALL_OW 264
29791: PUSH
29792: LD_INT 7
29794: PUSH
29795: LD_INT 28
29797: PUSH
29798: LD_INT 45
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: LIST
29805: IN
29806: IFFALSE 29827
// points := [ 35 , 20 , 45 ] ;
29808: LD_ADDR_VAR 0 9
29812: PUSH
29813: LD_INT 35
29815: PUSH
29816: LD_INT 20
29818: PUSH
29819: LD_INT 45
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29827: LD_VAR 0 6
29831: PPUSH
29832: CALL_OW 264
29836: PUSH
29837: LD_INT 47
29839: PUSH
29840: EMPTY
29841: LIST
29842: IN
29843: IFFALSE 29864
// points := [ 67 , 45 , 75 ] ;
29845: LD_ADDR_VAR 0 9
29849: PUSH
29850: LD_INT 67
29852: PUSH
29853: LD_INT 45
29855: PUSH
29856: LD_INT 75
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29864: LD_VAR 0 6
29868: PPUSH
29869: CALL_OW 264
29873: PUSH
29874: LD_INT 26
29876: PUSH
29877: EMPTY
29878: LIST
29879: IN
29880: IFFALSE 29901
// points := [ 120 , 30 , 80 ] ;
29882: LD_ADDR_VAR 0 9
29886: PUSH
29887: LD_INT 120
29889: PUSH
29890: LD_INT 30
29892: PUSH
29893: LD_INT 80
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29901: LD_VAR 0 6
29905: PPUSH
29906: CALL_OW 264
29910: PUSH
29911: LD_INT 22
29913: PUSH
29914: EMPTY
29915: LIST
29916: IN
29917: IFFALSE 29938
// points := [ 40 , 1 , 1 ] ;
29919: LD_ADDR_VAR 0 9
29923: PUSH
29924: LD_INT 40
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29938: LD_VAR 0 6
29942: PPUSH
29943: CALL_OW 264
29947: PUSH
29948: LD_INT 29
29950: PUSH
29951: EMPTY
29952: LIST
29953: IN
29954: IFFALSE 29975
// points := [ 70 , 200 , 400 ] ;
29956: LD_ADDR_VAR 0 9
29960: PUSH
29961: LD_INT 70
29963: PUSH
29964: LD_INT 200
29966: PUSH
29967: LD_INT 400
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: LIST
29974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29975: LD_VAR 0 6
29979: PPUSH
29980: CALL_OW 264
29984: PUSH
29985: LD_INT 14
29987: PUSH
29988: LD_INT 53
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: IN
29995: IFFALSE 30016
// points := [ 40 , 10 , 20 ] ;
29997: LD_ADDR_VAR 0 9
30001: PUSH
30002: LD_INT 40
30004: PUSH
30005: LD_INT 10
30007: PUSH
30008: LD_INT 20
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: LIST
30015: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30016: LD_VAR 0 6
30020: PPUSH
30021: CALL_OW 264
30025: PUSH
30026: LD_INT 9
30028: PUSH
30029: EMPTY
30030: LIST
30031: IN
30032: IFFALSE 30053
// points := [ 5 , 70 , 20 ] ;
30034: LD_ADDR_VAR 0 9
30038: PUSH
30039: LD_INT 5
30041: PUSH
30042: LD_INT 70
30044: PUSH
30045: LD_INT 20
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: LIST
30052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30053: LD_VAR 0 6
30057: PPUSH
30058: CALL_OW 264
30062: PUSH
30063: LD_INT 10
30065: PUSH
30066: EMPTY
30067: LIST
30068: IN
30069: IFFALSE 30090
// points := [ 35 , 110 , 70 ] ;
30071: LD_ADDR_VAR 0 9
30075: PUSH
30076: LD_INT 35
30078: PUSH
30079: LD_INT 110
30081: PUSH
30082: LD_INT 70
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30090: LD_VAR 0 6
30094: PPUSH
30095: CALL_OW 265
30099: PUSH
30100: LD_INT 25
30102: EQUAL
30103: IFFALSE 30124
// points := [ 80 , 65 , 100 ] ;
30105: LD_ADDR_VAR 0 9
30109: PUSH
30110: LD_INT 80
30112: PUSH
30113: LD_INT 65
30115: PUSH
30116: LD_INT 100
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: LIST
30123: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30124: LD_VAR 0 6
30128: PPUSH
30129: CALL_OW 263
30133: PUSH
30134: LD_INT 1
30136: EQUAL
30137: IFFALSE 30172
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30139: LD_ADDR_VAR 0 10
30143: PUSH
30144: LD_VAR 0 10
30148: PUSH
30149: LD_VAR 0 6
30153: PPUSH
30154: CALL_OW 311
30158: PPUSH
30159: LD_INT 3
30161: PPUSH
30162: CALL_OW 259
30166: PUSH
30167: LD_INT 4
30169: MUL
30170: MUL
30171: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30172: LD_VAR 0 6
30176: PPUSH
30177: CALL_OW 263
30181: PUSH
30182: LD_INT 2
30184: EQUAL
30185: IFFALSE 30236
// begin j := IsControledBy ( i ) ;
30187: LD_ADDR_VAR 0 7
30191: PUSH
30192: LD_VAR 0 6
30196: PPUSH
30197: CALL_OW 312
30201: ST_TO_ADDR
// if j then
30202: LD_VAR 0 7
30206: IFFALSE 30236
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30208: LD_ADDR_VAR 0 10
30212: PUSH
30213: LD_VAR 0 10
30217: PUSH
30218: LD_VAR 0 7
30222: PPUSH
30223: LD_INT 3
30225: PPUSH
30226: CALL_OW 259
30230: PUSH
30231: LD_INT 3
30233: MUL
30234: MUL
30235: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30236: LD_VAR 0 6
30240: PPUSH
30241: CALL_OW 264
30245: PUSH
30246: LD_INT 5
30248: PUSH
30249: LD_INT 6
30251: PUSH
30252: LD_INT 46
30254: PUSH
30255: LD_INT 44
30257: PUSH
30258: LD_INT 47
30260: PUSH
30261: LD_INT 45
30263: PUSH
30264: LD_INT 28
30266: PUSH
30267: LD_INT 7
30269: PUSH
30270: LD_INT 27
30272: PUSH
30273: LD_INT 29
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: IN
30288: PUSH
30289: LD_VAR 0 1
30293: PPUSH
30294: LD_INT 52
30296: PPUSH
30297: CALL_OW 321
30301: PUSH
30302: LD_INT 2
30304: EQUAL
30305: AND
30306: IFFALSE 30323
// bpoints := bpoints * 1.2 ;
30308: LD_ADDR_VAR 0 10
30312: PUSH
30313: LD_VAR 0 10
30317: PUSH
30318: LD_REAL  1.20000000000000E+0000
30321: MUL
30322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30323: LD_VAR 0 6
30327: PPUSH
30328: CALL_OW 264
30332: PUSH
30333: LD_INT 6
30335: PUSH
30336: LD_INT 46
30338: PUSH
30339: LD_INT 47
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: IN
30347: IFFALSE 30364
// bpoints := bpoints * 1.2 ;
30349: LD_ADDR_VAR 0 10
30353: PUSH
30354: LD_VAR 0 10
30358: PUSH
30359: LD_REAL  1.20000000000000E+0000
30362: MUL
30363: ST_TO_ADDR
// end ; unit_building :
30364: GO 30378
30366: LD_INT 3
30368: DOUBLE
30369: EQUAL
30370: IFTRUE 30374
30372: GO 30377
30374: POP
// ; end ;
30375: GO 30378
30377: POP
// for j = 1 to 3 do
30378: LD_ADDR_VAR 0 7
30382: PUSH
30383: DOUBLE
30384: LD_INT 1
30386: DEC
30387: ST_TO_ADDR
30388: LD_INT 3
30390: PUSH
30391: FOR_TO
30392: IFFALSE 30445
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30394: LD_ADDR_VAR 0 5
30398: PUSH
30399: LD_VAR 0 5
30403: PPUSH
30404: LD_VAR 0 7
30408: PPUSH
30409: LD_VAR 0 5
30413: PUSH
30414: LD_VAR 0 7
30418: ARRAY
30419: PUSH
30420: LD_VAR 0 9
30424: PUSH
30425: LD_VAR 0 7
30429: ARRAY
30430: PUSH
30431: LD_VAR 0 10
30435: MUL
30436: PLUS
30437: PPUSH
30438: CALL_OW 1
30442: ST_TO_ADDR
30443: GO 30391
30445: POP
30446: POP
// end ;
30447: GO 28930
30449: POP
30450: POP
// result := Replace ( result , 4 , tmp ) ;
30451: LD_ADDR_VAR 0 5
30455: PUSH
30456: LD_VAR 0 5
30460: PPUSH
30461: LD_INT 4
30463: PPUSH
30464: LD_VAR 0 8
30468: PPUSH
30469: CALL_OW 1
30473: ST_TO_ADDR
// end ;
30474: LD_VAR 0 5
30478: RET
// export function DangerAtRange ( unit , range ) ; begin
30479: LD_INT 0
30481: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30482: LD_ADDR_VAR 0 3
30486: PUSH
30487: LD_VAR 0 1
30491: PPUSH
30492: CALL_OW 255
30496: PPUSH
30497: LD_VAR 0 1
30501: PPUSH
30502: CALL_OW 250
30506: PPUSH
30507: LD_VAR 0 1
30511: PPUSH
30512: CALL_OW 251
30516: PPUSH
30517: LD_VAR 0 2
30521: PPUSH
30522: CALL 28782 0 4
30526: ST_TO_ADDR
// end ;
30527: LD_VAR 0 3
30531: RET
// export function DangerInArea ( side , area ) ; begin
30532: LD_INT 0
30534: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30535: LD_ADDR_VAR 0 3
30539: PUSH
30540: LD_VAR 0 2
30544: PPUSH
30545: LD_INT 81
30547: PUSH
30548: LD_VAR 0 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PPUSH
30557: CALL_OW 70
30561: ST_TO_ADDR
// end ;
30562: LD_VAR 0 3
30566: RET
// export function IsExtension ( b ) ; begin
30567: LD_INT 0
30569: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30570: LD_ADDR_VAR 0 2
30574: PUSH
30575: LD_VAR 0 1
30579: PUSH
30580: LD_INT 23
30582: PUSH
30583: LD_INT 20
30585: PUSH
30586: LD_INT 22
30588: PUSH
30589: LD_INT 17
30591: PUSH
30592: LD_INT 24
30594: PUSH
30595: LD_INT 21
30597: PUSH
30598: LD_INT 19
30600: PUSH
30601: LD_INT 16
30603: PUSH
30604: LD_INT 25
30606: PUSH
30607: LD_INT 18
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: IN
30622: ST_TO_ADDR
// end ;
30623: LD_VAR 0 2
30627: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
30628: LD_INT 0
30630: PPUSH
30631: PPUSH
30632: PPUSH
// result := [ ] ;
30633: LD_ADDR_VAR 0 3
30637: PUSH
30638: EMPTY
30639: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30640: LD_ADDR_VAR 0 4
30644: PUSH
30645: LD_VAR 0 2
30649: PPUSH
30650: LD_INT 21
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PPUSH
30660: CALL_OW 70
30664: ST_TO_ADDR
// if not tmp then
30665: LD_VAR 0 4
30669: NOT
30670: IFFALSE 30674
// exit ;
30672: GO 30732
// for i in tmp do
30674: LD_ADDR_VAR 0 5
30678: PUSH
30679: LD_VAR 0 4
30683: PUSH
30684: FOR_IN
30685: IFFALSE 30720
// if GetBase ( i ) <> base then
30687: LD_VAR 0 5
30691: PPUSH
30692: CALL_OW 274
30696: PUSH
30697: LD_VAR 0 1
30701: NONEQUAL
30702: IFFALSE 30718
// ComLinkToBase ( base , i ) ;
30704: LD_VAR 0 1
30708: PPUSH
30709: LD_VAR 0 5
30713: PPUSH
30714: CALL_OW 169
30718: GO 30684
30720: POP
30721: POP
// result := tmp ;
30722: LD_ADDR_VAR 0 3
30726: PUSH
30727: LD_VAR 0 4
30731: ST_TO_ADDR
// end ;
30732: LD_VAR 0 3
30736: RET
// export function ComComplete ( unit , b ) ; var i ; begin
30737: LD_INT 0
30739: PPUSH
30740: PPUSH
// if BuildingStatus ( b ) = bs_build then
30741: LD_VAR 0 2
30745: PPUSH
30746: CALL_OW 461
30750: PUSH
30751: LD_INT 1
30753: EQUAL
30754: IFFALSE 30814
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30756: LD_VAR 0 1
30760: PPUSH
30761: LD_STRING h
30763: PUSH
30764: LD_VAR 0 2
30768: PPUSH
30769: CALL_OW 250
30773: PUSH
30774: LD_VAR 0 2
30778: PPUSH
30779: CALL_OW 251
30783: PUSH
30784: LD_VAR 0 2
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: PPUSH
30810: CALL_OW 446
// end ;
30814: LD_VAR 0 3
30818: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30819: LD_INT 0
30821: PPUSH
30822: PPUSH
30823: PPUSH
30824: PPUSH
30825: PPUSH
30826: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
30827: LD_VAR 0 1
30831: NOT
30832: PUSH
30833: LD_VAR 0 1
30837: PPUSH
30838: CALL_OW 263
30842: PUSH
30843: LD_INT 2
30845: EQUAL
30846: NOT
30847: OR
30848: IFFALSE 30852
// exit ;
30850: GO 31168
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30852: LD_ADDR_VAR 0 6
30856: PUSH
30857: LD_INT 22
30859: PUSH
30860: LD_VAR 0 1
30864: PPUSH
30865: CALL_OW 255
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: LD_INT 30
30879: PUSH
30880: LD_INT 36
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 34
30889: PUSH
30890: LD_INT 31
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PPUSH
30906: CALL_OW 69
30910: ST_TO_ADDR
// if not tmp then
30911: LD_VAR 0 6
30915: NOT
30916: IFFALSE 30920
// exit ;
30918: GO 31168
// result := [ ] ;
30920: LD_ADDR_VAR 0 2
30924: PUSH
30925: EMPTY
30926: ST_TO_ADDR
// for i in tmp do
30927: LD_ADDR_VAR 0 3
30931: PUSH
30932: LD_VAR 0 6
30936: PUSH
30937: FOR_IN
30938: IFFALSE 31009
// begin t := UnitsInside ( i ) ;
30940: LD_ADDR_VAR 0 4
30944: PUSH
30945: LD_VAR 0 3
30949: PPUSH
30950: CALL_OW 313
30954: ST_TO_ADDR
// if t then
30955: LD_VAR 0 4
30959: IFFALSE 31007
// for j in t do
30961: LD_ADDR_VAR 0 7
30965: PUSH
30966: LD_VAR 0 4
30970: PUSH
30971: FOR_IN
30972: IFFALSE 31005
// result := Insert ( result , result + 1 , j ) ;
30974: LD_ADDR_VAR 0 2
30978: PUSH
30979: LD_VAR 0 2
30983: PPUSH
30984: LD_VAR 0 2
30988: PUSH
30989: LD_INT 1
30991: PLUS
30992: PPUSH
30993: LD_VAR 0 7
30997: PPUSH
30998: CALL_OW 2
31002: ST_TO_ADDR
31003: GO 30971
31005: POP
31006: POP
// end ;
31007: GO 30937
31009: POP
31010: POP
// if not result then
31011: LD_VAR 0 2
31015: NOT
31016: IFFALSE 31020
// exit ;
31018: GO 31168
// mech := result [ 1 ] ;
31020: LD_ADDR_VAR 0 5
31024: PUSH
31025: LD_VAR 0 2
31029: PUSH
31030: LD_INT 1
31032: ARRAY
31033: ST_TO_ADDR
// if result > 1 then
31034: LD_VAR 0 2
31038: PUSH
31039: LD_INT 1
31041: GREATER
31042: IFFALSE 31154
// for i = 2 to result do
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: DOUBLE
31050: LD_INT 2
31052: DEC
31053: ST_TO_ADDR
31054: LD_VAR 0 2
31058: PUSH
31059: FOR_TO
31060: IFFALSE 31152
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31062: LD_ADDR_VAR 0 4
31066: PUSH
31067: LD_VAR 0 2
31071: PUSH
31072: LD_VAR 0 3
31076: ARRAY
31077: PPUSH
31078: LD_INT 3
31080: PPUSH
31081: CALL_OW 259
31085: PUSH
31086: LD_VAR 0 2
31090: PUSH
31091: LD_VAR 0 3
31095: ARRAY
31096: PPUSH
31097: CALL_OW 432
31101: MINUS
31102: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31103: LD_VAR 0 4
31107: PUSH
31108: LD_VAR 0 5
31112: PPUSH
31113: LD_INT 3
31115: PPUSH
31116: CALL_OW 259
31120: PUSH
31121: LD_VAR 0 5
31125: PPUSH
31126: CALL_OW 432
31130: MINUS
31131: GREATEREQUAL
31132: IFFALSE 31150
// mech := result [ i ] ;
31134: LD_ADDR_VAR 0 5
31138: PUSH
31139: LD_VAR 0 2
31143: PUSH
31144: LD_VAR 0 3
31148: ARRAY
31149: ST_TO_ADDR
// end ;
31150: GO 31059
31152: POP
31153: POP
// ComLinkTo ( vehicle , mech ) ;
31154: LD_VAR 0 1
31158: PPUSH
31159: LD_VAR 0 5
31163: PPUSH
31164: CALL_OW 135
// end ;
31168: LD_VAR 0 2
31172: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31173: LD_INT 0
31175: PPUSH
31176: PPUSH
31177: PPUSH
31178: PPUSH
31179: PPUSH
31180: PPUSH
31181: PPUSH
31182: PPUSH
31183: PPUSH
31184: PPUSH
31185: PPUSH
31186: PPUSH
31187: PPUSH
// result := [ ] ;
31188: LD_ADDR_VAR 0 7
31192: PUSH
31193: EMPTY
31194: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31195: LD_VAR 0 1
31199: PPUSH
31200: CALL_OW 266
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: IN
31215: NOT
31216: IFFALSE 31220
// exit ;
31218: GO 32851
// if name then
31220: LD_VAR 0 3
31224: IFFALSE 31240
// SetBName ( base_dep , name ) ;
31226: LD_VAR 0 1
31230: PPUSH
31231: LD_VAR 0 3
31235: PPUSH
31236: CALL_OW 500
// base := GetBase ( base_dep ) ;
31240: LD_ADDR_VAR 0 15
31244: PUSH
31245: LD_VAR 0 1
31249: PPUSH
31250: CALL_OW 274
31254: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31255: LD_ADDR_VAR 0 16
31259: PUSH
31260: LD_VAR 0 1
31264: PPUSH
31265: CALL_OW 255
31269: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31270: LD_ADDR_VAR 0 17
31274: PUSH
31275: LD_VAR 0 1
31279: PPUSH
31280: CALL_OW 248
31284: ST_TO_ADDR
// if sources then
31285: LD_VAR 0 5
31289: IFFALSE 31336
// for i = 1 to 3 do
31291: LD_ADDR_VAR 0 8
31295: PUSH
31296: DOUBLE
31297: LD_INT 1
31299: DEC
31300: ST_TO_ADDR
31301: LD_INT 3
31303: PUSH
31304: FOR_TO
31305: IFFALSE 31334
// AddResourceType ( base , i , sources [ i ] ) ;
31307: LD_VAR 0 15
31311: PPUSH
31312: LD_VAR 0 8
31316: PPUSH
31317: LD_VAR 0 5
31321: PUSH
31322: LD_VAR 0 8
31326: ARRAY
31327: PPUSH
31328: CALL_OW 276
31332: GO 31304
31334: POP
31335: POP
// buildings := GetBaseBuildings ( base , area ) ;
31336: LD_ADDR_VAR 0 18
31340: PUSH
31341: LD_VAR 0 15
31345: PPUSH
31346: LD_VAR 0 2
31350: PPUSH
31351: CALL 30628 0 2
31355: ST_TO_ADDR
// InitHc ;
31356: CALL_OW 19
// InitUc ;
31360: CALL_OW 18
// uc_side := side ;
31364: LD_ADDR_OWVAR 20
31368: PUSH
31369: LD_VAR 0 16
31373: ST_TO_ADDR
// uc_nation := nation ;
31374: LD_ADDR_OWVAR 21
31378: PUSH
31379: LD_VAR 0 17
31383: ST_TO_ADDR
// if buildings then
31384: LD_VAR 0 18
31388: IFFALSE 32710
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31390: LD_ADDR_VAR 0 19
31394: PUSH
31395: LD_VAR 0 18
31399: PPUSH
31400: LD_INT 2
31402: PUSH
31403: LD_INT 30
31405: PUSH
31406: LD_INT 29
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 30
31415: PUSH
31416: LD_INT 30
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: PPUSH
31428: CALL_OW 72
31432: ST_TO_ADDR
// if tmp then
31433: LD_VAR 0 19
31437: IFFALSE 31485
// for i in tmp do
31439: LD_ADDR_VAR 0 8
31443: PUSH
31444: LD_VAR 0 19
31448: PUSH
31449: FOR_IN
31450: IFFALSE 31483
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31452: LD_VAR 0 8
31456: PPUSH
31457: CALL_OW 250
31461: PPUSH
31462: LD_VAR 0 8
31466: PPUSH
31467: CALL_OW 251
31471: PPUSH
31472: LD_VAR 0 16
31476: PPUSH
31477: CALL_OW 441
31481: GO 31449
31483: POP
31484: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31485: LD_VAR 0 18
31489: PPUSH
31490: LD_INT 2
31492: PUSH
31493: LD_INT 30
31495: PUSH
31496: LD_INT 32
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 30
31505: PUSH
31506: LD_INT 33
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: PPUSH
31518: CALL_OW 72
31522: IFFALSE 31610
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31524: LD_ADDR_VAR 0 8
31528: PUSH
31529: LD_VAR 0 18
31533: PPUSH
31534: LD_INT 2
31536: PUSH
31537: LD_INT 30
31539: PUSH
31540: LD_INT 32
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 30
31549: PUSH
31550: LD_INT 33
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: PPUSH
31562: CALL_OW 72
31566: PUSH
31567: FOR_IN
31568: IFFALSE 31608
// begin if not GetBWeapon ( i ) then
31570: LD_VAR 0 8
31574: PPUSH
31575: CALL_OW 269
31579: NOT
31580: IFFALSE 31606
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31582: LD_VAR 0 8
31586: PPUSH
31587: LD_VAR 0 8
31591: PPUSH
31592: LD_VAR 0 2
31596: PPUSH
31597: CALL 32856 0 2
31601: PPUSH
31602: CALL_OW 431
// end ;
31606: GO 31567
31608: POP
31609: POP
// end ; for i = 1 to personel do
31610: LD_ADDR_VAR 0 8
31614: PUSH
31615: DOUBLE
31616: LD_INT 1
31618: DEC
31619: ST_TO_ADDR
31620: LD_VAR 0 6
31624: PUSH
31625: FOR_TO
31626: IFFALSE 32690
// begin if i > 4 then
31628: LD_VAR 0 8
31632: PUSH
31633: LD_INT 4
31635: GREATER
31636: IFFALSE 31640
// break ;
31638: GO 32690
// case i of 1 :
31640: LD_VAR 0 8
31644: PUSH
31645: LD_INT 1
31647: DOUBLE
31648: EQUAL
31649: IFTRUE 31653
31651: GO 31733
31653: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31654: LD_ADDR_VAR 0 12
31658: PUSH
31659: LD_VAR 0 18
31663: PPUSH
31664: LD_INT 22
31666: PUSH
31667: LD_VAR 0 16
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 58
31678: PUSH
31679: EMPTY
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 30
31687: PUSH
31688: LD_INT 32
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 30
31697: PUSH
31698: LD_INT 4
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 30
31707: PUSH
31708: LD_INT 5
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: PPUSH
31726: CALL_OW 72
31730: ST_TO_ADDR
31731: GO 31955
31733: LD_INT 2
31735: DOUBLE
31736: EQUAL
31737: IFTRUE 31741
31739: GO 31803
31741: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31742: LD_ADDR_VAR 0 12
31746: PUSH
31747: LD_VAR 0 18
31751: PPUSH
31752: LD_INT 22
31754: PUSH
31755: LD_VAR 0 16
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: LD_INT 30
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 30
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: LIST
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PPUSH
31796: CALL_OW 72
31800: ST_TO_ADDR
31801: GO 31955
31803: LD_INT 3
31805: DOUBLE
31806: EQUAL
31807: IFTRUE 31811
31809: GO 31873
31811: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31812: LD_ADDR_VAR 0 12
31816: PUSH
31817: LD_VAR 0 18
31821: PPUSH
31822: LD_INT 22
31824: PUSH
31825: LD_VAR 0 16
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: LD_INT 30
31839: PUSH
31840: LD_INT 2
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 30
31849: PUSH
31850: LD_INT 3
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PPUSH
31866: CALL_OW 72
31870: ST_TO_ADDR
31871: GO 31955
31873: LD_INT 4
31875: DOUBLE
31876: EQUAL
31877: IFTRUE 31881
31879: GO 31954
31881: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31882: LD_ADDR_VAR 0 12
31886: PUSH
31887: LD_VAR 0 18
31891: PPUSH
31892: LD_INT 22
31894: PUSH
31895: LD_VAR 0 16
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 30
31909: PUSH
31910: LD_INT 6
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 30
31919: PUSH
31920: LD_INT 7
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 30
31929: PUSH
31930: LD_INT 8
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PPUSH
31947: CALL_OW 72
31951: ST_TO_ADDR
31952: GO 31955
31954: POP
// if i = 1 then
31955: LD_VAR 0 8
31959: PUSH
31960: LD_INT 1
31962: EQUAL
31963: IFFALSE 32074
// begin tmp := [ ] ;
31965: LD_ADDR_VAR 0 19
31969: PUSH
31970: EMPTY
31971: ST_TO_ADDR
// for j in f do
31972: LD_ADDR_VAR 0 9
31976: PUSH
31977: LD_VAR 0 12
31981: PUSH
31982: FOR_IN
31983: IFFALSE 32056
// if GetBType ( j ) = b_bunker then
31985: LD_VAR 0 9
31989: PPUSH
31990: CALL_OW 266
31994: PUSH
31995: LD_INT 32
31997: EQUAL
31998: IFFALSE 32025
// tmp := Insert ( tmp , 1 , j ) else
32000: LD_ADDR_VAR 0 19
32004: PUSH
32005: LD_VAR 0 19
32009: PPUSH
32010: LD_INT 1
32012: PPUSH
32013: LD_VAR 0 9
32017: PPUSH
32018: CALL_OW 2
32022: ST_TO_ADDR
32023: GO 32054
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32025: LD_ADDR_VAR 0 19
32029: PUSH
32030: LD_VAR 0 19
32034: PPUSH
32035: LD_VAR 0 19
32039: PUSH
32040: LD_INT 1
32042: PLUS
32043: PPUSH
32044: LD_VAR 0 9
32048: PPUSH
32049: CALL_OW 2
32053: ST_TO_ADDR
32054: GO 31982
32056: POP
32057: POP
// if tmp then
32058: LD_VAR 0 19
32062: IFFALSE 32074
// f := tmp ;
32064: LD_ADDR_VAR 0 12
32068: PUSH
32069: LD_VAR 0 19
32073: ST_TO_ADDR
// end ; x := personel [ i ] ;
32074: LD_ADDR_VAR 0 13
32078: PUSH
32079: LD_VAR 0 6
32083: PUSH
32084: LD_VAR 0 8
32088: ARRAY
32089: ST_TO_ADDR
// if x = - 1 then
32090: LD_VAR 0 13
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: EQUAL
32099: IFFALSE 32308
// begin for j in f do
32101: LD_ADDR_VAR 0 9
32105: PUSH
32106: LD_VAR 0 12
32110: PUSH
32111: FOR_IN
32112: IFFALSE 32304
// repeat InitHc ;
32114: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32118: LD_VAR 0 9
32122: PPUSH
32123: CALL_OW 266
32127: PUSH
32128: LD_INT 5
32130: EQUAL
32131: IFFALSE 32201
// begin if UnitsInside ( j ) < 3 then
32133: LD_VAR 0 9
32137: PPUSH
32138: CALL_OW 313
32142: PUSH
32143: LD_INT 3
32145: LESS
32146: IFFALSE 32182
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32148: LD_INT 0
32150: PPUSH
32151: LD_INT 5
32153: PUSH
32154: LD_INT 8
32156: PUSH
32157: LD_INT 9
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: LIST
32164: PUSH
32165: LD_VAR 0 17
32169: ARRAY
32170: PPUSH
32171: LD_VAR 0 4
32175: PPUSH
32176: CALL_OW 380
32180: GO 32199
// PrepareHuman ( false , i , skill ) ;
32182: LD_INT 0
32184: PPUSH
32185: LD_VAR 0 8
32189: PPUSH
32190: LD_VAR 0 4
32194: PPUSH
32195: CALL_OW 380
// end else
32199: GO 32218
// PrepareHuman ( false , i , skill ) ;
32201: LD_INT 0
32203: PPUSH
32204: LD_VAR 0 8
32208: PPUSH
32209: LD_VAR 0 4
32213: PPUSH
32214: CALL_OW 380
// un := CreateHuman ;
32218: LD_ADDR_VAR 0 14
32222: PUSH
32223: CALL_OW 44
32227: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32228: LD_ADDR_VAR 0 7
32232: PUSH
32233: LD_VAR 0 7
32237: PPUSH
32238: LD_INT 1
32240: PPUSH
32241: LD_VAR 0 14
32245: PPUSH
32246: CALL_OW 2
32250: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32251: LD_VAR 0 14
32255: PPUSH
32256: LD_VAR 0 9
32260: PPUSH
32261: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32265: LD_VAR 0 9
32269: PPUSH
32270: CALL_OW 313
32274: PUSH
32275: LD_INT 6
32277: EQUAL
32278: PUSH
32279: LD_VAR 0 9
32283: PPUSH
32284: CALL_OW 266
32288: PUSH
32289: LD_INT 32
32291: PUSH
32292: LD_INT 31
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: IN
32299: OR
32300: IFFALSE 32114
32302: GO 32111
32304: POP
32305: POP
// end else
32306: GO 32688
// for j = 1 to x do
32308: LD_ADDR_VAR 0 9
32312: PUSH
32313: DOUBLE
32314: LD_INT 1
32316: DEC
32317: ST_TO_ADDR
32318: LD_VAR 0 13
32322: PUSH
32323: FOR_TO
32324: IFFALSE 32686
// begin InitHc ;
32326: CALL_OW 19
// if not f then
32330: LD_VAR 0 12
32334: NOT
32335: IFFALSE 32424
// begin PrepareHuman ( false , i , skill ) ;
32337: LD_INT 0
32339: PPUSH
32340: LD_VAR 0 8
32344: PPUSH
32345: LD_VAR 0 4
32349: PPUSH
32350: CALL_OW 380
// un := CreateHuman ;
32354: LD_ADDR_VAR 0 14
32358: PUSH
32359: CALL_OW 44
32363: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32364: LD_ADDR_VAR 0 7
32368: PUSH
32369: LD_VAR 0 7
32373: PPUSH
32374: LD_INT 1
32376: PPUSH
32377: LD_VAR 0 14
32381: PPUSH
32382: CALL_OW 2
32386: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32387: LD_VAR 0 14
32391: PPUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 250
32401: PPUSH
32402: LD_VAR 0 1
32406: PPUSH
32407: CALL_OW 251
32411: PPUSH
32412: LD_INT 10
32414: PPUSH
32415: LD_INT 0
32417: PPUSH
32418: CALL_OW 50
// continue ;
32422: GO 32323
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32424: LD_VAR 0 12
32428: PUSH
32429: LD_INT 1
32431: ARRAY
32432: PPUSH
32433: CALL_OW 313
32437: PUSH
32438: LD_VAR 0 12
32442: PUSH
32443: LD_INT 1
32445: ARRAY
32446: PPUSH
32447: CALL_OW 266
32451: PUSH
32452: LD_INT 32
32454: PUSH
32455: LD_INT 31
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: IN
32462: AND
32463: PUSH
32464: LD_VAR 0 12
32468: PUSH
32469: LD_INT 1
32471: ARRAY
32472: PPUSH
32473: CALL_OW 313
32477: PUSH
32478: LD_INT 6
32480: EQUAL
32481: OR
32482: IFFALSE 32502
// f := Delete ( f , 1 ) ;
32484: LD_ADDR_VAR 0 12
32488: PUSH
32489: LD_VAR 0 12
32493: PPUSH
32494: LD_INT 1
32496: PPUSH
32497: CALL_OW 3
32501: ST_TO_ADDR
// if not f then
32502: LD_VAR 0 12
32506: NOT
32507: IFFALSE 32525
// begin x := x + 2 ;
32509: LD_ADDR_VAR 0 13
32513: PUSH
32514: LD_VAR 0 13
32518: PUSH
32519: LD_INT 2
32521: PLUS
32522: ST_TO_ADDR
// continue ;
32523: GO 32323
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32525: LD_VAR 0 12
32529: PUSH
32530: LD_INT 1
32532: ARRAY
32533: PPUSH
32534: CALL_OW 266
32538: PUSH
32539: LD_INT 5
32541: EQUAL
32542: IFFALSE 32616
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32544: LD_VAR 0 12
32548: PUSH
32549: LD_INT 1
32551: ARRAY
32552: PPUSH
32553: CALL_OW 313
32557: PUSH
32558: LD_INT 3
32560: LESS
32561: IFFALSE 32597
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32563: LD_INT 0
32565: PPUSH
32566: LD_INT 5
32568: PUSH
32569: LD_INT 8
32571: PUSH
32572: LD_INT 9
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: LIST
32579: PUSH
32580: LD_VAR 0 17
32584: ARRAY
32585: PPUSH
32586: LD_VAR 0 4
32590: PPUSH
32591: CALL_OW 380
32595: GO 32614
// PrepareHuman ( false , i , skill ) ;
32597: LD_INT 0
32599: PPUSH
32600: LD_VAR 0 8
32604: PPUSH
32605: LD_VAR 0 4
32609: PPUSH
32610: CALL_OW 380
// end else
32614: GO 32633
// PrepareHuman ( false , i , skill ) ;
32616: LD_INT 0
32618: PPUSH
32619: LD_VAR 0 8
32623: PPUSH
32624: LD_VAR 0 4
32628: PPUSH
32629: CALL_OW 380
// un := CreateHuman ;
32633: LD_ADDR_VAR 0 14
32637: PUSH
32638: CALL_OW 44
32642: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32643: LD_ADDR_VAR 0 7
32647: PUSH
32648: LD_VAR 0 7
32652: PPUSH
32653: LD_INT 1
32655: PPUSH
32656: LD_VAR 0 14
32660: PPUSH
32661: CALL_OW 2
32665: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32666: LD_VAR 0 14
32670: PPUSH
32671: LD_VAR 0 12
32675: PUSH
32676: LD_INT 1
32678: ARRAY
32679: PPUSH
32680: CALL_OW 52
// end ;
32684: GO 32323
32686: POP
32687: POP
// end ;
32688: GO 31625
32690: POP
32691: POP
// result := result ^ buildings ;
32692: LD_ADDR_VAR 0 7
32696: PUSH
32697: LD_VAR 0 7
32701: PUSH
32702: LD_VAR 0 18
32706: ADD
32707: ST_TO_ADDR
// end else
32708: GO 32851
// begin for i = 1 to personel do
32710: LD_ADDR_VAR 0 8
32714: PUSH
32715: DOUBLE
32716: LD_INT 1
32718: DEC
32719: ST_TO_ADDR
32720: LD_VAR 0 6
32724: PUSH
32725: FOR_TO
32726: IFFALSE 32849
// begin if i > 4 then
32728: LD_VAR 0 8
32732: PUSH
32733: LD_INT 4
32735: GREATER
32736: IFFALSE 32740
// break ;
32738: GO 32849
// x := personel [ i ] ;
32740: LD_ADDR_VAR 0 13
32744: PUSH
32745: LD_VAR 0 6
32749: PUSH
32750: LD_VAR 0 8
32754: ARRAY
32755: ST_TO_ADDR
// if x = - 1 then
32756: LD_VAR 0 13
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: EQUAL
32765: IFFALSE 32769
// continue ;
32767: GO 32725
// PrepareHuman ( false , i , skill ) ;
32769: LD_INT 0
32771: PPUSH
32772: LD_VAR 0 8
32776: PPUSH
32777: LD_VAR 0 4
32781: PPUSH
32782: CALL_OW 380
// un := CreateHuman ;
32786: LD_ADDR_VAR 0 14
32790: PUSH
32791: CALL_OW 44
32795: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32796: LD_VAR 0 14
32800: PPUSH
32801: LD_VAR 0 1
32805: PPUSH
32806: CALL_OW 250
32810: PPUSH
32811: LD_VAR 0 1
32815: PPUSH
32816: CALL_OW 251
32820: PPUSH
32821: LD_INT 10
32823: PPUSH
32824: LD_INT 0
32826: PPUSH
32827: CALL_OW 50
// result := result ^ un ;
32831: LD_ADDR_VAR 0 7
32835: PUSH
32836: LD_VAR 0 7
32840: PUSH
32841: LD_VAR 0 14
32845: ADD
32846: ST_TO_ADDR
// end ;
32847: GO 32725
32849: POP
32850: POP
// end ; end ;
32851: LD_VAR 0 7
32855: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32856: LD_INT 0
32858: PPUSH
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
32864: PPUSH
32865: PPUSH
32866: PPUSH
32867: PPUSH
32868: PPUSH
32869: PPUSH
32870: PPUSH
32871: PPUSH
32872: PPUSH
32873: PPUSH
// result := false ;
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: LD_INT 0
32881: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32882: LD_VAR 0 1
32886: NOT
32887: PUSH
32888: LD_VAR 0 1
32892: PPUSH
32893: CALL_OW 266
32897: PUSH
32898: LD_INT 32
32900: PUSH
32901: LD_INT 33
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: IN
32908: NOT
32909: OR
32910: IFFALSE 32914
// exit ;
32912: GO 34050
// nat := GetNation ( tower ) ;
32914: LD_ADDR_VAR 0 12
32918: PUSH
32919: LD_VAR 0 1
32923: PPUSH
32924: CALL_OW 248
32928: ST_TO_ADDR
// side := GetSide ( tower ) ;
32929: LD_ADDR_VAR 0 16
32933: PUSH
32934: LD_VAR 0 1
32938: PPUSH
32939: CALL_OW 255
32943: ST_TO_ADDR
// x := GetX ( tower ) ;
32944: LD_ADDR_VAR 0 10
32948: PUSH
32949: LD_VAR 0 1
32953: PPUSH
32954: CALL_OW 250
32958: ST_TO_ADDR
// y := GetY ( tower ) ;
32959: LD_ADDR_VAR 0 11
32963: PUSH
32964: LD_VAR 0 1
32968: PPUSH
32969: CALL_OW 251
32973: ST_TO_ADDR
// if not x or not y then
32974: LD_VAR 0 10
32978: NOT
32979: PUSH
32980: LD_VAR 0 11
32984: NOT
32985: OR
32986: IFFALSE 32990
// exit ;
32988: GO 34050
// weapon := 0 ;
32990: LD_ADDR_VAR 0 18
32994: PUSH
32995: LD_INT 0
32997: ST_TO_ADDR
// fac_list := [ ] ;
32998: LD_ADDR_VAR 0 17
33002: PUSH
33003: EMPTY
33004: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
33005: LD_ADDR_VAR 0 6
33009: PUSH
33010: LD_VAR 0 1
33014: PPUSH
33015: CALL_OW 274
33019: PPUSH
33020: LD_VAR 0 2
33024: PPUSH
33025: CALL 30628 0 2
33029: PPUSH
33030: LD_INT 30
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PPUSH
33040: CALL_OW 72
33044: ST_TO_ADDR
// if not factories then
33045: LD_VAR 0 6
33049: NOT
33050: IFFALSE 33054
// exit ;
33052: GO 34050
// for i in factories do
33054: LD_ADDR_VAR 0 8
33058: PUSH
33059: LD_VAR 0 6
33063: PUSH
33064: FOR_IN
33065: IFFALSE 33090
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33067: LD_ADDR_VAR 0 17
33071: PUSH
33072: LD_VAR 0 17
33076: PUSH
33077: LD_VAR 0 8
33081: PPUSH
33082: CALL_OW 478
33086: UNION
33087: ST_TO_ADDR
33088: GO 33064
33090: POP
33091: POP
// if not fac_list then
33092: LD_VAR 0 17
33096: NOT
33097: IFFALSE 33101
// exit ;
33099: GO 34050
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33101: LD_ADDR_VAR 0 5
33105: PUSH
33106: LD_INT 4
33108: PUSH
33109: LD_INT 5
33111: PUSH
33112: LD_INT 9
33114: PUSH
33115: LD_INT 10
33117: PUSH
33118: LD_INT 6
33120: PUSH
33121: LD_INT 7
33123: PUSH
33124: LD_INT 11
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 27
33138: PUSH
33139: LD_INT 28
33141: PUSH
33142: LD_INT 26
33144: PUSH
33145: LD_INT 30
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 43
33156: PUSH
33157: LD_INT 44
33159: PUSH
33160: LD_INT 46
33162: PUSH
33163: LD_INT 45
33165: PUSH
33166: LD_INT 47
33168: PUSH
33169: LD_INT 49
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: LIST
33184: PUSH
33185: LD_VAR 0 12
33189: ARRAY
33190: ST_TO_ADDR
// for i in list do
33191: LD_ADDR_VAR 0 8
33195: PUSH
33196: LD_VAR 0 5
33200: PUSH
33201: FOR_IN
33202: IFFALSE 33235
// if not i in fac_list then
33204: LD_VAR 0 8
33208: PUSH
33209: LD_VAR 0 17
33213: IN
33214: NOT
33215: IFFALSE 33233
// list := list diff i ;
33217: LD_ADDR_VAR 0 5
33221: PUSH
33222: LD_VAR 0 5
33226: PUSH
33227: LD_VAR 0 8
33231: DIFF
33232: ST_TO_ADDR
33233: GO 33201
33235: POP
33236: POP
// if not list then
33237: LD_VAR 0 5
33241: NOT
33242: IFFALSE 33246
// exit ;
33244: GO 34050
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33246: LD_VAR 0 12
33250: PUSH
33251: LD_INT 3
33253: EQUAL
33254: PUSH
33255: LD_INT 49
33257: PUSH
33258: LD_VAR 0 5
33262: IN
33263: AND
33264: PUSH
33265: LD_INT 31
33267: PPUSH
33268: LD_VAR 0 16
33272: PPUSH
33273: CALL_OW 321
33277: PUSH
33278: LD_INT 2
33280: EQUAL
33281: AND
33282: IFFALSE 33342
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33284: LD_INT 22
33286: PUSH
33287: LD_VAR 0 16
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 35
33298: PUSH
33299: LD_INT 49
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 91
33308: PUSH
33309: LD_VAR 0 1
33313: PUSH
33314: LD_INT 10
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: LIST
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: PPUSH
33327: CALL_OW 69
33331: NOT
33332: IFFALSE 33342
// weapon := ru_time_lapser ;
33334: LD_ADDR_VAR 0 18
33338: PUSH
33339: LD_INT 49
33341: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33342: LD_VAR 0 12
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: IN
33357: PUSH
33358: LD_INT 11
33360: PUSH
33361: LD_VAR 0 5
33365: IN
33366: PUSH
33367: LD_INT 30
33369: PUSH
33370: LD_VAR 0 5
33374: IN
33375: OR
33376: AND
33377: PUSH
33378: LD_INT 6
33380: PPUSH
33381: LD_VAR 0 16
33385: PPUSH
33386: CALL_OW 321
33390: PUSH
33391: LD_INT 2
33393: EQUAL
33394: AND
33395: IFFALSE 33560
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33397: LD_INT 22
33399: PUSH
33400: LD_VAR 0 16
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 35
33414: PUSH
33415: LD_INT 11
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 35
33424: PUSH
33425: LD_INT 30
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 91
33439: PUSH
33440: LD_VAR 0 1
33444: PUSH
33445: LD_INT 18
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: LIST
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: PPUSH
33458: CALL_OW 69
33462: NOT
33463: PUSH
33464: LD_INT 22
33466: PUSH
33467: LD_VAR 0 16
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 2
33478: PUSH
33479: LD_INT 30
33481: PUSH
33482: LD_INT 32
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 30
33491: PUSH
33492: LD_INT 33
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 91
33506: PUSH
33507: LD_VAR 0 1
33511: PUSH
33512: LD_INT 12
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: LIST
33524: PUSH
33525: EMPTY
33526: LIST
33527: PPUSH
33528: CALL_OW 69
33532: PUSH
33533: LD_INT 2
33535: GREATER
33536: AND
33537: IFFALSE 33560
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33539: LD_ADDR_VAR 0 18
33543: PUSH
33544: LD_INT 11
33546: PUSH
33547: LD_INT 30
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_VAR 0 12
33558: ARRAY
33559: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33560: LD_VAR 0 18
33564: NOT
33565: PUSH
33566: LD_INT 40
33568: PPUSH
33569: LD_VAR 0 16
33573: PPUSH
33574: CALL_OW 321
33578: PUSH
33579: LD_INT 2
33581: EQUAL
33582: AND
33583: PUSH
33584: LD_INT 7
33586: PUSH
33587: LD_VAR 0 5
33591: IN
33592: PUSH
33593: LD_INT 28
33595: PUSH
33596: LD_VAR 0 5
33600: IN
33601: OR
33602: PUSH
33603: LD_INT 45
33605: PUSH
33606: LD_VAR 0 5
33610: IN
33611: OR
33612: AND
33613: IFFALSE 33867
// begin hex := GetHexInfo ( x , y ) ;
33615: LD_ADDR_VAR 0 4
33619: PUSH
33620: LD_VAR 0 10
33624: PPUSH
33625: LD_VAR 0 11
33629: PPUSH
33630: CALL_OW 546
33634: ST_TO_ADDR
// if hex [ 1 ] then
33635: LD_VAR 0 4
33639: PUSH
33640: LD_INT 1
33642: ARRAY
33643: IFFALSE 33647
// exit ;
33645: GO 34050
// height := hex [ 2 ] ;
33647: LD_ADDR_VAR 0 15
33651: PUSH
33652: LD_VAR 0 4
33656: PUSH
33657: LD_INT 2
33659: ARRAY
33660: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33661: LD_ADDR_VAR 0 14
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 2
33671: PUSH
33672: LD_INT 3
33674: PUSH
33675: LD_INT 5
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
// for i in tmp do
33684: LD_ADDR_VAR 0 8
33688: PUSH
33689: LD_VAR 0 14
33693: PUSH
33694: FOR_IN
33695: IFFALSE 33865
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33697: LD_ADDR_VAR 0 9
33701: PUSH
33702: LD_VAR 0 10
33706: PPUSH
33707: LD_VAR 0 8
33711: PPUSH
33712: LD_INT 5
33714: PPUSH
33715: CALL_OW 272
33719: PUSH
33720: LD_VAR 0 11
33724: PPUSH
33725: LD_VAR 0 8
33729: PPUSH
33730: LD_INT 5
33732: PPUSH
33733: CALL_OW 273
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33742: LD_VAR 0 9
33746: PUSH
33747: LD_INT 1
33749: ARRAY
33750: PPUSH
33751: LD_VAR 0 9
33755: PUSH
33756: LD_INT 2
33758: ARRAY
33759: PPUSH
33760: CALL_OW 488
33764: IFFALSE 33863
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33766: LD_ADDR_VAR 0 4
33770: PUSH
33771: LD_VAR 0 9
33775: PUSH
33776: LD_INT 1
33778: ARRAY
33779: PPUSH
33780: LD_VAR 0 9
33784: PUSH
33785: LD_INT 2
33787: ARRAY
33788: PPUSH
33789: CALL_OW 546
33793: ST_TO_ADDR
// if hex [ 1 ] then
33794: LD_VAR 0 4
33798: PUSH
33799: LD_INT 1
33801: ARRAY
33802: IFFALSE 33806
// continue ;
33804: GO 33694
// h := hex [ 2 ] ;
33806: LD_ADDR_VAR 0 13
33810: PUSH
33811: LD_VAR 0 4
33815: PUSH
33816: LD_INT 2
33818: ARRAY
33819: ST_TO_ADDR
// if h + 7 < height then
33820: LD_VAR 0 13
33824: PUSH
33825: LD_INT 7
33827: PLUS
33828: PUSH
33829: LD_VAR 0 15
33833: LESS
33834: IFFALSE 33863
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33836: LD_ADDR_VAR 0 18
33840: PUSH
33841: LD_INT 7
33843: PUSH
33844: LD_INT 28
33846: PUSH
33847: LD_INT 45
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: LIST
33854: PUSH
33855: LD_VAR 0 12
33859: ARRAY
33860: ST_TO_ADDR
// break ;
33861: GO 33865
// end ; end ; end ;
33863: GO 33694
33865: POP
33866: POP
// end ; if not weapon then
33867: LD_VAR 0 18
33871: NOT
33872: IFFALSE 33932
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33874: LD_ADDR_VAR 0 5
33878: PUSH
33879: LD_VAR 0 5
33883: PUSH
33884: LD_INT 11
33886: PUSH
33887: LD_INT 30
33889: PUSH
33890: LD_INT 49
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: DIFF
33898: ST_TO_ADDR
// if not list then
33899: LD_VAR 0 5
33903: NOT
33904: IFFALSE 33908
// exit ;
33906: GO 34050
// weapon := list [ rand ( 1 , list ) ] ;
33908: LD_ADDR_VAR 0 18
33912: PUSH
33913: LD_VAR 0 5
33917: PUSH
33918: LD_INT 1
33920: PPUSH
33921: LD_VAR 0 5
33925: PPUSH
33926: CALL_OW 12
33930: ARRAY
33931: ST_TO_ADDR
// end ; if weapon then
33932: LD_VAR 0 18
33936: IFFALSE 34050
// begin tmp := CostOfWeapon ( weapon ) ;
33938: LD_ADDR_VAR 0 14
33942: PUSH
33943: LD_VAR 0 18
33947: PPUSH
33948: CALL_OW 451
33952: ST_TO_ADDR
// j := GetBase ( tower ) ;
33953: LD_ADDR_VAR 0 9
33957: PUSH
33958: LD_VAR 0 1
33962: PPUSH
33963: CALL_OW 274
33967: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33968: LD_VAR 0 9
33972: PPUSH
33973: LD_INT 1
33975: PPUSH
33976: CALL_OW 275
33980: PUSH
33981: LD_VAR 0 14
33985: PUSH
33986: LD_INT 1
33988: ARRAY
33989: GREATEREQUAL
33990: PUSH
33991: LD_VAR 0 9
33995: PPUSH
33996: LD_INT 2
33998: PPUSH
33999: CALL_OW 275
34003: PUSH
34004: LD_VAR 0 14
34008: PUSH
34009: LD_INT 2
34011: ARRAY
34012: GREATEREQUAL
34013: AND
34014: PUSH
34015: LD_VAR 0 9
34019: PPUSH
34020: LD_INT 3
34022: PPUSH
34023: CALL_OW 275
34027: PUSH
34028: LD_VAR 0 14
34032: PUSH
34033: LD_INT 3
34035: ARRAY
34036: GREATEREQUAL
34037: AND
34038: IFFALSE 34050
// result := weapon ;
34040: LD_ADDR_VAR 0 3
34044: PUSH
34045: LD_VAR 0 18
34049: ST_TO_ADDR
// end ; end ;
34050: LD_VAR 0 3
34054: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34055: LD_INT 0
34057: PPUSH
34058: PPUSH
// result := true ;
34059: LD_ADDR_VAR 0 3
34063: PUSH
34064: LD_INT 1
34066: ST_TO_ADDR
// if array1 = array2 then
34067: LD_VAR 0 1
34071: PUSH
34072: LD_VAR 0 2
34076: EQUAL
34077: IFFALSE 34137
// begin for i = 1 to array1 do
34079: LD_ADDR_VAR 0 4
34083: PUSH
34084: DOUBLE
34085: LD_INT 1
34087: DEC
34088: ST_TO_ADDR
34089: LD_VAR 0 1
34093: PUSH
34094: FOR_TO
34095: IFFALSE 34133
// if array1 [ i ] <> array2 [ i ] then
34097: LD_VAR 0 1
34101: PUSH
34102: LD_VAR 0 4
34106: ARRAY
34107: PUSH
34108: LD_VAR 0 2
34112: PUSH
34113: LD_VAR 0 4
34117: ARRAY
34118: NONEQUAL
34119: IFFALSE 34131
// begin result := false ;
34121: LD_ADDR_VAR 0 3
34125: PUSH
34126: LD_INT 0
34128: ST_TO_ADDR
// break ;
34129: GO 34133
// end ;
34131: GO 34094
34133: POP
34134: POP
// end else
34135: GO 34145
// result := false ;
34137: LD_ADDR_VAR 0 3
34141: PUSH
34142: LD_INT 0
34144: ST_TO_ADDR
// end ;
34145: LD_VAR 0 3
34149: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34150: LD_INT 0
34152: PPUSH
34153: PPUSH
34154: PPUSH
// pom := GetBase ( fac ) ;
34155: LD_ADDR_VAR 0 5
34159: PUSH
34160: LD_VAR 0 1
34164: PPUSH
34165: CALL_OW 274
34169: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34170: LD_ADDR_VAR 0 4
34174: PUSH
34175: LD_VAR 0 2
34179: PUSH
34180: LD_INT 1
34182: ARRAY
34183: PPUSH
34184: LD_VAR 0 2
34188: PUSH
34189: LD_INT 2
34191: ARRAY
34192: PPUSH
34193: LD_VAR 0 2
34197: PUSH
34198: LD_INT 3
34200: ARRAY
34201: PPUSH
34202: LD_VAR 0 2
34206: PUSH
34207: LD_INT 4
34209: ARRAY
34210: PPUSH
34211: CALL_OW 449
34215: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34216: LD_ADDR_VAR 0 3
34220: PUSH
34221: LD_VAR 0 5
34225: PPUSH
34226: LD_INT 1
34228: PPUSH
34229: CALL_OW 275
34233: PUSH
34234: LD_VAR 0 4
34238: PUSH
34239: LD_INT 1
34241: ARRAY
34242: GREATEREQUAL
34243: PUSH
34244: LD_VAR 0 5
34248: PPUSH
34249: LD_INT 2
34251: PPUSH
34252: CALL_OW 275
34256: PUSH
34257: LD_VAR 0 4
34261: PUSH
34262: LD_INT 2
34264: ARRAY
34265: GREATEREQUAL
34266: AND
34267: PUSH
34268: LD_VAR 0 5
34272: PPUSH
34273: LD_INT 3
34275: PPUSH
34276: CALL_OW 275
34280: PUSH
34281: LD_VAR 0 4
34285: PUSH
34286: LD_INT 3
34288: ARRAY
34289: GREATEREQUAL
34290: AND
34291: ST_TO_ADDR
// end ;
34292: LD_VAR 0 3
34296: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34297: LD_INT 0
34299: PPUSH
34300: PPUSH
34301: PPUSH
34302: PPUSH
// pom := GetBase ( building ) ;
34303: LD_ADDR_VAR 0 3
34307: PUSH
34308: LD_VAR 0 1
34312: PPUSH
34313: CALL_OW 274
34317: ST_TO_ADDR
// if not pom then
34318: LD_VAR 0 3
34322: NOT
34323: IFFALSE 34327
// exit ;
34325: GO 34497
// btype := GetBType ( building ) ;
34327: LD_ADDR_VAR 0 5
34331: PUSH
34332: LD_VAR 0 1
34336: PPUSH
34337: CALL_OW 266
34341: ST_TO_ADDR
// if btype = b_armoury then
34342: LD_VAR 0 5
34346: PUSH
34347: LD_INT 4
34349: EQUAL
34350: IFFALSE 34360
// btype := b_barracks ;
34352: LD_ADDR_VAR 0 5
34356: PUSH
34357: LD_INT 5
34359: ST_TO_ADDR
// if btype = b_depot then
34360: LD_VAR 0 5
34364: PUSH
34365: LD_INT 0
34367: EQUAL
34368: IFFALSE 34378
// btype := b_warehouse ;
34370: LD_ADDR_VAR 0 5
34374: PUSH
34375: LD_INT 1
34377: ST_TO_ADDR
// if btype = b_workshop then
34378: LD_VAR 0 5
34382: PUSH
34383: LD_INT 2
34385: EQUAL
34386: IFFALSE 34396
// btype := b_factory ;
34388: LD_ADDR_VAR 0 5
34392: PUSH
34393: LD_INT 3
34395: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34396: LD_ADDR_VAR 0 4
34400: PUSH
34401: LD_VAR 0 5
34405: PPUSH
34406: LD_VAR 0 1
34410: PPUSH
34411: CALL_OW 248
34415: PPUSH
34416: CALL_OW 450
34420: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34421: LD_ADDR_VAR 0 2
34425: PUSH
34426: LD_VAR 0 3
34430: PPUSH
34431: LD_INT 1
34433: PPUSH
34434: CALL_OW 275
34438: PUSH
34439: LD_VAR 0 4
34443: PUSH
34444: LD_INT 1
34446: ARRAY
34447: GREATEREQUAL
34448: PUSH
34449: LD_VAR 0 3
34453: PPUSH
34454: LD_INT 2
34456: PPUSH
34457: CALL_OW 275
34461: PUSH
34462: LD_VAR 0 4
34466: PUSH
34467: LD_INT 2
34469: ARRAY
34470: GREATEREQUAL
34471: AND
34472: PUSH
34473: LD_VAR 0 3
34477: PPUSH
34478: LD_INT 3
34480: PPUSH
34481: CALL_OW 275
34485: PUSH
34486: LD_VAR 0 4
34490: PUSH
34491: LD_INT 3
34493: ARRAY
34494: GREATEREQUAL
34495: AND
34496: ST_TO_ADDR
// end ;
34497: LD_VAR 0 2
34501: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34502: LD_INT 0
34504: PPUSH
34505: PPUSH
34506: PPUSH
// pom := GetBase ( building ) ;
34507: LD_ADDR_VAR 0 4
34511: PUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: CALL_OW 274
34521: ST_TO_ADDR
// if not pom then
34522: LD_VAR 0 4
34526: NOT
34527: IFFALSE 34531
// exit ;
34529: GO 34632
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34531: LD_ADDR_VAR 0 5
34535: PUSH
34536: LD_VAR 0 2
34540: PPUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: CALL_OW 248
34550: PPUSH
34551: CALL_OW 450
34555: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34556: LD_ADDR_VAR 0 3
34560: PUSH
34561: LD_VAR 0 4
34565: PPUSH
34566: LD_INT 1
34568: PPUSH
34569: CALL_OW 275
34573: PUSH
34574: LD_VAR 0 5
34578: PUSH
34579: LD_INT 1
34581: ARRAY
34582: GREATEREQUAL
34583: PUSH
34584: LD_VAR 0 4
34588: PPUSH
34589: LD_INT 2
34591: PPUSH
34592: CALL_OW 275
34596: PUSH
34597: LD_VAR 0 5
34601: PUSH
34602: LD_INT 2
34604: ARRAY
34605: GREATEREQUAL
34606: AND
34607: PUSH
34608: LD_VAR 0 4
34612: PPUSH
34613: LD_INT 3
34615: PPUSH
34616: CALL_OW 275
34620: PUSH
34621: LD_VAR 0 5
34625: PUSH
34626: LD_INT 3
34628: ARRAY
34629: GREATEREQUAL
34630: AND
34631: ST_TO_ADDR
// end ;
34632: LD_VAR 0 3
34636: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
34637: LD_INT 0
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
34646: PPUSH
34647: PPUSH
34648: PPUSH
// result := false ;
34649: LD_ADDR_VAR 0 6
34653: PUSH
34654: LD_INT 0
34656: ST_TO_ADDR
// if not base or not btype or not x or not y then
34657: LD_VAR 0 1
34661: NOT
34662: PUSH
34663: LD_VAR 0 2
34667: NOT
34668: OR
34669: PUSH
34670: LD_VAR 0 3
34674: NOT
34675: OR
34676: PUSH
34677: LD_VAR 0 4
34681: NOT
34682: OR
34683: IFFALSE 34687
// exit ;
34685: GO 35296
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
34687: LD_ADDR_VAR 0 12
34691: PUSH
34692: LD_VAR 0 2
34696: PPUSH
34697: LD_VAR 0 3
34701: PPUSH
34702: LD_VAR 0 4
34706: PPUSH
34707: LD_VAR 0 5
34711: PPUSH
34712: LD_VAR 0 1
34716: PUSH
34717: LD_INT 1
34719: ARRAY
34720: PPUSH
34721: CALL_OW 248
34725: PPUSH
34726: LD_INT 0
34728: PPUSH
34729: CALL 36133 0 6
34733: ST_TO_ADDR
// if not hexes then
34734: LD_VAR 0 12
34738: NOT
34739: IFFALSE 34743
// exit ;
34741: GO 35296
// for i = 1 to hexes do
34743: LD_ADDR_VAR 0 7
34747: PUSH
34748: DOUBLE
34749: LD_INT 1
34751: DEC
34752: ST_TO_ADDR
34753: LD_VAR 0 12
34757: PUSH
34758: FOR_TO
34759: IFFALSE 35294
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34761: LD_ADDR_VAR 0 11
34765: PUSH
34766: LD_VAR 0 12
34770: PUSH
34771: LD_VAR 0 7
34775: ARRAY
34776: PUSH
34777: LD_INT 1
34779: ARRAY
34780: PPUSH
34781: LD_VAR 0 12
34785: PUSH
34786: LD_VAR 0 7
34790: ARRAY
34791: PUSH
34792: LD_INT 2
34794: ARRAY
34795: PPUSH
34796: CALL_OW 428
34800: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34801: LD_VAR 0 12
34805: PUSH
34806: LD_VAR 0 7
34810: ARRAY
34811: PUSH
34812: LD_INT 1
34814: ARRAY
34815: PPUSH
34816: LD_VAR 0 12
34820: PUSH
34821: LD_VAR 0 7
34825: ARRAY
34826: PUSH
34827: LD_INT 2
34829: ARRAY
34830: PPUSH
34831: CALL_OW 351
34835: PUSH
34836: LD_VAR 0 12
34840: PUSH
34841: LD_VAR 0 7
34845: ARRAY
34846: PUSH
34847: LD_INT 1
34849: ARRAY
34850: PPUSH
34851: LD_VAR 0 12
34855: PUSH
34856: LD_VAR 0 7
34860: ARRAY
34861: PUSH
34862: LD_INT 2
34864: ARRAY
34865: PPUSH
34866: CALL_OW 488
34870: NOT
34871: OR
34872: PUSH
34873: LD_VAR 0 11
34877: PPUSH
34878: CALL_OW 247
34882: PUSH
34883: LD_INT 3
34885: EQUAL
34886: OR
34887: IFFALSE 34893
// exit ;
34889: POP
34890: POP
34891: GO 35296
// if not tmp or not tmp in base then
34893: LD_VAR 0 11
34897: NOT
34898: PUSH
34899: LD_VAR 0 11
34903: PUSH
34904: LD_VAR 0 1
34908: IN
34909: NOT
34910: OR
34911: IFFALSE 34915
// continue ;
34913: GO 34758
// result := true ;
34915: LD_ADDR_VAR 0 6
34919: PUSH
34920: LD_INT 1
34922: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34923: LD_ADDR_VAR 0 15
34927: PUSH
34928: LD_VAR 0 1
34932: PPUSH
34933: LD_INT 22
34935: PUSH
34936: LD_VAR 0 11
34940: PPUSH
34941: CALL_OW 255
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: LD_INT 30
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 30
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: LIST
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PPUSH
34982: CALL_OW 72
34986: ST_TO_ADDR
// if dep then
34987: LD_VAR 0 15
34991: IFFALSE 35127
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34993: LD_ADDR_VAR 0 14
34997: PUSH
34998: LD_VAR 0 15
35002: PUSH
35003: LD_INT 1
35005: ARRAY
35006: PPUSH
35007: CALL_OW 250
35011: PPUSH
35012: LD_VAR 0 15
35016: PUSH
35017: LD_INT 1
35019: ARRAY
35020: PPUSH
35021: CALL_OW 254
35025: PPUSH
35026: LD_INT 5
35028: PPUSH
35029: CALL_OW 272
35033: PUSH
35034: LD_VAR 0 15
35038: PUSH
35039: LD_INT 1
35041: ARRAY
35042: PPUSH
35043: CALL_OW 251
35047: PPUSH
35048: LD_VAR 0 15
35052: PUSH
35053: LD_INT 1
35055: ARRAY
35056: PPUSH
35057: CALL_OW 254
35061: PPUSH
35062: LD_INT 5
35064: PPUSH
35065: CALL_OW 273
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35074: LD_VAR 0 14
35078: PUSH
35079: LD_INT 1
35081: ARRAY
35082: PPUSH
35083: LD_VAR 0 14
35087: PUSH
35088: LD_INT 2
35090: ARRAY
35091: PPUSH
35092: CALL_OW 488
35096: IFFALSE 35127
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35098: LD_VAR 0 11
35102: PPUSH
35103: LD_VAR 0 14
35107: PUSH
35108: LD_INT 1
35110: ARRAY
35111: PPUSH
35112: LD_VAR 0 14
35116: PUSH
35117: LD_INT 2
35119: ARRAY
35120: PPUSH
35121: CALL_OW 111
// continue ;
35125: GO 34758
// end ; end ; r := GetDir ( tmp ) ;
35127: LD_ADDR_VAR 0 13
35131: PUSH
35132: LD_VAR 0 11
35136: PPUSH
35137: CALL_OW 254
35141: ST_TO_ADDR
// if r = 5 then
35142: LD_VAR 0 13
35146: PUSH
35147: LD_INT 5
35149: EQUAL
35150: IFFALSE 35160
// r := 0 ;
35152: LD_ADDR_VAR 0 13
35156: PUSH
35157: LD_INT 0
35159: ST_TO_ADDR
// for j = r to 5 do
35160: LD_ADDR_VAR 0 8
35164: PUSH
35165: DOUBLE
35166: LD_VAR 0 13
35170: DEC
35171: ST_TO_ADDR
35172: LD_INT 5
35174: PUSH
35175: FOR_TO
35176: IFFALSE 35290
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35178: LD_ADDR_VAR 0 9
35182: PUSH
35183: LD_VAR 0 11
35187: PPUSH
35188: CALL_OW 250
35192: PPUSH
35193: LD_VAR 0 8
35197: PPUSH
35198: LD_INT 2
35200: PPUSH
35201: CALL_OW 272
35205: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35206: LD_ADDR_VAR 0 10
35210: PUSH
35211: LD_VAR 0 11
35215: PPUSH
35216: CALL_OW 251
35220: PPUSH
35221: LD_VAR 0 8
35225: PPUSH
35226: LD_INT 2
35228: PPUSH
35229: CALL_OW 273
35233: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35234: LD_VAR 0 9
35238: PPUSH
35239: LD_VAR 0 10
35243: PPUSH
35244: CALL_OW 488
35248: PUSH
35249: LD_VAR 0 9
35253: PPUSH
35254: LD_VAR 0 10
35258: PPUSH
35259: CALL_OW 428
35263: NOT
35264: AND
35265: IFFALSE 35288
// begin ComMoveXY ( tmp , _x , _y ) ;
35267: LD_VAR 0 11
35271: PPUSH
35272: LD_VAR 0 9
35276: PPUSH
35277: LD_VAR 0 10
35281: PPUSH
35282: CALL_OW 111
// break ;
35286: GO 35290
// end ; end ;
35288: GO 35175
35290: POP
35291: POP
// end ;
35292: GO 34758
35294: POP
35295: POP
// end ;
35296: LD_VAR 0 6
35300: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
35301: LD_INT 0
35303: PPUSH
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
35312: PPUSH
// result := false ;
35313: LD_ADDR_VAR 0 6
35317: PUSH
35318: LD_INT 0
35320: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35321: LD_VAR 0 1
35325: NOT
35326: PUSH
35327: LD_VAR 0 1
35331: PPUSH
35332: CALL_OW 266
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: IN
35347: NOT
35348: OR
35349: PUSH
35350: LD_VAR 0 2
35354: NOT
35355: OR
35356: PUSH
35357: LD_VAR 0 5
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: LD_INT 2
35370: PUSH
35371: LD_INT 3
35373: PUSH
35374: LD_INT 4
35376: PUSH
35377: LD_INT 5
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: IN
35388: NOT
35389: OR
35390: PUSH
35391: LD_VAR 0 3
35395: PPUSH
35396: LD_VAR 0 4
35400: PPUSH
35401: CALL_OW 488
35405: NOT
35406: OR
35407: IFFALSE 35411
// exit ;
35409: GO 36128
// pom := GetBase ( depot ) ;
35411: LD_ADDR_VAR 0 10
35415: PUSH
35416: LD_VAR 0 1
35420: PPUSH
35421: CALL_OW 274
35425: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35426: LD_ADDR_VAR 0 11
35430: PUSH
35431: LD_VAR 0 2
35435: PPUSH
35436: LD_VAR 0 1
35440: PPUSH
35441: CALL_OW 248
35445: PPUSH
35446: CALL_OW 450
35450: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35451: LD_VAR 0 10
35455: PPUSH
35456: LD_INT 1
35458: PPUSH
35459: CALL_OW 275
35463: PUSH
35464: LD_VAR 0 11
35468: PUSH
35469: LD_INT 1
35471: ARRAY
35472: GREATEREQUAL
35473: PUSH
35474: LD_VAR 0 10
35478: PPUSH
35479: LD_INT 2
35481: PPUSH
35482: CALL_OW 275
35486: PUSH
35487: LD_VAR 0 11
35491: PUSH
35492: LD_INT 2
35494: ARRAY
35495: GREATEREQUAL
35496: AND
35497: PUSH
35498: LD_VAR 0 10
35502: PPUSH
35503: LD_INT 3
35505: PPUSH
35506: CALL_OW 275
35510: PUSH
35511: LD_VAR 0 11
35515: PUSH
35516: LD_INT 3
35518: ARRAY
35519: GREATEREQUAL
35520: AND
35521: NOT
35522: IFFALSE 35526
// exit ;
35524: GO 36128
// if GetBType ( depot ) = b_depot then
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 266
35535: PUSH
35536: LD_INT 0
35538: EQUAL
35539: IFFALSE 35551
// dist := 28 else
35541: LD_ADDR_VAR 0 14
35545: PUSH
35546: LD_INT 28
35548: ST_TO_ADDR
35549: GO 35559
// dist := 36 ;
35551: LD_ADDR_VAR 0 14
35555: PUSH
35556: LD_INT 36
35558: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35559: LD_VAR 0 1
35563: PPUSH
35564: LD_VAR 0 3
35568: PPUSH
35569: LD_VAR 0 4
35573: PPUSH
35574: CALL_OW 297
35578: PUSH
35579: LD_VAR 0 14
35583: GREATER
35584: IFFALSE 35588
// exit ;
35586: GO 36128
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35588: LD_ADDR_VAR 0 12
35592: PUSH
35593: LD_VAR 0 2
35597: PPUSH
35598: LD_VAR 0 3
35602: PPUSH
35603: LD_VAR 0 4
35607: PPUSH
35608: LD_VAR 0 5
35612: PPUSH
35613: LD_VAR 0 1
35617: PPUSH
35618: CALL_OW 248
35622: PPUSH
35623: LD_INT 0
35625: PPUSH
35626: CALL 36133 0 6
35630: ST_TO_ADDR
// if not hexes then
35631: LD_VAR 0 12
35635: NOT
35636: IFFALSE 35640
// exit ;
35638: GO 36128
// hex := GetHexInfo ( x , y ) ;
35640: LD_ADDR_VAR 0 15
35644: PUSH
35645: LD_VAR 0 3
35649: PPUSH
35650: LD_VAR 0 4
35654: PPUSH
35655: CALL_OW 546
35659: ST_TO_ADDR
// if hex [ 1 ] then
35660: LD_VAR 0 15
35664: PUSH
35665: LD_INT 1
35667: ARRAY
35668: IFFALSE 35672
// exit ;
35670: GO 36128
// height := hex [ 2 ] ;
35672: LD_ADDR_VAR 0 13
35676: PUSH
35677: LD_VAR 0 15
35681: PUSH
35682: LD_INT 2
35684: ARRAY
35685: ST_TO_ADDR
// for i = 1 to hexes do
35686: LD_ADDR_VAR 0 7
35690: PUSH
35691: DOUBLE
35692: LD_INT 1
35694: DEC
35695: ST_TO_ADDR
35696: LD_VAR 0 12
35700: PUSH
35701: FOR_TO
35702: IFFALSE 36032
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35704: LD_VAR 0 12
35708: PUSH
35709: LD_VAR 0 7
35713: ARRAY
35714: PUSH
35715: LD_INT 1
35717: ARRAY
35718: PPUSH
35719: LD_VAR 0 12
35723: PUSH
35724: LD_VAR 0 7
35728: ARRAY
35729: PUSH
35730: LD_INT 2
35732: ARRAY
35733: PPUSH
35734: CALL_OW 488
35738: NOT
35739: PUSH
35740: LD_VAR 0 12
35744: PUSH
35745: LD_VAR 0 7
35749: ARRAY
35750: PUSH
35751: LD_INT 1
35753: ARRAY
35754: PPUSH
35755: LD_VAR 0 12
35759: PUSH
35760: LD_VAR 0 7
35764: ARRAY
35765: PUSH
35766: LD_INT 2
35768: ARRAY
35769: PPUSH
35770: CALL_OW 428
35774: PUSH
35775: LD_INT 0
35777: GREATER
35778: OR
35779: PUSH
35780: LD_VAR 0 12
35784: PUSH
35785: LD_VAR 0 7
35789: ARRAY
35790: PUSH
35791: LD_INT 1
35793: ARRAY
35794: PPUSH
35795: LD_VAR 0 12
35799: PUSH
35800: LD_VAR 0 7
35804: ARRAY
35805: PUSH
35806: LD_INT 2
35808: ARRAY
35809: PPUSH
35810: CALL_OW 351
35814: OR
35815: IFFALSE 35821
// exit ;
35817: POP
35818: POP
35819: GO 36128
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35821: LD_ADDR_VAR 0 8
35825: PUSH
35826: LD_VAR 0 12
35830: PUSH
35831: LD_VAR 0 7
35835: ARRAY
35836: PUSH
35837: LD_INT 1
35839: ARRAY
35840: PPUSH
35841: LD_VAR 0 12
35845: PUSH
35846: LD_VAR 0 7
35850: ARRAY
35851: PUSH
35852: LD_INT 2
35854: ARRAY
35855: PPUSH
35856: CALL_OW 546
35860: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35861: LD_VAR 0 8
35865: PUSH
35866: LD_INT 1
35868: ARRAY
35869: PUSH
35870: LD_VAR 0 8
35874: PUSH
35875: LD_INT 2
35877: ARRAY
35878: PUSH
35879: LD_VAR 0 13
35883: PUSH
35884: LD_INT 2
35886: PLUS
35887: GREATER
35888: OR
35889: PUSH
35890: LD_VAR 0 8
35894: PUSH
35895: LD_INT 2
35897: ARRAY
35898: PUSH
35899: LD_VAR 0 13
35903: PUSH
35904: LD_INT 2
35906: MINUS
35907: LESS
35908: OR
35909: PUSH
35910: LD_VAR 0 8
35914: PUSH
35915: LD_INT 3
35917: ARRAY
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: LD_INT 8
35924: PUSH
35925: LD_INT 9
35927: PUSH
35928: LD_INT 10
35930: PUSH
35931: LD_INT 11
35933: PUSH
35934: LD_INT 12
35936: PUSH
35937: LD_INT 13
35939: PUSH
35940: LD_INT 16
35942: PUSH
35943: LD_INT 17
35945: PUSH
35946: LD_INT 18
35948: PUSH
35949: LD_INT 19
35951: PUSH
35952: LD_INT 20
35954: PUSH
35955: LD_INT 21
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: IN
35973: NOT
35974: OR
35975: PUSH
35976: LD_VAR 0 8
35980: PUSH
35981: LD_INT 5
35983: ARRAY
35984: NOT
35985: OR
35986: PUSH
35987: LD_VAR 0 8
35991: PUSH
35992: LD_INT 6
35994: ARRAY
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: LD_INT 7
36004: PUSH
36005: LD_INT 9
36007: PUSH
36008: LD_INT 10
36010: PUSH
36011: LD_INT 11
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: IN
36022: NOT
36023: OR
36024: IFFALSE 36030
// exit ;
36026: POP
36027: POP
36028: GO 36128
// end ;
36030: GO 35701
36032: POP
36033: POP
// side := GetSide ( depot ) ;
36034: LD_ADDR_VAR 0 9
36038: PUSH
36039: LD_VAR 0 1
36043: PPUSH
36044: CALL_OW 255
36048: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36049: LD_VAR 0 9
36053: PPUSH
36054: LD_VAR 0 3
36058: PPUSH
36059: LD_VAR 0 4
36063: PPUSH
36064: LD_INT 20
36066: PPUSH
36067: CALL 28782 0 4
36071: PUSH
36072: LD_INT 4
36074: ARRAY
36075: IFFALSE 36079
// exit ;
36077: GO 36128
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36079: LD_VAR 0 2
36083: PUSH
36084: LD_INT 29
36086: PUSH
36087: LD_INT 30
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: IN
36094: PUSH
36095: LD_VAR 0 3
36099: PPUSH
36100: LD_VAR 0 4
36104: PPUSH
36105: LD_VAR 0 9
36109: PPUSH
36110: CALL_OW 440
36114: NOT
36115: AND
36116: IFFALSE 36120
// exit ;
36118: GO 36128
// result := true ;
36120: LD_ADDR_VAR 0 6
36124: PUSH
36125: LD_INT 1
36127: ST_TO_ADDR
// end ;
36128: LD_VAR 0 6
36132: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
36133: LD_INT 0
36135: PPUSH
36136: PPUSH
36137: PPUSH
36138: PPUSH
36139: PPUSH
36140: PPUSH
36141: PPUSH
36142: PPUSH
36143: PPUSH
36144: PPUSH
36145: PPUSH
36146: PPUSH
36147: PPUSH
36148: PPUSH
36149: PPUSH
36150: PPUSH
36151: PPUSH
36152: PPUSH
36153: PPUSH
36154: PPUSH
36155: PPUSH
36156: PPUSH
36157: PPUSH
36158: PPUSH
36159: PPUSH
36160: PPUSH
36161: PPUSH
36162: PPUSH
36163: PPUSH
36164: PPUSH
36165: PPUSH
36166: PPUSH
36167: PPUSH
36168: PPUSH
36169: PPUSH
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
36174: PPUSH
36175: PPUSH
36176: PPUSH
36177: PPUSH
36178: PPUSH
36179: PPUSH
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
36184: PPUSH
36185: PPUSH
36186: PPUSH
36187: PPUSH
36188: PPUSH
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
// result = [ ] ;
36193: LD_ADDR_VAR 0 7
36197: PUSH
36198: EMPTY
36199: ST_TO_ADDR
// temp_list = [ ] ;
36200: LD_ADDR_VAR 0 9
36204: PUSH
36205: EMPTY
36206: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36207: LD_VAR 0 4
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: LD_INT 3
36223: PUSH
36224: LD_INT 4
36226: PUSH
36227: LD_INT 5
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: IN
36238: NOT
36239: PUSH
36240: LD_VAR 0 1
36244: PUSH
36245: LD_INT 0
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: IN
36255: PUSH
36256: LD_VAR 0 5
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: LD_INT 3
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: LIST
36274: IN
36275: NOT
36276: AND
36277: OR
36278: IFFALSE 36282
// exit ;
36280: GO 54673
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36282: LD_VAR 0 1
36286: PUSH
36287: LD_INT 6
36289: PUSH
36290: LD_INT 7
36292: PUSH
36293: LD_INT 8
36295: PUSH
36296: LD_INT 13
36298: PUSH
36299: LD_INT 12
36301: PUSH
36302: LD_INT 15
36304: PUSH
36305: LD_INT 11
36307: PUSH
36308: LD_INT 14
36310: PUSH
36311: LD_INT 10
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: IN
36325: IFFALSE 36335
// btype = b_lab ;
36327: LD_ADDR_VAR 0 1
36331: PUSH
36332: LD_INT 6
36334: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36335: LD_VAR 0 6
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 2
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: IN
36354: NOT
36355: PUSH
36356: LD_VAR 0 1
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 3
36372: PUSH
36373: LD_INT 6
36375: PUSH
36376: LD_INT 36
36378: PUSH
36379: LD_INT 4
36381: PUSH
36382: LD_INT 5
36384: PUSH
36385: LD_INT 31
36387: PUSH
36388: LD_INT 32
36390: PUSH
36391: LD_INT 33
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: IN
36407: NOT
36408: PUSH
36409: LD_VAR 0 6
36413: PUSH
36414: LD_INT 1
36416: EQUAL
36417: AND
36418: OR
36419: PUSH
36420: LD_VAR 0 1
36424: PUSH
36425: LD_INT 2
36427: PUSH
36428: LD_INT 3
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: IN
36435: NOT
36436: PUSH
36437: LD_VAR 0 6
36441: PUSH
36442: LD_INT 2
36444: EQUAL
36445: AND
36446: OR
36447: IFFALSE 36457
// mode = 0 ;
36449: LD_ADDR_VAR 0 6
36453: PUSH
36454: LD_INT 0
36456: ST_TO_ADDR
// case mode of 0 :
36457: LD_VAR 0 6
36461: PUSH
36462: LD_INT 0
36464: DOUBLE
36465: EQUAL
36466: IFTRUE 36470
36468: GO 47923
36470: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36471: LD_ADDR_VAR 0 11
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 3
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: LD_INT 3
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36664: LD_ADDR_VAR 0 12
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 2
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 2
36787: NEG
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 2
36798: NEG
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: NEG
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 3
36821: NEG
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 3
36832: NEG
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36860: LD_ADDR_VAR 0 13
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: LD_INT 2
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: LD_INT 2
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: LD_INT 2
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: NEG
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 2
36995: NEG
36996: PUSH
36997: LD_INT 2
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: LD_INT 3
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 3
37019: NEG
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 3
37031: NEG
37032: PUSH
37033: LD_INT 3
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37059: LD_ADDR_VAR 0 14
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: LD_INT 2
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: LD_INT 2
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: LD_INT 2
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: LD_INT 1
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: LD_INT 3
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 3
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 2
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37255: LD_ADDR_VAR 0 15
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 2
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: LD_INT 1
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 2
37389: NEG
37390: PUSH
37391: LD_INT 1
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 3
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 3
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37448: LD_ADDR_VAR 0 16
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: LD_INT 1
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 2
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 2
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: LD_INT 2
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 2
37571: NEG
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 3
37605: PUSH
37606: LD_INT 3
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: LD_INT 3
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37641: LD_ADDR_VAR 0 17
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: LD_INT 2
37726: NEG
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 2
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 2
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: LD_INT 2
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37871: LD_ADDR_VAR 0 18
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 2
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 2
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: LD_INT 2
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: LD_INT 2
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 2
38047: NEG
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: LD_INT 2
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38101: LD_ADDR_VAR 0 19
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 2
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 2
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 2
38277: NEG
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38331: LD_ADDR_VAR 0 20
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: LD_INT 1
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: LD_INT 2
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 2
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 2
38466: PUSH
38467: LD_INT 2
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: LD_INT 2
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 2
38507: NEG
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 2
38518: NEG
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 2
38530: NEG
38531: PUSH
38532: LD_INT 2
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38561: LD_ADDR_VAR 0 21
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 1
38642: NEG
38643: PUSH
38644: LD_INT 2
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 2
38737: NEG
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 2
38748: NEG
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: LD_INT 2
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38791: LD_ADDR_VAR 0 22
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39021: LD_ADDR_VAR 0 23
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 1
39079: NEG
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 2
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 2
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 2
39197: NEG
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 2
39208: NEG
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: LD_INT 3
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: LD_INT 3
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39301: LD_ADDR_VAR 0 24
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 2
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: NEG
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 3
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 3
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39577: LD_ADDR_VAR 0 25
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: NEG
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: NEG
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 3
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 3
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: LD_INT 3
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: LD_INT 3
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39851: LD_ADDR_VAR 0 26
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 2
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 2
40050: NEG
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 2
40062: PUSH
40063: LD_INT 3
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40127: LD_ADDR_VAR 0 27
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 2
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 3
40360: NEG
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 3
40372: NEG
40373: PUSH
40374: LD_INT 2
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40407: LD_ADDR_VAR 0 28
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: NEG
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: NEG
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 2
40606: NEG
40607: PUSH
40608: LD_INT 2
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: LD_INT 3
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: LD_INT 3
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 3
40642: NEG
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 3
40654: NEG
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40689: LD_ADDR_VAR 0 29
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 2
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 2
40855: NEG
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: NEG
40868: PUSH
40869: LD_INT 2
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: LD_INT 3
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 3
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 3
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 3
40933: NEG
40934: PUSH
40935: LD_INT 2
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40968: LD_ADDR_VAR 0 30
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: LD_INT 2
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 3
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 3
41180: PUSH
41181: LD_INT 2
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 2
41190: PUSH
41191: LD_INT 3
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 3
41211: NEG
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41246: LD_ADDR_VAR 0 31
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: LD_INT 2
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: LD_INT 2
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 2
41435: NEG
41436: PUSH
41437: LD_INT 3
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 3
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 3
41489: NEG
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41524: LD_ADDR_VAR 0 32
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 3
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 3
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 2
41746: PUSH
41747: LD_INT 3
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: NEG
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 3
41767: NEG
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41802: LD_ADDR_VAR 0 33
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 2
41980: NEG
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: LD_INT 3
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 3
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 3
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 3
42046: NEG
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42081: LD_ADDR_VAR 0 34
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 3
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 3
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: LD_INT 3
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 3
42326: NEG
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42361: LD_ADDR_VAR 0 35
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 2
42452: NEG
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42473: LD_ADDR_VAR 0 36
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42585: LD_ADDR_VAR 0 37
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42697: LD_ADDR_VAR 0 38
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 2
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42809: LD_ADDR_VAR 0 39
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42921: LD_ADDR_VAR 0 40
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: NEG
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43033: LD_ADDR_VAR 0 41
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: LD_INT 2
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: NEG
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: LD_INT 3
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 3
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 3
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 3
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 3
43276: PUSH
43277: LD_INT 3
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 3
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: NEG
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 3
43307: NEG
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 3
43318: NEG
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 3
43330: NEG
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 3
43342: NEG
43343: PUSH
43344: LD_INT 3
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43383: LD_ADDR_VAR 0 42
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 2
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: NEG
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 3
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: LD_INT 3
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 3
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 3
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 3
43629: PUSH
43630: LD_INT 3
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 3
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 3
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 3
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 3
43680: NEG
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43733: LD_ADDR_VAR 0 43
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: LD_INT 2
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 2
43899: NEG
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: LD_INT 3
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 3
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 3
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 3
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: LD_INT 3
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 3
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 3
44029: NEG
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 3
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44081: LD_ADDR_VAR 0 44
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 3
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 3
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 3
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 3
44324: PUSH
44325: LD_INT 3
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: LD_INT 3
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 3
44355: NEG
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: NEG
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: NEG
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 3
44390: NEG
44391: PUSH
44392: LD_INT 3
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44431: LD_ADDR_VAR 0 45
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: LD_INT 3
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 3
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: LD_INT 3
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 3
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 3
44728: NEG
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 3
44740: NEG
44741: PUSH
44742: LD_INT 3
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44781: LD_ADDR_VAR 0 46
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 3
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 3
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 3
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 3
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 3
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 3
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 3
45077: NEG
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45129: LD_ADDR_VAR 0 47
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45280: LD_ADDR_VAR 0 48
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45427: LD_ADDR_VAR 0 49
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45571: LD_ADDR_VAR 0 50
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45715: LD_ADDR_VAR 0 51
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45862: LD_ADDR_VAR 0 52
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 2
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46013: LD_ADDR_VAR 0 53
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46243: LD_ADDR_VAR 0 54
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46473: LD_ADDR_VAR 0 55
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46703: LD_ADDR_VAR 0 56
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46933: LD_ADDR_VAR 0 57
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47163: LD_ADDR_VAR 0 58
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47393: LD_ADDR_VAR 0 59
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47481: LD_ADDR_VAR 0 60
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47569: LD_ADDR_VAR 0 61
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47657: LD_ADDR_VAR 0 62
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47745: LD_ADDR_VAR 0 63
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47833: LD_ADDR_VAR 0 64
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// end ; 1 :
47921: GO 53818
47923: LD_INT 1
47925: DOUBLE
47926: EQUAL
47927: IFTRUE 47931
47929: GO 50554
47931: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47932: LD_ADDR_VAR 0 11
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 3
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: LIST
47975: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47976: LD_ADDR_VAR 0 12
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 3
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48017: LD_ADDR_VAR 0 13
48021: PUSH
48022: LD_INT 3
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 3
48034: PUSH
48035: LD_INT 3
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: LD_INT 3
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48057: LD_ADDR_VAR 0 14
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 3
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: LD_INT 3
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48098: LD_ADDR_VAR 0 15
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 3
48116: NEG
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48142: LD_ADDR_VAR 0 16
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: LD_INT 3
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: NEG
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 3
48173: NEG
48174: PUSH
48175: LD_INT 3
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: LIST
48187: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48188: LD_ADDR_VAR 0 17
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 3
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: LIST
48231: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48232: LD_ADDR_VAR 0 18
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48273: LD_ADDR_VAR 0 19
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: PUSH
48291: LD_INT 3
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: LD_INT 3
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48313: LD_ADDR_VAR 0 20
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 3
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: LD_INT 3
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: LIST
48353: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48354: LD_ADDR_VAR 0 21
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 3
48372: NEG
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: LIST
48397: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48398: LD_ADDR_VAR 0 22
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 3
48429: NEG
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48444: LD_ADDR_VAR 0 23
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 3
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 4
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48488: LD_ADDR_VAR 0 24
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 4
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48529: LD_ADDR_VAR 0 25
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: LD_INT 3
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 4
48546: PUSH
48547: LD_INT 3
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 3
48556: PUSH
48557: LD_INT 4
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48569: LD_ADDR_VAR 0 26
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 3
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 4
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: LIST
48609: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48610: LD_ADDR_VAR 0 27
48614: PUSH
48615: LD_INT 3
48617: NEG
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 3
48628: NEG
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 4
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48654: LD_ADDR_VAR 0 28
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: LD_INT 3
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 3
48673: NEG
48674: PUSH
48675: LD_INT 4
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 4
48685: NEG
48686: PUSH
48687: LD_INT 3
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: LIST
48699: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48700: LD_ADDR_VAR 0 29
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 4
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: LD_INT 4
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 3
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 5
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 5
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: LD_INT 4
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 6
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 6
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 5
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48855: LD_ADDR_VAR 0 30
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 3
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 3
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 3
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 4
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 4
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 4
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 5
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 5
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 5
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 6
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 6
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48998: LD_ADDR_VAR 0 31
49002: PUSH
49003: LD_INT 3
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 3
49015: PUSH
49016: LD_INT 3
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 3
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 4
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 4
49045: PUSH
49046: LD_INT 4
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 3
49055: PUSH
49056: LD_INT 4
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 5
49065: PUSH
49066: LD_INT 4
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 5
49075: PUSH
49076: LD_INT 5
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 4
49085: PUSH
49086: LD_INT 5
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 6
49095: PUSH
49096: LD_INT 5
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 6
49105: PUSH
49106: LD_INT 6
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 5
49115: PUSH
49116: LD_INT 6
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49137: LD_ADDR_VAR 0 32
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 3
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 3
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 4
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 4
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 5
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 5
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 4
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 6
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 6
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 5
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49280: LD_ADDR_VAR 0 33
49284: PUSH
49285: LD_INT 2
49287: NEG
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 3
49298: NEG
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 3
49309: NEG
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 3
49321: NEG
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 4
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 4
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 4
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 5
49366: NEG
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 5
49377: NEG
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 5
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 6
49400: NEG
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 6
49411: NEG
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49435: LD_ADDR_VAR 0 34
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 3
49454: NEG
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 3
49466: NEG
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: LD_INT 4
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 4
49490: NEG
49491: PUSH
49492: LD_INT 3
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 4
49502: NEG
49503: PUSH
49504: LD_INT 4
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 4
49514: NEG
49515: PUSH
49516: LD_INT 5
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 5
49526: NEG
49527: PUSH
49528: LD_INT 4
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 5
49538: NEG
49539: PUSH
49540: LD_INT 5
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 5
49550: NEG
49551: PUSH
49552: LD_INT 6
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 6
49562: NEG
49563: PUSH
49564: LD_INT 5
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 6
49574: NEG
49575: PUSH
49576: LD_INT 6
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49598: LD_ADDR_VAR 0 41
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: LIST
49641: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49642: LD_ADDR_VAR 0 42
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 3
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49683: LD_ADDR_VAR 0 43
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 3
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: LIST
49722: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49723: LD_ADDR_VAR 0 44
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: LD_INT 3
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: LIST
49763: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49764: LD_ADDR_VAR 0 45
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: LIST
49807: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49808: LD_ADDR_VAR 0 46
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: LD_INT 3
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 3
49839: NEG
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49854: LD_ADDR_VAR 0 47
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: LD_INT 3
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49887: LD_ADDR_VAR 0 48
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49918: LD_ADDR_VAR 0 49
49922: PUSH
49923: LD_INT 3
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 3
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49947: LD_ADDR_VAR 0 50
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 3
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49976: LD_ADDR_VAR 0 51
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50007: LD_ADDR_VAR 0 52
50011: PUSH
50012: LD_INT 3
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 3
50026: NEG
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50040: LD_ADDR_VAR 0 53
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 3
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: LIST
50083: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50084: LD_ADDR_VAR 0 54
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 3
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50125: LD_ADDR_VAR 0 55
50129: PUSH
50130: LD_INT 3
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: LD_INT 3
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: LIST
50164: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50165: LD_ADDR_VAR 0 56
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 3
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: LIST
50205: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50206: LD_ADDR_VAR 0 57
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 3
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 3
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: LIST
50249: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50250: LD_ADDR_VAR 0 58
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: LD_INT 3
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50296: LD_ADDR_VAR 0 59
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50340: LD_ADDR_VAR 0 60
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50381: LD_ADDR_VAR 0 61
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: LD_INT 2
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50421: LD_ADDR_VAR 0 62
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: LIST
50461: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50462: LD_ADDR_VAR 0 63
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50506: LD_ADDR_VAR 0 64
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// end ; 2 :
50552: GO 53818
50554: LD_INT 2
50556: DOUBLE
50557: EQUAL
50558: IFTRUE 50562
50560: GO 53817
50562: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50563: LD_ADDR_VAR 0 29
50567: PUSH
50568: LD_INT 4
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 4
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 5
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 5
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 4
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 3
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 5
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 3
50663: PUSH
50664: LD_INT 3
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 3
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 4
50683: PUSH
50684: LD_INT 3
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 4
50693: PUSH
50694: LD_INT 4
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 3
50703: PUSH
50704: LD_INT 4
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 3
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 4
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 4
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 4
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 4
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 5
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 5
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: LD_INT 4
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 5
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: LD_INT 3
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 3
50846: NEG
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 3
50857: NEG
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 3
50891: NEG
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 4
50902: NEG
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 4
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 4
50925: NEG
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 4
50948: NEG
50949: PUSH
50950: LD_INT 4
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 4
50960: NEG
50961: PUSH
50962: LD_INT 5
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 3
50972: NEG
50973: PUSH
50974: LD_INT 4
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: NEG
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 4
50996: NEG
50997: PUSH
50998: LD_INT 3
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 5
51008: NEG
51009: PUSH
51010: LD_INT 4
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 5
51020: NEG
51021: PUSH
51022: LD_INT 5
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 3
51032: NEG
51033: PUSH
51034: LD_INT 5
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 5
51044: NEG
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51101: LD_ADDR_VAR 0 30
51105: PUSH
51106: LD_INT 4
51108: PUSH
51109: LD_INT 4
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 4
51118: PUSH
51119: LD_INT 3
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 5
51128: PUSH
51129: LD_INT 4
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 5
51138: PUSH
51139: LD_INT 5
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 4
51148: PUSH
51149: LD_INT 5
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 4
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 3
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 5
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: LD_INT 5
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 3
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 3
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 4
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 4
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 4
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 4
51291: NEG
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 4
51302: NEG
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 3
51325: NEG
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 4
51336: NEG
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 5
51347: NEG
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 5
51358: NEG
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 5
51370: NEG
51371: PUSH
51372: LD_INT 2
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: NEG
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 3
51405: NEG
51406: PUSH
51407: LD_INT 4
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 3
51441: NEG
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 4
51453: NEG
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 4
51465: NEG
51466: PUSH
51467: LD_INT 4
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: LD_INT 4
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 4
51489: NEG
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 4
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 5
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: LD_INT 4
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 3
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 4
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 5
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 3
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: LD_INT 5
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51648: LD_ADDR_VAR 0 31
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 4
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 4
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: LD_INT 5
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 5
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 4
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: LD_INT 5
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 4
51804: NEG
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 4
51815: NEG
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 4
51827: NEG
51828: PUSH
51829: LD_INT 2
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 4
51850: NEG
51851: PUSH
51852: LD_INT 4
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 4
51862: NEG
51863: PUSH
51864: LD_INT 5
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: LD_INT 4
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: NEG
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 4
51898: NEG
51899: PUSH
51900: LD_INT 3
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 5
51910: NEG
51911: PUSH
51912: LD_INT 4
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 5
51922: NEG
51923: PUSH
51924: LD_INT 5
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: LD_INT 5
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 5
51946: NEG
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 3
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 4
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: LD_INT 3
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 4
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: LD_INT 4
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 4
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 4
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 5
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 5
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 4
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 3
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 5
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52198: LD_ADDR_VAR 0 32
52202: PUSH
52203: LD_INT 4
52205: NEG
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 4
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 3
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 4
52250: NEG
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 5
52261: NEG
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 5
52272: NEG
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 5
52284: NEG
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: LD_INT 4
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: LD_INT 3
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 3
52355: NEG
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 4
52367: NEG
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 4
52379: NEG
52380: PUSH
52381: LD_INT 4
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: NEG
52392: PUSH
52393: LD_INT 4
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 4
52403: NEG
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 4
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 5
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 4
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 3
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 3
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: LD_INT 4
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 5
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: LD_INT 3
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: LD_INT 5
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 3
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 4
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 4
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 4
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 4
52610: PUSH
52611: LD_INT 4
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 4
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 5
52630: PUSH
52631: LD_INT 4
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 5
52640: PUSH
52641: LD_INT 5
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 4
52650: PUSH
52651: LD_INT 5
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: LD_INT 4
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 5
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: LD_INT 5
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52745: LD_ADDR_VAR 0 33
52749: PUSH
52750: LD_INT 4
52752: NEG
52753: PUSH
52754: LD_INT 4
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 4
52764: NEG
52765: PUSH
52766: LD_INT 5
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 3
52776: NEG
52777: PUSH
52778: LD_INT 4
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: LD_INT 3
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 4
52800: NEG
52801: PUSH
52802: LD_INT 3
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 5
52812: NEG
52813: PUSH
52814: LD_INT 4
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 5
52824: NEG
52825: PUSH
52826: LD_INT 5
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: LD_INT 5
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 5
52848: NEG
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 3
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 4
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 3
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 4
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: LD_INT 4
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 4
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 4
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 5
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 5
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 4
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 5
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 3
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 3
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 4
53075: PUSH
53076: LD_INT 3
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 4
53085: PUSH
53086: LD_INT 4
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 3
53095: PUSH
53096: LD_INT 4
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 3
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 4
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 4
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 4
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 4
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 5
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 5
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 4
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 3
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 5
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53283: LD_ADDR_VAR 0 34
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 4
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 5
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: LD_INT 4
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 4
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 5
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 3
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: NEG
53381: PUSH
53382: LD_INT 5
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 3
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 3
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 4
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 4
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 4
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 4
53485: PUSH
53486: LD_INT 4
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 4
53495: PUSH
53496: LD_INT 3
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 5
53505: PUSH
53506: LD_INT 4
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 5
53515: PUSH
53516: LD_INT 5
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 4
53525: PUSH
53526: LD_INT 5
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 4
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: LD_INT 3
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 5
53555: PUSH
53556: LD_INT 3
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: LD_INT 5
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 4
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 4
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: LD_INT 4
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 4
53668: NEG
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 4
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 3
53691: NEG
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 4
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 5
53724: NEG
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 5
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 5
53747: NEG
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: ST_TO_ADDR
// end ; end ;
53815: GO 53818
53817: POP
// case btype of b_depot , b_warehouse :
53818: LD_VAR 0 1
53822: PUSH
53823: LD_INT 0
53825: DOUBLE
53826: EQUAL
53827: IFTRUE 53837
53829: LD_INT 1
53831: DOUBLE
53832: EQUAL
53833: IFTRUE 53837
53835: GO 54038
53837: POP
// case nation of nation_american :
53838: LD_VAR 0 5
53842: PUSH
53843: LD_INT 1
53845: DOUBLE
53846: EQUAL
53847: IFTRUE 53851
53849: GO 53907
53851: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
53852: LD_ADDR_VAR 0 9
53856: PUSH
53857: LD_VAR 0 11
53861: PUSH
53862: LD_VAR 0 12
53866: PUSH
53867: LD_VAR 0 13
53871: PUSH
53872: LD_VAR 0 14
53876: PUSH
53877: LD_VAR 0 15
53881: PUSH
53882: LD_VAR 0 16
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: PUSH
53895: LD_VAR 0 4
53899: PUSH
53900: LD_INT 1
53902: PLUS
53903: ARRAY
53904: ST_TO_ADDR
53905: GO 54036
53907: LD_INT 2
53909: DOUBLE
53910: EQUAL
53911: IFTRUE 53915
53913: GO 53971
53915: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
53916: LD_ADDR_VAR 0 9
53920: PUSH
53921: LD_VAR 0 17
53925: PUSH
53926: LD_VAR 0 18
53930: PUSH
53931: LD_VAR 0 19
53935: PUSH
53936: LD_VAR 0 20
53940: PUSH
53941: LD_VAR 0 21
53945: PUSH
53946: LD_VAR 0 22
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: PUSH
53959: LD_VAR 0 4
53963: PUSH
53964: LD_INT 1
53966: PLUS
53967: ARRAY
53968: ST_TO_ADDR
53969: GO 54036
53971: LD_INT 3
53973: DOUBLE
53974: EQUAL
53975: IFTRUE 53979
53977: GO 54035
53979: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53980: LD_ADDR_VAR 0 9
53984: PUSH
53985: LD_VAR 0 23
53989: PUSH
53990: LD_VAR 0 24
53994: PUSH
53995: LD_VAR 0 25
53999: PUSH
54000: LD_VAR 0 26
54004: PUSH
54005: LD_VAR 0 27
54009: PUSH
54010: LD_VAR 0 28
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: PUSH
54023: LD_VAR 0 4
54027: PUSH
54028: LD_INT 1
54030: PLUS
54031: ARRAY
54032: ST_TO_ADDR
54033: GO 54036
54035: POP
54036: GO 54591
54038: LD_INT 2
54040: DOUBLE
54041: EQUAL
54042: IFTRUE 54052
54044: LD_INT 3
54046: DOUBLE
54047: EQUAL
54048: IFTRUE 54052
54050: GO 54108
54052: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54053: LD_ADDR_VAR 0 9
54057: PUSH
54058: LD_VAR 0 29
54062: PUSH
54063: LD_VAR 0 30
54067: PUSH
54068: LD_VAR 0 31
54072: PUSH
54073: LD_VAR 0 32
54077: PUSH
54078: LD_VAR 0 33
54082: PUSH
54083: LD_VAR 0 34
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: PUSH
54096: LD_VAR 0 4
54100: PUSH
54101: LD_INT 1
54103: PLUS
54104: ARRAY
54105: ST_TO_ADDR
54106: GO 54591
54108: LD_INT 16
54110: DOUBLE
54111: EQUAL
54112: IFTRUE 54170
54114: LD_INT 17
54116: DOUBLE
54117: EQUAL
54118: IFTRUE 54170
54120: LD_INT 18
54122: DOUBLE
54123: EQUAL
54124: IFTRUE 54170
54126: LD_INT 19
54128: DOUBLE
54129: EQUAL
54130: IFTRUE 54170
54132: LD_INT 22
54134: DOUBLE
54135: EQUAL
54136: IFTRUE 54170
54138: LD_INT 20
54140: DOUBLE
54141: EQUAL
54142: IFTRUE 54170
54144: LD_INT 21
54146: DOUBLE
54147: EQUAL
54148: IFTRUE 54170
54150: LD_INT 23
54152: DOUBLE
54153: EQUAL
54154: IFTRUE 54170
54156: LD_INT 24
54158: DOUBLE
54159: EQUAL
54160: IFTRUE 54170
54162: LD_INT 25
54164: DOUBLE
54165: EQUAL
54166: IFTRUE 54170
54168: GO 54226
54170: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54171: LD_ADDR_VAR 0 9
54175: PUSH
54176: LD_VAR 0 35
54180: PUSH
54181: LD_VAR 0 36
54185: PUSH
54186: LD_VAR 0 37
54190: PUSH
54191: LD_VAR 0 38
54195: PUSH
54196: LD_VAR 0 39
54200: PUSH
54201: LD_VAR 0 40
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: PUSH
54214: LD_VAR 0 4
54218: PUSH
54219: LD_INT 1
54221: PLUS
54222: ARRAY
54223: ST_TO_ADDR
54224: GO 54591
54226: LD_INT 6
54228: DOUBLE
54229: EQUAL
54230: IFTRUE 54282
54232: LD_INT 7
54234: DOUBLE
54235: EQUAL
54236: IFTRUE 54282
54238: LD_INT 8
54240: DOUBLE
54241: EQUAL
54242: IFTRUE 54282
54244: LD_INT 13
54246: DOUBLE
54247: EQUAL
54248: IFTRUE 54282
54250: LD_INT 12
54252: DOUBLE
54253: EQUAL
54254: IFTRUE 54282
54256: LD_INT 15
54258: DOUBLE
54259: EQUAL
54260: IFTRUE 54282
54262: LD_INT 11
54264: DOUBLE
54265: EQUAL
54266: IFTRUE 54282
54268: LD_INT 14
54270: DOUBLE
54271: EQUAL
54272: IFTRUE 54282
54274: LD_INT 10
54276: DOUBLE
54277: EQUAL
54278: IFTRUE 54282
54280: GO 54338
54282: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
54283: LD_ADDR_VAR 0 9
54287: PUSH
54288: LD_VAR 0 41
54292: PUSH
54293: LD_VAR 0 42
54297: PUSH
54298: LD_VAR 0 43
54302: PUSH
54303: LD_VAR 0 44
54307: PUSH
54308: LD_VAR 0 45
54312: PUSH
54313: LD_VAR 0 46
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: PUSH
54326: LD_VAR 0 4
54330: PUSH
54331: LD_INT 1
54333: PLUS
54334: ARRAY
54335: ST_TO_ADDR
54336: GO 54591
54338: LD_INT 36
54340: DOUBLE
54341: EQUAL
54342: IFTRUE 54346
54344: GO 54402
54346: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54347: LD_ADDR_VAR 0 9
54351: PUSH
54352: LD_VAR 0 47
54356: PUSH
54357: LD_VAR 0 48
54361: PUSH
54362: LD_VAR 0 49
54366: PUSH
54367: LD_VAR 0 50
54371: PUSH
54372: LD_VAR 0 51
54376: PUSH
54377: LD_VAR 0 52
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: PUSH
54390: LD_VAR 0 4
54394: PUSH
54395: LD_INT 1
54397: PLUS
54398: ARRAY
54399: ST_TO_ADDR
54400: GO 54591
54402: LD_INT 4
54404: DOUBLE
54405: EQUAL
54406: IFTRUE 54428
54408: LD_INT 5
54410: DOUBLE
54411: EQUAL
54412: IFTRUE 54428
54414: LD_INT 34
54416: DOUBLE
54417: EQUAL
54418: IFTRUE 54428
54420: LD_INT 37
54422: DOUBLE
54423: EQUAL
54424: IFTRUE 54428
54426: GO 54484
54428: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54429: LD_ADDR_VAR 0 9
54433: PUSH
54434: LD_VAR 0 53
54438: PUSH
54439: LD_VAR 0 54
54443: PUSH
54444: LD_VAR 0 55
54448: PUSH
54449: LD_VAR 0 56
54453: PUSH
54454: LD_VAR 0 57
54458: PUSH
54459: LD_VAR 0 58
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: PUSH
54472: LD_VAR 0 4
54476: PUSH
54477: LD_INT 1
54479: PLUS
54480: ARRAY
54481: ST_TO_ADDR
54482: GO 54591
54484: LD_INT 31
54486: DOUBLE
54487: EQUAL
54488: IFTRUE 54534
54490: LD_INT 32
54492: DOUBLE
54493: EQUAL
54494: IFTRUE 54534
54496: LD_INT 33
54498: DOUBLE
54499: EQUAL
54500: IFTRUE 54534
54502: LD_INT 27
54504: DOUBLE
54505: EQUAL
54506: IFTRUE 54534
54508: LD_INT 26
54510: DOUBLE
54511: EQUAL
54512: IFTRUE 54534
54514: LD_INT 28
54516: DOUBLE
54517: EQUAL
54518: IFTRUE 54534
54520: LD_INT 29
54522: DOUBLE
54523: EQUAL
54524: IFTRUE 54534
54526: LD_INT 30
54528: DOUBLE
54529: EQUAL
54530: IFTRUE 54534
54532: GO 54590
54534: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
54535: LD_ADDR_VAR 0 9
54539: PUSH
54540: LD_VAR 0 59
54544: PUSH
54545: LD_VAR 0 60
54549: PUSH
54550: LD_VAR 0 61
54554: PUSH
54555: LD_VAR 0 62
54559: PUSH
54560: LD_VAR 0 63
54564: PUSH
54565: LD_VAR 0 64
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: PUSH
54578: LD_VAR 0 4
54582: PUSH
54583: LD_INT 1
54585: PLUS
54586: ARRAY
54587: ST_TO_ADDR
54588: GO 54591
54590: POP
// temp_list2 = [ ] ;
54591: LD_ADDR_VAR 0 10
54595: PUSH
54596: EMPTY
54597: ST_TO_ADDR
// for i in temp_list do
54598: LD_ADDR_VAR 0 8
54602: PUSH
54603: LD_VAR 0 9
54607: PUSH
54608: FOR_IN
54609: IFFALSE 54661
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54611: LD_ADDR_VAR 0 10
54615: PUSH
54616: LD_VAR 0 10
54620: PUSH
54621: LD_VAR 0 8
54625: PUSH
54626: LD_INT 1
54628: ARRAY
54629: PUSH
54630: LD_VAR 0 2
54634: PLUS
54635: PUSH
54636: LD_VAR 0 8
54640: PUSH
54641: LD_INT 2
54643: ARRAY
54644: PUSH
54645: LD_VAR 0 3
54649: PLUS
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: ADD
54658: ST_TO_ADDR
54659: GO 54608
54661: POP
54662: POP
// result = temp_list2 ;
54663: LD_ADDR_VAR 0 7
54667: PUSH
54668: LD_VAR 0 10
54672: ST_TO_ADDR
// end ;
54673: LD_VAR 0 7
54677: RET
// export function EnemyInRange ( unit , dist ) ; begin
54678: LD_INT 0
54680: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54681: LD_ADDR_VAR 0 3
54685: PUSH
54686: LD_VAR 0 1
54690: PPUSH
54691: CALL_OW 255
54695: PPUSH
54696: LD_VAR 0 1
54700: PPUSH
54701: CALL_OW 250
54705: PPUSH
54706: LD_VAR 0 1
54710: PPUSH
54711: CALL_OW 251
54715: PPUSH
54716: LD_VAR 0 2
54720: PPUSH
54721: CALL 28782 0 4
54725: PUSH
54726: LD_INT 4
54728: ARRAY
54729: ST_TO_ADDR
// end ;
54730: LD_VAR 0 3
54734: RET
// export function PlayerSeeMe ( unit ) ; begin
54735: LD_INT 0
54737: PPUSH
// result := See ( your_side , unit ) ;
54738: LD_ADDR_VAR 0 2
54742: PUSH
54743: LD_OWVAR 2
54747: PPUSH
54748: LD_VAR 0 1
54752: PPUSH
54753: CALL_OW 292
54757: ST_TO_ADDR
// end ;
54758: LD_VAR 0 2
54762: RET
// export function ReverseDir ( unit ) ; begin
54763: LD_INT 0
54765: PPUSH
// if not unit then
54766: LD_VAR 0 1
54770: NOT
54771: IFFALSE 54775
// exit ;
54773: GO 54798
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54775: LD_ADDR_VAR 0 2
54779: PUSH
54780: LD_VAR 0 1
54784: PPUSH
54785: CALL_OW 254
54789: PUSH
54790: LD_INT 3
54792: PLUS
54793: PUSH
54794: LD_INT 6
54796: MOD
54797: ST_TO_ADDR
// end ;
54798: LD_VAR 0 2
54802: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54803: LD_INT 0
54805: PPUSH
54806: PPUSH
54807: PPUSH
54808: PPUSH
54809: PPUSH
// if not hexes then
54810: LD_VAR 0 2
54814: NOT
54815: IFFALSE 54819
// exit ;
54817: GO 54967
// dist := 9999 ;
54819: LD_ADDR_VAR 0 5
54823: PUSH
54824: LD_INT 9999
54826: ST_TO_ADDR
// for i = 1 to hexes do
54827: LD_ADDR_VAR 0 4
54831: PUSH
54832: DOUBLE
54833: LD_INT 1
54835: DEC
54836: ST_TO_ADDR
54837: LD_VAR 0 2
54841: PUSH
54842: FOR_TO
54843: IFFALSE 54955
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54845: LD_VAR 0 1
54849: PPUSH
54850: LD_VAR 0 2
54854: PUSH
54855: LD_VAR 0 4
54859: ARRAY
54860: PUSH
54861: LD_INT 1
54863: ARRAY
54864: PPUSH
54865: LD_VAR 0 2
54869: PUSH
54870: LD_VAR 0 4
54874: ARRAY
54875: PUSH
54876: LD_INT 2
54878: ARRAY
54879: PPUSH
54880: CALL_OW 297
54884: PUSH
54885: LD_VAR 0 5
54889: LESS
54890: IFFALSE 54953
// begin hex := hexes [ i ] ;
54892: LD_ADDR_VAR 0 7
54896: PUSH
54897: LD_VAR 0 2
54901: PUSH
54902: LD_VAR 0 4
54906: ARRAY
54907: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54908: LD_ADDR_VAR 0 5
54912: PUSH
54913: LD_VAR 0 1
54917: PPUSH
54918: LD_VAR 0 2
54922: PUSH
54923: LD_VAR 0 4
54927: ARRAY
54928: PUSH
54929: LD_INT 1
54931: ARRAY
54932: PPUSH
54933: LD_VAR 0 2
54937: PUSH
54938: LD_VAR 0 4
54942: ARRAY
54943: PUSH
54944: LD_INT 2
54946: ARRAY
54947: PPUSH
54948: CALL_OW 297
54952: ST_TO_ADDR
// end ; end ;
54953: GO 54842
54955: POP
54956: POP
// result := hex ;
54957: LD_ADDR_VAR 0 3
54961: PUSH
54962: LD_VAR 0 7
54966: ST_TO_ADDR
// end ;
54967: LD_VAR 0 3
54971: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54972: LD_INT 0
54974: PPUSH
54975: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54976: LD_VAR 0 1
54980: NOT
54981: PUSH
54982: LD_VAR 0 1
54986: PUSH
54987: LD_INT 21
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 23
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PPUSH
55011: CALL_OW 69
55015: IN
55016: NOT
55017: OR
55018: IFFALSE 55022
// exit ;
55020: GO 55069
// for i = 1 to 3 do
55022: LD_ADDR_VAR 0 3
55026: PUSH
55027: DOUBLE
55028: LD_INT 1
55030: DEC
55031: ST_TO_ADDR
55032: LD_INT 3
55034: PUSH
55035: FOR_TO
55036: IFFALSE 55067
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55038: LD_VAR 0 1
55042: PPUSH
55043: CALL_OW 250
55047: PPUSH
55048: LD_VAR 0 1
55052: PPUSH
55053: CALL_OW 251
55057: PPUSH
55058: LD_INT 1
55060: PPUSH
55061: CALL_OW 453
55065: GO 55035
55067: POP
55068: POP
// end ;
55069: LD_VAR 0 2
55073: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55074: LD_INT 0
55076: PPUSH
55077: PPUSH
55078: PPUSH
55079: PPUSH
55080: PPUSH
55081: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55082: LD_VAR 0 1
55086: NOT
55087: PUSH
55088: LD_VAR 0 2
55092: NOT
55093: OR
55094: PUSH
55095: LD_VAR 0 1
55099: PPUSH
55100: CALL_OW 314
55104: OR
55105: IFFALSE 55109
// exit ;
55107: GO 55550
// x := GetX ( enemy_unit ) ;
55109: LD_ADDR_VAR 0 7
55113: PUSH
55114: LD_VAR 0 2
55118: PPUSH
55119: CALL_OW 250
55123: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55124: LD_ADDR_VAR 0 8
55128: PUSH
55129: LD_VAR 0 2
55133: PPUSH
55134: CALL_OW 251
55138: ST_TO_ADDR
// if not x or not y then
55139: LD_VAR 0 7
55143: NOT
55144: PUSH
55145: LD_VAR 0 8
55149: NOT
55150: OR
55151: IFFALSE 55155
// exit ;
55153: GO 55550
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55155: LD_ADDR_VAR 0 6
55159: PUSH
55160: LD_VAR 0 7
55164: PPUSH
55165: LD_INT 0
55167: PPUSH
55168: LD_INT 4
55170: PPUSH
55171: CALL_OW 272
55175: PUSH
55176: LD_VAR 0 8
55180: PPUSH
55181: LD_INT 0
55183: PPUSH
55184: LD_INT 4
55186: PPUSH
55187: CALL_OW 273
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_VAR 0 7
55200: PPUSH
55201: LD_INT 1
55203: PPUSH
55204: LD_INT 4
55206: PPUSH
55207: CALL_OW 272
55211: PUSH
55212: LD_VAR 0 8
55216: PPUSH
55217: LD_INT 1
55219: PPUSH
55220: LD_INT 4
55222: PPUSH
55223: CALL_OW 273
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_VAR 0 7
55236: PPUSH
55237: LD_INT 2
55239: PPUSH
55240: LD_INT 4
55242: PPUSH
55243: CALL_OW 272
55247: PUSH
55248: LD_VAR 0 8
55252: PPUSH
55253: LD_INT 2
55255: PPUSH
55256: LD_INT 4
55258: PPUSH
55259: CALL_OW 273
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_VAR 0 7
55272: PPUSH
55273: LD_INT 3
55275: PPUSH
55276: LD_INT 4
55278: PPUSH
55279: CALL_OW 272
55283: PUSH
55284: LD_VAR 0 8
55288: PPUSH
55289: LD_INT 3
55291: PPUSH
55292: LD_INT 4
55294: PPUSH
55295: CALL_OW 273
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_VAR 0 7
55308: PPUSH
55309: LD_INT 4
55311: PPUSH
55312: LD_INT 4
55314: PPUSH
55315: CALL_OW 272
55319: PUSH
55320: LD_VAR 0 8
55324: PPUSH
55325: LD_INT 4
55327: PPUSH
55328: LD_INT 4
55330: PPUSH
55331: CALL_OW 273
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_VAR 0 7
55344: PPUSH
55345: LD_INT 5
55347: PPUSH
55348: LD_INT 4
55350: PPUSH
55351: CALL_OW 272
55355: PUSH
55356: LD_VAR 0 8
55360: PPUSH
55361: LD_INT 5
55363: PPUSH
55364: LD_INT 4
55366: PPUSH
55367: CALL_OW 273
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// for i = tmp downto 1 do
55384: LD_ADDR_VAR 0 4
55388: PUSH
55389: DOUBLE
55390: LD_VAR 0 6
55394: INC
55395: ST_TO_ADDR
55396: LD_INT 1
55398: PUSH
55399: FOR_DOWNTO
55400: IFFALSE 55501
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55402: LD_VAR 0 6
55406: PUSH
55407: LD_VAR 0 4
55411: ARRAY
55412: PUSH
55413: LD_INT 1
55415: ARRAY
55416: PPUSH
55417: LD_VAR 0 6
55421: PUSH
55422: LD_VAR 0 4
55426: ARRAY
55427: PUSH
55428: LD_INT 2
55430: ARRAY
55431: PPUSH
55432: CALL_OW 488
55436: NOT
55437: PUSH
55438: LD_VAR 0 6
55442: PUSH
55443: LD_VAR 0 4
55447: ARRAY
55448: PUSH
55449: LD_INT 1
55451: ARRAY
55452: PPUSH
55453: LD_VAR 0 6
55457: PUSH
55458: LD_VAR 0 4
55462: ARRAY
55463: PUSH
55464: LD_INT 2
55466: ARRAY
55467: PPUSH
55468: CALL_OW 428
55472: PUSH
55473: LD_INT 0
55475: NONEQUAL
55476: OR
55477: IFFALSE 55499
// tmp := Delete ( tmp , i ) ;
55479: LD_ADDR_VAR 0 6
55483: PUSH
55484: LD_VAR 0 6
55488: PPUSH
55489: LD_VAR 0 4
55493: PPUSH
55494: CALL_OW 3
55498: ST_TO_ADDR
55499: GO 55399
55501: POP
55502: POP
// j := GetClosestHex ( unit , tmp ) ;
55503: LD_ADDR_VAR 0 5
55507: PUSH
55508: LD_VAR 0 1
55512: PPUSH
55513: LD_VAR 0 6
55517: PPUSH
55518: CALL 54803 0 2
55522: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55523: LD_VAR 0 1
55527: PPUSH
55528: LD_VAR 0 5
55532: PUSH
55533: LD_INT 1
55535: ARRAY
55536: PPUSH
55537: LD_VAR 0 5
55541: PUSH
55542: LD_INT 2
55544: ARRAY
55545: PPUSH
55546: CALL_OW 111
// end ;
55550: LD_VAR 0 3
55554: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55555: LD_INT 0
55557: PPUSH
55558: PPUSH
55559: PPUSH
// uc_side = 0 ;
55560: LD_ADDR_OWVAR 20
55564: PUSH
55565: LD_INT 0
55567: ST_TO_ADDR
// uc_nation = 0 ;
55568: LD_ADDR_OWVAR 21
55572: PUSH
55573: LD_INT 0
55575: ST_TO_ADDR
// InitHc ;
55576: CALL_OW 19
// InitVc ;
55580: CALL_OW 20
// if mastodonts then
55584: LD_VAR 0 6
55588: IFFALSE 55655
// for i = 1 to mastodonts do
55590: LD_ADDR_VAR 0 11
55594: PUSH
55595: DOUBLE
55596: LD_INT 1
55598: DEC
55599: ST_TO_ADDR
55600: LD_VAR 0 6
55604: PUSH
55605: FOR_TO
55606: IFFALSE 55653
// begin vc_chassis := 31 ;
55608: LD_ADDR_OWVAR 37
55612: PUSH
55613: LD_INT 31
55615: ST_TO_ADDR
// vc_control := control_rider ;
55616: LD_ADDR_OWVAR 38
55620: PUSH
55621: LD_INT 4
55623: ST_TO_ADDR
// animal := CreateVehicle ;
55624: LD_ADDR_VAR 0 12
55628: PUSH
55629: CALL_OW 45
55633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55634: LD_VAR 0 12
55638: PPUSH
55639: LD_VAR 0 8
55643: PPUSH
55644: LD_INT 0
55646: PPUSH
55647: CALL 57724 0 3
// end ;
55651: GO 55605
55653: POP
55654: POP
// if horses then
55655: LD_VAR 0 5
55659: IFFALSE 55726
// for i = 1 to horses do
55661: LD_ADDR_VAR 0 11
55665: PUSH
55666: DOUBLE
55667: LD_INT 1
55669: DEC
55670: ST_TO_ADDR
55671: LD_VAR 0 5
55675: PUSH
55676: FOR_TO
55677: IFFALSE 55724
// begin hc_class := 21 ;
55679: LD_ADDR_OWVAR 28
55683: PUSH
55684: LD_INT 21
55686: ST_TO_ADDR
// hc_gallery :=  ;
55687: LD_ADDR_OWVAR 33
55691: PUSH
55692: LD_STRING 
55694: ST_TO_ADDR
// animal := CreateHuman ;
55695: LD_ADDR_VAR 0 12
55699: PUSH
55700: CALL_OW 44
55704: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55705: LD_VAR 0 12
55709: PPUSH
55710: LD_VAR 0 8
55714: PPUSH
55715: LD_INT 0
55717: PPUSH
55718: CALL 57724 0 3
// end ;
55722: GO 55676
55724: POP
55725: POP
// if birds then
55726: LD_VAR 0 1
55730: IFFALSE 55797
// for i = 1 to birds do
55732: LD_ADDR_VAR 0 11
55736: PUSH
55737: DOUBLE
55738: LD_INT 1
55740: DEC
55741: ST_TO_ADDR
55742: LD_VAR 0 1
55746: PUSH
55747: FOR_TO
55748: IFFALSE 55795
// begin hc_class = 18 ;
55750: LD_ADDR_OWVAR 28
55754: PUSH
55755: LD_INT 18
55757: ST_TO_ADDR
// hc_gallery =  ;
55758: LD_ADDR_OWVAR 33
55762: PUSH
55763: LD_STRING 
55765: ST_TO_ADDR
// animal := CreateHuman ;
55766: LD_ADDR_VAR 0 12
55770: PUSH
55771: CALL_OW 44
55775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55776: LD_VAR 0 12
55780: PPUSH
55781: LD_VAR 0 8
55785: PPUSH
55786: LD_INT 0
55788: PPUSH
55789: CALL 57724 0 3
// end ;
55793: GO 55747
55795: POP
55796: POP
// if tigers then
55797: LD_VAR 0 2
55801: IFFALSE 55885
// for i = 1 to tigers do
55803: LD_ADDR_VAR 0 11
55807: PUSH
55808: DOUBLE
55809: LD_INT 1
55811: DEC
55812: ST_TO_ADDR
55813: LD_VAR 0 2
55817: PUSH
55818: FOR_TO
55819: IFFALSE 55883
// begin hc_class = class_tiger ;
55821: LD_ADDR_OWVAR 28
55825: PUSH
55826: LD_INT 14
55828: ST_TO_ADDR
// hc_gallery =  ;
55829: LD_ADDR_OWVAR 33
55833: PUSH
55834: LD_STRING 
55836: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55837: LD_ADDR_OWVAR 35
55841: PUSH
55842: LD_INT 7
55844: NEG
55845: PPUSH
55846: LD_INT 7
55848: PPUSH
55849: CALL_OW 12
55853: ST_TO_ADDR
// animal := CreateHuman ;
55854: LD_ADDR_VAR 0 12
55858: PUSH
55859: CALL_OW 44
55863: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55864: LD_VAR 0 12
55868: PPUSH
55869: LD_VAR 0 8
55873: PPUSH
55874: LD_INT 0
55876: PPUSH
55877: CALL 57724 0 3
// end ;
55881: GO 55818
55883: POP
55884: POP
// if apemans then
55885: LD_VAR 0 3
55889: IFFALSE 56012
// for i = 1 to apemans do
55891: LD_ADDR_VAR 0 11
55895: PUSH
55896: DOUBLE
55897: LD_INT 1
55899: DEC
55900: ST_TO_ADDR
55901: LD_VAR 0 3
55905: PUSH
55906: FOR_TO
55907: IFFALSE 56010
// begin hc_class = class_apeman ;
55909: LD_ADDR_OWVAR 28
55913: PUSH
55914: LD_INT 12
55916: ST_TO_ADDR
// hc_gallery =  ;
55917: LD_ADDR_OWVAR 33
55921: PUSH
55922: LD_STRING 
55924: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55925: LD_ADDR_OWVAR 35
55929: PUSH
55930: LD_INT 5
55932: NEG
55933: PPUSH
55934: LD_INT 5
55936: PPUSH
55937: CALL_OW 12
55941: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55942: LD_ADDR_OWVAR 31
55946: PUSH
55947: LD_INT 1
55949: PPUSH
55950: LD_INT 3
55952: PPUSH
55953: CALL_OW 12
55957: PUSH
55958: LD_INT 1
55960: PPUSH
55961: LD_INT 3
55963: PPUSH
55964: CALL_OW 12
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: ST_TO_ADDR
// animal := CreateHuman ;
55981: LD_ADDR_VAR 0 12
55985: PUSH
55986: CALL_OW 44
55990: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55991: LD_VAR 0 12
55995: PPUSH
55996: LD_VAR 0 8
56000: PPUSH
56001: LD_INT 0
56003: PPUSH
56004: CALL 57724 0 3
// end ;
56008: GO 55906
56010: POP
56011: POP
// if enchidnas then
56012: LD_VAR 0 4
56016: IFFALSE 56083
// for i = 1 to enchidnas do
56018: LD_ADDR_VAR 0 11
56022: PUSH
56023: DOUBLE
56024: LD_INT 1
56026: DEC
56027: ST_TO_ADDR
56028: LD_VAR 0 4
56032: PUSH
56033: FOR_TO
56034: IFFALSE 56081
// begin hc_class = 13 ;
56036: LD_ADDR_OWVAR 28
56040: PUSH
56041: LD_INT 13
56043: ST_TO_ADDR
// hc_gallery =  ;
56044: LD_ADDR_OWVAR 33
56048: PUSH
56049: LD_STRING 
56051: ST_TO_ADDR
// animal := CreateHuman ;
56052: LD_ADDR_VAR 0 12
56056: PUSH
56057: CALL_OW 44
56061: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56062: LD_VAR 0 12
56066: PPUSH
56067: LD_VAR 0 8
56071: PPUSH
56072: LD_INT 0
56074: PPUSH
56075: CALL 57724 0 3
// end ;
56079: GO 56033
56081: POP
56082: POP
// if fishes then
56083: LD_VAR 0 7
56087: IFFALSE 56154
// for i = 1 to fishes do
56089: LD_ADDR_VAR 0 11
56093: PUSH
56094: DOUBLE
56095: LD_INT 1
56097: DEC
56098: ST_TO_ADDR
56099: LD_VAR 0 7
56103: PUSH
56104: FOR_TO
56105: IFFALSE 56152
// begin hc_class = 20 ;
56107: LD_ADDR_OWVAR 28
56111: PUSH
56112: LD_INT 20
56114: ST_TO_ADDR
// hc_gallery =  ;
56115: LD_ADDR_OWVAR 33
56119: PUSH
56120: LD_STRING 
56122: ST_TO_ADDR
// animal := CreateHuman ;
56123: LD_ADDR_VAR 0 12
56127: PUSH
56128: CALL_OW 44
56132: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56133: LD_VAR 0 12
56137: PPUSH
56138: LD_VAR 0 9
56142: PPUSH
56143: LD_INT 0
56145: PPUSH
56146: CALL 57724 0 3
// end ;
56150: GO 56104
56152: POP
56153: POP
// end ;
56154: LD_VAR 0 10
56158: RET
// export function WantHeal ( sci , unit ) ; begin
56159: LD_INT 0
56161: PPUSH
// if GetTaskList ( sci ) > 0 then
56162: LD_VAR 0 1
56166: PPUSH
56167: CALL_OW 437
56171: PUSH
56172: LD_INT 0
56174: GREATER
56175: IFFALSE 56245
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56177: LD_VAR 0 1
56181: PPUSH
56182: CALL_OW 437
56186: PUSH
56187: LD_INT 1
56189: ARRAY
56190: PUSH
56191: LD_INT 1
56193: ARRAY
56194: PUSH
56195: LD_STRING l
56197: EQUAL
56198: PUSH
56199: LD_VAR 0 1
56203: PPUSH
56204: CALL_OW 437
56208: PUSH
56209: LD_INT 1
56211: ARRAY
56212: PUSH
56213: LD_INT 4
56215: ARRAY
56216: PUSH
56217: LD_VAR 0 2
56221: EQUAL
56222: AND
56223: IFFALSE 56235
// result := true else
56225: LD_ADDR_VAR 0 3
56229: PUSH
56230: LD_INT 1
56232: ST_TO_ADDR
56233: GO 56243
// result := false ;
56235: LD_ADDR_VAR 0 3
56239: PUSH
56240: LD_INT 0
56242: ST_TO_ADDR
// end else
56243: GO 56253
// result := false ;
56245: LD_ADDR_VAR 0 3
56249: PUSH
56250: LD_INT 0
56252: ST_TO_ADDR
// end ;
56253: LD_VAR 0 3
56257: RET
// export function HealTarget ( sci ) ; begin
56258: LD_INT 0
56260: PPUSH
// if not sci then
56261: LD_VAR 0 1
56265: NOT
56266: IFFALSE 56270
// exit ;
56268: GO 56335
// result := 0 ;
56270: LD_ADDR_VAR 0 2
56274: PUSH
56275: LD_INT 0
56277: ST_TO_ADDR
// if GetTaskList ( sci ) then
56278: LD_VAR 0 1
56282: PPUSH
56283: CALL_OW 437
56287: IFFALSE 56335
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56289: LD_VAR 0 1
56293: PPUSH
56294: CALL_OW 437
56298: PUSH
56299: LD_INT 1
56301: ARRAY
56302: PUSH
56303: LD_INT 1
56305: ARRAY
56306: PUSH
56307: LD_STRING l
56309: EQUAL
56310: IFFALSE 56335
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56312: LD_ADDR_VAR 0 2
56316: PUSH
56317: LD_VAR 0 1
56321: PPUSH
56322: CALL_OW 437
56326: PUSH
56327: LD_INT 1
56329: ARRAY
56330: PUSH
56331: LD_INT 4
56333: ARRAY
56334: ST_TO_ADDR
// end ;
56335: LD_VAR 0 2
56339: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56340: LD_INT 0
56342: PPUSH
56343: PPUSH
56344: PPUSH
56345: PPUSH
// if not base_units then
56346: LD_VAR 0 1
56350: NOT
56351: IFFALSE 56355
// exit ;
56353: GO 56442
// result := false ;
56355: LD_ADDR_VAR 0 2
56359: PUSH
56360: LD_INT 0
56362: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56363: LD_ADDR_VAR 0 5
56367: PUSH
56368: LD_VAR 0 1
56372: PPUSH
56373: LD_INT 21
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PPUSH
56383: CALL_OW 72
56387: ST_TO_ADDR
// if not tmp then
56388: LD_VAR 0 5
56392: NOT
56393: IFFALSE 56397
// exit ;
56395: GO 56442
// for i in tmp do
56397: LD_ADDR_VAR 0 3
56401: PUSH
56402: LD_VAR 0 5
56406: PUSH
56407: FOR_IN
56408: IFFALSE 56440
// begin result := EnemyInRange ( i , 22 ) ;
56410: LD_ADDR_VAR 0 2
56414: PUSH
56415: LD_VAR 0 3
56419: PPUSH
56420: LD_INT 22
56422: PPUSH
56423: CALL 54678 0 2
56427: ST_TO_ADDR
// if result then
56428: LD_VAR 0 2
56432: IFFALSE 56438
// exit ;
56434: POP
56435: POP
56436: GO 56442
// end ;
56438: GO 56407
56440: POP
56441: POP
// end ;
56442: LD_VAR 0 2
56446: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56447: LD_INT 0
56449: PPUSH
56450: PPUSH
// if not units then
56451: LD_VAR 0 1
56455: NOT
56456: IFFALSE 56460
// exit ;
56458: GO 56530
// result := [ ] ;
56460: LD_ADDR_VAR 0 3
56464: PUSH
56465: EMPTY
56466: ST_TO_ADDR
// for i in units do
56467: LD_ADDR_VAR 0 4
56471: PUSH
56472: LD_VAR 0 1
56476: PUSH
56477: FOR_IN
56478: IFFALSE 56528
// if GetTag ( i ) = tag then
56480: LD_VAR 0 4
56484: PPUSH
56485: CALL_OW 110
56489: PUSH
56490: LD_VAR 0 2
56494: EQUAL
56495: IFFALSE 56526
// result := Insert ( result , result + 1 , i ) ;
56497: LD_ADDR_VAR 0 3
56501: PUSH
56502: LD_VAR 0 3
56506: PPUSH
56507: LD_VAR 0 3
56511: PUSH
56512: LD_INT 1
56514: PLUS
56515: PPUSH
56516: LD_VAR 0 4
56520: PPUSH
56521: CALL_OW 2
56525: ST_TO_ADDR
56526: GO 56477
56528: POP
56529: POP
// end ;
56530: LD_VAR 0 3
56534: RET
// export function IsDriver ( un ) ; begin
56535: LD_INT 0
56537: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56538: LD_ADDR_VAR 0 2
56542: PUSH
56543: LD_VAR 0 1
56547: PUSH
56548: LD_INT 55
56550: PUSH
56551: EMPTY
56552: LIST
56553: PPUSH
56554: CALL_OW 69
56558: IN
56559: ST_TO_ADDR
// end ;
56560: LD_VAR 0 2
56564: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56565: LD_INT 0
56567: PPUSH
56568: PPUSH
// list := [ ] ;
56569: LD_ADDR_VAR 0 5
56573: PUSH
56574: EMPTY
56575: ST_TO_ADDR
// case d of 0 :
56576: LD_VAR 0 3
56580: PUSH
56581: LD_INT 0
56583: DOUBLE
56584: EQUAL
56585: IFTRUE 56589
56587: GO 56722
56589: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56590: LD_ADDR_VAR 0 5
56594: PUSH
56595: LD_VAR 0 1
56599: PUSH
56600: LD_INT 4
56602: MINUS
56603: PUSH
56604: LD_VAR 0 2
56608: PUSH
56609: LD_INT 4
56611: MINUS
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: LIST
56620: PUSH
56621: LD_VAR 0 1
56625: PUSH
56626: LD_INT 3
56628: MINUS
56629: PUSH
56630: LD_VAR 0 2
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: PUSH
56643: LD_VAR 0 1
56647: PUSH
56648: LD_INT 4
56650: PLUS
56651: PUSH
56652: LD_VAR 0 2
56656: PUSH
56657: LD_INT 4
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: PUSH
56665: LD_VAR 0 1
56669: PUSH
56670: LD_INT 3
56672: PLUS
56673: PUSH
56674: LD_VAR 0 2
56678: PUSH
56679: LD_INT 3
56681: PLUS
56682: PUSH
56683: LD_INT 5
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: PUSH
56691: LD_VAR 0 1
56695: PUSH
56696: LD_VAR 0 2
56700: PUSH
56701: LD_INT 4
56703: PLUS
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: ST_TO_ADDR
// end ; 1 :
56720: GO 57420
56722: LD_INT 1
56724: DOUBLE
56725: EQUAL
56726: IFTRUE 56730
56728: GO 56863
56730: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56731: LD_ADDR_VAR 0 5
56735: PUSH
56736: LD_VAR 0 1
56740: PUSH
56741: LD_VAR 0 2
56745: PUSH
56746: LD_INT 4
56748: MINUS
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: PUSH
56758: LD_VAR 0 1
56762: PUSH
56763: LD_INT 3
56765: MINUS
56766: PUSH
56767: LD_VAR 0 2
56771: PUSH
56772: LD_INT 3
56774: MINUS
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: PUSH
56784: LD_VAR 0 1
56788: PUSH
56789: LD_INT 4
56791: MINUS
56792: PUSH
56793: LD_VAR 0 2
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: LIST
56805: PUSH
56806: LD_VAR 0 1
56810: PUSH
56811: LD_VAR 0 2
56815: PUSH
56816: LD_INT 3
56818: PLUS
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: LIST
56827: PUSH
56828: LD_VAR 0 1
56832: PUSH
56833: LD_INT 4
56835: PLUS
56836: PUSH
56837: LD_VAR 0 2
56841: PUSH
56842: LD_INT 4
56844: PLUS
56845: PUSH
56846: LD_INT 5
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: LIST
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// end ; 2 :
56861: GO 57420
56863: LD_INT 2
56865: DOUBLE
56866: EQUAL
56867: IFTRUE 56871
56869: GO 57000
56871: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56872: LD_ADDR_VAR 0 5
56876: PUSH
56877: LD_VAR 0 1
56881: PUSH
56882: LD_VAR 0 2
56886: PUSH
56887: LD_INT 3
56889: MINUS
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: LIST
56898: PUSH
56899: LD_VAR 0 1
56903: PUSH
56904: LD_INT 4
56906: PLUS
56907: PUSH
56908: LD_VAR 0 2
56912: PUSH
56913: LD_INT 4
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: LIST
56920: PUSH
56921: LD_VAR 0 1
56925: PUSH
56926: LD_VAR 0 2
56930: PUSH
56931: LD_INT 4
56933: PLUS
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: PUSH
56943: LD_VAR 0 1
56947: PUSH
56948: LD_INT 3
56950: MINUS
56951: PUSH
56952: LD_VAR 0 2
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: LIST
56964: PUSH
56965: LD_VAR 0 1
56969: PUSH
56970: LD_INT 4
56972: MINUS
56973: PUSH
56974: LD_VAR 0 2
56978: PUSH
56979: LD_INT 4
56981: MINUS
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: ST_TO_ADDR
// end ; 3 :
56998: GO 57420
57000: LD_INT 3
57002: DOUBLE
57003: EQUAL
57004: IFTRUE 57008
57006: GO 57141
57008: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57009: LD_ADDR_VAR 0 5
57013: PUSH
57014: LD_VAR 0 1
57018: PUSH
57019: LD_INT 3
57021: PLUS
57022: PUSH
57023: LD_VAR 0 2
57027: PUSH
57028: LD_INT 4
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: LIST
57035: PUSH
57036: LD_VAR 0 1
57040: PUSH
57041: LD_INT 4
57043: PLUS
57044: PUSH
57045: LD_VAR 0 2
57049: PUSH
57050: LD_INT 4
57052: PLUS
57053: PUSH
57054: LD_INT 5
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: LIST
57061: PUSH
57062: LD_VAR 0 1
57066: PUSH
57067: LD_INT 4
57069: MINUS
57070: PUSH
57071: LD_VAR 0 2
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: LIST
57083: PUSH
57084: LD_VAR 0 1
57088: PUSH
57089: LD_VAR 0 2
57093: PUSH
57094: LD_INT 4
57096: MINUS
57097: PUSH
57098: LD_INT 3
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: LIST
57105: PUSH
57106: LD_VAR 0 1
57110: PUSH
57111: LD_INT 3
57113: MINUS
57114: PUSH
57115: LD_VAR 0 2
57119: PUSH
57120: LD_INT 3
57122: MINUS
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: LIST
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// end ; 4 :
57139: GO 57420
57141: LD_INT 4
57143: DOUBLE
57144: EQUAL
57145: IFTRUE 57149
57147: GO 57282
57149: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57150: LD_ADDR_VAR 0 5
57154: PUSH
57155: LD_VAR 0 1
57159: PUSH
57160: LD_VAR 0 2
57164: PUSH
57165: LD_INT 4
57167: PLUS
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: PUSH
57177: LD_VAR 0 1
57181: PUSH
57182: LD_INT 3
57184: PLUS
57185: PUSH
57186: LD_VAR 0 2
57190: PUSH
57191: LD_INT 3
57193: PLUS
57194: PUSH
57195: LD_INT 5
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: PUSH
57203: LD_VAR 0 1
57207: PUSH
57208: LD_INT 4
57210: PLUS
57211: PUSH
57212: LD_VAR 0 2
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: PUSH
57225: LD_VAR 0 1
57229: PUSH
57230: LD_VAR 0 2
57234: PUSH
57235: LD_INT 3
57237: MINUS
57238: PUSH
57239: LD_INT 3
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: PUSH
57247: LD_VAR 0 1
57251: PUSH
57252: LD_INT 4
57254: MINUS
57255: PUSH
57256: LD_VAR 0 2
57260: PUSH
57261: LD_INT 4
57263: MINUS
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: LIST
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: ST_TO_ADDR
// end ; 5 :
57280: GO 57420
57282: LD_INT 5
57284: DOUBLE
57285: EQUAL
57286: IFTRUE 57290
57288: GO 57419
57290: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57291: LD_ADDR_VAR 0 5
57295: PUSH
57296: LD_VAR 0 1
57300: PUSH
57301: LD_INT 4
57303: MINUS
57304: PUSH
57305: LD_VAR 0 2
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: PUSH
57318: LD_VAR 0 1
57322: PUSH
57323: LD_VAR 0 2
57327: PUSH
57328: LD_INT 4
57330: MINUS
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: PUSH
57340: LD_VAR 0 1
57344: PUSH
57345: LD_INT 4
57347: PLUS
57348: PUSH
57349: LD_VAR 0 2
57353: PUSH
57354: LD_INT 4
57356: PLUS
57357: PUSH
57358: LD_INT 5
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: LIST
57365: PUSH
57366: LD_VAR 0 1
57370: PUSH
57371: LD_INT 3
57373: PLUS
57374: PUSH
57375: LD_VAR 0 2
57379: PUSH
57380: LD_INT 4
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: PUSH
57388: LD_VAR 0 1
57392: PUSH
57393: LD_VAR 0 2
57397: PUSH
57398: LD_INT 3
57400: PLUS
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: LIST
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: ST_TO_ADDR
// end ; end ;
57417: GO 57420
57419: POP
// result := list ;
57420: LD_ADDR_VAR 0 4
57424: PUSH
57425: LD_VAR 0 5
57429: ST_TO_ADDR
// end ;
57430: LD_VAR 0 4
57434: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57435: LD_INT 0
57437: PPUSH
57438: PPUSH
57439: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57440: LD_VAR 0 1
57444: NOT
57445: PUSH
57446: LD_VAR 0 2
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: LD_INT 3
57459: PUSH
57460: LD_INT 4
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: IN
57469: NOT
57470: OR
57471: IFFALSE 57475
// exit ;
57473: GO 57567
// tmp := [ ] ;
57475: LD_ADDR_VAR 0 5
57479: PUSH
57480: EMPTY
57481: ST_TO_ADDR
// for i in units do
57482: LD_ADDR_VAR 0 4
57486: PUSH
57487: LD_VAR 0 1
57491: PUSH
57492: FOR_IN
57493: IFFALSE 57536
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57495: LD_ADDR_VAR 0 5
57499: PUSH
57500: LD_VAR 0 5
57504: PPUSH
57505: LD_VAR 0 5
57509: PUSH
57510: LD_INT 1
57512: PLUS
57513: PPUSH
57514: LD_VAR 0 4
57518: PPUSH
57519: LD_VAR 0 2
57523: PPUSH
57524: CALL_OW 259
57528: PPUSH
57529: CALL_OW 2
57533: ST_TO_ADDR
57534: GO 57492
57536: POP
57537: POP
// if not tmp then
57538: LD_VAR 0 5
57542: NOT
57543: IFFALSE 57547
// exit ;
57545: GO 57567
// result := SortListByListDesc ( units , tmp ) ;
57547: LD_ADDR_VAR 0 3
57551: PUSH
57552: LD_VAR 0 1
57556: PPUSH
57557: LD_VAR 0 5
57561: PPUSH
57562: CALL_OW 77
57566: ST_TO_ADDR
// end ;
57567: LD_VAR 0 3
57571: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57572: LD_INT 0
57574: PPUSH
57575: PPUSH
57576: PPUSH
// x := GetX ( building ) ;
57577: LD_ADDR_VAR 0 4
57581: PUSH
57582: LD_VAR 0 2
57586: PPUSH
57587: CALL_OW 250
57591: ST_TO_ADDR
// y := GetY ( building ) ;
57592: LD_ADDR_VAR 0 5
57596: PUSH
57597: LD_VAR 0 2
57601: PPUSH
57602: CALL_OW 251
57606: ST_TO_ADDR
// if GetTaskList ( unit ) then
57607: LD_VAR 0 1
57611: PPUSH
57612: CALL_OW 437
57616: IFFALSE 57711
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57618: LD_STRING e
57620: PUSH
57621: LD_VAR 0 1
57625: PPUSH
57626: CALL_OW 437
57630: PUSH
57631: LD_INT 1
57633: ARRAY
57634: PUSH
57635: LD_INT 1
57637: ARRAY
57638: EQUAL
57639: PUSH
57640: LD_VAR 0 4
57644: PUSH
57645: LD_VAR 0 1
57649: PPUSH
57650: CALL_OW 437
57654: PUSH
57655: LD_INT 1
57657: ARRAY
57658: PUSH
57659: LD_INT 2
57661: ARRAY
57662: EQUAL
57663: AND
57664: PUSH
57665: LD_VAR 0 5
57669: PUSH
57670: LD_VAR 0 1
57674: PPUSH
57675: CALL_OW 437
57679: PUSH
57680: LD_INT 1
57682: ARRAY
57683: PUSH
57684: LD_INT 3
57686: ARRAY
57687: EQUAL
57688: AND
57689: IFFALSE 57701
// result := true else
57691: LD_ADDR_VAR 0 3
57695: PUSH
57696: LD_INT 1
57698: ST_TO_ADDR
57699: GO 57709
// result := false ;
57701: LD_ADDR_VAR 0 3
57705: PUSH
57706: LD_INT 0
57708: ST_TO_ADDR
// end else
57709: GO 57719
// result := false ;
57711: LD_ADDR_VAR 0 3
57715: PUSH
57716: LD_INT 0
57718: ST_TO_ADDR
// end ;
57719: LD_VAR 0 3
57723: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57724: LD_INT 0
57726: PPUSH
57727: PPUSH
57728: PPUSH
57729: PPUSH
// if not unit or not area then
57730: LD_VAR 0 1
57734: NOT
57735: PUSH
57736: LD_VAR 0 2
57740: NOT
57741: OR
57742: IFFALSE 57746
// exit ;
57744: GO 57910
// tmp := AreaToList ( area , i ) ;
57746: LD_ADDR_VAR 0 6
57750: PUSH
57751: LD_VAR 0 2
57755: PPUSH
57756: LD_VAR 0 5
57760: PPUSH
57761: CALL_OW 517
57765: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57766: LD_ADDR_VAR 0 5
57770: PUSH
57771: DOUBLE
57772: LD_INT 1
57774: DEC
57775: ST_TO_ADDR
57776: LD_VAR 0 6
57780: PUSH
57781: LD_INT 1
57783: ARRAY
57784: PUSH
57785: FOR_TO
57786: IFFALSE 57908
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57788: LD_ADDR_VAR 0 7
57792: PUSH
57793: LD_VAR 0 6
57797: PUSH
57798: LD_INT 1
57800: ARRAY
57801: PUSH
57802: LD_VAR 0 5
57806: ARRAY
57807: PUSH
57808: LD_VAR 0 6
57812: PUSH
57813: LD_INT 2
57815: ARRAY
57816: PUSH
57817: LD_VAR 0 5
57821: ARRAY
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57827: LD_VAR 0 7
57831: PUSH
57832: LD_INT 1
57834: ARRAY
57835: PPUSH
57836: LD_VAR 0 7
57840: PUSH
57841: LD_INT 2
57843: ARRAY
57844: PPUSH
57845: CALL_OW 428
57849: PUSH
57850: LD_INT 0
57852: EQUAL
57853: IFFALSE 57906
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57855: LD_VAR 0 1
57859: PPUSH
57860: LD_VAR 0 7
57864: PUSH
57865: LD_INT 1
57867: ARRAY
57868: PPUSH
57869: LD_VAR 0 7
57873: PUSH
57874: LD_INT 2
57876: ARRAY
57877: PPUSH
57878: LD_VAR 0 3
57882: PPUSH
57883: CALL_OW 48
// result := IsPlaced ( unit ) ;
57887: LD_ADDR_VAR 0 4
57891: PUSH
57892: LD_VAR 0 1
57896: PPUSH
57897: CALL_OW 305
57901: ST_TO_ADDR
// exit ;
57902: POP
57903: POP
57904: GO 57910
// end ; end ;
57906: GO 57785
57908: POP
57909: POP
// end ;
57910: LD_VAR 0 4
57914: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57915: LD_INT 0
57917: PPUSH
57918: PPUSH
57919: PPUSH
// if not side or side > 8 then
57920: LD_VAR 0 1
57924: NOT
57925: PUSH
57926: LD_VAR 0 1
57930: PUSH
57931: LD_INT 8
57933: GREATER
57934: OR
57935: IFFALSE 57939
// exit ;
57937: GO 58126
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57939: LD_ADDR_VAR 0 4
57943: PUSH
57944: LD_INT 22
57946: PUSH
57947: LD_VAR 0 1
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 21
57958: PUSH
57959: LD_INT 3
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PPUSH
57970: CALL_OW 69
57974: ST_TO_ADDR
// if not tmp then
57975: LD_VAR 0 4
57979: NOT
57980: IFFALSE 57984
// exit ;
57982: GO 58126
// enable_addtolog := true ;
57984: LD_ADDR_OWVAR 81
57988: PUSH
57989: LD_INT 1
57991: ST_TO_ADDR
// AddToLog ( [ ) ;
57992: LD_STRING [
57994: PPUSH
57995: CALL_OW 561
// for i in tmp do
57999: LD_ADDR_VAR 0 3
58003: PUSH
58004: LD_VAR 0 4
58008: PUSH
58009: FOR_IN
58010: IFFALSE 58117
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58012: LD_STRING [
58014: PUSH
58015: LD_VAR 0 3
58019: PPUSH
58020: CALL_OW 266
58024: STR
58025: PUSH
58026: LD_STRING , 
58028: STR
58029: PUSH
58030: LD_VAR 0 3
58034: PPUSH
58035: CALL_OW 250
58039: STR
58040: PUSH
58041: LD_STRING , 
58043: STR
58044: PUSH
58045: LD_VAR 0 3
58049: PPUSH
58050: CALL_OW 251
58054: STR
58055: PUSH
58056: LD_STRING , 
58058: STR
58059: PUSH
58060: LD_VAR 0 3
58064: PPUSH
58065: CALL_OW 254
58069: STR
58070: PUSH
58071: LD_STRING , 
58073: STR
58074: PUSH
58075: LD_VAR 0 3
58079: PPUSH
58080: LD_INT 1
58082: PPUSH
58083: CALL_OW 268
58087: STR
58088: PUSH
58089: LD_STRING , 
58091: STR
58092: PUSH
58093: LD_VAR 0 3
58097: PPUSH
58098: LD_INT 2
58100: PPUSH
58101: CALL_OW 268
58105: STR
58106: PUSH
58107: LD_STRING ],
58109: STR
58110: PPUSH
58111: CALL_OW 561
// end ;
58115: GO 58009
58117: POP
58118: POP
// AddToLog ( ]; ) ;
58119: LD_STRING ];
58121: PPUSH
58122: CALL_OW 561
// end ;
58126: LD_VAR 0 2
58130: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58131: LD_INT 0
58133: PPUSH
58134: PPUSH
58135: PPUSH
58136: PPUSH
58137: PPUSH
// if not area or not rate or not max then
58138: LD_VAR 0 1
58142: NOT
58143: PUSH
58144: LD_VAR 0 2
58148: NOT
58149: OR
58150: PUSH
58151: LD_VAR 0 4
58155: NOT
58156: OR
58157: IFFALSE 58161
// exit ;
58159: GO 58353
// while 1 do
58161: LD_INT 1
58163: IFFALSE 58353
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58165: LD_ADDR_VAR 0 9
58169: PUSH
58170: LD_VAR 0 1
58174: PPUSH
58175: LD_INT 1
58177: PPUSH
58178: CALL_OW 287
58182: PUSH
58183: LD_INT 10
58185: MUL
58186: ST_TO_ADDR
// r := rate / 10 ;
58187: LD_ADDR_VAR 0 7
58191: PUSH
58192: LD_VAR 0 2
58196: PUSH
58197: LD_INT 10
58199: DIVREAL
58200: ST_TO_ADDR
// time := 1 1$00 ;
58201: LD_ADDR_VAR 0 8
58205: PUSH
58206: LD_INT 2100
58208: ST_TO_ADDR
// if amount < min then
58209: LD_VAR 0 9
58213: PUSH
58214: LD_VAR 0 3
58218: LESS
58219: IFFALSE 58237
// r := r * 2 else
58221: LD_ADDR_VAR 0 7
58225: PUSH
58226: LD_VAR 0 7
58230: PUSH
58231: LD_INT 2
58233: MUL
58234: ST_TO_ADDR
58235: GO 58263
// if amount > max then
58237: LD_VAR 0 9
58241: PUSH
58242: LD_VAR 0 4
58246: GREATER
58247: IFFALSE 58263
// r := r / 2 ;
58249: LD_ADDR_VAR 0 7
58253: PUSH
58254: LD_VAR 0 7
58258: PUSH
58259: LD_INT 2
58261: DIVREAL
58262: ST_TO_ADDR
// time := time / r ;
58263: LD_ADDR_VAR 0 8
58267: PUSH
58268: LD_VAR 0 8
58272: PUSH
58273: LD_VAR 0 7
58277: DIVREAL
58278: ST_TO_ADDR
// if time < 0 then
58279: LD_VAR 0 8
58283: PUSH
58284: LD_INT 0
58286: LESS
58287: IFFALSE 58304
// time := time * - 1 ;
58289: LD_ADDR_VAR 0 8
58293: PUSH
58294: LD_VAR 0 8
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: MUL
58303: ST_TO_ADDR
// wait ( time ) ;
58304: LD_VAR 0 8
58308: PPUSH
58309: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58313: LD_INT 35
58315: PPUSH
58316: LD_INT 875
58318: PPUSH
58319: CALL_OW 12
58323: PPUSH
58324: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58328: LD_INT 1
58330: PPUSH
58331: LD_INT 5
58333: PPUSH
58334: CALL_OW 12
58338: PPUSH
58339: LD_VAR 0 1
58343: PPUSH
58344: LD_INT 1
58346: PPUSH
58347: CALL_OW 55
// end ;
58351: GO 58161
// end ;
58353: LD_VAR 0 5
58357: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58358: LD_INT 0
58360: PPUSH
58361: PPUSH
58362: PPUSH
58363: PPUSH
58364: PPUSH
58365: PPUSH
58366: PPUSH
58367: PPUSH
// if not turrets or not factories then
58368: LD_VAR 0 1
58372: NOT
58373: PUSH
58374: LD_VAR 0 2
58378: NOT
58379: OR
58380: IFFALSE 58384
// exit ;
58382: GO 58691
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58384: LD_ADDR_VAR 0 10
58388: PUSH
58389: LD_INT 5
58391: PUSH
58392: LD_INT 6
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 4
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: PUSH
58412: LD_INT 5
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 24
58426: PUSH
58427: LD_INT 25
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 23
58436: PUSH
58437: LD_INT 27
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 42
58450: PUSH
58451: LD_INT 43
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 44
58460: PUSH
58461: LD_INT 46
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 45
58470: PUSH
58471: LD_INT 47
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: LIST
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: LIST
58487: ST_TO_ADDR
// result := [ ] ;
58488: LD_ADDR_VAR 0 3
58492: PUSH
58493: EMPTY
58494: ST_TO_ADDR
// for i in turrets do
58495: LD_ADDR_VAR 0 4
58499: PUSH
58500: LD_VAR 0 1
58504: PUSH
58505: FOR_IN
58506: IFFALSE 58689
// begin nat := GetNation ( i ) ;
58508: LD_ADDR_VAR 0 7
58512: PUSH
58513: LD_VAR 0 4
58517: PPUSH
58518: CALL_OW 248
58522: ST_TO_ADDR
// weapon := 0 ;
58523: LD_ADDR_VAR 0 8
58527: PUSH
58528: LD_INT 0
58530: ST_TO_ADDR
// if not nat then
58531: LD_VAR 0 7
58535: NOT
58536: IFFALSE 58540
// continue ;
58538: GO 58505
// for j in list [ nat ] do
58540: LD_ADDR_VAR 0 5
58544: PUSH
58545: LD_VAR 0 10
58549: PUSH
58550: LD_VAR 0 7
58554: ARRAY
58555: PUSH
58556: FOR_IN
58557: IFFALSE 58598
// if GetBWeapon ( i ) = j [ 1 ] then
58559: LD_VAR 0 4
58563: PPUSH
58564: CALL_OW 269
58568: PUSH
58569: LD_VAR 0 5
58573: PUSH
58574: LD_INT 1
58576: ARRAY
58577: EQUAL
58578: IFFALSE 58596
// begin weapon := j [ 2 ] ;
58580: LD_ADDR_VAR 0 8
58584: PUSH
58585: LD_VAR 0 5
58589: PUSH
58590: LD_INT 2
58592: ARRAY
58593: ST_TO_ADDR
// break ;
58594: GO 58598
// end ;
58596: GO 58556
58598: POP
58599: POP
// if not weapon then
58600: LD_VAR 0 8
58604: NOT
58605: IFFALSE 58609
// continue ;
58607: GO 58505
// for k in factories do
58609: LD_ADDR_VAR 0 6
58613: PUSH
58614: LD_VAR 0 2
58618: PUSH
58619: FOR_IN
58620: IFFALSE 58685
// begin weapons := AvailableWeaponList ( k ) ;
58622: LD_ADDR_VAR 0 9
58626: PUSH
58627: LD_VAR 0 6
58631: PPUSH
58632: CALL_OW 478
58636: ST_TO_ADDR
// if not weapons then
58637: LD_VAR 0 9
58641: NOT
58642: IFFALSE 58646
// continue ;
58644: GO 58619
// if weapon in weapons then
58646: LD_VAR 0 8
58650: PUSH
58651: LD_VAR 0 9
58655: IN
58656: IFFALSE 58683
// begin result := [ i , weapon ] ;
58658: LD_ADDR_VAR 0 3
58662: PUSH
58663: LD_VAR 0 4
58667: PUSH
58668: LD_VAR 0 8
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// exit ;
58677: POP
58678: POP
58679: POP
58680: POP
58681: GO 58691
// end ; end ;
58683: GO 58619
58685: POP
58686: POP
// end ;
58687: GO 58505
58689: POP
58690: POP
// end ;
58691: LD_VAR 0 3
58695: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58696: LD_INT 0
58698: PPUSH
// if not side or side > 8 then
58699: LD_VAR 0 3
58703: NOT
58704: PUSH
58705: LD_VAR 0 3
58709: PUSH
58710: LD_INT 8
58712: GREATER
58713: OR
58714: IFFALSE 58718
// exit ;
58716: GO 58777
// if not range then
58718: LD_VAR 0 4
58722: NOT
58723: IFFALSE 58734
// range := - 12 ;
58725: LD_ADDR_VAR 0 4
58729: PUSH
58730: LD_INT 12
58732: NEG
58733: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58734: LD_VAR 0 1
58738: PPUSH
58739: LD_VAR 0 2
58743: PPUSH
58744: LD_VAR 0 3
58748: PPUSH
58749: LD_VAR 0 4
58753: PPUSH
58754: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58758: LD_VAR 0 1
58762: PPUSH
58763: LD_VAR 0 2
58767: PPUSH
58768: LD_VAR 0 3
58772: PPUSH
58773: CALL_OW 331
// end ;
58777: LD_VAR 0 5
58781: RET
// export function Video ( mode ) ; begin
58782: LD_INT 0
58784: PPUSH
// ingame_video = mode ;
58785: LD_ADDR_OWVAR 52
58789: PUSH
58790: LD_VAR 0 1
58794: ST_TO_ADDR
// interface_hidden = mode ;
58795: LD_ADDR_OWVAR 54
58799: PUSH
58800: LD_VAR 0 1
58804: ST_TO_ADDR
// end ;
58805: LD_VAR 0 2
58809: RET
// export function Join ( array , element ) ; begin
58810: LD_INT 0
58812: PPUSH
// result := array ^ element ;
58813: LD_ADDR_VAR 0 3
58817: PUSH
58818: LD_VAR 0 1
58822: PUSH
58823: LD_VAR 0 2
58827: ADD
58828: ST_TO_ADDR
// end ;
58829: LD_VAR 0 3
58833: RET
// export function JoinUnion ( array , element ) ; begin
58834: LD_INT 0
58836: PPUSH
// result := array union element ;
58837: LD_ADDR_VAR 0 3
58841: PUSH
58842: LD_VAR 0 1
58846: PUSH
58847: LD_VAR 0 2
58851: UNION
58852: ST_TO_ADDR
// end ;
58853: LD_VAR 0 3
58857: RET
// export function GetBehemoths ( side ) ; begin
58858: LD_INT 0
58860: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58861: LD_ADDR_VAR 0 2
58865: PUSH
58866: LD_INT 22
58868: PUSH
58869: LD_VAR 0 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 31
58880: PUSH
58881: LD_INT 25
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PPUSH
58892: CALL_OW 69
58896: ST_TO_ADDR
// end ;
58897: LD_VAR 0 2
58901: RET
// export function Shuffle ( array ) ; var i , index ; begin
58902: LD_INT 0
58904: PPUSH
58905: PPUSH
58906: PPUSH
// result := [ ] ;
58907: LD_ADDR_VAR 0 2
58911: PUSH
58912: EMPTY
58913: ST_TO_ADDR
// if not array then
58914: LD_VAR 0 1
58918: NOT
58919: IFFALSE 58923
// exit ;
58921: GO 59022
// Randomize ;
58923: CALL_OW 10
// for i = array downto 1 do
58927: LD_ADDR_VAR 0 3
58931: PUSH
58932: DOUBLE
58933: LD_VAR 0 1
58937: INC
58938: ST_TO_ADDR
58939: LD_INT 1
58941: PUSH
58942: FOR_DOWNTO
58943: IFFALSE 59020
// begin index := rand ( 1 , array ) ;
58945: LD_ADDR_VAR 0 4
58949: PUSH
58950: LD_INT 1
58952: PPUSH
58953: LD_VAR 0 1
58957: PPUSH
58958: CALL_OW 12
58962: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58963: LD_ADDR_VAR 0 2
58967: PUSH
58968: LD_VAR 0 2
58972: PPUSH
58973: LD_VAR 0 2
58977: PUSH
58978: LD_INT 1
58980: PLUS
58981: PPUSH
58982: LD_VAR 0 1
58986: PUSH
58987: LD_VAR 0 4
58991: ARRAY
58992: PPUSH
58993: CALL_OW 2
58997: ST_TO_ADDR
// array := Delete ( array , index ) ;
58998: LD_ADDR_VAR 0 1
59002: PUSH
59003: LD_VAR 0 1
59007: PPUSH
59008: LD_VAR 0 4
59012: PPUSH
59013: CALL_OW 3
59017: ST_TO_ADDR
// end ;
59018: GO 58942
59020: POP
59021: POP
// end ;
59022: LD_VAR 0 2
59026: RET
// export function GetBaseMaterials ( base ) ; begin
59027: LD_INT 0
59029: PPUSH
// result := [ 0 , 0 , 0 ] ;
59030: LD_ADDR_VAR 0 2
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// if not base then
59049: LD_VAR 0 1
59053: NOT
59054: IFFALSE 59058
// exit ;
59056: GO 59107
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59058: LD_ADDR_VAR 0 2
59062: PUSH
59063: LD_VAR 0 1
59067: PPUSH
59068: LD_INT 1
59070: PPUSH
59071: CALL_OW 275
59075: PUSH
59076: LD_VAR 0 1
59080: PPUSH
59081: LD_INT 2
59083: PPUSH
59084: CALL_OW 275
59088: PUSH
59089: LD_VAR 0 1
59093: PPUSH
59094: LD_INT 3
59096: PPUSH
59097: CALL_OW 275
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: ST_TO_ADDR
// end ;
59107: LD_VAR 0 2
59111: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59112: LD_INT 0
59114: PPUSH
59115: PPUSH
// result := array ;
59116: LD_ADDR_VAR 0 3
59120: PUSH
59121: LD_VAR 0 1
59125: ST_TO_ADDR
// if size > 0 then
59126: LD_VAR 0 2
59130: PUSH
59131: LD_INT 0
59133: GREATER
59134: IFFALSE 59180
// for i := array downto size do
59136: LD_ADDR_VAR 0 4
59140: PUSH
59141: DOUBLE
59142: LD_VAR 0 1
59146: INC
59147: ST_TO_ADDR
59148: LD_VAR 0 2
59152: PUSH
59153: FOR_DOWNTO
59154: IFFALSE 59178
// result := Delete ( result , result ) ;
59156: LD_ADDR_VAR 0 3
59160: PUSH
59161: LD_VAR 0 3
59165: PPUSH
59166: LD_VAR 0 3
59170: PPUSH
59171: CALL_OW 3
59175: ST_TO_ADDR
59176: GO 59153
59178: POP
59179: POP
// end ;
59180: LD_VAR 0 3
59184: RET
// export function ComExit ( unit ) ; var tmp ; begin
59185: LD_INT 0
59187: PPUSH
59188: PPUSH
// if not IsInUnit ( unit ) then
59189: LD_VAR 0 1
59193: PPUSH
59194: CALL_OW 310
59198: NOT
59199: IFFALSE 59203
// exit ;
59201: GO 59263
// tmp := IsInUnit ( unit ) ;
59203: LD_ADDR_VAR 0 3
59207: PUSH
59208: LD_VAR 0 1
59212: PPUSH
59213: CALL_OW 310
59217: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59218: LD_VAR 0 3
59222: PPUSH
59223: CALL_OW 247
59227: PUSH
59228: LD_INT 2
59230: EQUAL
59231: IFFALSE 59244
// ComExitVehicle ( unit ) else
59233: LD_VAR 0 1
59237: PPUSH
59238: CALL_OW 121
59242: GO 59253
// ComExitBuilding ( unit ) ;
59244: LD_VAR 0 1
59248: PPUSH
59249: CALL_OW 122
// result := tmp ;
59253: LD_ADDR_VAR 0 2
59257: PUSH
59258: LD_VAR 0 3
59262: ST_TO_ADDR
// end ;
59263: LD_VAR 0 2
59267: RET
// export function ResetHc ; begin
59268: LD_INT 0
59270: PPUSH
// InitHc ;
59271: CALL_OW 19
// hc_importance := 0 ;
59275: LD_ADDR_OWVAR 32
59279: PUSH
59280: LD_INT 0
59282: ST_TO_ADDR
// end ;
59283: LD_VAR 0 1
59287: RET
