// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; export buildedLab ; export achievement_DestroyedHovercrafts ; export achievement_CollectedCrates ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 250 0 0
// omarStatus = 0 ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// stevensStatus = 0 ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// labDestroyed = 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  48: LD_ADDR_EXP 5
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  55: LD_ADDR_EXP 6
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  62: LD_ADDR_EXP 4
  66: PUSH
  67: LD_STRING 05_TanksIntro_1
  69: PPUSH
  70: EMPTY
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// actionTime = 0 0$00 ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  85: LD_ADDR_EXP 10
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
  93: LD_ADDR_EXP 11
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// sawArabianBase = false ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// sawApeman = false ;
 109: LD_ADDR_EXP 9
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// stevensPlaced = false ;
 117: LD_ADDR_EXP 14
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// stevensFollow = false ;
 125: LD_ADDR_EXP 15
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// stevensDepot = false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// stevensWasInDepot = false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// stevensCanExitMap = false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// cratesSpawned = 0 ;
 165: LD_ADDR_EXP 22
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// fastBreakthrough = false ;
 173: LD_ADDR_EXP 23
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// finishMissionBool = false ;
 181: LD_ADDR_EXP 24
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// buildedLab = false ;
 189: LD_ADDR_EXP 25
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// omarCanExitMap = false ;
 197: LD_ADDR_EXP 20
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// arabianCanExitMap = false ;
 205: LD_ADDR_EXP 21
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// achievement_DestroyedHovercrafts = 0 ;
 213: LD_ADDR_EXP 26
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// achievement_CollectedCrates = false ;
 221: LD_ADDR_EXP 27
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// PrepareRussians ;
 229: CALL 909 0 0
// PrepareArabians ;
 233: CALL 1656 0 0
// Nef_PrepareNature ;
 237: CALL 20024 0 0
// MissionIntro ;
 241: CALL 2988 0 0
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function InitMapConfig ; begin
 250: LD_INT 0
 252: PPUSH
// BaseMapConfig ;
 253: CALL 266 0 0
// MissionMapConfig ;
 257: CALL 356 0 0
// end ;
 261: LD_VAR 0 1
 265: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 266: LD_INT 0
 268: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 269: LD_ADDR_EXP 28
 273: PUSH
 274: LD_INT 4
 276: PUSH
 277: LD_INT 3
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 296: LD_ADDR_EXP 29
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 2
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: ST_TO_ADDR
// animalsAgression = 0 ;
 319: LD_ADDR_EXP 30
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// debugMode = 0 ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// missionPrefix = 05_ ;
 335: LD_ADDR_EXP 31
 339: PUSH
 340: LD_STRING 05_
 342: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 343: LD_ADDR_EXP 32
 347: PUSH
 348: LD_STRING 04_
 350: ST_TO_ADDR
// end ;
 351: LD_VAR 0 1
 355: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 356: LD_INT 0
 358: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 ] [ Difficulty ] ;
 359: LD_ADDR_EXP 34
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 3
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: PUSH
 378: LD_OWVAR 67
 382: ARRAY
 383: ST_TO_ADDR
// arabBreakthrough = [ 70 70$0 , 65 65$0 , 60 60$0 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 35
 388: PUSH
 389: LD_INT 147000
 391: PUSH
 392: LD_INT 136500
 394: PUSH
 395: LD_INT 126000
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: LD_OWVAR 67
 407: ARRAY
 408: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 409: LD_ADDR_EXP 36
 413: PUSH
 414: LD_INT 2
 416: PUSH
 417: LD_INT 1
 419: PUSH
 420: LD_INT 6
 422: PUSH
 423: LD_INT 3
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// arabianPatrolVehiclesAmount = 1 ;
 432: LD_ADDR_EXP 37
 436: PUSH
 437: LD_INT 1
 439: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 ] [ Difficulty ] ;
 440: LD_ADDR_EXP 38
 444: PUSH
 445: LD_INT 2
 447: PUSH
 448: LD_INT 3
 450: PUSH
 451: LD_INT 3
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: LIST
 458: PUSH
 459: LD_OWVAR 67
 463: ARRAY
 464: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 465: LD_ADDR_EXP 39
 469: PUSH
 470: LD_INT 108
 472: PUSH
 473: LD_INT 15
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: LD_INT 102
 482: PUSH
 483: LD_INT 45
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 65
 492: PUSH
 493: LD_INT 23
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 37
 502: PUSH
 503: LD_INT 28
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: LD_INT 32
 512: PUSH
 513: LD_INT 40
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: PUSH
 520: LD_INT 45
 522: PUSH
 523: LD_INT 74
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 69
 532: PUSH
 533: LD_INT 98
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 101
 542: PUSH
 543: LD_INT 101
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 117
 552: PUSH
 553: LD_INT 84
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 158
 562: PUSH
 563: LD_INT 132
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: ST_TO_ADDR
// end ;
 582: LD_VAR 0 1
 586: RET
// every 0 0$1 trigger debugMode do var i ;
 587: LD_EXP 33
 591: IFFALSE 906
 593: GO 595
 595: DISABLE
 596: LD_INT 0
 598: PPUSH
// begin enable ;
 599: ENABLE
// FogOff ( your_side ) ;
 600: LD_OWVAR 2
 604: PPUSH
 605: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 609: LD_ADDR_VAR 0 1
 613: PUSH
 614: LD_INT 22
 616: PUSH
 617: LD_OWVAR 2
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PUSH
 626: LD_INT 2
 628: PUSH
 629: LD_INT 21
 631: PUSH
 632: LD_INT 1
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 21
 641: PUSH
 642: LD_INT 2
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PPUSH
 658: CALL_OW 69
 662: PUSH
 663: FOR_IN
 664: IFFALSE 680
// SetLives ( i , 1000 ) ;
 666: LD_VAR 0 1
 670: PPUSH
 671: LD_INT 1000
 673: PPUSH
 674: CALL_OW 234
 678: GO 663
 680: POP
 681: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 682: LD_ADDR_VAR 0 1
 686: PUSH
 687: LD_INT 22
 689: PUSH
 690: LD_OWVAR 2
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 21
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PPUSH
 713: CALL_OW 69
 717: PUSH
 718: FOR_IN
 719: IFFALSE 783
// begin SetSkill ( i , skill_combat , 10 ) ;
 721: LD_VAR 0 1
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_INT 10
 731: PPUSH
 732: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 736: LD_VAR 0 1
 740: PPUSH
 741: LD_INT 2
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 751: LD_VAR 0 1
 755: PPUSH
 756: LD_INT 3
 758: PPUSH
 759: LD_INT 10
 761: PPUSH
 762: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 766: LD_VAR 0 1
 770: PPUSH
 771: LD_INT 4
 773: PPUSH
 774: LD_INT 10
 776: PPUSH
 777: CALL_OW 237
// end ;
 781: GO 718
 783: POP
 784: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 785: LD_ADDR_VAR 0 1
 789: PUSH
 790: LD_INT 22
 792: PUSH
 793: LD_OWVAR 2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 2
 804: PUSH
 805: LD_INT 30
 807: PUSH
 808: LD_INT 0
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PUSH
 815: LD_INT 30
 817: PUSH
 818: LD_INT 1
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: PUSH
 839: FOR_IN
 840: IFFALSE 904
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 842: LD_VAR 0 1
 846: PPUSH
 847: CALL_OW 274
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: LD_INT 9999
 857: PPUSH
 858: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 274
 871: PPUSH
 872: LD_INT 2
 874: PPUSH
 875: LD_INT 9999
 877: PPUSH
 878: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 882: LD_VAR 0 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 3
 894: PPUSH
 895: LD_INT 9999
 897: PPUSH
 898: CALL_OW 277
// end ;
 902: GO 839
 904: POP
 905: POP
// end ; end_of_file
 906: PPOPN 1
 908: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 909: LD_INT 0
 911: PPUSH
// PrepareHeroes ;
 912: CALL 921 0 0
// end ;
 916: LD_VAR 0 1
 920: RET
// function PrepareHeroes ; var i , car ; begin
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
 925: PPUSH
// ruCars = [ ] ;
 926: LD_ADDR_EXP 49
 930: PUSH
 931: EMPTY
 932: ST_TO_ADDR
// uc_side = 3 ;
 933: LD_ADDR_OWVAR 20
 937: PUSH
 938: LD_INT 3
 940: ST_TO_ADDR
// uc_nation = 3 ;
 941: LD_ADDR_OWVAR 21
 945: PUSH
 946: LD_INT 3
 948: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 949: LD_ADDR_EXP 40
 953: PUSH
 954: LD_STRING Burlak
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL 8528 0 3
 967: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 968: LD_ADDR_EXP 45
 972: PUSH
 973: LD_STRING Titov
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL 8528 0 3
 986: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 987: LD_ADDR_EXP 46
 991: PUSH
 992: LD_STRING Dolgov
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: LD_INT 4
1000: PPUSH
1001: CALL 8528 0 3
1005: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
1006: LD_ADDR_EXP 47
1010: PUSH
1011: LD_STRING Lipshchin
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: LD_INT 1
1019: PPUSH
1020: CALL 8528 0 3
1024: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1025: LD_ADDR_EXP 41
1029: PUSH
1030: LD_STRING Karamazov
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: LD_INT 2
1038: PPUSH
1039: CALL 8528 0 3
1043: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1044: LD_ADDR_EXP 42
1048: PUSH
1049: LD_STRING Petrovova
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: LD_INT 1
1057: PPUSH
1058: CALL 8528 0 3
1062: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1063: LD_ADDR_EXP 43
1067: PUSH
1068: LD_STRING Gleb
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: LD_INT 1
1076: PPUSH
1077: CALL 8528 0 3
1081: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1082: LD_ADDR_EXP 44
1086: PUSH
1087: LD_STRING Petrosyan
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: LD_INT 4
1095: PPUSH
1096: CALL 8528 0 3
1100: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1101: LD_ADDR_EXP 48
1105: PUSH
1106: LD_STRING Platonov
1108: PPUSH
1109: LD_INT 0
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL 8528 0 3
1119: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: DOUBLE
1126: LD_INT 1
1128: DEC
1129: ST_TO_ADDR
1130: LD_EXP 4
1134: PUSH
1135: FOR_TO
1136: IFFALSE 1514
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1138: LD_ADDR_OWVAR 37
1142: PUSH
1143: LD_EXP 4
1147: PUSH
1148: LD_VAR 0 2
1152: ARRAY
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1158: LD_ADDR_OWVAR 39
1162: PUSH
1163: LD_EXP 4
1167: PUSH
1168: LD_VAR 0 2
1172: ARRAY
1173: PUSH
1174: LD_INT 2
1176: ARRAY
1177: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1178: LD_ADDR_OWVAR 38
1182: PUSH
1183: LD_EXP 4
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: PUSH
1194: LD_INT 3
1196: ARRAY
1197: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1198: LD_ADDR_OWVAR 40
1202: PUSH
1203: LD_EXP 4
1207: PUSH
1208: LD_VAR 0 2
1212: ARRAY
1213: PUSH
1214: LD_INT 4
1216: ARRAY
1217: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1218: LD_ADDR_OWVAR 24
1222: PUSH
1223: LD_INT 3
1225: PPUSH
1226: LD_INT 4
1228: PPUSH
1229: CALL_OW 12
1233: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1234: LD_ADDR_OWVAR 41
1238: PUSH
1239: LD_INT 25
1241: PPUSH
1242: LD_INT 40
1244: PPUSH
1245: CALL_OW 12
1249: ST_TO_ADDR
// car := CreateVehicle ;
1250: LD_ADDR_VAR 0 3
1254: PUSH
1255: CALL_OW 45
1259: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1260: LD_ADDR_EXP 49
1264: PUSH
1265: LD_EXP 49
1269: PUSH
1270: LD_VAR 0 3
1274: ADD
1275: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1276: LD_EXP 4
1280: PUSH
1281: LD_VAR 0 2
1285: ARRAY
1286: PUSH
1287: LD_INT 5
1289: ARRAY
1290: PUSH
1291: LD_STRING Bur
1293: DOUBLE
1294: EQUAL
1295: IFTRUE 1299
1297: GO 1316
1299: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1300: LD_EXP 40
1304: PPUSH
1305: LD_VAR 0 3
1309: PPUSH
1310: CALL_OW 52
1314: GO 1492
1316: LD_STRING Kar
1318: DOUBLE
1319: EQUAL
1320: IFTRUE 1324
1322: GO 1341
1324: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1325: LD_EXP 41
1329: PPUSH
1330: LD_VAR 0 3
1334: PPUSH
1335: CALL_OW 52
1339: GO 1492
1341: LD_STRING Ptr
1343: DOUBLE
1344: EQUAL
1345: IFTRUE 1349
1347: GO 1366
1349: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1350: LD_EXP 42
1354: PPUSH
1355: LD_VAR 0 3
1359: PPUSH
1360: CALL_OW 52
1364: GO 1492
1366: LD_STRING Glb
1368: DOUBLE
1369: EQUAL
1370: IFTRUE 1374
1372: GO 1391
1374: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1375: LD_EXP 43
1379: PPUSH
1380: LD_VAR 0 3
1384: PPUSH
1385: CALL_OW 52
1389: GO 1492
1391: LD_STRING Pet
1393: DOUBLE
1394: EQUAL
1395: IFTRUE 1399
1397: GO 1416
1399: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1400: LD_EXP 44
1404: PPUSH
1405: LD_VAR 0 3
1409: PPUSH
1410: CALL_OW 52
1414: GO 1492
1416: LD_STRING Dol
1418: DOUBLE
1419: EQUAL
1420: IFTRUE 1424
1422: GO 1441
1424: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1425: LD_EXP 46
1429: PPUSH
1430: LD_VAR 0 3
1434: PPUSH
1435: CALL_OW 52
1439: GO 1492
1441: LD_STRING Lip
1443: DOUBLE
1444: EQUAL
1445: IFTRUE 1449
1447: GO 1466
1449: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1450: LD_EXP 47
1454: PPUSH
1455: LD_VAR 0 3
1459: PPUSH
1460: CALL_OW 52
1464: GO 1492
1466: LD_STRING Tit
1468: DOUBLE
1469: EQUAL
1470: IFTRUE 1474
1472: GO 1491
1474: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1475: LD_EXP 45
1479: PPUSH
1480: LD_VAR 0 3
1484: PPUSH
1485: CALL_OW 52
1489: GO 1492
1491: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1492: LD_VAR 0 3
1496: PPUSH
1497: LD_INT 251
1499: PPUSH
1500: LD_INT 800
1502: PPUSH
1503: CALL_OW 12
1507: PPUSH
1508: CALL_OW 234
// end ;
1512: GO 1135
1514: POP
1515: POP
// for i in ruCars do
1516: LD_ADDR_VAR 0 2
1520: PUSH
1521: LD_EXP 49
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1546
// PlaceUnitArea ( i , ru_place2 , false ) ;
1529: LD_VAR 0 2
1533: PPUSH
1534: LD_INT 18
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
1544: GO 1526
1546: POP
1547: POP
// RevealFogArea ( 3 , co_vidi ) ;
1548: LD_INT 3
1550: PPUSH
1551: LD_INT 19
1553: PPUSH
1554: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1558: LD_EXP 49
1562: PPUSH
1563: LD_INT 3
1565: PPUSH
1566: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1570: LD_INT 4
1572: PPUSH
1573: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1577: LD_EXP 40
1581: PPUSH
1582: CALL_OW 310
1586: PPUSH
1587: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1591: LD_INT 3
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: LD_INT 21
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PPUSH
1618: CALL_OW 70
1622: PUSH
1623: LD_INT 5
1625: LESS
1626: IFFALSE 1651
// begin wait ( 0 0$1 ) ;
1628: LD_INT 35
1630: PPUSH
1631: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1635: LD_EXP 40
1639: PPUSH
1640: CALL_OW 310
1644: PPUSH
1645: CALL_OW 85
// end ;
1649: GO 1591
// end ; end_of_file
1651: LD_VAR 0 1
1655: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts , arabianPatrolTroops ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1656: LD_INT 0
1658: PPUSH
// arabianUnitsInBase = [ ] ;
1659: LD_ADDR_EXP 52
1663: PUSH
1664: EMPTY
1665: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1666: LD_ADDR_EXP 54
1670: PUSH
1671: EMPTY
1672: ST_TO_ADDR
// arabianPatrolTroops = [ ] ;
1673: LD_ADDR_EXP 55
1677: PUSH
1678: EMPTY
1679: ST_TO_ADDR
// arabLeftExit = true ;
1680: LD_ADDR_EXP 56
1684: PUSH
1685: LD_INT 1
1687: ST_TO_ADDR
// PrepareHeroes ;
1688: CALL 1721 0 0
// PrepareBuildings ;
1692: CALL 1787 0 0
// PrepareUnits ;
1696: CALL 2139 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1700: LD_EXP 37
1704: PPUSH
1705: LD_INT 42
1707: PPUSH
1708: CALL 2676 0 2
// PrepareArabianHovercraft ;
1712: CALL 2835 0 0
// end ;
1716: LD_VAR 0 1
1720: RET
// function PrepareHeroes ; begin
1721: LD_INT 0
1723: PPUSH
// uc_side = 2 ;
1724: LD_ADDR_OWVAR 20
1728: PUSH
1729: LD_INT 2
1731: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1732: LD_ADDR_EXP 50
1736: PUSH
1737: LD_STRING Heike
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL 8528 0 3
1750: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1751: LD_ADDR_EXP 51
1755: PUSH
1756: LD_STRING Omar
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: LD_INT 11
1764: PPUSH
1765: CALL 8528 0 3
1769: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1770: LD_EXP 51
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: CALL_OW 52
// end ;
1782: LD_VAR 0 1
1786: RET
// function PrepareBuildings ; var depot ; begin
1787: LD_INT 0
1789: PPUSH
1790: PPUSH
// uc_side = 2 ;
1791: LD_ADDR_OWVAR 20
1795: PUSH
1796: LD_INT 2
1798: ST_TO_ADDR
// uc_nation = nation_arabian ;
1799: LD_ADDR_OWVAR 21
1803: PUSH
1804: LD_INT 2
1806: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1807: LD_ADDR_OWVAR 43
1811: PUSH
1812: LD_EXP 34
1816: ST_TO_ADDR
// bc_type = b_breastwork ;
1817: LD_ADDR_OWVAR 42
1821: PUSH
1822: LD_INT 31
1824: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1825: LD_INT 118
1827: PPUSH
1828: LD_INT 63
1830: PPUSH
1831: LD_INT 1
1833: PPUSH
1834: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1838: LD_INT 120
1840: PPUSH
1841: LD_INT 66
1843: PPUSH
1844: LD_INT 1
1846: PPUSH
1847: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1851: LD_INT 123
1853: PPUSH
1854: LD_INT 73
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL_OW 47
// if Difficulty = 2 then
1864: LD_OWVAR 67
1868: PUSH
1869: LD_INT 2
1871: EQUAL
1872: IFFALSE 1887
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1874: LD_INT 145
1876: PPUSH
1877: LD_INT 83
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 47
// if Difficulty = 3 then
1887: LD_OWVAR 67
1891: PUSH
1892: LD_INT 3
1894: EQUAL
1895: IFFALSE 1923
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1897: LD_INT 145
1899: PPUSH
1900: LD_INT 83
1902: PPUSH
1903: LD_INT 0
1905: PPUSH
1906: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1910: LD_INT 151
1912: PPUSH
1913: LD_INT 81
1915: PPUSH
1916: LD_INT 5
1918: PPUSH
1919: CALL_OW 47
// end ; bc_type = b_depot ;
1923: LD_ADDR_OWVAR 42
1927: PUSH
1928: LD_INT 0
1930: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1931: LD_ADDR_VAR 0 2
1935: PUSH
1936: LD_INT 124
1938: PPUSH
1939: LD_INT 60
1941: PPUSH
1942: LD_INT 2
1944: PPUSH
1945: CALL_OW 47
1949: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1950: LD_VAR 0 2
1954: PPUSH
1955: CALL_OW 274
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: LD_INT 3000
1965: PPUSH
1966: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1970: LD_INT 131
1972: PPUSH
1973: LD_INT 51
1975: PPUSH
1976: LD_INT 2
1978: PPUSH
1979: CALL_OW 441
// bc_type = b_oil_mine ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 29
1990: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
1991: LD_INT 131
1993: PPUSH
1994: LD_INT 51
1996: PPUSH
1997: LD_INT 2
1999: PPUSH
2000: CALL_OW 47
// case Difficulty of 1 :
2004: LD_OWVAR 67
2008: PUSH
2009: LD_INT 1
2011: DOUBLE
2012: EQUAL
2013: IFTRUE 2017
2015: GO 2033
2017: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2018: LD_INT 48
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 322
// end ; 2 :
2031: GO 2134
2033: LD_INT 2
2035: DOUBLE
2036: EQUAL
2037: IFTRUE 2041
2039: GO 2070
2041: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2042: LD_INT 48
2044: PPUSH
2045: LD_INT 2
2047: PPUSH
2048: LD_INT 2
2050: PPUSH
2051: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2055: LD_INT 51
2057: PPUSH
2058: LD_INT 2
2060: PPUSH
2061: LD_INT 2
2063: PPUSH
2064: CALL_OW 322
// end ; 3 :
2068: GO 2134
2070: LD_INT 3
2072: DOUBLE
2073: EQUAL
2074: IFTRUE 2078
2076: GO 2133
2078: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2079: LD_INT 48
2081: PPUSH
2082: LD_INT 2
2084: PPUSH
2085: LD_INT 2
2087: PPUSH
2088: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2092: LD_INT 51
2094: PPUSH
2095: LD_INT 2
2097: PPUSH
2098: LD_INT 2
2100: PPUSH
2101: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2105: LD_INT 49
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 2
2113: PPUSH
2114: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2118: LD_INT 52
2120: PPUSH
2121: LD_INT 2
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: CALL_OW 322
// end ; end ;
2131: GO 2134
2133: POP
// end ;
2134: LD_VAR 0 1
2138: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2139: LD_INT 0
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
// uc_side = 2 ;
2145: LD_ADDR_OWVAR 20
2149: PUSH
2150: LD_INT 2
2152: ST_TO_ADDR
// uc_nation = 2 ;
2153: LD_ADDR_OWVAR 21
2157: PUSH
2158: LD_INT 2
2160: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2161: LD_ADDR_VAR 0 4
2165: PUSH
2166: LD_INT 22
2168: PUSH
2169: LD_INT 2
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 30
2178: PUSH
2179: LD_INT 31
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PPUSH
2190: CALL_OW 69
2194: PUSH
2195: FOR_IN
2196: IFFALSE 2252
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2198: LD_INT 0
2200: PPUSH
2201: LD_EXP 34
2205: PPUSH
2206: CALL_OW 381
// unit = CreateHuman ;
2210: LD_ADDR_VAR 0 3
2214: PUSH
2215: CALL_OW 44
2219: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2220: LD_VAR 0 3
2224: PPUSH
2225: LD_VAR 0 4
2229: PPUSH
2230: CALL 9128 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2234: LD_ADDR_EXP 52
2238: PUSH
2239: LD_EXP 52
2243: PUSH
2244: LD_VAR 0 3
2248: ADD
2249: ST_TO_ADDR
// end ;
2250: GO 2195
2252: POP
2253: POP
// for i := 1 to arabianUnits [ 1 ] do
2254: LD_ADDR_VAR 0 2
2258: PUSH
2259: DOUBLE
2260: LD_INT 1
2262: DEC
2263: ST_TO_ADDR
2264: LD_EXP 36
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: PUSH
2273: FOR_TO
2274: IFFALSE 2331
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2276: LD_INT 0
2278: PPUSH
2279: LD_EXP 34
2283: PPUSH
2284: CALL_OW 381
// unit = CreateHuman ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: CALL_OW 44
2297: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2298: LD_VAR 0 3
2302: PPUSH
2303: LD_INT 38
2305: PPUSH
2306: LD_INT 0
2308: PPUSH
2309: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2313: LD_ADDR_EXP 52
2317: PUSH
2318: LD_EXP 52
2322: PUSH
2323: LD_VAR 0 3
2327: ADD
2328: ST_TO_ADDR
// end ;
2329: GO 2273
2331: POP
2332: POP
// for i := 1 to arabianUnits [ 2 ] do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: DOUBLE
2339: LD_INT 1
2341: DEC
2342: ST_TO_ADDR
2343: LD_EXP 36
2347: PUSH
2348: LD_INT 2
2350: ARRAY
2351: PUSH
2352: FOR_TO
2353: IFFALSE 2410
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2355: LD_INT 0
2357: PPUSH
2358: LD_EXP 34
2362: PPUSH
2363: CALL_OW 382
// unit = CreateHuman ;
2367: LD_ADDR_VAR 0 3
2371: PUSH
2372: CALL_OW 44
2376: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2377: LD_VAR 0 3
2381: PPUSH
2382: LD_INT 38
2384: PPUSH
2385: LD_INT 0
2387: PPUSH
2388: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2392: LD_ADDR_EXP 52
2396: PUSH
2397: LD_EXP 52
2401: PUSH
2402: LD_VAR 0 3
2406: ADD
2407: ST_TO_ADDR
// end ;
2408: GO 2352
2410: POP
2411: POP
// for i := 1 to arabianUnits [ 3 ] do
2412: LD_ADDR_VAR 0 2
2416: PUSH
2417: DOUBLE
2418: LD_INT 1
2420: DEC
2421: ST_TO_ADDR
2422: LD_EXP 36
2426: PUSH
2427: LD_INT 3
2429: ARRAY
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2489
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2434: LD_INT 0
2436: PPUSH
2437: LD_EXP 34
2441: PPUSH
2442: CALL_OW 383
// unit = CreateHuman ;
2446: LD_ADDR_VAR 0 3
2450: PUSH
2451: CALL_OW 44
2455: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2456: LD_VAR 0 3
2460: PPUSH
2461: LD_INT 38
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2471: LD_ADDR_EXP 52
2475: PUSH
2476: LD_EXP 52
2480: PUSH
2481: LD_VAR 0 3
2485: ADD
2486: ST_TO_ADDR
// end ;
2487: GO 2431
2489: POP
2490: POP
// for i := 1 to arabianUnits [ 4 ] do
2491: LD_ADDR_VAR 0 2
2495: PUSH
2496: DOUBLE
2497: LD_INT 1
2499: DEC
2500: ST_TO_ADDR
2501: LD_EXP 36
2505: PUSH
2506: LD_INT 4
2508: ARRAY
2509: PUSH
2510: FOR_TO
2511: IFFALSE 2568
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2513: LD_INT 0
2515: PPUSH
2516: LD_EXP 34
2520: PPUSH
2521: CALL_OW 384
// unit = CreateHuman ;
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: CALL_OW 44
2534: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2535: LD_VAR 0 3
2539: PPUSH
2540: LD_INT 38
2542: PPUSH
2543: LD_INT 0
2545: PPUSH
2546: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2550: LD_ADDR_EXP 52
2554: PUSH
2555: LD_EXP 52
2559: PUSH
2560: LD_VAR 0 3
2564: ADD
2565: ST_TO_ADDR
// end ;
2566: GO 2510
2568: POP
2569: POP
// end ;
2570: LD_VAR 0 1
2574: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2575: LD_INT 0
2577: PPUSH
2578: PPUSH
2579: PPUSH
// uc_side = 2 ;
2580: LD_ADDR_OWVAR 20
2584: PUSH
2585: LD_INT 2
2587: ST_TO_ADDR
// uc_nation = 2 ;
2588: LD_ADDR_OWVAR 21
2592: PUSH
2593: LD_INT 2
2595: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2596: LD_ADDR_VAR 0 2
2600: PUSH
2601: DOUBLE
2602: LD_INT 1
2604: DEC
2605: ST_TO_ADDR
2606: LD_EXP 38
2610: PUSH
2611: FOR_TO
2612: IFFALSE 2669
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2614: LD_INT 0
2616: PPUSH
2617: LD_EXP 34
2621: PPUSH
2622: CALL_OW 381
// unit = CreateHuman ;
2626: LD_ADDR_VAR 0 3
2630: PUSH
2631: CALL_OW 44
2635: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2636: LD_VAR 0 3
2640: PPUSH
2641: LD_INT 45
2643: PPUSH
2644: LD_INT 0
2646: PPUSH
2647: CALL_OW 49
// arabianPatrolTroops = arabianPatrolTroops ^ unit ;
2651: LD_ADDR_EXP 55
2655: PUSH
2656: LD_EXP 55
2660: PUSH
2661: LD_VAR 0 3
2665: ADD
2666: ST_TO_ADDR
// end ;
2667: GO 2611
2669: POP
2670: POP
// end ;
2671: LD_VAR 0 1
2675: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2676: LD_INT 0
2678: PPUSH
2679: PPUSH
2680: PPUSH
// uc_side = 2 ;
2681: LD_ADDR_OWVAR 20
2685: PUSH
2686: LD_INT 2
2688: ST_TO_ADDR
// uc_nation = 2 ;
2689: LD_ADDR_OWVAR 21
2693: PUSH
2694: LD_INT 2
2696: ST_TO_ADDR
// for i := 1 to amount do
2697: LD_ADDR_VAR 0 4
2701: PUSH
2702: DOUBLE
2703: LD_INT 1
2705: DEC
2706: ST_TO_ADDR
2707: LD_VAR 0 1
2711: PUSH
2712: FOR_TO
2713: IFFALSE 2828
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2715: LD_INT 14
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 26
2726: PUSH
2727: LD_INT 25
2729: PUSH
2730: LD_INT 27
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: LIST
2737: PUSH
2738: LD_INT 1
2740: PPUSH
2741: LD_INT 3
2743: PPUSH
2744: CALL_OW 12
2748: ARRAY
2749: PPUSH
2750: LD_INT 100
2752: PPUSH
2753: CALL 26046 0 5
// veh = CreateVehicle ;
2757: LD_ADDR_VAR 0 5
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2767: LD_ADDR_EXP 53
2771: PUSH
2772: LD_EXP 53
2776: PUSH
2777: LD_VAR 0 5
2781: ADD
2782: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2783: LD_VAR 0 5
2787: PPUSH
2788: LD_VAR 0 2
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2800: LD_INT 0
2802: PPUSH
2803: LD_EXP 34
2807: PPUSH
2808: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2812: CALL_OW 44
2816: PPUSH
2817: LD_VAR 0 5
2821: PPUSH
2822: CALL_OW 52
// end ;
2826: GO 2712
2828: POP
2829: POP
// end ;
2830: LD_VAR 0 3
2834: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2835: LD_INT 0
2837: PPUSH
2838: PPUSH
2839: PPUSH
// uc_side = 2 ;
2840: LD_ADDR_OWVAR 20
2844: PUSH
2845: LD_INT 2
2847: ST_TO_ADDR
// uc_nation = 2 ;
2848: LD_ADDR_OWVAR 21
2852: PUSH
2853: LD_INT 2
2855: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_EXP 37
2870: PUSH
2871: FOR_TO
2872: IFFALSE 2981
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2874: LD_INT 11
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 1
2882: PPUSH
2883: LD_INT 24
2885: PUSH
2886: LD_INT 23
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 2
2898: PPUSH
2899: CALL_OW 12
2903: ARRAY
2904: PPUSH
2905: LD_INT 100
2907: PPUSH
2908: CALL 26046 0 5
// veh = CreateVehicle ;
2912: LD_ADDR_VAR 0 3
2916: PUSH
2917: CALL_OW 45
2921: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2922: LD_ADDR_EXP 54
2926: PUSH
2927: LD_EXP 54
2931: PUSH
2932: LD_VAR 0 3
2936: ADD
2937: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2938: LD_VAR 0 3
2942: PPUSH
2943: LD_INT 47
2945: PPUSH
2946: LD_INT 0
2948: PPUSH
2949: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2953: LD_INT 0
2955: PPUSH
2956: LD_EXP 34
2960: PPUSH
2961: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2965: CALL_OW 44
2969: PPUSH
2970: LD_VAR 0 3
2974: PPUSH
2975: CALL_OW 52
// end ;
2979: GO 2871
2981: POP
2982: POP
// end ; end_of_file
2983: LD_VAR 0 1
2987: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
2988: LD_INT 0
2990: PPUSH
2991: PPUSH
2992: PPUSH
2993: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 66
3001: PUSH
3002: LD_INT 87
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 66
3011: PUSH
3012: LD_INT 86
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 67
3021: PUSH
3022: LD_INT 86
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: LD_INT 69
3031: PUSH
3032: LD_INT 87
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 70
3041: PUSH
3042: LD_INT 88
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 71
3051: PUSH
3052: LD_INT 89
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PUSH
3059: LD_INT 72
3061: PUSH
3062: LD_INT 90
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PUSH
3069: LD_INT 72
3071: PUSH
3072: LD_INT 91
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3089: LD_INT 280
3091: PPUSH
3092: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3096: LD_EXP 40
3100: PPUSH
3101: LD_STRING DStart-Bur-1
3103: PPUSH
3104: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3108: LD_EXP 48
3112: PPUSH
3113: LD_STRING DStart-Pla-1
3115: PPUSH
3116: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3120: LD_EXP 40
3124: PPUSH
3125: LD_STRING DStart-Bur-2
3127: PPUSH
3128: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3132: LD_EXP 48
3136: PPUSH
3137: LD_STRING DStart-Pla-2
3139: PPUSH
3140: CALL_OW 94
// x = 0 ;
3144: LD_ADDR_VAR 0 4
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3152: LD_ADDR_VAR 0 2
3156: PUSH
3157: LD_INT 22
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: LD_INT 21
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PPUSH
3181: CALL_OW 69
3185: PUSH
3186: FOR_IN
3187: IFFALSE 3275
// begin ComExitVehicle ( unit ) ;
3189: LD_VAR 0 2
3193: PPUSH
3194: CALL_OW 121
// wait ( 0 0$1 ) ;
3198: LD_INT 35
3200: PPUSH
3201: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3205: LD_VAR 0 2
3209: PPUSH
3210: LD_VAR 0 3
3214: PUSH
3215: LD_VAR 0 4
3219: ARRAY
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: PPUSH
3225: LD_VAR 0 3
3229: PUSH
3230: LD_VAR 0 4
3234: ARRAY
3235: PUSH
3236: LD_INT 2
3238: ARRAY
3239: PPUSH
3240: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3244: LD_VAR 0 2
3248: PPUSH
3249: LD_INT 69
3251: PPUSH
3252: LD_INT 96
3254: PPUSH
3255: CALL_OW 178
// x = x + 1 ;
3259: LD_ADDR_VAR 0 4
3263: PUSH
3264: LD_VAR 0 4
3268: PUSH
3269: LD_INT 1
3271: PLUS
3272: ST_TO_ADDR
// end ;
3273: GO 3186
3275: POP
3276: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3277: LD_EXP 40
3281: PPUSH
3282: CALL_OW 87
// x = 0 ;
3286: LD_ADDR_VAR 0 4
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3294: LD_ADDR_VAR 0 2
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 21
3311: PUSH
3312: LD_INT 1
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3401
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_VAR 0 4
3345: ARRAY
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PPUSH
3351: LD_VAR 0 3
3355: PUSH
3356: LD_VAR 0 4
3360: ARRAY
3361: PUSH
3362: LD_INT 2
3364: ARRAY
3365: PPUSH
3366: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3370: LD_VAR 0 2
3374: PPUSH
3375: LD_INT 69
3377: PPUSH
3378: LD_INT 96
3380: PPUSH
3381: CALL_OW 178
// x = x + 1 ;
3385: LD_ADDR_VAR 0 4
3389: PUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_INT 1
3397: PLUS
3398: ST_TO_ADDR
// end ;
3399: GO 3328
3401: POP
3402: POP
// wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3410: LD_EXP 40
3414: PPUSH
3415: LD_INT 70
3417: PPUSH
3418: LD_INT 90
3420: PPUSH
3421: CALL_OW 297
3425: PUSH
3426: LD_INT 7
3428: LESS
3429: PUSH
3430: LD_EXP 41
3434: PPUSH
3435: LD_INT 70
3437: PPUSH
3438: LD_INT 90
3440: PPUSH
3441: CALL_OW 297
3445: PUSH
3446: LD_INT 7
3448: LESS
3449: AND
3450: PUSH
3451: LD_EXP 42
3455: PPUSH
3456: LD_INT 70
3458: PPUSH
3459: LD_INT 90
3461: PPUSH
3462: CALL_OW 297
3466: PUSH
3467: LD_INT 7
3469: LESS
3470: AND
3471: PUSH
3472: LD_EXP 43
3476: PPUSH
3477: LD_INT 70
3479: PPUSH
3480: LD_INT 90
3482: PPUSH
3483: CALL_OW 297
3487: PUSH
3488: LD_INT 7
3490: LESS
3491: AND
3492: PUSH
3493: LD_EXP 47
3497: PPUSH
3498: LD_INT 70
3500: PPUSH
3501: LD_INT 90
3503: PPUSH
3504: CALL_OW 297
3508: PUSH
3509: LD_INT 7
3511: LESS
3512: AND
3513: IFFALSE 3277
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3515: LD_EXP 41
3519: PPUSH
3520: LD_STRING DDoubts-Kar-1
3522: PPUSH
3523: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3527: LD_EXP 42
3531: PPUSH
3532: LD_STRING DDoubts-Ptr-1
3534: PPUSH
3535: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-1 ) ;
3539: LD_EXP 40
3543: PPUSH
3544: LD_STRING DDoubts-Bur-1
3546: PPUSH
3547: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3551: LD_EXP 41
3555: PPUSH
3556: LD_STRING DDoubts-Kar-2
3558: PPUSH
3559: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3563: LD_EXP 43
3567: PPUSH
3568: LD_STRING DDoubts-Glb-2
3570: PPUSH
3571: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3575: LD_EXP 40
3579: PPUSH
3580: LD_STRING DDoubts-Bur-2
3582: PPUSH
3583: CALL_OW 88
// InGameOff ;
3587: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3591: LD_STRING MBegin
3593: PPUSH
3594: CALL_OW 337
// SaveForQuickRestart ;
3598: CALL_OW 22
// BuildBase ;
3602: CALL 10718 0 0
// end ;
3606: LD_VAR 0 1
3610: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3611: LD_EXP 8
3615: NOT
3616: IFFALSE 3876
3618: GO 3620
3620: DISABLE
3621: LD_INT 0
3623: PPUSH
// begin enable ;
3624: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3625: LD_ADDR_VAR 0 1
3629: PUSH
3630: LD_INT 34
3632: PPUSH
3633: LD_INT 22
3635: PUSH
3636: LD_INT 2
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 21
3645: PUSH
3646: LD_INT 3
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PPUSH
3657: CALL_OW 70
3661: PUSH
3662: FOR_IN
3663: IFFALSE 3874
// if See ( 3 , unit ) then
3665: LD_INT 3
3667: PPUSH
3668: LD_VAR 0 1
3672: PPUSH
3673: CALL_OW 292
3677: IFFALSE 3872
// begin sawArabianBase = true ;
3679: LD_ADDR_EXP 8
3683: PUSH
3684: LD_INT 1
3686: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3687: LD_VAR 0 1
3691: PPUSH
3692: CALL_OW 87
// DialogueOn ;
3696: CALL_OW 6
// if IsOk ( Lipshchin ) then
3700: LD_EXP 47
3704: PPUSH
3705: CALL_OW 302
3709: IFFALSE 3723
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3711: LD_EXP 47
3715: PPUSH
3716: LD_STRING DArabs-RSol1-1
3718: PPUSH
3719: CALL_OW 88
// if IsOk ( Karamazov ) then
3723: LD_EXP 41
3727: PPUSH
3728: CALL_OW 302
3732: IFFALSE 3746
// Say ( Karamazov , DArabs-Kar-1 ) ;
3734: LD_EXP 41
3738: PPUSH
3739: LD_STRING DArabs-Kar-1
3741: PPUSH
3742: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3746: LD_EXP 40
3750: PPUSH
3751: LD_STRING DArabs-Bur-1
3753: PPUSH
3754: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3758: LD_EXP 48
3762: PPUSH
3763: LD_STRING DArabs-Pla-1
3765: PPUSH
3766: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3770: LD_EXP 51
3774: PPUSH
3775: LD_STRING DSurrender-Omar-1
3777: PPUSH
3778: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3782: LD_STRING QSurrender
3784: PPUSH
3785: CALL_OW 97
3789: PUSH
3790: LD_INT 1
3792: DOUBLE
3793: EQUAL
3794: IFTRUE 3798
3796: GO 3817
3798: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3799: LD_EXP 40
3803: PPUSH
3804: LD_STRING DQrSurrender#1-Bur-1
3806: PPUSH
3807: CALL_OW 88
// Lose_Survive ;
3811: CALL 17385 0 0
// end ; 2 :
3815: GO 3864
3817: LD_INT 2
3819: DOUBLE
3820: EQUAL
3821: IFTRUE 3825
3823: GO 3840
3825: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3826: LD_EXP 40
3830: PPUSH
3831: LD_STRING DQrSurrender#2-Bur-1
3833: PPUSH
3834: CALL_OW 88
3838: GO 3864
3840: LD_INT 3
3842: DOUBLE
3843: EQUAL
3844: IFTRUE 3848
3846: GO 3863
3848: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3849: LD_EXP 40
3853: PPUSH
3854: LD_STRING DQrSurrender#3-Bur-1
3856: PPUSH
3857: CALL_OW 88
3861: GO 3864
3863: POP
// DialogueOff ;
3864: CALL_OW 7
// exit ;
3868: POP
3869: POP
3870: GO 3876
// end ;
3872: GO 3662
3874: POP
3875: POP
// end ;
3876: PPOPN 1
3878: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3879: LD_EXP 9
3883: NOT
3884: PUSH
3885: LD_INT 1
3887: PPUSH
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 321
3895: PUSH
3896: LD_INT 1
3898: EQUAL
3899: AND
3900: IFFALSE 4265
3902: GO 3904
3904: DISABLE
3905: LD_INT 0
3907: PPUSH
3908: PPUSH
// begin enable ;
3909: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3910: LD_ADDR_VAR 0 1
3914: PUSH
3915: LD_INT 22
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: LD_INT 25
3927: PUSH
3928: LD_INT 12
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PPUSH
3939: CALL_OW 69
3943: PUSH
3944: FOR_IN
3945: IFFALSE 4263
// if See ( 3 , unit ) then
3947: LD_INT 3
3949: PPUSH
3950: LD_VAR 0 1
3954: PPUSH
3955: CALL_OW 292
3959: IFFALSE 4261
// begin sawApeman = true ;
3961: LD_ADDR_EXP 9
3965: PUSH
3966: LD_INT 1
3968: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_INT 22
3976: PUSH
3977: LD_INT 3
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 21
3986: PUSH
3987: LD_INT 1
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PUSH
3994: LD_INT 26
3996: PUSH
3997: LD_INT 1
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 50
4006: PUSH
4007: EMPTY
4008: LIST
4009: PUSH
4010: LD_INT 2
4012: PUSH
4013: LD_INT 25
4015: PUSH
4016: LD_INT 1
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 25
4025: PUSH
4026: LD_INT 2
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 25
4035: PUSH
4036: LD_INT 3
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 25
4045: PUSH
4046: LD_INT 4
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: PPUSH
4067: CALL_OW 69
4071: PPUSH
4072: LD_VAR 0 1
4076: PPUSH
4077: CALL_OW 74
4081: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4082: LD_VAR 0 1
4086: PPUSH
4087: CALL_OW 87
// DialogueOn ;
4091: CALL_OW 6
// if nearUnit = Burlak then
4095: LD_VAR 0 2
4099: PUSH
4100: LD_EXP 40
4104: EQUAL
4105: IFFALSE 4121
// Say ( Burlak , DApeSpot-Bur-1a ) else
4107: LD_EXP 40
4111: PPUSH
4112: LD_STRING DApeSpot-Bur-1a
4114: PPUSH
4115: CALL_OW 88
4119: GO 4133
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_STRING DApeSpot-RSol1-1
4128: PPUSH
4129: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4133: LD_EXP 40
4137: PPUSH
4138: LD_STRING DApeSpot-Bur-1
4140: PPUSH
4141: CALL_OW 88
// if IsOK ( Petrosyan ) then
4145: LD_EXP 44
4149: PPUSH
4150: CALL_OW 302
4154: IFFALSE 4253
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4156: LD_EXP 44
4160: PPUSH
4161: LD_STRING DApeSpot-Pty-1
4163: PPUSH
4164: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4168: LD_INT 22
4170: PUSH
4171: LD_INT 3
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 21
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: LD_INT 30
4193: PUSH
4194: LD_INT 6
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 30
4203: PUSH
4204: LD_INT 7
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: IFFALSE 4241
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4227: LD_EXP 44
4231: PPUSH
4232: LD_STRING DApeSpot-Pty-1a
4234: PPUSH
4235: CALL_OW 88
4239: GO 4253
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4241: LD_EXP 44
4245: PPUSH
4246: LD_STRING DApeSpot-Pty-1b
4248: PPUSH
4249: CALL_OW 88
// end ; DialogueOff ;
4253: CALL_OW 7
// exit ;
4257: POP
4258: POP
4259: GO 4265
// end ;
4261: GO 3944
4263: POP
4264: POP
// end ;
4265: PPOPN 2
4267: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and not buildedLab do
4268: LD_EXP 44
4272: PPUSH
4273: CALL_OW 302
4277: PUSH
4278: LD_INT 22
4280: PUSH
4281: LD_INT 3
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 21
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 30
4303: PUSH
4304: LD_INT 6
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 30
4313: PUSH
4314: LD_INT 7
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: PPUSH
4331: CALL_OW 69
4335: NOT
4336: AND
4337: PUSH
4338: LD_EXP 25
4342: NOT
4343: AND
4344: IFFALSE 4361
4346: GO 4348
4348: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4349: LD_EXP 44
4353: PPUSH
4354: LD_STRING DApeLab-Pty-1
4356: PPUSH
4357: CALL_OW 88
4361: END
// export function Dial_ResearchApeLang ; begin
4362: LD_INT 0
4364: PPUSH
// DialogueOn ;
4365: CALL_OW 6
// if IsOK ( Petrosyan ) then
4369: LD_EXP 44
4373: PPUSH
4374: CALL_OW 302
4378: IFFALSE 4464
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4380: LD_EXP 44
4384: PPUSH
4385: LD_STRING DApeLangCompl-Pty-1
4387: PPUSH
4388: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4392: LD_EXP 40
4396: PPUSH
4397: LD_STRING DApeLangCompl-Bur-1
4399: PPUSH
4400: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4404: LD_EXP 44
4408: PPUSH
4409: LD_STRING DApeLangCompl-Pty-2
4411: PPUSH
4412: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4416: LD_EXP 40
4420: PPUSH
4421: LD_STRING DApeLangCompl-Bur-2
4423: PPUSH
4424: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4428: LD_EXP 44
4432: PPUSH
4433: LD_STRING DApeLangCompl-Pty-3
4435: PPUSH
4436: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4440: LD_EXP 40
4444: PPUSH
4445: LD_STRING DApeLangCompl-Bur-3
4447: PPUSH
4448: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4452: LD_EXP 44
4456: PPUSH
4457: LD_STRING DApeLangCompl-Pty-4
4459: PPUSH
4460: CALL_OW 88
// end ; DialogueOff ;
4464: CALL_OW 7
// end ;
4468: LD_VAR 0 1
4472: RET
// export function Dial_TameApe ( sci ) ; begin
4473: LD_INT 0
4475: PPUSH
// dial_tameApeBlocker = true ;
4476: LD_ADDR_EXP 10
4480: PUSH
4481: LD_INT 1
4483: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4484: LD_VAR 0 1
4488: PPUSH
4489: CALL_OW 258
4493: PUSH
4494: LD_INT 1
4496: EQUAL
4497: IFFALSE 4513
// Say ( sci , DApeTame-Sci1-1 ) else
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_STRING DApeTame-Sci1-1
4506: PPUSH
4507: CALL_OW 88
4511: GO 4677
// begin if IsOK ( Petrosyan ) then
4513: LD_EXP 44
4517: PPUSH
4518: CALL_OW 302
4522: IFFALSE 4538
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4524: LD_EXP 44
4528: PPUSH
4529: LD_STRING DApeTame-Sci1-1
4531: PPUSH
4532: CALL_OW 88
4536: GO 4677
// if IsOK ( Dolgov ) then
4538: LD_EXP 46
4542: PPUSH
4543: CALL_OW 302
4547: IFFALSE 4563
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4549: LD_EXP 46
4553: PPUSH
4554: LD_STRING DApeTame-Sci1-1
4556: PPUSH
4557: CALL_OW 88
4561: GO 4677
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4563: LD_INT 22
4565: PUSH
4566: LD_INT 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 21
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 26
4585: PUSH
4586: LD_INT 1
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 50
4595: PUSH
4596: EMPTY
4597: LIST
4598: PUSH
4599: LD_INT 2
4601: PUSH
4602: LD_INT 25
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 25
4614: PUSH
4615: LD_INT 2
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 25
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 25
4634: PUSH
4635: LD_INT 4
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: PPUSH
4661: LD_STRING DApeTame-Sci1-1
4663: PPUSH
4664: LD_STRING 
4666: PPUSH
4667: LD_INT 0
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: CALL 8845 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4677: LD_EXP 40
4681: PPUSH
4682: LD_STRING DApeTame-Bur-1
4684: PPUSH
4685: CALL_OW 88
// end ;
4689: LD_VAR 0 2
4693: RET
// export function Dial_ApeEnterLab ; begin
4694: LD_INT 0
4696: PPUSH
// dial_apeEnterLabBlocker = true ;
4697: LD_ADDR_EXP 11
4701: PUSH
4702: LD_INT 1
4704: ST_TO_ADDR
// DialogueOn ;
4705: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4709: LD_EXP 40
4713: PPUSH
4714: LD_STRING DApeWorkSol-Bur-1
4716: PPUSH
4717: CALL_OW 88
// if IsOK ( Petrosyan ) then
4721: LD_EXP 44
4725: PPUSH
4726: CALL_OW 302
4730: IFFALSE 4746
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4732: LD_EXP 44
4736: PPUSH
4737: LD_STRING DApeWorkSol-Pty-1
4739: PPUSH
4740: CALL_OW 88
4744: GO 4885
// if IsOK ( Dolgov ) then
4746: LD_EXP 46
4750: PPUSH
4751: CALL_OW 302
4755: IFFALSE 4771
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4757: LD_EXP 46
4761: PPUSH
4762: LD_STRING DApeWorkSol-Pty-1
4764: PPUSH
4765: CALL_OW 88
4769: GO 4885
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4771: LD_INT 22
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: LD_INT 21
4783: PUSH
4784: LD_INT 1
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 26
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 50
4803: PUSH
4804: EMPTY
4805: LIST
4806: PUSH
4807: LD_INT 2
4809: PUSH
4810: LD_INT 25
4812: PUSH
4813: LD_INT 1
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PUSH
4820: LD_INT 25
4822: PUSH
4823: LD_INT 2
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 25
4832: PUSH
4833: LD_INT 3
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 25
4842: PUSH
4843: LD_INT 4
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PPUSH
4864: CALL_OW 69
4868: PPUSH
4869: LD_STRING DApeWorkSol-Pty-1
4871: PPUSH
4872: LD_STRING 
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: CALL 8845 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4885: LD_EXP 40
4889: PPUSH
4890: LD_STRING DApeWorkSol-Bur-2
4892: PPUSH
4893: CALL_OW 88
// DialogueOff ;
4897: CALL_OW 7
// end ;
4901: LD_VAR 0 1
4905: RET
// export function Dial_ResearchApePsych ; begin
4906: LD_INT 0
4908: PPUSH
// DialogueOn ;
4909: CALL_OW 6
// if IsOK ( Petrosyan ) then
4913: LD_EXP 44
4917: PPUSH
4918: CALL_OW 302
4922: IFFALSE 4938
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4924: LD_EXP 44
4928: PPUSH
4929: LD_STRING DApeWorkCompl-Pty-1
4931: PPUSH
4932: CALL_OW 88
4936: GO 5077
// if IsOK ( Dolgov ) then
4938: LD_EXP 46
4942: PPUSH
4943: CALL_OW 302
4947: IFFALSE 4963
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4949: LD_EXP 46
4953: PPUSH
4954: LD_STRING DApeWorkCompl-Pty-1
4956: PPUSH
4957: CALL_OW 88
4961: GO 5077
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4963: LD_INT 22
4965: PUSH
4966: LD_INT 3
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: LD_INT 21
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: LD_INT 26
4985: PUSH
4986: LD_INT 1
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 50
4995: PUSH
4996: EMPTY
4997: LIST
4998: PUSH
4999: LD_INT 2
5001: PUSH
5002: LD_INT 25
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 25
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: LD_INT 25
5024: PUSH
5025: LD_INT 3
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 25
5034: PUSH
5035: LD_INT 4
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: PPUSH
5056: CALL_OW 69
5060: PPUSH
5061: LD_STRING DApeWorkCompl-Pty-1
5063: PPUSH
5064: LD_STRING 
5066: PPUSH
5067: LD_INT 0
5069: PPUSH
5070: LD_INT 1
5072: PPUSH
5073: CALL 8845 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5077: LD_EXP 40
5081: PPUSH
5082: LD_STRING DApeWorkCompl-Bur-1
5084: PPUSH
5085: CALL_OW 88
// DialogueOff ;
5089: CALL_OW 7
// end ;
5093: LD_VAR 0 1
5097: RET
// export function Dial_ResearchApeAgress ; begin
5098: LD_INT 0
5100: PPUSH
// DialogueOn ;
5101: CALL_OW 6
// if IsOK ( Petrosyan ) then
5105: LD_EXP 44
5109: PPUSH
5110: CALL_OW 302
5114: IFFALSE 5130
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5116: LD_EXP 44
5120: PPUSH
5121: LD_STRING DApeSolCompl-Pty-1
5123: PPUSH
5124: CALL_OW 88
5128: GO 5269
// if IsOK ( Dolgov ) then
5130: LD_EXP 46
5134: PPUSH
5135: CALL_OW 302
5139: IFFALSE 5155
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5141: LD_EXP 46
5145: PPUSH
5146: LD_STRING DApeSolCompl-Pty-1
5148: PPUSH
5149: CALL_OW 88
5153: GO 5269
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5155: LD_INT 22
5157: PUSH
5158: LD_INT 3
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: LD_INT 21
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 26
5177: PUSH
5178: LD_INT 1
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 50
5187: PUSH
5188: EMPTY
5189: LIST
5190: PUSH
5191: LD_INT 2
5193: PUSH
5194: LD_INT 25
5196: PUSH
5197: LD_INT 1
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: LD_INT 25
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PUSH
5214: LD_INT 25
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 25
5226: PUSH
5227: LD_INT 4
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 69
5252: PPUSH
5253: LD_STRING DApeSolCompl-Pty-1
5255: PPUSH
5256: LD_STRING 
5258: PPUSH
5259: LD_INT 0
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL 8845 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5269: LD_EXP 40
5273: PPUSH
5274: LD_STRING DApeSolCompl-Bur-1
5276: PPUSH
5277: CALL_OW 88
// DialogueOff ;
5281: CALL_OW 7
// end ;
5285: LD_VAR 0 1
5289: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5290: LD_INT 3
5292: PPUSH
5293: LD_INT 74
5295: PPUSH
5296: LD_INT 115
5298: PPUSH
5299: CALL_OW 293
5303: IFFALSE 5434
5305: GO 5307
5307: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5308: LD_INT 22
5310: PUSH
5311: LD_INT 3
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: PUSH
5318: LD_INT 21
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 26
5330: PUSH
5331: LD_INT 1
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 50
5340: PUSH
5341: EMPTY
5342: LIST
5343: PUSH
5344: LD_INT 2
5346: PUSH
5347: LD_INT 25
5349: PUSH
5350: LD_INT 1
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 25
5359: PUSH
5360: LD_INT 2
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 25
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 25
5379: PUSH
5380: LD_INT 4
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 69
5405: PPUSH
5406: LD_STRING DShipments-RSol1-1
5408: PPUSH
5409: LD_STRING 
5411: PPUSH
5412: LD_INT 0
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: CALL 8845 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5422: LD_EXP 40
5426: PPUSH
5427: LD_STRING DShipments-Bur-1
5429: PPUSH
5430: CALL_OW 88
// end ;
5434: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5435: LD_INT 3
5437: PPUSH
5438: LD_INT 81
5440: PPUSH
5441: LD_INT 132
5443: PPUSH
5444: CALL_OW 293
5448: IFFALSE 5588
5450: GO 5452
5452: DISABLE
5453: LD_INT 0
5455: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5456: LD_ADDR_VAR 0 1
5460: PUSH
5461: LD_INT 22
5463: PUSH
5464: LD_INT 3
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: LD_INT 21
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 26
5483: PUSH
5484: LD_INT 1
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 50
5493: PUSH
5494: EMPTY
5495: LIST
5496: PUSH
5497: LD_INT 2
5499: PUSH
5500: LD_INT 25
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: LD_INT 25
5512: PUSH
5513: LD_INT 2
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 25
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 25
5532: PUSH
5533: LD_INT 4
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: PPUSH
5554: CALL_OW 69
5558: PPUSH
5559: LD_STRING DRoad-RSol1-1
5561: PPUSH
5562: LD_STRING 
5564: PPUSH
5565: LD_INT 0
5567: PPUSH
5568: LD_INT 1
5570: PPUSH
5571: CALL 8845 0 5
5575: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5576: LD_VAR 0 1
5580: PPUSH
5581: LD_STRING DRoad-RSol1-1a
5583: PPUSH
5584: CALL_OW 88
// end ;
5588: PPOPN 1
5590: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5591: LD_INT 33
5593: PPUSH
5594: LD_INT 22
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 21
5606: PUSH
5607: LD_INT 1
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: LD_INT 26
5616: PUSH
5617: LD_INT 1
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PUSH
5624: LD_INT 50
5626: PUSH
5627: EMPTY
5628: LIST
5629: PUSH
5630: LD_INT 2
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 1
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 25
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: LD_INT 25
5655: PUSH
5656: LD_INT 3
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 25
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: PPUSH
5687: CALL_OW 70
5691: PUSH
5692: LD_EXP 40
5696: PUSH
5697: EMPTY
5698: LIST
5699: DIFF
5700: PUSH
5701: LD_INT 22
5703: PUSH
5704: LD_INT 3
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 21
5713: PUSH
5714: LD_INT 3
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 30
5723: PUSH
5724: LD_INT 0
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: LD_INT 50
5733: PUSH
5734: EMPTY
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 69
5747: AND
5748: IFFALSE 5775
5750: GO 5752
5752: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5753: LD_INT 36
5755: PPUSH
5756: CALL 20885 0 1
// wait ( 0 0$2 ) ;
5760: LD_INT 70
5762: PPUSH
5763: CALL_OW 67
// stevensPlaced = true ;
5767: LD_ADDR_EXP 14
5771: PUSH
5772: LD_INT 1
5774: ST_TO_ADDR
// end ;
5775: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5776: LD_INT 3
5778: PPUSH
5779: LD_EXP 58
5783: PPUSH
5784: CALL_OW 292
5788: PUSH
5789: LD_EXP 14
5793: AND
5794: PUSH
5795: LD_EXP 24
5799: NOT
5800: AND
5801: IFFALSE 6143
5803: GO 5805
5805: DISABLE
5806: LD_INT 0
5808: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5809: LD_ADDR_VAR 0 1
5813: PUSH
5814: LD_INT 22
5816: PUSH
5817: LD_INT 3
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 21
5826: PUSH
5827: LD_INT 1
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 26
5836: PUSH
5837: LD_INT 1
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PUSH
5844: LD_INT 50
5846: PUSH
5847: EMPTY
5848: LIST
5849: PUSH
5850: LD_INT 2
5852: PUSH
5853: LD_INT 25
5855: PUSH
5856: LD_INT 1
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 25
5865: PUSH
5866: LD_INT 2
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 25
5875: PUSH
5876: LD_INT 3
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 25
5885: PUSH
5886: LD_INT 4
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: PPUSH
5907: CALL_OW 69
5911: PPUSH
5912: LD_EXP 58
5916: PPUSH
5917: CALL_OW 74
5921: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5922: LD_EXP 58
5926: PPUSH
5927: CALL_OW 87
// InGameOn ;
5931: CALL_OW 8
// DialogueOn ;
5935: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5939: LD_VAR 0 1
5943: PPUSH
5944: LD_STRING DStevens-RSol1-1
5946: PPUSH
5947: CALL_OW 88
// DialogueOff ;
5951: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5955: LD_INT 52
5957: PPUSH
5958: CALL_OW 67
// if IsOK ( Petrosyan ) then
5962: LD_EXP 44
5966: PPUSH
5967: CALL_OW 302
5971: IFFALSE 6139
// begin SetSide ( Stevens , 6 ) ;
5973: LD_EXP 58
5977: PPUSH
5978: LD_INT 6
5980: PPUSH
5981: CALL_OW 235
// DialogueOn ;
5985: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
5989: LD_EXP 58
5993: PPUSH
5994: LD_STRING DStevens-Huck-1
5996: PPUSH
5997: CALL_OW 88
// if nearUnit = Petrosyan then
6001: LD_VAR 0 1
6005: PUSH
6006: LD_EXP 44
6010: EQUAL
6011: IFFALSE 6107
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING DStevens-Pty-1a
6020: PPUSH
6021: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6025: LD_EXP 58
6029: PPUSH
6030: LD_STRING DStevens-Huck-2
6032: PPUSH
6033: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6037: LD_EXP 44
6041: PPUSH
6042: LD_STRING DStevens-Pty-2
6044: PPUSH
6045: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6049: LD_EXP 58
6053: PPUSH
6054: LD_STRING DStevens-Huck-3
6056: PPUSH
6057: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6061: LD_EXP 44
6065: PPUSH
6066: LD_STRING DStevens-Pty-3
6068: PPUSH
6069: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6073: LD_EXP 58
6077: PPUSH
6078: LD_STRING DStevens-Huck-4
6080: PPUSH
6081: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6085: LD_EXP 44
6089: PPUSH
6090: LD_STRING DStevens-Pty-4
6092: PPUSH
6093: CALL_OW 88
// stevensFollow = true ;
6097: LD_ADDR_EXP 15
6101: PUSH
6102: LD_INT 1
6104: ST_TO_ADDR
// end else
6105: GO 6135
// begin stevensFollow = true ;
6107: LD_ADDR_EXP 15
6111: PUSH
6112: LD_INT 1
6114: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6115: LD_ADDR_EXP 16
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6123: LD_EXP 44
6127: PPUSH
6128: LD_STRING DStevens-Pty-1
6130: PPUSH
6131: CALL_OW 88
// end ; DialogueOff ;
6135: CALL_OW 7
// end ; InGameOff ;
6139: CALL_OW 9
// end ;
6143: PPOPN 1
6145: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6146: LD_EXP 16
6150: PUSH
6151: LD_EXP 44
6155: PPUSH
6156: LD_EXP 58
6160: PPUSH
6161: CALL_OW 296
6165: PUSH
6166: LD_INT 20
6168: LESS
6169: AND
6170: PUSH
6171: LD_EXP 44
6175: PPUSH
6176: CALL_OW 302
6180: AND
6181: PUSH
6182: LD_EXP 24
6186: NOT
6187: AND
6188: IFFALSE 6293
6190: GO 6192
6192: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6193: LD_ADDR_EXP 16
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// DialogueOn ;
6201: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6205: LD_EXP 44
6209: PPUSH
6210: LD_STRING DStevens-Pty-1a
6212: PPUSH
6213: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6217: LD_EXP 58
6221: PPUSH
6222: LD_STRING DStevens-Huck-2
6224: PPUSH
6225: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6229: LD_EXP 44
6233: PPUSH
6234: LD_STRING DStevens-Pty-2
6236: PPUSH
6237: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6241: LD_EXP 58
6245: PPUSH
6246: LD_STRING DStevens-Huck-3
6248: PPUSH
6249: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6253: LD_EXP 44
6257: PPUSH
6258: LD_STRING DStevens-Pty-3
6260: PPUSH
6261: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6265: LD_EXP 58
6269: PPUSH
6270: LD_STRING DStevens-Huck-4
6272: PPUSH
6273: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6277: LD_EXP 44
6281: PPUSH
6282: LD_STRING DStevens-Pty-4
6284: PPUSH
6285: CALL_OW 88
// DialogueOff ;
6289: CALL_OW 7
// end ;
6293: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and GetSide ( Stevens ) = 6 and IsOK ( Petrosyan ) and not finishMissionBool do
6294: LD_EXP 58
6298: PPUSH
6299: LD_EXP 40
6303: PPUSH
6304: CALL_OW 296
6308: PUSH
6309: LD_INT 15
6311: LESS
6312: PUSH
6313: LD_EXP 58
6317: PPUSH
6318: CALL_OW 255
6322: PUSH
6323: LD_INT 6
6325: EQUAL
6326: AND
6327: PUSH
6328: LD_EXP 44
6332: PPUSH
6333: CALL_OW 302
6337: AND
6338: PUSH
6339: LD_EXP 24
6343: NOT
6344: AND
6345: IFFALSE 6560
6347: GO 6349
6349: DISABLE
// begin DialogueOn ;
6350: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6354: LD_EXP 44
6358: PPUSH
6359: LD_STRING DStevensBurlak-Pty-1
6361: PPUSH
6362: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6366: LD_EXP 40
6370: PPUSH
6371: LD_STRING DStevensBurlak-Bur-1
6373: PPUSH
6374: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6378: LD_EXP 44
6382: PPUSH
6383: LD_STRING DStevensBurlak-Pty-2
6385: PPUSH
6386: CALL_OW 88
// case Query ( QKill ) of 1 :
6390: LD_STRING QKill
6392: PPUSH
6393: CALL_OW 97
6397: PUSH
6398: LD_INT 1
6400: DOUBLE
6401: EQUAL
6402: IFTRUE 6406
6404: GO 6484
6406: POP
// begin stevensCanExitMap = true ;
6407: LD_ADDR_EXP 19
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// stevensFollow = false ;
6415: LD_ADDR_EXP 15
6419: PUSH
6420: LD_INT 0
6422: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6423: LD_EXP 40
6427: PPUSH
6428: LD_STRING DKill-1-Bur-1
6430: PPUSH
6431: CALL_OW 88
// if IsOK ( Gleb ) then
6435: LD_EXP 43
6439: PPUSH
6440: CALL_OW 302
6444: IFFALSE 6458
// Say ( Gleb , DKill-1-Glb-1 ) ;
6446: LD_EXP 43
6450: PPUSH
6451: LD_STRING DKill-1-Glb-1
6453: PPUSH
6454: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6458: LD_EXP 58
6462: PPUSH
6463: LD_INT 1
6465: PPUSH
6466: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6470: LD_EXP 58
6474: PPUSH
6475: LD_INT 37
6477: PPUSH
6478: CALL_OW 113
// end ; 2 :
6482: GO 6556
6484: LD_INT 2
6486: DOUBLE
6487: EQUAL
6488: IFTRUE 6492
6490: GO 6555
6492: POP
// begin stevensCanExitMap = true ;
6493: LD_ADDR_EXP 19
6497: PUSH
6498: LD_INT 1
6500: ST_TO_ADDR
// stevensFollow = false ;
6501: LD_ADDR_EXP 15
6505: PUSH
6506: LD_INT 0
6508: ST_TO_ADDR
// stevensDepot = true ;
6509: LD_ADDR_EXP 17
6513: PUSH
6514: LD_INT 1
6516: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6517: LD_EXP 40
6521: PPUSH
6522: LD_STRING DKill-2-Bur-1
6524: PPUSH
6525: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6529: LD_EXP 44
6533: PPUSH
6534: LD_STRING DKill-2-Pty-1
6536: PPUSH
6537: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6541: LD_EXP 40
6545: PPUSH
6546: LD_STRING DKill-2-Bur-2
6548: PPUSH
6549: CALL_OW 88
// end ; end ;
6553: GO 6556
6555: POP
// DialogueOff ;
6556: CALL_OW 7
// end ;
6560: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6561: LD_EXP 15
6565: IFFALSE 6705
6567: GO 6569
6569: DISABLE
6570: LD_INT 0
6572: PPUSH
// begin enable ;
6573: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 1
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 50
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: LD_INT 2
6607: PUSH
6608: LD_INT 25
6610: PUSH
6611: LD_INT 1
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: LD_INT 25
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 25
6630: PUSH
6631: LD_INT 3
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 25
6640: PUSH
6641: LD_INT 4
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 69
6665: PPUSH
6666: LD_EXP 58
6670: PPUSH
6671: CALL_OW 74
6675: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6676: LD_EXP 58
6680: PPUSH
6681: LD_VAR 0 1
6685: PPUSH
6686: CALL_OW 250
6690: PPUSH
6691: LD_VAR 0 1
6695: PPUSH
6696: CALL_OW 251
6700: PPUSH
6701: CALL_OW 111
// end ;
6705: PPOPN 1
6707: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6708: LD_EXP 17
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 3
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: LD_INT 30
6735: PUSH
6736: LD_INT 0
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PPUSH
6755: CALL_OW 69
6759: NOT
6760: AND
6761: IFFALSE 6788
6763: GO 6765
6765: DISABLE
// begin enable ;
6766: ENABLE
// SetSide ( Stevens , 6 ) ;
6767: LD_EXP 58
6771: PPUSH
6772: LD_INT 6
6774: PPUSH
6775: CALL_OW 235
// ComHold ( Stevens ) ;
6779: LD_EXP 58
6783: PPUSH
6784: CALL_OW 140
// end ;
6788: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6789: LD_EXP 17
6793: PUSH
6794: LD_INT 22
6796: PUSH
6797: LD_INT 3
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 21
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 30
6816: PUSH
6817: LD_INT 0
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: LD_INT 50
6826: PUSH
6827: EMPTY
6828: LIST
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 69
6840: AND
6841: IFFALSE 7440
6843: GO 6845
6845: DISABLE
6846: LD_INT 0
6848: PPUSH
6849: PPUSH
6850: PPUSH
// begin enable ;
6851: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6852: LD_ADDR_VAR 0 1
6856: PUSH
6857: LD_INT 22
6859: PUSH
6860: LD_INT 3
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 21
6869: PUSH
6870: LD_INT 3
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 30
6879: PUSH
6880: LD_INT 0
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 50
6889: PUSH
6890: EMPTY
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PPUSH
6899: CALL_OW 69
6903: PUSH
6904: LD_INT 1
6906: ARRAY
6907: ST_TO_ADDR
// stevensFollow = false ;
6908: LD_ADDR_EXP 15
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// if not depot then
6916: LD_VAR 0 1
6920: NOT
6921: IFFALSE 6925
// exit ;
6923: GO 7440
// for depotUnit in depot do
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: FOR_IN
6936: IFFALSE 6962
// if not IsConstructed ( depotUnit ) then
6938: LD_VAR 0 2
6942: PPUSH
6943: CALL_OW 304
6947: NOT
6948: IFFALSE 6960
// constructDepot = depotUnit ;
6950: LD_ADDR_VAR 0 3
6954: PUSH
6955: LD_VAR 0 2
6959: ST_TO_ADDR
6960: GO 6935
6962: POP
6963: POP
// if not constructDepot then
6964: LD_VAR 0 3
6968: NOT
6969: IFFALSE 6973
// exit ;
6971: GO 7440
// if not stevensWasInDepot then
6973: LD_EXP 18
6977: NOT
6978: IFFALSE 7118
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6980: LD_EXP 58
6984: PPUSH
6985: CALL_OW 310
6989: NOT
6990: PUSH
6991: LD_EXP 58
6995: PPUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 296
7005: PUSH
7006: LD_INT 8
7008: LESS
7009: NOT
7010: AND
7011: IFFALSE 7044
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
7013: LD_EXP 58
7017: PPUSH
7018: LD_VAR 0 3
7022: PPUSH
7023: CALL_OW 250
7027: PPUSH
7028: LD_VAR 0 3
7032: PPUSH
7033: CALL_OW 251
7037: PPUSH
7038: CALL_OW 111
7042: GO 7116
// begin InGameOn ;
7044: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7048: LD_EXP 58
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7060: LD_EXP 58
7064: PPUSH
7065: LD_VAR 0 3
7069: PPUSH
7070: CALL_OW 120
// wait ( 0 0$1 ) ;
7074: LD_INT 35
7076: PPUSH
7077: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7081: LD_EXP 58
7085: PPUSH
7086: CALL_OW 310
7090: PUSH
7091: LD_EXP 58
7095: PPUSH
7096: CALL_OW 302
7100: NOT
7101: OR
7102: IFFALSE 7048
// InGameOff ;
7104: CALL_OW 9
// stevensWasInDepot = true ;
7108: LD_ADDR_EXP 18
7112: PUSH
7113: LD_INT 1
7115: ST_TO_ADDR
// end ; end else
7116: GO 7440
// begin if not IsInUnit ( Stevens ) or GetType ( IsInUnit ( Stevens ) ) = unit_vehicle then
7118: LD_EXP 58
7122: PPUSH
7123: CALL_OW 310
7127: NOT
7128: PUSH
7129: LD_EXP 58
7133: PPUSH
7134: CALL_OW 310
7138: PPUSH
7139: CALL_OW 247
7143: PUSH
7144: LD_INT 2
7146: EQUAL
7147: OR
7148: IFFALSE 7440
// begin DialogueOn ;
7150: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7154: LD_EXP 40
7158: PPUSH
7159: LD_STRING DRelease-Bur-1
7161: PPUSH
7162: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7166: LD_STRING QKillAgain
7168: PPUSH
7169: CALL_OW 97
7173: PUSH
7174: LD_INT 1
7176: DOUBLE
7177: EQUAL
7178: IFTRUE 7182
7180: GO 7251
7182: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7183: LD_EXP 40
7187: PPUSH
7188: LD_STRING DQrKillAgain#1-Bur-1
7190: PPUSH
7191: CALL_OW 88
// stevensCanExitMap = true ;
7195: LD_ADDR_EXP 19
7199: PUSH
7200: LD_INT 1
7202: ST_TO_ADDR
// stevensWasInDepot = false ;
7203: LD_ADDR_EXP 18
7207: PUSH
7208: LD_INT 0
7210: ST_TO_ADDR
// stevensDepot = false ;
7211: LD_ADDR_EXP 17
7215: PUSH
7216: LD_INT 0
7218: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7219: LD_EXP 58
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7231: LD_EXP 58
7235: PPUSH
7236: LD_INT 37
7238: PPUSH
7239: CALL_OW 113
// DialogueOff ;
7243: CALL_OW 7
// exit ;
7247: GO 7440
// end ; 2 :
7249: GO 7436
7251: LD_INT 2
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7328
7259: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7260: LD_EXP 40
7264: PPUSH
7265: LD_STRING DQrKillAgain#2-Bur-1
7267: PPUSH
7268: CALL_OW 88
// stevensCanExitMap = true ;
7272: LD_ADDR_EXP 19
7276: PUSH
7277: LD_INT 1
7279: ST_TO_ADDR
// stevensWasInDepot = false ;
7280: LD_ADDR_EXP 18
7284: PUSH
7285: LD_INT 0
7287: ST_TO_ADDR
// stevensDepot = false ;
7288: LD_ADDR_EXP 17
7292: PUSH
7293: LD_INT 0
7295: ST_TO_ADDR
// SetSide ( Stevens , 6 ) ;
7296: LD_EXP 58
7300: PPUSH
7301: LD_INT 6
7303: PPUSH
7304: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7308: LD_EXP 58
7312: PPUSH
7313: LD_INT 37
7315: PPUSH
7316: CALL_OW 113
// DialogueOff ;
7320: CALL_OW 7
// exit ;
7324: GO 7440
// end ; 3 :
7326: GO 7436
7328: LD_INT 3
7330: DOUBLE
7331: EQUAL
7332: IFTRUE 7336
7334: GO 7435
7336: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7337: LD_EXP 40
7341: PPUSH
7342: LD_STRING DQrKillAgain#2-Bur-1a
7344: PPUSH
7345: CALL_OW 88
// DialogueOff ;
7349: CALL_OW 7
// InGameOn ;
7353: CALL_OW 8
// ComExitVehicle ( Stevens ) ;
7357: LD_EXP 58
7361: PPUSH
7362: CALL_OW 121
// wait ( 0 0$1 ) ;
7366: LD_INT 35
7368: PPUSH
7369: CALL_OW 67
// repeat SetSide ( Stevens , 3 ) ;
7373: LD_EXP 58
7377: PPUSH
7378: LD_INT 3
7380: PPUSH
7381: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7385: LD_EXP 58
7389: PPUSH
7390: LD_VAR 0 3
7394: PPUSH
7395: CALL_OW 120
// wait ( 0 0$1 ) ;
7399: LD_INT 35
7401: PPUSH
7402: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7406: LD_EXP 58
7410: PPUSH
7411: CALL_OW 310
7415: PUSH
7416: LD_EXP 58
7420: PPUSH
7421: CALL_OW 302
7425: NOT
7426: OR
7427: IFFALSE 7373
// InGameOff ;
7429: CALL_OW 9
// end ; end ;
7433: GO 7436
7435: POP
// DialogueOff ;
7436: CALL_OW 7
// end ; end ; end ;
7440: PPOPN 3
7442: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7443: LD_EXP 19
7447: PUSH
7448: LD_EXP 58
7452: PPUSH
7453: LD_INT 37
7455: PPUSH
7456: CALL_OW 308
7460: AND
7461: IFFALSE 7508
7463: GO 7465
7465: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7466: LD_EXP 58
7470: PPUSH
7471: CALL_OW 255
7475: PUSH
7476: LD_INT 6
7478: EQUAL
7479: IFFALSE 7491
// stevensStatus = 1 else
7481: LD_ADDR_EXP 2
7485: PUSH
7486: LD_INT 1
7488: ST_TO_ADDR
7489: GO 7499
// stevensStatus = 2 ;
7491: LD_ADDR_EXP 2
7495: PUSH
7496: LD_INT 2
7498: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7499: LD_EXP 58
7503: PPUSH
7504: CALL_OW 64
// end ;
7508: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7509: LD_INT 3
7511: PPUSH
7512: LD_INT 1
7514: PPUSH
7515: CALL_OW 292
7519: IFFALSE 7719
7521: GO 7523
7523: DISABLE
7524: LD_INT 0
7526: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7527: LD_ADDR_VAR 0 1
7531: PUSH
7532: LD_INT 1
7534: PPUSH
7535: LD_INT 2
7537: PPUSH
7538: CALL_OW 12
7542: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7543: LD_INT 1
7545: PPUSH
7546: CALL_OW 87
// DialogueOn ;
7550: CALL_OW 6
// if rnd = 1 then
7554: LD_VAR 0 1
7558: PUSH
7559: LD_INT 1
7561: EQUAL
7562: IFFALSE 7578
// Say ( Burlak , DMastodon-Bur-1 ) else
7564: LD_EXP 40
7568: PPUSH
7569: LD_STRING DMastodon-Bur-1
7571: PPUSH
7572: CALL_OW 88
7576: GO 7692
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7578: LD_INT 22
7580: PUSH
7581: LD_INT 3
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 21
7590: PUSH
7591: LD_INT 1
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 26
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 50
7610: PUSH
7611: EMPTY
7612: LIST
7613: PUSH
7614: LD_INT 2
7616: PUSH
7617: LD_INT 25
7619: PUSH
7620: LD_INT 1
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 25
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 25
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 25
7649: PUSH
7650: LD_INT 4
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_STRING DMastodon-RSol1-1
7678: PPUSH
7679: LD_STRING 
7681: PPUSH
7682: LD_INT 0
7684: PPUSH
7685: LD_INT 1
7687: PPUSH
7688: CALL 8845 0 5
// if IsOK ( Gleb ) then
7692: LD_EXP 43
7696: PPUSH
7697: CALL_OW 302
7701: IFFALSE 7715
// Say ( Gleb , DMastodon-Glb-1 ) ;
7703: LD_EXP 43
7707: PPUSH
7708: LD_STRING DMastodon-Glb-1
7710: PPUSH
7711: CALL_OW 88
// DialogueOff ;
7715: CALL_OW 7
// end ;
7719: PPOPN 1
7721: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 302
7729: NOT
7730: IFFALSE 7809
7732: GO 7734
7734: DISABLE
// begin omarCanExitMap = true ;
7735: LD_ADDR_EXP 20
7739: PUSH
7740: LD_INT 1
7742: ST_TO_ADDR
// DialogueOn ;
7743: CALL_OW 6
// if IsOK ( Karamazov ) then
7747: LD_EXP 41
7751: PPUSH
7752: CALL_OW 302
7756: IFFALSE 7770
// Say ( Karamazov , DOmar-Kar-1 ) ;
7758: LD_EXP 41
7762: PPUSH
7763: LD_STRING DOmar-Kar-1
7765: PPUSH
7766: CALL_OW 88
// if IsOK ( Petrovova ) then
7770: LD_EXP 42
7774: PPUSH
7775: CALL_OW 302
7779: IFFALSE 7793
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7781: LD_EXP 42
7785: PPUSH
7786: LD_STRING DOmar-Ptr-1
7788: PPUSH
7789: CALL_OW 88
// DialogueOff ;
7793: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7797: LD_EXP 51
7801: PPUSH
7802: LD_INT 41
7804: PPUSH
7805: CALL_OW 113
// end ;
7809: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7810: LD_EXP 51
7814: PPUSH
7815: LD_INT 41
7817: PPUSH
7818: CALL_OW 308
7822: PUSH
7823: LD_EXP 20
7827: AND
7828: IFFALSE 7850
7830: GO 7832
7832: DISABLE
// begin RemoveUnit ( Omar ) ;
7833: LD_EXP 51
7837: PPUSH
7838: CALL_OW 64
// omarStatus = 1 ;
7842: LD_ADDR_EXP 1
7846: PUSH
7847: LD_INT 1
7849: ST_TO_ADDR
// end ;
7850: END
// every 0 0$1 trigger IsDead ( Omar ) do
7851: LD_EXP 51
7855: PPUSH
7856: CALL_OW 301
7860: IFFALSE 8018
7862: GO 7864
7864: DISABLE
// begin DialogueOn ;
7865: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7869: LD_INT 22
7871: PUSH
7872: LD_INT 3
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: LD_INT 21
7881: PUSH
7882: LD_INT 1
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 26
7891: PUSH
7892: LD_INT 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 50
7901: PUSH
7902: EMPTY
7903: LIST
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: LD_INT 25
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 25
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 3
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 25
7940: PUSH
7941: LD_INT 4
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: PPUSH
7962: CALL_OW 69
7966: PPUSH
7967: LD_STRING DOmar-RSol1-1
7969: PPUSH
7970: LD_STRING 
7972: PPUSH
7973: LD_INT 0
7975: PPUSH
7976: LD_INT 1
7978: PPUSH
7979: CALL 8845 0 5
// wait ( 0 0$1 ) ;
7983: LD_INT 35
7985: PPUSH
7986: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
7990: LD_EXP 50
7994: PPUSH
7995: LD_STRING DOmar-Hke-1
7997: PPUSH
7998: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
8002: LD_EXP 40
8006: PPUSH
8007: LD_STRING DOmar-Bur-1
8009: PPUSH
8010: CALL_OW 88
// DialogueOff ;
8014: CALL_OW 7
// end ;
8018: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
8019: LD_EXP 51
8023: PPUSH
8024: CALL_OW 301
8028: PUSH
8029: LD_EXP 51
8033: PPUSH
8034: CALL_OW 305
8038: NOT
8039: OR
8040: PUSH
8041: LD_EXP 52
8045: PUSH
8046: LD_INT 3
8048: LESS
8049: AND
8050: IFFALSE 8201
8052: GO 8054
8054: DISABLE
// begin if actionTime < arabBreakthrough then
8055: LD_EXP 7
8059: PUSH
8060: LD_EXP 35
8064: LESS
8065: IFFALSE 8075
// fastBreakthrough = true ;
8067: LD_ADDR_EXP 23
8071: PUSH
8072: LD_INT 1
8074: ST_TO_ADDR
// DialogueOn ;
8075: CALL_OW 6
// if IsOK ( Petrovova ) then
8079: LD_EXP 42
8083: PPUSH
8084: CALL_OW 302
8088: IFFALSE 8102
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
8090: LD_EXP 42
8094: PPUSH
8095: LD_STRING DBreakthrough-Ptr-1
8097: PPUSH
8098: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
8102: LD_EXP 40
8106: PPUSH
8107: LD_STRING DBreakthrough-Bur-1
8109: PPUSH
8110: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
8114: LD_EXP 48
8118: PPUSH
8119: LD_STRING DBreakthrough-Pla-1
8121: PPUSH
8122: CALL_OW 94
// if fastBreakthrough then
8126: LD_EXP 23
8130: IFFALSE 8146
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8132: LD_EXP 48
8136: PPUSH
8137: LD_STRING DBreakthrough-Pla-1a
8139: PPUSH
8140: CALL_OW 94
8144: GO 8158
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8146: LD_EXP 48
8150: PPUSH
8151: LD_STRING DBreakthrough-Pla-1b
8153: PPUSH
8154: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8158: LD_EXP 48
8162: PPUSH
8163: LD_STRING DBreakthrough-Pla-1c
8165: PPUSH
8166: CALL_OW 94
// DialogueOff ;
8170: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8174: LD_STRING MAddLab
8176: PPUSH
8177: CALL_OW 337
// arabianCanExitMap = true ;
8181: LD_ADDR_EXP 21
8185: PUSH
8186: LD_INT 1
8188: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8189: LD_EXP 52
8193: PPUSH
8194: LD_INT 41
8196: PPUSH
8197: CALL_OW 113
// end ;
8201: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8202: LD_EXP 21
8206: IFFALSE 8271
8208: GO 8210
8210: DISABLE
8211: LD_INT 0
8213: PPUSH
// begin enable ;
8214: ENABLE
// for unit in arabianUnitsInBase do
8215: LD_ADDR_VAR 0 1
8219: PUSH
8220: LD_EXP 52
8224: PUSH
8225: FOR_IN
8226: IFFALSE 8269
// if IsInArea ( unit , ArabianExitArea ) then
8228: LD_VAR 0 1
8232: PPUSH
8233: LD_INT 41
8235: PPUSH
8236: CALL_OW 308
8240: IFFALSE 8267
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8242: LD_ADDR_EXP 52
8246: PUSH
8247: LD_EXP 52
8251: PUSH
8252: LD_VAR 0 1
8256: DIFF
8257: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8258: LD_VAR 0 1
8262: PPUSH
8263: CALL_OW 64
// end ;
8267: GO 8225
8269: POP
8270: POP
// end ;
8271: PPOPN 1
8273: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8274: LD_EXP 12
8278: NOT
8279: IFFALSE 8517
8281: GO 8283
8283: DISABLE
8284: LD_INT 0
8286: PPUSH
// begin for unit in arabianPatrolVehicles do
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_EXP 53
8296: PUSH
8297: FOR_IN
8298: IFFALSE 8515
// if See ( 3 , unit ) then
8300: LD_INT 3
8302: PPUSH
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 292
8312: IFFALSE 8513
// begin dial_southRoadBlocker = true ;
8314: LD_ADDR_EXP 12
8318: PUSH
8319: LD_INT 1
8321: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8322: LD_VAR 0 1
8326: PPUSH
8327: CALL_OW 87
// if IsOK ( Karamazov ) then
8331: LD_EXP 41
8335: PPUSH
8336: CALL_OW 302
8340: IFFALSE 8354
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8342: LD_EXP 41
8346: PPUSH
8347: LD_STRING DPatrol-Kar-1
8349: PPUSH
8350: CALL_OW 88
// if IsOK ( Petrovova ) then
8354: LD_EXP 42
8358: PPUSH
8359: CALL_OW 302
8363: IFFALSE 8377
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8365: LD_EXP 42
8369: PPUSH
8370: LD_STRING DPatrol-Ptr-1
8372: PPUSH
8373: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8377: LD_INT 22
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 21
8389: PUSH
8390: LD_INT 1
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 26
8399: PUSH
8400: LD_INT 1
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 50
8409: PUSH
8410: EMPTY
8411: LIST
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: LD_INT 25
8418: PUSH
8419: LD_INT 1
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 25
8428: PUSH
8429: LD_INT 2
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 25
8438: PUSH
8439: LD_INT 3
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 25
8448: PUSH
8449: LD_INT 4
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: PPUSH
8470: CALL_OW 69
8474: PUSH
8475: LD_EXP 41
8479: DIFF
8480: PPUSH
8481: LD_STRING DPatrol-RSol1-1
8483: PPUSH
8484: LD_STRING 
8486: PPUSH
8487: LD_INT 0
8489: PPUSH
8490: LD_INT 1
8492: PPUSH
8493: CALL 8845 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8497: LD_EXP 40
8501: PPUSH
8502: LD_STRING DPatrol-Bur-1
8504: PPUSH
8505: CALL_OW 88
// exit ;
8509: POP
8510: POP
8511: GO 8517
// end ;
8513: GO 8297
8515: POP
8516: POP
// end ;
8517: PPOPN 1
8519: END
// every 10 10$0 do
8520: GO 8522
8522: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8523: CALL 2575 0 0
8527: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
// if debugMode then
8532: LD_EXP 33
8536: IFFALSE 8553
// unit := NewCharacter ( ident ) ;
8538: LD_ADDR_VAR 0 5
8542: PUSH
8543: LD_VAR 0 1
8547: PPUSH
8548: CALL_OW 25
8552: ST_TO_ADDR
// if exist_mode and not debugMode then
8553: LD_VAR 0 2
8557: PUSH
8558: LD_EXP 33
8562: NOT
8563: AND
8564: IFFALSE 8589
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8566: LD_ADDR_VAR 0 5
8570: PUSH
8571: LD_EXP 32
8575: PUSH
8576: LD_VAR 0 1
8580: STR
8581: PPUSH
8582: CALL_OW 34
8586: ST_TO_ADDR
8587: GO 8611
// if not debugMode then
8589: LD_EXP 33
8593: NOT
8594: IFFALSE 8611
// unit := NewCharacter ( ident ) ;
8596: LD_ADDR_VAR 0 5
8600: PUSH
8601: LD_VAR 0 1
8605: PPUSH
8606: CALL_OW 25
8610: ST_TO_ADDR
// if class then
8611: LD_VAR 0 3
8615: IFFALSE 8631
// SetClass ( unit , class ) ;
8617: LD_VAR 0 5
8621: PPUSH
8622: LD_VAR 0 3
8626: PPUSH
8627: CALL_OW 336
// result := unit ;
8631: LD_ADDR_VAR 0 4
8635: PUSH
8636: LD_VAR 0 5
8640: ST_TO_ADDR
// end ;
8641: LD_VAR 0 4
8645: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8646: LD_INT 0
8648: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8649: LD_VAR 0 1
8653: PPUSH
8654: CALL_OW 255
8658: PUSH
8659: LD_VAR 0 3
8663: EQUAL
8664: PUSH
8665: LD_VAR 0 1
8669: PPUSH
8670: CALL_OW 302
8674: AND
8675: IFFALSE 8697
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8677: LD_VAR 0 1
8681: PPUSH
8682: LD_EXP 31
8686: PUSH
8687: LD_VAR 0 2
8691: STR
8692: PPUSH
8693: CALL_OW 38
// end ;
8697: LD_VAR 0 4
8701: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8702: LD_INT 0
8704: PPUSH
8705: PPUSH
8706: PPUSH
// resultCharactersToSave = [ ] ;
8707: LD_ADDR_VAR 0 6
8711: PUSH
8712: EMPTY
8713: ST_TO_ADDR
// for unit in characters do
8714: LD_ADDR_VAR 0 5
8718: PUSH
8719: LD_VAR 0 1
8723: PUSH
8724: FOR_IN
8725: IFFALSE 8773
// if GetSide ( unit ) = side and IsOK ( unit ) then
8727: LD_VAR 0 5
8731: PPUSH
8732: CALL_OW 255
8736: PUSH
8737: LD_VAR 0 3
8741: EQUAL
8742: PUSH
8743: LD_VAR 0 5
8747: PPUSH
8748: CALL_OW 302
8752: AND
8753: IFFALSE 8771
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8755: LD_ADDR_VAR 0 6
8759: PUSH
8760: LD_VAR 0 6
8764: PUSH
8765: LD_VAR 0 5
8769: ADD
8770: ST_TO_ADDR
8771: GO 8724
8773: POP
8774: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8775: LD_VAR 0 6
8779: PPUSH
8780: LD_EXP 31
8784: PUSH
8785: LD_VAR 0 2
8789: STR
8790: PPUSH
8791: CALL_OW 38
// end ;
8795: LD_VAR 0 4
8799: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8800: LD_INT 0
8802: PPUSH
8803: PPUSH
// for unit in units do
8804: LD_ADDR_VAR 0 5
8808: PUSH
8809: LD_VAR 0 1
8813: PUSH
8814: FOR_IN
8815: IFFALSE 8838
// PlaceUnitArea ( unit , area , spawnMode ) ;
8817: LD_VAR 0 5
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: LD_VAR 0 3
8831: PPUSH
8832: CALL_OW 49
8836: GO 8814
8838: POP
8839: POP
// end ;
8840: LD_VAR 0 4
8844: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8845: LD_INT 0
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
// units = characters ;
8851: LD_ADDR_VAR 0 9
8855: PUSH
8856: LD_VAR 0 1
8860: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8861: LD_ADDR_VAR 0 9
8865: PUSH
8866: LD_VAR 0 9
8870: PUSH
8871: LD_EXP 40
8875: PUSH
8876: LD_EXP 41
8880: PUSH
8881: LD_EXP 42
8885: PUSH
8886: LD_EXP 43
8890: PUSH
8891: LD_EXP 44
8895: PUSH
8896: LD_EXP 45
8900: PUSH
8901: LD_EXP 46
8905: PUSH
8906: LD_EXP 47
8910: PUSH
8911: LD_EXP 58
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: DIFF
8927: ST_TO_ADDR
// if not units and not canTalkHero then
8928: LD_VAR 0 9
8932: NOT
8933: PUSH
8934: LD_VAR 0 5
8938: NOT
8939: AND
8940: IFFALSE 8944
// exit ;
8942: GO 9123
// if not units then
8944: LD_VAR 0 9
8948: NOT
8949: IFFALSE 8976
// units = characters diff [ Burlak , Stevens ] ;
8951: LD_ADDR_VAR 0 9
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: LD_EXP 40
8965: PUSH
8966: LD_EXP 58
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: DIFF
8975: ST_TO_ADDR
// if not units and canTalkHero then
8976: LD_VAR 0 9
8980: NOT
8981: PUSH
8982: LD_VAR 0 5
8986: AND
8987: IFFALSE 8991
// exit ;
8989: GO 9123
// speaker := units [ rand ( 1 , units ) ] ;
8991: LD_ADDR_VAR 0 8
8995: PUSH
8996: LD_VAR 0 9
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_VAR 0 9
9008: PPUSH
9009: CALL_OW 12
9013: ARRAY
9014: ST_TO_ADDR
// if radio then
9015: LD_VAR 0 4
9019: IFFALSE 9068
// begin if GetSex ( speaker ) = sex_male then
9021: LD_VAR 0 8
9025: PPUSH
9026: CALL_OW 258
9030: PUSH
9031: LD_INT 1
9033: EQUAL
9034: IFFALSE 9052
// SayRadio ( speaker , dialogMID ) else
9036: LD_VAR 0 8
9040: PPUSH
9041: LD_VAR 0 2
9045: PPUSH
9046: CALL_OW 94
9050: GO 9066
// SayRadio ( speaker , dialogFID ) ;
9052: LD_VAR 0 8
9056: PPUSH
9057: LD_VAR 0 3
9061: PPUSH
9062: CALL_OW 94
// end else
9066: GO 9113
// begin if GetSex ( speaker ) = sex_male then
9068: LD_VAR 0 8
9072: PPUSH
9073: CALL_OW 258
9077: PUSH
9078: LD_INT 1
9080: EQUAL
9081: IFFALSE 9099
// Say ( speaker , dialogMID ) else
9083: LD_VAR 0 8
9087: PPUSH
9088: LD_VAR 0 2
9092: PPUSH
9093: CALL_OW 88
9097: GO 9113
// Say ( speaker , dialogFID ) ;
9099: LD_VAR 0 8
9103: PPUSH
9104: LD_VAR 0 3
9108: PPUSH
9109: CALL_OW 88
// end ; result := speaker ;
9113: LD_ADDR_VAR 0 6
9117: PUSH
9118: LD_VAR 0 8
9122: ST_TO_ADDR
// end ;
9123: LD_VAR 0 6
9127: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9128: LD_INT 0
9130: PPUSH
9131: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9132: LD_ADDR_VAR 0 4
9136: PUSH
9137: LD_VAR 0 2
9141: PPUSH
9142: CALL_OW 254
9146: PUSH
9147: LD_INT 3
9149: MINUS
9150: ST_TO_ADDR
// if dir < 0 then
9151: LD_VAR 0 4
9155: PUSH
9156: LD_INT 0
9158: LESS
9159: IFFALSE 9175
// dir := 6 + dir ;
9161: LD_ADDR_VAR 0 4
9165: PUSH
9166: LD_INT 6
9168: PUSH
9169: LD_VAR 0 4
9173: PLUS
9174: ST_TO_ADDR
// SetDir ( un , dir ) ;
9175: LD_VAR 0 1
9179: PPUSH
9180: LD_VAR 0 4
9184: PPUSH
9185: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_VAR 0 2
9198: PPUSH
9199: CALL_OW 52
// result = un ;
9203: LD_ADDR_VAR 0 3
9207: PUSH
9208: LD_VAR 0 1
9212: ST_TO_ADDR
// end ;
9213: LD_VAR 0 3
9217: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9218: LD_INT 0
9220: PPUSH
9221: PPUSH
9222: PPUSH
9223: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9224: LD_ADDR_VAR 0 6
9228: PUSH
9229: LD_INT 34
9231: PUSH
9232: LD_INT 71
9234: PUSH
9235: LD_INT 70
9237: PUSH
9238: LD_INT 69
9240: PUSH
9241: LD_INT 39
9243: PUSH
9244: LD_INT 31
9246: PUSH
9247: LD_INT 14
9249: PUSH
9250: LD_INT 10
9252: PUSH
9253: LD_INT 40
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: ST_TO_ADDR
// resultWeapons = [ ] ;
9267: LD_ADDR_VAR 0 5
9271: PUSH
9272: EMPTY
9273: ST_TO_ADDR
// for i := 1 to weaponTechs do
9274: LD_ADDR_VAR 0 4
9278: PUSH
9279: DOUBLE
9280: LD_INT 1
9282: DEC
9283: ST_TO_ADDR
9284: LD_VAR 0 6
9288: PUSH
9289: FOR_TO
9290: IFFALSE 9477
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9292: LD_VAR 0 6
9296: PUSH
9297: LD_VAR 0 4
9301: ARRAY
9302: PPUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: CALL_OW 482
9312: PUSH
9313: LD_VAR 0 6
9317: PUSH
9318: LD_VAR 0 4
9322: ARRAY
9323: PPUSH
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 321
9333: PUSH
9334: LD_INT 2
9336: EQUAL
9337: AND
9338: IFFALSE 9475
// case nation of nation_american :
9340: LD_VAR 0 2
9344: PUSH
9345: LD_INT 1
9347: DOUBLE
9348: EQUAL
9349: IFTRUE 9353
9351: GO 9388
9353: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9354: LD_ADDR_VAR 0 5
9358: PUSH
9359: LD_VAR 0 5
9363: PUSH
9364: LD_VAR 0 6
9368: PUSH
9369: LD_VAR 0 4
9373: ARRAY
9374: PPUSH
9375: LD_VAR 0 2
9379: PPUSH
9380: CALL 9494 0 2
9384: ADD
9385: ST_TO_ADDR
9386: GO 9475
9388: LD_INT 2
9390: DOUBLE
9391: EQUAL
9392: IFTRUE 9396
9394: GO 9431
9396: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9397: LD_ADDR_VAR 0 5
9401: PUSH
9402: LD_VAR 0 5
9406: PUSH
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 4
9416: ARRAY
9417: PPUSH
9418: LD_VAR 0 2
9422: PPUSH
9423: CALL 9494 0 2
9427: ADD
9428: ST_TO_ADDR
9429: GO 9475
9431: LD_INT 3
9433: DOUBLE
9434: EQUAL
9435: IFTRUE 9439
9437: GO 9474
9439: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9440: LD_ADDR_VAR 0 5
9444: PUSH
9445: LD_VAR 0 5
9449: PUSH
9450: LD_VAR 0 6
9454: PUSH
9455: LD_VAR 0 4
9459: ARRAY
9460: PPUSH
9461: LD_VAR 0 2
9465: PPUSH
9466: CALL 9494 0 2
9470: ADD
9471: ST_TO_ADDR
9472: GO 9475
9474: POP
// end ;
9475: GO 9289
9477: POP
9478: POP
// result = resultWeapons ;
9479: LD_ADDR_VAR 0 3
9483: PUSH
9484: LD_VAR 0 5
9488: ST_TO_ADDR
// end ;
9489: LD_VAR 0 3
9493: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9494: LD_INT 0
9496: PPUSH
// case tech of tech_AdvMet :
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 34
9504: DOUBLE
9505: EQUAL
9506: IFTRUE 9510
9508: GO 9538
9510: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9511: LD_ADDR_VAR 0 3
9515: PUSH
9516: LD_INT 6
9518: PUSH
9519: LD_STRING 
9521: PUSH
9522: LD_INT 46
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: LD_VAR 0 2
9534: ARRAY
9535: ST_TO_ADDR
9536: GO 9827
9538: LD_INT 71
9540: DOUBLE
9541: EQUAL
9542: IFTRUE 9546
9544: GO 9574
9546: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9547: LD_ADDR_VAR 0 3
9551: PUSH
9552: LD_STRING 
9554: PUSH
9555: LD_STRING 
9557: PUSH
9558: LD_INT 47
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: PUSH
9566: LD_VAR 0 2
9570: ARRAY
9571: ST_TO_ADDR
9572: GO 9827
9574: LD_INT 70
9576: DOUBLE
9577: EQUAL
9578: IFTRUE 9582
9580: GO 9610
9582: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9583: LD_ADDR_VAR 0 3
9587: PUSH
9588: LD_STRING 
9590: PUSH
9591: LD_INT 26
9593: PUSH
9594: LD_STRING 
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: PUSH
9602: LD_VAR 0 2
9606: ARRAY
9607: ST_TO_ADDR
9608: GO 9827
9610: LD_INT 69
9612: DOUBLE
9613: EQUAL
9614: IFTRUE 9618
9616: GO 9646
9618: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9619: LD_ADDR_VAR 0 3
9623: PUSH
9624: LD_INT 4
9626: PUSH
9627: LD_INT 25
9629: PUSH
9630: LD_INT 43
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: LD_VAR 0 2
9642: ARRAY
9643: ST_TO_ADDR
9644: GO 9827
9646: LD_INT 39
9648: DOUBLE
9649: EQUAL
9650: IFTRUE 9654
9652: GO 9682
9654: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9655: LD_ADDR_VAR 0 3
9659: PUSH
9660: LD_INT 5
9662: PUSH
9663: LD_INT 27
9665: PUSH
9666: LD_INT 44
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: LD_VAR 0 2
9678: ARRAY
9679: ST_TO_ADDR
9680: GO 9827
9682: LD_INT 31
9684: DOUBLE
9685: EQUAL
9686: IFTRUE 9690
9688: GO 9718
9690: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9691: LD_ADDR_VAR 0 3
9695: PUSH
9696: LD_STRING 
9698: PUSH
9699: LD_STRING 
9701: PUSH
9702: LD_INT 49
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: LIST
9709: PUSH
9710: LD_VAR 0 2
9714: ARRAY
9715: ST_TO_ADDR
9716: GO 9827
9718: LD_INT 14
9720: DOUBLE
9721: EQUAL
9722: IFTRUE 9726
9724: GO 9754
9726: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9727: LD_ADDR_VAR 0 3
9731: PUSH
9732: LD_INT 10
9734: PUSH
9735: LD_STRING 
9737: PUSH
9738: LD_STRING 
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: PUSH
9746: LD_VAR 0 2
9750: ARRAY
9751: ST_TO_ADDR
9752: GO 9827
9754: LD_INT 10
9756: DOUBLE
9757: EQUAL
9758: IFTRUE 9762
9760: GO 9790
9762: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9763: LD_ADDR_VAR 0 3
9767: PUSH
9768: LD_INT 9
9770: PUSH
9771: LD_STRING 
9773: PUSH
9774: LD_STRING 
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: LIST
9781: PUSH
9782: LD_VAR 0 2
9786: ARRAY
9787: ST_TO_ADDR
9788: GO 9827
9790: LD_INT 40
9792: DOUBLE
9793: EQUAL
9794: IFTRUE 9798
9796: GO 9826
9798: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9799: LD_ADDR_VAR 0 3
9803: PUSH
9804: LD_INT 7
9806: PUSH
9807: LD_INT 28
9809: PUSH
9810: LD_INT 45
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: PUSH
9818: LD_VAR 0 2
9822: ARRAY
9823: ST_TO_ADDR
9824: GO 9827
9826: POP
// end ;
9827: LD_VAR 0 3
9831: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9832: LD_INT 0
9834: PPUSH
9835: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_VAR 0 1
9845: PPUSH
9846: LD_INT 1
9848: PPUSH
9849: CALL_OW 289
9853: PUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_INT 2
9861: PPUSH
9862: CALL_OW 289
9866: PUSH
9867: LD_VAR 0 1
9871: PPUSH
9872: LD_INT 3
9874: PPUSH
9875: CALL_OW 289
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: ST_TO_ADDR
// end ; end_of_file
9885: LD_VAR 0 2
9889: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9890: LD_VAR 0 1
9894: PPUSH
9895: CALL_OW 255
9899: PUSH
9900: LD_INT 3
9902: EQUAL
9903: PUSH
9904: LD_VAR 0 1
9908: PPUSH
9909: CALL_OW 266
9913: PUSH
9914: LD_INT 0
9916: EQUAL
9917: AND
9918: IFFALSE 9932
// SetBname ( building , bukharin ) ;
9920: LD_VAR 0 1
9924: PPUSH
9925: LD_STRING bukharin
9927: PPUSH
9928: CALL_OW 500
// if GetSide ( building ) = 3 and GetBTYpe ( building ) in [ b_lab , b_lab_basic , b_lab_full , b_lab_half ] and not buildedLab then
9932: LD_VAR 0 1
9936: PPUSH
9937: CALL_OW 255
9941: PUSH
9942: LD_INT 3
9944: EQUAL
9945: PUSH
9946: LD_VAR 0 1
9950: PPUSH
9951: CALL_OW 266
9955: PUSH
9956: LD_INT 6
9958: PUSH
9959: LD_INT 9
9961: PUSH
9962: LD_INT 8
9964: PUSH
9965: LD_INT 7
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: IN
9974: AND
9975: PUSH
9976: LD_EXP 25
9980: NOT
9981: AND
9982: IFFALSE 9992
// buildedLab = true ;
9984: LD_ADDR_EXP 25
9988: PUSH
9989: LD_INT 1
9991: ST_TO_ADDR
// if GetSide ( building ) = 2 then
9992: LD_VAR 0 1
9996: PPUSH
9997: CALL_OW 255
10001: PUSH
10002: LD_INT 2
10004: EQUAL
10005: IFFALSE 10146
// begin if GetBType ( building ) = b_lab then
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 266
10016: PUSH
10017: LD_INT 6
10019: EQUAL
10020: IFFALSE 10034
// ComUpgradeLab ( building , b_lab_weapon ) ;
10022: LD_VAR 0 1
10026: PPUSH
10027: LD_INT 10
10029: PPUSH
10030: CALL_OW 147
// if GetBType ( building ) = b_workshop then
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 266
10043: PUSH
10044: LD_INT 2
10046: EQUAL
10047: IFFALSE 10058
// ComUpgrade ( building ) ;
10049: LD_VAR 0 1
10053: PPUSH
10054: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
10058: LD_VAR 0 1
10062: PPUSH
10063: CALL_OW 266
10067: PUSH
10068: LD_INT 17
10070: EQUAL
10071: IFFALSE 10146
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 2 , 2 , 3 ] [ Difficulty ] , 1 , [ 1 , 1 , 2 ] [ Difficulty ] , true ) ;
10073: LD_INT 2
10075: PPUSH
10076: LD_INT 2
10078: PPUSH
10079: LD_EXP 52
10083: PPUSH
10084: LD_INT 34
10086: PPUSH
10087: LD_INT 39
10089: PPUSH
10090: LD_INT 40
10092: PPUSH
10093: LD_INT 35
10095: PPUSH
10096: LD_INT 2
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: LD_INT 3
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: LD_OWVAR 67
10114: ARRAY
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: LD_INT 1
10121: PUSH
10122: LD_INT 1
10124: PUSH
10125: LD_INT 2
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: LIST
10132: PUSH
10133: LD_OWVAR 67
10137: ARRAY
10138: PPUSH
10139: LD_INT 1
10141: PPUSH
10142: CALL 10962 0 11
// end ; end ;
10146: PPOPN 1
10148: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
10149: LD_VAR 0 2
10153: PPUSH
10154: CALL_OW 255
10158: PUSH
10159: LD_INT 3
10161: EQUAL
10162: PUSH
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 248
10172: PUSH
10173: LD_INT 3
10175: EQUAL
10176: AND
10177: PUSH
10178: LD_EXP 10
10182: NOT
10183: AND
10184: IFFALSE 10195
// Dial_TameApe ( human ) ;
10186: LD_VAR 0 2
10190: PPUSH
10191: CALL 4473 0 1
// end ;
10195: PPOPN 2
10197: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10198: LD_VAR 0 1
10202: PUSH
10203: LD_INT 1
10205: EQUAL
10206: PUSH
10207: LD_VAR 0 2
10211: PPUSH
10212: CALL_OW 255
10216: PUSH
10217: LD_INT 3
10219: EQUAL
10220: AND
10221: IFFALSE 10227
// Dial_ResearchApeLang ;
10223: CALL 4362 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10227: LD_VAR 0 1
10231: PUSH
10232: LD_INT 2
10234: EQUAL
10235: PUSH
10236: LD_VAR 0 2
10240: PPUSH
10241: CALL_OW 255
10245: PUSH
10246: LD_INT 3
10248: EQUAL
10249: AND
10250: IFFALSE 10256
// Dial_ResearchApePsych ;
10252: CALL 4906 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10256: LD_VAR 0 1
10260: PUSH
10261: LD_INT 11
10263: EQUAL
10264: PUSH
10265: LD_VAR 0 2
10269: PPUSH
10270: CALL_OW 255
10274: PUSH
10275: LD_INT 3
10277: EQUAL
10278: AND
10279: IFFALSE 10285
// Dial_ResearchApeAgress ;
10281: CALL 5098 0 0
// end ;
10285: PPOPN 2
10287: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10288: LD_VAR 0 2
10292: PPUSH
10293: CALL_OW 255
10297: PUSH
10298: LD_INT 3
10300: EQUAL
10301: PUSH
10302: LD_VAR 0 2
10306: PPUSH
10307: CALL_OW 257
10311: PUSH
10312: LD_INT 12
10314: EQUAL
10315: AND
10316: PUSH
10317: LD_VAR 0 1
10321: PPUSH
10322: CALL_OW 266
10326: PUSH
10327: LD_INT 6
10329: EQUAL
10330: PUSH
10331: LD_VAR 0 1
10335: PPUSH
10336: CALL_OW 266
10340: PUSH
10341: LD_INT 7
10343: EQUAL
10344: OR
10345: AND
10346: PUSH
10347: LD_EXP 11
10351: NOT
10352: AND
10353: IFFALSE 10359
// Dial_ApeEnterLab ;
10355: CALL 4694 0 0
// end ;
10359: PPOPN 2
10361: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10362: LD_VAR 0 1
10366: PUSH
10367: LD_EXP 53
10371: IN
10372: IFFALSE 10390
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10374: LD_ADDR_EXP 53
10378: PUSH
10379: LD_EXP 53
10383: PUSH
10384: LD_VAR 0 1
10388: DIFF
10389: ST_TO_ADDR
// if unit in arabianHovercrafts then
10390: LD_VAR 0 1
10394: PUSH
10395: LD_EXP 54
10399: IN
10400: IFFALSE 10418
// arabianHovercrafts = arabianHovercrafts diff unit ;
10402: LD_ADDR_EXP 54
10406: PUSH
10407: LD_EXP 54
10411: PUSH
10412: LD_VAR 0 1
10416: DIFF
10417: ST_TO_ADDR
// if unit in arabianPatrolTroops then
10418: LD_VAR 0 1
10422: PUSH
10423: LD_EXP 55
10427: IN
10428: IFFALSE 10446
// arabianPatrolTroops = arabianPatrolTroops diff unit ;
10430: LD_ADDR_EXP 55
10434: PUSH
10435: LD_EXP 55
10439: PUSH
10440: LD_VAR 0 1
10444: DIFF
10445: ST_TO_ADDR
// end ;
10446: PPOPN 1
10448: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10449: LD_VAR 0 1
10453: PUSH
10454: LD_EXP 52
10458: IN
10459: IFFALSE 10477
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10461: LD_ADDR_EXP 52
10465: PUSH
10466: LD_EXP 52
10470: PUSH
10471: LD_VAR 0 1
10475: DIFF
10476: ST_TO_ADDR
// if unit = Burlak then
10477: LD_VAR 0 1
10481: PUSH
10482: LD_EXP 40
10486: EQUAL
10487: IFFALSE 10493
// Lose_Burlak ;
10489: CALL 17370 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10493: LD_INT 22
10495: PUSH
10496: LD_INT 3
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 21
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 23
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: PUSH
10533: LD_INT 6
10535: LESS
10536: IFFALSE 10542
// Lose_Survive ;
10538: CALL 17385 0 0
// if GetType ( unit ) = unit_vehicle and GetSide ( unit ) = 2 and GetChassis ( unit ) = ar_hovercraft then
10542: LD_VAR 0 1
10546: PPUSH
10547: CALL_OW 247
10551: PUSH
10552: LD_INT 2
10554: EQUAL
10555: PUSH
10556: LD_VAR 0 1
10560: PPUSH
10561: CALL_OW 255
10565: PUSH
10566: LD_INT 2
10568: EQUAL
10569: AND
10570: PUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: CALL_OW 265
10580: PUSH
10581: LD_INT 11
10583: EQUAL
10584: AND
10585: IFFALSE 10601
// achievement_DestroyedHovercrafts = achievement_DestroyedHovercrafts + 1 ;
10587: LD_ADDR_EXP 26
10591: PUSH
10592: LD_EXP 26
10596: PUSH
10597: LD_INT 1
10599: PLUS
10600: ST_TO_ADDR
// end ;
10601: PPOPN 1
10603: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10604: LD_VAR 0 1
10608: PUSH
10609: LD_INT 3
10611: EQUAL
10612: PUSH
10613: LD_VAR 0 2
10617: PUSH
10618: LD_INT 6
10620: EQUAL
10621: AND
10622: PUSH
10623: LD_VAR 0 1
10627: PUSH
10628: LD_INT 6
10630: EQUAL
10631: PUSH
10632: LD_VAR 0 2
10636: PUSH
10637: LD_INT 3
10639: EQUAL
10640: AND
10641: OR
10642: PUSH
10643: LD_EXP 58
10647: PPUSH
10648: CALL_OW 255
10652: PUSH
10653: LD_INT 6
10655: EQUAL
10656: AND
10657: IFFALSE 10715
// begin stevensFollow = false ;
10659: LD_ADDR_EXP 15
10663: PUSH
10664: LD_INT 0
10666: ST_TO_ADDR
// stevensCanExitMap = true ;
10667: LD_ADDR_EXP 19
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// stevensWasInDepot = false ;
10675: LD_ADDR_EXP 18
10679: PUSH
10680: LD_INT 0
10682: ST_TO_ADDR
// stevensDepot = false ;
10683: LD_ADDR_EXP 17
10687: PUSH
10688: LD_INT 0
10690: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10691: LD_EXP 58
10695: PPUSH
10696: LD_INT 1
10698: PPUSH
10699: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10703: LD_EXP 58
10707: PPUSH
10708: LD_INT 37
10710: PPUSH
10711: CALL_OW 113
// end ; end ; end_of_file
10715: PPOPN 2
10717: END
// export function BuildBase ; var engs ; begin
10718: LD_INT 0
10720: PPUSH
10721: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10722: LD_ADDR_VAR 0 2
10726: PUSH
10727: LD_INT 22
10729: PUSH
10730: LD_INT 2
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 21
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 25
10749: PUSH
10750: LD_INT 2
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: PPUSH
10762: CALL_OW 69
10766: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10767: LD_VAR 0 2
10771: PPUSH
10772: LD_INT 4
10774: PPUSH
10775: LD_INT 129
10777: PPUSH
10778: LD_INT 74
10780: PPUSH
10781: LD_INT 2
10783: PPUSH
10784: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10788: LD_VAR 0 2
10792: PPUSH
10793: LD_INT 26
10795: PPUSH
10796: LD_INT 128
10798: PPUSH
10799: LD_INT 53
10801: PPUSH
10802: LD_INT 2
10804: PPUSH
10805: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 127 , 56 , 1 ) ;
10809: LD_VAR 0 2
10813: PPUSH
10814: LD_INT 26
10816: PPUSH
10817: LD_INT 127
10819: PPUSH
10820: LD_INT 56
10822: PPUSH
10823: LD_INT 1
10825: PPUSH
10826: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10830: LD_VAR 0 2
10834: PPUSH
10835: LD_INT 6
10837: PPUSH
10838: LD_INT 138
10840: PPUSH
10841: LD_INT 78
10843: PPUSH
10844: LD_INT 5
10846: PPUSH
10847: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10851: LD_VAR 0 2
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: LD_INT 137
10861: PPUSH
10862: LD_INT 63
10864: PPUSH
10865: LD_INT 4
10867: PPUSH
10868: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10872: LD_VAR 0 2
10876: PPUSH
10877: LD_INT 23
10879: PPUSH
10880: LD_INT 137
10882: PPUSH
10883: LD_INT 60
10885: PPUSH
10886: LD_INT 3
10888: PPUSH
10889: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10893: LD_VAR 0 2
10897: PPUSH
10898: LD_INT 16
10900: PPUSH
10901: LD_INT 140
10903: PPUSH
10904: LD_INT 66
10906: PPUSH
10907: LD_INT 5
10909: PPUSH
10910: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_INT 17
10921: PPUSH
10922: LD_INT 133
10924: PPUSH
10925: LD_INT 59
10927: PPUSH
10928: LD_INT 2
10930: PPUSH
10931: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10935: LD_INT 1
10937: PUSH
10938: LD_EXP 51
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PPUSH
10947: LD_INT 128
10949: PPUSH
10950: LD_INT 66
10952: PPUSH
10953: CALL_OW 111
// end ;
10957: LD_VAR 0 1
10961: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , offensiveReadyCounter , target1 , target2 , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10962: LD_INT 0
10964: PPUSH
10965: PPUSH
10966: PPUSH
10967: PPUSH
10968: PPUSH
10969: PPUSH
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
10975: PPUSH
10976: PPUSH
10977: PPUSH
10978: PPUSH
10979: PPUSH
10980: PPUSH
10981: PPUSH
10982: PPUSH
10983: PPUSH
10984: PPUSH
10985: PPUSH
10986: PPUSH
10987: PPUSH
10988: PPUSH
10989: PPUSH
10990: PPUSH
10991: PPUSH
10992: PPUSH
10993: PPUSH
10994: PPUSH
10995: PPUSH
// personel = [ ] ;
10996: LD_ADDR_VAR 0 18
11000: PUSH
11001: EMPTY
11002: ST_TO_ADDR
// vehicles = [ ] ;
11003: LD_ADDR_VAR 0 24
11007: PUSH
11008: EMPTY
11009: ST_TO_ADDR
// for unit in basePersonel do
11010: LD_ADDR_VAR 0 17
11014: PUSH
11015: LD_VAR 0 3
11019: PUSH
11020: FOR_IN
11021: IFFALSE 11069
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11023: LD_ADDR_VAR 0 18
11027: PUSH
11028: LD_VAR 0 18
11032: PUSH
11033: LD_VAR 0 17
11037: PUSH
11038: LD_VAR 0 17
11042: PPUSH
11043: CALL_OW 310
11047: PUSH
11048: LD_VAR 0 17
11052: PPUSH
11053: CALL_OW 302
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: ADD
11066: ST_TO_ADDR
11067: GO 11020
11069: POP
11070: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
11071: LD_ADDR_VAR 0 23
11075: PUSH
11076: LD_VAR 0 4
11080: PPUSH
11081: LD_INT 22
11083: PUSH
11084: LD_VAR 0 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 21
11095: PUSH
11096: LD_INT 2
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 50
11105: PUSH
11106: EMPTY
11107: LIST
11108: PUSH
11109: LD_INT 3
11111: PUSH
11112: LD_INT 2
11114: PUSH
11115: LD_INT 31
11117: PUSH
11118: LD_INT 31
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: LD_INT 34
11127: PUSH
11128: LD_INT 12
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: LD_INT 34
11137: PUSH
11138: LD_INT 51
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 34
11147: PUSH
11148: LD_INT 32
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PPUSH
11172: CALL_OW 70
11176: PUSH
11177: LD_EXP 53
11181: DIFF
11182: PUSH
11183: FOR_IN
11184: IFFALSE 11232
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11186: LD_ADDR_VAR 0 24
11190: PUSH
11191: LD_VAR 0 24
11195: PUSH
11196: LD_VAR 0 23
11200: PUSH
11201: LD_VAR 0 23
11205: PPUSH
11206: CALL_OW 310
11210: PUSH
11211: LD_VAR 0 23
11215: PPUSH
11216: CALL_OW 302
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: ADD
11229: ST_TO_ADDR
11230: GO 11183
11232: POP
11233: POP
// repeat soldiers = [ ] ;
11234: LD_ADDR_VAR 0 19
11238: PUSH
11239: EMPTY
11240: ST_TO_ADDR
// engineers = [ ] ;
11241: LD_ADDR_VAR 0 20
11245: PUSH
11246: EMPTY
11247: ST_TO_ADDR
// mechanics = [ ] ;
11248: LD_ADDR_VAR 0 21
11252: PUSH
11253: EMPTY
11254: ST_TO_ADDR
// scientists = [ ] ;
11255: LD_ADDR_VAR 0 22
11259: PUSH
11260: EMPTY
11261: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11262: LD_ADDR_VAR 0 33
11266: PUSH
11267: LD_VAR 0 4
11271: PPUSH
11272: LD_INT 22
11274: PUSH
11275: LD_VAR 0 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 21
11286: PUSH
11287: LD_INT 3
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 50
11296: PUSH
11297: EMPTY
11298: LIST
11299: PUSH
11300: LD_INT 2
11302: PUSH
11303: LD_INT 30
11305: PUSH
11306: LD_INT 0
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 30
11315: PUSH
11316: LD_INT 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 70
11338: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11339: LD_ADDR_VAR 0 34
11343: PUSH
11344: LD_VAR 0 4
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_VAR 0 1
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 21
11363: PUSH
11364: LD_INT 3
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 50
11373: PUSH
11374: EMPTY
11375: LIST
11376: PUSH
11377: LD_INT 2
11379: PUSH
11380: LD_INT 30
11382: PUSH
11383: LD_INT 2
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 30
11392: PUSH
11393: LD_INT 3
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: PPUSH
11411: CALL_OW 70
11415: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11416: LD_ADDR_VAR 0 35
11420: PUSH
11421: LD_VAR 0 4
11425: PPUSH
11426: LD_INT 22
11428: PUSH
11429: LD_VAR 0 1
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 21
11440: PUSH
11441: LD_INT 3
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 50
11450: PUSH
11451: EMPTY
11452: LIST
11453: PUSH
11454: LD_INT 2
11456: PUSH
11457: LD_INT 30
11459: PUSH
11460: LD_INT 6
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 30
11469: PUSH
11470: LD_INT 7
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 30
11479: PUSH
11480: LD_INT 8
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: PPUSH
11499: CALL_OW 70
11503: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11504: LD_ADDR_VAR 0 36
11508: PUSH
11509: LD_VAR 0 4
11513: PPUSH
11514: LD_INT 22
11516: PUSH
11517: LD_VAR 0 1
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 21
11528: PUSH
11529: LD_INT 3
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 50
11538: PUSH
11539: EMPTY
11540: LIST
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: LD_INT 30
11547: PUSH
11548: LD_INT 31
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 30
11557: PUSH
11558: LD_INT 32
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: PPUSH
11576: CALL_OW 70
11580: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11581: LD_ADDR_VAR 0 37
11585: PUSH
11586: LD_VAR 0 4
11590: PPUSH
11591: LD_INT 22
11593: PUSH
11594: LD_VAR 0 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 21
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 50
11615: PUSH
11616: EMPTY
11617: LIST
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: LD_INT 30
11624: PUSH
11625: LD_INT 4
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 30
11634: PUSH
11635: LD_INT 5
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 70
11657: ST_TO_ADDR
// for i := 1 to personel do
11658: LD_ADDR_VAR 0 13
11662: PUSH
11663: DOUBLE
11664: LD_INT 1
11666: DEC
11667: ST_TO_ADDR
11668: LD_VAR 0 18
11672: PUSH
11673: FOR_TO
11674: IFFALSE 11880
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11676: LD_VAR 0 18
11680: PUSH
11681: LD_VAR 0 13
11685: ARRAY
11686: PUSH
11687: LD_INT 1
11689: ARRAY
11690: PPUSH
11691: CALL_OW 256
11695: PUSH
11696: LD_INT 1000
11698: EQUAL
11699: IFFALSE 11741
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11701: LD_ADDR_VAR 0 18
11705: PUSH
11706: LD_VAR 0 18
11710: PPUSH
11711: LD_VAR 0 13
11715: PUSH
11716: LD_VAR 0 18
11720: PUSH
11721: LD_VAR 0 13
11725: ARRAY
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL 26168 0 3
11738: ST_TO_ADDR
// end else
11739: GO 11828
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11741: LD_VAR 0 18
11745: PUSH
11746: LD_VAR 0 13
11750: ARRAY
11751: PUSH
11752: LD_INT 1
11754: ARRAY
11755: PPUSH
11756: CALL_OW 256
11760: PUSH
11761: LD_INT 950
11763: LESSEQUAL
11764: IFFALSE 11828
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
11766: LD_ADDR_VAR 0 18
11770: PUSH
11771: LD_VAR 0 18
11775: PPUSH
11776: LD_VAR 0 13
11780: PUSH
11781: LD_VAR 0 18
11785: PUSH
11786: LD_VAR 0 13
11790: ARRAY
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL 26168 0 3
11803: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11804: LD_VAR 0 18
11808: PUSH
11809: LD_VAR 0 13
11813: ARRAY
11814: PUSH
11815: LD_INT 1
11817: ARRAY
11818: PPUSH
11819: LD_VAR 0 5
11823: PPUSH
11824: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11828: LD_VAR 0 18
11832: PUSH
11833: LD_VAR 0 13
11837: ARRAY
11838: PUSH
11839: LD_INT 1
11841: ARRAY
11842: PPUSH
11843: CALL_OW 256
11847: PUSH
11848: LD_INT 250
11850: LESS
11851: IFFALSE 11878
// personel = personel diff [ personel [ i ] ] ;
11853: LD_ADDR_VAR 0 18
11857: PUSH
11858: LD_VAR 0 18
11862: PUSH
11863: LD_VAR 0 18
11867: PUSH
11868: LD_VAR 0 13
11872: ARRAY
11873: PUSH
11874: EMPTY
11875: LIST
11876: DIFF
11877: ST_TO_ADDR
// end ;
11878: GO 11673
11880: POP
11881: POP
// for i := 1 to vehicles do
11882: LD_ADDR_VAR 0 13
11886: PUSH
11887: DOUBLE
11888: LD_INT 1
11890: DEC
11891: ST_TO_ADDR
11892: LD_VAR 0 24
11896: PUSH
11897: FOR_TO
11898: IFFALSE 12284
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
11900: LD_VAR 0 24
11904: PUSH
11905: LD_VAR 0 13
11909: ARRAY
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: CALL_OW 261
11919: PUSH
11920: LD_INT 50
11922: LESS
11923: IFFALSE 11947
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
11925: LD_VAR 0 24
11929: PUSH
11930: LD_VAR 0 13
11934: ARRAY
11935: PUSH
11936: LD_INT 1
11938: ARRAY
11939: PPUSH
11940: LD_INT 100
11942: PPUSH
11943: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11947: LD_VAR 0 24
11951: PUSH
11952: LD_VAR 0 13
11956: ARRAY
11957: PUSH
11958: LD_INT 1
11960: ARRAY
11961: PPUSH
11962: CALL_OW 256
11966: PUSH
11967: LD_INT 1000
11969: EQUAL
11970: IFFALSE 12145
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11972: LD_VAR 0 24
11976: PUSH
11977: LD_VAR 0 13
11981: ARRAY
11982: PUSH
11983: LD_INT 1
11985: ARRAY
11986: PPUSH
11987: CALL_OW 263
11991: PUSH
11992: LD_INT 1
11994: EQUAL
11995: IFFALSE 12053
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
11997: LD_VAR 0 24
12001: PUSH
12002: LD_VAR 0 13
12006: ARRAY
12007: PUSH
12008: LD_INT 2
12010: ARRAY
12011: PPUSH
12012: CALL_OW 310
12016: NOT
12017: IFFALSE 12053
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12019: LD_VAR 0 24
12023: PUSH
12024: LD_VAR 0 13
12028: ARRAY
12029: PUSH
12030: LD_INT 2
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 24
12038: PUSH
12039: LD_VAR 0 13
12043: ARRAY
12044: PUSH
12045: LD_INT 1
12047: ARRAY
12048: PPUSH
12049: CALL_OW 120
// if offensiveunits < vehiclesToAttackAmount then
12053: LD_VAR 0 27
12057: PUSH
12058: LD_VAR 0 10
12062: LESS
12063: IFFALSE 12105
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
12065: LD_ADDR_VAR 0 24
12069: PUSH
12070: LD_VAR 0 24
12074: PPUSH
12075: LD_VAR 0 13
12079: PUSH
12080: LD_VAR 0 24
12084: PUSH
12085: LD_VAR 0 13
12089: ARRAY
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: LD_INT 3
12097: PPUSH
12098: CALL 26168 0 3
12102: ST_TO_ADDR
12103: GO 12143
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12105: LD_ADDR_VAR 0 24
12109: PUSH
12110: LD_VAR 0 24
12114: PPUSH
12115: LD_VAR 0 13
12119: PUSH
12120: LD_VAR 0 24
12124: PUSH
12125: LD_VAR 0 13
12129: ARRAY
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PPUSH
12135: LD_INT 2
12137: PPUSH
12138: CALL 26168 0 3
12142: ST_TO_ADDR
// end else
12143: GO 12232
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12145: LD_VAR 0 24
12149: PUSH
12150: LD_VAR 0 13
12154: ARRAY
12155: PUSH
12156: LD_INT 1
12158: ARRAY
12159: PPUSH
12160: CALL_OW 256
12164: PUSH
12165: LD_INT 650
12167: LESSEQUAL
12168: IFFALSE 12232
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12170: LD_ADDR_VAR 0 24
12174: PUSH
12175: LD_VAR 0 24
12179: PPUSH
12180: LD_VAR 0 13
12184: PUSH
12185: LD_VAR 0 24
12189: PUSH
12190: LD_VAR 0 13
12194: ARRAY
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PPUSH
12200: LD_INT 0
12202: PPUSH
12203: CALL 26168 0 3
12207: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12208: LD_VAR 0 24
12212: PUSH
12213: LD_VAR 0 13
12217: ARRAY
12218: PUSH
12219: LD_INT 1
12221: ARRAY
12222: PPUSH
12223: LD_VAR 0 6
12227: PPUSH
12228: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12232: LD_VAR 0 24
12236: PUSH
12237: LD_VAR 0 13
12241: ARRAY
12242: PUSH
12243: LD_INT 1
12245: ARRAY
12246: PPUSH
12247: CALL_OW 256
12251: PUSH
12252: LD_INT 250
12254: LESS
12255: IFFALSE 12282
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12257: LD_ADDR_VAR 0 24
12261: PUSH
12262: LD_VAR 0 24
12266: PUSH
12267: LD_VAR 0 24
12271: PUSH
12272: LD_VAR 0 13
12276: ARRAY
12277: PUSH
12278: EMPTY
12279: LIST
12280: DIFF
12281: ST_TO_ADDR
// end ;
12282: GO 11897
12284: POP
12285: POP
// for i := 1 to personel do
12286: LD_ADDR_VAR 0 13
12290: PUSH
12291: DOUBLE
12292: LD_INT 1
12294: DEC
12295: ST_TO_ADDR
12296: LD_VAR 0 18
12300: PUSH
12301: FOR_TO
12302: IFFALSE 12343
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12304: LD_ADDR_VAR 0 19
12308: PUSH
12309: LD_VAR 0 19
12313: PUSH
12314: LD_VAR 0 18
12318: PUSH
12319: LD_VAR 0 13
12323: ARRAY
12324: PPUSH
12325: LD_INT 25
12327: PUSH
12328: LD_INT 1
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: ADD
12340: ST_TO_ADDR
12341: GO 12301
12343: POP
12344: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12345: LD_VAR 0 19
12349: PUSH
12350: LD_VAR 0 36
12354: PPUSH
12355: LD_INT 3
12357: PUSH
12358: LD_INT 59
12360: PUSH
12361: EMPTY
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 72
12372: AND
12373: IFFALSE 12661
// begin for i := 1 to personel do
12375: LD_ADDR_VAR 0 13
12379: PUSH
12380: DOUBLE
12381: LD_INT 1
12383: DEC
12384: ST_TO_ADDR
12385: LD_VAR 0 18
12389: PUSH
12390: FOR_TO
12391: IFFALSE 12657
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12393: LD_VAR 0 18
12397: PUSH
12398: LD_VAR 0 13
12402: ARRAY
12403: PUSH
12404: LD_INT 1
12406: ARRAY
12407: PPUSH
12408: CALL_OW 257
12412: PUSH
12413: LD_INT 1
12415: EQUAL
12416: PUSH
12417: LD_VAR 0 18
12421: PUSH
12422: LD_VAR 0 13
12426: ARRAY
12427: PUSH
12428: LD_INT 3
12430: ARRAY
12431: PUSH
12432: LD_INT 1
12434: EQUAL
12435: AND
12436: IFFALSE 12655
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12438: LD_VAR 0 18
12442: PUSH
12443: LD_VAR 0 13
12447: ARRAY
12448: PUSH
12449: LD_INT 1
12451: ARRAY
12452: PPUSH
12453: CALL_OW 437
12457: IFFALSE 12558
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12459: LD_VAR 0 18
12463: PUSH
12464: LD_VAR 0 13
12468: ARRAY
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 437
12478: PUSH
12479: LD_INT 1
12481: ARRAY
12482: PUSH
12483: LD_INT 1
12485: ARRAY
12486: PUSH
12487: LD_STRING e
12489: EQUAL
12490: PUSH
12491: LD_VAR 0 18
12495: PUSH
12496: LD_VAR 0 13
12500: ARRAY
12501: PUSH
12502: LD_INT 1
12504: ARRAY
12505: PPUSH
12506: CALL_OW 437
12510: PUSH
12511: LD_INT 1
12513: ARRAY
12514: PUSH
12515: LD_INT 4
12517: ARRAY
12518: PPUSH
12519: CALL_OW 266
12523: PUSH
12524: LD_INT 4
12526: PUSH
12527: LD_INT 5
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: IN
12534: AND
12535: IFFALSE 12558
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12537: LD_VAR 0 18
12541: PUSH
12542: LD_VAR 0 13
12546: ARRAY
12547: PUSH
12548: LD_INT 1
12550: ARRAY
12551: PPUSH
12552: EMPTY
12553: PPUSH
12554: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12558: LD_ADDR_VAR 0 40
12562: PUSH
12563: LD_VAR 0 36
12567: PPUSH
12568: LD_INT 3
12570: PUSH
12571: LD_INT 59
12573: PUSH
12574: EMPTY
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 72
12585: PUSH
12586: FOR_IN
12587: IFFALSE 12653
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12589: LD_VAR 0 18
12593: PUSH
12594: LD_VAR 0 13
12598: ARRAY
12599: PUSH
12600: LD_INT 1
12602: ARRAY
12603: PPUSH
12604: CALL_OW 310
12608: PPUSH
12609: CALL_OW 266
12613: PUSH
12614: LD_INT 31
12616: PUSH
12617: LD_INT 32
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: IN
12624: NOT
12625: IFFALSE 12651
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12627: LD_VAR 0 18
12631: PUSH
12632: LD_VAR 0 13
12636: ARRAY
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PPUSH
12642: LD_VAR 0 40
12646: PPUSH
12647: CALL_OW 120
12651: GO 12586
12653: POP
12654: POP
// end ; end ;
12655: GO 12390
12657: POP
12658: POP
// end else
12659: GO 12876
// if soldiers and barracks then
12661: LD_VAR 0 19
12665: PUSH
12666: LD_VAR 0 37
12670: AND
12671: IFFALSE 12876
// for i := 1 to personel do
12673: LD_ADDR_VAR 0 13
12677: PUSH
12678: DOUBLE
12679: LD_INT 1
12681: DEC
12682: ST_TO_ADDR
12683: LD_VAR 0 18
12687: PUSH
12688: FOR_TO
12689: IFFALSE 12874
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12691: LD_VAR 0 18
12695: PUSH
12696: LD_VAR 0 13
12700: ARRAY
12701: PUSH
12702: LD_INT 1
12704: ARRAY
12705: PPUSH
12706: CALL_OW 257
12710: PUSH
12711: LD_INT 1
12713: EQUAL
12714: PUSH
12715: LD_VAR 0 18
12719: PUSH
12720: LD_VAR 0 13
12724: ARRAY
12725: PUSH
12726: LD_INT 3
12728: ARRAY
12729: PUSH
12730: LD_INT 1
12732: EQUAL
12733: AND
12734: PUSH
12735: LD_VAR 0 18
12739: PUSH
12740: LD_VAR 0 13
12744: ARRAY
12745: PUSH
12746: LD_INT 1
12748: ARRAY
12749: PPUSH
12750: LD_INT 56
12752: PUSH
12753: EMPTY
12754: LIST
12755: PPUSH
12756: CALL_OW 72
12760: AND
12761: IFFALSE 12872
// begin if not personel [ i ] [ 2 ] then
12763: LD_VAR 0 18
12767: PUSH
12768: LD_VAR 0 13
12772: ARRAY
12773: PUSH
12774: LD_INT 2
12776: ARRAY
12777: NOT
12778: IFFALSE 12838
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12780: LD_ADDR_VAR 0 18
12784: PUSH
12785: LD_VAR 0 18
12789: PPUSH
12790: LD_VAR 0 13
12794: PUSH
12795: LD_VAR 0 18
12799: PUSH
12800: LD_VAR 0 13
12804: ARRAY
12805: PUSH
12806: LD_INT 1
12808: MINUS
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PPUSH
12814: LD_VAR 0 37
12818: PUSH
12819: LD_INT 1
12821: PPUSH
12822: LD_VAR 0 37
12826: PPUSH
12827: CALL_OW 12
12831: ARRAY
12832: PPUSH
12833: CALL 26168 0 3
12837: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12838: LD_VAR 0 18
12842: PUSH
12843: LD_VAR 0 13
12847: ARRAY
12848: PUSH
12849: LD_INT 1
12851: ARRAY
12852: PPUSH
12853: LD_VAR 0 18
12857: PUSH
12858: LD_VAR 0 13
12862: ARRAY
12863: PUSH
12864: LD_INT 2
12866: ARRAY
12867: PPUSH
12868: CALL_OW 120
// end ;
12872: GO 12688
12874: POP
12875: POP
// for i := 1 to personel do
12876: LD_ADDR_VAR 0 13
12880: PUSH
12881: DOUBLE
12882: LD_INT 1
12884: DEC
12885: ST_TO_ADDR
12886: LD_VAR 0 18
12890: PUSH
12891: FOR_TO
12892: IFFALSE 12933
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12894: LD_ADDR_VAR 0 20
12898: PUSH
12899: LD_VAR 0 20
12903: PUSH
12904: LD_VAR 0 18
12908: PUSH
12909: LD_VAR 0 13
12913: ARRAY
12914: PPUSH
12915: LD_INT 25
12917: PUSH
12918: LD_INT 2
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PPUSH
12925: CALL_OW 72
12929: ADD
12930: ST_TO_ADDR
12931: GO 12891
12933: POP
12934: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12935: LD_VAR 0 20
12939: PUSH
12940: LD_VAR 0 4
12944: PPUSH
12945: LD_INT 22
12947: PUSH
12948: LD_VAR 0 1
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 21
12959: PUSH
12960: LD_INT 3
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 3
12969: PUSH
12970: LD_INT 24
12972: PUSH
12973: LD_INT 1000
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: PPUSH
12989: CALL_OW 70
12993: AND
12994: IFFALSE 13270
// begin for i := 1 to personel do
12996: LD_ADDR_VAR 0 13
13000: PUSH
13001: DOUBLE
13002: LD_INT 1
13004: DEC
13005: ST_TO_ADDR
13006: LD_VAR 0 18
13010: PUSH
13011: FOR_TO
13012: IFFALSE 13266
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13014: LD_VAR 0 18
13018: PUSH
13019: LD_VAR 0 13
13023: ARRAY
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: PPUSH
13029: CALL_OW 257
13033: PUSH
13034: LD_INT 2
13036: EQUAL
13037: PUSH
13038: LD_VAR 0 18
13042: PUSH
13043: LD_VAR 0 13
13047: ARRAY
13048: PUSH
13049: LD_INT 3
13051: ARRAY
13052: PUSH
13053: LD_INT 1
13055: EQUAL
13056: AND
13057: IFFALSE 13264
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13059: LD_VAR 0 18
13063: PUSH
13064: LD_VAR 0 13
13068: ARRAY
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: CALL_OW 437
13078: IFFALSE 13134
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13080: LD_VAR 0 18
13084: PUSH
13085: LD_VAR 0 13
13089: ARRAY
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: PPUSH
13095: CALL_OW 437
13099: PUSH
13100: LD_INT 1
13102: ARRAY
13103: PUSH
13104: LD_INT 1
13106: ARRAY
13107: PUSH
13108: LD_STRING e
13110: EQUAL
13111: IFFALSE 13134
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13113: LD_VAR 0 18
13117: PUSH
13118: LD_VAR 0 13
13122: ARRAY
13123: PUSH
13124: LD_INT 1
13126: ARRAY
13127: PPUSH
13128: EMPTY
13129: PPUSH
13130: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13134: LD_VAR 0 18
13138: PUSH
13139: LD_VAR 0 13
13143: ARRAY
13144: PUSH
13145: LD_INT 1
13147: ARRAY
13148: PPUSH
13149: CALL_OW 310
13153: IFFALSE 13174
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13155: LD_VAR 0 18
13159: PUSH
13160: LD_VAR 0 13
13164: ARRAY
13165: PUSH
13166: LD_INT 1
13168: ARRAY
13169: PPUSH
13170: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13174: LD_ADDR_VAR 0 38
13178: PUSH
13179: LD_VAR 0 4
13183: PPUSH
13184: LD_INT 22
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 21
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: LD_INT 24
13211: PUSH
13212: LD_INT 1000
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: PPUSH
13228: CALL_OW 70
13232: PUSH
13233: FOR_IN
13234: IFFALSE 13262
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13236: LD_VAR 0 18
13240: PUSH
13241: LD_VAR 0 13
13245: ARRAY
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: PPUSH
13251: LD_VAR 0 38
13255: PPUSH
13256: CALL_OW 190
13260: GO 13233
13262: POP
13263: POP
// end ;
13264: GO 13011
13266: POP
13267: POP
// end else
13268: GO 13532
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13270: LD_VAR 0 20
13274: PUSH
13275: LD_VAR 0 20
13279: PPUSH
13280: LD_INT 56
13282: PUSH
13283: EMPTY
13284: LIST
13285: PPUSH
13286: CALL_OW 72
13290: AND
13291: PUSH
13292: LD_VAR 0 33
13296: AND
13297: IFFALSE 13532
// for i := 1 to personel do
13299: LD_ADDR_VAR 0 13
13303: PUSH
13304: DOUBLE
13305: LD_INT 1
13307: DEC
13308: ST_TO_ADDR
13309: LD_VAR 0 18
13313: PUSH
13314: FOR_TO
13315: IFFALSE 13530
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13317: LD_VAR 0 18
13321: PUSH
13322: LD_VAR 0 13
13326: ARRAY
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PPUSH
13332: CALL_OW 257
13336: PUSH
13337: LD_INT 2
13339: EQUAL
13340: PUSH
13341: LD_VAR 0 18
13345: PUSH
13346: LD_VAR 0 13
13350: ARRAY
13351: PUSH
13352: LD_INT 3
13354: ARRAY
13355: PUSH
13356: LD_INT 1
13358: EQUAL
13359: AND
13360: IFFALSE 13528
// begin if not personel [ i ] [ 2 ] then
13362: LD_VAR 0 18
13366: PUSH
13367: LD_VAR 0 13
13371: ARRAY
13372: PUSH
13373: LD_INT 2
13375: ARRAY
13376: NOT
13377: IFFALSE 13494
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13379: LD_ADDR_VAR 0 18
13383: PUSH
13384: LD_VAR 0 18
13388: PPUSH
13389: LD_VAR 0 13
13393: PUSH
13394: LD_VAR 0 18
13398: PUSH
13399: LD_VAR 0 13
13403: ARRAY
13404: PUSH
13405: LD_INT 1
13407: MINUS
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PPUSH
13413: LD_VAR 0 4
13417: PPUSH
13418: LD_INT 22
13420: PUSH
13421: LD_VAR 0 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 21
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 50
13442: PUSH
13443: EMPTY
13444: LIST
13445: PUSH
13446: LD_INT 2
13448: PUSH
13449: LD_INT 30
13451: PUSH
13452: LD_INT 0
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 30
13461: PUSH
13462: LD_INT 1
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 70
13484: PUSH
13485: LD_INT 1
13487: ARRAY
13488: PPUSH
13489: CALL 26168 0 3
13493: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13494: LD_VAR 0 18
13498: PUSH
13499: LD_VAR 0 13
13503: ARRAY
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: LD_VAR 0 18
13513: PUSH
13514: LD_VAR 0 13
13518: ARRAY
13519: PUSH
13520: LD_INT 2
13522: ARRAY
13523: PPUSH
13524: CALL_OW 120
// end ; end ;
13528: GO 13314
13530: POP
13531: POP
// for i := 1 to personel do
13532: LD_ADDR_VAR 0 13
13536: PUSH
13537: DOUBLE
13538: LD_INT 1
13540: DEC
13541: ST_TO_ADDR
13542: LD_VAR 0 18
13546: PUSH
13547: FOR_TO
13548: IFFALSE 13589
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13550: LD_ADDR_VAR 0 21
13554: PUSH
13555: LD_VAR 0 21
13559: PUSH
13560: LD_VAR 0 18
13564: PUSH
13565: LD_VAR 0 13
13569: ARRAY
13570: PPUSH
13571: LD_INT 25
13573: PUSH
13574: LD_INT 3
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 72
13585: ADD
13586: ST_TO_ADDR
13587: GO 13547
13589: POP
13590: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13591: LD_VAR 0 21
13595: PUSH
13596: LD_VAR 0 4
13600: PPUSH
13601: LD_INT 22
13603: PUSH
13604: LD_VAR 0 1
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 21
13615: PUSH
13616: LD_INT 2
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 3
13625: PUSH
13626: LD_INT 24
13628: PUSH
13629: LD_INT 1000
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: PPUSH
13645: CALL_OW 70
13649: AND
13650: IFFALSE 14084
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13652: LD_ADDR_VAR 0 39
13656: PUSH
13657: LD_VAR 0 4
13661: PPUSH
13662: LD_INT 22
13664: PUSH
13665: LD_VAR 0 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 21
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 3
13686: PUSH
13687: LD_INT 24
13689: PUSH
13690: LD_INT 1000
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 70
13710: PUSH
13711: FOR_IN
13712: IFFALSE 14080
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13714: LD_VAR 0 39
13718: PPUSH
13719: LD_VAR 0 6
13723: PPUSH
13724: CALL_OW 299
13728: PUSH
13729: LD_INT 5
13731: LESS
13732: IFFALSE 14078
// begin for i := 1 to vehicles do
13734: LD_ADDR_VAR 0 13
13738: PUSH
13739: DOUBLE
13740: LD_INT 1
13742: DEC
13743: ST_TO_ADDR
13744: LD_VAR 0 24
13748: PUSH
13749: FOR_TO
13750: IFFALSE 13819
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13752: LD_VAR 0 24
13756: PUSH
13757: LD_VAR 0 13
13761: ARRAY
13762: PUSH
13763: LD_INT 1
13765: ARRAY
13766: PUSH
13767: LD_VAR 0 39
13771: EQUAL
13772: IFFALSE 13793
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13774: LD_VAR 0 24
13778: PUSH
13779: LD_VAR 0 13
13783: ARRAY
13784: PUSH
13785: LD_INT 2
13787: ARRAY
13788: PPUSH
13789: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13793: LD_VAR 0 24
13797: PUSH
13798: LD_VAR 0 13
13802: ARRAY
13803: PUSH
13804: LD_INT 2
13806: ARRAY
13807: PPUSH
13808: LD_VAR 0 39
13812: PPUSH
13813: CALL_OW 189
// end ;
13817: GO 13749
13819: POP
13820: POP
// for i := 1 to personel do
13821: LD_ADDR_VAR 0 13
13825: PUSH
13826: DOUBLE
13827: LD_INT 1
13829: DEC
13830: ST_TO_ADDR
13831: LD_VAR 0 18
13835: PUSH
13836: FOR_TO
13837: IFFALSE 14076
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13839: LD_VAR 0 18
13843: PUSH
13844: LD_VAR 0 13
13848: ARRAY
13849: PUSH
13850: LD_INT 1
13852: ARRAY
13853: PPUSH
13854: CALL_OW 257
13858: PUSH
13859: LD_INT 3
13861: EQUAL
13862: PUSH
13863: LD_VAR 0 18
13867: PUSH
13868: LD_VAR 0 13
13872: ARRAY
13873: PUSH
13874: LD_INT 3
13876: ARRAY
13877: PUSH
13878: LD_INT 1
13880: EQUAL
13881: AND
13882: IFFALSE 14074
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13884: LD_VAR 0 18
13888: PUSH
13889: LD_VAR 0 13
13893: ARRAY
13894: PUSH
13895: LD_INT 1
13897: ARRAY
13898: PPUSH
13899: CALL_OW 437
13903: IFFALSE 13959
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13905: LD_VAR 0 18
13909: PUSH
13910: LD_VAR 0 13
13914: ARRAY
13915: PUSH
13916: LD_INT 1
13918: ARRAY
13919: PPUSH
13920: CALL_OW 437
13924: PUSH
13925: LD_INT 1
13927: ARRAY
13928: PUSH
13929: LD_INT 1
13931: ARRAY
13932: PUSH
13933: LD_STRING e
13935: EQUAL
13936: IFFALSE 13959
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13938: LD_VAR 0 18
13942: PUSH
13943: LD_VAR 0 13
13947: ARRAY
13948: PUSH
13949: LD_INT 1
13951: ARRAY
13952: PPUSH
13953: EMPTY
13954: PPUSH
13955: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13959: LD_VAR 0 18
13963: PUSH
13964: LD_VAR 0 13
13968: ARRAY
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: PPUSH
13974: CALL_OW 310
13978: IFFALSE 13999
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13980: LD_VAR 0 18
13984: PUSH
13985: LD_VAR 0 13
13989: ARRAY
13990: PUSH
13991: LD_INT 1
13993: ARRAY
13994: PPUSH
13995: CALL_OW 122
// if not IsInArea ( personel [ i ] [ 1 ] , baseArea ) then
13999: LD_VAR 0 18
14003: PUSH
14004: LD_VAR 0 13
14008: ARRAY
14009: PUSH
14010: LD_INT 1
14012: ARRAY
14013: PPUSH
14014: LD_VAR 0 4
14018: PPUSH
14019: CALL_OW 308
14023: NOT
14024: IFFALSE 14050
// ComMoveToArea ( personel [ i ] [ 1 ] , baseArea ) ;
14026: LD_VAR 0 18
14030: PUSH
14031: LD_VAR 0 13
14035: ARRAY
14036: PUSH
14037: LD_INT 1
14039: ARRAY
14040: PPUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 113
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14050: LD_VAR 0 18
14054: PUSH
14055: LD_VAR 0 13
14059: ARRAY
14060: PUSH
14061: LD_INT 1
14063: ARRAY
14064: PPUSH
14065: LD_VAR 0 39
14069: PPUSH
14070: CALL_OW 189
// end ;
14074: GO 13836
14076: POP
14077: POP
// end ; end ;
14078: GO 13711
14080: POP
14081: POP
// end else
14082: GO 14289
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
14084: LD_VAR 0 21
14088: PUSH
14089: LD_VAR 0 21
14093: PPUSH
14094: LD_INT 56
14096: PUSH
14097: EMPTY
14098: LIST
14099: PPUSH
14100: CALL_OW 72
14104: AND
14105: PUSH
14106: LD_VAR 0 34
14110: AND
14111: IFFALSE 14289
// for i := 1 to personel do
14113: LD_ADDR_VAR 0 13
14117: PUSH
14118: DOUBLE
14119: LD_INT 1
14121: DEC
14122: ST_TO_ADDR
14123: LD_VAR 0 18
14127: PUSH
14128: FOR_TO
14129: IFFALSE 14287
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14131: LD_VAR 0 18
14135: PUSH
14136: LD_VAR 0 13
14140: ARRAY
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: CALL_OW 257
14150: PUSH
14151: LD_INT 3
14153: EQUAL
14154: PUSH
14155: LD_VAR 0 18
14159: PUSH
14160: LD_VAR 0 13
14164: ARRAY
14165: PUSH
14166: LD_INT 3
14168: ARRAY
14169: PUSH
14170: LD_INT 1
14172: EQUAL
14173: AND
14174: IFFALSE 14285
// begin if not personel [ i ] [ 2 ] then
14176: LD_VAR 0 18
14180: PUSH
14181: LD_VAR 0 13
14185: ARRAY
14186: PUSH
14187: LD_INT 2
14189: ARRAY
14190: NOT
14191: IFFALSE 14251
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
14193: LD_ADDR_VAR 0 18
14197: PUSH
14198: LD_VAR 0 18
14202: PPUSH
14203: LD_VAR 0 13
14207: PUSH
14208: LD_VAR 0 18
14212: PUSH
14213: LD_VAR 0 13
14217: ARRAY
14218: PUSH
14219: LD_INT 1
14221: MINUS
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: LD_VAR 0 34
14231: PUSH
14232: LD_INT 1
14234: PPUSH
14235: LD_VAR 0 34
14239: PPUSH
14240: CALL_OW 12
14244: ARRAY
14245: PPUSH
14246: CALL 26168 0 3
14250: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14251: LD_VAR 0 18
14255: PUSH
14256: LD_VAR 0 13
14260: ARRAY
14261: PUSH
14262: LD_INT 1
14264: ARRAY
14265: PPUSH
14266: LD_VAR 0 18
14270: PUSH
14271: LD_VAR 0 13
14275: ARRAY
14276: PUSH
14277: LD_INT 2
14279: ARRAY
14280: PPUSH
14281: CALL_OW 120
// end ;
14285: GO 14128
14287: POP
14288: POP
// for i := 1 to personel do
14289: LD_ADDR_VAR 0 13
14293: PUSH
14294: DOUBLE
14295: LD_INT 1
14297: DEC
14298: ST_TO_ADDR
14299: LD_VAR 0 18
14303: PUSH
14304: FOR_TO
14305: IFFALSE 14346
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14307: LD_ADDR_VAR 0 22
14311: PUSH
14312: LD_VAR 0 22
14316: PUSH
14317: LD_VAR 0 18
14321: PUSH
14322: LD_VAR 0 13
14326: ARRAY
14327: PPUSH
14328: LD_INT 25
14330: PUSH
14331: LD_INT 4
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PPUSH
14338: CALL_OW 72
14342: ADD
14343: ST_TO_ADDR
14344: GO 14304
14346: POP
14347: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14348: LD_VAR 0 22
14352: PUSH
14353: LD_VAR 0 4
14357: PPUSH
14358: LD_INT 22
14360: PUSH
14361: LD_VAR 0 1
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 1
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 3
14382: PUSH
14383: LD_INT 24
14385: PUSH
14386: LD_INT 1000
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 70
14406: AND
14407: IFFALSE 14924
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14409: LD_ADDR_VAR 0 39
14413: PUSH
14414: LD_VAR 0 4
14418: PPUSH
14419: LD_INT 22
14421: PUSH
14422: LD_VAR 0 1
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 21
14433: PUSH
14434: LD_INT 1
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 3
14443: PUSH
14444: LD_INT 24
14446: PUSH
14447: LD_INT 1000
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: PPUSH
14463: CALL_OW 70
14467: PUSH
14468: FOR_IN
14469: IFFALSE 14920
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14471: LD_VAR 0 39
14475: PPUSH
14476: LD_VAR 0 5
14480: PPUSH
14481: CALL_OW 299
14485: PUSH
14486: LD_INT 5
14488: LESS
14489: IFFALSE 14697
// for i := 1 to personel do
14491: LD_ADDR_VAR 0 13
14495: PUSH
14496: DOUBLE
14497: LD_INT 1
14499: DEC
14500: ST_TO_ADDR
14501: LD_VAR 0 18
14505: PUSH
14506: FOR_TO
14507: IFFALSE 14695
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14509: LD_VAR 0 18
14513: PUSH
14514: LD_VAR 0 13
14518: ARRAY
14519: PUSH
14520: LD_INT 1
14522: ARRAY
14523: PPUSH
14524: CALL_OW 257
14528: PUSH
14529: LD_INT 4
14531: EQUAL
14532: PUSH
14533: LD_VAR 0 18
14537: PUSH
14538: LD_VAR 0 13
14542: ARRAY
14543: PUSH
14544: LD_INT 3
14546: ARRAY
14547: PUSH
14548: LD_INT 1
14550: EQUAL
14551: AND
14552: IFFALSE 14693
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14554: LD_VAR 0 18
14558: PUSH
14559: LD_VAR 0 13
14563: ARRAY
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: PPUSH
14569: CALL_OW 437
14573: IFFALSE 14629
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14575: LD_VAR 0 18
14579: PUSH
14580: LD_VAR 0 13
14584: ARRAY
14585: PUSH
14586: LD_INT 1
14588: ARRAY
14589: PPUSH
14590: CALL_OW 437
14594: PUSH
14595: LD_INT 1
14597: ARRAY
14598: PUSH
14599: LD_INT 1
14601: ARRAY
14602: PUSH
14603: LD_STRING e
14605: EQUAL
14606: IFFALSE 14629
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14608: LD_VAR 0 18
14612: PUSH
14613: LD_VAR 0 13
14617: ARRAY
14618: PUSH
14619: LD_INT 1
14621: ARRAY
14622: PPUSH
14623: EMPTY
14624: PPUSH
14625: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14629: LD_VAR 0 18
14633: PUSH
14634: LD_VAR 0 13
14638: ARRAY
14639: PUSH
14640: LD_INT 1
14642: ARRAY
14643: PPUSH
14644: CALL_OW 310
14648: IFFALSE 14669
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14650: LD_VAR 0 18
14654: PUSH
14655: LD_VAR 0 13
14659: ARRAY
14660: PUSH
14661: LD_INT 1
14663: ARRAY
14664: PPUSH
14665: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14669: LD_VAR 0 18
14673: PUSH
14674: LD_VAR 0 13
14678: ARRAY
14679: PUSH
14680: LD_INT 1
14682: ARRAY
14683: PPUSH
14684: LD_VAR 0 39
14688: PPUSH
14689: CALL_OW 188
// end ;
14693: GO 14506
14695: POP
14696: POP
// if GetLives ( damageUnit ) < 250 then
14697: LD_VAR 0 39
14701: PPUSH
14702: CALL_OW 256
14706: PUSH
14707: LD_INT 250
14709: LESS
14710: IFFALSE 14918
// for i := 1 to personel do
14712: LD_ADDR_VAR 0 13
14716: PUSH
14717: DOUBLE
14718: LD_INT 1
14720: DEC
14721: ST_TO_ADDR
14722: LD_VAR 0 18
14726: PUSH
14727: FOR_TO
14728: IFFALSE 14916
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14730: LD_VAR 0 18
14734: PUSH
14735: LD_VAR 0 13
14739: ARRAY
14740: PUSH
14741: LD_INT 1
14743: ARRAY
14744: PPUSH
14745: CALL_OW 257
14749: PUSH
14750: LD_INT 4
14752: EQUAL
14753: PUSH
14754: LD_VAR 0 18
14758: PUSH
14759: LD_VAR 0 13
14763: ARRAY
14764: PUSH
14765: LD_INT 3
14767: ARRAY
14768: PUSH
14769: LD_INT 1
14771: EQUAL
14772: AND
14773: IFFALSE 14914
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14775: LD_VAR 0 18
14779: PUSH
14780: LD_VAR 0 13
14784: ARRAY
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: CALL_OW 437
14794: IFFALSE 14850
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14796: LD_VAR 0 18
14800: PUSH
14801: LD_VAR 0 13
14805: ARRAY
14806: PUSH
14807: LD_INT 1
14809: ARRAY
14810: PPUSH
14811: CALL_OW 437
14815: PUSH
14816: LD_INT 1
14818: ARRAY
14819: PUSH
14820: LD_INT 1
14822: ARRAY
14823: PUSH
14824: LD_STRING e
14826: EQUAL
14827: IFFALSE 14850
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14829: LD_VAR 0 18
14833: PUSH
14834: LD_VAR 0 13
14838: ARRAY
14839: PUSH
14840: LD_INT 1
14842: ARRAY
14843: PPUSH
14844: EMPTY
14845: PPUSH
14846: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14850: LD_VAR 0 18
14854: PUSH
14855: LD_VAR 0 13
14859: ARRAY
14860: PUSH
14861: LD_INT 1
14863: ARRAY
14864: PPUSH
14865: CALL_OW 310
14869: IFFALSE 14890
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14871: LD_VAR 0 18
14875: PUSH
14876: LD_VAR 0 13
14880: ARRAY
14881: PUSH
14882: LD_INT 1
14884: ARRAY
14885: PPUSH
14886: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14890: LD_VAR 0 18
14894: PUSH
14895: LD_VAR 0 13
14899: ARRAY
14900: PUSH
14901: LD_INT 1
14903: ARRAY
14904: PPUSH
14905: LD_VAR 0 39
14909: PPUSH
14910: CALL_OW 188
// end ;
14914: GO 14727
14916: POP
14917: POP
// end ;
14918: GO 14468
14920: POP
14921: POP
// end else
14922: GO 15129
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14924: LD_VAR 0 22
14928: PUSH
14929: LD_VAR 0 22
14933: PPUSH
14934: LD_INT 56
14936: PUSH
14937: EMPTY
14938: LIST
14939: PPUSH
14940: CALL_OW 72
14944: AND
14945: PUSH
14946: LD_VAR 0 35
14950: AND
14951: IFFALSE 15129
// for i := 1 to personel do
14953: LD_ADDR_VAR 0 13
14957: PUSH
14958: DOUBLE
14959: LD_INT 1
14961: DEC
14962: ST_TO_ADDR
14963: LD_VAR 0 18
14967: PUSH
14968: FOR_TO
14969: IFFALSE 15127
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14971: LD_VAR 0 18
14975: PUSH
14976: LD_VAR 0 13
14980: ARRAY
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PPUSH
14986: CALL_OW 257
14990: PUSH
14991: LD_INT 4
14993: EQUAL
14994: PUSH
14995: LD_VAR 0 18
14999: PUSH
15000: LD_VAR 0 13
15004: ARRAY
15005: PUSH
15006: LD_INT 3
15008: ARRAY
15009: PUSH
15010: LD_INT 1
15012: EQUAL
15013: AND
15014: IFFALSE 15125
// begin if not personel [ i ] [ 2 ] then
15016: LD_VAR 0 18
15020: PUSH
15021: LD_VAR 0 13
15025: ARRAY
15026: PUSH
15027: LD_INT 2
15029: ARRAY
15030: NOT
15031: IFFALSE 15091
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
15033: LD_ADDR_VAR 0 18
15037: PUSH
15038: LD_VAR 0 18
15042: PPUSH
15043: LD_VAR 0 13
15047: PUSH
15048: LD_VAR 0 18
15052: PUSH
15053: LD_VAR 0 13
15057: ARRAY
15058: PUSH
15059: LD_INT 1
15061: MINUS
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PPUSH
15067: LD_VAR 0 35
15071: PUSH
15072: LD_INT 1
15074: PPUSH
15075: LD_VAR 0 35
15079: PPUSH
15080: CALL_OW 12
15084: ARRAY
15085: PPUSH
15086: CALL 26168 0 3
15090: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15091: LD_VAR 0 18
15095: PUSH
15096: LD_VAR 0 13
15100: ARRAY
15101: PUSH
15102: LD_INT 1
15104: ARRAY
15105: PPUSH
15106: LD_VAR 0 18
15110: PUSH
15111: LD_VAR 0 13
15115: ARRAY
15116: PUSH
15117: LD_INT 2
15119: ARRAY
15120: PPUSH
15121: CALL_OW 120
// end ;
15125: GO 14968
15127: POP
15128: POP
// wait ( 0 0$01 ) ;
15129: LD_INT 35
15131: PPUSH
15132: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
15136: LD_VAR 0 24
15140: PUSH
15141: LD_VAR 0 8
15145: LESS
15146: PUSH
15147: LD_VAR 0 34
15151: AND
15152: IFFALSE 15398
// begin tmp = vehiclesAmount - vehicles ;
15154: LD_ADDR_VAR 0 15
15158: PUSH
15159: LD_VAR 0 8
15163: PUSH
15164: LD_VAR 0 24
15168: MINUS
15169: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
15170: LD_ADDR_VAR 0 31
15174: PUSH
15175: LD_VAR 0 1
15179: PPUSH
15180: LD_VAR 0 2
15184: PPUSH
15185: CALL 9218 0 2
15189: ST_TO_ADDR
// for i := 1 to tmp do
15190: LD_ADDR_VAR 0 13
15194: PUSH
15195: DOUBLE
15196: LD_INT 1
15198: DEC
15199: ST_TO_ADDR
15200: LD_VAR 0 15
15204: PUSH
15205: FOR_TO
15206: IFFALSE 15394
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
15208: LD_ADDR_VAR 0 15
15212: PUSH
15213: LD_VAR 0 31
15217: PUSH
15218: LD_INT 1
15220: PPUSH
15221: LD_VAR 0 31
15225: PPUSH
15226: CALL_OW 12
15230: ARRAY
15231: ST_TO_ADDR
// if tmp then
15232: LD_VAR 0 15
15236: IFFALSE 15392
// begin if tmp in [ 34 , 14 , 71 ] then
15238: LD_VAR 0 15
15242: PUSH
15243: LD_INT 34
15245: PUSH
15246: LD_INT 14
15248: PUSH
15249: LD_INT 71
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: LIST
15256: IN
15257: IFFALSE 15295
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15259: LD_ADDR_VAR 0 32
15263: PUSH
15264: LD_INT 4
15266: PUSH
15267: EMPTY
15268: LIST
15269: PUSH
15270: LD_INT 14
15272: PUSH
15273: EMPTY
15274: LIST
15275: PUSH
15276: LD_INT 24
15278: PUSH
15279: EMPTY
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: PUSH
15287: LD_VAR 0 2
15291: ARRAY
15292: ST_TO_ADDR
15293: GO 15349
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15295: LD_ADDR_VAR 0 32
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: LD_INT 3
15305: PUSH
15306: LD_INT 4
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 14
15316: PUSH
15317: EMPTY
15318: LIST
15319: PUSH
15320: LD_INT 21
15322: PUSH
15323: LD_INT 23
15325: PUSH
15326: LD_INT 24
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: LD_VAR 0 2
15347: ARRAY
15348: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15349: LD_VAR 0 34
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: LD_VAR 0 32
15362: PUSH
15363: LD_INT 1
15365: PPUSH
15366: LD_VAR 0 32
15370: PPUSH
15371: CALL_OW 12
15375: ARRAY
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: LD_VAR 0 15
15387: PPUSH
15388: CALL_OW 185
// end ; end ;
15392: GO 15205
15394: POP
15395: POP
// end else
15396: GO 15411
// ComCancel ( factory [ 1 ] ) ;
15398: LD_VAR 0 34
15402: PUSH
15403: LD_INT 1
15405: ARRAY
15406: PPUSH
15407: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15411: LD_ADDR_VAR 0 23
15415: PUSH
15416: LD_VAR 0 4
15420: PPUSH
15421: LD_INT 22
15423: PUSH
15424: LD_VAR 0 1
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 21
15435: PUSH
15436: LD_INT 2
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 50
15445: PUSH
15446: EMPTY
15447: LIST
15448: PUSH
15449: LD_INT 3
15451: PUSH
15452: LD_INT 2
15454: PUSH
15455: LD_INT 31
15457: PUSH
15458: LD_INT 31
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 34
15467: PUSH
15468: LD_INT 12
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 34
15477: PUSH
15478: LD_INT 51
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 34
15487: PUSH
15488: LD_INT 32
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: PPUSH
15512: CALL_OW 70
15516: PUSH
15517: LD_EXP 53
15521: DIFF
15522: PUSH
15523: FOR_IN
15524: IFFALSE 15687
// begin vehicleInList = false ;
15526: LD_ADDR_VAR 0 25
15530: PUSH
15531: LD_INT 0
15533: ST_TO_ADDR
// for i := 1 to vehicles do
15534: LD_ADDR_VAR 0 13
15538: PUSH
15539: DOUBLE
15540: LD_INT 1
15542: DEC
15543: ST_TO_ADDR
15544: LD_VAR 0 24
15548: PUSH
15549: FOR_TO
15550: IFFALSE 15580
// begin if vehicle in vehicles [ i ] then
15552: LD_VAR 0 23
15556: PUSH
15557: LD_VAR 0 24
15561: PUSH
15562: LD_VAR 0 13
15566: ARRAY
15567: IN
15568: IFFALSE 15578
// vehicleInList = true ;
15570: LD_ADDR_VAR 0 25
15574: PUSH
15575: LD_INT 1
15577: ST_TO_ADDR
// end ;
15578: GO 15549
15580: POP
15581: POP
// if not vehicleInList then
15582: LD_VAR 0 25
15586: NOT
15587: IFFALSE 15685
// if vehicles < vehiclesToAttackAmount then
15589: LD_VAR 0 24
15593: PUSH
15594: LD_VAR 0 10
15598: LESS
15599: IFFALSE 15644
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15601: LD_ADDR_VAR 0 24
15605: PUSH
15606: LD_VAR 0 24
15610: PUSH
15611: LD_VAR 0 23
15615: PUSH
15616: LD_VAR 0 23
15620: PPUSH
15621: CALL_OW 313
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: PUSH
15630: LD_INT 3
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: LIST
15637: PUSH
15638: EMPTY
15639: LIST
15640: ADD
15641: ST_TO_ADDR
15642: GO 15685
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15644: LD_ADDR_VAR 0 24
15648: PUSH
15649: LD_VAR 0 24
15653: PUSH
15654: LD_VAR 0 23
15658: PUSH
15659: LD_VAR 0 23
15663: PPUSH
15664: CALL_OW 313
15668: PUSH
15669: LD_INT 1
15671: ARRAY
15672: PUSH
15673: LD_INT 2
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: LIST
15680: PUSH
15681: EMPTY
15682: LIST
15683: ADD
15684: ST_TO_ADDR
// end ;
15685: GO 15523
15687: POP
15688: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15689: LD_ADDR_VAR 0 41
15693: PUSH
15694: LD_INT 81
15696: PUSH
15697: LD_VAR 0 1
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 69
15710: PUSH
15711: FOR_IN
15712: IFFALSE 16194
// begin offensiveUnits = [ ] ;
15714: LD_ADDR_VAR 0 27
15718: PUSH
15719: EMPTY
15720: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
15721: LD_ADDR_VAR 0 28
15725: PUSH
15726: LD_INT 0
15728: ST_TO_ADDR
// for i := 1 to vehicles do
15729: LD_ADDR_VAR 0 13
15733: PUSH
15734: DOUBLE
15735: LD_INT 1
15737: DEC
15738: ST_TO_ADDR
15739: LD_VAR 0 24
15743: PUSH
15744: FOR_TO
15745: IFFALSE 15926
// if vehicles [ i ] [ 3 ] = 3 then
15747: LD_VAR 0 24
15751: PUSH
15752: LD_VAR 0 13
15756: ARRAY
15757: PUSH
15758: LD_INT 3
15760: ARRAY
15761: PUSH
15762: LD_INT 3
15764: EQUAL
15765: IFFALSE 15924
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
15767: LD_VAR 0 24
15771: PUSH
15772: LD_VAR 0 13
15776: ARRAY
15777: PUSH
15778: LD_INT 1
15780: ARRAY
15781: PPUSH
15782: CALL_OW 256
15786: PUSH
15787: LD_INT 650
15789: GREATER
15790: IFFALSE 15806
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
15792: LD_ADDR_VAR 0 28
15796: PUSH
15797: LD_VAR 0 28
15801: PUSH
15802: LD_INT 1
15804: PLUS
15805: ST_TO_ADDR
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15806: LD_ADDR_VAR 0 27
15810: PUSH
15811: LD_VAR 0 27
15815: PUSH
15816: LD_VAR 0 24
15820: PUSH
15821: LD_VAR 0 13
15825: ARRAY
15826: PUSH
15827: LD_INT 1
15829: ARRAY
15830: ADD
15831: ST_TO_ADDR
// for j = 1 to personel do
15832: LD_ADDR_VAR 0 14
15836: PUSH
15837: DOUBLE
15838: LD_INT 1
15840: DEC
15841: ST_TO_ADDR
15842: LD_VAR 0 18
15846: PUSH
15847: FOR_TO
15848: IFFALSE 15922
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15850: LD_VAR 0 18
15854: PUSH
15855: LD_VAR 0 14
15859: ARRAY
15860: PUSH
15861: LD_INT 1
15863: ARRAY
15864: PUSH
15865: LD_VAR 0 24
15869: PUSH
15870: LD_VAR 0 13
15874: ARRAY
15875: PUSH
15876: LD_INT 2
15878: ARRAY
15879: EQUAL
15880: IFFALSE 15920
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
15882: LD_ADDR_VAR 0 18
15886: PUSH
15887: LD_VAR 0 18
15891: PPUSH
15892: LD_VAR 0 14
15896: PUSH
15897: LD_VAR 0 18
15901: PUSH
15902: LD_VAR 0 14
15906: ARRAY
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PPUSH
15912: LD_INT 3
15914: PPUSH
15915: CALL 26168 0 3
15919: ST_TO_ADDR
15920: GO 15847
15922: POP
15923: POP
// end ;
15924: GO 15744
15926: POP
15927: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
15928: LD_VAR 0 10
15932: PUSH
15933: LD_VAR 0 28
15937: LESSEQUAL
15938: IFFALSE 16192
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , offensiveUnits [ 1 ] ) ;
15940: LD_ADDR_VAR 0 29
15944: PUSH
15945: LD_INT 81
15947: PUSH
15948: LD_INT 2
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PPUSH
15955: CALL_OW 69
15959: PPUSH
15960: LD_VAR 0 27
15964: PUSH
15965: LD_INT 1
15967: ARRAY
15968: PPUSH
15969: CALL_OW 74
15973: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 2 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ 1 ] ) ;
15974: LD_ADDR_VAR 0 30
15978: PUSH
15979: LD_INT 81
15981: PUSH
15982: LD_INT 2
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 2
15991: PUSH
15992: LD_INT 59
15994: PUSH
15995: EMPTY
15996: LIST
15997: PUSH
15998: LD_INT 21
16000: PUSH
16001: LD_INT 1
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 21
16010: PUSH
16011: LD_INT 2
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: EMPTY
16029: LIST
16030: PPUSH
16031: CALL_OW 69
16035: PPUSH
16036: LD_VAR 0 27
16040: PUSH
16041: LD_INT 1
16043: ARRAY
16044: PPUSH
16045: CALL_OW 74
16049: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ 1 ] , target1 ) + 8 < GetDistUnits ( offensiveUnits [ 1 ] , target2 ) then
16050: LD_VAR 0 27
16054: PUSH
16055: LD_INT 1
16057: ARRAY
16058: PPUSH
16059: LD_VAR 0 29
16063: PPUSH
16064: CALL_OW 296
16068: PUSH
16069: LD_INT 8
16071: PLUS
16072: PUSH
16073: LD_VAR 0 27
16077: PUSH
16078: LD_INT 1
16080: ARRAY
16081: PPUSH
16082: LD_VAR 0 30
16086: PPUSH
16087: CALL_OW 296
16091: LESS
16092: IFFALSE 16128
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target1 ) else
16094: LD_VAR 0 27
16098: PPUSH
16099: LD_INT 3
16101: PUSH
16102: LD_INT 60
16104: PUSH
16105: EMPTY
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 72
16116: PPUSH
16117: LD_VAR 0 29
16121: PPUSH
16122: CALL_OW 115
16126: GO 16160
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target2 ) ;
16128: LD_VAR 0 27
16132: PPUSH
16133: LD_INT 3
16135: PUSH
16136: LD_INT 60
16138: PUSH
16139: EMPTY
16140: LIST
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PPUSH
16146: CALL_OW 72
16150: PPUSH
16151: LD_VAR 0 30
16155: PPUSH
16156: CALL_OW 115
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16160: LD_VAR 0 27
16164: PPUSH
16165: LD_INT 3
16167: PUSH
16168: LD_INT 60
16170: PUSH
16171: EMPTY
16172: LIST
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PPUSH
16178: CALL_OW 72
16182: PPUSH
16183: LD_VAR 0 41
16187: PPUSH
16188: CALL_OW 175
// end ; end ;
16192: GO 15711
16194: POP
16195: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16196: LD_ADDR_VAR 0 41
16200: PUSH
16201: LD_VAR 0 7
16205: PPUSH
16206: LD_INT 81
16208: PUSH
16209: LD_VAR 0 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PPUSH
16218: CALL_OW 70
16222: PUSH
16223: FOR_IN
16224: IFFALSE 16403
// begin defenceUnits = [ ] ;
16226: LD_ADDR_VAR 0 26
16230: PUSH
16231: EMPTY
16232: ST_TO_ADDR
// for i := 1 to personel do
16233: LD_ADDR_VAR 0 13
16237: PUSH
16238: DOUBLE
16239: LD_INT 1
16241: DEC
16242: ST_TO_ADDR
16243: LD_VAR 0 18
16247: PUSH
16248: FOR_TO
16249: IFFALSE 16299
// if personel [ i ] [ 3 ] = 2 then
16251: LD_VAR 0 18
16255: PUSH
16256: LD_VAR 0 13
16260: ARRAY
16261: PUSH
16262: LD_INT 3
16264: ARRAY
16265: PUSH
16266: LD_INT 2
16268: EQUAL
16269: IFFALSE 16297
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16271: LD_ADDR_VAR 0 26
16275: PUSH
16276: LD_VAR 0 26
16280: PUSH
16281: LD_VAR 0 18
16285: PUSH
16286: LD_VAR 0 13
16290: ARRAY
16291: PUSH
16292: LD_INT 1
16294: ARRAY
16295: ADD
16296: ST_TO_ADDR
16297: GO 16248
16299: POP
16300: POP
// for i := 1 to vehicles do
16301: LD_ADDR_VAR 0 13
16305: PUSH
16306: DOUBLE
16307: LD_INT 1
16309: DEC
16310: ST_TO_ADDR
16311: LD_VAR 0 24
16315: PUSH
16316: FOR_TO
16317: IFFALSE 16367
// if vehicles [ i ] [ 3 ] = 2 then
16319: LD_VAR 0 24
16323: PUSH
16324: LD_VAR 0 13
16328: ARRAY
16329: PUSH
16330: LD_INT 3
16332: ARRAY
16333: PUSH
16334: LD_INT 2
16336: EQUAL
16337: IFFALSE 16365
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16339: LD_ADDR_VAR 0 26
16343: PUSH
16344: LD_VAR 0 26
16348: PUSH
16349: LD_VAR 0 24
16353: PUSH
16354: LD_VAR 0 13
16358: ARRAY
16359: PUSH
16360: LD_INT 1
16362: ARRAY
16363: ADD
16364: ST_TO_ADDR
16365: GO 16316
16367: POP
16368: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16369: LD_VAR 0 26
16373: PPUSH
16374: LD_INT 3
16376: PUSH
16377: LD_INT 60
16379: PUSH
16380: EMPTY
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PPUSH
16387: CALL_OW 72
16391: PPUSH
16392: LD_VAR 0 41
16396: PPUSH
16397: CALL_OW 175
// end ;
16401: GO 16223
16403: POP
16404: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16405: LD_ADDR_VAR 0 42
16409: PUSH
16410: LD_INT 22
16412: PUSH
16413: LD_VAR 0 1
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 2
16424: PUSH
16425: LD_INT 30
16427: PUSH
16428: LD_INT 31
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 30
16437: PUSH
16438: LD_INT 32
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 30
16447: PUSH
16448: LD_INT 33
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 30
16457: PUSH
16458: LD_INT 4
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 30
16467: PUSH
16468: LD_INT 5
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PPUSH
16487: CALL_OW 69
16491: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16492: LD_ADDR_VAR 0 43
16496: PUSH
16497: LD_INT 81
16499: PUSH
16500: LD_VAR 0 1
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 21
16511: PUSH
16512: LD_INT 3
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 58
16521: PUSH
16522: EMPTY
16523: LIST
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: PPUSH
16530: CALL_OW 69
16534: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16535: LD_VAR 0 42
16539: PUSH
16540: LD_VAR 0 43
16544: AND
16545: IFFALSE 16615
// for i in attackBuildings do
16547: LD_ADDR_VAR 0 13
16551: PUSH
16552: LD_VAR 0 42
16556: PUSH
16557: FOR_IN
16558: IFFALSE 16613
// for j in enemyBuildings do
16560: LD_ADDR_VAR 0 14
16564: PUSH
16565: LD_VAR 0 43
16569: PUSH
16570: FOR_IN
16571: IFFALSE 16609
// if GetDistUnits ( i , j ) < 12 then
16573: LD_VAR 0 13
16577: PPUSH
16578: LD_VAR 0 14
16582: PPUSH
16583: CALL_OW 296
16587: PUSH
16588: LD_INT 12
16590: LESS
16591: IFFALSE 16607
// ComAttackUnit ( i , j ) ;
16593: LD_VAR 0 13
16597: PPUSH
16598: LD_VAR 0 14
16602: PPUSH
16603: CALL_OW 115
16607: GO 16570
16609: POP
16610: POP
16611: GO 16557
16613: POP
16614: POP
// until not personel or arabianCanExitMap ;
16615: LD_VAR 0 18
16619: NOT
16620: PUSH
16621: LD_EXP 21
16625: OR
16626: IFFALSE 11234
// end ;
16628: LD_VAR 0 12
16632: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16633: LD_EXP 53
16637: NOT
16638: IFFALSE 16672
16640: GO 16642
16642: DISABLE
// begin enable ;
16643: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16644: LD_EXP 37
16648: PPUSH
16649: LD_INT 42
16651: PPUSH
16652: CALL 2676 0 2
// arabLeftExit = true ;
16656: LD_ADDR_EXP 56
16660: PUSH
16661: LD_INT 1
16663: ST_TO_ADDR
// arabRightExit = false ;
16664: LD_ADDR_EXP 57
16668: PUSH
16669: LD_INT 0
16671: ST_TO_ADDR
// end ;
16672: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base ;
16673: LD_EXP 53
16677: PUSH
16678: LD_EXP 56
16682: AND
16683: IFFALSE 16878
16685: GO 16687
16687: DISABLE
16688: LD_INT 0
16690: PPUSH
16691: PPUSH
16692: PPUSH
// begin enable ;
16693: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16694: LD_EXP 53
16698: PPUSH
16699: LD_INT 71
16701: PPUSH
16702: LD_INT 137
16704: PPUSH
16705: CALL_OW 114
// for veh in arabianPatrolVehicles do
16709: LD_ADDR_VAR 0 1
16713: PUSH
16714: LD_EXP 53
16718: PUSH
16719: FOR_IN
16720: IFFALSE 16876
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16722: LD_VAR 0 1
16726: PPUSH
16727: LD_INT 43
16729: PPUSH
16730: CALL_OW 308
16734: IFFALSE 16874
// begin if arabianPatrolVehicles then
16736: LD_EXP 53
16740: IFFALSE 16769
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16742: LD_VAR 0 1
16746: PPUSH
16747: CALL_OW 313
16751: PUSH
16752: LD_INT 1
16754: ARRAY
16755: PPUSH
16756: CALL_OW 64
// RemoveUnit ( veh ) ;
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 64
// end ; x = 0 ;
16769: LD_ADDR_VAR 0 2
16773: PUSH
16774: LD_INT 0
16776: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16777: LD_ADDR_VAR 0 1
16781: PUSH
16782: LD_EXP 53
16786: PUSH
16787: FOR_IN
16788: IFFALSE 16818
// if not IsPlaced ( veh ) then
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 305
16799: NOT
16800: IFFALSE 16816
// x = x + 1 ;
16802: LD_ADDR_VAR 0 2
16806: PUSH
16807: LD_VAR 0 2
16811: PUSH
16812: LD_INT 1
16814: PLUS
16815: ST_TO_ADDR
16816: GO 16787
16818: POP
16819: POP
// if x = arabianPatrolVehicles then
16820: LD_VAR 0 2
16824: PUSH
16825: LD_EXP 53
16829: EQUAL
16830: IFFALSE 16874
// begin arabLeftExit = false ;
16832: LD_ADDR_EXP 56
16836: PUSH
16837: LD_INT 0
16839: ST_TO_ADDR
// arabRightExit = true ;
16840: LD_ADDR_EXP 57
16844: PUSH
16845: LD_INT 1
16847: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16848: LD_INT 4200
16850: PPUSH
16851: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16855: LD_ADDR_EXP 53
16859: PUSH
16860: EMPTY
16861: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16862: LD_EXP 37
16866: PPUSH
16867: LD_INT 43
16869: PPUSH
16870: CALL 2676 0 2
// end ; end ; end ;
16874: GO 16719
16876: POP
16877: POP
// end ;
16878: PPOPN 3
16880: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16881: LD_EXP 53
16885: PUSH
16886: LD_EXP 57
16890: AND
16891: IFFALSE 17086
16893: GO 16895
16895: DISABLE
16896: LD_INT 0
16898: PPUSH
16899: PPUSH
16900: PPUSH
// begin enable ;
16901: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16902: LD_EXP 53
16906: PPUSH
16907: LD_INT 184
16909: PPUSH
16910: LD_INT 134
16912: PPUSH
16913: CALL_OW 114
// for veh in arabianPatrolVehicles do
16917: LD_ADDR_VAR 0 1
16921: PUSH
16922: LD_EXP 53
16926: PUSH
16927: FOR_IN
16928: IFFALSE 17084
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16930: LD_VAR 0 1
16934: PPUSH
16935: LD_INT 42
16937: PPUSH
16938: CALL_OW 308
16942: IFFALSE 17082
// begin if arabianPatrolVehicles then
16944: LD_EXP 53
16948: IFFALSE 16977
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16950: LD_VAR 0 1
16954: PPUSH
16955: CALL_OW 313
16959: PUSH
16960: LD_INT 1
16962: ARRAY
16963: PPUSH
16964: CALL_OW 64
// RemoveUnit ( veh ) ;
16968: LD_VAR 0 1
16972: PPUSH
16973: CALL_OW 64
// end ; x = 0 ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: LD_INT 0
16984: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16985: LD_ADDR_VAR 0 1
16989: PUSH
16990: LD_EXP 53
16994: PUSH
16995: FOR_IN
16996: IFFALSE 17026
// if not IsPlaced ( veh ) then
16998: LD_VAR 0 1
17002: PPUSH
17003: CALL_OW 305
17007: NOT
17008: IFFALSE 17024
// x = x + 1 ;
17010: LD_ADDR_VAR 0 2
17014: PUSH
17015: LD_VAR 0 2
17019: PUSH
17020: LD_INT 1
17022: PLUS
17023: ST_TO_ADDR
17024: GO 16995
17026: POP
17027: POP
// if x = arabianPatrolVehicles then
17028: LD_VAR 0 2
17032: PUSH
17033: LD_EXP 53
17037: EQUAL
17038: IFFALSE 17082
// begin arabLeftExit = true ;
17040: LD_ADDR_EXP 56
17044: PUSH
17045: LD_INT 1
17047: ST_TO_ADDR
// arabRightExit = false ;
17048: LD_ADDR_EXP 57
17052: PUSH
17053: LD_INT 0
17055: ST_TO_ADDR
// wait ( 2 2$0 ) ;
17056: LD_INT 4200
17058: PPUSH
17059: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
17063: LD_ADDR_EXP 53
17067: PUSH
17068: EMPTY
17069: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
17070: LD_EXP 37
17074: PPUSH
17075: LD_INT 42
17077: PPUSH
17078: CALL 2676 0 2
// end ; end ; end ;
17082: GO 16927
17084: POP
17085: POP
// end ;
17086: PPOPN 3
17088: END
// every 6 6$0 trigger not arabianHovercrafts and not arabianCanExitMap do
17089: LD_EXP 54
17093: NOT
17094: PUSH
17095: LD_EXP 21
17099: NOT
17100: AND
17101: IFFALSE 17111
17103: GO 17105
17105: DISABLE
// begin enable ;
17106: ENABLE
// PrepareArabianHovercraft ;
17107: CALL 2835 0 0
// end ;
17111: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
17112: LD_EXP 54
17116: IFFALSE 17296
17118: GO 17120
17120: DISABLE
17121: LD_INT 0
17123: PPUSH
17124: PPUSH
// begin enable ;
17125: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
17126: LD_EXP 54
17130: PPUSH
17131: LD_INT 100
17133: PPUSH
17134: CALL_OW 240
// if not arabianCanExitMap then
17138: LD_EXP 21
17142: NOT
17143: IFFALSE 17281
// begin for i := 1 to arabianHovercraftsPath do
17145: LD_ADDR_VAR 0 1
17149: PUSH
17150: DOUBLE
17151: LD_INT 1
17153: DEC
17154: ST_TO_ADDR
17155: LD_EXP 39
17159: PUSH
17160: FOR_TO
17161: IFFALSE 17204
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
17163: LD_EXP 54
17167: PPUSH
17168: LD_EXP 39
17172: PUSH
17173: LD_VAR 0 1
17177: ARRAY
17178: PUSH
17179: LD_INT 1
17181: ARRAY
17182: PPUSH
17183: LD_EXP 39
17187: PUSH
17188: LD_VAR 0 1
17192: ARRAY
17193: PUSH
17194: LD_INT 2
17196: ARRAY
17197: PPUSH
17198: CALL_OW 174
17202: GO 17160
17204: POP
17205: POP
// x = arabianHovercraftsPath ;
17206: LD_ADDR_VAR 0 2
17210: PUSH
17211: LD_EXP 39
17215: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
17216: LD_EXP 54
17220: PPUSH
17221: LD_EXP 39
17225: PUSH
17226: LD_VAR 0 2
17230: ARRAY
17231: PUSH
17232: LD_INT 1
17234: ARRAY
17235: PPUSH
17236: LD_EXP 39
17240: PUSH
17241: LD_VAR 0 2
17245: ARRAY
17246: PUSH
17247: LD_INT 2
17249: ARRAY
17250: PPUSH
17251: CALL_OW 174
// x = x - 1 ;
17255: LD_ADDR_VAR 0 2
17259: PUSH
17260: LD_VAR 0 2
17264: PUSH
17265: LD_INT 1
17267: MINUS
17268: ST_TO_ADDR
// until x = 0 ;
17269: LD_VAR 0 2
17273: PUSH
17274: LD_INT 0
17276: EQUAL
17277: IFFALSE 17216
// end else
17279: GO 17296
// ComAgressiveMove ( arabianHovercrafts , 134 , 68 ) ;
17281: LD_EXP 54
17285: PPUSH
17286: LD_INT 134
17288: PPUSH
17289: LD_INT 68
17291: PPUSH
17292: CALL_OW 114
// end ;
17296: PPOPN 2
17298: END
// every 0 0$1 trigger arabianPatrolTroops do
17299: LD_EXP 55
17303: IFFALSE 17369
17305: GO 17307
17307: DISABLE
// begin enable ;
17308: ENABLE
// AddComAgressiveMove ( arabianPatrolTroops , 127 , 100 ) ;
17309: LD_EXP 55
17313: PPUSH
17314: LD_INT 127
17316: PPUSH
17317: LD_INT 100
17319: PPUSH
17320: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 141 , 133 ) ;
17324: LD_EXP 55
17328: PPUSH
17329: LD_INT 141
17331: PPUSH
17332: LD_INT 133
17334: PPUSH
17335: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 80 , 132 ) ;
17339: LD_EXP 55
17343: PPUSH
17344: LD_INT 80
17346: PPUSH
17347: LD_INT 132
17349: PPUSH
17350: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 174 , 122 ) ;
17354: LD_EXP 55
17358: PPUSH
17359: LD_INT 174
17361: PPUSH
17362: LD_INT 122
17364: PPUSH
17365: CALL_OW 174
// end ; end_of_file
17369: END
// export function Lose_Burlak ; begin
17370: LD_INT 0
17372: PPUSH
// YouLost ( Burlak ) ;
17373: LD_STRING Burlak
17375: PPUSH
17376: CALL_OW 104
// end ;
17380: LD_VAR 0 1
17384: RET
// export function Lose_Survive ; begin
17385: LD_INT 0
17387: PPUSH
// YouLost ( Survive ) ;
17388: LD_STRING Survive
17390: PPUSH
17391: CALL_OW 104
// end ;
17395: LD_VAR 0 1
17399: RET
// export function Lose_Surrender ; begin
17400: LD_INT 0
17402: PPUSH
// YouLost ( Surrender ) ;
17403: LD_STRING Surrender
17405: PPUSH
17406: CALL_OW 104
// end ; end_of_file
17410: LD_VAR 0 1
17414: RET
// every 0 0$1 do
17415: GO 17417
17417: DISABLE
// begin if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
17418: LD_EXP 24
17422: NOT
17423: PUSH
17424: LD_INT 22
17426: PPUSH
17427: LD_INT 22
17429: PUSH
17430: LD_INT 3
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 21
17439: PUSH
17440: LD_INT 2
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 50
17449: PUSH
17450: EMPTY
17451: LIST
17452: PUSH
17453: LD_INT 59
17455: PUSH
17456: EMPTY
17457: LIST
17458: PUSH
17459: LD_INT 2
17461: PUSH
17462: LD_INT 31
17464: PUSH
17465: LD_INT 22
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 31
17474: PUSH
17475: LD_INT 24
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 31
17484: PUSH
17485: LD_INT 14
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: PPUSH
17505: CALL_OW 70
17509: AND
17510: PUSH
17511: LD_INT 22
17513: PPUSH
17514: LD_INT 22
17516: PUSH
17517: LD_INT 3
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 21
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 23
17536: PUSH
17537: LD_INT 3
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 50
17546: PUSH
17547: EMPTY
17548: LIST
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: PPUSH
17556: CALL_OW 70
17560: AND
17561: IFFALSE 17570
// Query ( QVehicles ) ;
17563: LD_STRING QVehicles
17565: PPUSH
17566: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17570: LD_EXP 40
17574: PPUSH
17575: CALL_OW 310
17579: PPUSH
17580: LD_INT 22
17582: PPUSH
17583: CALL_OW 308
17587: PUSH
17588: LD_EXP 24
17592: NOT
17593: AND
17594: PUSH
17595: LD_INT 22
17597: PPUSH
17598: LD_INT 22
17600: PUSH
17601: LD_INT 3
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 21
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 59
17620: PUSH
17621: EMPTY
17622: LIST
17623: PUSH
17624: LD_INT 50
17626: PUSH
17627: EMPTY
17628: LIST
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: LD_INT 31
17635: PUSH
17636: LD_INT 22
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 31
17645: PUSH
17646: LD_INT 24
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 31
17655: PUSH
17656: LD_INT 14
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 70
17680: PUSH
17681: LD_INT 22
17683: PUSH
17684: LD_INT 3
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 21
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 23
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: LD_INT 25
17716: PUSH
17717: LD_INT 1
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 25
17726: PUSH
17727: LD_INT 2
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 25
17736: PUSH
17737: LD_INT 3
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 25
17746: PUSH
17747: LD_INT 4
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: PPUSH
17767: CALL_OW 69
17771: GREATEREQUAL
17772: AND
17773: IFFALSE 17779
// FinishMission ;
17775: CALL 18108 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17779: LD_EXP 40
17783: PPUSH
17784: CALL_OW 310
17788: PPUSH
17789: LD_INT 22
17791: PPUSH
17792: CALL_OW 308
17796: PUSH
17797: LD_EXP 24
17801: NOT
17802: AND
17803: PUSH
17804: LD_INT 22
17806: PPUSH
17807: LD_INT 22
17809: PUSH
17810: LD_INT 3
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 21
17819: PUSH
17820: LD_INT 2
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 59
17829: PUSH
17830: EMPTY
17831: LIST
17832: PUSH
17833: LD_INT 50
17835: PUSH
17836: EMPTY
17837: LIST
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: LD_INT 31
17844: PUSH
17845: LD_INT 22
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 31
17854: PUSH
17855: LD_INT 24
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 31
17864: PUSH
17865: LD_INT 14
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 70
17889: PUSH
17890: LD_INT 6
17892: GREATEREQUAL
17893: AND
17894: PUSH
17895: LD_INT 22
17897: PPUSH
17898: LD_INT 22
17900: PUSH
17901: LD_INT 3
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 21
17910: PUSH
17911: LD_INT 2
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 59
17920: PUSH
17921: EMPTY
17922: LIST
17923: PUSH
17924: LD_INT 50
17926: PUSH
17927: EMPTY
17928: LIST
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: LD_INT 31
17935: PUSH
17936: LD_INT 22
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 31
17945: PUSH
17946: LD_INT 24
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 31
17955: PUSH
17956: LD_INT 14
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 70
17980: PUSH
17981: LD_INT 22
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 21
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 23
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 2
18013: PUSH
18014: LD_INT 25
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 25
18026: PUSH
18027: LD_INT 2
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 25
18036: PUSH
18037: LD_INT 3
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 25
18046: PUSH
18047: LD_INT 4
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: PPUSH
18067: CALL_OW 69
18071: LESS
18072: AND
18073: IFFALSE 18099
// begin case Query ( QEndMission ) of 1 :
18075: LD_STRING QEndMission
18077: PPUSH
18078: CALL_OW 97
18082: PUSH
18083: LD_INT 1
18085: DOUBLE
18086: EQUAL
18087: IFTRUE 18091
18089: GO 18098
18091: POP
// FinishMission ; end ;
18092: CALL 18108 0 0
18096: GO 18099
18098: POP
// end ; wait ( 0 0$5 ) ;
18099: LD_INT 175
18101: PPUSH
18102: CALL_OW 67
// enable ;
18106: ENABLE
// end ;
18107: END
// function FinishMission ; var nearUnit ; begin
18108: LD_INT 0
18110: PPUSH
18111: PPUSH
// finishMissionBool = true ;
18112: LD_ADDR_EXP 24
18116: PUSH
18117: LD_INT 1
18119: ST_TO_ADDR
// if stevensDepot then
18120: LD_EXP 17
18124: IFFALSE 18293
// begin DialogueOn ;
18126: CALL_OW 6
// if IsOK ( Petrosyan ) then
18130: LD_EXP 44
18134: PPUSH
18135: CALL_OW 302
18139: IFFALSE 18155
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
18141: LD_EXP 44
18145: PPUSH
18146: LD_STRING DStevensLeftBehind-Pty-1
18148: PPUSH
18149: CALL_OW 88
18153: GO 18269
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
18155: LD_INT 22
18157: PUSH
18158: LD_INT 3
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 21
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 26
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 50
18187: PUSH
18188: EMPTY
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: LD_INT 25
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 25
18206: PUSH
18207: LD_INT 2
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 25
18216: PUSH
18217: LD_INT 3
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 25
18226: PUSH
18227: LD_INT 4
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: PPUSH
18248: CALL_OW 69
18252: PPUSH
18253: LD_STRING StevensLeftBehind-RSol1-1
18255: PPUSH
18256: LD_STRING 
18258: PPUSH
18259: LD_INT 0
18261: PPUSH
18262: LD_INT 1
18264: PPUSH
18265: CALL 8845 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
18269: LD_EXP 40
18273: PPUSH
18274: LD_STRING DStevensLeftBehind-Bur-1
18276: PPUSH
18277: CALL_OW 88
// DialogueOff ;
18281: CALL_OW 7
// stevensStatus = 1 ;
18285: LD_ADDR_EXP 2
18289: PUSH
18290: LD_INT 1
18292: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
18293: LD_EXP 14
18297: NOT
18298: PUSH
18299: LD_EXP 44
18303: PPUSH
18304: CALL_OW 302
18308: AND
18309: IFFALSE 18841
// begin PrepareStevens ( exit_rus ) ;
18311: LD_INT 22
18313: PPUSH
18314: CALL 20885 0 1
// wait ( 0 0$1.5 ) ;
18318: LD_INT 52
18320: PPUSH
18321: CALL_OW 67
// stevensPlaced = true ;
18325: LD_ADDR_EXP 14
18329: PUSH
18330: LD_INT 1
18332: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
18333: LD_ADDR_VAR 0 2
18337: PUSH
18338: LD_INT 22
18340: PUSH
18341: LD_INT 3
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 21
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 26
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 50
18370: PUSH
18371: EMPTY
18372: LIST
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: LD_INT 25
18379: PUSH
18380: LD_INT 1
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 25
18389: PUSH
18390: LD_INT 2
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 25
18399: PUSH
18400: LD_INT 3
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 25
18409: PUSH
18410: LD_INT 4
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: PPUSH
18436: LD_EXP 58
18440: PPUSH
18441: CALL_OW 74
18445: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
18446: LD_EXP 58
18450: PPUSH
18451: CALL_OW 87
// InGameOn ;
18455: CALL_OW 8
// wait ( 0 0$1.5 ) ;
18459: LD_INT 52
18461: PPUSH
18462: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18466: LD_EXP 58
18470: PPUSH
18471: LD_INT 6
18473: PPUSH
18474: CALL_OW 235
// DialogueOn ;
18478: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18482: LD_EXP 58
18486: PPUSH
18487: LD_STRING DStevens-Huck-1
18489: PPUSH
18490: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18494: LD_EXP 44
18498: PPUSH
18499: LD_STRING DStevens-Pty-1
18501: PPUSH
18502: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18506: LD_EXP 44
18510: PPUSH
18511: LD_STRING DStevens-Pty-1a
18513: PPUSH
18514: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18518: LD_EXP 58
18522: PPUSH
18523: LD_STRING DStevens-Huck-2
18525: PPUSH
18526: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18530: LD_EXP 44
18534: PPUSH
18535: LD_STRING DStevens-Pty-2
18537: PPUSH
18538: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18542: LD_EXP 58
18546: PPUSH
18547: LD_STRING DStevens-Huck-3
18549: PPUSH
18550: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18554: LD_EXP 44
18558: PPUSH
18559: LD_STRING DStevens-Pty-3
18561: PPUSH
18562: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18566: LD_EXP 58
18570: PPUSH
18571: LD_STRING DStevens-Huck-4
18573: PPUSH
18574: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18578: LD_EXP 44
18582: PPUSH
18583: LD_STRING DStevensBurlak-Pty-1
18585: PPUSH
18586: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18590: LD_EXP 40
18594: PPUSH
18595: LD_STRING DStevensBurlak-Bur-1
18597: PPUSH
18598: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18602: LD_EXP 44
18606: PPUSH
18607: LD_STRING DStevensBurlak-Pty-2
18609: PPUSH
18610: CALL_OW 88
// case Query ( QKill ) of 1 :
18614: LD_STRING QKill
18616: PPUSH
18617: CALL_OW 97
18621: PUSH
18622: LD_INT 1
18624: DOUBLE
18625: EQUAL
18626: IFTRUE 18630
18628: GO 18757
18630: POP
// begin stevensCanExitMap = true ;
18631: LD_ADDR_EXP 19
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// stevensFollow = false ;
18639: LD_ADDR_EXP 15
18643: PUSH
18644: LD_INT 0
18646: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18647: LD_EXP 40
18651: PPUSH
18652: LD_STRING DKill-1-Bur-1
18654: PPUSH
18655: CALL_OW 88
// if IsOK ( Gleb ) then
18659: LD_EXP 43
18663: PPUSH
18664: CALL_OW 302
18668: IFFALSE 18682
// Say ( Gleb , DKill-1-Glb-1 ) ;
18670: LD_EXP 43
18674: PPUSH
18675: LD_STRING DKill-1-Glb-1
18677: PPUSH
18678: CALL_OW 88
// DialogueOff ;
18682: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18686: LD_EXP 58
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 235
// stevensStatus = 0 ;
18698: LD_ADDR_EXP 2
18702: PUSH
18703: LD_INT 0
18705: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18706: LD_INT 22
18708: PUSH
18709: LD_INT 3
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PPUSH
18716: CALL_OW 69
18720: PPUSH
18721: LD_EXP 58
18725: PPUSH
18726: CALL_OW 115
// wait ( 0 0$1 ) ;
18730: LD_INT 35
18732: PPUSH
18733: CALL_OW 67
// until IsDead ( Stevens ) ;
18737: LD_EXP 58
18741: PPUSH
18742: CALL_OW 301
18746: IFFALSE 18706
// wait ( 0 0$1.5 ) ;
18748: LD_INT 52
18750: PPUSH
18751: CALL_OW 67
// end ; 2 :
18755: GO 18841
18757: LD_INT 2
18759: DOUBLE
18760: EQUAL
18761: IFTRUE 18765
18763: GO 18840
18765: POP
// begin stevensCanExitMap = true ;
18766: LD_ADDR_EXP 19
18770: PUSH
18771: LD_INT 1
18773: ST_TO_ADDR
// stevensWasInDepot = false ;
18774: LD_ADDR_EXP 18
18778: PUSH
18779: LD_INT 0
18781: ST_TO_ADDR
// stevensDepot = false ;
18782: LD_ADDR_EXP 17
18786: PUSH
18787: LD_INT 0
18789: ST_TO_ADDR
// stevensStatus = 1 ;
18790: LD_ADDR_EXP 2
18794: PUSH
18795: LD_INT 1
18797: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18798: LD_EXP 40
18802: PPUSH
18803: LD_STRING DKill-2-Bur-1
18805: PPUSH
18806: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18810: LD_EXP 44
18814: PPUSH
18815: LD_STRING DKill-2-Pty-1
18817: PPUSH
18818: CALL_OW 88
// DialogueOff ;
18822: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18826: LD_EXP 58
18830: PPUSH
18831: LD_INT 37
18833: PPUSH
18834: CALL_OW 113
// end ; end ;
18838: GO 18841
18840: POP
// end ; SetRewards ;
18841: CALL 18862 0 0
// SavePlayerCharacters ;
18845: CALL 19103 0 0
// SaveGlobalVariables ;
18849: CALL 19448 0 0
// YouWin ;
18853: CALL_OW 103
// end ;
18857: LD_VAR 0 1
18861: RET
// function SetRewards ; begin
18862: LD_INT 0
18864: PPUSH
// if fastBreakthrough then
18865: LD_EXP 23
18869: IFFALSE 18883
// AddMedal ( Time , 1 ) else
18871: LD_STRING Time
18873: PPUSH
18874: LD_INT 1
18876: PPUSH
18877: CALL_OW 101
18881: GO 18894
// AddMedal ( Time , - 1 ) ;
18883: LD_STRING Time
18885: PPUSH
18886: LD_INT 1
18888: NEG
18889: PPUSH
18890: CALL_OW 101
// if dial_tameApeBlocker then
18894: LD_EXP 10
18898: IFFALSE 18912
// AddMedal ( Apemen , 1 ) else
18900: LD_STRING Apemen
18902: PPUSH
18903: LD_INT 1
18905: PPUSH
18906: CALL_OW 101
18910: GO 18959
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18912: LD_EXP 10
18916: NOT
18917: PUSH
18918: LD_INT 1
18920: PPUSH
18921: LD_INT 3
18923: PPUSH
18924: CALL_OW 321
18928: PUSH
18929: LD_INT 1
18931: EQUAL
18932: AND
18933: IFFALSE 18948
// AddMedal ( Apemen , - 1 ) else
18935: LD_STRING Apemen
18937: PPUSH
18938: LD_INT 1
18940: NEG
18941: PPUSH
18942: CALL_OW 101
18946: GO 18959
// AddMedal ( Apemen , - 2 ) ;
18948: LD_STRING Apemen
18950: PPUSH
18951: LD_INT 2
18953: NEG
18954: PPUSH
18955: CALL_OW 101
// if not omarStatus then
18959: LD_EXP 1
18963: NOT
18964: IFFALSE 18978
// AddMedal ( Abdul , 1 ) else
18966: LD_STRING Abdul
18968: PPUSH
18969: LD_INT 1
18971: PPUSH
18972: CALL_OW 101
18976: GO 18989
// AddMedal ( Abdul , - 1 ) ;
18978: LD_STRING Abdul
18980: PPUSH
18981: LD_INT 1
18983: NEG
18984: PPUSH
18985: CALL_OW 101
// GiveMedals ( Main ) ;
18989: LD_STRING Main
18991: PPUSH
18992: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18996: LD_INT 22
18998: PUSH
18999: LD_INT 3
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 21
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 23
19018: PUSH
19019: LD_INT 3
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 50
19028: PUSH
19029: EMPTY
19030: LIST
19031: PUSH
19032: LD_INT 2
19034: PUSH
19035: LD_INT 25
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 25
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 25
19057: PUSH
19058: LD_INT 3
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 25
19067: PUSH
19068: LD_INT 4
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 69
19093: PPUSH
19094: CALL_OW 43
// end ;
19098: LD_VAR 0 1
19102: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
19103: LD_INT 0
19105: PPUSH
19106: PPUSH
19107: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19108: LD_EXP 40
19112: PPUSH
19113: LD_STRING Burlak
19115: PPUSH
19116: LD_INT 3
19118: PPUSH
19119: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
19123: LD_EXP 41
19127: PPUSH
19128: CALL_OW 310
19132: PPUSH
19133: LD_INT 22
19135: PPUSH
19136: CALL_OW 308
19140: IFFALSE 19157
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
19142: LD_EXP 41
19146: PPUSH
19147: LD_STRING Karamazov
19149: PPUSH
19150: LD_INT 3
19152: PPUSH
19153: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
19157: LD_EXP 42
19161: PPUSH
19162: CALL_OW 310
19166: PPUSH
19167: LD_INT 22
19169: PPUSH
19170: CALL_OW 308
19174: IFFALSE 19191
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
19176: LD_EXP 42
19180: PPUSH
19181: LD_STRING Petrovova
19183: PPUSH
19184: LD_INT 3
19186: PPUSH
19187: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
19191: LD_EXP 43
19195: PPUSH
19196: CALL_OW 310
19200: PPUSH
19201: LD_INT 22
19203: PPUSH
19204: CALL_OW 308
19208: IFFALSE 19225
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
19210: LD_EXP 43
19214: PPUSH
19215: LD_STRING Gleb
19217: PPUSH
19218: LD_INT 3
19220: PPUSH
19221: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
19225: LD_EXP 44
19229: PPUSH
19230: CALL_OW 310
19234: PPUSH
19235: LD_INT 22
19237: PPUSH
19238: CALL_OW 308
19242: IFFALSE 19259
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
19244: LD_EXP 44
19248: PPUSH
19249: LD_STRING Petrosyan
19251: PPUSH
19252: LD_INT 3
19254: PPUSH
19255: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
19259: LD_EXP 46
19263: PPUSH
19264: CALL_OW 310
19268: PPUSH
19269: LD_INT 22
19271: PPUSH
19272: CALL_OW 308
19276: IFFALSE 19293
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
19278: LD_EXP 46
19282: PPUSH
19283: LD_STRING Dolgov
19285: PPUSH
19286: LD_INT 3
19288: PPUSH
19289: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
19293: LD_EXP 47
19297: PPUSH
19298: CALL_OW 310
19302: PPUSH
19303: LD_INT 22
19305: PPUSH
19306: CALL_OW 308
19310: IFFALSE 19327
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
19312: LD_EXP 47
19316: PPUSH
19317: LD_STRING Lipshchin
19319: PPUSH
19320: LD_INT 3
19322: PPUSH
19323: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
19327: LD_EXP 45
19331: PPUSH
19332: CALL_OW 310
19336: PPUSH
19337: LD_INT 22
19339: PPUSH
19340: CALL_OW 308
19344: IFFALSE 19361
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
19346: LD_EXP 45
19350: PPUSH
19351: LD_STRING Titov
19353: PPUSH
19354: LD_INT 3
19356: PPUSH
19357: CALL 8646 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
19361: LD_INT 22
19363: PPUSH
19364: LD_INT 22
19366: PUSH
19367: LD_INT 3
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 21
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: LD_INT 25
19389: PUSH
19390: LD_INT 12
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 25
19399: PUSH
19400: LD_INT 16
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 25
19409: PUSH
19410: LD_INT 15
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: PPUSH
19428: CALL_OW 70
19432: PPUSH
19433: LD_STRING other_apemans
19435: PPUSH
19436: LD_INT 3
19438: PPUSH
19439: CALL 8702 0 3
// end ;
19443: LD_VAR 0 1
19447: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
19448: LD_INT 0
19450: PPUSH
19451: PPUSH
19452: PPUSH
19453: PPUSH
19454: PPUSH
// resources = [ ] ;
19455: LD_ADDR_VAR 0 3
19459: PUSH
19460: EMPTY
19461: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19462: LD_ADDR_EXP 5
19466: PUSH
19467: EMPTY
19468: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19469: LD_EXP 2
19473: PPUSH
19474: LD_STRING 05_StevensStatus_1
19476: PPUSH
19477: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19481: LD_EXP 1
19485: PPUSH
19486: LD_STRING 05_OmarStatus_2
19488: PPUSH
19489: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
19493: LD_ADDR_VAR 0 2
19497: PUSH
19498: LD_INT 22
19500: PPUSH
19501: LD_INT 22
19503: PUSH
19504: LD_INT 3
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 59
19513: PUSH
19514: EMPTY
19515: LIST
19516: PUSH
19517: LD_INT 2
19519: PUSH
19520: LD_INT 34
19522: PUSH
19523: LD_INT 51
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 34
19532: PUSH
19533: LD_INT 32
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 34
19542: PUSH
19543: LD_INT 89
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: LIST
19560: PPUSH
19561: CALL_OW 70
19565: PUSH
19566: FOR_IN
19567: IFFALSE 19595
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19569: LD_ADDR_VAR 0 3
19573: PUSH
19574: LD_VAR 0 3
19578: PUSH
19579: LD_VAR 0 2
19583: PPUSH
19584: CALL 9832 0 1
19588: PUSH
19589: EMPTY
19590: LIST
19591: ADD
19592: ST_TO_ADDR
19593: GO 19566
19595: POP
19596: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19597: LD_VAR 0 3
19601: PPUSH
19602: LD_STRING 05_ResourcesInCargo_3
19604: PPUSH
19605: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19609: LD_ADDR_VAR 0 2
19613: PUSH
19614: LD_INT 22
19616: PPUSH
19617: LD_INT 22
19619: PUSH
19620: LD_INT 3
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 21
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 59
19639: PUSH
19640: EMPTY
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: LIST
19647: PPUSH
19648: CALL_OW 70
19652: PUSH
19653: FOR_IN
19654: IFFALSE 19914
// begin driver = UnitsInside ( i ) [ 1 ] ;
19656: LD_ADDR_VAR 0 4
19660: PUSH
19661: LD_VAR 0 2
19665: PPUSH
19666: CALL_OW 313
19670: PUSH
19671: LD_INT 1
19673: ARRAY
19674: ST_TO_ADDR
// if driver = Burlak then
19675: LD_VAR 0 4
19679: PUSH
19680: LD_EXP 40
19684: EQUAL
19685: IFFALSE 19695
// driverShortName = Bur ;
19687: LD_ADDR_VAR 0 5
19691: PUSH
19692: LD_STRING Bur
19694: ST_TO_ADDR
// if driver = Karamazov then
19695: LD_VAR 0 4
19699: PUSH
19700: LD_EXP 41
19704: EQUAL
19705: IFFALSE 19715
// driverShortName = Kar ;
19707: LD_ADDR_VAR 0 5
19711: PUSH
19712: LD_STRING Kar
19714: ST_TO_ADDR
// if driver = Petrovova then
19715: LD_VAR 0 4
19719: PUSH
19720: LD_EXP 42
19724: EQUAL
19725: IFFALSE 19735
// driverShortName = Ptr ;
19727: LD_ADDR_VAR 0 5
19731: PUSH
19732: LD_STRING Ptr
19734: ST_TO_ADDR
// if driver = Gleb then
19735: LD_VAR 0 4
19739: PUSH
19740: LD_EXP 43
19744: EQUAL
19745: IFFALSE 19755
// driverShortName = Glb ;
19747: LD_ADDR_VAR 0 5
19751: PUSH
19752: LD_STRING Glb
19754: ST_TO_ADDR
// if driver = Petrosyan then
19755: LD_VAR 0 4
19759: PUSH
19760: LD_EXP 44
19764: EQUAL
19765: IFFALSE 19775
// driverShortName = Pet ;
19767: LD_ADDR_VAR 0 5
19771: PUSH
19772: LD_STRING Pet
19774: ST_TO_ADDR
// if driver = Dolgov then
19775: LD_VAR 0 4
19779: PUSH
19780: LD_EXP 46
19784: EQUAL
19785: IFFALSE 19795
// driverShortName = Dol ;
19787: LD_ADDR_VAR 0 5
19791: PUSH
19792: LD_STRING Dol
19794: ST_TO_ADDR
// if driver = Lipshchin then
19795: LD_VAR 0 4
19799: PUSH
19800: LD_EXP 47
19804: EQUAL
19805: IFFALSE 19815
// driverShortName = Lip ;
19807: LD_ADDR_VAR 0 5
19811: PUSH
19812: LD_STRING Lip
19814: ST_TO_ADDR
// if driver = Titov then
19815: LD_VAR 0 4
19819: PUSH
19820: LD_EXP 45
19824: EQUAL
19825: IFFALSE 19835
// driverShortName = Tit ;
19827: LD_ADDR_VAR 0 5
19831: PUSH
19832: LD_STRING Tit
19834: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19835: LD_ADDR_EXP 5
19839: PUSH
19840: LD_EXP 5
19844: PUSH
19845: LD_VAR 0 2
19849: PPUSH
19850: CALL_OW 248
19854: PUSH
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 265
19864: PUSH
19865: LD_VAR 0 2
19869: PPUSH
19870: CALL_OW 262
19874: PUSH
19875: LD_VAR 0 2
19879: PPUSH
19880: CALL_OW 263
19884: PUSH
19885: LD_VAR 0 2
19889: PPUSH
19890: CALL_OW 264
19894: PUSH
19895: LD_VAR 0 5
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: PUSH
19908: EMPTY
19909: LIST
19910: ADD
19911: ST_TO_ADDR
// end ;
19912: GO 19653
19914: POP
19915: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19916: LD_EXP 5
19920: PPUSH
19921: LD_STRING 05_Tanks_4
19923: PPUSH
19924: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19928: LD_INT 22
19930: PUSH
19931: LD_INT 3
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 23
19940: PUSH
19941: LD_INT 3
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 3
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 2
19960: PUSH
19961: LD_INT 30
19963: PUSH
19964: LD_INT 6
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 30
19973: PUSH
19974: LD_INT 7
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PPUSH
19992: CALL_OW 69
19996: NOT
19997: IFFALSE 20007
// labDestroyed = 1 ;
19999: LD_ADDR_EXP 3
20003: PUSH
20004: LD_INT 1
20006: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
20007: LD_EXP 3
20011: PPUSH
20012: LD_STRING 05_LabDestroyed_5
20014: PPUSH
20015: CALL_OW 39
// end ; end_of_file
20019: LD_VAR 0 1
20023: RET
// export function Nef_PrepareNature ; var i , un ; begin
20024: LD_INT 0
20026: PPUSH
20027: PPUSH
20028: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
20029: LD_ADDR_VAR 0 2
20033: PUSH
20034: DOUBLE
20035: LD_INT 1
20037: DEC
20038: ST_TO_ADDR
20039: LD_EXP 28
20043: PUSH
20044: LD_INT 1
20046: ARRAY
20047: PUSH
20048: FOR_TO
20049: IFFALSE 20159
// begin uc_side = 0 ;
20051: LD_ADDR_OWVAR 20
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// uc_nation = nation_nature ;
20059: LD_ADDR_OWVAR 21
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// hc_class = class_apeman ;
20067: LD_ADDR_OWVAR 28
20071: PUSH
20072: LD_INT 12
20074: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20075: LD_ADDR_OWVAR 31
20079: PUSH
20080: LD_EXP 29
20084: PUSH
20085: LD_INT 1
20087: ARRAY
20088: PUSH
20089: LD_EXP 29
20093: PUSH
20094: LD_INT 2
20096: ARRAY
20097: PUSH
20098: LD_EXP 29
20102: PUSH
20103: LD_INT 3
20105: ARRAY
20106: PUSH
20107: LD_EXP 29
20111: PUSH
20112: LD_INT 4
20114: ARRAY
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20122: LD_ADDR_OWVAR 35
20126: PUSH
20127: LD_EXP 30
20131: ST_TO_ADDR
// un = CreateHuman ;
20132: LD_ADDR_VAR 0 3
20136: PUSH
20137: CALL_OW 44
20141: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20142: LD_VAR 0 3
20146: PPUSH
20147: LD_INT 33
20149: PPUSH
20150: LD_INT 0
20152: PPUSH
20153: CALL_OW 49
// end ;
20157: GO 20048
20159: POP
20160: POP
// for i := 1 to animalsAmount [ 2 ] do
20161: LD_ADDR_VAR 0 2
20165: PUSH
20166: DOUBLE
20167: LD_INT 1
20169: DEC
20170: ST_TO_ADDR
20171: LD_EXP 28
20175: PUSH
20176: LD_INT 2
20178: ARRAY
20179: PUSH
20180: FOR_TO
20181: IFFALSE 20291
// begin uc_side = 0 ;
20183: LD_ADDR_OWVAR 20
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
// uc_nation = nation_nature ;
20191: LD_ADDR_OWVAR 21
20195: PUSH
20196: LD_INT 0
20198: ST_TO_ADDR
// hc_class = class_phororhacos ;
20199: LD_ADDR_OWVAR 28
20203: PUSH
20204: LD_INT 18
20206: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20207: LD_ADDR_OWVAR 31
20211: PUSH
20212: LD_EXP 29
20216: PUSH
20217: LD_INT 1
20219: ARRAY
20220: PUSH
20221: LD_EXP 29
20225: PUSH
20226: LD_INT 2
20228: ARRAY
20229: PUSH
20230: LD_EXP 29
20234: PUSH
20235: LD_INT 3
20237: ARRAY
20238: PUSH
20239: LD_EXP 29
20243: PUSH
20244: LD_INT 4
20246: ARRAY
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20254: LD_ADDR_OWVAR 35
20258: PUSH
20259: LD_EXP 30
20263: ST_TO_ADDR
// un = CreateHuman ;
20264: LD_ADDR_VAR 0 3
20268: PUSH
20269: CALL_OW 44
20273: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20274: LD_VAR 0 3
20278: PPUSH
20279: LD_INT 33
20281: PPUSH
20282: LD_INT 0
20284: PPUSH
20285: CALL_OW 49
// end ;
20289: GO 20180
20291: POP
20292: POP
// for i := 1 to animalsAmount [ 3 ] do
20293: LD_ADDR_VAR 0 2
20297: PUSH
20298: DOUBLE
20299: LD_INT 1
20301: DEC
20302: ST_TO_ADDR
20303: LD_EXP 28
20307: PUSH
20308: LD_INT 3
20310: ARRAY
20311: PUSH
20312: FOR_TO
20313: IFFALSE 20423
// begin uc_side = 0 ;
20315: LD_ADDR_OWVAR 20
20319: PUSH
20320: LD_INT 0
20322: ST_TO_ADDR
// uc_nation = nation_nature ;
20323: LD_ADDR_OWVAR 21
20327: PUSH
20328: LD_INT 0
20330: ST_TO_ADDR
// hc_class = class_tiger ;
20331: LD_ADDR_OWVAR 28
20335: PUSH
20336: LD_INT 14
20338: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20339: LD_ADDR_OWVAR 31
20343: PUSH
20344: LD_EXP 29
20348: PUSH
20349: LD_INT 1
20351: ARRAY
20352: PUSH
20353: LD_EXP 29
20357: PUSH
20358: LD_INT 2
20360: ARRAY
20361: PUSH
20362: LD_EXP 29
20366: PUSH
20367: LD_INT 3
20369: ARRAY
20370: PUSH
20371: LD_EXP 29
20375: PUSH
20376: LD_INT 4
20378: ARRAY
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20386: LD_ADDR_OWVAR 35
20390: PUSH
20391: LD_EXP 30
20395: ST_TO_ADDR
// un = CreateHuman ;
20396: LD_ADDR_VAR 0 3
20400: PUSH
20401: CALL_OW 44
20405: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20406: LD_VAR 0 3
20410: PPUSH
20411: LD_INT 33
20413: PPUSH
20414: LD_INT 0
20416: PPUSH
20417: CALL_OW 49
// end ;
20421: GO 20312
20423: POP
20424: POP
// for i := 1 to animalsAmount [ 4 ] do
20425: LD_ADDR_VAR 0 2
20429: PUSH
20430: DOUBLE
20431: LD_INT 1
20433: DEC
20434: ST_TO_ADDR
20435: LD_EXP 28
20439: PUSH
20440: LD_INT 4
20442: ARRAY
20443: PUSH
20444: FOR_TO
20445: IFFALSE 20555
// begin uc_side = 0 ;
20447: LD_ADDR_OWVAR 20
20451: PUSH
20452: LD_INT 0
20454: ST_TO_ADDR
// uc_nation = nation_nature ;
20455: LD_ADDR_OWVAR 21
20459: PUSH
20460: LD_INT 0
20462: ST_TO_ADDR
// hc_class = 21 ;
20463: LD_ADDR_OWVAR 28
20467: PUSH
20468: LD_INT 21
20470: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20471: LD_ADDR_OWVAR 31
20475: PUSH
20476: LD_EXP 29
20480: PUSH
20481: LD_INT 1
20483: ARRAY
20484: PUSH
20485: LD_EXP 29
20489: PUSH
20490: LD_INT 2
20492: ARRAY
20493: PUSH
20494: LD_EXP 29
20498: PUSH
20499: LD_INT 3
20501: ARRAY
20502: PUSH
20503: LD_EXP 29
20507: PUSH
20508: LD_INT 4
20510: ARRAY
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20518: LD_ADDR_OWVAR 35
20522: PUSH
20523: LD_EXP 30
20527: ST_TO_ADDR
// un = CreateHuman ;
20528: LD_ADDR_VAR 0 3
20532: PUSH
20533: CALL_OW 44
20537: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20538: LD_VAR 0 3
20542: PPUSH
20543: LD_INT 33
20545: PPUSH
20546: LD_INT 0
20548: PPUSH
20549: CALL_OW 49
// end ;
20553: GO 20444
20555: POP
20556: POP
// for i := 1 to animalsAmount [ 5 ] do
20557: LD_ADDR_VAR 0 2
20561: PUSH
20562: DOUBLE
20563: LD_INT 1
20565: DEC
20566: ST_TO_ADDR
20567: LD_EXP 28
20571: PUSH
20572: LD_INT 5
20574: ARRAY
20575: PUSH
20576: FOR_TO
20577: IFFALSE 20638
// begin uc_side = 0 ;
20579: LD_ADDR_OWVAR 20
20583: PUSH
20584: LD_INT 0
20586: ST_TO_ADDR
// uc_nation = nation_nature ;
20587: LD_ADDR_OWVAR 21
20591: PUSH
20592: LD_INT 0
20594: ST_TO_ADDR
// vc_chassis := 31 ;
20595: LD_ADDR_OWVAR 37
20599: PUSH
20600: LD_INT 31
20602: ST_TO_ADDR
// vc_control := control_rider ;
20603: LD_ADDR_OWVAR 38
20607: PUSH
20608: LD_INT 4
20610: ST_TO_ADDR
// un := CreateVehicle ;
20611: LD_ADDR_VAR 0 3
20615: PUSH
20616: CALL_OW 45
20620: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20621: LD_VAR 0 3
20625: PPUSH
20626: LD_INT 33
20628: PPUSH
20629: LD_INT 0
20631: PPUSH
20632: CALL_OW 49
// end ;
20636: GO 20576
20638: POP
20639: POP
// end ; end_of_file
20640: LD_VAR 0 1
20644: RET
// every 0 0$1 do
20645: GO 20647
20647: DISABLE
// begin enable ;
20648: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20649: LD_ADDR_OWVAR 47
20653: PUSH
20654: LD_STRING #Am01-1
20656: PUSH
20657: LD_EXP 7
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20666: LD_ADDR_EXP 7
20670: PUSH
20671: LD_EXP 7
20675: PUSH
20676: LD_INT 35
20678: PLUS
20679: ST_TO_ADDR
// end ; end_of_file
20680: END
// every 0 0$01 do var timer ;
20681: GO 20683
20683: DISABLE
20684: LD_INT 0
20686: PPUSH
// begin timer := 0 0$30 ;
20687: LD_ADDR_VAR 0 1
20691: PUSH
20692: LD_INT 1050
20694: ST_TO_ADDR
// repeat wait ( timer ) ;
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20704: LD_EXP 22
20708: PUSH
20709: LD_INT 6
20711: GREATEREQUAL
20712: PUSH
20713: LD_EXP 22
20717: PUSH
20718: LD_INT 12
20720: LESS
20721: AND
20722: IFFALSE 20738
// timer := timer + 0 0$3 ;
20724: LD_ADDR_VAR 0 1
20728: PUSH
20729: LD_VAR 0 1
20733: PUSH
20734: LD_INT 105
20736: PLUS
20737: ST_TO_ADDR
// if cratesSpawned >= 12 then
20738: LD_EXP 22
20742: PUSH
20743: LD_INT 12
20745: GREATEREQUAL
20746: IFFALSE 20762
// timer := timer + 0 0$9 ;
20748: LD_ADDR_VAR 0 1
20752: PUSH
20753: LD_VAR 0 1
20757: PUSH
20758: LD_INT 315
20760: PLUS
20761: ST_TO_ADDR
// if timer > 3 3$00 then
20762: LD_VAR 0 1
20766: PUSH
20767: LD_INT 6300
20769: GREATER
20770: IFFALSE 20780
// timer := 0 0$50 ;
20772: LD_ADDR_VAR 0 1
20776: PUSH
20777: LD_INT 1750
20779: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20780: LD_INT 3
20782: PPUSH
20783: LD_INT 5
20785: PPUSH
20786: CALL_OW 12
20790: PPUSH
20791: LD_INT 46
20793: PPUSH
20794: LD_INT 1
20796: PPUSH
20797: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20801: LD_ADDR_EXP 22
20805: PUSH
20806: LD_EXP 22
20810: PUSH
20811: LD_INT 1
20813: PLUS
20814: ST_TO_ADDR
// until false ;
20815: LD_INT 0
20817: IFFALSE 20695
// end ;
20819: PPOPN 1
20821: END
// every 0 0$5 do
20822: GO 20824
20824: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20825: LD_INT 5
20827: PPUSH
20828: LD_INT 48
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: CALL_OW 55
// wait ( 0 0$40 ) ;
20838: LD_INT 1400
20840: PPUSH
20841: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20845: LD_INT 5
20847: PPUSH
20848: LD_INT 48
20850: PPUSH
20851: LD_INT 1
20853: PPUSH
20854: CALL_OW 55
// end ;
20858: END
// every 10 10$0 do
20859: GO 20861
20861: DISABLE
// begin enable ;
20862: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20863: LD_INT 3
20865: PPUSH
20866: LD_INT 5
20868: PPUSH
20869: CALL_OW 12
20873: PPUSH
20874: LD_INT 48
20876: PPUSH
20877: LD_INT 1
20879: PPUSH
20880: CALL_OW 55
// end ; end_of_file
20884: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20885: LD_INT 0
20887: PPUSH
// uc_side = 1 ;
20888: LD_ADDR_OWVAR 20
20892: PUSH
20893: LD_INT 1
20895: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20896: LD_ADDR_EXP 58
20900: PUSH
20901: LD_STRING Stevens
20903: PPUSH
20904: LD_INT 0
20906: PPUSH
20907: LD_INT 0
20909: PPUSH
20910: CALL 8528 0 3
20914: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20915: LD_EXP 58
20919: PPUSH
20920: LD_VAR 0 1
20924: PPUSH
20925: LD_INT 1
20927: PPUSH
20928: CALL_OW 49
// end ; end_of_file
20932: LD_VAR 0 2
20936: RET
// every 1 trigger achievement_DestroyedHovercrafts >= 3 do
20937: LD_EXP 26
20941: PUSH
20942: LD_INT 3
20944: GREATEREQUAL
20945: IFFALSE 20957
20947: GO 20949
20949: DISABLE
// SetAchievement ( ACH_HOVER ) ;
20950: LD_STRING ACH_HOVER
20952: PPUSH
20953: CALL_OW 543
20957: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_nature ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) and not FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_class , class_apeman ] ] ) do
20958: LD_INT 22
20960: PUSH
20961: LD_INT 3
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 23
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 25
20983: PUSH
20984: LD_INT 12
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 25
20993: PUSH
20994: LD_INT 16
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 25
21003: PUSH
21004: LD_INT 15
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: PPUSH
21022: CALL_OW 69
21026: PUSH
21027: LD_INT 22
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 23
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 25
21049: PUSH
21050: LD_INT 12
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: LIST
21061: PPUSH
21062: CALL_OW 69
21066: NOT
21067: AND
21068: IFFALSE 21080
21070: GO 21072
21072: DISABLE
// SetAchievement ( ACH_REDARMY ) ;
21073: LD_STRING ACH_REDARMY
21075: PPUSH
21076: CALL_OW 543
21080: END
// every 1 trigger not achievement_CollectedCrates do var crates , depot ;
21081: LD_EXP 27
21085: NOT
21086: IFFALSE 21219
21088: GO 21090
21090: DISABLE
21091: LD_INT 0
21093: PPUSH
21094: PPUSH
// begin enable ;
21095: ENABLE
// crates = 0 ;
21096: LD_ADDR_VAR 0 1
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// for depot in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
21104: LD_ADDR_VAR 0 2
21108: PUSH
21109: LD_INT 22
21111: PUSH
21112: LD_INT 3
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 21
21121: PUSH
21122: LD_INT 3
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 30
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 50
21141: PUSH
21142: EMPTY
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: PPUSH
21151: CALL_OW 69
21155: PUSH
21156: FOR_IN
21157: IFFALSE 21190
// crates = crates + GetResourceType ( GetBase ( depot ) , mat_cans ) ;
21159: LD_ADDR_VAR 0 1
21163: PUSH
21164: LD_VAR 0 1
21168: PUSH
21169: LD_VAR 0 2
21173: PPUSH
21174: CALL_OW 274
21178: PPUSH
21179: LD_INT 1
21181: PPUSH
21182: CALL_OW 275
21186: PLUS
21187: ST_TO_ADDR
21188: GO 21156
21190: POP
21191: POP
// if crates >= 500 then
21192: LD_VAR 0 1
21196: PUSH
21197: LD_INT 500
21199: GREATEREQUAL
21200: IFFALSE 21219
// begin achievement_CollectedCrates = true ;
21202: LD_ADDR_EXP 27
21206: PUSH
21207: LD_INT 1
21209: ST_TO_ADDR
// SetAchievement ( ACH_CRATES ) ;
21210: LD_STRING ACH_CRATES
21212: PPUSH
21213: CALL_OW 543
// exit ;
21217: GO 21219
// end ; end ; end_of_file
21219: PPOPN 2
21221: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21222: LD_INT 0
21224: PPUSH
21225: PPUSH
// if exist_mode then
21226: LD_VAR 0 2
21230: IFFALSE 21255
// unit := CreateCharacter ( prefix & ident ) else
21232: LD_ADDR_VAR 0 5
21236: PUSH
21237: LD_VAR 0 3
21241: PUSH
21242: LD_VAR 0 1
21246: STR
21247: PPUSH
21248: CALL_OW 34
21252: ST_TO_ADDR
21253: GO 21270
// unit := NewCharacter ( ident ) ;
21255: LD_ADDR_VAR 0 5
21259: PUSH
21260: LD_VAR 0 1
21264: PPUSH
21265: CALL_OW 25
21269: ST_TO_ADDR
// result := unit ;
21270: LD_ADDR_VAR 0 4
21274: PUSH
21275: LD_VAR 0 5
21279: ST_TO_ADDR
// end ;
21280: LD_VAR 0 4
21284: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21285: LD_INT 0
21287: PPUSH
21288: PPUSH
// if not side or not nation then
21289: LD_VAR 0 1
21293: NOT
21294: PUSH
21295: LD_VAR 0 2
21299: NOT
21300: OR
21301: IFFALSE 21305
// exit ;
21303: GO 22069
// case nation of nation_american :
21305: LD_VAR 0 2
21309: PUSH
21310: LD_INT 1
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21532
21318: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21319: LD_ADDR_VAR 0 4
21323: PUSH
21324: LD_INT 35
21326: PUSH
21327: LD_INT 45
21329: PUSH
21330: LD_INT 46
21332: PUSH
21333: LD_INT 47
21335: PUSH
21336: LD_INT 82
21338: PUSH
21339: LD_INT 83
21341: PUSH
21342: LD_INT 84
21344: PUSH
21345: LD_INT 85
21347: PUSH
21348: LD_INT 86
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: LD_INT 6
21359: PUSH
21360: LD_INT 15
21362: PUSH
21363: LD_INT 16
21365: PUSH
21366: LD_INT 7
21368: PUSH
21369: LD_INT 12
21371: PUSH
21372: LD_INT 13
21374: PUSH
21375: LD_INT 10
21377: PUSH
21378: LD_INT 14
21380: PUSH
21381: LD_INT 20
21383: PUSH
21384: LD_INT 21
21386: PUSH
21387: LD_INT 22
21389: PUSH
21390: LD_INT 25
21392: PUSH
21393: LD_INT 32
21395: PUSH
21396: LD_INT 27
21398: PUSH
21399: LD_INT 36
21401: PUSH
21402: LD_INT 69
21404: PUSH
21405: LD_INT 39
21407: PUSH
21408: LD_INT 34
21410: PUSH
21411: LD_INT 40
21413: PUSH
21414: LD_INT 48
21416: PUSH
21417: LD_INT 49
21419: PUSH
21420: LD_INT 50
21422: PUSH
21423: LD_INT 51
21425: PUSH
21426: LD_INT 52
21428: PUSH
21429: LD_INT 53
21431: PUSH
21432: LD_INT 54
21434: PUSH
21435: LD_INT 55
21437: PUSH
21438: LD_INT 56
21440: PUSH
21441: LD_INT 57
21443: PUSH
21444: LD_INT 58
21446: PUSH
21447: LD_INT 59
21449: PUSH
21450: LD_INT 60
21452: PUSH
21453: LD_INT 61
21455: PUSH
21456: LD_INT 62
21458: PUSH
21459: LD_INT 80
21461: PUSH
21462: LD_INT 82
21464: PUSH
21465: LD_INT 83
21467: PUSH
21468: LD_INT 84
21470: PUSH
21471: LD_INT 85
21473: PUSH
21474: LD_INT 86
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: ST_TO_ADDR
21530: GO 21993
21532: LD_INT 2
21534: DOUBLE
21535: EQUAL
21536: IFTRUE 21540
21538: GO 21762
21540: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21541: LD_ADDR_VAR 0 4
21545: PUSH
21546: LD_INT 35
21548: PUSH
21549: LD_INT 45
21551: PUSH
21552: LD_INT 46
21554: PUSH
21555: LD_INT 47
21557: PUSH
21558: LD_INT 82
21560: PUSH
21561: LD_INT 83
21563: PUSH
21564: LD_INT 84
21566: PUSH
21567: LD_INT 85
21569: PUSH
21570: LD_INT 87
21572: PUSH
21573: LD_INT 70
21575: PUSH
21576: LD_INT 1
21578: PUSH
21579: LD_INT 11
21581: PUSH
21582: LD_INT 3
21584: PUSH
21585: LD_INT 4
21587: PUSH
21588: LD_INT 5
21590: PUSH
21591: LD_INT 6
21593: PUSH
21594: LD_INT 15
21596: PUSH
21597: LD_INT 18
21599: PUSH
21600: LD_INT 7
21602: PUSH
21603: LD_INT 17
21605: PUSH
21606: LD_INT 8
21608: PUSH
21609: LD_INT 20
21611: PUSH
21612: LD_INT 21
21614: PUSH
21615: LD_INT 22
21617: PUSH
21618: LD_INT 72
21620: PUSH
21621: LD_INT 26
21623: PUSH
21624: LD_INT 69
21626: PUSH
21627: LD_INT 39
21629: PUSH
21630: LD_INT 40
21632: PUSH
21633: LD_INT 41
21635: PUSH
21636: LD_INT 42
21638: PUSH
21639: LD_INT 43
21641: PUSH
21642: LD_INT 48
21644: PUSH
21645: LD_INT 49
21647: PUSH
21648: LD_INT 50
21650: PUSH
21651: LD_INT 51
21653: PUSH
21654: LD_INT 52
21656: PUSH
21657: LD_INT 53
21659: PUSH
21660: LD_INT 54
21662: PUSH
21663: LD_INT 55
21665: PUSH
21666: LD_INT 56
21668: PUSH
21669: LD_INT 60
21671: PUSH
21672: LD_INT 61
21674: PUSH
21675: LD_INT 62
21677: PUSH
21678: LD_INT 66
21680: PUSH
21681: LD_INT 67
21683: PUSH
21684: LD_INT 68
21686: PUSH
21687: LD_INT 81
21689: PUSH
21690: LD_INT 82
21692: PUSH
21693: LD_INT 83
21695: PUSH
21696: LD_INT 84
21698: PUSH
21699: LD_INT 85
21701: PUSH
21702: LD_INT 87
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: ST_TO_ADDR
21760: GO 21993
21762: LD_INT 3
21764: DOUBLE
21765: EQUAL
21766: IFTRUE 21770
21768: GO 21992
21770: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21771: LD_ADDR_VAR 0 4
21775: PUSH
21776: LD_INT 46
21778: PUSH
21779: LD_INT 47
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 82
21790: PUSH
21791: LD_INT 83
21793: PUSH
21794: LD_INT 84
21796: PUSH
21797: LD_INT 85
21799: PUSH
21800: LD_INT 86
21802: PUSH
21803: LD_INT 11
21805: PUSH
21806: LD_INT 9
21808: PUSH
21809: LD_INT 20
21811: PUSH
21812: LD_INT 19
21814: PUSH
21815: LD_INT 21
21817: PUSH
21818: LD_INT 24
21820: PUSH
21821: LD_INT 22
21823: PUSH
21824: LD_INT 25
21826: PUSH
21827: LD_INT 28
21829: PUSH
21830: LD_INT 29
21832: PUSH
21833: LD_INT 30
21835: PUSH
21836: LD_INT 31
21838: PUSH
21839: LD_INT 37
21841: PUSH
21842: LD_INT 38
21844: PUSH
21845: LD_INT 32
21847: PUSH
21848: LD_INT 27
21850: PUSH
21851: LD_INT 33
21853: PUSH
21854: LD_INT 69
21856: PUSH
21857: LD_INT 39
21859: PUSH
21860: LD_INT 34
21862: PUSH
21863: LD_INT 40
21865: PUSH
21866: LD_INT 71
21868: PUSH
21869: LD_INT 23
21871: PUSH
21872: LD_INT 44
21874: PUSH
21875: LD_INT 48
21877: PUSH
21878: LD_INT 49
21880: PUSH
21881: LD_INT 50
21883: PUSH
21884: LD_INT 51
21886: PUSH
21887: LD_INT 52
21889: PUSH
21890: LD_INT 53
21892: PUSH
21893: LD_INT 54
21895: PUSH
21896: LD_INT 55
21898: PUSH
21899: LD_INT 56
21901: PUSH
21902: LD_INT 57
21904: PUSH
21905: LD_INT 58
21907: PUSH
21908: LD_INT 59
21910: PUSH
21911: LD_INT 63
21913: PUSH
21914: LD_INT 64
21916: PUSH
21917: LD_INT 65
21919: PUSH
21920: LD_INT 82
21922: PUSH
21923: LD_INT 83
21925: PUSH
21926: LD_INT 84
21928: PUSH
21929: LD_INT 85
21931: PUSH
21932: LD_INT 86
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: ST_TO_ADDR
21990: GO 21993
21992: POP
// if state > - 1 and state < 3 then
21993: LD_VAR 0 3
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: GREATER
22002: PUSH
22003: LD_VAR 0 3
22007: PUSH
22008: LD_INT 3
22010: LESS
22011: AND
22012: IFFALSE 22069
// for i in result do
22014: LD_ADDR_VAR 0 5
22018: PUSH
22019: LD_VAR 0 4
22023: PUSH
22024: FOR_IN
22025: IFFALSE 22067
// if GetTech ( i , side ) <> state then
22027: LD_VAR 0 5
22031: PPUSH
22032: LD_VAR 0 1
22036: PPUSH
22037: CALL_OW 321
22041: PUSH
22042: LD_VAR 0 3
22046: NONEQUAL
22047: IFFALSE 22065
// result := result diff i ;
22049: LD_ADDR_VAR 0 4
22053: PUSH
22054: LD_VAR 0 4
22058: PUSH
22059: LD_VAR 0 5
22063: DIFF
22064: ST_TO_ADDR
22065: GO 22024
22067: POP
22068: POP
// end ;
22069: LD_VAR 0 4
22073: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22074: LD_INT 0
22076: PPUSH
22077: PPUSH
22078: PPUSH
// result := true ;
22079: LD_ADDR_VAR 0 3
22083: PUSH
22084: LD_INT 1
22086: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22087: LD_ADDR_VAR 0 5
22091: PUSH
22092: LD_VAR 0 2
22096: PPUSH
22097: CALL_OW 480
22101: ST_TO_ADDR
// if not tmp then
22102: LD_VAR 0 5
22106: NOT
22107: IFFALSE 22111
// exit ;
22109: GO 22160
// for i in tmp do
22111: LD_ADDR_VAR 0 4
22115: PUSH
22116: LD_VAR 0 5
22120: PUSH
22121: FOR_IN
22122: IFFALSE 22158
// if GetTech ( i , side ) <> state_researched then
22124: LD_VAR 0 4
22128: PPUSH
22129: LD_VAR 0 1
22133: PPUSH
22134: CALL_OW 321
22138: PUSH
22139: LD_INT 2
22141: NONEQUAL
22142: IFFALSE 22156
// begin result := false ;
22144: LD_ADDR_VAR 0 3
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// exit ;
22152: POP
22153: POP
22154: GO 22160
// end ;
22156: GO 22121
22158: POP
22159: POP
// end ;
22160: LD_VAR 0 3
22164: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22165: LD_INT 0
22167: PPUSH
22168: PPUSH
22169: PPUSH
22170: PPUSH
22171: PPUSH
22172: PPUSH
22173: PPUSH
22174: PPUSH
22175: PPUSH
22176: PPUSH
22177: PPUSH
22178: PPUSH
22179: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22180: LD_VAR 0 1
22184: NOT
22185: PUSH
22186: LD_VAR 0 1
22190: PPUSH
22191: CALL_OW 257
22195: PUSH
22196: LD_INT 9
22198: NONEQUAL
22199: OR
22200: IFFALSE 22204
// exit ;
22202: GO 22777
// side := GetSide ( unit ) ;
22204: LD_ADDR_VAR 0 9
22208: PUSH
22209: LD_VAR 0 1
22213: PPUSH
22214: CALL_OW 255
22218: ST_TO_ADDR
// tech_space := tech_spacanom ;
22219: LD_ADDR_VAR 0 12
22223: PUSH
22224: LD_INT 29
22226: ST_TO_ADDR
// tech_time := tech_taurad ;
22227: LD_ADDR_VAR 0 13
22231: PUSH
22232: LD_INT 28
22234: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22235: LD_ADDR_VAR 0 11
22239: PUSH
22240: LD_VAR 0 1
22244: PPUSH
22245: CALL_OW 310
22249: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22250: LD_VAR 0 11
22254: PPUSH
22255: CALL_OW 247
22259: PUSH
22260: LD_INT 2
22262: EQUAL
22263: IFFALSE 22267
// exit ;
22265: GO 22777
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22267: LD_ADDR_VAR 0 8
22271: PUSH
22272: LD_INT 81
22274: PUSH
22275: LD_VAR 0 9
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 3
22286: PUSH
22287: LD_INT 21
22289: PUSH
22290: LD_INT 3
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: ST_TO_ADDR
// if not tmp then
22310: LD_VAR 0 8
22314: NOT
22315: IFFALSE 22319
// exit ;
22317: GO 22777
// if in_unit then
22319: LD_VAR 0 11
22323: IFFALSE 22347
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22325: LD_ADDR_VAR 0 10
22329: PUSH
22330: LD_VAR 0 8
22334: PPUSH
22335: LD_VAR 0 11
22339: PPUSH
22340: CALL_OW 74
22344: ST_TO_ADDR
22345: GO 22367
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22347: LD_ADDR_VAR 0 10
22351: PUSH
22352: LD_VAR 0 8
22356: PPUSH
22357: LD_VAR 0 1
22361: PPUSH
22362: CALL_OW 74
22366: ST_TO_ADDR
// if not enemy then
22367: LD_VAR 0 10
22371: NOT
22372: IFFALSE 22376
// exit ;
22374: GO 22777
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22376: LD_VAR 0 11
22380: PUSH
22381: LD_VAR 0 11
22385: PPUSH
22386: LD_VAR 0 10
22390: PPUSH
22391: CALL_OW 296
22395: PUSH
22396: LD_INT 13
22398: GREATER
22399: AND
22400: PUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: LD_VAR 0 10
22410: PPUSH
22411: CALL_OW 296
22415: PUSH
22416: LD_INT 12
22418: GREATER
22419: OR
22420: IFFALSE 22424
// exit ;
22422: GO 22777
// missile := [ 1 ] ;
22424: LD_ADDR_VAR 0 14
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22435: LD_VAR 0 9
22439: PPUSH
22440: LD_VAR 0 12
22444: PPUSH
22445: CALL_OW 325
22449: IFFALSE 22478
// missile := Insert ( missile , missile + 1 , 2 ) ;
22451: LD_ADDR_VAR 0 14
22455: PUSH
22456: LD_VAR 0 14
22460: PPUSH
22461: LD_VAR 0 14
22465: PUSH
22466: LD_INT 1
22468: PLUS
22469: PPUSH
22470: LD_INT 2
22472: PPUSH
22473: CALL_OW 2
22477: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22478: LD_VAR 0 9
22482: PPUSH
22483: LD_VAR 0 13
22487: PPUSH
22488: CALL_OW 325
22492: PUSH
22493: LD_VAR 0 10
22497: PPUSH
22498: CALL_OW 255
22502: PPUSH
22503: LD_VAR 0 13
22507: PPUSH
22508: CALL_OW 325
22512: NOT
22513: AND
22514: IFFALSE 22543
// missile := Insert ( missile , missile + 1 , 3 ) ;
22516: LD_ADDR_VAR 0 14
22520: PUSH
22521: LD_VAR 0 14
22525: PPUSH
22526: LD_VAR 0 14
22530: PUSH
22531: LD_INT 1
22533: PLUS
22534: PPUSH
22535: LD_INT 3
22537: PPUSH
22538: CALL_OW 2
22542: ST_TO_ADDR
// if missile < 2 then
22543: LD_VAR 0 14
22547: PUSH
22548: LD_INT 2
22550: LESS
22551: IFFALSE 22555
// exit ;
22553: GO 22777
// x := GetX ( enemy ) ;
22555: LD_ADDR_VAR 0 4
22559: PUSH
22560: LD_VAR 0 10
22564: PPUSH
22565: CALL_OW 250
22569: ST_TO_ADDR
// y := GetY ( enemy ) ;
22570: LD_ADDR_VAR 0 5
22574: PUSH
22575: LD_VAR 0 10
22579: PPUSH
22580: CALL_OW 251
22584: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22585: LD_ADDR_VAR 0 6
22589: PUSH
22590: LD_VAR 0 4
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PPUSH
22599: LD_INT 1
22601: PPUSH
22602: CALL_OW 12
22606: PLUS
22607: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22608: LD_ADDR_VAR 0 7
22612: PUSH
22613: LD_VAR 0 5
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PPUSH
22622: LD_INT 1
22624: PPUSH
22625: CALL_OW 12
22629: PLUS
22630: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22631: LD_VAR 0 6
22635: PPUSH
22636: LD_VAR 0 7
22640: PPUSH
22641: CALL_OW 488
22645: NOT
22646: IFFALSE 22668
// begin _x := x ;
22648: LD_ADDR_VAR 0 6
22652: PUSH
22653: LD_VAR 0 4
22657: ST_TO_ADDR
// _y := y ;
22658: LD_ADDR_VAR 0 7
22662: PUSH
22663: LD_VAR 0 5
22667: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22668: LD_ADDR_VAR 0 3
22672: PUSH
22673: LD_INT 1
22675: PPUSH
22676: LD_VAR 0 14
22680: PPUSH
22681: CALL_OW 12
22685: ST_TO_ADDR
// case i of 1 :
22686: LD_VAR 0 3
22690: PUSH
22691: LD_INT 1
22693: DOUBLE
22694: EQUAL
22695: IFTRUE 22699
22697: GO 22716
22699: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22700: LD_VAR 0 1
22704: PPUSH
22705: LD_VAR 0 10
22709: PPUSH
22710: CALL_OW 115
22714: GO 22777
22716: LD_INT 2
22718: DOUBLE
22719: EQUAL
22720: IFTRUE 22724
22722: GO 22746
22724: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22725: LD_VAR 0 1
22729: PPUSH
22730: LD_VAR 0 6
22734: PPUSH
22735: LD_VAR 0 7
22739: PPUSH
22740: CALL_OW 153
22744: GO 22777
22746: LD_INT 3
22748: DOUBLE
22749: EQUAL
22750: IFTRUE 22754
22752: GO 22776
22754: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_VAR 0 6
22764: PPUSH
22765: LD_VAR 0 7
22769: PPUSH
22770: CALL_OW 154
22774: GO 22777
22776: POP
// end ;
22777: LD_VAR 0 2
22781: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22782: LD_INT 0
22784: PPUSH
22785: PPUSH
22786: PPUSH
22787: PPUSH
22788: PPUSH
22789: PPUSH
// if not unit or not building then
22790: LD_VAR 0 1
22794: NOT
22795: PUSH
22796: LD_VAR 0 2
22800: NOT
22801: OR
22802: IFFALSE 22806
// exit ;
22804: GO 22964
// x := GetX ( building ) ;
22806: LD_ADDR_VAR 0 5
22810: PUSH
22811: LD_VAR 0 2
22815: PPUSH
22816: CALL_OW 250
22820: ST_TO_ADDR
// y := GetY ( building ) ;
22821: LD_ADDR_VAR 0 6
22825: PUSH
22826: LD_VAR 0 2
22830: PPUSH
22831: CALL_OW 251
22835: ST_TO_ADDR
// for i = 0 to 5 do
22836: LD_ADDR_VAR 0 4
22840: PUSH
22841: DOUBLE
22842: LD_INT 0
22844: DEC
22845: ST_TO_ADDR
22846: LD_INT 5
22848: PUSH
22849: FOR_TO
22850: IFFALSE 22962
// begin _x := ShiftX ( x , i , 3 ) ;
22852: LD_ADDR_VAR 0 7
22856: PUSH
22857: LD_VAR 0 5
22861: PPUSH
22862: LD_VAR 0 4
22866: PPUSH
22867: LD_INT 3
22869: PPUSH
22870: CALL_OW 272
22874: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22875: LD_ADDR_VAR 0 8
22879: PUSH
22880: LD_VAR 0 6
22884: PPUSH
22885: LD_VAR 0 4
22889: PPUSH
22890: LD_INT 3
22892: PPUSH
22893: CALL_OW 273
22897: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22898: LD_VAR 0 7
22902: PPUSH
22903: LD_VAR 0 8
22907: PPUSH
22908: CALL_OW 488
22912: NOT
22913: IFFALSE 22917
// continue ;
22915: GO 22849
// if HexInfo ( _x , _y ) = 0 then
22917: LD_VAR 0 7
22921: PPUSH
22922: LD_VAR 0 8
22926: PPUSH
22927: CALL_OW 428
22931: PUSH
22932: LD_INT 0
22934: EQUAL
22935: IFFALSE 22960
// begin ComMoveXY ( unit , _x , _y ) ;
22937: LD_VAR 0 1
22941: PPUSH
22942: LD_VAR 0 7
22946: PPUSH
22947: LD_VAR 0 8
22951: PPUSH
22952: CALL_OW 111
// exit ;
22956: POP
22957: POP
22958: GO 22964
// end ; end ;
22960: GO 22849
22962: POP
22963: POP
// end ;
22964: LD_VAR 0 3
22968: RET
// export function ScanBase ( side , base_area ) ; begin
22969: LD_INT 0
22971: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22972: LD_ADDR_VAR 0 3
22976: PUSH
22977: LD_VAR 0 2
22981: PPUSH
22982: LD_INT 81
22984: PUSH
22985: LD_VAR 0 1
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PPUSH
22994: CALL_OW 70
22998: ST_TO_ADDR
// end ;
22999: LD_VAR 0 3
23003: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23004: LD_INT 0
23006: PPUSH
23007: PPUSH
23008: PPUSH
23009: PPUSH
// result := false ;
23010: LD_ADDR_VAR 0 2
23014: PUSH
23015: LD_INT 0
23017: ST_TO_ADDR
// side := GetSide ( unit ) ;
23018: LD_ADDR_VAR 0 3
23022: PUSH
23023: LD_VAR 0 1
23027: PPUSH
23028: CALL_OW 255
23032: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23033: LD_ADDR_VAR 0 4
23037: PUSH
23038: LD_VAR 0 1
23042: PPUSH
23043: CALL_OW 248
23047: ST_TO_ADDR
// case nat of 1 :
23048: LD_VAR 0 4
23052: PUSH
23053: LD_INT 1
23055: DOUBLE
23056: EQUAL
23057: IFTRUE 23061
23059: GO 23072
23061: POP
// tech := tech_lassight ; 2 :
23062: LD_ADDR_VAR 0 5
23066: PUSH
23067: LD_INT 12
23069: ST_TO_ADDR
23070: GO 23111
23072: LD_INT 2
23074: DOUBLE
23075: EQUAL
23076: IFTRUE 23080
23078: GO 23091
23080: POP
// tech := tech_mortar ; 3 :
23081: LD_ADDR_VAR 0 5
23085: PUSH
23086: LD_INT 41
23088: ST_TO_ADDR
23089: GO 23111
23091: LD_INT 3
23093: DOUBLE
23094: EQUAL
23095: IFTRUE 23099
23097: GO 23110
23099: POP
// tech := tech_bazooka ; end ;
23100: LD_ADDR_VAR 0 5
23104: PUSH
23105: LD_INT 44
23107: ST_TO_ADDR
23108: GO 23111
23110: POP
// if Researched ( side , tech ) then
23111: LD_VAR 0 3
23115: PPUSH
23116: LD_VAR 0 5
23120: PPUSH
23121: CALL_OW 325
23125: IFFALSE 23152
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23127: LD_ADDR_VAR 0 2
23131: PUSH
23132: LD_INT 5
23134: PUSH
23135: LD_INT 8
23137: PUSH
23138: LD_INT 9
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: PUSH
23146: LD_VAR 0 4
23150: ARRAY
23151: ST_TO_ADDR
// end ;
23152: LD_VAR 0 2
23156: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23157: LD_INT 0
23159: PPUSH
23160: PPUSH
23161: PPUSH
// if not mines then
23162: LD_VAR 0 2
23166: NOT
23167: IFFALSE 23171
// exit ;
23169: GO 23315
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23171: LD_ADDR_VAR 0 5
23175: PUSH
23176: LD_INT 81
23178: PUSH
23179: LD_VAR 0 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 3
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 3
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PPUSH
23209: CALL_OW 69
23213: ST_TO_ADDR
// for i in mines do
23214: LD_ADDR_VAR 0 4
23218: PUSH
23219: LD_VAR 0 2
23223: PUSH
23224: FOR_IN
23225: IFFALSE 23313
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23227: LD_VAR 0 4
23231: PUSH
23232: LD_INT 1
23234: ARRAY
23235: PPUSH
23236: LD_VAR 0 4
23240: PUSH
23241: LD_INT 2
23243: ARRAY
23244: PPUSH
23245: CALL_OW 458
23249: NOT
23250: IFFALSE 23254
// continue ;
23252: GO 23224
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23254: LD_VAR 0 4
23258: PUSH
23259: LD_INT 1
23261: ARRAY
23262: PPUSH
23263: LD_VAR 0 4
23267: PUSH
23268: LD_INT 2
23270: ARRAY
23271: PPUSH
23272: CALL_OW 428
23276: PUSH
23277: LD_VAR 0 5
23281: IN
23282: IFFALSE 23311
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23284: LD_VAR 0 4
23288: PUSH
23289: LD_INT 1
23291: ARRAY
23292: PPUSH
23293: LD_VAR 0 4
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: CALL_OW 456
// end ;
23311: GO 23224
23313: POP
23314: POP
// end ;
23315: LD_VAR 0 3
23319: RET
// export function Count ( array ) ; var i ; begin
23320: LD_INT 0
23322: PPUSH
23323: PPUSH
// result := 0 ;
23324: LD_ADDR_VAR 0 2
23328: PUSH
23329: LD_INT 0
23331: ST_TO_ADDR
// for i in array do
23332: LD_ADDR_VAR 0 3
23336: PUSH
23337: LD_VAR 0 1
23341: PUSH
23342: FOR_IN
23343: IFFALSE 23367
// if i then
23345: LD_VAR 0 3
23349: IFFALSE 23365
// result := result + 1 ;
23351: LD_ADDR_VAR 0 2
23355: PUSH
23356: LD_VAR 0 2
23360: PUSH
23361: LD_INT 1
23363: PLUS
23364: ST_TO_ADDR
23365: GO 23342
23367: POP
23368: POP
// end ;
23369: LD_VAR 0 2
23373: RET
// export function IsEmpty ( building ) ; begin
23374: LD_INT 0
23376: PPUSH
// if not building then
23377: LD_VAR 0 1
23381: NOT
23382: IFFALSE 23386
// exit ;
23384: GO 23429
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23386: LD_ADDR_VAR 0 2
23390: PUSH
23391: LD_VAR 0 1
23395: PUSH
23396: LD_INT 22
23398: PUSH
23399: LD_VAR 0 1
23403: PPUSH
23404: CALL_OW 255
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 58
23415: PUSH
23416: EMPTY
23417: LIST
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PPUSH
23423: CALL_OW 69
23427: IN
23428: ST_TO_ADDR
// end ;
23429: LD_VAR 0 2
23433: RET
// export function IsNotFull ( building ) ; begin
23434: LD_INT 0
23436: PPUSH
// if not building then
23437: LD_VAR 0 1
23441: NOT
23442: IFFALSE 23446
// exit ;
23444: GO 23465
// result := UnitsInside ( building ) < 6 ;
23446: LD_ADDR_VAR 0 2
23450: PUSH
23451: LD_VAR 0 1
23455: PPUSH
23456: CALL_OW 313
23460: PUSH
23461: LD_INT 6
23463: LESS
23464: ST_TO_ADDR
// end ;
23465: LD_VAR 0 2
23469: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23470: LD_INT 0
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
// tmp := [ ] ;
23476: LD_ADDR_VAR 0 3
23480: PUSH
23481: EMPTY
23482: ST_TO_ADDR
// list := [ ] ;
23483: LD_ADDR_VAR 0 5
23487: PUSH
23488: EMPTY
23489: ST_TO_ADDR
// for i = 16 to 25 do
23490: LD_ADDR_VAR 0 4
23494: PUSH
23495: DOUBLE
23496: LD_INT 16
23498: DEC
23499: ST_TO_ADDR
23500: LD_INT 25
23502: PUSH
23503: FOR_TO
23504: IFFALSE 23577
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23506: LD_ADDR_VAR 0 3
23510: PUSH
23511: LD_VAR 0 3
23515: PUSH
23516: LD_INT 22
23518: PUSH
23519: LD_VAR 0 1
23523: PPUSH
23524: CALL_OW 255
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 91
23535: PUSH
23536: LD_VAR 0 1
23540: PUSH
23541: LD_INT 6
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 30
23551: PUSH
23552: LD_VAR 0 4
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: PPUSH
23569: CALL_OW 69
23573: ADD
23574: ST_TO_ADDR
23575: GO 23503
23577: POP
23578: POP
// for i = 1 to tmp do
23579: LD_ADDR_VAR 0 4
23583: PUSH
23584: DOUBLE
23585: LD_INT 1
23587: DEC
23588: ST_TO_ADDR
23589: LD_VAR 0 3
23593: PUSH
23594: FOR_TO
23595: IFFALSE 23683
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23597: LD_ADDR_VAR 0 5
23601: PUSH
23602: LD_VAR 0 5
23606: PUSH
23607: LD_VAR 0 3
23611: PUSH
23612: LD_VAR 0 4
23616: ARRAY
23617: PPUSH
23618: CALL_OW 266
23622: PUSH
23623: LD_VAR 0 3
23627: PUSH
23628: LD_VAR 0 4
23632: ARRAY
23633: PPUSH
23634: CALL_OW 250
23638: PUSH
23639: LD_VAR 0 3
23643: PUSH
23644: LD_VAR 0 4
23648: ARRAY
23649: PPUSH
23650: CALL_OW 251
23654: PUSH
23655: LD_VAR 0 3
23659: PUSH
23660: LD_VAR 0 4
23664: ARRAY
23665: PPUSH
23666: CALL_OW 254
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: PUSH
23677: EMPTY
23678: LIST
23679: ADD
23680: ST_TO_ADDR
23681: GO 23594
23683: POP
23684: POP
// result := list ;
23685: LD_ADDR_VAR 0 2
23689: PUSH
23690: LD_VAR 0 5
23694: ST_TO_ADDR
// end ;
23695: LD_VAR 0 2
23699: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23700: LD_INT 0
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
// if not factory then
23709: LD_VAR 0 1
23713: NOT
23714: IFFALSE 23718
// exit ;
23716: GO 24311
// if control = control_apeman then
23718: LD_VAR 0 4
23722: PUSH
23723: LD_INT 5
23725: EQUAL
23726: IFFALSE 23835
// begin tmp := UnitsInside ( factory ) ;
23728: LD_ADDR_VAR 0 8
23732: PUSH
23733: LD_VAR 0 1
23737: PPUSH
23738: CALL_OW 313
23742: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23743: LD_VAR 0 8
23747: PPUSH
23748: LD_INT 25
23750: PUSH
23751: LD_INT 12
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PPUSH
23758: CALL_OW 72
23762: NOT
23763: IFFALSE 23773
// control := control_manual ;
23765: LD_ADDR_VAR 0 4
23769: PUSH
23770: LD_INT 1
23772: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23773: LD_ADDR_VAR 0 8
23777: PUSH
23778: LD_VAR 0 1
23782: PPUSH
23783: CALL 23470 0 1
23787: ST_TO_ADDR
// if tmp then
23788: LD_VAR 0 8
23792: IFFALSE 23835
// begin for i in tmp do
23794: LD_ADDR_VAR 0 7
23798: PUSH
23799: LD_VAR 0 8
23803: PUSH
23804: FOR_IN
23805: IFFALSE 23833
// if i [ 1 ] = b_ext_radio then
23807: LD_VAR 0 7
23811: PUSH
23812: LD_INT 1
23814: ARRAY
23815: PUSH
23816: LD_INT 22
23818: EQUAL
23819: IFFALSE 23831
// begin control := control_remote ;
23821: LD_ADDR_VAR 0 4
23825: PUSH
23826: LD_INT 2
23828: ST_TO_ADDR
// break ;
23829: GO 23833
// end ;
23831: GO 23804
23833: POP
23834: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23835: LD_VAR 0 1
23839: PPUSH
23840: LD_VAR 0 2
23844: PPUSH
23845: LD_VAR 0 3
23849: PPUSH
23850: LD_VAR 0 4
23854: PPUSH
23855: LD_VAR 0 5
23859: PPUSH
23860: CALL_OW 448
23864: IFFALSE 23899
// begin result := [ chassis , engine , control , weapon ] ;
23866: LD_ADDR_VAR 0 6
23870: PUSH
23871: LD_VAR 0 2
23875: PUSH
23876: LD_VAR 0 3
23880: PUSH
23881: LD_VAR 0 4
23885: PUSH
23886: LD_VAR 0 5
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: ST_TO_ADDR
// exit ;
23897: GO 24311
// end ; _chassis := AvailableChassisList ( factory ) ;
23899: LD_ADDR_VAR 0 9
23903: PUSH
23904: LD_VAR 0 1
23908: PPUSH
23909: CALL_OW 475
23913: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23914: LD_ADDR_VAR 0 11
23918: PUSH
23919: LD_VAR 0 1
23923: PPUSH
23924: CALL_OW 476
23928: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23929: LD_ADDR_VAR 0 12
23933: PUSH
23934: LD_VAR 0 1
23938: PPUSH
23939: CALL_OW 477
23943: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23944: LD_ADDR_VAR 0 10
23948: PUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: CALL_OW 478
23958: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23959: LD_VAR 0 9
23963: NOT
23964: PUSH
23965: LD_VAR 0 11
23969: NOT
23970: OR
23971: PUSH
23972: LD_VAR 0 12
23976: NOT
23977: OR
23978: PUSH
23979: LD_VAR 0 10
23983: NOT
23984: OR
23985: IFFALSE 24020
// begin result := [ chassis , engine , control , weapon ] ;
23987: LD_ADDR_VAR 0 6
23991: PUSH
23992: LD_VAR 0 2
23996: PUSH
23997: LD_VAR 0 3
24001: PUSH
24002: LD_VAR 0 4
24006: PUSH
24007: LD_VAR 0 5
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: ST_TO_ADDR
// exit ;
24018: GO 24311
// end ; if not chassis in _chassis then
24020: LD_VAR 0 2
24024: PUSH
24025: LD_VAR 0 9
24029: IN
24030: NOT
24031: IFFALSE 24057
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24033: LD_ADDR_VAR 0 2
24037: PUSH
24038: LD_VAR 0 9
24042: PUSH
24043: LD_INT 1
24045: PPUSH
24046: LD_VAR 0 9
24050: PPUSH
24051: CALL_OW 12
24055: ARRAY
24056: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24057: LD_VAR 0 2
24061: PPUSH
24062: LD_VAR 0 3
24066: PPUSH
24067: CALL 24316 0 2
24071: NOT
24072: IFFALSE 24131
// repeat engine := _engine [ 1 ] ;
24074: LD_ADDR_VAR 0 3
24078: PUSH
24079: LD_VAR 0 11
24083: PUSH
24084: LD_INT 1
24086: ARRAY
24087: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24088: LD_ADDR_VAR 0 11
24092: PUSH
24093: LD_VAR 0 11
24097: PPUSH
24098: LD_INT 1
24100: PPUSH
24101: CALL_OW 3
24105: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24106: LD_VAR 0 2
24110: PPUSH
24111: LD_VAR 0 3
24115: PPUSH
24116: CALL 24316 0 2
24120: PUSH
24121: LD_VAR 0 11
24125: PUSH
24126: EMPTY
24127: EQUAL
24128: OR
24129: IFFALSE 24074
// if not control in _control then
24131: LD_VAR 0 4
24135: PUSH
24136: LD_VAR 0 12
24140: IN
24141: NOT
24142: IFFALSE 24168
// control := _control [ rand ( 1 , _control ) ] ;
24144: LD_ADDR_VAR 0 4
24148: PUSH
24149: LD_VAR 0 12
24153: PUSH
24154: LD_INT 1
24156: PPUSH
24157: LD_VAR 0 12
24161: PPUSH
24162: CALL_OW 12
24166: ARRAY
24167: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24168: LD_VAR 0 2
24172: PPUSH
24173: LD_VAR 0 5
24177: PPUSH
24178: CALL 24536 0 2
24182: NOT
24183: IFFALSE 24242
// repeat weapon := _weapon [ 1 ] ;
24185: LD_ADDR_VAR 0 5
24189: PUSH
24190: LD_VAR 0 10
24194: PUSH
24195: LD_INT 1
24197: ARRAY
24198: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24199: LD_ADDR_VAR 0 10
24203: PUSH
24204: LD_VAR 0 10
24208: PPUSH
24209: LD_INT 1
24211: PPUSH
24212: CALL_OW 3
24216: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24217: LD_VAR 0 2
24221: PPUSH
24222: LD_VAR 0 5
24226: PPUSH
24227: CALL 24536 0 2
24231: PUSH
24232: LD_VAR 0 10
24236: PUSH
24237: EMPTY
24238: EQUAL
24239: OR
24240: IFFALSE 24185
// result := [ ] ;
24242: LD_ADDR_VAR 0 6
24246: PUSH
24247: EMPTY
24248: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24249: LD_VAR 0 1
24253: PPUSH
24254: LD_VAR 0 2
24258: PPUSH
24259: LD_VAR 0 3
24263: PPUSH
24264: LD_VAR 0 4
24268: PPUSH
24269: LD_VAR 0 5
24273: PPUSH
24274: CALL_OW 448
24278: IFFALSE 24311
// result := [ chassis , engine , control , weapon ] ;
24280: LD_ADDR_VAR 0 6
24284: PUSH
24285: LD_VAR 0 2
24289: PUSH
24290: LD_VAR 0 3
24294: PUSH
24295: LD_VAR 0 4
24299: PUSH
24300: LD_VAR 0 5
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: ST_TO_ADDR
// end ;
24311: LD_VAR 0 6
24315: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24316: LD_INT 0
24318: PPUSH
// if not chassis or not engine then
24319: LD_VAR 0 1
24323: NOT
24324: PUSH
24325: LD_VAR 0 2
24329: NOT
24330: OR
24331: IFFALSE 24335
// exit ;
24333: GO 24531
// case engine of engine_solar :
24335: LD_VAR 0 2
24339: PUSH
24340: LD_INT 2
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24386
24348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24349: LD_ADDR_VAR 0 3
24353: PUSH
24354: LD_INT 11
24356: PUSH
24357: LD_INT 12
24359: PUSH
24360: LD_INT 13
24362: PUSH
24363: LD_INT 14
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: LD_INT 3
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: ST_TO_ADDR
24384: GO 24515
24386: LD_INT 1
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24456
24394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24395: LD_ADDR_VAR 0 3
24399: PUSH
24400: LD_INT 11
24402: PUSH
24403: LD_INT 12
24405: PUSH
24406: LD_INT 13
24408: PUSH
24409: LD_INT 14
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 3
24420: PUSH
24421: LD_INT 4
24423: PUSH
24424: LD_INT 5
24426: PUSH
24427: LD_INT 21
24429: PUSH
24430: LD_INT 23
24432: PUSH
24433: LD_INT 22
24435: PUSH
24436: LD_INT 24
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: ST_TO_ADDR
24454: GO 24515
24456: LD_INT 3
24458: DOUBLE
24459: EQUAL
24460: IFTRUE 24464
24462: GO 24514
24464: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24465: LD_ADDR_VAR 0 3
24469: PUSH
24470: LD_INT 13
24472: PUSH
24473: LD_INT 14
24475: PUSH
24476: LD_INT 2
24478: PUSH
24479: LD_INT 3
24481: PUSH
24482: LD_INT 4
24484: PUSH
24485: LD_INT 5
24487: PUSH
24488: LD_INT 21
24490: PUSH
24491: LD_INT 22
24493: PUSH
24494: LD_INT 23
24496: PUSH
24497: LD_INT 24
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: ST_TO_ADDR
24512: GO 24515
24514: POP
// result := ( chassis in result ) ;
24515: LD_ADDR_VAR 0 3
24519: PUSH
24520: LD_VAR 0 1
24524: PUSH
24525: LD_VAR 0 3
24529: IN
24530: ST_TO_ADDR
// end ;
24531: LD_VAR 0 3
24535: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24536: LD_INT 0
24538: PPUSH
// if not chassis or not weapon then
24539: LD_VAR 0 1
24543: NOT
24544: PUSH
24545: LD_VAR 0 2
24549: NOT
24550: OR
24551: IFFALSE 24555
// exit ;
24553: GO 25581
// case weapon of us_machine_gun :
24555: LD_VAR 0 2
24559: PUSH
24560: LD_INT 2
24562: DOUBLE
24563: EQUAL
24564: IFTRUE 24568
24566: GO 24598
24568: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24569: LD_ADDR_VAR 0 3
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: LD_INT 2
24579: PUSH
24580: LD_INT 3
24582: PUSH
24583: LD_INT 4
24585: PUSH
24586: LD_INT 5
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: ST_TO_ADDR
24596: GO 25565
24598: LD_INT 3
24600: DOUBLE
24601: EQUAL
24602: IFTRUE 24606
24604: GO 24636
24606: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24607: LD_ADDR_VAR 0 3
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: LD_INT 3
24620: PUSH
24621: LD_INT 4
24623: PUSH
24624: LD_INT 5
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: ST_TO_ADDR
24634: GO 25565
24636: LD_INT 11
24638: DOUBLE
24639: EQUAL
24640: IFTRUE 24644
24642: GO 24674
24644: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: LD_INT 2
24655: PUSH
24656: LD_INT 3
24658: PUSH
24659: LD_INT 4
24661: PUSH
24662: LD_INT 5
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: ST_TO_ADDR
24672: GO 25565
24674: LD_INT 4
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24708
24682: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: LD_INT 4
24696: PUSH
24697: LD_INT 5
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: ST_TO_ADDR
24706: GO 25565
24708: LD_INT 5
24710: DOUBLE
24711: EQUAL
24712: IFTRUE 24716
24714: GO 24742
24716: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24717: LD_ADDR_VAR 0 3
24721: PUSH
24722: LD_INT 2
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: LD_INT 4
24730: PUSH
24731: LD_INT 5
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: ST_TO_ADDR
24740: GO 25565
24742: LD_INT 9
24744: DOUBLE
24745: EQUAL
24746: IFTRUE 24750
24748: GO 24776
24750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24751: LD_ADDR_VAR 0 3
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: LD_INT 3
24761: PUSH
24762: LD_INT 4
24764: PUSH
24765: LD_INT 5
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: ST_TO_ADDR
24774: GO 25565
24776: LD_INT 7
24778: DOUBLE
24779: EQUAL
24780: IFTRUE 24784
24782: GO 24810
24784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24785: LD_ADDR_VAR 0 3
24789: PUSH
24790: LD_INT 2
24792: PUSH
24793: LD_INT 3
24795: PUSH
24796: LD_INT 4
24798: PUSH
24799: LD_INT 5
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: ST_TO_ADDR
24808: GO 25565
24810: LD_INT 12
24812: DOUBLE
24813: EQUAL
24814: IFTRUE 24818
24816: GO 24844
24818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24819: LD_ADDR_VAR 0 3
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: LD_INT 3
24829: PUSH
24830: LD_INT 4
24832: PUSH
24833: LD_INT 5
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: ST_TO_ADDR
24842: GO 25565
24844: LD_INT 13
24846: DOUBLE
24847: EQUAL
24848: IFTRUE 24852
24850: GO 24878
24852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24853: LD_ADDR_VAR 0 3
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: LD_INT 4
24866: PUSH
24867: LD_INT 5
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: ST_TO_ADDR
24876: GO 25565
24878: LD_INT 14
24880: DOUBLE
24881: EQUAL
24882: IFTRUE 24886
24884: GO 24904
24886: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24887: LD_ADDR_VAR 0 3
24891: PUSH
24892: LD_INT 4
24894: PUSH
24895: LD_INT 5
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: ST_TO_ADDR
24902: GO 25565
24904: LD_INT 6
24906: DOUBLE
24907: EQUAL
24908: IFTRUE 24912
24910: GO 24930
24912: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24913: LD_ADDR_VAR 0 3
24917: PUSH
24918: LD_INT 4
24920: PUSH
24921: LD_INT 5
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: ST_TO_ADDR
24928: GO 25565
24930: LD_INT 10
24932: DOUBLE
24933: EQUAL
24934: IFTRUE 24938
24936: GO 24956
24938: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24939: LD_ADDR_VAR 0 3
24943: PUSH
24944: LD_INT 4
24946: PUSH
24947: LD_INT 5
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: ST_TO_ADDR
24954: GO 25565
24956: LD_INT 22
24958: DOUBLE
24959: EQUAL
24960: IFTRUE 24964
24962: GO 24990
24964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_INT 11
24972: PUSH
24973: LD_INT 12
24975: PUSH
24976: LD_INT 13
24978: PUSH
24979: LD_INT 14
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: ST_TO_ADDR
24988: GO 25565
24990: LD_INT 23
24992: DOUBLE
24993: EQUAL
24994: IFTRUE 24998
24996: GO 25024
24998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_INT 11
25006: PUSH
25007: LD_INT 12
25009: PUSH
25010: LD_INT 13
25012: PUSH
25013: LD_INT 14
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: ST_TO_ADDR
25022: GO 25565
25024: LD_INT 24
25026: DOUBLE
25027: EQUAL
25028: IFTRUE 25032
25030: GO 25058
25032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25033: LD_ADDR_VAR 0 3
25037: PUSH
25038: LD_INT 11
25040: PUSH
25041: LD_INT 12
25043: PUSH
25044: LD_INT 13
25046: PUSH
25047: LD_INT 14
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: ST_TO_ADDR
25056: GO 25565
25058: LD_INT 30
25060: DOUBLE
25061: EQUAL
25062: IFTRUE 25066
25064: GO 25092
25066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25067: LD_ADDR_VAR 0 3
25071: PUSH
25072: LD_INT 11
25074: PUSH
25075: LD_INT 12
25077: PUSH
25078: LD_INT 13
25080: PUSH
25081: LD_INT 14
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: ST_TO_ADDR
25090: GO 25565
25092: LD_INT 25
25094: DOUBLE
25095: EQUAL
25096: IFTRUE 25100
25098: GO 25118
25100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25101: LD_ADDR_VAR 0 3
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: LD_INT 14
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: ST_TO_ADDR
25116: GO 25565
25118: LD_INT 27
25120: DOUBLE
25121: EQUAL
25122: IFTRUE 25126
25124: GO 25144
25126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25127: LD_ADDR_VAR 0 3
25131: PUSH
25132: LD_INT 13
25134: PUSH
25135: LD_INT 14
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: ST_TO_ADDR
25142: GO 25565
25144: LD_INT 28
25146: DOUBLE
25147: EQUAL
25148: IFTRUE 25152
25150: GO 25170
25152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25153: LD_ADDR_VAR 0 3
25157: PUSH
25158: LD_INT 13
25160: PUSH
25161: LD_INT 14
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: ST_TO_ADDR
25168: GO 25565
25170: LD_INT 29
25172: DOUBLE
25173: EQUAL
25174: IFTRUE 25178
25176: GO 25196
25178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25179: LD_ADDR_VAR 0 3
25183: PUSH
25184: LD_INT 13
25186: PUSH
25187: LD_INT 14
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: ST_TO_ADDR
25194: GO 25565
25196: LD_INT 31
25198: DOUBLE
25199: EQUAL
25200: IFTRUE 25204
25202: GO 25222
25204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25205: LD_ADDR_VAR 0 3
25209: PUSH
25210: LD_INT 13
25212: PUSH
25213: LD_INT 14
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: ST_TO_ADDR
25220: GO 25565
25222: LD_INT 26
25224: DOUBLE
25225: EQUAL
25226: IFTRUE 25230
25228: GO 25248
25230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25231: LD_ADDR_VAR 0 3
25235: PUSH
25236: LD_INT 13
25238: PUSH
25239: LD_INT 14
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: ST_TO_ADDR
25246: GO 25565
25248: LD_INT 42
25250: DOUBLE
25251: EQUAL
25252: IFTRUE 25256
25254: GO 25282
25256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: LD_INT 21
25264: PUSH
25265: LD_INT 22
25267: PUSH
25268: LD_INT 23
25270: PUSH
25271: LD_INT 24
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: ST_TO_ADDR
25280: GO 25565
25282: LD_INT 43
25284: DOUBLE
25285: EQUAL
25286: IFTRUE 25290
25288: GO 25316
25290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25291: LD_ADDR_VAR 0 3
25295: PUSH
25296: LD_INT 21
25298: PUSH
25299: LD_INT 22
25301: PUSH
25302: LD_INT 23
25304: PUSH
25305: LD_INT 24
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
25314: GO 25565
25316: LD_INT 44
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25350
25324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_INT 21
25332: PUSH
25333: LD_INT 22
25335: PUSH
25336: LD_INT 23
25338: PUSH
25339: LD_INT 24
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: ST_TO_ADDR
25348: GO 25565
25350: LD_INT 45
25352: DOUBLE
25353: EQUAL
25354: IFTRUE 25358
25356: GO 25384
25358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25359: LD_ADDR_VAR 0 3
25363: PUSH
25364: LD_INT 21
25366: PUSH
25367: LD_INT 22
25369: PUSH
25370: LD_INT 23
25372: PUSH
25373: LD_INT 24
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: ST_TO_ADDR
25382: GO 25565
25384: LD_INT 49
25386: DOUBLE
25387: EQUAL
25388: IFTRUE 25392
25390: GO 25418
25392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25393: LD_ADDR_VAR 0 3
25397: PUSH
25398: LD_INT 21
25400: PUSH
25401: LD_INT 22
25403: PUSH
25404: LD_INT 23
25406: PUSH
25407: LD_INT 24
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: ST_TO_ADDR
25416: GO 25565
25418: LD_INT 51
25420: DOUBLE
25421: EQUAL
25422: IFTRUE 25426
25424: GO 25452
25426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25427: LD_ADDR_VAR 0 3
25431: PUSH
25432: LD_INT 21
25434: PUSH
25435: LD_INT 22
25437: PUSH
25438: LD_INT 23
25440: PUSH
25441: LD_INT 24
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
25450: GO 25565
25452: LD_INT 52
25454: DOUBLE
25455: EQUAL
25456: IFTRUE 25460
25458: GO 25486
25460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_INT 21
25468: PUSH
25469: LD_INT 22
25471: PUSH
25472: LD_INT 23
25474: PUSH
25475: LD_INT 24
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: ST_TO_ADDR
25484: GO 25565
25486: LD_INT 53
25488: DOUBLE
25489: EQUAL
25490: IFTRUE 25494
25492: GO 25512
25494: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 23
25502: PUSH
25503: LD_INT 24
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: ST_TO_ADDR
25510: GO 25565
25512: LD_INT 46
25514: DOUBLE
25515: EQUAL
25516: IFTRUE 25520
25518: GO 25538
25520: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25521: LD_ADDR_VAR 0 3
25525: PUSH
25526: LD_INT 23
25528: PUSH
25529: LD_INT 24
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: ST_TO_ADDR
25536: GO 25565
25538: LD_INT 47
25540: DOUBLE
25541: EQUAL
25542: IFTRUE 25546
25544: GO 25564
25546: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: LD_INT 23
25554: PUSH
25555: LD_INT 24
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: ST_TO_ADDR
25562: GO 25565
25564: POP
// result := ( chassis in result ) ;
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_VAR 0 1
25574: PUSH
25575: LD_VAR 0 3
25579: IN
25580: ST_TO_ADDR
// end ;
25581: LD_VAR 0 3
25585: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25586: LD_INT 0
25588: PPUSH
25589: PPUSH
25590: PPUSH
25591: PPUSH
25592: PPUSH
25593: PPUSH
25594: PPUSH
// result := array ;
25595: LD_ADDR_VAR 0 5
25599: PUSH
25600: LD_VAR 0 1
25604: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25605: LD_VAR 0 1
25609: NOT
25610: PUSH
25611: LD_VAR 0 2
25615: NOT
25616: OR
25617: PUSH
25618: LD_VAR 0 3
25622: NOT
25623: OR
25624: PUSH
25625: LD_VAR 0 2
25629: PUSH
25630: LD_VAR 0 1
25634: GREATER
25635: OR
25636: PUSH
25637: LD_VAR 0 3
25641: PUSH
25642: LD_VAR 0 1
25646: GREATER
25647: OR
25648: IFFALSE 25652
// exit ;
25650: GO 25948
// if direction then
25652: LD_VAR 0 4
25656: IFFALSE 25720
// begin d := 1 ;
25658: LD_ADDR_VAR 0 9
25662: PUSH
25663: LD_INT 1
25665: ST_TO_ADDR
// if i_from > i_to then
25666: LD_VAR 0 2
25670: PUSH
25671: LD_VAR 0 3
25675: GREATER
25676: IFFALSE 25702
// length := ( array - i_from ) + i_to else
25678: LD_ADDR_VAR 0 11
25682: PUSH
25683: LD_VAR 0 1
25687: PUSH
25688: LD_VAR 0 2
25692: MINUS
25693: PUSH
25694: LD_VAR 0 3
25698: PLUS
25699: ST_TO_ADDR
25700: GO 25718
// length := i_to - i_from ;
25702: LD_ADDR_VAR 0 11
25706: PUSH
25707: LD_VAR 0 3
25711: PUSH
25712: LD_VAR 0 2
25716: MINUS
25717: ST_TO_ADDR
// end else
25718: GO 25781
// begin d := - 1 ;
25720: LD_ADDR_VAR 0 9
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: ST_TO_ADDR
// if i_from > i_to then
25729: LD_VAR 0 2
25733: PUSH
25734: LD_VAR 0 3
25738: GREATER
25739: IFFALSE 25759
// length := i_from - i_to else
25741: LD_ADDR_VAR 0 11
25745: PUSH
25746: LD_VAR 0 2
25750: PUSH
25751: LD_VAR 0 3
25755: MINUS
25756: ST_TO_ADDR
25757: GO 25781
// length := ( array - i_to ) + i_from ;
25759: LD_ADDR_VAR 0 11
25763: PUSH
25764: LD_VAR 0 1
25768: PUSH
25769: LD_VAR 0 3
25773: MINUS
25774: PUSH
25775: LD_VAR 0 2
25779: PLUS
25780: ST_TO_ADDR
// end ; if not length then
25781: LD_VAR 0 11
25785: NOT
25786: IFFALSE 25790
// exit ;
25788: GO 25948
// tmp := array ;
25790: LD_ADDR_VAR 0 10
25794: PUSH
25795: LD_VAR 0 1
25799: ST_TO_ADDR
// for i = 1 to length do
25800: LD_ADDR_VAR 0 6
25804: PUSH
25805: DOUBLE
25806: LD_INT 1
25808: DEC
25809: ST_TO_ADDR
25810: LD_VAR 0 11
25814: PUSH
25815: FOR_TO
25816: IFFALSE 25936
// begin for j = 1 to array do
25818: LD_ADDR_VAR 0 7
25822: PUSH
25823: DOUBLE
25824: LD_INT 1
25826: DEC
25827: ST_TO_ADDR
25828: LD_VAR 0 1
25832: PUSH
25833: FOR_TO
25834: IFFALSE 25922
// begin k := j + d ;
25836: LD_ADDR_VAR 0 8
25840: PUSH
25841: LD_VAR 0 7
25845: PUSH
25846: LD_VAR 0 9
25850: PLUS
25851: ST_TO_ADDR
// if k > array then
25852: LD_VAR 0 8
25856: PUSH
25857: LD_VAR 0 1
25861: GREATER
25862: IFFALSE 25872
// k := 1 ;
25864: LD_ADDR_VAR 0 8
25868: PUSH
25869: LD_INT 1
25871: ST_TO_ADDR
// if not k then
25872: LD_VAR 0 8
25876: NOT
25877: IFFALSE 25889
// k := array ;
25879: LD_ADDR_VAR 0 8
25883: PUSH
25884: LD_VAR 0 1
25888: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25889: LD_ADDR_VAR 0 10
25893: PUSH
25894: LD_VAR 0 10
25898: PPUSH
25899: LD_VAR 0 8
25903: PPUSH
25904: LD_VAR 0 1
25908: PUSH
25909: LD_VAR 0 7
25913: ARRAY
25914: PPUSH
25915: CALL_OW 1
25919: ST_TO_ADDR
// end ;
25920: GO 25833
25922: POP
25923: POP
// array := tmp ;
25924: LD_ADDR_VAR 0 1
25928: PUSH
25929: LD_VAR 0 10
25933: ST_TO_ADDR
// end ;
25934: GO 25815
25936: POP
25937: POP
// result := array ;
25938: LD_ADDR_VAR 0 5
25942: PUSH
25943: LD_VAR 0 1
25947: ST_TO_ADDR
// end ;
25948: LD_VAR 0 5
25952: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25953: LD_INT 0
25955: PPUSH
25956: PPUSH
// result := 0 ;
25957: LD_ADDR_VAR 0 3
25961: PUSH
25962: LD_INT 0
25964: ST_TO_ADDR
// if not array or not value in array then
25965: LD_VAR 0 1
25969: NOT
25970: PUSH
25971: LD_VAR 0 2
25975: PUSH
25976: LD_VAR 0 1
25980: IN
25981: NOT
25982: OR
25983: IFFALSE 25987
// exit ;
25985: GO 26041
// for i = 1 to array do
25987: LD_ADDR_VAR 0 4
25991: PUSH
25992: DOUBLE
25993: LD_INT 1
25995: DEC
25996: ST_TO_ADDR
25997: LD_VAR 0 1
26001: PUSH
26002: FOR_TO
26003: IFFALSE 26039
// if value = array [ i ] then
26005: LD_VAR 0 2
26009: PUSH
26010: LD_VAR 0 1
26014: PUSH
26015: LD_VAR 0 4
26019: ARRAY
26020: EQUAL
26021: IFFALSE 26037
// begin result := i ;
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: LD_VAR 0 4
26032: ST_TO_ADDR
// exit ;
26033: POP
26034: POP
26035: GO 26041
// end ;
26037: GO 26002
26039: POP
26040: POP
// end ;
26041: LD_VAR 0 3
26045: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26046: LD_INT 0
26048: PPUSH
// vc_chassis := chassis ;
26049: LD_ADDR_OWVAR 37
26053: PUSH
26054: LD_VAR 0 1
26058: ST_TO_ADDR
// vc_engine := engine ;
26059: LD_ADDR_OWVAR 39
26063: PUSH
26064: LD_VAR 0 2
26068: ST_TO_ADDR
// vc_control := control ;
26069: LD_ADDR_OWVAR 38
26073: PUSH
26074: LD_VAR 0 3
26078: ST_TO_ADDR
// vc_weapon := weapon ;
26079: LD_ADDR_OWVAR 40
26083: PUSH
26084: LD_VAR 0 4
26088: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26089: LD_ADDR_OWVAR 41
26093: PUSH
26094: LD_VAR 0 5
26098: ST_TO_ADDR
// end ;
26099: LD_VAR 0 6
26103: RET
// export function WantPlant ( unit ) ; var task ; begin
26104: LD_INT 0
26106: PPUSH
26107: PPUSH
// result := false ;
26108: LD_ADDR_VAR 0 2
26112: PUSH
26113: LD_INT 0
26115: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26116: LD_ADDR_VAR 0 3
26120: PUSH
26121: LD_VAR 0 1
26125: PPUSH
26126: CALL_OW 437
26130: ST_TO_ADDR
// if task then
26131: LD_VAR 0 3
26135: IFFALSE 26163
// if task [ 1 ] [ 1 ] = p then
26137: LD_VAR 0 3
26141: PUSH
26142: LD_INT 1
26144: ARRAY
26145: PUSH
26146: LD_INT 1
26148: ARRAY
26149: PUSH
26150: LD_STRING p
26152: EQUAL
26153: IFFALSE 26163
// result := true ;
26155: LD_ADDR_VAR 0 2
26159: PUSH
26160: LD_INT 1
26162: ST_TO_ADDR
// end ;
26163: LD_VAR 0 2
26167: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26168: LD_INT 0
26170: PPUSH
26171: PPUSH
26172: PPUSH
26173: PPUSH
// if pos < 1 then
26174: LD_VAR 0 2
26178: PUSH
26179: LD_INT 1
26181: LESS
26182: IFFALSE 26186
// exit ;
26184: GO 26489
// if pos = 1 then
26186: LD_VAR 0 2
26190: PUSH
26191: LD_INT 1
26193: EQUAL
26194: IFFALSE 26227
// result := Replace ( arr , pos [ 1 ] , value ) else
26196: LD_ADDR_VAR 0 4
26200: PUSH
26201: LD_VAR 0 1
26205: PPUSH
26206: LD_VAR 0 2
26210: PUSH
26211: LD_INT 1
26213: ARRAY
26214: PPUSH
26215: LD_VAR 0 3
26219: PPUSH
26220: CALL_OW 1
26224: ST_TO_ADDR
26225: GO 26489
// begin tmp := arr ;
26227: LD_ADDR_VAR 0 6
26231: PUSH
26232: LD_VAR 0 1
26236: ST_TO_ADDR
// s_arr := [ tmp ] ;
26237: LD_ADDR_VAR 0 7
26241: PUSH
26242: LD_VAR 0 6
26246: PUSH
26247: EMPTY
26248: LIST
26249: ST_TO_ADDR
// for i = 1 to pos - 1 do
26250: LD_ADDR_VAR 0 5
26254: PUSH
26255: DOUBLE
26256: LD_INT 1
26258: DEC
26259: ST_TO_ADDR
26260: LD_VAR 0 2
26264: PUSH
26265: LD_INT 1
26267: MINUS
26268: PUSH
26269: FOR_TO
26270: IFFALSE 26315
// begin tmp := tmp [ pos [ i ] ] ;
26272: LD_ADDR_VAR 0 6
26276: PUSH
26277: LD_VAR 0 6
26281: PUSH
26282: LD_VAR 0 2
26286: PUSH
26287: LD_VAR 0 5
26291: ARRAY
26292: ARRAY
26293: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26294: LD_ADDR_VAR 0 7
26298: PUSH
26299: LD_VAR 0 7
26303: PUSH
26304: LD_VAR 0 6
26308: PUSH
26309: EMPTY
26310: LIST
26311: ADD
26312: ST_TO_ADDR
// end ;
26313: GO 26269
26315: POP
26316: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26317: LD_ADDR_VAR 0 6
26321: PUSH
26322: LD_VAR 0 6
26326: PPUSH
26327: LD_VAR 0 2
26331: PUSH
26332: LD_VAR 0 2
26336: ARRAY
26337: PPUSH
26338: LD_VAR 0 3
26342: PPUSH
26343: CALL_OW 1
26347: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26348: LD_ADDR_VAR 0 7
26352: PUSH
26353: LD_VAR 0 7
26357: PPUSH
26358: LD_VAR 0 7
26362: PPUSH
26363: LD_VAR 0 6
26367: PPUSH
26368: CALL_OW 1
26372: ST_TO_ADDR
// for i = s_arr downto 2 do
26373: LD_ADDR_VAR 0 5
26377: PUSH
26378: DOUBLE
26379: LD_VAR 0 7
26383: INC
26384: ST_TO_ADDR
26385: LD_INT 2
26387: PUSH
26388: FOR_DOWNTO
26389: IFFALSE 26473
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26391: LD_ADDR_VAR 0 6
26395: PUSH
26396: LD_VAR 0 7
26400: PUSH
26401: LD_VAR 0 5
26405: PUSH
26406: LD_INT 1
26408: MINUS
26409: ARRAY
26410: PPUSH
26411: LD_VAR 0 2
26415: PUSH
26416: LD_VAR 0 5
26420: PUSH
26421: LD_INT 1
26423: MINUS
26424: ARRAY
26425: PPUSH
26426: LD_VAR 0 7
26430: PUSH
26431: LD_VAR 0 5
26435: ARRAY
26436: PPUSH
26437: CALL_OW 1
26441: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26442: LD_ADDR_VAR 0 7
26446: PUSH
26447: LD_VAR 0 7
26451: PPUSH
26452: LD_VAR 0 5
26456: PUSH
26457: LD_INT 1
26459: MINUS
26460: PPUSH
26461: LD_VAR 0 6
26465: PPUSH
26466: CALL_OW 1
26470: ST_TO_ADDR
// end ;
26471: GO 26388
26473: POP
26474: POP
// result := s_arr [ 1 ] ;
26475: LD_ADDR_VAR 0 4
26479: PUSH
26480: LD_VAR 0 7
26484: PUSH
26485: LD_INT 1
26487: ARRAY
26488: ST_TO_ADDR
// end ; end ;
26489: LD_VAR 0 4
26493: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26494: LD_INT 0
26496: PPUSH
26497: PPUSH
// if not list then
26498: LD_VAR 0 1
26502: NOT
26503: IFFALSE 26507
// exit ;
26505: GO 26598
// i := list [ pos1 ] ;
26507: LD_ADDR_VAR 0 5
26511: PUSH
26512: LD_VAR 0 1
26516: PUSH
26517: LD_VAR 0 2
26521: ARRAY
26522: ST_TO_ADDR
// if not i then
26523: LD_VAR 0 5
26527: NOT
26528: IFFALSE 26532
// exit ;
26530: GO 26598
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26532: LD_ADDR_VAR 0 1
26536: PUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: LD_VAR 0 2
26546: PPUSH
26547: LD_VAR 0 1
26551: PUSH
26552: LD_VAR 0 3
26556: ARRAY
26557: PPUSH
26558: CALL_OW 1
26562: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26563: LD_ADDR_VAR 0 1
26567: PUSH
26568: LD_VAR 0 1
26572: PPUSH
26573: LD_VAR 0 3
26577: PPUSH
26578: LD_VAR 0 5
26582: PPUSH
26583: CALL_OW 1
26587: ST_TO_ADDR
// result := list ;
26588: LD_ADDR_VAR 0 4
26592: PUSH
26593: LD_VAR 0 1
26597: ST_TO_ADDR
// end ;
26598: LD_VAR 0 4
26602: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26603: LD_INT 0
26605: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26606: LD_ADDR_VAR 0 5
26610: PUSH
26611: LD_VAR 0 1
26615: PPUSH
26616: CALL_OW 250
26620: PPUSH
26621: LD_VAR 0 1
26625: PPUSH
26626: CALL_OW 251
26630: PPUSH
26631: LD_VAR 0 2
26635: PPUSH
26636: LD_VAR 0 3
26640: PPUSH
26641: LD_VAR 0 4
26645: PPUSH
26646: CALL 26656 0 5
26650: ST_TO_ADDR
// end ;
26651: LD_VAR 0 5
26655: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26656: LD_INT 0
26658: PPUSH
26659: PPUSH
26660: PPUSH
26661: PPUSH
// if not list then
26662: LD_VAR 0 3
26666: NOT
26667: IFFALSE 26671
// exit ;
26669: GO 27059
// result := [ ] ;
26671: LD_ADDR_VAR 0 6
26675: PUSH
26676: EMPTY
26677: ST_TO_ADDR
// for i in list do
26678: LD_ADDR_VAR 0 7
26682: PUSH
26683: LD_VAR 0 3
26687: PUSH
26688: FOR_IN
26689: IFFALSE 26891
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26691: LD_ADDR_VAR 0 9
26695: PUSH
26696: LD_VAR 0 7
26700: PPUSH
26701: LD_VAR 0 1
26705: PPUSH
26706: LD_VAR 0 2
26710: PPUSH
26711: CALL_OW 297
26715: ST_TO_ADDR
// if not result then
26716: LD_VAR 0 6
26720: NOT
26721: IFFALSE 26747
// result := [ [ i , tmp ] ] else
26723: LD_ADDR_VAR 0 6
26727: PUSH
26728: LD_VAR 0 7
26732: PUSH
26733: LD_VAR 0 9
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: EMPTY
26743: LIST
26744: ST_TO_ADDR
26745: GO 26889
// begin if result [ result ] [ 2 ] < tmp then
26747: LD_VAR 0 6
26751: PUSH
26752: LD_VAR 0 6
26756: ARRAY
26757: PUSH
26758: LD_INT 2
26760: ARRAY
26761: PUSH
26762: LD_VAR 0 9
26766: LESS
26767: IFFALSE 26809
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26769: LD_ADDR_VAR 0 6
26773: PUSH
26774: LD_VAR 0 6
26778: PPUSH
26779: LD_VAR 0 6
26783: PUSH
26784: LD_INT 1
26786: PLUS
26787: PPUSH
26788: LD_VAR 0 7
26792: PUSH
26793: LD_VAR 0 9
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PPUSH
26802: CALL_OW 2
26806: ST_TO_ADDR
26807: GO 26889
// for j = 1 to result do
26809: LD_ADDR_VAR 0 8
26813: PUSH
26814: DOUBLE
26815: LD_INT 1
26817: DEC
26818: ST_TO_ADDR
26819: LD_VAR 0 6
26823: PUSH
26824: FOR_TO
26825: IFFALSE 26887
// begin if tmp < result [ j ] [ 2 ] then
26827: LD_VAR 0 9
26831: PUSH
26832: LD_VAR 0 6
26836: PUSH
26837: LD_VAR 0 8
26841: ARRAY
26842: PUSH
26843: LD_INT 2
26845: ARRAY
26846: LESS
26847: IFFALSE 26885
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26849: LD_ADDR_VAR 0 6
26853: PUSH
26854: LD_VAR 0 6
26858: PPUSH
26859: LD_VAR 0 8
26863: PPUSH
26864: LD_VAR 0 7
26868: PUSH
26869: LD_VAR 0 9
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 2
26882: ST_TO_ADDR
// break ;
26883: GO 26887
// end ; end ;
26885: GO 26824
26887: POP
26888: POP
// end ; end ;
26889: GO 26688
26891: POP
26892: POP
// if result and not asc then
26893: LD_VAR 0 6
26897: PUSH
26898: LD_VAR 0 4
26902: NOT
26903: AND
26904: IFFALSE 26979
// begin tmp := result ;
26906: LD_ADDR_VAR 0 9
26910: PUSH
26911: LD_VAR 0 6
26915: ST_TO_ADDR
// for i = tmp downto 1 do
26916: LD_ADDR_VAR 0 7
26920: PUSH
26921: DOUBLE
26922: LD_VAR 0 9
26926: INC
26927: ST_TO_ADDR
26928: LD_INT 1
26930: PUSH
26931: FOR_DOWNTO
26932: IFFALSE 26977
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26934: LD_ADDR_VAR 0 6
26938: PUSH
26939: LD_VAR 0 6
26943: PPUSH
26944: LD_VAR 0 9
26948: PUSH
26949: LD_VAR 0 7
26953: MINUS
26954: PUSH
26955: LD_INT 1
26957: PLUS
26958: PPUSH
26959: LD_VAR 0 9
26963: PUSH
26964: LD_VAR 0 7
26968: ARRAY
26969: PPUSH
26970: CALL_OW 1
26974: ST_TO_ADDR
26975: GO 26931
26977: POP
26978: POP
// end ; tmp := [ ] ;
26979: LD_ADDR_VAR 0 9
26983: PUSH
26984: EMPTY
26985: ST_TO_ADDR
// if mode then
26986: LD_VAR 0 5
26990: IFFALSE 27059
// begin for i = 1 to result do
26992: LD_ADDR_VAR 0 7
26996: PUSH
26997: DOUBLE
26998: LD_INT 1
27000: DEC
27001: ST_TO_ADDR
27002: LD_VAR 0 6
27006: PUSH
27007: FOR_TO
27008: IFFALSE 27047
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27010: LD_ADDR_VAR 0 9
27014: PUSH
27015: LD_VAR 0 9
27019: PPUSH
27020: LD_VAR 0 7
27024: PPUSH
27025: LD_VAR 0 6
27029: PUSH
27030: LD_VAR 0 7
27034: ARRAY
27035: PUSH
27036: LD_INT 1
27038: ARRAY
27039: PPUSH
27040: CALL_OW 1
27044: ST_TO_ADDR
27045: GO 27007
27047: POP
27048: POP
// result := tmp ;
27049: LD_ADDR_VAR 0 6
27053: PUSH
27054: LD_VAR 0 9
27058: ST_TO_ADDR
// end ; end ;
27059: LD_VAR 0 6
27063: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27064: LD_INT 0
27066: PPUSH
27067: PPUSH
27068: PPUSH
27069: PPUSH
27070: PPUSH
27071: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27072: LD_ADDR_VAR 0 5
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: EMPTY
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: ST_TO_ADDR
// if not x or not y then
27094: LD_VAR 0 2
27098: NOT
27099: PUSH
27100: LD_VAR 0 3
27104: NOT
27105: OR
27106: IFFALSE 27110
// exit ;
27108: GO 28756
// if not range then
27110: LD_VAR 0 4
27114: NOT
27115: IFFALSE 27125
// range := 10 ;
27117: LD_ADDR_VAR 0 4
27121: PUSH
27122: LD_INT 10
27124: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27125: LD_ADDR_VAR 0 8
27129: PUSH
27130: LD_INT 81
27132: PUSH
27133: LD_VAR 0 1
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 92
27144: PUSH
27145: LD_VAR 0 2
27149: PUSH
27150: LD_VAR 0 3
27154: PUSH
27155: LD_VAR 0 4
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 3
27168: PUSH
27169: LD_INT 21
27171: PUSH
27172: LD_INT 3
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: PPUSH
27188: CALL_OW 69
27192: ST_TO_ADDR
// if not tmp then
27193: LD_VAR 0 8
27197: NOT
27198: IFFALSE 27202
// exit ;
27200: GO 28756
// for i in tmp do
27202: LD_ADDR_VAR 0 6
27206: PUSH
27207: LD_VAR 0 8
27211: PUSH
27212: FOR_IN
27213: IFFALSE 28731
// begin points := [ 0 , 0 , 0 ] ;
27215: LD_ADDR_VAR 0 9
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: ST_TO_ADDR
// bpoints := 1 ;
27234: LD_ADDR_VAR 0 10
27238: PUSH
27239: LD_INT 1
27241: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27242: LD_VAR 0 6
27246: PPUSH
27247: CALL_OW 247
27251: PUSH
27252: LD_INT 1
27254: DOUBLE
27255: EQUAL
27256: IFTRUE 27260
27258: GO 27838
27260: POP
// begin if GetClass ( i ) = 1 then
27261: LD_VAR 0 6
27265: PPUSH
27266: CALL_OW 257
27270: PUSH
27271: LD_INT 1
27273: EQUAL
27274: IFFALSE 27295
// points := [ 10 , 5 , 3 ] ;
27276: LD_ADDR_VAR 0 9
27280: PUSH
27281: LD_INT 10
27283: PUSH
27284: LD_INT 5
27286: PUSH
27287: LD_INT 3
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: LIST
27294: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27295: LD_VAR 0 6
27299: PPUSH
27300: CALL_OW 257
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: LD_INT 3
27310: PUSH
27311: LD_INT 4
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: IN
27319: IFFALSE 27340
// points := [ 3 , 2 , 1 ] ;
27321: LD_ADDR_VAR 0 9
27325: PUSH
27326: LD_INT 3
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27340: LD_VAR 0 6
27344: PPUSH
27345: CALL_OW 257
27349: PUSH
27350: LD_INT 5
27352: EQUAL
27353: IFFALSE 27374
// points := [ 130 , 5 , 2 ] ;
27355: LD_ADDR_VAR 0 9
27359: PUSH
27360: LD_INT 130
27362: PUSH
27363: LD_INT 5
27365: PUSH
27366: LD_INT 2
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27374: LD_VAR 0 6
27378: PPUSH
27379: CALL_OW 257
27383: PUSH
27384: LD_INT 8
27386: EQUAL
27387: IFFALSE 27408
// points := [ 35 , 35 , 30 ] ;
27389: LD_ADDR_VAR 0 9
27393: PUSH
27394: LD_INT 35
27396: PUSH
27397: LD_INT 35
27399: PUSH
27400: LD_INT 30
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: LIST
27407: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27408: LD_VAR 0 6
27412: PPUSH
27413: CALL_OW 257
27417: PUSH
27418: LD_INT 9
27420: EQUAL
27421: IFFALSE 27442
// points := [ 20 , 55 , 40 ] ;
27423: LD_ADDR_VAR 0 9
27427: PUSH
27428: LD_INT 20
27430: PUSH
27431: LD_INT 55
27433: PUSH
27434: LD_INT 40
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27442: LD_VAR 0 6
27446: PPUSH
27447: CALL_OW 257
27451: PUSH
27452: LD_INT 12
27454: PUSH
27455: LD_INT 16
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: IN
27462: IFFALSE 27483
// points := [ 5 , 3 , 2 ] ;
27464: LD_ADDR_VAR 0 9
27468: PUSH
27469: LD_INT 5
27471: PUSH
27472: LD_INT 3
27474: PUSH
27475: LD_INT 2
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27483: LD_VAR 0 6
27487: PPUSH
27488: CALL_OW 257
27492: PUSH
27493: LD_INT 17
27495: EQUAL
27496: IFFALSE 27517
// points := [ 100 , 50 , 75 ] ;
27498: LD_ADDR_VAR 0 9
27502: PUSH
27503: LD_INT 100
27505: PUSH
27506: LD_INT 50
27508: PUSH
27509: LD_INT 75
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: LIST
27516: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27517: LD_VAR 0 6
27521: PPUSH
27522: CALL_OW 257
27526: PUSH
27527: LD_INT 15
27529: EQUAL
27530: IFFALSE 27551
// points := [ 10 , 5 , 3 ] ;
27532: LD_ADDR_VAR 0 9
27536: PUSH
27537: LD_INT 10
27539: PUSH
27540: LD_INT 5
27542: PUSH
27543: LD_INT 3
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27551: LD_VAR 0 6
27555: PPUSH
27556: CALL_OW 257
27560: PUSH
27561: LD_INT 14
27563: EQUAL
27564: IFFALSE 27585
// points := [ 10 , 0 , 0 ] ;
27566: LD_ADDR_VAR 0 9
27570: PUSH
27571: LD_INT 10
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27585: LD_VAR 0 6
27589: PPUSH
27590: CALL_OW 257
27594: PUSH
27595: LD_INT 11
27597: EQUAL
27598: IFFALSE 27619
// points := [ 30 , 10 , 5 ] ;
27600: LD_ADDR_VAR 0 9
27604: PUSH
27605: LD_INT 30
27607: PUSH
27608: LD_INT 10
27610: PUSH
27611: LD_INT 5
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: LIST
27618: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27619: LD_VAR 0 1
27623: PPUSH
27624: LD_INT 5
27626: PPUSH
27627: CALL_OW 321
27631: PUSH
27632: LD_INT 2
27634: EQUAL
27635: IFFALSE 27652
// bpoints := bpoints * 1.8 ;
27637: LD_ADDR_VAR 0 10
27641: PUSH
27642: LD_VAR 0 10
27646: PUSH
27647: LD_REAL  1.80000000000000E+0000
27650: MUL
27651: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27652: LD_VAR 0 6
27656: PPUSH
27657: CALL_OW 257
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: LD_INT 3
27670: PUSH
27671: LD_INT 4
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: IN
27680: PUSH
27681: LD_VAR 0 1
27685: PPUSH
27686: LD_INT 51
27688: PPUSH
27689: CALL_OW 321
27693: PUSH
27694: LD_INT 2
27696: EQUAL
27697: AND
27698: IFFALSE 27715
// bpoints := bpoints * 1.2 ;
27700: LD_ADDR_VAR 0 10
27704: PUSH
27705: LD_VAR 0 10
27709: PUSH
27710: LD_REAL  1.20000000000000E+0000
27713: MUL
27714: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27715: LD_VAR 0 6
27719: PPUSH
27720: CALL_OW 257
27724: PUSH
27725: LD_INT 5
27727: PUSH
27728: LD_INT 7
27730: PUSH
27731: LD_INT 9
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: IN
27739: PUSH
27740: LD_VAR 0 1
27744: PPUSH
27745: LD_INT 52
27747: PPUSH
27748: CALL_OW 321
27752: PUSH
27753: LD_INT 2
27755: EQUAL
27756: AND
27757: IFFALSE 27774
// bpoints := bpoints * 1.5 ;
27759: LD_ADDR_VAR 0 10
27763: PUSH
27764: LD_VAR 0 10
27768: PUSH
27769: LD_REAL  1.50000000000000E+0000
27772: MUL
27773: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27774: LD_VAR 0 1
27778: PPUSH
27779: LD_INT 66
27781: PPUSH
27782: CALL_OW 321
27786: PUSH
27787: LD_INT 2
27789: EQUAL
27790: IFFALSE 27807
// bpoints := bpoints * 1.1 ;
27792: LD_ADDR_VAR 0 10
27796: PUSH
27797: LD_VAR 0 10
27801: PUSH
27802: LD_REAL  1.10000000000000E+0000
27805: MUL
27806: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27807: LD_ADDR_VAR 0 10
27811: PUSH
27812: LD_VAR 0 10
27816: PUSH
27817: LD_VAR 0 6
27821: PPUSH
27822: LD_INT 1
27824: PPUSH
27825: CALL_OW 259
27829: PUSH
27830: LD_REAL  1.15000000000000E+0000
27833: MUL
27834: MUL
27835: ST_TO_ADDR
// end ; unit_vehicle :
27836: GO 28660
27838: LD_INT 2
27840: DOUBLE
27841: EQUAL
27842: IFTRUE 27846
27844: GO 28648
27846: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27847: LD_VAR 0 6
27851: PPUSH
27852: CALL_OW 264
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: LD_INT 42
27862: PUSH
27863: LD_INT 24
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: LIST
27870: IN
27871: IFFALSE 27892
// points := [ 25 , 5 , 3 ] ;
27873: LD_ADDR_VAR 0 9
27877: PUSH
27878: LD_INT 25
27880: PUSH
27881: LD_INT 5
27883: PUSH
27884: LD_INT 3
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27892: LD_VAR 0 6
27896: PPUSH
27897: CALL_OW 264
27901: PUSH
27902: LD_INT 4
27904: PUSH
27905: LD_INT 43
27907: PUSH
27908: LD_INT 25
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: IN
27916: IFFALSE 27937
// points := [ 40 , 15 , 5 ] ;
27918: LD_ADDR_VAR 0 9
27922: PUSH
27923: LD_INT 40
27925: PUSH
27926: LD_INT 15
27928: PUSH
27929: LD_INT 5
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27937: LD_VAR 0 6
27941: PPUSH
27942: CALL_OW 264
27946: PUSH
27947: LD_INT 3
27949: PUSH
27950: LD_INT 23
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: IN
27957: IFFALSE 27978
// points := [ 7 , 25 , 8 ] ;
27959: LD_ADDR_VAR 0 9
27963: PUSH
27964: LD_INT 7
27966: PUSH
27967: LD_INT 25
27969: PUSH
27970: LD_INT 8
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: LIST
27977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27978: LD_VAR 0 6
27982: PPUSH
27983: CALL_OW 264
27987: PUSH
27988: LD_INT 5
27990: PUSH
27991: LD_INT 27
27993: PUSH
27994: LD_INT 44
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: IN
28002: IFFALSE 28023
// points := [ 14 , 50 , 16 ] ;
28004: LD_ADDR_VAR 0 9
28008: PUSH
28009: LD_INT 14
28011: PUSH
28012: LD_INT 50
28014: PUSH
28015: LD_INT 16
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28023: LD_VAR 0 6
28027: PPUSH
28028: CALL_OW 264
28032: PUSH
28033: LD_INT 6
28035: PUSH
28036: LD_INT 46
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: IN
28043: IFFALSE 28064
// points := [ 32 , 120 , 70 ] ;
28045: LD_ADDR_VAR 0 9
28049: PUSH
28050: LD_INT 32
28052: PUSH
28053: LD_INT 120
28055: PUSH
28056: LD_INT 70
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28064: LD_VAR 0 6
28068: PPUSH
28069: CALL_OW 264
28073: PUSH
28074: LD_INT 7
28076: PUSH
28077: LD_INT 28
28079: PUSH
28080: LD_INT 45
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: IN
28088: IFFALSE 28109
// points := [ 35 , 20 , 45 ] ;
28090: LD_ADDR_VAR 0 9
28094: PUSH
28095: LD_INT 35
28097: PUSH
28098: LD_INT 20
28100: PUSH
28101: LD_INT 45
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28109: LD_VAR 0 6
28113: PPUSH
28114: CALL_OW 264
28118: PUSH
28119: LD_INT 47
28121: PUSH
28122: EMPTY
28123: LIST
28124: IN
28125: IFFALSE 28146
// points := [ 67 , 45 , 75 ] ;
28127: LD_ADDR_VAR 0 9
28131: PUSH
28132: LD_INT 67
28134: PUSH
28135: LD_INT 45
28137: PUSH
28138: LD_INT 75
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28146: LD_VAR 0 6
28150: PPUSH
28151: CALL_OW 264
28155: PUSH
28156: LD_INT 26
28158: PUSH
28159: EMPTY
28160: LIST
28161: IN
28162: IFFALSE 28183
// points := [ 120 , 30 , 80 ] ;
28164: LD_ADDR_VAR 0 9
28168: PUSH
28169: LD_INT 120
28171: PUSH
28172: LD_INT 30
28174: PUSH
28175: LD_INT 80
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: LIST
28182: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28183: LD_VAR 0 6
28187: PPUSH
28188: CALL_OW 264
28192: PUSH
28193: LD_INT 22
28195: PUSH
28196: EMPTY
28197: LIST
28198: IN
28199: IFFALSE 28220
// points := [ 40 , 1 , 1 ] ;
28201: LD_ADDR_VAR 0 9
28205: PUSH
28206: LD_INT 40
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28220: LD_VAR 0 6
28224: PPUSH
28225: CALL_OW 264
28229: PUSH
28230: LD_INT 29
28232: PUSH
28233: EMPTY
28234: LIST
28235: IN
28236: IFFALSE 28257
// points := [ 70 , 200 , 400 ] ;
28238: LD_ADDR_VAR 0 9
28242: PUSH
28243: LD_INT 70
28245: PUSH
28246: LD_INT 200
28248: PUSH
28249: LD_INT 400
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: LIST
28256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28257: LD_VAR 0 6
28261: PPUSH
28262: CALL_OW 264
28266: PUSH
28267: LD_INT 14
28269: PUSH
28270: LD_INT 53
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: IN
28277: IFFALSE 28298
// points := [ 40 , 10 , 20 ] ;
28279: LD_ADDR_VAR 0 9
28283: PUSH
28284: LD_INT 40
28286: PUSH
28287: LD_INT 10
28289: PUSH
28290: LD_INT 20
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28298: LD_VAR 0 6
28302: PPUSH
28303: CALL_OW 264
28307: PUSH
28308: LD_INT 9
28310: PUSH
28311: EMPTY
28312: LIST
28313: IN
28314: IFFALSE 28335
// points := [ 5 , 70 , 20 ] ;
28316: LD_ADDR_VAR 0 9
28320: PUSH
28321: LD_INT 5
28323: PUSH
28324: LD_INT 70
28326: PUSH
28327: LD_INT 20
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28335: LD_VAR 0 6
28339: PPUSH
28340: CALL_OW 264
28344: PUSH
28345: LD_INT 10
28347: PUSH
28348: EMPTY
28349: LIST
28350: IN
28351: IFFALSE 28372
// points := [ 35 , 110 , 70 ] ;
28353: LD_ADDR_VAR 0 9
28357: PUSH
28358: LD_INT 35
28360: PUSH
28361: LD_INT 110
28363: PUSH
28364: LD_INT 70
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28372: LD_VAR 0 6
28376: PPUSH
28377: CALL_OW 265
28381: PUSH
28382: LD_INT 25
28384: EQUAL
28385: IFFALSE 28406
// points := [ 80 , 65 , 100 ] ;
28387: LD_ADDR_VAR 0 9
28391: PUSH
28392: LD_INT 80
28394: PUSH
28395: LD_INT 65
28397: PUSH
28398: LD_INT 100
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28406: LD_VAR 0 6
28410: PPUSH
28411: CALL_OW 263
28415: PUSH
28416: LD_INT 1
28418: EQUAL
28419: IFFALSE 28454
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28421: LD_ADDR_VAR 0 10
28425: PUSH
28426: LD_VAR 0 10
28430: PUSH
28431: LD_VAR 0 6
28435: PPUSH
28436: CALL_OW 311
28440: PPUSH
28441: LD_INT 3
28443: PPUSH
28444: CALL_OW 259
28448: PUSH
28449: LD_INT 4
28451: MUL
28452: MUL
28453: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28454: LD_VAR 0 6
28458: PPUSH
28459: CALL_OW 263
28463: PUSH
28464: LD_INT 2
28466: EQUAL
28467: IFFALSE 28518
// begin j := IsControledBy ( i ) ;
28469: LD_ADDR_VAR 0 7
28473: PUSH
28474: LD_VAR 0 6
28478: PPUSH
28479: CALL_OW 312
28483: ST_TO_ADDR
// if j then
28484: LD_VAR 0 7
28488: IFFALSE 28518
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28490: LD_ADDR_VAR 0 10
28494: PUSH
28495: LD_VAR 0 10
28499: PUSH
28500: LD_VAR 0 7
28504: PPUSH
28505: LD_INT 3
28507: PPUSH
28508: CALL_OW 259
28512: PUSH
28513: LD_INT 3
28515: MUL
28516: MUL
28517: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28518: LD_VAR 0 6
28522: PPUSH
28523: CALL_OW 264
28527: PUSH
28528: LD_INT 5
28530: PUSH
28531: LD_INT 6
28533: PUSH
28534: LD_INT 46
28536: PUSH
28537: LD_INT 44
28539: PUSH
28540: LD_INT 47
28542: PUSH
28543: LD_INT 45
28545: PUSH
28546: LD_INT 28
28548: PUSH
28549: LD_INT 7
28551: PUSH
28552: LD_INT 27
28554: PUSH
28555: LD_INT 29
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: IN
28570: PUSH
28571: LD_VAR 0 1
28575: PPUSH
28576: LD_INT 52
28578: PPUSH
28579: CALL_OW 321
28583: PUSH
28584: LD_INT 2
28586: EQUAL
28587: AND
28588: IFFALSE 28605
// bpoints := bpoints * 1.2 ;
28590: LD_ADDR_VAR 0 10
28594: PUSH
28595: LD_VAR 0 10
28599: PUSH
28600: LD_REAL  1.20000000000000E+0000
28603: MUL
28604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28605: LD_VAR 0 6
28609: PPUSH
28610: CALL_OW 264
28614: PUSH
28615: LD_INT 6
28617: PUSH
28618: LD_INT 46
28620: PUSH
28621: LD_INT 47
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: IN
28629: IFFALSE 28646
// bpoints := bpoints * 1.2 ;
28631: LD_ADDR_VAR 0 10
28635: PUSH
28636: LD_VAR 0 10
28640: PUSH
28641: LD_REAL  1.20000000000000E+0000
28644: MUL
28645: ST_TO_ADDR
// end ; unit_building :
28646: GO 28660
28648: LD_INT 3
28650: DOUBLE
28651: EQUAL
28652: IFTRUE 28656
28654: GO 28659
28656: POP
// ; end ;
28657: GO 28660
28659: POP
// for j = 1 to 3 do
28660: LD_ADDR_VAR 0 7
28664: PUSH
28665: DOUBLE
28666: LD_INT 1
28668: DEC
28669: ST_TO_ADDR
28670: LD_INT 3
28672: PUSH
28673: FOR_TO
28674: IFFALSE 28727
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28676: LD_ADDR_VAR 0 5
28680: PUSH
28681: LD_VAR 0 5
28685: PPUSH
28686: LD_VAR 0 7
28690: PPUSH
28691: LD_VAR 0 5
28695: PUSH
28696: LD_VAR 0 7
28700: ARRAY
28701: PUSH
28702: LD_VAR 0 9
28706: PUSH
28707: LD_VAR 0 7
28711: ARRAY
28712: PUSH
28713: LD_VAR 0 10
28717: MUL
28718: PLUS
28719: PPUSH
28720: CALL_OW 1
28724: ST_TO_ADDR
28725: GO 28673
28727: POP
28728: POP
// end ;
28729: GO 27212
28731: POP
28732: POP
// result := Replace ( result , 4 , tmp ) ;
28733: LD_ADDR_VAR 0 5
28737: PUSH
28738: LD_VAR 0 5
28742: PPUSH
28743: LD_INT 4
28745: PPUSH
28746: LD_VAR 0 8
28750: PPUSH
28751: CALL_OW 1
28755: ST_TO_ADDR
// end ;
28756: LD_VAR 0 5
28760: RET
// export function DangerAtRange ( unit , range ) ; begin
28761: LD_INT 0
28763: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28764: LD_ADDR_VAR 0 3
28768: PUSH
28769: LD_VAR 0 1
28773: PPUSH
28774: CALL_OW 255
28778: PPUSH
28779: LD_VAR 0 1
28783: PPUSH
28784: CALL_OW 250
28788: PPUSH
28789: LD_VAR 0 1
28793: PPUSH
28794: CALL_OW 251
28798: PPUSH
28799: LD_VAR 0 2
28803: PPUSH
28804: CALL 27064 0 4
28808: ST_TO_ADDR
// end ;
28809: LD_VAR 0 3
28813: RET
// export function DangerInArea ( side , area ) ; begin
28814: LD_INT 0
28816: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28817: LD_ADDR_VAR 0 3
28821: PUSH
28822: LD_VAR 0 2
28826: PPUSH
28827: LD_INT 81
28829: PUSH
28830: LD_VAR 0 1
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 70
28843: ST_TO_ADDR
// end ;
28844: LD_VAR 0 3
28848: RET
// export function IsExtension ( b ) ; begin
28849: LD_INT 0
28851: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28852: LD_ADDR_VAR 0 2
28856: PUSH
28857: LD_VAR 0 1
28861: PUSH
28862: LD_INT 23
28864: PUSH
28865: LD_INT 20
28867: PUSH
28868: LD_INT 22
28870: PUSH
28871: LD_INT 17
28873: PUSH
28874: LD_INT 24
28876: PUSH
28877: LD_INT 21
28879: PUSH
28880: LD_INT 19
28882: PUSH
28883: LD_INT 16
28885: PUSH
28886: LD_INT 25
28888: PUSH
28889: LD_INT 18
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: IN
28904: ST_TO_ADDR
// end ;
28905: LD_VAR 0 2
28909: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28910: LD_INT 0
28912: PPUSH
28913: PPUSH
28914: PPUSH
// result := [ ] ;
28915: LD_ADDR_VAR 0 4
28919: PUSH
28920: EMPTY
28921: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28922: LD_ADDR_VAR 0 5
28926: PUSH
28927: LD_VAR 0 2
28931: PPUSH
28932: LD_INT 21
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PPUSH
28942: CALL_OW 70
28946: ST_TO_ADDR
// if not tmp then
28947: LD_VAR 0 5
28951: NOT
28952: IFFALSE 28956
// exit ;
28954: GO 29020
// if checkLink then
28956: LD_VAR 0 3
28960: IFFALSE 29010
// begin for i in tmp do
28962: LD_ADDR_VAR 0 6
28966: PUSH
28967: LD_VAR 0 5
28971: PUSH
28972: FOR_IN
28973: IFFALSE 29008
// if GetBase ( i ) <> base then
28975: LD_VAR 0 6
28979: PPUSH
28980: CALL_OW 274
28984: PUSH
28985: LD_VAR 0 1
28989: NONEQUAL
28990: IFFALSE 29006
// ComLinkToBase ( base , i ) ;
28992: LD_VAR 0 1
28996: PPUSH
28997: LD_VAR 0 6
29001: PPUSH
29002: CALL_OW 169
29006: GO 28972
29008: POP
29009: POP
// end ; result := tmp ;
29010: LD_ADDR_VAR 0 4
29014: PUSH
29015: LD_VAR 0 5
29019: ST_TO_ADDR
// end ;
29020: LD_VAR 0 4
29024: RET
// export function ComComplete ( units , b ) ; var i ; begin
29025: LD_INT 0
29027: PPUSH
29028: PPUSH
// if not units then
29029: LD_VAR 0 1
29033: NOT
29034: IFFALSE 29038
// exit ;
29036: GO 29128
// for i in units do
29038: LD_ADDR_VAR 0 4
29042: PUSH
29043: LD_VAR 0 1
29047: PUSH
29048: FOR_IN
29049: IFFALSE 29126
// if BuildingStatus ( b ) = bs_build then
29051: LD_VAR 0 2
29055: PPUSH
29056: CALL_OW 461
29060: PUSH
29061: LD_INT 1
29063: EQUAL
29064: IFFALSE 29124
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29066: LD_VAR 0 4
29070: PPUSH
29071: LD_STRING h
29073: PUSH
29074: LD_VAR 0 2
29078: PPUSH
29079: CALL_OW 250
29083: PUSH
29084: LD_VAR 0 2
29088: PPUSH
29089: CALL_OW 251
29093: PUSH
29094: LD_VAR 0 2
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: PUSH
29117: EMPTY
29118: LIST
29119: PPUSH
29120: CALL_OW 446
29124: GO 29048
29126: POP
29127: POP
// end ;
29128: LD_VAR 0 3
29132: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29133: LD_INT 0
29135: PPUSH
29136: PPUSH
29137: PPUSH
29138: PPUSH
29139: PPUSH
29140: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29141: LD_VAR 0 1
29145: NOT
29146: PUSH
29147: LD_VAR 0 1
29151: PPUSH
29152: CALL_OW 263
29156: PUSH
29157: LD_INT 2
29159: EQUAL
29160: NOT
29161: OR
29162: IFFALSE 29166
// exit ;
29164: GO 29482
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29166: LD_ADDR_VAR 0 6
29170: PUSH
29171: LD_INT 22
29173: PUSH
29174: LD_VAR 0 1
29178: PPUSH
29179: CALL_OW 255
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: LD_INT 30
29193: PUSH
29194: LD_INT 36
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 34
29203: PUSH
29204: LD_INT 31
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PPUSH
29220: CALL_OW 69
29224: ST_TO_ADDR
// if not tmp then
29225: LD_VAR 0 6
29229: NOT
29230: IFFALSE 29234
// exit ;
29232: GO 29482
// result := [ ] ;
29234: LD_ADDR_VAR 0 2
29238: PUSH
29239: EMPTY
29240: ST_TO_ADDR
// for i in tmp do
29241: LD_ADDR_VAR 0 3
29245: PUSH
29246: LD_VAR 0 6
29250: PUSH
29251: FOR_IN
29252: IFFALSE 29323
// begin t := UnitsInside ( i ) ;
29254: LD_ADDR_VAR 0 4
29258: PUSH
29259: LD_VAR 0 3
29263: PPUSH
29264: CALL_OW 313
29268: ST_TO_ADDR
// if t then
29269: LD_VAR 0 4
29273: IFFALSE 29321
// for j in t do
29275: LD_ADDR_VAR 0 7
29279: PUSH
29280: LD_VAR 0 4
29284: PUSH
29285: FOR_IN
29286: IFFALSE 29319
// result := Insert ( result , result + 1 , j ) ;
29288: LD_ADDR_VAR 0 2
29292: PUSH
29293: LD_VAR 0 2
29297: PPUSH
29298: LD_VAR 0 2
29302: PUSH
29303: LD_INT 1
29305: PLUS
29306: PPUSH
29307: LD_VAR 0 7
29311: PPUSH
29312: CALL_OW 2
29316: ST_TO_ADDR
29317: GO 29285
29319: POP
29320: POP
// end ;
29321: GO 29251
29323: POP
29324: POP
// if not result then
29325: LD_VAR 0 2
29329: NOT
29330: IFFALSE 29334
// exit ;
29332: GO 29482
// mech := result [ 1 ] ;
29334: LD_ADDR_VAR 0 5
29338: PUSH
29339: LD_VAR 0 2
29343: PUSH
29344: LD_INT 1
29346: ARRAY
29347: ST_TO_ADDR
// if result > 1 then
29348: LD_VAR 0 2
29352: PUSH
29353: LD_INT 1
29355: GREATER
29356: IFFALSE 29468
// for i = 2 to result do
29358: LD_ADDR_VAR 0 3
29362: PUSH
29363: DOUBLE
29364: LD_INT 2
29366: DEC
29367: ST_TO_ADDR
29368: LD_VAR 0 2
29372: PUSH
29373: FOR_TO
29374: IFFALSE 29466
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29376: LD_ADDR_VAR 0 4
29380: PUSH
29381: LD_VAR 0 2
29385: PUSH
29386: LD_VAR 0 3
29390: ARRAY
29391: PPUSH
29392: LD_INT 3
29394: PPUSH
29395: CALL_OW 259
29399: PUSH
29400: LD_VAR 0 2
29404: PUSH
29405: LD_VAR 0 3
29409: ARRAY
29410: PPUSH
29411: CALL_OW 432
29415: MINUS
29416: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29417: LD_VAR 0 4
29421: PUSH
29422: LD_VAR 0 5
29426: PPUSH
29427: LD_INT 3
29429: PPUSH
29430: CALL_OW 259
29434: PUSH
29435: LD_VAR 0 5
29439: PPUSH
29440: CALL_OW 432
29444: MINUS
29445: GREATEREQUAL
29446: IFFALSE 29464
// mech := result [ i ] ;
29448: LD_ADDR_VAR 0 5
29452: PUSH
29453: LD_VAR 0 2
29457: PUSH
29458: LD_VAR 0 3
29462: ARRAY
29463: ST_TO_ADDR
// end ;
29464: GO 29373
29466: POP
29467: POP
// ComLinkTo ( vehicle , mech ) ;
29468: LD_VAR 0 1
29472: PPUSH
29473: LD_VAR 0 5
29477: PPUSH
29478: CALL_OW 135
// end ;
29482: LD_VAR 0 2
29486: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29487: LD_INT 0
29489: PPUSH
29490: PPUSH
29491: PPUSH
29492: PPUSH
29493: PPUSH
29494: PPUSH
29495: PPUSH
29496: PPUSH
29497: PPUSH
29498: PPUSH
29499: PPUSH
29500: PPUSH
29501: PPUSH
// result := [ ] ;
29502: LD_ADDR_VAR 0 7
29506: PUSH
29507: EMPTY
29508: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29509: LD_VAR 0 1
29513: PPUSH
29514: CALL_OW 266
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: IN
29529: NOT
29530: IFFALSE 29534
// exit ;
29532: GO 31168
// if name then
29534: LD_VAR 0 3
29538: IFFALSE 29554
// SetBName ( base_dep , name ) ;
29540: LD_VAR 0 1
29544: PPUSH
29545: LD_VAR 0 3
29549: PPUSH
29550: CALL_OW 500
// base := GetBase ( base_dep ) ;
29554: LD_ADDR_VAR 0 15
29558: PUSH
29559: LD_VAR 0 1
29563: PPUSH
29564: CALL_OW 274
29568: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29569: LD_ADDR_VAR 0 16
29573: PUSH
29574: LD_VAR 0 1
29578: PPUSH
29579: CALL_OW 255
29583: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29584: LD_ADDR_VAR 0 17
29588: PUSH
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL_OW 248
29598: ST_TO_ADDR
// if sources then
29599: LD_VAR 0 5
29603: IFFALSE 29650
// for i = 1 to 3 do
29605: LD_ADDR_VAR 0 8
29609: PUSH
29610: DOUBLE
29611: LD_INT 1
29613: DEC
29614: ST_TO_ADDR
29615: LD_INT 3
29617: PUSH
29618: FOR_TO
29619: IFFALSE 29648
// AddResourceType ( base , i , sources [ i ] ) ;
29621: LD_VAR 0 15
29625: PPUSH
29626: LD_VAR 0 8
29630: PPUSH
29631: LD_VAR 0 5
29635: PUSH
29636: LD_VAR 0 8
29640: ARRAY
29641: PPUSH
29642: CALL_OW 276
29646: GO 29618
29648: POP
29649: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29650: LD_ADDR_VAR 0 18
29654: PUSH
29655: LD_VAR 0 15
29659: PPUSH
29660: LD_VAR 0 2
29664: PPUSH
29665: LD_INT 1
29667: PPUSH
29668: CALL 28910 0 3
29672: ST_TO_ADDR
// InitHc ;
29673: CALL_OW 19
// InitUc ;
29677: CALL_OW 18
// uc_side := side ;
29681: LD_ADDR_OWVAR 20
29685: PUSH
29686: LD_VAR 0 16
29690: ST_TO_ADDR
// uc_nation := nation ;
29691: LD_ADDR_OWVAR 21
29695: PUSH
29696: LD_VAR 0 17
29700: ST_TO_ADDR
// if buildings then
29701: LD_VAR 0 18
29705: IFFALSE 31027
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29707: LD_ADDR_VAR 0 19
29711: PUSH
29712: LD_VAR 0 18
29716: PPUSH
29717: LD_INT 2
29719: PUSH
29720: LD_INT 30
29722: PUSH
29723: LD_INT 29
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 30
29732: PUSH
29733: LD_INT 30
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: PPUSH
29745: CALL_OW 72
29749: ST_TO_ADDR
// if tmp then
29750: LD_VAR 0 19
29754: IFFALSE 29802
// for i in tmp do
29756: LD_ADDR_VAR 0 8
29760: PUSH
29761: LD_VAR 0 19
29765: PUSH
29766: FOR_IN
29767: IFFALSE 29800
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29769: LD_VAR 0 8
29773: PPUSH
29774: CALL_OW 250
29778: PPUSH
29779: LD_VAR 0 8
29783: PPUSH
29784: CALL_OW 251
29788: PPUSH
29789: LD_VAR 0 16
29793: PPUSH
29794: CALL_OW 441
29798: GO 29766
29800: POP
29801: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29802: LD_VAR 0 18
29806: PPUSH
29807: LD_INT 2
29809: PUSH
29810: LD_INT 30
29812: PUSH
29813: LD_INT 32
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 30
29822: PUSH
29823: LD_INT 33
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: LIST
29834: PPUSH
29835: CALL_OW 72
29839: IFFALSE 29927
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29841: LD_ADDR_VAR 0 8
29845: PUSH
29846: LD_VAR 0 18
29850: PPUSH
29851: LD_INT 2
29853: PUSH
29854: LD_INT 30
29856: PUSH
29857: LD_INT 32
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 30
29866: PUSH
29867: LD_INT 33
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: PPUSH
29879: CALL_OW 72
29883: PUSH
29884: FOR_IN
29885: IFFALSE 29925
// begin if not GetBWeapon ( i ) then
29887: LD_VAR 0 8
29891: PPUSH
29892: CALL_OW 269
29896: NOT
29897: IFFALSE 29923
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29899: LD_VAR 0 8
29903: PPUSH
29904: LD_VAR 0 8
29908: PPUSH
29909: LD_VAR 0 2
29913: PPUSH
29914: CALL 31173 0 2
29918: PPUSH
29919: CALL_OW 431
// end ;
29923: GO 29884
29925: POP
29926: POP
// end ; for i = 1 to personel do
29927: LD_ADDR_VAR 0 8
29931: PUSH
29932: DOUBLE
29933: LD_INT 1
29935: DEC
29936: ST_TO_ADDR
29937: LD_VAR 0 6
29941: PUSH
29942: FOR_TO
29943: IFFALSE 31007
// begin if i > 4 then
29945: LD_VAR 0 8
29949: PUSH
29950: LD_INT 4
29952: GREATER
29953: IFFALSE 29957
// break ;
29955: GO 31007
// case i of 1 :
29957: LD_VAR 0 8
29961: PUSH
29962: LD_INT 1
29964: DOUBLE
29965: EQUAL
29966: IFTRUE 29970
29968: GO 30050
29970: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29971: LD_ADDR_VAR 0 12
29975: PUSH
29976: LD_VAR 0 18
29980: PPUSH
29981: LD_INT 22
29983: PUSH
29984: LD_VAR 0 16
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 58
29995: PUSH
29996: EMPTY
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: LD_INT 30
30004: PUSH
30005: LD_INT 32
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 30
30014: PUSH
30015: LD_INT 4
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 30
30024: PUSH
30025: LD_INT 5
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: PPUSH
30043: CALL_OW 72
30047: ST_TO_ADDR
30048: GO 30272
30050: LD_INT 2
30052: DOUBLE
30053: EQUAL
30054: IFTRUE 30058
30056: GO 30120
30058: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30059: LD_ADDR_VAR 0 12
30063: PUSH
30064: LD_VAR 0 18
30068: PPUSH
30069: LD_INT 22
30071: PUSH
30072: LD_VAR 0 16
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: LD_INT 30
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 30
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PPUSH
30113: CALL_OW 72
30117: ST_TO_ADDR
30118: GO 30272
30120: LD_INT 3
30122: DOUBLE
30123: EQUAL
30124: IFTRUE 30128
30126: GO 30190
30128: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30129: LD_ADDR_VAR 0 12
30133: PUSH
30134: LD_VAR 0 18
30138: PPUSH
30139: LD_INT 22
30141: PUSH
30142: LD_VAR 0 16
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: LD_INT 30
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 30
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PPUSH
30183: CALL_OW 72
30187: ST_TO_ADDR
30188: GO 30272
30190: LD_INT 4
30192: DOUBLE
30193: EQUAL
30194: IFTRUE 30198
30196: GO 30271
30198: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30199: LD_ADDR_VAR 0 12
30203: PUSH
30204: LD_VAR 0 18
30208: PPUSH
30209: LD_INT 22
30211: PUSH
30212: LD_VAR 0 16
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 2
30223: PUSH
30224: LD_INT 30
30226: PUSH
30227: LD_INT 6
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 30
30236: PUSH
30237: LD_INT 7
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 30
30246: PUSH
30247: LD_INT 8
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PPUSH
30264: CALL_OW 72
30268: ST_TO_ADDR
30269: GO 30272
30271: POP
// if i = 1 then
30272: LD_VAR 0 8
30276: PUSH
30277: LD_INT 1
30279: EQUAL
30280: IFFALSE 30391
// begin tmp := [ ] ;
30282: LD_ADDR_VAR 0 19
30286: PUSH
30287: EMPTY
30288: ST_TO_ADDR
// for j in f do
30289: LD_ADDR_VAR 0 9
30293: PUSH
30294: LD_VAR 0 12
30298: PUSH
30299: FOR_IN
30300: IFFALSE 30373
// if GetBType ( j ) = b_bunker then
30302: LD_VAR 0 9
30306: PPUSH
30307: CALL_OW 266
30311: PUSH
30312: LD_INT 32
30314: EQUAL
30315: IFFALSE 30342
// tmp := Insert ( tmp , 1 , j ) else
30317: LD_ADDR_VAR 0 19
30321: PUSH
30322: LD_VAR 0 19
30326: PPUSH
30327: LD_INT 1
30329: PPUSH
30330: LD_VAR 0 9
30334: PPUSH
30335: CALL_OW 2
30339: ST_TO_ADDR
30340: GO 30371
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30342: LD_ADDR_VAR 0 19
30346: PUSH
30347: LD_VAR 0 19
30351: PPUSH
30352: LD_VAR 0 19
30356: PUSH
30357: LD_INT 1
30359: PLUS
30360: PPUSH
30361: LD_VAR 0 9
30365: PPUSH
30366: CALL_OW 2
30370: ST_TO_ADDR
30371: GO 30299
30373: POP
30374: POP
// if tmp then
30375: LD_VAR 0 19
30379: IFFALSE 30391
// f := tmp ;
30381: LD_ADDR_VAR 0 12
30385: PUSH
30386: LD_VAR 0 19
30390: ST_TO_ADDR
// end ; x := personel [ i ] ;
30391: LD_ADDR_VAR 0 13
30395: PUSH
30396: LD_VAR 0 6
30400: PUSH
30401: LD_VAR 0 8
30405: ARRAY
30406: ST_TO_ADDR
// if x = - 1 then
30407: LD_VAR 0 13
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: EQUAL
30416: IFFALSE 30625
// begin for j in f do
30418: LD_ADDR_VAR 0 9
30422: PUSH
30423: LD_VAR 0 12
30427: PUSH
30428: FOR_IN
30429: IFFALSE 30621
// repeat InitHc ;
30431: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30435: LD_VAR 0 9
30439: PPUSH
30440: CALL_OW 266
30444: PUSH
30445: LD_INT 5
30447: EQUAL
30448: IFFALSE 30518
// begin if UnitsInside ( j ) < 3 then
30450: LD_VAR 0 9
30454: PPUSH
30455: CALL_OW 313
30459: PUSH
30460: LD_INT 3
30462: LESS
30463: IFFALSE 30499
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30465: LD_INT 0
30467: PPUSH
30468: LD_INT 5
30470: PUSH
30471: LD_INT 8
30473: PUSH
30474: LD_INT 9
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: PUSH
30482: LD_VAR 0 17
30486: ARRAY
30487: PPUSH
30488: LD_VAR 0 4
30492: PPUSH
30493: CALL_OW 380
30497: GO 30516
// PrepareHuman ( false , i , skill ) ;
30499: LD_INT 0
30501: PPUSH
30502: LD_VAR 0 8
30506: PPUSH
30507: LD_VAR 0 4
30511: PPUSH
30512: CALL_OW 380
// end else
30516: GO 30535
// PrepareHuman ( false , i , skill ) ;
30518: LD_INT 0
30520: PPUSH
30521: LD_VAR 0 8
30525: PPUSH
30526: LD_VAR 0 4
30530: PPUSH
30531: CALL_OW 380
// un := CreateHuman ;
30535: LD_ADDR_VAR 0 14
30539: PUSH
30540: CALL_OW 44
30544: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30545: LD_ADDR_VAR 0 7
30549: PUSH
30550: LD_VAR 0 7
30554: PPUSH
30555: LD_INT 1
30557: PPUSH
30558: LD_VAR 0 14
30562: PPUSH
30563: CALL_OW 2
30567: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30568: LD_VAR 0 14
30572: PPUSH
30573: LD_VAR 0 9
30577: PPUSH
30578: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30582: LD_VAR 0 9
30586: PPUSH
30587: CALL_OW 313
30591: PUSH
30592: LD_INT 6
30594: EQUAL
30595: PUSH
30596: LD_VAR 0 9
30600: PPUSH
30601: CALL_OW 266
30605: PUSH
30606: LD_INT 32
30608: PUSH
30609: LD_INT 31
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: IN
30616: OR
30617: IFFALSE 30431
30619: GO 30428
30621: POP
30622: POP
// end else
30623: GO 31005
// for j = 1 to x do
30625: LD_ADDR_VAR 0 9
30629: PUSH
30630: DOUBLE
30631: LD_INT 1
30633: DEC
30634: ST_TO_ADDR
30635: LD_VAR 0 13
30639: PUSH
30640: FOR_TO
30641: IFFALSE 31003
// begin InitHc ;
30643: CALL_OW 19
// if not f then
30647: LD_VAR 0 12
30651: NOT
30652: IFFALSE 30741
// begin PrepareHuman ( false , i , skill ) ;
30654: LD_INT 0
30656: PPUSH
30657: LD_VAR 0 8
30661: PPUSH
30662: LD_VAR 0 4
30666: PPUSH
30667: CALL_OW 380
// un := CreateHuman ;
30671: LD_ADDR_VAR 0 14
30675: PUSH
30676: CALL_OW 44
30680: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30681: LD_ADDR_VAR 0 7
30685: PUSH
30686: LD_VAR 0 7
30690: PPUSH
30691: LD_INT 1
30693: PPUSH
30694: LD_VAR 0 14
30698: PPUSH
30699: CALL_OW 2
30703: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30704: LD_VAR 0 14
30708: PPUSH
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 250
30718: PPUSH
30719: LD_VAR 0 1
30723: PPUSH
30724: CALL_OW 251
30728: PPUSH
30729: LD_INT 10
30731: PPUSH
30732: LD_INT 0
30734: PPUSH
30735: CALL_OW 50
// continue ;
30739: GO 30640
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30741: LD_VAR 0 12
30745: PUSH
30746: LD_INT 1
30748: ARRAY
30749: PPUSH
30750: CALL_OW 313
30754: PUSH
30755: LD_VAR 0 12
30759: PUSH
30760: LD_INT 1
30762: ARRAY
30763: PPUSH
30764: CALL_OW 266
30768: PUSH
30769: LD_INT 32
30771: PUSH
30772: LD_INT 31
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: IN
30779: AND
30780: PUSH
30781: LD_VAR 0 12
30785: PUSH
30786: LD_INT 1
30788: ARRAY
30789: PPUSH
30790: CALL_OW 313
30794: PUSH
30795: LD_INT 6
30797: EQUAL
30798: OR
30799: IFFALSE 30819
// f := Delete ( f , 1 ) ;
30801: LD_ADDR_VAR 0 12
30805: PUSH
30806: LD_VAR 0 12
30810: PPUSH
30811: LD_INT 1
30813: PPUSH
30814: CALL_OW 3
30818: ST_TO_ADDR
// if not f then
30819: LD_VAR 0 12
30823: NOT
30824: IFFALSE 30842
// begin x := x + 2 ;
30826: LD_ADDR_VAR 0 13
30830: PUSH
30831: LD_VAR 0 13
30835: PUSH
30836: LD_INT 2
30838: PLUS
30839: ST_TO_ADDR
// continue ;
30840: GO 30640
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30842: LD_VAR 0 12
30846: PUSH
30847: LD_INT 1
30849: ARRAY
30850: PPUSH
30851: CALL_OW 266
30855: PUSH
30856: LD_INT 5
30858: EQUAL
30859: IFFALSE 30933
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30861: LD_VAR 0 12
30865: PUSH
30866: LD_INT 1
30868: ARRAY
30869: PPUSH
30870: CALL_OW 313
30874: PUSH
30875: LD_INT 3
30877: LESS
30878: IFFALSE 30914
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30880: LD_INT 0
30882: PPUSH
30883: LD_INT 5
30885: PUSH
30886: LD_INT 8
30888: PUSH
30889: LD_INT 9
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: PUSH
30897: LD_VAR 0 17
30901: ARRAY
30902: PPUSH
30903: LD_VAR 0 4
30907: PPUSH
30908: CALL_OW 380
30912: GO 30931
// PrepareHuman ( false , i , skill ) ;
30914: LD_INT 0
30916: PPUSH
30917: LD_VAR 0 8
30921: PPUSH
30922: LD_VAR 0 4
30926: PPUSH
30927: CALL_OW 380
// end else
30931: GO 30950
// PrepareHuman ( false , i , skill ) ;
30933: LD_INT 0
30935: PPUSH
30936: LD_VAR 0 8
30940: PPUSH
30941: LD_VAR 0 4
30945: PPUSH
30946: CALL_OW 380
// un := CreateHuman ;
30950: LD_ADDR_VAR 0 14
30954: PUSH
30955: CALL_OW 44
30959: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30960: LD_ADDR_VAR 0 7
30964: PUSH
30965: LD_VAR 0 7
30969: PPUSH
30970: LD_INT 1
30972: PPUSH
30973: LD_VAR 0 14
30977: PPUSH
30978: CALL_OW 2
30982: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30983: LD_VAR 0 14
30987: PPUSH
30988: LD_VAR 0 12
30992: PUSH
30993: LD_INT 1
30995: ARRAY
30996: PPUSH
30997: CALL_OW 52
// end ;
31001: GO 30640
31003: POP
31004: POP
// end ;
31005: GO 29942
31007: POP
31008: POP
// result := result ^ buildings ;
31009: LD_ADDR_VAR 0 7
31013: PUSH
31014: LD_VAR 0 7
31018: PUSH
31019: LD_VAR 0 18
31023: ADD
31024: ST_TO_ADDR
// end else
31025: GO 31168
// begin for i = 1 to personel do
31027: LD_ADDR_VAR 0 8
31031: PUSH
31032: DOUBLE
31033: LD_INT 1
31035: DEC
31036: ST_TO_ADDR
31037: LD_VAR 0 6
31041: PUSH
31042: FOR_TO
31043: IFFALSE 31166
// begin if i > 4 then
31045: LD_VAR 0 8
31049: PUSH
31050: LD_INT 4
31052: GREATER
31053: IFFALSE 31057
// break ;
31055: GO 31166
// x := personel [ i ] ;
31057: LD_ADDR_VAR 0 13
31061: PUSH
31062: LD_VAR 0 6
31066: PUSH
31067: LD_VAR 0 8
31071: ARRAY
31072: ST_TO_ADDR
// if x = - 1 then
31073: LD_VAR 0 13
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: EQUAL
31082: IFFALSE 31086
// continue ;
31084: GO 31042
// PrepareHuman ( false , i , skill ) ;
31086: LD_INT 0
31088: PPUSH
31089: LD_VAR 0 8
31093: PPUSH
31094: LD_VAR 0 4
31098: PPUSH
31099: CALL_OW 380
// un := CreateHuman ;
31103: LD_ADDR_VAR 0 14
31107: PUSH
31108: CALL_OW 44
31112: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31113: LD_VAR 0 14
31117: PPUSH
31118: LD_VAR 0 1
31122: PPUSH
31123: CALL_OW 250
31127: PPUSH
31128: LD_VAR 0 1
31132: PPUSH
31133: CALL_OW 251
31137: PPUSH
31138: LD_INT 10
31140: PPUSH
31141: LD_INT 0
31143: PPUSH
31144: CALL_OW 50
// result := result ^ un ;
31148: LD_ADDR_VAR 0 7
31152: PUSH
31153: LD_VAR 0 7
31157: PUSH
31158: LD_VAR 0 14
31162: ADD
31163: ST_TO_ADDR
// end ;
31164: GO 31042
31166: POP
31167: POP
// end ; end ;
31168: LD_VAR 0 7
31172: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31173: LD_INT 0
31175: PPUSH
31176: PPUSH
31177: PPUSH
31178: PPUSH
31179: PPUSH
31180: PPUSH
31181: PPUSH
31182: PPUSH
31183: PPUSH
31184: PPUSH
31185: PPUSH
31186: PPUSH
31187: PPUSH
31188: PPUSH
31189: PPUSH
31190: PPUSH
// result := false ;
31191: LD_ADDR_VAR 0 3
31195: PUSH
31196: LD_INT 0
31198: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31199: LD_VAR 0 1
31203: NOT
31204: PUSH
31205: LD_VAR 0 1
31209: PPUSH
31210: CALL_OW 266
31214: PUSH
31215: LD_INT 32
31217: PUSH
31218: LD_INT 33
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: IN
31225: NOT
31226: OR
31227: IFFALSE 31231
// exit ;
31229: GO 32370
// nat := GetNation ( tower ) ;
31231: LD_ADDR_VAR 0 12
31235: PUSH
31236: LD_VAR 0 1
31240: PPUSH
31241: CALL_OW 248
31245: ST_TO_ADDR
// side := GetSide ( tower ) ;
31246: LD_ADDR_VAR 0 16
31250: PUSH
31251: LD_VAR 0 1
31255: PPUSH
31256: CALL_OW 255
31260: ST_TO_ADDR
// x := GetX ( tower ) ;
31261: LD_ADDR_VAR 0 10
31265: PUSH
31266: LD_VAR 0 1
31270: PPUSH
31271: CALL_OW 250
31275: ST_TO_ADDR
// y := GetY ( tower ) ;
31276: LD_ADDR_VAR 0 11
31280: PUSH
31281: LD_VAR 0 1
31285: PPUSH
31286: CALL_OW 251
31290: ST_TO_ADDR
// if not x or not y then
31291: LD_VAR 0 10
31295: NOT
31296: PUSH
31297: LD_VAR 0 11
31301: NOT
31302: OR
31303: IFFALSE 31307
// exit ;
31305: GO 32370
// weapon := 0 ;
31307: LD_ADDR_VAR 0 18
31311: PUSH
31312: LD_INT 0
31314: ST_TO_ADDR
// fac_list := [ ] ;
31315: LD_ADDR_VAR 0 17
31319: PUSH
31320: EMPTY
31321: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31322: LD_ADDR_VAR 0 6
31326: PUSH
31327: LD_VAR 0 1
31331: PPUSH
31332: CALL_OW 274
31336: PPUSH
31337: LD_VAR 0 2
31341: PPUSH
31342: LD_INT 0
31344: PPUSH
31345: CALL 28910 0 3
31349: PPUSH
31350: LD_INT 30
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PPUSH
31360: CALL_OW 72
31364: ST_TO_ADDR
// if not factories then
31365: LD_VAR 0 6
31369: NOT
31370: IFFALSE 31374
// exit ;
31372: GO 32370
// for i in factories do
31374: LD_ADDR_VAR 0 8
31378: PUSH
31379: LD_VAR 0 6
31383: PUSH
31384: FOR_IN
31385: IFFALSE 31410
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31387: LD_ADDR_VAR 0 17
31391: PUSH
31392: LD_VAR 0 17
31396: PUSH
31397: LD_VAR 0 8
31401: PPUSH
31402: CALL_OW 478
31406: UNION
31407: ST_TO_ADDR
31408: GO 31384
31410: POP
31411: POP
// if not fac_list then
31412: LD_VAR 0 17
31416: NOT
31417: IFFALSE 31421
// exit ;
31419: GO 32370
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31421: LD_ADDR_VAR 0 5
31425: PUSH
31426: LD_INT 4
31428: PUSH
31429: LD_INT 5
31431: PUSH
31432: LD_INT 9
31434: PUSH
31435: LD_INT 10
31437: PUSH
31438: LD_INT 6
31440: PUSH
31441: LD_INT 7
31443: PUSH
31444: LD_INT 11
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 27
31458: PUSH
31459: LD_INT 28
31461: PUSH
31462: LD_INT 26
31464: PUSH
31465: LD_INT 30
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 43
31476: PUSH
31477: LD_INT 44
31479: PUSH
31480: LD_INT 46
31482: PUSH
31483: LD_INT 45
31485: PUSH
31486: LD_INT 47
31488: PUSH
31489: LD_INT 49
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: PUSH
31505: LD_VAR 0 12
31509: ARRAY
31510: ST_TO_ADDR
// for i in list do
31511: LD_ADDR_VAR 0 8
31515: PUSH
31516: LD_VAR 0 5
31520: PUSH
31521: FOR_IN
31522: IFFALSE 31555
// if not i in fac_list then
31524: LD_VAR 0 8
31528: PUSH
31529: LD_VAR 0 17
31533: IN
31534: NOT
31535: IFFALSE 31553
// list := list diff i ;
31537: LD_ADDR_VAR 0 5
31541: PUSH
31542: LD_VAR 0 5
31546: PUSH
31547: LD_VAR 0 8
31551: DIFF
31552: ST_TO_ADDR
31553: GO 31521
31555: POP
31556: POP
// if not list then
31557: LD_VAR 0 5
31561: NOT
31562: IFFALSE 31566
// exit ;
31564: GO 32370
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31566: LD_VAR 0 12
31570: PUSH
31571: LD_INT 3
31573: EQUAL
31574: PUSH
31575: LD_INT 49
31577: PUSH
31578: LD_VAR 0 5
31582: IN
31583: AND
31584: PUSH
31585: LD_INT 31
31587: PPUSH
31588: LD_VAR 0 16
31592: PPUSH
31593: CALL_OW 321
31597: PUSH
31598: LD_INT 2
31600: EQUAL
31601: AND
31602: IFFALSE 31662
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31604: LD_INT 22
31606: PUSH
31607: LD_VAR 0 16
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 35
31618: PUSH
31619: LD_INT 49
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 91
31628: PUSH
31629: LD_VAR 0 1
31633: PUSH
31634: LD_INT 10
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: PPUSH
31647: CALL_OW 69
31651: NOT
31652: IFFALSE 31662
// weapon := ru_time_lapser ;
31654: LD_ADDR_VAR 0 18
31658: PUSH
31659: LD_INT 49
31661: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31662: LD_VAR 0 12
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: IN
31677: PUSH
31678: LD_INT 11
31680: PUSH
31681: LD_VAR 0 5
31685: IN
31686: PUSH
31687: LD_INT 30
31689: PUSH
31690: LD_VAR 0 5
31694: IN
31695: OR
31696: AND
31697: PUSH
31698: LD_INT 6
31700: PPUSH
31701: LD_VAR 0 16
31705: PPUSH
31706: CALL_OW 321
31710: PUSH
31711: LD_INT 2
31713: EQUAL
31714: AND
31715: IFFALSE 31880
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31717: LD_INT 22
31719: PUSH
31720: LD_VAR 0 16
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: LD_INT 35
31734: PUSH
31735: LD_INT 11
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 35
31744: PUSH
31745: LD_INT 30
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 91
31759: PUSH
31760: LD_VAR 0 1
31764: PUSH
31765: LD_INT 18
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: LIST
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: PPUSH
31778: CALL_OW 69
31782: NOT
31783: PUSH
31784: LD_INT 22
31786: PUSH
31787: LD_VAR 0 16
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 2
31798: PUSH
31799: LD_INT 30
31801: PUSH
31802: LD_INT 32
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 30
31811: PUSH
31812: LD_INT 33
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 91
31826: PUSH
31827: LD_VAR 0 1
31831: PUSH
31832: LD_INT 12
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: LIST
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: PPUSH
31848: CALL_OW 69
31852: PUSH
31853: LD_INT 2
31855: GREATER
31856: AND
31857: IFFALSE 31880
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31859: LD_ADDR_VAR 0 18
31863: PUSH
31864: LD_INT 11
31866: PUSH
31867: LD_INT 30
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_VAR 0 12
31878: ARRAY
31879: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31880: LD_VAR 0 18
31884: NOT
31885: PUSH
31886: LD_INT 40
31888: PPUSH
31889: LD_VAR 0 16
31893: PPUSH
31894: CALL_OW 321
31898: PUSH
31899: LD_INT 2
31901: EQUAL
31902: AND
31903: PUSH
31904: LD_INT 7
31906: PUSH
31907: LD_VAR 0 5
31911: IN
31912: PUSH
31913: LD_INT 28
31915: PUSH
31916: LD_VAR 0 5
31920: IN
31921: OR
31922: PUSH
31923: LD_INT 45
31925: PUSH
31926: LD_VAR 0 5
31930: IN
31931: OR
31932: AND
31933: IFFALSE 32187
// begin hex := GetHexInfo ( x , y ) ;
31935: LD_ADDR_VAR 0 4
31939: PUSH
31940: LD_VAR 0 10
31944: PPUSH
31945: LD_VAR 0 11
31949: PPUSH
31950: CALL_OW 546
31954: ST_TO_ADDR
// if hex [ 1 ] then
31955: LD_VAR 0 4
31959: PUSH
31960: LD_INT 1
31962: ARRAY
31963: IFFALSE 31967
// exit ;
31965: GO 32370
// height := hex [ 2 ] ;
31967: LD_ADDR_VAR 0 15
31971: PUSH
31972: LD_VAR 0 4
31976: PUSH
31977: LD_INT 2
31979: ARRAY
31980: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31981: LD_ADDR_VAR 0 14
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: LD_INT 3
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: ST_TO_ADDR
// for i in tmp do
32004: LD_ADDR_VAR 0 8
32008: PUSH
32009: LD_VAR 0 14
32013: PUSH
32014: FOR_IN
32015: IFFALSE 32185
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32017: LD_ADDR_VAR 0 9
32021: PUSH
32022: LD_VAR 0 10
32026: PPUSH
32027: LD_VAR 0 8
32031: PPUSH
32032: LD_INT 5
32034: PPUSH
32035: CALL_OW 272
32039: PUSH
32040: LD_VAR 0 11
32044: PPUSH
32045: LD_VAR 0 8
32049: PPUSH
32050: LD_INT 5
32052: PPUSH
32053: CALL_OW 273
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32062: LD_VAR 0 9
32066: PUSH
32067: LD_INT 1
32069: ARRAY
32070: PPUSH
32071: LD_VAR 0 9
32075: PUSH
32076: LD_INT 2
32078: ARRAY
32079: PPUSH
32080: CALL_OW 488
32084: IFFALSE 32183
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32086: LD_ADDR_VAR 0 4
32090: PUSH
32091: LD_VAR 0 9
32095: PUSH
32096: LD_INT 1
32098: ARRAY
32099: PPUSH
32100: LD_VAR 0 9
32104: PUSH
32105: LD_INT 2
32107: ARRAY
32108: PPUSH
32109: CALL_OW 546
32113: ST_TO_ADDR
// if hex [ 1 ] then
32114: LD_VAR 0 4
32118: PUSH
32119: LD_INT 1
32121: ARRAY
32122: IFFALSE 32126
// continue ;
32124: GO 32014
// h := hex [ 2 ] ;
32126: LD_ADDR_VAR 0 13
32130: PUSH
32131: LD_VAR 0 4
32135: PUSH
32136: LD_INT 2
32138: ARRAY
32139: ST_TO_ADDR
// if h + 7 < height then
32140: LD_VAR 0 13
32144: PUSH
32145: LD_INT 7
32147: PLUS
32148: PUSH
32149: LD_VAR 0 15
32153: LESS
32154: IFFALSE 32183
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32156: LD_ADDR_VAR 0 18
32160: PUSH
32161: LD_INT 7
32163: PUSH
32164: LD_INT 28
32166: PUSH
32167: LD_INT 45
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: LIST
32174: PUSH
32175: LD_VAR 0 12
32179: ARRAY
32180: ST_TO_ADDR
// break ;
32181: GO 32185
// end ; end ; end ;
32183: GO 32014
32185: POP
32186: POP
// end ; if not weapon then
32187: LD_VAR 0 18
32191: NOT
32192: IFFALSE 32252
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32194: LD_ADDR_VAR 0 5
32198: PUSH
32199: LD_VAR 0 5
32203: PUSH
32204: LD_INT 11
32206: PUSH
32207: LD_INT 30
32209: PUSH
32210: LD_INT 49
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: DIFF
32218: ST_TO_ADDR
// if not list then
32219: LD_VAR 0 5
32223: NOT
32224: IFFALSE 32228
// exit ;
32226: GO 32370
// weapon := list [ rand ( 1 , list ) ] ;
32228: LD_ADDR_VAR 0 18
32232: PUSH
32233: LD_VAR 0 5
32237: PUSH
32238: LD_INT 1
32240: PPUSH
32241: LD_VAR 0 5
32245: PPUSH
32246: CALL_OW 12
32250: ARRAY
32251: ST_TO_ADDR
// end ; if weapon then
32252: LD_VAR 0 18
32256: IFFALSE 32370
// begin tmp := CostOfWeapon ( weapon ) ;
32258: LD_ADDR_VAR 0 14
32262: PUSH
32263: LD_VAR 0 18
32267: PPUSH
32268: CALL_OW 451
32272: ST_TO_ADDR
// j := GetBase ( tower ) ;
32273: LD_ADDR_VAR 0 9
32277: PUSH
32278: LD_VAR 0 1
32282: PPUSH
32283: CALL_OW 274
32287: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32288: LD_VAR 0 9
32292: PPUSH
32293: LD_INT 1
32295: PPUSH
32296: CALL_OW 275
32300: PUSH
32301: LD_VAR 0 14
32305: PUSH
32306: LD_INT 1
32308: ARRAY
32309: GREATEREQUAL
32310: PUSH
32311: LD_VAR 0 9
32315: PPUSH
32316: LD_INT 2
32318: PPUSH
32319: CALL_OW 275
32323: PUSH
32324: LD_VAR 0 14
32328: PUSH
32329: LD_INT 2
32331: ARRAY
32332: GREATEREQUAL
32333: AND
32334: PUSH
32335: LD_VAR 0 9
32339: PPUSH
32340: LD_INT 3
32342: PPUSH
32343: CALL_OW 275
32347: PUSH
32348: LD_VAR 0 14
32352: PUSH
32353: LD_INT 3
32355: ARRAY
32356: GREATEREQUAL
32357: AND
32358: IFFALSE 32370
// result := weapon ;
32360: LD_ADDR_VAR 0 3
32364: PUSH
32365: LD_VAR 0 18
32369: ST_TO_ADDR
// end ; end ;
32370: LD_VAR 0 3
32374: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32375: LD_INT 0
32377: PPUSH
32378: PPUSH
// result := true ;
32379: LD_ADDR_VAR 0 3
32383: PUSH
32384: LD_INT 1
32386: ST_TO_ADDR
// if array1 = array2 then
32387: LD_VAR 0 1
32391: PUSH
32392: LD_VAR 0 2
32396: EQUAL
32397: IFFALSE 32457
// begin for i = 1 to array1 do
32399: LD_ADDR_VAR 0 4
32403: PUSH
32404: DOUBLE
32405: LD_INT 1
32407: DEC
32408: ST_TO_ADDR
32409: LD_VAR 0 1
32413: PUSH
32414: FOR_TO
32415: IFFALSE 32453
// if array1 [ i ] <> array2 [ i ] then
32417: LD_VAR 0 1
32421: PUSH
32422: LD_VAR 0 4
32426: ARRAY
32427: PUSH
32428: LD_VAR 0 2
32432: PUSH
32433: LD_VAR 0 4
32437: ARRAY
32438: NONEQUAL
32439: IFFALSE 32451
// begin result := false ;
32441: LD_ADDR_VAR 0 3
32445: PUSH
32446: LD_INT 0
32448: ST_TO_ADDR
// break ;
32449: GO 32453
// end ;
32451: GO 32414
32453: POP
32454: POP
// end else
32455: GO 32465
// result := false ;
32457: LD_ADDR_VAR 0 3
32461: PUSH
32462: LD_INT 0
32464: ST_TO_ADDR
// end ;
32465: LD_VAR 0 3
32469: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32470: LD_INT 0
32472: PPUSH
32473: PPUSH
// if not array1 or not array2 then
32474: LD_VAR 0 1
32478: NOT
32479: PUSH
32480: LD_VAR 0 2
32484: NOT
32485: OR
32486: IFFALSE 32490
// exit ;
32488: GO 32554
// result := true ;
32490: LD_ADDR_VAR 0 3
32494: PUSH
32495: LD_INT 1
32497: ST_TO_ADDR
// for i = 1 to array1 do
32498: LD_ADDR_VAR 0 4
32502: PUSH
32503: DOUBLE
32504: LD_INT 1
32506: DEC
32507: ST_TO_ADDR
32508: LD_VAR 0 1
32512: PUSH
32513: FOR_TO
32514: IFFALSE 32552
// if array1 [ i ] <> array2 [ i ] then
32516: LD_VAR 0 1
32520: PUSH
32521: LD_VAR 0 4
32525: ARRAY
32526: PUSH
32527: LD_VAR 0 2
32531: PUSH
32532: LD_VAR 0 4
32536: ARRAY
32537: NONEQUAL
32538: IFFALSE 32550
// begin result := false ;
32540: LD_ADDR_VAR 0 3
32544: PUSH
32545: LD_INT 0
32547: ST_TO_ADDR
// break ;
32548: GO 32552
// end ;
32550: GO 32513
32552: POP
32553: POP
// end ;
32554: LD_VAR 0 3
32558: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32559: LD_INT 0
32561: PPUSH
32562: PPUSH
32563: PPUSH
// pom := GetBase ( fac ) ;
32564: LD_ADDR_VAR 0 5
32568: PUSH
32569: LD_VAR 0 1
32573: PPUSH
32574: CALL_OW 274
32578: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32579: LD_ADDR_VAR 0 4
32583: PUSH
32584: LD_VAR 0 2
32588: PUSH
32589: LD_INT 1
32591: ARRAY
32592: PPUSH
32593: LD_VAR 0 2
32597: PUSH
32598: LD_INT 2
32600: ARRAY
32601: PPUSH
32602: LD_VAR 0 2
32606: PUSH
32607: LD_INT 3
32609: ARRAY
32610: PPUSH
32611: LD_VAR 0 2
32615: PUSH
32616: LD_INT 4
32618: ARRAY
32619: PPUSH
32620: CALL_OW 449
32624: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32625: LD_ADDR_VAR 0 3
32629: PUSH
32630: LD_VAR 0 5
32634: PPUSH
32635: LD_INT 1
32637: PPUSH
32638: CALL_OW 275
32642: PUSH
32643: LD_VAR 0 4
32647: PUSH
32648: LD_INT 1
32650: ARRAY
32651: GREATEREQUAL
32652: PUSH
32653: LD_VAR 0 5
32657: PPUSH
32658: LD_INT 2
32660: PPUSH
32661: CALL_OW 275
32665: PUSH
32666: LD_VAR 0 4
32670: PUSH
32671: LD_INT 2
32673: ARRAY
32674: GREATEREQUAL
32675: AND
32676: PUSH
32677: LD_VAR 0 5
32681: PPUSH
32682: LD_INT 3
32684: PPUSH
32685: CALL_OW 275
32689: PUSH
32690: LD_VAR 0 4
32694: PUSH
32695: LD_INT 3
32697: ARRAY
32698: GREATEREQUAL
32699: AND
32700: ST_TO_ADDR
// end ;
32701: LD_VAR 0 3
32705: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32706: LD_INT 0
32708: PPUSH
32709: PPUSH
32710: PPUSH
32711: PPUSH
// pom := GetBase ( building ) ;
32712: LD_ADDR_VAR 0 3
32716: PUSH
32717: LD_VAR 0 1
32721: PPUSH
32722: CALL_OW 274
32726: ST_TO_ADDR
// if not pom then
32727: LD_VAR 0 3
32731: NOT
32732: IFFALSE 32736
// exit ;
32734: GO 32906
// btype := GetBType ( building ) ;
32736: LD_ADDR_VAR 0 5
32740: PUSH
32741: LD_VAR 0 1
32745: PPUSH
32746: CALL_OW 266
32750: ST_TO_ADDR
// if btype = b_armoury then
32751: LD_VAR 0 5
32755: PUSH
32756: LD_INT 4
32758: EQUAL
32759: IFFALSE 32769
// btype := b_barracks ;
32761: LD_ADDR_VAR 0 5
32765: PUSH
32766: LD_INT 5
32768: ST_TO_ADDR
// if btype = b_depot then
32769: LD_VAR 0 5
32773: PUSH
32774: LD_INT 0
32776: EQUAL
32777: IFFALSE 32787
// btype := b_warehouse ;
32779: LD_ADDR_VAR 0 5
32783: PUSH
32784: LD_INT 1
32786: ST_TO_ADDR
// if btype = b_workshop then
32787: LD_VAR 0 5
32791: PUSH
32792: LD_INT 2
32794: EQUAL
32795: IFFALSE 32805
// btype := b_factory ;
32797: LD_ADDR_VAR 0 5
32801: PUSH
32802: LD_INT 3
32804: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32805: LD_ADDR_VAR 0 4
32809: PUSH
32810: LD_VAR 0 5
32814: PPUSH
32815: LD_VAR 0 1
32819: PPUSH
32820: CALL_OW 248
32824: PPUSH
32825: CALL_OW 450
32829: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32830: LD_ADDR_VAR 0 2
32834: PUSH
32835: LD_VAR 0 3
32839: PPUSH
32840: LD_INT 1
32842: PPUSH
32843: CALL_OW 275
32847: PUSH
32848: LD_VAR 0 4
32852: PUSH
32853: LD_INT 1
32855: ARRAY
32856: GREATEREQUAL
32857: PUSH
32858: LD_VAR 0 3
32862: PPUSH
32863: LD_INT 2
32865: PPUSH
32866: CALL_OW 275
32870: PUSH
32871: LD_VAR 0 4
32875: PUSH
32876: LD_INT 2
32878: ARRAY
32879: GREATEREQUAL
32880: AND
32881: PUSH
32882: LD_VAR 0 3
32886: PPUSH
32887: LD_INT 3
32889: PPUSH
32890: CALL_OW 275
32894: PUSH
32895: LD_VAR 0 4
32899: PUSH
32900: LD_INT 3
32902: ARRAY
32903: GREATEREQUAL
32904: AND
32905: ST_TO_ADDR
// end ;
32906: LD_VAR 0 2
32910: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32911: LD_INT 0
32913: PPUSH
32914: PPUSH
32915: PPUSH
// pom := GetBase ( building ) ;
32916: LD_ADDR_VAR 0 4
32920: PUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 274
32930: ST_TO_ADDR
// if not pom then
32931: LD_VAR 0 4
32935: NOT
32936: IFFALSE 32940
// exit ;
32938: GO 33041
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32940: LD_ADDR_VAR 0 5
32944: PUSH
32945: LD_VAR 0 2
32949: PPUSH
32950: LD_VAR 0 1
32954: PPUSH
32955: CALL_OW 248
32959: PPUSH
32960: CALL_OW 450
32964: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: LD_VAR 0 4
32974: PPUSH
32975: LD_INT 1
32977: PPUSH
32978: CALL_OW 275
32982: PUSH
32983: LD_VAR 0 5
32987: PUSH
32988: LD_INT 1
32990: ARRAY
32991: GREATEREQUAL
32992: PUSH
32993: LD_VAR 0 4
32997: PPUSH
32998: LD_INT 2
33000: PPUSH
33001: CALL_OW 275
33005: PUSH
33006: LD_VAR 0 5
33010: PUSH
33011: LD_INT 2
33013: ARRAY
33014: GREATEREQUAL
33015: AND
33016: PUSH
33017: LD_VAR 0 4
33021: PPUSH
33022: LD_INT 3
33024: PPUSH
33025: CALL_OW 275
33029: PUSH
33030: LD_VAR 0 5
33034: PUSH
33035: LD_INT 3
33037: ARRAY
33038: GREATEREQUAL
33039: AND
33040: ST_TO_ADDR
// end ;
33041: LD_VAR 0 3
33045: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33046: LD_INT 0
33048: PPUSH
33049: PPUSH
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
33054: PPUSH
33055: PPUSH
33056: PPUSH
33057: PPUSH
33058: PPUSH
// result := false ;
33059: LD_ADDR_VAR 0 8
33063: PUSH
33064: LD_INT 0
33066: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33067: LD_VAR 0 5
33071: NOT
33072: PUSH
33073: LD_VAR 0 1
33077: NOT
33078: OR
33079: PUSH
33080: LD_VAR 0 2
33084: NOT
33085: OR
33086: PUSH
33087: LD_VAR 0 3
33091: NOT
33092: OR
33093: IFFALSE 33097
// exit ;
33095: GO 33911
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33097: LD_ADDR_VAR 0 14
33101: PUSH
33102: LD_VAR 0 1
33106: PPUSH
33107: LD_VAR 0 2
33111: PPUSH
33112: LD_VAR 0 3
33116: PPUSH
33117: LD_VAR 0 4
33121: PPUSH
33122: LD_VAR 0 5
33126: PUSH
33127: LD_INT 1
33129: ARRAY
33130: PPUSH
33131: CALL_OW 248
33135: PPUSH
33136: LD_INT 0
33138: PPUSH
33139: CALL 34748 0 6
33143: ST_TO_ADDR
// if not hexes then
33144: LD_VAR 0 14
33148: NOT
33149: IFFALSE 33153
// exit ;
33151: GO 33911
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33153: LD_ADDR_VAR 0 17
33157: PUSH
33158: LD_VAR 0 5
33162: PPUSH
33163: LD_INT 22
33165: PUSH
33166: LD_VAR 0 13
33170: PPUSH
33171: CALL_OW 255
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 30
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 30
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PPUSH
33212: CALL_OW 72
33216: ST_TO_ADDR
// for i = 1 to hexes do
33217: LD_ADDR_VAR 0 9
33221: PUSH
33222: DOUBLE
33223: LD_INT 1
33225: DEC
33226: ST_TO_ADDR
33227: LD_VAR 0 14
33231: PUSH
33232: FOR_TO
33233: IFFALSE 33909
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33235: LD_ADDR_VAR 0 13
33239: PUSH
33240: LD_VAR 0 14
33244: PUSH
33245: LD_VAR 0 9
33249: ARRAY
33250: PUSH
33251: LD_INT 1
33253: ARRAY
33254: PPUSH
33255: LD_VAR 0 14
33259: PUSH
33260: LD_VAR 0 9
33264: ARRAY
33265: PUSH
33266: LD_INT 2
33268: ARRAY
33269: PPUSH
33270: CALL_OW 428
33274: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33275: LD_VAR 0 14
33279: PUSH
33280: LD_VAR 0 9
33284: ARRAY
33285: PUSH
33286: LD_INT 1
33288: ARRAY
33289: PPUSH
33290: LD_VAR 0 14
33294: PUSH
33295: LD_VAR 0 9
33299: ARRAY
33300: PUSH
33301: LD_INT 2
33303: ARRAY
33304: PPUSH
33305: CALL_OW 351
33309: PUSH
33310: LD_VAR 0 14
33314: PUSH
33315: LD_VAR 0 9
33319: ARRAY
33320: PUSH
33321: LD_INT 1
33323: ARRAY
33324: PPUSH
33325: LD_VAR 0 14
33329: PUSH
33330: LD_VAR 0 9
33334: ARRAY
33335: PUSH
33336: LD_INT 2
33338: ARRAY
33339: PPUSH
33340: CALL_OW 488
33344: NOT
33345: OR
33346: PUSH
33347: LD_VAR 0 13
33351: PPUSH
33352: CALL_OW 247
33356: PUSH
33357: LD_INT 3
33359: EQUAL
33360: OR
33361: IFFALSE 33367
// exit ;
33363: POP
33364: POP
33365: GO 33911
// if not tmp then
33367: LD_VAR 0 13
33371: NOT
33372: IFFALSE 33376
// continue ;
33374: GO 33232
// result := true ;
33376: LD_ADDR_VAR 0 8
33380: PUSH
33381: LD_INT 1
33383: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33384: LD_VAR 0 6
33388: PUSH
33389: LD_VAR 0 13
33393: PPUSH
33394: CALL_OW 247
33398: PUSH
33399: LD_INT 2
33401: EQUAL
33402: AND
33403: PUSH
33404: LD_VAR 0 13
33408: PPUSH
33409: CALL_OW 263
33413: PUSH
33414: LD_INT 1
33416: EQUAL
33417: AND
33418: IFFALSE 33582
// begin if IsDrivenBy ( tmp ) then
33420: LD_VAR 0 13
33424: PPUSH
33425: CALL_OW 311
33429: IFFALSE 33433
// continue ;
33431: GO 33232
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33433: LD_VAR 0 6
33437: PPUSH
33438: LD_INT 3
33440: PUSH
33441: LD_INT 60
33443: PUSH
33444: EMPTY
33445: LIST
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 3
33453: PUSH
33454: LD_INT 55
33456: PUSH
33457: EMPTY
33458: LIST
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PPUSH
33468: CALL_OW 72
33472: IFFALSE 33580
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33474: LD_ADDR_VAR 0 18
33478: PUSH
33479: LD_VAR 0 6
33483: PPUSH
33484: LD_INT 3
33486: PUSH
33487: LD_INT 60
33489: PUSH
33490: EMPTY
33491: LIST
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 3
33499: PUSH
33500: LD_INT 55
33502: PUSH
33503: EMPTY
33504: LIST
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PPUSH
33514: CALL_OW 72
33518: PUSH
33519: LD_INT 1
33521: ARRAY
33522: ST_TO_ADDR
// if IsInUnit ( driver ) then
33523: LD_VAR 0 18
33527: PPUSH
33528: CALL_OW 310
33532: IFFALSE 33543
// ComExit ( driver ) ;
33534: LD_VAR 0 18
33538: PPUSH
33539: CALL 57932 0 1
// AddComEnterUnit ( driver , tmp ) ;
33543: LD_VAR 0 18
33547: PPUSH
33548: LD_VAR 0 13
33552: PPUSH
33553: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33557: LD_VAR 0 18
33561: PPUSH
33562: LD_VAR 0 7
33566: PPUSH
33567: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33571: LD_VAR 0 18
33575: PPUSH
33576: CALL_OW 181
// end ; continue ;
33580: GO 33232
// end ; if not cleaners or not tmp in cleaners then
33582: LD_VAR 0 6
33586: NOT
33587: PUSH
33588: LD_VAR 0 13
33592: PUSH
33593: LD_VAR 0 6
33597: IN
33598: NOT
33599: OR
33600: IFFALSE 33907
// begin if dep then
33602: LD_VAR 0 17
33606: IFFALSE 33742
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33608: LD_ADDR_VAR 0 16
33612: PUSH
33613: LD_VAR 0 17
33617: PUSH
33618: LD_INT 1
33620: ARRAY
33621: PPUSH
33622: CALL_OW 250
33626: PPUSH
33627: LD_VAR 0 17
33631: PUSH
33632: LD_INT 1
33634: ARRAY
33635: PPUSH
33636: CALL_OW 254
33640: PPUSH
33641: LD_INT 5
33643: PPUSH
33644: CALL_OW 272
33648: PUSH
33649: LD_VAR 0 17
33653: PUSH
33654: LD_INT 1
33656: ARRAY
33657: PPUSH
33658: CALL_OW 251
33662: PPUSH
33663: LD_VAR 0 17
33667: PUSH
33668: LD_INT 1
33670: ARRAY
33671: PPUSH
33672: CALL_OW 254
33676: PPUSH
33677: LD_INT 5
33679: PPUSH
33680: CALL_OW 273
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33689: LD_VAR 0 16
33693: PUSH
33694: LD_INT 1
33696: ARRAY
33697: PPUSH
33698: LD_VAR 0 16
33702: PUSH
33703: LD_INT 2
33705: ARRAY
33706: PPUSH
33707: CALL_OW 488
33711: IFFALSE 33742
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33713: LD_VAR 0 13
33717: PPUSH
33718: LD_VAR 0 16
33722: PUSH
33723: LD_INT 1
33725: ARRAY
33726: PPUSH
33727: LD_VAR 0 16
33731: PUSH
33732: LD_INT 2
33734: ARRAY
33735: PPUSH
33736: CALL_OW 111
// continue ;
33740: GO 33232
// end ; end ; r := GetDir ( tmp ) ;
33742: LD_ADDR_VAR 0 15
33746: PUSH
33747: LD_VAR 0 13
33751: PPUSH
33752: CALL_OW 254
33756: ST_TO_ADDR
// if r = 5 then
33757: LD_VAR 0 15
33761: PUSH
33762: LD_INT 5
33764: EQUAL
33765: IFFALSE 33775
// r := 0 ;
33767: LD_ADDR_VAR 0 15
33771: PUSH
33772: LD_INT 0
33774: ST_TO_ADDR
// for j = r to 5 do
33775: LD_ADDR_VAR 0 10
33779: PUSH
33780: DOUBLE
33781: LD_VAR 0 15
33785: DEC
33786: ST_TO_ADDR
33787: LD_INT 5
33789: PUSH
33790: FOR_TO
33791: IFFALSE 33905
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33793: LD_ADDR_VAR 0 11
33797: PUSH
33798: LD_VAR 0 13
33802: PPUSH
33803: CALL_OW 250
33807: PPUSH
33808: LD_VAR 0 10
33812: PPUSH
33813: LD_INT 2
33815: PPUSH
33816: CALL_OW 272
33820: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33821: LD_ADDR_VAR 0 12
33825: PUSH
33826: LD_VAR 0 13
33830: PPUSH
33831: CALL_OW 251
33835: PPUSH
33836: LD_VAR 0 10
33840: PPUSH
33841: LD_INT 2
33843: PPUSH
33844: CALL_OW 273
33848: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33849: LD_VAR 0 11
33853: PPUSH
33854: LD_VAR 0 12
33858: PPUSH
33859: CALL_OW 488
33863: PUSH
33864: LD_VAR 0 11
33868: PPUSH
33869: LD_VAR 0 12
33873: PPUSH
33874: CALL_OW 428
33878: NOT
33879: AND
33880: IFFALSE 33903
// begin ComMoveXY ( tmp , _x , _y ) ;
33882: LD_VAR 0 13
33886: PPUSH
33887: LD_VAR 0 11
33891: PPUSH
33892: LD_VAR 0 12
33896: PPUSH
33897: CALL_OW 111
// break ;
33901: GO 33905
// end ; end ;
33903: GO 33790
33905: POP
33906: POP
// end ; end ;
33907: GO 33232
33909: POP
33910: POP
// end ;
33911: LD_VAR 0 8
33915: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33916: LD_INT 0
33918: PPUSH
33919: PPUSH
33920: PPUSH
33921: PPUSH
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
33926: PPUSH
33927: PPUSH
// result := false ;
33928: LD_ADDR_VAR 0 6
33932: PUSH
33933: LD_INT 0
33935: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33936: LD_VAR 0 1
33940: NOT
33941: PUSH
33942: LD_VAR 0 1
33946: PPUSH
33947: CALL_OW 266
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: IN
33962: NOT
33963: OR
33964: PUSH
33965: LD_VAR 0 2
33969: NOT
33970: OR
33971: PUSH
33972: LD_VAR 0 5
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: LD_INT 3
33988: PUSH
33989: LD_INT 4
33991: PUSH
33992: LD_INT 5
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: IN
34003: NOT
34004: OR
34005: PUSH
34006: LD_VAR 0 3
34010: PPUSH
34011: LD_VAR 0 4
34015: PPUSH
34016: CALL_OW 488
34020: NOT
34021: OR
34022: IFFALSE 34026
// exit ;
34024: GO 34743
// pom := GetBase ( depot ) ;
34026: LD_ADDR_VAR 0 10
34030: PUSH
34031: LD_VAR 0 1
34035: PPUSH
34036: CALL_OW 274
34040: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34041: LD_ADDR_VAR 0 11
34045: PUSH
34046: LD_VAR 0 2
34050: PPUSH
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL_OW 248
34060: PPUSH
34061: CALL_OW 450
34065: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34066: LD_VAR 0 10
34070: PPUSH
34071: LD_INT 1
34073: PPUSH
34074: CALL_OW 275
34078: PUSH
34079: LD_VAR 0 11
34083: PUSH
34084: LD_INT 1
34086: ARRAY
34087: GREATEREQUAL
34088: PUSH
34089: LD_VAR 0 10
34093: PPUSH
34094: LD_INT 2
34096: PPUSH
34097: CALL_OW 275
34101: PUSH
34102: LD_VAR 0 11
34106: PUSH
34107: LD_INT 2
34109: ARRAY
34110: GREATEREQUAL
34111: AND
34112: PUSH
34113: LD_VAR 0 10
34117: PPUSH
34118: LD_INT 3
34120: PPUSH
34121: CALL_OW 275
34125: PUSH
34126: LD_VAR 0 11
34130: PUSH
34131: LD_INT 3
34133: ARRAY
34134: GREATEREQUAL
34135: AND
34136: NOT
34137: IFFALSE 34141
// exit ;
34139: GO 34743
// if GetBType ( depot ) = b_depot then
34141: LD_VAR 0 1
34145: PPUSH
34146: CALL_OW 266
34150: PUSH
34151: LD_INT 0
34153: EQUAL
34154: IFFALSE 34166
// dist := 28 else
34156: LD_ADDR_VAR 0 14
34160: PUSH
34161: LD_INT 28
34163: ST_TO_ADDR
34164: GO 34174
// dist := 36 ;
34166: LD_ADDR_VAR 0 14
34170: PUSH
34171: LD_INT 36
34173: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34174: LD_VAR 0 1
34178: PPUSH
34179: LD_VAR 0 3
34183: PPUSH
34184: LD_VAR 0 4
34188: PPUSH
34189: CALL_OW 297
34193: PUSH
34194: LD_VAR 0 14
34198: GREATER
34199: IFFALSE 34203
// exit ;
34201: GO 34743
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34203: LD_ADDR_VAR 0 12
34207: PUSH
34208: LD_VAR 0 2
34212: PPUSH
34213: LD_VAR 0 3
34217: PPUSH
34218: LD_VAR 0 4
34222: PPUSH
34223: LD_VAR 0 5
34227: PPUSH
34228: LD_VAR 0 1
34232: PPUSH
34233: CALL_OW 248
34237: PPUSH
34238: LD_INT 0
34240: PPUSH
34241: CALL 34748 0 6
34245: ST_TO_ADDR
// if not hexes then
34246: LD_VAR 0 12
34250: NOT
34251: IFFALSE 34255
// exit ;
34253: GO 34743
// hex := GetHexInfo ( x , y ) ;
34255: LD_ADDR_VAR 0 15
34259: PUSH
34260: LD_VAR 0 3
34264: PPUSH
34265: LD_VAR 0 4
34269: PPUSH
34270: CALL_OW 546
34274: ST_TO_ADDR
// if hex [ 1 ] then
34275: LD_VAR 0 15
34279: PUSH
34280: LD_INT 1
34282: ARRAY
34283: IFFALSE 34287
// exit ;
34285: GO 34743
// height := hex [ 2 ] ;
34287: LD_ADDR_VAR 0 13
34291: PUSH
34292: LD_VAR 0 15
34296: PUSH
34297: LD_INT 2
34299: ARRAY
34300: ST_TO_ADDR
// for i = 1 to hexes do
34301: LD_ADDR_VAR 0 7
34305: PUSH
34306: DOUBLE
34307: LD_INT 1
34309: DEC
34310: ST_TO_ADDR
34311: LD_VAR 0 12
34315: PUSH
34316: FOR_TO
34317: IFFALSE 34647
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34319: LD_VAR 0 12
34323: PUSH
34324: LD_VAR 0 7
34328: ARRAY
34329: PUSH
34330: LD_INT 1
34332: ARRAY
34333: PPUSH
34334: LD_VAR 0 12
34338: PUSH
34339: LD_VAR 0 7
34343: ARRAY
34344: PUSH
34345: LD_INT 2
34347: ARRAY
34348: PPUSH
34349: CALL_OW 488
34353: NOT
34354: PUSH
34355: LD_VAR 0 12
34359: PUSH
34360: LD_VAR 0 7
34364: ARRAY
34365: PUSH
34366: LD_INT 1
34368: ARRAY
34369: PPUSH
34370: LD_VAR 0 12
34374: PUSH
34375: LD_VAR 0 7
34379: ARRAY
34380: PUSH
34381: LD_INT 2
34383: ARRAY
34384: PPUSH
34385: CALL_OW 428
34389: PUSH
34390: LD_INT 0
34392: GREATER
34393: OR
34394: PUSH
34395: LD_VAR 0 12
34399: PUSH
34400: LD_VAR 0 7
34404: ARRAY
34405: PUSH
34406: LD_INT 1
34408: ARRAY
34409: PPUSH
34410: LD_VAR 0 12
34414: PUSH
34415: LD_VAR 0 7
34419: ARRAY
34420: PUSH
34421: LD_INT 2
34423: ARRAY
34424: PPUSH
34425: CALL_OW 351
34429: OR
34430: IFFALSE 34436
// exit ;
34432: POP
34433: POP
34434: GO 34743
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34436: LD_ADDR_VAR 0 8
34440: PUSH
34441: LD_VAR 0 12
34445: PUSH
34446: LD_VAR 0 7
34450: ARRAY
34451: PUSH
34452: LD_INT 1
34454: ARRAY
34455: PPUSH
34456: LD_VAR 0 12
34460: PUSH
34461: LD_VAR 0 7
34465: ARRAY
34466: PUSH
34467: LD_INT 2
34469: ARRAY
34470: PPUSH
34471: CALL_OW 546
34475: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34476: LD_VAR 0 8
34480: PUSH
34481: LD_INT 1
34483: ARRAY
34484: PUSH
34485: LD_VAR 0 8
34489: PUSH
34490: LD_INT 2
34492: ARRAY
34493: PUSH
34494: LD_VAR 0 13
34498: PUSH
34499: LD_INT 2
34501: PLUS
34502: GREATER
34503: OR
34504: PUSH
34505: LD_VAR 0 8
34509: PUSH
34510: LD_INT 2
34512: ARRAY
34513: PUSH
34514: LD_VAR 0 13
34518: PUSH
34519: LD_INT 2
34521: MINUS
34522: LESS
34523: OR
34524: PUSH
34525: LD_VAR 0 8
34529: PUSH
34530: LD_INT 3
34532: ARRAY
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: LD_INT 8
34539: PUSH
34540: LD_INT 9
34542: PUSH
34543: LD_INT 10
34545: PUSH
34546: LD_INT 11
34548: PUSH
34549: LD_INT 12
34551: PUSH
34552: LD_INT 13
34554: PUSH
34555: LD_INT 16
34557: PUSH
34558: LD_INT 17
34560: PUSH
34561: LD_INT 18
34563: PUSH
34564: LD_INT 19
34566: PUSH
34567: LD_INT 20
34569: PUSH
34570: LD_INT 21
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: IN
34588: NOT
34589: OR
34590: PUSH
34591: LD_VAR 0 8
34595: PUSH
34596: LD_INT 5
34598: ARRAY
34599: NOT
34600: OR
34601: PUSH
34602: LD_VAR 0 8
34606: PUSH
34607: LD_INT 6
34609: ARRAY
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: LD_INT 7
34619: PUSH
34620: LD_INT 9
34622: PUSH
34623: LD_INT 10
34625: PUSH
34626: LD_INT 11
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: IN
34637: NOT
34638: OR
34639: IFFALSE 34645
// exit ;
34641: POP
34642: POP
34643: GO 34743
// end ;
34645: GO 34316
34647: POP
34648: POP
// side := GetSide ( depot ) ;
34649: LD_ADDR_VAR 0 9
34653: PUSH
34654: LD_VAR 0 1
34658: PPUSH
34659: CALL_OW 255
34663: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34664: LD_VAR 0 9
34668: PPUSH
34669: LD_VAR 0 3
34673: PPUSH
34674: LD_VAR 0 4
34678: PPUSH
34679: LD_INT 20
34681: PPUSH
34682: CALL 27064 0 4
34686: PUSH
34687: LD_INT 4
34689: ARRAY
34690: IFFALSE 34694
// exit ;
34692: GO 34743
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34694: LD_VAR 0 2
34698: PUSH
34699: LD_INT 29
34701: PUSH
34702: LD_INT 30
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: IN
34709: PUSH
34710: LD_VAR 0 3
34714: PPUSH
34715: LD_VAR 0 4
34719: PPUSH
34720: LD_VAR 0 9
34724: PPUSH
34725: CALL_OW 440
34729: NOT
34730: AND
34731: IFFALSE 34735
// exit ;
34733: GO 34743
// result := true ;
34735: LD_ADDR_VAR 0 6
34739: PUSH
34740: LD_INT 1
34742: ST_TO_ADDR
// end ;
34743: LD_VAR 0 6
34747: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34748: LD_INT 0
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
34761: PPUSH
34762: PPUSH
34763: PPUSH
34764: PPUSH
34765: PPUSH
34766: PPUSH
34767: PPUSH
34768: PPUSH
34769: PPUSH
34770: PPUSH
34771: PPUSH
34772: PPUSH
34773: PPUSH
34774: PPUSH
34775: PPUSH
34776: PPUSH
34777: PPUSH
34778: PPUSH
34779: PPUSH
34780: PPUSH
34781: PPUSH
34782: PPUSH
34783: PPUSH
34784: PPUSH
34785: PPUSH
34786: PPUSH
34787: PPUSH
34788: PPUSH
34789: PPUSH
34790: PPUSH
34791: PPUSH
34792: PPUSH
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
34797: PPUSH
34798: PPUSH
34799: PPUSH
34800: PPUSH
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
34806: PPUSH
34807: PPUSH
// result = [ ] ;
34808: LD_ADDR_VAR 0 7
34812: PUSH
34813: EMPTY
34814: ST_TO_ADDR
// temp_list = [ ] ;
34815: LD_ADDR_VAR 0 9
34819: PUSH
34820: EMPTY
34821: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34822: LD_VAR 0 4
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: LD_INT 5
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: IN
34853: NOT
34854: PUSH
34855: LD_VAR 0 1
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: IN
34870: PUSH
34871: LD_VAR 0 5
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: IN
34890: NOT
34891: AND
34892: OR
34893: IFFALSE 34897
// exit ;
34895: GO 53288
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34897: LD_VAR 0 1
34901: PUSH
34902: LD_INT 6
34904: PUSH
34905: LD_INT 7
34907: PUSH
34908: LD_INT 8
34910: PUSH
34911: LD_INT 13
34913: PUSH
34914: LD_INT 12
34916: PUSH
34917: LD_INT 15
34919: PUSH
34920: LD_INT 11
34922: PUSH
34923: LD_INT 14
34925: PUSH
34926: LD_INT 10
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: IN
34940: IFFALSE 34950
// btype = b_lab ;
34942: LD_ADDR_VAR 0 1
34946: PUSH
34947: LD_INT 6
34949: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34950: LD_VAR 0 6
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: LIST
34968: IN
34969: NOT
34970: PUSH
34971: LD_VAR 0 1
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: LD_INT 2
34984: PUSH
34985: LD_INT 3
34987: PUSH
34988: LD_INT 6
34990: PUSH
34991: LD_INT 36
34993: PUSH
34994: LD_INT 4
34996: PUSH
34997: LD_INT 5
34999: PUSH
35000: LD_INT 31
35002: PUSH
35003: LD_INT 32
35005: PUSH
35006: LD_INT 33
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: IN
35022: NOT
35023: PUSH
35024: LD_VAR 0 6
35028: PUSH
35029: LD_INT 1
35031: EQUAL
35032: AND
35033: OR
35034: PUSH
35035: LD_VAR 0 1
35039: PUSH
35040: LD_INT 2
35042: PUSH
35043: LD_INT 3
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: IN
35050: NOT
35051: PUSH
35052: LD_VAR 0 6
35056: PUSH
35057: LD_INT 2
35059: EQUAL
35060: AND
35061: OR
35062: IFFALSE 35072
// mode = 0 ;
35064: LD_ADDR_VAR 0 6
35068: PUSH
35069: LD_INT 0
35071: ST_TO_ADDR
// case mode of 0 :
35072: LD_VAR 0 6
35076: PUSH
35077: LD_INT 0
35079: DOUBLE
35080: EQUAL
35081: IFTRUE 35085
35083: GO 46538
35085: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35086: LD_ADDR_VAR 0 11
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: NEG
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: LD_INT 2
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 2
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: LD_INT 1
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 3
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 3
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35279: LD_ADDR_VAR 0 12
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 1
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: LD_INT 1
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 2
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: NEG
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 2
35402: NEG
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 2
35413: NEG
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 2
35425: NEG
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 3
35436: NEG
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 3
35447: NEG
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35475: LD_ADDR_VAR 0 13
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: NEG
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: LD_INT 2
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 2
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 2
35610: NEG
35611: PUSH
35612: LD_INT 2
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 2
35622: NEG
35623: PUSH
35624: LD_INT 3
35626: NEG
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 3
35634: NEG
35635: PUSH
35636: LD_INT 2
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 3
35646: NEG
35647: PUSH
35648: LD_INT 3
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35674: LD_ADDR_VAR 0 14
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: LD_INT 1
35694: NEG
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: LD_INT 0
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: NEG
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: LD_INT 3
35824: NEG
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 3
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: LD_INT 2
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35870: LD_ADDR_VAR 0 15
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: NEG
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: NEG
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 3
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 3
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36063: LD_ADDR_VAR 0 16
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 2
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 2
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 2
36186: NEG
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: LD_INT 2
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 3
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 3
36220: PUSH
36221: LD_INT 3
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: LD_INT 3
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36256: LD_ADDR_VAR 0 17
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: NEG
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: NEG
36338: PUSH
36339: LD_INT 2
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 2
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 1
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 2
36443: NEG
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 2
36455: NEG
36456: PUSH
36457: LD_INT 2
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36486: LD_ADDR_VAR 0 18
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: LD_INT 2
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 2
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: LD_INT 2
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: NEG
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 2
36673: NEG
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 2
36685: NEG
36686: PUSH
36687: LD_INT 2
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36716: LD_ADDR_VAR 0 19
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 2
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 2
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 1
36823: NEG
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 2
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 2
36903: NEG
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 2
36915: NEG
36916: PUSH
36917: LD_INT 2
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36946: LD_ADDR_VAR 0 20
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: LD_INT 2
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 0
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: LD_INT 2
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: NEG
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 2
37133: NEG
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 2
37145: NEG
37146: PUSH
37147: LD_INT 2
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37176: LD_ADDR_VAR 0 21
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: NEG
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: LD_INT 2
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: LD_INT 2
37272: NEG
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 2
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: LD_INT 2
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: PUSH
37322: LD_INT 2
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 2
37352: NEG
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 2
37363: NEG
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 2
37375: NEG
37376: PUSH
37377: LD_INT 2
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37406: LD_ADDR_VAR 0 22
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: NEG
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: NEG
37488: PUSH
37489: LD_INT 2
37491: NEG
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: LD_INT 2
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 2
37541: PUSH
37542: LD_INT 2
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 2
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 2
37582: NEG
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: NEG
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 2
37605: NEG
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37636: LD_ADDR_VAR 0 23
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: LD_INT 2
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: NEG
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 2
37823: NEG
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 2
37847: NEG
37848: PUSH
37849: LD_INT 3
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: LD_INT 3
37863: NEG
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: LD_INT 2
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37916: LD_ADDR_VAR 0 24
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 2
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: LD_INT 2
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 3
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 3
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38192: LD_ADDR_VAR 0 25
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 2
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 2
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 2
38327: PUSH
38328: LD_INT 2
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 2
38379: NEG
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 2
38391: NEG
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 3
38403: PUSH
38404: LD_INT 1
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 3
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: LD_INT 3
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38466: LD_ADDR_VAR 0 26
38470: PUSH
38471: LD_INT 0
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: LD_INT 1
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: NEG
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: LD_INT 2
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 2
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: NEG
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 2
38653: NEG
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 2
38665: NEG
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: PUSH
38678: LD_INT 3
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: LD_INT 3
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38742: LD_ADDR_VAR 0 27
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: LD_INT 2
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 2
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 2
38941: NEG
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 3
38975: NEG
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 3
38987: NEG
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39022: LD_ADDR_VAR 0 28
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 2
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: LD_INT 2
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 2
39209: NEG
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 2
39221: NEG
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: LD_INT 3
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 3
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 3
39257: NEG
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 3
39269: NEG
39270: PUSH
39271: LD_INT 2
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39304: LD_ADDR_VAR 0 29
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 2
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 2
39470: NEG
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: NEG
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: LD_INT 3
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 2
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 3
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 3
39548: NEG
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39583: LD_ADDR_VAR 0 30
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: LD_INT 2
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: LD_INT 2
39679: NEG
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: LD_INT 3
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 3
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: LD_INT 3
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 3
39826: NEG
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39861: LD_ADDR_VAR 0 31
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 2
40050: NEG
40051: PUSH
40052: LD_INT 3
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 2
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 3
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: LD_INT 3
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40139: LD_ADDR_VAR 0 32
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 1
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 2
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: NEG
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 3
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 3
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 3
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 3
40382: NEG
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40417: LD_ADDR_VAR 0 33
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: LD_INT 2
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: LD_INT 2
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: NEG
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 2
40595: NEG
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: LD_INT 3
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 2
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 3
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 3
40661: NEG
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40696: LD_ADDR_VAR 0 34
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: LD_INT 2
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: NEG
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 2
40875: NEG
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 3
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 2
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 3
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 3
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 3
40941: NEG
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40976: LD_ADDR_VAR 0 35
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41088: LD_ADDR_VAR 0 36
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: LD_INT 2
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41200: LD_ADDR_VAR 0 37
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41312: LD_ADDR_VAR 0 38
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: NEG
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41424: LD_ADDR_VAR 0 39
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41536: LD_ADDR_VAR 0 40
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41648: LD_ADDR_VAR 0 41
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: NEG
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 2
41826: NEG
41827: PUSH
41828: LD_INT 2
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: NEG
41839: PUSH
41840: LD_INT 3
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 3
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 3
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 3
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 3
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 3
41922: NEG
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 3
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 3
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 3
41957: NEG
41958: PUSH
41959: LD_INT 3
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41998: LD_ADDR_VAR 0 42
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 2
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 2
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 2
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: LD_INT 3
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: LD_INT 3
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 3
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 3
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 3
42244: PUSH
42245: LD_INT 3
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: LD_INT 3
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 3
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 3
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 3
42295: NEG
42296: PUSH
42297: LD_INT 2
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: NEG
42308: PUSH
42309: LD_INT 3
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42348: LD_ADDR_VAR 0 43
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: LD_INT 3
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 3
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: LD_INT 3
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 3
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 2
42633: NEG
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 3
42644: NEG
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 3
42655: NEG
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42696: LD_ADDR_VAR 0 44
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 2
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: LD_INT 3
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 3
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 3
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 3
42939: PUSH
42940: LD_INT 3
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: LD_INT 3
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 3
42970: NEG
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 3
42981: NEG
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 3
42993: NEG
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 3
43005: NEG
43006: PUSH
43007: LD_INT 3
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43046: LD_ADDR_VAR 0 45
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: LD_INT 1
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 2
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: LD_INT 3
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: LD_INT 3
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 3
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 3
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 3
43343: NEG
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 3
43355: NEG
43356: PUSH
43357: LD_INT 3
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43396: LD_ADDR_VAR 0 46
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: LD_INT 3
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 3
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 3
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 3
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 3
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 2
43681: NEG
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 3
43703: NEG
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43744: LD_ADDR_VAR 0 47
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43895: LD_ADDR_VAR 0 48
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44042: LD_ADDR_VAR 0 49
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44186: LD_ADDR_VAR 0 50
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44330: LD_ADDR_VAR 0 51
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44477: LD_ADDR_VAR 0 52
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44628: LD_ADDR_VAR 0 53
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44858: LD_ADDR_VAR 0 54
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45088: LD_ADDR_VAR 0 55
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45318: LD_ADDR_VAR 0 56
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45548: LD_ADDR_VAR 0 57
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 2
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45778: LD_ADDR_VAR 0 58
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 2
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 2
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46008: LD_ADDR_VAR 0 59
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46096: LD_ADDR_VAR 0 60
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46184: LD_ADDR_VAR 0 61
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46272: LD_ADDR_VAR 0 62
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46360: LD_ADDR_VAR 0 63
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46448: LD_ADDR_VAR 0 64
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: ST_TO_ADDR
// end ; 1 :
46536: GO 52433
46538: LD_INT 1
46540: DOUBLE
46541: EQUAL
46542: IFTRUE 46546
46544: GO 49169
46546: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46547: LD_ADDR_VAR 0 11
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 3
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 3
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46591: LD_ADDR_VAR 0 12
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 3
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 3
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46632: LD_ADDR_VAR 0 13
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: LD_INT 3
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 3
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46672: LD_ADDR_VAR 0 14
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: LIST
46712: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46713: LD_ADDR_VAR 0 15
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 3
46731: NEG
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 3
46742: NEG
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: LIST
46756: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46757: LD_ADDR_VAR 0 16
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 3
46776: NEG
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: LD_INT 3
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46803: LD_ADDR_VAR 0 17
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 3
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46847: LD_ADDR_VAR 0 18
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 3
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: LIST
46887: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46888: LD_ADDR_VAR 0 19
46892: PUSH
46893: LD_INT 3
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: LD_INT 3
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: LD_INT 3
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: LIST
46927: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46928: LD_ADDR_VAR 0 20
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 3
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 3
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46969: LD_ADDR_VAR 0 21
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47013: LD_ADDR_VAR 0 22
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: LD_INT 3
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: NEG
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: LD_INT 3
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: LIST
47058: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47059: LD_ADDR_VAR 0 23
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 3
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 4
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: LD_INT 3
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47103: LD_ADDR_VAR 0 24
47107: PUSH
47108: LD_INT 3
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 3
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 4
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: LIST
47143: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47144: LD_ADDR_VAR 0 25
47148: PUSH
47149: LD_INT 3
47151: PUSH
47152: LD_INT 3
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 4
47161: PUSH
47162: LD_INT 3
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: LD_INT 4
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47184: LD_ADDR_VAR 0 26
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 3
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 4
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 3
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47225: LD_ADDR_VAR 0 27
47229: PUSH
47230: LD_INT 3
47232: NEG
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 4
47254: NEG
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47269: LD_ADDR_VAR 0 28
47273: PUSH
47274: LD_INT 3
47276: NEG
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 3
47288: NEG
47289: PUSH
47290: LD_INT 4
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 4
47300: NEG
47301: PUSH
47302: LD_INT 3
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47315: LD_ADDR_VAR 0 29
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 3
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 3
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 4
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 4
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: LD_INT 3
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 5
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 5
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 4
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 6
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 6
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 5
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47470: LD_ADDR_VAR 0 30
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 3
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 3
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 4
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 4
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 4
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 5
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 5
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 5
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 6
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 6
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47613: LD_ADDR_VAR 0 31
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 4
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 4
47660: PUSH
47661: LD_INT 4
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 3
47670: PUSH
47671: LD_INT 4
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 5
47680: PUSH
47681: LD_INT 4
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 5
47690: PUSH
47691: LD_INT 5
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 4
47700: PUSH
47701: LD_INT 5
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 6
47710: PUSH
47711: LD_INT 5
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 6
47720: PUSH
47721: LD_INT 6
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 5
47730: PUSH
47731: LD_INT 6
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47752: LD_ADDR_VAR 0 32
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 3
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 4
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 4
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 5
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 5
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 4
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 6
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 6
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 5
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47895: LD_ADDR_VAR 0 33
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: NEG
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 3
47924: NEG
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 3
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 4
47947: NEG
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 4
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 4
47970: NEG
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 5
47981: NEG
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 5
47992: NEG
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 5
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 6
48015: NEG
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 6
48026: NEG
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48050: LD_ADDR_VAR 0 34
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 3
48069: NEG
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: NEG
48082: PUSH
48083: LD_INT 3
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: LD_INT 4
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 4
48105: NEG
48106: PUSH
48107: LD_INT 3
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 4
48117: NEG
48118: PUSH
48119: LD_INT 4
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 4
48129: NEG
48130: PUSH
48131: LD_INT 5
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 5
48141: NEG
48142: PUSH
48143: LD_INT 4
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 5
48153: NEG
48154: PUSH
48155: LD_INT 5
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 5
48165: NEG
48166: PUSH
48167: LD_INT 6
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 6
48177: NEG
48178: PUSH
48179: LD_INT 5
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 6
48189: NEG
48190: PUSH
48191: LD_INT 6
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48213: LD_ADDR_VAR 0 41
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 3
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48257: LD_ADDR_VAR 0 42
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: LIST
48297: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48298: LD_ADDR_VAR 0 43
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: LD_INT 3
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48338: LD_ADDR_VAR 0 44
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 3
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: LIST
48378: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48379: LD_ADDR_VAR 0 45
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: LIST
48422: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48423: LD_ADDR_VAR 0 46
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 3
48454: NEG
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: LIST
48468: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48469: LD_ADDR_VAR 0 47
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: LD_INT 3
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 3
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48502: LD_ADDR_VAR 0 48
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48533: LD_ADDR_VAR 0 49
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 3
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48562: LD_ADDR_VAR 0 50
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: LD_INT 3
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 3
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48591: LD_ADDR_VAR 0 51
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48622: LD_ADDR_VAR 0 52
48626: PUSH
48627: LD_INT 3
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 3
48641: NEG
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48655: LD_ADDR_VAR 0 53
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 3
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 3
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: LIST
48698: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48699: LD_ADDR_VAR 0 54
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 3
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48740: LD_ADDR_VAR 0 55
48744: PUSH
48745: LD_INT 3
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 3
48757: PUSH
48758: LD_INT 3
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: LD_INT 3
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48780: LD_ADDR_VAR 0 56
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 3
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 3
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48821: LD_ADDR_VAR 0 57
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 3
48839: NEG
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 3
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48865: LD_ADDR_VAR 0 58
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: NEG
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 3
48896: NEG
48897: PUSH
48898: LD_INT 3
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: LIST
48910: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48911: LD_ADDR_VAR 0 59
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: LIST
48954: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48955: LD_ADDR_VAR 0 60
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: LIST
48995: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48996: LD_ADDR_VAR 0 61
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: LIST
49035: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49036: LD_ADDR_VAR 0 62
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49077: LD_ADDR_VAR 0 63
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: LIST
49120: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49121: LD_ADDR_VAR 0 64
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: LIST
49166: ST_TO_ADDR
// end ; 2 :
49167: GO 52433
49169: LD_INT 2
49171: DOUBLE
49172: EQUAL
49173: IFTRUE 49177
49175: GO 52432
49177: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49178: LD_ADDR_VAR 0 29
49182: PUSH
49183: LD_INT 4
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 4
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 5
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 5
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 4
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 3
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 3
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 3
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 5
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: LD_INT 3
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 4
49298: PUSH
49299: LD_INT 3
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 4
49308: PUSH
49309: LD_INT 4
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: PUSH
49319: LD_INT 4
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: LD_INT 3
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 4
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 4
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 4
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 3
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 4
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 5
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 5
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 4
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 3
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 5
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 3
49461: NEG
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 3
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 4
49517: NEG
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 4
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 4
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 4
49563: NEG
49564: PUSH
49565: LD_INT 4
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 4
49575: NEG
49576: PUSH
49577: LD_INT 5
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: LD_INT 4
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 3
49599: NEG
49600: PUSH
49601: LD_INT 3
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 4
49611: NEG
49612: PUSH
49613: LD_INT 3
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 5
49623: NEG
49624: PUSH
49625: LD_INT 4
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 5
49635: NEG
49636: PUSH
49637: LD_INT 5
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: LD_INT 5
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 5
49659: NEG
49660: PUSH
49661: LD_INT 3
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49716: LD_ADDR_VAR 0 30
49720: PUSH
49721: LD_INT 4
49723: PUSH
49724: LD_INT 4
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 4
49733: PUSH
49734: LD_INT 3
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 5
49743: PUSH
49744: LD_INT 4
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 5
49753: PUSH
49754: LD_INT 5
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 4
49763: PUSH
49764: LD_INT 5
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: LD_INT 4
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 3
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 5
49793: PUSH
49794: LD_INT 3
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 3
49803: PUSH
49804: LD_INT 5
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 3
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 3
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: LD_INT 4
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 4
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 3
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 4
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 4
49906: NEG
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 4
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: NEG
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 4
49951: NEG
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 5
49962: NEG
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 5
49973: NEG
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 5
49985: NEG
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 3
50008: NEG
50009: PUSH
50010: LD_INT 3
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: LD_INT 4
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 3
50056: NEG
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 4
50068: NEG
50069: PUSH
50070: LD_INT 3
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 4
50080: NEG
50081: PUSH
50082: LD_INT 4
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: LD_INT 4
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 4
50104: NEG
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 4
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: LD_INT 5
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 4
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 3
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 3
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 4
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 5
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: LD_INT 3
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: LD_INT 5
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50263: LD_ADDR_VAR 0 31
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 4
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 4
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 5
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 5
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 4
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: LD_INT 5
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: LD_INT 3
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 3
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 4
50419: NEG
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 4
50430: NEG
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 4
50442: NEG
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 4
50465: NEG
50466: PUSH
50467: LD_INT 4
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 4
50477: NEG
50478: PUSH
50479: LD_INT 5
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 3
50489: NEG
50490: PUSH
50491: LD_INT 4
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 3
50501: NEG
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 4
50513: NEG
50514: PUSH
50515: LD_INT 3
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 5
50525: NEG
50526: PUSH
50527: LD_INT 4
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 5
50537: NEG
50538: PUSH
50539: LD_INT 5
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 3
50549: NEG
50550: PUSH
50551: LD_INT 5
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 5
50561: NEG
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 3
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 4
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 4
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 4
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 4
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 4
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 5
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 5
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 4
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 5
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50813: LD_ADDR_VAR 0 32
50817: PUSH
50818: LD_INT 4
50820: NEG
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 4
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 3
50843: NEG
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 3
50854: NEG
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 4
50865: NEG
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 5
50876: NEG
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 5
50887: NEG
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 5
50899: NEG
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: LD_INT 3
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 3
50934: NEG
50935: PUSH
50936: LD_INT 4
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 3
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 4
50982: NEG
50983: PUSH
50984: LD_INT 3
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 4
50994: NEG
50995: PUSH
50996: LD_INT 4
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: LD_INT 4
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 4
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 4
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 5
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 4
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 4
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 5
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: LD_INT 5
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 3
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 3
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 4
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 4
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 3
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 4
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 4
51225: PUSH
51226: LD_INT 4
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 4
51235: PUSH
51236: LD_INT 3
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 5
51245: PUSH
51246: LD_INT 4
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 5
51255: PUSH
51256: LD_INT 5
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 4
51265: PUSH
51266: LD_INT 5
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: LD_INT 4
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 3
51285: PUSH
51286: LD_INT 3
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 5
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: PUSH
51306: LD_INT 5
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51360: LD_ADDR_VAR 0 33
51364: PUSH
51365: LD_INT 4
51367: NEG
51368: PUSH
51369: LD_INT 4
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 4
51379: NEG
51380: PUSH
51381: LD_INT 5
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 3
51391: NEG
51392: PUSH
51393: LD_INT 4
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 3
51403: NEG
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 4
51415: NEG
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 5
51427: NEG
51428: PUSH
51429: LD_INT 4
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 5
51439: NEG
51440: PUSH
51441: LD_INT 5
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 3
51451: NEG
51452: PUSH
51453: LD_INT 5
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 5
51463: NEG
51464: PUSH
51465: LD_INT 3
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 4
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 4
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 4
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 4
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 4
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 5
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 5
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 4
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 3
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 5
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 3
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 3
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 4
51690: PUSH
51691: LD_INT 3
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 4
51700: PUSH
51701: LD_INT 4
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: LD_INT 4
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 3
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 4
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: LD_INT 4
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 4
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 4
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 5
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 5
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 4
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 5
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51898: LD_ADDR_VAR 0 34
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 4
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 5
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 4
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 3
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 3
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 4
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 5
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 3
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: LD_INT 5
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 3
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 3
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 4
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 4
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 4
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 4
52100: PUSH
52101: LD_INT 4
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 5
52120: PUSH
52121: LD_INT 4
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 5
52130: PUSH
52131: LD_INT 5
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 4
52140: PUSH
52141: LD_INT 5
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 4
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 5
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: LD_INT 5
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 4
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 4
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: LD_INT 4
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 4
52283: NEG
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 4
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 4
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 5
52339: NEG
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 5
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 5
52362: NEG
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: NEG
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: ST_TO_ADDR
// end ; end ;
52430: GO 52433
52432: POP
// case btype of b_depot , b_warehouse :
52433: LD_VAR 0 1
52437: PUSH
52438: LD_INT 0
52440: DOUBLE
52441: EQUAL
52442: IFTRUE 52452
52444: LD_INT 1
52446: DOUBLE
52447: EQUAL
52448: IFTRUE 52452
52450: GO 52653
52452: POP
// case nation of nation_american :
52453: LD_VAR 0 5
52457: PUSH
52458: LD_INT 1
52460: DOUBLE
52461: EQUAL
52462: IFTRUE 52466
52464: GO 52522
52466: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52467: LD_ADDR_VAR 0 9
52471: PUSH
52472: LD_VAR 0 11
52476: PUSH
52477: LD_VAR 0 12
52481: PUSH
52482: LD_VAR 0 13
52486: PUSH
52487: LD_VAR 0 14
52491: PUSH
52492: LD_VAR 0 15
52496: PUSH
52497: LD_VAR 0 16
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: PUSH
52510: LD_VAR 0 4
52514: PUSH
52515: LD_INT 1
52517: PLUS
52518: ARRAY
52519: ST_TO_ADDR
52520: GO 52651
52522: LD_INT 2
52524: DOUBLE
52525: EQUAL
52526: IFTRUE 52530
52528: GO 52586
52530: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52531: LD_ADDR_VAR 0 9
52535: PUSH
52536: LD_VAR 0 17
52540: PUSH
52541: LD_VAR 0 18
52545: PUSH
52546: LD_VAR 0 19
52550: PUSH
52551: LD_VAR 0 20
52555: PUSH
52556: LD_VAR 0 21
52560: PUSH
52561: LD_VAR 0 22
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: PUSH
52574: LD_VAR 0 4
52578: PUSH
52579: LD_INT 1
52581: PLUS
52582: ARRAY
52583: ST_TO_ADDR
52584: GO 52651
52586: LD_INT 3
52588: DOUBLE
52589: EQUAL
52590: IFTRUE 52594
52592: GO 52650
52594: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52595: LD_ADDR_VAR 0 9
52599: PUSH
52600: LD_VAR 0 23
52604: PUSH
52605: LD_VAR 0 24
52609: PUSH
52610: LD_VAR 0 25
52614: PUSH
52615: LD_VAR 0 26
52619: PUSH
52620: LD_VAR 0 27
52624: PUSH
52625: LD_VAR 0 28
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: PUSH
52638: LD_VAR 0 4
52642: PUSH
52643: LD_INT 1
52645: PLUS
52646: ARRAY
52647: ST_TO_ADDR
52648: GO 52651
52650: POP
52651: GO 53206
52653: LD_INT 2
52655: DOUBLE
52656: EQUAL
52657: IFTRUE 52667
52659: LD_INT 3
52661: DOUBLE
52662: EQUAL
52663: IFTRUE 52667
52665: GO 52723
52667: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52668: LD_ADDR_VAR 0 9
52672: PUSH
52673: LD_VAR 0 29
52677: PUSH
52678: LD_VAR 0 30
52682: PUSH
52683: LD_VAR 0 31
52687: PUSH
52688: LD_VAR 0 32
52692: PUSH
52693: LD_VAR 0 33
52697: PUSH
52698: LD_VAR 0 34
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: PUSH
52711: LD_VAR 0 4
52715: PUSH
52716: LD_INT 1
52718: PLUS
52719: ARRAY
52720: ST_TO_ADDR
52721: GO 53206
52723: LD_INT 16
52725: DOUBLE
52726: EQUAL
52727: IFTRUE 52785
52729: LD_INT 17
52731: DOUBLE
52732: EQUAL
52733: IFTRUE 52785
52735: LD_INT 18
52737: DOUBLE
52738: EQUAL
52739: IFTRUE 52785
52741: LD_INT 19
52743: DOUBLE
52744: EQUAL
52745: IFTRUE 52785
52747: LD_INT 22
52749: DOUBLE
52750: EQUAL
52751: IFTRUE 52785
52753: LD_INT 20
52755: DOUBLE
52756: EQUAL
52757: IFTRUE 52785
52759: LD_INT 21
52761: DOUBLE
52762: EQUAL
52763: IFTRUE 52785
52765: LD_INT 23
52767: DOUBLE
52768: EQUAL
52769: IFTRUE 52785
52771: LD_INT 24
52773: DOUBLE
52774: EQUAL
52775: IFTRUE 52785
52777: LD_INT 25
52779: DOUBLE
52780: EQUAL
52781: IFTRUE 52785
52783: GO 52841
52785: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52786: LD_ADDR_VAR 0 9
52790: PUSH
52791: LD_VAR 0 35
52795: PUSH
52796: LD_VAR 0 36
52800: PUSH
52801: LD_VAR 0 37
52805: PUSH
52806: LD_VAR 0 38
52810: PUSH
52811: LD_VAR 0 39
52815: PUSH
52816: LD_VAR 0 40
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: PUSH
52829: LD_VAR 0 4
52833: PUSH
52834: LD_INT 1
52836: PLUS
52837: ARRAY
52838: ST_TO_ADDR
52839: GO 53206
52841: LD_INT 6
52843: DOUBLE
52844: EQUAL
52845: IFTRUE 52897
52847: LD_INT 7
52849: DOUBLE
52850: EQUAL
52851: IFTRUE 52897
52853: LD_INT 8
52855: DOUBLE
52856: EQUAL
52857: IFTRUE 52897
52859: LD_INT 13
52861: DOUBLE
52862: EQUAL
52863: IFTRUE 52897
52865: LD_INT 12
52867: DOUBLE
52868: EQUAL
52869: IFTRUE 52897
52871: LD_INT 15
52873: DOUBLE
52874: EQUAL
52875: IFTRUE 52897
52877: LD_INT 11
52879: DOUBLE
52880: EQUAL
52881: IFTRUE 52897
52883: LD_INT 14
52885: DOUBLE
52886: EQUAL
52887: IFTRUE 52897
52889: LD_INT 10
52891: DOUBLE
52892: EQUAL
52893: IFTRUE 52897
52895: GO 52953
52897: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52898: LD_ADDR_VAR 0 9
52902: PUSH
52903: LD_VAR 0 41
52907: PUSH
52908: LD_VAR 0 42
52912: PUSH
52913: LD_VAR 0 43
52917: PUSH
52918: LD_VAR 0 44
52922: PUSH
52923: LD_VAR 0 45
52927: PUSH
52928: LD_VAR 0 46
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: PUSH
52941: LD_VAR 0 4
52945: PUSH
52946: LD_INT 1
52948: PLUS
52949: ARRAY
52950: ST_TO_ADDR
52951: GO 53206
52953: LD_INT 36
52955: DOUBLE
52956: EQUAL
52957: IFTRUE 52961
52959: GO 53017
52961: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52962: LD_ADDR_VAR 0 9
52966: PUSH
52967: LD_VAR 0 47
52971: PUSH
52972: LD_VAR 0 48
52976: PUSH
52977: LD_VAR 0 49
52981: PUSH
52982: LD_VAR 0 50
52986: PUSH
52987: LD_VAR 0 51
52991: PUSH
52992: LD_VAR 0 52
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: PUSH
53005: LD_VAR 0 4
53009: PUSH
53010: LD_INT 1
53012: PLUS
53013: ARRAY
53014: ST_TO_ADDR
53015: GO 53206
53017: LD_INT 4
53019: DOUBLE
53020: EQUAL
53021: IFTRUE 53043
53023: LD_INT 5
53025: DOUBLE
53026: EQUAL
53027: IFTRUE 53043
53029: LD_INT 34
53031: DOUBLE
53032: EQUAL
53033: IFTRUE 53043
53035: LD_INT 37
53037: DOUBLE
53038: EQUAL
53039: IFTRUE 53043
53041: GO 53099
53043: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53044: LD_ADDR_VAR 0 9
53048: PUSH
53049: LD_VAR 0 53
53053: PUSH
53054: LD_VAR 0 54
53058: PUSH
53059: LD_VAR 0 55
53063: PUSH
53064: LD_VAR 0 56
53068: PUSH
53069: LD_VAR 0 57
53073: PUSH
53074: LD_VAR 0 58
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: PUSH
53087: LD_VAR 0 4
53091: PUSH
53092: LD_INT 1
53094: PLUS
53095: ARRAY
53096: ST_TO_ADDR
53097: GO 53206
53099: LD_INT 31
53101: DOUBLE
53102: EQUAL
53103: IFTRUE 53149
53105: LD_INT 32
53107: DOUBLE
53108: EQUAL
53109: IFTRUE 53149
53111: LD_INT 33
53113: DOUBLE
53114: EQUAL
53115: IFTRUE 53149
53117: LD_INT 27
53119: DOUBLE
53120: EQUAL
53121: IFTRUE 53149
53123: LD_INT 26
53125: DOUBLE
53126: EQUAL
53127: IFTRUE 53149
53129: LD_INT 28
53131: DOUBLE
53132: EQUAL
53133: IFTRUE 53149
53135: LD_INT 29
53137: DOUBLE
53138: EQUAL
53139: IFTRUE 53149
53141: LD_INT 30
53143: DOUBLE
53144: EQUAL
53145: IFTRUE 53149
53147: GO 53205
53149: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53150: LD_ADDR_VAR 0 9
53154: PUSH
53155: LD_VAR 0 59
53159: PUSH
53160: LD_VAR 0 60
53164: PUSH
53165: LD_VAR 0 61
53169: PUSH
53170: LD_VAR 0 62
53174: PUSH
53175: LD_VAR 0 63
53179: PUSH
53180: LD_VAR 0 64
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: PUSH
53193: LD_VAR 0 4
53197: PUSH
53198: LD_INT 1
53200: PLUS
53201: ARRAY
53202: ST_TO_ADDR
53203: GO 53206
53205: POP
// temp_list2 = [ ] ;
53206: LD_ADDR_VAR 0 10
53210: PUSH
53211: EMPTY
53212: ST_TO_ADDR
// for i in temp_list do
53213: LD_ADDR_VAR 0 8
53217: PUSH
53218: LD_VAR 0 9
53222: PUSH
53223: FOR_IN
53224: IFFALSE 53276
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53226: LD_ADDR_VAR 0 10
53230: PUSH
53231: LD_VAR 0 10
53235: PUSH
53236: LD_VAR 0 8
53240: PUSH
53241: LD_INT 1
53243: ARRAY
53244: PUSH
53245: LD_VAR 0 2
53249: PLUS
53250: PUSH
53251: LD_VAR 0 8
53255: PUSH
53256: LD_INT 2
53258: ARRAY
53259: PUSH
53260: LD_VAR 0 3
53264: PLUS
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: EMPTY
53271: LIST
53272: ADD
53273: ST_TO_ADDR
53274: GO 53223
53276: POP
53277: POP
// result = temp_list2 ;
53278: LD_ADDR_VAR 0 7
53282: PUSH
53283: LD_VAR 0 10
53287: ST_TO_ADDR
// end ;
53288: LD_VAR 0 7
53292: RET
// export function EnemyInRange ( unit , dist ) ; begin
53293: LD_INT 0
53295: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53296: LD_ADDR_VAR 0 3
53300: PUSH
53301: LD_VAR 0 1
53305: PPUSH
53306: CALL_OW 255
53310: PPUSH
53311: LD_VAR 0 1
53315: PPUSH
53316: CALL_OW 250
53320: PPUSH
53321: LD_VAR 0 1
53325: PPUSH
53326: CALL_OW 251
53330: PPUSH
53331: LD_VAR 0 2
53335: PPUSH
53336: CALL 27064 0 4
53340: PUSH
53341: LD_INT 4
53343: ARRAY
53344: ST_TO_ADDR
// end ;
53345: LD_VAR 0 3
53349: RET
// export function PlayerSeeMe ( unit ) ; begin
53350: LD_INT 0
53352: PPUSH
// result := See ( your_side , unit ) ;
53353: LD_ADDR_VAR 0 2
53357: PUSH
53358: LD_OWVAR 2
53362: PPUSH
53363: LD_VAR 0 1
53367: PPUSH
53368: CALL_OW 292
53372: ST_TO_ADDR
// end ;
53373: LD_VAR 0 2
53377: RET
// export function ReverseDir ( unit ) ; begin
53378: LD_INT 0
53380: PPUSH
// if not unit then
53381: LD_VAR 0 1
53385: NOT
53386: IFFALSE 53390
// exit ;
53388: GO 53413
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53390: LD_ADDR_VAR 0 2
53394: PUSH
53395: LD_VAR 0 1
53399: PPUSH
53400: CALL_OW 254
53404: PUSH
53405: LD_INT 3
53407: PLUS
53408: PUSH
53409: LD_INT 6
53411: MOD
53412: ST_TO_ADDR
// end ;
53413: LD_VAR 0 2
53417: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53418: LD_INT 0
53420: PPUSH
53421: PPUSH
53422: PPUSH
53423: PPUSH
53424: PPUSH
// if not hexes then
53425: LD_VAR 0 2
53429: NOT
53430: IFFALSE 53434
// exit ;
53432: GO 53582
// dist := 9999 ;
53434: LD_ADDR_VAR 0 5
53438: PUSH
53439: LD_INT 9999
53441: ST_TO_ADDR
// for i = 1 to hexes do
53442: LD_ADDR_VAR 0 4
53446: PUSH
53447: DOUBLE
53448: LD_INT 1
53450: DEC
53451: ST_TO_ADDR
53452: LD_VAR 0 2
53456: PUSH
53457: FOR_TO
53458: IFFALSE 53570
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53460: LD_VAR 0 1
53464: PPUSH
53465: LD_VAR 0 2
53469: PUSH
53470: LD_VAR 0 4
53474: ARRAY
53475: PUSH
53476: LD_INT 1
53478: ARRAY
53479: PPUSH
53480: LD_VAR 0 2
53484: PUSH
53485: LD_VAR 0 4
53489: ARRAY
53490: PUSH
53491: LD_INT 2
53493: ARRAY
53494: PPUSH
53495: CALL_OW 297
53499: PUSH
53500: LD_VAR 0 5
53504: LESS
53505: IFFALSE 53568
// begin hex := hexes [ i ] ;
53507: LD_ADDR_VAR 0 7
53511: PUSH
53512: LD_VAR 0 2
53516: PUSH
53517: LD_VAR 0 4
53521: ARRAY
53522: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53523: LD_ADDR_VAR 0 5
53527: PUSH
53528: LD_VAR 0 1
53532: PPUSH
53533: LD_VAR 0 2
53537: PUSH
53538: LD_VAR 0 4
53542: ARRAY
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PPUSH
53548: LD_VAR 0 2
53552: PUSH
53553: LD_VAR 0 4
53557: ARRAY
53558: PUSH
53559: LD_INT 2
53561: ARRAY
53562: PPUSH
53563: CALL_OW 297
53567: ST_TO_ADDR
// end ; end ;
53568: GO 53457
53570: POP
53571: POP
// result := hex ;
53572: LD_ADDR_VAR 0 3
53576: PUSH
53577: LD_VAR 0 7
53581: ST_TO_ADDR
// end ;
53582: LD_VAR 0 3
53586: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53587: LD_INT 0
53589: PPUSH
53590: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53591: LD_VAR 0 1
53595: NOT
53596: PUSH
53597: LD_VAR 0 1
53601: PUSH
53602: LD_INT 21
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 23
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PPUSH
53626: CALL_OW 69
53630: IN
53631: NOT
53632: OR
53633: IFFALSE 53637
// exit ;
53635: GO 53684
// for i = 1 to 3 do
53637: LD_ADDR_VAR 0 3
53641: PUSH
53642: DOUBLE
53643: LD_INT 1
53645: DEC
53646: ST_TO_ADDR
53647: LD_INT 3
53649: PUSH
53650: FOR_TO
53651: IFFALSE 53682
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53653: LD_VAR 0 1
53657: PPUSH
53658: CALL_OW 250
53662: PPUSH
53663: LD_VAR 0 1
53667: PPUSH
53668: CALL_OW 251
53672: PPUSH
53673: LD_INT 1
53675: PPUSH
53676: CALL_OW 453
53680: GO 53650
53682: POP
53683: POP
// end ;
53684: LD_VAR 0 2
53688: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53689: LD_INT 0
53691: PPUSH
53692: PPUSH
53693: PPUSH
53694: PPUSH
53695: PPUSH
53696: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53697: LD_VAR 0 1
53701: NOT
53702: PUSH
53703: LD_VAR 0 2
53707: NOT
53708: OR
53709: PUSH
53710: LD_VAR 0 1
53714: PPUSH
53715: CALL_OW 314
53719: OR
53720: IFFALSE 53724
// exit ;
53722: GO 54165
// x := GetX ( enemy_unit ) ;
53724: LD_ADDR_VAR 0 7
53728: PUSH
53729: LD_VAR 0 2
53733: PPUSH
53734: CALL_OW 250
53738: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53739: LD_ADDR_VAR 0 8
53743: PUSH
53744: LD_VAR 0 2
53748: PPUSH
53749: CALL_OW 251
53753: ST_TO_ADDR
// if not x or not y then
53754: LD_VAR 0 7
53758: NOT
53759: PUSH
53760: LD_VAR 0 8
53764: NOT
53765: OR
53766: IFFALSE 53770
// exit ;
53768: GO 54165
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53770: LD_ADDR_VAR 0 6
53774: PUSH
53775: LD_VAR 0 7
53779: PPUSH
53780: LD_INT 0
53782: PPUSH
53783: LD_INT 4
53785: PPUSH
53786: CALL_OW 272
53790: PUSH
53791: LD_VAR 0 8
53795: PPUSH
53796: LD_INT 0
53798: PPUSH
53799: LD_INT 4
53801: PPUSH
53802: CALL_OW 273
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_VAR 0 7
53815: PPUSH
53816: LD_INT 1
53818: PPUSH
53819: LD_INT 4
53821: PPUSH
53822: CALL_OW 272
53826: PUSH
53827: LD_VAR 0 8
53831: PPUSH
53832: LD_INT 1
53834: PPUSH
53835: LD_INT 4
53837: PPUSH
53838: CALL_OW 273
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_VAR 0 7
53851: PPUSH
53852: LD_INT 2
53854: PPUSH
53855: LD_INT 4
53857: PPUSH
53858: CALL_OW 272
53862: PUSH
53863: LD_VAR 0 8
53867: PPUSH
53868: LD_INT 2
53870: PPUSH
53871: LD_INT 4
53873: PPUSH
53874: CALL_OW 273
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_VAR 0 7
53887: PPUSH
53888: LD_INT 3
53890: PPUSH
53891: LD_INT 4
53893: PPUSH
53894: CALL_OW 272
53898: PUSH
53899: LD_VAR 0 8
53903: PPUSH
53904: LD_INT 3
53906: PPUSH
53907: LD_INT 4
53909: PPUSH
53910: CALL_OW 273
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_VAR 0 7
53923: PPUSH
53924: LD_INT 4
53926: PPUSH
53927: LD_INT 4
53929: PPUSH
53930: CALL_OW 272
53934: PUSH
53935: LD_VAR 0 8
53939: PPUSH
53940: LD_INT 4
53942: PPUSH
53943: LD_INT 4
53945: PPUSH
53946: CALL_OW 273
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_VAR 0 7
53959: PPUSH
53960: LD_INT 5
53962: PPUSH
53963: LD_INT 4
53965: PPUSH
53966: CALL_OW 272
53970: PUSH
53971: LD_VAR 0 8
53975: PPUSH
53976: LD_INT 5
53978: PPUSH
53979: LD_INT 4
53981: PPUSH
53982: CALL_OW 273
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: ST_TO_ADDR
// for i = tmp downto 1 do
53999: LD_ADDR_VAR 0 4
54003: PUSH
54004: DOUBLE
54005: LD_VAR 0 6
54009: INC
54010: ST_TO_ADDR
54011: LD_INT 1
54013: PUSH
54014: FOR_DOWNTO
54015: IFFALSE 54116
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54017: LD_VAR 0 6
54021: PUSH
54022: LD_VAR 0 4
54026: ARRAY
54027: PUSH
54028: LD_INT 1
54030: ARRAY
54031: PPUSH
54032: LD_VAR 0 6
54036: PUSH
54037: LD_VAR 0 4
54041: ARRAY
54042: PUSH
54043: LD_INT 2
54045: ARRAY
54046: PPUSH
54047: CALL_OW 488
54051: NOT
54052: PUSH
54053: LD_VAR 0 6
54057: PUSH
54058: LD_VAR 0 4
54062: ARRAY
54063: PUSH
54064: LD_INT 1
54066: ARRAY
54067: PPUSH
54068: LD_VAR 0 6
54072: PUSH
54073: LD_VAR 0 4
54077: ARRAY
54078: PUSH
54079: LD_INT 2
54081: ARRAY
54082: PPUSH
54083: CALL_OW 428
54087: PUSH
54088: LD_INT 0
54090: NONEQUAL
54091: OR
54092: IFFALSE 54114
// tmp := Delete ( tmp , i ) ;
54094: LD_ADDR_VAR 0 6
54098: PUSH
54099: LD_VAR 0 6
54103: PPUSH
54104: LD_VAR 0 4
54108: PPUSH
54109: CALL_OW 3
54113: ST_TO_ADDR
54114: GO 54014
54116: POP
54117: POP
// j := GetClosestHex ( unit , tmp ) ;
54118: LD_ADDR_VAR 0 5
54122: PUSH
54123: LD_VAR 0 1
54127: PPUSH
54128: LD_VAR 0 6
54132: PPUSH
54133: CALL 53418 0 2
54137: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54138: LD_VAR 0 1
54142: PPUSH
54143: LD_VAR 0 5
54147: PUSH
54148: LD_INT 1
54150: ARRAY
54151: PPUSH
54152: LD_VAR 0 5
54156: PUSH
54157: LD_INT 2
54159: ARRAY
54160: PPUSH
54161: CALL_OW 111
// end ;
54165: LD_VAR 0 3
54169: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54170: LD_INT 0
54172: PPUSH
54173: PPUSH
54174: PPUSH
// uc_side = 0 ;
54175: LD_ADDR_OWVAR 20
54179: PUSH
54180: LD_INT 0
54182: ST_TO_ADDR
// uc_nation = 0 ;
54183: LD_ADDR_OWVAR 21
54187: PUSH
54188: LD_INT 0
54190: ST_TO_ADDR
// InitHc_All ( ) ;
54191: CALL_OW 584
// InitVc ;
54195: CALL_OW 20
// if mastodonts then
54199: LD_VAR 0 6
54203: IFFALSE 54270
// for i = 1 to mastodonts do
54205: LD_ADDR_VAR 0 11
54209: PUSH
54210: DOUBLE
54211: LD_INT 1
54213: DEC
54214: ST_TO_ADDR
54215: LD_VAR 0 6
54219: PUSH
54220: FOR_TO
54221: IFFALSE 54268
// begin vc_chassis := 31 ;
54223: LD_ADDR_OWVAR 37
54227: PUSH
54228: LD_INT 31
54230: ST_TO_ADDR
// vc_control := control_rider ;
54231: LD_ADDR_OWVAR 38
54235: PUSH
54236: LD_INT 4
54238: ST_TO_ADDR
// animal := CreateVehicle ;
54239: LD_ADDR_VAR 0 12
54243: PUSH
54244: CALL_OW 45
54248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54249: LD_VAR 0 12
54253: PPUSH
54254: LD_VAR 0 8
54258: PPUSH
54259: LD_INT 0
54261: PPUSH
54262: CALL 56458 0 3
// end ;
54266: GO 54220
54268: POP
54269: POP
// if horses then
54270: LD_VAR 0 5
54274: IFFALSE 54341
// for i = 1 to horses do
54276: LD_ADDR_VAR 0 11
54280: PUSH
54281: DOUBLE
54282: LD_INT 1
54284: DEC
54285: ST_TO_ADDR
54286: LD_VAR 0 5
54290: PUSH
54291: FOR_TO
54292: IFFALSE 54339
// begin hc_class := 21 ;
54294: LD_ADDR_OWVAR 28
54298: PUSH
54299: LD_INT 21
54301: ST_TO_ADDR
// hc_gallery :=  ;
54302: LD_ADDR_OWVAR 33
54306: PUSH
54307: LD_STRING 
54309: ST_TO_ADDR
// animal := CreateHuman ;
54310: LD_ADDR_VAR 0 12
54314: PUSH
54315: CALL_OW 44
54319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54320: LD_VAR 0 12
54324: PPUSH
54325: LD_VAR 0 8
54329: PPUSH
54330: LD_INT 0
54332: PPUSH
54333: CALL 56458 0 3
// end ;
54337: GO 54291
54339: POP
54340: POP
// if birds then
54341: LD_VAR 0 1
54345: IFFALSE 54412
// for i = 1 to birds do
54347: LD_ADDR_VAR 0 11
54351: PUSH
54352: DOUBLE
54353: LD_INT 1
54355: DEC
54356: ST_TO_ADDR
54357: LD_VAR 0 1
54361: PUSH
54362: FOR_TO
54363: IFFALSE 54410
// begin hc_class = 18 ;
54365: LD_ADDR_OWVAR 28
54369: PUSH
54370: LD_INT 18
54372: ST_TO_ADDR
// hc_gallery =  ;
54373: LD_ADDR_OWVAR 33
54377: PUSH
54378: LD_STRING 
54380: ST_TO_ADDR
// animal := CreateHuman ;
54381: LD_ADDR_VAR 0 12
54385: PUSH
54386: CALL_OW 44
54390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54391: LD_VAR 0 12
54395: PPUSH
54396: LD_VAR 0 8
54400: PPUSH
54401: LD_INT 0
54403: PPUSH
54404: CALL 56458 0 3
// end ;
54408: GO 54362
54410: POP
54411: POP
// if tigers then
54412: LD_VAR 0 2
54416: IFFALSE 54500
// for i = 1 to tigers do
54418: LD_ADDR_VAR 0 11
54422: PUSH
54423: DOUBLE
54424: LD_INT 1
54426: DEC
54427: ST_TO_ADDR
54428: LD_VAR 0 2
54432: PUSH
54433: FOR_TO
54434: IFFALSE 54498
// begin hc_class = class_tiger ;
54436: LD_ADDR_OWVAR 28
54440: PUSH
54441: LD_INT 14
54443: ST_TO_ADDR
// hc_gallery =  ;
54444: LD_ADDR_OWVAR 33
54448: PUSH
54449: LD_STRING 
54451: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54452: LD_ADDR_OWVAR 35
54456: PUSH
54457: LD_INT 7
54459: NEG
54460: PPUSH
54461: LD_INT 7
54463: PPUSH
54464: CALL_OW 12
54468: ST_TO_ADDR
// animal := CreateHuman ;
54469: LD_ADDR_VAR 0 12
54473: PUSH
54474: CALL_OW 44
54478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54479: LD_VAR 0 12
54483: PPUSH
54484: LD_VAR 0 8
54488: PPUSH
54489: LD_INT 0
54491: PPUSH
54492: CALL 56458 0 3
// end ;
54496: GO 54433
54498: POP
54499: POP
// if apemans then
54500: LD_VAR 0 3
54504: IFFALSE 54627
// for i = 1 to apemans do
54506: LD_ADDR_VAR 0 11
54510: PUSH
54511: DOUBLE
54512: LD_INT 1
54514: DEC
54515: ST_TO_ADDR
54516: LD_VAR 0 3
54520: PUSH
54521: FOR_TO
54522: IFFALSE 54625
// begin hc_class = class_apeman ;
54524: LD_ADDR_OWVAR 28
54528: PUSH
54529: LD_INT 12
54531: ST_TO_ADDR
// hc_gallery =  ;
54532: LD_ADDR_OWVAR 33
54536: PUSH
54537: LD_STRING 
54539: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54540: LD_ADDR_OWVAR 35
54544: PUSH
54545: LD_INT 5
54547: NEG
54548: PPUSH
54549: LD_INT 5
54551: PPUSH
54552: CALL_OW 12
54556: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54557: LD_ADDR_OWVAR 31
54561: PUSH
54562: LD_INT 1
54564: PPUSH
54565: LD_INT 3
54567: PPUSH
54568: CALL_OW 12
54572: PUSH
54573: LD_INT 1
54575: PPUSH
54576: LD_INT 3
54578: PPUSH
54579: CALL_OW 12
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: ST_TO_ADDR
// animal := CreateHuman ;
54596: LD_ADDR_VAR 0 12
54600: PUSH
54601: CALL_OW 44
54605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54606: LD_VAR 0 12
54610: PPUSH
54611: LD_VAR 0 8
54615: PPUSH
54616: LD_INT 0
54618: PPUSH
54619: CALL 56458 0 3
// end ;
54623: GO 54521
54625: POP
54626: POP
// if enchidnas then
54627: LD_VAR 0 4
54631: IFFALSE 54698
// for i = 1 to enchidnas do
54633: LD_ADDR_VAR 0 11
54637: PUSH
54638: DOUBLE
54639: LD_INT 1
54641: DEC
54642: ST_TO_ADDR
54643: LD_VAR 0 4
54647: PUSH
54648: FOR_TO
54649: IFFALSE 54696
// begin hc_class = 13 ;
54651: LD_ADDR_OWVAR 28
54655: PUSH
54656: LD_INT 13
54658: ST_TO_ADDR
// hc_gallery =  ;
54659: LD_ADDR_OWVAR 33
54663: PUSH
54664: LD_STRING 
54666: ST_TO_ADDR
// animal := CreateHuman ;
54667: LD_ADDR_VAR 0 12
54671: PUSH
54672: CALL_OW 44
54676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54677: LD_VAR 0 12
54681: PPUSH
54682: LD_VAR 0 8
54686: PPUSH
54687: LD_INT 0
54689: PPUSH
54690: CALL 56458 0 3
// end ;
54694: GO 54648
54696: POP
54697: POP
// if fishes then
54698: LD_VAR 0 7
54702: IFFALSE 54769
// for i = 1 to fishes do
54704: LD_ADDR_VAR 0 11
54708: PUSH
54709: DOUBLE
54710: LD_INT 1
54712: DEC
54713: ST_TO_ADDR
54714: LD_VAR 0 7
54718: PUSH
54719: FOR_TO
54720: IFFALSE 54767
// begin hc_class = 20 ;
54722: LD_ADDR_OWVAR 28
54726: PUSH
54727: LD_INT 20
54729: ST_TO_ADDR
// hc_gallery =  ;
54730: LD_ADDR_OWVAR 33
54734: PUSH
54735: LD_STRING 
54737: ST_TO_ADDR
// animal := CreateHuman ;
54738: LD_ADDR_VAR 0 12
54742: PUSH
54743: CALL_OW 44
54747: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54748: LD_VAR 0 12
54752: PPUSH
54753: LD_VAR 0 9
54757: PPUSH
54758: LD_INT 0
54760: PPUSH
54761: CALL 56458 0 3
// end ;
54765: GO 54719
54767: POP
54768: POP
// end ;
54769: LD_VAR 0 10
54773: RET
// export function WantHeal ( sci , unit ) ; begin
54774: LD_INT 0
54776: PPUSH
// if GetTaskList ( sci ) > 0 then
54777: LD_VAR 0 1
54781: PPUSH
54782: CALL_OW 437
54786: PUSH
54787: LD_INT 0
54789: GREATER
54790: IFFALSE 54860
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54792: LD_VAR 0 1
54796: PPUSH
54797: CALL_OW 437
54801: PUSH
54802: LD_INT 1
54804: ARRAY
54805: PUSH
54806: LD_INT 1
54808: ARRAY
54809: PUSH
54810: LD_STRING l
54812: EQUAL
54813: PUSH
54814: LD_VAR 0 1
54818: PPUSH
54819: CALL_OW 437
54823: PUSH
54824: LD_INT 1
54826: ARRAY
54827: PUSH
54828: LD_INT 4
54830: ARRAY
54831: PUSH
54832: LD_VAR 0 2
54836: EQUAL
54837: AND
54838: IFFALSE 54850
// result := true else
54840: LD_ADDR_VAR 0 3
54844: PUSH
54845: LD_INT 1
54847: ST_TO_ADDR
54848: GO 54858
// result := false ;
54850: LD_ADDR_VAR 0 3
54854: PUSH
54855: LD_INT 0
54857: ST_TO_ADDR
// end else
54858: GO 54868
// result := false ;
54860: LD_ADDR_VAR 0 3
54864: PUSH
54865: LD_INT 0
54867: ST_TO_ADDR
// end ;
54868: LD_VAR 0 3
54872: RET
// export function HealTarget ( sci ) ; begin
54873: LD_INT 0
54875: PPUSH
// if not sci then
54876: LD_VAR 0 1
54880: NOT
54881: IFFALSE 54885
// exit ;
54883: GO 54950
// result := 0 ;
54885: LD_ADDR_VAR 0 2
54889: PUSH
54890: LD_INT 0
54892: ST_TO_ADDR
// if GetTaskList ( sci ) then
54893: LD_VAR 0 1
54897: PPUSH
54898: CALL_OW 437
54902: IFFALSE 54950
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54904: LD_VAR 0 1
54908: PPUSH
54909: CALL_OW 437
54913: PUSH
54914: LD_INT 1
54916: ARRAY
54917: PUSH
54918: LD_INT 1
54920: ARRAY
54921: PUSH
54922: LD_STRING l
54924: EQUAL
54925: IFFALSE 54950
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54927: LD_ADDR_VAR 0 2
54931: PUSH
54932: LD_VAR 0 1
54936: PPUSH
54937: CALL_OW 437
54941: PUSH
54942: LD_INT 1
54944: ARRAY
54945: PUSH
54946: LD_INT 4
54948: ARRAY
54949: ST_TO_ADDR
// end ;
54950: LD_VAR 0 2
54954: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54955: LD_INT 0
54957: PPUSH
54958: PPUSH
54959: PPUSH
54960: PPUSH
// if not base_units then
54961: LD_VAR 0 1
54965: NOT
54966: IFFALSE 54970
// exit ;
54968: GO 55057
// result := false ;
54970: LD_ADDR_VAR 0 2
54974: PUSH
54975: LD_INT 0
54977: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54978: LD_ADDR_VAR 0 5
54982: PUSH
54983: LD_VAR 0 1
54987: PPUSH
54988: LD_INT 21
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PPUSH
54998: CALL_OW 72
55002: ST_TO_ADDR
// if not tmp then
55003: LD_VAR 0 5
55007: NOT
55008: IFFALSE 55012
// exit ;
55010: GO 55057
// for i in tmp do
55012: LD_ADDR_VAR 0 3
55016: PUSH
55017: LD_VAR 0 5
55021: PUSH
55022: FOR_IN
55023: IFFALSE 55055
// begin result := EnemyInRange ( i , 22 ) ;
55025: LD_ADDR_VAR 0 2
55029: PUSH
55030: LD_VAR 0 3
55034: PPUSH
55035: LD_INT 22
55037: PPUSH
55038: CALL 53293 0 2
55042: ST_TO_ADDR
// if result then
55043: LD_VAR 0 2
55047: IFFALSE 55053
// exit ;
55049: POP
55050: POP
55051: GO 55057
// end ;
55053: GO 55022
55055: POP
55056: POP
// end ;
55057: LD_VAR 0 2
55061: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55062: LD_INT 0
55064: PPUSH
55065: PPUSH
// if not units then
55066: LD_VAR 0 1
55070: NOT
55071: IFFALSE 55075
// exit ;
55073: GO 55145
// result := [ ] ;
55075: LD_ADDR_VAR 0 3
55079: PUSH
55080: EMPTY
55081: ST_TO_ADDR
// for i in units do
55082: LD_ADDR_VAR 0 4
55086: PUSH
55087: LD_VAR 0 1
55091: PUSH
55092: FOR_IN
55093: IFFALSE 55143
// if GetTag ( i ) = tag then
55095: LD_VAR 0 4
55099: PPUSH
55100: CALL_OW 110
55104: PUSH
55105: LD_VAR 0 2
55109: EQUAL
55110: IFFALSE 55141
// result := Insert ( result , result + 1 , i ) ;
55112: LD_ADDR_VAR 0 3
55116: PUSH
55117: LD_VAR 0 3
55121: PPUSH
55122: LD_VAR 0 3
55126: PUSH
55127: LD_INT 1
55129: PLUS
55130: PPUSH
55131: LD_VAR 0 4
55135: PPUSH
55136: CALL_OW 2
55140: ST_TO_ADDR
55141: GO 55092
55143: POP
55144: POP
// end ;
55145: LD_VAR 0 3
55149: RET
// export function IsDriver ( un ) ; begin
55150: LD_INT 0
55152: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55153: LD_ADDR_VAR 0 2
55157: PUSH
55158: LD_VAR 0 1
55162: PUSH
55163: LD_INT 55
55165: PUSH
55166: EMPTY
55167: LIST
55168: PPUSH
55169: CALL_OW 69
55173: IN
55174: ST_TO_ADDR
// end ;
55175: LD_VAR 0 2
55179: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55180: LD_INT 0
55182: PPUSH
55183: PPUSH
// list := [ ] ;
55184: LD_ADDR_VAR 0 5
55188: PUSH
55189: EMPTY
55190: ST_TO_ADDR
// case d of 0 :
55191: LD_VAR 0 3
55195: PUSH
55196: LD_INT 0
55198: DOUBLE
55199: EQUAL
55200: IFTRUE 55204
55202: GO 55337
55204: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55205: LD_ADDR_VAR 0 5
55209: PUSH
55210: LD_VAR 0 1
55214: PUSH
55215: LD_INT 4
55217: MINUS
55218: PUSH
55219: LD_VAR 0 2
55223: PUSH
55224: LD_INT 4
55226: MINUS
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: LIST
55235: PUSH
55236: LD_VAR 0 1
55240: PUSH
55241: LD_INT 3
55243: MINUS
55244: PUSH
55245: LD_VAR 0 2
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: LIST
55257: PUSH
55258: LD_VAR 0 1
55262: PUSH
55263: LD_INT 4
55265: PLUS
55266: PUSH
55267: LD_VAR 0 2
55271: PUSH
55272: LD_INT 4
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: PUSH
55280: LD_VAR 0 1
55284: PUSH
55285: LD_INT 3
55287: PLUS
55288: PUSH
55289: LD_VAR 0 2
55293: PUSH
55294: LD_INT 3
55296: PLUS
55297: PUSH
55298: LD_INT 5
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: LIST
55305: PUSH
55306: LD_VAR 0 1
55310: PUSH
55311: LD_VAR 0 2
55315: PUSH
55316: LD_INT 4
55318: PLUS
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: ST_TO_ADDR
// end ; 1 :
55335: GO 56035
55337: LD_INT 1
55339: DOUBLE
55340: EQUAL
55341: IFTRUE 55345
55343: GO 55478
55345: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55346: LD_ADDR_VAR 0 5
55350: PUSH
55351: LD_VAR 0 1
55355: PUSH
55356: LD_VAR 0 2
55360: PUSH
55361: LD_INT 4
55363: MINUS
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: PUSH
55373: LD_VAR 0 1
55377: PUSH
55378: LD_INT 3
55380: MINUS
55381: PUSH
55382: LD_VAR 0 2
55386: PUSH
55387: LD_INT 3
55389: MINUS
55390: PUSH
55391: LD_INT 2
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: LIST
55398: PUSH
55399: LD_VAR 0 1
55403: PUSH
55404: LD_INT 4
55406: MINUS
55407: PUSH
55408: LD_VAR 0 2
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: LIST
55420: PUSH
55421: LD_VAR 0 1
55425: PUSH
55426: LD_VAR 0 2
55430: PUSH
55431: LD_INT 3
55433: PLUS
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: LIST
55442: PUSH
55443: LD_VAR 0 1
55447: PUSH
55448: LD_INT 4
55450: PLUS
55451: PUSH
55452: LD_VAR 0 2
55456: PUSH
55457: LD_INT 4
55459: PLUS
55460: PUSH
55461: LD_INT 5
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: ST_TO_ADDR
// end ; 2 :
55476: GO 56035
55478: LD_INT 2
55480: DOUBLE
55481: EQUAL
55482: IFTRUE 55486
55484: GO 55615
55486: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55487: LD_ADDR_VAR 0 5
55491: PUSH
55492: LD_VAR 0 1
55496: PUSH
55497: LD_VAR 0 2
55501: PUSH
55502: LD_INT 3
55504: MINUS
55505: PUSH
55506: LD_INT 3
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: PUSH
55514: LD_VAR 0 1
55518: PUSH
55519: LD_INT 4
55521: PLUS
55522: PUSH
55523: LD_VAR 0 2
55527: PUSH
55528: LD_INT 4
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: PUSH
55536: LD_VAR 0 1
55540: PUSH
55541: LD_VAR 0 2
55545: PUSH
55546: LD_INT 4
55548: PLUS
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: PUSH
55558: LD_VAR 0 1
55562: PUSH
55563: LD_INT 3
55565: MINUS
55566: PUSH
55567: LD_VAR 0 2
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: PUSH
55580: LD_VAR 0 1
55584: PUSH
55585: LD_INT 4
55587: MINUS
55588: PUSH
55589: LD_VAR 0 2
55593: PUSH
55594: LD_INT 4
55596: MINUS
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: LIST
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: ST_TO_ADDR
// end ; 3 :
55613: GO 56035
55615: LD_INT 3
55617: DOUBLE
55618: EQUAL
55619: IFTRUE 55623
55621: GO 55756
55623: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55624: LD_ADDR_VAR 0 5
55628: PUSH
55629: LD_VAR 0 1
55633: PUSH
55634: LD_INT 3
55636: PLUS
55637: PUSH
55638: LD_VAR 0 2
55642: PUSH
55643: LD_INT 4
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: LIST
55650: PUSH
55651: LD_VAR 0 1
55655: PUSH
55656: LD_INT 4
55658: PLUS
55659: PUSH
55660: LD_VAR 0 2
55664: PUSH
55665: LD_INT 4
55667: PLUS
55668: PUSH
55669: LD_INT 5
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: PUSH
55677: LD_VAR 0 1
55681: PUSH
55682: LD_INT 4
55684: MINUS
55685: PUSH
55686: LD_VAR 0 2
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: PUSH
55699: LD_VAR 0 1
55703: PUSH
55704: LD_VAR 0 2
55708: PUSH
55709: LD_INT 4
55711: MINUS
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: PUSH
55721: LD_VAR 0 1
55725: PUSH
55726: LD_INT 3
55728: MINUS
55729: PUSH
55730: LD_VAR 0 2
55734: PUSH
55735: LD_INT 3
55737: MINUS
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: LIST
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: ST_TO_ADDR
// end ; 4 :
55754: GO 56035
55756: LD_INT 4
55758: DOUBLE
55759: EQUAL
55760: IFTRUE 55764
55762: GO 55897
55764: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55765: LD_ADDR_VAR 0 5
55769: PUSH
55770: LD_VAR 0 1
55774: PUSH
55775: LD_VAR 0 2
55779: PUSH
55780: LD_INT 4
55782: PLUS
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: LIST
55791: PUSH
55792: LD_VAR 0 1
55796: PUSH
55797: LD_INT 3
55799: PLUS
55800: PUSH
55801: LD_VAR 0 2
55805: PUSH
55806: LD_INT 3
55808: PLUS
55809: PUSH
55810: LD_INT 5
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: LIST
55817: PUSH
55818: LD_VAR 0 1
55822: PUSH
55823: LD_INT 4
55825: PLUS
55826: PUSH
55827: LD_VAR 0 2
55831: PUSH
55832: LD_INT 4
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: LIST
55839: PUSH
55840: LD_VAR 0 1
55844: PUSH
55845: LD_VAR 0 2
55849: PUSH
55850: LD_INT 3
55852: MINUS
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: PUSH
55862: LD_VAR 0 1
55866: PUSH
55867: LD_INT 4
55869: MINUS
55870: PUSH
55871: LD_VAR 0 2
55875: PUSH
55876: LD_INT 4
55878: MINUS
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: ST_TO_ADDR
// end ; 5 :
55895: GO 56035
55897: LD_INT 5
55899: DOUBLE
55900: EQUAL
55901: IFTRUE 55905
55903: GO 56034
55905: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55906: LD_ADDR_VAR 0 5
55910: PUSH
55911: LD_VAR 0 1
55915: PUSH
55916: LD_INT 4
55918: MINUS
55919: PUSH
55920: LD_VAR 0 2
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: PUSH
55933: LD_VAR 0 1
55937: PUSH
55938: LD_VAR 0 2
55942: PUSH
55943: LD_INT 4
55945: MINUS
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: PUSH
55955: LD_VAR 0 1
55959: PUSH
55960: LD_INT 4
55962: PLUS
55963: PUSH
55964: LD_VAR 0 2
55968: PUSH
55969: LD_INT 4
55971: PLUS
55972: PUSH
55973: LD_INT 5
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: PUSH
55981: LD_VAR 0 1
55985: PUSH
55986: LD_INT 3
55988: PLUS
55989: PUSH
55990: LD_VAR 0 2
55994: PUSH
55995: LD_INT 4
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: LIST
56002: PUSH
56003: LD_VAR 0 1
56007: PUSH
56008: LD_VAR 0 2
56012: PUSH
56013: LD_INT 3
56015: PLUS
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: ST_TO_ADDR
// end ; end ;
56032: GO 56035
56034: POP
// result := list ;
56035: LD_ADDR_VAR 0 4
56039: PUSH
56040: LD_VAR 0 5
56044: ST_TO_ADDR
// end ;
56045: LD_VAR 0 4
56049: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56050: LD_INT 0
56052: PPUSH
56053: PPUSH
56054: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56055: LD_VAR 0 1
56059: NOT
56060: PUSH
56061: LD_VAR 0 2
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: LD_INT 4
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: IN
56084: NOT
56085: OR
56086: IFFALSE 56090
// exit ;
56088: GO 56182
// tmp := [ ] ;
56090: LD_ADDR_VAR 0 5
56094: PUSH
56095: EMPTY
56096: ST_TO_ADDR
// for i in units do
56097: LD_ADDR_VAR 0 4
56101: PUSH
56102: LD_VAR 0 1
56106: PUSH
56107: FOR_IN
56108: IFFALSE 56151
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56110: LD_ADDR_VAR 0 5
56114: PUSH
56115: LD_VAR 0 5
56119: PPUSH
56120: LD_VAR 0 5
56124: PUSH
56125: LD_INT 1
56127: PLUS
56128: PPUSH
56129: LD_VAR 0 4
56133: PPUSH
56134: LD_VAR 0 2
56138: PPUSH
56139: CALL_OW 259
56143: PPUSH
56144: CALL_OW 2
56148: ST_TO_ADDR
56149: GO 56107
56151: POP
56152: POP
// if not tmp then
56153: LD_VAR 0 5
56157: NOT
56158: IFFALSE 56162
// exit ;
56160: GO 56182
// result := SortListByListDesc ( units , tmp ) ;
56162: LD_ADDR_VAR 0 3
56166: PUSH
56167: LD_VAR 0 1
56171: PPUSH
56172: LD_VAR 0 5
56176: PPUSH
56177: CALL_OW 77
56181: ST_TO_ADDR
// end ;
56182: LD_VAR 0 3
56186: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56187: LD_INT 0
56189: PPUSH
56190: PPUSH
56191: PPUSH
// result := false ;
56192: LD_ADDR_VAR 0 3
56196: PUSH
56197: LD_INT 0
56199: ST_TO_ADDR
// x := GetX ( building ) ;
56200: LD_ADDR_VAR 0 4
56204: PUSH
56205: LD_VAR 0 2
56209: PPUSH
56210: CALL_OW 250
56214: ST_TO_ADDR
// y := GetY ( building ) ;
56215: LD_ADDR_VAR 0 5
56219: PUSH
56220: LD_VAR 0 2
56224: PPUSH
56225: CALL_OW 251
56229: ST_TO_ADDR
// if not building or not x or not y then
56230: LD_VAR 0 2
56234: NOT
56235: PUSH
56236: LD_VAR 0 4
56240: NOT
56241: OR
56242: PUSH
56243: LD_VAR 0 5
56247: NOT
56248: OR
56249: IFFALSE 56253
// exit ;
56251: GO 56345
// if GetTaskList ( unit ) then
56253: LD_VAR 0 1
56257: PPUSH
56258: CALL_OW 437
56262: IFFALSE 56345
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56264: LD_STRING e
56266: PUSH
56267: LD_VAR 0 1
56271: PPUSH
56272: CALL_OW 437
56276: PUSH
56277: LD_INT 1
56279: ARRAY
56280: PUSH
56281: LD_INT 1
56283: ARRAY
56284: EQUAL
56285: PUSH
56286: LD_VAR 0 4
56290: PUSH
56291: LD_VAR 0 1
56295: PPUSH
56296: CALL_OW 437
56300: PUSH
56301: LD_INT 1
56303: ARRAY
56304: PUSH
56305: LD_INT 2
56307: ARRAY
56308: EQUAL
56309: AND
56310: PUSH
56311: LD_VAR 0 5
56315: PUSH
56316: LD_VAR 0 1
56320: PPUSH
56321: CALL_OW 437
56325: PUSH
56326: LD_INT 1
56328: ARRAY
56329: PUSH
56330: LD_INT 3
56332: ARRAY
56333: EQUAL
56334: AND
56335: IFFALSE 56345
// result := true end ;
56337: LD_ADDR_VAR 0 3
56341: PUSH
56342: LD_INT 1
56344: ST_TO_ADDR
// end ;
56345: LD_VAR 0 3
56349: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56350: LD_INT 0
56352: PPUSH
// result := false ;
56353: LD_ADDR_VAR 0 4
56357: PUSH
56358: LD_INT 0
56360: ST_TO_ADDR
// if GetTaskList ( unit ) then
56361: LD_VAR 0 1
56365: PPUSH
56366: CALL_OW 437
56370: IFFALSE 56453
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56372: LD_STRING M
56374: PUSH
56375: LD_VAR 0 1
56379: PPUSH
56380: CALL_OW 437
56384: PUSH
56385: LD_INT 1
56387: ARRAY
56388: PUSH
56389: LD_INT 1
56391: ARRAY
56392: EQUAL
56393: PUSH
56394: LD_VAR 0 2
56398: PUSH
56399: LD_VAR 0 1
56403: PPUSH
56404: CALL_OW 437
56408: PUSH
56409: LD_INT 1
56411: ARRAY
56412: PUSH
56413: LD_INT 2
56415: ARRAY
56416: EQUAL
56417: AND
56418: PUSH
56419: LD_VAR 0 3
56423: PUSH
56424: LD_VAR 0 1
56428: PPUSH
56429: CALL_OW 437
56433: PUSH
56434: LD_INT 1
56436: ARRAY
56437: PUSH
56438: LD_INT 3
56440: ARRAY
56441: EQUAL
56442: AND
56443: IFFALSE 56453
// result := true ;
56445: LD_ADDR_VAR 0 4
56449: PUSH
56450: LD_INT 1
56452: ST_TO_ADDR
// end ; end ;
56453: LD_VAR 0 4
56457: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56458: LD_INT 0
56460: PPUSH
56461: PPUSH
56462: PPUSH
56463: PPUSH
// if not unit or not area then
56464: LD_VAR 0 1
56468: NOT
56469: PUSH
56470: LD_VAR 0 2
56474: NOT
56475: OR
56476: IFFALSE 56480
// exit ;
56478: GO 56644
// tmp := AreaToList ( area , i ) ;
56480: LD_ADDR_VAR 0 6
56484: PUSH
56485: LD_VAR 0 2
56489: PPUSH
56490: LD_VAR 0 5
56494: PPUSH
56495: CALL_OW 517
56499: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56500: LD_ADDR_VAR 0 5
56504: PUSH
56505: DOUBLE
56506: LD_INT 1
56508: DEC
56509: ST_TO_ADDR
56510: LD_VAR 0 6
56514: PUSH
56515: LD_INT 1
56517: ARRAY
56518: PUSH
56519: FOR_TO
56520: IFFALSE 56642
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56522: LD_ADDR_VAR 0 7
56526: PUSH
56527: LD_VAR 0 6
56531: PUSH
56532: LD_INT 1
56534: ARRAY
56535: PUSH
56536: LD_VAR 0 5
56540: ARRAY
56541: PUSH
56542: LD_VAR 0 6
56546: PUSH
56547: LD_INT 2
56549: ARRAY
56550: PUSH
56551: LD_VAR 0 5
56555: ARRAY
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56561: LD_VAR 0 7
56565: PUSH
56566: LD_INT 1
56568: ARRAY
56569: PPUSH
56570: LD_VAR 0 7
56574: PUSH
56575: LD_INT 2
56577: ARRAY
56578: PPUSH
56579: CALL_OW 428
56583: PUSH
56584: LD_INT 0
56586: EQUAL
56587: IFFALSE 56640
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56589: LD_VAR 0 1
56593: PPUSH
56594: LD_VAR 0 7
56598: PUSH
56599: LD_INT 1
56601: ARRAY
56602: PPUSH
56603: LD_VAR 0 7
56607: PUSH
56608: LD_INT 2
56610: ARRAY
56611: PPUSH
56612: LD_VAR 0 3
56616: PPUSH
56617: CALL_OW 48
// result := IsPlaced ( unit ) ;
56621: LD_ADDR_VAR 0 4
56625: PUSH
56626: LD_VAR 0 1
56630: PPUSH
56631: CALL_OW 305
56635: ST_TO_ADDR
// exit ;
56636: POP
56637: POP
56638: GO 56644
// end ; end ;
56640: GO 56519
56642: POP
56643: POP
// end ;
56644: LD_VAR 0 4
56648: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56649: LD_INT 0
56651: PPUSH
56652: PPUSH
56653: PPUSH
// if not side or side > 8 then
56654: LD_VAR 0 1
56658: NOT
56659: PUSH
56660: LD_VAR 0 1
56664: PUSH
56665: LD_INT 8
56667: GREATER
56668: OR
56669: IFFALSE 56673
// exit ;
56671: GO 56860
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56673: LD_ADDR_VAR 0 4
56677: PUSH
56678: LD_INT 22
56680: PUSH
56681: LD_VAR 0 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 21
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PPUSH
56704: CALL_OW 69
56708: ST_TO_ADDR
// if not tmp then
56709: LD_VAR 0 4
56713: NOT
56714: IFFALSE 56718
// exit ;
56716: GO 56860
// enable_addtolog := true ;
56718: LD_ADDR_OWVAR 81
56722: PUSH
56723: LD_INT 1
56725: ST_TO_ADDR
// AddToLog ( [ ) ;
56726: LD_STRING [
56728: PPUSH
56729: CALL_OW 561
// for i in tmp do
56733: LD_ADDR_VAR 0 3
56737: PUSH
56738: LD_VAR 0 4
56742: PUSH
56743: FOR_IN
56744: IFFALSE 56851
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56746: LD_STRING [
56748: PUSH
56749: LD_VAR 0 3
56753: PPUSH
56754: CALL_OW 266
56758: STR
56759: PUSH
56760: LD_STRING , 
56762: STR
56763: PUSH
56764: LD_VAR 0 3
56768: PPUSH
56769: CALL_OW 250
56773: STR
56774: PUSH
56775: LD_STRING , 
56777: STR
56778: PUSH
56779: LD_VAR 0 3
56783: PPUSH
56784: CALL_OW 251
56788: STR
56789: PUSH
56790: LD_STRING , 
56792: STR
56793: PUSH
56794: LD_VAR 0 3
56798: PPUSH
56799: CALL_OW 254
56803: STR
56804: PUSH
56805: LD_STRING , 
56807: STR
56808: PUSH
56809: LD_VAR 0 3
56813: PPUSH
56814: LD_INT 1
56816: PPUSH
56817: CALL_OW 268
56821: STR
56822: PUSH
56823: LD_STRING , 
56825: STR
56826: PUSH
56827: LD_VAR 0 3
56831: PPUSH
56832: LD_INT 2
56834: PPUSH
56835: CALL_OW 268
56839: STR
56840: PUSH
56841: LD_STRING ],
56843: STR
56844: PPUSH
56845: CALL_OW 561
// end ;
56849: GO 56743
56851: POP
56852: POP
// AddToLog ( ]; ) ;
56853: LD_STRING ];
56855: PPUSH
56856: CALL_OW 561
// end ;
56860: LD_VAR 0 2
56864: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56865: LD_INT 0
56867: PPUSH
56868: PPUSH
56869: PPUSH
56870: PPUSH
56871: PPUSH
// if not area or not rate or not max then
56872: LD_VAR 0 1
56876: NOT
56877: PUSH
56878: LD_VAR 0 2
56882: NOT
56883: OR
56884: PUSH
56885: LD_VAR 0 4
56889: NOT
56890: OR
56891: IFFALSE 56895
// exit ;
56893: GO 57087
// while 1 do
56895: LD_INT 1
56897: IFFALSE 57087
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56899: LD_ADDR_VAR 0 9
56903: PUSH
56904: LD_VAR 0 1
56908: PPUSH
56909: LD_INT 1
56911: PPUSH
56912: CALL_OW 287
56916: PUSH
56917: LD_INT 10
56919: MUL
56920: ST_TO_ADDR
// r := rate / 10 ;
56921: LD_ADDR_VAR 0 7
56925: PUSH
56926: LD_VAR 0 2
56930: PUSH
56931: LD_INT 10
56933: DIVREAL
56934: ST_TO_ADDR
// time := 1 1$00 ;
56935: LD_ADDR_VAR 0 8
56939: PUSH
56940: LD_INT 2100
56942: ST_TO_ADDR
// if amount < min then
56943: LD_VAR 0 9
56947: PUSH
56948: LD_VAR 0 3
56952: LESS
56953: IFFALSE 56971
// r := r * 2 else
56955: LD_ADDR_VAR 0 7
56959: PUSH
56960: LD_VAR 0 7
56964: PUSH
56965: LD_INT 2
56967: MUL
56968: ST_TO_ADDR
56969: GO 56997
// if amount > max then
56971: LD_VAR 0 9
56975: PUSH
56976: LD_VAR 0 4
56980: GREATER
56981: IFFALSE 56997
// r := r / 2 ;
56983: LD_ADDR_VAR 0 7
56987: PUSH
56988: LD_VAR 0 7
56992: PUSH
56993: LD_INT 2
56995: DIVREAL
56996: ST_TO_ADDR
// time := time / r ;
56997: LD_ADDR_VAR 0 8
57001: PUSH
57002: LD_VAR 0 8
57006: PUSH
57007: LD_VAR 0 7
57011: DIVREAL
57012: ST_TO_ADDR
// if time < 0 then
57013: LD_VAR 0 8
57017: PUSH
57018: LD_INT 0
57020: LESS
57021: IFFALSE 57038
// time := time * - 1 ;
57023: LD_ADDR_VAR 0 8
57027: PUSH
57028: LD_VAR 0 8
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: MUL
57037: ST_TO_ADDR
// wait ( time ) ;
57038: LD_VAR 0 8
57042: PPUSH
57043: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57047: LD_INT 35
57049: PPUSH
57050: LD_INT 875
57052: PPUSH
57053: CALL_OW 12
57057: PPUSH
57058: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57062: LD_INT 1
57064: PPUSH
57065: LD_INT 5
57067: PPUSH
57068: CALL_OW 12
57072: PPUSH
57073: LD_VAR 0 1
57077: PPUSH
57078: LD_INT 1
57080: PPUSH
57081: CALL_OW 55
// end ;
57085: GO 56895
// end ;
57087: LD_VAR 0 5
57091: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57092: LD_INT 0
57094: PPUSH
57095: PPUSH
57096: PPUSH
57097: PPUSH
57098: PPUSH
57099: PPUSH
57100: PPUSH
57101: PPUSH
// if not turrets or not factories then
57102: LD_VAR 0 1
57106: NOT
57107: PUSH
57108: LD_VAR 0 2
57112: NOT
57113: OR
57114: IFFALSE 57118
// exit ;
57116: GO 57425
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57118: LD_ADDR_VAR 0 10
57122: PUSH
57123: LD_INT 5
57125: PUSH
57126: LD_INT 6
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 4
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 5
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 24
57160: PUSH
57161: LD_INT 25
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 23
57170: PUSH
57171: LD_INT 27
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 42
57184: PUSH
57185: LD_INT 43
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 44
57194: PUSH
57195: LD_INT 46
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 45
57204: PUSH
57205: LD_INT 47
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: LIST
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: ST_TO_ADDR
// result := [ ] ;
57222: LD_ADDR_VAR 0 3
57226: PUSH
57227: EMPTY
57228: ST_TO_ADDR
// for i in turrets do
57229: LD_ADDR_VAR 0 4
57233: PUSH
57234: LD_VAR 0 1
57238: PUSH
57239: FOR_IN
57240: IFFALSE 57423
// begin nat := GetNation ( i ) ;
57242: LD_ADDR_VAR 0 7
57246: PUSH
57247: LD_VAR 0 4
57251: PPUSH
57252: CALL_OW 248
57256: ST_TO_ADDR
// weapon := 0 ;
57257: LD_ADDR_VAR 0 8
57261: PUSH
57262: LD_INT 0
57264: ST_TO_ADDR
// if not nat then
57265: LD_VAR 0 7
57269: NOT
57270: IFFALSE 57274
// continue ;
57272: GO 57239
// for j in list [ nat ] do
57274: LD_ADDR_VAR 0 5
57278: PUSH
57279: LD_VAR 0 10
57283: PUSH
57284: LD_VAR 0 7
57288: ARRAY
57289: PUSH
57290: FOR_IN
57291: IFFALSE 57332
// if GetBWeapon ( i ) = j [ 1 ] then
57293: LD_VAR 0 4
57297: PPUSH
57298: CALL_OW 269
57302: PUSH
57303: LD_VAR 0 5
57307: PUSH
57308: LD_INT 1
57310: ARRAY
57311: EQUAL
57312: IFFALSE 57330
// begin weapon := j [ 2 ] ;
57314: LD_ADDR_VAR 0 8
57318: PUSH
57319: LD_VAR 0 5
57323: PUSH
57324: LD_INT 2
57326: ARRAY
57327: ST_TO_ADDR
// break ;
57328: GO 57332
// end ;
57330: GO 57290
57332: POP
57333: POP
// if not weapon then
57334: LD_VAR 0 8
57338: NOT
57339: IFFALSE 57343
// continue ;
57341: GO 57239
// for k in factories do
57343: LD_ADDR_VAR 0 6
57347: PUSH
57348: LD_VAR 0 2
57352: PUSH
57353: FOR_IN
57354: IFFALSE 57419
// begin weapons := AvailableWeaponList ( k ) ;
57356: LD_ADDR_VAR 0 9
57360: PUSH
57361: LD_VAR 0 6
57365: PPUSH
57366: CALL_OW 478
57370: ST_TO_ADDR
// if not weapons then
57371: LD_VAR 0 9
57375: NOT
57376: IFFALSE 57380
// continue ;
57378: GO 57353
// if weapon in weapons then
57380: LD_VAR 0 8
57384: PUSH
57385: LD_VAR 0 9
57389: IN
57390: IFFALSE 57417
// begin result := [ i , weapon ] ;
57392: LD_ADDR_VAR 0 3
57396: PUSH
57397: LD_VAR 0 4
57401: PUSH
57402: LD_VAR 0 8
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// exit ;
57411: POP
57412: POP
57413: POP
57414: POP
57415: GO 57425
// end ; end ;
57417: GO 57353
57419: POP
57420: POP
// end ;
57421: GO 57239
57423: POP
57424: POP
// end ;
57425: LD_VAR 0 3
57429: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57430: LD_INT 0
57432: PPUSH
// if not side or side > 8 then
57433: LD_VAR 0 3
57437: NOT
57438: PUSH
57439: LD_VAR 0 3
57443: PUSH
57444: LD_INT 8
57446: GREATER
57447: OR
57448: IFFALSE 57452
// exit ;
57450: GO 57511
// if not range then
57452: LD_VAR 0 4
57456: NOT
57457: IFFALSE 57468
// range := - 12 ;
57459: LD_ADDR_VAR 0 4
57463: PUSH
57464: LD_INT 12
57466: NEG
57467: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57468: LD_VAR 0 1
57472: PPUSH
57473: LD_VAR 0 2
57477: PPUSH
57478: LD_VAR 0 3
57482: PPUSH
57483: LD_VAR 0 4
57487: PPUSH
57488: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57492: LD_VAR 0 1
57496: PPUSH
57497: LD_VAR 0 2
57501: PPUSH
57502: LD_VAR 0 3
57506: PPUSH
57507: CALL_OW 331
// end ;
57511: LD_VAR 0 5
57515: RET
// export function Video ( mode ) ; begin
57516: LD_INT 0
57518: PPUSH
// ingame_video = mode ;
57519: LD_ADDR_OWVAR 52
57523: PUSH
57524: LD_VAR 0 1
57528: ST_TO_ADDR
// interface_hidden = mode ;
57529: LD_ADDR_OWVAR 54
57533: PUSH
57534: LD_VAR 0 1
57538: ST_TO_ADDR
// end ;
57539: LD_VAR 0 2
57543: RET
// export function Join ( array , element ) ; begin
57544: LD_INT 0
57546: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57547: LD_ADDR_VAR 0 3
57551: PUSH
57552: LD_VAR 0 1
57556: PPUSH
57557: LD_VAR 0 1
57561: PUSH
57562: LD_INT 1
57564: PLUS
57565: PPUSH
57566: LD_VAR 0 2
57570: PPUSH
57571: CALL_OW 1
57575: ST_TO_ADDR
// end ;
57576: LD_VAR 0 3
57580: RET
// export function JoinUnion ( array , element ) ; begin
57581: LD_INT 0
57583: PPUSH
// result := array union element ;
57584: LD_ADDR_VAR 0 3
57588: PUSH
57589: LD_VAR 0 1
57593: PUSH
57594: LD_VAR 0 2
57598: UNION
57599: ST_TO_ADDR
// end ;
57600: LD_VAR 0 3
57604: RET
// export function GetBehemoths ( side ) ; begin
57605: LD_INT 0
57607: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57608: LD_ADDR_VAR 0 2
57612: PUSH
57613: LD_INT 22
57615: PUSH
57616: LD_VAR 0 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 31
57627: PUSH
57628: LD_INT 25
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PPUSH
57639: CALL_OW 69
57643: ST_TO_ADDR
// end ;
57644: LD_VAR 0 2
57648: RET
// export function Shuffle ( array ) ; var i , index ; begin
57649: LD_INT 0
57651: PPUSH
57652: PPUSH
57653: PPUSH
// result := [ ] ;
57654: LD_ADDR_VAR 0 2
57658: PUSH
57659: EMPTY
57660: ST_TO_ADDR
// if not array then
57661: LD_VAR 0 1
57665: NOT
57666: IFFALSE 57670
// exit ;
57668: GO 57769
// Randomize ;
57670: CALL_OW 10
// for i = array downto 1 do
57674: LD_ADDR_VAR 0 3
57678: PUSH
57679: DOUBLE
57680: LD_VAR 0 1
57684: INC
57685: ST_TO_ADDR
57686: LD_INT 1
57688: PUSH
57689: FOR_DOWNTO
57690: IFFALSE 57767
// begin index := rand ( 1 , array ) ;
57692: LD_ADDR_VAR 0 4
57696: PUSH
57697: LD_INT 1
57699: PPUSH
57700: LD_VAR 0 1
57704: PPUSH
57705: CALL_OW 12
57709: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57710: LD_ADDR_VAR 0 2
57714: PUSH
57715: LD_VAR 0 2
57719: PPUSH
57720: LD_VAR 0 2
57724: PUSH
57725: LD_INT 1
57727: PLUS
57728: PPUSH
57729: LD_VAR 0 1
57733: PUSH
57734: LD_VAR 0 4
57738: ARRAY
57739: PPUSH
57740: CALL_OW 2
57744: ST_TO_ADDR
// array := Delete ( array , index ) ;
57745: LD_ADDR_VAR 0 1
57749: PUSH
57750: LD_VAR 0 1
57754: PPUSH
57755: LD_VAR 0 4
57759: PPUSH
57760: CALL_OW 3
57764: ST_TO_ADDR
// end ;
57765: GO 57689
57767: POP
57768: POP
// end ;
57769: LD_VAR 0 2
57773: RET
// export function GetBaseMaterials ( base ) ; begin
57774: LD_INT 0
57776: PPUSH
// result := [ 0 , 0 , 0 ] ;
57777: LD_ADDR_VAR 0 2
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: LIST
57795: ST_TO_ADDR
// if not base then
57796: LD_VAR 0 1
57800: NOT
57801: IFFALSE 57805
// exit ;
57803: GO 57854
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57805: LD_ADDR_VAR 0 2
57809: PUSH
57810: LD_VAR 0 1
57814: PPUSH
57815: LD_INT 1
57817: PPUSH
57818: CALL_OW 275
57822: PUSH
57823: LD_VAR 0 1
57827: PPUSH
57828: LD_INT 2
57830: PPUSH
57831: CALL_OW 275
57835: PUSH
57836: LD_VAR 0 1
57840: PPUSH
57841: LD_INT 3
57843: PPUSH
57844: CALL_OW 275
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: ST_TO_ADDR
// end ;
57854: LD_VAR 0 2
57858: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57859: LD_INT 0
57861: PPUSH
57862: PPUSH
// result := array ;
57863: LD_ADDR_VAR 0 3
57867: PUSH
57868: LD_VAR 0 1
57872: ST_TO_ADDR
// if size > 0 then
57873: LD_VAR 0 2
57877: PUSH
57878: LD_INT 0
57880: GREATER
57881: IFFALSE 57927
// for i := array downto size do
57883: LD_ADDR_VAR 0 4
57887: PUSH
57888: DOUBLE
57889: LD_VAR 0 1
57893: INC
57894: ST_TO_ADDR
57895: LD_VAR 0 2
57899: PUSH
57900: FOR_DOWNTO
57901: IFFALSE 57925
// result := Delete ( result , result ) ;
57903: LD_ADDR_VAR 0 3
57907: PUSH
57908: LD_VAR 0 3
57912: PPUSH
57913: LD_VAR 0 3
57917: PPUSH
57918: CALL_OW 3
57922: ST_TO_ADDR
57923: GO 57900
57925: POP
57926: POP
// end ;
57927: LD_VAR 0 3
57931: RET
// export function ComExit ( unit ) ; var tmp ; begin
57932: LD_INT 0
57934: PPUSH
57935: PPUSH
// if not IsInUnit ( unit ) then
57936: LD_VAR 0 1
57940: PPUSH
57941: CALL_OW 310
57945: NOT
57946: IFFALSE 57950
// exit ;
57948: GO 58010
// tmp := IsInUnit ( unit ) ;
57950: LD_ADDR_VAR 0 3
57954: PUSH
57955: LD_VAR 0 1
57959: PPUSH
57960: CALL_OW 310
57964: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57965: LD_VAR 0 3
57969: PPUSH
57970: CALL_OW 247
57974: PUSH
57975: LD_INT 2
57977: EQUAL
57978: IFFALSE 57991
// ComExitVehicle ( unit ) else
57980: LD_VAR 0 1
57984: PPUSH
57985: CALL_OW 121
57989: GO 58000
// ComExitBuilding ( unit ) ;
57991: LD_VAR 0 1
57995: PPUSH
57996: CALL_OW 122
// result := tmp ;
58000: LD_ADDR_VAR 0 2
58004: PUSH
58005: LD_VAR 0 3
58009: ST_TO_ADDR
// end ;
58010: LD_VAR 0 2
58014: RET
// export function ComExitAll ( units ) ; var i ; begin
58015: LD_INT 0
58017: PPUSH
58018: PPUSH
// if not units then
58019: LD_VAR 0 1
58023: NOT
58024: IFFALSE 58028
// exit ;
58026: GO 58054
// for i in units do
58028: LD_ADDR_VAR 0 3
58032: PUSH
58033: LD_VAR 0 1
58037: PUSH
58038: FOR_IN
58039: IFFALSE 58052
// ComExit ( i ) ;
58041: LD_VAR 0 3
58045: PPUSH
58046: CALL 57932 0 1
58050: GO 58038
58052: POP
58053: POP
// end ;
58054: LD_VAR 0 2
58058: RET
// export function ResetHc ; begin
58059: LD_INT 0
58061: PPUSH
// InitHc ;
58062: CALL_OW 19
// hc_importance := 0 ;
58066: LD_ADDR_OWVAR 32
58070: PUSH
58071: LD_INT 0
58073: ST_TO_ADDR
// end ;
58074: LD_VAR 0 1
58078: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58079: LD_INT 0
58081: PPUSH
58082: PPUSH
58083: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58084: LD_ADDR_VAR 0 6
58088: PUSH
58089: LD_VAR 0 1
58093: PUSH
58094: LD_VAR 0 3
58098: PLUS
58099: PUSH
58100: LD_INT 2
58102: DIV
58103: ST_TO_ADDR
// if _x < 0 then
58104: LD_VAR 0 6
58108: PUSH
58109: LD_INT 0
58111: LESS
58112: IFFALSE 58129
// _x := _x * - 1 ;
58114: LD_ADDR_VAR 0 6
58118: PUSH
58119: LD_VAR 0 6
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: MUL
58128: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58129: LD_ADDR_VAR 0 7
58133: PUSH
58134: LD_VAR 0 2
58138: PUSH
58139: LD_VAR 0 4
58143: PLUS
58144: PUSH
58145: LD_INT 2
58147: DIV
58148: ST_TO_ADDR
// if _y < 0 then
58149: LD_VAR 0 7
58153: PUSH
58154: LD_INT 0
58156: LESS
58157: IFFALSE 58174
// _y := _y * - 1 ;
58159: LD_ADDR_VAR 0 7
58163: PUSH
58164: LD_VAR 0 7
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: MUL
58173: ST_TO_ADDR
// result := [ _x , _y ] ;
58174: LD_ADDR_VAR 0 5
58178: PUSH
58179: LD_VAR 0 6
58183: PUSH
58184: LD_VAR 0 7
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// end ;
58193: LD_VAR 0 5
58197: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58198: LD_INT 0
58200: PPUSH
58201: PPUSH
58202: PPUSH
58203: PPUSH
// task := GetTaskList ( unit ) ;
58204: LD_ADDR_VAR 0 7
58208: PUSH
58209: LD_VAR 0 1
58213: PPUSH
58214: CALL_OW 437
58218: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58219: LD_VAR 0 7
58223: NOT
58224: PUSH
58225: LD_VAR 0 1
58229: PPUSH
58230: LD_VAR 0 2
58234: PPUSH
58235: CALL_OW 308
58239: NOT
58240: AND
58241: IFFALSE 58245
// exit ;
58243: GO 58363
// if IsInArea ( unit , area ) then
58245: LD_VAR 0 1
58249: PPUSH
58250: LD_VAR 0 2
58254: PPUSH
58255: CALL_OW 308
58259: IFFALSE 58277
// begin ComMoveToArea ( unit , goAway ) ;
58261: LD_VAR 0 1
58265: PPUSH
58266: LD_VAR 0 3
58270: PPUSH
58271: CALL_OW 113
// exit ;
58275: GO 58363
// end ; if task [ 1 ] [ 1 ] <> M then
58277: LD_VAR 0 7
58281: PUSH
58282: LD_INT 1
58284: ARRAY
58285: PUSH
58286: LD_INT 1
58288: ARRAY
58289: PUSH
58290: LD_STRING M
58292: NONEQUAL
58293: IFFALSE 58297
// exit ;
58295: GO 58363
// x := task [ 1 ] [ 2 ] ;
58297: LD_ADDR_VAR 0 5
58301: PUSH
58302: LD_VAR 0 7
58306: PUSH
58307: LD_INT 1
58309: ARRAY
58310: PUSH
58311: LD_INT 2
58313: ARRAY
58314: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58315: LD_ADDR_VAR 0 6
58319: PUSH
58320: LD_VAR 0 7
58324: PUSH
58325: LD_INT 1
58327: ARRAY
58328: PUSH
58329: LD_INT 3
58331: ARRAY
58332: ST_TO_ADDR
// if InArea ( x , y , area ) then
58333: LD_VAR 0 5
58337: PPUSH
58338: LD_VAR 0 6
58342: PPUSH
58343: LD_VAR 0 2
58347: PPUSH
58348: CALL_OW 309
58352: IFFALSE 58363
// ComStop ( unit ) ;
58354: LD_VAR 0 1
58358: PPUSH
58359: CALL_OW 141
// end ;
58363: LD_VAR 0 4
58367: RET
// export function Abs ( value ) ; begin
58368: LD_INT 0
58370: PPUSH
// result := value ;
58371: LD_ADDR_VAR 0 2
58375: PUSH
58376: LD_VAR 0 1
58380: ST_TO_ADDR
// if value < 0 then
58381: LD_VAR 0 1
58385: PUSH
58386: LD_INT 0
58388: LESS
58389: IFFALSE 58406
// result := value * - 1 ;
58391: LD_ADDR_VAR 0 2
58395: PUSH
58396: LD_VAR 0 1
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: MUL
58405: ST_TO_ADDR
// end ;
58406: LD_VAR 0 2
58410: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58411: LD_INT 0
58413: PPUSH
58414: PPUSH
58415: PPUSH
58416: PPUSH
58417: PPUSH
58418: PPUSH
58419: PPUSH
58420: PPUSH
// if not unit or not building then
58421: LD_VAR 0 1
58425: NOT
58426: PUSH
58427: LD_VAR 0 2
58431: NOT
58432: OR
58433: IFFALSE 58437
// exit ;
58435: GO 58663
// x := GetX ( building ) ;
58437: LD_ADDR_VAR 0 4
58441: PUSH
58442: LD_VAR 0 2
58446: PPUSH
58447: CALL_OW 250
58451: ST_TO_ADDR
// y := GetY ( building ) ;
58452: LD_ADDR_VAR 0 6
58456: PUSH
58457: LD_VAR 0 2
58461: PPUSH
58462: CALL_OW 251
58466: ST_TO_ADDR
// d := GetDir ( building ) ;
58467: LD_ADDR_VAR 0 8
58471: PUSH
58472: LD_VAR 0 2
58476: PPUSH
58477: CALL_OW 254
58481: ST_TO_ADDR
// r := 4 ;
58482: LD_ADDR_VAR 0 9
58486: PUSH
58487: LD_INT 4
58489: ST_TO_ADDR
// for i := 1 to 5 do
58490: LD_ADDR_VAR 0 10
58494: PUSH
58495: DOUBLE
58496: LD_INT 1
58498: DEC
58499: ST_TO_ADDR
58500: LD_INT 5
58502: PUSH
58503: FOR_TO
58504: IFFALSE 58661
// begin _x := ShiftX ( x , d , r + i ) ;
58506: LD_ADDR_VAR 0 5
58510: PUSH
58511: LD_VAR 0 4
58515: PPUSH
58516: LD_VAR 0 8
58520: PPUSH
58521: LD_VAR 0 9
58525: PUSH
58526: LD_VAR 0 10
58530: PLUS
58531: PPUSH
58532: CALL_OW 272
58536: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58537: LD_ADDR_VAR 0 7
58541: PUSH
58542: LD_VAR 0 6
58546: PPUSH
58547: LD_VAR 0 8
58551: PPUSH
58552: LD_VAR 0 9
58556: PUSH
58557: LD_VAR 0 10
58561: PLUS
58562: PPUSH
58563: CALL_OW 273
58567: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58568: LD_VAR 0 5
58572: PPUSH
58573: LD_VAR 0 7
58577: PPUSH
58578: CALL_OW 488
58582: PUSH
58583: LD_VAR 0 5
58587: PPUSH
58588: LD_VAR 0 7
58592: PPUSH
58593: CALL_OW 428
58597: PPUSH
58598: CALL_OW 247
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: IN
58613: NOT
58614: AND
58615: IFFALSE 58659
// begin ComMoveXY ( unit , _x , _y ) ;
58617: LD_VAR 0 1
58621: PPUSH
58622: LD_VAR 0 5
58626: PPUSH
58627: LD_VAR 0 7
58631: PPUSH
58632: CALL_OW 111
// result := [ _x , _y ] ;
58636: LD_ADDR_VAR 0 3
58640: PUSH
58641: LD_VAR 0 5
58645: PUSH
58646: LD_VAR 0 7
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: ST_TO_ADDR
// exit ;
58655: POP
58656: POP
58657: GO 58663
// end ; end ;
58659: GO 58503
58661: POP
58662: POP
// end ;
58663: LD_VAR 0 3
58667: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58668: LD_INT 0
58670: PPUSH
58671: PPUSH
58672: PPUSH
// result := 0 ;
58673: LD_ADDR_VAR 0 3
58677: PUSH
58678: LD_INT 0
58680: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58681: LD_VAR 0 1
58685: PUSH
58686: LD_INT 0
58688: LESS
58689: PUSH
58690: LD_VAR 0 1
58694: PUSH
58695: LD_INT 8
58697: GREATER
58698: OR
58699: PUSH
58700: LD_VAR 0 2
58704: PUSH
58705: LD_INT 0
58707: LESS
58708: OR
58709: PUSH
58710: LD_VAR 0 2
58714: PUSH
58715: LD_INT 8
58717: GREATER
58718: OR
58719: IFFALSE 58723
// exit ;
58721: GO 58798
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58723: LD_ADDR_VAR 0 4
58727: PUSH
58728: LD_INT 22
58730: PUSH
58731: LD_VAR 0 2
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PPUSH
58740: CALL_OW 69
58744: PUSH
58745: FOR_IN
58746: IFFALSE 58796
// begin un := UnitShoot ( i ) ;
58748: LD_ADDR_VAR 0 5
58752: PUSH
58753: LD_VAR 0 4
58757: PPUSH
58758: CALL_OW 504
58762: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58763: LD_VAR 0 5
58767: PPUSH
58768: CALL_OW 255
58772: PUSH
58773: LD_VAR 0 1
58777: EQUAL
58778: IFFALSE 58794
// begin result := un ;
58780: LD_ADDR_VAR 0 3
58784: PUSH
58785: LD_VAR 0 5
58789: ST_TO_ADDR
// exit ;
58790: POP
58791: POP
58792: GO 58798
// end ; end ;
58794: GO 58745
58796: POP
58797: POP
// end ;
58798: LD_VAR 0 3
58802: RET
// export function GetCargoBay ( units ) ; begin
58803: LD_INT 0
58805: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58806: LD_ADDR_VAR 0 2
58810: PUSH
58811: LD_VAR 0 1
58815: PPUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 34
58821: PUSH
58822: LD_INT 12
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 34
58831: PUSH
58832: LD_INT 51
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 34
58841: PUSH
58842: LD_INT 32
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 34
58851: PUSH
58852: LD_EXP 127
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: PPUSH
58868: CALL_OW 72
58872: ST_TO_ADDR
// end ; end_of_file
58873: LD_VAR 0 2
58877: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
58878: LD_INT 0
58880: PPUSH
58881: PPUSH
58882: PPUSH
58883: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
58884: LD_VAR 0 1
58888: PPUSH
58889: CALL_OW 264
58893: PUSH
58894: LD_EXP 130
58898: EQUAL
58899: IFFALSE 58971
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58901: LD_INT 68
58903: PPUSH
58904: LD_VAR 0 1
58908: PPUSH
58909: CALL_OW 255
58913: PPUSH
58914: CALL_OW 321
58918: PUSH
58919: LD_INT 2
58921: EQUAL
58922: IFFALSE 58934
// eff := 70 else
58924: LD_ADDR_VAR 0 4
58928: PUSH
58929: LD_INT 70
58931: ST_TO_ADDR
58932: GO 58942
// eff := 30 ;
58934: LD_ADDR_VAR 0 4
58938: PUSH
58939: LD_INT 30
58941: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58942: LD_VAR 0 1
58946: PPUSH
58947: CALL_OW 250
58951: PPUSH
58952: LD_VAR 0 1
58956: PPUSH
58957: CALL_OW 251
58961: PPUSH
58962: LD_VAR 0 4
58966: PPUSH
58967: CALL_OW 495
// end ; end ;
58971: LD_VAR 0 2
58975: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58976: LD_INT 0
58978: PPUSH
// end ;
58979: LD_VAR 0 4
58983: RET
// export function SOS_Command ( cmd ) ; begin
58984: LD_INT 0
58986: PPUSH
// end ;
58987: LD_VAR 0 2
58991: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58992: LD_INT 0
58994: PPUSH
// if cmd = 121 then
58995: LD_VAR 0 1
58999: PUSH
59000: LD_INT 121
59002: EQUAL
59003: IFFALSE 59005
// end ;
59005: LD_VAR 0 6
59009: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59010: LD_INT 0
59012: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59013: LD_VAR 0 1
59017: PUSH
59018: LD_INT 250
59020: EQUAL
59021: PUSH
59022: LD_VAR 0 2
59026: PPUSH
59027: CALL_OW 264
59031: PUSH
59032: LD_EXP 133
59036: EQUAL
59037: AND
59038: IFFALSE 59059
// MinerPlaceMine ( unit , x , y ) ;
59040: LD_VAR 0 2
59044: PPUSH
59045: LD_VAR 0 4
59049: PPUSH
59050: LD_VAR 0 5
59054: PPUSH
59055: CALL 61408 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59059: LD_VAR 0 1
59063: PUSH
59064: LD_INT 251
59066: EQUAL
59067: PUSH
59068: LD_VAR 0 2
59072: PPUSH
59073: CALL_OW 264
59077: PUSH
59078: LD_EXP 133
59082: EQUAL
59083: AND
59084: IFFALSE 59105
// MinerDetonateMine ( unit , x , y ) ;
59086: LD_VAR 0 2
59090: PPUSH
59091: LD_VAR 0 4
59095: PPUSH
59096: LD_VAR 0 5
59100: PPUSH
59101: CALL 61685 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59105: LD_VAR 0 1
59109: PUSH
59110: LD_INT 252
59112: EQUAL
59113: PUSH
59114: LD_VAR 0 2
59118: PPUSH
59119: CALL_OW 264
59123: PUSH
59124: LD_EXP 133
59128: EQUAL
59129: AND
59130: IFFALSE 59151
// MinerCreateMinefield ( unit , x , y ) ;
59132: LD_VAR 0 2
59136: PPUSH
59137: LD_VAR 0 4
59141: PPUSH
59142: LD_VAR 0 5
59146: PPUSH
59147: CALL 62102 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59151: LD_VAR 0 1
59155: PUSH
59156: LD_INT 253
59158: EQUAL
59159: PUSH
59160: LD_VAR 0 2
59164: PPUSH
59165: CALL_OW 257
59169: PUSH
59170: LD_INT 5
59172: EQUAL
59173: AND
59174: IFFALSE 59195
// ComBinocular ( unit , x , y ) ;
59176: LD_VAR 0 2
59180: PPUSH
59181: LD_VAR 0 4
59185: PPUSH
59186: LD_VAR 0 5
59190: PPUSH
59191: CALL 62473 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59195: LD_VAR 0 1
59199: PUSH
59200: LD_INT 254
59202: EQUAL
59203: PUSH
59204: LD_VAR 0 2
59208: PPUSH
59209: CALL_OW 264
59213: PUSH
59214: LD_EXP 128
59218: EQUAL
59219: AND
59220: PUSH
59221: LD_VAR 0 3
59225: PPUSH
59226: CALL_OW 263
59230: PUSH
59231: LD_INT 3
59233: EQUAL
59234: AND
59235: IFFALSE 59251
// HackDestroyVehicle ( unit , selectedUnit ) ;
59237: LD_VAR 0 2
59241: PPUSH
59242: LD_VAR 0 3
59246: PPUSH
59247: CALL 60768 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59251: LD_VAR 0 1
59255: PUSH
59256: LD_INT 255
59258: EQUAL
59259: PUSH
59260: LD_VAR 0 2
59264: PPUSH
59265: CALL_OW 264
59269: PUSH
59270: LD_INT 14
59272: PUSH
59273: LD_INT 53
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: IN
59280: AND
59281: PUSH
59282: LD_VAR 0 4
59286: PPUSH
59287: LD_VAR 0 5
59291: PPUSH
59292: CALL_OW 488
59296: AND
59297: IFFALSE 59321
// CutTreeXYR ( unit , x , y , 12 ) ;
59299: LD_VAR 0 2
59303: PPUSH
59304: LD_VAR 0 4
59308: PPUSH
59309: LD_VAR 0 5
59313: PPUSH
59314: LD_INT 12
59316: PPUSH
59317: CALL 59334 0 4
// end ;
59321: LD_VAR 0 6
59325: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
59326: LD_INT 0
59328: PPUSH
// end ;
59329: LD_VAR 0 4
59333: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59334: LD_INT 0
59336: PPUSH
59337: PPUSH
59338: PPUSH
59339: PPUSH
59340: PPUSH
59341: PPUSH
59342: PPUSH
59343: PPUSH
59344: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
59345: LD_VAR 0 1
59349: NOT
59350: PUSH
59351: LD_VAR 0 2
59355: PPUSH
59356: LD_VAR 0 3
59360: PPUSH
59361: CALL_OW 488
59365: NOT
59366: OR
59367: PUSH
59368: LD_VAR 0 4
59372: NOT
59373: OR
59374: IFFALSE 59378
// exit ;
59376: GO 59718
// list := [ ] ;
59378: LD_ADDR_VAR 0 13
59382: PUSH
59383: EMPTY
59384: ST_TO_ADDR
// if x - r < 0 then
59385: LD_VAR 0 2
59389: PUSH
59390: LD_VAR 0 4
59394: MINUS
59395: PUSH
59396: LD_INT 0
59398: LESS
59399: IFFALSE 59411
// min_x := 0 else
59401: LD_ADDR_VAR 0 7
59405: PUSH
59406: LD_INT 0
59408: ST_TO_ADDR
59409: GO 59427
// min_x := x - r ;
59411: LD_ADDR_VAR 0 7
59415: PUSH
59416: LD_VAR 0 2
59420: PUSH
59421: LD_VAR 0 4
59425: MINUS
59426: ST_TO_ADDR
// if y - r < 0 then
59427: LD_VAR 0 3
59431: PUSH
59432: LD_VAR 0 4
59436: MINUS
59437: PUSH
59438: LD_INT 0
59440: LESS
59441: IFFALSE 59453
// min_y := 0 else
59443: LD_ADDR_VAR 0 8
59447: PUSH
59448: LD_INT 0
59450: ST_TO_ADDR
59451: GO 59469
// min_y := y - r ;
59453: LD_ADDR_VAR 0 8
59457: PUSH
59458: LD_VAR 0 3
59462: PUSH
59463: LD_VAR 0 4
59467: MINUS
59468: ST_TO_ADDR
// max_x := x + r ;
59469: LD_ADDR_VAR 0 9
59473: PUSH
59474: LD_VAR 0 2
59478: PUSH
59479: LD_VAR 0 4
59483: PLUS
59484: ST_TO_ADDR
// max_y := y + r ;
59485: LD_ADDR_VAR 0 10
59489: PUSH
59490: LD_VAR 0 3
59494: PUSH
59495: LD_VAR 0 4
59499: PLUS
59500: ST_TO_ADDR
// for _x = min_x to max_x do
59501: LD_ADDR_VAR 0 11
59505: PUSH
59506: DOUBLE
59507: LD_VAR 0 7
59511: DEC
59512: ST_TO_ADDR
59513: LD_VAR 0 9
59517: PUSH
59518: FOR_TO
59519: IFFALSE 59636
// for _y = min_y to max_y do
59521: LD_ADDR_VAR 0 12
59525: PUSH
59526: DOUBLE
59527: LD_VAR 0 8
59531: DEC
59532: ST_TO_ADDR
59533: LD_VAR 0 10
59537: PUSH
59538: FOR_TO
59539: IFFALSE 59632
// begin if not ValidHex ( _x , _y ) then
59541: LD_VAR 0 11
59545: PPUSH
59546: LD_VAR 0 12
59550: PPUSH
59551: CALL_OW 488
59555: NOT
59556: IFFALSE 59560
// continue ;
59558: GO 59538
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59560: LD_VAR 0 11
59564: PPUSH
59565: LD_VAR 0 12
59569: PPUSH
59570: CALL_OW 351
59574: PUSH
59575: LD_VAR 0 11
59579: PPUSH
59580: LD_VAR 0 12
59584: PPUSH
59585: CALL_OW 554
59589: AND
59590: IFFALSE 59630
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59592: LD_ADDR_VAR 0 13
59596: PUSH
59597: LD_VAR 0 13
59601: PPUSH
59602: LD_VAR 0 13
59606: PUSH
59607: LD_INT 1
59609: PLUS
59610: PPUSH
59611: LD_VAR 0 11
59615: PUSH
59616: LD_VAR 0 12
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PPUSH
59625: CALL_OW 2
59629: ST_TO_ADDR
// end ;
59630: GO 59538
59632: POP
59633: POP
59634: GO 59518
59636: POP
59637: POP
// if not list then
59638: LD_VAR 0 13
59642: NOT
59643: IFFALSE 59647
// exit ;
59645: GO 59718
// for i in list do
59647: LD_ADDR_VAR 0 6
59651: PUSH
59652: LD_VAR 0 13
59656: PUSH
59657: FOR_IN
59658: IFFALSE 59716
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59660: LD_VAR 0 1
59664: PPUSH
59665: LD_STRING M
59667: PUSH
59668: LD_VAR 0 6
59672: PUSH
59673: LD_INT 1
59675: ARRAY
59676: PUSH
59677: LD_VAR 0 6
59681: PUSH
59682: LD_INT 2
59684: ARRAY
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: PUSH
59707: EMPTY
59708: LIST
59709: PPUSH
59710: CALL_OW 447
59714: GO 59657
59716: POP
59717: POP
// end ;
59718: LD_VAR 0 5
59722: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59723: LD_EXP 61
59727: NOT
59728: IFFALSE 59778
59730: GO 59732
59732: DISABLE
// begin initHack := true ;
59733: LD_ADDR_EXP 61
59737: PUSH
59738: LD_INT 1
59740: ST_TO_ADDR
// hackTanks := [ ] ;
59741: LD_ADDR_EXP 62
59745: PUSH
59746: EMPTY
59747: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59748: LD_ADDR_EXP 63
59752: PUSH
59753: EMPTY
59754: ST_TO_ADDR
// hackLimit := 3 ;
59755: LD_ADDR_EXP 64
59759: PUSH
59760: LD_INT 3
59762: ST_TO_ADDR
// hackDist := 12 ;
59763: LD_ADDR_EXP 65
59767: PUSH
59768: LD_INT 12
59770: ST_TO_ADDR
// hackCounter := [ ] ;
59771: LD_ADDR_EXP 66
59775: PUSH
59776: EMPTY
59777: ST_TO_ADDR
// end ;
59778: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59779: LD_EXP 61
59783: PUSH
59784: LD_INT 34
59786: PUSH
59787: LD_EXP 128
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PPUSH
59796: CALL_OW 69
59800: AND
59801: IFFALSE 60056
59803: GO 59805
59805: DISABLE
59806: LD_INT 0
59808: PPUSH
59809: PPUSH
// begin enable ;
59810: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59811: LD_ADDR_VAR 0 1
59815: PUSH
59816: LD_INT 34
59818: PUSH
59819: LD_EXP 128
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PPUSH
59828: CALL_OW 69
59832: PUSH
59833: FOR_IN
59834: IFFALSE 60054
// begin if not i in hackTanks then
59836: LD_VAR 0 1
59840: PUSH
59841: LD_EXP 62
59845: IN
59846: NOT
59847: IFFALSE 59930
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59849: LD_ADDR_EXP 62
59853: PUSH
59854: LD_EXP 62
59858: PPUSH
59859: LD_EXP 62
59863: PUSH
59864: LD_INT 1
59866: PLUS
59867: PPUSH
59868: LD_VAR 0 1
59872: PPUSH
59873: CALL_OW 1
59877: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59878: LD_ADDR_EXP 63
59882: PUSH
59883: LD_EXP 63
59887: PPUSH
59888: LD_EXP 63
59892: PUSH
59893: LD_INT 1
59895: PLUS
59896: PPUSH
59897: EMPTY
59898: PPUSH
59899: CALL_OW 1
59903: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59904: LD_ADDR_EXP 66
59908: PUSH
59909: LD_EXP 66
59913: PPUSH
59914: LD_EXP 66
59918: PUSH
59919: LD_INT 1
59921: PLUS
59922: PPUSH
59923: EMPTY
59924: PPUSH
59925: CALL_OW 1
59929: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59930: LD_VAR 0 1
59934: PPUSH
59935: CALL_OW 302
59939: NOT
59940: IFFALSE 59953
// begin HackUnlinkAll ( i ) ;
59942: LD_VAR 0 1
59946: PPUSH
59947: CALL 60059 0 1
// continue ;
59951: GO 59833
// end ; HackCheckCapturedStatus ( i ) ;
59953: LD_VAR 0 1
59957: PPUSH
59958: CALL 60502 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59962: LD_ADDR_VAR 0 2
59966: PUSH
59967: LD_INT 81
59969: PUSH
59970: LD_VAR 0 1
59974: PPUSH
59975: CALL_OW 255
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 33
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 91
59996: PUSH
59997: LD_VAR 0 1
60001: PUSH
60002: LD_EXP 65
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 50
60014: PUSH
60015: EMPTY
60016: LIST
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: PPUSH
60024: CALL_OW 69
60028: ST_TO_ADDR
// if not tmp then
60029: LD_VAR 0 2
60033: NOT
60034: IFFALSE 60038
// continue ;
60036: GO 59833
// HackLink ( i , tmp ) ;
60038: LD_VAR 0 1
60042: PPUSH
60043: LD_VAR 0 2
60047: PPUSH
60048: CALL 60195 0 2
// end ;
60052: GO 59833
60054: POP
60055: POP
// end ;
60056: PPOPN 2
60058: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60059: LD_INT 0
60061: PPUSH
60062: PPUSH
60063: PPUSH
// if not hack in hackTanks then
60064: LD_VAR 0 1
60068: PUSH
60069: LD_EXP 62
60073: IN
60074: NOT
60075: IFFALSE 60079
// exit ;
60077: GO 60190
// index := GetElementIndex ( hackTanks , hack ) ;
60079: LD_ADDR_VAR 0 4
60083: PUSH
60084: LD_EXP 62
60088: PPUSH
60089: LD_VAR 0 1
60093: PPUSH
60094: CALL 25953 0 2
60098: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60099: LD_EXP 63
60103: PUSH
60104: LD_VAR 0 4
60108: ARRAY
60109: IFFALSE 60190
// begin for i in hackTanksCaptured [ index ] do
60111: LD_ADDR_VAR 0 3
60115: PUSH
60116: LD_EXP 63
60120: PUSH
60121: LD_VAR 0 4
60125: ARRAY
60126: PUSH
60127: FOR_IN
60128: IFFALSE 60154
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60130: LD_VAR 0 3
60134: PUSH
60135: LD_INT 1
60137: ARRAY
60138: PPUSH
60139: LD_VAR 0 3
60143: PUSH
60144: LD_INT 2
60146: ARRAY
60147: PPUSH
60148: CALL_OW 235
60152: GO 60127
60154: POP
60155: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60156: LD_ADDR_EXP 63
60160: PUSH
60161: LD_EXP 63
60165: PPUSH
60166: LD_VAR 0 4
60170: PPUSH
60171: EMPTY
60172: PPUSH
60173: CALL_OW 1
60177: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60178: LD_VAR 0 1
60182: PPUSH
60183: LD_INT 0
60185: PPUSH
60186: CALL_OW 505
// end ; end ;
60190: LD_VAR 0 2
60194: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60195: LD_INT 0
60197: PPUSH
60198: PPUSH
60199: PPUSH
// if not hack in hackTanks or not vehicles then
60200: LD_VAR 0 1
60204: PUSH
60205: LD_EXP 62
60209: IN
60210: NOT
60211: PUSH
60212: LD_VAR 0 2
60216: NOT
60217: OR
60218: IFFALSE 60222
// exit ;
60220: GO 60497
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60222: LD_ADDR_VAR 0 2
60226: PUSH
60227: LD_VAR 0 1
60231: PPUSH
60232: LD_VAR 0 2
60236: PPUSH
60237: LD_INT 1
60239: PPUSH
60240: LD_INT 1
60242: PPUSH
60243: CALL 26603 0 4
60247: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60248: LD_ADDR_VAR 0 5
60252: PUSH
60253: LD_EXP 62
60257: PPUSH
60258: LD_VAR 0 1
60262: PPUSH
60263: CALL 25953 0 2
60267: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60268: LD_EXP 63
60272: PUSH
60273: LD_VAR 0 5
60277: ARRAY
60278: PUSH
60279: LD_EXP 64
60283: LESS
60284: IFFALSE 60473
// begin for i := 1 to vehicles do
60286: LD_ADDR_VAR 0 4
60290: PUSH
60291: DOUBLE
60292: LD_INT 1
60294: DEC
60295: ST_TO_ADDR
60296: LD_VAR 0 2
60300: PUSH
60301: FOR_TO
60302: IFFALSE 60471
// begin if hackTanksCaptured [ index ] = hackLimit then
60304: LD_EXP 63
60308: PUSH
60309: LD_VAR 0 5
60313: ARRAY
60314: PUSH
60315: LD_EXP 64
60319: EQUAL
60320: IFFALSE 60324
// break ;
60322: GO 60471
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60324: LD_ADDR_EXP 66
60328: PUSH
60329: LD_EXP 66
60333: PPUSH
60334: LD_VAR 0 5
60338: PPUSH
60339: LD_EXP 66
60343: PUSH
60344: LD_VAR 0 5
60348: ARRAY
60349: PUSH
60350: LD_INT 1
60352: PLUS
60353: PPUSH
60354: CALL_OW 1
60358: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60359: LD_ADDR_EXP 63
60363: PUSH
60364: LD_EXP 63
60368: PPUSH
60369: LD_VAR 0 5
60373: PUSH
60374: LD_EXP 63
60378: PUSH
60379: LD_VAR 0 5
60383: ARRAY
60384: PUSH
60385: LD_INT 1
60387: PLUS
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PPUSH
60393: LD_VAR 0 2
60397: PUSH
60398: LD_VAR 0 4
60402: ARRAY
60403: PUSH
60404: LD_VAR 0 2
60408: PUSH
60409: LD_VAR 0 4
60413: ARRAY
60414: PPUSH
60415: CALL_OW 255
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PPUSH
60424: CALL 26168 0 3
60428: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60429: LD_VAR 0 2
60433: PUSH
60434: LD_VAR 0 4
60438: ARRAY
60439: PPUSH
60440: LD_VAR 0 1
60444: PPUSH
60445: CALL_OW 255
60449: PPUSH
60450: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60454: LD_VAR 0 2
60458: PUSH
60459: LD_VAR 0 4
60463: ARRAY
60464: PPUSH
60465: CALL_OW 141
// end ;
60469: GO 60301
60471: POP
60472: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60473: LD_VAR 0 1
60477: PPUSH
60478: LD_EXP 63
60482: PUSH
60483: LD_VAR 0 5
60487: ARRAY
60488: PUSH
60489: LD_INT 0
60491: PLUS
60492: PPUSH
60493: CALL_OW 505
// end ;
60497: LD_VAR 0 3
60501: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60502: LD_INT 0
60504: PPUSH
60505: PPUSH
60506: PPUSH
60507: PPUSH
// if not hack in hackTanks then
60508: LD_VAR 0 1
60512: PUSH
60513: LD_EXP 62
60517: IN
60518: NOT
60519: IFFALSE 60523
// exit ;
60521: GO 60763
// index := GetElementIndex ( hackTanks , hack ) ;
60523: LD_ADDR_VAR 0 4
60527: PUSH
60528: LD_EXP 62
60532: PPUSH
60533: LD_VAR 0 1
60537: PPUSH
60538: CALL 25953 0 2
60542: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60543: LD_ADDR_VAR 0 3
60547: PUSH
60548: DOUBLE
60549: LD_EXP 63
60553: PUSH
60554: LD_VAR 0 4
60558: ARRAY
60559: INC
60560: ST_TO_ADDR
60561: LD_INT 1
60563: PUSH
60564: FOR_DOWNTO
60565: IFFALSE 60737
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60567: LD_ADDR_VAR 0 5
60571: PUSH
60572: LD_EXP 63
60576: PUSH
60577: LD_VAR 0 4
60581: ARRAY
60582: PUSH
60583: LD_VAR 0 3
60587: ARRAY
60588: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60589: LD_VAR 0 5
60593: PUSH
60594: LD_INT 1
60596: ARRAY
60597: PPUSH
60598: CALL_OW 302
60602: NOT
60603: PUSH
60604: LD_VAR 0 5
60608: PUSH
60609: LD_INT 1
60611: ARRAY
60612: PPUSH
60613: CALL_OW 255
60617: PUSH
60618: LD_VAR 0 1
60622: PPUSH
60623: CALL_OW 255
60627: NONEQUAL
60628: OR
60629: IFFALSE 60735
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60631: LD_VAR 0 5
60635: PUSH
60636: LD_INT 1
60638: ARRAY
60639: PPUSH
60640: CALL_OW 305
60644: PUSH
60645: LD_VAR 0 5
60649: PUSH
60650: LD_INT 1
60652: ARRAY
60653: PPUSH
60654: CALL_OW 255
60658: PUSH
60659: LD_VAR 0 1
60663: PPUSH
60664: CALL_OW 255
60668: EQUAL
60669: AND
60670: IFFALSE 60694
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60672: LD_VAR 0 5
60676: PUSH
60677: LD_INT 1
60679: ARRAY
60680: PPUSH
60681: LD_VAR 0 5
60685: PUSH
60686: LD_INT 2
60688: ARRAY
60689: PPUSH
60690: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60694: LD_ADDR_EXP 63
60698: PUSH
60699: LD_EXP 63
60703: PPUSH
60704: LD_VAR 0 4
60708: PPUSH
60709: LD_EXP 63
60713: PUSH
60714: LD_VAR 0 4
60718: ARRAY
60719: PPUSH
60720: LD_VAR 0 3
60724: PPUSH
60725: CALL_OW 3
60729: PPUSH
60730: CALL_OW 1
60734: ST_TO_ADDR
// end ; end ;
60735: GO 60564
60737: POP
60738: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60739: LD_VAR 0 1
60743: PPUSH
60744: LD_EXP 63
60748: PUSH
60749: LD_VAR 0 4
60753: ARRAY
60754: PUSH
60755: LD_INT 0
60757: PLUS
60758: PPUSH
60759: CALL_OW 505
// end ;
60763: LD_VAR 0 2
60767: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60768: LD_INT 0
60770: PPUSH
60771: PPUSH
60772: PPUSH
60773: PPUSH
// if not hack in hackTanks then
60774: LD_VAR 0 1
60778: PUSH
60779: LD_EXP 62
60783: IN
60784: NOT
60785: IFFALSE 60789
// exit ;
60787: GO 60874
// index := GetElementIndex ( hackTanks , hack ) ;
60789: LD_ADDR_VAR 0 5
60793: PUSH
60794: LD_EXP 62
60798: PPUSH
60799: LD_VAR 0 1
60803: PPUSH
60804: CALL 25953 0 2
60808: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60809: LD_ADDR_VAR 0 4
60813: PUSH
60814: DOUBLE
60815: LD_INT 1
60817: DEC
60818: ST_TO_ADDR
60819: LD_EXP 63
60823: PUSH
60824: LD_VAR 0 5
60828: ARRAY
60829: PUSH
60830: FOR_TO
60831: IFFALSE 60872
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60833: LD_EXP 63
60837: PUSH
60838: LD_VAR 0 5
60842: ARRAY
60843: PUSH
60844: LD_VAR 0 4
60848: ARRAY
60849: PUSH
60850: LD_INT 1
60852: ARRAY
60853: PUSH
60854: LD_VAR 0 2
60858: EQUAL
60859: IFFALSE 60870
// KillUnit ( vehicle ) ;
60861: LD_VAR 0 2
60865: PPUSH
60866: CALL_OW 66
60870: GO 60830
60872: POP
60873: POP
// end ;
60874: LD_VAR 0 3
60878: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
60879: LD_EXP 67
60883: NOT
60884: IFFALSE 60919
60886: GO 60888
60888: DISABLE
// begin initMiner := true ;
60889: LD_ADDR_EXP 67
60893: PUSH
60894: LD_INT 1
60896: ST_TO_ADDR
// minersList := [ ] ;
60897: LD_ADDR_EXP 68
60901: PUSH
60902: EMPTY
60903: ST_TO_ADDR
// minerMinesList := [ ] ;
60904: LD_ADDR_EXP 69
60908: PUSH
60909: EMPTY
60910: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
60911: LD_ADDR_EXP 70
60915: PUSH
60916: LD_INT 5
60918: ST_TO_ADDR
// end ;
60919: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
60920: LD_EXP 67
60924: PUSH
60925: LD_INT 34
60927: PUSH
60928: LD_EXP 133
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PPUSH
60937: CALL_OW 69
60941: AND
60942: IFFALSE 61405
60944: GO 60946
60946: DISABLE
60947: LD_INT 0
60949: PPUSH
60950: PPUSH
60951: PPUSH
60952: PPUSH
// begin enable ;
60953: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60954: LD_ADDR_VAR 0 1
60958: PUSH
60959: LD_INT 34
60961: PUSH
60962: LD_EXP 133
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PPUSH
60971: CALL_OW 69
60975: PUSH
60976: FOR_IN
60977: IFFALSE 61049
// begin if not i in minersList then
60979: LD_VAR 0 1
60983: PUSH
60984: LD_EXP 68
60988: IN
60989: NOT
60990: IFFALSE 61047
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60992: LD_ADDR_EXP 68
60996: PUSH
60997: LD_EXP 68
61001: PPUSH
61002: LD_EXP 68
61006: PUSH
61007: LD_INT 1
61009: PLUS
61010: PPUSH
61011: LD_VAR 0 1
61015: PPUSH
61016: CALL_OW 1
61020: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61021: LD_ADDR_EXP 69
61025: PUSH
61026: LD_EXP 69
61030: PPUSH
61031: LD_EXP 69
61035: PUSH
61036: LD_INT 1
61038: PLUS
61039: PPUSH
61040: EMPTY
61041: PPUSH
61042: CALL_OW 1
61046: ST_TO_ADDR
// end end ;
61047: GO 60976
61049: POP
61050: POP
// for i := minerMinesList downto 1 do
61051: LD_ADDR_VAR 0 1
61055: PUSH
61056: DOUBLE
61057: LD_EXP 69
61061: INC
61062: ST_TO_ADDR
61063: LD_INT 1
61065: PUSH
61066: FOR_DOWNTO
61067: IFFALSE 61403
// begin if IsLive ( minersList [ i ] ) then
61069: LD_EXP 68
61073: PUSH
61074: LD_VAR 0 1
61078: ARRAY
61079: PPUSH
61080: CALL_OW 300
61084: IFFALSE 61112
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61086: LD_EXP 68
61090: PUSH
61091: LD_VAR 0 1
61095: ARRAY
61096: PPUSH
61097: LD_EXP 69
61101: PUSH
61102: LD_VAR 0 1
61106: ARRAY
61107: PPUSH
61108: CALL_OW 505
// if not minerMinesList [ i ] then
61112: LD_EXP 69
61116: PUSH
61117: LD_VAR 0 1
61121: ARRAY
61122: NOT
61123: IFFALSE 61127
// continue ;
61125: GO 61066
// for j := minerMinesList [ i ] downto 1 do
61127: LD_ADDR_VAR 0 2
61131: PUSH
61132: DOUBLE
61133: LD_EXP 69
61137: PUSH
61138: LD_VAR 0 1
61142: ARRAY
61143: INC
61144: ST_TO_ADDR
61145: LD_INT 1
61147: PUSH
61148: FOR_DOWNTO
61149: IFFALSE 61399
// begin side := GetSide ( minersList [ i ] ) ;
61151: LD_ADDR_VAR 0 3
61155: PUSH
61156: LD_EXP 68
61160: PUSH
61161: LD_VAR 0 1
61165: ARRAY
61166: PPUSH
61167: CALL_OW 255
61171: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61172: LD_ADDR_VAR 0 4
61176: PUSH
61177: LD_EXP 69
61181: PUSH
61182: LD_VAR 0 1
61186: ARRAY
61187: PUSH
61188: LD_VAR 0 2
61192: ARRAY
61193: PUSH
61194: LD_INT 1
61196: ARRAY
61197: PPUSH
61198: LD_EXP 69
61202: PUSH
61203: LD_VAR 0 1
61207: ARRAY
61208: PUSH
61209: LD_VAR 0 2
61213: ARRAY
61214: PUSH
61215: LD_INT 2
61217: ARRAY
61218: PPUSH
61219: CALL_OW 428
61223: ST_TO_ADDR
// if not tmp then
61224: LD_VAR 0 4
61228: NOT
61229: IFFALSE 61233
// continue ;
61231: GO 61148
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61233: LD_VAR 0 4
61237: PUSH
61238: LD_INT 81
61240: PUSH
61241: LD_VAR 0 3
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PPUSH
61250: CALL_OW 69
61254: IN
61255: PUSH
61256: LD_EXP 69
61260: PUSH
61261: LD_VAR 0 1
61265: ARRAY
61266: PUSH
61267: LD_VAR 0 2
61271: ARRAY
61272: PUSH
61273: LD_INT 1
61275: ARRAY
61276: PPUSH
61277: LD_EXP 69
61281: PUSH
61282: LD_VAR 0 1
61286: ARRAY
61287: PUSH
61288: LD_VAR 0 2
61292: ARRAY
61293: PUSH
61294: LD_INT 2
61296: ARRAY
61297: PPUSH
61298: CALL_OW 458
61302: AND
61303: IFFALSE 61397
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61305: LD_EXP 69
61309: PUSH
61310: LD_VAR 0 1
61314: ARRAY
61315: PUSH
61316: LD_VAR 0 2
61320: ARRAY
61321: PUSH
61322: LD_INT 1
61324: ARRAY
61325: PPUSH
61326: LD_EXP 69
61330: PUSH
61331: LD_VAR 0 1
61335: ARRAY
61336: PUSH
61337: LD_VAR 0 2
61341: ARRAY
61342: PUSH
61343: LD_INT 2
61345: ARRAY
61346: PPUSH
61347: LD_VAR 0 3
61351: PPUSH
61352: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61356: LD_ADDR_EXP 69
61360: PUSH
61361: LD_EXP 69
61365: PPUSH
61366: LD_VAR 0 1
61370: PPUSH
61371: LD_EXP 69
61375: PUSH
61376: LD_VAR 0 1
61380: ARRAY
61381: PPUSH
61382: LD_VAR 0 2
61386: PPUSH
61387: CALL_OW 3
61391: PPUSH
61392: CALL_OW 1
61396: ST_TO_ADDR
// end ; end ;
61397: GO 61148
61399: POP
61400: POP
// end ;
61401: GO 61066
61403: POP
61404: POP
// end ;
61405: PPOPN 4
61407: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61408: LD_INT 0
61410: PPUSH
61411: PPUSH
// result := false ;
61412: LD_ADDR_VAR 0 4
61416: PUSH
61417: LD_INT 0
61419: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61420: LD_VAR 0 1
61424: PPUSH
61425: CALL_OW 264
61429: PUSH
61430: LD_EXP 133
61434: EQUAL
61435: NOT
61436: IFFALSE 61440
// exit ;
61438: GO 61680
// index := GetElementIndex ( minersList , unit ) ;
61440: LD_ADDR_VAR 0 5
61444: PUSH
61445: LD_EXP 68
61449: PPUSH
61450: LD_VAR 0 1
61454: PPUSH
61455: CALL 25953 0 2
61459: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61460: LD_EXP 69
61464: PUSH
61465: LD_VAR 0 5
61469: ARRAY
61470: PUSH
61471: LD_EXP 70
61475: GREATEREQUAL
61476: IFFALSE 61480
// exit ;
61478: GO 61680
// ComMoveXY ( unit , x , y ) ;
61480: LD_VAR 0 1
61484: PPUSH
61485: LD_VAR 0 2
61489: PPUSH
61490: LD_VAR 0 3
61494: PPUSH
61495: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61499: LD_INT 35
61501: PPUSH
61502: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61506: LD_VAR 0 1
61510: PPUSH
61511: LD_VAR 0 2
61515: PPUSH
61516: LD_VAR 0 3
61520: PPUSH
61521: CALL 56350 0 3
61525: NOT
61526: PUSH
61527: LD_VAR 0 1
61531: PPUSH
61532: CALL_OW 314
61536: AND
61537: IFFALSE 61541
// exit ;
61539: GO 61680
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61541: LD_VAR 0 2
61545: PPUSH
61546: LD_VAR 0 3
61550: PPUSH
61551: CALL_OW 428
61555: PUSH
61556: LD_VAR 0 1
61560: EQUAL
61561: PUSH
61562: LD_VAR 0 1
61566: PPUSH
61567: CALL_OW 314
61571: NOT
61572: AND
61573: IFFALSE 61499
// PlaySoundXY ( x , y , PlantMine ) ;
61575: LD_VAR 0 2
61579: PPUSH
61580: LD_VAR 0 3
61584: PPUSH
61585: LD_STRING PlantMine
61587: PPUSH
61588: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
61592: LD_VAR 0 2
61596: PPUSH
61597: LD_VAR 0 3
61601: PPUSH
61602: LD_VAR 0 1
61606: PPUSH
61607: CALL_OW 255
61611: PPUSH
61612: LD_INT 0
61614: PPUSH
61615: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61619: LD_ADDR_EXP 69
61623: PUSH
61624: LD_EXP 69
61628: PPUSH
61629: LD_VAR 0 5
61633: PUSH
61634: LD_EXP 69
61638: PUSH
61639: LD_VAR 0 5
61643: ARRAY
61644: PUSH
61645: LD_INT 1
61647: PLUS
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PPUSH
61653: LD_VAR 0 2
61657: PUSH
61658: LD_VAR 0 3
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PPUSH
61667: CALL 26168 0 3
61671: ST_TO_ADDR
// result := true ;
61672: LD_ADDR_VAR 0 4
61676: PUSH
61677: LD_INT 1
61679: ST_TO_ADDR
// end ;
61680: LD_VAR 0 4
61684: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61685: LD_INT 0
61687: PPUSH
61688: PPUSH
61689: PPUSH
// if not unit in minersList then
61690: LD_VAR 0 1
61694: PUSH
61695: LD_EXP 68
61699: IN
61700: NOT
61701: IFFALSE 61705
// exit ;
61703: GO 62097
// index := GetElementIndex ( minersList , unit ) ;
61705: LD_ADDR_VAR 0 6
61709: PUSH
61710: LD_EXP 68
61714: PPUSH
61715: LD_VAR 0 1
61719: PPUSH
61720: CALL 25953 0 2
61724: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61725: LD_ADDR_VAR 0 5
61729: PUSH
61730: DOUBLE
61731: LD_EXP 69
61735: PUSH
61736: LD_VAR 0 6
61740: ARRAY
61741: INC
61742: ST_TO_ADDR
61743: LD_INT 1
61745: PUSH
61746: FOR_DOWNTO
61747: IFFALSE 61908
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
61749: LD_EXP 69
61753: PUSH
61754: LD_VAR 0 6
61758: ARRAY
61759: PUSH
61760: LD_VAR 0 5
61764: ARRAY
61765: PUSH
61766: LD_INT 1
61768: ARRAY
61769: PUSH
61770: LD_VAR 0 2
61774: EQUAL
61775: PUSH
61776: LD_EXP 69
61780: PUSH
61781: LD_VAR 0 6
61785: ARRAY
61786: PUSH
61787: LD_VAR 0 5
61791: ARRAY
61792: PUSH
61793: LD_INT 2
61795: ARRAY
61796: PUSH
61797: LD_VAR 0 3
61801: EQUAL
61802: AND
61803: IFFALSE 61906
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61805: LD_EXP 69
61809: PUSH
61810: LD_VAR 0 6
61814: ARRAY
61815: PUSH
61816: LD_VAR 0 5
61820: ARRAY
61821: PUSH
61822: LD_INT 1
61824: ARRAY
61825: PPUSH
61826: LD_EXP 69
61830: PUSH
61831: LD_VAR 0 6
61835: ARRAY
61836: PUSH
61837: LD_VAR 0 5
61841: ARRAY
61842: PUSH
61843: LD_INT 2
61845: ARRAY
61846: PPUSH
61847: LD_VAR 0 1
61851: PPUSH
61852: CALL_OW 255
61856: PPUSH
61857: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61861: LD_ADDR_EXP 69
61865: PUSH
61866: LD_EXP 69
61870: PPUSH
61871: LD_VAR 0 6
61875: PPUSH
61876: LD_EXP 69
61880: PUSH
61881: LD_VAR 0 6
61885: ARRAY
61886: PPUSH
61887: LD_VAR 0 5
61891: PPUSH
61892: CALL_OW 3
61896: PPUSH
61897: CALL_OW 1
61901: ST_TO_ADDR
// exit ;
61902: POP
61903: POP
61904: GO 62097
// end ; end ;
61906: GO 61746
61908: POP
61909: POP
// for i := minerMinesList [ index ] downto 1 do
61910: LD_ADDR_VAR 0 5
61914: PUSH
61915: DOUBLE
61916: LD_EXP 69
61920: PUSH
61921: LD_VAR 0 6
61925: ARRAY
61926: INC
61927: ST_TO_ADDR
61928: LD_INT 1
61930: PUSH
61931: FOR_DOWNTO
61932: IFFALSE 62095
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61934: LD_EXP 69
61938: PUSH
61939: LD_VAR 0 6
61943: ARRAY
61944: PUSH
61945: LD_VAR 0 5
61949: ARRAY
61950: PUSH
61951: LD_INT 1
61953: ARRAY
61954: PPUSH
61955: LD_EXP 69
61959: PUSH
61960: LD_VAR 0 6
61964: ARRAY
61965: PUSH
61966: LD_VAR 0 5
61970: ARRAY
61971: PUSH
61972: LD_INT 2
61974: ARRAY
61975: PPUSH
61976: LD_VAR 0 2
61980: PPUSH
61981: LD_VAR 0 3
61985: PPUSH
61986: CALL_OW 298
61990: PUSH
61991: LD_INT 6
61993: LESS
61994: IFFALSE 62093
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61996: LD_EXP 69
62000: PUSH
62001: LD_VAR 0 6
62005: ARRAY
62006: PUSH
62007: LD_VAR 0 5
62011: ARRAY
62012: PUSH
62013: LD_INT 1
62015: ARRAY
62016: PPUSH
62017: LD_EXP 69
62021: PUSH
62022: LD_VAR 0 6
62026: ARRAY
62027: PUSH
62028: LD_VAR 0 5
62032: ARRAY
62033: PUSH
62034: LD_INT 2
62036: ARRAY
62037: PPUSH
62038: LD_VAR 0 1
62042: PPUSH
62043: CALL_OW 255
62047: PPUSH
62048: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62052: LD_ADDR_EXP 69
62056: PUSH
62057: LD_EXP 69
62061: PPUSH
62062: LD_VAR 0 6
62066: PPUSH
62067: LD_EXP 69
62071: PUSH
62072: LD_VAR 0 6
62076: ARRAY
62077: PPUSH
62078: LD_VAR 0 5
62082: PPUSH
62083: CALL_OW 3
62087: PPUSH
62088: CALL_OW 1
62092: ST_TO_ADDR
// end ; end ;
62093: GO 61931
62095: POP
62096: POP
// end ;
62097: LD_VAR 0 4
62101: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62102: LD_INT 0
62104: PPUSH
62105: PPUSH
62106: PPUSH
62107: PPUSH
62108: PPUSH
62109: PPUSH
62110: PPUSH
62111: PPUSH
62112: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62113: LD_VAR 0 1
62117: PPUSH
62118: CALL_OW 264
62122: PUSH
62123: LD_EXP 133
62127: EQUAL
62128: NOT
62129: PUSH
62130: LD_VAR 0 1
62134: PUSH
62135: LD_EXP 68
62139: IN
62140: NOT
62141: OR
62142: IFFALSE 62146
// exit ;
62144: GO 62468
// index := GetElementIndex ( minersList , unit ) ;
62146: LD_ADDR_VAR 0 6
62150: PUSH
62151: LD_EXP 68
62155: PPUSH
62156: LD_VAR 0 1
62160: PPUSH
62161: CALL 25953 0 2
62165: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62166: LD_ADDR_VAR 0 8
62170: PUSH
62171: LD_EXP 70
62175: PUSH
62176: LD_EXP 69
62180: PUSH
62181: LD_VAR 0 6
62185: ARRAY
62186: MINUS
62187: ST_TO_ADDR
// if not minesFreeAmount then
62188: LD_VAR 0 8
62192: NOT
62193: IFFALSE 62197
// exit ;
62195: GO 62468
// tmp := [ ] ;
62197: LD_ADDR_VAR 0 7
62201: PUSH
62202: EMPTY
62203: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62204: LD_ADDR_VAR 0 5
62208: PUSH
62209: DOUBLE
62210: LD_INT 1
62212: DEC
62213: ST_TO_ADDR
62214: LD_VAR 0 8
62218: PUSH
62219: FOR_TO
62220: IFFALSE 62415
// begin _d := rand ( 0 , 5 ) ;
62222: LD_ADDR_VAR 0 11
62226: PUSH
62227: LD_INT 0
62229: PPUSH
62230: LD_INT 5
62232: PPUSH
62233: CALL_OW 12
62237: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62238: LD_ADDR_VAR 0 12
62242: PUSH
62243: LD_INT 2
62245: PPUSH
62246: LD_INT 6
62248: PPUSH
62249: CALL_OW 12
62253: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62254: LD_ADDR_VAR 0 9
62258: PUSH
62259: LD_VAR 0 2
62263: PPUSH
62264: LD_VAR 0 11
62268: PPUSH
62269: LD_VAR 0 12
62273: PPUSH
62274: CALL_OW 272
62278: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62279: LD_ADDR_VAR 0 10
62283: PUSH
62284: LD_VAR 0 3
62288: PPUSH
62289: LD_VAR 0 11
62293: PPUSH
62294: LD_VAR 0 12
62298: PPUSH
62299: CALL_OW 273
62303: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62304: LD_VAR 0 9
62308: PPUSH
62309: LD_VAR 0 10
62313: PPUSH
62314: CALL_OW 488
62318: PUSH
62319: LD_VAR 0 9
62323: PUSH
62324: LD_VAR 0 10
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_VAR 0 7
62337: IN
62338: NOT
62339: AND
62340: PUSH
62341: LD_VAR 0 9
62345: PPUSH
62346: LD_VAR 0 10
62350: PPUSH
62351: CALL_OW 458
62355: NOT
62356: AND
62357: IFFALSE 62399
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62359: LD_ADDR_VAR 0 7
62363: PUSH
62364: LD_VAR 0 7
62368: PPUSH
62369: LD_VAR 0 7
62373: PUSH
62374: LD_INT 1
62376: PLUS
62377: PPUSH
62378: LD_VAR 0 9
62382: PUSH
62383: LD_VAR 0 10
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PPUSH
62392: CALL_OW 1
62396: ST_TO_ADDR
62397: GO 62413
// i := i - 1 ;
62399: LD_ADDR_VAR 0 5
62403: PUSH
62404: LD_VAR 0 5
62408: PUSH
62409: LD_INT 1
62411: MINUS
62412: ST_TO_ADDR
// end ;
62413: GO 62219
62415: POP
62416: POP
// for i in tmp do
62417: LD_ADDR_VAR 0 5
62421: PUSH
62422: LD_VAR 0 7
62426: PUSH
62427: FOR_IN
62428: IFFALSE 62466
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62430: LD_VAR 0 1
62434: PPUSH
62435: LD_VAR 0 5
62439: PUSH
62440: LD_INT 1
62442: ARRAY
62443: PPUSH
62444: LD_VAR 0 5
62448: PUSH
62449: LD_INT 2
62451: ARRAY
62452: PPUSH
62453: CALL 61408 0 3
62457: NOT
62458: IFFALSE 62464
// exit ;
62460: POP
62461: POP
62462: GO 62468
62464: GO 62427
62466: POP
62467: POP
// end ;
62468: LD_VAR 0 4
62472: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
62473: LD_INT 0
62475: PPUSH
62476: PPUSH
62477: PPUSH
62478: PPUSH
62479: PPUSH
62480: PPUSH
62481: PPUSH
// if not GetClass ( unit ) = class_sniper then
62482: LD_VAR 0 1
62486: PPUSH
62487: CALL_OW 257
62491: PUSH
62492: LD_INT 5
62494: EQUAL
62495: NOT
62496: IFFALSE 62500
// exit ;
62498: GO 62888
// dist := 8 ;
62500: LD_ADDR_VAR 0 5
62504: PUSH
62505: LD_INT 8
62507: ST_TO_ADDR
// viewRange := 12 ;
62508: LD_ADDR_VAR 0 7
62512: PUSH
62513: LD_INT 12
62515: ST_TO_ADDR
// side := GetSide ( unit ) ;
62516: LD_ADDR_VAR 0 6
62520: PUSH
62521: LD_VAR 0 1
62525: PPUSH
62526: CALL_OW 255
62530: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62531: LD_INT 61
62533: PPUSH
62534: LD_VAR 0 6
62538: PPUSH
62539: CALL_OW 321
62543: PUSH
62544: LD_INT 2
62546: EQUAL
62547: IFFALSE 62557
// viewRange := 16 ;
62549: LD_ADDR_VAR 0 7
62553: PUSH
62554: LD_INT 16
62556: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62557: LD_VAR 0 1
62561: PPUSH
62562: LD_VAR 0 2
62566: PPUSH
62567: LD_VAR 0 3
62571: PPUSH
62572: CALL_OW 297
62576: PUSH
62577: LD_VAR 0 5
62581: GREATER
62582: IFFALSE 62661
// begin ComMoveXY ( unit , x , y ) ;
62584: LD_VAR 0 1
62588: PPUSH
62589: LD_VAR 0 2
62593: PPUSH
62594: LD_VAR 0 3
62598: PPUSH
62599: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62603: LD_INT 35
62605: PPUSH
62606: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62610: LD_VAR 0 1
62614: PPUSH
62615: LD_VAR 0 2
62619: PPUSH
62620: LD_VAR 0 3
62624: PPUSH
62625: CALL 56350 0 3
62629: NOT
62630: IFFALSE 62634
// exit ;
62632: GO 62888
// until GetDistUnitXY ( unit , x , y ) < dist ;
62634: LD_VAR 0 1
62638: PPUSH
62639: LD_VAR 0 2
62643: PPUSH
62644: LD_VAR 0 3
62648: PPUSH
62649: CALL_OW 297
62653: PUSH
62654: LD_VAR 0 5
62658: LESS
62659: IFFALSE 62603
// end ; ComTurnXY ( unit , x , y ) ;
62661: LD_VAR 0 1
62665: PPUSH
62666: LD_VAR 0 2
62670: PPUSH
62671: LD_VAR 0 3
62675: PPUSH
62676: CALL_OW 118
// wait ( 5 ) ;
62680: LD_INT 5
62682: PPUSH
62683: CALL_OW 67
// _d := GetDir ( unit ) ;
62687: LD_ADDR_VAR 0 10
62691: PUSH
62692: LD_VAR 0 1
62696: PPUSH
62697: CALL_OW 254
62701: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
62702: LD_ADDR_VAR 0 8
62706: PUSH
62707: LD_VAR 0 1
62711: PPUSH
62712: CALL_OW 250
62716: PPUSH
62717: LD_VAR 0 10
62721: PPUSH
62722: LD_VAR 0 5
62726: PPUSH
62727: CALL_OW 272
62731: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
62732: LD_ADDR_VAR 0 9
62736: PUSH
62737: LD_VAR 0 1
62741: PPUSH
62742: CALL_OW 251
62746: PPUSH
62747: LD_VAR 0 10
62751: PPUSH
62752: LD_VAR 0 5
62756: PPUSH
62757: CALL_OW 273
62761: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62762: LD_VAR 0 8
62766: PPUSH
62767: LD_VAR 0 9
62771: PPUSH
62772: CALL_OW 488
62776: NOT
62777: IFFALSE 62781
// exit ;
62779: GO 62888
// ComAnimCustom ( unit , 1 ) ;
62781: LD_VAR 0 1
62785: PPUSH
62786: LD_INT 1
62788: PPUSH
62789: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62793: LD_VAR 0 8
62797: PPUSH
62798: LD_VAR 0 9
62802: PPUSH
62803: LD_VAR 0 6
62807: PPUSH
62808: LD_VAR 0 7
62812: PPUSH
62813: CALL_OW 330
// repeat wait ( 1 ) ;
62817: LD_INT 1
62819: PPUSH
62820: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
62824: LD_VAR 0 1
62828: PPUSH
62829: CALL_OW 316
62833: PUSH
62834: LD_VAR 0 1
62838: PPUSH
62839: CALL_OW 314
62843: OR
62844: PUSH
62845: LD_VAR 0 1
62849: PPUSH
62850: CALL_OW 302
62854: NOT
62855: OR
62856: PUSH
62857: LD_VAR 0 1
62861: PPUSH
62862: CALL_OW 301
62866: OR
62867: IFFALSE 62817
// RemoveSeeing ( _x , _y , side ) ;
62869: LD_VAR 0 8
62873: PPUSH
62874: LD_VAR 0 9
62878: PPUSH
62879: LD_VAR 0 6
62883: PPUSH
62884: CALL_OW 331
// end ; end_of_file
62888: LD_VAR 0 4
62892: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
62893: LD_VAR 0 2
62897: PUSH
62898: LD_INT 100
62900: EQUAL
62901: IFFALSE 63850
// begin if not StreamModeActive then
62903: LD_EXP 71
62907: NOT
62908: IFFALSE 62918
// StreamModeActive := true ;
62910: LD_ADDR_EXP 71
62914: PUSH
62915: LD_INT 1
62917: ST_TO_ADDR
// if p3 = 0 then
62918: LD_VAR 0 3
62922: PUSH
62923: LD_INT 0
62925: EQUAL
62926: IFFALSE 62932
// InitStreamMode ;
62928: CALL 64008 0 0
// if p3 = 1 then
62932: LD_VAR 0 3
62936: PUSH
62937: LD_INT 1
62939: EQUAL
62940: IFFALSE 62950
// sRocket := true ;
62942: LD_ADDR_EXP 76
62946: PUSH
62947: LD_INT 1
62949: ST_TO_ADDR
// if p3 = 2 then
62950: LD_VAR 0 3
62954: PUSH
62955: LD_INT 2
62957: EQUAL
62958: IFFALSE 62968
// sSpeed := true ;
62960: LD_ADDR_EXP 75
62964: PUSH
62965: LD_INT 1
62967: ST_TO_ADDR
// if p3 = 3 then
62968: LD_VAR 0 3
62972: PUSH
62973: LD_INT 3
62975: EQUAL
62976: IFFALSE 62986
// sEngine := true ;
62978: LD_ADDR_EXP 77
62982: PUSH
62983: LD_INT 1
62985: ST_TO_ADDR
// if p3 = 4 then
62986: LD_VAR 0 3
62990: PUSH
62991: LD_INT 4
62993: EQUAL
62994: IFFALSE 63004
// sSpec := true ;
62996: LD_ADDR_EXP 74
63000: PUSH
63001: LD_INT 1
63003: ST_TO_ADDR
// if p3 = 5 then
63004: LD_VAR 0 3
63008: PUSH
63009: LD_INT 5
63011: EQUAL
63012: IFFALSE 63022
// sLevel := true ;
63014: LD_ADDR_EXP 78
63018: PUSH
63019: LD_INT 1
63021: ST_TO_ADDR
// if p3 = 6 then
63022: LD_VAR 0 3
63026: PUSH
63027: LD_INT 6
63029: EQUAL
63030: IFFALSE 63040
// sArmoury := true ;
63032: LD_ADDR_EXP 79
63036: PUSH
63037: LD_INT 1
63039: ST_TO_ADDR
// if p3 = 7 then
63040: LD_VAR 0 3
63044: PUSH
63045: LD_INT 7
63047: EQUAL
63048: IFFALSE 63058
// sRadar := true ;
63050: LD_ADDR_EXP 80
63054: PUSH
63055: LD_INT 1
63057: ST_TO_ADDR
// if p3 = 8 then
63058: LD_VAR 0 3
63062: PUSH
63063: LD_INT 8
63065: EQUAL
63066: IFFALSE 63076
// sBunker := true ;
63068: LD_ADDR_EXP 81
63072: PUSH
63073: LD_INT 1
63075: ST_TO_ADDR
// if p3 = 9 then
63076: LD_VAR 0 3
63080: PUSH
63081: LD_INT 9
63083: EQUAL
63084: IFFALSE 63094
// sHack := true ;
63086: LD_ADDR_EXP 82
63090: PUSH
63091: LD_INT 1
63093: ST_TO_ADDR
// if p3 = 10 then
63094: LD_VAR 0 3
63098: PUSH
63099: LD_INT 10
63101: EQUAL
63102: IFFALSE 63112
// sFire := true ;
63104: LD_ADDR_EXP 83
63108: PUSH
63109: LD_INT 1
63111: ST_TO_ADDR
// if p3 = 11 then
63112: LD_VAR 0 3
63116: PUSH
63117: LD_INT 11
63119: EQUAL
63120: IFFALSE 63130
// sRefresh := true ;
63122: LD_ADDR_EXP 84
63126: PUSH
63127: LD_INT 1
63129: ST_TO_ADDR
// if p3 = 12 then
63130: LD_VAR 0 3
63134: PUSH
63135: LD_INT 12
63137: EQUAL
63138: IFFALSE 63148
// sExp := true ;
63140: LD_ADDR_EXP 85
63144: PUSH
63145: LD_INT 1
63147: ST_TO_ADDR
// if p3 = 13 then
63148: LD_VAR 0 3
63152: PUSH
63153: LD_INT 13
63155: EQUAL
63156: IFFALSE 63166
// sDepot := true ;
63158: LD_ADDR_EXP 86
63162: PUSH
63163: LD_INT 1
63165: ST_TO_ADDR
// if p3 = 14 then
63166: LD_VAR 0 3
63170: PUSH
63171: LD_INT 14
63173: EQUAL
63174: IFFALSE 63184
// sFlag := true ;
63176: LD_ADDR_EXP 87
63180: PUSH
63181: LD_INT 1
63183: ST_TO_ADDR
// if p3 = 15 then
63184: LD_VAR 0 3
63188: PUSH
63189: LD_INT 15
63191: EQUAL
63192: IFFALSE 63202
// sKamikadze := true ;
63194: LD_ADDR_EXP 95
63198: PUSH
63199: LD_INT 1
63201: ST_TO_ADDR
// if p3 = 16 then
63202: LD_VAR 0 3
63206: PUSH
63207: LD_INT 16
63209: EQUAL
63210: IFFALSE 63220
// sTroll := true ;
63212: LD_ADDR_EXP 96
63216: PUSH
63217: LD_INT 1
63219: ST_TO_ADDR
// if p3 = 17 then
63220: LD_VAR 0 3
63224: PUSH
63225: LD_INT 17
63227: EQUAL
63228: IFFALSE 63238
// sSlow := true ;
63230: LD_ADDR_EXP 97
63234: PUSH
63235: LD_INT 1
63237: ST_TO_ADDR
// if p3 = 18 then
63238: LD_VAR 0 3
63242: PUSH
63243: LD_INT 18
63245: EQUAL
63246: IFFALSE 63256
// sLack := true ;
63248: LD_ADDR_EXP 98
63252: PUSH
63253: LD_INT 1
63255: ST_TO_ADDR
// if p3 = 19 then
63256: LD_VAR 0 3
63260: PUSH
63261: LD_INT 19
63263: EQUAL
63264: IFFALSE 63274
// sTank := true ;
63266: LD_ADDR_EXP 100
63270: PUSH
63271: LD_INT 1
63273: ST_TO_ADDR
// if p3 = 20 then
63274: LD_VAR 0 3
63278: PUSH
63279: LD_INT 20
63281: EQUAL
63282: IFFALSE 63292
// sRemote := true ;
63284: LD_ADDR_EXP 101
63288: PUSH
63289: LD_INT 1
63291: ST_TO_ADDR
// if p3 = 21 then
63292: LD_VAR 0 3
63296: PUSH
63297: LD_INT 21
63299: EQUAL
63300: IFFALSE 63310
// sPowell := true ;
63302: LD_ADDR_EXP 102
63306: PUSH
63307: LD_INT 1
63309: ST_TO_ADDR
// if p3 = 22 then
63310: LD_VAR 0 3
63314: PUSH
63315: LD_INT 22
63317: EQUAL
63318: IFFALSE 63328
// sTeleport := true ;
63320: LD_ADDR_EXP 105
63324: PUSH
63325: LD_INT 1
63327: ST_TO_ADDR
// if p3 = 23 then
63328: LD_VAR 0 3
63332: PUSH
63333: LD_INT 23
63335: EQUAL
63336: IFFALSE 63346
// sOilTower := true ;
63338: LD_ADDR_EXP 107
63342: PUSH
63343: LD_INT 1
63345: ST_TO_ADDR
// if p3 = 24 then
63346: LD_VAR 0 3
63350: PUSH
63351: LD_INT 24
63353: EQUAL
63354: IFFALSE 63364
// sShovel := true ;
63356: LD_ADDR_EXP 108
63360: PUSH
63361: LD_INT 1
63363: ST_TO_ADDR
// if p3 = 25 then
63364: LD_VAR 0 3
63368: PUSH
63369: LD_INT 25
63371: EQUAL
63372: IFFALSE 63382
// sSheik := true ;
63374: LD_ADDR_EXP 109
63378: PUSH
63379: LD_INT 1
63381: ST_TO_ADDR
// if p3 = 26 then
63382: LD_VAR 0 3
63386: PUSH
63387: LD_INT 26
63389: EQUAL
63390: IFFALSE 63400
// sEarthquake := true ;
63392: LD_ADDR_EXP 111
63396: PUSH
63397: LD_INT 1
63399: ST_TO_ADDR
// if p3 = 27 then
63400: LD_VAR 0 3
63404: PUSH
63405: LD_INT 27
63407: EQUAL
63408: IFFALSE 63418
// sAI := true ;
63410: LD_ADDR_EXP 112
63414: PUSH
63415: LD_INT 1
63417: ST_TO_ADDR
// if p3 = 28 then
63418: LD_VAR 0 3
63422: PUSH
63423: LD_INT 28
63425: EQUAL
63426: IFFALSE 63436
// sCargo := true ;
63428: LD_ADDR_EXP 115
63432: PUSH
63433: LD_INT 1
63435: ST_TO_ADDR
// if p3 = 29 then
63436: LD_VAR 0 3
63440: PUSH
63441: LD_INT 29
63443: EQUAL
63444: IFFALSE 63454
// sDLaser := true ;
63446: LD_ADDR_EXP 116
63450: PUSH
63451: LD_INT 1
63453: ST_TO_ADDR
// if p3 = 30 then
63454: LD_VAR 0 3
63458: PUSH
63459: LD_INT 30
63461: EQUAL
63462: IFFALSE 63472
// sExchange := true ;
63464: LD_ADDR_EXP 117
63468: PUSH
63469: LD_INT 1
63471: ST_TO_ADDR
// if p3 = 31 then
63472: LD_VAR 0 3
63476: PUSH
63477: LD_INT 31
63479: EQUAL
63480: IFFALSE 63490
// sFac := true ;
63482: LD_ADDR_EXP 118
63486: PUSH
63487: LD_INT 1
63489: ST_TO_ADDR
// if p3 = 32 then
63490: LD_VAR 0 3
63494: PUSH
63495: LD_INT 32
63497: EQUAL
63498: IFFALSE 63508
// sPower := true ;
63500: LD_ADDR_EXP 119
63504: PUSH
63505: LD_INT 1
63507: ST_TO_ADDR
// if p3 = 33 then
63508: LD_VAR 0 3
63512: PUSH
63513: LD_INT 33
63515: EQUAL
63516: IFFALSE 63526
// sRandom := true ;
63518: LD_ADDR_EXP 120
63522: PUSH
63523: LD_INT 1
63525: ST_TO_ADDR
// if p3 = 34 then
63526: LD_VAR 0 3
63530: PUSH
63531: LD_INT 34
63533: EQUAL
63534: IFFALSE 63544
// sShield := true ;
63536: LD_ADDR_EXP 121
63540: PUSH
63541: LD_INT 1
63543: ST_TO_ADDR
// if p3 = 35 then
63544: LD_VAR 0 3
63548: PUSH
63549: LD_INT 35
63551: EQUAL
63552: IFFALSE 63562
// sTime := true ;
63554: LD_ADDR_EXP 122
63558: PUSH
63559: LD_INT 1
63561: ST_TO_ADDR
// if p3 = 36 then
63562: LD_VAR 0 3
63566: PUSH
63567: LD_INT 36
63569: EQUAL
63570: IFFALSE 63580
// sTools := true ;
63572: LD_ADDR_EXP 123
63576: PUSH
63577: LD_INT 1
63579: ST_TO_ADDR
// if p3 = 101 then
63580: LD_VAR 0 3
63584: PUSH
63585: LD_INT 101
63587: EQUAL
63588: IFFALSE 63598
// sSold := true ;
63590: LD_ADDR_EXP 88
63594: PUSH
63595: LD_INT 1
63597: ST_TO_ADDR
// if p3 = 102 then
63598: LD_VAR 0 3
63602: PUSH
63603: LD_INT 102
63605: EQUAL
63606: IFFALSE 63616
// sDiff := true ;
63608: LD_ADDR_EXP 89
63612: PUSH
63613: LD_INT 1
63615: ST_TO_ADDR
// if p3 = 103 then
63616: LD_VAR 0 3
63620: PUSH
63621: LD_INT 103
63623: EQUAL
63624: IFFALSE 63634
// sFog := true ;
63626: LD_ADDR_EXP 92
63630: PUSH
63631: LD_INT 1
63633: ST_TO_ADDR
// if p3 = 104 then
63634: LD_VAR 0 3
63638: PUSH
63639: LD_INT 104
63641: EQUAL
63642: IFFALSE 63652
// sReset := true ;
63644: LD_ADDR_EXP 93
63648: PUSH
63649: LD_INT 1
63651: ST_TO_ADDR
// if p3 = 105 then
63652: LD_VAR 0 3
63656: PUSH
63657: LD_INT 105
63659: EQUAL
63660: IFFALSE 63670
// sSun := true ;
63662: LD_ADDR_EXP 94
63666: PUSH
63667: LD_INT 1
63669: ST_TO_ADDR
// if p3 = 106 then
63670: LD_VAR 0 3
63674: PUSH
63675: LD_INT 106
63677: EQUAL
63678: IFFALSE 63688
// sTiger := true ;
63680: LD_ADDR_EXP 90
63684: PUSH
63685: LD_INT 1
63687: ST_TO_ADDR
// if p3 = 107 then
63688: LD_VAR 0 3
63692: PUSH
63693: LD_INT 107
63695: EQUAL
63696: IFFALSE 63706
// sBomb := true ;
63698: LD_ADDR_EXP 91
63702: PUSH
63703: LD_INT 1
63705: ST_TO_ADDR
// if p3 = 108 then
63706: LD_VAR 0 3
63710: PUSH
63711: LD_INT 108
63713: EQUAL
63714: IFFALSE 63724
// sWound := true ;
63716: LD_ADDR_EXP 99
63720: PUSH
63721: LD_INT 1
63723: ST_TO_ADDR
// if p3 = 109 then
63724: LD_VAR 0 3
63728: PUSH
63729: LD_INT 109
63731: EQUAL
63732: IFFALSE 63742
// sBetray := true ;
63734: LD_ADDR_EXP 103
63738: PUSH
63739: LD_INT 1
63741: ST_TO_ADDR
// if p3 = 110 then
63742: LD_VAR 0 3
63746: PUSH
63747: LD_INT 110
63749: EQUAL
63750: IFFALSE 63760
// sContamin := true ;
63752: LD_ADDR_EXP 104
63756: PUSH
63757: LD_INT 1
63759: ST_TO_ADDR
// if p3 = 111 then
63760: LD_VAR 0 3
63764: PUSH
63765: LD_INT 111
63767: EQUAL
63768: IFFALSE 63778
// sOil := true ;
63770: LD_ADDR_EXP 106
63774: PUSH
63775: LD_INT 1
63777: ST_TO_ADDR
// if p3 = 112 then
63778: LD_VAR 0 3
63782: PUSH
63783: LD_INT 112
63785: EQUAL
63786: IFFALSE 63796
// sStu := true ;
63788: LD_ADDR_EXP 110
63792: PUSH
63793: LD_INT 1
63795: ST_TO_ADDR
// if p3 = 113 then
63796: LD_VAR 0 3
63800: PUSH
63801: LD_INT 113
63803: EQUAL
63804: IFFALSE 63814
// sBazooka := true ;
63806: LD_ADDR_EXP 113
63810: PUSH
63811: LD_INT 1
63813: ST_TO_ADDR
// if p3 = 114 then
63814: LD_VAR 0 3
63818: PUSH
63819: LD_INT 114
63821: EQUAL
63822: IFFALSE 63832
// sMortar := true ;
63824: LD_ADDR_EXP 114
63828: PUSH
63829: LD_INT 1
63831: ST_TO_ADDR
// if p3 = 115 then
63832: LD_VAR 0 3
63836: PUSH
63837: LD_INT 115
63839: EQUAL
63840: IFFALSE 63850
// sRanger := true ;
63842: LD_ADDR_EXP 124
63846: PUSH
63847: LD_INT 1
63849: ST_TO_ADDR
// end ; if p2 = 101 then
63850: LD_VAR 0 2
63854: PUSH
63855: LD_INT 101
63857: EQUAL
63858: IFFALSE 63986
// begin case p3 of 1 :
63860: LD_VAR 0 3
63864: PUSH
63865: LD_INT 1
63867: DOUBLE
63868: EQUAL
63869: IFTRUE 63873
63871: GO 63880
63873: POP
// hHackUnlimitedResources ; 2 :
63874: CALL 75021 0 0
63878: GO 63986
63880: LD_INT 2
63882: DOUBLE
63883: EQUAL
63884: IFTRUE 63888
63886: GO 63895
63888: POP
// hHackSetLevel10 ; 3 :
63889: CALL 75154 0 0
63893: GO 63986
63895: LD_INT 3
63897: DOUBLE
63898: EQUAL
63899: IFTRUE 63903
63901: GO 63910
63903: POP
// hHackSetLevel10YourUnits ; 4 :
63904: CALL 75239 0 0
63908: GO 63986
63910: LD_INT 4
63912: DOUBLE
63913: EQUAL
63914: IFTRUE 63918
63916: GO 63925
63918: POP
// hHackInvincible ; 5 :
63919: CALL 75687 0 0
63923: GO 63986
63925: LD_INT 5
63927: DOUBLE
63928: EQUAL
63929: IFTRUE 63933
63931: GO 63940
63933: POP
// hHackInvisible ; 6 :
63934: CALL 75798 0 0
63938: GO 63986
63940: LD_INT 6
63942: DOUBLE
63943: EQUAL
63944: IFTRUE 63948
63946: GO 63955
63948: POP
// hHackChangeYourSide ; 7 :
63949: CALL 75855 0 0
63953: GO 63986
63955: LD_INT 7
63957: DOUBLE
63958: EQUAL
63959: IFTRUE 63963
63961: GO 63970
63963: POP
// hHackChangeUnitSide ; 8 :
63964: CALL 75897 0 0
63968: GO 63986
63970: LD_INT 8
63972: DOUBLE
63973: EQUAL
63974: IFTRUE 63978
63976: GO 63985
63978: POP
// hHackFog ; end ;
63979: CALL 75998 0 0
63983: GO 63986
63985: POP
// end ; end ;
63986: PPOPN 6
63988: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
63989: GO 63991
63991: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
63992: LD_STRING initStreamRollete();
63994: PPUSH
63995: CALL_OW 559
// InitStreamMode ;
63999: CALL 64008 0 0
// DefineStreamItems ( ) ;
64003: CALL 64448 0 0
// end ;
64007: END
// function InitStreamMode ; begin
64008: LD_INT 0
64010: PPUSH
// streamModeActive := false ;
64011: LD_ADDR_EXP 71
64015: PUSH
64016: LD_INT 0
64018: ST_TO_ADDR
// normalCounter := 36 ;
64019: LD_ADDR_EXP 72
64023: PUSH
64024: LD_INT 36
64026: ST_TO_ADDR
// hardcoreCounter := 16 ;
64027: LD_ADDR_EXP 73
64031: PUSH
64032: LD_INT 16
64034: ST_TO_ADDR
// sRocket := false ;
64035: LD_ADDR_EXP 76
64039: PUSH
64040: LD_INT 0
64042: ST_TO_ADDR
// sSpeed := false ;
64043: LD_ADDR_EXP 75
64047: PUSH
64048: LD_INT 0
64050: ST_TO_ADDR
// sEngine := false ;
64051: LD_ADDR_EXP 77
64055: PUSH
64056: LD_INT 0
64058: ST_TO_ADDR
// sSpec := false ;
64059: LD_ADDR_EXP 74
64063: PUSH
64064: LD_INT 0
64066: ST_TO_ADDR
// sLevel := false ;
64067: LD_ADDR_EXP 78
64071: PUSH
64072: LD_INT 0
64074: ST_TO_ADDR
// sArmoury := false ;
64075: LD_ADDR_EXP 79
64079: PUSH
64080: LD_INT 0
64082: ST_TO_ADDR
// sRadar := false ;
64083: LD_ADDR_EXP 80
64087: PUSH
64088: LD_INT 0
64090: ST_TO_ADDR
// sBunker := false ;
64091: LD_ADDR_EXP 81
64095: PUSH
64096: LD_INT 0
64098: ST_TO_ADDR
// sHack := false ;
64099: LD_ADDR_EXP 82
64103: PUSH
64104: LD_INT 0
64106: ST_TO_ADDR
// sFire := false ;
64107: LD_ADDR_EXP 83
64111: PUSH
64112: LD_INT 0
64114: ST_TO_ADDR
// sRefresh := false ;
64115: LD_ADDR_EXP 84
64119: PUSH
64120: LD_INT 0
64122: ST_TO_ADDR
// sExp := false ;
64123: LD_ADDR_EXP 85
64127: PUSH
64128: LD_INT 0
64130: ST_TO_ADDR
// sDepot := false ;
64131: LD_ADDR_EXP 86
64135: PUSH
64136: LD_INT 0
64138: ST_TO_ADDR
// sFlag := false ;
64139: LD_ADDR_EXP 87
64143: PUSH
64144: LD_INT 0
64146: ST_TO_ADDR
// sKamikadze := false ;
64147: LD_ADDR_EXP 95
64151: PUSH
64152: LD_INT 0
64154: ST_TO_ADDR
// sTroll := false ;
64155: LD_ADDR_EXP 96
64159: PUSH
64160: LD_INT 0
64162: ST_TO_ADDR
// sSlow := false ;
64163: LD_ADDR_EXP 97
64167: PUSH
64168: LD_INT 0
64170: ST_TO_ADDR
// sLack := false ;
64171: LD_ADDR_EXP 98
64175: PUSH
64176: LD_INT 0
64178: ST_TO_ADDR
// sTank := false ;
64179: LD_ADDR_EXP 100
64183: PUSH
64184: LD_INT 0
64186: ST_TO_ADDR
// sRemote := false ;
64187: LD_ADDR_EXP 101
64191: PUSH
64192: LD_INT 0
64194: ST_TO_ADDR
// sPowell := false ;
64195: LD_ADDR_EXP 102
64199: PUSH
64200: LD_INT 0
64202: ST_TO_ADDR
// sTeleport := false ;
64203: LD_ADDR_EXP 105
64207: PUSH
64208: LD_INT 0
64210: ST_TO_ADDR
// sOilTower := false ;
64211: LD_ADDR_EXP 107
64215: PUSH
64216: LD_INT 0
64218: ST_TO_ADDR
// sShovel := false ;
64219: LD_ADDR_EXP 108
64223: PUSH
64224: LD_INT 0
64226: ST_TO_ADDR
// sSheik := false ;
64227: LD_ADDR_EXP 109
64231: PUSH
64232: LD_INT 0
64234: ST_TO_ADDR
// sEarthquake := false ;
64235: LD_ADDR_EXP 111
64239: PUSH
64240: LD_INT 0
64242: ST_TO_ADDR
// sAI := false ;
64243: LD_ADDR_EXP 112
64247: PUSH
64248: LD_INT 0
64250: ST_TO_ADDR
// sCargo := false ;
64251: LD_ADDR_EXP 115
64255: PUSH
64256: LD_INT 0
64258: ST_TO_ADDR
// sDLaser := false ;
64259: LD_ADDR_EXP 116
64263: PUSH
64264: LD_INT 0
64266: ST_TO_ADDR
// sExchange := false ;
64267: LD_ADDR_EXP 117
64271: PUSH
64272: LD_INT 0
64274: ST_TO_ADDR
// sFac := false ;
64275: LD_ADDR_EXP 118
64279: PUSH
64280: LD_INT 0
64282: ST_TO_ADDR
// sPower := false ;
64283: LD_ADDR_EXP 119
64287: PUSH
64288: LD_INT 0
64290: ST_TO_ADDR
// sRandom := false ;
64291: LD_ADDR_EXP 120
64295: PUSH
64296: LD_INT 0
64298: ST_TO_ADDR
// sShield := false ;
64299: LD_ADDR_EXP 121
64303: PUSH
64304: LD_INT 0
64306: ST_TO_ADDR
// sTime := false ;
64307: LD_ADDR_EXP 122
64311: PUSH
64312: LD_INT 0
64314: ST_TO_ADDR
// sTools := false ;
64315: LD_ADDR_EXP 123
64319: PUSH
64320: LD_INT 0
64322: ST_TO_ADDR
// sSold := false ;
64323: LD_ADDR_EXP 88
64327: PUSH
64328: LD_INT 0
64330: ST_TO_ADDR
// sDiff := false ;
64331: LD_ADDR_EXP 89
64335: PUSH
64336: LD_INT 0
64338: ST_TO_ADDR
// sFog := false ;
64339: LD_ADDR_EXP 92
64343: PUSH
64344: LD_INT 0
64346: ST_TO_ADDR
// sReset := false ;
64347: LD_ADDR_EXP 93
64351: PUSH
64352: LD_INT 0
64354: ST_TO_ADDR
// sSun := false ;
64355: LD_ADDR_EXP 94
64359: PUSH
64360: LD_INT 0
64362: ST_TO_ADDR
// sTiger := false ;
64363: LD_ADDR_EXP 90
64367: PUSH
64368: LD_INT 0
64370: ST_TO_ADDR
// sBomb := false ;
64371: LD_ADDR_EXP 91
64375: PUSH
64376: LD_INT 0
64378: ST_TO_ADDR
// sWound := false ;
64379: LD_ADDR_EXP 99
64383: PUSH
64384: LD_INT 0
64386: ST_TO_ADDR
// sBetray := false ;
64387: LD_ADDR_EXP 103
64391: PUSH
64392: LD_INT 0
64394: ST_TO_ADDR
// sContamin := false ;
64395: LD_ADDR_EXP 104
64399: PUSH
64400: LD_INT 0
64402: ST_TO_ADDR
// sOil := false ;
64403: LD_ADDR_EXP 106
64407: PUSH
64408: LD_INT 0
64410: ST_TO_ADDR
// sStu := false ;
64411: LD_ADDR_EXP 110
64415: PUSH
64416: LD_INT 0
64418: ST_TO_ADDR
// sBazooka := false ;
64419: LD_ADDR_EXP 113
64423: PUSH
64424: LD_INT 0
64426: ST_TO_ADDR
// sMortar := false ;
64427: LD_ADDR_EXP 114
64431: PUSH
64432: LD_INT 0
64434: ST_TO_ADDR
// sRanger := false ;
64435: LD_ADDR_EXP 124
64439: PUSH
64440: LD_INT 0
64442: ST_TO_ADDR
// end ;
64443: LD_VAR 0 1
64447: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
64448: LD_INT 0
64450: PPUSH
64451: PPUSH
64452: PPUSH
64453: PPUSH
64454: PPUSH
// result := [ ] ;
64455: LD_ADDR_VAR 0 1
64459: PUSH
64460: EMPTY
64461: ST_TO_ADDR
// if campaign_id = 1 then
64462: LD_OWVAR 69
64466: PUSH
64467: LD_INT 1
64469: EQUAL
64470: IFFALSE 67408
// begin case mission_number of 1 :
64472: LD_OWVAR 70
64476: PUSH
64477: LD_INT 1
64479: DOUBLE
64480: EQUAL
64481: IFTRUE 64485
64483: GO 64549
64485: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
64486: LD_ADDR_VAR 0 1
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: LD_INT 4
64496: PUSH
64497: LD_INT 11
64499: PUSH
64500: LD_INT 12
64502: PUSH
64503: LD_INT 15
64505: PUSH
64506: LD_INT 16
64508: PUSH
64509: LD_INT 22
64511: PUSH
64512: LD_INT 23
64514: PUSH
64515: LD_INT 26
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 101
64531: PUSH
64532: LD_INT 102
64534: PUSH
64535: LD_INT 106
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: LIST
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: ST_TO_ADDR
64547: GO 67406
64549: LD_INT 2
64551: DOUBLE
64552: EQUAL
64553: IFTRUE 64557
64555: GO 64629
64557: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
64558: LD_ADDR_VAR 0 1
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: LD_INT 4
64568: PUSH
64569: LD_INT 11
64571: PUSH
64572: LD_INT 12
64574: PUSH
64575: LD_INT 15
64577: PUSH
64578: LD_INT 16
64580: PUSH
64581: LD_INT 22
64583: PUSH
64584: LD_INT 23
64586: PUSH
64587: LD_INT 26
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 101
64603: PUSH
64604: LD_INT 102
64606: PUSH
64607: LD_INT 105
64609: PUSH
64610: LD_INT 106
64612: PUSH
64613: LD_INT 108
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: ST_TO_ADDR
64627: GO 67406
64629: LD_INT 3
64631: DOUBLE
64632: EQUAL
64633: IFTRUE 64637
64635: GO 64713
64637: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
64638: LD_ADDR_VAR 0 1
64642: PUSH
64643: LD_INT 2
64645: PUSH
64646: LD_INT 4
64648: PUSH
64649: LD_INT 5
64651: PUSH
64652: LD_INT 11
64654: PUSH
64655: LD_INT 12
64657: PUSH
64658: LD_INT 15
64660: PUSH
64661: LD_INT 16
64663: PUSH
64664: LD_INT 22
64666: PUSH
64667: LD_INT 26
64669: PUSH
64670: LD_INT 36
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 101
64687: PUSH
64688: LD_INT 102
64690: PUSH
64691: LD_INT 105
64693: PUSH
64694: LD_INT 106
64696: PUSH
64697: LD_INT 108
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: ST_TO_ADDR
64711: GO 67406
64713: LD_INT 4
64715: DOUBLE
64716: EQUAL
64717: IFTRUE 64721
64719: GO 64805
64721: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
64722: LD_ADDR_VAR 0 1
64726: PUSH
64727: LD_INT 2
64729: PUSH
64730: LD_INT 4
64732: PUSH
64733: LD_INT 5
64735: PUSH
64736: LD_INT 8
64738: PUSH
64739: LD_INT 11
64741: PUSH
64742: LD_INT 12
64744: PUSH
64745: LD_INT 15
64747: PUSH
64748: LD_INT 16
64750: PUSH
64751: LD_INT 22
64753: PUSH
64754: LD_INT 23
64756: PUSH
64757: LD_INT 26
64759: PUSH
64760: LD_INT 36
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 101
64779: PUSH
64780: LD_INT 102
64782: PUSH
64783: LD_INT 105
64785: PUSH
64786: LD_INT 106
64788: PUSH
64789: LD_INT 108
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: ST_TO_ADDR
64803: GO 67406
64805: LD_INT 5
64807: DOUBLE
64808: EQUAL
64809: IFTRUE 64813
64811: GO 64913
64813: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
64814: LD_ADDR_VAR 0 1
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: LD_INT 4
64824: PUSH
64825: LD_INT 5
64827: PUSH
64828: LD_INT 6
64830: PUSH
64831: LD_INT 8
64833: PUSH
64834: LD_INT 11
64836: PUSH
64837: LD_INT 12
64839: PUSH
64840: LD_INT 15
64842: PUSH
64843: LD_INT 16
64845: PUSH
64846: LD_INT 22
64848: PUSH
64849: LD_INT 23
64851: PUSH
64852: LD_INT 25
64854: PUSH
64855: LD_INT 26
64857: PUSH
64858: LD_INT 36
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 101
64879: PUSH
64880: LD_INT 102
64882: PUSH
64883: LD_INT 105
64885: PUSH
64886: LD_INT 106
64888: PUSH
64889: LD_INT 108
64891: PUSH
64892: LD_INT 109
64894: PUSH
64895: LD_INT 112
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: ST_TO_ADDR
64911: GO 67406
64913: LD_INT 6
64915: DOUBLE
64916: EQUAL
64917: IFTRUE 64921
64919: GO 65041
64921: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
64922: LD_ADDR_VAR 0 1
64926: PUSH
64927: LD_INT 2
64929: PUSH
64930: LD_INT 4
64932: PUSH
64933: LD_INT 5
64935: PUSH
64936: LD_INT 6
64938: PUSH
64939: LD_INT 8
64941: PUSH
64942: LD_INT 11
64944: PUSH
64945: LD_INT 12
64947: PUSH
64948: LD_INT 15
64950: PUSH
64951: LD_INT 16
64953: PUSH
64954: LD_INT 20
64956: PUSH
64957: LD_INT 21
64959: PUSH
64960: LD_INT 22
64962: PUSH
64963: LD_INT 23
64965: PUSH
64966: LD_INT 25
64968: PUSH
64969: LD_INT 26
64971: PUSH
64972: LD_INT 30
64974: PUSH
64975: LD_INT 31
64977: PUSH
64978: LD_INT 32
64980: PUSH
64981: LD_INT 36
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 101
65007: PUSH
65008: LD_INT 102
65010: PUSH
65011: LD_INT 105
65013: PUSH
65014: LD_INT 106
65016: PUSH
65017: LD_INT 108
65019: PUSH
65020: LD_INT 109
65022: PUSH
65023: LD_INT 112
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: ST_TO_ADDR
65039: GO 67406
65041: LD_INT 7
65043: DOUBLE
65044: EQUAL
65045: IFTRUE 65049
65047: GO 65149
65049: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
65050: LD_ADDR_VAR 0 1
65054: PUSH
65055: LD_INT 2
65057: PUSH
65058: LD_INT 4
65060: PUSH
65061: LD_INT 5
65063: PUSH
65064: LD_INT 7
65066: PUSH
65067: LD_INT 11
65069: PUSH
65070: LD_INT 12
65072: PUSH
65073: LD_INT 15
65075: PUSH
65076: LD_INT 16
65078: PUSH
65079: LD_INT 20
65081: PUSH
65082: LD_INT 21
65084: PUSH
65085: LD_INT 22
65087: PUSH
65088: LD_INT 23
65090: PUSH
65091: LD_INT 25
65093: PUSH
65094: LD_INT 26
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 101
65115: PUSH
65116: LD_INT 102
65118: PUSH
65119: LD_INT 103
65121: PUSH
65122: LD_INT 105
65124: PUSH
65125: LD_INT 106
65127: PUSH
65128: LD_INT 108
65130: PUSH
65131: LD_INT 112
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: ST_TO_ADDR
65147: GO 67406
65149: LD_INT 8
65151: DOUBLE
65152: EQUAL
65153: IFTRUE 65157
65155: GO 65285
65157: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
65158: LD_ADDR_VAR 0 1
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: LD_INT 4
65168: PUSH
65169: LD_INT 5
65171: PUSH
65172: LD_INT 6
65174: PUSH
65175: LD_INT 7
65177: PUSH
65178: LD_INT 8
65180: PUSH
65181: LD_INT 11
65183: PUSH
65184: LD_INT 12
65186: PUSH
65187: LD_INT 15
65189: PUSH
65190: LD_INT 16
65192: PUSH
65193: LD_INT 20
65195: PUSH
65196: LD_INT 21
65198: PUSH
65199: LD_INT 22
65201: PUSH
65202: LD_INT 23
65204: PUSH
65205: LD_INT 25
65207: PUSH
65208: LD_INT 26
65210: PUSH
65211: LD_INT 30
65213: PUSH
65214: LD_INT 31
65216: PUSH
65217: LD_INT 32
65219: PUSH
65220: LD_INT 36
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 101
65247: PUSH
65248: LD_INT 102
65250: PUSH
65251: LD_INT 103
65253: PUSH
65254: LD_INT 105
65256: PUSH
65257: LD_INT 106
65259: PUSH
65260: LD_INT 108
65262: PUSH
65263: LD_INT 109
65265: PUSH
65266: LD_INT 112
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: ST_TO_ADDR
65283: GO 67406
65285: LD_INT 9
65287: DOUBLE
65288: EQUAL
65289: IFTRUE 65293
65291: GO 65429
65293: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
65294: LD_ADDR_VAR 0 1
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: LD_INT 4
65304: PUSH
65305: LD_INT 5
65307: PUSH
65308: LD_INT 6
65310: PUSH
65311: LD_INT 7
65313: PUSH
65314: LD_INT 8
65316: PUSH
65317: LD_INT 11
65319: PUSH
65320: LD_INT 12
65322: PUSH
65323: LD_INT 15
65325: PUSH
65326: LD_INT 16
65328: PUSH
65329: LD_INT 20
65331: PUSH
65332: LD_INT 21
65334: PUSH
65335: LD_INT 22
65337: PUSH
65338: LD_INT 23
65340: PUSH
65341: LD_INT 25
65343: PUSH
65344: LD_INT 26
65346: PUSH
65347: LD_INT 28
65349: PUSH
65350: LD_INT 30
65352: PUSH
65353: LD_INT 31
65355: PUSH
65356: LD_INT 32
65358: PUSH
65359: LD_INT 36
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 101
65387: PUSH
65388: LD_INT 102
65390: PUSH
65391: LD_INT 103
65393: PUSH
65394: LD_INT 105
65396: PUSH
65397: LD_INT 106
65399: PUSH
65400: LD_INT 108
65402: PUSH
65403: LD_INT 109
65405: PUSH
65406: LD_INT 112
65408: PUSH
65409: LD_INT 114
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: ST_TO_ADDR
65427: GO 67406
65429: LD_INT 10
65431: DOUBLE
65432: EQUAL
65433: IFTRUE 65437
65435: GO 65621
65437: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
65438: LD_ADDR_VAR 0 1
65442: PUSH
65443: LD_INT 2
65445: PUSH
65446: LD_INT 4
65448: PUSH
65449: LD_INT 5
65451: PUSH
65452: LD_INT 6
65454: PUSH
65455: LD_INT 7
65457: PUSH
65458: LD_INT 8
65460: PUSH
65461: LD_INT 9
65463: PUSH
65464: LD_INT 10
65466: PUSH
65467: LD_INT 11
65469: PUSH
65470: LD_INT 12
65472: PUSH
65473: LD_INT 13
65475: PUSH
65476: LD_INT 14
65478: PUSH
65479: LD_INT 15
65481: PUSH
65482: LD_INT 16
65484: PUSH
65485: LD_INT 17
65487: PUSH
65488: LD_INT 18
65490: PUSH
65491: LD_INT 19
65493: PUSH
65494: LD_INT 20
65496: PUSH
65497: LD_INT 21
65499: PUSH
65500: LD_INT 22
65502: PUSH
65503: LD_INT 23
65505: PUSH
65506: LD_INT 24
65508: PUSH
65509: LD_INT 25
65511: PUSH
65512: LD_INT 26
65514: PUSH
65515: LD_INT 28
65517: PUSH
65518: LD_INT 30
65520: PUSH
65521: LD_INT 31
65523: PUSH
65524: LD_INT 32
65526: PUSH
65527: LD_INT 36
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 101
65563: PUSH
65564: LD_INT 102
65566: PUSH
65567: LD_INT 103
65569: PUSH
65570: LD_INT 104
65572: PUSH
65573: LD_INT 105
65575: PUSH
65576: LD_INT 106
65578: PUSH
65579: LD_INT 107
65581: PUSH
65582: LD_INT 108
65584: PUSH
65585: LD_INT 109
65587: PUSH
65588: LD_INT 110
65590: PUSH
65591: LD_INT 111
65593: PUSH
65594: LD_INT 112
65596: PUSH
65597: LD_INT 114
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: ST_TO_ADDR
65619: GO 67406
65621: LD_INT 11
65623: DOUBLE
65624: EQUAL
65625: IFTRUE 65629
65627: GO 65821
65629: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
65630: LD_ADDR_VAR 0 1
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: LD_INT 3
65640: PUSH
65641: LD_INT 4
65643: PUSH
65644: LD_INT 5
65646: PUSH
65647: LD_INT 6
65649: PUSH
65650: LD_INT 7
65652: PUSH
65653: LD_INT 8
65655: PUSH
65656: LD_INT 9
65658: PUSH
65659: LD_INT 10
65661: PUSH
65662: LD_INT 11
65664: PUSH
65665: LD_INT 12
65667: PUSH
65668: LD_INT 13
65670: PUSH
65671: LD_INT 14
65673: PUSH
65674: LD_INT 15
65676: PUSH
65677: LD_INT 16
65679: PUSH
65680: LD_INT 17
65682: PUSH
65683: LD_INT 18
65685: PUSH
65686: LD_INT 19
65688: PUSH
65689: LD_INT 20
65691: PUSH
65692: LD_INT 21
65694: PUSH
65695: LD_INT 22
65697: PUSH
65698: LD_INT 23
65700: PUSH
65701: LD_INT 24
65703: PUSH
65704: LD_INT 25
65706: PUSH
65707: LD_INT 26
65709: PUSH
65710: LD_INT 28
65712: PUSH
65713: LD_INT 30
65715: PUSH
65716: LD_INT 31
65718: PUSH
65719: LD_INT 32
65721: PUSH
65722: LD_INT 34
65724: PUSH
65725: LD_INT 36
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 101
65763: PUSH
65764: LD_INT 102
65766: PUSH
65767: LD_INT 103
65769: PUSH
65770: LD_INT 104
65772: PUSH
65773: LD_INT 105
65775: PUSH
65776: LD_INT 106
65778: PUSH
65779: LD_INT 107
65781: PUSH
65782: LD_INT 108
65784: PUSH
65785: LD_INT 109
65787: PUSH
65788: LD_INT 110
65790: PUSH
65791: LD_INT 111
65793: PUSH
65794: LD_INT 112
65796: PUSH
65797: LD_INT 114
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: ST_TO_ADDR
65819: GO 67406
65821: LD_INT 12
65823: DOUBLE
65824: EQUAL
65825: IFTRUE 65829
65827: GO 66037
65829: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
65830: LD_ADDR_VAR 0 1
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: LD_INT 2
65840: PUSH
65841: LD_INT 3
65843: PUSH
65844: LD_INT 4
65846: PUSH
65847: LD_INT 5
65849: PUSH
65850: LD_INT 6
65852: PUSH
65853: LD_INT 7
65855: PUSH
65856: LD_INT 8
65858: PUSH
65859: LD_INT 9
65861: PUSH
65862: LD_INT 10
65864: PUSH
65865: LD_INT 11
65867: PUSH
65868: LD_INT 12
65870: PUSH
65871: LD_INT 13
65873: PUSH
65874: LD_INT 14
65876: PUSH
65877: LD_INT 15
65879: PUSH
65880: LD_INT 16
65882: PUSH
65883: LD_INT 17
65885: PUSH
65886: LD_INT 18
65888: PUSH
65889: LD_INT 19
65891: PUSH
65892: LD_INT 20
65894: PUSH
65895: LD_INT 21
65897: PUSH
65898: LD_INT 22
65900: PUSH
65901: LD_INT 23
65903: PUSH
65904: LD_INT 24
65906: PUSH
65907: LD_INT 25
65909: PUSH
65910: LD_INT 26
65912: PUSH
65913: LD_INT 27
65915: PUSH
65916: LD_INT 28
65918: PUSH
65919: LD_INT 30
65921: PUSH
65922: LD_INT 31
65924: PUSH
65925: LD_INT 32
65927: PUSH
65928: LD_INT 33
65930: PUSH
65931: LD_INT 34
65933: PUSH
65934: LD_INT 36
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 101
65975: PUSH
65976: LD_INT 102
65978: PUSH
65979: LD_INT 103
65981: PUSH
65982: LD_INT 104
65984: PUSH
65985: LD_INT 105
65987: PUSH
65988: LD_INT 106
65990: PUSH
65991: LD_INT 107
65993: PUSH
65994: LD_INT 108
65996: PUSH
65997: LD_INT 109
65999: PUSH
66000: LD_INT 110
66002: PUSH
66003: LD_INT 111
66005: PUSH
66006: LD_INT 112
66008: PUSH
66009: LD_INT 113
66011: PUSH
66012: LD_INT 114
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: ST_TO_ADDR
66035: GO 67406
66037: LD_INT 13
66039: DOUBLE
66040: EQUAL
66041: IFTRUE 66045
66043: GO 66241
66045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
66046: LD_ADDR_VAR 0 1
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: LD_INT 2
66056: PUSH
66057: LD_INT 3
66059: PUSH
66060: LD_INT 4
66062: PUSH
66063: LD_INT 5
66065: PUSH
66066: LD_INT 8
66068: PUSH
66069: LD_INT 9
66071: PUSH
66072: LD_INT 10
66074: PUSH
66075: LD_INT 11
66077: PUSH
66078: LD_INT 12
66080: PUSH
66081: LD_INT 14
66083: PUSH
66084: LD_INT 15
66086: PUSH
66087: LD_INT 16
66089: PUSH
66090: LD_INT 17
66092: PUSH
66093: LD_INT 18
66095: PUSH
66096: LD_INT 19
66098: PUSH
66099: LD_INT 20
66101: PUSH
66102: LD_INT 21
66104: PUSH
66105: LD_INT 22
66107: PUSH
66108: LD_INT 23
66110: PUSH
66111: LD_INT 24
66113: PUSH
66114: LD_INT 25
66116: PUSH
66117: LD_INT 26
66119: PUSH
66120: LD_INT 27
66122: PUSH
66123: LD_INT 28
66125: PUSH
66126: LD_INT 30
66128: PUSH
66129: LD_INT 31
66131: PUSH
66132: LD_INT 32
66134: PUSH
66135: LD_INT 33
66137: PUSH
66138: LD_INT 34
66140: PUSH
66141: LD_INT 36
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 101
66179: PUSH
66180: LD_INT 102
66182: PUSH
66183: LD_INT 103
66185: PUSH
66186: LD_INT 104
66188: PUSH
66189: LD_INT 105
66191: PUSH
66192: LD_INT 106
66194: PUSH
66195: LD_INT 107
66197: PUSH
66198: LD_INT 108
66200: PUSH
66201: LD_INT 109
66203: PUSH
66204: LD_INT 110
66206: PUSH
66207: LD_INT 111
66209: PUSH
66210: LD_INT 112
66212: PUSH
66213: LD_INT 113
66215: PUSH
66216: LD_INT 114
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: ST_TO_ADDR
66239: GO 67406
66241: LD_INT 14
66243: DOUBLE
66244: EQUAL
66245: IFTRUE 66249
66247: GO 66461
66249: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
66250: LD_ADDR_VAR 0 1
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: LD_INT 2
66260: PUSH
66261: LD_INT 3
66263: PUSH
66264: LD_INT 4
66266: PUSH
66267: LD_INT 5
66269: PUSH
66270: LD_INT 6
66272: PUSH
66273: LD_INT 7
66275: PUSH
66276: LD_INT 8
66278: PUSH
66279: LD_INT 9
66281: PUSH
66282: LD_INT 10
66284: PUSH
66285: LD_INT 11
66287: PUSH
66288: LD_INT 12
66290: PUSH
66291: LD_INT 13
66293: PUSH
66294: LD_INT 14
66296: PUSH
66297: LD_INT 15
66299: PUSH
66300: LD_INT 16
66302: PUSH
66303: LD_INT 17
66305: PUSH
66306: LD_INT 18
66308: PUSH
66309: LD_INT 19
66311: PUSH
66312: LD_INT 20
66314: PUSH
66315: LD_INT 21
66317: PUSH
66318: LD_INT 22
66320: PUSH
66321: LD_INT 23
66323: PUSH
66324: LD_INT 24
66326: PUSH
66327: LD_INT 25
66329: PUSH
66330: LD_INT 26
66332: PUSH
66333: LD_INT 27
66335: PUSH
66336: LD_INT 28
66338: PUSH
66339: LD_INT 29
66341: PUSH
66342: LD_INT 30
66344: PUSH
66345: LD_INT 31
66347: PUSH
66348: LD_INT 32
66350: PUSH
66351: LD_INT 33
66353: PUSH
66354: LD_INT 34
66356: PUSH
66357: LD_INT 36
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 101
66399: PUSH
66400: LD_INT 102
66402: PUSH
66403: LD_INT 103
66405: PUSH
66406: LD_INT 104
66408: PUSH
66409: LD_INT 105
66411: PUSH
66412: LD_INT 106
66414: PUSH
66415: LD_INT 107
66417: PUSH
66418: LD_INT 108
66420: PUSH
66421: LD_INT 109
66423: PUSH
66424: LD_INT 110
66426: PUSH
66427: LD_INT 111
66429: PUSH
66430: LD_INT 112
66432: PUSH
66433: LD_INT 113
66435: PUSH
66436: LD_INT 114
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: ST_TO_ADDR
66459: GO 67406
66461: LD_INT 15
66463: DOUBLE
66464: EQUAL
66465: IFTRUE 66469
66467: GO 66681
66469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
66470: LD_ADDR_VAR 0 1
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: LD_INT 2
66480: PUSH
66481: LD_INT 3
66483: PUSH
66484: LD_INT 4
66486: PUSH
66487: LD_INT 5
66489: PUSH
66490: LD_INT 6
66492: PUSH
66493: LD_INT 7
66495: PUSH
66496: LD_INT 8
66498: PUSH
66499: LD_INT 9
66501: PUSH
66502: LD_INT 10
66504: PUSH
66505: LD_INT 11
66507: PUSH
66508: LD_INT 12
66510: PUSH
66511: LD_INT 13
66513: PUSH
66514: LD_INT 14
66516: PUSH
66517: LD_INT 15
66519: PUSH
66520: LD_INT 16
66522: PUSH
66523: LD_INT 17
66525: PUSH
66526: LD_INT 18
66528: PUSH
66529: LD_INT 19
66531: PUSH
66532: LD_INT 20
66534: PUSH
66535: LD_INT 21
66537: PUSH
66538: LD_INT 22
66540: PUSH
66541: LD_INT 23
66543: PUSH
66544: LD_INT 24
66546: PUSH
66547: LD_INT 25
66549: PUSH
66550: LD_INT 26
66552: PUSH
66553: LD_INT 27
66555: PUSH
66556: LD_INT 28
66558: PUSH
66559: LD_INT 29
66561: PUSH
66562: LD_INT 30
66564: PUSH
66565: LD_INT 31
66567: PUSH
66568: LD_INT 32
66570: PUSH
66571: LD_INT 33
66573: PUSH
66574: LD_INT 34
66576: PUSH
66577: LD_INT 36
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 101
66619: PUSH
66620: LD_INT 102
66622: PUSH
66623: LD_INT 103
66625: PUSH
66626: LD_INT 104
66628: PUSH
66629: LD_INT 105
66631: PUSH
66632: LD_INT 106
66634: PUSH
66635: LD_INT 107
66637: PUSH
66638: LD_INT 108
66640: PUSH
66641: LD_INT 109
66643: PUSH
66644: LD_INT 110
66646: PUSH
66647: LD_INT 111
66649: PUSH
66650: LD_INT 112
66652: PUSH
66653: LD_INT 113
66655: PUSH
66656: LD_INT 114
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: ST_TO_ADDR
66679: GO 67406
66681: LD_INT 16
66683: DOUBLE
66684: EQUAL
66685: IFTRUE 66689
66687: GO 66813
66689: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
66690: LD_ADDR_VAR 0 1
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: LD_INT 4
66700: PUSH
66701: LD_INT 5
66703: PUSH
66704: LD_INT 7
66706: PUSH
66707: LD_INT 11
66709: PUSH
66710: LD_INT 12
66712: PUSH
66713: LD_INT 15
66715: PUSH
66716: LD_INT 16
66718: PUSH
66719: LD_INT 20
66721: PUSH
66722: LD_INT 21
66724: PUSH
66725: LD_INT 22
66727: PUSH
66728: LD_INT 23
66730: PUSH
66731: LD_INT 25
66733: PUSH
66734: LD_INT 26
66736: PUSH
66737: LD_INT 30
66739: PUSH
66740: LD_INT 31
66742: PUSH
66743: LD_INT 32
66745: PUSH
66746: LD_INT 33
66748: PUSH
66749: LD_INT 34
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 101
66775: PUSH
66776: LD_INT 102
66778: PUSH
66779: LD_INT 103
66781: PUSH
66782: LD_INT 106
66784: PUSH
66785: LD_INT 108
66787: PUSH
66788: LD_INT 112
66790: PUSH
66791: LD_INT 113
66793: PUSH
66794: LD_INT 114
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: ST_TO_ADDR
66811: GO 67406
66813: LD_INT 17
66815: DOUBLE
66816: EQUAL
66817: IFTRUE 66821
66819: GO 67033
66821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
66822: LD_ADDR_VAR 0 1
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: LD_INT 2
66832: PUSH
66833: LD_INT 3
66835: PUSH
66836: LD_INT 4
66838: PUSH
66839: LD_INT 5
66841: PUSH
66842: LD_INT 6
66844: PUSH
66845: LD_INT 7
66847: PUSH
66848: LD_INT 8
66850: PUSH
66851: LD_INT 9
66853: PUSH
66854: LD_INT 10
66856: PUSH
66857: LD_INT 11
66859: PUSH
66860: LD_INT 12
66862: PUSH
66863: LD_INT 13
66865: PUSH
66866: LD_INT 14
66868: PUSH
66869: LD_INT 15
66871: PUSH
66872: LD_INT 16
66874: PUSH
66875: LD_INT 17
66877: PUSH
66878: LD_INT 18
66880: PUSH
66881: LD_INT 19
66883: PUSH
66884: LD_INT 20
66886: PUSH
66887: LD_INT 21
66889: PUSH
66890: LD_INT 22
66892: PUSH
66893: LD_INT 23
66895: PUSH
66896: LD_INT 24
66898: PUSH
66899: LD_INT 25
66901: PUSH
66902: LD_INT 26
66904: PUSH
66905: LD_INT 27
66907: PUSH
66908: LD_INT 28
66910: PUSH
66911: LD_INT 29
66913: PUSH
66914: LD_INT 30
66916: PUSH
66917: LD_INT 31
66919: PUSH
66920: LD_INT 32
66922: PUSH
66923: LD_INT 33
66925: PUSH
66926: LD_INT 34
66928: PUSH
66929: LD_INT 36
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 101
66971: PUSH
66972: LD_INT 102
66974: PUSH
66975: LD_INT 103
66977: PUSH
66978: LD_INT 104
66980: PUSH
66981: LD_INT 105
66983: PUSH
66984: LD_INT 106
66986: PUSH
66987: LD_INT 107
66989: PUSH
66990: LD_INT 108
66992: PUSH
66993: LD_INT 109
66995: PUSH
66996: LD_INT 110
66998: PUSH
66999: LD_INT 111
67001: PUSH
67002: LD_INT 112
67004: PUSH
67005: LD_INT 113
67007: PUSH
67008: LD_INT 114
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: ST_TO_ADDR
67031: GO 67406
67033: LD_INT 18
67035: DOUBLE
67036: EQUAL
67037: IFTRUE 67041
67039: GO 67177
67041: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
67042: LD_ADDR_VAR 0 1
67046: PUSH
67047: LD_INT 2
67049: PUSH
67050: LD_INT 4
67052: PUSH
67053: LD_INT 5
67055: PUSH
67056: LD_INT 7
67058: PUSH
67059: LD_INT 11
67061: PUSH
67062: LD_INT 12
67064: PUSH
67065: LD_INT 15
67067: PUSH
67068: LD_INT 16
67070: PUSH
67071: LD_INT 20
67073: PUSH
67074: LD_INT 21
67076: PUSH
67077: LD_INT 22
67079: PUSH
67080: LD_INT 23
67082: PUSH
67083: LD_INT 25
67085: PUSH
67086: LD_INT 26
67088: PUSH
67089: LD_INT 30
67091: PUSH
67092: LD_INT 31
67094: PUSH
67095: LD_INT 32
67097: PUSH
67098: LD_INT 33
67100: PUSH
67101: LD_INT 34
67103: PUSH
67104: LD_INT 35
67106: PUSH
67107: LD_INT 36
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 101
67135: PUSH
67136: LD_INT 102
67138: PUSH
67139: LD_INT 103
67141: PUSH
67142: LD_INT 106
67144: PUSH
67145: LD_INT 108
67147: PUSH
67148: LD_INT 112
67150: PUSH
67151: LD_INT 113
67153: PUSH
67154: LD_INT 114
67156: PUSH
67157: LD_INT 115
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: ST_TO_ADDR
67175: GO 67406
67177: LD_INT 19
67179: DOUBLE
67180: EQUAL
67181: IFTRUE 67185
67183: GO 67405
67185: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
67186: LD_ADDR_VAR 0 1
67190: PUSH
67191: LD_INT 1
67193: PUSH
67194: LD_INT 2
67196: PUSH
67197: LD_INT 3
67199: PUSH
67200: LD_INT 4
67202: PUSH
67203: LD_INT 5
67205: PUSH
67206: LD_INT 6
67208: PUSH
67209: LD_INT 7
67211: PUSH
67212: LD_INT 8
67214: PUSH
67215: LD_INT 9
67217: PUSH
67218: LD_INT 10
67220: PUSH
67221: LD_INT 11
67223: PUSH
67224: LD_INT 12
67226: PUSH
67227: LD_INT 13
67229: PUSH
67230: LD_INT 14
67232: PUSH
67233: LD_INT 15
67235: PUSH
67236: LD_INT 16
67238: PUSH
67239: LD_INT 17
67241: PUSH
67242: LD_INT 18
67244: PUSH
67245: LD_INT 19
67247: PUSH
67248: LD_INT 20
67250: PUSH
67251: LD_INT 21
67253: PUSH
67254: LD_INT 22
67256: PUSH
67257: LD_INT 23
67259: PUSH
67260: LD_INT 24
67262: PUSH
67263: LD_INT 25
67265: PUSH
67266: LD_INT 26
67268: PUSH
67269: LD_INT 27
67271: PUSH
67272: LD_INT 28
67274: PUSH
67275: LD_INT 29
67277: PUSH
67278: LD_INT 30
67280: PUSH
67281: LD_INT 31
67283: PUSH
67284: LD_INT 32
67286: PUSH
67287: LD_INT 33
67289: PUSH
67290: LD_INT 34
67292: PUSH
67293: LD_INT 35
67295: PUSH
67296: LD_INT 36
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 101
67339: PUSH
67340: LD_INT 102
67342: PUSH
67343: LD_INT 103
67345: PUSH
67346: LD_INT 104
67348: PUSH
67349: LD_INT 105
67351: PUSH
67352: LD_INT 106
67354: PUSH
67355: LD_INT 107
67357: PUSH
67358: LD_INT 108
67360: PUSH
67361: LD_INT 109
67363: PUSH
67364: LD_INT 110
67366: PUSH
67367: LD_INT 111
67369: PUSH
67370: LD_INT 112
67372: PUSH
67373: LD_INT 113
67375: PUSH
67376: LD_INT 114
67378: PUSH
67379: LD_INT 115
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: ST_TO_ADDR
67403: GO 67406
67405: POP
// end else
67406: GO 67625
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
67408: LD_ADDR_VAR 0 1
67412: PUSH
67413: LD_INT 1
67415: PUSH
67416: LD_INT 2
67418: PUSH
67419: LD_INT 3
67421: PUSH
67422: LD_INT 4
67424: PUSH
67425: LD_INT 5
67427: PUSH
67428: LD_INT 6
67430: PUSH
67431: LD_INT 7
67433: PUSH
67434: LD_INT 8
67436: PUSH
67437: LD_INT 9
67439: PUSH
67440: LD_INT 10
67442: PUSH
67443: LD_INT 11
67445: PUSH
67446: LD_INT 12
67448: PUSH
67449: LD_INT 13
67451: PUSH
67452: LD_INT 14
67454: PUSH
67455: LD_INT 15
67457: PUSH
67458: LD_INT 16
67460: PUSH
67461: LD_INT 17
67463: PUSH
67464: LD_INT 18
67466: PUSH
67467: LD_INT 19
67469: PUSH
67470: LD_INT 20
67472: PUSH
67473: LD_INT 21
67475: PUSH
67476: LD_INT 22
67478: PUSH
67479: LD_INT 23
67481: PUSH
67482: LD_INT 24
67484: PUSH
67485: LD_INT 25
67487: PUSH
67488: LD_INT 26
67490: PUSH
67491: LD_INT 27
67493: PUSH
67494: LD_INT 28
67496: PUSH
67497: LD_INT 29
67499: PUSH
67500: LD_INT 30
67502: PUSH
67503: LD_INT 31
67505: PUSH
67506: LD_INT 32
67508: PUSH
67509: LD_INT 33
67511: PUSH
67512: LD_INT 34
67514: PUSH
67515: LD_INT 35
67517: PUSH
67518: LD_INT 36
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 101
67561: PUSH
67562: LD_INT 102
67564: PUSH
67565: LD_INT 103
67567: PUSH
67568: LD_INT 104
67570: PUSH
67571: LD_INT 105
67573: PUSH
67574: LD_INT 106
67576: PUSH
67577: LD_INT 107
67579: PUSH
67580: LD_INT 108
67582: PUSH
67583: LD_INT 109
67585: PUSH
67586: LD_INT 110
67588: PUSH
67589: LD_INT 111
67591: PUSH
67592: LD_INT 112
67594: PUSH
67595: LD_INT 113
67597: PUSH
67598: LD_INT 114
67600: PUSH
67601: LD_INT 115
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: ST_TO_ADDR
// if result then
67625: LD_VAR 0 1
67629: IFFALSE 67918
// begin normal :=  ;
67631: LD_ADDR_VAR 0 3
67635: PUSH
67636: LD_STRING 
67638: ST_TO_ADDR
// hardcore :=  ;
67639: LD_ADDR_VAR 0 4
67643: PUSH
67644: LD_STRING 
67646: ST_TO_ADDR
// for i = 1 to normalCounter do
67647: LD_ADDR_VAR 0 5
67651: PUSH
67652: DOUBLE
67653: LD_INT 1
67655: DEC
67656: ST_TO_ADDR
67657: LD_EXP 72
67661: PUSH
67662: FOR_TO
67663: IFFALSE 67764
// begin tmp := 0 ;
67665: LD_ADDR_VAR 0 2
67669: PUSH
67670: LD_STRING 0
67672: ST_TO_ADDR
// if result [ 1 ] then
67673: LD_VAR 0 1
67677: PUSH
67678: LD_INT 1
67680: ARRAY
67681: IFFALSE 67746
// if result [ 1 ] [ 1 ] = i then
67683: LD_VAR 0 1
67687: PUSH
67688: LD_INT 1
67690: ARRAY
67691: PUSH
67692: LD_INT 1
67694: ARRAY
67695: PUSH
67696: LD_VAR 0 5
67700: EQUAL
67701: IFFALSE 67746
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
67703: LD_ADDR_VAR 0 1
67707: PUSH
67708: LD_VAR 0 1
67712: PPUSH
67713: LD_INT 1
67715: PPUSH
67716: LD_VAR 0 1
67720: PUSH
67721: LD_INT 1
67723: ARRAY
67724: PPUSH
67725: LD_INT 1
67727: PPUSH
67728: CALL_OW 3
67732: PPUSH
67733: CALL_OW 1
67737: ST_TO_ADDR
// tmp := 1 ;
67738: LD_ADDR_VAR 0 2
67742: PUSH
67743: LD_STRING 1
67745: ST_TO_ADDR
// end ; normal := normal & tmp ;
67746: LD_ADDR_VAR 0 3
67750: PUSH
67751: LD_VAR 0 3
67755: PUSH
67756: LD_VAR 0 2
67760: STR
67761: ST_TO_ADDR
// end ;
67762: GO 67662
67764: POP
67765: POP
// for i = 1 to hardcoreCounter do
67766: LD_ADDR_VAR 0 5
67770: PUSH
67771: DOUBLE
67772: LD_INT 1
67774: DEC
67775: ST_TO_ADDR
67776: LD_EXP 73
67780: PUSH
67781: FOR_TO
67782: IFFALSE 67887
// begin tmp := 0 ;
67784: LD_ADDR_VAR 0 2
67788: PUSH
67789: LD_STRING 0
67791: ST_TO_ADDR
// if result [ 2 ] then
67792: LD_VAR 0 1
67796: PUSH
67797: LD_INT 2
67799: ARRAY
67800: IFFALSE 67869
// if result [ 2 ] [ 1 ] = 100 + i then
67802: LD_VAR 0 1
67806: PUSH
67807: LD_INT 2
67809: ARRAY
67810: PUSH
67811: LD_INT 1
67813: ARRAY
67814: PUSH
67815: LD_INT 100
67817: PUSH
67818: LD_VAR 0 5
67822: PLUS
67823: EQUAL
67824: IFFALSE 67869
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67826: LD_ADDR_VAR 0 1
67830: PUSH
67831: LD_VAR 0 1
67835: PPUSH
67836: LD_INT 2
67838: PPUSH
67839: LD_VAR 0 1
67843: PUSH
67844: LD_INT 2
67846: ARRAY
67847: PPUSH
67848: LD_INT 1
67850: PPUSH
67851: CALL_OW 3
67855: PPUSH
67856: CALL_OW 1
67860: ST_TO_ADDR
// tmp := 1 ;
67861: LD_ADDR_VAR 0 2
67865: PUSH
67866: LD_STRING 1
67868: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67869: LD_ADDR_VAR 0 4
67873: PUSH
67874: LD_VAR 0 4
67878: PUSH
67879: LD_VAR 0 2
67883: STR
67884: ST_TO_ADDR
// end ;
67885: GO 67781
67887: POP
67888: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
67889: LD_STRING getStreamItemsFromMission("
67891: PUSH
67892: LD_VAR 0 3
67896: STR
67897: PUSH
67898: LD_STRING ","
67900: STR
67901: PUSH
67902: LD_VAR 0 4
67906: STR
67907: PUSH
67908: LD_STRING ")
67910: STR
67911: PPUSH
67912: CALL_OW 559
// end else
67916: GO 67925
// ToLua ( getStreamItemsFromMission("","") ) ;
67918: LD_STRING getStreamItemsFromMission("","")
67920: PPUSH
67921: CALL_OW 559
// end ;
67925: LD_VAR 0 1
67929: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67930: LD_EXP 71
67934: PUSH
67935: LD_EXP 76
67939: AND
67940: IFFALSE 68064
67942: GO 67944
67944: DISABLE
67945: LD_INT 0
67947: PPUSH
67948: PPUSH
// begin enable ;
67949: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67950: LD_ADDR_VAR 0 2
67954: PUSH
67955: LD_INT 22
67957: PUSH
67958: LD_OWVAR 2
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 2
67969: PUSH
67970: LD_INT 34
67972: PUSH
67973: LD_INT 7
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 34
67982: PUSH
67983: LD_INT 45
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 34
67992: PUSH
67993: LD_INT 28
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 34
68002: PUSH
68003: LD_INT 47
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PPUSH
68021: CALL_OW 69
68025: ST_TO_ADDR
// if not tmp then
68026: LD_VAR 0 2
68030: NOT
68031: IFFALSE 68035
// exit ;
68033: GO 68064
// for i in tmp do
68035: LD_ADDR_VAR 0 1
68039: PUSH
68040: LD_VAR 0 2
68044: PUSH
68045: FOR_IN
68046: IFFALSE 68062
// begin SetLives ( i , 0 ) ;
68048: LD_VAR 0 1
68052: PPUSH
68053: LD_INT 0
68055: PPUSH
68056: CALL_OW 234
// end ;
68060: GO 68045
68062: POP
68063: POP
// end ;
68064: PPOPN 2
68066: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
68067: LD_EXP 71
68071: PUSH
68072: LD_EXP 77
68076: AND
68077: IFFALSE 68161
68079: GO 68081
68081: DISABLE
68082: LD_INT 0
68084: PPUSH
68085: PPUSH
// begin enable ;
68086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
68087: LD_ADDR_VAR 0 2
68091: PUSH
68092: LD_INT 22
68094: PUSH
68095: LD_OWVAR 2
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 32
68106: PUSH
68107: LD_INT 3
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PPUSH
68118: CALL_OW 69
68122: ST_TO_ADDR
// if not tmp then
68123: LD_VAR 0 2
68127: NOT
68128: IFFALSE 68132
// exit ;
68130: GO 68161
// for i in tmp do
68132: LD_ADDR_VAR 0 1
68136: PUSH
68137: LD_VAR 0 2
68141: PUSH
68142: FOR_IN
68143: IFFALSE 68159
// begin SetLives ( i , 0 ) ;
68145: LD_VAR 0 1
68149: PPUSH
68150: LD_INT 0
68152: PPUSH
68153: CALL_OW 234
// end ;
68157: GO 68142
68159: POP
68160: POP
// end ;
68161: PPOPN 2
68163: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
68164: LD_EXP 71
68168: PUSH
68169: LD_EXP 74
68173: AND
68174: IFFALSE 68267
68176: GO 68178
68178: DISABLE
68179: LD_INT 0
68181: PPUSH
// begin enable ;
68182: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
68183: LD_ADDR_VAR 0 1
68187: PUSH
68188: LD_INT 22
68190: PUSH
68191: LD_OWVAR 2
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 2
68202: PUSH
68203: LD_INT 25
68205: PUSH
68206: LD_INT 5
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 25
68215: PUSH
68216: LD_INT 9
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 25
68225: PUSH
68226: LD_INT 8
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PPUSH
68243: CALL_OW 69
68247: PUSH
68248: FOR_IN
68249: IFFALSE 68265
// begin SetClass ( i , 1 ) ;
68251: LD_VAR 0 1
68255: PPUSH
68256: LD_INT 1
68258: PPUSH
68259: CALL_OW 336
// end ;
68263: GO 68248
68265: POP
68266: POP
// end ;
68267: PPOPN 1
68269: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
68270: LD_EXP 71
68274: PUSH
68275: LD_EXP 75
68279: AND
68280: PUSH
68281: LD_OWVAR 65
68285: PUSH
68286: LD_INT 7
68288: LESS
68289: AND
68290: IFFALSE 68304
68292: GO 68294
68294: DISABLE
// begin enable ;
68295: ENABLE
// game_speed := 7 ;
68296: LD_ADDR_OWVAR 65
68300: PUSH
68301: LD_INT 7
68303: ST_TO_ADDR
// end ;
68304: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
68305: LD_EXP 71
68309: PUSH
68310: LD_EXP 78
68314: AND
68315: IFFALSE 68517
68317: GO 68319
68319: DISABLE
68320: LD_INT 0
68322: PPUSH
68323: PPUSH
68324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68325: LD_ADDR_VAR 0 3
68329: PUSH
68330: LD_INT 81
68332: PUSH
68333: LD_OWVAR 2
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 21
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PPUSH
68356: CALL_OW 69
68360: ST_TO_ADDR
// if not tmp then
68361: LD_VAR 0 3
68365: NOT
68366: IFFALSE 68370
// exit ;
68368: GO 68517
// if tmp > 5 then
68370: LD_VAR 0 3
68374: PUSH
68375: LD_INT 5
68377: GREATER
68378: IFFALSE 68390
// k := 5 else
68380: LD_ADDR_VAR 0 2
68384: PUSH
68385: LD_INT 5
68387: ST_TO_ADDR
68388: GO 68400
// k := tmp ;
68390: LD_ADDR_VAR 0 2
68394: PUSH
68395: LD_VAR 0 3
68399: ST_TO_ADDR
// for i := 1 to k do
68400: LD_ADDR_VAR 0 1
68404: PUSH
68405: DOUBLE
68406: LD_INT 1
68408: DEC
68409: ST_TO_ADDR
68410: LD_VAR 0 2
68414: PUSH
68415: FOR_TO
68416: IFFALSE 68515
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
68418: LD_VAR 0 3
68422: PUSH
68423: LD_VAR 0 1
68427: ARRAY
68428: PPUSH
68429: LD_VAR 0 1
68433: PUSH
68434: LD_INT 4
68436: MOD
68437: PUSH
68438: LD_INT 1
68440: PLUS
68441: PPUSH
68442: CALL_OW 259
68446: PUSH
68447: LD_INT 10
68449: LESS
68450: IFFALSE 68513
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68452: LD_VAR 0 3
68456: PUSH
68457: LD_VAR 0 1
68461: ARRAY
68462: PPUSH
68463: LD_VAR 0 1
68467: PUSH
68468: LD_INT 4
68470: MOD
68471: PUSH
68472: LD_INT 1
68474: PLUS
68475: PPUSH
68476: LD_VAR 0 3
68480: PUSH
68481: LD_VAR 0 1
68485: ARRAY
68486: PPUSH
68487: LD_VAR 0 1
68491: PUSH
68492: LD_INT 4
68494: MOD
68495: PUSH
68496: LD_INT 1
68498: PLUS
68499: PPUSH
68500: CALL_OW 259
68504: PUSH
68505: LD_INT 1
68507: PLUS
68508: PPUSH
68509: CALL_OW 237
68513: GO 68415
68515: POP
68516: POP
// end ;
68517: PPOPN 3
68519: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
68520: LD_EXP 71
68524: PUSH
68525: LD_EXP 79
68529: AND
68530: IFFALSE 68550
68532: GO 68534
68534: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
68535: LD_INT 4
68537: PPUSH
68538: LD_OWVAR 2
68542: PPUSH
68543: LD_INT 0
68545: PPUSH
68546: CALL_OW 324
68550: END
// every 0 0$1 trigger StreamModeActive and sShovel do
68551: LD_EXP 71
68555: PUSH
68556: LD_EXP 108
68560: AND
68561: IFFALSE 68581
68563: GO 68565
68565: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
68566: LD_INT 19
68568: PPUSH
68569: LD_OWVAR 2
68573: PPUSH
68574: LD_INT 0
68576: PPUSH
68577: CALL_OW 324
68581: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
68582: LD_EXP 71
68586: PUSH
68587: LD_EXP 80
68591: AND
68592: IFFALSE 68694
68594: GO 68596
68596: DISABLE
68597: LD_INT 0
68599: PPUSH
68600: PPUSH
// begin enable ;
68601: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
68602: LD_ADDR_VAR 0 2
68606: PUSH
68607: LD_INT 22
68609: PUSH
68610: LD_OWVAR 2
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 2
68621: PUSH
68622: LD_INT 34
68624: PUSH
68625: LD_INT 11
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 34
68634: PUSH
68635: LD_INT 30
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: LIST
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PPUSH
68651: CALL_OW 69
68655: ST_TO_ADDR
// if not tmp then
68656: LD_VAR 0 2
68660: NOT
68661: IFFALSE 68665
// exit ;
68663: GO 68694
// for i in tmp do
68665: LD_ADDR_VAR 0 1
68669: PUSH
68670: LD_VAR 0 2
68674: PUSH
68675: FOR_IN
68676: IFFALSE 68692
// begin SetLives ( i , 0 ) ;
68678: LD_VAR 0 1
68682: PPUSH
68683: LD_INT 0
68685: PPUSH
68686: CALL_OW 234
// end ;
68690: GO 68675
68692: POP
68693: POP
// end ;
68694: PPOPN 2
68696: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68697: LD_EXP 71
68701: PUSH
68702: LD_EXP 81
68706: AND
68707: IFFALSE 68727
68709: GO 68711
68711: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68712: LD_INT 32
68714: PPUSH
68715: LD_OWVAR 2
68719: PPUSH
68720: LD_INT 0
68722: PPUSH
68723: CALL_OW 324
68727: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68728: LD_EXP 71
68732: PUSH
68733: LD_EXP 82
68737: AND
68738: IFFALSE 68919
68740: GO 68742
68742: DISABLE
68743: LD_INT 0
68745: PPUSH
68746: PPUSH
68747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68748: LD_ADDR_VAR 0 2
68752: PUSH
68753: LD_INT 22
68755: PUSH
68756: LD_OWVAR 2
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 33
68767: PUSH
68768: LD_INT 3
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PPUSH
68779: CALL_OW 69
68783: ST_TO_ADDR
// if not tmp then
68784: LD_VAR 0 2
68788: NOT
68789: IFFALSE 68793
// exit ;
68791: GO 68919
// side := 0 ;
68793: LD_ADDR_VAR 0 3
68797: PUSH
68798: LD_INT 0
68800: ST_TO_ADDR
// for i := 1 to 8 do
68801: LD_ADDR_VAR 0 1
68805: PUSH
68806: DOUBLE
68807: LD_INT 1
68809: DEC
68810: ST_TO_ADDR
68811: LD_INT 8
68813: PUSH
68814: FOR_TO
68815: IFFALSE 68863
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68817: LD_OWVAR 2
68821: PUSH
68822: LD_VAR 0 1
68826: NONEQUAL
68827: PUSH
68828: LD_OWVAR 2
68832: PPUSH
68833: LD_VAR 0 1
68837: PPUSH
68838: CALL_OW 81
68842: PUSH
68843: LD_INT 2
68845: EQUAL
68846: AND
68847: IFFALSE 68861
// begin side := i ;
68849: LD_ADDR_VAR 0 3
68853: PUSH
68854: LD_VAR 0 1
68858: ST_TO_ADDR
// break ;
68859: GO 68863
// end ;
68861: GO 68814
68863: POP
68864: POP
// if not side then
68865: LD_VAR 0 3
68869: NOT
68870: IFFALSE 68874
// exit ;
68872: GO 68919
// for i := 1 to tmp do
68874: LD_ADDR_VAR 0 1
68878: PUSH
68879: DOUBLE
68880: LD_INT 1
68882: DEC
68883: ST_TO_ADDR
68884: LD_VAR 0 2
68888: PUSH
68889: FOR_TO
68890: IFFALSE 68917
// if Prob ( 60 ) then
68892: LD_INT 60
68894: PPUSH
68895: CALL_OW 13
68899: IFFALSE 68915
// SetSide ( i , side ) ;
68901: LD_VAR 0 1
68905: PPUSH
68906: LD_VAR 0 3
68910: PPUSH
68911: CALL_OW 235
68915: GO 68889
68917: POP
68918: POP
// end ;
68919: PPOPN 3
68921: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68922: LD_EXP 71
68926: PUSH
68927: LD_EXP 84
68931: AND
68932: IFFALSE 69051
68934: GO 68936
68936: DISABLE
68937: LD_INT 0
68939: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68940: LD_ADDR_VAR 0 1
68944: PUSH
68945: LD_INT 22
68947: PUSH
68948: LD_OWVAR 2
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 21
68959: PUSH
68960: LD_INT 1
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 3
68969: PUSH
68970: LD_INT 23
68972: PUSH
68973: LD_INT 0
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: LIST
68988: PPUSH
68989: CALL_OW 69
68993: PUSH
68994: FOR_IN
68995: IFFALSE 69049
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68997: LD_VAR 0 1
69001: PPUSH
69002: CALL_OW 257
69006: PUSH
69007: LD_INT 1
69009: PUSH
69010: LD_INT 2
69012: PUSH
69013: LD_INT 3
69015: PUSH
69016: LD_INT 4
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: IN
69025: IFFALSE 69047
// SetClass ( un , rand ( 1 , 4 ) ) ;
69027: LD_VAR 0 1
69031: PPUSH
69032: LD_INT 1
69034: PPUSH
69035: LD_INT 4
69037: PPUSH
69038: CALL_OW 12
69042: PPUSH
69043: CALL_OW 336
69047: GO 68994
69049: POP
69050: POP
// end ;
69051: PPOPN 1
69053: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
69054: LD_EXP 71
69058: PUSH
69059: LD_EXP 83
69063: AND
69064: IFFALSE 69143
69066: GO 69068
69068: DISABLE
69069: LD_INT 0
69071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69072: LD_ADDR_VAR 0 1
69076: PUSH
69077: LD_INT 22
69079: PUSH
69080: LD_OWVAR 2
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 21
69091: PUSH
69092: LD_INT 3
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PPUSH
69103: CALL_OW 69
69107: ST_TO_ADDR
// if not tmp then
69108: LD_VAR 0 1
69112: NOT
69113: IFFALSE 69117
// exit ;
69115: GO 69143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
69117: LD_VAR 0 1
69121: PUSH
69122: LD_INT 1
69124: PPUSH
69125: LD_VAR 0 1
69129: PPUSH
69130: CALL_OW 12
69134: ARRAY
69135: PPUSH
69136: LD_INT 100
69138: PPUSH
69139: CALL_OW 234
// end ;
69143: PPOPN 1
69145: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
69146: LD_EXP 71
69150: PUSH
69151: LD_EXP 85
69155: AND
69156: IFFALSE 69254
69158: GO 69160
69160: DISABLE
69161: LD_INT 0
69163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69164: LD_ADDR_VAR 0 1
69168: PUSH
69169: LD_INT 22
69171: PUSH
69172: LD_OWVAR 2
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 21
69183: PUSH
69184: LD_INT 1
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PPUSH
69195: CALL_OW 69
69199: ST_TO_ADDR
// if not tmp then
69200: LD_VAR 0 1
69204: NOT
69205: IFFALSE 69209
// exit ;
69207: GO 69254
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
69209: LD_VAR 0 1
69213: PUSH
69214: LD_INT 1
69216: PPUSH
69217: LD_VAR 0 1
69221: PPUSH
69222: CALL_OW 12
69226: ARRAY
69227: PPUSH
69228: LD_INT 1
69230: PPUSH
69231: LD_INT 4
69233: PPUSH
69234: CALL_OW 12
69238: PPUSH
69239: LD_INT 3000
69241: PPUSH
69242: LD_INT 9000
69244: PPUSH
69245: CALL_OW 12
69249: PPUSH
69250: CALL_OW 492
// end ;
69254: PPOPN 1
69256: END
// every 0 0$1 trigger StreamModeActive and sDepot do
69257: LD_EXP 71
69261: PUSH
69262: LD_EXP 86
69266: AND
69267: IFFALSE 69287
69269: GO 69271
69271: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
69272: LD_INT 1
69274: PPUSH
69275: LD_OWVAR 2
69279: PPUSH
69280: LD_INT 0
69282: PPUSH
69283: CALL_OW 324
69287: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
69288: LD_EXP 71
69292: PUSH
69293: LD_EXP 87
69297: AND
69298: IFFALSE 69381
69300: GO 69302
69302: DISABLE
69303: LD_INT 0
69305: PPUSH
69306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69307: LD_ADDR_VAR 0 2
69311: PUSH
69312: LD_INT 22
69314: PUSH
69315: LD_OWVAR 2
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 21
69326: PUSH
69327: LD_INT 3
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PPUSH
69338: CALL_OW 69
69342: ST_TO_ADDR
// if not tmp then
69343: LD_VAR 0 2
69347: NOT
69348: IFFALSE 69352
// exit ;
69350: GO 69381
// for i in tmp do
69352: LD_ADDR_VAR 0 1
69356: PUSH
69357: LD_VAR 0 2
69361: PUSH
69362: FOR_IN
69363: IFFALSE 69379
// SetBLevel ( i , 10 ) ;
69365: LD_VAR 0 1
69369: PPUSH
69370: LD_INT 10
69372: PPUSH
69373: CALL_OW 241
69377: GO 69362
69379: POP
69380: POP
// end ;
69381: PPOPN 2
69383: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
69384: LD_EXP 71
69388: PUSH
69389: LD_EXP 88
69393: AND
69394: IFFALSE 69505
69396: GO 69398
69398: DISABLE
69399: LD_INT 0
69401: PPUSH
69402: PPUSH
69403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69404: LD_ADDR_VAR 0 3
69408: PUSH
69409: LD_INT 22
69411: PUSH
69412: LD_OWVAR 2
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 25
69423: PUSH
69424: LD_INT 1
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PPUSH
69435: CALL_OW 69
69439: ST_TO_ADDR
// if not tmp then
69440: LD_VAR 0 3
69444: NOT
69445: IFFALSE 69449
// exit ;
69447: GO 69505
// un := tmp [ rand ( 1 , tmp ) ] ;
69449: LD_ADDR_VAR 0 2
69453: PUSH
69454: LD_VAR 0 3
69458: PUSH
69459: LD_INT 1
69461: PPUSH
69462: LD_VAR 0 3
69466: PPUSH
69467: CALL_OW 12
69471: ARRAY
69472: ST_TO_ADDR
// if Crawls ( un ) then
69473: LD_VAR 0 2
69477: PPUSH
69478: CALL_OW 318
69482: IFFALSE 69493
// ComWalk ( un ) ;
69484: LD_VAR 0 2
69488: PPUSH
69489: CALL_OW 138
// SetClass ( un , class_sniper ) ;
69493: LD_VAR 0 2
69497: PPUSH
69498: LD_INT 5
69500: PPUSH
69501: CALL_OW 336
// end ;
69505: PPOPN 3
69507: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
69508: LD_EXP 71
69512: PUSH
69513: LD_EXP 89
69517: AND
69518: PUSH
69519: LD_OWVAR 67
69523: PUSH
69524: LD_INT 3
69526: LESS
69527: AND
69528: IFFALSE 69547
69530: GO 69532
69532: DISABLE
// Difficulty := Difficulty + 1 ;
69533: LD_ADDR_OWVAR 67
69537: PUSH
69538: LD_OWVAR 67
69542: PUSH
69543: LD_INT 1
69545: PLUS
69546: ST_TO_ADDR
69547: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
69548: LD_EXP 71
69552: PUSH
69553: LD_EXP 90
69557: AND
69558: IFFALSE 69661
69560: GO 69562
69562: DISABLE
69563: LD_INT 0
69565: PPUSH
// begin for i := 1 to 5 do
69566: LD_ADDR_VAR 0 1
69570: PUSH
69571: DOUBLE
69572: LD_INT 1
69574: DEC
69575: ST_TO_ADDR
69576: LD_INT 5
69578: PUSH
69579: FOR_TO
69580: IFFALSE 69659
// begin uc_nation := nation_nature ;
69582: LD_ADDR_OWVAR 21
69586: PUSH
69587: LD_INT 0
69589: ST_TO_ADDR
// uc_side := 0 ;
69590: LD_ADDR_OWVAR 20
69594: PUSH
69595: LD_INT 0
69597: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69598: LD_ADDR_OWVAR 29
69602: PUSH
69603: LD_INT 12
69605: PUSH
69606: LD_INT 12
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: ST_TO_ADDR
// hc_agressivity := 20 ;
69613: LD_ADDR_OWVAR 35
69617: PUSH
69618: LD_INT 20
69620: ST_TO_ADDR
// hc_class := class_tiger ;
69621: LD_ADDR_OWVAR 28
69625: PUSH
69626: LD_INT 14
69628: ST_TO_ADDR
// hc_gallery :=  ;
69629: LD_ADDR_OWVAR 33
69633: PUSH
69634: LD_STRING 
69636: ST_TO_ADDR
// hc_name :=  ;
69637: LD_ADDR_OWVAR 26
69641: PUSH
69642: LD_STRING 
69644: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69645: CALL_OW 44
69649: PPUSH
69650: LD_INT 0
69652: PPUSH
69653: CALL_OW 51
// end ;
69657: GO 69579
69659: POP
69660: POP
// end ;
69661: PPOPN 1
69663: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69664: LD_EXP 71
69668: PUSH
69669: LD_EXP 91
69673: AND
69674: IFFALSE 69683
69676: GO 69678
69678: DISABLE
// StreamSibBomb ;
69679: CALL 69684 0 0
69683: END
// export function StreamSibBomb ; var i , x , y ; begin
69684: LD_INT 0
69686: PPUSH
69687: PPUSH
69688: PPUSH
69689: PPUSH
// result := false ;
69690: LD_ADDR_VAR 0 1
69694: PUSH
69695: LD_INT 0
69697: ST_TO_ADDR
// for i := 1 to 16 do
69698: LD_ADDR_VAR 0 2
69702: PUSH
69703: DOUBLE
69704: LD_INT 1
69706: DEC
69707: ST_TO_ADDR
69708: LD_INT 16
69710: PUSH
69711: FOR_TO
69712: IFFALSE 69911
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69714: LD_ADDR_VAR 0 3
69718: PUSH
69719: LD_INT 10
69721: PUSH
69722: LD_INT 20
69724: PUSH
69725: LD_INT 30
69727: PUSH
69728: LD_INT 40
69730: PUSH
69731: LD_INT 50
69733: PUSH
69734: LD_INT 60
69736: PUSH
69737: LD_INT 70
69739: PUSH
69740: LD_INT 80
69742: PUSH
69743: LD_INT 90
69745: PUSH
69746: LD_INT 100
69748: PUSH
69749: LD_INT 110
69751: PUSH
69752: LD_INT 120
69754: PUSH
69755: LD_INT 130
69757: PUSH
69758: LD_INT 140
69760: PUSH
69761: LD_INT 150
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 1
69783: PPUSH
69784: LD_INT 15
69786: PPUSH
69787: CALL_OW 12
69791: ARRAY
69792: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69793: LD_ADDR_VAR 0 4
69797: PUSH
69798: LD_INT 10
69800: PUSH
69801: LD_INT 20
69803: PUSH
69804: LD_INT 30
69806: PUSH
69807: LD_INT 40
69809: PUSH
69810: LD_INT 50
69812: PUSH
69813: LD_INT 60
69815: PUSH
69816: LD_INT 70
69818: PUSH
69819: LD_INT 80
69821: PUSH
69822: LD_INT 90
69824: PUSH
69825: LD_INT 100
69827: PUSH
69828: LD_INT 110
69830: PUSH
69831: LD_INT 120
69833: PUSH
69834: LD_INT 130
69836: PUSH
69837: LD_INT 140
69839: PUSH
69840: LD_INT 150
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 1
69862: PPUSH
69863: LD_INT 15
69865: PPUSH
69866: CALL_OW 12
69870: ARRAY
69871: ST_TO_ADDR
// if ValidHex ( x , y ) then
69872: LD_VAR 0 3
69876: PPUSH
69877: LD_VAR 0 4
69881: PPUSH
69882: CALL_OW 488
69886: IFFALSE 69909
// begin result := [ x , y ] ;
69888: LD_ADDR_VAR 0 1
69892: PUSH
69893: LD_VAR 0 3
69897: PUSH
69898: LD_VAR 0 4
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: ST_TO_ADDR
// break ;
69907: GO 69911
// end ; end ;
69909: GO 69711
69911: POP
69912: POP
// if result then
69913: LD_VAR 0 1
69917: IFFALSE 69977
// begin ToLua ( playSibBomb() ) ;
69919: LD_STRING playSibBomb()
69921: PPUSH
69922: CALL_OW 559
// wait ( 0 0$14 ) ;
69926: LD_INT 490
69928: PPUSH
69929: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69933: LD_VAR 0 1
69937: PUSH
69938: LD_INT 1
69940: ARRAY
69941: PPUSH
69942: LD_VAR 0 1
69946: PUSH
69947: LD_INT 2
69949: ARRAY
69950: PPUSH
69951: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69955: LD_VAR 0 1
69959: PUSH
69960: LD_INT 1
69962: ARRAY
69963: PPUSH
69964: LD_VAR 0 1
69968: PUSH
69969: LD_INT 2
69971: ARRAY
69972: PPUSH
69973: CALL_OW 429
// end ; end ;
69977: LD_VAR 0 1
69981: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69982: LD_EXP 71
69986: PUSH
69987: LD_EXP 93
69991: AND
69992: IFFALSE 70004
69994: GO 69996
69996: DISABLE
// YouLost (  ) ;
69997: LD_STRING 
69999: PPUSH
70000: CALL_OW 104
70004: END
// every 0 0$1 trigger StreamModeActive and sFog do
70005: LD_EXP 71
70009: PUSH
70010: LD_EXP 92
70014: AND
70015: IFFALSE 70029
70017: GO 70019
70019: DISABLE
// FogOff ( your_side ) ;
70020: LD_OWVAR 2
70024: PPUSH
70025: CALL_OW 344
70029: END
// every 0 0$1 trigger StreamModeActive and sSun do
70030: LD_EXP 71
70034: PUSH
70035: LD_EXP 94
70039: AND
70040: IFFALSE 70068
70042: GO 70044
70044: DISABLE
// begin solar_recharge_percent := 0 ;
70045: LD_ADDR_OWVAR 79
70049: PUSH
70050: LD_INT 0
70052: ST_TO_ADDR
// wait ( 5 5$00 ) ;
70053: LD_INT 10500
70055: PPUSH
70056: CALL_OW 67
// solar_recharge_percent := 100 ;
70060: LD_ADDR_OWVAR 79
70064: PUSH
70065: LD_INT 100
70067: ST_TO_ADDR
// end ;
70068: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
70069: LD_EXP 71
70073: PUSH
70074: LD_EXP 95
70078: AND
70079: IFFALSE 70318
70081: GO 70083
70083: DISABLE
70084: LD_INT 0
70086: PPUSH
70087: PPUSH
70088: PPUSH
// begin tmp := [ ] ;
70089: LD_ADDR_VAR 0 3
70093: PUSH
70094: EMPTY
70095: ST_TO_ADDR
// for i := 1 to 6 do
70096: LD_ADDR_VAR 0 1
70100: PUSH
70101: DOUBLE
70102: LD_INT 1
70104: DEC
70105: ST_TO_ADDR
70106: LD_INT 6
70108: PUSH
70109: FOR_TO
70110: IFFALSE 70215
// begin uc_nation := nation_nature ;
70112: LD_ADDR_OWVAR 21
70116: PUSH
70117: LD_INT 0
70119: ST_TO_ADDR
// uc_side := 0 ;
70120: LD_ADDR_OWVAR 20
70124: PUSH
70125: LD_INT 0
70127: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70128: LD_ADDR_OWVAR 29
70132: PUSH
70133: LD_INT 12
70135: PUSH
70136: LD_INT 12
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: ST_TO_ADDR
// hc_agressivity := 20 ;
70143: LD_ADDR_OWVAR 35
70147: PUSH
70148: LD_INT 20
70150: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
70151: LD_ADDR_OWVAR 28
70155: PUSH
70156: LD_INT 17
70158: ST_TO_ADDR
// hc_gallery :=  ;
70159: LD_ADDR_OWVAR 33
70163: PUSH
70164: LD_STRING 
70166: ST_TO_ADDR
// hc_name :=  ;
70167: LD_ADDR_OWVAR 26
70171: PUSH
70172: LD_STRING 
70174: ST_TO_ADDR
// un := CreateHuman ;
70175: LD_ADDR_VAR 0 2
70179: PUSH
70180: CALL_OW 44
70184: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
70185: LD_VAR 0 2
70189: PPUSH
70190: LD_INT 1
70192: PPUSH
70193: CALL_OW 51
// tmp := tmp ^ un ;
70197: LD_ADDR_VAR 0 3
70201: PUSH
70202: LD_VAR 0 3
70206: PUSH
70207: LD_VAR 0 2
70211: ADD
70212: ST_TO_ADDR
// end ;
70213: GO 70109
70215: POP
70216: POP
// repeat wait ( 0 0$1 ) ;
70217: LD_INT 35
70219: PPUSH
70220: CALL_OW 67
// for un in tmp do
70224: LD_ADDR_VAR 0 2
70228: PUSH
70229: LD_VAR 0 3
70233: PUSH
70234: FOR_IN
70235: IFFALSE 70309
// begin if IsDead ( un ) then
70237: LD_VAR 0 2
70241: PPUSH
70242: CALL_OW 301
70246: IFFALSE 70266
// begin tmp := tmp diff un ;
70248: LD_ADDR_VAR 0 3
70252: PUSH
70253: LD_VAR 0 3
70257: PUSH
70258: LD_VAR 0 2
70262: DIFF
70263: ST_TO_ADDR
// continue ;
70264: GO 70234
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
70266: LD_VAR 0 2
70270: PPUSH
70271: LD_INT 3
70273: PUSH
70274: LD_INT 22
70276: PUSH
70277: LD_INT 0
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PPUSH
70288: CALL_OW 69
70292: PPUSH
70293: LD_VAR 0 2
70297: PPUSH
70298: CALL_OW 74
70302: PPUSH
70303: CALL_OW 115
// end ;
70307: GO 70234
70309: POP
70310: POP
// until not tmp ;
70311: LD_VAR 0 3
70315: NOT
70316: IFFALSE 70217
// end ;
70318: PPOPN 3
70320: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70321: LD_EXP 71
70325: PUSH
70326: LD_EXP 96
70330: AND
70331: IFFALSE 70385
70333: GO 70335
70335: DISABLE
// begin ToLua ( displayTroll(); ) ;
70336: LD_STRING displayTroll();
70338: PPUSH
70339: CALL_OW 559
// wait ( 3 3$00 ) ;
70343: LD_INT 6300
70345: PPUSH
70346: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70350: LD_STRING hideTroll();
70352: PPUSH
70353: CALL_OW 559
// wait ( 1 1$00 ) ;
70357: LD_INT 2100
70359: PPUSH
70360: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70364: LD_STRING displayTroll();
70366: PPUSH
70367: CALL_OW 559
// wait ( 1 1$00 ) ;
70371: LD_INT 2100
70373: PPUSH
70374: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70378: LD_STRING hideTroll();
70380: PPUSH
70381: CALL_OW 559
// end ;
70385: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
70386: LD_EXP 71
70390: PUSH
70391: LD_EXP 97
70395: AND
70396: IFFALSE 70459
70398: GO 70400
70400: DISABLE
70401: LD_INT 0
70403: PPUSH
// begin p := 0 ;
70404: LD_ADDR_VAR 0 1
70408: PUSH
70409: LD_INT 0
70411: ST_TO_ADDR
// repeat game_speed := 1 ;
70412: LD_ADDR_OWVAR 65
70416: PUSH
70417: LD_INT 1
70419: ST_TO_ADDR
// wait ( 0 0$1 ) ;
70420: LD_INT 35
70422: PPUSH
70423: CALL_OW 67
// p := p + 1 ;
70427: LD_ADDR_VAR 0 1
70431: PUSH
70432: LD_VAR 0 1
70436: PUSH
70437: LD_INT 1
70439: PLUS
70440: ST_TO_ADDR
// until p >= 60 ;
70441: LD_VAR 0 1
70445: PUSH
70446: LD_INT 60
70448: GREATEREQUAL
70449: IFFALSE 70412
// game_speed := 4 ;
70451: LD_ADDR_OWVAR 65
70455: PUSH
70456: LD_INT 4
70458: ST_TO_ADDR
// end ;
70459: PPOPN 1
70461: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70462: LD_EXP 71
70466: PUSH
70467: LD_EXP 98
70471: AND
70472: IFFALSE 70618
70474: GO 70476
70476: DISABLE
70477: LD_INT 0
70479: PPUSH
70480: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70481: LD_ADDR_VAR 0 1
70485: PUSH
70486: LD_INT 22
70488: PUSH
70489: LD_OWVAR 2
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 2
70500: PUSH
70501: LD_INT 30
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 30
70513: PUSH
70514: LD_INT 1
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: LIST
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PPUSH
70530: CALL_OW 69
70534: ST_TO_ADDR
// if not depot then
70535: LD_VAR 0 1
70539: NOT
70540: IFFALSE 70544
// exit ;
70542: GO 70618
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
70544: LD_ADDR_VAR 0 2
70548: PUSH
70549: LD_VAR 0 1
70553: PUSH
70554: LD_INT 1
70556: PPUSH
70557: LD_VAR 0 1
70561: PPUSH
70562: CALL_OW 12
70566: ARRAY
70567: PPUSH
70568: CALL_OW 274
70572: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
70573: LD_VAR 0 2
70577: PPUSH
70578: LD_INT 1
70580: PPUSH
70581: LD_INT 0
70583: PPUSH
70584: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
70588: LD_VAR 0 2
70592: PPUSH
70593: LD_INT 2
70595: PPUSH
70596: LD_INT 0
70598: PPUSH
70599: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
70603: LD_VAR 0 2
70607: PPUSH
70608: LD_INT 3
70610: PPUSH
70611: LD_INT 0
70613: PPUSH
70614: CALL_OW 277
// end ;
70618: PPOPN 2
70620: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70621: LD_EXP 71
70625: PUSH
70626: LD_EXP 99
70630: AND
70631: IFFALSE 70728
70633: GO 70635
70635: DISABLE
70636: LD_INT 0
70638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70639: LD_ADDR_VAR 0 1
70643: PUSH
70644: LD_INT 22
70646: PUSH
70647: LD_OWVAR 2
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 21
70658: PUSH
70659: LD_INT 1
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 3
70668: PUSH
70669: LD_INT 23
70671: PUSH
70672: LD_INT 0
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: LIST
70687: PPUSH
70688: CALL_OW 69
70692: ST_TO_ADDR
// if not tmp then
70693: LD_VAR 0 1
70697: NOT
70698: IFFALSE 70702
// exit ;
70700: GO 70728
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70702: LD_VAR 0 1
70706: PUSH
70707: LD_INT 1
70709: PPUSH
70710: LD_VAR 0 1
70714: PPUSH
70715: CALL_OW 12
70719: ARRAY
70720: PPUSH
70721: LD_INT 200
70723: PPUSH
70724: CALL_OW 234
// end ;
70728: PPOPN 1
70730: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70731: LD_EXP 71
70735: PUSH
70736: LD_EXP 100
70740: AND
70741: IFFALSE 70820
70743: GO 70745
70745: DISABLE
70746: LD_INT 0
70748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70749: LD_ADDR_VAR 0 1
70753: PUSH
70754: LD_INT 22
70756: PUSH
70757: LD_OWVAR 2
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 21
70768: PUSH
70769: LD_INT 2
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PPUSH
70780: CALL_OW 69
70784: ST_TO_ADDR
// if not tmp then
70785: LD_VAR 0 1
70789: NOT
70790: IFFALSE 70794
// exit ;
70792: GO 70820
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70794: LD_VAR 0 1
70798: PUSH
70799: LD_INT 1
70801: PPUSH
70802: LD_VAR 0 1
70806: PPUSH
70807: CALL_OW 12
70811: ARRAY
70812: PPUSH
70813: LD_INT 60
70815: PPUSH
70816: CALL_OW 234
// end ;
70820: PPOPN 1
70822: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70823: LD_EXP 71
70827: PUSH
70828: LD_EXP 101
70832: AND
70833: IFFALSE 70932
70835: GO 70837
70837: DISABLE
70838: LD_INT 0
70840: PPUSH
70841: PPUSH
// begin enable ;
70842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70843: LD_ADDR_VAR 0 1
70847: PUSH
70848: LD_INT 22
70850: PUSH
70851: LD_OWVAR 2
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 61
70862: PUSH
70863: EMPTY
70864: LIST
70865: PUSH
70866: LD_INT 33
70868: PUSH
70869: LD_INT 2
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: LIST
70880: PPUSH
70881: CALL_OW 69
70885: ST_TO_ADDR
// if not tmp then
70886: LD_VAR 0 1
70890: NOT
70891: IFFALSE 70895
// exit ;
70893: GO 70932
// for i in tmp do
70895: LD_ADDR_VAR 0 2
70899: PUSH
70900: LD_VAR 0 1
70904: PUSH
70905: FOR_IN
70906: IFFALSE 70930
// if IsControledBy ( i ) then
70908: LD_VAR 0 2
70912: PPUSH
70913: CALL_OW 312
70917: IFFALSE 70928
// ComUnlink ( i ) ;
70919: LD_VAR 0 2
70923: PPUSH
70924: CALL_OW 136
70928: GO 70905
70930: POP
70931: POP
// end ;
70932: PPOPN 2
70934: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70935: LD_EXP 71
70939: PUSH
70940: LD_EXP 102
70944: AND
70945: IFFALSE 71085
70947: GO 70949
70949: DISABLE
70950: LD_INT 0
70952: PPUSH
70953: PPUSH
// begin ToLua ( displayPowell(); ) ;
70954: LD_STRING displayPowell();
70956: PPUSH
70957: CALL_OW 559
// uc_side := 0 ;
70961: LD_ADDR_OWVAR 20
70965: PUSH
70966: LD_INT 0
70968: ST_TO_ADDR
// uc_nation := 2 ;
70969: LD_ADDR_OWVAR 21
70973: PUSH
70974: LD_INT 2
70976: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70977: LD_ADDR_OWVAR 37
70981: PUSH
70982: LD_INT 14
70984: ST_TO_ADDR
// vc_engine := engine_siberite ;
70985: LD_ADDR_OWVAR 39
70989: PUSH
70990: LD_INT 3
70992: ST_TO_ADDR
// vc_control := control_apeman ;
70993: LD_ADDR_OWVAR 38
70997: PUSH
70998: LD_INT 5
71000: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
71001: LD_ADDR_OWVAR 40
71005: PUSH
71006: LD_INT 29
71008: ST_TO_ADDR
// un := CreateVehicle ;
71009: LD_ADDR_VAR 0 2
71013: PUSH
71014: CALL_OW 45
71018: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71019: LD_VAR 0 2
71023: PPUSH
71024: LD_INT 1
71026: PPUSH
71027: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71031: LD_INT 35
71033: PPUSH
71034: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71038: LD_VAR 0 2
71042: PPUSH
71043: LD_INT 22
71045: PUSH
71046: LD_OWVAR 2
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PPUSH
71055: CALL_OW 69
71059: PPUSH
71060: LD_VAR 0 2
71064: PPUSH
71065: CALL_OW 74
71069: PPUSH
71070: CALL_OW 115
// until IsDead ( un ) ;
71074: LD_VAR 0 2
71078: PPUSH
71079: CALL_OW 301
71083: IFFALSE 71031
// end ;
71085: PPOPN 2
71087: END
// every 0 0$1 trigger StreamModeActive and sStu do
71088: LD_EXP 71
71092: PUSH
71093: LD_EXP 110
71097: AND
71098: IFFALSE 71114
71100: GO 71102
71102: DISABLE
// begin ToLua ( displayStucuk(); ) ;
71103: LD_STRING displayStucuk();
71105: PPUSH
71106: CALL_OW 559
// ResetFog ;
71110: CALL_OW 335
// end ;
71114: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
71115: LD_EXP 71
71119: PUSH
71120: LD_EXP 103
71124: AND
71125: IFFALSE 71266
71127: GO 71129
71129: DISABLE
71130: LD_INT 0
71132: PPUSH
71133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71134: LD_ADDR_VAR 0 2
71138: PUSH
71139: LD_INT 22
71141: PUSH
71142: LD_OWVAR 2
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 21
71153: PUSH
71154: LD_INT 1
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PPUSH
71165: CALL_OW 69
71169: ST_TO_ADDR
// if not tmp then
71170: LD_VAR 0 2
71174: NOT
71175: IFFALSE 71179
// exit ;
71177: GO 71266
// un := tmp [ rand ( 1 , tmp ) ] ;
71179: LD_ADDR_VAR 0 1
71183: PUSH
71184: LD_VAR 0 2
71188: PUSH
71189: LD_INT 1
71191: PPUSH
71192: LD_VAR 0 2
71196: PPUSH
71197: CALL_OW 12
71201: ARRAY
71202: ST_TO_ADDR
// SetSide ( un , 0 ) ;
71203: LD_VAR 0 1
71207: PPUSH
71208: LD_INT 0
71210: PPUSH
71211: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
71215: LD_VAR 0 1
71219: PPUSH
71220: LD_OWVAR 3
71224: PUSH
71225: LD_VAR 0 1
71229: DIFF
71230: PPUSH
71231: LD_VAR 0 1
71235: PPUSH
71236: CALL_OW 74
71240: PPUSH
71241: CALL_OW 115
// wait ( 0 0$20 ) ;
71245: LD_INT 700
71247: PPUSH
71248: CALL_OW 67
// SetSide ( un , your_side ) ;
71252: LD_VAR 0 1
71256: PPUSH
71257: LD_OWVAR 2
71261: PPUSH
71262: CALL_OW 235
// end ;
71266: PPOPN 2
71268: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
71269: LD_EXP 71
71273: PUSH
71274: LD_EXP 104
71278: AND
71279: IFFALSE 71385
71281: GO 71283
71283: DISABLE
71284: LD_INT 0
71286: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71287: LD_ADDR_VAR 0 1
71291: PUSH
71292: LD_INT 22
71294: PUSH
71295: LD_OWVAR 2
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: LD_INT 2
71306: PUSH
71307: LD_INT 30
71309: PUSH
71310: LD_INT 0
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 30
71319: PUSH
71320: LD_INT 1
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: LIST
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PPUSH
71336: CALL_OW 69
71340: ST_TO_ADDR
// if not depot then
71341: LD_VAR 0 1
71345: NOT
71346: IFFALSE 71350
// exit ;
71348: GO 71385
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
71350: LD_VAR 0 1
71354: PUSH
71355: LD_INT 1
71357: ARRAY
71358: PPUSH
71359: CALL_OW 250
71363: PPUSH
71364: LD_VAR 0 1
71368: PUSH
71369: LD_INT 1
71371: ARRAY
71372: PPUSH
71373: CALL_OW 251
71377: PPUSH
71378: LD_INT 70
71380: PPUSH
71381: CALL_OW 495
// end ;
71385: PPOPN 1
71387: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
71388: LD_EXP 71
71392: PUSH
71393: LD_EXP 105
71397: AND
71398: IFFALSE 71609
71400: GO 71402
71402: DISABLE
71403: LD_INT 0
71405: PPUSH
71406: PPUSH
71407: PPUSH
71408: PPUSH
71409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71410: LD_ADDR_VAR 0 5
71414: PUSH
71415: LD_INT 22
71417: PUSH
71418: LD_OWVAR 2
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 21
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PPUSH
71441: CALL_OW 69
71445: ST_TO_ADDR
// if not tmp then
71446: LD_VAR 0 5
71450: NOT
71451: IFFALSE 71455
// exit ;
71453: GO 71609
// for i in tmp do
71455: LD_ADDR_VAR 0 1
71459: PUSH
71460: LD_VAR 0 5
71464: PUSH
71465: FOR_IN
71466: IFFALSE 71607
// begin d := rand ( 0 , 5 ) ;
71468: LD_ADDR_VAR 0 4
71472: PUSH
71473: LD_INT 0
71475: PPUSH
71476: LD_INT 5
71478: PPUSH
71479: CALL_OW 12
71483: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71484: LD_ADDR_VAR 0 2
71488: PUSH
71489: LD_VAR 0 1
71493: PPUSH
71494: CALL_OW 250
71498: PPUSH
71499: LD_VAR 0 4
71503: PPUSH
71504: LD_INT 3
71506: PPUSH
71507: LD_INT 12
71509: PPUSH
71510: CALL_OW 12
71514: PPUSH
71515: CALL_OW 272
71519: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
71520: LD_ADDR_VAR 0 3
71524: PUSH
71525: LD_VAR 0 1
71529: PPUSH
71530: CALL_OW 251
71534: PPUSH
71535: LD_VAR 0 4
71539: PPUSH
71540: LD_INT 3
71542: PPUSH
71543: LD_INT 12
71545: PPUSH
71546: CALL_OW 12
71550: PPUSH
71551: CALL_OW 273
71555: ST_TO_ADDR
// if ValidHex ( x , y ) then
71556: LD_VAR 0 2
71560: PPUSH
71561: LD_VAR 0 3
71565: PPUSH
71566: CALL_OW 488
71570: IFFALSE 71605
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
71572: LD_VAR 0 1
71576: PPUSH
71577: LD_VAR 0 2
71581: PPUSH
71582: LD_VAR 0 3
71586: PPUSH
71587: LD_INT 3
71589: PPUSH
71590: LD_INT 6
71592: PPUSH
71593: CALL_OW 12
71597: PPUSH
71598: LD_INT 1
71600: PPUSH
71601: CALL_OW 483
// end ;
71605: GO 71465
71607: POP
71608: POP
// end ;
71609: PPOPN 5
71611: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71612: LD_EXP 71
71616: PUSH
71617: LD_EXP 106
71621: AND
71622: IFFALSE 71716
71624: GO 71626
71626: DISABLE
71627: LD_INT 0
71629: PPUSH
71630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71631: LD_ADDR_VAR 0 2
71635: PUSH
71636: LD_INT 22
71638: PUSH
71639: LD_OWVAR 2
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 32
71650: PUSH
71651: LD_INT 1
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 21
71660: PUSH
71661: LD_INT 2
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: LIST
71672: PPUSH
71673: CALL_OW 69
71677: ST_TO_ADDR
// if not tmp then
71678: LD_VAR 0 2
71682: NOT
71683: IFFALSE 71687
// exit ;
71685: GO 71716
// for i in tmp do
71687: LD_ADDR_VAR 0 1
71691: PUSH
71692: LD_VAR 0 2
71696: PUSH
71697: FOR_IN
71698: IFFALSE 71714
// SetFuel ( i , 0 ) ;
71700: LD_VAR 0 1
71704: PPUSH
71705: LD_INT 0
71707: PPUSH
71708: CALL_OW 240
71712: GO 71697
71714: POP
71715: POP
// end ;
71716: PPOPN 2
71718: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71719: LD_EXP 71
71723: PUSH
71724: LD_EXP 107
71728: AND
71729: IFFALSE 71795
71731: GO 71733
71733: DISABLE
71734: LD_INT 0
71736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71737: LD_ADDR_VAR 0 1
71741: PUSH
71742: LD_INT 22
71744: PUSH
71745: LD_OWVAR 2
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 30
71756: PUSH
71757: LD_INT 29
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PPUSH
71768: CALL_OW 69
71772: ST_TO_ADDR
// if not tmp then
71773: LD_VAR 0 1
71777: NOT
71778: IFFALSE 71782
// exit ;
71780: GO 71795
// DestroyUnit ( tmp [ 1 ] ) ;
71782: LD_VAR 0 1
71786: PUSH
71787: LD_INT 1
71789: ARRAY
71790: PPUSH
71791: CALL_OW 65
// end ;
71795: PPOPN 1
71797: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71798: LD_EXP 71
71802: PUSH
71803: LD_EXP 109
71807: AND
71808: IFFALSE 71937
71810: GO 71812
71812: DISABLE
71813: LD_INT 0
71815: PPUSH
// begin uc_side := 0 ;
71816: LD_ADDR_OWVAR 20
71820: PUSH
71821: LD_INT 0
71823: ST_TO_ADDR
// uc_nation := nation_arabian ;
71824: LD_ADDR_OWVAR 21
71828: PUSH
71829: LD_INT 2
71831: ST_TO_ADDR
// hc_gallery :=  ;
71832: LD_ADDR_OWVAR 33
71836: PUSH
71837: LD_STRING 
71839: ST_TO_ADDR
// hc_name :=  ;
71840: LD_ADDR_OWVAR 26
71844: PUSH
71845: LD_STRING 
71847: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71848: LD_INT 1
71850: PPUSH
71851: LD_INT 11
71853: PPUSH
71854: LD_INT 10
71856: PPUSH
71857: CALL_OW 380
// un := CreateHuman ;
71861: LD_ADDR_VAR 0 1
71865: PUSH
71866: CALL_OW 44
71870: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71871: LD_VAR 0 1
71875: PPUSH
71876: LD_INT 1
71878: PPUSH
71879: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71883: LD_INT 35
71885: PPUSH
71886: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71890: LD_VAR 0 1
71894: PPUSH
71895: LD_INT 22
71897: PUSH
71898: LD_OWVAR 2
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PPUSH
71907: CALL_OW 69
71911: PPUSH
71912: LD_VAR 0 1
71916: PPUSH
71917: CALL_OW 74
71921: PPUSH
71922: CALL_OW 115
// until IsDead ( un ) ;
71926: LD_VAR 0 1
71930: PPUSH
71931: CALL_OW 301
71935: IFFALSE 71883
// end ;
71937: PPOPN 1
71939: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71940: LD_EXP 71
71944: PUSH
71945: LD_EXP 111
71949: AND
71950: IFFALSE 71962
71952: GO 71954
71954: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71955: LD_STRING earthquake(getX(game), 0, 32)
71957: PPUSH
71958: CALL_OW 559
71962: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71963: LD_EXP 71
71967: PUSH
71968: LD_EXP 112
71972: AND
71973: IFFALSE 72064
71975: GO 71977
71977: DISABLE
71978: LD_INT 0
71980: PPUSH
// begin enable ;
71981: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71982: LD_ADDR_VAR 0 1
71986: PUSH
71987: LD_INT 22
71989: PUSH
71990: LD_OWVAR 2
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 21
72001: PUSH
72002: LD_INT 2
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 33
72011: PUSH
72012: LD_INT 3
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: LIST
72023: PPUSH
72024: CALL_OW 69
72028: ST_TO_ADDR
// if not tmp then
72029: LD_VAR 0 1
72033: NOT
72034: IFFALSE 72038
// exit ;
72036: GO 72064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72038: LD_VAR 0 1
72042: PUSH
72043: LD_INT 1
72045: PPUSH
72046: LD_VAR 0 1
72050: PPUSH
72051: CALL_OW 12
72055: ARRAY
72056: PPUSH
72057: LD_INT 1
72059: PPUSH
72060: CALL_OW 234
// end ;
72064: PPOPN 1
72066: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
72067: LD_EXP 71
72071: PUSH
72072: LD_EXP 113
72076: AND
72077: IFFALSE 72218
72079: GO 72081
72081: DISABLE
72082: LD_INT 0
72084: PPUSH
72085: PPUSH
72086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72087: LD_ADDR_VAR 0 3
72091: PUSH
72092: LD_INT 22
72094: PUSH
72095: LD_OWVAR 2
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 25
72106: PUSH
72107: LD_INT 1
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PPUSH
72118: CALL_OW 69
72122: ST_TO_ADDR
// if not tmp then
72123: LD_VAR 0 3
72127: NOT
72128: IFFALSE 72132
// exit ;
72130: GO 72218
// un := tmp [ rand ( 1 , tmp ) ] ;
72132: LD_ADDR_VAR 0 2
72136: PUSH
72137: LD_VAR 0 3
72141: PUSH
72142: LD_INT 1
72144: PPUSH
72145: LD_VAR 0 3
72149: PPUSH
72150: CALL_OW 12
72154: ARRAY
72155: ST_TO_ADDR
// if Crawls ( un ) then
72156: LD_VAR 0 2
72160: PPUSH
72161: CALL_OW 318
72165: IFFALSE 72176
// ComWalk ( un ) ;
72167: LD_VAR 0 2
72171: PPUSH
72172: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
72176: LD_VAR 0 2
72180: PPUSH
72181: LD_INT 9
72183: PPUSH
72184: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
72188: LD_INT 28
72190: PPUSH
72191: LD_OWVAR 2
72195: PPUSH
72196: LD_INT 2
72198: PPUSH
72199: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
72203: LD_INT 29
72205: PPUSH
72206: LD_OWVAR 2
72210: PPUSH
72211: LD_INT 2
72213: PPUSH
72214: CALL_OW 322
// end ;
72218: PPOPN 3
72220: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
72221: LD_EXP 71
72225: PUSH
72226: LD_EXP 114
72230: AND
72231: IFFALSE 72342
72233: GO 72235
72235: DISABLE
72236: LD_INT 0
72238: PPUSH
72239: PPUSH
72240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72241: LD_ADDR_VAR 0 3
72245: PUSH
72246: LD_INT 22
72248: PUSH
72249: LD_OWVAR 2
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 25
72260: PUSH
72261: LD_INT 1
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PPUSH
72272: CALL_OW 69
72276: ST_TO_ADDR
// if not tmp then
72277: LD_VAR 0 3
72281: NOT
72282: IFFALSE 72286
// exit ;
72284: GO 72342
// un := tmp [ rand ( 1 , tmp ) ] ;
72286: LD_ADDR_VAR 0 2
72290: PUSH
72291: LD_VAR 0 3
72295: PUSH
72296: LD_INT 1
72298: PPUSH
72299: LD_VAR 0 3
72303: PPUSH
72304: CALL_OW 12
72308: ARRAY
72309: ST_TO_ADDR
// if Crawls ( un ) then
72310: LD_VAR 0 2
72314: PPUSH
72315: CALL_OW 318
72319: IFFALSE 72330
// ComWalk ( un ) ;
72321: LD_VAR 0 2
72325: PPUSH
72326: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72330: LD_VAR 0 2
72334: PPUSH
72335: LD_INT 8
72337: PPUSH
72338: CALL_OW 336
// end ;
72342: PPOPN 3
72344: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
72345: LD_EXP 71
72349: PUSH
72350: LD_EXP 115
72354: AND
72355: IFFALSE 72499
72357: GO 72359
72359: DISABLE
72360: LD_INT 0
72362: PPUSH
72363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72364: LD_ADDR_VAR 0 2
72368: PUSH
72369: LD_INT 22
72371: PUSH
72372: LD_OWVAR 2
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 21
72383: PUSH
72384: LD_INT 2
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 2
72393: PUSH
72394: LD_INT 34
72396: PUSH
72397: LD_INT 12
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PUSH
72404: LD_INT 34
72406: PUSH
72407: LD_INT 51
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: LD_INT 34
72416: PUSH
72417: LD_INT 32
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: LIST
72434: PPUSH
72435: CALL_OW 69
72439: ST_TO_ADDR
// if not tmp then
72440: LD_VAR 0 2
72444: NOT
72445: IFFALSE 72449
// exit ;
72447: GO 72499
// for i in tmp do
72449: LD_ADDR_VAR 0 1
72453: PUSH
72454: LD_VAR 0 2
72458: PUSH
72459: FOR_IN
72460: IFFALSE 72497
// if GetCargo ( i , mat_artifact ) = 0 then
72462: LD_VAR 0 1
72466: PPUSH
72467: LD_INT 4
72469: PPUSH
72470: CALL_OW 289
72474: PUSH
72475: LD_INT 0
72477: EQUAL
72478: IFFALSE 72495
// SetCargo ( i , mat_siberit , 100 ) ;
72480: LD_VAR 0 1
72484: PPUSH
72485: LD_INT 3
72487: PPUSH
72488: LD_INT 100
72490: PPUSH
72491: CALL_OW 290
72495: GO 72459
72497: POP
72498: POP
// end ;
72499: PPOPN 2
72501: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
72502: LD_EXP 71
72506: PUSH
72507: LD_EXP 116
72511: AND
72512: IFFALSE 72695
72514: GO 72516
72516: DISABLE
72517: LD_INT 0
72519: PPUSH
72520: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72521: LD_ADDR_VAR 0 2
72525: PUSH
72526: LD_INT 22
72528: PUSH
72529: LD_OWVAR 2
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PPUSH
72538: CALL_OW 69
72542: ST_TO_ADDR
// if not tmp then
72543: LD_VAR 0 2
72547: NOT
72548: IFFALSE 72552
// exit ;
72550: GO 72695
// for i := 1 to 2 do
72552: LD_ADDR_VAR 0 1
72556: PUSH
72557: DOUBLE
72558: LD_INT 1
72560: DEC
72561: ST_TO_ADDR
72562: LD_INT 2
72564: PUSH
72565: FOR_TO
72566: IFFALSE 72693
// begin uc_side := your_side ;
72568: LD_ADDR_OWVAR 20
72572: PUSH
72573: LD_OWVAR 2
72577: ST_TO_ADDR
// uc_nation := nation_american ;
72578: LD_ADDR_OWVAR 21
72582: PUSH
72583: LD_INT 1
72585: ST_TO_ADDR
// vc_chassis := us_morphling ;
72586: LD_ADDR_OWVAR 37
72590: PUSH
72591: LD_INT 5
72593: ST_TO_ADDR
// vc_engine := engine_siberite ;
72594: LD_ADDR_OWVAR 39
72598: PUSH
72599: LD_INT 3
72601: ST_TO_ADDR
// vc_control := control_computer ;
72602: LD_ADDR_OWVAR 38
72606: PUSH
72607: LD_INT 3
72609: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72610: LD_ADDR_OWVAR 40
72614: PUSH
72615: LD_INT 10
72617: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72618: LD_VAR 0 2
72622: PUSH
72623: LD_INT 1
72625: ARRAY
72626: PPUSH
72627: CALL_OW 310
72631: NOT
72632: IFFALSE 72679
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72634: CALL_OW 45
72638: PPUSH
72639: LD_VAR 0 2
72643: PUSH
72644: LD_INT 1
72646: ARRAY
72647: PPUSH
72648: CALL_OW 250
72652: PPUSH
72653: LD_VAR 0 2
72657: PUSH
72658: LD_INT 1
72660: ARRAY
72661: PPUSH
72662: CALL_OW 251
72666: PPUSH
72667: LD_INT 12
72669: PPUSH
72670: LD_INT 1
72672: PPUSH
72673: CALL_OW 50
72677: GO 72691
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72679: CALL_OW 45
72683: PPUSH
72684: LD_INT 1
72686: PPUSH
72687: CALL_OW 51
// end ;
72691: GO 72565
72693: POP
72694: POP
// end ;
72695: PPOPN 2
72697: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72698: LD_EXP 71
72702: PUSH
72703: LD_EXP 117
72707: AND
72708: IFFALSE 72930
72710: GO 72712
72712: DISABLE
72713: LD_INT 0
72715: PPUSH
72716: PPUSH
72717: PPUSH
72718: PPUSH
72719: PPUSH
72720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72721: LD_ADDR_VAR 0 6
72725: PUSH
72726: LD_INT 22
72728: PUSH
72729: LD_OWVAR 2
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 21
72740: PUSH
72741: LD_INT 1
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 3
72750: PUSH
72751: LD_INT 23
72753: PUSH
72754: LD_INT 0
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: LIST
72769: PPUSH
72770: CALL_OW 69
72774: ST_TO_ADDR
// if not tmp then
72775: LD_VAR 0 6
72779: NOT
72780: IFFALSE 72784
// exit ;
72782: GO 72930
// s1 := rand ( 1 , 4 ) ;
72784: LD_ADDR_VAR 0 2
72788: PUSH
72789: LD_INT 1
72791: PPUSH
72792: LD_INT 4
72794: PPUSH
72795: CALL_OW 12
72799: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72800: LD_ADDR_VAR 0 4
72804: PUSH
72805: LD_VAR 0 6
72809: PUSH
72810: LD_INT 1
72812: ARRAY
72813: PPUSH
72814: LD_VAR 0 2
72818: PPUSH
72819: CALL_OW 259
72823: ST_TO_ADDR
// if s1 = 1 then
72824: LD_VAR 0 2
72828: PUSH
72829: LD_INT 1
72831: EQUAL
72832: IFFALSE 72852
// s2 := rand ( 2 , 4 ) else
72834: LD_ADDR_VAR 0 3
72838: PUSH
72839: LD_INT 2
72841: PPUSH
72842: LD_INT 4
72844: PPUSH
72845: CALL_OW 12
72849: ST_TO_ADDR
72850: GO 72860
// s2 := 1 ;
72852: LD_ADDR_VAR 0 3
72856: PUSH
72857: LD_INT 1
72859: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72860: LD_ADDR_VAR 0 5
72864: PUSH
72865: LD_VAR 0 6
72869: PUSH
72870: LD_INT 1
72872: ARRAY
72873: PPUSH
72874: LD_VAR 0 3
72878: PPUSH
72879: CALL_OW 259
72883: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72884: LD_VAR 0 6
72888: PUSH
72889: LD_INT 1
72891: ARRAY
72892: PPUSH
72893: LD_VAR 0 2
72897: PPUSH
72898: LD_VAR 0 5
72902: PPUSH
72903: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72907: LD_VAR 0 6
72911: PUSH
72912: LD_INT 1
72914: ARRAY
72915: PPUSH
72916: LD_VAR 0 3
72920: PPUSH
72921: LD_VAR 0 4
72925: PPUSH
72926: CALL_OW 237
// end ;
72930: PPOPN 6
72932: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72933: LD_EXP 71
72937: PUSH
72938: LD_EXP 118
72942: AND
72943: IFFALSE 73022
72945: GO 72947
72947: DISABLE
72948: LD_INT 0
72950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72951: LD_ADDR_VAR 0 1
72955: PUSH
72956: LD_INT 22
72958: PUSH
72959: LD_OWVAR 2
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 30
72970: PUSH
72971: LD_INT 3
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PPUSH
72982: CALL_OW 69
72986: ST_TO_ADDR
// if not tmp then
72987: LD_VAR 0 1
72991: NOT
72992: IFFALSE 72996
// exit ;
72994: GO 73022
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72996: LD_VAR 0 1
73000: PUSH
73001: LD_INT 1
73003: PPUSH
73004: LD_VAR 0 1
73008: PPUSH
73009: CALL_OW 12
73013: ARRAY
73014: PPUSH
73015: LD_INT 1
73017: PPUSH
73018: CALL_OW 234
// end ;
73022: PPOPN 1
73024: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
73025: LD_EXP 71
73029: PUSH
73030: LD_EXP 119
73034: AND
73035: IFFALSE 73147
73037: GO 73039
73039: DISABLE
73040: LD_INT 0
73042: PPUSH
73043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
73044: LD_ADDR_VAR 0 2
73048: PUSH
73049: LD_INT 22
73051: PUSH
73052: LD_OWVAR 2
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 2
73063: PUSH
73064: LD_INT 30
73066: PUSH
73067: LD_INT 27
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 30
73076: PUSH
73077: LD_INT 26
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 30
73086: PUSH
73087: LD_INT 28
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PPUSH
73104: CALL_OW 69
73108: ST_TO_ADDR
// if not tmp then
73109: LD_VAR 0 2
73113: NOT
73114: IFFALSE 73118
// exit ;
73116: GO 73147
// for i in tmp do
73118: LD_ADDR_VAR 0 1
73122: PUSH
73123: LD_VAR 0 2
73127: PUSH
73128: FOR_IN
73129: IFFALSE 73145
// SetLives ( i , 1 ) ;
73131: LD_VAR 0 1
73135: PPUSH
73136: LD_INT 1
73138: PPUSH
73139: CALL_OW 234
73143: GO 73128
73145: POP
73146: POP
// end ;
73147: PPOPN 2
73149: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
73150: LD_EXP 71
73154: PUSH
73155: LD_EXP 120
73159: AND
73160: IFFALSE 73434
73162: GO 73164
73164: DISABLE
73165: LD_INT 0
73167: PPUSH
73168: PPUSH
73169: PPUSH
// begin i := rand ( 1 , 7 ) ;
73170: LD_ADDR_VAR 0 1
73174: PUSH
73175: LD_INT 1
73177: PPUSH
73178: LD_INT 7
73180: PPUSH
73181: CALL_OW 12
73185: ST_TO_ADDR
// case i of 1 :
73186: LD_VAR 0 1
73190: PUSH
73191: LD_INT 1
73193: DOUBLE
73194: EQUAL
73195: IFTRUE 73199
73197: GO 73209
73199: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
73200: LD_STRING earthquake(getX(game), 0, 32)
73202: PPUSH
73203: CALL_OW 559
73207: GO 73434
73209: LD_INT 2
73211: DOUBLE
73212: EQUAL
73213: IFTRUE 73217
73215: GO 73231
73217: POP
// begin ToLua ( displayStucuk(); ) ;
73218: LD_STRING displayStucuk();
73220: PPUSH
73221: CALL_OW 559
// ResetFog ;
73225: CALL_OW 335
// end ; 3 :
73229: GO 73434
73231: LD_INT 3
73233: DOUBLE
73234: EQUAL
73235: IFTRUE 73239
73237: GO 73343
73239: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73240: LD_ADDR_VAR 0 2
73244: PUSH
73245: LD_INT 22
73247: PUSH
73248: LD_OWVAR 2
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_INT 25
73259: PUSH
73260: LD_INT 1
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PPUSH
73271: CALL_OW 69
73275: ST_TO_ADDR
// if not tmp then
73276: LD_VAR 0 2
73280: NOT
73281: IFFALSE 73285
// exit ;
73283: GO 73434
// un := tmp [ rand ( 1 , tmp ) ] ;
73285: LD_ADDR_VAR 0 3
73289: PUSH
73290: LD_VAR 0 2
73294: PUSH
73295: LD_INT 1
73297: PPUSH
73298: LD_VAR 0 2
73302: PPUSH
73303: CALL_OW 12
73307: ARRAY
73308: ST_TO_ADDR
// if Crawls ( un ) then
73309: LD_VAR 0 3
73313: PPUSH
73314: CALL_OW 318
73318: IFFALSE 73329
// ComWalk ( un ) ;
73320: LD_VAR 0 3
73324: PPUSH
73325: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73329: LD_VAR 0 3
73333: PPUSH
73334: LD_INT 8
73336: PPUSH
73337: CALL_OW 336
// end ; 4 :
73341: GO 73434
73343: LD_INT 4
73345: DOUBLE
73346: EQUAL
73347: IFTRUE 73351
73349: GO 73412
73351: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73352: LD_ADDR_VAR 0 2
73356: PUSH
73357: LD_INT 22
73359: PUSH
73360: LD_OWVAR 2
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: LD_INT 30
73371: PUSH
73372: LD_INT 29
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PPUSH
73383: CALL_OW 69
73387: ST_TO_ADDR
// if not tmp then
73388: LD_VAR 0 2
73392: NOT
73393: IFFALSE 73397
// exit ;
73395: GO 73434
// DestroyUnit ( tmp [ 1 ] ) ;
73397: LD_VAR 0 2
73401: PUSH
73402: LD_INT 1
73404: ARRAY
73405: PPUSH
73406: CALL_OW 65
// end ; 5 .. 7 :
73410: GO 73434
73412: LD_INT 5
73414: DOUBLE
73415: GREATEREQUAL
73416: IFFALSE 73424
73418: LD_INT 7
73420: DOUBLE
73421: LESSEQUAL
73422: IFTRUE 73426
73424: GO 73433
73426: POP
// StreamSibBomb ; end ;
73427: CALL 69684 0 0
73431: GO 73434
73433: POP
// end ;
73434: PPOPN 3
73436: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
73437: LD_EXP 71
73441: PUSH
73442: LD_EXP 121
73446: AND
73447: IFFALSE 73603
73449: GO 73451
73451: DISABLE
73452: LD_INT 0
73454: PPUSH
73455: PPUSH
73456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73457: LD_ADDR_VAR 0 2
73461: PUSH
73462: LD_INT 81
73464: PUSH
73465: LD_OWVAR 2
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 2
73476: PUSH
73477: LD_INT 21
73479: PUSH
73480: LD_INT 1
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PUSH
73487: LD_INT 21
73489: PUSH
73490: LD_INT 2
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: LIST
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PPUSH
73506: CALL_OW 69
73510: ST_TO_ADDR
// if not tmp then
73511: LD_VAR 0 2
73515: NOT
73516: IFFALSE 73520
// exit ;
73518: GO 73603
// p := 0 ;
73520: LD_ADDR_VAR 0 3
73524: PUSH
73525: LD_INT 0
73527: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73528: LD_INT 35
73530: PPUSH
73531: CALL_OW 67
// p := p + 1 ;
73535: LD_ADDR_VAR 0 3
73539: PUSH
73540: LD_VAR 0 3
73544: PUSH
73545: LD_INT 1
73547: PLUS
73548: ST_TO_ADDR
// for i in tmp do
73549: LD_ADDR_VAR 0 1
73553: PUSH
73554: LD_VAR 0 2
73558: PUSH
73559: FOR_IN
73560: IFFALSE 73591
// if GetLives ( i ) < 1000 then
73562: LD_VAR 0 1
73566: PPUSH
73567: CALL_OW 256
73571: PUSH
73572: LD_INT 1000
73574: LESS
73575: IFFALSE 73589
// SetLives ( i , 1000 ) ;
73577: LD_VAR 0 1
73581: PPUSH
73582: LD_INT 1000
73584: PPUSH
73585: CALL_OW 234
73589: GO 73559
73591: POP
73592: POP
// until p > 20 ;
73593: LD_VAR 0 3
73597: PUSH
73598: LD_INT 20
73600: GREATER
73601: IFFALSE 73528
// end ;
73603: PPOPN 3
73605: END
// every 0 0$1 trigger StreamModeActive and sTime do
73606: LD_EXP 71
73610: PUSH
73611: LD_EXP 122
73615: AND
73616: IFFALSE 73651
73618: GO 73620
73620: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73621: LD_INT 28
73623: PPUSH
73624: LD_OWVAR 2
73628: PPUSH
73629: LD_INT 2
73631: PPUSH
73632: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73636: LD_INT 30
73638: PPUSH
73639: LD_OWVAR 2
73643: PPUSH
73644: LD_INT 2
73646: PPUSH
73647: CALL_OW 322
// end ;
73651: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73652: LD_EXP 71
73656: PUSH
73657: LD_EXP 123
73661: AND
73662: IFFALSE 73783
73664: GO 73666
73666: DISABLE
73667: LD_INT 0
73669: PPUSH
73670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73671: LD_ADDR_VAR 0 2
73675: PUSH
73676: LD_INT 22
73678: PUSH
73679: LD_OWVAR 2
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 21
73690: PUSH
73691: LD_INT 1
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 3
73700: PUSH
73701: LD_INT 23
73703: PUSH
73704: LD_INT 0
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: PUSH
73715: EMPTY
73716: LIST
73717: LIST
73718: LIST
73719: PPUSH
73720: CALL_OW 69
73724: ST_TO_ADDR
// if not tmp then
73725: LD_VAR 0 2
73729: NOT
73730: IFFALSE 73734
// exit ;
73732: GO 73783
// for i in tmp do
73734: LD_ADDR_VAR 0 1
73738: PUSH
73739: LD_VAR 0 2
73743: PUSH
73744: FOR_IN
73745: IFFALSE 73781
// begin if Crawls ( i ) then
73747: LD_VAR 0 1
73751: PPUSH
73752: CALL_OW 318
73756: IFFALSE 73767
// ComWalk ( i ) ;
73758: LD_VAR 0 1
73762: PPUSH
73763: CALL_OW 138
// SetClass ( i , 2 ) ;
73767: LD_VAR 0 1
73771: PPUSH
73772: LD_INT 2
73774: PPUSH
73775: CALL_OW 336
// end ;
73779: GO 73744
73781: POP
73782: POP
// end ;
73783: PPOPN 2
73785: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73786: LD_EXP 71
73790: PUSH
73791: LD_EXP 124
73795: AND
73796: IFFALSE 74077
73798: GO 73800
73800: DISABLE
73801: LD_INT 0
73803: PPUSH
73804: PPUSH
73805: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73806: LD_OWVAR 2
73810: PPUSH
73811: LD_INT 9
73813: PPUSH
73814: LD_INT 1
73816: PPUSH
73817: LD_INT 1
73819: PPUSH
73820: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73824: LD_INT 9
73826: PPUSH
73827: LD_OWVAR 2
73831: PPUSH
73832: CALL_OW 343
// uc_side := 9 ;
73836: LD_ADDR_OWVAR 20
73840: PUSH
73841: LD_INT 9
73843: ST_TO_ADDR
// uc_nation := 2 ;
73844: LD_ADDR_OWVAR 21
73848: PUSH
73849: LD_INT 2
73851: ST_TO_ADDR
// hc_name := Dark Warrior ;
73852: LD_ADDR_OWVAR 26
73856: PUSH
73857: LD_STRING Dark Warrior
73859: ST_TO_ADDR
// hc_gallery :=  ;
73860: LD_ADDR_OWVAR 33
73864: PUSH
73865: LD_STRING 
73867: ST_TO_ADDR
// hc_noskilllimit := true ;
73868: LD_ADDR_OWVAR 76
73872: PUSH
73873: LD_INT 1
73875: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73876: LD_ADDR_OWVAR 31
73880: PUSH
73881: LD_INT 30
73883: PUSH
73884: LD_INT 30
73886: PUSH
73887: LD_INT 30
73889: PUSH
73890: LD_INT 30
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: ST_TO_ADDR
// un := CreateHuman ;
73899: LD_ADDR_VAR 0 3
73903: PUSH
73904: CALL_OW 44
73908: ST_TO_ADDR
// hc_noskilllimit := false ;
73909: LD_ADDR_OWVAR 76
73913: PUSH
73914: LD_INT 0
73916: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73917: LD_VAR 0 3
73921: PPUSH
73922: LD_INT 1
73924: PPUSH
73925: CALL_OW 51
// p := 0 ;
73929: LD_ADDR_VAR 0 2
73933: PUSH
73934: LD_INT 0
73936: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73937: LD_INT 35
73939: PPUSH
73940: CALL_OW 67
// p := p + 1 ;
73944: LD_ADDR_VAR 0 2
73948: PUSH
73949: LD_VAR 0 2
73953: PUSH
73954: LD_INT 1
73956: PLUS
73957: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73958: LD_VAR 0 3
73962: PPUSH
73963: CALL_OW 256
73967: PUSH
73968: LD_INT 1000
73970: LESS
73971: IFFALSE 73985
// SetLives ( un , 1000 ) ;
73973: LD_VAR 0 3
73977: PPUSH
73978: LD_INT 1000
73980: PPUSH
73981: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73985: LD_VAR 0 3
73989: PPUSH
73990: LD_INT 81
73992: PUSH
73993: LD_OWVAR 2
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 91
74004: PUSH
74005: LD_VAR 0 3
74009: PUSH
74010: LD_INT 30
74012: PUSH
74013: EMPTY
74014: LIST
74015: LIST
74016: LIST
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PPUSH
74022: CALL_OW 69
74026: PPUSH
74027: LD_VAR 0 3
74031: PPUSH
74032: CALL_OW 74
74036: PPUSH
74037: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
74041: LD_VAR 0 2
74045: PUSH
74046: LD_INT 60
74048: GREATER
74049: PUSH
74050: LD_VAR 0 3
74054: PPUSH
74055: CALL_OW 301
74059: OR
74060: IFFALSE 73937
// if un then
74062: LD_VAR 0 3
74066: IFFALSE 74077
// RemoveUnit ( un ) ;
74068: LD_VAR 0 3
74072: PPUSH
74073: CALL_OW 64
// end ;
74077: PPOPN 3
74079: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74080: LD_INT 0
74082: PPUSH
// case cmd of 301 :
74083: LD_VAR 0 1
74087: PUSH
74088: LD_INT 301
74090: DOUBLE
74091: EQUAL
74092: IFTRUE 74096
74094: GO 74128
74096: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74097: LD_VAR 0 6
74101: PPUSH
74102: LD_VAR 0 7
74106: PPUSH
74107: LD_VAR 0 8
74111: PPUSH
74112: LD_VAR 0 4
74116: PPUSH
74117: LD_VAR 0 5
74121: PPUSH
74122: CALL 75329 0 5
74126: GO 74249
74128: LD_INT 302
74130: DOUBLE
74131: EQUAL
74132: IFTRUE 74136
74134: GO 74173
74136: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74137: LD_VAR 0 6
74141: PPUSH
74142: LD_VAR 0 7
74146: PPUSH
74147: LD_VAR 0 8
74151: PPUSH
74152: LD_VAR 0 9
74156: PPUSH
74157: LD_VAR 0 4
74161: PPUSH
74162: LD_VAR 0 5
74166: PPUSH
74167: CALL 75420 0 6
74171: GO 74249
74173: LD_INT 303
74175: DOUBLE
74176: EQUAL
74177: IFTRUE 74181
74179: GO 74218
74181: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74182: LD_VAR 0 6
74186: PPUSH
74187: LD_VAR 0 7
74191: PPUSH
74192: LD_VAR 0 8
74196: PPUSH
74197: LD_VAR 0 9
74201: PPUSH
74202: LD_VAR 0 4
74206: PPUSH
74207: LD_VAR 0 5
74211: PPUSH
74212: CALL 74254 0 6
74216: GO 74249
74218: LD_INT 304
74220: DOUBLE
74221: EQUAL
74222: IFTRUE 74226
74224: GO 74248
74226: POP
// hHackTeleport ( unit , x , y ) ; end ;
74227: LD_VAR 0 2
74231: PPUSH
74232: LD_VAR 0 4
74236: PPUSH
74237: LD_VAR 0 5
74241: PPUSH
74242: CALL 76013 0 3
74246: GO 74249
74248: POP
// end ;
74249: LD_VAR 0 12
74253: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74254: LD_INT 0
74256: PPUSH
74257: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74258: LD_VAR 0 1
74262: PUSH
74263: LD_INT 1
74265: LESS
74266: PUSH
74267: LD_VAR 0 1
74271: PUSH
74272: LD_INT 3
74274: GREATER
74275: OR
74276: PUSH
74277: LD_VAR 0 5
74281: PPUSH
74282: LD_VAR 0 6
74286: PPUSH
74287: CALL_OW 428
74291: OR
74292: IFFALSE 74296
// exit ;
74294: GO 75016
// uc_side := your_side ;
74296: LD_ADDR_OWVAR 20
74300: PUSH
74301: LD_OWVAR 2
74305: ST_TO_ADDR
// uc_nation := nation ;
74306: LD_ADDR_OWVAR 21
74310: PUSH
74311: LD_VAR 0 1
74315: ST_TO_ADDR
// bc_level = 1 ;
74316: LD_ADDR_OWVAR 43
74320: PUSH
74321: LD_INT 1
74323: ST_TO_ADDR
// case btype of 1 :
74324: LD_VAR 0 2
74328: PUSH
74329: LD_INT 1
74331: DOUBLE
74332: EQUAL
74333: IFTRUE 74337
74335: GO 74348
74337: POP
// bc_type := b_depot ; 2 :
74338: LD_ADDR_OWVAR 42
74342: PUSH
74343: LD_INT 0
74345: ST_TO_ADDR
74346: GO 74960
74348: LD_INT 2
74350: DOUBLE
74351: EQUAL
74352: IFTRUE 74356
74354: GO 74367
74356: POP
// bc_type := b_warehouse ; 3 :
74357: LD_ADDR_OWVAR 42
74361: PUSH
74362: LD_INT 1
74364: ST_TO_ADDR
74365: GO 74960
74367: LD_INT 3
74369: DOUBLE
74370: EQUAL
74371: IFTRUE 74375
74373: GO 74386
74375: POP
// bc_type := b_lab ; 4 .. 9 :
74376: LD_ADDR_OWVAR 42
74380: PUSH
74381: LD_INT 6
74383: ST_TO_ADDR
74384: GO 74960
74386: LD_INT 4
74388: DOUBLE
74389: GREATEREQUAL
74390: IFFALSE 74398
74392: LD_INT 9
74394: DOUBLE
74395: LESSEQUAL
74396: IFTRUE 74400
74398: GO 74452
74400: POP
// begin bc_type := b_lab_half ;
74401: LD_ADDR_OWVAR 42
74405: PUSH
74406: LD_INT 7
74408: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74409: LD_ADDR_OWVAR 44
74413: PUSH
74414: LD_INT 10
74416: PUSH
74417: LD_INT 11
74419: PUSH
74420: LD_INT 12
74422: PUSH
74423: LD_INT 15
74425: PUSH
74426: LD_INT 14
74428: PUSH
74429: LD_INT 13
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: PUSH
74440: LD_VAR 0 2
74444: PUSH
74445: LD_INT 3
74447: MINUS
74448: ARRAY
74449: ST_TO_ADDR
// end ; 10 .. 13 :
74450: GO 74960
74452: LD_INT 10
74454: DOUBLE
74455: GREATEREQUAL
74456: IFFALSE 74464
74458: LD_INT 13
74460: DOUBLE
74461: LESSEQUAL
74462: IFTRUE 74466
74464: GO 74543
74466: POP
// begin bc_type := b_lab_full ;
74467: LD_ADDR_OWVAR 42
74471: PUSH
74472: LD_INT 8
74474: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74475: LD_ADDR_OWVAR 44
74479: PUSH
74480: LD_INT 10
74482: PUSH
74483: LD_INT 12
74485: PUSH
74486: LD_INT 14
74488: PUSH
74489: LD_INT 13
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: PUSH
74498: LD_VAR 0 2
74502: PUSH
74503: LD_INT 9
74505: MINUS
74506: ARRAY
74507: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74508: LD_ADDR_OWVAR 45
74512: PUSH
74513: LD_INT 11
74515: PUSH
74516: LD_INT 15
74518: PUSH
74519: LD_INT 12
74521: PUSH
74522: LD_INT 15
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: PUSH
74531: LD_VAR 0 2
74535: PUSH
74536: LD_INT 9
74538: MINUS
74539: ARRAY
74540: ST_TO_ADDR
// end ; 14 :
74541: GO 74960
74543: LD_INT 14
74545: DOUBLE
74546: EQUAL
74547: IFTRUE 74551
74549: GO 74562
74551: POP
// bc_type := b_workshop ; 15 :
74552: LD_ADDR_OWVAR 42
74556: PUSH
74557: LD_INT 2
74559: ST_TO_ADDR
74560: GO 74960
74562: LD_INT 15
74564: DOUBLE
74565: EQUAL
74566: IFTRUE 74570
74568: GO 74581
74570: POP
// bc_type := b_factory ; 16 :
74571: LD_ADDR_OWVAR 42
74575: PUSH
74576: LD_INT 3
74578: ST_TO_ADDR
74579: GO 74960
74581: LD_INT 16
74583: DOUBLE
74584: EQUAL
74585: IFTRUE 74589
74587: GO 74600
74589: POP
// bc_type := b_ext_gun ; 17 :
74590: LD_ADDR_OWVAR 42
74594: PUSH
74595: LD_INT 17
74597: ST_TO_ADDR
74598: GO 74960
74600: LD_INT 17
74602: DOUBLE
74603: EQUAL
74604: IFTRUE 74608
74606: GO 74636
74608: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74609: LD_ADDR_OWVAR 42
74613: PUSH
74614: LD_INT 19
74616: PUSH
74617: LD_INT 23
74619: PUSH
74620: LD_INT 19
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: LIST
74627: PUSH
74628: LD_VAR 0 1
74632: ARRAY
74633: ST_TO_ADDR
74634: GO 74960
74636: LD_INT 18
74638: DOUBLE
74639: EQUAL
74640: IFTRUE 74644
74642: GO 74655
74644: POP
// bc_type := b_ext_radar ; 19 :
74645: LD_ADDR_OWVAR 42
74649: PUSH
74650: LD_INT 20
74652: ST_TO_ADDR
74653: GO 74960
74655: LD_INT 19
74657: DOUBLE
74658: EQUAL
74659: IFTRUE 74663
74661: GO 74674
74663: POP
// bc_type := b_ext_radio ; 20 :
74664: LD_ADDR_OWVAR 42
74668: PUSH
74669: LD_INT 22
74671: ST_TO_ADDR
74672: GO 74960
74674: LD_INT 20
74676: DOUBLE
74677: EQUAL
74678: IFTRUE 74682
74680: GO 74693
74682: POP
// bc_type := b_ext_siberium ; 21 :
74683: LD_ADDR_OWVAR 42
74687: PUSH
74688: LD_INT 21
74690: ST_TO_ADDR
74691: GO 74960
74693: LD_INT 21
74695: DOUBLE
74696: EQUAL
74697: IFTRUE 74701
74699: GO 74712
74701: POP
// bc_type := b_ext_computer ; 22 :
74702: LD_ADDR_OWVAR 42
74706: PUSH
74707: LD_INT 24
74709: ST_TO_ADDR
74710: GO 74960
74712: LD_INT 22
74714: DOUBLE
74715: EQUAL
74716: IFTRUE 74720
74718: GO 74731
74720: POP
// bc_type := b_ext_track ; 23 :
74721: LD_ADDR_OWVAR 42
74725: PUSH
74726: LD_INT 16
74728: ST_TO_ADDR
74729: GO 74960
74731: LD_INT 23
74733: DOUBLE
74734: EQUAL
74735: IFTRUE 74739
74737: GO 74750
74739: POP
// bc_type := b_ext_laser ; 24 :
74740: LD_ADDR_OWVAR 42
74744: PUSH
74745: LD_INT 25
74747: ST_TO_ADDR
74748: GO 74960
74750: LD_INT 24
74752: DOUBLE
74753: EQUAL
74754: IFTRUE 74758
74756: GO 74769
74758: POP
// bc_type := b_control_tower ; 25 :
74759: LD_ADDR_OWVAR 42
74763: PUSH
74764: LD_INT 36
74766: ST_TO_ADDR
74767: GO 74960
74769: LD_INT 25
74771: DOUBLE
74772: EQUAL
74773: IFTRUE 74777
74775: GO 74788
74777: POP
// bc_type := b_breastwork ; 26 :
74778: LD_ADDR_OWVAR 42
74782: PUSH
74783: LD_INT 31
74785: ST_TO_ADDR
74786: GO 74960
74788: LD_INT 26
74790: DOUBLE
74791: EQUAL
74792: IFTRUE 74796
74794: GO 74807
74796: POP
// bc_type := b_bunker ; 27 :
74797: LD_ADDR_OWVAR 42
74801: PUSH
74802: LD_INT 32
74804: ST_TO_ADDR
74805: GO 74960
74807: LD_INT 27
74809: DOUBLE
74810: EQUAL
74811: IFTRUE 74815
74813: GO 74826
74815: POP
// bc_type := b_turret ; 28 :
74816: LD_ADDR_OWVAR 42
74820: PUSH
74821: LD_INT 33
74823: ST_TO_ADDR
74824: GO 74960
74826: LD_INT 28
74828: DOUBLE
74829: EQUAL
74830: IFTRUE 74834
74832: GO 74845
74834: POP
// bc_type := b_armoury ; 29 :
74835: LD_ADDR_OWVAR 42
74839: PUSH
74840: LD_INT 4
74842: ST_TO_ADDR
74843: GO 74960
74845: LD_INT 29
74847: DOUBLE
74848: EQUAL
74849: IFTRUE 74853
74851: GO 74864
74853: POP
// bc_type := b_barracks ; 30 :
74854: LD_ADDR_OWVAR 42
74858: PUSH
74859: LD_INT 5
74861: ST_TO_ADDR
74862: GO 74960
74864: LD_INT 30
74866: DOUBLE
74867: EQUAL
74868: IFTRUE 74872
74870: GO 74883
74872: POP
// bc_type := b_solar_power ; 31 :
74873: LD_ADDR_OWVAR 42
74877: PUSH
74878: LD_INT 27
74880: ST_TO_ADDR
74881: GO 74960
74883: LD_INT 31
74885: DOUBLE
74886: EQUAL
74887: IFTRUE 74891
74889: GO 74902
74891: POP
// bc_type := b_oil_power ; 32 :
74892: LD_ADDR_OWVAR 42
74896: PUSH
74897: LD_INT 26
74899: ST_TO_ADDR
74900: GO 74960
74902: LD_INT 32
74904: DOUBLE
74905: EQUAL
74906: IFTRUE 74910
74908: GO 74921
74910: POP
// bc_type := b_siberite_power ; 33 :
74911: LD_ADDR_OWVAR 42
74915: PUSH
74916: LD_INT 28
74918: ST_TO_ADDR
74919: GO 74960
74921: LD_INT 33
74923: DOUBLE
74924: EQUAL
74925: IFTRUE 74929
74927: GO 74940
74929: POP
// bc_type := b_oil_mine ; 34 :
74930: LD_ADDR_OWVAR 42
74934: PUSH
74935: LD_INT 29
74937: ST_TO_ADDR
74938: GO 74960
74940: LD_INT 34
74942: DOUBLE
74943: EQUAL
74944: IFTRUE 74948
74946: GO 74959
74948: POP
// bc_type := b_siberite_mine ; end ;
74949: LD_ADDR_OWVAR 42
74953: PUSH
74954: LD_INT 30
74956: ST_TO_ADDR
74957: GO 74960
74959: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74960: LD_ADDR_VAR 0 8
74964: PUSH
74965: LD_VAR 0 5
74969: PPUSH
74970: LD_VAR 0 6
74974: PPUSH
74975: LD_VAR 0 3
74979: PPUSH
74980: CALL_OW 47
74984: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74985: LD_OWVAR 42
74989: PUSH
74990: LD_INT 32
74992: PUSH
74993: LD_INT 33
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: IN
75000: IFFALSE 75016
// PlaceWeaponTurret ( b , weapon ) ;
75002: LD_VAR 0 8
75006: PPUSH
75007: LD_VAR 0 4
75011: PPUSH
75012: CALL_OW 431
// end ;
75016: LD_VAR 0 7
75020: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75021: LD_INT 0
75023: PPUSH
75024: PPUSH
75025: PPUSH
75026: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75027: LD_ADDR_VAR 0 4
75031: PUSH
75032: LD_INT 22
75034: PUSH
75035: LD_OWVAR 2
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: PUSH
75044: LD_INT 2
75046: PUSH
75047: LD_INT 30
75049: PUSH
75050: LD_INT 0
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: LD_INT 30
75059: PUSH
75060: LD_INT 1
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: LIST
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: PPUSH
75076: CALL_OW 69
75080: ST_TO_ADDR
// if not tmp then
75081: LD_VAR 0 4
75085: NOT
75086: IFFALSE 75090
// exit ;
75088: GO 75149
// for i in tmp do
75090: LD_ADDR_VAR 0 2
75094: PUSH
75095: LD_VAR 0 4
75099: PUSH
75100: FOR_IN
75101: IFFALSE 75147
// for j = 1 to 3 do
75103: LD_ADDR_VAR 0 3
75107: PUSH
75108: DOUBLE
75109: LD_INT 1
75111: DEC
75112: ST_TO_ADDR
75113: LD_INT 3
75115: PUSH
75116: FOR_TO
75117: IFFALSE 75143
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75119: LD_VAR 0 2
75123: PPUSH
75124: CALL_OW 274
75128: PPUSH
75129: LD_VAR 0 3
75133: PPUSH
75134: LD_INT 99999
75136: PPUSH
75137: CALL_OW 277
75141: GO 75116
75143: POP
75144: POP
75145: GO 75100
75147: POP
75148: POP
// end ;
75149: LD_VAR 0 1
75153: RET
// export function hHackSetLevel10 ; var i , j ; begin
75154: LD_INT 0
75156: PPUSH
75157: PPUSH
75158: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75159: LD_ADDR_VAR 0 2
75163: PUSH
75164: LD_INT 21
75166: PUSH
75167: LD_INT 1
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: PPUSH
75174: CALL_OW 69
75178: PUSH
75179: FOR_IN
75180: IFFALSE 75232
// if IsSelected ( i ) then
75182: LD_VAR 0 2
75186: PPUSH
75187: CALL_OW 306
75191: IFFALSE 75230
// begin for j := 1 to 4 do
75193: LD_ADDR_VAR 0 3
75197: PUSH
75198: DOUBLE
75199: LD_INT 1
75201: DEC
75202: ST_TO_ADDR
75203: LD_INT 4
75205: PUSH
75206: FOR_TO
75207: IFFALSE 75228
// SetSkill ( i , j , 10 ) ;
75209: LD_VAR 0 2
75213: PPUSH
75214: LD_VAR 0 3
75218: PPUSH
75219: LD_INT 10
75221: PPUSH
75222: CALL_OW 237
75226: GO 75206
75228: POP
75229: POP
// end ;
75230: GO 75179
75232: POP
75233: POP
// end ;
75234: LD_VAR 0 1
75238: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75239: LD_INT 0
75241: PPUSH
75242: PPUSH
75243: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75244: LD_ADDR_VAR 0 2
75248: PUSH
75249: LD_INT 22
75251: PUSH
75252: LD_OWVAR 2
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: LD_INT 21
75263: PUSH
75264: LD_INT 1
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PPUSH
75275: CALL_OW 69
75279: PUSH
75280: FOR_IN
75281: IFFALSE 75322
// begin for j := 1 to 4 do
75283: LD_ADDR_VAR 0 3
75287: PUSH
75288: DOUBLE
75289: LD_INT 1
75291: DEC
75292: ST_TO_ADDR
75293: LD_INT 4
75295: PUSH
75296: FOR_TO
75297: IFFALSE 75318
// SetSkill ( i , j , 10 ) ;
75299: LD_VAR 0 2
75303: PPUSH
75304: LD_VAR 0 3
75308: PPUSH
75309: LD_INT 10
75311: PPUSH
75312: CALL_OW 237
75316: GO 75296
75318: POP
75319: POP
// end ;
75320: GO 75280
75322: POP
75323: POP
// end ;
75324: LD_VAR 0 1
75328: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75329: LD_INT 0
75331: PPUSH
// uc_side := your_side ;
75332: LD_ADDR_OWVAR 20
75336: PUSH
75337: LD_OWVAR 2
75341: ST_TO_ADDR
// uc_nation := nation ;
75342: LD_ADDR_OWVAR 21
75346: PUSH
75347: LD_VAR 0 1
75351: ST_TO_ADDR
// InitHc ;
75352: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75356: LD_INT 0
75358: PPUSH
75359: LD_VAR 0 2
75363: PPUSH
75364: LD_VAR 0 3
75368: PPUSH
75369: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75373: LD_VAR 0 4
75377: PPUSH
75378: LD_VAR 0 5
75382: PPUSH
75383: CALL_OW 428
75387: PUSH
75388: LD_INT 0
75390: EQUAL
75391: IFFALSE 75415
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75393: CALL_OW 44
75397: PPUSH
75398: LD_VAR 0 4
75402: PPUSH
75403: LD_VAR 0 5
75407: PPUSH
75408: LD_INT 1
75410: PPUSH
75411: CALL_OW 48
// end ;
75415: LD_VAR 0 6
75419: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75420: LD_INT 0
75422: PPUSH
75423: PPUSH
// uc_side := your_side ;
75424: LD_ADDR_OWVAR 20
75428: PUSH
75429: LD_OWVAR 2
75433: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75434: LD_VAR 0 1
75438: PUSH
75439: LD_INT 1
75441: PUSH
75442: LD_INT 2
75444: PUSH
75445: LD_INT 3
75447: PUSH
75448: LD_INT 4
75450: PUSH
75451: LD_INT 5
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: IN
75461: IFFALSE 75473
// uc_nation := nation_american else
75463: LD_ADDR_OWVAR 21
75467: PUSH
75468: LD_INT 1
75470: ST_TO_ADDR
75471: GO 75516
// if chassis in [ 11 , 12 , 13 , 14 ] then
75473: LD_VAR 0 1
75477: PUSH
75478: LD_INT 11
75480: PUSH
75481: LD_INT 12
75483: PUSH
75484: LD_INT 13
75486: PUSH
75487: LD_INT 14
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: IN
75496: IFFALSE 75508
// uc_nation := nation_arabian else
75498: LD_ADDR_OWVAR 21
75502: PUSH
75503: LD_INT 2
75505: ST_TO_ADDR
75506: GO 75516
// uc_nation := nation_russian ;
75508: LD_ADDR_OWVAR 21
75512: PUSH
75513: LD_INT 3
75515: ST_TO_ADDR
// vc_chassis := chassis ;
75516: LD_ADDR_OWVAR 37
75520: PUSH
75521: LD_VAR 0 1
75525: ST_TO_ADDR
// vc_engine := engine ;
75526: LD_ADDR_OWVAR 39
75530: PUSH
75531: LD_VAR 0 2
75535: ST_TO_ADDR
// vc_control := control ;
75536: LD_ADDR_OWVAR 38
75540: PUSH
75541: LD_VAR 0 3
75545: ST_TO_ADDR
// vc_weapon := weapon ;
75546: LD_ADDR_OWVAR 40
75550: PUSH
75551: LD_VAR 0 4
75555: ST_TO_ADDR
// un := CreateVehicle ;
75556: LD_ADDR_VAR 0 8
75560: PUSH
75561: CALL_OW 45
75565: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75566: LD_VAR 0 8
75570: PPUSH
75571: LD_INT 0
75573: PPUSH
75574: LD_INT 5
75576: PPUSH
75577: CALL_OW 12
75581: PPUSH
75582: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75586: LD_VAR 0 8
75590: PPUSH
75591: LD_VAR 0 5
75595: PPUSH
75596: LD_VAR 0 6
75600: PPUSH
75601: LD_INT 1
75603: PPUSH
75604: CALL_OW 48
// end ;
75608: LD_VAR 0 7
75612: RET
// export hInvincible ; every 1 do
75613: GO 75615
75615: DISABLE
// hInvincible := [ ] ;
75616: LD_ADDR_EXP 125
75620: PUSH
75621: EMPTY
75622: ST_TO_ADDR
75623: END
// every 10 do var i ;
75624: GO 75626
75626: DISABLE
75627: LD_INT 0
75629: PPUSH
// begin enable ;
75630: ENABLE
// if not hInvincible then
75631: LD_EXP 125
75635: NOT
75636: IFFALSE 75640
// exit ;
75638: GO 75684
// for i in hInvincible do
75640: LD_ADDR_VAR 0 1
75644: PUSH
75645: LD_EXP 125
75649: PUSH
75650: FOR_IN
75651: IFFALSE 75682
// if GetLives ( i ) < 1000 then
75653: LD_VAR 0 1
75657: PPUSH
75658: CALL_OW 256
75662: PUSH
75663: LD_INT 1000
75665: LESS
75666: IFFALSE 75680
// SetLives ( i , 1000 ) ;
75668: LD_VAR 0 1
75672: PPUSH
75673: LD_INT 1000
75675: PPUSH
75676: CALL_OW 234
75680: GO 75650
75682: POP
75683: POP
// end ;
75684: PPOPN 1
75686: END
// export function hHackInvincible ; var i ; begin
75687: LD_INT 0
75689: PPUSH
75690: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75691: LD_ADDR_VAR 0 2
75695: PUSH
75696: LD_INT 2
75698: PUSH
75699: LD_INT 21
75701: PUSH
75702: LD_INT 1
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: LD_INT 21
75711: PUSH
75712: LD_INT 2
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: LIST
75723: PPUSH
75724: CALL_OW 69
75728: PUSH
75729: FOR_IN
75730: IFFALSE 75791
// if IsSelected ( i ) then
75732: LD_VAR 0 2
75736: PPUSH
75737: CALL_OW 306
75741: IFFALSE 75789
// begin if i in hInvincible then
75743: LD_VAR 0 2
75747: PUSH
75748: LD_EXP 125
75752: IN
75753: IFFALSE 75773
// hInvincible := hInvincible diff i else
75755: LD_ADDR_EXP 125
75759: PUSH
75760: LD_EXP 125
75764: PUSH
75765: LD_VAR 0 2
75769: DIFF
75770: ST_TO_ADDR
75771: GO 75789
// hInvincible := hInvincible union i ;
75773: LD_ADDR_EXP 125
75777: PUSH
75778: LD_EXP 125
75782: PUSH
75783: LD_VAR 0 2
75787: UNION
75788: ST_TO_ADDR
// end ;
75789: GO 75729
75791: POP
75792: POP
// end ;
75793: LD_VAR 0 1
75797: RET
// export function hHackInvisible ; var i , j ; begin
75798: LD_INT 0
75800: PPUSH
75801: PPUSH
75802: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75803: LD_ADDR_VAR 0 2
75807: PUSH
75808: LD_INT 21
75810: PUSH
75811: LD_INT 1
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PPUSH
75818: CALL_OW 69
75822: PUSH
75823: FOR_IN
75824: IFFALSE 75848
// if IsSelected ( i ) then
75826: LD_VAR 0 2
75830: PPUSH
75831: CALL_OW 306
75835: IFFALSE 75846
// ComForceInvisible ( i ) ;
75837: LD_VAR 0 2
75841: PPUSH
75842: CALL_OW 496
75846: GO 75823
75848: POP
75849: POP
// end ;
75850: LD_VAR 0 1
75854: RET
// export function hHackChangeYourSide ; begin
75855: LD_INT 0
75857: PPUSH
// if your_side = 8 then
75858: LD_OWVAR 2
75862: PUSH
75863: LD_INT 8
75865: EQUAL
75866: IFFALSE 75878
// your_side := 0 else
75868: LD_ADDR_OWVAR 2
75872: PUSH
75873: LD_INT 0
75875: ST_TO_ADDR
75876: GO 75892
// your_side := your_side + 1 ;
75878: LD_ADDR_OWVAR 2
75882: PUSH
75883: LD_OWVAR 2
75887: PUSH
75888: LD_INT 1
75890: PLUS
75891: ST_TO_ADDR
// end ;
75892: LD_VAR 0 1
75896: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75897: LD_INT 0
75899: PPUSH
75900: PPUSH
75901: PPUSH
// for i in all_units do
75902: LD_ADDR_VAR 0 2
75906: PUSH
75907: LD_OWVAR 3
75911: PUSH
75912: FOR_IN
75913: IFFALSE 75991
// if IsSelected ( i ) then
75915: LD_VAR 0 2
75919: PPUSH
75920: CALL_OW 306
75924: IFFALSE 75989
// begin j := GetSide ( i ) ;
75926: LD_ADDR_VAR 0 3
75930: PUSH
75931: LD_VAR 0 2
75935: PPUSH
75936: CALL_OW 255
75940: ST_TO_ADDR
// if j = 8 then
75941: LD_VAR 0 3
75945: PUSH
75946: LD_INT 8
75948: EQUAL
75949: IFFALSE 75961
// j := 0 else
75951: LD_ADDR_VAR 0 3
75955: PUSH
75956: LD_INT 0
75958: ST_TO_ADDR
75959: GO 75975
// j := j + 1 ;
75961: LD_ADDR_VAR 0 3
75965: PUSH
75966: LD_VAR 0 3
75970: PUSH
75971: LD_INT 1
75973: PLUS
75974: ST_TO_ADDR
// SetSide ( i , j ) ;
75975: LD_VAR 0 2
75979: PPUSH
75980: LD_VAR 0 3
75984: PPUSH
75985: CALL_OW 235
// end ;
75989: GO 75912
75991: POP
75992: POP
// end ;
75993: LD_VAR 0 1
75997: RET
// export function hHackFog ; begin
75998: LD_INT 0
76000: PPUSH
// FogOff ( true ) ;
76001: LD_INT 1
76003: PPUSH
76004: CALL_OW 344
// end ;
76008: LD_VAR 0 1
76012: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76013: LD_INT 0
76015: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76016: LD_VAR 0 1
76020: PPUSH
76021: LD_VAR 0 2
76025: PPUSH
76026: LD_VAR 0 3
76030: PPUSH
76031: LD_INT 1
76033: PPUSH
76034: LD_INT 1
76036: PPUSH
76037: CALL_OW 483
// CenterOnXY ( x , y ) ;
76041: LD_VAR 0 2
76045: PPUSH
76046: LD_VAR 0 3
76050: PPUSH
76051: CALL_OW 84
// end ; end_of_file
76055: LD_VAR 0 4
76059: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
76060: LD_INT 0
76062: PPUSH
// ar_miner := 81 ;
76063: LD_ADDR_EXP 133
76067: PUSH
76068: LD_INT 81
76070: ST_TO_ADDR
// ar_crane := 88 ;
76071: LD_ADDR_EXP 132
76075: PUSH
76076: LD_INT 88
76078: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
76079: LD_ADDR_EXP 127
76083: PUSH
76084: LD_INT 89
76086: ST_TO_ADDR
// us_hack := 99 ;
76087: LD_ADDR_EXP 128
76091: PUSH
76092: LD_INT 99
76094: ST_TO_ADDR
// us_artillery := 97 ;
76095: LD_ADDR_EXP 129
76099: PUSH
76100: LD_INT 97
76102: ST_TO_ADDR
// ar_bio_bomb := 91 ;
76103: LD_ADDR_EXP 130
76107: PUSH
76108: LD_INT 91
76110: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
76111: LD_ADDR_EXP 131
76115: PUSH
76116: LD_INT 92
76118: ST_TO_ADDR
// ru_radar := 98 ;
76119: LD_ADDR_EXP 126
76123: PUSH
76124: LD_INT 98
76126: ST_TO_ADDR
// tech_Artillery := 80 ;
76127: LD_ADDR_EXP 134
76131: PUSH
76132: LD_INT 80
76134: ST_TO_ADDR
// tech_RadMat := 81 ;
76135: LD_ADDR_EXP 135
76139: PUSH
76140: LD_INT 81
76142: ST_TO_ADDR
// tech_BasicTools := 82 ;
76143: LD_ADDR_EXP 136
76147: PUSH
76148: LD_INT 82
76150: ST_TO_ADDR
// tech_Cargo := 83 ;
76151: LD_ADDR_EXP 137
76155: PUSH
76156: LD_INT 83
76158: ST_TO_ADDR
// tech_Track := 84 ;
76159: LD_ADDR_EXP 138
76163: PUSH
76164: LD_INT 84
76166: ST_TO_ADDR
// tech_Crane := 85 ;
76167: LD_ADDR_EXP 139
76171: PUSH
76172: LD_INT 85
76174: ST_TO_ADDR
// tech_Bulldozer := 86 ;
76175: LD_ADDR_EXP 140
76179: PUSH
76180: LD_INT 86
76182: ST_TO_ADDR
// tech_Hovercraft := 87 ;
76183: LD_ADDR_EXP 141
76187: PUSH
76188: LD_INT 87
76190: ST_TO_ADDR
// end ;
76191: LD_VAR 0 1
76195: RET
// every 1 do
76196: GO 76198
76198: DISABLE
// InitGlobalVariables ; end_of_file
76199: CALL 76060 0 0
76203: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76204: LD_VAR 0 1
76208: PUSH
76209: LD_INT 200
76211: DOUBLE
76212: GREATEREQUAL
76213: IFFALSE 76221
76215: LD_INT 299
76217: DOUBLE
76218: LESSEQUAL
76219: IFTRUE 76223
76221: GO 76255
76223: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76224: LD_VAR 0 1
76228: PPUSH
76229: LD_VAR 0 2
76233: PPUSH
76234: LD_VAR 0 3
76238: PPUSH
76239: LD_VAR 0 4
76243: PPUSH
76244: LD_VAR 0 5
76248: PPUSH
76249: CALL 59010 0 5
76253: GO 76332
76255: LD_INT 300
76257: DOUBLE
76258: GREATEREQUAL
76259: IFFALSE 76267
76261: LD_INT 399
76263: DOUBLE
76264: LESSEQUAL
76265: IFTRUE 76269
76267: GO 76331
76269: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76270: LD_VAR 0 1
76274: PPUSH
76275: LD_VAR 0 2
76279: PPUSH
76280: LD_VAR 0 3
76284: PPUSH
76285: LD_VAR 0 4
76289: PPUSH
76290: LD_VAR 0 5
76294: PPUSH
76295: LD_VAR 0 6
76299: PPUSH
76300: LD_VAR 0 7
76304: PPUSH
76305: LD_VAR 0 8
76309: PPUSH
76310: LD_VAR 0 9
76314: PPUSH
76315: LD_VAR 0 10
76319: PPUSH
76320: LD_VAR 0 11
76324: PPUSH
76325: CALL 74080 0 11
76329: GO 76332
76331: POP
// end ;
76332: PPOPN 11
76334: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76335: LD_VAR 0 1
76339: PPUSH
76340: LD_VAR 0 2
76344: PPUSH
76345: LD_VAR 0 3
76349: PPUSH
76350: LD_VAR 0 4
76354: PPUSH
76355: LD_VAR 0 5
76359: PPUSH
76360: CALL 58992 0 5
// end ;
76364: PPOPN 5
76366: END
