// starting begin Resetfog ;
   0: CALL_OW 335
// YouLost ( Demo ) ;
   4: LD_STRING Demo
   6: PPUSH
   7: CALL_OW 104
// end ;
  11: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; export achievement_DestroyedHovercrafts ; export achievement_CollectedCrates ; function InitMission ; begin
  12: LD_INT 0
  14: PPUSH
// ResetFog ;
  15: CALL_OW 335
// RandomizeAll ;
  19: CALL_OW 11
// InGameOn ;
  23: CALL_OW 8
// InitMapConfig ;
  27: CALL 249 0 0
// omarStatus = 0 ;
  31: LD_ADDR_EXP 1
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// stevensStatus = 0 ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// labDestroyed = 0 ;
  47: LD_ADDR_EXP 3
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  55: LD_ADDR_EXP 5
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  62: LD_ADDR_EXP 6
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_STRING 05_TanksIntro_1
  76: PPUSH
  77: EMPTY
  78: PPUSH
  79: CALL_OW 30
  83: ST_TO_ADDR
// actionTime = 0 0$00 ;
  84: LD_ADDR_EXP 7
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  92: LD_ADDR_EXP 10
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// sawArabianBase = false ;
 108: LD_ADDR_EXP 8
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// sawApeman = false ;
 116: LD_ADDR_EXP 9
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// stevensPlaced = false ;
 124: LD_ADDR_EXP 14
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// stevensFollow = false ;
 132: LD_ADDR_EXP 15
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 140: LD_ADDR_EXP 16
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// stevensDepot = false ;
 148: LD_ADDR_EXP 17
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// stevensWasInDepot = false ;
 156: LD_ADDR_EXP 18
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// stevensCanExitMap = false ;
 164: LD_ADDR_EXP 19
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// cratesSpawned = 0 ;
 172: LD_ADDR_EXP 22
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// fastBreakthrough = false ;
 180: LD_ADDR_EXP 23
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// finishMissionBool = false ;
 188: LD_ADDR_EXP 24
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// omarCanExitMap = false ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// arabianCanExitMap = false ;
 204: LD_ADDR_EXP 21
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// achievement_DestroyedHovercrafts = 0 ;
 212: LD_ADDR_EXP 25
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// achievement_CollectedCrates = false ;
 220: LD_ADDR_EXP 26
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// PrepareRussians ;
 228: CALL 908 0 0
// PrepareArabians ;
 232: CALL 1655 0 0
// Nef_PrepareNature ;
 236: CALL 19849 0 0
// MissionIntro ;
 240: CALL 2987 0 0
// end ; end_of_file
 244: LD_VAR 0 1
 248: RET
// export function InitMapConfig ; begin
 249: LD_INT 0
 251: PPUSH
// BaseMapConfig ;
 252: CALL 265 0 0
// MissionMapConfig ;
 256: CALL 355 0 0
// end ;
 260: LD_VAR 0 1
 264: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 265: LD_INT 0
 267: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 268: LD_ADDR_EXP 27
 272: PUSH
 273: LD_INT 4
 275: PUSH
 276: LD_INT 3
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: LD_INT 0
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 295: LD_ADDR_EXP 28
 299: PUSH
 300: LD_INT 2
 302: PUSH
 303: LD_INT 2
 305: PUSH
 306: LD_INT 2
 308: PUSH
 309: LD_INT 2
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// animalsAgression = 0 ;
 318: LD_ADDR_EXP 29
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// debugMode = 0 ;
 326: LD_ADDR_EXP 32
 330: PUSH
 331: LD_INT 0
 333: ST_TO_ADDR
// missionPrefix = 05_ ;
 334: LD_ADDR_EXP 30
 338: PUSH
 339: LD_STRING 05_
 341: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 342: LD_ADDR_EXP 31
 346: PUSH
 347: LD_STRING 04_
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 355: LD_INT 0
 357: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 ] [ Difficulty ] ;
 358: LD_ADDR_EXP 33
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 3
 368: PUSH
 369: LD_INT 4
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: LIST
 376: PUSH
 377: LD_OWVAR 67
 381: ARRAY
 382: ST_TO_ADDR
// arabBreakthrough = [ 35 35$0 , 33 33$0 , 30 30$0 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 34
 387: PUSH
 388: LD_INT 73500
 390: PUSH
 391: LD_INT 69300
 393: PUSH
 394: LD_INT 63000
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: LD_OWVAR 67
 406: ARRAY
 407: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 408: LD_ADDR_EXP 35
 412: PUSH
 413: LD_INT 2
 415: PUSH
 416: LD_INT 1
 418: PUSH
 419: LD_INT 6
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// arabianPatrolVehiclesAmount = 1 ;
 431: LD_ADDR_EXP 36
 435: PUSH
 436: LD_INT 1
 438: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 37
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: LD_INT 3
 449: PUSH
 450: LD_INT 3
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: LD_OWVAR 67
 462: ARRAY
 463: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 464: LD_ADDR_EXP 38
 468: PUSH
 469: LD_INT 108
 471: PUSH
 472: LD_INT 15
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 102
 481: PUSH
 482: LD_INT 45
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 65
 491: PUSH
 492: LD_INT 23
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 37
 501: PUSH
 502: LD_INT 28
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 32
 511: PUSH
 512: LD_INT 40
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 45
 521: PUSH
 522: LD_INT 74
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 69
 531: PUSH
 532: LD_INT 98
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: LD_INT 101
 541: PUSH
 542: LD_INT 101
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 117
 551: PUSH
 552: LD_INT 84
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 158
 561: PUSH
 562: LD_INT 132
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// end ;
 581: LD_VAR 0 1
 585: RET
// every 0 0$1 trigger debugMode do var i ;
 586: LD_EXP 32
 590: IFFALSE 905
 592: GO 594
 594: DISABLE
 595: LD_INT 0
 597: PPUSH
// begin enable ;
 598: ENABLE
// FogOff ( your_side ) ;
 599: LD_OWVAR 2
 603: PPUSH
 604: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 608: LD_ADDR_VAR 0 1
 612: PUSH
 613: LD_INT 22
 615: PUSH
 616: LD_OWVAR 2
 620: PUSH
 621: EMPTY
 622: LIST
 623: LIST
 624: PUSH
 625: LD_INT 2
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 21
 640: PUSH
 641: LD_INT 2
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PPUSH
 657: CALL_OW 69
 661: PUSH
 662: FOR_IN
 663: IFFALSE 679
// SetLives ( i , 1000 ) ;
 665: LD_VAR 0 1
 669: PPUSH
 670: LD_INT 1000
 672: PPUSH
 673: CALL_OW 234
 677: GO 662
 679: POP
 680: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 681: LD_ADDR_VAR 0 1
 685: PUSH
 686: LD_INT 22
 688: PUSH
 689: LD_OWVAR 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 21
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: PPUSH
 712: CALL_OW 69
 716: PUSH
 717: FOR_IN
 718: IFFALSE 782
// begin SetSkill ( i , skill_combat , 10 ) ;
 720: LD_VAR 0 1
 724: PPUSH
 725: LD_INT 1
 727: PPUSH
 728: LD_INT 10
 730: PPUSH
 731: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 735: LD_VAR 0 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: LD_INT 10
 745: PPUSH
 746: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 750: LD_VAR 0 1
 754: PPUSH
 755: LD_INT 3
 757: PPUSH
 758: LD_INT 10
 760: PPUSH
 761: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 765: LD_VAR 0 1
 769: PPUSH
 770: LD_INT 4
 772: PPUSH
 773: LD_INT 10
 775: PPUSH
 776: CALL_OW 237
// end ;
 780: GO 717
 782: POP
 783: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 784: LD_ADDR_VAR 0 1
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_OWVAR 2
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 30
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 30
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PPUSH
 833: CALL_OW 69
 837: PUSH
 838: FOR_IN
 839: IFFALSE 903
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 841: LD_VAR 0 1
 845: PPUSH
 846: CALL_OW 274
 850: PPUSH
 851: LD_INT 1
 853: PPUSH
 854: LD_INT 9999
 856: PPUSH
 857: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 861: LD_VAR 0 1
 865: PPUSH
 866: CALL_OW 274
 870: PPUSH
 871: LD_INT 2
 873: PPUSH
 874: LD_INT 9999
 876: PPUSH
 877: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 881: LD_VAR 0 1
 885: PPUSH
 886: CALL_OW 274
 890: PPUSH
 891: LD_INT 3
 893: PPUSH
 894: LD_INT 9999
 896: PPUSH
 897: CALL_OW 277
// end ;
 901: GO 838
 903: POP
 904: POP
// end ; end_of_file
 905: PPOPN 1
 907: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 908: LD_INT 0
 910: PPUSH
// PrepareHeroes ;
 911: CALL 920 0 0
// end ;
 915: LD_VAR 0 1
 919: RET
// function PrepareHeroes ; var i , car ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
// ruCars = [ ] ;
 925: LD_ADDR_EXP 48
 929: PUSH
 930: EMPTY
 931: ST_TO_ADDR
// uc_side = 3 ;
 932: LD_ADDR_OWVAR 20
 936: PUSH
 937: LD_INT 3
 939: ST_TO_ADDR
// uc_nation = 3 ;
 940: LD_ADDR_OWVAR 21
 944: PUSH
 945: LD_INT 3
 947: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 948: LD_ADDR_EXP 39
 952: PUSH
 953: LD_STRING Burlak
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: LD_INT 3
 961: PPUSH
 962: CALL 8455 0 3
 966: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 967: LD_ADDR_EXP 44
 971: PUSH
 972: LD_STRING Titov
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: CALL 8455 0 3
 985: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 986: LD_ADDR_EXP 45
 990: PUSH
 991: LD_STRING Dolgov
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: LD_INT 4
 999: PPUSH
1000: CALL 8455 0 3
1004: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
1005: LD_ADDR_EXP 46
1009: PUSH
1010: LD_STRING Lipshchin
1012: PPUSH
1013: LD_INT 0
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: CALL 8455 0 3
1023: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1024: LD_ADDR_EXP 40
1028: PUSH
1029: LD_STRING Karamazov
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: LD_INT 2
1037: PPUSH
1038: CALL 8455 0 3
1042: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1043: LD_ADDR_EXP 41
1047: PUSH
1048: LD_STRING Petrovova
1050: PPUSH
1051: LD_INT 0
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: CALL 8455 0 3
1061: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1062: LD_ADDR_EXP 42
1066: PUSH
1067: LD_STRING Gleb
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: LD_INT 1
1075: PPUSH
1076: CALL 8455 0 3
1080: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1081: LD_ADDR_EXP 43
1085: PUSH
1086: LD_STRING Petrosyan
1088: PPUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: CALL 8455 0 3
1099: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1100: LD_ADDR_EXP 47
1104: PUSH
1105: LD_STRING Platonov
1107: PPUSH
1108: LD_INT 0
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL 8455 0 3
1118: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1119: LD_ADDR_VAR 0 2
1123: PUSH
1124: DOUBLE
1125: LD_INT 1
1127: DEC
1128: ST_TO_ADDR
1129: LD_EXP 4
1133: PUSH
1134: FOR_TO
1135: IFFALSE 1513
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1137: LD_ADDR_OWVAR 37
1141: PUSH
1142: LD_EXP 4
1146: PUSH
1147: LD_VAR 0 2
1151: ARRAY
1152: PUSH
1153: LD_INT 1
1155: ARRAY
1156: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1157: LD_ADDR_OWVAR 39
1161: PUSH
1162: LD_EXP 4
1166: PUSH
1167: LD_VAR 0 2
1171: ARRAY
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1177: LD_ADDR_OWVAR 38
1181: PUSH
1182: LD_EXP 4
1186: PUSH
1187: LD_VAR 0 2
1191: ARRAY
1192: PUSH
1193: LD_INT 3
1195: ARRAY
1196: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1197: LD_ADDR_OWVAR 40
1201: PUSH
1202: LD_EXP 4
1206: PUSH
1207: LD_VAR 0 2
1211: ARRAY
1212: PUSH
1213: LD_INT 4
1215: ARRAY
1216: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1217: LD_ADDR_OWVAR 24
1221: PUSH
1222: LD_INT 3
1224: PPUSH
1225: LD_INT 4
1227: PPUSH
1228: CALL_OW 12
1232: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1233: LD_ADDR_OWVAR 41
1237: PUSH
1238: LD_INT 25
1240: PPUSH
1241: LD_INT 40
1243: PPUSH
1244: CALL_OW 12
1248: ST_TO_ADDR
// car := CreateVehicle ;
1249: LD_ADDR_VAR 0 3
1253: PUSH
1254: CALL_OW 45
1258: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1259: LD_ADDR_EXP 48
1263: PUSH
1264: LD_EXP 48
1268: PUSH
1269: LD_VAR 0 3
1273: ADD
1274: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1275: LD_EXP 4
1279: PUSH
1280: LD_VAR 0 2
1284: ARRAY
1285: PUSH
1286: LD_INT 5
1288: ARRAY
1289: PUSH
1290: LD_STRING Bur
1292: DOUBLE
1293: EQUAL
1294: IFTRUE 1298
1296: GO 1315
1298: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1299: LD_EXP 39
1303: PPUSH
1304: LD_VAR 0 3
1308: PPUSH
1309: CALL_OW 52
1313: GO 1491
1315: LD_STRING Kar
1317: DOUBLE
1318: EQUAL
1319: IFTRUE 1323
1321: GO 1340
1323: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1324: LD_EXP 40
1328: PPUSH
1329: LD_VAR 0 3
1333: PPUSH
1334: CALL_OW 52
1338: GO 1491
1340: LD_STRING Ptr
1342: DOUBLE
1343: EQUAL
1344: IFTRUE 1348
1346: GO 1365
1348: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1349: LD_EXP 41
1353: PPUSH
1354: LD_VAR 0 3
1358: PPUSH
1359: CALL_OW 52
1363: GO 1491
1365: LD_STRING Glb
1367: DOUBLE
1368: EQUAL
1369: IFTRUE 1373
1371: GO 1390
1373: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1374: LD_EXP 42
1378: PPUSH
1379: LD_VAR 0 3
1383: PPUSH
1384: CALL_OW 52
1388: GO 1491
1390: LD_STRING Pet
1392: DOUBLE
1393: EQUAL
1394: IFTRUE 1398
1396: GO 1415
1398: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1399: LD_EXP 43
1403: PPUSH
1404: LD_VAR 0 3
1408: PPUSH
1409: CALL_OW 52
1413: GO 1491
1415: LD_STRING Dol
1417: DOUBLE
1418: EQUAL
1419: IFTRUE 1423
1421: GO 1440
1423: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1424: LD_EXP 45
1428: PPUSH
1429: LD_VAR 0 3
1433: PPUSH
1434: CALL_OW 52
1438: GO 1491
1440: LD_STRING Lip
1442: DOUBLE
1443: EQUAL
1444: IFTRUE 1448
1446: GO 1465
1448: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1449: LD_EXP 46
1453: PPUSH
1454: LD_VAR 0 3
1458: PPUSH
1459: CALL_OW 52
1463: GO 1491
1465: LD_STRING Tit
1467: DOUBLE
1468: EQUAL
1469: IFTRUE 1473
1471: GO 1490
1473: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1474: LD_EXP 44
1478: PPUSH
1479: LD_VAR 0 3
1483: PPUSH
1484: CALL_OW 52
1488: GO 1491
1490: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1491: LD_VAR 0 3
1495: PPUSH
1496: LD_INT 251
1498: PPUSH
1499: LD_INT 800
1501: PPUSH
1502: CALL_OW 12
1506: PPUSH
1507: CALL_OW 234
// end ;
1511: GO 1134
1513: POP
1514: POP
// for i in ruCars do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_EXP 48
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1545
// PlaceUnitArea ( i , ru_place2 , false ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_INT 18
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
1543: GO 1525
1545: POP
1546: POP
// RevealFogArea ( 3 , co_vidi ) ;
1547: LD_INT 3
1549: PPUSH
1550: LD_INT 19
1552: PPUSH
1553: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1557: LD_EXP 48
1561: PPUSH
1562: LD_INT 3
1564: PPUSH
1565: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1569: LD_INT 4
1571: PPUSH
1572: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1576: LD_EXP 39
1580: PPUSH
1581: CALL_OW 310
1585: PPUSH
1586: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1590: LD_INT 3
1592: PPUSH
1593: LD_INT 22
1595: PUSH
1596: LD_INT 3
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 21
1605: PUSH
1606: LD_INT 2
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 70
1621: PUSH
1622: LD_INT 5
1624: LESS
1625: IFFALSE 1650
// begin wait ( 0 0$1 ) ;
1627: LD_INT 35
1629: PPUSH
1630: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1634: LD_EXP 39
1638: PPUSH
1639: CALL_OW 310
1643: PPUSH
1644: CALL_OW 85
// end ;
1648: GO 1590
// end ; end_of_file
1650: LD_VAR 0 1
1654: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts , arabianPatrolTroops ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1655: LD_INT 0
1657: PPUSH
// arabianUnitsInBase = [ ] ;
1658: LD_ADDR_EXP 51
1662: PUSH
1663: EMPTY
1664: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1665: LD_ADDR_EXP 53
1669: PUSH
1670: EMPTY
1671: ST_TO_ADDR
// arabianPatrolTroops = [ ] ;
1672: LD_ADDR_EXP 54
1676: PUSH
1677: EMPTY
1678: ST_TO_ADDR
// arabLeftExit = true ;
1679: LD_ADDR_EXP 55
1683: PUSH
1684: LD_INT 1
1686: ST_TO_ADDR
// PrepareHeroes ;
1687: CALL 1720 0 0
// PrepareBuildings ;
1691: CALL 1786 0 0
// PrepareUnits ;
1695: CALL 2138 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1699: LD_EXP 36
1703: PPUSH
1704: LD_INT 42
1706: PPUSH
1707: CALL 2675 0 2
// PrepareArabianHovercraft ;
1711: CALL 2834 0 0
// end ;
1715: LD_VAR 0 1
1719: RET
// function PrepareHeroes ; begin
1720: LD_INT 0
1722: PPUSH
// uc_side = 2 ;
1723: LD_ADDR_OWVAR 20
1727: PUSH
1728: LD_INT 2
1730: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1731: LD_ADDR_EXP 49
1735: PUSH
1736: LD_STRING Heike
1738: PPUSH
1739: LD_INT 0
1741: PPUSH
1742: LD_INT 0
1744: PPUSH
1745: CALL 8455 0 3
1749: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1750: LD_ADDR_EXP 50
1754: PUSH
1755: LD_STRING Omar
1757: PPUSH
1758: LD_INT 0
1760: PPUSH
1761: LD_INT 11
1763: PPUSH
1764: CALL 8455 0 3
1768: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1769: LD_EXP 50
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 52
// end ;
1781: LD_VAR 0 1
1785: RET
// function PrepareBuildings ; var depot ; begin
1786: LD_INT 0
1788: PPUSH
1789: PPUSH
// uc_side = 2 ;
1790: LD_ADDR_OWVAR 20
1794: PUSH
1795: LD_INT 2
1797: ST_TO_ADDR
// uc_nation = nation_arabian ;
1798: LD_ADDR_OWVAR 21
1802: PUSH
1803: LD_INT 2
1805: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1806: LD_ADDR_OWVAR 43
1810: PUSH
1811: LD_EXP 33
1815: ST_TO_ADDR
// bc_type = b_breastwork ;
1816: LD_ADDR_OWVAR 42
1820: PUSH
1821: LD_INT 31
1823: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1824: LD_INT 118
1826: PPUSH
1827: LD_INT 63
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1837: LD_INT 120
1839: PPUSH
1840: LD_INT 66
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1850: LD_INT 123
1852: PPUSH
1853: LD_INT 73
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL_OW 47
// if Difficulty = 2 then
1863: LD_OWVAR 67
1867: PUSH
1868: LD_INT 2
1870: EQUAL
1871: IFFALSE 1886
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1873: LD_INT 145
1875: PPUSH
1876: LD_INT 83
1878: PPUSH
1879: LD_INT 0
1881: PPUSH
1882: CALL_OW 47
// if Difficulty = 3 then
1886: LD_OWVAR 67
1890: PUSH
1891: LD_INT 3
1893: EQUAL
1894: IFFALSE 1922
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1896: LD_INT 145
1898: PPUSH
1899: LD_INT 83
1901: PPUSH
1902: LD_INT 0
1904: PPUSH
1905: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1909: LD_INT 151
1911: PPUSH
1912: LD_INT 81
1914: PPUSH
1915: LD_INT 5
1917: PPUSH
1918: CALL_OW 47
// end ; bc_type = b_depot ;
1922: LD_ADDR_OWVAR 42
1926: PUSH
1927: LD_INT 0
1929: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1930: LD_ADDR_VAR 0 2
1934: PUSH
1935: LD_INT 124
1937: PPUSH
1938: LD_INT 60
1940: PPUSH
1941: LD_INT 2
1943: PPUSH
1944: CALL_OW 47
1948: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1949: LD_VAR 0 2
1953: PPUSH
1954: CALL_OW 274
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: LD_INT 3000
1964: PPUSH
1965: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1969: LD_INT 131
1971: PPUSH
1972: LD_INT 51
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: CALL_OW 441
// bc_type = b_oil_mine ;
1982: LD_ADDR_OWVAR 42
1986: PUSH
1987: LD_INT 29
1989: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
1990: LD_INT 131
1992: PPUSH
1993: LD_INT 51
1995: PPUSH
1996: LD_INT 2
1998: PPUSH
1999: CALL_OW 47
// case Difficulty of 1 :
2003: LD_OWVAR 67
2007: PUSH
2008: LD_INT 1
2010: DOUBLE
2011: EQUAL
2012: IFTRUE 2016
2014: GO 2032
2016: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2017: LD_INT 48
2019: PPUSH
2020: LD_INT 2
2022: PPUSH
2023: LD_INT 2
2025: PPUSH
2026: CALL_OW 322
// end ; 2 :
2030: GO 2133
2032: LD_INT 2
2034: DOUBLE
2035: EQUAL
2036: IFTRUE 2040
2038: GO 2069
2040: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2041: LD_INT 48
2043: PPUSH
2044: LD_INT 2
2046: PPUSH
2047: LD_INT 2
2049: PPUSH
2050: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2054: LD_INT 51
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 322
// end ; 3 :
2067: GO 2133
2069: LD_INT 3
2071: DOUBLE
2072: EQUAL
2073: IFTRUE 2077
2075: GO 2132
2077: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2078: LD_INT 48
2080: PPUSH
2081: LD_INT 2
2083: PPUSH
2084: LD_INT 2
2086: PPUSH
2087: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2091: LD_INT 51
2093: PPUSH
2094: LD_INT 2
2096: PPUSH
2097: LD_INT 2
2099: PPUSH
2100: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2104: LD_INT 49
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: LD_INT 2
2112: PPUSH
2113: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2117: LD_INT 52
2119: PPUSH
2120: LD_INT 2
2122: PPUSH
2123: LD_INT 2
2125: PPUSH
2126: CALL_OW 322
// end ; end ;
2130: GO 2133
2132: POP
// end ;
2133: LD_VAR 0 1
2137: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2138: LD_INT 0
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
// uc_side = 2 ;
2144: LD_ADDR_OWVAR 20
2148: PUSH
2149: LD_INT 2
2151: ST_TO_ADDR
// uc_nation = 2 ;
2152: LD_ADDR_OWVAR 21
2156: PUSH
2157: LD_INT 2
2159: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2160: LD_ADDR_VAR 0 4
2164: PUSH
2165: LD_INT 22
2167: PUSH
2168: LD_INT 2
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 30
2177: PUSH
2178: LD_INT 31
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PPUSH
2189: CALL_OW 69
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2251
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2197: LD_INT 0
2199: PPUSH
2200: LD_EXP 33
2204: PPUSH
2205: CALL_OW 381
// unit = CreateHuman ;
2209: LD_ADDR_VAR 0 3
2213: PUSH
2214: CALL_OW 44
2218: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_VAR 0 4
2228: PPUSH
2229: CALL 9055 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2233: LD_ADDR_EXP 51
2237: PUSH
2238: LD_EXP 51
2242: PUSH
2243: LD_VAR 0 3
2247: ADD
2248: ST_TO_ADDR
// end ;
2249: GO 2194
2251: POP
2252: POP
// for i := 1 to arabianUnits [ 1 ] do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_EXP 35
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PUSH
2272: FOR_TO
2273: IFFALSE 2330
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2275: LD_INT 0
2277: PPUSH
2278: LD_EXP 33
2282: PPUSH
2283: CALL_OW 381
// unit = CreateHuman ;
2287: LD_ADDR_VAR 0 3
2291: PUSH
2292: CALL_OW 44
2296: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2297: LD_VAR 0 3
2301: PPUSH
2302: LD_INT 38
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2312: LD_ADDR_EXP 51
2316: PUSH
2317: LD_EXP 51
2321: PUSH
2322: LD_VAR 0 3
2326: ADD
2327: ST_TO_ADDR
// end ;
2328: GO 2272
2330: POP
2331: POP
// for i := 1 to arabianUnits [ 2 ] do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_INT 1
2340: DEC
2341: ST_TO_ADDR
2342: LD_EXP 35
2346: PUSH
2347: LD_INT 2
2349: ARRAY
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2409
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2354: LD_INT 0
2356: PPUSH
2357: LD_EXP 33
2361: PPUSH
2362: CALL_OW 382
// unit = CreateHuman ;
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: CALL_OW 44
2375: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2376: LD_VAR 0 3
2380: PPUSH
2381: LD_INT 38
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2391: LD_ADDR_EXP 51
2395: PUSH
2396: LD_EXP 51
2400: PUSH
2401: LD_VAR 0 3
2405: ADD
2406: ST_TO_ADDR
// end ;
2407: GO 2351
2409: POP
2410: POP
// for i := 1 to arabianUnits [ 3 ] do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: DOUBLE
2417: LD_INT 1
2419: DEC
2420: ST_TO_ADDR
2421: LD_EXP 35
2425: PUSH
2426: LD_INT 3
2428: ARRAY
2429: PUSH
2430: FOR_TO
2431: IFFALSE 2488
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2433: LD_INT 0
2435: PPUSH
2436: LD_EXP 33
2440: PPUSH
2441: CALL_OW 383
// unit = CreateHuman ;
2445: LD_ADDR_VAR 0 3
2449: PUSH
2450: CALL_OW 44
2454: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2455: LD_VAR 0 3
2459: PPUSH
2460: LD_INT 38
2462: PPUSH
2463: LD_INT 0
2465: PPUSH
2466: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2470: LD_ADDR_EXP 51
2474: PUSH
2475: LD_EXP 51
2479: PUSH
2480: LD_VAR 0 3
2484: ADD
2485: ST_TO_ADDR
// end ;
2486: GO 2430
2488: POP
2489: POP
// for i := 1 to arabianUnits [ 4 ] do
2490: LD_ADDR_VAR 0 2
2494: PUSH
2495: DOUBLE
2496: LD_INT 1
2498: DEC
2499: ST_TO_ADDR
2500: LD_EXP 35
2504: PUSH
2505: LD_INT 4
2507: ARRAY
2508: PUSH
2509: FOR_TO
2510: IFFALSE 2567
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2512: LD_INT 0
2514: PPUSH
2515: LD_EXP 33
2519: PPUSH
2520: CALL_OW 384
// unit = CreateHuman ;
2524: LD_ADDR_VAR 0 3
2528: PUSH
2529: CALL_OW 44
2533: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2534: LD_VAR 0 3
2538: PPUSH
2539: LD_INT 38
2541: PPUSH
2542: LD_INT 0
2544: PPUSH
2545: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2549: LD_ADDR_EXP 51
2553: PUSH
2554: LD_EXP 51
2558: PUSH
2559: LD_VAR 0 3
2563: ADD
2564: ST_TO_ADDR
// end ;
2565: GO 2509
2567: POP
2568: POP
// end ;
2569: LD_VAR 0 1
2573: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2574: LD_INT 0
2576: PPUSH
2577: PPUSH
2578: PPUSH
// uc_side = 2 ;
2579: LD_ADDR_OWVAR 20
2583: PUSH
2584: LD_INT 2
2586: ST_TO_ADDR
// uc_nation = 2 ;
2587: LD_ADDR_OWVAR 21
2591: PUSH
2592: LD_INT 2
2594: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2595: LD_ADDR_VAR 0 2
2599: PUSH
2600: DOUBLE
2601: LD_INT 1
2603: DEC
2604: ST_TO_ADDR
2605: LD_EXP 37
2609: PUSH
2610: FOR_TO
2611: IFFALSE 2668
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2613: LD_INT 0
2615: PPUSH
2616: LD_EXP 33
2620: PPUSH
2621: CALL_OW 381
// unit = CreateHuman ;
2625: LD_ADDR_VAR 0 3
2629: PUSH
2630: CALL_OW 44
2634: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2635: LD_VAR 0 3
2639: PPUSH
2640: LD_INT 45
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 49
// arabianPatrolTroops = arabianPatrolTroops ^ unit ;
2650: LD_ADDR_EXP 54
2654: PUSH
2655: LD_EXP 54
2659: PUSH
2660: LD_VAR 0 3
2664: ADD
2665: ST_TO_ADDR
// end ;
2666: GO 2610
2668: POP
2669: POP
// end ;
2670: LD_VAR 0 1
2674: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2675: LD_INT 0
2677: PPUSH
2678: PPUSH
2679: PPUSH
// uc_side = 2 ;
2680: LD_ADDR_OWVAR 20
2684: PUSH
2685: LD_INT 2
2687: ST_TO_ADDR
// uc_nation = 2 ;
2688: LD_ADDR_OWVAR 21
2692: PUSH
2693: LD_INT 2
2695: ST_TO_ADDR
// for i := 1 to amount do
2696: LD_ADDR_VAR 0 4
2700: PUSH
2701: DOUBLE
2702: LD_INT 1
2704: DEC
2705: ST_TO_ADDR
2706: LD_VAR 0 1
2710: PUSH
2711: FOR_TO
2712: IFFALSE 2827
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2714: LD_INT 14
2716: PPUSH
2717: LD_INT 1
2719: PPUSH
2720: LD_INT 1
2722: PPUSH
2723: LD_INT 26
2725: PUSH
2726: LD_INT 25
2728: PUSH
2729: LD_INT 27
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 3
2742: PPUSH
2743: CALL_OW 12
2747: ARRAY
2748: PPUSH
2749: LD_INT 100
2751: PPUSH
2752: CALL 28163 0 5
// veh = CreateVehicle ;
2756: LD_ADDR_VAR 0 5
2760: PUSH
2761: CALL_OW 45
2765: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2766: LD_ADDR_EXP 52
2770: PUSH
2771: LD_EXP 52
2775: PUSH
2776: LD_VAR 0 5
2780: ADD
2781: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2782: LD_VAR 0 5
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: LD_INT 0
2794: PPUSH
2795: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2799: LD_INT 0
2801: PPUSH
2802: LD_EXP 33
2806: PPUSH
2807: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2811: CALL_OW 44
2815: PPUSH
2816: LD_VAR 0 5
2820: PPUSH
2821: CALL_OW 52
// end ;
2825: GO 2711
2827: POP
2828: POP
// end ;
2829: LD_VAR 0 3
2833: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// uc_side = 2 ;
2839: LD_ADDR_OWVAR 20
2843: PUSH
2844: LD_INT 2
2846: ST_TO_ADDR
// uc_nation = 2 ;
2847: LD_ADDR_OWVAR 21
2851: PUSH
2852: LD_INT 2
2854: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2855: LD_ADDR_VAR 0 2
2859: PUSH
2860: DOUBLE
2861: LD_INT 1
2863: DEC
2864: ST_TO_ADDR
2865: LD_EXP 36
2869: PUSH
2870: FOR_TO
2871: IFFALSE 2980
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2873: LD_INT 11
2875: PPUSH
2876: LD_INT 1
2878: PPUSH
2879: LD_INT 1
2881: PPUSH
2882: LD_INT 24
2884: PUSH
2885: LD_INT 23
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 1
2894: PPUSH
2895: LD_INT 2
2897: PPUSH
2898: CALL_OW 12
2902: ARRAY
2903: PPUSH
2904: LD_INT 100
2906: PPUSH
2907: CALL 28163 0 5
// veh = CreateVehicle ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 45
2920: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2921: LD_ADDR_EXP 53
2925: PUSH
2926: LD_EXP 53
2930: PUSH
2931: LD_VAR 0 3
2935: ADD
2936: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 47
2944: PPUSH
2945: LD_INT 0
2947: PPUSH
2948: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2952: LD_INT 0
2954: PPUSH
2955: LD_EXP 33
2959: PPUSH
2960: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 3
2973: PPUSH
2974: CALL_OW 52
// end ;
2978: GO 2870
2980: POP
2981: POP
// end ; end_of_file
2982: LD_VAR 0 1
2986: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
2987: LD_INT 0
2989: PPUSH
2990: PPUSH
2991: PPUSH
2992: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
2993: LD_ADDR_VAR 0 3
2997: PUSH
2998: LD_INT 66
3000: PUSH
3001: LD_INT 87
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 66
3010: PUSH
3011: LD_INT 86
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PUSH
3018: LD_INT 67
3020: PUSH
3021: LD_INT 86
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 69
3030: PUSH
3031: LD_INT 87
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: LD_INT 70
3040: PUSH
3041: LD_INT 88
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 71
3050: PUSH
3051: LD_INT 89
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 72
3060: PUSH
3061: LD_INT 90
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 72
3070: PUSH
3071: LD_INT 91
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3088: LD_INT 280
3090: PPUSH
3091: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3095: LD_EXP 39
3099: PPUSH
3100: LD_STRING DStart-Bur-1
3102: PPUSH
3103: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3107: LD_EXP 47
3111: PPUSH
3112: LD_STRING DStart-Pla-1
3114: PPUSH
3115: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3119: LD_EXP 39
3123: PPUSH
3124: LD_STRING DStart-Bur-2
3126: PPUSH
3127: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3131: LD_EXP 47
3135: PPUSH
3136: LD_STRING DStart-Pla-2
3138: PPUSH
3139: CALL_OW 94
// x = 0 ;
3143: LD_ADDR_VAR 0 4
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3151: LD_ADDR_VAR 0 2
3155: PUSH
3156: LD_INT 22
3158: PUSH
3159: LD_INT 3
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: LD_INT 21
3168: PUSH
3169: LD_INT 1
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PPUSH
3180: CALL_OW 69
3184: PUSH
3185: FOR_IN
3186: IFFALSE 3274
// begin ComExitVehicle ( unit ) ;
3188: LD_VAR 0 2
3192: PPUSH
3193: CALL_OW 121
// wait ( 0 0$1 ) ;
3197: LD_INT 35
3199: PPUSH
3200: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3204: LD_VAR 0 2
3208: PPUSH
3209: LD_VAR 0 3
3213: PUSH
3214: LD_VAR 0 4
3218: ARRAY
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 3
3228: PUSH
3229: LD_VAR 0 4
3233: ARRAY
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: PPUSH
3239: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3243: LD_VAR 0 2
3247: PPUSH
3248: LD_INT 69
3250: PPUSH
3251: LD_INT 96
3253: PPUSH
3254: CALL_OW 178
// x = x + 1 ;
3258: LD_ADDR_VAR 0 4
3262: PUSH
3263: LD_VAR 0 4
3267: PUSH
3268: LD_INT 1
3270: PLUS
3271: ST_TO_ADDR
// end ;
3272: GO 3185
3274: POP
3275: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3276: LD_EXP 39
3280: PPUSH
3281: CALL_OW 87
// x = 0 ;
3285: LD_ADDR_VAR 0 4
3289: PUSH
3290: LD_INT 0
3292: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3293: LD_ADDR_VAR 0 2
3297: PUSH
3298: LD_INT 22
3300: PUSH
3301: LD_INT 3
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 21
3310: PUSH
3311: LD_INT 1
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PPUSH
3322: CALL_OW 69
3326: PUSH
3327: FOR_IN
3328: IFFALSE 3400
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3330: LD_VAR 0 2
3334: PPUSH
3335: LD_VAR 0 3
3339: PUSH
3340: LD_VAR 0 4
3344: ARRAY
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: LD_VAR 0 3
3354: PUSH
3355: LD_VAR 0 4
3359: ARRAY
3360: PUSH
3361: LD_INT 2
3363: ARRAY
3364: PPUSH
3365: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3369: LD_VAR 0 2
3373: PPUSH
3374: LD_INT 69
3376: PPUSH
3377: LD_INT 96
3379: PPUSH
3380: CALL_OW 178
// x = x + 1 ;
3384: LD_ADDR_VAR 0 4
3388: PUSH
3389: LD_VAR 0 4
3393: PUSH
3394: LD_INT 1
3396: PLUS
3397: ST_TO_ADDR
// end ;
3398: GO 3327
3400: POP
3401: POP
// wait ( 0 0$1 ) ;
3402: LD_INT 35
3404: PPUSH
3405: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3409: LD_EXP 39
3413: PPUSH
3414: LD_INT 70
3416: PPUSH
3417: LD_INT 90
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 7
3427: LESS
3428: PUSH
3429: LD_EXP 40
3433: PPUSH
3434: LD_INT 70
3436: PPUSH
3437: LD_INT 90
3439: PPUSH
3440: CALL_OW 297
3444: PUSH
3445: LD_INT 7
3447: LESS
3448: AND
3449: PUSH
3450: LD_EXP 41
3454: PPUSH
3455: LD_INT 70
3457: PPUSH
3458: LD_INT 90
3460: PPUSH
3461: CALL_OW 297
3465: PUSH
3466: LD_INT 7
3468: LESS
3469: AND
3470: PUSH
3471: LD_EXP 42
3475: PPUSH
3476: LD_INT 70
3478: PPUSH
3479: LD_INT 90
3481: PPUSH
3482: CALL_OW 297
3486: PUSH
3487: LD_INT 7
3489: LESS
3490: AND
3491: PUSH
3492: LD_EXP 46
3496: PPUSH
3497: LD_INT 70
3499: PPUSH
3500: LD_INT 90
3502: PPUSH
3503: CALL_OW 297
3507: PUSH
3508: LD_INT 7
3510: LESS
3511: AND
3512: IFFALSE 3276
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3514: LD_EXP 40
3518: PPUSH
3519: LD_STRING DDoubts-Kar-1
3521: PPUSH
3522: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3526: LD_EXP 41
3530: PPUSH
3531: LD_STRING DDoubts-Ptr-1
3533: PPUSH
3534: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-1 ) ;
3538: LD_EXP 39
3542: PPUSH
3543: LD_STRING DDoubts-Bur-1
3545: PPUSH
3546: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3550: LD_EXP 40
3554: PPUSH
3555: LD_STRING DDoubts-Kar-2
3557: PPUSH
3558: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3562: LD_EXP 42
3566: PPUSH
3567: LD_STRING DDoubts-Glb-2
3569: PPUSH
3570: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3574: LD_EXP 39
3578: PPUSH
3579: LD_STRING DDoubts-Bur-2
3581: PPUSH
3582: CALL_OW 88
// InGameOff ;
3586: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3590: LD_STRING MBegin
3592: PPUSH
3593: CALL_OW 337
// SaveForQuickRestart ;
3597: CALL_OW 22
// BuildBase ;
3601: CALL 10585 0 0
// end ;
3605: LD_VAR 0 1
3609: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3610: LD_EXP 8
3614: NOT
3615: IFFALSE 3861
3617: GO 3619
3619: DISABLE
3620: LD_INT 0
3622: PPUSH
// begin enable ;
3623: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ f_side , 2 ] ) do
3624: LD_ADDR_VAR 0 1
3628: PUSH
3629: LD_INT 34
3631: PPUSH
3632: LD_INT 22
3634: PUSH
3635: LD_INT 2
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PPUSH
3642: CALL_OW 70
3646: PUSH
3647: FOR_IN
3648: IFFALSE 3859
// if See ( 3 , unit ) then
3650: LD_INT 3
3652: PPUSH
3653: LD_VAR 0 1
3657: PPUSH
3658: CALL_OW 292
3662: IFFALSE 3857
// begin sawArabianBase = true ;
3664: LD_ADDR_EXP 8
3668: PUSH
3669: LD_INT 1
3671: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3672: LD_VAR 0 1
3676: PPUSH
3677: CALL_OW 87
// DialogueOn ;
3681: CALL_OW 6
// if IsOk ( Lipshchin ) then
3685: LD_EXP 46
3689: PPUSH
3690: CALL_OW 302
3694: IFFALSE 3708
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3696: LD_EXP 46
3700: PPUSH
3701: LD_STRING DArabs-RSol1-1
3703: PPUSH
3704: CALL_OW 88
// if IsOk ( Karamazov ) then
3708: LD_EXP 40
3712: PPUSH
3713: CALL_OW 302
3717: IFFALSE 3731
// Say ( Karamazov , DArabs-Kar-1 ) ;
3719: LD_EXP 40
3723: PPUSH
3724: LD_STRING DArabs-Kar-1
3726: PPUSH
3727: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3731: LD_EXP 39
3735: PPUSH
3736: LD_STRING DArabs-Bur-1
3738: PPUSH
3739: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3743: LD_EXP 47
3747: PPUSH
3748: LD_STRING DArabs-Pla-1
3750: PPUSH
3751: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3755: LD_EXP 50
3759: PPUSH
3760: LD_STRING DSurrender-Omar-1
3762: PPUSH
3763: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3767: LD_STRING QSurrender
3769: PPUSH
3770: CALL_OW 97
3774: PUSH
3775: LD_INT 1
3777: DOUBLE
3778: EQUAL
3779: IFTRUE 3783
3781: GO 3802
3783: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3784: LD_EXP 39
3788: PPUSH
3789: LD_STRING DQrSurrender#1-Bur-1
3791: PPUSH
3792: CALL_OW 88
// Lose_Survive ;
3796: CALL 17228 0 0
// end ; 2 :
3800: GO 3849
3802: LD_INT 2
3804: DOUBLE
3805: EQUAL
3806: IFTRUE 3810
3808: GO 3825
3810: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3811: LD_EXP 39
3815: PPUSH
3816: LD_STRING DQrSurrender#2-Bur-1
3818: PPUSH
3819: CALL_OW 88
3823: GO 3849
3825: LD_INT 3
3827: DOUBLE
3828: EQUAL
3829: IFTRUE 3833
3831: GO 3848
3833: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3834: LD_EXP 39
3838: PPUSH
3839: LD_STRING DQrSurrender#3-Bur-1
3841: PPUSH
3842: CALL_OW 88
3846: GO 3849
3848: POP
// DialogueOff ;
3849: CALL_OW 7
// exit ;
3853: POP
3854: POP
3855: GO 3861
// end ;
3857: GO 3647
3859: POP
3860: POP
// end ;
3861: PPOPN 1
3863: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3864: LD_EXP 9
3868: NOT
3869: PUSH
3870: LD_INT 1
3872: PPUSH
3873: LD_INT 3
3875: PPUSH
3876: CALL_OW 321
3880: PUSH
3881: LD_INT 1
3883: EQUAL
3884: AND
3885: IFFALSE 4250
3887: GO 3889
3889: DISABLE
3890: LD_INT 0
3892: PPUSH
3893: PPUSH
// begin enable ;
3894: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_INT 22
3902: PUSH
3903: LD_INT 0
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 25
3912: PUSH
3913: LD_INT 12
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 69
3928: PUSH
3929: FOR_IN
3930: IFFALSE 4248
// if See ( 3 , unit ) then
3932: LD_INT 3
3934: PPUSH
3935: LD_VAR 0 1
3939: PPUSH
3940: CALL_OW 292
3944: IFFALSE 4246
// begin sawApeman = true ;
3946: LD_ADDR_EXP 9
3950: PUSH
3951: LD_INT 1
3953: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3954: LD_ADDR_VAR 0 2
3958: PUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: LD_INT 26
3981: PUSH
3982: LD_INT 1
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 50
3991: PUSH
3992: EMPTY
3993: LIST
3994: PUSH
3995: LD_INT 2
3997: PUSH
3998: LD_INT 25
4000: PUSH
4001: LD_INT 1
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 25
4010: PUSH
4011: LD_INT 2
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: PUSH
4018: LD_INT 25
4020: PUSH
4021: LD_INT 3
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 4
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL_OW 69
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: CALL_OW 74
4066: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4067: LD_VAR 0 1
4071: PPUSH
4072: CALL_OW 87
// DialogueOn ;
4076: CALL_OW 6
// if nearUnit = Burlak then
4080: LD_VAR 0 2
4084: PUSH
4085: LD_EXP 39
4089: EQUAL
4090: IFFALSE 4106
// Say ( Burlak , DApeSpot-Bur-1a ) else
4092: LD_EXP 39
4096: PPUSH
4097: LD_STRING DApeSpot-Bur-1a
4099: PPUSH
4100: CALL_OW 88
4104: GO 4118
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4106: LD_VAR 0 2
4110: PPUSH
4111: LD_STRING DApeSpot-RSol1-1
4113: PPUSH
4114: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4118: LD_EXP 39
4122: PPUSH
4123: LD_STRING DApeSpot-Bur-1
4125: PPUSH
4126: CALL_OW 88
// if IsOK ( Petrosyan ) then
4130: LD_EXP 43
4134: PPUSH
4135: CALL_OW 302
4139: IFFALSE 4238
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4141: LD_EXP 43
4145: PPUSH
4146: LD_STRING DApeSpot-Pty-1
4148: PPUSH
4149: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4153: LD_INT 22
4155: PUSH
4156: LD_INT 3
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 3
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: LD_INT 30
4178: PUSH
4179: LD_INT 6
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 30
4188: PUSH
4189: LD_INT 7
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: LIST
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: PPUSH
4206: CALL_OW 69
4210: IFFALSE 4226
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4212: LD_EXP 43
4216: PPUSH
4217: LD_STRING DApeSpot-Pty-1a
4219: PPUSH
4220: CALL_OW 88
4224: GO 4238
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4226: LD_EXP 43
4230: PPUSH
4231: LD_STRING DApeSpot-Pty-1b
4233: PPUSH
4234: CALL_OW 88
// end ; DialogueOff ;
4238: CALL_OW 7
// exit ;
4242: POP
4243: POP
4244: GO 4250
// end ;
4246: GO 3929
4248: POP
4249: POP
// end ;
4250: PPOPN 2
4252: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) do
4253: LD_EXP 43
4257: PPUSH
4258: CALL_OW 302
4262: PUSH
4263: LD_INT 22
4265: PUSH
4266: LD_INT 3
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: LD_INT 21
4275: PUSH
4276: LD_INT 3
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 2
4285: PUSH
4286: LD_INT 30
4288: PUSH
4289: LD_INT 6
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 30
4298: PUSH
4299: LD_INT 7
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: PPUSH
4316: CALL_OW 69
4320: NOT
4321: AND
4322: IFFALSE 4339
4324: GO 4326
4326: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4327: LD_EXP 43
4331: PPUSH
4332: LD_STRING DApeLab-Pty-1
4334: PPUSH
4335: CALL_OW 88
4339: END
// export function Dial_ResearchApeLang ; begin
4340: LD_INT 0
4342: PPUSH
// DialogueOn ;
4343: CALL_OW 6
// if IsOK ( Petrosyan ) then
4347: LD_EXP 43
4351: PPUSH
4352: CALL_OW 302
4356: IFFALSE 4442
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4358: LD_EXP 43
4362: PPUSH
4363: LD_STRING DApeLangCompl-Pty-1
4365: PPUSH
4366: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4370: LD_EXP 39
4374: PPUSH
4375: LD_STRING DApeLangCompl-Bur-1
4377: PPUSH
4378: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4382: LD_EXP 43
4386: PPUSH
4387: LD_STRING DApeLangCompl-Pty-2
4389: PPUSH
4390: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4394: LD_EXP 39
4398: PPUSH
4399: LD_STRING DApeLangCompl-Bur-2
4401: PPUSH
4402: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4406: LD_EXP 43
4410: PPUSH
4411: LD_STRING DApeLangCompl-Pty-3
4413: PPUSH
4414: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4418: LD_EXP 39
4422: PPUSH
4423: LD_STRING DApeLangCompl-Bur-3
4425: PPUSH
4426: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4430: LD_EXP 43
4434: PPUSH
4435: LD_STRING DApeLangCompl-Pty-4
4437: PPUSH
4438: CALL_OW 88
// end ; DialogueOff ;
4442: CALL_OW 7
// end ;
4446: LD_VAR 0 1
4450: RET
// export function Dial_TameApe ( sci ) ; begin
4451: LD_INT 0
4453: PPUSH
// dial_tameApeBlocker = true ;
4454: LD_ADDR_EXP 10
4458: PUSH
4459: LD_INT 1
4461: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 258
4471: PUSH
4472: LD_INT 1
4474: EQUAL
4475: IFFALSE 4491
// Say ( sci , DApeTame-Sci1-1 ) else
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_STRING DApeTame-Sci1-1
4484: PPUSH
4485: CALL_OW 88
4489: GO 4655
// begin if IsOK ( Petrosyan ) then
4491: LD_EXP 43
4495: PPUSH
4496: CALL_OW 302
4500: IFFALSE 4516
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4502: LD_EXP 43
4506: PPUSH
4507: LD_STRING DApeTame-Sci1-1
4509: PPUSH
4510: CALL_OW 88
4514: GO 4655
// if IsOK ( Dolgov ) then
4516: LD_EXP 45
4520: PPUSH
4521: CALL_OW 302
4525: IFFALSE 4541
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4527: LD_EXP 45
4531: PPUSH
4532: LD_STRING DApeTame-Sci1-1
4534: PPUSH
4535: CALL_OW 88
4539: GO 4655
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4541: LD_INT 22
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 21
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 26
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 50
4573: PUSH
4574: EMPTY
4575: LIST
4576: PUSH
4577: LD_INT 2
4579: PUSH
4580: LD_INT 25
4582: PUSH
4583: LD_INT 1
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: PUSH
4590: LD_INT 25
4592: PUSH
4593: LD_INT 2
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: LD_INT 25
4602: PUSH
4603: LD_INT 3
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 25
4612: PUSH
4613: LD_INT 4
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PPUSH
4634: CALL_OW 69
4638: PPUSH
4639: LD_STRING DApeTame-Sci1-1
4641: PPUSH
4642: LD_STRING 
4644: PPUSH
4645: LD_INT 0
4647: PPUSH
4648: LD_INT 1
4650: PPUSH
4651: CALL 8772 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4655: LD_EXP 39
4659: PPUSH
4660: LD_STRING DApeTame-Bur-1
4662: PPUSH
4663: CALL_OW 88
// end ;
4667: LD_VAR 0 2
4671: RET
// export function Dial_ApeEnterLab ; begin
4672: LD_INT 0
4674: PPUSH
// dial_apeEnterLabBlocker = true ;
4675: LD_ADDR_EXP 11
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// DialogueOn ;
4683: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4687: LD_EXP 39
4691: PPUSH
4692: LD_STRING DApeWorkSol-Bur-1
4694: PPUSH
4695: CALL_OW 88
// if IsOK ( Petrosyan ) then
4699: LD_EXP 43
4703: PPUSH
4704: CALL_OW 302
4708: IFFALSE 4724
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4710: LD_EXP 43
4714: PPUSH
4715: LD_STRING DApeWorkSol-Pty-1
4717: PPUSH
4718: CALL_OW 88
4722: GO 4863
// if IsOK ( Dolgov ) then
4724: LD_EXP 45
4728: PPUSH
4729: CALL_OW 302
4733: IFFALSE 4749
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4735: LD_EXP 45
4739: PPUSH
4740: LD_STRING DApeWorkSol-Pty-1
4742: PPUSH
4743: CALL_OW 88
4747: GO 4863
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4749: LD_INT 22
4751: PUSH
4752: LD_INT 3
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PUSH
4759: LD_INT 21
4761: PUSH
4762: LD_INT 1
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PUSH
4769: LD_INT 26
4771: PUSH
4772: LD_INT 1
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 50
4781: PUSH
4782: EMPTY
4783: LIST
4784: PUSH
4785: LD_INT 2
4787: PUSH
4788: LD_INT 25
4790: PUSH
4791: LD_INT 1
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PUSH
4798: LD_INT 25
4800: PUSH
4801: LD_INT 2
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 25
4810: PUSH
4811: LD_INT 3
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 25
4820: PUSH
4821: LD_INT 4
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 69
4846: PPUSH
4847: LD_STRING DApeWorkSol-Pty-1
4849: PPUSH
4850: LD_STRING 
4852: PPUSH
4853: LD_INT 0
4855: PPUSH
4856: LD_INT 1
4858: PPUSH
4859: CALL 8772 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4863: LD_EXP 39
4867: PPUSH
4868: LD_STRING DApeWorkSol-Bur-2
4870: PPUSH
4871: CALL_OW 88
// DialogueOff ;
4875: CALL_OW 7
// end ;
4879: LD_VAR 0 1
4883: RET
// export function Dial_ResearchApePsych ; begin
4884: LD_INT 0
4886: PPUSH
// DialogueOn ;
4887: CALL_OW 6
// if IsOK ( Petrosyan ) then
4891: LD_EXP 43
4895: PPUSH
4896: CALL_OW 302
4900: IFFALSE 4916
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4902: LD_EXP 43
4906: PPUSH
4907: LD_STRING DApeWorkCompl-Pty-1
4909: PPUSH
4910: CALL_OW 88
4914: GO 5055
// if IsOK ( Dolgov ) then
4916: LD_EXP 45
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4941
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4927: LD_EXP 45
4931: PPUSH
4932: LD_STRING DApeWorkCompl-Pty-1
4934: PPUSH
4935: CALL_OW 88
4939: GO 5055
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 3
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 21
4953: PUSH
4954: LD_INT 1
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 26
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 50
4973: PUSH
4974: EMPTY
4975: LIST
4976: PUSH
4977: LD_INT 2
4979: PUSH
4980: LD_INT 25
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: LD_INT 25
4992: PUSH
4993: LD_INT 2
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PUSH
5000: LD_INT 25
5002: PUSH
5003: LD_INT 3
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: LD_INT 25
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 69
5038: PPUSH
5039: LD_STRING DApeWorkCompl-Pty-1
5041: PPUSH
5042: LD_STRING 
5044: PPUSH
5045: LD_INT 0
5047: PPUSH
5048: LD_INT 1
5050: PPUSH
5051: CALL 8772 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5055: LD_EXP 39
5059: PPUSH
5060: LD_STRING DApeWorkCompl-Bur-1
5062: PPUSH
5063: CALL_OW 88
// DialogueOff ;
5067: CALL_OW 7
// end ;
5071: LD_VAR 0 1
5075: RET
// export function Dial_ResearchApeAgress ; begin
5076: LD_INT 0
5078: PPUSH
// DialogueOn ;
5079: CALL_OW 6
// if IsOK ( Petrosyan ) then
5083: LD_EXP 43
5087: PPUSH
5088: CALL_OW 302
5092: IFFALSE 5108
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5094: LD_EXP 43
5098: PPUSH
5099: LD_STRING DApeSolCompl-Pty-1
5101: PPUSH
5102: CALL_OW 88
5106: GO 5247
// if IsOK ( Dolgov ) then
5108: LD_EXP 45
5112: PPUSH
5113: CALL_OW 302
5117: IFFALSE 5133
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5119: LD_EXP 45
5123: PPUSH
5124: LD_STRING DApeSolCompl-Pty-1
5126: PPUSH
5127: CALL_OW 88
5131: GO 5247
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5133: LD_INT 22
5135: PUSH
5136: LD_INT 3
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PUSH
5143: LD_INT 21
5145: PUSH
5146: LD_INT 1
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PUSH
5153: LD_INT 26
5155: PUSH
5156: LD_INT 1
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: LD_INT 50
5165: PUSH
5166: EMPTY
5167: LIST
5168: PUSH
5169: LD_INT 2
5171: PUSH
5172: LD_INT 25
5174: PUSH
5175: LD_INT 1
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 25
5184: PUSH
5185: LD_INT 2
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 25
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PUSH
5202: LD_INT 25
5204: PUSH
5205: LD_INT 4
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: PPUSH
5231: LD_STRING DApeSolCompl-Pty-1
5233: PPUSH
5234: LD_STRING 
5236: PPUSH
5237: LD_INT 0
5239: PPUSH
5240: LD_INT 1
5242: PPUSH
5243: CALL 8772 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5247: LD_EXP 39
5251: PPUSH
5252: LD_STRING DApeSolCompl-Bur-1
5254: PPUSH
5255: CALL_OW 88
// DialogueOff ;
5259: CALL_OW 7
// end ;
5263: LD_VAR 0 1
5267: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5268: LD_INT 3
5270: PPUSH
5271: LD_INT 74
5273: PPUSH
5274: LD_INT 115
5276: PPUSH
5277: CALL_OW 293
5281: IFFALSE 5412
5283: GO 5285
5285: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5286: LD_INT 22
5288: PUSH
5289: LD_INT 3
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 21
5298: PUSH
5299: LD_INT 1
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 26
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 50
5318: PUSH
5319: EMPTY
5320: LIST
5321: PUSH
5322: LD_INT 2
5324: PUSH
5325: LD_INT 25
5327: PUSH
5328: LD_INT 1
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 25
5337: PUSH
5338: LD_INT 2
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PUSH
5345: LD_INT 25
5347: PUSH
5348: LD_INT 3
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 4
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: PPUSH
5379: CALL_OW 69
5383: PPUSH
5384: LD_STRING DShipments-RSol1-1
5386: PPUSH
5387: LD_STRING 
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL 8772 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5400: LD_EXP 39
5404: PPUSH
5405: LD_STRING DShipments-Bur-1
5407: PPUSH
5408: CALL_OW 88
// end ;
5412: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5413: LD_INT 3
5415: PPUSH
5416: LD_INT 81
5418: PPUSH
5419: LD_INT 132
5421: PPUSH
5422: CALL_OW 293
5426: IFFALSE 5566
5428: GO 5430
5430: DISABLE
5431: LD_INT 0
5433: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5434: LD_ADDR_VAR 0 1
5438: PUSH
5439: LD_INT 22
5441: PUSH
5442: LD_INT 3
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PUSH
5449: LD_INT 21
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 26
5461: PUSH
5462: LD_INT 1
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 50
5471: PUSH
5472: EMPTY
5473: LIST
5474: PUSH
5475: LD_INT 2
5477: PUSH
5478: LD_INT 25
5480: PUSH
5481: LD_INT 1
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PUSH
5488: LD_INT 25
5490: PUSH
5491: LD_INT 2
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 25
5500: PUSH
5501: LD_INT 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 25
5510: PUSH
5511: LD_INT 4
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: PPUSH
5532: CALL_OW 69
5536: PPUSH
5537: LD_STRING DRoad-RSol1-1
5539: PPUSH
5540: LD_STRING 
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: CALL 8772 0 5
5553: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5554: LD_VAR 0 1
5558: PPUSH
5559: LD_STRING DRoad-RSol1-1a
5561: PPUSH
5562: CALL_OW 88
// end ;
5566: PPOPN 1
5568: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5569: LD_INT 33
5571: PPUSH
5572: LD_INT 22
5574: PUSH
5575: LD_INT 3
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 21
5584: PUSH
5585: LD_INT 1
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: PUSH
5592: LD_INT 26
5594: PUSH
5595: LD_INT 1
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: LD_INT 50
5604: PUSH
5605: EMPTY
5606: LIST
5607: PUSH
5608: LD_INT 2
5610: PUSH
5611: LD_INT 25
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 25
5623: PUSH
5624: LD_INT 2
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 25
5633: PUSH
5634: LD_INT 3
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 25
5643: PUSH
5644: LD_INT 4
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: PPUSH
5665: CALL_OW 70
5669: PUSH
5670: LD_EXP 39
5674: PUSH
5675: EMPTY
5676: LIST
5677: DIFF
5678: PUSH
5679: LD_INT 22
5681: PUSH
5682: LD_INT 3
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 21
5691: PUSH
5692: LD_INT 3
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 30
5701: PUSH
5702: LD_INT 0
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 50
5711: PUSH
5712: EMPTY
5713: LIST
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: PPUSH
5721: CALL_OW 69
5725: AND
5726: IFFALSE 5753
5728: GO 5730
5730: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5731: LD_INT 36
5733: PPUSH
5734: CALL 20710 0 1
// wait ( 0 0$1.5 ) ;
5738: LD_INT 52
5740: PPUSH
5741: CALL_OW 67
// stevensPlaced = true ;
5745: LD_ADDR_EXP 14
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// end ;
5753: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5754: LD_INT 3
5756: PPUSH
5757: LD_EXP 57
5761: PPUSH
5762: CALL_OW 292
5766: PUSH
5767: LD_EXP 14
5771: AND
5772: PUSH
5773: LD_EXP 24
5777: NOT
5778: AND
5779: IFFALSE 6121
5781: GO 5783
5783: DISABLE
5784: LD_INT 0
5786: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5787: LD_ADDR_VAR 0 1
5791: PUSH
5792: LD_INT 22
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 21
5804: PUSH
5805: LD_INT 1
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: LD_INT 26
5814: PUSH
5815: LD_INT 1
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: LD_INT 50
5824: PUSH
5825: EMPTY
5826: LIST
5827: PUSH
5828: LD_INT 2
5830: PUSH
5831: LD_INT 25
5833: PUSH
5834: LD_INT 1
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 25
5843: PUSH
5844: LD_INT 2
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PUSH
5851: LD_INT 25
5853: PUSH
5854: LD_INT 3
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 4
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: PPUSH
5885: CALL_OW 69
5889: PPUSH
5890: LD_EXP 57
5894: PPUSH
5895: CALL_OW 74
5899: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5900: LD_EXP 57
5904: PPUSH
5905: CALL_OW 87
// InGameOn ;
5909: CALL_OW 8
// DialogueOn ;
5913: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5917: LD_VAR 0 1
5921: PPUSH
5922: LD_STRING DStevens-RSol1-1
5924: PPUSH
5925: CALL_OW 88
// DialogueOff ;
5929: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5933: LD_INT 52
5935: PPUSH
5936: CALL_OW 67
// if IsOK ( Petrosyan ) then
5940: LD_EXP 43
5944: PPUSH
5945: CALL_OW 302
5949: IFFALSE 6117
// begin SetSide ( Stevens , 6 ) ;
5951: LD_EXP 57
5955: PPUSH
5956: LD_INT 6
5958: PPUSH
5959: CALL_OW 235
// DialogueOn ;
5963: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
5967: LD_EXP 57
5971: PPUSH
5972: LD_STRING DStevens-Huck-1
5974: PPUSH
5975: CALL_OW 88
// if nearUnit = Petrosyan then
5979: LD_VAR 0 1
5983: PUSH
5984: LD_EXP 43
5988: EQUAL
5989: IFFALSE 6085
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
5991: LD_EXP 43
5995: PPUSH
5996: LD_STRING DStevens-Pty-1a
5998: PPUSH
5999: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6003: LD_EXP 57
6007: PPUSH
6008: LD_STRING DStevens-Huck-2
6010: PPUSH
6011: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6015: LD_EXP 43
6019: PPUSH
6020: LD_STRING DStevens-Pty-2
6022: PPUSH
6023: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6027: LD_EXP 57
6031: PPUSH
6032: LD_STRING DStevens-Huck-3
6034: PPUSH
6035: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6039: LD_EXP 43
6043: PPUSH
6044: LD_STRING DStevens-Pty-3
6046: PPUSH
6047: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6051: LD_EXP 57
6055: PPUSH
6056: LD_STRING DStevens-Huck-4
6058: PPUSH
6059: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6063: LD_EXP 43
6067: PPUSH
6068: LD_STRING DStevens-Pty-4
6070: PPUSH
6071: CALL_OW 88
// stevensFollow = true ;
6075: LD_ADDR_EXP 15
6079: PUSH
6080: LD_INT 1
6082: ST_TO_ADDR
// end else
6083: GO 6113
// begin stevensFollow = true ;
6085: LD_ADDR_EXP 15
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6093: LD_ADDR_EXP 16
6097: PUSH
6098: LD_INT 1
6100: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6101: LD_EXP 43
6105: PPUSH
6106: LD_STRING DStevens-Pty-1
6108: PPUSH
6109: CALL_OW 88
// end ; DialogueOff ;
6113: CALL_OW 7
// end ; InGameOff ;
6117: CALL_OW 9
// end ;
6121: PPOPN 1
6123: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6124: LD_EXP 16
6128: PUSH
6129: LD_EXP 43
6133: PPUSH
6134: LD_EXP 57
6138: PPUSH
6139: CALL_OW 296
6143: PUSH
6144: LD_INT 20
6146: LESS
6147: AND
6148: PUSH
6149: LD_EXP 43
6153: PPUSH
6154: CALL_OW 302
6158: AND
6159: PUSH
6160: LD_EXP 24
6164: NOT
6165: AND
6166: IFFALSE 6271
6168: GO 6170
6170: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6171: LD_ADDR_EXP 16
6175: PUSH
6176: LD_INT 0
6178: ST_TO_ADDR
// DialogueOn ;
6179: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6183: LD_EXP 43
6187: PPUSH
6188: LD_STRING DStevens-Pty-1a
6190: PPUSH
6191: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6195: LD_EXP 57
6199: PPUSH
6200: LD_STRING DStevens-Huck-2
6202: PPUSH
6203: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6207: LD_EXP 43
6211: PPUSH
6212: LD_STRING DStevens-Pty-2
6214: PPUSH
6215: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6219: LD_EXP 57
6223: PPUSH
6224: LD_STRING DStevens-Huck-3
6226: PPUSH
6227: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6231: LD_EXP 43
6235: PPUSH
6236: LD_STRING DStevens-Pty-3
6238: PPUSH
6239: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6243: LD_EXP 57
6247: PPUSH
6248: LD_STRING DStevens-Huck-4
6250: PPUSH
6251: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6255: LD_EXP 43
6259: PPUSH
6260: LD_STRING DStevens-Pty-4
6262: PPUSH
6263: CALL_OW 88
// DialogueOff ;
6267: CALL_OW 7
// end ;
6271: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and IsOK ( Petrosyan ) and not finishMissionBool do
6272: LD_EXP 57
6276: PPUSH
6277: LD_EXP 39
6281: PPUSH
6282: CALL_OW 296
6286: PUSH
6287: LD_INT 15
6289: LESS
6290: PUSH
6291: LD_EXP 43
6295: PPUSH
6296: CALL_OW 302
6300: AND
6301: PUSH
6302: LD_EXP 24
6306: NOT
6307: AND
6308: IFFALSE 6523
6310: GO 6312
6312: DISABLE
// begin DialogueOn ;
6313: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6317: LD_EXP 43
6321: PPUSH
6322: LD_STRING DStevensBurlak-Pty-1
6324: PPUSH
6325: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6329: LD_EXP 39
6333: PPUSH
6334: LD_STRING DStevensBurlak-Bur-1
6336: PPUSH
6337: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6341: LD_EXP 43
6345: PPUSH
6346: LD_STRING DStevensBurlak-Pty-2
6348: PPUSH
6349: CALL_OW 88
// case Query ( QKill ) of 1 :
6353: LD_STRING QKill
6355: PPUSH
6356: CALL_OW 97
6360: PUSH
6361: LD_INT 1
6363: DOUBLE
6364: EQUAL
6365: IFTRUE 6369
6367: GO 6447
6369: POP
// begin stevensCanExitMap = true ;
6370: LD_ADDR_EXP 19
6374: PUSH
6375: LD_INT 1
6377: ST_TO_ADDR
// stevensFollow = false ;
6378: LD_ADDR_EXP 15
6382: PUSH
6383: LD_INT 0
6385: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6386: LD_EXP 39
6390: PPUSH
6391: LD_STRING DKill-1-Bur-1
6393: PPUSH
6394: CALL_OW 88
// if IsOK ( Gleb ) then
6398: LD_EXP 42
6402: PPUSH
6403: CALL_OW 302
6407: IFFALSE 6421
// Say ( Gleb , DKill-1-Glb-1 ) ;
6409: LD_EXP 42
6413: PPUSH
6414: LD_STRING DKill-1-Glb-1
6416: PPUSH
6417: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6421: LD_EXP 57
6425: PPUSH
6426: LD_INT 1
6428: PPUSH
6429: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6433: LD_EXP 57
6437: PPUSH
6438: LD_INT 37
6440: PPUSH
6441: CALL_OW 113
// end ; 2 :
6445: GO 6519
6447: LD_INT 2
6449: DOUBLE
6450: EQUAL
6451: IFTRUE 6455
6453: GO 6518
6455: POP
// begin stevensCanExitMap = true ;
6456: LD_ADDR_EXP 19
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// stevensFollow = false ;
6464: LD_ADDR_EXP 15
6468: PUSH
6469: LD_INT 0
6471: ST_TO_ADDR
// stevensDepot = true ;
6472: LD_ADDR_EXP 17
6476: PUSH
6477: LD_INT 1
6479: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6480: LD_EXP 39
6484: PPUSH
6485: LD_STRING DKill-2-Bur-1
6487: PPUSH
6488: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6492: LD_EXP 43
6496: PPUSH
6497: LD_STRING DKill-2-Pty-1
6499: PPUSH
6500: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6504: LD_EXP 39
6508: PPUSH
6509: LD_STRING DKill-2-Bur-2
6511: PPUSH
6512: CALL_OW 88
// end ; end ;
6516: GO 6519
6518: POP
// DialogueOff ;
6519: CALL_OW 7
// end ;
6523: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6524: LD_EXP 15
6528: IFFALSE 6668
6530: GO 6532
6532: DISABLE
6533: LD_INT 0
6535: PPUSH
// begin enable ;
6536: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6537: LD_ADDR_VAR 0 1
6541: PUSH
6542: LD_INT 22
6544: PUSH
6545: LD_INT 3
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 21
6554: PUSH
6555: LD_INT 1
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 50
6564: PUSH
6565: EMPTY
6566: LIST
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: LD_INT 25
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 25
6583: PUSH
6584: LD_INT 2
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 25
6593: PUSH
6594: LD_INT 3
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 25
6603: PUSH
6604: LD_INT 4
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PPUSH
6624: CALL_OW 69
6628: PPUSH
6629: LD_EXP 57
6633: PPUSH
6634: CALL_OW 74
6638: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6639: LD_EXP 57
6643: PPUSH
6644: LD_VAR 0 1
6648: PPUSH
6649: CALL_OW 250
6653: PPUSH
6654: LD_VAR 0 1
6658: PPUSH
6659: CALL_OW 251
6663: PPUSH
6664: CALL_OW 111
// end ;
6668: PPOPN 1
6670: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6671: LD_EXP 17
6675: PUSH
6676: LD_INT 22
6678: PUSH
6679: LD_INT 3
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: LD_INT 21
6688: PUSH
6689: LD_INT 3
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 30
6698: PUSH
6699: LD_INT 0
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 50
6708: PUSH
6709: EMPTY
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: PPUSH
6718: CALL_OW 69
6722: NOT
6723: AND
6724: IFFALSE 6751
6726: GO 6728
6728: DISABLE
// begin enable ;
6729: ENABLE
// SetSide ( Stevens , 6 ) ;
6730: LD_EXP 57
6734: PPUSH
6735: LD_INT 6
6737: PPUSH
6738: CALL_OW 235
// ComHold ( Stevens ) ;
6742: LD_EXP 57
6746: PPUSH
6747: CALL_OW 140
// end ;
6751: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6752: LD_EXP 17
6756: PUSH
6757: LD_INT 22
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 21
6769: PUSH
6770: LD_INT 3
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 0
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 50
6789: PUSH
6790: EMPTY
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: PPUSH
6799: CALL_OW 69
6803: AND
6804: IFFALSE 7367
6806: GO 6808
6808: DISABLE
6809: LD_INT 0
6811: PPUSH
6812: PPUSH
6813: PPUSH
// begin enable ;
6814: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6815: LD_ADDR_VAR 0 1
6819: PUSH
6820: LD_INT 22
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 21
6832: PUSH
6833: LD_INT 3
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 30
6842: PUSH
6843: LD_INT 0
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 50
6852: PUSH
6853: EMPTY
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: PUSH
6867: LD_INT 1
6869: ARRAY
6870: ST_TO_ADDR
// stevensFollow = false ;
6871: LD_ADDR_EXP 15
6875: PUSH
6876: LD_INT 0
6878: ST_TO_ADDR
// if not depot then
6879: LD_VAR 0 1
6883: NOT
6884: IFFALSE 6888
// exit ;
6886: GO 7367
// for depotUnit in depot do
6888: LD_ADDR_VAR 0 2
6892: PUSH
6893: LD_VAR 0 1
6897: PUSH
6898: FOR_IN
6899: IFFALSE 6925
// if not IsConstructed ( depotUnit ) then
6901: LD_VAR 0 2
6905: PPUSH
6906: CALL_OW 304
6910: NOT
6911: IFFALSE 6923
// constructDepot = depotUnit ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_VAR 0 2
6922: ST_TO_ADDR
6923: GO 6898
6925: POP
6926: POP
// if not constructDepot then
6927: LD_VAR 0 3
6931: NOT
6932: IFFALSE 6936
// exit ;
6934: GO 7367
// if not stevensWasInDepot then
6936: LD_EXP 18
6940: NOT
6941: IFFALSE 7081
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6943: LD_EXP 57
6947: PPUSH
6948: CALL_OW 310
6952: NOT
6953: PUSH
6954: LD_EXP 57
6958: PPUSH
6959: LD_VAR 0 1
6963: PPUSH
6964: CALL_OW 296
6968: PUSH
6969: LD_INT 8
6971: LESS
6972: NOT
6973: AND
6974: IFFALSE 7007
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
6976: LD_EXP 57
6980: PPUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: CALL_OW 250
6990: PPUSH
6991: LD_VAR 0 3
6995: PPUSH
6996: CALL_OW 251
7000: PPUSH
7001: CALL_OW 111
7005: GO 7079
// begin InGameOn ;
7007: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7011: LD_EXP 57
7015: PPUSH
7016: LD_INT 3
7018: PPUSH
7019: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7023: LD_EXP 57
7027: PPUSH
7028: LD_VAR 0 3
7032: PPUSH
7033: CALL_OW 120
// wait ( 0 0$1 ) ;
7037: LD_INT 35
7039: PPUSH
7040: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7044: LD_EXP 57
7048: PPUSH
7049: CALL_OW 310
7053: PUSH
7054: LD_EXP 57
7058: PPUSH
7059: CALL_OW 302
7063: NOT
7064: OR
7065: IFFALSE 7011
// InGameOff ;
7067: CALL_OW 9
// stevensWasInDepot = true ;
7071: LD_ADDR_EXP 18
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// end ; end else
7079: GO 7367
// begin if not IsInUnit ( Stevens ) then
7081: LD_EXP 57
7085: PPUSH
7086: CALL_OW 310
7090: NOT
7091: IFFALSE 7367
// begin DialogueOn ;
7093: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7097: LD_EXP 39
7101: PPUSH
7102: LD_STRING DRelease-Bur-1
7104: PPUSH
7105: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7109: LD_STRING QKillAgain
7111: PPUSH
7112: CALL_OW 97
7116: PUSH
7117: LD_INT 1
7119: DOUBLE
7120: EQUAL
7121: IFTRUE 7125
7123: GO 7194
7125: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7126: LD_EXP 39
7130: PPUSH
7131: LD_STRING DQrKillAgain#1-Bur-1
7133: PPUSH
7134: CALL_OW 88
// stevensCanExitMap = true ;
7138: LD_ADDR_EXP 19
7142: PUSH
7143: LD_INT 1
7145: ST_TO_ADDR
// stevensWasInDepot = false ;
7146: LD_ADDR_EXP 18
7150: PUSH
7151: LD_INT 0
7153: ST_TO_ADDR
// stevensDepot = false ;
7154: LD_ADDR_EXP 17
7158: PUSH
7159: LD_INT 0
7161: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7162: LD_EXP 57
7166: PPUSH
7167: LD_INT 1
7169: PPUSH
7170: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7174: LD_EXP 57
7178: PPUSH
7179: LD_INT 37
7181: PPUSH
7182: CALL_OW 113
// DialogueOff ;
7186: CALL_OW 7
// exit ;
7190: GO 7367
// end ; 2 :
7192: GO 7363
7194: LD_INT 2
7196: DOUBLE
7197: EQUAL
7198: IFTRUE 7202
7200: GO 7271
7202: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7203: LD_EXP 39
7207: PPUSH
7208: LD_STRING DQrKillAgain#2-Bur-1
7210: PPUSH
7211: CALL_OW 88
// stevensCanExitMap = true ;
7215: LD_ADDR_EXP 19
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// stevensWasInDepot = false ;
7223: LD_ADDR_EXP 18
7227: PUSH
7228: LD_INT 0
7230: ST_TO_ADDR
// stevensDepot = false ;
7231: LD_ADDR_EXP 17
7235: PUSH
7236: LD_INT 0
7238: ST_TO_ADDR
// SetSide ( Stevens , 6 ) ;
7239: LD_EXP 57
7243: PPUSH
7244: LD_INT 6
7246: PPUSH
7247: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7251: LD_EXP 57
7255: PPUSH
7256: LD_INT 37
7258: PPUSH
7259: CALL_OW 113
// DialogueOff ;
7263: CALL_OW 7
// exit ;
7267: GO 7367
// end ; 3 :
7269: GO 7363
7271: LD_INT 3
7273: DOUBLE
7274: EQUAL
7275: IFTRUE 7279
7277: GO 7362
7279: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7280: LD_EXP 39
7284: PPUSH
7285: LD_STRING DQrKillAgain#2-Bur-1a
7287: PPUSH
7288: CALL_OW 88
// DialogueOff ;
7292: CALL_OW 7
// InGameOn ;
7296: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7300: LD_EXP 57
7304: PPUSH
7305: LD_INT 3
7307: PPUSH
7308: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7312: LD_EXP 57
7316: PPUSH
7317: LD_VAR 0 3
7321: PPUSH
7322: CALL_OW 120
// wait ( 0 0$1 ) ;
7326: LD_INT 35
7328: PPUSH
7329: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7333: LD_EXP 57
7337: PPUSH
7338: CALL_OW 310
7342: PUSH
7343: LD_EXP 57
7347: PPUSH
7348: CALL_OW 302
7352: NOT
7353: OR
7354: IFFALSE 7300
// InGameOff ;
7356: CALL_OW 9
// end ; end ;
7360: GO 7363
7362: POP
// DialogueOff ;
7363: CALL_OW 7
// end ; end ; end ;
7367: PPOPN 3
7369: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7370: LD_EXP 19
7374: PUSH
7375: LD_EXP 57
7379: PPUSH
7380: LD_INT 37
7382: PPUSH
7383: CALL_OW 308
7387: AND
7388: IFFALSE 7435
7390: GO 7392
7392: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7393: LD_EXP 57
7397: PPUSH
7398: CALL_OW 255
7402: PUSH
7403: LD_INT 6
7405: EQUAL
7406: IFFALSE 7418
// stevensStatus = 1 else
7408: LD_ADDR_EXP 2
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
7416: GO 7426
// stevensStatus = 2 ;
7418: LD_ADDR_EXP 2
7422: PUSH
7423: LD_INT 2
7425: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7426: LD_EXP 57
7430: PPUSH
7431: CALL_OW 64
// end ;
7435: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7436: LD_INT 3
7438: PPUSH
7439: LD_INT 1
7441: PPUSH
7442: CALL_OW 292
7446: IFFALSE 7646
7448: GO 7450
7450: DISABLE
7451: LD_INT 0
7453: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_INT 1
7461: PPUSH
7462: LD_INT 2
7464: PPUSH
7465: CALL_OW 12
7469: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7470: LD_INT 1
7472: PPUSH
7473: CALL_OW 87
// DialogueOn ;
7477: CALL_OW 6
// if rnd = 1 then
7481: LD_VAR 0 1
7485: PUSH
7486: LD_INT 1
7488: EQUAL
7489: IFFALSE 7505
// Say ( Burlak , DMastodon-Bur-1 ) else
7491: LD_EXP 39
7495: PPUSH
7496: LD_STRING DMastodon-Bur-1
7498: PPUSH
7499: CALL_OW 88
7503: GO 7619
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7505: LD_INT 22
7507: PUSH
7508: LD_INT 3
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 21
7517: PUSH
7518: LD_INT 1
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 26
7527: PUSH
7528: LD_INT 1
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: LD_INT 50
7537: PUSH
7538: EMPTY
7539: LIST
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: LD_INT 25
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 25
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 25
7566: PUSH
7567: LD_INT 3
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 25
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: PPUSH
7603: LD_STRING DMastodon-RSol1-1
7605: PPUSH
7606: LD_STRING 
7608: PPUSH
7609: LD_INT 0
7611: PPUSH
7612: LD_INT 1
7614: PPUSH
7615: CALL 8772 0 5
// if IsOK ( Gleb ) then
7619: LD_EXP 42
7623: PPUSH
7624: CALL_OW 302
7628: IFFALSE 7642
// Say ( Gleb , DMastodon-Glb-1 ) ;
7630: LD_EXP 42
7634: PPUSH
7635: LD_STRING DMastodon-Glb-1
7637: PPUSH
7638: CALL_OW 88
// DialogueOff ;
7642: CALL_OW 7
// end ;
7646: PPOPN 1
7648: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7649: LD_INT 1
7651: PPUSH
7652: CALL_OW 302
7656: NOT
7657: IFFALSE 7736
7659: GO 7661
7661: DISABLE
// begin omarCanExitMap = true ;
7662: LD_ADDR_EXP 20
7666: PUSH
7667: LD_INT 1
7669: ST_TO_ADDR
// DialogueOn ;
7670: CALL_OW 6
// if IsOK ( Karamazov ) then
7674: LD_EXP 40
7678: PPUSH
7679: CALL_OW 302
7683: IFFALSE 7697
// Say ( Karamazov , DOmar-Kar-1 ) ;
7685: LD_EXP 40
7689: PPUSH
7690: LD_STRING DOmar-Kar-1
7692: PPUSH
7693: CALL_OW 88
// if IsOK ( Petrovova ) then
7697: LD_EXP 41
7701: PPUSH
7702: CALL_OW 302
7706: IFFALSE 7720
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7708: LD_EXP 41
7712: PPUSH
7713: LD_STRING DOmar-Ptr-1
7715: PPUSH
7716: CALL_OW 88
// DialogueOff ;
7720: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7724: LD_EXP 50
7728: PPUSH
7729: LD_INT 41
7731: PPUSH
7732: CALL_OW 113
// end ;
7736: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7737: LD_EXP 50
7741: PPUSH
7742: LD_INT 41
7744: PPUSH
7745: CALL_OW 308
7749: PUSH
7750: LD_EXP 20
7754: AND
7755: IFFALSE 7777
7757: GO 7759
7759: DISABLE
// begin RemoveUnit ( Omar ) ;
7760: LD_EXP 50
7764: PPUSH
7765: CALL_OW 64
// omarStatus = 1 ;
7769: LD_ADDR_EXP 1
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// end ;
7777: END
// every 0 0$1 trigger IsDead ( Omar ) do
7778: LD_EXP 50
7782: PPUSH
7783: CALL_OW 301
7787: IFFALSE 7945
7789: GO 7791
7791: DISABLE
// begin DialogueOn ;
7792: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7796: LD_INT 22
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: LD_INT 21
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 26
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: LD_INT 50
7828: PUSH
7829: EMPTY
7830: LIST
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: LD_INT 25
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 25
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 25
7857: PUSH
7858: LD_INT 3
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 25
7867: PUSH
7868: LD_INT 4
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: PPUSH
7894: LD_STRING DOmar-RSol1-1
7896: PPUSH
7897: LD_STRING 
7899: PPUSH
7900: LD_INT 0
7902: PPUSH
7903: LD_INT 1
7905: PPUSH
7906: CALL 8772 0 5
// wait ( 0 0$1 ) ;
7910: LD_INT 35
7912: PPUSH
7913: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
7917: LD_EXP 49
7921: PPUSH
7922: LD_STRING DOmar-Hke-1
7924: PPUSH
7925: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
7929: LD_EXP 39
7933: PPUSH
7934: LD_STRING DOmar-Bur-1
7936: PPUSH
7937: CALL_OW 88
// DialogueOff ;
7941: CALL_OW 7
// end ;
7945: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
7946: LD_EXP 50
7950: PPUSH
7951: CALL_OW 301
7955: PUSH
7956: LD_EXP 50
7960: PPUSH
7961: CALL_OW 305
7965: NOT
7966: OR
7967: PUSH
7968: LD_EXP 51
7972: PUSH
7973: LD_INT 3
7975: LESS
7976: AND
7977: IFFALSE 8128
7979: GO 7981
7981: DISABLE
// begin if actionTime < arabBreakthrough then
7982: LD_EXP 7
7986: PUSH
7987: LD_EXP 34
7991: LESS
7992: IFFALSE 8002
// fastBreakthrough = true ;
7994: LD_ADDR_EXP 23
7998: PUSH
7999: LD_INT 1
8001: ST_TO_ADDR
// DialogueOn ;
8002: CALL_OW 6
// if IsOK ( Petrovova ) then
8006: LD_EXP 41
8010: PPUSH
8011: CALL_OW 302
8015: IFFALSE 8029
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
8017: LD_EXP 41
8021: PPUSH
8022: LD_STRING DBreakthrough-Ptr-1
8024: PPUSH
8025: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
8029: LD_EXP 39
8033: PPUSH
8034: LD_STRING DBreakthrough-Bur-1
8036: PPUSH
8037: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
8041: LD_EXP 47
8045: PPUSH
8046: LD_STRING DBreakthrough-Pla-1
8048: PPUSH
8049: CALL_OW 94
// if fastBreakthrough then
8053: LD_EXP 23
8057: IFFALSE 8073
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8059: LD_EXP 47
8063: PPUSH
8064: LD_STRING DBreakthrough-Pla-1a
8066: PPUSH
8067: CALL_OW 94
8071: GO 8085
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8073: LD_EXP 47
8077: PPUSH
8078: LD_STRING DBreakthrough-Pla-1b
8080: PPUSH
8081: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8085: LD_EXP 47
8089: PPUSH
8090: LD_STRING DBreakthrough-Pla-1c
8092: PPUSH
8093: CALL_OW 94
// DialogueOff ;
8097: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8101: LD_STRING MAddLab
8103: PPUSH
8104: CALL_OW 337
// arabianCanExitMap = true ;
8108: LD_ADDR_EXP 21
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8116: LD_EXP 51
8120: PPUSH
8121: LD_INT 41
8123: PPUSH
8124: CALL_OW 113
// end ;
8128: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8129: LD_EXP 21
8133: IFFALSE 8198
8135: GO 8137
8137: DISABLE
8138: LD_INT 0
8140: PPUSH
// begin enable ;
8141: ENABLE
// for unit in arabianUnitsInBase do
8142: LD_ADDR_VAR 0 1
8146: PUSH
8147: LD_EXP 51
8151: PUSH
8152: FOR_IN
8153: IFFALSE 8196
// if IsInArea ( unit , ArabianExitArea ) then
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_INT 41
8162: PPUSH
8163: CALL_OW 308
8167: IFFALSE 8194
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8169: LD_ADDR_EXP 51
8173: PUSH
8174: LD_EXP 51
8178: PUSH
8179: LD_VAR 0 1
8183: DIFF
8184: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8185: LD_VAR 0 1
8189: PPUSH
8190: CALL_OW 64
// end ;
8194: GO 8152
8196: POP
8197: POP
// end ;
8198: PPOPN 1
8200: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8201: LD_EXP 12
8205: NOT
8206: IFFALSE 8444
8208: GO 8210
8210: DISABLE
8211: LD_INT 0
8213: PPUSH
// begin for unit in arabianPatrolVehicles do
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: LD_EXP 52
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8442
// if See ( 3 , unit ) then
8227: LD_INT 3
8229: PPUSH
8230: LD_VAR 0 1
8234: PPUSH
8235: CALL_OW 292
8239: IFFALSE 8440
// begin dial_southRoadBlocker = true ;
8241: LD_ADDR_EXP 12
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 87
// if IsOK ( Karamazov ) then
8258: LD_EXP 40
8262: PPUSH
8263: CALL_OW 302
8267: IFFALSE 8281
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8269: LD_EXP 40
8273: PPUSH
8274: LD_STRING DPatrol-Kar-1
8276: PPUSH
8277: CALL_OW 88
// if IsOK ( Petrovova ) then
8281: LD_EXP 41
8285: PPUSH
8286: CALL_OW 302
8290: IFFALSE 8304
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8292: LD_EXP 41
8296: PPUSH
8297: LD_STRING DPatrol-Ptr-1
8299: PPUSH
8300: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8304: LD_INT 22
8306: PUSH
8307: LD_INT 3
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 21
8316: PUSH
8317: LD_INT 1
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: LD_INT 26
8326: PUSH
8327: LD_INT 1
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 50
8336: PUSH
8337: EMPTY
8338: LIST
8339: PUSH
8340: LD_INT 2
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 1
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 2
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 25
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 25
8375: PUSH
8376: LD_INT 4
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: PPUSH
8397: CALL_OW 69
8401: PUSH
8402: LD_EXP 40
8406: DIFF
8407: PPUSH
8408: LD_STRING DPatrol-RSol1-1
8410: PPUSH
8411: LD_STRING 
8413: PPUSH
8414: LD_INT 0
8416: PPUSH
8417: LD_INT 1
8419: PPUSH
8420: CALL 8772 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8424: LD_EXP 39
8428: PPUSH
8429: LD_STRING DPatrol-Bur-1
8431: PPUSH
8432: CALL_OW 88
// exit ;
8436: POP
8437: POP
8438: GO 8444
// end ;
8440: GO 8224
8442: POP
8443: POP
// end ;
8444: PPOPN 1
8446: END
// every 10 10$0 do
8447: GO 8449
8449: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8450: CALL 2574 0 0
8454: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8455: LD_INT 0
8457: PPUSH
8458: PPUSH
// if debugMode then
8459: LD_EXP 32
8463: IFFALSE 8480
// unit := NewCharacter ( ident ) ;
8465: LD_ADDR_VAR 0 5
8469: PUSH
8470: LD_VAR 0 1
8474: PPUSH
8475: CALL_OW 25
8479: ST_TO_ADDR
// if exist_mode and not debugMode then
8480: LD_VAR 0 2
8484: PUSH
8485: LD_EXP 32
8489: NOT
8490: AND
8491: IFFALSE 8516
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8493: LD_ADDR_VAR 0 5
8497: PUSH
8498: LD_EXP 31
8502: PUSH
8503: LD_VAR 0 1
8507: STR
8508: PPUSH
8509: CALL_OW 34
8513: ST_TO_ADDR
8514: GO 8538
// if not debugMode then
8516: LD_EXP 32
8520: NOT
8521: IFFALSE 8538
// unit := NewCharacter ( ident ) ;
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 25
8537: ST_TO_ADDR
// if class then
8538: LD_VAR 0 3
8542: IFFALSE 8558
// SetClass ( unit , class ) ;
8544: LD_VAR 0 5
8548: PPUSH
8549: LD_VAR 0 3
8553: PPUSH
8554: CALL_OW 336
// result := unit ;
8558: LD_ADDR_VAR 0 4
8562: PUSH
8563: LD_VAR 0 5
8567: ST_TO_ADDR
// end ;
8568: LD_VAR 0 4
8572: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8573: LD_INT 0
8575: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8576: LD_VAR 0 1
8580: PPUSH
8581: CALL_OW 255
8585: PUSH
8586: LD_VAR 0 3
8590: EQUAL
8591: PUSH
8592: LD_VAR 0 1
8596: PPUSH
8597: CALL_OW 302
8601: AND
8602: IFFALSE 8624
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8604: LD_VAR 0 1
8608: PPUSH
8609: LD_EXP 30
8613: PUSH
8614: LD_VAR 0 2
8618: STR
8619: PPUSH
8620: CALL_OW 38
// end ;
8624: LD_VAR 0 4
8628: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8629: LD_INT 0
8631: PPUSH
8632: PPUSH
8633: PPUSH
// resultCharactersToSave = [ ] ;
8634: LD_ADDR_VAR 0 6
8638: PUSH
8639: EMPTY
8640: ST_TO_ADDR
// for unit in characters do
8641: LD_ADDR_VAR 0 5
8645: PUSH
8646: LD_VAR 0 1
8650: PUSH
8651: FOR_IN
8652: IFFALSE 8700
// if GetSide ( unit ) = side and IsOK ( unit ) then
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 255
8663: PUSH
8664: LD_VAR 0 3
8668: EQUAL
8669: PUSH
8670: LD_VAR 0 5
8674: PPUSH
8675: CALL_OW 302
8679: AND
8680: IFFALSE 8698
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8682: LD_ADDR_VAR 0 6
8686: PUSH
8687: LD_VAR 0 6
8691: PUSH
8692: LD_VAR 0 5
8696: ADD
8697: ST_TO_ADDR
8698: GO 8651
8700: POP
8701: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8702: LD_VAR 0 6
8706: PPUSH
8707: LD_EXP 30
8711: PUSH
8712: LD_VAR 0 2
8716: STR
8717: PPUSH
8718: CALL_OW 38
// end ;
8722: LD_VAR 0 4
8726: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8727: LD_INT 0
8729: PPUSH
8730: PPUSH
// for unit in units do
8731: LD_ADDR_VAR 0 5
8735: PUSH
8736: LD_VAR 0 1
8740: PUSH
8741: FOR_IN
8742: IFFALSE 8765
// PlaceUnitArea ( unit , area , spawnMode ) ;
8744: LD_VAR 0 5
8748: PPUSH
8749: LD_VAR 0 2
8753: PPUSH
8754: LD_VAR 0 3
8758: PPUSH
8759: CALL_OW 49
8763: GO 8741
8765: POP
8766: POP
// end ;
8767: LD_VAR 0 4
8771: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8772: LD_INT 0
8774: PPUSH
8775: PPUSH
8776: PPUSH
8777: PPUSH
// units = characters ;
8778: LD_ADDR_VAR 0 9
8782: PUSH
8783: LD_VAR 0 1
8787: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8788: LD_ADDR_VAR 0 9
8792: PUSH
8793: LD_VAR 0 9
8797: PUSH
8798: LD_EXP 39
8802: PUSH
8803: LD_EXP 40
8807: PUSH
8808: LD_EXP 41
8812: PUSH
8813: LD_EXP 42
8817: PUSH
8818: LD_EXP 43
8822: PUSH
8823: LD_EXP 44
8827: PUSH
8828: LD_EXP 45
8832: PUSH
8833: LD_EXP 46
8837: PUSH
8838: LD_EXP 57
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: DIFF
8854: ST_TO_ADDR
// if not units and not canTalkHero then
8855: LD_VAR 0 9
8859: NOT
8860: PUSH
8861: LD_VAR 0 5
8865: NOT
8866: AND
8867: IFFALSE 8871
// exit ;
8869: GO 9050
// if not units then
8871: LD_VAR 0 9
8875: NOT
8876: IFFALSE 8903
// units = characters diff [ Burlak , Stevens ] ;
8878: LD_ADDR_VAR 0 9
8882: PUSH
8883: LD_VAR 0 1
8887: PUSH
8888: LD_EXP 39
8892: PUSH
8893: LD_EXP 57
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: DIFF
8902: ST_TO_ADDR
// if not units and canTalkHero then
8903: LD_VAR 0 9
8907: NOT
8908: PUSH
8909: LD_VAR 0 5
8913: AND
8914: IFFALSE 8918
// exit ;
8916: GO 9050
// speaker := units [ rand ( 1 , units ) ] ;
8918: LD_ADDR_VAR 0 8
8922: PUSH
8923: LD_VAR 0 9
8927: PUSH
8928: LD_INT 1
8930: PPUSH
8931: LD_VAR 0 9
8935: PPUSH
8936: CALL_OW 12
8940: ARRAY
8941: ST_TO_ADDR
// if radio then
8942: LD_VAR 0 4
8946: IFFALSE 8995
// begin if GetSex ( speaker ) = sex_male then
8948: LD_VAR 0 8
8952: PPUSH
8953: CALL_OW 258
8957: PUSH
8958: LD_INT 1
8960: EQUAL
8961: IFFALSE 8979
// SayRadio ( speaker , dialogMID ) else
8963: LD_VAR 0 8
8967: PPUSH
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 94
8977: GO 8993
// SayRadio ( speaker , dialogFID ) ;
8979: LD_VAR 0 8
8983: PPUSH
8984: LD_VAR 0 3
8988: PPUSH
8989: CALL_OW 94
// end else
8993: GO 9040
// begin if GetSex ( speaker ) = sex_male then
8995: LD_VAR 0 8
8999: PPUSH
9000: CALL_OW 258
9004: PUSH
9005: LD_INT 1
9007: EQUAL
9008: IFFALSE 9026
// Say ( speaker , dialogMID ) else
9010: LD_VAR 0 8
9014: PPUSH
9015: LD_VAR 0 2
9019: PPUSH
9020: CALL_OW 88
9024: GO 9040
// Say ( speaker , dialogFID ) ;
9026: LD_VAR 0 8
9030: PPUSH
9031: LD_VAR 0 3
9035: PPUSH
9036: CALL_OW 88
// end ; result := speaker ;
9040: LD_ADDR_VAR 0 6
9044: PUSH
9045: LD_VAR 0 8
9049: ST_TO_ADDR
// end ;
9050: LD_VAR 0 6
9054: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9055: LD_INT 0
9057: PPUSH
9058: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9059: LD_ADDR_VAR 0 4
9063: PUSH
9064: LD_VAR 0 2
9068: PPUSH
9069: CALL_OW 254
9073: PUSH
9074: LD_INT 3
9076: MINUS
9077: ST_TO_ADDR
// if dir < 0 then
9078: LD_VAR 0 4
9082: PUSH
9083: LD_INT 0
9085: LESS
9086: IFFALSE 9102
// dir := 6 + dir ;
9088: LD_ADDR_VAR 0 4
9092: PUSH
9093: LD_INT 6
9095: PUSH
9096: LD_VAR 0 4
9100: PLUS
9101: ST_TO_ADDR
// SetDir ( un , dir ) ;
9102: LD_VAR 0 1
9106: PPUSH
9107: LD_VAR 0 4
9111: PPUSH
9112: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9116: LD_VAR 0 1
9120: PPUSH
9121: LD_VAR 0 2
9125: PPUSH
9126: CALL_OW 52
// result = un ;
9130: LD_ADDR_VAR 0 3
9134: PUSH
9135: LD_VAR 0 1
9139: ST_TO_ADDR
// end ;
9140: LD_VAR 0 3
9144: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9145: LD_INT 0
9147: PPUSH
9148: PPUSH
9149: PPUSH
9150: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9151: LD_ADDR_VAR 0 6
9155: PUSH
9156: LD_INT 34
9158: PUSH
9159: LD_INT 71
9161: PUSH
9162: LD_INT 70
9164: PUSH
9165: LD_INT 69
9167: PUSH
9168: LD_INT 39
9170: PUSH
9171: LD_INT 31
9173: PUSH
9174: LD_INT 14
9176: PUSH
9177: LD_INT 10
9179: PUSH
9180: LD_INT 40
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: ST_TO_ADDR
// resultWeapons = [ ] ;
9194: LD_ADDR_VAR 0 5
9198: PUSH
9199: EMPTY
9200: ST_TO_ADDR
// for i := 1 to weaponTechs do
9201: LD_ADDR_VAR 0 4
9205: PUSH
9206: DOUBLE
9207: LD_INT 1
9209: DEC
9210: ST_TO_ADDR
9211: LD_VAR 0 6
9215: PUSH
9216: FOR_TO
9217: IFFALSE 9404
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9219: LD_VAR 0 6
9223: PUSH
9224: LD_VAR 0 4
9228: ARRAY
9229: PPUSH
9230: LD_VAR 0 2
9234: PPUSH
9235: CALL_OW 482
9239: PUSH
9240: LD_VAR 0 6
9244: PUSH
9245: LD_VAR 0 4
9249: ARRAY
9250: PPUSH
9251: LD_VAR 0 1
9255: PPUSH
9256: CALL_OW 321
9260: PUSH
9261: LD_INT 2
9263: EQUAL
9264: AND
9265: IFFALSE 9402
// case nation of nation_american :
9267: LD_VAR 0 2
9271: PUSH
9272: LD_INT 1
9274: DOUBLE
9275: EQUAL
9276: IFTRUE 9280
9278: GO 9315
9280: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9281: LD_ADDR_VAR 0 5
9285: PUSH
9286: LD_VAR 0 5
9290: PUSH
9291: LD_VAR 0 6
9295: PUSH
9296: LD_VAR 0 4
9300: ARRAY
9301: PPUSH
9302: LD_VAR 0 2
9306: PPUSH
9307: CALL 9421 0 2
9311: ADD
9312: ST_TO_ADDR
9313: GO 9402
9315: LD_INT 2
9317: DOUBLE
9318: EQUAL
9319: IFTRUE 9323
9321: GO 9358
9323: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9324: LD_ADDR_VAR 0 5
9328: PUSH
9329: LD_VAR 0 5
9333: PUSH
9334: LD_VAR 0 6
9338: PUSH
9339: LD_VAR 0 4
9343: ARRAY
9344: PPUSH
9345: LD_VAR 0 2
9349: PPUSH
9350: CALL 9421 0 2
9354: ADD
9355: ST_TO_ADDR
9356: GO 9402
9358: LD_INT 3
9360: DOUBLE
9361: EQUAL
9362: IFTRUE 9366
9364: GO 9401
9366: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9367: LD_ADDR_VAR 0 5
9371: PUSH
9372: LD_VAR 0 5
9376: PUSH
9377: LD_VAR 0 6
9381: PUSH
9382: LD_VAR 0 4
9386: ARRAY
9387: PPUSH
9388: LD_VAR 0 2
9392: PPUSH
9393: CALL 9421 0 2
9397: ADD
9398: ST_TO_ADDR
9399: GO 9402
9401: POP
// end ;
9402: GO 9216
9404: POP
9405: POP
// result = resultWeapons ;
9406: LD_ADDR_VAR 0 3
9410: PUSH
9411: LD_VAR 0 5
9415: ST_TO_ADDR
// end ;
9416: LD_VAR 0 3
9420: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9421: LD_INT 0
9423: PPUSH
// case tech of tech_AdvMet :
9424: LD_VAR 0 1
9428: PUSH
9429: LD_INT 34
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9465
9437: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9438: LD_ADDR_VAR 0 3
9442: PUSH
9443: LD_INT 6
9445: PUSH
9446: LD_STRING 
9448: PUSH
9449: LD_INT 46
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: PUSH
9457: LD_VAR 0 2
9461: ARRAY
9462: ST_TO_ADDR
9463: GO 9754
9465: LD_INT 71
9467: DOUBLE
9468: EQUAL
9469: IFTRUE 9473
9471: GO 9501
9473: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9474: LD_ADDR_VAR 0 3
9478: PUSH
9479: LD_STRING 
9481: PUSH
9482: LD_STRING 
9484: PUSH
9485: LD_INT 47
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: PUSH
9493: LD_VAR 0 2
9497: ARRAY
9498: ST_TO_ADDR
9499: GO 9754
9501: LD_INT 70
9503: DOUBLE
9504: EQUAL
9505: IFTRUE 9509
9507: GO 9537
9509: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9510: LD_ADDR_VAR 0 3
9514: PUSH
9515: LD_STRING 
9517: PUSH
9518: LD_INT 26
9520: PUSH
9521: LD_STRING 
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: PUSH
9529: LD_VAR 0 2
9533: ARRAY
9534: ST_TO_ADDR
9535: GO 9754
9537: LD_INT 69
9539: DOUBLE
9540: EQUAL
9541: IFTRUE 9545
9543: GO 9573
9545: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9546: LD_ADDR_VAR 0 3
9550: PUSH
9551: LD_INT 4
9553: PUSH
9554: LD_INT 25
9556: PUSH
9557: LD_INT 43
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: PUSH
9565: LD_VAR 0 2
9569: ARRAY
9570: ST_TO_ADDR
9571: GO 9754
9573: LD_INT 39
9575: DOUBLE
9576: EQUAL
9577: IFTRUE 9581
9579: GO 9609
9581: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_INT 5
9589: PUSH
9590: LD_INT 27
9592: PUSH
9593: LD_INT 44
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_VAR 0 2
9605: ARRAY
9606: ST_TO_ADDR
9607: GO 9754
9609: LD_INT 31
9611: DOUBLE
9612: EQUAL
9613: IFTRUE 9617
9615: GO 9645
9617: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9618: LD_ADDR_VAR 0 3
9622: PUSH
9623: LD_STRING 
9625: PUSH
9626: LD_STRING 
9628: PUSH
9629: LD_INT 49
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: PUSH
9637: LD_VAR 0 2
9641: ARRAY
9642: ST_TO_ADDR
9643: GO 9754
9645: LD_INT 14
9647: DOUBLE
9648: EQUAL
9649: IFTRUE 9653
9651: GO 9681
9653: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9654: LD_ADDR_VAR 0 3
9658: PUSH
9659: LD_INT 10
9661: PUSH
9662: LD_STRING 
9664: PUSH
9665: LD_STRING 
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: LD_VAR 0 2
9677: ARRAY
9678: ST_TO_ADDR
9679: GO 9754
9681: LD_INT 10
9683: DOUBLE
9684: EQUAL
9685: IFTRUE 9689
9687: GO 9717
9689: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9690: LD_ADDR_VAR 0 3
9694: PUSH
9695: LD_INT 9
9697: PUSH
9698: LD_STRING 
9700: PUSH
9701: LD_STRING 
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: PUSH
9709: LD_VAR 0 2
9713: ARRAY
9714: ST_TO_ADDR
9715: GO 9754
9717: LD_INT 40
9719: DOUBLE
9720: EQUAL
9721: IFTRUE 9725
9723: GO 9753
9725: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9726: LD_ADDR_VAR 0 3
9730: PUSH
9731: LD_INT 7
9733: PUSH
9734: LD_INT 28
9736: PUSH
9737: LD_INT 45
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: LD_VAR 0 2
9749: ARRAY
9750: ST_TO_ADDR
9751: GO 9754
9753: POP
// end ;
9754: LD_VAR 0 3
9758: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9759: LD_INT 0
9761: PPUSH
9762: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9763: LD_ADDR_VAR 0 2
9767: PUSH
9768: LD_VAR 0 1
9772: PPUSH
9773: LD_INT 1
9775: PPUSH
9776: CALL_OW 289
9780: PUSH
9781: LD_VAR 0 1
9785: PPUSH
9786: LD_INT 2
9788: PPUSH
9789: CALL_OW 289
9793: PUSH
9794: LD_VAR 0 1
9798: PPUSH
9799: LD_INT 3
9801: PPUSH
9802: CALL_OW 289
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: ST_TO_ADDR
// end ; end_of_file
9812: LD_VAR 0 2
9816: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9817: LD_VAR 0 1
9821: PPUSH
9822: CALL_OW 255
9826: PUSH
9827: LD_INT 3
9829: EQUAL
9830: PUSH
9831: LD_VAR 0 1
9835: PPUSH
9836: CALL_OW 266
9840: PUSH
9841: LD_INT 0
9843: EQUAL
9844: AND
9845: IFFALSE 9859
// SetBname ( building , bukharin ) ;
9847: LD_VAR 0 1
9851: PPUSH
9852: LD_STRING bukharin
9854: PPUSH
9855: CALL_OW 500
// if GetSide ( building ) = 2 then
9859: LD_VAR 0 1
9863: PPUSH
9864: CALL_OW 255
9868: PUSH
9869: LD_INT 2
9871: EQUAL
9872: IFFALSE 10013
// begin if GetBType ( building ) = b_lab then
9874: LD_VAR 0 1
9878: PPUSH
9879: CALL_OW 266
9883: PUSH
9884: LD_INT 6
9886: EQUAL
9887: IFFALSE 9901
// ComUpgradeLab ( building , b_lab_weapon ) ;
9889: LD_VAR 0 1
9893: PPUSH
9894: LD_INT 10
9896: PPUSH
9897: CALL_OW 147
// if GetBType ( building ) = b_workshop then
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 266
9910: PUSH
9911: LD_INT 2
9913: EQUAL
9914: IFFALSE 9925
// ComUpgrade ( building ) ;
9916: LD_VAR 0 1
9920: PPUSH
9921: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
9925: LD_VAR 0 1
9929: PPUSH
9930: CALL_OW 266
9934: PUSH
9935: LD_INT 17
9937: EQUAL
9938: IFFALSE 10013
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 2 , 2 , 3 ] [ Difficulty ] , 1 , [ 1 , 1 , 2 ] [ Difficulty ] , true ) ;
9940: LD_INT 2
9942: PPUSH
9943: LD_INT 2
9945: PPUSH
9946: LD_EXP 51
9950: PPUSH
9951: LD_INT 34
9953: PPUSH
9954: LD_INT 39
9956: PPUSH
9957: LD_INT 40
9959: PPUSH
9960: LD_INT 35
9962: PPUSH
9963: LD_INT 2
9965: PUSH
9966: LD_INT 2
9968: PUSH
9969: LD_INT 3
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: LD_OWVAR 67
9981: ARRAY
9982: PPUSH
9983: LD_INT 1
9985: PPUSH
9986: LD_INT 1
9988: PUSH
9989: LD_INT 1
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: PUSH
10000: LD_OWVAR 67
10004: ARRAY
10005: PPUSH
10006: LD_INT 1
10008: PPUSH
10009: CALL 10829 0 11
// end ; end ;
10013: PPOPN 1
10015: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
10016: LD_VAR 0 2
10020: PPUSH
10021: CALL_OW 255
10025: PUSH
10026: LD_INT 3
10028: EQUAL
10029: PUSH
10030: LD_VAR 0 2
10034: PPUSH
10035: CALL_OW 248
10039: PUSH
10040: LD_INT 3
10042: EQUAL
10043: AND
10044: PUSH
10045: LD_EXP 10
10049: NOT
10050: AND
10051: IFFALSE 10062
// Dial_TameApe ( human ) ;
10053: LD_VAR 0 2
10057: PPUSH
10058: CALL 4451 0 1
// end ;
10062: PPOPN 2
10064: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10065: LD_VAR 0 1
10069: PUSH
10070: LD_INT 1
10072: EQUAL
10073: PUSH
10074: LD_VAR 0 2
10078: PPUSH
10079: CALL_OW 255
10083: PUSH
10084: LD_INT 3
10086: EQUAL
10087: AND
10088: IFFALSE 10094
// Dial_ResearchApeLang ;
10090: CALL 4340 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10094: LD_VAR 0 1
10098: PUSH
10099: LD_INT 2
10101: EQUAL
10102: PUSH
10103: LD_VAR 0 2
10107: PPUSH
10108: CALL_OW 255
10112: PUSH
10113: LD_INT 3
10115: EQUAL
10116: AND
10117: IFFALSE 10123
// Dial_ResearchApePsych ;
10119: CALL 4884 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10123: LD_VAR 0 1
10127: PUSH
10128: LD_INT 11
10130: EQUAL
10131: PUSH
10132: LD_VAR 0 2
10136: PPUSH
10137: CALL_OW 255
10141: PUSH
10142: LD_INT 3
10144: EQUAL
10145: AND
10146: IFFALSE 10152
// Dial_ResearchApeAgress ;
10148: CALL 5076 0 0
// end ;
10152: PPOPN 2
10154: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10155: LD_VAR 0 2
10159: PPUSH
10160: CALL_OW 255
10164: PUSH
10165: LD_INT 3
10167: EQUAL
10168: PUSH
10169: LD_VAR 0 2
10173: PPUSH
10174: CALL_OW 257
10178: PUSH
10179: LD_INT 12
10181: EQUAL
10182: AND
10183: PUSH
10184: LD_VAR 0 1
10188: PPUSH
10189: CALL_OW 266
10193: PUSH
10194: LD_INT 6
10196: EQUAL
10197: PUSH
10198: LD_VAR 0 1
10202: PPUSH
10203: CALL_OW 266
10207: PUSH
10208: LD_INT 7
10210: EQUAL
10211: OR
10212: AND
10213: PUSH
10214: LD_EXP 11
10218: NOT
10219: AND
10220: IFFALSE 10226
// Dial_ApeEnterLab ;
10222: CALL 4672 0 0
// end ;
10226: PPOPN 2
10228: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10229: LD_VAR 0 1
10233: PUSH
10234: LD_EXP 52
10238: IN
10239: IFFALSE 10257
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10241: LD_ADDR_EXP 52
10245: PUSH
10246: LD_EXP 52
10250: PUSH
10251: LD_VAR 0 1
10255: DIFF
10256: ST_TO_ADDR
// if unit in arabianHovercrafts then
10257: LD_VAR 0 1
10261: PUSH
10262: LD_EXP 53
10266: IN
10267: IFFALSE 10285
// arabianHovercrafts = arabianHovercrafts diff unit ;
10269: LD_ADDR_EXP 53
10273: PUSH
10274: LD_EXP 53
10278: PUSH
10279: LD_VAR 0 1
10283: DIFF
10284: ST_TO_ADDR
// if unit in arabianPatrolTroops then
10285: LD_VAR 0 1
10289: PUSH
10290: LD_EXP 54
10294: IN
10295: IFFALSE 10313
// arabianPatrolTroops = arabianPatrolTroops diff unit ;
10297: LD_ADDR_EXP 54
10301: PUSH
10302: LD_EXP 54
10306: PUSH
10307: LD_VAR 0 1
10311: DIFF
10312: ST_TO_ADDR
// end ;
10313: PPOPN 1
10315: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10316: LD_VAR 0 1
10320: PUSH
10321: LD_EXP 51
10325: IN
10326: IFFALSE 10344
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10328: LD_ADDR_EXP 51
10332: PUSH
10333: LD_EXP 51
10337: PUSH
10338: LD_VAR 0 1
10342: DIFF
10343: ST_TO_ADDR
// if unit = Burlak then
10344: LD_VAR 0 1
10348: PUSH
10349: LD_EXP 39
10353: EQUAL
10354: IFFALSE 10360
// Lose_Burlak ;
10356: CALL 17213 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10360: LD_INT 22
10362: PUSH
10363: LD_INT 3
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: LD_INT 21
10372: PUSH
10373: LD_INT 1
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 23
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PPUSH
10395: CALL_OW 69
10399: PUSH
10400: LD_INT 6
10402: LESS
10403: IFFALSE 10409
// Lose_Survive ;
10405: CALL 17228 0 0
// if GetType ( unit ) = unit_vehicle and GetSide ( unit ) = 2 and GetChassis ( unit ) = ar_hovercraft then
10409: LD_VAR 0 1
10413: PPUSH
10414: CALL_OW 247
10418: PUSH
10419: LD_INT 2
10421: EQUAL
10422: PUSH
10423: LD_VAR 0 1
10427: PPUSH
10428: CALL_OW 255
10432: PUSH
10433: LD_INT 2
10435: EQUAL
10436: AND
10437: PUSH
10438: LD_VAR 0 1
10442: PPUSH
10443: CALL_OW 265
10447: PUSH
10448: LD_INT 11
10450: EQUAL
10451: AND
10452: IFFALSE 10468
// achievement_DestroyedHovercrafts = achievement_DestroyedHovercrafts + 1 ;
10454: LD_ADDR_EXP 25
10458: PUSH
10459: LD_EXP 25
10463: PUSH
10464: LD_INT 1
10466: PLUS
10467: ST_TO_ADDR
// end ;
10468: PPOPN 1
10470: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10471: LD_VAR 0 1
10475: PUSH
10476: LD_INT 3
10478: EQUAL
10479: PUSH
10480: LD_VAR 0 2
10484: PUSH
10485: LD_INT 6
10487: EQUAL
10488: AND
10489: PUSH
10490: LD_VAR 0 1
10494: PUSH
10495: LD_INT 6
10497: EQUAL
10498: PUSH
10499: LD_VAR 0 2
10503: PUSH
10504: LD_INT 3
10506: EQUAL
10507: AND
10508: OR
10509: PUSH
10510: LD_EXP 57
10514: PPUSH
10515: CALL_OW 255
10519: PUSH
10520: LD_INT 6
10522: EQUAL
10523: AND
10524: IFFALSE 10582
// begin stevensFollow = false ;
10526: LD_ADDR_EXP 15
10530: PUSH
10531: LD_INT 0
10533: ST_TO_ADDR
// stevensCanExitMap = true ;
10534: LD_ADDR_EXP 19
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// stevensWasInDepot = false ;
10542: LD_ADDR_EXP 18
10546: PUSH
10547: LD_INT 0
10549: ST_TO_ADDR
// stevensDepot = false ;
10550: LD_ADDR_EXP 17
10554: PUSH
10555: LD_INT 0
10557: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10558: LD_EXP 57
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10570: LD_EXP 57
10574: PPUSH
10575: LD_INT 37
10577: PPUSH
10578: CALL_OW 113
// end ; end ; end_of_file
10582: PPOPN 2
10584: END
// export function BuildBase ; var engs ; begin
10585: LD_INT 0
10587: PPUSH
10588: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10589: LD_ADDR_VAR 0 2
10593: PUSH
10594: LD_INT 22
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 21
10606: PUSH
10607: LD_INT 1
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 25
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: PPUSH
10629: CALL_OW 69
10633: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10634: LD_VAR 0 2
10638: PPUSH
10639: LD_INT 4
10641: PPUSH
10642: LD_INT 129
10644: PPUSH
10645: LD_INT 74
10647: PPUSH
10648: LD_INT 2
10650: PPUSH
10651: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10655: LD_VAR 0 2
10659: PPUSH
10660: LD_INT 26
10662: PPUSH
10663: LD_INT 128
10665: PPUSH
10666: LD_INT 53
10668: PPUSH
10669: LD_INT 2
10671: PPUSH
10672: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 127 , 56 , 1 ) ;
10676: LD_VAR 0 2
10680: PPUSH
10681: LD_INT 26
10683: PPUSH
10684: LD_INT 127
10686: PPUSH
10687: LD_INT 56
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10697: LD_VAR 0 2
10701: PPUSH
10702: LD_INT 6
10704: PPUSH
10705: LD_INT 138
10707: PPUSH
10708: LD_INT 78
10710: PPUSH
10711: LD_INT 5
10713: PPUSH
10714: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10718: LD_VAR 0 2
10722: PPUSH
10723: LD_INT 2
10725: PPUSH
10726: LD_INT 137
10728: PPUSH
10729: LD_INT 63
10731: PPUSH
10732: LD_INT 4
10734: PPUSH
10735: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10739: LD_VAR 0 2
10743: PPUSH
10744: LD_INT 23
10746: PPUSH
10747: LD_INT 137
10749: PPUSH
10750: LD_INT 60
10752: PPUSH
10753: LD_INT 3
10755: PPUSH
10756: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10760: LD_VAR 0 2
10764: PPUSH
10765: LD_INT 16
10767: PPUSH
10768: LD_INT 140
10770: PPUSH
10771: LD_INT 66
10773: PPUSH
10774: LD_INT 5
10776: PPUSH
10777: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10781: LD_VAR 0 2
10785: PPUSH
10786: LD_INT 17
10788: PPUSH
10789: LD_INT 133
10791: PPUSH
10792: LD_INT 59
10794: PPUSH
10795: LD_INT 2
10797: PPUSH
10798: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10802: LD_INT 1
10804: PUSH
10805: LD_EXP 50
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: LD_INT 128
10816: PPUSH
10817: LD_INT 66
10819: PPUSH
10820: CALL_OW 111
// end ;
10824: LD_VAR 0 1
10828: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , offensiveReadyCounter , target1 , target2 , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
10835: PPUSH
10836: PPUSH
10837: PPUSH
10838: PPUSH
10839: PPUSH
10840: PPUSH
10841: PPUSH
10842: PPUSH
10843: PPUSH
10844: PPUSH
10845: PPUSH
10846: PPUSH
10847: PPUSH
10848: PPUSH
10849: PPUSH
10850: PPUSH
10851: PPUSH
10852: PPUSH
10853: PPUSH
10854: PPUSH
10855: PPUSH
10856: PPUSH
10857: PPUSH
10858: PPUSH
10859: PPUSH
10860: PPUSH
10861: PPUSH
10862: PPUSH
// personel = [ ] ;
10863: LD_ADDR_VAR 0 18
10867: PUSH
10868: EMPTY
10869: ST_TO_ADDR
// vehicles = [ ] ;
10870: LD_ADDR_VAR 0 24
10874: PUSH
10875: EMPTY
10876: ST_TO_ADDR
// for unit in basePersonel do
10877: LD_ADDR_VAR 0 17
10881: PUSH
10882: LD_VAR 0 3
10886: PUSH
10887: FOR_IN
10888: IFFALSE 10936
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
10890: LD_ADDR_VAR 0 18
10894: PUSH
10895: LD_VAR 0 18
10899: PUSH
10900: LD_VAR 0 17
10904: PUSH
10905: LD_VAR 0 17
10909: PPUSH
10910: CALL_OW 310
10914: PUSH
10915: LD_VAR 0 17
10919: PPUSH
10920: CALL_OW 302
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: ADD
10933: ST_TO_ADDR
10934: GO 10887
10936: POP
10937: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
10938: LD_ADDR_VAR 0 23
10942: PUSH
10943: LD_VAR 0 4
10947: PPUSH
10948: LD_INT 22
10950: PUSH
10951: LD_VAR 0 1
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 21
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 50
10972: PUSH
10973: EMPTY
10974: LIST
10975: PUSH
10976: LD_INT 3
10978: PUSH
10979: LD_INT 2
10981: PUSH
10982: LD_INT 31
10984: PUSH
10985: LD_INT 31
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 34
10994: PUSH
10995: LD_INT 12
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: LD_INT 34
11004: PUSH
11005: LD_INT 51
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 34
11014: PUSH
11015: LD_INT 32
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: PPUSH
11039: CALL_OW 70
11043: PUSH
11044: LD_EXP 52
11048: DIFF
11049: PUSH
11050: FOR_IN
11051: IFFALSE 11099
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11053: LD_ADDR_VAR 0 24
11057: PUSH
11058: LD_VAR 0 24
11062: PUSH
11063: LD_VAR 0 23
11067: PUSH
11068: LD_VAR 0 23
11072: PPUSH
11073: CALL_OW 310
11077: PUSH
11078: LD_VAR 0 23
11082: PPUSH
11083: CALL_OW 302
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: ADD
11096: ST_TO_ADDR
11097: GO 11050
11099: POP
11100: POP
// repeat soldiers = [ ] ;
11101: LD_ADDR_VAR 0 19
11105: PUSH
11106: EMPTY
11107: ST_TO_ADDR
// engineers = [ ] ;
11108: LD_ADDR_VAR 0 20
11112: PUSH
11113: EMPTY
11114: ST_TO_ADDR
// mechanics = [ ] ;
11115: LD_ADDR_VAR 0 21
11119: PUSH
11120: EMPTY
11121: ST_TO_ADDR
// scientists = [ ] ;
11122: LD_ADDR_VAR 0 22
11126: PUSH
11127: EMPTY
11128: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11129: LD_ADDR_VAR 0 33
11133: PUSH
11134: LD_VAR 0 4
11138: PPUSH
11139: LD_INT 22
11141: PUSH
11142: LD_VAR 0 1
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 21
11153: PUSH
11154: LD_INT 3
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 50
11163: PUSH
11164: EMPTY
11165: LIST
11166: PUSH
11167: LD_INT 2
11169: PUSH
11170: LD_INT 30
11172: PUSH
11173: LD_INT 0
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 30
11182: PUSH
11183: LD_INT 1
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: PPUSH
11201: CALL_OW 70
11205: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11206: LD_ADDR_VAR 0 34
11210: PUSH
11211: LD_VAR 0 4
11215: PPUSH
11216: LD_INT 22
11218: PUSH
11219: LD_VAR 0 1
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 21
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 50
11240: PUSH
11241: EMPTY
11242: LIST
11243: PUSH
11244: LD_INT 2
11246: PUSH
11247: LD_INT 30
11249: PUSH
11250: LD_INT 2
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 30
11259: PUSH
11260: LD_INT 3
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 70
11282: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11283: LD_ADDR_VAR 0 35
11287: PUSH
11288: LD_VAR 0 4
11292: PPUSH
11293: LD_INT 22
11295: PUSH
11296: LD_VAR 0 1
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 21
11307: PUSH
11308: LD_INT 3
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 50
11317: PUSH
11318: EMPTY
11319: LIST
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 30
11326: PUSH
11327: LD_INT 6
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 30
11336: PUSH
11337: LD_INT 7
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 30
11346: PUSH
11347: LD_INT 8
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 70
11370: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11371: LD_ADDR_VAR 0 36
11375: PUSH
11376: LD_VAR 0 4
11380: PPUSH
11381: LD_INT 22
11383: PUSH
11384: LD_VAR 0 1
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 21
11395: PUSH
11396: LD_INT 3
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 50
11405: PUSH
11406: EMPTY
11407: LIST
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: LD_INT 30
11414: PUSH
11415: LD_INT 31
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 30
11424: PUSH
11425: LD_INT 32
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: PPUSH
11443: CALL_OW 70
11447: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11448: LD_ADDR_VAR 0 37
11452: PUSH
11453: LD_VAR 0 4
11457: PPUSH
11458: LD_INT 22
11460: PUSH
11461: LD_VAR 0 1
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: LD_INT 21
11472: PUSH
11473: LD_INT 3
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 50
11482: PUSH
11483: EMPTY
11484: LIST
11485: PUSH
11486: LD_INT 2
11488: PUSH
11489: LD_INT 30
11491: PUSH
11492: LD_INT 4
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 30
11501: PUSH
11502: LD_INT 5
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 70
11524: ST_TO_ADDR
// for i := 1 to personel do
11525: LD_ADDR_VAR 0 13
11529: PUSH
11530: DOUBLE
11531: LD_INT 1
11533: DEC
11534: ST_TO_ADDR
11535: LD_VAR 0 18
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11747
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11543: LD_VAR 0 18
11547: PUSH
11548: LD_VAR 0 13
11552: ARRAY
11553: PUSH
11554: LD_INT 1
11556: ARRAY
11557: PPUSH
11558: CALL_OW 256
11562: PUSH
11563: LD_INT 1000
11565: EQUAL
11566: IFFALSE 11608
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11568: LD_ADDR_VAR 0 18
11572: PUSH
11573: LD_VAR 0 18
11577: PPUSH
11578: LD_VAR 0 13
11582: PUSH
11583: LD_VAR 0 18
11587: PUSH
11588: LD_VAR 0 13
11592: ARRAY
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL 28285 0 3
11605: ST_TO_ADDR
// end else
11606: GO 11695
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11608: LD_VAR 0 18
11612: PUSH
11613: LD_VAR 0 13
11617: ARRAY
11618: PUSH
11619: LD_INT 1
11621: ARRAY
11622: PPUSH
11623: CALL_OW 256
11627: PUSH
11628: LD_INT 950
11630: LESSEQUAL
11631: IFFALSE 11695
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
11633: LD_ADDR_VAR 0 18
11637: PUSH
11638: LD_VAR 0 18
11642: PPUSH
11643: LD_VAR 0 13
11647: PUSH
11648: LD_VAR 0 18
11652: PUSH
11653: LD_VAR 0 13
11657: ARRAY
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PPUSH
11663: LD_INT 0
11665: PPUSH
11666: CALL 28285 0 3
11670: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11671: LD_VAR 0 18
11675: PUSH
11676: LD_VAR 0 13
11680: ARRAY
11681: PUSH
11682: LD_INT 1
11684: ARRAY
11685: PPUSH
11686: LD_VAR 0 5
11690: PPUSH
11691: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11695: LD_VAR 0 18
11699: PUSH
11700: LD_VAR 0 13
11704: ARRAY
11705: PUSH
11706: LD_INT 1
11708: ARRAY
11709: PPUSH
11710: CALL_OW 256
11714: PUSH
11715: LD_INT 250
11717: LESS
11718: IFFALSE 11745
// personel = personel diff [ personel [ i ] ] ;
11720: LD_ADDR_VAR 0 18
11724: PUSH
11725: LD_VAR 0 18
11729: PUSH
11730: LD_VAR 0 18
11734: PUSH
11735: LD_VAR 0 13
11739: ARRAY
11740: PUSH
11741: EMPTY
11742: LIST
11743: DIFF
11744: ST_TO_ADDR
// end ;
11745: GO 11540
11747: POP
11748: POP
// for i := 1 to vehicles do
11749: LD_ADDR_VAR 0 13
11753: PUSH
11754: DOUBLE
11755: LD_INT 1
11757: DEC
11758: ST_TO_ADDR
11759: LD_VAR 0 24
11763: PUSH
11764: FOR_TO
11765: IFFALSE 12151
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
11767: LD_VAR 0 24
11771: PUSH
11772: LD_VAR 0 13
11776: ARRAY
11777: PUSH
11778: LD_INT 1
11780: ARRAY
11781: PPUSH
11782: CALL_OW 261
11786: PUSH
11787: LD_INT 50
11789: LESS
11790: IFFALSE 11814
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
11792: LD_VAR 0 24
11796: PUSH
11797: LD_VAR 0 13
11801: ARRAY
11802: PUSH
11803: LD_INT 1
11805: ARRAY
11806: PPUSH
11807: LD_INT 100
11809: PPUSH
11810: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11814: LD_VAR 0 24
11818: PUSH
11819: LD_VAR 0 13
11823: ARRAY
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: CALL_OW 256
11833: PUSH
11834: LD_INT 1000
11836: EQUAL
11837: IFFALSE 12012
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11839: LD_VAR 0 24
11843: PUSH
11844: LD_VAR 0 13
11848: ARRAY
11849: PUSH
11850: LD_INT 1
11852: ARRAY
11853: PPUSH
11854: CALL_OW 263
11858: PUSH
11859: LD_INT 1
11861: EQUAL
11862: IFFALSE 11920
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
11864: LD_VAR 0 24
11868: PUSH
11869: LD_VAR 0 13
11873: ARRAY
11874: PUSH
11875: LD_INT 2
11877: ARRAY
11878: PPUSH
11879: CALL_OW 310
11883: NOT
11884: IFFALSE 11920
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
11886: LD_VAR 0 24
11890: PUSH
11891: LD_VAR 0 13
11895: ARRAY
11896: PUSH
11897: LD_INT 2
11899: ARRAY
11900: PPUSH
11901: LD_VAR 0 24
11905: PUSH
11906: LD_VAR 0 13
11910: ARRAY
11911: PUSH
11912: LD_INT 1
11914: ARRAY
11915: PPUSH
11916: CALL_OW 120
// if offensiveunits < vehiclesToAttackAmount then
11920: LD_VAR 0 27
11924: PUSH
11925: LD_VAR 0 10
11929: LESS
11930: IFFALSE 11972
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
11932: LD_ADDR_VAR 0 24
11936: PUSH
11937: LD_VAR 0 24
11941: PPUSH
11942: LD_VAR 0 13
11946: PUSH
11947: LD_VAR 0 24
11951: PUSH
11952: LD_VAR 0 13
11956: ARRAY
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PPUSH
11962: LD_INT 3
11964: PPUSH
11965: CALL 28285 0 3
11969: ST_TO_ADDR
11970: GO 12010
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
11972: LD_ADDR_VAR 0 24
11976: PUSH
11977: LD_VAR 0 24
11981: PPUSH
11982: LD_VAR 0 13
11986: PUSH
11987: LD_VAR 0 24
11991: PUSH
11992: LD_VAR 0 13
11996: ARRAY
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PPUSH
12002: LD_INT 2
12004: PPUSH
12005: CALL 28285 0 3
12009: ST_TO_ADDR
// end else
12010: GO 12099
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12012: LD_VAR 0 24
12016: PUSH
12017: LD_VAR 0 13
12021: ARRAY
12022: PUSH
12023: LD_INT 1
12025: ARRAY
12026: PPUSH
12027: CALL_OW 256
12031: PUSH
12032: LD_INT 650
12034: LESSEQUAL
12035: IFFALSE 12099
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12037: LD_ADDR_VAR 0 24
12041: PUSH
12042: LD_VAR 0 24
12046: PPUSH
12047: LD_VAR 0 13
12051: PUSH
12052: LD_VAR 0 24
12056: PUSH
12057: LD_VAR 0 13
12061: ARRAY
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PPUSH
12067: LD_INT 0
12069: PPUSH
12070: CALL 28285 0 3
12074: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12075: LD_VAR 0 24
12079: PUSH
12080: LD_VAR 0 13
12084: ARRAY
12085: PUSH
12086: LD_INT 1
12088: ARRAY
12089: PPUSH
12090: LD_VAR 0 6
12094: PPUSH
12095: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12099: LD_VAR 0 24
12103: PUSH
12104: LD_VAR 0 13
12108: ARRAY
12109: PUSH
12110: LD_INT 1
12112: ARRAY
12113: PPUSH
12114: CALL_OW 256
12118: PUSH
12119: LD_INT 250
12121: LESS
12122: IFFALSE 12149
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12124: LD_ADDR_VAR 0 24
12128: PUSH
12129: LD_VAR 0 24
12133: PUSH
12134: LD_VAR 0 24
12138: PUSH
12139: LD_VAR 0 13
12143: ARRAY
12144: PUSH
12145: EMPTY
12146: LIST
12147: DIFF
12148: ST_TO_ADDR
// end ;
12149: GO 11764
12151: POP
12152: POP
// for i := 1 to personel do
12153: LD_ADDR_VAR 0 13
12157: PUSH
12158: DOUBLE
12159: LD_INT 1
12161: DEC
12162: ST_TO_ADDR
12163: LD_VAR 0 18
12167: PUSH
12168: FOR_TO
12169: IFFALSE 12210
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12171: LD_ADDR_VAR 0 19
12175: PUSH
12176: LD_VAR 0 19
12180: PUSH
12181: LD_VAR 0 18
12185: PUSH
12186: LD_VAR 0 13
12190: ARRAY
12191: PPUSH
12192: LD_INT 25
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PPUSH
12202: CALL_OW 72
12206: ADD
12207: ST_TO_ADDR
12208: GO 12168
12210: POP
12211: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12212: LD_VAR 0 19
12216: PUSH
12217: LD_VAR 0 36
12221: PPUSH
12222: LD_INT 3
12224: PUSH
12225: LD_INT 59
12227: PUSH
12228: EMPTY
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PPUSH
12235: CALL_OW 72
12239: AND
12240: IFFALSE 12528
// begin for i := 1 to personel do
12242: LD_ADDR_VAR 0 13
12246: PUSH
12247: DOUBLE
12248: LD_INT 1
12250: DEC
12251: ST_TO_ADDR
12252: LD_VAR 0 18
12256: PUSH
12257: FOR_TO
12258: IFFALSE 12524
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12260: LD_VAR 0 18
12264: PUSH
12265: LD_VAR 0 13
12269: ARRAY
12270: PUSH
12271: LD_INT 1
12273: ARRAY
12274: PPUSH
12275: CALL_OW 257
12279: PUSH
12280: LD_INT 1
12282: EQUAL
12283: PUSH
12284: LD_VAR 0 18
12288: PUSH
12289: LD_VAR 0 13
12293: ARRAY
12294: PUSH
12295: LD_INT 3
12297: ARRAY
12298: PUSH
12299: LD_INT 1
12301: EQUAL
12302: AND
12303: IFFALSE 12522
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12305: LD_VAR 0 18
12309: PUSH
12310: LD_VAR 0 13
12314: ARRAY
12315: PUSH
12316: LD_INT 1
12318: ARRAY
12319: PPUSH
12320: CALL_OW 437
12324: IFFALSE 12425
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12326: LD_VAR 0 18
12330: PUSH
12331: LD_VAR 0 13
12335: ARRAY
12336: PUSH
12337: LD_INT 1
12339: ARRAY
12340: PPUSH
12341: CALL_OW 437
12345: PUSH
12346: LD_INT 1
12348: ARRAY
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: PUSH
12354: LD_STRING e
12356: EQUAL
12357: PUSH
12358: LD_VAR 0 18
12362: PUSH
12363: LD_VAR 0 13
12367: ARRAY
12368: PUSH
12369: LD_INT 1
12371: ARRAY
12372: PPUSH
12373: CALL_OW 437
12377: PUSH
12378: LD_INT 1
12380: ARRAY
12381: PUSH
12382: LD_INT 4
12384: ARRAY
12385: PPUSH
12386: CALL_OW 266
12390: PUSH
12391: LD_INT 4
12393: PUSH
12394: LD_INT 5
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: IN
12401: AND
12402: IFFALSE 12425
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12404: LD_VAR 0 18
12408: PUSH
12409: LD_VAR 0 13
12413: ARRAY
12414: PUSH
12415: LD_INT 1
12417: ARRAY
12418: PPUSH
12419: EMPTY
12420: PPUSH
12421: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12425: LD_ADDR_VAR 0 40
12429: PUSH
12430: LD_VAR 0 36
12434: PPUSH
12435: LD_INT 3
12437: PUSH
12438: LD_INT 59
12440: PUSH
12441: EMPTY
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 72
12452: PUSH
12453: FOR_IN
12454: IFFALSE 12520
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12456: LD_VAR 0 18
12460: PUSH
12461: LD_VAR 0 13
12465: ARRAY
12466: PUSH
12467: LD_INT 1
12469: ARRAY
12470: PPUSH
12471: CALL_OW 310
12475: PPUSH
12476: CALL_OW 266
12480: PUSH
12481: LD_INT 31
12483: PUSH
12484: LD_INT 32
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: IN
12491: NOT
12492: IFFALSE 12518
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12494: LD_VAR 0 18
12498: PUSH
12499: LD_VAR 0 13
12503: ARRAY
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: LD_VAR 0 40
12513: PPUSH
12514: CALL_OW 120
12518: GO 12453
12520: POP
12521: POP
// end ; end ;
12522: GO 12257
12524: POP
12525: POP
// end else
12526: GO 12743
// if soldiers and barracks then
12528: LD_VAR 0 19
12532: PUSH
12533: LD_VAR 0 37
12537: AND
12538: IFFALSE 12743
// for i := 1 to personel do
12540: LD_ADDR_VAR 0 13
12544: PUSH
12545: DOUBLE
12546: LD_INT 1
12548: DEC
12549: ST_TO_ADDR
12550: LD_VAR 0 18
12554: PUSH
12555: FOR_TO
12556: IFFALSE 12741
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12558: LD_VAR 0 18
12562: PUSH
12563: LD_VAR 0 13
12567: ARRAY
12568: PUSH
12569: LD_INT 1
12571: ARRAY
12572: PPUSH
12573: CALL_OW 257
12577: PUSH
12578: LD_INT 1
12580: EQUAL
12581: PUSH
12582: LD_VAR 0 18
12586: PUSH
12587: LD_VAR 0 13
12591: ARRAY
12592: PUSH
12593: LD_INT 3
12595: ARRAY
12596: PUSH
12597: LD_INT 1
12599: EQUAL
12600: AND
12601: PUSH
12602: LD_VAR 0 18
12606: PUSH
12607: LD_VAR 0 13
12611: ARRAY
12612: PUSH
12613: LD_INT 1
12615: ARRAY
12616: PPUSH
12617: LD_INT 56
12619: PUSH
12620: EMPTY
12621: LIST
12622: PPUSH
12623: CALL_OW 72
12627: AND
12628: IFFALSE 12739
// begin if not personel [ i ] [ 2 ] then
12630: LD_VAR 0 18
12634: PUSH
12635: LD_VAR 0 13
12639: ARRAY
12640: PUSH
12641: LD_INT 2
12643: ARRAY
12644: NOT
12645: IFFALSE 12705
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12647: LD_ADDR_VAR 0 18
12651: PUSH
12652: LD_VAR 0 18
12656: PPUSH
12657: LD_VAR 0 13
12661: PUSH
12662: LD_VAR 0 18
12666: PUSH
12667: LD_VAR 0 13
12671: ARRAY
12672: PUSH
12673: LD_INT 1
12675: MINUS
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PPUSH
12681: LD_VAR 0 37
12685: PUSH
12686: LD_INT 1
12688: PPUSH
12689: LD_VAR 0 37
12693: PPUSH
12694: CALL_OW 12
12698: ARRAY
12699: PPUSH
12700: CALL 28285 0 3
12704: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12705: LD_VAR 0 18
12709: PUSH
12710: LD_VAR 0 13
12714: ARRAY
12715: PUSH
12716: LD_INT 1
12718: ARRAY
12719: PPUSH
12720: LD_VAR 0 18
12724: PUSH
12725: LD_VAR 0 13
12729: ARRAY
12730: PUSH
12731: LD_INT 2
12733: ARRAY
12734: PPUSH
12735: CALL_OW 120
// end ;
12739: GO 12555
12741: POP
12742: POP
// for i := 1 to personel do
12743: LD_ADDR_VAR 0 13
12747: PUSH
12748: DOUBLE
12749: LD_INT 1
12751: DEC
12752: ST_TO_ADDR
12753: LD_VAR 0 18
12757: PUSH
12758: FOR_TO
12759: IFFALSE 12800
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12761: LD_ADDR_VAR 0 20
12765: PUSH
12766: LD_VAR 0 20
12770: PUSH
12771: LD_VAR 0 18
12775: PUSH
12776: LD_VAR 0 13
12780: ARRAY
12781: PPUSH
12782: LD_INT 25
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PPUSH
12792: CALL_OW 72
12796: ADD
12797: ST_TO_ADDR
12798: GO 12758
12800: POP
12801: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12802: LD_VAR 0 20
12806: PUSH
12807: LD_VAR 0 4
12811: PPUSH
12812: LD_INT 22
12814: PUSH
12815: LD_VAR 0 1
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: LD_INT 21
12826: PUSH
12827: LD_INT 3
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 3
12836: PUSH
12837: LD_INT 24
12839: PUSH
12840: LD_INT 1000
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: LIST
12855: PPUSH
12856: CALL_OW 70
12860: AND
12861: IFFALSE 13137
// begin for i := 1 to personel do
12863: LD_ADDR_VAR 0 13
12867: PUSH
12868: DOUBLE
12869: LD_INT 1
12871: DEC
12872: ST_TO_ADDR
12873: LD_VAR 0 18
12877: PUSH
12878: FOR_TO
12879: IFFALSE 13133
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
12881: LD_VAR 0 18
12885: PUSH
12886: LD_VAR 0 13
12890: ARRAY
12891: PUSH
12892: LD_INT 1
12894: ARRAY
12895: PPUSH
12896: CALL_OW 257
12900: PUSH
12901: LD_INT 2
12903: EQUAL
12904: PUSH
12905: LD_VAR 0 18
12909: PUSH
12910: LD_VAR 0 13
12914: ARRAY
12915: PUSH
12916: LD_INT 3
12918: ARRAY
12919: PUSH
12920: LD_INT 1
12922: EQUAL
12923: AND
12924: IFFALSE 13131
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12926: LD_VAR 0 18
12930: PUSH
12931: LD_VAR 0 13
12935: ARRAY
12936: PUSH
12937: LD_INT 1
12939: ARRAY
12940: PPUSH
12941: CALL_OW 437
12945: IFFALSE 13001
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
12947: LD_VAR 0 18
12951: PUSH
12952: LD_VAR 0 13
12956: ARRAY
12957: PUSH
12958: LD_INT 1
12960: ARRAY
12961: PPUSH
12962: CALL_OW 437
12966: PUSH
12967: LD_INT 1
12969: ARRAY
12970: PUSH
12971: LD_INT 1
12973: ARRAY
12974: PUSH
12975: LD_STRING e
12977: EQUAL
12978: IFFALSE 13001
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12980: LD_VAR 0 18
12984: PUSH
12985: LD_VAR 0 13
12989: ARRAY
12990: PUSH
12991: LD_INT 1
12993: ARRAY
12994: PPUSH
12995: EMPTY
12996: PPUSH
12997: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13001: LD_VAR 0 18
13005: PUSH
13006: LD_VAR 0 13
13010: ARRAY
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PPUSH
13016: CALL_OW 310
13020: IFFALSE 13041
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13022: LD_VAR 0 18
13026: PUSH
13027: LD_VAR 0 13
13031: ARRAY
13032: PUSH
13033: LD_INT 1
13035: ARRAY
13036: PPUSH
13037: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13041: LD_ADDR_VAR 0 38
13045: PUSH
13046: LD_VAR 0 4
13050: PPUSH
13051: LD_INT 22
13053: PUSH
13054: LD_VAR 0 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 21
13065: PUSH
13066: LD_INT 3
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 3
13075: PUSH
13076: LD_INT 24
13078: PUSH
13079: LD_INT 1000
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: PPUSH
13095: CALL_OW 70
13099: PUSH
13100: FOR_IN
13101: IFFALSE 13129
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13103: LD_VAR 0 18
13107: PUSH
13108: LD_VAR 0 13
13112: ARRAY
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: LD_VAR 0 38
13122: PPUSH
13123: CALL_OW 190
13127: GO 13100
13129: POP
13130: POP
// end ;
13131: GO 12878
13133: POP
13134: POP
// end else
13135: GO 13399
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13137: LD_VAR 0 20
13141: PUSH
13142: LD_VAR 0 20
13146: PPUSH
13147: LD_INT 56
13149: PUSH
13150: EMPTY
13151: LIST
13152: PPUSH
13153: CALL_OW 72
13157: AND
13158: PUSH
13159: LD_VAR 0 33
13163: AND
13164: IFFALSE 13399
// for i := 1 to personel do
13166: LD_ADDR_VAR 0 13
13170: PUSH
13171: DOUBLE
13172: LD_INT 1
13174: DEC
13175: ST_TO_ADDR
13176: LD_VAR 0 18
13180: PUSH
13181: FOR_TO
13182: IFFALSE 13397
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13184: LD_VAR 0 18
13188: PUSH
13189: LD_VAR 0 13
13193: ARRAY
13194: PUSH
13195: LD_INT 1
13197: ARRAY
13198: PPUSH
13199: CALL_OW 257
13203: PUSH
13204: LD_INT 2
13206: EQUAL
13207: PUSH
13208: LD_VAR 0 18
13212: PUSH
13213: LD_VAR 0 13
13217: ARRAY
13218: PUSH
13219: LD_INT 3
13221: ARRAY
13222: PUSH
13223: LD_INT 1
13225: EQUAL
13226: AND
13227: IFFALSE 13395
// begin if not personel [ i ] [ 2 ] then
13229: LD_VAR 0 18
13233: PUSH
13234: LD_VAR 0 13
13238: ARRAY
13239: PUSH
13240: LD_INT 2
13242: ARRAY
13243: NOT
13244: IFFALSE 13361
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13246: LD_ADDR_VAR 0 18
13250: PUSH
13251: LD_VAR 0 18
13255: PPUSH
13256: LD_VAR 0 13
13260: PUSH
13261: LD_VAR 0 18
13265: PUSH
13266: LD_VAR 0 13
13270: ARRAY
13271: PUSH
13272: LD_INT 1
13274: MINUS
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: LD_VAR 0 4
13284: PPUSH
13285: LD_INT 22
13287: PUSH
13288: LD_VAR 0 1
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 21
13299: PUSH
13300: LD_INT 3
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 50
13309: PUSH
13310: EMPTY
13311: LIST
13312: PUSH
13313: LD_INT 2
13315: PUSH
13316: LD_INT 30
13318: PUSH
13319: LD_INT 0
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 30
13328: PUSH
13329: LD_INT 1
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 70
13351: PUSH
13352: LD_INT 1
13354: ARRAY
13355: PPUSH
13356: CALL 28285 0 3
13360: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13361: LD_VAR 0 18
13365: PUSH
13366: LD_VAR 0 13
13370: ARRAY
13371: PUSH
13372: LD_INT 1
13374: ARRAY
13375: PPUSH
13376: LD_VAR 0 18
13380: PUSH
13381: LD_VAR 0 13
13385: ARRAY
13386: PUSH
13387: LD_INT 2
13389: ARRAY
13390: PPUSH
13391: CALL_OW 120
// end ; end ;
13395: GO 13181
13397: POP
13398: POP
// for i := 1 to personel do
13399: LD_ADDR_VAR 0 13
13403: PUSH
13404: DOUBLE
13405: LD_INT 1
13407: DEC
13408: ST_TO_ADDR
13409: LD_VAR 0 18
13413: PUSH
13414: FOR_TO
13415: IFFALSE 13456
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13417: LD_ADDR_VAR 0 21
13421: PUSH
13422: LD_VAR 0 21
13426: PUSH
13427: LD_VAR 0 18
13431: PUSH
13432: LD_VAR 0 13
13436: ARRAY
13437: PPUSH
13438: LD_INT 25
13440: PUSH
13441: LD_INT 3
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 72
13452: ADD
13453: ST_TO_ADDR
13454: GO 13414
13456: POP
13457: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13458: LD_VAR 0 21
13462: PUSH
13463: LD_VAR 0 4
13467: PPUSH
13468: LD_INT 22
13470: PUSH
13471: LD_VAR 0 1
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 21
13482: PUSH
13483: LD_INT 2
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 3
13492: PUSH
13493: LD_INT 24
13495: PUSH
13496: LD_INT 1000
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: PPUSH
13512: CALL_OW 70
13516: AND
13517: IFFALSE 13951
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13519: LD_ADDR_VAR 0 39
13523: PUSH
13524: LD_VAR 0 4
13528: PPUSH
13529: LD_INT 22
13531: PUSH
13532: LD_VAR 0 1
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 21
13543: PUSH
13544: LD_INT 2
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 3
13553: PUSH
13554: LD_INT 24
13556: PUSH
13557: LD_INT 1000
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: PPUSH
13573: CALL_OW 70
13577: PUSH
13578: FOR_IN
13579: IFFALSE 13947
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13581: LD_VAR 0 39
13585: PPUSH
13586: LD_VAR 0 6
13590: PPUSH
13591: CALL_OW 299
13595: PUSH
13596: LD_INT 5
13598: LESS
13599: IFFALSE 13945
// begin for i := 1 to vehicles do
13601: LD_ADDR_VAR 0 13
13605: PUSH
13606: DOUBLE
13607: LD_INT 1
13609: DEC
13610: ST_TO_ADDR
13611: LD_VAR 0 24
13615: PUSH
13616: FOR_TO
13617: IFFALSE 13686
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13619: LD_VAR 0 24
13623: PUSH
13624: LD_VAR 0 13
13628: ARRAY
13629: PUSH
13630: LD_INT 1
13632: ARRAY
13633: PUSH
13634: LD_VAR 0 39
13638: EQUAL
13639: IFFALSE 13660
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13641: LD_VAR 0 24
13645: PUSH
13646: LD_VAR 0 13
13650: ARRAY
13651: PUSH
13652: LD_INT 2
13654: ARRAY
13655: PPUSH
13656: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13660: LD_VAR 0 24
13664: PUSH
13665: LD_VAR 0 13
13669: ARRAY
13670: PUSH
13671: LD_INT 2
13673: ARRAY
13674: PPUSH
13675: LD_VAR 0 39
13679: PPUSH
13680: CALL_OW 189
// end ;
13684: GO 13616
13686: POP
13687: POP
// for i := 1 to personel do
13688: LD_ADDR_VAR 0 13
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 18
13702: PUSH
13703: FOR_TO
13704: IFFALSE 13943
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13706: LD_VAR 0 18
13710: PUSH
13711: LD_VAR 0 13
13715: ARRAY
13716: PUSH
13717: LD_INT 1
13719: ARRAY
13720: PPUSH
13721: CALL_OW 257
13725: PUSH
13726: LD_INT 3
13728: EQUAL
13729: PUSH
13730: LD_VAR 0 18
13734: PUSH
13735: LD_VAR 0 13
13739: ARRAY
13740: PUSH
13741: LD_INT 3
13743: ARRAY
13744: PUSH
13745: LD_INT 1
13747: EQUAL
13748: AND
13749: IFFALSE 13941
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13751: LD_VAR 0 18
13755: PUSH
13756: LD_VAR 0 13
13760: ARRAY
13761: PUSH
13762: LD_INT 1
13764: ARRAY
13765: PPUSH
13766: CALL_OW 437
13770: IFFALSE 13826
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13772: LD_VAR 0 18
13776: PUSH
13777: LD_VAR 0 13
13781: ARRAY
13782: PUSH
13783: LD_INT 1
13785: ARRAY
13786: PPUSH
13787: CALL_OW 437
13791: PUSH
13792: LD_INT 1
13794: ARRAY
13795: PUSH
13796: LD_INT 1
13798: ARRAY
13799: PUSH
13800: LD_STRING e
13802: EQUAL
13803: IFFALSE 13826
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13805: LD_VAR 0 18
13809: PUSH
13810: LD_VAR 0 13
13814: ARRAY
13815: PUSH
13816: LD_INT 1
13818: ARRAY
13819: PPUSH
13820: EMPTY
13821: PPUSH
13822: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13826: LD_VAR 0 18
13830: PUSH
13831: LD_VAR 0 13
13835: ARRAY
13836: PUSH
13837: LD_INT 1
13839: ARRAY
13840: PPUSH
13841: CALL_OW 310
13845: IFFALSE 13866
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13847: LD_VAR 0 18
13851: PUSH
13852: LD_VAR 0 13
13856: ARRAY
13857: PUSH
13858: LD_INT 1
13860: ARRAY
13861: PPUSH
13862: CALL_OW 122
// if not IsInArea ( personel [ i ] [ 1 ] , baseArea ) then
13866: LD_VAR 0 18
13870: PUSH
13871: LD_VAR 0 13
13875: ARRAY
13876: PUSH
13877: LD_INT 1
13879: ARRAY
13880: PPUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: CALL_OW 308
13890: NOT
13891: IFFALSE 13917
// ComMoveToArea ( personel [ i ] [ 1 ] , baseArea ) ;
13893: LD_VAR 0 18
13897: PUSH
13898: LD_VAR 0 13
13902: ARRAY
13903: PUSH
13904: LD_INT 1
13906: ARRAY
13907: PPUSH
13908: LD_VAR 0 4
13912: PPUSH
13913: CALL_OW 113
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
13917: LD_VAR 0 18
13921: PUSH
13922: LD_VAR 0 13
13926: ARRAY
13927: PUSH
13928: LD_INT 1
13930: ARRAY
13931: PPUSH
13932: LD_VAR 0 39
13936: PPUSH
13937: CALL_OW 189
// end ;
13941: GO 13703
13943: POP
13944: POP
// end ; end ;
13945: GO 13578
13947: POP
13948: POP
// end else
13949: GO 14156
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
13951: LD_VAR 0 21
13955: PUSH
13956: LD_VAR 0 21
13960: PPUSH
13961: LD_INT 56
13963: PUSH
13964: EMPTY
13965: LIST
13966: PPUSH
13967: CALL_OW 72
13971: AND
13972: PUSH
13973: LD_VAR 0 34
13977: AND
13978: IFFALSE 14156
// for i := 1 to personel do
13980: LD_ADDR_VAR 0 13
13984: PUSH
13985: DOUBLE
13986: LD_INT 1
13988: DEC
13989: ST_TO_ADDR
13990: LD_VAR 0 18
13994: PUSH
13995: FOR_TO
13996: IFFALSE 14154
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13998: LD_VAR 0 18
14002: PUSH
14003: LD_VAR 0 13
14007: ARRAY
14008: PUSH
14009: LD_INT 1
14011: ARRAY
14012: PPUSH
14013: CALL_OW 257
14017: PUSH
14018: LD_INT 3
14020: EQUAL
14021: PUSH
14022: LD_VAR 0 18
14026: PUSH
14027: LD_VAR 0 13
14031: ARRAY
14032: PUSH
14033: LD_INT 3
14035: ARRAY
14036: PUSH
14037: LD_INT 1
14039: EQUAL
14040: AND
14041: IFFALSE 14152
// begin if not personel [ i ] [ 2 ] then
14043: LD_VAR 0 18
14047: PUSH
14048: LD_VAR 0 13
14052: ARRAY
14053: PUSH
14054: LD_INT 2
14056: ARRAY
14057: NOT
14058: IFFALSE 14118
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
14060: LD_ADDR_VAR 0 18
14064: PUSH
14065: LD_VAR 0 18
14069: PPUSH
14070: LD_VAR 0 13
14074: PUSH
14075: LD_VAR 0 18
14079: PUSH
14080: LD_VAR 0 13
14084: ARRAY
14085: PUSH
14086: LD_INT 1
14088: MINUS
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PPUSH
14094: LD_VAR 0 34
14098: PUSH
14099: LD_INT 1
14101: PPUSH
14102: LD_VAR 0 34
14106: PPUSH
14107: CALL_OW 12
14111: ARRAY
14112: PPUSH
14113: CALL 28285 0 3
14117: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14118: LD_VAR 0 18
14122: PUSH
14123: LD_VAR 0 13
14127: ARRAY
14128: PUSH
14129: LD_INT 1
14131: ARRAY
14132: PPUSH
14133: LD_VAR 0 18
14137: PUSH
14138: LD_VAR 0 13
14142: ARRAY
14143: PUSH
14144: LD_INT 2
14146: ARRAY
14147: PPUSH
14148: CALL_OW 120
// end ;
14152: GO 13995
14154: POP
14155: POP
// for i := 1 to personel do
14156: LD_ADDR_VAR 0 13
14160: PUSH
14161: DOUBLE
14162: LD_INT 1
14164: DEC
14165: ST_TO_ADDR
14166: LD_VAR 0 18
14170: PUSH
14171: FOR_TO
14172: IFFALSE 14213
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14174: LD_ADDR_VAR 0 22
14178: PUSH
14179: LD_VAR 0 22
14183: PUSH
14184: LD_VAR 0 18
14188: PUSH
14189: LD_VAR 0 13
14193: ARRAY
14194: PPUSH
14195: LD_INT 25
14197: PUSH
14198: LD_INT 4
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PPUSH
14205: CALL_OW 72
14209: ADD
14210: ST_TO_ADDR
14211: GO 14171
14213: POP
14214: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14215: LD_VAR 0 22
14219: PUSH
14220: LD_VAR 0 4
14224: PPUSH
14225: LD_INT 22
14227: PUSH
14228: LD_VAR 0 1
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 21
14239: PUSH
14240: LD_INT 1
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 3
14249: PUSH
14250: LD_INT 24
14252: PUSH
14253: LD_INT 1000
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: PPUSH
14269: CALL_OW 70
14273: AND
14274: IFFALSE 14791
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14276: LD_ADDR_VAR 0 39
14280: PUSH
14281: LD_VAR 0 4
14285: PPUSH
14286: LD_INT 22
14288: PUSH
14289: LD_VAR 0 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 1
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 3
14310: PUSH
14311: LD_INT 24
14313: PUSH
14314: LD_INT 1000
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: PPUSH
14330: CALL_OW 70
14334: PUSH
14335: FOR_IN
14336: IFFALSE 14787
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14338: LD_VAR 0 39
14342: PPUSH
14343: LD_VAR 0 5
14347: PPUSH
14348: CALL_OW 299
14352: PUSH
14353: LD_INT 5
14355: LESS
14356: IFFALSE 14564
// for i := 1 to personel do
14358: LD_ADDR_VAR 0 13
14362: PUSH
14363: DOUBLE
14364: LD_INT 1
14366: DEC
14367: ST_TO_ADDR
14368: LD_VAR 0 18
14372: PUSH
14373: FOR_TO
14374: IFFALSE 14562
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14376: LD_VAR 0 18
14380: PUSH
14381: LD_VAR 0 13
14385: ARRAY
14386: PUSH
14387: LD_INT 1
14389: ARRAY
14390: PPUSH
14391: CALL_OW 257
14395: PUSH
14396: LD_INT 4
14398: EQUAL
14399: PUSH
14400: LD_VAR 0 18
14404: PUSH
14405: LD_VAR 0 13
14409: ARRAY
14410: PUSH
14411: LD_INT 3
14413: ARRAY
14414: PUSH
14415: LD_INT 1
14417: EQUAL
14418: AND
14419: IFFALSE 14560
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14421: LD_VAR 0 18
14425: PUSH
14426: LD_VAR 0 13
14430: ARRAY
14431: PUSH
14432: LD_INT 1
14434: ARRAY
14435: PPUSH
14436: CALL_OW 437
14440: IFFALSE 14496
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14442: LD_VAR 0 18
14446: PUSH
14447: LD_VAR 0 13
14451: ARRAY
14452: PUSH
14453: LD_INT 1
14455: ARRAY
14456: PPUSH
14457: CALL_OW 437
14461: PUSH
14462: LD_INT 1
14464: ARRAY
14465: PUSH
14466: LD_INT 1
14468: ARRAY
14469: PUSH
14470: LD_STRING e
14472: EQUAL
14473: IFFALSE 14496
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14475: LD_VAR 0 18
14479: PUSH
14480: LD_VAR 0 13
14484: ARRAY
14485: PUSH
14486: LD_INT 1
14488: ARRAY
14489: PPUSH
14490: EMPTY
14491: PPUSH
14492: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14496: LD_VAR 0 18
14500: PUSH
14501: LD_VAR 0 13
14505: ARRAY
14506: PUSH
14507: LD_INT 1
14509: ARRAY
14510: PPUSH
14511: CALL_OW 310
14515: IFFALSE 14536
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14517: LD_VAR 0 18
14521: PUSH
14522: LD_VAR 0 13
14526: ARRAY
14527: PUSH
14528: LD_INT 1
14530: ARRAY
14531: PPUSH
14532: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14536: LD_VAR 0 18
14540: PUSH
14541: LD_VAR 0 13
14545: ARRAY
14546: PUSH
14547: LD_INT 1
14549: ARRAY
14550: PPUSH
14551: LD_VAR 0 39
14555: PPUSH
14556: CALL_OW 188
// end ;
14560: GO 14373
14562: POP
14563: POP
// if GetLives ( damageUnit ) < 250 then
14564: LD_VAR 0 39
14568: PPUSH
14569: CALL_OW 256
14573: PUSH
14574: LD_INT 250
14576: LESS
14577: IFFALSE 14785
// for i := 1 to personel do
14579: LD_ADDR_VAR 0 13
14583: PUSH
14584: DOUBLE
14585: LD_INT 1
14587: DEC
14588: ST_TO_ADDR
14589: LD_VAR 0 18
14593: PUSH
14594: FOR_TO
14595: IFFALSE 14783
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14597: LD_VAR 0 18
14601: PUSH
14602: LD_VAR 0 13
14606: ARRAY
14607: PUSH
14608: LD_INT 1
14610: ARRAY
14611: PPUSH
14612: CALL_OW 257
14616: PUSH
14617: LD_INT 4
14619: EQUAL
14620: PUSH
14621: LD_VAR 0 18
14625: PUSH
14626: LD_VAR 0 13
14630: ARRAY
14631: PUSH
14632: LD_INT 3
14634: ARRAY
14635: PUSH
14636: LD_INT 1
14638: EQUAL
14639: AND
14640: IFFALSE 14781
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14642: LD_VAR 0 18
14646: PUSH
14647: LD_VAR 0 13
14651: ARRAY
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PPUSH
14657: CALL_OW 437
14661: IFFALSE 14717
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14663: LD_VAR 0 18
14667: PUSH
14668: LD_VAR 0 13
14672: ARRAY
14673: PUSH
14674: LD_INT 1
14676: ARRAY
14677: PPUSH
14678: CALL_OW 437
14682: PUSH
14683: LD_INT 1
14685: ARRAY
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PUSH
14691: LD_STRING e
14693: EQUAL
14694: IFFALSE 14717
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14696: LD_VAR 0 18
14700: PUSH
14701: LD_VAR 0 13
14705: ARRAY
14706: PUSH
14707: LD_INT 1
14709: ARRAY
14710: PPUSH
14711: EMPTY
14712: PPUSH
14713: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14717: LD_VAR 0 18
14721: PUSH
14722: LD_VAR 0 13
14726: ARRAY
14727: PUSH
14728: LD_INT 1
14730: ARRAY
14731: PPUSH
14732: CALL_OW 310
14736: IFFALSE 14757
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14738: LD_VAR 0 18
14742: PUSH
14743: LD_VAR 0 13
14747: ARRAY
14748: PUSH
14749: LD_INT 1
14751: ARRAY
14752: PPUSH
14753: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14757: LD_VAR 0 18
14761: PUSH
14762: LD_VAR 0 13
14766: ARRAY
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: PPUSH
14772: LD_VAR 0 39
14776: PPUSH
14777: CALL_OW 188
// end ;
14781: GO 14594
14783: POP
14784: POP
// end ;
14785: GO 14335
14787: POP
14788: POP
// end else
14789: GO 14996
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14791: LD_VAR 0 22
14795: PUSH
14796: LD_VAR 0 22
14800: PPUSH
14801: LD_INT 56
14803: PUSH
14804: EMPTY
14805: LIST
14806: PPUSH
14807: CALL_OW 72
14811: AND
14812: PUSH
14813: LD_VAR 0 35
14817: AND
14818: IFFALSE 14996
// for i := 1 to personel do
14820: LD_ADDR_VAR 0 13
14824: PUSH
14825: DOUBLE
14826: LD_INT 1
14828: DEC
14829: ST_TO_ADDR
14830: LD_VAR 0 18
14834: PUSH
14835: FOR_TO
14836: IFFALSE 14994
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14838: LD_VAR 0 18
14842: PUSH
14843: LD_VAR 0 13
14847: ARRAY
14848: PUSH
14849: LD_INT 1
14851: ARRAY
14852: PPUSH
14853: CALL_OW 257
14857: PUSH
14858: LD_INT 4
14860: EQUAL
14861: PUSH
14862: LD_VAR 0 18
14866: PUSH
14867: LD_VAR 0 13
14871: ARRAY
14872: PUSH
14873: LD_INT 3
14875: ARRAY
14876: PUSH
14877: LD_INT 1
14879: EQUAL
14880: AND
14881: IFFALSE 14992
// begin if not personel [ i ] [ 2 ] then
14883: LD_VAR 0 18
14887: PUSH
14888: LD_VAR 0 13
14892: ARRAY
14893: PUSH
14894: LD_INT 2
14896: ARRAY
14897: NOT
14898: IFFALSE 14958
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
14900: LD_ADDR_VAR 0 18
14904: PUSH
14905: LD_VAR 0 18
14909: PPUSH
14910: LD_VAR 0 13
14914: PUSH
14915: LD_VAR 0 18
14919: PUSH
14920: LD_VAR 0 13
14924: ARRAY
14925: PUSH
14926: LD_INT 1
14928: MINUS
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PPUSH
14934: LD_VAR 0 35
14938: PUSH
14939: LD_INT 1
14941: PPUSH
14942: LD_VAR 0 35
14946: PPUSH
14947: CALL_OW 12
14951: ARRAY
14952: PPUSH
14953: CALL 28285 0 3
14957: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14958: LD_VAR 0 18
14962: PUSH
14963: LD_VAR 0 13
14967: ARRAY
14968: PUSH
14969: LD_INT 1
14971: ARRAY
14972: PPUSH
14973: LD_VAR 0 18
14977: PUSH
14978: LD_VAR 0 13
14982: ARRAY
14983: PUSH
14984: LD_INT 2
14986: ARRAY
14987: PPUSH
14988: CALL_OW 120
// end ;
14992: GO 14835
14994: POP
14995: POP
// wait ( 0 0$01 ) ;
14996: LD_INT 35
14998: PPUSH
14999: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
15003: LD_VAR 0 24
15007: PUSH
15008: LD_VAR 0 8
15012: LESS
15013: PUSH
15014: LD_VAR 0 34
15018: AND
15019: IFFALSE 15265
// begin tmp = vehiclesAmount - vehicles ;
15021: LD_ADDR_VAR 0 15
15025: PUSH
15026: LD_VAR 0 8
15030: PUSH
15031: LD_VAR 0 24
15035: MINUS
15036: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
15037: LD_ADDR_VAR 0 31
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_VAR 0 2
15051: PPUSH
15052: CALL 9145 0 2
15056: ST_TO_ADDR
// for i := 1 to tmp do
15057: LD_ADDR_VAR 0 13
15061: PUSH
15062: DOUBLE
15063: LD_INT 1
15065: DEC
15066: ST_TO_ADDR
15067: LD_VAR 0 15
15071: PUSH
15072: FOR_TO
15073: IFFALSE 15261
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
15075: LD_ADDR_VAR 0 15
15079: PUSH
15080: LD_VAR 0 31
15084: PUSH
15085: LD_INT 1
15087: PPUSH
15088: LD_VAR 0 31
15092: PPUSH
15093: CALL_OW 12
15097: ARRAY
15098: ST_TO_ADDR
// if tmp then
15099: LD_VAR 0 15
15103: IFFALSE 15259
// begin if tmp in [ 34 , 14 , 71 ] then
15105: LD_VAR 0 15
15109: PUSH
15110: LD_INT 34
15112: PUSH
15113: LD_INT 14
15115: PUSH
15116: LD_INT 71
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: LIST
15123: IN
15124: IFFALSE 15162
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15126: LD_ADDR_VAR 0 32
15130: PUSH
15131: LD_INT 4
15133: PUSH
15134: EMPTY
15135: LIST
15136: PUSH
15137: LD_INT 14
15139: PUSH
15140: EMPTY
15141: LIST
15142: PUSH
15143: LD_INT 24
15145: PUSH
15146: EMPTY
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: PUSH
15154: LD_VAR 0 2
15158: ARRAY
15159: ST_TO_ADDR
15160: GO 15216
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15162: LD_ADDR_VAR 0 32
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 4
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 14
15183: PUSH
15184: EMPTY
15185: LIST
15186: PUSH
15187: LD_INT 21
15189: PUSH
15190: LD_INT 23
15192: PUSH
15193: LD_INT 24
15195: PUSH
15196: LD_INT 22
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: PUSH
15210: LD_VAR 0 2
15214: ARRAY
15215: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15216: LD_VAR 0 34
15220: PUSH
15221: LD_INT 1
15223: ARRAY
15224: PPUSH
15225: LD_VAR 0 32
15229: PUSH
15230: LD_INT 1
15232: PPUSH
15233: LD_VAR 0 32
15237: PPUSH
15238: CALL_OW 12
15242: ARRAY
15243: PPUSH
15244: LD_INT 1
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: LD_VAR 0 15
15254: PPUSH
15255: CALL_OW 185
// end ; end ;
15259: GO 15072
15261: POP
15262: POP
// end else
15263: GO 15278
// ComCancel ( factory [ 1 ] ) ;
15265: LD_VAR 0 34
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15278: LD_ADDR_VAR 0 23
15282: PUSH
15283: LD_VAR 0 4
15287: PPUSH
15288: LD_INT 22
15290: PUSH
15291: LD_VAR 0 1
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 21
15302: PUSH
15303: LD_INT 2
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 50
15312: PUSH
15313: EMPTY
15314: LIST
15315: PUSH
15316: LD_INT 3
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 31
15324: PUSH
15325: LD_INT 31
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 34
15334: PUSH
15335: LD_INT 12
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 34
15344: PUSH
15345: LD_INT 51
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 34
15354: PUSH
15355: LD_INT 32
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: PPUSH
15379: CALL_OW 70
15383: PUSH
15384: LD_EXP 52
15388: DIFF
15389: PUSH
15390: FOR_IN
15391: IFFALSE 15554
// begin vehicleInList = false ;
15393: LD_ADDR_VAR 0 25
15397: PUSH
15398: LD_INT 0
15400: ST_TO_ADDR
// for i := 1 to vehicles do
15401: LD_ADDR_VAR 0 13
15405: PUSH
15406: DOUBLE
15407: LD_INT 1
15409: DEC
15410: ST_TO_ADDR
15411: LD_VAR 0 24
15415: PUSH
15416: FOR_TO
15417: IFFALSE 15447
// begin if vehicle in vehicles [ i ] then
15419: LD_VAR 0 23
15423: PUSH
15424: LD_VAR 0 24
15428: PUSH
15429: LD_VAR 0 13
15433: ARRAY
15434: IN
15435: IFFALSE 15445
// vehicleInList = true ;
15437: LD_ADDR_VAR 0 25
15441: PUSH
15442: LD_INT 1
15444: ST_TO_ADDR
// end ;
15445: GO 15416
15447: POP
15448: POP
// if not vehicleInList then
15449: LD_VAR 0 25
15453: NOT
15454: IFFALSE 15552
// if vehicles < vehiclesToAttackAmount then
15456: LD_VAR 0 24
15460: PUSH
15461: LD_VAR 0 10
15465: LESS
15466: IFFALSE 15511
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15468: LD_ADDR_VAR 0 24
15472: PUSH
15473: LD_VAR 0 24
15477: PUSH
15478: LD_VAR 0 23
15482: PUSH
15483: LD_VAR 0 23
15487: PPUSH
15488: CALL_OW 313
15492: PUSH
15493: LD_INT 1
15495: ARRAY
15496: PUSH
15497: LD_INT 3
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: LIST
15504: PUSH
15505: EMPTY
15506: LIST
15507: ADD
15508: ST_TO_ADDR
15509: GO 15552
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15511: LD_ADDR_VAR 0 24
15515: PUSH
15516: LD_VAR 0 24
15520: PUSH
15521: LD_VAR 0 23
15525: PUSH
15526: LD_VAR 0 23
15530: PPUSH
15531: CALL_OW 313
15535: PUSH
15536: LD_INT 1
15538: ARRAY
15539: PUSH
15540: LD_INT 2
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: ADD
15551: ST_TO_ADDR
// end ;
15552: GO 15390
15554: POP
15555: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15556: LD_ADDR_VAR 0 41
15560: PUSH
15561: LD_INT 81
15563: PUSH
15564: LD_VAR 0 1
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PPUSH
15573: CALL_OW 69
15577: PUSH
15578: FOR_IN
15579: IFFALSE 16061
// begin offensiveUnits = [ ] ;
15581: LD_ADDR_VAR 0 27
15585: PUSH
15586: EMPTY
15587: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
15588: LD_ADDR_VAR 0 28
15592: PUSH
15593: LD_INT 0
15595: ST_TO_ADDR
// for i := 1 to vehicles do
15596: LD_ADDR_VAR 0 13
15600: PUSH
15601: DOUBLE
15602: LD_INT 1
15604: DEC
15605: ST_TO_ADDR
15606: LD_VAR 0 24
15610: PUSH
15611: FOR_TO
15612: IFFALSE 15793
// if vehicles [ i ] [ 3 ] = 3 then
15614: LD_VAR 0 24
15618: PUSH
15619: LD_VAR 0 13
15623: ARRAY
15624: PUSH
15625: LD_INT 3
15627: ARRAY
15628: PUSH
15629: LD_INT 3
15631: EQUAL
15632: IFFALSE 15791
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
15634: LD_VAR 0 24
15638: PUSH
15639: LD_VAR 0 13
15643: ARRAY
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 256
15653: PUSH
15654: LD_INT 650
15656: GREATER
15657: IFFALSE 15673
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
15659: LD_ADDR_VAR 0 28
15663: PUSH
15664: LD_VAR 0 28
15668: PUSH
15669: LD_INT 1
15671: PLUS
15672: ST_TO_ADDR
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15673: LD_ADDR_VAR 0 27
15677: PUSH
15678: LD_VAR 0 27
15682: PUSH
15683: LD_VAR 0 24
15687: PUSH
15688: LD_VAR 0 13
15692: ARRAY
15693: PUSH
15694: LD_INT 1
15696: ARRAY
15697: ADD
15698: ST_TO_ADDR
// for j = 1 to personel do
15699: LD_ADDR_VAR 0 14
15703: PUSH
15704: DOUBLE
15705: LD_INT 1
15707: DEC
15708: ST_TO_ADDR
15709: LD_VAR 0 18
15713: PUSH
15714: FOR_TO
15715: IFFALSE 15789
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15717: LD_VAR 0 18
15721: PUSH
15722: LD_VAR 0 14
15726: ARRAY
15727: PUSH
15728: LD_INT 1
15730: ARRAY
15731: PUSH
15732: LD_VAR 0 24
15736: PUSH
15737: LD_VAR 0 13
15741: ARRAY
15742: PUSH
15743: LD_INT 2
15745: ARRAY
15746: EQUAL
15747: IFFALSE 15787
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
15749: LD_ADDR_VAR 0 18
15753: PUSH
15754: LD_VAR 0 18
15758: PPUSH
15759: LD_VAR 0 14
15763: PUSH
15764: LD_VAR 0 18
15768: PUSH
15769: LD_VAR 0 14
15773: ARRAY
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PPUSH
15779: LD_INT 3
15781: PPUSH
15782: CALL 28285 0 3
15786: ST_TO_ADDR
15787: GO 15714
15789: POP
15790: POP
// end ;
15791: GO 15611
15793: POP
15794: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
15795: LD_VAR 0 10
15799: PUSH
15800: LD_VAR 0 28
15804: LESSEQUAL
15805: IFFALSE 16059
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , offensiveUnits [ 1 ] ) ;
15807: LD_ADDR_VAR 0 29
15811: PUSH
15812: LD_INT 81
15814: PUSH
15815: LD_INT 2
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 69
15826: PPUSH
15827: LD_VAR 0 27
15831: PUSH
15832: LD_INT 1
15834: ARRAY
15835: PPUSH
15836: CALL_OW 74
15840: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 2 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ 1 ] ) ;
15841: LD_ADDR_VAR 0 30
15845: PUSH
15846: LD_INT 81
15848: PUSH
15849: LD_INT 2
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 2
15858: PUSH
15859: LD_INT 59
15861: PUSH
15862: EMPTY
15863: LIST
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 1
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 21
15877: PUSH
15878: LD_INT 2
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: EMPTY
15896: LIST
15897: PPUSH
15898: CALL_OW 69
15902: PPUSH
15903: LD_VAR 0 27
15907: PUSH
15908: LD_INT 1
15910: ARRAY
15911: PPUSH
15912: CALL_OW 74
15916: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ 1 ] , target1 ) + 8 < GetDistUnits ( offensiveUnits [ 1 ] , target2 ) then
15917: LD_VAR 0 27
15921: PUSH
15922: LD_INT 1
15924: ARRAY
15925: PPUSH
15926: LD_VAR 0 29
15930: PPUSH
15931: CALL_OW 296
15935: PUSH
15936: LD_INT 8
15938: PLUS
15939: PUSH
15940: LD_VAR 0 27
15944: PUSH
15945: LD_INT 1
15947: ARRAY
15948: PPUSH
15949: LD_VAR 0 30
15953: PPUSH
15954: CALL_OW 296
15958: LESS
15959: IFFALSE 15995
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target1 ) else
15961: LD_VAR 0 27
15965: PPUSH
15966: LD_INT 3
15968: PUSH
15969: LD_INT 60
15971: PUSH
15972: EMPTY
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 72
15983: PPUSH
15984: LD_VAR 0 29
15988: PPUSH
15989: CALL_OW 115
15993: GO 16027
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target2 ) ;
15995: LD_VAR 0 27
15999: PPUSH
16000: LD_INT 3
16002: PUSH
16003: LD_INT 60
16005: PUSH
16006: EMPTY
16007: LIST
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PPUSH
16013: CALL_OW 72
16017: PPUSH
16018: LD_VAR 0 30
16022: PPUSH
16023: CALL_OW 115
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16027: LD_VAR 0 27
16031: PPUSH
16032: LD_INT 3
16034: PUSH
16035: LD_INT 60
16037: PUSH
16038: EMPTY
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PPUSH
16045: CALL_OW 72
16049: PPUSH
16050: LD_VAR 0 41
16054: PPUSH
16055: CALL_OW 175
// end ; end ;
16059: GO 15578
16061: POP
16062: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16063: LD_ADDR_VAR 0 41
16067: PUSH
16068: LD_VAR 0 7
16072: PPUSH
16073: LD_INT 81
16075: PUSH
16076: LD_VAR 0 1
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PPUSH
16085: CALL_OW 70
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16270
// begin defenceUnits = [ ] ;
16093: LD_ADDR_VAR 0 26
16097: PUSH
16098: EMPTY
16099: ST_TO_ADDR
// for i := 1 to personel do
16100: LD_ADDR_VAR 0 13
16104: PUSH
16105: DOUBLE
16106: LD_INT 1
16108: DEC
16109: ST_TO_ADDR
16110: LD_VAR 0 18
16114: PUSH
16115: FOR_TO
16116: IFFALSE 16166
// if personel [ i ] [ 3 ] = 2 then
16118: LD_VAR 0 18
16122: PUSH
16123: LD_VAR 0 13
16127: ARRAY
16128: PUSH
16129: LD_INT 3
16131: ARRAY
16132: PUSH
16133: LD_INT 2
16135: EQUAL
16136: IFFALSE 16164
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16138: LD_ADDR_VAR 0 26
16142: PUSH
16143: LD_VAR 0 26
16147: PUSH
16148: LD_VAR 0 18
16152: PUSH
16153: LD_VAR 0 13
16157: ARRAY
16158: PUSH
16159: LD_INT 1
16161: ARRAY
16162: ADD
16163: ST_TO_ADDR
16164: GO 16115
16166: POP
16167: POP
// for i := 1 to vehicles do
16168: LD_ADDR_VAR 0 13
16172: PUSH
16173: DOUBLE
16174: LD_INT 1
16176: DEC
16177: ST_TO_ADDR
16178: LD_VAR 0 24
16182: PUSH
16183: FOR_TO
16184: IFFALSE 16234
// if vehicles [ i ] [ 3 ] = 2 then
16186: LD_VAR 0 24
16190: PUSH
16191: LD_VAR 0 13
16195: ARRAY
16196: PUSH
16197: LD_INT 3
16199: ARRAY
16200: PUSH
16201: LD_INT 2
16203: EQUAL
16204: IFFALSE 16232
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16206: LD_ADDR_VAR 0 26
16210: PUSH
16211: LD_VAR 0 26
16215: PUSH
16216: LD_VAR 0 24
16220: PUSH
16221: LD_VAR 0 13
16225: ARRAY
16226: PUSH
16227: LD_INT 1
16229: ARRAY
16230: ADD
16231: ST_TO_ADDR
16232: GO 16183
16234: POP
16235: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16236: LD_VAR 0 26
16240: PPUSH
16241: LD_INT 3
16243: PUSH
16244: LD_INT 60
16246: PUSH
16247: EMPTY
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PPUSH
16254: CALL_OW 72
16258: PPUSH
16259: LD_VAR 0 41
16263: PPUSH
16264: CALL_OW 175
// end ;
16268: GO 16090
16270: POP
16271: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16272: LD_ADDR_VAR 0 42
16276: PUSH
16277: LD_INT 22
16279: PUSH
16280: LD_VAR 0 1
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: LD_INT 30
16294: PUSH
16295: LD_INT 31
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 30
16304: PUSH
16305: LD_INT 32
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 30
16314: PUSH
16315: LD_INT 33
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 30
16324: PUSH
16325: LD_INT 4
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 30
16334: PUSH
16335: LD_INT 5
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PPUSH
16354: CALL_OW 69
16358: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16359: LD_ADDR_VAR 0 43
16363: PUSH
16364: LD_INT 81
16366: PUSH
16367: LD_VAR 0 1
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 21
16378: PUSH
16379: LD_INT 3
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 58
16388: PUSH
16389: EMPTY
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: PPUSH
16397: CALL_OW 69
16401: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16402: LD_VAR 0 42
16406: PUSH
16407: LD_VAR 0 43
16411: AND
16412: IFFALSE 16482
// for i in attackBuildings do
16414: LD_ADDR_VAR 0 13
16418: PUSH
16419: LD_VAR 0 42
16423: PUSH
16424: FOR_IN
16425: IFFALSE 16480
// for j in enemyBuildings do
16427: LD_ADDR_VAR 0 14
16431: PUSH
16432: LD_VAR 0 43
16436: PUSH
16437: FOR_IN
16438: IFFALSE 16476
// if GetDistUnits ( i , j ) < 12 then
16440: LD_VAR 0 13
16444: PPUSH
16445: LD_VAR 0 14
16449: PPUSH
16450: CALL_OW 296
16454: PUSH
16455: LD_INT 12
16457: LESS
16458: IFFALSE 16474
// ComAttackUnit ( i , j ) ;
16460: LD_VAR 0 13
16464: PPUSH
16465: LD_VAR 0 14
16469: PPUSH
16470: CALL_OW 115
16474: GO 16437
16476: POP
16477: POP
16478: GO 16424
16480: POP
16481: POP
// until not personel or arabianCanExitMap ;
16482: LD_VAR 0 18
16486: NOT
16487: PUSH
16488: LD_EXP 21
16492: OR
16493: IFFALSE 11101
// end ;
16495: LD_VAR 0 12
16499: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16500: LD_EXP 52
16504: NOT
16505: IFFALSE 16539
16507: GO 16509
16509: DISABLE
// begin enable ;
16510: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16511: LD_EXP 36
16515: PPUSH
16516: LD_INT 42
16518: PPUSH
16519: CALL 2675 0 2
// arabLeftExit = true ;
16523: LD_ADDR_EXP 55
16527: PUSH
16528: LD_INT 1
16530: ST_TO_ADDR
// arabRightExit = false ;
16531: LD_ADDR_EXP 56
16535: PUSH
16536: LD_INT 0
16538: ST_TO_ADDR
// end ;
16539: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base ;
16540: LD_EXP 52
16544: PUSH
16545: LD_EXP 55
16549: AND
16550: IFFALSE 16745
16552: GO 16554
16554: DISABLE
16555: LD_INT 0
16557: PPUSH
16558: PPUSH
16559: PPUSH
// begin enable ;
16560: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16561: LD_EXP 52
16565: PPUSH
16566: LD_INT 71
16568: PPUSH
16569: LD_INT 137
16571: PPUSH
16572: CALL_OW 114
// for veh in arabianPatrolVehicles do
16576: LD_ADDR_VAR 0 1
16580: PUSH
16581: LD_EXP 52
16585: PUSH
16586: FOR_IN
16587: IFFALSE 16743
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16589: LD_VAR 0 1
16593: PPUSH
16594: LD_INT 43
16596: PPUSH
16597: CALL_OW 308
16601: IFFALSE 16741
// begin if arabianPatrolVehicles then
16603: LD_EXP 52
16607: IFFALSE 16636
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 313
16618: PUSH
16619: LD_INT 1
16621: ARRAY
16622: PPUSH
16623: CALL_OW 64
// RemoveUnit ( veh ) ;
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 64
// end ; x = 0 ;
16636: LD_ADDR_VAR 0 2
16640: PUSH
16641: LD_INT 0
16643: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16644: LD_ADDR_VAR 0 1
16648: PUSH
16649: LD_EXP 52
16653: PUSH
16654: FOR_IN
16655: IFFALSE 16685
// if not IsPlaced ( veh ) then
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 305
16666: NOT
16667: IFFALSE 16683
// x = x + 1 ;
16669: LD_ADDR_VAR 0 2
16673: PUSH
16674: LD_VAR 0 2
16678: PUSH
16679: LD_INT 1
16681: PLUS
16682: ST_TO_ADDR
16683: GO 16654
16685: POP
16686: POP
// if x = arabianPatrolVehicles then
16687: LD_VAR 0 2
16691: PUSH
16692: LD_EXP 52
16696: EQUAL
16697: IFFALSE 16741
// begin arabLeftExit = false ;
16699: LD_ADDR_EXP 55
16703: PUSH
16704: LD_INT 0
16706: ST_TO_ADDR
// arabRightExit = true ;
16707: LD_ADDR_EXP 56
16711: PUSH
16712: LD_INT 1
16714: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16715: LD_INT 4200
16717: PPUSH
16718: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16722: LD_ADDR_EXP 52
16726: PUSH
16727: EMPTY
16728: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16729: LD_EXP 36
16733: PPUSH
16734: LD_INT 43
16736: PPUSH
16737: CALL 2675 0 2
// end ; end ; end ;
16741: GO 16586
16743: POP
16744: POP
// end ;
16745: PPOPN 3
16747: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16748: LD_EXP 52
16752: PUSH
16753: LD_EXP 56
16757: AND
16758: IFFALSE 16953
16760: GO 16762
16762: DISABLE
16763: LD_INT 0
16765: PPUSH
16766: PPUSH
16767: PPUSH
// begin enable ;
16768: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16769: LD_EXP 52
16773: PPUSH
16774: LD_INT 184
16776: PPUSH
16777: LD_INT 134
16779: PPUSH
16780: CALL_OW 114
// for veh in arabianPatrolVehicles do
16784: LD_ADDR_VAR 0 1
16788: PUSH
16789: LD_EXP 52
16793: PUSH
16794: FOR_IN
16795: IFFALSE 16951
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16797: LD_VAR 0 1
16801: PPUSH
16802: LD_INT 42
16804: PPUSH
16805: CALL_OW 308
16809: IFFALSE 16949
// begin if arabianPatrolVehicles then
16811: LD_EXP 52
16815: IFFALSE 16844
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 313
16826: PUSH
16827: LD_INT 1
16829: ARRAY
16830: PPUSH
16831: CALL_OW 64
// RemoveUnit ( veh ) ;
16835: LD_VAR 0 1
16839: PPUSH
16840: CALL_OW 64
// end ; x = 0 ;
16844: LD_ADDR_VAR 0 2
16848: PUSH
16849: LD_INT 0
16851: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16852: LD_ADDR_VAR 0 1
16856: PUSH
16857: LD_EXP 52
16861: PUSH
16862: FOR_IN
16863: IFFALSE 16893
// if not IsPlaced ( veh ) then
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 305
16874: NOT
16875: IFFALSE 16891
// x = x + 1 ;
16877: LD_ADDR_VAR 0 2
16881: PUSH
16882: LD_VAR 0 2
16886: PUSH
16887: LD_INT 1
16889: PLUS
16890: ST_TO_ADDR
16891: GO 16862
16893: POP
16894: POP
// if x = arabianPatrolVehicles then
16895: LD_VAR 0 2
16899: PUSH
16900: LD_EXP 52
16904: EQUAL
16905: IFFALSE 16949
// begin arabLeftExit = true ;
16907: LD_ADDR_EXP 55
16911: PUSH
16912: LD_INT 1
16914: ST_TO_ADDR
// arabRightExit = false ;
16915: LD_ADDR_EXP 56
16919: PUSH
16920: LD_INT 0
16922: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16923: LD_INT 4200
16925: PPUSH
16926: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16930: LD_ADDR_EXP 52
16934: PUSH
16935: EMPTY
16936: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16937: LD_EXP 36
16941: PPUSH
16942: LD_INT 42
16944: PPUSH
16945: CALL 2675 0 2
// end ; end ; end ;
16949: GO 16794
16951: POP
16952: POP
// end ;
16953: PPOPN 3
16955: END
// every 6 6$0 trigger not arabianHovercrafts and not arabianCanExitMap do
16956: LD_EXP 53
16960: NOT
16961: PUSH
16962: LD_EXP 21
16966: NOT
16967: AND
16968: IFFALSE 16978
16970: GO 16972
16972: DISABLE
// begin enable ;
16973: ENABLE
// PrepareArabianHovercraft ;
16974: CALL 2834 0 0
// end ;
16978: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
16979: LD_EXP 53
16983: IFFALSE 17139
16985: GO 16987
16987: DISABLE
16988: LD_INT 0
16990: PPUSH
16991: PPUSH
// begin enable ;
16992: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
16993: LD_EXP 53
16997: PPUSH
16998: LD_INT 100
17000: PPUSH
17001: CALL_OW 240
// for i := 1 to arabianHovercraftsPath do
17005: LD_ADDR_VAR 0 1
17009: PUSH
17010: DOUBLE
17011: LD_INT 1
17013: DEC
17014: ST_TO_ADDR
17015: LD_EXP 38
17019: PUSH
17020: FOR_TO
17021: IFFALSE 17064
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
17023: LD_EXP 53
17027: PPUSH
17028: LD_EXP 38
17032: PUSH
17033: LD_VAR 0 1
17037: ARRAY
17038: PUSH
17039: LD_INT 1
17041: ARRAY
17042: PPUSH
17043: LD_EXP 38
17047: PUSH
17048: LD_VAR 0 1
17052: ARRAY
17053: PUSH
17054: LD_INT 2
17056: ARRAY
17057: PPUSH
17058: CALL_OW 174
17062: GO 17020
17064: POP
17065: POP
// x = arabianHovercraftsPath ;
17066: LD_ADDR_VAR 0 2
17070: PUSH
17071: LD_EXP 38
17075: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
17076: LD_EXP 53
17080: PPUSH
17081: LD_EXP 38
17085: PUSH
17086: LD_VAR 0 2
17090: ARRAY
17091: PUSH
17092: LD_INT 1
17094: ARRAY
17095: PPUSH
17096: LD_EXP 38
17100: PUSH
17101: LD_VAR 0 2
17105: ARRAY
17106: PUSH
17107: LD_INT 2
17109: ARRAY
17110: PPUSH
17111: CALL_OW 174
// x = x - 1 ;
17115: LD_ADDR_VAR 0 2
17119: PUSH
17120: LD_VAR 0 2
17124: PUSH
17125: LD_INT 1
17127: MINUS
17128: ST_TO_ADDR
// until x = 0 ;
17129: LD_VAR 0 2
17133: PUSH
17134: LD_INT 0
17136: EQUAL
17137: IFFALSE 17076
// end ;
17139: PPOPN 2
17141: END
// every 0 0$1 trigger arabianPatrolTroops do
17142: LD_EXP 54
17146: IFFALSE 17212
17148: GO 17150
17150: DISABLE
// begin enable ;
17151: ENABLE
// AddComAgressiveMove ( arabianPatrolTroops , 127 , 100 ) ;
17152: LD_EXP 54
17156: PPUSH
17157: LD_INT 127
17159: PPUSH
17160: LD_INT 100
17162: PPUSH
17163: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 141 , 133 ) ;
17167: LD_EXP 54
17171: PPUSH
17172: LD_INT 141
17174: PPUSH
17175: LD_INT 133
17177: PPUSH
17178: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 80 , 132 ) ;
17182: LD_EXP 54
17186: PPUSH
17187: LD_INT 80
17189: PPUSH
17190: LD_INT 132
17192: PPUSH
17193: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 174 , 122 ) ;
17197: LD_EXP 54
17201: PPUSH
17202: LD_INT 174
17204: PPUSH
17205: LD_INT 122
17207: PPUSH
17208: CALL_OW 174
// end ; end_of_file
17212: END
// export function Lose_Burlak ; begin
17213: LD_INT 0
17215: PPUSH
// YouLost ( Burlak ) ;
17216: LD_STRING Burlak
17218: PPUSH
17219: CALL_OW 104
// end ;
17223: LD_VAR 0 1
17227: RET
// export function Lose_Survive ; begin
17228: LD_INT 0
17230: PPUSH
// YouLost ( Survive ) ;
17231: LD_STRING Survive
17233: PPUSH
17234: CALL_OW 104
// end ;
17238: LD_VAR 0 1
17242: RET
// export function Lose_Surrender ; begin
17243: LD_INT 0
17245: PPUSH
// YouLost ( Surrender ) ;
17246: LD_STRING Surrender
17248: PPUSH
17249: CALL_OW 104
// end ; end_of_file
17253: LD_VAR 0 1
17257: RET
// every 0 0$5 do
17258: GO 17260
17260: DISABLE
// begin enable ;
17261: ENABLE
// if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
17262: LD_EXP 24
17266: NOT
17267: PUSH
17268: LD_INT 22
17270: PPUSH
17271: LD_INT 22
17273: PUSH
17274: LD_INT 3
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 21
17283: PUSH
17284: LD_INT 2
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 50
17293: PUSH
17294: EMPTY
17295: LIST
17296: PUSH
17297: LD_INT 59
17299: PUSH
17300: EMPTY
17301: LIST
17302: PUSH
17303: LD_INT 2
17305: PUSH
17306: LD_INT 31
17308: PUSH
17309: LD_INT 22
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 31
17318: PUSH
17319: LD_INT 24
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 31
17328: PUSH
17329: LD_INT 14
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 70
17353: AND
17354: PUSH
17355: LD_INT 22
17357: PPUSH
17358: LD_INT 22
17360: PUSH
17361: LD_INT 3
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 21
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 23
17380: PUSH
17381: LD_INT 3
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 50
17390: PUSH
17391: EMPTY
17392: LIST
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 70
17404: AND
17405: IFFALSE 17414
// Query ( QVehicles ) ;
17407: LD_STRING QVehicles
17409: PPUSH
17410: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17414: LD_EXP 39
17418: PPUSH
17419: CALL_OW 310
17423: PPUSH
17424: LD_INT 22
17426: PPUSH
17427: CALL_OW 308
17431: PUSH
17432: LD_EXP 24
17436: NOT
17437: AND
17438: PUSH
17439: LD_INT 22
17441: PPUSH
17442: LD_INT 22
17444: PUSH
17445: LD_INT 3
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 21
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 59
17464: PUSH
17465: EMPTY
17466: LIST
17467: PUSH
17468: LD_INT 50
17470: PUSH
17471: EMPTY
17472: LIST
17473: PUSH
17474: LD_INT 2
17476: PUSH
17477: LD_INT 31
17479: PUSH
17480: LD_INT 22
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 31
17489: PUSH
17490: LD_INT 24
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 31
17499: PUSH
17500: LD_INT 14
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: PPUSH
17520: CALL_OW 70
17524: PUSH
17525: LD_INT 22
17527: PUSH
17528: LD_INT 3
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 21
17537: PUSH
17538: LD_INT 1
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 23
17547: PUSH
17548: LD_INT 3
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 2
17557: PUSH
17558: LD_INT 25
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 25
17570: PUSH
17571: LD_INT 2
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 25
17580: PUSH
17581: LD_INT 3
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 25
17590: PUSH
17591: LD_INT 4
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PPUSH
17611: CALL_OW 69
17615: GREATEREQUAL
17616: AND
17617: IFFALSE 17623
// FinishMission ;
17619: CALL 17944 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17623: LD_EXP 39
17627: PPUSH
17628: CALL_OW 310
17632: PPUSH
17633: LD_INT 22
17635: PPUSH
17636: CALL_OW 308
17640: PUSH
17641: LD_EXP 24
17645: NOT
17646: AND
17647: PUSH
17648: LD_INT 22
17650: PPUSH
17651: LD_INT 22
17653: PUSH
17654: LD_INT 3
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 21
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 59
17673: PUSH
17674: EMPTY
17675: LIST
17676: PUSH
17677: LD_INT 50
17679: PUSH
17680: EMPTY
17681: LIST
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: LD_INT 31
17688: PUSH
17689: LD_INT 22
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 31
17698: PUSH
17699: LD_INT 24
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 31
17708: PUSH
17709: LD_INT 14
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: PPUSH
17729: CALL_OW 70
17733: PUSH
17734: LD_INT 6
17736: GREATEREQUAL
17737: AND
17738: PUSH
17739: LD_INT 22
17741: PPUSH
17742: LD_INT 22
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 21
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 59
17764: PUSH
17765: EMPTY
17766: LIST
17767: PUSH
17768: LD_INT 50
17770: PUSH
17771: EMPTY
17772: LIST
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: LD_INT 31
17779: PUSH
17780: LD_INT 22
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 31
17789: PUSH
17790: LD_INT 24
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 31
17799: PUSH
17800: LD_INT 14
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: PPUSH
17820: CALL_OW 70
17824: PUSH
17825: LD_INT 22
17827: PUSH
17828: LD_INT 3
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 21
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 23
17847: PUSH
17848: LD_INT 3
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 2
17857: PUSH
17858: LD_INT 25
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 25
17870: PUSH
17871: LD_INT 2
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 25
17880: PUSH
17881: LD_INT 3
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 25
17890: PUSH
17891: LD_INT 4
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: PPUSH
17911: CALL_OW 69
17915: LESS
17916: AND
17917: IFFALSE 17943
// begin case Query ( QEndMission ) of 1 :
17919: LD_STRING QEndMission
17921: PPUSH
17922: CALL_OW 97
17926: PUSH
17927: LD_INT 1
17929: DOUBLE
17930: EQUAL
17931: IFTRUE 17935
17933: GO 17942
17935: POP
// FinishMission ; end ;
17936: CALL 17944 0 0
17940: GO 17943
17942: POP
// end ; end ;
17943: END
// function FinishMission ; var nearUnit ; begin
17944: LD_INT 0
17946: PPUSH
17947: PPUSH
// finishMissionBool = true ;
17948: LD_ADDR_EXP 24
17952: PUSH
17953: LD_INT 1
17955: ST_TO_ADDR
// if stevensDepot then
17956: LD_EXP 17
17960: IFFALSE 18129
// begin DialogueOn ;
17962: CALL_OW 6
// if IsOK ( Petrosyan ) then
17966: LD_EXP 43
17970: PPUSH
17971: CALL_OW 302
17975: IFFALSE 17991
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
17977: LD_EXP 43
17981: PPUSH
17982: LD_STRING DStevensLeftBehind-Pty-1
17984: PPUSH
17985: CALL_OW 88
17989: GO 18105
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
17991: LD_INT 22
17993: PUSH
17994: LD_INT 3
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 21
18003: PUSH
18004: LD_INT 1
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 26
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 50
18023: PUSH
18024: EMPTY
18025: LIST
18026: PUSH
18027: LD_INT 2
18029: PUSH
18030: LD_INT 25
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 25
18042: PUSH
18043: LD_INT 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 25
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 25
18062: PUSH
18063: LD_INT 4
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: PPUSH
18084: CALL_OW 69
18088: PPUSH
18089: LD_STRING StevensLeftBehind-RSol1-1
18091: PPUSH
18092: LD_STRING 
18094: PPUSH
18095: LD_INT 0
18097: PPUSH
18098: LD_INT 1
18100: PPUSH
18101: CALL 8772 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
18105: LD_EXP 39
18109: PPUSH
18110: LD_STRING DStevensLeftBehind-Bur-1
18112: PPUSH
18113: CALL_OW 88
// DialogueOff ;
18117: CALL_OW 7
// stevensStatus = 1 ;
18121: LD_ADDR_EXP 2
18125: PUSH
18126: LD_INT 1
18128: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
18129: LD_EXP 14
18133: NOT
18134: PUSH
18135: LD_EXP 43
18139: PPUSH
18140: CALL_OW 302
18144: AND
18145: IFFALSE 18677
// begin PrepareStevens ( exit_rus ) ;
18147: LD_INT 22
18149: PPUSH
18150: CALL 20710 0 1
// wait ( 0 0$1.5 ) ;
18154: LD_INT 52
18156: PPUSH
18157: CALL_OW 67
// stevensPlaced = true ;
18161: LD_ADDR_EXP 14
18165: PUSH
18166: LD_INT 1
18168: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
18169: LD_ADDR_VAR 0 2
18173: PUSH
18174: LD_INT 22
18176: PUSH
18177: LD_INT 3
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 21
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 26
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 50
18206: PUSH
18207: EMPTY
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: LD_INT 25
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 25
18225: PUSH
18226: LD_INT 2
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 25
18235: PUSH
18236: LD_INT 3
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 25
18245: PUSH
18246: LD_INT 4
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: PPUSH
18267: CALL_OW 69
18271: PPUSH
18272: LD_EXP 57
18276: PPUSH
18277: CALL_OW 74
18281: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
18282: LD_EXP 57
18286: PPUSH
18287: CALL_OW 87
// InGameOn ;
18291: CALL_OW 8
// wait ( 0 0$1.5 ) ;
18295: LD_INT 52
18297: PPUSH
18298: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18302: LD_EXP 57
18306: PPUSH
18307: LD_INT 6
18309: PPUSH
18310: CALL_OW 235
// DialogueOn ;
18314: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18318: LD_EXP 57
18322: PPUSH
18323: LD_STRING DStevens-Huck-1
18325: PPUSH
18326: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18330: LD_EXP 43
18334: PPUSH
18335: LD_STRING DStevens-Pty-1
18337: PPUSH
18338: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18342: LD_EXP 43
18346: PPUSH
18347: LD_STRING DStevens-Pty-1a
18349: PPUSH
18350: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18354: LD_EXP 57
18358: PPUSH
18359: LD_STRING DStevens-Huck-2
18361: PPUSH
18362: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18366: LD_EXP 43
18370: PPUSH
18371: LD_STRING DStevens-Pty-2
18373: PPUSH
18374: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18378: LD_EXP 57
18382: PPUSH
18383: LD_STRING DStevens-Huck-3
18385: PPUSH
18386: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18390: LD_EXP 43
18394: PPUSH
18395: LD_STRING DStevens-Pty-3
18397: PPUSH
18398: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18402: LD_EXP 57
18406: PPUSH
18407: LD_STRING DStevens-Huck-4
18409: PPUSH
18410: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18414: LD_EXP 43
18418: PPUSH
18419: LD_STRING DStevensBurlak-Pty-1
18421: PPUSH
18422: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18426: LD_EXP 39
18430: PPUSH
18431: LD_STRING DStevensBurlak-Bur-1
18433: PPUSH
18434: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18438: LD_EXP 43
18442: PPUSH
18443: LD_STRING DStevensBurlak-Pty-2
18445: PPUSH
18446: CALL_OW 88
// case Query ( QKill ) of 1 :
18450: LD_STRING QKill
18452: PPUSH
18453: CALL_OW 97
18457: PUSH
18458: LD_INT 1
18460: DOUBLE
18461: EQUAL
18462: IFTRUE 18466
18464: GO 18593
18466: POP
// begin stevensCanExitMap = true ;
18467: LD_ADDR_EXP 19
18471: PUSH
18472: LD_INT 1
18474: ST_TO_ADDR
// stevensFollow = false ;
18475: LD_ADDR_EXP 15
18479: PUSH
18480: LD_INT 0
18482: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18483: LD_EXP 39
18487: PPUSH
18488: LD_STRING DKill-1-Bur-1
18490: PPUSH
18491: CALL_OW 88
// if IsOK ( Gleb ) then
18495: LD_EXP 42
18499: PPUSH
18500: CALL_OW 302
18504: IFFALSE 18518
// Say ( Gleb , DKill-1-Glb-1 ) ;
18506: LD_EXP 42
18510: PPUSH
18511: LD_STRING DKill-1-Glb-1
18513: PPUSH
18514: CALL_OW 88
// DialogueOff ;
18518: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18522: LD_EXP 57
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 235
// stevensStatus = 0 ;
18534: LD_ADDR_EXP 2
18538: PUSH
18539: LD_INT 0
18541: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18542: LD_INT 22
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PPUSH
18552: CALL_OW 69
18556: PPUSH
18557: LD_EXP 57
18561: PPUSH
18562: CALL_OW 115
// wait ( 0 0$1 ) ;
18566: LD_INT 35
18568: PPUSH
18569: CALL_OW 67
// until IsDead ( Stevens ) ;
18573: LD_EXP 57
18577: PPUSH
18578: CALL_OW 301
18582: IFFALSE 18542
// wait ( 0 0$1.5 ) ;
18584: LD_INT 52
18586: PPUSH
18587: CALL_OW 67
// end ; 2 :
18591: GO 18677
18593: LD_INT 2
18595: DOUBLE
18596: EQUAL
18597: IFTRUE 18601
18599: GO 18676
18601: POP
// begin stevensCanExitMap = true ;
18602: LD_ADDR_EXP 19
18606: PUSH
18607: LD_INT 1
18609: ST_TO_ADDR
// stevensWasInDepot = false ;
18610: LD_ADDR_EXP 18
18614: PUSH
18615: LD_INT 0
18617: ST_TO_ADDR
// stevensDepot = false ;
18618: LD_ADDR_EXP 17
18622: PUSH
18623: LD_INT 0
18625: ST_TO_ADDR
// stevensStatus = 1 ;
18626: LD_ADDR_EXP 2
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18634: LD_EXP 39
18638: PPUSH
18639: LD_STRING DKill-2-Bur-1
18641: PPUSH
18642: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18646: LD_EXP 43
18650: PPUSH
18651: LD_STRING DKill-2-Pty-1
18653: PPUSH
18654: CALL_OW 88
// DialogueOff ;
18658: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18662: LD_EXP 57
18666: PPUSH
18667: LD_INT 37
18669: PPUSH
18670: CALL_OW 113
// end ; end ;
18674: GO 18677
18676: POP
// end ; SetRewards ;
18677: CALL 18698 0 0
// SavePlayerCharacters ;
18681: CALL 18939 0 0
// SaveGlobalVariables ;
18685: CALL 19284 0 0
// YouWin ;
18689: CALL_OW 103
// end ;
18693: LD_VAR 0 1
18697: RET
// function SetRewards ; begin
18698: LD_INT 0
18700: PPUSH
// if fastBreakthrough then
18701: LD_EXP 23
18705: IFFALSE 18719
// AddMedal ( Time , 1 ) else
18707: LD_STRING Time
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 101
18717: GO 18730
// AddMedal ( Time , - 1 ) ;
18719: LD_STRING Time
18721: PPUSH
18722: LD_INT 1
18724: NEG
18725: PPUSH
18726: CALL_OW 101
// if dial_tameApeBlocker then
18730: LD_EXP 10
18734: IFFALSE 18748
// AddMedal ( Apemen , 1 ) else
18736: LD_STRING Apemen
18738: PPUSH
18739: LD_INT 1
18741: PPUSH
18742: CALL_OW 101
18746: GO 18795
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18748: LD_EXP 10
18752: NOT
18753: PUSH
18754: LD_INT 1
18756: PPUSH
18757: LD_INT 3
18759: PPUSH
18760: CALL_OW 321
18764: PUSH
18765: LD_INT 1
18767: EQUAL
18768: AND
18769: IFFALSE 18784
// AddMedal ( Apemen , - 1 ) else
18771: LD_STRING Apemen
18773: PPUSH
18774: LD_INT 1
18776: NEG
18777: PPUSH
18778: CALL_OW 101
18782: GO 18795
// AddMedal ( Apemen , - 2 ) ;
18784: LD_STRING Apemen
18786: PPUSH
18787: LD_INT 2
18789: NEG
18790: PPUSH
18791: CALL_OW 101
// if not omarStatus then
18795: LD_EXP 1
18799: NOT
18800: IFFALSE 18814
// AddMedal ( Abdul , 1 ) else
18802: LD_STRING Abdul
18804: PPUSH
18805: LD_INT 1
18807: PPUSH
18808: CALL_OW 101
18812: GO 18825
// AddMedal ( Abdul , - 1 ) ;
18814: LD_STRING Abdul
18816: PPUSH
18817: LD_INT 1
18819: NEG
18820: PPUSH
18821: CALL_OW 101
// GiveMedals ( Main ) ;
18825: LD_STRING Main
18827: PPUSH
18828: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18832: LD_INT 22
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 21
18844: PUSH
18845: LD_INT 1
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 23
18854: PUSH
18855: LD_INT 3
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 50
18864: PUSH
18865: EMPTY
18866: LIST
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: LD_INT 25
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 25
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 25
18893: PUSH
18894: LD_INT 3
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 25
18903: PUSH
18904: LD_INT 4
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: PPUSH
18925: CALL_OW 69
18929: PPUSH
18930: CALL_OW 43
// end ;
18934: LD_VAR 0 1
18938: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
18939: LD_INT 0
18941: PPUSH
18942: PPUSH
18943: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
18944: LD_EXP 39
18948: PPUSH
18949: LD_STRING Burlak
18951: PPUSH
18952: LD_INT 3
18954: PPUSH
18955: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
18959: LD_EXP 40
18963: PPUSH
18964: CALL_OW 310
18968: PPUSH
18969: LD_INT 22
18971: PPUSH
18972: CALL_OW 308
18976: IFFALSE 18993
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
18978: LD_EXP 40
18982: PPUSH
18983: LD_STRING Karamazov
18985: PPUSH
18986: LD_INT 3
18988: PPUSH
18989: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
18993: LD_EXP 41
18997: PPUSH
18998: CALL_OW 310
19002: PPUSH
19003: LD_INT 22
19005: PPUSH
19006: CALL_OW 308
19010: IFFALSE 19027
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
19012: LD_EXP 41
19016: PPUSH
19017: LD_STRING Petrovova
19019: PPUSH
19020: LD_INT 3
19022: PPUSH
19023: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
19027: LD_EXP 42
19031: PPUSH
19032: CALL_OW 310
19036: PPUSH
19037: LD_INT 22
19039: PPUSH
19040: CALL_OW 308
19044: IFFALSE 19061
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
19046: LD_EXP 42
19050: PPUSH
19051: LD_STRING Gleb
19053: PPUSH
19054: LD_INT 3
19056: PPUSH
19057: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
19061: LD_EXP 43
19065: PPUSH
19066: CALL_OW 310
19070: PPUSH
19071: LD_INT 22
19073: PPUSH
19074: CALL_OW 308
19078: IFFALSE 19095
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
19080: LD_EXP 43
19084: PPUSH
19085: LD_STRING Petrosyan
19087: PPUSH
19088: LD_INT 3
19090: PPUSH
19091: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
19095: LD_EXP 45
19099: PPUSH
19100: CALL_OW 310
19104: PPUSH
19105: LD_INT 22
19107: PPUSH
19108: CALL_OW 308
19112: IFFALSE 19129
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
19114: LD_EXP 45
19118: PPUSH
19119: LD_STRING Dolgov
19121: PPUSH
19122: LD_INT 3
19124: PPUSH
19125: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
19129: LD_EXP 46
19133: PPUSH
19134: CALL_OW 310
19138: PPUSH
19139: LD_INT 22
19141: PPUSH
19142: CALL_OW 308
19146: IFFALSE 19163
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
19148: LD_EXP 46
19152: PPUSH
19153: LD_STRING Lipshchin
19155: PPUSH
19156: LD_INT 3
19158: PPUSH
19159: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
19163: LD_EXP 44
19167: PPUSH
19168: CALL_OW 310
19172: PPUSH
19173: LD_INT 22
19175: PPUSH
19176: CALL_OW 308
19180: IFFALSE 19197
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
19182: LD_EXP 44
19186: PPUSH
19187: LD_STRING Titov
19189: PPUSH
19190: LD_INT 3
19192: PPUSH
19193: CALL 8573 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
19197: LD_INT 22
19199: PPUSH
19200: LD_INT 22
19202: PUSH
19203: LD_INT 3
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 21
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 25
19225: PUSH
19226: LD_INT 12
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 25
19235: PUSH
19236: LD_INT 16
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 25
19245: PUSH
19246: LD_INT 15
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 70
19268: PPUSH
19269: LD_STRING other_apemans
19271: PPUSH
19272: LD_INT 3
19274: PPUSH
19275: CALL 8629 0 3
// end ;
19279: LD_VAR 0 1
19283: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
19284: LD_INT 0
19286: PPUSH
19287: PPUSH
19288: PPUSH
19289: PPUSH
19290: PPUSH
// resources = [ ] ;
19291: LD_ADDR_VAR 0 3
19295: PUSH
19296: EMPTY
19297: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19298: LD_ADDR_EXP 5
19302: PUSH
19303: EMPTY
19304: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19305: LD_EXP 2
19309: PPUSH
19310: LD_STRING 05_StevensStatus_1
19312: PPUSH
19313: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19317: LD_EXP 1
19321: PPUSH
19322: LD_STRING 05_OmarStatus_2
19324: PPUSH
19325: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) do
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_INT 22
19336: PPUSH
19337: LD_INT 22
19339: PUSH
19340: LD_INT 3
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 59
19349: PUSH
19350: EMPTY
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: LD_INT 34
19358: PUSH
19359: LD_INT 51
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 34
19368: PUSH
19369: LD_INT 32
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: LIST
19385: PPUSH
19386: CALL_OW 70
19390: PUSH
19391: FOR_IN
19392: IFFALSE 19420
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19394: LD_ADDR_VAR 0 3
19398: PUSH
19399: LD_VAR 0 3
19403: PUSH
19404: LD_VAR 0 2
19408: PPUSH
19409: CALL 9759 0 1
19413: PUSH
19414: EMPTY
19415: LIST
19416: ADD
19417: ST_TO_ADDR
19418: GO 19391
19420: POP
19421: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19422: LD_VAR 0 3
19426: PPUSH
19427: LD_STRING 05_ResourcesInCargo_3
19429: PPUSH
19430: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19434: LD_ADDR_VAR 0 2
19438: PUSH
19439: LD_INT 22
19441: PPUSH
19442: LD_INT 22
19444: PUSH
19445: LD_INT 3
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 21
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 59
19464: PUSH
19465: EMPTY
19466: LIST
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 70
19477: PUSH
19478: FOR_IN
19479: IFFALSE 19739
// begin driver = UnitsInside ( i ) [ 1 ] ;
19481: LD_ADDR_VAR 0 4
19485: PUSH
19486: LD_VAR 0 2
19490: PPUSH
19491: CALL_OW 313
19495: PUSH
19496: LD_INT 1
19498: ARRAY
19499: ST_TO_ADDR
// if driver = Burlak then
19500: LD_VAR 0 4
19504: PUSH
19505: LD_EXP 39
19509: EQUAL
19510: IFFALSE 19520
// driverShortName = Bur ;
19512: LD_ADDR_VAR 0 5
19516: PUSH
19517: LD_STRING Bur
19519: ST_TO_ADDR
// if driver = Karamazov then
19520: LD_VAR 0 4
19524: PUSH
19525: LD_EXP 40
19529: EQUAL
19530: IFFALSE 19540
// driverShortName = Kar ;
19532: LD_ADDR_VAR 0 5
19536: PUSH
19537: LD_STRING Kar
19539: ST_TO_ADDR
// if driver = Petrovova then
19540: LD_VAR 0 4
19544: PUSH
19545: LD_EXP 41
19549: EQUAL
19550: IFFALSE 19560
// driverShortName = Ptr ;
19552: LD_ADDR_VAR 0 5
19556: PUSH
19557: LD_STRING Ptr
19559: ST_TO_ADDR
// if driver = Gleb then
19560: LD_VAR 0 4
19564: PUSH
19565: LD_EXP 42
19569: EQUAL
19570: IFFALSE 19580
// driverShortName = Glb ;
19572: LD_ADDR_VAR 0 5
19576: PUSH
19577: LD_STRING Glb
19579: ST_TO_ADDR
// if driver = Petrosyan then
19580: LD_VAR 0 4
19584: PUSH
19585: LD_EXP 43
19589: EQUAL
19590: IFFALSE 19600
// driverShortName = Pet ;
19592: LD_ADDR_VAR 0 5
19596: PUSH
19597: LD_STRING Pet
19599: ST_TO_ADDR
// if driver = Dolgov then
19600: LD_VAR 0 4
19604: PUSH
19605: LD_EXP 45
19609: EQUAL
19610: IFFALSE 19620
// driverShortName = Dol ;
19612: LD_ADDR_VAR 0 5
19616: PUSH
19617: LD_STRING Dol
19619: ST_TO_ADDR
// if driver = Lipshchin then
19620: LD_VAR 0 4
19624: PUSH
19625: LD_EXP 46
19629: EQUAL
19630: IFFALSE 19640
// driverShortName = Lip ;
19632: LD_ADDR_VAR 0 5
19636: PUSH
19637: LD_STRING Lip
19639: ST_TO_ADDR
// if driver = Titov then
19640: LD_VAR 0 4
19644: PUSH
19645: LD_EXP 44
19649: EQUAL
19650: IFFALSE 19660
// driverShortName = Tit ;
19652: LD_ADDR_VAR 0 5
19656: PUSH
19657: LD_STRING Tit
19659: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19660: LD_ADDR_EXP 5
19664: PUSH
19665: LD_EXP 5
19669: PUSH
19670: LD_VAR 0 2
19674: PPUSH
19675: CALL_OW 248
19679: PUSH
19680: LD_VAR 0 2
19684: PPUSH
19685: CALL_OW 265
19689: PUSH
19690: LD_VAR 0 2
19694: PPUSH
19695: CALL_OW 262
19699: PUSH
19700: LD_VAR 0 2
19704: PPUSH
19705: CALL_OW 263
19709: PUSH
19710: LD_VAR 0 2
19714: PPUSH
19715: CALL_OW 264
19719: PUSH
19720: LD_VAR 0 5
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: PUSH
19733: EMPTY
19734: LIST
19735: ADD
19736: ST_TO_ADDR
// end ;
19737: GO 19478
19739: POP
19740: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19741: LD_EXP 5
19745: PPUSH
19746: LD_STRING 05_Tanks_4
19748: PPUSH
19749: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19753: LD_INT 22
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 23
19765: PUSH
19766: LD_INT 3
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 21
19775: PUSH
19776: LD_INT 3
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 30
19788: PUSH
19789: LD_INT 6
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 30
19798: PUSH
19799: LD_INT 7
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: NOT
19822: IFFALSE 19832
// labDestroyed = 1 ;
19824: LD_ADDR_EXP 3
19828: PUSH
19829: LD_INT 1
19831: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
19832: LD_EXP 3
19836: PPUSH
19837: LD_STRING 05_LabDestroyed_5
19839: PPUSH
19840: CALL_OW 39
// end ; end_of_file
19844: LD_VAR 0 1
19848: RET
// export function Nef_PrepareNature ; var i , un ; begin
19849: LD_INT 0
19851: PPUSH
19852: PPUSH
19853: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
19854: LD_ADDR_VAR 0 2
19858: PUSH
19859: DOUBLE
19860: LD_INT 1
19862: DEC
19863: ST_TO_ADDR
19864: LD_EXP 27
19868: PUSH
19869: LD_INT 1
19871: ARRAY
19872: PUSH
19873: FOR_TO
19874: IFFALSE 19984
// begin uc_side = 0 ;
19876: LD_ADDR_OWVAR 20
19880: PUSH
19881: LD_INT 0
19883: ST_TO_ADDR
// uc_nation = nation_nature ;
19884: LD_ADDR_OWVAR 21
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// hc_class = class_apeman ;
19892: LD_ADDR_OWVAR 28
19896: PUSH
19897: LD_INT 12
19899: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19900: LD_ADDR_OWVAR 31
19904: PUSH
19905: LD_EXP 28
19909: PUSH
19910: LD_INT 1
19912: ARRAY
19913: PUSH
19914: LD_EXP 28
19918: PUSH
19919: LD_INT 2
19921: ARRAY
19922: PUSH
19923: LD_EXP 28
19927: PUSH
19928: LD_INT 3
19930: ARRAY
19931: PUSH
19932: LD_EXP 28
19936: PUSH
19937: LD_INT 4
19939: ARRAY
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19947: LD_ADDR_OWVAR 35
19951: PUSH
19952: LD_EXP 29
19956: ST_TO_ADDR
// un = CreateHuman ;
19957: LD_ADDR_VAR 0 3
19961: PUSH
19962: CALL_OW 44
19966: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19967: LD_VAR 0 3
19971: PPUSH
19972: LD_INT 33
19974: PPUSH
19975: LD_INT 0
19977: PPUSH
19978: CALL_OW 49
// end ;
19982: GO 19873
19984: POP
19985: POP
// for i := 1 to animalsAmount [ 2 ] do
19986: LD_ADDR_VAR 0 2
19990: PUSH
19991: DOUBLE
19992: LD_INT 1
19994: DEC
19995: ST_TO_ADDR
19996: LD_EXP 27
20000: PUSH
20001: LD_INT 2
20003: ARRAY
20004: PUSH
20005: FOR_TO
20006: IFFALSE 20116
// begin uc_side = 0 ;
20008: LD_ADDR_OWVAR 20
20012: PUSH
20013: LD_INT 0
20015: ST_TO_ADDR
// uc_nation = nation_nature ;
20016: LD_ADDR_OWVAR 21
20020: PUSH
20021: LD_INT 0
20023: ST_TO_ADDR
// hc_class = class_phororhacos ;
20024: LD_ADDR_OWVAR 28
20028: PUSH
20029: LD_INT 18
20031: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20032: LD_ADDR_OWVAR 31
20036: PUSH
20037: LD_EXP 28
20041: PUSH
20042: LD_INT 1
20044: ARRAY
20045: PUSH
20046: LD_EXP 28
20050: PUSH
20051: LD_INT 2
20053: ARRAY
20054: PUSH
20055: LD_EXP 28
20059: PUSH
20060: LD_INT 3
20062: ARRAY
20063: PUSH
20064: LD_EXP 28
20068: PUSH
20069: LD_INT 4
20071: ARRAY
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20079: LD_ADDR_OWVAR 35
20083: PUSH
20084: LD_EXP 29
20088: ST_TO_ADDR
// un = CreateHuman ;
20089: LD_ADDR_VAR 0 3
20093: PUSH
20094: CALL_OW 44
20098: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20099: LD_VAR 0 3
20103: PPUSH
20104: LD_INT 33
20106: PPUSH
20107: LD_INT 0
20109: PPUSH
20110: CALL_OW 49
// end ;
20114: GO 20005
20116: POP
20117: POP
// for i := 1 to animalsAmount [ 3 ] do
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: DOUBLE
20124: LD_INT 1
20126: DEC
20127: ST_TO_ADDR
20128: LD_EXP 27
20132: PUSH
20133: LD_INT 3
20135: ARRAY
20136: PUSH
20137: FOR_TO
20138: IFFALSE 20248
// begin uc_side = 0 ;
20140: LD_ADDR_OWVAR 20
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// uc_nation = nation_nature ;
20148: LD_ADDR_OWVAR 21
20152: PUSH
20153: LD_INT 0
20155: ST_TO_ADDR
// hc_class = class_tiger ;
20156: LD_ADDR_OWVAR 28
20160: PUSH
20161: LD_INT 14
20163: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20164: LD_ADDR_OWVAR 31
20168: PUSH
20169: LD_EXP 28
20173: PUSH
20174: LD_INT 1
20176: ARRAY
20177: PUSH
20178: LD_EXP 28
20182: PUSH
20183: LD_INT 2
20185: ARRAY
20186: PUSH
20187: LD_EXP 28
20191: PUSH
20192: LD_INT 3
20194: ARRAY
20195: PUSH
20196: LD_EXP 28
20200: PUSH
20201: LD_INT 4
20203: ARRAY
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20211: LD_ADDR_OWVAR 35
20215: PUSH
20216: LD_EXP 29
20220: ST_TO_ADDR
// un = CreateHuman ;
20221: LD_ADDR_VAR 0 3
20225: PUSH
20226: CALL_OW 44
20230: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20231: LD_VAR 0 3
20235: PPUSH
20236: LD_INT 33
20238: PPUSH
20239: LD_INT 0
20241: PPUSH
20242: CALL_OW 49
// end ;
20246: GO 20137
20248: POP
20249: POP
// for i := 1 to animalsAmount [ 4 ] do
20250: LD_ADDR_VAR 0 2
20254: PUSH
20255: DOUBLE
20256: LD_INT 1
20258: DEC
20259: ST_TO_ADDR
20260: LD_EXP 27
20264: PUSH
20265: LD_INT 4
20267: ARRAY
20268: PUSH
20269: FOR_TO
20270: IFFALSE 20380
// begin uc_side = 0 ;
20272: LD_ADDR_OWVAR 20
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// uc_nation = nation_nature ;
20280: LD_ADDR_OWVAR 21
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// hc_class = 21 ;
20288: LD_ADDR_OWVAR 28
20292: PUSH
20293: LD_INT 21
20295: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20296: LD_ADDR_OWVAR 31
20300: PUSH
20301: LD_EXP 28
20305: PUSH
20306: LD_INT 1
20308: ARRAY
20309: PUSH
20310: LD_EXP 28
20314: PUSH
20315: LD_INT 2
20317: ARRAY
20318: PUSH
20319: LD_EXP 28
20323: PUSH
20324: LD_INT 3
20326: ARRAY
20327: PUSH
20328: LD_EXP 28
20332: PUSH
20333: LD_INT 4
20335: ARRAY
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20343: LD_ADDR_OWVAR 35
20347: PUSH
20348: LD_EXP 29
20352: ST_TO_ADDR
// un = CreateHuman ;
20353: LD_ADDR_VAR 0 3
20357: PUSH
20358: CALL_OW 44
20362: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20363: LD_VAR 0 3
20367: PPUSH
20368: LD_INT 33
20370: PPUSH
20371: LD_INT 0
20373: PPUSH
20374: CALL_OW 49
// end ;
20378: GO 20269
20380: POP
20381: POP
// for i := 1 to animalsAmount [ 5 ] do
20382: LD_ADDR_VAR 0 2
20386: PUSH
20387: DOUBLE
20388: LD_INT 1
20390: DEC
20391: ST_TO_ADDR
20392: LD_EXP 27
20396: PUSH
20397: LD_INT 5
20399: ARRAY
20400: PUSH
20401: FOR_TO
20402: IFFALSE 20463
// begin uc_side = 0 ;
20404: LD_ADDR_OWVAR 20
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// uc_nation = nation_nature ;
20412: LD_ADDR_OWVAR 21
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// vc_chassis := 31 ;
20420: LD_ADDR_OWVAR 37
20424: PUSH
20425: LD_INT 31
20427: ST_TO_ADDR
// vc_control := control_rider ;
20428: LD_ADDR_OWVAR 38
20432: PUSH
20433: LD_INT 4
20435: ST_TO_ADDR
// un := CreateVehicle ;
20436: LD_ADDR_VAR 0 3
20440: PUSH
20441: CALL_OW 45
20445: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20446: LD_VAR 0 3
20450: PPUSH
20451: LD_INT 33
20453: PPUSH
20454: LD_INT 0
20456: PPUSH
20457: CALL_OW 49
// end ;
20461: GO 20401
20463: POP
20464: POP
// end ; end_of_file
20465: LD_VAR 0 1
20469: RET
// every 0 0$1 do
20470: GO 20472
20472: DISABLE
// begin enable ;
20473: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20474: LD_ADDR_OWVAR 47
20478: PUSH
20479: LD_STRING #Am01-1
20481: PUSH
20482: LD_EXP 7
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20491: LD_ADDR_EXP 7
20495: PUSH
20496: LD_EXP 7
20500: PUSH
20501: LD_INT 35
20503: PLUS
20504: ST_TO_ADDR
// end ; end_of_file
20505: END
// every 0 0$01 do var timer ;
20506: GO 20508
20508: DISABLE
20509: LD_INT 0
20511: PPUSH
// begin timer := 0 0$30 ;
20512: LD_ADDR_VAR 0 1
20516: PUSH
20517: LD_INT 1050
20519: ST_TO_ADDR
// repeat wait ( timer ) ;
20520: LD_VAR 0 1
20524: PPUSH
20525: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20529: LD_EXP 22
20533: PUSH
20534: LD_INT 6
20536: GREATEREQUAL
20537: PUSH
20538: LD_EXP 22
20542: PUSH
20543: LD_INT 12
20545: LESS
20546: AND
20547: IFFALSE 20563
// timer := timer + 0 0$3 ;
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: LD_VAR 0 1
20558: PUSH
20559: LD_INT 105
20561: PLUS
20562: ST_TO_ADDR
// if cratesSpawned >= 12 then
20563: LD_EXP 22
20567: PUSH
20568: LD_INT 12
20570: GREATEREQUAL
20571: IFFALSE 20587
// timer := timer + 0 0$9 ;
20573: LD_ADDR_VAR 0 1
20577: PUSH
20578: LD_VAR 0 1
20582: PUSH
20583: LD_INT 315
20585: PLUS
20586: ST_TO_ADDR
// if timer > 3 3$00 then
20587: LD_VAR 0 1
20591: PUSH
20592: LD_INT 6300
20594: GREATER
20595: IFFALSE 20605
// timer := 0 0$50 ;
20597: LD_ADDR_VAR 0 1
20601: PUSH
20602: LD_INT 1750
20604: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20605: LD_INT 3
20607: PPUSH
20608: LD_INT 5
20610: PPUSH
20611: CALL_OW 12
20615: PPUSH
20616: LD_INT 46
20618: PPUSH
20619: LD_INT 1
20621: PPUSH
20622: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20626: LD_ADDR_EXP 22
20630: PUSH
20631: LD_EXP 22
20635: PUSH
20636: LD_INT 1
20638: PLUS
20639: ST_TO_ADDR
// until false ;
20640: LD_INT 0
20642: IFFALSE 20520
// end ;
20644: PPOPN 1
20646: END
// every 0 0$5 do
20647: GO 20649
20649: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20650: LD_INT 5
20652: PPUSH
20653: LD_INT 48
20655: PPUSH
20656: LD_INT 1
20658: PPUSH
20659: CALL_OW 55
// wait ( 0 0$40 ) ;
20663: LD_INT 1400
20665: PPUSH
20666: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20670: LD_INT 5
20672: PPUSH
20673: LD_INT 48
20675: PPUSH
20676: LD_INT 1
20678: PPUSH
20679: CALL_OW 55
// end ;
20683: END
// every 10 10$0 do
20684: GO 20686
20686: DISABLE
// begin enable ;
20687: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20688: LD_INT 3
20690: PPUSH
20691: LD_INT 5
20693: PPUSH
20694: CALL_OW 12
20698: PPUSH
20699: LD_INT 48
20701: PPUSH
20702: LD_INT 1
20704: PPUSH
20705: CALL_OW 55
// end ; end_of_file
20709: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20710: LD_INT 0
20712: PPUSH
// uc_side = 1 ;
20713: LD_ADDR_OWVAR 20
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20721: LD_ADDR_EXP 57
20725: PUSH
20726: LD_STRING Stevens
20728: PPUSH
20729: LD_INT 0
20731: PPUSH
20732: LD_INT 0
20734: PPUSH
20735: CALL 8455 0 3
20739: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20740: LD_EXP 57
20744: PPUSH
20745: LD_VAR 0 1
20749: PPUSH
20750: LD_INT 1
20752: PPUSH
20753: CALL_OW 49
// end ; end_of_file
20757: LD_VAR 0 2
20761: RET
// every 1 trigger achievement_DestroyedHovercrafts >= 3 do
20762: LD_EXP 25
20766: PUSH
20767: LD_INT 3
20769: GREATEREQUAL
20770: IFFALSE 20782
20772: GO 20774
20774: DISABLE
// SetAchievement ( ACH_HOVER ) ;
20775: LD_STRING ACH_HOVER
20777: PPUSH
20778: CALL_OW 543
20782: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_nature ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) and not FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_class , class_apeman ] ] ) do
20783: LD_INT 22
20785: PUSH
20786: LD_INT 3
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 23
20795: PUSH
20796: LD_INT 0
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: LD_INT 25
20808: PUSH
20809: LD_INT 12
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 25
20818: PUSH
20819: LD_INT 16
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 25
20828: PUSH
20829: LD_INT 15
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: PPUSH
20847: CALL_OW 69
20851: PUSH
20852: LD_INT 22
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 23
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 25
20874: PUSH
20875: LD_INT 12
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: PPUSH
20887: CALL_OW 69
20891: NOT
20892: AND
20893: IFFALSE 20905
20895: GO 20897
20897: DISABLE
// SetAchievement ( ACH_REDARMY ) ;
20898: LD_STRING ACH_REDARMY
20900: PPUSH
20901: CALL_OW 543
20905: END
// every 0 0$1 trigger not achievement_CollectedCrates do var crates , depot ;
20906: LD_EXP 26
20910: NOT
20911: IFFALSE 21044
20913: GO 20915
20915: DISABLE
20916: LD_INT 0
20918: PPUSH
20919: PPUSH
// begin enable ;
20920: ENABLE
// crates = 0 ;
20921: LD_ADDR_VAR 0 1
20925: PUSH
20926: LD_INT 0
20928: ST_TO_ADDR
// for depot in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
20929: LD_ADDR_VAR 0 2
20933: PUSH
20934: LD_INT 22
20936: PUSH
20937: LD_INT 3
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 21
20946: PUSH
20947: LD_INT 3
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 30
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 50
20966: PUSH
20967: EMPTY
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: PPUSH
20976: CALL_OW 69
20980: PUSH
20981: FOR_IN
20982: IFFALSE 21015
// crates = crates + GetResourceType ( GetBase ( depot ) , mat_cans ) ;
20984: LD_ADDR_VAR 0 1
20988: PUSH
20989: LD_VAR 0 1
20993: PUSH
20994: LD_VAR 0 2
20998: PPUSH
20999: CALL_OW 274
21003: PPUSH
21004: LD_INT 1
21006: PPUSH
21007: CALL_OW 275
21011: PLUS
21012: ST_TO_ADDR
21013: GO 20981
21015: POP
21016: POP
// if crates >= 500 then
21017: LD_VAR 0 1
21021: PUSH
21022: LD_INT 500
21024: GREATEREQUAL
21025: IFFALSE 21044
// begin achievement_CollectedCrates = true ;
21027: LD_ADDR_EXP 26
21031: PUSH
21032: LD_INT 1
21034: ST_TO_ADDR
// SetAchievement ( ACH_CRATES ) ;
21035: LD_STRING ACH_CRATES
21037: PPUSH
21038: CALL_OW 543
// exit ;
21042: GO 21044
// end ; end ; end_of_file
21044: PPOPN 2
21046: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
21047: LD_INT 0
21049: PPUSH
21050: PPUSH
// if not missionNumber then
21051: LD_VAR 0 2
21055: NOT
21056: IFFALSE 21060
// exit ;
21058: GO 21190
// achiv := false ;
21060: LD_ADDR_VAR 0 7
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
// case campaignNumber of 1 :
21068: LD_VAR 0 1
21072: PUSH
21073: LD_INT 1
21075: DOUBLE
21076: EQUAL
21077: IFTRUE 21081
21079: GO 21092
21081: POP
// achiv := ACH_GOTA ; 2 :
21082: LD_ADDR_VAR 0 7
21086: PUSH
21087: LD_STRING ACH_GOTA
21089: ST_TO_ADDR
21090: GO 21142
21092: LD_INT 2
21094: DOUBLE
21095: EQUAL
21096: IFTRUE 21100
21098: GO 21103
21100: POP
// ; 3 :
21101: GO 21142
21103: LD_INT 3
21105: DOUBLE
21106: EQUAL
21107: IFTRUE 21111
21109: GO 21122
21111: POP
// achiv := ACH_MOTSU ; 4 :
21112: LD_ADDR_VAR 0 7
21116: PUSH
21117: LD_STRING ACH_MOTSU
21119: ST_TO_ADDR
21120: GO 21142
21122: LD_INT 4
21124: DOUBLE
21125: EQUAL
21126: IFTRUE 21130
21128: GO 21141
21130: POP
// achiv := ACH_LOP ; end ;
21131: LD_ADDR_VAR 0 7
21135: PUSH
21136: LD_STRING ACH_LOP
21138: ST_TO_ADDR
21139: GO 21142
21141: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
21142: LD_OWVAR 67
21146: PUSH
21147: LD_INT 3
21149: EQUAL
21150: PUSH
21151: LD_VAR 0 7
21155: AND
21156: PUSH
21157: LD_VAR 0 3
21161: AND
21162: PUSH
21163: LD_VAR 0 4
21167: AND
21168: PUSH
21169: LD_VAR 0 5
21173: AND
21174: IFFALSE 21190
// SetAchievementEX ( achiv , missionNumber ) ;
21176: LD_VAR 0 7
21180: PPUSH
21181: LD_VAR 0 2
21185: PPUSH
21186: CALL_OW 564
// end ;
21190: LD_VAR 0 6
21194: RET
// export function SA_BehemothConstructed ; begin
21195: LD_INT 0
21197: PPUSH
// SetAchievement ( ACH_SMC ) ;
21198: LD_STRING ACH_SMC
21200: PPUSH
21201: CALL_OW 543
// end ;
21205: LD_VAR 0 1
21209: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
21210: LD_VAR 0 2
21214: PUSH
21215: LD_INT 1
21217: DOUBLE
21218: EQUAL
21219: IFTRUE 21223
21221: GO 21230
21223: POP
// HackUnlimitedResources ; 2 :
21224: CALL 21414 0 0
21228: GO 21411
21230: LD_INT 2
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21245
21238: POP
// HackSetLevel10 ; 3 :
21239: CALL 21547 0 0
21243: GO 21411
21245: LD_INT 3
21247: DOUBLE
21248: EQUAL
21249: IFTRUE 21253
21251: GO 21260
21253: POP
// HackSetLevel10YourUnits ; 4 :
21254: CALL 21632 0 0
21258: GO 21411
21260: LD_INT 4
21262: DOUBLE
21263: EQUAL
21264: IFTRUE 21268
21266: GO 21290
21268: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
21269: LD_VAR 0 3
21273: PPUSH
21274: LD_VAR 0 4
21278: PPUSH
21279: LD_VAR 0 5
21283: PPUSH
21284: CALL 21722 0 3
21288: GO 21411
21290: LD_INT 5
21292: DOUBLE
21293: EQUAL
21294: IFTRUE 21298
21296: GO 21305
21298: POP
// HackSpawnVehicle ; 6 :
21299: CALL 21783 0 0
21303: GO 21411
21305: LD_INT 6
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21320
21313: POP
// HackInvincible ; 7 :
21314: CALL 22858 0 0
21318: GO 21411
21320: LD_INT 7
21322: DOUBLE
21323: EQUAL
21324: IFTRUE 21328
21326: GO 21335
21328: POP
// HackInvisible ; 8 :
21329: CALL 22969 0 0
21333: GO 21411
21335: LD_INT 8
21337: DOUBLE
21338: EQUAL
21339: IFTRUE 21343
21341: GO 21350
21343: POP
// HackChangeYourSide ; 9 :
21344: CALL 23026 0 0
21348: GO 21411
21350: LD_INT 9
21352: DOUBLE
21353: EQUAL
21354: IFTRUE 21358
21356: GO 21365
21358: POP
// HackChangeUnitSide ; 10 :
21359: CALL 23068 0 0
21363: GO 21411
21365: LD_INT 10
21367: DOUBLE
21368: EQUAL
21369: IFTRUE 21373
21371: GO 21380
21373: POP
// HackFog ; 11 :
21374: CALL 23169 0 0
21378: GO 21411
21380: LD_INT 11
21382: DOUBLE
21383: EQUAL
21384: IFTRUE 21388
21386: GO 21395
21388: POP
// HackApeman ; 12 :
21389: CALL 23184 0 0
21393: GO 21411
21395: LD_INT 12
21397: DOUBLE
21398: EQUAL
21399: IFTRUE 21403
21401: GO 21410
21403: POP
// HackBoom ; end ;
21404: CALL 23269 0 0
21408: GO 21411
21410: POP
// end ;
21411: PPOPN 6
21413: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
21414: LD_INT 0
21416: PPUSH
21417: PPUSH
21418: PPUSH
21419: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21420: LD_ADDR_VAR 0 4
21424: PUSH
21425: LD_INT 22
21427: PUSH
21428: LD_OWVAR 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: LD_INT 30
21442: PUSH
21443: LD_INT 0
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 30
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PPUSH
21469: CALL_OW 69
21473: ST_TO_ADDR
// if not tmp then
21474: LD_VAR 0 4
21478: NOT
21479: IFFALSE 21483
// exit ;
21481: GO 21542
// for i in tmp do
21483: LD_ADDR_VAR 0 2
21487: PUSH
21488: LD_VAR 0 4
21492: PUSH
21493: FOR_IN
21494: IFFALSE 21540
// for j = 1 to 3 do
21496: LD_ADDR_VAR 0 3
21500: PUSH
21501: DOUBLE
21502: LD_INT 1
21504: DEC
21505: ST_TO_ADDR
21506: LD_INT 3
21508: PUSH
21509: FOR_TO
21510: IFFALSE 21536
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21512: LD_VAR 0 2
21516: PPUSH
21517: CALL_OW 274
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: LD_INT 99999
21529: PPUSH
21530: CALL_OW 277
21534: GO 21509
21536: POP
21537: POP
21538: GO 21493
21540: POP
21541: POP
// end ;
21542: LD_VAR 0 1
21546: RET
// export function HackSetLevel10 ; var i , j ; begin
21547: LD_INT 0
21549: PPUSH
21550: PPUSH
21551: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21552: LD_ADDR_VAR 0 2
21556: PUSH
21557: LD_INT 21
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PPUSH
21567: CALL_OW 69
21571: PUSH
21572: FOR_IN
21573: IFFALSE 21625
// if IsSelected ( i ) then
21575: LD_VAR 0 2
21579: PPUSH
21580: CALL_OW 306
21584: IFFALSE 21623
// begin for j := 1 to 4 do
21586: LD_ADDR_VAR 0 3
21590: PUSH
21591: DOUBLE
21592: LD_INT 1
21594: DEC
21595: ST_TO_ADDR
21596: LD_INT 4
21598: PUSH
21599: FOR_TO
21600: IFFALSE 21621
// SetSkill ( i , j , 10 ) ;
21602: LD_VAR 0 2
21606: PPUSH
21607: LD_VAR 0 3
21611: PPUSH
21612: LD_INT 10
21614: PPUSH
21615: CALL_OW 237
21619: GO 21599
21621: POP
21622: POP
// end ;
21623: GO 21572
21625: POP
21626: POP
// end ;
21627: LD_VAR 0 1
21631: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
21632: LD_INT 0
21634: PPUSH
21635: PPUSH
21636: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21637: LD_ADDR_VAR 0 2
21641: PUSH
21642: LD_INT 22
21644: PUSH
21645: LD_OWVAR 2
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 21
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PPUSH
21668: CALL_OW 69
21672: PUSH
21673: FOR_IN
21674: IFFALSE 21715
// begin for j := 1 to 4 do
21676: LD_ADDR_VAR 0 3
21680: PUSH
21681: DOUBLE
21682: LD_INT 1
21684: DEC
21685: ST_TO_ADDR
21686: LD_INT 4
21688: PUSH
21689: FOR_TO
21690: IFFALSE 21711
// SetSkill ( i , j , 10 ) ;
21692: LD_VAR 0 2
21696: PPUSH
21697: LD_VAR 0 3
21701: PPUSH
21702: LD_INT 10
21704: PPUSH
21705: CALL_OW 237
21709: GO 21689
21711: POP
21712: POP
// end ;
21713: GO 21673
21715: POP
21716: POP
// end ;
21717: LD_VAR 0 1
21721: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
21722: LD_INT 0
21724: PPUSH
// uc_side := your_side ;
21725: LD_ADDR_OWVAR 20
21729: PUSH
21730: LD_OWVAR 2
21734: ST_TO_ADDR
// uc_nation := nation ;
21735: LD_ADDR_OWVAR 21
21739: PUSH
21740: LD_VAR 0 1
21744: ST_TO_ADDR
// InitHc ;
21745: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21749: LD_INT 0
21751: PPUSH
21752: LD_VAR 0 2
21756: PPUSH
21757: LD_VAR 0 3
21761: PPUSH
21762: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
21766: CALL_OW 44
21770: PPUSH
21771: LD_INT 1
21773: PPUSH
21774: CALL_OW 51
// end ;
21778: LD_VAR 0 4
21782: RET
// export function HackSpawnVehicle ; begin
21783: LD_INT 0
21785: PPUSH
// uc_side := your_side ;
21786: LD_ADDR_OWVAR 20
21790: PUSH
21791: LD_OWVAR 2
21795: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
21796: LD_ADDR_OWVAR 21
21800: PUSH
21801: LD_INT 1
21803: PPUSH
21804: LD_INT 3
21806: PPUSH
21807: CALL_OW 12
21811: ST_TO_ADDR
// InitVc ;
21812: CALL_OW 20
// case uc_nation of 1 :
21816: LD_OWVAR 21
21820: PUSH
21821: LD_INT 1
21823: DOUBLE
21824: EQUAL
21825: IFTRUE 21829
21827: GO 22136
21829: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
21830: LD_ADDR_OWVAR 37
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: LD_INT 2
21840: PUSH
21841: LD_INT 3
21843: PUSH
21844: LD_INT 4
21846: PUSH
21847: LD_INT 5
21849: PUSH
21850: LD_INT 11
21852: PUSH
21853: LD_INT 12
21855: PUSH
21856: LD_INT 13
21858: PUSH
21859: LD_INT 14
21861: PUSH
21862: LD_INT 21
21864: PUSH
21865: LD_INT 22
21867: PUSH
21868: LD_INT 23
21870: PUSH
21871: LD_INT 24
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 1
21891: PPUSH
21892: LD_INT 13
21894: PPUSH
21895: CALL_OW 12
21899: ARRAY
21900: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
21901: LD_ADDR_OWVAR 38
21905: PUSH
21906: LD_INT 1
21908: PUSH
21909: LD_INT 3
21911: PUSH
21912: LD_INT 4
21914: PUSH
21915: LD_INT 5
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: PPUSH
21927: LD_INT 4
21929: PPUSH
21930: CALL_OW 12
21934: ARRAY
21935: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
21936: LD_ADDR_OWVAR 39
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: LD_INT 3
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 1
21957: PPUSH
21958: LD_INT 3
21960: PPUSH
21961: CALL_OW 12
21965: ARRAY
21966: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
21967: LD_ADDR_OWVAR 40
21971: PUSH
21972: LD_INT 14
21974: PUSH
21975: LD_INT 12
21977: PUSH
21978: LD_INT 13
21980: PUSH
21981: LD_INT 5
21983: PUSH
21984: LD_INT 10
21986: PUSH
21987: LD_INT 4
21989: PUSH
21990: LD_INT 6
21992: PUSH
21993: LD_INT 9
21995: PUSH
21996: LD_INT 3
21998: PUSH
21999: LD_INT 2
22001: PUSH
22002: LD_INT 11
22004: PUSH
22005: LD_INT 7
22007: PUSH
22008: LD_INT 8
22010: PUSH
22011: LD_INT 15
22013: PUSH
22014: LD_INT 32
22016: PUSH
22017: LD_INT 31
22019: PUSH
22020: LD_INT 24
22022: PUSH
22023: LD_INT 26
22025: PUSH
22026: LD_INT 25
22028: PUSH
22029: LD_INT 27
22031: PUSH
22032: LD_INT 23
22034: PUSH
22035: LD_INT 22
22037: PUSH
22038: LD_INT 30
22040: PUSH
22041: LD_INT 28
22043: PUSH
22044: LD_INT 29
22046: PUSH
22047: LD_INT 53
22049: PUSH
22050: LD_INT 51
22052: PUSH
22053: LD_INT 52
22055: PUSH
22056: LD_INT 43
22058: PUSH
22059: LD_INT 44
22061: PUSH
22062: LD_INT 46
22064: PUSH
22065: LD_INT 42
22067: PUSH
22068: LD_INT 47
22070: PUSH
22071: LD_INT 45
22073: PUSH
22074: LD_INT 48
22076: PUSH
22077: LD_INT 55
22079: PUSH
22080: LD_INT 49
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 1
22124: PPUSH
22125: LD_INT 37
22127: PPUSH
22128: CALL_OW 12
22132: ARRAY
22133: ST_TO_ADDR
// end ; 2 :
22134: GO 22767
22136: LD_INT 2
22138: DOUBLE
22139: EQUAL
22140: IFTRUE 22144
22142: GO 22451
22144: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
22145: LD_ADDR_OWVAR 37
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 2
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: LD_INT 4
22161: PUSH
22162: LD_INT 5
22164: PUSH
22165: LD_INT 11
22167: PUSH
22168: LD_INT 12
22170: PUSH
22171: LD_INT 13
22173: PUSH
22174: LD_INT 14
22176: PUSH
22177: LD_INT 21
22179: PUSH
22180: LD_INT 22
22182: PUSH
22183: LD_INT 23
22185: PUSH
22186: LD_INT 24
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 1
22206: PPUSH
22207: LD_INT 13
22209: PPUSH
22210: CALL_OW 12
22214: ARRAY
22215: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
22216: LD_ADDR_OWVAR 38
22220: PUSH
22221: LD_INT 1
22223: PUSH
22224: LD_INT 3
22226: PUSH
22227: LD_INT 4
22229: PUSH
22230: LD_INT 5
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 1
22241: PPUSH
22242: LD_INT 4
22244: PPUSH
22245: CALL_OW 12
22249: ARRAY
22250: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
22251: LD_ADDR_OWVAR 39
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: LD_INT 2
22261: PUSH
22262: LD_INT 3
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: PPUSH
22273: LD_INT 3
22275: PPUSH
22276: CALL_OW 12
22280: ARRAY
22281: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
22282: LD_ADDR_OWVAR 40
22286: PUSH
22287: LD_INT 14
22289: PUSH
22290: LD_INT 12
22292: PUSH
22293: LD_INT 13
22295: PUSH
22296: LD_INT 5
22298: PUSH
22299: LD_INT 10
22301: PUSH
22302: LD_INT 4
22304: PUSH
22305: LD_INT 6
22307: PUSH
22308: LD_INT 9
22310: PUSH
22311: LD_INT 3
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: LD_INT 11
22319: PUSH
22320: LD_INT 7
22322: PUSH
22323: LD_INT 8
22325: PUSH
22326: LD_INT 15
22328: PUSH
22329: LD_INT 32
22331: PUSH
22332: LD_INT 31
22334: PUSH
22335: LD_INT 24
22337: PUSH
22338: LD_INT 26
22340: PUSH
22341: LD_INT 25
22343: PUSH
22344: LD_INT 27
22346: PUSH
22347: LD_INT 23
22349: PUSH
22350: LD_INT 22
22352: PUSH
22353: LD_INT 30
22355: PUSH
22356: LD_INT 28
22358: PUSH
22359: LD_INT 29
22361: PUSH
22362: LD_INT 53
22364: PUSH
22365: LD_INT 51
22367: PUSH
22368: LD_INT 52
22370: PUSH
22371: LD_INT 43
22373: PUSH
22374: LD_INT 44
22376: PUSH
22377: LD_INT 46
22379: PUSH
22380: LD_INT 42
22382: PUSH
22383: LD_INT 47
22385: PUSH
22386: LD_INT 45
22388: PUSH
22389: LD_INT 48
22391: PUSH
22392: LD_INT 55
22394: PUSH
22395: LD_INT 49
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 1
22439: PPUSH
22440: LD_INT 37
22442: PPUSH
22443: CALL_OW 12
22447: ARRAY
22448: ST_TO_ADDR
// end ; 3 :
22449: GO 22767
22451: LD_INT 3
22453: DOUBLE
22454: EQUAL
22455: IFTRUE 22459
22457: GO 22766
22459: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
22460: LD_ADDR_OWVAR 37
22464: PUSH
22465: LD_INT 1
22467: PUSH
22468: LD_INT 2
22470: PUSH
22471: LD_INT 3
22473: PUSH
22474: LD_INT 4
22476: PUSH
22477: LD_INT 5
22479: PUSH
22480: LD_INT 11
22482: PUSH
22483: LD_INT 12
22485: PUSH
22486: LD_INT 13
22488: PUSH
22489: LD_INT 14
22491: PUSH
22492: LD_INT 21
22494: PUSH
22495: LD_INT 22
22497: PUSH
22498: LD_INT 23
22500: PUSH
22501: LD_INT 24
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: PPUSH
22522: LD_INT 13
22524: PPUSH
22525: CALL_OW 12
22529: ARRAY
22530: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
22531: LD_ADDR_OWVAR 38
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 3
22541: PUSH
22542: LD_INT 4
22544: PUSH
22545: LD_INT 5
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 1
22556: PPUSH
22557: LD_INT 4
22559: PPUSH
22560: CALL_OW 12
22564: ARRAY
22565: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
22566: LD_ADDR_OWVAR 39
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: LD_INT 2
22576: PUSH
22577: LD_INT 3
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: PPUSH
22588: LD_INT 3
22590: PPUSH
22591: CALL_OW 12
22595: ARRAY
22596: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
22597: LD_ADDR_OWVAR 40
22601: PUSH
22602: LD_INT 14
22604: PUSH
22605: LD_INT 12
22607: PUSH
22608: LD_INT 13
22610: PUSH
22611: LD_INT 5
22613: PUSH
22614: LD_INT 10
22616: PUSH
22617: LD_INT 4
22619: PUSH
22620: LD_INT 6
22622: PUSH
22623: LD_INT 9
22625: PUSH
22626: LD_INT 3
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: LD_INT 11
22634: PUSH
22635: LD_INT 7
22637: PUSH
22638: LD_INT 8
22640: PUSH
22641: LD_INT 15
22643: PUSH
22644: LD_INT 32
22646: PUSH
22647: LD_INT 31
22649: PUSH
22650: LD_INT 24
22652: PUSH
22653: LD_INT 26
22655: PUSH
22656: LD_INT 25
22658: PUSH
22659: LD_INT 27
22661: PUSH
22662: LD_INT 23
22664: PUSH
22665: LD_INT 22
22667: PUSH
22668: LD_INT 30
22670: PUSH
22671: LD_INT 28
22673: PUSH
22674: LD_INT 29
22676: PUSH
22677: LD_INT 53
22679: PUSH
22680: LD_INT 51
22682: PUSH
22683: LD_INT 52
22685: PUSH
22686: LD_INT 43
22688: PUSH
22689: LD_INT 44
22691: PUSH
22692: LD_INT 46
22694: PUSH
22695: LD_INT 42
22697: PUSH
22698: LD_INT 47
22700: PUSH
22701: LD_INT 45
22703: PUSH
22704: LD_INT 48
22706: PUSH
22707: LD_INT 55
22709: PUSH
22710: LD_INT 49
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 1
22754: PPUSH
22755: LD_INT 37
22757: PPUSH
22758: CALL_OW 12
22762: ARRAY
22763: ST_TO_ADDR
// end ; end ;
22764: GO 22767
22766: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22767: CALL_OW 45
22771: PPUSH
22772: LD_INT 1
22774: PPUSH
22775: CALL_OW 51
// end ;
22779: LD_VAR 0 1
22783: RET
// export invincible ; every 1 do
22784: GO 22786
22786: DISABLE
// invincible := [ ] ;
22787: LD_ADDR_EXP 58
22791: PUSH
22792: EMPTY
22793: ST_TO_ADDR
22794: END
// every 10 do var i ;
22795: GO 22797
22797: DISABLE
22798: LD_INT 0
22800: PPUSH
// begin enable ;
22801: ENABLE
// if not invincible then
22802: LD_EXP 58
22806: NOT
22807: IFFALSE 22811
// exit ;
22809: GO 22855
// for i in invincible do
22811: LD_ADDR_VAR 0 1
22815: PUSH
22816: LD_EXP 58
22820: PUSH
22821: FOR_IN
22822: IFFALSE 22853
// if GetLives ( i ) < 1000 then
22824: LD_VAR 0 1
22828: PPUSH
22829: CALL_OW 256
22833: PUSH
22834: LD_INT 1000
22836: LESS
22837: IFFALSE 22851
// SetLives ( i , 1000 ) ;
22839: LD_VAR 0 1
22843: PPUSH
22844: LD_INT 1000
22846: PPUSH
22847: CALL_OW 234
22851: GO 22821
22853: POP
22854: POP
// end ;
22855: PPOPN 1
22857: END
// export function HackInvincible ; var i ; begin
22858: LD_INT 0
22860: PPUSH
22861: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22862: LD_ADDR_VAR 0 2
22866: PUSH
22867: LD_INT 2
22869: PUSH
22870: LD_INT 21
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 21
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: PPUSH
22895: CALL_OW 69
22899: PUSH
22900: FOR_IN
22901: IFFALSE 22962
// if IsSelected ( i ) then
22903: LD_VAR 0 2
22907: PPUSH
22908: CALL_OW 306
22912: IFFALSE 22960
// begin if i in invincible then
22914: LD_VAR 0 2
22918: PUSH
22919: LD_EXP 58
22923: IN
22924: IFFALSE 22944
// invincible := invincible diff i else
22926: LD_ADDR_EXP 58
22930: PUSH
22931: LD_EXP 58
22935: PUSH
22936: LD_VAR 0 2
22940: DIFF
22941: ST_TO_ADDR
22942: GO 22960
// invincible := invincible union i ;
22944: LD_ADDR_EXP 58
22948: PUSH
22949: LD_EXP 58
22953: PUSH
22954: LD_VAR 0 2
22958: UNION
22959: ST_TO_ADDR
// end ;
22960: GO 22900
22962: POP
22963: POP
// end ;
22964: LD_VAR 0 1
22968: RET
// export function HackInvisible ; var i , j ; begin
22969: LD_INT 0
22971: PPUSH
22972: PPUSH
22973: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22974: LD_ADDR_VAR 0 2
22978: PUSH
22979: LD_INT 21
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PPUSH
22989: CALL_OW 69
22993: PUSH
22994: FOR_IN
22995: IFFALSE 23019
// if IsSelected ( i ) then
22997: LD_VAR 0 2
23001: PPUSH
23002: CALL_OW 306
23006: IFFALSE 23017
// begin ComForceInvisible ( i ) ;
23008: LD_VAR 0 2
23012: PPUSH
23013: CALL_OW 496
// end ;
23017: GO 22994
23019: POP
23020: POP
// end ;
23021: LD_VAR 0 1
23025: RET
// export function HackChangeYourSide ; begin
23026: LD_INT 0
23028: PPUSH
// if your_side = 8 then
23029: LD_OWVAR 2
23033: PUSH
23034: LD_INT 8
23036: EQUAL
23037: IFFALSE 23049
// your_side := 0 else
23039: LD_ADDR_OWVAR 2
23043: PUSH
23044: LD_INT 0
23046: ST_TO_ADDR
23047: GO 23063
// your_side := your_side + 1 ;
23049: LD_ADDR_OWVAR 2
23053: PUSH
23054: LD_OWVAR 2
23058: PUSH
23059: LD_INT 1
23061: PLUS
23062: ST_TO_ADDR
// end ;
23063: LD_VAR 0 1
23067: RET
// export function HackChangeUnitSide ; var i , j ; begin
23068: LD_INT 0
23070: PPUSH
23071: PPUSH
23072: PPUSH
// for i in all_units do
23073: LD_ADDR_VAR 0 2
23077: PUSH
23078: LD_OWVAR 3
23082: PUSH
23083: FOR_IN
23084: IFFALSE 23162
// if IsSelected ( i ) then
23086: LD_VAR 0 2
23090: PPUSH
23091: CALL_OW 306
23095: IFFALSE 23160
// begin j := GetSide ( i ) ;
23097: LD_ADDR_VAR 0 3
23101: PUSH
23102: LD_VAR 0 2
23106: PPUSH
23107: CALL_OW 255
23111: ST_TO_ADDR
// if j = 8 then
23112: LD_VAR 0 3
23116: PUSH
23117: LD_INT 8
23119: EQUAL
23120: IFFALSE 23132
// j := 0 else
23122: LD_ADDR_VAR 0 3
23126: PUSH
23127: LD_INT 0
23129: ST_TO_ADDR
23130: GO 23146
// j := j + 1 ;
23132: LD_ADDR_VAR 0 3
23136: PUSH
23137: LD_VAR 0 3
23141: PUSH
23142: LD_INT 1
23144: PLUS
23145: ST_TO_ADDR
// SetSide ( i , j ) ;
23146: LD_VAR 0 2
23150: PPUSH
23151: LD_VAR 0 3
23155: PPUSH
23156: CALL_OW 235
// end ;
23160: GO 23083
23162: POP
23163: POP
// end ;
23164: LD_VAR 0 1
23168: RET
// export function HackFog ; begin
23169: LD_INT 0
23171: PPUSH
// FogOff ( true ) ;
23172: LD_INT 1
23174: PPUSH
23175: CALL_OW 344
// end ;
23179: LD_VAR 0 1
23183: RET
// export function HackApeman ; begin
23184: LD_INT 0
23186: PPUSH
// uc_side := your_side ;
23187: LD_ADDR_OWVAR 20
23191: PUSH
23192: LD_OWVAR 2
23196: ST_TO_ADDR
// uc_nation := 0 ;
23197: LD_ADDR_OWVAR 21
23201: PUSH
23202: LD_INT 0
23204: ST_TO_ADDR
// hc_name :=  ;
23205: LD_ADDR_OWVAR 26
23209: PUSH
23210: LD_STRING 
23212: ST_TO_ADDR
// hc_gallery :=  ;
23213: LD_ADDR_OWVAR 33
23217: PUSH
23218: LD_STRING 
23220: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
23221: LD_ADDR_OWVAR 31
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: LD_INT 0
23231: PUSH
23232: LD_INT 0
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: ST_TO_ADDR
// hc_class := class_apeman ;
23244: LD_ADDR_OWVAR 28
23248: PUSH
23249: LD_INT 12
23251: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
23252: CALL_OW 44
23256: PPUSH
23257: LD_INT 1
23259: PPUSH
23260: CALL_OW 51
// end ;
23264: LD_VAR 0 1
23268: RET
// export function HackBoom ; begin
23269: LD_INT 0
23271: PPUSH
// uc_side := your_side ;
23272: LD_ADDR_OWVAR 20
23276: PUSH
23277: LD_OWVAR 2
23281: ST_TO_ADDR
// uc_nation := 1 ;
23282: LD_ADDR_OWVAR 21
23286: PUSH
23287: LD_INT 1
23289: ST_TO_ADDR
// vc_chassis := us_morphling ;
23290: LD_ADDR_OWVAR 37
23294: PUSH
23295: LD_INT 5
23297: ST_TO_ADDR
// vc_engine := engine_siberite ;
23298: LD_ADDR_OWVAR 39
23302: PUSH
23303: LD_INT 3
23305: ST_TO_ADDR
// vc_control := control_computer ;
23306: LD_ADDR_OWVAR 38
23310: PUSH
23311: LD_INT 3
23313: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
23314: LD_ADDR_OWVAR 40
23318: PUSH
23319: LD_INT 8
23321: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23322: CALL_OW 45
23326: PPUSH
23327: LD_INT 1
23329: PPUSH
23330: CALL_OW 51
// end ; end_of_file
23334: LD_VAR 0 1
23338: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23339: LD_INT 0
23341: PPUSH
23342: PPUSH
// if exist_mode then
23343: LD_VAR 0 2
23347: IFFALSE 23372
// unit := CreateCharacter ( prefix & ident ) else
23349: LD_ADDR_VAR 0 5
23353: PUSH
23354: LD_VAR 0 3
23358: PUSH
23359: LD_VAR 0 1
23363: STR
23364: PPUSH
23365: CALL_OW 34
23369: ST_TO_ADDR
23370: GO 23387
// unit := NewCharacter ( ident ) ;
23372: LD_ADDR_VAR 0 5
23376: PUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 25
23386: ST_TO_ADDR
// result := unit ;
23387: LD_ADDR_VAR 0 4
23391: PUSH
23392: LD_VAR 0 5
23396: ST_TO_ADDR
// end ;
23397: LD_VAR 0 4
23401: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23402: LD_INT 0
23404: PPUSH
23405: PPUSH
// if not side or not nation then
23406: LD_VAR 0 1
23410: NOT
23411: PUSH
23412: LD_VAR 0 2
23416: NOT
23417: OR
23418: IFFALSE 23422
// exit ;
23420: GO 24186
// case nation of nation_american :
23422: LD_VAR 0 2
23426: PUSH
23427: LD_INT 1
23429: DOUBLE
23430: EQUAL
23431: IFTRUE 23435
23433: GO 23649
23435: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23436: LD_ADDR_VAR 0 4
23440: PUSH
23441: LD_INT 35
23443: PUSH
23444: LD_INT 45
23446: PUSH
23447: LD_INT 46
23449: PUSH
23450: LD_INT 47
23452: PUSH
23453: LD_INT 82
23455: PUSH
23456: LD_INT 83
23458: PUSH
23459: LD_INT 84
23461: PUSH
23462: LD_INT 85
23464: PUSH
23465: LD_INT 86
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: LD_INT 2
23473: PUSH
23474: LD_INT 6
23476: PUSH
23477: LD_INT 15
23479: PUSH
23480: LD_INT 16
23482: PUSH
23483: LD_INT 7
23485: PUSH
23486: LD_INT 12
23488: PUSH
23489: LD_INT 13
23491: PUSH
23492: LD_INT 10
23494: PUSH
23495: LD_INT 14
23497: PUSH
23498: LD_INT 20
23500: PUSH
23501: LD_INT 21
23503: PUSH
23504: LD_INT 22
23506: PUSH
23507: LD_INT 25
23509: PUSH
23510: LD_INT 32
23512: PUSH
23513: LD_INT 27
23515: PUSH
23516: LD_INT 36
23518: PUSH
23519: LD_INT 69
23521: PUSH
23522: LD_INT 39
23524: PUSH
23525: LD_INT 34
23527: PUSH
23528: LD_INT 40
23530: PUSH
23531: LD_INT 48
23533: PUSH
23534: LD_INT 49
23536: PUSH
23537: LD_INT 50
23539: PUSH
23540: LD_INT 51
23542: PUSH
23543: LD_INT 52
23545: PUSH
23546: LD_INT 53
23548: PUSH
23549: LD_INT 54
23551: PUSH
23552: LD_INT 55
23554: PUSH
23555: LD_INT 56
23557: PUSH
23558: LD_INT 57
23560: PUSH
23561: LD_INT 58
23563: PUSH
23564: LD_INT 59
23566: PUSH
23567: LD_INT 60
23569: PUSH
23570: LD_INT 61
23572: PUSH
23573: LD_INT 62
23575: PUSH
23576: LD_INT 80
23578: PUSH
23579: LD_INT 82
23581: PUSH
23582: LD_INT 83
23584: PUSH
23585: LD_INT 84
23587: PUSH
23588: LD_INT 85
23590: PUSH
23591: LD_INT 86
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: ST_TO_ADDR
23647: GO 24110
23649: LD_INT 2
23651: DOUBLE
23652: EQUAL
23653: IFTRUE 23657
23655: GO 23879
23657: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
23658: LD_ADDR_VAR 0 4
23662: PUSH
23663: LD_INT 35
23665: PUSH
23666: LD_INT 45
23668: PUSH
23669: LD_INT 46
23671: PUSH
23672: LD_INT 47
23674: PUSH
23675: LD_INT 82
23677: PUSH
23678: LD_INT 83
23680: PUSH
23681: LD_INT 84
23683: PUSH
23684: LD_INT 85
23686: PUSH
23687: LD_INT 87
23689: PUSH
23690: LD_INT 70
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: LD_INT 11
23698: PUSH
23699: LD_INT 3
23701: PUSH
23702: LD_INT 4
23704: PUSH
23705: LD_INT 5
23707: PUSH
23708: LD_INT 6
23710: PUSH
23711: LD_INT 15
23713: PUSH
23714: LD_INT 18
23716: PUSH
23717: LD_INT 7
23719: PUSH
23720: LD_INT 17
23722: PUSH
23723: LD_INT 8
23725: PUSH
23726: LD_INT 20
23728: PUSH
23729: LD_INT 21
23731: PUSH
23732: LD_INT 22
23734: PUSH
23735: LD_INT 72
23737: PUSH
23738: LD_INT 26
23740: PUSH
23741: LD_INT 69
23743: PUSH
23744: LD_INT 39
23746: PUSH
23747: LD_INT 40
23749: PUSH
23750: LD_INT 41
23752: PUSH
23753: LD_INT 42
23755: PUSH
23756: LD_INT 43
23758: PUSH
23759: LD_INT 48
23761: PUSH
23762: LD_INT 49
23764: PUSH
23765: LD_INT 50
23767: PUSH
23768: LD_INT 51
23770: PUSH
23771: LD_INT 52
23773: PUSH
23774: LD_INT 53
23776: PUSH
23777: LD_INT 54
23779: PUSH
23780: LD_INT 55
23782: PUSH
23783: LD_INT 56
23785: PUSH
23786: LD_INT 60
23788: PUSH
23789: LD_INT 61
23791: PUSH
23792: LD_INT 62
23794: PUSH
23795: LD_INT 66
23797: PUSH
23798: LD_INT 67
23800: PUSH
23801: LD_INT 68
23803: PUSH
23804: LD_INT 81
23806: PUSH
23807: LD_INT 82
23809: PUSH
23810: LD_INT 83
23812: PUSH
23813: LD_INT 84
23815: PUSH
23816: LD_INT 85
23818: PUSH
23819: LD_INT 87
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: ST_TO_ADDR
23877: GO 24110
23879: LD_INT 3
23881: DOUBLE
23882: EQUAL
23883: IFTRUE 23887
23885: GO 24109
23887: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23888: LD_ADDR_VAR 0 4
23892: PUSH
23893: LD_INT 46
23895: PUSH
23896: LD_INT 47
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: LD_INT 82
23907: PUSH
23908: LD_INT 83
23910: PUSH
23911: LD_INT 84
23913: PUSH
23914: LD_INT 85
23916: PUSH
23917: LD_INT 86
23919: PUSH
23920: LD_INT 11
23922: PUSH
23923: LD_INT 9
23925: PUSH
23926: LD_INT 20
23928: PUSH
23929: LD_INT 19
23931: PUSH
23932: LD_INT 21
23934: PUSH
23935: LD_INT 24
23937: PUSH
23938: LD_INT 22
23940: PUSH
23941: LD_INT 25
23943: PUSH
23944: LD_INT 28
23946: PUSH
23947: LD_INT 29
23949: PUSH
23950: LD_INT 30
23952: PUSH
23953: LD_INT 31
23955: PUSH
23956: LD_INT 37
23958: PUSH
23959: LD_INT 38
23961: PUSH
23962: LD_INT 32
23964: PUSH
23965: LD_INT 27
23967: PUSH
23968: LD_INT 33
23970: PUSH
23971: LD_INT 69
23973: PUSH
23974: LD_INT 39
23976: PUSH
23977: LD_INT 34
23979: PUSH
23980: LD_INT 40
23982: PUSH
23983: LD_INT 71
23985: PUSH
23986: LD_INT 23
23988: PUSH
23989: LD_INT 44
23991: PUSH
23992: LD_INT 48
23994: PUSH
23995: LD_INT 49
23997: PUSH
23998: LD_INT 50
24000: PUSH
24001: LD_INT 51
24003: PUSH
24004: LD_INT 52
24006: PUSH
24007: LD_INT 53
24009: PUSH
24010: LD_INT 54
24012: PUSH
24013: LD_INT 55
24015: PUSH
24016: LD_INT 56
24018: PUSH
24019: LD_INT 57
24021: PUSH
24022: LD_INT 58
24024: PUSH
24025: LD_INT 59
24027: PUSH
24028: LD_INT 63
24030: PUSH
24031: LD_INT 64
24033: PUSH
24034: LD_INT 65
24036: PUSH
24037: LD_INT 82
24039: PUSH
24040: LD_INT 83
24042: PUSH
24043: LD_INT 84
24045: PUSH
24046: LD_INT 85
24048: PUSH
24049: LD_INT 86
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: ST_TO_ADDR
24107: GO 24110
24109: POP
// if state > - 1 and state < 3 then
24110: LD_VAR 0 3
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: GREATER
24119: PUSH
24120: LD_VAR 0 3
24124: PUSH
24125: LD_INT 3
24127: LESS
24128: AND
24129: IFFALSE 24186
// for i in result do
24131: LD_ADDR_VAR 0 5
24135: PUSH
24136: LD_VAR 0 4
24140: PUSH
24141: FOR_IN
24142: IFFALSE 24184
// if GetTech ( i , side ) <> state then
24144: LD_VAR 0 5
24148: PPUSH
24149: LD_VAR 0 1
24153: PPUSH
24154: CALL_OW 321
24158: PUSH
24159: LD_VAR 0 3
24163: NONEQUAL
24164: IFFALSE 24182
// result := result diff i ;
24166: LD_ADDR_VAR 0 4
24170: PUSH
24171: LD_VAR 0 4
24175: PUSH
24176: LD_VAR 0 5
24180: DIFF
24181: ST_TO_ADDR
24182: GO 24141
24184: POP
24185: POP
// end ;
24186: LD_VAR 0 4
24190: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24191: LD_INT 0
24193: PPUSH
24194: PPUSH
24195: PPUSH
// result := true ;
24196: LD_ADDR_VAR 0 3
24200: PUSH
24201: LD_INT 1
24203: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24204: LD_ADDR_VAR 0 5
24208: PUSH
24209: LD_VAR 0 2
24213: PPUSH
24214: CALL_OW 480
24218: ST_TO_ADDR
// if not tmp then
24219: LD_VAR 0 5
24223: NOT
24224: IFFALSE 24228
// exit ;
24226: GO 24277
// for i in tmp do
24228: LD_ADDR_VAR 0 4
24232: PUSH
24233: LD_VAR 0 5
24237: PUSH
24238: FOR_IN
24239: IFFALSE 24275
// if GetTech ( i , side ) <> state_researched then
24241: LD_VAR 0 4
24245: PPUSH
24246: LD_VAR 0 1
24250: PPUSH
24251: CALL_OW 321
24255: PUSH
24256: LD_INT 2
24258: NONEQUAL
24259: IFFALSE 24273
// begin result := false ;
24261: LD_ADDR_VAR 0 3
24265: PUSH
24266: LD_INT 0
24268: ST_TO_ADDR
// exit ;
24269: POP
24270: POP
24271: GO 24277
// end ;
24273: GO 24238
24275: POP
24276: POP
// end ;
24277: LD_VAR 0 3
24281: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24282: LD_INT 0
24284: PPUSH
24285: PPUSH
24286: PPUSH
24287: PPUSH
24288: PPUSH
24289: PPUSH
24290: PPUSH
24291: PPUSH
24292: PPUSH
24293: PPUSH
24294: PPUSH
24295: PPUSH
24296: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24297: LD_VAR 0 1
24301: NOT
24302: PUSH
24303: LD_VAR 0 1
24307: PPUSH
24308: CALL_OW 257
24312: PUSH
24313: LD_INT 9
24315: NONEQUAL
24316: OR
24317: IFFALSE 24321
// exit ;
24319: GO 24894
// side := GetSide ( unit ) ;
24321: LD_ADDR_VAR 0 9
24325: PUSH
24326: LD_VAR 0 1
24330: PPUSH
24331: CALL_OW 255
24335: ST_TO_ADDR
// tech_space := tech_spacanom ;
24336: LD_ADDR_VAR 0 12
24340: PUSH
24341: LD_INT 29
24343: ST_TO_ADDR
// tech_time := tech_taurad ;
24344: LD_ADDR_VAR 0 13
24348: PUSH
24349: LD_INT 28
24351: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24352: LD_ADDR_VAR 0 11
24356: PUSH
24357: LD_VAR 0 1
24361: PPUSH
24362: CALL_OW 310
24366: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24367: LD_VAR 0 11
24371: PPUSH
24372: CALL_OW 247
24376: PUSH
24377: LD_INT 2
24379: EQUAL
24380: IFFALSE 24384
// exit ;
24382: GO 24894
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24384: LD_ADDR_VAR 0 8
24388: PUSH
24389: LD_INT 81
24391: PUSH
24392: LD_VAR 0 9
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 3
24403: PUSH
24404: LD_INT 21
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PPUSH
24422: CALL_OW 69
24426: ST_TO_ADDR
// if not tmp then
24427: LD_VAR 0 8
24431: NOT
24432: IFFALSE 24436
// exit ;
24434: GO 24894
// if in_unit then
24436: LD_VAR 0 11
24440: IFFALSE 24464
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24442: LD_ADDR_VAR 0 10
24446: PUSH
24447: LD_VAR 0 8
24451: PPUSH
24452: LD_VAR 0 11
24456: PPUSH
24457: CALL_OW 74
24461: ST_TO_ADDR
24462: GO 24484
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24464: LD_ADDR_VAR 0 10
24468: PUSH
24469: LD_VAR 0 8
24473: PPUSH
24474: LD_VAR 0 1
24478: PPUSH
24479: CALL_OW 74
24483: ST_TO_ADDR
// if not enemy then
24484: LD_VAR 0 10
24488: NOT
24489: IFFALSE 24493
// exit ;
24491: GO 24894
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24493: LD_VAR 0 11
24497: PUSH
24498: LD_VAR 0 11
24502: PPUSH
24503: LD_VAR 0 10
24507: PPUSH
24508: CALL_OW 296
24512: PUSH
24513: LD_INT 13
24515: GREATER
24516: AND
24517: PUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: LD_VAR 0 10
24527: PPUSH
24528: CALL_OW 296
24532: PUSH
24533: LD_INT 12
24535: GREATER
24536: OR
24537: IFFALSE 24541
// exit ;
24539: GO 24894
// missile := [ 1 ] ;
24541: LD_ADDR_VAR 0 14
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: EMPTY
24550: LIST
24551: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24552: LD_VAR 0 9
24556: PPUSH
24557: LD_VAR 0 12
24561: PPUSH
24562: CALL_OW 325
24566: IFFALSE 24595
// missile := Insert ( missile , missile + 1 , 2 ) ;
24568: LD_ADDR_VAR 0 14
24572: PUSH
24573: LD_VAR 0 14
24577: PPUSH
24578: LD_VAR 0 14
24582: PUSH
24583: LD_INT 1
24585: PLUS
24586: PPUSH
24587: LD_INT 2
24589: PPUSH
24590: CALL_OW 2
24594: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24595: LD_VAR 0 9
24599: PPUSH
24600: LD_VAR 0 13
24604: PPUSH
24605: CALL_OW 325
24609: PUSH
24610: LD_VAR 0 10
24614: PPUSH
24615: CALL_OW 255
24619: PPUSH
24620: LD_VAR 0 13
24624: PPUSH
24625: CALL_OW 325
24629: NOT
24630: AND
24631: IFFALSE 24660
// missile := Insert ( missile , missile + 1 , 3 ) ;
24633: LD_ADDR_VAR 0 14
24637: PUSH
24638: LD_VAR 0 14
24642: PPUSH
24643: LD_VAR 0 14
24647: PUSH
24648: LD_INT 1
24650: PLUS
24651: PPUSH
24652: LD_INT 3
24654: PPUSH
24655: CALL_OW 2
24659: ST_TO_ADDR
// if missile < 2 then
24660: LD_VAR 0 14
24664: PUSH
24665: LD_INT 2
24667: LESS
24668: IFFALSE 24672
// exit ;
24670: GO 24894
// x := GetX ( enemy ) ;
24672: LD_ADDR_VAR 0 4
24676: PUSH
24677: LD_VAR 0 10
24681: PPUSH
24682: CALL_OW 250
24686: ST_TO_ADDR
// y := GetY ( enemy ) ;
24687: LD_ADDR_VAR 0 5
24691: PUSH
24692: LD_VAR 0 10
24696: PPUSH
24697: CALL_OW 251
24701: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24702: LD_ADDR_VAR 0 6
24706: PUSH
24707: LD_VAR 0 4
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PPUSH
24716: LD_INT 1
24718: PPUSH
24719: CALL_OW 12
24723: PLUS
24724: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24725: LD_ADDR_VAR 0 7
24729: PUSH
24730: LD_VAR 0 5
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PPUSH
24739: LD_INT 1
24741: PPUSH
24742: CALL_OW 12
24746: PLUS
24747: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24748: LD_VAR 0 6
24752: PPUSH
24753: LD_VAR 0 7
24757: PPUSH
24758: CALL_OW 488
24762: NOT
24763: IFFALSE 24785
// begin _x := x ;
24765: LD_ADDR_VAR 0 6
24769: PUSH
24770: LD_VAR 0 4
24774: ST_TO_ADDR
// _y := y ;
24775: LD_ADDR_VAR 0 7
24779: PUSH
24780: LD_VAR 0 5
24784: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24785: LD_ADDR_VAR 0 3
24789: PUSH
24790: LD_INT 1
24792: PPUSH
24793: LD_VAR 0 14
24797: PPUSH
24798: CALL_OW 12
24802: ST_TO_ADDR
// case i of 1 :
24803: LD_VAR 0 3
24807: PUSH
24808: LD_INT 1
24810: DOUBLE
24811: EQUAL
24812: IFTRUE 24816
24814: GO 24833
24816: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24817: LD_VAR 0 1
24821: PPUSH
24822: LD_VAR 0 10
24826: PPUSH
24827: CALL_OW 115
24831: GO 24894
24833: LD_INT 2
24835: DOUBLE
24836: EQUAL
24837: IFTRUE 24841
24839: GO 24863
24841: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24842: LD_VAR 0 1
24846: PPUSH
24847: LD_VAR 0 6
24851: PPUSH
24852: LD_VAR 0 7
24856: PPUSH
24857: CALL_OW 153
24861: GO 24894
24863: LD_INT 3
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 24893
24871: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24872: LD_VAR 0 1
24876: PPUSH
24877: LD_VAR 0 6
24881: PPUSH
24882: LD_VAR 0 7
24886: PPUSH
24887: CALL_OW 154
24891: GO 24894
24893: POP
// end ;
24894: LD_VAR 0 2
24898: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24899: LD_INT 0
24901: PPUSH
24902: PPUSH
24903: PPUSH
24904: PPUSH
24905: PPUSH
24906: PPUSH
// if not unit or not building then
24907: LD_VAR 0 1
24911: NOT
24912: PUSH
24913: LD_VAR 0 2
24917: NOT
24918: OR
24919: IFFALSE 24923
// exit ;
24921: GO 25081
// x := GetX ( building ) ;
24923: LD_ADDR_VAR 0 5
24927: PUSH
24928: LD_VAR 0 2
24932: PPUSH
24933: CALL_OW 250
24937: ST_TO_ADDR
// y := GetY ( building ) ;
24938: LD_ADDR_VAR 0 6
24942: PUSH
24943: LD_VAR 0 2
24947: PPUSH
24948: CALL_OW 251
24952: ST_TO_ADDR
// for i = 0 to 5 do
24953: LD_ADDR_VAR 0 4
24957: PUSH
24958: DOUBLE
24959: LD_INT 0
24961: DEC
24962: ST_TO_ADDR
24963: LD_INT 5
24965: PUSH
24966: FOR_TO
24967: IFFALSE 25079
// begin _x := ShiftX ( x , i , 3 ) ;
24969: LD_ADDR_VAR 0 7
24973: PUSH
24974: LD_VAR 0 5
24978: PPUSH
24979: LD_VAR 0 4
24983: PPUSH
24984: LD_INT 3
24986: PPUSH
24987: CALL_OW 272
24991: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24992: LD_ADDR_VAR 0 8
24996: PUSH
24997: LD_VAR 0 6
25001: PPUSH
25002: LD_VAR 0 4
25006: PPUSH
25007: LD_INT 3
25009: PPUSH
25010: CALL_OW 273
25014: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25015: LD_VAR 0 7
25019: PPUSH
25020: LD_VAR 0 8
25024: PPUSH
25025: CALL_OW 488
25029: NOT
25030: IFFALSE 25034
// continue ;
25032: GO 24966
// if HexInfo ( _x , _y ) = 0 then
25034: LD_VAR 0 7
25038: PPUSH
25039: LD_VAR 0 8
25043: PPUSH
25044: CALL_OW 428
25048: PUSH
25049: LD_INT 0
25051: EQUAL
25052: IFFALSE 25077
// begin ComMoveXY ( unit , _x , _y ) ;
25054: LD_VAR 0 1
25058: PPUSH
25059: LD_VAR 0 7
25063: PPUSH
25064: LD_VAR 0 8
25068: PPUSH
25069: CALL_OW 111
// exit ;
25073: POP
25074: POP
25075: GO 25081
// end ; end ;
25077: GO 24966
25079: POP
25080: POP
// end ;
25081: LD_VAR 0 3
25085: RET
// export function ScanBase ( side , base_area ) ; begin
25086: LD_INT 0
25088: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25089: LD_ADDR_VAR 0 3
25093: PUSH
25094: LD_VAR 0 2
25098: PPUSH
25099: LD_INT 81
25101: PUSH
25102: LD_VAR 0 1
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PPUSH
25111: CALL_OW 70
25115: ST_TO_ADDR
// end ;
25116: LD_VAR 0 3
25120: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25121: LD_INT 0
25123: PPUSH
25124: PPUSH
25125: PPUSH
25126: PPUSH
// result := false ;
25127: LD_ADDR_VAR 0 2
25131: PUSH
25132: LD_INT 0
25134: ST_TO_ADDR
// side := GetSide ( unit ) ;
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: LD_VAR 0 1
25144: PPUSH
25145: CALL_OW 255
25149: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25150: LD_ADDR_VAR 0 4
25154: PUSH
25155: LD_VAR 0 1
25159: PPUSH
25160: CALL_OW 248
25164: ST_TO_ADDR
// case nat of 1 :
25165: LD_VAR 0 4
25169: PUSH
25170: LD_INT 1
25172: DOUBLE
25173: EQUAL
25174: IFTRUE 25178
25176: GO 25189
25178: POP
// tech := tech_lassight ; 2 :
25179: LD_ADDR_VAR 0 5
25183: PUSH
25184: LD_INT 12
25186: ST_TO_ADDR
25187: GO 25228
25189: LD_INT 2
25191: DOUBLE
25192: EQUAL
25193: IFTRUE 25197
25195: GO 25208
25197: POP
// tech := tech_mortar ; 3 :
25198: LD_ADDR_VAR 0 5
25202: PUSH
25203: LD_INT 41
25205: ST_TO_ADDR
25206: GO 25228
25208: LD_INT 3
25210: DOUBLE
25211: EQUAL
25212: IFTRUE 25216
25214: GO 25227
25216: POP
// tech := tech_bazooka ; end ;
25217: LD_ADDR_VAR 0 5
25221: PUSH
25222: LD_INT 44
25224: ST_TO_ADDR
25225: GO 25228
25227: POP
// if Researched ( side , tech ) then
25228: LD_VAR 0 3
25232: PPUSH
25233: LD_VAR 0 5
25237: PPUSH
25238: CALL_OW 325
25242: IFFALSE 25269
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25244: LD_ADDR_VAR 0 2
25248: PUSH
25249: LD_INT 5
25251: PUSH
25252: LD_INT 8
25254: PUSH
25255: LD_INT 9
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: LIST
25262: PUSH
25263: LD_VAR 0 4
25267: ARRAY
25268: ST_TO_ADDR
// end ;
25269: LD_VAR 0 2
25273: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25274: LD_INT 0
25276: PPUSH
25277: PPUSH
25278: PPUSH
// if not mines then
25279: LD_VAR 0 2
25283: NOT
25284: IFFALSE 25288
// exit ;
25286: GO 25432
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25288: LD_ADDR_VAR 0 5
25292: PUSH
25293: LD_INT 81
25295: PUSH
25296: LD_VAR 0 1
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 3
25307: PUSH
25308: LD_INT 21
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PPUSH
25326: CALL_OW 69
25330: ST_TO_ADDR
// for i in mines do
25331: LD_ADDR_VAR 0 4
25335: PUSH
25336: LD_VAR 0 2
25340: PUSH
25341: FOR_IN
25342: IFFALSE 25430
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25344: LD_VAR 0 4
25348: PUSH
25349: LD_INT 1
25351: ARRAY
25352: PPUSH
25353: LD_VAR 0 4
25357: PUSH
25358: LD_INT 2
25360: ARRAY
25361: PPUSH
25362: CALL_OW 458
25366: NOT
25367: IFFALSE 25371
// continue ;
25369: GO 25341
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25371: LD_VAR 0 4
25375: PUSH
25376: LD_INT 1
25378: ARRAY
25379: PPUSH
25380: LD_VAR 0 4
25384: PUSH
25385: LD_INT 2
25387: ARRAY
25388: PPUSH
25389: CALL_OW 428
25393: PUSH
25394: LD_VAR 0 5
25398: IN
25399: IFFALSE 25428
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25401: LD_VAR 0 4
25405: PUSH
25406: LD_INT 1
25408: ARRAY
25409: PPUSH
25410: LD_VAR 0 4
25414: PUSH
25415: LD_INT 2
25417: ARRAY
25418: PPUSH
25419: LD_VAR 0 1
25423: PPUSH
25424: CALL_OW 456
// end ;
25428: GO 25341
25430: POP
25431: POP
// end ;
25432: LD_VAR 0 3
25436: RET
// export function Count ( array ) ; var i ; begin
25437: LD_INT 0
25439: PPUSH
25440: PPUSH
// result := 0 ;
25441: LD_ADDR_VAR 0 2
25445: PUSH
25446: LD_INT 0
25448: ST_TO_ADDR
// for i in array do
25449: LD_ADDR_VAR 0 3
25453: PUSH
25454: LD_VAR 0 1
25458: PUSH
25459: FOR_IN
25460: IFFALSE 25484
// if i then
25462: LD_VAR 0 3
25466: IFFALSE 25482
// result := result + 1 ;
25468: LD_ADDR_VAR 0 2
25472: PUSH
25473: LD_VAR 0 2
25477: PUSH
25478: LD_INT 1
25480: PLUS
25481: ST_TO_ADDR
25482: GO 25459
25484: POP
25485: POP
// end ;
25486: LD_VAR 0 2
25490: RET
// export function IsEmpty ( building ) ; begin
25491: LD_INT 0
25493: PPUSH
// if not building then
25494: LD_VAR 0 1
25498: NOT
25499: IFFALSE 25503
// exit ;
25501: GO 25546
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25503: LD_ADDR_VAR 0 2
25507: PUSH
25508: LD_VAR 0 1
25512: PUSH
25513: LD_INT 22
25515: PUSH
25516: LD_VAR 0 1
25520: PPUSH
25521: CALL_OW 255
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 58
25532: PUSH
25533: EMPTY
25534: LIST
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PPUSH
25540: CALL_OW 69
25544: IN
25545: ST_TO_ADDR
// end ;
25546: LD_VAR 0 2
25550: RET
// export function IsNotFull ( building ) ; begin
25551: LD_INT 0
25553: PPUSH
// if not building then
25554: LD_VAR 0 1
25558: NOT
25559: IFFALSE 25563
// exit ;
25561: GO 25582
// result := UnitsInside ( building ) < 6 ;
25563: LD_ADDR_VAR 0 2
25567: PUSH
25568: LD_VAR 0 1
25572: PPUSH
25573: CALL_OW 313
25577: PUSH
25578: LD_INT 6
25580: LESS
25581: ST_TO_ADDR
// end ;
25582: LD_VAR 0 2
25586: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25587: LD_INT 0
25589: PPUSH
25590: PPUSH
25591: PPUSH
25592: PPUSH
// tmp := [ ] ;
25593: LD_ADDR_VAR 0 3
25597: PUSH
25598: EMPTY
25599: ST_TO_ADDR
// list := [ ] ;
25600: LD_ADDR_VAR 0 5
25604: PUSH
25605: EMPTY
25606: ST_TO_ADDR
// for i = 16 to 25 do
25607: LD_ADDR_VAR 0 4
25611: PUSH
25612: DOUBLE
25613: LD_INT 16
25615: DEC
25616: ST_TO_ADDR
25617: LD_INT 25
25619: PUSH
25620: FOR_TO
25621: IFFALSE 25694
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25623: LD_ADDR_VAR 0 3
25627: PUSH
25628: LD_VAR 0 3
25632: PUSH
25633: LD_INT 22
25635: PUSH
25636: LD_VAR 0 1
25640: PPUSH
25641: CALL_OW 255
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 91
25652: PUSH
25653: LD_VAR 0 1
25657: PUSH
25658: LD_INT 6
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 30
25668: PUSH
25669: LD_VAR 0 4
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: LIST
25682: PUSH
25683: EMPTY
25684: LIST
25685: PPUSH
25686: CALL_OW 69
25690: ADD
25691: ST_TO_ADDR
25692: GO 25620
25694: POP
25695: POP
// for i = 1 to tmp do
25696: LD_ADDR_VAR 0 4
25700: PUSH
25701: DOUBLE
25702: LD_INT 1
25704: DEC
25705: ST_TO_ADDR
25706: LD_VAR 0 3
25710: PUSH
25711: FOR_TO
25712: IFFALSE 25800
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25714: LD_ADDR_VAR 0 5
25718: PUSH
25719: LD_VAR 0 5
25723: PUSH
25724: LD_VAR 0 3
25728: PUSH
25729: LD_VAR 0 4
25733: ARRAY
25734: PPUSH
25735: CALL_OW 266
25739: PUSH
25740: LD_VAR 0 3
25744: PUSH
25745: LD_VAR 0 4
25749: ARRAY
25750: PPUSH
25751: CALL_OW 250
25755: PUSH
25756: LD_VAR 0 3
25760: PUSH
25761: LD_VAR 0 4
25765: ARRAY
25766: PPUSH
25767: CALL_OW 251
25771: PUSH
25772: LD_VAR 0 3
25776: PUSH
25777: LD_VAR 0 4
25781: ARRAY
25782: PPUSH
25783: CALL_OW 254
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: PUSH
25794: EMPTY
25795: LIST
25796: ADD
25797: ST_TO_ADDR
25798: GO 25711
25800: POP
25801: POP
// result := list ;
25802: LD_ADDR_VAR 0 2
25806: PUSH
25807: LD_VAR 0 5
25811: ST_TO_ADDR
// end ;
25812: LD_VAR 0 2
25816: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25817: LD_INT 0
25819: PPUSH
25820: PPUSH
25821: PPUSH
25822: PPUSH
25823: PPUSH
25824: PPUSH
25825: PPUSH
// if not factory then
25826: LD_VAR 0 1
25830: NOT
25831: IFFALSE 25835
// exit ;
25833: GO 26428
// if control = control_apeman then
25835: LD_VAR 0 4
25839: PUSH
25840: LD_INT 5
25842: EQUAL
25843: IFFALSE 25952
// begin tmp := UnitsInside ( factory ) ;
25845: LD_ADDR_VAR 0 8
25849: PUSH
25850: LD_VAR 0 1
25854: PPUSH
25855: CALL_OW 313
25859: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25860: LD_VAR 0 8
25864: PPUSH
25865: LD_INT 25
25867: PUSH
25868: LD_INT 12
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PPUSH
25875: CALL_OW 72
25879: NOT
25880: IFFALSE 25890
// control := control_manual ;
25882: LD_ADDR_VAR 0 4
25886: PUSH
25887: LD_INT 1
25889: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25890: LD_ADDR_VAR 0 8
25894: PUSH
25895: LD_VAR 0 1
25899: PPUSH
25900: CALL 25587 0 1
25904: ST_TO_ADDR
// if tmp then
25905: LD_VAR 0 8
25909: IFFALSE 25952
// begin for i in tmp do
25911: LD_ADDR_VAR 0 7
25915: PUSH
25916: LD_VAR 0 8
25920: PUSH
25921: FOR_IN
25922: IFFALSE 25950
// if i [ 1 ] = b_ext_radio then
25924: LD_VAR 0 7
25928: PUSH
25929: LD_INT 1
25931: ARRAY
25932: PUSH
25933: LD_INT 22
25935: EQUAL
25936: IFFALSE 25948
// begin control := control_remote ;
25938: LD_ADDR_VAR 0 4
25942: PUSH
25943: LD_INT 2
25945: ST_TO_ADDR
// break ;
25946: GO 25950
// end ;
25948: GO 25921
25950: POP
25951: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25952: LD_VAR 0 1
25956: PPUSH
25957: LD_VAR 0 2
25961: PPUSH
25962: LD_VAR 0 3
25966: PPUSH
25967: LD_VAR 0 4
25971: PPUSH
25972: LD_VAR 0 5
25976: PPUSH
25977: CALL_OW 448
25981: IFFALSE 26016
// begin result := [ chassis , engine , control , weapon ] ;
25983: LD_ADDR_VAR 0 6
25987: PUSH
25988: LD_VAR 0 2
25992: PUSH
25993: LD_VAR 0 3
25997: PUSH
25998: LD_VAR 0 4
26002: PUSH
26003: LD_VAR 0 5
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: ST_TO_ADDR
// exit ;
26014: GO 26428
// end ; _chassis := AvailableChassisList ( factory ) ;
26016: LD_ADDR_VAR 0 9
26020: PUSH
26021: LD_VAR 0 1
26025: PPUSH
26026: CALL_OW 475
26030: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26031: LD_ADDR_VAR 0 11
26035: PUSH
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 476
26045: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26046: LD_ADDR_VAR 0 12
26050: PUSH
26051: LD_VAR 0 1
26055: PPUSH
26056: CALL_OW 477
26060: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26061: LD_ADDR_VAR 0 10
26065: PUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL_OW 478
26075: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26076: LD_VAR 0 9
26080: NOT
26081: PUSH
26082: LD_VAR 0 11
26086: NOT
26087: OR
26088: PUSH
26089: LD_VAR 0 12
26093: NOT
26094: OR
26095: PUSH
26096: LD_VAR 0 10
26100: NOT
26101: OR
26102: IFFALSE 26137
// begin result := [ chassis , engine , control , weapon ] ;
26104: LD_ADDR_VAR 0 6
26108: PUSH
26109: LD_VAR 0 2
26113: PUSH
26114: LD_VAR 0 3
26118: PUSH
26119: LD_VAR 0 4
26123: PUSH
26124: LD_VAR 0 5
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: ST_TO_ADDR
// exit ;
26135: GO 26428
// end ; if not chassis in _chassis then
26137: LD_VAR 0 2
26141: PUSH
26142: LD_VAR 0 9
26146: IN
26147: NOT
26148: IFFALSE 26174
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26150: LD_ADDR_VAR 0 2
26154: PUSH
26155: LD_VAR 0 9
26159: PUSH
26160: LD_INT 1
26162: PPUSH
26163: LD_VAR 0 9
26167: PPUSH
26168: CALL_OW 12
26172: ARRAY
26173: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26174: LD_VAR 0 2
26178: PPUSH
26179: LD_VAR 0 3
26183: PPUSH
26184: CALL 26433 0 2
26188: NOT
26189: IFFALSE 26248
// repeat engine := _engine [ 1 ] ;
26191: LD_ADDR_VAR 0 3
26195: PUSH
26196: LD_VAR 0 11
26200: PUSH
26201: LD_INT 1
26203: ARRAY
26204: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26205: LD_ADDR_VAR 0 11
26209: PUSH
26210: LD_VAR 0 11
26214: PPUSH
26215: LD_INT 1
26217: PPUSH
26218: CALL_OW 3
26222: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26223: LD_VAR 0 2
26227: PPUSH
26228: LD_VAR 0 3
26232: PPUSH
26233: CALL 26433 0 2
26237: PUSH
26238: LD_VAR 0 11
26242: PUSH
26243: EMPTY
26244: EQUAL
26245: OR
26246: IFFALSE 26191
// if not control in _control then
26248: LD_VAR 0 4
26252: PUSH
26253: LD_VAR 0 12
26257: IN
26258: NOT
26259: IFFALSE 26285
// control := _control [ rand ( 1 , _control ) ] ;
26261: LD_ADDR_VAR 0 4
26265: PUSH
26266: LD_VAR 0 12
26270: PUSH
26271: LD_INT 1
26273: PPUSH
26274: LD_VAR 0 12
26278: PPUSH
26279: CALL_OW 12
26283: ARRAY
26284: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26285: LD_VAR 0 2
26289: PPUSH
26290: LD_VAR 0 5
26294: PPUSH
26295: CALL 26653 0 2
26299: NOT
26300: IFFALSE 26359
// repeat weapon := _weapon [ 1 ] ;
26302: LD_ADDR_VAR 0 5
26306: PUSH
26307: LD_VAR 0 10
26311: PUSH
26312: LD_INT 1
26314: ARRAY
26315: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26316: LD_ADDR_VAR 0 10
26320: PUSH
26321: LD_VAR 0 10
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 3
26333: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26334: LD_VAR 0 2
26338: PPUSH
26339: LD_VAR 0 5
26343: PPUSH
26344: CALL 26653 0 2
26348: PUSH
26349: LD_VAR 0 10
26353: PUSH
26354: EMPTY
26355: EQUAL
26356: OR
26357: IFFALSE 26302
// result := [ ] ;
26359: LD_ADDR_VAR 0 6
26363: PUSH
26364: EMPTY
26365: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26366: LD_VAR 0 1
26370: PPUSH
26371: LD_VAR 0 2
26375: PPUSH
26376: LD_VAR 0 3
26380: PPUSH
26381: LD_VAR 0 4
26385: PPUSH
26386: LD_VAR 0 5
26390: PPUSH
26391: CALL_OW 448
26395: IFFALSE 26428
// result := [ chassis , engine , control , weapon ] ;
26397: LD_ADDR_VAR 0 6
26401: PUSH
26402: LD_VAR 0 2
26406: PUSH
26407: LD_VAR 0 3
26411: PUSH
26412: LD_VAR 0 4
26416: PUSH
26417: LD_VAR 0 5
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: ST_TO_ADDR
// end ;
26428: LD_VAR 0 6
26432: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26433: LD_INT 0
26435: PPUSH
// if not chassis or not engine then
26436: LD_VAR 0 1
26440: NOT
26441: PUSH
26442: LD_VAR 0 2
26446: NOT
26447: OR
26448: IFFALSE 26452
// exit ;
26450: GO 26648
// case engine of engine_solar :
26452: LD_VAR 0 2
26456: PUSH
26457: LD_INT 2
26459: DOUBLE
26460: EQUAL
26461: IFTRUE 26465
26463: GO 26503
26465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26466: LD_ADDR_VAR 0 3
26470: PUSH
26471: LD_INT 11
26473: PUSH
26474: LD_INT 12
26476: PUSH
26477: LD_INT 13
26479: PUSH
26480: LD_INT 14
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: LD_INT 3
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: ST_TO_ADDR
26501: GO 26632
26503: LD_INT 1
26505: DOUBLE
26506: EQUAL
26507: IFTRUE 26511
26509: GO 26573
26511: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26512: LD_ADDR_VAR 0 3
26516: PUSH
26517: LD_INT 11
26519: PUSH
26520: LD_INT 12
26522: PUSH
26523: LD_INT 13
26525: PUSH
26526: LD_INT 14
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: LD_INT 3
26537: PUSH
26538: LD_INT 4
26540: PUSH
26541: LD_INT 5
26543: PUSH
26544: LD_INT 21
26546: PUSH
26547: LD_INT 23
26549: PUSH
26550: LD_INT 22
26552: PUSH
26553: LD_INT 24
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: ST_TO_ADDR
26571: GO 26632
26573: LD_INT 3
26575: DOUBLE
26576: EQUAL
26577: IFTRUE 26581
26579: GO 26631
26581: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26582: LD_ADDR_VAR 0 3
26586: PUSH
26587: LD_INT 13
26589: PUSH
26590: LD_INT 14
26592: PUSH
26593: LD_INT 2
26595: PUSH
26596: LD_INT 3
26598: PUSH
26599: LD_INT 4
26601: PUSH
26602: LD_INT 5
26604: PUSH
26605: LD_INT 21
26607: PUSH
26608: LD_INT 22
26610: PUSH
26611: LD_INT 23
26613: PUSH
26614: LD_INT 24
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: ST_TO_ADDR
26629: GO 26632
26631: POP
// result := ( chassis in result ) ;
26632: LD_ADDR_VAR 0 3
26636: PUSH
26637: LD_VAR 0 1
26641: PUSH
26642: LD_VAR 0 3
26646: IN
26647: ST_TO_ADDR
// end ;
26648: LD_VAR 0 3
26652: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26653: LD_INT 0
26655: PPUSH
// if not chassis or not weapon then
26656: LD_VAR 0 1
26660: NOT
26661: PUSH
26662: LD_VAR 0 2
26666: NOT
26667: OR
26668: IFFALSE 26672
// exit ;
26670: GO 27698
// case weapon of us_machine_gun :
26672: LD_VAR 0 2
26676: PUSH
26677: LD_INT 2
26679: DOUBLE
26680: EQUAL
26681: IFTRUE 26685
26683: GO 26715
26685: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26686: LD_ADDR_VAR 0 3
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: LD_INT 2
26696: PUSH
26697: LD_INT 3
26699: PUSH
26700: LD_INT 4
26702: PUSH
26703: LD_INT 5
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: ST_TO_ADDR
26713: GO 27682
26715: LD_INT 3
26717: DOUBLE
26718: EQUAL
26719: IFTRUE 26723
26721: GO 26753
26723: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26724: LD_ADDR_VAR 0 3
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: LD_INT 3
26737: PUSH
26738: LD_INT 4
26740: PUSH
26741: LD_INT 5
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: ST_TO_ADDR
26751: GO 27682
26753: LD_INT 11
26755: DOUBLE
26756: EQUAL
26757: IFTRUE 26761
26759: GO 26791
26761: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26762: LD_ADDR_VAR 0 3
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: LD_INT 2
26772: PUSH
26773: LD_INT 3
26775: PUSH
26776: LD_INT 4
26778: PUSH
26779: LD_INT 5
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: ST_TO_ADDR
26789: GO 27682
26791: LD_INT 4
26793: DOUBLE
26794: EQUAL
26795: IFTRUE 26799
26797: GO 26825
26799: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26800: LD_ADDR_VAR 0 3
26804: PUSH
26805: LD_INT 2
26807: PUSH
26808: LD_INT 3
26810: PUSH
26811: LD_INT 4
26813: PUSH
26814: LD_INT 5
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: ST_TO_ADDR
26823: GO 27682
26825: LD_INT 5
26827: DOUBLE
26828: EQUAL
26829: IFTRUE 26833
26831: GO 26859
26833: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26834: LD_ADDR_VAR 0 3
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: LD_INT 3
26844: PUSH
26845: LD_INT 4
26847: PUSH
26848: LD_INT 5
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: ST_TO_ADDR
26857: GO 27682
26859: LD_INT 9
26861: DOUBLE
26862: EQUAL
26863: IFTRUE 26867
26865: GO 26893
26867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26868: LD_ADDR_VAR 0 3
26872: PUSH
26873: LD_INT 2
26875: PUSH
26876: LD_INT 3
26878: PUSH
26879: LD_INT 4
26881: PUSH
26882: LD_INT 5
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: ST_TO_ADDR
26891: GO 27682
26893: LD_INT 7
26895: DOUBLE
26896: EQUAL
26897: IFTRUE 26901
26899: GO 26927
26901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26902: LD_ADDR_VAR 0 3
26906: PUSH
26907: LD_INT 2
26909: PUSH
26910: LD_INT 3
26912: PUSH
26913: LD_INT 4
26915: PUSH
26916: LD_INT 5
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: ST_TO_ADDR
26925: GO 27682
26927: LD_INT 12
26929: DOUBLE
26930: EQUAL
26931: IFTRUE 26935
26933: GO 26961
26935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26936: LD_ADDR_VAR 0 3
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 3
26946: PUSH
26947: LD_INT 4
26949: PUSH
26950: LD_INT 5
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: ST_TO_ADDR
26959: GO 27682
26961: LD_INT 13
26963: DOUBLE
26964: EQUAL
26965: IFTRUE 26969
26967: GO 26995
26969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26970: LD_ADDR_VAR 0 3
26974: PUSH
26975: LD_INT 2
26977: PUSH
26978: LD_INT 3
26980: PUSH
26981: LD_INT 4
26983: PUSH
26984: LD_INT 5
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: ST_TO_ADDR
26993: GO 27682
26995: LD_INT 14
26997: DOUBLE
26998: EQUAL
26999: IFTRUE 27003
27001: GO 27021
27003: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: LD_INT 4
27011: PUSH
27012: LD_INT 5
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: ST_TO_ADDR
27019: GO 27682
27021: LD_INT 6
27023: DOUBLE
27024: EQUAL
27025: IFTRUE 27029
27027: GO 27047
27029: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27030: LD_ADDR_VAR 0 3
27034: PUSH
27035: LD_INT 4
27037: PUSH
27038: LD_INT 5
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: ST_TO_ADDR
27045: GO 27682
27047: LD_INT 10
27049: DOUBLE
27050: EQUAL
27051: IFTRUE 27055
27053: GO 27073
27055: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27056: LD_ADDR_VAR 0 3
27060: PUSH
27061: LD_INT 4
27063: PUSH
27064: LD_INT 5
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: ST_TO_ADDR
27071: GO 27682
27073: LD_INT 22
27075: DOUBLE
27076: EQUAL
27077: IFTRUE 27081
27079: GO 27107
27081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27082: LD_ADDR_VAR 0 3
27086: PUSH
27087: LD_INT 11
27089: PUSH
27090: LD_INT 12
27092: PUSH
27093: LD_INT 13
27095: PUSH
27096: LD_INT 14
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: ST_TO_ADDR
27105: GO 27682
27107: LD_INT 23
27109: DOUBLE
27110: EQUAL
27111: IFTRUE 27115
27113: GO 27141
27115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27116: LD_ADDR_VAR 0 3
27120: PUSH
27121: LD_INT 11
27123: PUSH
27124: LD_INT 12
27126: PUSH
27127: LD_INT 13
27129: PUSH
27130: LD_INT 14
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: ST_TO_ADDR
27139: GO 27682
27141: LD_INT 24
27143: DOUBLE
27144: EQUAL
27145: IFTRUE 27149
27147: GO 27175
27149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27150: LD_ADDR_VAR 0 3
27154: PUSH
27155: LD_INT 11
27157: PUSH
27158: LD_INT 12
27160: PUSH
27161: LD_INT 13
27163: PUSH
27164: LD_INT 14
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: ST_TO_ADDR
27173: GO 27682
27175: LD_INT 30
27177: DOUBLE
27178: EQUAL
27179: IFTRUE 27183
27181: GO 27209
27183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27184: LD_ADDR_VAR 0 3
27188: PUSH
27189: LD_INT 11
27191: PUSH
27192: LD_INT 12
27194: PUSH
27195: LD_INT 13
27197: PUSH
27198: LD_INT 14
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: ST_TO_ADDR
27207: GO 27682
27209: LD_INT 25
27211: DOUBLE
27212: EQUAL
27213: IFTRUE 27217
27215: GO 27235
27217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27218: LD_ADDR_VAR 0 3
27222: PUSH
27223: LD_INT 13
27225: PUSH
27226: LD_INT 14
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: ST_TO_ADDR
27233: GO 27682
27235: LD_INT 27
27237: DOUBLE
27238: EQUAL
27239: IFTRUE 27243
27241: GO 27261
27243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27244: LD_ADDR_VAR 0 3
27248: PUSH
27249: LD_INT 13
27251: PUSH
27252: LD_INT 14
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: ST_TO_ADDR
27259: GO 27682
27261: LD_INT 28
27263: DOUBLE
27264: EQUAL
27265: IFTRUE 27269
27267: GO 27287
27269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27270: LD_ADDR_VAR 0 3
27274: PUSH
27275: LD_INT 13
27277: PUSH
27278: LD_INT 14
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: ST_TO_ADDR
27285: GO 27682
27287: LD_INT 29
27289: DOUBLE
27290: EQUAL
27291: IFTRUE 27295
27293: GO 27313
27295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27296: LD_ADDR_VAR 0 3
27300: PUSH
27301: LD_INT 13
27303: PUSH
27304: LD_INT 14
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: ST_TO_ADDR
27311: GO 27682
27313: LD_INT 31
27315: DOUBLE
27316: EQUAL
27317: IFTRUE 27321
27319: GO 27339
27321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27322: LD_ADDR_VAR 0 3
27326: PUSH
27327: LD_INT 13
27329: PUSH
27330: LD_INT 14
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: ST_TO_ADDR
27337: GO 27682
27339: LD_INT 26
27341: DOUBLE
27342: EQUAL
27343: IFTRUE 27347
27345: GO 27365
27347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27348: LD_ADDR_VAR 0 3
27352: PUSH
27353: LD_INT 13
27355: PUSH
27356: LD_INT 14
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: ST_TO_ADDR
27363: GO 27682
27365: LD_INT 42
27367: DOUBLE
27368: EQUAL
27369: IFTRUE 27373
27371: GO 27399
27373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27374: LD_ADDR_VAR 0 3
27378: PUSH
27379: LD_INT 21
27381: PUSH
27382: LD_INT 22
27384: PUSH
27385: LD_INT 23
27387: PUSH
27388: LD_INT 24
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: ST_TO_ADDR
27397: GO 27682
27399: LD_INT 43
27401: DOUBLE
27402: EQUAL
27403: IFTRUE 27407
27405: GO 27433
27407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27408: LD_ADDR_VAR 0 3
27412: PUSH
27413: LD_INT 21
27415: PUSH
27416: LD_INT 22
27418: PUSH
27419: LD_INT 23
27421: PUSH
27422: LD_INT 24
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: ST_TO_ADDR
27431: GO 27682
27433: LD_INT 44
27435: DOUBLE
27436: EQUAL
27437: IFTRUE 27441
27439: GO 27467
27441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27442: LD_ADDR_VAR 0 3
27446: PUSH
27447: LD_INT 21
27449: PUSH
27450: LD_INT 22
27452: PUSH
27453: LD_INT 23
27455: PUSH
27456: LD_INT 24
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: ST_TO_ADDR
27465: GO 27682
27467: LD_INT 45
27469: DOUBLE
27470: EQUAL
27471: IFTRUE 27475
27473: GO 27501
27475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27476: LD_ADDR_VAR 0 3
27480: PUSH
27481: LD_INT 21
27483: PUSH
27484: LD_INT 22
27486: PUSH
27487: LD_INT 23
27489: PUSH
27490: LD_INT 24
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: ST_TO_ADDR
27499: GO 27682
27501: LD_INT 49
27503: DOUBLE
27504: EQUAL
27505: IFTRUE 27509
27507: GO 27535
27509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27510: LD_ADDR_VAR 0 3
27514: PUSH
27515: LD_INT 21
27517: PUSH
27518: LD_INT 22
27520: PUSH
27521: LD_INT 23
27523: PUSH
27524: LD_INT 24
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: ST_TO_ADDR
27533: GO 27682
27535: LD_INT 51
27537: DOUBLE
27538: EQUAL
27539: IFTRUE 27543
27541: GO 27569
27543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27544: LD_ADDR_VAR 0 3
27548: PUSH
27549: LD_INT 21
27551: PUSH
27552: LD_INT 22
27554: PUSH
27555: LD_INT 23
27557: PUSH
27558: LD_INT 24
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: ST_TO_ADDR
27567: GO 27682
27569: LD_INT 52
27571: DOUBLE
27572: EQUAL
27573: IFTRUE 27577
27575: GO 27603
27577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27578: LD_ADDR_VAR 0 3
27582: PUSH
27583: LD_INT 21
27585: PUSH
27586: LD_INT 22
27588: PUSH
27589: LD_INT 23
27591: PUSH
27592: LD_INT 24
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: ST_TO_ADDR
27601: GO 27682
27603: LD_INT 53
27605: DOUBLE
27606: EQUAL
27607: IFTRUE 27611
27609: GO 27629
27611: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27612: LD_ADDR_VAR 0 3
27616: PUSH
27617: LD_INT 23
27619: PUSH
27620: LD_INT 24
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: ST_TO_ADDR
27627: GO 27682
27629: LD_INT 46
27631: DOUBLE
27632: EQUAL
27633: IFTRUE 27637
27635: GO 27655
27637: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27638: LD_ADDR_VAR 0 3
27642: PUSH
27643: LD_INT 23
27645: PUSH
27646: LD_INT 24
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: ST_TO_ADDR
27653: GO 27682
27655: LD_INT 47
27657: DOUBLE
27658: EQUAL
27659: IFTRUE 27663
27661: GO 27681
27663: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27664: LD_ADDR_VAR 0 3
27668: PUSH
27669: LD_INT 23
27671: PUSH
27672: LD_INT 24
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: ST_TO_ADDR
27679: GO 27682
27681: POP
// result := ( chassis in result ) ;
27682: LD_ADDR_VAR 0 3
27686: PUSH
27687: LD_VAR 0 1
27691: PUSH
27692: LD_VAR 0 3
27696: IN
27697: ST_TO_ADDR
// end ;
27698: LD_VAR 0 3
27702: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27703: LD_INT 0
27705: PPUSH
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
27711: PPUSH
// result := array ;
27712: LD_ADDR_VAR 0 5
27716: PUSH
27717: LD_VAR 0 1
27721: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27722: LD_VAR 0 1
27726: NOT
27727: PUSH
27728: LD_VAR 0 2
27732: NOT
27733: OR
27734: PUSH
27735: LD_VAR 0 3
27739: NOT
27740: OR
27741: PUSH
27742: LD_VAR 0 2
27746: PUSH
27747: LD_VAR 0 1
27751: GREATER
27752: OR
27753: PUSH
27754: LD_VAR 0 3
27758: PUSH
27759: LD_VAR 0 1
27763: GREATER
27764: OR
27765: IFFALSE 27769
// exit ;
27767: GO 28065
// if direction then
27769: LD_VAR 0 4
27773: IFFALSE 27837
// begin d := 1 ;
27775: LD_ADDR_VAR 0 9
27779: PUSH
27780: LD_INT 1
27782: ST_TO_ADDR
// if i_from > i_to then
27783: LD_VAR 0 2
27787: PUSH
27788: LD_VAR 0 3
27792: GREATER
27793: IFFALSE 27819
// length := ( array - i_from ) + i_to else
27795: LD_ADDR_VAR 0 11
27799: PUSH
27800: LD_VAR 0 1
27804: PUSH
27805: LD_VAR 0 2
27809: MINUS
27810: PUSH
27811: LD_VAR 0 3
27815: PLUS
27816: ST_TO_ADDR
27817: GO 27835
// length := i_to - i_from ;
27819: LD_ADDR_VAR 0 11
27823: PUSH
27824: LD_VAR 0 3
27828: PUSH
27829: LD_VAR 0 2
27833: MINUS
27834: ST_TO_ADDR
// end else
27835: GO 27898
// begin d := - 1 ;
27837: LD_ADDR_VAR 0 9
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: ST_TO_ADDR
// if i_from > i_to then
27846: LD_VAR 0 2
27850: PUSH
27851: LD_VAR 0 3
27855: GREATER
27856: IFFALSE 27876
// length := i_from - i_to else
27858: LD_ADDR_VAR 0 11
27862: PUSH
27863: LD_VAR 0 2
27867: PUSH
27868: LD_VAR 0 3
27872: MINUS
27873: ST_TO_ADDR
27874: GO 27898
// length := ( array - i_to ) + i_from ;
27876: LD_ADDR_VAR 0 11
27880: PUSH
27881: LD_VAR 0 1
27885: PUSH
27886: LD_VAR 0 3
27890: MINUS
27891: PUSH
27892: LD_VAR 0 2
27896: PLUS
27897: ST_TO_ADDR
// end ; if not length then
27898: LD_VAR 0 11
27902: NOT
27903: IFFALSE 27907
// exit ;
27905: GO 28065
// tmp := array ;
27907: LD_ADDR_VAR 0 10
27911: PUSH
27912: LD_VAR 0 1
27916: ST_TO_ADDR
// for i = 1 to length do
27917: LD_ADDR_VAR 0 6
27921: PUSH
27922: DOUBLE
27923: LD_INT 1
27925: DEC
27926: ST_TO_ADDR
27927: LD_VAR 0 11
27931: PUSH
27932: FOR_TO
27933: IFFALSE 28053
// begin for j = 1 to array do
27935: LD_ADDR_VAR 0 7
27939: PUSH
27940: DOUBLE
27941: LD_INT 1
27943: DEC
27944: ST_TO_ADDR
27945: LD_VAR 0 1
27949: PUSH
27950: FOR_TO
27951: IFFALSE 28039
// begin k := j + d ;
27953: LD_ADDR_VAR 0 8
27957: PUSH
27958: LD_VAR 0 7
27962: PUSH
27963: LD_VAR 0 9
27967: PLUS
27968: ST_TO_ADDR
// if k > array then
27969: LD_VAR 0 8
27973: PUSH
27974: LD_VAR 0 1
27978: GREATER
27979: IFFALSE 27989
// k := 1 ;
27981: LD_ADDR_VAR 0 8
27985: PUSH
27986: LD_INT 1
27988: ST_TO_ADDR
// if not k then
27989: LD_VAR 0 8
27993: NOT
27994: IFFALSE 28006
// k := array ;
27996: LD_ADDR_VAR 0 8
28000: PUSH
28001: LD_VAR 0 1
28005: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28006: LD_ADDR_VAR 0 10
28010: PUSH
28011: LD_VAR 0 10
28015: PPUSH
28016: LD_VAR 0 8
28020: PPUSH
28021: LD_VAR 0 1
28025: PUSH
28026: LD_VAR 0 7
28030: ARRAY
28031: PPUSH
28032: CALL_OW 1
28036: ST_TO_ADDR
// end ;
28037: GO 27950
28039: POP
28040: POP
// array := tmp ;
28041: LD_ADDR_VAR 0 1
28045: PUSH
28046: LD_VAR 0 10
28050: ST_TO_ADDR
// end ;
28051: GO 27932
28053: POP
28054: POP
// result := array ;
28055: LD_ADDR_VAR 0 5
28059: PUSH
28060: LD_VAR 0 1
28064: ST_TO_ADDR
// end ;
28065: LD_VAR 0 5
28069: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28070: LD_INT 0
28072: PPUSH
28073: PPUSH
// result := 0 ;
28074: LD_ADDR_VAR 0 3
28078: PUSH
28079: LD_INT 0
28081: ST_TO_ADDR
// if not array or not value in array then
28082: LD_VAR 0 1
28086: NOT
28087: PUSH
28088: LD_VAR 0 2
28092: PUSH
28093: LD_VAR 0 1
28097: IN
28098: NOT
28099: OR
28100: IFFALSE 28104
// exit ;
28102: GO 28158
// for i = 1 to array do
28104: LD_ADDR_VAR 0 4
28108: PUSH
28109: DOUBLE
28110: LD_INT 1
28112: DEC
28113: ST_TO_ADDR
28114: LD_VAR 0 1
28118: PUSH
28119: FOR_TO
28120: IFFALSE 28156
// if value = array [ i ] then
28122: LD_VAR 0 2
28126: PUSH
28127: LD_VAR 0 1
28131: PUSH
28132: LD_VAR 0 4
28136: ARRAY
28137: EQUAL
28138: IFFALSE 28154
// begin result := i ;
28140: LD_ADDR_VAR 0 3
28144: PUSH
28145: LD_VAR 0 4
28149: ST_TO_ADDR
// exit ;
28150: POP
28151: POP
28152: GO 28158
// end ;
28154: GO 28119
28156: POP
28157: POP
// end ;
28158: LD_VAR 0 3
28162: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28163: LD_INT 0
28165: PPUSH
// vc_chassis := chassis ;
28166: LD_ADDR_OWVAR 37
28170: PUSH
28171: LD_VAR 0 1
28175: ST_TO_ADDR
// vc_engine := engine ;
28176: LD_ADDR_OWVAR 39
28180: PUSH
28181: LD_VAR 0 2
28185: ST_TO_ADDR
// vc_control := control ;
28186: LD_ADDR_OWVAR 38
28190: PUSH
28191: LD_VAR 0 3
28195: ST_TO_ADDR
// vc_weapon := weapon ;
28196: LD_ADDR_OWVAR 40
28200: PUSH
28201: LD_VAR 0 4
28205: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28206: LD_ADDR_OWVAR 41
28210: PUSH
28211: LD_VAR 0 5
28215: ST_TO_ADDR
// end ;
28216: LD_VAR 0 6
28220: RET
// export function WantPlant ( unit ) ; var task ; begin
28221: LD_INT 0
28223: PPUSH
28224: PPUSH
// result := false ;
28225: LD_ADDR_VAR 0 2
28229: PUSH
28230: LD_INT 0
28232: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28233: LD_ADDR_VAR 0 3
28237: PUSH
28238: LD_VAR 0 1
28242: PPUSH
28243: CALL_OW 437
28247: ST_TO_ADDR
// if task then
28248: LD_VAR 0 3
28252: IFFALSE 28280
// if task [ 1 ] [ 1 ] = p then
28254: LD_VAR 0 3
28258: PUSH
28259: LD_INT 1
28261: ARRAY
28262: PUSH
28263: LD_INT 1
28265: ARRAY
28266: PUSH
28267: LD_STRING p
28269: EQUAL
28270: IFFALSE 28280
// result := true ;
28272: LD_ADDR_VAR 0 2
28276: PUSH
28277: LD_INT 1
28279: ST_TO_ADDR
// end ;
28280: LD_VAR 0 2
28284: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28285: LD_INT 0
28287: PPUSH
28288: PPUSH
28289: PPUSH
28290: PPUSH
// if pos < 1 then
28291: LD_VAR 0 2
28295: PUSH
28296: LD_INT 1
28298: LESS
28299: IFFALSE 28303
// exit ;
28301: GO 28606
// if pos = 1 then
28303: LD_VAR 0 2
28307: PUSH
28308: LD_INT 1
28310: EQUAL
28311: IFFALSE 28344
// result := Replace ( arr , pos [ 1 ] , value ) else
28313: LD_ADDR_VAR 0 4
28317: PUSH
28318: LD_VAR 0 1
28322: PPUSH
28323: LD_VAR 0 2
28327: PUSH
28328: LD_INT 1
28330: ARRAY
28331: PPUSH
28332: LD_VAR 0 3
28336: PPUSH
28337: CALL_OW 1
28341: ST_TO_ADDR
28342: GO 28606
// begin tmp := arr ;
28344: LD_ADDR_VAR 0 6
28348: PUSH
28349: LD_VAR 0 1
28353: ST_TO_ADDR
// s_arr := [ tmp ] ;
28354: LD_ADDR_VAR 0 7
28358: PUSH
28359: LD_VAR 0 6
28363: PUSH
28364: EMPTY
28365: LIST
28366: ST_TO_ADDR
// for i = 1 to pos - 1 do
28367: LD_ADDR_VAR 0 5
28371: PUSH
28372: DOUBLE
28373: LD_INT 1
28375: DEC
28376: ST_TO_ADDR
28377: LD_VAR 0 2
28381: PUSH
28382: LD_INT 1
28384: MINUS
28385: PUSH
28386: FOR_TO
28387: IFFALSE 28432
// begin tmp := tmp [ pos [ i ] ] ;
28389: LD_ADDR_VAR 0 6
28393: PUSH
28394: LD_VAR 0 6
28398: PUSH
28399: LD_VAR 0 2
28403: PUSH
28404: LD_VAR 0 5
28408: ARRAY
28409: ARRAY
28410: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28411: LD_ADDR_VAR 0 7
28415: PUSH
28416: LD_VAR 0 7
28420: PUSH
28421: LD_VAR 0 6
28425: PUSH
28426: EMPTY
28427: LIST
28428: ADD
28429: ST_TO_ADDR
// end ;
28430: GO 28386
28432: POP
28433: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28434: LD_ADDR_VAR 0 6
28438: PUSH
28439: LD_VAR 0 6
28443: PPUSH
28444: LD_VAR 0 2
28448: PUSH
28449: LD_VAR 0 2
28453: ARRAY
28454: PPUSH
28455: LD_VAR 0 3
28459: PPUSH
28460: CALL_OW 1
28464: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28465: LD_ADDR_VAR 0 7
28469: PUSH
28470: LD_VAR 0 7
28474: PPUSH
28475: LD_VAR 0 7
28479: PPUSH
28480: LD_VAR 0 6
28484: PPUSH
28485: CALL_OW 1
28489: ST_TO_ADDR
// for i = s_arr downto 2 do
28490: LD_ADDR_VAR 0 5
28494: PUSH
28495: DOUBLE
28496: LD_VAR 0 7
28500: INC
28501: ST_TO_ADDR
28502: LD_INT 2
28504: PUSH
28505: FOR_DOWNTO
28506: IFFALSE 28590
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28508: LD_ADDR_VAR 0 6
28512: PUSH
28513: LD_VAR 0 7
28517: PUSH
28518: LD_VAR 0 5
28522: PUSH
28523: LD_INT 1
28525: MINUS
28526: ARRAY
28527: PPUSH
28528: LD_VAR 0 2
28532: PUSH
28533: LD_VAR 0 5
28537: PUSH
28538: LD_INT 1
28540: MINUS
28541: ARRAY
28542: PPUSH
28543: LD_VAR 0 7
28547: PUSH
28548: LD_VAR 0 5
28552: ARRAY
28553: PPUSH
28554: CALL_OW 1
28558: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28559: LD_ADDR_VAR 0 7
28563: PUSH
28564: LD_VAR 0 7
28568: PPUSH
28569: LD_VAR 0 5
28573: PUSH
28574: LD_INT 1
28576: MINUS
28577: PPUSH
28578: LD_VAR 0 6
28582: PPUSH
28583: CALL_OW 1
28587: ST_TO_ADDR
// end ;
28588: GO 28505
28590: POP
28591: POP
// result := s_arr [ 1 ] ;
28592: LD_ADDR_VAR 0 4
28596: PUSH
28597: LD_VAR 0 7
28601: PUSH
28602: LD_INT 1
28604: ARRAY
28605: ST_TO_ADDR
// end ; end ;
28606: LD_VAR 0 4
28610: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28611: LD_INT 0
28613: PPUSH
28614: PPUSH
// if not list then
28615: LD_VAR 0 1
28619: NOT
28620: IFFALSE 28624
// exit ;
28622: GO 28715
// i := list [ pos1 ] ;
28624: LD_ADDR_VAR 0 5
28628: PUSH
28629: LD_VAR 0 1
28633: PUSH
28634: LD_VAR 0 2
28638: ARRAY
28639: ST_TO_ADDR
// if not i then
28640: LD_VAR 0 5
28644: NOT
28645: IFFALSE 28649
// exit ;
28647: GO 28715
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28649: LD_ADDR_VAR 0 1
28653: PUSH
28654: LD_VAR 0 1
28658: PPUSH
28659: LD_VAR 0 2
28663: PPUSH
28664: LD_VAR 0 1
28668: PUSH
28669: LD_VAR 0 3
28673: ARRAY
28674: PPUSH
28675: CALL_OW 1
28679: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28680: LD_ADDR_VAR 0 1
28684: PUSH
28685: LD_VAR 0 1
28689: PPUSH
28690: LD_VAR 0 3
28694: PPUSH
28695: LD_VAR 0 5
28699: PPUSH
28700: CALL_OW 1
28704: ST_TO_ADDR
// result := list ;
28705: LD_ADDR_VAR 0 4
28709: PUSH
28710: LD_VAR 0 1
28714: ST_TO_ADDR
// end ;
28715: LD_VAR 0 4
28719: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28720: LD_INT 0
28722: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28723: LD_ADDR_VAR 0 5
28727: PUSH
28728: LD_VAR 0 1
28732: PPUSH
28733: CALL_OW 250
28737: PPUSH
28738: LD_VAR 0 1
28742: PPUSH
28743: CALL_OW 251
28747: PPUSH
28748: LD_VAR 0 2
28752: PPUSH
28753: LD_VAR 0 3
28757: PPUSH
28758: LD_VAR 0 4
28762: PPUSH
28763: CALL 28773 0 5
28767: ST_TO_ADDR
// end ;
28768: LD_VAR 0 5
28772: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28773: LD_INT 0
28775: PPUSH
28776: PPUSH
28777: PPUSH
28778: PPUSH
// if not list then
28779: LD_VAR 0 3
28783: NOT
28784: IFFALSE 28788
// exit ;
28786: GO 29176
// result := [ ] ;
28788: LD_ADDR_VAR 0 6
28792: PUSH
28793: EMPTY
28794: ST_TO_ADDR
// for i in list do
28795: LD_ADDR_VAR 0 7
28799: PUSH
28800: LD_VAR 0 3
28804: PUSH
28805: FOR_IN
28806: IFFALSE 29008
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28808: LD_ADDR_VAR 0 9
28812: PUSH
28813: LD_VAR 0 7
28817: PPUSH
28818: LD_VAR 0 1
28822: PPUSH
28823: LD_VAR 0 2
28827: PPUSH
28828: CALL_OW 297
28832: ST_TO_ADDR
// if not result then
28833: LD_VAR 0 6
28837: NOT
28838: IFFALSE 28864
// result := [ [ i , tmp ] ] else
28840: LD_ADDR_VAR 0 6
28844: PUSH
28845: LD_VAR 0 7
28849: PUSH
28850: LD_VAR 0 9
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: EMPTY
28860: LIST
28861: ST_TO_ADDR
28862: GO 29006
// begin if result [ result ] [ 2 ] < tmp then
28864: LD_VAR 0 6
28868: PUSH
28869: LD_VAR 0 6
28873: ARRAY
28874: PUSH
28875: LD_INT 2
28877: ARRAY
28878: PUSH
28879: LD_VAR 0 9
28883: LESS
28884: IFFALSE 28926
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28886: LD_ADDR_VAR 0 6
28890: PUSH
28891: LD_VAR 0 6
28895: PPUSH
28896: LD_VAR 0 6
28900: PUSH
28901: LD_INT 1
28903: PLUS
28904: PPUSH
28905: LD_VAR 0 7
28909: PUSH
28910: LD_VAR 0 9
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PPUSH
28919: CALL_OW 2
28923: ST_TO_ADDR
28924: GO 29006
// for j = 1 to result do
28926: LD_ADDR_VAR 0 8
28930: PUSH
28931: DOUBLE
28932: LD_INT 1
28934: DEC
28935: ST_TO_ADDR
28936: LD_VAR 0 6
28940: PUSH
28941: FOR_TO
28942: IFFALSE 29004
// begin if tmp < result [ j ] [ 2 ] then
28944: LD_VAR 0 9
28948: PUSH
28949: LD_VAR 0 6
28953: PUSH
28954: LD_VAR 0 8
28958: ARRAY
28959: PUSH
28960: LD_INT 2
28962: ARRAY
28963: LESS
28964: IFFALSE 29002
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28966: LD_ADDR_VAR 0 6
28970: PUSH
28971: LD_VAR 0 6
28975: PPUSH
28976: LD_VAR 0 8
28980: PPUSH
28981: LD_VAR 0 7
28985: PUSH
28986: LD_VAR 0 9
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PPUSH
28995: CALL_OW 2
28999: ST_TO_ADDR
// break ;
29000: GO 29004
// end ; end ;
29002: GO 28941
29004: POP
29005: POP
// end ; end ;
29006: GO 28805
29008: POP
29009: POP
// if result and not asc then
29010: LD_VAR 0 6
29014: PUSH
29015: LD_VAR 0 4
29019: NOT
29020: AND
29021: IFFALSE 29096
// begin tmp := result ;
29023: LD_ADDR_VAR 0 9
29027: PUSH
29028: LD_VAR 0 6
29032: ST_TO_ADDR
// for i = tmp downto 1 do
29033: LD_ADDR_VAR 0 7
29037: PUSH
29038: DOUBLE
29039: LD_VAR 0 9
29043: INC
29044: ST_TO_ADDR
29045: LD_INT 1
29047: PUSH
29048: FOR_DOWNTO
29049: IFFALSE 29094
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29051: LD_ADDR_VAR 0 6
29055: PUSH
29056: LD_VAR 0 6
29060: PPUSH
29061: LD_VAR 0 9
29065: PUSH
29066: LD_VAR 0 7
29070: MINUS
29071: PUSH
29072: LD_INT 1
29074: PLUS
29075: PPUSH
29076: LD_VAR 0 9
29080: PUSH
29081: LD_VAR 0 7
29085: ARRAY
29086: PPUSH
29087: CALL_OW 1
29091: ST_TO_ADDR
29092: GO 29048
29094: POP
29095: POP
// end ; tmp := [ ] ;
29096: LD_ADDR_VAR 0 9
29100: PUSH
29101: EMPTY
29102: ST_TO_ADDR
// if mode then
29103: LD_VAR 0 5
29107: IFFALSE 29176
// begin for i = 1 to result do
29109: LD_ADDR_VAR 0 7
29113: PUSH
29114: DOUBLE
29115: LD_INT 1
29117: DEC
29118: ST_TO_ADDR
29119: LD_VAR 0 6
29123: PUSH
29124: FOR_TO
29125: IFFALSE 29164
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29127: LD_ADDR_VAR 0 9
29131: PUSH
29132: LD_VAR 0 9
29136: PPUSH
29137: LD_VAR 0 7
29141: PPUSH
29142: LD_VAR 0 6
29146: PUSH
29147: LD_VAR 0 7
29151: ARRAY
29152: PUSH
29153: LD_INT 1
29155: ARRAY
29156: PPUSH
29157: CALL_OW 1
29161: ST_TO_ADDR
29162: GO 29124
29164: POP
29165: POP
// result := tmp ;
29166: LD_ADDR_VAR 0 6
29170: PUSH
29171: LD_VAR 0 9
29175: ST_TO_ADDR
// end ; end ;
29176: LD_VAR 0 6
29180: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29181: LD_INT 0
29183: PPUSH
29184: PPUSH
29185: PPUSH
29186: PPUSH
29187: PPUSH
29188: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29189: LD_ADDR_VAR 0 5
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: EMPTY
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: ST_TO_ADDR
// if not x or not y then
29211: LD_VAR 0 2
29215: NOT
29216: PUSH
29217: LD_VAR 0 3
29221: NOT
29222: OR
29223: IFFALSE 29227
// exit ;
29225: GO 30873
// if not range then
29227: LD_VAR 0 4
29231: NOT
29232: IFFALSE 29242
// range := 10 ;
29234: LD_ADDR_VAR 0 4
29238: PUSH
29239: LD_INT 10
29241: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29242: LD_ADDR_VAR 0 8
29246: PUSH
29247: LD_INT 81
29249: PUSH
29250: LD_VAR 0 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 92
29261: PUSH
29262: LD_VAR 0 2
29266: PUSH
29267: LD_VAR 0 3
29271: PUSH
29272: LD_VAR 0 4
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 3
29285: PUSH
29286: LD_INT 21
29288: PUSH
29289: LD_INT 3
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: LIST
29304: PPUSH
29305: CALL_OW 69
29309: ST_TO_ADDR
// if not tmp then
29310: LD_VAR 0 8
29314: NOT
29315: IFFALSE 29319
// exit ;
29317: GO 30873
// for i in tmp do
29319: LD_ADDR_VAR 0 6
29323: PUSH
29324: LD_VAR 0 8
29328: PUSH
29329: FOR_IN
29330: IFFALSE 30848
// begin points := [ 0 , 0 , 0 ] ;
29332: LD_ADDR_VAR 0 9
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: ST_TO_ADDR
// bpoints := 1 ;
29351: LD_ADDR_VAR 0 10
29355: PUSH
29356: LD_INT 1
29358: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29359: LD_VAR 0 6
29363: PPUSH
29364: CALL_OW 247
29368: PUSH
29369: LD_INT 1
29371: DOUBLE
29372: EQUAL
29373: IFTRUE 29377
29375: GO 29955
29377: POP
// begin if GetClass ( i ) = 1 then
29378: LD_VAR 0 6
29382: PPUSH
29383: CALL_OW 257
29387: PUSH
29388: LD_INT 1
29390: EQUAL
29391: IFFALSE 29412
// points := [ 10 , 5 , 3 ] ;
29393: LD_ADDR_VAR 0 9
29397: PUSH
29398: LD_INT 10
29400: PUSH
29401: LD_INT 5
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: LIST
29411: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29412: LD_VAR 0 6
29416: PPUSH
29417: CALL_OW 257
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: LD_INT 4
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: IN
29436: IFFALSE 29457
// points := [ 3 , 2 , 1 ] ;
29438: LD_ADDR_VAR 0 9
29442: PUSH
29443: LD_INT 3
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: LIST
29456: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29457: LD_VAR 0 6
29461: PPUSH
29462: CALL_OW 257
29466: PUSH
29467: LD_INT 5
29469: EQUAL
29470: IFFALSE 29491
// points := [ 130 , 5 , 2 ] ;
29472: LD_ADDR_VAR 0 9
29476: PUSH
29477: LD_INT 130
29479: PUSH
29480: LD_INT 5
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29491: LD_VAR 0 6
29495: PPUSH
29496: CALL_OW 257
29500: PUSH
29501: LD_INT 8
29503: EQUAL
29504: IFFALSE 29525
// points := [ 35 , 35 , 30 ] ;
29506: LD_ADDR_VAR 0 9
29510: PUSH
29511: LD_INT 35
29513: PUSH
29514: LD_INT 35
29516: PUSH
29517: LD_INT 30
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29525: LD_VAR 0 6
29529: PPUSH
29530: CALL_OW 257
29534: PUSH
29535: LD_INT 9
29537: EQUAL
29538: IFFALSE 29559
// points := [ 20 , 55 , 40 ] ;
29540: LD_ADDR_VAR 0 9
29544: PUSH
29545: LD_INT 20
29547: PUSH
29548: LD_INT 55
29550: PUSH
29551: LD_INT 40
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: LIST
29558: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29559: LD_VAR 0 6
29563: PPUSH
29564: CALL_OW 257
29568: PUSH
29569: LD_INT 12
29571: PUSH
29572: LD_INT 16
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: IN
29579: IFFALSE 29600
// points := [ 5 , 3 , 2 ] ;
29581: LD_ADDR_VAR 0 9
29585: PUSH
29586: LD_INT 5
29588: PUSH
29589: LD_INT 3
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29600: LD_VAR 0 6
29604: PPUSH
29605: CALL_OW 257
29609: PUSH
29610: LD_INT 17
29612: EQUAL
29613: IFFALSE 29634
// points := [ 100 , 50 , 75 ] ;
29615: LD_ADDR_VAR 0 9
29619: PUSH
29620: LD_INT 100
29622: PUSH
29623: LD_INT 50
29625: PUSH
29626: LD_INT 75
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29634: LD_VAR 0 6
29638: PPUSH
29639: CALL_OW 257
29643: PUSH
29644: LD_INT 15
29646: EQUAL
29647: IFFALSE 29668
// points := [ 10 , 5 , 3 ] ;
29649: LD_ADDR_VAR 0 9
29653: PUSH
29654: LD_INT 10
29656: PUSH
29657: LD_INT 5
29659: PUSH
29660: LD_INT 3
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29668: LD_VAR 0 6
29672: PPUSH
29673: CALL_OW 257
29677: PUSH
29678: LD_INT 14
29680: EQUAL
29681: IFFALSE 29702
// points := [ 10 , 0 , 0 ] ;
29683: LD_ADDR_VAR 0 9
29687: PUSH
29688: LD_INT 10
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: LIST
29701: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29702: LD_VAR 0 6
29706: PPUSH
29707: CALL_OW 257
29711: PUSH
29712: LD_INT 11
29714: EQUAL
29715: IFFALSE 29736
// points := [ 30 , 10 , 5 ] ;
29717: LD_ADDR_VAR 0 9
29721: PUSH
29722: LD_INT 30
29724: PUSH
29725: LD_INT 10
29727: PUSH
29728: LD_INT 5
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: LIST
29735: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29736: LD_VAR 0 1
29740: PPUSH
29741: LD_INT 5
29743: PPUSH
29744: CALL_OW 321
29748: PUSH
29749: LD_INT 2
29751: EQUAL
29752: IFFALSE 29769
// bpoints := bpoints * 1.8 ;
29754: LD_ADDR_VAR 0 10
29758: PUSH
29759: LD_VAR 0 10
29763: PUSH
29764: LD_REAL  1.80000000000000E+0000
29767: MUL
29768: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29769: LD_VAR 0 6
29773: PPUSH
29774: CALL_OW 257
29778: PUSH
29779: LD_INT 1
29781: PUSH
29782: LD_INT 2
29784: PUSH
29785: LD_INT 3
29787: PUSH
29788: LD_INT 4
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: IN
29797: PUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: LD_INT 51
29805: PPUSH
29806: CALL_OW 321
29810: PUSH
29811: LD_INT 2
29813: EQUAL
29814: AND
29815: IFFALSE 29832
// bpoints := bpoints * 1.2 ;
29817: LD_ADDR_VAR 0 10
29821: PUSH
29822: LD_VAR 0 10
29826: PUSH
29827: LD_REAL  1.20000000000000E+0000
29830: MUL
29831: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29832: LD_VAR 0 6
29836: PPUSH
29837: CALL_OW 257
29841: PUSH
29842: LD_INT 5
29844: PUSH
29845: LD_INT 7
29847: PUSH
29848: LD_INT 9
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: LIST
29855: IN
29856: PUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: LD_INT 52
29864: PPUSH
29865: CALL_OW 321
29869: PUSH
29870: LD_INT 2
29872: EQUAL
29873: AND
29874: IFFALSE 29891
// bpoints := bpoints * 1.5 ;
29876: LD_ADDR_VAR 0 10
29880: PUSH
29881: LD_VAR 0 10
29885: PUSH
29886: LD_REAL  1.50000000000000E+0000
29889: MUL
29890: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29891: LD_VAR 0 1
29895: PPUSH
29896: LD_INT 66
29898: PPUSH
29899: CALL_OW 321
29903: PUSH
29904: LD_INT 2
29906: EQUAL
29907: IFFALSE 29924
// bpoints := bpoints * 1.1 ;
29909: LD_ADDR_VAR 0 10
29913: PUSH
29914: LD_VAR 0 10
29918: PUSH
29919: LD_REAL  1.10000000000000E+0000
29922: MUL
29923: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29924: LD_ADDR_VAR 0 10
29928: PUSH
29929: LD_VAR 0 10
29933: PUSH
29934: LD_VAR 0 6
29938: PPUSH
29939: LD_INT 1
29941: PPUSH
29942: CALL_OW 259
29946: PUSH
29947: LD_REAL  1.15000000000000E+0000
29950: MUL
29951: MUL
29952: ST_TO_ADDR
// end ; unit_vehicle :
29953: GO 30777
29955: LD_INT 2
29957: DOUBLE
29958: EQUAL
29959: IFTRUE 29963
29961: GO 30765
29963: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29964: LD_VAR 0 6
29968: PPUSH
29969: CALL_OW 264
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: LD_INT 42
29979: PUSH
29980: LD_INT 24
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: IN
29988: IFFALSE 30009
// points := [ 25 , 5 , 3 ] ;
29990: LD_ADDR_VAR 0 9
29994: PUSH
29995: LD_INT 25
29997: PUSH
29998: LD_INT 5
30000: PUSH
30001: LD_INT 3
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: LIST
30008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30009: LD_VAR 0 6
30013: PPUSH
30014: CALL_OW 264
30018: PUSH
30019: LD_INT 4
30021: PUSH
30022: LD_INT 43
30024: PUSH
30025: LD_INT 25
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: IN
30033: IFFALSE 30054
// points := [ 40 , 15 , 5 ] ;
30035: LD_ADDR_VAR 0 9
30039: PUSH
30040: LD_INT 40
30042: PUSH
30043: LD_INT 15
30045: PUSH
30046: LD_INT 5
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30054: LD_VAR 0 6
30058: PPUSH
30059: CALL_OW 264
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 23
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: IN
30074: IFFALSE 30095
// points := [ 7 , 25 , 8 ] ;
30076: LD_ADDR_VAR 0 9
30080: PUSH
30081: LD_INT 7
30083: PUSH
30084: LD_INT 25
30086: PUSH
30087: LD_INT 8
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30095: LD_VAR 0 6
30099: PPUSH
30100: CALL_OW 264
30104: PUSH
30105: LD_INT 5
30107: PUSH
30108: LD_INT 27
30110: PUSH
30111: LD_INT 44
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: LIST
30118: IN
30119: IFFALSE 30140
// points := [ 14 , 50 , 16 ] ;
30121: LD_ADDR_VAR 0 9
30125: PUSH
30126: LD_INT 14
30128: PUSH
30129: LD_INT 50
30131: PUSH
30132: LD_INT 16
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30140: LD_VAR 0 6
30144: PPUSH
30145: CALL_OW 264
30149: PUSH
30150: LD_INT 6
30152: PUSH
30153: LD_INT 46
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: IN
30160: IFFALSE 30181
// points := [ 32 , 120 , 70 ] ;
30162: LD_ADDR_VAR 0 9
30166: PUSH
30167: LD_INT 32
30169: PUSH
30170: LD_INT 120
30172: PUSH
30173: LD_INT 70
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: LIST
30180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30181: LD_VAR 0 6
30185: PPUSH
30186: CALL_OW 264
30190: PUSH
30191: LD_INT 7
30193: PUSH
30194: LD_INT 28
30196: PUSH
30197: LD_INT 45
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: LIST
30204: IN
30205: IFFALSE 30226
// points := [ 35 , 20 , 45 ] ;
30207: LD_ADDR_VAR 0 9
30211: PUSH
30212: LD_INT 35
30214: PUSH
30215: LD_INT 20
30217: PUSH
30218: LD_INT 45
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: LIST
30225: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30226: LD_VAR 0 6
30230: PPUSH
30231: CALL_OW 264
30235: PUSH
30236: LD_INT 47
30238: PUSH
30239: EMPTY
30240: LIST
30241: IN
30242: IFFALSE 30263
// points := [ 67 , 45 , 75 ] ;
30244: LD_ADDR_VAR 0 9
30248: PUSH
30249: LD_INT 67
30251: PUSH
30252: LD_INT 45
30254: PUSH
30255: LD_INT 75
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30263: LD_VAR 0 6
30267: PPUSH
30268: CALL_OW 264
30272: PUSH
30273: LD_INT 26
30275: PUSH
30276: EMPTY
30277: LIST
30278: IN
30279: IFFALSE 30300
// points := [ 120 , 30 , 80 ] ;
30281: LD_ADDR_VAR 0 9
30285: PUSH
30286: LD_INT 120
30288: PUSH
30289: LD_INT 30
30291: PUSH
30292: LD_INT 80
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: LIST
30299: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30300: LD_VAR 0 6
30304: PPUSH
30305: CALL_OW 264
30309: PUSH
30310: LD_INT 22
30312: PUSH
30313: EMPTY
30314: LIST
30315: IN
30316: IFFALSE 30337
// points := [ 40 , 1 , 1 ] ;
30318: LD_ADDR_VAR 0 9
30322: PUSH
30323: LD_INT 40
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30337: LD_VAR 0 6
30341: PPUSH
30342: CALL_OW 264
30346: PUSH
30347: LD_INT 29
30349: PUSH
30350: EMPTY
30351: LIST
30352: IN
30353: IFFALSE 30374
// points := [ 70 , 200 , 400 ] ;
30355: LD_ADDR_VAR 0 9
30359: PUSH
30360: LD_INT 70
30362: PUSH
30363: LD_INT 200
30365: PUSH
30366: LD_INT 400
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: LIST
30373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30374: LD_VAR 0 6
30378: PPUSH
30379: CALL_OW 264
30383: PUSH
30384: LD_INT 14
30386: PUSH
30387: LD_INT 53
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: IN
30394: IFFALSE 30415
// points := [ 40 , 10 , 20 ] ;
30396: LD_ADDR_VAR 0 9
30400: PUSH
30401: LD_INT 40
30403: PUSH
30404: LD_INT 10
30406: PUSH
30407: LD_INT 20
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: LIST
30414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30415: LD_VAR 0 6
30419: PPUSH
30420: CALL_OW 264
30424: PUSH
30425: LD_INT 9
30427: PUSH
30428: EMPTY
30429: LIST
30430: IN
30431: IFFALSE 30452
// points := [ 5 , 70 , 20 ] ;
30433: LD_ADDR_VAR 0 9
30437: PUSH
30438: LD_INT 5
30440: PUSH
30441: LD_INT 70
30443: PUSH
30444: LD_INT 20
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30452: LD_VAR 0 6
30456: PPUSH
30457: CALL_OW 264
30461: PUSH
30462: LD_INT 10
30464: PUSH
30465: EMPTY
30466: LIST
30467: IN
30468: IFFALSE 30489
// points := [ 35 , 110 , 70 ] ;
30470: LD_ADDR_VAR 0 9
30474: PUSH
30475: LD_INT 35
30477: PUSH
30478: LD_INT 110
30480: PUSH
30481: LD_INT 70
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30489: LD_VAR 0 6
30493: PPUSH
30494: CALL_OW 265
30498: PUSH
30499: LD_INT 25
30501: EQUAL
30502: IFFALSE 30523
// points := [ 80 , 65 , 100 ] ;
30504: LD_ADDR_VAR 0 9
30508: PUSH
30509: LD_INT 80
30511: PUSH
30512: LD_INT 65
30514: PUSH
30515: LD_INT 100
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30523: LD_VAR 0 6
30527: PPUSH
30528: CALL_OW 263
30532: PUSH
30533: LD_INT 1
30535: EQUAL
30536: IFFALSE 30571
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30538: LD_ADDR_VAR 0 10
30542: PUSH
30543: LD_VAR 0 10
30547: PUSH
30548: LD_VAR 0 6
30552: PPUSH
30553: CALL_OW 311
30557: PPUSH
30558: LD_INT 3
30560: PPUSH
30561: CALL_OW 259
30565: PUSH
30566: LD_INT 4
30568: MUL
30569: MUL
30570: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30571: LD_VAR 0 6
30575: PPUSH
30576: CALL_OW 263
30580: PUSH
30581: LD_INT 2
30583: EQUAL
30584: IFFALSE 30635
// begin j := IsControledBy ( i ) ;
30586: LD_ADDR_VAR 0 7
30590: PUSH
30591: LD_VAR 0 6
30595: PPUSH
30596: CALL_OW 312
30600: ST_TO_ADDR
// if j then
30601: LD_VAR 0 7
30605: IFFALSE 30635
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30607: LD_ADDR_VAR 0 10
30611: PUSH
30612: LD_VAR 0 10
30616: PUSH
30617: LD_VAR 0 7
30621: PPUSH
30622: LD_INT 3
30624: PPUSH
30625: CALL_OW 259
30629: PUSH
30630: LD_INT 3
30632: MUL
30633: MUL
30634: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30635: LD_VAR 0 6
30639: PPUSH
30640: CALL_OW 264
30644: PUSH
30645: LD_INT 5
30647: PUSH
30648: LD_INT 6
30650: PUSH
30651: LD_INT 46
30653: PUSH
30654: LD_INT 44
30656: PUSH
30657: LD_INT 47
30659: PUSH
30660: LD_INT 45
30662: PUSH
30663: LD_INT 28
30665: PUSH
30666: LD_INT 7
30668: PUSH
30669: LD_INT 27
30671: PUSH
30672: LD_INT 29
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: IN
30687: PUSH
30688: LD_VAR 0 1
30692: PPUSH
30693: LD_INT 52
30695: PPUSH
30696: CALL_OW 321
30700: PUSH
30701: LD_INT 2
30703: EQUAL
30704: AND
30705: IFFALSE 30722
// bpoints := bpoints * 1.2 ;
30707: LD_ADDR_VAR 0 10
30711: PUSH
30712: LD_VAR 0 10
30716: PUSH
30717: LD_REAL  1.20000000000000E+0000
30720: MUL
30721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30722: LD_VAR 0 6
30726: PPUSH
30727: CALL_OW 264
30731: PUSH
30732: LD_INT 6
30734: PUSH
30735: LD_INT 46
30737: PUSH
30738: LD_INT 47
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: IN
30746: IFFALSE 30763
// bpoints := bpoints * 1.2 ;
30748: LD_ADDR_VAR 0 10
30752: PUSH
30753: LD_VAR 0 10
30757: PUSH
30758: LD_REAL  1.20000000000000E+0000
30761: MUL
30762: ST_TO_ADDR
// end ; unit_building :
30763: GO 30777
30765: LD_INT 3
30767: DOUBLE
30768: EQUAL
30769: IFTRUE 30773
30771: GO 30776
30773: POP
// ; end ;
30774: GO 30777
30776: POP
// for j = 1 to 3 do
30777: LD_ADDR_VAR 0 7
30781: PUSH
30782: DOUBLE
30783: LD_INT 1
30785: DEC
30786: ST_TO_ADDR
30787: LD_INT 3
30789: PUSH
30790: FOR_TO
30791: IFFALSE 30844
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30793: LD_ADDR_VAR 0 5
30797: PUSH
30798: LD_VAR 0 5
30802: PPUSH
30803: LD_VAR 0 7
30807: PPUSH
30808: LD_VAR 0 5
30812: PUSH
30813: LD_VAR 0 7
30817: ARRAY
30818: PUSH
30819: LD_VAR 0 9
30823: PUSH
30824: LD_VAR 0 7
30828: ARRAY
30829: PUSH
30830: LD_VAR 0 10
30834: MUL
30835: PLUS
30836: PPUSH
30837: CALL_OW 1
30841: ST_TO_ADDR
30842: GO 30790
30844: POP
30845: POP
// end ;
30846: GO 29329
30848: POP
30849: POP
// result := Replace ( result , 4 , tmp ) ;
30850: LD_ADDR_VAR 0 5
30854: PUSH
30855: LD_VAR 0 5
30859: PPUSH
30860: LD_INT 4
30862: PPUSH
30863: LD_VAR 0 8
30867: PPUSH
30868: CALL_OW 1
30872: ST_TO_ADDR
// end ;
30873: LD_VAR 0 5
30877: RET
// export function DangerAtRange ( unit , range ) ; begin
30878: LD_INT 0
30880: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30881: LD_ADDR_VAR 0 3
30885: PUSH
30886: LD_VAR 0 1
30890: PPUSH
30891: CALL_OW 255
30895: PPUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 250
30905: PPUSH
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 251
30915: PPUSH
30916: LD_VAR 0 2
30920: PPUSH
30921: CALL 29181 0 4
30925: ST_TO_ADDR
// end ;
30926: LD_VAR 0 3
30930: RET
// export function DangerInArea ( side , area ) ; begin
30931: LD_INT 0
30933: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30934: LD_ADDR_VAR 0 3
30938: PUSH
30939: LD_VAR 0 2
30943: PPUSH
30944: LD_INT 81
30946: PUSH
30947: LD_VAR 0 1
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PPUSH
30956: CALL_OW 70
30960: ST_TO_ADDR
// end ;
30961: LD_VAR 0 3
30965: RET
// export function IsExtension ( b ) ; begin
30966: LD_INT 0
30968: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30969: LD_ADDR_VAR 0 2
30973: PUSH
30974: LD_VAR 0 1
30978: PUSH
30979: LD_INT 23
30981: PUSH
30982: LD_INT 20
30984: PUSH
30985: LD_INT 22
30987: PUSH
30988: LD_INT 17
30990: PUSH
30991: LD_INT 24
30993: PUSH
30994: LD_INT 21
30996: PUSH
30997: LD_INT 19
30999: PUSH
31000: LD_INT 16
31002: PUSH
31003: LD_INT 25
31005: PUSH
31006: LD_INT 18
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: IN
31021: ST_TO_ADDR
// end ;
31022: LD_VAR 0 2
31026: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
31027: LD_INT 0
31029: PPUSH
31030: PPUSH
31031: PPUSH
// result := [ ] ;
31032: LD_ADDR_VAR 0 3
31036: PUSH
31037: EMPTY
31038: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31039: LD_ADDR_VAR 0 4
31043: PUSH
31044: LD_VAR 0 2
31048: PPUSH
31049: LD_INT 21
31051: PUSH
31052: LD_INT 3
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PPUSH
31059: CALL_OW 70
31063: ST_TO_ADDR
// if not tmp then
31064: LD_VAR 0 4
31068: NOT
31069: IFFALSE 31073
// exit ;
31071: GO 31131
// for i in tmp do
31073: LD_ADDR_VAR 0 5
31077: PUSH
31078: LD_VAR 0 4
31082: PUSH
31083: FOR_IN
31084: IFFALSE 31119
// if GetBase ( i ) <> base then
31086: LD_VAR 0 5
31090: PPUSH
31091: CALL_OW 274
31095: PUSH
31096: LD_VAR 0 1
31100: NONEQUAL
31101: IFFALSE 31117
// ComLinkToBase ( base , i ) ;
31103: LD_VAR 0 1
31107: PPUSH
31108: LD_VAR 0 5
31112: PPUSH
31113: CALL_OW 169
31117: GO 31083
31119: POP
31120: POP
// result := tmp ;
31121: LD_ADDR_VAR 0 3
31125: PUSH
31126: LD_VAR 0 4
31130: ST_TO_ADDR
// end ;
31131: LD_VAR 0 3
31135: RET
// export function ComComplete ( unit , b ) ; var i ; begin
31136: LD_INT 0
31138: PPUSH
31139: PPUSH
// if BuildingStatus ( b ) = bs_build then
31140: LD_VAR 0 2
31144: PPUSH
31145: CALL_OW 461
31149: PUSH
31150: LD_INT 1
31152: EQUAL
31153: IFFALSE 31213
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31155: LD_VAR 0 1
31159: PPUSH
31160: LD_STRING h
31162: PUSH
31163: LD_VAR 0 2
31167: PPUSH
31168: CALL_OW 250
31172: PUSH
31173: LD_VAR 0 2
31177: PPUSH
31178: CALL_OW 251
31182: PUSH
31183: LD_VAR 0 2
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: PUSH
31206: EMPTY
31207: LIST
31208: PPUSH
31209: CALL_OW 446
// end ;
31213: LD_VAR 0 3
31217: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31218: LD_INT 0
31220: PPUSH
31221: PPUSH
31222: PPUSH
31223: PPUSH
31224: PPUSH
31225: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31226: LD_VAR 0 1
31230: NOT
31231: PUSH
31232: LD_VAR 0 1
31236: PPUSH
31237: CALL_OW 263
31241: PUSH
31242: LD_INT 2
31244: EQUAL
31245: NOT
31246: OR
31247: IFFALSE 31251
// exit ;
31249: GO 31567
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31251: LD_ADDR_VAR 0 6
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_VAR 0 1
31263: PPUSH
31264: CALL_OW 255
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: LD_INT 30
31278: PUSH
31279: LD_INT 36
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 34
31288: PUSH
31289: LD_INT 31
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PPUSH
31305: CALL_OW 69
31309: ST_TO_ADDR
// if not tmp then
31310: LD_VAR 0 6
31314: NOT
31315: IFFALSE 31319
// exit ;
31317: GO 31567
// result := [ ] ;
31319: LD_ADDR_VAR 0 2
31323: PUSH
31324: EMPTY
31325: ST_TO_ADDR
// for i in tmp do
31326: LD_ADDR_VAR 0 3
31330: PUSH
31331: LD_VAR 0 6
31335: PUSH
31336: FOR_IN
31337: IFFALSE 31408
// begin t := UnitsInside ( i ) ;
31339: LD_ADDR_VAR 0 4
31343: PUSH
31344: LD_VAR 0 3
31348: PPUSH
31349: CALL_OW 313
31353: ST_TO_ADDR
// if t then
31354: LD_VAR 0 4
31358: IFFALSE 31406
// for j in t do
31360: LD_ADDR_VAR 0 7
31364: PUSH
31365: LD_VAR 0 4
31369: PUSH
31370: FOR_IN
31371: IFFALSE 31404
// result := Insert ( result , result + 1 , j ) ;
31373: LD_ADDR_VAR 0 2
31377: PUSH
31378: LD_VAR 0 2
31382: PPUSH
31383: LD_VAR 0 2
31387: PUSH
31388: LD_INT 1
31390: PLUS
31391: PPUSH
31392: LD_VAR 0 7
31396: PPUSH
31397: CALL_OW 2
31401: ST_TO_ADDR
31402: GO 31370
31404: POP
31405: POP
// end ;
31406: GO 31336
31408: POP
31409: POP
// if not result then
31410: LD_VAR 0 2
31414: NOT
31415: IFFALSE 31419
// exit ;
31417: GO 31567
// mech := result [ 1 ] ;
31419: LD_ADDR_VAR 0 5
31423: PUSH
31424: LD_VAR 0 2
31428: PUSH
31429: LD_INT 1
31431: ARRAY
31432: ST_TO_ADDR
// if result > 1 then
31433: LD_VAR 0 2
31437: PUSH
31438: LD_INT 1
31440: GREATER
31441: IFFALSE 31553
// for i = 2 to result do
31443: LD_ADDR_VAR 0 3
31447: PUSH
31448: DOUBLE
31449: LD_INT 2
31451: DEC
31452: ST_TO_ADDR
31453: LD_VAR 0 2
31457: PUSH
31458: FOR_TO
31459: IFFALSE 31551
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31461: LD_ADDR_VAR 0 4
31465: PUSH
31466: LD_VAR 0 2
31470: PUSH
31471: LD_VAR 0 3
31475: ARRAY
31476: PPUSH
31477: LD_INT 3
31479: PPUSH
31480: CALL_OW 259
31484: PUSH
31485: LD_VAR 0 2
31489: PUSH
31490: LD_VAR 0 3
31494: ARRAY
31495: PPUSH
31496: CALL_OW 432
31500: MINUS
31501: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31502: LD_VAR 0 4
31506: PUSH
31507: LD_VAR 0 5
31511: PPUSH
31512: LD_INT 3
31514: PPUSH
31515: CALL_OW 259
31519: PUSH
31520: LD_VAR 0 5
31524: PPUSH
31525: CALL_OW 432
31529: MINUS
31530: GREATEREQUAL
31531: IFFALSE 31549
// mech := result [ i ] ;
31533: LD_ADDR_VAR 0 5
31537: PUSH
31538: LD_VAR 0 2
31542: PUSH
31543: LD_VAR 0 3
31547: ARRAY
31548: ST_TO_ADDR
// end ;
31549: GO 31458
31551: POP
31552: POP
// ComLinkTo ( vehicle , mech ) ;
31553: LD_VAR 0 1
31557: PPUSH
31558: LD_VAR 0 5
31562: PPUSH
31563: CALL_OW 135
// end ;
31567: LD_VAR 0 2
31571: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31572: LD_INT 0
31574: PPUSH
31575: PPUSH
31576: PPUSH
31577: PPUSH
31578: PPUSH
31579: PPUSH
31580: PPUSH
31581: PPUSH
31582: PPUSH
31583: PPUSH
31584: PPUSH
31585: PPUSH
31586: PPUSH
// result := [ ] ;
31587: LD_ADDR_VAR 0 7
31591: PUSH
31592: EMPTY
31593: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31594: LD_VAR 0 1
31598: PPUSH
31599: CALL_OW 266
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: IN
31614: NOT
31615: IFFALSE 31619
// exit ;
31617: GO 33250
// if name then
31619: LD_VAR 0 3
31623: IFFALSE 31639
// SetBName ( base_dep , name ) ;
31625: LD_VAR 0 1
31629: PPUSH
31630: LD_VAR 0 3
31634: PPUSH
31635: CALL_OW 500
// base := GetBase ( base_dep ) ;
31639: LD_ADDR_VAR 0 15
31643: PUSH
31644: LD_VAR 0 1
31648: PPUSH
31649: CALL_OW 274
31653: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31654: LD_ADDR_VAR 0 16
31658: PUSH
31659: LD_VAR 0 1
31663: PPUSH
31664: CALL_OW 255
31668: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31669: LD_ADDR_VAR 0 17
31673: PUSH
31674: LD_VAR 0 1
31678: PPUSH
31679: CALL_OW 248
31683: ST_TO_ADDR
// if sources then
31684: LD_VAR 0 5
31688: IFFALSE 31735
// for i = 1 to 3 do
31690: LD_ADDR_VAR 0 8
31694: PUSH
31695: DOUBLE
31696: LD_INT 1
31698: DEC
31699: ST_TO_ADDR
31700: LD_INT 3
31702: PUSH
31703: FOR_TO
31704: IFFALSE 31733
// AddResourceType ( base , i , sources [ i ] ) ;
31706: LD_VAR 0 15
31710: PPUSH
31711: LD_VAR 0 8
31715: PPUSH
31716: LD_VAR 0 5
31720: PUSH
31721: LD_VAR 0 8
31725: ARRAY
31726: PPUSH
31727: CALL_OW 276
31731: GO 31703
31733: POP
31734: POP
// buildings := GetBaseBuildings ( base , area ) ;
31735: LD_ADDR_VAR 0 18
31739: PUSH
31740: LD_VAR 0 15
31744: PPUSH
31745: LD_VAR 0 2
31749: PPUSH
31750: CALL 31027 0 2
31754: ST_TO_ADDR
// InitHc ;
31755: CALL_OW 19
// InitUc ;
31759: CALL_OW 18
// uc_side := side ;
31763: LD_ADDR_OWVAR 20
31767: PUSH
31768: LD_VAR 0 16
31772: ST_TO_ADDR
// uc_nation := nation ;
31773: LD_ADDR_OWVAR 21
31777: PUSH
31778: LD_VAR 0 17
31782: ST_TO_ADDR
// if buildings then
31783: LD_VAR 0 18
31787: IFFALSE 33109
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31789: LD_ADDR_VAR 0 19
31793: PUSH
31794: LD_VAR 0 18
31798: PPUSH
31799: LD_INT 2
31801: PUSH
31802: LD_INT 30
31804: PUSH
31805: LD_INT 29
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 30
31814: PUSH
31815: LD_INT 30
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: PPUSH
31827: CALL_OW 72
31831: ST_TO_ADDR
// if tmp then
31832: LD_VAR 0 19
31836: IFFALSE 31884
// for i in tmp do
31838: LD_ADDR_VAR 0 8
31842: PUSH
31843: LD_VAR 0 19
31847: PUSH
31848: FOR_IN
31849: IFFALSE 31882
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31851: LD_VAR 0 8
31855: PPUSH
31856: CALL_OW 250
31860: PPUSH
31861: LD_VAR 0 8
31865: PPUSH
31866: CALL_OW 251
31870: PPUSH
31871: LD_VAR 0 16
31875: PPUSH
31876: CALL_OW 441
31880: GO 31848
31882: POP
31883: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31884: LD_VAR 0 18
31888: PPUSH
31889: LD_INT 2
31891: PUSH
31892: LD_INT 30
31894: PUSH
31895: LD_INT 32
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 30
31904: PUSH
31905: LD_INT 33
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: LIST
31916: PPUSH
31917: CALL_OW 72
31921: IFFALSE 32009
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31923: LD_ADDR_VAR 0 8
31927: PUSH
31928: LD_VAR 0 18
31932: PPUSH
31933: LD_INT 2
31935: PUSH
31936: LD_INT 30
31938: PUSH
31939: LD_INT 32
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 30
31948: PUSH
31949: LD_INT 33
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: LIST
31960: PPUSH
31961: CALL_OW 72
31965: PUSH
31966: FOR_IN
31967: IFFALSE 32007
// begin if not GetBWeapon ( i ) then
31969: LD_VAR 0 8
31973: PPUSH
31974: CALL_OW 269
31978: NOT
31979: IFFALSE 32005
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31981: LD_VAR 0 8
31985: PPUSH
31986: LD_VAR 0 8
31990: PPUSH
31991: LD_VAR 0 2
31995: PPUSH
31996: CALL 33255 0 2
32000: PPUSH
32001: CALL_OW 431
// end ;
32005: GO 31966
32007: POP
32008: POP
// end ; for i = 1 to personel do
32009: LD_ADDR_VAR 0 8
32013: PUSH
32014: DOUBLE
32015: LD_INT 1
32017: DEC
32018: ST_TO_ADDR
32019: LD_VAR 0 6
32023: PUSH
32024: FOR_TO
32025: IFFALSE 33089
// begin if i > 4 then
32027: LD_VAR 0 8
32031: PUSH
32032: LD_INT 4
32034: GREATER
32035: IFFALSE 32039
// break ;
32037: GO 33089
// case i of 1 :
32039: LD_VAR 0 8
32043: PUSH
32044: LD_INT 1
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32132
32052: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32053: LD_ADDR_VAR 0 12
32057: PUSH
32058: LD_VAR 0 18
32062: PPUSH
32063: LD_INT 22
32065: PUSH
32066: LD_VAR 0 16
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 58
32077: PUSH
32078: EMPTY
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 30
32086: PUSH
32087: LD_INT 32
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 30
32096: PUSH
32097: LD_INT 4
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 30
32106: PUSH
32107: LD_INT 5
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: PPUSH
32125: CALL_OW 72
32129: ST_TO_ADDR
32130: GO 32354
32132: LD_INT 2
32134: DOUBLE
32135: EQUAL
32136: IFTRUE 32140
32138: GO 32202
32140: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32141: LD_ADDR_VAR 0 12
32145: PUSH
32146: LD_VAR 0 18
32150: PPUSH
32151: LD_INT 22
32153: PUSH
32154: LD_VAR 0 16
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: LD_INT 30
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 30
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: LIST
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PPUSH
32195: CALL_OW 72
32199: ST_TO_ADDR
32200: GO 32354
32202: LD_INT 3
32204: DOUBLE
32205: EQUAL
32206: IFTRUE 32210
32208: GO 32272
32210: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32211: LD_ADDR_VAR 0 12
32215: PUSH
32216: LD_VAR 0 18
32220: PPUSH
32221: LD_INT 22
32223: PUSH
32224: LD_VAR 0 16
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: LD_INT 30
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 30
32248: PUSH
32249: LD_INT 3
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PPUSH
32265: CALL_OW 72
32269: ST_TO_ADDR
32270: GO 32354
32272: LD_INT 4
32274: DOUBLE
32275: EQUAL
32276: IFTRUE 32280
32278: GO 32353
32280: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32281: LD_ADDR_VAR 0 12
32285: PUSH
32286: LD_VAR 0 18
32290: PPUSH
32291: LD_INT 22
32293: PUSH
32294: LD_VAR 0 16
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: LD_INT 30
32308: PUSH
32309: LD_INT 6
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 30
32318: PUSH
32319: LD_INT 7
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 30
32328: PUSH
32329: LD_INT 8
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PPUSH
32346: CALL_OW 72
32350: ST_TO_ADDR
32351: GO 32354
32353: POP
// if i = 1 then
32354: LD_VAR 0 8
32358: PUSH
32359: LD_INT 1
32361: EQUAL
32362: IFFALSE 32473
// begin tmp := [ ] ;
32364: LD_ADDR_VAR 0 19
32368: PUSH
32369: EMPTY
32370: ST_TO_ADDR
// for j in f do
32371: LD_ADDR_VAR 0 9
32375: PUSH
32376: LD_VAR 0 12
32380: PUSH
32381: FOR_IN
32382: IFFALSE 32455
// if GetBType ( j ) = b_bunker then
32384: LD_VAR 0 9
32388: PPUSH
32389: CALL_OW 266
32393: PUSH
32394: LD_INT 32
32396: EQUAL
32397: IFFALSE 32424
// tmp := Insert ( tmp , 1 , j ) else
32399: LD_ADDR_VAR 0 19
32403: PUSH
32404: LD_VAR 0 19
32408: PPUSH
32409: LD_INT 1
32411: PPUSH
32412: LD_VAR 0 9
32416: PPUSH
32417: CALL_OW 2
32421: ST_TO_ADDR
32422: GO 32453
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32424: LD_ADDR_VAR 0 19
32428: PUSH
32429: LD_VAR 0 19
32433: PPUSH
32434: LD_VAR 0 19
32438: PUSH
32439: LD_INT 1
32441: PLUS
32442: PPUSH
32443: LD_VAR 0 9
32447: PPUSH
32448: CALL_OW 2
32452: ST_TO_ADDR
32453: GO 32381
32455: POP
32456: POP
// if tmp then
32457: LD_VAR 0 19
32461: IFFALSE 32473
// f := tmp ;
32463: LD_ADDR_VAR 0 12
32467: PUSH
32468: LD_VAR 0 19
32472: ST_TO_ADDR
// end ; x := personel [ i ] ;
32473: LD_ADDR_VAR 0 13
32477: PUSH
32478: LD_VAR 0 6
32482: PUSH
32483: LD_VAR 0 8
32487: ARRAY
32488: ST_TO_ADDR
// if x = - 1 then
32489: LD_VAR 0 13
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: EQUAL
32498: IFFALSE 32707
// begin for j in f do
32500: LD_ADDR_VAR 0 9
32504: PUSH
32505: LD_VAR 0 12
32509: PUSH
32510: FOR_IN
32511: IFFALSE 32703
// repeat InitHc ;
32513: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32517: LD_VAR 0 9
32521: PPUSH
32522: CALL_OW 266
32526: PUSH
32527: LD_INT 5
32529: EQUAL
32530: IFFALSE 32600
// begin if UnitsInside ( j ) < 3 then
32532: LD_VAR 0 9
32536: PPUSH
32537: CALL_OW 313
32541: PUSH
32542: LD_INT 3
32544: LESS
32545: IFFALSE 32581
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32547: LD_INT 0
32549: PPUSH
32550: LD_INT 5
32552: PUSH
32553: LD_INT 8
32555: PUSH
32556: LD_INT 9
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: LIST
32563: PUSH
32564: LD_VAR 0 17
32568: ARRAY
32569: PPUSH
32570: LD_VAR 0 4
32574: PPUSH
32575: CALL_OW 380
32579: GO 32598
// PrepareHuman ( false , i , skill ) ;
32581: LD_INT 0
32583: PPUSH
32584: LD_VAR 0 8
32588: PPUSH
32589: LD_VAR 0 4
32593: PPUSH
32594: CALL_OW 380
// end else
32598: GO 32617
// PrepareHuman ( false , i , skill ) ;
32600: LD_INT 0
32602: PPUSH
32603: LD_VAR 0 8
32607: PPUSH
32608: LD_VAR 0 4
32612: PPUSH
32613: CALL_OW 380
// un := CreateHuman ;
32617: LD_ADDR_VAR 0 14
32621: PUSH
32622: CALL_OW 44
32626: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32627: LD_ADDR_VAR 0 7
32631: PUSH
32632: LD_VAR 0 7
32636: PPUSH
32637: LD_INT 1
32639: PPUSH
32640: LD_VAR 0 14
32644: PPUSH
32645: CALL_OW 2
32649: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32650: LD_VAR 0 14
32654: PPUSH
32655: LD_VAR 0 9
32659: PPUSH
32660: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32664: LD_VAR 0 9
32668: PPUSH
32669: CALL_OW 313
32673: PUSH
32674: LD_INT 6
32676: EQUAL
32677: PUSH
32678: LD_VAR 0 9
32682: PPUSH
32683: CALL_OW 266
32687: PUSH
32688: LD_INT 32
32690: PUSH
32691: LD_INT 31
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: IN
32698: OR
32699: IFFALSE 32513
32701: GO 32510
32703: POP
32704: POP
// end else
32705: GO 33087
// for j = 1 to x do
32707: LD_ADDR_VAR 0 9
32711: PUSH
32712: DOUBLE
32713: LD_INT 1
32715: DEC
32716: ST_TO_ADDR
32717: LD_VAR 0 13
32721: PUSH
32722: FOR_TO
32723: IFFALSE 33085
// begin InitHc ;
32725: CALL_OW 19
// if not f then
32729: LD_VAR 0 12
32733: NOT
32734: IFFALSE 32823
// begin PrepareHuman ( false , i , skill ) ;
32736: LD_INT 0
32738: PPUSH
32739: LD_VAR 0 8
32743: PPUSH
32744: LD_VAR 0 4
32748: PPUSH
32749: CALL_OW 380
// un := CreateHuman ;
32753: LD_ADDR_VAR 0 14
32757: PUSH
32758: CALL_OW 44
32762: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32763: LD_ADDR_VAR 0 7
32767: PUSH
32768: LD_VAR 0 7
32772: PPUSH
32773: LD_INT 1
32775: PPUSH
32776: LD_VAR 0 14
32780: PPUSH
32781: CALL_OW 2
32785: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32786: LD_VAR 0 14
32790: PPUSH
32791: LD_VAR 0 1
32795: PPUSH
32796: CALL_OW 250
32800: PPUSH
32801: LD_VAR 0 1
32805: PPUSH
32806: CALL_OW 251
32810: PPUSH
32811: LD_INT 10
32813: PPUSH
32814: LD_INT 0
32816: PPUSH
32817: CALL_OW 50
// continue ;
32821: GO 32722
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32823: LD_VAR 0 12
32827: PUSH
32828: LD_INT 1
32830: ARRAY
32831: PPUSH
32832: CALL_OW 313
32836: PUSH
32837: LD_VAR 0 12
32841: PUSH
32842: LD_INT 1
32844: ARRAY
32845: PPUSH
32846: CALL_OW 266
32850: PUSH
32851: LD_INT 32
32853: PUSH
32854: LD_INT 31
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: IN
32861: AND
32862: PUSH
32863: LD_VAR 0 12
32867: PUSH
32868: LD_INT 1
32870: ARRAY
32871: PPUSH
32872: CALL_OW 313
32876: PUSH
32877: LD_INT 6
32879: EQUAL
32880: OR
32881: IFFALSE 32901
// f := Delete ( f , 1 ) ;
32883: LD_ADDR_VAR 0 12
32887: PUSH
32888: LD_VAR 0 12
32892: PPUSH
32893: LD_INT 1
32895: PPUSH
32896: CALL_OW 3
32900: ST_TO_ADDR
// if not f then
32901: LD_VAR 0 12
32905: NOT
32906: IFFALSE 32924
// begin x := x + 2 ;
32908: LD_ADDR_VAR 0 13
32912: PUSH
32913: LD_VAR 0 13
32917: PUSH
32918: LD_INT 2
32920: PLUS
32921: ST_TO_ADDR
// continue ;
32922: GO 32722
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32924: LD_VAR 0 12
32928: PUSH
32929: LD_INT 1
32931: ARRAY
32932: PPUSH
32933: CALL_OW 266
32937: PUSH
32938: LD_INT 5
32940: EQUAL
32941: IFFALSE 33015
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32943: LD_VAR 0 12
32947: PUSH
32948: LD_INT 1
32950: ARRAY
32951: PPUSH
32952: CALL_OW 313
32956: PUSH
32957: LD_INT 3
32959: LESS
32960: IFFALSE 32996
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32962: LD_INT 0
32964: PPUSH
32965: LD_INT 5
32967: PUSH
32968: LD_INT 8
32970: PUSH
32971: LD_INT 9
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: LIST
32978: PUSH
32979: LD_VAR 0 17
32983: ARRAY
32984: PPUSH
32985: LD_VAR 0 4
32989: PPUSH
32990: CALL_OW 380
32994: GO 33013
// PrepareHuman ( false , i , skill ) ;
32996: LD_INT 0
32998: PPUSH
32999: LD_VAR 0 8
33003: PPUSH
33004: LD_VAR 0 4
33008: PPUSH
33009: CALL_OW 380
// end else
33013: GO 33032
// PrepareHuman ( false , i , skill ) ;
33015: LD_INT 0
33017: PPUSH
33018: LD_VAR 0 8
33022: PPUSH
33023: LD_VAR 0 4
33027: PPUSH
33028: CALL_OW 380
// un := CreateHuman ;
33032: LD_ADDR_VAR 0 14
33036: PUSH
33037: CALL_OW 44
33041: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33042: LD_ADDR_VAR 0 7
33046: PUSH
33047: LD_VAR 0 7
33051: PPUSH
33052: LD_INT 1
33054: PPUSH
33055: LD_VAR 0 14
33059: PPUSH
33060: CALL_OW 2
33064: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33065: LD_VAR 0 14
33069: PPUSH
33070: LD_VAR 0 12
33074: PUSH
33075: LD_INT 1
33077: ARRAY
33078: PPUSH
33079: CALL_OW 52
// end ;
33083: GO 32722
33085: POP
33086: POP
// end ;
33087: GO 32024
33089: POP
33090: POP
// result := result ^ buildings ;
33091: LD_ADDR_VAR 0 7
33095: PUSH
33096: LD_VAR 0 7
33100: PUSH
33101: LD_VAR 0 18
33105: ADD
33106: ST_TO_ADDR
// end else
33107: GO 33250
// begin for i = 1 to personel do
33109: LD_ADDR_VAR 0 8
33113: PUSH
33114: DOUBLE
33115: LD_INT 1
33117: DEC
33118: ST_TO_ADDR
33119: LD_VAR 0 6
33123: PUSH
33124: FOR_TO
33125: IFFALSE 33248
// begin if i > 4 then
33127: LD_VAR 0 8
33131: PUSH
33132: LD_INT 4
33134: GREATER
33135: IFFALSE 33139
// break ;
33137: GO 33248
// x := personel [ i ] ;
33139: LD_ADDR_VAR 0 13
33143: PUSH
33144: LD_VAR 0 6
33148: PUSH
33149: LD_VAR 0 8
33153: ARRAY
33154: ST_TO_ADDR
// if x = - 1 then
33155: LD_VAR 0 13
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: EQUAL
33164: IFFALSE 33168
// continue ;
33166: GO 33124
// PrepareHuman ( false , i , skill ) ;
33168: LD_INT 0
33170: PPUSH
33171: LD_VAR 0 8
33175: PPUSH
33176: LD_VAR 0 4
33180: PPUSH
33181: CALL_OW 380
// un := CreateHuman ;
33185: LD_ADDR_VAR 0 14
33189: PUSH
33190: CALL_OW 44
33194: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33195: LD_VAR 0 14
33199: PPUSH
33200: LD_VAR 0 1
33204: PPUSH
33205: CALL_OW 250
33209: PPUSH
33210: LD_VAR 0 1
33214: PPUSH
33215: CALL_OW 251
33219: PPUSH
33220: LD_INT 10
33222: PPUSH
33223: LD_INT 0
33225: PPUSH
33226: CALL_OW 50
// result := result ^ un ;
33230: LD_ADDR_VAR 0 7
33234: PUSH
33235: LD_VAR 0 7
33239: PUSH
33240: LD_VAR 0 14
33244: ADD
33245: ST_TO_ADDR
// end ;
33246: GO 33124
33248: POP
33249: POP
// end ; end ;
33250: LD_VAR 0 7
33254: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33255: LD_INT 0
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
33261: PPUSH
33262: PPUSH
33263: PPUSH
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
// result := false ;
33273: LD_ADDR_VAR 0 3
33277: PUSH
33278: LD_INT 0
33280: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33281: LD_VAR 0 1
33285: NOT
33286: PUSH
33287: LD_VAR 0 1
33291: PPUSH
33292: CALL_OW 266
33296: PUSH
33297: LD_INT 32
33299: PUSH
33300: LD_INT 33
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: IN
33307: NOT
33308: OR
33309: IFFALSE 33313
// exit ;
33311: GO 34449
// nat := GetNation ( tower ) ;
33313: LD_ADDR_VAR 0 12
33317: PUSH
33318: LD_VAR 0 1
33322: PPUSH
33323: CALL_OW 248
33327: ST_TO_ADDR
// side := GetSide ( tower ) ;
33328: LD_ADDR_VAR 0 16
33332: PUSH
33333: LD_VAR 0 1
33337: PPUSH
33338: CALL_OW 255
33342: ST_TO_ADDR
// x := GetX ( tower ) ;
33343: LD_ADDR_VAR 0 10
33347: PUSH
33348: LD_VAR 0 1
33352: PPUSH
33353: CALL_OW 250
33357: ST_TO_ADDR
// y := GetY ( tower ) ;
33358: LD_ADDR_VAR 0 11
33362: PUSH
33363: LD_VAR 0 1
33367: PPUSH
33368: CALL_OW 251
33372: ST_TO_ADDR
// if not x or not y then
33373: LD_VAR 0 10
33377: NOT
33378: PUSH
33379: LD_VAR 0 11
33383: NOT
33384: OR
33385: IFFALSE 33389
// exit ;
33387: GO 34449
// weapon := 0 ;
33389: LD_ADDR_VAR 0 18
33393: PUSH
33394: LD_INT 0
33396: ST_TO_ADDR
// fac_list := [ ] ;
33397: LD_ADDR_VAR 0 17
33401: PUSH
33402: EMPTY
33403: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
33404: LD_ADDR_VAR 0 6
33408: PUSH
33409: LD_VAR 0 1
33413: PPUSH
33414: CALL_OW 274
33418: PPUSH
33419: LD_VAR 0 2
33423: PPUSH
33424: CALL 31027 0 2
33428: PPUSH
33429: LD_INT 30
33431: PUSH
33432: LD_INT 3
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 72
33443: ST_TO_ADDR
// if not factories then
33444: LD_VAR 0 6
33448: NOT
33449: IFFALSE 33453
// exit ;
33451: GO 34449
// for i in factories do
33453: LD_ADDR_VAR 0 8
33457: PUSH
33458: LD_VAR 0 6
33462: PUSH
33463: FOR_IN
33464: IFFALSE 33489
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33466: LD_ADDR_VAR 0 17
33470: PUSH
33471: LD_VAR 0 17
33475: PUSH
33476: LD_VAR 0 8
33480: PPUSH
33481: CALL_OW 478
33485: UNION
33486: ST_TO_ADDR
33487: GO 33463
33489: POP
33490: POP
// if not fac_list then
33491: LD_VAR 0 17
33495: NOT
33496: IFFALSE 33500
// exit ;
33498: GO 34449
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33500: LD_ADDR_VAR 0 5
33504: PUSH
33505: LD_INT 4
33507: PUSH
33508: LD_INT 5
33510: PUSH
33511: LD_INT 9
33513: PUSH
33514: LD_INT 10
33516: PUSH
33517: LD_INT 6
33519: PUSH
33520: LD_INT 7
33522: PUSH
33523: LD_INT 11
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 27
33537: PUSH
33538: LD_INT 28
33540: PUSH
33541: LD_INT 26
33543: PUSH
33544: LD_INT 30
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 43
33555: PUSH
33556: LD_INT 44
33558: PUSH
33559: LD_INT 46
33561: PUSH
33562: LD_INT 45
33564: PUSH
33565: LD_INT 47
33567: PUSH
33568: LD_INT 49
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: PUSH
33584: LD_VAR 0 12
33588: ARRAY
33589: ST_TO_ADDR
// for i in list do
33590: LD_ADDR_VAR 0 8
33594: PUSH
33595: LD_VAR 0 5
33599: PUSH
33600: FOR_IN
33601: IFFALSE 33634
// if not i in fac_list then
33603: LD_VAR 0 8
33607: PUSH
33608: LD_VAR 0 17
33612: IN
33613: NOT
33614: IFFALSE 33632
// list := list diff i ;
33616: LD_ADDR_VAR 0 5
33620: PUSH
33621: LD_VAR 0 5
33625: PUSH
33626: LD_VAR 0 8
33630: DIFF
33631: ST_TO_ADDR
33632: GO 33600
33634: POP
33635: POP
// if not list then
33636: LD_VAR 0 5
33640: NOT
33641: IFFALSE 33645
// exit ;
33643: GO 34449
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33645: LD_VAR 0 12
33649: PUSH
33650: LD_INT 3
33652: EQUAL
33653: PUSH
33654: LD_INT 49
33656: PUSH
33657: LD_VAR 0 5
33661: IN
33662: AND
33663: PUSH
33664: LD_INT 31
33666: PPUSH
33667: LD_VAR 0 16
33671: PPUSH
33672: CALL_OW 321
33676: PUSH
33677: LD_INT 2
33679: EQUAL
33680: AND
33681: IFFALSE 33741
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33683: LD_INT 22
33685: PUSH
33686: LD_VAR 0 16
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 35
33697: PUSH
33698: LD_INT 49
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 91
33707: PUSH
33708: LD_VAR 0 1
33712: PUSH
33713: LD_INT 10
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: PPUSH
33726: CALL_OW 69
33730: NOT
33731: IFFALSE 33741
// weapon := ru_time_lapser ;
33733: LD_ADDR_VAR 0 18
33737: PUSH
33738: LD_INT 49
33740: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33741: LD_VAR 0 12
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: IN
33756: PUSH
33757: LD_INT 11
33759: PUSH
33760: LD_VAR 0 5
33764: IN
33765: PUSH
33766: LD_INT 30
33768: PUSH
33769: LD_VAR 0 5
33773: IN
33774: OR
33775: AND
33776: PUSH
33777: LD_INT 6
33779: PPUSH
33780: LD_VAR 0 16
33784: PPUSH
33785: CALL_OW 321
33789: PUSH
33790: LD_INT 2
33792: EQUAL
33793: AND
33794: IFFALSE 33959
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33796: LD_INT 22
33798: PUSH
33799: LD_VAR 0 16
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: LD_INT 35
33813: PUSH
33814: LD_INT 11
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 35
33823: PUSH
33824: LD_INT 30
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 91
33838: PUSH
33839: LD_VAR 0 1
33843: PUSH
33844: LD_INT 18
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: PPUSH
33857: CALL_OW 69
33861: NOT
33862: PUSH
33863: LD_INT 22
33865: PUSH
33866: LD_VAR 0 16
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: LD_INT 30
33880: PUSH
33881: LD_INT 32
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 30
33890: PUSH
33891: LD_INT 33
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 91
33905: PUSH
33906: LD_VAR 0 1
33910: PUSH
33911: LD_INT 12
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: PUSH
33924: EMPTY
33925: LIST
33926: PPUSH
33927: CALL_OW 69
33931: PUSH
33932: LD_INT 2
33934: GREATER
33935: AND
33936: IFFALSE 33959
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33938: LD_ADDR_VAR 0 18
33942: PUSH
33943: LD_INT 11
33945: PUSH
33946: LD_INT 30
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_VAR 0 12
33957: ARRAY
33958: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33959: LD_VAR 0 18
33963: NOT
33964: PUSH
33965: LD_INT 40
33967: PPUSH
33968: LD_VAR 0 16
33972: PPUSH
33973: CALL_OW 321
33977: PUSH
33978: LD_INT 2
33980: EQUAL
33981: AND
33982: PUSH
33983: LD_INT 7
33985: PUSH
33986: LD_VAR 0 5
33990: IN
33991: PUSH
33992: LD_INT 28
33994: PUSH
33995: LD_VAR 0 5
33999: IN
34000: OR
34001: PUSH
34002: LD_INT 45
34004: PUSH
34005: LD_VAR 0 5
34009: IN
34010: OR
34011: AND
34012: IFFALSE 34266
// begin hex := GetHexInfo ( x , y ) ;
34014: LD_ADDR_VAR 0 4
34018: PUSH
34019: LD_VAR 0 10
34023: PPUSH
34024: LD_VAR 0 11
34028: PPUSH
34029: CALL_OW 546
34033: ST_TO_ADDR
// if hex [ 1 ] then
34034: LD_VAR 0 4
34038: PUSH
34039: LD_INT 1
34041: ARRAY
34042: IFFALSE 34046
// exit ;
34044: GO 34449
// height := hex [ 2 ] ;
34046: LD_ADDR_VAR 0 15
34050: PUSH
34051: LD_VAR 0 4
34055: PUSH
34056: LD_INT 2
34058: ARRAY
34059: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34060: LD_ADDR_VAR 0 14
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: LD_INT 5
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: ST_TO_ADDR
// for i in tmp do
34083: LD_ADDR_VAR 0 8
34087: PUSH
34088: LD_VAR 0 14
34092: PUSH
34093: FOR_IN
34094: IFFALSE 34264
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34096: LD_ADDR_VAR 0 9
34100: PUSH
34101: LD_VAR 0 10
34105: PPUSH
34106: LD_VAR 0 8
34110: PPUSH
34111: LD_INT 5
34113: PPUSH
34114: CALL_OW 272
34118: PUSH
34119: LD_VAR 0 11
34123: PPUSH
34124: LD_VAR 0 8
34128: PPUSH
34129: LD_INT 5
34131: PPUSH
34132: CALL_OW 273
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34141: LD_VAR 0 9
34145: PUSH
34146: LD_INT 1
34148: ARRAY
34149: PPUSH
34150: LD_VAR 0 9
34154: PUSH
34155: LD_INT 2
34157: ARRAY
34158: PPUSH
34159: CALL_OW 488
34163: IFFALSE 34262
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34165: LD_ADDR_VAR 0 4
34169: PUSH
34170: LD_VAR 0 9
34174: PUSH
34175: LD_INT 1
34177: ARRAY
34178: PPUSH
34179: LD_VAR 0 9
34183: PUSH
34184: LD_INT 2
34186: ARRAY
34187: PPUSH
34188: CALL_OW 546
34192: ST_TO_ADDR
// if hex [ 1 ] then
34193: LD_VAR 0 4
34197: PUSH
34198: LD_INT 1
34200: ARRAY
34201: IFFALSE 34205
// continue ;
34203: GO 34093
// h := hex [ 2 ] ;
34205: LD_ADDR_VAR 0 13
34209: PUSH
34210: LD_VAR 0 4
34214: PUSH
34215: LD_INT 2
34217: ARRAY
34218: ST_TO_ADDR
// if h + 7 < height then
34219: LD_VAR 0 13
34223: PUSH
34224: LD_INT 7
34226: PLUS
34227: PUSH
34228: LD_VAR 0 15
34232: LESS
34233: IFFALSE 34262
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34235: LD_ADDR_VAR 0 18
34239: PUSH
34240: LD_INT 7
34242: PUSH
34243: LD_INT 28
34245: PUSH
34246: LD_INT 45
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: LIST
34253: PUSH
34254: LD_VAR 0 12
34258: ARRAY
34259: ST_TO_ADDR
// break ;
34260: GO 34264
// end ; end ; end ;
34262: GO 34093
34264: POP
34265: POP
// end ; if not weapon then
34266: LD_VAR 0 18
34270: NOT
34271: IFFALSE 34331
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34273: LD_ADDR_VAR 0 5
34277: PUSH
34278: LD_VAR 0 5
34282: PUSH
34283: LD_INT 11
34285: PUSH
34286: LD_INT 30
34288: PUSH
34289: LD_INT 49
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: DIFF
34297: ST_TO_ADDR
// if not list then
34298: LD_VAR 0 5
34302: NOT
34303: IFFALSE 34307
// exit ;
34305: GO 34449
// weapon := list [ rand ( 1 , list ) ] ;
34307: LD_ADDR_VAR 0 18
34311: PUSH
34312: LD_VAR 0 5
34316: PUSH
34317: LD_INT 1
34319: PPUSH
34320: LD_VAR 0 5
34324: PPUSH
34325: CALL_OW 12
34329: ARRAY
34330: ST_TO_ADDR
// end ; if weapon then
34331: LD_VAR 0 18
34335: IFFALSE 34449
// begin tmp := CostOfWeapon ( weapon ) ;
34337: LD_ADDR_VAR 0 14
34341: PUSH
34342: LD_VAR 0 18
34346: PPUSH
34347: CALL_OW 451
34351: ST_TO_ADDR
// j := GetBase ( tower ) ;
34352: LD_ADDR_VAR 0 9
34356: PUSH
34357: LD_VAR 0 1
34361: PPUSH
34362: CALL_OW 274
34366: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34367: LD_VAR 0 9
34371: PPUSH
34372: LD_INT 1
34374: PPUSH
34375: CALL_OW 275
34379: PUSH
34380: LD_VAR 0 14
34384: PUSH
34385: LD_INT 1
34387: ARRAY
34388: GREATEREQUAL
34389: PUSH
34390: LD_VAR 0 9
34394: PPUSH
34395: LD_INT 2
34397: PPUSH
34398: CALL_OW 275
34402: PUSH
34403: LD_VAR 0 14
34407: PUSH
34408: LD_INT 2
34410: ARRAY
34411: GREATEREQUAL
34412: AND
34413: PUSH
34414: LD_VAR 0 9
34418: PPUSH
34419: LD_INT 3
34421: PPUSH
34422: CALL_OW 275
34426: PUSH
34427: LD_VAR 0 14
34431: PUSH
34432: LD_INT 3
34434: ARRAY
34435: GREATEREQUAL
34436: AND
34437: IFFALSE 34449
// result := weapon ;
34439: LD_ADDR_VAR 0 3
34443: PUSH
34444: LD_VAR 0 18
34448: ST_TO_ADDR
// end ; end ;
34449: LD_VAR 0 3
34453: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34454: LD_INT 0
34456: PPUSH
34457: PPUSH
// result := true ;
34458: LD_ADDR_VAR 0 3
34462: PUSH
34463: LD_INT 1
34465: ST_TO_ADDR
// if array1 = array2 then
34466: LD_VAR 0 1
34470: PUSH
34471: LD_VAR 0 2
34475: EQUAL
34476: IFFALSE 34536
// begin for i = 1 to array1 do
34478: LD_ADDR_VAR 0 4
34482: PUSH
34483: DOUBLE
34484: LD_INT 1
34486: DEC
34487: ST_TO_ADDR
34488: LD_VAR 0 1
34492: PUSH
34493: FOR_TO
34494: IFFALSE 34532
// if array1 [ i ] <> array2 [ i ] then
34496: LD_VAR 0 1
34500: PUSH
34501: LD_VAR 0 4
34505: ARRAY
34506: PUSH
34507: LD_VAR 0 2
34511: PUSH
34512: LD_VAR 0 4
34516: ARRAY
34517: NONEQUAL
34518: IFFALSE 34530
// begin result := false ;
34520: LD_ADDR_VAR 0 3
34524: PUSH
34525: LD_INT 0
34527: ST_TO_ADDR
// break ;
34528: GO 34532
// end ;
34530: GO 34493
34532: POP
34533: POP
// end else
34534: GO 34544
// result := false ;
34536: LD_ADDR_VAR 0 3
34540: PUSH
34541: LD_INT 0
34543: ST_TO_ADDR
// end ;
34544: LD_VAR 0 3
34548: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34549: LD_INT 0
34551: PPUSH
34552: PPUSH
34553: PPUSH
// pom := GetBase ( fac ) ;
34554: LD_ADDR_VAR 0 5
34558: PUSH
34559: LD_VAR 0 1
34563: PPUSH
34564: CALL_OW 274
34568: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34569: LD_ADDR_VAR 0 4
34573: PUSH
34574: LD_VAR 0 2
34578: PUSH
34579: LD_INT 1
34581: ARRAY
34582: PPUSH
34583: LD_VAR 0 2
34587: PUSH
34588: LD_INT 2
34590: ARRAY
34591: PPUSH
34592: LD_VAR 0 2
34596: PUSH
34597: LD_INT 3
34599: ARRAY
34600: PPUSH
34601: LD_VAR 0 2
34605: PUSH
34606: LD_INT 4
34608: ARRAY
34609: PPUSH
34610: CALL_OW 449
34614: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34615: LD_ADDR_VAR 0 3
34619: PUSH
34620: LD_VAR 0 5
34624: PPUSH
34625: LD_INT 1
34627: PPUSH
34628: CALL_OW 275
34632: PUSH
34633: LD_VAR 0 4
34637: PUSH
34638: LD_INT 1
34640: ARRAY
34641: GREATEREQUAL
34642: PUSH
34643: LD_VAR 0 5
34647: PPUSH
34648: LD_INT 2
34650: PPUSH
34651: CALL_OW 275
34655: PUSH
34656: LD_VAR 0 4
34660: PUSH
34661: LD_INT 2
34663: ARRAY
34664: GREATEREQUAL
34665: AND
34666: PUSH
34667: LD_VAR 0 5
34671: PPUSH
34672: LD_INT 3
34674: PPUSH
34675: CALL_OW 275
34679: PUSH
34680: LD_VAR 0 4
34684: PUSH
34685: LD_INT 3
34687: ARRAY
34688: GREATEREQUAL
34689: AND
34690: ST_TO_ADDR
// end ;
34691: LD_VAR 0 3
34695: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34696: LD_INT 0
34698: PPUSH
34699: PPUSH
34700: PPUSH
34701: PPUSH
// pom := GetBase ( building ) ;
34702: LD_ADDR_VAR 0 3
34706: PUSH
34707: LD_VAR 0 1
34711: PPUSH
34712: CALL_OW 274
34716: ST_TO_ADDR
// if not pom then
34717: LD_VAR 0 3
34721: NOT
34722: IFFALSE 34726
// exit ;
34724: GO 34896
// btype := GetBType ( building ) ;
34726: LD_ADDR_VAR 0 5
34730: PUSH
34731: LD_VAR 0 1
34735: PPUSH
34736: CALL_OW 266
34740: ST_TO_ADDR
// if btype = b_armoury then
34741: LD_VAR 0 5
34745: PUSH
34746: LD_INT 4
34748: EQUAL
34749: IFFALSE 34759
// btype := b_barracks ;
34751: LD_ADDR_VAR 0 5
34755: PUSH
34756: LD_INT 5
34758: ST_TO_ADDR
// if btype = b_depot then
34759: LD_VAR 0 5
34763: PUSH
34764: LD_INT 0
34766: EQUAL
34767: IFFALSE 34777
// btype := b_warehouse ;
34769: LD_ADDR_VAR 0 5
34773: PUSH
34774: LD_INT 1
34776: ST_TO_ADDR
// if btype = b_workshop then
34777: LD_VAR 0 5
34781: PUSH
34782: LD_INT 2
34784: EQUAL
34785: IFFALSE 34795
// btype := b_factory ;
34787: LD_ADDR_VAR 0 5
34791: PUSH
34792: LD_INT 3
34794: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34795: LD_ADDR_VAR 0 4
34799: PUSH
34800: LD_VAR 0 5
34804: PPUSH
34805: LD_VAR 0 1
34809: PPUSH
34810: CALL_OW 248
34814: PPUSH
34815: CALL_OW 450
34819: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34820: LD_ADDR_VAR 0 2
34824: PUSH
34825: LD_VAR 0 3
34829: PPUSH
34830: LD_INT 1
34832: PPUSH
34833: CALL_OW 275
34837: PUSH
34838: LD_VAR 0 4
34842: PUSH
34843: LD_INT 1
34845: ARRAY
34846: GREATEREQUAL
34847: PUSH
34848: LD_VAR 0 3
34852: PPUSH
34853: LD_INT 2
34855: PPUSH
34856: CALL_OW 275
34860: PUSH
34861: LD_VAR 0 4
34865: PUSH
34866: LD_INT 2
34868: ARRAY
34869: GREATEREQUAL
34870: AND
34871: PUSH
34872: LD_VAR 0 3
34876: PPUSH
34877: LD_INT 3
34879: PPUSH
34880: CALL_OW 275
34884: PUSH
34885: LD_VAR 0 4
34889: PUSH
34890: LD_INT 3
34892: ARRAY
34893: GREATEREQUAL
34894: AND
34895: ST_TO_ADDR
// end ;
34896: LD_VAR 0 2
34900: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34901: LD_INT 0
34903: PPUSH
34904: PPUSH
34905: PPUSH
// pom := GetBase ( building ) ;
34906: LD_ADDR_VAR 0 4
34910: PUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: CALL_OW 274
34920: ST_TO_ADDR
// if not pom then
34921: LD_VAR 0 4
34925: NOT
34926: IFFALSE 34930
// exit ;
34928: GO 35031
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34930: LD_ADDR_VAR 0 5
34934: PUSH
34935: LD_VAR 0 2
34939: PPUSH
34940: LD_VAR 0 1
34944: PPUSH
34945: CALL_OW 248
34949: PPUSH
34950: CALL_OW 450
34954: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34955: LD_ADDR_VAR 0 3
34959: PUSH
34960: LD_VAR 0 4
34964: PPUSH
34965: LD_INT 1
34967: PPUSH
34968: CALL_OW 275
34972: PUSH
34973: LD_VAR 0 5
34977: PUSH
34978: LD_INT 1
34980: ARRAY
34981: GREATEREQUAL
34982: PUSH
34983: LD_VAR 0 4
34987: PPUSH
34988: LD_INT 2
34990: PPUSH
34991: CALL_OW 275
34995: PUSH
34996: LD_VAR 0 5
35000: PUSH
35001: LD_INT 2
35003: ARRAY
35004: GREATEREQUAL
35005: AND
35006: PUSH
35007: LD_VAR 0 4
35011: PPUSH
35012: LD_INT 3
35014: PPUSH
35015: CALL_OW 275
35019: PUSH
35020: LD_VAR 0 5
35024: PUSH
35025: LD_INT 3
35027: ARRAY
35028: GREATEREQUAL
35029: AND
35030: ST_TO_ADDR
// end ;
35031: LD_VAR 0 3
35035: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
35036: LD_INT 0
35038: PPUSH
35039: PPUSH
35040: PPUSH
35041: PPUSH
35042: PPUSH
35043: PPUSH
35044: PPUSH
35045: PPUSH
35046: PPUSH
35047: PPUSH
// result := false ;
35048: LD_ADDR_VAR 0 6
35052: PUSH
35053: LD_INT 0
35055: ST_TO_ADDR
// if not base or not btype or not x or not y then
35056: LD_VAR 0 1
35060: NOT
35061: PUSH
35062: LD_VAR 0 2
35066: NOT
35067: OR
35068: PUSH
35069: LD_VAR 0 3
35073: NOT
35074: OR
35075: PUSH
35076: LD_VAR 0 4
35080: NOT
35081: OR
35082: IFFALSE 35086
// exit ;
35084: GO 35695
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
35086: LD_ADDR_VAR 0 12
35090: PUSH
35091: LD_VAR 0 2
35095: PPUSH
35096: LD_VAR 0 3
35100: PPUSH
35101: LD_VAR 0 4
35105: PPUSH
35106: LD_VAR 0 5
35110: PPUSH
35111: LD_VAR 0 1
35115: PUSH
35116: LD_INT 1
35118: ARRAY
35119: PPUSH
35120: CALL_OW 248
35124: PPUSH
35125: LD_INT 0
35127: PPUSH
35128: CALL 36532 0 6
35132: ST_TO_ADDR
// if not hexes then
35133: LD_VAR 0 12
35137: NOT
35138: IFFALSE 35142
// exit ;
35140: GO 35695
// for i = 1 to hexes do
35142: LD_ADDR_VAR 0 7
35146: PUSH
35147: DOUBLE
35148: LD_INT 1
35150: DEC
35151: ST_TO_ADDR
35152: LD_VAR 0 12
35156: PUSH
35157: FOR_TO
35158: IFFALSE 35693
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35160: LD_ADDR_VAR 0 11
35164: PUSH
35165: LD_VAR 0 12
35169: PUSH
35170: LD_VAR 0 7
35174: ARRAY
35175: PUSH
35176: LD_INT 1
35178: ARRAY
35179: PPUSH
35180: LD_VAR 0 12
35184: PUSH
35185: LD_VAR 0 7
35189: ARRAY
35190: PUSH
35191: LD_INT 2
35193: ARRAY
35194: PPUSH
35195: CALL_OW 428
35199: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35200: LD_VAR 0 12
35204: PUSH
35205: LD_VAR 0 7
35209: ARRAY
35210: PUSH
35211: LD_INT 1
35213: ARRAY
35214: PPUSH
35215: LD_VAR 0 12
35219: PUSH
35220: LD_VAR 0 7
35224: ARRAY
35225: PUSH
35226: LD_INT 2
35228: ARRAY
35229: PPUSH
35230: CALL_OW 351
35234: PUSH
35235: LD_VAR 0 12
35239: PUSH
35240: LD_VAR 0 7
35244: ARRAY
35245: PUSH
35246: LD_INT 1
35248: ARRAY
35249: PPUSH
35250: LD_VAR 0 12
35254: PUSH
35255: LD_VAR 0 7
35259: ARRAY
35260: PUSH
35261: LD_INT 2
35263: ARRAY
35264: PPUSH
35265: CALL_OW 488
35269: NOT
35270: OR
35271: PUSH
35272: LD_VAR 0 11
35276: PPUSH
35277: CALL_OW 247
35281: PUSH
35282: LD_INT 3
35284: EQUAL
35285: OR
35286: IFFALSE 35292
// exit ;
35288: POP
35289: POP
35290: GO 35695
// if not tmp or not tmp in base then
35292: LD_VAR 0 11
35296: NOT
35297: PUSH
35298: LD_VAR 0 11
35302: PUSH
35303: LD_VAR 0 1
35307: IN
35308: NOT
35309: OR
35310: IFFALSE 35314
// continue ;
35312: GO 35157
// result := true ;
35314: LD_ADDR_VAR 0 6
35318: PUSH
35319: LD_INT 1
35321: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35322: LD_ADDR_VAR 0 15
35326: PUSH
35327: LD_VAR 0 1
35331: PPUSH
35332: LD_INT 22
35334: PUSH
35335: LD_VAR 0 11
35339: PPUSH
35340: CALL_OW 255
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: PUSH
35352: LD_INT 30
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 30
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PPUSH
35381: CALL_OW 72
35385: ST_TO_ADDR
// if dep then
35386: LD_VAR 0 15
35390: IFFALSE 35526
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35392: LD_ADDR_VAR 0 14
35396: PUSH
35397: LD_VAR 0 15
35401: PUSH
35402: LD_INT 1
35404: ARRAY
35405: PPUSH
35406: CALL_OW 250
35410: PPUSH
35411: LD_VAR 0 15
35415: PUSH
35416: LD_INT 1
35418: ARRAY
35419: PPUSH
35420: CALL_OW 254
35424: PPUSH
35425: LD_INT 5
35427: PPUSH
35428: CALL_OW 272
35432: PUSH
35433: LD_VAR 0 15
35437: PUSH
35438: LD_INT 1
35440: ARRAY
35441: PPUSH
35442: CALL_OW 251
35446: PPUSH
35447: LD_VAR 0 15
35451: PUSH
35452: LD_INT 1
35454: ARRAY
35455: PPUSH
35456: CALL_OW 254
35460: PPUSH
35461: LD_INT 5
35463: PPUSH
35464: CALL_OW 273
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35473: LD_VAR 0 14
35477: PUSH
35478: LD_INT 1
35480: ARRAY
35481: PPUSH
35482: LD_VAR 0 14
35486: PUSH
35487: LD_INT 2
35489: ARRAY
35490: PPUSH
35491: CALL_OW 488
35495: IFFALSE 35526
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35497: LD_VAR 0 11
35501: PPUSH
35502: LD_VAR 0 14
35506: PUSH
35507: LD_INT 1
35509: ARRAY
35510: PPUSH
35511: LD_VAR 0 14
35515: PUSH
35516: LD_INT 2
35518: ARRAY
35519: PPUSH
35520: CALL_OW 111
// continue ;
35524: GO 35157
// end ; end ; r := GetDir ( tmp ) ;
35526: LD_ADDR_VAR 0 13
35530: PUSH
35531: LD_VAR 0 11
35535: PPUSH
35536: CALL_OW 254
35540: ST_TO_ADDR
// if r = 5 then
35541: LD_VAR 0 13
35545: PUSH
35546: LD_INT 5
35548: EQUAL
35549: IFFALSE 35559
// r := 0 ;
35551: LD_ADDR_VAR 0 13
35555: PUSH
35556: LD_INT 0
35558: ST_TO_ADDR
// for j = r to 5 do
35559: LD_ADDR_VAR 0 8
35563: PUSH
35564: DOUBLE
35565: LD_VAR 0 13
35569: DEC
35570: ST_TO_ADDR
35571: LD_INT 5
35573: PUSH
35574: FOR_TO
35575: IFFALSE 35689
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35577: LD_ADDR_VAR 0 9
35581: PUSH
35582: LD_VAR 0 11
35586: PPUSH
35587: CALL_OW 250
35591: PPUSH
35592: LD_VAR 0 8
35596: PPUSH
35597: LD_INT 2
35599: PPUSH
35600: CALL_OW 272
35604: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35605: LD_ADDR_VAR 0 10
35609: PUSH
35610: LD_VAR 0 11
35614: PPUSH
35615: CALL_OW 251
35619: PPUSH
35620: LD_VAR 0 8
35624: PPUSH
35625: LD_INT 2
35627: PPUSH
35628: CALL_OW 273
35632: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35633: LD_VAR 0 9
35637: PPUSH
35638: LD_VAR 0 10
35642: PPUSH
35643: CALL_OW 488
35647: PUSH
35648: LD_VAR 0 9
35652: PPUSH
35653: LD_VAR 0 10
35657: PPUSH
35658: CALL_OW 428
35662: NOT
35663: AND
35664: IFFALSE 35687
// begin ComMoveXY ( tmp , _x , _y ) ;
35666: LD_VAR 0 11
35670: PPUSH
35671: LD_VAR 0 9
35675: PPUSH
35676: LD_VAR 0 10
35680: PPUSH
35681: CALL_OW 111
// break ;
35685: GO 35689
// end ; end ;
35687: GO 35574
35689: POP
35690: POP
// end ;
35691: GO 35157
35693: POP
35694: POP
// end ;
35695: LD_VAR 0 6
35699: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
35700: LD_INT 0
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
// result := false ;
35712: LD_ADDR_VAR 0 6
35716: PUSH
35717: LD_INT 0
35719: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35720: LD_VAR 0 1
35724: NOT
35725: PUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 266
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: IN
35746: NOT
35747: OR
35748: PUSH
35749: LD_VAR 0 2
35753: NOT
35754: OR
35755: PUSH
35756: LD_VAR 0 5
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: LD_INT 2
35769: PUSH
35770: LD_INT 3
35772: PUSH
35773: LD_INT 4
35775: PUSH
35776: LD_INT 5
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: IN
35787: NOT
35788: OR
35789: PUSH
35790: LD_VAR 0 3
35794: PPUSH
35795: LD_VAR 0 4
35799: PPUSH
35800: CALL_OW 488
35804: NOT
35805: OR
35806: IFFALSE 35810
// exit ;
35808: GO 36527
// pom := GetBase ( depot ) ;
35810: LD_ADDR_VAR 0 10
35814: PUSH
35815: LD_VAR 0 1
35819: PPUSH
35820: CALL_OW 274
35824: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35825: LD_ADDR_VAR 0 11
35829: PUSH
35830: LD_VAR 0 2
35834: PPUSH
35835: LD_VAR 0 1
35839: PPUSH
35840: CALL_OW 248
35844: PPUSH
35845: CALL_OW 450
35849: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35850: LD_VAR 0 10
35854: PPUSH
35855: LD_INT 1
35857: PPUSH
35858: CALL_OW 275
35862: PUSH
35863: LD_VAR 0 11
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: GREATEREQUAL
35872: PUSH
35873: LD_VAR 0 10
35877: PPUSH
35878: LD_INT 2
35880: PPUSH
35881: CALL_OW 275
35885: PUSH
35886: LD_VAR 0 11
35890: PUSH
35891: LD_INT 2
35893: ARRAY
35894: GREATEREQUAL
35895: AND
35896: PUSH
35897: LD_VAR 0 10
35901: PPUSH
35902: LD_INT 3
35904: PPUSH
35905: CALL_OW 275
35909: PUSH
35910: LD_VAR 0 11
35914: PUSH
35915: LD_INT 3
35917: ARRAY
35918: GREATEREQUAL
35919: AND
35920: NOT
35921: IFFALSE 35925
// exit ;
35923: GO 36527
// if GetBType ( depot ) = b_depot then
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL_OW 266
35934: PUSH
35935: LD_INT 0
35937: EQUAL
35938: IFFALSE 35950
// dist := 28 else
35940: LD_ADDR_VAR 0 14
35944: PUSH
35945: LD_INT 28
35947: ST_TO_ADDR
35948: GO 35958
// dist := 36 ;
35950: LD_ADDR_VAR 0 14
35954: PUSH
35955: LD_INT 36
35957: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35958: LD_VAR 0 1
35962: PPUSH
35963: LD_VAR 0 3
35967: PPUSH
35968: LD_VAR 0 4
35972: PPUSH
35973: CALL_OW 297
35977: PUSH
35978: LD_VAR 0 14
35982: GREATER
35983: IFFALSE 35987
// exit ;
35985: GO 36527
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35987: LD_ADDR_VAR 0 12
35991: PUSH
35992: LD_VAR 0 2
35996: PPUSH
35997: LD_VAR 0 3
36001: PPUSH
36002: LD_VAR 0 4
36006: PPUSH
36007: LD_VAR 0 5
36011: PPUSH
36012: LD_VAR 0 1
36016: PPUSH
36017: CALL_OW 248
36021: PPUSH
36022: LD_INT 0
36024: PPUSH
36025: CALL 36532 0 6
36029: ST_TO_ADDR
// if not hexes then
36030: LD_VAR 0 12
36034: NOT
36035: IFFALSE 36039
// exit ;
36037: GO 36527
// hex := GetHexInfo ( x , y ) ;
36039: LD_ADDR_VAR 0 15
36043: PUSH
36044: LD_VAR 0 3
36048: PPUSH
36049: LD_VAR 0 4
36053: PPUSH
36054: CALL_OW 546
36058: ST_TO_ADDR
// if hex [ 1 ] then
36059: LD_VAR 0 15
36063: PUSH
36064: LD_INT 1
36066: ARRAY
36067: IFFALSE 36071
// exit ;
36069: GO 36527
// height := hex [ 2 ] ;
36071: LD_ADDR_VAR 0 13
36075: PUSH
36076: LD_VAR 0 15
36080: PUSH
36081: LD_INT 2
36083: ARRAY
36084: ST_TO_ADDR
// for i = 1 to hexes do
36085: LD_ADDR_VAR 0 7
36089: PUSH
36090: DOUBLE
36091: LD_INT 1
36093: DEC
36094: ST_TO_ADDR
36095: LD_VAR 0 12
36099: PUSH
36100: FOR_TO
36101: IFFALSE 36431
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36103: LD_VAR 0 12
36107: PUSH
36108: LD_VAR 0 7
36112: ARRAY
36113: PUSH
36114: LD_INT 1
36116: ARRAY
36117: PPUSH
36118: LD_VAR 0 12
36122: PUSH
36123: LD_VAR 0 7
36127: ARRAY
36128: PUSH
36129: LD_INT 2
36131: ARRAY
36132: PPUSH
36133: CALL_OW 488
36137: NOT
36138: PUSH
36139: LD_VAR 0 12
36143: PUSH
36144: LD_VAR 0 7
36148: ARRAY
36149: PUSH
36150: LD_INT 1
36152: ARRAY
36153: PPUSH
36154: LD_VAR 0 12
36158: PUSH
36159: LD_VAR 0 7
36163: ARRAY
36164: PUSH
36165: LD_INT 2
36167: ARRAY
36168: PPUSH
36169: CALL_OW 428
36173: PUSH
36174: LD_INT 0
36176: GREATER
36177: OR
36178: PUSH
36179: LD_VAR 0 12
36183: PUSH
36184: LD_VAR 0 7
36188: ARRAY
36189: PUSH
36190: LD_INT 1
36192: ARRAY
36193: PPUSH
36194: LD_VAR 0 12
36198: PUSH
36199: LD_VAR 0 7
36203: ARRAY
36204: PUSH
36205: LD_INT 2
36207: ARRAY
36208: PPUSH
36209: CALL_OW 351
36213: OR
36214: IFFALSE 36220
// exit ;
36216: POP
36217: POP
36218: GO 36527
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36220: LD_ADDR_VAR 0 8
36224: PUSH
36225: LD_VAR 0 12
36229: PUSH
36230: LD_VAR 0 7
36234: ARRAY
36235: PUSH
36236: LD_INT 1
36238: ARRAY
36239: PPUSH
36240: LD_VAR 0 12
36244: PUSH
36245: LD_VAR 0 7
36249: ARRAY
36250: PUSH
36251: LD_INT 2
36253: ARRAY
36254: PPUSH
36255: CALL_OW 546
36259: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36260: LD_VAR 0 8
36264: PUSH
36265: LD_INT 1
36267: ARRAY
36268: PUSH
36269: LD_VAR 0 8
36273: PUSH
36274: LD_INT 2
36276: ARRAY
36277: PUSH
36278: LD_VAR 0 13
36282: PUSH
36283: LD_INT 2
36285: PLUS
36286: GREATER
36287: OR
36288: PUSH
36289: LD_VAR 0 8
36293: PUSH
36294: LD_INT 2
36296: ARRAY
36297: PUSH
36298: LD_VAR 0 13
36302: PUSH
36303: LD_INT 2
36305: MINUS
36306: LESS
36307: OR
36308: PUSH
36309: LD_VAR 0 8
36313: PUSH
36314: LD_INT 3
36316: ARRAY
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: LD_INT 8
36323: PUSH
36324: LD_INT 9
36326: PUSH
36327: LD_INT 10
36329: PUSH
36330: LD_INT 11
36332: PUSH
36333: LD_INT 12
36335: PUSH
36336: LD_INT 13
36338: PUSH
36339: LD_INT 16
36341: PUSH
36342: LD_INT 17
36344: PUSH
36345: LD_INT 18
36347: PUSH
36348: LD_INT 19
36350: PUSH
36351: LD_INT 20
36353: PUSH
36354: LD_INT 21
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: IN
36372: NOT
36373: OR
36374: PUSH
36375: LD_VAR 0 8
36379: PUSH
36380: LD_INT 5
36382: ARRAY
36383: NOT
36384: OR
36385: PUSH
36386: LD_VAR 0 8
36390: PUSH
36391: LD_INT 6
36393: ARRAY
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: LD_INT 7
36403: PUSH
36404: LD_INT 9
36406: PUSH
36407: LD_INT 10
36409: PUSH
36410: LD_INT 11
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: IN
36421: NOT
36422: OR
36423: IFFALSE 36429
// exit ;
36425: POP
36426: POP
36427: GO 36527
// end ;
36429: GO 36100
36431: POP
36432: POP
// side := GetSide ( depot ) ;
36433: LD_ADDR_VAR 0 9
36437: PUSH
36438: LD_VAR 0 1
36442: PPUSH
36443: CALL_OW 255
36447: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36448: LD_VAR 0 9
36452: PPUSH
36453: LD_VAR 0 3
36457: PPUSH
36458: LD_VAR 0 4
36462: PPUSH
36463: LD_INT 20
36465: PPUSH
36466: CALL 29181 0 4
36470: PUSH
36471: LD_INT 4
36473: ARRAY
36474: IFFALSE 36478
// exit ;
36476: GO 36527
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36478: LD_VAR 0 2
36482: PUSH
36483: LD_INT 29
36485: PUSH
36486: LD_INT 30
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: IN
36493: PUSH
36494: LD_VAR 0 3
36498: PPUSH
36499: LD_VAR 0 4
36503: PPUSH
36504: LD_VAR 0 9
36508: PPUSH
36509: CALL_OW 440
36513: NOT
36514: AND
36515: IFFALSE 36519
// exit ;
36517: GO 36527
// result := true ;
36519: LD_ADDR_VAR 0 6
36523: PUSH
36524: LD_INT 1
36526: ST_TO_ADDR
// end ;
36527: LD_VAR 0 6
36531: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
36532: LD_INT 0
36534: PPUSH
36535: PPUSH
36536: PPUSH
36537: PPUSH
36538: PPUSH
36539: PPUSH
36540: PPUSH
36541: PPUSH
36542: PPUSH
36543: PPUSH
36544: PPUSH
36545: PPUSH
36546: PPUSH
36547: PPUSH
36548: PPUSH
36549: PPUSH
36550: PPUSH
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
36556: PPUSH
36557: PPUSH
36558: PPUSH
36559: PPUSH
36560: PPUSH
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
36565: PPUSH
36566: PPUSH
36567: PPUSH
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
36576: PPUSH
36577: PPUSH
36578: PPUSH
36579: PPUSH
36580: PPUSH
36581: PPUSH
36582: PPUSH
36583: PPUSH
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
// result = [ ] ;
36592: LD_ADDR_VAR 0 7
36596: PUSH
36597: EMPTY
36598: ST_TO_ADDR
// temp_list = [ ] ;
36599: LD_ADDR_VAR 0 9
36603: PUSH
36604: EMPTY
36605: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36606: LD_VAR 0 4
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: LD_INT 3
36622: PUSH
36623: LD_INT 4
36625: PUSH
36626: LD_INT 5
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: IN
36637: NOT
36638: PUSH
36639: LD_VAR 0 1
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: IN
36654: PUSH
36655: LD_VAR 0 5
36659: PUSH
36660: LD_INT 1
36662: PUSH
36663: LD_INT 2
36665: PUSH
36666: LD_INT 3
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: IN
36674: NOT
36675: AND
36676: OR
36677: IFFALSE 36681
// exit ;
36679: GO 55072
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36681: LD_VAR 0 1
36685: PUSH
36686: LD_INT 6
36688: PUSH
36689: LD_INT 7
36691: PUSH
36692: LD_INT 8
36694: PUSH
36695: LD_INT 13
36697: PUSH
36698: LD_INT 12
36700: PUSH
36701: LD_INT 15
36703: PUSH
36704: LD_INT 11
36706: PUSH
36707: LD_INT 14
36709: PUSH
36710: LD_INT 10
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: IN
36724: IFFALSE 36734
// btype = b_lab ;
36726: LD_ADDR_VAR 0 1
36730: PUSH
36731: LD_INT 6
36733: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36734: LD_VAR 0 6
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: LD_INT 2
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: IN
36753: NOT
36754: PUSH
36755: LD_VAR 0 1
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: LD_INT 2
36768: PUSH
36769: LD_INT 3
36771: PUSH
36772: LD_INT 6
36774: PUSH
36775: LD_INT 36
36777: PUSH
36778: LD_INT 4
36780: PUSH
36781: LD_INT 5
36783: PUSH
36784: LD_INT 31
36786: PUSH
36787: LD_INT 32
36789: PUSH
36790: LD_INT 33
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: IN
36806: NOT
36807: PUSH
36808: LD_VAR 0 6
36812: PUSH
36813: LD_INT 1
36815: EQUAL
36816: AND
36817: OR
36818: PUSH
36819: LD_VAR 0 1
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: LD_INT 3
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: IN
36834: NOT
36835: PUSH
36836: LD_VAR 0 6
36840: PUSH
36841: LD_INT 2
36843: EQUAL
36844: AND
36845: OR
36846: IFFALSE 36856
// mode = 0 ;
36848: LD_ADDR_VAR 0 6
36852: PUSH
36853: LD_INT 0
36855: ST_TO_ADDR
// case mode of 0 :
36856: LD_VAR 0 6
36860: PUSH
36861: LD_INT 0
36863: DOUBLE
36864: EQUAL
36865: IFTRUE 36869
36867: GO 48322
36869: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36870: LD_ADDR_VAR 0 11
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 1
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: LD_INT 1
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: LD_INT 2
36955: NEG
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 2
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 3
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 3
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37063: LD_ADDR_VAR 0 12
37067: PUSH
37068: LD_INT 0
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 2
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 2
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 2
37197: NEG
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 2
37209: NEG
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 3
37220: NEG
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 3
37231: NEG
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37259: LD_ADDR_VAR 0 13
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: LD_INT 2
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: LD_INT 2
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 2
37382: NEG
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: LD_INT 2
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 2
37406: NEG
37407: PUSH
37408: LD_INT 3
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 3
37418: NEG
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 3
37430: NEG
37431: PUSH
37432: LD_INT 3
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37458: LD_ADDR_VAR 0 14
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: LD_INT 2
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: LD_INT 2
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: PUSH
37606: LD_INT 3
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 3
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 2
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37654: LD_ADDR_VAR 0 15
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 3
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37847: LD_ADDR_VAR 0 16
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: LD_INT 2
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 2
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 2
37970: NEG
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: NEG
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 3
38004: PUSH
38005: LD_INT 3
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 2
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38040: LD_ADDR_VAR 0 17
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: NEG
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: LD_INT 2
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 2
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38270: LD_ADDR_VAR 0 18
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: NEG
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: LD_INT 2
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 2
38366: NEG
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 1
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: LD_INT 2
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: NEG
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38500: LD_ADDR_VAR 0 19
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: NEG
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 2
38687: NEG
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 2
38699: NEG
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38730: LD_ADDR_VAR 0 20
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: LD_INT 2
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 2
38917: NEG
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 2
38929: NEG
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38960: LD_ADDR_VAR 0 21
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: LD_INT 2
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: LD_INT 2
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: LD_INT 2
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39190: LD_ADDR_VAR 0 22
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: LD_INT 1
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 2
39389: NEG
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39420: LD_ADDR_VAR 0 23
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: LD_INT 3
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 2
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39700: LD_ADDR_VAR 0 24
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 2
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 2
39876: NEG
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 2
39887: NEG
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 3
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 3
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39976: LD_ADDR_VAR 0 25
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 2
40175: NEG
40176: PUSH
40177: LD_INT 2
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 3
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 3
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40250: LD_ADDR_VAR 0 26
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 3
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 3
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40526: LD_ADDR_VAR 0 27
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: NEG
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: NEG
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 3
40771: NEG
40772: PUSH
40773: LD_INT 2
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40806: LD_ADDR_VAR 0 28
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: LD_INT 2
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 2
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: NEG
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: NEG
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: NEG
41018: PUSH
41019: LD_INT 3
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: LD_INT 3
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41088: LD_ADDR_VAR 0 29
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: LD_INT 2
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: LD_INT 3
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 3
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 3
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 3
41332: NEG
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41367: LD_ADDR_VAR 0 30
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 3
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 3
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: LD_INT 3
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 3
41610: NEG
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41645: LD_ADDR_VAR 0 31
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 2
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: NEG
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 2
41822: NEG
41823: PUSH
41824: LD_INT 2
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: LD_INT 3
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 3
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: LD_INT 3
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 3
41888: NEG
41889: PUSH
41890: LD_INT 2
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41923: LD_ADDR_VAR 0 32
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 3
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 3
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: LD_INT 3
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 3
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42201: LD_ADDR_VAR 0 33
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 2
42356: NEG
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 2
42379: NEG
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: LD_INT 3
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 3
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 3
42445: NEG
42446: PUSH
42447: LD_INT 2
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42480: LD_ADDR_VAR 0 34
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: NEG
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: NEG
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: LD_INT 3
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 3
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 3
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 2
42714: NEG
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 3
42725: NEG
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42760: LD_ADDR_VAR 0 35
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42872: LD_ADDR_VAR 0 36
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42984: LD_ADDR_VAR 0 37
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43096: LD_ADDR_VAR 0 38
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43208: LD_ADDR_VAR 0 39
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43320: LD_ADDR_VAR 0 40
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43432: LD_ADDR_VAR 0 41
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: NEG
43623: PUSH
43624: LD_INT 3
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 3
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 3
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 3
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 3
43675: PUSH
43676: LD_INT 3
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 3
43706: NEG
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 3
43717: NEG
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 3
43729: NEG
43730: PUSH
43731: LD_INT 2
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 3
43741: NEG
43742: PUSH
43743: LD_INT 3
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43782: LD_ADDR_VAR 0 42
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: NEG
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: LD_INT 3
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: LD_INT 3
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 3
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 3
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 3
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: LD_INT 3
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 3
44079: NEG
44080: PUSH
44081: LD_INT 2
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 3
44091: NEG
44092: PUSH
44093: LD_INT 3
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44132: LD_ADDR_VAR 0 43
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: LD_INT 3
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 3
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: LD_INT 3
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 3
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 3
44428: NEG
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 3
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44480: LD_ADDR_VAR 0 44
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 2
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 3
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 3
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 3
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 3
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 3
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 3
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 3
44777: NEG
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 3
44789: NEG
44790: PUSH
44791: LD_INT 3
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44830: LD_ADDR_VAR 0 45
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: NEG
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: LD_INT 3
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 3
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 3
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 3
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: LD_INT 3
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 3
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 3
45127: NEG
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 3
45139: NEG
45140: PUSH
45141: LD_INT 3
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45180: LD_ADDR_VAR 0 46
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 3
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 3
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 3
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 3
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 3
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 3
45476: NEG
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45528: LD_ADDR_VAR 0 47
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45679: LD_ADDR_VAR 0 48
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45826: LD_ADDR_VAR 0 49
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45970: LD_ADDR_VAR 0 50
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46114: LD_ADDR_VAR 0 51
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46261: LD_ADDR_VAR 0 52
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46412: LD_ADDR_VAR 0 53
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 2
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46642: LD_ADDR_VAR 0 54
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46872: LD_ADDR_VAR 0 55
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47102: LD_ADDR_VAR 0 56
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47332: LD_ADDR_VAR 0 57
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47562: LD_ADDR_VAR 0 58
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47792: LD_ADDR_VAR 0 59
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47880: LD_ADDR_VAR 0 60
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47968: LD_ADDR_VAR 0 61
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48056: LD_ADDR_VAR 0 62
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48144: LD_ADDR_VAR 0 63
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48232: LD_ADDR_VAR 0 64
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: ST_TO_ADDR
// end ; 1 :
48320: GO 54217
48322: LD_INT 1
48324: DOUBLE
48325: EQUAL
48326: IFTRUE 48330
48328: GO 50953
48330: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48331: LD_ADDR_VAR 0 11
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 3
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 3
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48375: LD_ADDR_VAR 0 12
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 3
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: LIST
48415: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48416: LD_ADDR_VAR 0 13
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: LD_INT 3
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: LIST
48455: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48456: LD_ADDR_VAR 0 14
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 3
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48497: LD_ADDR_VAR 0 15
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 3
48515: NEG
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48541: LD_ADDR_VAR 0 16
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: LD_INT 3
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 3
48572: NEG
48573: PUSH
48574: LD_INT 3
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: LIST
48586: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48587: LD_ADDR_VAR 0 17
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 3
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 3
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48631: LD_ADDR_VAR 0 18
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 3
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: LIST
48671: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48672: LD_ADDR_VAR 0 19
48676: PUSH
48677: LD_INT 3
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 3
48689: PUSH
48690: LD_INT 3
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: LD_INT 3
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: LIST
48711: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48712: LD_ADDR_VAR 0 20
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48753: LD_ADDR_VAR 0 21
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 3
48771: NEG
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 3
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: LIST
48796: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48797: LD_ADDR_VAR 0 22
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 3
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: NEG
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 3
48828: NEG
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48843: LD_ADDR_VAR 0 23
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 3
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: LD_INT 4
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48887: LD_ADDR_VAR 0 24
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 4
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48928: LD_ADDR_VAR 0 25
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 4
48945: PUSH
48946: LD_INT 3
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 3
48955: PUSH
48956: LD_INT 4
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48968: LD_ADDR_VAR 0 26
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 4
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 3
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49009: LD_ADDR_VAR 0 27
49013: PUSH
49014: LD_INT 3
49016: NEG
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 3
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 4
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: LIST
49052: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49053: LD_ADDR_VAR 0 28
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: LD_INT 3
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: NEG
49073: PUSH
49074: LD_INT 4
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 4
49084: NEG
49085: PUSH
49086: LD_INT 3
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: LIST
49098: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49099: LD_ADDR_VAR 0 29
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 3
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 3
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 4
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 4
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 5
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 5
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 4
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 6
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 6
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 5
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49254: LD_ADDR_VAR 0 30
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 3
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 3
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 3
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 4
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 4
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 4
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 5
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 5
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 5
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 6
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 6
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49397: LD_ADDR_VAR 0 31
49401: PUSH
49402: LD_INT 3
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 3
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 3
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 4
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 4
49444: PUSH
49445: LD_INT 4
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: LD_INT 4
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 5
49464: PUSH
49465: LD_INT 4
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 5
49474: PUSH
49475: LD_INT 5
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 4
49484: PUSH
49485: LD_INT 5
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 6
49494: PUSH
49495: LD_INT 5
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 6
49504: PUSH
49505: LD_INT 6
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 5
49514: PUSH
49515: LD_INT 6
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49536: LD_ADDR_VAR 0 32
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 3
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 4
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 4
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 3
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 5
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 5
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 4
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 6
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: LD_INT 6
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 5
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49679: LD_ADDR_VAR 0 33
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 4
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 4
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 4
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 5
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 5
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 5
49788: NEG
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 6
49799: NEG
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 6
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49834: LD_ADDR_VAR 0 34
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: LD_INT 3
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 3
49877: NEG
49878: PUSH
49879: LD_INT 4
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 4
49889: NEG
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 4
49901: NEG
49902: PUSH
49903: LD_INT 4
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 4
49913: NEG
49914: PUSH
49915: LD_INT 5
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 5
49925: NEG
49926: PUSH
49927: LD_INT 4
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 5
49937: NEG
49938: PUSH
49939: LD_INT 5
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 5
49949: NEG
49950: PUSH
49951: LD_INT 6
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 6
49961: NEG
49962: PUSH
49963: LD_INT 5
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 6
49973: NEG
49974: PUSH
49975: LD_INT 6
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49997: LD_ADDR_VAR 0 41
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50041: LD_ADDR_VAR 0 42
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 3
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50082: LD_ADDR_VAR 0 43
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: LD_INT 3
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: LIST
50121: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50122: LD_ADDR_VAR 0 44
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: LIST
50162: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50163: LD_ADDR_VAR 0 45
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50207: LD_ADDR_VAR 0 46
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 3
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 3
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50253: LD_ADDR_VAR 0 47
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: LD_INT 3
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50286: LD_ADDR_VAR 0 48
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50317: LD_ADDR_VAR 0 49
50321: PUSH
50322: LD_INT 3
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 3
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50346: LD_ADDR_VAR 0 50
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 3
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 3
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50375: LD_ADDR_VAR 0 51
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50406: LD_ADDR_VAR 0 52
50410: PUSH
50411: LD_INT 3
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 3
50425: NEG
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50439: LD_ADDR_VAR 0 53
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 3
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 3
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50483: LD_ADDR_VAR 0 54
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 3
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 3
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: LIST
50523: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50524: LD_ADDR_VAR 0 55
50528: PUSH
50529: LD_INT 3
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 3
50541: PUSH
50542: LD_INT 3
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: LD_INT 3
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: LIST
50563: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50564: LD_ADDR_VAR 0 56
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 3
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: LIST
50604: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50605: LD_ADDR_VAR 0 57
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 3
50623: NEG
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50649: LD_ADDR_VAR 0 58
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: LD_INT 3
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50695: LD_ADDR_VAR 0 59
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50739: LD_ADDR_VAR 0 60
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50780: LD_ADDR_VAR 0 61
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50820: LD_ADDR_VAR 0 62
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50861: LD_ADDR_VAR 0 63
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50905: LD_ADDR_VAR 0 64
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: LIST
50950: ST_TO_ADDR
// end ; 2 :
50951: GO 54217
50953: LD_INT 2
50955: DOUBLE
50956: EQUAL
50957: IFTRUE 50961
50959: GO 54216
50961: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50962: LD_ADDR_VAR 0 29
50966: PUSH
50967: LD_INT 4
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 4
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 5
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 5
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 4
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 3
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 5
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 4
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 4
51092: PUSH
51093: LD_INT 4
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: LD_INT 4
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 3
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 4
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 4
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 4
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 4
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 5
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 5
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 4
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: LD_INT 5
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: LD_INT 3
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 3
51245: NEG
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 3
51256: NEG
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 3
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 4
51301: NEG
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 4
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 4
51324: NEG
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 4
51347: NEG
51348: PUSH
51349: LD_INT 4
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 4
51359: NEG
51360: PUSH
51361: LD_INT 5
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 3
51371: NEG
51372: PUSH
51373: LD_INT 4
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: LD_INT 3
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 4
51395: NEG
51396: PUSH
51397: LD_INT 3
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 5
51407: NEG
51408: PUSH
51409: LD_INT 4
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 5
51419: NEG
51420: PUSH
51421: LD_INT 5
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 5
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 5
51443: NEG
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51500: LD_ADDR_VAR 0 30
51504: PUSH
51505: LD_INT 4
51507: PUSH
51508: LD_INT 4
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 4
51517: PUSH
51518: LD_INT 3
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 5
51527: PUSH
51528: LD_INT 4
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 5
51537: PUSH
51538: LD_INT 5
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 4
51547: PUSH
51548: LD_INT 5
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: LD_INT 4
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: PUSH
51568: LD_INT 3
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 5
51577: PUSH
51578: LD_INT 3
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: LD_INT 5
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 3
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: LD_INT 3
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 4
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 4
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 3
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: LD_INT 4
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 4
51690: NEG
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 4
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 3
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 4
51735: NEG
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 5
51746: NEG
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 5
51757: NEG
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 5
51769: NEG
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 3
51781: NEG
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 3
51792: NEG
51793: PUSH
51794: LD_INT 3
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 3
51804: NEG
51805: PUSH
51806: LD_INT 4
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 3
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 4
51852: NEG
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 4
51864: NEG
51865: PUSH
51866: LD_INT 4
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 4
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 4
51888: NEG
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 4
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 5
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: LD_INT 4
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 3
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 4
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 5
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 3
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: LD_INT 5
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52047: LD_ADDR_VAR 0 31
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 4
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: LD_INT 4
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 5
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 5
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 5
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 3
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 4
52203: NEG
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 4
52214: NEG
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 4
52226: NEG
52227: PUSH
52228: LD_INT 2
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 4
52249: NEG
52250: PUSH
52251: LD_INT 4
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 4
52261: NEG
52262: PUSH
52263: LD_INT 5
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 3
52273: NEG
52274: PUSH
52275: LD_INT 4
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: NEG
52286: PUSH
52287: LD_INT 3
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 4
52297: NEG
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 5
52309: NEG
52310: PUSH
52311: LD_INT 4
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 5
52321: NEG
52322: PUSH
52323: LD_INT 5
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: LD_INT 5
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 5
52345: NEG
52346: PUSH
52347: LD_INT 3
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 3
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 4
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 3
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 4
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: LD_INT 4
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 4
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 5
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 5
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 4
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 3
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 5
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52597: LD_ADDR_VAR 0 32
52601: PUSH
52602: LD_INT 4
52604: NEG
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 4
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 3
52627: NEG
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 4
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 5
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 5
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 5
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 3
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: LD_INT 3
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: NEG
52719: PUSH
52720: LD_INT 4
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: LD_INT 3
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 4
52766: NEG
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 4
52778: NEG
52779: PUSH
52780: LD_INT 4
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 4
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 4
52802: NEG
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 4
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 5
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 4
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: LD_INT 3
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 4
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 5
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: LD_INT 5
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 3
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 4
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 4
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 3
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 4
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 4
53009: PUSH
53010: LD_INT 4
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 4
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 5
53029: PUSH
53030: LD_INT 4
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 5
53039: PUSH
53040: LD_INT 5
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 4
53049: PUSH
53050: LD_INT 5
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 3
53059: PUSH
53060: LD_INT 4
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 3
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 5
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 3
53089: PUSH
53090: LD_INT 5
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53144: LD_ADDR_VAR 0 33
53148: PUSH
53149: LD_INT 4
53151: NEG
53152: PUSH
53153: LD_INT 4
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 4
53163: NEG
53164: PUSH
53165: LD_INT 5
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: NEG
53176: PUSH
53177: LD_INT 4
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 3
53187: NEG
53188: PUSH
53189: LD_INT 3
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 4
53199: NEG
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 5
53211: NEG
53212: PUSH
53213: LD_INT 4
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 5
53223: NEG
53224: PUSH
53225: LD_INT 5
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 5
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 5
53247: NEG
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 4
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 3
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 4
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: LD_INT 4
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 4
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 4
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 5
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 5
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 4
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 3
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 5
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 3
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 4
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 4
53484: PUSH
53485: LD_INT 4
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: LD_INT 4
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 4
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 4
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 4
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 4
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 5
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 5
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 4
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: LD_INT 5
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53682: LD_ADDR_VAR 0 34
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 4
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 5
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 4
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 3
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 3
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 4
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 5
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 5
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 3
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 4
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 4
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 4
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 4
53884: PUSH
53885: LD_INT 4
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 4
53894: PUSH
53895: LD_INT 3
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 5
53904: PUSH
53905: LD_INT 4
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 5
53914: PUSH
53915: LD_INT 5
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 4
53924: PUSH
53925: LD_INT 5
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: PUSH
53935: LD_INT 4
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 3
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 5
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: LD_INT 5
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 3
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 4
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 4
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 4
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 4
54067: NEG
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 4
54078: NEG
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 3
54090: NEG
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 4
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 5
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 5
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 5
54146: NEG
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 3
54158: NEG
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// end ; end ;
54214: GO 54217
54216: POP
// case btype of b_depot , b_warehouse :
54217: LD_VAR 0 1
54221: PUSH
54222: LD_INT 0
54224: DOUBLE
54225: EQUAL
54226: IFTRUE 54236
54228: LD_INT 1
54230: DOUBLE
54231: EQUAL
54232: IFTRUE 54236
54234: GO 54437
54236: POP
// case nation of nation_american :
54237: LD_VAR 0 5
54241: PUSH
54242: LD_INT 1
54244: DOUBLE
54245: EQUAL
54246: IFTRUE 54250
54248: GO 54306
54250: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
54251: LD_ADDR_VAR 0 9
54255: PUSH
54256: LD_VAR 0 11
54260: PUSH
54261: LD_VAR 0 12
54265: PUSH
54266: LD_VAR 0 13
54270: PUSH
54271: LD_VAR 0 14
54275: PUSH
54276: LD_VAR 0 15
54280: PUSH
54281: LD_VAR 0 16
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: PUSH
54294: LD_VAR 0 4
54298: PUSH
54299: LD_INT 1
54301: PLUS
54302: ARRAY
54303: ST_TO_ADDR
54304: GO 54435
54306: LD_INT 2
54308: DOUBLE
54309: EQUAL
54310: IFTRUE 54314
54312: GO 54370
54314: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
54315: LD_ADDR_VAR 0 9
54319: PUSH
54320: LD_VAR 0 17
54324: PUSH
54325: LD_VAR 0 18
54329: PUSH
54330: LD_VAR 0 19
54334: PUSH
54335: LD_VAR 0 20
54339: PUSH
54340: LD_VAR 0 21
54344: PUSH
54345: LD_VAR 0 22
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: PUSH
54358: LD_VAR 0 4
54362: PUSH
54363: LD_INT 1
54365: PLUS
54366: ARRAY
54367: ST_TO_ADDR
54368: GO 54435
54370: LD_INT 3
54372: DOUBLE
54373: EQUAL
54374: IFTRUE 54378
54376: GO 54434
54378: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54379: LD_ADDR_VAR 0 9
54383: PUSH
54384: LD_VAR 0 23
54388: PUSH
54389: LD_VAR 0 24
54393: PUSH
54394: LD_VAR 0 25
54398: PUSH
54399: LD_VAR 0 26
54403: PUSH
54404: LD_VAR 0 27
54408: PUSH
54409: LD_VAR 0 28
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: PUSH
54422: LD_VAR 0 4
54426: PUSH
54427: LD_INT 1
54429: PLUS
54430: ARRAY
54431: ST_TO_ADDR
54432: GO 54435
54434: POP
54435: GO 54990
54437: LD_INT 2
54439: DOUBLE
54440: EQUAL
54441: IFTRUE 54451
54443: LD_INT 3
54445: DOUBLE
54446: EQUAL
54447: IFTRUE 54451
54449: GO 54507
54451: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54452: LD_ADDR_VAR 0 9
54456: PUSH
54457: LD_VAR 0 29
54461: PUSH
54462: LD_VAR 0 30
54466: PUSH
54467: LD_VAR 0 31
54471: PUSH
54472: LD_VAR 0 32
54476: PUSH
54477: LD_VAR 0 33
54481: PUSH
54482: LD_VAR 0 34
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: PUSH
54495: LD_VAR 0 4
54499: PUSH
54500: LD_INT 1
54502: PLUS
54503: ARRAY
54504: ST_TO_ADDR
54505: GO 54990
54507: LD_INT 16
54509: DOUBLE
54510: EQUAL
54511: IFTRUE 54569
54513: LD_INT 17
54515: DOUBLE
54516: EQUAL
54517: IFTRUE 54569
54519: LD_INT 18
54521: DOUBLE
54522: EQUAL
54523: IFTRUE 54569
54525: LD_INT 19
54527: DOUBLE
54528: EQUAL
54529: IFTRUE 54569
54531: LD_INT 22
54533: DOUBLE
54534: EQUAL
54535: IFTRUE 54569
54537: LD_INT 20
54539: DOUBLE
54540: EQUAL
54541: IFTRUE 54569
54543: LD_INT 21
54545: DOUBLE
54546: EQUAL
54547: IFTRUE 54569
54549: LD_INT 23
54551: DOUBLE
54552: EQUAL
54553: IFTRUE 54569
54555: LD_INT 24
54557: DOUBLE
54558: EQUAL
54559: IFTRUE 54569
54561: LD_INT 25
54563: DOUBLE
54564: EQUAL
54565: IFTRUE 54569
54567: GO 54625
54569: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54570: LD_ADDR_VAR 0 9
54574: PUSH
54575: LD_VAR 0 35
54579: PUSH
54580: LD_VAR 0 36
54584: PUSH
54585: LD_VAR 0 37
54589: PUSH
54590: LD_VAR 0 38
54594: PUSH
54595: LD_VAR 0 39
54599: PUSH
54600: LD_VAR 0 40
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: PUSH
54613: LD_VAR 0 4
54617: PUSH
54618: LD_INT 1
54620: PLUS
54621: ARRAY
54622: ST_TO_ADDR
54623: GO 54990
54625: LD_INT 6
54627: DOUBLE
54628: EQUAL
54629: IFTRUE 54681
54631: LD_INT 7
54633: DOUBLE
54634: EQUAL
54635: IFTRUE 54681
54637: LD_INT 8
54639: DOUBLE
54640: EQUAL
54641: IFTRUE 54681
54643: LD_INT 13
54645: DOUBLE
54646: EQUAL
54647: IFTRUE 54681
54649: LD_INT 12
54651: DOUBLE
54652: EQUAL
54653: IFTRUE 54681
54655: LD_INT 15
54657: DOUBLE
54658: EQUAL
54659: IFTRUE 54681
54661: LD_INT 11
54663: DOUBLE
54664: EQUAL
54665: IFTRUE 54681
54667: LD_INT 14
54669: DOUBLE
54670: EQUAL
54671: IFTRUE 54681
54673: LD_INT 10
54675: DOUBLE
54676: EQUAL
54677: IFTRUE 54681
54679: GO 54737
54681: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
54682: LD_ADDR_VAR 0 9
54686: PUSH
54687: LD_VAR 0 41
54691: PUSH
54692: LD_VAR 0 42
54696: PUSH
54697: LD_VAR 0 43
54701: PUSH
54702: LD_VAR 0 44
54706: PUSH
54707: LD_VAR 0 45
54711: PUSH
54712: LD_VAR 0 46
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: PUSH
54725: LD_VAR 0 4
54729: PUSH
54730: LD_INT 1
54732: PLUS
54733: ARRAY
54734: ST_TO_ADDR
54735: GO 54990
54737: LD_INT 36
54739: DOUBLE
54740: EQUAL
54741: IFTRUE 54745
54743: GO 54801
54745: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54746: LD_ADDR_VAR 0 9
54750: PUSH
54751: LD_VAR 0 47
54755: PUSH
54756: LD_VAR 0 48
54760: PUSH
54761: LD_VAR 0 49
54765: PUSH
54766: LD_VAR 0 50
54770: PUSH
54771: LD_VAR 0 51
54775: PUSH
54776: LD_VAR 0 52
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: PUSH
54789: LD_VAR 0 4
54793: PUSH
54794: LD_INT 1
54796: PLUS
54797: ARRAY
54798: ST_TO_ADDR
54799: GO 54990
54801: LD_INT 4
54803: DOUBLE
54804: EQUAL
54805: IFTRUE 54827
54807: LD_INT 5
54809: DOUBLE
54810: EQUAL
54811: IFTRUE 54827
54813: LD_INT 34
54815: DOUBLE
54816: EQUAL
54817: IFTRUE 54827
54819: LD_INT 37
54821: DOUBLE
54822: EQUAL
54823: IFTRUE 54827
54825: GO 54883
54827: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54828: LD_ADDR_VAR 0 9
54832: PUSH
54833: LD_VAR 0 53
54837: PUSH
54838: LD_VAR 0 54
54842: PUSH
54843: LD_VAR 0 55
54847: PUSH
54848: LD_VAR 0 56
54852: PUSH
54853: LD_VAR 0 57
54857: PUSH
54858: LD_VAR 0 58
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: PUSH
54871: LD_VAR 0 4
54875: PUSH
54876: LD_INT 1
54878: PLUS
54879: ARRAY
54880: ST_TO_ADDR
54881: GO 54990
54883: LD_INT 31
54885: DOUBLE
54886: EQUAL
54887: IFTRUE 54933
54889: LD_INT 32
54891: DOUBLE
54892: EQUAL
54893: IFTRUE 54933
54895: LD_INT 33
54897: DOUBLE
54898: EQUAL
54899: IFTRUE 54933
54901: LD_INT 27
54903: DOUBLE
54904: EQUAL
54905: IFTRUE 54933
54907: LD_INT 26
54909: DOUBLE
54910: EQUAL
54911: IFTRUE 54933
54913: LD_INT 28
54915: DOUBLE
54916: EQUAL
54917: IFTRUE 54933
54919: LD_INT 29
54921: DOUBLE
54922: EQUAL
54923: IFTRUE 54933
54925: LD_INT 30
54927: DOUBLE
54928: EQUAL
54929: IFTRUE 54933
54931: GO 54989
54933: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
54934: LD_ADDR_VAR 0 9
54938: PUSH
54939: LD_VAR 0 59
54943: PUSH
54944: LD_VAR 0 60
54948: PUSH
54949: LD_VAR 0 61
54953: PUSH
54954: LD_VAR 0 62
54958: PUSH
54959: LD_VAR 0 63
54963: PUSH
54964: LD_VAR 0 64
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: PUSH
54977: LD_VAR 0 4
54981: PUSH
54982: LD_INT 1
54984: PLUS
54985: ARRAY
54986: ST_TO_ADDR
54987: GO 54990
54989: POP
// temp_list2 = [ ] ;
54990: LD_ADDR_VAR 0 10
54994: PUSH
54995: EMPTY
54996: ST_TO_ADDR
// for i in temp_list do
54997: LD_ADDR_VAR 0 8
55001: PUSH
55002: LD_VAR 0 9
55006: PUSH
55007: FOR_IN
55008: IFFALSE 55060
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55010: LD_ADDR_VAR 0 10
55014: PUSH
55015: LD_VAR 0 10
55019: PUSH
55020: LD_VAR 0 8
55024: PUSH
55025: LD_INT 1
55027: ARRAY
55028: PUSH
55029: LD_VAR 0 2
55033: PLUS
55034: PUSH
55035: LD_VAR 0 8
55039: PUSH
55040: LD_INT 2
55042: ARRAY
55043: PUSH
55044: LD_VAR 0 3
55048: PLUS
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: EMPTY
55055: LIST
55056: ADD
55057: ST_TO_ADDR
55058: GO 55007
55060: POP
55061: POP
// result = temp_list2 ;
55062: LD_ADDR_VAR 0 7
55066: PUSH
55067: LD_VAR 0 10
55071: ST_TO_ADDR
// end ;
55072: LD_VAR 0 7
55076: RET
// export function EnemyInRange ( unit , dist ) ; begin
55077: LD_INT 0
55079: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55080: LD_ADDR_VAR 0 3
55084: PUSH
55085: LD_VAR 0 1
55089: PPUSH
55090: CALL_OW 255
55094: PPUSH
55095: LD_VAR 0 1
55099: PPUSH
55100: CALL_OW 250
55104: PPUSH
55105: LD_VAR 0 1
55109: PPUSH
55110: CALL_OW 251
55114: PPUSH
55115: LD_VAR 0 2
55119: PPUSH
55120: CALL 29181 0 4
55124: PUSH
55125: LD_INT 4
55127: ARRAY
55128: ST_TO_ADDR
// end ;
55129: LD_VAR 0 3
55133: RET
// export function PlayerSeeMe ( unit ) ; begin
55134: LD_INT 0
55136: PPUSH
// result := See ( your_side , unit ) ;
55137: LD_ADDR_VAR 0 2
55141: PUSH
55142: LD_OWVAR 2
55146: PPUSH
55147: LD_VAR 0 1
55151: PPUSH
55152: CALL_OW 292
55156: ST_TO_ADDR
// end ;
55157: LD_VAR 0 2
55161: RET
// export function ReverseDir ( unit ) ; begin
55162: LD_INT 0
55164: PPUSH
// if not unit then
55165: LD_VAR 0 1
55169: NOT
55170: IFFALSE 55174
// exit ;
55172: GO 55197
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55174: LD_ADDR_VAR 0 2
55178: PUSH
55179: LD_VAR 0 1
55183: PPUSH
55184: CALL_OW 254
55188: PUSH
55189: LD_INT 3
55191: PLUS
55192: PUSH
55193: LD_INT 6
55195: MOD
55196: ST_TO_ADDR
// end ;
55197: LD_VAR 0 2
55201: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55202: LD_INT 0
55204: PPUSH
55205: PPUSH
55206: PPUSH
55207: PPUSH
55208: PPUSH
// if not hexes then
55209: LD_VAR 0 2
55213: NOT
55214: IFFALSE 55218
// exit ;
55216: GO 55366
// dist := 9999 ;
55218: LD_ADDR_VAR 0 5
55222: PUSH
55223: LD_INT 9999
55225: ST_TO_ADDR
// for i = 1 to hexes do
55226: LD_ADDR_VAR 0 4
55230: PUSH
55231: DOUBLE
55232: LD_INT 1
55234: DEC
55235: ST_TO_ADDR
55236: LD_VAR 0 2
55240: PUSH
55241: FOR_TO
55242: IFFALSE 55354
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55244: LD_VAR 0 1
55248: PPUSH
55249: LD_VAR 0 2
55253: PUSH
55254: LD_VAR 0 4
55258: ARRAY
55259: PUSH
55260: LD_INT 1
55262: ARRAY
55263: PPUSH
55264: LD_VAR 0 2
55268: PUSH
55269: LD_VAR 0 4
55273: ARRAY
55274: PUSH
55275: LD_INT 2
55277: ARRAY
55278: PPUSH
55279: CALL_OW 297
55283: PUSH
55284: LD_VAR 0 5
55288: LESS
55289: IFFALSE 55352
// begin hex := hexes [ i ] ;
55291: LD_ADDR_VAR 0 7
55295: PUSH
55296: LD_VAR 0 2
55300: PUSH
55301: LD_VAR 0 4
55305: ARRAY
55306: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55307: LD_ADDR_VAR 0 5
55311: PUSH
55312: LD_VAR 0 1
55316: PPUSH
55317: LD_VAR 0 2
55321: PUSH
55322: LD_VAR 0 4
55326: ARRAY
55327: PUSH
55328: LD_INT 1
55330: ARRAY
55331: PPUSH
55332: LD_VAR 0 2
55336: PUSH
55337: LD_VAR 0 4
55341: ARRAY
55342: PUSH
55343: LD_INT 2
55345: ARRAY
55346: PPUSH
55347: CALL_OW 297
55351: ST_TO_ADDR
// end ; end ;
55352: GO 55241
55354: POP
55355: POP
// result := hex ;
55356: LD_ADDR_VAR 0 3
55360: PUSH
55361: LD_VAR 0 7
55365: ST_TO_ADDR
// end ;
55366: LD_VAR 0 3
55370: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55371: LD_INT 0
55373: PPUSH
55374: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55375: LD_VAR 0 1
55379: NOT
55380: PUSH
55381: LD_VAR 0 1
55385: PUSH
55386: LD_INT 21
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 23
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PPUSH
55410: CALL_OW 69
55414: IN
55415: NOT
55416: OR
55417: IFFALSE 55421
// exit ;
55419: GO 55468
// for i = 1 to 3 do
55421: LD_ADDR_VAR 0 3
55425: PUSH
55426: DOUBLE
55427: LD_INT 1
55429: DEC
55430: ST_TO_ADDR
55431: LD_INT 3
55433: PUSH
55434: FOR_TO
55435: IFFALSE 55466
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55437: LD_VAR 0 1
55441: PPUSH
55442: CALL_OW 250
55446: PPUSH
55447: LD_VAR 0 1
55451: PPUSH
55452: CALL_OW 251
55456: PPUSH
55457: LD_INT 1
55459: PPUSH
55460: CALL_OW 453
55464: GO 55434
55466: POP
55467: POP
// end ;
55468: LD_VAR 0 2
55472: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55473: LD_INT 0
55475: PPUSH
55476: PPUSH
55477: PPUSH
55478: PPUSH
55479: PPUSH
55480: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55481: LD_VAR 0 1
55485: NOT
55486: PUSH
55487: LD_VAR 0 2
55491: NOT
55492: OR
55493: PUSH
55494: LD_VAR 0 1
55498: PPUSH
55499: CALL_OW 314
55503: OR
55504: IFFALSE 55508
// exit ;
55506: GO 55949
// x := GetX ( enemy_unit ) ;
55508: LD_ADDR_VAR 0 7
55512: PUSH
55513: LD_VAR 0 2
55517: PPUSH
55518: CALL_OW 250
55522: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55523: LD_ADDR_VAR 0 8
55527: PUSH
55528: LD_VAR 0 2
55532: PPUSH
55533: CALL_OW 251
55537: ST_TO_ADDR
// if not x or not y then
55538: LD_VAR 0 7
55542: NOT
55543: PUSH
55544: LD_VAR 0 8
55548: NOT
55549: OR
55550: IFFALSE 55554
// exit ;
55552: GO 55949
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55554: LD_ADDR_VAR 0 6
55558: PUSH
55559: LD_VAR 0 7
55563: PPUSH
55564: LD_INT 0
55566: PPUSH
55567: LD_INT 4
55569: PPUSH
55570: CALL_OW 272
55574: PUSH
55575: LD_VAR 0 8
55579: PPUSH
55580: LD_INT 0
55582: PPUSH
55583: LD_INT 4
55585: PPUSH
55586: CALL_OW 273
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_VAR 0 7
55599: PPUSH
55600: LD_INT 1
55602: PPUSH
55603: LD_INT 4
55605: PPUSH
55606: CALL_OW 272
55610: PUSH
55611: LD_VAR 0 8
55615: PPUSH
55616: LD_INT 1
55618: PPUSH
55619: LD_INT 4
55621: PPUSH
55622: CALL_OW 273
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_VAR 0 7
55635: PPUSH
55636: LD_INT 2
55638: PPUSH
55639: LD_INT 4
55641: PPUSH
55642: CALL_OW 272
55646: PUSH
55647: LD_VAR 0 8
55651: PPUSH
55652: LD_INT 2
55654: PPUSH
55655: LD_INT 4
55657: PPUSH
55658: CALL_OW 273
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_VAR 0 7
55671: PPUSH
55672: LD_INT 3
55674: PPUSH
55675: LD_INT 4
55677: PPUSH
55678: CALL_OW 272
55682: PUSH
55683: LD_VAR 0 8
55687: PPUSH
55688: LD_INT 3
55690: PPUSH
55691: LD_INT 4
55693: PPUSH
55694: CALL_OW 273
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_VAR 0 7
55707: PPUSH
55708: LD_INT 4
55710: PPUSH
55711: LD_INT 4
55713: PPUSH
55714: CALL_OW 272
55718: PUSH
55719: LD_VAR 0 8
55723: PPUSH
55724: LD_INT 4
55726: PPUSH
55727: LD_INT 4
55729: PPUSH
55730: CALL_OW 273
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_VAR 0 7
55743: PPUSH
55744: LD_INT 5
55746: PPUSH
55747: LD_INT 4
55749: PPUSH
55750: CALL_OW 272
55754: PUSH
55755: LD_VAR 0 8
55759: PPUSH
55760: LD_INT 5
55762: PPUSH
55763: LD_INT 4
55765: PPUSH
55766: CALL_OW 273
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// for i = tmp downto 1 do
55783: LD_ADDR_VAR 0 4
55787: PUSH
55788: DOUBLE
55789: LD_VAR 0 6
55793: INC
55794: ST_TO_ADDR
55795: LD_INT 1
55797: PUSH
55798: FOR_DOWNTO
55799: IFFALSE 55900
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55801: LD_VAR 0 6
55805: PUSH
55806: LD_VAR 0 4
55810: ARRAY
55811: PUSH
55812: LD_INT 1
55814: ARRAY
55815: PPUSH
55816: LD_VAR 0 6
55820: PUSH
55821: LD_VAR 0 4
55825: ARRAY
55826: PUSH
55827: LD_INT 2
55829: ARRAY
55830: PPUSH
55831: CALL_OW 488
55835: NOT
55836: PUSH
55837: LD_VAR 0 6
55841: PUSH
55842: LD_VAR 0 4
55846: ARRAY
55847: PUSH
55848: LD_INT 1
55850: ARRAY
55851: PPUSH
55852: LD_VAR 0 6
55856: PUSH
55857: LD_VAR 0 4
55861: ARRAY
55862: PUSH
55863: LD_INT 2
55865: ARRAY
55866: PPUSH
55867: CALL_OW 428
55871: PUSH
55872: LD_INT 0
55874: NONEQUAL
55875: OR
55876: IFFALSE 55898
// tmp := Delete ( tmp , i ) ;
55878: LD_ADDR_VAR 0 6
55882: PUSH
55883: LD_VAR 0 6
55887: PPUSH
55888: LD_VAR 0 4
55892: PPUSH
55893: CALL_OW 3
55897: ST_TO_ADDR
55898: GO 55798
55900: POP
55901: POP
// j := GetClosestHex ( unit , tmp ) ;
55902: LD_ADDR_VAR 0 5
55906: PUSH
55907: LD_VAR 0 1
55911: PPUSH
55912: LD_VAR 0 6
55916: PPUSH
55917: CALL 55202 0 2
55921: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55922: LD_VAR 0 1
55926: PPUSH
55927: LD_VAR 0 5
55931: PUSH
55932: LD_INT 1
55934: ARRAY
55935: PPUSH
55936: LD_VAR 0 5
55940: PUSH
55941: LD_INT 2
55943: ARRAY
55944: PPUSH
55945: CALL_OW 111
// end ;
55949: LD_VAR 0 3
55953: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55954: LD_INT 0
55956: PPUSH
55957: PPUSH
55958: PPUSH
// uc_side = 0 ;
55959: LD_ADDR_OWVAR 20
55963: PUSH
55964: LD_INT 0
55966: ST_TO_ADDR
// uc_nation = 0 ;
55967: LD_ADDR_OWVAR 21
55971: PUSH
55972: LD_INT 0
55974: ST_TO_ADDR
// InitHc ;
55975: CALL_OW 19
// InitVc ;
55979: CALL_OW 20
// if mastodonts then
55983: LD_VAR 0 6
55987: IFFALSE 56054
// for i = 1 to mastodonts do
55989: LD_ADDR_VAR 0 11
55993: PUSH
55994: DOUBLE
55995: LD_INT 1
55997: DEC
55998: ST_TO_ADDR
55999: LD_VAR 0 6
56003: PUSH
56004: FOR_TO
56005: IFFALSE 56052
// begin vc_chassis := 31 ;
56007: LD_ADDR_OWVAR 37
56011: PUSH
56012: LD_INT 31
56014: ST_TO_ADDR
// vc_control := control_rider ;
56015: LD_ADDR_OWVAR 38
56019: PUSH
56020: LD_INT 4
56022: ST_TO_ADDR
// animal := CreateVehicle ;
56023: LD_ADDR_VAR 0 12
56027: PUSH
56028: CALL_OW 45
56032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56033: LD_VAR 0 12
56037: PPUSH
56038: LD_VAR 0 8
56042: PPUSH
56043: LD_INT 0
56045: PPUSH
56046: CALL 58123 0 3
// end ;
56050: GO 56004
56052: POP
56053: POP
// if horses then
56054: LD_VAR 0 5
56058: IFFALSE 56125
// for i = 1 to horses do
56060: LD_ADDR_VAR 0 11
56064: PUSH
56065: DOUBLE
56066: LD_INT 1
56068: DEC
56069: ST_TO_ADDR
56070: LD_VAR 0 5
56074: PUSH
56075: FOR_TO
56076: IFFALSE 56123
// begin hc_class := 21 ;
56078: LD_ADDR_OWVAR 28
56082: PUSH
56083: LD_INT 21
56085: ST_TO_ADDR
// hc_gallery :=  ;
56086: LD_ADDR_OWVAR 33
56090: PUSH
56091: LD_STRING 
56093: ST_TO_ADDR
// animal := CreateHuman ;
56094: LD_ADDR_VAR 0 12
56098: PUSH
56099: CALL_OW 44
56103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56104: LD_VAR 0 12
56108: PPUSH
56109: LD_VAR 0 8
56113: PPUSH
56114: LD_INT 0
56116: PPUSH
56117: CALL 58123 0 3
// end ;
56121: GO 56075
56123: POP
56124: POP
// if birds then
56125: LD_VAR 0 1
56129: IFFALSE 56196
// for i = 1 to birds do
56131: LD_ADDR_VAR 0 11
56135: PUSH
56136: DOUBLE
56137: LD_INT 1
56139: DEC
56140: ST_TO_ADDR
56141: LD_VAR 0 1
56145: PUSH
56146: FOR_TO
56147: IFFALSE 56194
// begin hc_class = 18 ;
56149: LD_ADDR_OWVAR 28
56153: PUSH
56154: LD_INT 18
56156: ST_TO_ADDR
// hc_gallery =  ;
56157: LD_ADDR_OWVAR 33
56161: PUSH
56162: LD_STRING 
56164: ST_TO_ADDR
// animal := CreateHuman ;
56165: LD_ADDR_VAR 0 12
56169: PUSH
56170: CALL_OW 44
56174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56175: LD_VAR 0 12
56179: PPUSH
56180: LD_VAR 0 8
56184: PPUSH
56185: LD_INT 0
56187: PPUSH
56188: CALL 58123 0 3
// end ;
56192: GO 56146
56194: POP
56195: POP
// if tigers then
56196: LD_VAR 0 2
56200: IFFALSE 56284
// for i = 1 to tigers do
56202: LD_ADDR_VAR 0 11
56206: PUSH
56207: DOUBLE
56208: LD_INT 1
56210: DEC
56211: ST_TO_ADDR
56212: LD_VAR 0 2
56216: PUSH
56217: FOR_TO
56218: IFFALSE 56282
// begin hc_class = class_tiger ;
56220: LD_ADDR_OWVAR 28
56224: PUSH
56225: LD_INT 14
56227: ST_TO_ADDR
// hc_gallery =  ;
56228: LD_ADDR_OWVAR 33
56232: PUSH
56233: LD_STRING 
56235: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56236: LD_ADDR_OWVAR 35
56240: PUSH
56241: LD_INT 7
56243: NEG
56244: PPUSH
56245: LD_INT 7
56247: PPUSH
56248: CALL_OW 12
56252: ST_TO_ADDR
// animal := CreateHuman ;
56253: LD_ADDR_VAR 0 12
56257: PUSH
56258: CALL_OW 44
56262: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56263: LD_VAR 0 12
56267: PPUSH
56268: LD_VAR 0 8
56272: PPUSH
56273: LD_INT 0
56275: PPUSH
56276: CALL 58123 0 3
// end ;
56280: GO 56217
56282: POP
56283: POP
// if apemans then
56284: LD_VAR 0 3
56288: IFFALSE 56411
// for i = 1 to apemans do
56290: LD_ADDR_VAR 0 11
56294: PUSH
56295: DOUBLE
56296: LD_INT 1
56298: DEC
56299: ST_TO_ADDR
56300: LD_VAR 0 3
56304: PUSH
56305: FOR_TO
56306: IFFALSE 56409
// begin hc_class = class_apeman ;
56308: LD_ADDR_OWVAR 28
56312: PUSH
56313: LD_INT 12
56315: ST_TO_ADDR
// hc_gallery =  ;
56316: LD_ADDR_OWVAR 33
56320: PUSH
56321: LD_STRING 
56323: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
56324: LD_ADDR_OWVAR 35
56328: PUSH
56329: LD_INT 5
56331: NEG
56332: PPUSH
56333: LD_INT 5
56335: PPUSH
56336: CALL_OW 12
56340: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56341: LD_ADDR_OWVAR 31
56345: PUSH
56346: LD_INT 1
56348: PPUSH
56349: LD_INT 3
56351: PPUSH
56352: CALL_OW 12
56356: PUSH
56357: LD_INT 1
56359: PPUSH
56360: LD_INT 3
56362: PPUSH
56363: CALL_OW 12
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: ST_TO_ADDR
// animal := CreateHuman ;
56380: LD_ADDR_VAR 0 12
56384: PUSH
56385: CALL_OW 44
56389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56390: LD_VAR 0 12
56394: PPUSH
56395: LD_VAR 0 8
56399: PPUSH
56400: LD_INT 0
56402: PPUSH
56403: CALL 58123 0 3
// end ;
56407: GO 56305
56409: POP
56410: POP
// if enchidnas then
56411: LD_VAR 0 4
56415: IFFALSE 56482
// for i = 1 to enchidnas do
56417: LD_ADDR_VAR 0 11
56421: PUSH
56422: DOUBLE
56423: LD_INT 1
56425: DEC
56426: ST_TO_ADDR
56427: LD_VAR 0 4
56431: PUSH
56432: FOR_TO
56433: IFFALSE 56480
// begin hc_class = 13 ;
56435: LD_ADDR_OWVAR 28
56439: PUSH
56440: LD_INT 13
56442: ST_TO_ADDR
// hc_gallery =  ;
56443: LD_ADDR_OWVAR 33
56447: PUSH
56448: LD_STRING 
56450: ST_TO_ADDR
// animal := CreateHuman ;
56451: LD_ADDR_VAR 0 12
56455: PUSH
56456: CALL_OW 44
56460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56461: LD_VAR 0 12
56465: PPUSH
56466: LD_VAR 0 8
56470: PPUSH
56471: LD_INT 0
56473: PPUSH
56474: CALL 58123 0 3
// end ;
56478: GO 56432
56480: POP
56481: POP
// if fishes then
56482: LD_VAR 0 7
56486: IFFALSE 56553
// for i = 1 to fishes do
56488: LD_ADDR_VAR 0 11
56492: PUSH
56493: DOUBLE
56494: LD_INT 1
56496: DEC
56497: ST_TO_ADDR
56498: LD_VAR 0 7
56502: PUSH
56503: FOR_TO
56504: IFFALSE 56551
// begin hc_class = 20 ;
56506: LD_ADDR_OWVAR 28
56510: PUSH
56511: LD_INT 20
56513: ST_TO_ADDR
// hc_gallery =  ;
56514: LD_ADDR_OWVAR 33
56518: PUSH
56519: LD_STRING 
56521: ST_TO_ADDR
// animal := CreateHuman ;
56522: LD_ADDR_VAR 0 12
56526: PUSH
56527: CALL_OW 44
56531: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56532: LD_VAR 0 12
56536: PPUSH
56537: LD_VAR 0 9
56541: PPUSH
56542: LD_INT 0
56544: PPUSH
56545: CALL 58123 0 3
// end ;
56549: GO 56503
56551: POP
56552: POP
// end ;
56553: LD_VAR 0 10
56557: RET
// export function WantHeal ( sci , unit ) ; begin
56558: LD_INT 0
56560: PPUSH
// if GetTaskList ( sci ) > 0 then
56561: LD_VAR 0 1
56565: PPUSH
56566: CALL_OW 437
56570: PUSH
56571: LD_INT 0
56573: GREATER
56574: IFFALSE 56644
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56576: LD_VAR 0 1
56580: PPUSH
56581: CALL_OW 437
56585: PUSH
56586: LD_INT 1
56588: ARRAY
56589: PUSH
56590: LD_INT 1
56592: ARRAY
56593: PUSH
56594: LD_STRING l
56596: EQUAL
56597: PUSH
56598: LD_VAR 0 1
56602: PPUSH
56603: CALL_OW 437
56607: PUSH
56608: LD_INT 1
56610: ARRAY
56611: PUSH
56612: LD_INT 4
56614: ARRAY
56615: PUSH
56616: LD_VAR 0 2
56620: EQUAL
56621: AND
56622: IFFALSE 56634
// result := true else
56624: LD_ADDR_VAR 0 3
56628: PUSH
56629: LD_INT 1
56631: ST_TO_ADDR
56632: GO 56642
// result := false ;
56634: LD_ADDR_VAR 0 3
56638: PUSH
56639: LD_INT 0
56641: ST_TO_ADDR
// end else
56642: GO 56652
// result := false ;
56644: LD_ADDR_VAR 0 3
56648: PUSH
56649: LD_INT 0
56651: ST_TO_ADDR
// end ;
56652: LD_VAR 0 3
56656: RET
// export function HealTarget ( sci ) ; begin
56657: LD_INT 0
56659: PPUSH
// if not sci then
56660: LD_VAR 0 1
56664: NOT
56665: IFFALSE 56669
// exit ;
56667: GO 56734
// result := 0 ;
56669: LD_ADDR_VAR 0 2
56673: PUSH
56674: LD_INT 0
56676: ST_TO_ADDR
// if GetTaskList ( sci ) then
56677: LD_VAR 0 1
56681: PPUSH
56682: CALL_OW 437
56686: IFFALSE 56734
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56688: LD_VAR 0 1
56692: PPUSH
56693: CALL_OW 437
56697: PUSH
56698: LD_INT 1
56700: ARRAY
56701: PUSH
56702: LD_INT 1
56704: ARRAY
56705: PUSH
56706: LD_STRING l
56708: EQUAL
56709: IFFALSE 56734
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56711: LD_ADDR_VAR 0 2
56715: PUSH
56716: LD_VAR 0 1
56720: PPUSH
56721: CALL_OW 437
56725: PUSH
56726: LD_INT 1
56728: ARRAY
56729: PUSH
56730: LD_INT 4
56732: ARRAY
56733: ST_TO_ADDR
// end ;
56734: LD_VAR 0 2
56738: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56739: LD_INT 0
56741: PPUSH
56742: PPUSH
56743: PPUSH
56744: PPUSH
// if not base_units then
56745: LD_VAR 0 1
56749: NOT
56750: IFFALSE 56754
// exit ;
56752: GO 56841
// result := false ;
56754: LD_ADDR_VAR 0 2
56758: PUSH
56759: LD_INT 0
56761: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56762: LD_ADDR_VAR 0 5
56766: PUSH
56767: LD_VAR 0 1
56771: PPUSH
56772: LD_INT 21
56774: PUSH
56775: LD_INT 3
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PPUSH
56782: CALL_OW 72
56786: ST_TO_ADDR
// if not tmp then
56787: LD_VAR 0 5
56791: NOT
56792: IFFALSE 56796
// exit ;
56794: GO 56841
// for i in tmp do
56796: LD_ADDR_VAR 0 3
56800: PUSH
56801: LD_VAR 0 5
56805: PUSH
56806: FOR_IN
56807: IFFALSE 56839
// begin result := EnemyInRange ( i , 22 ) ;
56809: LD_ADDR_VAR 0 2
56813: PUSH
56814: LD_VAR 0 3
56818: PPUSH
56819: LD_INT 22
56821: PPUSH
56822: CALL 55077 0 2
56826: ST_TO_ADDR
// if result then
56827: LD_VAR 0 2
56831: IFFALSE 56837
// exit ;
56833: POP
56834: POP
56835: GO 56841
// end ;
56837: GO 56806
56839: POP
56840: POP
// end ;
56841: LD_VAR 0 2
56845: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56846: LD_INT 0
56848: PPUSH
56849: PPUSH
// if not units then
56850: LD_VAR 0 1
56854: NOT
56855: IFFALSE 56859
// exit ;
56857: GO 56929
// result := [ ] ;
56859: LD_ADDR_VAR 0 3
56863: PUSH
56864: EMPTY
56865: ST_TO_ADDR
// for i in units do
56866: LD_ADDR_VAR 0 4
56870: PUSH
56871: LD_VAR 0 1
56875: PUSH
56876: FOR_IN
56877: IFFALSE 56927
// if GetTag ( i ) = tag then
56879: LD_VAR 0 4
56883: PPUSH
56884: CALL_OW 110
56888: PUSH
56889: LD_VAR 0 2
56893: EQUAL
56894: IFFALSE 56925
// result := Insert ( result , result + 1 , i ) ;
56896: LD_ADDR_VAR 0 3
56900: PUSH
56901: LD_VAR 0 3
56905: PPUSH
56906: LD_VAR 0 3
56910: PUSH
56911: LD_INT 1
56913: PLUS
56914: PPUSH
56915: LD_VAR 0 4
56919: PPUSH
56920: CALL_OW 2
56924: ST_TO_ADDR
56925: GO 56876
56927: POP
56928: POP
// end ;
56929: LD_VAR 0 3
56933: RET
// export function IsDriver ( un ) ; begin
56934: LD_INT 0
56936: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56937: LD_ADDR_VAR 0 2
56941: PUSH
56942: LD_VAR 0 1
56946: PUSH
56947: LD_INT 55
56949: PUSH
56950: EMPTY
56951: LIST
56952: PPUSH
56953: CALL_OW 69
56957: IN
56958: ST_TO_ADDR
// end ;
56959: LD_VAR 0 2
56963: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56964: LD_INT 0
56966: PPUSH
56967: PPUSH
// list := [ ] ;
56968: LD_ADDR_VAR 0 5
56972: PUSH
56973: EMPTY
56974: ST_TO_ADDR
// case d of 0 :
56975: LD_VAR 0 3
56979: PUSH
56980: LD_INT 0
56982: DOUBLE
56983: EQUAL
56984: IFTRUE 56988
56986: GO 57121
56988: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56989: LD_ADDR_VAR 0 5
56993: PUSH
56994: LD_VAR 0 1
56998: PUSH
56999: LD_INT 4
57001: MINUS
57002: PUSH
57003: LD_VAR 0 2
57007: PUSH
57008: LD_INT 4
57010: MINUS
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: PUSH
57020: LD_VAR 0 1
57024: PUSH
57025: LD_INT 3
57027: MINUS
57028: PUSH
57029: LD_VAR 0 2
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: PUSH
57042: LD_VAR 0 1
57046: PUSH
57047: LD_INT 4
57049: PLUS
57050: PUSH
57051: LD_VAR 0 2
57055: PUSH
57056: LD_INT 4
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: PUSH
57064: LD_VAR 0 1
57068: PUSH
57069: LD_INT 3
57071: PLUS
57072: PUSH
57073: LD_VAR 0 2
57077: PUSH
57078: LD_INT 3
57080: PLUS
57081: PUSH
57082: LD_INT 5
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: PUSH
57090: LD_VAR 0 1
57094: PUSH
57095: LD_VAR 0 2
57099: PUSH
57100: LD_INT 4
57102: PLUS
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: ST_TO_ADDR
// end ; 1 :
57119: GO 57819
57121: LD_INT 1
57123: DOUBLE
57124: EQUAL
57125: IFTRUE 57129
57127: GO 57262
57129: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57130: LD_ADDR_VAR 0 5
57134: PUSH
57135: LD_VAR 0 1
57139: PUSH
57140: LD_VAR 0 2
57144: PUSH
57145: LD_INT 4
57147: MINUS
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: PUSH
57157: LD_VAR 0 1
57161: PUSH
57162: LD_INT 3
57164: MINUS
57165: PUSH
57166: LD_VAR 0 2
57170: PUSH
57171: LD_INT 3
57173: MINUS
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: LIST
57182: PUSH
57183: LD_VAR 0 1
57187: PUSH
57188: LD_INT 4
57190: MINUS
57191: PUSH
57192: LD_VAR 0 2
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: PUSH
57205: LD_VAR 0 1
57209: PUSH
57210: LD_VAR 0 2
57214: PUSH
57215: LD_INT 3
57217: PLUS
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: LIST
57226: PUSH
57227: LD_VAR 0 1
57231: PUSH
57232: LD_INT 4
57234: PLUS
57235: PUSH
57236: LD_VAR 0 2
57240: PUSH
57241: LD_INT 4
57243: PLUS
57244: PUSH
57245: LD_INT 5
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: ST_TO_ADDR
// end ; 2 :
57260: GO 57819
57262: LD_INT 2
57264: DOUBLE
57265: EQUAL
57266: IFTRUE 57270
57268: GO 57399
57270: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57271: LD_ADDR_VAR 0 5
57275: PUSH
57276: LD_VAR 0 1
57280: PUSH
57281: LD_VAR 0 2
57285: PUSH
57286: LD_INT 3
57288: MINUS
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: PUSH
57298: LD_VAR 0 1
57302: PUSH
57303: LD_INT 4
57305: PLUS
57306: PUSH
57307: LD_VAR 0 2
57311: PUSH
57312: LD_INT 4
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: LIST
57319: PUSH
57320: LD_VAR 0 1
57324: PUSH
57325: LD_VAR 0 2
57329: PUSH
57330: LD_INT 4
57332: PLUS
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: LIST
57341: PUSH
57342: LD_VAR 0 1
57346: PUSH
57347: LD_INT 3
57349: MINUS
57350: PUSH
57351: LD_VAR 0 2
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: LIST
57363: PUSH
57364: LD_VAR 0 1
57368: PUSH
57369: LD_INT 4
57371: MINUS
57372: PUSH
57373: LD_VAR 0 2
57377: PUSH
57378: LD_INT 4
57380: MINUS
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: ST_TO_ADDR
// end ; 3 :
57397: GO 57819
57399: LD_INT 3
57401: DOUBLE
57402: EQUAL
57403: IFTRUE 57407
57405: GO 57540
57407: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57408: LD_ADDR_VAR 0 5
57412: PUSH
57413: LD_VAR 0 1
57417: PUSH
57418: LD_INT 3
57420: PLUS
57421: PUSH
57422: LD_VAR 0 2
57426: PUSH
57427: LD_INT 4
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: PUSH
57435: LD_VAR 0 1
57439: PUSH
57440: LD_INT 4
57442: PLUS
57443: PUSH
57444: LD_VAR 0 2
57448: PUSH
57449: LD_INT 4
57451: PLUS
57452: PUSH
57453: LD_INT 5
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: PUSH
57461: LD_VAR 0 1
57465: PUSH
57466: LD_INT 4
57468: MINUS
57469: PUSH
57470: LD_VAR 0 2
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: PUSH
57483: LD_VAR 0 1
57487: PUSH
57488: LD_VAR 0 2
57492: PUSH
57493: LD_INT 4
57495: MINUS
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: PUSH
57505: LD_VAR 0 1
57509: PUSH
57510: LD_INT 3
57512: MINUS
57513: PUSH
57514: LD_VAR 0 2
57518: PUSH
57519: LD_INT 3
57521: MINUS
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: ST_TO_ADDR
// end ; 4 :
57538: GO 57819
57540: LD_INT 4
57542: DOUBLE
57543: EQUAL
57544: IFTRUE 57548
57546: GO 57681
57548: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57549: LD_ADDR_VAR 0 5
57553: PUSH
57554: LD_VAR 0 1
57558: PUSH
57559: LD_VAR 0 2
57563: PUSH
57564: LD_INT 4
57566: PLUS
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: LIST
57575: PUSH
57576: LD_VAR 0 1
57580: PUSH
57581: LD_INT 3
57583: PLUS
57584: PUSH
57585: LD_VAR 0 2
57589: PUSH
57590: LD_INT 3
57592: PLUS
57593: PUSH
57594: LD_INT 5
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: LIST
57601: PUSH
57602: LD_VAR 0 1
57606: PUSH
57607: LD_INT 4
57609: PLUS
57610: PUSH
57611: LD_VAR 0 2
57615: PUSH
57616: LD_INT 4
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: LIST
57623: PUSH
57624: LD_VAR 0 1
57628: PUSH
57629: LD_VAR 0 2
57633: PUSH
57634: LD_INT 3
57636: MINUS
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: PUSH
57646: LD_VAR 0 1
57650: PUSH
57651: LD_INT 4
57653: MINUS
57654: PUSH
57655: LD_VAR 0 2
57659: PUSH
57660: LD_INT 4
57662: MINUS
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: ST_TO_ADDR
// end ; 5 :
57679: GO 57819
57681: LD_INT 5
57683: DOUBLE
57684: EQUAL
57685: IFTRUE 57689
57687: GO 57818
57689: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57690: LD_ADDR_VAR 0 5
57694: PUSH
57695: LD_VAR 0 1
57699: PUSH
57700: LD_INT 4
57702: MINUS
57703: PUSH
57704: LD_VAR 0 2
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: LIST
57716: PUSH
57717: LD_VAR 0 1
57721: PUSH
57722: LD_VAR 0 2
57726: PUSH
57727: LD_INT 4
57729: MINUS
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: PUSH
57739: LD_VAR 0 1
57743: PUSH
57744: LD_INT 4
57746: PLUS
57747: PUSH
57748: LD_VAR 0 2
57752: PUSH
57753: LD_INT 4
57755: PLUS
57756: PUSH
57757: LD_INT 5
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: LIST
57764: PUSH
57765: LD_VAR 0 1
57769: PUSH
57770: LD_INT 3
57772: PLUS
57773: PUSH
57774: LD_VAR 0 2
57778: PUSH
57779: LD_INT 4
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: PUSH
57787: LD_VAR 0 1
57791: PUSH
57792: LD_VAR 0 2
57796: PUSH
57797: LD_INT 3
57799: PLUS
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: LIST
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: ST_TO_ADDR
// end ; end ;
57816: GO 57819
57818: POP
// result := list ;
57819: LD_ADDR_VAR 0 4
57823: PUSH
57824: LD_VAR 0 5
57828: ST_TO_ADDR
// end ;
57829: LD_VAR 0 4
57833: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57834: LD_INT 0
57836: PPUSH
57837: PPUSH
57838: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57839: LD_VAR 0 1
57843: NOT
57844: PUSH
57845: LD_VAR 0 2
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: LD_INT 4
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: IN
57868: NOT
57869: OR
57870: IFFALSE 57874
// exit ;
57872: GO 57966
// tmp := [ ] ;
57874: LD_ADDR_VAR 0 5
57878: PUSH
57879: EMPTY
57880: ST_TO_ADDR
// for i in units do
57881: LD_ADDR_VAR 0 4
57885: PUSH
57886: LD_VAR 0 1
57890: PUSH
57891: FOR_IN
57892: IFFALSE 57935
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57894: LD_ADDR_VAR 0 5
57898: PUSH
57899: LD_VAR 0 5
57903: PPUSH
57904: LD_VAR 0 5
57908: PUSH
57909: LD_INT 1
57911: PLUS
57912: PPUSH
57913: LD_VAR 0 4
57917: PPUSH
57918: LD_VAR 0 2
57922: PPUSH
57923: CALL_OW 259
57927: PPUSH
57928: CALL_OW 2
57932: ST_TO_ADDR
57933: GO 57891
57935: POP
57936: POP
// if not tmp then
57937: LD_VAR 0 5
57941: NOT
57942: IFFALSE 57946
// exit ;
57944: GO 57966
// result := SortListByListDesc ( units , tmp ) ;
57946: LD_ADDR_VAR 0 3
57950: PUSH
57951: LD_VAR 0 1
57955: PPUSH
57956: LD_VAR 0 5
57960: PPUSH
57961: CALL_OW 77
57965: ST_TO_ADDR
// end ;
57966: LD_VAR 0 3
57970: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57971: LD_INT 0
57973: PPUSH
57974: PPUSH
57975: PPUSH
// x := GetX ( building ) ;
57976: LD_ADDR_VAR 0 4
57980: PUSH
57981: LD_VAR 0 2
57985: PPUSH
57986: CALL_OW 250
57990: ST_TO_ADDR
// y := GetY ( building ) ;
57991: LD_ADDR_VAR 0 5
57995: PUSH
57996: LD_VAR 0 2
58000: PPUSH
58001: CALL_OW 251
58005: ST_TO_ADDR
// if GetTaskList ( unit ) then
58006: LD_VAR 0 1
58010: PPUSH
58011: CALL_OW 437
58015: IFFALSE 58110
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58017: LD_STRING e
58019: PUSH
58020: LD_VAR 0 1
58024: PPUSH
58025: CALL_OW 437
58029: PUSH
58030: LD_INT 1
58032: ARRAY
58033: PUSH
58034: LD_INT 1
58036: ARRAY
58037: EQUAL
58038: PUSH
58039: LD_VAR 0 4
58043: PUSH
58044: LD_VAR 0 1
58048: PPUSH
58049: CALL_OW 437
58053: PUSH
58054: LD_INT 1
58056: ARRAY
58057: PUSH
58058: LD_INT 2
58060: ARRAY
58061: EQUAL
58062: AND
58063: PUSH
58064: LD_VAR 0 5
58068: PUSH
58069: LD_VAR 0 1
58073: PPUSH
58074: CALL_OW 437
58078: PUSH
58079: LD_INT 1
58081: ARRAY
58082: PUSH
58083: LD_INT 3
58085: ARRAY
58086: EQUAL
58087: AND
58088: IFFALSE 58100
// result := true else
58090: LD_ADDR_VAR 0 3
58094: PUSH
58095: LD_INT 1
58097: ST_TO_ADDR
58098: GO 58108
// result := false ;
58100: LD_ADDR_VAR 0 3
58104: PUSH
58105: LD_INT 0
58107: ST_TO_ADDR
// end else
58108: GO 58118
// result := false ;
58110: LD_ADDR_VAR 0 3
58114: PUSH
58115: LD_INT 0
58117: ST_TO_ADDR
// end ;
58118: LD_VAR 0 3
58122: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58123: LD_INT 0
58125: PPUSH
58126: PPUSH
58127: PPUSH
58128: PPUSH
// if not unit or not area then
58129: LD_VAR 0 1
58133: NOT
58134: PUSH
58135: LD_VAR 0 2
58139: NOT
58140: OR
58141: IFFALSE 58145
// exit ;
58143: GO 58309
// tmp := AreaToList ( area , i ) ;
58145: LD_ADDR_VAR 0 6
58149: PUSH
58150: LD_VAR 0 2
58154: PPUSH
58155: LD_VAR 0 5
58159: PPUSH
58160: CALL_OW 517
58164: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58165: LD_ADDR_VAR 0 5
58169: PUSH
58170: DOUBLE
58171: LD_INT 1
58173: DEC
58174: ST_TO_ADDR
58175: LD_VAR 0 6
58179: PUSH
58180: LD_INT 1
58182: ARRAY
58183: PUSH
58184: FOR_TO
58185: IFFALSE 58307
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58187: LD_ADDR_VAR 0 7
58191: PUSH
58192: LD_VAR 0 6
58196: PUSH
58197: LD_INT 1
58199: ARRAY
58200: PUSH
58201: LD_VAR 0 5
58205: ARRAY
58206: PUSH
58207: LD_VAR 0 6
58211: PUSH
58212: LD_INT 2
58214: ARRAY
58215: PUSH
58216: LD_VAR 0 5
58220: ARRAY
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58226: LD_VAR 0 7
58230: PUSH
58231: LD_INT 1
58233: ARRAY
58234: PPUSH
58235: LD_VAR 0 7
58239: PUSH
58240: LD_INT 2
58242: ARRAY
58243: PPUSH
58244: CALL_OW 428
58248: PUSH
58249: LD_INT 0
58251: EQUAL
58252: IFFALSE 58305
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58254: LD_VAR 0 1
58258: PPUSH
58259: LD_VAR 0 7
58263: PUSH
58264: LD_INT 1
58266: ARRAY
58267: PPUSH
58268: LD_VAR 0 7
58272: PUSH
58273: LD_INT 2
58275: ARRAY
58276: PPUSH
58277: LD_VAR 0 3
58281: PPUSH
58282: CALL_OW 48
// result := IsPlaced ( unit ) ;
58286: LD_ADDR_VAR 0 4
58290: PUSH
58291: LD_VAR 0 1
58295: PPUSH
58296: CALL_OW 305
58300: ST_TO_ADDR
// exit ;
58301: POP
58302: POP
58303: GO 58309
// end ; end ;
58305: GO 58184
58307: POP
58308: POP
// end ;
58309: LD_VAR 0 4
58313: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58314: LD_INT 0
58316: PPUSH
58317: PPUSH
58318: PPUSH
// if not side or side > 8 then
58319: LD_VAR 0 1
58323: NOT
58324: PUSH
58325: LD_VAR 0 1
58329: PUSH
58330: LD_INT 8
58332: GREATER
58333: OR
58334: IFFALSE 58338
// exit ;
58336: GO 58525
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58338: LD_ADDR_VAR 0 4
58342: PUSH
58343: LD_INT 22
58345: PUSH
58346: LD_VAR 0 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 21
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PPUSH
58369: CALL_OW 69
58373: ST_TO_ADDR
// if not tmp then
58374: LD_VAR 0 4
58378: NOT
58379: IFFALSE 58383
// exit ;
58381: GO 58525
// enable_addtolog := true ;
58383: LD_ADDR_OWVAR 81
58387: PUSH
58388: LD_INT 1
58390: ST_TO_ADDR
// AddToLog ( [ ) ;
58391: LD_STRING [
58393: PPUSH
58394: CALL_OW 561
// for i in tmp do
58398: LD_ADDR_VAR 0 3
58402: PUSH
58403: LD_VAR 0 4
58407: PUSH
58408: FOR_IN
58409: IFFALSE 58516
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58411: LD_STRING [
58413: PUSH
58414: LD_VAR 0 3
58418: PPUSH
58419: CALL_OW 266
58423: STR
58424: PUSH
58425: LD_STRING , 
58427: STR
58428: PUSH
58429: LD_VAR 0 3
58433: PPUSH
58434: CALL_OW 250
58438: STR
58439: PUSH
58440: LD_STRING , 
58442: STR
58443: PUSH
58444: LD_VAR 0 3
58448: PPUSH
58449: CALL_OW 251
58453: STR
58454: PUSH
58455: LD_STRING , 
58457: STR
58458: PUSH
58459: LD_VAR 0 3
58463: PPUSH
58464: CALL_OW 254
58468: STR
58469: PUSH
58470: LD_STRING , 
58472: STR
58473: PUSH
58474: LD_VAR 0 3
58478: PPUSH
58479: LD_INT 1
58481: PPUSH
58482: CALL_OW 268
58486: STR
58487: PUSH
58488: LD_STRING , 
58490: STR
58491: PUSH
58492: LD_VAR 0 3
58496: PPUSH
58497: LD_INT 2
58499: PPUSH
58500: CALL_OW 268
58504: STR
58505: PUSH
58506: LD_STRING ],
58508: STR
58509: PPUSH
58510: CALL_OW 561
// end ;
58514: GO 58408
58516: POP
58517: POP
// AddToLog ( ]; ) ;
58518: LD_STRING ];
58520: PPUSH
58521: CALL_OW 561
// end ;
58525: LD_VAR 0 2
58529: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58530: LD_INT 0
58532: PPUSH
58533: PPUSH
58534: PPUSH
58535: PPUSH
58536: PPUSH
// if not area or not rate or not max then
58537: LD_VAR 0 1
58541: NOT
58542: PUSH
58543: LD_VAR 0 2
58547: NOT
58548: OR
58549: PUSH
58550: LD_VAR 0 4
58554: NOT
58555: OR
58556: IFFALSE 58560
// exit ;
58558: GO 58752
// while 1 do
58560: LD_INT 1
58562: IFFALSE 58752
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58564: LD_ADDR_VAR 0 9
58568: PUSH
58569: LD_VAR 0 1
58573: PPUSH
58574: LD_INT 1
58576: PPUSH
58577: CALL_OW 287
58581: PUSH
58582: LD_INT 10
58584: MUL
58585: ST_TO_ADDR
// r := rate / 10 ;
58586: LD_ADDR_VAR 0 7
58590: PUSH
58591: LD_VAR 0 2
58595: PUSH
58596: LD_INT 10
58598: DIVREAL
58599: ST_TO_ADDR
// time := 1 1$00 ;
58600: LD_ADDR_VAR 0 8
58604: PUSH
58605: LD_INT 2100
58607: ST_TO_ADDR
// if amount < min then
58608: LD_VAR 0 9
58612: PUSH
58613: LD_VAR 0 3
58617: LESS
58618: IFFALSE 58636
// r := r * 2 else
58620: LD_ADDR_VAR 0 7
58624: PUSH
58625: LD_VAR 0 7
58629: PUSH
58630: LD_INT 2
58632: MUL
58633: ST_TO_ADDR
58634: GO 58662
// if amount > max then
58636: LD_VAR 0 9
58640: PUSH
58641: LD_VAR 0 4
58645: GREATER
58646: IFFALSE 58662
// r := r / 2 ;
58648: LD_ADDR_VAR 0 7
58652: PUSH
58653: LD_VAR 0 7
58657: PUSH
58658: LD_INT 2
58660: DIVREAL
58661: ST_TO_ADDR
// time := time / r ;
58662: LD_ADDR_VAR 0 8
58666: PUSH
58667: LD_VAR 0 8
58671: PUSH
58672: LD_VAR 0 7
58676: DIVREAL
58677: ST_TO_ADDR
// if time < 0 then
58678: LD_VAR 0 8
58682: PUSH
58683: LD_INT 0
58685: LESS
58686: IFFALSE 58703
// time := time * - 1 ;
58688: LD_ADDR_VAR 0 8
58692: PUSH
58693: LD_VAR 0 8
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: MUL
58702: ST_TO_ADDR
// wait ( time ) ;
58703: LD_VAR 0 8
58707: PPUSH
58708: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58712: LD_INT 35
58714: PPUSH
58715: LD_INT 875
58717: PPUSH
58718: CALL_OW 12
58722: PPUSH
58723: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58727: LD_INT 1
58729: PPUSH
58730: LD_INT 5
58732: PPUSH
58733: CALL_OW 12
58737: PPUSH
58738: LD_VAR 0 1
58742: PPUSH
58743: LD_INT 1
58745: PPUSH
58746: CALL_OW 55
// end ;
58750: GO 58560
// end ;
58752: LD_VAR 0 5
58756: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58757: LD_INT 0
58759: PPUSH
58760: PPUSH
58761: PPUSH
58762: PPUSH
58763: PPUSH
58764: PPUSH
58765: PPUSH
58766: PPUSH
// if not turrets or not factories then
58767: LD_VAR 0 1
58771: NOT
58772: PUSH
58773: LD_VAR 0 2
58777: NOT
58778: OR
58779: IFFALSE 58783
// exit ;
58781: GO 59090
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58783: LD_ADDR_VAR 0 10
58787: PUSH
58788: LD_INT 5
58790: PUSH
58791: LD_INT 6
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: LD_INT 4
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 5
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 24
58825: PUSH
58826: LD_INT 25
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 23
58835: PUSH
58836: LD_INT 27
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 42
58849: PUSH
58850: LD_INT 43
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 44
58859: PUSH
58860: LD_INT 46
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 45
58869: PUSH
58870: LD_INT 47
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: LIST
58886: ST_TO_ADDR
// result := [ ] ;
58887: LD_ADDR_VAR 0 3
58891: PUSH
58892: EMPTY
58893: ST_TO_ADDR
// for i in turrets do
58894: LD_ADDR_VAR 0 4
58898: PUSH
58899: LD_VAR 0 1
58903: PUSH
58904: FOR_IN
58905: IFFALSE 59088
// begin nat := GetNation ( i ) ;
58907: LD_ADDR_VAR 0 7
58911: PUSH
58912: LD_VAR 0 4
58916: PPUSH
58917: CALL_OW 248
58921: ST_TO_ADDR
// weapon := 0 ;
58922: LD_ADDR_VAR 0 8
58926: PUSH
58927: LD_INT 0
58929: ST_TO_ADDR
// if not nat then
58930: LD_VAR 0 7
58934: NOT
58935: IFFALSE 58939
// continue ;
58937: GO 58904
// for j in list [ nat ] do
58939: LD_ADDR_VAR 0 5
58943: PUSH
58944: LD_VAR 0 10
58948: PUSH
58949: LD_VAR 0 7
58953: ARRAY
58954: PUSH
58955: FOR_IN
58956: IFFALSE 58997
// if GetBWeapon ( i ) = j [ 1 ] then
58958: LD_VAR 0 4
58962: PPUSH
58963: CALL_OW 269
58967: PUSH
58968: LD_VAR 0 5
58972: PUSH
58973: LD_INT 1
58975: ARRAY
58976: EQUAL
58977: IFFALSE 58995
// begin weapon := j [ 2 ] ;
58979: LD_ADDR_VAR 0 8
58983: PUSH
58984: LD_VAR 0 5
58988: PUSH
58989: LD_INT 2
58991: ARRAY
58992: ST_TO_ADDR
// break ;
58993: GO 58997
// end ;
58995: GO 58955
58997: POP
58998: POP
// if not weapon then
58999: LD_VAR 0 8
59003: NOT
59004: IFFALSE 59008
// continue ;
59006: GO 58904
// for k in factories do
59008: LD_ADDR_VAR 0 6
59012: PUSH
59013: LD_VAR 0 2
59017: PUSH
59018: FOR_IN
59019: IFFALSE 59084
// begin weapons := AvailableWeaponList ( k ) ;
59021: LD_ADDR_VAR 0 9
59025: PUSH
59026: LD_VAR 0 6
59030: PPUSH
59031: CALL_OW 478
59035: ST_TO_ADDR
// if not weapons then
59036: LD_VAR 0 9
59040: NOT
59041: IFFALSE 59045
// continue ;
59043: GO 59018
// if weapon in weapons then
59045: LD_VAR 0 8
59049: PUSH
59050: LD_VAR 0 9
59054: IN
59055: IFFALSE 59082
// begin result := [ i , weapon ] ;
59057: LD_ADDR_VAR 0 3
59061: PUSH
59062: LD_VAR 0 4
59066: PUSH
59067: LD_VAR 0 8
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: ST_TO_ADDR
// exit ;
59076: POP
59077: POP
59078: POP
59079: POP
59080: GO 59090
// end ; end ;
59082: GO 59018
59084: POP
59085: POP
// end ;
59086: GO 58904
59088: POP
59089: POP
// end ;
59090: LD_VAR 0 3
59094: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59095: LD_INT 0
59097: PPUSH
// if not side or side > 8 then
59098: LD_VAR 0 3
59102: NOT
59103: PUSH
59104: LD_VAR 0 3
59108: PUSH
59109: LD_INT 8
59111: GREATER
59112: OR
59113: IFFALSE 59117
// exit ;
59115: GO 59176
// if not range then
59117: LD_VAR 0 4
59121: NOT
59122: IFFALSE 59133
// range := - 12 ;
59124: LD_ADDR_VAR 0 4
59128: PUSH
59129: LD_INT 12
59131: NEG
59132: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59133: LD_VAR 0 1
59137: PPUSH
59138: LD_VAR 0 2
59142: PPUSH
59143: LD_VAR 0 3
59147: PPUSH
59148: LD_VAR 0 4
59152: PPUSH
59153: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59157: LD_VAR 0 1
59161: PPUSH
59162: LD_VAR 0 2
59166: PPUSH
59167: LD_VAR 0 3
59171: PPUSH
59172: CALL_OW 331
// end ;
59176: LD_VAR 0 5
59180: RET
// export function Video ( mode ) ; begin
59181: LD_INT 0
59183: PPUSH
// ingame_video = mode ;
59184: LD_ADDR_OWVAR 52
59188: PUSH
59189: LD_VAR 0 1
59193: ST_TO_ADDR
// interface_hidden = mode ;
59194: LD_ADDR_OWVAR 54
59198: PUSH
59199: LD_VAR 0 1
59203: ST_TO_ADDR
// end ;
59204: LD_VAR 0 2
59208: RET
// export function Join ( array , element ) ; begin
59209: LD_INT 0
59211: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59212: LD_ADDR_VAR 0 3
59216: PUSH
59217: LD_VAR 0 1
59221: PPUSH
59222: LD_VAR 0 1
59226: PUSH
59227: LD_INT 1
59229: PLUS
59230: PPUSH
59231: LD_VAR 0 2
59235: PPUSH
59236: CALL_OW 1
59240: ST_TO_ADDR
// end ;
59241: LD_VAR 0 3
59245: RET
// export function JoinUnion ( array , element ) ; begin
59246: LD_INT 0
59248: PPUSH
// result := array union element ;
59249: LD_ADDR_VAR 0 3
59253: PUSH
59254: LD_VAR 0 1
59258: PUSH
59259: LD_VAR 0 2
59263: UNION
59264: ST_TO_ADDR
// end ;
59265: LD_VAR 0 3
59269: RET
// export function GetBehemoths ( side ) ; begin
59270: LD_INT 0
59272: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59273: LD_ADDR_VAR 0 2
59277: PUSH
59278: LD_INT 22
59280: PUSH
59281: LD_VAR 0 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 31
59292: PUSH
59293: LD_INT 25
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PPUSH
59304: CALL_OW 69
59308: ST_TO_ADDR
// end ;
59309: LD_VAR 0 2
59313: RET
// export function Shuffle ( array ) ; var i , index ; begin
59314: LD_INT 0
59316: PPUSH
59317: PPUSH
59318: PPUSH
// result := [ ] ;
59319: LD_ADDR_VAR 0 2
59323: PUSH
59324: EMPTY
59325: ST_TO_ADDR
// if not array then
59326: LD_VAR 0 1
59330: NOT
59331: IFFALSE 59335
// exit ;
59333: GO 59434
// Randomize ;
59335: CALL_OW 10
// for i = array downto 1 do
59339: LD_ADDR_VAR 0 3
59343: PUSH
59344: DOUBLE
59345: LD_VAR 0 1
59349: INC
59350: ST_TO_ADDR
59351: LD_INT 1
59353: PUSH
59354: FOR_DOWNTO
59355: IFFALSE 59432
// begin index := rand ( 1 , array ) ;
59357: LD_ADDR_VAR 0 4
59361: PUSH
59362: LD_INT 1
59364: PPUSH
59365: LD_VAR 0 1
59369: PPUSH
59370: CALL_OW 12
59374: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59375: LD_ADDR_VAR 0 2
59379: PUSH
59380: LD_VAR 0 2
59384: PPUSH
59385: LD_VAR 0 2
59389: PUSH
59390: LD_INT 1
59392: PLUS
59393: PPUSH
59394: LD_VAR 0 1
59398: PUSH
59399: LD_VAR 0 4
59403: ARRAY
59404: PPUSH
59405: CALL_OW 2
59409: ST_TO_ADDR
// array := Delete ( array , index ) ;
59410: LD_ADDR_VAR 0 1
59414: PUSH
59415: LD_VAR 0 1
59419: PPUSH
59420: LD_VAR 0 4
59424: PPUSH
59425: CALL_OW 3
59429: ST_TO_ADDR
// end ;
59430: GO 59354
59432: POP
59433: POP
// end ;
59434: LD_VAR 0 2
59438: RET
// export function GetBaseMaterials ( base ) ; begin
59439: LD_INT 0
59441: PPUSH
// result := [ 0 , 0 , 0 ] ;
59442: LD_ADDR_VAR 0 2
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: ST_TO_ADDR
// if not base then
59461: LD_VAR 0 1
59465: NOT
59466: IFFALSE 59470
// exit ;
59468: GO 59519
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59470: LD_ADDR_VAR 0 2
59474: PUSH
59475: LD_VAR 0 1
59479: PPUSH
59480: LD_INT 1
59482: PPUSH
59483: CALL_OW 275
59487: PUSH
59488: LD_VAR 0 1
59492: PPUSH
59493: LD_INT 2
59495: PPUSH
59496: CALL_OW 275
59500: PUSH
59501: LD_VAR 0 1
59505: PPUSH
59506: LD_INT 3
59508: PPUSH
59509: CALL_OW 275
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: LIST
59518: ST_TO_ADDR
// end ;
59519: LD_VAR 0 2
59523: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59524: LD_INT 0
59526: PPUSH
59527: PPUSH
// result := array ;
59528: LD_ADDR_VAR 0 3
59532: PUSH
59533: LD_VAR 0 1
59537: ST_TO_ADDR
// if size > 0 then
59538: LD_VAR 0 2
59542: PUSH
59543: LD_INT 0
59545: GREATER
59546: IFFALSE 59592
// for i := array downto size do
59548: LD_ADDR_VAR 0 4
59552: PUSH
59553: DOUBLE
59554: LD_VAR 0 1
59558: INC
59559: ST_TO_ADDR
59560: LD_VAR 0 2
59564: PUSH
59565: FOR_DOWNTO
59566: IFFALSE 59590
// result := Delete ( result , result ) ;
59568: LD_ADDR_VAR 0 3
59572: PUSH
59573: LD_VAR 0 3
59577: PPUSH
59578: LD_VAR 0 3
59582: PPUSH
59583: CALL_OW 3
59587: ST_TO_ADDR
59588: GO 59565
59590: POP
59591: POP
// end ;
59592: LD_VAR 0 3
59596: RET
// export function ComExit ( unit ) ; var tmp ; begin
59597: LD_INT 0
59599: PPUSH
59600: PPUSH
// if not IsInUnit ( unit ) then
59601: LD_VAR 0 1
59605: PPUSH
59606: CALL_OW 310
59610: NOT
59611: IFFALSE 59615
// exit ;
59613: GO 59675
// tmp := IsInUnit ( unit ) ;
59615: LD_ADDR_VAR 0 3
59619: PUSH
59620: LD_VAR 0 1
59624: PPUSH
59625: CALL_OW 310
59629: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59630: LD_VAR 0 3
59634: PPUSH
59635: CALL_OW 247
59639: PUSH
59640: LD_INT 2
59642: EQUAL
59643: IFFALSE 59656
// ComExitVehicle ( unit ) else
59645: LD_VAR 0 1
59649: PPUSH
59650: CALL_OW 121
59654: GO 59665
// ComExitBuilding ( unit ) ;
59656: LD_VAR 0 1
59660: PPUSH
59661: CALL_OW 122
// result := tmp ;
59665: LD_ADDR_VAR 0 2
59669: PUSH
59670: LD_VAR 0 3
59674: ST_TO_ADDR
// end ;
59675: LD_VAR 0 2
59679: RET
// export function ResetHc ; begin
59680: LD_INT 0
59682: PPUSH
// InitHc ;
59683: CALL_OW 19
// hc_importance := 0 ;
59687: LD_ADDR_OWVAR 32
59691: PUSH
59692: LD_INT 0
59694: ST_TO_ADDR
// end ;
59695: LD_VAR 0 1
59699: RET
