// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 226 0 0
// omarStatus = 0 ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// stevensStatus = 0 ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// labDestroyed = 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  48: LD_ADDR_EXP 5
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  55: LD_ADDR_EXP 6
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  62: LD_ADDR_EXP 4
  66: PUSH
  67: LD_STRING 05_TanksIntro_1
  69: PPUSH
  70: EMPTY
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// actionTime = 0 0$00 ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  85: LD_ADDR_EXP 10
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
  93: LD_ADDR_EXP 11
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// sawArabianBase = false ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// sawApeman = false ;
 109: LD_ADDR_EXP 9
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// stevensPlaced = false ;
 117: LD_ADDR_EXP 14
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// stevensFollow = false ;
 125: LD_ADDR_EXP 15
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// stevensDepot = false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// stevensWasInDepot = false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// stevensCanExitMap = false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// cratesSpawned = 0 ;
 165: LD_ADDR_EXP 22
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// fastBreakthrough = false ;
 173: LD_ADDR_EXP 23
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// finishMissionBool = false ;
 181: LD_ADDR_EXP 24
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// omarCanExitMap = false ;
 189: LD_ADDR_EXP 20
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// arabianCanExitMap = false ;
 197: LD_ADDR_EXP 21
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// PrepareRussians ;
 205: CALL 902 0 0
// PrepareArabians ;
 209: CALL 1649 0 0
// Nef_PrepareNature ;
 213: CALL 19551 0 0
// MissionIntro ;
 217: CALL 3017 0 0
// end ; end_of_file
 221: LD_VAR 0 1
 225: RET
// export function InitMapConfig ; begin
 226: LD_INT 0
 228: PPUSH
// BaseMapConfig ;
 229: CALL 242 0 0
// MissionMapConfig ;
 233: CALL 332 0 0
// end ;
 237: LD_VAR 0 1
 241: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 242: LD_INT 0
 244: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 245: LD_ADDR_EXP 25
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 1
 258: PUSH
 259: LD_INT 0
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 2
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 2
 285: PUSH
 286: LD_INT 2
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: ST_TO_ADDR
// animalsAgression = 0 ;
 295: LD_ADDR_EXP 27
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// debugMode = 0 ;
 303: LD_ADDR_EXP 30
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// missionPrefix = 05_ ;
 311: LD_ADDR_EXP 28
 315: PUSH
 316: LD_STRING 05_
 318: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 319: LD_ADDR_EXP 29
 323: PUSH
 324: LD_STRING 04_
 326: ST_TO_ADDR
// end ;
 327: LD_VAR 0 1
 331: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 332: LD_INT 0
 334: PPUSH
// enemySkillLevel = [ 4 , 5 , 5 ] [ Difficulty ] ;
 335: LD_ADDR_EXP 31
 339: PUSH
 340: LD_INT 4
 342: PUSH
 343: LD_INT 5
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_OWVAR 67
 358: ARRAY
 359: ST_TO_ADDR
// arabBreakthrough = [ 35 35$0 , 33 33$0 , 30 30$0 ] [ Difficulty ] ;
 360: LD_ADDR_EXP 32
 364: PUSH
 365: LD_INT 73500
 367: PUSH
 368: LD_INT 69300
 370: PUSH
 371: LD_INT 63000
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_OWVAR 67
 383: ARRAY
 384: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 385: LD_ADDR_EXP 33
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: LD_INT 1
 395: PUSH
 396: LD_INT 6
 398: PUSH
 399: LD_INT 3
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: ST_TO_ADDR
// arabianPatrolVehiclesAmount = [ 1 , 2 , 3 ] [ Difficulty ] ;
 408: LD_ADDR_EXP 34
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: LD_INT 2
 418: PUSH
 419: LD_INT 3
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: LIST
 426: PUSH
 427: LD_OWVAR 67
 431: ARRAY
 432: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 ] [ Difficulty ] ;
 433: LD_ADDR_EXP 35
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_OWVAR 67
 456: ARRAY
 457: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 458: LD_ADDR_EXP 36
 462: PUSH
 463: LD_INT 108
 465: PUSH
 466: LD_INT 15
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 102
 475: PUSH
 476: LD_INT 45
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 65
 485: PUSH
 486: LD_INT 23
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 37
 495: PUSH
 496: LD_INT 28
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 32
 505: PUSH
 506: LD_INT 40
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 45
 515: PUSH
 516: LD_INT 74
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 69
 525: PUSH
 526: LD_INT 98
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 101
 535: PUSH
 536: LD_INT 101
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 117
 545: PUSH
 546: LD_INT 84
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: LD_INT 158
 555: PUSH
 556: LD_INT 132
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: EMPTY
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: ST_TO_ADDR
// end ;
 575: LD_VAR 0 1
 579: RET
// every 0 0$1 trigger debugMode do var i ;
 580: LD_EXP 30
 584: IFFALSE 899
 586: GO 588
 588: DISABLE
 589: LD_INT 0
 591: PPUSH
// begin enable ;
 592: ENABLE
// FogOff ( your_side ) ;
 593: LD_OWVAR 2
 597: PPUSH
 598: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 602: LD_ADDR_VAR 0 1
 606: PUSH
 607: LD_INT 22
 609: PUSH
 610: LD_OWVAR 2
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 2
 621: PUSH
 622: LD_INT 21
 624: PUSH
 625: LD_INT 1
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: PUSH
 632: LD_INT 21
 634: PUSH
 635: LD_INT 2
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PPUSH
 651: CALL_OW 69
 655: PUSH
 656: FOR_IN
 657: IFFALSE 673
// SetLives ( i , 1000 ) ;
 659: LD_VAR 0 1
 663: PPUSH
 664: LD_INT 1000
 666: PPUSH
 667: CALL_OW 234
 671: GO 656
 673: POP
 674: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 675: LD_ADDR_VAR 0 1
 679: PUSH
 680: LD_INT 22
 682: PUSH
 683: LD_OWVAR 2
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 21
 694: PUSH
 695: LD_INT 1
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: PUSH
 711: FOR_IN
 712: IFFALSE 776
// begin SetSkill ( i , skill_combat , 10 ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 10
 724: PPUSH
 725: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: LD_INT 2
 736: PPUSH
 737: LD_INT 10
 739: PPUSH
 740: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 744: LD_VAR 0 1
 748: PPUSH
 749: LD_INT 3
 751: PPUSH
 752: LD_INT 10
 754: PPUSH
 755: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 759: LD_VAR 0 1
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 10
 769: PPUSH
 770: CALL_OW 237
// end ;
 774: GO 711
 776: POP
 777: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 778: LD_ADDR_VAR 0 1
 782: PUSH
 783: LD_INT 22
 785: PUSH
 786: LD_OWVAR 2
 790: PUSH
 791: EMPTY
 792: LIST
 793: LIST
 794: PUSH
 795: LD_INT 2
 797: PUSH
 798: LD_INT 30
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: PUSH
 808: LD_INT 30
 810: PUSH
 811: LD_INT 1
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PPUSH
 827: CALL_OW 69
 831: PUSH
 832: FOR_IN
 833: IFFALSE 897
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 835: LD_VAR 0 1
 839: PPUSH
 840: CALL_OW 274
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: LD_INT 9999
 850: PPUSH
 851: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 855: LD_VAR 0 1
 859: PPUSH
 860: CALL_OW 274
 864: PPUSH
 865: LD_INT 2
 867: PPUSH
 868: LD_INT 9999
 870: PPUSH
 871: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 274
 884: PPUSH
 885: LD_INT 3
 887: PPUSH
 888: LD_INT 9999
 890: PPUSH
 891: CALL_OW 277
// end ;
 895: GO 832
 897: POP
 898: POP
// end ; end_of_file
 899: PPOPN 1
 901: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 902: LD_INT 0
 904: PPUSH
// PrepareHeroes ;
 905: CALL 914 0 0
// end ;
 909: LD_VAR 0 1
 913: RET
// function PrepareHeroes ; var i , car ; begin
 914: LD_INT 0
 916: PPUSH
 917: PPUSH
 918: PPUSH
// ruCars = [ ] ;
 919: LD_ADDR_EXP 46
 923: PUSH
 924: EMPTY
 925: ST_TO_ADDR
// uc_side = 3 ;
 926: LD_ADDR_OWVAR 20
 930: PUSH
 931: LD_INT 3
 933: ST_TO_ADDR
// uc_nation = 3 ;
 934: LD_ADDR_OWVAR 21
 938: PUSH
 939: LD_INT 3
 941: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 942: LD_ADDR_EXP 37
 946: PUSH
 947: LD_STRING Burlak
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 3
 955: PPUSH
 956: CALL 8453 0 3
 960: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 961: LD_ADDR_EXP 42
 965: PUSH
 966: LD_STRING Titov
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: LD_INT 1
 974: PPUSH
 975: CALL 8453 0 3
 979: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 980: LD_ADDR_EXP 43
 984: PUSH
 985: LD_STRING Dolgov
 987: PPUSH
 988: LD_INT 0
 990: PPUSH
 991: LD_INT 4
 993: PPUSH
 994: CALL 8453 0 3
 998: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
 999: LD_ADDR_EXP 44
1003: PUSH
1004: LD_STRING Lipshchin
1006: PPUSH
1007: LD_INT 0
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: CALL 8453 0 3
1017: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1018: LD_ADDR_EXP 38
1022: PUSH
1023: LD_STRING Karamazov
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: LD_INT 2
1031: PPUSH
1032: CALL 8453 0 3
1036: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1037: LD_ADDR_EXP 39
1041: PUSH
1042: LD_STRING Petrovova
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_INT 1
1050: PPUSH
1051: CALL 8453 0 3
1055: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1056: LD_ADDR_EXP 40
1060: PUSH
1061: LD_STRING Gleb
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: CALL 8453 0 3
1074: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1075: LD_ADDR_EXP 41
1079: PUSH
1080: LD_STRING Petrosyan
1082: PPUSH
1083: LD_INT 0
1085: PPUSH
1086: LD_INT 4
1088: PPUSH
1089: CALL 8453 0 3
1093: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1094: LD_ADDR_EXP 45
1098: PUSH
1099: LD_STRING Platonov
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: LD_INT 0
1107: PPUSH
1108: CALL 8453 0 3
1112: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1113: LD_ADDR_VAR 0 2
1117: PUSH
1118: DOUBLE
1119: LD_INT 1
1121: DEC
1122: ST_TO_ADDR
1123: LD_EXP 4
1127: PUSH
1128: FOR_TO
1129: IFFALSE 1507
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1131: LD_ADDR_OWVAR 37
1135: PUSH
1136: LD_EXP 4
1140: PUSH
1141: LD_VAR 0 2
1145: ARRAY
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1151: LD_ADDR_OWVAR 39
1155: PUSH
1156: LD_EXP 4
1160: PUSH
1161: LD_VAR 0 2
1165: ARRAY
1166: PUSH
1167: LD_INT 2
1169: ARRAY
1170: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1171: LD_ADDR_OWVAR 38
1175: PUSH
1176: LD_EXP 4
1180: PUSH
1181: LD_VAR 0 2
1185: ARRAY
1186: PUSH
1187: LD_INT 3
1189: ARRAY
1190: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1191: LD_ADDR_OWVAR 40
1195: PUSH
1196: LD_EXP 4
1200: PUSH
1201: LD_VAR 0 2
1205: ARRAY
1206: PUSH
1207: LD_INT 4
1209: ARRAY
1210: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1211: LD_ADDR_OWVAR 24
1215: PUSH
1216: LD_INT 3
1218: PPUSH
1219: LD_INT 4
1221: PPUSH
1222: CALL_OW 12
1226: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1227: LD_ADDR_OWVAR 41
1231: PUSH
1232: LD_INT 25
1234: PPUSH
1235: LD_INT 40
1237: PPUSH
1238: CALL_OW 12
1242: ST_TO_ADDR
// car := CreateVehicle ;
1243: LD_ADDR_VAR 0 3
1247: PUSH
1248: CALL_OW 45
1252: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1253: LD_ADDR_EXP 46
1257: PUSH
1258: LD_EXP 46
1262: PUSH
1263: LD_VAR 0 3
1267: ADD
1268: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1269: LD_EXP 4
1273: PUSH
1274: LD_VAR 0 2
1278: ARRAY
1279: PUSH
1280: LD_INT 5
1282: ARRAY
1283: PUSH
1284: LD_STRING Bur
1286: DOUBLE
1287: EQUAL
1288: IFTRUE 1292
1290: GO 1309
1292: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1293: LD_EXP 37
1297: PPUSH
1298: LD_VAR 0 3
1302: PPUSH
1303: CALL_OW 52
1307: GO 1485
1309: LD_STRING Kar
1311: DOUBLE
1312: EQUAL
1313: IFTRUE 1317
1315: GO 1334
1317: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1318: LD_EXP 38
1322: PPUSH
1323: LD_VAR 0 3
1327: PPUSH
1328: CALL_OW 52
1332: GO 1485
1334: LD_STRING Ptr
1336: DOUBLE
1337: EQUAL
1338: IFTRUE 1342
1340: GO 1359
1342: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1343: LD_EXP 39
1347: PPUSH
1348: LD_VAR 0 3
1352: PPUSH
1353: CALL_OW 52
1357: GO 1485
1359: LD_STRING Glb
1361: DOUBLE
1362: EQUAL
1363: IFTRUE 1367
1365: GO 1384
1367: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1368: LD_EXP 40
1372: PPUSH
1373: LD_VAR 0 3
1377: PPUSH
1378: CALL_OW 52
1382: GO 1485
1384: LD_STRING Pet
1386: DOUBLE
1387: EQUAL
1388: IFTRUE 1392
1390: GO 1409
1392: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1393: LD_EXP 41
1397: PPUSH
1398: LD_VAR 0 3
1402: PPUSH
1403: CALL_OW 52
1407: GO 1485
1409: LD_STRING Dol
1411: DOUBLE
1412: EQUAL
1413: IFTRUE 1417
1415: GO 1434
1417: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1418: LD_EXP 43
1422: PPUSH
1423: LD_VAR 0 3
1427: PPUSH
1428: CALL_OW 52
1432: GO 1485
1434: LD_STRING Lip
1436: DOUBLE
1437: EQUAL
1438: IFTRUE 1442
1440: GO 1459
1442: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1443: LD_EXP 44
1447: PPUSH
1448: LD_VAR 0 3
1452: PPUSH
1453: CALL_OW 52
1457: GO 1485
1459: LD_STRING Tit
1461: DOUBLE
1462: EQUAL
1463: IFTRUE 1467
1465: GO 1484
1467: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1468: LD_EXP 42
1472: PPUSH
1473: LD_VAR 0 3
1477: PPUSH
1478: CALL_OW 52
1482: GO 1485
1484: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1485: LD_VAR 0 3
1489: PPUSH
1490: LD_INT 251
1492: PPUSH
1493: LD_INT 800
1495: PPUSH
1496: CALL_OW 12
1500: PPUSH
1501: CALL_OW 234
// end ;
1505: GO 1128
1507: POP
1508: POP
// for i in ruCars do
1509: LD_ADDR_VAR 0 2
1513: PUSH
1514: LD_EXP 46
1518: PUSH
1519: FOR_IN
1520: IFFALSE 1539
// PlaceUnitArea ( i , ru_place2 , false ) ;
1522: LD_VAR 0 2
1526: PPUSH
1527: LD_INT 18
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 49
1537: GO 1519
1539: POP
1540: POP
// RevealFogArea ( 3 , co_vidi ) ;
1541: LD_INT 3
1543: PPUSH
1544: LD_INT 19
1546: PPUSH
1547: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1551: LD_EXP 46
1555: PPUSH
1556: LD_INT 3
1558: PPUSH
1559: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1563: LD_INT 4
1565: PPUSH
1566: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1570: LD_EXP 37
1574: PPUSH
1575: CALL_OW 310
1579: PPUSH
1580: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1584: LD_INT 3
1586: PPUSH
1587: LD_INT 22
1589: PUSH
1590: LD_INT 3
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 21
1599: PUSH
1600: LD_INT 2
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PPUSH
1611: CALL_OW 70
1615: PUSH
1616: LD_INT 5
1618: LESS
1619: IFFALSE 1644
// begin wait ( 0 0$1 ) ;
1621: LD_INT 35
1623: PPUSH
1624: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1628: LD_EXP 37
1632: PPUSH
1633: CALL_OW 310
1637: PPUSH
1638: CALL_OW 85
// end ;
1642: GO 1584
// end ; end_of_file
1644: LD_VAR 0 1
1648: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1649: LD_INT 0
1651: PPUSH
// arabianUnitsInBase = [ ] ;
1652: LD_ADDR_EXP 49
1656: PUSH
1657: EMPTY
1658: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1659: LD_ADDR_EXP 51
1663: PUSH
1664: EMPTY
1665: ST_TO_ADDR
// arabLeftExit = true ;
1666: LD_ADDR_EXP 52
1670: PUSH
1671: LD_INT 1
1673: ST_TO_ADDR
// PrepareHeroes ;
1674: CALL 1707 0 0
// PrepareBuildings ;
1678: CALL 1773 0 0
// PrepareUnits ;
1682: CALL 2125 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1686: LD_EXP 34
1690: PPUSH
1691: LD_INT 42
1693: PPUSH
1694: CALL 2701 0 2
// PrepareArabianHovercraft ;
1698: CALL 2864 0 0
// end ;
1702: LD_VAR 0 1
1706: RET
// function PrepareHeroes ; begin
1707: LD_INT 0
1709: PPUSH
// uc_side = 2 ;
1710: LD_ADDR_OWVAR 20
1714: PUSH
1715: LD_INT 2
1717: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1718: LD_ADDR_EXP 47
1722: PUSH
1723: LD_STRING Heike
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: LD_INT 0
1731: PPUSH
1732: CALL 8453 0 3
1736: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1737: LD_ADDR_EXP 48
1741: PUSH
1742: LD_STRING Omar
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: LD_INT 11
1750: PPUSH
1751: CALL 8453 0 3
1755: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1756: LD_EXP 48
1760: PPUSH
1761: LD_INT 1
1763: PPUSH
1764: CALL_OW 52
// end ;
1768: LD_VAR 0 1
1772: RET
// function PrepareBuildings ; var depot ; begin
1773: LD_INT 0
1775: PPUSH
1776: PPUSH
// uc_side = 2 ;
1777: LD_ADDR_OWVAR 20
1781: PUSH
1782: LD_INT 2
1784: ST_TO_ADDR
// uc_nation = nation_arabian ;
1785: LD_ADDR_OWVAR 21
1789: PUSH
1790: LD_INT 2
1792: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1793: LD_ADDR_OWVAR 43
1797: PUSH
1798: LD_EXP 31
1802: ST_TO_ADDR
// bc_type = b_breastwork ;
1803: LD_ADDR_OWVAR 42
1807: PUSH
1808: LD_INT 31
1810: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1811: LD_INT 118
1813: PPUSH
1814: LD_INT 63
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1824: LD_INT 120
1826: PPUSH
1827: LD_INT 66
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1837: LD_INT 123
1839: PPUSH
1840: LD_INT 73
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 47
// if Difficulty = 2 then
1850: LD_OWVAR 67
1854: PUSH
1855: LD_INT 2
1857: EQUAL
1858: IFFALSE 1873
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1860: LD_INT 145
1862: PPUSH
1863: LD_INT 83
1865: PPUSH
1866: LD_INT 0
1868: PPUSH
1869: CALL_OW 47
// if Difficulty = 3 then
1873: LD_OWVAR 67
1877: PUSH
1878: LD_INT 3
1880: EQUAL
1881: IFFALSE 1909
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1883: LD_INT 145
1885: PPUSH
1886: LD_INT 83
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1896: LD_INT 151
1898: PPUSH
1899: LD_INT 81
1901: PPUSH
1902: LD_INT 5
1904: PPUSH
1905: CALL_OW 47
// end ; bc_type = b_depot ;
1909: LD_ADDR_OWVAR 42
1913: PUSH
1914: LD_INT 0
1916: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1917: LD_ADDR_VAR 0 2
1921: PUSH
1922: LD_INT 124
1924: PPUSH
1925: LD_INT 60
1927: PPUSH
1928: LD_INT 2
1930: PPUSH
1931: CALL_OW 47
1935: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1936: LD_VAR 0 2
1940: PPUSH
1941: CALL_OW 274
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: LD_INT 3000
1951: PPUSH
1952: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1956: LD_INT 131
1958: PPUSH
1959: LD_INT 51
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: CALL_OW 441
// bc_type = b_oil_mine ;
1969: LD_ADDR_OWVAR 42
1973: PUSH
1974: LD_INT 29
1976: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
1977: LD_INT 131
1979: PPUSH
1980: LD_INT 51
1982: PPUSH
1983: LD_INT 2
1985: PPUSH
1986: CALL_OW 47
// case Difficulty of 1 :
1990: LD_OWVAR 67
1994: PUSH
1995: LD_INT 1
1997: DOUBLE
1998: EQUAL
1999: IFTRUE 2003
2001: GO 2019
2003: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2004: LD_INT 48
2006: PPUSH
2007: LD_INT 2
2009: PPUSH
2010: LD_INT 2
2012: PPUSH
2013: CALL_OW 322
// end ; 2 :
2017: GO 2120
2019: LD_INT 2
2021: DOUBLE
2022: EQUAL
2023: IFTRUE 2027
2025: GO 2056
2027: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2028: LD_INT 48
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: LD_INT 2
2036: PPUSH
2037: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2041: LD_INT 51
2043: PPUSH
2044: LD_INT 2
2046: PPUSH
2047: LD_INT 2
2049: PPUSH
2050: CALL_OW 322
// end ; 3 :
2054: GO 2120
2056: LD_INT 3
2058: DOUBLE
2059: EQUAL
2060: IFTRUE 2064
2062: GO 2119
2064: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2065: LD_INT 48
2067: PPUSH
2068: LD_INT 2
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2078: LD_INT 51
2080: PPUSH
2081: LD_INT 2
2083: PPUSH
2084: LD_INT 2
2086: PPUSH
2087: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2091: LD_INT 49
2093: PPUSH
2094: LD_INT 2
2096: PPUSH
2097: LD_INT 2
2099: PPUSH
2100: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2104: LD_INT 52
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: LD_INT 2
2112: PPUSH
2113: CALL_OW 322
// end ; end ;
2117: GO 2120
2119: POP
// end ;
2120: LD_VAR 0 1
2124: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2125: LD_INT 0
2127: PPUSH
2128: PPUSH
2129: PPUSH
2130: PPUSH
// uc_side = 2 ;
2131: LD_ADDR_OWVAR 20
2135: PUSH
2136: LD_INT 2
2138: ST_TO_ADDR
// uc_nation = 2 ;
2139: LD_ADDR_OWVAR 21
2143: PUSH
2144: LD_INT 2
2146: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2147: LD_ADDR_VAR 0 4
2151: PUSH
2152: LD_INT 22
2154: PUSH
2155: LD_INT 2
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 30
2164: PUSH
2165: LD_INT 31
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: PPUSH
2176: CALL_OW 69
2180: PUSH
2181: FOR_IN
2182: IFFALSE 2238
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_EXP 31
2191: PPUSH
2192: CALL_OW 381
// unit = CreateHuman ;
2196: LD_ADDR_VAR 0 3
2200: PUSH
2201: CALL_OW 44
2205: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2206: LD_VAR 0 3
2210: PPUSH
2211: LD_VAR 0 4
2215: PPUSH
2216: CALL 9053 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2220: LD_ADDR_EXP 49
2224: PUSH
2225: LD_EXP 49
2229: PUSH
2230: LD_VAR 0 3
2234: ADD
2235: ST_TO_ADDR
// end ;
2236: GO 2181
2238: POP
2239: POP
// for i := 1 to arabianUnits [ 1 ] do
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: DOUBLE
2246: LD_INT 1
2248: DEC
2249: ST_TO_ADDR
2250: LD_EXP 33
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PUSH
2259: FOR_TO
2260: IFFALSE 2317
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2262: LD_INT 0
2264: PPUSH
2265: LD_EXP 31
2269: PPUSH
2270: CALL_OW 381
// unit = CreateHuman ;
2274: LD_ADDR_VAR 0 3
2278: PUSH
2279: CALL_OW 44
2283: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2284: LD_VAR 0 3
2288: PPUSH
2289: LD_INT 38
2291: PPUSH
2292: LD_INT 0
2294: PPUSH
2295: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2299: LD_ADDR_EXP 49
2303: PUSH
2304: LD_EXP 49
2308: PUSH
2309: LD_VAR 0 3
2313: ADD
2314: ST_TO_ADDR
// end ;
2315: GO 2259
2317: POP
2318: POP
// for i := 1 to arabianUnits [ 2 ] do
2319: LD_ADDR_VAR 0 2
2323: PUSH
2324: DOUBLE
2325: LD_INT 1
2327: DEC
2328: ST_TO_ADDR
2329: LD_EXP 33
2333: PUSH
2334: LD_INT 2
2336: ARRAY
2337: PUSH
2338: FOR_TO
2339: IFFALSE 2396
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2341: LD_INT 0
2343: PPUSH
2344: LD_EXP 31
2348: PPUSH
2349: CALL_OW 382
// unit = CreateHuman ;
2353: LD_ADDR_VAR 0 3
2357: PUSH
2358: CALL_OW 44
2362: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2363: LD_VAR 0 3
2367: PPUSH
2368: LD_INT 38
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2378: LD_ADDR_EXP 49
2382: PUSH
2383: LD_EXP 49
2387: PUSH
2388: LD_VAR 0 3
2392: ADD
2393: ST_TO_ADDR
// end ;
2394: GO 2338
2396: POP
2397: POP
// for i := 1 to arabianUnits [ 3 ] do
2398: LD_ADDR_VAR 0 2
2402: PUSH
2403: DOUBLE
2404: LD_INT 1
2406: DEC
2407: ST_TO_ADDR
2408: LD_EXP 33
2412: PUSH
2413: LD_INT 3
2415: ARRAY
2416: PUSH
2417: FOR_TO
2418: IFFALSE 2475
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2420: LD_INT 0
2422: PPUSH
2423: LD_EXP 31
2427: PPUSH
2428: CALL_OW 383
// unit = CreateHuman ;
2432: LD_ADDR_VAR 0 3
2436: PUSH
2437: CALL_OW 44
2441: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2442: LD_VAR 0 3
2446: PPUSH
2447: LD_INT 38
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2457: LD_ADDR_EXP 49
2461: PUSH
2462: LD_EXP 49
2466: PUSH
2467: LD_VAR 0 3
2471: ADD
2472: ST_TO_ADDR
// end ;
2473: GO 2417
2475: POP
2476: POP
// for i := 1 to arabianUnits [ 4 ] do
2477: LD_ADDR_VAR 0 2
2481: PUSH
2482: DOUBLE
2483: LD_INT 1
2485: DEC
2486: ST_TO_ADDR
2487: LD_EXP 33
2491: PUSH
2492: LD_INT 4
2494: ARRAY
2495: PUSH
2496: FOR_TO
2497: IFFALSE 2554
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2499: LD_INT 0
2501: PPUSH
2502: LD_EXP 31
2506: PPUSH
2507: CALL_OW 384
// unit = CreateHuman ;
2511: LD_ADDR_VAR 0 3
2515: PUSH
2516: CALL_OW 44
2520: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2521: LD_VAR 0 3
2525: PPUSH
2526: LD_INT 38
2528: PPUSH
2529: LD_INT 0
2531: PPUSH
2532: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2536: LD_ADDR_EXP 49
2540: PUSH
2541: LD_EXP 49
2545: PUSH
2546: LD_VAR 0 3
2550: ADD
2551: ST_TO_ADDR
// end ;
2552: GO 2496
2554: POP
2555: POP
// end ;
2556: LD_VAR 0 1
2560: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2561: LD_INT 0
2563: PPUSH
2564: PPUSH
2565: PPUSH
// uc_side = 2 ;
2566: LD_ADDR_OWVAR 20
2570: PUSH
2571: LD_INT 2
2573: ST_TO_ADDR
// uc_nation = 2 ;
2574: LD_ADDR_OWVAR 21
2578: PUSH
2579: LD_INT 2
2581: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_EXP 35
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2694
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2600: LD_INT 0
2602: PPUSH
2603: LD_EXP 31
2607: PPUSH
2608: CALL_OW 381
// unit = CreateHuman ;
2612: LD_ADDR_VAR 0 3
2616: PUSH
2617: CALL_OW 44
2621: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2622: LD_VAR 0 3
2626: PPUSH
2627: LD_INT 45
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 49
// if ( i mod 2 ) = 0 then
2637: LD_VAR 0 2
2641: PUSH
2642: LD_INT 2
2644: MOD
2645: PUSH
2646: LD_INT 0
2648: EQUAL
2649: IFFALSE 2668
// ComAgressiveMove ( unit , 78 , 118 ) else
2651: LD_VAR 0 3
2655: PPUSH
2656: LD_INT 78
2658: PPUSH
2659: LD_INT 118
2661: PPUSH
2662: CALL_OW 114
2666: GO 2683
// ComAgressiveMove ( unit , 62 , 109 ) ;
2668: LD_VAR 0 3
2672: PPUSH
2673: LD_INT 62
2675: PPUSH
2676: LD_INT 109
2678: PPUSH
2679: CALL_OW 114
// AddComCrawl ( unit ) ;
2683: LD_VAR 0 3
2687: PPUSH
2688: CALL_OW 197
// end ;
2692: GO 2597
2694: POP
2695: POP
// end ;
2696: LD_VAR 0 1
2700: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2701: LD_INT 0
2703: PPUSH
2704: PPUSH
2705: PPUSH
// uc_side = 2 ;
2706: LD_ADDR_OWVAR 20
2710: PUSH
2711: LD_INT 2
2713: ST_TO_ADDR
// uc_nation = 2 ;
2714: LD_ADDR_OWVAR 21
2718: PUSH
2719: LD_INT 2
2721: ST_TO_ADDR
// for i := 1 to amount do
2722: LD_ADDR_VAR 0 4
2726: PUSH
2727: DOUBLE
2728: LD_INT 1
2730: DEC
2731: ST_TO_ADDR
2732: LD_VAR 0 1
2736: PUSH
2737: FOR_TO
2738: IFFALSE 2857
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2740: LD_INT 14
2742: PPUSH
2743: LD_INT 1
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: LD_INT 26
2751: PUSH
2752: LD_INT 25
2754: PUSH
2755: LD_INT 27
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 1
2765: PPUSH
2766: LD_INT 3
2768: PPUSH
2769: CALL_OW 12
2773: ARRAY
2774: PPUSH
2775: LD_INT 100
2777: PPUSH
2778: CALL 27580 0 5
// veh = CreateVehicle ;
2782: LD_ADDR_VAR 0 5
2786: PUSH
2787: CALL_OW 45
2791: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2792: LD_ADDR_EXP 50
2796: PUSH
2797: LD_EXP 50
2801: PUSH
2802: LD_VAR 0 5
2806: ADD
2807: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2808: LD_VAR 0 5
2812: PPUSH
2813: LD_VAR 0 2
2817: PPUSH
2818: LD_INT 0
2820: PPUSH
2821: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel + 3 ) ;
2825: LD_INT 0
2827: PPUSH
2828: LD_EXP 31
2832: PUSH
2833: LD_INT 3
2835: PLUS
2836: PPUSH
2837: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2841: CALL_OW 44
2845: PPUSH
2846: LD_VAR 0 5
2850: PPUSH
2851: CALL_OW 52
// end ;
2855: GO 2737
2857: POP
2858: POP
// end ;
2859: LD_VAR 0 3
2863: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2864: LD_INT 0
2866: PPUSH
2867: PPUSH
2868: PPUSH
// uc_side = 2 ;
2869: LD_ADDR_OWVAR 20
2873: PUSH
2874: LD_INT 2
2876: ST_TO_ADDR
// uc_nation = 2 ;
2877: LD_ADDR_OWVAR 21
2881: PUSH
2882: LD_INT 2
2884: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2885: LD_ADDR_VAR 0 2
2889: PUSH
2890: DOUBLE
2891: LD_INT 1
2893: DEC
2894: ST_TO_ADDR
2895: LD_EXP 34
2899: PUSH
2900: FOR_TO
2901: IFFALSE 3010
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2903: LD_INT 11
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 24
2914: PUSH
2915: LD_INT 23
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 1
2924: PPUSH
2925: LD_INT 2
2927: PPUSH
2928: CALL_OW 12
2932: ARRAY
2933: PPUSH
2934: LD_INT 100
2936: PPUSH
2937: CALL 27580 0 5
// veh = CreateVehicle ;
2941: LD_ADDR_VAR 0 3
2945: PUSH
2946: CALL_OW 45
2950: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2951: LD_ADDR_EXP 51
2955: PUSH
2956: LD_EXP 51
2960: PUSH
2961: LD_VAR 0 3
2965: ADD
2966: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2967: LD_VAR 0 3
2971: PPUSH
2972: LD_INT 47
2974: PPUSH
2975: LD_INT 0
2977: PPUSH
2978: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_EXP 31
2989: PPUSH
2990: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2994: CALL_OW 44
2998: PPUSH
2999: LD_VAR 0 3
3003: PPUSH
3004: CALL_OW 52
// end ;
3008: GO 2900
3010: POP
3011: POP
// end ; end_of_file
3012: LD_VAR 0 1
3016: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
3017: LD_INT 0
3019: PPUSH
3020: PPUSH
3021: PPUSH
3022: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
3023: LD_ADDR_VAR 0 3
3027: PUSH
3028: LD_INT 66
3030: PUSH
3031: LD_INT 87
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: LD_INT 66
3040: PUSH
3041: LD_INT 86
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 67
3050: PUSH
3051: LD_INT 86
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 69
3060: PUSH
3061: LD_INT 87
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 70
3070: PUSH
3071: LD_INT 88
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 71
3080: PUSH
3081: LD_INT 89
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 72
3090: PUSH
3091: LD_INT 90
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 72
3100: PUSH
3101: LD_INT 91
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3118: LD_INT 280
3120: PPUSH
3121: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3125: LD_EXP 37
3129: PPUSH
3130: LD_STRING DStart-Bur-1
3132: PPUSH
3133: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3137: LD_EXP 45
3141: PPUSH
3142: LD_STRING DStart-Pla-1
3144: PPUSH
3145: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3149: LD_EXP 37
3153: PPUSH
3154: LD_STRING DStart-Bur-2
3156: PPUSH
3157: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3161: LD_EXP 45
3165: PPUSH
3166: LD_STRING DStart-Pla-2
3168: PPUSH
3169: CALL_OW 94
// x = 0 ;
3173: LD_ADDR_VAR 0 4
3177: PUSH
3178: LD_INT 0
3180: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3181: LD_ADDR_VAR 0 2
3185: PUSH
3186: LD_INT 22
3188: PUSH
3189: LD_INT 3
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: LD_INT 21
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PUSH
3215: FOR_IN
3216: IFFALSE 3304
// begin ComExitVehicle ( unit ) ;
3218: LD_VAR 0 2
3222: PPUSH
3223: CALL_OW 121
// wait ( 0 0$1 ) ;
3227: LD_INT 35
3229: PPUSH
3230: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3234: LD_VAR 0 2
3238: PPUSH
3239: LD_VAR 0 3
3243: PUSH
3244: LD_VAR 0 4
3248: ARRAY
3249: PUSH
3250: LD_INT 1
3252: ARRAY
3253: PPUSH
3254: LD_VAR 0 3
3258: PUSH
3259: LD_VAR 0 4
3263: ARRAY
3264: PUSH
3265: LD_INT 2
3267: ARRAY
3268: PPUSH
3269: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3273: LD_VAR 0 2
3277: PPUSH
3278: LD_INT 69
3280: PPUSH
3281: LD_INT 96
3283: PPUSH
3284: CALL_OW 178
// x = x + 1 ;
3288: LD_ADDR_VAR 0 4
3292: PUSH
3293: LD_VAR 0 4
3297: PUSH
3298: LD_INT 1
3300: PLUS
3301: ST_TO_ADDR
// end ;
3302: GO 3215
3304: POP
3305: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3306: LD_EXP 37
3310: PPUSH
3311: CALL_OW 87
// x = 0 ;
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: LD_INT 0
3322: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3323: LD_ADDR_VAR 0 2
3327: PUSH
3328: LD_INT 22
3330: PUSH
3331: LD_INT 3
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PUSH
3338: LD_INT 21
3340: PUSH
3341: LD_INT 1
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PPUSH
3352: CALL_OW 69
3356: PUSH
3357: FOR_IN
3358: IFFALSE 3430
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3360: LD_VAR 0 2
3364: PPUSH
3365: LD_VAR 0 3
3369: PUSH
3370: LD_VAR 0 4
3374: ARRAY
3375: PUSH
3376: LD_INT 1
3378: ARRAY
3379: PPUSH
3380: LD_VAR 0 3
3384: PUSH
3385: LD_VAR 0 4
3389: ARRAY
3390: PUSH
3391: LD_INT 2
3393: ARRAY
3394: PPUSH
3395: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3399: LD_VAR 0 2
3403: PPUSH
3404: LD_INT 69
3406: PPUSH
3407: LD_INT 96
3409: PPUSH
3410: CALL_OW 178
// x = x + 1 ;
3414: LD_ADDR_VAR 0 4
3418: PUSH
3419: LD_VAR 0 4
3423: PUSH
3424: LD_INT 1
3426: PLUS
3427: ST_TO_ADDR
// end ;
3428: GO 3357
3430: POP
3431: POP
// wait ( 0 0$1 ) ;
3432: LD_INT 35
3434: PPUSH
3435: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3439: LD_EXP 37
3443: PPUSH
3444: LD_INT 70
3446: PPUSH
3447: LD_INT 90
3449: PPUSH
3450: CALL_OW 297
3454: PUSH
3455: LD_INT 7
3457: LESS
3458: PUSH
3459: LD_EXP 38
3463: PPUSH
3464: LD_INT 70
3466: PPUSH
3467: LD_INT 90
3469: PPUSH
3470: CALL_OW 297
3474: PUSH
3475: LD_INT 7
3477: LESS
3478: AND
3479: PUSH
3480: LD_EXP 39
3484: PPUSH
3485: LD_INT 70
3487: PPUSH
3488: LD_INT 90
3490: PPUSH
3491: CALL_OW 297
3495: PUSH
3496: LD_INT 7
3498: LESS
3499: AND
3500: PUSH
3501: LD_EXP 40
3505: PPUSH
3506: LD_INT 70
3508: PPUSH
3509: LD_INT 90
3511: PPUSH
3512: CALL_OW 297
3516: PUSH
3517: LD_INT 7
3519: LESS
3520: AND
3521: PUSH
3522: LD_EXP 44
3526: PPUSH
3527: LD_INT 70
3529: PPUSH
3530: LD_INT 90
3532: PPUSH
3533: CALL_OW 297
3537: PUSH
3538: LD_INT 7
3540: LESS
3541: AND
3542: IFFALSE 3306
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3544: LD_EXP 38
3548: PPUSH
3549: LD_STRING DDoubts-Kar-1
3551: PPUSH
3552: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3556: LD_EXP 39
3560: PPUSH
3561: LD_STRING DDoubts-Ptr-1
3563: PPUSH
3564: CALL_OW 88
// Say ( Lipshchin , DDoubts-Bur-1 ) ;
3568: LD_EXP 44
3572: PPUSH
3573: LD_STRING DDoubts-Bur-1
3575: PPUSH
3576: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3580: LD_EXP 38
3584: PPUSH
3585: LD_STRING DDoubts-Kar-2
3587: PPUSH
3588: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3592: LD_EXP 40
3596: PPUSH
3597: LD_STRING DDoubts-Glb-2
3599: PPUSH
3600: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3604: LD_EXP 37
3608: PPUSH
3609: LD_STRING DDoubts-Bur-2
3611: PPUSH
3612: CALL_OW 88
// InGameOff ;
3616: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3620: LD_STRING MBegin
3622: PPUSH
3623: CALL_OW 337
// SaveForQuickRestart ;
3627: CALL_OW 22
// BuildBase ;
3631: CALL 10513 0 0
// end ;
3635: LD_VAR 0 1
3639: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3640: LD_EXP 8
3644: NOT
3645: IFFALSE 3891
3647: GO 3649
3649: DISABLE
3650: LD_INT 0
3652: PPUSH
// begin enable ;
3653: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ f_side , 2 ] ) do
3654: LD_ADDR_VAR 0 1
3658: PUSH
3659: LD_INT 34
3661: PPUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 2
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PPUSH
3672: CALL_OW 70
3676: PUSH
3677: FOR_IN
3678: IFFALSE 3889
// if See ( 3 , unit ) then
3680: LD_INT 3
3682: PPUSH
3683: LD_VAR 0 1
3687: PPUSH
3688: CALL_OW 292
3692: IFFALSE 3887
// begin sawArabianBase = true ;
3694: LD_ADDR_EXP 8
3698: PUSH
3699: LD_INT 1
3701: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3702: LD_VAR 0 1
3706: PPUSH
3707: CALL_OW 87
// DialogueOn ;
3711: CALL_OW 6
// if IsOk ( Lipshchin ) then
3715: LD_EXP 44
3719: PPUSH
3720: CALL_OW 302
3724: IFFALSE 3738
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3726: LD_EXP 44
3730: PPUSH
3731: LD_STRING DArabs-RSol1-1
3733: PPUSH
3734: CALL_OW 88
// if IsOk ( Karamazov ) then
3738: LD_EXP 38
3742: PPUSH
3743: CALL_OW 302
3747: IFFALSE 3761
// Say ( Karamazov , DArabs-Kar-1 ) ;
3749: LD_EXP 38
3753: PPUSH
3754: LD_STRING DArabs-Kar-1
3756: PPUSH
3757: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3761: LD_EXP 37
3765: PPUSH
3766: LD_STRING DArabs-Bur-1
3768: PPUSH
3769: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3773: LD_EXP 45
3777: PPUSH
3778: LD_STRING DArabs-Pla-1
3780: PPUSH
3781: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3785: LD_EXP 48
3789: PPUSH
3790: LD_STRING DSurrender-Omar-1
3792: PPUSH
3793: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3797: LD_STRING QSurrender
3799: PPUSH
3800: CALL_OW 97
3804: PUSH
3805: LD_INT 1
3807: DOUBLE
3808: EQUAL
3809: IFTRUE 3813
3811: GO 3832
3813: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3814: LD_EXP 37
3818: PPUSH
3819: LD_STRING DQrSurrender#1-Bur-1
3821: PPUSH
3822: CALL_OW 88
// Lose_Survive ;
3826: CALL 16930 0 0
// end ; 2 :
3830: GO 3879
3832: LD_INT 2
3834: DOUBLE
3835: EQUAL
3836: IFTRUE 3840
3838: GO 3855
3840: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3841: LD_EXP 37
3845: PPUSH
3846: LD_STRING DQrSurrender#2-Bur-1
3848: PPUSH
3849: CALL_OW 88
3853: GO 3879
3855: LD_INT 3
3857: DOUBLE
3858: EQUAL
3859: IFTRUE 3863
3861: GO 3878
3863: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3864: LD_EXP 37
3868: PPUSH
3869: LD_STRING DQrSurrender#3-Bur-1
3871: PPUSH
3872: CALL_OW 88
3876: GO 3879
3878: POP
// DialogueOff ;
3879: CALL_OW 7
// exit ;
3883: POP
3884: POP
3885: GO 3891
// end ;
3887: GO 3677
3889: POP
3890: POP
// end ;
3891: PPOPN 1
3893: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3894: LD_EXP 9
3898: NOT
3899: PUSH
3900: LD_INT 1
3902: PPUSH
3903: LD_INT 3
3905: PPUSH
3906: CALL_OW 321
3910: PUSH
3911: LD_INT 1
3913: EQUAL
3914: AND
3915: IFFALSE 4280
3917: GO 3919
3919: DISABLE
3920: LD_INT 0
3922: PPUSH
3923: PPUSH
// begin enable ;
3924: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3925: LD_ADDR_VAR 0 1
3929: PUSH
3930: LD_INT 22
3932: PUSH
3933: LD_INT 0
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: PUSH
3940: LD_INT 25
3942: PUSH
3943: LD_INT 12
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PPUSH
3954: CALL_OW 69
3958: PUSH
3959: FOR_IN
3960: IFFALSE 4278
// if See ( 3 , unit ) then
3962: LD_INT 3
3964: PPUSH
3965: LD_VAR 0 1
3969: PPUSH
3970: CALL_OW 292
3974: IFFALSE 4276
// begin sawApeman = true ;
3976: LD_ADDR_EXP 9
3980: PUSH
3981: LD_INT 1
3983: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3984: LD_ADDR_VAR 0 2
3988: PUSH
3989: LD_INT 22
3991: PUSH
3992: LD_INT 3
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 21
4001: PUSH
4002: LD_INT 1
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 26
4011: PUSH
4012: LD_INT 1
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 50
4021: PUSH
4022: EMPTY
4023: LIST
4024: PUSH
4025: LD_INT 2
4027: PUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 25
4040: PUSH
4041: LD_INT 2
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PUSH
4048: LD_INT 25
4050: PUSH
4051: LD_INT 3
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PUSH
4058: LD_INT 25
4060: PUSH
4061: LD_INT 4
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: PPUSH
4082: CALL_OW 69
4086: PPUSH
4087: LD_VAR 0 1
4091: PPUSH
4092: CALL_OW 74
4096: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4097: LD_VAR 0 1
4101: PPUSH
4102: CALL_OW 87
// DialogueOn ;
4106: CALL_OW 6
// if nearUnit = Burlak then
4110: LD_VAR 0 2
4114: PUSH
4115: LD_EXP 37
4119: EQUAL
4120: IFFALSE 4136
// Say ( Burlak , DApeSpot-Bur-1a ) else
4122: LD_EXP 37
4126: PPUSH
4127: LD_STRING DApeSpot-Bur-1a
4129: PPUSH
4130: CALL_OW 88
4134: GO 4148
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4136: LD_VAR 0 2
4140: PPUSH
4141: LD_STRING DApeSpot-RSol1-1
4143: PPUSH
4144: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4148: LD_EXP 37
4152: PPUSH
4153: LD_STRING DApeSpot-Bur-1
4155: PPUSH
4156: CALL_OW 88
// if IsOK ( Petrosyan ) then
4160: LD_EXP 41
4164: PPUSH
4165: CALL_OW 302
4169: IFFALSE 4268
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4171: LD_EXP 41
4175: PPUSH
4176: LD_STRING DApeSpot-Pty-1
4178: PPUSH
4179: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4183: LD_INT 22
4185: PUSH
4186: LD_INT 3
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 3
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 2
4205: PUSH
4206: LD_INT 30
4208: PUSH
4209: LD_INT 6
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: LD_INT 30
4218: PUSH
4219: LD_INT 7
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 69
4240: IFFALSE 4256
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4242: LD_EXP 41
4246: PPUSH
4247: LD_STRING DApeSpot-Pty-1a
4249: PPUSH
4250: CALL_OW 88
4254: GO 4268
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4256: LD_EXP 41
4260: PPUSH
4261: LD_STRING DApeSpot-Pty-1b
4263: PPUSH
4264: CALL_OW 88
// end ; DialogueOff ;
4268: CALL_OW 7
// exit ;
4272: POP
4273: POP
4274: GO 4280
// end ;
4276: GO 3959
4278: POP
4279: POP
// end ;
4280: PPOPN 2
4282: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) do
4283: LD_EXP 41
4287: PPUSH
4288: CALL_OW 302
4292: PUSH
4293: LD_INT 22
4295: PUSH
4296: LD_INT 3
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 21
4305: PUSH
4306: LD_INT 3
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: LD_INT 2
4315: PUSH
4316: LD_INT 30
4318: PUSH
4319: LD_INT 6
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 30
4328: PUSH
4329: LD_INT 7
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: LIST
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: LIST
4345: PPUSH
4346: CALL_OW 69
4350: NOT
4351: AND
4352: IFFALSE 4369
4354: GO 4356
4356: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4357: LD_EXP 41
4361: PPUSH
4362: LD_STRING DApeLab-Pty-1
4364: PPUSH
4365: CALL_OW 88
4369: END
// export function Dial_ResearchApeLang ; begin
4370: LD_INT 0
4372: PPUSH
// DialogueOn ;
4373: CALL_OW 6
// if IsOK ( Petrosyan ) then
4377: LD_EXP 41
4381: PPUSH
4382: CALL_OW 302
4386: IFFALSE 4472
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4388: LD_EXP 41
4392: PPUSH
4393: LD_STRING DApeLangCompl-Pty-1
4395: PPUSH
4396: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4400: LD_EXP 37
4404: PPUSH
4405: LD_STRING DApeLangCompl-Bur-1
4407: PPUSH
4408: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4412: LD_EXP 41
4416: PPUSH
4417: LD_STRING DApeLangCompl-Pty-2
4419: PPUSH
4420: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4424: LD_EXP 37
4428: PPUSH
4429: LD_STRING DApeLangCompl-Bur-2
4431: PPUSH
4432: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4436: LD_EXP 41
4440: PPUSH
4441: LD_STRING DApeLangCompl-Pty-3
4443: PPUSH
4444: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4448: LD_EXP 37
4452: PPUSH
4453: LD_STRING DApeLangCompl-Bur-3
4455: PPUSH
4456: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4460: LD_EXP 41
4464: PPUSH
4465: LD_STRING DApeLangCompl-Pty-4
4467: PPUSH
4468: CALL_OW 88
// end ; DialogueOff ;
4472: CALL_OW 7
// end ;
4476: LD_VAR 0 1
4480: RET
// export function Dial_TameApe ( sci ) ; begin
4481: LD_INT 0
4483: PPUSH
// dial_tameApeBlocker = true ;
4484: LD_ADDR_EXP 10
4488: PUSH
4489: LD_INT 1
4491: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4492: LD_VAR 0 1
4496: PPUSH
4497: CALL_OW 258
4501: PUSH
4502: LD_INT 1
4504: EQUAL
4505: IFFALSE 4521
// Say ( sci , DApeTame-Sci1-1 ) else
4507: LD_VAR 0 1
4511: PPUSH
4512: LD_STRING DApeTame-Sci1-1
4514: PPUSH
4515: CALL_OW 88
4519: GO 4685
// begin if IsOK ( Petrosyan ) then
4521: LD_EXP 41
4525: PPUSH
4526: CALL_OW 302
4530: IFFALSE 4546
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4532: LD_EXP 41
4536: PPUSH
4537: LD_STRING DApeTame-Sci1-1
4539: PPUSH
4540: CALL_OW 88
4544: GO 4685
// if IsOK ( Dolgov ) then
4546: LD_EXP 43
4550: PPUSH
4551: CALL_OW 302
4555: IFFALSE 4571
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4557: LD_EXP 43
4561: PPUSH
4562: LD_STRING DApeTame-Sci1-1
4564: PPUSH
4565: CALL_OW 88
4569: GO 4685
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4571: LD_INT 22
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 21
4583: PUSH
4584: LD_INT 1
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 26
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 50
4603: PUSH
4604: EMPTY
4605: LIST
4606: PUSH
4607: LD_INT 2
4609: PUSH
4610: LD_INT 25
4612: PUSH
4613: LD_INT 1
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: LD_INT 25
4622: PUSH
4623: LD_INT 2
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 25
4632: PUSH
4633: LD_INT 3
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 4
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: PPUSH
4664: CALL_OW 69
4668: PPUSH
4669: LD_STRING DApeTame-Sci1-1
4671: PPUSH
4672: LD_STRING 
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: LD_INT 1
4680: PPUSH
4681: CALL 8770 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4685: LD_EXP 37
4689: PPUSH
4690: LD_STRING DApeTame-Bur-1
4692: PPUSH
4693: CALL_OW 88
// end ;
4697: LD_VAR 0 2
4701: RET
// export function Dial_ApeEnterLab ; begin
4702: LD_INT 0
4704: PPUSH
// dial_apeEnterLabBlocker = true ;
4705: LD_ADDR_EXP 11
4709: PUSH
4710: LD_INT 1
4712: ST_TO_ADDR
// DialogueOn ;
4713: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4717: LD_EXP 37
4721: PPUSH
4722: LD_STRING DApeWorkSol-Bur-1
4724: PPUSH
4725: CALL_OW 88
// if IsOK ( Petrosyan ) then
4729: LD_EXP 41
4733: PPUSH
4734: CALL_OW 302
4738: IFFALSE 4754
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4740: LD_EXP 41
4744: PPUSH
4745: LD_STRING DApeWorkSol-Pty-1
4747: PPUSH
4748: CALL_OW 88
4752: GO 4893
// if IsOK ( Dolgov ) then
4754: LD_EXP 43
4758: PPUSH
4759: CALL_OW 302
4763: IFFALSE 4779
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4765: LD_EXP 43
4769: PPUSH
4770: LD_STRING DApeWorkSol-Pty-1
4772: PPUSH
4773: CALL_OW 88
4777: GO 4893
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4779: LD_INT 22
4781: PUSH
4782: LD_INT 3
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 21
4791: PUSH
4792: LD_INT 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 26
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 50
4811: PUSH
4812: EMPTY
4813: LIST
4814: PUSH
4815: LD_INT 2
4817: PUSH
4818: LD_INT 25
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 25
4830: PUSH
4831: LD_INT 2
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 25
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 4
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: PPUSH
4872: CALL_OW 69
4876: PPUSH
4877: LD_STRING DApeWorkSol-Pty-1
4879: PPUSH
4880: LD_STRING 
4882: PPUSH
4883: LD_INT 0
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: CALL 8770 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4893: LD_EXP 37
4897: PPUSH
4898: LD_STRING DApeWorkSol-Bur-2
4900: PPUSH
4901: CALL_OW 88
// DialogueOff ;
4905: CALL_OW 7
// end ;
4909: LD_VAR 0 1
4913: RET
// export function Dial_ResearchApePsych ; begin
4914: LD_INT 0
4916: PPUSH
// DialogueOn ;
4917: CALL_OW 6
// if IsOK ( Petrosyan ) then
4921: LD_EXP 41
4925: PPUSH
4926: CALL_OW 302
4930: IFFALSE 4946
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4932: LD_EXP 41
4936: PPUSH
4937: LD_STRING DApeWorkCompl-Pty-1
4939: PPUSH
4940: CALL_OW 88
4944: GO 5085
// if IsOK ( Dolgov ) then
4946: LD_EXP 43
4950: PPUSH
4951: CALL_OW 302
4955: IFFALSE 4971
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4957: LD_EXP 43
4961: PPUSH
4962: LD_STRING DApeWorkCompl-Pty-1
4964: PPUSH
4965: CALL_OW 88
4969: GO 5085
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4971: LD_INT 22
4973: PUSH
4974: LD_INT 3
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 1
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: LD_INT 26
4993: PUSH
4994: LD_INT 1
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 50
5003: PUSH
5004: EMPTY
5005: LIST
5006: PUSH
5007: LD_INT 2
5009: PUSH
5010: LD_INT 25
5012: PUSH
5013: LD_INT 1
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 25
5022: PUSH
5023: LD_INT 2
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 3
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 25
5042: PUSH
5043: LD_INT 4
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 69
5068: PPUSH
5069: LD_STRING DApeWorkCompl-Pty-1
5071: PPUSH
5072: LD_STRING 
5074: PPUSH
5075: LD_INT 0
5077: PPUSH
5078: LD_INT 1
5080: PPUSH
5081: CALL 8770 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5085: LD_EXP 37
5089: PPUSH
5090: LD_STRING DApeWorkCompl-Bur-1
5092: PPUSH
5093: CALL_OW 88
// DialogueOff ;
5097: CALL_OW 7
// end ;
5101: LD_VAR 0 1
5105: RET
// export function Dial_ResearchApeAgress ; begin
5106: LD_INT 0
5108: PPUSH
// DialogueOn ;
5109: CALL_OW 6
// if IsOK ( Petrosyan ) then
5113: LD_EXP 41
5117: PPUSH
5118: CALL_OW 302
5122: IFFALSE 5138
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5124: LD_EXP 41
5128: PPUSH
5129: LD_STRING DApeSolCompl-Pty-1
5131: PPUSH
5132: CALL_OW 88
5136: GO 5277
// if IsOK ( Dolgov ) then
5138: LD_EXP 43
5142: PPUSH
5143: CALL_OW 302
5147: IFFALSE 5163
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5149: LD_EXP 43
5153: PPUSH
5154: LD_STRING DApeSolCompl-Pty-1
5156: PPUSH
5157: CALL_OW 88
5161: GO 5277
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5163: LD_INT 22
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: LD_INT 21
5175: PUSH
5176: LD_INT 1
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PUSH
5183: LD_INT 26
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 50
5195: PUSH
5196: EMPTY
5197: LIST
5198: PUSH
5199: LD_INT 2
5201: PUSH
5202: LD_INT 25
5204: PUSH
5205: LD_INT 1
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 25
5214: PUSH
5215: LD_INT 2
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 3
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 25
5234: PUSH
5235: LD_INT 4
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: PPUSH
5256: CALL_OW 69
5260: PPUSH
5261: LD_STRING DApeSolCompl-Pty-1
5263: PPUSH
5264: LD_STRING 
5266: PPUSH
5267: LD_INT 0
5269: PPUSH
5270: LD_INT 1
5272: PPUSH
5273: CALL 8770 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5277: LD_EXP 37
5281: PPUSH
5282: LD_STRING DApeSolCompl-Bur-1
5284: PPUSH
5285: CALL_OW 88
// DialogueOff ;
5289: CALL_OW 7
// end ;
5293: LD_VAR 0 1
5297: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5298: LD_INT 3
5300: PPUSH
5301: LD_INT 74
5303: PPUSH
5304: LD_INT 115
5306: PPUSH
5307: CALL_OW 293
5311: IFFALSE 5442
5313: GO 5315
5315: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5316: LD_INT 22
5318: PUSH
5319: LD_INT 3
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PUSH
5326: LD_INT 21
5328: PUSH
5329: LD_INT 1
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 26
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: LD_INT 50
5348: PUSH
5349: EMPTY
5350: LIST
5351: PUSH
5352: LD_INT 2
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 1
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_INT 25
5367: PUSH
5368: LD_INT 2
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 3
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 4
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: PPUSH
5409: CALL_OW 69
5413: PPUSH
5414: LD_STRING DShipments-RSol1-1
5416: PPUSH
5417: LD_STRING 
5419: PPUSH
5420: LD_INT 0
5422: PPUSH
5423: LD_INT 1
5425: PPUSH
5426: CALL 8770 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5430: LD_EXP 37
5434: PPUSH
5435: LD_STRING DShipments-Bur-1
5437: PPUSH
5438: CALL_OW 88
// end ;
5442: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5443: LD_INT 3
5445: PPUSH
5446: LD_INT 81
5448: PPUSH
5449: LD_INT 132
5451: PPUSH
5452: CALL_OW 293
5456: IFFALSE 5596
5458: GO 5460
5460: DISABLE
5461: LD_INT 0
5463: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5464: LD_ADDR_VAR 0 1
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 3
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 21
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 26
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 50
5501: PUSH
5502: EMPTY
5503: LIST
5504: PUSH
5505: LD_INT 2
5507: PUSH
5508: LD_INT 25
5510: PUSH
5511: LD_INT 1
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PUSH
5518: LD_INT 25
5520: PUSH
5521: LD_INT 2
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 25
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 4
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: PPUSH
5562: CALL_OW 69
5566: PPUSH
5567: LD_STRING DRoad-RSol1-1
5569: PPUSH
5570: LD_STRING 
5572: PPUSH
5573: LD_INT 0
5575: PPUSH
5576: LD_INT 1
5578: PPUSH
5579: CALL 8770 0 5
5583: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5584: LD_VAR 0 1
5588: PPUSH
5589: LD_STRING DRoad-RSol1-1a
5591: PPUSH
5592: CALL_OW 88
// end ;
5596: PPOPN 1
5598: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5599: LD_INT 33
5601: PPUSH
5602: LD_INT 22
5604: PUSH
5605: LD_INT 3
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PUSH
5612: LD_INT 21
5614: PUSH
5615: LD_INT 1
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 26
5624: PUSH
5625: LD_INT 1
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 50
5634: PUSH
5635: EMPTY
5636: LIST
5637: PUSH
5638: LD_INT 2
5640: PUSH
5641: LD_INT 25
5643: PUSH
5644: LD_INT 1
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: LD_INT 25
5653: PUSH
5654: LD_INT 2
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 25
5663: PUSH
5664: LD_INT 3
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 25
5673: PUSH
5674: LD_INT 4
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: PPUSH
5695: CALL_OW 70
5699: PUSH
5700: LD_EXP 37
5704: PUSH
5705: EMPTY
5706: LIST
5707: DIFF
5708: PUSH
5709: LD_INT 22
5711: PUSH
5712: LD_INT 3
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: LD_INT 21
5721: PUSH
5722: LD_INT 3
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 30
5731: PUSH
5732: LD_INT 0
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 50
5741: PUSH
5742: EMPTY
5743: LIST
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: PPUSH
5751: CALL_OW 69
5755: AND
5756: IFFALSE 5783
5758: GO 5760
5760: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5761: LD_INT 36
5763: PPUSH
5764: CALL 20412 0 1
// wait ( 0 0$1.5 ) ;
5768: LD_INT 52
5770: PPUSH
5771: CALL_OW 67
// stevensPlaced = true ;
5775: LD_ADDR_EXP 14
5779: PUSH
5780: LD_INT 1
5782: ST_TO_ADDR
// end ;
5783: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5784: LD_INT 3
5786: PPUSH
5787: LD_EXP 54
5791: PPUSH
5792: CALL_OW 292
5796: PUSH
5797: LD_EXP 14
5801: AND
5802: PUSH
5803: LD_EXP 24
5807: NOT
5808: AND
5809: IFFALSE 6151
5811: GO 5813
5813: DISABLE
5814: LD_INT 0
5816: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5817: LD_ADDR_VAR 0 1
5821: PUSH
5822: LD_INT 22
5824: PUSH
5825: LD_INT 3
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: PUSH
5832: LD_INT 21
5834: PUSH
5835: LD_INT 1
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 26
5844: PUSH
5845: LD_INT 1
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PUSH
5852: LD_INT 50
5854: PUSH
5855: EMPTY
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 25
5873: PUSH
5874: LD_INT 2
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 25
5883: PUSH
5884: LD_INT 3
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 25
5893: PUSH
5894: LD_INT 4
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: PPUSH
5915: CALL_OW 69
5919: PPUSH
5920: LD_EXP 54
5924: PPUSH
5925: CALL_OW 74
5929: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5930: LD_EXP 54
5934: PPUSH
5935: CALL_OW 87
// InGameOn ;
5939: CALL_OW 8
// DialogueOn ;
5943: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5947: LD_VAR 0 1
5951: PPUSH
5952: LD_STRING DStevens-RSol1-1
5954: PPUSH
5955: CALL_OW 88
// DialogueOff ;
5959: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5963: LD_INT 52
5965: PPUSH
5966: CALL_OW 67
// if IsOK ( Petrosyan ) then
5970: LD_EXP 41
5974: PPUSH
5975: CALL_OW 302
5979: IFFALSE 6147
// begin SetSide ( Stevens , 6 ) ;
5981: LD_EXP 54
5985: PPUSH
5986: LD_INT 6
5988: PPUSH
5989: CALL_OW 235
// DialogueOn ;
5993: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
5997: LD_EXP 54
6001: PPUSH
6002: LD_STRING DStevens-Huck-1
6004: PPUSH
6005: CALL_OW 88
// if nearUnit = Petrosyan then
6009: LD_VAR 0 1
6013: PUSH
6014: LD_EXP 41
6018: EQUAL
6019: IFFALSE 6115
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
6021: LD_EXP 41
6025: PPUSH
6026: LD_STRING DStevens-Pty-1a
6028: PPUSH
6029: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6033: LD_EXP 54
6037: PPUSH
6038: LD_STRING DStevens-Huck-2
6040: PPUSH
6041: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6045: LD_EXP 41
6049: PPUSH
6050: LD_STRING DStevens-Pty-2
6052: PPUSH
6053: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6057: LD_EXP 54
6061: PPUSH
6062: LD_STRING DStevens-Huck-3
6064: PPUSH
6065: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6069: LD_EXP 41
6073: PPUSH
6074: LD_STRING DStevens-Pty-3
6076: PPUSH
6077: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6081: LD_EXP 54
6085: PPUSH
6086: LD_STRING DStevens-Huck-4
6088: PPUSH
6089: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6093: LD_EXP 41
6097: PPUSH
6098: LD_STRING DStevens-Pty-4
6100: PPUSH
6101: CALL_OW 88
// stevensFollow = true ;
6105: LD_ADDR_EXP 15
6109: PUSH
6110: LD_INT 1
6112: ST_TO_ADDR
// end else
6113: GO 6143
// begin stevensFollow = true ;
6115: LD_ADDR_EXP 15
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6123: LD_ADDR_EXP 16
6127: PUSH
6128: LD_INT 1
6130: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6131: LD_EXP 41
6135: PPUSH
6136: LD_STRING DStevens-Pty-1
6138: PPUSH
6139: CALL_OW 88
// end ; DialogueOff ;
6143: CALL_OW 7
// end ; InGameOff ;
6147: CALL_OW 9
// end ;
6151: PPOPN 1
6153: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6154: LD_EXP 16
6158: PUSH
6159: LD_EXP 41
6163: PPUSH
6164: LD_EXP 54
6168: PPUSH
6169: CALL_OW 296
6173: PUSH
6174: LD_INT 20
6176: LESS
6177: AND
6178: PUSH
6179: LD_EXP 41
6183: PPUSH
6184: CALL_OW 302
6188: AND
6189: PUSH
6190: LD_EXP 24
6194: NOT
6195: AND
6196: IFFALSE 6301
6198: GO 6200
6200: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6201: LD_ADDR_EXP 16
6205: PUSH
6206: LD_INT 0
6208: ST_TO_ADDR
// DialogueOn ;
6209: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6213: LD_EXP 41
6217: PPUSH
6218: LD_STRING DStevens-Pty-1a
6220: PPUSH
6221: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6225: LD_EXP 54
6229: PPUSH
6230: LD_STRING DStevens-Huck-2
6232: PPUSH
6233: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6237: LD_EXP 41
6241: PPUSH
6242: LD_STRING DStevens-Pty-2
6244: PPUSH
6245: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6249: LD_EXP 54
6253: PPUSH
6254: LD_STRING DStevens-Huck-3
6256: PPUSH
6257: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6261: LD_EXP 41
6265: PPUSH
6266: LD_STRING DStevens-Pty-3
6268: PPUSH
6269: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6273: LD_EXP 54
6277: PPUSH
6278: LD_STRING DStevens-Huck-4
6280: PPUSH
6281: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6285: LD_EXP 41
6289: PPUSH
6290: LD_STRING DStevens-Pty-4
6292: PPUSH
6293: CALL_OW 88
// DialogueOff ;
6297: CALL_OW 7
// end ;
6301: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and IsOK ( Petrosyan ) and not finishMissionBool do
6302: LD_EXP 54
6306: PPUSH
6307: LD_EXP 37
6311: PPUSH
6312: CALL_OW 296
6316: PUSH
6317: LD_INT 15
6319: LESS
6320: PUSH
6321: LD_EXP 41
6325: PPUSH
6326: CALL_OW 302
6330: AND
6331: PUSH
6332: LD_EXP 24
6336: NOT
6337: AND
6338: IFFALSE 6553
6340: GO 6342
6342: DISABLE
// begin DialogueOn ;
6343: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6347: LD_EXP 41
6351: PPUSH
6352: LD_STRING DStevensBurlak-Pty-1
6354: PPUSH
6355: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6359: LD_EXP 37
6363: PPUSH
6364: LD_STRING DStevensBurlak-Bur-1
6366: PPUSH
6367: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6371: LD_EXP 41
6375: PPUSH
6376: LD_STRING DStevensBurlak-Pty-2
6378: PPUSH
6379: CALL_OW 88
// case Query ( QKill ) of 1 :
6383: LD_STRING QKill
6385: PPUSH
6386: CALL_OW 97
6390: PUSH
6391: LD_INT 1
6393: DOUBLE
6394: EQUAL
6395: IFTRUE 6399
6397: GO 6477
6399: POP
// begin stevensCanExitMap = true ;
6400: LD_ADDR_EXP 19
6404: PUSH
6405: LD_INT 1
6407: ST_TO_ADDR
// stevensFollow = false ;
6408: LD_ADDR_EXP 15
6412: PUSH
6413: LD_INT 0
6415: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6416: LD_EXP 37
6420: PPUSH
6421: LD_STRING DKill-1-Bur-1
6423: PPUSH
6424: CALL_OW 88
// if IsOK ( Gleb ) then
6428: LD_EXP 40
6432: PPUSH
6433: CALL_OW 302
6437: IFFALSE 6451
// Say ( Gleb , DKill-1-Glb-1 ) ;
6439: LD_EXP 40
6443: PPUSH
6444: LD_STRING DKill-1-Glb-1
6446: PPUSH
6447: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6451: LD_EXP 54
6455: PPUSH
6456: LD_INT 1
6458: PPUSH
6459: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6463: LD_EXP 54
6467: PPUSH
6468: LD_INT 37
6470: PPUSH
6471: CALL_OW 113
// end ; 2 :
6475: GO 6549
6477: LD_INT 2
6479: DOUBLE
6480: EQUAL
6481: IFTRUE 6485
6483: GO 6548
6485: POP
// begin stevensCanExitMap = true ;
6486: LD_ADDR_EXP 19
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// stevensFollow = false ;
6494: LD_ADDR_EXP 15
6498: PUSH
6499: LD_INT 0
6501: ST_TO_ADDR
// stevensDepot = true ;
6502: LD_ADDR_EXP 17
6506: PUSH
6507: LD_INT 1
6509: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6510: LD_EXP 37
6514: PPUSH
6515: LD_STRING DKill-2-Bur-1
6517: PPUSH
6518: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6522: LD_EXP 41
6526: PPUSH
6527: LD_STRING DKill-2-Pty-1
6529: PPUSH
6530: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6534: LD_EXP 37
6538: PPUSH
6539: LD_STRING DKill-2-Bur-2
6541: PPUSH
6542: CALL_OW 88
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ;
6553: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6554: LD_EXP 15
6558: IFFALSE 6698
6560: GO 6562
6562: DISABLE
6563: LD_INT 0
6565: PPUSH
// begin enable ;
6566: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6567: LD_ADDR_VAR 0 1
6571: PUSH
6572: LD_INT 22
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 21
6584: PUSH
6585: LD_INT 1
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 50
6594: PUSH
6595: EMPTY
6596: LIST
6597: PUSH
6598: LD_INT 2
6600: PUSH
6601: LD_INT 25
6603: PUSH
6604: LD_INT 1
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 25
6613: PUSH
6614: LD_INT 2
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: LD_INT 25
6623: PUSH
6624: LD_INT 3
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 25
6633: PUSH
6634: LD_INT 4
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: CALL_OW 69
6658: PPUSH
6659: LD_EXP 54
6663: PPUSH
6664: CALL_OW 74
6668: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6669: LD_EXP 54
6673: PPUSH
6674: LD_VAR 0 1
6678: PPUSH
6679: CALL_OW 250
6683: PPUSH
6684: LD_VAR 0 1
6688: PPUSH
6689: CALL_OW 251
6693: PPUSH
6694: CALL_OW 111
// end ;
6698: PPOPN 1
6700: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6701: LD_EXP 17
6705: PUSH
6706: LD_INT 22
6708: PUSH
6709: LD_INT 3
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 21
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 30
6728: PUSH
6729: LD_INT 0
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 50
6738: PUSH
6739: EMPTY
6740: LIST
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: PPUSH
6748: CALL_OW 69
6752: NOT
6753: AND
6754: IFFALSE 6781
6756: GO 6758
6758: DISABLE
// begin enable ;
6759: ENABLE
// SetSide ( Stevens , 6 ) ;
6760: LD_EXP 54
6764: PPUSH
6765: LD_INT 6
6767: PPUSH
6768: CALL_OW 235
// ComHold ( Stevens ) ;
6772: LD_EXP 54
6776: PPUSH
6777: CALL_OW 140
// end ;
6781: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6782: LD_EXP 17
6786: PUSH
6787: LD_INT 22
6789: PUSH
6790: LD_INT 3
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 21
6799: PUSH
6800: LD_INT 3
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 30
6809: PUSH
6810: LD_INT 0
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 50
6819: PUSH
6820: EMPTY
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: PPUSH
6829: CALL_OW 69
6833: AND
6834: IFFALSE 7365
6836: GO 6838
6838: DISABLE
6839: LD_INT 0
6841: PPUSH
6842: PPUSH
6843: PPUSH
// begin enable ;
6844: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6845: LD_ADDR_VAR 0 1
6849: PUSH
6850: LD_INT 22
6852: PUSH
6853: LD_INT 3
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 21
6862: PUSH
6863: LD_INT 3
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 30
6872: PUSH
6873: LD_INT 0
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 50
6882: PUSH
6883: EMPTY
6884: LIST
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 69
6896: PUSH
6897: LD_INT 1
6899: ARRAY
6900: ST_TO_ADDR
// if not depot then
6901: LD_VAR 0 1
6905: NOT
6906: IFFALSE 6910
// exit ;
6908: GO 7365
// for depotUnit in depot do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: LD_VAR 0 1
6919: PUSH
6920: FOR_IN
6921: IFFALSE 6947
// if not IsConstructed ( depotUnit ) then
6923: LD_VAR 0 2
6927: PPUSH
6928: CALL_OW 304
6932: NOT
6933: IFFALSE 6945
// constructDepot = depotUnit ;
6935: LD_ADDR_VAR 0 3
6939: PUSH
6940: LD_VAR 0 2
6944: ST_TO_ADDR
6945: GO 6920
6947: POP
6948: POP
// if not constructDepot then
6949: LD_VAR 0 3
6953: NOT
6954: IFFALSE 6958
// exit ;
6956: GO 7365
// if not stevensWasInDepot then
6958: LD_EXP 18
6962: NOT
6963: IFFALSE 7103
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6965: LD_EXP 54
6969: PPUSH
6970: CALL_OW 310
6974: NOT
6975: PUSH
6976: LD_EXP 54
6980: PPUSH
6981: LD_VAR 0 1
6985: PPUSH
6986: CALL_OW 296
6990: PUSH
6991: LD_INT 8
6993: LESS
6994: NOT
6995: AND
6996: IFFALSE 7029
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
6998: LD_EXP 54
7002: PPUSH
7003: LD_VAR 0 3
7007: PPUSH
7008: CALL_OW 250
7012: PPUSH
7013: LD_VAR 0 3
7017: PPUSH
7018: CALL_OW 251
7022: PPUSH
7023: CALL_OW 111
7027: GO 7101
// begin InGameOn ;
7029: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7033: LD_EXP 54
7037: PPUSH
7038: LD_INT 3
7040: PPUSH
7041: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7045: LD_EXP 54
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: CALL_OW 120
// wait ( 0 0$1 ) ;
7059: LD_INT 35
7061: PPUSH
7062: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7066: LD_EXP 54
7070: PPUSH
7071: CALL_OW 310
7075: PUSH
7076: LD_EXP 54
7080: PPUSH
7081: CALL_OW 302
7085: NOT
7086: OR
7087: IFFALSE 7033
// InGameOff ;
7089: CALL_OW 9
// stevensWasInDepot = true ;
7093: LD_ADDR_EXP 18
7097: PUSH
7098: LD_INT 1
7100: ST_TO_ADDR
// end ; end else
7101: GO 7365
// begin if not IsInUnit ( Stevens ) then
7103: LD_EXP 54
7107: PPUSH
7108: CALL_OW 310
7112: NOT
7113: IFFALSE 7365
// begin DialogueOn ;
7115: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7119: LD_EXP 37
7123: PPUSH
7124: LD_STRING DRelease-Bur-1
7126: PPUSH
7127: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7131: LD_STRING QKillAgain
7133: PPUSH
7134: CALL_OW 97
7138: PUSH
7139: LD_INT 1
7141: DOUBLE
7142: EQUAL
7143: IFTRUE 7147
7145: GO 7210
7147: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7148: LD_EXP 37
7152: PPUSH
7153: LD_STRING DQrKillAgain#1-Bur-1
7155: PPUSH
7156: CALL_OW 88
// stevensCanExitMap = true ;
7160: LD_ADDR_EXP 19
7164: PUSH
7165: LD_INT 1
7167: ST_TO_ADDR
// stevensWasInDepot = false ;
7168: LD_ADDR_EXP 18
7172: PUSH
7173: LD_INT 0
7175: ST_TO_ADDR
// stevensDepot = false ;
7176: LD_ADDR_EXP 17
7180: PUSH
7181: LD_INT 0
7183: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7184: LD_EXP 54
7188: PPUSH
7189: LD_INT 1
7191: PPUSH
7192: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7196: LD_EXP 54
7200: PPUSH
7201: LD_INT 37
7203: PPUSH
7204: CALL_OW 113
// end ; 2 :
7208: GO 7361
7210: LD_INT 2
7212: DOUBLE
7213: EQUAL
7214: IFTRUE 7218
7216: GO 7269
7218: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7219: LD_EXP 37
7223: PPUSH
7224: LD_STRING DQrKillAgain#2-Bur-1
7226: PPUSH
7227: CALL_OW 88
// stevensCanExitMap = true ;
7231: LD_ADDR_EXP 19
7235: PUSH
7236: LD_INT 1
7238: ST_TO_ADDR
// stevensWasInDepot = false ;
7239: LD_ADDR_EXP 18
7243: PUSH
7244: LD_INT 0
7246: ST_TO_ADDR
// stevensDepot = false ;
7247: LD_ADDR_EXP 17
7251: PUSH
7252: LD_INT 0
7254: ST_TO_ADDR
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7255: LD_EXP 54
7259: PPUSH
7260: LD_INT 37
7262: PPUSH
7263: CALL_OW 113
// end ; 3 :
7267: GO 7361
7269: LD_INT 3
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7360
7277: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7278: LD_EXP 37
7282: PPUSH
7283: LD_STRING DQrKillAgain#2-Bur-1a
7285: PPUSH
7286: CALL_OW 88
// DialogueOff ;
7290: CALL_OW 7
// InGameOn ;
7294: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7298: LD_EXP 54
7302: PPUSH
7303: LD_INT 3
7305: PPUSH
7306: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7310: LD_EXP 54
7314: PPUSH
7315: LD_VAR 0 3
7319: PPUSH
7320: CALL_OW 120
// wait ( 0 0$1 ) ;
7324: LD_INT 35
7326: PPUSH
7327: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7331: LD_EXP 54
7335: PPUSH
7336: CALL_OW 310
7340: PUSH
7341: LD_EXP 54
7345: PPUSH
7346: CALL_OW 302
7350: NOT
7351: OR
7352: IFFALSE 7298
// InGameOff ;
7354: CALL_OW 9
// end ; end ;
7358: GO 7361
7360: POP
// DialogueOff ;
7361: CALL_OW 7
// end ; end ; end ;
7365: PPOPN 3
7367: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7368: LD_EXP 19
7372: PUSH
7373: LD_EXP 54
7377: PPUSH
7378: LD_INT 37
7380: PPUSH
7381: CALL_OW 308
7385: AND
7386: IFFALSE 7433
7388: GO 7390
7390: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7391: LD_EXP 54
7395: PPUSH
7396: CALL_OW 255
7400: PUSH
7401: LD_INT 6
7403: EQUAL
7404: IFFALSE 7416
// stevensStatus = 1 else
7406: LD_ADDR_EXP 2
7410: PUSH
7411: LD_INT 1
7413: ST_TO_ADDR
7414: GO 7424
// stevensStatus = 2 ;
7416: LD_ADDR_EXP 2
7420: PUSH
7421: LD_INT 2
7423: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7424: LD_EXP 54
7428: PPUSH
7429: CALL_OW 64
// end ;
7433: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7434: LD_INT 3
7436: PPUSH
7437: LD_INT 1
7439: PPUSH
7440: CALL_OW 292
7444: IFFALSE 7644
7446: GO 7448
7448: DISABLE
7449: LD_INT 0
7451: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7452: LD_ADDR_VAR 0 1
7456: PUSH
7457: LD_INT 1
7459: PPUSH
7460: LD_INT 2
7462: PPUSH
7463: CALL_OW 12
7467: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7468: LD_INT 1
7470: PPUSH
7471: CALL_OW 87
// DialogueOn ;
7475: CALL_OW 6
// if rnd = 1 then
7479: LD_VAR 0 1
7483: PUSH
7484: LD_INT 1
7486: EQUAL
7487: IFFALSE 7503
// Say ( Burlak , DMastodon-Bur-1 ) else
7489: LD_EXP 37
7493: PPUSH
7494: LD_STRING DMastodon-Bur-1
7496: PPUSH
7497: CALL_OW 88
7501: GO 7617
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7503: LD_INT 22
7505: PUSH
7506: LD_INT 3
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 21
7515: PUSH
7516: LD_INT 1
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 26
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 50
7535: PUSH
7536: EMPTY
7537: LIST
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 25
7544: PUSH
7545: LD_INT 1
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 25
7554: PUSH
7555: LD_INT 2
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 25
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 25
7574: PUSH
7575: LD_INT 4
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: PPUSH
7596: CALL_OW 69
7600: PPUSH
7601: LD_STRING DMastodon-RSol1-1
7603: PPUSH
7604: LD_STRING 
7606: PPUSH
7607: LD_INT 0
7609: PPUSH
7610: LD_INT 1
7612: PPUSH
7613: CALL 8770 0 5
// if IsOK ( Gleb ) then
7617: LD_EXP 40
7621: PPUSH
7622: CALL_OW 302
7626: IFFALSE 7640
// Say ( Gleb , DMastodon-Glb-1 ) ;
7628: LD_EXP 40
7632: PPUSH
7633: LD_STRING DMastodon-Glb-1
7635: PPUSH
7636: CALL_OW 88
// DialogueOff ;
7640: CALL_OW 7
// end ;
7644: PPOPN 1
7646: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7647: LD_INT 1
7649: PPUSH
7650: CALL_OW 302
7654: NOT
7655: IFFALSE 7734
7657: GO 7659
7659: DISABLE
// begin omarCanExitMap = true ;
7660: LD_ADDR_EXP 20
7664: PUSH
7665: LD_INT 1
7667: ST_TO_ADDR
// DialogueOn ;
7668: CALL_OW 6
// if IsOK ( Karamazov ) then
7672: LD_EXP 38
7676: PPUSH
7677: CALL_OW 302
7681: IFFALSE 7695
// Say ( Karamazov , DOmar-Kar-1 ) ;
7683: LD_EXP 38
7687: PPUSH
7688: LD_STRING DOmar-Kar-1
7690: PPUSH
7691: CALL_OW 88
// if IsOK ( Petrovova ) then
7695: LD_EXP 39
7699: PPUSH
7700: CALL_OW 302
7704: IFFALSE 7718
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7706: LD_EXP 39
7710: PPUSH
7711: LD_STRING DOmar-Ptr-1
7713: PPUSH
7714: CALL_OW 88
// DialogueOff ;
7718: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7722: LD_EXP 48
7726: PPUSH
7727: LD_INT 41
7729: PPUSH
7730: CALL_OW 113
// end ;
7734: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7735: LD_EXP 48
7739: PPUSH
7740: LD_INT 41
7742: PPUSH
7743: CALL_OW 308
7747: PUSH
7748: LD_EXP 20
7752: AND
7753: IFFALSE 7775
7755: GO 7757
7757: DISABLE
// begin RemoveUnit ( Omar ) ;
7758: LD_EXP 48
7762: PPUSH
7763: CALL_OW 64
// omarStatus = 1 ;
7767: LD_ADDR_EXP 1
7771: PUSH
7772: LD_INT 1
7774: ST_TO_ADDR
// end ;
7775: END
// every 0 0$1 trigger IsDead ( Omar ) do
7776: LD_EXP 48
7780: PPUSH
7781: CALL_OW 301
7785: IFFALSE 7943
7787: GO 7789
7789: DISABLE
// begin DialogueOn ;
7790: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7794: LD_INT 22
7796: PUSH
7797: LD_INT 3
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 21
7806: PUSH
7807: LD_INT 1
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 26
7816: PUSH
7817: LD_INT 1
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 50
7826: PUSH
7827: EMPTY
7828: LIST
7829: PUSH
7830: LD_INT 2
7832: PUSH
7833: LD_INT 25
7835: PUSH
7836: LD_INT 1
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 25
7845: PUSH
7846: LD_INT 2
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 25
7855: PUSH
7856: LD_INT 3
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PUSH
7863: LD_INT 25
7865: PUSH
7866: LD_INT 4
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: PPUSH
7887: CALL_OW 69
7891: PPUSH
7892: LD_STRING DOmar-RSol1-1
7894: PPUSH
7895: LD_STRING 
7897: PPUSH
7898: LD_INT 0
7900: PPUSH
7901: LD_INT 1
7903: PPUSH
7904: CALL 8770 0 5
// wait ( 0 0$1 ) ;
7908: LD_INT 35
7910: PPUSH
7911: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
7915: LD_EXP 47
7919: PPUSH
7920: LD_STRING DOmar-Hke-1
7922: PPUSH
7923: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
7927: LD_EXP 37
7931: PPUSH
7932: LD_STRING DOmar-Bur-1
7934: PPUSH
7935: CALL_OW 88
// DialogueOff ;
7939: CALL_OW 7
// end ;
7943: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
7944: LD_EXP 48
7948: PPUSH
7949: CALL_OW 301
7953: PUSH
7954: LD_EXP 48
7958: PPUSH
7959: CALL_OW 305
7963: NOT
7964: OR
7965: PUSH
7966: LD_EXP 49
7970: PUSH
7971: LD_INT 3
7973: LESS
7974: AND
7975: IFFALSE 8126
7977: GO 7979
7979: DISABLE
// begin if actionTime < arabBreakthrough then
7980: LD_EXP 7
7984: PUSH
7985: LD_EXP 32
7989: LESS
7990: IFFALSE 8000
// fastBreakthrough = true ;
7992: LD_ADDR_EXP 23
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// DialogueOn ;
8000: CALL_OW 6
// if IsOK ( Petrovova ) then
8004: LD_EXP 39
8008: PPUSH
8009: CALL_OW 302
8013: IFFALSE 8027
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
8015: LD_EXP 39
8019: PPUSH
8020: LD_STRING DBreakthrough-Ptr-1
8022: PPUSH
8023: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
8027: LD_EXP 37
8031: PPUSH
8032: LD_STRING DBreakthrough-Bur-1
8034: PPUSH
8035: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
8039: LD_EXP 45
8043: PPUSH
8044: LD_STRING DBreakthrough-Pla-1
8046: PPUSH
8047: CALL_OW 94
// if fastBreakthrough then
8051: LD_EXP 23
8055: IFFALSE 8071
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8057: LD_EXP 45
8061: PPUSH
8062: LD_STRING DBreakthrough-Pla-1a
8064: PPUSH
8065: CALL_OW 94
8069: GO 8083
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8071: LD_EXP 45
8075: PPUSH
8076: LD_STRING DBreakthrough-Pla-1b
8078: PPUSH
8079: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8083: LD_EXP 45
8087: PPUSH
8088: LD_STRING DBreakthrough-Pla-1c
8090: PPUSH
8091: CALL_OW 94
// DialogueOff ;
8095: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8099: LD_STRING MAddLab
8101: PPUSH
8102: CALL_OW 337
// arabianCanExitMap = true ;
8106: LD_ADDR_EXP 21
8110: PUSH
8111: LD_INT 1
8113: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8114: LD_EXP 49
8118: PPUSH
8119: LD_INT 41
8121: PPUSH
8122: CALL_OW 113
// end ;
8126: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8127: LD_EXP 21
8131: IFFALSE 8196
8133: GO 8135
8135: DISABLE
8136: LD_INT 0
8138: PPUSH
// begin enable ;
8139: ENABLE
// for unit in arabianUnitsInBase do
8140: LD_ADDR_VAR 0 1
8144: PUSH
8145: LD_EXP 49
8149: PUSH
8150: FOR_IN
8151: IFFALSE 8194
// if IsInArea ( unit , ArabianExitArea ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 41
8160: PPUSH
8161: CALL_OW 308
8165: IFFALSE 8192
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8167: LD_ADDR_EXP 49
8171: PUSH
8172: LD_EXP 49
8176: PUSH
8177: LD_VAR 0 1
8181: DIFF
8182: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 64
// end ;
8192: GO 8150
8194: POP
8195: POP
// end ;
8196: PPOPN 1
8198: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8199: LD_EXP 12
8203: NOT
8204: IFFALSE 8442
8206: GO 8208
8208: DISABLE
8209: LD_INT 0
8211: PPUSH
// begin for unit in arabianPatrolVehicles do
8212: LD_ADDR_VAR 0 1
8216: PUSH
8217: LD_EXP 50
8221: PUSH
8222: FOR_IN
8223: IFFALSE 8440
// if See ( 3 , unit ) then
8225: LD_INT 3
8227: PPUSH
8228: LD_VAR 0 1
8232: PPUSH
8233: CALL_OW 292
8237: IFFALSE 8438
// begin dial_southRoadBlocker = true ;
8239: LD_ADDR_EXP 12
8243: PUSH
8244: LD_INT 1
8246: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 87
// if IsOK ( Karamazov ) then
8256: LD_EXP 38
8260: PPUSH
8261: CALL_OW 302
8265: IFFALSE 8279
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8267: LD_EXP 38
8271: PPUSH
8272: LD_STRING DPatrol-Kar-1
8274: PPUSH
8275: CALL_OW 88
// if IsOK ( Petrovova ) then
8279: LD_EXP 39
8283: PPUSH
8284: CALL_OW 302
8288: IFFALSE 8302
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8290: LD_EXP 39
8294: PPUSH
8295: LD_STRING DPatrol-Ptr-1
8297: PPUSH
8298: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8302: LD_INT 22
8304: PUSH
8305: LD_INT 3
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 21
8314: PUSH
8315: LD_INT 1
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 26
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 50
8334: PUSH
8335: EMPTY
8336: LIST
8337: PUSH
8338: LD_INT 2
8340: PUSH
8341: LD_INT 25
8343: PUSH
8344: LD_INT 1
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: LD_INT 25
8353: PUSH
8354: LD_INT 2
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PUSH
8361: LD_INT 25
8363: PUSH
8364: LD_INT 3
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 25
8373: PUSH
8374: LD_INT 4
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: PPUSH
8395: CALL_OW 69
8399: PUSH
8400: LD_EXP 38
8404: DIFF
8405: PPUSH
8406: LD_STRING DPatrol-RSol1-1
8408: PPUSH
8409: LD_STRING 
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: LD_INT 1
8417: PPUSH
8418: CALL 8770 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8422: LD_EXP 37
8426: PPUSH
8427: LD_STRING DPatrol-Bur-1
8429: PPUSH
8430: CALL_OW 88
// exit ;
8434: POP
8435: POP
8436: GO 8442
// end ;
8438: GO 8222
8440: POP
8441: POP
// end ;
8442: PPOPN 1
8444: END
// every 10 10$0 do
8445: GO 8447
8447: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8448: CALL 2561 0 0
8452: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8453: LD_INT 0
8455: PPUSH
8456: PPUSH
// if debugMode then
8457: LD_EXP 30
8461: IFFALSE 8478
// unit := NewCharacter ( ident ) ;
8463: LD_ADDR_VAR 0 5
8467: PUSH
8468: LD_VAR 0 1
8472: PPUSH
8473: CALL_OW 25
8477: ST_TO_ADDR
// if exist_mode and not debugMode then
8478: LD_VAR 0 2
8482: PUSH
8483: LD_EXP 30
8487: NOT
8488: AND
8489: IFFALSE 8514
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8491: LD_ADDR_VAR 0 5
8495: PUSH
8496: LD_EXP 29
8500: PUSH
8501: LD_VAR 0 1
8505: STR
8506: PPUSH
8507: CALL_OW 34
8511: ST_TO_ADDR
8512: GO 8536
// if not debugMode then
8514: LD_EXP 30
8518: NOT
8519: IFFALSE 8536
// unit := NewCharacter ( ident ) ;
8521: LD_ADDR_VAR 0 5
8525: PUSH
8526: LD_VAR 0 1
8530: PPUSH
8531: CALL_OW 25
8535: ST_TO_ADDR
// if class then
8536: LD_VAR 0 3
8540: IFFALSE 8556
// SetClass ( unit , class ) ;
8542: LD_VAR 0 5
8546: PPUSH
8547: LD_VAR 0 3
8551: PPUSH
8552: CALL_OW 336
// result := unit ;
8556: LD_ADDR_VAR 0 4
8560: PUSH
8561: LD_VAR 0 5
8565: ST_TO_ADDR
// end ;
8566: LD_VAR 0 4
8570: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8571: LD_INT 0
8573: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8574: LD_VAR 0 1
8578: PPUSH
8579: CALL_OW 255
8583: PUSH
8584: LD_VAR 0 3
8588: EQUAL
8589: PUSH
8590: LD_VAR 0 1
8594: PPUSH
8595: CALL_OW 302
8599: AND
8600: IFFALSE 8622
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8602: LD_VAR 0 1
8606: PPUSH
8607: LD_EXP 28
8611: PUSH
8612: LD_VAR 0 2
8616: STR
8617: PPUSH
8618: CALL_OW 38
// end ;
8622: LD_VAR 0 4
8626: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8627: LD_INT 0
8629: PPUSH
8630: PPUSH
8631: PPUSH
// resultCharactersToSave = [ ] ;
8632: LD_ADDR_VAR 0 6
8636: PUSH
8637: EMPTY
8638: ST_TO_ADDR
// for unit in characters do
8639: LD_ADDR_VAR 0 5
8643: PUSH
8644: LD_VAR 0 1
8648: PUSH
8649: FOR_IN
8650: IFFALSE 8698
// if GetSide ( unit ) = side and IsOK ( unit ) then
8652: LD_VAR 0 5
8656: PPUSH
8657: CALL_OW 255
8661: PUSH
8662: LD_VAR 0 3
8666: EQUAL
8667: PUSH
8668: LD_VAR 0 5
8672: PPUSH
8673: CALL_OW 302
8677: AND
8678: IFFALSE 8696
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8680: LD_ADDR_VAR 0 6
8684: PUSH
8685: LD_VAR 0 6
8689: PUSH
8690: LD_VAR 0 5
8694: ADD
8695: ST_TO_ADDR
8696: GO 8649
8698: POP
8699: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8700: LD_VAR 0 6
8704: PPUSH
8705: LD_EXP 28
8709: PUSH
8710: LD_VAR 0 2
8714: STR
8715: PPUSH
8716: CALL_OW 38
// end ;
8720: LD_VAR 0 4
8724: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8725: LD_INT 0
8727: PPUSH
8728: PPUSH
// for unit in units do
8729: LD_ADDR_VAR 0 5
8733: PUSH
8734: LD_VAR 0 1
8738: PUSH
8739: FOR_IN
8740: IFFALSE 8763
// PlaceUnitArea ( unit , area , spawnMode ) ;
8742: LD_VAR 0 5
8746: PPUSH
8747: LD_VAR 0 2
8751: PPUSH
8752: LD_VAR 0 3
8756: PPUSH
8757: CALL_OW 49
8761: GO 8739
8763: POP
8764: POP
// end ;
8765: LD_VAR 0 4
8769: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8770: LD_INT 0
8772: PPUSH
8773: PPUSH
8774: PPUSH
8775: PPUSH
// units = characters ;
8776: LD_ADDR_VAR 0 9
8780: PUSH
8781: LD_VAR 0 1
8785: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8786: LD_ADDR_VAR 0 9
8790: PUSH
8791: LD_VAR 0 9
8795: PUSH
8796: LD_EXP 37
8800: PUSH
8801: LD_EXP 38
8805: PUSH
8806: LD_EXP 39
8810: PUSH
8811: LD_EXP 40
8815: PUSH
8816: LD_EXP 41
8820: PUSH
8821: LD_EXP 42
8825: PUSH
8826: LD_EXP 43
8830: PUSH
8831: LD_EXP 44
8835: PUSH
8836: LD_EXP 54
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: DIFF
8852: ST_TO_ADDR
// if not units and not canTalkHero then
8853: LD_VAR 0 9
8857: NOT
8858: PUSH
8859: LD_VAR 0 5
8863: NOT
8864: AND
8865: IFFALSE 8869
// exit ;
8867: GO 9048
// if not units then
8869: LD_VAR 0 9
8873: NOT
8874: IFFALSE 8901
// units = characters diff [ Burlak , Stevens ] ;
8876: LD_ADDR_VAR 0 9
8880: PUSH
8881: LD_VAR 0 1
8885: PUSH
8886: LD_EXP 37
8890: PUSH
8891: LD_EXP 54
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: DIFF
8900: ST_TO_ADDR
// if not units and canTalkHero then
8901: LD_VAR 0 9
8905: NOT
8906: PUSH
8907: LD_VAR 0 5
8911: AND
8912: IFFALSE 8916
// exit ;
8914: GO 9048
// speaker := units [ rand ( 1 , units ) ] ;
8916: LD_ADDR_VAR 0 8
8920: PUSH
8921: LD_VAR 0 9
8925: PUSH
8926: LD_INT 1
8928: PPUSH
8929: LD_VAR 0 9
8933: PPUSH
8934: CALL_OW 12
8938: ARRAY
8939: ST_TO_ADDR
// if radio then
8940: LD_VAR 0 4
8944: IFFALSE 8993
// begin if GetSex ( speaker ) = sex_male then
8946: LD_VAR 0 8
8950: PPUSH
8951: CALL_OW 258
8955: PUSH
8956: LD_INT 1
8958: EQUAL
8959: IFFALSE 8977
// SayRadio ( speaker , dialogMID ) else
8961: LD_VAR 0 8
8965: PPUSH
8966: LD_VAR 0 2
8970: PPUSH
8971: CALL_OW 94
8975: GO 8991
// SayRadio ( speaker , dialogFID ) ;
8977: LD_VAR 0 8
8981: PPUSH
8982: LD_VAR 0 3
8986: PPUSH
8987: CALL_OW 94
// end else
8991: GO 9038
// begin if GetSex ( speaker ) = sex_male then
8993: LD_VAR 0 8
8997: PPUSH
8998: CALL_OW 258
9002: PUSH
9003: LD_INT 1
9005: EQUAL
9006: IFFALSE 9024
// Say ( speaker , dialogMID ) else
9008: LD_VAR 0 8
9012: PPUSH
9013: LD_VAR 0 2
9017: PPUSH
9018: CALL_OW 88
9022: GO 9038
// Say ( speaker , dialogFID ) ;
9024: LD_VAR 0 8
9028: PPUSH
9029: LD_VAR 0 3
9033: PPUSH
9034: CALL_OW 88
// end ; result := speaker ;
9038: LD_ADDR_VAR 0 6
9042: PUSH
9043: LD_VAR 0 8
9047: ST_TO_ADDR
// end ;
9048: LD_VAR 0 6
9052: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9053: LD_INT 0
9055: PPUSH
9056: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9057: LD_ADDR_VAR 0 4
9061: PUSH
9062: LD_VAR 0 2
9066: PPUSH
9067: CALL_OW 254
9071: PUSH
9072: LD_INT 3
9074: MINUS
9075: ST_TO_ADDR
// if dir < 0 then
9076: LD_VAR 0 4
9080: PUSH
9081: LD_INT 0
9083: LESS
9084: IFFALSE 9100
// dir := 6 + dir ;
9086: LD_ADDR_VAR 0 4
9090: PUSH
9091: LD_INT 6
9093: PUSH
9094: LD_VAR 0 4
9098: PLUS
9099: ST_TO_ADDR
// SetDir ( un , dir ) ;
9100: LD_VAR 0 1
9104: PPUSH
9105: LD_VAR 0 4
9109: PPUSH
9110: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9114: LD_VAR 0 1
9118: PPUSH
9119: LD_VAR 0 2
9123: PPUSH
9124: CALL_OW 52
// result = un ;
9128: LD_ADDR_VAR 0 3
9132: PUSH
9133: LD_VAR 0 1
9137: ST_TO_ADDR
// end ;
9138: LD_VAR 0 3
9142: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9143: LD_INT 0
9145: PPUSH
9146: PPUSH
9147: PPUSH
9148: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9149: LD_ADDR_VAR 0 6
9153: PUSH
9154: LD_INT 34
9156: PUSH
9157: LD_INT 71
9159: PUSH
9160: LD_INT 70
9162: PUSH
9163: LD_INT 69
9165: PUSH
9166: LD_INT 39
9168: PUSH
9169: LD_INT 31
9171: PUSH
9172: LD_INT 14
9174: PUSH
9175: LD_INT 10
9177: PUSH
9178: LD_INT 40
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: ST_TO_ADDR
// resultWeapons = [ ] ;
9192: LD_ADDR_VAR 0 5
9196: PUSH
9197: EMPTY
9198: ST_TO_ADDR
// for i := 1 to weaponTechs do
9199: LD_ADDR_VAR 0 4
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_VAR 0 6
9213: PUSH
9214: FOR_TO
9215: IFFALSE 9402
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9217: LD_VAR 0 6
9221: PUSH
9222: LD_VAR 0 4
9226: ARRAY
9227: PPUSH
9228: LD_VAR 0 2
9232: PPUSH
9233: CALL_OW 482
9237: PUSH
9238: LD_VAR 0 6
9242: PUSH
9243: LD_VAR 0 4
9247: ARRAY
9248: PPUSH
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 321
9258: PUSH
9259: LD_INT 2
9261: EQUAL
9262: AND
9263: IFFALSE 9400
// case nation of nation_american :
9265: LD_VAR 0 2
9269: PUSH
9270: LD_INT 1
9272: DOUBLE
9273: EQUAL
9274: IFTRUE 9278
9276: GO 9313
9278: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9279: LD_ADDR_VAR 0 5
9283: PUSH
9284: LD_VAR 0 5
9288: PUSH
9289: LD_VAR 0 6
9293: PUSH
9294: LD_VAR 0 4
9298: ARRAY
9299: PPUSH
9300: LD_VAR 0 2
9304: PPUSH
9305: CALL 9419 0 2
9309: ADD
9310: ST_TO_ADDR
9311: GO 9400
9313: LD_INT 2
9315: DOUBLE
9316: EQUAL
9317: IFTRUE 9321
9319: GO 9356
9321: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9322: LD_ADDR_VAR 0 5
9326: PUSH
9327: LD_VAR 0 5
9331: PUSH
9332: LD_VAR 0 6
9336: PUSH
9337: LD_VAR 0 4
9341: ARRAY
9342: PPUSH
9343: LD_VAR 0 2
9347: PPUSH
9348: CALL 9419 0 2
9352: ADD
9353: ST_TO_ADDR
9354: GO 9400
9356: LD_INT 3
9358: DOUBLE
9359: EQUAL
9360: IFTRUE 9364
9362: GO 9399
9364: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9365: LD_ADDR_VAR 0 5
9369: PUSH
9370: LD_VAR 0 5
9374: PUSH
9375: LD_VAR 0 6
9379: PUSH
9380: LD_VAR 0 4
9384: ARRAY
9385: PPUSH
9386: LD_VAR 0 2
9390: PPUSH
9391: CALL 9419 0 2
9395: ADD
9396: ST_TO_ADDR
9397: GO 9400
9399: POP
// end ;
9400: GO 9214
9402: POP
9403: POP
// result = resultWeapons ;
9404: LD_ADDR_VAR 0 3
9408: PUSH
9409: LD_VAR 0 5
9413: ST_TO_ADDR
// end ;
9414: LD_VAR 0 3
9418: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9419: LD_INT 0
9421: PPUSH
// case tech of tech_AdvMet :
9422: LD_VAR 0 1
9426: PUSH
9427: LD_INT 34
9429: DOUBLE
9430: EQUAL
9431: IFTRUE 9435
9433: GO 9463
9435: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9436: LD_ADDR_VAR 0 3
9440: PUSH
9441: LD_INT 6
9443: PUSH
9444: LD_STRING 
9446: PUSH
9447: LD_INT 46
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: LIST
9454: PUSH
9455: LD_VAR 0 2
9459: ARRAY
9460: ST_TO_ADDR
9461: GO 9752
9463: LD_INT 71
9465: DOUBLE
9466: EQUAL
9467: IFTRUE 9471
9469: GO 9499
9471: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9472: LD_ADDR_VAR 0 3
9476: PUSH
9477: LD_STRING 
9479: PUSH
9480: LD_STRING 
9482: PUSH
9483: LD_INT 47
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: PUSH
9491: LD_VAR 0 2
9495: ARRAY
9496: ST_TO_ADDR
9497: GO 9752
9499: LD_INT 70
9501: DOUBLE
9502: EQUAL
9503: IFTRUE 9507
9505: GO 9535
9507: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9508: LD_ADDR_VAR 0 3
9512: PUSH
9513: LD_STRING 
9515: PUSH
9516: LD_INT 26
9518: PUSH
9519: LD_STRING 
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: PUSH
9527: LD_VAR 0 2
9531: ARRAY
9532: ST_TO_ADDR
9533: GO 9752
9535: LD_INT 69
9537: DOUBLE
9538: EQUAL
9539: IFTRUE 9543
9541: GO 9571
9543: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9544: LD_ADDR_VAR 0 3
9548: PUSH
9549: LD_INT 4
9551: PUSH
9552: LD_INT 25
9554: PUSH
9555: LD_INT 43
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: PUSH
9563: LD_VAR 0 2
9567: ARRAY
9568: ST_TO_ADDR
9569: GO 9752
9571: LD_INT 39
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9607
9579: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9580: LD_ADDR_VAR 0 3
9584: PUSH
9585: LD_INT 5
9587: PUSH
9588: LD_INT 27
9590: PUSH
9591: LD_INT 44
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: PUSH
9599: LD_VAR 0 2
9603: ARRAY
9604: ST_TO_ADDR
9605: GO 9752
9607: LD_INT 31
9609: DOUBLE
9610: EQUAL
9611: IFTRUE 9615
9613: GO 9643
9615: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9616: LD_ADDR_VAR 0 3
9620: PUSH
9621: LD_STRING 
9623: PUSH
9624: LD_STRING 
9626: PUSH
9627: LD_INT 49
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: PUSH
9635: LD_VAR 0 2
9639: ARRAY
9640: ST_TO_ADDR
9641: GO 9752
9643: LD_INT 14
9645: DOUBLE
9646: EQUAL
9647: IFTRUE 9651
9649: GO 9679
9651: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9652: LD_ADDR_VAR 0 3
9656: PUSH
9657: LD_INT 10
9659: PUSH
9660: LD_STRING 
9662: PUSH
9663: LD_STRING 
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: PUSH
9671: LD_VAR 0 2
9675: ARRAY
9676: ST_TO_ADDR
9677: GO 9752
9679: LD_INT 10
9681: DOUBLE
9682: EQUAL
9683: IFTRUE 9687
9685: GO 9715
9687: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9688: LD_ADDR_VAR 0 3
9692: PUSH
9693: LD_INT 9
9695: PUSH
9696: LD_STRING 
9698: PUSH
9699: LD_STRING 
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: PUSH
9707: LD_VAR 0 2
9711: ARRAY
9712: ST_TO_ADDR
9713: GO 9752
9715: LD_INT 40
9717: DOUBLE
9718: EQUAL
9719: IFTRUE 9723
9721: GO 9751
9723: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9724: LD_ADDR_VAR 0 3
9728: PUSH
9729: LD_INT 7
9731: PUSH
9732: LD_INT 28
9734: PUSH
9735: LD_INT 45
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: LD_VAR 0 2
9747: ARRAY
9748: ST_TO_ADDR
9749: GO 9752
9751: POP
// end ;
9752: LD_VAR 0 3
9756: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9757: LD_INT 0
9759: PPUSH
9760: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9761: LD_ADDR_VAR 0 2
9765: PUSH
9766: LD_VAR 0 1
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 289
9778: PUSH
9779: LD_VAR 0 1
9783: PPUSH
9784: LD_INT 2
9786: PPUSH
9787: CALL_OW 289
9791: PUSH
9792: LD_VAR 0 1
9796: PPUSH
9797: LD_INT 3
9799: PPUSH
9800: CALL_OW 289
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: ST_TO_ADDR
// end ; end_of_file
9810: LD_VAR 0 2
9814: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9815: LD_VAR 0 1
9819: PPUSH
9820: CALL_OW 255
9824: PUSH
9825: LD_INT 3
9827: EQUAL
9828: PUSH
9829: LD_VAR 0 1
9833: PPUSH
9834: CALL_OW 266
9838: PUSH
9839: LD_INT 0
9841: EQUAL
9842: AND
9843: IFFALSE 9857
// SetBname ( building , bukharin ) ;
9845: LD_VAR 0 1
9849: PPUSH
9850: LD_STRING bukharin
9852: PPUSH
9853: CALL_OW 500
// if GetSide ( building ) = 2 then
9857: LD_VAR 0 1
9861: PPUSH
9862: CALL_OW 255
9866: PUSH
9867: LD_INT 2
9869: EQUAL
9870: IFFALSE 10028
// begin if GetBType ( building ) = b_lab then
9872: LD_VAR 0 1
9876: PPUSH
9877: CALL_OW 266
9881: PUSH
9882: LD_INT 6
9884: EQUAL
9885: IFFALSE 9899
// ComUpgradeLab ( building , b_lab_weapon ) ;
9887: LD_VAR 0 1
9891: PPUSH
9892: LD_INT 10
9894: PPUSH
9895: CALL_OW 147
// if GetBType ( building ) = b_workshop then
9899: LD_VAR 0 1
9903: PPUSH
9904: CALL_OW 266
9908: PUSH
9909: LD_INT 2
9911: EQUAL
9912: IFFALSE 9923
// ComUpgrade ( building ) ;
9914: LD_VAR 0 1
9918: PPUSH
9919: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
9923: LD_VAR 0 1
9927: PPUSH
9928: CALL_OW 266
9932: PUSH
9933: LD_INT 17
9935: EQUAL
9936: IFFALSE 10028
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 3 , 5 , 6 ] [ Difficulty ] , [ 1 , 2 , 2 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , true ) ;
9938: LD_INT 2
9940: PPUSH
9941: LD_INT 2
9943: PPUSH
9944: LD_EXP 49
9948: PPUSH
9949: LD_INT 34
9951: PPUSH
9952: LD_INT 39
9954: PPUSH
9955: LD_INT 40
9957: PPUSH
9958: LD_INT 35
9960: PPUSH
9961: LD_INT 3
9963: PUSH
9964: LD_INT 5
9966: PUSH
9967: LD_INT 6
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: PUSH
9975: LD_OWVAR 67
9979: ARRAY
9980: PPUSH
9981: LD_INT 1
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: LD_INT 2
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: PUSH
9995: LD_OWVAR 67
9999: ARRAY
10000: PPUSH
10001: LD_INT 2
10003: PUSH
10004: LD_INT 3
10006: PUSH
10007: LD_INT 4
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: PUSH
10015: LD_OWVAR 67
10019: ARRAY
10020: PPUSH
10021: LD_INT 1
10023: PPUSH
10024: CALL 10736 0 11
// end ; end ;
10028: PPOPN 1
10030: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
10031: LD_VAR 0 2
10035: PPUSH
10036: CALL_OW 255
10040: PUSH
10041: LD_INT 3
10043: EQUAL
10044: PUSH
10045: LD_VAR 0 2
10049: PPUSH
10050: CALL_OW 248
10054: PUSH
10055: LD_INT 3
10057: EQUAL
10058: AND
10059: PUSH
10060: LD_EXP 10
10064: NOT
10065: AND
10066: IFFALSE 10077
// Dial_TameApe ( human ) ;
10068: LD_VAR 0 2
10072: PPUSH
10073: CALL 4481 0 1
// end ;
10077: PPOPN 2
10079: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10080: LD_VAR 0 1
10084: PUSH
10085: LD_INT 1
10087: EQUAL
10088: PUSH
10089: LD_VAR 0 2
10093: PPUSH
10094: CALL_OW 255
10098: PUSH
10099: LD_INT 3
10101: EQUAL
10102: AND
10103: IFFALSE 10109
// Dial_ResearchApeLang ;
10105: CALL 4370 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10109: LD_VAR 0 1
10113: PUSH
10114: LD_INT 2
10116: EQUAL
10117: PUSH
10118: LD_VAR 0 2
10122: PPUSH
10123: CALL_OW 255
10127: PUSH
10128: LD_INT 3
10130: EQUAL
10131: AND
10132: IFFALSE 10138
// Dial_ResearchApePsych ;
10134: CALL 4914 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10138: LD_VAR 0 1
10142: PUSH
10143: LD_INT 11
10145: EQUAL
10146: PUSH
10147: LD_VAR 0 2
10151: PPUSH
10152: CALL_OW 255
10156: PUSH
10157: LD_INT 3
10159: EQUAL
10160: AND
10161: IFFALSE 10167
// Dial_ResearchApeAgress ;
10163: CALL 5106 0 0
// end ;
10167: PPOPN 2
10169: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10170: LD_VAR 0 2
10174: PPUSH
10175: CALL_OW 255
10179: PUSH
10180: LD_INT 3
10182: EQUAL
10183: PUSH
10184: LD_VAR 0 2
10188: PPUSH
10189: CALL_OW 257
10193: PUSH
10194: LD_INT 12
10196: EQUAL
10197: AND
10198: PUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: CALL_OW 266
10208: PUSH
10209: LD_INT 6
10211: EQUAL
10212: PUSH
10213: LD_VAR 0 1
10217: PPUSH
10218: CALL_OW 266
10222: PUSH
10223: LD_INT 7
10225: EQUAL
10226: OR
10227: AND
10228: PUSH
10229: LD_EXP 11
10233: NOT
10234: AND
10235: IFFALSE 10241
// Dial_ApeEnterLab ;
10237: CALL 4702 0 0
// end ;
10241: PPOPN 2
10243: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10244: LD_VAR 0 1
10248: PUSH
10249: LD_EXP 50
10253: IN
10254: IFFALSE 10272
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10256: LD_ADDR_EXP 50
10260: PUSH
10261: LD_EXP 50
10265: PUSH
10266: LD_VAR 0 1
10270: DIFF
10271: ST_TO_ADDR
// if unit in arabianHovercrafts then
10272: LD_VAR 0 1
10276: PUSH
10277: LD_EXP 51
10281: IN
10282: IFFALSE 10300
// arabianHovercrafts = arabianHovercrafts diff unit ;
10284: LD_ADDR_EXP 51
10288: PUSH
10289: LD_EXP 51
10293: PUSH
10294: LD_VAR 0 1
10298: DIFF
10299: ST_TO_ADDR
// end ;
10300: PPOPN 1
10302: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10303: LD_VAR 0 1
10307: PUSH
10308: LD_EXP 49
10312: IN
10313: IFFALSE 10331
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10315: LD_ADDR_EXP 49
10319: PUSH
10320: LD_EXP 49
10324: PUSH
10325: LD_VAR 0 1
10329: DIFF
10330: ST_TO_ADDR
// if unit = Burlak then
10331: LD_VAR 0 1
10335: PUSH
10336: LD_EXP 37
10340: EQUAL
10341: IFFALSE 10347
// Lose_Burlak ;
10343: CALL 16915 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10347: LD_INT 22
10349: PUSH
10350: LD_INT 3
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 21
10359: PUSH
10360: LD_INT 1
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 23
10369: PUSH
10370: LD_INT 3
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 69
10386: PUSH
10387: LD_INT 6
10389: LESS
10390: IFFALSE 10396
// Lose_Survive ;
10392: CALL 16930 0 0
// end ;
10396: PPOPN 1
10398: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10399: LD_VAR 0 1
10403: PUSH
10404: LD_INT 3
10406: EQUAL
10407: PUSH
10408: LD_VAR 0 2
10412: PUSH
10413: LD_INT 6
10415: EQUAL
10416: AND
10417: PUSH
10418: LD_VAR 0 1
10422: PUSH
10423: LD_INT 6
10425: EQUAL
10426: PUSH
10427: LD_VAR 0 2
10431: PUSH
10432: LD_INT 3
10434: EQUAL
10435: AND
10436: OR
10437: PUSH
10438: LD_EXP 54
10442: PPUSH
10443: CALL_OW 255
10447: PUSH
10448: LD_INT 6
10450: EQUAL
10451: AND
10452: IFFALSE 10510
// begin stevensFollow = false ;
10454: LD_ADDR_EXP 15
10458: PUSH
10459: LD_INT 0
10461: ST_TO_ADDR
// stevensCanExitMap = true ;
10462: LD_ADDR_EXP 19
10466: PUSH
10467: LD_INT 1
10469: ST_TO_ADDR
// stevensWasInDepot = false ;
10470: LD_ADDR_EXP 18
10474: PUSH
10475: LD_INT 0
10477: ST_TO_ADDR
// stevensDepot = false ;
10478: LD_ADDR_EXP 17
10482: PUSH
10483: LD_INT 0
10485: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10486: LD_EXP 54
10490: PPUSH
10491: LD_INT 1
10493: PPUSH
10494: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10498: LD_EXP 54
10502: PPUSH
10503: LD_INT 37
10505: PPUSH
10506: CALL_OW 113
// end ; end ; end_of_file
10510: PPOPN 2
10512: END
// export function BuildBase ; var engs ; begin
10513: LD_INT 0
10515: PPUSH
10516: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10517: LD_ADDR_VAR 0 2
10521: PUSH
10522: LD_INT 22
10524: PUSH
10525: LD_INT 2
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 21
10534: PUSH
10535: LD_INT 1
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: LD_INT 25
10544: PUSH
10545: LD_INT 2
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 69
10561: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10562: LD_VAR 0 2
10566: PPUSH
10567: LD_INT 4
10569: PPUSH
10570: LD_INT 129
10572: PPUSH
10573: LD_INT 74
10575: PPUSH
10576: LD_INT 2
10578: PPUSH
10579: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10583: LD_VAR 0 2
10587: PPUSH
10588: LD_INT 26
10590: PPUSH
10591: LD_INT 128
10593: PPUSH
10594: LD_INT 53
10596: PPUSH
10597: LD_INT 2
10599: PPUSH
10600: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10604: LD_VAR 0 2
10608: PPUSH
10609: LD_INT 6
10611: PPUSH
10612: LD_INT 138
10614: PPUSH
10615: LD_INT 78
10617: PPUSH
10618: LD_INT 5
10620: PPUSH
10621: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10625: LD_VAR 0 2
10629: PPUSH
10630: LD_INT 2
10632: PPUSH
10633: LD_INT 137
10635: PPUSH
10636: LD_INT 63
10638: PPUSH
10639: LD_INT 4
10641: PPUSH
10642: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10646: LD_VAR 0 2
10650: PPUSH
10651: LD_INT 23
10653: PPUSH
10654: LD_INT 137
10656: PPUSH
10657: LD_INT 60
10659: PPUSH
10660: LD_INT 3
10662: PPUSH
10663: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10667: LD_VAR 0 2
10671: PPUSH
10672: LD_INT 16
10674: PPUSH
10675: LD_INT 140
10677: PPUSH
10678: LD_INT 66
10680: PPUSH
10681: LD_INT 5
10683: PPUSH
10684: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10688: LD_VAR 0 2
10692: PPUSH
10693: LD_INT 17
10695: PPUSH
10696: LD_INT 133
10698: PPUSH
10699: LD_INT 59
10701: PPUSH
10702: LD_INT 2
10704: PPUSH
10705: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10709: LD_INT 1
10711: PUSH
10712: LD_EXP 48
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: LD_INT 128
10723: PPUSH
10724: LD_INT 66
10726: PPUSH
10727: CALL_OW 111
// end ;
10731: LD_VAR 0 1
10735: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10736: LD_INT 0
10738: PPUSH
10739: PPUSH
10740: PPUSH
10741: PPUSH
10742: PPUSH
10743: PPUSH
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
10748: PPUSH
10749: PPUSH
10750: PPUSH
10751: PPUSH
10752: PPUSH
10753: PPUSH
10754: PPUSH
10755: PPUSH
10756: PPUSH
10757: PPUSH
10758: PPUSH
10759: PPUSH
10760: PPUSH
10761: PPUSH
10762: PPUSH
10763: PPUSH
10764: PPUSH
10765: PPUSH
10766: PPUSH
// personel = [ ] ;
10767: LD_ADDR_VAR 0 18
10771: PUSH
10772: EMPTY
10773: ST_TO_ADDR
// vehicles = [ ] ;
10774: LD_ADDR_VAR 0 24
10778: PUSH
10779: EMPTY
10780: ST_TO_ADDR
// for unit in basePersonel do
10781: LD_ADDR_VAR 0 17
10785: PUSH
10786: LD_VAR 0 3
10790: PUSH
10791: FOR_IN
10792: IFFALSE 10840
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
10794: LD_ADDR_VAR 0 18
10798: PUSH
10799: LD_VAR 0 18
10803: PUSH
10804: LD_VAR 0 17
10808: PUSH
10809: LD_VAR 0 17
10813: PPUSH
10814: CALL_OW 310
10818: PUSH
10819: LD_VAR 0 17
10823: PPUSH
10824: CALL_OW 302
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: EMPTY
10835: LIST
10836: ADD
10837: ST_TO_ADDR
10838: GO 10791
10840: POP
10841: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
10842: LD_ADDR_VAR 0 23
10846: PUSH
10847: LD_VAR 0 4
10851: PPUSH
10852: LD_INT 22
10854: PUSH
10855: LD_VAR 0 1
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 21
10866: PUSH
10867: LD_INT 2
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 50
10876: PUSH
10877: EMPTY
10878: LIST
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: LD_INT 31
10888: PUSH
10889: LD_INT 31
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 34
10898: PUSH
10899: LD_INT 12
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 34
10908: PUSH
10909: LD_INT 51
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 34
10918: PUSH
10919: LD_INT 32
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: PPUSH
10943: CALL_OW 70
10947: PUSH
10948: LD_EXP 50
10952: DIFF
10953: PUSH
10954: FOR_IN
10955: IFFALSE 11003
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
10957: LD_ADDR_VAR 0 24
10961: PUSH
10962: LD_VAR 0 24
10966: PUSH
10967: LD_VAR 0 23
10971: PUSH
10972: LD_VAR 0 23
10976: PPUSH
10977: CALL_OW 310
10981: PUSH
10982: LD_VAR 0 23
10986: PPUSH
10987: CALL_OW 302
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: LIST
10996: PUSH
10997: EMPTY
10998: LIST
10999: ADD
11000: ST_TO_ADDR
11001: GO 10954
11003: POP
11004: POP
// repeat soldiers = [ ] ;
11005: LD_ADDR_VAR 0 19
11009: PUSH
11010: EMPTY
11011: ST_TO_ADDR
// engineers = [ ] ;
11012: LD_ADDR_VAR 0 20
11016: PUSH
11017: EMPTY
11018: ST_TO_ADDR
// mechanics = [ ] ;
11019: LD_ADDR_VAR 0 21
11023: PUSH
11024: EMPTY
11025: ST_TO_ADDR
// scientists = [ ] ;
11026: LD_ADDR_VAR 0 22
11030: PUSH
11031: EMPTY
11032: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11033: LD_ADDR_VAR 0 30
11037: PUSH
11038: LD_VAR 0 4
11042: PPUSH
11043: LD_INT 22
11045: PUSH
11046: LD_VAR 0 1
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 21
11057: PUSH
11058: LD_INT 3
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 50
11067: PUSH
11068: EMPTY
11069: LIST
11070: PUSH
11071: LD_INT 2
11073: PUSH
11074: LD_INT 30
11076: PUSH
11077: LD_INT 0
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 30
11086: PUSH
11087: LD_INT 1
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: PPUSH
11105: CALL_OW 70
11109: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11110: LD_ADDR_VAR 0 31
11114: PUSH
11115: LD_VAR 0 4
11119: PPUSH
11120: LD_INT 22
11122: PUSH
11123: LD_VAR 0 1
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 21
11134: PUSH
11135: LD_INT 3
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: LD_INT 50
11144: PUSH
11145: EMPTY
11146: LIST
11147: PUSH
11148: LD_INT 2
11150: PUSH
11151: LD_INT 30
11153: PUSH
11154: LD_INT 2
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 30
11163: PUSH
11164: LD_INT 3
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: PPUSH
11182: CALL_OW 70
11186: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11187: LD_ADDR_VAR 0 32
11191: PUSH
11192: LD_VAR 0 4
11196: PPUSH
11197: LD_INT 22
11199: PUSH
11200: LD_VAR 0 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 21
11211: PUSH
11212: LD_INT 3
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 50
11221: PUSH
11222: EMPTY
11223: LIST
11224: PUSH
11225: LD_INT 2
11227: PUSH
11228: LD_INT 30
11230: PUSH
11231: LD_INT 6
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 30
11240: PUSH
11241: LD_INT 7
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 30
11250: PUSH
11251: LD_INT 8
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 70
11274: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11275: LD_ADDR_VAR 0 33
11279: PUSH
11280: LD_VAR 0 4
11284: PPUSH
11285: LD_INT 22
11287: PUSH
11288: LD_VAR 0 1
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 21
11299: PUSH
11300: LD_INT 3
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 50
11309: PUSH
11310: EMPTY
11311: LIST
11312: PUSH
11313: LD_INT 2
11315: PUSH
11316: LD_INT 30
11318: PUSH
11319: LD_INT 31
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 30
11328: PUSH
11329: LD_INT 32
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 70
11351: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11352: LD_ADDR_VAR 0 34
11356: PUSH
11357: LD_VAR 0 4
11361: PPUSH
11362: LD_INT 22
11364: PUSH
11365: LD_VAR 0 1
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 21
11376: PUSH
11377: LD_INT 3
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 50
11386: PUSH
11387: EMPTY
11388: LIST
11389: PUSH
11390: LD_INT 2
11392: PUSH
11393: LD_INT 30
11395: PUSH
11396: LD_INT 4
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 30
11405: PUSH
11406: LD_INT 5
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 70
11428: ST_TO_ADDR
// for i := 1 to personel do
11429: LD_ADDR_VAR 0 13
11433: PUSH
11434: DOUBLE
11435: LD_INT 1
11437: DEC
11438: ST_TO_ADDR
11439: LD_VAR 0 18
11443: PUSH
11444: FOR_TO
11445: IFFALSE 11655
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11447: LD_VAR 0 18
11451: PUSH
11452: LD_VAR 0 13
11456: ARRAY
11457: PUSH
11458: LD_INT 1
11460: ARRAY
11461: PPUSH
11462: CALL_OW 256
11466: PUSH
11467: LD_INT 1000
11469: EQUAL
11470: IFFALSE 11512
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11472: LD_ADDR_VAR 0 18
11476: PUSH
11477: LD_VAR 0 18
11481: PPUSH
11482: LD_VAR 0 13
11486: PUSH
11487: LD_VAR 0 18
11491: PUSH
11492: LD_VAR 0 13
11496: ARRAY
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PPUSH
11502: LD_INT 1
11504: PPUSH
11505: CALL 27702 0 3
11509: ST_TO_ADDR
// end else
11510: GO 11603
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11512: LD_VAR 0 18
11516: PUSH
11517: LD_VAR 0 13
11521: ARRAY
11522: PUSH
11523: LD_INT 1
11525: ARRAY
11526: PPUSH
11527: CALL_OW 256
11531: PUSH
11532: LD_INT 950
11534: LESSEQUAL
11535: IFFALSE 11603
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , 0 ) ;
11537: LD_ADDR_VAR 0 18
11541: PUSH
11542: LD_VAR 0 18
11546: PPUSH
11547: LD_VAR 0 13
11551: PUSH
11552: LD_VAR 0 18
11556: PUSH
11557: LD_VAR 0 13
11561: ARRAY
11562: PUSH
11563: LD_INT 1
11565: MINUS
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PPUSH
11571: LD_INT 0
11573: PPUSH
11574: CALL 27702 0 3
11578: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11579: LD_VAR 0 18
11583: PUSH
11584: LD_VAR 0 13
11588: ARRAY
11589: PUSH
11590: LD_INT 1
11592: ARRAY
11593: PPUSH
11594: LD_VAR 0 5
11598: PPUSH
11599: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11603: LD_VAR 0 18
11607: PUSH
11608: LD_VAR 0 13
11612: ARRAY
11613: PUSH
11614: LD_INT 1
11616: ARRAY
11617: PPUSH
11618: CALL_OW 256
11622: PUSH
11623: LD_INT 250
11625: LESS
11626: IFFALSE 11653
// personel = personel diff [ personel [ i ] ] ;
11628: LD_ADDR_VAR 0 18
11632: PUSH
11633: LD_VAR 0 18
11637: PUSH
11638: LD_VAR 0 18
11642: PUSH
11643: LD_VAR 0 13
11647: ARRAY
11648: PUSH
11649: EMPTY
11650: LIST
11651: DIFF
11652: ST_TO_ADDR
// end ;
11653: GO 11444
11655: POP
11656: POP
// for i := 1 to vehicles do
11657: LD_ADDR_VAR 0 13
11661: PUSH
11662: DOUBLE
11663: LD_INT 1
11665: DEC
11666: ST_TO_ADDR
11667: LD_VAR 0 24
11671: PUSH
11672: FOR_TO
11673: IFFALSE 12012
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11675: LD_VAR 0 24
11679: PUSH
11680: LD_VAR 0 13
11684: ARRAY
11685: PUSH
11686: LD_INT 1
11688: ARRAY
11689: PPUSH
11690: CALL_OW 256
11694: PUSH
11695: LD_INT 1000
11697: EQUAL
11698: IFFALSE 11873
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11700: LD_VAR 0 24
11704: PUSH
11705: LD_VAR 0 13
11709: ARRAY
11710: PUSH
11711: LD_INT 1
11713: ARRAY
11714: PPUSH
11715: CALL_OW 263
11719: PUSH
11720: LD_INT 1
11722: EQUAL
11723: IFFALSE 11781
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
11725: LD_VAR 0 24
11729: PUSH
11730: LD_VAR 0 13
11734: ARRAY
11735: PUSH
11736: LD_INT 2
11738: ARRAY
11739: PPUSH
11740: CALL_OW 310
11744: NOT
11745: IFFALSE 11781
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
11747: LD_VAR 0 24
11751: PUSH
11752: LD_VAR 0 13
11756: ARRAY
11757: PUSH
11758: LD_INT 2
11760: ARRAY
11761: PPUSH
11762: LD_VAR 0 24
11766: PUSH
11767: LD_VAR 0 13
11771: ARRAY
11772: PUSH
11773: LD_INT 1
11775: ARRAY
11776: PPUSH
11777: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
11781: LD_VAR 0 24
11785: PUSH
11786: LD_VAR 0 10
11790: LESS
11791: IFFALSE 11833
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
11793: LD_ADDR_VAR 0 24
11797: PUSH
11798: LD_VAR 0 24
11802: PPUSH
11803: LD_VAR 0 13
11807: PUSH
11808: LD_VAR 0 24
11812: PUSH
11813: LD_VAR 0 13
11817: ARRAY
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PPUSH
11823: LD_INT 3
11825: PPUSH
11826: CALL 27702 0 3
11830: ST_TO_ADDR
11831: GO 11871
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
11833: LD_ADDR_VAR 0 24
11837: PUSH
11838: LD_VAR 0 24
11842: PPUSH
11843: LD_VAR 0 13
11847: PUSH
11848: LD_VAR 0 24
11852: PUSH
11853: LD_VAR 0 13
11857: ARRAY
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: LD_INT 2
11865: PPUSH
11866: CALL 27702 0 3
11870: ST_TO_ADDR
// end else
11871: GO 11960
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
11873: LD_VAR 0 24
11877: PUSH
11878: LD_VAR 0 13
11882: ARRAY
11883: PUSH
11884: LD_INT 1
11886: ARRAY
11887: PPUSH
11888: CALL_OW 256
11892: PUSH
11893: LD_INT 650
11895: LESSEQUAL
11896: IFFALSE 11960
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
11898: LD_ADDR_VAR 0 24
11902: PUSH
11903: LD_VAR 0 24
11907: PPUSH
11908: LD_VAR 0 13
11912: PUSH
11913: LD_VAR 0 24
11917: PUSH
11918: LD_VAR 0 13
11922: ARRAY
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: LD_INT 0
11930: PPUSH
11931: CALL 27702 0 3
11935: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
11936: LD_VAR 0 24
11940: PUSH
11941: LD_VAR 0 13
11945: ARRAY
11946: PUSH
11947: LD_INT 1
11949: ARRAY
11950: PPUSH
11951: LD_VAR 0 6
11955: PPUSH
11956: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
11960: LD_VAR 0 24
11964: PUSH
11965: LD_VAR 0 13
11969: ARRAY
11970: PUSH
11971: LD_INT 1
11973: ARRAY
11974: PPUSH
11975: CALL_OW 256
11979: PUSH
11980: LD_INT 250
11982: LESS
11983: IFFALSE 12010
// vehicles = vehicles diff [ vehicles [ i ] ] ;
11985: LD_ADDR_VAR 0 24
11989: PUSH
11990: LD_VAR 0 24
11994: PUSH
11995: LD_VAR 0 24
11999: PUSH
12000: LD_VAR 0 13
12004: ARRAY
12005: PUSH
12006: EMPTY
12007: LIST
12008: DIFF
12009: ST_TO_ADDR
// end ;
12010: GO 11672
12012: POP
12013: POP
// for i := 1 to personel do
12014: LD_ADDR_VAR 0 13
12018: PUSH
12019: DOUBLE
12020: LD_INT 1
12022: DEC
12023: ST_TO_ADDR
12024: LD_VAR 0 18
12028: PUSH
12029: FOR_TO
12030: IFFALSE 12071
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12032: LD_ADDR_VAR 0 19
12036: PUSH
12037: LD_VAR 0 19
12041: PUSH
12042: LD_VAR 0 18
12046: PUSH
12047: LD_VAR 0 13
12051: ARRAY
12052: PPUSH
12053: LD_INT 25
12055: PUSH
12056: LD_INT 1
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PPUSH
12063: CALL_OW 72
12067: ADD
12068: ST_TO_ADDR
12069: GO 12029
12071: POP
12072: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12073: LD_VAR 0 19
12077: PUSH
12078: LD_VAR 0 33
12082: PPUSH
12083: LD_INT 3
12085: PUSH
12086: LD_INT 59
12088: PUSH
12089: EMPTY
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 72
12100: AND
12101: IFFALSE 12389
// begin for i := 1 to personel do
12103: LD_ADDR_VAR 0 13
12107: PUSH
12108: DOUBLE
12109: LD_INT 1
12111: DEC
12112: ST_TO_ADDR
12113: LD_VAR 0 18
12117: PUSH
12118: FOR_TO
12119: IFFALSE 12385
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12121: LD_VAR 0 18
12125: PUSH
12126: LD_VAR 0 13
12130: ARRAY
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: CALL_OW 257
12140: PUSH
12141: LD_INT 1
12143: EQUAL
12144: PUSH
12145: LD_VAR 0 18
12149: PUSH
12150: LD_VAR 0 13
12154: ARRAY
12155: PUSH
12156: LD_INT 3
12158: ARRAY
12159: PUSH
12160: LD_INT 1
12162: EQUAL
12163: AND
12164: IFFALSE 12383
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12166: LD_VAR 0 18
12170: PUSH
12171: LD_VAR 0 13
12175: ARRAY
12176: PUSH
12177: LD_INT 1
12179: ARRAY
12180: PPUSH
12181: CALL_OW 437
12185: IFFALSE 12286
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12187: LD_VAR 0 18
12191: PUSH
12192: LD_VAR 0 13
12196: ARRAY
12197: PUSH
12198: LD_INT 1
12200: ARRAY
12201: PPUSH
12202: CALL_OW 437
12206: PUSH
12207: LD_INT 1
12209: ARRAY
12210: PUSH
12211: LD_INT 1
12213: ARRAY
12214: PUSH
12215: LD_STRING e
12217: EQUAL
12218: PUSH
12219: LD_VAR 0 18
12223: PUSH
12224: LD_VAR 0 13
12228: ARRAY
12229: PUSH
12230: LD_INT 1
12232: ARRAY
12233: PPUSH
12234: CALL_OW 437
12238: PUSH
12239: LD_INT 1
12241: ARRAY
12242: PUSH
12243: LD_INT 4
12245: ARRAY
12246: PPUSH
12247: CALL_OW 266
12251: PUSH
12252: LD_INT 4
12254: PUSH
12255: LD_INT 5
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: IN
12262: AND
12263: IFFALSE 12286
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12265: LD_VAR 0 18
12269: PUSH
12270: LD_VAR 0 13
12274: ARRAY
12275: PUSH
12276: LD_INT 1
12278: ARRAY
12279: PPUSH
12280: EMPTY
12281: PPUSH
12282: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12286: LD_ADDR_VAR 0 37
12290: PUSH
12291: LD_VAR 0 33
12295: PPUSH
12296: LD_INT 3
12298: PUSH
12299: LD_INT 59
12301: PUSH
12302: EMPTY
12303: LIST
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PPUSH
12309: CALL_OW 72
12313: PUSH
12314: FOR_IN
12315: IFFALSE 12381
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12317: LD_VAR 0 18
12321: PUSH
12322: LD_VAR 0 13
12326: ARRAY
12327: PUSH
12328: LD_INT 1
12330: ARRAY
12331: PPUSH
12332: CALL_OW 310
12336: PPUSH
12337: CALL_OW 266
12341: PUSH
12342: LD_INT 31
12344: PUSH
12345: LD_INT 32
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: IN
12352: NOT
12353: IFFALSE 12379
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12355: LD_VAR 0 18
12359: PUSH
12360: LD_VAR 0 13
12364: ARRAY
12365: PUSH
12366: LD_INT 1
12368: ARRAY
12369: PPUSH
12370: LD_VAR 0 37
12374: PPUSH
12375: CALL_OW 120
12379: GO 12314
12381: POP
12382: POP
// end ; end ;
12383: GO 12118
12385: POP
12386: POP
// end else
12387: GO 12604
// if soldiers and barracks then
12389: LD_VAR 0 19
12393: PUSH
12394: LD_VAR 0 34
12398: AND
12399: IFFALSE 12604
// for i := 1 to personel do
12401: LD_ADDR_VAR 0 13
12405: PUSH
12406: DOUBLE
12407: LD_INT 1
12409: DEC
12410: ST_TO_ADDR
12411: LD_VAR 0 18
12415: PUSH
12416: FOR_TO
12417: IFFALSE 12602
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12419: LD_VAR 0 18
12423: PUSH
12424: LD_VAR 0 13
12428: ARRAY
12429: PUSH
12430: LD_INT 1
12432: ARRAY
12433: PPUSH
12434: CALL_OW 257
12438: PUSH
12439: LD_INT 1
12441: EQUAL
12442: PUSH
12443: LD_VAR 0 18
12447: PUSH
12448: LD_VAR 0 13
12452: ARRAY
12453: PUSH
12454: LD_INT 3
12456: ARRAY
12457: PUSH
12458: LD_INT 1
12460: EQUAL
12461: AND
12462: PUSH
12463: LD_VAR 0 18
12467: PUSH
12468: LD_VAR 0 13
12472: ARRAY
12473: PUSH
12474: LD_INT 1
12476: ARRAY
12477: PPUSH
12478: LD_INT 56
12480: PUSH
12481: EMPTY
12482: LIST
12483: PPUSH
12484: CALL_OW 72
12488: AND
12489: IFFALSE 12600
// begin if not personel [ i ] [ 2 ] then
12491: LD_VAR 0 18
12495: PUSH
12496: LD_VAR 0 13
12500: ARRAY
12501: PUSH
12502: LD_INT 2
12504: ARRAY
12505: NOT
12506: IFFALSE 12566
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12508: LD_ADDR_VAR 0 18
12512: PUSH
12513: LD_VAR 0 18
12517: PPUSH
12518: LD_VAR 0 13
12522: PUSH
12523: LD_VAR 0 18
12527: PUSH
12528: LD_VAR 0 13
12532: ARRAY
12533: PUSH
12534: LD_INT 1
12536: MINUS
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PPUSH
12542: LD_VAR 0 34
12546: PUSH
12547: LD_INT 1
12549: PPUSH
12550: LD_VAR 0 34
12554: PPUSH
12555: CALL_OW 12
12559: ARRAY
12560: PPUSH
12561: CALL 27702 0 3
12565: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12566: LD_VAR 0 18
12570: PUSH
12571: LD_VAR 0 13
12575: ARRAY
12576: PUSH
12577: LD_INT 1
12579: ARRAY
12580: PPUSH
12581: LD_VAR 0 18
12585: PUSH
12586: LD_VAR 0 13
12590: ARRAY
12591: PUSH
12592: LD_INT 2
12594: ARRAY
12595: PPUSH
12596: CALL_OW 120
// end ;
12600: GO 12416
12602: POP
12603: POP
// for i := 1 to personel do
12604: LD_ADDR_VAR 0 13
12608: PUSH
12609: DOUBLE
12610: LD_INT 1
12612: DEC
12613: ST_TO_ADDR
12614: LD_VAR 0 18
12618: PUSH
12619: FOR_TO
12620: IFFALSE 12661
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12622: LD_ADDR_VAR 0 20
12626: PUSH
12627: LD_VAR 0 20
12631: PUSH
12632: LD_VAR 0 18
12636: PUSH
12637: LD_VAR 0 13
12641: ARRAY
12642: PPUSH
12643: LD_INT 25
12645: PUSH
12646: LD_INT 2
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 72
12657: ADD
12658: ST_TO_ADDR
12659: GO 12619
12661: POP
12662: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12663: LD_VAR 0 20
12667: PUSH
12668: LD_VAR 0 4
12672: PPUSH
12673: LD_INT 22
12675: PUSH
12676: LD_VAR 0 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 21
12687: PUSH
12688: LD_INT 3
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: LD_INT 3
12697: PUSH
12698: LD_INT 24
12700: PUSH
12701: LD_INT 1000
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 70
12721: AND
12722: IFFALSE 12998
// begin for i := 1 to personel do
12724: LD_ADDR_VAR 0 13
12728: PUSH
12729: DOUBLE
12730: LD_INT 1
12732: DEC
12733: ST_TO_ADDR
12734: LD_VAR 0 18
12738: PUSH
12739: FOR_TO
12740: IFFALSE 12994
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
12742: LD_VAR 0 18
12746: PUSH
12747: LD_VAR 0 13
12751: ARRAY
12752: PUSH
12753: LD_INT 1
12755: ARRAY
12756: PPUSH
12757: CALL_OW 257
12761: PUSH
12762: LD_INT 2
12764: EQUAL
12765: PUSH
12766: LD_VAR 0 18
12770: PUSH
12771: LD_VAR 0 13
12775: ARRAY
12776: PUSH
12777: LD_INT 3
12779: ARRAY
12780: PUSH
12781: LD_INT 1
12783: EQUAL
12784: AND
12785: IFFALSE 12992
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12787: LD_VAR 0 18
12791: PUSH
12792: LD_VAR 0 13
12796: ARRAY
12797: PUSH
12798: LD_INT 1
12800: ARRAY
12801: PPUSH
12802: CALL_OW 437
12806: IFFALSE 12862
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
12808: LD_VAR 0 18
12812: PUSH
12813: LD_VAR 0 13
12817: ARRAY
12818: PUSH
12819: LD_INT 1
12821: ARRAY
12822: PPUSH
12823: CALL_OW 437
12827: PUSH
12828: LD_INT 1
12830: ARRAY
12831: PUSH
12832: LD_INT 1
12834: ARRAY
12835: PUSH
12836: LD_STRING e
12838: EQUAL
12839: IFFALSE 12862
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12841: LD_VAR 0 18
12845: PUSH
12846: LD_VAR 0 13
12850: ARRAY
12851: PUSH
12852: LD_INT 1
12854: ARRAY
12855: PPUSH
12856: EMPTY
12857: PPUSH
12858: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
12862: LD_VAR 0 18
12866: PUSH
12867: LD_VAR 0 13
12871: ARRAY
12872: PUSH
12873: LD_INT 1
12875: ARRAY
12876: PPUSH
12877: CALL_OW 310
12881: IFFALSE 12902
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
12883: LD_VAR 0 18
12887: PUSH
12888: LD_VAR 0 13
12892: ARRAY
12893: PUSH
12894: LD_INT 1
12896: ARRAY
12897: PPUSH
12898: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
12902: LD_ADDR_VAR 0 35
12906: PUSH
12907: LD_VAR 0 4
12911: PPUSH
12912: LD_INT 22
12914: PUSH
12915: LD_VAR 0 1
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 21
12926: PUSH
12927: LD_INT 3
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: LD_INT 24
12939: PUSH
12940: LD_INT 1000
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: PPUSH
12956: CALL_OW 70
12960: PUSH
12961: FOR_IN
12962: IFFALSE 12990
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
12964: LD_VAR 0 18
12968: PUSH
12969: LD_VAR 0 13
12973: ARRAY
12974: PUSH
12975: LD_INT 1
12977: ARRAY
12978: PPUSH
12979: LD_VAR 0 35
12983: PPUSH
12984: CALL_OW 190
12988: GO 12961
12990: POP
12991: POP
// end ;
12992: GO 12739
12994: POP
12995: POP
// end else
12996: GO 13260
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
12998: LD_VAR 0 20
13002: PUSH
13003: LD_VAR 0 20
13007: PPUSH
13008: LD_INT 56
13010: PUSH
13011: EMPTY
13012: LIST
13013: PPUSH
13014: CALL_OW 72
13018: AND
13019: PUSH
13020: LD_VAR 0 30
13024: AND
13025: IFFALSE 13260
// for i := 1 to personel do
13027: LD_ADDR_VAR 0 13
13031: PUSH
13032: DOUBLE
13033: LD_INT 1
13035: DEC
13036: ST_TO_ADDR
13037: LD_VAR 0 18
13041: PUSH
13042: FOR_TO
13043: IFFALSE 13258
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13045: LD_VAR 0 18
13049: PUSH
13050: LD_VAR 0 13
13054: ARRAY
13055: PUSH
13056: LD_INT 1
13058: ARRAY
13059: PPUSH
13060: CALL_OW 257
13064: PUSH
13065: LD_INT 2
13067: EQUAL
13068: PUSH
13069: LD_VAR 0 18
13073: PUSH
13074: LD_VAR 0 13
13078: ARRAY
13079: PUSH
13080: LD_INT 3
13082: ARRAY
13083: PUSH
13084: LD_INT 1
13086: EQUAL
13087: AND
13088: IFFALSE 13256
// begin if not personel [ i ] [ 2 ] then
13090: LD_VAR 0 18
13094: PUSH
13095: LD_VAR 0 13
13099: ARRAY
13100: PUSH
13101: LD_INT 2
13103: ARRAY
13104: NOT
13105: IFFALSE 13222
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13107: LD_ADDR_VAR 0 18
13111: PUSH
13112: LD_VAR 0 18
13116: PPUSH
13117: LD_VAR 0 13
13121: PUSH
13122: LD_VAR 0 18
13126: PUSH
13127: LD_VAR 0 13
13131: ARRAY
13132: PUSH
13133: LD_INT 1
13135: MINUS
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PPUSH
13141: LD_VAR 0 4
13145: PPUSH
13146: LD_INT 22
13148: PUSH
13149: LD_VAR 0 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 21
13160: PUSH
13161: LD_INT 3
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 50
13170: PUSH
13171: EMPTY
13172: LIST
13173: PUSH
13174: LD_INT 2
13176: PUSH
13177: LD_INT 30
13179: PUSH
13180: LD_INT 0
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 30
13189: PUSH
13190: LD_INT 1
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: PPUSH
13208: CALL_OW 70
13212: PUSH
13213: LD_INT 1
13215: ARRAY
13216: PPUSH
13217: CALL 27702 0 3
13221: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13222: LD_VAR 0 18
13226: PUSH
13227: LD_VAR 0 13
13231: ARRAY
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PPUSH
13237: LD_VAR 0 18
13241: PUSH
13242: LD_VAR 0 13
13246: ARRAY
13247: PUSH
13248: LD_INT 2
13250: ARRAY
13251: PPUSH
13252: CALL_OW 120
// end ; end ;
13256: GO 13042
13258: POP
13259: POP
// for i := 1 to personel do
13260: LD_ADDR_VAR 0 13
13264: PUSH
13265: DOUBLE
13266: LD_INT 1
13268: DEC
13269: ST_TO_ADDR
13270: LD_VAR 0 18
13274: PUSH
13275: FOR_TO
13276: IFFALSE 13317
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13278: LD_ADDR_VAR 0 21
13282: PUSH
13283: LD_VAR 0 21
13287: PUSH
13288: LD_VAR 0 18
13292: PUSH
13293: LD_VAR 0 13
13297: ARRAY
13298: PPUSH
13299: LD_INT 25
13301: PUSH
13302: LD_INT 3
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PPUSH
13309: CALL_OW 72
13313: ADD
13314: ST_TO_ADDR
13315: GO 13275
13317: POP
13318: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13319: LD_VAR 0 21
13323: PUSH
13324: LD_VAR 0 4
13328: PPUSH
13329: LD_INT 22
13331: PUSH
13332: LD_VAR 0 1
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 21
13343: PUSH
13344: LD_INT 2
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 3
13353: PUSH
13354: LD_INT 24
13356: PUSH
13357: LD_INT 1000
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 70
13377: AND
13378: IFFALSE 13982
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13380: LD_ADDR_VAR 0 36
13384: PUSH
13385: LD_VAR 0 4
13389: PPUSH
13390: LD_INT 22
13392: PUSH
13393: LD_VAR 0 1
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 21
13404: PUSH
13405: LD_INT 2
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 3
13414: PUSH
13415: LD_INT 24
13417: PUSH
13418: LD_INT 1000
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 70
13438: PUSH
13439: FOR_IN
13440: IFFALSE 13978
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13442: LD_VAR 0 36
13446: PPUSH
13447: LD_VAR 0 6
13451: PPUSH
13452: CALL_OW 299
13456: PUSH
13457: LD_INT 5
13459: LESS
13460: IFFALSE 13755
// begin for i := 1 to vehicles do
13462: LD_ADDR_VAR 0 13
13466: PUSH
13467: DOUBLE
13468: LD_INT 1
13470: DEC
13471: ST_TO_ADDR
13472: LD_VAR 0 24
13476: PUSH
13477: FOR_TO
13478: IFFALSE 13547
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13480: LD_VAR 0 24
13484: PUSH
13485: LD_VAR 0 13
13489: ARRAY
13490: PUSH
13491: LD_INT 1
13493: ARRAY
13494: PUSH
13495: LD_VAR 0 36
13499: EQUAL
13500: IFFALSE 13521
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13502: LD_VAR 0 24
13506: PUSH
13507: LD_VAR 0 13
13511: ARRAY
13512: PUSH
13513: LD_INT 2
13515: ARRAY
13516: PPUSH
13517: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13521: LD_VAR 0 24
13525: PUSH
13526: LD_VAR 0 13
13530: ARRAY
13531: PUSH
13532: LD_INT 2
13534: ARRAY
13535: PPUSH
13536: LD_VAR 0 36
13540: PPUSH
13541: CALL_OW 189
// end ;
13545: GO 13477
13547: POP
13548: POP
// for i := 1 to personel do
13549: LD_ADDR_VAR 0 13
13553: PUSH
13554: DOUBLE
13555: LD_INT 1
13557: DEC
13558: ST_TO_ADDR
13559: LD_VAR 0 18
13563: PUSH
13564: FOR_TO
13565: IFFALSE 13753
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13567: LD_VAR 0 18
13571: PUSH
13572: LD_VAR 0 13
13576: ARRAY
13577: PUSH
13578: LD_INT 1
13580: ARRAY
13581: PPUSH
13582: CALL_OW 257
13586: PUSH
13587: LD_INT 3
13589: EQUAL
13590: PUSH
13591: LD_VAR 0 18
13595: PUSH
13596: LD_VAR 0 13
13600: ARRAY
13601: PUSH
13602: LD_INT 3
13604: ARRAY
13605: PUSH
13606: LD_INT 1
13608: EQUAL
13609: AND
13610: IFFALSE 13751
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13612: LD_VAR 0 18
13616: PUSH
13617: LD_VAR 0 13
13621: ARRAY
13622: PUSH
13623: LD_INT 1
13625: ARRAY
13626: PPUSH
13627: CALL_OW 437
13631: IFFALSE 13687
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13633: LD_VAR 0 18
13637: PUSH
13638: LD_VAR 0 13
13642: ARRAY
13643: PUSH
13644: LD_INT 1
13646: ARRAY
13647: PPUSH
13648: CALL_OW 437
13652: PUSH
13653: LD_INT 1
13655: ARRAY
13656: PUSH
13657: LD_INT 1
13659: ARRAY
13660: PUSH
13661: LD_STRING e
13663: EQUAL
13664: IFFALSE 13687
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13666: LD_VAR 0 18
13670: PUSH
13671: LD_VAR 0 13
13675: ARRAY
13676: PUSH
13677: LD_INT 1
13679: ARRAY
13680: PPUSH
13681: EMPTY
13682: PPUSH
13683: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13687: LD_VAR 0 18
13691: PUSH
13692: LD_VAR 0 13
13696: ARRAY
13697: PUSH
13698: LD_INT 1
13700: ARRAY
13701: PPUSH
13702: CALL_OW 310
13706: IFFALSE 13727
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13708: LD_VAR 0 18
13712: PUSH
13713: LD_VAR 0 13
13717: ARRAY
13718: PUSH
13719: LD_INT 1
13721: ARRAY
13722: PPUSH
13723: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
13727: LD_VAR 0 18
13731: PUSH
13732: LD_VAR 0 13
13736: ARRAY
13737: PUSH
13738: LD_INT 1
13740: ARRAY
13741: PPUSH
13742: LD_VAR 0 36
13746: PPUSH
13747: CALL_OW 189
// end ;
13751: GO 13564
13753: POP
13754: POP
// end ; if GetLives ( damageUnit ) < 250 then
13755: LD_VAR 0 36
13759: PPUSH
13760: CALL_OW 256
13764: PUSH
13765: LD_INT 250
13767: LESS
13768: IFFALSE 13976
// for i := 1 to personel do
13770: LD_ADDR_VAR 0 13
13774: PUSH
13775: DOUBLE
13776: LD_INT 1
13778: DEC
13779: ST_TO_ADDR
13780: LD_VAR 0 18
13784: PUSH
13785: FOR_TO
13786: IFFALSE 13974
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13788: LD_VAR 0 18
13792: PUSH
13793: LD_VAR 0 13
13797: ARRAY
13798: PUSH
13799: LD_INT 1
13801: ARRAY
13802: PPUSH
13803: CALL_OW 257
13807: PUSH
13808: LD_INT 3
13810: EQUAL
13811: PUSH
13812: LD_VAR 0 18
13816: PUSH
13817: LD_VAR 0 13
13821: ARRAY
13822: PUSH
13823: LD_INT 3
13825: ARRAY
13826: PUSH
13827: LD_INT 1
13829: EQUAL
13830: AND
13831: IFFALSE 13972
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13833: LD_VAR 0 18
13837: PUSH
13838: LD_VAR 0 13
13842: ARRAY
13843: PUSH
13844: LD_INT 1
13846: ARRAY
13847: PPUSH
13848: CALL_OW 437
13852: IFFALSE 13908
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13854: LD_VAR 0 18
13858: PUSH
13859: LD_VAR 0 13
13863: ARRAY
13864: PUSH
13865: LD_INT 1
13867: ARRAY
13868: PPUSH
13869: CALL_OW 437
13873: PUSH
13874: LD_INT 1
13876: ARRAY
13877: PUSH
13878: LD_INT 1
13880: ARRAY
13881: PUSH
13882: LD_STRING e
13884: EQUAL
13885: IFFALSE 13908
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13887: LD_VAR 0 18
13891: PUSH
13892: LD_VAR 0 13
13896: ARRAY
13897: PUSH
13898: LD_INT 1
13900: ARRAY
13901: PPUSH
13902: EMPTY
13903: PPUSH
13904: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13908: LD_VAR 0 18
13912: PUSH
13913: LD_VAR 0 13
13917: ARRAY
13918: PUSH
13919: LD_INT 1
13921: ARRAY
13922: PPUSH
13923: CALL_OW 310
13927: IFFALSE 13948
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13929: LD_VAR 0 18
13933: PUSH
13934: LD_VAR 0 13
13938: ARRAY
13939: PUSH
13940: LD_INT 1
13942: ARRAY
13943: PPUSH
13944: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
13948: LD_VAR 0 18
13952: PUSH
13953: LD_VAR 0 13
13957: ARRAY
13958: PUSH
13959: LD_INT 1
13961: ARRAY
13962: PPUSH
13963: LD_VAR 0 36
13967: PPUSH
13968: CALL_OW 189
// end ;
13972: GO 13785
13974: POP
13975: POP
// end ;
13976: GO 13439
13978: POP
13979: POP
// end else
13980: GO 14187
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
13982: LD_VAR 0 21
13986: PUSH
13987: LD_VAR 0 21
13991: PPUSH
13992: LD_INT 56
13994: PUSH
13995: EMPTY
13996: LIST
13997: PPUSH
13998: CALL_OW 72
14002: AND
14003: PUSH
14004: LD_VAR 0 31
14008: AND
14009: IFFALSE 14187
// for i := 1 to personel do
14011: LD_ADDR_VAR 0 13
14015: PUSH
14016: DOUBLE
14017: LD_INT 1
14019: DEC
14020: ST_TO_ADDR
14021: LD_VAR 0 18
14025: PUSH
14026: FOR_TO
14027: IFFALSE 14185
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14029: LD_VAR 0 18
14033: PUSH
14034: LD_VAR 0 13
14038: ARRAY
14039: PUSH
14040: LD_INT 1
14042: ARRAY
14043: PPUSH
14044: CALL_OW 257
14048: PUSH
14049: LD_INT 3
14051: EQUAL
14052: PUSH
14053: LD_VAR 0 18
14057: PUSH
14058: LD_VAR 0 13
14062: ARRAY
14063: PUSH
14064: LD_INT 3
14066: ARRAY
14067: PUSH
14068: LD_INT 1
14070: EQUAL
14071: AND
14072: IFFALSE 14183
// begin if not personel [ i ] [ 2 ] then
14074: LD_VAR 0 18
14078: PUSH
14079: LD_VAR 0 13
14083: ARRAY
14084: PUSH
14085: LD_INT 2
14087: ARRAY
14088: NOT
14089: IFFALSE 14149
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
14091: LD_ADDR_VAR 0 18
14095: PUSH
14096: LD_VAR 0 18
14100: PPUSH
14101: LD_VAR 0 13
14105: PUSH
14106: LD_VAR 0 18
14110: PUSH
14111: LD_VAR 0 13
14115: ARRAY
14116: PUSH
14117: LD_INT 1
14119: MINUS
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PPUSH
14125: LD_VAR 0 31
14129: PUSH
14130: LD_INT 1
14132: PPUSH
14133: LD_VAR 0 31
14137: PPUSH
14138: CALL_OW 12
14142: ARRAY
14143: PPUSH
14144: CALL 27702 0 3
14148: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14149: LD_VAR 0 18
14153: PUSH
14154: LD_VAR 0 13
14158: ARRAY
14159: PUSH
14160: LD_INT 1
14162: ARRAY
14163: PPUSH
14164: LD_VAR 0 18
14168: PUSH
14169: LD_VAR 0 13
14173: ARRAY
14174: PUSH
14175: LD_INT 2
14177: ARRAY
14178: PPUSH
14179: CALL_OW 120
// end ;
14183: GO 14026
14185: POP
14186: POP
// for i := 1 to personel do
14187: LD_ADDR_VAR 0 13
14191: PUSH
14192: DOUBLE
14193: LD_INT 1
14195: DEC
14196: ST_TO_ADDR
14197: LD_VAR 0 18
14201: PUSH
14202: FOR_TO
14203: IFFALSE 14244
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14205: LD_ADDR_VAR 0 22
14209: PUSH
14210: LD_VAR 0 22
14214: PUSH
14215: LD_VAR 0 18
14219: PUSH
14220: LD_VAR 0 13
14224: ARRAY
14225: PPUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 4
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PPUSH
14236: CALL_OW 72
14240: ADD
14241: ST_TO_ADDR
14242: GO 14202
14244: POP
14245: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14246: LD_VAR 0 22
14250: PUSH
14251: LD_VAR 0 4
14255: PPUSH
14256: LD_INT 22
14258: PUSH
14259: LD_VAR 0 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 1
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: LD_INT 3
14280: PUSH
14281: LD_INT 24
14283: PUSH
14284: LD_INT 1000
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: LIST
14299: PPUSH
14300: CALL_OW 70
14304: AND
14305: IFFALSE 14822
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14307: LD_ADDR_VAR 0 36
14311: PUSH
14312: LD_VAR 0 4
14316: PPUSH
14317: LD_INT 22
14319: PUSH
14320: LD_VAR 0 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 21
14331: PUSH
14332: LD_INT 1
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 3
14341: PUSH
14342: LD_INT 24
14344: PUSH
14345: LD_INT 1000
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 70
14365: PUSH
14366: FOR_IN
14367: IFFALSE 14818
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14369: LD_VAR 0 36
14373: PPUSH
14374: LD_VAR 0 5
14378: PPUSH
14379: CALL_OW 299
14383: PUSH
14384: LD_INT 5
14386: LESS
14387: IFFALSE 14595
// for i := 1 to personel do
14389: LD_ADDR_VAR 0 13
14393: PUSH
14394: DOUBLE
14395: LD_INT 1
14397: DEC
14398: ST_TO_ADDR
14399: LD_VAR 0 18
14403: PUSH
14404: FOR_TO
14405: IFFALSE 14593
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14407: LD_VAR 0 18
14411: PUSH
14412: LD_VAR 0 13
14416: ARRAY
14417: PUSH
14418: LD_INT 1
14420: ARRAY
14421: PPUSH
14422: CALL_OW 257
14426: PUSH
14427: LD_INT 4
14429: EQUAL
14430: PUSH
14431: LD_VAR 0 18
14435: PUSH
14436: LD_VAR 0 13
14440: ARRAY
14441: PUSH
14442: LD_INT 3
14444: ARRAY
14445: PUSH
14446: LD_INT 1
14448: EQUAL
14449: AND
14450: IFFALSE 14591
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14452: LD_VAR 0 18
14456: PUSH
14457: LD_VAR 0 13
14461: ARRAY
14462: PUSH
14463: LD_INT 1
14465: ARRAY
14466: PPUSH
14467: CALL_OW 437
14471: IFFALSE 14527
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14473: LD_VAR 0 18
14477: PUSH
14478: LD_VAR 0 13
14482: ARRAY
14483: PUSH
14484: LD_INT 1
14486: ARRAY
14487: PPUSH
14488: CALL_OW 437
14492: PUSH
14493: LD_INT 1
14495: ARRAY
14496: PUSH
14497: LD_INT 1
14499: ARRAY
14500: PUSH
14501: LD_STRING e
14503: EQUAL
14504: IFFALSE 14527
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14506: LD_VAR 0 18
14510: PUSH
14511: LD_VAR 0 13
14515: ARRAY
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PPUSH
14521: EMPTY
14522: PPUSH
14523: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14527: LD_VAR 0 18
14531: PUSH
14532: LD_VAR 0 13
14536: ARRAY
14537: PUSH
14538: LD_INT 1
14540: ARRAY
14541: PPUSH
14542: CALL_OW 310
14546: IFFALSE 14567
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14548: LD_VAR 0 18
14552: PUSH
14553: LD_VAR 0 13
14557: ARRAY
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PPUSH
14563: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14567: LD_VAR 0 18
14571: PUSH
14572: LD_VAR 0 13
14576: ARRAY
14577: PUSH
14578: LD_INT 1
14580: ARRAY
14581: PPUSH
14582: LD_VAR 0 36
14586: PPUSH
14587: CALL_OW 188
// end ;
14591: GO 14404
14593: POP
14594: POP
// if GetLives ( damageUnit ) < 250 then
14595: LD_VAR 0 36
14599: PPUSH
14600: CALL_OW 256
14604: PUSH
14605: LD_INT 250
14607: LESS
14608: IFFALSE 14816
// for i := 1 to personel do
14610: LD_ADDR_VAR 0 13
14614: PUSH
14615: DOUBLE
14616: LD_INT 1
14618: DEC
14619: ST_TO_ADDR
14620: LD_VAR 0 18
14624: PUSH
14625: FOR_TO
14626: IFFALSE 14814
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14628: LD_VAR 0 18
14632: PUSH
14633: LD_VAR 0 13
14637: ARRAY
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PPUSH
14643: CALL_OW 257
14647: PUSH
14648: LD_INT 4
14650: EQUAL
14651: PUSH
14652: LD_VAR 0 18
14656: PUSH
14657: LD_VAR 0 13
14661: ARRAY
14662: PUSH
14663: LD_INT 3
14665: ARRAY
14666: PUSH
14667: LD_INT 1
14669: EQUAL
14670: AND
14671: IFFALSE 14812
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14673: LD_VAR 0 18
14677: PUSH
14678: LD_VAR 0 13
14682: ARRAY
14683: PUSH
14684: LD_INT 1
14686: ARRAY
14687: PPUSH
14688: CALL_OW 437
14692: IFFALSE 14748
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14694: LD_VAR 0 18
14698: PUSH
14699: LD_VAR 0 13
14703: ARRAY
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PPUSH
14709: CALL_OW 437
14713: PUSH
14714: LD_INT 1
14716: ARRAY
14717: PUSH
14718: LD_INT 1
14720: ARRAY
14721: PUSH
14722: LD_STRING e
14724: EQUAL
14725: IFFALSE 14748
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14727: LD_VAR 0 18
14731: PUSH
14732: LD_VAR 0 13
14736: ARRAY
14737: PUSH
14738: LD_INT 1
14740: ARRAY
14741: PPUSH
14742: EMPTY
14743: PPUSH
14744: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14748: LD_VAR 0 18
14752: PUSH
14753: LD_VAR 0 13
14757: ARRAY
14758: PUSH
14759: LD_INT 1
14761: ARRAY
14762: PPUSH
14763: CALL_OW 310
14767: IFFALSE 14788
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14769: LD_VAR 0 18
14773: PUSH
14774: LD_VAR 0 13
14778: ARRAY
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14788: LD_VAR 0 18
14792: PUSH
14793: LD_VAR 0 13
14797: ARRAY
14798: PUSH
14799: LD_INT 1
14801: ARRAY
14802: PPUSH
14803: LD_VAR 0 36
14807: PPUSH
14808: CALL_OW 188
// end ;
14812: GO 14625
14814: POP
14815: POP
// end ;
14816: GO 14366
14818: POP
14819: POP
// end else
14820: GO 15027
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14822: LD_VAR 0 22
14826: PUSH
14827: LD_VAR 0 22
14831: PPUSH
14832: LD_INT 56
14834: PUSH
14835: EMPTY
14836: LIST
14837: PPUSH
14838: CALL_OW 72
14842: AND
14843: PUSH
14844: LD_VAR 0 32
14848: AND
14849: IFFALSE 15027
// for i := 1 to personel do
14851: LD_ADDR_VAR 0 13
14855: PUSH
14856: DOUBLE
14857: LD_INT 1
14859: DEC
14860: ST_TO_ADDR
14861: LD_VAR 0 18
14865: PUSH
14866: FOR_TO
14867: IFFALSE 15025
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14869: LD_VAR 0 18
14873: PUSH
14874: LD_VAR 0 13
14878: ARRAY
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PPUSH
14884: CALL_OW 257
14888: PUSH
14889: LD_INT 4
14891: EQUAL
14892: PUSH
14893: LD_VAR 0 18
14897: PUSH
14898: LD_VAR 0 13
14902: ARRAY
14903: PUSH
14904: LD_INT 3
14906: ARRAY
14907: PUSH
14908: LD_INT 1
14910: EQUAL
14911: AND
14912: IFFALSE 15023
// begin if not personel [ i ] [ 2 ] then
14914: LD_VAR 0 18
14918: PUSH
14919: LD_VAR 0 13
14923: ARRAY
14924: PUSH
14925: LD_INT 2
14927: ARRAY
14928: NOT
14929: IFFALSE 14989
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
14931: LD_ADDR_VAR 0 18
14935: PUSH
14936: LD_VAR 0 18
14940: PPUSH
14941: LD_VAR 0 13
14945: PUSH
14946: LD_VAR 0 18
14950: PUSH
14951: LD_VAR 0 13
14955: ARRAY
14956: PUSH
14957: LD_INT 1
14959: MINUS
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PPUSH
14965: LD_VAR 0 32
14969: PUSH
14970: LD_INT 1
14972: PPUSH
14973: LD_VAR 0 32
14977: PPUSH
14978: CALL_OW 12
14982: ARRAY
14983: PPUSH
14984: CALL 27702 0 3
14988: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14989: LD_VAR 0 18
14993: PUSH
14994: LD_VAR 0 13
14998: ARRAY
14999: PUSH
15000: LD_INT 1
15002: ARRAY
15003: PPUSH
15004: LD_VAR 0 18
15008: PUSH
15009: LD_VAR 0 13
15013: ARRAY
15014: PUSH
15015: LD_INT 2
15017: ARRAY
15018: PPUSH
15019: CALL_OW 120
// end ;
15023: GO 14866
15025: POP
15026: POP
// wait ( 0 0$01 ) ;
15027: LD_INT 35
15029: PPUSH
15030: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
15034: LD_VAR 0 24
15038: PUSH
15039: LD_VAR 0 8
15043: LESS
15044: PUSH
15045: LD_VAR 0 31
15049: AND
15050: IFFALSE 15296
// begin tmp = vehiclesAmount - vehicles ;
15052: LD_ADDR_VAR 0 15
15056: PUSH
15057: LD_VAR 0 8
15061: PUSH
15062: LD_VAR 0 24
15066: MINUS
15067: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
15068: LD_ADDR_VAR 0 28
15072: PUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL 9143 0 2
15087: ST_TO_ADDR
// for i := 1 to tmp do
15088: LD_ADDR_VAR 0 13
15092: PUSH
15093: DOUBLE
15094: LD_INT 1
15096: DEC
15097: ST_TO_ADDR
15098: LD_VAR 0 15
15102: PUSH
15103: FOR_TO
15104: IFFALSE 15292
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
15106: LD_ADDR_VAR 0 15
15110: PUSH
15111: LD_VAR 0 28
15115: PUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_VAR 0 28
15123: PPUSH
15124: CALL_OW 12
15128: ARRAY
15129: ST_TO_ADDR
// if tmp then
15130: LD_VAR 0 15
15134: IFFALSE 15290
// begin if tmp in [ 34 , 14 , 71 ] then
15136: LD_VAR 0 15
15140: PUSH
15141: LD_INT 34
15143: PUSH
15144: LD_INT 14
15146: PUSH
15147: LD_INT 71
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: IN
15155: IFFALSE 15193
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15157: LD_ADDR_VAR 0 29
15161: PUSH
15162: LD_INT 4
15164: PUSH
15165: EMPTY
15166: LIST
15167: PUSH
15168: LD_INT 14
15170: PUSH
15171: EMPTY
15172: LIST
15173: PUSH
15174: LD_INT 24
15176: PUSH
15177: EMPTY
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: PUSH
15185: LD_VAR 0 2
15189: ARRAY
15190: ST_TO_ADDR
15191: GO 15247
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15193: LD_ADDR_VAR 0 29
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 3
15203: PUSH
15204: LD_INT 4
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 14
15214: PUSH
15215: EMPTY
15216: LIST
15217: PUSH
15218: LD_INT 21
15220: PUSH
15221: LD_INT 23
15223: PUSH
15224: LD_INT 24
15226: PUSH
15227: LD_INT 22
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: LD_VAR 0 2
15245: ARRAY
15246: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15247: LD_VAR 0 31
15251: PUSH
15252: LD_INT 1
15254: ARRAY
15255: PPUSH
15256: LD_VAR 0 29
15260: PUSH
15261: LD_INT 1
15263: PPUSH
15264: LD_VAR 0 29
15268: PPUSH
15269: CALL_OW 12
15273: ARRAY
15274: PPUSH
15275: LD_INT 1
15277: PPUSH
15278: LD_INT 1
15280: PPUSH
15281: LD_VAR 0 15
15285: PPUSH
15286: CALL_OW 185
// end ; end ;
15290: GO 15103
15292: POP
15293: POP
// end else
15294: GO 15309
// ComCancel ( factory [ 1 ] ) ;
15296: LD_VAR 0 31
15300: PUSH
15301: LD_INT 1
15303: ARRAY
15304: PPUSH
15305: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15309: LD_ADDR_VAR 0 23
15313: PUSH
15314: LD_VAR 0 4
15318: PPUSH
15319: LD_INT 22
15321: PUSH
15322: LD_VAR 0 1
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 50
15343: PUSH
15344: EMPTY
15345: LIST
15346: PUSH
15347: LD_INT 3
15349: PUSH
15350: LD_INT 2
15352: PUSH
15353: LD_INT 31
15355: PUSH
15356: LD_INT 31
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 34
15365: PUSH
15366: LD_INT 12
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 34
15375: PUSH
15376: LD_INT 51
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: LD_INT 34
15385: PUSH
15386: LD_INT 32
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: PPUSH
15410: CALL_OW 70
15414: PUSH
15415: LD_EXP 50
15419: DIFF
15420: PUSH
15421: FOR_IN
15422: IFFALSE 15585
// begin vehicleInList = false ;
15424: LD_ADDR_VAR 0 25
15428: PUSH
15429: LD_INT 0
15431: ST_TO_ADDR
// for i := 1 to vehicles do
15432: LD_ADDR_VAR 0 13
15436: PUSH
15437: DOUBLE
15438: LD_INT 1
15440: DEC
15441: ST_TO_ADDR
15442: LD_VAR 0 24
15446: PUSH
15447: FOR_TO
15448: IFFALSE 15478
// begin if vehicle in vehicles [ i ] then
15450: LD_VAR 0 23
15454: PUSH
15455: LD_VAR 0 24
15459: PUSH
15460: LD_VAR 0 13
15464: ARRAY
15465: IN
15466: IFFALSE 15476
// vehicleInList = true ;
15468: LD_ADDR_VAR 0 25
15472: PUSH
15473: LD_INT 1
15475: ST_TO_ADDR
// end ;
15476: GO 15447
15478: POP
15479: POP
// if not vehicleInList then
15480: LD_VAR 0 25
15484: NOT
15485: IFFALSE 15583
// if vehicles < vehiclesToAttackAmount then
15487: LD_VAR 0 24
15491: PUSH
15492: LD_VAR 0 10
15496: LESS
15497: IFFALSE 15542
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15499: LD_ADDR_VAR 0 24
15503: PUSH
15504: LD_VAR 0 24
15508: PUSH
15509: LD_VAR 0 23
15513: PUSH
15514: LD_VAR 0 23
15518: PPUSH
15519: CALL_OW 313
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: ADD
15539: ST_TO_ADDR
15540: GO 15583
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15542: LD_ADDR_VAR 0 24
15546: PUSH
15547: LD_VAR 0 24
15551: PUSH
15552: LD_VAR 0 23
15556: PUSH
15557: LD_VAR 0 23
15561: PPUSH
15562: CALL_OW 313
15566: PUSH
15567: LD_INT 1
15569: ARRAY
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: ADD
15582: ST_TO_ADDR
// end ;
15583: GO 15421
15585: POP
15586: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15587: LD_ADDR_VAR 0 38
15591: PUSH
15592: LD_INT 81
15594: PUSH
15595: LD_VAR 0 1
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PPUSH
15604: CALL_OW 69
15608: PUSH
15609: FOR_IN
15610: IFFALSE 15833
// begin offensiveUnits = [ ] ;
15612: LD_ADDR_VAR 0 27
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// for i := 1 to vehicles do
15619: LD_ADDR_VAR 0 13
15623: PUSH
15624: DOUBLE
15625: LD_INT 1
15627: DEC
15628: ST_TO_ADDR
15629: LD_VAR 0 24
15633: PUSH
15634: FOR_TO
15635: IFFALSE 15781
// if vehicles [ i ] [ 3 ] = 3 then
15637: LD_VAR 0 24
15641: PUSH
15642: LD_VAR 0 13
15646: ARRAY
15647: PUSH
15648: LD_INT 3
15650: ARRAY
15651: PUSH
15652: LD_INT 3
15654: EQUAL
15655: IFFALSE 15779
// begin offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15657: LD_ADDR_VAR 0 27
15661: PUSH
15662: LD_VAR 0 27
15666: PUSH
15667: LD_VAR 0 24
15671: PUSH
15672: LD_VAR 0 13
15676: ARRAY
15677: PUSH
15678: LD_INT 1
15680: ARRAY
15681: ADD
15682: ST_TO_ADDR
// for j = 1 to personel do
15683: LD_ADDR_VAR 0 14
15687: PUSH
15688: DOUBLE
15689: LD_INT 1
15691: DEC
15692: ST_TO_ADDR
15693: LD_VAR 0 18
15697: PUSH
15698: FOR_TO
15699: IFFALSE 15777
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15701: LD_VAR 0 18
15705: PUSH
15706: LD_VAR 0 14
15710: ARRAY
15711: PUSH
15712: LD_INT 1
15714: ARRAY
15715: PUSH
15716: LD_VAR 0 24
15720: PUSH
15721: LD_VAR 0 13
15725: ARRAY
15726: PUSH
15727: LD_INT 2
15729: ARRAY
15730: EQUAL
15731: IFFALSE 15775
// personel = ReplaceIn ( personel , [ j , personel [ j ] - 1 ] , 3 ) ;
15733: LD_ADDR_VAR 0 18
15737: PUSH
15738: LD_VAR 0 18
15742: PPUSH
15743: LD_VAR 0 14
15747: PUSH
15748: LD_VAR 0 18
15752: PUSH
15753: LD_VAR 0 14
15757: ARRAY
15758: PUSH
15759: LD_INT 1
15761: MINUS
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PPUSH
15767: LD_INT 3
15769: PPUSH
15770: CALL 27702 0 3
15774: ST_TO_ADDR
15775: GO 15698
15777: POP
15778: POP
// end ;
15779: GO 15634
15781: POP
15782: POP
// if offensiveUnits >= vehiclesToAttackAmount - 2 then
15783: LD_VAR 0 27
15787: PUSH
15788: LD_VAR 0 10
15792: PUSH
15793: LD_INT 2
15795: MINUS
15796: GREATEREQUAL
15797: IFFALSE 15831
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
15799: LD_VAR 0 27
15803: PPUSH
15804: LD_INT 3
15806: PUSH
15807: LD_INT 60
15809: PUSH
15810: EMPTY
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PPUSH
15817: CALL_OW 72
15821: PPUSH
15822: LD_VAR 0 38
15826: PPUSH
15827: CALL_OW 175
// end ;
15831: GO 15609
15833: POP
15834: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
15835: LD_ADDR_VAR 0 38
15839: PUSH
15840: LD_VAR 0 7
15844: PPUSH
15845: LD_INT 81
15847: PUSH
15848: LD_VAR 0 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 70
15861: PUSH
15862: FOR_IN
15863: IFFALSE 16042
// begin defenceUnits = [ ] ;
15865: LD_ADDR_VAR 0 26
15869: PUSH
15870: EMPTY
15871: ST_TO_ADDR
// for i := 1 to personel do
15872: LD_ADDR_VAR 0 13
15876: PUSH
15877: DOUBLE
15878: LD_INT 1
15880: DEC
15881: ST_TO_ADDR
15882: LD_VAR 0 18
15886: PUSH
15887: FOR_TO
15888: IFFALSE 15938
// if personel [ i ] [ 3 ] = 2 then
15890: LD_VAR 0 18
15894: PUSH
15895: LD_VAR 0 13
15899: ARRAY
15900: PUSH
15901: LD_INT 3
15903: ARRAY
15904: PUSH
15905: LD_INT 2
15907: EQUAL
15908: IFFALSE 15936
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
15910: LD_ADDR_VAR 0 26
15914: PUSH
15915: LD_VAR 0 26
15919: PUSH
15920: LD_VAR 0 18
15924: PUSH
15925: LD_VAR 0 13
15929: ARRAY
15930: PUSH
15931: LD_INT 1
15933: ARRAY
15934: ADD
15935: ST_TO_ADDR
15936: GO 15887
15938: POP
15939: POP
// for i := 1 to vehicles do
15940: LD_ADDR_VAR 0 13
15944: PUSH
15945: DOUBLE
15946: LD_INT 1
15948: DEC
15949: ST_TO_ADDR
15950: LD_VAR 0 24
15954: PUSH
15955: FOR_TO
15956: IFFALSE 16006
// if vehicles [ i ] [ 3 ] = 2 then
15958: LD_VAR 0 24
15962: PUSH
15963: LD_VAR 0 13
15967: ARRAY
15968: PUSH
15969: LD_INT 3
15971: ARRAY
15972: PUSH
15973: LD_INT 2
15975: EQUAL
15976: IFFALSE 16004
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
15978: LD_ADDR_VAR 0 26
15982: PUSH
15983: LD_VAR 0 26
15987: PUSH
15988: LD_VAR 0 24
15992: PUSH
15993: LD_VAR 0 13
15997: ARRAY
15998: PUSH
15999: LD_INT 1
16001: ARRAY
16002: ADD
16003: ST_TO_ADDR
16004: GO 15955
16006: POP
16007: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16008: LD_VAR 0 26
16012: PPUSH
16013: LD_INT 3
16015: PUSH
16016: LD_INT 60
16018: PUSH
16019: EMPTY
16020: LIST
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PPUSH
16026: CALL_OW 72
16030: PPUSH
16031: LD_VAR 0 38
16035: PPUSH
16036: CALL_OW 175
// end ;
16040: GO 15862
16042: POP
16043: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16044: LD_ADDR_VAR 0 39
16048: PUSH
16049: LD_INT 22
16051: PUSH
16052: LD_VAR 0 1
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: LD_INT 30
16066: PUSH
16067: LD_INT 31
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 30
16076: PUSH
16077: LD_INT 32
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 30
16086: PUSH
16087: LD_INT 33
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 30
16096: PUSH
16097: LD_INT 4
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 30
16106: PUSH
16107: LD_INT 5
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 69
16130: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16131: LD_ADDR_VAR 0 40
16135: PUSH
16136: LD_INT 81
16138: PUSH
16139: LD_VAR 0 1
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 21
16150: PUSH
16151: LD_INT 3
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 58
16160: PUSH
16161: EMPTY
16162: LIST
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: PPUSH
16169: CALL_OW 69
16173: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16174: LD_VAR 0 39
16178: PUSH
16179: LD_VAR 0 40
16183: AND
16184: IFFALSE 16254
// for i in attackBuildings do
16186: LD_ADDR_VAR 0 13
16190: PUSH
16191: LD_VAR 0 39
16195: PUSH
16196: FOR_IN
16197: IFFALSE 16252
// for j in enemyBuildings do
16199: LD_ADDR_VAR 0 14
16203: PUSH
16204: LD_VAR 0 40
16208: PUSH
16209: FOR_IN
16210: IFFALSE 16248
// if GetDistUnits ( i , j ) < 12 then
16212: LD_VAR 0 13
16216: PPUSH
16217: LD_VAR 0 14
16221: PPUSH
16222: CALL_OW 296
16226: PUSH
16227: LD_INT 12
16229: LESS
16230: IFFALSE 16246
// ComAttackUnit ( i , j ) ;
16232: LD_VAR 0 13
16236: PPUSH
16237: LD_VAR 0 14
16241: PPUSH
16242: CALL_OW 115
16246: GO 16209
16248: POP
16249: POP
16250: GO 16196
16252: POP
16253: POP
// until not personel or arabianCanExitMap ;
16254: LD_VAR 0 18
16258: NOT
16259: PUSH
16260: LD_EXP 21
16264: OR
16265: IFFALSE 11005
// end ;
16267: LD_VAR 0 12
16271: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16272: LD_EXP 50
16276: NOT
16277: IFFALSE 16311
16279: GO 16281
16281: DISABLE
// begin enable ;
16282: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16283: LD_EXP 34
16287: PPUSH
16288: LD_INT 42
16290: PPUSH
16291: CALL 2701 0 2
// arabLeftExit = true ;
16295: LD_ADDR_EXP 52
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
// arabRightExit = false ;
16303: LD_ADDR_EXP 53
16307: PUSH
16308: LD_INT 0
16310: ST_TO_ADDR
// end ;
16311: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base , test ;
16312: LD_EXP 50
16316: PUSH
16317: LD_EXP 52
16321: AND
16322: IFFALSE 16518
16324: GO 16326
16326: DISABLE
16327: LD_INT 0
16329: PPUSH
16330: PPUSH
16331: PPUSH
16332: PPUSH
// begin enable ;
16333: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16334: LD_EXP 50
16338: PPUSH
16339: LD_INT 71
16341: PPUSH
16342: LD_INT 137
16344: PPUSH
16345: CALL_OW 114
// for veh in arabianPatrolVehicles do
16349: LD_ADDR_VAR 0 1
16353: PUSH
16354: LD_EXP 50
16358: PUSH
16359: FOR_IN
16360: IFFALSE 16516
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16362: LD_VAR 0 1
16366: PPUSH
16367: LD_INT 43
16369: PPUSH
16370: CALL_OW 308
16374: IFFALSE 16514
// begin if arabianPatrolVehicles then
16376: LD_EXP 50
16380: IFFALSE 16409
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16382: LD_VAR 0 1
16386: PPUSH
16387: CALL_OW 313
16391: PUSH
16392: LD_INT 1
16394: ARRAY
16395: PPUSH
16396: CALL_OW 64
// RemoveUnit ( veh ) ;
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 64
// end ; x = 0 ;
16409: LD_ADDR_VAR 0 2
16413: PUSH
16414: LD_INT 0
16416: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16417: LD_ADDR_VAR 0 1
16421: PUSH
16422: LD_EXP 50
16426: PUSH
16427: FOR_IN
16428: IFFALSE 16458
// if not IsPlaced ( veh ) then
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 305
16439: NOT
16440: IFFALSE 16456
// x = x + 1 ;
16442: LD_ADDR_VAR 0 2
16446: PUSH
16447: LD_VAR 0 2
16451: PUSH
16452: LD_INT 1
16454: PLUS
16455: ST_TO_ADDR
16456: GO 16427
16458: POP
16459: POP
// if x = arabianPatrolVehicles then
16460: LD_VAR 0 2
16464: PUSH
16465: LD_EXP 50
16469: EQUAL
16470: IFFALSE 16514
// begin arabLeftExit = false ;
16472: LD_ADDR_EXP 52
16476: PUSH
16477: LD_INT 0
16479: ST_TO_ADDR
// arabRightExit = true ;
16480: LD_ADDR_EXP 53
16484: PUSH
16485: LD_INT 1
16487: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16488: LD_INT 4200
16490: PPUSH
16491: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16495: LD_ADDR_EXP 50
16499: PUSH
16500: EMPTY
16501: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16502: LD_EXP 34
16506: PPUSH
16507: LD_INT 43
16509: PPUSH
16510: CALL 2701 0 2
// end ; end ; end ;
16514: GO 16359
16516: POP
16517: POP
// end ;
16518: PPOPN 4
16520: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16521: LD_EXP 50
16525: PUSH
16526: LD_EXP 53
16530: AND
16531: IFFALSE 16726
16533: GO 16535
16535: DISABLE
16536: LD_INT 0
16538: PPUSH
16539: PPUSH
16540: PPUSH
// begin enable ;
16541: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16542: LD_EXP 50
16546: PPUSH
16547: LD_INT 184
16549: PPUSH
16550: LD_INT 134
16552: PPUSH
16553: CALL_OW 114
// for veh in arabianPatrolVehicles do
16557: LD_ADDR_VAR 0 1
16561: PUSH
16562: LD_EXP 50
16566: PUSH
16567: FOR_IN
16568: IFFALSE 16724
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16570: LD_VAR 0 1
16574: PPUSH
16575: LD_INT 42
16577: PPUSH
16578: CALL_OW 308
16582: IFFALSE 16722
// begin if arabianPatrolVehicles then
16584: LD_EXP 50
16588: IFFALSE 16617
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16590: LD_VAR 0 1
16594: PPUSH
16595: CALL_OW 313
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PPUSH
16604: CALL_OW 64
// RemoveUnit ( veh ) ;
16608: LD_VAR 0 1
16612: PPUSH
16613: CALL_OW 64
// end ; x = 0 ;
16617: LD_ADDR_VAR 0 2
16621: PUSH
16622: LD_INT 0
16624: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16625: LD_ADDR_VAR 0 1
16629: PUSH
16630: LD_EXP 50
16634: PUSH
16635: FOR_IN
16636: IFFALSE 16666
// if not IsPlaced ( veh ) then
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 305
16647: NOT
16648: IFFALSE 16664
// x = x + 1 ;
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_INT 1
16662: PLUS
16663: ST_TO_ADDR
16664: GO 16635
16666: POP
16667: POP
// if x = arabianPatrolVehicles then
16668: LD_VAR 0 2
16672: PUSH
16673: LD_EXP 50
16677: EQUAL
16678: IFFALSE 16722
// begin arabLeftExit = true ;
16680: LD_ADDR_EXP 52
16684: PUSH
16685: LD_INT 1
16687: ST_TO_ADDR
// arabRightExit = false ;
16688: LD_ADDR_EXP 53
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16696: LD_INT 4200
16698: PPUSH
16699: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16703: LD_ADDR_EXP 50
16707: PUSH
16708: EMPTY
16709: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16710: LD_EXP 34
16714: PPUSH
16715: LD_INT 42
16717: PPUSH
16718: CALL 2701 0 2
// end ; end ; end ;
16722: GO 16567
16724: POP
16725: POP
// end ;
16726: PPOPN 3
16728: END
// every 4 4$0 trigger not arabianHovercrafts and not arabianCanExitMap do
16729: LD_EXP 51
16733: NOT
16734: PUSH
16735: LD_EXP 21
16739: NOT
16740: AND
16741: IFFALSE 16751
16743: GO 16745
16745: DISABLE
// begin enable ;
16746: ENABLE
// PrepareArabianHovercraft ;
16747: CALL 2864 0 0
// end ;
16751: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
16752: LD_EXP 51
16756: IFFALSE 16912
16758: GO 16760
16760: DISABLE
16761: LD_INT 0
16763: PPUSH
16764: PPUSH
// begin enable ;
16765: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
16766: LD_EXP 51
16770: PPUSH
16771: LD_INT 100
16773: PPUSH
16774: CALL_OW 240
// for i := 1 to arabianHovercraftsPath do
16778: LD_ADDR_VAR 0 1
16782: PUSH
16783: DOUBLE
16784: LD_INT 1
16786: DEC
16787: ST_TO_ADDR
16788: LD_EXP 36
16792: PUSH
16793: FOR_TO
16794: IFFALSE 16837
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
16796: LD_EXP 51
16800: PPUSH
16801: LD_EXP 36
16805: PUSH
16806: LD_VAR 0 1
16810: ARRAY
16811: PUSH
16812: LD_INT 1
16814: ARRAY
16815: PPUSH
16816: LD_EXP 36
16820: PUSH
16821: LD_VAR 0 1
16825: ARRAY
16826: PUSH
16827: LD_INT 2
16829: ARRAY
16830: PPUSH
16831: CALL_OW 174
16835: GO 16793
16837: POP
16838: POP
// x = arabianHovercraftsPath ;
16839: LD_ADDR_VAR 0 2
16843: PUSH
16844: LD_EXP 36
16848: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
16849: LD_EXP 51
16853: PPUSH
16854: LD_EXP 36
16858: PUSH
16859: LD_VAR 0 2
16863: ARRAY
16864: PUSH
16865: LD_INT 1
16867: ARRAY
16868: PPUSH
16869: LD_EXP 36
16873: PUSH
16874: LD_VAR 0 2
16878: ARRAY
16879: PUSH
16880: LD_INT 2
16882: ARRAY
16883: PPUSH
16884: CALL_OW 174
// x = x - 1 ;
16888: LD_ADDR_VAR 0 2
16892: PUSH
16893: LD_VAR 0 2
16897: PUSH
16898: LD_INT 1
16900: MINUS
16901: ST_TO_ADDR
// until x = 0 ;
16902: LD_VAR 0 2
16906: PUSH
16907: LD_INT 0
16909: EQUAL
16910: IFFALSE 16849
// end ; end_of_file
16912: PPOPN 2
16914: END
// export function Lose_Burlak ; begin
16915: LD_INT 0
16917: PPUSH
// YouLost ( Burlak ) ;
16918: LD_STRING Burlak
16920: PPUSH
16921: CALL_OW 104
// end ;
16925: LD_VAR 0 1
16929: RET
// export function Lose_Survive ; begin
16930: LD_INT 0
16932: PPUSH
// YouLost ( Survive ) ;
16933: LD_STRING Survive
16935: PPUSH
16936: CALL_OW 104
// end ;
16940: LD_VAR 0 1
16944: RET
// export function Lose_Surrender ; begin
16945: LD_INT 0
16947: PPUSH
// YouLost ( Surrender ) ;
16948: LD_STRING Surrender
16950: PPUSH
16951: CALL_OW 104
// end ; end_of_file
16955: LD_VAR 0 1
16959: RET
// every 0 0$5 do
16960: GO 16962
16962: DISABLE
// begin enable ;
16963: ENABLE
// if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
16964: LD_EXP 24
16968: NOT
16969: PUSH
16970: LD_INT 22
16972: PPUSH
16973: LD_INT 22
16975: PUSH
16976: LD_INT 3
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: LD_INT 21
16985: PUSH
16986: LD_INT 2
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 50
16995: PUSH
16996: EMPTY
16997: LIST
16998: PUSH
16999: LD_INT 59
17001: PUSH
17002: EMPTY
17003: LIST
17004: PUSH
17005: LD_INT 2
17007: PUSH
17008: LD_INT 31
17010: PUSH
17011: LD_INT 22
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 31
17020: PUSH
17021: LD_INT 24
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 31
17030: PUSH
17031: LD_INT 14
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: PPUSH
17051: CALL_OW 70
17055: AND
17056: PUSH
17057: LD_INT 22
17059: PPUSH
17060: LD_INT 22
17062: PUSH
17063: LD_INT 3
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 21
17072: PUSH
17073: LD_INT 1
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 23
17082: PUSH
17083: LD_INT 3
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 50
17092: PUSH
17093: EMPTY
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: PPUSH
17102: CALL_OW 70
17106: AND
17107: IFFALSE 17116
// Query ( QVehicles ) ;
17109: LD_STRING QVehicles
17111: PPUSH
17112: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17116: LD_EXP 37
17120: PPUSH
17121: CALL_OW 310
17125: PPUSH
17126: LD_INT 22
17128: PPUSH
17129: CALL_OW 308
17133: PUSH
17134: LD_EXP 24
17138: NOT
17139: AND
17140: PUSH
17141: LD_INT 22
17143: PPUSH
17144: LD_INT 22
17146: PUSH
17147: LD_INT 3
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 21
17156: PUSH
17157: LD_INT 2
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 59
17166: PUSH
17167: EMPTY
17168: LIST
17169: PUSH
17170: LD_INT 50
17172: PUSH
17173: EMPTY
17174: LIST
17175: PUSH
17176: LD_INT 2
17178: PUSH
17179: LD_INT 31
17181: PUSH
17182: LD_INT 22
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 31
17191: PUSH
17192: LD_INT 24
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 31
17201: PUSH
17202: LD_INT 14
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL_OW 70
17226: PUSH
17227: LD_INT 22
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 21
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 23
17249: PUSH
17250: LD_INT 3
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 2
17259: PUSH
17260: LD_INT 25
17262: PUSH
17263: LD_INT 1
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 25
17272: PUSH
17273: LD_INT 2
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 25
17282: PUSH
17283: LD_INT 3
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 25
17292: PUSH
17293: LD_INT 4
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: PPUSH
17313: CALL_OW 69
17317: GREATEREQUAL
17318: AND
17319: IFFALSE 17325
// FinishMission ;
17321: CALL 17646 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17325: LD_EXP 37
17329: PPUSH
17330: CALL_OW 310
17334: PPUSH
17335: LD_INT 22
17337: PPUSH
17338: CALL_OW 308
17342: PUSH
17343: LD_EXP 24
17347: NOT
17348: AND
17349: PUSH
17350: LD_INT 22
17352: PPUSH
17353: LD_INT 22
17355: PUSH
17356: LD_INT 3
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 21
17365: PUSH
17366: LD_INT 2
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 59
17375: PUSH
17376: EMPTY
17377: LIST
17378: PUSH
17379: LD_INT 50
17381: PUSH
17382: EMPTY
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: LD_INT 31
17390: PUSH
17391: LD_INT 22
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 31
17400: PUSH
17401: LD_INT 24
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 31
17410: PUSH
17411: LD_INT 14
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: PPUSH
17431: CALL_OW 70
17435: PUSH
17436: LD_INT 6
17438: GREATEREQUAL
17439: AND
17440: PUSH
17441: LD_INT 22
17443: PPUSH
17444: LD_INT 22
17446: PUSH
17447: LD_INT 3
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 21
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 59
17466: PUSH
17467: EMPTY
17468: LIST
17469: PUSH
17470: LD_INT 50
17472: PUSH
17473: EMPTY
17474: LIST
17475: PUSH
17476: LD_INT 2
17478: PUSH
17479: LD_INT 31
17481: PUSH
17482: LD_INT 22
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 31
17491: PUSH
17492: LD_INT 24
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 31
17501: PUSH
17502: LD_INT 14
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: PPUSH
17522: CALL_OW 70
17526: PUSH
17527: LD_INT 22
17529: PUSH
17530: LD_INT 3
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 21
17539: PUSH
17540: LD_INT 1
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 23
17549: PUSH
17550: LD_INT 3
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: LD_INT 25
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 25
17572: PUSH
17573: LD_INT 2
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 25
17582: PUSH
17583: LD_INT 3
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 25
17592: PUSH
17593: LD_INT 4
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 69
17617: LESS
17618: AND
17619: IFFALSE 17645
// begin case Query ( QEndMission ) of 1 :
17621: LD_STRING QEndMission
17623: PPUSH
17624: CALL_OW 97
17628: PUSH
17629: LD_INT 1
17631: DOUBLE
17632: EQUAL
17633: IFTRUE 17637
17635: GO 17644
17637: POP
// FinishMission ; end ;
17638: CALL 17646 0 0
17642: GO 17645
17644: POP
// end ; end ;
17645: END
// function FinishMission ; var nearUnit ; begin
17646: LD_INT 0
17648: PPUSH
17649: PPUSH
// finishMissionBool = true ;
17650: LD_ADDR_EXP 24
17654: PUSH
17655: LD_INT 1
17657: ST_TO_ADDR
// if stevensDepot then
17658: LD_EXP 17
17662: IFFALSE 17831
// begin DialogueOn ;
17664: CALL_OW 6
// if IsOK ( Petrosyan ) then
17668: LD_EXP 41
17672: PPUSH
17673: CALL_OW 302
17677: IFFALSE 17693
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
17679: LD_EXP 41
17683: PPUSH
17684: LD_STRING DStevensLeftBehind-Pty-1
17686: PPUSH
17687: CALL_OW 88
17691: GO 17807
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
17693: LD_INT 22
17695: PUSH
17696: LD_INT 3
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 26
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 50
17725: PUSH
17726: EMPTY
17727: LIST
17728: PUSH
17729: LD_INT 2
17731: PUSH
17732: LD_INT 25
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 25
17744: PUSH
17745: LD_INT 2
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 25
17754: PUSH
17755: LD_INT 3
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 25
17764: PUSH
17765: LD_INT 4
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: PPUSH
17786: CALL_OW 69
17790: PPUSH
17791: LD_STRING StevensLeftBehind-RSol1-1
17793: PPUSH
17794: LD_STRING 
17796: PPUSH
17797: LD_INT 0
17799: PPUSH
17800: LD_INT 1
17802: PPUSH
17803: CALL 8770 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
17807: LD_EXP 37
17811: PPUSH
17812: LD_STRING DStevensLeftBehind-Bur-1
17814: PPUSH
17815: CALL_OW 88
// DialogueOff ;
17819: CALL_OW 7
// stevensStatus = 1 ;
17823: LD_ADDR_EXP 2
17827: PUSH
17828: LD_INT 1
17830: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
17831: LD_EXP 14
17835: NOT
17836: PUSH
17837: LD_EXP 41
17841: PPUSH
17842: CALL_OW 302
17846: AND
17847: IFFALSE 18379
// begin PrepareStevens ( exit_rus ) ;
17849: LD_INT 22
17851: PPUSH
17852: CALL 20412 0 1
// wait ( 0 0$1.5 ) ;
17856: LD_INT 52
17858: PPUSH
17859: CALL_OW 67
// stevensPlaced = true ;
17863: LD_ADDR_EXP 14
17867: PUSH
17868: LD_INT 1
17870: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
17871: LD_ADDR_VAR 0 2
17875: PUSH
17876: LD_INT 22
17878: PUSH
17879: LD_INT 3
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 21
17888: PUSH
17889: LD_INT 1
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 26
17898: PUSH
17899: LD_INT 1
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 50
17908: PUSH
17909: EMPTY
17910: LIST
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: LD_INT 25
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 25
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 25
17937: PUSH
17938: LD_INT 3
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 25
17947: PUSH
17948: LD_INT 4
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: PPUSH
17969: CALL_OW 69
17973: PPUSH
17974: LD_EXP 54
17978: PPUSH
17979: CALL_OW 74
17983: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
17984: LD_EXP 54
17988: PPUSH
17989: CALL_OW 87
// InGameOn ;
17993: CALL_OW 8
// wait ( 0 0$1.5 ) ;
17997: LD_INT 52
17999: PPUSH
18000: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18004: LD_EXP 54
18008: PPUSH
18009: LD_INT 6
18011: PPUSH
18012: CALL_OW 235
// DialogueOn ;
18016: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18020: LD_EXP 54
18024: PPUSH
18025: LD_STRING DStevens-Huck-1
18027: PPUSH
18028: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18032: LD_EXP 41
18036: PPUSH
18037: LD_STRING DStevens-Pty-1
18039: PPUSH
18040: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18044: LD_EXP 41
18048: PPUSH
18049: LD_STRING DStevens-Pty-1a
18051: PPUSH
18052: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18056: LD_EXP 54
18060: PPUSH
18061: LD_STRING DStevens-Huck-2
18063: PPUSH
18064: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18068: LD_EXP 41
18072: PPUSH
18073: LD_STRING DStevens-Pty-2
18075: PPUSH
18076: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18080: LD_EXP 54
18084: PPUSH
18085: LD_STRING DStevens-Huck-3
18087: PPUSH
18088: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18092: LD_EXP 41
18096: PPUSH
18097: LD_STRING DStevens-Pty-3
18099: PPUSH
18100: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18104: LD_EXP 54
18108: PPUSH
18109: LD_STRING DStevens-Huck-4
18111: PPUSH
18112: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18116: LD_EXP 41
18120: PPUSH
18121: LD_STRING DStevensBurlak-Pty-1
18123: PPUSH
18124: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18128: LD_EXP 37
18132: PPUSH
18133: LD_STRING DStevensBurlak-Bur-1
18135: PPUSH
18136: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18140: LD_EXP 41
18144: PPUSH
18145: LD_STRING DStevensBurlak-Pty-2
18147: PPUSH
18148: CALL_OW 88
// case Query ( QKill ) of 1 :
18152: LD_STRING QKill
18154: PPUSH
18155: CALL_OW 97
18159: PUSH
18160: LD_INT 1
18162: DOUBLE
18163: EQUAL
18164: IFTRUE 18168
18166: GO 18295
18168: POP
// begin stevensCanExitMap = true ;
18169: LD_ADDR_EXP 19
18173: PUSH
18174: LD_INT 1
18176: ST_TO_ADDR
// stevensFollow = false ;
18177: LD_ADDR_EXP 15
18181: PUSH
18182: LD_INT 0
18184: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18185: LD_EXP 37
18189: PPUSH
18190: LD_STRING DKill-1-Bur-1
18192: PPUSH
18193: CALL_OW 88
// if IsOK ( Gleb ) then
18197: LD_EXP 40
18201: PPUSH
18202: CALL_OW 302
18206: IFFALSE 18220
// Say ( Gleb , DKill-1-Glb-1 ) ;
18208: LD_EXP 40
18212: PPUSH
18213: LD_STRING DKill-1-Glb-1
18215: PPUSH
18216: CALL_OW 88
// DialogueOff ;
18220: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18224: LD_EXP 54
18228: PPUSH
18229: LD_INT 1
18231: PPUSH
18232: CALL_OW 235
// stevensStatus = 0 ;
18236: LD_ADDR_EXP 2
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18244: LD_INT 22
18246: PUSH
18247: LD_INT 3
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PPUSH
18254: CALL_OW 69
18258: PPUSH
18259: LD_EXP 54
18263: PPUSH
18264: CALL_OW 115
// wait ( 0 0$1 ) ;
18268: LD_INT 35
18270: PPUSH
18271: CALL_OW 67
// until IsDead ( Stevens ) ;
18275: LD_EXP 54
18279: PPUSH
18280: CALL_OW 301
18284: IFFALSE 18244
// wait ( 0 0$1.5 ) ;
18286: LD_INT 52
18288: PPUSH
18289: CALL_OW 67
// end ; 2 :
18293: GO 18379
18295: LD_INT 2
18297: DOUBLE
18298: EQUAL
18299: IFTRUE 18303
18301: GO 18378
18303: POP
// begin stevensCanExitMap = true ;
18304: LD_ADDR_EXP 19
18308: PUSH
18309: LD_INT 1
18311: ST_TO_ADDR
// stevensWasInDepot = false ;
18312: LD_ADDR_EXP 18
18316: PUSH
18317: LD_INT 0
18319: ST_TO_ADDR
// stevensDepot = false ;
18320: LD_ADDR_EXP 17
18324: PUSH
18325: LD_INT 0
18327: ST_TO_ADDR
// stevensStatus = 1 ;
18328: LD_ADDR_EXP 2
18332: PUSH
18333: LD_INT 1
18335: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18336: LD_EXP 37
18340: PPUSH
18341: LD_STRING DKill-2-Bur-1
18343: PPUSH
18344: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18348: LD_EXP 41
18352: PPUSH
18353: LD_STRING DKill-2-Pty-1
18355: PPUSH
18356: CALL_OW 88
// DialogueOff ;
18360: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18364: LD_EXP 54
18368: PPUSH
18369: LD_INT 37
18371: PPUSH
18372: CALL_OW 113
// end ; end ;
18376: GO 18379
18378: POP
// end ; SetRewards ;
18379: CALL 18400 0 0
// SavePlayerCharacters ;
18383: CALL 18641 0 0
// SaveGlobalVariables ;
18387: CALL 18986 0 0
// YouWin ;
18391: CALL_OW 103
// end ;
18395: LD_VAR 0 1
18399: RET
// function SetRewards ; begin
18400: LD_INT 0
18402: PPUSH
// if fastBreakthrough then
18403: LD_EXP 23
18407: IFFALSE 18421
// AddMedal ( Time , 1 ) else
18409: LD_STRING Time
18411: PPUSH
18412: LD_INT 1
18414: PPUSH
18415: CALL_OW 101
18419: GO 18432
// AddMedal ( Time , - 1 ) ;
18421: LD_STRING Time
18423: PPUSH
18424: LD_INT 1
18426: NEG
18427: PPUSH
18428: CALL_OW 101
// if dial_tameApeBlocker then
18432: LD_EXP 10
18436: IFFALSE 18450
// AddMedal ( Apemen , 1 ) else
18438: LD_STRING Apemen
18440: PPUSH
18441: LD_INT 1
18443: PPUSH
18444: CALL_OW 101
18448: GO 18497
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18450: LD_EXP 10
18454: NOT
18455: PUSH
18456: LD_INT 1
18458: PPUSH
18459: LD_INT 3
18461: PPUSH
18462: CALL_OW 321
18466: PUSH
18467: LD_INT 1
18469: EQUAL
18470: AND
18471: IFFALSE 18486
// AddMedal ( Apemen , - 1 ) else
18473: LD_STRING Apemen
18475: PPUSH
18476: LD_INT 1
18478: NEG
18479: PPUSH
18480: CALL_OW 101
18484: GO 18497
// AddMedal ( Apemen , - 2 ) ;
18486: LD_STRING Apemen
18488: PPUSH
18489: LD_INT 2
18491: NEG
18492: PPUSH
18493: CALL_OW 101
// if not omarStatus then
18497: LD_EXP 1
18501: NOT
18502: IFFALSE 18516
// AddMedal ( Abdul , 1 ) else
18504: LD_STRING Abdul
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL_OW 101
18514: GO 18527
// AddMedal ( Abdul , - 1 ) ;
18516: LD_STRING Abdul
18518: PPUSH
18519: LD_INT 1
18521: NEG
18522: PPUSH
18523: CALL_OW 101
// GiveMedals ( Main ) ;
18527: LD_STRING Main
18529: PPUSH
18530: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18534: LD_INT 22
18536: PUSH
18537: LD_INT 3
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 21
18546: PUSH
18547: LD_INT 1
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 23
18556: PUSH
18557: LD_INT 3
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 50
18566: PUSH
18567: EMPTY
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 25
18575: PUSH
18576: LD_INT 1
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 25
18585: PUSH
18586: LD_INT 2
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 25
18595: PUSH
18596: LD_INT 3
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 25
18605: PUSH
18606: LD_INT 4
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: PPUSH
18627: CALL_OW 69
18631: PPUSH
18632: CALL_OW 43
// end ;
18636: LD_VAR 0 1
18640: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
18641: LD_INT 0
18643: PPUSH
18644: PPUSH
18645: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
18646: LD_EXP 37
18650: PPUSH
18651: LD_STRING Burlak
18653: PPUSH
18654: LD_INT 3
18656: PPUSH
18657: CALL 8571 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
18661: LD_EXP 38
18665: PPUSH
18666: CALL_OW 310
18670: PPUSH
18671: LD_INT 22
18673: PPUSH
18674: CALL_OW 308
18678: IFFALSE 18695
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
18680: LD_EXP 38
18684: PPUSH
18685: LD_STRING Karamazov
18687: PPUSH
18688: LD_INT 3
18690: PPUSH
18691: CALL 8571 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
18695: LD_EXP 39
18699: PPUSH
18700: CALL_OW 310
18704: PPUSH
18705: LD_INT 22
18707: PPUSH
18708: CALL_OW 308
18712: IFFALSE 18729
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
18714: LD_EXP 39
18718: PPUSH
18719: LD_STRING Petrovova
18721: PPUSH
18722: LD_INT 3
18724: PPUSH
18725: CALL 8571 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
18729: LD_EXP 40
18733: PPUSH
18734: CALL_OW 310
18738: PPUSH
18739: LD_INT 22
18741: PPUSH
18742: CALL_OW 308
18746: IFFALSE 18763
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
18748: LD_EXP 40
18752: PPUSH
18753: LD_STRING Gleb
18755: PPUSH
18756: LD_INT 3
18758: PPUSH
18759: CALL 8571 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
18763: LD_EXP 41
18767: PPUSH
18768: CALL_OW 310
18772: PPUSH
18773: LD_INT 22
18775: PPUSH
18776: CALL_OW 308
18780: IFFALSE 18797
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
18782: LD_EXP 41
18786: PPUSH
18787: LD_STRING Petrosyan
18789: PPUSH
18790: LD_INT 3
18792: PPUSH
18793: CALL 8571 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
18797: LD_EXP 43
18801: PPUSH
18802: CALL_OW 310
18806: PPUSH
18807: LD_INT 22
18809: PPUSH
18810: CALL_OW 308
18814: IFFALSE 18831
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
18816: LD_EXP 43
18820: PPUSH
18821: LD_STRING Dolgov
18823: PPUSH
18824: LD_INT 3
18826: PPUSH
18827: CALL 8571 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
18831: LD_EXP 44
18835: PPUSH
18836: CALL_OW 310
18840: PPUSH
18841: LD_INT 22
18843: PPUSH
18844: CALL_OW 308
18848: IFFALSE 18865
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
18850: LD_EXP 44
18854: PPUSH
18855: LD_STRING Lipshchin
18857: PPUSH
18858: LD_INT 3
18860: PPUSH
18861: CALL 8571 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
18865: LD_EXP 42
18869: PPUSH
18870: CALL_OW 310
18874: PPUSH
18875: LD_INT 22
18877: PPUSH
18878: CALL_OW 308
18882: IFFALSE 18899
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
18884: LD_EXP 42
18888: PPUSH
18889: LD_STRING Titov
18891: PPUSH
18892: LD_INT 3
18894: PPUSH
18895: CALL 8571 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
18899: LD_INT 22
18901: PPUSH
18902: LD_INT 22
18904: PUSH
18905: LD_INT 3
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 21
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 2
18924: PUSH
18925: LD_INT 25
18927: PUSH
18928: LD_INT 12
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 25
18937: PUSH
18938: LD_INT 16
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 25
18947: PUSH
18948: LD_INT 15
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 70
18970: PPUSH
18971: LD_STRING other_apemans
18973: PPUSH
18974: LD_INT 3
18976: PPUSH
18977: CALL 8627 0 3
// end ;
18981: LD_VAR 0 1
18985: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
18986: LD_INT 0
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
18992: PPUSH
// resources = [ ] ;
18993: LD_ADDR_VAR 0 3
18997: PUSH
18998: EMPTY
18999: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19000: LD_ADDR_EXP 5
19004: PUSH
19005: EMPTY
19006: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19007: LD_EXP 2
19011: PPUSH
19012: LD_STRING 05_StevensStatus_1
19014: PPUSH
19015: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19019: LD_EXP 1
19023: PPUSH
19024: LD_STRING 05_OmarStatus_2
19026: PPUSH
19027: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) do
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_INT 22
19038: PPUSH
19039: LD_INT 22
19041: PUSH
19042: LD_INT 3
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 59
19051: PUSH
19052: EMPTY
19053: LIST
19054: PUSH
19055: LD_INT 2
19057: PUSH
19058: LD_INT 34
19060: PUSH
19061: LD_INT 51
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 34
19070: PUSH
19071: LD_INT 32
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: LIST
19087: PPUSH
19088: CALL_OW 70
19092: PUSH
19093: FOR_IN
19094: IFFALSE 19122
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19096: LD_ADDR_VAR 0 3
19100: PUSH
19101: LD_VAR 0 3
19105: PUSH
19106: LD_VAR 0 2
19110: PPUSH
19111: CALL 9757 0 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: ADD
19119: ST_TO_ADDR
19120: GO 19093
19122: POP
19123: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19124: LD_VAR 0 3
19128: PPUSH
19129: LD_STRING 05_ResourcesInCargo_3
19131: PPUSH
19132: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19136: LD_ADDR_VAR 0 2
19140: PUSH
19141: LD_INT 22
19143: PPUSH
19144: LD_INT 22
19146: PUSH
19147: LD_INT 3
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 21
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 59
19166: PUSH
19167: EMPTY
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: PPUSH
19175: CALL_OW 70
19179: PUSH
19180: FOR_IN
19181: IFFALSE 19441
// begin driver = UnitsInside ( i ) [ 1 ] ;
19183: LD_ADDR_VAR 0 4
19187: PUSH
19188: LD_VAR 0 2
19192: PPUSH
19193: CALL_OW 313
19197: PUSH
19198: LD_INT 1
19200: ARRAY
19201: ST_TO_ADDR
// if driver = Burlak then
19202: LD_VAR 0 4
19206: PUSH
19207: LD_EXP 37
19211: EQUAL
19212: IFFALSE 19222
// driverShortName = Bur ;
19214: LD_ADDR_VAR 0 5
19218: PUSH
19219: LD_STRING Bur
19221: ST_TO_ADDR
// if driver = Karamazov then
19222: LD_VAR 0 4
19226: PUSH
19227: LD_EXP 38
19231: EQUAL
19232: IFFALSE 19242
// driverShortName = Kar ;
19234: LD_ADDR_VAR 0 5
19238: PUSH
19239: LD_STRING Kar
19241: ST_TO_ADDR
// if driver = Petrovova then
19242: LD_VAR 0 4
19246: PUSH
19247: LD_EXP 39
19251: EQUAL
19252: IFFALSE 19262
// driverShortName = Ptr ;
19254: LD_ADDR_VAR 0 5
19258: PUSH
19259: LD_STRING Ptr
19261: ST_TO_ADDR
// if driver = Gleb then
19262: LD_VAR 0 4
19266: PUSH
19267: LD_EXP 40
19271: EQUAL
19272: IFFALSE 19282
// driverShortName = Glb ;
19274: LD_ADDR_VAR 0 5
19278: PUSH
19279: LD_STRING Glb
19281: ST_TO_ADDR
// if driver = Petrosyan then
19282: LD_VAR 0 4
19286: PUSH
19287: LD_EXP 41
19291: EQUAL
19292: IFFALSE 19302
// driverShortName = Pet ;
19294: LD_ADDR_VAR 0 5
19298: PUSH
19299: LD_STRING Pet
19301: ST_TO_ADDR
// if driver = Dolgov then
19302: LD_VAR 0 4
19306: PUSH
19307: LD_EXP 43
19311: EQUAL
19312: IFFALSE 19322
// driverShortName = Dol ;
19314: LD_ADDR_VAR 0 5
19318: PUSH
19319: LD_STRING Dol
19321: ST_TO_ADDR
// if driver = Lipshchin then
19322: LD_VAR 0 4
19326: PUSH
19327: LD_EXP 44
19331: EQUAL
19332: IFFALSE 19342
// driverShortName = Lip ;
19334: LD_ADDR_VAR 0 5
19338: PUSH
19339: LD_STRING Lip
19341: ST_TO_ADDR
// if driver = Titov then
19342: LD_VAR 0 4
19346: PUSH
19347: LD_EXP 42
19351: EQUAL
19352: IFFALSE 19362
// driverShortName = Tit ;
19354: LD_ADDR_VAR 0 5
19358: PUSH
19359: LD_STRING Tit
19361: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19362: LD_ADDR_EXP 5
19366: PUSH
19367: LD_EXP 5
19371: PUSH
19372: LD_VAR 0 2
19376: PPUSH
19377: CALL_OW 248
19381: PUSH
19382: LD_VAR 0 2
19386: PPUSH
19387: CALL_OW 265
19391: PUSH
19392: LD_VAR 0 2
19396: PPUSH
19397: CALL_OW 262
19401: PUSH
19402: LD_VAR 0 2
19406: PPUSH
19407: CALL_OW 263
19411: PUSH
19412: LD_VAR 0 2
19416: PPUSH
19417: CALL_OW 264
19421: PUSH
19422: LD_VAR 0 5
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: PUSH
19435: EMPTY
19436: LIST
19437: ADD
19438: ST_TO_ADDR
// end ;
19439: GO 19180
19441: POP
19442: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19443: LD_EXP 5
19447: PPUSH
19448: LD_STRING 05_Tanks_4
19450: PPUSH
19451: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19455: LD_INT 22
19457: PUSH
19458: LD_INT 3
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 23
19467: PUSH
19468: LD_INT 3
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 21
19477: PUSH
19478: LD_INT 3
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 2
19487: PUSH
19488: LD_INT 30
19490: PUSH
19491: LD_INT 6
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 30
19500: PUSH
19501: LD_INT 7
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 69
19523: NOT
19524: IFFALSE 19534
// labDestroyed = 1 ;
19526: LD_ADDR_EXP 3
19530: PUSH
19531: LD_INT 1
19533: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
19534: LD_EXP 3
19538: PPUSH
19539: LD_STRING 05_LabDestroyed_5
19541: PPUSH
19542: CALL_OW 39
// end ; end_of_file
19546: LD_VAR 0 1
19550: RET
// export function Nef_PrepareNature ; var i , un ; begin
19551: LD_INT 0
19553: PPUSH
19554: PPUSH
19555: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
19556: LD_ADDR_VAR 0 2
19560: PUSH
19561: DOUBLE
19562: LD_INT 1
19564: DEC
19565: ST_TO_ADDR
19566: LD_EXP 25
19570: PUSH
19571: LD_INT 1
19573: ARRAY
19574: PUSH
19575: FOR_TO
19576: IFFALSE 19686
// begin uc_side = 0 ;
19578: LD_ADDR_OWVAR 20
19582: PUSH
19583: LD_INT 0
19585: ST_TO_ADDR
// uc_nation = nation_nature ;
19586: LD_ADDR_OWVAR 21
19590: PUSH
19591: LD_INT 0
19593: ST_TO_ADDR
// hc_class = class_apeman ;
19594: LD_ADDR_OWVAR 28
19598: PUSH
19599: LD_INT 12
19601: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19602: LD_ADDR_OWVAR 31
19606: PUSH
19607: LD_EXP 26
19611: PUSH
19612: LD_INT 1
19614: ARRAY
19615: PUSH
19616: LD_EXP 26
19620: PUSH
19621: LD_INT 2
19623: ARRAY
19624: PUSH
19625: LD_EXP 26
19629: PUSH
19630: LD_INT 3
19632: ARRAY
19633: PUSH
19634: LD_EXP 26
19638: PUSH
19639: LD_INT 4
19641: ARRAY
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19649: LD_ADDR_OWVAR 35
19653: PUSH
19654: LD_EXP 27
19658: ST_TO_ADDR
// un = CreateHuman ;
19659: LD_ADDR_VAR 0 3
19663: PUSH
19664: CALL_OW 44
19668: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19669: LD_VAR 0 3
19673: PPUSH
19674: LD_INT 33
19676: PPUSH
19677: LD_INT 0
19679: PPUSH
19680: CALL_OW 49
// end ;
19684: GO 19575
19686: POP
19687: POP
// for i := 1 to animalsAmount [ 2 ] do
19688: LD_ADDR_VAR 0 2
19692: PUSH
19693: DOUBLE
19694: LD_INT 1
19696: DEC
19697: ST_TO_ADDR
19698: LD_EXP 25
19702: PUSH
19703: LD_INT 2
19705: ARRAY
19706: PUSH
19707: FOR_TO
19708: IFFALSE 19818
// begin uc_side = 0 ;
19710: LD_ADDR_OWVAR 20
19714: PUSH
19715: LD_INT 0
19717: ST_TO_ADDR
// uc_nation = nation_nature ;
19718: LD_ADDR_OWVAR 21
19722: PUSH
19723: LD_INT 0
19725: ST_TO_ADDR
// hc_class = class_phororhacos ;
19726: LD_ADDR_OWVAR 28
19730: PUSH
19731: LD_INT 18
19733: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19734: LD_ADDR_OWVAR 31
19738: PUSH
19739: LD_EXP 26
19743: PUSH
19744: LD_INT 1
19746: ARRAY
19747: PUSH
19748: LD_EXP 26
19752: PUSH
19753: LD_INT 2
19755: ARRAY
19756: PUSH
19757: LD_EXP 26
19761: PUSH
19762: LD_INT 3
19764: ARRAY
19765: PUSH
19766: LD_EXP 26
19770: PUSH
19771: LD_INT 4
19773: ARRAY
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19781: LD_ADDR_OWVAR 35
19785: PUSH
19786: LD_EXP 27
19790: ST_TO_ADDR
// un = CreateHuman ;
19791: LD_ADDR_VAR 0 3
19795: PUSH
19796: CALL_OW 44
19800: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19801: LD_VAR 0 3
19805: PPUSH
19806: LD_INT 33
19808: PPUSH
19809: LD_INT 0
19811: PPUSH
19812: CALL_OW 49
// end ;
19816: GO 19707
19818: POP
19819: POP
// for i := 1 to animalsAmount [ 3 ] do
19820: LD_ADDR_VAR 0 2
19824: PUSH
19825: DOUBLE
19826: LD_INT 1
19828: DEC
19829: ST_TO_ADDR
19830: LD_EXP 25
19834: PUSH
19835: LD_INT 3
19837: ARRAY
19838: PUSH
19839: FOR_TO
19840: IFFALSE 19950
// begin uc_side = 0 ;
19842: LD_ADDR_OWVAR 20
19846: PUSH
19847: LD_INT 0
19849: ST_TO_ADDR
// uc_nation = nation_nature ;
19850: LD_ADDR_OWVAR 21
19854: PUSH
19855: LD_INT 0
19857: ST_TO_ADDR
// hc_class = class_tiger ;
19858: LD_ADDR_OWVAR 28
19862: PUSH
19863: LD_INT 14
19865: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19866: LD_ADDR_OWVAR 31
19870: PUSH
19871: LD_EXP 26
19875: PUSH
19876: LD_INT 1
19878: ARRAY
19879: PUSH
19880: LD_EXP 26
19884: PUSH
19885: LD_INT 2
19887: ARRAY
19888: PUSH
19889: LD_EXP 26
19893: PUSH
19894: LD_INT 3
19896: ARRAY
19897: PUSH
19898: LD_EXP 26
19902: PUSH
19903: LD_INT 4
19905: ARRAY
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19913: LD_ADDR_OWVAR 35
19917: PUSH
19918: LD_EXP 27
19922: ST_TO_ADDR
// un = CreateHuman ;
19923: LD_ADDR_VAR 0 3
19927: PUSH
19928: CALL_OW 44
19932: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19933: LD_VAR 0 3
19937: PPUSH
19938: LD_INT 33
19940: PPUSH
19941: LD_INT 0
19943: PPUSH
19944: CALL_OW 49
// end ;
19948: GO 19839
19950: POP
19951: POP
// for i := 1 to animalsAmount [ 4 ] do
19952: LD_ADDR_VAR 0 2
19956: PUSH
19957: DOUBLE
19958: LD_INT 1
19960: DEC
19961: ST_TO_ADDR
19962: LD_EXP 25
19966: PUSH
19967: LD_INT 4
19969: ARRAY
19970: PUSH
19971: FOR_TO
19972: IFFALSE 20082
// begin uc_side = 0 ;
19974: LD_ADDR_OWVAR 20
19978: PUSH
19979: LD_INT 0
19981: ST_TO_ADDR
// uc_nation = nation_nature ;
19982: LD_ADDR_OWVAR 21
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// hc_class = 21 ;
19990: LD_ADDR_OWVAR 28
19994: PUSH
19995: LD_INT 21
19997: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19998: LD_ADDR_OWVAR 31
20002: PUSH
20003: LD_EXP 26
20007: PUSH
20008: LD_INT 1
20010: ARRAY
20011: PUSH
20012: LD_EXP 26
20016: PUSH
20017: LD_INT 2
20019: ARRAY
20020: PUSH
20021: LD_EXP 26
20025: PUSH
20026: LD_INT 3
20028: ARRAY
20029: PUSH
20030: LD_EXP 26
20034: PUSH
20035: LD_INT 4
20037: ARRAY
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20045: LD_ADDR_OWVAR 35
20049: PUSH
20050: LD_EXP 27
20054: ST_TO_ADDR
// un = CreateHuman ;
20055: LD_ADDR_VAR 0 3
20059: PUSH
20060: CALL_OW 44
20064: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20065: LD_VAR 0 3
20069: PPUSH
20070: LD_INT 33
20072: PPUSH
20073: LD_INT 0
20075: PPUSH
20076: CALL_OW 49
// end ;
20080: GO 19971
20082: POP
20083: POP
// for i := 1 to animalsAmount [ 5 ] do
20084: LD_ADDR_VAR 0 2
20088: PUSH
20089: DOUBLE
20090: LD_INT 1
20092: DEC
20093: ST_TO_ADDR
20094: LD_EXP 25
20098: PUSH
20099: LD_INT 5
20101: ARRAY
20102: PUSH
20103: FOR_TO
20104: IFFALSE 20165
// begin uc_side = 0 ;
20106: LD_ADDR_OWVAR 20
20110: PUSH
20111: LD_INT 0
20113: ST_TO_ADDR
// uc_nation = nation_nature ;
20114: LD_ADDR_OWVAR 21
20118: PUSH
20119: LD_INT 0
20121: ST_TO_ADDR
// vc_chassis := 31 ;
20122: LD_ADDR_OWVAR 37
20126: PUSH
20127: LD_INT 31
20129: ST_TO_ADDR
// vc_control := control_rider ;
20130: LD_ADDR_OWVAR 38
20134: PUSH
20135: LD_INT 4
20137: ST_TO_ADDR
// un := CreateVehicle ;
20138: LD_ADDR_VAR 0 3
20142: PUSH
20143: CALL_OW 45
20147: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20148: LD_VAR 0 3
20152: PPUSH
20153: LD_INT 33
20155: PPUSH
20156: LD_INT 0
20158: PPUSH
20159: CALL_OW 49
// end ;
20163: GO 20103
20165: POP
20166: POP
// end ; end_of_file
20167: LD_VAR 0 1
20171: RET
// every 0 0$1 do
20172: GO 20174
20174: DISABLE
// begin enable ;
20175: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20176: LD_ADDR_OWVAR 47
20180: PUSH
20181: LD_STRING #Am01-1
20183: PUSH
20184: LD_EXP 7
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20193: LD_ADDR_EXP 7
20197: PUSH
20198: LD_EXP 7
20202: PUSH
20203: LD_INT 35
20205: PLUS
20206: ST_TO_ADDR
// end ; end_of_file
20207: END
// every 0 0$01 do var timer ;
20208: GO 20210
20210: DISABLE
20211: LD_INT 0
20213: PPUSH
// begin timer := 0 0$30 ;
20214: LD_ADDR_VAR 0 1
20218: PUSH
20219: LD_INT 1050
20221: ST_TO_ADDR
// repeat wait ( timer ) ;
20222: LD_VAR 0 1
20226: PPUSH
20227: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20231: LD_EXP 22
20235: PUSH
20236: LD_INT 6
20238: GREATEREQUAL
20239: PUSH
20240: LD_EXP 22
20244: PUSH
20245: LD_INT 12
20247: LESS
20248: AND
20249: IFFALSE 20265
// timer := timer + 0 0$3 ;
20251: LD_ADDR_VAR 0 1
20255: PUSH
20256: LD_VAR 0 1
20260: PUSH
20261: LD_INT 105
20263: PLUS
20264: ST_TO_ADDR
// if cratesSpawned >= 12 then
20265: LD_EXP 22
20269: PUSH
20270: LD_INT 12
20272: GREATEREQUAL
20273: IFFALSE 20289
// timer := timer + 0 0$9 ;
20275: LD_ADDR_VAR 0 1
20279: PUSH
20280: LD_VAR 0 1
20284: PUSH
20285: LD_INT 315
20287: PLUS
20288: ST_TO_ADDR
// if timer > 3 3$00 then
20289: LD_VAR 0 1
20293: PUSH
20294: LD_INT 6300
20296: GREATER
20297: IFFALSE 20307
// timer := 0 0$50 ;
20299: LD_ADDR_VAR 0 1
20303: PUSH
20304: LD_INT 1750
20306: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20307: LD_INT 3
20309: PPUSH
20310: LD_INT 5
20312: PPUSH
20313: CALL_OW 12
20317: PPUSH
20318: LD_INT 46
20320: PPUSH
20321: LD_INT 1
20323: PPUSH
20324: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20328: LD_ADDR_EXP 22
20332: PUSH
20333: LD_EXP 22
20337: PUSH
20338: LD_INT 1
20340: PLUS
20341: ST_TO_ADDR
// until false ;
20342: LD_INT 0
20344: IFFALSE 20222
// end ;
20346: PPOPN 1
20348: END
// every 0 0$5 do
20349: GO 20351
20351: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20352: LD_INT 5
20354: PPUSH
20355: LD_INT 48
20357: PPUSH
20358: LD_INT 1
20360: PPUSH
20361: CALL_OW 55
// wait ( 0 0$40 ) ;
20365: LD_INT 1400
20367: PPUSH
20368: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20372: LD_INT 5
20374: PPUSH
20375: LD_INT 48
20377: PPUSH
20378: LD_INT 1
20380: PPUSH
20381: CALL_OW 55
// end ;
20385: END
// every 10 10$0 do
20386: GO 20388
20388: DISABLE
// begin enable ;
20389: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20390: LD_INT 3
20392: PPUSH
20393: LD_INT 5
20395: PPUSH
20396: CALL_OW 12
20400: PPUSH
20401: LD_INT 48
20403: PPUSH
20404: LD_INT 1
20406: PPUSH
20407: CALL_OW 55
// end ; end_of_file
20411: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20412: LD_INT 0
20414: PPUSH
// uc_side = 1 ;
20415: LD_ADDR_OWVAR 20
20419: PUSH
20420: LD_INT 1
20422: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20423: LD_ADDR_EXP 54
20427: PUSH
20428: LD_STRING Stevens
20430: PPUSH
20431: LD_INT 0
20433: PPUSH
20434: LD_INT 0
20436: PPUSH
20437: CALL 8453 0 3
20441: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20442: LD_EXP 54
20446: PPUSH
20447: LD_VAR 0 1
20451: PPUSH
20452: LD_INT 1
20454: PPUSH
20455: CALL_OW 49
// end ; end_of_file
20459: LD_VAR 0 2
20463: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
20464: LD_INT 0
20466: PPUSH
20467: PPUSH
// if not missionNumber then
20468: LD_VAR 0 2
20472: NOT
20473: IFFALSE 20477
// exit ;
20475: GO 20607
// achiv := false ;
20477: LD_ADDR_VAR 0 7
20481: PUSH
20482: LD_INT 0
20484: ST_TO_ADDR
// case campaignNumber of 1 :
20485: LD_VAR 0 1
20489: PUSH
20490: LD_INT 1
20492: DOUBLE
20493: EQUAL
20494: IFTRUE 20498
20496: GO 20509
20498: POP
// achiv := ACH_GOTA ; 2 :
20499: LD_ADDR_VAR 0 7
20503: PUSH
20504: LD_STRING ACH_GOTA
20506: ST_TO_ADDR
20507: GO 20559
20509: LD_INT 2
20511: DOUBLE
20512: EQUAL
20513: IFTRUE 20517
20515: GO 20520
20517: POP
// ; 3 :
20518: GO 20559
20520: LD_INT 3
20522: DOUBLE
20523: EQUAL
20524: IFTRUE 20528
20526: GO 20539
20528: POP
// achiv := ACH_MOTSU ; 4 :
20529: LD_ADDR_VAR 0 7
20533: PUSH
20534: LD_STRING ACH_MOTSU
20536: ST_TO_ADDR
20537: GO 20559
20539: LD_INT 4
20541: DOUBLE
20542: EQUAL
20543: IFTRUE 20547
20545: GO 20558
20547: POP
// achiv := ACH_LOP ; end ;
20548: LD_ADDR_VAR 0 7
20552: PUSH
20553: LD_STRING ACH_LOP
20555: ST_TO_ADDR
20556: GO 20559
20558: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
20559: LD_OWVAR 67
20563: PUSH
20564: LD_INT 3
20566: EQUAL
20567: PUSH
20568: LD_VAR 0 7
20572: AND
20573: PUSH
20574: LD_VAR 0 3
20578: AND
20579: PUSH
20580: LD_VAR 0 4
20584: AND
20585: PUSH
20586: LD_VAR 0 5
20590: AND
20591: IFFALSE 20607
// SetAchievementEX ( achiv , missionNumber ) ;
20593: LD_VAR 0 7
20597: PPUSH
20598: LD_VAR 0 2
20602: PPUSH
20603: CALL_OW 564
// end ;
20607: LD_VAR 0 6
20611: RET
// export function SA_BehemothConstructed ; begin
20612: LD_INT 0
20614: PPUSH
// SetAchievement ( ACH_SMC ) ;
20615: LD_STRING ACH_SMC
20617: PPUSH
20618: CALL_OW 543
// end ;
20622: LD_VAR 0 1
20626: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
20627: LD_VAR 0 2
20631: PUSH
20632: LD_INT 1
20634: DOUBLE
20635: EQUAL
20636: IFTRUE 20640
20638: GO 20647
20640: POP
// HackUnlimitedResources ; 2 :
20641: CALL 20831 0 0
20645: GO 20828
20647: LD_INT 2
20649: DOUBLE
20650: EQUAL
20651: IFTRUE 20655
20653: GO 20662
20655: POP
// HackSetLevel10 ; 3 :
20656: CALL 20964 0 0
20660: GO 20828
20662: LD_INT 3
20664: DOUBLE
20665: EQUAL
20666: IFTRUE 20670
20668: GO 20677
20670: POP
// HackSetLevel10YourUnits ; 4 :
20671: CALL 21049 0 0
20675: GO 20828
20677: LD_INT 4
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20707
20685: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
20686: LD_VAR 0 3
20690: PPUSH
20691: LD_VAR 0 4
20695: PPUSH
20696: LD_VAR 0 5
20700: PPUSH
20701: CALL 21139 0 3
20705: GO 20828
20707: LD_INT 5
20709: DOUBLE
20710: EQUAL
20711: IFTRUE 20715
20713: GO 20722
20715: POP
// HackSpawnVehicle ; 6 :
20716: CALL 21200 0 0
20720: GO 20828
20722: LD_INT 6
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20737
20730: POP
// HackInvincible ; 7 :
20731: CALL 22275 0 0
20735: GO 20828
20737: LD_INT 7
20739: DOUBLE
20740: EQUAL
20741: IFTRUE 20745
20743: GO 20752
20745: POP
// HackInvisible ; 8 :
20746: CALL 22386 0 0
20750: GO 20828
20752: LD_INT 8
20754: DOUBLE
20755: EQUAL
20756: IFTRUE 20760
20758: GO 20767
20760: POP
// HackChangeYourSide ; 9 :
20761: CALL 22443 0 0
20765: GO 20828
20767: LD_INT 9
20769: DOUBLE
20770: EQUAL
20771: IFTRUE 20775
20773: GO 20782
20775: POP
// HackChangeUnitSide ; 10 :
20776: CALL 22485 0 0
20780: GO 20828
20782: LD_INT 10
20784: DOUBLE
20785: EQUAL
20786: IFTRUE 20790
20788: GO 20797
20790: POP
// HackFog ; 11 :
20791: CALL 22586 0 0
20795: GO 20828
20797: LD_INT 11
20799: DOUBLE
20800: EQUAL
20801: IFTRUE 20805
20803: GO 20812
20805: POP
// HackApeman ; 12 :
20806: CALL 22601 0 0
20810: GO 20828
20812: LD_INT 12
20814: DOUBLE
20815: EQUAL
20816: IFTRUE 20820
20818: GO 20827
20820: POP
// HackBoom ; end ;
20821: CALL 22686 0 0
20825: GO 20828
20827: POP
// end ;
20828: PPOPN 6
20830: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
20831: LD_INT 0
20833: PPUSH
20834: PPUSH
20835: PPUSH
20836: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20837: LD_ADDR_VAR 0 4
20841: PUSH
20842: LD_INT 22
20844: PUSH
20845: LD_OWVAR 2
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 2
20856: PUSH
20857: LD_INT 30
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 30
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PPUSH
20886: CALL_OW 69
20890: ST_TO_ADDR
// if not tmp then
20891: LD_VAR 0 4
20895: NOT
20896: IFFALSE 20900
// exit ;
20898: GO 20959
// for i in tmp do
20900: LD_ADDR_VAR 0 2
20904: PUSH
20905: LD_VAR 0 4
20909: PUSH
20910: FOR_IN
20911: IFFALSE 20957
// for j = 1 to 3 do
20913: LD_ADDR_VAR 0 3
20917: PUSH
20918: DOUBLE
20919: LD_INT 1
20921: DEC
20922: ST_TO_ADDR
20923: LD_INT 3
20925: PUSH
20926: FOR_TO
20927: IFFALSE 20953
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20929: LD_VAR 0 2
20933: PPUSH
20934: CALL_OW 274
20938: PPUSH
20939: LD_VAR 0 3
20943: PPUSH
20944: LD_INT 99999
20946: PPUSH
20947: CALL_OW 277
20951: GO 20926
20953: POP
20954: POP
20955: GO 20910
20957: POP
20958: POP
// end ;
20959: LD_VAR 0 1
20963: RET
// export function HackSetLevel10 ; var i , j ; begin
20964: LD_INT 0
20966: PPUSH
20967: PPUSH
20968: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20969: LD_ADDR_VAR 0 2
20973: PUSH
20974: LD_INT 21
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PPUSH
20984: CALL_OW 69
20988: PUSH
20989: FOR_IN
20990: IFFALSE 21042
// if IsSelected ( i ) then
20992: LD_VAR 0 2
20996: PPUSH
20997: CALL_OW 306
21001: IFFALSE 21040
// begin for j := 1 to 4 do
21003: LD_ADDR_VAR 0 3
21007: PUSH
21008: DOUBLE
21009: LD_INT 1
21011: DEC
21012: ST_TO_ADDR
21013: LD_INT 4
21015: PUSH
21016: FOR_TO
21017: IFFALSE 21038
// SetSkill ( i , j , 10 ) ;
21019: LD_VAR 0 2
21023: PPUSH
21024: LD_VAR 0 3
21028: PPUSH
21029: LD_INT 10
21031: PPUSH
21032: CALL_OW 237
21036: GO 21016
21038: POP
21039: POP
// end ;
21040: GO 20989
21042: POP
21043: POP
// end ;
21044: LD_VAR 0 1
21048: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
21049: LD_INT 0
21051: PPUSH
21052: PPUSH
21053: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21054: LD_ADDR_VAR 0 2
21058: PUSH
21059: LD_INT 22
21061: PUSH
21062: LD_OWVAR 2
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 21
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PPUSH
21085: CALL_OW 69
21089: PUSH
21090: FOR_IN
21091: IFFALSE 21132
// begin for j := 1 to 4 do
21093: LD_ADDR_VAR 0 3
21097: PUSH
21098: DOUBLE
21099: LD_INT 1
21101: DEC
21102: ST_TO_ADDR
21103: LD_INT 4
21105: PUSH
21106: FOR_TO
21107: IFFALSE 21128
// SetSkill ( i , j , 10 ) ;
21109: LD_VAR 0 2
21113: PPUSH
21114: LD_VAR 0 3
21118: PPUSH
21119: LD_INT 10
21121: PPUSH
21122: CALL_OW 237
21126: GO 21106
21128: POP
21129: POP
// end ;
21130: GO 21090
21132: POP
21133: POP
// end ;
21134: LD_VAR 0 1
21138: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
21139: LD_INT 0
21141: PPUSH
// uc_side := your_side ;
21142: LD_ADDR_OWVAR 20
21146: PUSH
21147: LD_OWVAR 2
21151: ST_TO_ADDR
// uc_nation := nation ;
21152: LD_ADDR_OWVAR 21
21156: PUSH
21157: LD_VAR 0 1
21161: ST_TO_ADDR
// InitHc ;
21162: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21166: LD_INT 0
21168: PPUSH
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 3
21178: PPUSH
21179: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
21183: CALL_OW 44
21187: PPUSH
21188: LD_INT 1
21190: PPUSH
21191: CALL_OW 51
// end ;
21195: LD_VAR 0 4
21199: RET
// export function HackSpawnVehicle ; begin
21200: LD_INT 0
21202: PPUSH
// uc_side := your_side ;
21203: LD_ADDR_OWVAR 20
21207: PUSH
21208: LD_OWVAR 2
21212: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
21213: LD_ADDR_OWVAR 21
21217: PUSH
21218: LD_INT 1
21220: PPUSH
21221: LD_INT 3
21223: PPUSH
21224: CALL_OW 12
21228: ST_TO_ADDR
// InitVc ;
21229: CALL_OW 20
// case uc_nation of 1 :
21233: LD_OWVAR 21
21237: PUSH
21238: LD_INT 1
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21553
21246: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
21247: LD_ADDR_OWVAR 37
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: LD_INT 2
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: LD_INT 4
21263: PUSH
21264: LD_INT 5
21266: PUSH
21267: LD_INT 11
21269: PUSH
21270: LD_INT 12
21272: PUSH
21273: LD_INT 13
21275: PUSH
21276: LD_INT 14
21278: PUSH
21279: LD_INT 21
21281: PUSH
21282: LD_INT 22
21284: PUSH
21285: LD_INT 23
21287: PUSH
21288: LD_INT 24
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 1
21308: PPUSH
21309: LD_INT 13
21311: PPUSH
21312: CALL_OW 12
21316: ARRAY
21317: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
21318: LD_ADDR_OWVAR 38
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: LD_INT 3
21328: PUSH
21329: LD_INT 4
21331: PUSH
21332: LD_INT 5
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: PPUSH
21344: LD_INT 4
21346: PPUSH
21347: CALL_OW 12
21351: ARRAY
21352: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
21353: LD_ADDR_OWVAR 39
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 3
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: PPUSH
21375: LD_INT 3
21377: PPUSH
21378: CALL_OW 12
21382: ARRAY
21383: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
21384: LD_ADDR_OWVAR 40
21388: PUSH
21389: LD_INT 14
21391: PUSH
21392: LD_INT 12
21394: PUSH
21395: LD_INT 13
21397: PUSH
21398: LD_INT 5
21400: PUSH
21401: LD_INT 10
21403: PUSH
21404: LD_INT 4
21406: PUSH
21407: LD_INT 6
21409: PUSH
21410: LD_INT 9
21412: PUSH
21413: LD_INT 3
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: LD_INT 11
21421: PUSH
21422: LD_INT 7
21424: PUSH
21425: LD_INT 8
21427: PUSH
21428: LD_INT 15
21430: PUSH
21431: LD_INT 32
21433: PUSH
21434: LD_INT 31
21436: PUSH
21437: LD_INT 24
21439: PUSH
21440: LD_INT 26
21442: PUSH
21443: LD_INT 25
21445: PUSH
21446: LD_INT 27
21448: PUSH
21449: LD_INT 23
21451: PUSH
21452: LD_INT 22
21454: PUSH
21455: LD_INT 30
21457: PUSH
21458: LD_INT 28
21460: PUSH
21461: LD_INT 29
21463: PUSH
21464: LD_INT 53
21466: PUSH
21467: LD_INT 51
21469: PUSH
21470: LD_INT 52
21472: PUSH
21473: LD_INT 43
21475: PUSH
21476: LD_INT 44
21478: PUSH
21479: LD_INT 46
21481: PUSH
21482: LD_INT 42
21484: PUSH
21485: LD_INT 47
21487: PUSH
21488: LD_INT 45
21490: PUSH
21491: LD_INT 48
21493: PUSH
21494: LD_INT 55
21496: PUSH
21497: LD_INT 49
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: PPUSH
21542: LD_INT 37
21544: PPUSH
21545: CALL_OW 12
21549: ARRAY
21550: ST_TO_ADDR
// end ; 2 :
21551: GO 22184
21553: LD_INT 2
21555: DOUBLE
21556: EQUAL
21557: IFTRUE 21561
21559: GO 21868
21561: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
21562: LD_ADDR_OWVAR 37
21566: PUSH
21567: LD_INT 1
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: LD_INT 3
21575: PUSH
21576: LD_INT 4
21578: PUSH
21579: LD_INT 5
21581: PUSH
21582: LD_INT 11
21584: PUSH
21585: LD_INT 12
21587: PUSH
21588: LD_INT 13
21590: PUSH
21591: LD_INT 14
21593: PUSH
21594: LD_INT 21
21596: PUSH
21597: LD_INT 22
21599: PUSH
21600: LD_INT 23
21602: PUSH
21603: LD_INT 24
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 1
21623: PPUSH
21624: LD_INT 13
21626: PPUSH
21627: CALL_OW 12
21631: ARRAY
21632: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
21633: LD_ADDR_OWVAR 38
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: LD_INT 3
21643: PUSH
21644: LD_INT 4
21646: PUSH
21647: LD_INT 5
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: PPUSH
21659: LD_INT 4
21661: PPUSH
21662: CALL_OW 12
21666: ARRAY
21667: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
21668: LD_ADDR_OWVAR 39
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: LD_INT 3
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: PPUSH
21690: LD_INT 3
21692: PPUSH
21693: CALL_OW 12
21697: ARRAY
21698: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
21699: LD_ADDR_OWVAR 40
21703: PUSH
21704: LD_INT 14
21706: PUSH
21707: LD_INT 12
21709: PUSH
21710: LD_INT 13
21712: PUSH
21713: LD_INT 5
21715: PUSH
21716: LD_INT 10
21718: PUSH
21719: LD_INT 4
21721: PUSH
21722: LD_INT 6
21724: PUSH
21725: LD_INT 9
21727: PUSH
21728: LD_INT 3
21730: PUSH
21731: LD_INT 2
21733: PUSH
21734: LD_INT 11
21736: PUSH
21737: LD_INT 7
21739: PUSH
21740: LD_INT 8
21742: PUSH
21743: LD_INT 15
21745: PUSH
21746: LD_INT 32
21748: PUSH
21749: LD_INT 31
21751: PUSH
21752: LD_INT 24
21754: PUSH
21755: LD_INT 26
21757: PUSH
21758: LD_INT 25
21760: PUSH
21761: LD_INT 27
21763: PUSH
21764: LD_INT 23
21766: PUSH
21767: LD_INT 22
21769: PUSH
21770: LD_INT 30
21772: PUSH
21773: LD_INT 28
21775: PUSH
21776: LD_INT 29
21778: PUSH
21779: LD_INT 53
21781: PUSH
21782: LD_INT 51
21784: PUSH
21785: LD_INT 52
21787: PUSH
21788: LD_INT 43
21790: PUSH
21791: LD_INT 44
21793: PUSH
21794: LD_INT 46
21796: PUSH
21797: LD_INT 42
21799: PUSH
21800: LD_INT 47
21802: PUSH
21803: LD_INT 45
21805: PUSH
21806: LD_INT 48
21808: PUSH
21809: LD_INT 55
21811: PUSH
21812: LD_INT 49
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: PPUSH
21857: LD_INT 37
21859: PPUSH
21860: CALL_OW 12
21864: ARRAY
21865: ST_TO_ADDR
// end ; 3 :
21866: GO 22184
21868: LD_INT 3
21870: DOUBLE
21871: EQUAL
21872: IFTRUE 21876
21874: GO 22183
21876: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
21877: LD_ADDR_OWVAR 37
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: LD_INT 2
21887: PUSH
21888: LD_INT 3
21890: PUSH
21891: LD_INT 4
21893: PUSH
21894: LD_INT 5
21896: PUSH
21897: LD_INT 11
21899: PUSH
21900: LD_INT 12
21902: PUSH
21903: LD_INT 13
21905: PUSH
21906: LD_INT 14
21908: PUSH
21909: LD_INT 21
21911: PUSH
21912: LD_INT 22
21914: PUSH
21915: LD_INT 23
21917: PUSH
21918: LD_INT 24
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: PPUSH
21939: LD_INT 13
21941: PPUSH
21942: CALL_OW 12
21946: ARRAY
21947: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
21948: LD_ADDR_OWVAR 38
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: LD_INT 3
21958: PUSH
21959: LD_INT 4
21961: PUSH
21962: LD_INT 5
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: PPUSH
21974: LD_INT 4
21976: PPUSH
21977: CALL_OW 12
21981: ARRAY
21982: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
21983: LD_ADDR_OWVAR 39
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: LD_INT 3
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: PPUSH
22005: LD_INT 3
22007: PPUSH
22008: CALL_OW 12
22012: ARRAY
22013: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
22014: LD_ADDR_OWVAR 40
22018: PUSH
22019: LD_INT 14
22021: PUSH
22022: LD_INT 12
22024: PUSH
22025: LD_INT 13
22027: PUSH
22028: LD_INT 5
22030: PUSH
22031: LD_INT 10
22033: PUSH
22034: LD_INT 4
22036: PUSH
22037: LD_INT 6
22039: PUSH
22040: LD_INT 9
22042: PUSH
22043: LD_INT 3
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: LD_INT 11
22051: PUSH
22052: LD_INT 7
22054: PUSH
22055: LD_INT 8
22057: PUSH
22058: LD_INT 15
22060: PUSH
22061: LD_INT 32
22063: PUSH
22064: LD_INT 31
22066: PUSH
22067: LD_INT 24
22069: PUSH
22070: LD_INT 26
22072: PUSH
22073: LD_INT 25
22075: PUSH
22076: LD_INT 27
22078: PUSH
22079: LD_INT 23
22081: PUSH
22082: LD_INT 22
22084: PUSH
22085: LD_INT 30
22087: PUSH
22088: LD_INT 28
22090: PUSH
22091: LD_INT 29
22093: PUSH
22094: LD_INT 53
22096: PUSH
22097: LD_INT 51
22099: PUSH
22100: LD_INT 52
22102: PUSH
22103: LD_INT 43
22105: PUSH
22106: LD_INT 44
22108: PUSH
22109: LD_INT 46
22111: PUSH
22112: LD_INT 42
22114: PUSH
22115: LD_INT 47
22117: PUSH
22118: LD_INT 45
22120: PUSH
22121: LD_INT 48
22123: PUSH
22124: LD_INT 55
22126: PUSH
22127: LD_INT 49
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 1
22171: PPUSH
22172: LD_INT 37
22174: PPUSH
22175: CALL_OW 12
22179: ARRAY
22180: ST_TO_ADDR
// end ; end ;
22181: GO 22184
22183: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22184: CALL_OW 45
22188: PPUSH
22189: LD_INT 1
22191: PPUSH
22192: CALL_OW 51
// end ;
22196: LD_VAR 0 1
22200: RET
// export invincible ; every 1 do
22201: GO 22203
22203: DISABLE
// invincible := [ ] ;
22204: LD_ADDR_EXP 55
22208: PUSH
22209: EMPTY
22210: ST_TO_ADDR
22211: END
// every 10 do var i ;
22212: GO 22214
22214: DISABLE
22215: LD_INT 0
22217: PPUSH
// begin enable ;
22218: ENABLE
// if not invincible then
22219: LD_EXP 55
22223: NOT
22224: IFFALSE 22228
// exit ;
22226: GO 22272
// for i in invincible do
22228: LD_ADDR_VAR 0 1
22232: PUSH
22233: LD_EXP 55
22237: PUSH
22238: FOR_IN
22239: IFFALSE 22270
// if GetLives ( i ) < 1000 then
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL_OW 256
22250: PUSH
22251: LD_INT 1000
22253: LESS
22254: IFFALSE 22268
// SetLives ( i , 1000 ) ;
22256: LD_VAR 0 1
22260: PPUSH
22261: LD_INT 1000
22263: PPUSH
22264: CALL_OW 234
22268: GO 22238
22270: POP
22271: POP
// end ;
22272: PPOPN 1
22274: END
// export function HackInvincible ; var i ; begin
22275: LD_INT 0
22277: PPUSH
22278: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22279: LD_ADDR_VAR 0 2
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: LD_INT 21
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 21
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: PPUSH
22312: CALL_OW 69
22316: PUSH
22317: FOR_IN
22318: IFFALSE 22379
// if IsSelected ( i ) then
22320: LD_VAR 0 2
22324: PPUSH
22325: CALL_OW 306
22329: IFFALSE 22377
// begin if i in invincible then
22331: LD_VAR 0 2
22335: PUSH
22336: LD_EXP 55
22340: IN
22341: IFFALSE 22361
// invincible := invincible diff i else
22343: LD_ADDR_EXP 55
22347: PUSH
22348: LD_EXP 55
22352: PUSH
22353: LD_VAR 0 2
22357: DIFF
22358: ST_TO_ADDR
22359: GO 22377
// invincible := invincible union i ;
22361: LD_ADDR_EXP 55
22365: PUSH
22366: LD_EXP 55
22370: PUSH
22371: LD_VAR 0 2
22375: UNION
22376: ST_TO_ADDR
// end ;
22377: GO 22317
22379: POP
22380: POP
// end ;
22381: LD_VAR 0 1
22385: RET
// export function HackInvisible ; var i , j ; begin
22386: LD_INT 0
22388: PPUSH
22389: PPUSH
22390: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22391: LD_ADDR_VAR 0 2
22395: PUSH
22396: LD_INT 21
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 69
22410: PUSH
22411: FOR_IN
22412: IFFALSE 22436
// if IsSelected ( i ) then
22414: LD_VAR 0 2
22418: PPUSH
22419: CALL_OW 306
22423: IFFALSE 22434
// begin ComForceInvisible ( i ) ;
22425: LD_VAR 0 2
22429: PPUSH
22430: CALL_OW 496
// end ;
22434: GO 22411
22436: POP
22437: POP
// end ;
22438: LD_VAR 0 1
22442: RET
// export function HackChangeYourSide ; begin
22443: LD_INT 0
22445: PPUSH
// if your_side = 8 then
22446: LD_OWVAR 2
22450: PUSH
22451: LD_INT 8
22453: EQUAL
22454: IFFALSE 22466
// your_side := 0 else
22456: LD_ADDR_OWVAR 2
22460: PUSH
22461: LD_INT 0
22463: ST_TO_ADDR
22464: GO 22480
// your_side := your_side + 1 ;
22466: LD_ADDR_OWVAR 2
22470: PUSH
22471: LD_OWVAR 2
22475: PUSH
22476: LD_INT 1
22478: PLUS
22479: ST_TO_ADDR
// end ;
22480: LD_VAR 0 1
22484: RET
// export function HackChangeUnitSide ; var i , j ; begin
22485: LD_INT 0
22487: PPUSH
22488: PPUSH
22489: PPUSH
// for i in all_units do
22490: LD_ADDR_VAR 0 2
22494: PUSH
22495: LD_OWVAR 3
22499: PUSH
22500: FOR_IN
22501: IFFALSE 22579
// if IsSelected ( i ) then
22503: LD_VAR 0 2
22507: PPUSH
22508: CALL_OW 306
22512: IFFALSE 22577
// begin j := GetSide ( i ) ;
22514: LD_ADDR_VAR 0 3
22518: PUSH
22519: LD_VAR 0 2
22523: PPUSH
22524: CALL_OW 255
22528: ST_TO_ADDR
// if j = 8 then
22529: LD_VAR 0 3
22533: PUSH
22534: LD_INT 8
22536: EQUAL
22537: IFFALSE 22549
// j := 0 else
22539: LD_ADDR_VAR 0 3
22543: PUSH
22544: LD_INT 0
22546: ST_TO_ADDR
22547: GO 22563
// j := j + 1 ;
22549: LD_ADDR_VAR 0 3
22553: PUSH
22554: LD_VAR 0 3
22558: PUSH
22559: LD_INT 1
22561: PLUS
22562: ST_TO_ADDR
// SetSide ( i , j ) ;
22563: LD_VAR 0 2
22567: PPUSH
22568: LD_VAR 0 3
22572: PPUSH
22573: CALL_OW 235
// end ;
22577: GO 22500
22579: POP
22580: POP
// end ;
22581: LD_VAR 0 1
22585: RET
// export function HackFog ; begin
22586: LD_INT 0
22588: PPUSH
// FogOff ( true ) ;
22589: LD_INT 1
22591: PPUSH
22592: CALL_OW 344
// end ;
22596: LD_VAR 0 1
22600: RET
// export function HackApeman ; begin
22601: LD_INT 0
22603: PPUSH
// uc_side := your_side ;
22604: LD_ADDR_OWVAR 20
22608: PUSH
22609: LD_OWVAR 2
22613: ST_TO_ADDR
// uc_nation := 0 ;
22614: LD_ADDR_OWVAR 21
22618: PUSH
22619: LD_INT 0
22621: ST_TO_ADDR
// hc_name :=  ;
22622: LD_ADDR_OWVAR 26
22626: PUSH
22627: LD_STRING 
22629: ST_TO_ADDR
// hc_gallery :=  ;
22630: LD_ADDR_OWVAR 33
22634: PUSH
22635: LD_STRING 
22637: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
22638: LD_ADDR_OWVAR 31
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: ST_TO_ADDR
// hc_class := class_apeman ;
22661: LD_ADDR_OWVAR 28
22665: PUSH
22666: LD_INT 12
22668: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
22669: CALL_OW 44
22673: PPUSH
22674: LD_INT 1
22676: PPUSH
22677: CALL_OW 51
// end ;
22681: LD_VAR 0 1
22685: RET
// export function HackBoom ; begin
22686: LD_INT 0
22688: PPUSH
// uc_side := your_side ;
22689: LD_ADDR_OWVAR 20
22693: PUSH
22694: LD_OWVAR 2
22698: ST_TO_ADDR
// uc_nation := 1 ;
22699: LD_ADDR_OWVAR 21
22703: PUSH
22704: LD_INT 1
22706: ST_TO_ADDR
// vc_chassis := us_morphling ;
22707: LD_ADDR_OWVAR 37
22711: PUSH
22712: LD_INT 5
22714: ST_TO_ADDR
// vc_engine := engine_siberite ;
22715: LD_ADDR_OWVAR 39
22719: PUSH
22720: LD_INT 3
22722: ST_TO_ADDR
// vc_control := control_computer ;
22723: LD_ADDR_OWVAR 38
22727: PUSH
22728: LD_INT 3
22730: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
22731: LD_ADDR_OWVAR 40
22735: PUSH
22736: LD_INT 8
22738: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22739: CALL_OW 45
22743: PPUSH
22744: LD_INT 1
22746: PPUSH
22747: CALL_OW 51
// end ; end_of_file
22751: LD_VAR 0 1
22755: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22756: LD_INT 0
22758: PPUSH
22759: PPUSH
// if exist_mode then
22760: LD_VAR 0 2
22764: IFFALSE 22789
// unit := CreateCharacter ( prefix & ident ) else
22766: LD_ADDR_VAR 0 5
22770: PUSH
22771: LD_VAR 0 3
22775: PUSH
22776: LD_VAR 0 1
22780: STR
22781: PPUSH
22782: CALL_OW 34
22786: ST_TO_ADDR
22787: GO 22804
// unit := NewCharacter ( ident ) ;
22789: LD_ADDR_VAR 0 5
22793: PUSH
22794: LD_VAR 0 1
22798: PPUSH
22799: CALL_OW 25
22803: ST_TO_ADDR
// result := unit ;
22804: LD_ADDR_VAR 0 4
22808: PUSH
22809: LD_VAR 0 5
22813: ST_TO_ADDR
// end ;
22814: LD_VAR 0 4
22818: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22819: LD_INT 0
22821: PPUSH
22822: PPUSH
// if not side or not nation then
22823: LD_VAR 0 1
22827: NOT
22828: PUSH
22829: LD_VAR 0 2
22833: NOT
22834: OR
22835: IFFALSE 22839
// exit ;
22837: GO 23603
// case nation of nation_american :
22839: LD_VAR 0 2
22843: PUSH
22844: LD_INT 1
22846: DOUBLE
22847: EQUAL
22848: IFTRUE 22852
22850: GO 23066
22852: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22853: LD_ADDR_VAR 0 4
22857: PUSH
22858: LD_INT 35
22860: PUSH
22861: LD_INT 45
22863: PUSH
22864: LD_INT 46
22866: PUSH
22867: LD_INT 47
22869: PUSH
22870: LD_INT 82
22872: PUSH
22873: LD_INT 83
22875: PUSH
22876: LD_INT 84
22878: PUSH
22879: LD_INT 85
22881: PUSH
22882: LD_INT 86
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 6
22893: PUSH
22894: LD_INT 15
22896: PUSH
22897: LD_INT 16
22899: PUSH
22900: LD_INT 7
22902: PUSH
22903: LD_INT 12
22905: PUSH
22906: LD_INT 13
22908: PUSH
22909: LD_INT 10
22911: PUSH
22912: LD_INT 14
22914: PUSH
22915: LD_INT 20
22917: PUSH
22918: LD_INT 21
22920: PUSH
22921: LD_INT 22
22923: PUSH
22924: LD_INT 25
22926: PUSH
22927: LD_INT 32
22929: PUSH
22930: LD_INT 27
22932: PUSH
22933: LD_INT 36
22935: PUSH
22936: LD_INT 69
22938: PUSH
22939: LD_INT 39
22941: PUSH
22942: LD_INT 34
22944: PUSH
22945: LD_INT 40
22947: PUSH
22948: LD_INT 48
22950: PUSH
22951: LD_INT 49
22953: PUSH
22954: LD_INT 50
22956: PUSH
22957: LD_INT 51
22959: PUSH
22960: LD_INT 52
22962: PUSH
22963: LD_INT 53
22965: PUSH
22966: LD_INT 54
22968: PUSH
22969: LD_INT 55
22971: PUSH
22972: LD_INT 56
22974: PUSH
22975: LD_INT 57
22977: PUSH
22978: LD_INT 58
22980: PUSH
22981: LD_INT 59
22983: PUSH
22984: LD_INT 60
22986: PUSH
22987: LD_INT 61
22989: PUSH
22990: LD_INT 62
22992: PUSH
22993: LD_INT 80
22995: PUSH
22996: LD_INT 82
22998: PUSH
22999: LD_INT 83
23001: PUSH
23002: LD_INT 84
23004: PUSH
23005: LD_INT 85
23007: PUSH
23008: LD_INT 86
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: ST_TO_ADDR
23064: GO 23527
23066: LD_INT 2
23068: DOUBLE
23069: EQUAL
23070: IFTRUE 23074
23072: GO 23296
23074: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
23075: LD_ADDR_VAR 0 4
23079: PUSH
23080: LD_INT 35
23082: PUSH
23083: LD_INT 45
23085: PUSH
23086: LD_INT 46
23088: PUSH
23089: LD_INT 47
23091: PUSH
23092: LD_INT 82
23094: PUSH
23095: LD_INT 83
23097: PUSH
23098: LD_INT 84
23100: PUSH
23101: LD_INT 85
23103: PUSH
23104: LD_INT 87
23106: PUSH
23107: LD_INT 70
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: LD_INT 11
23115: PUSH
23116: LD_INT 3
23118: PUSH
23119: LD_INT 4
23121: PUSH
23122: LD_INT 5
23124: PUSH
23125: LD_INT 6
23127: PUSH
23128: LD_INT 15
23130: PUSH
23131: LD_INT 18
23133: PUSH
23134: LD_INT 7
23136: PUSH
23137: LD_INT 17
23139: PUSH
23140: LD_INT 8
23142: PUSH
23143: LD_INT 20
23145: PUSH
23146: LD_INT 21
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 72
23154: PUSH
23155: LD_INT 26
23157: PUSH
23158: LD_INT 69
23160: PUSH
23161: LD_INT 39
23163: PUSH
23164: LD_INT 40
23166: PUSH
23167: LD_INT 41
23169: PUSH
23170: LD_INT 42
23172: PUSH
23173: LD_INT 43
23175: PUSH
23176: LD_INT 48
23178: PUSH
23179: LD_INT 49
23181: PUSH
23182: LD_INT 50
23184: PUSH
23185: LD_INT 51
23187: PUSH
23188: LD_INT 52
23190: PUSH
23191: LD_INT 53
23193: PUSH
23194: LD_INT 54
23196: PUSH
23197: LD_INT 55
23199: PUSH
23200: LD_INT 56
23202: PUSH
23203: LD_INT 60
23205: PUSH
23206: LD_INT 61
23208: PUSH
23209: LD_INT 62
23211: PUSH
23212: LD_INT 66
23214: PUSH
23215: LD_INT 67
23217: PUSH
23218: LD_INT 68
23220: PUSH
23221: LD_INT 81
23223: PUSH
23224: LD_INT 82
23226: PUSH
23227: LD_INT 83
23229: PUSH
23230: LD_INT 84
23232: PUSH
23233: LD_INT 85
23235: PUSH
23236: LD_INT 87
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: ST_TO_ADDR
23294: GO 23527
23296: LD_INT 3
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23526
23304: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23305: LD_ADDR_VAR 0 4
23309: PUSH
23310: LD_INT 46
23312: PUSH
23313: LD_INT 47
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: LD_INT 82
23324: PUSH
23325: LD_INT 83
23327: PUSH
23328: LD_INT 84
23330: PUSH
23331: LD_INT 85
23333: PUSH
23334: LD_INT 86
23336: PUSH
23337: LD_INT 11
23339: PUSH
23340: LD_INT 9
23342: PUSH
23343: LD_INT 20
23345: PUSH
23346: LD_INT 19
23348: PUSH
23349: LD_INT 21
23351: PUSH
23352: LD_INT 24
23354: PUSH
23355: LD_INT 22
23357: PUSH
23358: LD_INT 25
23360: PUSH
23361: LD_INT 28
23363: PUSH
23364: LD_INT 29
23366: PUSH
23367: LD_INT 30
23369: PUSH
23370: LD_INT 31
23372: PUSH
23373: LD_INT 37
23375: PUSH
23376: LD_INT 38
23378: PUSH
23379: LD_INT 32
23381: PUSH
23382: LD_INT 27
23384: PUSH
23385: LD_INT 33
23387: PUSH
23388: LD_INT 69
23390: PUSH
23391: LD_INT 39
23393: PUSH
23394: LD_INT 34
23396: PUSH
23397: LD_INT 40
23399: PUSH
23400: LD_INT 71
23402: PUSH
23403: LD_INT 23
23405: PUSH
23406: LD_INT 44
23408: PUSH
23409: LD_INT 48
23411: PUSH
23412: LD_INT 49
23414: PUSH
23415: LD_INT 50
23417: PUSH
23418: LD_INT 51
23420: PUSH
23421: LD_INT 52
23423: PUSH
23424: LD_INT 53
23426: PUSH
23427: LD_INT 54
23429: PUSH
23430: LD_INT 55
23432: PUSH
23433: LD_INT 56
23435: PUSH
23436: LD_INT 57
23438: PUSH
23439: LD_INT 58
23441: PUSH
23442: LD_INT 59
23444: PUSH
23445: LD_INT 63
23447: PUSH
23448: LD_INT 64
23450: PUSH
23451: LD_INT 65
23453: PUSH
23454: LD_INT 82
23456: PUSH
23457: LD_INT 83
23459: PUSH
23460: LD_INT 84
23462: PUSH
23463: LD_INT 85
23465: PUSH
23466: LD_INT 86
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: ST_TO_ADDR
23524: GO 23527
23526: POP
// if state > - 1 and state < 3 then
23527: LD_VAR 0 3
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: GREATER
23536: PUSH
23537: LD_VAR 0 3
23541: PUSH
23542: LD_INT 3
23544: LESS
23545: AND
23546: IFFALSE 23603
// for i in result do
23548: LD_ADDR_VAR 0 5
23552: PUSH
23553: LD_VAR 0 4
23557: PUSH
23558: FOR_IN
23559: IFFALSE 23601
// if GetTech ( i , side ) <> state then
23561: LD_VAR 0 5
23565: PPUSH
23566: LD_VAR 0 1
23570: PPUSH
23571: CALL_OW 321
23575: PUSH
23576: LD_VAR 0 3
23580: NONEQUAL
23581: IFFALSE 23599
// result := result diff i ;
23583: LD_ADDR_VAR 0 4
23587: PUSH
23588: LD_VAR 0 4
23592: PUSH
23593: LD_VAR 0 5
23597: DIFF
23598: ST_TO_ADDR
23599: GO 23558
23601: POP
23602: POP
// end ;
23603: LD_VAR 0 4
23607: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23608: LD_INT 0
23610: PPUSH
23611: PPUSH
23612: PPUSH
// result := true ;
23613: LD_ADDR_VAR 0 3
23617: PUSH
23618: LD_INT 1
23620: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23621: LD_ADDR_VAR 0 5
23625: PUSH
23626: LD_VAR 0 2
23630: PPUSH
23631: CALL_OW 480
23635: ST_TO_ADDR
// if not tmp then
23636: LD_VAR 0 5
23640: NOT
23641: IFFALSE 23645
// exit ;
23643: GO 23694
// for i in tmp do
23645: LD_ADDR_VAR 0 4
23649: PUSH
23650: LD_VAR 0 5
23654: PUSH
23655: FOR_IN
23656: IFFALSE 23692
// if GetTech ( i , side ) <> state_researched then
23658: LD_VAR 0 4
23662: PPUSH
23663: LD_VAR 0 1
23667: PPUSH
23668: CALL_OW 321
23672: PUSH
23673: LD_INT 2
23675: NONEQUAL
23676: IFFALSE 23690
// begin result := false ;
23678: LD_ADDR_VAR 0 3
23682: PUSH
23683: LD_INT 0
23685: ST_TO_ADDR
// exit ;
23686: POP
23687: POP
23688: GO 23694
// end ;
23690: GO 23655
23692: POP
23693: POP
// end ;
23694: LD_VAR 0 3
23698: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23699: LD_INT 0
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23714: LD_VAR 0 1
23718: NOT
23719: PUSH
23720: LD_VAR 0 1
23724: PPUSH
23725: CALL_OW 257
23729: PUSH
23730: LD_INT 9
23732: NONEQUAL
23733: OR
23734: IFFALSE 23738
// exit ;
23736: GO 24311
// side := GetSide ( unit ) ;
23738: LD_ADDR_VAR 0 9
23742: PUSH
23743: LD_VAR 0 1
23747: PPUSH
23748: CALL_OW 255
23752: ST_TO_ADDR
// tech_space := tech_spacanom ;
23753: LD_ADDR_VAR 0 12
23757: PUSH
23758: LD_INT 29
23760: ST_TO_ADDR
// tech_time := tech_taurad ;
23761: LD_ADDR_VAR 0 13
23765: PUSH
23766: LD_INT 28
23768: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23769: LD_ADDR_VAR 0 11
23773: PUSH
23774: LD_VAR 0 1
23778: PPUSH
23779: CALL_OW 310
23783: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23784: LD_VAR 0 11
23788: PPUSH
23789: CALL_OW 247
23793: PUSH
23794: LD_INT 2
23796: EQUAL
23797: IFFALSE 23801
// exit ;
23799: GO 24311
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23801: LD_ADDR_VAR 0 8
23805: PUSH
23806: LD_INT 81
23808: PUSH
23809: LD_VAR 0 9
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 3
23820: PUSH
23821: LD_INT 21
23823: PUSH
23824: LD_INT 3
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PPUSH
23839: CALL_OW 69
23843: ST_TO_ADDR
// if not tmp then
23844: LD_VAR 0 8
23848: NOT
23849: IFFALSE 23853
// exit ;
23851: GO 24311
// if in_unit then
23853: LD_VAR 0 11
23857: IFFALSE 23881
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23859: LD_ADDR_VAR 0 10
23863: PUSH
23864: LD_VAR 0 8
23868: PPUSH
23869: LD_VAR 0 11
23873: PPUSH
23874: CALL_OW 74
23878: ST_TO_ADDR
23879: GO 23901
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23881: LD_ADDR_VAR 0 10
23885: PUSH
23886: LD_VAR 0 8
23890: PPUSH
23891: LD_VAR 0 1
23895: PPUSH
23896: CALL_OW 74
23900: ST_TO_ADDR
// if not enemy then
23901: LD_VAR 0 10
23905: NOT
23906: IFFALSE 23910
// exit ;
23908: GO 24311
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23910: LD_VAR 0 11
23914: PUSH
23915: LD_VAR 0 11
23919: PPUSH
23920: LD_VAR 0 10
23924: PPUSH
23925: CALL_OW 296
23929: PUSH
23930: LD_INT 13
23932: GREATER
23933: AND
23934: PUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: LD_VAR 0 10
23944: PPUSH
23945: CALL_OW 296
23949: PUSH
23950: LD_INT 12
23952: GREATER
23953: OR
23954: IFFALSE 23958
// exit ;
23956: GO 24311
// missile := [ 1 ] ;
23958: LD_ADDR_VAR 0 14
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: EMPTY
23967: LIST
23968: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23969: LD_VAR 0 9
23973: PPUSH
23974: LD_VAR 0 12
23978: PPUSH
23979: CALL_OW 325
23983: IFFALSE 24012
// missile := Insert ( missile , missile + 1 , 2 ) ;
23985: LD_ADDR_VAR 0 14
23989: PUSH
23990: LD_VAR 0 14
23994: PPUSH
23995: LD_VAR 0 14
23999: PUSH
24000: LD_INT 1
24002: PLUS
24003: PPUSH
24004: LD_INT 2
24006: PPUSH
24007: CALL_OW 2
24011: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24012: LD_VAR 0 9
24016: PPUSH
24017: LD_VAR 0 13
24021: PPUSH
24022: CALL_OW 325
24026: PUSH
24027: LD_VAR 0 10
24031: PPUSH
24032: CALL_OW 255
24036: PPUSH
24037: LD_VAR 0 13
24041: PPUSH
24042: CALL_OW 325
24046: NOT
24047: AND
24048: IFFALSE 24077
// missile := Insert ( missile , missile + 1 , 3 ) ;
24050: LD_ADDR_VAR 0 14
24054: PUSH
24055: LD_VAR 0 14
24059: PPUSH
24060: LD_VAR 0 14
24064: PUSH
24065: LD_INT 1
24067: PLUS
24068: PPUSH
24069: LD_INT 3
24071: PPUSH
24072: CALL_OW 2
24076: ST_TO_ADDR
// if missile < 2 then
24077: LD_VAR 0 14
24081: PUSH
24082: LD_INT 2
24084: LESS
24085: IFFALSE 24089
// exit ;
24087: GO 24311
// x := GetX ( enemy ) ;
24089: LD_ADDR_VAR 0 4
24093: PUSH
24094: LD_VAR 0 10
24098: PPUSH
24099: CALL_OW 250
24103: ST_TO_ADDR
// y := GetY ( enemy ) ;
24104: LD_ADDR_VAR 0 5
24108: PUSH
24109: LD_VAR 0 10
24113: PPUSH
24114: CALL_OW 251
24118: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24119: LD_ADDR_VAR 0 6
24123: PUSH
24124: LD_VAR 0 4
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PPUSH
24133: LD_INT 1
24135: PPUSH
24136: CALL_OW 12
24140: PLUS
24141: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24142: LD_ADDR_VAR 0 7
24146: PUSH
24147: LD_VAR 0 5
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PPUSH
24156: LD_INT 1
24158: PPUSH
24159: CALL_OW 12
24163: PLUS
24164: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24165: LD_VAR 0 6
24169: PPUSH
24170: LD_VAR 0 7
24174: PPUSH
24175: CALL_OW 488
24179: NOT
24180: IFFALSE 24202
// begin _x := x ;
24182: LD_ADDR_VAR 0 6
24186: PUSH
24187: LD_VAR 0 4
24191: ST_TO_ADDR
// _y := y ;
24192: LD_ADDR_VAR 0 7
24196: PUSH
24197: LD_VAR 0 5
24201: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24202: LD_ADDR_VAR 0 3
24206: PUSH
24207: LD_INT 1
24209: PPUSH
24210: LD_VAR 0 14
24214: PPUSH
24215: CALL_OW 12
24219: ST_TO_ADDR
// case i of 1 :
24220: LD_VAR 0 3
24224: PUSH
24225: LD_INT 1
24227: DOUBLE
24228: EQUAL
24229: IFTRUE 24233
24231: GO 24250
24233: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24234: LD_VAR 0 1
24238: PPUSH
24239: LD_VAR 0 10
24243: PPUSH
24244: CALL_OW 115
24248: GO 24311
24250: LD_INT 2
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24280
24258: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24259: LD_VAR 0 1
24263: PPUSH
24264: LD_VAR 0 6
24268: PPUSH
24269: LD_VAR 0 7
24273: PPUSH
24274: CALL_OW 153
24278: GO 24311
24280: LD_INT 3
24282: DOUBLE
24283: EQUAL
24284: IFTRUE 24288
24286: GO 24310
24288: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24289: LD_VAR 0 1
24293: PPUSH
24294: LD_VAR 0 6
24298: PPUSH
24299: LD_VAR 0 7
24303: PPUSH
24304: CALL_OW 154
24308: GO 24311
24310: POP
// end ;
24311: LD_VAR 0 2
24315: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24316: LD_INT 0
24318: PPUSH
24319: PPUSH
24320: PPUSH
24321: PPUSH
24322: PPUSH
24323: PPUSH
// if not unit or not building then
24324: LD_VAR 0 1
24328: NOT
24329: PUSH
24330: LD_VAR 0 2
24334: NOT
24335: OR
24336: IFFALSE 24340
// exit ;
24338: GO 24498
// x := GetX ( building ) ;
24340: LD_ADDR_VAR 0 5
24344: PUSH
24345: LD_VAR 0 2
24349: PPUSH
24350: CALL_OW 250
24354: ST_TO_ADDR
// y := GetY ( building ) ;
24355: LD_ADDR_VAR 0 6
24359: PUSH
24360: LD_VAR 0 2
24364: PPUSH
24365: CALL_OW 251
24369: ST_TO_ADDR
// for i = 0 to 5 do
24370: LD_ADDR_VAR 0 4
24374: PUSH
24375: DOUBLE
24376: LD_INT 0
24378: DEC
24379: ST_TO_ADDR
24380: LD_INT 5
24382: PUSH
24383: FOR_TO
24384: IFFALSE 24496
// begin _x := ShiftX ( x , i , 3 ) ;
24386: LD_ADDR_VAR 0 7
24390: PUSH
24391: LD_VAR 0 5
24395: PPUSH
24396: LD_VAR 0 4
24400: PPUSH
24401: LD_INT 3
24403: PPUSH
24404: CALL_OW 272
24408: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24409: LD_ADDR_VAR 0 8
24413: PUSH
24414: LD_VAR 0 6
24418: PPUSH
24419: LD_VAR 0 4
24423: PPUSH
24424: LD_INT 3
24426: PPUSH
24427: CALL_OW 273
24431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24432: LD_VAR 0 7
24436: PPUSH
24437: LD_VAR 0 8
24441: PPUSH
24442: CALL_OW 488
24446: NOT
24447: IFFALSE 24451
// continue ;
24449: GO 24383
// if HexInfo ( _x , _y ) = 0 then
24451: LD_VAR 0 7
24455: PPUSH
24456: LD_VAR 0 8
24460: PPUSH
24461: CALL_OW 428
24465: PUSH
24466: LD_INT 0
24468: EQUAL
24469: IFFALSE 24494
// begin ComMoveXY ( unit , _x , _y ) ;
24471: LD_VAR 0 1
24475: PPUSH
24476: LD_VAR 0 7
24480: PPUSH
24481: LD_VAR 0 8
24485: PPUSH
24486: CALL_OW 111
// exit ;
24490: POP
24491: POP
24492: GO 24498
// end ; end ;
24494: GO 24383
24496: POP
24497: POP
// end ;
24498: LD_VAR 0 3
24502: RET
// export function ScanBase ( side , base_area ) ; begin
24503: LD_INT 0
24505: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24506: LD_ADDR_VAR 0 3
24510: PUSH
24511: LD_VAR 0 2
24515: PPUSH
24516: LD_INT 81
24518: PUSH
24519: LD_VAR 0 1
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PPUSH
24528: CALL_OW 70
24532: ST_TO_ADDR
// end ;
24533: LD_VAR 0 3
24537: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24538: LD_INT 0
24540: PPUSH
24541: PPUSH
24542: PPUSH
24543: PPUSH
// result := false ;
24544: LD_ADDR_VAR 0 2
24548: PUSH
24549: LD_INT 0
24551: ST_TO_ADDR
// side := GetSide ( unit ) ;
24552: LD_ADDR_VAR 0 3
24556: PUSH
24557: LD_VAR 0 1
24561: PPUSH
24562: CALL_OW 255
24566: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24567: LD_ADDR_VAR 0 4
24571: PUSH
24572: LD_VAR 0 1
24576: PPUSH
24577: CALL_OW 248
24581: ST_TO_ADDR
// case nat of 1 :
24582: LD_VAR 0 4
24586: PUSH
24587: LD_INT 1
24589: DOUBLE
24590: EQUAL
24591: IFTRUE 24595
24593: GO 24606
24595: POP
// tech := tech_lassight ; 2 :
24596: LD_ADDR_VAR 0 5
24600: PUSH
24601: LD_INT 12
24603: ST_TO_ADDR
24604: GO 24645
24606: LD_INT 2
24608: DOUBLE
24609: EQUAL
24610: IFTRUE 24614
24612: GO 24625
24614: POP
// tech := tech_mortar ; 3 :
24615: LD_ADDR_VAR 0 5
24619: PUSH
24620: LD_INT 41
24622: ST_TO_ADDR
24623: GO 24645
24625: LD_INT 3
24627: DOUBLE
24628: EQUAL
24629: IFTRUE 24633
24631: GO 24644
24633: POP
// tech := tech_bazooka ; end ;
24634: LD_ADDR_VAR 0 5
24638: PUSH
24639: LD_INT 44
24641: ST_TO_ADDR
24642: GO 24645
24644: POP
// if Researched ( side , tech ) then
24645: LD_VAR 0 3
24649: PPUSH
24650: LD_VAR 0 5
24654: PPUSH
24655: CALL_OW 325
24659: IFFALSE 24686
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24661: LD_ADDR_VAR 0 2
24665: PUSH
24666: LD_INT 5
24668: PUSH
24669: LD_INT 8
24671: PUSH
24672: LD_INT 9
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: LIST
24679: PUSH
24680: LD_VAR 0 4
24684: ARRAY
24685: ST_TO_ADDR
// end ;
24686: LD_VAR 0 2
24690: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24691: LD_INT 0
24693: PPUSH
24694: PPUSH
24695: PPUSH
// if not mines then
24696: LD_VAR 0 2
24700: NOT
24701: IFFALSE 24705
// exit ;
24703: GO 24849
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24705: LD_ADDR_VAR 0 5
24709: PUSH
24710: LD_INT 81
24712: PUSH
24713: LD_VAR 0 1
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 3
24724: PUSH
24725: LD_INT 21
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PPUSH
24743: CALL_OW 69
24747: ST_TO_ADDR
// for i in mines do
24748: LD_ADDR_VAR 0 4
24752: PUSH
24753: LD_VAR 0 2
24757: PUSH
24758: FOR_IN
24759: IFFALSE 24847
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24761: LD_VAR 0 4
24765: PUSH
24766: LD_INT 1
24768: ARRAY
24769: PPUSH
24770: LD_VAR 0 4
24774: PUSH
24775: LD_INT 2
24777: ARRAY
24778: PPUSH
24779: CALL_OW 458
24783: NOT
24784: IFFALSE 24788
// continue ;
24786: GO 24758
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24788: LD_VAR 0 4
24792: PUSH
24793: LD_INT 1
24795: ARRAY
24796: PPUSH
24797: LD_VAR 0 4
24801: PUSH
24802: LD_INT 2
24804: ARRAY
24805: PPUSH
24806: CALL_OW 428
24810: PUSH
24811: LD_VAR 0 5
24815: IN
24816: IFFALSE 24845
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24818: LD_VAR 0 4
24822: PUSH
24823: LD_INT 1
24825: ARRAY
24826: PPUSH
24827: LD_VAR 0 4
24831: PUSH
24832: LD_INT 2
24834: ARRAY
24835: PPUSH
24836: LD_VAR 0 1
24840: PPUSH
24841: CALL_OW 456
// end ;
24845: GO 24758
24847: POP
24848: POP
// end ;
24849: LD_VAR 0 3
24853: RET
// export function Count ( array ) ; var i ; begin
24854: LD_INT 0
24856: PPUSH
24857: PPUSH
// result := 0 ;
24858: LD_ADDR_VAR 0 2
24862: PUSH
24863: LD_INT 0
24865: ST_TO_ADDR
// for i in array do
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_VAR 0 1
24875: PUSH
24876: FOR_IN
24877: IFFALSE 24901
// if i then
24879: LD_VAR 0 3
24883: IFFALSE 24899
// result := result + 1 ;
24885: LD_ADDR_VAR 0 2
24889: PUSH
24890: LD_VAR 0 2
24894: PUSH
24895: LD_INT 1
24897: PLUS
24898: ST_TO_ADDR
24899: GO 24876
24901: POP
24902: POP
// end ;
24903: LD_VAR 0 2
24907: RET
// export function IsEmpty ( building ) ; begin
24908: LD_INT 0
24910: PPUSH
// if not building then
24911: LD_VAR 0 1
24915: NOT
24916: IFFALSE 24920
// exit ;
24918: GO 24963
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24920: LD_ADDR_VAR 0 2
24924: PUSH
24925: LD_VAR 0 1
24929: PUSH
24930: LD_INT 22
24932: PUSH
24933: LD_VAR 0 1
24937: PPUSH
24938: CALL_OW 255
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 58
24949: PUSH
24950: EMPTY
24951: LIST
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PPUSH
24957: CALL_OW 69
24961: IN
24962: ST_TO_ADDR
// end ;
24963: LD_VAR 0 2
24967: RET
// export function IsNotFull ( building ) ; begin
24968: LD_INT 0
24970: PPUSH
// if not building then
24971: LD_VAR 0 1
24975: NOT
24976: IFFALSE 24980
// exit ;
24978: GO 24999
// result := UnitsInside ( building ) < 6 ;
24980: LD_ADDR_VAR 0 2
24984: PUSH
24985: LD_VAR 0 1
24989: PPUSH
24990: CALL_OW 313
24994: PUSH
24995: LD_INT 6
24997: LESS
24998: ST_TO_ADDR
// end ;
24999: LD_VAR 0 2
25003: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25004: LD_INT 0
25006: PPUSH
25007: PPUSH
25008: PPUSH
25009: PPUSH
// tmp := [ ] ;
25010: LD_ADDR_VAR 0 3
25014: PUSH
25015: EMPTY
25016: ST_TO_ADDR
// list := [ ] ;
25017: LD_ADDR_VAR 0 5
25021: PUSH
25022: EMPTY
25023: ST_TO_ADDR
// for i = 16 to 25 do
25024: LD_ADDR_VAR 0 4
25028: PUSH
25029: DOUBLE
25030: LD_INT 16
25032: DEC
25033: ST_TO_ADDR
25034: LD_INT 25
25036: PUSH
25037: FOR_TO
25038: IFFALSE 25111
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25040: LD_ADDR_VAR 0 3
25044: PUSH
25045: LD_VAR 0 3
25049: PUSH
25050: LD_INT 22
25052: PUSH
25053: LD_VAR 0 1
25057: PPUSH
25058: CALL_OW 255
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 91
25069: PUSH
25070: LD_VAR 0 1
25074: PUSH
25075: LD_INT 6
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 30
25085: PUSH
25086: LD_VAR 0 4
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: LIST
25099: PUSH
25100: EMPTY
25101: LIST
25102: PPUSH
25103: CALL_OW 69
25107: ADD
25108: ST_TO_ADDR
25109: GO 25037
25111: POP
25112: POP
// for i = 1 to tmp do
25113: LD_ADDR_VAR 0 4
25117: PUSH
25118: DOUBLE
25119: LD_INT 1
25121: DEC
25122: ST_TO_ADDR
25123: LD_VAR 0 3
25127: PUSH
25128: FOR_TO
25129: IFFALSE 25217
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25131: LD_ADDR_VAR 0 5
25135: PUSH
25136: LD_VAR 0 5
25140: PUSH
25141: LD_VAR 0 3
25145: PUSH
25146: LD_VAR 0 4
25150: ARRAY
25151: PPUSH
25152: CALL_OW 266
25156: PUSH
25157: LD_VAR 0 3
25161: PUSH
25162: LD_VAR 0 4
25166: ARRAY
25167: PPUSH
25168: CALL_OW 250
25172: PUSH
25173: LD_VAR 0 3
25177: PUSH
25178: LD_VAR 0 4
25182: ARRAY
25183: PPUSH
25184: CALL_OW 251
25188: PUSH
25189: LD_VAR 0 3
25193: PUSH
25194: LD_VAR 0 4
25198: ARRAY
25199: PPUSH
25200: CALL_OW 254
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: PUSH
25211: EMPTY
25212: LIST
25213: ADD
25214: ST_TO_ADDR
25215: GO 25128
25217: POP
25218: POP
// result := list ;
25219: LD_ADDR_VAR 0 2
25223: PUSH
25224: LD_VAR 0 5
25228: ST_TO_ADDR
// end ;
25229: LD_VAR 0 2
25233: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25234: LD_INT 0
25236: PPUSH
25237: PPUSH
25238: PPUSH
25239: PPUSH
25240: PPUSH
25241: PPUSH
25242: PPUSH
// if not factory then
25243: LD_VAR 0 1
25247: NOT
25248: IFFALSE 25252
// exit ;
25250: GO 25845
// if control = control_apeman then
25252: LD_VAR 0 4
25256: PUSH
25257: LD_INT 5
25259: EQUAL
25260: IFFALSE 25369
// begin tmp := UnitsInside ( factory ) ;
25262: LD_ADDR_VAR 0 8
25266: PUSH
25267: LD_VAR 0 1
25271: PPUSH
25272: CALL_OW 313
25276: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25277: LD_VAR 0 8
25281: PPUSH
25282: LD_INT 25
25284: PUSH
25285: LD_INT 12
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PPUSH
25292: CALL_OW 72
25296: NOT
25297: IFFALSE 25307
// control := control_manual ;
25299: LD_ADDR_VAR 0 4
25303: PUSH
25304: LD_INT 1
25306: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25307: LD_ADDR_VAR 0 8
25311: PUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL 25004 0 1
25321: ST_TO_ADDR
// if tmp then
25322: LD_VAR 0 8
25326: IFFALSE 25369
// begin for i in tmp do
25328: LD_ADDR_VAR 0 7
25332: PUSH
25333: LD_VAR 0 8
25337: PUSH
25338: FOR_IN
25339: IFFALSE 25367
// if i [ 1 ] = b_ext_radio then
25341: LD_VAR 0 7
25345: PUSH
25346: LD_INT 1
25348: ARRAY
25349: PUSH
25350: LD_INT 22
25352: EQUAL
25353: IFFALSE 25365
// begin control := control_remote ;
25355: LD_ADDR_VAR 0 4
25359: PUSH
25360: LD_INT 2
25362: ST_TO_ADDR
// break ;
25363: GO 25367
// end ;
25365: GO 25338
25367: POP
25368: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25369: LD_VAR 0 1
25373: PPUSH
25374: LD_VAR 0 2
25378: PPUSH
25379: LD_VAR 0 3
25383: PPUSH
25384: LD_VAR 0 4
25388: PPUSH
25389: LD_VAR 0 5
25393: PPUSH
25394: CALL_OW 448
25398: IFFALSE 25433
// begin result := [ chassis , engine , control , weapon ] ;
25400: LD_ADDR_VAR 0 6
25404: PUSH
25405: LD_VAR 0 2
25409: PUSH
25410: LD_VAR 0 3
25414: PUSH
25415: LD_VAR 0 4
25419: PUSH
25420: LD_VAR 0 5
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: ST_TO_ADDR
// exit ;
25431: GO 25845
// end ; _chassis := AvailableChassisList ( factory ) ;
25433: LD_ADDR_VAR 0 9
25437: PUSH
25438: LD_VAR 0 1
25442: PPUSH
25443: CALL_OW 475
25447: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25448: LD_ADDR_VAR 0 11
25452: PUSH
25453: LD_VAR 0 1
25457: PPUSH
25458: CALL_OW 476
25462: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25463: LD_ADDR_VAR 0 12
25467: PUSH
25468: LD_VAR 0 1
25472: PPUSH
25473: CALL_OW 477
25477: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25478: LD_ADDR_VAR 0 10
25482: PUSH
25483: LD_VAR 0 1
25487: PPUSH
25488: CALL_OW 478
25492: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25493: LD_VAR 0 9
25497: NOT
25498: PUSH
25499: LD_VAR 0 11
25503: NOT
25504: OR
25505: PUSH
25506: LD_VAR 0 12
25510: NOT
25511: OR
25512: PUSH
25513: LD_VAR 0 10
25517: NOT
25518: OR
25519: IFFALSE 25554
// begin result := [ chassis , engine , control , weapon ] ;
25521: LD_ADDR_VAR 0 6
25525: PUSH
25526: LD_VAR 0 2
25530: PUSH
25531: LD_VAR 0 3
25535: PUSH
25536: LD_VAR 0 4
25540: PUSH
25541: LD_VAR 0 5
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: ST_TO_ADDR
// exit ;
25552: GO 25845
// end ; if not chassis in _chassis then
25554: LD_VAR 0 2
25558: PUSH
25559: LD_VAR 0 9
25563: IN
25564: NOT
25565: IFFALSE 25591
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25567: LD_ADDR_VAR 0 2
25571: PUSH
25572: LD_VAR 0 9
25576: PUSH
25577: LD_INT 1
25579: PPUSH
25580: LD_VAR 0 9
25584: PPUSH
25585: CALL_OW 12
25589: ARRAY
25590: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25591: LD_VAR 0 2
25595: PPUSH
25596: LD_VAR 0 3
25600: PPUSH
25601: CALL 25850 0 2
25605: NOT
25606: IFFALSE 25665
// repeat engine := _engine [ 1 ] ;
25608: LD_ADDR_VAR 0 3
25612: PUSH
25613: LD_VAR 0 11
25617: PUSH
25618: LD_INT 1
25620: ARRAY
25621: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25622: LD_ADDR_VAR 0 11
25626: PUSH
25627: LD_VAR 0 11
25631: PPUSH
25632: LD_INT 1
25634: PPUSH
25635: CALL_OW 3
25639: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25640: LD_VAR 0 2
25644: PPUSH
25645: LD_VAR 0 3
25649: PPUSH
25650: CALL 25850 0 2
25654: PUSH
25655: LD_VAR 0 11
25659: PUSH
25660: EMPTY
25661: EQUAL
25662: OR
25663: IFFALSE 25608
// if not control in _control then
25665: LD_VAR 0 4
25669: PUSH
25670: LD_VAR 0 12
25674: IN
25675: NOT
25676: IFFALSE 25702
// control := _control [ rand ( 1 , _control ) ] ;
25678: LD_ADDR_VAR 0 4
25682: PUSH
25683: LD_VAR 0 12
25687: PUSH
25688: LD_INT 1
25690: PPUSH
25691: LD_VAR 0 12
25695: PPUSH
25696: CALL_OW 12
25700: ARRAY
25701: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25702: LD_VAR 0 2
25706: PPUSH
25707: LD_VAR 0 5
25711: PPUSH
25712: CALL 26070 0 2
25716: NOT
25717: IFFALSE 25776
// repeat weapon := _weapon [ 1 ] ;
25719: LD_ADDR_VAR 0 5
25723: PUSH
25724: LD_VAR 0 10
25728: PUSH
25729: LD_INT 1
25731: ARRAY
25732: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25733: LD_ADDR_VAR 0 10
25737: PUSH
25738: LD_VAR 0 10
25742: PPUSH
25743: LD_INT 1
25745: PPUSH
25746: CALL_OW 3
25750: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25751: LD_VAR 0 2
25755: PPUSH
25756: LD_VAR 0 5
25760: PPUSH
25761: CALL 26070 0 2
25765: PUSH
25766: LD_VAR 0 10
25770: PUSH
25771: EMPTY
25772: EQUAL
25773: OR
25774: IFFALSE 25719
// result := [ ] ;
25776: LD_ADDR_VAR 0 6
25780: PUSH
25781: EMPTY
25782: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25783: LD_VAR 0 1
25787: PPUSH
25788: LD_VAR 0 2
25792: PPUSH
25793: LD_VAR 0 3
25797: PPUSH
25798: LD_VAR 0 4
25802: PPUSH
25803: LD_VAR 0 5
25807: PPUSH
25808: CALL_OW 448
25812: IFFALSE 25845
// result := [ chassis , engine , control , weapon ] ;
25814: LD_ADDR_VAR 0 6
25818: PUSH
25819: LD_VAR 0 2
25823: PUSH
25824: LD_VAR 0 3
25828: PUSH
25829: LD_VAR 0 4
25833: PUSH
25834: LD_VAR 0 5
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: ST_TO_ADDR
// end ;
25845: LD_VAR 0 6
25849: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25850: LD_INT 0
25852: PPUSH
// if not chassis or not engine then
25853: LD_VAR 0 1
25857: NOT
25858: PUSH
25859: LD_VAR 0 2
25863: NOT
25864: OR
25865: IFFALSE 25869
// exit ;
25867: GO 26065
// case engine of engine_solar :
25869: LD_VAR 0 2
25873: PUSH
25874: LD_INT 2
25876: DOUBLE
25877: EQUAL
25878: IFTRUE 25882
25880: GO 25920
25882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25883: LD_ADDR_VAR 0 3
25887: PUSH
25888: LD_INT 11
25890: PUSH
25891: LD_INT 12
25893: PUSH
25894: LD_INT 13
25896: PUSH
25897: LD_INT 14
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: ST_TO_ADDR
25918: GO 26049
25920: LD_INT 1
25922: DOUBLE
25923: EQUAL
25924: IFTRUE 25928
25926: GO 25990
25928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25929: LD_ADDR_VAR 0 3
25933: PUSH
25934: LD_INT 11
25936: PUSH
25937: LD_INT 12
25939: PUSH
25940: LD_INT 13
25942: PUSH
25943: LD_INT 14
25945: PUSH
25946: LD_INT 1
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: LD_INT 3
25954: PUSH
25955: LD_INT 4
25957: PUSH
25958: LD_INT 5
25960: PUSH
25961: LD_INT 21
25963: PUSH
25964: LD_INT 23
25966: PUSH
25967: LD_INT 22
25969: PUSH
25970: LD_INT 24
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: ST_TO_ADDR
25988: GO 26049
25990: LD_INT 3
25992: DOUBLE
25993: EQUAL
25994: IFTRUE 25998
25996: GO 26048
25998: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25999: LD_ADDR_VAR 0 3
26003: PUSH
26004: LD_INT 13
26006: PUSH
26007: LD_INT 14
26009: PUSH
26010: LD_INT 2
26012: PUSH
26013: LD_INT 3
26015: PUSH
26016: LD_INT 4
26018: PUSH
26019: LD_INT 5
26021: PUSH
26022: LD_INT 21
26024: PUSH
26025: LD_INT 22
26027: PUSH
26028: LD_INT 23
26030: PUSH
26031: LD_INT 24
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: ST_TO_ADDR
26046: GO 26049
26048: POP
// result := ( chassis in result ) ;
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_VAR 0 1
26058: PUSH
26059: LD_VAR 0 3
26063: IN
26064: ST_TO_ADDR
// end ;
26065: LD_VAR 0 3
26069: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26070: LD_INT 0
26072: PPUSH
// if not chassis or not weapon then
26073: LD_VAR 0 1
26077: NOT
26078: PUSH
26079: LD_VAR 0 2
26083: NOT
26084: OR
26085: IFFALSE 26089
// exit ;
26087: GO 27115
// case weapon of us_machine_gun :
26089: LD_VAR 0 2
26093: PUSH
26094: LD_INT 2
26096: DOUBLE
26097: EQUAL
26098: IFTRUE 26102
26100: GO 26132
26102: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26103: LD_ADDR_VAR 0 3
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: LD_INT 2
26113: PUSH
26114: LD_INT 3
26116: PUSH
26117: LD_INT 4
26119: PUSH
26120: LD_INT 5
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: ST_TO_ADDR
26130: GO 27099
26132: LD_INT 3
26134: DOUBLE
26135: EQUAL
26136: IFTRUE 26140
26138: GO 26170
26140: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26141: LD_ADDR_VAR 0 3
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: LD_INT 3
26154: PUSH
26155: LD_INT 4
26157: PUSH
26158: LD_INT 5
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: ST_TO_ADDR
26168: GO 27099
26170: LD_INT 11
26172: DOUBLE
26173: EQUAL
26174: IFTRUE 26178
26176: GO 26208
26178: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26179: LD_ADDR_VAR 0 3
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: LD_INT 2
26189: PUSH
26190: LD_INT 3
26192: PUSH
26193: LD_INT 4
26195: PUSH
26196: LD_INT 5
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: ST_TO_ADDR
26206: GO 27099
26208: LD_INT 4
26210: DOUBLE
26211: EQUAL
26212: IFTRUE 26216
26214: GO 26242
26216: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26217: LD_ADDR_VAR 0 3
26221: PUSH
26222: LD_INT 2
26224: PUSH
26225: LD_INT 3
26227: PUSH
26228: LD_INT 4
26230: PUSH
26231: LD_INT 5
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: ST_TO_ADDR
26240: GO 27099
26242: LD_INT 5
26244: DOUBLE
26245: EQUAL
26246: IFTRUE 26250
26248: GO 26276
26250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26251: LD_ADDR_VAR 0 3
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: LD_INT 3
26261: PUSH
26262: LD_INT 4
26264: PUSH
26265: LD_INT 5
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: ST_TO_ADDR
26274: GO 27099
26276: LD_INT 9
26278: DOUBLE
26279: EQUAL
26280: IFTRUE 26284
26282: GO 26310
26284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26285: LD_ADDR_VAR 0 3
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: LD_INT 3
26295: PUSH
26296: LD_INT 4
26298: PUSH
26299: LD_INT 5
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: ST_TO_ADDR
26308: GO 27099
26310: LD_INT 7
26312: DOUBLE
26313: EQUAL
26314: IFTRUE 26318
26316: GO 26344
26318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26319: LD_ADDR_VAR 0 3
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: LD_INT 3
26329: PUSH
26330: LD_INT 4
26332: PUSH
26333: LD_INT 5
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: ST_TO_ADDR
26342: GO 27099
26344: LD_INT 12
26346: DOUBLE
26347: EQUAL
26348: IFTRUE 26352
26350: GO 26378
26352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26353: LD_ADDR_VAR 0 3
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: LD_INT 3
26363: PUSH
26364: LD_INT 4
26366: PUSH
26367: LD_INT 5
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: ST_TO_ADDR
26376: GO 27099
26378: LD_INT 13
26380: DOUBLE
26381: EQUAL
26382: IFTRUE 26386
26384: GO 26412
26386: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26387: LD_ADDR_VAR 0 3
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: LD_INT 3
26397: PUSH
26398: LD_INT 4
26400: PUSH
26401: LD_INT 5
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
26410: GO 27099
26412: LD_INT 14
26414: DOUBLE
26415: EQUAL
26416: IFTRUE 26420
26418: GO 26438
26420: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26421: LD_ADDR_VAR 0 3
26425: PUSH
26426: LD_INT 4
26428: PUSH
26429: LD_INT 5
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: ST_TO_ADDR
26436: GO 27099
26438: LD_INT 6
26440: DOUBLE
26441: EQUAL
26442: IFTRUE 26446
26444: GO 26464
26446: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26447: LD_ADDR_VAR 0 3
26451: PUSH
26452: LD_INT 4
26454: PUSH
26455: LD_INT 5
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: ST_TO_ADDR
26462: GO 27099
26464: LD_INT 10
26466: DOUBLE
26467: EQUAL
26468: IFTRUE 26472
26470: GO 26490
26472: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26473: LD_ADDR_VAR 0 3
26477: PUSH
26478: LD_INT 4
26480: PUSH
26481: LD_INT 5
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: ST_TO_ADDR
26488: GO 27099
26490: LD_INT 22
26492: DOUBLE
26493: EQUAL
26494: IFTRUE 26498
26496: GO 26524
26498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26499: LD_ADDR_VAR 0 3
26503: PUSH
26504: LD_INT 11
26506: PUSH
26507: LD_INT 12
26509: PUSH
26510: LD_INT 13
26512: PUSH
26513: LD_INT 14
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: ST_TO_ADDR
26522: GO 27099
26524: LD_INT 23
26526: DOUBLE
26527: EQUAL
26528: IFTRUE 26532
26530: GO 26558
26532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26533: LD_ADDR_VAR 0 3
26537: PUSH
26538: LD_INT 11
26540: PUSH
26541: LD_INT 12
26543: PUSH
26544: LD_INT 13
26546: PUSH
26547: LD_INT 14
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: ST_TO_ADDR
26556: GO 27099
26558: LD_INT 24
26560: DOUBLE
26561: EQUAL
26562: IFTRUE 26566
26564: GO 26592
26566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26567: LD_ADDR_VAR 0 3
26571: PUSH
26572: LD_INT 11
26574: PUSH
26575: LD_INT 12
26577: PUSH
26578: LD_INT 13
26580: PUSH
26581: LD_INT 14
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: ST_TO_ADDR
26590: GO 27099
26592: LD_INT 30
26594: DOUBLE
26595: EQUAL
26596: IFTRUE 26600
26598: GO 26626
26600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26601: LD_ADDR_VAR 0 3
26605: PUSH
26606: LD_INT 11
26608: PUSH
26609: LD_INT 12
26611: PUSH
26612: LD_INT 13
26614: PUSH
26615: LD_INT 14
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: ST_TO_ADDR
26624: GO 27099
26626: LD_INT 25
26628: DOUBLE
26629: EQUAL
26630: IFTRUE 26634
26632: GO 26652
26634: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26635: LD_ADDR_VAR 0 3
26639: PUSH
26640: LD_INT 13
26642: PUSH
26643: LD_INT 14
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: ST_TO_ADDR
26650: GO 27099
26652: LD_INT 27
26654: DOUBLE
26655: EQUAL
26656: IFTRUE 26660
26658: GO 26678
26660: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26661: LD_ADDR_VAR 0 3
26665: PUSH
26666: LD_INT 13
26668: PUSH
26669: LD_INT 14
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: ST_TO_ADDR
26676: GO 27099
26678: LD_INT 28
26680: DOUBLE
26681: EQUAL
26682: IFTRUE 26686
26684: GO 26704
26686: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26687: LD_ADDR_VAR 0 3
26691: PUSH
26692: LD_INT 13
26694: PUSH
26695: LD_INT 14
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: ST_TO_ADDR
26702: GO 27099
26704: LD_INT 29
26706: DOUBLE
26707: EQUAL
26708: IFTRUE 26712
26710: GO 26730
26712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26713: LD_ADDR_VAR 0 3
26717: PUSH
26718: LD_INT 13
26720: PUSH
26721: LD_INT 14
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: ST_TO_ADDR
26728: GO 27099
26730: LD_INT 31
26732: DOUBLE
26733: EQUAL
26734: IFTRUE 26738
26736: GO 26756
26738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26739: LD_ADDR_VAR 0 3
26743: PUSH
26744: LD_INT 13
26746: PUSH
26747: LD_INT 14
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: ST_TO_ADDR
26754: GO 27099
26756: LD_INT 26
26758: DOUBLE
26759: EQUAL
26760: IFTRUE 26764
26762: GO 26782
26764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26765: LD_ADDR_VAR 0 3
26769: PUSH
26770: LD_INT 13
26772: PUSH
26773: LD_INT 14
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: ST_TO_ADDR
26780: GO 27099
26782: LD_INT 42
26784: DOUBLE
26785: EQUAL
26786: IFTRUE 26790
26788: GO 26816
26790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26791: LD_ADDR_VAR 0 3
26795: PUSH
26796: LD_INT 21
26798: PUSH
26799: LD_INT 22
26801: PUSH
26802: LD_INT 23
26804: PUSH
26805: LD_INT 24
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: ST_TO_ADDR
26814: GO 27099
26816: LD_INT 43
26818: DOUBLE
26819: EQUAL
26820: IFTRUE 26824
26822: GO 26850
26824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26825: LD_ADDR_VAR 0 3
26829: PUSH
26830: LD_INT 21
26832: PUSH
26833: LD_INT 22
26835: PUSH
26836: LD_INT 23
26838: PUSH
26839: LD_INT 24
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: ST_TO_ADDR
26848: GO 27099
26850: LD_INT 44
26852: DOUBLE
26853: EQUAL
26854: IFTRUE 26858
26856: GO 26884
26858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26859: LD_ADDR_VAR 0 3
26863: PUSH
26864: LD_INT 21
26866: PUSH
26867: LD_INT 22
26869: PUSH
26870: LD_INT 23
26872: PUSH
26873: LD_INT 24
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: ST_TO_ADDR
26882: GO 27099
26884: LD_INT 45
26886: DOUBLE
26887: EQUAL
26888: IFTRUE 26892
26890: GO 26918
26892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26893: LD_ADDR_VAR 0 3
26897: PUSH
26898: LD_INT 21
26900: PUSH
26901: LD_INT 22
26903: PUSH
26904: LD_INT 23
26906: PUSH
26907: LD_INT 24
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: ST_TO_ADDR
26916: GO 27099
26918: LD_INT 49
26920: DOUBLE
26921: EQUAL
26922: IFTRUE 26926
26924: GO 26952
26926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26927: LD_ADDR_VAR 0 3
26931: PUSH
26932: LD_INT 21
26934: PUSH
26935: LD_INT 22
26937: PUSH
26938: LD_INT 23
26940: PUSH
26941: LD_INT 24
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: ST_TO_ADDR
26950: GO 27099
26952: LD_INT 51
26954: DOUBLE
26955: EQUAL
26956: IFTRUE 26960
26958: GO 26986
26960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26961: LD_ADDR_VAR 0 3
26965: PUSH
26966: LD_INT 21
26968: PUSH
26969: LD_INT 22
26971: PUSH
26972: LD_INT 23
26974: PUSH
26975: LD_INT 24
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: ST_TO_ADDR
26984: GO 27099
26986: LD_INT 52
26988: DOUBLE
26989: EQUAL
26990: IFTRUE 26994
26992: GO 27020
26994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26995: LD_ADDR_VAR 0 3
26999: PUSH
27000: LD_INT 21
27002: PUSH
27003: LD_INT 22
27005: PUSH
27006: LD_INT 23
27008: PUSH
27009: LD_INT 24
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: ST_TO_ADDR
27018: GO 27099
27020: LD_INT 53
27022: DOUBLE
27023: EQUAL
27024: IFTRUE 27028
27026: GO 27046
27028: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27029: LD_ADDR_VAR 0 3
27033: PUSH
27034: LD_INT 23
27036: PUSH
27037: LD_INT 24
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: ST_TO_ADDR
27044: GO 27099
27046: LD_INT 46
27048: DOUBLE
27049: EQUAL
27050: IFTRUE 27054
27052: GO 27072
27054: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27055: LD_ADDR_VAR 0 3
27059: PUSH
27060: LD_INT 23
27062: PUSH
27063: LD_INT 24
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: ST_TO_ADDR
27070: GO 27099
27072: LD_INT 47
27074: DOUBLE
27075: EQUAL
27076: IFTRUE 27080
27078: GO 27098
27080: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27081: LD_ADDR_VAR 0 3
27085: PUSH
27086: LD_INT 23
27088: PUSH
27089: LD_INT 24
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: ST_TO_ADDR
27096: GO 27099
27098: POP
// result := ( chassis in result ) ;
27099: LD_ADDR_VAR 0 3
27103: PUSH
27104: LD_VAR 0 1
27108: PUSH
27109: LD_VAR 0 3
27113: IN
27114: ST_TO_ADDR
// end ;
27115: LD_VAR 0 3
27119: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27120: LD_INT 0
27122: PPUSH
27123: PPUSH
27124: PPUSH
27125: PPUSH
27126: PPUSH
27127: PPUSH
27128: PPUSH
// result := array ;
27129: LD_ADDR_VAR 0 5
27133: PUSH
27134: LD_VAR 0 1
27138: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27139: LD_VAR 0 1
27143: NOT
27144: PUSH
27145: LD_VAR 0 2
27149: NOT
27150: OR
27151: PUSH
27152: LD_VAR 0 3
27156: NOT
27157: OR
27158: PUSH
27159: LD_VAR 0 2
27163: PUSH
27164: LD_VAR 0 1
27168: GREATER
27169: OR
27170: PUSH
27171: LD_VAR 0 3
27175: PUSH
27176: LD_VAR 0 1
27180: GREATER
27181: OR
27182: IFFALSE 27186
// exit ;
27184: GO 27482
// if direction then
27186: LD_VAR 0 4
27190: IFFALSE 27254
// begin d := 1 ;
27192: LD_ADDR_VAR 0 9
27196: PUSH
27197: LD_INT 1
27199: ST_TO_ADDR
// if i_from > i_to then
27200: LD_VAR 0 2
27204: PUSH
27205: LD_VAR 0 3
27209: GREATER
27210: IFFALSE 27236
// length := ( array - i_from ) + i_to else
27212: LD_ADDR_VAR 0 11
27216: PUSH
27217: LD_VAR 0 1
27221: PUSH
27222: LD_VAR 0 2
27226: MINUS
27227: PUSH
27228: LD_VAR 0 3
27232: PLUS
27233: ST_TO_ADDR
27234: GO 27252
// length := i_to - i_from ;
27236: LD_ADDR_VAR 0 11
27240: PUSH
27241: LD_VAR 0 3
27245: PUSH
27246: LD_VAR 0 2
27250: MINUS
27251: ST_TO_ADDR
// end else
27252: GO 27315
// begin d := - 1 ;
27254: LD_ADDR_VAR 0 9
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: ST_TO_ADDR
// if i_from > i_to then
27263: LD_VAR 0 2
27267: PUSH
27268: LD_VAR 0 3
27272: GREATER
27273: IFFALSE 27293
// length := i_from - i_to else
27275: LD_ADDR_VAR 0 11
27279: PUSH
27280: LD_VAR 0 2
27284: PUSH
27285: LD_VAR 0 3
27289: MINUS
27290: ST_TO_ADDR
27291: GO 27315
// length := ( array - i_to ) + i_from ;
27293: LD_ADDR_VAR 0 11
27297: PUSH
27298: LD_VAR 0 1
27302: PUSH
27303: LD_VAR 0 3
27307: MINUS
27308: PUSH
27309: LD_VAR 0 2
27313: PLUS
27314: ST_TO_ADDR
// end ; if not length then
27315: LD_VAR 0 11
27319: NOT
27320: IFFALSE 27324
// exit ;
27322: GO 27482
// tmp := array ;
27324: LD_ADDR_VAR 0 10
27328: PUSH
27329: LD_VAR 0 1
27333: ST_TO_ADDR
// for i = 1 to length do
27334: LD_ADDR_VAR 0 6
27338: PUSH
27339: DOUBLE
27340: LD_INT 1
27342: DEC
27343: ST_TO_ADDR
27344: LD_VAR 0 11
27348: PUSH
27349: FOR_TO
27350: IFFALSE 27470
// begin for j = 1 to array do
27352: LD_ADDR_VAR 0 7
27356: PUSH
27357: DOUBLE
27358: LD_INT 1
27360: DEC
27361: ST_TO_ADDR
27362: LD_VAR 0 1
27366: PUSH
27367: FOR_TO
27368: IFFALSE 27456
// begin k := j + d ;
27370: LD_ADDR_VAR 0 8
27374: PUSH
27375: LD_VAR 0 7
27379: PUSH
27380: LD_VAR 0 9
27384: PLUS
27385: ST_TO_ADDR
// if k > array then
27386: LD_VAR 0 8
27390: PUSH
27391: LD_VAR 0 1
27395: GREATER
27396: IFFALSE 27406
// k := 1 ;
27398: LD_ADDR_VAR 0 8
27402: PUSH
27403: LD_INT 1
27405: ST_TO_ADDR
// if not k then
27406: LD_VAR 0 8
27410: NOT
27411: IFFALSE 27423
// k := array ;
27413: LD_ADDR_VAR 0 8
27417: PUSH
27418: LD_VAR 0 1
27422: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27423: LD_ADDR_VAR 0 10
27427: PUSH
27428: LD_VAR 0 10
27432: PPUSH
27433: LD_VAR 0 8
27437: PPUSH
27438: LD_VAR 0 1
27442: PUSH
27443: LD_VAR 0 7
27447: ARRAY
27448: PPUSH
27449: CALL_OW 1
27453: ST_TO_ADDR
// end ;
27454: GO 27367
27456: POP
27457: POP
// array := tmp ;
27458: LD_ADDR_VAR 0 1
27462: PUSH
27463: LD_VAR 0 10
27467: ST_TO_ADDR
// end ;
27468: GO 27349
27470: POP
27471: POP
// result := array ;
27472: LD_ADDR_VAR 0 5
27476: PUSH
27477: LD_VAR 0 1
27481: ST_TO_ADDR
// end ;
27482: LD_VAR 0 5
27486: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27487: LD_INT 0
27489: PPUSH
27490: PPUSH
// result := 0 ;
27491: LD_ADDR_VAR 0 3
27495: PUSH
27496: LD_INT 0
27498: ST_TO_ADDR
// if not array or not value in array then
27499: LD_VAR 0 1
27503: NOT
27504: PUSH
27505: LD_VAR 0 2
27509: PUSH
27510: LD_VAR 0 1
27514: IN
27515: NOT
27516: OR
27517: IFFALSE 27521
// exit ;
27519: GO 27575
// for i = 1 to array do
27521: LD_ADDR_VAR 0 4
27525: PUSH
27526: DOUBLE
27527: LD_INT 1
27529: DEC
27530: ST_TO_ADDR
27531: LD_VAR 0 1
27535: PUSH
27536: FOR_TO
27537: IFFALSE 27573
// if value = array [ i ] then
27539: LD_VAR 0 2
27543: PUSH
27544: LD_VAR 0 1
27548: PUSH
27549: LD_VAR 0 4
27553: ARRAY
27554: EQUAL
27555: IFFALSE 27571
// begin result := i ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_VAR 0 4
27566: ST_TO_ADDR
// exit ;
27567: POP
27568: POP
27569: GO 27575
// end ;
27571: GO 27536
27573: POP
27574: POP
// end ;
27575: LD_VAR 0 3
27579: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27580: LD_INT 0
27582: PPUSH
// vc_chassis := chassis ;
27583: LD_ADDR_OWVAR 37
27587: PUSH
27588: LD_VAR 0 1
27592: ST_TO_ADDR
// vc_engine := engine ;
27593: LD_ADDR_OWVAR 39
27597: PUSH
27598: LD_VAR 0 2
27602: ST_TO_ADDR
// vc_control := control ;
27603: LD_ADDR_OWVAR 38
27607: PUSH
27608: LD_VAR 0 3
27612: ST_TO_ADDR
// vc_weapon := weapon ;
27613: LD_ADDR_OWVAR 40
27617: PUSH
27618: LD_VAR 0 4
27622: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27623: LD_ADDR_OWVAR 41
27627: PUSH
27628: LD_VAR 0 5
27632: ST_TO_ADDR
// end ;
27633: LD_VAR 0 6
27637: RET
// export function WantPlant ( unit ) ; var task ; begin
27638: LD_INT 0
27640: PPUSH
27641: PPUSH
// result := false ;
27642: LD_ADDR_VAR 0 2
27646: PUSH
27647: LD_INT 0
27649: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27650: LD_ADDR_VAR 0 3
27654: PUSH
27655: LD_VAR 0 1
27659: PPUSH
27660: CALL_OW 437
27664: ST_TO_ADDR
// if task then
27665: LD_VAR 0 3
27669: IFFALSE 27697
// if task [ 1 ] [ 1 ] = p then
27671: LD_VAR 0 3
27675: PUSH
27676: LD_INT 1
27678: ARRAY
27679: PUSH
27680: LD_INT 1
27682: ARRAY
27683: PUSH
27684: LD_STRING p
27686: EQUAL
27687: IFFALSE 27697
// result := true ;
27689: LD_ADDR_VAR 0 2
27693: PUSH
27694: LD_INT 1
27696: ST_TO_ADDR
// end ;
27697: LD_VAR 0 2
27701: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27702: LD_INT 0
27704: PPUSH
27705: PPUSH
27706: PPUSH
27707: PPUSH
// if pos < 1 then
27708: LD_VAR 0 2
27712: PUSH
27713: LD_INT 1
27715: LESS
27716: IFFALSE 27720
// exit ;
27718: GO 28023
// if pos = 1 then
27720: LD_VAR 0 2
27724: PUSH
27725: LD_INT 1
27727: EQUAL
27728: IFFALSE 27761
// result := Replace ( arr , pos [ 1 ] , value ) else
27730: LD_ADDR_VAR 0 4
27734: PUSH
27735: LD_VAR 0 1
27739: PPUSH
27740: LD_VAR 0 2
27744: PUSH
27745: LD_INT 1
27747: ARRAY
27748: PPUSH
27749: LD_VAR 0 3
27753: PPUSH
27754: CALL_OW 1
27758: ST_TO_ADDR
27759: GO 28023
// begin tmp := arr ;
27761: LD_ADDR_VAR 0 6
27765: PUSH
27766: LD_VAR 0 1
27770: ST_TO_ADDR
// s_arr := [ tmp ] ;
27771: LD_ADDR_VAR 0 7
27775: PUSH
27776: LD_VAR 0 6
27780: PUSH
27781: EMPTY
27782: LIST
27783: ST_TO_ADDR
// for i = 1 to pos - 1 do
27784: LD_ADDR_VAR 0 5
27788: PUSH
27789: DOUBLE
27790: LD_INT 1
27792: DEC
27793: ST_TO_ADDR
27794: LD_VAR 0 2
27798: PUSH
27799: LD_INT 1
27801: MINUS
27802: PUSH
27803: FOR_TO
27804: IFFALSE 27849
// begin tmp := tmp [ pos [ i ] ] ;
27806: LD_ADDR_VAR 0 6
27810: PUSH
27811: LD_VAR 0 6
27815: PUSH
27816: LD_VAR 0 2
27820: PUSH
27821: LD_VAR 0 5
27825: ARRAY
27826: ARRAY
27827: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27828: LD_ADDR_VAR 0 7
27832: PUSH
27833: LD_VAR 0 7
27837: PUSH
27838: LD_VAR 0 6
27842: PUSH
27843: EMPTY
27844: LIST
27845: ADD
27846: ST_TO_ADDR
// end ;
27847: GO 27803
27849: POP
27850: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27851: LD_ADDR_VAR 0 6
27855: PUSH
27856: LD_VAR 0 6
27860: PPUSH
27861: LD_VAR 0 2
27865: PUSH
27866: LD_VAR 0 2
27870: ARRAY
27871: PPUSH
27872: LD_VAR 0 3
27876: PPUSH
27877: CALL_OW 1
27881: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27882: LD_ADDR_VAR 0 7
27886: PUSH
27887: LD_VAR 0 7
27891: PPUSH
27892: LD_VAR 0 7
27896: PPUSH
27897: LD_VAR 0 6
27901: PPUSH
27902: CALL_OW 1
27906: ST_TO_ADDR
// for i = s_arr downto 2 do
27907: LD_ADDR_VAR 0 5
27911: PUSH
27912: DOUBLE
27913: LD_VAR 0 7
27917: INC
27918: ST_TO_ADDR
27919: LD_INT 2
27921: PUSH
27922: FOR_DOWNTO
27923: IFFALSE 28007
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27925: LD_ADDR_VAR 0 6
27929: PUSH
27930: LD_VAR 0 7
27934: PUSH
27935: LD_VAR 0 5
27939: PUSH
27940: LD_INT 1
27942: MINUS
27943: ARRAY
27944: PPUSH
27945: LD_VAR 0 2
27949: PUSH
27950: LD_VAR 0 5
27954: PUSH
27955: LD_INT 1
27957: MINUS
27958: ARRAY
27959: PPUSH
27960: LD_VAR 0 7
27964: PUSH
27965: LD_VAR 0 5
27969: ARRAY
27970: PPUSH
27971: CALL_OW 1
27975: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27976: LD_ADDR_VAR 0 7
27980: PUSH
27981: LD_VAR 0 7
27985: PPUSH
27986: LD_VAR 0 5
27990: PUSH
27991: LD_INT 1
27993: MINUS
27994: PPUSH
27995: LD_VAR 0 6
27999: PPUSH
28000: CALL_OW 1
28004: ST_TO_ADDR
// end ;
28005: GO 27922
28007: POP
28008: POP
// result := s_arr [ 1 ] ;
28009: LD_ADDR_VAR 0 4
28013: PUSH
28014: LD_VAR 0 7
28018: PUSH
28019: LD_INT 1
28021: ARRAY
28022: ST_TO_ADDR
// end ; end ;
28023: LD_VAR 0 4
28027: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28028: LD_INT 0
28030: PPUSH
28031: PPUSH
// if not list then
28032: LD_VAR 0 1
28036: NOT
28037: IFFALSE 28041
// exit ;
28039: GO 28132
// i := list [ pos1 ] ;
28041: LD_ADDR_VAR 0 5
28045: PUSH
28046: LD_VAR 0 1
28050: PUSH
28051: LD_VAR 0 2
28055: ARRAY
28056: ST_TO_ADDR
// if not i then
28057: LD_VAR 0 5
28061: NOT
28062: IFFALSE 28066
// exit ;
28064: GO 28132
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28066: LD_ADDR_VAR 0 1
28070: PUSH
28071: LD_VAR 0 1
28075: PPUSH
28076: LD_VAR 0 2
28080: PPUSH
28081: LD_VAR 0 1
28085: PUSH
28086: LD_VAR 0 3
28090: ARRAY
28091: PPUSH
28092: CALL_OW 1
28096: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28097: LD_ADDR_VAR 0 1
28101: PUSH
28102: LD_VAR 0 1
28106: PPUSH
28107: LD_VAR 0 3
28111: PPUSH
28112: LD_VAR 0 5
28116: PPUSH
28117: CALL_OW 1
28121: ST_TO_ADDR
// result := list ;
28122: LD_ADDR_VAR 0 4
28126: PUSH
28127: LD_VAR 0 1
28131: ST_TO_ADDR
// end ;
28132: LD_VAR 0 4
28136: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28137: LD_INT 0
28139: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28140: LD_ADDR_VAR 0 5
28144: PUSH
28145: LD_VAR 0 1
28149: PPUSH
28150: CALL_OW 250
28154: PPUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: CALL_OW 251
28164: PPUSH
28165: LD_VAR 0 2
28169: PPUSH
28170: LD_VAR 0 3
28174: PPUSH
28175: LD_VAR 0 4
28179: PPUSH
28180: CALL 28190 0 5
28184: ST_TO_ADDR
// end ;
28185: LD_VAR 0 5
28189: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28190: LD_INT 0
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
// if not list then
28196: LD_VAR 0 3
28200: NOT
28201: IFFALSE 28205
// exit ;
28203: GO 28593
// result := [ ] ;
28205: LD_ADDR_VAR 0 6
28209: PUSH
28210: EMPTY
28211: ST_TO_ADDR
// for i in list do
28212: LD_ADDR_VAR 0 7
28216: PUSH
28217: LD_VAR 0 3
28221: PUSH
28222: FOR_IN
28223: IFFALSE 28425
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28225: LD_ADDR_VAR 0 9
28229: PUSH
28230: LD_VAR 0 7
28234: PPUSH
28235: LD_VAR 0 1
28239: PPUSH
28240: LD_VAR 0 2
28244: PPUSH
28245: CALL_OW 297
28249: ST_TO_ADDR
// if not result then
28250: LD_VAR 0 6
28254: NOT
28255: IFFALSE 28281
// result := [ [ i , tmp ] ] else
28257: LD_ADDR_VAR 0 6
28261: PUSH
28262: LD_VAR 0 7
28266: PUSH
28267: LD_VAR 0 9
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: ST_TO_ADDR
28279: GO 28423
// begin if result [ result ] [ 2 ] < tmp then
28281: LD_VAR 0 6
28285: PUSH
28286: LD_VAR 0 6
28290: ARRAY
28291: PUSH
28292: LD_INT 2
28294: ARRAY
28295: PUSH
28296: LD_VAR 0 9
28300: LESS
28301: IFFALSE 28343
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28303: LD_ADDR_VAR 0 6
28307: PUSH
28308: LD_VAR 0 6
28312: PPUSH
28313: LD_VAR 0 6
28317: PUSH
28318: LD_INT 1
28320: PLUS
28321: PPUSH
28322: LD_VAR 0 7
28326: PUSH
28327: LD_VAR 0 9
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PPUSH
28336: CALL_OW 2
28340: ST_TO_ADDR
28341: GO 28423
// for j = 1 to result do
28343: LD_ADDR_VAR 0 8
28347: PUSH
28348: DOUBLE
28349: LD_INT 1
28351: DEC
28352: ST_TO_ADDR
28353: LD_VAR 0 6
28357: PUSH
28358: FOR_TO
28359: IFFALSE 28421
// begin if tmp < result [ j ] [ 2 ] then
28361: LD_VAR 0 9
28365: PUSH
28366: LD_VAR 0 6
28370: PUSH
28371: LD_VAR 0 8
28375: ARRAY
28376: PUSH
28377: LD_INT 2
28379: ARRAY
28380: LESS
28381: IFFALSE 28419
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28383: LD_ADDR_VAR 0 6
28387: PUSH
28388: LD_VAR 0 6
28392: PPUSH
28393: LD_VAR 0 8
28397: PPUSH
28398: LD_VAR 0 7
28402: PUSH
28403: LD_VAR 0 9
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PPUSH
28412: CALL_OW 2
28416: ST_TO_ADDR
// break ;
28417: GO 28421
// end ; end ;
28419: GO 28358
28421: POP
28422: POP
// end ; end ;
28423: GO 28222
28425: POP
28426: POP
// if result and not asc then
28427: LD_VAR 0 6
28431: PUSH
28432: LD_VAR 0 4
28436: NOT
28437: AND
28438: IFFALSE 28513
// begin tmp := result ;
28440: LD_ADDR_VAR 0 9
28444: PUSH
28445: LD_VAR 0 6
28449: ST_TO_ADDR
// for i = tmp downto 1 do
28450: LD_ADDR_VAR 0 7
28454: PUSH
28455: DOUBLE
28456: LD_VAR 0 9
28460: INC
28461: ST_TO_ADDR
28462: LD_INT 1
28464: PUSH
28465: FOR_DOWNTO
28466: IFFALSE 28511
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28468: LD_ADDR_VAR 0 6
28472: PUSH
28473: LD_VAR 0 6
28477: PPUSH
28478: LD_VAR 0 9
28482: PUSH
28483: LD_VAR 0 7
28487: MINUS
28488: PUSH
28489: LD_INT 1
28491: PLUS
28492: PPUSH
28493: LD_VAR 0 9
28497: PUSH
28498: LD_VAR 0 7
28502: ARRAY
28503: PPUSH
28504: CALL_OW 1
28508: ST_TO_ADDR
28509: GO 28465
28511: POP
28512: POP
// end ; tmp := [ ] ;
28513: LD_ADDR_VAR 0 9
28517: PUSH
28518: EMPTY
28519: ST_TO_ADDR
// if mode then
28520: LD_VAR 0 5
28524: IFFALSE 28593
// begin for i = 1 to result do
28526: LD_ADDR_VAR 0 7
28530: PUSH
28531: DOUBLE
28532: LD_INT 1
28534: DEC
28535: ST_TO_ADDR
28536: LD_VAR 0 6
28540: PUSH
28541: FOR_TO
28542: IFFALSE 28581
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28544: LD_ADDR_VAR 0 9
28548: PUSH
28549: LD_VAR 0 9
28553: PPUSH
28554: LD_VAR 0 7
28558: PPUSH
28559: LD_VAR 0 6
28563: PUSH
28564: LD_VAR 0 7
28568: ARRAY
28569: PUSH
28570: LD_INT 1
28572: ARRAY
28573: PPUSH
28574: CALL_OW 1
28578: ST_TO_ADDR
28579: GO 28541
28581: POP
28582: POP
// result := tmp ;
28583: LD_ADDR_VAR 0 6
28587: PUSH
28588: LD_VAR 0 9
28592: ST_TO_ADDR
// end ; end ;
28593: LD_VAR 0 6
28597: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28598: LD_INT 0
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
28605: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28606: LD_ADDR_VAR 0 5
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: EMPTY
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: ST_TO_ADDR
// if not x or not y then
28628: LD_VAR 0 2
28632: NOT
28633: PUSH
28634: LD_VAR 0 3
28638: NOT
28639: OR
28640: IFFALSE 28644
// exit ;
28642: GO 30290
// if not range then
28644: LD_VAR 0 4
28648: NOT
28649: IFFALSE 28659
// range := 10 ;
28651: LD_ADDR_VAR 0 4
28655: PUSH
28656: LD_INT 10
28658: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28659: LD_ADDR_VAR 0 8
28663: PUSH
28664: LD_INT 81
28666: PUSH
28667: LD_VAR 0 1
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 92
28678: PUSH
28679: LD_VAR 0 2
28683: PUSH
28684: LD_VAR 0 3
28688: PUSH
28689: LD_VAR 0 4
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 3
28702: PUSH
28703: LD_INT 21
28705: PUSH
28706: LD_INT 3
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: ST_TO_ADDR
// if not tmp then
28727: LD_VAR 0 8
28731: NOT
28732: IFFALSE 28736
// exit ;
28734: GO 30290
// for i in tmp do
28736: LD_ADDR_VAR 0 6
28740: PUSH
28741: LD_VAR 0 8
28745: PUSH
28746: FOR_IN
28747: IFFALSE 30265
// begin points := [ 0 , 0 , 0 ] ;
28749: LD_ADDR_VAR 0 9
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: ST_TO_ADDR
// bpoints := 1 ;
28768: LD_ADDR_VAR 0 10
28772: PUSH
28773: LD_INT 1
28775: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28776: LD_VAR 0 6
28780: PPUSH
28781: CALL_OW 247
28785: PUSH
28786: LD_INT 1
28788: DOUBLE
28789: EQUAL
28790: IFTRUE 28794
28792: GO 29372
28794: POP
// begin if GetClass ( i ) = 1 then
28795: LD_VAR 0 6
28799: PPUSH
28800: CALL_OW 257
28804: PUSH
28805: LD_INT 1
28807: EQUAL
28808: IFFALSE 28829
// points := [ 10 , 5 , 3 ] ;
28810: LD_ADDR_VAR 0 9
28814: PUSH
28815: LD_INT 10
28817: PUSH
28818: LD_INT 5
28820: PUSH
28821: LD_INT 3
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: LIST
28828: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28829: LD_VAR 0 6
28833: PPUSH
28834: CALL_OW 257
28838: PUSH
28839: LD_INT 2
28841: PUSH
28842: LD_INT 3
28844: PUSH
28845: LD_INT 4
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: LIST
28852: IN
28853: IFFALSE 28874
// points := [ 3 , 2 , 1 ] ;
28855: LD_ADDR_VAR 0 9
28859: PUSH
28860: LD_INT 3
28862: PUSH
28863: LD_INT 2
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28874: LD_VAR 0 6
28878: PPUSH
28879: CALL_OW 257
28883: PUSH
28884: LD_INT 5
28886: EQUAL
28887: IFFALSE 28908
// points := [ 130 , 5 , 2 ] ;
28889: LD_ADDR_VAR 0 9
28893: PUSH
28894: LD_INT 130
28896: PUSH
28897: LD_INT 5
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28908: LD_VAR 0 6
28912: PPUSH
28913: CALL_OW 257
28917: PUSH
28918: LD_INT 8
28920: EQUAL
28921: IFFALSE 28942
// points := [ 35 , 35 , 30 ] ;
28923: LD_ADDR_VAR 0 9
28927: PUSH
28928: LD_INT 35
28930: PUSH
28931: LD_INT 35
28933: PUSH
28934: LD_INT 30
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28942: LD_VAR 0 6
28946: PPUSH
28947: CALL_OW 257
28951: PUSH
28952: LD_INT 9
28954: EQUAL
28955: IFFALSE 28976
// points := [ 20 , 55 , 40 ] ;
28957: LD_ADDR_VAR 0 9
28961: PUSH
28962: LD_INT 20
28964: PUSH
28965: LD_INT 55
28967: PUSH
28968: LD_INT 40
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28976: LD_VAR 0 6
28980: PPUSH
28981: CALL_OW 257
28985: PUSH
28986: LD_INT 12
28988: PUSH
28989: LD_INT 16
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: IN
28996: IFFALSE 29017
// points := [ 5 , 3 , 2 ] ;
28998: LD_ADDR_VAR 0 9
29002: PUSH
29003: LD_INT 5
29005: PUSH
29006: LD_INT 3
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29017: LD_VAR 0 6
29021: PPUSH
29022: CALL_OW 257
29026: PUSH
29027: LD_INT 17
29029: EQUAL
29030: IFFALSE 29051
// points := [ 100 , 50 , 75 ] ;
29032: LD_ADDR_VAR 0 9
29036: PUSH
29037: LD_INT 100
29039: PUSH
29040: LD_INT 50
29042: PUSH
29043: LD_INT 75
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29051: LD_VAR 0 6
29055: PPUSH
29056: CALL_OW 257
29060: PUSH
29061: LD_INT 15
29063: EQUAL
29064: IFFALSE 29085
// points := [ 10 , 5 , 3 ] ;
29066: LD_ADDR_VAR 0 9
29070: PUSH
29071: LD_INT 10
29073: PUSH
29074: LD_INT 5
29076: PUSH
29077: LD_INT 3
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29085: LD_VAR 0 6
29089: PPUSH
29090: CALL_OW 257
29094: PUSH
29095: LD_INT 14
29097: EQUAL
29098: IFFALSE 29119
// points := [ 10 , 0 , 0 ] ;
29100: LD_ADDR_VAR 0 9
29104: PUSH
29105: LD_INT 10
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: LIST
29118: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29119: LD_VAR 0 6
29123: PPUSH
29124: CALL_OW 257
29128: PUSH
29129: LD_INT 11
29131: EQUAL
29132: IFFALSE 29153
// points := [ 30 , 10 , 5 ] ;
29134: LD_ADDR_VAR 0 9
29138: PUSH
29139: LD_INT 30
29141: PUSH
29142: LD_INT 10
29144: PUSH
29145: LD_INT 5
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29153: LD_VAR 0 1
29157: PPUSH
29158: LD_INT 5
29160: PPUSH
29161: CALL_OW 321
29165: PUSH
29166: LD_INT 2
29168: EQUAL
29169: IFFALSE 29186
// bpoints := bpoints * 1.8 ;
29171: LD_ADDR_VAR 0 10
29175: PUSH
29176: LD_VAR 0 10
29180: PUSH
29181: LD_REAL  1.80000000000000E+0000
29184: MUL
29185: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29186: LD_VAR 0 6
29190: PPUSH
29191: CALL_OW 257
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: LD_INT 3
29204: PUSH
29205: LD_INT 4
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: IN
29214: PUSH
29215: LD_VAR 0 1
29219: PPUSH
29220: LD_INT 51
29222: PPUSH
29223: CALL_OW 321
29227: PUSH
29228: LD_INT 2
29230: EQUAL
29231: AND
29232: IFFALSE 29249
// bpoints := bpoints * 1.2 ;
29234: LD_ADDR_VAR 0 10
29238: PUSH
29239: LD_VAR 0 10
29243: PUSH
29244: LD_REAL  1.20000000000000E+0000
29247: MUL
29248: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29249: LD_VAR 0 6
29253: PPUSH
29254: CALL_OW 257
29258: PUSH
29259: LD_INT 5
29261: PUSH
29262: LD_INT 7
29264: PUSH
29265: LD_INT 9
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: IN
29273: PUSH
29274: LD_VAR 0 1
29278: PPUSH
29279: LD_INT 52
29281: PPUSH
29282: CALL_OW 321
29286: PUSH
29287: LD_INT 2
29289: EQUAL
29290: AND
29291: IFFALSE 29308
// bpoints := bpoints * 1.5 ;
29293: LD_ADDR_VAR 0 10
29297: PUSH
29298: LD_VAR 0 10
29302: PUSH
29303: LD_REAL  1.50000000000000E+0000
29306: MUL
29307: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29308: LD_VAR 0 1
29312: PPUSH
29313: LD_INT 66
29315: PPUSH
29316: CALL_OW 321
29320: PUSH
29321: LD_INT 2
29323: EQUAL
29324: IFFALSE 29341
// bpoints := bpoints * 1.1 ;
29326: LD_ADDR_VAR 0 10
29330: PUSH
29331: LD_VAR 0 10
29335: PUSH
29336: LD_REAL  1.10000000000000E+0000
29339: MUL
29340: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29341: LD_ADDR_VAR 0 10
29345: PUSH
29346: LD_VAR 0 10
29350: PUSH
29351: LD_VAR 0 6
29355: PPUSH
29356: LD_INT 1
29358: PPUSH
29359: CALL_OW 259
29363: PUSH
29364: LD_REAL  1.15000000000000E+0000
29367: MUL
29368: MUL
29369: ST_TO_ADDR
// end ; unit_vehicle :
29370: GO 30194
29372: LD_INT 2
29374: DOUBLE
29375: EQUAL
29376: IFTRUE 29380
29378: GO 30182
29380: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29381: LD_VAR 0 6
29385: PPUSH
29386: CALL_OW 264
29390: PUSH
29391: LD_INT 2
29393: PUSH
29394: LD_INT 42
29396: PUSH
29397: LD_INT 24
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: LIST
29404: IN
29405: IFFALSE 29426
// points := [ 25 , 5 , 3 ] ;
29407: LD_ADDR_VAR 0 9
29411: PUSH
29412: LD_INT 25
29414: PUSH
29415: LD_INT 5
29417: PUSH
29418: LD_INT 3
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29426: LD_VAR 0 6
29430: PPUSH
29431: CALL_OW 264
29435: PUSH
29436: LD_INT 4
29438: PUSH
29439: LD_INT 43
29441: PUSH
29442: LD_INT 25
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: IN
29450: IFFALSE 29471
// points := [ 40 , 15 , 5 ] ;
29452: LD_ADDR_VAR 0 9
29456: PUSH
29457: LD_INT 40
29459: PUSH
29460: LD_INT 15
29462: PUSH
29463: LD_INT 5
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29471: LD_VAR 0 6
29475: PPUSH
29476: CALL_OW 264
29480: PUSH
29481: LD_INT 3
29483: PUSH
29484: LD_INT 23
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: IN
29491: IFFALSE 29512
// points := [ 7 , 25 , 8 ] ;
29493: LD_ADDR_VAR 0 9
29497: PUSH
29498: LD_INT 7
29500: PUSH
29501: LD_INT 25
29503: PUSH
29504: LD_INT 8
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29512: LD_VAR 0 6
29516: PPUSH
29517: CALL_OW 264
29521: PUSH
29522: LD_INT 5
29524: PUSH
29525: LD_INT 27
29527: PUSH
29528: LD_INT 44
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: LIST
29535: IN
29536: IFFALSE 29557
// points := [ 14 , 50 , 16 ] ;
29538: LD_ADDR_VAR 0 9
29542: PUSH
29543: LD_INT 14
29545: PUSH
29546: LD_INT 50
29548: PUSH
29549: LD_INT 16
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29557: LD_VAR 0 6
29561: PPUSH
29562: CALL_OW 264
29566: PUSH
29567: LD_INT 6
29569: PUSH
29570: LD_INT 46
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: IN
29577: IFFALSE 29598
// points := [ 32 , 120 , 70 ] ;
29579: LD_ADDR_VAR 0 9
29583: PUSH
29584: LD_INT 32
29586: PUSH
29587: LD_INT 120
29589: PUSH
29590: LD_INT 70
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
29598: LD_VAR 0 6
29602: PPUSH
29603: CALL_OW 264
29607: PUSH
29608: LD_INT 7
29610: PUSH
29611: LD_INT 28
29613: PUSH
29614: LD_INT 45
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: IN
29622: IFFALSE 29643
// points := [ 35 , 20 , 45 ] ;
29624: LD_ADDR_VAR 0 9
29628: PUSH
29629: LD_INT 35
29631: PUSH
29632: LD_INT 20
29634: PUSH
29635: LD_INT 45
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29643: LD_VAR 0 6
29647: PPUSH
29648: CALL_OW 264
29652: PUSH
29653: LD_INT 47
29655: PUSH
29656: EMPTY
29657: LIST
29658: IN
29659: IFFALSE 29680
// points := [ 67 , 45 , 75 ] ;
29661: LD_ADDR_VAR 0 9
29665: PUSH
29666: LD_INT 67
29668: PUSH
29669: LD_INT 45
29671: PUSH
29672: LD_INT 75
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29680: LD_VAR 0 6
29684: PPUSH
29685: CALL_OW 264
29689: PUSH
29690: LD_INT 26
29692: PUSH
29693: EMPTY
29694: LIST
29695: IN
29696: IFFALSE 29717
// points := [ 120 , 30 , 80 ] ;
29698: LD_ADDR_VAR 0 9
29702: PUSH
29703: LD_INT 120
29705: PUSH
29706: LD_INT 30
29708: PUSH
29709: LD_INT 80
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29717: LD_VAR 0 6
29721: PPUSH
29722: CALL_OW 264
29726: PUSH
29727: LD_INT 22
29729: PUSH
29730: EMPTY
29731: LIST
29732: IN
29733: IFFALSE 29754
// points := [ 40 , 1 , 1 ] ;
29735: LD_ADDR_VAR 0 9
29739: PUSH
29740: LD_INT 40
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: LIST
29753: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29754: LD_VAR 0 6
29758: PPUSH
29759: CALL_OW 264
29763: PUSH
29764: LD_INT 29
29766: PUSH
29767: EMPTY
29768: LIST
29769: IN
29770: IFFALSE 29791
// points := [ 70 , 200 , 400 ] ;
29772: LD_ADDR_VAR 0 9
29776: PUSH
29777: LD_INT 70
29779: PUSH
29780: LD_INT 200
29782: PUSH
29783: LD_INT 400
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: LIST
29790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29791: LD_VAR 0 6
29795: PPUSH
29796: CALL_OW 264
29800: PUSH
29801: LD_INT 14
29803: PUSH
29804: LD_INT 53
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: IN
29811: IFFALSE 29832
// points := [ 40 , 10 , 20 ] ;
29813: LD_ADDR_VAR 0 9
29817: PUSH
29818: LD_INT 40
29820: PUSH
29821: LD_INT 10
29823: PUSH
29824: LD_INT 20
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29832: LD_VAR 0 6
29836: PPUSH
29837: CALL_OW 264
29841: PUSH
29842: LD_INT 9
29844: PUSH
29845: EMPTY
29846: LIST
29847: IN
29848: IFFALSE 29869
// points := [ 5 , 70 , 20 ] ;
29850: LD_ADDR_VAR 0 9
29854: PUSH
29855: LD_INT 5
29857: PUSH
29858: LD_INT 70
29860: PUSH
29861: LD_INT 20
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29869: LD_VAR 0 6
29873: PPUSH
29874: CALL_OW 264
29878: PUSH
29879: LD_INT 10
29881: PUSH
29882: EMPTY
29883: LIST
29884: IN
29885: IFFALSE 29906
// points := [ 35 , 110 , 70 ] ;
29887: LD_ADDR_VAR 0 9
29891: PUSH
29892: LD_INT 35
29894: PUSH
29895: LD_INT 110
29897: PUSH
29898: LD_INT 70
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29906: LD_VAR 0 6
29910: PPUSH
29911: CALL_OW 265
29915: PUSH
29916: LD_INT 25
29918: EQUAL
29919: IFFALSE 29940
// points := [ 80 , 65 , 100 ] ;
29921: LD_ADDR_VAR 0 9
29925: PUSH
29926: LD_INT 80
29928: PUSH
29929: LD_INT 65
29931: PUSH
29932: LD_INT 100
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29940: LD_VAR 0 6
29944: PPUSH
29945: CALL_OW 263
29949: PUSH
29950: LD_INT 1
29952: EQUAL
29953: IFFALSE 29988
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29955: LD_ADDR_VAR 0 10
29959: PUSH
29960: LD_VAR 0 10
29964: PUSH
29965: LD_VAR 0 6
29969: PPUSH
29970: CALL_OW 311
29974: PPUSH
29975: LD_INT 3
29977: PPUSH
29978: CALL_OW 259
29982: PUSH
29983: LD_INT 4
29985: MUL
29986: MUL
29987: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29988: LD_VAR 0 6
29992: PPUSH
29993: CALL_OW 263
29997: PUSH
29998: LD_INT 2
30000: EQUAL
30001: IFFALSE 30052
// begin j := IsControledBy ( i ) ;
30003: LD_ADDR_VAR 0 7
30007: PUSH
30008: LD_VAR 0 6
30012: PPUSH
30013: CALL_OW 312
30017: ST_TO_ADDR
// if j then
30018: LD_VAR 0 7
30022: IFFALSE 30052
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30024: LD_ADDR_VAR 0 10
30028: PUSH
30029: LD_VAR 0 10
30033: PUSH
30034: LD_VAR 0 7
30038: PPUSH
30039: LD_INT 3
30041: PPUSH
30042: CALL_OW 259
30046: PUSH
30047: LD_INT 3
30049: MUL
30050: MUL
30051: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30052: LD_VAR 0 6
30056: PPUSH
30057: CALL_OW 264
30061: PUSH
30062: LD_INT 5
30064: PUSH
30065: LD_INT 6
30067: PUSH
30068: LD_INT 46
30070: PUSH
30071: LD_INT 44
30073: PUSH
30074: LD_INT 47
30076: PUSH
30077: LD_INT 45
30079: PUSH
30080: LD_INT 28
30082: PUSH
30083: LD_INT 7
30085: PUSH
30086: LD_INT 27
30088: PUSH
30089: LD_INT 29
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: IN
30104: PUSH
30105: LD_VAR 0 1
30109: PPUSH
30110: LD_INT 52
30112: PPUSH
30113: CALL_OW 321
30117: PUSH
30118: LD_INT 2
30120: EQUAL
30121: AND
30122: IFFALSE 30139
// bpoints := bpoints * 1.2 ;
30124: LD_ADDR_VAR 0 10
30128: PUSH
30129: LD_VAR 0 10
30133: PUSH
30134: LD_REAL  1.20000000000000E+0000
30137: MUL
30138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30139: LD_VAR 0 6
30143: PPUSH
30144: CALL_OW 264
30148: PUSH
30149: LD_INT 6
30151: PUSH
30152: LD_INT 46
30154: PUSH
30155: LD_INT 47
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: IN
30163: IFFALSE 30180
// bpoints := bpoints * 1.2 ;
30165: LD_ADDR_VAR 0 10
30169: PUSH
30170: LD_VAR 0 10
30174: PUSH
30175: LD_REAL  1.20000000000000E+0000
30178: MUL
30179: ST_TO_ADDR
// end ; unit_building :
30180: GO 30194
30182: LD_INT 3
30184: DOUBLE
30185: EQUAL
30186: IFTRUE 30190
30188: GO 30193
30190: POP
// ; end ;
30191: GO 30194
30193: POP
// for j = 1 to 3 do
30194: LD_ADDR_VAR 0 7
30198: PUSH
30199: DOUBLE
30200: LD_INT 1
30202: DEC
30203: ST_TO_ADDR
30204: LD_INT 3
30206: PUSH
30207: FOR_TO
30208: IFFALSE 30261
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30210: LD_ADDR_VAR 0 5
30214: PUSH
30215: LD_VAR 0 5
30219: PPUSH
30220: LD_VAR 0 7
30224: PPUSH
30225: LD_VAR 0 5
30229: PUSH
30230: LD_VAR 0 7
30234: ARRAY
30235: PUSH
30236: LD_VAR 0 9
30240: PUSH
30241: LD_VAR 0 7
30245: ARRAY
30246: PUSH
30247: LD_VAR 0 10
30251: MUL
30252: PLUS
30253: PPUSH
30254: CALL_OW 1
30258: ST_TO_ADDR
30259: GO 30207
30261: POP
30262: POP
// end ;
30263: GO 28746
30265: POP
30266: POP
// result := Replace ( result , 4 , tmp ) ;
30267: LD_ADDR_VAR 0 5
30271: PUSH
30272: LD_VAR 0 5
30276: PPUSH
30277: LD_INT 4
30279: PPUSH
30280: LD_VAR 0 8
30284: PPUSH
30285: CALL_OW 1
30289: ST_TO_ADDR
// end ;
30290: LD_VAR 0 5
30294: RET
// export function DangerAtRange ( unit , range ) ; begin
30295: LD_INT 0
30297: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30298: LD_ADDR_VAR 0 3
30302: PUSH
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL_OW 255
30312: PPUSH
30313: LD_VAR 0 1
30317: PPUSH
30318: CALL_OW 250
30322: PPUSH
30323: LD_VAR 0 1
30327: PPUSH
30328: CALL_OW 251
30332: PPUSH
30333: LD_VAR 0 2
30337: PPUSH
30338: CALL 28598 0 4
30342: ST_TO_ADDR
// end ;
30343: LD_VAR 0 3
30347: RET
// export function DangerInArea ( side , area ) ; begin
30348: LD_INT 0
30350: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30351: LD_ADDR_VAR 0 3
30355: PUSH
30356: LD_VAR 0 2
30360: PPUSH
30361: LD_INT 81
30363: PUSH
30364: LD_VAR 0 1
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PPUSH
30373: CALL_OW 70
30377: ST_TO_ADDR
// end ;
30378: LD_VAR 0 3
30382: RET
// export function IsExtension ( b ) ; begin
30383: LD_INT 0
30385: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30386: LD_ADDR_VAR 0 2
30390: PUSH
30391: LD_VAR 0 1
30395: PUSH
30396: LD_INT 23
30398: PUSH
30399: LD_INT 20
30401: PUSH
30402: LD_INT 22
30404: PUSH
30405: LD_INT 17
30407: PUSH
30408: LD_INT 24
30410: PUSH
30411: LD_INT 21
30413: PUSH
30414: LD_INT 19
30416: PUSH
30417: LD_INT 16
30419: PUSH
30420: LD_INT 25
30422: PUSH
30423: LD_INT 18
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: IN
30438: ST_TO_ADDR
// end ;
30439: LD_VAR 0 2
30443: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
30444: LD_INT 0
30446: PPUSH
30447: PPUSH
30448: PPUSH
// result := [ ] ;
30449: LD_ADDR_VAR 0 3
30453: PUSH
30454: EMPTY
30455: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30456: LD_ADDR_VAR 0 4
30460: PUSH
30461: LD_VAR 0 2
30465: PPUSH
30466: LD_INT 21
30468: PUSH
30469: LD_INT 3
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PPUSH
30476: CALL_OW 70
30480: ST_TO_ADDR
// if not tmp then
30481: LD_VAR 0 4
30485: NOT
30486: IFFALSE 30490
// exit ;
30488: GO 30548
// for i in tmp do
30490: LD_ADDR_VAR 0 5
30494: PUSH
30495: LD_VAR 0 4
30499: PUSH
30500: FOR_IN
30501: IFFALSE 30536
// if GetBase ( i ) <> base then
30503: LD_VAR 0 5
30507: PPUSH
30508: CALL_OW 274
30512: PUSH
30513: LD_VAR 0 1
30517: NONEQUAL
30518: IFFALSE 30534
// ComLinkToBase ( base , i ) ;
30520: LD_VAR 0 1
30524: PPUSH
30525: LD_VAR 0 5
30529: PPUSH
30530: CALL_OW 169
30534: GO 30500
30536: POP
30537: POP
// result := tmp ;
30538: LD_ADDR_VAR 0 3
30542: PUSH
30543: LD_VAR 0 4
30547: ST_TO_ADDR
// end ;
30548: LD_VAR 0 3
30552: RET
// export function ComComplete ( unit , b ) ; var i ; begin
30553: LD_INT 0
30555: PPUSH
30556: PPUSH
// if BuildingStatus ( b ) = bs_build then
30557: LD_VAR 0 2
30561: PPUSH
30562: CALL_OW 461
30566: PUSH
30567: LD_INT 1
30569: EQUAL
30570: IFFALSE 30630
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30572: LD_VAR 0 1
30576: PPUSH
30577: LD_STRING h
30579: PUSH
30580: LD_VAR 0 2
30584: PPUSH
30585: CALL_OW 250
30589: PUSH
30590: LD_VAR 0 2
30594: PPUSH
30595: CALL_OW 251
30599: PUSH
30600: LD_VAR 0 2
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: PPUSH
30626: CALL_OW 446
// end ;
30630: LD_VAR 0 3
30634: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30635: LD_INT 0
30637: PPUSH
30638: PPUSH
30639: PPUSH
30640: PPUSH
30641: PPUSH
30642: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
30643: LD_VAR 0 1
30647: NOT
30648: PUSH
30649: LD_VAR 0 1
30653: PPUSH
30654: CALL_OW 263
30658: PUSH
30659: LD_INT 2
30661: EQUAL
30662: NOT
30663: OR
30664: IFFALSE 30668
// exit ;
30666: GO 30984
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30668: LD_ADDR_VAR 0 6
30672: PUSH
30673: LD_INT 22
30675: PUSH
30676: LD_VAR 0 1
30680: PPUSH
30681: CALL_OW 255
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: LD_INT 30
30695: PUSH
30696: LD_INT 36
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 34
30705: PUSH
30706: LD_INT 31
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: LIST
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PPUSH
30722: CALL_OW 69
30726: ST_TO_ADDR
// if not tmp then
30727: LD_VAR 0 6
30731: NOT
30732: IFFALSE 30736
// exit ;
30734: GO 30984
// result := [ ] ;
30736: LD_ADDR_VAR 0 2
30740: PUSH
30741: EMPTY
30742: ST_TO_ADDR
// for i in tmp do
30743: LD_ADDR_VAR 0 3
30747: PUSH
30748: LD_VAR 0 6
30752: PUSH
30753: FOR_IN
30754: IFFALSE 30825
// begin t := UnitsInside ( i ) ;
30756: LD_ADDR_VAR 0 4
30760: PUSH
30761: LD_VAR 0 3
30765: PPUSH
30766: CALL_OW 313
30770: ST_TO_ADDR
// if t then
30771: LD_VAR 0 4
30775: IFFALSE 30823
// for j in t do
30777: LD_ADDR_VAR 0 7
30781: PUSH
30782: LD_VAR 0 4
30786: PUSH
30787: FOR_IN
30788: IFFALSE 30821
// result := Insert ( result , result + 1 , j ) ;
30790: LD_ADDR_VAR 0 2
30794: PUSH
30795: LD_VAR 0 2
30799: PPUSH
30800: LD_VAR 0 2
30804: PUSH
30805: LD_INT 1
30807: PLUS
30808: PPUSH
30809: LD_VAR 0 7
30813: PPUSH
30814: CALL_OW 2
30818: ST_TO_ADDR
30819: GO 30787
30821: POP
30822: POP
// end ;
30823: GO 30753
30825: POP
30826: POP
// if not result then
30827: LD_VAR 0 2
30831: NOT
30832: IFFALSE 30836
// exit ;
30834: GO 30984
// mech := result [ 1 ] ;
30836: LD_ADDR_VAR 0 5
30840: PUSH
30841: LD_VAR 0 2
30845: PUSH
30846: LD_INT 1
30848: ARRAY
30849: ST_TO_ADDR
// if result > 1 then
30850: LD_VAR 0 2
30854: PUSH
30855: LD_INT 1
30857: GREATER
30858: IFFALSE 30970
// for i = 2 to result do
30860: LD_ADDR_VAR 0 3
30864: PUSH
30865: DOUBLE
30866: LD_INT 2
30868: DEC
30869: ST_TO_ADDR
30870: LD_VAR 0 2
30874: PUSH
30875: FOR_TO
30876: IFFALSE 30968
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30878: LD_ADDR_VAR 0 4
30882: PUSH
30883: LD_VAR 0 2
30887: PUSH
30888: LD_VAR 0 3
30892: ARRAY
30893: PPUSH
30894: LD_INT 3
30896: PPUSH
30897: CALL_OW 259
30901: PUSH
30902: LD_VAR 0 2
30906: PUSH
30907: LD_VAR 0 3
30911: ARRAY
30912: PPUSH
30913: CALL_OW 432
30917: MINUS
30918: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30919: LD_VAR 0 4
30923: PUSH
30924: LD_VAR 0 5
30928: PPUSH
30929: LD_INT 3
30931: PPUSH
30932: CALL_OW 259
30936: PUSH
30937: LD_VAR 0 5
30941: PPUSH
30942: CALL_OW 432
30946: MINUS
30947: GREATEREQUAL
30948: IFFALSE 30966
// mech := result [ i ] ;
30950: LD_ADDR_VAR 0 5
30954: PUSH
30955: LD_VAR 0 2
30959: PUSH
30960: LD_VAR 0 3
30964: ARRAY
30965: ST_TO_ADDR
// end ;
30966: GO 30875
30968: POP
30969: POP
// ComLinkTo ( vehicle , mech ) ;
30970: LD_VAR 0 1
30974: PPUSH
30975: LD_VAR 0 5
30979: PPUSH
30980: CALL_OW 135
// end ;
30984: LD_VAR 0 2
30988: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30989: LD_INT 0
30991: PPUSH
30992: PPUSH
30993: PPUSH
30994: PPUSH
30995: PPUSH
30996: PPUSH
30997: PPUSH
30998: PPUSH
30999: PPUSH
31000: PPUSH
31001: PPUSH
31002: PPUSH
31003: PPUSH
// result := [ ] ;
31004: LD_ADDR_VAR 0 7
31008: PUSH
31009: EMPTY
31010: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31011: LD_VAR 0 1
31015: PPUSH
31016: CALL_OW 266
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: IN
31031: NOT
31032: IFFALSE 31036
// exit ;
31034: GO 32667
// if name then
31036: LD_VAR 0 3
31040: IFFALSE 31056
// SetBName ( base_dep , name ) ;
31042: LD_VAR 0 1
31046: PPUSH
31047: LD_VAR 0 3
31051: PPUSH
31052: CALL_OW 500
// base := GetBase ( base_dep ) ;
31056: LD_ADDR_VAR 0 15
31060: PUSH
31061: LD_VAR 0 1
31065: PPUSH
31066: CALL_OW 274
31070: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31071: LD_ADDR_VAR 0 16
31075: PUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 255
31085: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31086: LD_ADDR_VAR 0 17
31090: PUSH
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 248
31100: ST_TO_ADDR
// if sources then
31101: LD_VAR 0 5
31105: IFFALSE 31152
// for i = 1 to 3 do
31107: LD_ADDR_VAR 0 8
31111: PUSH
31112: DOUBLE
31113: LD_INT 1
31115: DEC
31116: ST_TO_ADDR
31117: LD_INT 3
31119: PUSH
31120: FOR_TO
31121: IFFALSE 31150
// AddResourceType ( base , i , sources [ i ] ) ;
31123: LD_VAR 0 15
31127: PPUSH
31128: LD_VAR 0 8
31132: PPUSH
31133: LD_VAR 0 5
31137: PUSH
31138: LD_VAR 0 8
31142: ARRAY
31143: PPUSH
31144: CALL_OW 276
31148: GO 31120
31150: POP
31151: POP
// buildings := GetBaseBuildings ( base , area ) ;
31152: LD_ADDR_VAR 0 18
31156: PUSH
31157: LD_VAR 0 15
31161: PPUSH
31162: LD_VAR 0 2
31166: PPUSH
31167: CALL 30444 0 2
31171: ST_TO_ADDR
// InitHc ;
31172: CALL_OW 19
// InitUc ;
31176: CALL_OW 18
// uc_side := side ;
31180: LD_ADDR_OWVAR 20
31184: PUSH
31185: LD_VAR 0 16
31189: ST_TO_ADDR
// uc_nation := nation ;
31190: LD_ADDR_OWVAR 21
31194: PUSH
31195: LD_VAR 0 17
31199: ST_TO_ADDR
// if buildings then
31200: LD_VAR 0 18
31204: IFFALSE 32526
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31206: LD_ADDR_VAR 0 19
31210: PUSH
31211: LD_VAR 0 18
31215: PPUSH
31216: LD_INT 2
31218: PUSH
31219: LD_INT 30
31221: PUSH
31222: LD_INT 29
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 30
31231: PUSH
31232: LD_INT 30
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: LIST
31243: PPUSH
31244: CALL_OW 72
31248: ST_TO_ADDR
// if tmp then
31249: LD_VAR 0 19
31253: IFFALSE 31301
// for i in tmp do
31255: LD_ADDR_VAR 0 8
31259: PUSH
31260: LD_VAR 0 19
31264: PUSH
31265: FOR_IN
31266: IFFALSE 31299
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31268: LD_VAR 0 8
31272: PPUSH
31273: CALL_OW 250
31277: PPUSH
31278: LD_VAR 0 8
31282: PPUSH
31283: CALL_OW 251
31287: PPUSH
31288: LD_VAR 0 16
31292: PPUSH
31293: CALL_OW 441
31297: GO 31265
31299: POP
31300: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31301: LD_VAR 0 18
31305: PPUSH
31306: LD_INT 2
31308: PUSH
31309: LD_INT 30
31311: PUSH
31312: LD_INT 32
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 30
31321: PUSH
31322: LD_INT 33
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: PPUSH
31334: CALL_OW 72
31338: IFFALSE 31426
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31340: LD_ADDR_VAR 0 8
31344: PUSH
31345: LD_VAR 0 18
31349: PPUSH
31350: LD_INT 2
31352: PUSH
31353: LD_INT 30
31355: PUSH
31356: LD_INT 32
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 30
31365: PUSH
31366: LD_INT 33
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: PPUSH
31378: CALL_OW 72
31382: PUSH
31383: FOR_IN
31384: IFFALSE 31424
// begin if not GetBWeapon ( i ) then
31386: LD_VAR 0 8
31390: PPUSH
31391: CALL_OW 269
31395: NOT
31396: IFFALSE 31422
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31398: LD_VAR 0 8
31402: PPUSH
31403: LD_VAR 0 8
31407: PPUSH
31408: LD_VAR 0 2
31412: PPUSH
31413: CALL 32672 0 2
31417: PPUSH
31418: CALL_OW 431
// end ;
31422: GO 31383
31424: POP
31425: POP
// end ; for i = 1 to personel do
31426: LD_ADDR_VAR 0 8
31430: PUSH
31431: DOUBLE
31432: LD_INT 1
31434: DEC
31435: ST_TO_ADDR
31436: LD_VAR 0 6
31440: PUSH
31441: FOR_TO
31442: IFFALSE 32506
// begin if i > 4 then
31444: LD_VAR 0 8
31448: PUSH
31449: LD_INT 4
31451: GREATER
31452: IFFALSE 31456
// break ;
31454: GO 32506
// case i of 1 :
31456: LD_VAR 0 8
31460: PUSH
31461: LD_INT 1
31463: DOUBLE
31464: EQUAL
31465: IFTRUE 31469
31467: GO 31549
31469: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31470: LD_ADDR_VAR 0 12
31474: PUSH
31475: LD_VAR 0 18
31479: PPUSH
31480: LD_INT 22
31482: PUSH
31483: LD_VAR 0 16
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 58
31494: PUSH
31495: EMPTY
31496: LIST
31497: PUSH
31498: LD_INT 2
31500: PUSH
31501: LD_INT 30
31503: PUSH
31504: LD_INT 32
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 30
31513: PUSH
31514: LD_INT 4
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 30
31523: PUSH
31524: LD_INT 5
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: PPUSH
31542: CALL_OW 72
31546: ST_TO_ADDR
31547: GO 31771
31549: LD_INT 2
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31619
31557: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31558: LD_ADDR_VAR 0 12
31562: PUSH
31563: LD_VAR 0 18
31567: PPUSH
31568: LD_INT 22
31570: PUSH
31571: LD_VAR 0 16
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: LD_INT 30
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 30
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PPUSH
31612: CALL_OW 72
31616: ST_TO_ADDR
31617: GO 31771
31619: LD_INT 3
31621: DOUBLE
31622: EQUAL
31623: IFTRUE 31627
31625: GO 31689
31627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31628: LD_ADDR_VAR 0 12
31632: PUSH
31633: LD_VAR 0 18
31637: PPUSH
31638: LD_INT 22
31640: PUSH
31641: LD_VAR 0 16
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 2
31652: PUSH
31653: LD_INT 30
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 30
31665: PUSH
31666: LD_INT 3
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: LIST
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PPUSH
31682: CALL_OW 72
31686: ST_TO_ADDR
31687: GO 31771
31689: LD_INT 4
31691: DOUBLE
31692: EQUAL
31693: IFTRUE 31697
31695: GO 31770
31697: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31698: LD_ADDR_VAR 0 12
31702: PUSH
31703: LD_VAR 0 18
31707: PPUSH
31708: LD_INT 22
31710: PUSH
31711: LD_VAR 0 16
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 30
31725: PUSH
31726: LD_INT 6
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 30
31735: PUSH
31736: LD_INT 7
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 30
31745: PUSH
31746: LD_INT 8
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PPUSH
31763: CALL_OW 72
31767: ST_TO_ADDR
31768: GO 31771
31770: POP
// if i = 1 then
31771: LD_VAR 0 8
31775: PUSH
31776: LD_INT 1
31778: EQUAL
31779: IFFALSE 31890
// begin tmp := [ ] ;
31781: LD_ADDR_VAR 0 19
31785: PUSH
31786: EMPTY
31787: ST_TO_ADDR
// for j in f do
31788: LD_ADDR_VAR 0 9
31792: PUSH
31793: LD_VAR 0 12
31797: PUSH
31798: FOR_IN
31799: IFFALSE 31872
// if GetBType ( j ) = b_bunker then
31801: LD_VAR 0 9
31805: PPUSH
31806: CALL_OW 266
31810: PUSH
31811: LD_INT 32
31813: EQUAL
31814: IFFALSE 31841
// tmp := Insert ( tmp , 1 , j ) else
31816: LD_ADDR_VAR 0 19
31820: PUSH
31821: LD_VAR 0 19
31825: PPUSH
31826: LD_INT 1
31828: PPUSH
31829: LD_VAR 0 9
31833: PPUSH
31834: CALL_OW 2
31838: ST_TO_ADDR
31839: GO 31870
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31841: LD_ADDR_VAR 0 19
31845: PUSH
31846: LD_VAR 0 19
31850: PPUSH
31851: LD_VAR 0 19
31855: PUSH
31856: LD_INT 1
31858: PLUS
31859: PPUSH
31860: LD_VAR 0 9
31864: PPUSH
31865: CALL_OW 2
31869: ST_TO_ADDR
31870: GO 31798
31872: POP
31873: POP
// if tmp then
31874: LD_VAR 0 19
31878: IFFALSE 31890
// f := tmp ;
31880: LD_ADDR_VAR 0 12
31884: PUSH
31885: LD_VAR 0 19
31889: ST_TO_ADDR
// end ; x := personel [ i ] ;
31890: LD_ADDR_VAR 0 13
31894: PUSH
31895: LD_VAR 0 6
31899: PUSH
31900: LD_VAR 0 8
31904: ARRAY
31905: ST_TO_ADDR
// if x = - 1 then
31906: LD_VAR 0 13
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: EQUAL
31915: IFFALSE 32124
// begin for j in f do
31917: LD_ADDR_VAR 0 9
31921: PUSH
31922: LD_VAR 0 12
31926: PUSH
31927: FOR_IN
31928: IFFALSE 32120
// repeat InitHc ;
31930: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31934: LD_VAR 0 9
31938: PPUSH
31939: CALL_OW 266
31943: PUSH
31944: LD_INT 5
31946: EQUAL
31947: IFFALSE 32017
// begin if UnitsInside ( j ) < 3 then
31949: LD_VAR 0 9
31953: PPUSH
31954: CALL_OW 313
31958: PUSH
31959: LD_INT 3
31961: LESS
31962: IFFALSE 31998
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31964: LD_INT 0
31966: PPUSH
31967: LD_INT 5
31969: PUSH
31970: LD_INT 8
31972: PUSH
31973: LD_INT 9
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: LIST
31980: PUSH
31981: LD_VAR 0 17
31985: ARRAY
31986: PPUSH
31987: LD_VAR 0 4
31991: PPUSH
31992: CALL_OW 380
31996: GO 32015
// PrepareHuman ( false , i , skill ) ;
31998: LD_INT 0
32000: PPUSH
32001: LD_VAR 0 8
32005: PPUSH
32006: LD_VAR 0 4
32010: PPUSH
32011: CALL_OW 380
// end else
32015: GO 32034
// PrepareHuman ( false , i , skill ) ;
32017: LD_INT 0
32019: PPUSH
32020: LD_VAR 0 8
32024: PPUSH
32025: LD_VAR 0 4
32029: PPUSH
32030: CALL_OW 380
// un := CreateHuman ;
32034: LD_ADDR_VAR 0 14
32038: PUSH
32039: CALL_OW 44
32043: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32044: LD_ADDR_VAR 0 7
32048: PUSH
32049: LD_VAR 0 7
32053: PPUSH
32054: LD_INT 1
32056: PPUSH
32057: LD_VAR 0 14
32061: PPUSH
32062: CALL_OW 2
32066: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32067: LD_VAR 0 14
32071: PPUSH
32072: LD_VAR 0 9
32076: PPUSH
32077: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32081: LD_VAR 0 9
32085: PPUSH
32086: CALL_OW 313
32090: PUSH
32091: LD_INT 6
32093: EQUAL
32094: PUSH
32095: LD_VAR 0 9
32099: PPUSH
32100: CALL_OW 266
32104: PUSH
32105: LD_INT 32
32107: PUSH
32108: LD_INT 31
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: IN
32115: OR
32116: IFFALSE 31930
32118: GO 31927
32120: POP
32121: POP
// end else
32122: GO 32504
// for j = 1 to x do
32124: LD_ADDR_VAR 0 9
32128: PUSH
32129: DOUBLE
32130: LD_INT 1
32132: DEC
32133: ST_TO_ADDR
32134: LD_VAR 0 13
32138: PUSH
32139: FOR_TO
32140: IFFALSE 32502
// begin InitHc ;
32142: CALL_OW 19
// if not f then
32146: LD_VAR 0 12
32150: NOT
32151: IFFALSE 32240
// begin PrepareHuman ( false , i , skill ) ;
32153: LD_INT 0
32155: PPUSH
32156: LD_VAR 0 8
32160: PPUSH
32161: LD_VAR 0 4
32165: PPUSH
32166: CALL_OW 380
// un := CreateHuman ;
32170: LD_ADDR_VAR 0 14
32174: PUSH
32175: CALL_OW 44
32179: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32180: LD_ADDR_VAR 0 7
32184: PUSH
32185: LD_VAR 0 7
32189: PPUSH
32190: LD_INT 1
32192: PPUSH
32193: LD_VAR 0 14
32197: PPUSH
32198: CALL_OW 2
32202: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32203: LD_VAR 0 14
32207: PPUSH
32208: LD_VAR 0 1
32212: PPUSH
32213: CALL_OW 250
32217: PPUSH
32218: LD_VAR 0 1
32222: PPUSH
32223: CALL_OW 251
32227: PPUSH
32228: LD_INT 10
32230: PPUSH
32231: LD_INT 0
32233: PPUSH
32234: CALL_OW 50
// continue ;
32238: GO 32139
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32240: LD_VAR 0 12
32244: PUSH
32245: LD_INT 1
32247: ARRAY
32248: PPUSH
32249: CALL_OW 313
32253: PUSH
32254: LD_VAR 0 12
32258: PUSH
32259: LD_INT 1
32261: ARRAY
32262: PPUSH
32263: CALL_OW 266
32267: PUSH
32268: LD_INT 32
32270: PUSH
32271: LD_INT 31
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: IN
32278: AND
32279: PUSH
32280: LD_VAR 0 12
32284: PUSH
32285: LD_INT 1
32287: ARRAY
32288: PPUSH
32289: CALL_OW 313
32293: PUSH
32294: LD_INT 6
32296: EQUAL
32297: OR
32298: IFFALSE 32318
// f := Delete ( f , 1 ) ;
32300: LD_ADDR_VAR 0 12
32304: PUSH
32305: LD_VAR 0 12
32309: PPUSH
32310: LD_INT 1
32312: PPUSH
32313: CALL_OW 3
32317: ST_TO_ADDR
// if not f then
32318: LD_VAR 0 12
32322: NOT
32323: IFFALSE 32341
// begin x := x + 2 ;
32325: LD_ADDR_VAR 0 13
32329: PUSH
32330: LD_VAR 0 13
32334: PUSH
32335: LD_INT 2
32337: PLUS
32338: ST_TO_ADDR
// continue ;
32339: GO 32139
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32341: LD_VAR 0 12
32345: PUSH
32346: LD_INT 1
32348: ARRAY
32349: PPUSH
32350: CALL_OW 266
32354: PUSH
32355: LD_INT 5
32357: EQUAL
32358: IFFALSE 32432
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32360: LD_VAR 0 12
32364: PUSH
32365: LD_INT 1
32367: ARRAY
32368: PPUSH
32369: CALL_OW 313
32373: PUSH
32374: LD_INT 3
32376: LESS
32377: IFFALSE 32413
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32379: LD_INT 0
32381: PPUSH
32382: LD_INT 5
32384: PUSH
32385: LD_INT 8
32387: PUSH
32388: LD_INT 9
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: LIST
32395: PUSH
32396: LD_VAR 0 17
32400: ARRAY
32401: PPUSH
32402: LD_VAR 0 4
32406: PPUSH
32407: CALL_OW 380
32411: GO 32430
// PrepareHuman ( false , i , skill ) ;
32413: LD_INT 0
32415: PPUSH
32416: LD_VAR 0 8
32420: PPUSH
32421: LD_VAR 0 4
32425: PPUSH
32426: CALL_OW 380
// end else
32430: GO 32449
// PrepareHuman ( false , i , skill ) ;
32432: LD_INT 0
32434: PPUSH
32435: LD_VAR 0 8
32439: PPUSH
32440: LD_VAR 0 4
32444: PPUSH
32445: CALL_OW 380
// un := CreateHuman ;
32449: LD_ADDR_VAR 0 14
32453: PUSH
32454: CALL_OW 44
32458: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32459: LD_ADDR_VAR 0 7
32463: PUSH
32464: LD_VAR 0 7
32468: PPUSH
32469: LD_INT 1
32471: PPUSH
32472: LD_VAR 0 14
32476: PPUSH
32477: CALL_OW 2
32481: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32482: LD_VAR 0 14
32486: PPUSH
32487: LD_VAR 0 12
32491: PUSH
32492: LD_INT 1
32494: ARRAY
32495: PPUSH
32496: CALL_OW 52
// end ;
32500: GO 32139
32502: POP
32503: POP
// end ;
32504: GO 31441
32506: POP
32507: POP
// result := result ^ buildings ;
32508: LD_ADDR_VAR 0 7
32512: PUSH
32513: LD_VAR 0 7
32517: PUSH
32518: LD_VAR 0 18
32522: ADD
32523: ST_TO_ADDR
// end else
32524: GO 32667
// begin for i = 1 to personel do
32526: LD_ADDR_VAR 0 8
32530: PUSH
32531: DOUBLE
32532: LD_INT 1
32534: DEC
32535: ST_TO_ADDR
32536: LD_VAR 0 6
32540: PUSH
32541: FOR_TO
32542: IFFALSE 32665
// begin if i > 4 then
32544: LD_VAR 0 8
32548: PUSH
32549: LD_INT 4
32551: GREATER
32552: IFFALSE 32556
// break ;
32554: GO 32665
// x := personel [ i ] ;
32556: LD_ADDR_VAR 0 13
32560: PUSH
32561: LD_VAR 0 6
32565: PUSH
32566: LD_VAR 0 8
32570: ARRAY
32571: ST_TO_ADDR
// if x = - 1 then
32572: LD_VAR 0 13
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: EQUAL
32581: IFFALSE 32585
// continue ;
32583: GO 32541
// PrepareHuman ( false , i , skill ) ;
32585: LD_INT 0
32587: PPUSH
32588: LD_VAR 0 8
32592: PPUSH
32593: LD_VAR 0 4
32597: PPUSH
32598: CALL_OW 380
// un := CreateHuman ;
32602: LD_ADDR_VAR 0 14
32606: PUSH
32607: CALL_OW 44
32611: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32612: LD_VAR 0 14
32616: PPUSH
32617: LD_VAR 0 1
32621: PPUSH
32622: CALL_OW 250
32626: PPUSH
32627: LD_VAR 0 1
32631: PPUSH
32632: CALL_OW 251
32636: PPUSH
32637: LD_INT 10
32639: PPUSH
32640: LD_INT 0
32642: PPUSH
32643: CALL_OW 50
// result := result ^ un ;
32647: LD_ADDR_VAR 0 7
32651: PUSH
32652: LD_VAR 0 7
32656: PUSH
32657: LD_VAR 0 14
32661: ADD
32662: ST_TO_ADDR
// end ;
32663: GO 32541
32665: POP
32666: POP
// end ; end ;
32667: LD_VAR 0 7
32671: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32672: LD_INT 0
32674: PPUSH
32675: PPUSH
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
32682: PPUSH
32683: PPUSH
32684: PPUSH
32685: PPUSH
32686: PPUSH
32687: PPUSH
32688: PPUSH
32689: PPUSH
// result := false ;
32690: LD_ADDR_VAR 0 3
32694: PUSH
32695: LD_INT 0
32697: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32698: LD_VAR 0 1
32702: NOT
32703: PUSH
32704: LD_VAR 0 1
32708: PPUSH
32709: CALL_OW 266
32713: PUSH
32714: LD_INT 32
32716: PUSH
32717: LD_INT 33
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: IN
32724: NOT
32725: OR
32726: IFFALSE 32730
// exit ;
32728: GO 33866
// nat := GetNation ( tower ) ;
32730: LD_ADDR_VAR 0 12
32734: PUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: CALL_OW 248
32744: ST_TO_ADDR
// side := GetSide ( tower ) ;
32745: LD_ADDR_VAR 0 16
32749: PUSH
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL_OW 255
32759: ST_TO_ADDR
// x := GetX ( tower ) ;
32760: LD_ADDR_VAR 0 10
32764: PUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: CALL_OW 250
32774: ST_TO_ADDR
// y := GetY ( tower ) ;
32775: LD_ADDR_VAR 0 11
32779: PUSH
32780: LD_VAR 0 1
32784: PPUSH
32785: CALL_OW 251
32789: ST_TO_ADDR
// if not x or not y then
32790: LD_VAR 0 10
32794: NOT
32795: PUSH
32796: LD_VAR 0 11
32800: NOT
32801: OR
32802: IFFALSE 32806
// exit ;
32804: GO 33866
// weapon := 0 ;
32806: LD_ADDR_VAR 0 18
32810: PUSH
32811: LD_INT 0
32813: ST_TO_ADDR
// fac_list := [ ] ;
32814: LD_ADDR_VAR 0 17
32818: PUSH
32819: EMPTY
32820: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
32821: LD_ADDR_VAR 0 6
32825: PUSH
32826: LD_VAR 0 1
32830: PPUSH
32831: CALL_OW 274
32835: PPUSH
32836: LD_VAR 0 2
32840: PPUSH
32841: CALL 30444 0 2
32845: PPUSH
32846: LD_INT 30
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PPUSH
32856: CALL_OW 72
32860: ST_TO_ADDR
// if not factories then
32861: LD_VAR 0 6
32865: NOT
32866: IFFALSE 32870
// exit ;
32868: GO 33866
// for i in factories do
32870: LD_ADDR_VAR 0 8
32874: PUSH
32875: LD_VAR 0 6
32879: PUSH
32880: FOR_IN
32881: IFFALSE 32906
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32883: LD_ADDR_VAR 0 17
32887: PUSH
32888: LD_VAR 0 17
32892: PUSH
32893: LD_VAR 0 8
32897: PPUSH
32898: CALL_OW 478
32902: UNION
32903: ST_TO_ADDR
32904: GO 32880
32906: POP
32907: POP
// if not fac_list then
32908: LD_VAR 0 17
32912: NOT
32913: IFFALSE 32917
// exit ;
32915: GO 33866
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32917: LD_ADDR_VAR 0 5
32921: PUSH
32922: LD_INT 4
32924: PUSH
32925: LD_INT 5
32927: PUSH
32928: LD_INT 9
32930: PUSH
32931: LD_INT 10
32933: PUSH
32934: LD_INT 6
32936: PUSH
32937: LD_INT 7
32939: PUSH
32940: LD_INT 11
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 27
32954: PUSH
32955: LD_INT 28
32957: PUSH
32958: LD_INT 26
32960: PUSH
32961: LD_INT 30
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 43
32972: PUSH
32973: LD_INT 44
32975: PUSH
32976: LD_INT 46
32978: PUSH
32979: LD_INT 45
32981: PUSH
32982: LD_INT 47
32984: PUSH
32985: LD_INT 49
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: PUSH
33001: LD_VAR 0 12
33005: ARRAY
33006: ST_TO_ADDR
// for i in list do
33007: LD_ADDR_VAR 0 8
33011: PUSH
33012: LD_VAR 0 5
33016: PUSH
33017: FOR_IN
33018: IFFALSE 33051
// if not i in fac_list then
33020: LD_VAR 0 8
33024: PUSH
33025: LD_VAR 0 17
33029: IN
33030: NOT
33031: IFFALSE 33049
// list := list diff i ;
33033: LD_ADDR_VAR 0 5
33037: PUSH
33038: LD_VAR 0 5
33042: PUSH
33043: LD_VAR 0 8
33047: DIFF
33048: ST_TO_ADDR
33049: GO 33017
33051: POP
33052: POP
// if not list then
33053: LD_VAR 0 5
33057: NOT
33058: IFFALSE 33062
// exit ;
33060: GO 33866
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33062: LD_VAR 0 12
33066: PUSH
33067: LD_INT 3
33069: EQUAL
33070: PUSH
33071: LD_INT 49
33073: PUSH
33074: LD_VAR 0 5
33078: IN
33079: AND
33080: PUSH
33081: LD_INT 31
33083: PPUSH
33084: LD_VAR 0 16
33088: PPUSH
33089: CALL_OW 321
33093: PUSH
33094: LD_INT 2
33096: EQUAL
33097: AND
33098: IFFALSE 33158
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33100: LD_INT 22
33102: PUSH
33103: LD_VAR 0 16
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 35
33114: PUSH
33115: LD_INT 49
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 91
33124: PUSH
33125: LD_VAR 0 1
33129: PUSH
33130: LD_INT 10
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: PPUSH
33143: CALL_OW 69
33147: NOT
33148: IFFALSE 33158
// weapon := ru_time_lapser ;
33150: LD_ADDR_VAR 0 18
33154: PUSH
33155: LD_INT 49
33157: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33158: LD_VAR 0 12
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: IN
33173: PUSH
33174: LD_INT 11
33176: PUSH
33177: LD_VAR 0 5
33181: IN
33182: PUSH
33183: LD_INT 30
33185: PUSH
33186: LD_VAR 0 5
33190: IN
33191: OR
33192: AND
33193: PUSH
33194: LD_INT 6
33196: PPUSH
33197: LD_VAR 0 16
33201: PPUSH
33202: CALL_OW 321
33206: PUSH
33207: LD_INT 2
33209: EQUAL
33210: AND
33211: IFFALSE 33376
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33213: LD_INT 22
33215: PUSH
33216: LD_VAR 0 16
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 2
33227: PUSH
33228: LD_INT 35
33230: PUSH
33231: LD_INT 11
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 35
33240: PUSH
33241: LD_INT 30
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 91
33255: PUSH
33256: LD_VAR 0 1
33260: PUSH
33261: LD_INT 18
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: PPUSH
33274: CALL_OW 69
33278: NOT
33279: PUSH
33280: LD_INT 22
33282: PUSH
33283: LD_VAR 0 16
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: LD_INT 30
33297: PUSH
33298: LD_INT 32
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 30
33307: PUSH
33308: LD_INT 33
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 91
33322: PUSH
33323: LD_VAR 0 1
33327: PUSH
33328: LD_INT 12
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: PUSH
33341: EMPTY
33342: LIST
33343: PPUSH
33344: CALL_OW 69
33348: PUSH
33349: LD_INT 2
33351: GREATER
33352: AND
33353: IFFALSE 33376
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33355: LD_ADDR_VAR 0 18
33359: PUSH
33360: LD_INT 11
33362: PUSH
33363: LD_INT 30
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_VAR 0 12
33374: ARRAY
33375: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33376: LD_VAR 0 18
33380: NOT
33381: PUSH
33382: LD_INT 40
33384: PPUSH
33385: LD_VAR 0 16
33389: PPUSH
33390: CALL_OW 321
33394: PUSH
33395: LD_INT 2
33397: EQUAL
33398: AND
33399: PUSH
33400: LD_INT 7
33402: PUSH
33403: LD_VAR 0 5
33407: IN
33408: PUSH
33409: LD_INT 28
33411: PUSH
33412: LD_VAR 0 5
33416: IN
33417: OR
33418: PUSH
33419: LD_INT 45
33421: PUSH
33422: LD_VAR 0 5
33426: IN
33427: OR
33428: AND
33429: IFFALSE 33683
// begin hex := GetHexInfo ( x , y ) ;
33431: LD_ADDR_VAR 0 4
33435: PUSH
33436: LD_VAR 0 10
33440: PPUSH
33441: LD_VAR 0 11
33445: PPUSH
33446: CALL_OW 546
33450: ST_TO_ADDR
// if hex [ 1 ] then
33451: LD_VAR 0 4
33455: PUSH
33456: LD_INT 1
33458: ARRAY
33459: IFFALSE 33463
// exit ;
33461: GO 33866
// height := hex [ 2 ] ;
33463: LD_ADDR_VAR 0 15
33467: PUSH
33468: LD_VAR 0 4
33472: PUSH
33473: LD_INT 2
33475: ARRAY
33476: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33477: LD_ADDR_VAR 0 14
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 2
33487: PUSH
33488: LD_INT 3
33490: PUSH
33491: LD_INT 5
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: ST_TO_ADDR
// for i in tmp do
33500: LD_ADDR_VAR 0 8
33504: PUSH
33505: LD_VAR 0 14
33509: PUSH
33510: FOR_IN
33511: IFFALSE 33681
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33513: LD_ADDR_VAR 0 9
33517: PUSH
33518: LD_VAR 0 10
33522: PPUSH
33523: LD_VAR 0 8
33527: PPUSH
33528: LD_INT 5
33530: PPUSH
33531: CALL_OW 272
33535: PUSH
33536: LD_VAR 0 11
33540: PPUSH
33541: LD_VAR 0 8
33545: PPUSH
33546: LD_INT 5
33548: PPUSH
33549: CALL_OW 273
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33558: LD_VAR 0 9
33562: PUSH
33563: LD_INT 1
33565: ARRAY
33566: PPUSH
33567: LD_VAR 0 9
33571: PUSH
33572: LD_INT 2
33574: ARRAY
33575: PPUSH
33576: CALL_OW 488
33580: IFFALSE 33679
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33582: LD_ADDR_VAR 0 4
33586: PUSH
33587: LD_VAR 0 9
33591: PUSH
33592: LD_INT 1
33594: ARRAY
33595: PPUSH
33596: LD_VAR 0 9
33600: PUSH
33601: LD_INT 2
33603: ARRAY
33604: PPUSH
33605: CALL_OW 546
33609: ST_TO_ADDR
// if hex [ 1 ] then
33610: LD_VAR 0 4
33614: PUSH
33615: LD_INT 1
33617: ARRAY
33618: IFFALSE 33622
// continue ;
33620: GO 33510
// h := hex [ 2 ] ;
33622: LD_ADDR_VAR 0 13
33626: PUSH
33627: LD_VAR 0 4
33631: PUSH
33632: LD_INT 2
33634: ARRAY
33635: ST_TO_ADDR
// if h + 7 < height then
33636: LD_VAR 0 13
33640: PUSH
33641: LD_INT 7
33643: PLUS
33644: PUSH
33645: LD_VAR 0 15
33649: LESS
33650: IFFALSE 33679
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33652: LD_ADDR_VAR 0 18
33656: PUSH
33657: LD_INT 7
33659: PUSH
33660: LD_INT 28
33662: PUSH
33663: LD_INT 45
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: PUSH
33671: LD_VAR 0 12
33675: ARRAY
33676: ST_TO_ADDR
// break ;
33677: GO 33681
// end ; end ; end ;
33679: GO 33510
33681: POP
33682: POP
// end ; if not weapon then
33683: LD_VAR 0 18
33687: NOT
33688: IFFALSE 33748
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33690: LD_ADDR_VAR 0 5
33694: PUSH
33695: LD_VAR 0 5
33699: PUSH
33700: LD_INT 11
33702: PUSH
33703: LD_INT 30
33705: PUSH
33706: LD_INT 49
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: DIFF
33714: ST_TO_ADDR
// if not list then
33715: LD_VAR 0 5
33719: NOT
33720: IFFALSE 33724
// exit ;
33722: GO 33866
// weapon := list [ rand ( 1 , list ) ] ;
33724: LD_ADDR_VAR 0 18
33728: PUSH
33729: LD_VAR 0 5
33733: PUSH
33734: LD_INT 1
33736: PPUSH
33737: LD_VAR 0 5
33741: PPUSH
33742: CALL_OW 12
33746: ARRAY
33747: ST_TO_ADDR
// end ; if weapon then
33748: LD_VAR 0 18
33752: IFFALSE 33866
// begin tmp := CostOfWeapon ( weapon ) ;
33754: LD_ADDR_VAR 0 14
33758: PUSH
33759: LD_VAR 0 18
33763: PPUSH
33764: CALL_OW 451
33768: ST_TO_ADDR
// j := GetBase ( tower ) ;
33769: LD_ADDR_VAR 0 9
33773: PUSH
33774: LD_VAR 0 1
33778: PPUSH
33779: CALL_OW 274
33783: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33784: LD_VAR 0 9
33788: PPUSH
33789: LD_INT 1
33791: PPUSH
33792: CALL_OW 275
33796: PUSH
33797: LD_VAR 0 14
33801: PUSH
33802: LD_INT 1
33804: ARRAY
33805: GREATEREQUAL
33806: PUSH
33807: LD_VAR 0 9
33811: PPUSH
33812: LD_INT 2
33814: PPUSH
33815: CALL_OW 275
33819: PUSH
33820: LD_VAR 0 14
33824: PUSH
33825: LD_INT 2
33827: ARRAY
33828: GREATEREQUAL
33829: AND
33830: PUSH
33831: LD_VAR 0 9
33835: PPUSH
33836: LD_INT 3
33838: PPUSH
33839: CALL_OW 275
33843: PUSH
33844: LD_VAR 0 14
33848: PUSH
33849: LD_INT 3
33851: ARRAY
33852: GREATEREQUAL
33853: AND
33854: IFFALSE 33866
// result := weapon ;
33856: LD_ADDR_VAR 0 3
33860: PUSH
33861: LD_VAR 0 18
33865: ST_TO_ADDR
// end ; end ;
33866: LD_VAR 0 3
33870: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33871: LD_INT 0
33873: PPUSH
33874: PPUSH
// result := true ;
33875: LD_ADDR_VAR 0 3
33879: PUSH
33880: LD_INT 1
33882: ST_TO_ADDR
// if array1 = array2 then
33883: LD_VAR 0 1
33887: PUSH
33888: LD_VAR 0 2
33892: EQUAL
33893: IFFALSE 33953
// begin for i = 1 to array1 do
33895: LD_ADDR_VAR 0 4
33899: PUSH
33900: DOUBLE
33901: LD_INT 1
33903: DEC
33904: ST_TO_ADDR
33905: LD_VAR 0 1
33909: PUSH
33910: FOR_TO
33911: IFFALSE 33949
// if array1 [ i ] <> array2 [ i ] then
33913: LD_VAR 0 1
33917: PUSH
33918: LD_VAR 0 4
33922: ARRAY
33923: PUSH
33924: LD_VAR 0 2
33928: PUSH
33929: LD_VAR 0 4
33933: ARRAY
33934: NONEQUAL
33935: IFFALSE 33947
// begin result := false ;
33937: LD_ADDR_VAR 0 3
33941: PUSH
33942: LD_INT 0
33944: ST_TO_ADDR
// break ;
33945: GO 33949
// end ;
33947: GO 33910
33949: POP
33950: POP
// end else
33951: GO 33961
// result := false ;
33953: LD_ADDR_VAR 0 3
33957: PUSH
33958: LD_INT 0
33960: ST_TO_ADDR
// end ;
33961: LD_VAR 0 3
33965: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33966: LD_INT 0
33968: PPUSH
33969: PPUSH
33970: PPUSH
// pom := GetBase ( fac ) ;
33971: LD_ADDR_VAR 0 5
33975: PUSH
33976: LD_VAR 0 1
33980: PPUSH
33981: CALL_OW 274
33985: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33986: LD_ADDR_VAR 0 4
33990: PUSH
33991: LD_VAR 0 2
33995: PUSH
33996: LD_INT 1
33998: ARRAY
33999: PPUSH
34000: LD_VAR 0 2
34004: PUSH
34005: LD_INT 2
34007: ARRAY
34008: PPUSH
34009: LD_VAR 0 2
34013: PUSH
34014: LD_INT 3
34016: ARRAY
34017: PPUSH
34018: LD_VAR 0 2
34022: PUSH
34023: LD_INT 4
34025: ARRAY
34026: PPUSH
34027: CALL_OW 449
34031: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34032: LD_ADDR_VAR 0 3
34036: PUSH
34037: LD_VAR 0 5
34041: PPUSH
34042: LD_INT 1
34044: PPUSH
34045: CALL_OW 275
34049: PUSH
34050: LD_VAR 0 4
34054: PUSH
34055: LD_INT 1
34057: ARRAY
34058: GREATEREQUAL
34059: PUSH
34060: LD_VAR 0 5
34064: PPUSH
34065: LD_INT 2
34067: PPUSH
34068: CALL_OW 275
34072: PUSH
34073: LD_VAR 0 4
34077: PUSH
34078: LD_INT 2
34080: ARRAY
34081: GREATEREQUAL
34082: AND
34083: PUSH
34084: LD_VAR 0 5
34088: PPUSH
34089: LD_INT 3
34091: PPUSH
34092: CALL_OW 275
34096: PUSH
34097: LD_VAR 0 4
34101: PUSH
34102: LD_INT 3
34104: ARRAY
34105: GREATEREQUAL
34106: AND
34107: ST_TO_ADDR
// end ;
34108: LD_VAR 0 3
34112: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34113: LD_INT 0
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
// pom := GetBase ( building ) ;
34119: LD_ADDR_VAR 0 3
34123: PUSH
34124: LD_VAR 0 1
34128: PPUSH
34129: CALL_OW 274
34133: ST_TO_ADDR
// if not pom then
34134: LD_VAR 0 3
34138: NOT
34139: IFFALSE 34143
// exit ;
34141: GO 34313
// btype := GetBType ( building ) ;
34143: LD_ADDR_VAR 0 5
34147: PUSH
34148: LD_VAR 0 1
34152: PPUSH
34153: CALL_OW 266
34157: ST_TO_ADDR
// if btype = b_armoury then
34158: LD_VAR 0 5
34162: PUSH
34163: LD_INT 4
34165: EQUAL
34166: IFFALSE 34176
// btype := b_barracks ;
34168: LD_ADDR_VAR 0 5
34172: PUSH
34173: LD_INT 5
34175: ST_TO_ADDR
// if btype = b_depot then
34176: LD_VAR 0 5
34180: PUSH
34181: LD_INT 0
34183: EQUAL
34184: IFFALSE 34194
// btype := b_warehouse ;
34186: LD_ADDR_VAR 0 5
34190: PUSH
34191: LD_INT 1
34193: ST_TO_ADDR
// if btype = b_workshop then
34194: LD_VAR 0 5
34198: PUSH
34199: LD_INT 2
34201: EQUAL
34202: IFFALSE 34212
// btype := b_factory ;
34204: LD_ADDR_VAR 0 5
34208: PUSH
34209: LD_INT 3
34211: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34212: LD_ADDR_VAR 0 4
34216: PUSH
34217: LD_VAR 0 5
34221: PPUSH
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 248
34231: PPUSH
34232: CALL_OW 450
34236: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34237: LD_ADDR_VAR 0 2
34241: PUSH
34242: LD_VAR 0 3
34246: PPUSH
34247: LD_INT 1
34249: PPUSH
34250: CALL_OW 275
34254: PUSH
34255: LD_VAR 0 4
34259: PUSH
34260: LD_INT 1
34262: ARRAY
34263: GREATEREQUAL
34264: PUSH
34265: LD_VAR 0 3
34269: PPUSH
34270: LD_INT 2
34272: PPUSH
34273: CALL_OW 275
34277: PUSH
34278: LD_VAR 0 4
34282: PUSH
34283: LD_INT 2
34285: ARRAY
34286: GREATEREQUAL
34287: AND
34288: PUSH
34289: LD_VAR 0 3
34293: PPUSH
34294: LD_INT 3
34296: PPUSH
34297: CALL_OW 275
34301: PUSH
34302: LD_VAR 0 4
34306: PUSH
34307: LD_INT 3
34309: ARRAY
34310: GREATEREQUAL
34311: AND
34312: ST_TO_ADDR
// end ;
34313: LD_VAR 0 2
34317: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34318: LD_INT 0
34320: PPUSH
34321: PPUSH
34322: PPUSH
// pom := GetBase ( building ) ;
34323: LD_ADDR_VAR 0 4
34327: PUSH
34328: LD_VAR 0 1
34332: PPUSH
34333: CALL_OW 274
34337: ST_TO_ADDR
// if not pom then
34338: LD_VAR 0 4
34342: NOT
34343: IFFALSE 34347
// exit ;
34345: GO 34448
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34347: LD_ADDR_VAR 0 5
34351: PUSH
34352: LD_VAR 0 2
34356: PPUSH
34357: LD_VAR 0 1
34361: PPUSH
34362: CALL_OW 248
34366: PPUSH
34367: CALL_OW 450
34371: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34372: LD_ADDR_VAR 0 3
34376: PUSH
34377: LD_VAR 0 4
34381: PPUSH
34382: LD_INT 1
34384: PPUSH
34385: CALL_OW 275
34389: PUSH
34390: LD_VAR 0 5
34394: PUSH
34395: LD_INT 1
34397: ARRAY
34398: GREATEREQUAL
34399: PUSH
34400: LD_VAR 0 4
34404: PPUSH
34405: LD_INT 2
34407: PPUSH
34408: CALL_OW 275
34412: PUSH
34413: LD_VAR 0 5
34417: PUSH
34418: LD_INT 2
34420: ARRAY
34421: GREATEREQUAL
34422: AND
34423: PUSH
34424: LD_VAR 0 4
34428: PPUSH
34429: LD_INT 3
34431: PPUSH
34432: CALL_OW 275
34436: PUSH
34437: LD_VAR 0 5
34441: PUSH
34442: LD_INT 3
34444: ARRAY
34445: GREATEREQUAL
34446: AND
34447: ST_TO_ADDR
// end ;
34448: LD_VAR 0 3
34452: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
34453: LD_INT 0
34455: PPUSH
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
// result := false ;
34465: LD_ADDR_VAR 0 6
34469: PUSH
34470: LD_INT 0
34472: ST_TO_ADDR
// if not base or not btype or not x or not y then
34473: LD_VAR 0 1
34477: NOT
34478: PUSH
34479: LD_VAR 0 2
34483: NOT
34484: OR
34485: PUSH
34486: LD_VAR 0 3
34490: NOT
34491: OR
34492: PUSH
34493: LD_VAR 0 4
34497: NOT
34498: OR
34499: IFFALSE 34503
// exit ;
34501: GO 35112
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
34503: LD_ADDR_VAR 0 12
34507: PUSH
34508: LD_VAR 0 2
34512: PPUSH
34513: LD_VAR 0 3
34517: PPUSH
34518: LD_VAR 0 4
34522: PPUSH
34523: LD_VAR 0 5
34527: PPUSH
34528: LD_VAR 0 1
34532: PUSH
34533: LD_INT 1
34535: ARRAY
34536: PPUSH
34537: CALL_OW 248
34541: PPUSH
34542: LD_INT 0
34544: PPUSH
34545: CALL 35949 0 6
34549: ST_TO_ADDR
// if not hexes then
34550: LD_VAR 0 12
34554: NOT
34555: IFFALSE 34559
// exit ;
34557: GO 35112
// for i = 1 to hexes do
34559: LD_ADDR_VAR 0 7
34563: PUSH
34564: DOUBLE
34565: LD_INT 1
34567: DEC
34568: ST_TO_ADDR
34569: LD_VAR 0 12
34573: PUSH
34574: FOR_TO
34575: IFFALSE 35110
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34577: LD_ADDR_VAR 0 11
34581: PUSH
34582: LD_VAR 0 12
34586: PUSH
34587: LD_VAR 0 7
34591: ARRAY
34592: PUSH
34593: LD_INT 1
34595: ARRAY
34596: PPUSH
34597: LD_VAR 0 12
34601: PUSH
34602: LD_VAR 0 7
34606: ARRAY
34607: PUSH
34608: LD_INT 2
34610: ARRAY
34611: PPUSH
34612: CALL_OW 428
34616: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34617: LD_VAR 0 12
34621: PUSH
34622: LD_VAR 0 7
34626: ARRAY
34627: PUSH
34628: LD_INT 1
34630: ARRAY
34631: PPUSH
34632: LD_VAR 0 12
34636: PUSH
34637: LD_VAR 0 7
34641: ARRAY
34642: PUSH
34643: LD_INT 2
34645: ARRAY
34646: PPUSH
34647: CALL_OW 351
34651: PUSH
34652: LD_VAR 0 12
34656: PUSH
34657: LD_VAR 0 7
34661: ARRAY
34662: PUSH
34663: LD_INT 1
34665: ARRAY
34666: PPUSH
34667: LD_VAR 0 12
34671: PUSH
34672: LD_VAR 0 7
34676: ARRAY
34677: PUSH
34678: LD_INT 2
34680: ARRAY
34681: PPUSH
34682: CALL_OW 488
34686: NOT
34687: OR
34688: PUSH
34689: LD_VAR 0 11
34693: PPUSH
34694: CALL_OW 247
34698: PUSH
34699: LD_INT 3
34701: EQUAL
34702: OR
34703: IFFALSE 34709
// exit ;
34705: POP
34706: POP
34707: GO 35112
// if not tmp or not tmp in base then
34709: LD_VAR 0 11
34713: NOT
34714: PUSH
34715: LD_VAR 0 11
34719: PUSH
34720: LD_VAR 0 1
34724: IN
34725: NOT
34726: OR
34727: IFFALSE 34731
// continue ;
34729: GO 34574
// result := true ;
34731: LD_ADDR_VAR 0 6
34735: PUSH
34736: LD_INT 1
34738: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34739: LD_ADDR_VAR 0 15
34743: PUSH
34744: LD_VAR 0 1
34748: PPUSH
34749: LD_INT 22
34751: PUSH
34752: LD_VAR 0 11
34756: PPUSH
34757: CALL_OW 255
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: LD_INT 30
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 30
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: LIST
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PPUSH
34798: CALL_OW 72
34802: ST_TO_ADDR
// if dep then
34803: LD_VAR 0 15
34807: IFFALSE 34943
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34809: LD_ADDR_VAR 0 14
34813: PUSH
34814: LD_VAR 0 15
34818: PUSH
34819: LD_INT 1
34821: ARRAY
34822: PPUSH
34823: CALL_OW 250
34827: PPUSH
34828: LD_VAR 0 15
34832: PUSH
34833: LD_INT 1
34835: ARRAY
34836: PPUSH
34837: CALL_OW 254
34841: PPUSH
34842: LD_INT 5
34844: PPUSH
34845: CALL_OW 272
34849: PUSH
34850: LD_VAR 0 15
34854: PUSH
34855: LD_INT 1
34857: ARRAY
34858: PPUSH
34859: CALL_OW 251
34863: PPUSH
34864: LD_VAR 0 15
34868: PUSH
34869: LD_INT 1
34871: ARRAY
34872: PPUSH
34873: CALL_OW 254
34877: PPUSH
34878: LD_INT 5
34880: PPUSH
34881: CALL_OW 273
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34890: LD_VAR 0 14
34894: PUSH
34895: LD_INT 1
34897: ARRAY
34898: PPUSH
34899: LD_VAR 0 14
34903: PUSH
34904: LD_INT 2
34906: ARRAY
34907: PPUSH
34908: CALL_OW 488
34912: IFFALSE 34943
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34914: LD_VAR 0 11
34918: PPUSH
34919: LD_VAR 0 14
34923: PUSH
34924: LD_INT 1
34926: ARRAY
34927: PPUSH
34928: LD_VAR 0 14
34932: PUSH
34933: LD_INT 2
34935: ARRAY
34936: PPUSH
34937: CALL_OW 111
// continue ;
34941: GO 34574
// end ; end ; r := GetDir ( tmp ) ;
34943: LD_ADDR_VAR 0 13
34947: PUSH
34948: LD_VAR 0 11
34952: PPUSH
34953: CALL_OW 254
34957: ST_TO_ADDR
// if r = 5 then
34958: LD_VAR 0 13
34962: PUSH
34963: LD_INT 5
34965: EQUAL
34966: IFFALSE 34976
// r := 0 ;
34968: LD_ADDR_VAR 0 13
34972: PUSH
34973: LD_INT 0
34975: ST_TO_ADDR
// for j = r to 5 do
34976: LD_ADDR_VAR 0 8
34980: PUSH
34981: DOUBLE
34982: LD_VAR 0 13
34986: DEC
34987: ST_TO_ADDR
34988: LD_INT 5
34990: PUSH
34991: FOR_TO
34992: IFFALSE 35106
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34994: LD_ADDR_VAR 0 9
34998: PUSH
34999: LD_VAR 0 11
35003: PPUSH
35004: CALL_OW 250
35008: PPUSH
35009: LD_VAR 0 8
35013: PPUSH
35014: LD_INT 2
35016: PPUSH
35017: CALL_OW 272
35021: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35022: LD_ADDR_VAR 0 10
35026: PUSH
35027: LD_VAR 0 11
35031: PPUSH
35032: CALL_OW 251
35036: PPUSH
35037: LD_VAR 0 8
35041: PPUSH
35042: LD_INT 2
35044: PPUSH
35045: CALL_OW 273
35049: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35050: LD_VAR 0 9
35054: PPUSH
35055: LD_VAR 0 10
35059: PPUSH
35060: CALL_OW 488
35064: PUSH
35065: LD_VAR 0 9
35069: PPUSH
35070: LD_VAR 0 10
35074: PPUSH
35075: CALL_OW 428
35079: NOT
35080: AND
35081: IFFALSE 35104
// begin ComMoveXY ( tmp , _x , _y ) ;
35083: LD_VAR 0 11
35087: PPUSH
35088: LD_VAR 0 9
35092: PPUSH
35093: LD_VAR 0 10
35097: PPUSH
35098: CALL_OW 111
// break ;
35102: GO 35106
// end ; end ;
35104: GO 34991
35106: POP
35107: POP
// end ;
35108: GO 34574
35110: POP
35111: POP
// end ;
35112: LD_VAR 0 6
35116: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
35117: LD_INT 0
35119: PPUSH
35120: PPUSH
35121: PPUSH
35122: PPUSH
35123: PPUSH
35124: PPUSH
35125: PPUSH
35126: PPUSH
35127: PPUSH
35128: PPUSH
// result := false ;
35129: LD_ADDR_VAR 0 6
35133: PUSH
35134: LD_INT 0
35136: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35137: LD_VAR 0 1
35141: NOT
35142: PUSH
35143: LD_VAR 0 1
35147: PPUSH
35148: CALL_OW 266
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: IN
35163: NOT
35164: OR
35165: PUSH
35166: LD_VAR 0 2
35170: NOT
35171: OR
35172: PUSH
35173: LD_VAR 0 5
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: LD_INT 2
35186: PUSH
35187: LD_INT 3
35189: PUSH
35190: LD_INT 4
35192: PUSH
35193: LD_INT 5
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: IN
35204: NOT
35205: OR
35206: PUSH
35207: LD_VAR 0 3
35211: PPUSH
35212: LD_VAR 0 4
35216: PPUSH
35217: CALL_OW 488
35221: NOT
35222: OR
35223: IFFALSE 35227
// exit ;
35225: GO 35944
// pom := GetBase ( depot ) ;
35227: LD_ADDR_VAR 0 10
35231: PUSH
35232: LD_VAR 0 1
35236: PPUSH
35237: CALL_OW 274
35241: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35242: LD_ADDR_VAR 0 11
35246: PUSH
35247: LD_VAR 0 2
35251: PPUSH
35252: LD_VAR 0 1
35256: PPUSH
35257: CALL_OW 248
35261: PPUSH
35262: CALL_OW 450
35266: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35267: LD_VAR 0 10
35271: PPUSH
35272: LD_INT 1
35274: PPUSH
35275: CALL_OW 275
35279: PUSH
35280: LD_VAR 0 11
35284: PUSH
35285: LD_INT 1
35287: ARRAY
35288: GREATEREQUAL
35289: PUSH
35290: LD_VAR 0 10
35294: PPUSH
35295: LD_INT 2
35297: PPUSH
35298: CALL_OW 275
35302: PUSH
35303: LD_VAR 0 11
35307: PUSH
35308: LD_INT 2
35310: ARRAY
35311: GREATEREQUAL
35312: AND
35313: PUSH
35314: LD_VAR 0 10
35318: PPUSH
35319: LD_INT 3
35321: PPUSH
35322: CALL_OW 275
35326: PUSH
35327: LD_VAR 0 11
35331: PUSH
35332: LD_INT 3
35334: ARRAY
35335: GREATEREQUAL
35336: AND
35337: NOT
35338: IFFALSE 35342
// exit ;
35340: GO 35944
// if GetBType ( depot ) = b_depot then
35342: LD_VAR 0 1
35346: PPUSH
35347: CALL_OW 266
35351: PUSH
35352: LD_INT 0
35354: EQUAL
35355: IFFALSE 35367
// dist := 28 else
35357: LD_ADDR_VAR 0 14
35361: PUSH
35362: LD_INT 28
35364: ST_TO_ADDR
35365: GO 35375
// dist := 36 ;
35367: LD_ADDR_VAR 0 14
35371: PUSH
35372: LD_INT 36
35374: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35375: LD_VAR 0 1
35379: PPUSH
35380: LD_VAR 0 3
35384: PPUSH
35385: LD_VAR 0 4
35389: PPUSH
35390: CALL_OW 297
35394: PUSH
35395: LD_VAR 0 14
35399: GREATER
35400: IFFALSE 35404
// exit ;
35402: GO 35944
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35404: LD_ADDR_VAR 0 12
35408: PUSH
35409: LD_VAR 0 2
35413: PPUSH
35414: LD_VAR 0 3
35418: PPUSH
35419: LD_VAR 0 4
35423: PPUSH
35424: LD_VAR 0 5
35428: PPUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 248
35438: PPUSH
35439: LD_INT 0
35441: PPUSH
35442: CALL 35949 0 6
35446: ST_TO_ADDR
// if not hexes then
35447: LD_VAR 0 12
35451: NOT
35452: IFFALSE 35456
// exit ;
35454: GO 35944
// hex := GetHexInfo ( x , y ) ;
35456: LD_ADDR_VAR 0 15
35460: PUSH
35461: LD_VAR 0 3
35465: PPUSH
35466: LD_VAR 0 4
35470: PPUSH
35471: CALL_OW 546
35475: ST_TO_ADDR
// if hex [ 1 ] then
35476: LD_VAR 0 15
35480: PUSH
35481: LD_INT 1
35483: ARRAY
35484: IFFALSE 35488
// exit ;
35486: GO 35944
// height := hex [ 2 ] ;
35488: LD_ADDR_VAR 0 13
35492: PUSH
35493: LD_VAR 0 15
35497: PUSH
35498: LD_INT 2
35500: ARRAY
35501: ST_TO_ADDR
// for i = 1 to hexes do
35502: LD_ADDR_VAR 0 7
35506: PUSH
35507: DOUBLE
35508: LD_INT 1
35510: DEC
35511: ST_TO_ADDR
35512: LD_VAR 0 12
35516: PUSH
35517: FOR_TO
35518: IFFALSE 35848
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35520: LD_VAR 0 12
35524: PUSH
35525: LD_VAR 0 7
35529: ARRAY
35530: PUSH
35531: LD_INT 1
35533: ARRAY
35534: PPUSH
35535: LD_VAR 0 12
35539: PUSH
35540: LD_VAR 0 7
35544: ARRAY
35545: PUSH
35546: LD_INT 2
35548: ARRAY
35549: PPUSH
35550: CALL_OW 488
35554: NOT
35555: PUSH
35556: LD_VAR 0 12
35560: PUSH
35561: LD_VAR 0 7
35565: ARRAY
35566: PUSH
35567: LD_INT 1
35569: ARRAY
35570: PPUSH
35571: LD_VAR 0 12
35575: PUSH
35576: LD_VAR 0 7
35580: ARRAY
35581: PUSH
35582: LD_INT 2
35584: ARRAY
35585: PPUSH
35586: CALL_OW 428
35590: PUSH
35591: LD_INT 0
35593: GREATER
35594: OR
35595: PUSH
35596: LD_VAR 0 12
35600: PUSH
35601: LD_VAR 0 7
35605: ARRAY
35606: PUSH
35607: LD_INT 1
35609: ARRAY
35610: PPUSH
35611: LD_VAR 0 12
35615: PUSH
35616: LD_VAR 0 7
35620: ARRAY
35621: PUSH
35622: LD_INT 2
35624: ARRAY
35625: PPUSH
35626: CALL_OW 351
35630: OR
35631: IFFALSE 35637
// exit ;
35633: POP
35634: POP
35635: GO 35944
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35637: LD_ADDR_VAR 0 8
35641: PUSH
35642: LD_VAR 0 12
35646: PUSH
35647: LD_VAR 0 7
35651: ARRAY
35652: PUSH
35653: LD_INT 1
35655: ARRAY
35656: PPUSH
35657: LD_VAR 0 12
35661: PUSH
35662: LD_VAR 0 7
35666: ARRAY
35667: PUSH
35668: LD_INT 2
35670: ARRAY
35671: PPUSH
35672: CALL_OW 546
35676: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35677: LD_VAR 0 8
35681: PUSH
35682: LD_INT 1
35684: ARRAY
35685: PUSH
35686: LD_VAR 0 8
35690: PUSH
35691: LD_INT 2
35693: ARRAY
35694: PUSH
35695: LD_VAR 0 13
35699: PUSH
35700: LD_INT 2
35702: PLUS
35703: GREATER
35704: OR
35705: PUSH
35706: LD_VAR 0 8
35710: PUSH
35711: LD_INT 2
35713: ARRAY
35714: PUSH
35715: LD_VAR 0 13
35719: PUSH
35720: LD_INT 2
35722: MINUS
35723: LESS
35724: OR
35725: PUSH
35726: LD_VAR 0 8
35730: PUSH
35731: LD_INT 3
35733: ARRAY
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 8
35740: PUSH
35741: LD_INT 9
35743: PUSH
35744: LD_INT 10
35746: PUSH
35747: LD_INT 11
35749: PUSH
35750: LD_INT 12
35752: PUSH
35753: LD_INT 13
35755: PUSH
35756: LD_INT 16
35758: PUSH
35759: LD_INT 17
35761: PUSH
35762: LD_INT 18
35764: PUSH
35765: LD_INT 19
35767: PUSH
35768: LD_INT 20
35770: PUSH
35771: LD_INT 21
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: IN
35789: NOT
35790: OR
35791: PUSH
35792: LD_VAR 0 8
35796: PUSH
35797: LD_INT 5
35799: ARRAY
35800: NOT
35801: OR
35802: PUSH
35803: LD_VAR 0 8
35807: PUSH
35808: LD_INT 6
35810: ARRAY
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: LD_INT 7
35820: PUSH
35821: LD_INT 9
35823: PUSH
35824: LD_INT 10
35826: PUSH
35827: LD_INT 11
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: IN
35838: NOT
35839: OR
35840: IFFALSE 35846
// exit ;
35842: POP
35843: POP
35844: GO 35944
// end ;
35846: GO 35517
35848: POP
35849: POP
// side := GetSide ( depot ) ;
35850: LD_ADDR_VAR 0 9
35854: PUSH
35855: LD_VAR 0 1
35859: PPUSH
35860: CALL_OW 255
35864: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35865: LD_VAR 0 9
35869: PPUSH
35870: LD_VAR 0 3
35874: PPUSH
35875: LD_VAR 0 4
35879: PPUSH
35880: LD_INT 20
35882: PPUSH
35883: CALL 28598 0 4
35887: PUSH
35888: LD_INT 4
35890: ARRAY
35891: IFFALSE 35895
// exit ;
35893: GO 35944
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35895: LD_VAR 0 2
35899: PUSH
35900: LD_INT 29
35902: PUSH
35903: LD_INT 30
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: IN
35910: PUSH
35911: LD_VAR 0 3
35915: PPUSH
35916: LD_VAR 0 4
35920: PPUSH
35921: LD_VAR 0 9
35925: PPUSH
35926: CALL_OW 440
35930: NOT
35931: AND
35932: IFFALSE 35936
// exit ;
35934: GO 35944
// result := true ;
35936: LD_ADDR_VAR 0 6
35940: PUSH
35941: LD_INT 1
35943: ST_TO_ADDR
// end ;
35944: LD_VAR 0 6
35948: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
35949: LD_INT 0
35951: PPUSH
35952: PPUSH
35953: PPUSH
35954: PPUSH
35955: PPUSH
35956: PPUSH
35957: PPUSH
35958: PPUSH
35959: PPUSH
35960: PPUSH
35961: PPUSH
35962: PPUSH
35963: PPUSH
35964: PPUSH
35965: PPUSH
35966: PPUSH
35967: PPUSH
35968: PPUSH
35969: PPUSH
35970: PPUSH
35971: PPUSH
35972: PPUSH
35973: PPUSH
35974: PPUSH
35975: PPUSH
35976: PPUSH
35977: PPUSH
35978: PPUSH
35979: PPUSH
35980: PPUSH
35981: PPUSH
35982: PPUSH
35983: PPUSH
35984: PPUSH
35985: PPUSH
35986: PPUSH
35987: PPUSH
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
35997: PPUSH
35998: PPUSH
35999: PPUSH
36000: PPUSH
36001: PPUSH
36002: PPUSH
36003: PPUSH
36004: PPUSH
36005: PPUSH
36006: PPUSH
36007: PPUSH
36008: PPUSH
// result = [ ] ;
36009: LD_ADDR_VAR 0 7
36013: PUSH
36014: EMPTY
36015: ST_TO_ADDR
// temp_list = [ ] ;
36016: LD_ADDR_VAR 0 9
36020: PUSH
36021: EMPTY
36022: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36023: LD_VAR 0 4
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: LD_INT 3
36039: PUSH
36040: LD_INT 4
36042: PUSH
36043: LD_INT 5
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: IN
36054: NOT
36055: PUSH
36056: LD_VAR 0 1
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: IN
36071: PUSH
36072: LD_VAR 0 5
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: LD_INT 3
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: LIST
36090: IN
36091: NOT
36092: AND
36093: OR
36094: IFFALSE 36098
// exit ;
36096: GO 54489
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36098: LD_VAR 0 1
36102: PUSH
36103: LD_INT 6
36105: PUSH
36106: LD_INT 7
36108: PUSH
36109: LD_INT 8
36111: PUSH
36112: LD_INT 13
36114: PUSH
36115: LD_INT 12
36117: PUSH
36118: LD_INT 15
36120: PUSH
36121: LD_INT 11
36123: PUSH
36124: LD_INT 14
36126: PUSH
36127: LD_INT 10
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: IN
36141: IFFALSE 36151
// btype = b_lab ;
36143: LD_ADDR_VAR 0 1
36147: PUSH
36148: LD_INT 6
36150: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36151: LD_VAR 0 6
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: IN
36170: NOT
36171: PUSH
36172: LD_VAR 0 1
36176: PUSH
36177: LD_INT 0
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 3
36188: PUSH
36189: LD_INT 6
36191: PUSH
36192: LD_INT 36
36194: PUSH
36195: LD_INT 4
36197: PUSH
36198: LD_INT 5
36200: PUSH
36201: LD_INT 31
36203: PUSH
36204: LD_INT 32
36206: PUSH
36207: LD_INT 33
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: IN
36223: NOT
36224: PUSH
36225: LD_VAR 0 6
36229: PUSH
36230: LD_INT 1
36232: EQUAL
36233: AND
36234: OR
36235: PUSH
36236: LD_VAR 0 1
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 3
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: IN
36251: NOT
36252: PUSH
36253: LD_VAR 0 6
36257: PUSH
36258: LD_INT 2
36260: EQUAL
36261: AND
36262: OR
36263: IFFALSE 36273
// mode = 0 ;
36265: LD_ADDR_VAR 0 6
36269: PUSH
36270: LD_INT 0
36272: ST_TO_ADDR
// case mode of 0 :
36273: LD_VAR 0 6
36277: PUSH
36278: LD_INT 0
36280: DOUBLE
36281: EQUAL
36282: IFTRUE 36286
36284: GO 47739
36286: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36287: LD_ADDR_VAR 0 11
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 2
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 2
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: NEG
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: LD_INT 3
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36480: LD_ADDR_VAR 0 12
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: NEG
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: LD_INT 1
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 1
36592: NEG
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 2
36614: NEG
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 3
36637: NEG
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 3
36648: NEG
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36676: LD_ADDR_VAR 0 13
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: NEG
36758: PUSH
36759: LD_INT 2
36761: NEG
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 2
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 2
36799: NEG
36800: PUSH
36801: LD_INT 1
36803: NEG
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: LD_INT 2
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 2
36823: NEG
36824: PUSH
36825: LD_INT 3
36827: NEG
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 3
36835: NEG
36836: PUSH
36837: LD_INT 2
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 3
36847: NEG
36848: PUSH
36849: LD_INT 3
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36875: LD_ADDR_VAR 0 14
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: LD_INT 1
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: LD_INT 1
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: LD_INT 2
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 2
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PUSH
37023: LD_INT 3
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: LD_INT 3
37036: NEG
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37071: LD_ADDR_VAR 0 15
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 2
37194: NEG
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: NEG
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 3
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37264: LD_ADDR_VAR 0 16
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 2
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: LD_INT 2
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: LD_INT 2
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: LD_INT 2
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 3
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 3
37421: PUSH
37422: LD_INT 3
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: LD_INT 3
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37457: LD_ADDR_VAR 0 17
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 2
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 2
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 2
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: NEG
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37687: LD_ADDR_VAR 0 18
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: LD_INT 2
37783: NEG
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: LD_INT 1
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 1
37852: NEG
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: NEG
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 2
37874: NEG
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 2
37886: NEG
37887: PUSH
37888: LD_INT 2
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37917: LD_ADDR_VAR 0 19
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: LD_INT 2
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 2
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: LD_INT 2
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: LD_INT 2
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: LD_INT 2
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 2
38093: NEG
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: NEG
38117: PUSH
38118: LD_INT 2
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38147: LD_ADDR_VAR 0 20
38151: PUSH
38152: LD_INT 0
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: LD_INT 1
38220: NEG
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: LD_INT 2
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 2
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: LD_INT 2
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: LD_INT 2
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: NEG
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 2
38334: NEG
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 2
38346: NEG
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38377: LD_ADDR_VAR 0 21
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: LD_INT 2
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 2
38553: NEG
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 2
38564: NEG
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: NEG
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38607: LD_ADDR_VAR 0 22
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 2
38794: NEG
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38837: LD_ADDR_VAR 0 23
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 2
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: LD_INT 3
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: LD_INT 3
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39117: LD_ADDR_VAR 0 24
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 3
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 3
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39393: LD_ADDR_VAR 0 25
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 2
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 3
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 3
39614: PUSH
39615: LD_INT 2
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 3
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 3
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39667: LD_ADDR_VAR 0 26
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: LD_INT 3
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 3
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39943: LD_ADDR_VAR 0 27
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: LD_INT 2
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 2
40165: NEG
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 3
40176: NEG
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 3
40188: NEG
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40223: LD_ADDR_VAR 0 28
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: LD_INT 2
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: NEG
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 2
40410: NEG
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 3
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 3
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 3
40470: NEG
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40505: LD_ADDR_VAR 0 29
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 2
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 3
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 3
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 3
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 3
40749: NEG
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40784: LD_ADDR_VAR 0 30
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 2
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: NEG
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: LD_INT 3
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 2
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 3
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 3
41027: NEG
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41062: LD_ADDR_VAR 0 31
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 2
41227: NEG
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: LD_INT 3
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 3
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 3
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 3
41305: NEG
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41340: LD_ADDR_VAR 0 32
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 3
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 3
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 3
41583: NEG
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41618: LD_ADDR_VAR 0 33
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: LD_INT 3
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 3
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 3
41862: NEG
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41897: LD_ADDR_VAR 0 34
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: LD_INT 3
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: LD_INT 2
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 3
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 3
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: NEG
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42177: LD_ADDR_VAR 0 35
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42289: LD_ADDR_VAR 0 36
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42401: LD_ADDR_VAR 0 37
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42513: LD_ADDR_VAR 0 38
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42625: LD_ADDR_VAR 0 39
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42737: LD_ADDR_VAR 0 40
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42849: LD_ADDR_VAR 0 41
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 3
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: LD_INT 3
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 3
43123: NEG
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 3
43134: NEG
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 3
43146: NEG
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 3
43158: NEG
43159: PUSH
43160: LD_INT 3
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43199: LD_ADDR_VAR 0 42
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 2
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: NEG
43390: PUSH
43391: LD_INT 3
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 3
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 3
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 3
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 3
43445: PUSH
43446: LD_INT 3
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 3
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 3
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 3
43496: NEG
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 3
43508: NEG
43509: PUSH
43510: LD_INT 3
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43549: LD_ADDR_VAR 0 43
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: LD_INT 3
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 3
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 3
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 3
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 3
43845: NEG
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 3
43856: NEG
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43897: LD_ADDR_VAR 0 44
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 2
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 2
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 3
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 3
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 3
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 3
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 3
44140: PUSH
44141: LD_INT 3
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: LD_INT 3
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 3
44171: NEG
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 3
44194: NEG
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: NEG
44207: PUSH
44208: LD_INT 3
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44247: LD_ADDR_VAR 0 45
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 3
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 3
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 3
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 3
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 3
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 3
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 3
44544: NEG
44545: PUSH
44546: LD_INT 2
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: LD_INT 3
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44597: LD_ADDR_VAR 0 46
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 3
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 3
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 3
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 3
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44945: LD_ADDR_VAR 0 47
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45096: LD_ADDR_VAR 0 48
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45243: LD_ADDR_VAR 0 49
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45387: LD_ADDR_VAR 0 50
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45531: LD_ADDR_VAR 0 51
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45678: LD_ADDR_VAR 0 52
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45829: LD_ADDR_VAR 0 53
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46059: LD_ADDR_VAR 0 54
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46289: LD_ADDR_VAR 0 55
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46519: LD_ADDR_VAR 0 56
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46749: LD_ADDR_VAR 0 57
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46979: LD_ADDR_VAR 0 58
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47209: LD_ADDR_VAR 0 59
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47297: LD_ADDR_VAR 0 60
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47385: LD_ADDR_VAR 0 61
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47473: LD_ADDR_VAR 0 62
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47561: LD_ADDR_VAR 0 63
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47649: LD_ADDR_VAR 0 64
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: ST_TO_ADDR
// end ; 1 :
47737: GO 53634
47739: LD_INT 1
47741: DOUBLE
47742: EQUAL
47743: IFTRUE 47747
47745: GO 50370
47747: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47748: LD_ADDR_VAR 0 11
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 3
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 3
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47792: LD_ADDR_VAR 0 12
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47833: LD_ADDR_VAR 0 13
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 3
47850: PUSH
47851: LD_INT 3
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: LIST
47872: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47873: LD_ADDR_VAR 0 14
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 3
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47914: LD_ADDR_VAR 0 15
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 3
47932: NEG
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: LIST
47957: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47958: LD_ADDR_VAR 0 16
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: LD_INT 3
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 3
47977: NEG
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 3
47989: NEG
47990: PUSH
47991: LD_INT 3
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48004: LD_ADDR_VAR 0 17
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 3
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 3
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: LIST
48047: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48048: LD_ADDR_VAR 0 18
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48089: LD_ADDR_VAR 0 19
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 3
48106: PUSH
48107: LD_INT 3
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: LD_INT 3
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48129: LD_ADDR_VAR 0 20
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: LIST
48169: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48170: LD_ADDR_VAR 0 21
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 3
48188: NEG
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: NEG
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: LIST
48213: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48214: LD_ADDR_VAR 0 22
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 3
48233: NEG
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 3
48245: NEG
48246: PUSH
48247: LD_INT 3
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48260: LD_ADDR_VAR 0 23
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 3
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 4
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48304: LD_ADDR_VAR 0 24
48308: PUSH
48309: LD_INT 3
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 3
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 4
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48345: LD_ADDR_VAR 0 25
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 4
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: LD_INT 4
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: LIST
48384: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48385: LD_ADDR_VAR 0 26
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 4
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: LIST
48425: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48426: LD_ADDR_VAR 0 27
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 3
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 4
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48470: LD_ADDR_VAR 0 28
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: LD_INT 3
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 3
48489: NEG
48490: PUSH
48491: LD_INT 4
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 4
48501: NEG
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48516: LD_ADDR_VAR 0 29
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 3
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 3
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 4
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 4
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 3
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: LD_INT 5
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 5
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 4
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 6
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 6
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 5
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48671: LD_ADDR_VAR 0 30
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 3
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 3
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 4
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 4
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 4
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 5
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 5
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 5
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 6
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 6
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48814: LD_ADDR_VAR 0 31
48818: PUSH
48819: LD_INT 3
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: LD_INT 3
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: LD_INT 3
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 4
48851: PUSH
48852: LD_INT 3
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 4
48861: PUSH
48862: LD_INT 4
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 3
48871: PUSH
48872: LD_INT 4
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 5
48881: PUSH
48882: LD_INT 4
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 5
48891: PUSH
48892: LD_INT 5
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 4
48901: PUSH
48902: LD_INT 5
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 6
48911: PUSH
48912: LD_INT 5
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 6
48921: PUSH
48922: LD_INT 6
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 5
48931: PUSH
48932: LD_INT 6
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48953: LD_ADDR_VAR 0 32
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 3
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 4
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 4
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 3
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: LD_INT 5
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 5
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 4
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 6
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 6
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 5
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49096: LD_ADDR_VAR 0 33
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 3
49114: NEG
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 4
49148: NEG
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 4
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 4
49171: NEG
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 5
49182: NEG
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 5
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 5
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 6
49216: NEG
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 6
49227: NEG
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49251: LD_ADDR_VAR 0 34
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: LD_INT 3
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 3
49270: NEG
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 3
49282: NEG
49283: PUSH
49284: LD_INT 3
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 3
49294: NEG
49295: PUSH
49296: LD_INT 4
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 4
49306: NEG
49307: PUSH
49308: LD_INT 3
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 4
49318: NEG
49319: PUSH
49320: LD_INT 4
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 4
49330: NEG
49331: PUSH
49332: LD_INT 5
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 5
49342: NEG
49343: PUSH
49344: LD_INT 4
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 5
49354: NEG
49355: PUSH
49356: LD_INT 5
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 5
49366: NEG
49367: PUSH
49368: LD_INT 6
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 6
49378: NEG
49379: PUSH
49380: LD_INT 5
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 6
49390: NEG
49391: PUSH
49392: LD_INT 6
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49414: LD_ADDR_VAR 0 41
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 2
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 3
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49458: LD_ADDR_VAR 0 42
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 3
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: LIST
49498: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49499: LD_ADDR_VAR 0 43
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 3
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 3
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: LIST
49538: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49539: LD_ADDR_VAR 0 44
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: LD_INT 3
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49580: LD_ADDR_VAR 0 45
49584: PUSH
49585: LD_INT 2
49587: NEG
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49624: LD_ADDR_VAR 0 46
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 3
49655: NEG
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49670: LD_ADDR_VAR 0 47
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 3
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49703: LD_ADDR_VAR 0 48
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49734: LD_ADDR_VAR 0 49
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49763: LD_ADDR_VAR 0 50
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 3
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49792: LD_ADDR_VAR 0 51
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49823: LD_ADDR_VAR 0 52
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 3
49842: NEG
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49856: LD_ADDR_VAR 0 53
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 3
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49900: LD_ADDR_VAR 0 54
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: LIST
49940: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49941: LD_ADDR_VAR 0 55
49945: PUSH
49946: LD_INT 3
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 3
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: LIST
49980: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49981: LD_ADDR_VAR 0 56
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 3
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: LIST
50021: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50022: LD_ADDR_VAR 0 57
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50066: LD_ADDR_VAR 0 58
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: LD_INT 3
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50112: LD_ADDR_VAR 0 59
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: LIST
50155: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50156: LD_ADDR_VAR 0 60
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50197: LD_ADDR_VAR 0 61
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: LIST
50236: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50237: LD_ADDR_VAR 0 62
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: LIST
50277: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50278: LD_ADDR_VAR 0 63
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50322: LD_ADDR_VAR 0 64
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: LIST
50367: ST_TO_ADDR
// end ; 2 :
50368: GO 53634
50370: LD_INT 2
50372: DOUBLE
50373: EQUAL
50374: IFTRUE 50378
50376: GO 53633
50378: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50379: LD_ADDR_VAR 0 29
50383: PUSH
50384: LD_INT 4
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 4
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 5
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 5
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 4
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 3
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 5
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 3
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 3
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 4
50499: PUSH
50500: LD_INT 3
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 4
50509: PUSH
50510: LD_INT 4
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 3
50519: PUSH
50520: LD_INT 4
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 3
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 4
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: LD_INT 4
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 4
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 3
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 4
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 5
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 5
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 4
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 3
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: LD_INT 5
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 3
50673: NEG
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 3
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 4
50718: NEG
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 4
50729: NEG
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 4
50741: NEG
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 4
50764: NEG
50765: PUSH
50766: LD_INT 4
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 4
50776: NEG
50777: PUSH
50778: LD_INT 5
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: LD_INT 4
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: LD_INT 3
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 4
50812: NEG
50813: PUSH
50814: LD_INT 3
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 5
50824: NEG
50825: PUSH
50826: LD_INT 4
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 5
50836: NEG
50837: PUSH
50838: LD_INT 5
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: NEG
50849: PUSH
50850: LD_INT 5
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 5
50860: NEG
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50917: LD_ADDR_VAR 0 30
50921: PUSH
50922: LD_INT 4
50924: PUSH
50925: LD_INT 4
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 4
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 5
50944: PUSH
50945: LD_INT 4
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 5
50954: PUSH
50955: LD_INT 5
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 4
50964: PUSH
50965: LD_INT 5
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 3
50974: PUSH
50975: LD_INT 4
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 5
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: LD_INT 5
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 4
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 4
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 3
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: LD_INT 4
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 4
51107: NEG
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 4
51118: NEG
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 3
51130: NEG
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 3
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 4
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 5
51163: NEG
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 5
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 5
51186: NEG
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: NEG
51210: PUSH
51211: LD_INT 3
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: LD_INT 4
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 3
51257: NEG
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 4
51269: NEG
51270: PUSH
51271: LD_INT 3
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 4
51281: NEG
51282: PUSH
51283: LD_INT 4
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: LD_INT 4
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 4
51305: NEG
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 4
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 5
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 4
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 3
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 3
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 4
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: LD_INT 5
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: LD_INT 3
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: LD_INT 5
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51464: LD_ADDR_VAR 0 31
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 4
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 3
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 4
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 5
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 5
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 4
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 5
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 3
51575: NEG
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: NEG
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 4
51620: NEG
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 4
51631: NEG
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 4
51643: NEG
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 4
51666: NEG
51667: PUSH
51668: LD_INT 4
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 4
51678: NEG
51679: PUSH
51680: LD_INT 5
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 3
51690: NEG
51691: PUSH
51692: LD_INT 4
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: LD_INT 3
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 4
51714: NEG
51715: PUSH
51716: LD_INT 3
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 5
51726: NEG
51727: PUSH
51728: LD_INT 4
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 5
51738: NEG
51739: PUSH
51740: LD_INT 5
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: NEG
51751: PUSH
51752: LD_INT 5
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 5
51762: NEG
51763: PUSH
51764: LD_INT 3
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 4
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 3
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 3
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 4
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: LD_INT 4
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 4
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 4
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 5
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 5
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 4
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 3
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 5
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52014: LD_ADDR_VAR 0 32
52018: PUSH
52019: LD_INT 4
52021: NEG
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 4
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 3
52044: NEG
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 4
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 5
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 5
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 5
52100: NEG
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 3
52123: NEG
52124: PUSH
52125: LD_INT 3
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: LD_INT 4
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 3
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 4
52183: NEG
52184: PUSH
52185: LD_INT 3
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 4
52195: NEG
52196: PUSH
52197: LD_INT 4
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 4
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 4
52219: NEG
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 4
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 5
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 4
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 3
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 3
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 4
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: LD_INT 5
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 5
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 3
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 4
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 4
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 4
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 4
52426: PUSH
52427: LD_INT 4
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 4
52436: PUSH
52437: LD_INT 3
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 5
52446: PUSH
52447: LD_INT 4
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 5
52456: PUSH
52457: LD_INT 5
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 4
52466: PUSH
52467: LD_INT 5
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 3
52476: PUSH
52477: LD_INT 4
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: PUSH
52487: LD_INT 3
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 5
52496: PUSH
52497: LD_INT 3
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 3
52506: PUSH
52507: LD_INT 5
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52561: LD_ADDR_VAR 0 33
52565: PUSH
52566: LD_INT 4
52568: NEG
52569: PUSH
52570: LD_INT 4
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 4
52580: NEG
52581: PUSH
52582: LD_INT 5
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: LD_INT 4
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 4
52616: NEG
52617: PUSH
52618: LD_INT 3
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 5
52628: NEG
52629: PUSH
52630: LD_INT 4
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 5
52640: NEG
52641: PUSH
52642: LD_INT 5
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: LD_INT 5
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 5
52664: NEG
52665: PUSH
52666: LD_INT 3
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: LD_INT 3
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 4
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 3
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 4
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: LD_INT 4
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 4
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 4
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 5
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 5
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 3
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 5
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: LD_INT 3
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 4
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 4
52901: PUSH
52902: LD_INT 4
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 3
52911: PUSH
52912: LD_INT 4
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 4
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 4
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 4
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 4
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 5
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 5
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 4
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 3
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 5
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53099: LD_ADDR_VAR 0 34
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 4
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 5
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 4
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 3
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 3
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 4
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 5
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: LD_INT 3
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: LD_INT 5
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 4
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 4
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 4
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 4
53301: PUSH
53302: LD_INT 4
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 4
53311: PUSH
53312: LD_INT 3
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 5
53321: PUSH
53322: LD_INT 4
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 5
53331: PUSH
53332: LD_INT 5
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 4
53341: PUSH
53342: LD_INT 5
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: LD_INT 4
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 5
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: LD_INT 5
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 4
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 4
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: LD_INT 4
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 4
53484: NEG
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 4
53495: NEG
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 3
53518: NEG
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 4
53529: NEG
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 5
53540: NEG
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 5
53551: NEG
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 5
53563: NEG
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 3
53575: NEG
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: ST_TO_ADDR
// end ; end ;
53631: GO 53634
53633: POP
// case btype of b_depot , b_warehouse :
53634: LD_VAR 0 1
53638: PUSH
53639: LD_INT 0
53641: DOUBLE
53642: EQUAL
53643: IFTRUE 53653
53645: LD_INT 1
53647: DOUBLE
53648: EQUAL
53649: IFTRUE 53653
53651: GO 53854
53653: POP
// case nation of nation_american :
53654: LD_VAR 0 5
53658: PUSH
53659: LD_INT 1
53661: DOUBLE
53662: EQUAL
53663: IFTRUE 53667
53665: GO 53723
53667: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
53668: LD_ADDR_VAR 0 9
53672: PUSH
53673: LD_VAR 0 11
53677: PUSH
53678: LD_VAR 0 12
53682: PUSH
53683: LD_VAR 0 13
53687: PUSH
53688: LD_VAR 0 14
53692: PUSH
53693: LD_VAR 0 15
53697: PUSH
53698: LD_VAR 0 16
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: PUSH
53711: LD_VAR 0 4
53715: PUSH
53716: LD_INT 1
53718: PLUS
53719: ARRAY
53720: ST_TO_ADDR
53721: GO 53852
53723: LD_INT 2
53725: DOUBLE
53726: EQUAL
53727: IFTRUE 53731
53729: GO 53787
53731: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
53732: LD_ADDR_VAR 0 9
53736: PUSH
53737: LD_VAR 0 17
53741: PUSH
53742: LD_VAR 0 18
53746: PUSH
53747: LD_VAR 0 19
53751: PUSH
53752: LD_VAR 0 20
53756: PUSH
53757: LD_VAR 0 21
53761: PUSH
53762: LD_VAR 0 22
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: PUSH
53775: LD_VAR 0 4
53779: PUSH
53780: LD_INT 1
53782: PLUS
53783: ARRAY
53784: ST_TO_ADDR
53785: GO 53852
53787: LD_INT 3
53789: DOUBLE
53790: EQUAL
53791: IFTRUE 53795
53793: GO 53851
53795: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53796: LD_ADDR_VAR 0 9
53800: PUSH
53801: LD_VAR 0 23
53805: PUSH
53806: LD_VAR 0 24
53810: PUSH
53811: LD_VAR 0 25
53815: PUSH
53816: LD_VAR 0 26
53820: PUSH
53821: LD_VAR 0 27
53825: PUSH
53826: LD_VAR 0 28
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: PUSH
53839: LD_VAR 0 4
53843: PUSH
53844: LD_INT 1
53846: PLUS
53847: ARRAY
53848: ST_TO_ADDR
53849: GO 53852
53851: POP
53852: GO 54407
53854: LD_INT 2
53856: DOUBLE
53857: EQUAL
53858: IFTRUE 53868
53860: LD_INT 3
53862: DOUBLE
53863: EQUAL
53864: IFTRUE 53868
53866: GO 53924
53868: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53869: LD_ADDR_VAR 0 9
53873: PUSH
53874: LD_VAR 0 29
53878: PUSH
53879: LD_VAR 0 30
53883: PUSH
53884: LD_VAR 0 31
53888: PUSH
53889: LD_VAR 0 32
53893: PUSH
53894: LD_VAR 0 33
53898: PUSH
53899: LD_VAR 0 34
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: PUSH
53912: LD_VAR 0 4
53916: PUSH
53917: LD_INT 1
53919: PLUS
53920: ARRAY
53921: ST_TO_ADDR
53922: GO 54407
53924: LD_INT 16
53926: DOUBLE
53927: EQUAL
53928: IFTRUE 53986
53930: LD_INT 17
53932: DOUBLE
53933: EQUAL
53934: IFTRUE 53986
53936: LD_INT 18
53938: DOUBLE
53939: EQUAL
53940: IFTRUE 53986
53942: LD_INT 19
53944: DOUBLE
53945: EQUAL
53946: IFTRUE 53986
53948: LD_INT 22
53950: DOUBLE
53951: EQUAL
53952: IFTRUE 53986
53954: LD_INT 20
53956: DOUBLE
53957: EQUAL
53958: IFTRUE 53986
53960: LD_INT 21
53962: DOUBLE
53963: EQUAL
53964: IFTRUE 53986
53966: LD_INT 23
53968: DOUBLE
53969: EQUAL
53970: IFTRUE 53986
53972: LD_INT 24
53974: DOUBLE
53975: EQUAL
53976: IFTRUE 53986
53978: LD_INT 25
53980: DOUBLE
53981: EQUAL
53982: IFTRUE 53986
53984: GO 54042
53986: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53987: LD_ADDR_VAR 0 9
53991: PUSH
53992: LD_VAR 0 35
53996: PUSH
53997: LD_VAR 0 36
54001: PUSH
54002: LD_VAR 0 37
54006: PUSH
54007: LD_VAR 0 38
54011: PUSH
54012: LD_VAR 0 39
54016: PUSH
54017: LD_VAR 0 40
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: PUSH
54030: LD_VAR 0 4
54034: PUSH
54035: LD_INT 1
54037: PLUS
54038: ARRAY
54039: ST_TO_ADDR
54040: GO 54407
54042: LD_INT 6
54044: DOUBLE
54045: EQUAL
54046: IFTRUE 54098
54048: LD_INT 7
54050: DOUBLE
54051: EQUAL
54052: IFTRUE 54098
54054: LD_INT 8
54056: DOUBLE
54057: EQUAL
54058: IFTRUE 54098
54060: LD_INT 13
54062: DOUBLE
54063: EQUAL
54064: IFTRUE 54098
54066: LD_INT 12
54068: DOUBLE
54069: EQUAL
54070: IFTRUE 54098
54072: LD_INT 15
54074: DOUBLE
54075: EQUAL
54076: IFTRUE 54098
54078: LD_INT 11
54080: DOUBLE
54081: EQUAL
54082: IFTRUE 54098
54084: LD_INT 14
54086: DOUBLE
54087: EQUAL
54088: IFTRUE 54098
54090: LD_INT 10
54092: DOUBLE
54093: EQUAL
54094: IFTRUE 54098
54096: GO 54154
54098: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
54099: LD_ADDR_VAR 0 9
54103: PUSH
54104: LD_VAR 0 41
54108: PUSH
54109: LD_VAR 0 42
54113: PUSH
54114: LD_VAR 0 43
54118: PUSH
54119: LD_VAR 0 44
54123: PUSH
54124: LD_VAR 0 45
54128: PUSH
54129: LD_VAR 0 46
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: PUSH
54142: LD_VAR 0 4
54146: PUSH
54147: LD_INT 1
54149: PLUS
54150: ARRAY
54151: ST_TO_ADDR
54152: GO 54407
54154: LD_INT 36
54156: DOUBLE
54157: EQUAL
54158: IFTRUE 54162
54160: GO 54218
54162: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54163: LD_ADDR_VAR 0 9
54167: PUSH
54168: LD_VAR 0 47
54172: PUSH
54173: LD_VAR 0 48
54177: PUSH
54178: LD_VAR 0 49
54182: PUSH
54183: LD_VAR 0 50
54187: PUSH
54188: LD_VAR 0 51
54192: PUSH
54193: LD_VAR 0 52
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: PUSH
54206: LD_VAR 0 4
54210: PUSH
54211: LD_INT 1
54213: PLUS
54214: ARRAY
54215: ST_TO_ADDR
54216: GO 54407
54218: LD_INT 4
54220: DOUBLE
54221: EQUAL
54222: IFTRUE 54244
54224: LD_INT 5
54226: DOUBLE
54227: EQUAL
54228: IFTRUE 54244
54230: LD_INT 34
54232: DOUBLE
54233: EQUAL
54234: IFTRUE 54244
54236: LD_INT 37
54238: DOUBLE
54239: EQUAL
54240: IFTRUE 54244
54242: GO 54300
54244: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54245: LD_ADDR_VAR 0 9
54249: PUSH
54250: LD_VAR 0 53
54254: PUSH
54255: LD_VAR 0 54
54259: PUSH
54260: LD_VAR 0 55
54264: PUSH
54265: LD_VAR 0 56
54269: PUSH
54270: LD_VAR 0 57
54274: PUSH
54275: LD_VAR 0 58
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: PUSH
54288: LD_VAR 0 4
54292: PUSH
54293: LD_INT 1
54295: PLUS
54296: ARRAY
54297: ST_TO_ADDR
54298: GO 54407
54300: LD_INT 31
54302: DOUBLE
54303: EQUAL
54304: IFTRUE 54350
54306: LD_INT 32
54308: DOUBLE
54309: EQUAL
54310: IFTRUE 54350
54312: LD_INT 33
54314: DOUBLE
54315: EQUAL
54316: IFTRUE 54350
54318: LD_INT 27
54320: DOUBLE
54321: EQUAL
54322: IFTRUE 54350
54324: LD_INT 26
54326: DOUBLE
54327: EQUAL
54328: IFTRUE 54350
54330: LD_INT 28
54332: DOUBLE
54333: EQUAL
54334: IFTRUE 54350
54336: LD_INT 29
54338: DOUBLE
54339: EQUAL
54340: IFTRUE 54350
54342: LD_INT 30
54344: DOUBLE
54345: EQUAL
54346: IFTRUE 54350
54348: GO 54406
54350: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
54351: LD_ADDR_VAR 0 9
54355: PUSH
54356: LD_VAR 0 59
54360: PUSH
54361: LD_VAR 0 60
54365: PUSH
54366: LD_VAR 0 61
54370: PUSH
54371: LD_VAR 0 62
54375: PUSH
54376: LD_VAR 0 63
54380: PUSH
54381: LD_VAR 0 64
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: PUSH
54394: LD_VAR 0 4
54398: PUSH
54399: LD_INT 1
54401: PLUS
54402: ARRAY
54403: ST_TO_ADDR
54404: GO 54407
54406: POP
// temp_list2 = [ ] ;
54407: LD_ADDR_VAR 0 10
54411: PUSH
54412: EMPTY
54413: ST_TO_ADDR
// for i in temp_list do
54414: LD_ADDR_VAR 0 8
54418: PUSH
54419: LD_VAR 0 9
54423: PUSH
54424: FOR_IN
54425: IFFALSE 54477
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54427: LD_ADDR_VAR 0 10
54431: PUSH
54432: LD_VAR 0 10
54436: PUSH
54437: LD_VAR 0 8
54441: PUSH
54442: LD_INT 1
54444: ARRAY
54445: PUSH
54446: LD_VAR 0 2
54450: PLUS
54451: PUSH
54452: LD_VAR 0 8
54456: PUSH
54457: LD_INT 2
54459: ARRAY
54460: PUSH
54461: LD_VAR 0 3
54465: PLUS
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: EMPTY
54472: LIST
54473: ADD
54474: ST_TO_ADDR
54475: GO 54424
54477: POP
54478: POP
// result = temp_list2 ;
54479: LD_ADDR_VAR 0 7
54483: PUSH
54484: LD_VAR 0 10
54488: ST_TO_ADDR
// end ;
54489: LD_VAR 0 7
54493: RET
// export function EnemyInRange ( unit , dist ) ; begin
54494: LD_INT 0
54496: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54497: LD_ADDR_VAR 0 3
54501: PUSH
54502: LD_VAR 0 1
54506: PPUSH
54507: CALL_OW 255
54511: PPUSH
54512: LD_VAR 0 1
54516: PPUSH
54517: CALL_OW 250
54521: PPUSH
54522: LD_VAR 0 1
54526: PPUSH
54527: CALL_OW 251
54531: PPUSH
54532: LD_VAR 0 2
54536: PPUSH
54537: CALL 28598 0 4
54541: PUSH
54542: LD_INT 4
54544: ARRAY
54545: ST_TO_ADDR
// end ;
54546: LD_VAR 0 3
54550: RET
// export function PlayerSeeMe ( unit ) ; begin
54551: LD_INT 0
54553: PPUSH
// result := See ( your_side , unit ) ;
54554: LD_ADDR_VAR 0 2
54558: PUSH
54559: LD_OWVAR 2
54563: PPUSH
54564: LD_VAR 0 1
54568: PPUSH
54569: CALL_OW 292
54573: ST_TO_ADDR
// end ;
54574: LD_VAR 0 2
54578: RET
// export function ReverseDir ( unit ) ; begin
54579: LD_INT 0
54581: PPUSH
// if not unit then
54582: LD_VAR 0 1
54586: NOT
54587: IFFALSE 54591
// exit ;
54589: GO 54614
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54591: LD_ADDR_VAR 0 2
54595: PUSH
54596: LD_VAR 0 1
54600: PPUSH
54601: CALL_OW 254
54605: PUSH
54606: LD_INT 3
54608: PLUS
54609: PUSH
54610: LD_INT 6
54612: MOD
54613: ST_TO_ADDR
// end ;
54614: LD_VAR 0 2
54618: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54619: LD_INT 0
54621: PPUSH
54622: PPUSH
54623: PPUSH
54624: PPUSH
54625: PPUSH
// if not hexes then
54626: LD_VAR 0 2
54630: NOT
54631: IFFALSE 54635
// exit ;
54633: GO 54783
// dist := 9999 ;
54635: LD_ADDR_VAR 0 5
54639: PUSH
54640: LD_INT 9999
54642: ST_TO_ADDR
// for i = 1 to hexes do
54643: LD_ADDR_VAR 0 4
54647: PUSH
54648: DOUBLE
54649: LD_INT 1
54651: DEC
54652: ST_TO_ADDR
54653: LD_VAR 0 2
54657: PUSH
54658: FOR_TO
54659: IFFALSE 54771
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54661: LD_VAR 0 1
54665: PPUSH
54666: LD_VAR 0 2
54670: PUSH
54671: LD_VAR 0 4
54675: ARRAY
54676: PUSH
54677: LD_INT 1
54679: ARRAY
54680: PPUSH
54681: LD_VAR 0 2
54685: PUSH
54686: LD_VAR 0 4
54690: ARRAY
54691: PUSH
54692: LD_INT 2
54694: ARRAY
54695: PPUSH
54696: CALL_OW 297
54700: PUSH
54701: LD_VAR 0 5
54705: LESS
54706: IFFALSE 54769
// begin hex := hexes [ i ] ;
54708: LD_ADDR_VAR 0 7
54712: PUSH
54713: LD_VAR 0 2
54717: PUSH
54718: LD_VAR 0 4
54722: ARRAY
54723: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54724: LD_ADDR_VAR 0 5
54728: PUSH
54729: LD_VAR 0 1
54733: PPUSH
54734: LD_VAR 0 2
54738: PUSH
54739: LD_VAR 0 4
54743: ARRAY
54744: PUSH
54745: LD_INT 1
54747: ARRAY
54748: PPUSH
54749: LD_VAR 0 2
54753: PUSH
54754: LD_VAR 0 4
54758: ARRAY
54759: PUSH
54760: LD_INT 2
54762: ARRAY
54763: PPUSH
54764: CALL_OW 297
54768: ST_TO_ADDR
// end ; end ;
54769: GO 54658
54771: POP
54772: POP
// result := hex ;
54773: LD_ADDR_VAR 0 3
54777: PUSH
54778: LD_VAR 0 7
54782: ST_TO_ADDR
// end ;
54783: LD_VAR 0 3
54787: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54788: LD_INT 0
54790: PPUSH
54791: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54792: LD_VAR 0 1
54796: NOT
54797: PUSH
54798: LD_VAR 0 1
54802: PUSH
54803: LD_INT 21
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 23
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PPUSH
54827: CALL_OW 69
54831: IN
54832: NOT
54833: OR
54834: IFFALSE 54838
// exit ;
54836: GO 54885
// for i = 1 to 3 do
54838: LD_ADDR_VAR 0 3
54842: PUSH
54843: DOUBLE
54844: LD_INT 1
54846: DEC
54847: ST_TO_ADDR
54848: LD_INT 3
54850: PUSH
54851: FOR_TO
54852: IFFALSE 54883
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54854: LD_VAR 0 1
54858: PPUSH
54859: CALL_OW 250
54863: PPUSH
54864: LD_VAR 0 1
54868: PPUSH
54869: CALL_OW 251
54873: PPUSH
54874: LD_INT 1
54876: PPUSH
54877: CALL_OW 453
54881: GO 54851
54883: POP
54884: POP
// end ;
54885: LD_VAR 0 2
54889: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54890: LD_INT 0
54892: PPUSH
54893: PPUSH
54894: PPUSH
54895: PPUSH
54896: PPUSH
54897: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54898: LD_VAR 0 1
54902: NOT
54903: PUSH
54904: LD_VAR 0 2
54908: NOT
54909: OR
54910: PUSH
54911: LD_VAR 0 1
54915: PPUSH
54916: CALL_OW 314
54920: OR
54921: IFFALSE 54925
// exit ;
54923: GO 55366
// x := GetX ( enemy_unit ) ;
54925: LD_ADDR_VAR 0 7
54929: PUSH
54930: LD_VAR 0 2
54934: PPUSH
54935: CALL_OW 250
54939: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54940: LD_ADDR_VAR 0 8
54944: PUSH
54945: LD_VAR 0 2
54949: PPUSH
54950: CALL_OW 251
54954: ST_TO_ADDR
// if not x or not y then
54955: LD_VAR 0 7
54959: NOT
54960: PUSH
54961: LD_VAR 0 8
54965: NOT
54966: OR
54967: IFFALSE 54971
// exit ;
54969: GO 55366
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54971: LD_ADDR_VAR 0 6
54975: PUSH
54976: LD_VAR 0 7
54980: PPUSH
54981: LD_INT 0
54983: PPUSH
54984: LD_INT 4
54986: PPUSH
54987: CALL_OW 272
54991: PUSH
54992: LD_VAR 0 8
54996: PPUSH
54997: LD_INT 0
54999: PPUSH
55000: LD_INT 4
55002: PPUSH
55003: CALL_OW 273
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_VAR 0 7
55016: PPUSH
55017: LD_INT 1
55019: PPUSH
55020: LD_INT 4
55022: PPUSH
55023: CALL_OW 272
55027: PUSH
55028: LD_VAR 0 8
55032: PPUSH
55033: LD_INT 1
55035: PPUSH
55036: LD_INT 4
55038: PPUSH
55039: CALL_OW 273
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_VAR 0 7
55052: PPUSH
55053: LD_INT 2
55055: PPUSH
55056: LD_INT 4
55058: PPUSH
55059: CALL_OW 272
55063: PUSH
55064: LD_VAR 0 8
55068: PPUSH
55069: LD_INT 2
55071: PPUSH
55072: LD_INT 4
55074: PPUSH
55075: CALL_OW 273
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_VAR 0 7
55088: PPUSH
55089: LD_INT 3
55091: PPUSH
55092: LD_INT 4
55094: PPUSH
55095: CALL_OW 272
55099: PUSH
55100: LD_VAR 0 8
55104: PPUSH
55105: LD_INT 3
55107: PPUSH
55108: LD_INT 4
55110: PPUSH
55111: CALL_OW 273
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_VAR 0 7
55124: PPUSH
55125: LD_INT 4
55127: PPUSH
55128: LD_INT 4
55130: PPUSH
55131: CALL_OW 272
55135: PUSH
55136: LD_VAR 0 8
55140: PPUSH
55141: LD_INT 4
55143: PPUSH
55144: LD_INT 4
55146: PPUSH
55147: CALL_OW 273
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_VAR 0 7
55160: PPUSH
55161: LD_INT 5
55163: PPUSH
55164: LD_INT 4
55166: PPUSH
55167: CALL_OW 272
55171: PUSH
55172: LD_VAR 0 8
55176: PPUSH
55177: LD_INT 5
55179: PPUSH
55180: LD_INT 4
55182: PPUSH
55183: CALL_OW 273
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: ST_TO_ADDR
// for i = tmp downto 1 do
55200: LD_ADDR_VAR 0 4
55204: PUSH
55205: DOUBLE
55206: LD_VAR 0 6
55210: INC
55211: ST_TO_ADDR
55212: LD_INT 1
55214: PUSH
55215: FOR_DOWNTO
55216: IFFALSE 55317
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55218: LD_VAR 0 6
55222: PUSH
55223: LD_VAR 0 4
55227: ARRAY
55228: PUSH
55229: LD_INT 1
55231: ARRAY
55232: PPUSH
55233: LD_VAR 0 6
55237: PUSH
55238: LD_VAR 0 4
55242: ARRAY
55243: PUSH
55244: LD_INT 2
55246: ARRAY
55247: PPUSH
55248: CALL_OW 488
55252: NOT
55253: PUSH
55254: LD_VAR 0 6
55258: PUSH
55259: LD_VAR 0 4
55263: ARRAY
55264: PUSH
55265: LD_INT 1
55267: ARRAY
55268: PPUSH
55269: LD_VAR 0 6
55273: PUSH
55274: LD_VAR 0 4
55278: ARRAY
55279: PUSH
55280: LD_INT 2
55282: ARRAY
55283: PPUSH
55284: CALL_OW 428
55288: PUSH
55289: LD_INT 0
55291: NONEQUAL
55292: OR
55293: IFFALSE 55315
// tmp := Delete ( tmp , i ) ;
55295: LD_ADDR_VAR 0 6
55299: PUSH
55300: LD_VAR 0 6
55304: PPUSH
55305: LD_VAR 0 4
55309: PPUSH
55310: CALL_OW 3
55314: ST_TO_ADDR
55315: GO 55215
55317: POP
55318: POP
// j := GetClosestHex ( unit , tmp ) ;
55319: LD_ADDR_VAR 0 5
55323: PUSH
55324: LD_VAR 0 1
55328: PPUSH
55329: LD_VAR 0 6
55333: PPUSH
55334: CALL 54619 0 2
55338: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55339: LD_VAR 0 1
55343: PPUSH
55344: LD_VAR 0 5
55348: PUSH
55349: LD_INT 1
55351: ARRAY
55352: PPUSH
55353: LD_VAR 0 5
55357: PUSH
55358: LD_INT 2
55360: ARRAY
55361: PPUSH
55362: CALL_OW 111
// end ;
55366: LD_VAR 0 3
55370: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55371: LD_INT 0
55373: PPUSH
55374: PPUSH
55375: PPUSH
// uc_side = 0 ;
55376: LD_ADDR_OWVAR 20
55380: PUSH
55381: LD_INT 0
55383: ST_TO_ADDR
// uc_nation = 0 ;
55384: LD_ADDR_OWVAR 21
55388: PUSH
55389: LD_INT 0
55391: ST_TO_ADDR
// InitHc ;
55392: CALL_OW 19
// InitVc ;
55396: CALL_OW 20
// if mastodonts then
55400: LD_VAR 0 6
55404: IFFALSE 55471
// for i = 1 to mastodonts do
55406: LD_ADDR_VAR 0 11
55410: PUSH
55411: DOUBLE
55412: LD_INT 1
55414: DEC
55415: ST_TO_ADDR
55416: LD_VAR 0 6
55420: PUSH
55421: FOR_TO
55422: IFFALSE 55469
// begin vc_chassis := 31 ;
55424: LD_ADDR_OWVAR 37
55428: PUSH
55429: LD_INT 31
55431: ST_TO_ADDR
// vc_control := control_rider ;
55432: LD_ADDR_OWVAR 38
55436: PUSH
55437: LD_INT 4
55439: ST_TO_ADDR
// animal := CreateVehicle ;
55440: LD_ADDR_VAR 0 12
55444: PUSH
55445: CALL_OW 45
55449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55450: LD_VAR 0 12
55454: PPUSH
55455: LD_VAR 0 8
55459: PPUSH
55460: LD_INT 0
55462: PPUSH
55463: CALL 57540 0 3
// end ;
55467: GO 55421
55469: POP
55470: POP
// if horses then
55471: LD_VAR 0 5
55475: IFFALSE 55542
// for i = 1 to horses do
55477: LD_ADDR_VAR 0 11
55481: PUSH
55482: DOUBLE
55483: LD_INT 1
55485: DEC
55486: ST_TO_ADDR
55487: LD_VAR 0 5
55491: PUSH
55492: FOR_TO
55493: IFFALSE 55540
// begin hc_class := 21 ;
55495: LD_ADDR_OWVAR 28
55499: PUSH
55500: LD_INT 21
55502: ST_TO_ADDR
// hc_gallery :=  ;
55503: LD_ADDR_OWVAR 33
55507: PUSH
55508: LD_STRING 
55510: ST_TO_ADDR
// animal := CreateHuman ;
55511: LD_ADDR_VAR 0 12
55515: PUSH
55516: CALL_OW 44
55520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55521: LD_VAR 0 12
55525: PPUSH
55526: LD_VAR 0 8
55530: PPUSH
55531: LD_INT 0
55533: PPUSH
55534: CALL 57540 0 3
// end ;
55538: GO 55492
55540: POP
55541: POP
// if birds then
55542: LD_VAR 0 1
55546: IFFALSE 55613
// for i = 1 to birds do
55548: LD_ADDR_VAR 0 11
55552: PUSH
55553: DOUBLE
55554: LD_INT 1
55556: DEC
55557: ST_TO_ADDR
55558: LD_VAR 0 1
55562: PUSH
55563: FOR_TO
55564: IFFALSE 55611
// begin hc_class = 18 ;
55566: LD_ADDR_OWVAR 28
55570: PUSH
55571: LD_INT 18
55573: ST_TO_ADDR
// hc_gallery =  ;
55574: LD_ADDR_OWVAR 33
55578: PUSH
55579: LD_STRING 
55581: ST_TO_ADDR
// animal := CreateHuman ;
55582: LD_ADDR_VAR 0 12
55586: PUSH
55587: CALL_OW 44
55591: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55592: LD_VAR 0 12
55596: PPUSH
55597: LD_VAR 0 8
55601: PPUSH
55602: LD_INT 0
55604: PPUSH
55605: CALL 57540 0 3
// end ;
55609: GO 55563
55611: POP
55612: POP
// if tigers then
55613: LD_VAR 0 2
55617: IFFALSE 55701
// for i = 1 to tigers do
55619: LD_ADDR_VAR 0 11
55623: PUSH
55624: DOUBLE
55625: LD_INT 1
55627: DEC
55628: ST_TO_ADDR
55629: LD_VAR 0 2
55633: PUSH
55634: FOR_TO
55635: IFFALSE 55699
// begin hc_class = class_tiger ;
55637: LD_ADDR_OWVAR 28
55641: PUSH
55642: LD_INT 14
55644: ST_TO_ADDR
// hc_gallery =  ;
55645: LD_ADDR_OWVAR 33
55649: PUSH
55650: LD_STRING 
55652: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55653: LD_ADDR_OWVAR 35
55657: PUSH
55658: LD_INT 7
55660: NEG
55661: PPUSH
55662: LD_INT 7
55664: PPUSH
55665: CALL_OW 12
55669: ST_TO_ADDR
// animal := CreateHuman ;
55670: LD_ADDR_VAR 0 12
55674: PUSH
55675: CALL_OW 44
55679: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55680: LD_VAR 0 12
55684: PPUSH
55685: LD_VAR 0 8
55689: PPUSH
55690: LD_INT 0
55692: PPUSH
55693: CALL 57540 0 3
// end ;
55697: GO 55634
55699: POP
55700: POP
// if apemans then
55701: LD_VAR 0 3
55705: IFFALSE 55828
// for i = 1 to apemans do
55707: LD_ADDR_VAR 0 11
55711: PUSH
55712: DOUBLE
55713: LD_INT 1
55715: DEC
55716: ST_TO_ADDR
55717: LD_VAR 0 3
55721: PUSH
55722: FOR_TO
55723: IFFALSE 55826
// begin hc_class = class_apeman ;
55725: LD_ADDR_OWVAR 28
55729: PUSH
55730: LD_INT 12
55732: ST_TO_ADDR
// hc_gallery =  ;
55733: LD_ADDR_OWVAR 33
55737: PUSH
55738: LD_STRING 
55740: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55741: LD_ADDR_OWVAR 35
55745: PUSH
55746: LD_INT 5
55748: NEG
55749: PPUSH
55750: LD_INT 5
55752: PPUSH
55753: CALL_OW 12
55757: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55758: LD_ADDR_OWVAR 31
55762: PUSH
55763: LD_INT 1
55765: PPUSH
55766: LD_INT 3
55768: PPUSH
55769: CALL_OW 12
55773: PUSH
55774: LD_INT 1
55776: PPUSH
55777: LD_INT 3
55779: PPUSH
55780: CALL_OW 12
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: ST_TO_ADDR
// animal := CreateHuman ;
55797: LD_ADDR_VAR 0 12
55801: PUSH
55802: CALL_OW 44
55806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55807: LD_VAR 0 12
55811: PPUSH
55812: LD_VAR 0 8
55816: PPUSH
55817: LD_INT 0
55819: PPUSH
55820: CALL 57540 0 3
// end ;
55824: GO 55722
55826: POP
55827: POP
// if enchidnas then
55828: LD_VAR 0 4
55832: IFFALSE 55899
// for i = 1 to enchidnas do
55834: LD_ADDR_VAR 0 11
55838: PUSH
55839: DOUBLE
55840: LD_INT 1
55842: DEC
55843: ST_TO_ADDR
55844: LD_VAR 0 4
55848: PUSH
55849: FOR_TO
55850: IFFALSE 55897
// begin hc_class = 13 ;
55852: LD_ADDR_OWVAR 28
55856: PUSH
55857: LD_INT 13
55859: ST_TO_ADDR
// hc_gallery =  ;
55860: LD_ADDR_OWVAR 33
55864: PUSH
55865: LD_STRING 
55867: ST_TO_ADDR
// animal := CreateHuman ;
55868: LD_ADDR_VAR 0 12
55872: PUSH
55873: CALL_OW 44
55877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55878: LD_VAR 0 12
55882: PPUSH
55883: LD_VAR 0 8
55887: PPUSH
55888: LD_INT 0
55890: PPUSH
55891: CALL 57540 0 3
// end ;
55895: GO 55849
55897: POP
55898: POP
// if fishes then
55899: LD_VAR 0 7
55903: IFFALSE 55970
// for i = 1 to fishes do
55905: LD_ADDR_VAR 0 11
55909: PUSH
55910: DOUBLE
55911: LD_INT 1
55913: DEC
55914: ST_TO_ADDR
55915: LD_VAR 0 7
55919: PUSH
55920: FOR_TO
55921: IFFALSE 55968
// begin hc_class = 20 ;
55923: LD_ADDR_OWVAR 28
55927: PUSH
55928: LD_INT 20
55930: ST_TO_ADDR
// hc_gallery =  ;
55931: LD_ADDR_OWVAR 33
55935: PUSH
55936: LD_STRING 
55938: ST_TO_ADDR
// animal := CreateHuman ;
55939: LD_ADDR_VAR 0 12
55943: PUSH
55944: CALL_OW 44
55948: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55949: LD_VAR 0 12
55953: PPUSH
55954: LD_VAR 0 9
55958: PPUSH
55959: LD_INT 0
55961: PPUSH
55962: CALL 57540 0 3
// end ;
55966: GO 55920
55968: POP
55969: POP
// end ;
55970: LD_VAR 0 10
55974: RET
// export function WantHeal ( sci , unit ) ; begin
55975: LD_INT 0
55977: PPUSH
// if GetTaskList ( sci ) > 0 then
55978: LD_VAR 0 1
55982: PPUSH
55983: CALL_OW 437
55987: PUSH
55988: LD_INT 0
55990: GREATER
55991: IFFALSE 56061
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55993: LD_VAR 0 1
55997: PPUSH
55998: CALL_OW 437
56002: PUSH
56003: LD_INT 1
56005: ARRAY
56006: PUSH
56007: LD_INT 1
56009: ARRAY
56010: PUSH
56011: LD_STRING l
56013: EQUAL
56014: PUSH
56015: LD_VAR 0 1
56019: PPUSH
56020: CALL_OW 437
56024: PUSH
56025: LD_INT 1
56027: ARRAY
56028: PUSH
56029: LD_INT 4
56031: ARRAY
56032: PUSH
56033: LD_VAR 0 2
56037: EQUAL
56038: AND
56039: IFFALSE 56051
// result := true else
56041: LD_ADDR_VAR 0 3
56045: PUSH
56046: LD_INT 1
56048: ST_TO_ADDR
56049: GO 56059
// result := false ;
56051: LD_ADDR_VAR 0 3
56055: PUSH
56056: LD_INT 0
56058: ST_TO_ADDR
// end else
56059: GO 56069
// result := false ;
56061: LD_ADDR_VAR 0 3
56065: PUSH
56066: LD_INT 0
56068: ST_TO_ADDR
// end ;
56069: LD_VAR 0 3
56073: RET
// export function HealTarget ( sci ) ; begin
56074: LD_INT 0
56076: PPUSH
// if not sci then
56077: LD_VAR 0 1
56081: NOT
56082: IFFALSE 56086
// exit ;
56084: GO 56151
// result := 0 ;
56086: LD_ADDR_VAR 0 2
56090: PUSH
56091: LD_INT 0
56093: ST_TO_ADDR
// if GetTaskList ( sci ) then
56094: LD_VAR 0 1
56098: PPUSH
56099: CALL_OW 437
56103: IFFALSE 56151
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56105: LD_VAR 0 1
56109: PPUSH
56110: CALL_OW 437
56114: PUSH
56115: LD_INT 1
56117: ARRAY
56118: PUSH
56119: LD_INT 1
56121: ARRAY
56122: PUSH
56123: LD_STRING l
56125: EQUAL
56126: IFFALSE 56151
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56128: LD_ADDR_VAR 0 2
56132: PUSH
56133: LD_VAR 0 1
56137: PPUSH
56138: CALL_OW 437
56142: PUSH
56143: LD_INT 1
56145: ARRAY
56146: PUSH
56147: LD_INT 4
56149: ARRAY
56150: ST_TO_ADDR
// end ;
56151: LD_VAR 0 2
56155: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56156: LD_INT 0
56158: PPUSH
56159: PPUSH
56160: PPUSH
56161: PPUSH
// if not base_units then
56162: LD_VAR 0 1
56166: NOT
56167: IFFALSE 56171
// exit ;
56169: GO 56258
// result := false ;
56171: LD_ADDR_VAR 0 2
56175: PUSH
56176: LD_INT 0
56178: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56179: LD_ADDR_VAR 0 5
56183: PUSH
56184: LD_VAR 0 1
56188: PPUSH
56189: LD_INT 21
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PPUSH
56199: CALL_OW 72
56203: ST_TO_ADDR
// if not tmp then
56204: LD_VAR 0 5
56208: NOT
56209: IFFALSE 56213
// exit ;
56211: GO 56258
// for i in tmp do
56213: LD_ADDR_VAR 0 3
56217: PUSH
56218: LD_VAR 0 5
56222: PUSH
56223: FOR_IN
56224: IFFALSE 56256
// begin result := EnemyInRange ( i , 22 ) ;
56226: LD_ADDR_VAR 0 2
56230: PUSH
56231: LD_VAR 0 3
56235: PPUSH
56236: LD_INT 22
56238: PPUSH
56239: CALL 54494 0 2
56243: ST_TO_ADDR
// if result then
56244: LD_VAR 0 2
56248: IFFALSE 56254
// exit ;
56250: POP
56251: POP
56252: GO 56258
// end ;
56254: GO 56223
56256: POP
56257: POP
// end ;
56258: LD_VAR 0 2
56262: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56263: LD_INT 0
56265: PPUSH
56266: PPUSH
// if not units then
56267: LD_VAR 0 1
56271: NOT
56272: IFFALSE 56276
// exit ;
56274: GO 56346
// result := [ ] ;
56276: LD_ADDR_VAR 0 3
56280: PUSH
56281: EMPTY
56282: ST_TO_ADDR
// for i in units do
56283: LD_ADDR_VAR 0 4
56287: PUSH
56288: LD_VAR 0 1
56292: PUSH
56293: FOR_IN
56294: IFFALSE 56344
// if GetTag ( i ) = tag then
56296: LD_VAR 0 4
56300: PPUSH
56301: CALL_OW 110
56305: PUSH
56306: LD_VAR 0 2
56310: EQUAL
56311: IFFALSE 56342
// result := Insert ( result , result + 1 , i ) ;
56313: LD_ADDR_VAR 0 3
56317: PUSH
56318: LD_VAR 0 3
56322: PPUSH
56323: LD_VAR 0 3
56327: PUSH
56328: LD_INT 1
56330: PLUS
56331: PPUSH
56332: LD_VAR 0 4
56336: PPUSH
56337: CALL_OW 2
56341: ST_TO_ADDR
56342: GO 56293
56344: POP
56345: POP
// end ;
56346: LD_VAR 0 3
56350: RET
// export function IsDriver ( un ) ; begin
56351: LD_INT 0
56353: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56354: LD_ADDR_VAR 0 2
56358: PUSH
56359: LD_VAR 0 1
56363: PUSH
56364: LD_INT 55
56366: PUSH
56367: EMPTY
56368: LIST
56369: PPUSH
56370: CALL_OW 69
56374: IN
56375: ST_TO_ADDR
// end ;
56376: LD_VAR 0 2
56380: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56381: LD_INT 0
56383: PPUSH
56384: PPUSH
// list := [ ] ;
56385: LD_ADDR_VAR 0 5
56389: PUSH
56390: EMPTY
56391: ST_TO_ADDR
// case d of 0 :
56392: LD_VAR 0 3
56396: PUSH
56397: LD_INT 0
56399: DOUBLE
56400: EQUAL
56401: IFTRUE 56405
56403: GO 56538
56405: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56406: LD_ADDR_VAR 0 5
56410: PUSH
56411: LD_VAR 0 1
56415: PUSH
56416: LD_INT 4
56418: MINUS
56419: PUSH
56420: LD_VAR 0 2
56424: PUSH
56425: LD_INT 4
56427: MINUS
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: PUSH
56437: LD_VAR 0 1
56441: PUSH
56442: LD_INT 3
56444: MINUS
56445: PUSH
56446: LD_VAR 0 2
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: LIST
56458: PUSH
56459: LD_VAR 0 1
56463: PUSH
56464: LD_INT 4
56466: PLUS
56467: PUSH
56468: LD_VAR 0 2
56472: PUSH
56473: LD_INT 4
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: PUSH
56481: LD_VAR 0 1
56485: PUSH
56486: LD_INT 3
56488: PLUS
56489: PUSH
56490: LD_VAR 0 2
56494: PUSH
56495: LD_INT 3
56497: PLUS
56498: PUSH
56499: LD_INT 5
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: LIST
56506: PUSH
56507: LD_VAR 0 1
56511: PUSH
56512: LD_VAR 0 2
56516: PUSH
56517: LD_INT 4
56519: PLUS
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: LIST
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: ST_TO_ADDR
// end ; 1 :
56536: GO 57236
56538: LD_INT 1
56540: DOUBLE
56541: EQUAL
56542: IFTRUE 56546
56544: GO 56679
56546: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56547: LD_ADDR_VAR 0 5
56551: PUSH
56552: LD_VAR 0 1
56556: PUSH
56557: LD_VAR 0 2
56561: PUSH
56562: LD_INT 4
56564: MINUS
56565: PUSH
56566: LD_INT 3
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: PUSH
56574: LD_VAR 0 1
56578: PUSH
56579: LD_INT 3
56581: MINUS
56582: PUSH
56583: LD_VAR 0 2
56587: PUSH
56588: LD_INT 3
56590: MINUS
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: PUSH
56600: LD_VAR 0 1
56604: PUSH
56605: LD_INT 4
56607: MINUS
56608: PUSH
56609: LD_VAR 0 2
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: PUSH
56622: LD_VAR 0 1
56626: PUSH
56627: LD_VAR 0 2
56631: PUSH
56632: LD_INT 3
56634: PLUS
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: LIST
56643: PUSH
56644: LD_VAR 0 1
56648: PUSH
56649: LD_INT 4
56651: PLUS
56652: PUSH
56653: LD_VAR 0 2
56657: PUSH
56658: LD_INT 4
56660: PLUS
56661: PUSH
56662: LD_INT 5
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: LIST
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: ST_TO_ADDR
// end ; 2 :
56677: GO 57236
56679: LD_INT 2
56681: DOUBLE
56682: EQUAL
56683: IFTRUE 56687
56685: GO 56816
56687: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56688: LD_ADDR_VAR 0 5
56692: PUSH
56693: LD_VAR 0 1
56697: PUSH
56698: LD_VAR 0 2
56702: PUSH
56703: LD_INT 3
56705: MINUS
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: PUSH
56715: LD_VAR 0 1
56719: PUSH
56720: LD_INT 4
56722: PLUS
56723: PUSH
56724: LD_VAR 0 2
56728: PUSH
56729: LD_INT 4
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: LIST
56736: PUSH
56737: LD_VAR 0 1
56741: PUSH
56742: LD_VAR 0 2
56746: PUSH
56747: LD_INT 4
56749: PLUS
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: PUSH
56759: LD_VAR 0 1
56763: PUSH
56764: LD_INT 3
56766: MINUS
56767: PUSH
56768: LD_VAR 0 2
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: LIST
56780: PUSH
56781: LD_VAR 0 1
56785: PUSH
56786: LD_INT 4
56788: MINUS
56789: PUSH
56790: LD_VAR 0 2
56794: PUSH
56795: LD_INT 4
56797: MINUS
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: LIST
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: ST_TO_ADDR
// end ; 3 :
56814: GO 57236
56816: LD_INT 3
56818: DOUBLE
56819: EQUAL
56820: IFTRUE 56824
56822: GO 56957
56824: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56825: LD_ADDR_VAR 0 5
56829: PUSH
56830: LD_VAR 0 1
56834: PUSH
56835: LD_INT 3
56837: PLUS
56838: PUSH
56839: LD_VAR 0 2
56843: PUSH
56844: LD_INT 4
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: PUSH
56852: LD_VAR 0 1
56856: PUSH
56857: LD_INT 4
56859: PLUS
56860: PUSH
56861: LD_VAR 0 2
56865: PUSH
56866: LD_INT 4
56868: PLUS
56869: PUSH
56870: LD_INT 5
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: PUSH
56878: LD_VAR 0 1
56882: PUSH
56883: LD_INT 4
56885: MINUS
56886: PUSH
56887: LD_VAR 0 2
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: PUSH
56900: LD_VAR 0 1
56904: PUSH
56905: LD_VAR 0 2
56909: PUSH
56910: LD_INT 4
56912: MINUS
56913: PUSH
56914: LD_INT 3
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: PUSH
56922: LD_VAR 0 1
56926: PUSH
56927: LD_INT 3
56929: MINUS
56930: PUSH
56931: LD_VAR 0 2
56935: PUSH
56936: LD_INT 3
56938: MINUS
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: LIST
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
// end ; 4 :
56955: GO 57236
56957: LD_INT 4
56959: DOUBLE
56960: EQUAL
56961: IFTRUE 56965
56963: GO 57098
56965: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56966: LD_ADDR_VAR 0 5
56970: PUSH
56971: LD_VAR 0 1
56975: PUSH
56976: LD_VAR 0 2
56980: PUSH
56981: LD_INT 4
56983: PLUS
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: PUSH
56993: LD_VAR 0 1
56997: PUSH
56998: LD_INT 3
57000: PLUS
57001: PUSH
57002: LD_VAR 0 2
57006: PUSH
57007: LD_INT 3
57009: PLUS
57010: PUSH
57011: LD_INT 5
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: PUSH
57019: LD_VAR 0 1
57023: PUSH
57024: LD_INT 4
57026: PLUS
57027: PUSH
57028: LD_VAR 0 2
57032: PUSH
57033: LD_INT 4
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: PUSH
57041: LD_VAR 0 1
57045: PUSH
57046: LD_VAR 0 2
57050: PUSH
57051: LD_INT 3
57053: MINUS
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: LIST
57062: PUSH
57063: LD_VAR 0 1
57067: PUSH
57068: LD_INT 4
57070: MINUS
57071: PUSH
57072: LD_VAR 0 2
57076: PUSH
57077: LD_INT 4
57079: MINUS
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: ST_TO_ADDR
// end ; 5 :
57096: GO 57236
57098: LD_INT 5
57100: DOUBLE
57101: EQUAL
57102: IFTRUE 57106
57104: GO 57235
57106: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57107: LD_ADDR_VAR 0 5
57111: PUSH
57112: LD_VAR 0 1
57116: PUSH
57117: LD_INT 4
57119: MINUS
57120: PUSH
57121: LD_VAR 0 2
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: PUSH
57134: LD_VAR 0 1
57138: PUSH
57139: LD_VAR 0 2
57143: PUSH
57144: LD_INT 4
57146: MINUS
57147: PUSH
57148: LD_INT 3
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: LIST
57155: PUSH
57156: LD_VAR 0 1
57160: PUSH
57161: LD_INT 4
57163: PLUS
57164: PUSH
57165: LD_VAR 0 2
57169: PUSH
57170: LD_INT 4
57172: PLUS
57173: PUSH
57174: LD_INT 5
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: LIST
57181: PUSH
57182: LD_VAR 0 1
57186: PUSH
57187: LD_INT 3
57189: PLUS
57190: PUSH
57191: LD_VAR 0 2
57195: PUSH
57196: LD_INT 4
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: PUSH
57204: LD_VAR 0 1
57208: PUSH
57209: LD_VAR 0 2
57213: PUSH
57214: LD_INT 3
57216: PLUS
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: LIST
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: ST_TO_ADDR
// end ; end ;
57233: GO 57236
57235: POP
// result := list ;
57236: LD_ADDR_VAR 0 4
57240: PUSH
57241: LD_VAR 0 5
57245: ST_TO_ADDR
// end ;
57246: LD_VAR 0 4
57250: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57251: LD_INT 0
57253: PPUSH
57254: PPUSH
57255: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57256: LD_VAR 0 1
57260: NOT
57261: PUSH
57262: LD_VAR 0 2
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: LD_INT 4
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: IN
57285: NOT
57286: OR
57287: IFFALSE 57291
// exit ;
57289: GO 57383
// tmp := [ ] ;
57291: LD_ADDR_VAR 0 5
57295: PUSH
57296: EMPTY
57297: ST_TO_ADDR
// for i in units do
57298: LD_ADDR_VAR 0 4
57302: PUSH
57303: LD_VAR 0 1
57307: PUSH
57308: FOR_IN
57309: IFFALSE 57352
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57311: LD_ADDR_VAR 0 5
57315: PUSH
57316: LD_VAR 0 5
57320: PPUSH
57321: LD_VAR 0 5
57325: PUSH
57326: LD_INT 1
57328: PLUS
57329: PPUSH
57330: LD_VAR 0 4
57334: PPUSH
57335: LD_VAR 0 2
57339: PPUSH
57340: CALL_OW 259
57344: PPUSH
57345: CALL_OW 2
57349: ST_TO_ADDR
57350: GO 57308
57352: POP
57353: POP
// if not tmp then
57354: LD_VAR 0 5
57358: NOT
57359: IFFALSE 57363
// exit ;
57361: GO 57383
// result := SortListByListDesc ( units , tmp ) ;
57363: LD_ADDR_VAR 0 3
57367: PUSH
57368: LD_VAR 0 1
57372: PPUSH
57373: LD_VAR 0 5
57377: PPUSH
57378: CALL_OW 77
57382: ST_TO_ADDR
// end ;
57383: LD_VAR 0 3
57387: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57388: LD_INT 0
57390: PPUSH
57391: PPUSH
57392: PPUSH
// x := GetX ( building ) ;
57393: LD_ADDR_VAR 0 4
57397: PUSH
57398: LD_VAR 0 2
57402: PPUSH
57403: CALL_OW 250
57407: ST_TO_ADDR
// y := GetY ( building ) ;
57408: LD_ADDR_VAR 0 5
57412: PUSH
57413: LD_VAR 0 2
57417: PPUSH
57418: CALL_OW 251
57422: ST_TO_ADDR
// if GetTaskList ( unit ) then
57423: LD_VAR 0 1
57427: PPUSH
57428: CALL_OW 437
57432: IFFALSE 57527
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57434: LD_STRING e
57436: PUSH
57437: LD_VAR 0 1
57441: PPUSH
57442: CALL_OW 437
57446: PUSH
57447: LD_INT 1
57449: ARRAY
57450: PUSH
57451: LD_INT 1
57453: ARRAY
57454: EQUAL
57455: PUSH
57456: LD_VAR 0 4
57460: PUSH
57461: LD_VAR 0 1
57465: PPUSH
57466: CALL_OW 437
57470: PUSH
57471: LD_INT 1
57473: ARRAY
57474: PUSH
57475: LD_INT 2
57477: ARRAY
57478: EQUAL
57479: AND
57480: PUSH
57481: LD_VAR 0 5
57485: PUSH
57486: LD_VAR 0 1
57490: PPUSH
57491: CALL_OW 437
57495: PUSH
57496: LD_INT 1
57498: ARRAY
57499: PUSH
57500: LD_INT 3
57502: ARRAY
57503: EQUAL
57504: AND
57505: IFFALSE 57517
// result := true else
57507: LD_ADDR_VAR 0 3
57511: PUSH
57512: LD_INT 1
57514: ST_TO_ADDR
57515: GO 57525
// result := false ;
57517: LD_ADDR_VAR 0 3
57521: PUSH
57522: LD_INT 0
57524: ST_TO_ADDR
// end else
57525: GO 57535
// result := false ;
57527: LD_ADDR_VAR 0 3
57531: PUSH
57532: LD_INT 0
57534: ST_TO_ADDR
// end ;
57535: LD_VAR 0 3
57539: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57540: LD_INT 0
57542: PPUSH
57543: PPUSH
57544: PPUSH
57545: PPUSH
// if not unit or not area then
57546: LD_VAR 0 1
57550: NOT
57551: PUSH
57552: LD_VAR 0 2
57556: NOT
57557: OR
57558: IFFALSE 57562
// exit ;
57560: GO 57726
// tmp := AreaToList ( area , i ) ;
57562: LD_ADDR_VAR 0 6
57566: PUSH
57567: LD_VAR 0 2
57571: PPUSH
57572: LD_VAR 0 5
57576: PPUSH
57577: CALL_OW 517
57581: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57582: LD_ADDR_VAR 0 5
57586: PUSH
57587: DOUBLE
57588: LD_INT 1
57590: DEC
57591: ST_TO_ADDR
57592: LD_VAR 0 6
57596: PUSH
57597: LD_INT 1
57599: ARRAY
57600: PUSH
57601: FOR_TO
57602: IFFALSE 57724
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57604: LD_ADDR_VAR 0 7
57608: PUSH
57609: LD_VAR 0 6
57613: PUSH
57614: LD_INT 1
57616: ARRAY
57617: PUSH
57618: LD_VAR 0 5
57622: ARRAY
57623: PUSH
57624: LD_VAR 0 6
57628: PUSH
57629: LD_INT 2
57631: ARRAY
57632: PUSH
57633: LD_VAR 0 5
57637: ARRAY
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57643: LD_VAR 0 7
57647: PUSH
57648: LD_INT 1
57650: ARRAY
57651: PPUSH
57652: LD_VAR 0 7
57656: PUSH
57657: LD_INT 2
57659: ARRAY
57660: PPUSH
57661: CALL_OW 428
57665: PUSH
57666: LD_INT 0
57668: EQUAL
57669: IFFALSE 57722
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57671: LD_VAR 0 1
57675: PPUSH
57676: LD_VAR 0 7
57680: PUSH
57681: LD_INT 1
57683: ARRAY
57684: PPUSH
57685: LD_VAR 0 7
57689: PUSH
57690: LD_INT 2
57692: ARRAY
57693: PPUSH
57694: LD_VAR 0 3
57698: PPUSH
57699: CALL_OW 48
// result := IsPlaced ( unit ) ;
57703: LD_ADDR_VAR 0 4
57707: PUSH
57708: LD_VAR 0 1
57712: PPUSH
57713: CALL_OW 305
57717: ST_TO_ADDR
// exit ;
57718: POP
57719: POP
57720: GO 57726
// end ; end ;
57722: GO 57601
57724: POP
57725: POP
// end ;
57726: LD_VAR 0 4
57730: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57731: LD_INT 0
57733: PPUSH
57734: PPUSH
57735: PPUSH
// if not side or side > 8 then
57736: LD_VAR 0 1
57740: NOT
57741: PUSH
57742: LD_VAR 0 1
57746: PUSH
57747: LD_INT 8
57749: GREATER
57750: OR
57751: IFFALSE 57755
// exit ;
57753: GO 57942
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57755: LD_ADDR_VAR 0 4
57759: PUSH
57760: LD_INT 22
57762: PUSH
57763: LD_VAR 0 1
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 21
57774: PUSH
57775: LD_INT 3
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PPUSH
57786: CALL_OW 69
57790: ST_TO_ADDR
// if not tmp then
57791: LD_VAR 0 4
57795: NOT
57796: IFFALSE 57800
// exit ;
57798: GO 57942
// enable_addtolog := true ;
57800: LD_ADDR_OWVAR 81
57804: PUSH
57805: LD_INT 1
57807: ST_TO_ADDR
// AddToLog ( [ ) ;
57808: LD_STRING [
57810: PPUSH
57811: CALL_OW 561
// for i in tmp do
57815: LD_ADDR_VAR 0 3
57819: PUSH
57820: LD_VAR 0 4
57824: PUSH
57825: FOR_IN
57826: IFFALSE 57933
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57828: LD_STRING [
57830: PUSH
57831: LD_VAR 0 3
57835: PPUSH
57836: CALL_OW 266
57840: STR
57841: PUSH
57842: LD_STRING , 
57844: STR
57845: PUSH
57846: LD_VAR 0 3
57850: PPUSH
57851: CALL_OW 250
57855: STR
57856: PUSH
57857: LD_STRING , 
57859: STR
57860: PUSH
57861: LD_VAR 0 3
57865: PPUSH
57866: CALL_OW 251
57870: STR
57871: PUSH
57872: LD_STRING , 
57874: STR
57875: PUSH
57876: LD_VAR 0 3
57880: PPUSH
57881: CALL_OW 254
57885: STR
57886: PUSH
57887: LD_STRING , 
57889: STR
57890: PUSH
57891: LD_VAR 0 3
57895: PPUSH
57896: LD_INT 1
57898: PPUSH
57899: CALL_OW 268
57903: STR
57904: PUSH
57905: LD_STRING , 
57907: STR
57908: PUSH
57909: LD_VAR 0 3
57913: PPUSH
57914: LD_INT 2
57916: PPUSH
57917: CALL_OW 268
57921: STR
57922: PUSH
57923: LD_STRING ],
57925: STR
57926: PPUSH
57927: CALL_OW 561
// end ;
57931: GO 57825
57933: POP
57934: POP
// AddToLog ( ]; ) ;
57935: LD_STRING ];
57937: PPUSH
57938: CALL_OW 561
// end ;
57942: LD_VAR 0 2
57946: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57947: LD_INT 0
57949: PPUSH
57950: PPUSH
57951: PPUSH
57952: PPUSH
57953: PPUSH
// if not area or not rate or not max then
57954: LD_VAR 0 1
57958: NOT
57959: PUSH
57960: LD_VAR 0 2
57964: NOT
57965: OR
57966: PUSH
57967: LD_VAR 0 4
57971: NOT
57972: OR
57973: IFFALSE 57977
// exit ;
57975: GO 58169
// while 1 do
57977: LD_INT 1
57979: IFFALSE 58169
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57981: LD_ADDR_VAR 0 9
57985: PUSH
57986: LD_VAR 0 1
57990: PPUSH
57991: LD_INT 1
57993: PPUSH
57994: CALL_OW 287
57998: PUSH
57999: LD_INT 10
58001: MUL
58002: ST_TO_ADDR
// r := rate / 10 ;
58003: LD_ADDR_VAR 0 7
58007: PUSH
58008: LD_VAR 0 2
58012: PUSH
58013: LD_INT 10
58015: DIVREAL
58016: ST_TO_ADDR
// time := 1 1$00 ;
58017: LD_ADDR_VAR 0 8
58021: PUSH
58022: LD_INT 2100
58024: ST_TO_ADDR
// if amount < min then
58025: LD_VAR 0 9
58029: PUSH
58030: LD_VAR 0 3
58034: LESS
58035: IFFALSE 58053
// r := r * 2 else
58037: LD_ADDR_VAR 0 7
58041: PUSH
58042: LD_VAR 0 7
58046: PUSH
58047: LD_INT 2
58049: MUL
58050: ST_TO_ADDR
58051: GO 58079
// if amount > max then
58053: LD_VAR 0 9
58057: PUSH
58058: LD_VAR 0 4
58062: GREATER
58063: IFFALSE 58079
// r := r / 2 ;
58065: LD_ADDR_VAR 0 7
58069: PUSH
58070: LD_VAR 0 7
58074: PUSH
58075: LD_INT 2
58077: DIVREAL
58078: ST_TO_ADDR
// time := time / r ;
58079: LD_ADDR_VAR 0 8
58083: PUSH
58084: LD_VAR 0 8
58088: PUSH
58089: LD_VAR 0 7
58093: DIVREAL
58094: ST_TO_ADDR
// if time < 0 then
58095: LD_VAR 0 8
58099: PUSH
58100: LD_INT 0
58102: LESS
58103: IFFALSE 58120
// time := time * - 1 ;
58105: LD_ADDR_VAR 0 8
58109: PUSH
58110: LD_VAR 0 8
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: MUL
58119: ST_TO_ADDR
// wait ( time ) ;
58120: LD_VAR 0 8
58124: PPUSH
58125: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58129: LD_INT 35
58131: PPUSH
58132: LD_INT 875
58134: PPUSH
58135: CALL_OW 12
58139: PPUSH
58140: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58144: LD_INT 1
58146: PPUSH
58147: LD_INT 5
58149: PPUSH
58150: CALL_OW 12
58154: PPUSH
58155: LD_VAR 0 1
58159: PPUSH
58160: LD_INT 1
58162: PPUSH
58163: CALL_OW 55
// end ;
58167: GO 57977
// end ;
58169: LD_VAR 0 5
58173: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58174: LD_INT 0
58176: PPUSH
58177: PPUSH
58178: PPUSH
58179: PPUSH
58180: PPUSH
58181: PPUSH
58182: PPUSH
58183: PPUSH
// if not turrets or not factories then
58184: LD_VAR 0 1
58188: NOT
58189: PUSH
58190: LD_VAR 0 2
58194: NOT
58195: OR
58196: IFFALSE 58200
// exit ;
58198: GO 58507
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58200: LD_ADDR_VAR 0 10
58204: PUSH
58205: LD_INT 5
58207: PUSH
58208: LD_INT 6
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 4
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: LD_INT 5
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 24
58242: PUSH
58243: LD_INT 25
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 23
58252: PUSH
58253: LD_INT 27
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 42
58266: PUSH
58267: LD_INT 43
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 44
58276: PUSH
58277: LD_INT 46
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 45
58286: PUSH
58287: LD_INT 47
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: ST_TO_ADDR
// result := [ ] ;
58304: LD_ADDR_VAR 0 3
58308: PUSH
58309: EMPTY
58310: ST_TO_ADDR
// for i in turrets do
58311: LD_ADDR_VAR 0 4
58315: PUSH
58316: LD_VAR 0 1
58320: PUSH
58321: FOR_IN
58322: IFFALSE 58505
// begin nat := GetNation ( i ) ;
58324: LD_ADDR_VAR 0 7
58328: PUSH
58329: LD_VAR 0 4
58333: PPUSH
58334: CALL_OW 248
58338: ST_TO_ADDR
// weapon := 0 ;
58339: LD_ADDR_VAR 0 8
58343: PUSH
58344: LD_INT 0
58346: ST_TO_ADDR
// if not nat then
58347: LD_VAR 0 7
58351: NOT
58352: IFFALSE 58356
// continue ;
58354: GO 58321
// for j in list [ nat ] do
58356: LD_ADDR_VAR 0 5
58360: PUSH
58361: LD_VAR 0 10
58365: PUSH
58366: LD_VAR 0 7
58370: ARRAY
58371: PUSH
58372: FOR_IN
58373: IFFALSE 58414
// if GetBWeapon ( i ) = j [ 1 ] then
58375: LD_VAR 0 4
58379: PPUSH
58380: CALL_OW 269
58384: PUSH
58385: LD_VAR 0 5
58389: PUSH
58390: LD_INT 1
58392: ARRAY
58393: EQUAL
58394: IFFALSE 58412
// begin weapon := j [ 2 ] ;
58396: LD_ADDR_VAR 0 8
58400: PUSH
58401: LD_VAR 0 5
58405: PUSH
58406: LD_INT 2
58408: ARRAY
58409: ST_TO_ADDR
// break ;
58410: GO 58414
// end ;
58412: GO 58372
58414: POP
58415: POP
// if not weapon then
58416: LD_VAR 0 8
58420: NOT
58421: IFFALSE 58425
// continue ;
58423: GO 58321
// for k in factories do
58425: LD_ADDR_VAR 0 6
58429: PUSH
58430: LD_VAR 0 2
58434: PUSH
58435: FOR_IN
58436: IFFALSE 58501
// begin weapons := AvailableWeaponList ( k ) ;
58438: LD_ADDR_VAR 0 9
58442: PUSH
58443: LD_VAR 0 6
58447: PPUSH
58448: CALL_OW 478
58452: ST_TO_ADDR
// if not weapons then
58453: LD_VAR 0 9
58457: NOT
58458: IFFALSE 58462
// continue ;
58460: GO 58435
// if weapon in weapons then
58462: LD_VAR 0 8
58466: PUSH
58467: LD_VAR 0 9
58471: IN
58472: IFFALSE 58499
// begin result := [ i , weapon ] ;
58474: LD_ADDR_VAR 0 3
58478: PUSH
58479: LD_VAR 0 4
58483: PUSH
58484: LD_VAR 0 8
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: ST_TO_ADDR
// exit ;
58493: POP
58494: POP
58495: POP
58496: POP
58497: GO 58507
// end ; end ;
58499: GO 58435
58501: POP
58502: POP
// end ;
58503: GO 58321
58505: POP
58506: POP
// end ;
58507: LD_VAR 0 3
58511: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58512: LD_INT 0
58514: PPUSH
// if not side or side > 8 then
58515: LD_VAR 0 3
58519: NOT
58520: PUSH
58521: LD_VAR 0 3
58525: PUSH
58526: LD_INT 8
58528: GREATER
58529: OR
58530: IFFALSE 58534
// exit ;
58532: GO 58593
// if not range then
58534: LD_VAR 0 4
58538: NOT
58539: IFFALSE 58550
// range := - 12 ;
58541: LD_ADDR_VAR 0 4
58545: PUSH
58546: LD_INT 12
58548: NEG
58549: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58550: LD_VAR 0 1
58554: PPUSH
58555: LD_VAR 0 2
58559: PPUSH
58560: LD_VAR 0 3
58564: PPUSH
58565: LD_VAR 0 4
58569: PPUSH
58570: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58574: LD_VAR 0 1
58578: PPUSH
58579: LD_VAR 0 2
58583: PPUSH
58584: LD_VAR 0 3
58588: PPUSH
58589: CALL_OW 331
// end ;
58593: LD_VAR 0 5
58597: RET
// export function Video ( mode ) ; begin
58598: LD_INT 0
58600: PPUSH
// ingame_video = mode ;
58601: LD_ADDR_OWVAR 52
58605: PUSH
58606: LD_VAR 0 1
58610: ST_TO_ADDR
// interface_hidden = mode ;
58611: LD_ADDR_OWVAR 54
58615: PUSH
58616: LD_VAR 0 1
58620: ST_TO_ADDR
// end ;
58621: LD_VAR 0 2
58625: RET
// export function Join ( array , element ) ; begin
58626: LD_INT 0
58628: PPUSH
// result := array ^ element ;
58629: LD_ADDR_VAR 0 3
58633: PUSH
58634: LD_VAR 0 1
58638: PUSH
58639: LD_VAR 0 2
58643: ADD
58644: ST_TO_ADDR
// end ;
58645: LD_VAR 0 3
58649: RET
// export function JoinUnion ( array , element ) ; begin
58650: LD_INT 0
58652: PPUSH
// result := array union element ;
58653: LD_ADDR_VAR 0 3
58657: PUSH
58658: LD_VAR 0 1
58662: PUSH
58663: LD_VAR 0 2
58667: UNION
58668: ST_TO_ADDR
// end ;
58669: LD_VAR 0 3
58673: RET
// export function GetBehemoths ( side ) ; begin
58674: LD_INT 0
58676: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58677: LD_ADDR_VAR 0 2
58681: PUSH
58682: LD_INT 22
58684: PUSH
58685: LD_VAR 0 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 31
58696: PUSH
58697: LD_INT 25
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PPUSH
58708: CALL_OW 69
58712: ST_TO_ADDR
// end ;
58713: LD_VAR 0 2
58717: RET
// export function Shuffle ( array ) ; var i , index ; begin
58718: LD_INT 0
58720: PPUSH
58721: PPUSH
58722: PPUSH
// result := [ ] ;
58723: LD_ADDR_VAR 0 2
58727: PUSH
58728: EMPTY
58729: ST_TO_ADDR
// if not array then
58730: LD_VAR 0 1
58734: NOT
58735: IFFALSE 58739
// exit ;
58737: GO 58838
// Randomize ;
58739: CALL_OW 10
// for i = array downto 1 do
58743: LD_ADDR_VAR 0 3
58747: PUSH
58748: DOUBLE
58749: LD_VAR 0 1
58753: INC
58754: ST_TO_ADDR
58755: LD_INT 1
58757: PUSH
58758: FOR_DOWNTO
58759: IFFALSE 58836
// begin index := rand ( 1 , array ) ;
58761: LD_ADDR_VAR 0 4
58765: PUSH
58766: LD_INT 1
58768: PPUSH
58769: LD_VAR 0 1
58773: PPUSH
58774: CALL_OW 12
58778: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58779: LD_ADDR_VAR 0 2
58783: PUSH
58784: LD_VAR 0 2
58788: PPUSH
58789: LD_VAR 0 2
58793: PUSH
58794: LD_INT 1
58796: PLUS
58797: PPUSH
58798: LD_VAR 0 1
58802: PUSH
58803: LD_VAR 0 4
58807: ARRAY
58808: PPUSH
58809: CALL_OW 2
58813: ST_TO_ADDR
// array := Delete ( array , index ) ;
58814: LD_ADDR_VAR 0 1
58818: PUSH
58819: LD_VAR 0 1
58823: PPUSH
58824: LD_VAR 0 4
58828: PPUSH
58829: CALL_OW 3
58833: ST_TO_ADDR
// end ;
58834: GO 58758
58836: POP
58837: POP
// end ;
58838: LD_VAR 0 2
58842: RET
// export function GetBaseMaterials ( base ) ; begin
58843: LD_INT 0
58845: PPUSH
// result := [ 0 , 0 , 0 ] ;
58846: LD_ADDR_VAR 0 2
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: LIST
58864: ST_TO_ADDR
// if not base then
58865: LD_VAR 0 1
58869: NOT
58870: IFFALSE 58874
// exit ;
58872: GO 58923
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58874: LD_ADDR_VAR 0 2
58878: PUSH
58879: LD_VAR 0 1
58883: PPUSH
58884: LD_INT 1
58886: PPUSH
58887: CALL_OW 275
58891: PUSH
58892: LD_VAR 0 1
58896: PPUSH
58897: LD_INT 2
58899: PPUSH
58900: CALL_OW 275
58904: PUSH
58905: LD_VAR 0 1
58909: PPUSH
58910: LD_INT 3
58912: PPUSH
58913: CALL_OW 275
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: ST_TO_ADDR
// end ;
58923: LD_VAR 0 2
58927: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58928: LD_INT 0
58930: PPUSH
58931: PPUSH
// result := array ;
58932: LD_ADDR_VAR 0 3
58936: PUSH
58937: LD_VAR 0 1
58941: ST_TO_ADDR
// if size > 0 then
58942: LD_VAR 0 2
58946: PUSH
58947: LD_INT 0
58949: GREATER
58950: IFFALSE 58996
// for i := array downto size do
58952: LD_ADDR_VAR 0 4
58956: PUSH
58957: DOUBLE
58958: LD_VAR 0 1
58962: INC
58963: ST_TO_ADDR
58964: LD_VAR 0 2
58968: PUSH
58969: FOR_DOWNTO
58970: IFFALSE 58994
// result := Delete ( result , result ) ;
58972: LD_ADDR_VAR 0 3
58976: PUSH
58977: LD_VAR 0 3
58981: PPUSH
58982: LD_VAR 0 3
58986: PPUSH
58987: CALL_OW 3
58991: ST_TO_ADDR
58992: GO 58969
58994: POP
58995: POP
// end ;
58996: LD_VAR 0 3
59000: RET
// export function ComExit ( unit ) ; var tmp ; begin
59001: LD_INT 0
59003: PPUSH
59004: PPUSH
// if not IsInUnit ( unit ) then
59005: LD_VAR 0 1
59009: PPUSH
59010: CALL_OW 310
59014: NOT
59015: IFFALSE 59019
// exit ;
59017: GO 59079
// tmp := IsInUnit ( unit ) ;
59019: LD_ADDR_VAR 0 3
59023: PUSH
59024: LD_VAR 0 1
59028: PPUSH
59029: CALL_OW 310
59033: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59034: LD_VAR 0 3
59038: PPUSH
59039: CALL_OW 247
59043: PUSH
59044: LD_INT 2
59046: EQUAL
59047: IFFALSE 59060
// ComExitVehicle ( unit ) else
59049: LD_VAR 0 1
59053: PPUSH
59054: CALL_OW 121
59058: GO 59069
// ComExitBuilding ( unit ) ;
59060: LD_VAR 0 1
59064: PPUSH
59065: CALL_OW 122
// result := tmp ;
59069: LD_ADDR_VAR 0 2
59073: PUSH
59074: LD_VAR 0 3
59078: ST_TO_ADDR
// end ;
59079: LD_VAR 0 2
59083: RET
// export function ResetHc ; begin
59084: LD_INT 0
59086: PPUSH
// InitHc ;
59087: CALL_OW 19
// hc_importance := 0 ;
59091: LD_ADDR_OWVAR 32
59095: PUSH
59096: LD_INT 0
59098: ST_TO_ADDR
// end ;
59099: LD_VAR 0 1
59103: RET
