// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; export buildedLab ; export achievement_DestroyedHovercrafts ; export achievement_CollectedCrates ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 250 0 0
// omarStatus = 0 ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// stevensStatus = 0 ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// labDestroyed = 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  48: LD_ADDR_EXP 5
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  55: LD_ADDR_EXP 6
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  62: LD_ADDR_EXP 4
  66: PUSH
  67: LD_STRING 05_TanksIntro_1
  69: PPUSH
  70: EMPTY
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// actionTime = 0 0$00 ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  85: LD_ADDR_EXP 10
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
  93: LD_ADDR_EXP 11
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// sawArabianBase = false ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// sawApeman = false ;
 109: LD_ADDR_EXP 9
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// stevensPlaced = false ;
 117: LD_ADDR_EXP 14
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// stevensFollow = false ;
 125: LD_ADDR_EXP 15
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// stevensDepot = false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// stevensWasInDepot = false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// stevensCanExitMap = false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// cratesSpawned = 0 ;
 165: LD_ADDR_EXP 22
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// fastBreakthrough = false ;
 173: LD_ADDR_EXP 23
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// finishMissionBool = false ;
 181: LD_ADDR_EXP 24
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// buildedLab = false ;
 189: LD_ADDR_EXP 25
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// omarCanExitMap = false ;
 197: LD_ADDR_EXP 20
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// arabianCanExitMap = false ;
 205: LD_ADDR_EXP 21
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// achievement_DestroyedHovercrafts = 0 ;
 213: LD_ADDR_EXP 26
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// achievement_CollectedCrates = false ;
 221: LD_ADDR_EXP 27
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// PrepareRussians ;
 229: CALL 909 0 0
// PrepareArabians ;
 233: CALL 1656 0 0
// Nef_PrepareNature ;
 237: CALL 20024 0 0
// MissionIntro ;
 241: CALL 2988 0 0
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function InitMapConfig ; begin
 250: LD_INT 0
 252: PPUSH
// BaseMapConfig ;
 253: CALL 266 0 0
// MissionMapConfig ;
 257: CALL 356 0 0
// end ;
 261: LD_VAR 0 1
 265: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 266: LD_INT 0
 268: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 269: LD_ADDR_EXP 28
 273: PUSH
 274: LD_INT 4
 276: PUSH
 277: LD_INT 3
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 296: LD_ADDR_EXP 29
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 2
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: ST_TO_ADDR
// animalsAgression = 0 ;
 319: LD_ADDR_EXP 30
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// debugMode = 0 ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// missionPrefix = 05_ ;
 335: LD_ADDR_EXP 31
 339: PUSH
 340: LD_STRING 05_
 342: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 343: LD_ADDR_EXP 32
 347: PUSH
 348: LD_STRING 04_
 350: ST_TO_ADDR
// end ;
 351: LD_VAR 0 1
 355: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 356: LD_INT 0
 358: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 ] [ Difficulty ] ;
 359: LD_ADDR_EXP 34
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 3
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: PUSH
 378: LD_OWVAR 67
 382: ARRAY
 383: ST_TO_ADDR
// arabBreakthrough = [ 70 70$0 , 65 65$0 , 60 60$0 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 35
 388: PUSH
 389: LD_INT 147000
 391: PUSH
 392: LD_INT 136500
 394: PUSH
 395: LD_INT 126000
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: LD_OWVAR 67
 407: ARRAY
 408: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 409: LD_ADDR_EXP 36
 413: PUSH
 414: LD_INT 2
 416: PUSH
 417: LD_INT 1
 419: PUSH
 420: LD_INT 6
 422: PUSH
 423: LD_INT 3
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// arabianPatrolVehiclesAmount = 1 ;
 432: LD_ADDR_EXP 37
 436: PUSH
 437: LD_INT 1
 439: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 ] [ Difficulty ] ;
 440: LD_ADDR_EXP 38
 444: PUSH
 445: LD_INT 2
 447: PUSH
 448: LD_INT 3
 450: PUSH
 451: LD_INT 3
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: LIST
 458: PUSH
 459: LD_OWVAR 67
 463: ARRAY
 464: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 465: LD_ADDR_EXP 39
 469: PUSH
 470: LD_INT 108
 472: PUSH
 473: LD_INT 15
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: LD_INT 102
 482: PUSH
 483: LD_INT 45
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 65
 492: PUSH
 493: LD_INT 23
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 37
 502: PUSH
 503: LD_INT 28
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: LD_INT 32
 512: PUSH
 513: LD_INT 40
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: PUSH
 520: LD_INT 45
 522: PUSH
 523: LD_INT 74
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 69
 532: PUSH
 533: LD_INT 98
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 101
 542: PUSH
 543: LD_INT 101
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 117
 552: PUSH
 553: LD_INT 84
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 158
 562: PUSH
 563: LD_INT 132
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: ST_TO_ADDR
// end ;
 582: LD_VAR 0 1
 586: RET
// every 0 0$1 trigger debugMode do var i ;
 587: LD_EXP 33
 591: IFFALSE 906
 593: GO 595
 595: DISABLE
 596: LD_INT 0
 598: PPUSH
// begin enable ;
 599: ENABLE
// FogOff ( your_side ) ;
 600: LD_OWVAR 2
 604: PPUSH
 605: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 609: LD_ADDR_VAR 0 1
 613: PUSH
 614: LD_INT 22
 616: PUSH
 617: LD_OWVAR 2
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PUSH
 626: LD_INT 2
 628: PUSH
 629: LD_INT 21
 631: PUSH
 632: LD_INT 1
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 21
 641: PUSH
 642: LD_INT 2
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PPUSH
 658: CALL_OW 69
 662: PUSH
 663: FOR_IN
 664: IFFALSE 680
// SetLives ( i , 1000 ) ;
 666: LD_VAR 0 1
 670: PPUSH
 671: LD_INT 1000
 673: PPUSH
 674: CALL_OW 234
 678: GO 663
 680: POP
 681: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 682: LD_ADDR_VAR 0 1
 686: PUSH
 687: LD_INT 22
 689: PUSH
 690: LD_OWVAR 2
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 21
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PPUSH
 713: CALL_OW 69
 717: PUSH
 718: FOR_IN
 719: IFFALSE 783
// begin SetSkill ( i , skill_combat , 10 ) ;
 721: LD_VAR 0 1
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_INT 10
 731: PPUSH
 732: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 736: LD_VAR 0 1
 740: PPUSH
 741: LD_INT 2
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 751: LD_VAR 0 1
 755: PPUSH
 756: LD_INT 3
 758: PPUSH
 759: LD_INT 10
 761: PPUSH
 762: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 766: LD_VAR 0 1
 770: PPUSH
 771: LD_INT 4
 773: PPUSH
 774: LD_INT 10
 776: PPUSH
 777: CALL_OW 237
// end ;
 781: GO 718
 783: POP
 784: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 785: LD_ADDR_VAR 0 1
 789: PUSH
 790: LD_INT 22
 792: PUSH
 793: LD_OWVAR 2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 2
 804: PUSH
 805: LD_INT 30
 807: PUSH
 808: LD_INT 0
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PUSH
 815: LD_INT 30
 817: PUSH
 818: LD_INT 1
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: PUSH
 839: FOR_IN
 840: IFFALSE 904
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 842: LD_VAR 0 1
 846: PPUSH
 847: CALL_OW 274
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: LD_INT 9999
 857: PPUSH
 858: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 274
 871: PPUSH
 872: LD_INT 2
 874: PPUSH
 875: LD_INT 9999
 877: PPUSH
 878: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 882: LD_VAR 0 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 3
 894: PPUSH
 895: LD_INT 9999
 897: PPUSH
 898: CALL_OW 277
// end ;
 902: GO 839
 904: POP
 905: POP
// end ; end_of_file
 906: PPOPN 1
 908: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 909: LD_INT 0
 911: PPUSH
// PrepareHeroes ;
 912: CALL 921 0 0
// end ;
 916: LD_VAR 0 1
 920: RET
// function PrepareHeroes ; var i , car ; begin
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
 925: PPUSH
// ruCars = [ ] ;
 926: LD_ADDR_EXP 49
 930: PUSH
 931: EMPTY
 932: ST_TO_ADDR
// uc_side = 3 ;
 933: LD_ADDR_OWVAR 20
 937: PUSH
 938: LD_INT 3
 940: ST_TO_ADDR
// uc_nation = 3 ;
 941: LD_ADDR_OWVAR 21
 945: PUSH
 946: LD_INT 3
 948: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 949: LD_ADDR_EXP 40
 953: PUSH
 954: LD_STRING Burlak
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_INT 3
 962: PPUSH
 963: CALL 8528 0 3
 967: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 968: LD_ADDR_EXP 45
 972: PUSH
 973: LD_STRING Titov
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL 8528 0 3
 986: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 987: LD_ADDR_EXP 46
 991: PUSH
 992: LD_STRING Dolgov
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: LD_INT 4
1000: PPUSH
1001: CALL 8528 0 3
1005: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
1006: LD_ADDR_EXP 47
1010: PUSH
1011: LD_STRING Lipshchin
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: LD_INT 1
1019: PPUSH
1020: CALL 8528 0 3
1024: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1025: LD_ADDR_EXP 41
1029: PUSH
1030: LD_STRING Karamazov
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: LD_INT 2
1038: PPUSH
1039: CALL 8528 0 3
1043: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1044: LD_ADDR_EXP 42
1048: PUSH
1049: LD_STRING Petrovova
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: LD_INT 1
1057: PPUSH
1058: CALL 8528 0 3
1062: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1063: LD_ADDR_EXP 43
1067: PUSH
1068: LD_STRING Gleb
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: LD_INT 1
1076: PPUSH
1077: CALL 8528 0 3
1081: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1082: LD_ADDR_EXP 44
1086: PUSH
1087: LD_STRING Petrosyan
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: LD_INT 4
1095: PPUSH
1096: CALL 8528 0 3
1100: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1101: LD_ADDR_EXP 48
1105: PUSH
1106: LD_STRING Platonov
1108: PPUSH
1109: LD_INT 0
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL 8528 0 3
1119: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: DOUBLE
1126: LD_INT 1
1128: DEC
1129: ST_TO_ADDR
1130: LD_EXP 4
1134: PUSH
1135: FOR_TO
1136: IFFALSE 1514
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1138: LD_ADDR_OWVAR 37
1142: PUSH
1143: LD_EXP 4
1147: PUSH
1148: LD_VAR 0 2
1152: ARRAY
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1158: LD_ADDR_OWVAR 39
1162: PUSH
1163: LD_EXP 4
1167: PUSH
1168: LD_VAR 0 2
1172: ARRAY
1173: PUSH
1174: LD_INT 2
1176: ARRAY
1177: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1178: LD_ADDR_OWVAR 38
1182: PUSH
1183: LD_EXP 4
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: PUSH
1194: LD_INT 3
1196: ARRAY
1197: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1198: LD_ADDR_OWVAR 40
1202: PUSH
1203: LD_EXP 4
1207: PUSH
1208: LD_VAR 0 2
1212: ARRAY
1213: PUSH
1214: LD_INT 4
1216: ARRAY
1217: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1218: LD_ADDR_OWVAR 24
1222: PUSH
1223: LD_INT 3
1225: PPUSH
1226: LD_INT 4
1228: PPUSH
1229: CALL_OW 12
1233: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1234: LD_ADDR_OWVAR 41
1238: PUSH
1239: LD_INT 25
1241: PPUSH
1242: LD_INT 40
1244: PPUSH
1245: CALL_OW 12
1249: ST_TO_ADDR
// car := CreateVehicle ;
1250: LD_ADDR_VAR 0 3
1254: PUSH
1255: CALL_OW 45
1259: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1260: LD_ADDR_EXP 49
1264: PUSH
1265: LD_EXP 49
1269: PUSH
1270: LD_VAR 0 3
1274: ADD
1275: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1276: LD_EXP 4
1280: PUSH
1281: LD_VAR 0 2
1285: ARRAY
1286: PUSH
1287: LD_INT 5
1289: ARRAY
1290: PUSH
1291: LD_STRING Bur
1293: DOUBLE
1294: EQUAL
1295: IFTRUE 1299
1297: GO 1316
1299: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1300: LD_EXP 40
1304: PPUSH
1305: LD_VAR 0 3
1309: PPUSH
1310: CALL_OW 52
1314: GO 1492
1316: LD_STRING Kar
1318: DOUBLE
1319: EQUAL
1320: IFTRUE 1324
1322: GO 1341
1324: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1325: LD_EXP 41
1329: PPUSH
1330: LD_VAR 0 3
1334: PPUSH
1335: CALL_OW 52
1339: GO 1492
1341: LD_STRING Ptr
1343: DOUBLE
1344: EQUAL
1345: IFTRUE 1349
1347: GO 1366
1349: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1350: LD_EXP 42
1354: PPUSH
1355: LD_VAR 0 3
1359: PPUSH
1360: CALL_OW 52
1364: GO 1492
1366: LD_STRING Glb
1368: DOUBLE
1369: EQUAL
1370: IFTRUE 1374
1372: GO 1391
1374: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1375: LD_EXP 43
1379: PPUSH
1380: LD_VAR 0 3
1384: PPUSH
1385: CALL_OW 52
1389: GO 1492
1391: LD_STRING Pet
1393: DOUBLE
1394: EQUAL
1395: IFTRUE 1399
1397: GO 1416
1399: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1400: LD_EXP 44
1404: PPUSH
1405: LD_VAR 0 3
1409: PPUSH
1410: CALL_OW 52
1414: GO 1492
1416: LD_STRING Dol
1418: DOUBLE
1419: EQUAL
1420: IFTRUE 1424
1422: GO 1441
1424: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1425: LD_EXP 46
1429: PPUSH
1430: LD_VAR 0 3
1434: PPUSH
1435: CALL_OW 52
1439: GO 1492
1441: LD_STRING Lip
1443: DOUBLE
1444: EQUAL
1445: IFTRUE 1449
1447: GO 1466
1449: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1450: LD_EXP 47
1454: PPUSH
1455: LD_VAR 0 3
1459: PPUSH
1460: CALL_OW 52
1464: GO 1492
1466: LD_STRING Tit
1468: DOUBLE
1469: EQUAL
1470: IFTRUE 1474
1472: GO 1491
1474: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1475: LD_EXP 45
1479: PPUSH
1480: LD_VAR 0 3
1484: PPUSH
1485: CALL_OW 52
1489: GO 1492
1491: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1492: LD_VAR 0 3
1496: PPUSH
1497: LD_INT 251
1499: PPUSH
1500: LD_INT 800
1502: PPUSH
1503: CALL_OW 12
1507: PPUSH
1508: CALL_OW 234
// end ;
1512: GO 1135
1514: POP
1515: POP
// for i in ruCars do
1516: LD_ADDR_VAR 0 2
1520: PUSH
1521: LD_EXP 49
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1546
// PlaceUnitArea ( i , ru_place2 , false ) ;
1529: LD_VAR 0 2
1533: PPUSH
1534: LD_INT 18
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
1544: GO 1526
1546: POP
1547: POP
// RevealFogArea ( 3 , co_vidi ) ;
1548: LD_INT 3
1550: PPUSH
1551: LD_INT 19
1553: PPUSH
1554: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1558: LD_EXP 49
1562: PPUSH
1563: LD_INT 3
1565: PPUSH
1566: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1570: LD_INT 4
1572: PPUSH
1573: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1577: LD_EXP 40
1581: PPUSH
1582: CALL_OW 310
1586: PPUSH
1587: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1591: LD_INT 3
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: LD_INT 21
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PPUSH
1618: CALL_OW 70
1622: PUSH
1623: LD_INT 5
1625: LESS
1626: IFFALSE 1651
// begin wait ( 0 0$1 ) ;
1628: LD_INT 35
1630: PPUSH
1631: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1635: LD_EXP 40
1639: PPUSH
1640: CALL_OW 310
1644: PPUSH
1645: CALL_OW 85
// end ;
1649: GO 1591
// end ; end_of_file
1651: LD_VAR 0 1
1655: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts , arabianPatrolTroops ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1656: LD_INT 0
1658: PPUSH
// arabianUnitsInBase = [ ] ;
1659: LD_ADDR_EXP 52
1663: PUSH
1664: EMPTY
1665: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1666: LD_ADDR_EXP 54
1670: PUSH
1671: EMPTY
1672: ST_TO_ADDR
// arabianPatrolTroops = [ ] ;
1673: LD_ADDR_EXP 55
1677: PUSH
1678: EMPTY
1679: ST_TO_ADDR
// arabLeftExit = true ;
1680: LD_ADDR_EXP 56
1684: PUSH
1685: LD_INT 1
1687: ST_TO_ADDR
// PrepareHeroes ;
1688: CALL 1721 0 0
// PrepareBuildings ;
1692: CALL 1787 0 0
// PrepareUnits ;
1696: CALL 2139 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1700: LD_EXP 37
1704: PPUSH
1705: LD_INT 42
1707: PPUSH
1708: CALL 2676 0 2
// PrepareArabianHovercraft ;
1712: CALL 2835 0 0
// end ;
1716: LD_VAR 0 1
1720: RET
// function PrepareHeroes ; begin
1721: LD_INT 0
1723: PPUSH
// uc_side = 2 ;
1724: LD_ADDR_OWVAR 20
1728: PUSH
1729: LD_INT 2
1731: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1732: LD_ADDR_EXP 50
1736: PUSH
1737: LD_STRING Heike
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL 8528 0 3
1750: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1751: LD_ADDR_EXP 51
1755: PUSH
1756: LD_STRING Omar
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: LD_INT 11
1764: PPUSH
1765: CALL 8528 0 3
1769: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1770: LD_EXP 51
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: CALL_OW 52
// end ;
1782: LD_VAR 0 1
1786: RET
// function PrepareBuildings ; var depot ; begin
1787: LD_INT 0
1789: PPUSH
1790: PPUSH
// uc_side = 2 ;
1791: LD_ADDR_OWVAR 20
1795: PUSH
1796: LD_INT 2
1798: ST_TO_ADDR
// uc_nation = nation_arabian ;
1799: LD_ADDR_OWVAR 21
1803: PUSH
1804: LD_INT 2
1806: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1807: LD_ADDR_OWVAR 43
1811: PUSH
1812: LD_EXP 34
1816: ST_TO_ADDR
// bc_type = b_breastwork ;
1817: LD_ADDR_OWVAR 42
1821: PUSH
1822: LD_INT 31
1824: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1825: LD_INT 118
1827: PPUSH
1828: LD_INT 63
1830: PPUSH
1831: LD_INT 1
1833: PPUSH
1834: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1838: LD_INT 120
1840: PPUSH
1841: LD_INT 66
1843: PPUSH
1844: LD_INT 1
1846: PPUSH
1847: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1851: LD_INT 123
1853: PPUSH
1854: LD_INT 73
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL_OW 47
// if Difficulty = 2 then
1864: LD_OWVAR 67
1868: PUSH
1869: LD_INT 2
1871: EQUAL
1872: IFFALSE 1887
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1874: LD_INT 145
1876: PPUSH
1877: LD_INT 83
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 47
// if Difficulty = 3 then
1887: LD_OWVAR 67
1891: PUSH
1892: LD_INT 3
1894: EQUAL
1895: IFFALSE 1923
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1897: LD_INT 145
1899: PPUSH
1900: LD_INT 83
1902: PPUSH
1903: LD_INT 0
1905: PPUSH
1906: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1910: LD_INT 151
1912: PPUSH
1913: LD_INT 81
1915: PPUSH
1916: LD_INT 5
1918: PPUSH
1919: CALL_OW 47
// end ; bc_type = b_depot ;
1923: LD_ADDR_OWVAR 42
1927: PUSH
1928: LD_INT 0
1930: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1931: LD_ADDR_VAR 0 2
1935: PUSH
1936: LD_INT 124
1938: PPUSH
1939: LD_INT 60
1941: PPUSH
1942: LD_INT 2
1944: PPUSH
1945: CALL_OW 47
1949: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1950: LD_VAR 0 2
1954: PPUSH
1955: CALL_OW 274
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: LD_INT 3000
1965: PPUSH
1966: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1970: LD_INT 131
1972: PPUSH
1973: LD_INT 51
1975: PPUSH
1976: LD_INT 2
1978: PPUSH
1979: CALL_OW 441
// bc_type = b_oil_mine ;
1983: LD_ADDR_OWVAR 42
1987: PUSH
1988: LD_INT 29
1990: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
1991: LD_INT 131
1993: PPUSH
1994: LD_INT 51
1996: PPUSH
1997: LD_INT 2
1999: PPUSH
2000: CALL_OW 47
// case Difficulty of 1 :
2004: LD_OWVAR 67
2008: PUSH
2009: LD_INT 1
2011: DOUBLE
2012: EQUAL
2013: IFTRUE 2017
2015: GO 2033
2017: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2018: LD_INT 48
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 322
// end ; 2 :
2031: GO 2134
2033: LD_INT 2
2035: DOUBLE
2036: EQUAL
2037: IFTRUE 2041
2039: GO 2070
2041: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2042: LD_INT 48
2044: PPUSH
2045: LD_INT 2
2047: PPUSH
2048: LD_INT 2
2050: PPUSH
2051: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2055: LD_INT 51
2057: PPUSH
2058: LD_INT 2
2060: PPUSH
2061: LD_INT 2
2063: PPUSH
2064: CALL_OW 322
// end ; 3 :
2068: GO 2134
2070: LD_INT 3
2072: DOUBLE
2073: EQUAL
2074: IFTRUE 2078
2076: GO 2133
2078: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2079: LD_INT 48
2081: PPUSH
2082: LD_INT 2
2084: PPUSH
2085: LD_INT 2
2087: PPUSH
2088: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2092: LD_INT 51
2094: PPUSH
2095: LD_INT 2
2097: PPUSH
2098: LD_INT 2
2100: PPUSH
2101: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2105: LD_INT 49
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 2
2113: PPUSH
2114: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2118: LD_INT 52
2120: PPUSH
2121: LD_INT 2
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: CALL_OW 322
// end ; end ;
2131: GO 2134
2133: POP
// end ;
2134: LD_VAR 0 1
2138: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2139: LD_INT 0
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
// uc_side = 2 ;
2145: LD_ADDR_OWVAR 20
2149: PUSH
2150: LD_INT 2
2152: ST_TO_ADDR
// uc_nation = 2 ;
2153: LD_ADDR_OWVAR 21
2157: PUSH
2158: LD_INT 2
2160: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2161: LD_ADDR_VAR 0 4
2165: PUSH
2166: LD_INT 22
2168: PUSH
2169: LD_INT 2
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 30
2178: PUSH
2179: LD_INT 31
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PPUSH
2190: CALL_OW 69
2194: PUSH
2195: FOR_IN
2196: IFFALSE 2252
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2198: LD_INT 0
2200: PPUSH
2201: LD_EXP 34
2205: PPUSH
2206: CALL_OW 381
// unit = CreateHuman ;
2210: LD_ADDR_VAR 0 3
2214: PUSH
2215: CALL_OW 44
2219: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2220: LD_VAR 0 3
2224: PPUSH
2225: LD_VAR 0 4
2229: PPUSH
2230: CALL 9128 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2234: LD_ADDR_EXP 52
2238: PUSH
2239: LD_EXP 52
2243: PUSH
2244: LD_VAR 0 3
2248: ADD
2249: ST_TO_ADDR
// end ;
2250: GO 2195
2252: POP
2253: POP
// for i := 1 to arabianUnits [ 1 ] do
2254: LD_ADDR_VAR 0 2
2258: PUSH
2259: DOUBLE
2260: LD_INT 1
2262: DEC
2263: ST_TO_ADDR
2264: LD_EXP 36
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: PUSH
2273: FOR_TO
2274: IFFALSE 2331
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2276: LD_INT 0
2278: PPUSH
2279: LD_EXP 34
2283: PPUSH
2284: CALL_OW 381
// unit = CreateHuman ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: CALL_OW 44
2297: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2298: LD_VAR 0 3
2302: PPUSH
2303: LD_INT 38
2305: PPUSH
2306: LD_INT 0
2308: PPUSH
2309: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2313: LD_ADDR_EXP 52
2317: PUSH
2318: LD_EXP 52
2322: PUSH
2323: LD_VAR 0 3
2327: ADD
2328: ST_TO_ADDR
// end ;
2329: GO 2273
2331: POP
2332: POP
// for i := 1 to arabianUnits [ 2 ] do
2333: LD_ADDR_VAR 0 2
2337: PUSH
2338: DOUBLE
2339: LD_INT 1
2341: DEC
2342: ST_TO_ADDR
2343: LD_EXP 36
2347: PUSH
2348: LD_INT 2
2350: ARRAY
2351: PUSH
2352: FOR_TO
2353: IFFALSE 2410
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2355: LD_INT 0
2357: PPUSH
2358: LD_EXP 34
2362: PPUSH
2363: CALL_OW 382
// unit = CreateHuman ;
2367: LD_ADDR_VAR 0 3
2371: PUSH
2372: CALL_OW 44
2376: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2377: LD_VAR 0 3
2381: PPUSH
2382: LD_INT 38
2384: PPUSH
2385: LD_INT 0
2387: PPUSH
2388: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2392: LD_ADDR_EXP 52
2396: PUSH
2397: LD_EXP 52
2401: PUSH
2402: LD_VAR 0 3
2406: ADD
2407: ST_TO_ADDR
// end ;
2408: GO 2352
2410: POP
2411: POP
// for i := 1 to arabianUnits [ 3 ] do
2412: LD_ADDR_VAR 0 2
2416: PUSH
2417: DOUBLE
2418: LD_INT 1
2420: DEC
2421: ST_TO_ADDR
2422: LD_EXP 36
2426: PUSH
2427: LD_INT 3
2429: ARRAY
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2489
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2434: LD_INT 0
2436: PPUSH
2437: LD_EXP 34
2441: PPUSH
2442: CALL_OW 383
// unit = CreateHuman ;
2446: LD_ADDR_VAR 0 3
2450: PUSH
2451: CALL_OW 44
2455: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2456: LD_VAR 0 3
2460: PPUSH
2461: LD_INT 38
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2471: LD_ADDR_EXP 52
2475: PUSH
2476: LD_EXP 52
2480: PUSH
2481: LD_VAR 0 3
2485: ADD
2486: ST_TO_ADDR
// end ;
2487: GO 2431
2489: POP
2490: POP
// for i := 1 to arabianUnits [ 4 ] do
2491: LD_ADDR_VAR 0 2
2495: PUSH
2496: DOUBLE
2497: LD_INT 1
2499: DEC
2500: ST_TO_ADDR
2501: LD_EXP 36
2505: PUSH
2506: LD_INT 4
2508: ARRAY
2509: PUSH
2510: FOR_TO
2511: IFFALSE 2568
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2513: LD_INT 0
2515: PPUSH
2516: LD_EXP 34
2520: PPUSH
2521: CALL_OW 384
// unit = CreateHuman ;
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: CALL_OW 44
2534: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2535: LD_VAR 0 3
2539: PPUSH
2540: LD_INT 38
2542: PPUSH
2543: LD_INT 0
2545: PPUSH
2546: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2550: LD_ADDR_EXP 52
2554: PUSH
2555: LD_EXP 52
2559: PUSH
2560: LD_VAR 0 3
2564: ADD
2565: ST_TO_ADDR
// end ;
2566: GO 2510
2568: POP
2569: POP
// end ;
2570: LD_VAR 0 1
2574: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2575: LD_INT 0
2577: PPUSH
2578: PPUSH
2579: PPUSH
// uc_side = 2 ;
2580: LD_ADDR_OWVAR 20
2584: PUSH
2585: LD_INT 2
2587: ST_TO_ADDR
// uc_nation = 2 ;
2588: LD_ADDR_OWVAR 21
2592: PUSH
2593: LD_INT 2
2595: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2596: LD_ADDR_VAR 0 2
2600: PUSH
2601: DOUBLE
2602: LD_INT 1
2604: DEC
2605: ST_TO_ADDR
2606: LD_EXP 38
2610: PUSH
2611: FOR_TO
2612: IFFALSE 2669
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2614: LD_INT 0
2616: PPUSH
2617: LD_EXP 34
2621: PPUSH
2622: CALL_OW 381
// unit = CreateHuman ;
2626: LD_ADDR_VAR 0 3
2630: PUSH
2631: CALL_OW 44
2635: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2636: LD_VAR 0 3
2640: PPUSH
2641: LD_INT 45
2643: PPUSH
2644: LD_INT 0
2646: PPUSH
2647: CALL_OW 49
// arabianPatrolTroops = arabianPatrolTroops ^ unit ;
2651: LD_ADDR_EXP 55
2655: PUSH
2656: LD_EXP 55
2660: PUSH
2661: LD_VAR 0 3
2665: ADD
2666: ST_TO_ADDR
// end ;
2667: GO 2611
2669: POP
2670: POP
// end ;
2671: LD_VAR 0 1
2675: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2676: LD_INT 0
2678: PPUSH
2679: PPUSH
2680: PPUSH
// uc_side = 2 ;
2681: LD_ADDR_OWVAR 20
2685: PUSH
2686: LD_INT 2
2688: ST_TO_ADDR
// uc_nation = 2 ;
2689: LD_ADDR_OWVAR 21
2693: PUSH
2694: LD_INT 2
2696: ST_TO_ADDR
// for i := 1 to amount do
2697: LD_ADDR_VAR 0 4
2701: PUSH
2702: DOUBLE
2703: LD_INT 1
2705: DEC
2706: ST_TO_ADDR
2707: LD_VAR 0 1
2711: PUSH
2712: FOR_TO
2713: IFFALSE 2828
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2715: LD_INT 14
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 26
2726: PUSH
2727: LD_INT 25
2729: PUSH
2730: LD_INT 27
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: LIST
2737: PUSH
2738: LD_INT 1
2740: PPUSH
2741: LD_INT 3
2743: PPUSH
2744: CALL_OW 12
2748: ARRAY
2749: PPUSH
2750: LD_INT 100
2752: PPUSH
2753: CALL 26046 0 5
// veh = CreateVehicle ;
2757: LD_ADDR_VAR 0 5
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2767: LD_ADDR_EXP 53
2771: PUSH
2772: LD_EXP 53
2776: PUSH
2777: LD_VAR 0 5
2781: ADD
2782: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2783: LD_VAR 0 5
2787: PPUSH
2788: LD_VAR 0 2
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2800: LD_INT 0
2802: PPUSH
2803: LD_EXP 34
2807: PPUSH
2808: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2812: CALL_OW 44
2816: PPUSH
2817: LD_VAR 0 5
2821: PPUSH
2822: CALL_OW 52
// end ;
2826: GO 2712
2828: POP
2829: POP
// end ;
2830: LD_VAR 0 3
2834: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2835: LD_INT 0
2837: PPUSH
2838: PPUSH
2839: PPUSH
// uc_side = 2 ;
2840: LD_ADDR_OWVAR 20
2844: PUSH
2845: LD_INT 2
2847: ST_TO_ADDR
// uc_nation = 2 ;
2848: LD_ADDR_OWVAR 21
2852: PUSH
2853: LD_INT 2
2855: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_EXP 37
2870: PUSH
2871: FOR_TO
2872: IFFALSE 2981
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2874: LD_INT 11
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 1
2882: PPUSH
2883: LD_INT 24
2885: PUSH
2886: LD_INT 23
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 2
2898: PPUSH
2899: CALL_OW 12
2903: ARRAY
2904: PPUSH
2905: LD_INT 100
2907: PPUSH
2908: CALL 26046 0 5
// veh = CreateVehicle ;
2912: LD_ADDR_VAR 0 3
2916: PUSH
2917: CALL_OW 45
2921: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2922: LD_ADDR_EXP 54
2926: PUSH
2927: LD_EXP 54
2931: PUSH
2932: LD_VAR 0 3
2936: ADD
2937: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2938: LD_VAR 0 3
2942: PPUSH
2943: LD_INT 47
2945: PPUSH
2946: LD_INT 0
2948: PPUSH
2949: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2953: LD_INT 0
2955: PPUSH
2956: LD_EXP 34
2960: PPUSH
2961: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2965: CALL_OW 44
2969: PPUSH
2970: LD_VAR 0 3
2974: PPUSH
2975: CALL_OW 52
// end ;
2979: GO 2871
2981: POP
2982: POP
// end ; end_of_file
2983: LD_VAR 0 1
2987: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
2988: LD_INT 0
2990: PPUSH
2991: PPUSH
2992: PPUSH
2993: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 66
3001: PUSH
3002: LD_INT 87
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 66
3011: PUSH
3012: LD_INT 86
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 67
3021: PUSH
3022: LD_INT 86
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: LD_INT 69
3031: PUSH
3032: LD_INT 87
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 70
3041: PUSH
3042: LD_INT 88
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 71
3051: PUSH
3052: LD_INT 89
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PUSH
3059: LD_INT 72
3061: PUSH
3062: LD_INT 90
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PUSH
3069: LD_INT 72
3071: PUSH
3072: LD_INT 91
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3089: LD_INT 280
3091: PPUSH
3092: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3096: LD_EXP 40
3100: PPUSH
3101: LD_STRING DStart-Bur-1
3103: PPUSH
3104: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3108: LD_EXP 48
3112: PPUSH
3113: LD_STRING DStart-Pla-1
3115: PPUSH
3116: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3120: LD_EXP 40
3124: PPUSH
3125: LD_STRING DStart-Bur-2
3127: PPUSH
3128: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3132: LD_EXP 48
3136: PPUSH
3137: LD_STRING DStart-Pla-2
3139: PPUSH
3140: CALL_OW 94
// x = 0 ;
3144: LD_ADDR_VAR 0 4
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3152: LD_ADDR_VAR 0 2
3156: PUSH
3157: LD_INT 22
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: LD_INT 21
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PPUSH
3181: CALL_OW 69
3185: PUSH
3186: FOR_IN
3187: IFFALSE 3275
// begin ComExitVehicle ( unit ) ;
3189: LD_VAR 0 2
3193: PPUSH
3194: CALL_OW 121
// wait ( 0 0$1 ) ;
3198: LD_INT 35
3200: PPUSH
3201: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3205: LD_VAR 0 2
3209: PPUSH
3210: LD_VAR 0 3
3214: PUSH
3215: LD_VAR 0 4
3219: ARRAY
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: PPUSH
3225: LD_VAR 0 3
3229: PUSH
3230: LD_VAR 0 4
3234: ARRAY
3235: PUSH
3236: LD_INT 2
3238: ARRAY
3239: PPUSH
3240: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3244: LD_VAR 0 2
3248: PPUSH
3249: LD_INT 69
3251: PPUSH
3252: LD_INT 96
3254: PPUSH
3255: CALL_OW 178
// x = x + 1 ;
3259: LD_ADDR_VAR 0 4
3263: PUSH
3264: LD_VAR 0 4
3268: PUSH
3269: LD_INT 1
3271: PLUS
3272: ST_TO_ADDR
// end ;
3273: GO 3186
3275: POP
3276: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3277: LD_EXP 40
3281: PPUSH
3282: CALL_OW 87
// x = 0 ;
3286: LD_ADDR_VAR 0 4
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3294: LD_ADDR_VAR 0 2
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: LD_INT 21
3311: PUSH
3312: LD_INT 1
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: CALL_OW 69
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3401
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_VAR 0 4
3345: ARRAY
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PPUSH
3351: LD_VAR 0 3
3355: PUSH
3356: LD_VAR 0 4
3360: ARRAY
3361: PUSH
3362: LD_INT 2
3364: ARRAY
3365: PPUSH
3366: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3370: LD_VAR 0 2
3374: PPUSH
3375: LD_INT 69
3377: PPUSH
3378: LD_INT 96
3380: PPUSH
3381: CALL_OW 178
// x = x + 1 ;
3385: LD_ADDR_VAR 0 4
3389: PUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_INT 1
3397: PLUS
3398: ST_TO_ADDR
// end ;
3399: GO 3328
3401: POP
3402: POP
// wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3410: LD_EXP 40
3414: PPUSH
3415: LD_INT 70
3417: PPUSH
3418: LD_INT 90
3420: PPUSH
3421: CALL_OW 297
3425: PUSH
3426: LD_INT 7
3428: LESS
3429: PUSH
3430: LD_EXP 41
3434: PPUSH
3435: LD_INT 70
3437: PPUSH
3438: LD_INT 90
3440: PPUSH
3441: CALL_OW 297
3445: PUSH
3446: LD_INT 7
3448: LESS
3449: AND
3450: PUSH
3451: LD_EXP 42
3455: PPUSH
3456: LD_INT 70
3458: PPUSH
3459: LD_INT 90
3461: PPUSH
3462: CALL_OW 297
3466: PUSH
3467: LD_INT 7
3469: LESS
3470: AND
3471: PUSH
3472: LD_EXP 43
3476: PPUSH
3477: LD_INT 70
3479: PPUSH
3480: LD_INT 90
3482: PPUSH
3483: CALL_OW 297
3487: PUSH
3488: LD_INT 7
3490: LESS
3491: AND
3492: PUSH
3493: LD_EXP 47
3497: PPUSH
3498: LD_INT 70
3500: PPUSH
3501: LD_INT 90
3503: PPUSH
3504: CALL_OW 297
3508: PUSH
3509: LD_INT 7
3511: LESS
3512: AND
3513: IFFALSE 3277
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3515: LD_EXP 41
3519: PPUSH
3520: LD_STRING DDoubts-Kar-1
3522: PPUSH
3523: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3527: LD_EXP 42
3531: PPUSH
3532: LD_STRING DDoubts-Ptr-1
3534: PPUSH
3535: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-1 ) ;
3539: LD_EXP 40
3543: PPUSH
3544: LD_STRING DDoubts-Bur-1
3546: PPUSH
3547: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3551: LD_EXP 41
3555: PPUSH
3556: LD_STRING DDoubts-Kar-2
3558: PPUSH
3559: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3563: LD_EXP 43
3567: PPUSH
3568: LD_STRING DDoubts-Glb-2
3570: PPUSH
3571: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3575: LD_EXP 40
3579: PPUSH
3580: LD_STRING DDoubts-Bur-2
3582: PPUSH
3583: CALL_OW 88
// InGameOff ;
3587: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3591: LD_STRING MBegin
3593: PPUSH
3594: CALL_OW 337
// SaveForQuickRestart ;
3598: CALL_OW 22
// BuildBase ;
3602: CALL 10718 0 0
// end ;
3606: LD_VAR 0 1
3610: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3611: LD_EXP 8
3615: NOT
3616: IFFALSE 3876
3618: GO 3620
3620: DISABLE
3621: LD_INT 0
3623: PPUSH
// begin enable ;
3624: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3625: LD_ADDR_VAR 0 1
3629: PUSH
3630: LD_INT 34
3632: PPUSH
3633: LD_INT 22
3635: PUSH
3636: LD_INT 2
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: LD_INT 21
3645: PUSH
3646: LD_INT 3
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PPUSH
3657: CALL_OW 70
3661: PUSH
3662: FOR_IN
3663: IFFALSE 3874
// if See ( 3 , unit ) then
3665: LD_INT 3
3667: PPUSH
3668: LD_VAR 0 1
3672: PPUSH
3673: CALL_OW 292
3677: IFFALSE 3872
// begin sawArabianBase = true ;
3679: LD_ADDR_EXP 8
3683: PUSH
3684: LD_INT 1
3686: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3687: LD_VAR 0 1
3691: PPUSH
3692: CALL_OW 87
// DialogueOn ;
3696: CALL_OW 6
// if IsOk ( Lipshchin ) then
3700: LD_EXP 47
3704: PPUSH
3705: CALL_OW 302
3709: IFFALSE 3723
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3711: LD_EXP 47
3715: PPUSH
3716: LD_STRING DArabs-RSol1-1
3718: PPUSH
3719: CALL_OW 88
// if IsOk ( Karamazov ) then
3723: LD_EXP 41
3727: PPUSH
3728: CALL_OW 302
3732: IFFALSE 3746
// Say ( Karamazov , DArabs-Kar-1 ) ;
3734: LD_EXP 41
3738: PPUSH
3739: LD_STRING DArabs-Kar-1
3741: PPUSH
3742: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3746: LD_EXP 40
3750: PPUSH
3751: LD_STRING DArabs-Bur-1
3753: PPUSH
3754: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3758: LD_EXP 48
3762: PPUSH
3763: LD_STRING DArabs-Pla-1
3765: PPUSH
3766: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3770: LD_EXP 51
3774: PPUSH
3775: LD_STRING DSurrender-Omar-1
3777: PPUSH
3778: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3782: LD_STRING QSurrender
3784: PPUSH
3785: CALL_OW 97
3789: PUSH
3790: LD_INT 1
3792: DOUBLE
3793: EQUAL
3794: IFTRUE 3798
3796: GO 3817
3798: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3799: LD_EXP 40
3803: PPUSH
3804: LD_STRING DQrSurrender#1-Bur-1
3806: PPUSH
3807: CALL_OW 88
// Lose_Survive ;
3811: CALL 17385 0 0
// end ; 2 :
3815: GO 3864
3817: LD_INT 2
3819: DOUBLE
3820: EQUAL
3821: IFTRUE 3825
3823: GO 3840
3825: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3826: LD_EXP 40
3830: PPUSH
3831: LD_STRING DQrSurrender#2-Bur-1
3833: PPUSH
3834: CALL_OW 88
3838: GO 3864
3840: LD_INT 3
3842: DOUBLE
3843: EQUAL
3844: IFTRUE 3848
3846: GO 3863
3848: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3849: LD_EXP 40
3853: PPUSH
3854: LD_STRING DQrSurrender#3-Bur-1
3856: PPUSH
3857: CALL_OW 88
3861: GO 3864
3863: POP
// DialogueOff ;
3864: CALL_OW 7
// exit ;
3868: POP
3869: POP
3870: GO 3876
// end ;
3872: GO 3662
3874: POP
3875: POP
// end ;
3876: PPOPN 1
3878: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3879: LD_EXP 9
3883: NOT
3884: PUSH
3885: LD_INT 1
3887: PPUSH
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 321
3895: PUSH
3896: LD_INT 1
3898: EQUAL
3899: AND
3900: IFFALSE 4265
3902: GO 3904
3904: DISABLE
3905: LD_INT 0
3907: PPUSH
3908: PPUSH
// begin enable ;
3909: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3910: LD_ADDR_VAR 0 1
3914: PUSH
3915: LD_INT 22
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: LD_INT 25
3927: PUSH
3928: LD_INT 12
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PPUSH
3939: CALL_OW 69
3943: PUSH
3944: FOR_IN
3945: IFFALSE 4263
// if See ( 3 , unit ) then
3947: LD_INT 3
3949: PPUSH
3950: LD_VAR 0 1
3954: PPUSH
3955: CALL_OW 292
3959: IFFALSE 4261
// begin sawApeman = true ;
3961: LD_ADDR_EXP 9
3965: PUSH
3966: LD_INT 1
3968: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_INT 22
3976: PUSH
3977: LD_INT 3
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 21
3986: PUSH
3987: LD_INT 1
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PUSH
3994: LD_INT 26
3996: PUSH
3997: LD_INT 1
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 50
4006: PUSH
4007: EMPTY
4008: LIST
4009: PUSH
4010: LD_INT 2
4012: PUSH
4013: LD_INT 25
4015: PUSH
4016: LD_INT 1
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 25
4025: PUSH
4026: LD_INT 2
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 25
4035: PUSH
4036: LD_INT 3
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 25
4045: PUSH
4046: LD_INT 4
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: PPUSH
4067: CALL_OW 69
4071: PPUSH
4072: LD_VAR 0 1
4076: PPUSH
4077: CALL_OW 74
4081: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4082: LD_VAR 0 1
4086: PPUSH
4087: CALL_OW 87
// DialogueOn ;
4091: CALL_OW 6
// if nearUnit = Burlak then
4095: LD_VAR 0 2
4099: PUSH
4100: LD_EXP 40
4104: EQUAL
4105: IFFALSE 4121
// Say ( Burlak , DApeSpot-Bur-1a ) else
4107: LD_EXP 40
4111: PPUSH
4112: LD_STRING DApeSpot-Bur-1a
4114: PPUSH
4115: CALL_OW 88
4119: GO 4133
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_STRING DApeSpot-RSol1-1
4128: PPUSH
4129: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4133: LD_EXP 40
4137: PPUSH
4138: LD_STRING DApeSpot-Bur-1
4140: PPUSH
4141: CALL_OW 88
// if IsOK ( Petrosyan ) then
4145: LD_EXP 44
4149: PPUSH
4150: CALL_OW 302
4154: IFFALSE 4253
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4156: LD_EXP 44
4160: PPUSH
4161: LD_STRING DApeSpot-Pty-1
4163: PPUSH
4164: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4168: LD_INT 22
4170: PUSH
4171: LD_INT 3
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 21
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: LD_INT 30
4193: PUSH
4194: LD_INT 6
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 30
4203: PUSH
4204: LD_INT 7
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: IFFALSE 4241
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4227: LD_EXP 44
4231: PPUSH
4232: LD_STRING DApeSpot-Pty-1a
4234: PPUSH
4235: CALL_OW 88
4239: GO 4253
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4241: LD_EXP 44
4245: PPUSH
4246: LD_STRING DApeSpot-Pty-1b
4248: PPUSH
4249: CALL_OW 88
// end ; DialogueOff ;
4253: CALL_OW 7
// exit ;
4257: POP
4258: POP
4259: GO 4265
// end ;
4261: GO 3944
4263: POP
4264: POP
// end ;
4265: PPOPN 2
4267: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and not buildedLab do
4268: LD_EXP 44
4272: PPUSH
4273: CALL_OW 302
4277: PUSH
4278: LD_INT 22
4280: PUSH
4281: LD_INT 3
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 21
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 30
4303: PUSH
4304: LD_INT 6
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 30
4313: PUSH
4314: LD_INT 7
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: PPUSH
4331: CALL_OW 69
4335: NOT
4336: AND
4337: PUSH
4338: LD_EXP 25
4342: NOT
4343: AND
4344: IFFALSE 4361
4346: GO 4348
4348: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4349: LD_EXP 44
4353: PPUSH
4354: LD_STRING DApeLab-Pty-1
4356: PPUSH
4357: CALL_OW 88
4361: END
// export function Dial_ResearchApeLang ; begin
4362: LD_INT 0
4364: PPUSH
// DialogueOn ;
4365: CALL_OW 6
// if IsOK ( Petrosyan ) then
4369: LD_EXP 44
4373: PPUSH
4374: CALL_OW 302
4378: IFFALSE 4464
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4380: LD_EXP 44
4384: PPUSH
4385: LD_STRING DApeLangCompl-Pty-1
4387: PPUSH
4388: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4392: LD_EXP 40
4396: PPUSH
4397: LD_STRING DApeLangCompl-Bur-1
4399: PPUSH
4400: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4404: LD_EXP 44
4408: PPUSH
4409: LD_STRING DApeLangCompl-Pty-2
4411: PPUSH
4412: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4416: LD_EXP 40
4420: PPUSH
4421: LD_STRING DApeLangCompl-Bur-2
4423: PPUSH
4424: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4428: LD_EXP 44
4432: PPUSH
4433: LD_STRING DApeLangCompl-Pty-3
4435: PPUSH
4436: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4440: LD_EXP 40
4444: PPUSH
4445: LD_STRING DApeLangCompl-Bur-3
4447: PPUSH
4448: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4452: LD_EXP 44
4456: PPUSH
4457: LD_STRING DApeLangCompl-Pty-4
4459: PPUSH
4460: CALL_OW 88
// end ; DialogueOff ;
4464: CALL_OW 7
// end ;
4468: LD_VAR 0 1
4472: RET
// export function Dial_TameApe ( sci ) ; begin
4473: LD_INT 0
4475: PPUSH
// dial_tameApeBlocker = true ;
4476: LD_ADDR_EXP 10
4480: PUSH
4481: LD_INT 1
4483: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4484: LD_VAR 0 1
4488: PPUSH
4489: CALL_OW 258
4493: PUSH
4494: LD_INT 1
4496: EQUAL
4497: IFFALSE 4513
// Say ( sci , DApeTame-Sci1-1 ) else
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_STRING DApeTame-Sci1-1
4506: PPUSH
4507: CALL_OW 88
4511: GO 4677
// begin if IsOK ( Petrosyan ) then
4513: LD_EXP 44
4517: PPUSH
4518: CALL_OW 302
4522: IFFALSE 4538
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4524: LD_EXP 44
4528: PPUSH
4529: LD_STRING DApeTame-Sci1-1
4531: PPUSH
4532: CALL_OW 88
4536: GO 4677
// if IsOK ( Dolgov ) then
4538: LD_EXP 46
4542: PPUSH
4543: CALL_OW 302
4547: IFFALSE 4563
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4549: LD_EXP 46
4553: PPUSH
4554: LD_STRING DApeTame-Sci1-1
4556: PPUSH
4557: CALL_OW 88
4561: GO 4677
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4563: LD_INT 22
4565: PUSH
4566: LD_INT 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 21
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 26
4585: PUSH
4586: LD_INT 1
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 50
4595: PUSH
4596: EMPTY
4597: LIST
4598: PUSH
4599: LD_INT 2
4601: PUSH
4602: LD_INT 25
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 25
4614: PUSH
4615: LD_INT 2
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 25
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 25
4634: PUSH
4635: LD_INT 4
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: PPUSH
4656: CALL_OW 69
4660: PPUSH
4661: LD_STRING DApeTame-Sci1-1
4663: PPUSH
4664: LD_STRING 
4666: PPUSH
4667: LD_INT 0
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: CALL 8845 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4677: LD_EXP 40
4681: PPUSH
4682: LD_STRING DApeTame-Bur-1
4684: PPUSH
4685: CALL_OW 88
// end ;
4689: LD_VAR 0 2
4693: RET
// export function Dial_ApeEnterLab ; begin
4694: LD_INT 0
4696: PPUSH
// dial_apeEnterLabBlocker = true ;
4697: LD_ADDR_EXP 11
4701: PUSH
4702: LD_INT 1
4704: ST_TO_ADDR
// DialogueOn ;
4705: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4709: LD_EXP 40
4713: PPUSH
4714: LD_STRING DApeWorkSol-Bur-1
4716: PPUSH
4717: CALL_OW 88
// if IsOK ( Petrosyan ) then
4721: LD_EXP 44
4725: PPUSH
4726: CALL_OW 302
4730: IFFALSE 4746
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4732: LD_EXP 44
4736: PPUSH
4737: LD_STRING DApeWorkSol-Pty-1
4739: PPUSH
4740: CALL_OW 88
4744: GO 4885
// if IsOK ( Dolgov ) then
4746: LD_EXP 46
4750: PPUSH
4751: CALL_OW 302
4755: IFFALSE 4771
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4757: LD_EXP 46
4761: PPUSH
4762: LD_STRING DApeWorkSol-Pty-1
4764: PPUSH
4765: CALL_OW 88
4769: GO 4885
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4771: LD_INT 22
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: LD_INT 21
4783: PUSH
4784: LD_INT 1
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 26
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 50
4803: PUSH
4804: EMPTY
4805: LIST
4806: PUSH
4807: LD_INT 2
4809: PUSH
4810: LD_INT 25
4812: PUSH
4813: LD_INT 1
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PUSH
4820: LD_INT 25
4822: PUSH
4823: LD_INT 2
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 25
4832: PUSH
4833: LD_INT 3
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 25
4842: PUSH
4843: LD_INT 4
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PPUSH
4864: CALL_OW 69
4868: PPUSH
4869: LD_STRING DApeWorkSol-Pty-1
4871: PPUSH
4872: LD_STRING 
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: CALL 8845 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4885: LD_EXP 40
4889: PPUSH
4890: LD_STRING DApeWorkSol-Bur-2
4892: PPUSH
4893: CALL_OW 88
// DialogueOff ;
4897: CALL_OW 7
// end ;
4901: LD_VAR 0 1
4905: RET
// export function Dial_ResearchApePsych ; begin
4906: LD_INT 0
4908: PPUSH
// DialogueOn ;
4909: CALL_OW 6
// if IsOK ( Petrosyan ) then
4913: LD_EXP 44
4917: PPUSH
4918: CALL_OW 302
4922: IFFALSE 4938
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4924: LD_EXP 44
4928: PPUSH
4929: LD_STRING DApeWorkCompl-Pty-1
4931: PPUSH
4932: CALL_OW 88
4936: GO 5077
// if IsOK ( Dolgov ) then
4938: LD_EXP 46
4942: PPUSH
4943: CALL_OW 302
4947: IFFALSE 4963
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4949: LD_EXP 46
4953: PPUSH
4954: LD_STRING DApeWorkCompl-Pty-1
4956: PPUSH
4957: CALL_OW 88
4961: GO 5077
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4963: LD_INT 22
4965: PUSH
4966: LD_INT 3
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: LD_INT 21
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: LD_INT 26
4985: PUSH
4986: LD_INT 1
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 50
4995: PUSH
4996: EMPTY
4997: LIST
4998: PUSH
4999: LD_INT 2
5001: PUSH
5002: LD_INT 25
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 25
5014: PUSH
5015: LD_INT 2
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: LD_INT 25
5024: PUSH
5025: LD_INT 3
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 25
5034: PUSH
5035: LD_INT 4
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: PPUSH
5056: CALL_OW 69
5060: PPUSH
5061: LD_STRING DApeWorkCompl-Pty-1
5063: PPUSH
5064: LD_STRING 
5066: PPUSH
5067: LD_INT 0
5069: PPUSH
5070: LD_INT 1
5072: PPUSH
5073: CALL 8845 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5077: LD_EXP 40
5081: PPUSH
5082: LD_STRING DApeWorkCompl-Bur-1
5084: PPUSH
5085: CALL_OW 88
// DialogueOff ;
5089: CALL_OW 7
// end ;
5093: LD_VAR 0 1
5097: RET
// export function Dial_ResearchApeAgress ; begin
5098: LD_INT 0
5100: PPUSH
// DialogueOn ;
5101: CALL_OW 6
// if IsOK ( Petrosyan ) then
5105: LD_EXP 44
5109: PPUSH
5110: CALL_OW 302
5114: IFFALSE 5130
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5116: LD_EXP 44
5120: PPUSH
5121: LD_STRING DApeSolCompl-Pty-1
5123: PPUSH
5124: CALL_OW 88
5128: GO 5269
// if IsOK ( Dolgov ) then
5130: LD_EXP 46
5134: PPUSH
5135: CALL_OW 302
5139: IFFALSE 5155
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5141: LD_EXP 46
5145: PPUSH
5146: LD_STRING DApeSolCompl-Pty-1
5148: PPUSH
5149: CALL_OW 88
5153: GO 5269
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5155: LD_INT 22
5157: PUSH
5158: LD_INT 3
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: LD_INT 21
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 26
5177: PUSH
5178: LD_INT 1
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 50
5187: PUSH
5188: EMPTY
5189: LIST
5190: PUSH
5191: LD_INT 2
5193: PUSH
5194: LD_INT 25
5196: PUSH
5197: LD_INT 1
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: LD_INT 25
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PUSH
5214: LD_INT 25
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 25
5226: PUSH
5227: LD_INT 4
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 69
5252: PPUSH
5253: LD_STRING DApeSolCompl-Pty-1
5255: PPUSH
5256: LD_STRING 
5258: PPUSH
5259: LD_INT 0
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL 8845 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5269: LD_EXP 40
5273: PPUSH
5274: LD_STRING DApeSolCompl-Bur-1
5276: PPUSH
5277: CALL_OW 88
// DialogueOff ;
5281: CALL_OW 7
// end ;
5285: LD_VAR 0 1
5289: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5290: LD_INT 3
5292: PPUSH
5293: LD_INT 74
5295: PPUSH
5296: LD_INT 115
5298: PPUSH
5299: CALL_OW 293
5303: IFFALSE 5434
5305: GO 5307
5307: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5308: LD_INT 22
5310: PUSH
5311: LD_INT 3
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: PUSH
5318: LD_INT 21
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 26
5330: PUSH
5331: LD_INT 1
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 50
5340: PUSH
5341: EMPTY
5342: LIST
5343: PUSH
5344: LD_INT 2
5346: PUSH
5347: LD_INT 25
5349: PUSH
5350: LD_INT 1
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 25
5359: PUSH
5360: LD_INT 2
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 25
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 25
5379: PUSH
5380: LD_INT 4
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 69
5405: PPUSH
5406: LD_STRING DShipments-RSol1-1
5408: PPUSH
5409: LD_STRING 
5411: PPUSH
5412: LD_INT 0
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: CALL 8845 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5422: LD_EXP 40
5426: PPUSH
5427: LD_STRING DShipments-Bur-1
5429: PPUSH
5430: CALL_OW 88
// end ;
5434: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5435: LD_INT 3
5437: PPUSH
5438: LD_INT 81
5440: PPUSH
5441: LD_INT 132
5443: PPUSH
5444: CALL_OW 293
5448: IFFALSE 5588
5450: GO 5452
5452: DISABLE
5453: LD_INT 0
5455: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5456: LD_ADDR_VAR 0 1
5460: PUSH
5461: LD_INT 22
5463: PUSH
5464: LD_INT 3
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: LD_INT 21
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 26
5483: PUSH
5484: LD_INT 1
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 50
5493: PUSH
5494: EMPTY
5495: LIST
5496: PUSH
5497: LD_INT 2
5499: PUSH
5500: LD_INT 25
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: LD_INT 25
5512: PUSH
5513: LD_INT 2
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 25
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 25
5532: PUSH
5533: LD_INT 4
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: PPUSH
5554: CALL_OW 69
5558: PPUSH
5559: LD_STRING DRoad-RSol1-1
5561: PPUSH
5562: LD_STRING 
5564: PPUSH
5565: LD_INT 0
5567: PPUSH
5568: LD_INT 1
5570: PPUSH
5571: CALL 8845 0 5
5575: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5576: LD_VAR 0 1
5580: PPUSH
5581: LD_STRING DRoad-RSol1-1a
5583: PPUSH
5584: CALL_OW 88
// end ;
5588: PPOPN 1
5590: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5591: LD_INT 33
5593: PPUSH
5594: LD_INT 22
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 21
5606: PUSH
5607: LD_INT 1
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: LD_INT 26
5616: PUSH
5617: LD_INT 1
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PUSH
5624: LD_INT 50
5626: PUSH
5627: EMPTY
5628: LIST
5629: PUSH
5630: LD_INT 2
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 1
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 25
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: LD_INT 25
5655: PUSH
5656: LD_INT 3
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 25
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: PPUSH
5687: CALL_OW 70
5691: PUSH
5692: LD_EXP 40
5696: PUSH
5697: EMPTY
5698: LIST
5699: DIFF
5700: PUSH
5701: LD_INT 22
5703: PUSH
5704: LD_INT 3
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 21
5713: PUSH
5714: LD_INT 3
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 30
5723: PUSH
5724: LD_INT 0
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: LD_INT 50
5733: PUSH
5734: EMPTY
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 69
5747: AND
5748: IFFALSE 5775
5750: GO 5752
5752: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5753: LD_INT 36
5755: PPUSH
5756: CALL 20885 0 1
// wait ( 0 0$2 ) ;
5760: LD_INT 70
5762: PPUSH
5763: CALL_OW 67
// stevensPlaced = true ;
5767: LD_ADDR_EXP 14
5771: PUSH
5772: LD_INT 1
5774: ST_TO_ADDR
// end ;
5775: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5776: LD_INT 3
5778: PPUSH
5779: LD_EXP 58
5783: PPUSH
5784: CALL_OW 292
5788: PUSH
5789: LD_EXP 14
5793: AND
5794: PUSH
5795: LD_EXP 24
5799: NOT
5800: AND
5801: IFFALSE 6143
5803: GO 5805
5805: DISABLE
5806: LD_INT 0
5808: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5809: LD_ADDR_VAR 0 1
5813: PUSH
5814: LD_INT 22
5816: PUSH
5817: LD_INT 3
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 21
5826: PUSH
5827: LD_INT 1
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 26
5836: PUSH
5837: LD_INT 1
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PUSH
5844: LD_INT 50
5846: PUSH
5847: EMPTY
5848: LIST
5849: PUSH
5850: LD_INT 2
5852: PUSH
5853: LD_INT 25
5855: PUSH
5856: LD_INT 1
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 25
5865: PUSH
5866: LD_INT 2
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 25
5875: PUSH
5876: LD_INT 3
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 25
5885: PUSH
5886: LD_INT 4
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: PPUSH
5907: CALL_OW 69
5911: PPUSH
5912: LD_EXP 58
5916: PPUSH
5917: CALL_OW 74
5921: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5922: LD_EXP 58
5926: PPUSH
5927: CALL_OW 87
// InGameOn ;
5931: CALL_OW 8
// DialogueOn ;
5935: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5939: LD_VAR 0 1
5943: PPUSH
5944: LD_STRING DStevens-RSol1-1
5946: PPUSH
5947: CALL_OW 88
// DialogueOff ;
5951: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5955: LD_INT 52
5957: PPUSH
5958: CALL_OW 67
// if IsOK ( Petrosyan ) then
5962: LD_EXP 44
5966: PPUSH
5967: CALL_OW 302
5971: IFFALSE 6139
// begin SetSide ( Stevens , 6 ) ;
5973: LD_EXP 58
5977: PPUSH
5978: LD_INT 6
5980: PPUSH
5981: CALL_OW 235
// DialogueOn ;
5985: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
5989: LD_EXP 58
5993: PPUSH
5994: LD_STRING DStevens-Huck-1
5996: PPUSH
5997: CALL_OW 88
// if nearUnit = Petrosyan then
6001: LD_VAR 0 1
6005: PUSH
6006: LD_EXP 44
6010: EQUAL
6011: IFFALSE 6107
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
6013: LD_EXP 44
6017: PPUSH
6018: LD_STRING DStevens-Pty-1a
6020: PPUSH
6021: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6025: LD_EXP 58
6029: PPUSH
6030: LD_STRING DStevens-Huck-2
6032: PPUSH
6033: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6037: LD_EXP 44
6041: PPUSH
6042: LD_STRING DStevens-Pty-2
6044: PPUSH
6045: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6049: LD_EXP 58
6053: PPUSH
6054: LD_STRING DStevens-Huck-3
6056: PPUSH
6057: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6061: LD_EXP 44
6065: PPUSH
6066: LD_STRING DStevens-Pty-3
6068: PPUSH
6069: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6073: LD_EXP 58
6077: PPUSH
6078: LD_STRING DStevens-Huck-4
6080: PPUSH
6081: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6085: LD_EXP 44
6089: PPUSH
6090: LD_STRING DStevens-Pty-4
6092: PPUSH
6093: CALL_OW 88
// stevensFollow = true ;
6097: LD_ADDR_EXP 15
6101: PUSH
6102: LD_INT 1
6104: ST_TO_ADDR
// end else
6105: GO 6135
// begin stevensFollow = true ;
6107: LD_ADDR_EXP 15
6111: PUSH
6112: LD_INT 1
6114: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6115: LD_ADDR_EXP 16
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6123: LD_EXP 44
6127: PPUSH
6128: LD_STRING DStevens-Pty-1
6130: PPUSH
6131: CALL_OW 88
// end ; DialogueOff ;
6135: CALL_OW 7
// end ; InGameOff ;
6139: CALL_OW 9
// end ;
6143: PPOPN 1
6145: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6146: LD_EXP 16
6150: PUSH
6151: LD_EXP 44
6155: PPUSH
6156: LD_EXP 58
6160: PPUSH
6161: CALL_OW 296
6165: PUSH
6166: LD_INT 20
6168: LESS
6169: AND
6170: PUSH
6171: LD_EXP 44
6175: PPUSH
6176: CALL_OW 302
6180: AND
6181: PUSH
6182: LD_EXP 24
6186: NOT
6187: AND
6188: IFFALSE 6293
6190: GO 6192
6192: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6193: LD_ADDR_EXP 16
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// DialogueOn ;
6201: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6205: LD_EXP 44
6209: PPUSH
6210: LD_STRING DStevens-Pty-1a
6212: PPUSH
6213: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6217: LD_EXP 58
6221: PPUSH
6222: LD_STRING DStevens-Huck-2
6224: PPUSH
6225: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6229: LD_EXP 44
6233: PPUSH
6234: LD_STRING DStevens-Pty-2
6236: PPUSH
6237: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6241: LD_EXP 58
6245: PPUSH
6246: LD_STRING DStevens-Huck-3
6248: PPUSH
6249: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6253: LD_EXP 44
6257: PPUSH
6258: LD_STRING DStevens-Pty-3
6260: PPUSH
6261: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6265: LD_EXP 58
6269: PPUSH
6270: LD_STRING DStevens-Huck-4
6272: PPUSH
6273: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6277: LD_EXP 44
6281: PPUSH
6282: LD_STRING DStevens-Pty-4
6284: PPUSH
6285: CALL_OW 88
// DialogueOff ;
6289: CALL_OW 7
// end ;
6293: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and GetSide ( Stevens ) = 6 and IsOK ( Petrosyan ) and not finishMissionBool do
6294: LD_EXP 58
6298: PPUSH
6299: LD_EXP 40
6303: PPUSH
6304: CALL_OW 296
6308: PUSH
6309: LD_INT 15
6311: LESS
6312: PUSH
6313: LD_EXP 58
6317: PPUSH
6318: CALL_OW 255
6322: PUSH
6323: LD_INT 6
6325: EQUAL
6326: AND
6327: PUSH
6328: LD_EXP 44
6332: PPUSH
6333: CALL_OW 302
6337: AND
6338: PUSH
6339: LD_EXP 24
6343: NOT
6344: AND
6345: IFFALSE 6560
6347: GO 6349
6349: DISABLE
// begin DialogueOn ;
6350: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6354: LD_EXP 44
6358: PPUSH
6359: LD_STRING DStevensBurlak-Pty-1
6361: PPUSH
6362: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6366: LD_EXP 40
6370: PPUSH
6371: LD_STRING DStevensBurlak-Bur-1
6373: PPUSH
6374: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6378: LD_EXP 44
6382: PPUSH
6383: LD_STRING DStevensBurlak-Pty-2
6385: PPUSH
6386: CALL_OW 88
// case Query ( QKill ) of 1 :
6390: LD_STRING QKill
6392: PPUSH
6393: CALL_OW 97
6397: PUSH
6398: LD_INT 1
6400: DOUBLE
6401: EQUAL
6402: IFTRUE 6406
6404: GO 6484
6406: POP
// begin stevensCanExitMap = true ;
6407: LD_ADDR_EXP 19
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// stevensFollow = false ;
6415: LD_ADDR_EXP 15
6419: PUSH
6420: LD_INT 0
6422: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6423: LD_EXP 40
6427: PPUSH
6428: LD_STRING DKill-1-Bur-1
6430: PPUSH
6431: CALL_OW 88
// if IsOK ( Gleb ) then
6435: LD_EXP 43
6439: PPUSH
6440: CALL_OW 302
6444: IFFALSE 6458
// Say ( Gleb , DKill-1-Glb-1 ) ;
6446: LD_EXP 43
6450: PPUSH
6451: LD_STRING DKill-1-Glb-1
6453: PPUSH
6454: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6458: LD_EXP 58
6462: PPUSH
6463: LD_INT 1
6465: PPUSH
6466: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6470: LD_EXP 58
6474: PPUSH
6475: LD_INT 37
6477: PPUSH
6478: CALL_OW 113
// end ; 2 :
6482: GO 6556
6484: LD_INT 2
6486: DOUBLE
6487: EQUAL
6488: IFTRUE 6492
6490: GO 6555
6492: POP
// begin stevensCanExitMap = true ;
6493: LD_ADDR_EXP 19
6497: PUSH
6498: LD_INT 1
6500: ST_TO_ADDR
// stevensFollow = false ;
6501: LD_ADDR_EXP 15
6505: PUSH
6506: LD_INT 0
6508: ST_TO_ADDR
// stevensDepot = true ;
6509: LD_ADDR_EXP 17
6513: PUSH
6514: LD_INT 1
6516: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6517: LD_EXP 40
6521: PPUSH
6522: LD_STRING DKill-2-Bur-1
6524: PPUSH
6525: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6529: LD_EXP 44
6533: PPUSH
6534: LD_STRING DKill-2-Pty-1
6536: PPUSH
6537: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6541: LD_EXP 40
6545: PPUSH
6546: LD_STRING DKill-2-Bur-2
6548: PPUSH
6549: CALL_OW 88
// end ; end ;
6553: GO 6556
6555: POP
// DialogueOff ;
6556: CALL_OW 7
// end ;
6560: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6561: LD_EXP 15
6565: IFFALSE 6705
6567: GO 6569
6569: DISABLE
6570: LD_INT 0
6572: PPUSH
// begin enable ;
6573: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 1
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 50
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: LD_INT 2
6607: PUSH
6608: LD_INT 25
6610: PUSH
6611: LD_INT 1
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: LD_INT 25
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 25
6630: PUSH
6631: LD_INT 3
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 25
6640: PUSH
6641: LD_INT 4
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 69
6665: PPUSH
6666: LD_EXP 58
6670: PPUSH
6671: CALL_OW 74
6675: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6676: LD_EXP 58
6680: PPUSH
6681: LD_VAR 0 1
6685: PPUSH
6686: CALL_OW 250
6690: PPUSH
6691: LD_VAR 0 1
6695: PPUSH
6696: CALL_OW 251
6700: PPUSH
6701: CALL_OW 111
// end ;
6705: PPOPN 1
6707: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6708: LD_EXP 17
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 3
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: LD_INT 30
6735: PUSH
6736: LD_INT 0
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PPUSH
6755: CALL_OW 69
6759: NOT
6760: AND
6761: IFFALSE 6788
6763: GO 6765
6765: DISABLE
// begin enable ;
6766: ENABLE
// SetSide ( Stevens , 6 ) ;
6767: LD_EXP 58
6771: PPUSH
6772: LD_INT 6
6774: PPUSH
6775: CALL_OW 235
// ComHold ( Stevens ) ;
6779: LD_EXP 58
6783: PPUSH
6784: CALL_OW 140
// end ;
6788: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6789: LD_EXP 17
6793: PUSH
6794: LD_INT 22
6796: PUSH
6797: LD_INT 3
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 21
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 30
6816: PUSH
6817: LD_INT 0
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: LD_INT 50
6826: PUSH
6827: EMPTY
6828: LIST
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 69
6840: AND
6841: IFFALSE 7440
6843: GO 6845
6845: DISABLE
6846: LD_INT 0
6848: PPUSH
6849: PPUSH
6850: PPUSH
// begin enable ;
6851: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6852: LD_ADDR_VAR 0 1
6856: PUSH
6857: LD_INT 22
6859: PUSH
6860: LD_INT 3
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 21
6869: PUSH
6870: LD_INT 3
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 30
6879: PUSH
6880: LD_INT 0
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 50
6889: PUSH
6890: EMPTY
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PPUSH
6899: CALL_OW 69
6903: PUSH
6904: LD_INT 1
6906: ARRAY
6907: ST_TO_ADDR
// stevensFollow = false ;
6908: LD_ADDR_EXP 15
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// if not depot then
6916: LD_VAR 0 1
6920: NOT
6921: IFFALSE 6925
// exit ;
6923: GO 7440
// for depotUnit in depot do
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: FOR_IN
6936: IFFALSE 6962
// if not IsConstructed ( depotUnit ) then
6938: LD_VAR 0 2
6942: PPUSH
6943: CALL_OW 304
6947: NOT
6948: IFFALSE 6960
// constructDepot = depotUnit ;
6950: LD_ADDR_VAR 0 3
6954: PUSH
6955: LD_VAR 0 2
6959: ST_TO_ADDR
6960: GO 6935
6962: POP
6963: POP
// if not constructDepot then
6964: LD_VAR 0 3
6968: NOT
6969: IFFALSE 6973
// exit ;
6971: GO 7440
// if not stevensWasInDepot then
6973: LD_EXP 18
6977: NOT
6978: IFFALSE 7118
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6980: LD_EXP 58
6984: PPUSH
6985: CALL_OW 310
6989: NOT
6990: PUSH
6991: LD_EXP 58
6995: PPUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 296
7005: PUSH
7006: LD_INT 8
7008: LESS
7009: NOT
7010: AND
7011: IFFALSE 7044
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
7013: LD_EXP 58
7017: PPUSH
7018: LD_VAR 0 3
7022: PPUSH
7023: CALL_OW 250
7027: PPUSH
7028: LD_VAR 0 3
7032: PPUSH
7033: CALL_OW 251
7037: PPUSH
7038: CALL_OW 111
7042: GO 7116
// begin InGameOn ;
7044: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7048: LD_EXP 58
7052: PPUSH
7053: LD_INT 3
7055: PPUSH
7056: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7060: LD_EXP 58
7064: PPUSH
7065: LD_VAR 0 3
7069: PPUSH
7070: CALL_OW 120
// wait ( 0 0$1 ) ;
7074: LD_INT 35
7076: PPUSH
7077: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7081: LD_EXP 58
7085: PPUSH
7086: CALL_OW 310
7090: PUSH
7091: LD_EXP 58
7095: PPUSH
7096: CALL_OW 302
7100: NOT
7101: OR
7102: IFFALSE 7048
// InGameOff ;
7104: CALL_OW 9
// stevensWasInDepot = true ;
7108: LD_ADDR_EXP 18
7112: PUSH
7113: LD_INT 1
7115: ST_TO_ADDR
// end ; end else
7116: GO 7440
// begin if not IsInUnit ( Stevens ) or GetType ( IsInUnit ( Stevens ) ) = unit_vehicle then
7118: LD_EXP 58
7122: PPUSH
7123: CALL_OW 310
7127: NOT
7128: PUSH
7129: LD_EXP 58
7133: PPUSH
7134: CALL_OW 310
7138: PPUSH
7139: CALL_OW 247
7143: PUSH
7144: LD_INT 2
7146: EQUAL
7147: OR
7148: IFFALSE 7440
// begin DialogueOn ;
7150: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7154: LD_EXP 40
7158: PPUSH
7159: LD_STRING DRelease-Bur-1
7161: PPUSH
7162: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7166: LD_STRING QKillAgain
7168: PPUSH
7169: CALL_OW 97
7173: PUSH
7174: LD_INT 1
7176: DOUBLE
7177: EQUAL
7178: IFTRUE 7182
7180: GO 7251
7182: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7183: LD_EXP 40
7187: PPUSH
7188: LD_STRING DQrKillAgain#1-Bur-1
7190: PPUSH
7191: CALL_OW 88
// stevensCanExitMap = true ;
7195: LD_ADDR_EXP 19
7199: PUSH
7200: LD_INT 1
7202: ST_TO_ADDR
// stevensWasInDepot = false ;
7203: LD_ADDR_EXP 18
7207: PUSH
7208: LD_INT 0
7210: ST_TO_ADDR
// stevensDepot = false ;
7211: LD_ADDR_EXP 17
7215: PUSH
7216: LD_INT 0
7218: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7219: LD_EXP 58
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7231: LD_EXP 58
7235: PPUSH
7236: LD_INT 37
7238: PPUSH
7239: CALL_OW 113
// DialogueOff ;
7243: CALL_OW 7
// exit ;
7247: GO 7440
// end ; 2 :
7249: GO 7436
7251: LD_INT 2
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7328
7259: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7260: LD_EXP 40
7264: PPUSH
7265: LD_STRING DQrKillAgain#2-Bur-1
7267: PPUSH
7268: CALL_OW 88
// stevensCanExitMap = true ;
7272: LD_ADDR_EXP 19
7276: PUSH
7277: LD_INT 1
7279: ST_TO_ADDR
// stevensWasInDepot = false ;
7280: LD_ADDR_EXP 18
7284: PUSH
7285: LD_INT 0
7287: ST_TO_ADDR
// stevensDepot = false ;
7288: LD_ADDR_EXP 17
7292: PUSH
7293: LD_INT 0
7295: ST_TO_ADDR
// SetSide ( Stevens , 6 ) ;
7296: LD_EXP 58
7300: PPUSH
7301: LD_INT 6
7303: PPUSH
7304: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7308: LD_EXP 58
7312: PPUSH
7313: LD_INT 37
7315: PPUSH
7316: CALL_OW 113
// DialogueOff ;
7320: CALL_OW 7
// exit ;
7324: GO 7440
// end ; 3 :
7326: GO 7436
7328: LD_INT 3
7330: DOUBLE
7331: EQUAL
7332: IFTRUE 7336
7334: GO 7435
7336: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7337: LD_EXP 40
7341: PPUSH
7342: LD_STRING DQrKillAgain#2-Bur-1a
7344: PPUSH
7345: CALL_OW 88
// DialogueOff ;
7349: CALL_OW 7
// InGameOn ;
7353: CALL_OW 8
// ComExitVehicle ( Stevens ) ;
7357: LD_EXP 58
7361: PPUSH
7362: CALL_OW 121
// wait ( 0 0$1 ) ;
7366: LD_INT 35
7368: PPUSH
7369: CALL_OW 67
// repeat SetSide ( Stevens , 3 ) ;
7373: LD_EXP 58
7377: PPUSH
7378: LD_INT 3
7380: PPUSH
7381: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7385: LD_EXP 58
7389: PPUSH
7390: LD_VAR 0 3
7394: PPUSH
7395: CALL_OW 120
// wait ( 0 0$1 ) ;
7399: LD_INT 35
7401: PPUSH
7402: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7406: LD_EXP 58
7410: PPUSH
7411: CALL_OW 310
7415: PUSH
7416: LD_EXP 58
7420: PPUSH
7421: CALL_OW 302
7425: NOT
7426: OR
7427: IFFALSE 7373
// InGameOff ;
7429: CALL_OW 9
// end ; end ;
7433: GO 7436
7435: POP
// DialogueOff ;
7436: CALL_OW 7
// end ; end ; end ;
7440: PPOPN 3
7442: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7443: LD_EXP 19
7447: PUSH
7448: LD_EXP 58
7452: PPUSH
7453: LD_INT 37
7455: PPUSH
7456: CALL_OW 308
7460: AND
7461: IFFALSE 7508
7463: GO 7465
7465: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7466: LD_EXP 58
7470: PPUSH
7471: CALL_OW 255
7475: PUSH
7476: LD_INT 6
7478: EQUAL
7479: IFFALSE 7491
// stevensStatus = 1 else
7481: LD_ADDR_EXP 2
7485: PUSH
7486: LD_INT 1
7488: ST_TO_ADDR
7489: GO 7499
// stevensStatus = 2 ;
7491: LD_ADDR_EXP 2
7495: PUSH
7496: LD_INT 2
7498: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7499: LD_EXP 58
7503: PPUSH
7504: CALL_OW 64
// end ;
7508: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7509: LD_INT 3
7511: PPUSH
7512: LD_INT 1
7514: PPUSH
7515: CALL_OW 292
7519: IFFALSE 7719
7521: GO 7523
7523: DISABLE
7524: LD_INT 0
7526: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7527: LD_ADDR_VAR 0 1
7531: PUSH
7532: LD_INT 1
7534: PPUSH
7535: LD_INT 2
7537: PPUSH
7538: CALL_OW 12
7542: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7543: LD_INT 1
7545: PPUSH
7546: CALL_OW 87
// DialogueOn ;
7550: CALL_OW 6
// if rnd = 1 then
7554: LD_VAR 0 1
7558: PUSH
7559: LD_INT 1
7561: EQUAL
7562: IFFALSE 7578
// Say ( Burlak , DMastodon-Bur-1 ) else
7564: LD_EXP 40
7568: PPUSH
7569: LD_STRING DMastodon-Bur-1
7571: PPUSH
7572: CALL_OW 88
7576: GO 7692
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7578: LD_INT 22
7580: PUSH
7581: LD_INT 3
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 21
7590: PUSH
7591: LD_INT 1
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 26
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 50
7610: PUSH
7611: EMPTY
7612: LIST
7613: PUSH
7614: LD_INT 2
7616: PUSH
7617: LD_INT 25
7619: PUSH
7620: LD_INT 1
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 25
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 25
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 25
7649: PUSH
7650: LD_INT 4
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_STRING DMastodon-RSol1-1
7678: PPUSH
7679: LD_STRING 
7681: PPUSH
7682: LD_INT 0
7684: PPUSH
7685: LD_INT 1
7687: PPUSH
7688: CALL 8845 0 5
// if IsOK ( Gleb ) then
7692: LD_EXP 43
7696: PPUSH
7697: CALL_OW 302
7701: IFFALSE 7715
// Say ( Gleb , DMastodon-Glb-1 ) ;
7703: LD_EXP 43
7707: PPUSH
7708: LD_STRING DMastodon-Glb-1
7710: PPUSH
7711: CALL_OW 88
// DialogueOff ;
7715: CALL_OW 7
// end ;
7719: PPOPN 1
7721: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 302
7729: NOT
7730: IFFALSE 7809
7732: GO 7734
7734: DISABLE
// begin omarCanExitMap = true ;
7735: LD_ADDR_EXP 20
7739: PUSH
7740: LD_INT 1
7742: ST_TO_ADDR
// DialogueOn ;
7743: CALL_OW 6
// if IsOK ( Karamazov ) then
7747: LD_EXP 41
7751: PPUSH
7752: CALL_OW 302
7756: IFFALSE 7770
// Say ( Karamazov , DOmar-Kar-1 ) ;
7758: LD_EXP 41
7762: PPUSH
7763: LD_STRING DOmar-Kar-1
7765: PPUSH
7766: CALL_OW 88
// if IsOK ( Petrovova ) then
7770: LD_EXP 42
7774: PPUSH
7775: CALL_OW 302
7779: IFFALSE 7793
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7781: LD_EXP 42
7785: PPUSH
7786: LD_STRING DOmar-Ptr-1
7788: PPUSH
7789: CALL_OW 88
// DialogueOff ;
7793: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7797: LD_EXP 51
7801: PPUSH
7802: LD_INT 41
7804: PPUSH
7805: CALL_OW 113
// end ;
7809: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7810: LD_EXP 51
7814: PPUSH
7815: LD_INT 41
7817: PPUSH
7818: CALL_OW 308
7822: PUSH
7823: LD_EXP 20
7827: AND
7828: IFFALSE 7850
7830: GO 7832
7832: DISABLE
// begin RemoveUnit ( Omar ) ;
7833: LD_EXP 51
7837: PPUSH
7838: CALL_OW 64
// omarStatus = 1 ;
7842: LD_ADDR_EXP 1
7846: PUSH
7847: LD_INT 1
7849: ST_TO_ADDR
// end ;
7850: END
// every 0 0$1 trigger IsDead ( Omar ) do
7851: LD_EXP 51
7855: PPUSH
7856: CALL_OW 301
7860: IFFALSE 8018
7862: GO 7864
7864: DISABLE
// begin DialogueOn ;
7865: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7869: LD_INT 22
7871: PUSH
7872: LD_INT 3
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: LD_INT 21
7881: PUSH
7882: LD_INT 1
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 26
7891: PUSH
7892: LD_INT 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 50
7901: PUSH
7902: EMPTY
7903: LIST
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: LD_INT 25
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 25
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 3
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 25
7940: PUSH
7941: LD_INT 4
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: PPUSH
7962: CALL_OW 69
7966: PPUSH
7967: LD_STRING DOmar-RSol1-1
7969: PPUSH
7970: LD_STRING 
7972: PPUSH
7973: LD_INT 0
7975: PPUSH
7976: LD_INT 1
7978: PPUSH
7979: CALL 8845 0 5
// wait ( 0 0$1 ) ;
7983: LD_INT 35
7985: PPUSH
7986: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
7990: LD_EXP 50
7994: PPUSH
7995: LD_STRING DOmar-Hke-1
7997: PPUSH
7998: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
8002: LD_EXP 40
8006: PPUSH
8007: LD_STRING DOmar-Bur-1
8009: PPUSH
8010: CALL_OW 88
// DialogueOff ;
8014: CALL_OW 7
// end ;
8018: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
8019: LD_EXP 51
8023: PPUSH
8024: CALL_OW 301
8028: PUSH
8029: LD_EXP 51
8033: PPUSH
8034: CALL_OW 305
8038: NOT
8039: OR
8040: PUSH
8041: LD_EXP 52
8045: PUSH
8046: LD_INT 3
8048: LESS
8049: AND
8050: IFFALSE 8201
8052: GO 8054
8054: DISABLE
// begin if actionTime < arabBreakthrough then
8055: LD_EXP 7
8059: PUSH
8060: LD_EXP 35
8064: LESS
8065: IFFALSE 8075
// fastBreakthrough = true ;
8067: LD_ADDR_EXP 23
8071: PUSH
8072: LD_INT 1
8074: ST_TO_ADDR
// DialogueOn ;
8075: CALL_OW 6
// if IsOK ( Petrovova ) then
8079: LD_EXP 42
8083: PPUSH
8084: CALL_OW 302
8088: IFFALSE 8102
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
8090: LD_EXP 42
8094: PPUSH
8095: LD_STRING DBreakthrough-Ptr-1
8097: PPUSH
8098: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
8102: LD_EXP 40
8106: PPUSH
8107: LD_STRING DBreakthrough-Bur-1
8109: PPUSH
8110: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
8114: LD_EXP 48
8118: PPUSH
8119: LD_STRING DBreakthrough-Pla-1
8121: PPUSH
8122: CALL_OW 94
// if fastBreakthrough then
8126: LD_EXP 23
8130: IFFALSE 8146
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8132: LD_EXP 48
8136: PPUSH
8137: LD_STRING DBreakthrough-Pla-1a
8139: PPUSH
8140: CALL_OW 94
8144: GO 8158
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8146: LD_EXP 48
8150: PPUSH
8151: LD_STRING DBreakthrough-Pla-1b
8153: PPUSH
8154: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8158: LD_EXP 48
8162: PPUSH
8163: LD_STRING DBreakthrough-Pla-1c
8165: PPUSH
8166: CALL_OW 94
// DialogueOff ;
8170: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8174: LD_STRING MAddLab
8176: PPUSH
8177: CALL_OW 337
// arabianCanExitMap = true ;
8181: LD_ADDR_EXP 21
8185: PUSH
8186: LD_INT 1
8188: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8189: LD_EXP 52
8193: PPUSH
8194: LD_INT 41
8196: PPUSH
8197: CALL_OW 113
// end ;
8201: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8202: LD_EXP 21
8206: IFFALSE 8271
8208: GO 8210
8210: DISABLE
8211: LD_INT 0
8213: PPUSH
// begin enable ;
8214: ENABLE
// for unit in arabianUnitsInBase do
8215: LD_ADDR_VAR 0 1
8219: PUSH
8220: LD_EXP 52
8224: PUSH
8225: FOR_IN
8226: IFFALSE 8269
// if IsInArea ( unit , ArabianExitArea ) then
8228: LD_VAR 0 1
8232: PPUSH
8233: LD_INT 41
8235: PPUSH
8236: CALL_OW 308
8240: IFFALSE 8267
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8242: LD_ADDR_EXP 52
8246: PUSH
8247: LD_EXP 52
8251: PUSH
8252: LD_VAR 0 1
8256: DIFF
8257: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8258: LD_VAR 0 1
8262: PPUSH
8263: CALL_OW 64
// end ;
8267: GO 8225
8269: POP
8270: POP
// end ;
8271: PPOPN 1
8273: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8274: LD_EXP 12
8278: NOT
8279: IFFALSE 8517
8281: GO 8283
8283: DISABLE
8284: LD_INT 0
8286: PPUSH
// begin for unit in arabianPatrolVehicles do
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_EXP 53
8296: PUSH
8297: FOR_IN
8298: IFFALSE 8515
// if See ( 3 , unit ) then
8300: LD_INT 3
8302: PPUSH
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 292
8312: IFFALSE 8513
// begin dial_southRoadBlocker = true ;
8314: LD_ADDR_EXP 12
8318: PUSH
8319: LD_INT 1
8321: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8322: LD_VAR 0 1
8326: PPUSH
8327: CALL_OW 87
// if IsOK ( Karamazov ) then
8331: LD_EXP 41
8335: PPUSH
8336: CALL_OW 302
8340: IFFALSE 8354
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8342: LD_EXP 41
8346: PPUSH
8347: LD_STRING DPatrol-Kar-1
8349: PPUSH
8350: CALL_OW 88
// if IsOK ( Petrovova ) then
8354: LD_EXP 42
8358: PPUSH
8359: CALL_OW 302
8363: IFFALSE 8377
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8365: LD_EXP 42
8369: PPUSH
8370: LD_STRING DPatrol-Ptr-1
8372: PPUSH
8373: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8377: LD_INT 22
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 21
8389: PUSH
8390: LD_INT 1
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 26
8399: PUSH
8400: LD_INT 1
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 50
8409: PUSH
8410: EMPTY
8411: LIST
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: LD_INT 25
8418: PUSH
8419: LD_INT 1
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 25
8428: PUSH
8429: LD_INT 2
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 25
8438: PUSH
8439: LD_INT 3
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 25
8448: PUSH
8449: LD_INT 4
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: PPUSH
8470: CALL_OW 69
8474: PUSH
8475: LD_EXP 41
8479: DIFF
8480: PPUSH
8481: LD_STRING DPatrol-RSol1-1
8483: PPUSH
8484: LD_STRING 
8486: PPUSH
8487: LD_INT 0
8489: PPUSH
8490: LD_INT 1
8492: PPUSH
8493: CALL 8845 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8497: LD_EXP 40
8501: PPUSH
8502: LD_STRING DPatrol-Bur-1
8504: PPUSH
8505: CALL_OW 88
// exit ;
8509: POP
8510: POP
8511: GO 8517
// end ;
8513: GO 8297
8515: POP
8516: POP
// end ;
8517: PPOPN 1
8519: END
// every 10 10$0 do
8520: GO 8522
8522: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8523: CALL 2575 0 0
8527: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
// if debugMode then
8532: LD_EXP 33
8536: IFFALSE 8553
// unit := NewCharacter ( ident ) ;
8538: LD_ADDR_VAR 0 5
8542: PUSH
8543: LD_VAR 0 1
8547: PPUSH
8548: CALL_OW 25
8552: ST_TO_ADDR
// if exist_mode and not debugMode then
8553: LD_VAR 0 2
8557: PUSH
8558: LD_EXP 33
8562: NOT
8563: AND
8564: IFFALSE 8589
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8566: LD_ADDR_VAR 0 5
8570: PUSH
8571: LD_EXP 32
8575: PUSH
8576: LD_VAR 0 1
8580: STR
8581: PPUSH
8582: CALL_OW 34
8586: ST_TO_ADDR
8587: GO 8611
// if not debugMode then
8589: LD_EXP 33
8593: NOT
8594: IFFALSE 8611
// unit := NewCharacter ( ident ) ;
8596: LD_ADDR_VAR 0 5
8600: PUSH
8601: LD_VAR 0 1
8605: PPUSH
8606: CALL_OW 25
8610: ST_TO_ADDR
// if class then
8611: LD_VAR 0 3
8615: IFFALSE 8631
// SetClass ( unit , class ) ;
8617: LD_VAR 0 5
8621: PPUSH
8622: LD_VAR 0 3
8626: PPUSH
8627: CALL_OW 336
// result := unit ;
8631: LD_ADDR_VAR 0 4
8635: PUSH
8636: LD_VAR 0 5
8640: ST_TO_ADDR
// end ;
8641: LD_VAR 0 4
8645: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8646: LD_INT 0
8648: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8649: LD_VAR 0 1
8653: PPUSH
8654: CALL_OW 255
8658: PUSH
8659: LD_VAR 0 3
8663: EQUAL
8664: PUSH
8665: LD_VAR 0 1
8669: PPUSH
8670: CALL_OW 302
8674: AND
8675: IFFALSE 8697
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8677: LD_VAR 0 1
8681: PPUSH
8682: LD_EXP 31
8686: PUSH
8687: LD_VAR 0 2
8691: STR
8692: PPUSH
8693: CALL_OW 38
// end ;
8697: LD_VAR 0 4
8701: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8702: LD_INT 0
8704: PPUSH
8705: PPUSH
8706: PPUSH
// resultCharactersToSave = [ ] ;
8707: LD_ADDR_VAR 0 6
8711: PUSH
8712: EMPTY
8713: ST_TO_ADDR
// for unit in characters do
8714: LD_ADDR_VAR 0 5
8718: PUSH
8719: LD_VAR 0 1
8723: PUSH
8724: FOR_IN
8725: IFFALSE 8773
// if GetSide ( unit ) = side and IsOK ( unit ) then
8727: LD_VAR 0 5
8731: PPUSH
8732: CALL_OW 255
8736: PUSH
8737: LD_VAR 0 3
8741: EQUAL
8742: PUSH
8743: LD_VAR 0 5
8747: PPUSH
8748: CALL_OW 302
8752: AND
8753: IFFALSE 8771
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8755: LD_ADDR_VAR 0 6
8759: PUSH
8760: LD_VAR 0 6
8764: PUSH
8765: LD_VAR 0 5
8769: ADD
8770: ST_TO_ADDR
8771: GO 8724
8773: POP
8774: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8775: LD_VAR 0 6
8779: PPUSH
8780: LD_EXP 31
8784: PUSH
8785: LD_VAR 0 2
8789: STR
8790: PPUSH
8791: CALL_OW 38
// end ;
8795: LD_VAR 0 4
8799: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8800: LD_INT 0
8802: PPUSH
8803: PPUSH
// for unit in units do
8804: LD_ADDR_VAR 0 5
8808: PUSH
8809: LD_VAR 0 1
8813: PUSH
8814: FOR_IN
8815: IFFALSE 8838
// PlaceUnitArea ( unit , area , spawnMode ) ;
8817: LD_VAR 0 5
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: LD_VAR 0 3
8831: PPUSH
8832: CALL_OW 49
8836: GO 8814
8838: POP
8839: POP
// end ;
8840: LD_VAR 0 4
8844: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8845: LD_INT 0
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
// units = characters ;
8851: LD_ADDR_VAR 0 9
8855: PUSH
8856: LD_VAR 0 1
8860: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8861: LD_ADDR_VAR 0 9
8865: PUSH
8866: LD_VAR 0 9
8870: PUSH
8871: LD_EXP 40
8875: PUSH
8876: LD_EXP 41
8880: PUSH
8881: LD_EXP 42
8885: PUSH
8886: LD_EXP 43
8890: PUSH
8891: LD_EXP 44
8895: PUSH
8896: LD_EXP 45
8900: PUSH
8901: LD_EXP 46
8905: PUSH
8906: LD_EXP 47
8910: PUSH
8911: LD_EXP 58
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: DIFF
8927: ST_TO_ADDR
// if not units and not canTalkHero then
8928: LD_VAR 0 9
8932: NOT
8933: PUSH
8934: LD_VAR 0 5
8938: NOT
8939: AND
8940: IFFALSE 8944
// exit ;
8942: GO 9123
// if not units then
8944: LD_VAR 0 9
8948: NOT
8949: IFFALSE 8976
// units = characters diff [ Burlak , Stevens ] ;
8951: LD_ADDR_VAR 0 9
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: LD_EXP 40
8965: PUSH
8966: LD_EXP 58
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: DIFF
8975: ST_TO_ADDR
// if not units and canTalkHero then
8976: LD_VAR 0 9
8980: NOT
8981: PUSH
8982: LD_VAR 0 5
8986: AND
8987: IFFALSE 8991
// exit ;
8989: GO 9123
// speaker := units [ rand ( 1 , units ) ] ;
8991: LD_ADDR_VAR 0 8
8995: PUSH
8996: LD_VAR 0 9
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_VAR 0 9
9008: PPUSH
9009: CALL_OW 12
9013: ARRAY
9014: ST_TO_ADDR
// if radio then
9015: LD_VAR 0 4
9019: IFFALSE 9068
// begin if GetSex ( speaker ) = sex_male then
9021: LD_VAR 0 8
9025: PPUSH
9026: CALL_OW 258
9030: PUSH
9031: LD_INT 1
9033: EQUAL
9034: IFFALSE 9052
// SayRadio ( speaker , dialogMID ) else
9036: LD_VAR 0 8
9040: PPUSH
9041: LD_VAR 0 2
9045: PPUSH
9046: CALL_OW 94
9050: GO 9066
// SayRadio ( speaker , dialogFID ) ;
9052: LD_VAR 0 8
9056: PPUSH
9057: LD_VAR 0 3
9061: PPUSH
9062: CALL_OW 94
// end else
9066: GO 9113
// begin if GetSex ( speaker ) = sex_male then
9068: LD_VAR 0 8
9072: PPUSH
9073: CALL_OW 258
9077: PUSH
9078: LD_INT 1
9080: EQUAL
9081: IFFALSE 9099
// Say ( speaker , dialogMID ) else
9083: LD_VAR 0 8
9087: PPUSH
9088: LD_VAR 0 2
9092: PPUSH
9093: CALL_OW 88
9097: GO 9113
// Say ( speaker , dialogFID ) ;
9099: LD_VAR 0 8
9103: PPUSH
9104: LD_VAR 0 3
9108: PPUSH
9109: CALL_OW 88
// end ; result := speaker ;
9113: LD_ADDR_VAR 0 6
9117: PUSH
9118: LD_VAR 0 8
9122: ST_TO_ADDR
// end ;
9123: LD_VAR 0 6
9127: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9128: LD_INT 0
9130: PPUSH
9131: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9132: LD_ADDR_VAR 0 4
9136: PUSH
9137: LD_VAR 0 2
9141: PPUSH
9142: CALL_OW 254
9146: PUSH
9147: LD_INT 3
9149: MINUS
9150: ST_TO_ADDR
// if dir < 0 then
9151: LD_VAR 0 4
9155: PUSH
9156: LD_INT 0
9158: LESS
9159: IFFALSE 9175
// dir := 6 + dir ;
9161: LD_ADDR_VAR 0 4
9165: PUSH
9166: LD_INT 6
9168: PUSH
9169: LD_VAR 0 4
9173: PLUS
9174: ST_TO_ADDR
// SetDir ( un , dir ) ;
9175: LD_VAR 0 1
9179: PPUSH
9180: LD_VAR 0 4
9184: PPUSH
9185: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_VAR 0 2
9198: PPUSH
9199: CALL_OW 52
// result = un ;
9203: LD_ADDR_VAR 0 3
9207: PUSH
9208: LD_VAR 0 1
9212: ST_TO_ADDR
// end ;
9213: LD_VAR 0 3
9217: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9218: LD_INT 0
9220: PPUSH
9221: PPUSH
9222: PPUSH
9223: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9224: LD_ADDR_VAR 0 6
9228: PUSH
9229: LD_INT 34
9231: PUSH
9232: LD_INT 71
9234: PUSH
9235: LD_INT 70
9237: PUSH
9238: LD_INT 69
9240: PUSH
9241: LD_INT 39
9243: PUSH
9244: LD_INT 31
9246: PUSH
9247: LD_INT 14
9249: PUSH
9250: LD_INT 10
9252: PUSH
9253: LD_INT 40
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: ST_TO_ADDR
// resultWeapons = [ ] ;
9267: LD_ADDR_VAR 0 5
9271: PUSH
9272: EMPTY
9273: ST_TO_ADDR
// for i := 1 to weaponTechs do
9274: LD_ADDR_VAR 0 4
9278: PUSH
9279: DOUBLE
9280: LD_INT 1
9282: DEC
9283: ST_TO_ADDR
9284: LD_VAR 0 6
9288: PUSH
9289: FOR_TO
9290: IFFALSE 9477
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9292: LD_VAR 0 6
9296: PUSH
9297: LD_VAR 0 4
9301: ARRAY
9302: PPUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: CALL_OW 482
9312: PUSH
9313: LD_VAR 0 6
9317: PUSH
9318: LD_VAR 0 4
9322: ARRAY
9323: PPUSH
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 321
9333: PUSH
9334: LD_INT 2
9336: EQUAL
9337: AND
9338: IFFALSE 9475
// case nation of nation_american :
9340: LD_VAR 0 2
9344: PUSH
9345: LD_INT 1
9347: DOUBLE
9348: EQUAL
9349: IFTRUE 9353
9351: GO 9388
9353: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9354: LD_ADDR_VAR 0 5
9358: PUSH
9359: LD_VAR 0 5
9363: PUSH
9364: LD_VAR 0 6
9368: PUSH
9369: LD_VAR 0 4
9373: ARRAY
9374: PPUSH
9375: LD_VAR 0 2
9379: PPUSH
9380: CALL 9494 0 2
9384: ADD
9385: ST_TO_ADDR
9386: GO 9475
9388: LD_INT 2
9390: DOUBLE
9391: EQUAL
9392: IFTRUE 9396
9394: GO 9431
9396: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9397: LD_ADDR_VAR 0 5
9401: PUSH
9402: LD_VAR 0 5
9406: PUSH
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 4
9416: ARRAY
9417: PPUSH
9418: LD_VAR 0 2
9422: PPUSH
9423: CALL 9494 0 2
9427: ADD
9428: ST_TO_ADDR
9429: GO 9475
9431: LD_INT 3
9433: DOUBLE
9434: EQUAL
9435: IFTRUE 9439
9437: GO 9474
9439: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9440: LD_ADDR_VAR 0 5
9444: PUSH
9445: LD_VAR 0 5
9449: PUSH
9450: LD_VAR 0 6
9454: PUSH
9455: LD_VAR 0 4
9459: ARRAY
9460: PPUSH
9461: LD_VAR 0 2
9465: PPUSH
9466: CALL 9494 0 2
9470: ADD
9471: ST_TO_ADDR
9472: GO 9475
9474: POP
// end ;
9475: GO 9289
9477: POP
9478: POP
// result = resultWeapons ;
9479: LD_ADDR_VAR 0 3
9483: PUSH
9484: LD_VAR 0 5
9488: ST_TO_ADDR
// end ;
9489: LD_VAR 0 3
9493: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9494: LD_INT 0
9496: PPUSH
// case tech of tech_AdvMet :
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 34
9504: DOUBLE
9505: EQUAL
9506: IFTRUE 9510
9508: GO 9538
9510: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9511: LD_ADDR_VAR 0 3
9515: PUSH
9516: LD_INT 6
9518: PUSH
9519: LD_STRING 
9521: PUSH
9522: LD_INT 46
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: LD_VAR 0 2
9534: ARRAY
9535: ST_TO_ADDR
9536: GO 9827
9538: LD_INT 71
9540: DOUBLE
9541: EQUAL
9542: IFTRUE 9546
9544: GO 9574
9546: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9547: LD_ADDR_VAR 0 3
9551: PUSH
9552: LD_STRING 
9554: PUSH
9555: LD_STRING 
9557: PUSH
9558: LD_INT 47
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: PUSH
9566: LD_VAR 0 2
9570: ARRAY
9571: ST_TO_ADDR
9572: GO 9827
9574: LD_INT 70
9576: DOUBLE
9577: EQUAL
9578: IFTRUE 9582
9580: GO 9610
9582: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9583: LD_ADDR_VAR 0 3
9587: PUSH
9588: LD_STRING 
9590: PUSH
9591: LD_INT 26
9593: PUSH
9594: LD_STRING 
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: PUSH
9602: LD_VAR 0 2
9606: ARRAY
9607: ST_TO_ADDR
9608: GO 9827
9610: LD_INT 69
9612: DOUBLE
9613: EQUAL
9614: IFTRUE 9618
9616: GO 9646
9618: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9619: LD_ADDR_VAR 0 3
9623: PUSH
9624: LD_INT 4
9626: PUSH
9627: LD_INT 25
9629: PUSH
9630: LD_INT 43
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: LD_VAR 0 2
9642: ARRAY
9643: ST_TO_ADDR
9644: GO 9827
9646: LD_INT 39
9648: DOUBLE
9649: EQUAL
9650: IFTRUE 9654
9652: GO 9682
9654: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9655: LD_ADDR_VAR 0 3
9659: PUSH
9660: LD_INT 5
9662: PUSH
9663: LD_INT 27
9665: PUSH
9666: LD_INT 44
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: LD_VAR 0 2
9678: ARRAY
9679: ST_TO_ADDR
9680: GO 9827
9682: LD_INT 31
9684: DOUBLE
9685: EQUAL
9686: IFTRUE 9690
9688: GO 9718
9690: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9691: LD_ADDR_VAR 0 3
9695: PUSH
9696: LD_STRING 
9698: PUSH
9699: LD_STRING 
9701: PUSH
9702: LD_INT 49
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: LIST
9709: PUSH
9710: LD_VAR 0 2
9714: ARRAY
9715: ST_TO_ADDR
9716: GO 9827
9718: LD_INT 14
9720: DOUBLE
9721: EQUAL
9722: IFTRUE 9726
9724: GO 9754
9726: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9727: LD_ADDR_VAR 0 3
9731: PUSH
9732: LD_INT 10
9734: PUSH
9735: LD_STRING 
9737: PUSH
9738: LD_STRING 
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: PUSH
9746: LD_VAR 0 2
9750: ARRAY
9751: ST_TO_ADDR
9752: GO 9827
9754: LD_INT 10
9756: DOUBLE
9757: EQUAL
9758: IFTRUE 9762
9760: GO 9790
9762: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9763: LD_ADDR_VAR 0 3
9767: PUSH
9768: LD_INT 9
9770: PUSH
9771: LD_STRING 
9773: PUSH
9774: LD_STRING 
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: LIST
9781: PUSH
9782: LD_VAR 0 2
9786: ARRAY
9787: ST_TO_ADDR
9788: GO 9827
9790: LD_INT 40
9792: DOUBLE
9793: EQUAL
9794: IFTRUE 9798
9796: GO 9826
9798: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9799: LD_ADDR_VAR 0 3
9803: PUSH
9804: LD_INT 7
9806: PUSH
9807: LD_INT 28
9809: PUSH
9810: LD_INT 45
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: PUSH
9818: LD_VAR 0 2
9822: ARRAY
9823: ST_TO_ADDR
9824: GO 9827
9826: POP
// end ;
9827: LD_VAR 0 3
9831: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9832: LD_INT 0
9834: PPUSH
9835: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_VAR 0 1
9845: PPUSH
9846: LD_INT 1
9848: PPUSH
9849: CALL_OW 289
9853: PUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_INT 2
9861: PPUSH
9862: CALL_OW 289
9866: PUSH
9867: LD_VAR 0 1
9871: PPUSH
9872: LD_INT 3
9874: PPUSH
9875: CALL_OW 289
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: ST_TO_ADDR
// end ; end_of_file
9885: LD_VAR 0 2
9889: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9890: LD_VAR 0 1
9894: PPUSH
9895: CALL_OW 255
9899: PUSH
9900: LD_INT 3
9902: EQUAL
9903: PUSH
9904: LD_VAR 0 1
9908: PPUSH
9909: CALL_OW 266
9913: PUSH
9914: LD_INT 0
9916: EQUAL
9917: AND
9918: IFFALSE 9932
// SetBname ( building , bukharin ) ;
9920: LD_VAR 0 1
9924: PPUSH
9925: LD_STRING bukharin
9927: PPUSH
9928: CALL_OW 500
// if GetSide ( building ) = 3 and GetBTYpe ( building ) in [ b_lab , b_lab_basic , b_lab_full , b_lab_half ] and not buildedLab then
9932: LD_VAR 0 1
9936: PPUSH
9937: CALL_OW 255
9941: PUSH
9942: LD_INT 3
9944: EQUAL
9945: PUSH
9946: LD_VAR 0 1
9950: PPUSH
9951: CALL_OW 266
9955: PUSH
9956: LD_INT 6
9958: PUSH
9959: LD_INT 9
9961: PUSH
9962: LD_INT 8
9964: PUSH
9965: LD_INT 7
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: IN
9974: AND
9975: PUSH
9976: LD_EXP 25
9980: NOT
9981: AND
9982: IFFALSE 9992
// buildedLab = true ;
9984: LD_ADDR_EXP 25
9988: PUSH
9989: LD_INT 1
9991: ST_TO_ADDR
// if GetSide ( building ) = 2 then
9992: LD_VAR 0 1
9996: PPUSH
9997: CALL_OW 255
10001: PUSH
10002: LD_INT 2
10004: EQUAL
10005: IFFALSE 10146
// begin if GetBType ( building ) = b_lab then
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 266
10016: PUSH
10017: LD_INT 6
10019: EQUAL
10020: IFFALSE 10034
// ComUpgradeLab ( building , b_lab_weapon ) ;
10022: LD_VAR 0 1
10026: PPUSH
10027: LD_INT 10
10029: PPUSH
10030: CALL_OW 147
// if GetBType ( building ) = b_workshop then
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 266
10043: PUSH
10044: LD_INT 2
10046: EQUAL
10047: IFFALSE 10058
// ComUpgrade ( building ) ;
10049: LD_VAR 0 1
10053: PPUSH
10054: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
10058: LD_VAR 0 1
10062: PPUSH
10063: CALL_OW 266
10067: PUSH
10068: LD_INT 17
10070: EQUAL
10071: IFFALSE 10146
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 2 , 2 , 3 ] [ Difficulty ] , 1 , [ 1 , 1 , 2 ] [ Difficulty ] , true ) ;
10073: LD_INT 2
10075: PPUSH
10076: LD_INT 2
10078: PPUSH
10079: LD_EXP 52
10083: PPUSH
10084: LD_INT 34
10086: PPUSH
10087: LD_INT 39
10089: PPUSH
10090: LD_INT 40
10092: PPUSH
10093: LD_INT 35
10095: PPUSH
10096: LD_INT 2
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: LD_INT 3
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: LD_OWVAR 67
10114: ARRAY
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: LD_INT 1
10121: PUSH
10122: LD_INT 1
10124: PUSH
10125: LD_INT 2
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: LIST
10132: PUSH
10133: LD_OWVAR 67
10137: ARRAY
10138: PPUSH
10139: LD_INT 1
10141: PPUSH
10142: CALL 10962 0 11
// end ; end ;
10146: PPOPN 1
10148: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
10149: LD_VAR 0 2
10153: PPUSH
10154: CALL_OW 255
10158: PUSH
10159: LD_INT 3
10161: EQUAL
10162: PUSH
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 248
10172: PUSH
10173: LD_INT 3
10175: EQUAL
10176: AND
10177: PUSH
10178: LD_EXP 10
10182: NOT
10183: AND
10184: IFFALSE 10195
// Dial_TameApe ( human ) ;
10186: LD_VAR 0 2
10190: PPUSH
10191: CALL 4473 0 1
// end ;
10195: PPOPN 2
10197: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10198: LD_VAR 0 1
10202: PUSH
10203: LD_INT 1
10205: EQUAL
10206: PUSH
10207: LD_VAR 0 2
10211: PPUSH
10212: CALL_OW 255
10216: PUSH
10217: LD_INT 3
10219: EQUAL
10220: AND
10221: IFFALSE 10227
// Dial_ResearchApeLang ;
10223: CALL 4362 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10227: LD_VAR 0 1
10231: PUSH
10232: LD_INT 2
10234: EQUAL
10235: PUSH
10236: LD_VAR 0 2
10240: PPUSH
10241: CALL_OW 255
10245: PUSH
10246: LD_INT 3
10248: EQUAL
10249: AND
10250: IFFALSE 10256
// Dial_ResearchApePsych ;
10252: CALL 4906 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10256: LD_VAR 0 1
10260: PUSH
10261: LD_INT 11
10263: EQUAL
10264: PUSH
10265: LD_VAR 0 2
10269: PPUSH
10270: CALL_OW 255
10274: PUSH
10275: LD_INT 3
10277: EQUAL
10278: AND
10279: IFFALSE 10285
// Dial_ResearchApeAgress ;
10281: CALL 5098 0 0
// end ;
10285: PPOPN 2
10287: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10288: LD_VAR 0 2
10292: PPUSH
10293: CALL_OW 255
10297: PUSH
10298: LD_INT 3
10300: EQUAL
10301: PUSH
10302: LD_VAR 0 2
10306: PPUSH
10307: CALL_OW 257
10311: PUSH
10312: LD_INT 12
10314: EQUAL
10315: AND
10316: PUSH
10317: LD_VAR 0 1
10321: PPUSH
10322: CALL_OW 266
10326: PUSH
10327: LD_INT 6
10329: EQUAL
10330: PUSH
10331: LD_VAR 0 1
10335: PPUSH
10336: CALL_OW 266
10340: PUSH
10341: LD_INT 7
10343: EQUAL
10344: OR
10345: AND
10346: PUSH
10347: LD_EXP 11
10351: NOT
10352: AND
10353: IFFALSE 10359
// Dial_ApeEnterLab ;
10355: CALL 4694 0 0
// end ;
10359: PPOPN 2
10361: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10362: LD_VAR 0 1
10366: PUSH
10367: LD_EXP 53
10371: IN
10372: IFFALSE 10390
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10374: LD_ADDR_EXP 53
10378: PUSH
10379: LD_EXP 53
10383: PUSH
10384: LD_VAR 0 1
10388: DIFF
10389: ST_TO_ADDR
// if unit in arabianHovercrafts then
10390: LD_VAR 0 1
10394: PUSH
10395: LD_EXP 54
10399: IN
10400: IFFALSE 10418
// arabianHovercrafts = arabianHovercrafts diff unit ;
10402: LD_ADDR_EXP 54
10406: PUSH
10407: LD_EXP 54
10411: PUSH
10412: LD_VAR 0 1
10416: DIFF
10417: ST_TO_ADDR
// if unit in arabianPatrolTroops then
10418: LD_VAR 0 1
10422: PUSH
10423: LD_EXP 55
10427: IN
10428: IFFALSE 10446
// arabianPatrolTroops = arabianPatrolTroops diff unit ;
10430: LD_ADDR_EXP 55
10434: PUSH
10435: LD_EXP 55
10439: PUSH
10440: LD_VAR 0 1
10444: DIFF
10445: ST_TO_ADDR
// end ;
10446: PPOPN 1
10448: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10449: LD_VAR 0 1
10453: PUSH
10454: LD_EXP 52
10458: IN
10459: IFFALSE 10477
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10461: LD_ADDR_EXP 52
10465: PUSH
10466: LD_EXP 52
10470: PUSH
10471: LD_VAR 0 1
10475: DIFF
10476: ST_TO_ADDR
// if unit = Burlak then
10477: LD_VAR 0 1
10481: PUSH
10482: LD_EXP 40
10486: EQUAL
10487: IFFALSE 10493
// Lose_Burlak ;
10489: CALL 17370 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10493: LD_INT 22
10495: PUSH
10496: LD_INT 3
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 21
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 23
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: PUSH
10533: LD_INT 6
10535: LESS
10536: IFFALSE 10542
// Lose_Survive ;
10538: CALL 17385 0 0
// if GetType ( unit ) = unit_vehicle and GetSide ( unit ) = 2 and GetChassis ( unit ) = ar_hovercraft then
10542: LD_VAR 0 1
10546: PPUSH
10547: CALL_OW 247
10551: PUSH
10552: LD_INT 2
10554: EQUAL
10555: PUSH
10556: LD_VAR 0 1
10560: PPUSH
10561: CALL_OW 255
10565: PUSH
10566: LD_INT 2
10568: EQUAL
10569: AND
10570: PUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: CALL_OW 265
10580: PUSH
10581: LD_INT 11
10583: EQUAL
10584: AND
10585: IFFALSE 10601
// achievement_DestroyedHovercrafts = achievement_DestroyedHovercrafts + 1 ;
10587: LD_ADDR_EXP 26
10591: PUSH
10592: LD_EXP 26
10596: PUSH
10597: LD_INT 1
10599: PLUS
10600: ST_TO_ADDR
// end ;
10601: PPOPN 1
10603: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10604: LD_VAR 0 1
10608: PUSH
10609: LD_INT 3
10611: EQUAL
10612: PUSH
10613: LD_VAR 0 2
10617: PUSH
10618: LD_INT 6
10620: EQUAL
10621: AND
10622: PUSH
10623: LD_VAR 0 1
10627: PUSH
10628: LD_INT 6
10630: EQUAL
10631: PUSH
10632: LD_VAR 0 2
10636: PUSH
10637: LD_INT 3
10639: EQUAL
10640: AND
10641: OR
10642: PUSH
10643: LD_EXP 58
10647: PPUSH
10648: CALL_OW 255
10652: PUSH
10653: LD_INT 6
10655: EQUAL
10656: AND
10657: IFFALSE 10715
// begin stevensFollow = false ;
10659: LD_ADDR_EXP 15
10663: PUSH
10664: LD_INT 0
10666: ST_TO_ADDR
// stevensCanExitMap = true ;
10667: LD_ADDR_EXP 19
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// stevensWasInDepot = false ;
10675: LD_ADDR_EXP 18
10679: PUSH
10680: LD_INT 0
10682: ST_TO_ADDR
// stevensDepot = false ;
10683: LD_ADDR_EXP 17
10687: PUSH
10688: LD_INT 0
10690: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10691: LD_EXP 58
10695: PPUSH
10696: LD_INT 1
10698: PPUSH
10699: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10703: LD_EXP 58
10707: PPUSH
10708: LD_INT 37
10710: PPUSH
10711: CALL_OW 113
// end ; end ; end_of_file
10715: PPOPN 2
10717: END
// export function BuildBase ; var engs ; begin
10718: LD_INT 0
10720: PPUSH
10721: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10722: LD_ADDR_VAR 0 2
10726: PUSH
10727: LD_INT 22
10729: PUSH
10730: LD_INT 2
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 21
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 25
10749: PUSH
10750: LD_INT 2
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: PPUSH
10762: CALL_OW 69
10766: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10767: LD_VAR 0 2
10771: PPUSH
10772: LD_INT 4
10774: PPUSH
10775: LD_INT 129
10777: PPUSH
10778: LD_INT 74
10780: PPUSH
10781: LD_INT 2
10783: PPUSH
10784: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10788: LD_VAR 0 2
10792: PPUSH
10793: LD_INT 26
10795: PPUSH
10796: LD_INT 128
10798: PPUSH
10799: LD_INT 53
10801: PPUSH
10802: LD_INT 2
10804: PPUSH
10805: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 127 , 56 , 1 ) ;
10809: LD_VAR 0 2
10813: PPUSH
10814: LD_INT 26
10816: PPUSH
10817: LD_INT 127
10819: PPUSH
10820: LD_INT 56
10822: PPUSH
10823: LD_INT 1
10825: PPUSH
10826: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10830: LD_VAR 0 2
10834: PPUSH
10835: LD_INT 6
10837: PPUSH
10838: LD_INT 138
10840: PPUSH
10841: LD_INT 78
10843: PPUSH
10844: LD_INT 5
10846: PPUSH
10847: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10851: LD_VAR 0 2
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: LD_INT 137
10861: PPUSH
10862: LD_INT 63
10864: PPUSH
10865: LD_INT 4
10867: PPUSH
10868: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10872: LD_VAR 0 2
10876: PPUSH
10877: LD_INT 23
10879: PPUSH
10880: LD_INT 137
10882: PPUSH
10883: LD_INT 60
10885: PPUSH
10886: LD_INT 3
10888: PPUSH
10889: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10893: LD_VAR 0 2
10897: PPUSH
10898: LD_INT 16
10900: PPUSH
10901: LD_INT 140
10903: PPUSH
10904: LD_INT 66
10906: PPUSH
10907: LD_INT 5
10909: PPUSH
10910: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_INT 17
10921: PPUSH
10922: LD_INT 133
10924: PPUSH
10925: LD_INT 59
10927: PPUSH
10928: LD_INT 2
10930: PPUSH
10931: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10935: LD_INT 1
10937: PUSH
10938: LD_EXP 51
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PPUSH
10947: LD_INT 128
10949: PPUSH
10950: LD_INT 66
10952: PPUSH
10953: CALL_OW 111
// end ;
10957: LD_VAR 0 1
10961: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , offensiveReadyCounter , target1 , target2 , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10962: LD_INT 0
10964: PPUSH
10965: PPUSH
10966: PPUSH
10967: PPUSH
10968: PPUSH
10969: PPUSH
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
10975: PPUSH
10976: PPUSH
10977: PPUSH
10978: PPUSH
10979: PPUSH
10980: PPUSH
10981: PPUSH
10982: PPUSH
10983: PPUSH
10984: PPUSH
10985: PPUSH
10986: PPUSH
10987: PPUSH
10988: PPUSH
10989: PPUSH
10990: PPUSH
10991: PPUSH
10992: PPUSH
10993: PPUSH
10994: PPUSH
10995: PPUSH
// personel = [ ] ;
10996: LD_ADDR_VAR 0 18
11000: PUSH
11001: EMPTY
11002: ST_TO_ADDR
// vehicles = [ ] ;
11003: LD_ADDR_VAR 0 24
11007: PUSH
11008: EMPTY
11009: ST_TO_ADDR
// for unit in basePersonel do
11010: LD_ADDR_VAR 0 17
11014: PUSH
11015: LD_VAR 0 3
11019: PUSH
11020: FOR_IN
11021: IFFALSE 11069
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11023: LD_ADDR_VAR 0 18
11027: PUSH
11028: LD_VAR 0 18
11032: PUSH
11033: LD_VAR 0 17
11037: PUSH
11038: LD_VAR 0 17
11042: PPUSH
11043: CALL_OW 310
11047: PUSH
11048: LD_VAR 0 17
11052: PPUSH
11053: CALL_OW 302
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: ADD
11066: ST_TO_ADDR
11067: GO 11020
11069: POP
11070: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
11071: LD_ADDR_VAR 0 23
11075: PUSH
11076: LD_VAR 0 4
11080: PPUSH
11081: LD_INT 22
11083: PUSH
11084: LD_VAR 0 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 21
11095: PUSH
11096: LD_INT 2
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 50
11105: PUSH
11106: EMPTY
11107: LIST
11108: PUSH
11109: LD_INT 3
11111: PUSH
11112: LD_INT 2
11114: PUSH
11115: LD_INT 31
11117: PUSH
11118: LD_INT 31
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: LD_INT 34
11127: PUSH
11128: LD_INT 12
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: LD_INT 34
11137: PUSH
11138: LD_INT 51
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 34
11147: PUSH
11148: LD_INT 32
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PPUSH
11172: CALL_OW 70
11176: PUSH
11177: LD_EXP 53
11181: DIFF
11182: PUSH
11183: FOR_IN
11184: IFFALSE 11232
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11186: LD_ADDR_VAR 0 24
11190: PUSH
11191: LD_VAR 0 24
11195: PUSH
11196: LD_VAR 0 23
11200: PUSH
11201: LD_VAR 0 23
11205: PPUSH
11206: CALL_OW 310
11210: PUSH
11211: LD_VAR 0 23
11215: PPUSH
11216: CALL_OW 302
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: ADD
11229: ST_TO_ADDR
11230: GO 11183
11232: POP
11233: POP
// repeat soldiers = [ ] ;
11234: LD_ADDR_VAR 0 19
11238: PUSH
11239: EMPTY
11240: ST_TO_ADDR
// engineers = [ ] ;
11241: LD_ADDR_VAR 0 20
11245: PUSH
11246: EMPTY
11247: ST_TO_ADDR
// mechanics = [ ] ;
11248: LD_ADDR_VAR 0 21
11252: PUSH
11253: EMPTY
11254: ST_TO_ADDR
// scientists = [ ] ;
11255: LD_ADDR_VAR 0 22
11259: PUSH
11260: EMPTY
11261: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11262: LD_ADDR_VAR 0 33
11266: PUSH
11267: LD_VAR 0 4
11271: PPUSH
11272: LD_INT 22
11274: PUSH
11275: LD_VAR 0 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 21
11286: PUSH
11287: LD_INT 3
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 50
11296: PUSH
11297: EMPTY
11298: LIST
11299: PUSH
11300: LD_INT 2
11302: PUSH
11303: LD_INT 30
11305: PUSH
11306: LD_INT 0
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 30
11315: PUSH
11316: LD_INT 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 70
11338: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11339: LD_ADDR_VAR 0 34
11343: PUSH
11344: LD_VAR 0 4
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_VAR 0 1
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 21
11363: PUSH
11364: LD_INT 3
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 50
11373: PUSH
11374: EMPTY
11375: LIST
11376: PUSH
11377: LD_INT 2
11379: PUSH
11380: LD_INT 30
11382: PUSH
11383: LD_INT 2
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 30
11392: PUSH
11393: LD_INT 3
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: PPUSH
11411: CALL_OW 70
11415: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11416: LD_ADDR_VAR 0 35
11420: PUSH
11421: LD_VAR 0 4
11425: PPUSH
11426: LD_INT 22
11428: PUSH
11429: LD_VAR 0 1
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 21
11440: PUSH
11441: LD_INT 3
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 50
11450: PUSH
11451: EMPTY
11452: LIST
11453: PUSH
11454: LD_INT 2
11456: PUSH
11457: LD_INT 30
11459: PUSH
11460: LD_INT 6
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 30
11469: PUSH
11470: LD_INT 7
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 30
11479: PUSH
11480: LD_INT 8
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: PPUSH
11499: CALL_OW 70
11503: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11504: LD_ADDR_VAR 0 36
11508: PUSH
11509: LD_VAR 0 4
11513: PPUSH
11514: LD_INT 22
11516: PUSH
11517: LD_VAR 0 1
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 21
11528: PUSH
11529: LD_INT 3
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 50
11538: PUSH
11539: EMPTY
11540: LIST
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: LD_INT 30
11547: PUSH
11548: LD_INT 31
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 30
11557: PUSH
11558: LD_INT 32
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: PPUSH
11576: CALL_OW 70
11580: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11581: LD_ADDR_VAR 0 37
11585: PUSH
11586: LD_VAR 0 4
11590: PPUSH
11591: LD_INT 22
11593: PUSH
11594: LD_VAR 0 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 21
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 50
11615: PUSH
11616: EMPTY
11617: LIST
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: LD_INT 30
11624: PUSH
11625: LD_INT 4
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 30
11634: PUSH
11635: LD_INT 5
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 70
11657: ST_TO_ADDR
// for i := 1 to personel do
11658: LD_ADDR_VAR 0 13
11662: PUSH
11663: DOUBLE
11664: LD_INT 1
11666: DEC
11667: ST_TO_ADDR
11668: LD_VAR 0 18
11672: PUSH
11673: FOR_TO
11674: IFFALSE 11880
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11676: LD_VAR 0 18
11680: PUSH
11681: LD_VAR 0 13
11685: ARRAY
11686: PUSH
11687: LD_INT 1
11689: ARRAY
11690: PPUSH
11691: CALL_OW 256
11695: PUSH
11696: LD_INT 1000
11698: EQUAL
11699: IFFALSE 11741
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11701: LD_ADDR_VAR 0 18
11705: PUSH
11706: LD_VAR 0 18
11710: PPUSH
11711: LD_VAR 0 13
11715: PUSH
11716: LD_VAR 0 18
11720: PUSH
11721: LD_VAR 0 13
11725: ARRAY
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL 26168 0 3
11738: ST_TO_ADDR
// end else
11739: GO 11828
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11741: LD_VAR 0 18
11745: PUSH
11746: LD_VAR 0 13
11750: ARRAY
11751: PUSH
11752: LD_INT 1
11754: ARRAY
11755: PPUSH
11756: CALL_OW 256
11760: PUSH
11761: LD_INT 950
11763: LESSEQUAL
11764: IFFALSE 11828
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
11766: LD_ADDR_VAR 0 18
11770: PUSH
11771: LD_VAR 0 18
11775: PPUSH
11776: LD_VAR 0 13
11780: PUSH
11781: LD_VAR 0 18
11785: PUSH
11786: LD_VAR 0 13
11790: ARRAY
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL 26168 0 3
11803: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11804: LD_VAR 0 18
11808: PUSH
11809: LD_VAR 0 13
11813: ARRAY
11814: PUSH
11815: LD_INT 1
11817: ARRAY
11818: PPUSH
11819: LD_VAR 0 5
11823: PPUSH
11824: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11828: LD_VAR 0 18
11832: PUSH
11833: LD_VAR 0 13
11837: ARRAY
11838: PUSH
11839: LD_INT 1
11841: ARRAY
11842: PPUSH
11843: CALL_OW 256
11847: PUSH
11848: LD_INT 250
11850: LESS
11851: IFFALSE 11878
// personel = personel diff [ personel [ i ] ] ;
11853: LD_ADDR_VAR 0 18
11857: PUSH
11858: LD_VAR 0 18
11862: PUSH
11863: LD_VAR 0 18
11867: PUSH
11868: LD_VAR 0 13
11872: ARRAY
11873: PUSH
11874: EMPTY
11875: LIST
11876: DIFF
11877: ST_TO_ADDR
// end ;
11878: GO 11673
11880: POP
11881: POP
// for i := 1 to vehicles do
11882: LD_ADDR_VAR 0 13
11886: PUSH
11887: DOUBLE
11888: LD_INT 1
11890: DEC
11891: ST_TO_ADDR
11892: LD_VAR 0 24
11896: PUSH
11897: FOR_TO
11898: IFFALSE 12284
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
11900: LD_VAR 0 24
11904: PUSH
11905: LD_VAR 0 13
11909: ARRAY
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: CALL_OW 261
11919: PUSH
11920: LD_INT 50
11922: LESS
11923: IFFALSE 11947
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
11925: LD_VAR 0 24
11929: PUSH
11930: LD_VAR 0 13
11934: ARRAY
11935: PUSH
11936: LD_INT 1
11938: ARRAY
11939: PPUSH
11940: LD_INT 100
11942: PPUSH
11943: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11947: LD_VAR 0 24
11951: PUSH
11952: LD_VAR 0 13
11956: ARRAY
11957: PUSH
11958: LD_INT 1
11960: ARRAY
11961: PPUSH
11962: CALL_OW 256
11966: PUSH
11967: LD_INT 1000
11969: EQUAL
11970: IFFALSE 12145
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11972: LD_VAR 0 24
11976: PUSH
11977: LD_VAR 0 13
11981: ARRAY
11982: PUSH
11983: LD_INT 1
11985: ARRAY
11986: PPUSH
11987: CALL_OW 263
11991: PUSH
11992: LD_INT 1
11994: EQUAL
11995: IFFALSE 12053
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
11997: LD_VAR 0 24
12001: PUSH
12002: LD_VAR 0 13
12006: ARRAY
12007: PUSH
12008: LD_INT 2
12010: ARRAY
12011: PPUSH
12012: CALL_OW 310
12016: NOT
12017: IFFALSE 12053
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12019: LD_VAR 0 24
12023: PUSH
12024: LD_VAR 0 13
12028: ARRAY
12029: PUSH
12030: LD_INT 2
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 24
12038: PUSH
12039: LD_VAR 0 13
12043: ARRAY
12044: PUSH
12045: LD_INT 1
12047: ARRAY
12048: PPUSH
12049: CALL_OW 120
// if offensiveunits < vehiclesToAttackAmount then
12053: LD_VAR 0 27
12057: PUSH
12058: LD_VAR 0 10
12062: LESS
12063: IFFALSE 12105
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
12065: LD_ADDR_VAR 0 24
12069: PUSH
12070: LD_VAR 0 24
12074: PPUSH
12075: LD_VAR 0 13
12079: PUSH
12080: LD_VAR 0 24
12084: PUSH
12085: LD_VAR 0 13
12089: ARRAY
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: LD_INT 3
12097: PPUSH
12098: CALL 26168 0 3
12102: ST_TO_ADDR
12103: GO 12143
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12105: LD_ADDR_VAR 0 24
12109: PUSH
12110: LD_VAR 0 24
12114: PPUSH
12115: LD_VAR 0 13
12119: PUSH
12120: LD_VAR 0 24
12124: PUSH
12125: LD_VAR 0 13
12129: ARRAY
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PPUSH
12135: LD_INT 2
12137: PPUSH
12138: CALL 26168 0 3
12142: ST_TO_ADDR
// end else
12143: GO 12232
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12145: LD_VAR 0 24
12149: PUSH
12150: LD_VAR 0 13
12154: ARRAY
12155: PUSH
12156: LD_INT 1
12158: ARRAY
12159: PPUSH
12160: CALL_OW 256
12164: PUSH
12165: LD_INT 650
12167: LESSEQUAL
12168: IFFALSE 12232
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12170: LD_ADDR_VAR 0 24
12174: PUSH
12175: LD_VAR 0 24
12179: PPUSH
12180: LD_VAR 0 13
12184: PUSH
12185: LD_VAR 0 24
12189: PUSH
12190: LD_VAR 0 13
12194: ARRAY
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PPUSH
12200: LD_INT 0
12202: PPUSH
12203: CALL 26168 0 3
12207: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12208: LD_VAR 0 24
12212: PUSH
12213: LD_VAR 0 13
12217: ARRAY
12218: PUSH
12219: LD_INT 1
12221: ARRAY
12222: PPUSH
12223: LD_VAR 0 6
12227: PPUSH
12228: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12232: LD_VAR 0 24
12236: PUSH
12237: LD_VAR 0 13
12241: ARRAY
12242: PUSH
12243: LD_INT 1
12245: ARRAY
12246: PPUSH
12247: CALL_OW 256
12251: PUSH
12252: LD_INT 250
12254: LESS
12255: IFFALSE 12282
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12257: LD_ADDR_VAR 0 24
12261: PUSH
12262: LD_VAR 0 24
12266: PUSH
12267: LD_VAR 0 24
12271: PUSH
12272: LD_VAR 0 13
12276: ARRAY
12277: PUSH
12278: EMPTY
12279: LIST
12280: DIFF
12281: ST_TO_ADDR
// end ;
12282: GO 11897
12284: POP
12285: POP
// for i := 1 to personel do
12286: LD_ADDR_VAR 0 13
12290: PUSH
12291: DOUBLE
12292: LD_INT 1
12294: DEC
12295: ST_TO_ADDR
12296: LD_VAR 0 18
12300: PUSH
12301: FOR_TO
12302: IFFALSE 12343
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12304: LD_ADDR_VAR 0 19
12308: PUSH
12309: LD_VAR 0 19
12313: PUSH
12314: LD_VAR 0 18
12318: PUSH
12319: LD_VAR 0 13
12323: ARRAY
12324: PPUSH
12325: LD_INT 25
12327: PUSH
12328: LD_INT 1
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: ADD
12340: ST_TO_ADDR
12341: GO 12301
12343: POP
12344: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12345: LD_VAR 0 19
12349: PUSH
12350: LD_VAR 0 36
12354: PPUSH
12355: LD_INT 3
12357: PUSH
12358: LD_INT 59
12360: PUSH
12361: EMPTY
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 72
12372: AND
12373: IFFALSE 12661
// begin for i := 1 to personel do
12375: LD_ADDR_VAR 0 13
12379: PUSH
12380: DOUBLE
12381: LD_INT 1
12383: DEC
12384: ST_TO_ADDR
12385: LD_VAR 0 18
12389: PUSH
12390: FOR_TO
12391: IFFALSE 12657
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12393: LD_VAR 0 18
12397: PUSH
12398: LD_VAR 0 13
12402: ARRAY
12403: PUSH
12404: LD_INT 1
12406: ARRAY
12407: PPUSH
12408: CALL_OW 257
12412: PUSH
12413: LD_INT 1
12415: EQUAL
12416: PUSH
12417: LD_VAR 0 18
12421: PUSH
12422: LD_VAR 0 13
12426: ARRAY
12427: PUSH
12428: LD_INT 3
12430: ARRAY
12431: PUSH
12432: LD_INT 1
12434: EQUAL
12435: AND
12436: IFFALSE 12655
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12438: LD_VAR 0 18
12442: PUSH
12443: LD_VAR 0 13
12447: ARRAY
12448: PUSH
12449: LD_INT 1
12451: ARRAY
12452: PPUSH
12453: CALL_OW 437
12457: IFFALSE 12558
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12459: LD_VAR 0 18
12463: PUSH
12464: LD_VAR 0 13
12468: ARRAY
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 437
12478: PUSH
12479: LD_INT 1
12481: ARRAY
12482: PUSH
12483: LD_INT 1
12485: ARRAY
12486: PUSH
12487: LD_STRING e
12489: EQUAL
12490: PUSH
12491: LD_VAR 0 18
12495: PUSH
12496: LD_VAR 0 13
12500: ARRAY
12501: PUSH
12502: LD_INT 1
12504: ARRAY
12505: PPUSH
12506: CALL_OW 437
12510: PUSH
12511: LD_INT 1
12513: ARRAY
12514: PUSH
12515: LD_INT 4
12517: ARRAY
12518: PPUSH
12519: CALL_OW 266
12523: PUSH
12524: LD_INT 4
12526: PUSH
12527: LD_INT 5
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: IN
12534: AND
12535: IFFALSE 12558
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12537: LD_VAR 0 18
12541: PUSH
12542: LD_VAR 0 13
12546: ARRAY
12547: PUSH
12548: LD_INT 1
12550: ARRAY
12551: PPUSH
12552: EMPTY
12553: PPUSH
12554: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12558: LD_ADDR_VAR 0 40
12562: PUSH
12563: LD_VAR 0 36
12567: PPUSH
12568: LD_INT 3
12570: PUSH
12571: LD_INT 59
12573: PUSH
12574: EMPTY
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 72
12585: PUSH
12586: FOR_IN
12587: IFFALSE 12653
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12589: LD_VAR 0 18
12593: PUSH
12594: LD_VAR 0 13
12598: ARRAY
12599: PUSH
12600: LD_INT 1
12602: ARRAY
12603: PPUSH
12604: CALL_OW 310
12608: PPUSH
12609: CALL_OW 266
12613: PUSH
12614: LD_INT 31
12616: PUSH
12617: LD_INT 32
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: IN
12624: NOT
12625: IFFALSE 12651
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12627: LD_VAR 0 18
12631: PUSH
12632: LD_VAR 0 13
12636: ARRAY
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PPUSH
12642: LD_VAR 0 40
12646: PPUSH
12647: CALL_OW 120
12651: GO 12586
12653: POP
12654: POP
// end ; end ;
12655: GO 12390
12657: POP
12658: POP
// end else
12659: GO 12876
// if soldiers and barracks then
12661: LD_VAR 0 19
12665: PUSH
12666: LD_VAR 0 37
12670: AND
12671: IFFALSE 12876
// for i := 1 to personel do
12673: LD_ADDR_VAR 0 13
12677: PUSH
12678: DOUBLE
12679: LD_INT 1
12681: DEC
12682: ST_TO_ADDR
12683: LD_VAR 0 18
12687: PUSH
12688: FOR_TO
12689: IFFALSE 12874
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12691: LD_VAR 0 18
12695: PUSH
12696: LD_VAR 0 13
12700: ARRAY
12701: PUSH
12702: LD_INT 1
12704: ARRAY
12705: PPUSH
12706: CALL_OW 257
12710: PUSH
12711: LD_INT 1
12713: EQUAL
12714: PUSH
12715: LD_VAR 0 18
12719: PUSH
12720: LD_VAR 0 13
12724: ARRAY
12725: PUSH
12726: LD_INT 3
12728: ARRAY
12729: PUSH
12730: LD_INT 1
12732: EQUAL
12733: AND
12734: PUSH
12735: LD_VAR 0 18
12739: PUSH
12740: LD_VAR 0 13
12744: ARRAY
12745: PUSH
12746: LD_INT 1
12748: ARRAY
12749: PPUSH
12750: LD_INT 56
12752: PUSH
12753: EMPTY
12754: LIST
12755: PPUSH
12756: CALL_OW 72
12760: AND
12761: IFFALSE 12872
// begin if not personel [ i ] [ 2 ] then
12763: LD_VAR 0 18
12767: PUSH
12768: LD_VAR 0 13
12772: ARRAY
12773: PUSH
12774: LD_INT 2
12776: ARRAY
12777: NOT
12778: IFFALSE 12838
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12780: LD_ADDR_VAR 0 18
12784: PUSH
12785: LD_VAR 0 18
12789: PPUSH
12790: LD_VAR 0 13
12794: PUSH
12795: LD_VAR 0 18
12799: PUSH
12800: LD_VAR 0 13
12804: ARRAY
12805: PUSH
12806: LD_INT 1
12808: MINUS
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PPUSH
12814: LD_VAR 0 37
12818: PUSH
12819: LD_INT 1
12821: PPUSH
12822: LD_VAR 0 37
12826: PPUSH
12827: CALL_OW 12
12831: ARRAY
12832: PPUSH
12833: CALL 26168 0 3
12837: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12838: LD_VAR 0 18
12842: PUSH
12843: LD_VAR 0 13
12847: ARRAY
12848: PUSH
12849: LD_INT 1
12851: ARRAY
12852: PPUSH
12853: LD_VAR 0 18
12857: PUSH
12858: LD_VAR 0 13
12862: ARRAY
12863: PUSH
12864: LD_INT 2
12866: ARRAY
12867: PPUSH
12868: CALL_OW 120
// end ;
12872: GO 12688
12874: POP
12875: POP
// for i := 1 to personel do
12876: LD_ADDR_VAR 0 13
12880: PUSH
12881: DOUBLE
12882: LD_INT 1
12884: DEC
12885: ST_TO_ADDR
12886: LD_VAR 0 18
12890: PUSH
12891: FOR_TO
12892: IFFALSE 12933
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12894: LD_ADDR_VAR 0 20
12898: PUSH
12899: LD_VAR 0 20
12903: PUSH
12904: LD_VAR 0 18
12908: PUSH
12909: LD_VAR 0 13
12913: ARRAY
12914: PPUSH
12915: LD_INT 25
12917: PUSH
12918: LD_INT 2
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PPUSH
12925: CALL_OW 72
12929: ADD
12930: ST_TO_ADDR
12931: GO 12891
12933: POP
12934: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12935: LD_VAR 0 20
12939: PUSH
12940: LD_VAR 0 4
12944: PPUSH
12945: LD_INT 22
12947: PUSH
12948: LD_VAR 0 1
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 21
12959: PUSH
12960: LD_INT 3
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 3
12969: PUSH
12970: LD_INT 24
12972: PUSH
12973: LD_INT 1000
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: PPUSH
12989: CALL_OW 70
12993: AND
12994: IFFALSE 13270
// begin for i := 1 to personel do
12996: LD_ADDR_VAR 0 13
13000: PUSH
13001: DOUBLE
13002: LD_INT 1
13004: DEC
13005: ST_TO_ADDR
13006: LD_VAR 0 18
13010: PUSH
13011: FOR_TO
13012: IFFALSE 13266
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13014: LD_VAR 0 18
13018: PUSH
13019: LD_VAR 0 13
13023: ARRAY
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: PPUSH
13029: CALL_OW 257
13033: PUSH
13034: LD_INT 2
13036: EQUAL
13037: PUSH
13038: LD_VAR 0 18
13042: PUSH
13043: LD_VAR 0 13
13047: ARRAY
13048: PUSH
13049: LD_INT 3
13051: ARRAY
13052: PUSH
13053: LD_INT 1
13055: EQUAL
13056: AND
13057: IFFALSE 13264
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13059: LD_VAR 0 18
13063: PUSH
13064: LD_VAR 0 13
13068: ARRAY
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: CALL_OW 437
13078: IFFALSE 13134
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13080: LD_VAR 0 18
13084: PUSH
13085: LD_VAR 0 13
13089: ARRAY
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: PPUSH
13095: CALL_OW 437
13099: PUSH
13100: LD_INT 1
13102: ARRAY
13103: PUSH
13104: LD_INT 1
13106: ARRAY
13107: PUSH
13108: LD_STRING e
13110: EQUAL
13111: IFFALSE 13134
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13113: LD_VAR 0 18
13117: PUSH
13118: LD_VAR 0 13
13122: ARRAY
13123: PUSH
13124: LD_INT 1
13126: ARRAY
13127: PPUSH
13128: EMPTY
13129: PPUSH
13130: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13134: LD_VAR 0 18
13138: PUSH
13139: LD_VAR 0 13
13143: ARRAY
13144: PUSH
13145: LD_INT 1
13147: ARRAY
13148: PPUSH
13149: CALL_OW 310
13153: IFFALSE 13174
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13155: LD_VAR 0 18
13159: PUSH
13160: LD_VAR 0 13
13164: ARRAY
13165: PUSH
13166: LD_INT 1
13168: ARRAY
13169: PPUSH
13170: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13174: LD_ADDR_VAR 0 38
13178: PUSH
13179: LD_VAR 0 4
13183: PPUSH
13184: LD_INT 22
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 21
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: LD_INT 24
13211: PUSH
13212: LD_INT 1000
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: PPUSH
13228: CALL_OW 70
13232: PUSH
13233: FOR_IN
13234: IFFALSE 13262
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13236: LD_VAR 0 18
13240: PUSH
13241: LD_VAR 0 13
13245: ARRAY
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: PPUSH
13251: LD_VAR 0 38
13255: PPUSH
13256: CALL_OW 190
13260: GO 13233
13262: POP
13263: POP
// end ;
13264: GO 13011
13266: POP
13267: POP
// end else
13268: GO 13532
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13270: LD_VAR 0 20
13274: PUSH
13275: LD_VAR 0 20
13279: PPUSH
13280: LD_INT 56
13282: PUSH
13283: EMPTY
13284: LIST
13285: PPUSH
13286: CALL_OW 72
13290: AND
13291: PUSH
13292: LD_VAR 0 33
13296: AND
13297: IFFALSE 13532
// for i := 1 to personel do
13299: LD_ADDR_VAR 0 13
13303: PUSH
13304: DOUBLE
13305: LD_INT 1
13307: DEC
13308: ST_TO_ADDR
13309: LD_VAR 0 18
13313: PUSH
13314: FOR_TO
13315: IFFALSE 13530
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13317: LD_VAR 0 18
13321: PUSH
13322: LD_VAR 0 13
13326: ARRAY
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PPUSH
13332: CALL_OW 257
13336: PUSH
13337: LD_INT 2
13339: EQUAL
13340: PUSH
13341: LD_VAR 0 18
13345: PUSH
13346: LD_VAR 0 13
13350: ARRAY
13351: PUSH
13352: LD_INT 3
13354: ARRAY
13355: PUSH
13356: LD_INT 1
13358: EQUAL
13359: AND
13360: IFFALSE 13528
// begin if not personel [ i ] [ 2 ] then
13362: LD_VAR 0 18
13366: PUSH
13367: LD_VAR 0 13
13371: ARRAY
13372: PUSH
13373: LD_INT 2
13375: ARRAY
13376: NOT
13377: IFFALSE 13494
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13379: LD_ADDR_VAR 0 18
13383: PUSH
13384: LD_VAR 0 18
13388: PPUSH
13389: LD_VAR 0 13
13393: PUSH
13394: LD_VAR 0 18
13398: PUSH
13399: LD_VAR 0 13
13403: ARRAY
13404: PUSH
13405: LD_INT 1
13407: MINUS
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PPUSH
13413: LD_VAR 0 4
13417: PPUSH
13418: LD_INT 22
13420: PUSH
13421: LD_VAR 0 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 21
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 50
13442: PUSH
13443: EMPTY
13444: LIST
13445: PUSH
13446: LD_INT 2
13448: PUSH
13449: LD_INT 30
13451: PUSH
13452: LD_INT 0
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 30
13461: PUSH
13462: LD_INT 1
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 70
13484: PUSH
13485: LD_INT 1
13487: ARRAY
13488: PPUSH
13489: CALL 26168 0 3
13493: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13494: LD_VAR 0 18
13498: PUSH
13499: LD_VAR 0 13
13503: ARRAY
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: LD_VAR 0 18
13513: PUSH
13514: LD_VAR 0 13
13518: ARRAY
13519: PUSH
13520: LD_INT 2
13522: ARRAY
13523: PPUSH
13524: CALL_OW 120
// end ; end ;
13528: GO 13314
13530: POP
13531: POP
// for i := 1 to personel do
13532: LD_ADDR_VAR 0 13
13536: PUSH
13537: DOUBLE
13538: LD_INT 1
13540: DEC
13541: ST_TO_ADDR
13542: LD_VAR 0 18
13546: PUSH
13547: FOR_TO
13548: IFFALSE 13589
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13550: LD_ADDR_VAR 0 21
13554: PUSH
13555: LD_VAR 0 21
13559: PUSH
13560: LD_VAR 0 18
13564: PUSH
13565: LD_VAR 0 13
13569: ARRAY
13570: PPUSH
13571: LD_INT 25
13573: PUSH
13574: LD_INT 3
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 72
13585: ADD
13586: ST_TO_ADDR
13587: GO 13547
13589: POP
13590: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13591: LD_VAR 0 21
13595: PUSH
13596: LD_VAR 0 4
13600: PPUSH
13601: LD_INT 22
13603: PUSH
13604: LD_VAR 0 1
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 21
13615: PUSH
13616: LD_INT 2
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 3
13625: PUSH
13626: LD_INT 24
13628: PUSH
13629: LD_INT 1000
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: PPUSH
13645: CALL_OW 70
13649: AND
13650: IFFALSE 14084
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13652: LD_ADDR_VAR 0 39
13656: PUSH
13657: LD_VAR 0 4
13661: PPUSH
13662: LD_INT 22
13664: PUSH
13665: LD_VAR 0 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 21
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 3
13686: PUSH
13687: LD_INT 24
13689: PUSH
13690: LD_INT 1000
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 70
13710: PUSH
13711: FOR_IN
13712: IFFALSE 14080
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13714: LD_VAR 0 39
13718: PPUSH
13719: LD_VAR 0 6
13723: PPUSH
13724: CALL_OW 299
13728: PUSH
13729: LD_INT 5
13731: LESS
13732: IFFALSE 14078
// begin for i := 1 to vehicles do
13734: LD_ADDR_VAR 0 13
13738: PUSH
13739: DOUBLE
13740: LD_INT 1
13742: DEC
13743: ST_TO_ADDR
13744: LD_VAR 0 24
13748: PUSH
13749: FOR_TO
13750: IFFALSE 13819
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13752: LD_VAR 0 24
13756: PUSH
13757: LD_VAR 0 13
13761: ARRAY
13762: PUSH
13763: LD_INT 1
13765: ARRAY
13766: PUSH
13767: LD_VAR 0 39
13771: EQUAL
13772: IFFALSE 13793
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13774: LD_VAR 0 24
13778: PUSH
13779: LD_VAR 0 13
13783: ARRAY
13784: PUSH
13785: LD_INT 2
13787: ARRAY
13788: PPUSH
13789: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13793: LD_VAR 0 24
13797: PUSH
13798: LD_VAR 0 13
13802: ARRAY
13803: PUSH
13804: LD_INT 2
13806: ARRAY
13807: PPUSH
13808: LD_VAR 0 39
13812: PPUSH
13813: CALL_OW 189
// end ;
13817: GO 13749
13819: POP
13820: POP
// for i := 1 to personel do
13821: LD_ADDR_VAR 0 13
13825: PUSH
13826: DOUBLE
13827: LD_INT 1
13829: DEC
13830: ST_TO_ADDR
13831: LD_VAR 0 18
13835: PUSH
13836: FOR_TO
13837: IFFALSE 14076
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13839: LD_VAR 0 18
13843: PUSH
13844: LD_VAR 0 13
13848: ARRAY
13849: PUSH
13850: LD_INT 1
13852: ARRAY
13853: PPUSH
13854: CALL_OW 257
13858: PUSH
13859: LD_INT 3
13861: EQUAL
13862: PUSH
13863: LD_VAR 0 18
13867: PUSH
13868: LD_VAR 0 13
13872: ARRAY
13873: PUSH
13874: LD_INT 3
13876: ARRAY
13877: PUSH
13878: LD_INT 1
13880: EQUAL
13881: AND
13882: IFFALSE 14074
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13884: LD_VAR 0 18
13888: PUSH
13889: LD_VAR 0 13
13893: ARRAY
13894: PUSH
13895: LD_INT 1
13897: ARRAY
13898: PPUSH
13899: CALL_OW 437
13903: IFFALSE 13959
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13905: LD_VAR 0 18
13909: PUSH
13910: LD_VAR 0 13
13914: ARRAY
13915: PUSH
13916: LD_INT 1
13918: ARRAY
13919: PPUSH
13920: CALL_OW 437
13924: PUSH
13925: LD_INT 1
13927: ARRAY
13928: PUSH
13929: LD_INT 1
13931: ARRAY
13932: PUSH
13933: LD_STRING e
13935: EQUAL
13936: IFFALSE 13959
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13938: LD_VAR 0 18
13942: PUSH
13943: LD_VAR 0 13
13947: ARRAY
13948: PUSH
13949: LD_INT 1
13951: ARRAY
13952: PPUSH
13953: EMPTY
13954: PPUSH
13955: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13959: LD_VAR 0 18
13963: PUSH
13964: LD_VAR 0 13
13968: ARRAY
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: PPUSH
13974: CALL_OW 310
13978: IFFALSE 13999
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13980: LD_VAR 0 18
13984: PUSH
13985: LD_VAR 0 13
13989: ARRAY
13990: PUSH
13991: LD_INT 1
13993: ARRAY
13994: PPUSH
13995: CALL_OW 122
// if not IsInArea ( personel [ i ] [ 1 ] , baseArea ) then
13999: LD_VAR 0 18
14003: PUSH
14004: LD_VAR 0 13
14008: ARRAY
14009: PUSH
14010: LD_INT 1
14012: ARRAY
14013: PPUSH
14014: LD_VAR 0 4
14018: PPUSH
14019: CALL_OW 308
14023: NOT
14024: IFFALSE 14050
// ComMoveToArea ( personel [ i ] [ 1 ] , baseArea ) ;
14026: LD_VAR 0 18
14030: PUSH
14031: LD_VAR 0 13
14035: ARRAY
14036: PUSH
14037: LD_INT 1
14039: ARRAY
14040: PPUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 113
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14050: LD_VAR 0 18
14054: PUSH
14055: LD_VAR 0 13
14059: ARRAY
14060: PUSH
14061: LD_INT 1
14063: ARRAY
14064: PPUSH
14065: LD_VAR 0 39
14069: PPUSH
14070: CALL_OW 189
// end ;
14074: GO 13836
14076: POP
14077: POP
// end ; end ;
14078: GO 13711
14080: POP
14081: POP
// end else
14082: GO 14289
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
14084: LD_VAR 0 21
14088: PUSH
14089: LD_VAR 0 21
14093: PPUSH
14094: LD_INT 56
14096: PUSH
14097: EMPTY
14098: LIST
14099: PPUSH
14100: CALL_OW 72
14104: AND
14105: PUSH
14106: LD_VAR 0 34
14110: AND
14111: IFFALSE 14289
// for i := 1 to personel do
14113: LD_ADDR_VAR 0 13
14117: PUSH
14118: DOUBLE
14119: LD_INT 1
14121: DEC
14122: ST_TO_ADDR
14123: LD_VAR 0 18
14127: PUSH
14128: FOR_TO
14129: IFFALSE 14287
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14131: LD_VAR 0 18
14135: PUSH
14136: LD_VAR 0 13
14140: ARRAY
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: CALL_OW 257
14150: PUSH
14151: LD_INT 3
14153: EQUAL
14154: PUSH
14155: LD_VAR 0 18
14159: PUSH
14160: LD_VAR 0 13
14164: ARRAY
14165: PUSH
14166: LD_INT 3
14168: ARRAY
14169: PUSH
14170: LD_INT 1
14172: EQUAL
14173: AND
14174: IFFALSE 14285
// begin if not personel [ i ] [ 2 ] then
14176: LD_VAR 0 18
14180: PUSH
14181: LD_VAR 0 13
14185: ARRAY
14186: PUSH
14187: LD_INT 2
14189: ARRAY
14190: NOT
14191: IFFALSE 14251
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
14193: LD_ADDR_VAR 0 18
14197: PUSH
14198: LD_VAR 0 18
14202: PPUSH
14203: LD_VAR 0 13
14207: PUSH
14208: LD_VAR 0 18
14212: PUSH
14213: LD_VAR 0 13
14217: ARRAY
14218: PUSH
14219: LD_INT 1
14221: MINUS
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: LD_VAR 0 34
14231: PUSH
14232: LD_INT 1
14234: PPUSH
14235: LD_VAR 0 34
14239: PPUSH
14240: CALL_OW 12
14244: ARRAY
14245: PPUSH
14246: CALL 26168 0 3
14250: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14251: LD_VAR 0 18
14255: PUSH
14256: LD_VAR 0 13
14260: ARRAY
14261: PUSH
14262: LD_INT 1
14264: ARRAY
14265: PPUSH
14266: LD_VAR 0 18
14270: PUSH
14271: LD_VAR 0 13
14275: ARRAY
14276: PUSH
14277: LD_INT 2
14279: ARRAY
14280: PPUSH
14281: CALL_OW 120
// end ;
14285: GO 14128
14287: POP
14288: POP
// for i := 1 to personel do
14289: LD_ADDR_VAR 0 13
14293: PUSH
14294: DOUBLE
14295: LD_INT 1
14297: DEC
14298: ST_TO_ADDR
14299: LD_VAR 0 18
14303: PUSH
14304: FOR_TO
14305: IFFALSE 14346
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14307: LD_ADDR_VAR 0 22
14311: PUSH
14312: LD_VAR 0 22
14316: PUSH
14317: LD_VAR 0 18
14321: PUSH
14322: LD_VAR 0 13
14326: ARRAY
14327: PPUSH
14328: LD_INT 25
14330: PUSH
14331: LD_INT 4
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PPUSH
14338: CALL_OW 72
14342: ADD
14343: ST_TO_ADDR
14344: GO 14304
14346: POP
14347: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14348: LD_VAR 0 22
14352: PUSH
14353: LD_VAR 0 4
14357: PPUSH
14358: LD_INT 22
14360: PUSH
14361: LD_VAR 0 1
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 1
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 3
14382: PUSH
14383: LD_INT 24
14385: PUSH
14386: LD_INT 1000
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 70
14406: AND
14407: IFFALSE 14924
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14409: LD_ADDR_VAR 0 39
14413: PUSH
14414: LD_VAR 0 4
14418: PPUSH
14419: LD_INT 22
14421: PUSH
14422: LD_VAR 0 1
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 21
14433: PUSH
14434: LD_INT 1
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 3
14443: PUSH
14444: LD_INT 24
14446: PUSH
14447: LD_INT 1000
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: PPUSH
14463: CALL_OW 70
14467: PUSH
14468: FOR_IN
14469: IFFALSE 14920
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14471: LD_VAR 0 39
14475: PPUSH
14476: LD_VAR 0 5
14480: PPUSH
14481: CALL_OW 299
14485: PUSH
14486: LD_INT 5
14488: LESS
14489: IFFALSE 14697
// for i := 1 to personel do
14491: LD_ADDR_VAR 0 13
14495: PUSH
14496: DOUBLE
14497: LD_INT 1
14499: DEC
14500: ST_TO_ADDR
14501: LD_VAR 0 18
14505: PUSH
14506: FOR_TO
14507: IFFALSE 14695
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14509: LD_VAR 0 18
14513: PUSH
14514: LD_VAR 0 13
14518: ARRAY
14519: PUSH
14520: LD_INT 1
14522: ARRAY
14523: PPUSH
14524: CALL_OW 257
14528: PUSH
14529: LD_INT 4
14531: EQUAL
14532: PUSH
14533: LD_VAR 0 18
14537: PUSH
14538: LD_VAR 0 13
14542: ARRAY
14543: PUSH
14544: LD_INT 3
14546: ARRAY
14547: PUSH
14548: LD_INT 1
14550: EQUAL
14551: AND
14552: IFFALSE 14693
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14554: LD_VAR 0 18
14558: PUSH
14559: LD_VAR 0 13
14563: ARRAY
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: PPUSH
14569: CALL_OW 437
14573: IFFALSE 14629
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14575: LD_VAR 0 18
14579: PUSH
14580: LD_VAR 0 13
14584: ARRAY
14585: PUSH
14586: LD_INT 1
14588: ARRAY
14589: PPUSH
14590: CALL_OW 437
14594: PUSH
14595: LD_INT 1
14597: ARRAY
14598: PUSH
14599: LD_INT 1
14601: ARRAY
14602: PUSH
14603: LD_STRING e
14605: EQUAL
14606: IFFALSE 14629
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14608: LD_VAR 0 18
14612: PUSH
14613: LD_VAR 0 13
14617: ARRAY
14618: PUSH
14619: LD_INT 1
14621: ARRAY
14622: PPUSH
14623: EMPTY
14624: PPUSH
14625: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14629: LD_VAR 0 18
14633: PUSH
14634: LD_VAR 0 13
14638: ARRAY
14639: PUSH
14640: LD_INT 1
14642: ARRAY
14643: PPUSH
14644: CALL_OW 310
14648: IFFALSE 14669
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14650: LD_VAR 0 18
14654: PUSH
14655: LD_VAR 0 13
14659: ARRAY
14660: PUSH
14661: LD_INT 1
14663: ARRAY
14664: PPUSH
14665: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14669: LD_VAR 0 18
14673: PUSH
14674: LD_VAR 0 13
14678: ARRAY
14679: PUSH
14680: LD_INT 1
14682: ARRAY
14683: PPUSH
14684: LD_VAR 0 39
14688: PPUSH
14689: CALL_OW 188
// end ;
14693: GO 14506
14695: POP
14696: POP
// if GetLives ( damageUnit ) < 250 then
14697: LD_VAR 0 39
14701: PPUSH
14702: CALL_OW 256
14706: PUSH
14707: LD_INT 250
14709: LESS
14710: IFFALSE 14918
// for i := 1 to personel do
14712: LD_ADDR_VAR 0 13
14716: PUSH
14717: DOUBLE
14718: LD_INT 1
14720: DEC
14721: ST_TO_ADDR
14722: LD_VAR 0 18
14726: PUSH
14727: FOR_TO
14728: IFFALSE 14916
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14730: LD_VAR 0 18
14734: PUSH
14735: LD_VAR 0 13
14739: ARRAY
14740: PUSH
14741: LD_INT 1
14743: ARRAY
14744: PPUSH
14745: CALL_OW 257
14749: PUSH
14750: LD_INT 4
14752: EQUAL
14753: PUSH
14754: LD_VAR 0 18
14758: PUSH
14759: LD_VAR 0 13
14763: ARRAY
14764: PUSH
14765: LD_INT 3
14767: ARRAY
14768: PUSH
14769: LD_INT 1
14771: EQUAL
14772: AND
14773: IFFALSE 14914
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14775: LD_VAR 0 18
14779: PUSH
14780: LD_VAR 0 13
14784: ARRAY
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: CALL_OW 437
14794: IFFALSE 14850
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14796: LD_VAR 0 18
14800: PUSH
14801: LD_VAR 0 13
14805: ARRAY
14806: PUSH
14807: LD_INT 1
14809: ARRAY
14810: PPUSH
14811: CALL_OW 437
14815: PUSH
14816: LD_INT 1
14818: ARRAY
14819: PUSH
14820: LD_INT 1
14822: ARRAY
14823: PUSH
14824: LD_STRING e
14826: EQUAL
14827: IFFALSE 14850
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14829: LD_VAR 0 18
14833: PUSH
14834: LD_VAR 0 13
14838: ARRAY
14839: PUSH
14840: LD_INT 1
14842: ARRAY
14843: PPUSH
14844: EMPTY
14845: PPUSH
14846: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14850: LD_VAR 0 18
14854: PUSH
14855: LD_VAR 0 13
14859: ARRAY
14860: PUSH
14861: LD_INT 1
14863: ARRAY
14864: PPUSH
14865: CALL_OW 310
14869: IFFALSE 14890
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14871: LD_VAR 0 18
14875: PUSH
14876: LD_VAR 0 13
14880: ARRAY
14881: PUSH
14882: LD_INT 1
14884: ARRAY
14885: PPUSH
14886: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14890: LD_VAR 0 18
14894: PUSH
14895: LD_VAR 0 13
14899: ARRAY
14900: PUSH
14901: LD_INT 1
14903: ARRAY
14904: PPUSH
14905: LD_VAR 0 39
14909: PPUSH
14910: CALL_OW 188
// end ;
14914: GO 14727
14916: POP
14917: POP
// end ;
14918: GO 14468
14920: POP
14921: POP
// end else
14922: GO 15129
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14924: LD_VAR 0 22
14928: PUSH
14929: LD_VAR 0 22
14933: PPUSH
14934: LD_INT 56
14936: PUSH
14937: EMPTY
14938: LIST
14939: PPUSH
14940: CALL_OW 72
14944: AND
14945: PUSH
14946: LD_VAR 0 35
14950: AND
14951: IFFALSE 15129
// for i := 1 to personel do
14953: LD_ADDR_VAR 0 13
14957: PUSH
14958: DOUBLE
14959: LD_INT 1
14961: DEC
14962: ST_TO_ADDR
14963: LD_VAR 0 18
14967: PUSH
14968: FOR_TO
14969: IFFALSE 15127
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14971: LD_VAR 0 18
14975: PUSH
14976: LD_VAR 0 13
14980: ARRAY
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PPUSH
14986: CALL_OW 257
14990: PUSH
14991: LD_INT 4
14993: EQUAL
14994: PUSH
14995: LD_VAR 0 18
14999: PUSH
15000: LD_VAR 0 13
15004: ARRAY
15005: PUSH
15006: LD_INT 3
15008: ARRAY
15009: PUSH
15010: LD_INT 1
15012: EQUAL
15013: AND
15014: IFFALSE 15125
// begin if not personel [ i ] [ 2 ] then
15016: LD_VAR 0 18
15020: PUSH
15021: LD_VAR 0 13
15025: ARRAY
15026: PUSH
15027: LD_INT 2
15029: ARRAY
15030: NOT
15031: IFFALSE 15091
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
15033: LD_ADDR_VAR 0 18
15037: PUSH
15038: LD_VAR 0 18
15042: PPUSH
15043: LD_VAR 0 13
15047: PUSH
15048: LD_VAR 0 18
15052: PUSH
15053: LD_VAR 0 13
15057: ARRAY
15058: PUSH
15059: LD_INT 1
15061: MINUS
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PPUSH
15067: LD_VAR 0 35
15071: PUSH
15072: LD_INT 1
15074: PPUSH
15075: LD_VAR 0 35
15079: PPUSH
15080: CALL_OW 12
15084: ARRAY
15085: PPUSH
15086: CALL 26168 0 3
15090: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15091: LD_VAR 0 18
15095: PUSH
15096: LD_VAR 0 13
15100: ARRAY
15101: PUSH
15102: LD_INT 1
15104: ARRAY
15105: PPUSH
15106: LD_VAR 0 18
15110: PUSH
15111: LD_VAR 0 13
15115: ARRAY
15116: PUSH
15117: LD_INT 2
15119: ARRAY
15120: PPUSH
15121: CALL_OW 120
// end ;
15125: GO 14968
15127: POP
15128: POP
// wait ( 0 0$01 ) ;
15129: LD_INT 35
15131: PPUSH
15132: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
15136: LD_VAR 0 24
15140: PUSH
15141: LD_VAR 0 8
15145: LESS
15146: PUSH
15147: LD_VAR 0 34
15151: AND
15152: IFFALSE 15398
// begin tmp = vehiclesAmount - vehicles ;
15154: LD_ADDR_VAR 0 15
15158: PUSH
15159: LD_VAR 0 8
15163: PUSH
15164: LD_VAR 0 24
15168: MINUS
15169: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
15170: LD_ADDR_VAR 0 31
15174: PUSH
15175: LD_VAR 0 1
15179: PPUSH
15180: LD_VAR 0 2
15184: PPUSH
15185: CALL 9218 0 2
15189: ST_TO_ADDR
// for i := 1 to tmp do
15190: LD_ADDR_VAR 0 13
15194: PUSH
15195: DOUBLE
15196: LD_INT 1
15198: DEC
15199: ST_TO_ADDR
15200: LD_VAR 0 15
15204: PUSH
15205: FOR_TO
15206: IFFALSE 15394
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
15208: LD_ADDR_VAR 0 15
15212: PUSH
15213: LD_VAR 0 31
15217: PUSH
15218: LD_INT 1
15220: PPUSH
15221: LD_VAR 0 31
15225: PPUSH
15226: CALL_OW 12
15230: ARRAY
15231: ST_TO_ADDR
// if tmp then
15232: LD_VAR 0 15
15236: IFFALSE 15392
// begin if tmp in [ 34 , 14 , 71 ] then
15238: LD_VAR 0 15
15242: PUSH
15243: LD_INT 34
15245: PUSH
15246: LD_INT 14
15248: PUSH
15249: LD_INT 71
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: LIST
15256: IN
15257: IFFALSE 15295
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15259: LD_ADDR_VAR 0 32
15263: PUSH
15264: LD_INT 4
15266: PUSH
15267: EMPTY
15268: LIST
15269: PUSH
15270: LD_INT 14
15272: PUSH
15273: EMPTY
15274: LIST
15275: PUSH
15276: LD_INT 24
15278: PUSH
15279: EMPTY
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: PUSH
15287: LD_VAR 0 2
15291: ARRAY
15292: ST_TO_ADDR
15293: GO 15349
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15295: LD_ADDR_VAR 0 32
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: LD_INT 3
15305: PUSH
15306: LD_INT 4
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 14
15316: PUSH
15317: EMPTY
15318: LIST
15319: PUSH
15320: LD_INT 21
15322: PUSH
15323: LD_INT 23
15325: PUSH
15326: LD_INT 24
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: LD_VAR 0 2
15347: ARRAY
15348: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15349: LD_VAR 0 34
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: LD_VAR 0 32
15362: PUSH
15363: LD_INT 1
15365: PPUSH
15366: LD_VAR 0 32
15370: PPUSH
15371: CALL_OW 12
15375: ARRAY
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: LD_VAR 0 15
15387: PPUSH
15388: CALL_OW 185
// end ; end ;
15392: GO 15205
15394: POP
15395: POP
// end else
15396: GO 15411
// ComCancel ( factory [ 1 ] ) ;
15398: LD_VAR 0 34
15402: PUSH
15403: LD_INT 1
15405: ARRAY
15406: PPUSH
15407: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15411: LD_ADDR_VAR 0 23
15415: PUSH
15416: LD_VAR 0 4
15420: PPUSH
15421: LD_INT 22
15423: PUSH
15424: LD_VAR 0 1
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 21
15435: PUSH
15436: LD_INT 2
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 50
15445: PUSH
15446: EMPTY
15447: LIST
15448: PUSH
15449: LD_INT 3
15451: PUSH
15452: LD_INT 2
15454: PUSH
15455: LD_INT 31
15457: PUSH
15458: LD_INT 31
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 34
15467: PUSH
15468: LD_INT 12
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 34
15477: PUSH
15478: LD_INT 51
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 34
15487: PUSH
15488: LD_INT 32
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: PPUSH
15512: CALL_OW 70
15516: PUSH
15517: LD_EXP 53
15521: DIFF
15522: PUSH
15523: FOR_IN
15524: IFFALSE 15687
// begin vehicleInList = false ;
15526: LD_ADDR_VAR 0 25
15530: PUSH
15531: LD_INT 0
15533: ST_TO_ADDR
// for i := 1 to vehicles do
15534: LD_ADDR_VAR 0 13
15538: PUSH
15539: DOUBLE
15540: LD_INT 1
15542: DEC
15543: ST_TO_ADDR
15544: LD_VAR 0 24
15548: PUSH
15549: FOR_TO
15550: IFFALSE 15580
// begin if vehicle in vehicles [ i ] then
15552: LD_VAR 0 23
15556: PUSH
15557: LD_VAR 0 24
15561: PUSH
15562: LD_VAR 0 13
15566: ARRAY
15567: IN
15568: IFFALSE 15578
// vehicleInList = true ;
15570: LD_ADDR_VAR 0 25
15574: PUSH
15575: LD_INT 1
15577: ST_TO_ADDR
// end ;
15578: GO 15549
15580: POP
15581: POP
// if not vehicleInList then
15582: LD_VAR 0 25
15586: NOT
15587: IFFALSE 15685
// if vehicles < vehiclesToAttackAmount then
15589: LD_VAR 0 24
15593: PUSH
15594: LD_VAR 0 10
15598: LESS
15599: IFFALSE 15644
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15601: LD_ADDR_VAR 0 24
15605: PUSH
15606: LD_VAR 0 24
15610: PUSH
15611: LD_VAR 0 23
15615: PUSH
15616: LD_VAR 0 23
15620: PPUSH
15621: CALL_OW 313
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: PUSH
15630: LD_INT 3
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: LIST
15637: PUSH
15638: EMPTY
15639: LIST
15640: ADD
15641: ST_TO_ADDR
15642: GO 15685
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15644: LD_ADDR_VAR 0 24
15648: PUSH
15649: LD_VAR 0 24
15653: PUSH
15654: LD_VAR 0 23
15658: PUSH
15659: LD_VAR 0 23
15663: PPUSH
15664: CALL_OW 313
15668: PUSH
15669: LD_INT 1
15671: ARRAY
15672: PUSH
15673: LD_INT 2
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: LIST
15680: PUSH
15681: EMPTY
15682: LIST
15683: ADD
15684: ST_TO_ADDR
// end ;
15685: GO 15523
15687: POP
15688: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15689: LD_ADDR_VAR 0 41
15693: PUSH
15694: LD_INT 81
15696: PUSH
15697: LD_VAR 0 1
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 69
15710: PUSH
15711: FOR_IN
15712: IFFALSE 16194
// begin offensiveUnits = [ ] ;
15714: LD_ADDR_VAR 0 27
15718: PUSH
15719: EMPTY
15720: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
15721: LD_ADDR_VAR 0 28
15725: PUSH
15726: LD_INT 0
15728: ST_TO_ADDR
// for i := 1 to vehicles do
15729: LD_ADDR_VAR 0 13
15733: PUSH
15734: DOUBLE
15735: LD_INT 1
15737: DEC
15738: ST_TO_ADDR
15739: LD_VAR 0 24
15743: PUSH
15744: FOR_TO
15745: IFFALSE 15926
// if vehicles [ i ] [ 3 ] = 3 then
15747: LD_VAR 0 24
15751: PUSH
15752: LD_VAR 0 13
15756: ARRAY
15757: PUSH
15758: LD_INT 3
15760: ARRAY
15761: PUSH
15762: LD_INT 3
15764: EQUAL
15765: IFFALSE 15924
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
15767: LD_VAR 0 24
15771: PUSH
15772: LD_VAR 0 13
15776: ARRAY
15777: PUSH
15778: LD_INT 1
15780: ARRAY
15781: PPUSH
15782: CALL_OW 256
15786: PUSH
15787: LD_INT 650
15789: GREATER
15790: IFFALSE 15806
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
15792: LD_ADDR_VAR 0 28
15796: PUSH
15797: LD_VAR 0 28
15801: PUSH
15802: LD_INT 1
15804: PLUS
15805: ST_TO_ADDR
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15806: LD_ADDR_VAR 0 27
15810: PUSH
15811: LD_VAR 0 27
15815: PUSH
15816: LD_VAR 0 24
15820: PUSH
15821: LD_VAR 0 13
15825: ARRAY
15826: PUSH
15827: LD_INT 1
15829: ARRAY
15830: ADD
15831: ST_TO_ADDR
// for j = 1 to personel do
15832: LD_ADDR_VAR 0 14
15836: PUSH
15837: DOUBLE
15838: LD_INT 1
15840: DEC
15841: ST_TO_ADDR
15842: LD_VAR 0 18
15846: PUSH
15847: FOR_TO
15848: IFFALSE 15922
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15850: LD_VAR 0 18
15854: PUSH
15855: LD_VAR 0 14
15859: ARRAY
15860: PUSH
15861: LD_INT 1
15863: ARRAY
15864: PUSH
15865: LD_VAR 0 24
15869: PUSH
15870: LD_VAR 0 13
15874: ARRAY
15875: PUSH
15876: LD_INT 2
15878: ARRAY
15879: EQUAL
15880: IFFALSE 15920
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
15882: LD_ADDR_VAR 0 18
15886: PUSH
15887: LD_VAR 0 18
15891: PPUSH
15892: LD_VAR 0 14
15896: PUSH
15897: LD_VAR 0 18
15901: PUSH
15902: LD_VAR 0 14
15906: ARRAY
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PPUSH
15912: LD_INT 3
15914: PPUSH
15915: CALL 26168 0 3
15919: ST_TO_ADDR
15920: GO 15847
15922: POP
15923: POP
// end ;
15924: GO 15744
15926: POP
15927: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
15928: LD_VAR 0 10
15932: PUSH
15933: LD_VAR 0 28
15937: LESSEQUAL
15938: IFFALSE 16192
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , offensiveUnits [ 1 ] ) ;
15940: LD_ADDR_VAR 0 29
15944: PUSH
15945: LD_INT 81
15947: PUSH
15948: LD_INT 2
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PPUSH
15955: CALL_OW 69
15959: PPUSH
15960: LD_VAR 0 27
15964: PUSH
15965: LD_INT 1
15967: ARRAY
15968: PPUSH
15969: CALL_OW 74
15973: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 2 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ 1 ] ) ;
15974: LD_ADDR_VAR 0 30
15978: PUSH
15979: LD_INT 81
15981: PUSH
15982: LD_INT 2
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 2
15991: PUSH
15992: LD_INT 59
15994: PUSH
15995: EMPTY
15996: LIST
15997: PUSH
15998: LD_INT 21
16000: PUSH
16001: LD_INT 1
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 21
16010: PUSH
16011: LD_INT 2
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: EMPTY
16029: LIST
16030: PPUSH
16031: CALL_OW 69
16035: PPUSH
16036: LD_VAR 0 27
16040: PUSH
16041: LD_INT 1
16043: ARRAY
16044: PPUSH
16045: CALL_OW 74
16049: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ 1 ] , target1 ) + 8 < GetDistUnits ( offensiveUnits [ 1 ] , target2 ) then
16050: LD_VAR 0 27
16054: PUSH
16055: LD_INT 1
16057: ARRAY
16058: PPUSH
16059: LD_VAR 0 29
16063: PPUSH
16064: CALL_OW 296
16068: PUSH
16069: LD_INT 8
16071: PLUS
16072: PUSH
16073: LD_VAR 0 27
16077: PUSH
16078: LD_INT 1
16080: ARRAY
16081: PPUSH
16082: LD_VAR 0 30
16086: PPUSH
16087: CALL_OW 296
16091: LESS
16092: IFFALSE 16128
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target1 ) else
16094: LD_VAR 0 27
16098: PPUSH
16099: LD_INT 3
16101: PUSH
16102: LD_INT 60
16104: PUSH
16105: EMPTY
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 72
16116: PPUSH
16117: LD_VAR 0 29
16121: PPUSH
16122: CALL_OW 115
16126: GO 16160
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target2 ) ;
16128: LD_VAR 0 27
16132: PPUSH
16133: LD_INT 3
16135: PUSH
16136: LD_INT 60
16138: PUSH
16139: EMPTY
16140: LIST
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PPUSH
16146: CALL_OW 72
16150: PPUSH
16151: LD_VAR 0 30
16155: PPUSH
16156: CALL_OW 115
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16160: LD_VAR 0 27
16164: PPUSH
16165: LD_INT 3
16167: PUSH
16168: LD_INT 60
16170: PUSH
16171: EMPTY
16172: LIST
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PPUSH
16178: CALL_OW 72
16182: PPUSH
16183: LD_VAR 0 41
16187: PPUSH
16188: CALL_OW 175
// end ; end ;
16192: GO 15711
16194: POP
16195: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16196: LD_ADDR_VAR 0 41
16200: PUSH
16201: LD_VAR 0 7
16205: PPUSH
16206: LD_INT 81
16208: PUSH
16209: LD_VAR 0 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PPUSH
16218: CALL_OW 70
16222: PUSH
16223: FOR_IN
16224: IFFALSE 16403
// begin defenceUnits = [ ] ;
16226: LD_ADDR_VAR 0 26
16230: PUSH
16231: EMPTY
16232: ST_TO_ADDR
// for i := 1 to personel do
16233: LD_ADDR_VAR 0 13
16237: PUSH
16238: DOUBLE
16239: LD_INT 1
16241: DEC
16242: ST_TO_ADDR
16243: LD_VAR 0 18
16247: PUSH
16248: FOR_TO
16249: IFFALSE 16299
// if personel [ i ] [ 3 ] = 2 then
16251: LD_VAR 0 18
16255: PUSH
16256: LD_VAR 0 13
16260: ARRAY
16261: PUSH
16262: LD_INT 3
16264: ARRAY
16265: PUSH
16266: LD_INT 2
16268: EQUAL
16269: IFFALSE 16297
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16271: LD_ADDR_VAR 0 26
16275: PUSH
16276: LD_VAR 0 26
16280: PUSH
16281: LD_VAR 0 18
16285: PUSH
16286: LD_VAR 0 13
16290: ARRAY
16291: PUSH
16292: LD_INT 1
16294: ARRAY
16295: ADD
16296: ST_TO_ADDR
16297: GO 16248
16299: POP
16300: POP
// for i := 1 to vehicles do
16301: LD_ADDR_VAR 0 13
16305: PUSH
16306: DOUBLE
16307: LD_INT 1
16309: DEC
16310: ST_TO_ADDR
16311: LD_VAR 0 24
16315: PUSH
16316: FOR_TO
16317: IFFALSE 16367
// if vehicles [ i ] [ 3 ] = 2 then
16319: LD_VAR 0 24
16323: PUSH
16324: LD_VAR 0 13
16328: ARRAY
16329: PUSH
16330: LD_INT 3
16332: ARRAY
16333: PUSH
16334: LD_INT 2
16336: EQUAL
16337: IFFALSE 16365
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16339: LD_ADDR_VAR 0 26
16343: PUSH
16344: LD_VAR 0 26
16348: PUSH
16349: LD_VAR 0 24
16353: PUSH
16354: LD_VAR 0 13
16358: ARRAY
16359: PUSH
16360: LD_INT 1
16362: ARRAY
16363: ADD
16364: ST_TO_ADDR
16365: GO 16316
16367: POP
16368: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16369: LD_VAR 0 26
16373: PPUSH
16374: LD_INT 3
16376: PUSH
16377: LD_INT 60
16379: PUSH
16380: EMPTY
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PPUSH
16387: CALL_OW 72
16391: PPUSH
16392: LD_VAR 0 41
16396: PPUSH
16397: CALL_OW 175
// end ;
16401: GO 16223
16403: POP
16404: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16405: LD_ADDR_VAR 0 42
16409: PUSH
16410: LD_INT 22
16412: PUSH
16413: LD_VAR 0 1
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 2
16424: PUSH
16425: LD_INT 30
16427: PUSH
16428: LD_INT 31
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 30
16437: PUSH
16438: LD_INT 32
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 30
16447: PUSH
16448: LD_INT 33
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 30
16457: PUSH
16458: LD_INT 4
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 30
16467: PUSH
16468: LD_INT 5
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PPUSH
16487: CALL_OW 69
16491: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16492: LD_ADDR_VAR 0 43
16496: PUSH
16497: LD_INT 81
16499: PUSH
16500: LD_VAR 0 1
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 21
16511: PUSH
16512: LD_INT 3
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 58
16521: PUSH
16522: EMPTY
16523: LIST
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: PPUSH
16530: CALL_OW 69
16534: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16535: LD_VAR 0 42
16539: PUSH
16540: LD_VAR 0 43
16544: AND
16545: IFFALSE 16615
// for i in attackBuildings do
16547: LD_ADDR_VAR 0 13
16551: PUSH
16552: LD_VAR 0 42
16556: PUSH
16557: FOR_IN
16558: IFFALSE 16613
// for j in enemyBuildings do
16560: LD_ADDR_VAR 0 14
16564: PUSH
16565: LD_VAR 0 43
16569: PUSH
16570: FOR_IN
16571: IFFALSE 16609
// if GetDistUnits ( i , j ) < 12 then
16573: LD_VAR 0 13
16577: PPUSH
16578: LD_VAR 0 14
16582: PPUSH
16583: CALL_OW 296
16587: PUSH
16588: LD_INT 12
16590: LESS
16591: IFFALSE 16607
// ComAttackUnit ( i , j ) ;
16593: LD_VAR 0 13
16597: PPUSH
16598: LD_VAR 0 14
16602: PPUSH
16603: CALL_OW 115
16607: GO 16570
16609: POP
16610: POP
16611: GO 16557
16613: POP
16614: POP
// until not personel or arabianCanExitMap ;
16615: LD_VAR 0 18
16619: NOT
16620: PUSH
16621: LD_EXP 21
16625: OR
16626: IFFALSE 11234
// end ;
16628: LD_VAR 0 12
16632: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16633: LD_EXP 53
16637: NOT
16638: IFFALSE 16672
16640: GO 16642
16642: DISABLE
// begin enable ;
16643: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16644: LD_EXP 37
16648: PPUSH
16649: LD_INT 42
16651: PPUSH
16652: CALL 2676 0 2
// arabLeftExit = true ;
16656: LD_ADDR_EXP 56
16660: PUSH
16661: LD_INT 1
16663: ST_TO_ADDR
// arabRightExit = false ;
16664: LD_ADDR_EXP 57
16668: PUSH
16669: LD_INT 0
16671: ST_TO_ADDR
// end ;
16672: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base ;
16673: LD_EXP 53
16677: PUSH
16678: LD_EXP 56
16682: AND
16683: IFFALSE 16878
16685: GO 16687
16687: DISABLE
16688: LD_INT 0
16690: PPUSH
16691: PPUSH
16692: PPUSH
// begin enable ;
16693: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16694: LD_EXP 53
16698: PPUSH
16699: LD_INT 71
16701: PPUSH
16702: LD_INT 137
16704: PPUSH
16705: CALL_OW 114
// for veh in arabianPatrolVehicles do
16709: LD_ADDR_VAR 0 1
16713: PUSH
16714: LD_EXP 53
16718: PUSH
16719: FOR_IN
16720: IFFALSE 16876
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16722: LD_VAR 0 1
16726: PPUSH
16727: LD_INT 43
16729: PPUSH
16730: CALL_OW 308
16734: IFFALSE 16874
// begin if arabianPatrolVehicles then
16736: LD_EXP 53
16740: IFFALSE 16769
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16742: LD_VAR 0 1
16746: PPUSH
16747: CALL_OW 313
16751: PUSH
16752: LD_INT 1
16754: ARRAY
16755: PPUSH
16756: CALL_OW 64
// RemoveUnit ( veh ) ;
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 64
// end ; x = 0 ;
16769: LD_ADDR_VAR 0 2
16773: PUSH
16774: LD_INT 0
16776: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16777: LD_ADDR_VAR 0 1
16781: PUSH
16782: LD_EXP 53
16786: PUSH
16787: FOR_IN
16788: IFFALSE 16818
// if not IsPlaced ( veh ) then
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 305
16799: NOT
16800: IFFALSE 16816
// x = x + 1 ;
16802: LD_ADDR_VAR 0 2
16806: PUSH
16807: LD_VAR 0 2
16811: PUSH
16812: LD_INT 1
16814: PLUS
16815: ST_TO_ADDR
16816: GO 16787
16818: POP
16819: POP
// if x = arabianPatrolVehicles then
16820: LD_VAR 0 2
16824: PUSH
16825: LD_EXP 53
16829: EQUAL
16830: IFFALSE 16874
// begin arabLeftExit = false ;
16832: LD_ADDR_EXP 56
16836: PUSH
16837: LD_INT 0
16839: ST_TO_ADDR
// arabRightExit = true ;
16840: LD_ADDR_EXP 57
16844: PUSH
16845: LD_INT 1
16847: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16848: LD_INT 4200
16850: PPUSH
16851: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16855: LD_ADDR_EXP 53
16859: PUSH
16860: EMPTY
16861: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16862: LD_EXP 37
16866: PPUSH
16867: LD_INT 43
16869: PPUSH
16870: CALL 2676 0 2
// end ; end ; end ;
16874: GO 16719
16876: POP
16877: POP
// end ;
16878: PPOPN 3
16880: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16881: LD_EXP 53
16885: PUSH
16886: LD_EXP 57
16890: AND
16891: IFFALSE 17086
16893: GO 16895
16895: DISABLE
16896: LD_INT 0
16898: PPUSH
16899: PPUSH
16900: PPUSH
// begin enable ;
16901: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16902: LD_EXP 53
16906: PPUSH
16907: LD_INT 184
16909: PPUSH
16910: LD_INT 134
16912: PPUSH
16913: CALL_OW 114
// for veh in arabianPatrolVehicles do
16917: LD_ADDR_VAR 0 1
16921: PUSH
16922: LD_EXP 53
16926: PUSH
16927: FOR_IN
16928: IFFALSE 17084
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16930: LD_VAR 0 1
16934: PPUSH
16935: LD_INT 42
16937: PPUSH
16938: CALL_OW 308
16942: IFFALSE 17082
// begin if arabianPatrolVehicles then
16944: LD_EXP 53
16948: IFFALSE 16977
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16950: LD_VAR 0 1
16954: PPUSH
16955: CALL_OW 313
16959: PUSH
16960: LD_INT 1
16962: ARRAY
16963: PPUSH
16964: CALL_OW 64
// RemoveUnit ( veh ) ;
16968: LD_VAR 0 1
16972: PPUSH
16973: CALL_OW 64
// end ; x = 0 ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: LD_INT 0
16984: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16985: LD_ADDR_VAR 0 1
16989: PUSH
16990: LD_EXP 53
16994: PUSH
16995: FOR_IN
16996: IFFALSE 17026
// if not IsPlaced ( veh ) then
16998: LD_VAR 0 1
17002: PPUSH
17003: CALL_OW 305
17007: NOT
17008: IFFALSE 17024
// x = x + 1 ;
17010: LD_ADDR_VAR 0 2
17014: PUSH
17015: LD_VAR 0 2
17019: PUSH
17020: LD_INT 1
17022: PLUS
17023: ST_TO_ADDR
17024: GO 16995
17026: POP
17027: POP
// if x = arabianPatrolVehicles then
17028: LD_VAR 0 2
17032: PUSH
17033: LD_EXP 53
17037: EQUAL
17038: IFFALSE 17082
// begin arabLeftExit = true ;
17040: LD_ADDR_EXP 56
17044: PUSH
17045: LD_INT 1
17047: ST_TO_ADDR
// arabRightExit = false ;
17048: LD_ADDR_EXP 57
17052: PUSH
17053: LD_INT 0
17055: ST_TO_ADDR
// wait ( 2 2$0 ) ;
17056: LD_INT 4200
17058: PPUSH
17059: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
17063: LD_ADDR_EXP 53
17067: PUSH
17068: EMPTY
17069: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
17070: LD_EXP 37
17074: PPUSH
17075: LD_INT 42
17077: PPUSH
17078: CALL 2676 0 2
// end ; end ; end ;
17082: GO 16927
17084: POP
17085: POP
// end ;
17086: PPOPN 3
17088: END
// every 6 6$0 trigger not arabianHovercrafts and not arabianCanExitMap do
17089: LD_EXP 54
17093: NOT
17094: PUSH
17095: LD_EXP 21
17099: NOT
17100: AND
17101: IFFALSE 17111
17103: GO 17105
17105: DISABLE
// begin enable ;
17106: ENABLE
// PrepareArabianHovercraft ;
17107: CALL 2835 0 0
// end ;
17111: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
17112: LD_EXP 54
17116: IFFALSE 17296
17118: GO 17120
17120: DISABLE
17121: LD_INT 0
17123: PPUSH
17124: PPUSH
// begin enable ;
17125: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
17126: LD_EXP 54
17130: PPUSH
17131: LD_INT 100
17133: PPUSH
17134: CALL_OW 240
// if not arabianCanExitMap then
17138: LD_EXP 21
17142: NOT
17143: IFFALSE 17281
// begin for i := 1 to arabianHovercraftsPath do
17145: LD_ADDR_VAR 0 1
17149: PUSH
17150: DOUBLE
17151: LD_INT 1
17153: DEC
17154: ST_TO_ADDR
17155: LD_EXP 39
17159: PUSH
17160: FOR_TO
17161: IFFALSE 17204
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
17163: LD_EXP 54
17167: PPUSH
17168: LD_EXP 39
17172: PUSH
17173: LD_VAR 0 1
17177: ARRAY
17178: PUSH
17179: LD_INT 1
17181: ARRAY
17182: PPUSH
17183: LD_EXP 39
17187: PUSH
17188: LD_VAR 0 1
17192: ARRAY
17193: PUSH
17194: LD_INT 2
17196: ARRAY
17197: PPUSH
17198: CALL_OW 174
17202: GO 17160
17204: POP
17205: POP
// x = arabianHovercraftsPath ;
17206: LD_ADDR_VAR 0 2
17210: PUSH
17211: LD_EXP 39
17215: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
17216: LD_EXP 54
17220: PPUSH
17221: LD_EXP 39
17225: PUSH
17226: LD_VAR 0 2
17230: ARRAY
17231: PUSH
17232: LD_INT 1
17234: ARRAY
17235: PPUSH
17236: LD_EXP 39
17240: PUSH
17241: LD_VAR 0 2
17245: ARRAY
17246: PUSH
17247: LD_INT 2
17249: ARRAY
17250: PPUSH
17251: CALL_OW 174
// x = x - 1 ;
17255: LD_ADDR_VAR 0 2
17259: PUSH
17260: LD_VAR 0 2
17264: PUSH
17265: LD_INT 1
17267: MINUS
17268: ST_TO_ADDR
// until x = 0 ;
17269: LD_VAR 0 2
17273: PUSH
17274: LD_INT 0
17276: EQUAL
17277: IFFALSE 17216
// end else
17279: GO 17296
// ComAgressiveMove ( arabianHovercrafts , 134 , 68 ) ;
17281: LD_EXP 54
17285: PPUSH
17286: LD_INT 134
17288: PPUSH
17289: LD_INT 68
17291: PPUSH
17292: CALL_OW 114
// end ;
17296: PPOPN 2
17298: END
// every 0 0$1 trigger arabianPatrolTroops do
17299: LD_EXP 55
17303: IFFALSE 17369
17305: GO 17307
17307: DISABLE
// begin enable ;
17308: ENABLE
// AddComAgressiveMove ( arabianPatrolTroops , 127 , 100 ) ;
17309: LD_EXP 55
17313: PPUSH
17314: LD_INT 127
17316: PPUSH
17317: LD_INT 100
17319: PPUSH
17320: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 141 , 133 ) ;
17324: LD_EXP 55
17328: PPUSH
17329: LD_INT 141
17331: PPUSH
17332: LD_INT 133
17334: PPUSH
17335: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 80 , 132 ) ;
17339: LD_EXP 55
17343: PPUSH
17344: LD_INT 80
17346: PPUSH
17347: LD_INT 132
17349: PPUSH
17350: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 174 , 122 ) ;
17354: LD_EXP 55
17358: PPUSH
17359: LD_INT 174
17361: PPUSH
17362: LD_INT 122
17364: PPUSH
17365: CALL_OW 174
// end ; end_of_file
17369: END
// export function Lose_Burlak ; begin
17370: LD_INT 0
17372: PPUSH
// YouLost ( Burlak ) ;
17373: LD_STRING Burlak
17375: PPUSH
17376: CALL_OW 104
// end ;
17380: LD_VAR 0 1
17384: RET
// export function Lose_Survive ; begin
17385: LD_INT 0
17387: PPUSH
// YouLost ( Survive ) ;
17388: LD_STRING Survive
17390: PPUSH
17391: CALL_OW 104
// end ;
17395: LD_VAR 0 1
17399: RET
// export function Lose_Surrender ; begin
17400: LD_INT 0
17402: PPUSH
// YouLost ( Surrender ) ;
17403: LD_STRING Surrender
17405: PPUSH
17406: CALL_OW 104
// end ; end_of_file
17410: LD_VAR 0 1
17414: RET
// every 0 0$1 do
17415: GO 17417
17417: DISABLE
// begin if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
17418: LD_EXP 24
17422: NOT
17423: PUSH
17424: LD_INT 22
17426: PPUSH
17427: LD_INT 22
17429: PUSH
17430: LD_INT 3
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 21
17439: PUSH
17440: LD_INT 2
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 50
17449: PUSH
17450: EMPTY
17451: LIST
17452: PUSH
17453: LD_INT 59
17455: PUSH
17456: EMPTY
17457: LIST
17458: PUSH
17459: LD_INT 2
17461: PUSH
17462: LD_INT 31
17464: PUSH
17465: LD_INT 22
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 31
17474: PUSH
17475: LD_INT 24
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 31
17484: PUSH
17485: LD_INT 14
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: PPUSH
17505: CALL_OW 70
17509: AND
17510: PUSH
17511: LD_INT 22
17513: PPUSH
17514: LD_INT 22
17516: PUSH
17517: LD_INT 3
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 21
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 23
17536: PUSH
17537: LD_INT 3
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 50
17546: PUSH
17547: EMPTY
17548: LIST
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: PPUSH
17556: CALL_OW 70
17560: AND
17561: IFFALSE 17570
// Query ( QVehicles ) ;
17563: LD_STRING QVehicles
17565: PPUSH
17566: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17570: LD_EXP 40
17574: PPUSH
17575: CALL_OW 310
17579: PPUSH
17580: LD_INT 22
17582: PPUSH
17583: CALL_OW 308
17587: PUSH
17588: LD_EXP 24
17592: NOT
17593: AND
17594: PUSH
17595: LD_INT 22
17597: PPUSH
17598: LD_INT 22
17600: PUSH
17601: LD_INT 3
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 21
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 59
17620: PUSH
17621: EMPTY
17622: LIST
17623: PUSH
17624: LD_INT 50
17626: PUSH
17627: EMPTY
17628: LIST
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: LD_INT 31
17635: PUSH
17636: LD_INT 22
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 31
17645: PUSH
17646: LD_INT 24
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 31
17655: PUSH
17656: LD_INT 14
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 70
17680: PUSH
17681: LD_INT 22
17683: PUSH
17684: LD_INT 3
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 21
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 23
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: LD_INT 25
17716: PUSH
17717: LD_INT 1
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 25
17726: PUSH
17727: LD_INT 2
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 25
17736: PUSH
17737: LD_INT 3
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 25
17746: PUSH
17747: LD_INT 4
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: PPUSH
17767: CALL_OW 69
17771: GREATEREQUAL
17772: AND
17773: IFFALSE 17779
// FinishMission ;
17775: CALL 18108 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17779: LD_EXP 40
17783: PPUSH
17784: CALL_OW 310
17788: PPUSH
17789: LD_INT 22
17791: PPUSH
17792: CALL_OW 308
17796: PUSH
17797: LD_EXP 24
17801: NOT
17802: AND
17803: PUSH
17804: LD_INT 22
17806: PPUSH
17807: LD_INT 22
17809: PUSH
17810: LD_INT 3
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 21
17819: PUSH
17820: LD_INT 2
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 59
17829: PUSH
17830: EMPTY
17831: LIST
17832: PUSH
17833: LD_INT 50
17835: PUSH
17836: EMPTY
17837: LIST
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: LD_INT 31
17844: PUSH
17845: LD_INT 22
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 31
17854: PUSH
17855: LD_INT 24
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 31
17864: PUSH
17865: LD_INT 14
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 70
17889: PUSH
17890: LD_INT 6
17892: GREATEREQUAL
17893: AND
17894: PUSH
17895: LD_INT 22
17897: PPUSH
17898: LD_INT 22
17900: PUSH
17901: LD_INT 3
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 21
17910: PUSH
17911: LD_INT 2
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 59
17920: PUSH
17921: EMPTY
17922: LIST
17923: PUSH
17924: LD_INT 50
17926: PUSH
17927: EMPTY
17928: LIST
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: LD_INT 31
17935: PUSH
17936: LD_INT 22
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 31
17945: PUSH
17946: LD_INT 24
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 31
17955: PUSH
17956: LD_INT 14
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 70
17980: PUSH
17981: LD_INT 22
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 21
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 23
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 2
18013: PUSH
18014: LD_INT 25
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 25
18026: PUSH
18027: LD_INT 2
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 25
18036: PUSH
18037: LD_INT 3
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 25
18046: PUSH
18047: LD_INT 4
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: PPUSH
18067: CALL_OW 69
18071: LESS
18072: AND
18073: IFFALSE 18099
// begin case Query ( QEndMission ) of 1 :
18075: LD_STRING QEndMission
18077: PPUSH
18078: CALL_OW 97
18082: PUSH
18083: LD_INT 1
18085: DOUBLE
18086: EQUAL
18087: IFTRUE 18091
18089: GO 18098
18091: POP
// FinishMission ; end ;
18092: CALL 18108 0 0
18096: GO 18099
18098: POP
// end ; wait ( 0 0$5 ) ;
18099: LD_INT 175
18101: PPUSH
18102: CALL_OW 67
// enable ;
18106: ENABLE
// end ;
18107: END
// function FinishMission ; var nearUnit ; begin
18108: LD_INT 0
18110: PPUSH
18111: PPUSH
// finishMissionBool = true ;
18112: LD_ADDR_EXP 24
18116: PUSH
18117: LD_INT 1
18119: ST_TO_ADDR
// if stevensDepot then
18120: LD_EXP 17
18124: IFFALSE 18293
// begin DialogueOn ;
18126: CALL_OW 6
// if IsOK ( Petrosyan ) then
18130: LD_EXP 44
18134: PPUSH
18135: CALL_OW 302
18139: IFFALSE 18155
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
18141: LD_EXP 44
18145: PPUSH
18146: LD_STRING DStevensLeftBehind-Pty-1
18148: PPUSH
18149: CALL_OW 88
18153: GO 18269
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
18155: LD_INT 22
18157: PUSH
18158: LD_INT 3
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 21
18167: PUSH
18168: LD_INT 1
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 26
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 50
18187: PUSH
18188: EMPTY
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: LD_INT 25
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 25
18206: PUSH
18207: LD_INT 2
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 25
18216: PUSH
18217: LD_INT 3
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 25
18226: PUSH
18227: LD_INT 4
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: PPUSH
18248: CALL_OW 69
18252: PPUSH
18253: LD_STRING StevensLeftBehind-RSol1-1
18255: PPUSH
18256: LD_STRING 
18258: PPUSH
18259: LD_INT 0
18261: PPUSH
18262: LD_INT 1
18264: PPUSH
18265: CALL 8845 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
18269: LD_EXP 40
18273: PPUSH
18274: LD_STRING DStevensLeftBehind-Bur-1
18276: PPUSH
18277: CALL_OW 88
// DialogueOff ;
18281: CALL_OW 7
// stevensStatus = 1 ;
18285: LD_ADDR_EXP 2
18289: PUSH
18290: LD_INT 1
18292: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
18293: LD_EXP 14
18297: NOT
18298: PUSH
18299: LD_EXP 44
18303: PPUSH
18304: CALL_OW 302
18308: AND
18309: IFFALSE 18841
// begin PrepareStevens ( exit_rus ) ;
18311: LD_INT 22
18313: PPUSH
18314: CALL 20885 0 1
// wait ( 0 0$1.5 ) ;
18318: LD_INT 52
18320: PPUSH
18321: CALL_OW 67
// stevensPlaced = true ;
18325: LD_ADDR_EXP 14
18329: PUSH
18330: LD_INT 1
18332: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
18333: LD_ADDR_VAR 0 2
18337: PUSH
18338: LD_INT 22
18340: PUSH
18341: LD_INT 3
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 21
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 26
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 50
18370: PUSH
18371: EMPTY
18372: LIST
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: LD_INT 25
18379: PUSH
18380: LD_INT 1
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 25
18389: PUSH
18390: LD_INT 2
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 25
18399: PUSH
18400: LD_INT 3
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 25
18409: PUSH
18410: LD_INT 4
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: PPUSH
18436: LD_EXP 58
18440: PPUSH
18441: CALL_OW 74
18445: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
18446: LD_EXP 58
18450: PPUSH
18451: CALL_OW 87
// InGameOn ;
18455: CALL_OW 8
// wait ( 0 0$1.5 ) ;
18459: LD_INT 52
18461: PPUSH
18462: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18466: LD_EXP 58
18470: PPUSH
18471: LD_INT 6
18473: PPUSH
18474: CALL_OW 235
// DialogueOn ;
18478: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18482: LD_EXP 58
18486: PPUSH
18487: LD_STRING DStevens-Huck-1
18489: PPUSH
18490: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18494: LD_EXP 44
18498: PPUSH
18499: LD_STRING DStevens-Pty-1
18501: PPUSH
18502: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18506: LD_EXP 44
18510: PPUSH
18511: LD_STRING DStevens-Pty-1a
18513: PPUSH
18514: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18518: LD_EXP 58
18522: PPUSH
18523: LD_STRING DStevens-Huck-2
18525: PPUSH
18526: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18530: LD_EXP 44
18534: PPUSH
18535: LD_STRING DStevens-Pty-2
18537: PPUSH
18538: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18542: LD_EXP 58
18546: PPUSH
18547: LD_STRING DStevens-Huck-3
18549: PPUSH
18550: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18554: LD_EXP 44
18558: PPUSH
18559: LD_STRING DStevens-Pty-3
18561: PPUSH
18562: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18566: LD_EXP 58
18570: PPUSH
18571: LD_STRING DStevens-Huck-4
18573: PPUSH
18574: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18578: LD_EXP 44
18582: PPUSH
18583: LD_STRING DStevensBurlak-Pty-1
18585: PPUSH
18586: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18590: LD_EXP 40
18594: PPUSH
18595: LD_STRING DStevensBurlak-Bur-1
18597: PPUSH
18598: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18602: LD_EXP 44
18606: PPUSH
18607: LD_STRING DStevensBurlak-Pty-2
18609: PPUSH
18610: CALL_OW 88
// case Query ( QKill ) of 1 :
18614: LD_STRING QKill
18616: PPUSH
18617: CALL_OW 97
18621: PUSH
18622: LD_INT 1
18624: DOUBLE
18625: EQUAL
18626: IFTRUE 18630
18628: GO 18757
18630: POP
// begin stevensCanExitMap = true ;
18631: LD_ADDR_EXP 19
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// stevensFollow = false ;
18639: LD_ADDR_EXP 15
18643: PUSH
18644: LD_INT 0
18646: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18647: LD_EXP 40
18651: PPUSH
18652: LD_STRING DKill-1-Bur-1
18654: PPUSH
18655: CALL_OW 88
// if IsOK ( Gleb ) then
18659: LD_EXP 43
18663: PPUSH
18664: CALL_OW 302
18668: IFFALSE 18682
// Say ( Gleb , DKill-1-Glb-1 ) ;
18670: LD_EXP 43
18674: PPUSH
18675: LD_STRING DKill-1-Glb-1
18677: PPUSH
18678: CALL_OW 88
// DialogueOff ;
18682: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18686: LD_EXP 58
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 235
// stevensStatus = 0 ;
18698: LD_ADDR_EXP 2
18702: PUSH
18703: LD_INT 0
18705: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18706: LD_INT 22
18708: PUSH
18709: LD_INT 3
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PPUSH
18716: CALL_OW 69
18720: PPUSH
18721: LD_EXP 58
18725: PPUSH
18726: CALL_OW 115
// wait ( 0 0$1 ) ;
18730: LD_INT 35
18732: PPUSH
18733: CALL_OW 67
// until IsDead ( Stevens ) ;
18737: LD_EXP 58
18741: PPUSH
18742: CALL_OW 301
18746: IFFALSE 18706
// wait ( 0 0$1.5 ) ;
18748: LD_INT 52
18750: PPUSH
18751: CALL_OW 67
// end ; 2 :
18755: GO 18841
18757: LD_INT 2
18759: DOUBLE
18760: EQUAL
18761: IFTRUE 18765
18763: GO 18840
18765: POP
// begin stevensCanExitMap = true ;
18766: LD_ADDR_EXP 19
18770: PUSH
18771: LD_INT 1
18773: ST_TO_ADDR
// stevensWasInDepot = false ;
18774: LD_ADDR_EXP 18
18778: PUSH
18779: LD_INT 0
18781: ST_TO_ADDR
// stevensDepot = false ;
18782: LD_ADDR_EXP 17
18786: PUSH
18787: LD_INT 0
18789: ST_TO_ADDR
// stevensStatus = 1 ;
18790: LD_ADDR_EXP 2
18794: PUSH
18795: LD_INT 1
18797: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18798: LD_EXP 40
18802: PPUSH
18803: LD_STRING DKill-2-Bur-1
18805: PPUSH
18806: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18810: LD_EXP 44
18814: PPUSH
18815: LD_STRING DKill-2-Pty-1
18817: PPUSH
18818: CALL_OW 88
// DialogueOff ;
18822: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18826: LD_EXP 58
18830: PPUSH
18831: LD_INT 37
18833: PPUSH
18834: CALL_OW 113
// end ; end ;
18838: GO 18841
18840: POP
// end ; SetRewards ;
18841: CALL 18862 0 0
// SavePlayerCharacters ;
18845: CALL 19103 0 0
// SaveGlobalVariables ;
18849: CALL 19448 0 0
// YouWin ;
18853: CALL_OW 103
// end ;
18857: LD_VAR 0 1
18861: RET
// function SetRewards ; begin
18862: LD_INT 0
18864: PPUSH
// if fastBreakthrough then
18865: LD_EXP 23
18869: IFFALSE 18883
// AddMedal ( Time , 1 ) else
18871: LD_STRING Time
18873: PPUSH
18874: LD_INT 1
18876: PPUSH
18877: CALL_OW 101
18881: GO 18894
// AddMedal ( Time , - 1 ) ;
18883: LD_STRING Time
18885: PPUSH
18886: LD_INT 1
18888: NEG
18889: PPUSH
18890: CALL_OW 101
// if dial_tameApeBlocker then
18894: LD_EXP 10
18898: IFFALSE 18912
// AddMedal ( Apemen , 1 ) else
18900: LD_STRING Apemen
18902: PPUSH
18903: LD_INT 1
18905: PPUSH
18906: CALL_OW 101
18910: GO 18959
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18912: LD_EXP 10
18916: NOT
18917: PUSH
18918: LD_INT 1
18920: PPUSH
18921: LD_INT 3
18923: PPUSH
18924: CALL_OW 321
18928: PUSH
18929: LD_INT 1
18931: EQUAL
18932: AND
18933: IFFALSE 18948
// AddMedal ( Apemen , - 1 ) else
18935: LD_STRING Apemen
18937: PPUSH
18938: LD_INT 1
18940: NEG
18941: PPUSH
18942: CALL_OW 101
18946: GO 18959
// AddMedal ( Apemen , - 2 ) ;
18948: LD_STRING Apemen
18950: PPUSH
18951: LD_INT 2
18953: NEG
18954: PPUSH
18955: CALL_OW 101
// if not omarStatus then
18959: LD_EXP 1
18963: NOT
18964: IFFALSE 18978
// AddMedal ( Abdul , 1 ) else
18966: LD_STRING Abdul
18968: PPUSH
18969: LD_INT 1
18971: PPUSH
18972: CALL_OW 101
18976: GO 18989
// AddMedal ( Abdul , - 1 ) ;
18978: LD_STRING Abdul
18980: PPUSH
18981: LD_INT 1
18983: NEG
18984: PPUSH
18985: CALL_OW 101
// GiveMedals ( Main ) ;
18989: LD_STRING Main
18991: PPUSH
18992: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18996: LD_INT 22
18998: PUSH
18999: LD_INT 3
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 21
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 23
19018: PUSH
19019: LD_INT 3
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 50
19028: PUSH
19029: EMPTY
19030: LIST
19031: PUSH
19032: LD_INT 2
19034: PUSH
19035: LD_INT 25
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 25
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 25
19057: PUSH
19058: LD_INT 3
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 25
19067: PUSH
19068: LD_INT 4
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 69
19093: PPUSH
19094: CALL_OW 43
// end ;
19098: LD_VAR 0 1
19102: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
19103: LD_INT 0
19105: PPUSH
19106: PPUSH
19107: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19108: LD_EXP 40
19112: PPUSH
19113: LD_STRING Burlak
19115: PPUSH
19116: LD_INT 3
19118: PPUSH
19119: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
19123: LD_EXP 41
19127: PPUSH
19128: CALL_OW 310
19132: PPUSH
19133: LD_INT 22
19135: PPUSH
19136: CALL_OW 308
19140: IFFALSE 19157
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
19142: LD_EXP 41
19146: PPUSH
19147: LD_STRING Karamazov
19149: PPUSH
19150: LD_INT 3
19152: PPUSH
19153: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
19157: LD_EXP 42
19161: PPUSH
19162: CALL_OW 310
19166: PPUSH
19167: LD_INT 22
19169: PPUSH
19170: CALL_OW 308
19174: IFFALSE 19191
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
19176: LD_EXP 42
19180: PPUSH
19181: LD_STRING Petrovova
19183: PPUSH
19184: LD_INT 3
19186: PPUSH
19187: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
19191: LD_EXP 43
19195: PPUSH
19196: CALL_OW 310
19200: PPUSH
19201: LD_INT 22
19203: PPUSH
19204: CALL_OW 308
19208: IFFALSE 19225
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
19210: LD_EXP 43
19214: PPUSH
19215: LD_STRING Gleb
19217: PPUSH
19218: LD_INT 3
19220: PPUSH
19221: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
19225: LD_EXP 44
19229: PPUSH
19230: CALL_OW 310
19234: PPUSH
19235: LD_INT 22
19237: PPUSH
19238: CALL_OW 308
19242: IFFALSE 19259
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
19244: LD_EXP 44
19248: PPUSH
19249: LD_STRING Petrosyan
19251: PPUSH
19252: LD_INT 3
19254: PPUSH
19255: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
19259: LD_EXP 46
19263: PPUSH
19264: CALL_OW 310
19268: PPUSH
19269: LD_INT 22
19271: PPUSH
19272: CALL_OW 308
19276: IFFALSE 19293
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
19278: LD_EXP 46
19282: PPUSH
19283: LD_STRING Dolgov
19285: PPUSH
19286: LD_INT 3
19288: PPUSH
19289: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
19293: LD_EXP 47
19297: PPUSH
19298: CALL_OW 310
19302: PPUSH
19303: LD_INT 22
19305: PPUSH
19306: CALL_OW 308
19310: IFFALSE 19327
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
19312: LD_EXP 47
19316: PPUSH
19317: LD_STRING Lipshchin
19319: PPUSH
19320: LD_INT 3
19322: PPUSH
19323: CALL 8646 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
19327: LD_EXP 45
19331: PPUSH
19332: CALL_OW 310
19336: PPUSH
19337: LD_INT 22
19339: PPUSH
19340: CALL_OW 308
19344: IFFALSE 19361
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
19346: LD_EXP 45
19350: PPUSH
19351: LD_STRING Titov
19353: PPUSH
19354: LD_INT 3
19356: PPUSH
19357: CALL 8646 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
19361: LD_INT 22
19363: PPUSH
19364: LD_INT 22
19366: PUSH
19367: LD_INT 3
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 21
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: LD_INT 25
19389: PUSH
19390: LD_INT 12
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 25
19399: PUSH
19400: LD_INT 16
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 25
19409: PUSH
19410: LD_INT 15
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: PPUSH
19428: CALL_OW 70
19432: PPUSH
19433: LD_STRING other_apemans
19435: PPUSH
19436: LD_INT 3
19438: PPUSH
19439: CALL 8702 0 3
// end ;
19443: LD_VAR 0 1
19447: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
19448: LD_INT 0
19450: PPUSH
19451: PPUSH
19452: PPUSH
19453: PPUSH
19454: PPUSH
// resources = [ ] ;
19455: LD_ADDR_VAR 0 3
19459: PUSH
19460: EMPTY
19461: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19462: LD_ADDR_EXP 5
19466: PUSH
19467: EMPTY
19468: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19469: LD_EXP 2
19473: PPUSH
19474: LD_STRING 05_StevensStatus_1
19476: PPUSH
19477: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19481: LD_EXP 1
19485: PPUSH
19486: LD_STRING 05_OmarStatus_2
19488: PPUSH
19489: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
19493: LD_ADDR_VAR 0 2
19497: PUSH
19498: LD_INT 22
19500: PPUSH
19501: LD_INT 22
19503: PUSH
19504: LD_INT 3
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 59
19513: PUSH
19514: EMPTY
19515: LIST
19516: PUSH
19517: LD_INT 2
19519: PUSH
19520: LD_INT 34
19522: PUSH
19523: LD_INT 51
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 34
19532: PUSH
19533: LD_INT 32
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 34
19542: PUSH
19543: LD_INT 89
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: LIST
19560: PPUSH
19561: CALL_OW 70
19565: PUSH
19566: FOR_IN
19567: IFFALSE 19595
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19569: LD_ADDR_VAR 0 3
19573: PUSH
19574: LD_VAR 0 3
19578: PUSH
19579: LD_VAR 0 2
19583: PPUSH
19584: CALL 9832 0 1
19588: PUSH
19589: EMPTY
19590: LIST
19591: ADD
19592: ST_TO_ADDR
19593: GO 19566
19595: POP
19596: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19597: LD_VAR 0 3
19601: PPUSH
19602: LD_STRING 05_ResourcesInCargo_3
19604: PPUSH
19605: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19609: LD_ADDR_VAR 0 2
19613: PUSH
19614: LD_INT 22
19616: PPUSH
19617: LD_INT 22
19619: PUSH
19620: LD_INT 3
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 21
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 59
19639: PUSH
19640: EMPTY
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: LIST
19647: PPUSH
19648: CALL_OW 70
19652: PUSH
19653: FOR_IN
19654: IFFALSE 19914
// begin driver = UnitsInside ( i ) [ 1 ] ;
19656: LD_ADDR_VAR 0 4
19660: PUSH
19661: LD_VAR 0 2
19665: PPUSH
19666: CALL_OW 313
19670: PUSH
19671: LD_INT 1
19673: ARRAY
19674: ST_TO_ADDR
// if driver = Burlak then
19675: LD_VAR 0 4
19679: PUSH
19680: LD_EXP 40
19684: EQUAL
19685: IFFALSE 19695
// driverShortName = Bur ;
19687: LD_ADDR_VAR 0 5
19691: PUSH
19692: LD_STRING Bur
19694: ST_TO_ADDR
// if driver = Karamazov then
19695: LD_VAR 0 4
19699: PUSH
19700: LD_EXP 41
19704: EQUAL
19705: IFFALSE 19715
// driverShortName = Kar ;
19707: LD_ADDR_VAR 0 5
19711: PUSH
19712: LD_STRING Kar
19714: ST_TO_ADDR
// if driver = Petrovova then
19715: LD_VAR 0 4
19719: PUSH
19720: LD_EXP 42
19724: EQUAL
19725: IFFALSE 19735
// driverShortName = Ptr ;
19727: LD_ADDR_VAR 0 5
19731: PUSH
19732: LD_STRING Ptr
19734: ST_TO_ADDR
// if driver = Gleb then
19735: LD_VAR 0 4
19739: PUSH
19740: LD_EXP 43
19744: EQUAL
19745: IFFALSE 19755
// driverShortName = Glb ;
19747: LD_ADDR_VAR 0 5
19751: PUSH
19752: LD_STRING Glb
19754: ST_TO_ADDR
// if driver = Petrosyan then
19755: LD_VAR 0 4
19759: PUSH
19760: LD_EXP 44
19764: EQUAL
19765: IFFALSE 19775
// driverShortName = Pet ;
19767: LD_ADDR_VAR 0 5
19771: PUSH
19772: LD_STRING Pet
19774: ST_TO_ADDR
// if driver = Dolgov then
19775: LD_VAR 0 4
19779: PUSH
19780: LD_EXP 46
19784: EQUAL
19785: IFFALSE 19795
// driverShortName = Dol ;
19787: LD_ADDR_VAR 0 5
19791: PUSH
19792: LD_STRING Dol
19794: ST_TO_ADDR
// if driver = Lipshchin then
19795: LD_VAR 0 4
19799: PUSH
19800: LD_EXP 47
19804: EQUAL
19805: IFFALSE 19815
// driverShortName = Lip ;
19807: LD_ADDR_VAR 0 5
19811: PUSH
19812: LD_STRING Lip
19814: ST_TO_ADDR
// if driver = Titov then
19815: LD_VAR 0 4
19819: PUSH
19820: LD_EXP 45
19824: EQUAL
19825: IFFALSE 19835
// driverShortName = Tit ;
19827: LD_ADDR_VAR 0 5
19831: PUSH
19832: LD_STRING Tit
19834: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19835: LD_ADDR_EXP 5
19839: PUSH
19840: LD_EXP 5
19844: PUSH
19845: LD_VAR 0 2
19849: PPUSH
19850: CALL_OW 248
19854: PUSH
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 265
19864: PUSH
19865: LD_VAR 0 2
19869: PPUSH
19870: CALL_OW 262
19874: PUSH
19875: LD_VAR 0 2
19879: PPUSH
19880: CALL_OW 263
19884: PUSH
19885: LD_VAR 0 2
19889: PPUSH
19890: CALL_OW 264
19894: PUSH
19895: LD_VAR 0 5
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: PUSH
19908: EMPTY
19909: LIST
19910: ADD
19911: ST_TO_ADDR
// end ;
19912: GO 19653
19914: POP
19915: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19916: LD_EXP 5
19920: PPUSH
19921: LD_STRING 05_Tanks_4
19923: PPUSH
19924: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19928: LD_INT 22
19930: PUSH
19931: LD_INT 3
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 23
19940: PUSH
19941: LD_INT 3
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 3
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 2
19960: PUSH
19961: LD_INT 30
19963: PUSH
19964: LD_INT 6
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 30
19973: PUSH
19974: LD_INT 7
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PPUSH
19992: CALL_OW 69
19996: NOT
19997: IFFALSE 20007
// labDestroyed = 1 ;
19999: LD_ADDR_EXP 3
20003: PUSH
20004: LD_INT 1
20006: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
20007: LD_EXP 3
20011: PPUSH
20012: LD_STRING 05_LabDestroyed_5
20014: PPUSH
20015: CALL_OW 39
// end ; end_of_file
20019: LD_VAR 0 1
20023: RET
// export function Nef_PrepareNature ; var i , un ; begin
20024: LD_INT 0
20026: PPUSH
20027: PPUSH
20028: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
20029: LD_ADDR_VAR 0 2
20033: PUSH
20034: DOUBLE
20035: LD_INT 1
20037: DEC
20038: ST_TO_ADDR
20039: LD_EXP 28
20043: PUSH
20044: LD_INT 1
20046: ARRAY
20047: PUSH
20048: FOR_TO
20049: IFFALSE 20159
// begin uc_side = 0 ;
20051: LD_ADDR_OWVAR 20
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// uc_nation = nation_nature ;
20059: LD_ADDR_OWVAR 21
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// hc_class = class_apeman ;
20067: LD_ADDR_OWVAR 28
20071: PUSH
20072: LD_INT 12
20074: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20075: LD_ADDR_OWVAR 31
20079: PUSH
20080: LD_EXP 29
20084: PUSH
20085: LD_INT 1
20087: ARRAY
20088: PUSH
20089: LD_EXP 29
20093: PUSH
20094: LD_INT 2
20096: ARRAY
20097: PUSH
20098: LD_EXP 29
20102: PUSH
20103: LD_INT 3
20105: ARRAY
20106: PUSH
20107: LD_EXP 29
20111: PUSH
20112: LD_INT 4
20114: ARRAY
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20122: LD_ADDR_OWVAR 35
20126: PUSH
20127: LD_EXP 30
20131: ST_TO_ADDR
// un = CreateHuman ;
20132: LD_ADDR_VAR 0 3
20136: PUSH
20137: CALL_OW 44
20141: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20142: LD_VAR 0 3
20146: PPUSH
20147: LD_INT 33
20149: PPUSH
20150: LD_INT 0
20152: PPUSH
20153: CALL_OW 49
// end ;
20157: GO 20048
20159: POP
20160: POP
// for i := 1 to animalsAmount [ 2 ] do
20161: LD_ADDR_VAR 0 2
20165: PUSH
20166: DOUBLE
20167: LD_INT 1
20169: DEC
20170: ST_TO_ADDR
20171: LD_EXP 28
20175: PUSH
20176: LD_INT 2
20178: ARRAY
20179: PUSH
20180: FOR_TO
20181: IFFALSE 20291
// begin uc_side = 0 ;
20183: LD_ADDR_OWVAR 20
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
// uc_nation = nation_nature ;
20191: LD_ADDR_OWVAR 21
20195: PUSH
20196: LD_INT 0
20198: ST_TO_ADDR
// hc_class = class_phororhacos ;
20199: LD_ADDR_OWVAR 28
20203: PUSH
20204: LD_INT 18
20206: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20207: LD_ADDR_OWVAR 31
20211: PUSH
20212: LD_EXP 29
20216: PUSH
20217: LD_INT 1
20219: ARRAY
20220: PUSH
20221: LD_EXP 29
20225: PUSH
20226: LD_INT 2
20228: ARRAY
20229: PUSH
20230: LD_EXP 29
20234: PUSH
20235: LD_INT 3
20237: ARRAY
20238: PUSH
20239: LD_EXP 29
20243: PUSH
20244: LD_INT 4
20246: ARRAY
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20254: LD_ADDR_OWVAR 35
20258: PUSH
20259: LD_EXP 30
20263: ST_TO_ADDR
// un = CreateHuman ;
20264: LD_ADDR_VAR 0 3
20268: PUSH
20269: CALL_OW 44
20273: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20274: LD_VAR 0 3
20278: PPUSH
20279: LD_INT 33
20281: PPUSH
20282: LD_INT 0
20284: PPUSH
20285: CALL_OW 49
// end ;
20289: GO 20180
20291: POP
20292: POP
// for i := 1 to animalsAmount [ 3 ] do
20293: LD_ADDR_VAR 0 2
20297: PUSH
20298: DOUBLE
20299: LD_INT 1
20301: DEC
20302: ST_TO_ADDR
20303: LD_EXP 28
20307: PUSH
20308: LD_INT 3
20310: ARRAY
20311: PUSH
20312: FOR_TO
20313: IFFALSE 20423
// begin uc_side = 0 ;
20315: LD_ADDR_OWVAR 20
20319: PUSH
20320: LD_INT 0
20322: ST_TO_ADDR
// uc_nation = nation_nature ;
20323: LD_ADDR_OWVAR 21
20327: PUSH
20328: LD_INT 0
20330: ST_TO_ADDR
// hc_class = class_tiger ;
20331: LD_ADDR_OWVAR 28
20335: PUSH
20336: LD_INT 14
20338: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20339: LD_ADDR_OWVAR 31
20343: PUSH
20344: LD_EXP 29
20348: PUSH
20349: LD_INT 1
20351: ARRAY
20352: PUSH
20353: LD_EXP 29
20357: PUSH
20358: LD_INT 2
20360: ARRAY
20361: PUSH
20362: LD_EXP 29
20366: PUSH
20367: LD_INT 3
20369: ARRAY
20370: PUSH
20371: LD_EXP 29
20375: PUSH
20376: LD_INT 4
20378: ARRAY
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20386: LD_ADDR_OWVAR 35
20390: PUSH
20391: LD_EXP 30
20395: ST_TO_ADDR
// un = CreateHuman ;
20396: LD_ADDR_VAR 0 3
20400: PUSH
20401: CALL_OW 44
20405: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20406: LD_VAR 0 3
20410: PPUSH
20411: LD_INT 33
20413: PPUSH
20414: LD_INT 0
20416: PPUSH
20417: CALL_OW 49
// end ;
20421: GO 20312
20423: POP
20424: POP
// for i := 1 to animalsAmount [ 4 ] do
20425: LD_ADDR_VAR 0 2
20429: PUSH
20430: DOUBLE
20431: LD_INT 1
20433: DEC
20434: ST_TO_ADDR
20435: LD_EXP 28
20439: PUSH
20440: LD_INT 4
20442: ARRAY
20443: PUSH
20444: FOR_TO
20445: IFFALSE 20555
// begin uc_side = 0 ;
20447: LD_ADDR_OWVAR 20
20451: PUSH
20452: LD_INT 0
20454: ST_TO_ADDR
// uc_nation = nation_nature ;
20455: LD_ADDR_OWVAR 21
20459: PUSH
20460: LD_INT 0
20462: ST_TO_ADDR
// hc_class = 21 ;
20463: LD_ADDR_OWVAR 28
20467: PUSH
20468: LD_INT 21
20470: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20471: LD_ADDR_OWVAR 31
20475: PUSH
20476: LD_EXP 29
20480: PUSH
20481: LD_INT 1
20483: ARRAY
20484: PUSH
20485: LD_EXP 29
20489: PUSH
20490: LD_INT 2
20492: ARRAY
20493: PUSH
20494: LD_EXP 29
20498: PUSH
20499: LD_INT 3
20501: ARRAY
20502: PUSH
20503: LD_EXP 29
20507: PUSH
20508: LD_INT 4
20510: ARRAY
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20518: LD_ADDR_OWVAR 35
20522: PUSH
20523: LD_EXP 30
20527: ST_TO_ADDR
// un = CreateHuman ;
20528: LD_ADDR_VAR 0 3
20532: PUSH
20533: CALL_OW 44
20537: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20538: LD_VAR 0 3
20542: PPUSH
20543: LD_INT 33
20545: PPUSH
20546: LD_INT 0
20548: PPUSH
20549: CALL_OW 49
// end ;
20553: GO 20444
20555: POP
20556: POP
// for i := 1 to animalsAmount [ 5 ] do
20557: LD_ADDR_VAR 0 2
20561: PUSH
20562: DOUBLE
20563: LD_INT 1
20565: DEC
20566: ST_TO_ADDR
20567: LD_EXP 28
20571: PUSH
20572: LD_INT 5
20574: ARRAY
20575: PUSH
20576: FOR_TO
20577: IFFALSE 20638
// begin uc_side = 0 ;
20579: LD_ADDR_OWVAR 20
20583: PUSH
20584: LD_INT 0
20586: ST_TO_ADDR
// uc_nation = nation_nature ;
20587: LD_ADDR_OWVAR 21
20591: PUSH
20592: LD_INT 0
20594: ST_TO_ADDR
// vc_chassis := 31 ;
20595: LD_ADDR_OWVAR 37
20599: PUSH
20600: LD_INT 31
20602: ST_TO_ADDR
// vc_control := control_rider ;
20603: LD_ADDR_OWVAR 38
20607: PUSH
20608: LD_INT 4
20610: ST_TO_ADDR
// un := CreateVehicle ;
20611: LD_ADDR_VAR 0 3
20615: PUSH
20616: CALL_OW 45
20620: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20621: LD_VAR 0 3
20625: PPUSH
20626: LD_INT 33
20628: PPUSH
20629: LD_INT 0
20631: PPUSH
20632: CALL_OW 49
// end ;
20636: GO 20576
20638: POP
20639: POP
// end ; end_of_file
20640: LD_VAR 0 1
20644: RET
// every 0 0$1 do
20645: GO 20647
20647: DISABLE
// begin enable ;
20648: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20649: LD_ADDR_OWVAR 47
20653: PUSH
20654: LD_STRING #Am01-1
20656: PUSH
20657: LD_EXP 7
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20666: LD_ADDR_EXP 7
20670: PUSH
20671: LD_EXP 7
20675: PUSH
20676: LD_INT 35
20678: PLUS
20679: ST_TO_ADDR
// end ; end_of_file
20680: END
// every 0 0$01 do var timer ;
20681: GO 20683
20683: DISABLE
20684: LD_INT 0
20686: PPUSH
// begin timer := 0 0$30 ;
20687: LD_ADDR_VAR 0 1
20691: PUSH
20692: LD_INT 1050
20694: ST_TO_ADDR
// repeat wait ( timer ) ;
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20704: LD_EXP 22
20708: PUSH
20709: LD_INT 6
20711: GREATEREQUAL
20712: PUSH
20713: LD_EXP 22
20717: PUSH
20718: LD_INT 12
20720: LESS
20721: AND
20722: IFFALSE 20738
// timer := timer + 0 0$3 ;
20724: LD_ADDR_VAR 0 1
20728: PUSH
20729: LD_VAR 0 1
20733: PUSH
20734: LD_INT 105
20736: PLUS
20737: ST_TO_ADDR
// if cratesSpawned >= 12 then
20738: LD_EXP 22
20742: PUSH
20743: LD_INT 12
20745: GREATEREQUAL
20746: IFFALSE 20762
// timer := timer + 0 0$9 ;
20748: LD_ADDR_VAR 0 1
20752: PUSH
20753: LD_VAR 0 1
20757: PUSH
20758: LD_INT 315
20760: PLUS
20761: ST_TO_ADDR
// if timer > 3 3$00 then
20762: LD_VAR 0 1
20766: PUSH
20767: LD_INT 6300
20769: GREATER
20770: IFFALSE 20780
// timer := 0 0$50 ;
20772: LD_ADDR_VAR 0 1
20776: PUSH
20777: LD_INT 1750
20779: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20780: LD_INT 3
20782: PPUSH
20783: LD_INT 5
20785: PPUSH
20786: CALL_OW 12
20790: PPUSH
20791: LD_INT 46
20793: PPUSH
20794: LD_INT 1
20796: PPUSH
20797: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20801: LD_ADDR_EXP 22
20805: PUSH
20806: LD_EXP 22
20810: PUSH
20811: LD_INT 1
20813: PLUS
20814: ST_TO_ADDR
// until false ;
20815: LD_INT 0
20817: IFFALSE 20695
// end ;
20819: PPOPN 1
20821: END
// every 0 0$5 do
20822: GO 20824
20824: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20825: LD_INT 5
20827: PPUSH
20828: LD_INT 48
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: CALL_OW 55
// wait ( 0 0$40 ) ;
20838: LD_INT 1400
20840: PPUSH
20841: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20845: LD_INT 5
20847: PPUSH
20848: LD_INT 48
20850: PPUSH
20851: LD_INT 1
20853: PPUSH
20854: CALL_OW 55
// end ;
20858: END
// every 10 10$0 do
20859: GO 20861
20861: DISABLE
// begin enable ;
20862: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20863: LD_INT 3
20865: PPUSH
20866: LD_INT 5
20868: PPUSH
20869: CALL_OW 12
20873: PPUSH
20874: LD_INT 48
20876: PPUSH
20877: LD_INT 1
20879: PPUSH
20880: CALL_OW 55
// end ; end_of_file
20884: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20885: LD_INT 0
20887: PPUSH
// uc_side = 1 ;
20888: LD_ADDR_OWVAR 20
20892: PUSH
20893: LD_INT 1
20895: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20896: LD_ADDR_EXP 58
20900: PUSH
20901: LD_STRING Stevens
20903: PPUSH
20904: LD_INT 0
20906: PPUSH
20907: LD_INT 0
20909: PPUSH
20910: CALL 8528 0 3
20914: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20915: LD_EXP 58
20919: PPUSH
20920: LD_VAR 0 1
20924: PPUSH
20925: LD_INT 1
20927: PPUSH
20928: CALL_OW 49
// end ; end_of_file
20932: LD_VAR 0 2
20936: RET
// every 1 trigger achievement_DestroyedHovercrafts >= 3 do
20937: LD_EXP 26
20941: PUSH
20942: LD_INT 3
20944: GREATEREQUAL
20945: IFFALSE 20957
20947: GO 20949
20949: DISABLE
// SetAchievement ( ACH_HOVER ) ;
20950: LD_STRING ACH_HOVER
20952: PPUSH
20953: CALL_OW 543
20957: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_nature ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) and not FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_class , class_apeman ] ] ) do
20958: LD_INT 22
20960: PUSH
20961: LD_INT 3
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 23
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 25
20983: PUSH
20984: LD_INT 12
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 25
20993: PUSH
20994: LD_INT 16
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 25
21003: PUSH
21004: LD_INT 15
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: PPUSH
21022: CALL_OW 69
21026: PUSH
21027: LD_INT 22
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 23
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 25
21049: PUSH
21050: LD_INT 12
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: LIST
21061: PPUSH
21062: CALL_OW 69
21066: NOT
21067: AND
21068: IFFALSE 21080
21070: GO 21072
21072: DISABLE
// SetAchievement ( ACH_REDARMY ) ;
21073: LD_STRING ACH_REDARMY
21075: PPUSH
21076: CALL_OW 543
21080: END
// every 1 trigger not achievement_CollectedCrates do var crates , depot ;
21081: LD_EXP 27
21085: NOT
21086: IFFALSE 21219
21088: GO 21090
21090: DISABLE
21091: LD_INT 0
21093: PPUSH
21094: PPUSH
// begin enable ;
21095: ENABLE
// crates = 0 ;
21096: LD_ADDR_VAR 0 1
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// for depot in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
21104: LD_ADDR_VAR 0 2
21108: PUSH
21109: LD_INT 22
21111: PUSH
21112: LD_INT 3
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 21
21121: PUSH
21122: LD_INT 3
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 30
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 50
21141: PUSH
21142: EMPTY
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: PPUSH
21151: CALL_OW 69
21155: PUSH
21156: FOR_IN
21157: IFFALSE 21190
// crates = crates + GetResourceType ( GetBase ( depot ) , mat_cans ) ;
21159: LD_ADDR_VAR 0 1
21163: PUSH
21164: LD_VAR 0 1
21168: PUSH
21169: LD_VAR 0 2
21173: PPUSH
21174: CALL_OW 274
21178: PPUSH
21179: LD_INT 1
21181: PPUSH
21182: CALL_OW 275
21186: PLUS
21187: ST_TO_ADDR
21188: GO 21156
21190: POP
21191: POP
// if crates >= 500 then
21192: LD_VAR 0 1
21196: PUSH
21197: LD_INT 500
21199: GREATEREQUAL
21200: IFFALSE 21219
// begin achievement_CollectedCrates = true ;
21202: LD_ADDR_EXP 27
21206: PUSH
21207: LD_INT 1
21209: ST_TO_ADDR
// SetAchievement ( ACH_CRATES ) ;
21210: LD_STRING ACH_CRATES
21212: PPUSH
21213: CALL_OW 543
// exit ;
21217: GO 21219
// end ; end ; end_of_file
21219: PPOPN 2
21221: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21222: LD_INT 0
21224: PPUSH
21225: PPUSH
// if exist_mode then
21226: LD_VAR 0 2
21230: IFFALSE 21255
// unit := CreateCharacter ( prefix & ident ) else
21232: LD_ADDR_VAR 0 5
21236: PUSH
21237: LD_VAR 0 3
21241: PUSH
21242: LD_VAR 0 1
21246: STR
21247: PPUSH
21248: CALL_OW 34
21252: ST_TO_ADDR
21253: GO 21270
// unit := NewCharacter ( ident ) ;
21255: LD_ADDR_VAR 0 5
21259: PUSH
21260: LD_VAR 0 1
21264: PPUSH
21265: CALL_OW 25
21269: ST_TO_ADDR
// result := unit ;
21270: LD_ADDR_VAR 0 4
21274: PUSH
21275: LD_VAR 0 5
21279: ST_TO_ADDR
// end ;
21280: LD_VAR 0 4
21284: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21285: LD_INT 0
21287: PPUSH
21288: PPUSH
// if not side or not nation then
21289: LD_VAR 0 1
21293: NOT
21294: PUSH
21295: LD_VAR 0 2
21299: NOT
21300: OR
21301: IFFALSE 21305
// exit ;
21303: GO 22069
// case nation of nation_american :
21305: LD_VAR 0 2
21309: PUSH
21310: LD_INT 1
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21532
21318: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21319: LD_ADDR_VAR 0 4
21323: PUSH
21324: LD_INT 35
21326: PUSH
21327: LD_INT 45
21329: PUSH
21330: LD_INT 46
21332: PUSH
21333: LD_INT 47
21335: PUSH
21336: LD_INT 82
21338: PUSH
21339: LD_INT 83
21341: PUSH
21342: LD_INT 84
21344: PUSH
21345: LD_INT 85
21347: PUSH
21348: LD_INT 86
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: LD_INT 6
21359: PUSH
21360: LD_INT 15
21362: PUSH
21363: LD_INT 16
21365: PUSH
21366: LD_INT 7
21368: PUSH
21369: LD_INT 12
21371: PUSH
21372: LD_INT 13
21374: PUSH
21375: LD_INT 10
21377: PUSH
21378: LD_INT 14
21380: PUSH
21381: LD_INT 20
21383: PUSH
21384: LD_INT 21
21386: PUSH
21387: LD_INT 22
21389: PUSH
21390: LD_INT 25
21392: PUSH
21393: LD_INT 32
21395: PUSH
21396: LD_INT 27
21398: PUSH
21399: LD_INT 36
21401: PUSH
21402: LD_INT 69
21404: PUSH
21405: LD_INT 39
21407: PUSH
21408: LD_INT 34
21410: PUSH
21411: LD_INT 40
21413: PUSH
21414: LD_INT 48
21416: PUSH
21417: LD_INT 49
21419: PUSH
21420: LD_INT 50
21422: PUSH
21423: LD_INT 51
21425: PUSH
21426: LD_INT 52
21428: PUSH
21429: LD_INT 53
21431: PUSH
21432: LD_INT 54
21434: PUSH
21435: LD_INT 55
21437: PUSH
21438: LD_INT 56
21440: PUSH
21441: LD_INT 57
21443: PUSH
21444: LD_INT 58
21446: PUSH
21447: LD_INT 59
21449: PUSH
21450: LD_INT 60
21452: PUSH
21453: LD_INT 61
21455: PUSH
21456: LD_INT 62
21458: PUSH
21459: LD_INT 80
21461: PUSH
21462: LD_INT 82
21464: PUSH
21465: LD_INT 83
21467: PUSH
21468: LD_INT 84
21470: PUSH
21471: LD_INT 85
21473: PUSH
21474: LD_INT 86
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: ST_TO_ADDR
21530: GO 21993
21532: LD_INT 2
21534: DOUBLE
21535: EQUAL
21536: IFTRUE 21540
21538: GO 21762
21540: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21541: LD_ADDR_VAR 0 4
21545: PUSH
21546: LD_INT 35
21548: PUSH
21549: LD_INT 45
21551: PUSH
21552: LD_INT 46
21554: PUSH
21555: LD_INT 47
21557: PUSH
21558: LD_INT 82
21560: PUSH
21561: LD_INT 83
21563: PUSH
21564: LD_INT 84
21566: PUSH
21567: LD_INT 85
21569: PUSH
21570: LD_INT 87
21572: PUSH
21573: LD_INT 70
21575: PUSH
21576: LD_INT 1
21578: PUSH
21579: LD_INT 11
21581: PUSH
21582: LD_INT 3
21584: PUSH
21585: LD_INT 4
21587: PUSH
21588: LD_INT 5
21590: PUSH
21591: LD_INT 6
21593: PUSH
21594: LD_INT 15
21596: PUSH
21597: LD_INT 18
21599: PUSH
21600: LD_INT 7
21602: PUSH
21603: LD_INT 17
21605: PUSH
21606: LD_INT 8
21608: PUSH
21609: LD_INT 20
21611: PUSH
21612: LD_INT 21
21614: PUSH
21615: LD_INT 22
21617: PUSH
21618: LD_INT 72
21620: PUSH
21621: LD_INT 26
21623: PUSH
21624: LD_INT 69
21626: PUSH
21627: LD_INT 39
21629: PUSH
21630: LD_INT 40
21632: PUSH
21633: LD_INT 41
21635: PUSH
21636: LD_INT 42
21638: PUSH
21639: LD_INT 43
21641: PUSH
21642: LD_INT 48
21644: PUSH
21645: LD_INT 49
21647: PUSH
21648: LD_INT 50
21650: PUSH
21651: LD_INT 51
21653: PUSH
21654: LD_INT 52
21656: PUSH
21657: LD_INT 53
21659: PUSH
21660: LD_INT 54
21662: PUSH
21663: LD_INT 55
21665: PUSH
21666: LD_INT 56
21668: PUSH
21669: LD_INT 60
21671: PUSH
21672: LD_INT 61
21674: PUSH
21675: LD_INT 62
21677: PUSH
21678: LD_INT 66
21680: PUSH
21681: LD_INT 67
21683: PUSH
21684: LD_INT 68
21686: PUSH
21687: LD_INT 81
21689: PUSH
21690: LD_INT 82
21692: PUSH
21693: LD_INT 83
21695: PUSH
21696: LD_INT 84
21698: PUSH
21699: LD_INT 85
21701: PUSH
21702: LD_INT 87
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: ST_TO_ADDR
21760: GO 21993
21762: LD_INT 3
21764: DOUBLE
21765: EQUAL
21766: IFTRUE 21770
21768: GO 21992
21770: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21771: LD_ADDR_VAR 0 4
21775: PUSH
21776: LD_INT 46
21778: PUSH
21779: LD_INT 47
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 82
21790: PUSH
21791: LD_INT 83
21793: PUSH
21794: LD_INT 84
21796: PUSH
21797: LD_INT 85
21799: PUSH
21800: LD_INT 86
21802: PUSH
21803: LD_INT 11
21805: PUSH
21806: LD_INT 9
21808: PUSH
21809: LD_INT 20
21811: PUSH
21812: LD_INT 19
21814: PUSH
21815: LD_INT 21
21817: PUSH
21818: LD_INT 24
21820: PUSH
21821: LD_INT 22
21823: PUSH
21824: LD_INT 25
21826: PUSH
21827: LD_INT 28
21829: PUSH
21830: LD_INT 29
21832: PUSH
21833: LD_INT 30
21835: PUSH
21836: LD_INT 31
21838: PUSH
21839: LD_INT 37
21841: PUSH
21842: LD_INT 38
21844: PUSH
21845: LD_INT 32
21847: PUSH
21848: LD_INT 27
21850: PUSH
21851: LD_INT 33
21853: PUSH
21854: LD_INT 69
21856: PUSH
21857: LD_INT 39
21859: PUSH
21860: LD_INT 34
21862: PUSH
21863: LD_INT 40
21865: PUSH
21866: LD_INT 71
21868: PUSH
21869: LD_INT 23
21871: PUSH
21872: LD_INT 44
21874: PUSH
21875: LD_INT 48
21877: PUSH
21878: LD_INT 49
21880: PUSH
21881: LD_INT 50
21883: PUSH
21884: LD_INT 51
21886: PUSH
21887: LD_INT 52
21889: PUSH
21890: LD_INT 53
21892: PUSH
21893: LD_INT 54
21895: PUSH
21896: LD_INT 55
21898: PUSH
21899: LD_INT 56
21901: PUSH
21902: LD_INT 57
21904: PUSH
21905: LD_INT 58
21907: PUSH
21908: LD_INT 59
21910: PUSH
21911: LD_INT 63
21913: PUSH
21914: LD_INT 64
21916: PUSH
21917: LD_INT 65
21919: PUSH
21920: LD_INT 82
21922: PUSH
21923: LD_INT 83
21925: PUSH
21926: LD_INT 84
21928: PUSH
21929: LD_INT 85
21931: PUSH
21932: LD_INT 86
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: ST_TO_ADDR
21990: GO 21993
21992: POP
// if state > - 1 and state < 3 then
21993: LD_VAR 0 3
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: GREATER
22002: PUSH
22003: LD_VAR 0 3
22007: PUSH
22008: LD_INT 3
22010: LESS
22011: AND
22012: IFFALSE 22069
// for i in result do
22014: LD_ADDR_VAR 0 5
22018: PUSH
22019: LD_VAR 0 4
22023: PUSH
22024: FOR_IN
22025: IFFALSE 22067
// if GetTech ( i , side ) <> state then
22027: LD_VAR 0 5
22031: PPUSH
22032: LD_VAR 0 1
22036: PPUSH
22037: CALL_OW 321
22041: PUSH
22042: LD_VAR 0 3
22046: NONEQUAL
22047: IFFALSE 22065
// result := result diff i ;
22049: LD_ADDR_VAR 0 4
22053: PUSH
22054: LD_VAR 0 4
22058: PUSH
22059: LD_VAR 0 5
22063: DIFF
22064: ST_TO_ADDR
22065: GO 22024
22067: POP
22068: POP
// end ;
22069: LD_VAR 0 4
22073: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22074: LD_INT 0
22076: PPUSH
22077: PPUSH
22078: PPUSH
// result := true ;
22079: LD_ADDR_VAR 0 3
22083: PUSH
22084: LD_INT 1
22086: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22087: LD_ADDR_VAR 0 5
22091: PUSH
22092: LD_VAR 0 2
22096: PPUSH
22097: CALL_OW 480
22101: ST_TO_ADDR
// if not tmp then
22102: LD_VAR 0 5
22106: NOT
22107: IFFALSE 22111
// exit ;
22109: GO 22160
// for i in tmp do
22111: LD_ADDR_VAR 0 4
22115: PUSH
22116: LD_VAR 0 5
22120: PUSH
22121: FOR_IN
22122: IFFALSE 22158
// if GetTech ( i , side ) <> state_researched then
22124: LD_VAR 0 4
22128: PPUSH
22129: LD_VAR 0 1
22133: PPUSH
22134: CALL_OW 321
22138: PUSH
22139: LD_INT 2
22141: NONEQUAL
22142: IFFALSE 22156
// begin result := false ;
22144: LD_ADDR_VAR 0 3
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// exit ;
22152: POP
22153: POP
22154: GO 22160
// end ;
22156: GO 22121
22158: POP
22159: POP
// end ;
22160: LD_VAR 0 3
22164: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22165: LD_INT 0
22167: PPUSH
22168: PPUSH
22169: PPUSH
22170: PPUSH
22171: PPUSH
22172: PPUSH
22173: PPUSH
22174: PPUSH
22175: PPUSH
22176: PPUSH
22177: PPUSH
22178: PPUSH
22179: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22180: LD_VAR 0 1
22184: NOT
22185: PUSH
22186: LD_VAR 0 1
22190: PPUSH
22191: CALL_OW 257
22195: PUSH
22196: LD_INT 9
22198: NONEQUAL
22199: OR
22200: IFFALSE 22204
// exit ;
22202: GO 22777
// side := GetSide ( unit ) ;
22204: LD_ADDR_VAR 0 9
22208: PUSH
22209: LD_VAR 0 1
22213: PPUSH
22214: CALL_OW 255
22218: ST_TO_ADDR
// tech_space := tech_spacanom ;
22219: LD_ADDR_VAR 0 12
22223: PUSH
22224: LD_INT 29
22226: ST_TO_ADDR
// tech_time := tech_taurad ;
22227: LD_ADDR_VAR 0 13
22231: PUSH
22232: LD_INT 28
22234: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22235: LD_ADDR_VAR 0 11
22239: PUSH
22240: LD_VAR 0 1
22244: PPUSH
22245: CALL_OW 310
22249: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22250: LD_VAR 0 11
22254: PPUSH
22255: CALL_OW 247
22259: PUSH
22260: LD_INT 2
22262: EQUAL
22263: IFFALSE 22267
// exit ;
22265: GO 22777
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22267: LD_ADDR_VAR 0 8
22271: PUSH
22272: LD_INT 81
22274: PUSH
22275: LD_VAR 0 9
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 3
22286: PUSH
22287: LD_INT 21
22289: PUSH
22290: LD_INT 3
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: ST_TO_ADDR
// if not tmp then
22310: LD_VAR 0 8
22314: NOT
22315: IFFALSE 22319
// exit ;
22317: GO 22777
// if in_unit then
22319: LD_VAR 0 11
22323: IFFALSE 22347
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22325: LD_ADDR_VAR 0 10
22329: PUSH
22330: LD_VAR 0 8
22334: PPUSH
22335: LD_VAR 0 11
22339: PPUSH
22340: CALL_OW 74
22344: ST_TO_ADDR
22345: GO 22367
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22347: LD_ADDR_VAR 0 10
22351: PUSH
22352: LD_VAR 0 8
22356: PPUSH
22357: LD_VAR 0 1
22361: PPUSH
22362: CALL_OW 74
22366: ST_TO_ADDR
// if not enemy then
22367: LD_VAR 0 10
22371: NOT
22372: IFFALSE 22376
// exit ;
22374: GO 22777
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22376: LD_VAR 0 11
22380: PUSH
22381: LD_VAR 0 11
22385: PPUSH
22386: LD_VAR 0 10
22390: PPUSH
22391: CALL_OW 296
22395: PUSH
22396: LD_INT 13
22398: GREATER
22399: AND
22400: PUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: LD_VAR 0 10
22410: PPUSH
22411: CALL_OW 296
22415: PUSH
22416: LD_INT 12
22418: GREATER
22419: OR
22420: IFFALSE 22424
// exit ;
22422: GO 22777
// missile := [ 1 ] ;
22424: LD_ADDR_VAR 0 14
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22435: LD_VAR 0 9
22439: PPUSH
22440: LD_VAR 0 12
22444: PPUSH
22445: CALL_OW 325
22449: IFFALSE 22478
// missile := Insert ( missile , missile + 1 , 2 ) ;
22451: LD_ADDR_VAR 0 14
22455: PUSH
22456: LD_VAR 0 14
22460: PPUSH
22461: LD_VAR 0 14
22465: PUSH
22466: LD_INT 1
22468: PLUS
22469: PPUSH
22470: LD_INT 2
22472: PPUSH
22473: CALL_OW 2
22477: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22478: LD_VAR 0 9
22482: PPUSH
22483: LD_VAR 0 13
22487: PPUSH
22488: CALL_OW 325
22492: PUSH
22493: LD_VAR 0 10
22497: PPUSH
22498: CALL_OW 255
22502: PPUSH
22503: LD_VAR 0 13
22507: PPUSH
22508: CALL_OW 325
22512: NOT
22513: AND
22514: IFFALSE 22543
// missile := Insert ( missile , missile + 1 , 3 ) ;
22516: LD_ADDR_VAR 0 14
22520: PUSH
22521: LD_VAR 0 14
22525: PPUSH
22526: LD_VAR 0 14
22530: PUSH
22531: LD_INT 1
22533: PLUS
22534: PPUSH
22535: LD_INT 3
22537: PPUSH
22538: CALL_OW 2
22542: ST_TO_ADDR
// if missile < 2 then
22543: LD_VAR 0 14
22547: PUSH
22548: LD_INT 2
22550: LESS
22551: IFFALSE 22555
// exit ;
22553: GO 22777
// x := GetX ( enemy ) ;
22555: LD_ADDR_VAR 0 4
22559: PUSH
22560: LD_VAR 0 10
22564: PPUSH
22565: CALL_OW 250
22569: ST_TO_ADDR
// y := GetY ( enemy ) ;
22570: LD_ADDR_VAR 0 5
22574: PUSH
22575: LD_VAR 0 10
22579: PPUSH
22580: CALL_OW 251
22584: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22585: LD_ADDR_VAR 0 6
22589: PUSH
22590: LD_VAR 0 4
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PPUSH
22599: LD_INT 1
22601: PPUSH
22602: CALL_OW 12
22606: PLUS
22607: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22608: LD_ADDR_VAR 0 7
22612: PUSH
22613: LD_VAR 0 5
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PPUSH
22622: LD_INT 1
22624: PPUSH
22625: CALL_OW 12
22629: PLUS
22630: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22631: LD_VAR 0 6
22635: PPUSH
22636: LD_VAR 0 7
22640: PPUSH
22641: CALL_OW 488
22645: NOT
22646: IFFALSE 22668
// begin _x := x ;
22648: LD_ADDR_VAR 0 6
22652: PUSH
22653: LD_VAR 0 4
22657: ST_TO_ADDR
// _y := y ;
22658: LD_ADDR_VAR 0 7
22662: PUSH
22663: LD_VAR 0 5
22667: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22668: LD_ADDR_VAR 0 3
22672: PUSH
22673: LD_INT 1
22675: PPUSH
22676: LD_VAR 0 14
22680: PPUSH
22681: CALL_OW 12
22685: ST_TO_ADDR
// case i of 1 :
22686: LD_VAR 0 3
22690: PUSH
22691: LD_INT 1
22693: DOUBLE
22694: EQUAL
22695: IFTRUE 22699
22697: GO 22716
22699: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22700: LD_VAR 0 1
22704: PPUSH
22705: LD_VAR 0 10
22709: PPUSH
22710: CALL_OW 115
22714: GO 22777
22716: LD_INT 2
22718: DOUBLE
22719: EQUAL
22720: IFTRUE 22724
22722: GO 22746
22724: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22725: LD_VAR 0 1
22729: PPUSH
22730: LD_VAR 0 6
22734: PPUSH
22735: LD_VAR 0 7
22739: PPUSH
22740: CALL_OW 153
22744: GO 22777
22746: LD_INT 3
22748: DOUBLE
22749: EQUAL
22750: IFTRUE 22754
22752: GO 22776
22754: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_VAR 0 6
22764: PPUSH
22765: LD_VAR 0 7
22769: PPUSH
22770: CALL_OW 154
22774: GO 22777
22776: POP
// end ;
22777: LD_VAR 0 2
22781: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22782: LD_INT 0
22784: PPUSH
22785: PPUSH
22786: PPUSH
22787: PPUSH
22788: PPUSH
22789: PPUSH
// if not unit or not building then
22790: LD_VAR 0 1
22794: NOT
22795: PUSH
22796: LD_VAR 0 2
22800: NOT
22801: OR
22802: IFFALSE 22806
// exit ;
22804: GO 22964
// x := GetX ( building ) ;
22806: LD_ADDR_VAR 0 5
22810: PUSH
22811: LD_VAR 0 2
22815: PPUSH
22816: CALL_OW 250
22820: ST_TO_ADDR
// y := GetY ( building ) ;
22821: LD_ADDR_VAR 0 6
22825: PUSH
22826: LD_VAR 0 2
22830: PPUSH
22831: CALL_OW 251
22835: ST_TO_ADDR
// for i = 0 to 5 do
22836: LD_ADDR_VAR 0 4
22840: PUSH
22841: DOUBLE
22842: LD_INT 0
22844: DEC
22845: ST_TO_ADDR
22846: LD_INT 5
22848: PUSH
22849: FOR_TO
22850: IFFALSE 22962
// begin _x := ShiftX ( x , i , 3 ) ;
22852: LD_ADDR_VAR 0 7
22856: PUSH
22857: LD_VAR 0 5
22861: PPUSH
22862: LD_VAR 0 4
22866: PPUSH
22867: LD_INT 3
22869: PPUSH
22870: CALL_OW 272
22874: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22875: LD_ADDR_VAR 0 8
22879: PUSH
22880: LD_VAR 0 6
22884: PPUSH
22885: LD_VAR 0 4
22889: PPUSH
22890: LD_INT 3
22892: PPUSH
22893: CALL_OW 273
22897: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22898: LD_VAR 0 7
22902: PPUSH
22903: LD_VAR 0 8
22907: PPUSH
22908: CALL_OW 488
22912: NOT
22913: IFFALSE 22917
// continue ;
22915: GO 22849
// if HexInfo ( _x , _y ) = 0 then
22917: LD_VAR 0 7
22921: PPUSH
22922: LD_VAR 0 8
22926: PPUSH
22927: CALL_OW 428
22931: PUSH
22932: LD_INT 0
22934: EQUAL
22935: IFFALSE 22960
// begin ComMoveXY ( unit , _x , _y ) ;
22937: LD_VAR 0 1
22941: PPUSH
22942: LD_VAR 0 7
22946: PPUSH
22947: LD_VAR 0 8
22951: PPUSH
22952: CALL_OW 111
// exit ;
22956: POP
22957: POP
22958: GO 22964
// end ; end ;
22960: GO 22849
22962: POP
22963: POP
// end ;
22964: LD_VAR 0 3
22968: RET
// export function ScanBase ( side , base_area ) ; begin
22969: LD_INT 0
22971: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22972: LD_ADDR_VAR 0 3
22976: PUSH
22977: LD_VAR 0 2
22981: PPUSH
22982: LD_INT 81
22984: PUSH
22985: LD_VAR 0 1
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PPUSH
22994: CALL_OW 70
22998: ST_TO_ADDR
// end ;
22999: LD_VAR 0 3
23003: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23004: LD_INT 0
23006: PPUSH
23007: PPUSH
23008: PPUSH
23009: PPUSH
// result := false ;
23010: LD_ADDR_VAR 0 2
23014: PUSH
23015: LD_INT 0
23017: ST_TO_ADDR
// side := GetSide ( unit ) ;
23018: LD_ADDR_VAR 0 3
23022: PUSH
23023: LD_VAR 0 1
23027: PPUSH
23028: CALL_OW 255
23032: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23033: LD_ADDR_VAR 0 4
23037: PUSH
23038: LD_VAR 0 1
23042: PPUSH
23043: CALL_OW 248
23047: ST_TO_ADDR
// case nat of 1 :
23048: LD_VAR 0 4
23052: PUSH
23053: LD_INT 1
23055: DOUBLE
23056: EQUAL
23057: IFTRUE 23061
23059: GO 23072
23061: POP
// tech := tech_lassight ; 2 :
23062: LD_ADDR_VAR 0 5
23066: PUSH
23067: LD_INT 12
23069: ST_TO_ADDR
23070: GO 23111
23072: LD_INT 2
23074: DOUBLE
23075: EQUAL
23076: IFTRUE 23080
23078: GO 23091
23080: POP
// tech := tech_mortar ; 3 :
23081: LD_ADDR_VAR 0 5
23085: PUSH
23086: LD_INT 41
23088: ST_TO_ADDR
23089: GO 23111
23091: LD_INT 3
23093: DOUBLE
23094: EQUAL
23095: IFTRUE 23099
23097: GO 23110
23099: POP
// tech := tech_bazooka ; end ;
23100: LD_ADDR_VAR 0 5
23104: PUSH
23105: LD_INT 44
23107: ST_TO_ADDR
23108: GO 23111
23110: POP
// if Researched ( side , tech ) then
23111: LD_VAR 0 3
23115: PPUSH
23116: LD_VAR 0 5
23120: PPUSH
23121: CALL_OW 325
23125: IFFALSE 23152
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23127: LD_ADDR_VAR 0 2
23131: PUSH
23132: LD_INT 5
23134: PUSH
23135: LD_INT 8
23137: PUSH
23138: LD_INT 9
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: PUSH
23146: LD_VAR 0 4
23150: ARRAY
23151: ST_TO_ADDR
// end ;
23152: LD_VAR 0 2
23156: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23157: LD_INT 0
23159: PPUSH
23160: PPUSH
23161: PPUSH
// if not mines then
23162: LD_VAR 0 2
23166: NOT
23167: IFFALSE 23171
// exit ;
23169: GO 23315
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23171: LD_ADDR_VAR 0 5
23175: PUSH
23176: LD_INT 81
23178: PUSH
23179: LD_VAR 0 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 3
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 3
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PPUSH
23209: CALL_OW 69
23213: ST_TO_ADDR
// for i in mines do
23214: LD_ADDR_VAR 0 4
23218: PUSH
23219: LD_VAR 0 2
23223: PUSH
23224: FOR_IN
23225: IFFALSE 23313
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23227: LD_VAR 0 4
23231: PUSH
23232: LD_INT 1
23234: ARRAY
23235: PPUSH
23236: LD_VAR 0 4
23240: PUSH
23241: LD_INT 2
23243: ARRAY
23244: PPUSH
23245: CALL_OW 458
23249: NOT
23250: IFFALSE 23254
// continue ;
23252: GO 23224
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23254: LD_VAR 0 4
23258: PUSH
23259: LD_INT 1
23261: ARRAY
23262: PPUSH
23263: LD_VAR 0 4
23267: PUSH
23268: LD_INT 2
23270: ARRAY
23271: PPUSH
23272: CALL_OW 428
23276: PUSH
23277: LD_VAR 0 5
23281: IN
23282: IFFALSE 23311
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23284: LD_VAR 0 4
23288: PUSH
23289: LD_INT 1
23291: ARRAY
23292: PPUSH
23293: LD_VAR 0 4
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: CALL_OW 456
// end ;
23311: GO 23224
23313: POP
23314: POP
// end ;
23315: LD_VAR 0 3
23319: RET
// export function Count ( array ) ; var i ; begin
23320: LD_INT 0
23322: PPUSH
23323: PPUSH
// result := 0 ;
23324: LD_ADDR_VAR 0 2
23328: PUSH
23329: LD_INT 0
23331: ST_TO_ADDR
// for i in array do
23332: LD_ADDR_VAR 0 3
23336: PUSH
23337: LD_VAR 0 1
23341: PUSH
23342: FOR_IN
23343: IFFALSE 23367
// if i then
23345: LD_VAR 0 3
23349: IFFALSE 23365
// result := result + 1 ;
23351: LD_ADDR_VAR 0 2
23355: PUSH
23356: LD_VAR 0 2
23360: PUSH
23361: LD_INT 1
23363: PLUS
23364: ST_TO_ADDR
23365: GO 23342
23367: POP
23368: POP
// end ;
23369: LD_VAR 0 2
23373: RET
// export function IsEmpty ( building ) ; begin
23374: LD_INT 0
23376: PPUSH
// if not building then
23377: LD_VAR 0 1
23381: NOT
23382: IFFALSE 23386
// exit ;
23384: GO 23429
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23386: LD_ADDR_VAR 0 2
23390: PUSH
23391: LD_VAR 0 1
23395: PUSH
23396: LD_INT 22
23398: PUSH
23399: LD_VAR 0 1
23403: PPUSH
23404: CALL_OW 255
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 58
23415: PUSH
23416: EMPTY
23417: LIST
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PPUSH
23423: CALL_OW 69
23427: IN
23428: ST_TO_ADDR
// end ;
23429: LD_VAR 0 2
23433: RET
// export function IsNotFull ( building ) ; begin
23434: LD_INT 0
23436: PPUSH
// if not building then
23437: LD_VAR 0 1
23441: NOT
23442: IFFALSE 23446
// exit ;
23444: GO 23465
// result := UnitsInside ( building ) < 6 ;
23446: LD_ADDR_VAR 0 2
23450: PUSH
23451: LD_VAR 0 1
23455: PPUSH
23456: CALL_OW 313
23460: PUSH
23461: LD_INT 6
23463: LESS
23464: ST_TO_ADDR
// end ;
23465: LD_VAR 0 2
23469: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23470: LD_INT 0
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
// tmp := [ ] ;
23476: LD_ADDR_VAR 0 3
23480: PUSH
23481: EMPTY
23482: ST_TO_ADDR
// list := [ ] ;
23483: LD_ADDR_VAR 0 5
23487: PUSH
23488: EMPTY
23489: ST_TO_ADDR
// for i = 16 to 25 do
23490: LD_ADDR_VAR 0 4
23494: PUSH
23495: DOUBLE
23496: LD_INT 16
23498: DEC
23499: ST_TO_ADDR
23500: LD_INT 25
23502: PUSH
23503: FOR_TO
23504: IFFALSE 23577
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23506: LD_ADDR_VAR 0 3
23510: PUSH
23511: LD_VAR 0 3
23515: PUSH
23516: LD_INT 22
23518: PUSH
23519: LD_VAR 0 1
23523: PPUSH
23524: CALL_OW 255
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 91
23535: PUSH
23536: LD_VAR 0 1
23540: PUSH
23541: LD_INT 6
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 30
23551: PUSH
23552: LD_VAR 0 4
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: PPUSH
23569: CALL_OW 69
23573: ADD
23574: ST_TO_ADDR
23575: GO 23503
23577: POP
23578: POP
// for i = 1 to tmp do
23579: LD_ADDR_VAR 0 4
23583: PUSH
23584: DOUBLE
23585: LD_INT 1
23587: DEC
23588: ST_TO_ADDR
23589: LD_VAR 0 3
23593: PUSH
23594: FOR_TO
23595: IFFALSE 23683
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23597: LD_ADDR_VAR 0 5
23601: PUSH
23602: LD_VAR 0 5
23606: PUSH
23607: LD_VAR 0 3
23611: PUSH
23612: LD_VAR 0 4
23616: ARRAY
23617: PPUSH
23618: CALL_OW 266
23622: PUSH
23623: LD_VAR 0 3
23627: PUSH
23628: LD_VAR 0 4
23632: ARRAY
23633: PPUSH
23634: CALL_OW 250
23638: PUSH
23639: LD_VAR 0 3
23643: PUSH
23644: LD_VAR 0 4
23648: ARRAY
23649: PPUSH
23650: CALL_OW 251
23654: PUSH
23655: LD_VAR 0 3
23659: PUSH
23660: LD_VAR 0 4
23664: ARRAY
23665: PPUSH
23666: CALL_OW 254
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: PUSH
23677: EMPTY
23678: LIST
23679: ADD
23680: ST_TO_ADDR
23681: GO 23594
23683: POP
23684: POP
// result := list ;
23685: LD_ADDR_VAR 0 2
23689: PUSH
23690: LD_VAR 0 5
23694: ST_TO_ADDR
// end ;
23695: LD_VAR 0 2
23699: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23700: LD_INT 0
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
// if not factory then
23709: LD_VAR 0 1
23713: NOT
23714: IFFALSE 23718
// exit ;
23716: GO 24311
// if control = control_apeman then
23718: LD_VAR 0 4
23722: PUSH
23723: LD_INT 5
23725: EQUAL
23726: IFFALSE 23835
// begin tmp := UnitsInside ( factory ) ;
23728: LD_ADDR_VAR 0 8
23732: PUSH
23733: LD_VAR 0 1
23737: PPUSH
23738: CALL_OW 313
23742: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23743: LD_VAR 0 8
23747: PPUSH
23748: LD_INT 25
23750: PUSH
23751: LD_INT 12
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PPUSH
23758: CALL_OW 72
23762: NOT
23763: IFFALSE 23773
// control := control_manual ;
23765: LD_ADDR_VAR 0 4
23769: PUSH
23770: LD_INT 1
23772: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23773: LD_ADDR_VAR 0 8
23777: PUSH
23778: LD_VAR 0 1
23782: PPUSH
23783: CALL 23470 0 1
23787: ST_TO_ADDR
// if tmp then
23788: LD_VAR 0 8
23792: IFFALSE 23835
// begin for i in tmp do
23794: LD_ADDR_VAR 0 7
23798: PUSH
23799: LD_VAR 0 8
23803: PUSH
23804: FOR_IN
23805: IFFALSE 23833
// if i [ 1 ] = b_ext_radio then
23807: LD_VAR 0 7
23811: PUSH
23812: LD_INT 1
23814: ARRAY
23815: PUSH
23816: LD_INT 22
23818: EQUAL
23819: IFFALSE 23831
// begin control := control_remote ;
23821: LD_ADDR_VAR 0 4
23825: PUSH
23826: LD_INT 2
23828: ST_TO_ADDR
// break ;
23829: GO 23833
// end ;
23831: GO 23804
23833: POP
23834: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23835: LD_VAR 0 1
23839: PPUSH
23840: LD_VAR 0 2
23844: PPUSH
23845: LD_VAR 0 3
23849: PPUSH
23850: LD_VAR 0 4
23854: PPUSH
23855: LD_VAR 0 5
23859: PPUSH
23860: CALL_OW 448
23864: IFFALSE 23899
// begin result := [ chassis , engine , control , weapon ] ;
23866: LD_ADDR_VAR 0 6
23870: PUSH
23871: LD_VAR 0 2
23875: PUSH
23876: LD_VAR 0 3
23880: PUSH
23881: LD_VAR 0 4
23885: PUSH
23886: LD_VAR 0 5
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: ST_TO_ADDR
// exit ;
23897: GO 24311
// end ; _chassis := AvailableChassisList ( factory ) ;
23899: LD_ADDR_VAR 0 9
23903: PUSH
23904: LD_VAR 0 1
23908: PPUSH
23909: CALL_OW 475
23913: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23914: LD_ADDR_VAR 0 11
23918: PUSH
23919: LD_VAR 0 1
23923: PPUSH
23924: CALL_OW 476
23928: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23929: LD_ADDR_VAR 0 12
23933: PUSH
23934: LD_VAR 0 1
23938: PPUSH
23939: CALL_OW 477
23943: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23944: LD_ADDR_VAR 0 10
23948: PUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: CALL_OW 478
23958: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23959: LD_VAR 0 9
23963: NOT
23964: PUSH
23965: LD_VAR 0 11
23969: NOT
23970: OR
23971: PUSH
23972: LD_VAR 0 12
23976: NOT
23977: OR
23978: PUSH
23979: LD_VAR 0 10
23983: NOT
23984: OR
23985: IFFALSE 24020
// begin result := [ chassis , engine , control , weapon ] ;
23987: LD_ADDR_VAR 0 6
23991: PUSH
23992: LD_VAR 0 2
23996: PUSH
23997: LD_VAR 0 3
24001: PUSH
24002: LD_VAR 0 4
24006: PUSH
24007: LD_VAR 0 5
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: ST_TO_ADDR
// exit ;
24018: GO 24311
// end ; if not chassis in _chassis then
24020: LD_VAR 0 2
24024: PUSH
24025: LD_VAR 0 9
24029: IN
24030: NOT
24031: IFFALSE 24057
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24033: LD_ADDR_VAR 0 2
24037: PUSH
24038: LD_VAR 0 9
24042: PUSH
24043: LD_INT 1
24045: PPUSH
24046: LD_VAR 0 9
24050: PPUSH
24051: CALL_OW 12
24055: ARRAY
24056: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24057: LD_VAR 0 2
24061: PPUSH
24062: LD_VAR 0 3
24066: PPUSH
24067: CALL 24316 0 2
24071: NOT
24072: IFFALSE 24131
// repeat engine := _engine [ 1 ] ;
24074: LD_ADDR_VAR 0 3
24078: PUSH
24079: LD_VAR 0 11
24083: PUSH
24084: LD_INT 1
24086: ARRAY
24087: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24088: LD_ADDR_VAR 0 11
24092: PUSH
24093: LD_VAR 0 11
24097: PPUSH
24098: LD_INT 1
24100: PPUSH
24101: CALL_OW 3
24105: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24106: LD_VAR 0 2
24110: PPUSH
24111: LD_VAR 0 3
24115: PPUSH
24116: CALL 24316 0 2
24120: PUSH
24121: LD_VAR 0 11
24125: PUSH
24126: EMPTY
24127: EQUAL
24128: OR
24129: IFFALSE 24074
// if not control in _control then
24131: LD_VAR 0 4
24135: PUSH
24136: LD_VAR 0 12
24140: IN
24141: NOT
24142: IFFALSE 24168
// control := _control [ rand ( 1 , _control ) ] ;
24144: LD_ADDR_VAR 0 4
24148: PUSH
24149: LD_VAR 0 12
24153: PUSH
24154: LD_INT 1
24156: PPUSH
24157: LD_VAR 0 12
24161: PPUSH
24162: CALL_OW 12
24166: ARRAY
24167: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24168: LD_VAR 0 2
24172: PPUSH
24173: LD_VAR 0 5
24177: PPUSH
24178: CALL 24536 0 2
24182: NOT
24183: IFFALSE 24242
// repeat weapon := _weapon [ 1 ] ;
24185: LD_ADDR_VAR 0 5
24189: PUSH
24190: LD_VAR 0 10
24194: PUSH
24195: LD_INT 1
24197: ARRAY
24198: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24199: LD_ADDR_VAR 0 10
24203: PUSH
24204: LD_VAR 0 10
24208: PPUSH
24209: LD_INT 1
24211: PPUSH
24212: CALL_OW 3
24216: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24217: LD_VAR 0 2
24221: PPUSH
24222: LD_VAR 0 5
24226: PPUSH
24227: CALL 24536 0 2
24231: PUSH
24232: LD_VAR 0 10
24236: PUSH
24237: EMPTY
24238: EQUAL
24239: OR
24240: IFFALSE 24185
// result := [ ] ;
24242: LD_ADDR_VAR 0 6
24246: PUSH
24247: EMPTY
24248: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24249: LD_VAR 0 1
24253: PPUSH
24254: LD_VAR 0 2
24258: PPUSH
24259: LD_VAR 0 3
24263: PPUSH
24264: LD_VAR 0 4
24268: PPUSH
24269: LD_VAR 0 5
24273: PPUSH
24274: CALL_OW 448
24278: IFFALSE 24311
// result := [ chassis , engine , control , weapon ] ;
24280: LD_ADDR_VAR 0 6
24284: PUSH
24285: LD_VAR 0 2
24289: PUSH
24290: LD_VAR 0 3
24294: PUSH
24295: LD_VAR 0 4
24299: PUSH
24300: LD_VAR 0 5
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: ST_TO_ADDR
// end ;
24311: LD_VAR 0 6
24315: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24316: LD_INT 0
24318: PPUSH
// if not chassis or not engine then
24319: LD_VAR 0 1
24323: NOT
24324: PUSH
24325: LD_VAR 0 2
24329: NOT
24330: OR
24331: IFFALSE 24335
// exit ;
24333: GO 24531
// case engine of engine_solar :
24335: LD_VAR 0 2
24339: PUSH
24340: LD_INT 2
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24386
24348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24349: LD_ADDR_VAR 0 3
24353: PUSH
24354: LD_INT 11
24356: PUSH
24357: LD_INT 12
24359: PUSH
24360: LD_INT 13
24362: PUSH
24363: LD_INT 14
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: LD_INT 3
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: ST_TO_ADDR
24384: GO 24515
24386: LD_INT 1
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24456
24394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24395: LD_ADDR_VAR 0 3
24399: PUSH
24400: LD_INT 11
24402: PUSH
24403: LD_INT 12
24405: PUSH
24406: LD_INT 13
24408: PUSH
24409: LD_INT 14
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 3
24420: PUSH
24421: LD_INT 4
24423: PUSH
24424: LD_INT 5
24426: PUSH
24427: LD_INT 21
24429: PUSH
24430: LD_INT 23
24432: PUSH
24433: LD_INT 22
24435: PUSH
24436: LD_INT 24
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: ST_TO_ADDR
24454: GO 24515
24456: LD_INT 3
24458: DOUBLE
24459: EQUAL
24460: IFTRUE 24464
24462: GO 24514
24464: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24465: LD_ADDR_VAR 0 3
24469: PUSH
24470: LD_INT 13
24472: PUSH
24473: LD_INT 14
24475: PUSH
24476: LD_INT 2
24478: PUSH
24479: LD_INT 3
24481: PUSH
24482: LD_INT 4
24484: PUSH
24485: LD_INT 5
24487: PUSH
24488: LD_INT 21
24490: PUSH
24491: LD_INT 22
24493: PUSH
24494: LD_INT 23
24496: PUSH
24497: LD_INT 24
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: ST_TO_ADDR
24512: GO 24515
24514: POP
// result := ( chassis in result ) ;
24515: LD_ADDR_VAR 0 3
24519: PUSH
24520: LD_VAR 0 1
24524: PUSH
24525: LD_VAR 0 3
24529: IN
24530: ST_TO_ADDR
// end ;
24531: LD_VAR 0 3
24535: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24536: LD_INT 0
24538: PPUSH
// if not chassis or not weapon then
24539: LD_VAR 0 1
24543: NOT
24544: PUSH
24545: LD_VAR 0 2
24549: NOT
24550: OR
24551: IFFALSE 24555
// exit ;
24553: GO 25581
// case weapon of us_machine_gun :
24555: LD_VAR 0 2
24559: PUSH
24560: LD_INT 2
24562: DOUBLE
24563: EQUAL
24564: IFTRUE 24568
24566: GO 24598
24568: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24569: LD_ADDR_VAR 0 3
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: LD_INT 2
24579: PUSH
24580: LD_INT 3
24582: PUSH
24583: LD_INT 4
24585: PUSH
24586: LD_INT 5
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: ST_TO_ADDR
24596: GO 25565
24598: LD_INT 3
24600: DOUBLE
24601: EQUAL
24602: IFTRUE 24606
24604: GO 24636
24606: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24607: LD_ADDR_VAR 0 3
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: LD_INT 3
24620: PUSH
24621: LD_INT 4
24623: PUSH
24624: LD_INT 5
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: ST_TO_ADDR
24634: GO 25565
24636: LD_INT 11
24638: DOUBLE
24639: EQUAL
24640: IFTRUE 24644
24642: GO 24674
24644: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: LD_INT 2
24655: PUSH
24656: LD_INT 3
24658: PUSH
24659: LD_INT 4
24661: PUSH
24662: LD_INT 5
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: ST_TO_ADDR
24672: GO 25565
24674: LD_INT 4
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24708
24682: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: LD_INT 4
24696: PUSH
24697: LD_INT 5
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: ST_TO_ADDR
24706: GO 25565
24708: LD_INT 5
24710: DOUBLE
24711: EQUAL
24712: IFTRUE 24716
24714: GO 24742
24716: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24717: LD_ADDR_VAR 0 3
24721: PUSH
24722: LD_INT 2
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: LD_INT 4
24730: PUSH
24731: LD_INT 5
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: ST_TO_ADDR
24740: GO 25565
24742: LD_INT 9
24744: DOUBLE
24745: EQUAL
24746: IFTRUE 24750
24748: GO 24776
24750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24751: LD_ADDR_VAR 0 3
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: LD_INT 3
24761: PUSH
24762: LD_INT 4
24764: PUSH
24765: LD_INT 5
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: ST_TO_ADDR
24774: GO 25565
24776: LD_INT 7
24778: DOUBLE
24779: EQUAL
24780: IFTRUE 24784
24782: GO 24810
24784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24785: LD_ADDR_VAR 0 3
24789: PUSH
24790: LD_INT 2
24792: PUSH
24793: LD_INT 3
24795: PUSH
24796: LD_INT 4
24798: PUSH
24799: LD_INT 5
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: ST_TO_ADDR
24808: GO 25565
24810: LD_INT 12
24812: DOUBLE
24813: EQUAL
24814: IFTRUE 24818
24816: GO 24844
24818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24819: LD_ADDR_VAR 0 3
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: LD_INT 3
24829: PUSH
24830: LD_INT 4
24832: PUSH
24833: LD_INT 5
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: ST_TO_ADDR
24842: GO 25565
24844: LD_INT 13
24846: DOUBLE
24847: EQUAL
24848: IFTRUE 24852
24850: GO 24878
24852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24853: LD_ADDR_VAR 0 3
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: LD_INT 4
24866: PUSH
24867: LD_INT 5
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: ST_TO_ADDR
24876: GO 25565
24878: LD_INT 14
24880: DOUBLE
24881: EQUAL
24882: IFTRUE 24886
24884: GO 24904
24886: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24887: LD_ADDR_VAR 0 3
24891: PUSH
24892: LD_INT 4
24894: PUSH
24895: LD_INT 5
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: ST_TO_ADDR
24902: GO 25565
24904: LD_INT 6
24906: DOUBLE
24907: EQUAL
24908: IFTRUE 24912
24910: GO 24930
24912: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24913: LD_ADDR_VAR 0 3
24917: PUSH
24918: LD_INT 4
24920: PUSH
24921: LD_INT 5
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: ST_TO_ADDR
24928: GO 25565
24930: LD_INT 10
24932: DOUBLE
24933: EQUAL
24934: IFTRUE 24938
24936: GO 24956
24938: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24939: LD_ADDR_VAR 0 3
24943: PUSH
24944: LD_INT 4
24946: PUSH
24947: LD_INT 5
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: ST_TO_ADDR
24954: GO 25565
24956: LD_INT 22
24958: DOUBLE
24959: EQUAL
24960: IFTRUE 24964
24962: GO 24990
24964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_INT 11
24972: PUSH
24973: LD_INT 12
24975: PUSH
24976: LD_INT 13
24978: PUSH
24979: LD_INT 14
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: ST_TO_ADDR
24988: GO 25565
24990: LD_INT 23
24992: DOUBLE
24993: EQUAL
24994: IFTRUE 24998
24996: GO 25024
24998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_INT 11
25006: PUSH
25007: LD_INT 12
25009: PUSH
25010: LD_INT 13
25012: PUSH
25013: LD_INT 14
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: ST_TO_ADDR
25022: GO 25565
25024: LD_INT 24
25026: DOUBLE
25027: EQUAL
25028: IFTRUE 25032
25030: GO 25058
25032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25033: LD_ADDR_VAR 0 3
25037: PUSH
25038: LD_INT 11
25040: PUSH
25041: LD_INT 12
25043: PUSH
25044: LD_INT 13
25046: PUSH
25047: LD_INT 14
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: ST_TO_ADDR
25056: GO 25565
25058: LD_INT 30
25060: DOUBLE
25061: EQUAL
25062: IFTRUE 25066
25064: GO 25092
25066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25067: LD_ADDR_VAR 0 3
25071: PUSH
25072: LD_INT 11
25074: PUSH
25075: LD_INT 12
25077: PUSH
25078: LD_INT 13
25080: PUSH
25081: LD_INT 14
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: ST_TO_ADDR
25090: GO 25565
25092: LD_INT 25
25094: DOUBLE
25095: EQUAL
25096: IFTRUE 25100
25098: GO 25118
25100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25101: LD_ADDR_VAR 0 3
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: LD_INT 14
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: ST_TO_ADDR
25116: GO 25565
25118: LD_INT 27
25120: DOUBLE
25121: EQUAL
25122: IFTRUE 25126
25124: GO 25144
25126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25127: LD_ADDR_VAR 0 3
25131: PUSH
25132: LD_INT 13
25134: PUSH
25135: LD_INT 14
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: ST_TO_ADDR
25142: GO 25565
25144: LD_INT 28
25146: DOUBLE
25147: EQUAL
25148: IFTRUE 25152
25150: GO 25170
25152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25153: LD_ADDR_VAR 0 3
25157: PUSH
25158: LD_INT 13
25160: PUSH
25161: LD_INT 14
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: ST_TO_ADDR
25168: GO 25565
25170: LD_INT 29
25172: DOUBLE
25173: EQUAL
25174: IFTRUE 25178
25176: GO 25196
25178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25179: LD_ADDR_VAR 0 3
25183: PUSH
25184: LD_INT 13
25186: PUSH
25187: LD_INT 14
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: ST_TO_ADDR
25194: GO 25565
25196: LD_INT 31
25198: DOUBLE
25199: EQUAL
25200: IFTRUE 25204
25202: GO 25222
25204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25205: LD_ADDR_VAR 0 3
25209: PUSH
25210: LD_INT 13
25212: PUSH
25213: LD_INT 14
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: ST_TO_ADDR
25220: GO 25565
25222: LD_INT 26
25224: DOUBLE
25225: EQUAL
25226: IFTRUE 25230
25228: GO 25248
25230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25231: LD_ADDR_VAR 0 3
25235: PUSH
25236: LD_INT 13
25238: PUSH
25239: LD_INT 14
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: ST_TO_ADDR
25246: GO 25565
25248: LD_INT 42
25250: DOUBLE
25251: EQUAL
25252: IFTRUE 25256
25254: GO 25282
25256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: LD_INT 21
25264: PUSH
25265: LD_INT 22
25267: PUSH
25268: LD_INT 23
25270: PUSH
25271: LD_INT 24
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: ST_TO_ADDR
25280: GO 25565
25282: LD_INT 43
25284: DOUBLE
25285: EQUAL
25286: IFTRUE 25290
25288: GO 25316
25290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25291: LD_ADDR_VAR 0 3
25295: PUSH
25296: LD_INT 21
25298: PUSH
25299: LD_INT 22
25301: PUSH
25302: LD_INT 23
25304: PUSH
25305: LD_INT 24
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
25314: GO 25565
25316: LD_INT 44
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25350
25324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_INT 21
25332: PUSH
25333: LD_INT 22
25335: PUSH
25336: LD_INT 23
25338: PUSH
25339: LD_INT 24
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: ST_TO_ADDR
25348: GO 25565
25350: LD_INT 45
25352: DOUBLE
25353: EQUAL
25354: IFTRUE 25358
25356: GO 25384
25358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25359: LD_ADDR_VAR 0 3
25363: PUSH
25364: LD_INT 21
25366: PUSH
25367: LD_INT 22
25369: PUSH
25370: LD_INT 23
25372: PUSH
25373: LD_INT 24
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: ST_TO_ADDR
25382: GO 25565
25384: LD_INT 49
25386: DOUBLE
25387: EQUAL
25388: IFTRUE 25392
25390: GO 25418
25392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25393: LD_ADDR_VAR 0 3
25397: PUSH
25398: LD_INT 21
25400: PUSH
25401: LD_INT 22
25403: PUSH
25404: LD_INT 23
25406: PUSH
25407: LD_INT 24
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: ST_TO_ADDR
25416: GO 25565
25418: LD_INT 51
25420: DOUBLE
25421: EQUAL
25422: IFTRUE 25426
25424: GO 25452
25426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25427: LD_ADDR_VAR 0 3
25431: PUSH
25432: LD_INT 21
25434: PUSH
25435: LD_INT 22
25437: PUSH
25438: LD_INT 23
25440: PUSH
25441: LD_INT 24
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
25450: GO 25565
25452: LD_INT 52
25454: DOUBLE
25455: EQUAL
25456: IFTRUE 25460
25458: GO 25486
25460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_INT 21
25468: PUSH
25469: LD_INT 22
25471: PUSH
25472: LD_INT 23
25474: PUSH
25475: LD_INT 24
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: ST_TO_ADDR
25484: GO 25565
25486: LD_INT 53
25488: DOUBLE
25489: EQUAL
25490: IFTRUE 25494
25492: GO 25512
25494: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 23
25502: PUSH
25503: LD_INT 24
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: ST_TO_ADDR
25510: GO 25565
25512: LD_INT 46
25514: DOUBLE
25515: EQUAL
25516: IFTRUE 25520
25518: GO 25538
25520: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25521: LD_ADDR_VAR 0 3
25525: PUSH
25526: LD_INT 23
25528: PUSH
25529: LD_INT 24
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: ST_TO_ADDR
25536: GO 25565
25538: LD_INT 47
25540: DOUBLE
25541: EQUAL
25542: IFTRUE 25546
25544: GO 25564
25546: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: LD_INT 23
25554: PUSH
25555: LD_INT 24
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: ST_TO_ADDR
25562: GO 25565
25564: POP
// result := ( chassis in result ) ;
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_VAR 0 1
25574: PUSH
25575: LD_VAR 0 3
25579: IN
25580: ST_TO_ADDR
// end ;
25581: LD_VAR 0 3
25585: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25586: LD_INT 0
25588: PPUSH
25589: PPUSH
25590: PPUSH
25591: PPUSH
25592: PPUSH
25593: PPUSH
25594: PPUSH
// result := array ;
25595: LD_ADDR_VAR 0 5
25599: PUSH
25600: LD_VAR 0 1
25604: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25605: LD_VAR 0 1
25609: NOT
25610: PUSH
25611: LD_VAR 0 2
25615: NOT
25616: OR
25617: PUSH
25618: LD_VAR 0 3
25622: NOT
25623: OR
25624: PUSH
25625: LD_VAR 0 2
25629: PUSH
25630: LD_VAR 0 1
25634: GREATER
25635: OR
25636: PUSH
25637: LD_VAR 0 3
25641: PUSH
25642: LD_VAR 0 1
25646: GREATER
25647: OR
25648: IFFALSE 25652
// exit ;
25650: GO 25948
// if direction then
25652: LD_VAR 0 4
25656: IFFALSE 25720
// begin d := 1 ;
25658: LD_ADDR_VAR 0 9
25662: PUSH
25663: LD_INT 1
25665: ST_TO_ADDR
// if i_from > i_to then
25666: LD_VAR 0 2
25670: PUSH
25671: LD_VAR 0 3
25675: GREATER
25676: IFFALSE 25702
// length := ( array - i_from ) + i_to else
25678: LD_ADDR_VAR 0 11
25682: PUSH
25683: LD_VAR 0 1
25687: PUSH
25688: LD_VAR 0 2
25692: MINUS
25693: PUSH
25694: LD_VAR 0 3
25698: PLUS
25699: ST_TO_ADDR
25700: GO 25718
// length := i_to - i_from ;
25702: LD_ADDR_VAR 0 11
25706: PUSH
25707: LD_VAR 0 3
25711: PUSH
25712: LD_VAR 0 2
25716: MINUS
25717: ST_TO_ADDR
// end else
25718: GO 25781
// begin d := - 1 ;
25720: LD_ADDR_VAR 0 9
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: ST_TO_ADDR
// if i_from > i_to then
25729: LD_VAR 0 2
25733: PUSH
25734: LD_VAR 0 3
25738: GREATER
25739: IFFALSE 25759
// length := i_from - i_to else
25741: LD_ADDR_VAR 0 11
25745: PUSH
25746: LD_VAR 0 2
25750: PUSH
25751: LD_VAR 0 3
25755: MINUS
25756: ST_TO_ADDR
25757: GO 25781
// length := ( array - i_to ) + i_from ;
25759: LD_ADDR_VAR 0 11
25763: PUSH
25764: LD_VAR 0 1
25768: PUSH
25769: LD_VAR 0 3
25773: MINUS
25774: PUSH
25775: LD_VAR 0 2
25779: PLUS
25780: ST_TO_ADDR
// end ; if not length then
25781: LD_VAR 0 11
25785: NOT
25786: IFFALSE 25790
// exit ;
25788: GO 25948
// tmp := array ;
25790: LD_ADDR_VAR 0 10
25794: PUSH
25795: LD_VAR 0 1
25799: ST_TO_ADDR
// for i = 1 to length do
25800: LD_ADDR_VAR 0 6
25804: PUSH
25805: DOUBLE
25806: LD_INT 1
25808: DEC
25809: ST_TO_ADDR
25810: LD_VAR 0 11
25814: PUSH
25815: FOR_TO
25816: IFFALSE 25936
// begin for j = 1 to array do
25818: LD_ADDR_VAR 0 7
25822: PUSH
25823: DOUBLE
25824: LD_INT 1
25826: DEC
25827: ST_TO_ADDR
25828: LD_VAR 0 1
25832: PUSH
25833: FOR_TO
25834: IFFALSE 25922
// begin k := j + d ;
25836: LD_ADDR_VAR 0 8
25840: PUSH
25841: LD_VAR 0 7
25845: PUSH
25846: LD_VAR 0 9
25850: PLUS
25851: ST_TO_ADDR
// if k > array then
25852: LD_VAR 0 8
25856: PUSH
25857: LD_VAR 0 1
25861: GREATER
25862: IFFALSE 25872
// k := 1 ;
25864: LD_ADDR_VAR 0 8
25868: PUSH
25869: LD_INT 1
25871: ST_TO_ADDR
// if not k then
25872: LD_VAR 0 8
25876: NOT
25877: IFFALSE 25889
// k := array ;
25879: LD_ADDR_VAR 0 8
25883: PUSH
25884: LD_VAR 0 1
25888: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25889: LD_ADDR_VAR 0 10
25893: PUSH
25894: LD_VAR 0 10
25898: PPUSH
25899: LD_VAR 0 8
25903: PPUSH
25904: LD_VAR 0 1
25908: PUSH
25909: LD_VAR 0 7
25913: ARRAY
25914: PPUSH
25915: CALL_OW 1
25919: ST_TO_ADDR
// end ;
25920: GO 25833
25922: POP
25923: POP
// array := tmp ;
25924: LD_ADDR_VAR 0 1
25928: PUSH
25929: LD_VAR 0 10
25933: ST_TO_ADDR
// end ;
25934: GO 25815
25936: POP
25937: POP
// result := array ;
25938: LD_ADDR_VAR 0 5
25942: PUSH
25943: LD_VAR 0 1
25947: ST_TO_ADDR
// end ;
25948: LD_VAR 0 5
25952: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25953: LD_INT 0
25955: PPUSH
25956: PPUSH
// result := 0 ;
25957: LD_ADDR_VAR 0 3
25961: PUSH
25962: LD_INT 0
25964: ST_TO_ADDR
// if not array or not value in array then
25965: LD_VAR 0 1
25969: NOT
25970: PUSH
25971: LD_VAR 0 2
25975: PUSH
25976: LD_VAR 0 1
25980: IN
25981: NOT
25982: OR
25983: IFFALSE 25987
// exit ;
25985: GO 26041
// for i = 1 to array do
25987: LD_ADDR_VAR 0 4
25991: PUSH
25992: DOUBLE
25993: LD_INT 1
25995: DEC
25996: ST_TO_ADDR
25997: LD_VAR 0 1
26001: PUSH
26002: FOR_TO
26003: IFFALSE 26039
// if value = array [ i ] then
26005: LD_VAR 0 2
26009: PUSH
26010: LD_VAR 0 1
26014: PUSH
26015: LD_VAR 0 4
26019: ARRAY
26020: EQUAL
26021: IFFALSE 26037
// begin result := i ;
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: LD_VAR 0 4
26032: ST_TO_ADDR
// exit ;
26033: POP
26034: POP
26035: GO 26041
// end ;
26037: GO 26002
26039: POP
26040: POP
// end ;
26041: LD_VAR 0 3
26045: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26046: LD_INT 0
26048: PPUSH
// vc_chassis := chassis ;
26049: LD_ADDR_OWVAR 37
26053: PUSH
26054: LD_VAR 0 1
26058: ST_TO_ADDR
// vc_engine := engine ;
26059: LD_ADDR_OWVAR 39
26063: PUSH
26064: LD_VAR 0 2
26068: ST_TO_ADDR
// vc_control := control ;
26069: LD_ADDR_OWVAR 38
26073: PUSH
26074: LD_VAR 0 3
26078: ST_TO_ADDR
// vc_weapon := weapon ;
26079: LD_ADDR_OWVAR 40
26083: PUSH
26084: LD_VAR 0 4
26088: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26089: LD_ADDR_OWVAR 41
26093: PUSH
26094: LD_VAR 0 5
26098: ST_TO_ADDR
// end ;
26099: LD_VAR 0 6
26103: RET
// export function WantPlant ( unit ) ; var task ; begin
26104: LD_INT 0
26106: PPUSH
26107: PPUSH
// result := false ;
26108: LD_ADDR_VAR 0 2
26112: PUSH
26113: LD_INT 0
26115: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26116: LD_ADDR_VAR 0 3
26120: PUSH
26121: LD_VAR 0 1
26125: PPUSH
26126: CALL_OW 437
26130: ST_TO_ADDR
// if task then
26131: LD_VAR 0 3
26135: IFFALSE 26163
// if task [ 1 ] [ 1 ] = p then
26137: LD_VAR 0 3
26141: PUSH
26142: LD_INT 1
26144: ARRAY
26145: PUSH
26146: LD_INT 1
26148: ARRAY
26149: PUSH
26150: LD_STRING p
26152: EQUAL
26153: IFFALSE 26163
// result := true ;
26155: LD_ADDR_VAR 0 2
26159: PUSH
26160: LD_INT 1
26162: ST_TO_ADDR
// end ;
26163: LD_VAR 0 2
26167: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26168: LD_INT 0
26170: PPUSH
26171: PPUSH
26172: PPUSH
26173: PPUSH
// if pos < 1 then
26174: LD_VAR 0 2
26178: PUSH
26179: LD_INT 1
26181: LESS
26182: IFFALSE 26186
// exit ;
26184: GO 26489
// if pos = 1 then
26186: LD_VAR 0 2
26190: PUSH
26191: LD_INT 1
26193: EQUAL
26194: IFFALSE 26227
// result := Replace ( arr , pos [ 1 ] , value ) else
26196: LD_ADDR_VAR 0 4
26200: PUSH
26201: LD_VAR 0 1
26205: PPUSH
26206: LD_VAR 0 2
26210: PUSH
26211: LD_INT 1
26213: ARRAY
26214: PPUSH
26215: LD_VAR 0 3
26219: PPUSH
26220: CALL_OW 1
26224: ST_TO_ADDR
26225: GO 26489
// begin tmp := arr ;
26227: LD_ADDR_VAR 0 6
26231: PUSH
26232: LD_VAR 0 1
26236: ST_TO_ADDR
// s_arr := [ tmp ] ;
26237: LD_ADDR_VAR 0 7
26241: PUSH
26242: LD_VAR 0 6
26246: PUSH
26247: EMPTY
26248: LIST
26249: ST_TO_ADDR
// for i = 1 to pos - 1 do
26250: LD_ADDR_VAR 0 5
26254: PUSH
26255: DOUBLE
26256: LD_INT 1
26258: DEC
26259: ST_TO_ADDR
26260: LD_VAR 0 2
26264: PUSH
26265: LD_INT 1
26267: MINUS
26268: PUSH
26269: FOR_TO
26270: IFFALSE 26315
// begin tmp := tmp [ pos [ i ] ] ;
26272: LD_ADDR_VAR 0 6
26276: PUSH
26277: LD_VAR 0 6
26281: PUSH
26282: LD_VAR 0 2
26286: PUSH
26287: LD_VAR 0 5
26291: ARRAY
26292: ARRAY
26293: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26294: LD_ADDR_VAR 0 7
26298: PUSH
26299: LD_VAR 0 7
26303: PUSH
26304: LD_VAR 0 6
26308: PUSH
26309: EMPTY
26310: LIST
26311: ADD
26312: ST_TO_ADDR
// end ;
26313: GO 26269
26315: POP
26316: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26317: LD_ADDR_VAR 0 6
26321: PUSH
26322: LD_VAR 0 6
26326: PPUSH
26327: LD_VAR 0 2
26331: PUSH
26332: LD_VAR 0 2
26336: ARRAY
26337: PPUSH
26338: LD_VAR 0 3
26342: PPUSH
26343: CALL_OW 1
26347: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26348: LD_ADDR_VAR 0 7
26352: PUSH
26353: LD_VAR 0 7
26357: PPUSH
26358: LD_VAR 0 7
26362: PPUSH
26363: LD_VAR 0 6
26367: PPUSH
26368: CALL_OW 1
26372: ST_TO_ADDR
// for i = s_arr downto 2 do
26373: LD_ADDR_VAR 0 5
26377: PUSH
26378: DOUBLE
26379: LD_VAR 0 7
26383: INC
26384: ST_TO_ADDR
26385: LD_INT 2
26387: PUSH
26388: FOR_DOWNTO
26389: IFFALSE 26473
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26391: LD_ADDR_VAR 0 6
26395: PUSH
26396: LD_VAR 0 7
26400: PUSH
26401: LD_VAR 0 5
26405: PUSH
26406: LD_INT 1
26408: MINUS
26409: ARRAY
26410: PPUSH
26411: LD_VAR 0 2
26415: PUSH
26416: LD_VAR 0 5
26420: PUSH
26421: LD_INT 1
26423: MINUS
26424: ARRAY
26425: PPUSH
26426: LD_VAR 0 7
26430: PUSH
26431: LD_VAR 0 5
26435: ARRAY
26436: PPUSH
26437: CALL_OW 1
26441: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26442: LD_ADDR_VAR 0 7
26446: PUSH
26447: LD_VAR 0 7
26451: PPUSH
26452: LD_VAR 0 5
26456: PUSH
26457: LD_INT 1
26459: MINUS
26460: PPUSH
26461: LD_VAR 0 6
26465: PPUSH
26466: CALL_OW 1
26470: ST_TO_ADDR
// end ;
26471: GO 26388
26473: POP
26474: POP
// result := s_arr [ 1 ] ;
26475: LD_ADDR_VAR 0 4
26479: PUSH
26480: LD_VAR 0 7
26484: PUSH
26485: LD_INT 1
26487: ARRAY
26488: ST_TO_ADDR
// end ; end ;
26489: LD_VAR 0 4
26493: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26494: LD_INT 0
26496: PPUSH
26497: PPUSH
// if not list then
26498: LD_VAR 0 1
26502: NOT
26503: IFFALSE 26507
// exit ;
26505: GO 26598
// i := list [ pos1 ] ;
26507: LD_ADDR_VAR 0 5
26511: PUSH
26512: LD_VAR 0 1
26516: PUSH
26517: LD_VAR 0 2
26521: ARRAY
26522: ST_TO_ADDR
// if not i then
26523: LD_VAR 0 5
26527: NOT
26528: IFFALSE 26532
// exit ;
26530: GO 26598
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26532: LD_ADDR_VAR 0 1
26536: PUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: LD_VAR 0 2
26546: PPUSH
26547: LD_VAR 0 1
26551: PUSH
26552: LD_VAR 0 3
26556: ARRAY
26557: PPUSH
26558: CALL_OW 1
26562: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26563: LD_ADDR_VAR 0 1
26567: PUSH
26568: LD_VAR 0 1
26572: PPUSH
26573: LD_VAR 0 3
26577: PPUSH
26578: LD_VAR 0 5
26582: PPUSH
26583: CALL_OW 1
26587: ST_TO_ADDR
// result := list ;
26588: LD_ADDR_VAR 0 4
26592: PUSH
26593: LD_VAR 0 1
26597: ST_TO_ADDR
// end ;
26598: LD_VAR 0 4
26602: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26603: LD_INT 0
26605: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26606: LD_ADDR_VAR 0 5
26610: PUSH
26611: LD_VAR 0 1
26615: PPUSH
26616: CALL_OW 250
26620: PPUSH
26621: LD_VAR 0 1
26625: PPUSH
26626: CALL_OW 251
26630: PPUSH
26631: LD_VAR 0 2
26635: PPUSH
26636: LD_VAR 0 3
26640: PPUSH
26641: LD_VAR 0 4
26645: PPUSH
26646: CALL 26656 0 5
26650: ST_TO_ADDR
// end ;
26651: LD_VAR 0 5
26655: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26656: LD_INT 0
26658: PPUSH
26659: PPUSH
26660: PPUSH
26661: PPUSH
// if not list then
26662: LD_VAR 0 3
26666: NOT
26667: IFFALSE 26671
// exit ;
26669: GO 27059
// result := [ ] ;
26671: LD_ADDR_VAR 0 6
26675: PUSH
26676: EMPTY
26677: ST_TO_ADDR
// for i in list do
26678: LD_ADDR_VAR 0 7
26682: PUSH
26683: LD_VAR 0 3
26687: PUSH
26688: FOR_IN
26689: IFFALSE 26891
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26691: LD_ADDR_VAR 0 9
26695: PUSH
26696: LD_VAR 0 7
26700: PPUSH
26701: LD_VAR 0 1
26705: PPUSH
26706: LD_VAR 0 2
26710: PPUSH
26711: CALL_OW 297
26715: ST_TO_ADDR
// if not result then
26716: LD_VAR 0 6
26720: NOT
26721: IFFALSE 26747
// result := [ [ i , tmp ] ] else
26723: LD_ADDR_VAR 0 6
26727: PUSH
26728: LD_VAR 0 7
26732: PUSH
26733: LD_VAR 0 9
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: EMPTY
26743: LIST
26744: ST_TO_ADDR
26745: GO 26889
// begin if result [ result ] [ 2 ] < tmp then
26747: LD_VAR 0 6
26751: PUSH
26752: LD_VAR 0 6
26756: ARRAY
26757: PUSH
26758: LD_INT 2
26760: ARRAY
26761: PUSH
26762: LD_VAR 0 9
26766: LESS
26767: IFFALSE 26809
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26769: LD_ADDR_VAR 0 6
26773: PUSH
26774: LD_VAR 0 6
26778: PPUSH
26779: LD_VAR 0 6
26783: PUSH
26784: LD_INT 1
26786: PLUS
26787: PPUSH
26788: LD_VAR 0 7
26792: PUSH
26793: LD_VAR 0 9
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PPUSH
26802: CALL_OW 2
26806: ST_TO_ADDR
26807: GO 26889
// for j = 1 to result do
26809: LD_ADDR_VAR 0 8
26813: PUSH
26814: DOUBLE
26815: LD_INT 1
26817: DEC
26818: ST_TO_ADDR
26819: LD_VAR 0 6
26823: PUSH
26824: FOR_TO
26825: IFFALSE 26887
// begin if tmp < result [ j ] [ 2 ] then
26827: LD_VAR 0 9
26831: PUSH
26832: LD_VAR 0 6
26836: PUSH
26837: LD_VAR 0 8
26841: ARRAY
26842: PUSH
26843: LD_INT 2
26845: ARRAY
26846: LESS
26847: IFFALSE 26885
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26849: LD_ADDR_VAR 0 6
26853: PUSH
26854: LD_VAR 0 6
26858: PPUSH
26859: LD_VAR 0 8
26863: PPUSH
26864: LD_VAR 0 7
26868: PUSH
26869: LD_VAR 0 9
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 2
26882: ST_TO_ADDR
// break ;
26883: GO 26887
// end ; end ;
26885: GO 26824
26887: POP
26888: POP
// end ; end ;
26889: GO 26688
26891: POP
26892: POP
// if result and not asc then
26893: LD_VAR 0 6
26897: PUSH
26898: LD_VAR 0 4
26902: NOT
26903: AND
26904: IFFALSE 26979
// begin tmp := result ;
26906: LD_ADDR_VAR 0 9
26910: PUSH
26911: LD_VAR 0 6
26915: ST_TO_ADDR
// for i = tmp downto 1 do
26916: LD_ADDR_VAR 0 7
26920: PUSH
26921: DOUBLE
26922: LD_VAR 0 9
26926: INC
26927: ST_TO_ADDR
26928: LD_INT 1
26930: PUSH
26931: FOR_DOWNTO
26932: IFFALSE 26977
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26934: LD_ADDR_VAR 0 6
26938: PUSH
26939: LD_VAR 0 6
26943: PPUSH
26944: LD_VAR 0 9
26948: PUSH
26949: LD_VAR 0 7
26953: MINUS
26954: PUSH
26955: LD_INT 1
26957: PLUS
26958: PPUSH
26959: LD_VAR 0 9
26963: PUSH
26964: LD_VAR 0 7
26968: ARRAY
26969: PPUSH
26970: CALL_OW 1
26974: ST_TO_ADDR
26975: GO 26931
26977: POP
26978: POP
// end ; tmp := [ ] ;
26979: LD_ADDR_VAR 0 9
26983: PUSH
26984: EMPTY
26985: ST_TO_ADDR
// if mode then
26986: LD_VAR 0 5
26990: IFFALSE 27059
// begin for i = 1 to result do
26992: LD_ADDR_VAR 0 7
26996: PUSH
26997: DOUBLE
26998: LD_INT 1
27000: DEC
27001: ST_TO_ADDR
27002: LD_VAR 0 6
27006: PUSH
27007: FOR_TO
27008: IFFALSE 27047
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27010: LD_ADDR_VAR 0 9
27014: PUSH
27015: LD_VAR 0 9
27019: PPUSH
27020: LD_VAR 0 7
27024: PPUSH
27025: LD_VAR 0 6
27029: PUSH
27030: LD_VAR 0 7
27034: ARRAY
27035: PUSH
27036: LD_INT 1
27038: ARRAY
27039: PPUSH
27040: CALL_OW 1
27044: ST_TO_ADDR
27045: GO 27007
27047: POP
27048: POP
// result := tmp ;
27049: LD_ADDR_VAR 0 6
27053: PUSH
27054: LD_VAR 0 9
27058: ST_TO_ADDR
// end ; end ;
27059: LD_VAR 0 6
27063: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27064: LD_INT 0
27066: PPUSH
27067: PPUSH
27068: PPUSH
27069: PPUSH
27070: PPUSH
27071: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27072: LD_ADDR_VAR 0 5
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: EMPTY
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: ST_TO_ADDR
// if not x or not y then
27094: LD_VAR 0 2
27098: NOT
27099: PUSH
27100: LD_VAR 0 3
27104: NOT
27105: OR
27106: IFFALSE 27110
// exit ;
27108: GO 28756
// if not range then
27110: LD_VAR 0 4
27114: NOT
27115: IFFALSE 27125
// range := 10 ;
27117: LD_ADDR_VAR 0 4
27121: PUSH
27122: LD_INT 10
27124: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27125: LD_ADDR_VAR 0 8
27129: PUSH
27130: LD_INT 81
27132: PUSH
27133: LD_VAR 0 1
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 92
27144: PUSH
27145: LD_VAR 0 2
27149: PUSH
27150: LD_VAR 0 3
27154: PUSH
27155: LD_VAR 0 4
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 3
27168: PUSH
27169: LD_INT 21
27171: PUSH
27172: LD_INT 3
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: PPUSH
27188: CALL_OW 69
27192: ST_TO_ADDR
// if not tmp then
27193: LD_VAR 0 8
27197: NOT
27198: IFFALSE 27202
// exit ;
27200: GO 28756
// for i in tmp do
27202: LD_ADDR_VAR 0 6
27206: PUSH
27207: LD_VAR 0 8
27211: PUSH
27212: FOR_IN
27213: IFFALSE 28731
// begin points := [ 0 , 0 , 0 ] ;
27215: LD_ADDR_VAR 0 9
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: ST_TO_ADDR
// bpoints := 1 ;
27234: LD_ADDR_VAR 0 10
27238: PUSH
27239: LD_INT 1
27241: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27242: LD_VAR 0 6
27246: PPUSH
27247: CALL_OW 247
27251: PUSH
27252: LD_INT 1
27254: DOUBLE
27255: EQUAL
27256: IFTRUE 27260
27258: GO 27838
27260: POP
// begin if GetClass ( i ) = 1 then
27261: LD_VAR 0 6
27265: PPUSH
27266: CALL_OW 257
27270: PUSH
27271: LD_INT 1
27273: EQUAL
27274: IFFALSE 27295
// points := [ 10 , 5 , 3 ] ;
27276: LD_ADDR_VAR 0 9
27280: PUSH
27281: LD_INT 10
27283: PUSH
27284: LD_INT 5
27286: PUSH
27287: LD_INT 3
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: LIST
27294: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27295: LD_VAR 0 6
27299: PPUSH
27300: CALL_OW 257
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: LD_INT 3
27310: PUSH
27311: LD_INT 4
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: IN
27319: IFFALSE 27340
// points := [ 3 , 2 , 1 ] ;
27321: LD_ADDR_VAR 0 9
27325: PUSH
27326: LD_INT 3
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27340: LD_VAR 0 6
27344: PPUSH
27345: CALL_OW 257
27349: PUSH
27350: LD_INT 5
27352: EQUAL
27353: IFFALSE 27374
// points := [ 130 , 5 , 2 ] ;
27355: LD_ADDR_VAR 0 9
27359: PUSH
27360: LD_INT 130
27362: PUSH
27363: LD_INT 5
27365: PUSH
27366: LD_INT 2
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27374: LD_VAR 0 6
27378: PPUSH
27379: CALL_OW 257
27383: PUSH
27384: LD_INT 8
27386: EQUAL
27387: IFFALSE 27408
// points := [ 35 , 35 , 30 ] ;
27389: LD_ADDR_VAR 0 9
27393: PUSH
27394: LD_INT 35
27396: PUSH
27397: LD_INT 35
27399: PUSH
27400: LD_INT 30
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: LIST
27407: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27408: LD_VAR 0 6
27412: PPUSH
27413: CALL_OW 257
27417: PUSH
27418: LD_INT 9
27420: EQUAL
27421: IFFALSE 27442
// points := [ 20 , 55 , 40 ] ;
27423: LD_ADDR_VAR 0 9
27427: PUSH
27428: LD_INT 20
27430: PUSH
27431: LD_INT 55
27433: PUSH
27434: LD_INT 40
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27442: LD_VAR 0 6
27446: PPUSH
27447: CALL_OW 257
27451: PUSH
27452: LD_INT 12
27454: PUSH
27455: LD_INT 16
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: IN
27462: IFFALSE 27483
// points := [ 5 , 3 , 2 ] ;
27464: LD_ADDR_VAR 0 9
27468: PUSH
27469: LD_INT 5
27471: PUSH
27472: LD_INT 3
27474: PUSH
27475: LD_INT 2
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27483: LD_VAR 0 6
27487: PPUSH
27488: CALL_OW 257
27492: PUSH
27493: LD_INT 17
27495: EQUAL
27496: IFFALSE 27517
// points := [ 100 , 50 , 75 ] ;
27498: LD_ADDR_VAR 0 9
27502: PUSH
27503: LD_INT 100
27505: PUSH
27506: LD_INT 50
27508: PUSH
27509: LD_INT 75
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: LIST
27516: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27517: LD_VAR 0 6
27521: PPUSH
27522: CALL_OW 257
27526: PUSH
27527: LD_INT 15
27529: EQUAL
27530: IFFALSE 27551
// points := [ 10 , 5 , 3 ] ;
27532: LD_ADDR_VAR 0 9
27536: PUSH
27537: LD_INT 10
27539: PUSH
27540: LD_INT 5
27542: PUSH
27543: LD_INT 3
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27551: LD_VAR 0 6
27555: PPUSH
27556: CALL_OW 257
27560: PUSH
27561: LD_INT 14
27563: EQUAL
27564: IFFALSE 27585
// points := [ 10 , 0 , 0 ] ;
27566: LD_ADDR_VAR 0 9
27570: PUSH
27571: LD_INT 10
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27585: LD_VAR 0 6
27589: PPUSH
27590: CALL_OW 257
27594: PUSH
27595: LD_INT 11
27597: EQUAL
27598: IFFALSE 27619
// points := [ 30 , 10 , 5 ] ;
27600: LD_ADDR_VAR 0 9
27604: PUSH
27605: LD_INT 30
27607: PUSH
27608: LD_INT 10
27610: PUSH
27611: LD_INT 5
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: LIST
27618: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27619: LD_VAR 0 1
27623: PPUSH
27624: LD_INT 5
27626: PPUSH
27627: CALL_OW 321
27631: PUSH
27632: LD_INT 2
27634: EQUAL
27635: IFFALSE 27652
// bpoints := bpoints * 1.8 ;
27637: LD_ADDR_VAR 0 10
27641: PUSH
27642: LD_VAR 0 10
27646: PUSH
27647: LD_REAL  1.80000000000000E+0000
27650: MUL
27651: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27652: LD_VAR 0 6
27656: PPUSH
27657: CALL_OW 257
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: LD_INT 3
27670: PUSH
27671: LD_INT 4
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: IN
27680: PUSH
27681: LD_VAR 0 1
27685: PPUSH
27686: LD_INT 51
27688: PPUSH
27689: CALL_OW 321
27693: PUSH
27694: LD_INT 2
27696: EQUAL
27697: AND
27698: IFFALSE 27715
// bpoints := bpoints * 1.2 ;
27700: LD_ADDR_VAR 0 10
27704: PUSH
27705: LD_VAR 0 10
27709: PUSH
27710: LD_REAL  1.20000000000000E+0000
27713: MUL
27714: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27715: LD_VAR 0 6
27719: PPUSH
27720: CALL_OW 257
27724: PUSH
27725: LD_INT 5
27727: PUSH
27728: LD_INT 7
27730: PUSH
27731: LD_INT 9
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: IN
27739: PUSH
27740: LD_VAR 0 1
27744: PPUSH
27745: LD_INT 52
27747: PPUSH
27748: CALL_OW 321
27752: PUSH
27753: LD_INT 2
27755: EQUAL
27756: AND
27757: IFFALSE 27774
// bpoints := bpoints * 1.5 ;
27759: LD_ADDR_VAR 0 10
27763: PUSH
27764: LD_VAR 0 10
27768: PUSH
27769: LD_REAL  1.50000000000000E+0000
27772: MUL
27773: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27774: LD_VAR 0 1
27778: PPUSH
27779: LD_INT 66
27781: PPUSH
27782: CALL_OW 321
27786: PUSH
27787: LD_INT 2
27789: EQUAL
27790: IFFALSE 27807
// bpoints := bpoints * 1.1 ;
27792: LD_ADDR_VAR 0 10
27796: PUSH
27797: LD_VAR 0 10
27801: PUSH
27802: LD_REAL  1.10000000000000E+0000
27805: MUL
27806: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27807: LD_ADDR_VAR 0 10
27811: PUSH
27812: LD_VAR 0 10
27816: PUSH
27817: LD_VAR 0 6
27821: PPUSH
27822: LD_INT 1
27824: PPUSH
27825: CALL_OW 259
27829: PUSH
27830: LD_REAL  1.15000000000000E+0000
27833: MUL
27834: MUL
27835: ST_TO_ADDR
// end ; unit_vehicle :
27836: GO 28660
27838: LD_INT 2
27840: DOUBLE
27841: EQUAL
27842: IFTRUE 27846
27844: GO 28648
27846: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27847: LD_VAR 0 6
27851: PPUSH
27852: CALL_OW 264
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: LD_INT 42
27862: PUSH
27863: LD_INT 24
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: LIST
27870: IN
27871: IFFALSE 27892
// points := [ 25 , 5 , 3 ] ;
27873: LD_ADDR_VAR 0 9
27877: PUSH
27878: LD_INT 25
27880: PUSH
27881: LD_INT 5
27883: PUSH
27884: LD_INT 3
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27892: LD_VAR 0 6
27896: PPUSH
27897: CALL_OW 264
27901: PUSH
27902: LD_INT 4
27904: PUSH
27905: LD_INT 43
27907: PUSH
27908: LD_INT 25
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: IN
27916: IFFALSE 27937
// points := [ 40 , 15 , 5 ] ;
27918: LD_ADDR_VAR 0 9
27922: PUSH
27923: LD_INT 40
27925: PUSH
27926: LD_INT 15
27928: PUSH
27929: LD_INT 5
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27937: LD_VAR 0 6
27941: PPUSH
27942: CALL_OW 264
27946: PUSH
27947: LD_INT 3
27949: PUSH
27950: LD_INT 23
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: IN
27957: IFFALSE 27978
// points := [ 7 , 25 , 8 ] ;
27959: LD_ADDR_VAR 0 9
27963: PUSH
27964: LD_INT 7
27966: PUSH
27967: LD_INT 25
27969: PUSH
27970: LD_INT 8
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: LIST
27977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27978: LD_VAR 0 6
27982: PPUSH
27983: CALL_OW 264
27987: PUSH
27988: LD_INT 5
27990: PUSH
27991: LD_INT 27
27993: PUSH
27994: LD_INT 44
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: IN
28002: IFFALSE 28023
// points := [ 14 , 50 , 16 ] ;
28004: LD_ADDR_VAR 0 9
28008: PUSH
28009: LD_INT 14
28011: PUSH
28012: LD_INT 50
28014: PUSH
28015: LD_INT 16
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28023: LD_VAR 0 6
28027: PPUSH
28028: CALL_OW 264
28032: PUSH
28033: LD_INT 6
28035: PUSH
28036: LD_INT 46
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: IN
28043: IFFALSE 28064
// points := [ 32 , 120 , 70 ] ;
28045: LD_ADDR_VAR 0 9
28049: PUSH
28050: LD_INT 32
28052: PUSH
28053: LD_INT 120
28055: PUSH
28056: LD_INT 70
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28064: LD_VAR 0 6
28068: PPUSH
28069: CALL_OW 264
28073: PUSH
28074: LD_INT 7
28076: PUSH
28077: LD_INT 28
28079: PUSH
28080: LD_INT 45
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: IN
28088: IFFALSE 28109
// points := [ 35 , 20 , 45 ] ;
28090: LD_ADDR_VAR 0 9
28094: PUSH
28095: LD_INT 35
28097: PUSH
28098: LD_INT 20
28100: PUSH
28101: LD_INT 45
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28109: LD_VAR 0 6
28113: PPUSH
28114: CALL_OW 264
28118: PUSH
28119: LD_INT 47
28121: PUSH
28122: EMPTY
28123: LIST
28124: IN
28125: IFFALSE 28146
// points := [ 67 , 45 , 75 ] ;
28127: LD_ADDR_VAR 0 9
28131: PUSH
28132: LD_INT 67
28134: PUSH
28135: LD_INT 45
28137: PUSH
28138: LD_INT 75
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28146: LD_VAR 0 6
28150: PPUSH
28151: CALL_OW 264
28155: PUSH
28156: LD_INT 26
28158: PUSH
28159: EMPTY
28160: LIST
28161: IN
28162: IFFALSE 28183
// points := [ 120 , 30 , 80 ] ;
28164: LD_ADDR_VAR 0 9
28168: PUSH
28169: LD_INT 120
28171: PUSH
28172: LD_INT 30
28174: PUSH
28175: LD_INT 80
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: LIST
28182: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28183: LD_VAR 0 6
28187: PPUSH
28188: CALL_OW 264
28192: PUSH
28193: LD_INT 22
28195: PUSH
28196: EMPTY
28197: LIST
28198: IN
28199: IFFALSE 28220
// points := [ 40 , 1 , 1 ] ;
28201: LD_ADDR_VAR 0 9
28205: PUSH
28206: LD_INT 40
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28220: LD_VAR 0 6
28224: PPUSH
28225: CALL_OW 264
28229: PUSH
28230: LD_INT 29
28232: PUSH
28233: EMPTY
28234: LIST
28235: IN
28236: IFFALSE 28257
// points := [ 70 , 200 , 400 ] ;
28238: LD_ADDR_VAR 0 9
28242: PUSH
28243: LD_INT 70
28245: PUSH
28246: LD_INT 200
28248: PUSH
28249: LD_INT 400
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: LIST
28256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28257: LD_VAR 0 6
28261: PPUSH
28262: CALL_OW 264
28266: PUSH
28267: LD_INT 14
28269: PUSH
28270: LD_INT 53
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: IN
28277: IFFALSE 28298
// points := [ 40 , 10 , 20 ] ;
28279: LD_ADDR_VAR 0 9
28283: PUSH
28284: LD_INT 40
28286: PUSH
28287: LD_INT 10
28289: PUSH
28290: LD_INT 20
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28298: LD_VAR 0 6
28302: PPUSH
28303: CALL_OW 264
28307: PUSH
28308: LD_INT 9
28310: PUSH
28311: EMPTY
28312: LIST
28313: IN
28314: IFFALSE 28335
// points := [ 5 , 70 , 20 ] ;
28316: LD_ADDR_VAR 0 9
28320: PUSH
28321: LD_INT 5
28323: PUSH
28324: LD_INT 70
28326: PUSH
28327: LD_INT 20
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28335: LD_VAR 0 6
28339: PPUSH
28340: CALL_OW 264
28344: PUSH
28345: LD_INT 10
28347: PUSH
28348: EMPTY
28349: LIST
28350: IN
28351: IFFALSE 28372
// points := [ 35 , 110 , 70 ] ;
28353: LD_ADDR_VAR 0 9
28357: PUSH
28358: LD_INT 35
28360: PUSH
28361: LD_INT 110
28363: PUSH
28364: LD_INT 70
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28372: LD_VAR 0 6
28376: PPUSH
28377: CALL_OW 265
28381: PUSH
28382: LD_INT 25
28384: EQUAL
28385: IFFALSE 28406
// points := [ 80 , 65 , 100 ] ;
28387: LD_ADDR_VAR 0 9
28391: PUSH
28392: LD_INT 80
28394: PUSH
28395: LD_INT 65
28397: PUSH
28398: LD_INT 100
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28406: LD_VAR 0 6
28410: PPUSH
28411: CALL_OW 263
28415: PUSH
28416: LD_INT 1
28418: EQUAL
28419: IFFALSE 28454
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28421: LD_ADDR_VAR 0 10
28425: PUSH
28426: LD_VAR 0 10
28430: PUSH
28431: LD_VAR 0 6
28435: PPUSH
28436: CALL_OW 311
28440: PPUSH
28441: LD_INT 3
28443: PPUSH
28444: CALL_OW 259
28448: PUSH
28449: LD_INT 4
28451: MUL
28452: MUL
28453: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28454: LD_VAR 0 6
28458: PPUSH
28459: CALL_OW 263
28463: PUSH
28464: LD_INT 2
28466: EQUAL
28467: IFFALSE 28518
// begin j := IsControledBy ( i ) ;
28469: LD_ADDR_VAR 0 7
28473: PUSH
28474: LD_VAR 0 6
28478: PPUSH
28479: CALL_OW 312
28483: ST_TO_ADDR
// if j then
28484: LD_VAR 0 7
28488: IFFALSE 28518
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28490: LD_ADDR_VAR 0 10
28494: PUSH
28495: LD_VAR 0 10
28499: PUSH
28500: LD_VAR 0 7
28504: PPUSH
28505: LD_INT 3
28507: PPUSH
28508: CALL_OW 259
28512: PUSH
28513: LD_INT 3
28515: MUL
28516: MUL
28517: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28518: LD_VAR 0 6
28522: PPUSH
28523: CALL_OW 264
28527: PUSH
28528: LD_INT 5
28530: PUSH
28531: LD_INT 6
28533: PUSH
28534: LD_INT 46
28536: PUSH
28537: LD_INT 44
28539: PUSH
28540: LD_INT 47
28542: PUSH
28543: LD_INT 45
28545: PUSH
28546: LD_INT 28
28548: PUSH
28549: LD_INT 7
28551: PUSH
28552: LD_INT 27
28554: PUSH
28555: LD_INT 29
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: IN
28570: PUSH
28571: LD_VAR 0 1
28575: PPUSH
28576: LD_INT 52
28578: PPUSH
28579: CALL_OW 321
28583: PUSH
28584: LD_INT 2
28586: EQUAL
28587: AND
28588: IFFALSE 28605
// bpoints := bpoints * 1.2 ;
28590: LD_ADDR_VAR 0 10
28594: PUSH
28595: LD_VAR 0 10
28599: PUSH
28600: LD_REAL  1.20000000000000E+0000
28603: MUL
28604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28605: LD_VAR 0 6
28609: PPUSH
28610: CALL_OW 264
28614: PUSH
28615: LD_INT 6
28617: PUSH
28618: LD_INT 46
28620: PUSH
28621: LD_INT 47
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: IN
28629: IFFALSE 28646
// bpoints := bpoints * 1.2 ;
28631: LD_ADDR_VAR 0 10
28635: PUSH
28636: LD_VAR 0 10
28640: PUSH
28641: LD_REAL  1.20000000000000E+0000
28644: MUL
28645: ST_TO_ADDR
// end ; unit_building :
28646: GO 28660
28648: LD_INT 3
28650: DOUBLE
28651: EQUAL
28652: IFTRUE 28656
28654: GO 28659
28656: POP
// ; end ;
28657: GO 28660
28659: POP
// for j = 1 to 3 do
28660: LD_ADDR_VAR 0 7
28664: PUSH
28665: DOUBLE
28666: LD_INT 1
28668: DEC
28669: ST_TO_ADDR
28670: LD_INT 3
28672: PUSH
28673: FOR_TO
28674: IFFALSE 28727
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28676: LD_ADDR_VAR 0 5
28680: PUSH
28681: LD_VAR 0 5
28685: PPUSH
28686: LD_VAR 0 7
28690: PPUSH
28691: LD_VAR 0 5
28695: PUSH
28696: LD_VAR 0 7
28700: ARRAY
28701: PUSH
28702: LD_VAR 0 9
28706: PUSH
28707: LD_VAR 0 7
28711: ARRAY
28712: PUSH
28713: LD_VAR 0 10
28717: MUL
28718: PLUS
28719: PPUSH
28720: CALL_OW 1
28724: ST_TO_ADDR
28725: GO 28673
28727: POP
28728: POP
// end ;
28729: GO 27212
28731: POP
28732: POP
// result := Replace ( result , 4 , tmp ) ;
28733: LD_ADDR_VAR 0 5
28737: PUSH
28738: LD_VAR 0 5
28742: PPUSH
28743: LD_INT 4
28745: PPUSH
28746: LD_VAR 0 8
28750: PPUSH
28751: CALL_OW 1
28755: ST_TO_ADDR
// end ;
28756: LD_VAR 0 5
28760: RET
// export function DangerAtRange ( unit , range ) ; begin
28761: LD_INT 0
28763: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28764: LD_ADDR_VAR 0 3
28768: PUSH
28769: LD_VAR 0 1
28773: PPUSH
28774: CALL_OW 255
28778: PPUSH
28779: LD_VAR 0 1
28783: PPUSH
28784: CALL_OW 250
28788: PPUSH
28789: LD_VAR 0 1
28793: PPUSH
28794: CALL_OW 251
28798: PPUSH
28799: LD_VAR 0 2
28803: PPUSH
28804: CALL 27064 0 4
28808: ST_TO_ADDR
// end ;
28809: LD_VAR 0 3
28813: RET
// export function DangerInArea ( side , area ) ; begin
28814: LD_INT 0
28816: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28817: LD_ADDR_VAR 0 3
28821: PUSH
28822: LD_VAR 0 2
28826: PPUSH
28827: LD_INT 81
28829: PUSH
28830: LD_VAR 0 1
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 70
28843: ST_TO_ADDR
// end ;
28844: LD_VAR 0 3
28848: RET
// export function IsExtension ( b ) ; begin
28849: LD_INT 0
28851: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28852: LD_ADDR_VAR 0 2
28856: PUSH
28857: LD_VAR 0 1
28861: PUSH
28862: LD_INT 23
28864: PUSH
28865: LD_INT 20
28867: PUSH
28868: LD_INT 22
28870: PUSH
28871: LD_INT 17
28873: PUSH
28874: LD_INT 24
28876: PUSH
28877: LD_INT 21
28879: PUSH
28880: LD_INT 19
28882: PUSH
28883: LD_INT 16
28885: PUSH
28886: LD_INT 25
28888: PUSH
28889: LD_INT 18
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: IN
28904: ST_TO_ADDR
// end ;
28905: LD_VAR 0 2
28909: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28910: LD_INT 0
28912: PPUSH
28913: PPUSH
28914: PPUSH
// result := [ ] ;
28915: LD_ADDR_VAR 0 3
28919: PUSH
28920: EMPTY
28921: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28922: LD_ADDR_VAR 0 4
28926: PUSH
28927: LD_VAR 0 2
28931: PPUSH
28932: LD_INT 21
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PPUSH
28942: CALL_OW 70
28946: ST_TO_ADDR
// if not tmp then
28947: LD_VAR 0 4
28951: NOT
28952: IFFALSE 28956
// exit ;
28954: GO 29014
// for i in tmp do
28956: LD_ADDR_VAR 0 5
28960: PUSH
28961: LD_VAR 0 4
28965: PUSH
28966: FOR_IN
28967: IFFALSE 29002
// if GetBase ( i ) <> base then
28969: LD_VAR 0 5
28973: PPUSH
28974: CALL_OW 274
28978: PUSH
28979: LD_VAR 0 1
28983: NONEQUAL
28984: IFFALSE 29000
// ComLinkToBase ( base , i ) ;
28986: LD_VAR 0 1
28990: PPUSH
28991: LD_VAR 0 5
28995: PPUSH
28996: CALL_OW 169
29000: GO 28966
29002: POP
29003: POP
// result := tmp ;
29004: LD_ADDR_VAR 0 3
29008: PUSH
29009: LD_VAR 0 4
29013: ST_TO_ADDR
// end ;
29014: LD_VAR 0 3
29018: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29019: LD_INT 0
29021: PPUSH
29022: PPUSH
// if BuildingStatus ( b ) = bs_build then
29023: LD_VAR 0 2
29027: PPUSH
29028: CALL_OW 461
29032: PUSH
29033: LD_INT 1
29035: EQUAL
29036: IFFALSE 29096
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29038: LD_VAR 0 1
29042: PPUSH
29043: LD_STRING h
29045: PUSH
29046: LD_VAR 0 2
29050: PPUSH
29051: CALL_OW 250
29055: PUSH
29056: LD_VAR 0 2
29060: PPUSH
29061: CALL_OW 251
29065: PUSH
29066: LD_VAR 0 2
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: PUSH
29089: EMPTY
29090: LIST
29091: PPUSH
29092: CALL_OW 446
// end ;
29096: LD_VAR 0 3
29100: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29101: LD_INT 0
29103: PPUSH
29104: PPUSH
29105: PPUSH
29106: PPUSH
29107: PPUSH
29108: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29109: LD_VAR 0 1
29113: NOT
29114: PUSH
29115: LD_VAR 0 1
29119: PPUSH
29120: CALL_OW 263
29124: PUSH
29125: LD_INT 2
29127: EQUAL
29128: NOT
29129: OR
29130: IFFALSE 29134
// exit ;
29132: GO 29450
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29134: LD_ADDR_VAR 0 6
29138: PUSH
29139: LD_INT 22
29141: PUSH
29142: LD_VAR 0 1
29146: PPUSH
29147: CALL_OW 255
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 2
29158: PUSH
29159: LD_INT 30
29161: PUSH
29162: LD_INT 36
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 34
29171: PUSH
29172: LD_INT 31
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: LIST
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PPUSH
29188: CALL_OW 69
29192: ST_TO_ADDR
// if not tmp then
29193: LD_VAR 0 6
29197: NOT
29198: IFFALSE 29202
// exit ;
29200: GO 29450
// result := [ ] ;
29202: LD_ADDR_VAR 0 2
29206: PUSH
29207: EMPTY
29208: ST_TO_ADDR
// for i in tmp do
29209: LD_ADDR_VAR 0 3
29213: PUSH
29214: LD_VAR 0 6
29218: PUSH
29219: FOR_IN
29220: IFFALSE 29291
// begin t := UnitsInside ( i ) ;
29222: LD_ADDR_VAR 0 4
29226: PUSH
29227: LD_VAR 0 3
29231: PPUSH
29232: CALL_OW 313
29236: ST_TO_ADDR
// if t then
29237: LD_VAR 0 4
29241: IFFALSE 29289
// for j in t do
29243: LD_ADDR_VAR 0 7
29247: PUSH
29248: LD_VAR 0 4
29252: PUSH
29253: FOR_IN
29254: IFFALSE 29287
// result := Insert ( result , result + 1 , j ) ;
29256: LD_ADDR_VAR 0 2
29260: PUSH
29261: LD_VAR 0 2
29265: PPUSH
29266: LD_VAR 0 2
29270: PUSH
29271: LD_INT 1
29273: PLUS
29274: PPUSH
29275: LD_VAR 0 7
29279: PPUSH
29280: CALL_OW 2
29284: ST_TO_ADDR
29285: GO 29253
29287: POP
29288: POP
// end ;
29289: GO 29219
29291: POP
29292: POP
// if not result then
29293: LD_VAR 0 2
29297: NOT
29298: IFFALSE 29302
// exit ;
29300: GO 29450
// mech := result [ 1 ] ;
29302: LD_ADDR_VAR 0 5
29306: PUSH
29307: LD_VAR 0 2
29311: PUSH
29312: LD_INT 1
29314: ARRAY
29315: ST_TO_ADDR
// if result > 1 then
29316: LD_VAR 0 2
29320: PUSH
29321: LD_INT 1
29323: GREATER
29324: IFFALSE 29436
// for i = 2 to result do
29326: LD_ADDR_VAR 0 3
29330: PUSH
29331: DOUBLE
29332: LD_INT 2
29334: DEC
29335: ST_TO_ADDR
29336: LD_VAR 0 2
29340: PUSH
29341: FOR_TO
29342: IFFALSE 29434
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29344: LD_ADDR_VAR 0 4
29348: PUSH
29349: LD_VAR 0 2
29353: PUSH
29354: LD_VAR 0 3
29358: ARRAY
29359: PPUSH
29360: LD_INT 3
29362: PPUSH
29363: CALL_OW 259
29367: PUSH
29368: LD_VAR 0 2
29372: PUSH
29373: LD_VAR 0 3
29377: ARRAY
29378: PPUSH
29379: CALL_OW 432
29383: MINUS
29384: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29385: LD_VAR 0 4
29389: PUSH
29390: LD_VAR 0 5
29394: PPUSH
29395: LD_INT 3
29397: PPUSH
29398: CALL_OW 259
29402: PUSH
29403: LD_VAR 0 5
29407: PPUSH
29408: CALL_OW 432
29412: MINUS
29413: GREATEREQUAL
29414: IFFALSE 29432
// mech := result [ i ] ;
29416: LD_ADDR_VAR 0 5
29420: PUSH
29421: LD_VAR 0 2
29425: PUSH
29426: LD_VAR 0 3
29430: ARRAY
29431: ST_TO_ADDR
// end ;
29432: GO 29341
29434: POP
29435: POP
// ComLinkTo ( vehicle , mech ) ;
29436: LD_VAR 0 1
29440: PPUSH
29441: LD_VAR 0 5
29445: PPUSH
29446: CALL_OW 135
// end ;
29450: LD_VAR 0 2
29454: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29455: LD_INT 0
29457: PPUSH
29458: PPUSH
29459: PPUSH
29460: PPUSH
29461: PPUSH
29462: PPUSH
29463: PPUSH
29464: PPUSH
29465: PPUSH
29466: PPUSH
29467: PPUSH
29468: PPUSH
29469: PPUSH
// result := [ ] ;
29470: LD_ADDR_VAR 0 7
29474: PUSH
29475: EMPTY
29476: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29477: LD_VAR 0 1
29481: PPUSH
29482: CALL_OW 266
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 1
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: IN
29497: NOT
29498: IFFALSE 29502
// exit ;
29500: GO 31133
// if name then
29502: LD_VAR 0 3
29506: IFFALSE 29522
// SetBName ( base_dep , name ) ;
29508: LD_VAR 0 1
29512: PPUSH
29513: LD_VAR 0 3
29517: PPUSH
29518: CALL_OW 500
// base := GetBase ( base_dep ) ;
29522: LD_ADDR_VAR 0 15
29526: PUSH
29527: LD_VAR 0 1
29531: PPUSH
29532: CALL_OW 274
29536: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29537: LD_ADDR_VAR 0 16
29541: PUSH
29542: LD_VAR 0 1
29546: PPUSH
29547: CALL_OW 255
29551: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29552: LD_ADDR_VAR 0 17
29556: PUSH
29557: LD_VAR 0 1
29561: PPUSH
29562: CALL_OW 248
29566: ST_TO_ADDR
// if sources then
29567: LD_VAR 0 5
29571: IFFALSE 29618
// for i = 1 to 3 do
29573: LD_ADDR_VAR 0 8
29577: PUSH
29578: DOUBLE
29579: LD_INT 1
29581: DEC
29582: ST_TO_ADDR
29583: LD_INT 3
29585: PUSH
29586: FOR_TO
29587: IFFALSE 29616
// AddResourceType ( base , i , sources [ i ] ) ;
29589: LD_VAR 0 15
29593: PPUSH
29594: LD_VAR 0 8
29598: PPUSH
29599: LD_VAR 0 5
29603: PUSH
29604: LD_VAR 0 8
29608: ARRAY
29609: PPUSH
29610: CALL_OW 276
29614: GO 29586
29616: POP
29617: POP
// buildings := GetBaseBuildings ( base , area ) ;
29618: LD_ADDR_VAR 0 18
29622: PUSH
29623: LD_VAR 0 15
29627: PPUSH
29628: LD_VAR 0 2
29632: PPUSH
29633: CALL 28910 0 2
29637: ST_TO_ADDR
// InitHc ;
29638: CALL_OW 19
// InitUc ;
29642: CALL_OW 18
// uc_side := side ;
29646: LD_ADDR_OWVAR 20
29650: PUSH
29651: LD_VAR 0 16
29655: ST_TO_ADDR
// uc_nation := nation ;
29656: LD_ADDR_OWVAR 21
29660: PUSH
29661: LD_VAR 0 17
29665: ST_TO_ADDR
// if buildings then
29666: LD_VAR 0 18
29670: IFFALSE 30992
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29672: LD_ADDR_VAR 0 19
29676: PUSH
29677: LD_VAR 0 18
29681: PPUSH
29682: LD_INT 2
29684: PUSH
29685: LD_INT 30
29687: PUSH
29688: LD_INT 29
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 30
29697: PUSH
29698: LD_INT 30
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: LIST
29709: PPUSH
29710: CALL_OW 72
29714: ST_TO_ADDR
// if tmp then
29715: LD_VAR 0 19
29719: IFFALSE 29767
// for i in tmp do
29721: LD_ADDR_VAR 0 8
29725: PUSH
29726: LD_VAR 0 19
29730: PUSH
29731: FOR_IN
29732: IFFALSE 29765
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29734: LD_VAR 0 8
29738: PPUSH
29739: CALL_OW 250
29743: PPUSH
29744: LD_VAR 0 8
29748: PPUSH
29749: CALL_OW 251
29753: PPUSH
29754: LD_VAR 0 16
29758: PPUSH
29759: CALL_OW 441
29763: GO 29731
29765: POP
29766: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29767: LD_VAR 0 18
29771: PPUSH
29772: LD_INT 2
29774: PUSH
29775: LD_INT 30
29777: PUSH
29778: LD_INT 32
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 30
29787: PUSH
29788: LD_INT 33
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: PPUSH
29800: CALL_OW 72
29804: IFFALSE 29892
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29806: LD_ADDR_VAR 0 8
29810: PUSH
29811: LD_VAR 0 18
29815: PPUSH
29816: LD_INT 2
29818: PUSH
29819: LD_INT 30
29821: PUSH
29822: LD_INT 32
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 30
29831: PUSH
29832: LD_INT 33
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: PPUSH
29844: CALL_OW 72
29848: PUSH
29849: FOR_IN
29850: IFFALSE 29890
// begin if not GetBWeapon ( i ) then
29852: LD_VAR 0 8
29856: PPUSH
29857: CALL_OW 269
29861: NOT
29862: IFFALSE 29888
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29864: LD_VAR 0 8
29868: PPUSH
29869: LD_VAR 0 8
29873: PPUSH
29874: LD_VAR 0 2
29878: PPUSH
29879: CALL 31138 0 2
29883: PPUSH
29884: CALL_OW 431
// end ;
29888: GO 29849
29890: POP
29891: POP
// end ; for i = 1 to personel do
29892: LD_ADDR_VAR 0 8
29896: PUSH
29897: DOUBLE
29898: LD_INT 1
29900: DEC
29901: ST_TO_ADDR
29902: LD_VAR 0 6
29906: PUSH
29907: FOR_TO
29908: IFFALSE 30972
// begin if i > 4 then
29910: LD_VAR 0 8
29914: PUSH
29915: LD_INT 4
29917: GREATER
29918: IFFALSE 29922
// break ;
29920: GO 30972
// case i of 1 :
29922: LD_VAR 0 8
29926: PUSH
29927: LD_INT 1
29929: DOUBLE
29930: EQUAL
29931: IFTRUE 29935
29933: GO 30015
29935: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29936: LD_ADDR_VAR 0 12
29940: PUSH
29941: LD_VAR 0 18
29945: PPUSH
29946: LD_INT 22
29948: PUSH
29949: LD_VAR 0 16
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 58
29960: PUSH
29961: EMPTY
29962: LIST
29963: PUSH
29964: LD_INT 2
29966: PUSH
29967: LD_INT 30
29969: PUSH
29970: LD_INT 32
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 30
29979: PUSH
29980: LD_INT 4
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 30
29989: PUSH
29990: LD_INT 5
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: PPUSH
30008: CALL_OW 72
30012: ST_TO_ADDR
30013: GO 30237
30015: LD_INT 2
30017: DOUBLE
30018: EQUAL
30019: IFTRUE 30023
30021: GO 30085
30023: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30024: LD_ADDR_VAR 0 12
30028: PUSH
30029: LD_VAR 0 18
30033: PPUSH
30034: LD_INT 22
30036: PUSH
30037: LD_VAR 0 16
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 2
30048: PUSH
30049: LD_INT 30
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 30
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PPUSH
30078: CALL_OW 72
30082: ST_TO_ADDR
30083: GO 30237
30085: LD_INT 3
30087: DOUBLE
30088: EQUAL
30089: IFTRUE 30093
30091: GO 30155
30093: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30094: LD_ADDR_VAR 0 12
30098: PUSH
30099: LD_VAR 0 18
30103: PPUSH
30104: LD_INT 22
30106: PUSH
30107: LD_VAR 0 16
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 2
30118: PUSH
30119: LD_INT 30
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 30
30131: PUSH
30132: LD_INT 3
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PPUSH
30148: CALL_OW 72
30152: ST_TO_ADDR
30153: GO 30237
30155: LD_INT 4
30157: DOUBLE
30158: EQUAL
30159: IFTRUE 30163
30161: GO 30236
30163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30164: LD_ADDR_VAR 0 12
30168: PUSH
30169: LD_VAR 0 18
30173: PPUSH
30174: LD_INT 22
30176: PUSH
30177: LD_VAR 0 16
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 2
30188: PUSH
30189: LD_INT 30
30191: PUSH
30192: LD_INT 6
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 30
30201: PUSH
30202: LD_INT 7
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 30
30211: PUSH
30212: LD_INT 8
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PPUSH
30229: CALL_OW 72
30233: ST_TO_ADDR
30234: GO 30237
30236: POP
// if i = 1 then
30237: LD_VAR 0 8
30241: PUSH
30242: LD_INT 1
30244: EQUAL
30245: IFFALSE 30356
// begin tmp := [ ] ;
30247: LD_ADDR_VAR 0 19
30251: PUSH
30252: EMPTY
30253: ST_TO_ADDR
// for j in f do
30254: LD_ADDR_VAR 0 9
30258: PUSH
30259: LD_VAR 0 12
30263: PUSH
30264: FOR_IN
30265: IFFALSE 30338
// if GetBType ( j ) = b_bunker then
30267: LD_VAR 0 9
30271: PPUSH
30272: CALL_OW 266
30276: PUSH
30277: LD_INT 32
30279: EQUAL
30280: IFFALSE 30307
// tmp := Insert ( tmp , 1 , j ) else
30282: LD_ADDR_VAR 0 19
30286: PUSH
30287: LD_VAR 0 19
30291: PPUSH
30292: LD_INT 1
30294: PPUSH
30295: LD_VAR 0 9
30299: PPUSH
30300: CALL_OW 2
30304: ST_TO_ADDR
30305: GO 30336
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30307: LD_ADDR_VAR 0 19
30311: PUSH
30312: LD_VAR 0 19
30316: PPUSH
30317: LD_VAR 0 19
30321: PUSH
30322: LD_INT 1
30324: PLUS
30325: PPUSH
30326: LD_VAR 0 9
30330: PPUSH
30331: CALL_OW 2
30335: ST_TO_ADDR
30336: GO 30264
30338: POP
30339: POP
// if tmp then
30340: LD_VAR 0 19
30344: IFFALSE 30356
// f := tmp ;
30346: LD_ADDR_VAR 0 12
30350: PUSH
30351: LD_VAR 0 19
30355: ST_TO_ADDR
// end ; x := personel [ i ] ;
30356: LD_ADDR_VAR 0 13
30360: PUSH
30361: LD_VAR 0 6
30365: PUSH
30366: LD_VAR 0 8
30370: ARRAY
30371: ST_TO_ADDR
// if x = - 1 then
30372: LD_VAR 0 13
30376: PUSH
30377: LD_INT 1
30379: NEG
30380: EQUAL
30381: IFFALSE 30590
// begin for j in f do
30383: LD_ADDR_VAR 0 9
30387: PUSH
30388: LD_VAR 0 12
30392: PUSH
30393: FOR_IN
30394: IFFALSE 30586
// repeat InitHc ;
30396: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30400: LD_VAR 0 9
30404: PPUSH
30405: CALL_OW 266
30409: PUSH
30410: LD_INT 5
30412: EQUAL
30413: IFFALSE 30483
// begin if UnitsInside ( j ) < 3 then
30415: LD_VAR 0 9
30419: PPUSH
30420: CALL_OW 313
30424: PUSH
30425: LD_INT 3
30427: LESS
30428: IFFALSE 30464
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30430: LD_INT 0
30432: PPUSH
30433: LD_INT 5
30435: PUSH
30436: LD_INT 8
30438: PUSH
30439: LD_INT 9
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: PUSH
30447: LD_VAR 0 17
30451: ARRAY
30452: PPUSH
30453: LD_VAR 0 4
30457: PPUSH
30458: CALL_OW 380
30462: GO 30481
// PrepareHuman ( false , i , skill ) ;
30464: LD_INT 0
30466: PPUSH
30467: LD_VAR 0 8
30471: PPUSH
30472: LD_VAR 0 4
30476: PPUSH
30477: CALL_OW 380
// end else
30481: GO 30500
// PrepareHuman ( false , i , skill ) ;
30483: LD_INT 0
30485: PPUSH
30486: LD_VAR 0 8
30490: PPUSH
30491: LD_VAR 0 4
30495: PPUSH
30496: CALL_OW 380
// un := CreateHuman ;
30500: LD_ADDR_VAR 0 14
30504: PUSH
30505: CALL_OW 44
30509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30510: LD_ADDR_VAR 0 7
30514: PUSH
30515: LD_VAR 0 7
30519: PPUSH
30520: LD_INT 1
30522: PPUSH
30523: LD_VAR 0 14
30527: PPUSH
30528: CALL_OW 2
30532: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30533: LD_VAR 0 14
30537: PPUSH
30538: LD_VAR 0 9
30542: PPUSH
30543: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30547: LD_VAR 0 9
30551: PPUSH
30552: CALL_OW 313
30556: PUSH
30557: LD_INT 6
30559: EQUAL
30560: PUSH
30561: LD_VAR 0 9
30565: PPUSH
30566: CALL_OW 266
30570: PUSH
30571: LD_INT 32
30573: PUSH
30574: LD_INT 31
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: IN
30581: OR
30582: IFFALSE 30396
30584: GO 30393
30586: POP
30587: POP
// end else
30588: GO 30970
// for j = 1 to x do
30590: LD_ADDR_VAR 0 9
30594: PUSH
30595: DOUBLE
30596: LD_INT 1
30598: DEC
30599: ST_TO_ADDR
30600: LD_VAR 0 13
30604: PUSH
30605: FOR_TO
30606: IFFALSE 30968
// begin InitHc ;
30608: CALL_OW 19
// if not f then
30612: LD_VAR 0 12
30616: NOT
30617: IFFALSE 30706
// begin PrepareHuman ( false , i , skill ) ;
30619: LD_INT 0
30621: PPUSH
30622: LD_VAR 0 8
30626: PPUSH
30627: LD_VAR 0 4
30631: PPUSH
30632: CALL_OW 380
// un := CreateHuman ;
30636: LD_ADDR_VAR 0 14
30640: PUSH
30641: CALL_OW 44
30645: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30646: LD_ADDR_VAR 0 7
30650: PUSH
30651: LD_VAR 0 7
30655: PPUSH
30656: LD_INT 1
30658: PPUSH
30659: LD_VAR 0 14
30663: PPUSH
30664: CALL_OW 2
30668: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30669: LD_VAR 0 14
30673: PPUSH
30674: LD_VAR 0 1
30678: PPUSH
30679: CALL_OW 250
30683: PPUSH
30684: LD_VAR 0 1
30688: PPUSH
30689: CALL_OW 251
30693: PPUSH
30694: LD_INT 10
30696: PPUSH
30697: LD_INT 0
30699: PPUSH
30700: CALL_OW 50
// continue ;
30704: GO 30605
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30706: LD_VAR 0 12
30710: PUSH
30711: LD_INT 1
30713: ARRAY
30714: PPUSH
30715: CALL_OW 313
30719: PUSH
30720: LD_VAR 0 12
30724: PUSH
30725: LD_INT 1
30727: ARRAY
30728: PPUSH
30729: CALL_OW 266
30733: PUSH
30734: LD_INT 32
30736: PUSH
30737: LD_INT 31
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: IN
30744: AND
30745: PUSH
30746: LD_VAR 0 12
30750: PUSH
30751: LD_INT 1
30753: ARRAY
30754: PPUSH
30755: CALL_OW 313
30759: PUSH
30760: LD_INT 6
30762: EQUAL
30763: OR
30764: IFFALSE 30784
// f := Delete ( f , 1 ) ;
30766: LD_ADDR_VAR 0 12
30770: PUSH
30771: LD_VAR 0 12
30775: PPUSH
30776: LD_INT 1
30778: PPUSH
30779: CALL_OW 3
30783: ST_TO_ADDR
// if not f then
30784: LD_VAR 0 12
30788: NOT
30789: IFFALSE 30807
// begin x := x + 2 ;
30791: LD_ADDR_VAR 0 13
30795: PUSH
30796: LD_VAR 0 13
30800: PUSH
30801: LD_INT 2
30803: PLUS
30804: ST_TO_ADDR
// continue ;
30805: GO 30605
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30807: LD_VAR 0 12
30811: PUSH
30812: LD_INT 1
30814: ARRAY
30815: PPUSH
30816: CALL_OW 266
30820: PUSH
30821: LD_INT 5
30823: EQUAL
30824: IFFALSE 30898
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30826: LD_VAR 0 12
30830: PUSH
30831: LD_INT 1
30833: ARRAY
30834: PPUSH
30835: CALL_OW 313
30839: PUSH
30840: LD_INT 3
30842: LESS
30843: IFFALSE 30879
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30845: LD_INT 0
30847: PPUSH
30848: LD_INT 5
30850: PUSH
30851: LD_INT 8
30853: PUSH
30854: LD_INT 9
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: PUSH
30862: LD_VAR 0 17
30866: ARRAY
30867: PPUSH
30868: LD_VAR 0 4
30872: PPUSH
30873: CALL_OW 380
30877: GO 30896
// PrepareHuman ( false , i , skill ) ;
30879: LD_INT 0
30881: PPUSH
30882: LD_VAR 0 8
30886: PPUSH
30887: LD_VAR 0 4
30891: PPUSH
30892: CALL_OW 380
// end else
30896: GO 30915
// PrepareHuman ( false , i , skill ) ;
30898: LD_INT 0
30900: PPUSH
30901: LD_VAR 0 8
30905: PPUSH
30906: LD_VAR 0 4
30910: PPUSH
30911: CALL_OW 380
// un := CreateHuman ;
30915: LD_ADDR_VAR 0 14
30919: PUSH
30920: CALL_OW 44
30924: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30925: LD_ADDR_VAR 0 7
30929: PUSH
30930: LD_VAR 0 7
30934: PPUSH
30935: LD_INT 1
30937: PPUSH
30938: LD_VAR 0 14
30942: PPUSH
30943: CALL_OW 2
30947: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30948: LD_VAR 0 14
30952: PPUSH
30953: LD_VAR 0 12
30957: PUSH
30958: LD_INT 1
30960: ARRAY
30961: PPUSH
30962: CALL_OW 52
// end ;
30966: GO 30605
30968: POP
30969: POP
// end ;
30970: GO 29907
30972: POP
30973: POP
// result := result ^ buildings ;
30974: LD_ADDR_VAR 0 7
30978: PUSH
30979: LD_VAR 0 7
30983: PUSH
30984: LD_VAR 0 18
30988: ADD
30989: ST_TO_ADDR
// end else
30990: GO 31133
// begin for i = 1 to personel do
30992: LD_ADDR_VAR 0 8
30996: PUSH
30997: DOUBLE
30998: LD_INT 1
31000: DEC
31001: ST_TO_ADDR
31002: LD_VAR 0 6
31006: PUSH
31007: FOR_TO
31008: IFFALSE 31131
// begin if i > 4 then
31010: LD_VAR 0 8
31014: PUSH
31015: LD_INT 4
31017: GREATER
31018: IFFALSE 31022
// break ;
31020: GO 31131
// x := personel [ i ] ;
31022: LD_ADDR_VAR 0 13
31026: PUSH
31027: LD_VAR 0 6
31031: PUSH
31032: LD_VAR 0 8
31036: ARRAY
31037: ST_TO_ADDR
// if x = - 1 then
31038: LD_VAR 0 13
31042: PUSH
31043: LD_INT 1
31045: NEG
31046: EQUAL
31047: IFFALSE 31051
// continue ;
31049: GO 31007
// PrepareHuman ( false , i , skill ) ;
31051: LD_INT 0
31053: PPUSH
31054: LD_VAR 0 8
31058: PPUSH
31059: LD_VAR 0 4
31063: PPUSH
31064: CALL_OW 380
// un := CreateHuman ;
31068: LD_ADDR_VAR 0 14
31072: PUSH
31073: CALL_OW 44
31077: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31078: LD_VAR 0 14
31082: PPUSH
31083: LD_VAR 0 1
31087: PPUSH
31088: CALL_OW 250
31092: PPUSH
31093: LD_VAR 0 1
31097: PPUSH
31098: CALL_OW 251
31102: PPUSH
31103: LD_INT 10
31105: PPUSH
31106: LD_INT 0
31108: PPUSH
31109: CALL_OW 50
// result := result ^ un ;
31113: LD_ADDR_VAR 0 7
31117: PUSH
31118: LD_VAR 0 7
31122: PUSH
31123: LD_VAR 0 14
31127: ADD
31128: ST_TO_ADDR
// end ;
31129: GO 31007
31131: POP
31132: POP
// end ; end ;
31133: LD_VAR 0 7
31137: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31138: LD_INT 0
31140: PPUSH
31141: PPUSH
31142: PPUSH
31143: PPUSH
31144: PPUSH
31145: PPUSH
31146: PPUSH
31147: PPUSH
31148: PPUSH
31149: PPUSH
31150: PPUSH
31151: PPUSH
31152: PPUSH
31153: PPUSH
31154: PPUSH
31155: PPUSH
// result := false ;
31156: LD_ADDR_VAR 0 3
31160: PUSH
31161: LD_INT 0
31163: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31164: LD_VAR 0 1
31168: NOT
31169: PUSH
31170: LD_VAR 0 1
31174: PPUSH
31175: CALL_OW 266
31179: PUSH
31180: LD_INT 32
31182: PUSH
31183: LD_INT 33
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: IN
31190: NOT
31191: OR
31192: IFFALSE 31196
// exit ;
31194: GO 32332
// nat := GetNation ( tower ) ;
31196: LD_ADDR_VAR 0 12
31200: PUSH
31201: LD_VAR 0 1
31205: PPUSH
31206: CALL_OW 248
31210: ST_TO_ADDR
// side := GetSide ( tower ) ;
31211: LD_ADDR_VAR 0 16
31215: PUSH
31216: LD_VAR 0 1
31220: PPUSH
31221: CALL_OW 255
31225: ST_TO_ADDR
// x := GetX ( tower ) ;
31226: LD_ADDR_VAR 0 10
31230: PUSH
31231: LD_VAR 0 1
31235: PPUSH
31236: CALL_OW 250
31240: ST_TO_ADDR
// y := GetY ( tower ) ;
31241: LD_ADDR_VAR 0 11
31245: PUSH
31246: LD_VAR 0 1
31250: PPUSH
31251: CALL_OW 251
31255: ST_TO_ADDR
// if not x or not y then
31256: LD_VAR 0 10
31260: NOT
31261: PUSH
31262: LD_VAR 0 11
31266: NOT
31267: OR
31268: IFFALSE 31272
// exit ;
31270: GO 32332
// weapon := 0 ;
31272: LD_ADDR_VAR 0 18
31276: PUSH
31277: LD_INT 0
31279: ST_TO_ADDR
// fac_list := [ ] ;
31280: LD_ADDR_VAR 0 17
31284: PUSH
31285: EMPTY
31286: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31287: LD_ADDR_VAR 0 6
31291: PUSH
31292: LD_VAR 0 1
31296: PPUSH
31297: CALL_OW 274
31301: PPUSH
31302: LD_VAR 0 2
31306: PPUSH
31307: CALL 28910 0 2
31311: PPUSH
31312: LD_INT 30
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PPUSH
31322: CALL_OW 72
31326: ST_TO_ADDR
// if not factories then
31327: LD_VAR 0 6
31331: NOT
31332: IFFALSE 31336
// exit ;
31334: GO 32332
// for i in factories do
31336: LD_ADDR_VAR 0 8
31340: PUSH
31341: LD_VAR 0 6
31345: PUSH
31346: FOR_IN
31347: IFFALSE 31372
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31349: LD_ADDR_VAR 0 17
31353: PUSH
31354: LD_VAR 0 17
31358: PUSH
31359: LD_VAR 0 8
31363: PPUSH
31364: CALL_OW 478
31368: UNION
31369: ST_TO_ADDR
31370: GO 31346
31372: POP
31373: POP
// if not fac_list then
31374: LD_VAR 0 17
31378: NOT
31379: IFFALSE 31383
// exit ;
31381: GO 32332
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31383: LD_ADDR_VAR 0 5
31387: PUSH
31388: LD_INT 4
31390: PUSH
31391: LD_INT 5
31393: PUSH
31394: LD_INT 9
31396: PUSH
31397: LD_INT 10
31399: PUSH
31400: LD_INT 6
31402: PUSH
31403: LD_INT 7
31405: PUSH
31406: LD_INT 11
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 27
31420: PUSH
31421: LD_INT 28
31423: PUSH
31424: LD_INT 26
31426: PUSH
31427: LD_INT 30
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 43
31438: PUSH
31439: LD_INT 44
31441: PUSH
31442: LD_INT 46
31444: PUSH
31445: LD_INT 45
31447: PUSH
31448: LD_INT 47
31450: PUSH
31451: LD_INT 49
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: LIST
31466: PUSH
31467: LD_VAR 0 12
31471: ARRAY
31472: ST_TO_ADDR
// for i in list do
31473: LD_ADDR_VAR 0 8
31477: PUSH
31478: LD_VAR 0 5
31482: PUSH
31483: FOR_IN
31484: IFFALSE 31517
// if not i in fac_list then
31486: LD_VAR 0 8
31490: PUSH
31491: LD_VAR 0 17
31495: IN
31496: NOT
31497: IFFALSE 31515
// list := list diff i ;
31499: LD_ADDR_VAR 0 5
31503: PUSH
31504: LD_VAR 0 5
31508: PUSH
31509: LD_VAR 0 8
31513: DIFF
31514: ST_TO_ADDR
31515: GO 31483
31517: POP
31518: POP
// if not list then
31519: LD_VAR 0 5
31523: NOT
31524: IFFALSE 31528
// exit ;
31526: GO 32332
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31528: LD_VAR 0 12
31532: PUSH
31533: LD_INT 3
31535: EQUAL
31536: PUSH
31537: LD_INT 49
31539: PUSH
31540: LD_VAR 0 5
31544: IN
31545: AND
31546: PUSH
31547: LD_INT 31
31549: PPUSH
31550: LD_VAR 0 16
31554: PPUSH
31555: CALL_OW 321
31559: PUSH
31560: LD_INT 2
31562: EQUAL
31563: AND
31564: IFFALSE 31624
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31566: LD_INT 22
31568: PUSH
31569: LD_VAR 0 16
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 35
31580: PUSH
31581: LD_INT 49
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 91
31590: PUSH
31591: LD_VAR 0 1
31595: PUSH
31596: LD_INT 10
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: PPUSH
31609: CALL_OW 69
31613: NOT
31614: IFFALSE 31624
// weapon := ru_time_lapser ;
31616: LD_ADDR_VAR 0 18
31620: PUSH
31621: LD_INT 49
31623: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31624: LD_VAR 0 12
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: IN
31639: PUSH
31640: LD_INT 11
31642: PUSH
31643: LD_VAR 0 5
31647: IN
31648: PUSH
31649: LD_INT 30
31651: PUSH
31652: LD_VAR 0 5
31656: IN
31657: OR
31658: AND
31659: PUSH
31660: LD_INT 6
31662: PPUSH
31663: LD_VAR 0 16
31667: PPUSH
31668: CALL_OW 321
31672: PUSH
31673: LD_INT 2
31675: EQUAL
31676: AND
31677: IFFALSE 31842
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31679: LD_INT 22
31681: PUSH
31682: LD_VAR 0 16
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: LD_INT 35
31696: PUSH
31697: LD_INT 11
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 35
31706: PUSH
31707: LD_INT 30
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 91
31721: PUSH
31722: LD_VAR 0 1
31726: PUSH
31727: LD_INT 18
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: PPUSH
31740: CALL_OW 69
31744: NOT
31745: PUSH
31746: LD_INT 22
31748: PUSH
31749: LD_VAR 0 16
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 2
31760: PUSH
31761: LD_INT 30
31763: PUSH
31764: LD_INT 32
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 30
31773: PUSH
31774: LD_INT 33
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 91
31788: PUSH
31789: LD_VAR 0 1
31793: PUSH
31794: LD_INT 12
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: LIST
31806: PUSH
31807: EMPTY
31808: LIST
31809: PPUSH
31810: CALL_OW 69
31814: PUSH
31815: LD_INT 2
31817: GREATER
31818: AND
31819: IFFALSE 31842
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31821: LD_ADDR_VAR 0 18
31825: PUSH
31826: LD_INT 11
31828: PUSH
31829: LD_INT 30
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_VAR 0 12
31840: ARRAY
31841: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31842: LD_VAR 0 18
31846: NOT
31847: PUSH
31848: LD_INT 40
31850: PPUSH
31851: LD_VAR 0 16
31855: PPUSH
31856: CALL_OW 321
31860: PUSH
31861: LD_INT 2
31863: EQUAL
31864: AND
31865: PUSH
31866: LD_INT 7
31868: PUSH
31869: LD_VAR 0 5
31873: IN
31874: PUSH
31875: LD_INT 28
31877: PUSH
31878: LD_VAR 0 5
31882: IN
31883: OR
31884: PUSH
31885: LD_INT 45
31887: PUSH
31888: LD_VAR 0 5
31892: IN
31893: OR
31894: AND
31895: IFFALSE 32149
// begin hex := GetHexInfo ( x , y ) ;
31897: LD_ADDR_VAR 0 4
31901: PUSH
31902: LD_VAR 0 10
31906: PPUSH
31907: LD_VAR 0 11
31911: PPUSH
31912: CALL_OW 546
31916: ST_TO_ADDR
// if hex [ 1 ] then
31917: LD_VAR 0 4
31921: PUSH
31922: LD_INT 1
31924: ARRAY
31925: IFFALSE 31929
// exit ;
31927: GO 32332
// height := hex [ 2 ] ;
31929: LD_ADDR_VAR 0 15
31933: PUSH
31934: LD_VAR 0 4
31938: PUSH
31939: LD_INT 2
31941: ARRAY
31942: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31943: LD_ADDR_VAR 0 14
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 3
31956: PUSH
31957: LD_INT 5
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: ST_TO_ADDR
// for i in tmp do
31966: LD_ADDR_VAR 0 8
31970: PUSH
31971: LD_VAR 0 14
31975: PUSH
31976: FOR_IN
31977: IFFALSE 32147
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31979: LD_ADDR_VAR 0 9
31983: PUSH
31984: LD_VAR 0 10
31988: PPUSH
31989: LD_VAR 0 8
31993: PPUSH
31994: LD_INT 5
31996: PPUSH
31997: CALL_OW 272
32001: PUSH
32002: LD_VAR 0 11
32006: PPUSH
32007: LD_VAR 0 8
32011: PPUSH
32012: LD_INT 5
32014: PPUSH
32015: CALL_OW 273
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32024: LD_VAR 0 9
32028: PUSH
32029: LD_INT 1
32031: ARRAY
32032: PPUSH
32033: LD_VAR 0 9
32037: PUSH
32038: LD_INT 2
32040: ARRAY
32041: PPUSH
32042: CALL_OW 488
32046: IFFALSE 32145
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32048: LD_ADDR_VAR 0 4
32052: PUSH
32053: LD_VAR 0 9
32057: PUSH
32058: LD_INT 1
32060: ARRAY
32061: PPUSH
32062: LD_VAR 0 9
32066: PUSH
32067: LD_INT 2
32069: ARRAY
32070: PPUSH
32071: CALL_OW 546
32075: ST_TO_ADDR
// if hex [ 1 ] then
32076: LD_VAR 0 4
32080: PUSH
32081: LD_INT 1
32083: ARRAY
32084: IFFALSE 32088
// continue ;
32086: GO 31976
// h := hex [ 2 ] ;
32088: LD_ADDR_VAR 0 13
32092: PUSH
32093: LD_VAR 0 4
32097: PUSH
32098: LD_INT 2
32100: ARRAY
32101: ST_TO_ADDR
// if h + 7 < height then
32102: LD_VAR 0 13
32106: PUSH
32107: LD_INT 7
32109: PLUS
32110: PUSH
32111: LD_VAR 0 15
32115: LESS
32116: IFFALSE 32145
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32118: LD_ADDR_VAR 0 18
32122: PUSH
32123: LD_INT 7
32125: PUSH
32126: LD_INT 28
32128: PUSH
32129: LD_INT 45
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: PUSH
32137: LD_VAR 0 12
32141: ARRAY
32142: ST_TO_ADDR
// break ;
32143: GO 32147
// end ; end ; end ;
32145: GO 31976
32147: POP
32148: POP
// end ; if not weapon then
32149: LD_VAR 0 18
32153: NOT
32154: IFFALSE 32214
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32156: LD_ADDR_VAR 0 5
32160: PUSH
32161: LD_VAR 0 5
32165: PUSH
32166: LD_INT 11
32168: PUSH
32169: LD_INT 30
32171: PUSH
32172: LD_INT 49
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: DIFF
32180: ST_TO_ADDR
// if not list then
32181: LD_VAR 0 5
32185: NOT
32186: IFFALSE 32190
// exit ;
32188: GO 32332
// weapon := list [ rand ( 1 , list ) ] ;
32190: LD_ADDR_VAR 0 18
32194: PUSH
32195: LD_VAR 0 5
32199: PUSH
32200: LD_INT 1
32202: PPUSH
32203: LD_VAR 0 5
32207: PPUSH
32208: CALL_OW 12
32212: ARRAY
32213: ST_TO_ADDR
// end ; if weapon then
32214: LD_VAR 0 18
32218: IFFALSE 32332
// begin tmp := CostOfWeapon ( weapon ) ;
32220: LD_ADDR_VAR 0 14
32224: PUSH
32225: LD_VAR 0 18
32229: PPUSH
32230: CALL_OW 451
32234: ST_TO_ADDR
// j := GetBase ( tower ) ;
32235: LD_ADDR_VAR 0 9
32239: PUSH
32240: LD_VAR 0 1
32244: PPUSH
32245: CALL_OW 274
32249: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32250: LD_VAR 0 9
32254: PPUSH
32255: LD_INT 1
32257: PPUSH
32258: CALL_OW 275
32262: PUSH
32263: LD_VAR 0 14
32267: PUSH
32268: LD_INT 1
32270: ARRAY
32271: GREATEREQUAL
32272: PUSH
32273: LD_VAR 0 9
32277: PPUSH
32278: LD_INT 2
32280: PPUSH
32281: CALL_OW 275
32285: PUSH
32286: LD_VAR 0 14
32290: PUSH
32291: LD_INT 2
32293: ARRAY
32294: GREATEREQUAL
32295: AND
32296: PUSH
32297: LD_VAR 0 9
32301: PPUSH
32302: LD_INT 3
32304: PPUSH
32305: CALL_OW 275
32309: PUSH
32310: LD_VAR 0 14
32314: PUSH
32315: LD_INT 3
32317: ARRAY
32318: GREATEREQUAL
32319: AND
32320: IFFALSE 32332
// result := weapon ;
32322: LD_ADDR_VAR 0 3
32326: PUSH
32327: LD_VAR 0 18
32331: ST_TO_ADDR
// end ; end ;
32332: LD_VAR 0 3
32336: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32337: LD_INT 0
32339: PPUSH
32340: PPUSH
// result := true ;
32341: LD_ADDR_VAR 0 3
32345: PUSH
32346: LD_INT 1
32348: ST_TO_ADDR
// if array1 = array2 then
32349: LD_VAR 0 1
32353: PUSH
32354: LD_VAR 0 2
32358: EQUAL
32359: IFFALSE 32419
// begin for i = 1 to array1 do
32361: LD_ADDR_VAR 0 4
32365: PUSH
32366: DOUBLE
32367: LD_INT 1
32369: DEC
32370: ST_TO_ADDR
32371: LD_VAR 0 1
32375: PUSH
32376: FOR_TO
32377: IFFALSE 32415
// if array1 [ i ] <> array2 [ i ] then
32379: LD_VAR 0 1
32383: PUSH
32384: LD_VAR 0 4
32388: ARRAY
32389: PUSH
32390: LD_VAR 0 2
32394: PUSH
32395: LD_VAR 0 4
32399: ARRAY
32400: NONEQUAL
32401: IFFALSE 32413
// begin result := false ;
32403: LD_ADDR_VAR 0 3
32407: PUSH
32408: LD_INT 0
32410: ST_TO_ADDR
// break ;
32411: GO 32415
// end ;
32413: GO 32376
32415: POP
32416: POP
// end else
32417: GO 32427
// result := false ;
32419: LD_ADDR_VAR 0 3
32423: PUSH
32424: LD_INT 0
32426: ST_TO_ADDR
// end ;
32427: LD_VAR 0 3
32431: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32432: LD_INT 0
32434: PPUSH
32435: PPUSH
32436: PPUSH
// pom := GetBase ( fac ) ;
32437: LD_ADDR_VAR 0 5
32441: PUSH
32442: LD_VAR 0 1
32446: PPUSH
32447: CALL_OW 274
32451: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32452: LD_ADDR_VAR 0 4
32456: PUSH
32457: LD_VAR 0 2
32461: PUSH
32462: LD_INT 1
32464: ARRAY
32465: PPUSH
32466: LD_VAR 0 2
32470: PUSH
32471: LD_INT 2
32473: ARRAY
32474: PPUSH
32475: LD_VAR 0 2
32479: PUSH
32480: LD_INT 3
32482: ARRAY
32483: PPUSH
32484: LD_VAR 0 2
32488: PUSH
32489: LD_INT 4
32491: ARRAY
32492: PPUSH
32493: CALL_OW 449
32497: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32498: LD_ADDR_VAR 0 3
32502: PUSH
32503: LD_VAR 0 5
32507: PPUSH
32508: LD_INT 1
32510: PPUSH
32511: CALL_OW 275
32515: PUSH
32516: LD_VAR 0 4
32520: PUSH
32521: LD_INT 1
32523: ARRAY
32524: GREATEREQUAL
32525: PUSH
32526: LD_VAR 0 5
32530: PPUSH
32531: LD_INT 2
32533: PPUSH
32534: CALL_OW 275
32538: PUSH
32539: LD_VAR 0 4
32543: PUSH
32544: LD_INT 2
32546: ARRAY
32547: GREATEREQUAL
32548: AND
32549: PUSH
32550: LD_VAR 0 5
32554: PPUSH
32555: LD_INT 3
32557: PPUSH
32558: CALL_OW 275
32562: PUSH
32563: LD_VAR 0 4
32567: PUSH
32568: LD_INT 3
32570: ARRAY
32571: GREATEREQUAL
32572: AND
32573: ST_TO_ADDR
// end ;
32574: LD_VAR 0 3
32578: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32579: LD_INT 0
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
// pom := GetBase ( building ) ;
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_VAR 0 1
32594: PPUSH
32595: CALL_OW 274
32599: ST_TO_ADDR
// if not pom then
32600: LD_VAR 0 3
32604: NOT
32605: IFFALSE 32609
// exit ;
32607: GO 32779
// btype := GetBType ( building ) ;
32609: LD_ADDR_VAR 0 5
32613: PUSH
32614: LD_VAR 0 1
32618: PPUSH
32619: CALL_OW 266
32623: ST_TO_ADDR
// if btype = b_armoury then
32624: LD_VAR 0 5
32628: PUSH
32629: LD_INT 4
32631: EQUAL
32632: IFFALSE 32642
// btype := b_barracks ;
32634: LD_ADDR_VAR 0 5
32638: PUSH
32639: LD_INT 5
32641: ST_TO_ADDR
// if btype = b_depot then
32642: LD_VAR 0 5
32646: PUSH
32647: LD_INT 0
32649: EQUAL
32650: IFFALSE 32660
// btype := b_warehouse ;
32652: LD_ADDR_VAR 0 5
32656: PUSH
32657: LD_INT 1
32659: ST_TO_ADDR
// if btype = b_workshop then
32660: LD_VAR 0 5
32664: PUSH
32665: LD_INT 2
32667: EQUAL
32668: IFFALSE 32678
// btype := b_factory ;
32670: LD_ADDR_VAR 0 5
32674: PUSH
32675: LD_INT 3
32677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32678: LD_ADDR_VAR 0 4
32682: PUSH
32683: LD_VAR 0 5
32687: PPUSH
32688: LD_VAR 0 1
32692: PPUSH
32693: CALL_OW 248
32697: PPUSH
32698: CALL_OW 450
32702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32703: LD_ADDR_VAR 0 2
32707: PUSH
32708: LD_VAR 0 3
32712: PPUSH
32713: LD_INT 1
32715: PPUSH
32716: CALL_OW 275
32720: PUSH
32721: LD_VAR 0 4
32725: PUSH
32726: LD_INT 1
32728: ARRAY
32729: GREATEREQUAL
32730: PUSH
32731: LD_VAR 0 3
32735: PPUSH
32736: LD_INT 2
32738: PPUSH
32739: CALL_OW 275
32743: PUSH
32744: LD_VAR 0 4
32748: PUSH
32749: LD_INT 2
32751: ARRAY
32752: GREATEREQUAL
32753: AND
32754: PUSH
32755: LD_VAR 0 3
32759: PPUSH
32760: LD_INT 3
32762: PPUSH
32763: CALL_OW 275
32767: PUSH
32768: LD_VAR 0 4
32772: PUSH
32773: LD_INT 3
32775: ARRAY
32776: GREATEREQUAL
32777: AND
32778: ST_TO_ADDR
// end ;
32779: LD_VAR 0 2
32783: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32784: LD_INT 0
32786: PPUSH
32787: PPUSH
32788: PPUSH
// pom := GetBase ( building ) ;
32789: LD_ADDR_VAR 0 4
32793: PUSH
32794: LD_VAR 0 1
32798: PPUSH
32799: CALL_OW 274
32803: ST_TO_ADDR
// if not pom then
32804: LD_VAR 0 4
32808: NOT
32809: IFFALSE 32813
// exit ;
32811: GO 32914
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32813: LD_ADDR_VAR 0 5
32817: PUSH
32818: LD_VAR 0 2
32822: PPUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: CALL_OW 248
32832: PPUSH
32833: CALL_OW 450
32837: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32838: LD_ADDR_VAR 0 3
32842: PUSH
32843: LD_VAR 0 4
32847: PPUSH
32848: LD_INT 1
32850: PPUSH
32851: CALL_OW 275
32855: PUSH
32856: LD_VAR 0 5
32860: PUSH
32861: LD_INT 1
32863: ARRAY
32864: GREATEREQUAL
32865: PUSH
32866: LD_VAR 0 4
32870: PPUSH
32871: LD_INT 2
32873: PPUSH
32874: CALL_OW 275
32878: PUSH
32879: LD_VAR 0 5
32883: PUSH
32884: LD_INT 2
32886: ARRAY
32887: GREATEREQUAL
32888: AND
32889: PUSH
32890: LD_VAR 0 4
32894: PPUSH
32895: LD_INT 3
32897: PPUSH
32898: CALL_OW 275
32902: PUSH
32903: LD_VAR 0 5
32907: PUSH
32908: LD_INT 3
32910: ARRAY
32911: GREATEREQUAL
32912: AND
32913: ST_TO_ADDR
// end ;
32914: LD_VAR 0 3
32918: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32919: LD_INT 0
32921: PPUSH
32922: PPUSH
32923: PPUSH
32924: PPUSH
32925: PPUSH
32926: PPUSH
32927: PPUSH
32928: PPUSH
32929: PPUSH
32930: PPUSH
// result := false ;
32931: LD_ADDR_VAR 0 6
32935: PUSH
32936: LD_INT 0
32938: ST_TO_ADDR
// if not base or not btype or not x or not y then
32939: LD_VAR 0 1
32943: NOT
32944: PUSH
32945: LD_VAR 0 2
32949: NOT
32950: OR
32951: PUSH
32952: LD_VAR 0 3
32956: NOT
32957: OR
32958: PUSH
32959: LD_VAR 0 4
32963: NOT
32964: OR
32965: IFFALSE 32969
// exit ;
32967: GO 33578
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32969: LD_ADDR_VAR 0 12
32973: PUSH
32974: LD_VAR 0 2
32978: PPUSH
32979: LD_VAR 0 3
32983: PPUSH
32984: LD_VAR 0 4
32988: PPUSH
32989: LD_VAR 0 5
32993: PPUSH
32994: LD_VAR 0 1
32998: PUSH
32999: LD_INT 1
33001: ARRAY
33002: PPUSH
33003: CALL_OW 248
33007: PPUSH
33008: LD_INT 0
33010: PPUSH
33011: CALL 34415 0 6
33015: ST_TO_ADDR
// if not hexes then
33016: LD_VAR 0 12
33020: NOT
33021: IFFALSE 33025
// exit ;
33023: GO 33578
// for i = 1 to hexes do
33025: LD_ADDR_VAR 0 7
33029: PUSH
33030: DOUBLE
33031: LD_INT 1
33033: DEC
33034: ST_TO_ADDR
33035: LD_VAR 0 12
33039: PUSH
33040: FOR_TO
33041: IFFALSE 33576
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33043: LD_ADDR_VAR 0 11
33047: PUSH
33048: LD_VAR 0 12
33052: PUSH
33053: LD_VAR 0 7
33057: ARRAY
33058: PUSH
33059: LD_INT 1
33061: ARRAY
33062: PPUSH
33063: LD_VAR 0 12
33067: PUSH
33068: LD_VAR 0 7
33072: ARRAY
33073: PUSH
33074: LD_INT 2
33076: ARRAY
33077: PPUSH
33078: CALL_OW 428
33082: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33083: LD_VAR 0 12
33087: PUSH
33088: LD_VAR 0 7
33092: ARRAY
33093: PUSH
33094: LD_INT 1
33096: ARRAY
33097: PPUSH
33098: LD_VAR 0 12
33102: PUSH
33103: LD_VAR 0 7
33107: ARRAY
33108: PUSH
33109: LD_INT 2
33111: ARRAY
33112: PPUSH
33113: CALL_OW 351
33117: PUSH
33118: LD_VAR 0 12
33122: PUSH
33123: LD_VAR 0 7
33127: ARRAY
33128: PUSH
33129: LD_INT 1
33131: ARRAY
33132: PPUSH
33133: LD_VAR 0 12
33137: PUSH
33138: LD_VAR 0 7
33142: ARRAY
33143: PUSH
33144: LD_INT 2
33146: ARRAY
33147: PPUSH
33148: CALL_OW 488
33152: NOT
33153: OR
33154: PUSH
33155: LD_VAR 0 11
33159: PPUSH
33160: CALL_OW 247
33164: PUSH
33165: LD_INT 3
33167: EQUAL
33168: OR
33169: IFFALSE 33175
// exit ;
33171: POP
33172: POP
33173: GO 33578
// if not tmp or not tmp in base then
33175: LD_VAR 0 11
33179: NOT
33180: PUSH
33181: LD_VAR 0 11
33185: PUSH
33186: LD_VAR 0 1
33190: IN
33191: NOT
33192: OR
33193: IFFALSE 33197
// continue ;
33195: GO 33040
// result := true ;
33197: LD_ADDR_VAR 0 6
33201: PUSH
33202: LD_INT 1
33204: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33205: LD_ADDR_VAR 0 15
33209: PUSH
33210: LD_VAR 0 1
33214: PPUSH
33215: LD_INT 22
33217: PUSH
33218: LD_VAR 0 11
33222: PPUSH
33223: CALL_OW 255
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 2
33234: PUSH
33235: LD_INT 30
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 30
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PPUSH
33264: CALL_OW 72
33268: ST_TO_ADDR
// if dep then
33269: LD_VAR 0 15
33273: IFFALSE 33409
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33275: LD_ADDR_VAR 0 14
33279: PUSH
33280: LD_VAR 0 15
33284: PUSH
33285: LD_INT 1
33287: ARRAY
33288: PPUSH
33289: CALL_OW 250
33293: PPUSH
33294: LD_VAR 0 15
33298: PUSH
33299: LD_INT 1
33301: ARRAY
33302: PPUSH
33303: CALL_OW 254
33307: PPUSH
33308: LD_INT 5
33310: PPUSH
33311: CALL_OW 272
33315: PUSH
33316: LD_VAR 0 15
33320: PUSH
33321: LD_INT 1
33323: ARRAY
33324: PPUSH
33325: CALL_OW 251
33329: PPUSH
33330: LD_VAR 0 15
33334: PUSH
33335: LD_INT 1
33337: ARRAY
33338: PPUSH
33339: CALL_OW 254
33343: PPUSH
33344: LD_INT 5
33346: PPUSH
33347: CALL_OW 273
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33356: LD_VAR 0 14
33360: PUSH
33361: LD_INT 1
33363: ARRAY
33364: PPUSH
33365: LD_VAR 0 14
33369: PUSH
33370: LD_INT 2
33372: ARRAY
33373: PPUSH
33374: CALL_OW 488
33378: IFFALSE 33409
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33380: LD_VAR 0 11
33384: PPUSH
33385: LD_VAR 0 14
33389: PUSH
33390: LD_INT 1
33392: ARRAY
33393: PPUSH
33394: LD_VAR 0 14
33398: PUSH
33399: LD_INT 2
33401: ARRAY
33402: PPUSH
33403: CALL_OW 111
// continue ;
33407: GO 33040
// end ; end ; r := GetDir ( tmp ) ;
33409: LD_ADDR_VAR 0 13
33413: PUSH
33414: LD_VAR 0 11
33418: PPUSH
33419: CALL_OW 254
33423: ST_TO_ADDR
// if r = 5 then
33424: LD_VAR 0 13
33428: PUSH
33429: LD_INT 5
33431: EQUAL
33432: IFFALSE 33442
// r := 0 ;
33434: LD_ADDR_VAR 0 13
33438: PUSH
33439: LD_INT 0
33441: ST_TO_ADDR
// for j = r to 5 do
33442: LD_ADDR_VAR 0 8
33446: PUSH
33447: DOUBLE
33448: LD_VAR 0 13
33452: DEC
33453: ST_TO_ADDR
33454: LD_INT 5
33456: PUSH
33457: FOR_TO
33458: IFFALSE 33572
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33460: LD_ADDR_VAR 0 9
33464: PUSH
33465: LD_VAR 0 11
33469: PPUSH
33470: CALL_OW 250
33474: PPUSH
33475: LD_VAR 0 8
33479: PPUSH
33480: LD_INT 2
33482: PPUSH
33483: CALL_OW 272
33487: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33488: LD_ADDR_VAR 0 10
33492: PUSH
33493: LD_VAR 0 11
33497: PPUSH
33498: CALL_OW 251
33502: PPUSH
33503: LD_VAR 0 8
33507: PPUSH
33508: LD_INT 2
33510: PPUSH
33511: CALL_OW 273
33515: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33516: LD_VAR 0 9
33520: PPUSH
33521: LD_VAR 0 10
33525: PPUSH
33526: CALL_OW 488
33530: PUSH
33531: LD_VAR 0 9
33535: PPUSH
33536: LD_VAR 0 10
33540: PPUSH
33541: CALL_OW 428
33545: NOT
33546: AND
33547: IFFALSE 33570
// begin ComMoveXY ( tmp , _x , _y ) ;
33549: LD_VAR 0 11
33553: PPUSH
33554: LD_VAR 0 9
33558: PPUSH
33559: LD_VAR 0 10
33563: PPUSH
33564: CALL_OW 111
// break ;
33568: GO 33572
// end ; end ;
33570: GO 33457
33572: POP
33573: POP
// end ;
33574: GO 33040
33576: POP
33577: POP
// end ;
33578: LD_VAR 0 6
33582: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33583: LD_INT 0
33585: PPUSH
33586: PPUSH
33587: PPUSH
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
33592: PPUSH
33593: PPUSH
33594: PPUSH
// result := false ;
33595: LD_ADDR_VAR 0 6
33599: PUSH
33600: LD_INT 0
33602: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33603: LD_VAR 0 1
33607: NOT
33608: PUSH
33609: LD_VAR 0 1
33613: PPUSH
33614: CALL_OW 266
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: IN
33629: NOT
33630: OR
33631: PUSH
33632: LD_VAR 0 2
33636: NOT
33637: OR
33638: PUSH
33639: LD_VAR 0 5
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: LD_INT 4
33658: PUSH
33659: LD_INT 5
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: IN
33670: NOT
33671: OR
33672: PUSH
33673: LD_VAR 0 3
33677: PPUSH
33678: LD_VAR 0 4
33682: PPUSH
33683: CALL_OW 488
33687: NOT
33688: OR
33689: IFFALSE 33693
// exit ;
33691: GO 34410
// pom := GetBase ( depot ) ;
33693: LD_ADDR_VAR 0 10
33697: PUSH
33698: LD_VAR 0 1
33702: PPUSH
33703: CALL_OW 274
33707: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33708: LD_ADDR_VAR 0 11
33712: PUSH
33713: LD_VAR 0 2
33717: PPUSH
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL_OW 248
33727: PPUSH
33728: CALL_OW 450
33732: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33733: LD_VAR 0 10
33737: PPUSH
33738: LD_INT 1
33740: PPUSH
33741: CALL_OW 275
33745: PUSH
33746: LD_VAR 0 11
33750: PUSH
33751: LD_INT 1
33753: ARRAY
33754: GREATEREQUAL
33755: PUSH
33756: LD_VAR 0 10
33760: PPUSH
33761: LD_INT 2
33763: PPUSH
33764: CALL_OW 275
33768: PUSH
33769: LD_VAR 0 11
33773: PUSH
33774: LD_INT 2
33776: ARRAY
33777: GREATEREQUAL
33778: AND
33779: PUSH
33780: LD_VAR 0 10
33784: PPUSH
33785: LD_INT 3
33787: PPUSH
33788: CALL_OW 275
33792: PUSH
33793: LD_VAR 0 11
33797: PUSH
33798: LD_INT 3
33800: ARRAY
33801: GREATEREQUAL
33802: AND
33803: NOT
33804: IFFALSE 33808
// exit ;
33806: GO 34410
// if GetBType ( depot ) = b_depot then
33808: LD_VAR 0 1
33812: PPUSH
33813: CALL_OW 266
33817: PUSH
33818: LD_INT 0
33820: EQUAL
33821: IFFALSE 33833
// dist := 28 else
33823: LD_ADDR_VAR 0 14
33827: PUSH
33828: LD_INT 28
33830: ST_TO_ADDR
33831: GO 33841
// dist := 36 ;
33833: LD_ADDR_VAR 0 14
33837: PUSH
33838: LD_INT 36
33840: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33841: LD_VAR 0 1
33845: PPUSH
33846: LD_VAR 0 3
33850: PPUSH
33851: LD_VAR 0 4
33855: PPUSH
33856: CALL_OW 297
33860: PUSH
33861: LD_VAR 0 14
33865: GREATER
33866: IFFALSE 33870
// exit ;
33868: GO 34410
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33870: LD_ADDR_VAR 0 12
33874: PUSH
33875: LD_VAR 0 2
33879: PPUSH
33880: LD_VAR 0 3
33884: PPUSH
33885: LD_VAR 0 4
33889: PPUSH
33890: LD_VAR 0 5
33894: PPUSH
33895: LD_VAR 0 1
33899: PPUSH
33900: CALL_OW 248
33904: PPUSH
33905: LD_INT 0
33907: PPUSH
33908: CALL 34415 0 6
33912: ST_TO_ADDR
// if not hexes then
33913: LD_VAR 0 12
33917: NOT
33918: IFFALSE 33922
// exit ;
33920: GO 34410
// hex := GetHexInfo ( x , y ) ;
33922: LD_ADDR_VAR 0 15
33926: PUSH
33927: LD_VAR 0 3
33931: PPUSH
33932: LD_VAR 0 4
33936: PPUSH
33937: CALL_OW 546
33941: ST_TO_ADDR
// if hex [ 1 ] then
33942: LD_VAR 0 15
33946: PUSH
33947: LD_INT 1
33949: ARRAY
33950: IFFALSE 33954
// exit ;
33952: GO 34410
// height := hex [ 2 ] ;
33954: LD_ADDR_VAR 0 13
33958: PUSH
33959: LD_VAR 0 15
33963: PUSH
33964: LD_INT 2
33966: ARRAY
33967: ST_TO_ADDR
// for i = 1 to hexes do
33968: LD_ADDR_VAR 0 7
33972: PUSH
33973: DOUBLE
33974: LD_INT 1
33976: DEC
33977: ST_TO_ADDR
33978: LD_VAR 0 12
33982: PUSH
33983: FOR_TO
33984: IFFALSE 34314
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33986: LD_VAR 0 12
33990: PUSH
33991: LD_VAR 0 7
33995: ARRAY
33996: PUSH
33997: LD_INT 1
33999: ARRAY
34000: PPUSH
34001: LD_VAR 0 12
34005: PUSH
34006: LD_VAR 0 7
34010: ARRAY
34011: PUSH
34012: LD_INT 2
34014: ARRAY
34015: PPUSH
34016: CALL_OW 488
34020: NOT
34021: PUSH
34022: LD_VAR 0 12
34026: PUSH
34027: LD_VAR 0 7
34031: ARRAY
34032: PUSH
34033: LD_INT 1
34035: ARRAY
34036: PPUSH
34037: LD_VAR 0 12
34041: PUSH
34042: LD_VAR 0 7
34046: ARRAY
34047: PUSH
34048: LD_INT 2
34050: ARRAY
34051: PPUSH
34052: CALL_OW 428
34056: PUSH
34057: LD_INT 0
34059: GREATER
34060: OR
34061: PUSH
34062: LD_VAR 0 12
34066: PUSH
34067: LD_VAR 0 7
34071: ARRAY
34072: PUSH
34073: LD_INT 1
34075: ARRAY
34076: PPUSH
34077: LD_VAR 0 12
34081: PUSH
34082: LD_VAR 0 7
34086: ARRAY
34087: PUSH
34088: LD_INT 2
34090: ARRAY
34091: PPUSH
34092: CALL_OW 351
34096: OR
34097: IFFALSE 34103
// exit ;
34099: POP
34100: POP
34101: GO 34410
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34103: LD_ADDR_VAR 0 8
34107: PUSH
34108: LD_VAR 0 12
34112: PUSH
34113: LD_VAR 0 7
34117: ARRAY
34118: PUSH
34119: LD_INT 1
34121: ARRAY
34122: PPUSH
34123: LD_VAR 0 12
34127: PUSH
34128: LD_VAR 0 7
34132: ARRAY
34133: PUSH
34134: LD_INT 2
34136: ARRAY
34137: PPUSH
34138: CALL_OW 546
34142: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34143: LD_VAR 0 8
34147: PUSH
34148: LD_INT 1
34150: ARRAY
34151: PUSH
34152: LD_VAR 0 8
34156: PUSH
34157: LD_INT 2
34159: ARRAY
34160: PUSH
34161: LD_VAR 0 13
34165: PUSH
34166: LD_INT 2
34168: PLUS
34169: GREATER
34170: OR
34171: PUSH
34172: LD_VAR 0 8
34176: PUSH
34177: LD_INT 2
34179: ARRAY
34180: PUSH
34181: LD_VAR 0 13
34185: PUSH
34186: LD_INT 2
34188: MINUS
34189: LESS
34190: OR
34191: PUSH
34192: LD_VAR 0 8
34196: PUSH
34197: LD_INT 3
34199: ARRAY
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 8
34206: PUSH
34207: LD_INT 9
34209: PUSH
34210: LD_INT 10
34212: PUSH
34213: LD_INT 11
34215: PUSH
34216: LD_INT 12
34218: PUSH
34219: LD_INT 13
34221: PUSH
34222: LD_INT 16
34224: PUSH
34225: LD_INT 17
34227: PUSH
34228: LD_INT 18
34230: PUSH
34231: LD_INT 19
34233: PUSH
34234: LD_INT 20
34236: PUSH
34237: LD_INT 21
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: IN
34255: NOT
34256: OR
34257: PUSH
34258: LD_VAR 0 8
34262: PUSH
34263: LD_INT 5
34265: ARRAY
34266: NOT
34267: OR
34268: PUSH
34269: LD_VAR 0 8
34273: PUSH
34274: LD_INT 6
34276: ARRAY
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: LD_INT 7
34286: PUSH
34287: LD_INT 9
34289: PUSH
34290: LD_INT 10
34292: PUSH
34293: LD_INT 11
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: IN
34304: NOT
34305: OR
34306: IFFALSE 34312
// exit ;
34308: POP
34309: POP
34310: GO 34410
// end ;
34312: GO 33983
34314: POP
34315: POP
// side := GetSide ( depot ) ;
34316: LD_ADDR_VAR 0 9
34320: PUSH
34321: LD_VAR 0 1
34325: PPUSH
34326: CALL_OW 255
34330: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34331: LD_VAR 0 9
34335: PPUSH
34336: LD_VAR 0 3
34340: PPUSH
34341: LD_VAR 0 4
34345: PPUSH
34346: LD_INT 20
34348: PPUSH
34349: CALL 27064 0 4
34353: PUSH
34354: LD_INT 4
34356: ARRAY
34357: IFFALSE 34361
// exit ;
34359: GO 34410
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34361: LD_VAR 0 2
34365: PUSH
34366: LD_INT 29
34368: PUSH
34369: LD_INT 30
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: IN
34376: PUSH
34377: LD_VAR 0 3
34381: PPUSH
34382: LD_VAR 0 4
34386: PPUSH
34387: LD_VAR 0 9
34391: PPUSH
34392: CALL_OW 440
34396: NOT
34397: AND
34398: IFFALSE 34402
// exit ;
34400: GO 34410
// result := true ;
34402: LD_ADDR_VAR 0 6
34406: PUSH
34407: LD_INT 1
34409: ST_TO_ADDR
// end ;
34410: LD_VAR 0 6
34414: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34415: LD_INT 0
34417: PPUSH
34418: PPUSH
34419: PPUSH
34420: PPUSH
34421: PPUSH
34422: PPUSH
34423: PPUSH
34424: PPUSH
34425: PPUSH
34426: PPUSH
34427: PPUSH
34428: PPUSH
34429: PPUSH
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
34434: PPUSH
34435: PPUSH
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
34443: PPUSH
34444: PPUSH
34445: PPUSH
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
34453: PPUSH
34454: PPUSH
34455: PPUSH
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
34467: PPUSH
34468: PPUSH
34469: PPUSH
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
// result = [ ] ;
34475: LD_ADDR_VAR 0 7
34479: PUSH
34480: EMPTY
34481: ST_TO_ADDR
// temp_list = [ ] ;
34482: LD_ADDR_VAR 0 9
34486: PUSH
34487: EMPTY
34488: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34489: LD_VAR 0 4
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: LD_INT 2
34502: PUSH
34503: LD_INT 3
34505: PUSH
34506: LD_INT 4
34508: PUSH
34509: LD_INT 5
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: IN
34520: NOT
34521: PUSH
34522: LD_VAR 0 1
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: IN
34537: PUSH
34538: LD_VAR 0 5
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: LD_INT 2
34548: PUSH
34549: LD_INT 3
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: IN
34557: NOT
34558: AND
34559: OR
34560: IFFALSE 34564
// exit ;
34562: GO 52955
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34564: LD_VAR 0 1
34568: PUSH
34569: LD_INT 6
34571: PUSH
34572: LD_INT 7
34574: PUSH
34575: LD_INT 8
34577: PUSH
34578: LD_INT 13
34580: PUSH
34581: LD_INT 12
34583: PUSH
34584: LD_INT 15
34586: PUSH
34587: LD_INT 11
34589: PUSH
34590: LD_INT 14
34592: PUSH
34593: LD_INT 10
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: IN
34607: IFFALSE 34617
// btype = b_lab ;
34609: LD_ADDR_VAR 0 1
34613: PUSH
34614: LD_INT 6
34616: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34617: LD_VAR 0 6
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: LIST
34635: IN
34636: NOT
34637: PUSH
34638: LD_VAR 0 1
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 3
34654: PUSH
34655: LD_INT 6
34657: PUSH
34658: LD_INT 36
34660: PUSH
34661: LD_INT 4
34663: PUSH
34664: LD_INT 5
34666: PUSH
34667: LD_INT 31
34669: PUSH
34670: LD_INT 32
34672: PUSH
34673: LD_INT 33
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: IN
34689: NOT
34690: PUSH
34691: LD_VAR 0 6
34695: PUSH
34696: LD_INT 1
34698: EQUAL
34699: AND
34700: OR
34701: PUSH
34702: LD_VAR 0 1
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: IN
34717: NOT
34718: PUSH
34719: LD_VAR 0 6
34723: PUSH
34724: LD_INT 2
34726: EQUAL
34727: AND
34728: OR
34729: IFFALSE 34739
// mode = 0 ;
34731: LD_ADDR_VAR 0 6
34735: PUSH
34736: LD_INT 0
34738: ST_TO_ADDR
// case mode of 0 :
34739: LD_VAR 0 6
34743: PUSH
34744: LD_INT 0
34746: DOUBLE
34747: EQUAL
34748: IFTRUE 34752
34750: GO 46205
34752: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34753: LD_ADDR_VAR 0 11
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: LD_INT 2
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 2
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 0
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: LD_INT 2
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34946: LD_ADDR_VAR 0 12
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 2
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: NEG
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 2
35092: NEG
35093: PUSH
35094: LD_INT 1
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 3
35103: NEG
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 3
35114: NEG
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35142: LD_ADDR_VAR 0 13
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 2
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: LD_INT 2
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: LD_INT 2
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: NEG
35290: PUSH
35291: LD_INT 3
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 3
35301: NEG
35302: PUSH
35303: LD_INT 2
35305: NEG
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 3
35313: NEG
35314: PUSH
35315: LD_INT 3
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35341: LD_ADDR_VAR 0 14
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 1
35410: NEG
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: LD_INT 2
35426: NEG
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 2
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 1
35476: NEG
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: LD_INT 3
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: LD_INT 3
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: LD_INT 2
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35537: LD_ADDR_VAR 0 15
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: LD_INT 1
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: NEG
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 2
35660: NEG
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 2
35671: NEG
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 3
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 3
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35730: LD_ADDR_VAR 0 16
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: LD_INT 2
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: LD_INT 2
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: LD_INT 2
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: LD_INT 1
35857: NEG
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: NEG
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 3
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 3
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: LD_INT 3
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35923: LD_ADDR_VAR 0 17
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: LD_INT 1
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: LD_INT 2
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 2
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 2
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: LD_INT 2
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: NEG
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 2
36110: NEG
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 2
36122: NEG
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36153: LD_ADDR_VAR 0 18
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: LD_INT 1
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: LD_INT 2
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: NEG
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: NEG
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 2
36352: NEG
36353: PUSH
36354: LD_INT 2
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36383: LD_ADDR_VAR 0 19
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: LD_INT 1
36456: NEG
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: LD_INT 2
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: LD_INT 2
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: NEG
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: NEG
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36613: LD_ADDR_VAR 0 20
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 2
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 2
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 2
36789: NEG
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 2
36812: NEG
36813: PUSH
36814: LD_INT 2
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36843: LD_ADDR_VAR 0 21
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: LD_INT 2
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 2
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 2
36978: PUSH
36979: LD_INT 2
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: LD_INT 2
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 2
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: NEG
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 2
37030: NEG
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: LD_INT 2
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37073: LD_ADDR_VAR 0 22
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: LD_INT 2
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 2
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: NEG
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: NEG
37273: PUSH
37274: LD_INT 2
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37303: LD_ADDR_VAR 0 23
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: NEG
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: LD_INT 1
37376: NEG
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: LD_INT 2
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: LD_INT 1
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 2
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: LD_INT 2
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: NEG
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 2
37490: NEG
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: NEG
37503: PUSH
37504: LD_INT 2
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 2
37514: NEG
37515: PUSH
37516: LD_INT 3
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: LD_INT 3
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: LD_INT 2
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37583: LD_ADDR_VAR 0 24
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: LD_INT 1
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: LD_INT 0
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 1
37652: NEG
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: LD_INT 2
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 2
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 2
37759: NEG
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 2
37782: NEG
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: LD_INT 2
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 3
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 3
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37859: LD_ADDR_VAR 0 25
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: LD_INT 1
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: LD_INT 2
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 2
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 2
38046: NEG
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: LD_INT 2
38062: NEG
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 3
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 3
38080: PUSH
38081: LD_INT 2
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: LD_INT 3
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: LD_INT 3
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38133: LD_ADDR_VAR 0 26
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: LD_INT 2
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: LD_INT 2
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 2
38320: NEG
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 2
38332: NEG
38333: PUSH
38334: LD_INT 2
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: LD_INT 3
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: LD_INT 3
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38409: LD_ADDR_VAR 0 27
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 2
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 2
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 2
38608: NEG
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 3
38654: NEG
38655: PUSH
38656: LD_INT 2
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38689: LD_ADDR_VAR 0 28
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: LD_INT 2
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 2
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 2
38888: NEG
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 2
38900: NEG
38901: PUSH
38902: LD_INT 3
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 3
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 3
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 3
38936: NEG
38937: PUSH
38938: LD_INT 2
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38971: LD_ADDR_VAR 0 29
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: LD_INT 2
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 2
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 2
39137: NEG
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: LD_INT 3
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 3
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: LD_INT 3
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 3
39215: NEG
39216: PUSH
39217: LD_INT 2
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39250: LD_ADDR_VAR 0 30
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 3
39462: PUSH
39463: LD_INT 2
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: LD_INT 3
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: NEG
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 3
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39528: LD_ADDR_VAR 0 31
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: LD_INT 2
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: LD_INT 2
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 2
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 2
39705: NEG
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: NEG
39718: PUSH
39719: LD_INT 3
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 3
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 3
39771: NEG
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39806: LD_ADDR_VAR 0 32
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 2
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 2
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 2
39983: NEG
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: LD_INT 3
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 3
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 3
40049: NEG
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40084: LD_ADDR_VAR 0 33
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: LD_INT 3
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 3
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 3
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 3
40328: NEG
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40363: LD_ADDR_VAR 0 34
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 2
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: LD_INT 3
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 2
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 3
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 3
40608: NEG
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40643: LD_ADDR_VAR 0 35
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40755: LD_ADDR_VAR 0 36
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40867: LD_ADDR_VAR 0 37
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40979: LD_ADDR_VAR 0 38
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41091: LD_ADDR_VAR 0 39
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 2
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: LD_INT 2
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41203: LD_ADDR_VAR 0 40
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41315: LD_ADDR_VAR 0 41
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: NEG
41506: PUSH
41507: LD_INT 3
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 3
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 3
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 3
41558: PUSH
41559: LD_INT 3
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 3
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 3
41589: NEG
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 3
41600: NEG
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 3
41612: NEG
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 3
41624: NEG
41625: PUSH
41626: LD_INT 3
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41665: LD_ADDR_VAR 0 42
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 3
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 3
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 3
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 3
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 3
41911: PUSH
41912: LD_INT 3
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: LD_INT 3
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: LD_INT 3
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 3
41962: NEG
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 3
41974: NEG
41975: PUSH
41976: LD_INT 3
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42015: LD_ADDR_VAR 0 43
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: NEG
42205: PUSH
42206: LD_INT 3
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 3
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 3
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 3
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: LD_INT 3
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 3
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 3
42311: NEG
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 3
42322: NEG
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42363: LD_ADDR_VAR 0 44
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 2
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 2
42541: NEG
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: LD_INT 3
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 3
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 3
42606: PUSH
42607: LD_INT 3
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 2
42626: NEG
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: NEG
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 3
42648: NEG
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 3
42660: NEG
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 3
42672: NEG
42673: PUSH
42674: LD_INT 3
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42713: LD_ADDR_VAR 0 45
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 2
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 2
42879: NEG
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: LD_INT 3
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 3
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 3
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 3
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 3
42959: PUSH
42960: LD_INT 3
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 3
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 3
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 3
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 3
43010: NEG
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 3
43022: NEG
43023: PUSH
43024: LD_INT 3
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43063: LD_ADDR_VAR 0 46
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 2
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 3
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 3
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 3
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 3
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 3
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 3
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 3
43359: NEG
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 3
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43411: LD_ADDR_VAR 0 47
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: NEG
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: LD_INT 2
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43562: LD_ADDR_VAR 0 48
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43709: LD_ADDR_VAR 0 49
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43853: LD_ADDR_VAR 0 50
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 2
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43997: LD_ADDR_VAR 0 51
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44144: LD_ADDR_VAR 0 52
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44295: LD_ADDR_VAR 0 53
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44525: LD_ADDR_VAR 0 54
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44755: LD_ADDR_VAR 0 55
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44985: LD_ADDR_VAR 0 56
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45215: LD_ADDR_VAR 0 57
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45445: LD_ADDR_VAR 0 58
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 2
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: NEG
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45675: LD_ADDR_VAR 0 59
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45763: LD_ADDR_VAR 0 60
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45851: LD_ADDR_VAR 0 61
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45939: LD_ADDR_VAR 0 62
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46027: LD_ADDR_VAR 0 63
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46115: LD_ADDR_VAR 0 64
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: ST_TO_ADDR
// end ; 1 :
46203: GO 52100
46205: LD_INT 1
46207: DOUBLE
46208: EQUAL
46209: IFTRUE 46213
46211: GO 48836
46213: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46214: LD_ADDR_VAR 0 11
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 3
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 3
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46258: LD_ADDR_VAR 0 12
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 3
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: LIST
46298: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46299: LD_ADDR_VAR 0 13
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: LD_INT 3
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46339: LD_ADDR_VAR 0 14
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: LD_INT 3
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 3
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46380: LD_ADDR_VAR 0 15
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 3
46398: NEG
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 3
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46424: LD_ADDR_VAR 0 16
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: LD_INT 3
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 3
46443: NEG
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 3
46455: NEG
46456: PUSH
46457: LD_INT 3
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46470: LD_ADDR_VAR 0 17
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: LD_INT 3
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 3
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46514: LD_ADDR_VAR 0 18
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 3
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 3
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: LIST
46554: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46555: LD_ADDR_VAR 0 19
46559: PUSH
46560: LD_INT 3
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 3
46572: PUSH
46573: LD_INT 3
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 3
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46595: LD_ADDR_VAR 0 20
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 3
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 3
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: LIST
46635: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46636: LD_ADDR_VAR 0 21
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 3
46654: NEG
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 3
46665: NEG
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46680: LD_ADDR_VAR 0 22
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: LD_INT 3
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: LD_INT 3
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46726: LD_ADDR_VAR 0 23
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 3
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 4
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46770: LD_ADDR_VAR 0 24
46774: PUSH
46775: LD_INT 3
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 3
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 4
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: LIST
46810: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46811: LD_ADDR_VAR 0 25
46815: PUSH
46816: LD_INT 3
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 4
46828: PUSH
46829: LD_INT 3
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: LD_INT 4
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46851: LD_ADDR_VAR 0 26
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 3
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 4
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46892: LD_ADDR_VAR 0 27
46896: PUSH
46897: LD_INT 3
46899: NEG
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 3
46910: NEG
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 4
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: LIST
46935: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46936: LD_ADDR_VAR 0 28
46940: PUSH
46941: LD_INT 3
46943: NEG
46944: PUSH
46945: LD_INT 3
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 3
46955: NEG
46956: PUSH
46957: LD_INT 4
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 4
46967: NEG
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: LIST
46981: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46982: LD_ADDR_VAR 0 29
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 3
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 3
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 4
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 4
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 3
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 5
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 5
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 4
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 6
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 6
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 5
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47137: LD_ADDR_VAR 0 30
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 3
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 4
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 4
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 4
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 5
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 5
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 5
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 6
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 6
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47280: LD_ADDR_VAR 0 31
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: LD_INT 3
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 3
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 4
47317: PUSH
47318: LD_INT 3
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 4
47327: PUSH
47328: LD_INT 4
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 3
47337: PUSH
47338: LD_INT 4
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 5
47347: PUSH
47348: LD_INT 4
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 5
47357: PUSH
47358: LD_INT 5
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 4
47367: PUSH
47368: LD_INT 5
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 6
47377: PUSH
47378: LD_INT 5
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 6
47387: PUSH
47388: LD_INT 6
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 5
47397: PUSH
47398: LD_INT 6
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47419: LD_ADDR_VAR 0 32
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 3
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 4
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 4
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 5
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 5
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: LD_INT 4
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 6
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 6
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 5
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47562: LD_ADDR_VAR 0 33
47566: PUSH
47567: LD_INT 2
47569: NEG
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: NEG
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 3
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 4
47614: NEG
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 4
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 4
47637: NEG
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 5
47648: NEG
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 5
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 5
47671: NEG
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 6
47682: NEG
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 6
47693: NEG
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47717: LD_ADDR_VAR 0 34
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: LD_INT 3
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 3
47736: NEG
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: NEG
47749: PUSH
47750: LD_INT 3
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: LD_INT 4
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 4
47772: NEG
47773: PUSH
47774: LD_INT 3
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 4
47784: NEG
47785: PUSH
47786: LD_INT 4
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 4
47796: NEG
47797: PUSH
47798: LD_INT 5
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 5
47808: NEG
47809: PUSH
47810: LD_INT 4
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 5
47820: NEG
47821: PUSH
47822: LD_INT 5
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 5
47832: NEG
47833: PUSH
47834: LD_INT 6
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 6
47844: NEG
47845: PUSH
47846: LD_INT 5
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 6
47856: NEG
47857: PUSH
47858: LD_INT 6
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47880: LD_ADDR_VAR 0 41
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 3
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47924: LD_ADDR_VAR 0 42
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 3
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: LIST
47964: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47965: LD_ADDR_VAR 0 43
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 3
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 3
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48005: LD_ADDR_VAR 0 44
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48046: LD_ADDR_VAR 0 45
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48090: LD_ADDR_VAR 0 46
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: LD_INT 3
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: NEG
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: LIST
48135: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48136: LD_ADDR_VAR 0 47
48140: PUSH
48141: LD_INT 2
48143: NEG
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 3
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48169: LD_ADDR_VAR 0 48
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48200: LD_ADDR_VAR 0 49
48204: PUSH
48205: LD_INT 3
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 3
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48229: LD_ADDR_VAR 0 50
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48258: LD_ADDR_VAR 0 51
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: LD_INT 2
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48289: LD_ADDR_VAR 0 52
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48322: LD_ADDR_VAR 0 53
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 3
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48366: LD_ADDR_VAR 0 54
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 3
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 3
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48407: LD_ADDR_VAR 0 55
48411: PUSH
48412: LD_INT 3
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 3
48424: PUSH
48425: LD_INT 3
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: LIST
48446: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48447: LD_ADDR_VAR 0 56
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48488: LD_ADDR_VAR 0 57
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 3
48506: NEG
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 3
48517: NEG
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48532: LD_ADDR_VAR 0 58
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: LD_INT 3
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 3
48563: NEG
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48578: LD_ADDR_VAR 0 59
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 2
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48622: LD_ADDR_VAR 0 60
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48663: LD_ADDR_VAR 0 61
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48703: LD_ADDR_VAR 0 62
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48744: LD_ADDR_VAR 0 63
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: LIST
48787: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48788: LD_ADDR_VAR 0 64
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: NEG
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: ST_TO_ADDR
// end ; 2 :
48834: GO 52100
48836: LD_INT 2
48838: DOUBLE
48839: EQUAL
48840: IFTRUE 48844
48842: GO 52099
48844: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48845: LD_ADDR_VAR 0 29
48849: PUSH
48850: LD_INT 4
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 4
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 5
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 5
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 4
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 3
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 5
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 3
48945: PUSH
48946: LD_INT 3
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 3
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 4
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 4
48975: PUSH
48976: LD_INT 4
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 3
48985: PUSH
48986: LD_INT 4
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 4
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 4
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 4
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 3
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: LD_INT 4
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: LD_INT 5
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 5
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 4
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: LD_INT 5
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 3
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 3
49173: NEG
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 4
49184: NEG
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 4
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 4
49207: NEG
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 4
49230: NEG
49231: PUSH
49232: LD_INT 4
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 4
49242: NEG
49243: PUSH
49244: LD_INT 5
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 3
49254: NEG
49255: PUSH
49256: LD_INT 4
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: NEG
49267: PUSH
49268: LD_INT 3
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 4
49278: NEG
49279: PUSH
49280: LD_INT 3
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 5
49290: NEG
49291: PUSH
49292: LD_INT 4
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 5
49302: NEG
49303: PUSH
49304: LD_INT 5
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 3
49314: NEG
49315: PUSH
49316: LD_INT 5
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 5
49326: NEG
49327: PUSH
49328: LD_INT 3
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49383: LD_ADDR_VAR 0 30
49387: PUSH
49388: LD_INT 4
49390: PUSH
49391: LD_INT 4
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 4
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 5
49410: PUSH
49411: LD_INT 4
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 5
49420: PUSH
49421: LD_INT 5
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 4
49430: PUSH
49431: LD_INT 5
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 3
49440: PUSH
49441: LD_INT 4
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: LD_INT 3
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 5
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: LD_INT 5
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 4
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 4
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: LD_INT 4
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 4
49573: NEG
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 4
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 3
49596: NEG
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 3
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 4
49618: NEG
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 5
49629: NEG
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 5
49640: NEG
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 5
49652: NEG
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: NEG
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: NEG
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 4
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: LD_INT 3
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: NEG
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 4
49735: NEG
49736: PUSH
49737: LD_INT 3
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 4
49747: NEG
49748: PUSH
49749: LD_INT 4
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: LD_INT 4
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 4
49771: NEG
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 4
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 5
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 4
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: LD_INT 3
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 4
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: LD_INT 5
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: LD_INT 5
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49930: LD_ADDR_VAR 0 31
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 4
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 4
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 5
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 5
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 4
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 5
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: LD_INT 3
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 3
50041: NEG
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 4
50086: NEG
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 4
50097: NEG
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 4
50109: NEG
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 4
50132: NEG
50133: PUSH
50134: LD_INT 4
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 4
50144: NEG
50145: PUSH
50146: LD_INT 5
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: LD_INT 4
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: LD_INT 3
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 4
50180: NEG
50181: PUSH
50182: LD_INT 3
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 5
50192: NEG
50193: PUSH
50194: LD_INT 4
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 5
50204: NEG
50205: PUSH
50206: LD_INT 5
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 3
50216: NEG
50217: PUSH
50218: LD_INT 5
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 5
50228: NEG
50229: PUSH
50230: LD_INT 3
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 3
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 4
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 3
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 4
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: LD_INT 4
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 4
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 4
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 5
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 5
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 4
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 5
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50480: LD_ADDR_VAR 0 32
50484: PUSH
50485: LD_INT 4
50487: NEG
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 4
50498: NEG
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 3
50510: NEG
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 3
50521: NEG
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 4
50532: NEG
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 5
50543: NEG
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 5
50554: NEG
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 5
50566: NEG
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 3
50578: NEG
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: LD_INT 3
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 3
50601: NEG
50602: PUSH
50603: LD_INT 4
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 4
50649: NEG
50650: PUSH
50651: LD_INT 3
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 4
50661: NEG
50662: PUSH
50663: LD_INT 4
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 4
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 4
50685: NEG
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 4
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 5
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 4
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 3
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 3
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 4
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 5
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: LD_INT 5
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 3
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 4
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 4
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 3
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 4
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 4
50892: PUSH
50893: LD_INT 4
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 4
50902: PUSH
50903: LD_INT 3
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 5
50912: PUSH
50913: LD_INT 4
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 5
50922: PUSH
50923: LD_INT 5
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 4
50932: PUSH
50933: LD_INT 5
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: LD_INT 4
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: PUSH
50953: LD_INT 3
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 5
50962: PUSH
50963: LD_INT 3
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: LD_INT 5
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51027: LD_ADDR_VAR 0 33
51031: PUSH
51032: LD_INT 4
51034: NEG
51035: PUSH
51036: LD_INT 4
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 4
51046: NEG
51047: PUSH
51048: LD_INT 5
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: NEG
51059: PUSH
51060: LD_INT 4
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: LD_INT 3
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 4
51082: NEG
51083: PUSH
51084: LD_INT 3
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 5
51094: NEG
51095: PUSH
51096: LD_INT 4
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 5
51106: NEG
51107: PUSH
51108: LD_INT 5
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: LD_INT 5
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 5
51130: NEG
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 4
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 3
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 3
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 4
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: LD_INT 4
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 4
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 4
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 5
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 5
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 4
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 3
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 5
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 4
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 4
51367: PUSH
51368: LD_INT 4
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 3
51377: PUSH
51378: LD_INT 4
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 4
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: LD_INT 4
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 4
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 4
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 5
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 5
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 4
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 3
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: LD_INT 5
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: LD_INT 3
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51565: LD_ADDR_VAR 0 34
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 4
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 5
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 4
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 3
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 3
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 4
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: LD_INT 5
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 3
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: LD_INT 5
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 3
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 4
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 4
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 4
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 4
51767: PUSH
51768: LD_INT 4
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 4
51777: PUSH
51778: LD_INT 3
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 5
51787: PUSH
51788: LD_INT 4
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 5
51797: PUSH
51798: LD_INT 5
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 4
51807: PUSH
51808: LD_INT 5
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 3
51817: PUSH
51818: LD_INT 4
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 5
51837: PUSH
51838: LD_INT 3
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 3
51847: PUSH
51848: LD_INT 5
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 3
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 4
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 4
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 3
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 4
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 4
51950: NEG
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 4
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 3
51973: NEG
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: NEG
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 4
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 5
52006: NEG
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 5
52017: NEG
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 5
52029: NEG
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 3
52041: NEG
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: ST_TO_ADDR
// end ; end ;
52097: GO 52100
52099: POP
// case btype of b_depot , b_warehouse :
52100: LD_VAR 0 1
52104: PUSH
52105: LD_INT 0
52107: DOUBLE
52108: EQUAL
52109: IFTRUE 52119
52111: LD_INT 1
52113: DOUBLE
52114: EQUAL
52115: IFTRUE 52119
52117: GO 52320
52119: POP
// case nation of nation_american :
52120: LD_VAR 0 5
52124: PUSH
52125: LD_INT 1
52127: DOUBLE
52128: EQUAL
52129: IFTRUE 52133
52131: GO 52189
52133: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52134: LD_ADDR_VAR 0 9
52138: PUSH
52139: LD_VAR 0 11
52143: PUSH
52144: LD_VAR 0 12
52148: PUSH
52149: LD_VAR 0 13
52153: PUSH
52154: LD_VAR 0 14
52158: PUSH
52159: LD_VAR 0 15
52163: PUSH
52164: LD_VAR 0 16
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: PUSH
52177: LD_VAR 0 4
52181: PUSH
52182: LD_INT 1
52184: PLUS
52185: ARRAY
52186: ST_TO_ADDR
52187: GO 52318
52189: LD_INT 2
52191: DOUBLE
52192: EQUAL
52193: IFTRUE 52197
52195: GO 52253
52197: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52198: LD_ADDR_VAR 0 9
52202: PUSH
52203: LD_VAR 0 17
52207: PUSH
52208: LD_VAR 0 18
52212: PUSH
52213: LD_VAR 0 19
52217: PUSH
52218: LD_VAR 0 20
52222: PUSH
52223: LD_VAR 0 21
52227: PUSH
52228: LD_VAR 0 22
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: PUSH
52241: LD_VAR 0 4
52245: PUSH
52246: LD_INT 1
52248: PLUS
52249: ARRAY
52250: ST_TO_ADDR
52251: GO 52318
52253: LD_INT 3
52255: DOUBLE
52256: EQUAL
52257: IFTRUE 52261
52259: GO 52317
52261: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52262: LD_ADDR_VAR 0 9
52266: PUSH
52267: LD_VAR 0 23
52271: PUSH
52272: LD_VAR 0 24
52276: PUSH
52277: LD_VAR 0 25
52281: PUSH
52282: LD_VAR 0 26
52286: PUSH
52287: LD_VAR 0 27
52291: PUSH
52292: LD_VAR 0 28
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: PUSH
52305: LD_VAR 0 4
52309: PUSH
52310: LD_INT 1
52312: PLUS
52313: ARRAY
52314: ST_TO_ADDR
52315: GO 52318
52317: POP
52318: GO 52873
52320: LD_INT 2
52322: DOUBLE
52323: EQUAL
52324: IFTRUE 52334
52326: LD_INT 3
52328: DOUBLE
52329: EQUAL
52330: IFTRUE 52334
52332: GO 52390
52334: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52335: LD_ADDR_VAR 0 9
52339: PUSH
52340: LD_VAR 0 29
52344: PUSH
52345: LD_VAR 0 30
52349: PUSH
52350: LD_VAR 0 31
52354: PUSH
52355: LD_VAR 0 32
52359: PUSH
52360: LD_VAR 0 33
52364: PUSH
52365: LD_VAR 0 34
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: PUSH
52378: LD_VAR 0 4
52382: PUSH
52383: LD_INT 1
52385: PLUS
52386: ARRAY
52387: ST_TO_ADDR
52388: GO 52873
52390: LD_INT 16
52392: DOUBLE
52393: EQUAL
52394: IFTRUE 52452
52396: LD_INT 17
52398: DOUBLE
52399: EQUAL
52400: IFTRUE 52452
52402: LD_INT 18
52404: DOUBLE
52405: EQUAL
52406: IFTRUE 52452
52408: LD_INT 19
52410: DOUBLE
52411: EQUAL
52412: IFTRUE 52452
52414: LD_INT 22
52416: DOUBLE
52417: EQUAL
52418: IFTRUE 52452
52420: LD_INT 20
52422: DOUBLE
52423: EQUAL
52424: IFTRUE 52452
52426: LD_INT 21
52428: DOUBLE
52429: EQUAL
52430: IFTRUE 52452
52432: LD_INT 23
52434: DOUBLE
52435: EQUAL
52436: IFTRUE 52452
52438: LD_INT 24
52440: DOUBLE
52441: EQUAL
52442: IFTRUE 52452
52444: LD_INT 25
52446: DOUBLE
52447: EQUAL
52448: IFTRUE 52452
52450: GO 52508
52452: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52453: LD_ADDR_VAR 0 9
52457: PUSH
52458: LD_VAR 0 35
52462: PUSH
52463: LD_VAR 0 36
52467: PUSH
52468: LD_VAR 0 37
52472: PUSH
52473: LD_VAR 0 38
52477: PUSH
52478: LD_VAR 0 39
52482: PUSH
52483: LD_VAR 0 40
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: PUSH
52496: LD_VAR 0 4
52500: PUSH
52501: LD_INT 1
52503: PLUS
52504: ARRAY
52505: ST_TO_ADDR
52506: GO 52873
52508: LD_INT 6
52510: DOUBLE
52511: EQUAL
52512: IFTRUE 52564
52514: LD_INT 7
52516: DOUBLE
52517: EQUAL
52518: IFTRUE 52564
52520: LD_INT 8
52522: DOUBLE
52523: EQUAL
52524: IFTRUE 52564
52526: LD_INT 13
52528: DOUBLE
52529: EQUAL
52530: IFTRUE 52564
52532: LD_INT 12
52534: DOUBLE
52535: EQUAL
52536: IFTRUE 52564
52538: LD_INT 15
52540: DOUBLE
52541: EQUAL
52542: IFTRUE 52564
52544: LD_INT 11
52546: DOUBLE
52547: EQUAL
52548: IFTRUE 52564
52550: LD_INT 14
52552: DOUBLE
52553: EQUAL
52554: IFTRUE 52564
52556: LD_INT 10
52558: DOUBLE
52559: EQUAL
52560: IFTRUE 52564
52562: GO 52620
52564: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52565: LD_ADDR_VAR 0 9
52569: PUSH
52570: LD_VAR 0 41
52574: PUSH
52575: LD_VAR 0 42
52579: PUSH
52580: LD_VAR 0 43
52584: PUSH
52585: LD_VAR 0 44
52589: PUSH
52590: LD_VAR 0 45
52594: PUSH
52595: LD_VAR 0 46
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: PUSH
52608: LD_VAR 0 4
52612: PUSH
52613: LD_INT 1
52615: PLUS
52616: ARRAY
52617: ST_TO_ADDR
52618: GO 52873
52620: LD_INT 36
52622: DOUBLE
52623: EQUAL
52624: IFTRUE 52628
52626: GO 52684
52628: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52629: LD_ADDR_VAR 0 9
52633: PUSH
52634: LD_VAR 0 47
52638: PUSH
52639: LD_VAR 0 48
52643: PUSH
52644: LD_VAR 0 49
52648: PUSH
52649: LD_VAR 0 50
52653: PUSH
52654: LD_VAR 0 51
52658: PUSH
52659: LD_VAR 0 52
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: PUSH
52672: LD_VAR 0 4
52676: PUSH
52677: LD_INT 1
52679: PLUS
52680: ARRAY
52681: ST_TO_ADDR
52682: GO 52873
52684: LD_INT 4
52686: DOUBLE
52687: EQUAL
52688: IFTRUE 52710
52690: LD_INT 5
52692: DOUBLE
52693: EQUAL
52694: IFTRUE 52710
52696: LD_INT 34
52698: DOUBLE
52699: EQUAL
52700: IFTRUE 52710
52702: LD_INT 37
52704: DOUBLE
52705: EQUAL
52706: IFTRUE 52710
52708: GO 52766
52710: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52711: LD_ADDR_VAR 0 9
52715: PUSH
52716: LD_VAR 0 53
52720: PUSH
52721: LD_VAR 0 54
52725: PUSH
52726: LD_VAR 0 55
52730: PUSH
52731: LD_VAR 0 56
52735: PUSH
52736: LD_VAR 0 57
52740: PUSH
52741: LD_VAR 0 58
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: PUSH
52754: LD_VAR 0 4
52758: PUSH
52759: LD_INT 1
52761: PLUS
52762: ARRAY
52763: ST_TO_ADDR
52764: GO 52873
52766: LD_INT 31
52768: DOUBLE
52769: EQUAL
52770: IFTRUE 52816
52772: LD_INT 32
52774: DOUBLE
52775: EQUAL
52776: IFTRUE 52816
52778: LD_INT 33
52780: DOUBLE
52781: EQUAL
52782: IFTRUE 52816
52784: LD_INT 27
52786: DOUBLE
52787: EQUAL
52788: IFTRUE 52816
52790: LD_INT 26
52792: DOUBLE
52793: EQUAL
52794: IFTRUE 52816
52796: LD_INT 28
52798: DOUBLE
52799: EQUAL
52800: IFTRUE 52816
52802: LD_INT 29
52804: DOUBLE
52805: EQUAL
52806: IFTRUE 52816
52808: LD_INT 30
52810: DOUBLE
52811: EQUAL
52812: IFTRUE 52816
52814: GO 52872
52816: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52817: LD_ADDR_VAR 0 9
52821: PUSH
52822: LD_VAR 0 59
52826: PUSH
52827: LD_VAR 0 60
52831: PUSH
52832: LD_VAR 0 61
52836: PUSH
52837: LD_VAR 0 62
52841: PUSH
52842: LD_VAR 0 63
52846: PUSH
52847: LD_VAR 0 64
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: PUSH
52860: LD_VAR 0 4
52864: PUSH
52865: LD_INT 1
52867: PLUS
52868: ARRAY
52869: ST_TO_ADDR
52870: GO 52873
52872: POP
// temp_list2 = [ ] ;
52873: LD_ADDR_VAR 0 10
52877: PUSH
52878: EMPTY
52879: ST_TO_ADDR
// for i in temp_list do
52880: LD_ADDR_VAR 0 8
52884: PUSH
52885: LD_VAR 0 9
52889: PUSH
52890: FOR_IN
52891: IFFALSE 52943
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52893: LD_ADDR_VAR 0 10
52897: PUSH
52898: LD_VAR 0 10
52902: PUSH
52903: LD_VAR 0 8
52907: PUSH
52908: LD_INT 1
52910: ARRAY
52911: PUSH
52912: LD_VAR 0 2
52916: PLUS
52917: PUSH
52918: LD_VAR 0 8
52922: PUSH
52923: LD_INT 2
52925: ARRAY
52926: PUSH
52927: LD_VAR 0 3
52931: PLUS
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: EMPTY
52938: LIST
52939: ADD
52940: ST_TO_ADDR
52941: GO 52890
52943: POP
52944: POP
// result = temp_list2 ;
52945: LD_ADDR_VAR 0 7
52949: PUSH
52950: LD_VAR 0 10
52954: ST_TO_ADDR
// end ;
52955: LD_VAR 0 7
52959: RET
// export function EnemyInRange ( unit , dist ) ; begin
52960: LD_INT 0
52962: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52963: LD_ADDR_VAR 0 3
52967: PUSH
52968: LD_VAR 0 1
52972: PPUSH
52973: CALL_OW 255
52977: PPUSH
52978: LD_VAR 0 1
52982: PPUSH
52983: CALL_OW 250
52987: PPUSH
52988: LD_VAR 0 1
52992: PPUSH
52993: CALL_OW 251
52997: PPUSH
52998: LD_VAR 0 2
53002: PPUSH
53003: CALL 27064 0 4
53007: PUSH
53008: LD_INT 4
53010: ARRAY
53011: ST_TO_ADDR
// end ;
53012: LD_VAR 0 3
53016: RET
// export function PlayerSeeMe ( unit ) ; begin
53017: LD_INT 0
53019: PPUSH
// result := See ( your_side , unit ) ;
53020: LD_ADDR_VAR 0 2
53024: PUSH
53025: LD_OWVAR 2
53029: PPUSH
53030: LD_VAR 0 1
53034: PPUSH
53035: CALL_OW 292
53039: ST_TO_ADDR
// end ;
53040: LD_VAR 0 2
53044: RET
// export function ReverseDir ( unit ) ; begin
53045: LD_INT 0
53047: PPUSH
// if not unit then
53048: LD_VAR 0 1
53052: NOT
53053: IFFALSE 53057
// exit ;
53055: GO 53080
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53057: LD_ADDR_VAR 0 2
53061: PUSH
53062: LD_VAR 0 1
53066: PPUSH
53067: CALL_OW 254
53071: PUSH
53072: LD_INT 3
53074: PLUS
53075: PUSH
53076: LD_INT 6
53078: MOD
53079: ST_TO_ADDR
// end ;
53080: LD_VAR 0 2
53084: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53085: LD_INT 0
53087: PPUSH
53088: PPUSH
53089: PPUSH
53090: PPUSH
53091: PPUSH
// if not hexes then
53092: LD_VAR 0 2
53096: NOT
53097: IFFALSE 53101
// exit ;
53099: GO 53249
// dist := 9999 ;
53101: LD_ADDR_VAR 0 5
53105: PUSH
53106: LD_INT 9999
53108: ST_TO_ADDR
// for i = 1 to hexes do
53109: LD_ADDR_VAR 0 4
53113: PUSH
53114: DOUBLE
53115: LD_INT 1
53117: DEC
53118: ST_TO_ADDR
53119: LD_VAR 0 2
53123: PUSH
53124: FOR_TO
53125: IFFALSE 53237
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53127: LD_VAR 0 1
53131: PPUSH
53132: LD_VAR 0 2
53136: PUSH
53137: LD_VAR 0 4
53141: ARRAY
53142: PUSH
53143: LD_INT 1
53145: ARRAY
53146: PPUSH
53147: LD_VAR 0 2
53151: PUSH
53152: LD_VAR 0 4
53156: ARRAY
53157: PUSH
53158: LD_INT 2
53160: ARRAY
53161: PPUSH
53162: CALL_OW 297
53166: PUSH
53167: LD_VAR 0 5
53171: LESS
53172: IFFALSE 53235
// begin hex := hexes [ i ] ;
53174: LD_ADDR_VAR 0 7
53178: PUSH
53179: LD_VAR 0 2
53183: PUSH
53184: LD_VAR 0 4
53188: ARRAY
53189: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53190: LD_ADDR_VAR 0 5
53194: PUSH
53195: LD_VAR 0 1
53199: PPUSH
53200: LD_VAR 0 2
53204: PUSH
53205: LD_VAR 0 4
53209: ARRAY
53210: PUSH
53211: LD_INT 1
53213: ARRAY
53214: PPUSH
53215: LD_VAR 0 2
53219: PUSH
53220: LD_VAR 0 4
53224: ARRAY
53225: PUSH
53226: LD_INT 2
53228: ARRAY
53229: PPUSH
53230: CALL_OW 297
53234: ST_TO_ADDR
// end ; end ;
53235: GO 53124
53237: POP
53238: POP
// result := hex ;
53239: LD_ADDR_VAR 0 3
53243: PUSH
53244: LD_VAR 0 7
53248: ST_TO_ADDR
// end ;
53249: LD_VAR 0 3
53253: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53254: LD_INT 0
53256: PPUSH
53257: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53258: LD_VAR 0 1
53262: NOT
53263: PUSH
53264: LD_VAR 0 1
53268: PUSH
53269: LD_INT 21
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 23
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PPUSH
53293: CALL_OW 69
53297: IN
53298: NOT
53299: OR
53300: IFFALSE 53304
// exit ;
53302: GO 53351
// for i = 1 to 3 do
53304: LD_ADDR_VAR 0 3
53308: PUSH
53309: DOUBLE
53310: LD_INT 1
53312: DEC
53313: ST_TO_ADDR
53314: LD_INT 3
53316: PUSH
53317: FOR_TO
53318: IFFALSE 53349
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53320: LD_VAR 0 1
53324: PPUSH
53325: CALL_OW 250
53329: PPUSH
53330: LD_VAR 0 1
53334: PPUSH
53335: CALL_OW 251
53339: PPUSH
53340: LD_INT 1
53342: PPUSH
53343: CALL_OW 453
53347: GO 53317
53349: POP
53350: POP
// end ;
53351: LD_VAR 0 2
53355: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53356: LD_INT 0
53358: PPUSH
53359: PPUSH
53360: PPUSH
53361: PPUSH
53362: PPUSH
53363: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53364: LD_VAR 0 1
53368: NOT
53369: PUSH
53370: LD_VAR 0 2
53374: NOT
53375: OR
53376: PUSH
53377: LD_VAR 0 1
53381: PPUSH
53382: CALL_OW 314
53386: OR
53387: IFFALSE 53391
// exit ;
53389: GO 53832
// x := GetX ( enemy_unit ) ;
53391: LD_ADDR_VAR 0 7
53395: PUSH
53396: LD_VAR 0 2
53400: PPUSH
53401: CALL_OW 250
53405: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53406: LD_ADDR_VAR 0 8
53410: PUSH
53411: LD_VAR 0 2
53415: PPUSH
53416: CALL_OW 251
53420: ST_TO_ADDR
// if not x or not y then
53421: LD_VAR 0 7
53425: NOT
53426: PUSH
53427: LD_VAR 0 8
53431: NOT
53432: OR
53433: IFFALSE 53437
// exit ;
53435: GO 53832
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53437: LD_ADDR_VAR 0 6
53441: PUSH
53442: LD_VAR 0 7
53446: PPUSH
53447: LD_INT 0
53449: PPUSH
53450: LD_INT 4
53452: PPUSH
53453: CALL_OW 272
53457: PUSH
53458: LD_VAR 0 8
53462: PPUSH
53463: LD_INT 0
53465: PPUSH
53466: LD_INT 4
53468: PPUSH
53469: CALL_OW 273
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_VAR 0 7
53482: PPUSH
53483: LD_INT 1
53485: PPUSH
53486: LD_INT 4
53488: PPUSH
53489: CALL_OW 272
53493: PUSH
53494: LD_VAR 0 8
53498: PPUSH
53499: LD_INT 1
53501: PPUSH
53502: LD_INT 4
53504: PPUSH
53505: CALL_OW 273
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_VAR 0 7
53518: PPUSH
53519: LD_INT 2
53521: PPUSH
53522: LD_INT 4
53524: PPUSH
53525: CALL_OW 272
53529: PUSH
53530: LD_VAR 0 8
53534: PPUSH
53535: LD_INT 2
53537: PPUSH
53538: LD_INT 4
53540: PPUSH
53541: CALL_OW 273
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_VAR 0 7
53554: PPUSH
53555: LD_INT 3
53557: PPUSH
53558: LD_INT 4
53560: PPUSH
53561: CALL_OW 272
53565: PUSH
53566: LD_VAR 0 8
53570: PPUSH
53571: LD_INT 3
53573: PPUSH
53574: LD_INT 4
53576: PPUSH
53577: CALL_OW 273
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_VAR 0 7
53590: PPUSH
53591: LD_INT 4
53593: PPUSH
53594: LD_INT 4
53596: PPUSH
53597: CALL_OW 272
53601: PUSH
53602: LD_VAR 0 8
53606: PPUSH
53607: LD_INT 4
53609: PPUSH
53610: LD_INT 4
53612: PPUSH
53613: CALL_OW 273
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_VAR 0 7
53626: PPUSH
53627: LD_INT 5
53629: PPUSH
53630: LD_INT 4
53632: PPUSH
53633: CALL_OW 272
53637: PUSH
53638: LD_VAR 0 8
53642: PPUSH
53643: LD_INT 5
53645: PPUSH
53646: LD_INT 4
53648: PPUSH
53649: CALL_OW 273
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: ST_TO_ADDR
// for i = tmp downto 1 do
53666: LD_ADDR_VAR 0 4
53670: PUSH
53671: DOUBLE
53672: LD_VAR 0 6
53676: INC
53677: ST_TO_ADDR
53678: LD_INT 1
53680: PUSH
53681: FOR_DOWNTO
53682: IFFALSE 53783
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53684: LD_VAR 0 6
53688: PUSH
53689: LD_VAR 0 4
53693: ARRAY
53694: PUSH
53695: LD_INT 1
53697: ARRAY
53698: PPUSH
53699: LD_VAR 0 6
53703: PUSH
53704: LD_VAR 0 4
53708: ARRAY
53709: PUSH
53710: LD_INT 2
53712: ARRAY
53713: PPUSH
53714: CALL_OW 488
53718: NOT
53719: PUSH
53720: LD_VAR 0 6
53724: PUSH
53725: LD_VAR 0 4
53729: ARRAY
53730: PUSH
53731: LD_INT 1
53733: ARRAY
53734: PPUSH
53735: LD_VAR 0 6
53739: PUSH
53740: LD_VAR 0 4
53744: ARRAY
53745: PUSH
53746: LD_INT 2
53748: ARRAY
53749: PPUSH
53750: CALL_OW 428
53754: PUSH
53755: LD_INT 0
53757: NONEQUAL
53758: OR
53759: IFFALSE 53781
// tmp := Delete ( tmp , i ) ;
53761: LD_ADDR_VAR 0 6
53765: PUSH
53766: LD_VAR 0 6
53770: PPUSH
53771: LD_VAR 0 4
53775: PPUSH
53776: CALL_OW 3
53780: ST_TO_ADDR
53781: GO 53681
53783: POP
53784: POP
// j := GetClosestHex ( unit , tmp ) ;
53785: LD_ADDR_VAR 0 5
53789: PUSH
53790: LD_VAR 0 1
53794: PPUSH
53795: LD_VAR 0 6
53799: PPUSH
53800: CALL 53085 0 2
53804: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53805: LD_VAR 0 1
53809: PPUSH
53810: LD_VAR 0 5
53814: PUSH
53815: LD_INT 1
53817: ARRAY
53818: PPUSH
53819: LD_VAR 0 5
53823: PUSH
53824: LD_INT 2
53826: ARRAY
53827: PPUSH
53828: CALL_OW 111
// end ;
53832: LD_VAR 0 3
53836: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53837: LD_INT 0
53839: PPUSH
53840: PPUSH
53841: PPUSH
// uc_side = 0 ;
53842: LD_ADDR_OWVAR 20
53846: PUSH
53847: LD_INT 0
53849: ST_TO_ADDR
// uc_nation = 0 ;
53850: LD_ADDR_OWVAR 21
53854: PUSH
53855: LD_INT 0
53857: ST_TO_ADDR
// InitHc_All ( ) ;
53858: CALL_OW 584
// InitVc ;
53862: CALL_OW 20
// if mastodonts then
53866: LD_VAR 0 6
53870: IFFALSE 53937
// for i = 1 to mastodonts do
53872: LD_ADDR_VAR 0 11
53876: PUSH
53877: DOUBLE
53878: LD_INT 1
53880: DEC
53881: ST_TO_ADDR
53882: LD_VAR 0 6
53886: PUSH
53887: FOR_TO
53888: IFFALSE 53935
// begin vc_chassis := 31 ;
53890: LD_ADDR_OWVAR 37
53894: PUSH
53895: LD_INT 31
53897: ST_TO_ADDR
// vc_control := control_rider ;
53898: LD_ADDR_OWVAR 38
53902: PUSH
53903: LD_INT 4
53905: ST_TO_ADDR
// animal := CreateVehicle ;
53906: LD_ADDR_VAR 0 12
53910: PUSH
53911: CALL_OW 45
53915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53916: LD_VAR 0 12
53920: PPUSH
53921: LD_VAR 0 8
53925: PPUSH
53926: LD_INT 0
53928: PPUSH
53929: CALL 56125 0 3
// end ;
53933: GO 53887
53935: POP
53936: POP
// if horses then
53937: LD_VAR 0 5
53941: IFFALSE 54008
// for i = 1 to horses do
53943: LD_ADDR_VAR 0 11
53947: PUSH
53948: DOUBLE
53949: LD_INT 1
53951: DEC
53952: ST_TO_ADDR
53953: LD_VAR 0 5
53957: PUSH
53958: FOR_TO
53959: IFFALSE 54006
// begin hc_class := 21 ;
53961: LD_ADDR_OWVAR 28
53965: PUSH
53966: LD_INT 21
53968: ST_TO_ADDR
// hc_gallery :=  ;
53969: LD_ADDR_OWVAR 33
53973: PUSH
53974: LD_STRING 
53976: ST_TO_ADDR
// animal := CreateHuman ;
53977: LD_ADDR_VAR 0 12
53981: PUSH
53982: CALL_OW 44
53986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53987: LD_VAR 0 12
53991: PPUSH
53992: LD_VAR 0 8
53996: PPUSH
53997: LD_INT 0
53999: PPUSH
54000: CALL 56125 0 3
// end ;
54004: GO 53958
54006: POP
54007: POP
// if birds then
54008: LD_VAR 0 1
54012: IFFALSE 54079
// for i = 1 to birds do
54014: LD_ADDR_VAR 0 11
54018: PUSH
54019: DOUBLE
54020: LD_INT 1
54022: DEC
54023: ST_TO_ADDR
54024: LD_VAR 0 1
54028: PUSH
54029: FOR_TO
54030: IFFALSE 54077
// begin hc_class = 18 ;
54032: LD_ADDR_OWVAR 28
54036: PUSH
54037: LD_INT 18
54039: ST_TO_ADDR
// hc_gallery =  ;
54040: LD_ADDR_OWVAR 33
54044: PUSH
54045: LD_STRING 
54047: ST_TO_ADDR
// animal := CreateHuman ;
54048: LD_ADDR_VAR 0 12
54052: PUSH
54053: CALL_OW 44
54057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54058: LD_VAR 0 12
54062: PPUSH
54063: LD_VAR 0 8
54067: PPUSH
54068: LD_INT 0
54070: PPUSH
54071: CALL 56125 0 3
// end ;
54075: GO 54029
54077: POP
54078: POP
// if tigers then
54079: LD_VAR 0 2
54083: IFFALSE 54167
// for i = 1 to tigers do
54085: LD_ADDR_VAR 0 11
54089: PUSH
54090: DOUBLE
54091: LD_INT 1
54093: DEC
54094: ST_TO_ADDR
54095: LD_VAR 0 2
54099: PUSH
54100: FOR_TO
54101: IFFALSE 54165
// begin hc_class = class_tiger ;
54103: LD_ADDR_OWVAR 28
54107: PUSH
54108: LD_INT 14
54110: ST_TO_ADDR
// hc_gallery =  ;
54111: LD_ADDR_OWVAR 33
54115: PUSH
54116: LD_STRING 
54118: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54119: LD_ADDR_OWVAR 35
54123: PUSH
54124: LD_INT 7
54126: NEG
54127: PPUSH
54128: LD_INT 7
54130: PPUSH
54131: CALL_OW 12
54135: ST_TO_ADDR
// animal := CreateHuman ;
54136: LD_ADDR_VAR 0 12
54140: PUSH
54141: CALL_OW 44
54145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54146: LD_VAR 0 12
54150: PPUSH
54151: LD_VAR 0 8
54155: PPUSH
54156: LD_INT 0
54158: PPUSH
54159: CALL 56125 0 3
// end ;
54163: GO 54100
54165: POP
54166: POP
// if apemans then
54167: LD_VAR 0 3
54171: IFFALSE 54294
// for i = 1 to apemans do
54173: LD_ADDR_VAR 0 11
54177: PUSH
54178: DOUBLE
54179: LD_INT 1
54181: DEC
54182: ST_TO_ADDR
54183: LD_VAR 0 3
54187: PUSH
54188: FOR_TO
54189: IFFALSE 54292
// begin hc_class = class_apeman ;
54191: LD_ADDR_OWVAR 28
54195: PUSH
54196: LD_INT 12
54198: ST_TO_ADDR
// hc_gallery =  ;
54199: LD_ADDR_OWVAR 33
54203: PUSH
54204: LD_STRING 
54206: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54207: LD_ADDR_OWVAR 35
54211: PUSH
54212: LD_INT 5
54214: NEG
54215: PPUSH
54216: LD_INT 5
54218: PPUSH
54219: CALL_OW 12
54223: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54224: LD_ADDR_OWVAR 31
54228: PUSH
54229: LD_INT 1
54231: PPUSH
54232: LD_INT 3
54234: PPUSH
54235: CALL_OW 12
54239: PUSH
54240: LD_INT 1
54242: PPUSH
54243: LD_INT 3
54245: PPUSH
54246: CALL_OW 12
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: ST_TO_ADDR
// animal := CreateHuman ;
54263: LD_ADDR_VAR 0 12
54267: PUSH
54268: CALL_OW 44
54272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54273: LD_VAR 0 12
54277: PPUSH
54278: LD_VAR 0 8
54282: PPUSH
54283: LD_INT 0
54285: PPUSH
54286: CALL 56125 0 3
// end ;
54290: GO 54188
54292: POP
54293: POP
// if enchidnas then
54294: LD_VAR 0 4
54298: IFFALSE 54365
// for i = 1 to enchidnas do
54300: LD_ADDR_VAR 0 11
54304: PUSH
54305: DOUBLE
54306: LD_INT 1
54308: DEC
54309: ST_TO_ADDR
54310: LD_VAR 0 4
54314: PUSH
54315: FOR_TO
54316: IFFALSE 54363
// begin hc_class = 13 ;
54318: LD_ADDR_OWVAR 28
54322: PUSH
54323: LD_INT 13
54325: ST_TO_ADDR
// hc_gallery =  ;
54326: LD_ADDR_OWVAR 33
54330: PUSH
54331: LD_STRING 
54333: ST_TO_ADDR
// animal := CreateHuman ;
54334: LD_ADDR_VAR 0 12
54338: PUSH
54339: CALL_OW 44
54343: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54344: LD_VAR 0 12
54348: PPUSH
54349: LD_VAR 0 8
54353: PPUSH
54354: LD_INT 0
54356: PPUSH
54357: CALL 56125 0 3
// end ;
54361: GO 54315
54363: POP
54364: POP
// if fishes then
54365: LD_VAR 0 7
54369: IFFALSE 54436
// for i = 1 to fishes do
54371: LD_ADDR_VAR 0 11
54375: PUSH
54376: DOUBLE
54377: LD_INT 1
54379: DEC
54380: ST_TO_ADDR
54381: LD_VAR 0 7
54385: PUSH
54386: FOR_TO
54387: IFFALSE 54434
// begin hc_class = 20 ;
54389: LD_ADDR_OWVAR 28
54393: PUSH
54394: LD_INT 20
54396: ST_TO_ADDR
// hc_gallery =  ;
54397: LD_ADDR_OWVAR 33
54401: PUSH
54402: LD_STRING 
54404: ST_TO_ADDR
// animal := CreateHuman ;
54405: LD_ADDR_VAR 0 12
54409: PUSH
54410: CALL_OW 44
54414: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54415: LD_VAR 0 12
54419: PPUSH
54420: LD_VAR 0 9
54424: PPUSH
54425: LD_INT 0
54427: PPUSH
54428: CALL 56125 0 3
// end ;
54432: GO 54386
54434: POP
54435: POP
// end ;
54436: LD_VAR 0 10
54440: RET
// export function WantHeal ( sci , unit ) ; begin
54441: LD_INT 0
54443: PPUSH
// if GetTaskList ( sci ) > 0 then
54444: LD_VAR 0 1
54448: PPUSH
54449: CALL_OW 437
54453: PUSH
54454: LD_INT 0
54456: GREATER
54457: IFFALSE 54527
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54459: LD_VAR 0 1
54463: PPUSH
54464: CALL_OW 437
54468: PUSH
54469: LD_INT 1
54471: ARRAY
54472: PUSH
54473: LD_INT 1
54475: ARRAY
54476: PUSH
54477: LD_STRING l
54479: EQUAL
54480: PUSH
54481: LD_VAR 0 1
54485: PPUSH
54486: CALL_OW 437
54490: PUSH
54491: LD_INT 1
54493: ARRAY
54494: PUSH
54495: LD_INT 4
54497: ARRAY
54498: PUSH
54499: LD_VAR 0 2
54503: EQUAL
54504: AND
54505: IFFALSE 54517
// result := true else
54507: LD_ADDR_VAR 0 3
54511: PUSH
54512: LD_INT 1
54514: ST_TO_ADDR
54515: GO 54525
// result := false ;
54517: LD_ADDR_VAR 0 3
54521: PUSH
54522: LD_INT 0
54524: ST_TO_ADDR
// end else
54525: GO 54535
// result := false ;
54527: LD_ADDR_VAR 0 3
54531: PUSH
54532: LD_INT 0
54534: ST_TO_ADDR
// end ;
54535: LD_VAR 0 3
54539: RET
// export function HealTarget ( sci ) ; begin
54540: LD_INT 0
54542: PPUSH
// if not sci then
54543: LD_VAR 0 1
54547: NOT
54548: IFFALSE 54552
// exit ;
54550: GO 54617
// result := 0 ;
54552: LD_ADDR_VAR 0 2
54556: PUSH
54557: LD_INT 0
54559: ST_TO_ADDR
// if GetTaskList ( sci ) then
54560: LD_VAR 0 1
54564: PPUSH
54565: CALL_OW 437
54569: IFFALSE 54617
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54571: LD_VAR 0 1
54575: PPUSH
54576: CALL_OW 437
54580: PUSH
54581: LD_INT 1
54583: ARRAY
54584: PUSH
54585: LD_INT 1
54587: ARRAY
54588: PUSH
54589: LD_STRING l
54591: EQUAL
54592: IFFALSE 54617
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54594: LD_ADDR_VAR 0 2
54598: PUSH
54599: LD_VAR 0 1
54603: PPUSH
54604: CALL_OW 437
54608: PUSH
54609: LD_INT 1
54611: ARRAY
54612: PUSH
54613: LD_INT 4
54615: ARRAY
54616: ST_TO_ADDR
// end ;
54617: LD_VAR 0 2
54621: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54622: LD_INT 0
54624: PPUSH
54625: PPUSH
54626: PPUSH
54627: PPUSH
// if not base_units then
54628: LD_VAR 0 1
54632: NOT
54633: IFFALSE 54637
// exit ;
54635: GO 54724
// result := false ;
54637: LD_ADDR_VAR 0 2
54641: PUSH
54642: LD_INT 0
54644: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54645: LD_ADDR_VAR 0 5
54649: PUSH
54650: LD_VAR 0 1
54654: PPUSH
54655: LD_INT 21
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PPUSH
54665: CALL_OW 72
54669: ST_TO_ADDR
// if not tmp then
54670: LD_VAR 0 5
54674: NOT
54675: IFFALSE 54679
// exit ;
54677: GO 54724
// for i in tmp do
54679: LD_ADDR_VAR 0 3
54683: PUSH
54684: LD_VAR 0 5
54688: PUSH
54689: FOR_IN
54690: IFFALSE 54722
// begin result := EnemyInRange ( i , 22 ) ;
54692: LD_ADDR_VAR 0 2
54696: PUSH
54697: LD_VAR 0 3
54701: PPUSH
54702: LD_INT 22
54704: PPUSH
54705: CALL 52960 0 2
54709: ST_TO_ADDR
// if result then
54710: LD_VAR 0 2
54714: IFFALSE 54720
// exit ;
54716: POP
54717: POP
54718: GO 54724
// end ;
54720: GO 54689
54722: POP
54723: POP
// end ;
54724: LD_VAR 0 2
54728: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54729: LD_INT 0
54731: PPUSH
54732: PPUSH
// if not units then
54733: LD_VAR 0 1
54737: NOT
54738: IFFALSE 54742
// exit ;
54740: GO 54812
// result := [ ] ;
54742: LD_ADDR_VAR 0 3
54746: PUSH
54747: EMPTY
54748: ST_TO_ADDR
// for i in units do
54749: LD_ADDR_VAR 0 4
54753: PUSH
54754: LD_VAR 0 1
54758: PUSH
54759: FOR_IN
54760: IFFALSE 54810
// if GetTag ( i ) = tag then
54762: LD_VAR 0 4
54766: PPUSH
54767: CALL_OW 110
54771: PUSH
54772: LD_VAR 0 2
54776: EQUAL
54777: IFFALSE 54808
// result := Insert ( result , result + 1 , i ) ;
54779: LD_ADDR_VAR 0 3
54783: PUSH
54784: LD_VAR 0 3
54788: PPUSH
54789: LD_VAR 0 3
54793: PUSH
54794: LD_INT 1
54796: PLUS
54797: PPUSH
54798: LD_VAR 0 4
54802: PPUSH
54803: CALL_OW 2
54807: ST_TO_ADDR
54808: GO 54759
54810: POP
54811: POP
// end ;
54812: LD_VAR 0 3
54816: RET
// export function IsDriver ( un ) ; begin
54817: LD_INT 0
54819: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54820: LD_ADDR_VAR 0 2
54824: PUSH
54825: LD_VAR 0 1
54829: PUSH
54830: LD_INT 55
54832: PUSH
54833: EMPTY
54834: LIST
54835: PPUSH
54836: CALL_OW 69
54840: IN
54841: ST_TO_ADDR
// end ;
54842: LD_VAR 0 2
54846: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54847: LD_INT 0
54849: PPUSH
54850: PPUSH
// list := [ ] ;
54851: LD_ADDR_VAR 0 5
54855: PUSH
54856: EMPTY
54857: ST_TO_ADDR
// case d of 0 :
54858: LD_VAR 0 3
54862: PUSH
54863: LD_INT 0
54865: DOUBLE
54866: EQUAL
54867: IFTRUE 54871
54869: GO 55004
54871: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54872: LD_ADDR_VAR 0 5
54876: PUSH
54877: LD_VAR 0 1
54881: PUSH
54882: LD_INT 4
54884: MINUS
54885: PUSH
54886: LD_VAR 0 2
54890: PUSH
54891: LD_INT 4
54893: MINUS
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: PUSH
54903: LD_VAR 0 1
54907: PUSH
54908: LD_INT 3
54910: MINUS
54911: PUSH
54912: LD_VAR 0 2
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: LIST
54924: PUSH
54925: LD_VAR 0 1
54929: PUSH
54930: LD_INT 4
54932: PLUS
54933: PUSH
54934: LD_VAR 0 2
54938: PUSH
54939: LD_INT 4
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: PUSH
54947: LD_VAR 0 1
54951: PUSH
54952: LD_INT 3
54954: PLUS
54955: PUSH
54956: LD_VAR 0 2
54960: PUSH
54961: LD_INT 3
54963: PLUS
54964: PUSH
54965: LD_INT 5
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: PUSH
54973: LD_VAR 0 1
54977: PUSH
54978: LD_VAR 0 2
54982: PUSH
54983: LD_INT 4
54985: PLUS
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: ST_TO_ADDR
// end ; 1 :
55002: GO 55702
55004: LD_INT 1
55006: DOUBLE
55007: EQUAL
55008: IFTRUE 55012
55010: GO 55145
55012: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55013: LD_ADDR_VAR 0 5
55017: PUSH
55018: LD_VAR 0 1
55022: PUSH
55023: LD_VAR 0 2
55027: PUSH
55028: LD_INT 4
55030: MINUS
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: LIST
55039: PUSH
55040: LD_VAR 0 1
55044: PUSH
55045: LD_INT 3
55047: MINUS
55048: PUSH
55049: LD_VAR 0 2
55053: PUSH
55054: LD_INT 3
55056: MINUS
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: PUSH
55066: LD_VAR 0 1
55070: PUSH
55071: LD_INT 4
55073: MINUS
55074: PUSH
55075: LD_VAR 0 2
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: LIST
55087: PUSH
55088: LD_VAR 0 1
55092: PUSH
55093: LD_VAR 0 2
55097: PUSH
55098: LD_INT 3
55100: PLUS
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: LIST
55109: PUSH
55110: LD_VAR 0 1
55114: PUSH
55115: LD_INT 4
55117: PLUS
55118: PUSH
55119: LD_VAR 0 2
55123: PUSH
55124: LD_INT 4
55126: PLUS
55127: PUSH
55128: LD_INT 5
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: LIST
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: ST_TO_ADDR
// end ; 2 :
55143: GO 55702
55145: LD_INT 2
55147: DOUBLE
55148: EQUAL
55149: IFTRUE 55153
55151: GO 55282
55153: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55154: LD_ADDR_VAR 0 5
55158: PUSH
55159: LD_VAR 0 1
55163: PUSH
55164: LD_VAR 0 2
55168: PUSH
55169: LD_INT 3
55171: MINUS
55172: PUSH
55173: LD_INT 3
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: PUSH
55181: LD_VAR 0 1
55185: PUSH
55186: LD_INT 4
55188: PLUS
55189: PUSH
55190: LD_VAR 0 2
55194: PUSH
55195: LD_INT 4
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: LIST
55202: PUSH
55203: LD_VAR 0 1
55207: PUSH
55208: LD_VAR 0 2
55212: PUSH
55213: LD_INT 4
55215: PLUS
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: LIST
55224: PUSH
55225: LD_VAR 0 1
55229: PUSH
55230: LD_INT 3
55232: MINUS
55233: PUSH
55234: LD_VAR 0 2
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: PUSH
55247: LD_VAR 0 1
55251: PUSH
55252: LD_INT 4
55254: MINUS
55255: PUSH
55256: LD_VAR 0 2
55260: PUSH
55261: LD_INT 4
55263: MINUS
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: LIST
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: ST_TO_ADDR
// end ; 3 :
55280: GO 55702
55282: LD_INT 3
55284: DOUBLE
55285: EQUAL
55286: IFTRUE 55290
55288: GO 55423
55290: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55291: LD_ADDR_VAR 0 5
55295: PUSH
55296: LD_VAR 0 1
55300: PUSH
55301: LD_INT 3
55303: PLUS
55304: PUSH
55305: LD_VAR 0 2
55309: PUSH
55310: LD_INT 4
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: PUSH
55318: LD_VAR 0 1
55322: PUSH
55323: LD_INT 4
55325: PLUS
55326: PUSH
55327: LD_VAR 0 2
55331: PUSH
55332: LD_INT 4
55334: PLUS
55335: PUSH
55336: LD_INT 5
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: LIST
55343: PUSH
55344: LD_VAR 0 1
55348: PUSH
55349: LD_INT 4
55351: MINUS
55352: PUSH
55353: LD_VAR 0 2
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: LIST
55365: PUSH
55366: LD_VAR 0 1
55370: PUSH
55371: LD_VAR 0 2
55375: PUSH
55376: LD_INT 4
55378: MINUS
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: LIST
55387: PUSH
55388: LD_VAR 0 1
55392: PUSH
55393: LD_INT 3
55395: MINUS
55396: PUSH
55397: LD_VAR 0 2
55401: PUSH
55402: LD_INT 3
55404: MINUS
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: ST_TO_ADDR
// end ; 4 :
55421: GO 55702
55423: LD_INT 4
55425: DOUBLE
55426: EQUAL
55427: IFTRUE 55431
55429: GO 55564
55431: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55432: LD_ADDR_VAR 0 5
55436: PUSH
55437: LD_VAR 0 1
55441: PUSH
55442: LD_VAR 0 2
55446: PUSH
55447: LD_INT 4
55449: PLUS
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: PUSH
55459: LD_VAR 0 1
55463: PUSH
55464: LD_INT 3
55466: PLUS
55467: PUSH
55468: LD_VAR 0 2
55472: PUSH
55473: LD_INT 3
55475: PLUS
55476: PUSH
55477: LD_INT 5
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: PUSH
55485: LD_VAR 0 1
55489: PUSH
55490: LD_INT 4
55492: PLUS
55493: PUSH
55494: LD_VAR 0 2
55498: PUSH
55499: LD_INT 4
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: LIST
55506: PUSH
55507: LD_VAR 0 1
55511: PUSH
55512: LD_VAR 0 2
55516: PUSH
55517: LD_INT 3
55519: MINUS
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: PUSH
55529: LD_VAR 0 1
55533: PUSH
55534: LD_INT 4
55536: MINUS
55537: PUSH
55538: LD_VAR 0 2
55542: PUSH
55543: LD_INT 4
55545: MINUS
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: ST_TO_ADDR
// end ; 5 :
55562: GO 55702
55564: LD_INT 5
55566: DOUBLE
55567: EQUAL
55568: IFTRUE 55572
55570: GO 55701
55572: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55573: LD_ADDR_VAR 0 5
55577: PUSH
55578: LD_VAR 0 1
55582: PUSH
55583: LD_INT 4
55585: MINUS
55586: PUSH
55587: LD_VAR 0 2
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: LIST
55599: PUSH
55600: LD_VAR 0 1
55604: PUSH
55605: LD_VAR 0 2
55609: PUSH
55610: LD_INT 4
55612: MINUS
55613: PUSH
55614: LD_INT 3
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: LIST
55621: PUSH
55622: LD_VAR 0 1
55626: PUSH
55627: LD_INT 4
55629: PLUS
55630: PUSH
55631: LD_VAR 0 2
55635: PUSH
55636: LD_INT 4
55638: PLUS
55639: PUSH
55640: LD_INT 5
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: PUSH
55648: LD_VAR 0 1
55652: PUSH
55653: LD_INT 3
55655: PLUS
55656: PUSH
55657: LD_VAR 0 2
55661: PUSH
55662: LD_INT 4
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: PUSH
55670: LD_VAR 0 1
55674: PUSH
55675: LD_VAR 0 2
55679: PUSH
55680: LD_INT 3
55682: PLUS
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// end ; end ;
55699: GO 55702
55701: POP
// result := list ;
55702: LD_ADDR_VAR 0 4
55706: PUSH
55707: LD_VAR 0 5
55711: ST_TO_ADDR
// end ;
55712: LD_VAR 0 4
55716: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55717: LD_INT 0
55719: PPUSH
55720: PPUSH
55721: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55722: LD_VAR 0 1
55726: NOT
55727: PUSH
55728: LD_VAR 0 2
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 3
55741: PUSH
55742: LD_INT 4
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: IN
55751: NOT
55752: OR
55753: IFFALSE 55757
// exit ;
55755: GO 55849
// tmp := [ ] ;
55757: LD_ADDR_VAR 0 5
55761: PUSH
55762: EMPTY
55763: ST_TO_ADDR
// for i in units do
55764: LD_ADDR_VAR 0 4
55768: PUSH
55769: LD_VAR 0 1
55773: PUSH
55774: FOR_IN
55775: IFFALSE 55818
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55777: LD_ADDR_VAR 0 5
55781: PUSH
55782: LD_VAR 0 5
55786: PPUSH
55787: LD_VAR 0 5
55791: PUSH
55792: LD_INT 1
55794: PLUS
55795: PPUSH
55796: LD_VAR 0 4
55800: PPUSH
55801: LD_VAR 0 2
55805: PPUSH
55806: CALL_OW 259
55810: PPUSH
55811: CALL_OW 2
55815: ST_TO_ADDR
55816: GO 55774
55818: POP
55819: POP
// if not tmp then
55820: LD_VAR 0 5
55824: NOT
55825: IFFALSE 55829
// exit ;
55827: GO 55849
// result := SortListByListDesc ( units , tmp ) ;
55829: LD_ADDR_VAR 0 3
55833: PUSH
55834: LD_VAR 0 1
55838: PPUSH
55839: LD_VAR 0 5
55843: PPUSH
55844: CALL_OW 77
55848: ST_TO_ADDR
// end ;
55849: LD_VAR 0 3
55853: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55854: LD_INT 0
55856: PPUSH
55857: PPUSH
55858: PPUSH
// result := false ;
55859: LD_ADDR_VAR 0 3
55863: PUSH
55864: LD_INT 0
55866: ST_TO_ADDR
// x := GetX ( building ) ;
55867: LD_ADDR_VAR 0 4
55871: PUSH
55872: LD_VAR 0 2
55876: PPUSH
55877: CALL_OW 250
55881: ST_TO_ADDR
// y := GetY ( building ) ;
55882: LD_ADDR_VAR 0 5
55886: PUSH
55887: LD_VAR 0 2
55891: PPUSH
55892: CALL_OW 251
55896: ST_TO_ADDR
// if not building or not x or not y then
55897: LD_VAR 0 2
55901: NOT
55902: PUSH
55903: LD_VAR 0 4
55907: NOT
55908: OR
55909: PUSH
55910: LD_VAR 0 5
55914: NOT
55915: OR
55916: IFFALSE 55920
// exit ;
55918: GO 56012
// if GetTaskList ( unit ) then
55920: LD_VAR 0 1
55924: PPUSH
55925: CALL_OW 437
55929: IFFALSE 56012
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55931: LD_STRING e
55933: PUSH
55934: LD_VAR 0 1
55938: PPUSH
55939: CALL_OW 437
55943: PUSH
55944: LD_INT 1
55946: ARRAY
55947: PUSH
55948: LD_INT 1
55950: ARRAY
55951: EQUAL
55952: PUSH
55953: LD_VAR 0 4
55957: PUSH
55958: LD_VAR 0 1
55962: PPUSH
55963: CALL_OW 437
55967: PUSH
55968: LD_INT 1
55970: ARRAY
55971: PUSH
55972: LD_INT 2
55974: ARRAY
55975: EQUAL
55976: AND
55977: PUSH
55978: LD_VAR 0 5
55982: PUSH
55983: LD_VAR 0 1
55987: PPUSH
55988: CALL_OW 437
55992: PUSH
55993: LD_INT 1
55995: ARRAY
55996: PUSH
55997: LD_INT 3
55999: ARRAY
56000: EQUAL
56001: AND
56002: IFFALSE 56012
// result := true end ;
56004: LD_ADDR_VAR 0 3
56008: PUSH
56009: LD_INT 1
56011: ST_TO_ADDR
// end ;
56012: LD_VAR 0 3
56016: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56017: LD_INT 0
56019: PPUSH
// result := false ;
56020: LD_ADDR_VAR 0 4
56024: PUSH
56025: LD_INT 0
56027: ST_TO_ADDR
// if GetTaskList ( unit ) then
56028: LD_VAR 0 1
56032: PPUSH
56033: CALL_OW 437
56037: IFFALSE 56120
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56039: LD_STRING M
56041: PUSH
56042: LD_VAR 0 1
56046: PPUSH
56047: CALL_OW 437
56051: PUSH
56052: LD_INT 1
56054: ARRAY
56055: PUSH
56056: LD_INT 1
56058: ARRAY
56059: EQUAL
56060: PUSH
56061: LD_VAR 0 2
56065: PUSH
56066: LD_VAR 0 1
56070: PPUSH
56071: CALL_OW 437
56075: PUSH
56076: LD_INT 1
56078: ARRAY
56079: PUSH
56080: LD_INT 2
56082: ARRAY
56083: EQUAL
56084: AND
56085: PUSH
56086: LD_VAR 0 3
56090: PUSH
56091: LD_VAR 0 1
56095: PPUSH
56096: CALL_OW 437
56100: PUSH
56101: LD_INT 1
56103: ARRAY
56104: PUSH
56105: LD_INT 3
56107: ARRAY
56108: EQUAL
56109: AND
56110: IFFALSE 56120
// result := true ;
56112: LD_ADDR_VAR 0 4
56116: PUSH
56117: LD_INT 1
56119: ST_TO_ADDR
// end ; end ;
56120: LD_VAR 0 4
56124: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56125: LD_INT 0
56127: PPUSH
56128: PPUSH
56129: PPUSH
56130: PPUSH
// if not unit or not area then
56131: LD_VAR 0 1
56135: NOT
56136: PUSH
56137: LD_VAR 0 2
56141: NOT
56142: OR
56143: IFFALSE 56147
// exit ;
56145: GO 56311
// tmp := AreaToList ( area , i ) ;
56147: LD_ADDR_VAR 0 6
56151: PUSH
56152: LD_VAR 0 2
56156: PPUSH
56157: LD_VAR 0 5
56161: PPUSH
56162: CALL_OW 517
56166: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56167: LD_ADDR_VAR 0 5
56171: PUSH
56172: DOUBLE
56173: LD_INT 1
56175: DEC
56176: ST_TO_ADDR
56177: LD_VAR 0 6
56181: PUSH
56182: LD_INT 1
56184: ARRAY
56185: PUSH
56186: FOR_TO
56187: IFFALSE 56309
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56189: LD_ADDR_VAR 0 7
56193: PUSH
56194: LD_VAR 0 6
56198: PUSH
56199: LD_INT 1
56201: ARRAY
56202: PUSH
56203: LD_VAR 0 5
56207: ARRAY
56208: PUSH
56209: LD_VAR 0 6
56213: PUSH
56214: LD_INT 2
56216: ARRAY
56217: PUSH
56218: LD_VAR 0 5
56222: ARRAY
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56228: LD_VAR 0 7
56232: PUSH
56233: LD_INT 1
56235: ARRAY
56236: PPUSH
56237: LD_VAR 0 7
56241: PUSH
56242: LD_INT 2
56244: ARRAY
56245: PPUSH
56246: CALL_OW 428
56250: PUSH
56251: LD_INT 0
56253: EQUAL
56254: IFFALSE 56307
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56256: LD_VAR 0 1
56260: PPUSH
56261: LD_VAR 0 7
56265: PUSH
56266: LD_INT 1
56268: ARRAY
56269: PPUSH
56270: LD_VAR 0 7
56274: PUSH
56275: LD_INT 2
56277: ARRAY
56278: PPUSH
56279: LD_VAR 0 3
56283: PPUSH
56284: CALL_OW 48
// result := IsPlaced ( unit ) ;
56288: LD_ADDR_VAR 0 4
56292: PUSH
56293: LD_VAR 0 1
56297: PPUSH
56298: CALL_OW 305
56302: ST_TO_ADDR
// exit ;
56303: POP
56304: POP
56305: GO 56311
// end ; end ;
56307: GO 56186
56309: POP
56310: POP
// end ;
56311: LD_VAR 0 4
56315: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56316: LD_INT 0
56318: PPUSH
56319: PPUSH
56320: PPUSH
// if not side or side > 8 then
56321: LD_VAR 0 1
56325: NOT
56326: PUSH
56327: LD_VAR 0 1
56331: PUSH
56332: LD_INT 8
56334: GREATER
56335: OR
56336: IFFALSE 56340
// exit ;
56338: GO 56527
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56340: LD_ADDR_VAR 0 4
56344: PUSH
56345: LD_INT 22
56347: PUSH
56348: LD_VAR 0 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 21
56359: PUSH
56360: LD_INT 3
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PPUSH
56371: CALL_OW 69
56375: ST_TO_ADDR
// if not tmp then
56376: LD_VAR 0 4
56380: NOT
56381: IFFALSE 56385
// exit ;
56383: GO 56527
// enable_addtolog := true ;
56385: LD_ADDR_OWVAR 81
56389: PUSH
56390: LD_INT 1
56392: ST_TO_ADDR
// AddToLog ( [ ) ;
56393: LD_STRING [
56395: PPUSH
56396: CALL_OW 561
// for i in tmp do
56400: LD_ADDR_VAR 0 3
56404: PUSH
56405: LD_VAR 0 4
56409: PUSH
56410: FOR_IN
56411: IFFALSE 56518
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56413: LD_STRING [
56415: PUSH
56416: LD_VAR 0 3
56420: PPUSH
56421: CALL_OW 266
56425: STR
56426: PUSH
56427: LD_STRING , 
56429: STR
56430: PUSH
56431: LD_VAR 0 3
56435: PPUSH
56436: CALL_OW 250
56440: STR
56441: PUSH
56442: LD_STRING , 
56444: STR
56445: PUSH
56446: LD_VAR 0 3
56450: PPUSH
56451: CALL_OW 251
56455: STR
56456: PUSH
56457: LD_STRING , 
56459: STR
56460: PUSH
56461: LD_VAR 0 3
56465: PPUSH
56466: CALL_OW 254
56470: STR
56471: PUSH
56472: LD_STRING , 
56474: STR
56475: PUSH
56476: LD_VAR 0 3
56480: PPUSH
56481: LD_INT 1
56483: PPUSH
56484: CALL_OW 268
56488: STR
56489: PUSH
56490: LD_STRING , 
56492: STR
56493: PUSH
56494: LD_VAR 0 3
56498: PPUSH
56499: LD_INT 2
56501: PPUSH
56502: CALL_OW 268
56506: STR
56507: PUSH
56508: LD_STRING ],
56510: STR
56511: PPUSH
56512: CALL_OW 561
// end ;
56516: GO 56410
56518: POP
56519: POP
// AddToLog ( ]; ) ;
56520: LD_STRING ];
56522: PPUSH
56523: CALL_OW 561
// end ;
56527: LD_VAR 0 2
56531: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56532: LD_INT 0
56534: PPUSH
56535: PPUSH
56536: PPUSH
56537: PPUSH
56538: PPUSH
// if not area or not rate or not max then
56539: LD_VAR 0 1
56543: NOT
56544: PUSH
56545: LD_VAR 0 2
56549: NOT
56550: OR
56551: PUSH
56552: LD_VAR 0 4
56556: NOT
56557: OR
56558: IFFALSE 56562
// exit ;
56560: GO 56754
// while 1 do
56562: LD_INT 1
56564: IFFALSE 56754
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56566: LD_ADDR_VAR 0 9
56570: PUSH
56571: LD_VAR 0 1
56575: PPUSH
56576: LD_INT 1
56578: PPUSH
56579: CALL_OW 287
56583: PUSH
56584: LD_INT 10
56586: MUL
56587: ST_TO_ADDR
// r := rate / 10 ;
56588: LD_ADDR_VAR 0 7
56592: PUSH
56593: LD_VAR 0 2
56597: PUSH
56598: LD_INT 10
56600: DIVREAL
56601: ST_TO_ADDR
// time := 1 1$00 ;
56602: LD_ADDR_VAR 0 8
56606: PUSH
56607: LD_INT 2100
56609: ST_TO_ADDR
// if amount < min then
56610: LD_VAR 0 9
56614: PUSH
56615: LD_VAR 0 3
56619: LESS
56620: IFFALSE 56638
// r := r * 2 else
56622: LD_ADDR_VAR 0 7
56626: PUSH
56627: LD_VAR 0 7
56631: PUSH
56632: LD_INT 2
56634: MUL
56635: ST_TO_ADDR
56636: GO 56664
// if amount > max then
56638: LD_VAR 0 9
56642: PUSH
56643: LD_VAR 0 4
56647: GREATER
56648: IFFALSE 56664
// r := r / 2 ;
56650: LD_ADDR_VAR 0 7
56654: PUSH
56655: LD_VAR 0 7
56659: PUSH
56660: LD_INT 2
56662: DIVREAL
56663: ST_TO_ADDR
// time := time / r ;
56664: LD_ADDR_VAR 0 8
56668: PUSH
56669: LD_VAR 0 8
56673: PUSH
56674: LD_VAR 0 7
56678: DIVREAL
56679: ST_TO_ADDR
// if time < 0 then
56680: LD_VAR 0 8
56684: PUSH
56685: LD_INT 0
56687: LESS
56688: IFFALSE 56705
// time := time * - 1 ;
56690: LD_ADDR_VAR 0 8
56694: PUSH
56695: LD_VAR 0 8
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: MUL
56704: ST_TO_ADDR
// wait ( time ) ;
56705: LD_VAR 0 8
56709: PPUSH
56710: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56714: LD_INT 35
56716: PPUSH
56717: LD_INT 875
56719: PPUSH
56720: CALL_OW 12
56724: PPUSH
56725: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56729: LD_INT 1
56731: PPUSH
56732: LD_INT 5
56734: PPUSH
56735: CALL_OW 12
56739: PPUSH
56740: LD_VAR 0 1
56744: PPUSH
56745: LD_INT 1
56747: PPUSH
56748: CALL_OW 55
// end ;
56752: GO 56562
// end ;
56754: LD_VAR 0 5
56758: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56759: LD_INT 0
56761: PPUSH
56762: PPUSH
56763: PPUSH
56764: PPUSH
56765: PPUSH
56766: PPUSH
56767: PPUSH
56768: PPUSH
// if not turrets or not factories then
56769: LD_VAR 0 1
56773: NOT
56774: PUSH
56775: LD_VAR 0 2
56779: NOT
56780: OR
56781: IFFALSE 56785
// exit ;
56783: GO 57092
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56785: LD_ADDR_VAR 0 10
56789: PUSH
56790: LD_INT 5
56792: PUSH
56793: LD_INT 6
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 4
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: LD_INT 5
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 24
56827: PUSH
56828: LD_INT 25
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 23
56837: PUSH
56838: LD_INT 27
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 42
56851: PUSH
56852: LD_INT 43
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 44
56861: PUSH
56862: LD_INT 46
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 45
56871: PUSH
56872: LD_INT 47
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// result := [ ] ;
56889: LD_ADDR_VAR 0 3
56893: PUSH
56894: EMPTY
56895: ST_TO_ADDR
// for i in turrets do
56896: LD_ADDR_VAR 0 4
56900: PUSH
56901: LD_VAR 0 1
56905: PUSH
56906: FOR_IN
56907: IFFALSE 57090
// begin nat := GetNation ( i ) ;
56909: LD_ADDR_VAR 0 7
56913: PUSH
56914: LD_VAR 0 4
56918: PPUSH
56919: CALL_OW 248
56923: ST_TO_ADDR
// weapon := 0 ;
56924: LD_ADDR_VAR 0 8
56928: PUSH
56929: LD_INT 0
56931: ST_TO_ADDR
// if not nat then
56932: LD_VAR 0 7
56936: NOT
56937: IFFALSE 56941
// continue ;
56939: GO 56906
// for j in list [ nat ] do
56941: LD_ADDR_VAR 0 5
56945: PUSH
56946: LD_VAR 0 10
56950: PUSH
56951: LD_VAR 0 7
56955: ARRAY
56956: PUSH
56957: FOR_IN
56958: IFFALSE 56999
// if GetBWeapon ( i ) = j [ 1 ] then
56960: LD_VAR 0 4
56964: PPUSH
56965: CALL_OW 269
56969: PUSH
56970: LD_VAR 0 5
56974: PUSH
56975: LD_INT 1
56977: ARRAY
56978: EQUAL
56979: IFFALSE 56997
// begin weapon := j [ 2 ] ;
56981: LD_ADDR_VAR 0 8
56985: PUSH
56986: LD_VAR 0 5
56990: PUSH
56991: LD_INT 2
56993: ARRAY
56994: ST_TO_ADDR
// break ;
56995: GO 56999
// end ;
56997: GO 56957
56999: POP
57000: POP
// if not weapon then
57001: LD_VAR 0 8
57005: NOT
57006: IFFALSE 57010
// continue ;
57008: GO 56906
// for k in factories do
57010: LD_ADDR_VAR 0 6
57014: PUSH
57015: LD_VAR 0 2
57019: PUSH
57020: FOR_IN
57021: IFFALSE 57086
// begin weapons := AvailableWeaponList ( k ) ;
57023: LD_ADDR_VAR 0 9
57027: PUSH
57028: LD_VAR 0 6
57032: PPUSH
57033: CALL_OW 478
57037: ST_TO_ADDR
// if not weapons then
57038: LD_VAR 0 9
57042: NOT
57043: IFFALSE 57047
// continue ;
57045: GO 57020
// if weapon in weapons then
57047: LD_VAR 0 8
57051: PUSH
57052: LD_VAR 0 9
57056: IN
57057: IFFALSE 57084
// begin result := [ i , weapon ] ;
57059: LD_ADDR_VAR 0 3
57063: PUSH
57064: LD_VAR 0 4
57068: PUSH
57069: LD_VAR 0 8
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: ST_TO_ADDR
// exit ;
57078: POP
57079: POP
57080: POP
57081: POP
57082: GO 57092
// end ; end ;
57084: GO 57020
57086: POP
57087: POP
// end ;
57088: GO 56906
57090: POP
57091: POP
// end ;
57092: LD_VAR 0 3
57096: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57097: LD_INT 0
57099: PPUSH
// if not side or side > 8 then
57100: LD_VAR 0 3
57104: NOT
57105: PUSH
57106: LD_VAR 0 3
57110: PUSH
57111: LD_INT 8
57113: GREATER
57114: OR
57115: IFFALSE 57119
// exit ;
57117: GO 57178
// if not range then
57119: LD_VAR 0 4
57123: NOT
57124: IFFALSE 57135
// range := - 12 ;
57126: LD_ADDR_VAR 0 4
57130: PUSH
57131: LD_INT 12
57133: NEG
57134: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57135: LD_VAR 0 1
57139: PPUSH
57140: LD_VAR 0 2
57144: PPUSH
57145: LD_VAR 0 3
57149: PPUSH
57150: LD_VAR 0 4
57154: PPUSH
57155: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57159: LD_VAR 0 1
57163: PPUSH
57164: LD_VAR 0 2
57168: PPUSH
57169: LD_VAR 0 3
57173: PPUSH
57174: CALL_OW 331
// end ;
57178: LD_VAR 0 5
57182: RET
// export function Video ( mode ) ; begin
57183: LD_INT 0
57185: PPUSH
// ingame_video = mode ;
57186: LD_ADDR_OWVAR 52
57190: PUSH
57191: LD_VAR 0 1
57195: ST_TO_ADDR
// interface_hidden = mode ;
57196: LD_ADDR_OWVAR 54
57200: PUSH
57201: LD_VAR 0 1
57205: ST_TO_ADDR
// end ;
57206: LD_VAR 0 2
57210: RET
// export function Join ( array , element ) ; begin
57211: LD_INT 0
57213: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57214: LD_ADDR_VAR 0 3
57218: PUSH
57219: LD_VAR 0 1
57223: PPUSH
57224: LD_VAR 0 1
57228: PUSH
57229: LD_INT 1
57231: PLUS
57232: PPUSH
57233: LD_VAR 0 2
57237: PPUSH
57238: CALL_OW 1
57242: ST_TO_ADDR
// end ;
57243: LD_VAR 0 3
57247: RET
// export function JoinUnion ( array , element ) ; begin
57248: LD_INT 0
57250: PPUSH
// result := array union element ;
57251: LD_ADDR_VAR 0 3
57255: PUSH
57256: LD_VAR 0 1
57260: PUSH
57261: LD_VAR 0 2
57265: UNION
57266: ST_TO_ADDR
// end ;
57267: LD_VAR 0 3
57271: RET
// export function GetBehemoths ( side ) ; begin
57272: LD_INT 0
57274: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57275: LD_ADDR_VAR 0 2
57279: PUSH
57280: LD_INT 22
57282: PUSH
57283: LD_VAR 0 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 31
57294: PUSH
57295: LD_INT 25
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PPUSH
57306: CALL_OW 69
57310: ST_TO_ADDR
// end ;
57311: LD_VAR 0 2
57315: RET
// export function Shuffle ( array ) ; var i , index ; begin
57316: LD_INT 0
57318: PPUSH
57319: PPUSH
57320: PPUSH
// result := [ ] ;
57321: LD_ADDR_VAR 0 2
57325: PUSH
57326: EMPTY
57327: ST_TO_ADDR
// if not array then
57328: LD_VAR 0 1
57332: NOT
57333: IFFALSE 57337
// exit ;
57335: GO 57436
// Randomize ;
57337: CALL_OW 10
// for i = array downto 1 do
57341: LD_ADDR_VAR 0 3
57345: PUSH
57346: DOUBLE
57347: LD_VAR 0 1
57351: INC
57352: ST_TO_ADDR
57353: LD_INT 1
57355: PUSH
57356: FOR_DOWNTO
57357: IFFALSE 57434
// begin index := rand ( 1 , array ) ;
57359: LD_ADDR_VAR 0 4
57363: PUSH
57364: LD_INT 1
57366: PPUSH
57367: LD_VAR 0 1
57371: PPUSH
57372: CALL_OW 12
57376: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57377: LD_ADDR_VAR 0 2
57381: PUSH
57382: LD_VAR 0 2
57386: PPUSH
57387: LD_VAR 0 2
57391: PUSH
57392: LD_INT 1
57394: PLUS
57395: PPUSH
57396: LD_VAR 0 1
57400: PUSH
57401: LD_VAR 0 4
57405: ARRAY
57406: PPUSH
57407: CALL_OW 2
57411: ST_TO_ADDR
// array := Delete ( array , index ) ;
57412: LD_ADDR_VAR 0 1
57416: PUSH
57417: LD_VAR 0 1
57421: PPUSH
57422: LD_VAR 0 4
57426: PPUSH
57427: CALL_OW 3
57431: ST_TO_ADDR
// end ;
57432: GO 57356
57434: POP
57435: POP
// end ;
57436: LD_VAR 0 2
57440: RET
// export function GetBaseMaterials ( base ) ; begin
57441: LD_INT 0
57443: PPUSH
// result := [ 0 , 0 , 0 ] ;
57444: LD_ADDR_VAR 0 2
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: LIST
57462: ST_TO_ADDR
// if not base then
57463: LD_VAR 0 1
57467: NOT
57468: IFFALSE 57472
// exit ;
57470: GO 57521
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57472: LD_ADDR_VAR 0 2
57476: PUSH
57477: LD_VAR 0 1
57481: PPUSH
57482: LD_INT 1
57484: PPUSH
57485: CALL_OW 275
57489: PUSH
57490: LD_VAR 0 1
57494: PPUSH
57495: LD_INT 2
57497: PPUSH
57498: CALL_OW 275
57502: PUSH
57503: LD_VAR 0 1
57507: PPUSH
57508: LD_INT 3
57510: PPUSH
57511: CALL_OW 275
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: ST_TO_ADDR
// end ;
57521: LD_VAR 0 2
57525: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57526: LD_INT 0
57528: PPUSH
57529: PPUSH
// result := array ;
57530: LD_ADDR_VAR 0 3
57534: PUSH
57535: LD_VAR 0 1
57539: ST_TO_ADDR
// if size > 0 then
57540: LD_VAR 0 2
57544: PUSH
57545: LD_INT 0
57547: GREATER
57548: IFFALSE 57594
// for i := array downto size do
57550: LD_ADDR_VAR 0 4
57554: PUSH
57555: DOUBLE
57556: LD_VAR 0 1
57560: INC
57561: ST_TO_ADDR
57562: LD_VAR 0 2
57566: PUSH
57567: FOR_DOWNTO
57568: IFFALSE 57592
// result := Delete ( result , result ) ;
57570: LD_ADDR_VAR 0 3
57574: PUSH
57575: LD_VAR 0 3
57579: PPUSH
57580: LD_VAR 0 3
57584: PPUSH
57585: CALL_OW 3
57589: ST_TO_ADDR
57590: GO 57567
57592: POP
57593: POP
// end ;
57594: LD_VAR 0 3
57598: RET
// export function ComExit ( unit ) ; var tmp ; begin
57599: LD_INT 0
57601: PPUSH
57602: PPUSH
// if not IsInUnit ( unit ) then
57603: LD_VAR 0 1
57607: PPUSH
57608: CALL_OW 310
57612: NOT
57613: IFFALSE 57617
// exit ;
57615: GO 57677
// tmp := IsInUnit ( unit ) ;
57617: LD_ADDR_VAR 0 3
57621: PUSH
57622: LD_VAR 0 1
57626: PPUSH
57627: CALL_OW 310
57631: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57632: LD_VAR 0 3
57636: PPUSH
57637: CALL_OW 247
57641: PUSH
57642: LD_INT 2
57644: EQUAL
57645: IFFALSE 57658
// ComExitVehicle ( unit ) else
57647: LD_VAR 0 1
57651: PPUSH
57652: CALL_OW 121
57656: GO 57667
// ComExitBuilding ( unit ) ;
57658: LD_VAR 0 1
57662: PPUSH
57663: CALL_OW 122
// result := tmp ;
57667: LD_ADDR_VAR 0 2
57671: PUSH
57672: LD_VAR 0 3
57676: ST_TO_ADDR
// end ;
57677: LD_VAR 0 2
57681: RET
// export function ResetHc ; begin
57682: LD_INT 0
57684: PPUSH
// InitHc ;
57685: CALL_OW 19
// hc_importance := 0 ;
57689: LD_ADDR_OWVAR 32
57693: PUSH
57694: LD_INT 0
57696: ST_TO_ADDR
// end ;
57697: LD_VAR 0 1
57701: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57702: LD_INT 0
57704: PPUSH
57705: PPUSH
57706: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57707: LD_ADDR_VAR 0 6
57711: PUSH
57712: LD_VAR 0 1
57716: PUSH
57717: LD_VAR 0 3
57721: PLUS
57722: PUSH
57723: LD_INT 2
57725: DIV
57726: ST_TO_ADDR
// if _x < 0 then
57727: LD_VAR 0 6
57731: PUSH
57732: LD_INT 0
57734: LESS
57735: IFFALSE 57752
// _x := _x * - 1 ;
57737: LD_ADDR_VAR 0 6
57741: PUSH
57742: LD_VAR 0 6
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: MUL
57751: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57752: LD_ADDR_VAR 0 7
57756: PUSH
57757: LD_VAR 0 2
57761: PUSH
57762: LD_VAR 0 4
57766: PLUS
57767: PUSH
57768: LD_INT 2
57770: DIV
57771: ST_TO_ADDR
// if _y < 0 then
57772: LD_VAR 0 7
57776: PUSH
57777: LD_INT 0
57779: LESS
57780: IFFALSE 57797
// _y := _y * - 1 ;
57782: LD_ADDR_VAR 0 7
57786: PUSH
57787: LD_VAR 0 7
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: MUL
57796: ST_TO_ADDR
// result := [ _x , _y ] ;
57797: LD_ADDR_VAR 0 5
57801: PUSH
57802: LD_VAR 0 6
57806: PUSH
57807: LD_VAR 0 7
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: ST_TO_ADDR
// end ;
57816: LD_VAR 0 5
57820: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57821: LD_INT 0
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
// task := GetTaskList ( unit ) ;
57827: LD_ADDR_VAR 0 7
57831: PUSH
57832: LD_VAR 0 1
57836: PPUSH
57837: CALL_OW 437
57841: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57842: LD_VAR 0 7
57846: NOT
57847: PUSH
57848: LD_VAR 0 1
57852: PPUSH
57853: LD_VAR 0 2
57857: PPUSH
57858: CALL_OW 308
57862: NOT
57863: AND
57864: IFFALSE 57868
// exit ;
57866: GO 57986
// if IsInArea ( unit , area ) then
57868: LD_VAR 0 1
57872: PPUSH
57873: LD_VAR 0 2
57877: PPUSH
57878: CALL_OW 308
57882: IFFALSE 57900
// begin ComMoveToArea ( unit , goAway ) ;
57884: LD_VAR 0 1
57888: PPUSH
57889: LD_VAR 0 3
57893: PPUSH
57894: CALL_OW 113
// exit ;
57898: GO 57986
// end ; if task [ 1 ] [ 1 ] <> M then
57900: LD_VAR 0 7
57904: PUSH
57905: LD_INT 1
57907: ARRAY
57908: PUSH
57909: LD_INT 1
57911: ARRAY
57912: PUSH
57913: LD_STRING M
57915: NONEQUAL
57916: IFFALSE 57920
// exit ;
57918: GO 57986
// x := task [ 1 ] [ 2 ] ;
57920: LD_ADDR_VAR 0 5
57924: PUSH
57925: LD_VAR 0 7
57929: PUSH
57930: LD_INT 1
57932: ARRAY
57933: PUSH
57934: LD_INT 2
57936: ARRAY
57937: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57938: LD_ADDR_VAR 0 6
57942: PUSH
57943: LD_VAR 0 7
57947: PUSH
57948: LD_INT 1
57950: ARRAY
57951: PUSH
57952: LD_INT 3
57954: ARRAY
57955: ST_TO_ADDR
// if InArea ( x , y , area ) then
57956: LD_VAR 0 5
57960: PPUSH
57961: LD_VAR 0 6
57965: PPUSH
57966: LD_VAR 0 2
57970: PPUSH
57971: CALL_OW 309
57975: IFFALSE 57986
// ComStop ( unit ) ;
57977: LD_VAR 0 1
57981: PPUSH
57982: CALL_OW 141
// end ;
57986: LD_VAR 0 4
57990: RET
// export function Abs ( value ) ; begin
57991: LD_INT 0
57993: PPUSH
// result := value ;
57994: LD_ADDR_VAR 0 2
57998: PUSH
57999: LD_VAR 0 1
58003: ST_TO_ADDR
// if value < 0 then
58004: LD_VAR 0 1
58008: PUSH
58009: LD_INT 0
58011: LESS
58012: IFFALSE 58029
// result := value * - 1 ;
58014: LD_ADDR_VAR 0 2
58018: PUSH
58019: LD_VAR 0 1
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: MUL
58028: ST_TO_ADDR
// end ;
58029: LD_VAR 0 2
58033: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58034: LD_INT 0
58036: PPUSH
58037: PPUSH
58038: PPUSH
58039: PPUSH
58040: PPUSH
58041: PPUSH
58042: PPUSH
58043: PPUSH
// if not unit or not building then
58044: LD_VAR 0 1
58048: NOT
58049: PUSH
58050: LD_VAR 0 2
58054: NOT
58055: OR
58056: IFFALSE 58060
// exit ;
58058: GO 58286
// x := GetX ( building ) ;
58060: LD_ADDR_VAR 0 4
58064: PUSH
58065: LD_VAR 0 2
58069: PPUSH
58070: CALL_OW 250
58074: ST_TO_ADDR
// y := GetY ( building ) ;
58075: LD_ADDR_VAR 0 6
58079: PUSH
58080: LD_VAR 0 2
58084: PPUSH
58085: CALL_OW 251
58089: ST_TO_ADDR
// d := GetDir ( building ) ;
58090: LD_ADDR_VAR 0 8
58094: PUSH
58095: LD_VAR 0 2
58099: PPUSH
58100: CALL_OW 254
58104: ST_TO_ADDR
// r := 4 ;
58105: LD_ADDR_VAR 0 9
58109: PUSH
58110: LD_INT 4
58112: ST_TO_ADDR
// for i := 1 to 5 do
58113: LD_ADDR_VAR 0 10
58117: PUSH
58118: DOUBLE
58119: LD_INT 1
58121: DEC
58122: ST_TO_ADDR
58123: LD_INT 5
58125: PUSH
58126: FOR_TO
58127: IFFALSE 58284
// begin _x := ShiftX ( x , d , r + i ) ;
58129: LD_ADDR_VAR 0 5
58133: PUSH
58134: LD_VAR 0 4
58138: PPUSH
58139: LD_VAR 0 8
58143: PPUSH
58144: LD_VAR 0 9
58148: PUSH
58149: LD_VAR 0 10
58153: PLUS
58154: PPUSH
58155: CALL_OW 272
58159: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58160: LD_ADDR_VAR 0 7
58164: PUSH
58165: LD_VAR 0 6
58169: PPUSH
58170: LD_VAR 0 8
58174: PPUSH
58175: LD_VAR 0 9
58179: PUSH
58180: LD_VAR 0 10
58184: PLUS
58185: PPUSH
58186: CALL_OW 273
58190: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58191: LD_VAR 0 5
58195: PPUSH
58196: LD_VAR 0 7
58200: PPUSH
58201: CALL_OW 488
58205: PUSH
58206: LD_VAR 0 5
58210: PPUSH
58211: LD_VAR 0 7
58215: PPUSH
58216: CALL_OW 428
58220: PPUSH
58221: CALL_OW 247
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: LD_INT 2
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: IN
58236: NOT
58237: AND
58238: IFFALSE 58282
// begin ComMoveXY ( unit , _x , _y ) ;
58240: LD_VAR 0 1
58244: PPUSH
58245: LD_VAR 0 5
58249: PPUSH
58250: LD_VAR 0 7
58254: PPUSH
58255: CALL_OW 111
// result := [ _x , _y ] ;
58259: LD_ADDR_VAR 0 3
58263: PUSH
58264: LD_VAR 0 5
58268: PUSH
58269: LD_VAR 0 7
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: ST_TO_ADDR
// exit ;
58278: POP
58279: POP
58280: GO 58286
// end ; end ;
58282: GO 58126
58284: POP
58285: POP
// end ;
58286: LD_VAR 0 3
58290: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58291: LD_INT 0
58293: PPUSH
58294: PPUSH
58295: PPUSH
// result := 0 ;
58296: LD_ADDR_VAR 0 3
58300: PUSH
58301: LD_INT 0
58303: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58304: LD_VAR 0 1
58308: PUSH
58309: LD_INT 0
58311: LESS
58312: PUSH
58313: LD_VAR 0 1
58317: PUSH
58318: LD_INT 8
58320: GREATER
58321: OR
58322: PUSH
58323: LD_VAR 0 2
58327: PUSH
58328: LD_INT 0
58330: LESS
58331: OR
58332: PUSH
58333: LD_VAR 0 2
58337: PUSH
58338: LD_INT 8
58340: GREATER
58341: OR
58342: IFFALSE 58346
// exit ;
58344: GO 58421
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58346: LD_ADDR_VAR 0 4
58350: PUSH
58351: LD_INT 22
58353: PUSH
58354: LD_VAR 0 2
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PPUSH
58363: CALL_OW 69
58367: PUSH
58368: FOR_IN
58369: IFFALSE 58419
// begin un := UnitShoot ( i ) ;
58371: LD_ADDR_VAR 0 5
58375: PUSH
58376: LD_VAR 0 4
58380: PPUSH
58381: CALL_OW 504
58385: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58386: LD_VAR 0 5
58390: PPUSH
58391: CALL_OW 255
58395: PUSH
58396: LD_VAR 0 1
58400: EQUAL
58401: IFFALSE 58417
// begin result := un ;
58403: LD_ADDR_VAR 0 3
58407: PUSH
58408: LD_VAR 0 5
58412: ST_TO_ADDR
// exit ;
58413: POP
58414: POP
58415: GO 58421
// end ; end ;
58417: GO 58368
58419: POP
58420: POP
// end ; end_of_file
58421: LD_VAR 0 3
58425: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
58426: LD_INT 0
58428: PPUSH
58429: PPUSH
58430: PPUSH
58431: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
58432: LD_VAR 0 1
58436: PPUSH
58437: CALL_OW 264
58441: PUSH
58442: LD_EXP 130
58446: EQUAL
58447: IFFALSE 58519
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58449: LD_INT 68
58451: PPUSH
58452: LD_VAR 0 1
58456: PPUSH
58457: CALL_OW 255
58461: PPUSH
58462: CALL_OW 321
58466: PUSH
58467: LD_INT 2
58469: EQUAL
58470: IFFALSE 58482
// eff := 70 else
58472: LD_ADDR_VAR 0 4
58476: PUSH
58477: LD_INT 70
58479: ST_TO_ADDR
58480: GO 58490
// eff := 30 ;
58482: LD_ADDR_VAR 0 4
58486: PUSH
58487: LD_INT 30
58489: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58490: LD_VAR 0 1
58494: PPUSH
58495: CALL_OW 250
58499: PPUSH
58500: LD_VAR 0 1
58504: PPUSH
58505: CALL_OW 251
58509: PPUSH
58510: LD_VAR 0 4
58514: PPUSH
58515: CALL_OW 495
// end ; end ;
58519: LD_VAR 0 2
58523: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58524: LD_INT 0
58526: PPUSH
// end ;
58527: LD_VAR 0 4
58531: RET
// export function SOS_Command ( cmd ) ; begin
58532: LD_INT 0
58534: PPUSH
// end ;
58535: LD_VAR 0 2
58539: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58540: LD_INT 0
58542: PPUSH
// if cmd = 121 then
58543: LD_VAR 0 1
58547: PUSH
58548: LD_INT 121
58550: EQUAL
58551: IFFALSE 58553
// end ;
58553: LD_VAR 0 6
58557: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58558: LD_INT 0
58560: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58561: LD_VAR 0 1
58565: PUSH
58566: LD_INT 250
58568: EQUAL
58569: PUSH
58570: LD_VAR 0 2
58574: PPUSH
58575: CALL_OW 264
58579: PUSH
58580: LD_EXP 133
58584: EQUAL
58585: AND
58586: IFFALSE 58607
// MinerPlaceMine ( unit , x , y ) ;
58588: LD_VAR 0 2
58592: PPUSH
58593: LD_VAR 0 4
58597: PPUSH
58598: LD_VAR 0 5
58602: PPUSH
58603: CALL 60956 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58607: LD_VAR 0 1
58611: PUSH
58612: LD_INT 251
58614: EQUAL
58615: PUSH
58616: LD_VAR 0 2
58620: PPUSH
58621: CALL_OW 264
58625: PUSH
58626: LD_EXP 133
58630: EQUAL
58631: AND
58632: IFFALSE 58653
// MinerDetonateMine ( unit , x , y ) ;
58634: LD_VAR 0 2
58638: PPUSH
58639: LD_VAR 0 4
58643: PPUSH
58644: LD_VAR 0 5
58648: PPUSH
58649: CALL 61233 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58653: LD_VAR 0 1
58657: PUSH
58658: LD_INT 252
58660: EQUAL
58661: PUSH
58662: LD_VAR 0 2
58666: PPUSH
58667: CALL_OW 264
58671: PUSH
58672: LD_EXP 133
58676: EQUAL
58677: AND
58678: IFFALSE 58699
// MinerCreateMinefield ( unit , x , y ) ;
58680: LD_VAR 0 2
58684: PPUSH
58685: LD_VAR 0 4
58689: PPUSH
58690: LD_VAR 0 5
58694: PPUSH
58695: CALL 61650 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58699: LD_VAR 0 1
58703: PUSH
58704: LD_INT 253
58706: EQUAL
58707: PUSH
58708: LD_VAR 0 2
58712: PPUSH
58713: CALL_OW 257
58717: PUSH
58718: LD_INT 5
58720: EQUAL
58721: AND
58722: IFFALSE 58743
// ComBinocular ( unit , x , y ) ;
58724: LD_VAR 0 2
58728: PPUSH
58729: LD_VAR 0 4
58733: PPUSH
58734: LD_VAR 0 5
58738: PPUSH
58739: CALL 62021 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58743: LD_VAR 0 1
58747: PUSH
58748: LD_INT 254
58750: EQUAL
58751: PUSH
58752: LD_VAR 0 2
58756: PPUSH
58757: CALL_OW 264
58761: PUSH
58762: LD_EXP 128
58766: EQUAL
58767: AND
58768: PUSH
58769: LD_VAR 0 3
58773: PPUSH
58774: CALL_OW 263
58778: PUSH
58779: LD_INT 3
58781: EQUAL
58782: AND
58783: IFFALSE 58799
// HackDestroyVehicle ( unit , selectedUnit ) ;
58785: LD_VAR 0 2
58789: PPUSH
58790: LD_VAR 0 3
58794: PPUSH
58795: CALL 60316 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58799: LD_VAR 0 1
58803: PUSH
58804: LD_INT 255
58806: EQUAL
58807: PUSH
58808: LD_VAR 0 2
58812: PPUSH
58813: CALL_OW 264
58817: PUSH
58818: LD_INT 14
58820: PUSH
58821: LD_INT 53
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: IN
58828: AND
58829: PUSH
58830: LD_VAR 0 4
58834: PPUSH
58835: LD_VAR 0 5
58839: PPUSH
58840: CALL_OW 488
58844: AND
58845: IFFALSE 58869
// CutTreeXYR ( unit , x , y , 12 ) ;
58847: LD_VAR 0 2
58851: PPUSH
58852: LD_VAR 0 4
58856: PPUSH
58857: LD_VAR 0 5
58861: PPUSH
58862: LD_INT 12
58864: PPUSH
58865: CALL 58882 0 4
// end ;
58869: LD_VAR 0 6
58873: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
58874: LD_INT 0
58876: PPUSH
// end ;
58877: LD_VAR 0 4
58881: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58882: LD_INT 0
58884: PPUSH
58885: PPUSH
58886: PPUSH
58887: PPUSH
58888: PPUSH
58889: PPUSH
58890: PPUSH
58891: PPUSH
58892: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
58893: LD_VAR 0 1
58897: NOT
58898: PUSH
58899: LD_VAR 0 2
58903: PPUSH
58904: LD_VAR 0 3
58908: PPUSH
58909: CALL_OW 488
58913: NOT
58914: OR
58915: PUSH
58916: LD_VAR 0 4
58920: NOT
58921: OR
58922: IFFALSE 58926
// exit ;
58924: GO 59266
// list := [ ] ;
58926: LD_ADDR_VAR 0 13
58930: PUSH
58931: EMPTY
58932: ST_TO_ADDR
// if x - r < 0 then
58933: LD_VAR 0 2
58937: PUSH
58938: LD_VAR 0 4
58942: MINUS
58943: PUSH
58944: LD_INT 0
58946: LESS
58947: IFFALSE 58959
// min_x := 0 else
58949: LD_ADDR_VAR 0 7
58953: PUSH
58954: LD_INT 0
58956: ST_TO_ADDR
58957: GO 58975
// min_x := x - r ;
58959: LD_ADDR_VAR 0 7
58963: PUSH
58964: LD_VAR 0 2
58968: PUSH
58969: LD_VAR 0 4
58973: MINUS
58974: ST_TO_ADDR
// if y - r < 0 then
58975: LD_VAR 0 3
58979: PUSH
58980: LD_VAR 0 4
58984: MINUS
58985: PUSH
58986: LD_INT 0
58988: LESS
58989: IFFALSE 59001
// min_y := 0 else
58991: LD_ADDR_VAR 0 8
58995: PUSH
58996: LD_INT 0
58998: ST_TO_ADDR
58999: GO 59017
// min_y := y - r ;
59001: LD_ADDR_VAR 0 8
59005: PUSH
59006: LD_VAR 0 3
59010: PUSH
59011: LD_VAR 0 4
59015: MINUS
59016: ST_TO_ADDR
// max_x := x + r ;
59017: LD_ADDR_VAR 0 9
59021: PUSH
59022: LD_VAR 0 2
59026: PUSH
59027: LD_VAR 0 4
59031: PLUS
59032: ST_TO_ADDR
// max_y := y + r ;
59033: LD_ADDR_VAR 0 10
59037: PUSH
59038: LD_VAR 0 3
59042: PUSH
59043: LD_VAR 0 4
59047: PLUS
59048: ST_TO_ADDR
// for _x = min_x to max_x do
59049: LD_ADDR_VAR 0 11
59053: PUSH
59054: DOUBLE
59055: LD_VAR 0 7
59059: DEC
59060: ST_TO_ADDR
59061: LD_VAR 0 9
59065: PUSH
59066: FOR_TO
59067: IFFALSE 59184
// for _y = min_y to max_y do
59069: LD_ADDR_VAR 0 12
59073: PUSH
59074: DOUBLE
59075: LD_VAR 0 8
59079: DEC
59080: ST_TO_ADDR
59081: LD_VAR 0 10
59085: PUSH
59086: FOR_TO
59087: IFFALSE 59180
// begin if not ValidHex ( _x , _y ) then
59089: LD_VAR 0 11
59093: PPUSH
59094: LD_VAR 0 12
59098: PPUSH
59099: CALL_OW 488
59103: NOT
59104: IFFALSE 59108
// continue ;
59106: GO 59086
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59108: LD_VAR 0 11
59112: PPUSH
59113: LD_VAR 0 12
59117: PPUSH
59118: CALL_OW 351
59122: PUSH
59123: LD_VAR 0 11
59127: PPUSH
59128: LD_VAR 0 12
59132: PPUSH
59133: CALL_OW 554
59137: AND
59138: IFFALSE 59178
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59140: LD_ADDR_VAR 0 13
59144: PUSH
59145: LD_VAR 0 13
59149: PPUSH
59150: LD_VAR 0 13
59154: PUSH
59155: LD_INT 1
59157: PLUS
59158: PPUSH
59159: LD_VAR 0 11
59163: PUSH
59164: LD_VAR 0 12
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PPUSH
59173: CALL_OW 2
59177: ST_TO_ADDR
// end ;
59178: GO 59086
59180: POP
59181: POP
59182: GO 59066
59184: POP
59185: POP
// if not list then
59186: LD_VAR 0 13
59190: NOT
59191: IFFALSE 59195
// exit ;
59193: GO 59266
// for i in list do
59195: LD_ADDR_VAR 0 6
59199: PUSH
59200: LD_VAR 0 13
59204: PUSH
59205: FOR_IN
59206: IFFALSE 59264
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59208: LD_VAR 0 1
59212: PPUSH
59213: LD_STRING M
59215: PUSH
59216: LD_VAR 0 6
59220: PUSH
59221: LD_INT 1
59223: ARRAY
59224: PUSH
59225: LD_VAR 0 6
59229: PUSH
59230: LD_INT 2
59232: ARRAY
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: PUSH
59255: EMPTY
59256: LIST
59257: PPUSH
59258: CALL_OW 447
59262: GO 59205
59264: POP
59265: POP
// end ;
59266: LD_VAR 0 5
59270: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59271: LD_EXP 61
59275: NOT
59276: IFFALSE 59326
59278: GO 59280
59280: DISABLE
// begin initHack := true ;
59281: LD_ADDR_EXP 61
59285: PUSH
59286: LD_INT 1
59288: ST_TO_ADDR
// hackTanks := [ ] ;
59289: LD_ADDR_EXP 62
59293: PUSH
59294: EMPTY
59295: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59296: LD_ADDR_EXP 63
59300: PUSH
59301: EMPTY
59302: ST_TO_ADDR
// hackLimit := 3 ;
59303: LD_ADDR_EXP 64
59307: PUSH
59308: LD_INT 3
59310: ST_TO_ADDR
// hackDist := 12 ;
59311: LD_ADDR_EXP 65
59315: PUSH
59316: LD_INT 12
59318: ST_TO_ADDR
// hackCounter := [ ] ;
59319: LD_ADDR_EXP 66
59323: PUSH
59324: EMPTY
59325: ST_TO_ADDR
// end ;
59326: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59327: LD_EXP 61
59331: PUSH
59332: LD_INT 34
59334: PUSH
59335: LD_EXP 128
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PPUSH
59344: CALL_OW 69
59348: AND
59349: IFFALSE 59604
59351: GO 59353
59353: DISABLE
59354: LD_INT 0
59356: PPUSH
59357: PPUSH
// begin enable ;
59358: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59359: LD_ADDR_VAR 0 1
59363: PUSH
59364: LD_INT 34
59366: PUSH
59367: LD_EXP 128
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PPUSH
59376: CALL_OW 69
59380: PUSH
59381: FOR_IN
59382: IFFALSE 59602
// begin if not i in hackTanks then
59384: LD_VAR 0 1
59388: PUSH
59389: LD_EXP 62
59393: IN
59394: NOT
59395: IFFALSE 59478
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59397: LD_ADDR_EXP 62
59401: PUSH
59402: LD_EXP 62
59406: PPUSH
59407: LD_EXP 62
59411: PUSH
59412: LD_INT 1
59414: PLUS
59415: PPUSH
59416: LD_VAR 0 1
59420: PPUSH
59421: CALL_OW 1
59425: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59426: LD_ADDR_EXP 63
59430: PUSH
59431: LD_EXP 63
59435: PPUSH
59436: LD_EXP 63
59440: PUSH
59441: LD_INT 1
59443: PLUS
59444: PPUSH
59445: EMPTY
59446: PPUSH
59447: CALL_OW 1
59451: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59452: LD_ADDR_EXP 66
59456: PUSH
59457: LD_EXP 66
59461: PPUSH
59462: LD_EXP 66
59466: PUSH
59467: LD_INT 1
59469: PLUS
59470: PPUSH
59471: EMPTY
59472: PPUSH
59473: CALL_OW 1
59477: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59478: LD_VAR 0 1
59482: PPUSH
59483: CALL_OW 302
59487: NOT
59488: IFFALSE 59501
// begin HackUnlinkAll ( i ) ;
59490: LD_VAR 0 1
59494: PPUSH
59495: CALL 59607 0 1
// continue ;
59499: GO 59381
// end ; HackCheckCapturedStatus ( i ) ;
59501: LD_VAR 0 1
59505: PPUSH
59506: CALL 60050 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59510: LD_ADDR_VAR 0 2
59514: PUSH
59515: LD_INT 81
59517: PUSH
59518: LD_VAR 0 1
59522: PPUSH
59523: CALL_OW 255
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 33
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 91
59544: PUSH
59545: LD_VAR 0 1
59549: PUSH
59550: LD_EXP 65
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 50
59562: PUSH
59563: EMPTY
59564: LIST
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: PPUSH
59572: CALL_OW 69
59576: ST_TO_ADDR
// if not tmp then
59577: LD_VAR 0 2
59581: NOT
59582: IFFALSE 59586
// continue ;
59584: GO 59381
// HackLink ( i , tmp ) ;
59586: LD_VAR 0 1
59590: PPUSH
59591: LD_VAR 0 2
59595: PPUSH
59596: CALL 59743 0 2
// end ;
59600: GO 59381
59602: POP
59603: POP
// end ;
59604: PPOPN 2
59606: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59607: LD_INT 0
59609: PPUSH
59610: PPUSH
59611: PPUSH
// if not hack in hackTanks then
59612: LD_VAR 0 1
59616: PUSH
59617: LD_EXP 62
59621: IN
59622: NOT
59623: IFFALSE 59627
// exit ;
59625: GO 59738
// index := GetElementIndex ( hackTanks , hack ) ;
59627: LD_ADDR_VAR 0 4
59631: PUSH
59632: LD_EXP 62
59636: PPUSH
59637: LD_VAR 0 1
59641: PPUSH
59642: CALL 25953 0 2
59646: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59647: LD_EXP 63
59651: PUSH
59652: LD_VAR 0 4
59656: ARRAY
59657: IFFALSE 59738
// begin for i in hackTanksCaptured [ index ] do
59659: LD_ADDR_VAR 0 3
59663: PUSH
59664: LD_EXP 63
59668: PUSH
59669: LD_VAR 0 4
59673: ARRAY
59674: PUSH
59675: FOR_IN
59676: IFFALSE 59702
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59678: LD_VAR 0 3
59682: PUSH
59683: LD_INT 1
59685: ARRAY
59686: PPUSH
59687: LD_VAR 0 3
59691: PUSH
59692: LD_INT 2
59694: ARRAY
59695: PPUSH
59696: CALL_OW 235
59700: GO 59675
59702: POP
59703: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59704: LD_ADDR_EXP 63
59708: PUSH
59709: LD_EXP 63
59713: PPUSH
59714: LD_VAR 0 4
59718: PPUSH
59719: EMPTY
59720: PPUSH
59721: CALL_OW 1
59725: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59726: LD_VAR 0 1
59730: PPUSH
59731: LD_INT 0
59733: PPUSH
59734: CALL_OW 505
// end ; end ;
59738: LD_VAR 0 2
59742: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59743: LD_INT 0
59745: PPUSH
59746: PPUSH
59747: PPUSH
// if not hack in hackTanks or not vehicles then
59748: LD_VAR 0 1
59752: PUSH
59753: LD_EXP 62
59757: IN
59758: NOT
59759: PUSH
59760: LD_VAR 0 2
59764: NOT
59765: OR
59766: IFFALSE 59770
// exit ;
59768: GO 60045
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59770: LD_ADDR_VAR 0 2
59774: PUSH
59775: LD_VAR 0 1
59779: PPUSH
59780: LD_VAR 0 2
59784: PPUSH
59785: LD_INT 1
59787: PPUSH
59788: LD_INT 1
59790: PPUSH
59791: CALL 26603 0 4
59795: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59796: LD_ADDR_VAR 0 5
59800: PUSH
59801: LD_EXP 62
59805: PPUSH
59806: LD_VAR 0 1
59810: PPUSH
59811: CALL 25953 0 2
59815: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59816: LD_EXP 63
59820: PUSH
59821: LD_VAR 0 5
59825: ARRAY
59826: PUSH
59827: LD_EXP 64
59831: LESS
59832: IFFALSE 60021
// begin for i := 1 to vehicles do
59834: LD_ADDR_VAR 0 4
59838: PUSH
59839: DOUBLE
59840: LD_INT 1
59842: DEC
59843: ST_TO_ADDR
59844: LD_VAR 0 2
59848: PUSH
59849: FOR_TO
59850: IFFALSE 60019
// begin if hackTanksCaptured [ index ] = hackLimit then
59852: LD_EXP 63
59856: PUSH
59857: LD_VAR 0 5
59861: ARRAY
59862: PUSH
59863: LD_EXP 64
59867: EQUAL
59868: IFFALSE 59872
// break ;
59870: GO 60019
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59872: LD_ADDR_EXP 66
59876: PUSH
59877: LD_EXP 66
59881: PPUSH
59882: LD_VAR 0 5
59886: PPUSH
59887: LD_EXP 66
59891: PUSH
59892: LD_VAR 0 5
59896: ARRAY
59897: PUSH
59898: LD_INT 1
59900: PLUS
59901: PPUSH
59902: CALL_OW 1
59906: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59907: LD_ADDR_EXP 63
59911: PUSH
59912: LD_EXP 63
59916: PPUSH
59917: LD_VAR 0 5
59921: PUSH
59922: LD_EXP 63
59926: PUSH
59927: LD_VAR 0 5
59931: ARRAY
59932: PUSH
59933: LD_INT 1
59935: PLUS
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PPUSH
59941: LD_VAR 0 2
59945: PUSH
59946: LD_VAR 0 4
59950: ARRAY
59951: PUSH
59952: LD_VAR 0 2
59956: PUSH
59957: LD_VAR 0 4
59961: ARRAY
59962: PPUSH
59963: CALL_OW 255
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PPUSH
59972: CALL 26168 0 3
59976: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59977: LD_VAR 0 2
59981: PUSH
59982: LD_VAR 0 4
59986: ARRAY
59987: PPUSH
59988: LD_VAR 0 1
59992: PPUSH
59993: CALL_OW 255
59997: PPUSH
59998: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60002: LD_VAR 0 2
60006: PUSH
60007: LD_VAR 0 4
60011: ARRAY
60012: PPUSH
60013: CALL_OW 141
// end ;
60017: GO 59849
60019: POP
60020: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60021: LD_VAR 0 1
60025: PPUSH
60026: LD_EXP 63
60030: PUSH
60031: LD_VAR 0 5
60035: ARRAY
60036: PUSH
60037: LD_INT 0
60039: PLUS
60040: PPUSH
60041: CALL_OW 505
// end ;
60045: LD_VAR 0 3
60049: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60050: LD_INT 0
60052: PPUSH
60053: PPUSH
60054: PPUSH
60055: PPUSH
// if not hack in hackTanks then
60056: LD_VAR 0 1
60060: PUSH
60061: LD_EXP 62
60065: IN
60066: NOT
60067: IFFALSE 60071
// exit ;
60069: GO 60311
// index := GetElementIndex ( hackTanks , hack ) ;
60071: LD_ADDR_VAR 0 4
60075: PUSH
60076: LD_EXP 62
60080: PPUSH
60081: LD_VAR 0 1
60085: PPUSH
60086: CALL 25953 0 2
60090: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60091: LD_ADDR_VAR 0 3
60095: PUSH
60096: DOUBLE
60097: LD_EXP 63
60101: PUSH
60102: LD_VAR 0 4
60106: ARRAY
60107: INC
60108: ST_TO_ADDR
60109: LD_INT 1
60111: PUSH
60112: FOR_DOWNTO
60113: IFFALSE 60285
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60115: LD_ADDR_VAR 0 5
60119: PUSH
60120: LD_EXP 63
60124: PUSH
60125: LD_VAR 0 4
60129: ARRAY
60130: PUSH
60131: LD_VAR 0 3
60135: ARRAY
60136: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60137: LD_VAR 0 5
60141: PUSH
60142: LD_INT 1
60144: ARRAY
60145: PPUSH
60146: CALL_OW 302
60150: NOT
60151: PUSH
60152: LD_VAR 0 5
60156: PUSH
60157: LD_INT 1
60159: ARRAY
60160: PPUSH
60161: CALL_OW 255
60165: PUSH
60166: LD_VAR 0 1
60170: PPUSH
60171: CALL_OW 255
60175: NONEQUAL
60176: OR
60177: IFFALSE 60283
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60179: LD_VAR 0 5
60183: PUSH
60184: LD_INT 1
60186: ARRAY
60187: PPUSH
60188: CALL_OW 305
60192: PUSH
60193: LD_VAR 0 5
60197: PUSH
60198: LD_INT 1
60200: ARRAY
60201: PPUSH
60202: CALL_OW 255
60206: PUSH
60207: LD_VAR 0 1
60211: PPUSH
60212: CALL_OW 255
60216: EQUAL
60217: AND
60218: IFFALSE 60242
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60220: LD_VAR 0 5
60224: PUSH
60225: LD_INT 1
60227: ARRAY
60228: PPUSH
60229: LD_VAR 0 5
60233: PUSH
60234: LD_INT 2
60236: ARRAY
60237: PPUSH
60238: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60242: LD_ADDR_EXP 63
60246: PUSH
60247: LD_EXP 63
60251: PPUSH
60252: LD_VAR 0 4
60256: PPUSH
60257: LD_EXP 63
60261: PUSH
60262: LD_VAR 0 4
60266: ARRAY
60267: PPUSH
60268: LD_VAR 0 3
60272: PPUSH
60273: CALL_OW 3
60277: PPUSH
60278: CALL_OW 1
60282: ST_TO_ADDR
// end ; end ;
60283: GO 60112
60285: POP
60286: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60287: LD_VAR 0 1
60291: PPUSH
60292: LD_EXP 63
60296: PUSH
60297: LD_VAR 0 4
60301: ARRAY
60302: PUSH
60303: LD_INT 0
60305: PLUS
60306: PPUSH
60307: CALL_OW 505
// end ;
60311: LD_VAR 0 2
60315: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60316: LD_INT 0
60318: PPUSH
60319: PPUSH
60320: PPUSH
60321: PPUSH
// if not hack in hackTanks then
60322: LD_VAR 0 1
60326: PUSH
60327: LD_EXP 62
60331: IN
60332: NOT
60333: IFFALSE 60337
// exit ;
60335: GO 60422
// index := GetElementIndex ( hackTanks , hack ) ;
60337: LD_ADDR_VAR 0 5
60341: PUSH
60342: LD_EXP 62
60346: PPUSH
60347: LD_VAR 0 1
60351: PPUSH
60352: CALL 25953 0 2
60356: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60357: LD_ADDR_VAR 0 4
60361: PUSH
60362: DOUBLE
60363: LD_INT 1
60365: DEC
60366: ST_TO_ADDR
60367: LD_EXP 63
60371: PUSH
60372: LD_VAR 0 5
60376: ARRAY
60377: PUSH
60378: FOR_TO
60379: IFFALSE 60420
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60381: LD_EXP 63
60385: PUSH
60386: LD_VAR 0 5
60390: ARRAY
60391: PUSH
60392: LD_VAR 0 4
60396: ARRAY
60397: PUSH
60398: LD_INT 1
60400: ARRAY
60401: PUSH
60402: LD_VAR 0 2
60406: EQUAL
60407: IFFALSE 60418
// KillUnit ( vehicle ) ;
60409: LD_VAR 0 2
60413: PPUSH
60414: CALL_OW 66
60418: GO 60378
60420: POP
60421: POP
// end ;
60422: LD_VAR 0 3
60426: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
60427: LD_EXP 67
60431: NOT
60432: IFFALSE 60467
60434: GO 60436
60436: DISABLE
// begin initMiner := true ;
60437: LD_ADDR_EXP 67
60441: PUSH
60442: LD_INT 1
60444: ST_TO_ADDR
// minersList := [ ] ;
60445: LD_ADDR_EXP 68
60449: PUSH
60450: EMPTY
60451: ST_TO_ADDR
// minerMinesList := [ ] ;
60452: LD_ADDR_EXP 69
60456: PUSH
60457: EMPTY
60458: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
60459: LD_ADDR_EXP 70
60463: PUSH
60464: LD_INT 5
60466: ST_TO_ADDR
// end ;
60467: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
60468: LD_EXP 67
60472: PUSH
60473: LD_INT 34
60475: PUSH
60476: LD_EXP 133
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PPUSH
60485: CALL_OW 69
60489: AND
60490: IFFALSE 60953
60492: GO 60494
60494: DISABLE
60495: LD_INT 0
60497: PPUSH
60498: PPUSH
60499: PPUSH
60500: PPUSH
// begin enable ;
60501: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60502: LD_ADDR_VAR 0 1
60506: PUSH
60507: LD_INT 34
60509: PUSH
60510: LD_EXP 133
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PPUSH
60519: CALL_OW 69
60523: PUSH
60524: FOR_IN
60525: IFFALSE 60597
// begin if not i in minersList then
60527: LD_VAR 0 1
60531: PUSH
60532: LD_EXP 68
60536: IN
60537: NOT
60538: IFFALSE 60595
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60540: LD_ADDR_EXP 68
60544: PUSH
60545: LD_EXP 68
60549: PPUSH
60550: LD_EXP 68
60554: PUSH
60555: LD_INT 1
60557: PLUS
60558: PPUSH
60559: LD_VAR 0 1
60563: PPUSH
60564: CALL_OW 1
60568: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60569: LD_ADDR_EXP 69
60573: PUSH
60574: LD_EXP 69
60578: PPUSH
60579: LD_EXP 69
60583: PUSH
60584: LD_INT 1
60586: PLUS
60587: PPUSH
60588: EMPTY
60589: PPUSH
60590: CALL_OW 1
60594: ST_TO_ADDR
// end end ;
60595: GO 60524
60597: POP
60598: POP
// for i := minerMinesList downto 1 do
60599: LD_ADDR_VAR 0 1
60603: PUSH
60604: DOUBLE
60605: LD_EXP 69
60609: INC
60610: ST_TO_ADDR
60611: LD_INT 1
60613: PUSH
60614: FOR_DOWNTO
60615: IFFALSE 60951
// begin if IsLive ( minersList [ i ] ) then
60617: LD_EXP 68
60621: PUSH
60622: LD_VAR 0 1
60626: ARRAY
60627: PPUSH
60628: CALL_OW 300
60632: IFFALSE 60660
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
60634: LD_EXP 68
60638: PUSH
60639: LD_VAR 0 1
60643: ARRAY
60644: PPUSH
60645: LD_EXP 69
60649: PUSH
60650: LD_VAR 0 1
60654: ARRAY
60655: PPUSH
60656: CALL_OW 505
// if not minerMinesList [ i ] then
60660: LD_EXP 69
60664: PUSH
60665: LD_VAR 0 1
60669: ARRAY
60670: NOT
60671: IFFALSE 60675
// continue ;
60673: GO 60614
// for j := minerMinesList [ i ] downto 1 do
60675: LD_ADDR_VAR 0 2
60679: PUSH
60680: DOUBLE
60681: LD_EXP 69
60685: PUSH
60686: LD_VAR 0 1
60690: ARRAY
60691: INC
60692: ST_TO_ADDR
60693: LD_INT 1
60695: PUSH
60696: FOR_DOWNTO
60697: IFFALSE 60947
// begin side := GetSide ( minersList [ i ] ) ;
60699: LD_ADDR_VAR 0 3
60703: PUSH
60704: LD_EXP 68
60708: PUSH
60709: LD_VAR 0 1
60713: ARRAY
60714: PPUSH
60715: CALL_OW 255
60719: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60720: LD_ADDR_VAR 0 4
60724: PUSH
60725: LD_EXP 69
60729: PUSH
60730: LD_VAR 0 1
60734: ARRAY
60735: PUSH
60736: LD_VAR 0 2
60740: ARRAY
60741: PUSH
60742: LD_INT 1
60744: ARRAY
60745: PPUSH
60746: LD_EXP 69
60750: PUSH
60751: LD_VAR 0 1
60755: ARRAY
60756: PUSH
60757: LD_VAR 0 2
60761: ARRAY
60762: PUSH
60763: LD_INT 2
60765: ARRAY
60766: PPUSH
60767: CALL_OW 428
60771: ST_TO_ADDR
// if not tmp then
60772: LD_VAR 0 4
60776: NOT
60777: IFFALSE 60781
// continue ;
60779: GO 60696
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60781: LD_VAR 0 4
60785: PUSH
60786: LD_INT 81
60788: PUSH
60789: LD_VAR 0 3
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PPUSH
60798: CALL_OW 69
60802: IN
60803: PUSH
60804: LD_EXP 69
60808: PUSH
60809: LD_VAR 0 1
60813: ARRAY
60814: PUSH
60815: LD_VAR 0 2
60819: ARRAY
60820: PUSH
60821: LD_INT 1
60823: ARRAY
60824: PPUSH
60825: LD_EXP 69
60829: PUSH
60830: LD_VAR 0 1
60834: ARRAY
60835: PUSH
60836: LD_VAR 0 2
60840: ARRAY
60841: PUSH
60842: LD_INT 2
60844: ARRAY
60845: PPUSH
60846: CALL_OW 458
60850: AND
60851: IFFALSE 60945
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60853: LD_EXP 69
60857: PUSH
60858: LD_VAR 0 1
60862: ARRAY
60863: PUSH
60864: LD_VAR 0 2
60868: ARRAY
60869: PUSH
60870: LD_INT 1
60872: ARRAY
60873: PPUSH
60874: LD_EXP 69
60878: PUSH
60879: LD_VAR 0 1
60883: ARRAY
60884: PUSH
60885: LD_VAR 0 2
60889: ARRAY
60890: PUSH
60891: LD_INT 2
60893: ARRAY
60894: PPUSH
60895: LD_VAR 0 3
60899: PPUSH
60900: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60904: LD_ADDR_EXP 69
60908: PUSH
60909: LD_EXP 69
60913: PPUSH
60914: LD_VAR 0 1
60918: PPUSH
60919: LD_EXP 69
60923: PUSH
60924: LD_VAR 0 1
60928: ARRAY
60929: PPUSH
60930: LD_VAR 0 2
60934: PPUSH
60935: CALL_OW 3
60939: PPUSH
60940: CALL_OW 1
60944: ST_TO_ADDR
// end ; end ;
60945: GO 60696
60947: POP
60948: POP
// end ;
60949: GO 60614
60951: POP
60952: POP
// end ;
60953: PPOPN 4
60955: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60956: LD_INT 0
60958: PPUSH
60959: PPUSH
// result := false ;
60960: LD_ADDR_VAR 0 4
60964: PUSH
60965: LD_INT 0
60967: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60968: LD_VAR 0 1
60972: PPUSH
60973: CALL_OW 264
60977: PUSH
60978: LD_EXP 133
60982: EQUAL
60983: NOT
60984: IFFALSE 60988
// exit ;
60986: GO 61228
// index := GetElementIndex ( minersList , unit ) ;
60988: LD_ADDR_VAR 0 5
60992: PUSH
60993: LD_EXP 68
60997: PPUSH
60998: LD_VAR 0 1
61002: PPUSH
61003: CALL 25953 0 2
61007: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61008: LD_EXP 69
61012: PUSH
61013: LD_VAR 0 5
61017: ARRAY
61018: PUSH
61019: LD_EXP 70
61023: GREATEREQUAL
61024: IFFALSE 61028
// exit ;
61026: GO 61228
// ComMoveXY ( unit , x , y ) ;
61028: LD_VAR 0 1
61032: PPUSH
61033: LD_VAR 0 2
61037: PPUSH
61038: LD_VAR 0 3
61042: PPUSH
61043: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61047: LD_INT 35
61049: PPUSH
61050: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61054: LD_VAR 0 1
61058: PPUSH
61059: LD_VAR 0 2
61063: PPUSH
61064: LD_VAR 0 3
61068: PPUSH
61069: CALL 56017 0 3
61073: NOT
61074: PUSH
61075: LD_VAR 0 1
61079: PPUSH
61080: CALL_OW 314
61084: AND
61085: IFFALSE 61089
// exit ;
61087: GO 61228
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61089: LD_VAR 0 2
61093: PPUSH
61094: LD_VAR 0 3
61098: PPUSH
61099: CALL_OW 428
61103: PUSH
61104: LD_VAR 0 1
61108: EQUAL
61109: PUSH
61110: LD_VAR 0 1
61114: PPUSH
61115: CALL_OW 314
61119: NOT
61120: AND
61121: IFFALSE 61047
// PlaySoundXY ( x , y , PlantMine ) ;
61123: LD_VAR 0 2
61127: PPUSH
61128: LD_VAR 0 3
61132: PPUSH
61133: LD_STRING PlantMine
61135: PPUSH
61136: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
61140: LD_VAR 0 2
61144: PPUSH
61145: LD_VAR 0 3
61149: PPUSH
61150: LD_VAR 0 1
61154: PPUSH
61155: CALL_OW 255
61159: PPUSH
61160: LD_INT 0
61162: PPUSH
61163: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61167: LD_ADDR_EXP 69
61171: PUSH
61172: LD_EXP 69
61176: PPUSH
61177: LD_VAR 0 5
61181: PUSH
61182: LD_EXP 69
61186: PUSH
61187: LD_VAR 0 5
61191: ARRAY
61192: PUSH
61193: LD_INT 1
61195: PLUS
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PPUSH
61201: LD_VAR 0 2
61205: PUSH
61206: LD_VAR 0 3
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PPUSH
61215: CALL 26168 0 3
61219: ST_TO_ADDR
// result := true ;
61220: LD_ADDR_VAR 0 4
61224: PUSH
61225: LD_INT 1
61227: ST_TO_ADDR
// end ;
61228: LD_VAR 0 4
61232: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61233: LD_INT 0
61235: PPUSH
61236: PPUSH
61237: PPUSH
// if not unit in minersList then
61238: LD_VAR 0 1
61242: PUSH
61243: LD_EXP 68
61247: IN
61248: NOT
61249: IFFALSE 61253
// exit ;
61251: GO 61645
// index := GetElementIndex ( minersList , unit ) ;
61253: LD_ADDR_VAR 0 6
61257: PUSH
61258: LD_EXP 68
61262: PPUSH
61263: LD_VAR 0 1
61267: PPUSH
61268: CALL 25953 0 2
61272: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61273: LD_ADDR_VAR 0 5
61277: PUSH
61278: DOUBLE
61279: LD_EXP 69
61283: PUSH
61284: LD_VAR 0 6
61288: ARRAY
61289: INC
61290: ST_TO_ADDR
61291: LD_INT 1
61293: PUSH
61294: FOR_DOWNTO
61295: IFFALSE 61456
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
61297: LD_EXP 69
61301: PUSH
61302: LD_VAR 0 6
61306: ARRAY
61307: PUSH
61308: LD_VAR 0 5
61312: ARRAY
61313: PUSH
61314: LD_INT 1
61316: ARRAY
61317: PUSH
61318: LD_VAR 0 2
61322: EQUAL
61323: PUSH
61324: LD_EXP 69
61328: PUSH
61329: LD_VAR 0 6
61333: ARRAY
61334: PUSH
61335: LD_VAR 0 5
61339: ARRAY
61340: PUSH
61341: LD_INT 2
61343: ARRAY
61344: PUSH
61345: LD_VAR 0 3
61349: EQUAL
61350: AND
61351: IFFALSE 61454
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61353: LD_EXP 69
61357: PUSH
61358: LD_VAR 0 6
61362: ARRAY
61363: PUSH
61364: LD_VAR 0 5
61368: ARRAY
61369: PUSH
61370: LD_INT 1
61372: ARRAY
61373: PPUSH
61374: LD_EXP 69
61378: PUSH
61379: LD_VAR 0 6
61383: ARRAY
61384: PUSH
61385: LD_VAR 0 5
61389: ARRAY
61390: PUSH
61391: LD_INT 2
61393: ARRAY
61394: PPUSH
61395: LD_VAR 0 1
61399: PPUSH
61400: CALL_OW 255
61404: PPUSH
61405: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61409: LD_ADDR_EXP 69
61413: PUSH
61414: LD_EXP 69
61418: PPUSH
61419: LD_VAR 0 6
61423: PPUSH
61424: LD_EXP 69
61428: PUSH
61429: LD_VAR 0 6
61433: ARRAY
61434: PPUSH
61435: LD_VAR 0 5
61439: PPUSH
61440: CALL_OW 3
61444: PPUSH
61445: CALL_OW 1
61449: ST_TO_ADDR
// exit ;
61450: POP
61451: POP
61452: GO 61645
// end ; end ;
61454: GO 61294
61456: POP
61457: POP
// for i := minerMinesList [ index ] downto 1 do
61458: LD_ADDR_VAR 0 5
61462: PUSH
61463: DOUBLE
61464: LD_EXP 69
61468: PUSH
61469: LD_VAR 0 6
61473: ARRAY
61474: INC
61475: ST_TO_ADDR
61476: LD_INT 1
61478: PUSH
61479: FOR_DOWNTO
61480: IFFALSE 61643
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61482: LD_EXP 69
61486: PUSH
61487: LD_VAR 0 6
61491: ARRAY
61492: PUSH
61493: LD_VAR 0 5
61497: ARRAY
61498: PUSH
61499: LD_INT 1
61501: ARRAY
61502: PPUSH
61503: LD_EXP 69
61507: PUSH
61508: LD_VAR 0 6
61512: ARRAY
61513: PUSH
61514: LD_VAR 0 5
61518: ARRAY
61519: PUSH
61520: LD_INT 2
61522: ARRAY
61523: PPUSH
61524: LD_VAR 0 2
61528: PPUSH
61529: LD_VAR 0 3
61533: PPUSH
61534: CALL_OW 298
61538: PUSH
61539: LD_INT 6
61541: LESS
61542: IFFALSE 61641
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61544: LD_EXP 69
61548: PUSH
61549: LD_VAR 0 6
61553: ARRAY
61554: PUSH
61555: LD_VAR 0 5
61559: ARRAY
61560: PUSH
61561: LD_INT 1
61563: ARRAY
61564: PPUSH
61565: LD_EXP 69
61569: PUSH
61570: LD_VAR 0 6
61574: ARRAY
61575: PUSH
61576: LD_VAR 0 5
61580: ARRAY
61581: PUSH
61582: LD_INT 2
61584: ARRAY
61585: PPUSH
61586: LD_VAR 0 1
61590: PPUSH
61591: CALL_OW 255
61595: PPUSH
61596: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61600: LD_ADDR_EXP 69
61604: PUSH
61605: LD_EXP 69
61609: PPUSH
61610: LD_VAR 0 6
61614: PPUSH
61615: LD_EXP 69
61619: PUSH
61620: LD_VAR 0 6
61624: ARRAY
61625: PPUSH
61626: LD_VAR 0 5
61630: PPUSH
61631: CALL_OW 3
61635: PPUSH
61636: CALL_OW 1
61640: ST_TO_ADDR
// end ; end ;
61641: GO 61479
61643: POP
61644: POP
// end ;
61645: LD_VAR 0 4
61649: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61650: LD_INT 0
61652: PPUSH
61653: PPUSH
61654: PPUSH
61655: PPUSH
61656: PPUSH
61657: PPUSH
61658: PPUSH
61659: PPUSH
61660: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61661: LD_VAR 0 1
61665: PPUSH
61666: CALL_OW 264
61670: PUSH
61671: LD_EXP 133
61675: EQUAL
61676: NOT
61677: PUSH
61678: LD_VAR 0 1
61682: PUSH
61683: LD_EXP 68
61687: IN
61688: NOT
61689: OR
61690: IFFALSE 61694
// exit ;
61692: GO 62016
// index := GetElementIndex ( minersList , unit ) ;
61694: LD_ADDR_VAR 0 6
61698: PUSH
61699: LD_EXP 68
61703: PPUSH
61704: LD_VAR 0 1
61708: PPUSH
61709: CALL 25953 0 2
61713: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61714: LD_ADDR_VAR 0 8
61718: PUSH
61719: LD_EXP 70
61723: PUSH
61724: LD_EXP 69
61728: PUSH
61729: LD_VAR 0 6
61733: ARRAY
61734: MINUS
61735: ST_TO_ADDR
// if not minesFreeAmount then
61736: LD_VAR 0 8
61740: NOT
61741: IFFALSE 61745
// exit ;
61743: GO 62016
// tmp := [ ] ;
61745: LD_ADDR_VAR 0 7
61749: PUSH
61750: EMPTY
61751: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61752: LD_ADDR_VAR 0 5
61756: PUSH
61757: DOUBLE
61758: LD_INT 1
61760: DEC
61761: ST_TO_ADDR
61762: LD_VAR 0 8
61766: PUSH
61767: FOR_TO
61768: IFFALSE 61963
// begin _d := rand ( 0 , 5 ) ;
61770: LD_ADDR_VAR 0 11
61774: PUSH
61775: LD_INT 0
61777: PPUSH
61778: LD_INT 5
61780: PPUSH
61781: CALL_OW 12
61785: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61786: LD_ADDR_VAR 0 12
61790: PUSH
61791: LD_INT 2
61793: PPUSH
61794: LD_INT 6
61796: PPUSH
61797: CALL_OW 12
61801: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61802: LD_ADDR_VAR 0 9
61806: PUSH
61807: LD_VAR 0 2
61811: PPUSH
61812: LD_VAR 0 11
61816: PPUSH
61817: LD_VAR 0 12
61821: PPUSH
61822: CALL_OW 272
61826: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61827: LD_ADDR_VAR 0 10
61831: PUSH
61832: LD_VAR 0 3
61836: PPUSH
61837: LD_VAR 0 11
61841: PPUSH
61842: LD_VAR 0 12
61846: PPUSH
61847: CALL_OW 273
61851: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61852: LD_VAR 0 9
61856: PPUSH
61857: LD_VAR 0 10
61861: PPUSH
61862: CALL_OW 488
61866: PUSH
61867: LD_VAR 0 9
61871: PUSH
61872: LD_VAR 0 10
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_VAR 0 7
61885: IN
61886: NOT
61887: AND
61888: PUSH
61889: LD_VAR 0 9
61893: PPUSH
61894: LD_VAR 0 10
61898: PPUSH
61899: CALL_OW 458
61903: NOT
61904: AND
61905: IFFALSE 61947
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61907: LD_ADDR_VAR 0 7
61911: PUSH
61912: LD_VAR 0 7
61916: PPUSH
61917: LD_VAR 0 7
61921: PUSH
61922: LD_INT 1
61924: PLUS
61925: PPUSH
61926: LD_VAR 0 9
61930: PUSH
61931: LD_VAR 0 10
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PPUSH
61940: CALL_OW 1
61944: ST_TO_ADDR
61945: GO 61961
// i := i - 1 ;
61947: LD_ADDR_VAR 0 5
61951: PUSH
61952: LD_VAR 0 5
61956: PUSH
61957: LD_INT 1
61959: MINUS
61960: ST_TO_ADDR
// end ;
61961: GO 61767
61963: POP
61964: POP
// for i in tmp do
61965: LD_ADDR_VAR 0 5
61969: PUSH
61970: LD_VAR 0 7
61974: PUSH
61975: FOR_IN
61976: IFFALSE 62014
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61978: LD_VAR 0 1
61982: PPUSH
61983: LD_VAR 0 5
61987: PUSH
61988: LD_INT 1
61990: ARRAY
61991: PPUSH
61992: LD_VAR 0 5
61996: PUSH
61997: LD_INT 2
61999: ARRAY
62000: PPUSH
62001: CALL 60956 0 3
62005: NOT
62006: IFFALSE 62012
// exit ;
62008: POP
62009: POP
62010: GO 62016
62012: GO 61975
62014: POP
62015: POP
// end ;
62016: LD_VAR 0 4
62020: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
62021: LD_INT 0
62023: PPUSH
62024: PPUSH
62025: PPUSH
62026: PPUSH
62027: PPUSH
62028: PPUSH
62029: PPUSH
// if not GetClass ( unit ) = class_sniper then
62030: LD_VAR 0 1
62034: PPUSH
62035: CALL_OW 257
62039: PUSH
62040: LD_INT 5
62042: EQUAL
62043: NOT
62044: IFFALSE 62048
// exit ;
62046: GO 62436
// dist := 8 ;
62048: LD_ADDR_VAR 0 5
62052: PUSH
62053: LD_INT 8
62055: ST_TO_ADDR
// viewRange := 12 ;
62056: LD_ADDR_VAR 0 7
62060: PUSH
62061: LD_INT 12
62063: ST_TO_ADDR
// side := GetSide ( unit ) ;
62064: LD_ADDR_VAR 0 6
62068: PUSH
62069: LD_VAR 0 1
62073: PPUSH
62074: CALL_OW 255
62078: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62079: LD_INT 61
62081: PPUSH
62082: LD_VAR 0 6
62086: PPUSH
62087: CALL_OW 321
62091: PUSH
62092: LD_INT 2
62094: EQUAL
62095: IFFALSE 62105
// viewRange := 16 ;
62097: LD_ADDR_VAR 0 7
62101: PUSH
62102: LD_INT 16
62104: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62105: LD_VAR 0 1
62109: PPUSH
62110: LD_VAR 0 2
62114: PPUSH
62115: LD_VAR 0 3
62119: PPUSH
62120: CALL_OW 297
62124: PUSH
62125: LD_VAR 0 5
62129: GREATER
62130: IFFALSE 62209
// begin ComMoveXY ( unit , x , y ) ;
62132: LD_VAR 0 1
62136: PPUSH
62137: LD_VAR 0 2
62141: PPUSH
62142: LD_VAR 0 3
62146: PPUSH
62147: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62151: LD_INT 35
62153: PPUSH
62154: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62158: LD_VAR 0 1
62162: PPUSH
62163: LD_VAR 0 2
62167: PPUSH
62168: LD_VAR 0 3
62172: PPUSH
62173: CALL 56017 0 3
62177: NOT
62178: IFFALSE 62182
// exit ;
62180: GO 62436
// until GetDistUnitXY ( unit , x , y ) < dist ;
62182: LD_VAR 0 1
62186: PPUSH
62187: LD_VAR 0 2
62191: PPUSH
62192: LD_VAR 0 3
62196: PPUSH
62197: CALL_OW 297
62201: PUSH
62202: LD_VAR 0 5
62206: LESS
62207: IFFALSE 62151
// end ; ComTurnXY ( unit , x , y ) ;
62209: LD_VAR 0 1
62213: PPUSH
62214: LD_VAR 0 2
62218: PPUSH
62219: LD_VAR 0 3
62223: PPUSH
62224: CALL_OW 118
// wait ( 5 ) ;
62228: LD_INT 5
62230: PPUSH
62231: CALL_OW 67
// _d := GetDir ( unit ) ;
62235: LD_ADDR_VAR 0 10
62239: PUSH
62240: LD_VAR 0 1
62244: PPUSH
62245: CALL_OW 254
62249: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
62250: LD_ADDR_VAR 0 8
62254: PUSH
62255: LD_VAR 0 1
62259: PPUSH
62260: CALL_OW 250
62264: PPUSH
62265: LD_VAR 0 10
62269: PPUSH
62270: LD_VAR 0 5
62274: PPUSH
62275: CALL_OW 272
62279: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
62280: LD_ADDR_VAR 0 9
62284: PUSH
62285: LD_VAR 0 1
62289: PPUSH
62290: CALL_OW 251
62294: PPUSH
62295: LD_VAR 0 10
62299: PPUSH
62300: LD_VAR 0 5
62304: PPUSH
62305: CALL_OW 273
62309: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62310: LD_VAR 0 8
62314: PPUSH
62315: LD_VAR 0 9
62319: PPUSH
62320: CALL_OW 488
62324: NOT
62325: IFFALSE 62329
// exit ;
62327: GO 62436
// ComAnimCustom ( unit , 1 ) ;
62329: LD_VAR 0 1
62333: PPUSH
62334: LD_INT 1
62336: PPUSH
62337: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62341: LD_VAR 0 8
62345: PPUSH
62346: LD_VAR 0 9
62350: PPUSH
62351: LD_VAR 0 6
62355: PPUSH
62356: LD_VAR 0 7
62360: PPUSH
62361: CALL_OW 330
// repeat wait ( 1 ) ;
62365: LD_INT 1
62367: PPUSH
62368: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
62372: LD_VAR 0 1
62376: PPUSH
62377: CALL_OW 316
62381: PUSH
62382: LD_VAR 0 1
62386: PPUSH
62387: CALL_OW 314
62391: OR
62392: PUSH
62393: LD_VAR 0 1
62397: PPUSH
62398: CALL_OW 302
62402: NOT
62403: OR
62404: PUSH
62405: LD_VAR 0 1
62409: PPUSH
62410: CALL_OW 301
62414: OR
62415: IFFALSE 62365
// RemoveSeeing ( _x , _y , side ) ;
62417: LD_VAR 0 8
62421: PPUSH
62422: LD_VAR 0 9
62426: PPUSH
62427: LD_VAR 0 6
62431: PPUSH
62432: CALL_OW 331
// end ; end_of_file
62436: LD_VAR 0 4
62440: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
62441: LD_VAR 0 2
62445: PUSH
62446: LD_INT 100
62448: EQUAL
62449: IFFALSE 63398
// begin if not StreamModeActive then
62451: LD_EXP 71
62455: NOT
62456: IFFALSE 62466
// StreamModeActive := true ;
62458: LD_ADDR_EXP 71
62462: PUSH
62463: LD_INT 1
62465: ST_TO_ADDR
// if p3 = 0 then
62466: LD_VAR 0 3
62470: PUSH
62471: LD_INT 0
62473: EQUAL
62474: IFFALSE 62480
// InitStreamMode ;
62476: CALL 63556 0 0
// if p3 = 1 then
62480: LD_VAR 0 3
62484: PUSH
62485: LD_INT 1
62487: EQUAL
62488: IFFALSE 62498
// sRocket := true ;
62490: LD_ADDR_EXP 76
62494: PUSH
62495: LD_INT 1
62497: ST_TO_ADDR
// if p3 = 2 then
62498: LD_VAR 0 3
62502: PUSH
62503: LD_INT 2
62505: EQUAL
62506: IFFALSE 62516
// sSpeed := true ;
62508: LD_ADDR_EXP 75
62512: PUSH
62513: LD_INT 1
62515: ST_TO_ADDR
// if p3 = 3 then
62516: LD_VAR 0 3
62520: PUSH
62521: LD_INT 3
62523: EQUAL
62524: IFFALSE 62534
// sEngine := true ;
62526: LD_ADDR_EXP 77
62530: PUSH
62531: LD_INT 1
62533: ST_TO_ADDR
// if p3 = 4 then
62534: LD_VAR 0 3
62538: PUSH
62539: LD_INT 4
62541: EQUAL
62542: IFFALSE 62552
// sSpec := true ;
62544: LD_ADDR_EXP 74
62548: PUSH
62549: LD_INT 1
62551: ST_TO_ADDR
// if p3 = 5 then
62552: LD_VAR 0 3
62556: PUSH
62557: LD_INT 5
62559: EQUAL
62560: IFFALSE 62570
// sLevel := true ;
62562: LD_ADDR_EXP 78
62566: PUSH
62567: LD_INT 1
62569: ST_TO_ADDR
// if p3 = 6 then
62570: LD_VAR 0 3
62574: PUSH
62575: LD_INT 6
62577: EQUAL
62578: IFFALSE 62588
// sArmoury := true ;
62580: LD_ADDR_EXP 79
62584: PUSH
62585: LD_INT 1
62587: ST_TO_ADDR
// if p3 = 7 then
62588: LD_VAR 0 3
62592: PUSH
62593: LD_INT 7
62595: EQUAL
62596: IFFALSE 62606
// sRadar := true ;
62598: LD_ADDR_EXP 80
62602: PUSH
62603: LD_INT 1
62605: ST_TO_ADDR
// if p3 = 8 then
62606: LD_VAR 0 3
62610: PUSH
62611: LD_INT 8
62613: EQUAL
62614: IFFALSE 62624
// sBunker := true ;
62616: LD_ADDR_EXP 81
62620: PUSH
62621: LD_INT 1
62623: ST_TO_ADDR
// if p3 = 9 then
62624: LD_VAR 0 3
62628: PUSH
62629: LD_INT 9
62631: EQUAL
62632: IFFALSE 62642
// sHack := true ;
62634: LD_ADDR_EXP 82
62638: PUSH
62639: LD_INT 1
62641: ST_TO_ADDR
// if p3 = 10 then
62642: LD_VAR 0 3
62646: PUSH
62647: LD_INT 10
62649: EQUAL
62650: IFFALSE 62660
// sFire := true ;
62652: LD_ADDR_EXP 83
62656: PUSH
62657: LD_INT 1
62659: ST_TO_ADDR
// if p3 = 11 then
62660: LD_VAR 0 3
62664: PUSH
62665: LD_INT 11
62667: EQUAL
62668: IFFALSE 62678
// sRefresh := true ;
62670: LD_ADDR_EXP 84
62674: PUSH
62675: LD_INT 1
62677: ST_TO_ADDR
// if p3 = 12 then
62678: LD_VAR 0 3
62682: PUSH
62683: LD_INT 12
62685: EQUAL
62686: IFFALSE 62696
// sExp := true ;
62688: LD_ADDR_EXP 85
62692: PUSH
62693: LD_INT 1
62695: ST_TO_ADDR
// if p3 = 13 then
62696: LD_VAR 0 3
62700: PUSH
62701: LD_INT 13
62703: EQUAL
62704: IFFALSE 62714
// sDepot := true ;
62706: LD_ADDR_EXP 86
62710: PUSH
62711: LD_INT 1
62713: ST_TO_ADDR
// if p3 = 14 then
62714: LD_VAR 0 3
62718: PUSH
62719: LD_INT 14
62721: EQUAL
62722: IFFALSE 62732
// sFlag := true ;
62724: LD_ADDR_EXP 87
62728: PUSH
62729: LD_INT 1
62731: ST_TO_ADDR
// if p3 = 15 then
62732: LD_VAR 0 3
62736: PUSH
62737: LD_INT 15
62739: EQUAL
62740: IFFALSE 62750
// sKamikadze := true ;
62742: LD_ADDR_EXP 95
62746: PUSH
62747: LD_INT 1
62749: ST_TO_ADDR
// if p3 = 16 then
62750: LD_VAR 0 3
62754: PUSH
62755: LD_INT 16
62757: EQUAL
62758: IFFALSE 62768
// sTroll := true ;
62760: LD_ADDR_EXP 96
62764: PUSH
62765: LD_INT 1
62767: ST_TO_ADDR
// if p3 = 17 then
62768: LD_VAR 0 3
62772: PUSH
62773: LD_INT 17
62775: EQUAL
62776: IFFALSE 62786
// sSlow := true ;
62778: LD_ADDR_EXP 97
62782: PUSH
62783: LD_INT 1
62785: ST_TO_ADDR
// if p3 = 18 then
62786: LD_VAR 0 3
62790: PUSH
62791: LD_INT 18
62793: EQUAL
62794: IFFALSE 62804
// sLack := true ;
62796: LD_ADDR_EXP 98
62800: PUSH
62801: LD_INT 1
62803: ST_TO_ADDR
// if p3 = 19 then
62804: LD_VAR 0 3
62808: PUSH
62809: LD_INT 19
62811: EQUAL
62812: IFFALSE 62822
// sTank := true ;
62814: LD_ADDR_EXP 100
62818: PUSH
62819: LD_INT 1
62821: ST_TO_ADDR
// if p3 = 20 then
62822: LD_VAR 0 3
62826: PUSH
62827: LD_INT 20
62829: EQUAL
62830: IFFALSE 62840
// sRemote := true ;
62832: LD_ADDR_EXP 101
62836: PUSH
62837: LD_INT 1
62839: ST_TO_ADDR
// if p3 = 21 then
62840: LD_VAR 0 3
62844: PUSH
62845: LD_INT 21
62847: EQUAL
62848: IFFALSE 62858
// sPowell := true ;
62850: LD_ADDR_EXP 102
62854: PUSH
62855: LD_INT 1
62857: ST_TO_ADDR
// if p3 = 22 then
62858: LD_VAR 0 3
62862: PUSH
62863: LD_INT 22
62865: EQUAL
62866: IFFALSE 62876
// sTeleport := true ;
62868: LD_ADDR_EXP 105
62872: PUSH
62873: LD_INT 1
62875: ST_TO_ADDR
// if p3 = 23 then
62876: LD_VAR 0 3
62880: PUSH
62881: LD_INT 23
62883: EQUAL
62884: IFFALSE 62894
// sOilTower := true ;
62886: LD_ADDR_EXP 107
62890: PUSH
62891: LD_INT 1
62893: ST_TO_ADDR
// if p3 = 24 then
62894: LD_VAR 0 3
62898: PUSH
62899: LD_INT 24
62901: EQUAL
62902: IFFALSE 62912
// sShovel := true ;
62904: LD_ADDR_EXP 108
62908: PUSH
62909: LD_INT 1
62911: ST_TO_ADDR
// if p3 = 25 then
62912: LD_VAR 0 3
62916: PUSH
62917: LD_INT 25
62919: EQUAL
62920: IFFALSE 62930
// sSheik := true ;
62922: LD_ADDR_EXP 109
62926: PUSH
62927: LD_INT 1
62929: ST_TO_ADDR
// if p3 = 26 then
62930: LD_VAR 0 3
62934: PUSH
62935: LD_INT 26
62937: EQUAL
62938: IFFALSE 62948
// sEarthquake := true ;
62940: LD_ADDR_EXP 111
62944: PUSH
62945: LD_INT 1
62947: ST_TO_ADDR
// if p3 = 27 then
62948: LD_VAR 0 3
62952: PUSH
62953: LD_INT 27
62955: EQUAL
62956: IFFALSE 62966
// sAI := true ;
62958: LD_ADDR_EXP 112
62962: PUSH
62963: LD_INT 1
62965: ST_TO_ADDR
// if p3 = 28 then
62966: LD_VAR 0 3
62970: PUSH
62971: LD_INT 28
62973: EQUAL
62974: IFFALSE 62984
// sCargo := true ;
62976: LD_ADDR_EXP 115
62980: PUSH
62981: LD_INT 1
62983: ST_TO_ADDR
// if p3 = 29 then
62984: LD_VAR 0 3
62988: PUSH
62989: LD_INT 29
62991: EQUAL
62992: IFFALSE 63002
// sDLaser := true ;
62994: LD_ADDR_EXP 116
62998: PUSH
62999: LD_INT 1
63001: ST_TO_ADDR
// if p3 = 30 then
63002: LD_VAR 0 3
63006: PUSH
63007: LD_INT 30
63009: EQUAL
63010: IFFALSE 63020
// sExchange := true ;
63012: LD_ADDR_EXP 117
63016: PUSH
63017: LD_INT 1
63019: ST_TO_ADDR
// if p3 = 31 then
63020: LD_VAR 0 3
63024: PUSH
63025: LD_INT 31
63027: EQUAL
63028: IFFALSE 63038
// sFac := true ;
63030: LD_ADDR_EXP 118
63034: PUSH
63035: LD_INT 1
63037: ST_TO_ADDR
// if p3 = 32 then
63038: LD_VAR 0 3
63042: PUSH
63043: LD_INT 32
63045: EQUAL
63046: IFFALSE 63056
// sPower := true ;
63048: LD_ADDR_EXP 119
63052: PUSH
63053: LD_INT 1
63055: ST_TO_ADDR
// if p3 = 33 then
63056: LD_VAR 0 3
63060: PUSH
63061: LD_INT 33
63063: EQUAL
63064: IFFALSE 63074
// sRandom := true ;
63066: LD_ADDR_EXP 120
63070: PUSH
63071: LD_INT 1
63073: ST_TO_ADDR
// if p3 = 34 then
63074: LD_VAR 0 3
63078: PUSH
63079: LD_INT 34
63081: EQUAL
63082: IFFALSE 63092
// sShield := true ;
63084: LD_ADDR_EXP 121
63088: PUSH
63089: LD_INT 1
63091: ST_TO_ADDR
// if p3 = 35 then
63092: LD_VAR 0 3
63096: PUSH
63097: LD_INT 35
63099: EQUAL
63100: IFFALSE 63110
// sTime := true ;
63102: LD_ADDR_EXP 122
63106: PUSH
63107: LD_INT 1
63109: ST_TO_ADDR
// if p3 = 36 then
63110: LD_VAR 0 3
63114: PUSH
63115: LD_INT 36
63117: EQUAL
63118: IFFALSE 63128
// sTools := true ;
63120: LD_ADDR_EXP 123
63124: PUSH
63125: LD_INT 1
63127: ST_TO_ADDR
// if p3 = 101 then
63128: LD_VAR 0 3
63132: PUSH
63133: LD_INT 101
63135: EQUAL
63136: IFFALSE 63146
// sSold := true ;
63138: LD_ADDR_EXP 88
63142: PUSH
63143: LD_INT 1
63145: ST_TO_ADDR
// if p3 = 102 then
63146: LD_VAR 0 3
63150: PUSH
63151: LD_INT 102
63153: EQUAL
63154: IFFALSE 63164
// sDiff := true ;
63156: LD_ADDR_EXP 89
63160: PUSH
63161: LD_INT 1
63163: ST_TO_ADDR
// if p3 = 103 then
63164: LD_VAR 0 3
63168: PUSH
63169: LD_INT 103
63171: EQUAL
63172: IFFALSE 63182
// sFog := true ;
63174: LD_ADDR_EXP 92
63178: PUSH
63179: LD_INT 1
63181: ST_TO_ADDR
// if p3 = 104 then
63182: LD_VAR 0 3
63186: PUSH
63187: LD_INT 104
63189: EQUAL
63190: IFFALSE 63200
// sReset := true ;
63192: LD_ADDR_EXP 93
63196: PUSH
63197: LD_INT 1
63199: ST_TO_ADDR
// if p3 = 105 then
63200: LD_VAR 0 3
63204: PUSH
63205: LD_INT 105
63207: EQUAL
63208: IFFALSE 63218
// sSun := true ;
63210: LD_ADDR_EXP 94
63214: PUSH
63215: LD_INT 1
63217: ST_TO_ADDR
// if p3 = 106 then
63218: LD_VAR 0 3
63222: PUSH
63223: LD_INT 106
63225: EQUAL
63226: IFFALSE 63236
// sTiger := true ;
63228: LD_ADDR_EXP 90
63232: PUSH
63233: LD_INT 1
63235: ST_TO_ADDR
// if p3 = 107 then
63236: LD_VAR 0 3
63240: PUSH
63241: LD_INT 107
63243: EQUAL
63244: IFFALSE 63254
// sBomb := true ;
63246: LD_ADDR_EXP 91
63250: PUSH
63251: LD_INT 1
63253: ST_TO_ADDR
// if p3 = 108 then
63254: LD_VAR 0 3
63258: PUSH
63259: LD_INT 108
63261: EQUAL
63262: IFFALSE 63272
// sWound := true ;
63264: LD_ADDR_EXP 99
63268: PUSH
63269: LD_INT 1
63271: ST_TO_ADDR
// if p3 = 109 then
63272: LD_VAR 0 3
63276: PUSH
63277: LD_INT 109
63279: EQUAL
63280: IFFALSE 63290
// sBetray := true ;
63282: LD_ADDR_EXP 103
63286: PUSH
63287: LD_INT 1
63289: ST_TO_ADDR
// if p3 = 110 then
63290: LD_VAR 0 3
63294: PUSH
63295: LD_INT 110
63297: EQUAL
63298: IFFALSE 63308
// sContamin := true ;
63300: LD_ADDR_EXP 104
63304: PUSH
63305: LD_INT 1
63307: ST_TO_ADDR
// if p3 = 111 then
63308: LD_VAR 0 3
63312: PUSH
63313: LD_INT 111
63315: EQUAL
63316: IFFALSE 63326
// sOil := true ;
63318: LD_ADDR_EXP 106
63322: PUSH
63323: LD_INT 1
63325: ST_TO_ADDR
// if p3 = 112 then
63326: LD_VAR 0 3
63330: PUSH
63331: LD_INT 112
63333: EQUAL
63334: IFFALSE 63344
// sStu := true ;
63336: LD_ADDR_EXP 110
63340: PUSH
63341: LD_INT 1
63343: ST_TO_ADDR
// if p3 = 113 then
63344: LD_VAR 0 3
63348: PUSH
63349: LD_INT 113
63351: EQUAL
63352: IFFALSE 63362
// sBazooka := true ;
63354: LD_ADDR_EXP 113
63358: PUSH
63359: LD_INT 1
63361: ST_TO_ADDR
// if p3 = 114 then
63362: LD_VAR 0 3
63366: PUSH
63367: LD_INT 114
63369: EQUAL
63370: IFFALSE 63380
// sMortar := true ;
63372: LD_ADDR_EXP 114
63376: PUSH
63377: LD_INT 1
63379: ST_TO_ADDR
// if p3 = 115 then
63380: LD_VAR 0 3
63384: PUSH
63385: LD_INT 115
63387: EQUAL
63388: IFFALSE 63398
// sRanger := true ;
63390: LD_ADDR_EXP 124
63394: PUSH
63395: LD_INT 1
63397: ST_TO_ADDR
// end ; if p2 = 101 then
63398: LD_VAR 0 2
63402: PUSH
63403: LD_INT 101
63405: EQUAL
63406: IFFALSE 63534
// begin case p3 of 1 :
63408: LD_VAR 0 3
63412: PUSH
63413: LD_INT 1
63415: DOUBLE
63416: EQUAL
63417: IFTRUE 63421
63419: GO 63428
63421: POP
// hHackUnlimitedResources ; 2 :
63422: CALL 74569 0 0
63426: GO 63534
63428: LD_INT 2
63430: DOUBLE
63431: EQUAL
63432: IFTRUE 63436
63434: GO 63443
63436: POP
// hHackSetLevel10 ; 3 :
63437: CALL 74702 0 0
63441: GO 63534
63443: LD_INT 3
63445: DOUBLE
63446: EQUAL
63447: IFTRUE 63451
63449: GO 63458
63451: POP
// hHackSetLevel10YourUnits ; 4 :
63452: CALL 74787 0 0
63456: GO 63534
63458: LD_INT 4
63460: DOUBLE
63461: EQUAL
63462: IFTRUE 63466
63464: GO 63473
63466: POP
// hHackInvincible ; 5 :
63467: CALL 75235 0 0
63471: GO 63534
63473: LD_INT 5
63475: DOUBLE
63476: EQUAL
63477: IFTRUE 63481
63479: GO 63488
63481: POP
// hHackInvisible ; 6 :
63482: CALL 75346 0 0
63486: GO 63534
63488: LD_INT 6
63490: DOUBLE
63491: EQUAL
63492: IFTRUE 63496
63494: GO 63503
63496: POP
// hHackChangeYourSide ; 7 :
63497: CALL 75403 0 0
63501: GO 63534
63503: LD_INT 7
63505: DOUBLE
63506: EQUAL
63507: IFTRUE 63511
63509: GO 63518
63511: POP
// hHackChangeUnitSide ; 8 :
63512: CALL 75445 0 0
63516: GO 63534
63518: LD_INT 8
63520: DOUBLE
63521: EQUAL
63522: IFTRUE 63526
63524: GO 63533
63526: POP
// hHackFog ; end ;
63527: CALL 75546 0 0
63531: GO 63534
63533: POP
// end ; end ;
63534: PPOPN 6
63536: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
63537: GO 63539
63539: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
63540: LD_STRING initStreamRollete();
63542: PPUSH
63543: CALL_OW 559
// InitStreamMode ;
63547: CALL 63556 0 0
// DefineStreamItems ( ) ;
63551: CALL 63996 0 0
// end ;
63555: END
// function InitStreamMode ; begin
63556: LD_INT 0
63558: PPUSH
// streamModeActive := false ;
63559: LD_ADDR_EXP 71
63563: PUSH
63564: LD_INT 0
63566: ST_TO_ADDR
// normalCounter := 36 ;
63567: LD_ADDR_EXP 72
63571: PUSH
63572: LD_INT 36
63574: ST_TO_ADDR
// hardcoreCounter := 16 ;
63575: LD_ADDR_EXP 73
63579: PUSH
63580: LD_INT 16
63582: ST_TO_ADDR
// sRocket := false ;
63583: LD_ADDR_EXP 76
63587: PUSH
63588: LD_INT 0
63590: ST_TO_ADDR
// sSpeed := false ;
63591: LD_ADDR_EXP 75
63595: PUSH
63596: LD_INT 0
63598: ST_TO_ADDR
// sEngine := false ;
63599: LD_ADDR_EXP 77
63603: PUSH
63604: LD_INT 0
63606: ST_TO_ADDR
// sSpec := false ;
63607: LD_ADDR_EXP 74
63611: PUSH
63612: LD_INT 0
63614: ST_TO_ADDR
// sLevel := false ;
63615: LD_ADDR_EXP 78
63619: PUSH
63620: LD_INT 0
63622: ST_TO_ADDR
// sArmoury := false ;
63623: LD_ADDR_EXP 79
63627: PUSH
63628: LD_INT 0
63630: ST_TO_ADDR
// sRadar := false ;
63631: LD_ADDR_EXP 80
63635: PUSH
63636: LD_INT 0
63638: ST_TO_ADDR
// sBunker := false ;
63639: LD_ADDR_EXP 81
63643: PUSH
63644: LD_INT 0
63646: ST_TO_ADDR
// sHack := false ;
63647: LD_ADDR_EXP 82
63651: PUSH
63652: LD_INT 0
63654: ST_TO_ADDR
// sFire := false ;
63655: LD_ADDR_EXP 83
63659: PUSH
63660: LD_INT 0
63662: ST_TO_ADDR
// sRefresh := false ;
63663: LD_ADDR_EXP 84
63667: PUSH
63668: LD_INT 0
63670: ST_TO_ADDR
// sExp := false ;
63671: LD_ADDR_EXP 85
63675: PUSH
63676: LD_INT 0
63678: ST_TO_ADDR
// sDepot := false ;
63679: LD_ADDR_EXP 86
63683: PUSH
63684: LD_INT 0
63686: ST_TO_ADDR
// sFlag := false ;
63687: LD_ADDR_EXP 87
63691: PUSH
63692: LD_INT 0
63694: ST_TO_ADDR
// sKamikadze := false ;
63695: LD_ADDR_EXP 95
63699: PUSH
63700: LD_INT 0
63702: ST_TO_ADDR
// sTroll := false ;
63703: LD_ADDR_EXP 96
63707: PUSH
63708: LD_INT 0
63710: ST_TO_ADDR
// sSlow := false ;
63711: LD_ADDR_EXP 97
63715: PUSH
63716: LD_INT 0
63718: ST_TO_ADDR
// sLack := false ;
63719: LD_ADDR_EXP 98
63723: PUSH
63724: LD_INT 0
63726: ST_TO_ADDR
// sTank := false ;
63727: LD_ADDR_EXP 100
63731: PUSH
63732: LD_INT 0
63734: ST_TO_ADDR
// sRemote := false ;
63735: LD_ADDR_EXP 101
63739: PUSH
63740: LD_INT 0
63742: ST_TO_ADDR
// sPowell := false ;
63743: LD_ADDR_EXP 102
63747: PUSH
63748: LD_INT 0
63750: ST_TO_ADDR
// sTeleport := false ;
63751: LD_ADDR_EXP 105
63755: PUSH
63756: LD_INT 0
63758: ST_TO_ADDR
// sOilTower := false ;
63759: LD_ADDR_EXP 107
63763: PUSH
63764: LD_INT 0
63766: ST_TO_ADDR
// sShovel := false ;
63767: LD_ADDR_EXP 108
63771: PUSH
63772: LD_INT 0
63774: ST_TO_ADDR
// sSheik := false ;
63775: LD_ADDR_EXP 109
63779: PUSH
63780: LD_INT 0
63782: ST_TO_ADDR
// sEarthquake := false ;
63783: LD_ADDR_EXP 111
63787: PUSH
63788: LD_INT 0
63790: ST_TO_ADDR
// sAI := false ;
63791: LD_ADDR_EXP 112
63795: PUSH
63796: LD_INT 0
63798: ST_TO_ADDR
// sCargo := false ;
63799: LD_ADDR_EXP 115
63803: PUSH
63804: LD_INT 0
63806: ST_TO_ADDR
// sDLaser := false ;
63807: LD_ADDR_EXP 116
63811: PUSH
63812: LD_INT 0
63814: ST_TO_ADDR
// sExchange := false ;
63815: LD_ADDR_EXP 117
63819: PUSH
63820: LD_INT 0
63822: ST_TO_ADDR
// sFac := false ;
63823: LD_ADDR_EXP 118
63827: PUSH
63828: LD_INT 0
63830: ST_TO_ADDR
// sPower := false ;
63831: LD_ADDR_EXP 119
63835: PUSH
63836: LD_INT 0
63838: ST_TO_ADDR
// sRandom := false ;
63839: LD_ADDR_EXP 120
63843: PUSH
63844: LD_INT 0
63846: ST_TO_ADDR
// sShield := false ;
63847: LD_ADDR_EXP 121
63851: PUSH
63852: LD_INT 0
63854: ST_TO_ADDR
// sTime := false ;
63855: LD_ADDR_EXP 122
63859: PUSH
63860: LD_INT 0
63862: ST_TO_ADDR
// sTools := false ;
63863: LD_ADDR_EXP 123
63867: PUSH
63868: LD_INT 0
63870: ST_TO_ADDR
// sSold := false ;
63871: LD_ADDR_EXP 88
63875: PUSH
63876: LD_INT 0
63878: ST_TO_ADDR
// sDiff := false ;
63879: LD_ADDR_EXP 89
63883: PUSH
63884: LD_INT 0
63886: ST_TO_ADDR
// sFog := false ;
63887: LD_ADDR_EXP 92
63891: PUSH
63892: LD_INT 0
63894: ST_TO_ADDR
// sReset := false ;
63895: LD_ADDR_EXP 93
63899: PUSH
63900: LD_INT 0
63902: ST_TO_ADDR
// sSun := false ;
63903: LD_ADDR_EXP 94
63907: PUSH
63908: LD_INT 0
63910: ST_TO_ADDR
// sTiger := false ;
63911: LD_ADDR_EXP 90
63915: PUSH
63916: LD_INT 0
63918: ST_TO_ADDR
// sBomb := false ;
63919: LD_ADDR_EXP 91
63923: PUSH
63924: LD_INT 0
63926: ST_TO_ADDR
// sWound := false ;
63927: LD_ADDR_EXP 99
63931: PUSH
63932: LD_INT 0
63934: ST_TO_ADDR
// sBetray := false ;
63935: LD_ADDR_EXP 103
63939: PUSH
63940: LD_INT 0
63942: ST_TO_ADDR
// sContamin := false ;
63943: LD_ADDR_EXP 104
63947: PUSH
63948: LD_INT 0
63950: ST_TO_ADDR
// sOil := false ;
63951: LD_ADDR_EXP 106
63955: PUSH
63956: LD_INT 0
63958: ST_TO_ADDR
// sStu := false ;
63959: LD_ADDR_EXP 110
63963: PUSH
63964: LD_INT 0
63966: ST_TO_ADDR
// sBazooka := false ;
63967: LD_ADDR_EXP 113
63971: PUSH
63972: LD_INT 0
63974: ST_TO_ADDR
// sMortar := false ;
63975: LD_ADDR_EXP 114
63979: PUSH
63980: LD_INT 0
63982: ST_TO_ADDR
// sRanger := false ;
63983: LD_ADDR_EXP 124
63987: PUSH
63988: LD_INT 0
63990: ST_TO_ADDR
// end ;
63991: LD_VAR 0 1
63995: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
63996: LD_INT 0
63998: PPUSH
63999: PPUSH
64000: PPUSH
64001: PPUSH
64002: PPUSH
// result := [ ] ;
64003: LD_ADDR_VAR 0 1
64007: PUSH
64008: EMPTY
64009: ST_TO_ADDR
// if campaign_id = 1 then
64010: LD_OWVAR 69
64014: PUSH
64015: LD_INT 1
64017: EQUAL
64018: IFFALSE 66956
// begin case mission_number of 1 :
64020: LD_OWVAR 70
64024: PUSH
64025: LD_INT 1
64027: DOUBLE
64028: EQUAL
64029: IFTRUE 64033
64031: GO 64097
64033: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
64034: LD_ADDR_VAR 0 1
64038: PUSH
64039: LD_INT 2
64041: PUSH
64042: LD_INT 4
64044: PUSH
64045: LD_INT 11
64047: PUSH
64048: LD_INT 12
64050: PUSH
64051: LD_INT 15
64053: PUSH
64054: LD_INT 16
64056: PUSH
64057: LD_INT 22
64059: PUSH
64060: LD_INT 23
64062: PUSH
64063: LD_INT 26
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 101
64079: PUSH
64080: LD_INT 102
64082: PUSH
64083: LD_INT 106
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: LIST
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: ST_TO_ADDR
64095: GO 66954
64097: LD_INT 2
64099: DOUBLE
64100: EQUAL
64101: IFTRUE 64105
64103: GO 64177
64105: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
64106: LD_ADDR_VAR 0 1
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: LD_INT 4
64116: PUSH
64117: LD_INT 11
64119: PUSH
64120: LD_INT 12
64122: PUSH
64123: LD_INT 15
64125: PUSH
64126: LD_INT 16
64128: PUSH
64129: LD_INT 22
64131: PUSH
64132: LD_INT 23
64134: PUSH
64135: LD_INT 26
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 101
64151: PUSH
64152: LD_INT 102
64154: PUSH
64155: LD_INT 105
64157: PUSH
64158: LD_INT 106
64160: PUSH
64161: LD_INT 108
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: ST_TO_ADDR
64175: GO 66954
64177: LD_INT 3
64179: DOUBLE
64180: EQUAL
64181: IFTRUE 64185
64183: GO 64261
64185: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
64186: LD_ADDR_VAR 0 1
64190: PUSH
64191: LD_INT 2
64193: PUSH
64194: LD_INT 4
64196: PUSH
64197: LD_INT 5
64199: PUSH
64200: LD_INT 11
64202: PUSH
64203: LD_INT 12
64205: PUSH
64206: LD_INT 15
64208: PUSH
64209: LD_INT 16
64211: PUSH
64212: LD_INT 22
64214: PUSH
64215: LD_INT 26
64217: PUSH
64218: LD_INT 36
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 101
64235: PUSH
64236: LD_INT 102
64238: PUSH
64239: LD_INT 105
64241: PUSH
64242: LD_INT 106
64244: PUSH
64245: LD_INT 108
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: ST_TO_ADDR
64259: GO 66954
64261: LD_INT 4
64263: DOUBLE
64264: EQUAL
64265: IFTRUE 64269
64267: GO 64353
64269: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
64270: LD_ADDR_VAR 0 1
64274: PUSH
64275: LD_INT 2
64277: PUSH
64278: LD_INT 4
64280: PUSH
64281: LD_INT 5
64283: PUSH
64284: LD_INT 8
64286: PUSH
64287: LD_INT 11
64289: PUSH
64290: LD_INT 12
64292: PUSH
64293: LD_INT 15
64295: PUSH
64296: LD_INT 16
64298: PUSH
64299: LD_INT 22
64301: PUSH
64302: LD_INT 23
64304: PUSH
64305: LD_INT 26
64307: PUSH
64308: LD_INT 36
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 101
64327: PUSH
64328: LD_INT 102
64330: PUSH
64331: LD_INT 105
64333: PUSH
64334: LD_INT 106
64336: PUSH
64337: LD_INT 108
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: ST_TO_ADDR
64351: GO 66954
64353: LD_INT 5
64355: DOUBLE
64356: EQUAL
64357: IFTRUE 64361
64359: GO 64461
64361: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
64362: LD_ADDR_VAR 0 1
64366: PUSH
64367: LD_INT 2
64369: PUSH
64370: LD_INT 4
64372: PUSH
64373: LD_INT 5
64375: PUSH
64376: LD_INT 6
64378: PUSH
64379: LD_INT 8
64381: PUSH
64382: LD_INT 11
64384: PUSH
64385: LD_INT 12
64387: PUSH
64388: LD_INT 15
64390: PUSH
64391: LD_INT 16
64393: PUSH
64394: LD_INT 22
64396: PUSH
64397: LD_INT 23
64399: PUSH
64400: LD_INT 25
64402: PUSH
64403: LD_INT 26
64405: PUSH
64406: LD_INT 36
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 101
64427: PUSH
64428: LD_INT 102
64430: PUSH
64431: LD_INT 105
64433: PUSH
64434: LD_INT 106
64436: PUSH
64437: LD_INT 108
64439: PUSH
64440: LD_INT 109
64442: PUSH
64443: LD_INT 112
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: ST_TO_ADDR
64459: GO 66954
64461: LD_INT 6
64463: DOUBLE
64464: EQUAL
64465: IFTRUE 64469
64467: GO 64589
64469: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
64470: LD_ADDR_VAR 0 1
64474: PUSH
64475: LD_INT 2
64477: PUSH
64478: LD_INT 4
64480: PUSH
64481: LD_INT 5
64483: PUSH
64484: LD_INT 6
64486: PUSH
64487: LD_INT 8
64489: PUSH
64490: LD_INT 11
64492: PUSH
64493: LD_INT 12
64495: PUSH
64496: LD_INT 15
64498: PUSH
64499: LD_INT 16
64501: PUSH
64502: LD_INT 20
64504: PUSH
64505: LD_INT 21
64507: PUSH
64508: LD_INT 22
64510: PUSH
64511: LD_INT 23
64513: PUSH
64514: LD_INT 25
64516: PUSH
64517: LD_INT 26
64519: PUSH
64520: LD_INT 30
64522: PUSH
64523: LD_INT 31
64525: PUSH
64526: LD_INT 32
64528: PUSH
64529: LD_INT 36
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 101
64555: PUSH
64556: LD_INT 102
64558: PUSH
64559: LD_INT 105
64561: PUSH
64562: LD_INT 106
64564: PUSH
64565: LD_INT 108
64567: PUSH
64568: LD_INT 109
64570: PUSH
64571: LD_INT 112
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: ST_TO_ADDR
64587: GO 66954
64589: LD_INT 7
64591: DOUBLE
64592: EQUAL
64593: IFTRUE 64597
64595: GO 64697
64597: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
64598: LD_ADDR_VAR 0 1
64602: PUSH
64603: LD_INT 2
64605: PUSH
64606: LD_INT 4
64608: PUSH
64609: LD_INT 5
64611: PUSH
64612: LD_INT 7
64614: PUSH
64615: LD_INT 11
64617: PUSH
64618: LD_INT 12
64620: PUSH
64621: LD_INT 15
64623: PUSH
64624: LD_INT 16
64626: PUSH
64627: LD_INT 20
64629: PUSH
64630: LD_INT 21
64632: PUSH
64633: LD_INT 22
64635: PUSH
64636: LD_INT 23
64638: PUSH
64639: LD_INT 25
64641: PUSH
64642: LD_INT 26
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 101
64663: PUSH
64664: LD_INT 102
64666: PUSH
64667: LD_INT 103
64669: PUSH
64670: LD_INT 105
64672: PUSH
64673: LD_INT 106
64675: PUSH
64676: LD_INT 108
64678: PUSH
64679: LD_INT 112
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: ST_TO_ADDR
64695: GO 66954
64697: LD_INT 8
64699: DOUBLE
64700: EQUAL
64701: IFTRUE 64705
64703: GO 64833
64705: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
64706: LD_ADDR_VAR 0 1
64710: PUSH
64711: LD_INT 2
64713: PUSH
64714: LD_INT 4
64716: PUSH
64717: LD_INT 5
64719: PUSH
64720: LD_INT 6
64722: PUSH
64723: LD_INT 7
64725: PUSH
64726: LD_INT 8
64728: PUSH
64729: LD_INT 11
64731: PUSH
64732: LD_INT 12
64734: PUSH
64735: LD_INT 15
64737: PUSH
64738: LD_INT 16
64740: PUSH
64741: LD_INT 20
64743: PUSH
64744: LD_INT 21
64746: PUSH
64747: LD_INT 22
64749: PUSH
64750: LD_INT 23
64752: PUSH
64753: LD_INT 25
64755: PUSH
64756: LD_INT 26
64758: PUSH
64759: LD_INT 30
64761: PUSH
64762: LD_INT 31
64764: PUSH
64765: LD_INT 32
64767: PUSH
64768: LD_INT 36
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 101
64795: PUSH
64796: LD_INT 102
64798: PUSH
64799: LD_INT 103
64801: PUSH
64802: LD_INT 105
64804: PUSH
64805: LD_INT 106
64807: PUSH
64808: LD_INT 108
64810: PUSH
64811: LD_INT 109
64813: PUSH
64814: LD_INT 112
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: ST_TO_ADDR
64831: GO 66954
64833: LD_INT 9
64835: DOUBLE
64836: EQUAL
64837: IFTRUE 64841
64839: GO 64977
64841: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
64842: LD_ADDR_VAR 0 1
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: LD_INT 4
64852: PUSH
64853: LD_INT 5
64855: PUSH
64856: LD_INT 6
64858: PUSH
64859: LD_INT 7
64861: PUSH
64862: LD_INT 8
64864: PUSH
64865: LD_INT 11
64867: PUSH
64868: LD_INT 12
64870: PUSH
64871: LD_INT 15
64873: PUSH
64874: LD_INT 16
64876: PUSH
64877: LD_INT 20
64879: PUSH
64880: LD_INT 21
64882: PUSH
64883: LD_INT 22
64885: PUSH
64886: LD_INT 23
64888: PUSH
64889: LD_INT 25
64891: PUSH
64892: LD_INT 26
64894: PUSH
64895: LD_INT 28
64897: PUSH
64898: LD_INT 30
64900: PUSH
64901: LD_INT 31
64903: PUSH
64904: LD_INT 32
64906: PUSH
64907: LD_INT 36
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 101
64935: PUSH
64936: LD_INT 102
64938: PUSH
64939: LD_INT 103
64941: PUSH
64942: LD_INT 105
64944: PUSH
64945: LD_INT 106
64947: PUSH
64948: LD_INT 108
64950: PUSH
64951: LD_INT 109
64953: PUSH
64954: LD_INT 112
64956: PUSH
64957: LD_INT 114
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: ST_TO_ADDR
64975: GO 66954
64977: LD_INT 10
64979: DOUBLE
64980: EQUAL
64981: IFTRUE 64985
64983: GO 65169
64985: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
64986: LD_ADDR_VAR 0 1
64990: PUSH
64991: LD_INT 2
64993: PUSH
64994: LD_INT 4
64996: PUSH
64997: LD_INT 5
64999: PUSH
65000: LD_INT 6
65002: PUSH
65003: LD_INT 7
65005: PUSH
65006: LD_INT 8
65008: PUSH
65009: LD_INT 9
65011: PUSH
65012: LD_INT 10
65014: PUSH
65015: LD_INT 11
65017: PUSH
65018: LD_INT 12
65020: PUSH
65021: LD_INT 13
65023: PUSH
65024: LD_INT 14
65026: PUSH
65027: LD_INT 15
65029: PUSH
65030: LD_INT 16
65032: PUSH
65033: LD_INT 17
65035: PUSH
65036: LD_INT 18
65038: PUSH
65039: LD_INT 19
65041: PUSH
65042: LD_INT 20
65044: PUSH
65045: LD_INT 21
65047: PUSH
65048: LD_INT 22
65050: PUSH
65051: LD_INT 23
65053: PUSH
65054: LD_INT 24
65056: PUSH
65057: LD_INT 25
65059: PUSH
65060: LD_INT 26
65062: PUSH
65063: LD_INT 28
65065: PUSH
65066: LD_INT 30
65068: PUSH
65069: LD_INT 31
65071: PUSH
65072: LD_INT 32
65074: PUSH
65075: LD_INT 36
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 101
65111: PUSH
65112: LD_INT 102
65114: PUSH
65115: LD_INT 103
65117: PUSH
65118: LD_INT 104
65120: PUSH
65121: LD_INT 105
65123: PUSH
65124: LD_INT 106
65126: PUSH
65127: LD_INT 107
65129: PUSH
65130: LD_INT 108
65132: PUSH
65133: LD_INT 109
65135: PUSH
65136: LD_INT 110
65138: PUSH
65139: LD_INT 111
65141: PUSH
65142: LD_INT 112
65144: PUSH
65145: LD_INT 114
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: ST_TO_ADDR
65167: GO 66954
65169: LD_INT 11
65171: DOUBLE
65172: EQUAL
65173: IFTRUE 65177
65175: GO 65369
65177: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
65178: LD_ADDR_VAR 0 1
65182: PUSH
65183: LD_INT 2
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: LD_INT 4
65191: PUSH
65192: LD_INT 5
65194: PUSH
65195: LD_INT 6
65197: PUSH
65198: LD_INT 7
65200: PUSH
65201: LD_INT 8
65203: PUSH
65204: LD_INT 9
65206: PUSH
65207: LD_INT 10
65209: PUSH
65210: LD_INT 11
65212: PUSH
65213: LD_INT 12
65215: PUSH
65216: LD_INT 13
65218: PUSH
65219: LD_INT 14
65221: PUSH
65222: LD_INT 15
65224: PUSH
65225: LD_INT 16
65227: PUSH
65228: LD_INT 17
65230: PUSH
65231: LD_INT 18
65233: PUSH
65234: LD_INT 19
65236: PUSH
65237: LD_INT 20
65239: PUSH
65240: LD_INT 21
65242: PUSH
65243: LD_INT 22
65245: PUSH
65246: LD_INT 23
65248: PUSH
65249: LD_INT 24
65251: PUSH
65252: LD_INT 25
65254: PUSH
65255: LD_INT 26
65257: PUSH
65258: LD_INT 28
65260: PUSH
65261: LD_INT 30
65263: PUSH
65264: LD_INT 31
65266: PUSH
65267: LD_INT 32
65269: PUSH
65270: LD_INT 34
65272: PUSH
65273: LD_INT 36
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 101
65311: PUSH
65312: LD_INT 102
65314: PUSH
65315: LD_INT 103
65317: PUSH
65318: LD_INT 104
65320: PUSH
65321: LD_INT 105
65323: PUSH
65324: LD_INT 106
65326: PUSH
65327: LD_INT 107
65329: PUSH
65330: LD_INT 108
65332: PUSH
65333: LD_INT 109
65335: PUSH
65336: LD_INT 110
65338: PUSH
65339: LD_INT 111
65341: PUSH
65342: LD_INT 112
65344: PUSH
65345: LD_INT 114
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: ST_TO_ADDR
65367: GO 66954
65369: LD_INT 12
65371: DOUBLE
65372: EQUAL
65373: IFTRUE 65377
65375: GO 65585
65377: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
65378: LD_ADDR_VAR 0 1
65382: PUSH
65383: LD_INT 1
65385: PUSH
65386: LD_INT 2
65388: PUSH
65389: LD_INT 3
65391: PUSH
65392: LD_INT 4
65394: PUSH
65395: LD_INT 5
65397: PUSH
65398: LD_INT 6
65400: PUSH
65401: LD_INT 7
65403: PUSH
65404: LD_INT 8
65406: PUSH
65407: LD_INT 9
65409: PUSH
65410: LD_INT 10
65412: PUSH
65413: LD_INT 11
65415: PUSH
65416: LD_INT 12
65418: PUSH
65419: LD_INT 13
65421: PUSH
65422: LD_INT 14
65424: PUSH
65425: LD_INT 15
65427: PUSH
65428: LD_INT 16
65430: PUSH
65431: LD_INT 17
65433: PUSH
65434: LD_INT 18
65436: PUSH
65437: LD_INT 19
65439: PUSH
65440: LD_INT 20
65442: PUSH
65443: LD_INT 21
65445: PUSH
65446: LD_INT 22
65448: PUSH
65449: LD_INT 23
65451: PUSH
65452: LD_INT 24
65454: PUSH
65455: LD_INT 25
65457: PUSH
65458: LD_INT 26
65460: PUSH
65461: LD_INT 27
65463: PUSH
65464: LD_INT 28
65466: PUSH
65467: LD_INT 30
65469: PUSH
65470: LD_INT 31
65472: PUSH
65473: LD_INT 32
65475: PUSH
65476: LD_INT 33
65478: PUSH
65479: LD_INT 34
65481: PUSH
65482: LD_INT 36
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 101
65523: PUSH
65524: LD_INT 102
65526: PUSH
65527: LD_INT 103
65529: PUSH
65530: LD_INT 104
65532: PUSH
65533: LD_INT 105
65535: PUSH
65536: LD_INT 106
65538: PUSH
65539: LD_INT 107
65541: PUSH
65542: LD_INT 108
65544: PUSH
65545: LD_INT 109
65547: PUSH
65548: LD_INT 110
65550: PUSH
65551: LD_INT 111
65553: PUSH
65554: LD_INT 112
65556: PUSH
65557: LD_INT 113
65559: PUSH
65560: LD_INT 114
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: ST_TO_ADDR
65583: GO 66954
65585: LD_INT 13
65587: DOUBLE
65588: EQUAL
65589: IFTRUE 65593
65591: GO 65789
65593: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
65594: LD_ADDR_VAR 0 1
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: LD_INT 2
65604: PUSH
65605: LD_INT 3
65607: PUSH
65608: LD_INT 4
65610: PUSH
65611: LD_INT 5
65613: PUSH
65614: LD_INT 8
65616: PUSH
65617: LD_INT 9
65619: PUSH
65620: LD_INT 10
65622: PUSH
65623: LD_INT 11
65625: PUSH
65626: LD_INT 12
65628: PUSH
65629: LD_INT 14
65631: PUSH
65632: LD_INT 15
65634: PUSH
65635: LD_INT 16
65637: PUSH
65638: LD_INT 17
65640: PUSH
65641: LD_INT 18
65643: PUSH
65644: LD_INT 19
65646: PUSH
65647: LD_INT 20
65649: PUSH
65650: LD_INT 21
65652: PUSH
65653: LD_INT 22
65655: PUSH
65656: LD_INT 23
65658: PUSH
65659: LD_INT 24
65661: PUSH
65662: LD_INT 25
65664: PUSH
65665: LD_INT 26
65667: PUSH
65668: LD_INT 27
65670: PUSH
65671: LD_INT 28
65673: PUSH
65674: LD_INT 30
65676: PUSH
65677: LD_INT 31
65679: PUSH
65680: LD_INT 32
65682: PUSH
65683: LD_INT 33
65685: PUSH
65686: LD_INT 34
65688: PUSH
65689: LD_INT 36
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 101
65727: PUSH
65728: LD_INT 102
65730: PUSH
65731: LD_INT 103
65733: PUSH
65734: LD_INT 104
65736: PUSH
65737: LD_INT 105
65739: PUSH
65740: LD_INT 106
65742: PUSH
65743: LD_INT 107
65745: PUSH
65746: LD_INT 108
65748: PUSH
65749: LD_INT 109
65751: PUSH
65752: LD_INT 110
65754: PUSH
65755: LD_INT 111
65757: PUSH
65758: LD_INT 112
65760: PUSH
65761: LD_INT 113
65763: PUSH
65764: LD_INT 114
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: ST_TO_ADDR
65787: GO 66954
65789: LD_INT 14
65791: DOUBLE
65792: EQUAL
65793: IFTRUE 65797
65795: GO 66009
65797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
65798: LD_ADDR_VAR 0 1
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: LD_INT 2
65808: PUSH
65809: LD_INT 3
65811: PUSH
65812: LD_INT 4
65814: PUSH
65815: LD_INT 5
65817: PUSH
65818: LD_INT 6
65820: PUSH
65821: LD_INT 7
65823: PUSH
65824: LD_INT 8
65826: PUSH
65827: LD_INT 9
65829: PUSH
65830: LD_INT 10
65832: PUSH
65833: LD_INT 11
65835: PUSH
65836: LD_INT 12
65838: PUSH
65839: LD_INT 13
65841: PUSH
65842: LD_INT 14
65844: PUSH
65845: LD_INT 15
65847: PUSH
65848: LD_INT 16
65850: PUSH
65851: LD_INT 17
65853: PUSH
65854: LD_INT 18
65856: PUSH
65857: LD_INT 19
65859: PUSH
65860: LD_INT 20
65862: PUSH
65863: LD_INT 21
65865: PUSH
65866: LD_INT 22
65868: PUSH
65869: LD_INT 23
65871: PUSH
65872: LD_INT 24
65874: PUSH
65875: LD_INT 25
65877: PUSH
65878: LD_INT 26
65880: PUSH
65881: LD_INT 27
65883: PUSH
65884: LD_INT 28
65886: PUSH
65887: LD_INT 29
65889: PUSH
65890: LD_INT 30
65892: PUSH
65893: LD_INT 31
65895: PUSH
65896: LD_INT 32
65898: PUSH
65899: LD_INT 33
65901: PUSH
65902: LD_INT 34
65904: PUSH
65905: LD_INT 36
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 101
65947: PUSH
65948: LD_INT 102
65950: PUSH
65951: LD_INT 103
65953: PUSH
65954: LD_INT 104
65956: PUSH
65957: LD_INT 105
65959: PUSH
65960: LD_INT 106
65962: PUSH
65963: LD_INT 107
65965: PUSH
65966: LD_INT 108
65968: PUSH
65969: LD_INT 109
65971: PUSH
65972: LD_INT 110
65974: PUSH
65975: LD_INT 111
65977: PUSH
65978: LD_INT 112
65980: PUSH
65981: LD_INT 113
65983: PUSH
65984: LD_INT 114
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: ST_TO_ADDR
66007: GO 66954
66009: LD_INT 15
66011: DOUBLE
66012: EQUAL
66013: IFTRUE 66017
66015: GO 66229
66017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
66018: LD_ADDR_VAR 0 1
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: LD_INT 2
66028: PUSH
66029: LD_INT 3
66031: PUSH
66032: LD_INT 4
66034: PUSH
66035: LD_INT 5
66037: PUSH
66038: LD_INT 6
66040: PUSH
66041: LD_INT 7
66043: PUSH
66044: LD_INT 8
66046: PUSH
66047: LD_INT 9
66049: PUSH
66050: LD_INT 10
66052: PUSH
66053: LD_INT 11
66055: PUSH
66056: LD_INT 12
66058: PUSH
66059: LD_INT 13
66061: PUSH
66062: LD_INT 14
66064: PUSH
66065: LD_INT 15
66067: PUSH
66068: LD_INT 16
66070: PUSH
66071: LD_INT 17
66073: PUSH
66074: LD_INT 18
66076: PUSH
66077: LD_INT 19
66079: PUSH
66080: LD_INT 20
66082: PUSH
66083: LD_INT 21
66085: PUSH
66086: LD_INT 22
66088: PUSH
66089: LD_INT 23
66091: PUSH
66092: LD_INT 24
66094: PUSH
66095: LD_INT 25
66097: PUSH
66098: LD_INT 26
66100: PUSH
66101: LD_INT 27
66103: PUSH
66104: LD_INT 28
66106: PUSH
66107: LD_INT 29
66109: PUSH
66110: LD_INT 30
66112: PUSH
66113: LD_INT 31
66115: PUSH
66116: LD_INT 32
66118: PUSH
66119: LD_INT 33
66121: PUSH
66122: LD_INT 34
66124: PUSH
66125: LD_INT 36
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 101
66167: PUSH
66168: LD_INT 102
66170: PUSH
66171: LD_INT 103
66173: PUSH
66174: LD_INT 104
66176: PUSH
66177: LD_INT 105
66179: PUSH
66180: LD_INT 106
66182: PUSH
66183: LD_INT 107
66185: PUSH
66186: LD_INT 108
66188: PUSH
66189: LD_INT 109
66191: PUSH
66192: LD_INT 110
66194: PUSH
66195: LD_INT 111
66197: PUSH
66198: LD_INT 112
66200: PUSH
66201: LD_INT 113
66203: PUSH
66204: LD_INT 114
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: ST_TO_ADDR
66227: GO 66954
66229: LD_INT 16
66231: DOUBLE
66232: EQUAL
66233: IFTRUE 66237
66235: GO 66361
66237: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
66238: LD_ADDR_VAR 0 1
66242: PUSH
66243: LD_INT 2
66245: PUSH
66246: LD_INT 4
66248: PUSH
66249: LD_INT 5
66251: PUSH
66252: LD_INT 7
66254: PUSH
66255: LD_INT 11
66257: PUSH
66258: LD_INT 12
66260: PUSH
66261: LD_INT 15
66263: PUSH
66264: LD_INT 16
66266: PUSH
66267: LD_INT 20
66269: PUSH
66270: LD_INT 21
66272: PUSH
66273: LD_INT 22
66275: PUSH
66276: LD_INT 23
66278: PUSH
66279: LD_INT 25
66281: PUSH
66282: LD_INT 26
66284: PUSH
66285: LD_INT 30
66287: PUSH
66288: LD_INT 31
66290: PUSH
66291: LD_INT 32
66293: PUSH
66294: LD_INT 33
66296: PUSH
66297: LD_INT 34
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 101
66323: PUSH
66324: LD_INT 102
66326: PUSH
66327: LD_INT 103
66329: PUSH
66330: LD_INT 106
66332: PUSH
66333: LD_INT 108
66335: PUSH
66336: LD_INT 112
66338: PUSH
66339: LD_INT 113
66341: PUSH
66342: LD_INT 114
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: ST_TO_ADDR
66359: GO 66954
66361: LD_INT 17
66363: DOUBLE
66364: EQUAL
66365: IFTRUE 66369
66367: GO 66581
66369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
66370: LD_ADDR_VAR 0 1
66374: PUSH
66375: LD_INT 1
66377: PUSH
66378: LD_INT 2
66380: PUSH
66381: LD_INT 3
66383: PUSH
66384: LD_INT 4
66386: PUSH
66387: LD_INT 5
66389: PUSH
66390: LD_INT 6
66392: PUSH
66393: LD_INT 7
66395: PUSH
66396: LD_INT 8
66398: PUSH
66399: LD_INT 9
66401: PUSH
66402: LD_INT 10
66404: PUSH
66405: LD_INT 11
66407: PUSH
66408: LD_INT 12
66410: PUSH
66411: LD_INT 13
66413: PUSH
66414: LD_INT 14
66416: PUSH
66417: LD_INT 15
66419: PUSH
66420: LD_INT 16
66422: PUSH
66423: LD_INT 17
66425: PUSH
66426: LD_INT 18
66428: PUSH
66429: LD_INT 19
66431: PUSH
66432: LD_INT 20
66434: PUSH
66435: LD_INT 21
66437: PUSH
66438: LD_INT 22
66440: PUSH
66441: LD_INT 23
66443: PUSH
66444: LD_INT 24
66446: PUSH
66447: LD_INT 25
66449: PUSH
66450: LD_INT 26
66452: PUSH
66453: LD_INT 27
66455: PUSH
66456: LD_INT 28
66458: PUSH
66459: LD_INT 29
66461: PUSH
66462: LD_INT 30
66464: PUSH
66465: LD_INT 31
66467: PUSH
66468: LD_INT 32
66470: PUSH
66471: LD_INT 33
66473: PUSH
66474: LD_INT 34
66476: PUSH
66477: LD_INT 36
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 101
66519: PUSH
66520: LD_INT 102
66522: PUSH
66523: LD_INT 103
66525: PUSH
66526: LD_INT 104
66528: PUSH
66529: LD_INT 105
66531: PUSH
66532: LD_INT 106
66534: PUSH
66535: LD_INT 107
66537: PUSH
66538: LD_INT 108
66540: PUSH
66541: LD_INT 109
66543: PUSH
66544: LD_INT 110
66546: PUSH
66547: LD_INT 111
66549: PUSH
66550: LD_INT 112
66552: PUSH
66553: LD_INT 113
66555: PUSH
66556: LD_INT 114
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: ST_TO_ADDR
66579: GO 66954
66581: LD_INT 18
66583: DOUBLE
66584: EQUAL
66585: IFTRUE 66589
66587: GO 66725
66589: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
66590: LD_ADDR_VAR 0 1
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: LD_INT 4
66600: PUSH
66601: LD_INT 5
66603: PUSH
66604: LD_INT 7
66606: PUSH
66607: LD_INT 11
66609: PUSH
66610: LD_INT 12
66612: PUSH
66613: LD_INT 15
66615: PUSH
66616: LD_INT 16
66618: PUSH
66619: LD_INT 20
66621: PUSH
66622: LD_INT 21
66624: PUSH
66625: LD_INT 22
66627: PUSH
66628: LD_INT 23
66630: PUSH
66631: LD_INT 25
66633: PUSH
66634: LD_INT 26
66636: PUSH
66637: LD_INT 30
66639: PUSH
66640: LD_INT 31
66642: PUSH
66643: LD_INT 32
66645: PUSH
66646: LD_INT 33
66648: PUSH
66649: LD_INT 34
66651: PUSH
66652: LD_INT 35
66654: PUSH
66655: LD_INT 36
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 101
66683: PUSH
66684: LD_INT 102
66686: PUSH
66687: LD_INT 103
66689: PUSH
66690: LD_INT 106
66692: PUSH
66693: LD_INT 108
66695: PUSH
66696: LD_INT 112
66698: PUSH
66699: LD_INT 113
66701: PUSH
66702: LD_INT 114
66704: PUSH
66705: LD_INT 115
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: ST_TO_ADDR
66723: GO 66954
66725: LD_INT 19
66727: DOUBLE
66728: EQUAL
66729: IFTRUE 66733
66731: GO 66953
66733: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
66734: LD_ADDR_VAR 0 1
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: LD_INT 2
66744: PUSH
66745: LD_INT 3
66747: PUSH
66748: LD_INT 4
66750: PUSH
66751: LD_INT 5
66753: PUSH
66754: LD_INT 6
66756: PUSH
66757: LD_INT 7
66759: PUSH
66760: LD_INT 8
66762: PUSH
66763: LD_INT 9
66765: PUSH
66766: LD_INT 10
66768: PUSH
66769: LD_INT 11
66771: PUSH
66772: LD_INT 12
66774: PUSH
66775: LD_INT 13
66777: PUSH
66778: LD_INT 14
66780: PUSH
66781: LD_INT 15
66783: PUSH
66784: LD_INT 16
66786: PUSH
66787: LD_INT 17
66789: PUSH
66790: LD_INT 18
66792: PUSH
66793: LD_INT 19
66795: PUSH
66796: LD_INT 20
66798: PUSH
66799: LD_INT 21
66801: PUSH
66802: LD_INT 22
66804: PUSH
66805: LD_INT 23
66807: PUSH
66808: LD_INT 24
66810: PUSH
66811: LD_INT 25
66813: PUSH
66814: LD_INT 26
66816: PUSH
66817: LD_INT 27
66819: PUSH
66820: LD_INT 28
66822: PUSH
66823: LD_INT 29
66825: PUSH
66826: LD_INT 30
66828: PUSH
66829: LD_INT 31
66831: PUSH
66832: LD_INT 32
66834: PUSH
66835: LD_INT 33
66837: PUSH
66838: LD_INT 34
66840: PUSH
66841: LD_INT 35
66843: PUSH
66844: LD_INT 36
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 101
66887: PUSH
66888: LD_INT 102
66890: PUSH
66891: LD_INT 103
66893: PUSH
66894: LD_INT 104
66896: PUSH
66897: LD_INT 105
66899: PUSH
66900: LD_INT 106
66902: PUSH
66903: LD_INT 107
66905: PUSH
66906: LD_INT 108
66908: PUSH
66909: LD_INT 109
66911: PUSH
66912: LD_INT 110
66914: PUSH
66915: LD_INT 111
66917: PUSH
66918: LD_INT 112
66920: PUSH
66921: LD_INT 113
66923: PUSH
66924: LD_INT 114
66926: PUSH
66927: LD_INT 115
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: ST_TO_ADDR
66951: GO 66954
66953: POP
// end else
66954: GO 67173
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
66956: LD_ADDR_VAR 0 1
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: LD_INT 2
66966: PUSH
66967: LD_INT 3
66969: PUSH
66970: LD_INT 4
66972: PUSH
66973: LD_INT 5
66975: PUSH
66976: LD_INT 6
66978: PUSH
66979: LD_INT 7
66981: PUSH
66982: LD_INT 8
66984: PUSH
66985: LD_INT 9
66987: PUSH
66988: LD_INT 10
66990: PUSH
66991: LD_INT 11
66993: PUSH
66994: LD_INT 12
66996: PUSH
66997: LD_INT 13
66999: PUSH
67000: LD_INT 14
67002: PUSH
67003: LD_INT 15
67005: PUSH
67006: LD_INT 16
67008: PUSH
67009: LD_INT 17
67011: PUSH
67012: LD_INT 18
67014: PUSH
67015: LD_INT 19
67017: PUSH
67018: LD_INT 20
67020: PUSH
67021: LD_INT 21
67023: PUSH
67024: LD_INT 22
67026: PUSH
67027: LD_INT 23
67029: PUSH
67030: LD_INT 24
67032: PUSH
67033: LD_INT 25
67035: PUSH
67036: LD_INT 26
67038: PUSH
67039: LD_INT 27
67041: PUSH
67042: LD_INT 28
67044: PUSH
67045: LD_INT 29
67047: PUSH
67048: LD_INT 30
67050: PUSH
67051: LD_INT 31
67053: PUSH
67054: LD_INT 32
67056: PUSH
67057: LD_INT 33
67059: PUSH
67060: LD_INT 34
67062: PUSH
67063: LD_INT 35
67065: PUSH
67066: LD_INT 36
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 101
67109: PUSH
67110: LD_INT 102
67112: PUSH
67113: LD_INT 103
67115: PUSH
67116: LD_INT 104
67118: PUSH
67119: LD_INT 105
67121: PUSH
67122: LD_INT 106
67124: PUSH
67125: LD_INT 107
67127: PUSH
67128: LD_INT 108
67130: PUSH
67131: LD_INT 109
67133: PUSH
67134: LD_INT 110
67136: PUSH
67137: LD_INT 111
67139: PUSH
67140: LD_INT 112
67142: PUSH
67143: LD_INT 113
67145: PUSH
67146: LD_INT 114
67148: PUSH
67149: LD_INT 115
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: ST_TO_ADDR
// if result then
67173: LD_VAR 0 1
67177: IFFALSE 67466
// begin normal :=  ;
67179: LD_ADDR_VAR 0 3
67183: PUSH
67184: LD_STRING 
67186: ST_TO_ADDR
// hardcore :=  ;
67187: LD_ADDR_VAR 0 4
67191: PUSH
67192: LD_STRING 
67194: ST_TO_ADDR
// for i = 1 to normalCounter do
67195: LD_ADDR_VAR 0 5
67199: PUSH
67200: DOUBLE
67201: LD_INT 1
67203: DEC
67204: ST_TO_ADDR
67205: LD_EXP 72
67209: PUSH
67210: FOR_TO
67211: IFFALSE 67312
// begin tmp := 0 ;
67213: LD_ADDR_VAR 0 2
67217: PUSH
67218: LD_STRING 0
67220: ST_TO_ADDR
// if result [ 1 ] then
67221: LD_VAR 0 1
67225: PUSH
67226: LD_INT 1
67228: ARRAY
67229: IFFALSE 67294
// if result [ 1 ] [ 1 ] = i then
67231: LD_VAR 0 1
67235: PUSH
67236: LD_INT 1
67238: ARRAY
67239: PUSH
67240: LD_INT 1
67242: ARRAY
67243: PUSH
67244: LD_VAR 0 5
67248: EQUAL
67249: IFFALSE 67294
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
67251: LD_ADDR_VAR 0 1
67255: PUSH
67256: LD_VAR 0 1
67260: PPUSH
67261: LD_INT 1
67263: PPUSH
67264: LD_VAR 0 1
67268: PUSH
67269: LD_INT 1
67271: ARRAY
67272: PPUSH
67273: LD_INT 1
67275: PPUSH
67276: CALL_OW 3
67280: PPUSH
67281: CALL_OW 1
67285: ST_TO_ADDR
// tmp := 1 ;
67286: LD_ADDR_VAR 0 2
67290: PUSH
67291: LD_STRING 1
67293: ST_TO_ADDR
// end ; normal := normal & tmp ;
67294: LD_ADDR_VAR 0 3
67298: PUSH
67299: LD_VAR 0 3
67303: PUSH
67304: LD_VAR 0 2
67308: STR
67309: ST_TO_ADDR
// end ;
67310: GO 67210
67312: POP
67313: POP
// for i = 1 to hardcoreCounter do
67314: LD_ADDR_VAR 0 5
67318: PUSH
67319: DOUBLE
67320: LD_INT 1
67322: DEC
67323: ST_TO_ADDR
67324: LD_EXP 73
67328: PUSH
67329: FOR_TO
67330: IFFALSE 67435
// begin tmp := 0 ;
67332: LD_ADDR_VAR 0 2
67336: PUSH
67337: LD_STRING 0
67339: ST_TO_ADDR
// if result [ 2 ] then
67340: LD_VAR 0 1
67344: PUSH
67345: LD_INT 2
67347: ARRAY
67348: IFFALSE 67417
// if result [ 2 ] [ 1 ] = 100 + i then
67350: LD_VAR 0 1
67354: PUSH
67355: LD_INT 2
67357: ARRAY
67358: PUSH
67359: LD_INT 1
67361: ARRAY
67362: PUSH
67363: LD_INT 100
67365: PUSH
67366: LD_VAR 0 5
67370: PLUS
67371: EQUAL
67372: IFFALSE 67417
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67374: LD_ADDR_VAR 0 1
67378: PUSH
67379: LD_VAR 0 1
67383: PPUSH
67384: LD_INT 2
67386: PPUSH
67387: LD_VAR 0 1
67391: PUSH
67392: LD_INT 2
67394: ARRAY
67395: PPUSH
67396: LD_INT 1
67398: PPUSH
67399: CALL_OW 3
67403: PPUSH
67404: CALL_OW 1
67408: ST_TO_ADDR
// tmp := 1 ;
67409: LD_ADDR_VAR 0 2
67413: PUSH
67414: LD_STRING 1
67416: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67417: LD_ADDR_VAR 0 4
67421: PUSH
67422: LD_VAR 0 4
67426: PUSH
67427: LD_VAR 0 2
67431: STR
67432: ST_TO_ADDR
// end ;
67433: GO 67329
67435: POP
67436: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
67437: LD_STRING getStreamItemsFromMission("
67439: PUSH
67440: LD_VAR 0 3
67444: STR
67445: PUSH
67446: LD_STRING ","
67448: STR
67449: PUSH
67450: LD_VAR 0 4
67454: STR
67455: PUSH
67456: LD_STRING ")
67458: STR
67459: PPUSH
67460: CALL_OW 559
// end else
67464: GO 67473
// ToLua ( getStreamItemsFromMission("","") ) ;
67466: LD_STRING getStreamItemsFromMission("","")
67468: PPUSH
67469: CALL_OW 559
// end ;
67473: LD_VAR 0 1
67477: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67478: LD_EXP 71
67482: PUSH
67483: LD_EXP 76
67487: AND
67488: IFFALSE 67612
67490: GO 67492
67492: DISABLE
67493: LD_INT 0
67495: PPUSH
67496: PPUSH
// begin enable ;
67497: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67498: LD_ADDR_VAR 0 2
67502: PUSH
67503: LD_INT 22
67505: PUSH
67506: LD_OWVAR 2
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 2
67517: PUSH
67518: LD_INT 34
67520: PUSH
67521: LD_INT 7
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 34
67530: PUSH
67531: LD_INT 45
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 34
67540: PUSH
67541: LD_INT 28
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 34
67550: PUSH
67551: LD_INT 47
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PPUSH
67569: CALL_OW 69
67573: ST_TO_ADDR
// if not tmp then
67574: LD_VAR 0 2
67578: NOT
67579: IFFALSE 67583
// exit ;
67581: GO 67612
// for i in tmp do
67583: LD_ADDR_VAR 0 1
67587: PUSH
67588: LD_VAR 0 2
67592: PUSH
67593: FOR_IN
67594: IFFALSE 67610
// begin SetLives ( i , 0 ) ;
67596: LD_VAR 0 1
67600: PPUSH
67601: LD_INT 0
67603: PPUSH
67604: CALL_OW 234
// end ;
67608: GO 67593
67610: POP
67611: POP
// end ;
67612: PPOPN 2
67614: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67615: LD_EXP 71
67619: PUSH
67620: LD_EXP 77
67624: AND
67625: IFFALSE 67709
67627: GO 67629
67629: DISABLE
67630: LD_INT 0
67632: PPUSH
67633: PPUSH
// begin enable ;
67634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67635: LD_ADDR_VAR 0 2
67639: PUSH
67640: LD_INT 22
67642: PUSH
67643: LD_OWVAR 2
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 32
67654: PUSH
67655: LD_INT 3
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PPUSH
67666: CALL_OW 69
67670: ST_TO_ADDR
// if not tmp then
67671: LD_VAR 0 2
67675: NOT
67676: IFFALSE 67680
// exit ;
67678: GO 67709
// for i in tmp do
67680: LD_ADDR_VAR 0 1
67684: PUSH
67685: LD_VAR 0 2
67689: PUSH
67690: FOR_IN
67691: IFFALSE 67707
// begin SetLives ( i , 0 ) ;
67693: LD_VAR 0 1
67697: PPUSH
67698: LD_INT 0
67700: PPUSH
67701: CALL_OW 234
// end ;
67705: GO 67690
67707: POP
67708: POP
// end ;
67709: PPOPN 2
67711: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67712: LD_EXP 71
67716: PUSH
67717: LD_EXP 74
67721: AND
67722: IFFALSE 67815
67724: GO 67726
67726: DISABLE
67727: LD_INT 0
67729: PPUSH
// begin enable ;
67730: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67731: LD_ADDR_VAR 0 1
67735: PUSH
67736: LD_INT 22
67738: PUSH
67739: LD_OWVAR 2
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 2
67750: PUSH
67751: LD_INT 25
67753: PUSH
67754: LD_INT 5
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 25
67763: PUSH
67764: LD_INT 9
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 25
67773: PUSH
67774: LD_INT 8
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PPUSH
67791: CALL_OW 69
67795: PUSH
67796: FOR_IN
67797: IFFALSE 67813
// begin SetClass ( i , 1 ) ;
67799: LD_VAR 0 1
67803: PPUSH
67804: LD_INT 1
67806: PPUSH
67807: CALL_OW 336
// end ;
67811: GO 67796
67813: POP
67814: POP
// end ;
67815: PPOPN 1
67817: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67818: LD_EXP 71
67822: PUSH
67823: LD_EXP 75
67827: AND
67828: PUSH
67829: LD_OWVAR 65
67833: PUSH
67834: LD_INT 7
67836: LESS
67837: AND
67838: IFFALSE 67852
67840: GO 67842
67842: DISABLE
// begin enable ;
67843: ENABLE
// game_speed := 7 ;
67844: LD_ADDR_OWVAR 65
67848: PUSH
67849: LD_INT 7
67851: ST_TO_ADDR
// end ;
67852: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67853: LD_EXP 71
67857: PUSH
67858: LD_EXP 78
67862: AND
67863: IFFALSE 68065
67865: GO 67867
67867: DISABLE
67868: LD_INT 0
67870: PPUSH
67871: PPUSH
67872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67873: LD_ADDR_VAR 0 3
67877: PUSH
67878: LD_INT 81
67880: PUSH
67881: LD_OWVAR 2
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 21
67892: PUSH
67893: LD_INT 1
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PPUSH
67904: CALL_OW 69
67908: ST_TO_ADDR
// if not tmp then
67909: LD_VAR 0 3
67913: NOT
67914: IFFALSE 67918
// exit ;
67916: GO 68065
// if tmp > 5 then
67918: LD_VAR 0 3
67922: PUSH
67923: LD_INT 5
67925: GREATER
67926: IFFALSE 67938
// k := 5 else
67928: LD_ADDR_VAR 0 2
67932: PUSH
67933: LD_INT 5
67935: ST_TO_ADDR
67936: GO 67948
// k := tmp ;
67938: LD_ADDR_VAR 0 2
67942: PUSH
67943: LD_VAR 0 3
67947: ST_TO_ADDR
// for i := 1 to k do
67948: LD_ADDR_VAR 0 1
67952: PUSH
67953: DOUBLE
67954: LD_INT 1
67956: DEC
67957: ST_TO_ADDR
67958: LD_VAR 0 2
67962: PUSH
67963: FOR_TO
67964: IFFALSE 68063
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67966: LD_VAR 0 3
67970: PUSH
67971: LD_VAR 0 1
67975: ARRAY
67976: PPUSH
67977: LD_VAR 0 1
67981: PUSH
67982: LD_INT 4
67984: MOD
67985: PUSH
67986: LD_INT 1
67988: PLUS
67989: PPUSH
67990: CALL_OW 259
67994: PUSH
67995: LD_INT 10
67997: LESS
67998: IFFALSE 68061
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68000: LD_VAR 0 3
68004: PUSH
68005: LD_VAR 0 1
68009: ARRAY
68010: PPUSH
68011: LD_VAR 0 1
68015: PUSH
68016: LD_INT 4
68018: MOD
68019: PUSH
68020: LD_INT 1
68022: PLUS
68023: PPUSH
68024: LD_VAR 0 3
68028: PUSH
68029: LD_VAR 0 1
68033: ARRAY
68034: PPUSH
68035: LD_VAR 0 1
68039: PUSH
68040: LD_INT 4
68042: MOD
68043: PUSH
68044: LD_INT 1
68046: PLUS
68047: PPUSH
68048: CALL_OW 259
68052: PUSH
68053: LD_INT 1
68055: PLUS
68056: PPUSH
68057: CALL_OW 237
68061: GO 67963
68063: POP
68064: POP
// end ;
68065: PPOPN 3
68067: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
68068: LD_EXP 71
68072: PUSH
68073: LD_EXP 79
68077: AND
68078: IFFALSE 68098
68080: GO 68082
68082: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
68083: LD_INT 4
68085: PPUSH
68086: LD_OWVAR 2
68090: PPUSH
68091: LD_INT 0
68093: PPUSH
68094: CALL_OW 324
68098: END
// every 0 0$1 trigger StreamModeActive and sShovel do
68099: LD_EXP 71
68103: PUSH
68104: LD_EXP 108
68108: AND
68109: IFFALSE 68129
68111: GO 68113
68113: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
68114: LD_INT 19
68116: PPUSH
68117: LD_OWVAR 2
68121: PPUSH
68122: LD_INT 0
68124: PPUSH
68125: CALL_OW 324
68129: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
68130: LD_EXP 71
68134: PUSH
68135: LD_EXP 80
68139: AND
68140: IFFALSE 68242
68142: GO 68144
68144: DISABLE
68145: LD_INT 0
68147: PPUSH
68148: PPUSH
// begin enable ;
68149: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
68150: LD_ADDR_VAR 0 2
68154: PUSH
68155: LD_INT 22
68157: PUSH
68158: LD_OWVAR 2
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 2
68169: PUSH
68170: LD_INT 34
68172: PUSH
68173: LD_INT 11
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 34
68182: PUSH
68183: LD_INT 30
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: LIST
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PPUSH
68199: CALL_OW 69
68203: ST_TO_ADDR
// if not tmp then
68204: LD_VAR 0 2
68208: NOT
68209: IFFALSE 68213
// exit ;
68211: GO 68242
// for i in tmp do
68213: LD_ADDR_VAR 0 1
68217: PUSH
68218: LD_VAR 0 2
68222: PUSH
68223: FOR_IN
68224: IFFALSE 68240
// begin SetLives ( i , 0 ) ;
68226: LD_VAR 0 1
68230: PPUSH
68231: LD_INT 0
68233: PPUSH
68234: CALL_OW 234
// end ;
68238: GO 68223
68240: POP
68241: POP
// end ;
68242: PPOPN 2
68244: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68245: LD_EXP 71
68249: PUSH
68250: LD_EXP 81
68254: AND
68255: IFFALSE 68275
68257: GO 68259
68259: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68260: LD_INT 32
68262: PPUSH
68263: LD_OWVAR 2
68267: PPUSH
68268: LD_INT 0
68270: PPUSH
68271: CALL_OW 324
68275: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68276: LD_EXP 71
68280: PUSH
68281: LD_EXP 82
68285: AND
68286: IFFALSE 68467
68288: GO 68290
68290: DISABLE
68291: LD_INT 0
68293: PPUSH
68294: PPUSH
68295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68296: LD_ADDR_VAR 0 2
68300: PUSH
68301: LD_INT 22
68303: PUSH
68304: LD_OWVAR 2
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 33
68315: PUSH
68316: LD_INT 3
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PPUSH
68327: CALL_OW 69
68331: ST_TO_ADDR
// if not tmp then
68332: LD_VAR 0 2
68336: NOT
68337: IFFALSE 68341
// exit ;
68339: GO 68467
// side := 0 ;
68341: LD_ADDR_VAR 0 3
68345: PUSH
68346: LD_INT 0
68348: ST_TO_ADDR
// for i := 1 to 8 do
68349: LD_ADDR_VAR 0 1
68353: PUSH
68354: DOUBLE
68355: LD_INT 1
68357: DEC
68358: ST_TO_ADDR
68359: LD_INT 8
68361: PUSH
68362: FOR_TO
68363: IFFALSE 68411
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68365: LD_OWVAR 2
68369: PUSH
68370: LD_VAR 0 1
68374: NONEQUAL
68375: PUSH
68376: LD_OWVAR 2
68380: PPUSH
68381: LD_VAR 0 1
68385: PPUSH
68386: CALL_OW 81
68390: PUSH
68391: LD_INT 2
68393: EQUAL
68394: AND
68395: IFFALSE 68409
// begin side := i ;
68397: LD_ADDR_VAR 0 3
68401: PUSH
68402: LD_VAR 0 1
68406: ST_TO_ADDR
// break ;
68407: GO 68411
// end ;
68409: GO 68362
68411: POP
68412: POP
// if not side then
68413: LD_VAR 0 3
68417: NOT
68418: IFFALSE 68422
// exit ;
68420: GO 68467
// for i := 1 to tmp do
68422: LD_ADDR_VAR 0 1
68426: PUSH
68427: DOUBLE
68428: LD_INT 1
68430: DEC
68431: ST_TO_ADDR
68432: LD_VAR 0 2
68436: PUSH
68437: FOR_TO
68438: IFFALSE 68465
// if Prob ( 60 ) then
68440: LD_INT 60
68442: PPUSH
68443: CALL_OW 13
68447: IFFALSE 68463
// SetSide ( i , side ) ;
68449: LD_VAR 0 1
68453: PPUSH
68454: LD_VAR 0 3
68458: PPUSH
68459: CALL_OW 235
68463: GO 68437
68465: POP
68466: POP
// end ;
68467: PPOPN 3
68469: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68470: LD_EXP 71
68474: PUSH
68475: LD_EXP 84
68479: AND
68480: IFFALSE 68599
68482: GO 68484
68484: DISABLE
68485: LD_INT 0
68487: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68488: LD_ADDR_VAR 0 1
68492: PUSH
68493: LD_INT 22
68495: PUSH
68496: LD_OWVAR 2
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 21
68507: PUSH
68508: LD_INT 1
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 3
68517: PUSH
68518: LD_INT 23
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: LIST
68536: PPUSH
68537: CALL_OW 69
68541: PUSH
68542: FOR_IN
68543: IFFALSE 68597
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68545: LD_VAR 0 1
68549: PPUSH
68550: CALL_OW 257
68554: PUSH
68555: LD_INT 1
68557: PUSH
68558: LD_INT 2
68560: PUSH
68561: LD_INT 3
68563: PUSH
68564: LD_INT 4
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: IN
68573: IFFALSE 68595
// SetClass ( un , rand ( 1 , 4 ) ) ;
68575: LD_VAR 0 1
68579: PPUSH
68580: LD_INT 1
68582: PPUSH
68583: LD_INT 4
68585: PPUSH
68586: CALL_OW 12
68590: PPUSH
68591: CALL_OW 336
68595: GO 68542
68597: POP
68598: POP
// end ;
68599: PPOPN 1
68601: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68602: LD_EXP 71
68606: PUSH
68607: LD_EXP 83
68611: AND
68612: IFFALSE 68691
68614: GO 68616
68616: DISABLE
68617: LD_INT 0
68619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68620: LD_ADDR_VAR 0 1
68624: PUSH
68625: LD_INT 22
68627: PUSH
68628: LD_OWVAR 2
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 21
68639: PUSH
68640: LD_INT 3
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PPUSH
68651: CALL_OW 69
68655: ST_TO_ADDR
// if not tmp then
68656: LD_VAR 0 1
68660: NOT
68661: IFFALSE 68665
// exit ;
68663: GO 68691
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68665: LD_VAR 0 1
68669: PUSH
68670: LD_INT 1
68672: PPUSH
68673: LD_VAR 0 1
68677: PPUSH
68678: CALL_OW 12
68682: ARRAY
68683: PPUSH
68684: LD_INT 100
68686: PPUSH
68687: CALL_OW 234
// end ;
68691: PPOPN 1
68693: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68694: LD_EXP 71
68698: PUSH
68699: LD_EXP 85
68703: AND
68704: IFFALSE 68802
68706: GO 68708
68708: DISABLE
68709: LD_INT 0
68711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68712: LD_ADDR_VAR 0 1
68716: PUSH
68717: LD_INT 22
68719: PUSH
68720: LD_OWVAR 2
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 21
68731: PUSH
68732: LD_INT 1
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PPUSH
68743: CALL_OW 69
68747: ST_TO_ADDR
// if not tmp then
68748: LD_VAR 0 1
68752: NOT
68753: IFFALSE 68757
// exit ;
68755: GO 68802
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68757: LD_VAR 0 1
68761: PUSH
68762: LD_INT 1
68764: PPUSH
68765: LD_VAR 0 1
68769: PPUSH
68770: CALL_OW 12
68774: ARRAY
68775: PPUSH
68776: LD_INT 1
68778: PPUSH
68779: LD_INT 4
68781: PPUSH
68782: CALL_OW 12
68786: PPUSH
68787: LD_INT 3000
68789: PPUSH
68790: LD_INT 9000
68792: PPUSH
68793: CALL_OW 12
68797: PPUSH
68798: CALL_OW 492
// end ;
68802: PPOPN 1
68804: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68805: LD_EXP 71
68809: PUSH
68810: LD_EXP 86
68814: AND
68815: IFFALSE 68835
68817: GO 68819
68819: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68820: LD_INT 1
68822: PPUSH
68823: LD_OWVAR 2
68827: PPUSH
68828: LD_INT 0
68830: PPUSH
68831: CALL_OW 324
68835: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68836: LD_EXP 71
68840: PUSH
68841: LD_EXP 87
68845: AND
68846: IFFALSE 68929
68848: GO 68850
68850: DISABLE
68851: LD_INT 0
68853: PPUSH
68854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68855: LD_ADDR_VAR 0 2
68859: PUSH
68860: LD_INT 22
68862: PUSH
68863: LD_OWVAR 2
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 21
68874: PUSH
68875: LD_INT 3
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PPUSH
68886: CALL_OW 69
68890: ST_TO_ADDR
// if not tmp then
68891: LD_VAR 0 2
68895: NOT
68896: IFFALSE 68900
// exit ;
68898: GO 68929
// for i in tmp do
68900: LD_ADDR_VAR 0 1
68904: PUSH
68905: LD_VAR 0 2
68909: PUSH
68910: FOR_IN
68911: IFFALSE 68927
// SetBLevel ( i , 10 ) ;
68913: LD_VAR 0 1
68917: PPUSH
68918: LD_INT 10
68920: PPUSH
68921: CALL_OW 241
68925: GO 68910
68927: POP
68928: POP
// end ;
68929: PPOPN 2
68931: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68932: LD_EXP 71
68936: PUSH
68937: LD_EXP 88
68941: AND
68942: IFFALSE 69053
68944: GO 68946
68946: DISABLE
68947: LD_INT 0
68949: PPUSH
68950: PPUSH
68951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68952: LD_ADDR_VAR 0 3
68956: PUSH
68957: LD_INT 22
68959: PUSH
68960: LD_OWVAR 2
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 25
68971: PUSH
68972: LD_INT 1
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PPUSH
68983: CALL_OW 69
68987: ST_TO_ADDR
// if not tmp then
68988: LD_VAR 0 3
68992: NOT
68993: IFFALSE 68997
// exit ;
68995: GO 69053
// un := tmp [ rand ( 1 , tmp ) ] ;
68997: LD_ADDR_VAR 0 2
69001: PUSH
69002: LD_VAR 0 3
69006: PUSH
69007: LD_INT 1
69009: PPUSH
69010: LD_VAR 0 3
69014: PPUSH
69015: CALL_OW 12
69019: ARRAY
69020: ST_TO_ADDR
// if Crawls ( un ) then
69021: LD_VAR 0 2
69025: PPUSH
69026: CALL_OW 318
69030: IFFALSE 69041
// ComWalk ( un ) ;
69032: LD_VAR 0 2
69036: PPUSH
69037: CALL_OW 138
// SetClass ( un , class_sniper ) ;
69041: LD_VAR 0 2
69045: PPUSH
69046: LD_INT 5
69048: PPUSH
69049: CALL_OW 336
// end ;
69053: PPOPN 3
69055: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
69056: LD_EXP 71
69060: PUSH
69061: LD_EXP 89
69065: AND
69066: PUSH
69067: LD_OWVAR 67
69071: PUSH
69072: LD_INT 3
69074: LESS
69075: AND
69076: IFFALSE 69095
69078: GO 69080
69080: DISABLE
// Difficulty := Difficulty + 1 ;
69081: LD_ADDR_OWVAR 67
69085: PUSH
69086: LD_OWVAR 67
69090: PUSH
69091: LD_INT 1
69093: PLUS
69094: ST_TO_ADDR
69095: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
69096: LD_EXP 71
69100: PUSH
69101: LD_EXP 90
69105: AND
69106: IFFALSE 69209
69108: GO 69110
69110: DISABLE
69111: LD_INT 0
69113: PPUSH
// begin for i := 1 to 5 do
69114: LD_ADDR_VAR 0 1
69118: PUSH
69119: DOUBLE
69120: LD_INT 1
69122: DEC
69123: ST_TO_ADDR
69124: LD_INT 5
69126: PUSH
69127: FOR_TO
69128: IFFALSE 69207
// begin uc_nation := nation_nature ;
69130: LD_ADDR_OWVAR 21
69134: PUSH
69135: LD_INT 0
69137: ST_TO_ADDR
// uc_side := 0 ;
69138: LD_ADDR_OWVAR 20
69142: PUSH
69143: LD_INT 0
69145: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69146: LD_ADDR_OWVAR 29
69150: PUSH
69151: LD_INT 12
69153: PUSH
69154: LD_INT 12
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: ST_TO_ADDR
// hc_agressivity := 20 ;
69161: LD_ADDR_OWVAR 35
69165: PUSH
69166: LD_INT 20
69168: ST_TO_ADDR
// hc_class := class_tiger ;
69169: LD_ADDR_OWVAR 28
69173: PUSH
69174: LD_INT 14
69176: ST_TO_ADDR
// hc_gallery :=  ;
69177: LD_ADDR_OWVAR 33
69181: PUSH
69182: LD_STRING 
69184: ST_TO_ADDR
// hc_name :=  ;
69185: LD_ADDR_OWVAR 26
69189: PUSH
69190: LD_STRING 
69192: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69193: CALL_OW 44
69197: PPUSH
69198: LD_INT 0
69200: PPUSH
69201: CALL_OW 51
// end ;
69205: GO 69127
69207: POP
69208: POP
// end ;
69209: PPOPN 1
69211: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69212: LD_EXP 71
69216: PUSH
69217: LD_EXP 91
69221: AND
69222: IFFALSE 69231
69224: GO 69226
69226: DISABLE
// StreamSibBomb ;
69227: CALL 69232 0 0
69231: END
// export function StreamSibBomb ; var i , x , y ; begin
69232: LD_INT 0
69234: PPUSH
69235: PPUSH
69236: PPUSH
69237: PPUSH
// result := false ;
69238: LD_ADDR_VAR 0 1
69242: PUSH
69243: LD_INT 0
69245: ST_TO_ADDR
// for i := 1 to 16 do
69246: LD_ADDR_VAR 0 2
69250: PUSH
69251: DOUBLE
69252: LD_INT 1
69254: DEC
69255: ST_TO_ADDR
69256: LD_INT 16
69258: PUSH
69259: FOR_TO
69260: IFFALSE 69459
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69262: LD_ADDR_VAR 0 3
69266: PUSH
69267: LD_INT 10
69269: PUSH
69270: LD_INT 20
69272: PUSH
69273: LD_INT 30
69275: PUSH
69276: LD_INT 40
69278: PUSH
69279: LD_INT 50
69281: PUSH
69282: LD_INT 60
69284: PUSH
69285: LD_INT 70
69287: PUSH
69288: LD_INT 80
69290: PUSH
69291: LD_INT 90
69293: PUSH
69294: LD_INT 100
69296: PUSH
69297: LD_INT 110
69299: PUSH
69300: LD_INT 120
69302: PUSH
69303: LD_INT 130
69305: PUSH
69306: LD_INT 140
69308: PUSH
69309: LD_INT 150
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: PPUSH
69332: LD_INT 15
69334: PPUSH
69335: CALL_OW 12
69339: ARRAY
69340: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69341: LD_ADDR_VAR 0 4
69345: PUSH
69346: LD_INT 10
69348: PUSH
69349: LD_INT 20
69351: PUSH
69352: LD_INT 30
69354: PUSH
69355: LD_INT 40
69357: PUSH
69358: LD_INT 50
69360: PUSH
69361: LD_INT 60
69363: PUSH
69364: LD_INT 70
69366: PUSH
69367: LD_INT 80
69369: PUSH
69370: LD_INT 90
69372: PUSH
69373: LD_INT 100
69375: PUSH
69376: LD_INT 110
69378: PUSH
69379: LD_INT 120
69381: PUSH
69382: LD_INT 130
69384: PUSH
69385: LD_INT 140
69387: PUSH
69388: LD_INT 150
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 1
69410: PPUSH
69411: LD_INT 15
69413: PPUSH
69414: CALL_OW 12
69418: ARRAY
69419: ST_TO_ADDR
// if ValidHex ( x , y ) then
69420: LD_VAR 0 3
69424: PPUSH
69425: LD_VAR 0 4
69429: PPUSH
69430: CALL_OW 488
69434: IFFALSE 69457
// begin result := [ x , y ] ;
69436: LD_ADDR_VAR 0 1
69440: PUSH
69441: LD_VAR 0 3
69445: PUSH
69446: LD_VAR 0 4
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: ST_TO_ADDR
// break ;
69455: GO 69459
// end ; end ;
69457: GO 69259
69459: POP
69460: POP
// if result then
69461: LD_VAR 0 1
69465: IFFALSE 69525
// begin ToLua ( playSibBomb() ) ;
69467: LD_STRING playSibBomb()
69469: PPUSH
69470: CALL_OW 559
// wait ( 0 0$14 ) ;
69474: LD_INT 490
69476: PPUSH
69477: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69481: LD_VAR 0 1
69485: PUSH
69486: LD_INT 1
69488: ARRAY
69489: PPUSH
69490: LD_VAR 0 1
69494: PUSH
69495: LD_INT 2
69497: ARRAY
69498: PPUSH
69499: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69503: LD_VAR 0 1
69507: PUSH
69508: LD_INT 1
69510: ARRAY
69511: PPUSH
69512: LD_VAR 0 1
69516: PUSH
69517: LD_INT 2
69519: ARRAY
69520: PPUSH
69521: CALL_OW 429
// end ; end ;
69525: LD_VAR 0 1
69529: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69530: LD_EXP 71
69534: PUSH
69535: LD_EXP 93
69539: AND
69540: IFFALSE 69552
69542: GO 69544
69544: DISABLE
// YouLost (  ) ;
69545: LD_STRING 
69547: PPUSH
69548: CALL_OW 104
69552: END
// every 0 0$1 trigger StreamModeActive and sFog do
69553: LD_EXP 71
69557: PUSH
69558: LD_EXP 92
69562: AND
69563: IFFALSE 69577
69565: GO 69567
69567: DISABLE
// FogOff ( your_side ) ;
69568: LD_OWVAR 2
69572: PPUSH
69573: CALL_OW 344
69577: END
// every 0 0$1 trigger StreamModeActive and sSun do
69578: LD_EXP 71
69582: PUSH
69583: LD_EXP 94
69587: AND
69588: IFFALSE 69616
69590: GO 69592
69592: DISABLE
// begin solar_recharge_percent := 0 ;
69593: LD_ADDR_OWVAR 79
69597: PUSH
69598: LD_INT 0
69600: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69601: LD_INT 10500
69603: PPUSH
69604: CALL_OW 67
// solar_recharge_percent := 100 ;
69608: LD_ADDR_OWVAR 79
69612: PUSH
69613: LD_INT 100
69615: ST_TO_ADDR
// end ;
69616: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69617: LD_EXP 71
69621: PUSH
69622: LD_EXP 95
69626: AND
69627: IFFALSE 69866
69629: GO 69631
69631: DISABLE
69632: LD_INT 0
69634: PPUSH
69635: PPUSH
69636: PPUSH
// begin tmp := [ ] ;
69637: LD_ADDR_VAR 0 3
69641: PUSH
69642: EMPTY
69643: ST_TO_ADDR
// for i := 1 to 6 do
69644: LD_ADDR_VAR 0 1
69648: PUSH
69649: DOUBLE
69650: LD_INT 1
69652: DEC
69653: ST_TO_ADDR
69654: LD_INT 6
69656: PUSH
69657: FOR_TO
69658: IFFALSE 69763
// begin uc_nation := nation_nature ;
69660: LD_ADDR_OWVAR 21
69664: PUSH
69665: LD_INT 0
69667: ST_TO_ADDR
// uc_side := 0 ;
69668: LD_ADDR_OWVAR 20
69672: PUSH
69673: LD_INT 0
69675: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69676: LD_ADDR_OWVAR 29
69680: PUSH
69681: LD_INT 12
69683: PUSH
69684: LD_INT 12
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: ST_TO_ADDR
// hc_agressivity := 20 ;
69691: LD_ADDR_OWVAR 35
69695: PUSH
69696: LD_INT 20
69698: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69699: LD_ADDR_OWVAR 28
69703: PUSH
69704: LD_INT 17
69706: ST_TO_ADDR
// hc_gallery :=  ;
69707: LD_ADDR_OWVAR 33
69711: PUSH
69712: LD_STRING 
69714: ST_TO_ADDR
// hc_name :=  ;
69715: LD_ADDR_OWVAR 26
69719: PUSH
69720: LD_STRING 
69722: ST_TO_ADDR
// un := CreateHuman ;
69723: LD_ADDR_VAR 0 2
69727: PUSH
69728: CALL_OW 44
69732: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69733: LD_VAR 0 2
69737: PPUSH
69738: LD_INT 1
69740: PPUSH
69741: CALL_OW 51
// tmp := tmp ^ un ;
69745: LD_ADDR_VAR 0 3
69749: PUSH
69750: LD_VAR 0 3
69754: PUSH
69755: LD_VAR 0 2
69759: ADD
69760: ST_TO_ADDR
// end ;
69761: GO 69657
69763: POP
69764: POP
// repeat wait ( 0 0$1 ) ;
69765: LD_INT 35
69767: PPUSH
69768: CALL_OW 67
// for un in tmp do
69772: LD_ADDR_VAR 0 2
69776: PUSH
69777: LD_VAR 0 3
69781: PUSH
69782: FOR_IN
69783: IFFALSE 69857
// begin if IsDead ( un ) then
69785: LD_VAR 0 2
69789: PPUSH
69790: CALL_OW 301
69794: IFFALSE 69814
// begin tmp := tmp diff un ;
69796: LD_ADDR_VAR 0 3
69800: PUSH
69801: LD_VAR 0 3
69805: PUSH
69806: LD_VAR 0 2
69810: DIFF
69811: ST_TO_ADDR
// continue ;
69812: GO 69782
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69814: LD_VAR 0 2
69818: PPUSH
69819: LD_INT 3
69821: PUSH
69822: LD_INT 22
69824: PUSH
69825: LD_INT 0
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PPUSH
69836: CALL_OW 69
69840: PPUSH
69841: LD_VAR 0 2
69845: PPUSH
69846: CALL_OW 74
69850: PPUSH
69851: CALL_OW 115
// end ;
69855: GO 69782
69857: POP
69858: POP
// until not tmp ;
69859: LD_VAR 0 3
69863: NOT
69864: IFFALSE 69765
// end ;
69866: PPOPN 3
69868: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69869: LD_EXP 71
69873: PUSH
69874: LD_EXP 96
69878: AND
69879: IFFALSE 69933
69881: GO 69883
69883: DISABLE
// begin ToLua ( displayTroll(); ) ;
69884: LD_STRING displayTroll();
69886: PPUSH
69887: CALL_OW 559
// wait ( 3 3$00 ) ;
69891: LD_INT 6300
69893: PPUSH
69894: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69898: LD_STRING hideTroll();
69900: PPUSH
69901: CALL_OW 559
// wait ( 1 1$00 ) ;
69905: LD_INT 2100
69907: PPUSH
69908: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69912: LD_STRING displayTroll();
69914: PPUSH
69915: CALL_OW 559
// wait ( 1 1$00 ) ;
69919: LD_INT 2100
69921: PPUSH
69922: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69926: LD_STRING hideTroll();
69928: PPUSH
69929: CALL_OW 559
// end ;
69933: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69934: LD_EXP 71
69938: PUSH
69939: LD_EXP 97
69943: AND
69944: IFFALSE 70007
69946: GO 69948
69948: DISABLE
69949: LD_INT 0
69951: PPUSH
// begin p := 0 ;
69952: LD_ADDR_VAR 0 1
69956: PUSH
69957: LD_INT 0
69959: ST_TO_ADDR
// repeat game_speed := 1 ;
69960: LD_ADDR_OWVAR 65
69964: PUSH
69965: LD_INT 1
69967: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69968: LD_INT 35
69970: PPUSH
69971: CALL_OW 67
// p := p + 1 ;
69975: LD_ADDR_VAR 0 1
69979: PUSH
69980: LD_VAR 0 1
69984: PUSH
69985: LD_INT 1
69987: PLUS
69988: ST_TO_ADDR
// until p >= 60 ;
69989: LD_VAR 0 1
69993: PUSH
69994: LD_INT 60
69996: GREATEREQUAL
69997: IFFALSE 69960
// game_speed := 4 ;
69999: LD_ADDR_OWVAR 65
70003: PUSH
70004: LD_INT 4
70006: ST_TO_ADDR
// end ;
70007: PPOPN 1
70009: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70010: LD_EXP 71
70014: PUSH
70015: LD_EXP 98
70019: AND
70020: IFFALSE 70166
70022: GO 70024
70024: DISABLE
70025: LD_INT 0
70027: PPUSH
70028: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70029: LD_ADDR_VAR 0 1
70033: PUSH
70034: LD_INT 22
70036: PUSH
70037: LD_OWVAR 2
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 2
70048: PUSH
70049: LD_INT 30
70051: PUSH
70052: LD_INT 0
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 30
70061: PUSH
70062: LD_INT 1
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: LIST
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PPUSH
70078: CALL_OW 69
70082: ST_TO_ADDR
// if not depot then
70083: LD_VAR 0 1
70087: NOT
70088: IFFALSE 70092
// exit ;
70090: GO 70166
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
70092: LD_ADDR_VAR 0 2
70096: PUSH
70097: LD_VAR 0 1
70101: PUSH
70102: LD_INT 1
70104: PPUSH
70105: LD_VAR 0 1
70109: PPUSH
70110: CALL_OW 12
70114: ARRAY
70115: PPUSH
70116: CALL_OW 274
70120: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
70121: LD_VAR 0 2
70125: PPUSH
70126: LD_INT 1
70128: PPUSH
70129: LD_INT 0
70131: PPUSH
70132: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
70136: LD_VAR 0 2
70140: PPUSH
70141: LD_INT 2
70143: PPUSH
70144: LD_INT 0
70146: PPUSH
70147: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
70151: LD_VAR 0 2
70155: PPUSH
70156: LD_INT 3
70158: PPUSH
70159: LD_INT 0
70161: PPUSH
70162: CALL_OW 277
// end ;
70166: PPOPN 2
70168: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70169: LD_EXP 71
70173: PUSH
70174: LD_EXP 99
70178: AND
70179: IFFALSE 70276
70181: GO 70183
70183: DISABLE
70184: LD_INT 0
70186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70187: LD_ADDR_VAR 0 1
70191: PUSH
70192: LD_INT 22
70194: PUSH
70195: LD_OWVAR 2
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 21
70206: PUSH
70207: LD_INT 1
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 3
70216: PUSH
70217: LD_INT 23
70219: PUSH
70220: LD_INT 0
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: LIST
70235: PPUSH
70236: CALL_OW 69
70240: ST_TO_ADDR
// if not tmp then
70241: LD_VAR 0 1
70245: NOT
70246: IFFALSE 70250
// exit ;
70248: GO 70276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70250: LD_VAR 0 1
70254: PUSH
70255: LD_INT 1
70257: PPUSH
70258: LD_VAR 0 1
70262: PPUSH
70263: CALL_OW 12
70267: ARRAY
70268: PPUSH
70269: LD_INT 200
70271: PPUSH
70272: CALL_OW 234
// end ;
70276: PPOPN 1
70278: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70279: LD_EXP 71
70283: PUSH
70284: LD_EXP 100
70288: AND
70289: IFFALSE 70368
70291: GO 70293
70293: DISABLE
70294: LD_INT 0
70296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70297: LD_ADDR_VAR 0 1
70301: PUSH
70302: LD_INT 22
70304: PUSH
70305: LD_OWVAR 2
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 21
70316: PUSH
70317: LD_INT 2
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PPUSH
70328: CALL_OW 69
70332: ST_TO_ADDR
// if not tmp then
70333: LD_VAR 0 1
70337: NOT
70338: IFFALSE 70342
// exit ;
70340: GO 70368
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70342: LD_VAR 0 1
70346: PUSH
70347: LD_INT 1
70349: PPUSH
70350: LD_VAR 0 1
70354: PPUSH
70355: CALL_OW 12
70359: ARRAY
70360: PPUSH
70361: LD_INT 60
70363: PPUSH
70364: CALL_OW 234
// end ;
70368: PPOPN 1
70370: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70371: LD_EXP 71
70375: PUSH
70376: LD_EXP 101
70380: AND
70381: IFFALSE 70480
70383: GO 70385
70385: DISABLE
70386: LD_INT 0
70388: PPUSH
70389: PPUSH
// begin enable ;
70390: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70391: LD_ADDR_VAR 0 1
70395: PUSH
70396: LD_INT 22
70398: PUSH
70399: LD_OWVAR 2
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 61
70410: PUSH
70411: EMPTY
70412: LIST
70413: PUSH
70414: LD_INT 33
70416: PUSH
70417: LD_INT 2
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: LIST
70428: PPUSH
70429: CALL_OW 69
70433: ST_TO_ADDR
// if not tmp then
70434: LD_VAR 0 1
70438: NOT
70439: IFFALSE 70443
// exit ;
70441: GO 70480
// for i in tmp do
70443: LD_ADDR_VAR 0 2
70447: PUSH
70448: LD_VAR 0 1
70452: PUSH
70453: FOR_IN
70454: IFFALSE 70478
// if IsControledBy ( i ) then
70456: LD_VAR 0 2
70460: PPUSH
70461: CALL_OW 312
70465: IFFALSE 70476
// ComUnlink ( i ) ;
70467: LD_VAR 0 2
70471: PPUSH
70472: CALL_OW 136
70476: GO 70453
70478: POP
70479: POP
// end ;
70480: PPOPN 2
70482: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70483: LD_EXP 71
70487: PUSH
70488: LD_EXP 102
70492: AND
70493: IFFALSE 70633
70495: GO 70497
70497: DISABLE
70498: LD_INT 0
70500: PPUSH
70501: PPUSH
// begin ToLua ( displayPowell(); ) ;
70502: LD_STRING displayPowell();
70504: PPUSH
70505: CALL_OW 559
// uc_side := 0 ;
70509: LD_ADDR_OWVAR 20
70513: PUSH
70514: LD_INT 0
70516: ST_TO_ADDR
// uc_nation := 2 ;
70517: LD_ADDR_OWVAR 21
70521: PUSH
70522: LD_INT 2
70524: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70525: LD_ADDR_OWVAR 37
70529: PUSH
70530: LD_INT 14
70532: ST_TO_ADDR
// vc_engine := engine_siberite ;
70533: LD_ADDR_OWVAR 39
70537: PUSH
70538: LD_INT 3
70540: ST_TO_ADDR
// vc_control := control_apeman ;
70541: LD_ADDR_OWVAR 38
70545: PUSH
70546: LD_INT 5
70548: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70549: LD_ADDR_OWVAR 40
70553: PUSH
70554: LD_INT 29
70556: ST_TO_ADDR
// un := CreateVehicle ;
70557: LD_ADDR_VAR 0 2
70561: PUSH
70562: CALL_OW 45
70566: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70567: LD_VAR 0 2
70571: PPUSH
70572: LD_INT 1
70574: PPUSH
70575: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70579: LD_INT 35
70581: PPUSH
70582: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70586: LD_VAR 0 2
70590: PPUSH
70591: LD_INT 22
70593: PUSH
70594: LD_OWVAR 2
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PPUSH
70603: CALL_OW 69
70607: PPUSH
70608: LD_VAR 0 2
70612: PPUSH
70613: CALL_OW 74
70617: PPUSH
70618: CALL_OW 115
// until IsDead ( un ) ;
70622: LD_VAR 0 2
70626: PPUSH
70627: CALL_OW 301
70631: IFFALSE 70579
// end ;
70633: PPOPN 2
70635: END
// every 0 0$1 trigger StreamModeActive and sStu do
70636: LD_EXP 71
70640: PUSH
70641: LD_EXP 110
70645: AND
70646: IFFALSE 70662
70648: GO 70650
70650: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70651: LD_STRING displayStucuk();
70653: PPUSH
70654: CALL_OW 559
// ResetFog ;
70658: CALL_OW 335
// end ;
70662: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70663: LD_EXP 71
70667: PUSH
70668: LD_EXP 103
70672: AND
70673: IFFALSE 70814
70675: GO 70677
70677: DISABLE
70678: LD_INT 0
70680: PPUSH
70681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70682: LD_ADDR_VAR 0 2
70686: PUSH
70687: LD_INT 22
70689: PUSH
70690: LD_OWVAR 2
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 21
70701: PUSH
70702: LD_INT 1
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PPUSH
70713: CALL_OW 69
70717: ST_TO_ADDR
// if not tmp then
70718: LD_VAR 0 2
70722: NOT
70723: IFFALSE 70727
// exit ;
70725: GO 70814
// un := tmp [ rand ( 1 , tmp ) ] ;
70727: LD_ADDR_VAR 0 1
70731: PUSH
70732: LD_VAR 0 2
70736: PUSH
70737: LD_INT 1
70739: PPUSH
70740: LD_VAR 0 2
70744: PPUSH
70745: CALL_OW 12
70749: ARRAY
70750: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70751: LD_VAR 0 1
70755: PPUSH
70756: LD_INT 0
70758: PPUSH
70759: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70763: LD_VAR 0 1
70767: PPUSH
70768: LD_OWVAR 3
70772: PUSH
70773: LD_VAR 0 1
70777: DIFF
70778: PPUSH
70779: LD_VAR 0 1
70783: PPUSH
70784: CALL_OW 74
70788: PPUSH
70789: CALL_OW 115
// wait ( 0 0$20 ) ;
70793: LD_INT 700
70795: PPUSH
70796: CALL_OW 67
// SetSide ( un , your_side ) ;
70800: LD_VAR 0 1
70804: PPUSH
70805: LD_OWVAR 2
70809: PPUSH
70810: CALL_OW 235
// end ;
70814: PPOPN 2
70816: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70817: LD_EXP 71
70821: PUSH
70822: LD_EXP 104
70826: AND
70827: IFFALSE 70933
70829: GO 70831
70831: DISABLE
70832: LD_INT 0
70834: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70835: LD_ADDR_VAR 0 1
70839: PUSH
70840: LD_INT 22
70842: PUSH
70843: LD_OWVAR 2
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 2
70854: PUSH
70855: LD_INT 30
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 30
70867: PUSH
70868: LD_INT 1
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: LIST
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PPUSH
70884: CALL_OW 69
70888: ST_TO_ADDR
// if not depot then
70889: LD_VAR 0 1
70893: NOT
70894: IFFALSE 70898
// exit ;
70896: GO 70933
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70898: LD_VAR 0 1
70902: PUSH
70903: LD_INT 1
70905: ARRAY
70906: PPUSH
70907: CALL_OW 250
70911: PPUSH
70912: LD_VAR 0 1
70916: PUSH
70917: LD_INT 1
70919: ARRAY
70920: PPUSH
70921: CALL_OW 251
70925: PPUSH
70926: LD_INT 70
70928: PPUSH
70929: CALL_OW 495
// end ;
70933: PPOPN 1
70935: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70936: LD_EXP 71
70940: PUSH
70941: LD_EXP 105
70945: AND
70946: IFFALSE 71157
70948: GO 70950
70950: DISABLE
70951: LD_INT 0
70953: PPUSH
70954: PPUSH
70955: PPUSH
70956: PPUSH
70957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70958: LD_ADDR_VAR 0 5
70962: PUSH
70963: LD_INT 22
70965: PUSH
70966: LD_OWVAR 2
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 21
70977: PUSH
70978: LD_INT 1
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PPUSH
70989: CALL_OW 69
70993: ST_TO_ADDR
// if not tmp then
70994: LD_VAR 0 5
70998: NOT
70999: IFFALSE 71003
// exit ;
71001: GO 71157
// for i in tmp do
71003: LD_ADDR_VAR 0 1
71007: PUSH
71008: LD_VAR 0 5
71012: PUSH
71013: FOR_IN
71014: IFFALSE 71155
// begin d := rand ( 0 , 5 ) ;
71016: LD_ADDR_VAR 0 4
71020: PUSH
71021: LD_INT 0
71023: PPUSH
71024: LD_INT 5
71026: PPUSH
71027: CALL_OW 12
71031: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71032: LD_ADDR_VAR 0 2
71036: PUSH
71037: LD_VAR 0 1
71041: PPUSH
71042: CALL_OW 250
71046: PPUSH
71047: LD_VAR 0 4
71051: PPUSH
71052: LD_INT 3
71054: PPUSH
71055: LD_INT 12
71057: PPUSH
71058: CALL_OW 12
71062: PPUSH
71063: CALL_OW 272
71067: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
71068: LD_ADDR_VAR 0 3
71072: PUSH
71073: LD_VAR 0 1
71077: PPUSH
71078: CALL_OW 251
71082: PPUSH
71083: LD_VAR 0 4
71087: PPUSH
71088: LD_INT 3
71090: PPUSH
71091: LD_INT 12
71093: PPUSH
71094: CALL_OW 12
71098: PPUSH
71099: CALL_OW 273
71103: ST_TO_ADDR
// if ValidHex ( x , y ) then
71104: LD_VAR 0 2
71108: PPUSH
71109: LD_VAR 0 3
71113: PPUSH
71114: CALL_OW 488
71118: IFFALSE 71153
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
71120: LD_VAR 0 1
71124: PPUSH
71125: LD_VAR 0 2
71129: PPUSH
71130: LD_VAR 0 3
71134: PPUSH
71135: LD_INT 3
71137: PPUSH
71138: LD_INT 6
71140: PPUSH
71141: CALL_OW 12
71145: PPUSH
71146: LD_INT 1
71148: PPUSH
71149: CALL_OW 483
// end ;
71153: GO 71013
71155: POP
71156: POP
// end ;
71157: PPOPN 5
71159: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71160: LD_EXP 71
71164: PUSH
71165: LD_EXP 106
71169: AND
71170: IFFALSE 71264
71172: GO 71174
71174: DISABLE
71175: LD_INT 0
71177: PPUSH
71178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71179: LD_ADDR_VAR 0 2
71183: PUSH
71184: LD_INT 22
71186: PUSH
71187: LD_OWVAR 2
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 32
71198: PUSH
71199: LD_INT 1
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 21
71208: PUSH
71209: LD_INT 2
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: LIST
71220: PPUSH
71221: CALL_OW 69
71225: ST_TO_ADDR
// if not tmp then
71226: LD_VAR 0 2
71230: NOT
71231: IFFALSE 71235
// exit ;
71233: GO 71264
// for i in tmp do
71235: LD_ADDR_VAR 0 1
71239: PUSH
71240: LD_VAR 0 2
71244: PUSH
71245: FOR_IN
71246: IFFALSE 71262
// SetFuel ( i , 0 ) ;
71248: LD_VAR 0 1
71252: PPUSH
71253: LD_INT 0
71255: PPUSH
71256: CALL_OW 240
71260: GO 71245
71262: POP
71263: POP
// end ;
71264: PPOPN 2
71266: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71267: LD_EXP 71
71271: PUSH
71272: LD_EXP 107
71276: AND
71277: IFFALSE 71343
71279: GO 71281
71281: DISABLE
71282: LD_INT 0
71284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71285: LD_ADDR_VAR 0 1
71289: PUSH
71290: LD_INT 22
71292: PUSH
71293: LD_OWVAR 2
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 30
71304: PUSH
71305: LD_INT 29
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PPUSH
71316: CALL_OW 69
71320: ST_TO_ADDR
// if not tmp then
71321: LD_VAR 0 1
71325: NOT
71326: IFFALSE 71330
// exit ;
71328: GO 71343
// DestroyUnit ( tmp [ 1 ] ) ;
71330: LD_VAR 0 1
71334: PUSH
71335: LD_INT 1
71337: ARRAY
71338: PPUSH
71339: CALL_OW 65
// end ;
71343: PPOPN 1
71345: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71346: LD_EXP 71
71350: PUSH
71351: LD_EXP 109
71355: AND
71356: IFFALSE 71485
71358: GO 71360
71360: DISABLE
71361: LD_INT 0
71363: PPUSH
// begin uc_side := 0 ;
71364: LD_ADDR_OWVAR 20
71368: PUSH
71369: LD_INT 0
71371: ST_TO_ADDR
// uc_nation := nation_arabian ;
71372: LD_ADDR_OWVAR 21
71376: PUSH
71377: LD_INT 2
71379: ST_TO_ADDR
// hc_gallery :=  ;
71380: LD_ADDR_OWVAR 33
71384: PUSH
71385: LD_STRING 
71387: ST_TO_ADDR
// hc_name :=  ;
71388: LD_ADDR_OWVAR 26
71392: PUSH
71393: LD_STRING 
71395: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71396: LD_INT 1
71398: PPUSH
71399: LD_INT 11
71401: PPUSH
71402: LD_INT 10
71404: PPUSH
71405: CALL_OW 380
// un := CreateHuman ;
71409: LD_ADDR_VAR 0 1
71413: PUSH
71414: CALL_OW 44
71418: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71419: LD_VAR 0 1
71423: PPUSH
71424: LD_INT 1
71426: PPUSH
71427: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71431: LD_INT 35
71433: PPUSH
71434: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71438: LD_VAR 0 1
71442: PPUSH
71443: LD_INT 22
71445: PUSH
71446: LD_OWVAR 2
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PPUSH
71455: CALL_OW 69
71459: PPUSH
71460: LD_VAR 0 1
71464: PPUSH
71465: CALL_OW 74
71469: PPUSH
71470: CALL_OW 115
// until IsDead ( un ) ;
71474: LD_VAR 0 1
71478: PPUSH
71479: CALL_OW 301
71483: IFFALSE 71431
// end ;
71485: PPOPN 1
71487: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71488: LD_EXP 71
71492: PUSH
71493: LD_EXP 111
71497: AND
71498: IFFALSE 71510
71500: GO 71502
71502: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71503: LD_STRING earthquake(getX(game), 0, 32)
71505: PPUSH
71506: CALL_OW 559
71510: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71511: LD_EXP 71
71515: PUSH
71516: LD_EXP 112
71520: AND
71521: IFFALSE 71612
71523: GO 71525
71525: DISABLE
71526: LD_INT 0
71528: PPUSH
// begin enable ;
71529: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71530: LD_ADDR_VAR 0 1
71534: PUSH
71535: LD_INT 22
71537: PUSH
71538: LD_OWVAR 2
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 21
71549: PUSH
71550: LD_INT 2
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 33
71559: PUSH
71560: LD_INT 3
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: LIST
71571: PPUSH
71572: CALL_OW 69
71576: ST_TO_ADDR
// if not tmp then
71577: LD_VAR 0 1
71581: NOT
71582: IFFALSE 71586
// exit ;
71584: GO 71612
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71586: LD_VAR 0 1
71590: PUSH
71591: LD_INT 1
71593: PPUSH
71594: LD_VAR 0 1
71598: PPUSH
71599: CALL_OW 12
71603: ARRAY
71604: PPUSH
71605: LD_INT 1
71607: PPUSH
71608: CALL_OW 234
// end ;
71612: PPOPN 1
71614: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71615: LD_EXP 71
71619: PUSH
71620: LD_EXP 113
71624: AND
71625: IFFALSE 71766
71627: GO 71629
71629: DISABLE
71630: LD_INT 0
71632: PPUSH
71633: PPUSH
71634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71635: LD_ADDR_VAR 0 3
71639: PUSH
71640: LD_INT 22
71642: PUSH
71643: LD_OWVAR 2
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: PUSH
71652: LD_INT 25
71654: PUSH
71655: LD_INT 1
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PPUSH
71666: CALL_OW 69
71670: ST_TO_ADDR
// if not tmp then
71671: LD_VAR 0 3
71675: NOT
71676: IFFALSE 71680
// exit ;
71678: GO 71766
// un := tmp [ rand ( 1 , tmp ) ] ;
71680: LD_ADDR_VAR 0 2
71684: PUSH
71685: LD_VAR 0 3
71689: PUSH
71690: LD_INT 1
71692: PPUSH
71693: LD_VAR 0 3
71697: PPUSH
71698: CALL_OW 12
71702: ARRAY
71703: ST_TO_ADDR
// if Crawls ( un ) then
71704: LD_VAR 0 2
71708: PPUSH
71709: CALL_OW 318
71713: IFFALSE 71724
// ComWalk ( un ) ;
71715: LD_VAR 0 2
71719: PPUSH
71720: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71724: LD_VAR 0 2
71728: PPUSH
71729: LD_INT 9
71731: PPUSH
71732: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71736: LD_INT 28
71738: PPUSH
71739: LD_OWVAR 2
71743: PPUSH
71744: LD_INT 2
71746: PPUSH
71747: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71751: LD_INT 29
71753: PPUSH
71754: LD_OWVAR 2
71758: PPUSH
71759: LD_INT 2
71761: PPUSH
71762: CALL_OW 322
// end ;
71766: PPOPN 3
71768: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71769: LD_EXP 71
71773: PUSH
71774: LD_EXP 114
71778: AND
71779: IFFALSE 71890
71781: GO 71783
71783: DISABLE
71784: LD_INT 0
71786: PPUSH
71787: PPUSH
71788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71789: LD_ADDR_VAR 0 3
71793: PUSH
71794: LD_INT 22
71796: PUSH
71797: LD_OWVAR 2
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 25
71808: PUSH
71809: LD_INT 1
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PPUSH
71820: CALL_OW 69
71824: ST_TO_ADDR
// if not tmp then
71825: LD_VAR 0 3
71829: NOT
71830: IFFALSE 71834
// exit ;
71832: GO 71890
// un := tmp [ rand ( 1 , tmp ) ] ;
71834: LD_ADDR_VAR 0 2
71838: PUSH
71839: LD_VAR 0 3
71843: PUSH
71844: LD_INT 1
71846: PPUSH
71847: LD_VAR 0 3
71851: PPUSH
71852: CALL_OW 12
71856: ARRAY
71857: ST_TO_ADDR
// if Crawls ( un ) then
71858: LD_VAR 0 2
71862: PPUSH
71863: CALL_OW 318
71867: IFFALSE 71878
// ComWalk ( un ) ;
71869: LD_VAR 0 2
71873: PPUSH
71874: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71878: LD_VAR 0 2
71882: PPUSH
71883: LD_INT 8
71885: PPUSH
71886: CALL_OW 336
// end ;
71890: PPOPN 3
71892: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71893: LD_EXP 71
71897: PUSH
71898: LD_EXP 115
71902: AND
71903: IFFALSE 72047
71905: GO 71907
71907: DISABLE
71908: LD_INT 0
71910: PPUSH
71911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71912: LD_ADDR_VAR 0 2
71916: PUSH
71917: LD_INT 22
71919: PUSH
71920: LD_OWVAR 2
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 21
71931: PUSH
71932: LD_INT 2
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 2
71941: PUSH
71942: LD_INT 34
71944: PUSH
71945: LD_INT 12
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: LD_INT 34
71954: PUSH
71955: LD_INT 51
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 34
71964: PUSH
71965: LD_INT 32
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: LIST
71982: PPUSH
71983: CALL_OW 69
71987: ST_TO_ADDR
// if not tmp then
71988: LD_VAR 0 2
71992: NOT
71993: IFFALSE 71997
// exit ;
71995: GO 72047
// for i in tmp do
71997: LD_ADDR_VAR 0 1
72001: PUSH
72002: LD_VAR 0 2
72006: PUSH
72007: FOR_IN
72008: IFFALSE 72045
// if GetCargo ( i , mat_artifact ) = 0 then
72010: LD_VAR 0 1
72014: PPUSH
72015: LD_INT 4
72017: PPUSH
72018: CALL_OW 289
72022: PUSH
72023: LD_INT 0
72025: EQUAL
72026: IFFALSE 72043
// SetCargo ( i , mat_siberit , 100 ) ;
72028: LD_VAR 0 1
72032: PPUSH
72033: LD_INT 3
72035: PPUSH
72036: LD_INT 100
72038: PPUSH
72039: CALL_OW 290
72043: GO 72007
72045: POP
72046: POP
// end ;
72047: PPOPN 2
72049: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
72050: LD_EXP 71
72054: PUSH
72055: LD_EXP 116
72059: AND
72060: IFFALSE 72243
72062: GO 72064
72064: DISABLE
72065: LD_INT 0
72067: PPUSH
72068: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72069: LD_ADDR_VAR 0 2
72073: PUSH
72074: LD_INT 22
72076: PUSH
72077: LD_OWVAR 2
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PPUSH
72086: CALL_OW 69
72090: ST_TO_ADDR
// if not tmp then
72091: LD_VAR 0 2
72095: NOT
72096: IFFALSE 72100
// exit ;
72098: GO 72243
// for i := 1 to 2 do
72100: LD_ADDR_VAR 0 1
72104: PUSH
72105: DOUBLE
72106: LD_INT 1
72108: DEC
72109: ST_TO_ADDR
72110: LD_INT 2
72112: PUSH
72113: FOR_TO
72114: IFFALSE 72241
// begin uc_side := your_side ;
72116: LD_ADDR_OWVAR 20
72120: PUSH
72121: LD_OWVAR 2
72125: ST_TO_ADDR
// uc_nation := nation_american ;
72126: LD_ADDR_OWVAR 21
72130: PUSH
72131: LD_INT 1
72133: ST_TO_ADDR
// vc_chassis := us_morphling ;
72134: LD_ADDR_OWVAR 37
72138: PUSH
72139: LD_INT 5
72141: ST_TO_ADDR
// vc_engine := engine_siberite ;
72142: LD_ADDR_OWVAR 39
72146: PUSH
72147: LD_INT 3
72149: ST_TO_ADDR
// vc_control := control_computer ;
72150: LD_ADDR_OWVAR 38
72154: PUSH
72155: LD_INT 3
72157: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72158: LD_ADDR_OWVAR 40
72162: PUSH
72163: LD_INT 10
72165: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72166: LD_VAR 0 2
72170: PUSH
72171: LD_INT 1
72173: ARRAY
72174: PPUSH
72175: CALL_OW 310
72179: NOT
72180: IFFALSE 72227
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72182: CALL_OW 45
72186: PPUSH
72187: LD_VAR 0 2
72191: PUSH
72192: LD_INT 1
72194: ARRAY
72195: PPUSH
72196: CALL_OW 250
72200: PPUSH
72201: LD_VAR 0 2
72205: PUSH
72206: LD_INT 1
72208: ARRAY
72209: PPUSH
72210: CALL_OW 251
72214: PPUSH
72215: LD_INT 12
72217: PPUSH
72218: LD_INT 1
72220: PPUSH
72221: CALL_OW 50
72225: GO 72239
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72227: CALL_OW 45
72231: PPUSH
72232: LD_INT 1
72234: PPUSH
72235: CALL_OW 51
// end ;
72239: GO 72113
72241: POP
72242: POP
// end ;
72243: PPOPN 2
72245: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72246: LD_EXP 71
72250: PUSH
72251: LD_EXP 117
72255: AND
72256: IFFALSE 72478
72258: GO 72260
72260: DISABLE
72261: LD_INT 0
72263: PPUSH
72264: PPUSH
72265: PPUSH
72266: PPUSH
72267: PPUSH
72268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72269: LD_ADDR_VAR 0 6
72273: PUSH
72274: LD_INT 22
72276: PUSH
72277: LD_OWVAR 2
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 21
72288: PUSH
72289: LD_INT 1
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 3
72298: PUSH
72299: LD_INT 23
72301: PUSH
72302: LD_INT 0
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: LIST
72317: PPUSH
72318: CALL_OW 69
72322: ST_TO_ADDR
// if not tmp then
72323: LD_VAR 0 6
72327: NOT
72328: IFFALSE 72332
// exit ;
72330: GO 72478
// s1 := rand ( 1 , 4 ) ;
72332: LD_ADDR_VAR 0 2
72336: PUSH
72337: LD_INT 1
72339: PPUSH
72340: LD_INT 4
72342: PPUSH
72343: CALL_OW 12
72347: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72348: LD_ADDR_VAR 0 4
72352: PUSH
72353: LD_VAR 0 6
72357: PUSH
72358: LD_INT 1
72360: ARRAY
72361: PPUSH
72362: LD_VAR 0 2
72366: PPUSH
72367: CALL_OW 259
72371: ST_TO_ADDR
// if s1 = 1 then
72372: LD_VAR 0 2
72376: PUSH
72377: LD_INT 1
72379: EQUAL
72380: IFFALSE 72400
// s2 := rand ( 2 , 4 ) else
72382: LD_ADDR_VAR 0 3
72386: PUSH
72387: LD_INT 2
72389: PPUSH
72390: LD_INT 4
72392: PPUSH
72393: CALL_OW 12
72397: ST_TO_ADDR
72398: GO 72408
// s2 := 1 ;
72400: LD_ADDR_VAR 0 3
72404: PUSH
72405: LD_INT 1
72407: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72408: LD_ADDR_VAR 0 5
72412: PUSH
72413: LD_VAR 0 6
72417: PUSH
72418: LD_INT 1
72420: ARRAY
72421: PPUSH
72422: LD_VAR 0 3
72426: PPUSH
72427: CALL_OW 259
72431: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72432: LD_VAR 0 6
72436: PUSH
72437: LD_INT 1
72439: ARRAY
72440: PPUSH
72441: LD_VAR 0 2
72445: PPUSH
72446: LD_VAR 0 5
72450: PPUSH
72451: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72455: LD_VAR 0 6
72459: PUSH
72460: LD_INT 1
72462: ARRAY
72463: PPUSH
72464: LD_VAR 0 3
72468: PPUSH
72469: LD_VAR 0 4
72473: PPUSH
72474: CALL_OW 237
// end ;
72478: PPOPN 6
72480: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72481: LD_EXP 71
72485: PUSH
72486: LD_EXP 118
72490: AND
72491: IFFALSE 72570
72493: GO 72495
72495: DISABLE
72496: LD_INT 0
72498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72499: LD_ADDR_VAR 0 1
72503: PUSH
72504: LD_INT 22
72506: PUSH
72507: LD_OWVAR 2
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 30
72518: PUSH
72519: LD_INT 3
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PPUSH
72530: CALL_OW 69
72534: ST_TO_ADDR
// if not tmp then
72535: LD_VAR 0 1
72539: NOT
72540: IFFALSE 72544
// exit ;
72542: GO 72570
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72544: LD_VAR 0 1
72548: PUSH
72549: LD_INT 1
72551: PPUSH
72552: LD_VAR 0 1
72556: PPUSH
72557: CALL_OW 12
72561: ARRAY
72562: PPUSH
72563: LD_INT 1
72565: PPUSH
72566: CALL_OW 234
// end ;
72570: PPOPN 1
72572: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72573: LD_EXP 71
72577: PUSH
72578: LD_EXP 119
72582: AND
72583: IFFALSE 72695
72585: GO 72587
72587: DISABLE
72588: LD_INT 0
72590: PPUSH
72591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72592: LD_ADDR_VAR 0 2
72596: PUSH
72597: LD_INT 22
72599: PUSH
72600: LD_OWVAR 2
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 2
72611: PUSH
72612: LD_INT 30
72614: PUSH
72615: LD_INT 27
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 30
72624: PUSH
72625: LD_INT 26
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_INT 30
72634: PUSH
72635: LD_INT 28
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PPUSH
72652: CALL_OW 69
72656: ST_TO_ADDR
// if not tmp then
72657: LD_VAR 0 2
72661: NOT
72662: IFFALSE 72666
// exit ;
72664: GO 72695
// for i in tmp do
72666: LD_ADDR_VAR 0 1
72670: PUSH
72671: LD_VAR 0 2
72675: PUSH
72676: FOR_IN
72677: IFFALSE 72693
// SetLives ( i , 1 ) ;
72679: LD_VAR 0 1
72683: PPUSH
72684: LD_INT 1
72686: PPUSH
72687: CALL_OW 234
72691: GO 72676
72693: POP
72694: POP
// end ;
72695: PPOPN 2
72697: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72698: LD_EXP 71
72702: PUSH
72703: LD_EXP 120
72707: AND
72708: IFFALSE 72982
72710: GO 72712
72712: DISABLE
72713: LD_INT 0
72715: PPUSH
72716: PPUSH
72717: PPUSH
// begin i := rand ( 1 , 7 ) ;
72718: LD_ADDR_VAR 0 1
72722: PUSH
72723: LD_INT 1
72725: PPUSH
72726: LD_INT 7
72728: PPUSH
72729: CALL_OW 12
72733: ST_TO_ADDR
// case i of 1 :
72734: LD_VAR 0 1
72738: PUSH
72739: LD_INT 1
72741: DOUBLE
72742: EQUAL
72743: IFTRUE 72747
72745: GO 72757
72747: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72748: LD_STRING earthquake(getX(game), 0, 32)
72750: PPUSH
72751: CALL_OW 559
72755: GO 72982
72757: LD_INT 2
72759: DOUBLE
72760: EQUAL
72761: IFTRUE 72765
72763: GO 72779
72765: POP
// begin ToLua ( displayStucuk(); ) ;
72766: LD_STRING displayStucuk();
72768: PPUSH
72769: CALL_OW 559
// ResetFog ;
72773: CALL_OW 335
// end ; 3 :
72777: GO 72982
72779: LD_INT 3
72781: DOUBLE
72782: EQUAL
72783: IFTRUE 72787
72785: GO 72891
72787: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72788: LD_ADDR_VAR 0 2
72792: PUSH
72793: LD_INT 22
72795: PUSH
72796: LD_OWVAR 2
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PUSH
72805: LD_INT 25
72807: PUSH
72808: LD_INT 1
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PPUSH
72819: CALL_OW 69
72823: ST_TO_ADDR
// if not tmp then
72824: LD_VAR 0 2
72828: NOT
72829: IFFALSE 72833
// exit ;
72831: GO 72982
// un := tmp [ rand ( 1 , tmp ) ] ;
72833: LD_ADDR_VAR 0 3
72837: PUSH
72838: LD_VAR 0 2
72842: PUSH
72843: LD_INT 1
72845: PPUSH
72846: LD_VAR 0 2
72850: PPUSH
72851: CALL_OW 12
72855: ARRAY
72856: ST_TO_ADDR
// if Crawls ( un ) then
72857: LD_VAR 0 3
72861: PPUSH
72862: CALL_OW 318
72866: IFFALSE 72877
// ComWalk ( un ) ;
72868: LD_VAR 0 3
72872: PPUSH
72873: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72877: LD_VAR 0 3
72881: PPUSH
72882: LD_INT 8
72884: PPUSH
72885: CALL_OW 336
// end ; 4 :
72889: GO 72982
72891: LD_INT 4
72893: DOUBLE
72894: EQUAL
72895: IFTRUE 72899
72897: GO 72960
72899: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72900: LD_ADDR_VAR 0 2
72904: PUSH
72905: LD_INT 22
72907: PUSH
72908: LD_OWVAR 2
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 30
72919: PUSH
72920: LD_INT 29
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PPUSH
72931: CALL_OW 69
72935: ST_TO_ADDR
// if not tmp then
72936: LD_VAR 0 2
72940: NOT
72941: IFFALSE 72945
// exit ;
72943: GO 72982
// DestroyUnit ( tmp [ 1 ] ) ;
72945: LD_VAR 0 2
72949: PUSH
72950: LD_INT 1
72952: ARRAY
72953: PPUSH
72954: CALL_OW 65
// end ; 5 .. 7 :
72958: GO 72982
72960: LD_INT 5
72962: DOUBLE
72963: GREATEREQUAL
72964: IFFALSE 72972
72966: LD_INT 7
72968: DOUBLE
72969: LESSEQUAL
72970: IFTRUE 72974
72972: GO 72981
72974: POP
// StreamSibBomb ; end ;
72975: CALL 69232 0 0
72979: GO 72982
72981: POP
// end ;
72982: PPOPN 3
72984: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72985: LD_EXP 71
72989: PUSH
72990: LD_EXP 121
72994: AND
72995: IFFALSE 73151
72997: GO 72999
72999: DISABLE
73000: LD_INT 0
73002: PPUSH
73003: PPUSH
73004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73005: LD_ADDR_VAR 0 2
73009: PUSH
73010: LD_INT 81
73012: PUSH
73013: LD_OWVAR 2
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 2
73024: PUSH
73025: LD_INT 21
73027: PUSH
73028: LD_INT 1
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PUSH
73035: LD_INT 21
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: LIST
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PPUSH
73054: CALL_OW 69
73058: ST_TO_ADDR
// if not tmp then
73059: LD_VAR 0 2
73063: NOT
73064: IFFALSE 73068
// exit ;
73066: GO 73151
// p := 0 ;
73068: LD_ADDR_VAR 0 3
73072: PUSH
73073: LD_INT 0
73075: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73076: LD_INT 35
73078: PPUSH
73079: CALL_OW 67
// p := p + 1 ;
73083: LD_ADDR_VAR 0 3
73087: PUSH
73088: LD_VAR 0 3
73092: PUSH
73093: LD_INT 1
73095: PLUS
73096: ST_TO_ADDR
// for i in tmp do
73097: LD_ADDR_VAR 0 1
73101: PUSH
73102: LD_VAR 0 2
73106: PUSH
73107: FOR_IN
73108: IFFALSE 73139
// if GetLives ( i ) < 1000 then
73110: LD_VAR 0 1
73114: PPUSH
73115: CALL_OW 256
73119: PUSH
73120: LD_INT 1000
73122: LESS
73123: IFFALSE 73137
// SetLives ( i , 1000 ) ;
73125: LD_VAR 0 1
73129: PPUSH
73130: LD_INT 1000
73132: PPUSH
73133: CALL_OW 234
73137: GO 73107
73139: POP
73140: POP
// until p > 20 ;
73141: LD_VAR 0 3
73145: PUSH
73146: LD_INT 20
73148: GREATER
73149: IFFALSE 73076
// end ;
73151: PPOPN 3
73153: END
// every 0 0$1 trigger StreamModeActive and sTime do
73154: LD_EXP 71
73158: PUSH
73159: LD_EXP 122
73163: AND
73164: IFFALSE 73199
73166: GO 73168
73168: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73169: LD_INT 28
73171: PPUSH
73172: LD_OWVAR 2
73176: PPUSH
73177: LD_INT 2
73179: PPUSH
73180: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73184: LD_INT 30
73186: PPUSH
73187: LD_OWVAR 2
73191: PPUSH
73192: LD_INT 2
73194: PPUSH
73195: CALL_OW 322
// end ;
73199: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73200: LD_EXP 71
73204: PUSH
73205: LD_EXP 123
73209: AND
73210: IFFALSE 73331
73212: GO 73214
73214: DISABLE
73215: LD_INT 0
73217: PPUSH
73218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73219: LD_ADDR_VAR 0 2
73223: PUSH
73224: LD_INT 22
73226: PUSH
73227: LD_OWVAR 2
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_INT 21
73238: PUSH
73239: LD_INT 1
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: LD_INT 3
73248: PUSH
73249: LD_INT 23
73251: PUSH
73252: LD_INT 0
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: LIST
73267: PPUSH
73268: CALL_OW 69
73272: ST_TO_ADDR
// if not tmp then
73273: LD_VAR 0 2
73277: NOT
73278: IFFALSE 73282
// exit ;
73280: GO 73331
// for i in tmp do
73282: LD_ADDR_VAR 0 1
73286: PUSH
73287: LD_VAR 0 2
73291: PUSH
73292: FOR_IN
73293: IFFALSE 73329
// begin if Crawls ( i ) then
73295: LD_VAR 0 1
73299: PPUSH
73300: CALL_OW 318
73304: IFFALSE 73315
// ComWalk ( i ) ;
73306: LD_VAR 0 1
73310: PPUSH
73311: CALL_OW 138
// SetClass ( i , 2 ) ;
73315: LD_VAR 0 1
73319: PPUSH
73320: LD_INT 2
73322: PPUSH
73323: CALL_OW 336
// end ;
73327: GO 73292
73329: POP
73330: POP
// end ;
73331: PPOPN 2
73333: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73334: LD_EXP 71
73338: PUSH
73339: LD_EXP 124
73343: AND
73344: IFFALSE 73625
73346: GO 73348
73348: DISABLE
73349: LD_INT 0
73351: PPUSH
73352: PPUSH
73353: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73354: LD_OWVAR 2
73358: PPUSH
73359: LD_INT 9
73361: PPUSH
73362: LD_INT 1
73364: PPUSH
73365: LD_INT 1
73367: PPUSH
73368: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73372: LD_INT 9
73374: PPUSH
73375: LD_OWVAR 2
73379: PPUSH
73380: CALL_OW 343
// uc_side := 9 ;
73384: LD_ADDR_OWVAR 20
73388: PUSH
73389: LD_INT 9
73391: ST_TO_ADDR
// uc_nation := 2 ;
73392: LD_ADDR_OWVAR 21
73396: PUSH
73397: LD_INT 2
73399: ST_TO_ADDR
// hc_name := Dark Warrior ;
73400: LD_ADDR_OWVAR 26
73404: PUSH
73405: LD_STRING Dark Warrior
73407: ST_TO_ADDR
// hc_gallery :=  ;
73408: LD_ADDR_OWVAR 33
73412: PUSH
73413: LD_STRING 
73415: ST_TO_ADDR
// hc_noskilllimit := true ;
73416: LD_ADDR_OWVAR 76
73420: PUSH
73421: LD_INT 1
73423: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73424: LD_ADDR_OWVAR 31
73428: PUSH
73429: LD_INT 30
73431: PUSH
73432: LD_INT 30
73434: PUSH
73435: LD_INT 30
73437: PUSH
73438: LD_INT 30
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: ST_TO_ADDR
// un := CreateHuman ;
73447: LD_ADDR_VAR 0 3
73451: PUSH
73452: CALL_OW 44
73456: ST_TO_ADDR
// hc_noskilllimit := false ;
73457: LD_ADDR_OWVAR 76
73461: PUSH
73462: LD_INT 0
73464: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73465: LD_VAR 0 3
73469: PPUSH
73470: LD_INT 1
73472: PPUSH
73473: CALL_OW 51
// p := 0 ;
73477: LD_ADDR_VAR 0 2
73481: PUSH
73482: LD_INT 0
73484: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73485: LD_INT 35
73487: PPUSH
73488: CALL_OW 67
// p := p + 1 ;
73492: LD_ADDR_VAR 0 2
73496: PUSH
73497: LD_VAR 0 2
73501: PUSH
73502: LD_INT 1
73504: PLUS
73505: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73506: LD_VAR 0 3
73510: PPUSH
73511: CALL_OW 256
73515: PUSH
73516: LD_INT 1000
73518: LESS
73519: IFFALSE 73533
// SetLives ( un , 1000 ) ;
73521: LD_VAR 0 3
73525: PPUSH
73526: LD_INT 1000
73528: PPUSH
73529: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73533: LD_VAR 0 3
73537: PPUSH
73538: LD_INT 81
73540: PUSH
73541: LD_OWVAR 2
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: LD_INT 91
73552: PUSH
73553: LD_VAR 0 3
73557: PUSH
73558: LD_INT 30
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: LIST
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: PPUSH
73570: CALL_OW 69
73574: PPUSH
73575: LD_VAR 0 3
73579: PPUSH
73580: CALL_OW 74
73584: PPUSH
73585: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
73589: LD_VAR 0 2
73593: PUSH
73594: LD_INT 60
73596: GREATER
73597: PUSH
73598: LD_VAR 0 3
73602: PPUSH
73603: CALL_OW 301
73607: OR
73608: IFFALSE 73485
// if un then
73610: LD_VAR 0 3
73614: IFFALSE 73625
// RemoveUnit ( un ) ;
73616: LD_VAR 0 3
73620: PPUSH
73621: CALL_OW 64
// end ;
73625: PPOPN 3
73627: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73628: LD_INT 0
73630: PPUSH
// case cmd of 301 :
73631: LD_VAR 0 1
73635: PUSH
73636: LD_INT 301
73638: DOUBLE
73639: EQUAL
73640: IFTRUE 73644
73642: GO 73676
73644: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73645: LD_VAR 0 6
73649: PPUSH
73650: LD_VAR 0 7
73654: PPUSH
73655: LD_VAR 0 8
73659: PPUSH
73660: LD_VAR 0 4
73664: PPUSH
73665: LD_VAR 0 5
73669: PPUSH
73670: CALL 74877 0 5
73674: GO 73797
73676: LD_INT 302
73678: DOUBLE
73679: EQUAL
73680: IFTRUE 73684
73682: GO 73721
73684: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73685: LD_VAR 0 6
73689: PPUSH
73690: LD_VAR 0 7
73694: PPUSH
73695: LD_VAR 0 8
73699: PPUSH
73700: LD_VAR 0 9
73704: PPUSH
73705: LD_VAR 0 4
73709: PPUSH
73710: LD_VAR 0 5
73714: PPUSH
73715: CALL 74968 0 6
73719: GO 73797
73721: LD_INT 303
73723: DOUBLE
73724: EQUAL
73725: IFTRUE 73729
73727: GO 73766
73729: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73730: LD_VAR 0 6
73734: PPUSH
73735: LD_VAR 0 7
73739: PPUSH
73740: LD_VAR 0 8
73744: PPUSH
73745: LD_VAR 0 9
73749: PPUSH
73750: LD_VAR 0 4
73754: PPUSH
73755: LD_VAR 0 5
73759: PPUSH
73760: CALL 73802 0 6
73764: GO 73797
73766: LD_INT 304
73768: DOUBLE
73769: EQUAL
73770: IFTRUE 73774
73772: GO 73796
73774: POP
// hHackTeleport ( unit , x , y ) ; end ;
73775: LD_VAR 0 2
73779: PPUSH
73780: LD_VAR 0 4
73784: PPUSH
73785: LD_VAR 0 5
73789: PPUSH
73790: CALL 75561 0 3
73794: GO 73797
73796: POP
// end ;
73797: LD_VAR 0 12
73801: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73802: LD_INT 0
73804: PPUSH
73805: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73806: LD_VAR 0 1
73810: PUSH
73811: LD_INT 1
73813: LESS
73814: PUSH
73815: LD_VAR 0 1
73819: PUSH
73820: LD_INT 3
73822: GREATER
73823: OR
73824: PUSH
73825: LD_VAR 0 5
73829: PPUSH
73830: LD_VAR 0 6
73834: PPUSH
73835: CALL_OW 428
73839: OR
73840: IFFALSE 73844
// exit ;
73842: GO 74564
// uc_side := your_side ;
73844: LD_ADDR_OWVAR 20
73848: PUSH
73849: LD_OWVAR 2
73853: ST_TO_ADDR
// uc_nation := nation ;
73854: LD_ADDR_OWVAR 21
73858: PUSH
73859: LD_VAR 0 1
73863: ST_TO_ADDR
// bc_level = 1 ;
73864: LD_ADDR_OWVAR 43
73868: PUSH
73869: LD_INT 1
73871: ST_TO_ADDR
// case btype of 1 :
73872: LD_VAR 0 2
73876: PUSH
73877: LD_INT 1
73879: DOUBLE
73880: EQUAL
73881: IFTRUE 73885
73883: GO 73896
73885: POP
// bc_type := b_depot ; 2 :
73886: LD_ADDR_OWVAR 42
73890: PUSH
73891: LD_INT 0
73893: ST_TO_ADDR
73894: GO 74508
73896: LD_INT 2
73898: DOUBLE
73899: EQUAL
73900: IFTRUE 73904
73902: GO 73915
73904: POP
// bc_type := b_warehouse ; 3 :
73905: LD_ADDR_OWVAR 42
73909: PUSH
73910: LD_INT 1
73912: ST_TO_ADDR
73913: GO 74508
73915: LD_INT 3
73917: DOUBLE
73918: EQUAL
73919: IFTRUE 73923
73921: GO 73934
73923: POP
// bc_type := b_lab ; 4 .. 9 :
73924: LD_ADDR_OWVAR 42
73928: PUSH
73929: LD_INT 6
73931: ST_TO_ADDR
73932: GO 74508
73934: LD_INT 4
73936: DOUBLE
73937: GREATEREQUAL
73938: IFFALSE 73946
73940: LD_INT 9
73942: DOUBLE
73943: LESSEQUAL
73944: IFTRUE 73948
73946: GO 74000
73948: POP
// begin bc_type := b_lab_half ;
73949: LD_ADDR_OWVAR 42
73953: PUSH
73954: LD_INT 7
73956: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73957: LD_ADDR_OWVAR 44
73961: PUSH
73962: LD_INT 10
73964: PUSH
73965: LD_INT 11
73967: PUSH
73968: LD_INT 12
73970: PUSH
73971: LD_INT 15
73973: PUSH
73974: LD_INT 14
73976: PUSH
73977: LD_INT 13
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: PUSH
73988: LD_VAR 0 2
73992: PUSH
73993: LD_INT 3
73995: MINUS
73996: ARRAY
73997: ST_TO_ADDR
// end ; 10 .. 13 :
73998: GO 74508
74000: LD_INT 10
74002: DOUBLE
74003: GREATEREQUAL
74004: IFFALSE 74012
74006: LD_INT 13
74008: DOUBLE
74009: LESSEQUAL
74010: IFTRUE 74014
74012: GO 74091
74014: POP
// begin bc_type := b_lab_full ;
74015: LD_ADDR_OWVAR 42
74019: PUSH
74020: LD_INT 8
74022: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74023: LD_ADDR_OWVAR 44
74027: PUSH
74028: LD_INT 10
74030: PUSH
74031: LD_INT 12
74033: PUSH
74034: LD_INT 14
74036: PUSH
74037: LD_INT 13
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: PUSH
74046: LD_VAR 0 2
74050: PUSH
74051: LD_INT 9
74053: MINUS
74054: ARRAY
74055: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74056: LD_ADDR_OWVAR 45
74060: PUSH
74061: LD_INT 11
74063: PUSH
74064: LD_INT 15
74066: PUSH
74067: LD_INT 12
74069: PUSH
74070: LD_INT 15
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: PUSH
74079: LD_VAR 0 2
74083: PUSH
74084: LD_INT 9
74086: MINUS
74087: ARRAY
74088: ST_TO_ADDR
// end ; 14 :
74089: GO 74508
74091: LD_INT 14
74093: DOUBLE
74094: EQUAL
74095: IFTRUE 74099
74097: GO 74110
74099: POP
// bc_type := b_workshop ; 15 :
74100: LD_ADDR_OWVAR 42
74104: PUSH
74105: LD_INT 2
74107: ST_TO_ADDR
74108: GO 74508
74110: LD_INT 15
74112: DOUBLE
74113: EQUAL
74114: IFTRUE 74118
74116: GO 74129
74118: POP
// bc_type := b_factory ; 16 :
74119: LD_ADDR_OWVAR 42
74123: PUSH
74124: LD_INT 3
74126: ST_TO_ADDR
74127: GO 74508
74129: LD_INT 16
74131: DOUBLE
74132: EQUAL
74133: IFTRUE 74137
74135: GO 74148
74137: POP
// bc_type := b_ext_gun ; 17 :
74138: LD_ADDR_OWVAR 42
74142: PUSH
74143: LD_INT 17
74145: ST_TO_ADDR
74146: GO 74508
74148: LD_INT 17
74150: DOUBLE
74151: EQUAL
74152: IFTRUE 74156
74154: GO 74184
74156: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74157: LD_ADDR_OWVAR 42
74161: PUSH
74162: LD_INT 19
74164: PUSH
74165: LD_INT 23
74167: PUSH
74168: LD_INT 19
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: LIST
74175: PUSH
74176: LD_VAR 0 1
74180: ARRAY
74181: ST_TO_ADDR
74182: GO 74508
74184: LD_INT 18
74186: DOUBLE
74187: EQUAL
74188: IFTRUE 74192
74190: GO 74203
74192: POP
// bc_type := b_ext_radar ; 19 :
74193: LD_ADDR_OWVAR 42
74197: PUSH
74198: LD_INT 20
74200: ST_TO_ADDR
74201: GO 74508
74203: LD_INT 19
74205: DOUBLE
74206: EQUAL
74207: IFTRUE 74211
74209: GO 74222
74211: POP
// bc_type := b_ext_radio ; 20 :
74212: LD_ADDR_OWVAR 42
74216: PUSH
74217: LD_INT 22
74219: ST_TO_ADDR
74220: GO 74508
74222: LD_INT 20
74224: DOUBLE
74225: EQUAL
74226: IFTRUE 74230
74228: GO 74241
74230: POP
// bc_type := b_ext_siberium ; 21 :
74231: LD_ADDR_OWVAR 42
74235: PUSH
74236: LD_INT 21
74238: ST_TO_ADDR
74239: GO 74508
74241: LD_INT 21
74243: DOUBLE
74244: EQUAL
74245: IFTRUE 74249
74247: GO 74260
74249: POP
// bc_type := b_ext_computer ; 22 :
74250: LD_ADDR_OWVAR 42
74254: PUSH
74255: LD_INT 24
74257: ST_TO_ADDR
74258: GO 74508
74260: LD_INT 22
74262: DOUBLE
74263: EQUAL
74264: IFTRUE 74268
74266: GO 74279
74268: POP
// bc_type := b_ext_track ; 23 :
74269: LD_ADDR_OWVAR 42
74273: PUSH
74274: LD_INT 16
74276: ST_TO_ADDR
74277: GO 74508
74279: LD_INT 23
74281: DOUBLE
74282: EQUAL
74283: IFTRUE 74287
74285: GO 74298
74287: POP
// bc_type := b_ext_laser ; 24 :
74288: LD_ADDR_OWVAR 42
74292: PUSH
74293: LD_INT 25
74295: ST_TO_ADDR
74296: GO 74508
74298: LD_INT 24
74300: DOUBLE
74301: EQUAL
74302: IFTRUE 74306
74304: GO 74317
74306: POP
// bc_type := b_control_tower ; 25 :
74307: LD_ADDR_OWVAR 42
74311: PUSH
74312: LD_INT 36
74314: ST_TO_ADDR
74315: GO 74508
74317: LD_INT 25
74319: DOUBLE
74320: EQUAL
74321: IFTRUE 74325
74323: GO 74336
74325: POP
// bc_type := b_breastwork ; 26 :
74326: LD_ADDR_OWVAR 42
74330: PUSH
74331: LD_INT 31
74333: ST_TO_ADDR
74334: GO 74508
74336: LD_INT 26
74338: DOUBLE
74339: EQUAL
74340: IFTRUE 74344
74342: GO 74355
74344: POP
// bc_type := b_bunker ; 27 :
74345: LD_ADDR_OWVAR 42
74349: PUSH
74350: LD_INT 32
74352: ST_TO_ADDR
74353: GO 74508
74355: LD_INT 27
74357: DOUBLE
74358: EQUAL
74359: IFTRUE 74363
74361: GO 74374
74363: POP
// bc_type := b_turret ; 28 :
74364: LD_ADDR_OWVAR 42
74368: PUSH
74369: LD_INT 33
74371: ST_TO_ADDR
74372: GO 74508
74374: LD_INT 28
74376: DOUBLE
74377: EQUAL
74378: IFTRUE 74382
74380: GO 74393
74382: POP
// bc_type := b_armoury ; 29 :
74383: LD_ADDR_OWVAR 42
74387: PUSH
74388: LD_INT 4
74390: ST_TO_ADDR
74391: GO 74508
74393: LD_INT 29
74395: DOUBLE
74396: EQUAL
74397: IFTRUE 74401
74399: GO 74412
74401: POP
// bc_type := b_barracks ; 30 :
74402: LD_ADDR_OWVAR 42
74406: PUSH
74407: LD_INT 5
74409: ST_TO_ADDR
74410: GO 74508
74412: LD_INT 30
74414: DOUBLE
74415: EQUAL
74416: IFTRUE 74420
74418: GO 74431
74420: POP
// bc_type := b_solar_power ; 31 :
74421: LD_ADDR_OWVAR 42
74425: PUSH
74426: LD_INT 27
74428: ST_TO_ADDR
74429: GO 74508
74431: LD_INT 31
74433: DOUBLE
74434: EQUAL
74435: IFTRUE 74439
74437: GO 74450
74439: POP
// bc_type := b_oil_power ; 32 :
74440: LD_ADDR_OWVAR 42
74444: PUSH
74445: LD_INT 26
74447: ST_TO_ADDR
74448: GO 74508
74450: LD_INT 32
74452: DOUBLE
74453: EQUAL
74454: IFTRUE 74458
74456: GO 74469
74458: POP
// bc_type := b_siberite_power ; 33 :
74459: LD_ADDR_OWVAR 42
74463: PUSH
74464: LD_INT 28
74466: ST_TO_ADDR
74467: GO 74508
74469: LD_INT 33
74471: DOUBLE
74472: EQUAL
74473: IFTRUE 74477
74475: GO 74488
74477: POP
// bc_type := b_oil_mine ; 34 :
74478: LD_ADDR_OWVAR 42
74482: PUSH
74483: LD_INT 29
74485: ST_TO_ADDR
74486: GO 74508
74488: LD_INT 34
74490: DOUBLE
74491: EQUAL
74492: IFTRUE 74496
74494: GO 74507
74496: POP
// bc_type := b_siberite_mine ; end ;
74497: LD_ADDR_OWVAR 42
74501: PUSH
74502: LD_INT 30
74504: ST_TO_ADDR
74505: GO 74508
74507: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74508: LD_ADDR_VAR 0 8
74512: PUSH
74513: LD_VAR 0 5
74517: PPUSH
74518: LD_VAR 0 6
74522: PPUSH
74523: LD_VAR 0 3
74527: PPUSH
74528: CALL_OW 47
74532: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74533: LD_OWVAR 42
74537: PUSH
74538: LD_INT 32
74540: PUSH
74541: LD_INT 33
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: IN
74548: IFFALSE 74564
// PlaceWeaponTurret ( b , weapon ) ;
74550: LD_VAR 0 8
74554: PPUSH
74555: LD_VAR 0 4
74559: PPUSH
74560: CALL_OW 431
// end ;
74564: LD_VAR 0 7
74568: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74569: LD_INT 0
74571: PPUSH
74572: PPUSH
74573: PPUSH
74574: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74575: LD_ADDR_VAR 0 4
74579: PUSH
74580: LD_INT 22
74582: PUSH
74583: LD_OWVAR 2
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: PUSH
74592: LD_INT 2
74594: PUSH
74595: LD_INT 30
74597: PUSH
74598: LD_INT 0
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PUSH
74605: LD_INT 30
74607: PUSH
74608: LD_INT 1
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: LIST
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: PPUSH
74624: CALL_OW 69
74628: ST_TO_ADDR
// if not tmp then
74629: LD_VAR 0 4
74633: NOT
74634: IFFALSE 74638
// exit ;
74636: GO 74697
// for i in tmp do
74638: LD_ADDR_VAR 0 2
74642: PUSH
74643: LD_VAR 0 4
74647: PUSH
74648: FOR_IN
74649: IFFALSE 74695
// for j = 1 to 3 do
74651: LD_ADDR_VAR 0 3
74655: PUSH
74656: DOUBLE
74657: LD_INT 1
74659: DEC
74660: ST_TO_ADDR
74661: LD_INT 3
74663: PUSH
74664: FOR_TO
74665: IFFALSE 74691
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74667: LD_VAR 0 2
74671: PPUSH
74672: CALL_OW 274
74676: PPUSH
74677: LD_VAR 0 3
74681: PPUSH
74682: LD_INT 99999
74684: PPUSH
74685: CALL_OW 277
74689: GO 74664
74691: POP
74692: POP
74693: GO 74648
74695: POP
74696: POP
// end ;
74697: LD_VAR 0 1
74701: RET
// export function hHackSetLevel10 ; var i , j ; begin
74702: LD_INT 0
74704: PPUSH
74705: PPUSH
74706: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74707: LD_ADDR_VAR 0 2
74711: PUSH
74712: LD_INT 21
74714: PUSH
74715: LD_INT 1
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: PPUSH
74722: CALL_OW 69
74726: PUSH
74727: FOR_IN
74728: IFFALSE 74780
// if IsSelected ( i ) then
74730: LD_VAR 0 2
74734: PPUSH
74735: CALL_OW 306
74739: IFFALSE 74778
// begin for j := 1 to 4 do
74741: LD_ADDR_VAR 0 3
74745: PUSH
74746: DOUBLE
74747: LD_INT 1
74749: DEC
74750: ST_TO_ADDR
74751: LD_INT 4
74753: PUSH
74754: FOR_TO
74755: IFFALSE 74776
// SetSkill ( i , j , 10 ) ;
74757: LD_VAR 0 2
74761: PPUSH
74762: LD_VAR 0 3
74766: PPUSH
74767: LD_INT 10
74769: PPUSH
74770: CALL_OW 237
74774: GO 74754
74776: POP
74777: POP
// end ;
74778: GO 74727
74780: POP
74781: POP
// end ;
74782: LD_VAR 0 1
74786: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74787: LD_INT 0
74789: PPUSH
74790: PPUSH
74791: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74792: LD_ADDR_VAR 0 2
74796: PUSH
74797: LD_INT 22
74799: PUSH
74800: LD_OWVAR 2
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PUSH
74809: LD_INT 21
74811: PUSH
74812: LD_INT 1
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: EMPTY
74820: LIST
74821: LIST
74822: PPUSH
74823: CALL_OW 69
74827: PUSH
74828: FOR_IN
74829: IFFALSE 74870
// begin for j := 1 to 4 do
74831: LD_ADDR_VAR 0 3
74835: PUSH
74836: DOUBLE
74837: LD_INT 1
74839: DEC
74840: ST_TO_ADDR
74841: LD_INT 4
74843: PUSH
74844: FOR_TO
74845: IFFALSE 74866
// SetSkill ( i , j , 10 ) ;
74847: LD_VAR 0 2
74851: PPUSH
74852: LD_VAR 0 3
74856: PPUSH
74857: LD_INT 10
74859: PPUSH
74860: CALL_OW 237
74864: GO 74844
74866: POP
74867: POP
// end ;
74868: GO 74828
74870: POP
74871: POP
// end ;
74872: LD_VAR 0 1
74876: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74877: LD_INT 0
74879: PPUSH
// uc_side := your_side ;
74880: LD_ADDR_OWVAR 20
74884: PUSH
74885: LD_OWVAR 2
74889: ST_TO_ADDR
// uc_nation := nation ;
74890: LD_ADDR_OWVAR 21
74894: PUSH
74895: LD_VAR 0 1
74899: ST_TO_ADDR
// InitHc ;
74900: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74904: LD_INT 0
74906: PPUSH
74907: LD_VAR 0 2
74911: PPUSH
74912: LD_VAR 0 3
74916: PPUSH
74917: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74921: LD_VAR 0 4
74925: PPUSH
74926: LD_VAR 0 5
74930: PPUSH
74931: CALL_OW 428
74935: PUSH
74936: LD_INT 0
74938: EQUAL
74939: IFFALSE 74963
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74941: CALL_OW 44
74945: PPUSH
74946: LD_VAR 0 4
74950: PPUSH
74951: LD_VAR 0 5
74955: PPUSH
74956: LD_INT 1
74958: PPUSH
74959: CALL_OW 48
// end ;
74963: LD_VAR 0 6
74967: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74968: LD_INT 0
74970: PPUSH
74971: PPUSH
// uc_side := your_side ;
74972: LD_ADDR_OWVAR 20
74976: PUSH
74977: LD_OWVAR 2
74981: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74982: LD_VAR 0 1
74986: PUSH
74987: LD_INT 1
74989: PUSH
74990: LD_INT 2
74992: PUSH
74993: LD_INT 3
74995: PUSH
74996: LD_INT 4
74998: PUSH
74999: LD_INT 5
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: IN
75009: IFFALSE 75021
// uc_nation := nation_american else
75011: LD_ADDR_OWVAR 21
75015: PUSH
75016: LD_INT 1
75018: ST_TO_ADDR
75019: GO 75064
// if chassis in [ 11 , 12 , 13 , 14 ] then
75021: LD_VAR 0 1
75025: PUSH
75026: LD_INT 11
75028: PUSH
75029: LD_INT 12
75031: PUSH
75032: LD_INT 13
75034: PUSH
75035: LD_INT 14
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: IN
75044: IFFALSE 75056
// uc_nation := nation_arabian else
75046: LD_ADDR_OWVAR 21
75050: PUSH
75051: LD_INT 2
75053: ST_TO_ADDR
75054: GO 75064
// uc_nation := nation_russian ;
75056: LD_ADDR_OWVAR 21
75060: PUSH
75061: LD_INT 3
75063: ST_TO_ADDR
// vc_chassis := chassis ;
75064: LD_ADDR_OWVAR 37
75068: PUSH
75069: LD_VAR 0 1
75073: ST_TO_ADDR
// vc_engine := engine ;
75074: LD_ADDR_OWVAR 39
75078: PUSH
75079: LD_VAR 0 2
75083: ST_TO_ADDR
// vc_control := control ;
75084: LD_ADDR_OWVAR 38
75088: PUSH
75089: LD_VAR 0 3
75093: ST_TO_ADDR
// vc_weapon := weapon ;
75094: LD_ADDR_OWVAR 40
75098: PUSH
75099: LD_VAR 0 4
75103: ST_TO_ADDR
// un := CreateVehicle ;
75104: LD_ADDR_VAR 0 8
75108: PUSH
75109: CALL_OW 45
75113: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75114: LD_VAR 0 8
75118: PPUSH
75119: LD_INT 0
75121: PPUSH
75122: LD_INT 5
75124: PPUSH
75125: CALL_OW 12
75129: PPUSH
75130: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75134: LD_VAR 0 8
75138: PPUSH
75139: LD_VAR 0 5
75143: PPUSH
75144: LD_VAR 0 6
75148: PPUSH
75149: LD_INT 1
75151: PPUSH
75152: CALL_OW 48
// end ;
75156: LD_VAR 0 7
75160: RET
// export hInvincible ; every 1 do
75161: GO 75163
75163: DISABLE
// hInvincible := [ ] ;
75164: LD_ADDR_EXP 125
75168: PUSH
75169: EMPTY
75170: ST_TO_ADDR
75171: END
// every 10 do var i ;
75172: GO 75174
75174: DISABLE
75175: LD_INT 0
75177: PPUSH
// begin enable ;
75178: ENABLE
// if not hInvincible then
75179: LD_EXP 125
75183: NOT
75184: IFFALSE 75188
// exit ;
75186: GO 75232
// for i in hInvincible do
75188: LD_ADDR_VAR 0 1
75192: PUSH
75193: LD_EXP 125
75197: PUSH
75198: FOR_IN
75199: IFFALSE 75230
// if GetLives ( i ) < 1000 then
75201: LD_VAR 0 1
75205: PPUSH
75206: CALL_OW 256
75210: PUSH
75211: LD_INT 1000
75213: LESS
75214: IFFALSE 75228
// SetLives ( i , 1000 ) ;
75216: LD_VAR 0 1
75220: PPUSH
75221: LD_INT 1000
75223: PPUSH
75224: CALL_OW 234
75228: GO 75198
75230: POP
75231: POP
// end ;
75232: PPOPN 1
75234: END
// export function hHackInvincible ; var i ; begin
75235: LD_INT 0
75237: PPUSH
75238: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75239: LD_ADDR_VAR 0 2
75243: PUSH
75244: LD_INT 2
75246: PUSH
75247: LD_INT 21
75249: PUSH
75250: LD_INT 1
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: PUSH
75257: LD_INT 21
75259: PUSH
75260: LD_INT 2
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: LIST
75271: PPUSH
75272: CALL_OW 69
75276: PUSH
75277: FOR_IN
75278: IFFALSE 75339
// if IsSelected ( i ) then
75280: LD_VAR 0 2
75284: PPUSH
75285: CALL_OW 306
75289: IFFALSE 75337
// begin if i in hInvincible then
75291: LD_VAR 0 2
75295: PUSH
75296: LD_EXP 125
75300: IN
75301: IFFALSE 75321
// hInvincible := hInvincible diff i else
75303: LD_ADDR_EXP 125
75307: PUSH
75308: LD_EXP 125
75312: PUSH
75313: LD_VAR 0 2
75317: DIFF
75318: ST_TO_ADDR
75319: GO 75337
// hInvincible := hInvincible union i ;
75321: LD_ADDR_EXP 125
75325: PUSH
75326: LD_EXP 125
75330: PUSH
75331: LD_VAR 0 2
75335: UNION
75336: ST_TO_ADDR
// end ;
75337: GO 75277
75339: POP
75340: POP
// end ;
75341: LD_VAR 0 1
75345: RET
// export function hHackInvisible ; var i , j ; begin
75346: LD_INT 0
75348: PPUSH
75349: PPUSH
75350: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75351: LD_ADDR_VAR 0 2
75355: PUSH
75356: LD_INT 21
75358: PUSH
75359: LD_INT 1
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PPUSH
75366: CALL_OW 69
75370: PUSH
75371: FOR_IN
75372: IFFALSE 75396
// if IsSelected ( i ) then
75374: LD_VAR 0 2
75378: PPUSH
75379: CALL_OW 306
75383: IFFALSE 75394
// ComForceInvisible ( i ) ;
75385: LD_VAR 0 2
75389: PPUSH
75390: CALL_OW 496
75394: GO 75371
75396: POP
75397: POP
// end ;
75398: LD_VAR 0 1
75402: RET
// export function hHackChangeYourSide ; begin
75403: LD_INT 0
75405: PPUSH
// if your_side = 8 then
75406: LD_OWVAR 2
75410: PUSH
75411: LD_INT 8
75413: EQUAL
75414: IFFALSE 75426
// your_side := 0 else
75416: LD_ADDR_OWVAR 2
75420: PUSH
75421: LD_INT 0
75423: ST_TO_ADDR
75424: GO 75440
// your_side := your_side + 1 ;
75426: LD_ADDR_OWVAR 2
75430: PUSH
75431: LD_OWVAR 2
75435: PUSH
75436: LD_INT 1
75438: PLUS
75439: ST_TO_ADDR
// end ;
75440: LD_VAR 0 1
75444: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75445: LD_INT 0
75447: PPUSH
75448: PPUSH
75449: PPUSH
// for i in all_units do
75450: LD_ADDR_VAR 0 2
75454: PUSH
75455: LD_OWVAR 3
75459: PUSH
75460: FOR_IN
75461: IFFALSE 75539
// if IsSelected ( i ) then
75463: LD_VAR 0 2
75467: PPUSH
75468: CALL_OW 306
75472: IFFALSE 75537
// begin j := GetSide ( i ) ;
75474: LD_ADDR_VAR 0 3
75478: PUSH
75479: LD_VAR 0 2
75483: PPUSH
75484: CALL_OW 255
75488: ST_TO_ADDR
// if j = 8 then
75489: LD_VAR 0 3
75493: PUSH
75494: LD_INT 8
75496: EQUAL
75497: IFFALSE 75509
// j := 0 else
75499: LD_ADDR_VAR 0 3
75503: PUSH
75504: LD_INT 0
75506: ST_TO_ADDR
75507: GO 75523
// j := j + 1 ;
75509: LD_ADDR_VAR 0 3
75513: PUSH
75514: LD_VAR 0 3
75518: PUSH
75519: LD_INT 1
75521: PLUS
75522: ST_TO_ADDR
// SetSide ( i , j ) ;
75523: LD_VAR 0 2
75527: PPUSH
75528: LD_VAR 0 3
75532: PPUSH
75533: CALL_OW 235
// end ;
75537: GO 75460
75539: POP
75540: POP
// end ;
75541: LD_VAR 0 1
75545: RET
// export function hHackFog ; begin
75546: LD_INT 0
75548: PPUSH
// FogOff ( true ) ;
75549: LD_INT 1
75551: PPUSH
75552: CALL_OW 344
// end ;
75556: LD_VAR 0 1
75560: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75561: LD_INT 0
75563: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75564: LD_VAR 0 1
75568: PPUSH
75569: LD_VAR 0 2
75573: PPUSH
75574: LD_VAR 0 3
75578: PPUSH
75579: LD_INT 1
75581: PPUSH
75582: LD_INT 1
75584: PPUSH
75585: CALL_OW 483
// CenterOnXY ( x , y ) ;
75589: LD_VAR 0 2
75593: PPUSH
75594: LD_VAR 0 3
75598: PPUSH
75599: CALL_OW 84
// end ; end_of_file
75603: LD_VAR 0 4
75607: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
75608: LD_INT 0
75610: PPUSH
// ar_miner := 81 ;
75611: LD_ADDR_EXP 133
75615: PUSH
75616: LD_INT 81
75618: ST_TO_ADDR
// ar_crane := 88 ;
75619: LD_ADDR_EXP 132
75623: PUSH
75624: LD_INT 88
75626: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
75627: LD_ADDR_EXP 127
75631: PUSH
75632: LD_INT 89
75634: ST_TO_ADDR
// us_hack := 99 ;
75635: LD_ADDR_EXP 128
75639: PUSH
75640: LD_INT 99
75642: ST_TO_ADDR
// us_artillery := 97 ;
75643: LD_ADDR_EXP 129
75647: PUSH
75648: LD_INT 97
75650: ST_TO_ADDR
// ar_bio_bomb := 91 ;
75651: LD_ADDR_EXP 130
75655: PUSH
75656: LD_INT 91
75658: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
75659: LD_ADDR_EXP 131
75663: PUSH
75664: LD_INT 92
75666: ST_TO_ADDR
// ru_radar := 98 ;
75667: LD_ADDR_EXP 126
75671: PUSH
75672: LD_INT 98
75674: ST_TO_ADDR
// tech_Artillery := 80 ;
75675: LD_ADDR_EXP 134
75679: PUSH
75680: LD_INT 80
75682: ST_TO_ADDR
// tech_RadMat := 81 ;
75683: LD_ADDR_EXP 135
75687: PUSH
75688: LD_INT 81
75690: ST_TO_ADDR
// tech_BasicTools := 82 ;
75691: LD_ADDR_EXP 136
75695: PUSH
75696: LD_INT 82
75698: ST_TO_ADDR
// tech_Cargo := 83 ;
75699: LD_ADDR_EXP 137
75703: PUSH
75704: LD_INT 83
75706: ST_TO_ADDR
// tech_Track := 84 ;
75707: LD_ADDR_EXP 138
75711: PUSH
75712: LD_INT 84
75714: ST_TO_ADDR
// tech_Crane := 85 ;
75715: LD_ADDR_EXP 139
75719: PUSH
75720: LD_INT 85
75722: ST_TO_ADDR
// tech_Bulldozer := 86 ;
75723: LD_ADDR_EXP 140
75727: PUSH
75728: LD_INT 86
75730: ST_TO_ADDR
// tech_Hovercraft := 87 ;
75731: LD_ADDR_EXP 141
75735: PUSH
75736: LD_INT 87
75738: ST_TO_ADDR
// end ;
75739: LD_VAR 0 1
75743: RET
// every 1 do
75744: GO 75746
75746: DISABLE
// InitGlobalVariables ; end_of_file
75747: CALL 75608 0 0
75751: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75752: LD_VAR 0 1
75756: PUSH
75757: LD_INT 200
75759: DOUBLE
75760: GREATEREQUAL
75761: IFFALSE 75769
75763: LD_INT 299
75765: DOUBLE
75766: LESSEQUAL
75767: IFTRUE 75771
75769: GO 75803
75771: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
75772: LD_VAR 0 1
75776: PPUSH
75777: LD_VAR 0 2
75781: PPUSH
75782: LD_VAR 0 3
75786: PPUSH
75787: LD_VAR 0 4
75791: PPUSH
75792: LD_VAR 0 5
75796: PPUSH
75797: CALL 58558 0 5
75801: GO 75804
75803: POP
// end ;
75804: PPOPN 11
75806: END
