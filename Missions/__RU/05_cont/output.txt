// starting begin Resetfog ;
   0: CALL_OW 335
// YouLost ( Demo ) ;
   4: LD_STRING Demo
   6: PPUSH
   7: CALL_OW 104
// end ;
  11: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; export achievement_DestroyedHovercrafts ; export achievement_CollectedCrates ; function InitMission ; begin
  12: LD_INT 0
  14: PPUSH
// ResetFog ;
  15: CALL_OW 335
// RandomizeAll ;
  19: CALL_OW 11
// InGameOn ;
  23: CALL_OW 8
// InitMapConfig ;
  27: CALL 249 0 0
// omarStatus = 0 ;
  31: LD_ADDR_EXP 1
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// stevensStatus = 0 ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// labDestroyed = 0 ;
  47: LD_ADDR_EXP 3
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  55: LD_ADDR_EXP 5
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  62: LD_ADDR_EXP 6
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_STRING 05_TanksIntro_1
  76: PPUSH
  77: EMPTY
  78: PPUSH
  79: CALL_OW 30
  83: ST_TO_ADDR
// actionTime = 0 0$00 ;
  84: LD_ADDR_EXP 7
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  92: LD_ADDR_EXP 10
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// sawArabianBase = false ;
 108: LD_ADDR_EXP 8
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// sawApeman = false ;
 116: LD_ADDR_EXP 9
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// stevensPlaced = false ;
 124: LD_ADDR_EXP 14
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// stevensFollow = false ;
 132: LD_ADDR_EXP 15
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 140: LD_ADDR_EXP 16
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// stevensDepot = false ;
 148: LD_ADDR_EXP 17
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// stevensWasInDepot = false ;
 156: LD_ADDR_EXP 18
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// stevensCanExitMap = false ;
 164: LD_ADDR_EXP 19
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// cratesSpawned = 0 ;
 172: LD_ADDR_EXP 22
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// fastBreakthrough = false ;
 180: LD_ADDR_EXP 23
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// finishMissionBool = false ;
 188: LD_ADDR_EXP 24
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// omarCanExitMap = false ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// arabianCanExitMap = false ;
 204: LD_ADDR_EXP 21
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// achievement_DestroyedHovercrafts = 0 ;
 212: LD_ADDR_EXP 25
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// achievement_CollectedCrates = false ;
 220: LD_ADDR_EXP 26
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// PrepareRussians ;
 228: CALL 908 0 0
// PrepareArabians ;
 232: CALL 1655 0 0
// Nef_PrepareNature ;
 236: CALL 19849 0 0
// MissionIntro ;
 240: CALL 2987 0 0
// end ; end_of_file
 244: LD_VAR 0 1
 248: RET
// export function InitMapConfig ; begin
 249: LD_INT 0
 251: PPUSH
// BaseMapConfig ;
 252: CALL 265 0 0
// MissionMapConfig ;
 256: CALL 355 0 0
// end ;
 260: LD_VAR 0 1
 264: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 265: LD_INT 0
 267: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 268: LD_ADDR_EXP 27
 272: PUSH
 273: LD_INT 4
 275: PUSH
 276: LD_INT 3
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: LD_INT 0
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 295: LD_ADDR_EXP 28
 299: PUSH
 300: LD_INT 2
 302: PUSH
 303: LD_INT 2
 305: PUSH
 306: LD_INT 2
 308: PUSH
 309: LD_INT 2
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// animalsAgression = 0 ;
 318: LD_ADDR_EXP 29
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// debugMode = 0 ;
 326: LD_ADDR_EXP 32
 330: PUSH
 331: LD_INT 0
 333: ST_TO_ADDR
// missionPrefix = 05_ ;
 334: LD_ADDR_EXP 30
 338: PUSH
 339: LD_STRING 05_
 341: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 342: LD_ADDR_EXP 31
 346: PUSH
 347: LD_STRING 04_
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 355: LD_INT 0
 357: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 ] [ Difficulty ] ;
 358: LD_ADDR_EXP 33
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 3
 368: PUSH
 369: LD_INT 4
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: LIST
 376: PUSH
 377: LD_OWVAR 67
 381: ARRAY
 382: ST_TO_ADDR
// arabBreakthrough = [ 35 35$0 , 33 33$0 , 30 30$0 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 34
 387: PUSH
 388: LD_INT 73500
 390: PUSH
 391: LD_INT 69300
 393: PUSH
 394: LD_INT 63000
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: LD_OWVAR 67
 406: ARRAY
 407: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 408: LD_ADDR_EXP 35
 412: PUSH
 413: LD_INT 2
 415: PUSH
 416: LD_INT 1
 418: PUSH
 419: LD_INT 6
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: ST_TO_ADDR
// arabianPatrolVehiclesAmount = 1 ;
 431: LD_ADDR_EXP 36
 435: PUSH
 436: LD_INT 1
 438: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 37
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: LD_INT 3
 449: PUSH
 450: LD_INT 3
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: LD_OWVAR 67
 462: ARRAY
 463: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 464: LD_ADDR_EXP 38
 468: PUSH
 469: LD_INT 108
 471: PUSH
 472: LD_INT 15
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 102
 481: PUSH
 482: LD_INT 45
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 65
 491: PUSH
 492: LD_INT 23
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 37
 501: PUSH
 502: LD_INT 28
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 32
 511: PUSH
 512: LD_INT 40
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 45
 521: PUSH
 522: LD_INT 74
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 69
 531: PUSH
 532: LD_INT 98
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: LD_INT 101
 541: PUSH
 542: LD_INT 101
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 117
 551: PUSH
 552: LD_INT 84
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 158
 561: PUSH
 562: LD_INT 132
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// end ;
 581: LD_VAR 0 1
 585: RET
// every 0 0$1 trigger debugMode do var i ;
 586: LD_EXP 32
 590: IFFALSE 905
 592: GO 594
 594: DISABLE
 595: LD_INT 0
 597: PPUSH
// begin enable ;
 598: ENABLE
// FogOff ( your_side ) ;
 599: LD_OWVAR 2
 603: PPUSH
 604: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 608: LD_ADDR_VAR 0 1
 612: PUSH
 613: LD_INT 22
 615: PUSH
 616: LD_OWVAR 2
 620: PUSH
 621: EMPTY
 622: LIST
 623: LIST
 624: PUSH
 625: LD_INT 2
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 21
 640: PUSH
 641: LD_INT 2
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PPUSH
 657: CALL_OW 69
 661: PUSH
 662: FOR_IN
 663: IFFALSE 679
// SetLives ( i , 1000 ) ;
 665: LD_VAR 0 1
 669: PPUSH
 670: LD_INT 1000
 672: PPUSH
 673: CALL_OW 234
 677: GO 662
 679: POP
 680: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 681: LD_ADDR_VAR 0 1
 685: PUSH
 686: LD_INT 22
 688: PUSH
 689: LD_OWVAR 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 21
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: PPUSH
 712: CALL_OW 69
 716: PUSH
 717: FOR_IN
 718: IFFALSE 782
// begin SetSkill ( i , skill_combat , 10 ) ;
 720: LD_VAR 0 1
 724: PPUSH
 725: LD_INT 1
 727: PPUSH
 728: LD_INT 10
 730: PPUSH
 731: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 735: LD_VAR 0 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: LD_INT 10
 745: PPUSH
 746: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 750: LD_VAR 0 1
 754: PPUSH
 755: LD_INT 3
 757: PPUSH
 758: LD_INT 10
 760: PPUSH
 761: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 765: LD_VAR 0 1
 769: PPUSH
 770: LD_INT 4
 772: PPUSH
 773: LD_INT 10
 775: PPUSH
 776: CALL_OW 237
// end ;
 780: GO 717
 782: POP
 783: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 784: LD_ADDR_VAR 0 1
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_OWVAR 2
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 30
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 30
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PPUSH
 833: CALL_OW 69
 837: PUSH
 838: FOR_IN
 839: IFFALSE 903
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 841: LD_VAR 0 1
 845: PPUSH
 846: CALL_OW 274
 850: PPUSH
 851: LD_INT 1
 853: PPUSH
 854: LD_INT 9999
 856: PPUSH
 857: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 861: LD_VAR 0 1
 865: PPUSH
 866: CALL_OW 274
 870: PPUSH
 871: LD_INT 2
 873: PPUSH
 874: LD_INT 9999
 876: PPUSH
 877: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 881: LD_VAR 0 1
 885: PPUSH
 886: CALL_OW 274
 890: PPUSH
 891: LD_INT 3
 893: PPUSH
 894: LD_INT 9999
 896: PPUSH
 897: CALL_OW 277
// end ;
 901: GO 838
 903: POP
 904: POP
// end ; end_of_file
 905: PPOPN 1
 907: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 908: LD_INT 0
 910: PPUSH
// PrepareHeroes ;
 911: CALL 920 0 0
// end ;
 915: LD_VAR 0 1
 919: RET
// function PrepareHeroes ; var i , car ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
// ruCars = [ ] ;
 925: LD_ADDR_EXP 48
 929: PUSH
 930: EMPTY
 931: ST_TO_ADDR
// uc_side = 3 ;
 932: LD_ADDR_OWVAR 20
 936: PUSH
 937: LD_INT 3
 939: ST_TO_ADDR
// uc_nation = 3 ;
 940: LD_ADDR_OWVAR 21
 944: PUSH
 945: LD_INT 3
 947: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 948: LD_ADDR_EXP 39
 952: PUSH
 953: LD_STRING Burlak
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: LD_INT 3
 961: PPUSH
 962: CALL 8455 0 3
 966: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 967: LD_ADDR_EXP 44
 971: PUSH
 972: LD_STRING Titov
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: CALL 8455 0 3
 985: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 986: LD_ADDR_EXP 45
 990: PUSH
 991: LD_STRING Dolgov
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: LD_INT 4
 999: PPUSH
1000: CALL 8455 0 3
1004: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
1005: LD_ADDR_EXP 46
1009: PUSH
1010: LD_STRING Lipshchin
1012: PPUSH
1013: LD_INT 0
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: CALL 8455 0 3
1023: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1024: LD_ADDR_EXP 40
1028: PUSH
1029: LD_STRING Karamazov
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: LD_INT 2
1037: PPUSH
1038: CALL 8455 0 3
1042: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1043: LD_ADDR_EXP 41
1047: PUSH
1048: LD_STRING Petrovova
1050: PPUSH
1051: LD_INT 0
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: CALL 8455 0 3
1061: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1062: LD_ADDR_EXP 42
1066: PUSH
1067: LD_STRING Gleb
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: LD_INT 1
1075: PPUSH
1076: CALL 8455 0 3
1080: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1081: LD_ADDR_EXP 43
1085: PUSH
1086: LD_STRING Petrosyan
1088: PPUSH
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: CALL 8455 0 3
1099: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1100: LD_ADDR_EXP 47
1104: PUSH
1105: LD_STRING Platonov
1107: PPUSH
1108: LD_INT 0
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL 8455 0 3
1118: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1119: LD_ADDR_VAR 0 2
1123: PUSH
1124: DOUBLE
1125: LD_INT 1
1127: DEC
1128: ST_TO_ADDR
1129: LD_EXP 4
1133: PUSH
1134: FOR_TO
1135: IFFALSE 1513
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1137: LD_ADDR_OWVAR 37
1141: PUSH
1142: LD_EXP 4
1146: PUSH
1147: LD_VAR 0 2
1151: ARRAY
1152: PUSH
1153: LD_INT 1
1155: ARRAY
1156: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1157: LD_ADDR_OWVAR 39
1161: PUSH
1162: LD_EXP 4
1166: PUSH
1167: LD_VAR 0 2
1171: ARRAY
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1177: LD_ADDR_OWVAR 38
1181: PUSH
1182: LD_EXP 4
1186: PUSH
1187: LD_VAR 0 2
1191: ARRAY
1192: PUSH
1193: LD_INT 3
1195: ARRAY
1196: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1197: LD_ADDR_OWVAR 40
1201: PUSH
1202: LD_EXP 4
1206: PUSH
1207: LD_VAR 0 2
1211: ARRAY
1212: PUSH
1213: LD_INT 4
1215: ARRAY
1216: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1217: LD_ADDR_OWVAR 24
1221: PUSH
1222: LD_INT 3
1224: PPUSH
1225: LD_INT 4
1227: PPUSH
1228: CALL_OW 12
1232: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1233: LD_ADDR_OWVAR 41
1237: PUSH
1238: LD_INT 25
1240: PPUSH
1241: LD_INT 40
1243: PPUSH
1244: CALL_OW 12
1248: ST_TO_ADDR
// car := CreateVehicle ;
1249: LD_ADDR_VAR 0 3
1253: PUSH
1254: CALL_OW 45
1258: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1259: LD_ADDR_EXP 48
1263: PUSH
1264: LD_EXP 48
1268: PUSH
1269: LD_VAR 0 3
1273: ADD
1274: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1275: LD_EXP 4
1279: PUSH
1280: LD_VAR 0 2
1284: ARRAY
1285: PUSH
1286: LD_INT 5
1288: ARRAY
1289: PUSH
1290: LD_STRING Bur
1292: DOUBLE
1293: EQUAL
1294: IFTRUE 1298
1296: GO 1315
1298: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1299: LD_EXP 39
1303: PPUSH
1304: LD_VAR 0 3
1308: PPUSH
1309: CALL_OW 52
1313: GO 1491
1315: LD_STRING Kar
1317: DOUBLE
1318: EQUAL
1319: IFTRUE 1323
1321: GO 1340
1323: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1324: LD_EXP 40
1328: PPUSH
1329: LD_VAR 0 3
1333: PPUSH
1334: CALL_OW 52
1338: GO 1491
1340: LD_STRING Ptr
1342: DOUBLE
1343: EQUAL
1344: IFTRUE 1348
1346: GO 1365
1348: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1349: LD_EXP 41
1353: PPUSH
1354: LD_VAR 0 3
1358: PPUSH
1359: CALL_OW 52
1363: GO 1491
1365: LD_STRING Glb
1367: DOUBLE
1368: EQUAL
1369: IFTRUE 1373
1371: GO 1390
1373: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1374: LD_EXP 42
1378: PPUSH
1379: LD_VAR 0 3
1383: PPUSH
1384: CALL_OW 52
1388: GO 1491
1390: LD_STRING Pet
1392: DOUBLE
1393: EQUAL
1394: IFTRUE 1398
1396: GO 1415
1398: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1399: LD_EXP 43
1403: PPUSH
1404: LD_VAR 0 3
1408: PPUSH
1409: CALL_OW 52
1413: GO 1491
1415: LD_STRING Dol
1417: DOUBLE
1418: EQUAL
1419: IFTRUE 1423
1421: GO 1440
1423: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1424: LD_EXP 45
1428: PPUSH
1429: LD_VAR 0 3
1433: PPUSH
1434: CALL_OW 52
1438: GO 1491
1440: LD_STRING Lip
1442: DOUBLE
1443: EQUAL
1444: IFTRUE 1448
1446: GO 1465
1448: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1449: LD_EXP 46
1453: PPUSH
1454: LD_VAR 0 3
1458: PPUSH
1459: CALL_OW 52
1463: GO 1491
1465: LD_STRING Tit
1467: DOUBLE
1468: EQUAL
1469: IFTRUE 1473
1471: GO 1490
1473: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1474: LD_EXP 44
1478: PPUSH
1479: LD_VAR 0 3
1483: PPUSH
1484: CALL_OW 52
1488: GO 1491
1490: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1491: LD_VAR 0 3
1495: PPUSH
1496: LD_INT 251
1498: PPUSH
1499: LD_INT 800
1501: PPUSH
1502: CALL_OW 12
1506: PPUSH
1507: CALL_OW 234
// end ;
1511: GO 1134
1513: POP
1514: POP
// for i in ruCars do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_EXP 48
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1545
// PlaceUnitArea ( i , ru_place2 , false ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_INT 18
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
1543: GO 1525
1545: POP
1546: POP
// RevealFogArea ( 3 , co_vidi ) ;
1547: LD_INT 3
1549: PPUSH
1550: LD_INT 19
1552: PPUSH
1553: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1557: LD_EXP 48
1561: PPUSH
1562: LD_INT 3
1564: PPUSH
1565: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1569: LD_INT 4
1571: PPUSH
1572: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1576: LD_EXP 39
1580: PPUSH
1581: CALL_OW 310
1585: PPUSH
1586: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1590: LD_INT 3
1592: PPUSH
1593: LD_INT 22
1595: PUSH
1596: LD_INT 3
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 21
1605: PUSH
1606: LD_INT 2
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 70
1621: PUSH
1622: LD_INT 5
1624: LESS
1625: IFFALSE 1650
// begin wait ( 0 0$1 ) ;
1627: LD_INT 35
1629: PPUSH
1630: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1634: LD_EXP 39
1638: PPUSH
1639: CALL_OW 310
1643: PPUSH
1644: CALL_OW 85
// end ;
1648: GO 1590
// end ; end_of_file
1650: LD_VAR 0 1
1654: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts , arabianPatrolTroops ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1655: LD_INT 0
1657: PPUSH
// arabianUnitsInBase = [ ] ;
1658: LD_ADDR_EXP 51
1662: PUSH
1663: EMPTY
1664: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1665: LD_ADDR_EXP 53
1669: PUSH
1670: EMPTY
1671: ST_TO_ADDR
// arabianPatrolTroops = [ ] ;
1672: LD_ADDR_EXP 54
1676: PUSH
1677: EMPTY
1678: ST_TO_ADDR
// arabLeftExit = true ;
1679: LD_ADDR_EXP 55
1683: PUSH
1684: LD_INT 1
1686: ST_TO_ADDR
// PrepareHeroes ;
1687: CALL 1720 0 0
// PrepareBuildings ;
1691: CALL 1786 0 0
// PrepareUnits ;
1695: CALL 2138 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1699: LD_EXP 36
1703: PPUSH
1704: LD_INT 42
1706: PPUSH
1707: CALL 2675 0 2
// PrepareArabianHovercraft ;
1711: CALL 2834 0 0
// end ;
1715: LD_VAR 0 1
1719: RET
// function PrepareHeroes ; begin
1720: LD_INT 0
1722: PPUSH
// uc_side = 2 ;
1723: LD_ADDR_OWVAR 20
1727: PUSH
1728: LD_INT 2
1730: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1731: LD_ADDR_EXP 49
1735: PUSH
1736: LD_STRING Heike
1738: PPUSH
1739: LD_INT 0
1741: PPUSH
1742: LD_INT 0
1744: PPUSH
1745: CALL 8455 0 3
1749: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1750: LD_ADDR_EXP 50
1754: PUSH
1755: LD_STRING Omar
1757: PPUSH
1758: LD_INT 0
1760: PPUSH
1761: LD_INT 11
1763: PPUSH
1764: CALL 8455 0 3
1768: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1769: LD_EXP 50
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 52
// end ;
1781: LD_VAR 0 1
1785: RET
// function PrepareBuildings ; var depot ; begin
1786: LD_INT 0
1788: PPUSH
1789: PPUSH
// uc_side = 2 ;
1790: LD_ADDR_OWVAR 20
1794: PUSH
1795: LD_INT 2
1797: ST_TO_ADDR
// uc_nation = nation_arabian ;
1798: LD_ADDR_OWVAR 21
1802: PUSH
1803: LD_INT 2
1805: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1806: LD_ADDR_OWVAR 43
1810: PUSH
1811: LD_EXP 33
1815: ST_TO_ADDR
// bc_type = b_breastwork ;
1816: LD_ADDR_OWVAR 42
1820: PUSH
1821: LD_INT 31
1823: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1824: LD_INT 118
1826: PPUSH
1827: LD_INT 63
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1837: LD_INT 120
1839: PPUSH
1840: LD_INT 66
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1850: LD_INT 123
1852: PPUSH
1853: LD_INT 73
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL_OW 47
// if Difficulty = 2 then
1863: LD_OWVAR 67
1867: PUSH
1868: LD_INT 2
1870: EQUAL
1871: IFFALSE 1886
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1873: LD_INT 145
1875: PPUSH
1876: LD_INT 83
1878: PPUSH
1879: LD_INT 0
1881: PPUSH
1882: CALL_OW 47
// if Difficulty = 3 then
1886: LD_OWVAR 67
1890: PUSH
1891: LD_INT 3
1893: EQUAL
1894: IFFALSE 1922
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1896: LD_INT 145
1898: PPUSH
1899: LD_INT 83
1901: PPUSH
1902: LD_INT 0
1904: PPUSH
1905: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1909: LD_INT 151
1911: PPUSH
1912: LD_INT 81
1914: PPUSH
1915: LD_INT 5
1917: PPUSH
1918: CALL_OW 47
// end ; bc_type = b_depot ;
1922: LD_ADDR_OWVAR 42
1926: PUSH
1927: LD_INT 0
1929: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1930: LD_ADDR_VAR 0 2
1934: PUSH
1935: LD_INT 124
1937: PPUSH
1938: LD_INT 60
1940: PPUSH
1941: LD_INT 2
1943: PPUSH
1944: CALL_OW 47
1948: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1949: LD_VAR 0 2
1953: PPUSH
1954: CALL_OW 274
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: LD_INT 3000
1964: PPUSH
1965: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1969: LD_INT 131
1971: PPUSH
1972: LD_INT 51
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: CALL_OW 441
// bc_type = b_oil_mine ;
1982: LD_ADDR_OWVAR 42
1986: PUSH
1987: LD_INT 29
1989: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
1990: LD_INT 131
1992: PPUSH
1993: LD_INT 51
1995: PPUSH
1996: LD_INT 2
1998: PPUSH
1999: CALL_OW 47
// case Difficulty of 1 :
2003: LD_OWVAR 67
2007: PUSH
2008: LD_INT 1
2010: DOUBLE
2011: EQUAL
2012: IFTRUE 2016
2014: GO 2032
2016: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2017: LD_INT 48
2019: PPUSH
2020: LD_INT 2
2022: PPUSH
2023: LD_INT 2
2025: PPUSH
2026: CALL_OW 322
// end ; 2 :
2030: GO 2133
2032: LD_INT 2
2034: DOUBLE
2035: EQUAL
2036: IFTRUE 2040
2038: GO 2069
2040: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2041: LD_INT 48
2043: PPUSH
2044: LD_INT 2
2046: PPUSH
2047: LD_INT 2
2049: PPUSH
2050: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2054: LD_INT 51
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 322
// end ; 3 :
2067: GO 2133
2069: LD_INT 3
2071: DOUBLE
2072: EQUAL
2073: IFTRUE 2077
2075: GO 2132
2077: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2078: LD_INT 48
2080: PPUSH
2081: LD_INT 2
2083: PPUSH
2084: LD_INT 2
2086: PPUSH
2087: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2091: LD_INT 51
2093: PPUSH
2094: LD_INT 2
2096: PPUSH
2097: LD_INT 2
2099: PPUSH
2100: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2104: LD_INT 49
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: LD_INT 2
2112: PPUSH
2113: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2117: LD_INT 52
2119: PPUSH
2120: LD_INT 2
2122: PPUSH
2123: LD_INT 2
2125: PPUSH
2126: CALL_OW 322
// end ; end ;
2130: GO 2133
2132: POP
// end ;
2133: LD_VAR 0 1
2137: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2138: LD_INT 0
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
// uc_side = 2 ;
2144: LD_ADDR_OWVAR 20
2148: PUSH
2149: LD_INT 2
2151: ST_TO_ADDR
// uc_nation = 2 ;
2152: LD_ADDR_OWVAR 21
2156: PUSH
2157: LD_INT 2
2159: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2160: LD_ADDR_VAR 0 4
2164: PUSH
2165: LD_INT 22
2167: PUSH
2168: LD_INT 2
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 30
2177: PUSH
2178: LD_INT 31
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PPUSH
2189: CALL_OW 69
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2251
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2197: LD_INT 0
2199: PPUSH
2200: LD_EXP 33
2204: PPUSH
2205: CALL_OW 381
// unit = CreateHuman ;
2209: LD_ADDR_VAR 0 3
2213: PUSH
2214: CALL_OW 44
2218: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2219: LD_VAR 0 3
2223: PPUSH
2224: LD_VAR 0 4
2228: PPUSH
2229: CALL 9055 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2233: LD_ADDR_EXP 51
2237: PUSH
2238: LD_EXP 51
2242: PUSH
2243: LD_VAR 0 3
2247: ADD
2248: ST_TO_ADDR
// end ;
2249: GO 2194
2251: POP
2252: POP
// for i := 1 to arabianUnits [ 1 ] do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_EXP 35
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PUSH
2272: FOR_TO
2273: IFFALSE 2330
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2275: LD_INT 0
2277: PPUSH
2278: LD_EXP 33
2282: PPUSH
2283: CALL_OW 381
// unit = CreateHuman ;
2287: LD_ADDR_VAR 0 3
2291: PUSH
2292: CALL_OW 44
2296: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2297: LD_VAR 0 3
2301: PPUSH
2302: LD_INT 38
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2312: LD_ADDR_EXP 51
2316: PUSH
2317: LD_EXP 51
2321: PUSH
2322: LD_VAR 0 3
2326: ADD
2327: ST_TO_ADDR
// end ;
2328: GO 2272
2330: POP
2331: POP
// for i := 1 to arabianUnits [ 2 ] do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_INT 1
2340: DEC
2341: ST_TO_ADDR
2342: LD_EXP 35
2346: PUSH
2347: LD_INT 2
2349: ARRAY
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2409
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2354: LD_INT 0
2356: PPUSH
2357: LD_EXP 33
2361: PPUSH
2362: CALL_OW 382
// unit = CreateHuman ;
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: CALL_OW 44
2375: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2376: LD_VAR 0 3
2380: PPUSH
2381: LD_INT 38
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2391: LD_ADDR_EXP 51
2395: PUSH
2396: LD_EXP 51
2400: PUSH
2401: LD_VAR 0 3
2405: ADD
2406: ST_TO_ADDR
// end ;
2407: GO 2351
2409: POP
2410: POP
// for i := 1 to arabianUnits [ 3 ] do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: DOUBLE
2417: LD_INT 1
2419: DEC
2420: ST_TO_ADDR
2421: LD_EXP 35
2425: PUSH
2426: LD_INT 3
2428: ARRAY
2429: PUSH
2430: FOR_TO
2431: IFFALSE 2488
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2433: LD_INT 0
2435: PPUSH
2436: LD_EXP 33
2440: PPUSH
2441: CALL_OW 383
// unit = CreateHuman ;
2445: LD_ADDR_VAR 0 3
2449: PUSH
2450: CALL_OW 44
2454: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2455: LD_VAR 0 3
2459: PPUSH
2460: LD_INT 38
2462: PPUSH
2463: LD_INT 0
2465: PPUSH
2466: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2470: LD_ADDR_EXP 51
2474: PUSH
2475: LD_EXP 51
2479: PUSH
2480: LD_VAR 0 3
2484: ADD
2485: ST_TO_ADDR
// end ;
2486: GO 2430
2488: POP
2489: POP
// for i := 1 to arabianUnits [ 4 ] do
2490: LD_ADDR_VAR 0 2
2494: PUSH
2495: DOUBLE
2496: LD_INT 1
2498: DEC
2499: ST_TO_ADDR
2500: LD_EXP 35
2504: PUSH
2505: LD_INT 4
2507: ARRAY
2508: PUSH
2509: FOR_TO
2510: IFFALSE 2567
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2512: LD_INT 0
2514: PPUSH
2515: LD_EXP 33
2519: PPUSH
2520: CALL_OW 384
// unit = CreateHuman ;
2524: LD_ADDR_VAR 0 3
2528: PUSH
2529: CALL_OW 44
2533: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2534: LD_VAR 0 3
2538: PPUSH
2539: LD_INT 38
2541: PPUSH
2542: LD_INT 0
2544: PPUSH
2545: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2549: LD_ADDR_EXP 51
2553: PUSH
2554: LD_EXP 51
2558: PUSH
2559: LD_VAR 0 3
2563: ADD
2564: ST_TO_ADDR
// end ;
2565: GO 2509
2567: POP
2568: POP
// end ;
2569: LD_VAR 0 1
2573: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2574: LD_INT 0
2576: PPUSH
2577: PPUSH
2578: PPUSH
// uc_side = 2 ;
2579: LD_ADDR_OWVAR 20
2583: PUSH
2584: LD_INT 2
2586: ST_TO_ADDR
// uc_nation = 2 ;
2587: LD_ADDR_OWVAR 21
2591: PUSH
2592: LD_INT 2
2594: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2595: LD_ADDR_VAR 0 2
2599: PUSH
2600: DOUBLE
2601: LD_INT 1
2603: DEC
2604: ST_TO_ADDR
2605: LD_EXP 37
2609: PUSH
2610: FOR_TO
2611: IFFALSE 2668
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2613: LD_INT 0
2615: PPUSH
2616: LD_EXP 33
2620: PPUSH
2621: CALL_OW 381
// unit = CreateHuman ;
2625: LD_ADDR_VAR 0 3
2629: PUSH
2630: CALL_OW 44
2634: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2635: LD_VAR 0 3
2639: PPUSH
2640: LD_INT 45
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 49
// arabianPatrolTroops = arabianPatrolTroops ^ unit ;
2650: LD_ADDR_EXP 54
2654: PUSH
2655: LD_EXP 54
2659: PUSH
2660: LD_VAR 0 3
2664: ADD
2665: ST_TO_ADDR
// end ;
2666: GO 2610
2668: POP
2669: POP
// end ;
2670: LD_VAR 0 1
2674: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2675: LD_INT 0
2677: PPUSH
2678: PPUSH
2679: PPUSH
// uc_side = 2 ;
2680: LD_ADDR_OWVAR 20
2684: PUSH
2685: LD_INT 2
2687: ST_TO_ADDR
// uc_nation = 2 ;
2688: LD_ADDR_OWVAR 21
2692: PUSH
2693: LD_INT 2
2695: ST_TO_ADDR
// for i := 1 to amount do
2696: LD_ADDR_VAR 0 4
2700: PUSH
2701: DOUBLE
2702: LD_INT 1
2704: DEC
2705: ST_TO_ADDR
2706: LD_VAR 0 1
2710: PUSH
2711: FOR_TO
2712: IFFALSE 2827
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2714: LD_INT 14
2716: PPUSH
2717: LD_INT 1
2719: PPUSH
2720: LD_INT 1
2722: PPUSH
2723: LD_INT 26
2725: PUSH
2726: LD_INT 25
2728: PUSH
2729: LD_INT 27
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 3
2742: PPUSH
2743: CALL_OW 12
2747: ARRAY
2748: PPUSH
2749: LD_INT 100
2751: PPUSH
2752: CALL 25586 0 5
// veh = CreateVehicle ;
2756: LD_ADDR_VAR 0 5
2760: PUSH
2761: CALL_OW 45
2765: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2766: LD_ADDR_EXP 52
2770: PUSH
2771: LD_EXP 52
2775: PUSH
2776: LD_VAR 0 5
2780: ADD
2781: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2782: LD_VAR 0 5
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: LD_INT 0
2794: PPUSH
2795: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2799: LD_INT 0
2801: PPUSH
2802: LD_EXP 33
2806: PPUSH
2807: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2811: CALL_OW 44
2815: PPUSH
2816: LD_VAR 0 5
2820: PPUSH
2821: CALL_OW 52
// end ;
2825: GO 2711
2827: POP
2828: POP
// end ;
2829: LD_VAR 0 3
2833: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// uc_side = 2 ;
2839: LD_ADDR_OWVAR 20
2843: PUSH
2844: LD_INT 2
2846: ST_TO_ADDR
// uc_nation = 2 ;
2847: LD_ADDR_OWVAR 21
2851: PUSH
2852: LD_INT 2
2854: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2855: LD_ADDR_VAR 0 2
2859: PUSH
2860: DOUBLE
2861: LD_INT 1
2863: DEC
2864: ST_TO_ADDR
2865: LD_EXP 36
2869: PUSH
2870: FOR_TO
2871: IFFALSE 2980
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2873: LD_INT 11
2875: PPUSH
2876: LD_INT 1
2878: PPUSH
2879: LD_INT 1
2881: PPUSH
2882: LD_INT 24
2884: PUSH
2885: LD_INT 23
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 1
2894: PPUSH
2895: LD_INT 2
2897: PPUSH
2898: CALL_OW 12
2902: ARRAY
2903: PPUSH
2904: LD_INT 100
2906: PPUSH
2907: CALL 25586 0 5
// veh = CreateVehicle ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 45
2920: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2921: LD_ADDR_EXP 53
2925: PUSH
2926: LD_EXP 53
2930: PUSH
2931: LD_VAR 0 3
2935: ADD
2936: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 47
2944: PPUSH
2945: LD_INT 0
2947: PPUSH
2948: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2952: LD_INT 0
2954: PPUSH
2955: LD_EXP 33
2959: PPUSH
2960: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 3
2973: PPUSH
2974: CALL_OW 52
// end ;
2978: GO 2870
2980: POP
2981: POP
// end ; end_of_file
2982: LD_VAR 0 1
2986: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
2987: LD_INT 0
2989: PPUSH
2990: PPUSH
2991: PPUSH
2992: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
2993: LD_ADDR_VAR 0 3
2997: PUSH
2998: LD_INT 66
3000: PUSH
3001: LD_INT 87
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 66
3010: PUSH
3011: LD_INT 86
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PUSH
3018: LD_INT 67
3020: PUSH
3021: LD_INT 86
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 69
3030: PUSH
3031: LD_INT 87
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: LD_INT 70
3040: PUSH
3041: LD_INT 88
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 71
3050: PUSH
3051: LD_INT 89
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 72
3060: PUSH
3061: LD_INT 90
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 72
3070: PUSH
3071: LD_INT 91
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3088: LD_INT 280
3090: PPUSH
3091: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3095: LD_EXP 39
3099: PPUSH
3100: LD_STRING DStart-Bur-1
3102: PPUSH
3103: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3107: LD_EXP 47
3111: PPUSH
3112: LD_STRING DStart-Pla-1
3114: PPUSH
3115: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3119: LD_EXP 39
3123: PPUSH
3124: LD_STRING DStart-Bur-2
3126: PPUSH
3127: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3131: LD_EXP 47
3135: PPUSH
3136: LD_STRING DStart-Pla-2
3138: PPUSH
3139: CALL_OW 94
// x = 0 ;
3143: LD_ADDR_VAR 0 4
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3151: LD_ADDR_VAR 0 2
3155: PUSH
3156: LD_INT 22
3158: PUSH
3159: LD_INT 3
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: LD_INT 21
3168: PUSH
3169: LD_INT 1
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PPUSH
3180: CALL_OW 69
3184: PUSH
3185: FOR_IN
3186: IFFALSE 3274
// begin ComExitVehicle ( unit ) ;
3188: LD_VAR 0 2
3192: PPUSH
3193: CALL_OW 121
// wait ( 0 0$1 ) ;
3197: LD_INT 35
3199: PPUSH
3200: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3204: LD_VAR 0 2
3208: PPUSH
3209: LD_VAR 0 3
3213: PUSH
3214: LD_VAR 0 4
3218: ARRAY
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 3
3228: PUSH
3229: LD_VAR 0 4
3233: ARRAY
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: PPUSH
3239: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3243: LD_VAR 0 2
3247: PPUSH
3248: LD_INT 69
3250: PPUSH
3251: LD_INT 96
3253: PPUSH
3254: CALL_OW 178
// x = x + 1 ;
3258: LD_ADDR_VAR 0 4
3262: PUSH
3263: LD_VAR 0 4
3267: PUSH
3268: LD_INT 1
3270: PLUS
3271: ST_TO_ADDR
// end ;
3272: GO 3185
3274: POP
3275: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3276: LD_EXP 39
3280: PPUSH
3281: CALL_OW 87
// x = 0 ;
3285: LD_ADDR_VAR 0 4
3289: PUSH
3290: LD_INT 0
3292: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3293: LD_ADDR_VAR 0 2
3297: PUSH
3298: LD_INT 22
3300: PUSH
3301: LD_INT 3
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 21
3310: PUSH
3311: LD_INT 1
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PPUSH
3322: CALL_OW 69
3326: PUSH
3327: FOR_IN
3328: IFFALSE 3400
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3330: LD_VAR 0 2
3334: PPUSH
3335: LD_VAR 0 3
3339: PUSH
3340: LD_VAR 0 4
3344: ARRAY
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: LD_VAR 0 3
3354: PUSH
3355: LD_VAR 0 4
3359: ARRAY
3360: PUSH
3361: LD_INT 2
3363: ARRAY
3364: PPUSH
3365: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3369: LD_VAR 0 2
3373: PPUSH
3374: LD_INT 69
3376: PPUSH
3377: LD_INT 96
3379: PPUSH
3380: CALL_OW 178
// x = x + 1 ;
3384: LD_ADDR_VAR 0 4
3388: PUSH
3389: LD_VAR 0 4
3393: PUSH
3394: LD_INT 1
3396: PLUS
3397: ST_TO_ADDR
// end ;
3398: GO 3327
3400: POP
3401: POP
// wait ( 0 0$1 ) ;
3402: LD_INT 35
3404: PPUSH
3405: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3409: LD_EXP 39
3413: PPUSH
3414: LD_INT 70
3416: PPUSH
3417: LD_INT 90
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 7
3427: LESS
3428: PUSH
3429: LD_EXP 40
3433: PPUSH
3434: LD_INT 70
3436: PPUSH
3437: LD_INT 90
3439: PPUSH
3440: CALL_OW 297
3444: PUSH
3445: LD_INT 7
3447: LESS
3448: AND
3449: PUSH
3450: LD_EXP 41
3454: PPUSH
3455: LD_INT 70
3457: PPUSH
3458: LD_INT 90
3460: PPUSH
3461: CALL_OW 297
3465: PUSH
3466: LD_INT 7
3468: LESS
3469: AND
3470: PUSH
3471: LD_EXP 42
3475: PPUSH
3476: LD_INT 70
3478: PPUSH
3479: LD_INT 90
3481: PPUSH
3482: CALL_OW 297
3486: PUSH
3487: LD_INT 7
3489: LESS
3490: AND
3491: PUSH
3492: LD_EXP 46
3496: PPUSH
3497: LD_INT 70
3499: PPUSH
3500: LD_INT 90
3502: PPUSH
3503: CALL_OW 297
3507: PUSH
3508: LD_INT 7
3510: LESS
3511: AND
3512: IFFALSE 3276
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3514: LD_EXP 40
3518: PPUSH
3519: LD_STRING DDoubts-Kar-1
3521: PPUSH
3522: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3526: LD_EXP 41
3530: PPUSH
3531: LD_STRING DDoubts-Ptr-1
3533: PPUSH
3534: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-1 ) ;
3538: LD_EXP 39
3542: PPUSH
3543: LD_STRING DDoubts-Bur-1
3545: PPUSH
3546: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3550: LD_EXP 40
3554: PPUSH
3555: LD_STRING DDoubts-Kar-2
3557: PPUSH
3558: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3562: LD_EXP 42
3566: PPUSH
3567: LD_STRING DDoubts-Glb-2
3569: PPUSH
3570: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3574: LD_EXP 39
3578: PPUSH
3579: LD_STRING DDoubts-Bur-2
3581: PPUSH
3582: CALL_OW 88
// InGameOff ;
3586: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3590: LD_STRING MBegin
3592: PPUSH
3593: CALL_OW 337
// SaveForQuickRestart ;
3597: CALL_OW 22
// BuildBase ;
3601: CALL 10585 0 0
// end ;
3605: LD_VAR 0 1
3609: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3610: LD_EXP 8
3614: NOT
3615: IFFALSE 3861
3617: GO 3619
3619: DISABLE
3620: LD_INT 0
3622: PPUSH
// begin enable ;
3623: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ f_side , 2 ] ) do
3624: LD_ADDR_VAR 0 1
3628: PUSH
3629: LD_INT 34
3631: PPUSH
3632: LD_INT 22
3634: PUSH
3635: LD_INT 2
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PPUSH
3642: CALL_OW 70
3646: PUSH
3647: FOR_IN
3648: IFFALSE 3859
// if See ( 3 , unit ) then
3650: LD_INT 3
3652: PPUSH
3653: LD_VAR 0 1
3657: PPUSH
3658: CALL_OW 292
3662: IFFALSE 3857
// begin sawArabianBase = true ;
3664: LD_ADDR_EXP 8
3668: PUSH
3669: LD_INT 1
3671: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3672: LD_VAR 0 1
3676: PPUSH
3677: CALL_OW 87
// DialogueOn ;
3681: CALL_OW 6
// if IsOk ( Lipshchin ) then
3685: LD_EXP 46
3689: PPUSH
3690: CALL_OW 302
3694: IFFALSE 3708
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3696: LD_EXP 46
3700: PPUSH
3701: LD_STRING DArabs-RSol1-1
3703: PPUSH
3704: CALL_OW 88
// if IsOk ( Karamazov ) then
3708: LD_EXP 40
3712: PPUSH
3713: CALL_OW 302
3717: IFFALSE 3731
// Say ( Karamazov , DArabs-Kar-1 ) ;
3719: LD_EXP 40
3723: PPUSH
3724: LD_STRING DArabs-Kar-1
3726: PPUSH
3727: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3731: LD_EXP 39
3735: PPUSH
3736: LD_STRING DArabs-Bur-1
3738: PPUSH
3739: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3743: LD_EXP 47
3747: PPUSH
3748: LD_STRING DArabs-Pla-1
3750: PPUSH
3751: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3755: LD_EXP 50
3759: PPUSH
3760: LD_STRING DSurrender-Omar-1
3762: PPUSH
3763: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3767: LD_STRING QSurrender
3769: PPUSH
3770: CALL_OW 97
3774: PUSH
3775: LD_INT 1
3777: DOUBLE
3778: EQUAL
3779: IFTRUE 3783
3781: GO 3802
3783: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3784: LD_EXP 39
3788: PPUSH
3789: LD_STRING DQrSurrender#1-Bur-1
3791: PPUSH
3792: CALL_OW 88
// Lose_Survive ;
3796: CALL 17228 0 0
// end ; 2 :
3800: GO 3849
3802: LD_INT 2
3804: DOUBLE
3805: EQUAL
3806: IFTRUE 3810
3808: GO 3825
3810: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3811: LD_EXP 39
3815: PPUSH
3816: LD_STRING DQrSurrender#2-Bur-1
3818: PPUSH
3819: CALL_OW 88
3823: GO 3849
3825: LD_INT 3
3827: DOUBLE
3828: EQUAL
3829: IFTRUE 3833
3831: GO 3848
3833: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3834: LD_EXP 39
3838: PPUSH
3839: LD_STRING DQrSurrender#3-Bur-1
3841: PPUSH
3842: CALL_OW 88
3846: GO 3849
3848: POP
// DialogueOff ;
3849: CALL_OW 7
// exit ;
3853: POP
3854: POP
3855: GO 3861
// end ;
3857: GO 3647
3859: POP
3860: POP
// end ;
3861: PPOPN 1
3863: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3864: LD_EXP 9
3868: NOT
3869: PUSH
3870: LD_INT 1
3872: PPUSH
3873: LD_INT 3
3875: PPUSH
3876: CALL_OW 321
3880: PUSH
3881: LD_INT 1
3883: EQUAL
3884: AND
3885: IFFALSE 4250
3887: GO 3889
3889: DISABLE
3890: LD_INT 0
3892: PPUSH
3893: PPUSH
// begin enable ;
3894: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_INT 22
3902: PUSH
3903: LD_INT 0
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 25
3912: PUSH
3913: LD_INT 12
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 69
3928: PUSH
3929: FOR_IN
3930: IFFALSE 4248
// if See ( 3 , unit ) then
3932: LD_INT 3
3934: PPUSH
3935: LD_VAR 0 1
3939: PPUSH
3940: CALL_OW 292
3944: IFFALSE 4246
// begin sawApeman = true ;
3946: LD_ADDR_EXP 9
3950: PUSH
3951: LD_INT 1
3953: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3954: LD_ADDR_VAR 0 2
3958: PUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: LD_INT 26
3981: PUSH
3982: LD_INT 1
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 50
3991: PUSH
3992: EMPTY
3993: LIST
3994: PUSH
3995: LD_INT 2
3997: PUSH
3998: LD_INT 25
4000: PUSH
4001: LD_INT 1
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 25
4010: PUSH
4011: LD_INT 2
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: PUSH
4018: LD_INT 25
4020: PUSH
4021: LD_INT 3
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 4
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL_OW 69
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: CALL_OW 74
4066: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4067: LD_VAR 0 1
4071: PPUSH
4072: CALL_OW 87
// DialogueOn ;
4076: CALL_OW 6
// if nearUnit = Burlak then
4080: LD_VAR 0 2
4084: PUSH
4085: LD_EXP 39
4089: EQUAL
4090: IFFALSE 4106
// Say ( Burlak , DApeSpot-Bur-1a ) else
4092: LD_EXP 39
4096: PPUSH
4097: LD_STRING DApeSpot-Bur-1a
4099: PPUSH
4100: CALL_OW 88
4104: GO 4118
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4106: LD_VAR 0 2
4110: PPUSH
4111: LD_STRING DApeSpot-RSol1-1
4113: PPUSH
4114: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4118: LD_EXP 39
4122: PPUSH
4123: LD_STRING DApeSpot-Bur-1
4125: PPUSH
4126: CALL_OW 88
// if IsOK ( Petrosyan ) then
4130: LD_EXP 43
4134: PPUSH
4135: CALL_OW 302
4139: IFFALSE 4238
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4141: LD_EXP 43
4145: PPUSH
4146: LD_STRING DApeSpot-Pty-1
4148: PPUSH
4149: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4153: LD_INT 22
4155: PUSH
4156: LD_INT 3
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 3
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: LD_INT 30
4178: PUSH
4179: LD_INT 6
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 30
4188: PUSH
4189: LD_INT 7
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: LIST
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: PPUSH
4206: CALL_OW 69
4210: IFFALSE 4226
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4212: LD_EXP 43
4216: PPUSH
4217: LD_STRING DApeSpot-Pty-1a
4219: PPUSH
4220: CALL_OW 88
4224: GO 4238
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4226: LD_EXP 43
4230: PPUSH
4231: LD_STRING DApeSpot-Pty-1b
4233: PPUSH
4234: CALL_OW 88
// end ; DialogueOff ;
4238: CALL_OW 7
// exit ;
4242: POP
4243: POP
4244: GO 4250
// end ;
4246: GO 3929
4248: POP
4249: POP
// end ;
4250: PPOPN 2
4252: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) do
4253: LD_EXP 43
4257: PPUSH
4258: CALL_OW 302
4262: PUSH
4263: LD_INT 22
4265: PUSH
4266: LD_INT 3
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: LD_INT 21
4275: PUSH
4276: LD_INT 3
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 2
4285: PUSH
4286: LD_INT 30
4288: PUSH
4289: LD_INT 6
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 30
4298: PUSH
4299: LD_INT 7
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: PPUSH
4316: CALL_OW 69
4320: NOT
4321: AND
4322: IFFALSE 4339
4324: GO 4326
4326: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4327: LD_EXP 43
4331: PPUSH
4332: LD_STRING DApeLab-Pty-1
4334: PPUSH
4335: CALL_OW 88
4339: END
// export function Dial_ResearchApeLang ; begin
4340: LD_INT 0
4342: PPUSH
// DialogueOn ;
4343: CALL_OW 6
// if IsOK ( Petrosyan ) then
4347: LD_EXP 43
4351: PPUSH
4352: CALL_OW 302
4356: IFFALSE 4442
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4358: LD_EXP 43
4362: PPUSH
4363: LD_STRING DApeLangCompl-Pty-1
4365: PPUSH
4366: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4370: LD_EXP 39
4374: PPUSH
4375: LD_STRING DApeLangCompl-Bur-1
4377: PPUSH
4378: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4382: LD_EXP 43
4386: PPUSH
4387: LD_STRING DApeLangCompl-Pty-2
4389: PPUSH
4390: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4394: LD_EXP 39
4398: PPUSH
4399: LD_STRING DApeLangCompl-Bur-2
4401: PPUSH
4402: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4406: LD_EXP 43
4410: PPUSH
4411: LD_STRING DApeLangCompl-Pty-3
4413: PPUSH
4414: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4418: LD_EXP 39
4422: PPUSH
4423: LD_STRING DApeLangCompl-Bur-3
4425: PPUSH
4426: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4430: LD_EXP 43
4434: PPUSH
4435: LD_STRING DApeLangCompl-Pty-4
4437: PPUSH
4438: CALL_OW 88
// end ; DialogueOff ;
4442: CALL_OW 7
// end ;
4446: LD_VAR 0 1
4450: RET
// export function Dial_TameApe ( sci ) ; begin
4451: LD_INT 0
4453: PPUSH
// dial_tameApeBlocker = true ;
4454: LD_ADDR_EXP 10
4458: PUSH
4459: LD_INT 1
4461: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 258
4471: PUSH
4472: LD_INT 1
4474: EQUAL
4475: IFFALSE 4491
// Say ( sci , DApeTame-Sci1-1 ) else
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_STRING DApeTame-Sci1-1
4484: PPUSH
4485: CALL_OW 88
4489: GO 4655
// begin if IsOK ( Petrosyan ) then
4491: LD_EXP 43
4495: PPUSH
4496: CALL_OW 302
4500: IFFALSE 4516
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4502: LD_EXP 43
4506: PPUSH
4507: LD_STRING DApeTame-Sci1-1
4509: PPUSH
4510: CALL_OW 88
4514: GO 4655
// if IsOK ( Dolgov ) then
4516: LD_EXP 45
4520: PPUSH
4521: CALL_OW 302
4525: IFFALSE 4541
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4527: LD_EXP 45
4531: PPUSH
4532: LD_STRING DApeTame-Sci1-1
4534: PPUSH
4535: CALL_OW 88
4539: GO 4655
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4541: LD_INT 22
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 21
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 26
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 50
4573: PUSH
4574: EMPTY
4575: LIST
4576: PUSH
4577: LD_INT 2
4579: PUSH
4580: LD_INT 25
4582: PUSH
4583: LD_INT 1
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: PUSH
4590: LD_INT 25
4592: PUSH
4593: LD_INT 2
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: LD_INT 25
4602: PUSH
4603: LD_INT 3
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 25
4612: PUSH
4613: LD_INT 4
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PPUSH
4634: CALL_OW 69
4638: PPUSH
4639: LD_STRING DApeTame-Sci1-1
4641: PPUSH
4642: LD_STRING 
4644: PPUSH
4645: LD_INT 0
4647: PPUSH
4648: LD_INT 1
4650: PPUSH
4651: CALL 8772 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4655: LD_EXP 39
4659: PPUSH
4660: LD_STRING DApeTame-Bur-1
4662: PPUSH
4663: CALL_OW 88
// end ;
4667: LD_VAR 0 2
4671: RET
// export function Dial_ApeEnterLab ; begin
4672: LD_INT 0
4674: PPUSH
// dial_apeEnterLabBlocker = true ;
4675: LD_ADDR_EXP 11
4679: PUSH
4680: LD_INT 1
4682: ST_TO_ADDR
// DialogueOn ;
4683: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4687: LD_EXP 39
4691: PPUSH
4692: LD_STRING DApeWorkSol-Bur-1
4694: PPUSH
4695: CALL_OW 88
// if IsOK ( Petrosyan ) then
4699: LD_EXP 43
4703: PPUSH
4704: CALL_OW 302
4708: IFFALSE 4724
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4710: LD_EXP 43
4714: PPUSH
4715: LD_STRING DApeWorkSol-Pty-1
4717: PPUSH
4718: CALL_OW 88
4722: GO 4863
// if IsOK ( Dolgov ) then
4724: LD_EXP 45
4728: PPUSH
4729: CALL_OW 302
4733: IFFALSE 4749
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4735: LD_EXP 45
4739: PPUSH
4740: LD_STRING DApeWorkSol-Pty-1
4742: PPUSH
4743: CALL_OW 88
4747: GO 4863
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4749: LD_INT 22
4751: PUSH
4752: LD_INT 3
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PUSH
4759: LD_INT 21
4761: PUSH
4762: LD_INT 1
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PUSH
4769: LD_INT 26
4771: PUSH
4772: LD_INT 1
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 50
4781: PUSH
4782: EMPTY
4783: LIST
4784: PUSH
4785: LD_INT 2
4787: PUSH
4788: LD_INT 25
4790: PUSH
4791: LD_INT 1
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PUSH
4798: LD_INT 25
4800: PUSH
4801: LD_INT 2
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 25
4810: PUSH
4811: LD_INT 3
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 25
4820: PUSH
4821: LD_INT 4
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 69
4846: PPUSH
4847: LD_STRING DApeWorkSol-Pty-1
4849: PPUSH
4850: LD_STRING 
4852: PPUSH
4853: LD_INT 0
4855: PPUSH
4856: LD_INT 1
4858: PPUSH
4859: CALL 8772 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4863: LD_EXP 39
4867: PPUSH
4868: LD_STRING DApeWorkSol-Bur-2
4870: PPUSH
4871: CALL_OW 88
// DialogueOff ;
4875: CALL_OW 7
// end ;
4879: LD_VAR 0 1
4883: RET
// export function Dial_ResearchApePsych ; begin
4884: LD_INT 0
4886: PPUSH
// DialogueOn ;
4887: CALL_OW 6
// if IsOK ( Petrosyan ) then
4891: LD_EXP 43
4895: PPUSH
4896: CALL_OW 302
4900: IFFALSE 4916
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4902: LD_EXP 43
4906: PPUSH
4907: LD_STRING DApeWorkCompl-Pty-1
4909: PPUSH
4910: CALL_OW 88
4914: GO 5055
// if IsOK ( Dolgov ) then
4916: LD_EXP 45
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4941
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4927: LD_EXP 45
4931: PPUSH
4932: LD_STRING DApeWorkCompl-Pty-1
4934: PPUSH
4935: CALL_OW 88
4939: GO 5055
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 3
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 21
4953: PUSH
4954: LD_INT 1
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 26
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 50
4973: PUSH
4974: EMPTY
4975: LIST
4976: PUSH
4977: LD_INT 2
4979: PUSH
4980: LD_INT 25
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: LD_INT 25
4992: PUSH
4993: LD_INT 2
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PUSH
5000: LD_INT 25
5002: PUSH
5003: LD_INT 3
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: LD_INT 25
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 69
5038: PPUSH
5039: LD_STRING DApeWorkCompl-Pty-1
5041: PPUSH
5042: LD_STRING 
5044: PPUSH
5045: LD_INT 0
5047: PPUSH
5048: LD_INT 1
5050: PPUSH
5051: CALL 8772 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5055: LD_EXP 39
5059: PPUSH
5060: LD_STRING DApeWorkCompl-Bur-1
5062: PPUSH
5063: CALL_OW 88
// DialogueOff ;
5067: CALL_OW 7
// end ;
5071: LD_VAR 0 1
5075: RET
// export function Dial_ResearchApeAgress ; begin
5076: LD_INT 0
5078: PPUSH
// DialogueOn ;
5079: CALL_OW 6
// if IsOK ( Petrosyan ) then
5083: LD_EXP 43
5087: PPUSH
5088: CALL_OW 302
5092: IFFALSE 5108
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5094: LD_EXP 43
5098: PPUSH
5099: LD_STRING DApeSolCompl-Pty-1
5101: PPUSH
5102: CALL_OW 88
5106: GO 5247
// if IsOK ( Dolgov ) then
5108: LD_EXP 45
5112: PPUSH
5113: CALL_OW 302
5117: IFFALSE 5133
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5119: LD_EXP 45
5123: PPUSH
5124: LD_STRING DApeSolCompl-Pty-1
5126: PPUSH
5127: CALL_OW 88
5131: GO 5247
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5133: LD_INT 22
5135: PUSH
5136: LD_INT 3
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PUSH
5143: LD_INT 21
5145: PUSH
5146: LD_INT 1
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PUSH
5153: LD_INT 26
5155: PUSH
5156: LD_INT 1
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: LD_INT 50
5165: PUSH
5166: EMPTY
5167: LIST
5168: PUSH
5169: LD_INT 2
5171: PUSH
5172: LD_INT 25
5174: PUSH
5175: LD_INT 1
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 25
5184: PUSH
5185: LD_INT 2
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 25
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PUSH
5202: LD_INT 25
5204: PUSH
5205: LD_INT 4
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: PPUSH
5231: LD_STRING DApeSolCompl-Pty-1
5233: PPUSH
5234: LD_STRING 
5236: PPUSH
5237: LD_INT 0
5239: PPUSH
5240: LD_INT 1
5242: PPUSH
5243: CALL 8772 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5247: LD_EXP 39
5251: PPUSH
5252: LD_STRING DApeSolCompl-Bur-1
5254: PPUSH
5255: CALL_OW 88
// DialogueOff ;
5259: CALL_OW 7
// end ;
5263: LD_VAR 0 1
5267: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5268: LD_INT 3
5270: PPUSH
5271: LD_INT 74
5273: PPUSH
5274: LD_INT 115
5276: PPUSH
5277: CALL_OW 293
5281: IFFALSE 5412
5283: GO 5285
5285: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5286: LD_INT 22
5288: PUSH
5289: LD_INT 3
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 21
5298: PUSH
5299: LD_INT 1
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 26
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 50
5318: PUSH
5319: EMPTY
5320: LIST
5321: PUSH
5322: LD_INT 2
5324: PUSH
5325: LD_INT 25
5327: PUSH
5328: LD_INT 1
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 25
5337: PUSH
5338: LD_INT 2
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PUSH
5345: LD_INT 25
5347: PUSH
5348: LD_INT 3
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 4
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: PPUSH
5379: CALL_OW 69
5383: PPUSH
5384: LD_STRING DShipments-RSol1-1
5386: PPUSH
5387: LD_STRING 
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL 8772 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5400: LD_EXP 39
5404: PPUSH
5405: LD_STRING DShipments-Bur-1
5407: PPUSH
5408: CALL_OW 88
// end ;
5412: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5413: LD_INT 3
5415: PPUSH
5416: LD_INT 81
5418: PPUSH
5419: LD_INT 132
5421: PPUSH
5422: CALL_OW 293
5426: IFFALSE 5566
5428: GO 5430
5430: DISABLE
5431: LD_INT 0
5433: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5434: LD_ADDR_VAR 0 1
5438: PUSH
5439: LD_INT 22
5441: PUSH
5442: LD_INT 3
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PUSH
5449: LD_INT 21
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 26
5461: PUSH
5462: LD_INT 1
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 50
5471: PUSH
5472: EMPTY
5473: LIST
5474: PUSH
5475: LD_INT 2
5477: PUSH
5478: LD_INT 25
5480: PUSH
5481: LD_INT 1
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PUSH
5488: LD_INT 25
5490: PUSH
5491: LD_INT 2
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 25
5500: PUSH
5501: LD_INT 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 25
5510: PUSH
5511: LD_INT 4
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: PPUSH
5532: CALL_OW 69
5536: PPUSH
5537: LD_STRING DRoad-RSol1-1
5539: PPUSH
5540: LD_STRING 
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: CALL 8772 0 5
5553: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5554: LD_VAR 0 1
5558: PPUSH
5559: LD_STRING DRoad-RSol1-1a
5561: PPUSH
5562: CALL_OW 88
// end ;
5566: PPOPN 1
5568: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5569: LD_INT 33
5571: PPUSH
5572: LD_INT 22
5574: PUSH
5575: LD_INT 3
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 21
5584: PUSH
5585: LD_INT 1
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: PUSH
5592: LD_INT 26
5594: PUSH
5595: LD_INT 1
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: LD_INT 50
5604: PUSH
5605: EMPTY
5606: LIST
5607: PUSH
5608: LD_INT 2
5610: PUSH
5611: LD_INT 25
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 25
5623: PUSH
5624: LD_INT 2
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 25
5633: PUSH
5634: LD_INT 3
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 25
5643: PUSH
5644: LD_INT 4
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: PPUSH
5665: CALL_OW 70
5669: PUSH
5670: LD_EXP 39
5674: PUSH
5675: EMPTY
5676: LIST
5677: DIFF
5678: PUSH
5679: LD_INT 22
5681: PUSH
5682: LD_INT 3
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 21
5691: PUSH
5692: LD_INT 3
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 30
5701: PUSH
5702: LD_INT 0
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 50
5711: PUSH
5712: EMPTY
5713: LIST
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: PPUSH
5721: CALL_OW 69
5725: AND
5726: IFFALSE 5753
5728: GO 5730
5730: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5731: LD_INT 36
5733: PPUSH
5734: CALL 20710 0 1
// wait ( 0 0$1.5 ) ;
5738: LD_INT 52
5740: PPUSH
5741: CALL_OW 67
// stevensPlaced = true ;
5745: LD_ADDR_EXP 14
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// end ;
5753: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5754: LD_INT 3
5756: PPUSH
5757: LD_EXP 57
5761: PPUSH
5762: CALL_OW 292
5766: PUSH
5767: LD_EXP 14
5771: AND
5772: PUSH
5773: LD_EXP 24
5777: NOT
5778: AND
5779: IFFALSE 6121
5781: GO 5783
5783: DISABLE
5784: LD_INT 0
5786: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5787: LD_ADDR_VAR 0 1
5791: PUSH
5792: LD_INT 22
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 21
5804: PUSH
5805: LD_INT 1
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: LD_INT 26
5814: PUSH
5815: LD_INT 1
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: LD_INT 50
5824: PUSH
5825: EMPTY
5826: LIST
5827: PUSH
5828: LD_INT 2
5830: PUSH
5831: LD_INT 25
5833: PUSH
5834: LD_INT 1
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 25
5843: PUSH
5844: LD_INT 2
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PUSH
5851: LD_INT 25
5853: PUSH
5854: LD_INT 3
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 4
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: PPUSH
5885: CALL_OW 69
5889: PPUSH
5890: LD_EXP 57
5894: PPUSH
5895: CALL_OW 74
5899: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5900: LD_EXP 57
5904: PPUSH
5905: CALL_OW 87
// InGameOn ;
5909: CALL_OW 8
// DialogueOn ;
5913: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5917: LD_VAR 0 1
5921: PPUSH
5922: LD_STRING DStevens-RSol1-1
5924: PPUSH
5925: CALL_OW 88
// DialogueOff ;
5929: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5933: LD_INT 52
5935: PPUSH
5936: CALL_OW 67
// if IsOK ( Petrosyan ) then
5940: LD_EXP 43
5944: PPUSH
5945: CALL_OW 302
5949: IFFALSE 6117
// begin SetSide ( Stevens , 6 ) ;
5951: LD_EXP 57
5955: PPUSH
5956: LD_INT 6
5958: PPUSH
5959: CALL_OW 235
// DialogueOn ;
5963: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
5967: LD_EXP 57
5971: PPUSH
5972: LD_STRING DStevens-Huck-1
5974: PPUSH
5975: CALL_OW 88
// if nearUnit = Petrosyan then
5979: LD_VAR 0 1
5983: PUSH
5984: LD_EXP 43
5988: EQUAL
5989: IFFALSE 6085
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
5991: LD_EXP 43
5995: PPUSH
5996: LD_STRING DStevens-Pty-1a
5998: PPUSH
5999: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6003: LD_EXP 57
6007: PPUSH
6008: LD_STRING DStevens-Huck-2
6010: PPUSH
6011: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6015: LD_EXP 43
6019: PPUSH
6020: LD_STRING DStevens-Pty-2
6022: PPUSH
6023: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6027: LD_EXP 57
6031: PPUSH
6032: LD_STRING DStevens-Huck-3
6034: PPUSH
6035: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6039: LD_EXP 43
6043: PPUSH
6044: LD_STRING DStevens-Pty-3
6046: PPUSH
6047: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6051: LD_EXP 57
6055: PPUSH
6056: LD_STRING DStevens-Huck-4
6058: PPUSH
6059: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6063: LD_EXP 43
6067: PPUSH
6068: LD_STRING DStevens-Pty-4
6070: PPUSH
6071: CALL_OW 88
// stevensFollow = true ;
6075: LD_ADDR_EXP 15
6079: PUSH
6080: LD_INT 1
6082: ST_TO_ADDR
// end else
6083: GO 6113
// begin stevensFollow = true ;
6085: LD_ADDR_EXP 15
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6093: LD_ADDR_EXP 16
6097: PUSH
6098: LD_INT 1
6100: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6101: LD_EXP 43
6105: PPUSH
6106: LD_STRING DStevens-Pty-1
6108: PPUSH
6109: CALL_OW 88
// end ; DialogueOff ;
6113: CALL_OW 7
// end ; InGameOff ;
6117: CALL_OW 9
// end ;
6121: PPOPN 1
6123: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6124: LD_EXP 16
6128: PUSH
6129: LD_EXP 43
6133: PPUSH
6134: LD_EXP 57
6138: PPUSH
6139: CALL_OW 296
6143: PUSH
6144: LD_INT 20
6146: LESS
6147: AND
6148: PUSH
6149: LD_EXP 43
6153: PPUSH
6154: CALL_OW 302
6158: AND
6159: PUSH
6160: LD_EXP 24
6164: NOT
6165: AND
6166: IFFALSE 6271
6168: GO 6170
6170: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6171: LD_ADDR_EXP 16
6175: PUSH
6176: LD_INT 0
6178: ST_TO_ADDR
// DialogueOn ;
6179: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6183: LD_EXP 43
6187: PPUSH
6188: LD_STRING DStevens-Pty-1a
6190: PPUSH
6191: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6195: LD_EXP 57
6199: PPUSH
6200: LD_STRING DStevens-Huck-2
6202: PPUSH
6203: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6207: LD_EXP 43
6211: PPUSH
6212: LD_STRING DStevens-Pty-2
6214: PPUSH
6215: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6219: LD_EXP 57
6223: PPUSH
6224: LD_STRING DStevens-Huck-3
6226: PPUSH
6227: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6231: LD_EXP 43
6235: PPUSH
6236: LD_STRING DStevens-Pty-3
6238: PPUSH
6239: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6243: LD_EXP 57
6247: PPUSH
6248: LD_STRING DStevens-Huck-4
6250: PPUSH
6251: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6255: LD_EXP 43
6259: PPUSH
6260: LD_STRING DStevens-Pty-4
6262: PPUSH
6263: CALL_OW 88
// DialogueOff ;
6267: CALL_OW 7
// end ;
6271: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and IsOK ( Petrosyan ) and not finishMissionBool do
6272: LD_EXP 57
6276: PPUSH
6277: LD_EXP 39
6281: PPUSH
6282: CALL_OW 296
6286: PUSH
6287: LD_INT 15
6289: LESS
6290: PUSH
6291: LD_EXP 43
6295: PPUSH
6296: CALL_OW 302
6300: AND
6301: PUSH
6302: LD_EXP 24
6306: NOT
6307: AND
6308: IFFALSE 6523
6310: GO 6312
6312: DISABLE
// begin DialogueOn ;
6313: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6317: LD_EXP 43
6321: PPUSH
6322: LD_STRING DStevensBurlak-Pty-1
6324: PPUSH
6325: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6329: LD_EXP 39
6333: PPUSH
6334: LD_STRING DStevensBurlak-Bur-1
6336: PPUSH
6337: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6341: LD_EXP 43
6345: PPUSH
6346: LD_STRING DStevensBurlak-Pty-2
6348: PPUSH
6349: CALL_OW 88
// case Query ( QKill ) of 1 :
6353: LD_STRING QKill
6355: PPUSH
6356: CALL_OW 97
6360: PUSH
6361: LD_INT 1
6363: DOUBLE
6364: EQUAL
6365: IFTRUE 6369
6367: GO 6447
6369: POP
// begin stevensCanExitMap = true ;
6370: LD_ADDR_EXP 19
6374: PUSH
6375: LD_INT 1
6377: ST_TO_ADDR
// stevensFollow = false ;
6378: LD_ADDR_EXP 15
6382: PUSH
6383: LD_INT 0
6385: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6386: LD_EXP 39
6390: PPUSH
6391: LD_STRING DKill-1-Bur-1
6393: PPUSH
6394: CALL_OW 88
// if IsOK ( Gleb ) then
6398: LD_EXP 42
6402: PPUSH
6403: CALL_OW 302
6407: IFFALSE 6421
// Say ( Gleb , DKill-1-Glb-1 ) ;
6409: LD_EXP 42
6413: PPUSH
6414: LD_STRING DKill-1-Glb-1
6416: PPUSH
6417: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6421: LD_EXP 57
6425: PPUSH
6426: LD_INT 1
6428: PPUSH
6429: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6433: LD_EXP 57
6437: PPUSH
6438: LD_INT 37
6440: PPUSH
6441: CALL_OW 113
// end ; 2 :
6445: GO 6519
6447: LD_INT 2
6449: DOUBLE
6450: EQUAL
6451: IFTRUE 6455
6453: GO 6518
6455: POP
// begin stevensCanExitMap = true ;
6456: LD_ADDR_EXP 19
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// stevensFollow = false ;
6464: LD_ADDR_EXP 15
6468: PUSH
6469: LD_INT 0
6471: ST_TO_ADDR
// stevensDepot = true ;
6472: LD_ADDR_EXP 17
6476: PUSH
6477: LD_INT 1
6479: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6480: LD_EXP 39
6484: PPUSH
6485: LD_STRING DKill-2-Bur-1
6487: PPUSH
6488: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6492: LD_EXP 43
6496: PPUSH
6497: LD_STRING DKill-2-Pty-1
6499: PPUSH
6500: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6504: LD_EXP 39
6508: PPUSH
6509: LD_STRING DKill-2-Bur-2
6511: PPUSH
6512: CALL_OW 88
// end ; end ;
6516: GO 6519
6518: POP
// DialogueOff ;
6519: CALL_OW 7
// end ;
6523: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6524: LD_EXP 15
6528: IFFALSE 6668
6530: GO 6532
6532: DISABLE
6533: LD_INT 0
6535: PPUSH
// begin enable ;
6536: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6537: LD_ADDR_VAR 0 1
6541: PUSH
6542: LD_INT 22
6544: PUSH
6545: LD_INT 3
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 21
6554: PUSH
6555: LD_INT 1
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 50
6564: PUSH
6565: EMPTY
6566: LIST
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: LD_INT 25
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 25
6583: PUSH
6584: LD_INT 2
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 25
6593: PUSH
6594: LD_INT 3
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 25
6603: PUSH
6604: LD_INT 4
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PPUSH
6624: CALL_OW 69
6628: PPUSH
6629: LD_EXP 57
6633: PPUSH
6634: CALL_OW 74
6638: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6639: LD_EXP 57
6643: PPUSH
6644: LD_VAR 0 1
6648: PPUSH
6649: CALL_OW 250
6653: PPUSH
6654: LD_VAR 0 1
6658: PPUSH
6659: CALL_OW 251
6663: PPUSH
6664: CALL_OW 111
// end ;
6668: PPOPN 1
6670: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6671: LD_EXP 17
6675: PUSH
6676: LD_INT 22
6678: PUSH
6679: LD_INT 3
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: LD_INT 21
6688: PUSH
6689: LD_INT 3
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 30
6698: PUSH
6699: LD_INT 0
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 50
6708: PUSH
6709: EMPTY
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: PPUSH
6718: CALL_OW 69
6722: NOT
6723: AND
6724: IFFALSE 6751
6726: GO 6728
6728: DISABLE
// begin enable ;
6729: ENABLE
// SetSide ( Stevens , 6 ) ;
6730: LD_EXP 57
6734: PPUSH
6735: LD_INT 6
6737: PPUSH
6738: CALL_OW 235
// ComHold ( Stevens ) ;
6742: LD_EXP 57
6746: PPUSH
6747: CALL_OW 140
// end ;
6751: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6752: LD_EXP 17
6756: PUSH
6757: LD_INT 22
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 21
6769: PUSH
6770: LD_INT 3
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 0
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 50
6789: PUSH
6790: EMPTY
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: PPUSH
6799: CALL_OW 69
6803: AND
6804: IFFALSE 7367
6806: GO 6808
6808: DISABLE
6809: LD_INT 0
6811: PPUSH
6812: PPUSH
6813: PPUSH
// begin enable ;
6814: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6815: LD_ADDR_VAR 0 1
6819: PUSH
6820: LD_INT 22
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 21
6832: PUSH
6833: LD_INT 3
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 30
6842: PUSH
6843: LD_INT 0
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 50
6852: PUSH
6853: EMPTY
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: PUSH
6867: LD_INT 1
6869: ARRAY
6870: ST_TO_ADDR
// stevensFollow = false ;
6871: LD_ADDR_EXP 15
6875: PUSH
6876: LD_INT 0
6878: ST_TO_ADDR
// if not depot then
6879: LD_VAR 0 1
6883: NOT
6884: IFFALSE 6888
// exit ;
6886: GO 7367
// for depotUnit in depot do
6888: LD_ADDR_VAR 0 2
6892: PUSH
6893: LD_VAR 0 1
6897: PUSH
6898: FOR_IN
6899: IFFALSE 6925
// if not IsConstructed ( depotUnit ) then
6901: LD_VAR 0 2
6905: PPUSH
6906: CALL_OW 304
6910: NOT
6911: IFFALSE 6923
// constructDepot = depotUnit ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_VAR 0 2
6922: ST_TO_ADDR
6923: GO 6898
6925: POP
6926: POP
// if not constructDepot then
6927: LD_VAR 0 3
6931: NOT
6932: IFFALSE 6936
// exit ;
6934: GO 7367
// if not stevensWasInDepot then
6936: LD_EXP 18
6940: NOT
6941: IFFALSE 7081
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6943: LD_EXP 57
6947: PPUSH
6948: CALL_OW 310
6952: NOT
6953: PUSH
6954: LD_EXP 57
6958: PPUSH
6959: LD_VAR 0 1
6963: PPUSH
6964: CALL_OW 296
6968: PUSH
6969: LD_INT 8
6971: LESS
6972: NOT
6973: AND
6974: IFFALSE 7007
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
6976: LD_EXP 57
6980: PPUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: CALL_OW 250
6990: PPUSH
6991: LD_VAR 0 3
6995: PPUSH
6996: CALL_OW 251
7000: PPUSH
7001: CALL_OW 111
7005: GO 7079
// begin InGameOn ;
7007: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7011: LD_EXP 57
7015: PPUSH
7016: LD_INT 3
7018: PPUSH
7019: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7023: LD_EXP 57
7027: PPUSH
7028: LD_VAR 0 3
7032: PPUSH
7033: CALL_OW 120
// wait ( 0 0$1 ) ;
7037: LD_INT 35
7039: PPUSH
7040: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7044: LD_EXP 57
7048: PPUSH
7049: CALL_OW 310
7053: PUSH
7054: LD_EXP 57
7058: PPUSH
7059: CALL_OW 302
7063: NOT
7064: OR
7065: IFFALSE 7011
// InGameOff ;
7067: CALL_OW 9
// stevensWasInDepot = true ;
7071: LD_ADDR_EXP 18
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// end ; end else
7079: GO 7367
// begin if not IsInUnit ( Stevens ) then
7081: LD_EXP 57
7085: PPUSH
7086: CALL_OW 310
7090: NOT
7091: IFFALSE 7367
// begin DialogueOn ;
7093: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7097: LD_EXP 39
7101: PPUSH
7102: LD_STRING DRelease-Bur-1
7104: PPUSH
7105: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7109: LD_STRING QKillAgain
7111: PPUSH
7112: CALL_OW 97
7116: PUSH
7117: LD_INT 1
7119: DOUBLE
7120: EQUAL
7121: IFTRUE 7125
7123: GO 7194
7125: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7126: LD_EXP 39
7130: PPUSH
7131: LD_STRING DQrKillAgain#1-Bur-1
7133: PPUSH
7134: CALL_OW 88
// stevensCanExitMap = true ;
7138: LD_ADDR_EXP 19
7142: PUSH
7143: LD_INT 1
7145: ST_TO_ADDR
// stevensWasInDepot = false ;
7146: LD_ADDR_EXP 18
7150: PUSH
7151: LD_INT 0
7153: ST_TO_ADDR
// stevensDepot = false ;
7154: LD_ADDR_EXP 17
7158: PUSH
7159: LD_INT 0
7161: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7162: LD_EXP 57
7166: PPUSH
7167: LD_INT 1
7169: PPUSH
7170: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7174: LD_EXP 57
7178: PPUSH
7179: LD_INT 37
7181: PPUSH
7182: CALL_OW 113
// DialogueOff ;
7186: CALL_OW 7
// exit ;
7190: GO 7367
// end ; 2 :
7192: GO 7363
7194: LD_INT 2
7196: DOUBLE
7197: EQUAL
7198: IFTRUE 7202
7200: GO 7271
7202: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7203: LD_EXP 39
7207: PPUSH
7208: LD_STRING DQrKillAgain#2-Bur-1
7210: PPUSH
7211: CALL_OW 88
// stevensCanExitMap = true ;
7215: LD_ADDR_EXP 19
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// stevensWasInDepot = false ;
7223: LD_ADDR_EXP 18
7227: PUSH
7228: LD_INT 0
7230: ST_TO_ADDR
// stevensDepot = false ;
7231: LD_ADDR_EXP 17
7235: PUSH
7236: LD_INT 0
7238: ST_TO_ADDR
// SetSide ( Stevens , 6 ) ;
7239: LD_EXP 57
7243: PPUSH
7244: LD_INT 6
7246: PPUSH
7247: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7251: LD_EXP 57
7255: PPUSH
7256: LD_INT 37
7258: PPUSH
7259: CALL_OW 113
// DialogueOff ;
7263: CALL_OW 7
// exit ;
7267: GO 7367
// end ; 3 :
7269: GO 7363
7271: LD_INT 3
7273: DOUBLE
7274: EQUAL
7275: IFTRUE 7279
7277: GO 7362
7279: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7280: LD_EXP 39
7284: PPUSH
7285: LD_STRING DQrKillAgain#2-Bur-1a
7287: PPUSH
7288: CALL_OW 88
// DialogueOff ;
7292: CALL_OW 7
// InGameOn ;
7296: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7300: LD_EXP 57
7304: PPUSH
7305: LD_INT 3
7307: PPUSH
7308: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7312: LD_EXP 57
7316: PPUSH
7317: LD_VAR 0 3
7321: PPUSH
7322: CALL_OW 120
// wait ( 0 0$1 ) ;
7326: LD_INT 35
7328: PPUSH
7329: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7333: LD_EXP 57
7337: PPUSH
7338: CALL_OW 310
7342: PUSH
7343: LD_EXP 57
7347: PPUSH
7348: CALL_OW 302
7352: NOT
7353: OR
7354: IFFALSE 7300
// InGameOff ;
7356: CALL_OW 9
// end ; end ;
7360: GO 7363
7362: POP
// DialogueOff ;
7363: CALL_OW 7
// end ; end ; end ;
7367: PPOPN 3
7369: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7370: LD_EXP 19
7374: PUSH
7375: LD_EXP 57
7379: PPUSH
7380: LD_INT 37
7382: PPUSH
7383: CALL_OW 308
7387: AND
7388: IFFALSE 7435
7390: GO 7392
7392: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7393: LD_EXP 57
7397: PPUSH
7398: CALL_OW 255
7402: PUSH
7403: LD_INT 6
7405: EQUAL
7406: IFFALSE 7418
// stevensStatus = 1 else
7408: LD_ADDR_EXP 2
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
7416: GO 7426
// stevensStatus = 2 ;
7418: LD_ADDR_EXP 2
7422: PUSH
7423: LD_INT 2
7425: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7426: LD_EXP 57
7430: PPUSH
7431: CALL_OW 64
// end ;
7435: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7436: LD_INT 3
7438: PPUSH
7439: LD_INT 1
7441: PPUSH
7442: CALL_OW 292
7446: IFFALSE 7646
7448: GO 7450
7450: DISABLE
7451: LD_INT 0
7453: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_INT 1
7461: PPUSH
7462: LD_INT 2
7464: PPUSH
7465: CALL_OW 12
7469: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7470: LD_INT 1
7472: PPUSH
7473: CALL_OW 87
// DialogueOn ;
7477: CALL_OW 6
// if rnd = 1 then
7481: LD_VAR 0 1
7485: PUSH
7486: LD_INT 1
7488: EQUAL
7489: IFFALSE 7505
// Say ( Burlak , DMastodon-Bur-1 ) else
7491: LD_EXP 39
7495: PPUSH
7496: LD_STRING DMastodon-Bur-1
7498: PPUSH
7499: CALL_OW 88
7503: GO 7619
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7505: LD_INT 22
7507: PUSH
7508: LD_INT 3
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 21
7517: PUSH
7518: LD_INT 1
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 26
7527: PUSH
7528: LD_INT 1
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: LD_INT 50
7537: PUSH
7538: EMPTY
7539: LIST
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: LD_INT 25
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 25
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 25
7566: PUSH
7567: LD_INT 3
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 25
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: PPUSH
7603: LD_STRING DMastodon-RSol1-1
7605: PPUSH
7606: LD_STRING 
7608: PPUSH
7609: LD_INT 0
7611: PPUSH
7612: LD_INT 1
7614: PPUSH
7615: CALL 8772 0 5
// if IsOK ( Gleb ) then
7619: LD_EXP 42
7623: PPUSH
7624: CALL_OW 302
7628: IFFALSE 7642
// Say ( Gleb , DMastodon-Glb-1 ) ;
7630: LD_EXP 42
7634: PPUSH
7635: LD_STRING DMastodon-Glb-1
7637: PPUSH
7638: CALL_OW 88
// DialogueOff ;
7642: CALL_OW 7
// end ;
7646: PPOPN 1
7648: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7649: LD_INT 1
7651: PPUSH
7652: CALL_OW 302
7656: NOT
7657: IFFALSE 7736
7659: GO 7661
7661: DISABLE
// begin omarCanExitMap = true ;
7662: LD_ADDR_EXP 20
7666: PUSH
7667: LD_INT 1
7669: ST_TO_ADDR
// DialogueOn ;
7670: CALL_OW 6
// if IsOK ( Karamazov ) then
7674: LD_EXP 40
7678: PPUSH
7679: CALL_OW 302
7683: IFFALSE 7697
// Say ( Karamazov , DOmar-Kar-1 ) ;
7685: LD_EXP 40
7689: PPUSH
7690: LD_STRING DOmar-Kar-1
7692: PPUSH
7693: CALL_OW 88
// if IsOK ( Petrovova ) then
7697: LD_EXP 41
7701: PPUSH
7702: CALL_OW 302
7706: IFFALSE 7720
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7708: LD_EXP 41
7712: PPUSH
7713: LD_STRING DOmar-Ptr-1
7715: PPUSH
7716: CALL_OW 88
// DialogueOff ;
7720: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7724: LD_EXP 50
7728: PPUSH
7729: LD_INT 41
7731: PPUSH
7732: CALL_OW 113
// end ;
7736: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7737: LD_EXP 50
7741: PPUSH
7742: LD_INT 41
7744: PPUSH
7745: CALL_OW 308
7749: PUSH
7750: LD_EXP 20
7754: AND
7755: IFFALSE 7777
7757: GO 7759
7759: DISABLE
// begin RemoveUnit ( Omar ) ;
7760: LD_EXP 50
7764: PPUSH
7765: CALL_OW 64
// omarStatus = 1 ;
7769: LD_ADDR_EXP 1
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// end ;
7777: END
// every 0 0$1 trigger IsDead ( Omar ) do
7778: LD_EXP 50
7782: PPUSH
7783: CALL_OW 301
7787: IFFALSE 7945
7789: GO 7791
7791: DISABLE
// begin DialogueOn ;
7792: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7796: LD_INT 22
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: LD_INT 21
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 26
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: LD_INT 50
7828: PUSH
7829: EMPTY
7830: LIST
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: LD_INT 25
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 25
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 25
7857: PUSH
7858: LD_INT 3
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 25
7867: PUSH
7868: LD_INT 4
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: PPUSH
7889: CALL_OW 69
7893: PPUSH
7894: LD_STRING DOmar-RSol1-1
7896: PPUSH
7897: LD_STRING 
7899: PPUSH
7900: LD_INT 0
7902: PPUSH
7903: LD_INT 1
7905: PPUSH
7906: CALL 8772 0 5
// wait ( 0 0$1 ) ;
7910: LD_INT 35
7912: PPUSH
7913: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
7917: LD_EXP 49
7921: PPUSH
7922: LD_STRING DOmar-Hke-1
7924: PPUSH
7925: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
7929: LD_EXP 39
7933: PPUSH
7934: LD_STRING DOmar-Bur-1
7936: PPUSH
7937: CALL_OW 88
// DialogueOff ;
7941: CALL_OW 7
// end ;
7945: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
7946: LD_EXP 50
7950: PPUSH
7951: CALL_OW 301
7955: PUSH
7956: LD_EXP 50
7960: PPUSH
7961: CALL_OW 305
7965: NOT
7966: OR
7967: PUSH
7968: LD_EXP 51
7972: PUSH
7973: LD_INT 3
7975: LESS
7976: AND
7977: IFFALSE 8128
7979: GO 7981
7981: DISABLE
// begin if actionTime < arabBreakthrough then
7982: LD_EXP 7
7986: PUSH
7987: LD_EXP 34
7991: LESS
7992: IFFALSE 8002
// fastBreakthrough = true ;
7994: LD_ADDR_EXP 23
7998: PUSH
7999: LD_INT 1
8001: ST_TO_ADDR
// DialogueOn ;
8002: CALL_OW 6
// if IsOK ( Petrovova ) then
8006: LD_EXP 41
8010: PPUSH
8011: CALL_OW 302
8015: IFFALSE 8029
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
8017: LD_EXP 41
8021: PPUSH
8022: LD_STRING DBreakthrough-Ptr-1
8024: PPUSH
8025: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
8029: LD_EXP 39
8033: PPUSH
8034: LD_STRING DBreakthrough-Bur-1
8036: PPUSH
8037: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
8041: LD_EXP 47
8045: PPUSH
8046: LD_STRING DBreakthrough-Pla-1
8048: PPUSH
8049: CALL_OW 94
// if fastBreakthrough then
8053: LD_EXP 23
8057: IFFALSE 8073
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8059: LD_EXP 47
8063: PPUSH
8064: LD_STRING DBreakthrough-Pla-1a
8066: PPUSH
8067: CALL_OW 94
8071: GO 8085
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8073: LD_EXP 47
8077: PPUSH
8078: LD_STRING DBreakthrough-Pla-1b
8080: PPUSH
8081: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8085: LD_EXP 47
8089: PPUSH
8090: LD_STRING DBreakthrough-Pla-1c
8092: PPUSH
8093: CALL_OW 94
// DialogueOff ;
8097: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8101: LD_STRING MAddLab
8103: PPUSH
8104: CALL_OW 337
// arabianCanExitMap = true ;
8108: LD_ADDR_EXP 21
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8116: LD_EXP 51
8120: PPUSH
8121: LD_INT 41
8123: PPUSH
8124: CALL_OW 113
// end ;
8128: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8129: LD_EXP 21
8133: IFFALSE 8198
8135: GO 8137
8137: DISABLE
8138: LD_INT 0
8140: PPUSH
// begin enable ;
8141: ENABLE
// for unit in arabianUnitsInBase do
8142: LD_ADDR_VAR 0 1
8146: PUSH
8147: LD_EXP 51
8151: PUSH
8152: FOR_IN
8153: IFFALSE 8196
// if IsInArea ( unit , ArabianExitArea ) then
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_INT 41
8162: PPUSH
8163: CALL_OW 308
8167: IFFALSE 8194
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8169: LD_ADDR_EXP 51
8173: PUSH
8174: LD_EXP 51
8178: PUSH
8179: LD_VAR 0 1
8183: DIFF
8184: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8185: LD_VAR 0 1
8189: PPUSH
8190: CALL_OW 64
// end ;
8194: GO 8152
8196: POP
8197: POP
// end ;
8198: PPOPN 1
8200: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8201: LD_EXP 12
8205: NOT
8206: IFFALSE 8444
8208: GO 8210
8210: DISABLE
8211: LD_INT 0
8213: PPUSH
// begin for unit in arabianPatrolVehicles do
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: LD_EXP 52
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8442
// if See ( 3 , unit ) then
8227: LD_INT 3
8229: PPUSH
8230: LD_VAR 0 1
8234: PPUSH
8235: CALL_OW 292
8239: IFFALSE 8440
// begin dial_southRoadBlocker = true ;
8241: LD_ADDR_EXP 12
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 87
// if IsOK ( Karamazov ) then
8258: LD_EXP 40
8262: PPUSH
8263: CALL_OW 302
8267: IFFALSE 8281
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8269: LD_EXP 40
8273: PPUSH
8274: LD_STRING DPatrol-Kar-1
8276: PPUSH
8277: CALL_OW 88
// if IsOK ( Petrovova ) then
8281: LD_EXP 41
8285: PPUSH
8286: CALL_OW 302
8290: IFFALSE 8304
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8292: LD_EXP 41
8296: PPUSH
8297: LD_STRING DPatrol-Ptr-1
8299: PPUSH
8300: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8304: LD_INT 22
8306: PUSH
8307: LD_INT 3
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 21
8316: PUSH
8317: LD_INT 1
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: LD_INT 26
8326: PUSH
8327: LD_INT 1
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 50
8336: PUSH
8337: EMPTY
8338: LIST
8339: PUSH
8340: LD_INT 2
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 1
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 2
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 25
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 25
8375: PUSH
8376: LD_INT 4
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: PPUSH
8397: CALL_OW 69
8401: PUSH
8402: LD_EXP 40
8406: DIFF
8407: PPUSH
8408: LD_STRING DPatrol-RSol1-1
8410: PPUSH
8411: LD_STRING 
8413: PPUSH
8414: LD_INT 0
8416: PPUSH
8417: LD_INT 1
8419: PPUSH
8420: CALL 8772 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8424: LD_EXP 39
8428: PPUSH
8429: LD_STRING DPatrol-Bur-1
8431: PPUSH
8432: CALL_OW 88
// exit ;
8436: POP
8437: POP
8438: GO 8444
// end ;
8440: GO 8224
8442: POP
8443: POP
// end ;
8444: PPOPN 1
8446: END
// every 10 10$0 do
8447: GO 8449
8449: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8450: CALL 2574 0 0
8454: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8455: LD_INT 0
8457: PPUSH
8458: PPUSH
// if debugMode then
8459: LD_EXP 32
8463: IFFALSE 8480
// unit := NewCharacter ( ident ) ;
8465: LD_ADDR_VAR 0 5
8469: PUSH
8470: LD_VAR 0 1
8474: PPUSH
8475: CALL_OW 25
8479: ST_TO_ADDR
// if exist_mode and not debugMode then
8480: LD_VAR 0 2
8484: PUSH
8485: LD_EXP 32
8489: NOT
8490: AND
8491: IFFALSE 8516
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8493: LD_ADDR_VAR 0 5
8497: PUSH
8498: LD_EXP 31
8502: PUSH
8503: LD_VAR 0 1
8507: STR
8508: PPUSH
8509: CALL_OW 34
8513: ST_TO_ADDR
8514: GO 8538
// if not debugMode then
8516: LD_EXP 32
8520: NOT
8521: IFFALSE 8538
// unit := NewCharacter ( ident ) ;
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 25
8537: ST_TO_ADDR
// if class then
8538: LD_VAR 0 3
8542: IFFALSE 8558
// SetClass ( unit , class ) ;
8544: LD_VAR 0 5
8548: PPUSH
8549: LD_VAR 0 3
8553: PPUSH
8554: CALL_OW 336
// result := unit ;
8558: LD_ADDR_VAR 0 4
8562: PUSH
8563: LD_VAR 0 5
8567: ST_TO_ADDR
// end ;
8568: LD_VAR 0 4
8572: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8573: LD_INT 0
8575: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8576: LD_VAR 0 1
8580: PPUSH
8581: CALL_OW 255
8585: PUSH
8586: LD_VAR 0 3
8590: EQUAL
8591: PUSH
8592: LD_VAR 0 1
8596: PPUSH
8597: CALL_OW 302
8601: AND
8602: IFFALSE 8624
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8604: LD_VAR 0 1
8608: PPUSH
8609: LD_EXP 30
8613: PUSH
8614: LD_VAR 0 2
8618: STR
8619: PPUSH
8620: CALL_OW 38
// end ;
8624: LD_VAR 0 4
8628: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8629: LD_INT 0
8631: PPUSH
8632: PPUSH
8633: PPUSH
// resultCharactersToSave = [ ] ;
8634: LD_ADDR_VAR 0 6
8638: PUSH
8639: EMPTY
8640: ST_TO_ADDR
// for unit in characters do
8641: LD_ADDR_VAR 0 5
8645: PUSH
8646: LD_VAR 0 1
8650: PUSH
8651: FOR_IN
8652: IFFALSE 8700
// if GetSide ( unit ) = side and IsOK ( unit ) then
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 255
8663: PUSH
8664: LD_VAR 0 3
8668: EQUAL
8669: PUSH
8670: LD_VAR 0 5
8674: PPUSH
8675: CALL_OW 302
8679: AND
8680: IFFALSE 8698
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8682: LD_ADDR_VAR 0 6
8686: PUSH
8687: LD_VAR 0 6
8691: PUSH
8692: LD_VAR 0 5
8696: ADD
8697: ST_TO_ADDR
8698: GO 8651
8700: POP
8701: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8702: LD_VAR 0 6
8706: PPUSH
8707: LD_EXP 30
8711: PUSH
8712: LD_VAR 0 2
8716: STR
8717: PPUSH
8718: CALL_OW 38
// end ;
8722: LD_VAR 0 4
8726: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8727: LD_INT 0
8729: PPUSH
8730: PPUSH
// for unit in units do
8731: LD_ADDR_VAR 0 5
8735: PUSH
8736: LD_VAR 0 1
8740: PUSH
8741: FOR_IN
8742: IFFALSE 8765
// PlaceUnitArea ( unit , area , spawnMode ) ;
8744: LD_VAR 0 5
8748: PPUSH
8749: LD_VAR 0 2
8753: PPUSH
8754: LD_VAR 0 3
8758: PPUSH
8759: CALL_OW 49
8763: GO 8741
8765: POP
8766: POP
// end ;
8767: LD_VAR 0 4
8771: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8772: LD_INT 0
8774: PPUSH
8775: PPUSH
8776: PPUSH
8777: PPUSH
// units = characters ;
8778: LD_ADDR_VAR 0 9
8782: PUSH
8783: LD_VAR 0 1
8787: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8788: LD_ADDR_VAR 0 9
8792: PUSH
8793: LD_VAR 0 9
8797: PUSH
8798: LD_EXP 39
8802: PUSH
8803: LD_EXP 40
8807: PUSH
8808: LD_EXP 41
8812: PUSH
8813: LD_EXP 42
8817: PUSH
8818: LD_EXP 43
8822: PUSH
8823: LD_EXP 44
8827: PUSH
8828: LD_EXP 45
8832: PUSH
8833: LD_EXP 46
8837: PUSH
8838: LD_EXP 57
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: DIFF
8854: ST_TO_ADDR
// if not units and not canTalkHero then
8855: LD_VAR 0 9
8859: NOT
8860: PUSH
8861: LD_VAR 0 5
8865: NOT
8866: AND
8867: IFFALSE 8871
// exit ;
8869: GO 9050
// if not units then
8871: LD_VAR 0 9
8875: NOT
8876: IFFALSE 8903
// units = characters diff [ Burlak , Stevens ] ;
8878: LD_ADDR_VAR 0 9
8882: PUSH
8883: LD_VAR 0 1
8887: PUSH
8888: LD_EXP 39
8892: PUSH
8893: LD_EXP 57
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: DIFF
8902: ST_TO_ADDR
// if not units and canTalkHero then
8903: LD_VAR 0 9
8907: NOT
8908: PUSH
8909: LD_VAR 0 5
8913: AND
8914: IFFALSE 8918
// exit ;
8916: GO 9050
// speaker := units [ rand ( 1 , units ) ] ;
8918: LD_ADDR_VAR 0 8
8922: PUSH
8923: LD_VAR 0 9
8927: PUSH
8928: LD_INT 1
8930: PPUSH
8931: LD_VAR 0 9
8935: PPUSH
8936: CALL_OW 12
8940: ARRAY
8941: ST_TO_ADDR
// if radio then
8942: LD_VAR 0 4
8946: IFFALSE 8995
// begin if GetSex ( speaker ) = sex_male then
8948: LD_VAR 0 8
8952: PPUSH
8953: CALL_OW 258
8957: PUSH
8958: LD_INT 1
8960: EQUAL
8961: IFFALSE 8979
// SayRadio ( speaker , dialogMID ) else
8963: LD_VAR 0 8
8967: PPUSH
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 94
8977: GO 8993
// SayRadio ( speaker , dialogFID ) ;
8979: LD_VAR 0 8
8983: PPUSH
8984: LD_VAR 0 3
8988: PPUSH
8989: CALL_OW 94
// end else
8993: GO 9040
// begin if GetSex ( speaker ) = sex_male then
8995: LD_VAR 0 8
8999: PPUSH
9000: CALL_OW 258
9004: PUSH
9005: LD_INT 1
9007: EQUAL
9008: IFFALSE 9026
// Say ( speaker , dialogMID ) else
9010: LD_VAR 0 8
9014: PPUSH
9015: LD_VAR 0 2
9019: PPUSH
9020: CALL_OW 88
9024: GO 9040
// Say ( speaker , dialogFID ) ;
9026: LD_VAR 0 8
9030: PPUSH
9031: LD_VAR 0 3
9035: PPUSH
9036: CALL_OW 88
// end ; result := speaker ;
9040: LD_ADDR_VAR 0 6
9044: PUSH
9045: LD_VAR 0 8
9049: ST_TO_ADDR
// end ;
9050: LD_VAR 0 6
9054: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9055: LD_INT 0
9057: PPUSH
9058: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9059: LD_ADDR_VAR 0 4
9063: PUSH
9064: LD_VAR 0 2
9068: PPUSH
9069: CALL_OW 254
9073: PUSH
9074: LD_INT 3
9076: MINUS
9077: ST_TO_ADDR
// if dir < 0 then
9078: LD_VAR 0 4
9082: PUSH
9083: LD_INT 0
9085: LESS
9086: IFFALSE 9102
// dir := 6 + dir ;
9088: LD_ADDR_VAR 0 4
9092: PUSH
9093: LD_INT 6
9095: PUSH
9096: LD_VAR 0 4
9100: PLUS
9101: ST_TO_ADDR
// SetDir ( un , dir ) ;
9102: LD_VAR 0 1
9106: PPUSH
9107: LD_VAR 0 4
9111: PPUSH
9112: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9116: LD_VAR 0 1
9120: PPUSH
9121: LD_VAR 0 2
9125: PPUSH
9126: CALL_OW 52
// result = un ;
9130: LD_ADDR_VAR 0 3
9134: PUSH
9135: LD_VAR 0 1
9139: ST_TO_ADDR
// end ;
9140: LD_VAR 0 3
9144: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9145: LD_INT 0
9147: PPUSH
9148: PPUSH
9149: PPUSH
9150: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9151: LD_ADDR_VAR 0 6
9155: PUSH
9156: LD_INT 34
9158: PUSH
9159: LD_INT 71
9161: PUSH
9162: LD_INT 70
9164: PUSH
9165: LD_INT 69
9167: PUSH
9168: LD_INT 39
9170: PUSH
9171: LD_INT 31
9173: PUSH
9174: LD_INT 14
9176: PUSH
9177: LD_INT 10
9179: PUSH
9180: LD_INT 40
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: ST_TO_ADDR
// resultWeapons = [ ] ;
9194: LD_ADDR_VAR 0 5
9198: PUSH
9199: EMPTY
9200: ST_TO_ADDR
// for i := 1 to weaponTechs do
9201: LD_ADDR_VAR 0 4
9205: PUSH
9206: DOUBLE
9207: LD_INT 1
9209: DEC
9210: ST_TO_ADDR
9211: LD_VAR 0 6
9215: PUSH
9216: FOR_TO
9217: IFFALSE 9404
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9219: LD_VAR 0 6
9223: PUSH
9224: LD_VAR 0 4
9228: ARRAY
9229: PPUSH
9230: LD_VAR 0 2
9234: PPUSH
9235: CALL_OW 482
9239: PUSH
9240: LD_VAR 0 6
9244: PUSH
9245: LD_VAR 0 4
9249: ARRAY
9250: PPUSH
9251: LD_VAR 0 1
9255: PPUSH
9256: CALL_OW 321
9260: PUSH
9261: LD_INT 2
9263: EQUAL
9264: AND
9265: IFFALSE 9402
// case nation of nation_american :
9267: LD_VAR 0 2
9271: PUSH
9272: LD_INT 1
9274: DOUBLE
9275: EQUAL
9276: IFTRUE 9280
9278: GO 9315
9280: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9281: LD_ADDR_VAR 0 5
9285: PUSH
9286: LD_VAR 0 5
9290: PUSH
9291: LD_VAR 0 6
9295: PUSH
9296: LD_VAR 0 4
9300: ARRAY
9301: PPUSH
9302: LD_VAR 0 2
9306: PPUSH
9307: CALL 9421 0 2
9311: ADD
9312: ST_TO_ADDR
9313: GO 9402
9315: LD_INT 2
9317: DOUBLE
9318: EQUAL
9319: IFTRUE 9323
9321: GO 9358
9323: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9324: LD_ADDR_VAR 0 5
9328: PUSH
9329: LD_VAR 0 5
9333: PUSH
9334: LD_VAR 0 6
9338: PUSH
9339: LD_VAR 0 4
9343: ARRAY
9344: PPUSH
9345: LD_VAR 0 2
9349: PPUSH
9350: CALL 9421 0 2
9354: ADD
9355: ST_TO_ADDR
9356: GO 9402
9358: LD_INT 3
9360: DOUBLE
9361: EQUAL
9362: IFTRUE 9366
9364: GO 9401
9366: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9367: LD_ADDR_VAR 0 5
9371: PUSH
9372: LD_VAR 0 5
9376: PUSH
9377: LD_VAR 0 6
9381: PUSH
9382: LD_VAR 0 4
9386: ARRAY
9387: PPUSH
9388: LD_VAR 0 2
9392: PPUSH
9393: CALL 9421 0 2
9397: ADD
9398: ST_TO_ADDR
9399: GO 9402
9401: POP
// end ;
9402: GO 9216
9404: POP
9405: POP
// result = resultWeapons ;
9406: LD_ADDR_VAR 0 3
9410: PUSH
9411: LD_VAR 0 5
9415: ST_TO_ADDR
// end ;
9416: LD_VAR 0 3
9420: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9421: LD_INT 0
9423: PPUSH
// case tech of tech_AdvMet :
9424: LD_VAR 0 1
9428: PUSH
9429: LD_INT 34
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9465
9437: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9438: LD_ADDR_VAR 0 3
9442: PUSH
9443: LD_INT 6
9445: PUSH
9446: LD_STRING 
9448: PUSH
9449: LD_INT 46
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: PUSH
9457: LD_VAR 0 2
9461: ARRAY
9462: ST_TO_ADDR
9463: GO 9754
9465: LD_INT 71
9467: DOUBLE
9468: EQUAL
9469: IFTRUE 9473
9471: GO 9501
9473: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9474: LD_ADDR_VAR 0 3
9478: PUSH
9479: LD_STRING 
9481: PUSH
9482: LD_STRING 
9484: PUSH
9485: LD_INT 47
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: PUSH
9493: LD_VAR 0 2
9497: ARRAY
9498: ST_TO_ADDR
9499: GO 9754
9501: LD_INT 70
9503: DOUBLE
9504: EQUAL
9505: IFTRUE 9509
9507: GO 9537
9509: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9510: LD_ADDR_VAR 0 3
9514: PUSH
9515: LD_STRING 
9517: PUSH
9518: LD_INT 26
9520: PUSH
9521: LD_STRING 
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: PUSH
9529: LD_VAR 0 2
9533: ARRAY
9534: ST_TO_ADDR
9535: GO 9754
9537: LD_INT 69
9539: DOUBLE
9540: EQUAL
9541: IFTRUE 9545
9543: GO 9573
9545: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9546: LD_ADDR_VAR 0 3
9550: PUSH
9551: LD_INT 4
9553: PUSH
9554: LD_INT 25
9556: PUSH
9557: LD_INT 43
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: PUSH
9565: LD_VAR 0 2
9569: ARRAY
9570: ST_TO_ADDR
9571: GO 9754
9573: LD_INT 39
9575: DOUBLE
9576: EQUAL
9577: IFTRUE 9581
9579: GO 9609
9581: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_INT 5
9589: PUSH
9590: LD_INT 27
9592: PUSH
9593: LD_INT 44
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_VAR 0 2
9605: ARRAY
9606: ST_TO_ADDR
9607: GO 9754
9609: LD_INT 31
9611: DOUBLE
9612: EQUAL
9613: IFTRUE 9617
9615: GO 9645
9617: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9618: LD_ADDR_VAR 0 3
9622: PUSH
9623: LD_STRING 
9625: PUSH
9626: LD_STRING 
9628: PUSH
9629: LD_INT 49
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: PUSH
9637: LD_VAR 0 2
9641: ARRAY
9642: ST_TO_ADDR
9643: GO 9754
9645: LD_INT 14
9647: DOUBLE
9648: EQUAL
9649: IFTRUE 9653
9651: GO 9681
9653: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9654: LD_ADDR_VAR 0 3
9658: PUSH
9659: LD_INT 10
9661: PUSH
9662: LD_STRING 
9664: PUSH
9665: LD_STRING 
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: LD_VAR 0 2
9677: ARRAY
9678: ST_TO_ADDR
9679: GO 9754
9681: LD_INT 10
9683: DOUBLE
9684: EQUAL
9685: IFTRUE 9689
9687: GO 9717
9689: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9690: LD_ADDR_VAR 0 3
9694: PUSH
9695: LD_INT 9
9697: PUSH
9698: LD_STRING 
9700: PUSH
9701: LD_STRING 
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: PUSH
9709: LD_VAR 0 2
9713: ARRAY
9714: ST_TO_ADDR
9715: GO 9754
9717: LD_INT 40
9719: DOUBLE
9720: EQUAL
9721: IFTRUE 9725
9723: GO 9753
9725: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9726: LD_ADDR_VAR 0 3
9730: PUSH
9731: LD_INT 7
9733: PUSH
9734: LD_INT 28
9736: PUSH
9737: LD_INT 45
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: LD_VAR 0 2
9749: ARRAY
9750: ST_TO_ADDR
9751: GO 9754
9753: POP
// end ;
9754: LD_VAR 0 3
9758: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9759: LD_INT 0
9761: PPUSH
9762: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9763: LD_ADDR_VAR 0 2
9767: PUSH
9768: LD_VAR 0 1
9772: PPUSH
9773: LD_INT 1
9775: PPUSH
9776: CALL_OW 289
9780: PUSH
9781: LD_VAR 0 1
9785: PPUSH
9786: LD_INT 2
9788: PPUSH
9789: CALL_OW 289
9793: PUSH
9794: LD_VAR 0 1
9798: PPUSH
9799: LD_INT 3
9801: PPUSH
9802: CALL_OW 289
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: ST_TO_ADDR
// end ; end_of_file
9812: LD_VAR 0 2
9816: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9817: LD_VAR 0 1
9821: PPUSH
9822: CALL_OW 255
9826: PUSH
9827: LD_INT 3
9829: EQUAL
9830: PUSH
9831: LD_VAR 0 1
9835: PPUSH
9836: CALL_OW 266
9840: PUSH
9841: LD_INT 0
9843: EQUAL
9844: AND
9845: IFFALSE 9859
// SetBname ( building , bukharin ) ;
9847: LD_VAR 0 1
9851: PPUSH
9852: LD_STRING bukharin
9854: PPUSH
9855: CALL_OW 500
// if GetSide ( building ) = 2 then
9859: LD_VAR 0 1
9863: PPUSH
9864: CALL_OW 255
9868: PUSH
9869: LD_INT 2
9871: EQUAL
9872: IFFALSE 10013
// begin if GetBType ( building ) = b_lab then
9874: LD_VAR 0 1
9878: PPUSH
9879: CALL_OW 266
9883: PUSH
9884: LD_INT 6
9886: EQUAL
9887: IFFALSE 9901
// ComUpgradeLab ( building , b_lab_weapon ) ;
9889: LD_VAR 0 1
9893: PPUSH
9894: LD_INT 10
9896: PPUSH
9897: CALL_OW 147
// if GetBType ( building ) = b_workshop then
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 266
9910: PUSH
9911: LD_INT 2
9913: EQUAL
9914: IFFALSE 9925
// ComUpgrade ( building ) ;
9916: LD_VAR 0 1
9920: PPUSH
9921: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
9925: LD_VAR 0 1
9929: PPUSH
9930: CALL_OW 266
9934: PUSH
9935: LD_INT 17
9937: EQUAL
9938: IFFALSE 10013
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 2 , 2 , 3 ] [ Difficulty ] , 1 , [ 1 , 1 , 2 ] [ Difficulty ] , true ) ;
9940: LD_INT 2
9942: PPUSH
9943: LD_INT 2
9945: PPUSH
9946: LD_EXP 51
9950: PPUSH
9951: LD_INT 34
9953: PPUSH
9954: LD_INT 39
9956: PPUSH
9957: LD_INT 40
9959: PPUSH
9960: LD_INT 35
9962: PPUSH
9963: LD_INT 2
9965: PUSH
9966: LD_INT 2
9968: PUSH
9969: LD_INT 3
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: LD_OWVAR 67
9981: ARRAY
9982: PPUSH
9983: LD_INT 1
9985: PPUSH
9986: LD_INT 1
9988: PUSH
9989: LD_INT 1
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: PUSH
10000: LD_OWVAR 67
10004: ARRAY
10005: PPUSH
10006: LD_INT 1
10008: PPUSH
10009: CALL 10829 0 11
// end ; end ;
10013: PPOPN 1
10015: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
10016: LD_VAR 0 2
10020: PPUSH
10021: CALL_OW 255
10025: PUSH
10026: LD_INT 3
10028: EQUAL
10029: PUSH
10030: LD_VAR 0 2
10034: PPUSH
10035: CALL_OW 248
10039: PUSH
10040: LD_INT 3
10042: EQUAL
10043: AND
10044: PUSH
10045: LD_EXP 10
10049: NOT
10050: AND
10051: IFFALSE 10062
// Dial_TameApe ( human ) ;
10053: LD_VAR 0 2
10057: PPUSH
10058: CALL 4451 0 1
// end ;
10062: PPOPN 2
10064: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10065: LD_VAR 0 1
10069: PUSH
10070: LD_INT 1
10072: EQUAL
10073: PUSH
10074: LD_VAR 0 2
10078: PPUSH
10079: CALL_OW 255
10083: PUSH
10084: LD_INT 3
10086: EQUAL
10087: AND
10088: IFFALSE 10094
// Dial_ResearchApeLang ;
10090: CALL 4340 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10094: LD_VAR 0 1
10098: PUSH
10099: LD_INT 2
10101: EQUAL
10102: PUSH
10103: LD_VAR 0 2
10107: PPUSH
10108: CALL_OW 255
10112: PUSH
10113: LD_INT 3
10115: EQUAL
10116: AND
10117: IFFALSE 10123
// Dial_ResearchApePsych ;
10119: CALL 4884 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10123: LD_VAR 0 1
10127: PUSH
10128: LD_INT 11
10130: EQUAL
10131: PUSH
10132: LD_VAR 0 2
10136: PPUSH
10137: CALL_OW 255
10141: PUSH
10142: LD_INT 3
10144: EQUAL
10145: AND
10146: IFFALSE 10152
// Dial_ResearchApeAgress ;
10148: CALL 5076 0 0
// end ;
10152: PPOPN 2
10154: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10155: LD_VAR 0 2
10159: PPUSH
10160: CALL_OW 255
10164: PUSH
10165: LD_INT 3
10167: EQUAL
10168: PUSH
10169: LD_VAR 0 2
10173: PPUSH
10174: CALL_OW 257
10178: PUSH
10179: LD_INT 12
10181: EQUAL
10182: AND
10183: PUSH
10184: LD_VAR 0 1
10188: PPUSH
10189: CALL_OW 266
10193: PUSH
10194: LD_INT 6
10196: EQUAL
10197: PUSH
10198: LD_VAR 0 1
10202: PPUSH
10203: CALL_OW 266
10207: PUSH
10208: LD_INT 7
10210: EQUAL
10211: OR
10212: AND
10213: PUSH
10214: LD_EXP 11
10218: NOT
10219: AND
10220: IFFALSE 10226
// Dial_ApeEnterLab ;
10222: CALL 4672 0 0
// end ;
10226: PPOPN 2
10228: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10229: LD_VAR 0 1
10233: PUSH
10234: LD_EXP 52
10238: IN
10239: IFFALSE 10257
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10241: LD_ADDR_EXP 52
10245: PUSH
10246: LD_EXP 52
10250: PUSH
10251: LD_VAR 0 1
10255: DIFF
10256: ST_TO_ADDR
// if unit in arabianHovercrafts then
10257: LD_VAR 0 1
10261: PUSH
10262: LD_EXP 53
10266: IN
10267: IFFALSE 10285
// arabianHovercrafts = arabianHovercrafts diff unit ;
10269: LD_ADDR_EXP 53
10273: PUSH
10274: LD_EXP 53
10278: PUSH
10279: LD_VAR 0 1
10283: DIFF
10284: ST_TO_ADDR
// if unit in arabianPatrolTroops then
10285: LD_VAR 0 1
10289: PUSH
10290: LD_EXP 54
10294: IN
10295: IFFALSE 10313
// arabianPatrolTroops = arabianPatrolTroops diff unit ;
10297: LD_ADDR_EXP 54
10301: PUSH
10302: LD_EXP 54
10306: PUSH
10307: LD_VAR 0 1
10311: DIFF
10312: ST_TO_ADDR
// end ;
10313: PPOPN 1
10315: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10316: LD_VAR 0 1
10320: PUSH
10321: LD_EXP 51
10325: IN
10326: IFFALSE 10344
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10328: LD_ADDR_EXP 51
10332: PUSH
10333: LD_EXP 51
10337: PUSH
10338: LD_VAR 0 1
10342: DIFF
10343: ST_TO_ADDR
// if unit = Burlak then
10344: LD_VAR 0 1
10348: PUSH
10349: LD_EXP 39
10353: EQUAL
10354: IFFALSE 10360
// Lose_Burlak ;
10356: CALL 17213 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10360: LD_INT 22
10362: PUSH
10363: LD_INT 3
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: LD_INT 21
10372: PUSH
10373: LD_INT 1
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 23
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PPUSH
10395: CALL_OW 69
10399: PUSH
10400: LD_INT 6
10402: LESS
10403: IFFALSE 10409
// Lose_Survive ;
10405: CALL 17228 0 0
// if GetType ( unit ) = unit_vehicle and GetSide ( unit ) = 2 and GetChassis ( unit ) = ar_hovercraft then
10409: LD_VAR 0 1
10413: PPUSH
10414: CALL_OW 247
10418: PUSH
10419: LD_INT 2
10421: EQUAL
10422: PUSH
10423: LD_VAR 0 1
10427: PPUSH
10428: CALL_OW 255
10432: PUSH
10433: LD_INT 2
10435: EQUAL
10436: AND
10437: PUSH
10438: LD_VAR 0 1
10442: PPUSH
10443: CALL_OW 265
10447: PUSH
10448: LD_INT 11
10450: EQUAL
10451: AND
10452: IFFALSE 10468
// achievement_DestroyedHovercrafts = achievement_DestroyedHovercrafts + 1 ;
10454: LD_ADDR_EXP 25
10458: PUSH
10459: LD_EXP 25
10463: PUSH
10464: LD_INT 1
10466: PLUS
10467: ST_TO_ADDR
// end ;
10468: PPOPN 1
10470: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10471: LD_VAR 0 1
10475: PUSH
10476: LD_INT 3
10478: EQUAL
10479: PUSH
10480: LD_VAR 0 2
10484: PUSH
10485: LD_INT 6
10487: EQUAL
10488: AND
10489: PUSH
10490: LD_VAR 0 1
10494: PUSH
10495: LD_INT 6
10497: EQUAL
10498: PUSH
10499: LD_VAR 0 2
10503: PUSH
10504: LD_INT 3
10506: EQUAL
10507: AND
10508: OR
10509: PUSH
10510: LD_EXP 57
10514: PPUSH
10515: CALL_OW 255
10519: PUSH
10520: LD_INT 6
10522: EQUAL
10523: AND
10524: IFFALSE 10582
// begin stevensFollow = false ;
10526: LD_ADDR_EXP 15
10530: PUSH
10531: LD_INT 0
10533: ST_TO_ADDR
// stevensCanExitMap = true ;
10534: LD_ADDR_EXP 19
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// stevensWasInDepot = false ;
10542: LD_ADDR_EXP 18
10546: PUSH
10547: LD_INT 0
10549: ST_TO_ADDR
// stevensDepot = false ;
10550: LD_ADDR_EXP 17
10554: PUSH
10555: LD_INT 0
10557: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10558: LD_EXP 57
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10570: LD_EXP 57
10574: PPUSH
10575: LD_INT 37
10577: PPUSH
10578: CALL_OW 113
// end ; end ; end_of_file
10582: PPOPN 2
10584: END
// export function BuildBase ; var engs ; begin
10585: LD_INT 0
10587: PPUSH
10588: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10589: LD_ADDR_VAR 0 2
10593: PUSH
10594: LD_INT 22
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 21
10606: PUSH
10607: LD_INT 1
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 25
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: PPUSH
10629: CALL_OW 69
10633: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10634: LD_VAR 0 2
10638: PPUSH
10639: LD_INT 4
10641: PPUSH
10642: LD_INT 129
10644: PPUSH
10645: LD_INT 74
10647: PPUSH
10648: LD_INT 2
10650: PPUSH
10651: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10655: LD_VAR 0 2
10659: PPUSH
10660: LD_INT 26
10662: PPUSH
10663: LD_INT 128
10665: PPUSH
10666: LD_INT 53
10668: PPUSH
10669: LD_INT 2
10671: PPUSH
10672: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 127 , 56 , 1 ) ;
10676: LD_VAR 0 2
10680: PPUSH
10681: LD_INT 26
10683: PPUSH
10684: LD_INT 127
10686: PPUSH
10687: LD_INT 56
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10697: LD_VAR 0 2
10701: PPUSH
10702: LD_INT 6
10704: PPUSH
10705: LD_INT 138
10707: PPUSH
10708: LD_INT 78
10710: PPUSH
10711: LD_INT 5
10713: PPUSH
10714: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10718: LD_VAR 0 2
10722: PPUSH
10723: LD_INT 2
10725: PPUSH
10726: LD_INT 137
10728: PPUSH
10729: LD_INT 63
10731: PPUSH
10732: LD_INT 4
10734: PPUSH
10735: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10739: LD_VAR 0 2
10743: PPUSH
10744: LD_INT 23
10746: PPUSH
10747: LD_INT 137
10749: PPUSH
10750: LD_INT 60
10752: PPUSH
10753: LD_INT 3
10755: PPUSH
10756: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10760: LD_VAR 0 2
10764: PPUSH
10765: LD_INT 16
10767: PPUSH
10768: LD_INT 140
10770: PPUSH
10771: LD_INT 66
10773: PPUSH
10774: LD_INT 5
10776: PPUSH
10777: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10781: LD_VAR 0 2
10785: PPUSH
10786: LD_INT 17
10788: PPUSH
10789: LD_INT 133
10791: PPUSH
10792: LD_INT 59
10794: PPUSH
10795: LD_INT 2
10797: PPUSH
10798: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10802: LD_INT 1
10804: PUSH
10805: LD_EXP 50
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: LD_INT 128
10816: PPUSH
10817: LD_INT 66
10819: PPUSH
10820: CALL_OW 111
// end ;
10824: LD_VAR 0 1
10828: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , offensiveReadyCounter , target1 , target2 , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
10835: PPUSH
10836: PPUSH
10837: PPUSH
10838: PPUSH
10839: PPUSH
10840: PPUSH
10841: PPUSH
10842: PPUSH
10843: PPUSH
10844: PPUSH
10845: PPUSH
10846: PPUSH
10847: PPUSH
10848: PPUSH
10849: PPUSH
10850: PPUSH
10851: PPUSH
10852: PPUSH
10853: PPUSH
10854: PPUSH
10855: PPUSH
10856: PPUSH
10857: PPUSH
10858: PPUSH
10859: PPUSH
10860: PPUSH
10861: PPUSH
10862: PPUSH
// personel = [ ] ;
10863: LD_ADDR_VAR 0 18
10867: PUSH
10868: EMPTY
10869: ST_TO_ADDR
// vehicles = [ ] ;
10870: LD_ADDR_VAR 0 24
10874: PUSH
10875: EMPTY
10876: ST_TO_ADDR
// for unit in basePersonel do
10877: LD_ADDR_VAR 0 17
10881: PUSH
10882: LD_VAR 0 3
10886: PUSH
10887: FOR_IN
10888: IFFALSE 10936
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
10890: LD_ADDR_VAR 0 18
10894: PUSH
10895: LD_VAR 0 18
10899: PUSH
10900: LD_VAR 0 17
10904: PUSH
10905: LD_VAR 0 17
10909: PPUSH
10910: CALL_OW 310
10914: PUSH
10915: LD_VAR 0 17
10919: PPUSH
10920: CALL_OW 302
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: ADD
10933: ST_TO_ADDR
10934: GO 10887
10936: POP
10937: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
10938: LD_ADDR_VAR 0 23
10942: PUSH
10943: LD_VAR 0 4
10947: PPUSH
10948: LD_INT 22
10950: PUSH
10951: LD_VAR 0 1
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 21
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 50
10972: PUSH
10973: EMPTY
10974: LIST
10975: PUSH
10976: LD_INT 3
10978: PUSH
10979: LD_INT 2
10981: PUSH
10982: LD_INT 31
10984: PUSH
10985: LD_INT 31
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 34
10994: PUSH
10995: LD_INT 12
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: LD_INT 34
11004: PUSH
11005: LD_INT 51
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 34
11014: PUSH
11015: LD_INT 32
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: PPUSH
11039: CALL_OW 70
11043: PUSH
11044: LD_EXP 52
11048: DIFF
11049: PUSH
11050: FOR_IN
11051: IFFALSE 11099
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11053: LD_ADDR_VAR 0 24
11057: PUSH
11058: LD_VAR 0 24
11062: PUSH
11063: LD_VAR 0 23
11067: PUSH
11068: LD_VAR 0 23
11072: PPUSH
11073: CALL_OW 310
11077: PUSH
11078: LD_VAR 0 23
11082: PPUSH
11083: CALL_OW 302
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: ADD
11096: ST_TO_ADDR
11097: GO 11050
11099: POP
11100: POP
// repeat soldiers = [ ] ;
11101: LD_ADDR_VAR 0 19
11105: PUSH
11106: EMPTY
11107: ST_TO_ADDR
// engineers = [ ] ;
11108: LD_ADDR_VAR 0 20
11112: PUSH
11113: EMPTY
11114: ST_TO_ADDR
// mechanics = [ ] ;
11115: LD_ADDR_VAR 0 21
11119: PUSH
11120: EMPTY
11121: ST_TO_ADDR
// scientists = [ ] ;
11122: LD_ADDR_VAR 0 22
11126: PUSH
11127: EMPTY
11128: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11129: LD_ADDR_VAR 0 33
11133: PUSH
11134: LD_VAR 0 4
11138: PPUSH
11139: LD_INT 22
11141: PUSH
11142: LD_VAR 0 1
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 21
11153: PUSH
11154: LD_INT 3
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 50
11163: PUSH
11164: EMPTY
11165: LIST
11166: PUSH
11167: LD_INT 2
11169: PUSH
11170: LD_INT 30
11172: PUSH
11173: LD_INT 0
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 30
11182: PUSH
11183: LD_INT 1
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: PPUSH
11201: CALL_OW 70
11205: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11206: LD_ADDR_VAR 0 34
11210: PUSH
11211: LD_VAR 0 4
11215: PPUSH
11216: LD_INT 22
11218: PUSH
11219: LD_VAR 0 1
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 21
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 50
11240: PUSH
11241: EMPTY
11242: LIST
11243: PUSH
11244: LD_INT 2
11246: PUSH
11247: LD_INT 30
11249: PUSH
11250: LD_INT 2
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 30
11259: PUSH
11260: LD_INT 3
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 70
11282: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11283: LD_ADDR_VAR 0 35
11287: PUSH
11288: LD_VAR 0 4
11292: PPUSH
11293: LD_INT 22
11295: PUSH
11296: LD_VAR 0 1
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 21
11307: PUSH
11308: LD_INT 3
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 50
11317: PUSH
11318: EMPTY
11319: LIST
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 30
11326: PUSH
11327: LD_INT 6
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 30
11336: PUSH
11337: LD_INT 7
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 30
11346: PUSH
11347: LD_INT 8
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 70
11370: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11371: LD_ADDR_VAR 0 36
11375: PUSH
11376: LD_VAR 0 4
11380: PPUSH
11381: LD_INT 22
11383: PUSH
11384: LD_VAR 0 1
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 21
11395: PUSH
11396: LD_INT 3
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 50
11405: PUSH
11406: EMPTY
11407: LIST
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: LD_INT 30
11414: PUSH
11415: LD_INT 31
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 30
11424: PUSH
11425: LD_INT 32
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: PPUSH
11443: CALL_OW 70
11447: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11448: LD_ADDR_VAR 0 37
11452: PUSH
11453: LD_VAR 0 4
11457: PPUSH
11458: LD_INT 22
11460: PUSH
11461: LD_VAR 0 1
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: LD_INT 21
11472: PUSH
11473: LD_INT 3
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 50
11482: PUSH
11483: EMPTY
11484: LIST
11485: PUSH
11486: LD_INT 2
11488: PUSH
11489: LD_INT 30
11491: PUSH
11492: LD_INT 4
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 30
11501: PUSH
11502: LD_INT 5
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 70
11524: ST_TO_ADDR
// for i := 1 to personel do
11525: LD_ADDR_VAR 0 13
11529: PUSH
11530: DOUBLE
11531: LD_INT 1
11533: DEC
11534: ST_TO_ADDR
11535: LD_VAR 0 18
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11747
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11543: LD_VAR 0 18
11547: PUSH
11548: LD_VAR 0 13
11552: ARRAY
11553: PUSH
11554: LD_INT 1
11556: ARRAY
11557: PPUSH
11558: CALL_OW 256
11562: PUSH
11563: LD_INT 1000
11565: EQUAL
11566: IFFALSE 11608
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11568: LD_ADDR_VAR 0 18
11572: PUSH
11573: LD_VAR 0 18
11577: PPUSH
11578: LD_VAR 0 13
11582: PUSH
11583: LD_VAR 0 18
11587: PUSH
11588: LD_VAR 0 13
11592: ARRAY
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL 25708 0 3
11605: ST_TO_ADDR
// end else
11606: GO 11695
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11608: LD_VAR 0 18
11612: PUSH
11613: LD_VAR 0 13
11617: ARRAY
11618: PUSH
11619: LD_INT 1
11621: ARRAY
11622: PPUSH
11623: CALL_OW 256
11627: PUSH
11628: LD_INT 950
11630: LESSEQUAL
11631: IFFALSE 11695
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
11633: LD_ADDR_VAR 0 18
11637: PUSH
11638: LD_VAR 0 18
11642: PPUSH
11643: LD_VAR 0 13
11647: PUSH
11648: LD_VAR 0 18
11652: PUSH
11653: LD_VAR 0 13
11657: ARRAY
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PPUSH
11663: LD_INT 0
11665: PPUSH
11666: CALL 25708 0 3
11670: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11671: LD_VAR 0 18
11675: PUSH
11676: LD_VAR 0 13
11680: ARRAY
11681: PUSH
11682: LD_INT 1
11684: ARRAY
11685: PPUSH
11686: LD_VAR 0 5
11690: PPUSH
11691: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11695: LD_VAR 0 18
11699: PUSH
11700: LD_VAR 0 13
11704: ARRAY
11705: PUSH
11706: LD_INT 1
11708: ARRAY
11709: PPUSH
11710: CALL_OW 256
11714: PUSH
11715: LD_INT 250
11717: LESS
11718: IFFALSE 11745
// personel = personel diff [ personel [ i ] ] ;
11720: LD_ADDR_VAR 0 18
11724: PUSH
11725: LD_VAR 0 18
11729: PUSH
11730: LD_VAR 0 18
11734: PUSH
11735: LD_VAR 0 13
11739: ARRAY
11740: PUSH
11741: EMPTY
11742: LIST
11743: DIFF
11744: ST_TO_ADDR
// end ;
11745: GO 11540
11747: POP
11748: POP
// for i := 1 to vehicles do
11749: LD_ADDR_VAR 0 13
11753: PUSH
11754: DOUBLE
11755: LD_INT 1
11757: DEC
11758: ST_TO_ADDR
11759: LD_VAR 0 24
11763: PUSH
11764: FOR_TO
11765: IFFALSE 12151
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
11767: LD_VAR 0 24
11771: PUSH
11772: LD_VAR 0 13
11776: ARRAY
11777: PUSH
11778: LD_INT 1
11780: ARRAY
11781: PPUSH
11782: CALL_OW 261
11786: PUSH
11787: LD_INT 50
11789: LESS
11790: IFFALSE 11814
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
11792: LD_VAR 0 24
11796: PUSH
11797: LD_VAR 0 13
11801: ARRAY
11802: PUSH
11803: LD_INT 1
11805: ARRAY
11806: PPUSH
11807: LD_INT 100
11809: PPUSH
11810: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11814: LD_VAR 0 24
11818: PUSH
11819: LD_VAR 0 13
11823: ARRAY
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: CALL_OW 256
11833: PUSH
11834: LD_INT 1000
11836: EQUAL
11837: IFFALSE 12012
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11839: LD_VAR 0 24
11843: PUSH
11844: LD_VAR 0 13
11848: ARRAY
11849: PUSH
11850: LD_INT 1
11852: ARRAY
11853: PPUSH
11854: CALL_OW 263
11858: PUSH
11859: LD_INT 1
11861: EQUAL
11862: IFFALSE 11920
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
11864: LD_VAR 0 24
11868: PUSH
11869: LD_VAR 0 13
11873: ARRAY
11874: PUSH
11875: LD_INT 2
11877: ARRAY
11878: PPUSH
11879: CALL_OW 310
11883: NOT
11884: IFFALSE 11920
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
11886: LD_VAR 0 24
11890: PUSH
11891: LD_VAR 0 13
11895: ARRAY
11896: PUSH
11897: LD_INT 2
11899: ARRAY
11900: PPUSH
11901: LD_VAR 0 24
11905: PUSH
11906: LD_VAR 0 13
11910: ARRAY
11911: PUSH
11912: LD_INT 1
11914: ARRAY
11915: PPUSH
11916: CALL_OW 120
// if offensiveunits < vehiclesToAttackAmount then
11920: LD_VAR 0 27
11924: PUSH
11925: LD_VAR 0 10
11929: LESS
11930: IFFALSE 11972
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
11932: LD_ADDR_VAR 0 24
11936: PUSH
11937: LD_VAR 0 24
11941: PPUSH
11942: LD_VAR 0 13
11946: PUSH
11947: LD_VAR 0 24
11951: PUSH
11952: LD_VAR 0 13
11956: ARRAY
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PPUSH
11962: LD_INT 3
11964: PPUSH
11965: CALL 25708 0 3
11969: ST_TO_ADDR
11970: GO 12010
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
11972: LD_ADDR_VAR 0 24
11976: PUSH
11977: LD_VAR 0 24
11981: PPUSH
11982: LD_VAR 0 13
11986: PUSH
11987: LD_VAR 0 24
11991: PUSH
11992: LD_VAR 0 13
11996: ARRAY
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PPUSH
12002: LD_INT 2
12004: PPUSH
12005: CALL 25708 0 3
12009: ST_TO_ADDR
// end else
12010: GO 12099
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12012: LD_VAR 0 24
12016: PUSH
12017: LD_VAR 0 13
12021: ARRAY
12022: PUSH
12023: LD_INT 1
12025: ARRAY
12026: PPUSH
12027: CALL_OW 256
12031: PUSH
12032: LD_INT 650
12034: LESSEQUAL
12035: IFFALSE 12099
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12037: LD_ADDR_VAR 0 24
12041: PUSH
12042: LD_VAR 0 24
12046: PPUSH
12047: LD_VAR 0 13
12051: PUSH
12052: LD_VAR 0 24
12056: PUSH
12057: LD_VAR 0 13
12061: ARRAY
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PPUSH
12067: LD_INT 0
12069: PPUSH
12070: CALL 25708 0 3
12074: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12075: LD_VAR 0 24
12079: PUSH
12080: LD_VAR 0 13
12084: ARRAY
12085: PUSH
12086: LD_INT 1
12088: ARRAY
12089: PPUSH
12090: LD_VAR 0 6
12094: PPUSH
12095: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12099: LD_VAR 0 24
12103: PUSH
12104: LD_VAR 0 13
12108: ARRAY
12109: PUSH
12110: LD_INT 1
12112: ARRAY
12113: PPUSH
12114: CALL_OW 256
12118: PUSH
12119: LD_INT 250
12121: LESS
12122: IFFALSE 12149
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12124: LD_ADDR_VAR 0 24
12128: PUSH
12129: LD_VAR 0 24
12133: PUSH
12134: LD_VAR 0 24
12138: PUSH
12139: LD_VAR 0 13
12143: ARRAY
12144: PUSH
12145: EMPTY
12146: LIST
12147: DIFF
12148: ST_TO_ADDR
// end ;
12149: GO 11764
12151: POP
12152: POP
// for i := 1 to personel do
12153: LD_ADDR_VAR 0 13
12157: PUSH
12158: DOUBLE
12159: LD_INT 1
12161: DEC
12162: ST_TO_ADDR
12163: LD_VAR 0 18
12167: PUSH
12168: FOR_TO
12169: IFFALSE 12210
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12171: LD_ADDR_VAR 0 19
12175: PUSH
12176: LD_VAR 0 19
12180: PUSH
12181: LD_VAR 0 18
12185: PUSH
12186: LD_VAR 0 13
12190: ARRAY
12191: PPUSH
12192: LD_INT 25
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PPUSH
12202: CALL_OW 72
12206: ADD
12207: ST_TO_ADDR
12208: GO 12168
12210: POP
12211: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12212: LD_VAR 0 19
12216: PUSH
12217: LD_VAR 0 36
12221: PPUSH
12222: LD_INT 3
12224: PUSH
12225: LD_INT 59
12227: PUSH
12228: EMPTY
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PPUSH
12235: CALL_OW 72
12239: AND
12240: IFFALSE 12528
// begin for i := 1 to personel do
12242: LD_ADDR_VAR 0 13
12246: PUSH
12247: DOUBLE
12248: LD_INT 1
12250: DEC
12251: ST_TO_ADDR
12252: LD_VAR 0 18
12256: PUSH
12257: FOR_TO
12258: IFFALSE 12524
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12260: LD_VAR 0 18
12264: PUSH
12265: LD_VAR 0 13
12269: ARRAY
12270: PUSH
12271: LD_INT 1
12273: ARRAY
12274: PPUSH
12275: CALL_OW 257
12279: PUSH
12280: LD_INT 1
12282: EQUAL
12283: PUSH
12284: LD_VAR 0 18
12288: PUSH
12289: LD_VAR 0 13
12293: ARRAY
12294: PUSH
12295: LD_INT 3
12297: ARRAY
12298: PUSH
12299: LD_INT 1
12301: EQUAL
12302: AND
12303: IFFALSE 12522
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12305: LD_VAR 0 18
12309: PUSH
12310: LD_VAR 0 13
12314: ARRAY
12315: PUSH
12316: LD_INT 1
12318: ARRAY
12319: PPUSH
12320: CALL_OW 437
12324: IFFALSE 12425
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12326: LD_VAR 0 18
12330: PUSH
12331: LD_VAR 0 13
12335: ARRAY
12336: PUSH
12337: LD_INT 1
12339: ARRAY
12340: PPUSH
12341: CALL_OW 437
12345: PUSH
12346: LD_INT 1
12348: ARRAY
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: PUSH
12354: LD_STRING e
12356: EQUAL
12357: PUSH
12358: LD_VAR 0 18
12362: PUSH
12363: LD_VAR 0 13
12367: ARRAY
12368: PUSH
12369: LD_INT 1
12371: ARRAY
12372: PPUSH
12373: CALL_OW 437
12377: PUSH
12378: LD_INT 1
12380: ARRAY
12381: PUSH
12382: LD_INT 4
12384: ARRAY
12385: PPUSH
12386: CALL_OW 266
12390: PUSH
12391: LD_INT 4
12393: PUSH
12394: LD_INT 5
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: IN
12401: AND
12402: IFFALSE 12425
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12404: LD_VAR 0 18
12408: PUSH
12409: LD_VAR 0 13
12413: ARRAY
12414: PUSH
12415: LD_INT 1
12417: ARRAY
12418: PPUSH
12419: EMPTY
12420: PPUSH
12421: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12425: LD_ADDR_VAR 0 40
12429: PUSH
12430: LD_VAR 0 36
12434: PPUSH
12435: LD_INT 3
12437: PUSH
12438: LD_INT 59
12440: PUSH
12441: EMPTY
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 72
12452: PUSH
12453: FOR_IN
12454: IFFALSE 12520
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12456: LD_VAR 0 18
12460: PUSH
12461: LD_VAR 0 13
12465: ARRAY
12466: PUSH
12467: LD_INT 1
12469: ARRAY
12470: PPUSH
12471: CALL_OW 310
12475: PPUSH
12476: CALL_OW 266
12480: PUSH
12481: LD_INT 31
12483: PUSH
12484: LD_INT 32
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: IN
12491: NOT
12492: IFFALSE 12518
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12494: LD_VAR 0 18
12498: PUSH
12499: LD_VAR 0 13
12503: ARRAY
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: LD_VAR 0 40
12513: PPUSH
12514: CALL_OW 120
12518: GO 12453
12520: POP
12521: POP
// end ; end ;
12522: GO 12257
12524: POP
12525: POP
// end else
12526: GO 12743
// if soldiers and barracks then
12528: LD_VAR 0 19
12532: PUSH
12533: LD_VAR 0 37
12537: AND
12538: IFFALSE 12743
// for i := 1 to personel do
12540: LD_ADDR_VAR 0 13
12544: PUSH
12545: DOUBLE
12546: LD_INT 1
12548: DEC
12549: ST_TO_ADDR
12550: LD_VAR 0 18
12554: PUSH
12555: FOR_TO
12556: IFFALSE 12741
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12558: LD_VAR 0 18
12562: PUSH
12563: LD_VAR 0 13
12567: ARRAY
12568: PUSH
12569: LD_INT 1
12571: ARRAY
12572: PPUSH
12573: CALL_OW 257
12577: PUSH
12578: LD_INT 1
12580: EQUAL
12581: PUSH
12582: LD_VAR 0 18
12586: PUSH
12587: LD_VAR 0 13
12591: ARRAY
12592: PUSH
12593: LD_INT 3
12595: ARRAY
12596: PUSH
12597: LD_INT 1
12599: EQUAL
12600: AND
12601: PUSH
12602: LD_VAR 0 18
12606: PUSH
12607: LD_VAR 0 13
12611: ARRAY
12612: PUSH
12613: LD_INT 1
12615: ARRAY
12616: PPUSH
12617: LD_INT 56
12619: PUSH
12620: EMPTY
12621: LIST
12622: PPUSH
12623: CALL_OW 72
12627: AND
12628: IFFALSE 12739
// begin if not personel [ i ] [ 2 ] then
12630: LD_VAR 0 18
12634: PUSH
12635: LD_VAR 0 13
12639: ARRAY
12640: PUSH
12641: LD_INT 2
12643: ARRAY
12644: NOT
12645: IFFALSE 12705
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12647: LD_ADDR_VAR 0 18
12651: PUSH
12652: LD_VAR 0 18
12656: PPUSH
12657: LD_VAR 0 13
12661: PUSH
12662: LD_VAR 0 18
12666: PUSH
12667: LD_VAR 0 13
12671: ARRAY
12672: PUSH
12673: LD_INT 1
12675: MINUS
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PPUSH
12681: LD_VAR 0 37
12685: PUSH
12686: LD_INT 1
12688: PPUSH
12689: LD_VAR 0 37
12693: PPUSH
12694: CALL_OW 12
12698: ARRAY
12699: PPUSH
12700: CALL 25708 0 3
12704: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12705: LD_VAR 0 18
12709: PUSH
12710: LD_VAR 0 13
12714: ARRAY
12715: PUSH
12716: LD_INT 1
12718: ARRAY
12719: PPUSH
12720: LD_VAR 0 18
12724: PUSH
12725: LD_VAR 0 13
12729: ARRAY
12730: PUSH
12731: LD_INT 2
12733: ARRAY
12734: PPUSH
12735: CALL_OW 120
// end ;
12739: GO 12555
12741: POP
12742: POP
// for i := 1 to personel do
12743: LD_ADDR_VAR 0 13
12747: PUSH
12748: DOUBLE
12749: LD_INT 1
12751: DEC
12752: ST_TO_ADDR
12753: LD_VAR 0 18
12757: PUSH
12758: FOR_TO
12759: IFFALSE 12800
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12761: LD_ADDR_VAR 0 20
12765: PUSH
12766: LD_VAR 0 20
12770: PUSH
12771: LD_VAR 0 18
12775: PUSH
12776: LD_VAR 0 13
12780: ARRAY
12781: PPUSH
12782: LD_INT 25
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PPUSH
12792: CALL_OW 72
12796: ADD
12797: ST_TO_ADDR
12798: GO 12758
12800: POP
12801: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12802: LD_VAR 0 20
12806: PUSH
12807: LD_VAR 0 4
12811: PPUSH
12812: LD_INT 22
12814: PUSH
12815: LD_VAR 0 1
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: LD_INT 21
12826: PUSH
12827: LD_INT 3
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 3
12836: PUSH
12837: LD_INT 24
12839: PUSH
12840: LD_INT 1000
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: LIST
12855: PPUSH
12856: CALL_OW 70
12860: AND
12861: IFFALSE 13137
// begin for i := 1 to personel do
12863: LD_ADDR_VAR 0 13
12867: PUSH
12868: DOUBLE
12869: LD_INT 1
12871: DEC
12872: ST_TO_ADDR
12873: LD_VAR 0 18
12877: PUSH
12878: FOR_TO
12879: IFFALSE 13133
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
12881: LD_VAR 0 18
12885: PUSH
12886: LD_VAR 0 13
12890: ARRAY
12891: PUSH
12892: LD_INT 1
12894: ARRAY
12895: PPUSH
12896: CALL_OW 257
12900: PUSH
12901: LD_INT 2
12903: EQUAL
12904: PUSH
12905: LD_VAR 0 18
12909: PUSH
12910: LD_VAR 0 13
12914: ARRAY
12915: PUSH
12916: LD_INT 3
12918: ARRAY
12919: PUSH
12920: LD_INT 1
12922: EQUAL
12923: AND
12924: IFFALSE 13131
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12926: LD_VAR 0 18
12930: PUSH
12931: LD_VAR 0 13
12935: ARRAY
12936: PUSH
12937: LD_INT 1
12939: ARRAY
12940: PPUSH
12941: CALL_OW 437
12945: IFFALSE 13001
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
12947: LD_VAR 0 18
12951: PUSH
12952: LD_VAR 0 13
12956: ARRAY
12957: PUSH
12958: LD_INT 1
12960: ARRAY
12961: PPUSH
12962: CALL_OW 437
12966: PUSH
12967: LD_INT 1
12969: ARRAY
12970: PUSH
12971: LD_INT 1
12973: ARRAY
12974: PUSH
12975: LD_STRING e
12977: EQUAL
12978: IFFALSE 13001
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12980: LD_VAR 0 18
12984: PUSH
12985: LD_VAR 0 13
12989: ARRAY
12990: PUSH
12991: LD_INT 1
12993: ARRAY
12994: PPUSH
12995: EMPTY
12996: PPUSH
12997: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13001: LD_VAR 0 18
13005: PUSH
13006: LD_VAR 0 13
13010: ARRAY
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PPUSH
13016: CALL_OW 310
13020: IFFALSE 13041
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13022: LD_VAR 0 18
13026: PUSH
13027: LD_VAR 0 13
13031: ARRAY
13032: PUSH
13033: LD_INT 1
13035: ARRAY
13036: PPUSH
13037: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13041: LD_ADDR_VAR 0 38
13045: PUSH
13046: LD_VAR 0 4
13050: PPUSH
13051: LD_INT 22
13053: PUSH
13054: LD_VAR 0 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 21
13065: PUSH
13066: LD_INT 3
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 3
13075: PUSH
13076: LD_INT 24
13078: PUSH
13079: LD_INT 1000
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: PPUSH
13095: CALL_OW 70
13099: PUSH
13100: FOR_IN
13101: IFFALSE 13129
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13103: LD_VAR 0 18
13107: PUSH
13108: LD_VAR 0 13
13112: ARRAY
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: LD_VAR 0 38
13122: PPUSH
13123: CALL_OW 190
13127: GO 13100
13129: POP
13130: POP
// end ;
13131: GO 12878
13133: POP
13134: POP
// end else
13135: GO 13399
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13137: LD_VAR 0 20
13141: PUSH
13142: LD_VAR 0 20
13146: PPUSH
13147: LD_INT 56
13149: PUSH
13150: EMPTY
13151: LIST
13152: PPUSH
13153: CALL_OW 72
13157: AND
13158: PUSH
13159: LD_VAR 0 33
13163: AND
13164: IFFALSE 13399
// for i := 1 to personel do
13166: LD_ADDR_VAR 0 13
13170: PUSH
13171: DOUBLE
13172: LD_INT 1
13174: DEC
13175: ST_TO_ADDR
13176: LD_VAR 0 18
13180: PUSH
13181: FOR_TO
13182: IFFALSE 13397
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13184: LD_VAR 0 18
13188: PUSH
13189: LD_VAR 0 13
13193: ARRAY
13194: PUSH
13195: LD_INT 1
13197: ARRAY
13198: PPUSH
13199: CALL_OW 257
13203: PUSH
13204: LD_INT 2
13206: EQUAL
13207: PUSH
13208: LD_VAR 0 18
13212: PUSH
13213: LD_VAR 0 13
13217: ARRAY
13218: PUSH
13219: LD_INT 3
13221: ARRAY
13222: PUSH
13223: LD_INT 1
13225: EQUAL
13226: AND
13227: IFFALSE 13395
// begin if not personel [ i ] [ 2 ] then
13229: LD_VAR 0 18
13233: PUSH
13234: LD_VAR 0 13
13238: ARRAY
13239: PUSH
13240: LD_INT 2
13242: ARRAY
13243: NOT
13244: IFFALSE 13361
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13246: LD_ADDR_VAR 0 18
13250: PUSH
13251: LD_VAR 0 18
13255: PPUSH
13256: LD_VAR 0 13
13260: PUSH
13261: LD_VAR 0 18
13265: PUSH
13266: LD_VAR 0 13
13270: ARRAY
13271: PUSH
13272: LD_INT 1
13274: MINUS
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: LD_VAR 0 4
13284: PPUSH
13285: LD_INT 22
13287: PUSH
13288: LD_VAR 0 1
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 21
13299: PUSH
13300: LD_INT 3
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 50
13309: PUSH
13310: EMPTY
13311: LIST
13312: PUSH
13313: LD_INT 2
13315: PUSH
13316: LD_INT 30
13318: PUSH
13319: LD_INT 0
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 30
13328: PUSH
13329: LD_INT 1
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 70
13351: PUSH
13352: LD_INT 1
13354: ARRAY
13355: PPUSH
13356: CALL 25708 0 3
13360: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13361: LD_VAR 0 18
13365: PUSH
13366: LD_VAR 0 13
13370: ARRAY
13371: PUSH
13372: LD_INT 1
13374: ARRAY
13375: PPUSH
13376: LD_VAR 0 18
13380: PUSH
13381: LD_VAR 0 13
13385: ARRAY
13386: PUSH
13387: LD_INT 2
13389: ARRAY
13390: PPUSH
13391: CALL_OW 120
// end ; end ;
13395: GO 13181
13397: POP
13398: POP
// for i := 1 to personel do
13399: LD_ADDR_VAR 0 13
13403: PUSH
13404: DOUBLE
13405: LD_INT 1
13407: DEC
13408: ST_TO_ADDR
13409: LD_VAR 0 18
13413: PUSH
13414: FOR_TO
13415: IFFALSE 13456
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13417: LD_ADDR_VAR 0 21
13421: PUSH
13422: LD_VAR 0 21
13426: PUSH
13427: LD_VAR 0 18
13431: PUSH
13432: LD_VAR 0 13
13436: ARRAY
13437: PPUSH
13438: LD_INT 25
13440: PUSH
13441: LD_INT 3
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 72
13452: ADD
13453: ST_TO_ADDR
13454: GO 13414
13456: POP
13457: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13458: LD_VAR 0 21
13462: PUSH
13463: LD_VAR 0 4
13467: PPUSH
13468: LD_INT 22
13470: PUSH
13471: LD_VAR 0 1
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 21
13482: PUSH
13483: LD_INT 2
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 3
13492: PUSH
13493: LD_INT 24
13495: PUSH
13496: LD_INT 1000
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: PPUSH
13512: CALL_OW 70
13516: AND
13517: IFFALSE 13951
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13519: LD_ADDR_VAR 0 39
13523: PUSH
13524: LD_VAR 0 4
13528: PPUSH
13529: LD_INT 22
13531: PUSH
13532: LD_VAR 0 1
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 21
13543: PUSH
13544: LD_INT 2
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 3
13553: PUSH
13554: LD_INT 24
13556: PUSH
13557: LD_INT 1000
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: PPUSH
13573: CALL_OW 70
13577: PUSH
13578: FOR_IN
13579: IFFALSE 13947
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13581: LD_VAR 0 39
13585: PPUSH
13586: LD_VAR 0 6
13590: PPUSH
13591: CALL_OW 299
13595: PUSH
13596: LD_INT 5
13598: LESS
13599: IFFALSE 13945
// begin for i := 1 to vehicles do
13601: LD_ADDR_VAR 0 13
13605: PUSH
13606: DOUBLE
13607: LD_INT 1
13609: DEC
13610: ST_TO_ADDR
13611: LD_VAR 0 24
13615: PUSH
13616: FOR_TO
13617: IFFALSE 13686
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13619: LD_VAR 0 24
13623: PUSH
13624: LD_VAR 0 13
13628: ARRAY
13629: PUSH
13630: LD_INT 1
13632: ARRAY
13633: PUSH
13634: LD_VAR 0 39
13638: EQUAL
13639: IFFALSE 13660
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13641: LD_VAR 0 24
13645: PUSH
13646: LD_VAR 0 13
13650: ARRAY
13651: PUSH
13652: LD_INT 2
13654: ARRAY
13655: PPUSH
13656: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13660: LD_VAR 0 24
13664: PUSH
13665: LD_VAR 0 13
13669: ARRAY
13670: PUSH
13671: LD_INT 2
13673: ARRAY
13674: PPUSH
13675: LD_VAR 0 39
13679: PPUSH
13680: CALL_OW 189
// end ;
13684: GO 13616
13686: POP
13687: POP
// for i := 1 to personel do
13688: LD_ADDR_VAR 0 13
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 18
13702: PUSH
13703: FOR_TO
13704: IFFALSE 13943
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13706: LD_VAR 0 18
13710: PUSH
13711: LD_VAR 0 13
13715: ARRAY
13716: PUSH
13717: LD_INT 1
13719: ARRAY
13720: PPUSH
13721: CALL_OW 257
13725: PUSH
13726: LD_INT 3
13728: EQUAL
13729: PUSH
13730: LD_VAR 0 18
13734: PUSH
13735: LD_VAR 0 13
13739: ARRAY
13740: PUSH
13741: LD_INT 3
13743: ARRAY
13744: PUSH
13745: LD_INT 1
13747: EQUAL
13748: AND
13749: IFFALSE 13941
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13751: LD_VAR 0 18
13755: PUSH
13756: LD_VAR 0 13
13760: ARRAY
13761: PUSH
13762: LD_INT 1
13764: ARRAY
13765: PPUSH
13766: CALL_OW 437
13770: IFFALSE 13826
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13772: LD_VAR 0 18
13776: PUSH
13777: LD_VAR 0 13
13781: ARRAY
13782: PUSH
13783: LD_INT 1
13785: ARRAY
13786: PPUSH
13787: CALL_OW 437
13791: PUSH
13792: LD_INT 1
13794: ARRAY
13795: PUSH
13796: LD_INT 1
13798: ARRAY
13799: PUSH
13800: LD_STRING e
13802: EQUAL
13803: IFFALSE 13826
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13805: LD_VAR 0 18
13809: PUSH
13810: LD_VAR 0 13
13814: ARRAY
13815: PUSH
13816: LD_INT 1
13818: ARRAY
13819: PPUSH
13820: EMPTY
13821: PPUSH
13822: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13826: LD_VAR 0 18
13830: PUSH
13831: LD_VAR 0 13
13835: ARRAY
13836: PUSH
13837: LD_INT 1
13839: ARRAY
13840: PPUSH
13841: CALL_OW 310
13845: IFFALSE 13866
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13847: LD_VAR 0 18
13851: PUSH
13852: LD_VAR 0 13
13856: ARRAY
13857: PUSH
13858: LD_INT 1
13860: ARRAY
13861: PPUSH
13862: CALL_OW 122
// if not IsInArea ( personel [ i ] [ 1 ] , baseArea ) then
13866: LD_VAR 0 18
13870: PUSH
13871: LD_VAR 0 13
13875: ARRAY
13876: PUSH
13877: LD_INT 1
13879: ARRAY
13880: PPUSH
13881: LD_VAR 0 4
13885: PPUSH
13886: CALL_OW 308
13890: NOT
13891: IFFALSE 13917
// ComMoveToArea ( personel [ i ] [ 1 ] , baseArea ) ;
13893: LD_VAR 0 18
13897: PUSH
13898: LD_VAR 0 13
13902: ARRAY
13903: PUSH
13904: LD_INT 1
13906: ARRAY
13907: PPUSH
13908: LD_VAR 0 4
13912: PPUSH
13913: CALL_OW 113
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
13917: LD_VAR 0 18
13921: PUSH
13922: LD_VAR 0 13
13926: ARRAY
13927: PUSH
13928: LD_INT 1
13930: ARRAY
13931: PPUSH
13932: LD_VAR 0 39
13936: PPUSH
13937: CALL_OW 189
// end ;
13941: GO 13703
13943: POP
13944: POP
// end ; end ;
13945: GO 13578
13947: POP
13948: POP
// end else
13949: GO 14156
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
13951: LD_VAR 0 21
13955: PUSH
13956: LD_VAR 0 21
13960: PPUSH
13961: LD_INT 56
13963: PUSH
13964: EMPTY
13965: LIST
13966: PPUSH
13967: CALL_OW 72
13971: AND
13972: PUSH
13973: LD_VAR 0 34
13977: AND
13978: IFFALSE 14156
// for i := 1 to personel do
13980: LD_ADDR_VAR 0 13
13984: PUSH
13985: DOUBLE
13986: LD_INT 1
13988: DEC
13989: ST_TO_ADDR
13990: LD_VAR 0 18
13994: PUSH
13995: FOR_TO
13996: IFFALSE 14154
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13998: LD_VAR 0 18
14002: PUSH
14003: LD_VAR 0 13
14007: ARRAY
14008: PUSH
14009: LD_INT 1
14011: ARRAY
14012: PPUSH
14013: CALL_OW 257
14017: PUSH
14018: LD_INT 3
14020: EQUAL
14021: PUSH
14022: LD_VAR 0 18
14026: PUSH
14027: LD_VAR 0 13
14031: ARRAY
14032: PUSH
14033: LD_INT 3
14035: ARRAY
14036: PUSH
14037: LD_INT 1
14039: EQUAL
14040: AND
14041: IFFALSE 14152
// begin if not personel [ i ] [ 2 ] then
14043: LD_VAR 0 18
14047: PUSH
14048: LD_VAR 0 13
14052: ARRAY
14053: PUSH
14054: LD_INT 2
14056: ARRAY
14057: NOT
14058: IFFALSE 14118
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
14060: LD_ADDR_VAR 0 18
14064: PUSH
14065: LD_VAR 0 18
14069: PPUSH
14070: LD_VAR 0 13
14074: PUSH
14075: LD_VAR 0 18
14079: PUSH
14080: LD_VAR 0 13
14084: ARRAY
14085: PUSH
14086: LD_INT 1
14088: MINUS
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PPUSH
14094: LD_VAR 0 34
14098: PUSH
14099: LD_INT 1
14101: PPUSH
14102: LD_VAR 0 34
14106: PPUSH
14107: CALL_OW 12
14111: ARRAY
14112: PPUSH
14113: CALL 25708 0 3
14117: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14118: LD_VAR 0 18
14122: PUSH
14123: LD_VAR 0 13
14127: ARRAY
14128: PUSH
14129: LD_INT 1
14131: ARRAY
14132: PPUSH
14133: LD_VAR 0 18
14137: PUSH
14138: LD_VAR 0 13
14142: ARRAY
14143: PUSH
14144: LD_INT 2
14146: ARRAY
14147: PPUSH
14148: CALL_OW 120
// end ;
14152: GO 13995
14154: POP
14155: POP
// for i := 1 to personel do
14156: LD_ADDR_VAR 0 13
14160: PUSH
14161: DOUBLE
14162: LD_INT 1
14164: DEC
14165: ST_TO_ADDR
14166: LD_VAR 0 18
14170: PUSH
14171: FOR_TO
14172: IFFALSE 14213
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14174: LD_ADDR_VAR 0 22
14178: PUSH
14179: LD_VAR 0 22
14183: PUSH
14184: LD_VAR 0 18
14188: PUSH
14189: LD_VAR 0 13
14193: ARRAY
14194: PPUSH
14195: LD_INT 25
14197: PUSH
14198: LD_INT 4
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PPUSH
14205: CALL_OW 72
14209: ADD
14210: ST_TO_ADDR
14211: GO 14171
14213: POP
14214: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14215: LD_VAR 0 22
14219: PUSH
14220: LD_VAR 0 4
14224: PPUSH
14225: LD_INT 22
14227: PUSH
14228: LD_VAR 0 1
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 21
14239: PUSH
14240: LD_INT 1
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 3
14249: PUSH
14250: LD_INT 24
14252: PUSH
14253: LD_INT 1000
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: PPUSH
14269: CALL_OW 70
14273: AND
14274: IFFALSE 14791
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14276: LD_ADDR_VAR 0 39
14280: PUSH
14281: LD_VAR 0 4
14285: PPUSH
14286: LD_INT 22
14288: PUSH
14289: LD_VAR 0 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 1
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 3
14310: PUSH
14311: LD_INT 24
14313: PUSH
14314: LD_INT 1000
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: PPUSH
14330: CALL_OW 70
14334: PUSH
14335: FOR_IN
14336: IFFALSE 14787
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14338: LD_VAR 0 39
14342: PPUSH
14343: LD_VAR 0 5
14347: PPUSH
14348: CALL_OW 299
14352: PUSH
14353: LD_INT 5
14355: LESS
14356: IFFALSE 14564
// for i := 1 to personel do
14358: LD_ADDR_VAR 0 13
14362: PUSH
14363: DOUBLE
14364: LD_INT 1
14366: DEC
14367: ST_TO_ADDR
14368: LD_VAR 0 18
14372: PUSH
14373: FOR_TO
14374: IFFALSE 14562
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14376: LD_VAR 0 18
14380: PUSH
14381: LD_VAR 0 13
14385: ARRAY
14386: PUSH
14387: LD_INT 1
14389: ARRAY
14390: PPUSH
14391: CALL_OW 257
14395: PUSH
14396: LD_INT 4
14398: EQUAL
14399: PUSH
14400: LD_VAR 0 18
14404: PUSH
14405: LD_VAR 0 13
14409: ARRAY
14410: PUSH
14411: LD_INT 3
14413: ARRAY
14414: PUSH
14415: LD_INT 1
14417: EQUAL
14418: AND
14419: IFFALSE 14560
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14421: LD_VAR 0 18
14425: PUSH
14426: LD_VAR 0 13
14430: ARRAY
14431: PUSH
14432: LD_INT 1
14434: ARRAY
14435: PPUSH
14436: CALL_OW 437
14440: IFFALSE 14496
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14442: LD_VAR 0 18
14446: PUSH
14447: LD_VAR 0 13
14451: ARRAY
14452: PUSH
14453: LD_INT 1
14455: ARRAY
14456: PPUSH
14457: CALL_OW 437
14461: PUSH
14462: LD_INT 1
14464: ARRAY
14465: PUSH
14466: LD_INT 1
14468: ARRAY
14469: PUSH
14470: LD_STRING e
14472: EQUAL
14473: IFFALSE 14496
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14475: LD_VAR 0 18
14479: PUSH
14480: LD_VAR 0 13
14484: ARRAY
14485: PUSH
14486: LD_INT 1
14488: ARRAY
14489: PPUSH
14490: EMPTY
14491: PPUSH
14492: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14496: LD_VAR 0 18
14500: PUSH
14501: LD_VAR 0 13
14505: ARRAY
14506: PUSH
14507: LD_INT 1
14509: ARRAY
14510: PPUSH
14511: CALL_OW 310
14515: IFFALSE 14536
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14517: LD_VAR 0 18
14521: PUSH
14522: LD_VAR 0 13
14526: ARRAY
14527: PUSH
14528: LD_INT 1
14530: ARRAY
14531: PPUSH
14532: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14536: LD_VAR 0 18
14540: PUSH
14541: LD_VAR 0 13
14545: ARRAY
14546: PUSH
14547: LD_INT 1
14549: ARRAY
14550: PPUSH
14551: LD_VAR 0 39
14555: PPUSH
14556: CALL_OW 188
// end ;
14560: GO 14373
14562: POP
14563: POP
// if GetLives ( damageUnit ) < 250 then
14564: LD_VAR 0 39
14568: PPUSH
14569: CALL_OW 256
14573: PUSH
14574: LD_INT 250
14576: LESS
14577: IFFALSE 14785
// for i := 1 to personel do
14579: LD_ADDR_VAR 0 13
14583: PUSH
14584: DOUBLE
14585: LD_INT 1
14587: DEC
14588: ST_TO_ADDR
14589: LD_VAR 0 18
14593: PUSH
14594: FOR_TO
14595: IFFALSE 14783
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14597: LD_VAR 0 18
14601: PUSH
14602: LD_VAR 0 13
14606: ARRAY
14607: PUSH
14608: LD_INT 1
14610: ARRAY
14611: PPUSH
14612: CALL_OW 257
14616: PUSH
14617: LD_INT 4
14619: EQUAL
14620: PUSH
14621: LD_VAR 0 18
14625: PUSH
14626: LD_VAR 0 13
14630: ARRAY
14631: PUSH
14632: LD_INT 3
14634: ARRAY
14635: PUSH
14636: LD_INT 1
14638: EQUAL
14639: AND
14640: IFFALSE 14781
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14642: LD_VAR 0 18
14646: PUSH
14647: LD_VAR 0 13
14651: ARRAY
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PPUSH
14657: CALL_OW 437
14661: IFFALSE 14717
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14663: LD_VAR 0 18
14667: PUSH
14668: LD_VAR 0 13
14672: ARRAY
14673: PUSH
14674: LD_INT 1
14676: ARRAY
14677: PPUSH
14678: CALL_OW 437
14682: PUSH
14683: LD_INT 1
14685: ARRAY
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PUSH
14691: LD_STRING e
14693: EQUAL
14694: IFFALSE 14717
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14696: LD_VAR 0 18
14700: PUSH
14701: LD_VAR 0 13
14705: ARRAY
14706: PUSH
14707: LD_INT 1
14709: ARRAY
14710: PPUSH
14711: EMPTY
14712: PPUSH
14713: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14717: LD_VAR 0 18
14721: PUSH
14722: LD_VAR 0 13
14726: ARRAY
14727: PUSH
14728: LD_INT 1
14730: ARRAY
14731: PPUSH
14732: CALL_OW 310
14736: IFFALSE 14757
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14738: LD_VAR 0 18
14742: PUSH
14743: LD_VAR 0 13
14747: ARRAY
14748: PUSH
14749: LD_INT 1
14751: ARRAY
14752: PPUSH
14753: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14757: LD_VAR 0 18
14761: PUSH
14762: LD_VAR 0 13
14766: ARRAY
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: PPUSH
14772: LD_VAR 0 39
14776: PPUSH
14777: CALL_OW 188
// end ;
14781: GO 14594
14783: POP
14784: POP
// end ;
14785: GO 14335
14787: POP
14788: POP
// end else
14789: GO 14996
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14791: LD_VAR 0 22
14795: PUSH
14796: LD_VAR 0 22
14800: PPUSH
14801: LD_INT 56
14803: PUSH
14804: EMPTY
14805: LIST
14806: PPUSH
14807: CALL_OW 72
14811: AND
14812: PUSH
14813: LD_VAR 0 35
14817: AND
14818: IFFALSE 14996
// for i := 1 to personel do
14820: LD_ADDR_VAR 0 13
14824: PUSH
14825: DOUBLE
14826: LD_INT 1
14828: DEC
14829: ST_TO_ADDR
14830: LD_VAR 0 18
14834: PUSH
14835: FOR_TO
14836: IFFALSE 14994
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14838: LD_VAR 0 18
14842: PUSH
14843: LD_VAR 0 13
14847: ARRAY
14848: PUSH
14849: LD_INT 1
14851: ARRAY
14852: PPUSH
14853: CALL_OW 257
14857: PUSH
14858: LD_INT 4
14860: EQUAL
14861: PUSH
14862: LD_VAR 0 18
14866: PUSH
14867: LD_VAR 0 13
14871: ARRAY
14872: PUSH
14873: LD_INT 3
14875: ARRAY
14876: PUSH
14877: LD_INT 1
14879: EQUAL
14880: AND
14881: IFFALSE 14992
// begin if not personel [ i ] [ 2 ] then
14883: LD_VAR 0 18
14887: PUSH
14888: LD_VAR 0 13
14892: ARRAY
14893: PUSH
14894: LD_INT 2
14896: ARRAY
14897: NOT
14898: IFFALSE 14958
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
14900: LD_ADDR_VAR 0 18
14904: PUSH
14905: LD_VAR 0 18
14909: PPUSH
14910: LD_VAR 0 13
14914: PUSH
14915: LD_VAR 0 18
14919: PUSH
14920: LD_VAR 0 13
14924: ARRAY
14925: PUSH
14926: LD_INT 1
14928: MINUS
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PPUSH
14934: LD_VAR 0 35
14938: PUSH
14939: LD_INT 1
14941: PPUSH
14942: LD_VAR 0 35
14946: PPUSH
14947: CALL_OW 12
14951: ARRAY
14952: PPUSH
14953: CALL 25708 0 3
14957: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14958: LD_VAR 0 18
14962: PUSH
14963: LD_VAR 0 13
14967: ARRAY
14968: PUSH
14969: LD_INT 1
14971: ARRAY
14972: PPUSH
14973: LD_VAR 0 18
14977: PUSH
14978: LD_VAR 0 13
14982: ARRAY
14983: PUSH
14984: LD_INT 2
14986: ARRAY
14987: PPUSH
14988: CALL_OW 120
// end ;
14992: GO 14835
14994: POP
14995: POP
// wait ( 0 0$01 ) ;
14996: LD_INT 35
14998: PPUSH
14999: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
15003: LD_VAR 0 24
15007: PUSH
15008: LD_VAR 0 8
15012: LESS
15013: PUSH
15014: LD_VAR 0 34
15018: AND
15019: IFFALSE 15265
// begin tmp = vehiclesAmount - vehicles ;
15021: LD_ADDR_VAR 0 15
15025: PUSH
15026: LD_VAR 0 8
15030: PUSH
15031: LD_VAR 0 24
15035: MINUS
15036: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
15037: LD_ADDR_VAR 0 31
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_VAR 0 2
15051: PPUSH
15052: CALL 9145 0 2
15056: ST_TO_ADDR
// for i := 1 to tmp do
15057: LD_ADDR_VAR 0 13
15061: PUSH
15062: DOUBLE
15063: LD_INT 1
15065: DEC
15066: ST_TO_ADDR
15067: LD_VAR 0 15
15071: PUSH
15072: FOR_TO
15073: IFFALSE 15261
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
15075: LD_ADDR_VAR 0 15
15079: PUSH
15080: LD_VAR 0 31
15084: PUSH
15085: LD_INT 1
15087: PPUSH
15088: LD_VAR 0 31
15092: PPUSH
15093: CALL_OW 12
15097: ARRAY
15098: ST_TO_ADDR
// if tmp then
15099: LD_VAR 0 15
15103: IFFALSE 15259
// begin if tmp in [ 34 , 14 , 71 ] then
15105: LD_VAR 0 15
15109: PUSH
15110: LD_INT 34
15112: PUSH
15113: LD_INT 14
15115: PUSH
15116: LD_INT 71
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: LIST
15123: IN
15124: IFFALSE 15162
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15126: LD_ADDR_VAR 0 32
15130: PUSH
15131: LD_INT 4
15133: PUSH
15134: EMPTY
15135: LIST
15136: PUSH
15137: LD_INT 14
15139: PUSH
15140: EMPTY
15141: LIST
15142: PUSH
15143: LD_INT 24
15145: PUSH
15146: EMPTY
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: PUSH
15154: LD_VAR 0 2
15158: ARRAY
15159: ST_TO_ADDR
15160: GO 15216
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15162: LD_ADDR_VAR 0 32
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 4
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 14
15183: PUSH
15184: EMPTY
15185: LIST
15186: PUSH
15187: LD_INT 21
15189: PUSH
15190: LD_INT 23
15192: PUSH
15193: LD_INT 24
15195: PUSH
15196: LD_INT 22
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: PUSH
15210: LD_VAR 0 2
15214: ARRAY
15215: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15216: LD_VAR 0 34
15220: PUSH
15221: LD_INT 1
15223: ARRAY
15224: PPUSH
15225: LD_VAR 0 32
15229: PUSH
15230: LD_INT 1
15232: PPUSH
15233: LD_VAR 0 32
15237: PPUSH
15238: CALL_OW 12
15242: ARRAY
15243: PPUSH
15244: LD_INT 1
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: LD_VAR 0 15
15254: PPUSH
15255: CALL_OW 185
// end ; end ;
15259: GO 15072
15261: POP
15262: POP
// end else
15263: GO 15278
// ComCancel ( factory [ 1 ] ) ;
15265: LD_VAR 0 34
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15278: LD_ADDR_VAR 0 23
15282: PUSH
15283: LD_VAR 0 4
15287: PPUSH
15288: LD_INT 22
15290: PUSH
15291: LD_VAR 0 1
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 21
15302: PUSH
15303: LD_INT 2
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 50
15312: PUSH
15313: EMPTY
15314: LIST
15315: PUSH
15316: LD_INT 3
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 31
15324: PUSH
15325: LD_INT 31
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 34
15334: PUSH
15335: LD_INT 12
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 34
15344: PUSH
15345: LD_INT 51
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 34
15354: PUSH
15355: LD_INT 32
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: PPUSH
15379: CALL_OW 70
15383: PUSH
15384: LD_EXP 52
15388: DIFF
15389: PUSH
15390: FOR_IN
15391: IFFALSE 15554
// begin vehicleInList = false ;
15393: LD_ADDR_VAR 0 25
15397: PUSH
15398: LD_INT 0
15400: ST_TO_ADDR
// for i := 1 to vehicles do
15401: LD_ADDR_VAR 0 13
15405: PUSH
15406: DOUBLE
15407: LD_INT 1
15409: DEC
15410: ST_TO_ADDR
15411: LD_VAR 0 24
15415: PUSH
15416: FOR_TO
15417: IFFALSE 15447
// begin if vehicle in vehicles [ i ] then
15419: LD_VAR 0 23
15423: PUSH
15424: LD_VAR 0 24
15428: PUSH
15429: LD_VAR 0 13
15433: ARRAY
15434: IN
15435: IFFALSE 15445
// vehicleInList = true ;
15437: LD_ADDR_VAR 0 25
15441: PUSH
15442: LD_INT 1
15444: ST_TO_ADDR
// end ;
15445: GO 15416
15447: POP
15448: POP
// if not vehicleInList then
15449: LD_VAR 0 25
15453: NOT
15454: IFFALSE 15552
// if vehicles < vehiclesToAttackAmount then
15456: LD_VAR 0 24
15460: PUSH
15461: LD_VAR 0 10
15465: LESS
15466: IFFALSE 15511
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15468: LD_ADDR_VAR 0 24
15472: PUSH
15473: LD_VAR 0 24
15477: PUSH
15478: LD_VAR 0 23
15482: PUSH
15483: LD_VAR 0 23
15487: PPUSH
15488: CALL_OW 313
15492: PUSH
15493: LD_INT 1
15495: ARRAY
15496: PUSH
15497: LD_INT 3
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: LIST
15504: PUSH
15505: EMPTY
15506: LIST
15507: ADD
15508: ST_TO_ADDR
15509: GO 15552
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15511: LD_ADDR_VAR 0 24
15515: PUSH
15516: LD_VAR 0 24
15520: PUSH
15521: LD_VAR 0 23
15525: PUSH
15526: LD_VAR 0 23
15530: PPUSH
15531: CALL_OW 313
15535: PUSH
15536: LD_INT 1
15538: ARRAY
15539: PUSH
15540: LD_INT 2
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: ADD
15551: ST_TO_ADDR
// end ;
15552: GO 15390
15554: POP
15555: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15556: LD_ADDR_VAR 0 41
15560: PUSH
15561: LD_INT 81
15563: PUSH
15564: LD_VAR 0 1
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PPUSH
15573: CALL_OW 69
15577: PUSH
15578: FOR_IN
15579: IFFALSE 16061
// begin offensiveUnits = [ ] ;
15581: LD_ADDR_VAR 0 27
15585: PUSH
15586: EMPTY
15587: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
15588: LD_ADDR_VAR 0 28
15592: PUSH
15593: LD_INT 0
15595: ST_TO_ADDR
// for i := 1 to vehicles do
15596: LD_ADDR_VAR 0 13
15600: PUSH
15601: DOUBLE
15602: LD_INT 1
15604: DEC
15605: ST_TO_ADDR
15606: LD_VAR 0 24
15610: PUSH
15611: FOR_TO
15612: IFFALSE 15793
// if vehicles [ i ] [ 3 ] = 3 then
15614: LD_VAR 0 24
15618: PUSH
15619: LD_VAR 0 13
15623: ARRAY
15624: PUSH
15625: LD_INT 3
15627: ARRAY
15628: PUSH
15629: LD_INT 3
15631: EQUAL
15632: IFFALSE 15791
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
15634: LD_VAR 0 24
15638: PUSH
15639: LD_VAR 0 13
15643: ARRAY
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 256
15653: PUSH
15654: LD_INT 650
15656: GREATER
15657: IFFALSE 15673
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
15659: LD_ADDR_VAR 0 28
15663: PUSH
15664: LD_VAR 0 28
15668: PUSH
15669: LD_INT 1
15671: PLUS
15672: ST_TO_ADDR
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15673: LD_ADDR_VAR 0 27
15677: PUSH
15678: LD_VAR 0 27
15682: PUSH
15683: LD_VAR 0 24
15687: PUSH
15688: LD_VAR 0 13
15692: ARRAY
15693: PUSH
15694: LD_INT 1
15696: ARRAY
15697: ADD
15698: ST_TO_ADDR
// for j = 1 to personel do
15699: LD_ADDR_VAR 0 14
15703: PUSH
15704: DOUBLE
15705: LD_INT 1
15707: DEC
15708: ST_TO_ADDR
15709: LD_VAR 0 18
15713: PUSH
15714: FOR_TO
15715: IFFALSE 15789
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15717: LD_VAR 0 18
15721: PUSH
15722: LD_VAR 0 14
15726: ARRAY
15727: PUSH
15728: LD_INT 1
15730: ARRAY
15731: PUSH
15732: LD_VAR 0 24
15736: PUSH
15737: LD_VAR 0 13
15741: ARRAY
15742: PUSH
15743: LD_INT 2
15745: ARRAY
15746: EQUAL
15747: IFFALSE 15787
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
15749: LD_ADDR_VAR 0 18
15753: PUSH
15754: LD_VAR 0 18
15758: PPUSH
15759: LD_VAR 0 14
15763: PUSH
15764: LD_VAR 0 18
15768: PUSH
15769: LD_VAR 0 14
15773: ARRAY
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PPUSH
15779: LD_INT 3
15781: PPUSH
15782: CALL 25708 0 3
15786: ST_TO_ADDR
15787: GO 15714
15789: POP
15790: POP
// end ;
15791: GO 15611
15793: POP
15794: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
15795: LD_VAR 0 10
15799: PUSH
15800: LD_VAR 0 28
15804: LESSEQUAL
15805: IFFALSE 16059
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , offensiveUnits [ 1 ] ) ;
15807: LD_ADDR_VAR 0 29
15811: PUSH
15812: LD_INT 81
15814: PUSH
15815: LD_INT 2
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 69
15826: PPUSH
15827: LD_VAR 0 27
15831: PUSH
15832: LD_INT 1
15834: ARRAY
15835: PPUSH
15836: CALL_OW 74
15840: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 2 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ 1 ] ) ;
15841: LD_ADDR_VAR 0 30
15845: PUSH
15846: LD_INT 81
15848: PUSH
15849: LD_INT 2
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 2
15858: PUSH
15859: LD_INT 59
15861: PUSH
15862: EMPTY
15863: LIST
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 1
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 21
15877: PUSH
15878: LD_INT 2
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: EMPTY
15896: LIST
15897: PPUSH
15898: CALL_OW 69
15902: PPUSH
15903: LD_VAR 0 27
15907: PUSH
15908: LD_INT 1
15910: ARRAY
15911: PPUSH
15912: CALL_OW 74
15916: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ 1 ] , target1 ) + 8 < GetDistUnits ( offensiveUnits [ 1 ] , target2 ) then
15917: LD_VAR 0 27
15921: PUSH
15922: LD_INT 1
15924: ARRAY
15925: PPUSH
15926: LD_VAR 0 29
15930: PPUSH
15931: CALL_OW 296
15935: PUSH
15936: LD_INT 8
15938: PLUS
15939: PUSH
15940: LD_VAR 0 27
15944: PUSH
15945: LD_INT 1
15947: ARRAY
15948: PPUSH
15949: LD_VAR 0 30
15953: PPUSH
15954: CALL_OW 296
15958: LESS
15959: IFFALSE 15995
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target1 ) else
15961: LD_VAR 0 27
15965: PPUSH
15966: LD_INT 3
15968: PUSH
15969: LD_INT 60
15971: PUSH
15972: EMPTY
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 72
15983: PPUSH
15984: LD_VAR 0 29
15988: PPUSH
15989: CALL_OW 115
15993: GO 16027
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target2 ) ;
15995: LD_VAR 0 27
15999: PPUSH
16000: LD_INT 3
16002: PUSH
16003: LD_INT 60
16005: PUSH
16006: EMPTY
16007: LIST
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PPUSH
16013: CALL_OW 72
16017: PPUSH
16018: LD_VAR 0 30
16022: PPUSH
16023: CALL_OW 115
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16027: LD_VAR 0 27
16031: PPUSH
16032: LD_INT 3
16034: PUSH
16035: LD_INT 60
16037: PUSH
16038: EMPTY
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PPUSH
16045: CALL_OW 72
16049: PPUSH
16050: LD_VAR 0 41
16054: PPUSH
16055: CALL_OW 175
// end ; end ;
16059: GO 15578
16061: POP
16062: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16063: LD_ADDR_VAR 0 41
16067: PUSH
16068: LD_VAR 0 7
16072: PPUSH
16073: LD_INT 81
16075: PUSH
16076: LD_VAR 0 1
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PPUSH
16085: CALL_OW 70
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16270
// begin defenceUnits = [ ] ;
16093: LD_ADDR_VAR 0 26
16097: PUSH
16098: EMPTY
16099: ST_TO_ADDR
// for i := 1 to personel do
16100: LD_ADDR_VAR 0 13
16104: PUSH
16105: DOUBLE
16106: LD_INT 1
16108: DEC
16109: ST_TO_ADDR
16110: LD_VAR 0 18
16114: PUSH
16115: FOR_TO
16116: IFFALSE 16166
// if personel [ i ] [ 3 ] = 2 then
16118: LD_VAR 0 18
16122: PUSH
16123: LD_VAR 0 13
16127: ARRAY
16128: PUSH
16129: LD_INT 3
16131: ARRAY
16132: PUSH
16133: LD_INT 2
16135: EQUAL
16136: IFFALSE 16164
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16138: LD_ADDR_VAR 0 26
16142: PUSH
16143: LD_VAR 0 26
16147: PUSH
16148: LD_VAR 0 18
16152: PUSH
16153: LD_VAR 0 13
16157: ARRAY
16158: PUSH
16159: LD_INT 1
16161: ARRAY
16162: ADD
16163: ST_TO_ADDR
16164: GO 16115
16166: POP
16167: POP
// for i := 1 to vehicles do
16168: LD_ADDR_VAR 0 13
16172: PUSH
16173: DOUBLE
16174: LD_INT 1
16176: DEC
16177: ST_TO_ADDR
16178: LD_VAR 0 24
16182: PUSH
16183: FOR_TO
16184: IFFALSE 16234
// if vehicles [ i ] [ 3 ] = 2 then
16186: LD_VAR 0 24
16190: PUSH
16191: LD_VAR 0 13
16195: ARRAY
16196: PUSH
16197: LD_INT 3
16199: ARRAY
16200: PUSH
16201: LD_INT 2
16203: EQUAL
16204: IFFALSE 16232
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16206: LD_ADDR_VAR 0 26
16210: PUSH
16211: LD_VAR 0 26
16215: PUSH
16216: LD_VAR 0 24
16220: PUSH
16221: LD_VAR 0 13
16225: ARRAY
16226: PUSH
16227: LD_INT 1
16229: ARRAY
16230: ADD
16231: ST_TO_ADDR
16232: GO 16183
16234: POP
16235: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16236: LD_VAR 0 26
16240: PPUSH
16241: LD_INT 3
16243: PUSH
16244: LD_INT 60
16246: PUSH
16247: EMPTY
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PPUSH
16254: CALL_OW 72
16258: PPUSH
16259: LD_VAR 0 41
16263: PPUSH
16264: CALL_OW 175
// end ;
16268: GO 16090
16270: POP
16271: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16272: LD_ADDR_VAR 0 42
16276: PUSH
16277: LD_INT 22
16279: PUSH
16280: LD_VAR 0 1
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: LD_INT 30
16294: PUSH
16295: LD_INT 31
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 30
16304: PUSH
16305: LD_INT 32
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 30
16314: PUSH
16315: LD_INT 33
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 30
16324: PUSH
16325: LD_INT 4
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 30
16334: PUSH
16335: LD_INT 5
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PPUSH
16354: CALL_OW 69
16358: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16359: LD_ADDR_VAR 0 43
16363: PUSH
16364: LD_INT 81
16366: PUSH
16367: LD_VAR 0 1
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 21
16378: PUSH
16379: LD_INT 3
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 58
16388: PUSH
16389: EMPTY
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: PPUSH
16397: CALL_OW 69
16401: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16402: LD_VAR 0 42
16406: PUSH
16407: LD_VAR 0 43
16411: AND
16412: IFFALSE 16482
// for i in attackBuildings do
16414: LD_ADDR_VAR 0 13
16418: PUSH
16419: LD_VAR 0 42
16423: PUSH
16424: FOR_IN
16425: IFFALSE 16480
// for j in enemyBuildings do
16427: LD_ADDR_VAR 0 14
16431: PUSH
16432: LD_VAR 0 43
16436: PUSH
16437: FOR_IN
16438: IFFALSE 16476
// if GetDistUnits ( i , j ) < 12 then
16440: LD_VAR 0 13
16444: PPUSH
16445: LD_VAR 0 14
16449: PPUSH
16450: CALL_OW 296
16454: PUSH
16455: LD_INT 12
16457: LESS
16458: IFFALSE 16474
// ComAttackUnit ( i , j ) ;
16460: LD_VAR 0 13
16464: PPUSH
16465: LD_VAR 0 14
16469: PPUSH
16470: CALL_OW 115
16474: GO 16437
16476: POP
16477: POP
16478: GO 16424
16480: POP
16481: POP
// until not personel or arabianCanExitMap ;
16482: LD_VAR 0 18
16486: NOT
16487: PUSH
16488: LD_EXP 21
16492: OR
16493: IFFALSE 11101
// end ;
16495: LD_VAR 0 12
16499: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16500: LD_EXP 52
16504: NOT
16505: IFFALSE 16539
16507: GO 16509
16509: DISABLE
// begin enable ;
16510: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16511: LD_EXP 36
16515: PPUSH
16516: LD_INT 42
16518: PPUSH
16519: CALL 2675 0 2
// arabLeftExit = true ;
16523: LD_ADDR_EXP 55
16527: PUSH
16528: LD_INT 1
16530: ST_TO_ADDR
// arabRightExit = false ;
16531: LD_ADDR_EXP 56
16535: PUSH
16536: LD_INT 0
16538: ST_TO_ADDR
// end ;
16539: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base ;
16540: LD_EXP 52
16544: PUSH
16545: LD_EXP 55
16549: AND
16550: IFFALSE 16745
16552: GO 16554
16554: DISABLE
16555: LD_INT 0
16557: PPUSH
16558: PPUSH
16559: PPUSH
// begin enable ;
16560: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16561: LD_EXP 52
16565: PPUSH
16566: LD_INT 71
16568: PPUSH
16569: LD_INT 137
16571: PPUSH
16572: CALL_OW 114
// for veh in arabianPatrolVehicles do
16576: LD_ADDR_VAR 0 1
16580: PUSH
16581: LD_EXP 52
16585: PUSH
16586: FOR_IN
16587: IFFALSE 16743
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16589: LD_VAR 0 1
16593: PPUSH
16594: LD_INT 43
16596: PPUSH
16597: CALL_OW 308
16601: IFFALSE 16741
// begin if arabianPatrolVehicles then
16603: LD_EXP 52
16607: IFFALSE 16636
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 313
16618: PUSH
16619: LD_INT 1
16621: ARRAY
16622: PPUSH
16623: CALL_OW 64
// RemoveUnit ( veh ) ;
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 64
// end ; x = 0 ;
16636: LD_ADDR_VAR 0 2
16640: PUSH
16641: LD_INT 0
16643: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16644: LD_ADDR_VAR 0 1
16648: PUSH
16649: LD_EXP 52
16653: PUSH
16654: FOR_IN
16655: IFFALSE 16685
// if not IsPlaced ( veh ) then
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 305
16666: NOT
16667: IFFALSE 16683
// x = x + 1 ;
16669: LD_ADDR_VAR 0 2
16673: PUSH
16674: LD_VAR 0 2
16678: PUSH
16679: LD_INT 1
16681: PLUS
16682: ST_TO_ADDR
16683: GO 16654
16685: POP
16686: POP
// if x = arabianPatrolVehicles then
16687: LD_VAR 0 2
16691: PUSH
16692: LD_EXP 52
16696: EQUAL
16697: IFFALSE 16741
// begin arabLeftExit = false ;
16699: LD_ADDR_EXP 55
16703: PUSH
16704: LD_INT 0
16706: ST_TO_ADDR
// arabRightExit = true ;
16707: LD_ADDR_EXP 56
16711: PUSH
16712: LD_INT 1
16714: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16715: LD_INT 4200
16717: PPUSH
16718: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16722: LD_ADDR_EXP 52
16726: PUSH
16727: EMPTY
16728: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16729: LD_EXP 36
16733: PPUSH
16734: LD_INT 43
16736: PPUSH
16737: CALL 2675 0 2
// end ; end ; end ;
16741: GO 16586
16743: POP
16744: POP
// end ;
16745: PPOPN 3
16747: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16748: LD_EXP 52
16752: PUSH
16753: LD_EXP 56
16757: AND
16758: IFFALSE 16953
16760: GO 16762
16762: DISABLE
16763: LD_INT 0
16765: PPUSH
16766: PPUSH
16767: PPUSH
// begin enable ;
16768: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16769: LD_EXP 52
16773: PPUSH
16774: LD_INT 184
16776: PPUSH
16777: LD_INT 134
16779: PPUSH
16780: CALL_OW 114
// for veh in arabianPatrolVehicles do
16784: LD_ADDR_VAR 0 1
16788: PUSH
16789: LD_EXP 52
16793: PUSH
16794: FOR_IN
16795: IFFALSE 16951
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16797: LD_VAR 0 1
16801: PPUSH
16802: LD_INT 42
16804: PPUSH
16805: CALL_OW 308
16809: IFFALSE 16949
// begin if arabianPatrolVehicles then
16811: LD_EXP 52
16815: IFFALSE 16844
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 313
16826: PUSH
16827: LD_INT 1
16829: ARRAY
16830: PPUSH
16831: CALL_OW 64
// RemoveUnit ( veh ) ;
16835: LD_VAR 0 1
16839: PPUSH
16840: CALL_OW 64
// end ; x = 0 ;
16844: LD_ADDR_VAR 0 2
16848: PUSH
16849: LD_INT 0
16851: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16852: LD_ADDR_VAR 0 1
16856: PUSH
16857: LD_EXP 52
16861: PUSH
16862: FOR_IN
16863: IFFALSE 16893
// if not IsPlaced ( veh ) then
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 305
16874: NOT
16875: IFFALSE 16891
// x = x + 1 ;
16877: LD_ADDR_VAR 0 2
16881: PUSH
16882: LD_VAR 0 2
16886: PUSH
16887: LD_INT 1
16889: PLUS
16890: ST_TO_ADDR
16891: GO 16862
16893: POP
16894: POP
// if x = arabianPatrolVehicles then
16895: LD_VAR 0 2
16899: PUSH
16900: LD_EXP 52
16904: EQUAL
16905: IFFALSE 16949
// begin arabLeftExit = true ;
16907: LD_ADDR_EXP 55
16911: PUSH
16912: LD_INT 1
16914: ST_TO_ADDR
// arabRightExit = false ;
16915: LD_ADDR_EXP 56
16919: PUSH
16920: LD_INT 0
16922: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16923: LD_INT 4200
16925: PPUSH
16926: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16930: LD_ADDR_EXP 52
16934: PUSH
16935: EMPTY
16936: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16937: LD_EXP 36
16941: PPUSH
16942: LD_INT 42
16944: PPUSH
16945: CALL 2675 0 2
// end ; end ; end ;
16949: GO 16794
16951: POP
16952: POP
// end ;
16953: PPOPN 3
16955: END
// every 6 6$0 trigger not arabianHovercrafts and not arabianCanExitMap do
16956: LD_EXP 53
16960: NOT
16961: PUSH
16962: LD_EXP 21
16966: NOT
16967: AND
16968: IFFALSE 16978
16970: GO 16972
16972: DISABLE
// begin enable ;
16973: ENABLE
// PrepareArabianHovercraft ;
16974: CALL 2834 0 0
// end ;
16978: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
16979: LD_EXP 53
16983: IFFALSE 17139
16985: GO 16987
16987: DISABLE
16988: LD_INT 0
16990: PPUSH
16991: PPUSH
// begin enable ;
16992: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
16993: LD_EXP 53
16997: PPUSH
16998: LD_INT 100
17000: PPUSH
17001: CALL_OW 240
// for i := 1 to arabianHovercraftsPath do
17005: LD_ADDR_VAR 0 1
17009: PUSH
17010: DOUBLE
17011: LD_INT 1
17013: DEC
17014: ST_TO_ADDR
17015: LD_EXP 38
17019: PUSH
17020: FOR_TO
17021: IFFALSE 17064
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
17023: LD_EXP 53
17027: PPUSH
17028: LD_EXP 38
17032: PUSH
17033: LD_VAR 0 1
17037: ARRAY
17038: PUSH
17039: LD_INT 1
17041: ARRAY
17042: PPUSH
17043: LD_EXP 38
17047: PUSH
17048: LD_VAR 0 1
17052: ARRAY
17053: PUSH
17054: LD_INT 2
17056: ARRAY
17057: PPUSH
17058: CALL_OW 174
17062: GO 17020
17064: POP
17065: POP
// x = arabianHovercraftsPath ;
17066: LD_ADDR_VAR 0 2
17070: PUSH
17071: LD_EXP 38
17075: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
17076: LD_EXP 53
17080: PPUSH
17081: LD_EXP 38
17085: PUSH
17086: LD_VAR 0 2
17090: ARRAY
17091: PUSH
17092: LD_INT 1
17094: ARRAY
17095: PPUSH
17096: LD_EXP 38
17100: PUSH
17101: LD_VAR 0 2
17105: ARRAY
17106: PUSH
17107: LD_INT 2
17109: ARRAY
17110: PPUSH
17111: CALL_OW 174
// x = x - 1 ;
17115: LD_ADDR_VAR 0 2
17119: PUSH
17120: LD_VAR 0 2
17124: PUSH
17125: LD_INT 1
17127: MINUS
17128: ST_TO_ADDR
// until x = 0 ;
17129: LD_VAR 0 2
17133: PUSH
17134: LD_INT 0
17136: EQUAL
17137: IFFALSE 17076
// end ;
17139: PPOPN 2
17141: END
// every 0 0$1 trigger arabianPatrolTroops do
17142: LD_EXP 54
17146: IFFALSE 17212
17148: GO 17150
17150: DISABLE
// begin enable ;
17151: ENABLE
// AddComAgressiveMove ( arabianPatrolTroops , 127 , 100 ) ;
17152: LD_EXP 54
17156: PPUSH
17157: LD_INT 127
17159: PPUSH
17160: LD_INT 100
17162: PPUSH
17163: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 141 , 133 ) ;
17167: LD_EXP 54
17171: PPUSH
17172: LD_INT 141
17174: PPUSH
17175: LD_INT 133
17177: PPUSH
17178: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 80 , 132 ) ;
17182: LD_EXP 54
17186: PPUSH
17187: LD_INT 80
17189: PPUSH
17190: LD_INT 132
17192: PPUSH
17193: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 174 , 122 ) ;
17197: LD_EXP 54
17201: PPUSH
17202: LD_INT 174
17204: PPUSH
17205: LD_INT 122
17207: PPUSH
17208: CALL_OW 174
// end ; end_of_file
17212: END
// export function Lose_Burlak ; begin
17213: LD_INT 0
17215: PPUSH
// YouLost ( Burlak ) ;
17216: LD_STRING Burlak
17218: PPUSH
17219: CALL_OW 104
// end ;
17223: LD_VAR 0 1
17227: RET
// export function Lose_Survive ; begin
17228: LD_INT 0
17230: PPUSH
// YouLost ( Survive ) ;
17231: LD_STRING Survive
17233: PPUSH
17234: CALL_OW 104
// end ;
17238: LD_VAR 0 1
17242: RET
// export function Lose_Surrender ; begin
17243: LD_INT 0
17245: PPUSH
// YouLost ( Surrender ) ;
17246: LD_STRING Surrender
17248: PPUSH
17249: CALL_OW 104
// end ; end_of_file
17253: LD_VAR 0 1
17257: RET
// every 0 0$5 do
17258: GO 17260
17260: DISABLE
// begin enable ;
17261: ENABLE
// if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
17262: LD_EXP 24
17266: NOT
17267: PUSH
17268: LD_INT 22
17270: PPUSH
17271: LD_INT 22
17273: PUSH
17274: LD_INT 3
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 21
17283: PUSH
17284: LD_INT 2
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 50
17293: PUSH
17294: EMPTY
17295: LIST
17296: PUSH
17297: LD_INT 59
17299: PUSH
17300: EMPTY
17301: LIST
17302: PUSH
17303: LD_INT 2
17305: PUSH
17306: LD_INT 31
17308: PUSH
17309: LD_INT 22
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 31
17318: PUSH
17319: LD_INT 24
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 31
17328: PUSH
17329: LD_INT 14
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 70
17353: AND
17354: PUSH
17355: LD_INT 22
17357: PPUSH
17358: LD_INT 22
17360: PUSH
17361: LD_INT 3
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 21
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 23
17380: PUSH
17381: LD_INT 3
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 50
17390: PUSH
17391: EMPTY
17392: LIST
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 70
17404: AND
17405: IFFALSE 17414
// Query ( QVehicles ) ;
17407: LD_STRING QVehicles
17409: PPUSH
17410: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17414: LD_EXP 39
17418: PPUSH
17419: CALL_OW 310
17423: PPUSH
17424: LD_INT 22
17426: PPUSH
17427: CALL_OW 308
17431: PUSH
17432: LD_EXP 24
17436: NOT
17437: AND
17438: PUSH
17439: LD_INT 22
17441: PPUSH
17442: LD_INT 22
17444: PUSH
17445: LD_INT 3
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 21
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 59
17464: PUSH
17465: EMPTY
17466: LIST
17467: PUSH
17468: LD_INT 50
17470: PUSH
17471: EMPTY
17472: LIST
17473: PUSH
17474: LD_INT 2
17476: PUSH
17477: LD_INT 31
17479: PUSH
17480: LD_INT 22
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 31
17489: PUSH
17490: LD_INT 24
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 31
17499: PUSH
17500: LD_INT 14
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: PPUSH
17520: CALL_OW 70
17524: PUSH
17525: LD_INT 22
17527: PUSH
17528: LD_INT 3
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 21
17537: PUSH
17538: LD_INT 1
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 23
17547: PUSH
17548: LD_INT 3
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 2
17557: PUSH
17558: LD_INT 25
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 25
17570: PUSH
17571: LD_INT 2
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 25
17580: PUSH
17581: LD_INT 3
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 25
17590: PUSH
17591: LD_INT 4
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PPUSH
17611: CALL_OW 69
17615: GREATEREQUAL
17616: AND
17617: IFFALSE 17623
// FinishMission ;
17619: CALL 17944 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17623: LD_EXP 39
17627: PPUSH
17628: CALL_OW 310
17632: PPUSH
17633: LD_INT 22
17635: PPUSH
17636: CALL_OW 308
17640: PUSH
17641: LD_EXP 24
17645: NOT
17646: AND
17647: PUSH
17648: LD_INT 22
17650: PPUSH
17651: LD_INT 22
17653: PUSH
17654: LD_INT 3
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 21
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 59
17673: PUSH
17674: EMPTY
17675: LIST
17676: PUSH
17677: LD_INT 50
17679: PUSH
17680: EMPTY
17681: LIST
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: LD_INT 31
17688: PUSH
17689: LD_INT 22
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 31
17698: PUSH
17699: LD_INT 24
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 31
17708: PUSH
17709: LD_INT 14
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: PPUSH
17729: CALL_OW 70
17733: PUSH
17734: LD_INT 6
17736: GREATEREQUAL
17737: AND
17738: PUSH
17739: LD_INT 22
17741: PPUSH
17742: LD_INT 22
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 21
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 59
17764: PUSH
17765: EMPTY
17766: LIST
17767: PUSH
17768: LD_INT 50
17770: PUSH
17771: EMPTY
17772: LIST
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: LD_INT 31
17779: PUSH
17780: LD_INT 22
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 31
17789: PUSH
17790: LD_INT 24
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 31
17799: PUSH
17800: LD_INT 14
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: PPUSH
17820: CALL_OW 70
17824: PUSH
17825: LD_INT 22
17827: PUSH
17828: LD_INT 3
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 21
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 23
17847: PUSH
17848: LD_INT 3
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 2
17857: PUSH
17858: LD_INT 25
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 25
17870: PUSH
17871: LD_INT 2
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 25
17880: PUSH
17881: LD_INT 3
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 25
17890: PUSH
17891: LD_INT 4
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: PPUSH
17911: CALL_OW 69
17915: LESS
17916: AND
17917: IFFALSE 17943
// begin case Query ( QEndMission ) of 1 :
17919: LD_STRING QEndMission
17921: PPUSH
17922: CALL_OW 97
17926: PUSH
17927: LD_INT 1
17929: DOUBLE
17930: EQUAL
17931: IFTRUE 17935
17933: GO 17942
17935: POP
// FinishMission ; end ;
17936: CALL 17944 0 0
17940: GO 17943
17942: POP
// end ; end ;
17943: END
// function FinishMission ; var nearUnit ; begin
17944: LD_INT 0
17946: PPUSH
17947: PPUSH
// finishMissionBool = true ;
17948: LD_ADDR_EXP 24
17952: PUSH
17953: LD_INT 1
17955: ST_TO_ADDR
// if stevensDepot then
17956: LD_EXP 17
17960: IFFALSE 18129
// begin DialogueOn ;
17962: CALL_OW 6
// if IsOK ( Petrosyan ) then
17966: LD_EXP 43
17970: PPUSH
17971: CALL_OW 302
17975: IFFALSE 17991
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
17977: LD_EXP 43
17981: PPUSH
17982: LD_STRING DStevensLeftBehind-Pty-1
17984: PPUSH
17985: CALL_OW 88
17989: GO 18105
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
17991: LD_INT 22
17993: PUSH
17994: LD_INT 3
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 21
18003: PUSH
18004: LD_INT 1
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 26
18013: PUSH
18014: LD_INT 1
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 50
18023: PUSH
18024: EMPTY
18025: LIST
18026: PUSH
18027: LD_INT 2
18029: PUSH
18030: LD_INT 25
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 25
18042: PUSH
18043: LD_INT 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 25
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 25
18062: PUSH
18063: LD_INT 4
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: PPUSH
18084: CALL_OW 69
18088: PPUSH
18089: LD_STRING StevensLeftBehind-RSol1-1
18091: PPUSH
18092: LD_STRING 
18094: PPUSH
18095: LD_INT 0
18097: PPUSH
18098: LD_INT 1
18100: PPUSH
18101: CALL 8772 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
18105: LD_EXP 39
18109: PPUSH
18110: LD_STRING DStevensLeftBehind-Bur-1
18112: PPUSH
18113: CALL_OW 88
// DialogueOff ;
18117: CALL_OW 7
// stevensStatus = 1 ;
18121: LD_ADDR_EXP 2
18125: PUSH
18126: LD_INT 1
18128: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
18129: LD_EXP 14
18133: NOT
18134: PUSH
18135: LD_EXP 43
18139: PPUSH
18140: CALL_OW 302
18144: AND
18145: IFFALSE 18677
// begin PrepareStevens ( exit_rus ) ;
18147: LD_INT 22
18149: PPUSH
18150: CALL 20710 0 1
// wait ( 0 0$1.5 ) ;
18154: LD_INT 52
18156: PPUSH
18157: CALL_OW 67
// stevensPlaced = true ;
18161: LD_ADDR_EXP 14
18165: PUSH
18166: LD_INT 1
18168: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
18169: LD_ADDR_VAR 0 2
18173: PUSH
18174: LD_INT 22
18176: PUSH
18177: LD_INT 3
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 21
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 26
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 50
18206: PUSH
18207: EMPTY
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: LD_INT 25
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 25
18225: PUSH
18226: LD_INT 2
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 25
18235: PUSH
18236: LD_INT 3
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 25
18245: PUSH
18246: LD_INT 4
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: PPUSH
18267: CALL_OW 69
18271: PPUSH
18272: LD_EXP 57
18276: PPUSH
18277: CALL_OW 74
18281: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
18282: LD_EXP 57
18286: PPUSH
18287: CALL_OW 87
// InGameOn ;
18291: CALL_OW 8
// wait ( 0 0$1.5 ) ;
18295: LD_INT 52
18297: PPUSH
18298: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18302: LD_EXP 57
18306: PPUSH
18307: LD_INT 6
18309: PPUSH
18310: CALL_OW 235
// DialogueOn ;
18314: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18318: LD_EXP 57
18322: PPUSH
18323: LD_STRING DStevens-Huck-1
18325: PPUSH
18326: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18330: LD_EXP 43
18334: PPUSH
18335: LD_STRING DStevens-Pty-1
18337: PPUSH
18338: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18342: LD_EXP 43
18346: PPUSH
18347: LD_STRING DStevens-Pty-1a
18349: PPUSH
18350: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18354: LD_EXP 57
18358: PPUSH
18359: LD_STRING DStevens-Huck-2
18361: PPUSH
18362: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18366: LD_EXP 43
18370: PPUSH
18371: LD_STRING DStevens-Pty-2
18373: PPUSH
18374: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18378: LD_EXP 57
18382: PPUSH
18383: LD_STRING DStevens-Huck-3
18385: PPUSH
18386: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18390: LD_EXP 43
18394: PPUSH
18395: LD_STRING DStevens-Pty-3
18397: PPUSH
18398: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18402: LD_EXP 57
18406: PPUSH
18407: LD_STRING DStevens-Huck-4
18409: PPUSH
18410: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18414: LD_EXP 43
18418: PPUSH
18419: LD_STRING DStevensBurlak-Pty-1
18421: PPUSH
18422: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18426: LD_EXP 39
18430: PPUSH
18431: LD_STRING DStevensBurlak-Bur-1
18433: PPUSH
18434: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18438: LD_EXP 43
18442: PPUSH
18443: LD_STRING DStevensBurlak-Pty-2
18445: PPUSH
18446: CALL_OW 88
// case Query ( QKill ) of 1 :
18450: LD_STRING QKill
18452: PPUSH
18453: CALL_OW 97
18457: PUSH
18458: LD_INT 1
18460: DOUBLE
18461: EQUAL
18462: IFTRUE 18466
18464: GO 18593
18466: POP
// begin stevensCanExitMap = true ;
18467: LD_ADDR_EXP 19
18471: PUSH
18472: LD_INT 1
18474: ST_TO_ADDR
// stevensFollow = false ;
18475: LD_ADDR_EXP 15
18479: PUSH
18480: LD_INT 0
18482: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18483: LD_EXP 39
18487: PPUSH
18488: LD_STRING DKill-1-Bur-1
18490: PPUSH
18491: CALL_OW 88
// if IsOK ( Gleb ) then
18495: LD_EXP 42
18499: PPUSH
18500: CALL_OW 302
18504: IFFALSE 18518
// Say ( Gleb , DKill-1-Glb-1 ) ;
18506: LD_EXP 42
18510: PPUSH
18511: LD_STRING DKill-1-Glb-1
18513: PPUSH
18514: CALL_OW 88
// DialogueOff ;
18518: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18522: LD_EXP 57
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 235
// stevensStatus = 0 ;
18534: LD_ADDR_EXP 2
18538: PUSH
18539: LD_INT 0
18541: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18542: LD_INT 22
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PPUSH
18552: CALL_OW 69
18556: PPUSH
18557: LD_EXP 57
18561: PPUSH
18562: CALL_OW 115
// wait ( 0 0$1 ) ;
18566: LD_INT 35
18568: PPUSH
18569: CALL_OW 67
// until IsDead ( Stevens ) ;
18573: LD_EXP 57
18577: PPUSH
18578: CALL_OW 301
18582: IFFALSE 18542
// wait ( 0 0$1.5 ) ;
18584: LD_INT 52
18586: PPUSH
18587: CALL_OW 67
// end ; 2 :
18591: GO 18677
18593: LD_INT 2
18595: DOUBLE
18596: EQUAL
18597: IFTRUE 18601
18599: GO 18676
18601: POP
// begin stevensCanExitMap = true ;
18602: LD_ADDR_EXP 19
18606: PUSH
18607: LD_INT 1
18609: ST_TO_ADDR
// stevensWasInDepot = false ;
18610: LD_ADDR_EXP 18
18614: PUSH
18615: LD_INT 0
18617: ST_TO_ADDR
// stevensDepot = false ;
18618: LD_ADDR_EXP 17
18622: PUSH
18623: LD_INT 0
18625: ST_TO_ADDR
// stevensStatus = 1 ;
18626: LD_ADDR_EXP 2
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18634: LD_EXP 39
18638: PPUSH
18639: LD_STRING DKill-2-Bur-1
18641: PPUSH
18642: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18646: LD_EXP 43
18650: PPUSH
18651: LD_STRING DKill-2-Pty-1
18653: PPUSH
18654: CALL_OW 88
// DialogueOff ;
18658: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18662: LD_EXP 57
18666: PPUSH
18667: LD_INT 37
18669: PPUSH
18670: CALL_OW 113
// end ; end ;
18674: GO 18677
18676: POP
// end ; SetRewards ;
18677: CALL 18698 0 0
// SavePlayerCharacters ;
18681: CALL 18939 0 0
// SaveGlobalVariables ;
18685: CALL 19284 0 0
// YouWin ;
18689: CALL_OW 103
// end ;
18693: LD_VAR 0 1
18697: RET
// function SetRewards ; begin
18698: LD_INT 0
18700: PPUSH
// if fastBreakthrough then
18701: LD_EXP 23
18705: IFFALSE 18719
// AddMedal ( Time , 1 ) else
18707: LD_STRING Time
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 101
18717: GO 18730
// AddMedal ( Time , - 1 ) ;
18719: LD_STRING Time
18721: PPUSH
18722: LD_INT 1
18724: NEG
18725: PPUSH
18726: CALL_OW 101
// if dial_tameApeBlocker then
18730: LD_EXP 10
18734: IFFALSE 18748
// AddMedal ( Apemen , 1 ) else
18736: LD_STRING Apemen
18738: PPUSH
18739: LD_INT 1
18741: PPUSH
18742: CALL_OW 101
18746: GO 18795
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18748: LD_EXP 10
18752: NOT
18753: PUSH
18754: LD_INT 1
18756: PPUSH
18757: LD_INT 3
18759: PPUSH
18760: CALL_OW 321
18764: PUSH
18765: LD_INT 1
18767: EQUAL
18768: AND
18769: IFFALSE 18784
// AddMedal ( Apemen , - 1 ) else
18771: LD_STRING Apemen
18773: PPUSH
18774: LD_INT 1
18776: NEG
18777: PPUSH
18778: CALL_OW 101
18782: GO 18795
// AddMedal ( Apemen , - 2 ) ;
18784: LD_STRING Apemen
18786: PPUSH
18787: LD_INT 2
18789: NEG
18790: PPUSH
18791: CALL_OW 101
// if not omarStatus then
18795: LD_EXP 1
18799: NOT
18800: IFFALSE 18814
// AddMedal ( Abdul , 1 ) else
18802: LD_STRING Abdul
18804: PPUSH
18805: LD_INT 1
18807: PPUSH
18808: CALL_OW 101
18812: GO 18825
// AddMedal ( Abdul , - 1 ) ;
18814: LD_STRING Abdul
18816: PPUSH
18817: LD_INT 1
18819: NEG
18820: PPUSH
18821: CALL_OW 101
// GiveMedals ( Main ) ;
18825: LD_STRING Main
18827: PPUSH
18828: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18832: LD_INT 22
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 21
18844: PUSH
18845: LD_INT 1
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 23
18854: PUSH
18855: LD_INT 3
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 50
18864: PUSH
18865: EMPTY
18866: LIST
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: LD_INT 25
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 25
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 25
18893: PUSH
18894: LD_INT 3
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 25
18903: PUSH
18904: LD_INT 4
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: PPUSH
18925: CALL_OW 69
18929: PPUSH
18930: CALL_OW 43
// end ;
18934: LD_VAR 0 1
18938: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
18939: LD_INT 0
18941: PPUSH
18942: PPUSH
18943: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
18944: LD_EXP 39
18948: PPUSH
18949: LD_STRING Burlak
18951: PPUSH
18952: LD_INT 3
18954: PPUSH
18955: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
18959: LD_EXP 40
18963: PPUSH
18964: CALL_OW 310
18968: PPUSH
18969: LD_INT 22
18971: PPUSH
18972: CALL_OW 308
18976: IFFALSE 18993
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
18978: LD_EXP 40
18982: PPUSH
18983: LD_STRING Karamazov
18985: PPUSH
18986: LD_INT 3
18988: PPUSH
18989: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
18993: LD_EXP 41
18997: PPUSH
18998: CALL_OW 310
19002: PPUSH
19003: LD_INT 22
19005: PPUSH
19006: CALL_OW 308
19010: IFFALSE 19027
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
19012: LD_EXP 41
19016: PPUSH
19017: LD_STRING Petrovova
19019: PPUSH
19020: LD_INT 3
19022: PPUSH
19023: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
19027: LD_EXP 42
19031: PPUSH
19032: CALL_OW 310
19036: PPUSH
19037: LD_INT 22
19039: PPUSH
19040: CALL_OW 308
19044: IFFALSE 19061
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
19046: LD_EXP 42
19050: PPUSH
19051: LD_STRING Gleb
19053: PPUSH
19054: LD_INT 3
19056: PPUSH
19057: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
19061: LD_EXP 43
19065: PPUSH
19066: CALL_OW 310
19070: PPUSH
19071: LD_INT 22
19073: PPUSH
19074: CALL_OW 308
19078: IFFALSE 19095
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
19080: LD_EXP 43
19084: PPUSH
19085: LD_STRING Petrosyan
19087: PPUSH
19088: LD_INT 3
19090: PPUSH
19091: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
19095: LD_EXP 45
19099: PPUSH
19100: CALL_OW 310
19104: PPUSH
19105: LD_INT 22
19107: PPUSH
19108: CALL_OW 308
19112: IFFALSE 19129
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
19114: LD_EXP 45
19118: PPUSH
19119: LD_STRING Dolgov
19121: PPUSH
19122: LD_INT 3
19124: PPUSH
19125: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
19129: LD_EXP 46
19133: PPUSH
19134: CALL_OW 310
19138: PPUSH
19139: LD_INT 22
19141: PPUSH
19142: CALL_OW 308
19146: IFFALSE 19163
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
19148: LD_EXP 46
19152: PPUSH
19153: LD_STRING Lipshchin
19155: PPUSH
19156: LD_INT 3
19158: PPUSH
19159: CALL 8573 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
19163: LD_EXP 44
19167: PPUSH
19168: CALL_OW 310
19172: PPUSH
19173: LD_INT 22
19175: PPUSH
19176: CALL_OW 308
19180: IFFALSE 19197
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
19182: LD_EXP 44
19186: PPUSH
19187: LD_STRING Titov
19189: PPUSH
19190: LD_INT 3
19192: PPUSH
19193: CALL 8573 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
19197: LD_INT 22
19199: PPUSH
19200: LD_INT 22
19202: PUSH
19203: LD_INT 3
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 21
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 25
19225: PUSH
19226: LD_INT 12
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 25
19235: PUSH
19236: LD_INT 16
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 25
19245: PUSH
19246: LD_INT 15
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 70
19268: PPUSH
19269: LD_STRING other_apemans
19271: PPUSH
19272: LD_INT 3
19274: PPUSH
19275: CALL 8629 0 3
// end ;
19279: LD_VAR 0 1
19283: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
19284: LD_INT 0
19286: PPUSH
19287: PPUSH
19288: PPUSH
19289: PPUSH
19290: PPUSH
// resources = [ ] ;
19291: LD_ADDR_VAR 0 3
19295: PUSH
19296: EMPTY
19297: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19298: LD_ADDR_EXP 5
19302: PUSH
19303: EMPTY
19304: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19305: LD_EXP 2
19309: PPUSH
19310: LD_STRING 05_StevensStatus_1
19312: PPUSH
19313: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19317: LD_EXP 1
19321: PPUSH
19322: LD_STRING 05_OmarStatus_2
19324: PPUSH
19325: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) do
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_INT 22
19336: PPUSH
19337: LD_INT 22
19339: PUSH
19340: LD_INT 3
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 59
19349: PUSH
19350: EMPTY
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: LD_INT 34
19358: PUSH
19359: LD_INT 51
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 34
19368: PUSH
19369: LD_INT 32
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: LIST
19385: PPUSH
19386: CALL_OW 70
19390: PUSH
19391: FOR_IN
19392: IFFALSE 19420
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19394: LD_ADDR_VAR 0 3
19398: PUSH
19399: LD_VAR 0 3
19403: PUSH
19404: LD_VAR 0 2
19408: PPUSH
19409: CALL 9759 0 1
19413: PUSH
19414: EMPTY
19415: LIST
19416: ADD
19417: ST_TO_ADDR
19418: GO 19391
19420: POP
19421: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19422: LD_VAR 0 3
19426: PPUSH
19427: LD_STRING 05_ResourcesInCargo_3
19429: PPUSH
19430: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19434: LD_ADDR_VAR 0 2
19438: PUSH
19439: LD_INT 22
19441: PPUSH
19442: LD_INT 22
19444: PUSH
19445: LD_INT 3
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 21
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 59
19464: PUSH
19465: EMPTY
19466: LIST
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 70
19477: PUSH
19478: FOR_IN
19479: IFFALSE 19739
// begin driver = UnitsInside ( i ) [ 1 ] ;
19481: LD_ADDR_VAR 0 4
19485: PUSH
19486: LD_VAR 0 2
19490: PPUSH
19491: CALL_OW 313
19495: PUSH
19496: LD_INT 1
19498: ARRAY
19499: ST_TO_ADDR
// if driver = Burlak then
19500: LD_VAR 0 4
19504: PUSH
19505: LD_EXP 39
19509: EQUAL
19510: IFFALSE 19520
// driverShortName = Bur ;
19512: LD_ADDR_VAR 0 5
19516: PUSH
19517: LD_STRING Bur
19519: ST_TO_ADDR
// if driver = Karamazov then
19520: LD_VAR 0 4
19524: PUSH
19525: LD_EXP 40
19529: EQUAL
19530: IFFALSE 19540
// driverShortName = Kar ;
19532: LD_ADDR_VAR 0 5
19536: PUSH
19537: LD_STRING Kar
19539: ST_TO_ADDR
// if driver = Petrovova then
19540: LD_VAR 0 4
19544: PUSH
19545: LD_EXP 41
19549: EQUAL
19550: IFFALSE 19560
// driverShortName = Ptr ;
19552: LD_ADDR_VAR 0 5
19556: PUSH
19557: LD_STRING Ptr
19559: ST_TO_ADDR
// if driver = Gleb then
19560: LD_VAR 0 4
19564: PUSH
19565: LD_EXP 42
19569: EQUAL
19570: IFFALSE 19580
// driverShortName = Glb ;
19572: LD_ADDR_VAR 0 5
19576: PUSH
19577: LD_STRING Glb
19579: ST_TO_ADDR
// if driver = Petrosyan then
19580: LD_VAR 0 4
19584: PUSH
19585: LD_EXP 43
19589: EQUAL
19590: IFFALSE 19600
// driverShortName = Pet ;
19592: LD_ADDR_VAR 0 5
19596: PUSH
19597: LD_STRING Pet
19599: ST_TO_ADDR
// if driver = Dolgov then
19600: LD_VAR 0 4
19604: PUSH
19605: LD_EXP 45
19609: EQUAL
19610: IFFALSE 19620
// driverShortName = Dol ;
19612: LD_ADDR_VAR 0 5
19616: PUSH
19617: LD_STRING Dol
19619: ST_TO_ADDR
// if driver = Lipshchin then
19620: LD_VAR 0 4
19624: PUSH
19625: LD_EXP 46
19629: EQUAL
19630: IFFALSE 19640
// driverShortName = Lip ;
19632: LD_ADDR_VAR 0 5
19636: PUSH
19637: LD_STRING Lip
19639: ST_TO_ADDR
// if driver = Titov then
19640: LD_VAR 0 4
19644: PUSH
19645: LD_EXP 44
19649: EQUAL
19650: IFFALSE 19660
// driverShortName = Tit ;
19652: LD_ADDR_VAR 0 5
19656: PUSH
19657: LD_STRING Tit
19659: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19660: LD_ADDR_EXP 5
19664: PUSH
19665: LD_EXP 5
19669: PUSH
19670: LD_VAR 0 2
19674: PPUSH
19675: CALL_OW 248
19679: PUSH
19680: LD_VAR 0 2
19684: PPUSH
19685: CALL_OW 265
19689: PUSH
19690: LD_VAR 0 2
19694: PPUSH
19695: CALL_OW 262
19699: PUSH
19700: LD_VAR 0 2
19704: PPUSH
19705: CALL_OW 263
19709: PUSH
19710: LD_VAR 0 2
19714: PPUSH
19715: CALL_OW 264
19719: PUSH
19720: LD_VAR 0 5
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: PUSH
19733: EMPTY
19734: LIST
19735: ADD
19736: ST_TO_ADDR
// end ;
19737: GO 19478
19739: POP
19740: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19741: LD_EXP 5
19745: PPUSH
19746: LD_STRING 05_Tanks_4
19748: PPUSH
19749: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19753: LD_INT 22
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 23
19765: PUSH
19766: LD_INT 3
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 21
19775: PUSH
19776: LD_INT 3
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 30
19788: PUSH
19789: LD_INT 6
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 30
19798: PUSH
19799: LD_INT 7
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: NOT
19822: IFFALSE 19832
// labDestroyed = 1 ;
19824: LD_ADDR_EXP 3
19828: PUSH
19829: LD_INT 1
19831: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
19832: LD_EXP 3
19836: PPUSH
19837: LD_STRING 05_LabDestroyed_5
19839: PPUSH
19840: CALL_OW 39
// end ; end_of_file
19844: LD_VAR 0 1
19848: RET
// export function Nef_PrepareNature ; var i , un ; begin
19849: LD_INT 0
19851: PPUSH
19852: PPUSH
19853: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
19854: LD_ADDR_VAR 0 2
19858: PUSH
19859: DOUBLE
19860: LD_INT 1
19862: DEC
19863: ST_TO_ADDR
19864: LD_EXP 27
19868: PUSH
19869: LD_INT 1
19871: ARRAY
19872: PUSH
19873: FOR_TO
19874: IFFALSE 19984
// begin uc_side = 0 ;
19876: LD_ADDR_OWVAR 20
19880: PUSH
19881: LD_INT 0
19883: ST_TO_ADDR
// uc_nation = nation_nature ;
19884: LD_ADDR_OWVAR 21
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// hc_class = class_apeman ;
19892: LD_ADDR_OWVAR 28
19896: PUSH
19897: LD_INT 12
19899: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19900: LD_ADDR_OWVAR 31
19904: PUSH
19905: LD_EXP 28
19909: PUSH
19910: LD_INT 1
19912: ARRAY
19913: PUSH
19914: LD_EXP 28
19918: PUSH
19919: LD_INT 2
19921: ARRAY
19922: PUSH
19923: LD_EXP 28
19927: PUSH
19928: LD_INT 3
19930: ARRAY
19931: PUSH
19932: LD_EXP 28
19936: PUSH
19937: LD_INT 4
19939: ARRAY
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19947: LD_ADDR_OWVAR 35
19951: PUSH
19952: LD_EXP 29
19956: ST_TO_ADDR
// un = CreateHuman ;
19957: LD_ADDR_VAR 0 3
19961: PUSH
19962: CALL_OW 44
19966: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19967: LD_VAR 0 3
19971: PPUSH
19972: LD_INT 33
19974: PPUSH
19975: LD_INT 0
19977: PPUSH
19978: CALL_OW 49
// end ;
19982: GO 19873
19984: POP
19985: POP
// for i := 1 to animalsAmount [ 2 ] do
19986: LD_ADDR_VAR 0 2
19990: PUSH
19991: DOUBLE
19992: LD_INT 1
19994: DEC
19995: ST_TO_ADDR
19996: LD_EXP 27
20000: PUSH
20001: LD_INT 2
20003: ARRAY
20004: PUSH
20005: FOR_TO
20006: IFFALSE 20116
// begin uc_side = 0 ;
20008: LD_ADDR_OWVAR 20
20012: PUSH
20013: LD_INT 0
20015: ST_TO_ADDR
// uc_nation = nation_nature ;
20016: LD_ADDR_OWVAR 21
20020: PUSH
20021: LD_INT 0
20023: ST_TO_ADDR
// hc_class = class_phororhacos ;
20024: LD_ADDR_OWVAR 28
20028: PUSH
20029: LD_INT 18
20031: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20032: LD_ADDR_OWVAR 31
20036: PUSH
20037: LD_EXP 28
20041: PUSH
20042: LD_INT 1
20044: ARRAY
20045: PUSH
20046: LD_EXP 28
20050: PUSH
20051: LD_INT 2
20053: ARRAY
20054: PUSH
20055: LD_EXP 28
20059: PUSH
20060: LD_INT 3
20062: ARRAY
20063: PUSH
20064: LD_EXP 28
20068: PUSH
20069: LD_INT 4
20071: ARRAY
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20079: LD_ADDR_OWVAR 35
20083: PUSH
20084: LD_EXP 29
20088: ST_TO_ADDR
// un = CreateHuman ;
20089: LD_ADDR_VAR 0 3
20093: PUSH
20094: CALL_OW 44
20098: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20099: LD_VAR 0 3
20103: PPUSH
20104: LD_INT 33
20106: PPUSH
20107: LD_INT 0
20109: PPUSH
20110: CALL_OW 49
// end ;
20114: GO 20005
20116: POP
20117: POP
// for i := 1 to animalsAmount [ 3 ] do
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: DOUBLE
20124: LD_INT 1
20126: DEC
20127: ST_TO_ADDR
20128: LD_EXP 27
20132: PUSH
20133: LD_INT 3
20135: ARRAY
20136: PUSH
20137: FOR_TO
20138: IFFALSE 20248
// begin uc_side = 0 ;
20140: LD_ADDR_OWVAR 20
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// uc_nation = nation_nature ;
20148: LD_ADDR_OWVAR 21
20152: PUSH
20153: LD_INT 0
20155: ST_TO_ADDR
// hc_class = class_tiger ;
20156: LD_ADDR_OWVAR 28
20160: PUSH
20161: LD_INT 14
20163: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20164: LD_ADDR_OWVAR 31
20168: PUSH
20169: LD_EXP 28
20173: PUSH
20174: LD_INT 1
20176: ARRAY
20177: PUSH
20178: LD_EXP 28
20182: PUSH
20183: LD_INT 2
20185: ARRAY
20186: PUSH
20187: LD_EXP 28
20191: PUSH
20192: LD_INT 3
20194: ARRAY
20195: PUSH
20196: LD_EXP 28
20200: PUSH
20201: LD_INT 4
20203: ARRAY
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20211: LD_ADDR_OWVAR 35
20215: PUSH
20216: LD_EXP 29
20220: ST_TO_ADDR
// un = CreateHuman ;
20221: LD_ADDR_VAR 0 3
20225: PUSH
20226: CALL_OW 44
20230: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20231: LD_VAR 0 3
20235: PPUSH
20236: LD_INT 33
20238: PPUSH
20239: LD_INT 0
20241: PPUSH
20242: CALL_OW 49
// end ;
20246: GO 20137
20248: POP
20249: POP
// for i := 1 to animalsAmount [ 4 ] do
20250: LD_ADDR_VAR 0 2
20254: PUSH
20255: DOUBLE
20256: LD_INT 1
20258: DEC
20259: ST_TO_ADDR
20260: LD_EXP 27
20264: PUSH
20265: LD_INT 4
20267: ARRAY
20268: PUSH
20269: FOR_TO
20270: IFFALSE 20380
// begin uc_side = 0 ;
20272: LD_ADDR_OWVAR 20
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// uc_nation = nation_nature ;
20280: LD_ADDR_OWVAR 21
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// hc_class = 21 ;
20288: LD_ADDR_OWVAR 28
20292: PUSH
20293: LD_INT 21
20295: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20296: LD_ADDR_OWVAR 31
20300: PUSH
20301: LD_EXP 28
20305: PUSH
20306: LD_INT 1
20308: ARRAY
20309: PUSH
20310: LD_EXP 28
20314: PUSH
20315: LD_INT 2
20317: ARRAY
20318: PUSH
20319: LD_EXP 28
20323: PUSH
20324: LD_INT 3
20326: ARRAY
20327: PUSH
20328: LD_EXP 28
20332: PUSH
20333: LD_INT 4
20335: ARRAY
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20343: LD_ADDR_OWVAR 35
20347: PUSH
20348: LD_EXP 29
20352: ST_TO_ADDR
// un = CreateHuman ;
20353: LD_ADDR_VAR 0 3
20357: PUSH
20358: CALL_OW 44
20362: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20363: LD_VAR 0 3
20367: PPUSH
20368: LD_INT 33
20370: PPUSH
20371: LD_INT 0
20373: PPUSH
20374: CALL_OW 49
// end ;
20378: GO 20269
20380: POP
20381: POP
// for i := 1 to animalsAmount [ 5 ] do
20382: LD_ADDR_VAR 0 2
20386: PUSH
20387: DOUBLE
20388: LD_INT 1
20390: DEC
20391: ST_TO_ADDR
20392: LD_EXP 27
20396: PUSH
20397: LD_INT 5
20399: ARRAY
20400: PUSH
20401: FOR_TO
20402: IFFALSE 20463
// begin uc_side = 0 ;
20404: LD_ADDR_OWVAR 20
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// uc_nation = nation_nature ;
20412: LD_ADDR_OWVAR 21
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// vc_chassis := 31 ;
20420: LD_ADDR_OWVAR 37
20424: PUSH
20425: LD_INT 31
20427: ST_TO_ADDR
// vc_control := control_rider ;
20428: LD_ADDR_OWVAR 38
20432: PUSH
20433: LD_INT 4
20435: ST_TO_ADDR
// un := CreateVehicle ;
20436: LD_ADDR_VAR 0 3
20440: PUSH
20441: CALL_OW 45
20445: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20446: LD_VAR 0 3
20450: PPUSH
20451: LD_INT 33
20453: PPUSH
20454: LD_INT 0
20456: PPUSH
20457: CALL_OW 49
// end ;
20461: GO 20401
20463: POP
20464: POP
// end ; end_of_file
20465: LD_VAR 0 1
20469: RET
// every 0 0$1 do
20470: GO 20472
20472: DISABLE
// begin enable ;
20473: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20474: LD_ADDR_OWVAR 47
20478: PUSH
20479: LD_STRING #Am01-1
20481: PUSH
20482: LD_EXP 7
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20491: LD_ADDR_EXP 7
20495: PUSH
20496: LD_EXP 7
20500: PUSH
20501: LD_INT 35
20503: PLUS
20504: ST_TO_ADDR
// end ; end_of_file
20505: END
// every 0 0$01 do var timer ;
20506: GO 20508
20508: DISABLE
20509: LD_INT 0
20511: PPUSH
// begin timer := 0 0$30 ;
20512: LD_ADDR_VAR 0 1
20516: PUSH
20517: LD_INT 1050
20519: ST_TO_ADDR
// repeat wait ( timer ) ;
20520: LD_VAR 0 1
20524: PPUSH
20525: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20529: LD_EXP 22
20533: PUSH
20534: LD_INT 6
20536: GREATEREQUAL
20537: PUSH
20538: LD_EXP 22
20542: PUSH
20543: LD_INT 12
20545: LESS
20546: AND
20547: IFFALSE 20563
// timer := timer + 0 0$3 ;
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: LD_VAR 0 1
20558: PUSH
20559: LD_INT 105
20561: PLUS
20562: ST_TO_ADDR
// if cratesSpawned >= 12 then
20563: LD_EXP 22
20567: PUSH
20568: LD_INT 12
20570: GREATEREQUAL
20571: IFFALSE 20587
// timer := timer + 0 0$9 ;
20573: LD_ADDR_VAR 0 1
20577: PUSH
20578: LD_VAR 0 1
20582: PUSH
20583: LD_INT 315
20585: PLUS
20586: ST_TO_ADDR
// if timer > 3 3$00 then
20587: LD_VAR 0 1
20591: PUSH
20592: LD_INT 6300
20594: GREATER
20595: IFFALSE 20605
// timer := 0 0$50 ;
20597: LD_ADDR_VAR 0 1
20601: PUSH
20602: LD_INT 1750
20604: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20605: LD_INT 3
20607: PPUSH
20608: LD_INT 5
20610: PPUSH
20611: CALL_OW 12
20615: PPUSH
20616: LD_INT 46
20618: PPUSH
20619: LD_INT 1
20621: PPUSH
20622: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20626: LD_ADDR_EXP 22
20630: PUSH
20631: LD_EXP 22
20635: PUSH
20636: LD_INT 1
20638: PLUS
20639: ST_TO_ADDR
// until false ;
20640: LD_INT 0
20642: IFFALSE 20520
// end ;
20644: PPOPN 1
20646: END
// every 0 0$5 do
20647: GO 20649
20649: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20650: LD_INT 5
20652: PPUSH
20653: LD_INT 48
20655: PPUSH
20656: LD_INT 1
20658: PPUSH
20659: CALL_OW 55
// wait ( 0 0$40 ) ;
20663: LD_INT 1400
20665: PPUSH
20666: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20670: LD_INT 5
20672: PPUSH
20673: LD_INT 48
20675: PPUSH
20676: LD_INT 1
20678: PPUSH
20679: CALL_OW 55
// end ;
20683: END
// every 10 10$0 do
20684: GO 20686
20686: DISABLE
// begin enable ;
20687: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20688: LD_INT 3
20690: PPUSH
20691: LD_INT 5
20693: PPUSH
20694: CALL_OW 12
20698: PPUSH
20699: LD_INT 48
20701: PPUSH
20702: LD_INT 1
20704: PPUSH
20705: CALL_OW 55
// end ; end_of_file
20709: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20710: LD_INT 0
20712: PPUSH
// uc_side = 1 ;
20713: LD_ADDR_OWVAR 20
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20721: LD_ADDR_EXP 57
20725: PUSH
20726: LD_STRING Stevens
20728: PPUSH
20729: LD_INT 0
20731: PPUSH
20732: LD_INT 0
20734: PPUSH
20735: CALL 8455 0 3
20739: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20740: LD_EXP 57
20744: PPUSH
20745: LD_VAR 0 1
20749: PPUSH
20750: LD_INT 1
20752: PPUSH
20753: CALL_OW 49
// end ; end_of_file
20757: LD_VAR 0 2
20761: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
// if exist_mode then
20766: LD_VAR 0 2
20770: IFFALSE 20795
// unit := CreateCharacter ( prefix & ident ) else
20772: LD_ADDR_VAR 0 5
20776: PUSH
20777: LD_VAR 0 3
20781: PUSH
20782: LD_VAR 0 1
20786: STR
20787: PPUSH
20788: CALL_OW 34
20792: ST_TO_ADDR
20793: GO 20810
// unit := NewCharacter ( ident ) ;
20795: LD_ADDR_VAR 0 5
20799: PUSH
20800: LD_VAR 0 1
20804: PPUSH
20805: CALL_OW 25
20809: ST_TO_ADDR
// result := unit ;
20810: LD_ADDR_VAR 0 4
20814: PUSH
20815: LD_VAR 0 5
20819: ST_TO_ADDR
// end ;
20820: LD_VAR 0 4
20824: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20825: LD_INT 0
20827: PPUSH
20828: PPUSH
// if not side or not nation then
20829: LD_VAR 0 1
20833: NOT
20834: PUSH
20835: LD_VAR 0 2
20839: NOT
20840: OR
20841: IFFALSE 20845
// exit ;
20843: GO 21609
// case nation of nation_american :
20845: LD_VAR 0 2
20849: PUSH
20850: LD_INT 1
20852: DOUBLE
20853: EQUAL
20854: IFTRUE 20858
20856: GO 21072
20858: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20859: LD_ADDR_VAR 0 4
20863: PUSH
20864: LD_INT 35
20866: PUSH
20867: LD_INT 45
20869: PUSH
20870: LD_INT 46
20872: PUSH
20873: LD_INT 47
20875: PUSH
20876: LD_INT 82
20878: PUSH
20879: LD_INT 83
20881: PUSH
20882: LD_INT 84
20884: PUSH
20885: LD_INT 85
20887: PUSH
20888: LD_INT 86
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: LD_INT 6
20899: PUSH
20900: LD_INT 15
20902: PUSH
20903: LD_INT 16
20905: PUSH
20906: LD_INT 7
20908: PUSH
20909: LD_INT 12
20911: PUSH
20912: LD_INT 13
20914: PUSH
20915: LD_INT 10
20917: PUSH
20918: LD_INT 14
20920: PUSH
20921: LD_INT 20
20923: PUSH
20924: LD_INT 21
20926: PUSH
20927: LD_INT 22
20929: PUSH
20930: LD_INT 25
20932: PUSH
20933: LD_INT 32
20935: PUSH
20936: LD_INT 27
20938: PUSH
20939: LD_INT 36
20941: PUSH
20942: LD_INT 69
20944: PUSH
20945: LD_INT 39
20947: PUSH
20948: LD_INT 34
20950: PUSH
20951: LD_INT 40
20953: PUSH
20954: LD_INT 48
20956: PUSH
20957: LD_INT 49
20959: PUSH
20960: LD_INT 50
20962: PUSH
20963: LD_INT 51
20965: PUSH
20966: LD_INT 52
20968: PUSH
20969: LD_INT 53
20971: PUSH
20972: LD_INT 54
20974: PUSH
20975: LD_INT 55
20977: PUSH
20978: LD_INT 56
20980: PUSH
20981: LD_INT 57
20983: PUSH
20984: LD_INT 58
20986: PUSH
20987: LD_INT 59
20989: PUSH
20990: LD_INT 60
20992: PUSH
20993: LD_INT 61
20995: PUSH
20996: LD_INT 62
20998: PUSH
20999: LD_INT 80
21001: PUSH
21002: LD_INT 82
21004: PUSH
21005: LD_INT 83
21007: PUSH
21008: LD_INT 84
21010: PUSH
21011: LD_INT 85
21013: PUSH
21014: LD_INT 86
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: ST_TO_ADDR
21070: GO 21533
21072: LD_INT 2
21074: DOUBLE
21075: EQUAL
21076: IFTRUE 21080
21078: GO 21302
21080: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21081: LD_ADDR_VAR 0 4
21085: PUSH
21086: LD_INT 35
21088: PUSH
21089: LD_INT 45
21091: PUSH
21092: LD_INT 46
21094: PUSH
21095: LD_INT 47
21097: PUSH
21098: LD_INT 82
21100: PUSH
21101: LD_INT 83
21103: PUSH
21104: LD_INT 84
21106: PUSH
21107: LD_INT 85
21109: PUSH
21110: LD_INT 87
21112: PUSH
21113: LD_INT 70
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 11
21121: PUSH
21122: LD_INT 3
21124: PUSH
21125: LD_INT 4
21127: PUSH
21128: LD_INT 5
21130: PUSH
21131: LD_INT 6
21133: PUSH
21134: LD_INT 15
21136: PUSH
21137: LD_INT 18
21139: PUSH
21140: LD_INT 7
21142: PUSH
21143: LD_INT 17
21145: PUSH
21146: LD_INT 8
21148: PUSH
21149: LD_INT 20
21151: PUSH
21152: LD_INT 21
21154: PUSH
21155: LD_INT 22
21157: PUSH
21158: LD_INT 72
21160: PUSH
21161: LD_INT 26
21163: PUSH
21164: LD_INT 69
21166: PUSH
21167: LD_INT 39
21169: PUSH
21170: LD_INT 40
21172: PUSH
21173: LD_INT 41
21175: PUSH
21176: LD_INT 42
21178: PUSH
21179: LD_INT 43
21181: PUSH
21182: LD_INT 48
21184: PUSH
21185: LD_INT 49
21187: PUSH
21188: LD_INT 50
21190: PUSH
21191: LD_INT 51
21193: PUSH
21194: LD_INT 52
21196: PUSH
21197: LD_INT 53
21199: PUSH
21200: LD_INT 54
21202: PUSH
21203: LD_INT 55
21205: PUSH
21206: LD_INT 56
21208: PUSH
21209: LD_INT 60
21211: PUSH
21212: LD_INT 61
21214: PUSH
21215: LD_INT 62
21217: PUSH
21218: LD_INT 66
21220: PUSH
21221: LD_INT 67
21223: PUSH
21224: LD_INT 68
21226: PUSH
21227: LD_INT 81
21229: PUSH
21230: LD_INT 82
21232: PUSH
21233: LD_INT 83
21235: PUSH
21236: LD_INT 84
21238: PUSH
21239: LD_INT 85
21241: PUSH
21242: LD_INT 87
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: ST_TO_ADDR
21300: GO 21533
21302: LD_INT 3
21304: DOUBLE
21305: EQUAL
21306: IFTRUE 21310
21308: GO 21532
21310: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21311: LD_ADDR_VAR 0 4
21315: PUSH
21316: LD_INT 46
21318: PUSH
21319: LD_INT 47
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 82
21330: PUSH
21331: LD_INT 83
21333: PUSH
21334: LD_INT 84
21336: PUSH
21337: LD_INT 85
21339: PUSH
21340: LD_INT 86
21342: PUSH
21343: LD_INT 11
21345: PUSH
21346: LD_INT 9
21348: PUSH
21349: LD_INT 20
21351: PUSH
21352: LD_INT 19
21354: PUSH
21355: LD_INT 21
21357: PUSH
21358: LD_INT 24
21360: PUSH
21361: LD_INT 22
21363: PUSH
21364: LD_INT 25
21366: PUSH
21367: LD_INT 28
21369: PUSH
21370: LD_INT 29
21372: PUSH
21373: LD_INT 30
21375: PUSH
21376: LD_INT 31
21378: PUSH
21379: LD_INT 37
21381: PUSH
21382: LD_INT 38
21384: PUSH
21385: LD_INT 32
21387: PUSH
21388: LD_INT 27
21390: PUSH
21391: LD_INT 33
21393: PUSH
21394: LD_INT 69
21396: PUSH
21397: LD_INT 39
21399: PUSH
21400: LD_INT 34
21402: PUSH
21403: LD_INT 40
21405: PUSH
21406: LD_INT 71
21408: PUSH
21409: LD_INT 23
21411: PUSH
21412: LD_INT 44
21414: PUSH
21415: LD_INT 48
21417: PUSH
21418: LD_INT 49
21420: PUSH
21421: LD_INT 50
21423: PUSH
21424: LD_INT 51
21426: PUSH
21427: LD_INT 52
21429: PUSH
21430: LD_INT 53
21432: PUSH
21433: LD_INT 54
21435: PUSH
21436: LD_INT 55
21438: PUSH
21439: LD_INT 56
21441: PUSH
21442: LD_INT 57
21444: PUSH
21445: LD_INT 58
21447: PUSH
21448: LD_INT 59
21450: PUSH
21451: LD_INT 63
21453: PUSH
21454: LD_INT 64
21456: PUSH
21457: LD_INT 65
21459: PUSH
21460: LD_INT 82
21462: PUSH
21463: LD_INT 83
21465: PUSH
21466: LD_INT 84
21468: PUSH
21469: LD_INT 85
21471: PUSH
21472: LD_INT 86
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: ST_TO_ADDR
21530: GO 21533
21532: POP
// if state > - 1 and state < 3 then
21533: LD_VAR 0 3
21537: PUSH
21538: LD_INT 1
21540: NEG
21541: GREATER
21542: PUSH
21543: LD_VAR 0 3
21547: PUSH
21548: LD_INT 3
21550: LESS
21551: AND
21552: IFFALSE 21609
// for i in result do
21554: LD_ADDR_VAR 0 5
21558: PUSH
21559: LD_VAR 0 4
21563: PUSH
21564: FOR_IN
21565: IFFALSE 21607
// if GetTech ( i , side ) <> state then
21567: LD_VAR 0 5
21571: PPUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL_OW 321
21581: PUSH
21582: LD_VAR 0 3
21586: NONEQUAL
21587: IFFALSE 21605
// result := result diff i ;
21589: LD_ADDR_VAR 0 4
21593: PUSH
21594: LD_VAR 0 4
21598: PUSH
21599: LD_VAR 0 5
21603: DIFF
21604: ST_TO_ADDR
21605: GO 21564
21607: POP
21608: POP
// end ;
21609: LD_VAR 0 4
21613: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21614: LD_INT 0
21616: PPUSH
21617: PPUSH
21618: PPUSH
// result := true ;
21619: LD_ADDR_VAR 0 3
21623: PUSH
21624: LD_INT 1
21626: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21627: LD_ADDR_VAR 0 5
21631: PUSH
21632: LD_VAR 0 2
21636: PPUSH
21637: CALL_OW 480
21641: ST_TO_ADDR
// if not tmp then
21642: LD_VAR 0 5
21646: NOT
21647: IFFALSE 21651
// exit ;
21649: GO 21700
// for i in tmp do
21651: LD_ADDR_VAR 0 4
21655: PUSH
21656: LD_VAR 0 5
21660: PUSH
21661: FOR_IN
21662: IFFALSE 21698
// if GetTech ( i , side ) <> state_researched then
21664: LD_VAR 0 4
21668: PPUSH
21669: LD_VAR 0 1
21673: PPUSH
21674: CALL_OW 321
21678: PUSH
21679: LD_INT 2
21681: NONEQUAL
21682: IFFALSE 21696
// begin result := false ;
21684: LD_ADDR_VAR 0 3
21688: PUSH
21689: LD_INT 0
21691: ST_TO_ADDR
// exit ;
21692: POP
21693: POP
21694: GO 21700
// end ;
21696: GO 21661
21698: POP
21699: POP
// end ;
21700: LD_VAR 0 3
21704: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21705: LD_INT 0
21707: PPUSH
21708: PPUSH
21709: PPUSH
21710: PPUSH
21711: PPUSH
21712: PPUSH
21713: PPUSH
21714: PPUSH
21715: PPUSH
21716: PPUSH
21717: PPUSH
21718: PPUSH
21719: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21720: LD_VAR 0 1
21724: NOT
21725: PUSH
21726: LD_VAR 0 1
21730: PPUSH
21731: CALL_OW 257
21735: PUSH
21736: LD_INT 9
21738: NONEQUAL
21739: OR
21740: IFFALSE 21744
// exit ;
21742: GO 22317
// side := GetSide ( unit ) ;
21744: LD_ADDR_VAR 0 9
21748: PUSH
21749: LD_VAR 0 1
21753: PPUSH
21754: CALL_OW 255
21758: ST_TO_ADDR
// tech_space := tech_spacanom ;
21759: LD_ADDR_VAR 0 12
21763: PUSH
21764: LD_INT 29
21766: ST_TO_ADDR
// tech_time := tech_taurad ;
21767: LD_ADDR_VAR 0 13
21771: PUSH
21772: LD_INT 28
21774: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21775: LD_ADDR_VAR 0 11
21779: PUSH
21780: LD_VAR 0 1
21784: PPUSH
21785: CALL_OW 310
21789: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21790: LD_VAR 0 11
21794: PPUSH
21795: CALL_OW 247
21799: PUSH
21800: LD_INT 2
21802: EQUAL
21803: IFFALSE 21807
// exit ;
21805: GO 22317
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21807: LD_ADDR_VAR 0 8
21811: PUSH
21812: LD_INT 81
21814: PUSH
21815: LD_VAR 0 9
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 3
21826: PUSH
21827: LD_INT 21
21829: PUSH
21830: LD_INT 3
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PPUSH
21845: CALL_OW 69
21849: ST_TO_ADDR
// if not tmp then
21850: LD_VAR 0 8
21854: NOT
21855: IFFALSE 21859
// exit ;
21857: GO 22317
// if in_unit then
21859: LD_VAR 0 11
21863: IFFALSE 21887
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21865: LD_ADDR_VAR 0 10
21869: PUSH
21870: LD_VAR 0 8
21874: PPUSH
21875: LD_VAR 0 11
21879: PPUSH
21880: CALL_OW 74
21884: ST_TO_ADDR
21885: GO 21907
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21887: LD_ADDR_VAR 0 10
21891: PUSH
21892: LD_VAR 0 8
21896: PPUSH
21897: LD_VAR 0 1
21901: PPUSH
21902: CALL_OW 74
21906: ST_TO_ADDR
// if not enemy then
21907: LD_VAR 0 10
21911: NOT
21912: IFFALSE 21916
// exit ;
21914: GO 22317
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21916: LD_VAR 0 11
21920: PUSH
21921: LD_VAR 0 11
21925: PPUSH
21926: LD_VAR 0 10
21930: PPUSH
21931: CALL_OW 296
21935: PUSH
21936: LD_INT 13
21938: GREATER
21939: AND
21940: PUSH
21941: LD_VAR 0 1
21945: PPUSH
21946: LD_VAR 0 10
21950: PPUSH
21951: CALL_OW 296
21955: PUSH
21956: LD_INT 12
21958: GREATER
21959: OR
21960: IFFALSE 21964
// exit ;
21962: GO 22317
// missile := [ 1 ] ;
21964: LD_ADDR_VAR 0 14
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: EMPTY
21973: LIST
21974: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21975: LD_VAR 0 9
21979: PPUSH
21980: LD_VAR 0 12
21984: PPUSH
21985: CALL_OW 325
21989: IFFALSE 22018
// missile := Insert ( missile , missile + 1 , 2 ) ;
21991: LD_ADDR_VAR 0 14
21995: PUSH
21996: LD_VAR 0 14
22000: PPUSH
22001: LD_VAR 0 14
22005: PUSH
22006: LD_INT 1
22008: PLUS
22009: PPUSH
22010: LD_INT 2
22012: PPUSH
22013: CALL_OW 2
22017: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22018: LD_VAR 0 9
22022: PPUSH
22023: LD_VAR 0 13
22027: PPUSH
22028: CALL_OW 325
22032: PUSH
22033: LD_VAR 0 10
22037: PPUSH
22038: CALL_OW 255
22042: PPUSH
22043: LD_VAR 0 13
22047: PPUSH
22048: CALL_OW 325
22052: NOT
22053: AND
22054: IFFALSE 22083
// missile := Insert ( missile , missile + 1 , 3 ) ;
22056: LD_ADDR_VAR 0 14
22060: PUSH
22061: LD_VAR 0 14
22065: PPUSH
22066: LD_VAR 0 14
22070: PUSH
22071: LD_INT 1
22073: PLUS
22074: PPUSH
22075: LD_INT 3
22077: PPUSH
22078: CALL_OW 2
22082: ST_TO_ADDR
// if missile < 2 then
22083: LD_VAR 0 14
22087: PUSH
22088: LD_INT 2
22090: LESS
22091: IFFALSE 22095
// exit ;
22093: GO 22317
// x := GetX ( enemy ) ;
22095: LD_ADDR_VAR 0 4
22099: PUSH
22100: LD_VAR 0 10
22104: PPUSH
22105: CALL_OW 250
22109: ST_TO_ADDR
// y := GetY ( enemy ) ;
22110: LD_ADDR_VAR 0 5
22114: PUSH
22115: LD_VAR 0 10
22119: PPUSH
22120: CALL_OW 251
22124: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22125: LD_ADDR_VAR 0 6
22129: PUSH
22130: LD_VAR 0 4
22134: PUSH
22135: LD_INT 1
22137: NEG
22138: PPUSH
22139: LD_INT 1
22141: PPUSH
22142: CALL_OW 12
22146: PLUS
22147: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22148: LD_ADDR_VAR 0 7
22152: PUSH
22153: LD_VAR 0 5
22157: PUSH
22158: LD_INT 1
22160: NEG
22161: PPUSH
22162: LD_INT 1
22164: PPUSH
22165: CALL_OW 12
22169: PLUS
22170: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22171: LD_VAR 0 6
22175: PPUSH
22176: LD_VAR 0 7
22180: PPUSH
22181: CALL_OW 488
22185: NOT
22186: IFFALSE 22208
// begin _x := x ;
22188: LD_ADDR_VAR 0 6
22192: PUSH
22193: LD_VAR 0 4
22197: ST_TO_ADDR
// _y := y ;
22198: LD_ADDR_VAR 0 7
22202: PUSH
22203: LD_VAR 0 5
22207: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22208: LD_ADDR_VAR 0 3
22212: PUSH
22213: LD_INT 1
22215: PPUSH
22216: LD_VAR 0 14
22220: PPUSH
22221: CALL_OW 12
22225: ST_TO_ADDR
// case i of 1 :
22226: LD_VAR 0 3
22230: PUSH
22231: LD_INT 1
22233: DOUBLE
22234: EQUAL
22235: IFTRUE 22239
22237: GO 22256
22239: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22240: LD_VAR 0 1
22244: PPUSH
22245: LD_VAR 0 10
22249: PPUSH
22250: CALL_OW 115
22254: GO 22317
22256: LD_INT 2
22258: DOUBLE
22259: EQUAL
22260: IFTRUE 22264
22262: GO 22286
22264: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22265: LD_VAR 0 1
22269: PPUSH
22270: LD_VAR 0 6
22274: PPUSH
22275: LD_VAR 0 7
22279: PPUSH
22280: CALL_OW 153
22284: GO 22317
22286: LD_INT 3
22288: DOUBLE
22289: EQUAL
22290: IFTRUE 22294
22292: GO 22316
22294: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22295: LD_VAR 0 1
22299: PPUSH
22300: LD_VAR 0 6
22304: PPUSH
22305: LD_VAR 0 7
22309: PPUSH
22310: CALL_OW 154
22314: GO 22317
22316: POP
// end ;
22317: LD_VAR 0 2
22321: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22322: LD_INT 0
22324: PPUSH
22325: PPUSH
22326: PPUSH
22327: PPUSH
22328: PPUSH
22329: PPUSH
// if not unit or not building then
22330: LD_VAR 0 1
22334: NOT
22335: PUSH
22336: LD_VAR 0 2
22340: NOT
22341: OR
22342: IFFALSE 22346
// exit ;
22344: GO 22504
// x := GetX ( building ) ;
22346: LD_ADDR_VAR 0 5
22350: PUSH
22351: LD_VAR 0 2
22355: PPUSH
22356: CALL_OW 250
22360: ST_TO_ADDR
// y := GetY ( building ) ;
22361: LD_ADDR_VAR 0 6
22365: PUSH
22366: LD_VAR 0 2
22370: PPUSH
22371: CALL_OW 251
22375: ST_TO_ADDR
// for i = 0 to 5 do
22376: LD_ADDR_VAR 0 4
22380: PUSH
22381: DOUBLE
22382: LD_INT 0
22384: DEC
22385: ST_TO_ADDR
22386: LD_INT 5
22388: PUSH
22389: FOR_TO
22390: IFFALSE 22502
// begin _x := ShiftX ( x , i , 3 ) ;
22392: LD_ADDR_VAR 0 7
22396: PUSH
22397: LD_VAR 0 5
22401: PPUSH
22402: LD_VAR 0 4
22406: PPUSH
22407: LD_INT 3
22409: PPUSH
22410: CALL_OW 272
22414: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22415: LD_ADDR_VAR 0 8
22419: PUSH
22420: LD_VAR 0 6
22424: PPUSH
22425: LD_VAR 0 4
22429: PPUSH
22430: LD_INT 3
22432: PPUSH
22433: CALL_OW 273
22437: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22438: LD_VAR 0 7
22442: PPUSH
22443: LD_VAR 0 8
22447: PPUSH
22448: CALL_OW 488
22452: NOT
22453: IFFALSE 22457
// continue ;
22455: GO 22389
// if HexInfo ( _x , _y ) = 0 then
22457: LD_VAR 0 7
22461: PPUSH
22462: LD_VAR 0 8
22466: PPUSH
22467: CALL_OW 428
22471: PUSH
22472: LD_INT 0
22474: EQUAL
22475: IFFALSE 22500
// begin ComMoveXY ( unit , _x , _y ) ;
22477: LD_VAR 0 1
22481: PPUSH
22482: LD_VAR 0 7
22486: PPUSH
22487: LD_VAR 0 8
22491: PPUSH
22492: CALL_OW 111
// exit ;
22496: POP
22497: POP
22498: GO 22504
// end ; end ;
22500: GO 22389
22502: POP
22503: POP
// end ;
22504: LD_VAR 0 3
22508: RET
// export function ScanBase ( side , base_area ) ; begin
22509: LD_INT 0
22511: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22512: LD_ADDR_VAR 0 3
22516: PUSH
22517: LD_VAR 0 2
22521: PPUSH
22522: LD_INT 81
22524: PUSH
22525: LD_VAR 0 1
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PPUSH
22534: CALL_OW 70
22538: ST_TO_ADDR
// end ;
22539: LD_VAR 0 3
22543: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22544: LD_INT 0
22546: PPUSH
22547: PPUSH
22548: PPUSH
22549: PPUSH
// result := false ;
22550: LD_ADDR_VAR 0 2
22554: PUSH
22555: LD_INT 0
22557: ST_TO_ADDR
// side := GetSide ( unit ) ;
22558: LD_ADDR_VAR 0 3
22562: PUSH
22563: LD_VAR 0 1
22567: PPUSH
22568: CALL_OW 255
22572: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22573: LD_ADDR_VAR 0 4
22577: PUSH
22578: LD_VAR 0 1
22582: PPUSH
22583: CALL_OW 248
22587: ST_TO_ADDR
// case nat of 1 :
22588: LD_VAR 0 4
22592: PUSH
22593: LD_INT 1
22595: DOUBLE
22596: EQUAL
22597: IFTRUE 22601
22599: GO 22612
22601: POP
// tech := tech_lassight ; 2 :
22602: LD_ADDR_VAR 0 5
22606: PUSH
22607: LD_INT 12
22609: ST_TO_ADDR
22610: GO 22651
22612: LD_INT 2
22614: DOUBLE
22615: EQUAL
22616: IFTRUE 22620
22618: GO 22631
22620: POP
// tech := tech_mortar ; 3 :
22621: LD_ADDR_VAR 0 5
22625: PUSH
22626: LD_INT 41
22628: ST_TO_ADDR
22629: GO 22651
22631: LD_INT 3
22633: DOUBLE
22634: EQUAL
22635: IFTRUE 22639
22637: GO 22650
22639: POP
// tech := tech_bazooka ; end ;
22640: LD_ADDR_VAR 0 5
22644: PUSH
22645: LD_INT 44
22647: ST_TO_ADDR
22648: GO 22651
22650: POP
// if Researched ( side , tech ) then
22651: LD_VAR 0 3
22655: PPUSH
22656: LD_VAR 0 5
22660: PPUSH
22661: CALL_OW 325
22665: IFFALSE 22692
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22667: LD_ADDR_VAR 0 2
22671: PUSH
22672: LD_INT 5
22674: PUSH
22675: LD_INT 8
22677: PUSH
22678: LD_INT 9
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: LD_VAR 0 4
22690: ARRAY
22691: ST_TO_ADDR
// end ;
22692: LD_VAR 0 2
22696: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22697: LD_INT 0
22699: PPUSH
22700: PPUSH
22701: PPUSH
// if not mines then
22702: LD_VAR 0 2
22706: NOT
22707: IFFALSE 22711
// exit ;
22709: GO 22855
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22711: LD_ADDR_VAR 0 5
22715: PUSH
22716: LD_INT 81
22718: PUSH
22719: LD_VAR 0 1
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 3
22730: PUSH
22731: LD_INT 21
22733: PUSH
22734: LD_INT 3
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PPUSH
22749: CALL_OW 69
22753: ST_TO_ADDR
// for i in mines do
22754: LD_ADDR_VAR 0 4
22758: PUSH
22759: LD_VAR 0 2
22763: PUSH
22764: FOR_IN
22765: IFFALSE 22853
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22767: LD_VAR 0 4
22771: PUSH
22772: LD_INT 1
22774: ARRAY
22775: PPUSH
22776: LD_VAR 0 4
22780: PUSH
22781: LD_INT 2
22783: ARRAY
22784: PPUSH
22785: CALL_OW 458
22789: NOT
22790: IFFALSE 22794
// continue ;
22792: GO 22764
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22794: LD_VAR 0 4
22798: PUSH
22799: LD_INT 1
22801: ARRAY
22802: PPUSH
22803: LD_VAR 0 4
22807: PUSH
22808: LD_INT 2
22810: ARRAY
22811: PPUSH
22812: CALL_OW 428
22816: PUSH
22817: LD_VAR 0 5
22821: IN
22822: IFFALSE 22851
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22824: LD_VAR 0 4
22828: PUSH
22829: LD_INT 1
22831: ARRAY
22832: PPUSH
22833: LD_VAR 0 4
22837: PUSH
22838: LD_INT 2
22840: ARRAY
22841: PPUSH
22842: LD_VAR 0 1
22846: PPUSH
22847: CALL_OW 456
// end ;
22851: GO 22764
22853: POP
22854: POP
// end ;
22855: LD_VAR 0 3
22859: RET
// export function Count ( array ) ; var i ; begin
22860: LD_INT 0
22862: PPUSH
22863: PPUSH
// result := 0 ;
22864: LD_ADDR_VAR 0 2
22868: PUSH
22869: LD_INT 0
22871: ST_TO_ADDR
// for i in array do
22872: LD_ADDR_VAR 0 3
22876: PUSH
22877: LD_VAR 0 1
22881: PUSH
22882: FOR_IN
22883: IFFALSE 22907
// if i then
22885: LD_VAR 0 3
22889: IFFALSE 22905
// result := result + 1 ;
22891: LD_ADDR_VAR 0 2
22895: PUSH
22896: LD_VAR 0 2
22900: PUSH
22901: LD_INT 1
22903: PLUS
22904: ST_TO_ADDR
22905: GO 22882
22907: POP
22908: POP
// end ;
22909: LD_VAR 0 2
22913: RET
// export function IsEmpty ( building ) ; begin
22914: LD_INT 0
22916: PPUSH
// if not building then
22917: LD_VAR 0 1
22921: NOT
22922: IFFALSE 22926
// exit ;
22924: GO 22969
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22926: LD_ADDR_VAR 0 2
22930: PUSH
22931: LD_VAR 0 1
22935: PUSH
22936: LD_INT 22
22938: PUSH
22939: LD_VAR 0 1
22943: PPUSH
22944: CALL_OW 255
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 58
22955: PUSH
22956: EMPTY
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PPUSH
22963: CALL_OW 69
22967: IN
22968: ST_TO_ADDR
// end ;
22969: LD_VAR 0 2
22973: RET
// export function IsNotFull ( building ) ; begin
22974: LD_INT 0
22976: PPUSH
// if not building then
22977: LD_VAR 0 1
22981: NOT
22982: IFFALSE 22986
// exit ;
22984: GO 23005
// result := UnitsInside ( building ) < 6 ;
22986: LD_ADDR_VAR 0 2
22990: PUSH
22991: LD_VAR 0 1
22995: PPUSH
22996: CALL_OW 313
23000: PUSH
23001: LD_INT 6
23003: LESS
23004: ST_TO_ADDR
// end ;
23005: LD_VAR 0 2
23009: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23010: LD_INT 0
23012: PPUSH
23013: PPUSH
23014: PPUSH
23015: PPUSH
// tmp := [ ] ;
23016: LD_ADDR_VAR 0 3
23020: PUSH
23021: EMPTY
23022: ST_TO_ADDR
// list := [ ] ;
23023: LD_ADDR_VAR 0 5
23027: PUSH
23028: EMPTY
23029: ST_TO_ADDR
// for i = 16 to 25 do
23030: LD_ADDR_VAR 0 4
23034: PUSH
23035: DOUBLE
23036: LD_INT 16
23038: DEC
23039: ST_TO_ADDR
23040: LD_INT 25
23042: PUSH
23043: FOR_TO
23044: IFFALSE 23117
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: LD_VAR 0 3
23055: PUSH
23056: LD_INT 22
23058: PUSH
23059: LD_VAR 0 1
23063: PPUSH
23064: CALL_OW 255
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 91
23075: PUSH
23076: LD_VAR 0 1
23080: PUSH
23081: LD_INT 6
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 30
23091: PUSH
23092: LD_VAR 0 4
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: PUSH
23106: EMPTY
23107: LIST
23108: PPUSH
23109: CALL_OW 69
23113: ADD
23114: ST_TO_ADDR
23115: GO 23043
23117: POP
23118: POP
// for i = 1 to tmp do
23119: LD_ADDR_VAR 0 4
23123: PUSH
23124: DOUBLE
23125: LD_INT 1
23127: DEC
23128: ST_TO_ADDR
23129: LD_VAR 0 3
23133: PUSH
23134: FOR_TO
23135: IFFALSE 23223
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23137: LD_ADDR_VAR 0 5
23141: PUSH
23142: LD_VAR 0 5
23146: PUSH
23147: LD_VAR 0 3
23151: PUSH
23152: LD_VAR 0 4
23156: ARRAY
23157: PPUSH
23158: CALL_OW 266
23162: PUSH
23163: LD_VAR 0 3
23167: PUSH
23168: LD_VAR 0 4
23172: ARRAY
23173: PPUSH
23174: CALL_OW 250
23178: PUSH
23179: LD_VAR 0 3
23183: PUSH
23184: LD_VAR 0 4
23188: ARRAY
23189: PPUSH
23190: CALL_OW 251
23194: PUSH
23195: LD_VAR 0 3
23199: PUSH
23200: LD_VAR 0 4
23204: ARRAY
23205: PPUSH
23206: CALL_OW 254
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: ADD
23220: ST_TO_ADDR
23221: GO 23134
23223: POP
23224: POP
// result := list ;
23225: LD_ADDR_VAR 0 2
23229: PUSH
23230: LD_VAR 0 5
23234: ST_TO_ADDR
// end ;
23235: LD_VAR 0 2
23239: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23240: LD_INT 0
23242: PPUSH
23243: PPUSH
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
// if not factory then
23249: LD_VAR 0 1
23253: NOT
23254: IFFALSE 23258
// exit ;
23256: GO 23851
// if control = control_apeman then
23258: LD_VAR 0 4
23262: PUSH
23263: LD_INT 5
23265: EQUAL
23266: IFFALSE 23375
// begin tmp := UnitsInside ( factory ) ;
23268: LD_ADDR_VAR 0 8
23272: PUSH
23273: LD_VAR 0 1
23277: PPUSH
23278: CALL_OW 313
23282: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23283: LD_VAR 0 8
23287: PPUSH
23288: LD_INT 25
23290: PUSH
23291: LD_INT 12
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PPUSH
23298: CALL_OW 72
23302: NOT
23303: IFFALSE 23313
// control := control_manual ;
23305: LD_ADDR_VAR 0 4
23309: PUSH
23310: LD_INT 1
23312: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23313: LD_ADDR_VAR 0 8
23317: PUSH
23318: LD_VAR 0 1
23322: PPUSH
23323: CALL 23010 0 1
23327: ST_TO_ADDR
// if tmp then
23328: LD_VAR 0 8
23332: IFFALSE 23375
// begin for i in tmp do
23334: LD_ADDR_VAR 0 7
23338: PUSH
23339: LD_VAR 0 8
23343: PUSH
23344: FOR_IN
23345: IFFALSE 23373
// if i [ 1 ] = b_ext_radio then
23347: LD_VAR 0 7
23351: PUSH
23352: LD_INT 1
23354: ARRAY
23355: PUSH
23356: LD_INT 22
23358: EQUAL
23359: IFFALSE 23371
// begin control := control_remote ;
23361: LD_ADDR_VAR 0 4
23365: PUSH
23366: LD_INT 2
23368: ST_TO_ADDR
// break ;
23369: GO 23373
// end ;
23371: GO 23344
23373: POP
23374: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23375: LD_VAR 0 1
23379: PPUSH
23380: LD_VAR 0 2
23384: PPUSH
23385: LD_VAR 0 3
23389: PPUSH
23390: LD_VAR 0 4
23394: PPUSH
23395: LD_VAR 0 5
23399: PPUSH
23400: CALL_OW 448
23404: IFFALSE 23439
// begin result := [ chassis , engine , control , weapon ] ;
23406: LD_ADDR_VAR 0 6
23410: PUSH
23411: LD_VAR 0 2
23415: PUSH
23416: LD_VAR 0 3
23420: PUSH
23421: LD_VAR 0 4
23425: PUSH
23426: LD_VAR 0 5
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: ST_TO_ADDR
// exit ;
23437: GO 23851
// end ; _chassis := AvailableChassisList ( factory ) ;
23439: LD_ADDR_VAR 0 9
23443: PUSH
23444: LD_VAR 0 1
23448: PPUSH
23449: CALL_OW 475
23453: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23454: LD_ADDR_VAR 0 11
23458: PUSH
23459: LD_VAR 0 1
23463: PPUSH
23464: CALL_OW 476
23468: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23469: LD_ADDR_VAR 0 12
23473: PUSH
23474: LD_VAR 0 1
23478: PPUSH
23479: CALL_OW 477
23483: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23484: LD_ADDR_VAR 0 10
23488: PUSH
23489: LD_VAR 0 1
23493: PPUSH
23494: CALL_OW 478
23498: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23499: LD_VAR 0 9
23503: NOT
23504: PUSH
23505: LD_VAR 0 11
23509: NOT
23510: OR
23511: PUSH
23512: LD_VAR 0 12
23516: NOT
23517: OR
23518: PUSH
23519: LD_VAR 0 10
23523: NOT
23524: OR
23525: IFFALSE 23560
// begin result := [ chassis , engine , control , weapon ] ;
23527: LD_ADDR_VAR 0 6
23531: PUSH
23532: LD_VAR 0 2
23536: PUSH
23537: LD_VAR 0 3
23541: PUSH
23542: LD_VAR 0 4
23546: PUSH
23547: LD_VAR 0 5
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: ST_TO_ADDR
// exit ;
23558: GO 23851
// end ; if not chassis in _chassis then
23560: LD_VAR 0 2
23564: PUSH
23565: LD_VAR 0 9
23569: IN
23570: NOT
23571: IFFALSE 23597
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23573: LD_ADDR_VAR 0 2
23577: PUSH
23578: LD_VAR 0 9
23582: PUSH
23583: LD_INT 1
23585: PPUSH
23586: LD_VAR 0 9
23590: PPUSH
23591: CALL_OW 12
23595: ARRAY
23596: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23597: LD_VAR 0 2
23601: PPUSH
23602: LD_VAR 0 3
23606: PPUSH
23607: CALL 23856 0 2
23611: NOT
23612: IFFALSE 23671
// repeat engine := _engine [ 1 ] ;
23614: LD_ADDR_VAR 0 3
23618: PUSH
23619: LD_VAR 0 11
23623: PUSH
23624: LD_INT 1
23626: ARRAY
23627: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23628: LD_ADDR_VAR 0 11
23632: PUSH
23633: LD_VAR 0 11
23637: PPUSH
23638: LD_INT 1
23640: PPUSH
23641: CALL_OW 3
23645: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23646: LD_VAR 0 2
23650: PPUSH
23651: LD_VAR 0 3
23655: PPUSH
23656: CALL 23856 0 2
23660: PUSH
23661: LD_VAR 0 11
23665: PUSH
23666: EMPTY
23667: EQUAL
23668: OR
23669: IFFALSE 23614
// if not control in _control then
23671: LD_VAR 0 4
23675: PUSH
23676: LD_VAR 0 12
23680: IN
23681: NOT
23682: IFFALSE 23708
// control := _control [ rand ( 1 , _control ) ] ;
23684: LD_ADDR_VAR 0 4
23688: PUSH
23689: LD_VAR 0 12
23693: PUSH
23694: LD_INT 1
23696: PPUSH
23697: LD_VAR 0 12
23701: PPUSH
23702: CALL_OW 12
23706: ARRAY
23707: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23708: LD_VAR 0 2
23712: PPUSH
23713: LD_VAR 0 5
23717: PPUSH
23718: CALL 24076 0 2
23722: NOT
23723: IFFALSE 23782
// repeat weapon := _weapon [ 1 ] ;
23725: LD_ADDR_VAR 0 5
23729: PUSH
23730: LD_VAR 0 10
23734: PUSH
23735: LD_INT 1
23737: ARRAY
23738: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23739: LD_ADDR_VAR 0 10
23743: PUSH
23744: LD_VAR 0 10
23748: PPUSH
23749: LD_INT 1
23751: PPUSH
23752: CALL_OW 3
23756: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23757: LD_VAR 0 2
23761: PPUSH
23762: LD_VAR 0 5
23766: PPUSH
23767: CALL 24076 0 2
23771: PUSH
23772: LD_VAR 0 10
23776: PUSH
23777: EMPTY
23778: EQUAL
23779: OR
23780: IFFALSE 23725
// result := [ ] ;
23782: LD_ADDR_VAR 0 6
23786: PUSH
23787: EMPTY
23788: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23789: LD_VAR 0 1
23793: PPUSH
23794: LD_VAR 0 2
23798: PPUSH
23799: LD_VAR 0 3
23803: PPUSH
23804: LD_VAR 0 4
23808: PPUSH
23809: LD_VAR 0 5
23813: PPUSH
23814: CALL_OW 448
23818: IFFALSE 23851
// result := [ chassis , engine , control , weapon ] ;
23820: LD_ADDR_VAR 0 6
23824: PUSH
23825: LD_VAR 0 2
23829: PUSH
23830: LD_VAR 0 3
23834: PUSH
23835: LD_VAR 0 4
23839: PUSH
23840: LD_VAR 0 5
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: ST_TO_ADDR
// end ;
23851: LD_VAR 0 6
23855: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23856: LD_INT 0
23858: PPUSH
// if not chassis or not engine then
23859: LD_VAR 0 1
23863: NOT
23864: PUSH
23865: LD_VAR 0 2
23869: NOT
23870: OR
23871: IFFALSE 23875
// exit ;
23873: GO 24071
// case engine of engine_solar :
23875: LD_VAR 0 2
23879: PUSH
23880: LD_INT 2
23882: DOUBLE
23883: EQUAL
23884: IFTRUE 23888
23886: GO 23926
23888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23889: LD_ADDR_VAR 0 3
23893: PUSH
23894: LD_INT 11
23896: PUSH
23897: LD_INT 12
23899: PUSH
23900: LD_INT 13
23902: PUSH
23903: LD_INT 14
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: LD_INT 3
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: ST_TO_ADDR
23924: GO 24055
23926: LD_INT 1
23928: DOUBLE
23929: EQUAL
23930: IFTRUE 23934
23932: GO 23996
23934: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23935: LD_ADDR_VAR 0 3
23939: PUSH
23940: LD_INT 11
23942: PUSH
23943: LD_INT 12
23945: PUSH
23946: LD_INT 13
23948: PUSH
23949: LD_INT 14
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: LD_INT 2
23957: PUSH
23958: LD_INT 3
23960: PUSH
23961: LD_INT 4
23963: PUSH
23964: LD_INT 5
23966: PUSH
23967: LD_INT 21
23969: PUSH
23970: LD_INT 23
23972: PUSH
23973: LD_INT 22
23975: PUSH
23976: LD_INT 24
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: ST_TO_ADDR
23994: GO 24055
23996: LD_INT 3
23998: DOUBLE
23999: EQUAL
24000: IFTRUE 24004
24002: GO 24054
24004: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24005: LD_ADDR_VAR 0 3
24009: PUSH
24010: LD_INT 13
24012: PUSH
24013: LD_INT 14
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: LD_INT 3
24021: PUSH
24022: LD_INT 4
24024: PUSH
24025: LD_INT 5
24027: PUSH
24028: LD_INT 21
24030: PUSH
24031: LD_INT 22
24033: PUSH
24034: LD_INT 23
24036: PUSH
24037: LD_INT 24
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: ST_TO_ADDR
24052: GO 24055
24054: POP
// result := ( chassis in result ) ;
24055: LD_ADDR_VAR 0 3
24059: PUSH
24060: LD_VAR 0 1
24064: PUSH
24065: LD_VAR 0 3
24069: IN
24070: ST_TO_ADDR
// end ;
24071: LD_VAR 0 3
24075: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24076: LD_INT 0
24078: PPUSH
// if not chassis or not weapon then
24079: LD_VAR 0 1
24083: NOT
24084: PUSH
24085: LD_VAR 0 2
24089: NOT
24090: OR
24091: IFFALSE 24095
// exit ;
24093: GO 25121
// case weapon of us_machine_gun :
24095: LD_VAR 0 2
24099: PUSH
24100: LD_INT 2
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24138
24108: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24109: LD_ADDR_VAR 0 3
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: LD_INT 2
24119: PUSH
24120: LD_INT 3
24122: PUSH
24123: LD_INT 4
24125: PUSH
24126: LD_INT 5
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: ST_TO_ADDR
24136: GO 25105
24138: LD_INT 3
24140: DOUBLE
24141: EQUAL
24142: IFTRUE 24146
24144: GO 24176
24146: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24147: LD_ADDR_VAR 0 3
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: LD_INT 3
24160: PUSH
24161: LD_INT 4
24163: PUSH
24164: LD_INT 5
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: ST_TO_ADDR
24174: GO 25105
24176: LD_INT 11
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24214
24184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24185: LD_ADDR_VAR 0 3
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 2
24195: PUSH
24196: LD_INT 3
24198: PUSH
24199: LD_INT 4
24201: PUSH
24202: LD_INT 5
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: ST_TO_ADDR
24212: GO 25105
24214: LD_INT 4
24216: DOUBLE
24217: EQUAL
24218: IFTRUE 24222
24220: GO 24248
24222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24223: LD_ADDR_VAR 0 3
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 3
24233: PUSH
24234: LD_INT 4
24236: PUSH
24237: LD_INT 5
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: ST_TO_ADDR
24246: GO 25105
24248: LD_INT 5
24250: DOUBLE
24251: EQUAL
24252: IFTRUE 24256
24254: GO 24282
24256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24257: LD_ADDR_VAR 0 3
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 3
24267: PUSH
24268: LD_INT 4
24270: PUSH
24271: LD_INT 5
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: ST_TO_ADDR
24280: GO 25105
24282: LD_INT 9
24284: DOUBLE
24285: EQUAL
24286: IFTRUE 24290
24288: GO 24316
24290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24291: LD_ADDR_VAR 0 3
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 3
24301: PUSH
24302: LD_INT 4
24304: PUSH
24305: LD_INT 5
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: ST_TO_ADDR
24314: GO 25105
24316: LD_INT 7
24318: DOUBLE
24319: EQUAL
24320: IFTRUE 24324
24322: GO 24350
24324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24325: LD_ADDR_VAR 0 3
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: LD_INT 3
24335: PUSH
24336: LD_INT 4
24338: PUSH
24339: LD_INT 5
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: ST_TO_ADDR
24348: GO 25105
24350: LD_INT 12
24352: DOUBLE
24353: EQUAL
24354: IFTRUE 24358
24356: GO 24384
24358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24359: LD_ADDR_VAR 0 3
24363: PUSH
24364: LD_INT 2
24366: PUSH
24367: LD_INT 3
24369: PUSH
24370: LD_INT 4
24372: PUSH
24373: LD_INT 5
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: ST_TO_ADDR
24382: GO 25105
24384: LD_INT 13
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24418
24392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24393: LD_ADDR_VAR 0 3
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: LD_INT 3
24403: PUSH
24404: LD_INT 4
24406: PUSH
24407: LD_INT 5
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: ST_TO_ADDR
24416: GO 25105
24418: LD_INT 14
24420: DOUBLE
24421: EQUAL
24422: IFTRUE 24426
24424: GO 24444
24426: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24427: LD_ADDR_VAR 0 3
24431: PUSH
24432: LD_INT 4
24434: PUSH
24435: LD_INT 5
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: ST_TO_ADDR
24442: GO 25105
24444: LD_INT 6
24446: DOUBLE
24447: EQUAL
24448: IFTRUE 24452
24450: GO 24470
24452: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24453: LD_ADDR_VAR 0 3
24457: PUSH
24458: LD_INT 4
24460: PUSH
24461: LD_INT 5
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: ST_TO_ADDR
24468: GO 25105
24470: LD_INT 10
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24496
24478: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24479: LD_ADDR_VAR 0 3
24483: PUSH
24484: LD_INT 4
24486: PUSH
24487: LD_INT 5
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: ST_TO_ADDR
24494: GO 25105
24496: LD_INT 22
24498: DOUBLE
24499: EQUAL
24500: IFTRUE 24504
24502: GO 24530
24504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24505: LD_ADDR_VAR 0 3
24509: PUSH
24510: LD_INT 11
24512: PUSH
24513: LD_INT 12
24515: PUSH
24516: LD_INT 13
24518: PUSH
24519: LD_INT 14
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: ST_TO_ADDR
24528: GO 25105
24530: LD_INT 23
24532: DOUBLE
24533: EQUAL
24534: IFTRUE 24538
24536: GO 24564
24538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24539: LD_ADDR_VAR 0 3
24543: PUSH
24544: LD_INT 11
24546: PUSH
24547: LD_INT 12
24549: PUSH
24550: LD_INT 13
24552: PUSH
24553: LD_INT 14
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: ST_TO_ADDR
24562: GO 25105
24564: LD_INT 24
24566: DOUBLE
24567: EQUAL
24568: IFTRUE 24572
24570: GO 24598
24572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24573: LD_ADDR_VAR 0 3
24577: PUSH
24578: LD_INT 11
24580: PUSH
24581: LD_INT 12
24583: PUSH
24584: LD_INT 13
24586: PUSH
24587: LD_INT 14
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: ST_TO_ADDR
24596: GO 25105
24598: LD_INT 30
24600: DOUBLE
24601: EQUAL
24602: IFTRUE 24606
24604: GO 24632
24606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24607: LD_ADDR_VAR 0 3
24611: PUSH
24612: LD_INT 11
24614: PUSH
24615: LD_INT 12
24617: PUSH
24618: LD_INT 13
24620: PUSH
24621: LD_INT 14
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: ST_TO_ADDR
24630: GO 25105
24632: LD_INT 25
24634: DOUBLE
24635: EQUAL
24636: IFTRUE 24640
24638: GO 24658
24640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24641: LD_ADDR_VAR 0 3
24645: PUSH
24646: LD_INT 13
24648: PUSH
24649: LD_INT 14
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: ST_TO_ADDR
24656: GO 25105
24658: LD_INT 27
24660: DOUBLE
24661: EQUAL
24662: IFTRUE 24666
24664: GO 24684
24666: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24667: LD_ADDR_VAR 0 3
24671: PUSH
24672: LD_INT 13
24674: PUSH
24675: LD_INT 14
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: ST_TO_ADDR
24682: GO 25105
24684: LD_INT 28
24686: DOUBLE
24687: EQUAL
24688: IFTRUE 24692
24690: GO 24710
24692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24693: LD_ADDR_VAR 0 3
24697: PUSH
24698: LD_INT 13
24700: PUSH
24701: LD_INT 14
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: ST_TO_ADDR
24708: GO 25105
24710: LD_INT 29
24712: DOUBLE
24713: EQUAL
24714: IFTRUE 24718
24716: GO 24736
24718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24719: LD_ADDR_VAR 0 3
24723: PUSH
24724: LD_INT 13
24726: PUSH
24727: LD_INT 14
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: ST_TO_ADDR
24734: GO 25105
24736: LD_INT 31
24738: DOUBLE
24739: EQUAL
24740: IFTRUE 24744
24742: GO 24762
24744: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24745: LD_ADDR_VAR 0 3
24749: PUSH
24750: LD_INT 13
24752: PUSH
24753: LD_INT 14
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: ST_TO_ADDR
24760: GO 25105
24762: LD_INT 26
24764: DOUBLE
24765: EQUAL
24766: IFTRUE 24770
24768: GO 24788
24770: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24771: LD_ADDR_VAR 0 3
24775: PUSH
24776: LD_INT 13
24778: PUSH
24779: LD_INT 14
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: ST_TO_ADDR
24786: GO 25105
24788: LD_INT 42
24790: DOUBLE
24791: EQUAL
24792: IFTRUE 24796
24794: GO 24822
24796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24797: LD_ADDR_VAR 0 3
24801: PUSH
24802: LD_INT 21
24804: PUSH
24805: LD_INT 22
24807: PUSH
24808: LD_INT 23
24810: PUSH
24811: LD_INT 24
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: ST_TO_ADDR
24820: GO 25105
24822: LD_INT 43
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24830
24828: GO 24856
24830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24831: LD_ADDR_VAR 0 3
24835: PUSH
24836: LD_INT 21
24838: PUSH
24839: LD_INT 22
24841: PUSH
24842: LD_INT 23
24844: PUSH
24845: LD_INT 24
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: ST_TO_ADDR
24854: GO 25105
24856: LD_INT 44
24858: DOUBLE
24859: EQUAL
24860: IFTRUE 24864
24862: GO 24890
24864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: LD_INT 21
24872: PUSH
24873: LD_INT 22
24875: PUSH
24876: LD_INT 23
24878: PUSH
24879: LD_INT 24
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: ST_TO_ADDR
24888: GO 25105
24890: LD_INT 45
24892: DOUBLE
24893: EQUAL
24894: IFTRUE 24898
24896: GO 24924
24898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24899: LD_ADDR_VAR 0 3
24903: PUSH
24904: LD_INT 21
24906: PUSH
24907: LD_INT 22
24909: PUSH
24910: LD_INT 23
24912: PUSH
24913: LD_INT 24
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: ST_TO_ADDR
24922: GO 25105
24924: LD_INT 49
24926: DOUBLE
24927: EQUAL
24928: IFTRUE 24932
24930: GO 24958
24932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24933: LD_ADDR_VAR 0 3
24937: PUSH
24938: LD_INT 21
24940: PUSH
24941: LD_INT 22
24943: PUSH
24944: LD_INT 23
24946: PUSH
24947: LD_INT 24
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: ST_TO_ADDR
24956: GO 25105
24958: LD_INT 51
24960: DOUBLE
24961: EQUAL
24962: IFTRUE 24966
24964: GO 24992
24966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24967: LD_ADDR_VAR 0 3
24971: PUSH
24972: LD_INT 21
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_INT 23
24980: PUSH
24981: LD_INT 24
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: ST_TO_ADDR
24990: GO 25105
24992: LD_INT 52
24994: DOUBLE
24995: EQUAL
24996: IFTRUE 25000
24998: GO 25026
25000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_INT 21
25008: PUSH
25009: LD_INT 22
25011: PUSH
25012: LD_INT 23
25014: PUSH
25015: LD_INT 24
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: ST_TO_ADDR
25024: GO 25105
25026: LD_INT 53
25028: DOUBLE
25029: EQUAL
25030: IFTRUE 25034
25032: GO 25052
25034: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25035: LD_ADDR_VAR 0 3
25039: PUSH
25040: LD_INT 23
25042: PUSH
25043: LD_INT 24
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: ST_TO_ADDR
25050: GO 25105
25052: LD_INT 46
25054: DOUBLE
25055: EQUAL
25056: IFTRUE 25060
25058: GO 25078
25060: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25061: LD_ADDR_VAR 0 3
25065: PUSH
25066: LD_INT 23
25068: PUSH
25069: LD_INT 24
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: ST_TO_ADDR
25076: GO 25105
25078: LD_INT 47
25080: DOUBLE
25081: EQUAL
25082: IFTRUE 25086
25084: GO 25104
25086: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25087: LD_ADDR_VAR 0 3
25091: PUSH
25092: LD_INT 23
25094: PUSH
25095: LD_INT 24
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: ST_TO_ADDR
25102: GO 25105
25104: POP
// result := ( chassis in result ) ;
25105: LD_ADDR_VAR 0 3
25109: PUSH
25110: LD_VAR 0 1
25114: PUSH
25115: LD_VAR 0 3
25119: IN
25120: ST_TO_ADDR
// end ;
25121: LD_VAR 0 3
25125: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25126: LD_INT 0
25128: PPUSH
25129: PPUSH
25130: PPUSH
25131: PPUSH
25132: PPUSH
25133: PPUSH
25134: PPUSH
// result := array ;
25135: LD_ADDR_VAR 0 5
25139: PUSH
25140: LD_VAR 0 1
25144: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25145: LD_VAR 0 1
25149: NOT
25150: PUSH
25151: LD_VAR 0 2
25155: NOT
25156: OR
25157: PUSH
25158: LD_VAR 0 3
25162: NOT
25163: OR
25164: PUSH
25165: LD_VAR 0 2
25169: PUSH
25170: LD_VAR 0 1
25174: GREATER
25175: OR
25176: PUSH
25177: LD_VAR 0 3
25181: PUSH
25182: LD_VAR 0 1
25186: GREATER
25187: OR
25188: IFFALSE 25192
// exit ;
25190: GO 25488
// if direction then
25192: LD_VAR 0 4
25196: IFFALSE 25260
// begin d := 1 ;
25198: LD_ADDR_VAR 0 9
25202: PUSH
25203: LD_INT 1
25205: ST_TO_ADDR
// if i_from > i_to then
25206: LD_VAR 0 2
25210: PUSH
25211: LD_VAR 0 3
25215: GREATER
25216: IFFALSE 25242
// length := ( array - i_from ) + i_to else
25218: LD_ADDR_VAR 0 11
25222: PUSH
25223: LD_VAR 0 1
25227: PUSH
25228: LD_VAR 0 2
25232: MINUS
25233: PUSH
25234: LD_VAR 0 3
25238: PLUS
25239: ST_TO_ADDR
25240: GO 25258
// length := i_to - i_from ;
25242: LD_ADDR_VAR 0 11
25246: PUSH
25247: LD_VAR 0 3
25251: PUSH
25252: LD_VAR 0 2
25256: MINUS
25257: ST_TO_ADDR
// end else
25258: GO 25321
// begin d := - 1 ;
25260: LD_ADDR_VAR 0 9
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: ST_TO_ADDR
// if i_from > i_to then
25269: LD_VAR 0 2
25273: PUSH
25274: LD_VAR 0 3
25278: GREATER
25279: IFFALSE 25299
// length := i_from - i_to else
25281: LD_ADDR_VAR 0 11
25285: PUSH
25286: LD_VAR 0 2
25290: PUSH
25291: LD_VAR 0 3
25295: MINUS
25296: ST_TO_ADDR
25297: GO 25321
// length := ( array - i_to ) + i_from ;
25299: LD_ADDR_VAR 0 11
25303: PUSH
25304: LD_VAR 0 1
25308: PUSH
25309: LD_VAR 0 3
25313: MINUS
25314: PUSH
25315: LD_VAR 0 2
25319: PLUS
25320: ST_TO_ADDR
// end ; if not length then
25321: LD_VAR 0 11
25325: NOT
25326: IFFALSE 25330
// exit ;
25328: GO 25488
// tmp := array ;
25330: LD_ADDR_VAR 0 10
25334: PUSH
25335: LD_VAR 0 1
25339: ST_TO_ADDR
// for i = 1 to length do
25340: LD_ADDR_VAR 0 6
25344: PUSH
25345: DOUBLE
25346: LD_INT 1
25348: DEC
25349: ST_TO_ADDR
25350: LD_VAR 0 11
25354: PUSH
25355: FOR_TO
25356: IFFALSE 25476
// begin for j = 1 to array do
25358: LD_ADDR_VAR 0 7
25362: PUSH
25363: DOUBLE
25364: LD_INT 1
25366: DEC
25367: ST_TO_ADDR
25368: LD_VAR 0 1
25372: PUSH
25373: FOR_TO
25374: IFFALSE 25462
// begin k := j + d ;
25376: LD_ADDR_VAR 0 8
25380: PUSH
25381: LD_VAR 0 7
25385: PUSH
25386: LD_VAR 0 9
25390: PLUS
25391: ST_TO_ADDR
// if k > array then
25392: LD_VAR 0 8
25396: PUSH
25397: LD_VAR 0 1
25401: GREATER
25402: IFFALSE 25412
// k := 1 ;
25404: LD_ADDR_VAR 0 8
25408: PUSH
25409: LD_INT 1
25411: ST_TO_ADDR
// if not k then
25412: LD_VAR 0 8
25416: NOT
25417: IFFALSE 25429
// k := array ;
25419: LD_ADDR_VAR 0 8
25423: PUSH
25424: LD_VAR 0 1
25428: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25429: LD_ADDR_VAR 0 10
25433: PUSH
25434: LD_VAR 0 10
25438: PPUSH
25439: LD_VAR 0 8
25443: PPUSH
25444: LD_VAR 0 1
25448: PUSH
25449: LD_VAR 0 7
25453: ARRAY
25454: PPUSH
25455: CALL_OW 1
25459: ST_TO_ADDR
// end ;
25460: GO 25373
25462: POP
25463: POP
// array := tmp ;
25464: LD_ADDR_VAR 0 1
25468: PUSH
25469: LD_VAR 0 10
25473: ST_TO_ADDR
// end ;
25474: GO 25355
25476: POP
25477: POP
// result := array ;
25478: LD_ADDR_VAR 0 5
25482: PUSH
25483: LD_VAR 0 1
25487: ST_TO_ADDR
// end ;
25488: LD_VAR 0 5
25492: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25493: LD_INT 0
25495: PPUSH
25496: PPUSH
// result := 0 ;
25497: LD_ADDR_VAR 0 3
25501: PUSH
25502: LD_INT 0
25504: ST_TO_ADDR
// if not array or not value in array then
25505: LD_VAR 0 1
25509: NOT
25510: PUSH
25511: LD_VAR 0 2
25515: PUSH
25516: LD_VAR 0 1
25520: IN
25521: NOT
25522: OR
25523: IFFALSE 25527
// exit ;
25525: GO 25581
// for i = 1 to array do
25527: LD_ADDR_VAR 0 4
25531: PUSH
25532: DOUBLE
25533: LD_INT 1
25535: DEC
25536: ST_TO_ADDR
25537: LD_VAR 0 1
25541: PUSH
25542: FOR_TO
25543: IFFALSE 25579
// if value = array [ i ] then
25545: LD_VAR 0 2
25549: PUSH
25550: LD_VAR 0 1
25554: PUSH
25555: LD_VAR 0 4
25559: ARRAY
25560: EQUAL
25561: IFFALSE 25577
// begin result := i ;
25563: LD_ADDR_VAR 0 3
25567: PUSH
25568: LD_VAR 0 4
25572: ST_TO_ADDR
// exit ;
25573: POP
25574: POP
25575: GO 25581
// end ;
25577: GO 25542
25579: POP
25580: POP
// end ;
25581: LD_VAR 0 3
25585: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25586: LD_INT 0
25588: PPUSH
// vc_chassis := chassis ;
25589: LD_ADDR_OWVAR 37
25593: PUSH
25594: LD_VAR 0 1
25598: ST_TO_ADDR
// vc_engine := engine ;
25599: LD_ADDR_OWVAR 39
25603: PUSH
25604: LD_VAR 0 2
25608: ST_TO_ADDR
// vc_control := control ;
25609: LD_ADDR_OWVAR 38
25613: PUSH
25614: LD_VAR 0 3
25618: ST_TO_ADDR
// vc_weapon := weapon ;
25619: LD_ADDR_OWVAR 40
25623: PUSH
25624: LD_VAR 0 4
25628: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25629: LD_ADDR_OWVAR 41
25633: PUSH
25634: LD_VAR 0 5
25638: ST_TO_ADDR
// end ;
25639: LD_VAR 0 6
25643: RET
// export function WantPlant ( unit ) ; var task ; begin
25644: LD_INT 0
25646: PPUSH
25647: PPUSH
// result := false ;
25648: LD_ADDR_VAR 0 2
25652: PUSH
25653: LD_INT 0
25655: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25656: LD_ADDR_VAR 0 3
25660: PUSH
25661: LD_VAR 0 1
25665: PPUSH
25666: CALL_OW 437
25670: ST_TO_ADDR
// if task then
25671: LD_VAR 0 3
25675: IFFALSE 25703
// if task [ 1 ] [ 1 ] = p then
25677: LD_VAR 0 3
25681: PUSH
25682: LD_INT 1
25684: ARRAY
25685: PUSH
25686: LD_INT 1
25688: ARRAY
25689: PUSH
25690: LD_STRING p
25692: EQUAL
25693: IFFALSE 25703
// result := true ;
25695: LD_ADDR_VAR 0 2
25699: PUSH
25700: LD_INT 1
25702: ST_TO_ADDR
// end ;
25703: LD_VAR 0 2
25707: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25708: LD_INT 0
25710: PPUSH
25711: PPUSH
25712: PPUSH
25713: PPUSH
// if pos < 1 then
25714: LD_VAR 0 2
25718: PUSH
25719: LD_INT 1
25721: LESS
25722: IFFALSE 25726
// exit ;
25724: GO 26029
// if pos = 1 then
25726: LD_VAR 0 2
25730: PUSH
25731: LD_INT 1
25733: EQUAL
25734: IFFALSE 25767
// result := Replace ( arr , pos [ 1 ] , value ) else
25736: LD_ADDR_VAR 0 4
25740: PUSH
25741: LD_VAR 0 1
25745: PPUSH
25746: LD_VAR 0 2
25750: PUSH
25751: LD_INT 1
25753: ARRAY
25754: PPUSH
25755: LD_VAR 0 3
25759: PPUSH
25760: CALL_OW 1
25764: ST_TO_ADDR
25765: GO 26029
// begin tmp := arr ;
25767: LD_ADDR_VAR 0 6
25771: PUSH
25772: LD_VAR 0 1
25776: ST_TO_ADDR
// s_arr := [ tmp ] ;
25777: LD_ADDR_VAR 0 7
25781: PUSH
25782: LD_VAR 0 6
25786: PUSH
25787: EMPTY
25788: LIST
25789: ST_TO_ADDR
// for i = 1 to pos - 1 do
25790: LD_ADDR_VAR 0 5
25794: PUSH
25795: DOUBLE
25796: LD_INT 1
25798: DEC
25799: ST_TO_ADDR
25800: LD_VAR 0 2
25804: PUSH
25805: LD_INT 1
25807: MINUS
25808: PUSH
25809: FOR_TO
25810: IFFALSE 25855
// begin tmp := tmp [ pos [ i ] ] ;
25812: LD_ADDR_VAR 0 6
25816: PUSH
25817: LD_VAR 0 6
25821: PUSH
25822: LD_VAR 0 2
25826: PUSH
25827: LD_VAR 0 5
25831: ARRAY
25832: ARRAY
25833: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25834: LD_ADDR_VAR 0 7
25838: PUSH
25839: LD_VAR 0 7
25843: PUSH
25844: LD_VAR 0 6
25848: PUSH
25849: EMPTY
25850: LIST
25851: ADD
25852: ST_TO_ADDR
// end ;
25853: GO 25809
25855: POP
25856: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25857: LD_ADDR_VAR 0 6
25861: PUSH
25862: LD_VAR 0 6
25866: PPUSH
25867: LD_VAR 0 2
25871: PUSH
25872: LD_VAR 0 2
25876: ARRAY
25877: PPUSH
25878: LD_VAR 0 3
25882: PPUSH
25883: CALL_OW 1
25887: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25888: LD_ADDR_VAR 0 7
25892: PUSH
25893: LD_VAR 0 7
25897: PPUSH
25898: LD_VAR 0 7
25902: PPUSH
25903: LD_VAR 0 6
25907: PPUSH
25908: CALL_OW 1
25912: ST_TO_ADDR
// for i = s_arr downto 2 do
25913: LD_ADDR_VAR 0 5
25917: PUSH
25918: DOUBLE
25919: LD_VAR 0 7
25923: INC
25924: ST_TO_ADDR
25925: LD_INT 2
25927: PUSH
25928: FOR_DOWNTO
25929: IFFALSE 26013
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25931: LD_ADDR_VAR 0 6
25935: PUSH
25936: LD_VAR 0 7
25940: PUSH
25941: LD_VAR 0 5
25945: PUSH
25946: LD_INT 1
25948: MINUS
25949: ARRAY
25950: PPUSH
25951: LD_VAR 0 2
25955: PUSH
25956: LD_VAR 0 5
25960: PUSH
25961: LD_INT 1
25963: MINUS
25964: ARRAY
25965: PPUSH
25966: LD_VAR 0 7
25970: PUSH
25971: LD_VAR 0 5
25975: ARRAY
25976: PPUSH
25977: CALL_OW 1
25981: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25982: LD_ADDR_VAR 0 7
25986: PUSH
25987: LD_VAR 0 7
25991: PPUSH
25992: LD_VAR 0 5
25996: PUSH
25997: LD_INT 1
25999: MINUS
26000: PPUSH
26001: LD_VAR 0 6
26005: PPUSH
26006: CALL_OW 1
26010: ST_TO_ADDR
// end ;
26011: GO 25928
26013: POP
26014: POP
// result := s_arr [ 1 ] ;
26015: LD_ADDR_VAR 0 4
26019: PUSH
26020: LD_VAR 0 7
26024: PUSH
26025: LD_INT 1
26027: ARRAY
26028: ST_TO_ADDR
// end ; end ;
26029: LD_VAR 0 4
26033: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26034: LD_INT 0
26036: PPUSH
26037: PPUSH
// if not list then
26038: LD_VAR 0 1
26042: NOT
26043: IFFALSE 26047
// exit ;
26045: GO 26138
// i := list [ pos1 ] ;
26047: LD_ADDR_VAR 0 5
26051: PUSH
26052: LD_VAR 0 1
26056: PUSH
26057: LD_VAR 0 2
26061: ARRAY
26062: ST_TO_ADDR
// if not i then
26063: LD_VAR 0 5
26067: NOT
26068: IFFALSE 26072
// exit ;
26070: GO 26138
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26072: LD_ADDR_VAR 0 1
26076: PUSH
26077: LD_VAR 0 1
26081: PPUSH
26082: LD_VAR 0 2
26086: PPUSH
26087: LD_VAR 0 1
26091: PUSH
26092: LD_VAR 0 3
26096: ARRAY
26097: PPUSH
26098: CALL_OW 1
26102: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26103: LD_ADDR_VAR 0 1
26107: PUSH
26108: LD_VAR 0 1
26112: PPUSH
26113: LD_VAR 0 3
26117: PPUSH
26118: LD_VAR 0 5
26122: PPUSH
26123: CALL_OW 1
26127: ST_TO_ADDR
// result := list ;
26128: LD_ADDR_VAR 0 4
26132: PUSH
26133: LD_VAR 0 1
26137: ST_TO_ADDR
// end ;
26138: LD_VAR 0 4
26142: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26143: LD_INT 0
26145: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26146: LD_ADDR_VAR 0 5
26150: PUSH
26151: LD_VAR 0 1
26155: PPUSH
26156: CALL_OW 250
26160: PPUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 251
26170: PPUSH
26171: LD_VAR 0 2
26175: PPUSH
26176: LD_VAR 0 3
26180: PPUSH
26181: LD_VAR 0 4
26185: PPUSH
26186: CALL 26196 0 5
26190: ST_TO_ADDR
// end ;
26191: LD_VAR 0 5
26195: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26196: LD_INT 0
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
// if not list then
26202: LD_VAR 0 3
26206: NOT
26207: IFFALSE 26211
// exit ;
26209: GO 26599
// result := [ ] ;
26211: LD_ADDR_VAR 0 6
26215: PUSH
26216: EMPTY
26217: ST_TO_ADDR
// for i in list do
26218: LD_ADDR_VAR 0 7
26222: PUSH
26223: LD_VAR 0 3
26227: PUSH
26228: FOR_IN
26229: IFFALSE 26431
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26231: LD_ADDR_VAR 0 9
26235: PUSH
26236: LD_VAR 0 7
26240: PPUSH
26241: LD_VAR 0 1
26245: PPUSH
26246: LD_VAR 0 2
26250: PPUSH
26251: CALL_OW 297
26255: ST_TO_ADDR
// if not result then
26256: LD_VAR 0 6
26260: NOT
26261: IFFALSE 26287
// result := [ [ i , tmp ] ] else
26263: LD_ADDR_VAR 0 6
26267: PUSH
26268: LD_VAR 0 7
26272: PUSH
26273: LD_VAR 0 9
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: EMPTY
26283: LIST
26284: ST_TO_ADDR
26285: GO 26429
// begin if result [ result ] [ 2 ] < tmp then
26287: LD_VAR 0 6
26291: PUSH
26292: LD_VAR 0 6
26296: ARRAY
26297: PUSH
26298: LD_INT 2
26300: ARRAY
26301: PUSH
26302: LD_VAR 0 9
26306: LESS
26307: IFFALSE 26349
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26309: LD_ADDR_VAR 0 6
26313: PUSH
26314: LD_VAR 0 6
26318: PPUSH
26319: LD_VAR 0 6
26323: PUSH
26324: LD_INT 1
26326: PLUS
26327: PPUSH
26328: LD_VAR 0 7
26332: PUSH
26333: LD_VAR 0 9
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PPUSH
26342: CALL_OW 2
26346: ST_TO_ADDR
26347: GO 26429
// for j = 1 to result do
26349: LD_ADDR_VAR 0 8
26353: PUSH
26354: DOUBLE
26355: LD_INT 1
26357: DEC
26358: ST_TO_ADDR
26359: LD_VAR 0 6
26363: PUSH
26364: FOR_TO
26365: IFFALSE 26427
// begin if tmp < result [ j ] [ 2 ] then
26367: LD_VAR 0 9
26371: PUSH
26372: LD_VAR 0 6
26376: PUSH
26377: LD_VAR 0 8
26381: ARRAY
26382: PUSH
26383: LD_INT 2
26385: ARRAY
26386: LESS
26387: IFFALSE 26425
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26389: LD_ADDR_VAR 0 6
26393: PUSH
26394: LD_VAR 0 6
26398: PPUSH
26399: LD_VAR 0 8
26403: PPUSH
26404: LD_VAR 0 7
26408: PUSH
26409: LD_VAR 0 9
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PPUSH
26418: CALL_OW 2
26422: ST_TO_ADDR
// break ;
26423: GO 26427
// end ; end ;
26425: GO 26364
26427: POP
26428: POP
// end ; end ;
26429: GO 26228
26431: POP
26432: POP
// if result and not asc then
26433: LD_VAR 0 6
26437: PUSH
26438: LD_VAR 0 4
26442: NOT
26443: AND
26444: IFFALSE 26519
// begin tmp := result ;
26446: LD_ADDR_VAR 0 9
26450: PUSH
26451: LD_VAR 0 6
26455: ST_TO_ADDR
// for i = tmp downto 1 do
26456: LD_ADDR_VAR 0 7
26460: PUSH
26461: DOUBLE
26462: LD_VAR 0 9
26466: INC
26467: ST_TO_ADDR
26468: LD_INT 1
26470: PUSH
26471: FOR_DOWNTO
26472: IFFALSE 26517
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26474: LD_ADDR_VAR 0 6
26478: PUSH
26479: LD_VAR 0 6
26483: PPUSH
26484: LD_VAR 0 9
26488: PUSH
26489: LD_VAR 0 7
26493: MINUS
26494: PUSH
26495: LD_INT 1
26497: PLUS
26498: PPUSH
26499: LD_VAR 0 9
26503: PUSH
26504: LD_VAR 0 7
26508: ARRAY
26509: PPUSH
26510: CALL_OW 1
26514: ST_TO_ADDR
26515: GO 26471
26517: POP
26518: POP
// end ; tmp := [ ] ;
26519: LD_ADDR_VAR 0 9
26523: PUSH
26524: EMPTY
26525: ST_TO_ADDR
// if mode then
26526: LD_VAR 0 5
26530: IFFALSE 26599
// begin for i = 1 to result do
26532: LD_ADDR_VAR 0 7
26536: PUSH
26537: DOUBLE
26538: LD_INT 1
26540: DEC
26541: ST_TO_ADDR
26542: LD_VAR 0 6
26546: PUSH
26547: FOR_TO
26548: IFFALSE 26587
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26550: LD_ADDR_VAR 0 9
26554: PUSH
26555: LD_VAR 0 9
26559: PPUSH
26560: LD_VAR 0 7
26564: PPUSH
26565: LD_VAR 0 6
26569: PUSH
26570: LD_VAR 0 7
26574: ARRAY
26575: PUSH
26576: LD_INT 1
26578: ARRAY
26579: PPUSH
26580: CALL_OW 1
26584: ST_TO_ADDR
26585: GO 26547
26587: POP
26588: POP
// result := tmp ;
26589: LD_ADDR_VAR 0 6
26593: PUSH
26594: LD_VAR 0 9
26598: ST_TO_ADDR
// end ; end ;
26599: LD_VAR 0 6
26603: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26604: LD_INT 0
26606: PPUSH
26607: PPUSH
26608: PPUSH
26609: PPUSH
26610: PPUSH
26611: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26612: LD_ADDR_VAR 0 5
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: ST_TO_ADDR
// if not x or not y then
26634: LD_VAR 0 2
26638: NOT
26639: PUSH
26640: LD_VAR 0 3
26644: NOT
26645: OR
26646: IFFALSE 26650
// exit ;
26648: GO 28296
// if not range then
26650: LD_VAR 0 4
26654: NOT
26655: IFFALSE 26665
// range := 10 ;
26657: LD_ADDR_VAR 0 4
26661: PUSH
26662: LD_INT 10
26664: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26665: LD_ADDR_VAR 0 8
26669: PUSH
26670: LD_INT 81
26672: PUSH
26673: LD_VAR 0 1
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 92
26684: PUSH
26685: LD_VAR 0 2
26689: PUSH
26690: LD_VAR 0 3
26694: PUSH
26695: LD_VAR 0 4
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 3
26708: PUSH
26709: LD_INT 21
26711: PUSH
26712: LD_INT 3
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: LIST
26727: PPUSH
26728: CALL_OW 69
26732: ST_TO_ADDR
// if not tmp then
26733: LD_VAR 0 8
26737: NOT
26738: IFFALSE 26742
// exit ;
26740: GO 28296
// for i in tmp do
26742: LD_ADDR_VAR 0 6
26746: PUSH
26747: LD_VAR 0 8
26751: PUSH
26752: FOR_IN
26753: IFFALSE 28271
// begin points := [ 0 , 0 , 0 ] ;
26755: LD_ADDR_VAR 0 9
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: ST_TO_ADDR
// bpoints := 1 ;
26774: LD_ADDR_VAR 0 10
26778: PUSH
26779: LD_INT 1
26781: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26782: LD_VAR 0 6
26786: PPUSH
26787: CALL_OW 247
26791: PUSH
26792: LD_INT 1
26794: DOUBLE
26795: EQUAL
26796: IFTRUE 26800
26798: GO 27378
26800: POP
// begin if GetClass ( i ) = 1 then
26801: LD_VAR 0 6
26805: PPUSH
26806: CALL_OW 257
26810: PUSH
26811: LD_INT 1
26813: EQUAL
26814: IFFALSE 26835
// points := [ 10 , 5 , 3 ] ;
26816: LD_ADDR_VAR 0 9
26820: PUSH
26821: LD_INT 10
26823: PUSH
26824: LD_INT 5
26826: PUSH
26827: LD_INT 3
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26835: LD_VAR 0 6
26839: PPUSH
26840: CALL_OW 257
26844: PUSH
26845: LD_INT 2
26847: PUSH
26848: LD_INT 3
26850: PUSH
26851: LD_INT 4
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: IN
26859: IFFALSE 26880
// points := [ 3 , 2 , 1 ] ;
26861: LD_ADDR_VAR 0 9
26865: PUSH
26866: LD_INT 3
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26880: LD_VAR 0 6
26884: PPUSH
26885: CALL_OW 257
26889: PUSH
26890: LD_INT 5
26892: EQUAL
26893: IFFALSE 26914
// points := [ 130 , 5 , 2 ] ;
26895: LD_ADDR_VAR 0 9
26899: PUSH
26900: LD_INT 130
26902: PUSH
26903: LD_INT 5
26905: PUSH
26906: LD_INT 2
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: LIST
26913: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26914: LD_VAR 0 6
26918: PPUSH
26919: CALL_OW 257
26923: PUSH
26924: LD_INT 8
26926: EQUAL
26927: IFFALSE 26948
// points := [ 35 , 35 , 30 ] ;
26929: LD_ADDR_VAR 0 9
26933: PUSH
26934: LD_INT 35
26936: PUSH
26937: LD_INT 35
26939: PUSH
26940: LD_INT 30
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26948: LD_VAR 0 6
26952: PPUSH
26953: CALL_OW 257
26957: PUSH
26958: LD_INT 9
26960: EQUAL
26961: IFFALSE 26982
// points := [ 20 , 55 , 40 ] ;
26963: LD_ADDR_VAR 0 9
26967: PUSH
26968: LD_INT 20
26970: PUSH
26971: LD_INT 55
26973: PUSH
26974: LD_INT 40
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: LIST
26981: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26982: LD_VAR 0 6
26986: PPUSH
26987: CALL_OW 257
26991: PUSH
26992: LD_INT 12
26994: PUSH
26995: LD_INT 16
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: IN
27002: IFFALSE 27023
// points := [ 5 , 3 , 2 ] ;
27004: LD_ADDR_VAR 0 9
27008: PUSH
27009: LD_INT 5
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27023: LD_VAR 0 6
27027: PPUSH
27028: CALL_OW 257
27032: PUSH
27033: LD_INT 17
27035: EQUAL
27036: IFFALSE 27057
// points := [ 100 , 50 , 75 ] ;
27038: LD_ADDR_VAR 0 9
27042: PUSH
27043: LD_INT 100
27045: PUSH
27046: LD_INT 50
27048: PUSH
27049: LD_INT 75
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: LIST
27056: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27057: LD_VAR 0 6
27061: PPUSH
27062: CALL_OW 257
27066: PUSH
27067: LD_INT 15
27069: EQUAL
27070: IFFALSE 27091
// points := [ 10 , 5 , 3 ] ;
27072: LD_ADDR_VAR 0 9
27076: PUSH
27077: LD_INT 10
27079: PUSH
27080: LD_INT 5
27082: PUSH
27083: LD_INT 3
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27091: LD_VAR 0 6
27095: PPUSH
27096: CALL_OW 257
27100: PUSH
27101: LD_INT 14
27103: EQUAL
27104: IFFALSE 27125
// points := [ 10 , 0 , 0 ] ;
27106: LD_ADDR_VAR 0 9
27110: PUSH
27111: LD_INT 10
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27125: LD_VAR 0 6
27129: PPUSH
27130: CALL_OW 257
27134: PUSH
27135: LD_INT 11
27137: EQUAL
27138: IFFALSE 27159
// points := [ 30 , 10 , 5 ] ;
27140: LD_ADDR_VAR 0 9
27144: PUSH
27145: LD_INT 30
27147: PUSH
27148: LD_INT 10
27150: PUSH
27151: LD_INT 5
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27159: LD_VAR 0 1
27163: PPUSH
27164: LD_INT 5
27166: PPUSH
27167: CALL_OW 321
27171: PUSH
27172: LD_INT 2
27174: EQUAL
27175: IFFALSE 27192
// bpoints := bpoints * 1.8 ;
27177: LD_ADDR_VAR 0 10
27181: PUSH
27182: LD_VAR 0 10
27186: PUSH
27187: LD_REAL  1.80000000000000E+0000
27190: MUL
27191: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27192: LD_VAR 0 6
27196: PPUSH
27197: CALL_OW 257
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: LD_INT 3
27210: PUSH
27211: LD_INT 4
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: IN
27220: PUSH
27221: LD_VAR 0 1
27225: PPUSH
27226: LD_INT 51
27228: PPUSH
27229: CALL_OW 321
27233: PUSH
27234: LD_INT 2
27236: EQUAL
27237: AND
27238: IFFALSE 27255
// bpoints := bpoints * 1.2 ;
27240: LD_ADDR_VAR 0 10
27244: PUSH
27245: LD_VAR 0 10
27249: PUSH
27250: LD_REAL  1.20000000000000E+0000
27253: MUL
27254: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27255: LD_VAR 0 6
27259: PPUSH
27260: CALL_OW 257
27264: PUSH
27265: LD_INT 5
27267: PUSH
27268: LD_INT 7
27270: PUSH
27271: LD_INT 9
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: LIST
27278: IN
27279: PUSH
27280: LD_VAR 0 1
27284: PPUSH
27285: LD_INT 52
27287: PPUSH
27288: CALL_OW 321
27292: PUSH
27293: LD_INT 2
27295: EQUAL
27296: AND
27297: IFFALSE 27314
// bpoints := bpoints * 1.5 ;
27299: LD_ADDR_VAR 0 10
27303: PUSH
27304: LD_VAR 0 10
27308: PUSH
27309: LD_REAL  1.50000000000000E+0000
27312: MUL
27313: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27314: LD_VAR 0 1
27318: PPUSH
27319: LD_INT 66
27321: PPUSH
27322: CALL_OW 321
27326: PUSH
27327: LD_INT 2
27329: EQUAL
27330: IFFALSE 27347
// bpoints := bpoints * 1.1 ;
27332: LD_ADDR_VAR 0 10
27336: PUSH
27337: LD_VAR 0 10
27341: PUSH
27342: LD_REAL  1.10000000000000E+0000
27345: MUL
27346: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27347: LD_ADDR_VAR 0 10
27351: PUSH
27352: LD_VAR 0 10
27356: PUSH
27357: LD_VAR 0 6
27361: PPUSH
27362: LD_INT 1
27364: PPUSH
27365: CALL_OW 259
27369: PUSH
27370: LD_REAL  1.15000000000000E+0000
27373: MUL
27374: MUL
27375: ST_TO_ADDR
// end ; unit_vehicle :
27376: GO 28200
27378: LD_INT 2
27380: DOUBLE
27381: EQUAL
27382: IFTRUE 27386
27384: GO 28188
27386: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27387: LD_VAR 0 6
27391: PPUSH
27392: CALL_OW 264
27396: PUSH
27397: LD_INT 2
27399: PUSH
27400: LD_INT 42
27402: PUSH
27403: LD_INT 24
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: IN
27411: IFFALSE 27432
// points := [ 25 , 5 , 3 ] ;
27413: LD_ADDR_VAR 0 9
27417: PUSH
27418: LD_INT 25
27420: PUSH
27421: LD_INT 5
27423: PUSH
27424: LD_INT 3
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: LIST
27431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27432: LD_VAR 0 6
27436: PPUSH
27437: CALL_OW 264
27441: PUSH
27442: LD_INT 4
27444: PUSH
27445: LD_INT 43
27447: PUSH
27448: LD_INT 25
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: LIST
27455: IN
27456: IFFALSE 27477
// points := [ 40 , 15 , 5 ] ;
27458: LD_ADDR_VAR 0 9
27462: PUSH
27463: LD_INT 40
27465: PUSH
27466: LD_INT 15
27468: PUSH
27469: LD_INT 5
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: LIST
27476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27477: LD_VAR 0 6
27481: PPUSH
27482: CALL_OW 264
27486: PUSH
27487: LD_INT 3
27489: PUSH
27490: LD_INT 23
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: IN
27497: IFFALSE 27518
// points := [ 7 , 25 , 8 ] ;
27499: LD_ADDR_VAR 0 9
27503: PUSH
27504: LD_INT 7
27506: PUSH
27507: LD_INT 25
27509: PUSH
27510: LD_INT 8
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: LIST
27517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27518: LD_VAR 0 6
27522: PPUSH
27523: CALL_OW 264
27527: PUSH
27528: LD_INT 5
27530: PUSH
27531: LD_INT 27
27533: PUSH
27534: LD_INT 44
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: IN
27542: IFFALSE 27563
// points := [ 14 , 50 , 16 ] ;
27544: LD_ADDR_VAR 0 9
27548: PUSH
27549: LD_INT 14
27551: PUSH
27552: LD_INT 50
27554: PUSH
27555: LD_INT 16
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: LIST
27562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27563: LD_VAR 0 6
27567: PPUSH
27568: CALL_OW 264
27572: PUSH
27573: LD_INT 6
27575: PUSH
27576: LD_INT 46
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: IN
27583: IFFALSE 27604
// points := [ 32 , 120 , 70 ] ;
27585: LD_ADDR_VAR 0 9
27589: PUSH
27590: LD_INT 32
27592: PUSH
27593: LD_INT 120
27595: PUSH
27596: LD_INT 70
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: LIST
27603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27604: LD_VAR 0 6
27608: PPUSH
27609: CALL_OW 264
27613: PUSH
27614: LD_INT 7
27616: PUSH
27617: LD_INT 28
27619: PUSH
27620: LD_INT 45
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: IN
27628: IFFALSE 27649
// points := [ 35 , 20 , 45 ] ;
27630: LD_ADDR_VAR 0 9
27634: PUSH
27635: LD_INT 35
27637: PUSH
27638: LD_INT 20
27640: PUSH
27641: LD_INT 45
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27649: LD_VAR 0 6
27653: PPUSH
27654: CALL_OW 264
27658: PUSH
27659: LD_INT 47
27661: PUSH
27662: EMPTY
27663: LIST
27664: IN
27665: IFFALSE 27686
// points := [ 67 , 45 , 75 ] ;
27667: LD_ADDR_VAR 0 9
27671: PUSH
27672: LD_INT 67
27674: PUSH
27675: LD_INT 45
27677: PUSH
27678: LD_INT 75
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: LIST
27685: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27686: LD_VAR 0 6
27690: PPUSH
27691: CALL_OW 264
27695: PUSH
27696: LD_INT 26
27698: PUSH
27699: EMPTY
27700: LIST
27701: IN
27702: IFFALSE 27723
// points := [ 120 , 30 , 80 ] ;
27704: LD_ADDR_VAR 0 9
27708: PUSH
27709: LD_INT 120
27711: PUSH
27712: LD_INT 30
27714: PUSH
27715: LD_INT 80
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27723: LD_VAR 0 6
27727: PPUSH
27728: CALL_OW 264
27732: PUSH
27733: LD_INT 22
27735: PUSH
27736: EMPTY
27737: LIST
27738: IN
27739: IFFALSE 27760
// points := [ 40 , 1 , 1 ] ;
27741: LD_ADDR_VAR 0 9
27745: PUSH
27746: LD_INT 40
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: LIST
27759: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27760: LD_VAR 0 6
27764: PPUSH
27765: CALL_OW 264
27769: PUSH
27770: LD_INT 29
27772: PUSH
27773: EMPTY
27774: LIST
27775: IN
27776: IFFALSE 27797
// points := [ 70 , 200 , 400 ] ;
27778: LD_ADDR_VAR 0 9
27782: PUSH
27783: LD_INT 70
27785: PUSH
27786: LD_INT 200
27788: PUSH
27789: LD_INT 400
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: LIST
27796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27797: LD_VAR 0 6
27801: PPUSH
27802: CALL_OW 264
27806: PUSH
27807: LD_INT 14
27809: PUSH
27810: LD_INT 53
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: IN
27817: IFFALSE 27838
// points := [ 40 , 10 , 20 ] ;
27819: LD_ADDR_VAR 0 9
27823: PUSH
27824: LD_INT 40
27826: PUSH
27827: LD_INT 10
27829: PUSH
27830: LD_INT 20
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27838: LD_VAR 0 6
27842: PPUSH
27843: CALL_OW 264
27847: PUSH
27848: LD_INT 9
27850: PUSH
27851: EMPTY
27852: LIST
27853: IN
27854: IFFALSE 27875
// points := [ 5 , 70 , 20 ] ;
27856: LD_ADDR_VAR 0 9
27860: PUSH
27861: LD_INT 5
27863: PUSH
27864: LD_INT 70
27866: PUSH
27867: LD_INT 20
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27875: LD_VAR 0 6
27879: PPUSH
27880: CALL_OW 264
27884: PUSH
27885: LD_INT 10
27887: PUSH
27888: EMPTY
27889: LIST
27890: IN
27891: IFFALSE 27912
// points := [ 35 , 110 , 70 ] ;
27893: LD_ADDR_VAR 0 9
27897: PUSH
27898: LD_INT 35
27900: PUSH
27901: LD_INT 110
27903: PUSH
27904: LD_INT 70
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27912: LD_VAR 0 6
27916: PPUSH
27917: CALL_OW 265
27921: PUSH
27922: LD_INT 25
27924: EQUAL
27925: IFFALSE 27946
// points := [ 80 , 65 , 100 ] ;
27927: LD_ADDR_VAR 0 9
27931: PUSH
27932: LD_INT 80
27934: PUSH
27935: LD_INT 65
27937: PUSH
27938: LD_INT 100
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: LIST
27945: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27946: LD_VAR 0 6
27950: PPUSH
27951: CALL_OW 263
27955: PUSH
27956: LD_INT 1
27958: EQUAL
27959: IFFALSE 27994
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27961: LD_ADDR_VAR 0 10
27965: PUSH
27966: LD_VAR 0 10
27970: PUSH
27971: LD_VAR 0 6
27975: PPUSH
27976: CALL_OW 311
27980: PPUSH
27981: LD_INT 3
27983: PPUSH
27984: CALL_OW 259
27988: PUSH
27989: LD_INT 4
27991: MUL
27992: MUL
27993: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27994: LD_VAR 0 6
27998: PPUSH
27999: CALL_OW 263
28003: PUSH
28004: LD_INT 2
28006: EQUAL
28007: IFFALSE 28058
// begin j := IsControledBy ( i ) ;
28009: LD_ADDR_VAR 0 7
28013: PUSH
28014: LD_VAR 0 6
28018: PPUSH
28019: CALL_OW 312
28023: ST_TO_ADDR
// if j then
28024: LD_VAR 0 7
28028: IFFALSE 28058
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28030: LD_ADDR_VAR 0 10
28034: PUSH
28035: LD_VAR 0 10
28039: PUSH
28040: LD_VAR 0 7
28044: PPUSH
28045: LD_INT 3
28047: PPUSH
28048: CALL_OW 259
28052: PUSH
28053: LD_INT 3
28055: MUL
28056: MUL
28057: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28058: LD_VAR 0 6
28062: PPUSH
28063: CALL_OW 264
28067: PUSH
28068: LD_INT 5
28070: PUSH
28071: LD_INT 6
28073: PUSH
28074: LD_INT 46
28076: PUSH
28077: LD_INT 44
28079: PUSH
28080: LD_INT 47
28082: PUSH
28083: LD_INT 45
28085: PUSH
28086: LD_INT 28
28088: PUSH
28089: LD_INT 7
28091: PUSH
28092: LD_INT 27
28094: PUSH
28095: LD_INT 29
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: IN
28110: PUSH
28111: LD_VAR 0 1
28115: PPUSH
28116: LD_INT 52
28118: PPUSH
28119: CALL_OW 321
28123: PUSH
28124: LD_INT 2
28126: EQUAL
28127: AND
28128: IFFALSE 28145
// bpoints := bpoints * 1.2 ;
28130: LD_ADDR_VAR 0 10
28134: PUSH
28135: LD_VAR 0 10
28139: PUSH
28140: LD_REAL  1.20000000000000E+0000
28143: MUL
28144: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28145: LD_VAR 0 6
28149: PPUSH
28150: CALL_OW 264
28154: PUSH
28155: LD_INT 6
28157: PUSH
28158: LD_INT 46
28160: PUSH
28161: LD_INT 47
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: LIST
28168: IN
28169: IFFALSE 28186
// bpoints := bpoints * 1.2 ;
28171: LD_ADDR_VAR 0 10
28175: PUSH
28176: LD_VAR 0 10
28180: PUSH
28181: LD_REAL  1.20000000000000E+0000
28184: MUL
28185: ST_TO_ADDR
// end ; unit_building :
28186: GO 28200
28188: LD_INT 3
28190: DOUBLE
28191: EQUAL
28192: IFTRUE 28196
28194: GO 28199
28196: POP
// ; end ;
28197: GO 28200
28199: POP
// for j = 1 to 3 do
28200: LD_ADDR_VAR 0 7
28204: PUSH
28205: DOUBLE
28206: LD_INT 1
28208: DEC
28209: ST_TO_ADDR
28210: LD_INT 3
28212: PUSH
28213: FOR_TO
28214: IFFALSE 28267
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28216: LD_ADDR_VAR 0 5
28220: PUSH
28221: LD_VAR 0 5
28225: PPUSH
28226: LD_VAR 0 7
28230: PPUSH
28231: LD_VAR 0 5
28235: PUSH
28236: LD_VAR 0 7
28240: ARRAY
28241: PUSH
28242: LD_VAR 0 9
28246: PUSH
28247: LD_VAR 0 7
28251: ARRAY
28252: PUSH
28253: LD_VAR 0 10
28257: MUL
28258: PLUS
28259: PPUSH
28260: CALL_OW 1
28264: ST_TO_ADDR
28265: GO 28213
28267: POP
28268: POP
// end ;
28269: GO 26752
28271: POP
28272: POP
// result := Replace ( result , 4 , tmp ) ;
28273: LD_ADDR_VAR 0 5
28277: PUSH
28278: LD_VAR 0 5
28282: PPUSH
28283: LD_INT 4
28285: PPUSH
28286: LD_VAR 0 8
28290: PPUSH
28291: CALL_OW 1
28295: ST_TO_ADDR
// end ;
28296: LD_VAR 0 5
28300: RET
// export function DangerAtRange ( unit , range ) ; begin
28301: LD_INT 0
28303: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: LD_VAR 0 1
28313: PPUSH
28314: CALL_OW 255
28318: PPUSH
28319: LD_VAR 0 1
28323: PPUSH
28324: CALL_OW 250
28328: PPUSH
28329: LD_VAR 0 1
28333: PPUSH
28334: CALL_OW 251
28338: PPUSH
28339: LD_VAR 0 2
28343: PPUSH
28344: CALL 26604 0 4
28348: ST_TO_ADDR
// end ;
28349: LD_VAR 0 3
28353: RET
// export function DangerInArea ( side , area ) ; begin
28354: LD_INT 0
28356: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28357: LD_ADDR_VAR 0 3
28361: PUSH
28362: LD_VAR 0 2
28366: PPUSH
28367: LD_INT 81
28369: PUSH
28370: LD_VAR 0 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 70
28383: ST_TO_ADDR
// end ;
28384: LD_VAR 0 3
28388: RET
// export function IsExtension ( b ) ; begin
28389: LD_INT 0
28391: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28392: LD_ADDR_VAR 0 2
28396: PUSH
28397: LD_VAR 0 1
28401: PUSH
28402: LD_INT 23
28404: PUSH
28405: LD_INT 20
28407: PUSH
28408: LD_INT 22
28410: PUSH
28411: LD_INT 17
28413: PUSH
28414: LD_INT 24
28416: PUSH
28417: LD_INT 21
28419: PUSH
28420: LD_INT 19
28422: PUSH
28423: LD_INT 16
28425: PUSH
28426: LD_INT 25
28428: PUSH
28429: LD_INT 18
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: IN
28444: ST_TO_ADDR
// end ;
28445: LD_VAR 0 2
28449: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28450: LD_INT 0
28452: PPUSH
28453: PPUSH
28454: PPUSH
// result := [ ] ;
28455: LD_ADDR_VAR 0 3
28459: PUSH
28460: EMPTY
28461: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28462: LD_ADDR_VAR 0 4
28466: PUSH
28467: LD_VAR 0 2
28471: PPUSH
28472: LD_INT 21
28474: PUSH
28475: LD_INT 3
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PPUSH
28482: CALL_OW 70
28486: ST_TO_ADDR
// if not tmp then
28487: LD_VAR 0 4
28491: NOT
28492: IFFALSE 28496
// exit ;
28494: GO 28554
// for i in tmp do
28496: LD_ADDR_VAR 0 5
28500: PUSH
28501: LD_VAR 0 4
28505: PUSH
28506: FOR_IN
28507: IFFALSE 28542
// if GetBase ( i ) <> base then
28509: LD_VAR 0 5
28513: PPUSH
28514: CALL_OW 274
28518: PUSH
28519: LD_VAR 0 1
28523: NONEQUAL
28524: IFFALSE 28540
// ComLinkToBase ( base , i ) ;
28526: LD_VAR 0 1
28530: PPUSH
28531: LD_VAR 0 5
28535: PPUSH
28536: CALL_OW 169
28540: GO 28506
28542: POP
28543: POP
// result := tmp ;
28544: LD_ADDR_VAR 0 3
28548: PUSH
28549: LD_VAR 0 4
28553: ST_TO_ADDR
// end ;
28554: LD_VAR 0 3
28558: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28559: LD_INT 0
28561: PPUSH
28562: PPUSH
// if BuildingStatus ( b ) = bs_build then
28563: LD_VAR 0 2
28567: PPUSH
28568: CALL_OW 461
28572: PUSH
28573: LD_INT 1
28575: EQUAL
28576: IFFALSE 28636
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28578: LD_VAR 0 1
28582: PPUSH
28583: LD_STRING h
28585: PUSH
28586: LD_VAR 0 2
28590: PPUSH
28591: CALL_OW 250
28595: PUSH
28596: LD_VAR 0 2
28600: PPUSH
28601: CALL_OW 251
28605: PUSH
28606: LD_VAR 0 2
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: PUSH
28629: EMPTY
28630: LIST
28631: PPUSH
28632: CALL_OW 446
// end ;
28636: LD_VAR 0 3
28640: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28641: LD_INT 0
28643: PPUSH
28644: PPUSH
28645: PPUSH
28646: PPUSH
28647: PPUSH
28648: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28649: LD_VAR 0 1
28653: NOT
28654: PUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 263
28664: PUSH
28665: LD_INT 2
28667: EQUAL
28668: NOT
28669: OR
28670: IFFALSE 28674
// exit ;
28672: GO 28990
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28674: LD_ADDR_VAR 0 6
28678: PUSH
28679: LD_INT 22
28681: PUSH
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 255
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: LD_INT 30
28701: PUSH
28702: LD_INT 36
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 34
28711: PUSH
28712: LD_INT 31
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PPUSH
28728: CALL_OW 69
28732: ST_TO_ADDR
// if not tmp then
28733: LD_VAR 0 6
28737: NOT
28738: IFFALSE 28742
// exit ;
28740: GO 28990
// result := [ ] ;
28742: LD_ADDR_VAR 0 2
28746: PUSH
28747: EMPTY
28748: ST_TO_ADDR
// for i in tmp do
28749: LD_ADDR_VAR 0 3
28753: PUSH
28754: LD_VAR 0 6
28758: PUSH
28759: FOR_IN
28760: IFFALSE 28831
// begin t := UnitsInside ( i ) ;
28762: LD_ADDR_VAR 0 4
28766: PUSH
28767: LD_VAR 0 3
28771: PPUSH
28772: CALL_OW 313
28776: ST_TO_ADDR
// if t then
28777: LD_VAR 0 4
28781: IFFALSE 28829
// for j in t do
28783: LD_ADDR_VAR 0 7
28787: PUSH
28788: LD_VAR 0 4
28792: PUSH
28793: FOR_IN
28794: IFFALSE 28827
// result := Insert ( result , result + 1 , j ) ;
28796: LD_ADDR_VAR 0 2
28800: PUSH
28801: LD_VAR 0 2
28805: PPUSH
28806: LD_VAR 0 2
28810: PUSH
28811: LD_INT 1
28813: PLUS
28814: PPUSH
28815: LD_VAR 0 7
28819: PPUSH
28820: CALL_OW 2
28824: ST_TO_ADDR
28825: GO 28793
28827: POP
28828: POP
// end ;
28829: GO 28759
28831: POP
28832: POP
// if not result then
28833: LD_VAR 0 2
28837: NOT
28838: IFFALSE 28842
// exit ;
28840: GO 28990
// mech := result [ 1 ] ;
28842: LD_ADDR_VAR 0 5
28846: PUSH
28847: LD_VAR 0 2
28851: PUSH
28852: LD_INT 1
28854: ARRAY
28855: ST_TO_ADDR
// if result > 1 then
28856: LD_VAR 0 2
28860: PUSH
28861: LD_INT 1
28863: GREATER
28864: IFFALSE 28976
// for i = 2 to result do
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: DOUBLE
28872: LD_INT 2
28874: DEC
28875: ST_TO_ADDR
28876: LD_VAR 0 2
28880: PUSH
28881: FOR_TO
28882: IFFALSE 28974
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28884: LD_ADDR_VAR 0 4
28888: PUSH
28889: LD_VAR 0 2
28893: PUSH
28894: LD_VAR 0 3
28898: ARRAY
28899: PPUSH
28900: LD_INT 3
28902: PPUSH
28903: CALL_OW 259
28907: PUSH
28908: LD_VAR 0 2
28912: PUSH
28913: LD_VAR 0 3
28917: ARRAY
28918: PPUSH
28919: CALL_OW 432
28923: MINUS
28924: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28925: LD_VAR 0 4
28929: PUSH
28930: LD_VAR 0 5
28934: PPUSH
28935: LD_INT 3
28937: PPUSH
28938: CALL_OW 259
28942: PUSH
28943: LD_VAR 0 5
28947: PPUSH
28948: CALL_OW 432
28952: MINUS
28953: GREATEREQUAL
28954: IFFALSE 28972
// mech := result [ i ] ;
28956: LD_ADDR_VAR 0 5
28960: PUSH
28961: LD_VAR 0 2
28965: PUSH
28966: LD_VAR 0 3
28970: ARRAY
28971: ST_TO_ADDR
// end ;
28972: GO 28881
28974: POP
28975: POP
// ComLinkTo ( vehicle , mech ) ;
28976: LD_VAR 0 1
28980: PPUSH
28981: LD_VAR 0 5
28985: PPUSH
28986: CALL_OW 135
// end ;
28990: LD_VAR 0 2
28994: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28995: LD_INT 0
28997: PPUSH
28998: PPUSH
28999: PPUSH
29000: PPUSH
29001: PPUSH
29002: PPUSH
29003: PPUSH
29004: PPUSH
29005: PPUSH
29006: PPUSH
29007: PPUSH
29008: PPUSH
29009: PPUSH
// result := [ ] ;
29010: LD_ADDR_VAR 0 7
29014: PUSH
29015: EMPTY
29016: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL_OW 266
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: LD_INT 1
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: IN
29037: NOT
29038: IFFALSE 29042
// exit ;
29040: GO 30673
// if name then
29042: LD_VAR 0 3
29046: IFFALSE 29062
// SetBName ( base_dep , name ) ;
29048: LD_VAR 0 1
29052: PPUSH
29053: LD_VAR 0 3
29057: PPUSH
29058: CALL_OW 500
// base := GetBase ( base_dep ) ;
29062: LD_ADDR_VAR 0 15
29066: PUSH
29067: LD_VAR 0 1
29071: PPUSH
29072: CALL_OW 274
29076: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29077: LD_ADDR_VAR 0 16
29081: PUSH
29082: LD_VAR 0 1
29086: PPUSH
29087: CALL_OW 255
29091: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29092: LD_ADDR_VAR 0 17
29096: PUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: CALL_OW 248
29106: ST_TO_ADDR
// if sources then
29107: LD_VAR 0 5
29111: IFFALSE 29158
// for i = 1 to 3 do
29113: LD_ADDR_VAR 0 8
29117: PUSH
29118: DOUBLE
29119: LD_INT 1
29121: DEC
29122: ST_TO_ADDR
29123: LD_INT 3
29125: PUSH
29126: FOR_TO
29127: IFFALSE 29156
// AddResourceType ( base , i , sources [ i ] ) ;
29129: LD_VAR 0 15
29133: PPUSH
29134: LD_VAR 0 8
29138: PPUSH
29139: LD_VAR 0 5
29143: PUSH
29144: LD_VAR 0 8
29148: ARRAY
29149: PPUSH
29150: CALL_OW 276
29154: GO 29126
29156: POP
29157: POP
// buildings := GetBaseBuildings ( base , area ) ;
29158: LD_ADDR_VAR 0 18
29162: PUSH
29163: LD_VAR 0 15
29167: PPUSH
29168: LD_VAR 0 2
29172: PPUSH
29173: CALL 28450 0 2
29177: ST_TO_ADDR
// InitHc ;
29178: CALL_OW 19
// InitUc ;
29182: CALL_OW 18
// uc_side := side ;
29186: LD_ADDR_OWVAR 20
29190: PUSH
29191: LD_VAR 0 16
29195: ST_TO_ADDR
// uc_nation := nation ;
29196: LD_ADDR_OWVAR 21
29200: PUSH
29201: LD_VAR 0 17
29205: ST_TO_ADDR
// if buildings then
29206: LD_VAR 0 18
29210: IFFALSE 30532
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29212: LD_ADDR_VAR 0 19
29216: PUSH
29217: LD_VAR 0 18
29221: PPUSH
29222: LD_INT 2
29224: PUSH
29225: LD_INT 30
29227: PUSH
29228: LD_INT 29
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 30
29237: PUSH
29238: LD_INT 30
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: LIST
29249: PPUSH
29250: CALL_OW 72
29254: ST_TO_ADDR
// if tmp then
29255: LD_VAR 0 19
29259: IFFALSE 29307
// for i in tmp do
29261: LD_ADDR_VAR 0 8
29265: PUSH
29266: LD_VAR 0 19
29270: PUSH
29271: FOR_IN
29272: IFFALSE 29305
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29274: LD_VAR 0 8
29278: PPUSH
29279: CALL_OW 250
29283: PPUSH
29284: LD_VAR 0 8
29288: PPUSH
29289: CALL_OW 251
29293: PPUSH
29294: LD_VAR 0 16
29298: PPUSH
29299: CALL_OW 441
29303: GO 29271
29305: POP
29306: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29307: LD_VAR 0 18
29311: PPUSH
29312: LD_INT 2
29314: PUSH
29315: LD_INT 30
29317: PUSH
29318: LD_INT 32
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 30
29327: PUSH
29328: LD_INT 33
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: LIST
29339: PPUSH
29340: CALL_OW 72
29344: IFFALSE 29432
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29346: LD_ADDR_VAR 0 8
29350: PUSH
29351: LD_VAR 0 18
29355: PPUSH
29356: LD_INT 2
29358: PUSH
29359: LD_INT 30
29361: PUSH
29362: LD_INT 32
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 30
29371: PUSH
29372: LD_INT 33
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: PPUSH
29384: CALL_OW 72
29388: PUSH
29389: FOR_IN
29390: IFFALSE 29430
// begin if not GetBWeapon ( i ) then
29392: LD_VAR 0 8
29396: PPUSH
29397: CALL_OW 269
29401: NOT
29402: IFFALSE 29428
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29404: LD_VAR 0 8
29408: PPUSH
29409: LD_VAR 0 8
29413: PPUSH
29414: LD_VAR 0 2
29418: PPUSH
29419: CALL 30678 0 2
29423: PPUSH
29424: CALL_OW 431
// end ;
29428: GO 29389
29430: POP
29431: POP
// end ; for i = 1 to personel do
29432: LD_ADDR_VAR 0 8
29436: PUSH
29437: DOUBLE
29438: LD_INT 1
29440: DEC
29441: ST_TO_ADDR
29442: LD_VAR 0 6
29446: PUSH
29447: FOR_TO
29448: IFFALSE 30512
// begin if i > 4 then
29450: LD_VAR 0 8
29454: PUSH
29455: LD_INT 4
29457: GREATER
29458: IFFALSE 29462
// break ;
29460: GO 30512
// case i of 1 :
29462: LD_VAR 0 8
29466: PUSH
29467: LD_INT 1
29469: DOUBLE
29470: EQUAL
29471: IFTRUE 29475
29473: GO 29555
29475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29476: LD_ADDR_VAR 0 12
29480: PUSH
29481: LD_VAR 0 18
29485: PPUSH
29486: LD_INT 22
29488: PUSH
29489: LD_VAR 0 16
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 58
29500: PUSH
29501: EMPTY
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: LD_INT 30
29509: PUSH
29510: LD_INT 32
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 30
29519: PUSH
29520: LD_INT 4
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 30
29529: PUSH
29530: LD_INT 5
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: PPUSH
29548: CALL_OW 72
29552: ST_TO_ADDR
29553: GO 29777
29555: LD_INT 2
29557: DOUBLE
29558: EQUAL
29559: IFTRUE 29563
29561: GO 29625
29563: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29564: LD_ADDR_VAR 0 12
29568: PUSH
29569: LD_VAR 0 18
29573: PPUSH
29574: LD_INT 22
29576: PUSH
29577: LD_VAR 0 16
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 2
29588: PUSH
29589: LD_INT 30
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 30
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PPUSH
29618: CALL_OW 72
29622: ST_TO_ADDR
29623: GO 29777
29625: LD_INT 3
29627: DOUBLE
29628: EQUAL
29629: IFTRUE 29633
29631: GO 29695
29633: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29634: LD_ADDR_VAR 0 12
29638: PUSH
29639: LD_VAR 0 18
29643: PPUSH
29644: LD_INT 22
29646: PUSH
29647: LD_VAR 0 16
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 2
29658: PUSH
29659: LD_INT 30
29661: PUSH
29662: LD_INT 2
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 30
29671: PUSH
29672: LD_INT 3
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PPUSH
29688: CALL_OW 72
29692: ST_TO_ADDR
29693: GO 29777
29695: LD_INT 4
29697: DOUBLE
29698: EQUAL
29699: IFTRUE 29703
29701: GO 29776
29703: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29704: LD_ADDR_VAR 0 12
29708: PUSH
29709: LD_VAR 0 18
29713: PPUSH
29714: LD_INT 22
29716: PUSH
29717: LD_VAR 0 16
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 2
29728: PUSH
29729: LD_INT 30
29731: PUSH
29732: LD_INT 6
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 30
29741: PUSH
29742: LD_INT 7
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 30
29751: PUSH
29752: LD_INT 8
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PPUSH
29769: CALL_OW 72
29773: ST_TO_ADDR
29774: GO 29777
29776: POP
// if i = 1 then
29777: LD_VAR 0 8
29781: PUSH
29782: LD_INT 1
29784: EQUAL
29785: IFFALSE 29896
// begin tmp := [ ] ;
29787: LD_ADDR_VAR 0 19
29791: PUSH
29792: EMPTY
29793: ST_TO_ADDR
// for j in f do
29794: LD_ADDR_VAR 0 9
29798: PUSH
29799: LD_VAR 0 12
29803: PUSH
29804: FOR_IN
29805: IFFALSE 29878
// if GetBType ( j ) = b_bunker then
29807: LD_VAR 0 9
29811: PPUSH
29812: CALL_OW 266
29816: PUSH
29817: LD_INT 32
29819: EQUAL
29820: IFFALSE 29847
// tmp := Insert ( tmp , 1 , j ) else
29822: LD_ADDR_VAR 0 19
29826: PUSH
29827: LD_VAR 0 19
29831: PPUSH
29832: LD_INT 1
29834: PPUSH
29835: LD_VAR 0 9
29839: PPUSH
29840: CALL_OW 2
29844: ST_TO_ADDR
29845: GO 29876
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29847: LD_ADDR_VAR 0 19
29851: PUSH
29852: LD_VAR 0 19
29856: PPUSH
29857: LD_VAR 0 19
29861: PUSH
29862: LD_INT 1
29864: PLUS
29865: PPUSH
29866: LD_VAR 0 9
29870: PPUSH
29871: CALL_OW 2
29875: ST_TO_ADDR
29876: GO 29804
29878: POP
29879: POP
// if tmp then
29880: LD_VAR 0 19
29884: IFFALSE 29896
// f := tmp ;
29886: LD_ADDR_VAR 0 12
29890: PUSH
29891: LD_VAR 0 19
29895: ST_TO_ADDR
// end ; x := personel [ i ] ;
29896: LD_ADDR_VAR 0 13
29900: PUSH
29901: LD_VAR 0 6
29905: PUSH
29906: LD_VAR 0 8
29910: ARRAY
29911: ST_TO_ADDR
// if x = - 1 then
29912: LD_VAR 0 13
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: EQUAL
29921: IFFALSE 30130
// begin for j in f do
29923: LD_ADDR_VAR 0 9
29927: PUSH
29928: LD_VAR 0 12
29932: PUSH
29933: FOR_IN
29934: IFFALSE 30126
// repeat InitHc ;
29936: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29940: LD_VAR 0 9
29944: PPUSH
29945: CALL_OW 266
29949: PUSH
29950: LD_INT 5
29952: EQUAL
29953: IFFALSE 30023
// begin if UnitsInside ( j ) < 3 then
29955: LD_VAR 0 9
29959: PPUSH
29960: CALL_OW 313
29964: PUSH
29965: LD_INT 3
29967: LESS
29968: IFFALSE 30004
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29970: LD_INT 0
29972: PPUSH
29973: LD_INT 5
29975: PUSH
29976: LD_INT 8
29978: PUSH
29979: LD_INT 9
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: LIST
29986: PUSH
29987: LD_VAR 0 17
29991: ARRAY
29992: PPUSH
29993: LD_VAR 0 4
29997: PPUSH
29998: CALL_OW 380
30002: GO 30021
// PrepareHuman ( false , i , skill ) ;
30004: LD_INT 0
30006: PPUSH
30007: LD_VAR 0 8
30011: PPUSH
30012: LD_VAR 0 4
30016: PPUSH
30017: CALL_OW 380
// end else
30021: GO 30040
// PrepareHuman ( false , i , skill ) ;
30023: LD_INT 0
30025: PPUSH
30026: LD_VAR 0 8
30030: PPUSH
30031: LD_VAR 0 4
30035: PPUSH
30036: CALL_OW 380
// un := CreateHuman ;
30040: LD_ADDR_VAR 0 14
30044: PUSH
30045: CALL_OW 44
30049: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30050: LD_ADDR_VAR 0 7
30054: PUSH
30055: LD_VAR 0 7
30059: PPUSH
30060: LD_INT 1
30062: PPUSH
30063: LD_VAR 0 14
30067: PPUSH
30068: CALL_OW 2
30072: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30073: LD_VAR 0 14
30077: PPUSH
30078: LD_VAR 0 9
30082: PPUSH
30083: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30087: LD_VAR 0 9
30091: PPUSH
30092: CALL_OW 313
30096: PUSH
30097: LD_INT 6
30099: EQUAL
30100: PUSH
30101: LD_VAR 0 9
30105: PPUSH
30106: CALL_OW 266
30110: PUSH
30111: LD_INT 32
30113: PUSH
30114: LD_INT 31
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: IN
30121: OR
30122: IFFALSE 29936
30124: GO 29933
30126: POP
30127: POP
// end else
30128: GO 30510
// for j = 1 to x do
30130: LD_ADDR_VAR 0 9
30134: PUSH
30135: DOUBLE
30136: LD_INT 1
30138: DEC
30139: ST_TO_ADDR
30140: LD_VAR 0 13
30144: PUSH
30145: FOR_TO
30146: IFFALSE 30508
// begin InitHc ;
30148: CALL_OW 19
// if not f then
30152: LD_VAR 0 12
30156: NOT
30157: IFFALSE 30246
// begin PrepareHuman ( false , i , skill ) ;
30159: LD_INT 0
30161: PPUSH
30162: LD_VAR 0 8
30166: PPUSH
30167: LD_VAR 0 4
30171: PPUSH
30172: CALL_OW 380
// un := CreateHuman ;
30176: LD_ADDR_VAR 0 14
30180: PUSH
30181: CALL_OW 44
30185: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30186: LD_ADDR_VAR 0 7
30190: PUSH
30191: LD_VAR 0 7
30195: PPUSH
30196: LD_INT 1
30198: PPUSH
30199: LD_VAR 0 14
30203: PPUSH
30204: CALL_OW 2
30208: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30209: LD_VAR 0 14
30213: PPUSH
30214: LD_VAR 0 1
30218: PPUSH
30219: CALL_OW 250
30223: PPUSH
30224: LD_VAR 0 1
30228: PPUSH
30229: CALL_OW 251
30233: PPUSH
30234: LD_INT 10
30236: PPUSH
30237: LD_INT 0
30239: PPUSH
30240: CALL_OW 50
// continue ;
30244: GO 30145
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30246: LD_VAR 0 12
30250: PUSH
30251: LD_INT 1
30253: ARRAY
30254: PPUSH
30255: CALL_OW 313
30259: PUSH
30260: LD_VAR 0 12
30264: PUSH
30265: LD_INT 1
30267: ARRAY
30268: PPUSH
30269: CALL_OW 266
30273: PUSH
30274: LD_INT 32
30276: PUSH
30277: LD_INT 31
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: IN
30284: AND
30285: PUSH
30286: LD_VAR 0 12
30290: PUSH
30291: LD_INT 1
30293: ARRAY
30294: PPUSH
30295: CALL_OW 313
30299: PUSH
30300: LD_INT 6
30302: EQUAL
30303: OR
30304: IFFALSE 30324
// f := Delete ( f , 1 ) ;
30306: LD_ADDR_VAR 0 12
30310: PUSH
30311: LD_VAR 0 12
30315: PPUSH
30316: LD_INT 1
30318: PPUSH
30319: CALL_OW 3
30323: ST_TO_ADDR
// if not f then
30324: LD_VAR 0 12
30328: NOT
30329: IFFALSE 30347
// begin x := x + 2 ;
30331: LD_ADDR_VAR 0 13
30335: PUSH
30336: LD_VAR 0 13
30340: PUSH
30341: LD_INT 2
30343: PLUS
30344: ST_TO_ADDR
// continue ;
30345: GO 30145
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30347: LD_VAR 0 12
30351: PUSH
30352: LD_INT 1
30354: ARRAY
30355: PPUSH
30356: CALL_OW 266
30360: PUSH
30361: LD_INT 5
30363: EQUAL
30364: IFFALSE 30438
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30366: LD_VAR 0 12
30370: PUSH
30371: LD_INT 1
30373: ARRAY
30374: PPUSH
30375: CALL_OW 313
30379: PUSH
30380: LD_INT 3
30382: LESS
30383: IFFALSE 30419
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30385: LD_INT 0
30387: PPUSH
30388: LD_INT 5
30390: PUSH
30391: LD_INT 8
30393: PUSH
30394: LD_INT 9
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: PUSH
30402: LD_VAR 0 17
30406: ARRAY
30407: PPUSH
30408: LD_VAR 0 4
30412: PPUSH
30413: CALL_OW 380
30417: GO 30436
// PrepareHuman ( false , i , skill ) ;
30419: LD_INT 0
30421: PPUSH
30422: LD_VAR 0 8
30426: PPUSH
30427: LD_VAR 0 4
30431: PPUSH
30432: CALL_OW 380
// end else
30436: GO 30455
// PrepareHuman ( false , i , skill ) ;
30438: LD_INT 0
30440: PPUSH
30441: LD_VAR 0 8
30445: PPUSH
30446: LD_VAR 0 4
30450: PPUSH
30451: CALL_OW 380
// un := CreateHuman ;
30455: LD_ADDR_VAR 0 14
30459: PUSH
30460: CALL_OW 44
30464: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30465: LD_ADDR_VAR 0 7
30469: PUSH
30470: LD_VAR 0 7
30474: PPUSH
30475: LD_INT 1
30477: PPUSH
30478: LD_VAR 0 14
30482: PPUSH
30483: CALL_OW 2
30487: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30488: LD_VAR 0 14
30492: PPUSH
30493: LD_VAR 0 12
30497: PUSH
30498: LD_INT 1
30500: ARRAY
30501: PPUSH
30502: CALL_OW 52
// end ;
30506: GO 30145
30508: POP
30509: POP
// end ;
30510: GO 29447
30512: POP
30513: POP
// result := result ^ buildings ;
30514: LD_ADDR_VAR 0 7
30518: PUSH
30519: LD_VAR 0 7
30523: PUSH
30524: LD_VAR 0 18
30528: ADD
30529: ST_TO_ADDR
// end else
30530: GO 30673
// begin for i = 1 to personel do
30532: LD_ADDR_VAR 0 8
30536: PUSH
30537: DOUBLE
30538: LD_INT 1
30540: DEC
30541: ST_TO_ADDR
30542: LD_VAR 0 6
30546: PUSH
30547: FOR_TO
30548: IFFALSE 30671
// begin if i > 4 then
30550: LD_VAR 0 8
30554: PUSH
30555: LD_INT 4
30557: GREATER
30558: IFFALSE 30562
// break ;
30560: GO 30671
// x := personel [ i ] ;
30562: LD_ADDR_VAR 0 13
30566: PUSH
30567: LD_VAR 0 6
30571: PUSH
30572: LD_VAR 0 8
30576: ARRAY
30577: ST_TO_ADDR
// if x = - 1 then
30578: LD_VAR 0 13
30582: PUSH
30583: LD_INT 1
30585: NEG
30586: EQUAL
30587: IFFALSE 30591
// continue ;
30589: GO 30547
// PrepareHuman ( false , i , skill ) ;
30591: LD_INT 0
30593: PPUSH
30594: LD_VAR 0 8
30598: PPUSH
30599: LD_VAR 0 4
30603: PPUSH
30604: CALL_OW 380
// un := CreateHuman ;
30608: LD_ADDR_VAR 0 14
30612: PUSH
30613: CALL_OW 44
30617: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30618: LD_VAR 0 14
30622: PPUSH
30623: LD_VAR 0 1
30627: PPUSH
30628: CALL_OW 250
30632: PPUSH
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL_OW 251
30642: PPUSH
30643: LD_INT 10
30645: PPUSH
30646: LD_INT 0
30648: PPUSH
30649: CALL_OW 50
// result := result ^ un ;
30653: LD_ADDR_VAR 0 7
30657: PUSH
30658: LD_VAR 0 7
30662: PUSH
30663: LD_VAR 0 14
30667: ADD
30668: ST_TO_ADDR
// end ;
30669: GO 30547
30671: POP
30672: POP
// end ; end ;
30673: LD_VAR 0 7
30677: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30678: LD_INT 0
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
// result := false ;
30696: LD_ADDR_VAR 0 3
30700: PUSH
30701: LD_INT 0
30703: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30704: LD_VAR 0 1
30708: NOT
30709: PUSH
30710: LD_VAR 0 1
30714: PPUSH
30715: CALL_OW 266
30719: PUSH
30720: LD_INT 32
30722: PUSH
30723: LD_INT 33
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: IN
30730: NOT
30731: OR
30732: IFFALSE 30736
// exit ;
30734: GO 31872
// nat := GetNation ( tower ) ;
30736: LD_ADDR_VAR 0 12
30740: PUSH
30741: LD_VAR 0 1
30745: PPUSH
30746: CALL_OW 248
30750: ST_TO_ADDR
// side := GetSide ( tower ) ;
30751: LD_ADDR_VAR 0 16
30755: PUSH
30756: LD_VAR 0 1
30760: PPUSH
30761: CALL_OW 255
30765: ST_TO_ADDR
// x := GetX ( tower ) ;
30766: LD_ADDR_VAR 0 10
30770: PUSH
30771: LD_VAR 0 1
30775: PPUSH
30776: CALL_OW 250
30780: ST_TO_ADDR
// y := GetY ( tower ) ;
30781: LD_ADDR_VAR 0 11
30785: PUSH
30786: LD_VAR 0 1
30790: PPUSH
30791: CALL_OW 251
30795: ST_TO_ADDR
// if not x or not y then
30796: LD_VAR 0 10
30800: NOT
30801: PUSH
30802: LD_VAR 0 11
30806: NOT
30807: OR
30808: IFFALSE 30812
// exit ;
30810: GO 31872
// weapon := 0 ;
30812: LD_ADDR_VAR 0 18
30816: PUSH
30817: LD_INT 0
30819: ST_TO_ADDR
// fac_list := [ ] ;
30820: LD_ADDR_VAR 0 17
30824: PUSH
30825: EMPTY
30826: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30827: LD_ADDR_VAR 0 6
30831: PUSH
30832: LD_VAR 0 1
30836: PPUSH
30837: CALL_OW 274
30841: PPUSH
30842: LD_VAR 0 2
30846: PPUSH
30847: CALL 28450 0 2
30851: PPUSH
30852: LD_INT 30
30854: PUSH
30855: LD_INT 3
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PPUSH
30862: CALL_OW 72
30866: ST_TO_ADDR
// if not factories then
30867: LD_VAR 0 6
30871: NOT
30872: IFFALSE 30876
// exit ;
30874: GO 31872
// for i in factories do
30876: LD_ADDR_VAR 0 8
30880: PUSH
30881: LD_VAR 0 6
30885: PUSH
30886: FOR_IN
30887: IFFALSE 30912
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30889: LD_ADDR_VAR 0 17
30893: PUSH
30894: LD_VAR 0 17
30898: PUSH
30899: LD_VAR 0 8
30903: PPUSH
30904: CALL_OW 478
30908: UNION
30909: ST_TO_ADDR
30910: GO 30886
30912: POP
30913: POP
// if not fac_list then
30914: LD_VAR 0 17
30918: NOT
30919: IFFALSE 30923
// exit ;
30921: GO 31872
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30923: LD_ADDR_VAR 0 5
30927: PUSH
30928: LD_INT 4
30930: PUSH
30931: LD_INT 5
30933: PUSH
30934: LD_INT 9
30936: PUSH
30937: LD_INT 10
30939: PUSH
30940: LD_INT 6
30942: PUSH
30943: LD_INT 7
30945: PUSH
30946: LD_INT 11
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 27
30960: PUSH
30961: LD_INT 28
30963: PUSH
30964: LD_INT 26
30966: PUSH
30967: LD_INT 30
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 43
30978: PUSH
30979: LD_INT 44
30981: PUSH
30982: LD_INT 46
30984: PUSH
30985: LD_INT 45
30987: PUSH
30988: LD_INT 47
30990: PUSH
30991: LD_INT 49
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: PUSH
31007: LD_VAR 0 12
31011: ARRAY
31012: ST_TO_ADDR
// for i in list do
31013: LD_ADDR_VAR 0 8
31017: PUSH
31018: LD_VAR 0 5
31022: PUSH
31023: FOR_IN
31024: IFFALSE 31057
// if not i in fac_list then
31026: LD_VAR 0 8
31030: PUSH
31031: LD_VAR 0 17
31035: IN
31036: NOT
31037: IFFALSE 31055
// list := list diff i ;
31039: LD_ADDR_VAR 0 5
31043: PUSH
31044: LD_VAR 0 5
31048: PUSH
31049: LD_VAR 0 8
31053: DIFF
31054: ST_TO_ADDR
31055: GO 31023
31057: POP
31058: POP
// if not list then
31059: LD_VAR 0 5
31063: NOT
31064: IFFALSE 31068
// exit ;
31066: GO 31872
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31068: LD_VAR 0 12
31072: PUSH
31073: LD_INT 3
31075: EQUAL
31076: PUSH
31077: LD_INT 49
31079: PUSH
31080: LD_VAR 0 5
31084: IN
31085: AND
31086: PUSH
31087: LD_INT 31
31089: PPUSH
31090: LD_VAR 0 16
31094: PPUSH
31095: CALL_OW 321
31099: PUSH
31100: LD_INT 2
31102: EQUAL
31103: AND
31104: IFFALSE 31164
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31106: LD_INT 22
31108: PUSH
31109: LD_VAR 0 16
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 35
31120: PUSH
31121: LD_INT 49
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 91
31130: PUSH
31131: LD_VAR 0 1
31135: PUSH
31136: LD_INT 10
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: PPUSH
31149: CALL_OW 69
31153: NOT
31154: IFFALSE 31164
// weapon := ru_time_lapser ;
31156: LD_ADDR_VAR 0 18
31160: PUSH
31161: LD_INT 49
31163: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31164: LD_VAR 0 12
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: IN
31179: PUSH
31180: LD_INT 11
31182: PUSH
31183: LD_VAR 0 5
31187: IN
31188: PUSH
31189: LD_INT 30
31191: PUSH
31192: LD_VAR 0 5
31196: IN
31197: OR
31198: AND
31199: PUSH
31200: LD_INT 6
31202: PPUSH
31203: LD_VAR 0 16
31207: PPUSH
31208: CALL_OW 321
31212: PUSH
31213: LD_INT 2
31215: EQUAL
31216: AND
31217: IFFALSE 31382
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31219: LD_INT 22
31221: PUSH
31222: LD_VAR 0 16
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: LD_INT 35
31236: PUSH
31237: LD_INT 11
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 35
31246: PUSH
31247: LD_INT 30
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 91
31261: PUSH
31262: LD_VAR 0 1
31266: PUSH
31267: LD_INT 18
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: PPUSH
31280: CALL_OW 69
31284: NOT
31285: PUSH
31286: LD_INT 22
31288: PUSH
31289: LD_VAR 0 16
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: LD_INT 30
31303: PUSH
31304: LD_INT 32
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 30
31313: PUSH
31314: LD_INT 33
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 91
31328: PUSH
31329: LD_VAR 0 1
31333: PUSH
31334: LD_INT 12
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: PUSH
31347: EMPTY
31348: LIST
31349: PPUSH
31350: CALL_OW 69
31354: PUSH
31355: LD_INT 2
31357: GREATER
31358: AND
31359: IFFALSE 31382
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31361: LD_ADDR_VAR 0 18
31365: PUSH
31366: LD_INT 11
31368: PUSH
31369: LD_INT 30
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_VAR 0 12
31380: ARRAY
31381: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31382: LD_VAR 0 18
31386: NOT
31387: PUSH
31388: LD_INT 40
31390: PPUSH
31391: LD_VAR 0 16
31395: PPUSH
31396: CALL_OW 321
31400: PUSH
31401: LD_INT 2
31403: EQUAL
31404: AND
31405: PUSH
31406: LD_INT 7
31408: PUSH
31409: LD_VAR 0 5
31413: IN
31414: PUSH
31415: LD_INT 28
31417: PUSH
31418: LD_VAR 0 5
31422: IN
31423: OR
31424: PUSH
31425: LD_INT 45
31427: PUSH
31428: LD_VAR 0 5
31432: IN
31433: OR
31434: AND
31435: IFFALSE 31689
// begin hex := GetHexInfo ( x , y ) ;
31437: LD_ADDR_VAR 0 4
31441: PUSH
31442: LD_VAR 0 10
31446: PPUSH
31447: LD_VAR 0 11
31451: PPUSH
31452: CALL_OW 546
31456: ST_TO_ADDR
// if hex [ 1 ] then
31457: LD_VAR 0 4
31461: PUSH
31462: LD_INT 1
31464: ARRAY
31465: IFFALSE 31469
// exit ;
31467: GO 31872
// height := hex [ 2 ] ;
31469: LD_ADDR_VAR 0 15
31473: PUSH
31474: LD_VAR 0 4
31478: PUSH
31479: LD_INT 2
31481: ARRAY
31482: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31483: LD_ADDR_VAR 0 14
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: LD_INT 3
31496: PUSH
31497: LD_INT 5
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: ST_TO_ADDR
// for i in tmp do
31506: LD_ADDR_VAR 0 8
31510: PUSH
31511: LD_VAR 0 14
31515: PUSH
31516: FOR_IN
31517: IFFALSE 31687
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31519: LD_ADDR_VAR 0 9
31523: PUSH
31524: LD_VAR 0 10
31528: PPUSH
31529: LD_VAR 0 8
31533: PPUSH
31534: LD_INT 5
31536: PPUSH
31537: CALL_OW 272
31541: PUSH
31542: LD_VAR 0 11
31546: PPUSH
31547: LD_VAR 0 8
31551: PPUSH
31552: LD_INT 5
31554: PPUSH
31555: CALL_OW 273
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31564: LD_VAR 0 9
31568: PUSH
31569: LD_INT 1
31571: ARRAY
31572: PPUSH
31573: LD_VAR 0 9
31577: PUSH
31578: LD_INT 2
31580: ARRAY
31581: PPUSH
31582: CALL_OW 488
31586: IFFALSE 31685
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31588: LD_ADDR_VAR 0 4
31592: PUSH
31593: LD_VAR 0 9
31597: PUSH
31598: LD_INT 1
31600: ARRAY
31601: PPUSH
31602: LD_VAR 0 9
31606: PUSH
31607: LD_INT 2
31609: ARRAY
31610: PPUSH
31611: CALL_OW 546
31615: ST_TO_ADDR
// if hex [ 1 ] then
31616: LD_VAR 0 4
31620: PUSH
31621: LD_INT 1
31623: ARRAY
31624: IFFALSE 31628
// continue ;
31626: GO 31516
// h := hex [ 2 ] ;
31628: LD_ADDR_VAR 0 13
31632: PUSH
31633: LD_VAR 0 4
31637: PUSH
31638: LD_INT 2
31640: ARRAY
31641: ST_TO_ADDR
// if h + 7 < height then
31642: LD_VAR 0 13
31646: PUSH
31647: LD_INT 7
31649: PLUS
31650: PUSH
31651: LD_VAR 0 15
31655: LESS
31656: IFFALSE 31685
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31658: LD_ADDR_VAR 0 18
31662: PUSH
31663: LD_INT 7
31665: PUSH
31666: LD_INT 28
31668: PUSH
31669: LD_INT 45
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: PUSH
31677: LD_VAR 0 12
31681: ARRAY
31682: ST_TO_ADDR
// break ;
31683: GO 31687
// end ; end ; end ;
31685: GO 31516
31687: POP
31688: POP
// end ; if not weapon then
31689: LD_VAR 0 18
31693: NOT
31694: IFFALSE 31754
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31696: LD_ADDR_VAR 0 5
31700: PUSH
31701: LD_VAR 0 5
31705: PUSH
31706: LD_INT 11
31708: PUSH
31709: LD_INT 30
31711: PUSH
31712: LD_INT 49
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: DIFF
31720: ST_TO_ADDR
// if not list then
31721: LD_VAR 0 5
31725: NOT
31726: IFFALSE 31730
// exit ;
31728: GO 31872
// weapon := list [ rand ( 1 , list ) ] ;
31730: LD_ADDR_VAR 0 18
31734: PUSH
31735: LD_VAR 0 5
31739: PUSH
31740: LD_INT 1
31742: PPUSH
31743: LD_VAR 0 5
31747: PPUSH
31748: CALL_OW 12
31752: ARRAY
31753: ST_TO_ADDR
// end ; if weapon then
31754: LD_VAR 0 18
31758: IFFALSE 31872
// begin tmp := CostOfWeapon ( weapon ) ;
31760: LD_ADDR_VAR 0 14
31764: PUSH
31765: LD_VAR 0 18
31769: PPUSH
31770: CALL_OW 451
31774: ST_TO_ADDR
// j := GetBase ( tower ) ;
31775: LD_ADDR_VAR 0 9
31779: PUSH
31780: LD_VAR 0 1
31784: PPUSH
31785: CALL_OW 274
31789: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31790: LD_VAR 0 9
31794: PPUSH
31795: LD_INT 1
31797: PPUSH
31798: CALL_OW 275
31802: PUSH
31803: LD_VAR 0 14
31807: PUSH
31808: LD_INT 1
31810: ARRAY
31811: GREATEREQUAL
31812: PUSH
31813: LD_VAR 0 9
31817: PPUSH
31818: LD_INT 2
31820: PPUSH
31821: CALL_OW 275
31825: PUSH
31826: LD_VAR 0 14
31830: PUSH
31831: LD_INT 2
31833: ARRAY
31834: GREATEREQUAL
31835: AND
31836: PUSH
31837: LD_VAR 0 9
31841: PPUSH
31842: LD_INT 3
31844: PPUSH
31845: CALL_OW 275
31849: PUSH
31850: LD_VAR 0 14
31854: PUSH
31855: LD_INT 3
31857: ARRAY
31858: GREATEREQUAL
31859: AND
31860: IFFALSE 31872
// result := weapon ;
31862: LD_ADDR_VAR 0 3
31866: PUSH
31867: LD_VAR 0 18
31871: ST_TO_ADDR
// end ; end ;
31872: LD_VAR 0 3
31876: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31877: LD_INT 0
31879: PPUSH
31880: PPUSH
// result := true ;
31881: LD_ADDR_VAR 0 3
31885: PUSH
31886: LD_INT 1
31888: ST_TO_ADDR
// if array1 = array2 then
31889: LD_VAR 0 1
31893: PUSH
31894: LD_VAR 0 2
31898: EQUAL
31899: IFFALSE 31959
// begin for i = 1 to array1 do
31901: LD_ADDR_VAR 0 4
31905: PUSH
31906: DOUBLE
31907: LD_INT 1
31909: DEC
31910: ST_TO_ADDR
31911: LD_VAR 0 1
31915: PUSH
31916: FOR_TO
31917: IFFALSE 31955
// if array1 [ i ] <> array2 [ i ] then
31919: LD_VAR 0 1
31923: PUSH
31924: LD_VAR 0 4
31928: ARRAY
31929: PUSH
31930: LD_VAR 0 2
31934: PUSH
31935: LD_VAR 0 4
31939: ARRAY
31940: NONEQUAL
31941: IFFALSE 31953
// begin result := false ;
31943: LD_ADDR_VAR 0 3
31947: PUSH
31948: LD_INT 0
31950: ST_TO_ADDR
// break ;
31951: GO 31955
// end ;
31953: GO 31916
31955: POP
31956: POP
// end else
31957: GO 31967
// result := false ;
31959: LD_ADDR_VAR 0 3
31963: PUSH
31964: LD_INT 0
31966: ST_TO_ADDR
// end ;
31967: LD_VAR 0 3
31971: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31972: LD_INT 0
31974: PPUSH
31975: PPUSH
31976: PPUSH
// pom := GetBase ( fac ) ;
31977: LD_ADDR_VAR 0 5
31981: PUSH
31982: LD_VAR 0 1
31986: PPUSH
31987: CALL_OW 274
31991: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31992: LD_ADDR_VAR 0 4
31996: PUSH
31997: LD_VAR 0 2
32001: PUSH
32002: LD_INT 1
32004: ARRAY
32005: PPUSH
32006: LD_VAR 0 2
32010: PUSH
32011: LD_INT 2
32013: ARRAY
32014: PPUSH
32015: LD_VAR 0 2
32019: PUSH
32020: LD_INT 3
32022: ARRAY
32023: PPUSH
32024: LD_VAR 0 2
32028: PUSH
32029: LD_INT 4
32031: ARRAY
32032: PPUSH
32033: CALL_OW 449
32037: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32038: LD_ADDR_VAR 0 3
32042: PUSH
32043: LD_VAR 0 5
32047: PPUSH
32048: LD_INT 1
32050: PPUSH
32051: CALL_OW 275
32055: PUSH
32056: LD_VAR 0 4
32060: PUSH
32061: LD_INT 1
32063: ARRAY
32064: GREATEREQUAL
32065: PUSH
32066: LD_VAR 0 5
32070: PPUSH
32071: LD_INT 2
32073: PPUSH
32074: CALL_OW 275
32078: PUSH
32079: LD_VAR 0 4
32083: PUSH
32084: LD_INT 2
32086: ARRAY
32087: GREATEREQUAL
32088: AND
32089: PUSH
32090: LD_VAR 0 5
32094: PPUSH
32095: LD_INT 3
32097: PPUSH
32098: CALL_OW 275
32102: PUSH
32103: LD_VAR 0 4
32107: PUSH
32108: LD_INT 3
32110: ARRAY
32111: GREATEREQUAL
32112: AND
32113: ST_TO_ADDR
// end ;
32114: LD_VAR 0 3
32118: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32119: LD_INT 0
32121: PPUSH
32122: PPUSH
32123: PPUSH
32124: PPUSH
// pom := GetBase ( building ) ;
32125: LD_ADDR_VAR 0 3
32129: PUSH
32130: LD_VAR 0 1
32134: PPUSH
32135: CALL_OW 274
32139: ST_TO_ADDR
// if not pom then
32140: LD_VAR 0 3
32144: NOT
32145: IFFALSE 32149
// exit ;
32147: GO 32319
// btype := GetBType ( building ) ;
32149: LD_ADDR_VAR 0 5
32153: PUSH
32154: LD_VAR 0 1
32158: PPUSH
32159: CALL_OW 266
32163: ST_TO_ADDR
// if btype = b_armoury then
32164: LD_VAR 0 5
32168: PUSH
32169: LD_INT 4
32171: EQUAL
32172: IFFALSE 32182
// btype := b_barracks ;
32174: LD_ADDR_VAR 0 5
32178: PUSH
32179: LD_INT 5
32181: ST_TO_ADDR
// if btype = b_depot then
32182: LD_VAR 0 5
32186: PUSH
32187: LD_INT 0
32189: EQUAL
32190: IFFALSE 32200
// btype := b_warehouse ;
32192: LD_ADDR_VAR 0 5
32196: PUSH
32197: LD_INT 1
32199: ST_TO_ADDR
// if btype = b_workshop then
32200: LD_VAR 0 5
32204: PUSH
32205: LD_INT 2
32207: EQUAL
32208: IFFALSE 32218
// btype := b_factory ;
32210: LD_ADDR_VAR 0 5
32214: PUSH
32215: LD_INT 3
32217: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32218: LD_ADDR_VAR 0 4
32222: PUSH
32223: LD_VAR 0 5
32227: PPUSH
32228: LD_VAR 0 1
32232: PPUSH
32233: CALL_OW 248
32237: PPUSH
32238: CALL_OW 450
32242: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32243: LD_ADDR_VAR 0 2
32247: PUSH
32248: LD_VAR 0 3
32252: PPUSH
32253: LD_INT 1
32255: PPUSH
32256: CALL_OW 275
32260: PUSH
32261: LD_VAR 0 4
32265: PUSH
32266: LD_INT 1
32268: ARRAY
32269: GREATEREQUAL
32270: PUSH
32271: LD_VAR 0 3
32275: PPUSH
32276: LD_INT 2
32278: PPUSH
32279: CALL_OW 275
32283: PUSH
32284: LD_VAR 0 4
32288: PUSH
32289: LD_INT 2
32291: ARRAY
32292: GREATEREQUAL
32293: AND
32294: PUSH
32295: LD_VAR 0 3
32299: PPUSH
32300: LD_INT 3
32302: PPUSH
32303: CALL_OW 275
32307: PUSH
32308: LD_VAR 0 4
32312: PUSH
32313: LD_INT 3
32315: ARRAY
32316: GREATEREQUAL
32317: AND
32318: ST_TO_ADDR
// end ;
32319: LD_VAR 0 2
32323: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32324: LD_INT 0
32326: PPUSH
32327: PPUSH
32328: PPUSH
// pom := GetBase ( building ) ;
32329: LD_ADDR_VAR 0 4
32333: PUSH
32334: LD_VAR 0 1
32338: PPUSH
32339: CALL_OW 274
32343: ST_TO_ADDR
// if not pom then
32344: LD_VAR 0 4
32348: NOT
32349: IFFALSE 32353
// exit ;
32351: GO 32454
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32353: LD_ADDR_VAR 0 5
32357: PUSH
32358: LD_VAR 0 2
32362: PPUSH
32363: LD_VAR 0 1
32367: PPUSH
32368: CALL_OW 248
32372: PPUSH
32373: CALL_OW 450
32377: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32378: LD_ADDR_VAR 0 3
32382: PUSH
32383: LD_VAR 0 4
32387: PPUSH
32388: LD_INT 1
32390: PPUSH
32391: CALL_OW 275
32395: PUSH
32396: LD_VAR 0 5
32400: PUSH
32401: LD_INT 1
32403: ARRAY
32404: GREATEREQUAL
32405: PUSH
32406: LD_VAR 0 4
32410: PPUSH
32411: LD_INT 2
32413: PPUSH
32414: CALL_OW 275
32418: PUSH
32419: LD_VAR 0 5
32423: PUSH
32424: LD_INT 2
32426: ARRAY
32427: GREATEREQUAL
32428: AND
32429: PUSH
32430: LD_VAR 0 4
32434: PPUSH
32435: LD_INT 3
32437: PPUSH
32438: CALL_OW 275
32442: PUSH
32443: LD_VAR 0 5
32447: PUSH
32448: LD_INT 3
32450: ARRAY
32451: GREATEREQUAL
32452: AND
32453: ST_TO_ADDR
// end ;
32454: LD_VAR 0 3
32458: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32459: LD_INT 0
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
// result := false ;
32471: LD_ADDR_VAR 0 6
32475: PUSH
32476: LD_INT 0
32478: ST_TO_ADDR
// if not base or not btype or not x or not y then
32479: LD_VAR 0 1
32483: NOT
32484: PUSH
32485: LD_VAR 0 2
32489: NOT
32490: OR
32491: PUSH
32492: LD_VAR 0 3
32496: NOT
32497: OR
32498: PUSH
32499: LD_VAR 0 4
32503: NOT
32504: OR
32505: IFFALSE 32509
// exit ;
32507: GO 33118
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32509: LD_ADDR_VAR 0 12
32513: PUSH
32514: LD_VAR 0 2
32518: PPUSH
32519: LD_VAR 0 3
32523: PPUSH
32524: LD_VAR 0 4
32528: PPUSH
32529: LD_VAR 0 5
32533: PPUSH
32534: LD_VAR 0 1
32538: PUSH
32539: LD_INT 1
32541: ARRAY
32542: PPUSH
32543: CALL_OW 248
32547: PPUSH
32548: LD_INT 0
32550: PPUSH
32551: CALL 33955 0 6
32555: ST_TO_ADDR
// if not hexes then
32556: LD_VAR 0 12
32560: NOT
32561: IFFALSE 32565
// exit ;
32563: GO 33118
// for i = 1 to hexes do
32565: LD_ADDR_VAR 0 7
32569: PUSH
32570: DOUBLE
32571: LD_INT 1
32573: DEC
32574: ST_TO_ADDR
32575: LD_VAR 0 12
32579: PUSH
32580: FOR_TO
32581: IFFALSE 33116
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32583: LD_ADDR_VAR 0 11
32587: PUSH
32588: LD_VAR 0 12
32592: PUSH
32593: LD_VAR 0 7
32597: ARRAY
32598: PUSH
32599: LD_INT 1
32601: ARRAY
32602: PPUSH
32603: LD_VAR 0 12
32607: PUSH
32608: LD_VAR 0 7
32612: ARRAY
32613: PUSH
32614: LD_INT 2
32616: ARRAY
32617: PPUSH
32618: CALL_OW 428
32622: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32623: LD_VAR 0 12
32627: PUSH
32628: LD_VAR 0 7
32632: ARRAY
32633: PUSH
32634: LD_INT 1
32636: ARRAY
32637: PPUSH
32638: LD_VAR 0 12
32642: PUSH
32643: LD_VAR 0 7
32647: ARRAY
32648: PUSH
32649: LD_INT 2
32651: ARRAY
32652: PPUSH
32653: CALL_OW 351
32657: PUSH
32658: LD_VAR 0 12
32662: PUSH
32663: LD_VAR 0 7
32667: ARRAY
32668: PUSH
32669: LD_INT 1
32671: ARRAY
32672: PPUSH
32673: LD_VAR 0 12
32677: PUSH
32678: LD_VAR 0 7
32682: ARRAY
32683: PUSH
32684: LD_INT 2
32686: ARRAY
32687: PPUSH
32688: CALL_OW 488
32692: NOT
32693: OR
32694: PUSH
32695: LD_VAR 0 11
32699: PPUSH
32700: CALL_OW 247
32704: PUSH
32705: LD_INT 3
32707: EQUAL
32708: OR
32709: IFFALSE 32715
// exit ;
32711: POP
32712: POP
32713: GO 33118
// if not tmp or not tmp in base then
32715: LD_VAR 0 11
32719: NOT
32720: PUSH
32721: LD_VAR 0 11
32725: PUSH
32726: LD_VAR 0 1
32730: IN
32731: NOT
32732: OR
32733: IFFALSE 32737
// continue ;
32735: GO 32580
// result := true ;
32737: LD_ADDR_VAR 0 6
32741: PUSH
32742: LD_INT 1
32744: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32745: LD_ADDR_VAR 0 15
32749: PUSH
32750: LD_VAR 0 1
32754: PPUSH
32755: LD_INT 22
32757: PUSH
32758: LD_VAR 0 11
32762: PPUSH
32763: CALL_OW 255
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: LD_INT 30
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 30
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PPUSH
32804: CALL_OW 72
32808: ST_TO_ADDR
// if dep then
32809: LD_VAR 0 15
32813: IFFALSE 32949
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32815: LD_ADDR_VAR 0 14
32819: PUSH
32820: LD_VAR 0 15
32824: PUSH
32825: LD_INT 1
32827: ARRAY
32828: PPUSH
32829: CALL_OW 250
32833: PPUSH
32834: LD_VAR 0 15
32838: PUSH
32839: LD_INT 1
32841: ARRAY
32842: PPUSH
32843: CALL_OW 254
32847: PPUSH
32848: LD_INT 5
32850: PPUSH
32851: CALL_OW 272
32855: PUSH
32856: LD_VAR 0 15
32860: PUSH
32861: LD_INT 1
32863: ARRAY
32864: PPUSH
32865: CALL_OW 251
32869: PPUSH
32870: LD_VAR 0 15
32874: PUSH
32875: LD_INT 1
32877: ARRAY
32878: PPUSH
32879: CALL_OW 254
32883: PPUSH
32884: LD_INT 5
32886: PPUSH
32887: CALL_OW 273
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32896: LD_VAR 0 14
32900: PUSH
32901: LD_INT 1
32903: ARRAY
32904: PPUSH
32905: LD_VAR 0 14
32909: PUSH
32910: LD_INT 2
32912: ARRAY
32913: PPUSH
32914: CALL_OW 488
32918: IFFALSE 32949
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32920: LD_VAR 0 11
32924: PPUSH
32925: LD_VAR 0 14
32929: PUSH
32930: LD_INT 1
32932: ARRAY
32933: PPUSH
32934: LD_VAR 0 14
32938: PUSH
32939: LD_INT 2
32941: ARRAY
32942: PPUSH
32943: CALL_OW 111
// continue ;
32947: GO 32580
// end ; end ; r := GetDir ( tmp ) ;
32949: LD_ADDR_VAR 0 13
32953: PUSH
32954: LD_VAR 0 11
32958: PPUSH
32959: CALL_OW 254
32963: ST_TO_ADDR
// if r = 5 then
32964: LD_VAR 0 13
32968: PUSH
32969: LD_INT 5
32971: EQUAL
32972: IFFALSE 32982
// r := 0 ;
32974: LD_ADDR_VAR 0 13
32978: PUSH
32979: LD_INT 0
32981: ST_TO_ADDR
// for j = r to 5 do
32982: LD_ADDR_VAR 0 8
32986: PUSH
32987: DOUBLE
32988: LD_VAR 0 13
32992: DEC
32993: ST_TO_ADDR
32994: LD_INT 5
32996: PUSH
32997: FOR_TO
32998: IFFALSE 33112
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33000: LD_ADDR_VAR 0 9
33004: PUSH
33005: LD_VAR 0 11
33009: PPUSH
33010: CALL_OW 250
33014: PPUSH
33015: LD_VAR 0 8
33019: PPUSH
33020: LD_INT 2
33022: PPUSH
33023: CALL_OW 272
33027: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33028: LD_ADDR_VAR 0 10
33032: PUSH
33033: LD_VAR 0 11
33037: PPUSH
33038: CALL_OW 251
33042: PPUSH
33043: LD_VAR 0 8
33047: PPUSH
33048: LD_INT 2
33050: PPUSH
33051: CALL_OW 273
33055: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33056: LD_VAR 0 9
33060: PPUSH
33061: LD_VAR 0 10
33065: PPUSH
33066: CALL_OW 488
33070: PUSH
33071: LD_VAR 0 9
33075: PPUSH
33076: LD_VAR 0 10
33080: PPUSH
33081: CALL_OW 428
33085: NOT
33086: AND
33087: IFFALSE 33110
// begin ComMoveXY ( tmp , _x , _y ) ;
33089: LD_VAR 0 11
33093: PPUSH
33094: LD_VAR 0 9
33098: PPUSH
33099: LD_VAR 0 10
33103: PPUSH
33104: CALL_OW 111
// break ;
33108: GO 33112
// end ; end ;
33110: GO 32997
33112: POP
33113: POP
// end ;
33114: GO 32580
33116: POP
33117: POP
// end ;
33118: LD_VAR 0 6
33122: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33123: LD_INT 0
33125: PPUSH
33126: PPUSH
33127: PPUSH
33128: PPUSH
33129: PPUSH
33130: PPUSH
33131: PPUSH
33132: PPUSH
33133: PPUSH
33134: PPUSH
// result := false ;
33135: LD_ADDR_VAR 0 6
33139: PUSH
33140: LD_INT 0
33142: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33143: LD_VAR 0 1
33147: NOT
33148: PUSH
33149: LD_VAR 0 1
33153: PPUSH
33154: CALL_OW 266
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: IN
33169: NOT
33170: OR
33171: PUSH
33172: LD_VAR 0 2
33176: NOT
33177: OR
33178: PUSH
33179: LD_VAR 0 5
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: LD_INT 2
33192: PUSH
33193: LD_INT 3
33195: PUSH
33196: LD_INT 4
33198: PUSH
33199: LD_INT 5
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: IN
33210: NOT
33211: OR
33212: PUSH
33213: LD_VAR 0 3
33217: PPUSH
33218: LD_VAR 0 4
33222: PPUSH
33223: CALL_OW 488
33227: NOT
33228: OR
33229: IFFALSE 33233
// exit ;
33231: GO 33950
// pom := GetBase ( depot ) ;
33233: LD_ADDR_VAR 0 10
33237: PUSH
33238: LD_VAR 0 1
33242: PPUSH
33243: CALL_OW 274
33247: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33248: LD_ADDR_VAR 0 11
33252: PUSH
33253: LD_VAR 0 2
33257: PPUSH
33258: LD_VAR 0 1
33262: PPUSH
33263: CALL_OW 248
33267: PPUSH
33268: CALL_OW 450
33272: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33273: LD_VAR 0 10
33277: PPUSH
33278: LD_INT 1
33280: PPUSH
33281: CALL_OW 275
33285: PUSH
33286: LD_VAR 0 11
33290: PUSH
33291: LD_INT 1
33293: ARRAY
33294: GREATEREQUAL
33295: PUSH
33296: LD_VAR 0 10
33300: PPUSH
33301: LD_INT 2
33303: PPUSH
33304: CALL_OW 275
33308: PUSH
33309: LD_VAR 0 11
33313: PUSH
33314: LD_INT 2
33316: ARRAY
33317: GREATEREQUAL
33318: AND
33319: PUSH
33320: LD_VAR 0 10
33324: PPUSH
33325: LD_INT 3
33327: PPUSH
33328: CALL_OW 275
33332: PUSH
33333: LD_VAR 0 11
33337: PUSH
33338: LD_INT 3
33340: ARRAY
33341: GREATEREQUAL
33342: AND
33343: NOT
33344: IFFALSE 33348
// exit ;
33346: GO 33950
// if GetBType ( depot ) = b_depot then
33348: LD_VAR 0 1
33352: PPUSH
33353: CALL_OW 266
33357: PUSH
33358: LD_INT 0
33360: EQUAL
33361: IFFALSE 33373
// dist := 28 else
33363: LD_ADDR_VAR 0 14
33367: PUSH
33368: LD_INT 28
33370: ST_TO_ADDR
33371: GO 33381
// dist := 36 ;
33373: LD_ADDR_VAR 0 14
33377: PUSH
33378: LD_INT 36
33380: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33381: LD_VAR 0 1
33385: PPUSH
33386: LD_VAR 0 3
33390: PPUSH
33391: LD_VAR 0 4
33395: PPUSH
33396: CALL_OW 297
33400: PUSH
33401: LD_VAR 0 14
33405: GREATER
33406: IFFALSE 33410
// exit ;
33408: GO 33950
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33410: LD_ADDR_VAR 0 12
33414: PUSH
33415: LD_VAR 0 2
33419: PPUSH
33420: LD_VAR 0 3
33424: PPUSH
33425: LD_VAR 0 4
33429: PPUSH
33430: LD_VAR 0 5
33434: PPUSH
33435: LD_VAR 0 1
33439: PPUSH
33440: CALL_OW 248
33444: PPUSH
33445: LD_INT 0
33447: PPUSH
33448: CALL 33955 0 6
33452: ST_TO_ADDR
// if not hexes then
33453: LD_VAR 0 12
33457: NOT
33458: IFFALSE 33462
// exit ;
33460: GO 33950
// hex := GetHexInfo ( x , y ) ;
33462: LD_ADDR_VAR 0 15
33466: PUSH
33467: LD_VAR 0 3
33471: PPUSH
33472: LD_VAR 0 4
33476: PPUSH
33477: CALL_OW 546
33481: ST_TO_ADDR
// if hex [ 1 ] then
33482: LD_VAR 0 15
33486: PUSH
33487: LD_INT 1
33489: ARRAY
33490: IFFALSE 33494
// exit ;
33492: GO 33950
// height := hex [ 2 ] ;
33494: LD_ADDR_VAR 0 13
33498: PUSH
33499: LD_VAR 0 15
33503: PUSH
33504: LD_INT 2
33506: ARRAY
33507: ST_TO_ADDR
// for i = 1 to hexes do
33508: LD_ADDR_VAR 0 7
33512: PUSH
33513: DOUBLE
33514: LD_INT 1
33516: DEC
33517: ST_TO_ADDR
33518: LD_VAR 0 12
33522: PUSH
33523: FOR_TO
33524: IFFALSE 33854
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33526: LD_VAR 0 12
33530: PUSH
33531: LD_VAR 0 7
33535: ARRAY
33536: PUSH
33537: LD_INT 1
33539: ARRAY
33540: PPUSH
33541: LD_VAR 0 12
33545: PUSH
33546: LD_VAR 0 7
33550: ARRAY
33551: PUSH
33552: LD_INT 2
33554: ARRAY
33555: PPUSH
33556: CALL_OW 488
33560: NOT
33561: PUSH
33562: LD_VAR 0 12
33566: PUSH
33567: LD_VAR 0 7
33571: ARRAY
33572: PUSH
33573: LD_INT 1
33575: ARRAY
33576: PPUSH
33577: LD_VAR 0 12
33581: PUSH
33582: LD_VAR 0 7
33586: ARRAY
33587: PUSH
33588: LD_INT 2
33590: ARRAY
33591: PPUSH
33592: CALL_OW 428
33596: PUSH
33597: LD_INT 0
33599: GREATER
33600: OR
33601: PUSH
33602: LD_VAR 0 12
33606: PUSH
33607: LD_VAR 0 7
33611: ARRAY
33612: PUSH
33613: LD_INT 1
33615: ARRAY
33616: PPUSH
33617: LD_VAR 0 12
33621: PUSH
33622: LD_VAR 0 7
33626: ARRAY
33627: PUSH
33628: LD_INT 2
33630: ARRAY
33631: PPUSH
33632: CALL_OW 351
33636: OR
33637: IFFALSE 33643
// exit ;
33639: POP
33640: POP
33641: GO 33950
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33643: LD_ADDR_VAR 0 8
33647: PUSH
33648: LD_VAR 0 12
33652: PUSH
33653: LD_VAR 0 7
33657: ARRAY
33658: PUSH
33659: LD_INT 1
33661: ARRAY
33662: PPUSH
33663: LD_VAR 0 12
33667: PUSH
33668: LD_VAR 0 7
33672: ARRAY
33673: PUSH
33674: LD_INT 2
33676: ARRAY
33677: PPUSH
33678: CALL_OW 546
33682: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33683: LD_VAR 0 8
33687: PUSH
33688: LD_INT 1
33690: ARRAY
33691: PUSH
33692: LD_VAR 0 8
33696: PUSH
33697: LD_INT 2
33699: ARRAY
33700: PUSH
33701: LD_VAR 0 13
33705: PUSH
33706: LD_INT 2
33708: PLUS
33709: GREATER
33710: OR
33711: PUSH
33712: LD_VAR 0 8
33716: PUSH
33717: LD_INT 2
33719: ARRAY
33720: PUSH
33721: LD_VAR 0 13
33725: PUSH
33726: LD_INT 2
33728: MINUS
33729: LESS
33730: OR
33731: PUSH
33732: LD_VAR 0 8
33736: PUSH
33737: LD_INT 3
33739: ARRAY
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: LD_INT 8
33746: PUSH
33747: LD_INT 9
33749: PUSH
33750: LD_INT 10
33752: PUSH
33753: LD_INT 11
33755: PUSH
33756: LD_INT 12
33758: PUSH
33759: LD_INT 13
33761: PUSH
33762: LD_INT 16
33764: PUSH
33765: LD_INT 17
33767: PUSH
33768: LD_INT 18
33770: PUSH
33771: LD_INT 19
33773: PUSH
33774: LD_INT 20
33776: PUSH
33777: LD_INT 21
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: IN
33795: NOT
33796: OR
33797: PUSH
33798: LD_VAR 0 8
33802: PUSH
33803: LD_INT 5
33805: ARRAY
33806: NOT
33807: OR
33808: PUSH
33809: LD_VAR 0 8
33813: PUSH
33814: LD_INT 6
33816: ARRAY
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: LD_INT 7
33826: PUSH
33827: LD_INT 9
33829: PUSH
33830: LD_INT 10
33832: PUSH
33833: LD_INT 11
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: IN
33844: NOT
33845: OR
33846: IFFALSE 33852
// exit ;
33848: POP
33849: POP
33850: GO 33950
// end ;
33852: GO 33523
33854: POP
33855: POP
// side := GetSide ( depot ) ;
33856: LD_ADDR_VAR 0 9
33860: PUSH
33861: LD_VAR 0 1
33865: PPUSH
33866: CALL_OW 255
33870: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33871: LD_VAR 0 9
33875: PPUSH
33876: LD_VAR 0 3
33880: PPUSH
33881: LD_VAR 0 4
33885: PPUSH
33886: LD_INT 20
33888: PPUSH
33889: CALL 26604 0 4
33893: PUSH
33894: LD_INT 4
33896: ARRAY
33897: IFFALSE 33901
// exit ;
33899: GO 33950
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33901: LD_VAR 0 2
33905: PUSH
33906: LD_INT 29
33908: PUSH
33909: LD_INT 30
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: IN
33916: PUSH
33917: LD_VAR 0 3
33921: PPUSH
33922: LD_VAR 0 4
33926: PPUSH
33927: LD_VAR 0 9
33931: PPUSH
33932: CALL_OW 440
33936: NOT
33937: AND
33938: IFFALSE 33942
// exit ;
33940: GO 33950
// result := true ;
33942: LD_ADDR_VAR 0 6
33946: PUSH
33947: LD_INT 1
33949: ST_TO_ADDR
// end ;
33950: LD_VAR 0 6
33954: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
33955: LD_INT 0
33957: PPUSH
33958: PPUSH
33959: PPUSH
33960: PPUSH
33961: PPUSH
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
33982: PPUSH
33983: PPUSH
33984: PPUSH
33985: PPUSH
33986: PPUSH
33987: PPUSH
33988: PPUSH
33989: PPUSH
33990: PPUSH
33991: PPUSH
33992: PPUSH
33993: PPUSH
33994: PPUSH
33995: PPUSH
33996: PPUSH
33997: PPUSH
33998: PPUSH
33999: PPUSH
34000: PPUSH
34001: PPUSH
34002: PPUSH
34003: PPUSH
34004: PPUSH
34005: PPUSH
34006: PPUSH
34007: PPUSH
34008: PPUSH
34009: PPUSH
34010: PPUSH
34011: PPUSH
34012: PPUSH
34013: PPUSH
34014: PPUSH
// result = [ ] ;
34015: LD_ADDR_VAR 0 7
34019: PUSH
34020: EMPTY
34021: ST_TO_ADDR
// temp_list = [ ] ;
34022: LD_ADDR_VAR 0 9
34026: PUSH
34027: EMPTY
34028: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34029: LD_VAR 0 4
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: LD_INT 3
34045: PUSH
34046: LD_INT 4
34048: PUSH
34049: LD_INT 5
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: IN
34060: NOT
34061: PUSH
34062: LD_VAR 0 1
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: IN
34077: PUSH
34078: LD_VAR 0 5
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: LIST
34096: IN
34097: NOT
34098: AND
34099: OR
34100: IFFALSE 34104
// exit ;
34102: GO 52495
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34104: LD_VAR 0 1
34108: PUSH
34109: LD_INT 6
34111: PUSH
34112: LD_INT 7
34114: PUSH
34115: LD_INT 8
34117: PUSH
34118: LD_INT 13
34120: PUSH
34121: LD_INT 12
34123: PUSH
34124: LD_INT 15
34126: PUSH
34127: LD_INT 11
34129: PUSH
34130: LD_INT 14
34132: PUSH
34133: LD_INT 10
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: IN
34147: IFFALSE 34157
// btype = b_lab ;
34149: LD_ADDR_VAR 0 1
34153: PUSH
34154: LD_INT 6
34156: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34157: LD_VAR 0 6
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: LD_INT 1
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: IN
34176: NOT
34177: PUSH
34178: LD_VAR 0 1
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: LD_INT 2
34191: PUSH
34192: LD_INT 3
34194: PUSH
34195: LD_INT 6
34197: PUSH
34198: LD_INT 36
34200: PUSH
34201: LD_INT 4
34203: PUSH
34204: LD_INT 5
34206: PUSH
34207: LD_INT 31
34209: PUSH
34210: LD_INT 32
34212: PUSH
34213: LD_INT 33
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: IN
34229: NOT
34230: PUSH
34231: LD_VAR 0 6
34235: PUSH
34236: LD_INT 1
34238: EQUAL
34239: AND
34240: OR
34241: PUSH
34242: LD_VAR 0 1
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: IN
34257: NOT
34258: PUSH
34259: LD_VAR 0 6
34263: PUSH
34264: LD_INT 2
34266: EQUAL
34267: AND
34268: OR
34269: IFFALSE 34279
// mode = 0 ;
34271: LD_ADDR_VAR 0 6
34275: PUSH
34276: LD_INT 0
34278: ST_TO_ADDR
// case mode of 0 :
34279: LD_VAR 0 6
34283: PUSH
34284: LD_INT 0
34286: DOUBLE
34287: EQUAL
34288: IFTRUE 34292
34290: GO 45745
34292: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34293: LD_ADDR_VAR 0 11
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: LD_INT 2
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 2
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: LD_INT 3
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34486: LD_ADDR_VAR 0 12
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: LD_INT 1
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: LD_INT 1
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 2
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 2
34609: NEG
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 2
34632: NEG
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 3
34643: NEG
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 3
34654: NEG
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34682: LD_ADDR_VAR 0 13
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 2
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: LD_INT 2
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: NEG
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: NEG
34830: PUSH
34831: LD_INT 3
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 3
34841: NEG
34842: PUSH
34843: LD_INT 2
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 3
34853: NEG
34854: PUSH
34855: LD_INT 3
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34881: LD_ADDR_VAR 0 14
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 1
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PUSH
34964: LD_INT 2
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 3
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: LD_INT 3
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: LD_INT 2
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35077: LD_ADDR_VAR 0 15
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 1
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 2
35200: NEG
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 3
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 3
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35270: LD_ADDR_VAR 0 16
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: LD_INT 2
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 2
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 2
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: LD_INT 2
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: NEG
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 3
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 3
35427: PUSH
35428: LD_INT 3
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 2
35437: PUSH
35438: LD_INT 3
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35463: LD_ADDR_VAR 0 17
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 0
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: NEG
35545: PUSH
35546: LD_INT 2
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: LD_INT 2
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 2
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 2
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: LD_INT 2
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: LD_INT 2
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: NEG
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: NEG
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: LD_INT 2
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35693: LD_ADDR_VAR 0 18
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 0
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 1
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 0
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: LD_INT 2
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 2
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 2
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 2
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 2
35892: NEG
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35923: LD_ADDR_VAR 0 19
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: LD_INT 1
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: LD_INT 2
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 2
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 2
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: LD_INT 2
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: NEG
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 2
36110: NEG
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 2
36122: NEG
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36153: LD_ADDR_VAR 0 20
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: LD_INT 1
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: LD_INT 2
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: NEG
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: NEG
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 2
36352: NEG
36353: PUSH
36354: LD_INT 2
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36383: LD_ADDR_VAR 0 21
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: LD_INT 1
36456: NEG
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: LD_INT 2
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: LD_INT 2
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: NEG
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: NEG
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36613: LD_ADDR_VAR 0 22
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 2
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 2
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 2
36789: NEG
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 2
36812: NEG
36813: PUSH
36814: LD_INT 2
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36843: LD_ADDR_VAR 0 23
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: LD_INT 2
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 2
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 2
36978: PUSH
36979: LD_INT 2
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: LD_INT 2
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 2
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: NEG
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 2
37030: NEG
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: LD_INT 2
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: LD_INT 3
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 3
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37123: LD_ADDR_VAR 0 24
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: LD_INT 2
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: LD_INT 2
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: LD_INT 2
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: NEG
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 2
37310: NEG
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 2
37322: NEG
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 3
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 3
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37399: LD_ADDR_VAR 0 25
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: LD_INT 2
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: LD_INT 2
37495: NEG
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 2
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: LD_INT 2
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: LD_INT 2
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 2
37575: NEG
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: NEG
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 2
37598: NEG
37599: PUSH
37600: LD_INT 2
37602: NEG
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 3
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 3
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: LD_INT 3
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: LD_INT 3
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37673: LD_ADDR_VAR 0 26
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: LD_INT 2
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 2
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: NEG
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 2
37860: NEG
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 3
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: LD_INT 3
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37949: LD_ADDR_VAR 0 27
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 2
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 2
38125: NEG
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 3
38182: NEG
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 3
38194: NEG
38195: PUSH
38196: LD_INT 2
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38229: LD_ADDR_VAR 0 28
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: LD_INT 0
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: LD_INT 2
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 1
38374: PUSH
38375: LD_INT 2
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: NEG
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 2
38416: NEG
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 2
38428: NEG
38429: PUSH
38430: LD_INT 2
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: NEG
38441: PUSH
38442: LD_INT 3
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: LD_INT 3
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 3
38464: NEG
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 3
38476: NEG
38477: PUSH
38478: LD_INT 2
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38511: LD_ADDR_VAR 0 29
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: LD_INT 1
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 2
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: LD_INT 2
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: LD_INT 3
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: LD_INT 3
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 2
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 3
38755: NEG
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38790: LD_ADDR_VAR 0 30
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: LD_INT 2
38875: NEG
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 2
38886: NEG
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 2
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: LD_INT 3
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 3
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: LD_INT 3
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 3
39033: NEG
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39068: LD_ADDR_VAR 0 31
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 2
39245: NEG
39246: PUSH
39247: LD_INT 2
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 2
39257: NEG
39258: PUSH
39259: LD_INT 3
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 3
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 3
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 3
39311: NEG
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39346: LD_ADDR_VAR 0 32
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: LD_INT 2
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: NEG
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 3
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 3
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 3
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39624: LD_ADDR_VAR 0 33
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 2
39814: NEG
39815: PUSH
39816: LD_INT 3
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 2
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 3
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: LD_INT 3
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 3
39868: NEG
39869: PUSH
39870: LD_INT 2
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39903: LD_ADDR_VAR 0 34
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: LD_INT 2
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 2
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: LD_INT 2
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: LD_INT 3
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 3
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 3
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 3
40148: NEG
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40183: LD_ADDR_VAR 0 35
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40295: LD_ADDR_VAR 0 36
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40407: LD_ADDR_VAR 0 37
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40519: LD_ADDR_VAR 0 38
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: NEG
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40631: LD_ADDR_VAR 0 39
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40743: LD_ADDR_VAR 0 40
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40855: LD_ADDR_VAR 0 41
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: LD_INT 3
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 3
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 3
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: LD_INT 3
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 3
41129: NEG
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 3
41140: NEG
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 3
41164: NEG
41165: PUSH
41166: LD_INT 3
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41205: LD_ADDR_VAR 0 42
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: LD_INT 2
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: LD_INT 3
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 3
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 3
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 3
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 3
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 3
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 3
41502: NEG
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: LD_INT 3
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41555: LD_ADDR_VAR 0 43
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: LD_INT 3
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 3
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 3
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 3
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 3
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 3
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 2
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 3
41851: NEG
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 3
41862: NEG
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41903: LD_ADDR_VAR 0 44
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 2
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: NEG
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 2
42081: NEG
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: LD_INT 3
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 3
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 3
42177: NEG
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 3
42188: NEG
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 3
42200: NEG
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 3
42212: NEG
42213: PUSH
42214: LD_INT 3
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42253: LD_ADDR_VAR 0 45
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 2
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: LD_INT 3
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 3
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: LD_INT 3
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: LD_INT 2
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 3
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 3
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 2
42509: PUSH
42510: LD_INT 3
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: LD_INT 3
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 3
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 3
42550: NEG
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 3
42562: NEG
42563: PUSH
42564: LD_INT 3
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42603: LD_ADDR_VAR 0 46
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 2
42780: NEG
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: LD_INT 3
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 3
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 3
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 3
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: LD_INT 3
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 3
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 3
42899: NEG
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 3
42910: NEG
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42951: LD_ADDR_VAR 0 47
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: NEG
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: LD_INT 2
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43102: LD_ADDR_VAR 0 48
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 0
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43249: LD_ADDR_VAR 0 49
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43393: LD_ADDR_VAR 0 50
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43537: LD_ADDR_VAR 0 51
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: NEG
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43684: LD_ADDR_VAR 0 52
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: NEG
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: LD_INT 2
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43835: LD_ADDR_VAR 0 53
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: NEG
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44065: LD_ADDR_VAR 0 54
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44295: LD_ADDR_VAR 0 55
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44525: LD_ADDR_VAR 0 56
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44755: LD_ADDR_VAR 0 57
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44985: LD_ADDR_VAR 0 58
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45215: LD_ADDR_VAR 0 59
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45303: LD_ADDR_VAR 0 60
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45391: LD_ADDR_VAR 0 61
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45479: LD_ADDR_VAR 0 62
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45567: LD_ADDR_VAR 0 63
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45655: LD_ADDR_VAR 0 64
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// end ; 1 :
45743: GO 51640
45745: LD_INT 1
45747: DOUBLE
45748: EQUAL
45749: IFTRUE 45753
45751: GO 48376
45753: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45754: LD_ADDR_VAR 0 11
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 3
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 3
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45798: LD_ADDR_VAR 0 12
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45839: LD_ADDR_VAR 0 13
45843: PUSH
45844: LD_INT 3
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 3
45856: PUSH
45857: LD_INT 3
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: LD_INT 3
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: LIST
45878: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45879: LD_ADDR_VAR 0 14
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: LD_INT 3
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 3
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45920: LD_ADDR_VAR 0 15
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 3
45938: NEG
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 3
45949: NEG
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: LIST
45963: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45964: LD_ADDR_VAR 0 16
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 3
45983: NEG
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 3
45995: NEG
45996: PUSH
45997: LD_INT 3
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: LIST
46009: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46010: LD_ADDR_VAR 0 17
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 3
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 3
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: LIST
46053: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46054: LD_ADDR_VAR 0 18
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 3
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 3
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: LIST
46094: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46095: LD_ADDR_VAR 0 19
46099: PUSH
46100: LD_INT 3
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 3
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: LIST
46134: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46135: LD_ADDR_VAR 0 20
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 3
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 3
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46176: LD_ADDR_VAR 0 21
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 3
46194: NEG
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 3
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: LIST
46219: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46220: LD_ADDR_VAR 0 22
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: LD_INT 3
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: NEG
46252: PUSH
46253: LD_INT 3
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: LIST
46265: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46266: LD_ADDR_VAR 0 23
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 3
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 4
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 3
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46310: LD_ADDR_VAR 0 24
46314: PUSH
46315: LD_INT 3
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 3
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 4
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46351: LD_ADDR_VAR 0 25
46355: PUSH
46356: LD_INT 3
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 4
46368: PUSH
46369: LD_INT 3
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 3
46378: PUSH
46379: LD_INT 4
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46391: LD_ADDR_VAR 0 26
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 3
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 4
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46432: LD_ADDR_VAR 0 27
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 4
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46476: LD_ADDR_VAR 0 28
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 3
46495: NEG
46496: PUSH
46497: LD_INT 4
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 4
46507: NEG
46508: PUSH
46509: LD_INT 3
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: LIST
46521: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46522: LD_ADDR_VAR 0 29
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: LD_INT 3
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 3
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 4
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 4
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 3
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 5
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 5
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 4
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 6
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 6
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 5
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46677: LD_ADDR_VAR 0 30
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 3
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 3
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 4
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 4
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 4
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 5
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 5
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 5
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 6
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 6
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46820: LD_ADDR_VAR 0 31
46824: PUSH
46825: LD_INT 3
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 3
46837: PUSH
46838: LD_INT 3
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 4
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 4
46867: PUSH
46868: LD_INT 4
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 3
46877: PUSH
46878: LD_INT 4
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 5
46887: PUSH
46888: LD_INT 4
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 5
46897: PUSH
46898: LD_INT 5
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 4
46907: PUSH
46908: LD_INT 5
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 6
46917: PUSH
46918: LD_INT 5
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 6
46927: PUSH
46928: LD_INT 6
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 5
46937: PUSH
46938: LD_INT 6
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46959: LD_ADDR_VAR 0 32
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 3
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 3
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 4
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 4
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 5
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 5
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 4
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: LD_INT 6
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 6
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 5
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47102: LD_ADDR_VAR 0 33
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 3
47120: NEG
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 3
47131: NEG
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 4
47154: NEG
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 4
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 4
47177: NEG
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 5
47188: NEG
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 5
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 5
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 6
47222: NEG
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 6
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47257: LD_ADDR_VAR 0 34
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: LD_INT 3
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: NEG
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 3
47288: NEG
47289: PUSH
47290: LD_INT 3
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 3
47300: NEG
47301: PUSH
47302: LD_INT 4
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 4
47312: NEG
47313: PUSH
47314: LD_INT 3
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 4
47324: NEG
47325: PUSH
47326: LD_INT 4
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 4
47336: NEG
47337: PUSH
47338: LD_INT 5
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 5
47348: NEG
47349: PUSH
47350: LD_INT 4
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 5
47360: NEG
47361: PUSH
47362: LD_INT 5
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 5
47372: NEG
47373: PUSH
47374: LD_INT 6
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 6
47384: NEG
47385: PUSH
47386: LD_INT 5
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 6
47396: NEG
47397: PUSH
47398: LD_INT 6
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47420: LD_ADDR_VAR 0 41
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 3
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47464: LD_ADDR_VAR 0 42
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 3
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: LIST
47504: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47505: LD_ADDR_VAR 0 43
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: LD_INT 3
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47545: LD_ADDR_VAR 0 44
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 3
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47586: LD_ADDR_VAR 0 45
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: NEG
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: LIST
47629: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47630: LD_ADDR_VAR 0 46
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 3
47661: NEG
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47676: LD_ADDR_VAR 0 47
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: LD_INT 3
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 3
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47709: LD_ADDR_VAR 0 48
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47740: LD_ADDR_VAR 0 49
47744: PUSH
47745: LD_INT 3
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47769: LD_ADDR_VAR 0 50
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: LD_INT 3
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47798: LD_ADDR_VAR 0 51
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47829: LD_ADDR_VAR 0 52
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 3
47848: NEG
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47862: LD_ADDR_VAR 0 53
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 3
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 3
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: LIST
47905: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47906: LD_ADDR_VAR 0 54
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47947: LD_ADDR_VAR 0 55
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 3
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47987: LD_ADDR_VAR 0 56
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 3
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 3
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48028: LD_ADDR_VAR 0 57
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 3
48046: NEG
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 3
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48072: LD_ADDR_VAR 0 58
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: LD_INT 3
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 3
48091: NEG
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 3
48103: NEG
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48118: LD_ADDR_VAR 0 59
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48162: LD_ADDR_VAR 0 60
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48203: LD_ADDR_VAR 0 61
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48243: LD_ADDR_VAR 0 62
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48284: LD_ADDR_VAR 0 63
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48328: LD_ADDR_VAR 0 64
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: LIST
48373: ST_TO_ADDR
// end ; 2 :
48374: GO 51640
48376: LD_INT 2
48378: DOUBLE
48379: EQUAL
48380: IFTRUE 48384
48382: GO 51639
48384: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48385: LD_ADDR_VAR 0 29
48389: PUSH
48390: LD_INT 4
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 4
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 5
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 5
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 4
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 3
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 5
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 3
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 4
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 4
48515: PUSH
48516: LD_INT 4
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: LD_INT 4
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 4
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 4
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 4
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 4
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 5
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 5
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 4
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 3
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: LD_INT 5
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: LD_INT 3
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 3
48679: NEG
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 3
48713: NEG
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 4
48724: NEG
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 4
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 4
48747: NEG
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 4
48770: NEG
48771: PUSH
48772: LD_INT 4
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 4
48782: NEG
48783: PUSH
48784: LD_INT 5
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 3
48794: NEG
48795: PUSH
48796: LD_INT 4
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 3
48806: NEG
48807: PUSH
48808: LD_INT 3
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 4
48818: NEG
48819: PUSH
48820: LD_INT 3
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 5
48830: NEG
48831: PUSH
48832: LD_INT 4
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 5
48842: NEG
48843: PUSH
48844: LD_INT 5
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 3
48854: NEG
48855: PUSH
48856: LD_INT 5
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 5
48866: NEG
48867: PUSH
48868: LD_INT 3
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48923: LD_ADDR_VAR 0 30
48927: PUSH
48928: LD_INT 4
48930: PUSH
48931: LD_INT 4
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 4
48940: PUSH
48941: LD_INT 3
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 5
48950: PUSH
48951: LD_INT 4
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 5
48960: PUSH
48961: LD_INT 5
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 4
48970: PUSH
48971: LD_INT 5
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 3
48980: PUSH
48981: LD_INT 4
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: LD_INT 3
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 5
49000: PUSH
49001: LD_INT 3
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 3
49010: PUSH
49011: LD_INT 5
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 3
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 4
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 4
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: LD_INT 4
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 4
49113: NEG
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 4
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: NEG
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 3
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 4
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 5
49169: NEG
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 5
49180: NEG
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 5
49192: NEG
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 3
49204: NEG
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 3
49227: NEG
49228: PUSH
49229: LD_INT 4
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: LD_INT 3
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 3
49263: NEG
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 4
49275: NEG
49276: PUSH
49277: LD_INT 3
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 4
49287: NEG
49288: PUSH
49289: LD_INT 4
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: LD_INT 4
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 4
49311: NEG
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 4
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 5
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: LD_INT 4
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: LD_INT 3
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 3
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: LD_INT 4
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 5
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: LD_INT 3
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 5
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49470: LD_ADDR_VAR 0 31
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 4
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 3
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 4
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 5
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 5
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 4
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 3
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: LD_INT 5
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 3
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 3
49570: NEG
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 3
49581: NEG
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 3
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 4
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 4
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 4
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 4
49672: NEG
49673: PUSH
49674: LD_INT 4
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 4
49684: NEG
49685: PUSH
49686: LD_INT 5
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: NEG
49697: PUSH
49698: LD_INT 4
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 3
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 4
49720: NEG
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 5
49732: NEG
49733: PUSH
49734: LD_INT 4
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 5
49744: NEG
49745: PUSH
49746: LD_INT 5
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 3
49756: NEG
49757: PUSH
49758: LD_INT 5
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 5
49768: NEG
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 3
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 4
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 3
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 4
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 4
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 4
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 4
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 5
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 5
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 4
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 5
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50020: LD_ADDR_VAR 0 32
50024: PUSH
50025: LD_INT 4
50027: NEG
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 4
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 3
50050: NEG
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 3
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 4
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 5
50083: NEG
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 5
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 5
50106: NEG
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 3
50118: NEG
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 3
50129: NEG
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 3
50141: NEG
50142: PUSH
50143: LD_INT 4
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: LD_INT 3
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 4
50189: NEG
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 4
50201: NEG
50202: PUSH
50203: LD_INT 4
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 4
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 4
50225: NEG
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 4
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 5
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 4
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 4
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 5
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: LD_INT 5
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 3
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 3
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 4
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 4
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 3
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 4
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 4
50432: PUSH
50433: LD_INT 4
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 4
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 5
50452: PUSH
50453: LD_INT 4
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 5
50462: PUSH
50463: LD_INT 5
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 4
50472: PUSH
50473: LD_INT 5
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: LD_INT 4
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 3
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 5
50502: PUSH
50503: LD_INT 3
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: LD_INT 5
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50567: LD_ADDR_VAR 0 33
50571: PUSH
50572: LD_INT 4
50574: NEG
50575: PUSH
50576: LD_INT 4
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 4
50586: NEG
50587: PUSH
50588: LD_INT 5
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: LD_INT 4
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 3
50610: NEG
50611: PUSH
50612: LD_INT 3
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 4
50622: NEG
50623: PUSH
50624: LD_INT 3
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 5
50634: NEG
50635: PUSH
50636: LD_INT 4
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 5
50646: NEG
50647: PUSH
50648: LD_INT 5
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: LD_INT 5
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 5
50670: NEG
50671: PUSH
50672: LD_INT 3
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 3
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 4
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 3
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 3
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 4
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 4
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 4
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 4
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 5
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 5
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 4
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 3
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 5
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: LD_INT 3
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 4
50897: PUSH
50898: LD_INT 3
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 4
50907: PUSH
50908: LD_INT 4
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: LD_INT 4
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 3
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 4
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 4
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: LD_INT 4
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 4
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 5
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 5
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 4
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: LD_INT 5
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51105: LD_ADDR_VAR 0 34
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 4
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 5
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 4
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 3
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 4
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 5
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 3
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: LD_INT 5
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 3
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 3
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 4
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 4
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 3
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 4
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 4
51307: PUSH
51308: LD_INT 4
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 4
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 5
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 5
51337: PUSH
51338: LD_INT 5
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 4
51347: PUSH
51348: LD_INT 5
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: LD_INT 4
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 5
51377: PUSH
51378: LD_INT 3
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: LD_INT 5
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 4
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 4
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 3
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 4
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 4
51490: NEG
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 4
51501: NEG
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 3
51513: NEG
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 3
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 4
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 5
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 5
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 5
51569: NEG
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 3
51581: NEG
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: ST_TO_ADDR
// end ; end ;
51637: GO 51640
51639: POP
// case btype of b_depot , b_warehouse :
51640: LD_VAR 0 1
51644: PUSH
51645: LD_INT 0
51647: DOUBLE
51648: EQUAL
51649: IFTRUE 51659
51651: LD_INT 1
51653: DOUBLE
51654: EQUAL
51655: IFTRUE 51659
51657: GO 51860
51659: POP
// case nation of nation_american :
51660: LD_VAR 0 5
51664: PUSH
51665: LD_INT 1
51667: DOUBLE
51668: EQUAL
51669: IFTRUE 51673
51671: GO 51729
51673: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51674: LD_ADDR_VAR 0 9
51678: PUSH
51679: LD_VAR 0 11
51683: PUSH
51684: LD_VAR 0 12
51688: PUSH
51689: LD_VAR 0 13
51693: PUSH
51694: LD_VAR 0 14
51698: PUSH
51699: LD_VAR 0 15
51703: PUSH
51704: LD_VAR 0 16
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: PUSH
51717: LD_VAR 0 4
51721: PUSH
51722: LD_INT 1
51724: PLUS
51725: ARRAY
51726: ST_TO_ADDR
51727: GO 51858
51729: LD_INT 2
51731: DOUBLE
51732: EQUAL
51733: IFTRUE 51737
51735: GO 51793
51737: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
51738: LD_ADDR_VAR 0 9
51742: PUSH
51743: LD_VAR 0 17
51747: PUSH
51748: LD_VAR 0 18
51752: PUSH
51753: LD_VAR 0 19
51757: PUSH
51758: LD_VAR 0 20
51762: PUSH
51763: LD_VAR 0 21
51767: PUSH
51768: LD_VAR 0 22
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: PUSH
51781: LD_VAR 0 4
51785: PUSH
51786: LD_INT 1
51788: PLUS
51789: ARRAY
51790: ST_TO_ADDR
51791: GO 51858
51793: LD_INT 3
51795: DOUBLE
51796: EQUAL
51797: IFTRUE 51801
51799: GO 51857
51801: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51802: LD_ADDR_VAR 0 9
51806: PUSH
51807: LD_VAR 0 23
51811: PUSH
51812: LD_VAR 0 24
51816: PUSH
51817: LD_VAR 0 25
51821: PUSH
51822: LD_VAR 0 26
51826: PUSH
51827: LD_VAR 0 27
51831: PUSH
51832: LD_VAR 0 28
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: PUSH
51845: LD_VAR 0 4
51849: PUSH
51850: LD_INT 1
51852: PLUS
51853: ARRAY
51854: ST_TO_ADDR
51855: GO 51858
51857: POP
51858: GO 52413
51860: LD_INT 2
51862: DOUBLE
51863: EQUAL
51864: IFTRUE 51874
51866: LD_INT 3
51868: DOUBLE
51869: EQUAL
51870: IFTRUE 51874
51872: GO 51930
51874: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51875: LD_ADDR_VAR 0 9
51879: PUSH
51880: LD_VAR 0 29
51884: PUSH
51885: LD_VAR 0 30
51889: PUSH
51890: LD_VAR 0 31
51894: PUSH
51895: LD_VAR 0 32
51899: PUSH
51900: LD_VAR 0 33
51904: PUSH
51905: LD_VAR 0 34
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: PUSH
51918: LD_VAR 0 4
51922: PUSH
51923: LD_INT 1
51925: PLUS
51926: ARRAY
51927: ST_TO_ADDR
51928: GO 52413
51930: LD_INT 16
51932: DOUBLE
51933: EQUAL
51934: IFTRUE 51992
51936: LD_INT 17
51938: DOUBLE
51939: EQUAL
51940: IFTRUE 51992
51942: LD_INT 18
51944: DOUBLE
51945: EQUAL
51946: IFTRUE 51992
51948: LD_INT 19
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51992
51954: LD_INT 22
51956: DOUBLE
51957: EQUAL
51958: IFTRUE 51992
51960: LD_INT 20
51962: DOUBLE
51963: EQUAL
51964: IFTRUE 51992
51966: LD_INT 21
51968: DOUBLE
51969: EQUAL
51970: IFTRUE 51992
51972: LD_INT 23
51974: DOUBLE
51975: EQUAL
51976: IFTRUE 51992
51978: LD_INT 24
51980: DOUBLE
51981: EQUAL
51982: IFTRUE 51992
51984: LD_INT 25
51986: DOUBLE
51987: EQUAL
51988: IFTRUE 51992
51990: GO 52048
51992: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51993: LD_ADDR_VAR 0 9
51997: PUSH
51998: LD_VAR 0 35
52002: PUSH
52003: LD_VAR 0 36
52007: PUSH
52008: LD_VAR 0 37
52012: PUSH
52013: LD_VAR 0 38
52017: PUSH
52018: LD_VAR 0 39
52022: PUSH
52023: LD_VAR 0 40
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: PUSH
52036: LD_VAR 0 4
52040: PUSH
52041: LD_INT 1
52043: PLUS
52044: ARRAY
52045: ST_TO_ADDR
52046: GO 52413
52048: LD_INT 6
52050: DOUBLE
52051: EQUAL
52052: IFTRUE 52104
52054: LD_INT 7
52056: DOUBLE
52057: EQUAL
52058: IFTRUE 52104
52060: LD_INT 8
52062: DOUBLE
52063: EQUAL
52064: IFTRUE 52104
52066: LD_INT 13
52068: DOUBLE
52069: EQUAL
52070: IFTRUE 52104
52072: LD_INT 12
52074: DOUBLE
52075: EQUAL
52076: IFTRUE 52104
52078: LD_INT 15
52080: DOUBLE
52081: EQUAL
52082: IFTRUE 52104
52084: LD_INT 11
52086: DOUBLE
52087: EQUAL
52088: IFTRUE 52104
52090: LD_INT 14
52092: DOUBLE
52093: EQUAL
52094: IFTRUE 52104
52096: LD_INT 10
52098: DOUBLE
52099: EQUAL
52100: IFTRUE 52104
52102: GO 52160
52104: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52105: LD_ADDR_VAR 0 9
52109: PUSH
52110: LD_VAR 0 41
52114: PUSH
52115: LD_VAR 0 42
52119: PUSH
52120: LD_VAR 0 43
52124: PUSH
52125: LD_VAR 0 44
52129: PUSH
52130: LD_VAR 0 45
52134: PUSH
52135: LD_VAR 0 46
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: PUSH
52148: LD_VAR 0 4
52152: PUSH
52153: LD_INT 1
52155: PLUS
52156: ARRAY
52157: ST_TO_ADDR
52158: GO 52413
52160: LD_INT 36
52162: DOUBLE
52163: EQUAL
52164: IFTRUE 52168
52166: GO 52224
52168: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52169: LD_ADDR_VAR 0 9
52173: PUSH
52174: LD_VAR 0 47
52178: PUSH
52179: LD_VAR 0 48
52183: PUSH
52184: LD_VAR 0 49
52188: PUSH
52189: LD_VAR 0 50
52193: PUSH
52194: LD_VAR 0 51
52198: PUSH
52199: LD_VAR 0 52
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: PUSH
52212: LD_VAR 0 4
52216: PUSH
52217: LD_INT 1
52219: PLUS
52220: ARRAY
52221: ST_TO_ADDR
52222: GO 52413
52224: LD_INT 4
52226: DOUBLE
52227: EQUAL
52228: IFTRUE 52250
52230: LD_INT 5
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52250
52236: LD_INT 34
52238: DOUBLE
52239: EQUAL
52240: IFTRUE 52250
52242: LD_INT 37
52244: DOUBLE
52245: EQUAL
52246: IFTRUE 52250
52248: GO 52306
52250: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52251: LD_ADDR_VAR 0 9
52255: PUSH
52256: LD_VAR 0 53
52260: PUSH
52261: LD_VAR 0 54
52265: PUSH
52266: LD_VAR 0 55
52270: PUSH
52271: LD_VAR 0 56
52275: PUSH
52276: LD_VAR 0 57
52280: PUSH
52281: LD_VAR 0 58
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: PUSH
52294: LD_VAR 0 4
52298: PUSH
52299: LD_INT 1
52301: PLUS
52302: ARRAY
52303: ST_TO_ADDR
52304: GO 52413
52306: LD_INT 31
52308: DOUBLE
52309: EQUAL
52310: IFTRUE 52356
52312: LD_INT 32
52314: DOUBLE
52315: EQUAL
52316: IFTRUE 52356
52318: LD_INT 33
52320: DOUBLE
52321: EQUAL
52322: IFTRUE 52356
52324: LD_INT 27
52326: DOUBLE
52327: EQUAL
52328: IFTRUE 52356
52330: LD_INT 26
52332: DOUBLE
52333: EQUAL
52334: IFTRUE 52356
52336: LD_INT 28
52338: DOUBLE
52339: EQUAL
52340: IFTRUE 52356
52342: LD_INT 29
52344: DOUBLE
52345: EQUAL
52346: IFTRUE 52356
52348: LD_INT 30
52350: DOUBLE
52351: EQUAL
52352: IFTRUE 52356
52354: GO 52412
52356: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52357: LD_ADDR_VAR 0 9
52361: PUSH
52362: LD_VAR 0 59
52366: PUSH
52367: LD_VAR 0 60
52371: PUSH
52372: LD_VAR 0 61
52376: PUSH
52377: LD_VAR 0 62
52381: PUSH
52382: LD_VAR 0 63
52386: PUSH
52387: LD_VAR 0 64
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: PUSH
52400: LD_VAR 0 4
52404: PUSH
52405: LD_INT 1
52407: PLUS
52408: ARRAY
52409: ST_TO_ADDR
52410: GO 52413
52412: POP
// temp_list2 = [ ] ;
52413: LD_ADDR_VAR 0 10
52417: PUSH
52418: EMPTY
52419: ST_TO_ADDR
// for i in temp_list do
52420: LD_ADDR_VAR 0 8
52424: PUSH
52425: LD_VAR 0 9
52429: PUSH
52430: FOR_IN
52431: IFFALSE 52483
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52433: LD_ADDR_VAR 0 10
52437: PUSH
52438: LD_VAR 0 10
52442: PUSH
52443: LD_VAR 0 8
52447: PUSH
52448: LD_INT 1
52450: ARRAY
52451: PUSH
52452: LD_VAR 0 2
52456: PLUS
52457: PUSH
52458: LD_VAR 0 8
52462: PUSH
52463: LD_INT 2
52465: ARRAY
52466: PUSH
52467: LD_VAR 0 3
52471: PLUS
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: EMPTY
52478: LIST
52479: ADD
52480: ST_TO_ADDR
52481: GO 52430
52483: POP
52484: POP
// result = temp_list2 ;
52485: LD_ADDR_VAR 0 7
52489: PUSH
52490: LD_VAR 0 10
52494: ST_TO_ADDR
// end ;
52495: LD_VAR 0 7
52499: RET
// export function EnemyInRange ( unit , dist ) ; begin
52500: LD_INT 0
52502: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52503: LD_ADDR_VAR 0 3
52507: PUSH
52508: LD_VAR 0 1
52512: PPUSH
52513: CALL_OW 255
52517: PPUSH
52518: LD_VAR 0 1
52522: PPUSH
52523: CALL_OW 250
52527: PPUSH
52528: LD_VAR 0 1
52532: PPUSH
52533: CALL_OW 251
52537: PPUSH
52538: LD_VAR 0 2
52542: PPUSH
52543: CALL 26604 0 4
52547: PUSH
52548: LD_INT 4
52550: ARRAY
52551: ST_TO_ADDR
// end ;
52552: LD_VAR 0 3
52556: RET
// export function PlayerSeeMe ( unit ) ; begin
52557: LD_INT 0
52559: PPUSH
// result := See ( your_side , unit ) ;
52560: LD_ADDR_VAR 0 2
52564: PUSH
52565: LD_OWVAR 2
52569: PPUSH
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL_OW 292
52579: ST_TO_ADDR
// end ;
52580: LD_VAR 0 2
52584: RET
// export function ReverseDir ( unit ) ; begin
52585: LD_INT 0
52587: PPUSH
// if not unit then
52588: LD_VAR 0 1
52592: NOT
52593: IFFALSE 52597
// exit ;
52595: GO 52620
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52597: LD_ADDR_VAR 0 2
52601: PUSH
52602: LD_VAR 0 1
52606: PPUSH
52607: CALL_OW 254
52611: PUSH
52612: LD_INT 3
52614: PLUS
52615: PUSH
52616: LD_INT 6
52618: MOD
52619: ST_TO_ADDR
// end ;
52620: LD_VAR 0 2
52624: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52625: LD_INT 0
52627: PPUSH
52628: PPUSH
52629: PPUSH
52630: PPUSH
52631: PPUSH
// if not hexes then
52632: LD_VAR 0 2
52636: NOT
52637: IFFALSE 52641
// exit ;
52639: GO 52789
// dist := 9999 ;
52641: LD_ADDR_VAR 0 5
52645: PUSH
52646: LD_INT 9999
52648: ST_TO_ADDR
// for i = 1 to hexes do
52649: LD_ADDR_VAR 0 4
52653: PUSH
52654: DOUBLE
52655: LD_INT 1
52657: DEC
52658: ST_TO_ADDR
52659: LD_VAR 0 2
52663: PUSH
52664: FOR_TO
52665: IFFALSE 52777
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52667: LD_VAR 0 1
52671: PPUSH
52672: LD_VAR 0 2
52676: PUSH
52677: LD_VAR 0 4
52681: ARRAY
52682: PUSH
52683: LD_INT 1
52685: ARRAY
52686: PPUSH
52687: LD_VAR 0 2
52691: PUSH
52692: LD_VAR 0 4
52696: ARRAY
52697: PUSH
52698: LD_INT 2
52700: ARRAY
52701: PPUSH
52702: CALL_OW 297
52706: PUSH
52707: LD_VAR 0 5
52711: LESS
52712: IFFALSE 52775
// begin hex := hexes [ i ] ;
52714: LD_ADDR_VAR 0 7
52718: PUSH
52719: LD_VAR 0 2
52723: PUSH
52724: LD_VAR 0 4
52728: ARRAY
52729: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52730: LD_ADDR_VAR 0 5
52734: PUSH
52735: LD_VAR 0 1
52739: PPUSH
52740: LD_VAR 0 2
52744: PUSH
52745: LD_VAR 0 4
52749: ARRAY
52750: PUSH
52751: LD_INT 1
52753: ARRAY
52754: PPUSH
52755: LD_VAR 0 2
52759: PUSH
52760: LD_VAR 0 4
52764: ARRAY
52765: PUSH
52766: LD_INT 2
52768: ARRAY
52769: PPUSH
52770: CALL_OW 297
52774: ST_TO_ADDR
// end ; end ;
52775: GO 52664
52777: POP
52778: POP
// result := hex ;
52779: LD_ADDR_VAR 0 3
52783: PUSH
52784: LD_VAR 0 7
52788: ST_TO_ADDR
// end ;
52789: LD_VAR 0 3
52793: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52794: LD_INT 0
52796: PPUSH
52797: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52798: LD_VAR 0 1
52802: NOT
52803: PUSH
52804: LD_VAR 0 1
52808: PUSH
52809: LD_INT 21
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 23
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PPUSH
52833: CALL_OW 69
52837: IN
52838: NOT
52839: OR
52840: IFFALSE 52844
// exit ;
52842: GO 52891
// for i = 1 to 3 do
52844: LD_ADDR_VAR 0 3
52848: PUSH
52849: DOUBLE
52850: LD_INT 1
52852: DEC
52853: ST_TO_ADDR
52854: LD_INT 3
52856: PUSH
52857: FOR_TO
52858: IFFALSE 52889
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52860: LD_VAR 0 1
52864: PPUSH
52865: CALL_OW 250
52869: PPUSH
52870: LD_VAR 0 1
52874: PPUSH
52875: CALL_OW 251
52879: PPUSH
52880: LD_INT 1
52882: PPUSH
52883: CALL_OW 453
52887: GO 52857
52889: POP
52890: POP
// end ;
52891: LD_VAR 0 2
52895: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52896: LD_INT 0
52898: PPUSH
52899: PPUSH
52900: PPUSH
52901: PPUSH
52902: PPUSH
52903: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52904: LD_VAR 0 1
52908: NOT
52909: PUSH
52910: LD_VAR 0 2
52914: NOT
52915: OR
52916: PUSH
52917: LD_VAR 0 1
52921: PPUSH
52922: CALL_OW 314
52926: OR
52927: IFFALSE 52931
// exit ;
52929: GO 53372
// x := GetX ( enemy_unit ) ;
52931: LD_ADDR_VAR 0 7
52935: PUSH
52936: LD_VAR 0 2
52940: PPUSH
52941: CALL_OW 250
52945: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52946: LD_ADDR_VAR 0 8
52950: PUSH
52951: LD_VAR 0 2
52955: PPUSH
52956: CALL_OW 251
52960: ST_TO_ADDR
// if not x or not y then
52961: LD_VAR 0 7
52965: NOT
52966: PUSH
52967: LD_VAR 0 8
52971: NOT
52972: OR
52973: IFFALSE 52977
// exit ;
52975: GO 53372
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52977: LD_ADDR_VAR 0 6
52981: PUSH
52982: LD_VAR 0 7
52986: PPUSH
52987: LD_INT 0
52989: PPUSH
52990: LD_INT 4
52992: PPUSH
52993: CALL_OW 272
52997: PUSH
52998: LD_VAR 0 8
53002: PPUSH
53003: LD_INT 0
53005: PPUSH
53006: LD_INT 4
53008: PPUSH
53009: CALL_OW 273
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_VAR 0 7
53022: PPUSH
53023: LD_INT 1
53025: PPUSH
53026: LD_INT 4
53028: PPUSH
53029: CALL_OW 272
53033: PUSH
53034: LD_VAR 0 8
53038: PPUSH
53039: LD_INT 1
53041: PPUSH
53042: LD_INT 4
53044: PPUSH
53045: CALL_OW 273
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_VAR 0 7
53058: PPUSH
53059: LD_INT 2
53061: PPUSH
53062: LD_INT 4
53064: PPUSH
53065: CALL_OW 272
53069: PUSH
53070: LD_VAR 0 8
53074: PPUSH
53075: LD_INT 2
53077: PPUSH
53078: LD_INT 4
53080: PPUSH
53081: CALL_OW 273
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_VAR 0 7
53094: PPUSH
53095: LD_INT 3
53097: PPUSH
53098: LD_INT 4
53100: PPUSH
53101: CALL_OW 272
53105: PUSH
53106: LD_VAR 0 8
53110: PPUSH
53111: LD_INT 3
53113: PPUSH
53114: LD_INT 4
53116: PPUSH
53117: CALL_OW 273
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_VAR 0 7
53130: PPUSH
53131: LD_INT 4
53133: PPUSH
53134: LD_INT 4
53136: PPUSH
53137: CALL_OW 272
53141: PUSH
53142: LD_VAR 0 8
53146: PPUSH
53147: LD_INT 4
53149: PPUSH
53150: LD_INT 4
53152: PPUSH
53153: CALL_OW 273
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_VAR 0 7
53166: PPUSH
53167: LD_INT 5
53169: PPUSH
53170: LD_INT 4
53172: PPUSH
53173: CALL_OW 272
53177: PUSH
53178: LD_VAR 0 8
53182: PPUSH
53183: LD_INT 5
53185: PPUSH
53186: LD_INT 4
53188: PPUSH
53189: CALL_OW 273
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: ST_TO_ADDR
// for i = tmp downto 1 do
53206: LD_ADDR_VAR 0 4
53210: PUSH
53211: DOUBLE
53212: LD_VAR 0 6
53216: INC
53217: ST_TO_ADDR
53218: LD_INT 1
53220: PUSH
53221: FOR_DOWNTO
53222: IFFALSE 53323
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53224: LD_VAR 0 6
53228: PUSH
53229: LD_VAR 0 4
53233: ARRAY
53234: PUSH
53235: LD_INT 1
53237: ARRAY
53238: PPUSH
53239: LD_VAR 0 6
53243: PUSH
53244: LD_VAR 0 4
53248: ARRAY
53249: PUSH
53250: LD_INT 2
53252: ARRAY
53253: PPUSH
53254: CALL_OW 488
53258: NOT
53259: PUSH
53260: LD_VAR 0 6
53264: PUSH
53265: LD_VAR 0 4
53269: ARRAY
53270: PUSH
53271: LD_INT 1
53273: ARRAY
53274: PPUSH
53275: LD_VAR 0 6
53279: PUSH
53280: LD_VAR 0 4
53284: ARRAY
53285: PUSH
53286: LD_INT 2
53288: ARRAY
53289: PPUSH
53290: CALL_OW 428
53294: PUSH
53295: LD_INT 0
53297: NONEQUAL
53298: OR
53299: IFFALSE 53321
// tmp := Delete ( tmp , i ) ;
53301: LD_ADDR_VAR 0 6
53305: PUSH
53306: LD_VAR 0 6
53310: PPUSH
53311: LD_VAR 0 4
53315: PPUSH
53316: CALL_OW 3
53320: ST_TO_ADDR
53321: GO 53221
53323: POP
53324: POP
// j := GetClosestHex ( unit , tmp ) ;
53325: LD_ADDR_VAR 0 5
53329: PUSH
53330: LD_VAR 0 1
53334: PPUSH
53335: LD_VAR 0 6
53339: PPUSH
53340: CALL 52625 0 2
53344: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53345: LD_VAR 0 1
53349: PPUSH
53350: LD_VAR 0 5
53354: PUSH
53355: LD_INT 1
53357: ARRAY
53358: PPUSH
53359: LD_VAR 0 5
53363: PUSH
53364: LD_INT 2
53366: ARRAY
53367: PPUSH
53368: CALL_OW 111
// end ;
53372: LD_VAR 0 3
53376: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53377: LD_INT 0
53379: PPUSH
53380: PPUSH
53381: PPUSH
// uc_side = 0 ;
53382: LD_ADDR_OWVAR 20
53386: PUSH
53387: LD_INT 0
53389: ST_TO_ADDR
// uc_nation = 0 ;
53390: LD_ADDR_OWVAR 21
53394: PUSH
53395: LD_INT 0
53397: ST_TO_ADDR
// InitHc ;
53398: CALL_OW 19
// InitVc ;
53402: CALL_OW 20
// if mastodonts then
53406: LD_VAR 0 6
53410: IFFALSE 53477
// for i = 1 to mastodonts do
53412: LD_ADDR_VAR 0 11
53416: PUSH
53417: DOUBLE
53418: LD_INT 1
53420: DEC
53421: ST_TO_ADDR
53422: LD_VAR 0 6
53426: PUSH
53427: FOR_TO
53428: IFFALSE 53475
// begin vc_chassis := 31 ;
53430: LD_ADDR_OWVAR 37
53434: PUSH
53435: LD_INT 31
53437: ST_TO_ADDR
// vc_control := control_rider ;
53438: LD_ADDR_OWVAR 38
53442: PUSH
53443: LD_INT 4
53445: ST_TO_ADDR
// animal := CreateVehicle ;
53446: LD_ADDR_VAR 0 12
53450: PUSH
53451: CALL_OW 45
53455: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53456: LD_VAR 0 12
53460: PPUSH
53461: LD_VAR 0 8
53465: PPUSH
53466: LD_INT 0
53468: PPUSH
53469: CALL 55546 0 3
// end ;
53473: GO 53427
53475: POP
53476: POP
// if horses then
53477: LD_VAR 0 5
53481: IFFALSE 53548
// for i = 1 to horses do
53483: LD_ADDR_VAR 0 11
53487: PUSH
53488: DOUBLE
53489: LD_INT 1
53491: DEC
53492: ST_TO_ADDR
53493: LD_VAR 0 5
53497: PUSH
53498: FOR_TO
53499: IFFALSE 53546
// begin hc_class := 21 ;
53501: LD_ADDR_OWVAR 28
53505: PUSH
53506: LD_INT 21
53508: ST_TO_ADDR
// hc_gallery :=  ;
53509: LD_ADDR_OWVAR 33
53513: PUSH
53514: LD_STRING 
53516: ST_TO_ADDR
// animal := CreateHuman ;
53517: LD_ADDR_VAR 0 12
53521: PUSH
53522: CALL_OW 44
53526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53527: LD_VAR 0 12
53531: PPUSH
53532: LD_VAR 0 8
53536: PPUSH
53537: LD_INT 0
53539: PPUSH
53540: CALL 55546 0 3
// end ;
53544: GO 53498
53546: POP
53547: POP
// if birds then
53548: LD_VAR 0 1
53552: IFFALSE 53619
// for i = 1 to birds do
53554: LD_ADDR_VAR 0 11
53558: PUSH
53559: DOUBLE
53560: LD_INT 1
53562: DEC
53563: ST_TO_ADDR
53564: LD_VAR 0 1
53568: PUSH
53569: FOR_TO
53570: IFFALSE 53617
// begin hc_class = 18 ;
53572: LD_ADDR_OWVAR 28
53576: PUSH
53577: LD_INT 18
53579: ST_TO_ADDR
// hc_gallery =  ;
53580: LD_ADDR_OWVAR 33
53584: PUSH
53585: LD_STRING 
53587: ST_TO_ADDR
// animal := CreateHuman ;
53588: LD_ADDR_VAR 0 12
53592: PUSH
53593: CALL_OW 44
53597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53598: LD_VAR 0 12
53602: PPUSH
53603: LD_VAR 0 8
53607: PPUSH
53608: LD_INT 0
53610: PPUSH
53611: CALL 55546 0 3
// end ;
53615: GO 53569
53617: POP
53618: POP
// if tigers then
53619: LD_VAR 0 2
53623: IFFALSE 53707
// for i = 1 to tigers do
53625: LD_ADDR_VAR 0 11
53629: PUSH
53630: DOUBLE
53631: LD_INT 1
53633: DEC
53634: ST_TO_ADDR
53635: LD_VAR 0 2
53639: PUSH
53640: FOR_TO
53641: IFFALSE 53705
// begin hc_class = class_tiger ;
53643: LD_ADDR_OWVAR 28
53647: PUSH
53648: LD_INT 14
53650: ST_TO_ADDR
// hc_gallery =  ;
53651: LD_ADDR_OWVAR 33
53655: PUSH
53656: LD_STRING 
53658: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53659: LD_ADDR_OWVAR 35
53663: PUSH
53664: LD_INT 7
53666: NEG
53667: PPUSH
53668: LD_INT 7
53670: PPUSH
53671: CALL_OW 12
53675: ST_TO_ADDR
// animal := CreateHuman ;
53676: LD_ADDR_VAR 0 12
53680: PUSH
53681: CALL_OW 44
53685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53686: LD_VAR 0 12
53690: PPUSH
53691: LD_VAR 0 8
53695: PPUSH
53696: LD_INT 0
53698: PPUSH
53699: CALL 55546 0 3
// end ;
53703: GO 53640
53705: POP
53706: POP
// if apemans then
53707: LD_VAR 0 3
53711: IFFALSE 53834
// for i = 1 to apemans do
53713: LD_ADDR_VAR 0 11
53717: PUSH
53718: DOUBLE
53719: LD_INT 1
53721: DEC
53722: ST_TO_ADDR
53723: LD_VAR 0 3
53727: PUSH
53728: FOR_TO
53729: IFFALSE 53832
// begin hc_class = class_apeman ;
53731: LD_ADDR_OWVAR 28
53735: PUSH
53736: LD_INT 12
53738: ST_TO_ADDR
// hc_gallery =  ;
53739: LD_ADDR_OWVAR 33
53743: PUSH
53744: LD_STRING 
53746: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53747: LD_ADDR_OWVAR 35
53751: PUSH
53752: LD_INT 5
53754: NEG
53755: PPUSH
53756: LD_INT 5
53758: PPUSH
53759: CALL_OW 12
53763: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53764: LD_ADDR_OWVAR 31
53768: PUSH
53769: LD_INT 1
53771: PPUSH
53772: LD_INT 3
53774: PPUSH
53775: CALL_OW 12
53779: PUSH
53780: LD_INT 1
53782: PPUSH
53783: LD_INT 3
53785: PPUSH
53786: CALL_OW 12
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: ST_TO_ADDR
// animal := CreateHuman ;
53803: LD_ADDR_VAR 0 12
53807: PUSH
53808: CALL_OW 44
53812: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53813: LD_VAR 0 12
53817: PPUSH
53818: LD_VAR 0 8
53822: PPUSH
53823: LD_INT 0
53825: PPUSH
53826: CALL 55546 0 3
// end ;
53830: GO 53728
53832: POP
53833: POP
// if enchidnas then
53834: LD_VAR 0 4
53838: IFFALSE 53905
// for i = 1 to enchidnas do
53840: LD_ADDR_VAR 0 11
53844: PUSH
53845: DOUBLE
53846: LD_INT 1
53848: DEC
53849: ST_TO_ADDR
53850: LD_VAR 0 4
53854: PUSH
53855: FOR_TO
53856: IFFALSE 53903
// begin hc_class = 13 ;
53858: LD_ADDR_OWVAR 28
53862: PUSH
53863: LD_INT 13
53865: ST_TO_ADDR
// hc_gallery =  ;
53866: LD_ADDR_OWVAR 33
53870: PUSH
53871: LD_STRING 
53873: ST_TO_ADDR
// animal := CreateHuman ;
53874: LD_ADDR_VAR 0 12
53878: PUSH
53879: CALL_OW 44
53883: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53884: LD_VAR 0 12
53888: PPUSH
53889: LD_VAR 0 8
53893: PPUSH
53894: LD_INT 0
53896: PPUSH
53897: CALL 55546 0 3
// end ;
53901: GO 53855
53903: POP
53904: POP
// if fishes then
53905: LD_VAR 0 7
53909: IFFALSE 53976
// for i = 1 to fishes do
53911: LD_ADDR_VAR 0 11
53915: PUSH
53916: DOUBLE
53917: LD_INT 1
53919: DEC
53920: ST_TO_ADDR
53921: LD_VAR 0 7
53925: PUSH
53926: FOR_TO
53927: IFFALSE 53974
// begin hc_class = 20 ;
53929: LD_ADDR_OWVAR 28
53933: PUSH
53934: LD_INT 20
53936: ST_TO_ADDR
// hc_gallery =  ;
53937: LD_ADDR_OWVAR 33
53941: PUSH
53942: LD_STRING 
53944: ST_TO_ADDR
// animal := CreateHuman ;
53945: LD_ADDR_VAR 0 12
53949: PUSH
53950: CALL_OW 44
53954: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53955: LD_VAR 0 12
53959: PPUSH
53960: LD_VAR 0 9
53964: PPUSH
53965: LD_INT 0
53967: PPUSH
53968: CALL 55546 0 3
// end ;
53972: GO 53926
53974: POP
53975: POP
// end ;
53976: LD_VAR 0 10
53980: RET
// export function WantHeal ( sci , unit ) ; begin
53981: LD_INT 0
53983: PPUSH
// if GetTaskList ( sci ) > 0 then
53984: LD_VAR 0 1
53988: PPUSH
53989: CALL_OW 437
53993: PUSH
53994: LD_INT 0
53996: GREATER
53997: IFFALSE 54067
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53999: LD_VAR 0 1
54003: PPUSH
54004: CALL_OW 437
54008: PUSH
54009: LD_INT 1
54011: ARRAY
54012: PUSH
54013: LD_INT 1
54015: ARRAY
54016: PUSH
54017: LD_STRING l
54019: EQUAL
54020: PUSH
54021: LD_VAR 0 1
54025: PPUSH
54026: CALL_OW 437
54030: PUSH
54031: LD_INT 1
54033: ARRAY
54034: PUSH
54035: LD_INT 4
54037: ARRAY
54038: PUSH
54039: LD_VAR 0 2
54043: EQUAL
54044: AND
54045: IFFALSE 54057
// result := true else
54047: LD_ADDR_VAR 0 3
54051: PUSH
54052: LD_INT 1
54054: ST_TO_ADDR
54055: GO 54065
// result := false ;
54057: LD_ADDR_VAR 0 3
54061: PUSH
54062: LD_INT 0
54064: ST_TO_ADDR
// end else
54065: GO 54075
// result := false ;
54067: LD_ADDR_VAR 0 3
54071: PUSH
54072: LD_INT 0
54074: ST_TO_ADDR
// end ;
54075: LD_VAR 0 3
54079: RET
// export function HealTarget ( sci ) ; begin
54080: LD_INT 0
54082: PPUSH
// if not sci then
54083: LD_VAR 0 1
54087: NOT
54088: IFFALSE 54092
// exit ;
54090: GO 54157
// result := 0 ;
54092: LD_ADDR_VAR 0 2
54096: PUSH
54097: LD_INT 0
54099: ST_TO_ADDR
// if GetTaskList ( sci ) then
54100: LD_VAR 0 1
54104: PPUSH
54105: CALL_OW 437
54109: IFFALSE 54157
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54111: LD_VAR 0 1
54115: PPUSH
54116: CALL_OW 437
54120: PUSH
54121: LD_INT 1
54123: ARRAY
54124: PUSH
54125: LD_INT 1
54127: ARRAY
54128: PUSH
54129: LD_STRING l
54131: EQUAL
54132: IFFALSE 54157
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54134: LD_ADDR_VAR 0 2
54138: PUSH
54139: LD_VAR 0 1
54143: PPUSH
54144: CALL_OW 437
54148: PUSH
54149: LD_INT 1
54151: ARRAY
54152: PUSH
54153: LD_INT 4
54155: ARRAY
54156: ST_TO_ADDR
// end ;
54157: LD_VAR 0 2
54161: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54162: LD_INT 0
54164: PPUSH
54165: PPUSH
54166: PPUSH
54167: PPUSH
// if not base_units then
54168: LD_VAR 0 1
54172: NOT
54173: IFFALSE 54177
// exit ;
54175: GO 54264
// result := false ;
54177: LD_ADDR_VAR 0 2
54181: PUSH
54182: LD_INT 0
54184: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54185: LD_ADDR_VAR 0 5
54189: PUSH
54190: LD_VAR 0 1
54194: PPUSH
54195: LD_INT 21
54197: PUSH
54198: LD_INT 3
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PPUSH
54205: CALL_OW 72
54209: ST_TO_ADDR
// if not tmp then
54210: LD_VAR 0 5
54214: NOT
54215: IFFALSE 54219
// exit ;
54217: GO 54264
// for i in tmp do
54219: LD_ADDR_VAR 0 3
54223: PUSH
54224: LD_VAR 0 5
54228: PUSH
54229: FOR_IN
54230: IFFALSE 54262
// begin result := EnemyInRange ( i , 22 ) ;
54232: LD_ADDR_VAR 0 2
54236: PUSH
54237: LD_VAR 0 3
54241: PPUSH
54242: LD_INT 22
54244: PPUSH
54245: CALL 52500 0 2
54249: ST_TO_ADDR
// if result then
54250: LD_VAR 0 2
54254: IFFALSE 54260
// exit ;
54256: POP
54257: POP
54258: GO 54264
// end ;
54260: GO 54229
54262: POP
54263: POP
// end ;
54264: LD_VAR 0 2
54268: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54269: LD_INT 0
54271: PPUSH
54272: PPUSH
// if not units then
54273: LD_VAR 0 1
54277: NOT
54278: IFFALSE 54282
// exit ;
54280: GO 54352
// result := [ ] ;
54282: LD_ADDR_VAR 0 3
54286: PUSH
54287: EMPTY
54288: ST_TO_ADDR
// for i in units do
54289: LD_ADDR_VAR 0 4
54293: PUSH
54294: LD_VAR 0 1
54298: PUSH
54299: FOR_IN
54300: IFFALSE 54350
// if GetTag ( i ) = tag then
54302: LD_VAR 0 4
54306: PPUSH
54307: CALL_OW 110
54311: PUSH
54312: LD_VAR 0 2
54316: EQUAL
54317: IFFALSE 54348
// result := Insert ( result , result + 1 , i ) ;
54319: LD_ADDR_VAR 0 3
54323: PUSH
54324: LD_VAR 0 3
54328: PPUSH
54329: LD_VAR 0 3
54333: PUSH
54334: LD_INT 1
54336: PLUS
54337: PPUSH
54338: LD_VAR 0 4
54342: PPUSH
54343: CALL_OW 2
54347: ST_TO_ADDR
54348: GO 54299
54350: POP
54351: POP
// end ;
54352: LD_VAR 0 3
54356: RET
// export function IsDriver ( un ) ; begin
54357: LD_INT 0
54359: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54360: LD_ADDR_VAR 0 2
54364: PUSH
54365: LD_VAR 0 1
54369: PUSH
54370: LD_INT 55
54372: PUSH
54373: EMPTY
54374: LIST
54375: PPUSH
54376: CALL_OW 69
54380: IN
54381: ST_TO_ADDR
// end ;
54382: LD_VAR 0 2
54386: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54387: LD_INT 0
54389: PPUSH
54390: PPUSH
// list := [ ] ;
54391: LD_ADDR_VAR 0 5
54395: PUSH
54396: EMPTY
54397: ST_TO_ADDR
// case d of 0 :
54398: LD_VAR 0 3
54402: PUSH
54403: LD_INT 0
54405: DOUBLE
54406: EQUAL
54407: IFTRUE 54411
54409: GO 54544
54411: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54412: LD_ADDR_VAR 0 5
54416: PUSH
54417: LD_VAR 0 1
54421: PUSH
54422: LD_INT 4
54424: MINUS
54425: PUSH
54426: LD_VAR 0 2
54430: PUSH
54431: LD_INT 4
54433: MINUS
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: LIST
54442: PUSH
54443: LD_VAR 0 1
54447: PUSH
54448: LD_INT 3
54450: MINUS
54451: PUSH
54452: LD_VAR 0 2
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: PUSH
54465: LD_VAR 0 1
54469: PUSH
54470: LD_INT 4
54472: PLUS
54473: PUSH
54474: LD_VAR 0 2
54478: PUSH
54479: LD_INT 4
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: PUSH
54487: LD_VAR 0 1
54491: PUSH
54492: LD_INT 3
54494: PLUS
54495: PUSH
54496: LD_VAR 0 2
54500: PUSH
54501: LD_INT 3
54503: PLUS
54504: PUSH
54505: LD_INT 5
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: PUSH
54513: LD_VAR 0 1
54517: PUSH
54518: LD_VAR 0 2
54522: PUSH
54523: LD_INT 4
54525: PLUS
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// end ; 1 :
54542: GO 55242
54544: LD_INT 1
54546: DOUBLE
54547: EQUAL
54548: IFTRUE 54552
54550: GO 54685
54552: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54553: LD_ADDR_VAR 0 5
54557: PUSH
54558: LD_VAR 0 1
54562: PUSH
54563: LD_VAR 0 2
54567: PUSH
54568: LD_INT 4
54570: MINUS
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: PUSH
54580: LD_VAR 0 1
54584: PUSH
54585: LD_INT 3
54587: MINUS
54588: PUSH
54589: LD_VAR 0 2
54593: PUSH
54594: LD_INT 3
54596: MINUS
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: PUSH
54606: LD_VAR 0 1
54610: PUSH
54611: LD_INT 4
54613: MINUS
54614: PUSH
54615: LD_VAR 0 2
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: LIST
54627: PUSH
54628: LD_VAR 0 1
54632: PUSH
54633: LD_VAR 0 2
54637: PUSH
54638: LD_INT 3
54640: PLUS
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: PUSH
54650: LD_VAR 0 1
54654: PUSH
54655: LD_INT 4
54657: PLUS
54658: PUSH
54659: LD_VAR 0 2
54663: PUSH
54664: LD_INT 4
54666: PLUS
54667: PUSH
54668: LD_INT 5
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: LIST
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: ST_TO_ADDR
// end ; 2 :
54683: GO 55242
54685: LD_INT 2
54687: DOUBLE
54688: EQUAL
54689: IFTRUE 54693
54691: GO 54822
54693: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54694: LD_ADDR_VAR 0 5
54698: PUSH
54699: LD_VAR 0 1
54703: PUSH
54704: LD_VAR 0 2
54708: PUSH
54709: LD_INT 3
54711: MINUS
54712: PUSH
54713: LD_INT 3
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: PUSH
54721: LD_VAR 0 1
54725: PUSH
54726: LD_INT 4
54728: PLUS
54729: PUSH
54730: LD_VAR 0 2
54734: PUSH
54735: LD_INT 4
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: PUSH
54743: LD_VAR 0 1
54747: PUSH
54748: LD_VAR 0 2
54752: PUSH
54753: LD_INT 4
54755: PLUS
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: PUSH
54765: LD_VAR 0 1
54769: PUSH
54770: LD_INT 3
54772: MINUS
54773: PUSH
54774: LD_VAR 0 2
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: LIST
54786: PUSH
54787: LD_VAR 0 1
54791: PUSH
54792: LD_INT 4
54794: MINUS
54795: PUSH
54796: LD_VAR 0 2
54800: PUSH
54801: LD_INT 4
54803: MINUS
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: LIST
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: ST_TO_ADDR
// end ; 3 :
54820: GO 55242
54822: LD_INT 3
54824: DOUBLE
54825: EQUAL
54826: IFTRUE 54830
54828: GO 54963
54830: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54831: LD_ADDR_VAR 0 5
54835: PUSH
54836: LD_VAR 0 1
54840: PUSH
54841: LD_INT 3
54843: PLUS
54844: PUSH
54845: LD_VAR 0 2
54849: PUSH
54850: LD_INT 4
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: LIST
54857: PUSH
54858: LD_VAR 0 1
54862: PUSH
54863: LD_INT 4
54865: PLUS
54866: PUSH
54867: LD_VAR 0 2
54871: PUSH
54872: LD_INT 4
54874: PLUS
54875: PUSH
54876: LD_INT 5
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: PUSH
54884: LD_VAR 0 1
54888: PUSH
54889: LD_INT 4
54891: MINUS
54892: PUSH
54893: LD_VAR 0 2
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: PUSH
54906: LD_VAR 0 1
54910: PUSH
54911: LD_VAR 0 2
54915: PUSH
54916: LD_INT 4
54918: MINUS
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: LIST
54927: PUSH
54928: LD_VAR 0 1
54932: PUSH
54933: LD_INT 3
54935: MINUS
54936: PUSH
54937: LD_VAR 0 2
54941: PUSH
54942: LD_INT 3
54944: MINUS
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: ST_TO_ADDR
// end ; 4 :
54961: GO 55242
54963: LD_INT 4
54965: DOUBLE
54966: EQUAL
54967: IFTRUE 54971
54969: GO 55104
54971: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54972: LD_ADDR_VAR 0 5
54976: PUSH
54977: LD_VAR 0 1
54981: PUSH
54982: LD_VAR 0 2
54986: PUSH
54987: LD_INT 4
54989: PLUS
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: LIST
54998: PUSH
54999: LD_VAR 0 1
55003: PUSH
55004: LD_INT 3
55006: PLUS
55007: PUSH
55008: LD_VAR 0 2
55012: PUSH
55013: LD_INT 3
55015: PLUS
55016: PUSH
55017: LD_INT 5
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: LIST
55024: PUSH
55025: LD_VAR 0 1
55029: PUSH
55030: LD_INT 4
55032: PLUS
55033: PUSH
55034: LD_VAR 0 2
55038: PUSH
55039: LD_INT 4
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: PUSH
55047: LD_VAR 0 1
55051: PUSH
55052: LD_VAR 0 2
55056: PUSH
55057: LD_INT 3
55059: MINUS
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: PUSH
55069: LD_VAR 0 1
55073: PUSH
55074: LD_INT 4
55076: MINUS
55077: PUSH
55078: LD_VAR 0 2
55082: PUSH
55083: LD_INT 4
55085: MINUS
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: ST_TO_ADDR
// end ; 5 :
55102: GO 55242
55104: LD_INT 5
55106: DOUBLE
55107: EQUAL
55108: IFTRUE 55112
55110: GO 55241
55112: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55113: LD_ADDR_VAR 0 5
55117: PUSH
55118: LD_VAR 0 1
55122: PUSH
55123: LD_INT 4
55125: MINUS
55126: PUSH
55127: LD_VAR 0 2
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: PUSH
55140: LD_VAR 0 1
55144: PUSH
55145: LD_VAR 0 2
55149: PUSH
55150: LD_INT 4
55152: MINUS
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: PUSH
55162: LD_VAR 0 1
55166: PUSH
55167: LD_INT 4
55169: PLUS
55170: PUSH
55171: LD_VAR 0 2
55175: PUSH
55176: LD_INT 4
55178: PLUS
55179: PUSH
55180: LD_INT 5
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: LIST
55187: PUSH
55188: LD_VAR 0 1
55192: PUSH
55193: LD_INT 3
55195: PLUS
55196: PUSH
55197: LD_VAR 0 2
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: LIST
55209: PUSH
55210: LD_VAR 0 1
55214: PUSH
55215: LD_VAR 0 2
55219: PUSH
55220: LD_INT 3
55222: PLUS
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: LIST
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: ST_TO_ADDR
// end ; end ;
55239: GO 55242
55241: POP
// result := list ;
55242: LD_ADDR_VAR 0 4
55246: PUSH
55247: LD_VAR 0 5
55251: ST_TO_ADDR
// end ;
55252: LD_VAR 0 4
55256: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55257: LD_INT 0
55259: PPUSH
55260: PPUSH
55261: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55262: LD_VAR 0 1
55266: NOT
55267: PUSH
55268: LD_VAR 0 2
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: LD_INT 4
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: IN
55291: NOT
55292: OR
55293: IFFALSE 55297
// exit ;
55295: GO 55389
// tmp := [ ] ;
55297: LD_ADDR_VAR 0 5
55301: PUSH
55302: EMPTY
55303: ST_TO_ADDR
// for i in units do
55304: LD_ADDR_VAR 0 4
55308: PUSH
55309: LD_VAR 0 1
55313: PUSH
55314: FOR_IN
55315: IFFALSE 55358
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55317: LD_ADDR_VAR 0 5
55321: PUSH
55322: LD_VAR 0 5
55326: PPUSH
55327: LD_VAR 0 5
55331: PUSH
55332: LD_INT 1
55334: PLUS
55335: PPUSH
55336: LD_VAR 0 4
55340: PPUSH
55341: LD_VAR 0 2
55345: PPUSH
55346: CALL_OW 259
55350: PPUSH
55351: CALL_OW 2
55355: ST_TO_ADDR
55356: GO 55314
55358: POP
55359: POP
// if not tmp then
55360: LD_VAR 0 5
55364: NOT
55365: IFFALSE 55369
// exit ;
55367: GO 55389
// result := SortListByListDesc ( units , tmp ) ;
55369: LD_ADDR_VAR 0 3
55373: PUSH
55374: LD_VAR 0 1
55378: PPUSH
55379: LD_VAR 0 5
55383: PPUSH
55384: CALL_OW 77
55388: ST_TO_ADDR
// end ;
55389: LD_VAR 0 3
55393: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55394: LD_INT 0
55396: PPUSH
55397: PPUSH
55398: PPUSH
// x := GetX ( building ) ;
55399: LD_ADDR_VAR 0 4
55403: PUSH
55404: LD_VAR 0 2
55408: PPUSH
55409: CALL_OW 250
55413: ST_TO_ADDR
// y := GetY ( building ) ;
55414: LD_ADDR_VAR 0 5
55418: PUSH
55419: LD_VAR 0 2
55423: PPUSH
55424: CALL_OW 251
55428: ST_TO_ADDR
// if GetTaskList ( unit ) then
55429: LD_VAR 0 1
55433: PPUSH
55434: CALL_OW 437
55438: IFFALSE 55533
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55440: LD_STRING e
55442: PUSH
55443: LD_VAR 0 1
55447: PPUSH
55448: CALL_OW 437
55452: PUSH
55453: LD_INT 1
55455: ARRAY
55456: PUSH
55457: LD_INT 1
55459: ARRAY
55460: EQUAL
55461: PUSH
55462: LD_VAR 0 4
55466: PUSH
55467: LD_VAR 0 1
55471: PPUSH
55472: CALL_OW 437
55476: PUSH
55477: LD_INT 1
55479: ARRAY
55480: PUSH
55481: LD_INT 2
55483: ARRAY
55484: EQUAL
55485: AND
55486: PUSH
55487: LD_VAR 0 5
55491: PUSH
55492: LD_VAR 0 1
55496: PPUSH
55497: CALL_OW 437
55501: PUSH
55502: LD_INT 1
55504: ARRAY
55505: PUSH
55506: LD_INT 3
55508: ARRAY
55509: EQUAL
55510: AND
55511: IFFALSE 55523
// result := true else
55513: LD_ADDR_VAR 0 3
55517: PUSH
55518: LD_INT 1
55520: ST_TO_ADDR
55521: GO 55531
// result := false ;
55523: LD_ADDR_VAR 0 3
55527: PUSH
55528: LD_INT 0
55530: ST_TO_ADDR
// end else
55531: GO 55541
// result := false ;
55533: LD_ADDR_VAR 0 3
55537: PUSH
55538: LD_INT 0
55540: ST_TO_ADDR
// end ;
55541: LD_VAR 0 3
55545: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55546: LD_INT 0
55548: PPUSH
55549: PPUSH
55550: PPUSH
55551: PPUSH
// if not unit or not area then
55552: LD_VAR 0 1
55556: NOT
55557: PUSH
55558: LD_VAR 0 2
55562: NOT
55563: OR
55564: IFFALSE 55568
// exit ;
55566: GO 55732
// tmp := AreaToList ( area , i ) ;
55568: LD_ADDR_VAR 0 6
55572: PUSH
55573: LD_VAR 0 2
55577: PPUSH
55578: LD_VAR 0 5
55582: PPUSH
55583: CALL_OW 517
55587: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55588: LD_ADDR_VAR 0 5
55592: PUSH
55593: DOUBLE
55594: LD_INT 1
55596: DEC
55597: ST_TO_ADDR
55598: LD_VAR 0 6
55602: PUSH
55603: LD_INT 1
55605: ARRAY
55606: PUSH
55607: FOR_TO
55608: IFFALSE 55730
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55610: LD_ADDR_VAR 0 7
55614: PUSH
55615: LD_VAR 0 6
55619: PUSH
55620: LD_INT 1
55622: ARRAY
55623: PUSH
55624: LD_VAR 0 5
55628: ARRAY
55629: PUSH
55630: LD_VAR 0 6
55634: PUSH
55635: LD_INT 2
55637: ARRAY
55638: PUSH
55639: LD_VAR 0 5
55643: ARRAY
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55649: LD_VAR 0 7
55653: PUSH
55654: LD_INT 1
55656: ARRAY
55657: PPUSH
55658: LD_VAR 0 7
55662: PUSH
55663: LD_INT 2
55665: ARRAY
55666: PPUSH
55667: CALL_OW 428
55671: PUSH
55672: LD_INT 0
55674: EQUAL
55675: IFFALSE 55728
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55677: LD_VAR 0 1
55681: PPUSH
55682: LD_VAR 0 7
55686: PUSH
55687: LD_INT 1
55689: ARRAY
55690: PPUSH
55691: LD_VAR 0 7
55695: PUSH
55696: LD_INT 2
55698: ARRAY
55699: PPUSH
55700: LD_VAR 0 3
55704: PPUSH
55705: CALL_OW 48
// result := IsPlaced ( unit ) ;
55709: LD_ADDR_VAR 0 4
55713: PUSH
55714: LD_VAR 0 1
55718: PPUSH
55719: CALL_OW 305
55723: ST_TO_ADDR
// exit ;
55724: POP
55725: POP
55726: GO 55732
// end ; end ;
55728: GO 55607
55730: POP
55731: POP
// end ;
55732: LD_VAR 0 4
55736: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55737: LD_INT 0
55739: PPUSH
55740: PPUSH
55741: PPUSH
// if not side or side > 8 then
55742: LD_VAR 0 1
55746: NOT
55747: PUSH
55748: LD_VAR 0 1
55752: PUSH
55753: LD_INT 8
55755: GREATER
55756: OR
55757: IFFALSE 55761
// exit ;
55759: GO 55948
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55761: LD_ADDR_VAR 0 4
55765: PUSH
55766: LD_INT 22
55768: PUSH
55769: LD_VAR 0 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 21
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PPUSH
55792: CALL_OW 69
55796: ST_TO_ADDR
// if not tmp then
55797: LD_VAR 0 4
55801: NOT
55802: IFFALSE 55806
// exit ;
55804: GO 55948
// enable_addtolog := true ;
55806: LD_ADDR_OWVAR 81
55810: PUSH
55811: LD_INT 1
55813: ST_TO_ADDR
// AddToLog ( [ ) ;
55814: LD_STRING [
55816: PPUSH
55817: CALL_OW 561
// for i in tmp do
55821: LD_ADDR_VAR 0 3
55825: PUSH
55826: LD_VAR 0 4
55830: PUSH
55831: FOR_IN
55832: IFFALSE 55939
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55834: LD_STRING [
55836: PUSH
55837: LD_VAR 0 3
55841: PPUSH
55842: CALL_OW 266
55846: STR
55847: PUSH
55848: LD_STRING , 
55850: STR
55851: PUSH
55852: LD_VAR 0 3
55856: PPUSH
55857: CALL_OW 250
55861: STR
55862: PUSH
55863: LD_STRING , 
55865: STR
55866: PUSH
55867: LD_VAR 0 3
55871: PPUSH
55872: CALL_OW 251
55876: STR
55877: PUSH
55878: LD_STRING , 
55880: STR
55881: PUSH
55882: LD_VAR 0 3
55886: PPUSH
55887: CALL_OW 254
55891: STR
55892: PUSH
55893: LD_STRING , 
55895: STR
55896: PUSH
55897: LD_VAR 0 3
55901: PPUSH
55902: LD_INT 1
55904: PPUSH
55905: CALL_OW 268
55909: STR
55910: PUSH
55911: LD_STRING , 
55913: STR
55914: PUSH
55915: LD_VAR 0 3
55919: PPUSH
55920: LD_INT 2
55922: PPUSH
55923: CALL_OW 268
55927: STR
55928: PUSH
55929: LD_STRING ],
55931: STR
55932: PPUSH
55933: CALL_OW 561
// end ;
55937: GO 55831
55939: POP
55940: POP
// AddToLog ( ]; ) ;
55941: LD_STRING ];
55943: PPUSH
55944: CALL_OW 561
// end ;
55948: LD_VAR 0 2
55952: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55953: LD_INT 0
55955: PPUSH
55956: PPUSH
55957: PPUSH
55958: PPUSH
55959: PPUSH
// if not area or not rate or not max then
55960: LD_VAR 0 1
55964: NOT
55965: PUSH
55966: LD_VAR 0 2
55970: NOT
55971: OR
55972: PUSH
55973: LD_VAR 0 4
55977: NOT
55978: OR
55979: IFFALSE 55983
// exit ;
55981: GO 56175
// while 1 do
55983: LD_INT 1
55985: IFFALSE 56175
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55987: LD_ADDR_VAR 0 9
55991: PUSH
55992: LD_VAR 0 1
55996: PPUSH
55997: LD_INT 1
55999: PPUSH
56000: CALL_OW 287
56004: PUSH
56005: LD_INT 10
56007: MUL
56008: ST_TO_ADDR
// r := rate / 10 ;
56009: LD_ADDR_VAR 0 7
56013: PUSH
56014: LD_VAR 0 2
56018: PUSH
56019: LD_INT 10
56021: DIVREAL
56022: ST_TO_ADDR
// time := 1 1$00 ;
56023: LD_ADDR_VAR 0 8
56027: PUSH
56028: LD_INT 2100
56030: ST_TO_ADDR
// if amount < min then
56031: LD_VAR 0 9
56035: PUSH
56036: LD_VAR 0 3
56040: LESS
56041: IFFALSE 56059
// r := r * 2 else
56043: LD_ADDR_VAR 0 7
56047: PUSH
56048: LD_VAR 0 7
56052: PUSH
56053: LD_INT 2
56055: MUL
56056: ST_TO_ADDR
56057: GO 56085
// if amount > max then
56059: LD_VAR 0 9
56063: PUSH
56064: LD_VAR 0 4
56068: GREATER
56069: IFFALSE 56085
// r := r / 2 ;
56071: LD_ADDR_VAR 0 7
56075: PUSH
56076: LD_VAR 0 7
56080: PUSH
56081: LD_INT 2
56083: DIVREAL
56084: ST_TO_ADDR
// time := time / r ;
56085: LD_ADDR_VAR 0 8
56089: PUSH
56090: LD_VAR 0 8
56094: PUSH
56095: LD_VAR 0 7
56099: DIVREAL
56100: ST_TO_ADDR
// if time < 0 then
56101: LD_VAR 0 8
56105: PUSH
56106: LD_INT 0
56108: LESS
56109: IFFALSE 56126
// time := time * - 1 ;
56111: LD_ADDR_VAR 0 8
56115: PUSH
56116: LD_VAR 0 8
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: MUL
56125: ST_TO_ADDR
// wait ( time ) ;
56126: LD_VAR 0 8
56130: PPUSH
56131: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56135: LD_INT 35
56137: PPUSH
56138: LD_INT 875
56140: PPUSH
56141: CALL_OW 12
56145: PPUSH
56146: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56150: LD_INT 1
56152: PPUSH
56153: LD_INT 5
56155: PPUSH
56156: CALL_OW 12
56160: PPUSH
56161: LD_VAR 0 1
56165: PPUSH
56166: LD_INT 1
56168: PPUSH
56169: CALL_OW 55
// end ;
56173: GO 55983
// end ;
56175: LD_VAR 0 5
56179: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56180: LD_INT 0
56182: PPUSH
56183: PPUSH
56184: PPUSH
56185: PPUSH
56186: PPUSH
56187: PPUSH
56188: PPUSH
56189: PPUSH
// if not turrets or not factories then
56190: LD_VAR 0 1
56194: NOT
56195: PUSH
56196: LD_VAR 0 2
56200: NOT
56201: OR
56202: IFFALSE 56206
// exit ;
56204: GO 56513
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56206: LD_ADDR_VAR 0 10
56210: PUSH
56211: LD_INT 5
56213: PUSH
56214: LD_INT 6
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 4
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: PUSH
56234: LD_INT 5
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 24
56248: PUSH
56249: LD_INT 25
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 23
56258: PUSH
56259: LD_INT 27
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 42
56272: PUSH
56273: LD_INT 43
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 44
56282: PUSH
56283: LD_INT 46
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 45
56292: PUSH
56293: LD_INT 47
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: LIST
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: ST_TO_ADDR
// result := [ ] ;
56310: LD_ADDR_VAR 0 3
56314: PUSH
56315: EMPTY
56316: ST_TO_ADDR
// for i in turrets do
56317: LD_ADDR_VAR 0 4
56321: PUSH
56322: LD_VAR 0 1
56326: PUSH
56327: FOR_IN
56328: IFFALSE 56511
// begin nat := GetNation ( i ) ;
56330: LD_ADDR_VAR 0 7
56334: PUSH
56335: LD_VAR 0 4
56339: PPUSH
56340: CALL_OW 248
56344: ST_TO_ADDR
// weapon := 0 ;
56345: LD_ADDR_VAR 0 8
56349: PUSH
56350: LD_INT 0
56352: ST_TO_ADDR
// if not nat then
56353: LD_VAR 0 7
56357: NOT
56358: IFFALSE 56362
// continue ;
56360: GO 56327
// for j in list [ nat ] do
56362: LD_ADDR_VAR 0 5
56366: PUSH
56367: LD_VAR 0 10
56371: PUSH
56372: LD_VAR 0 7
56376: ARRAY
56377: PUSH
56378: FOR_IN
56379: IFFALSE 56420
// if GetBWeapon ( i ) = j [ 1 ] then
56381: LD_VAR 0 4
56385: PPUSH
56386: CALL_OW 269
56390: PUSH
56391: LD_VAR 0 5
56395: PUSH
56396: LD_INT 1
56398: ARRAY
56399: EQUAL
56400: IFFALSE 56418
// begin weapon := j [ 2 ] ;
56402: LD_ADDR_VAR 0 8
56406: PUSH
56407: LD_VAR 0 5
56411: PUSH
56412: LD_INT 2
56414: ARRAY
56415: ST_TO_ADDR
// break ;
56416: GO 56420
// end ;
56418: GO 56378
56420: POP
56421: POP
// if not weapon then
56422: LD_VAR 0 8
56426: NOT
56427: IFFALSE 56431
// continue ;
56429: GO 56327
// for k in factories do
56431: LD_ADDR_VAR 0 6
56435: PUSH
56436: LD_VAR 0 2
56440: PUSH
56441: FOR_IN
56442: IFFALSE 56507
// begin weapons := AvailableWeaponList ( k ) ;
56444: LD_ADDR_VAR 0 9
56448: PUSH
56449: LD_VAR 0 6
56453: PPUSH
56454: CALL_OW 478
56458: ST_TO_ADDR
// if not weapons then
56459: LD_VAR 0 9
56463: NOT
56464: IFFALSE 56468
// continue ;
56466: GO 56441
// if weapon in weapons then
56468: LD_VAR 0 8
56472: PUSH
56473: LD_VAR 0 9
56477: IN
56478: IFFALSE 56505
// begin result := [ i , weapon ] ;
56480: LD_ADDR_VAR 0 3
56484: PUSH
56485: LD_VAR 0 4
56489: PUSH
56490: LD_VAR 0 8
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// exit ;
56499: POP
56500: POP
56501: POP
56502: POP
56503: GO 56513
// end ; end ;
56505: GO 56441
56507: POP
56508: POP
// end ;
56509: GO 56327
56511: POP
56512: POP
// end ;
56513: LD_VAR 0 3
56517: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56518: LD_INT 0
56520: PPUSH
// if not side or side > 8 then
56521: LD_VAR 0 3
56525: NOT
56526: PUSH
56527: LD_VAR 0 3
56531: PUSH
56532: LD_INT 8
56534: GREATER
56535: OR
56536: IFFALSE 56540
// exit ;
56538: GO 56599
// if not range then
56540: LD_VAR 0 4
56544: NOT
56545: IFFALSE 56556
// range := - 12 ;
56547: LD_ADDR_VAR 0 4
56551: PUSH
56552: LD_INT 12
56554: NEG
56555: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56556: LD_VAR 0 1
56560: PPUSH
56561: LD_VAR 0 2
56565: PPUSH
56566: LD_VAR 0 3
56570: PPUSH
56571: LD_VAR 0 4
56575: PPUSH
56576: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56580: LD_VAR 0 1
56584: PPUSH
56585: LD_VAR 0 2
56589: PPUSH
56590: LD_VAR 0 3
56594: PPUSH
56595: CALL_OW 331
// end ;
56599: LD_VAR 0 5
56603: RET
// export function Video ( mode ) ; begin
56604: LD_INT 0
56606: PPUSH
// ingame_video = mode ;
56607: LD_ADDR_OWVAR 52
56611: PUSH
56612: LD_VAR 0 1
56616: ST_TO_ADDR
// interface_hidden = mode ;
56617: LD_ADDR_OWVAR 54
56621: PUSH
56622: LD_VAR 0 1
56626: ST_TO_ADDR
// end ;
56627: LD_VAR 0 2
56631: RET
// export function Join ( array , element ) ; begin
56632: LD_INT 0
56634: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56635: LD_ADDR_VAR 0 3
56639: PUSH
56640: LD_VAR 0 1
56644: PPUSH
56645: LD_VAR 0 1
56649: PUSH
56650: LD_INT 1
56652: PLUS
56653: PPUSH
56654: LD_VAR 0 2
56658: PPUSH
56659: CALL_OW 1
56663: ST_TO_ADDR
// end ;
56664: LD_VAR 0 3
56668: RET
// export function JoinUnion ( array , element ) ; begin
56669: LD_INT 0
56671: PPUSH
// result := array union element ;
56672: LD_ADDR_VAR 0 3
56676: PUSH
56677: LD_VAR 0 1
56681: PUSH
56682: LD_VAR 0 2
56686: UNION
56687: ST_TO_ADDR
// end ;
56688: LD_VAR 0 3
56692: RET
// export function GetBehemoths ( side ) ; begin
56693: LD_INT 0
56695: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56696: LD_ADDR_VAR 0 2
56700: PUSH
56701: LD_INT 22
56703: PUSH
56704: LD_VAR 0 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 31
56715: PUSH
56716: LD_INT 25
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PPUSH
56727: CALL_OW 69
56731: ST_TO_ADDR
// end ;
56732: LD_VAR 0 2
56736: RET
// export function Shuffle ( array ) ; var i , index ; begin
56737: LD_INT 0
56739: PPUSH
56740: PPUSH
56741: PPUSH
// result := [ ] ;
56742: LD_ADDR_VAR 0 2
56746: PUSH
56747: EMPTY
56748: ST_TO_ADDR
// if not array then
56749: LD_VAR 0 1
56753: NOT
56754: IFFALSE 56758
// exit ;
56756: GO 56857
// Randomize ;
56758: CALL_OW 10
// for i = array downto 1 do
56762: LD_ADDR_VAR 0 3
56766: PUSH
56767: DOUBLE
56768: LD_VAR 0 1
56772: INC
56773: ST_TO_ADDR
56774: LD_INT 1
56776: PUSH
56777: FOR_DOWNTO
56778: IFFALSE 56855
// begin index := rand ( 1 , array ) ;
56780: LD_ADDR_VAR 0 4
56784: PUSH
56785: LD_INT 1
56787: PPUSH
56788: LD_VAR 0 1
56792: PPUSH
56793: CALL_OW 12
56797: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56798: LD_ADDR_VAR 0 2
56802: PUSH
56803: LD_VAR 0 2
56807: PPUSH
56808: LD_VAR 0 2
56812: PUSH
56813: LD_INT 1
56815: PLUS
56816: PPUSH
56817: LD_VAR 0 1
56821: PUSH
56822: LD_VAR 0 4
56826: ARRAY
56827: PPUSH
56828: CALL_OW 2
56832: ST_TO_ADDR
// array := Delete ( array , index ) ;
56833: LD_ADDR_VAR 0 1
56837: PUSH
56838: LD_VAR 0 1
56842: PPUSH
56843: LD_VAR 0 4
56847: PPUSH
56848: CALL_OW 3
56852: ST_TO_ADDR
// end ;
56853: GO 56777
56855: POP
56856: POP
// end ;
56857: LD_VAR 0 2
56861: RET
// export function GetBaseMaterials ( base ) ; begin
56862: LD_INT 0
56864: PPUSH
// result := [ 0 , 0 , 0 ] ;
56865: LD_ADDR_VAR 0 2
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: ST_TO_ADDR
// if not base then
56884: LD_VAR 0 1
56888: NOT
56889: IFFALSE 56893
// exit ;
56891: GO 56942
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56893: LD_ADDR_VAR 0 2
56897: PUSH
56898: LD_VAR 0 1
56902: PPUSH
56903: LD_INT 1
56905: PPUSH
56906: CALL_OW 275
56910: PUSH
56911: LD_VAR 0 1
56915: PPUSH
56916: LD_INT 2
56918: PPUSH
56919: CALL_OW 275
56923: PUSH
56924: LD_VAR 0 1
56928: PPUSH
56929: LD_INT 3
56931: PPUSH
56932: CALL_OW 275
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: LIST
56941: ST_TO_ADDR
// end ;
56942: LD_VAR 0 2
56946: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56947: LD_INT 0
56949: PPUSH
56950: PPUSH
// result := array ;
56951: LD_ADDR_VAR 0 3
56955: PUSH
56956: LD_VAR 0 1
56960: ST_TO_ADDR
// if size > 0 then
56961: LD_VAR 0 2
56965: PUSH
56966: LD_INT 0
56968: GREATER
56969: IFFALSE 57015
// for i := array downto size do
56971: LD_ADDR_VAR 0 4
56975: PUSH
56976: DOUBLE
56977: LD_VAR 0 1
56981: INC
56982: ST_TO_ADDR
56983: LD_VAR 0 2
56987: PUSH
56988: FOR_DOWNTO
56989: IFFALSE 57013
// result := Delete ( result , result ) ;
56991: LD_ADDR_VAR 0 3
56995: PUSH
56996: LD_VAR 0 3
57000: PPUSH
57001: LD_VAR 0 3
57005: PPUSH
57006: CALL_OW 3
57010: ST_TO_ADDR
57011: GO 56988
57013: POP
57014: POP
// end ;
57015: LD_VAR 0 3
57019: RET
// export function ComExit ( unit ) ; var tmp ; begin
57020: LD_INT 0
57022: PPUSH
57023: PPUSH
// if not IsInUnit ( unit ) then
57024: LD_VAR 0 1
57028: PPUSH
57029: CALL_OW 310
57033: NOT
57034: IFFALSE 57038
// exit ;
57036: GO 57098
// tmp := IsInUnit ( unit ) ;
57038: LD_ADDR_VAR 0 3
57042: PUSH
57043: LD_VAR 0 1
57047: PPUSH
57048: CALL_OW 310
57052: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57053: LD_VAR 0 3
57057: PPUSH
57058: CALL_OW 247
57062: PUSH
57063: LD_INT 2
57065: EQUAL
57066: IFFALSE 57079
// ComExitVehicle ( unit ) else
57068: LD_VAR 0 1
57072: PPUSH
57073: CALL_OW 121
57077: GO 57088
// ComExitBuilding ( unit ) ;
57079: LD_VAR 0 1
57083: PPUSH
57084: CALL_OW 122
// result := tmp ;
57088: LD_ADDR_VAR 0 2
57092: PUSH
57093: LD_VAR 0 3
57097: ST_TO_ADDR
// end ;
57098: LD_VAR 0 2
57102: RET
// export function ResetHc ; begin
57103: LD_INT 0
57105: PPUSH
// InitHc ;
57106: CALL_OW 19
// hc_importance := 0 ;
57110: LD_ADDR_OWVAR 32
57114: PUSH
57115: LD_INT 0
57117: ST_TO_ADDR
// end ; end_of_file
57118: LD_VAR 0 1
57122: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57123: LD_INT 0
57125: PPUSH
57126: PPUSH
57127: PPUSH
57128: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57129: LD_VAR 0 1
57133: PPUSH
57134: CALL_OW 264
57138: PUSH
57139: LD_EXP 123
57143: EQUAL
57144: IFFALSE 57216
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57146: LD_INT 68
57148: PPUSH
57149: LD_VAR 0 1
57153: PPUSH
57154: CALL_OW 255
57158: PPUSH
57159: CALL_OW 321
57163: PUSH
57164: LD_INT 2
57166: EQUAL
57167: IFFALSE 57179
// eff := 70 else
57169: LD_ADDR_VAR 0 4
57173: PUSH
57174: LD_INT 70
57176: ST_TO_ADDR
57177: GO 57187
// eff := 30 ;
57179: LD_ADDR_VAR 0 4
57183: PUSH
57184: LD_INT 30
57186: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57187: LD_VAR 0 1
57191: PPUSH
57192: CALL_OW 250
57196: PPUSH
57197: LD_VAR 0 1
57201: PPUSH
57202: CALL_OW 251
57206: PPUSH
57207: LD_VAR 0 4
57211: PPUSH
57212: CALL_OW 495
// end ; end ;
57216: LD_VAR 0 2
57220: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57221: LD_INT 0
57223: PPUSH
// end ;
57224: LD_VAR 0 4
57228: RET
// export function SOS_Command ( cmd ) ; begin
57229: LD_INT 0
57231: PPUSH
// end ;
57232: LD_VAR 0 2
57236: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57237: LD_VAR 0 1
57241: PUSH
57242: LD_INT 254
57244: EQUAL
57245: PUSH
57246: LD_VAR 0 2
57250: PPUSH
57251: CALL_OW 264
57255: PUSH
57256: LD_EXP 121
57260: EQUAL
57261: AND
57262: PUSH
57263: LD_VAR 0 3
57267: PPUSH
57268: CALL_OW 263
57272: PUSH
57273: LD_INT 3
57275: EQUAL
57276: AND
57277: IFFALSE 57293
// HackDestroyVehicle ( unit , selectedUnit ) ;
57279: LD_VAR 0 2
57283: PPUSH
57284: LD_VAR 0 3
57288: PPUSH
57289: CALL 58800 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57293: LD_VAR 0 1
57297: PUSH
57298: LD_INT 255
57300: EQUAL
57301: PUSH
57302: LD_VAR 0 2
57306: PPUSH
57307: CALL_OW 264
57311: PUSH
57312: LD_INT 14
57314: PUSH
57315: LD_INT 53
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: IN
57322: AND
57323: PUSH
57324: LD_VAR 0 4
57328: PPUSH
57329: LD_VAR 0 5
57333: PPUSH
57334: CALL_OW 488
57338: AND
57339: IFFALSE 57363
// CutTreeXYR ( unit , x , y , 12 ) ;
57341: LD_VAR 0 2
57345: PPUSH
57346: LD_VAR 0 4
57350: PPUSH
57351: LD_VAR 0 5
57355: PPUSH
57356: LD_INT 12
57358: PPUSH
57359: CALL 57366 0 4
// end ;
57363: PPOPN 5
57365: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57366: LD_INT 0
57368: PPUSH
57369: PPUSH
57370: PPUSH
57371: PPUSH
57372: PPUSH
57373: PPUSH
57374: PPUSH
57375: PPUSH
57376: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
57377: LD_VAR 0 1
57381: NOT
57382: PUSH
57383: LD_VAR 0 2
57387: PPUSH
57388: LD_VAR 0 3
57392: PPUSH
57393: CALL_OW 488
57397: NOT
57398: OR
57399: PUSH
57400: LD_VAR 0 4
57404: NOT
57405: OR
57406: IFFALSE 57410
// exit ;
57408: GO 57750
// list := [ ] ;
57410: LD_ADDR_VAR 0 13
57414: PUSH
57415: EMPTY
57416: ST_TO_ADDR
// if x - r < 0 then
57417: LD_VAR 0 2
57421: PUSH
57422: LD_VAR 0 4
57426: MINUS
57427: PUSH
57428: LD_INT 0
57430: LESS
57431: IFFALSE 57443
// min_x := 0 else
57433: LD_ADDR_VAR 0 7
57437: PUSH
57438: LD_INT 0
57440: ST_TO_ADDR
57441: GO 57459
// min_x := x - r ;
57443: LD_ADDR_VAR 0 7
57447: PUSH
57448: LD_VAR 0 2
57452: PUSH
57453: LD_VAR 0 4
57457: MINUS
57458: ST_TO_ADDR
// if y - r < 0 then
57459: LD_VAR 0 3
57463: PUSH
57464: LD_VAR 0 4
57468: MINUS
57469: PUSH
57470: LD_INT 0
57472: LESS
57473: IFFALSE 57485
// min_y := 0 else
57475: LD_ADDR_VAR 0 8
57479: PUSH
57480: LD_INT 0
57482: ST_TO_ADDR
57483: GO 57501
// min_y := y - r ;
57485: LD_ADDR_VAR 0 8
57489: PUSH
57490: LD_VAR 0 3
57494: PUSH
57495: LD_VAR 0 4
57499: MINUS
57500: ST_TO_ADDR
// max_x := x + r ;
57501: LD_ADDR_VAR 0 9
57505: PUSH
57506: LD_VAR 0 2
57510: PUSH
57511: LD_VAR 0 4
57515: PLUS
57516: ST_TO_ADDR
// max_y := y + r ;
57517: LD_ADDR_VAR 0 10
57521: PUSH
57522: LD_VAR 0 3
57526: PUSH
57527: LD_VAR 0 4
57531: PLUS
57532: ST_TO_ADDR
// for _x = min_x to max_x do
57533: LD_ADDR_VAR 0 11
57537: PUSH
57538: DOUBLE
57539: LD_VAR 0 7
57543: DEC
57544: ST_TO_ADDR
57545: LD_VAR 0 9
57549: PUSH
57550: FOR_TO
57551: IFFALSE 57668
// for _y = min_y to max_y do
57553: LD_ADDR_VAR 0 12
57557: PUSH
57558: DOUBLE
57559: LD_VAR 0 8
57563: DEC
57564: ST_TO_ADDR
57565: LD_VAR 0 10
57569: PUSH
57570: FOR_TO
57571: IFFALSE 57664
// begin if not ValidHex ( _x , _y ) then
57573: LD_VAR 0 11
57577: PPUSH
57578: LD_VAR 0 12
57582: PPUSH
57583: CALL_OW 488
57587: NOT
57588: IFFALSE 57592
// continue ;
57590: GO 57570
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57592: LD_VAR 0 11
57596: PPUSH
57597: LD_VAR 0 12
57601: PPUSH
57602: CALL_OW 351
57606: PUSH
57607: LD_VAR 0 11
57611: PPUSH
57612: LD_VAR 0 12
57616: PPUSH
57617: CALL_OW 554
57621: AND
57622: IFFALSE 57662
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57624: LD_ADDR_VAR 0 13
57628: PUSH
57629: LD_VAR 0 13
57633: PPUSH
57634: LD_VAR 0 13
57638: PUSH
57639: LD_INT 1
57641: PLUS
57642: PPUSH
57643: LD_VAR 0 11
57647: PUSH
57648: LD_VAR 0 12
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PPUSH
57657: CALL_OW 2
57661: ST_TO_ADDR
// end ;
57662: GO 57570
57664: POP
57665: POP
57666: GO 57550
57668: POP
57669: POP
// if not list then
57670: LD_VAR 0 13
57674: NOT
57675: IFFALSE 57679
// exit ;
57677: GO 57750
// for i in list do
57679: LD_ADDR_VAR 0 6
57683: PUSH
57684: LD_VAR 0 13
57688: PUSH
57689: FOR_IN
57690: IFFALSE 57748
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57692: LD_VAR 0 1
57696: PPUSH
57697: LD_STRING M
57699: PUSH
57700: LD_VAR 0 6
57704: PUSH
57705: LD_INT 1
57707: ARRAY
57708: PUSH
57709: LD_VAR 0 6
57713: PUSH
57714: LD_INT 2
57716: ARRAY
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: PUSH
57739: EMPTY
57740: LIST
57741: PPUSH
57742: CALL_OW 447
57746: GO 57689
57748: POP
57749: POP
// end ;
57750: LD_VAR 0 5
57754: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57755: LD_EXP 58
57759: NOT
57760: IFFALSE 57810
57762: GO 57764
57764: DISABLE
// begin initHack := true ;
57765: LD_ADDR_EXP 58
57769: PUSH
57770: LD_INT 1
57772: ST_TO_ADDR
// hackTanks := [ ] ;
57773: LD_ADDR_EXP 59
57777: PUSH
57778: EMPTY
57779: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57780: LD_ADDR_EXP 60
57784: PUSH
57785: EMPTY
57786: ST_TO_ADDR
// hackLimit := 3 ;
57787: LD_ADDR_EXP 61
57791: PUSH
57792: LD_INT 3
57794: ST_TO_ADDR
// hackDist := 12 ;
57795: LD_ADDR_EXP 62
57799: PUSH
57800: LD_INT 12
57802: ST_TO_ADDR
// hackCounter := [ ] ;
57803: LD_ADDR_EXP 63
57807: PUSH
57808: EMPTY
57809: ST_TO_ADDR
// end ;
57810: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57811: LD_EXP 58
57815: PUSH
57816: LD_INT 34
57818: PUSH
57819: LD_EXP 121
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PPUSH
57828: CALL_OW 69
57832: AND
57833: IFFALSE 58088
57835: GO 57837
57837: DISABLE
57838: LD_INT 0
57840: PPUSH
57841: PPUSH
// begin enable ;
57842: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57843: LD_ADDR_VAR 0 1
57847: PUSH
57848: LD_INT 34
57850: PUSH
57851: LD_EXP 121
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PPUSH
57860: CALL_OW 69
57864: PUSH
57865: FOR_IN
57866: IFFALSE 58086
// begin if not i in hackTanks then
57868: LD_VAR 0 1
57872: PUSH
57873: LD_EXP 59
57877: IN
57878: NOT
57879: IFFALSE 57962
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57881: LD_ADDR_EXP 59
57885: PUSH
57886: LD_EXP 59
57890: PPUSH
57891: LD_EXP 59
57895: PUSH
57896: LD_INT 1
57898: PLUS
57899: PPUSH
57900: LD_VAR 0 1
57904: PPUSH
57905: CALL_OW 1
57909: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57910: LD_ADDR_EXP 60
57914: PUSH
57915: LD_EXP 60
57919: PPUSH
57920: LD_EXP 60
57924: PUSH
57925: LD_INT 1
57927: PLUS
57928: PPUSH
57929: EMPTY
57930: PPUSH
57931: CALL_OW 1
57935: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57936: LD_ADDR_EXP 63
57940: PUSH
57941: LD_EXP 63
57945: PPUSH
57946: LD_EXP 63
57950: PUSH
57951: LD_INT 1
57953: PLUS
57954: PPUSH
57955: EMPTY
57956: PPUSH
57957: CALL_OW 1
57961: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57962: LD_VAR 0 1
57966: PPUSH
57967: CALL_OW 302
57971: NOT
57972: IFFALSE 57985
// begin HackUnlinkAll ( i ) ;
57974: LD_VAR 0 1
57978: PPUSH
57979: CALL 58091 0 1
// continue ;
57983: GO 57865
// end ; HackCheckCapturedStatus ( i ) ;
57985: LD_VAR 0 1
57989: PPUSH
57990: CALL 58534 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57994: LD_ADDR_VAR 0 2
57998: PUSH
57999: LD_INT 81
58001: PUSH
58002: LD_VAR 0 1
58006: PPUSH
58007: CALL_OW 255
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 33
58018: PUSH
58019: LD_INT 3
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 91
58028: PUSH
58029: LD_VAR 0 1
58033: PUSH
58034: LD_EXP 62
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 50
58046: PUSH
58047: EMPTY
58048: LIST
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: PPUSH
58056: CALL_OW 69
58060: ST_TO_ADDR
// if not tmp then
58061: LD_VAR 0 2
58065: NOT
58066: IFFALSE 58070
// continue ;
58068: GO 57865
// HackLink ( i , tmp ) ;
58070: LD_VAR 0 1
58074: PPUSH
58075: LD_VAR 0 2
58079: PPUSH
58080: CALL 58227 0 2
// end ;
58084: GO 57865
58086: POP
58087: POP
// end ;
58088: PPOPN 2
58090: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58091: LD_INT 0
58093: PPUSH
58094: PPUSH
58095: PPUSH
// if not hack in hackTanks then
58096: LD_VAR 0 1
58100: PUSH
58101: LD_EXP 59
58105: IN
58106: NOT
58107: IFFALSE 58111
// exit ;
58109: GO 58222
// index := GetElementIndex ( hackTanks , hack ) ;
58111: LD_ADDR_VAR 0 4
58115: PUSH
58116: LD_EXP 59
58120: PPUSH
58121: LD_VAR 0 1
58125: PPUSH
58126: CALL 25493 0 2
58130: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58131: LD_EXP 60
58135: PUSH
58136: LD_VAR 0 4
58140: ARRAY
58141: IFFALSE 58222
// begin for i in hackTanksCaptured [ index ] do
58143: LD_ADDR_VAR 0 3
58147: PUSH
58148: LD_EXP 60
58152: PUSH
58153: LD_VAR 0 4
58157: ARRAY
58158: PUSH
58159: FOR_IN
58160: IFFALSE 58186
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58162: LD_VAR 0 3
58166: PUSH
58167: LD_INT 1
58169: ARRAY
58170: PPUSH
58171: LD_VAR 0 3
58175: PUSH
58176: LD_INT 2
58178: ARRAY
58179: PPUSH
58180: CALL_OW 235
58184: GO 58159
58186: POP
58187: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58188: LD_ADDR_EXP 60
58192: PUSH
58193: LD_EXP 60
58197: PPUSH
58198: LD_VAR 0 4
58202: PPUSH
58203: EMPTY
58204: PPUSH
58205: CALL_OW 1
58209: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58210: LD_VAR 0 1
58214: PPUSH
58215: LD_INT 0
58217: PPUSH
58218: CALL_OW 505
// end ; end ;
58222: LD_VAR 0 2
58226: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58227: LD_INT 0
58229: PPUSH
58230: PPUSH
58231: PPUSH
// if not hack in hackTanks or not vehicles then
58232: LD_VAR 0 1
58236: PUSH
58237: LD_EXP 59
58241: IN
58242: NOT
58243: PUSH
58244: LD_VAR 0 2
58248: NOT
58249: OR
58250: IFFALSE 58254
// exit ;
58252: GO 58529
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58254: LD_ADDR_VAR 0 2
58258: PUSH
58259: LD_VAR 0 1
58263: PPUSH
58264: LD_VAR 0 2
58268: PPUSH
58269: LD_INT 1
58271: PPUSH
58272: LD_INT 1
58274: PPUSH
58275: CALL 26143 0 4
58279: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58280: LD_ADDR_VAR 0 5
58284: PUSH
58285: LD_EXP 59
58289: PPUSH
58290: LD_VAR 0 1
58294: PPUSH
58295: CALL 25493 0 2
58299: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58300: LD_EXP 60
58304: PUSH
58305: LD_VAR 0 5
58309: ARRAY
58310: PUSH
58311: LD_EXP 61
58315: LESS
58316: IFFALSE 58505
// begin for i := 1 to vehicles do
58318: LD_ADDR_VAR 0 4
58322: PUSH
58323: DOUBLE
58324: LD_INT 1
58326: DEC
58327: ST_TO_ADDR
58328: LD_VAR 0 2
58332: PUSH
58333: FOR_TO
58334: IFFALSE 58503
// begin if hackTanksCaptured [ index ] = hackLimit then
58336: LD_EXP 60
58340: PUSH
58341: LD_VAR 0 5
58345: ARRAY
58346: PUSH
58347: LD_EXP 61
58351: EQUAL
58352: IFFALSE 58356
// break ;
58354: GO 58503
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58356: LD_ADDR_EXP 63
58360: PUSH
58361: LD_EXP 63
58365: PPUSH
58366: LD_VAR 0 5
58370: PPUSH
58371: LD_EXP 63
58375: PUSH
58376: LD_VAR 0 5
58380: ARRAY
58381: PUSH
58382: LD_INT 1
58384: PLUS
58385: PPUSH
58386: CALL_OW 1
58390: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58391: LD_ADDR_EXP 60
58395: PUSH
58396: LD_EXP 60
58400: PPUSH
58401: LD_VAR 0 5
58405: PUSH
58406: LD_EXP 60
58410: PUSH
58411: LD_VAR 0 5
58415: ARRAY
58416: PUSH
58417: LD_INT 1
58419: PLUS
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PPUSH
58425: LD_VAR 0 2
58429: PUSH
58430: LD_VAR 0 4
58434: ARRAY
58435: PUSH
58436: LD_VAR 0 2
58440: PUSH
58441: LD_VAR 0 4
58445: ARRAY
58446: PPUSH
58447: CALL_OW 255
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PPUSH
58456: CALL 25708 0 3
58460: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58461: LD_VAR 0 2
58465: PUSH
58466: LD_VAR 0 4
58470: ARRAY
58471: PPUSH
58472: LD_VAR 0 1
58476: PPUSH
58477: CALL_OW 255
58481: PPUSH
58482: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58486: LD_VAR 0 2
58490: PUSH
58491: LD_VAR 0 4
58495: ARRAY
58496: PPUSH
58497: CALL_OW 141
// end ;
58501: GO 58333
58503: POP
58504: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58505: LD_VAR 0 1
58509: PPUSH
58510: LD_EXP 60
58514: PUSH
58515: LD_VAR 0 5
58519: ARRAY
58520: PUSH
58521: LD_INT 0
58523: PLUS
58524: PPUSH
58525: CALL_OW 505
// end ;
58529: LD_VAR 0 3
58533: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58534: LD_INT 0
58536: PPUSH
58537: PPUSH
58538: PPUSH
58539: PPUSH
// if not hack in hackTanks then
58540: LD_VAR 0 1
58544: PUSH
58545: LD_EXP 59
58549: IN
58550: NOT
58551: IFFALSE 58555
// exit ;
58553: GO 58795
// index := GetElementIndex ( hackTanks , hack ) ;
58555: LD_ADDR_VAR 0 4
58559: PUSH
58560: LD_EXP 59
58564: PPUSH
58565: LD_VAR 0 1
58569: PPUSH
58570: CALL 25493 0 2
58574: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58575: LD_ADDR_VAR 0 3
58579: PUSH
58580: DOUBLE
58581: LD_EXP 60
58585: PUSH
58586: LD_VAR 0 4
58590: ARRAY
58591: INC
58592: ST_TO_ADDR
58593: LD_INT 1
58595: PUSH
58596: FOR_DOWNTO
58597: IFFALSE 58769
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58599: LD_ADDR_VAR 0 5
58603: PUSH
58604: LD_EXP 60
58608: PUSH
58609: LD_VAR 0 4
58613: ARRAY
58614: PUSH
58615: LD_VAR 0 3
58619: ARRAY
58620: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58621: LD_VAR 0 5
58625: PUSH
58626: LD_INT 1
58628: ARRAY
58629: PPUSH
58630: CALL_OW 302
58634: NOT
58635: PUSH
58636: LD_VAR 0 5
58640: PUSH
58641: LD_INT 1
58643: ARRAY
58644: PPUSH
58645: CALL_OW 255
58649: PUSH
58650: LD_VAR 0 1
58654: PPUSH
58655: CALL_OW 255
58659: NONEQUAL
58660: OR
58661: IFFALSE 58767
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58663: LD_VAR 0 5
58667: PUSH
58668: LD_INT 1
58670: ARRAY
58671: PPUSH
58672: CALL_OW 305
58676: PUSH
58677: LD_VAR 0 5
58681: PUSH
58682: LD_INT 1
58684: ARRAY
58685: PPUSH
58686: CALL_OW 255
58690: PUSH
58691: LD_VAR 0 1
58695: PPUSH
58696: CALL_OW 255
58700: EQUAL
58701: AND
58702: IFFALSE 58726
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58704: LD_VAR 0 5
58708: PUSH
58709: LD_INT 1
58711: ARRAY
58712: PPUSH
58713: LD_VAR 0 5
58717: PUSH
58718: LD_INT 2
58720: ARRAY
58721: PPUSH
58722: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58726: LD_ADDR_EXP 60
58730: PUSH
58731: LD_EXP 60
58735: PPUSH
58736: LD_VAR 0 4
58740: PPUSH
58741: LD_EXP 60
58745: PUSH
58746: LD_VAR 0 4
58750: ARRAY
58751: PPUSH
58752: LD_VAR 0 3
58756: PPUSH
58757: CALL_OW 3
58761: PPUSH
58762: CALL_OW 1
58766: ST_TO_ADDR
// end ; end ;
58767: GO 58596
58769: POP
58770: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58771: LD_VAR 0 1
58775: PPUSH
58776: LD_EXP 60
58780: PUSH
58781: LD_VAR 0 4
58785: ARRAY
58786: PUSH
58787: LD_INT 0
58789: PLUS
58790: PPUSH
58791: CALL_OW 505
// end ;
58795: LD_VAR 0 2
58799: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58800: LD_INT 0
58802: PPUSH
58803: PPUSH
58804: PPUSH
58805: PPUSH
// if not hack in hackTanks then
58806: LD_VAR 0 1
58810: PUSH
58811: LD_EXP 59
58815: IN
58816: NOT
58817: IFFALSE 58821
// exit ;
58819: GO 58906
// index := GetElementIndex ( hackTanks , hack ) ;
58821: LD_ADDR_VAR 0 5
58825: PUSH
58826: LD_EXP 59
58830: PPUSH
58831: LD_VAR 0 1
58835: PPUSH
58836: CALL 25493 0 2
58840: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58841: LD_ADDR_VAR 0 4
58845: PUSH
58846: DOUBLE
58847: LD_INT 1
58849: DEC
58850: ST_TO_ADDR
58851: LD_EXP 60
58855: PUSH
58856: LD_VAR 0 5
58860: ARRAY
58861: PUSH
58862: FOR_TO
58863: IFFALSE 58904
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58865: LD_EXP 60
58869: PUSH
58870: LD_VAR 0 5
58874: ARRAY
58875: PUSH
58876: LD_VAR 0 4
58880: ARRAY
58881: PUSH
58882: LD_INT 1
58884: ARRAY
58885: PUSH
58886: LD_VAR 0 2
58890: EQUAL
58891: IFFALSE 58902
// KillUnit ( vehicle ) ;
58893: LD_VAR 0 2
58897: PPUSH
58898: CALL_OW 66
58902: GO 58862
58904: POP
58905: POP
// end ; end_of_file
58906: LD_VAR 0 3
58910: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
58911: LD_VAR 0 2
58915: PUSH
58916: LD_INT 100
58918: EQUAL
58919: IFFALSE 59868
// begin if not StreamModeActive then
58921: LD_EXP 64
58925: NOT
58926: IFFALSE 58936
// StreamModeActive := true ;
58928: LD_ADDR_EXP 64
58932: PUSH
58933: LD_INT 1
58935: ST_TO_ADDR
// if p3 = 0 then
58936: LD_VAR 0 3
58940: PUSH
58941: LD_INT 0
58943: EQUAL
58944: IFFALSE 58950
// InitStreamMode ;
58946: CALL 60101 0 0
// if p3 = 1 then
58950: LD_VAR 0 3
58954: PUSH
58955: LD_INT 1
58957: EQUAL
58958: IFFALSE 58968
// sRocket := true ;
58960: LD_ADDR_EXP 69
58964: PUSH
58965: LD_INT 1
58967: ST_TO_ADDR
// if p3 = 2 then
58968: LD_VAR 0 3
58972: PUSH
58973: LD_INT 2
58975: EQUAL
58976: IFFALSE 58986
// sSpeed := true ;
58978: LD_ADDR_EXP 68
58982: PUSH
58983: LD_INT 1
58985: ST_TO_ADDR
// if p3 = 3 then
58986: LD_VAR 0 3
58990: PUSH
58991: LD_INT 3
58993: EQUAL
58994: IFFALSE 59004
// sEngine := true ;
58996: LD_ADDR_EXP 70
59000: PUSH
59001: LD_INT 1
59003: ST_TO_ADDR
// if p3 = 4 then
59004: LD_VAR 0 3
59008: PUSH
59009: LD_INT 4
59011: EQUAL
59012: IFFALSE 59022
// sSpec := true ;
59014: LD_ADDR_EXP 67
59018: PUSH
59019: LD_INT 1
59021: ST_TO_ADDR
// if p3 = 5 then
59022: LD_VAR 0 3
59026: PUSH
59027: LD_INT 5
59029: EQUAL
59030: IFFALSE 59040
// sLevel := true ;
59032: LD_ADDR_EXP 71
59036: PUSH
59037: LD_INT 1
59039: ST_TO_ADDR
// if p3 = 6 then
59040: LD_VAR 0 3
59044: PUSH
59045: LD_INT 6
59047: EQUAL
59048: IFFALSE 59058
// sArmoury := true ;
59050: LD_ADDR_EXP 72
59054: PUSH
59055: LD_INT 1
59057: ST_TO_ADDR
// if p3 = 7 then
59058: LD_VAR 0 3
59062: PUSH
59063: LD_INT 7
59065: EQUAL
59066: IFFALSE 59076
// sRadar := true ;
59068: LD_ADDR_EXP 73
59072: PUSH
59073: LD_INT 1
59075: ST_TO_ADDR
// if p3 = 8 then
59076: LD_VAR 0 3
59080: PUSH
59081: LD_INT 8
59083: EQUAL
59084: IFFALSE 59094
// sBunker := true ;
59086: LD_ADDR_EXP 74
59090: PUSH
59091: LD_INT 1
59093: ST_TO_ADDR
// if p3 = 9 then
59094: LD_VAR 0 3
59098: PUSH
59099: LD_INT 9
59101: EQUAL
59102: IFFALSE 59112
// sHack := true ;
59104: LD_ADDR_EXP 75
59108: PUSH
59109: LD_INT 1
59111: ST_TO_ADDR
// if p3 = 10 then
59112: LD_VAR 0 3
59116: PUSH
59117: LD_INT 10
59119: EQUAL
59120: IFFALSE 59130
// sFire := true ;
59122: LD_ADDR_EXP 76
59126: PUSH
59127: LD_INT 1
59129: ST_TO_ADDR
// if p3 = 11 then
59130: LD_VAR 0 3
59134: PUSH
59135: LD_INT 11
59137: EQUAL
59138: IFFALSE 59148
// sRefresh := true ;
59140: LD_ADDR_EXP 77
59144: PUSH
59145: LD_INT 1
59147: ST_TO_ADDR
// if p3 = 12 then
59148: LD_VAR 0 3
59152: PUSH
59153: LD_INT 12
59155: EQUAL
59156: IFFALSE 59166
// sExp := true ;
59158: LD_ADDR_EXP 78
59162: PUSH
59163: LD_INT 1
59165: ST_TO_ADDR
// if p3 = 13 then
59166: LD_VAR 0 3
59170: PUSH
59171: LD_INT 13
59173: EQUAL
59174: IFFALSE 59184
// sDepot := true ;
59176: LD_ADDR_EXP 79
59180: PUSH
59181: LD_INT 1
59183: ST_TO_ADDR
// if p3 = 14 then
59184: LD_VAR 0 3
59188: PUSH
59189: LD_INT 14
59191: EQUAL
59192: IFFALSE 59202
// sFlag := true ;
59194: LD_ADDR_EXP 80
59198: PUSH
59199: LD_INT 1
59201: ST_TO_ADDR
// if p3 = 15 then
59202: LD_VAR 0 3
59206: PUSH
59207: LD_INT 15
59209: EQUAL
59210: IFFALSE 59220
// sKamikadze := true ;
59212: LD_ADDR_EXP 88
59216: PUSH
59217: LD_INT 1
59219: ST_TO_ADDR
// if p3 = 16 then
59220: LD_VAR 0 3
59224: PUSH
59225: LD_INT 16
59227: EQUAL
59228: IFFALSE 59238
// sTroll := true ;
59230: LD_ADDR_EXP 89
59234: PUSH
59235: LD_INT 1
59237: ST_TO_ADDR
// if p3 = 17 then
59238: LD_VAR 0 3
59242: PUSH
59243: LD_INT 17
59245: EQUAL
59246: IFFALSE 59256
// sSlow := true ;
59248: LD_ADDR_EXP 90
59252: PUSH
59253: LD_INT 1
59255: ST_TO_ADDR
// if p3 = 18 then
59256: LD_VAR 0 3
59260: PUSH
59261: LD_INT 18
59263: EQUAL
59264: IFFALSE 59274
// sLack := true ;
59266: LD_ADDR_EXP 91
59270: PUSH
59271: LD_INT 1
59273: ST_TO_ADDR
// if p3 = 19 then
59274: LD_VAR 0 3
59278: PUSH
59279: LD_INT 19
59281: EQUAL
59282: IFFALSE 59292
// sTank := true ;
59284: LD_ADDR_EXP 93
59288: PUSH
59289: LD_INT 1
59291: ST_TO_ADDR
// if p3 = 20 then
59292: LD_VAR 0 3
59296: PUSH
59297: LD_INT 20
59299: EQUAL
59300: IFFALSE 59310
// sRemote := true ;
59302: LD_ADDR_EXP 94
59306: PUSH
59307: LD_INT 1
59309: ST_TO_ADDR
// if p3 = 21 then
59310: LD_VAR 0 3
59314: PUSH
59315: LD_INT 21
59317: EQUAL
59318: IFFALSE 59328
// sPowell := true ;
59320: LD_ADDR_EXP 95
59324: PUSH
59325: LD_INT 1
59327: ST_TO_ADDR
// if p3 = 22 then
59328: LD_VAR 0 3
59332: PUSH
59333: LD_INT 22
59335: EQUAL
59336: IFFALSE 59346
// sTeleport := true ;
59338: LD_ADDR_EXP 98
59342: PUSH
59343: LD_INT 1
59345: ST_TO_ADDR
// if p3 = 23 then
59346: LD_VAR 0 3
59350: PUSH
59351: LD_INT 23
59353: EQUAL
59354: IFFALSE 59364
// sOilTower := true ;
59356: LD_ADDR_EXP 100
59360: PUSH
59361: LD_INT 1
59363: ST_TO_ADDR
// if p3 = 24 then
59364: LD_VAR 0 3
59368: PUSH
59369: LD_INT 24
59371: EQUAL
59372: IFFALSE 59382
// sShovel := true ;
59374: LD_ADDR_EXP 101
59378: PUSH
59379: LD_INT 1
59381: ST_TO_ADDR
// if p3 = 25 then
59382: LD_VAR 0 3
59386: PUSH
59387: LD_INT 25
59389: EQUAL
59390: IFFALSE 59400
// sSheik := true ;
59392: LD_ADDR_EXP 102
59396: PUSH
59397: LD_INT 1
59399: ST_TO_ADDR
// if p3 = 26 then
59400: LD_VAR 0 3
59404: PUSH
59405: LD_INT 26
59407: EQUAL
59408: IFFALSE 59418
// sEarthquake := true ;
59410: LD_ADDR_EXP 104
59414: PUSH
59415: LD_INT 1
59417: ST_TO_ADDR
// if p3 = 27 then
59418: LD_VAR 0 3
59422: PUSH
59423: LD_INT 27
59425: EQUAL
59426: IFFALSE 59436
// sAI := true ;
59428: LD_ADDR_EXP 105
59432: PUSH
59433: LD_INT 1
59435: ST_TO_ADDR
// if p3 = 28 then
59436: LD_VAR 0 3
59440: PUSH
59441: LD_INT 28
59443: EQUAL
59444: IFFALSE 59454
// sCargo := true ;
59446: LD_ADDR_EXP 108
59450: PUSH
59451: LD_INT 1
59453: ST_TO_ADDR
// if p3 = 29 then
59454: LD_VAR 0 3
59458: PUSH
59459: LD_INT 29
59461: EQUAL
59462: IFFALSE 59472
// sDLaser := true ;
59464: LD_ADDR_EXP 109
59468: PUSH
59469: LD_INT 1
59471: ST_TO_ADDR
// if p3 = 30 then
59472: LD_VAR 0 3
59476: PUSH
59477: LD_INT 30
59479: EQUAL
59480: IFFALSE 59490
// sExchange := true ;
59482: LD_ADDR_EXP 110
59486: PUSH
59487: LD_INT 1
59489: ST_TO_ADDR
// if p3 = 31 then
59490: LD_VAR 0 3
59494: PUSH
59495: LD_INT 31
59497: EQUAL
59498: IFFALSE 59508
// sFac := true ;
59500: LD_ADDR_EXP 111
59504: PUSH
59505: LD_INT 1
59507: ST_TO_ADDR
// if p3 = 32 then
59508: LD_VAR 0 3
59512: PUSH
59513: LD_INT 32
59515: EQUAL
59516: IFFALSE 59526
// sPower := true ;
59518: LD_ADDR_EXP 112
59522: PUSH
59523: LD_INT 1
59525: ST_TO_ADDR
// if p3 = 33 then
59526: LD_VAR 0 3
59530: PUSH
59531: LD_INT 33
59533: EQUAL
59534: IFFALSE 59544
// sRandom := true ;
59536: LD_ADDR_EXP 113
59540: PUSH
59541: LD_INT 1
59543: ST_TO_ADDR
// if p3 = 34 then
59544: LD_VAR 0 3
59548: PUSH
59549: LD_INT 34
59551: EQUAL
59552: IFFALSE 59562
// sShield := true ;
59554: LD_ADDR_EXP 114
59558: PUSH
59559: LD_INT 1
59561: ST_TO_ADDR
// if p3 = 35 then
59562: LD_VAR 0 3
59566: PUSH
59567: LD_INT 35
59569: EQUAL
59570: IFFALSE 59580
// sTime := true ;
59572: LD_ADDR_EXP 115
59576: PUSH
59577: LD_INT 1
59579: ST_TO_ADDR
// if p3 = 36 then
59580: LD_VAR 0 3
59584: PUSH
59585: LD_INT 36
59587: EQUAL
59588: IFFALSE 59598
// sTools := true ;
59590: LD_ADDR_EXP 116
59594: PUSH
59595: LD_INT 1
59597: ST_TO_ADDR
// if p3 = 101 then
59598: LD_VAR 0 3
59602: PUSH
59603: LD_INT 101
59605: EQUAL
59606: IFFALSE 59616
// sSold := true ;
59608: LD_ADDR_EXP 81
59612: PUSH
59613: LD_INT 1
59615: ST_TO_ADDR
// if p3 = 102 then
59616: LD_VAR 0 3
59620: PUSH
59621: LD_INT 102
59623: EQUAL
59624: IFFALSE 59634
// sDiff := true ;
59626: LD_ADDR_EXP 82
59630: PUSH
59631: LD_INT 1
59633: ST_TO_ADDR
// if p3 = 103 then
59634: LD_VAR 0 3
59638: PUSH
59639: LD_INT 103
59641: EQUAL
59642: IFFALSE 59652
// sFog := true ;
59644: LD_ADDR_EXP 85
59648: PUSH
59649: LD_INT 1
59651: ST_TO_ADDR
// if p3 = 104 then
59652: LD_VAR 0 3
59656: PUSH
59657: LD_INT 104
59659: EQUAL
59660: IFFALSE 59670
// sReset := true ;
59662: LD_ADDR_EXP 86
59666: PUSH
59667: LD_INT 1
59669: ST_TO_ADDR
// if p3 = 105 then
59670: LD_VAR 0 3
59674: PUSH
59675: LD_INT 105
59677: EQUAL
59678: IFFALSE 59688
// sSun := true ;
59680: LD_ADDR_EXP 87
59684: PUSH
59685: LD_INT 1
59687: ST_TO_ADDR
// if p3 = 106 then
59688: LD_VAR 0 3
59692: PUSH
59693: LD_INT 106
59695: EQUAL
59696: IFFALSE 59706
// sTiger := true ;
59698: LD_ADDR_EXP 83
59702: PUSH
59703: LD_INT 1
59705: ST_TO_ADDR
// if p3 = 107 then
59706: LD_VAR 0 3
59710: PUSH
59711: LD_INT 107
59713: EQUAL
59714: IFFALSE 59724
// sBomb := true ;
59716: LD_ADDR_EXP 84
59720: PUSH
59721: LD_INT 1
59723: ST_TO_ADDR
// if p3 = 108 then
59724: LD_VAR 0 3
59728: PUSH
59729: LD_INT 108
59731: EQUAL
59732: IFFALSE 59742
// sWound := true ;
59734: LD_ADDR_EXP 92
59738: PUSH
59739: LD_INT 1
59741: ST_TO_ADDR
// if p3 = 109 then
59742: LD_VAR 0 3
59746: PUSH
59747: LD_INT 109
59749: EQUAL
59750: IFFALSE 59760
// sBetray := true ;
59752: LD_ADDR_EXP 96
59756: PUSH
59757: LD_INT 1
59759: ST_TO_ADDR
// if p3 = 110 then
59760: LD_VAR 0 3
59764: PUSH
59765: LD_INT 110
59767: EQUAL
59768: IFFALSE 59778
// sContamin := true ;
59770: LD_ADDR_EXP 97
59774: PUSH
59775: LD_INT 1
59777: ST_TO_ADDR
// if p3 = 111 then
59778: LD_VAR 0 3
59782: PUSH
59783: LD_INT 111
59785: EQUAL
59786: IFFALSE 59796
// sOil := true ;
59788: LD_ADDR_EXP 99
59792: PUSH
59793: LD_INT 1
59795: ST_TO_ADDR
// if p3 = 112 then
59796: LD_VAR 0 3
59800: PUSH
59801: LD_INT 112
59803: EQUAL
59804: IFFALSE 59814
// sStu := true ;
59806: LD_ADDR_EXP 103
59810: PUSH
59811: LD_INT 1
59813: ST_TO_ADDR
// if p3 = 113 then
59814: LD_VAR 0 3
59818: PUSH
59819: LD_INT 113
59821: EQUAL
59822: IFFALSE 59832
// sBazooka := true ;
59824: LD_ADDR_EXP 106
59828: PUSH
59829: LD_INT 1
59831: ST_TO_ADDR
// if p3 = 114 then
59832: LD_VAR 0 3
59836: PUSH
59837: LD_INT 114
59839: EQUAL
59840: IFFALSE 59850
// sMortar := true ;
59842: LD_ADDR_EXP 107
59846: PUSH
59847: LD_INT 1
59849: ST_TO_ADDR
// if p3 = 115 then
59850: LD_VAR 0 3
59854: PUSH
59855: LD_INT 115
59857: EQUAL
59858: IFFALSE 59868
// sRanger := true ;
59860: LD_ADDR_EXP 117
59864: PUSH
59865: LD_INT 1
59867: ST_TO_ADDR
// end ; if p2 = 101 then
59868: LD_VAR 0 2
59872: PUSH
59873: LD_INT 101
59875: EQUAL
59876: IFFALSE 60079
// begin case p3 of 1 :
59878: LD_VAR 0 3
59882: PUSH
59883: LD_INT 1
59885: DOUBLE
59886: EQUAL
59887: IFTRUE 59891
59889: GO 59898
59891: POP
// hHackUnlimitedResources ; 2 :
59892: CALL 70173 0 0
59896: GO 60079
59898: LD_INT 2
59900: DOUBLE
59901: EQUAL
59902: IFTRUE 59906
59904: GO 59913
59906: POP
// hHackSetLevel10 ; 3 :
59907: CALL 70306 0 0
59911: GO 60079
59913: LD_INT 3
59915: DOUBLE
59916: EQUAL
59917: IFTRUE 59921
59919: GO 59928
59921: POP
// hHackSetLevel10YourUnits ; 4 :
59922: CALL 70391 0 0
59926: GO 60079
59928: LD_INT 4
59930: DOUBLE
59931: EQUAL
59932: IFTRUE 59936
59934: GO 59958
59936: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
59937: LD_VAR 0 4
59941: PPUSH
59942: LD_VAR 0 5
59946: PPUSH
59947: LD_VAR 0 6
59951: PPUSH
59952: CALL 70481 0 3
59956: GO 60079
59958: LD_INT 5
59960: DOUBLE
59961: EQUAL
59962: IFTRUE 59966
59964: GO 59973
59966: POP
// hHackSpawnVehicle ; 6 :
59967: CALL 70542 0 0
59971: GO 60079
59973: LD_INT 6
59975: DOUBLE
59976: EQUAL
59977: IFTRUE 59981
59979: GO 59988
59981: POP
// hHackInvincible ; 7 :
59982: CALL 71088 0 0
59986: GO 60079
59988: LD_INT 7
59990: DOUBLE
59991: EQUAL
59992: IFTRUE 59996
59994: GO 60003
59996: POP
// hHackInvisible ; 8 :
59997: CALL 71199 0 0
60001: GO 60079
60003: LD_INT 8
60005: DOUBLE
60006: EQUAL
60007: IFTRUE 60011
60009: GO 60018
60011: POP
// hHackChangeYourSide ; 9 :
60012: CALL 71256 0 0
60016: GO 60079
60018: LD_INT 9
60020: DOUBLE
60021: EQUAL
60022: IFTRUE 60026
60024: GO 60033
60026: POP
// hHackChangeUnitSide ; 10 :
60027: CALL 71298 0 0
60031: GO 60079
60033: LD_INT 10
60035: DOUBLE
60036: EQUAL
60037: IFTRUE 60041
60039: GO 60048
60041: POP
// hHackFog ; 11 :
60042: CALL 71399 0 0
60046: GO 60079
60048: LD_INT 11
60050: DOUBLE
60051: EQUAL
60052: IFTRUE 60056
60054: GO 60063
60056: POP
// hHackApeman ; 12 :
60057: CALL 71414 0 0
60061: GO 60079
60063: LD_INT 12
60065: DOUBLE
60066: EQUAL
60067: IFTRUE 60071
60069: GO 60078
60071: POP
// hHackBoom ; end ;
60072: CALL 71499 0 0
60076: GO 60079
60078: POP
// end ; end ;
60079: PPOPN 6
60081: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
60082: GO 60084
60084: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
60085: LD_STRING initStreamRollete();
60087: PPUSH
60088: CALL_OW 559
// InitStreamMode ;
60092: CALL 60101 0 0
// DefineStreamItems ( ) ;
60096: CALL 60541 0 0
// end ;
60100: END
// function InitStreamMode ; begin
60101: LD_INT 0
60103: PPUSH
// streamModeActive := false ;
60104: LD_ADDR_EXP 64
60108: PUSH
60109: LD_INT 0
60111: ST_TO_ADDR
// normalCounter := 36 ;
60112: LD_ADDR_EXP 65
60116: PUSH
60117: LD_INT 36
60119: ST_TO_ADDR
// hardcoreCounter := 16 ;
60120: LD_ADDR_EXP 66
60124: PUSH
60125: LD_INT 16
60127: ST_TO_ADDR
// sRocket := false ;
60128: LD_ADDR_EXP 69
60132: PUSH
60133: LD_INT 0
60135: ST_TO_ADDR
// sSpeed := false ;
60136: LD_ADDR_EXP 68
60140: PUSH
60141: LD_INT 0
60143: ST_TO_ADDR
// sEngine := false ;
60144: LD_ADDR_EXP 70
60148: PUSH
60149: LD_INT 0
60151: ST_TO_ADDR
// sSpec := false ;
60152: LD_ADDR_EXP 67
60156: PUSH
60157: LD_INT 0
60159: ST_TO_ADDR
// sLevel := false ;
60160: LD_ADDR_EXP 71
60164: PUSH
60165: LD_INT 0
60167: ST_TO_ADDR
// sArmoury := false ;
60168: LD_ADDR_EXP 72
60172: PUSH
60173: LD_INT 0
60175: ST_TO_ADDR
// sRadar := false ;
60176: LD_ADDR_EXP 73
60180: PUSH
60181: LD_INT 0
60183: ST_TO_ADDR
// sBunker := false ;
60184: LD_ADDR_EXP 74
60188: PUSH
60189: LD_INT 0
60191: ST_TO_ADDR
// sHack := false ;
60192: LD_ADDR_EXP 75
60196: PUSH
60197: LD_INT 0
60199: ST_TO_ADDR
// sFire := false ;
60200: LD_ADDR_EXP 76
60204: PUSH
60205: LD_INT 0
60207: ST_TO_ADDR
// sRefresh := false ;
60208: LD_ADDR_EXP 77
60212: PUSH
60213: LD_INT 0
60215: ST_TO_ADDR
// sExp := false ;
60216: LD_ADDR_EXP 78
60220: PUSH
60221: LD_INT 0
60223: ST_TO_ADDR
// sDepot := false ;
60224: LD_ADDR_EXP 79
60228: PUSH
60229: LD_INT 0
60231: ST_TO_ADDR
// sFlag := false ;
60232: LD_ADDR_EXP 80
60236: PUSH
60237: LD_INT 0
60239: ST_TO_ADDR
// sKamikadze := false ;
60240: LD_ADDR_EXP 88
60244: PUSH
60245: LD_INT 0
60247: ST_TO_ADDR
// sTroll := false ;
60248: LD_ADDR_EXP 89
60252: PUSH
60253: LD_INT 0
60255: ST_TO_ADDR
// sSlow := false ;
60256: LD_ADDR_EXP 90
60260: PUSH
60261: LD_INT 0
60263: ST_TO_ADDR
// sLack := false ;
60264: LD_ADDR_EXP 91
60268: PUSH
60269: LD_INT 0
60271: ST_TO_ADDR
// sTank := false ;
60272: LD_ADDR_EXP 93
60276: PUSH
60277: LD_INT 0
60279: ST_TO_ADDR
// sRemote := false ;
60280: LD_ADDR_EXP 94
60284: PUSH
60285: LD_INT 0
60287: ST_TO_ADDR
// sPowell := false ;
60288: LD_ADDR_EXP 95
60292: PUSH
60293: LD_INT 0
60295: ST_TO_ADDR
// sTeleport := false ;
60296: LD_ADDR_EXP 98
60300: PUSH
60301: LD_INT 0
60303: ST_TO_ADDR
// sOilTower := false ;
60304: LD_ADDR_EXP 100
60308: PUSH
60309: LD_INT 0
60311: ST_TO_ADDR
// sShovel := false ;
60312: LD_ADDR_EXP 101
60316: PUSH
60317: LD_INT 0
60319: ST_TO_ADDR
// sSheik := false ;
60320: LD_ADDR_EXP 102
60324: PUSH
60325: LD_INT 0
60327: ST_TO_ADDR
// sEarthquake := false ;
60328: LD_ADDR_EXP 104
60332: PUSH
60333: LD_INT 0
60335: ST_TO_ADDR
// sAI := false ;
60336: LD_ADDR_EXP 105
60340: PUSH
60341: LD_INT 0
60343: ST_TO_ADDR
// sCargo := false ;
60344: LD_ADDR_EXP 108
60348: PUSH
60349: LD_INT 0
60351: ST_TO_ADDR
// sDLaser := false ;
60352: LD_ADDR_EXP 109
60356: PUSH
60357: LD_INT 0
60359: ST_TO_ADDR
// sExchange := false ;
60360: LD_ADDR_EXP 110
60364: PUSH
60365: LD_INT 0
60367: ST_TO_ADDR
// sFac := false ;
60368: LD_ADDR_EXP 111
60372: PUSH
60373: LD_INT 0
60375: ST_TO_ADDR
// sPower := false ;
60376: LD_ADDR_EXP 112
60380: PUSH
60381: LD_INT 0
60383: ST_TO_ADDR
// sRandom := false ;
60384: LD_ADDR_EXP 113
60388: PUSH
60389: LD_INT 0
60391: ST_TO_ADDR
// sShield := false ;
60392: LD_ADDR_EXP 114
60396: PUSH
60397: LD_INT 0
60399: ST_TO_ADDR
// sTime := false ;
60400: LD_ADDR_EXP 115
60404: PUSH
60405: LD_INT 0
60407: ST_TO_ADDR
// sTools := false ;
60408: LD_ADDR_EXP 116
60412: PUSH
60413: LD_INT 0
60415: ST_TO_ADDR
// sSold := false ;
60416: LD_ADDR_EXP 81
60420: PUSH
60421: LD_INT 0
60423: ST_TO_ADDR
// sDiff := false ;
60424: LD_ADDR_EXP 82
60428: PUSH
60429: LD_INT 0
60431: ST_TO_ADDR
// sFog := false ;
60432: LD_ADDR_EXP 85
60436: PUSH
60437: LD_INT 0
60439: ST_TO_ADDR
// sReset := false ;
60440: LD_ADDR_EXP 86
60444: PUSH
60445: LD_INT 0
60447: ST_TO_ADDR
// sSun := false ;
60448: LD_ADDR_EXP 87
60452: PUSH
60453: LD_INT 0
60455: ST_TO_ADDR
// sTiger := false ;
60456: LD_ADDR_EXP 83
60460: PUSH
60461: LD_INT 0
60463: ST_TO_ADDR
// sBomb := false ;
60464: LD_ADDR_EXP 84
60468: PUSH
60469: LD_INT 0
60471: ST_TO_ADDR
// sWound := false ;
60472: LD_ADDR_EXP 92
60476: PUSH
60477: LD_INT 0
60479: ST_TO_ADDR
// sBetray := false ;
60480: LD_ADDR_EXP 96
60484: PUSH
60485: LD_INT 0
60487: ST_TO_ADDR
// sContamin := false ;
60488: LD_ADDR_EXP 97
60492: PUSH
60493: LD_INT 0
60495: ST_TO_ADDR
// sOil := false ;
60496: LD_ADDR_EXP 99
60500: PUSH
60501: LD_INT 0
60503: ST_TO_ADDR
// sStu := false ;
60504: LD_ADDR_EXP 103
60508: PUSH
60509: LD_INT 0
60511: ST_TO_ADDR
// sBazooka := false ;
60512: LD_ADDR_EXP 106
60516: PUSH
60517: LD_INT 0
60519: ST_TO_ADDR
// sMortar := false ;
60520: LD_ADDR_EXP 107
60524: PUSH
60525: LD_INT 0
60527: ST_TO_ADDR
// sRanger := false ;
60528: LD_ADDR_EXP 117
60532: PUSH
60533: LD_INT 0
60535: ST_TO_ADDR
// end ;
60536: LD_VAR 0 1
60540: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
60541: LD_INT 0
60543: PPUSH
60544: PPUSH
60545: PPUSH
60546: PPUSH
60547: PPUSH
// result := [ ] ;
60548: LD_ADDR_VAR 0 1
60552: PUSH
60553: EMPTY
60554: ST_TO_ADDR
// if campaign_id = 1 then
60555: LD_OWVAR 69
60559: PUSH
60560: LD_INT 1
60562: EQUAL
60563: IFFALSE 63501
// begin case mission_number of 1 :
60565: LD_OWVAR 70
60569: PUSH
60570: LD_INT 1
60572: DOUBLE
60573: EQUAL
60574: IFTRUE 60578
60576: GO 60642
60578: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
60579: LD_ADDR_VAR 0 1
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: LD_INT 4
60589: PUSH
60590: LD_INT 11
60592: PUSH
60593: LD_INT 12
60595: PUSH
60596: LD_INT 15
60598: PUSH
60599: LD_INT 16
60601: PUSH
60602: LD_INT 22
60604: PUSH
60605: LD_INT 23
60607: PUSH
60608: LD_INT 26
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 101
60624: PUSH
60625: LD_INT 102
60627: PUSH
60628: LD_INT 106
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: LIST
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: ST_TO_ADDR
60640: GO 63499
60642: LD_INT 2
60644: DOUBLE
60645: EQUAL
60646: IFTRUE 60650
60648: GO 60722
60650: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
60651: LD_ADDR_VAR 0 1
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: LD_INT 4
60661: PUSH
60662: LD_INT 11
60664: PUSH
60665: LD_INT 12
60667: PUSH
60668: LD_INT 15
60670: PUSH
60671: LD_INT 16
60673: PUSH
60674: LD_INT 22
60676: PUSH
60677: LD_INT 23
60679: PUSH
60680: LD_INT 26
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 101
60696: PUSH
60697: LD_INT 102
60699: PUSH
60700: LD_INT 105
60702: PUSH
60703: LD_INT 106
60705: PUSH
60706: LD_INT 108
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: ST_TO_ADDR
60720: GO 63499
60722: LD_INT 3
60724: DOUBLE
60725: EQUAL
60726: IFTRUE 60730
60728: GO 60806
60730: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
60731: LD_ADDR_VAR 0 1
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: LD_INT 4
60741: PUSH
60742: LD_INT 5
60744: PUSH
60745: LD_INT 11
60747: PUSH
60748: LD_INT 12
60750: PUSH
60751: LD_INT 15
60753: PUSH
60754: LD_INT 16
60756: PUSH
60757: LD_INT 22
60759: PUSH
60760: LD_INT 26
60762: PUSH
60763: LD_INT 36
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 101
60780: PUSH
60781: LD_INT 102
60783: PUSH
60784: LD_INT 105
60786: PUSH
60787: LD_INT 106
60789: PUSH
60790: LD_INT 108
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: ST_TO_ADDR
60804: GO 63499
60806: LD_INT 4
60808: DOUBLE
60809: EQUAL
60810: IFTRUE 60814
60812: GO 60898
60814: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
60815: LD_ADDR_VAR 0 1
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: LD_INT 4
60825: PUSH
60826: LD_INT 5
60828: PUSH
60829: LD_INT 8
60831: PUSH
60832: LD_INT 11
60834: PUSH
60835: LD_INT 12
60837: PUSH
60838: LD_INT 15
60840: PUSH
60841: LD_INT 16
60843: PUSH
60844: LD_INT 22
60846: PUSH
60847: LD_INT 23
60849: PUSH
60850: LD_INT 26
60852: PUSH
60853: LD_INT 36
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 101
60872: PUSH
60873: LD_INT 102
60875: PUSH
60876: LD_INT 105
60878: PUSH
60879: LD_INT 106
60881: PUSH
60882: LD_INT 108
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: ST_TO_ADDR
60896: GO 63499
60898: LD_INT 5
60900: DOUBLE
60901: EQUAL
60902: IFTRUE 60906
60904: GO 61006
60906: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
60907: LD_ADDR_VAR 0 1
60911: PUSH
60912: LD_INT 2
60914: PUSH
60915: LD_INT 4
60917: PUSH
60918: LD_INT 5
60920: PUSH
60921: LD_INT 6
60923: PUSH
60924: LD_INT 8
60926: PUSH
60927: LD_INT 11
60929: PUSH
60930: LD_INT 12
60932: PUSH
60933: LD_INT 15
60935: PUSH
60936: LD_INT 16
60938: PUSH
60939: LD_INT 22
60941: PUSH
60942: LD_INT 23
60944: PUSH
60945: LD_INT 25
60947: PUSH
60948: LD_INT 26
60950: PUSH
60951: LD_INT 36
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 101
60972: PUSH
60973: LD_INT 102
60975: PUSH
60976: LD_INT 105
60978: PUSH
60979: LD_INT 106
60981: PUSH
60982: LD_INT 108
60984: PUSH
60985: LD_INT 109
60987: PUSH
60988: LD_INT 112
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: ST_TO_ADDR
61004: GO 63499
61006: LD_INT 6
61008: DOUBLE
61009: EQUAL
61010: IFTRUE 61014
61012: GO 61134
61014: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
61015: LD_ADDR_VAR 0 1
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: LD_INT 4
61025: PUSH
61026: LD_INT 5
61028: PUSH
61029: LD_INT 6
61031: PUSH
61032: LD_INT 8
61034: PUSH
61035: LD_INT 11
61037: PUSH
61038: LD_INT 12
61040: PUSH
61041: LD_INT 15
61043: PUSH
61044: LD_INT 16
61046: PUSH
61047: LD_INT 20
61049: PUSH
61050: LD_INT 21
61052: PUSH
61053: LD_INT 22
61055: PUSH
61056: LD_INT 23
61058: PUSH
61059: LD_INT 25
61061: PUSH
61062: LD_INT 26
61064: PUSH
61065: LD_INT 30
61067: PUSH
61068: LD_INT 31
61070: PUSH
61071: LD_INT 32
61073: PUSH
61074: LD_INT 36
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 101
61100: PUSH
61101: LD_INT 102
61103: PUSH
61104: LD_INT 105
61106: PUSH
61107: LD_INT 106
61109: PUSH
61110: LD_INT 108
61112: PUSH
61113: LD_INT 109
61115: PUSH
61116: LD_INT 112
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: ST_TO_ADDR
61132: GO 63499
61134: LD_INT 7
61136: DOUBLE
61137: EQUAL
61138: IFTRUE 61142
61140: GO 61242
61142: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
61143: LD_ADDR_VAR 0 1
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: LD_INT 4
61153: PUSH
61154: LD_INT 5
61156: PUSH
61157: LD_INT 7
61159: PUSH
61160: LD_INT 11
61162: PUSH
61163: LD_INT 12
61165: PUSH
61166: LD_INT 15
61168: PUSH
61169: LD_INT 16
61171: PUSH
61172: LD_INT 20
61174: PUSH
61175: LD_INT 21
61177: PUSH
61178: LD_INT 22
61180: PUSH
61181: LD_INT 23
61183: PUSH
61184: LD_INT 25
61186: PUSH
61187: LD_INT 26
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 101
61208: PUSH
61209: LD_INT 102
61211: PUSH
61212: LD_INT 103
61214: PUSH
61215: LD_INT 105
61217: PUSH
61218: LD_INT 106
61220: PUSH
61221: LD_INT 108
61223: PUSH
61224: LD_INT 112
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: ST_TO_ADDR
61240: GO 63499
61242: LD_INT 8
61244: DOUBLE
61245: EQUAL
61246: IFTRUE 61250
61248: GO 61378
61250: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
61251: LD_ADDR_VAR 0 1
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 4
61261: PUSH
61262: LD_INT 5
61264: PUSH
61265: LD_INT 6
61267: PUSH
61268: LD_INT 7
61270: PUSH
61271: LD_INT 8
61273: PUSH
61274: LD_INT 11
61276: PUSH
61277: LD_INT 12
61279: PUSH
61280: LD_INT 15
61282: PUSH
61283: LD_INT 16
61285: PUSH
61286: LD_INT 20
61288: PUSH
61289: LD_INT 21
61291: PUSH
61292: LD_INT 22
61294: PUSH
61295: LD_INT 23
61297: PUSH
61298: LD_INT 25
61300: PUSH
61301: LD_INT 26
61303: PUSH
61304: LD_INT 30
61306: PUSH
61307: LD_INT 31
61309: PUSH
61310: LD_INT 32
61312: PUSH
61313: LD_INT 36
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 101
61340: PUSH
61341: LD_INT 102
61343: PUSH
61344: LD_INT 103
61346: PUSH
61347: LD_INT 105
61349: PUSH
61350: LD_INT 106
61352: PUSH
61353: LD_INT 108
61355: PUSH
61356: LD_INT 109
61358: PUSH
61359: LD_INT 112
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: ST_TO_ADDR
61376: GO 63499
61378: LD_INT 9
61380: DOUBLE
61381: EQUAL
61382: IFTRUE 61386
61384: GO 61522
61386: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
61387: LD_ADDR_VAR 0 1
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: LD_INT 4
61397: PUSH
61398: LD_INT 5
61400: PUSH
61401: LD_INT 6
61403: PUSH
61404: LD_INT 7
61406: PUSH
61407: LD_INT 8
61409: PUSH
61410: LD_INT 11
61412: PUSH
61413: LD_INT 12
61415: PUSH
61416: LD_INT 15
61418: PUSH
61419: LD_INT 16
61421: PUSH
61422: LD_INT 20
61424: PUSH
61425: LD_INT 21
61427: PUSH
61428: LD_INT 22
61430: PUSH
61431: LD_INT 23
61433: PUSH
61434: LD_INT 25
61436: PUSH
61437: LD_INT 26
61439: PUSH
61440: LD_INT 28
61442: PUSH
61443: LD_INT 30
61445: PUSH
61446: LD_INT 31
61448: PUSH
61449: LD_INT 32
61451: PUSH
61452: LD_INT 36
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 101
61480: PUSH
61481: LD_INT 102
61483: PUSH
61484: LD_INT 103
61486: PUSH
61487: LD_INT 105
61489: PUSH
61490: LD_INT 106
61492: PUSH
61493: LD_INT 108
61495: PUSH
61496: LD_INT 109
61498: PUSH
61499: LD_INT 112
61501: PUSH
61502: LD_INT 114
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: ST_TO_ADDR
61520: GO 63499
61522: LD_INT 10
61524: DOUBLE
61525: EQUAL
61526: IFTRUE 61530
61528: GO 61714
61530: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
61531: LD_ADDR_VAR 0 1
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: LD_INT 4
61541: PUSH
61542: LD_INT 5
61544: PUSH
61545: LD_INT 6
61547: PUSH
61548: LD_INT 7
61550: PUSH
61551: LD_INT 8
61553: PUSH
61554: LD_INT 9
61556: PUSH
61557: LD_INT 10
61559: PUSH
61560: LD_INT 11
61562: PUSH
61563: LD_INT 12
61565: PUSH
61566: LD_INT 13
61568: PUSH
61569: LD_INT 14
61571: PUSH
61572: LD_INT 15
61574: PUSH
61575: LD_INT 16
61577: PUSH
61578: LD_INT 17
61580: PUSH
61581: LD_INT 18
61583: PUSH
61584: LD_INT 19
61586: PUSH
61587: LD_INT 20
61589: PUSH
61590: LD_INT 21
61592: PUSH
61593: LD_INT 22
61595: PUSH
61596: LD_INT 23
61598: PUSH
61599: LD_INT 24
61601: PUSH
61602: LD_INT 25
61604: PUSH
61605: LD_INT 26
61607: PUSH
61608: LD_INT 28
61610: PUSH
61611: LD_INT 30
61613: PUSH
61614: LD_INT 31
61616: PUSH
61617: LD_INT 32
61619: PUSH
61620: LD_INT 36
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 101
61656: PUSH
61657: LD_INT 102
61659: PUSH
61660: LD_INT 103
61662: PUSH
61663: LD_INT 104
61665: PUSH
61666: LD_INT 105
61668: PUSH
61669: LD_INT 106
61671: PUSH
61672: LD_INT 107
61674: PUSH
61675: LD_INT 108
61677: PUSH
61678: LD_INT 109
61680: PUSH
61681: LD_INT 110
61683: PUSH
61684: LD_INT 111
61686: PUSH
61687: LD_INT 112
61689: PUSH
61690: LD_INT 114
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: ST_TO_ADDR
61712: GO 63499
61714: LD_INT 11
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61722
61720: GO 61914
61722: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
61723: LD_ADDR_VAR 0 1
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: LD_INT 4
61736: PUSH
61737: LD_INT 5
61739: PUSH
61740: LD_INT 6
61742: PUSH
61743: LD_INT 7
61745: PUSH
61746: LD_INT 8
61748: PUSH
61749: LD_INT 9
61751: PUSH
61752: LD_INT 10
61754: PUSH
61755: LD_INT 11
61757: PUSH
61758: LD_INT 12
61760: PUSH
61761: LD_INT 13
61763: PUSH
61764: LD_INT 14
61766: PUSH
61767: LD_INT 15
61769: PUSH
61770: LD_INT 16
61772: PUSH
61773: LD_INT 17
61775: PUSH
61776: LD_INT 18
61778: PUSH
61779: LD_INT 19
61781: PUSH
61782: LD_INT 20
61784: PUSH
61785: LD_INT 21
61787: PUSH
61788: LD_INT 22
61790: PUSH
61791: LD_INT 23
61793: PUSH
61794: LD_INT 24
61796: PUSH
61797: LD_INT 25
61799: PUSH
61800: LD_INT 26
61802: PUSH
61803: LD_INT 28
61805: PUSH
61806: LD_INT 30
61808: PUSH
61809: LD_INT 31
61811: PUSH
61812: LD_INT 32
61814: PUSH
61815: LD_INT 34
61817: PUSH
61818: LD_INT 36
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 101
61856: PUSH
61857: LD_INT 102
61859: PUSH
61860: LD_INT 103
61862: PUSH
61863: LD_INT 104
61865: PUSH
61866: LD_INT 105
61868: PUSH
61869: LD_INT 106
61871: PUSH
61872: LD_INT 107
61874: PUSH
61875: LD_INT 108
61877: PUSH
61878: LD_INT 109
61880: PUSH
61881: LD_INT 110
61883: PUSH
61884: LD_INT 111
61886: PUSH
61887: LD_INT 112
61889: PUSH
61890: LD_INT 114
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: ST_TO_ADDR
61912: GO 63499
61914: LD_INT 12
61916: DOUBLE
61917: EQUAL
61918: IFTRUE 61922
61920: GO 62130
61922: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
61923: LD_ADDR_VAR 0 1
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: LD_INT 3
61936: PUSH
61937: LD_INT 4
61939: PUSH
61940: LD_INT 5
61942: PUSH
61943: LD_INT 6
61945: PUSH
61946: LD_INT 7
61948: PUSH
61949: LD_INT 8
61951: PUSH
61952: LD_INT 9
61954: PUSH
61955: LD_INT 10
61957: PUSH
61958: LD_INT 11
61960: PUSH
61961: LD_INT 12
61963: PUSH
61964: LD_INT 13
61966: PUSH
61967: LD_INT 14
61969: PUSH
61970: LD_INT 15
61972: PUSH
61973: LD_INT 16
61975: PUSH
61976: LD_INT 17
61978: PUSH
61979: LD_INT 18
61981: PUSH
61982: LD_INT 19
61984: PUSH
61985: LD_INT 20
61987: PUSH
61988: LD_INT 21
61990: PUSH
61991: LD_INT 22
61993: PUSH
61994: LD_INT 23
61996: PUSH
61997: LD_INT 24
61999: PUSH
62000: LD_INT 25
62002: PUSH
62003: LD_INT 26
62005: PUSH
62006: LD_INT 27
62008: PUSH
62009: LD_INT 28
62011: PUSH
62012: LD_INT 30
62014: PUSH
62015: LD_INT 31
62017: PUSH
62018: LD_INT 32
62020: PUSH
62021: LD_INT 33
62023: PUSH
62024: LD_INT 34
62026: PUSH
62027: LD_INT 36
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 101
62068: PUSH
62069: LD_INT 102
62071: PUSH
62072: LD_INT 103
62074: PUSH
62075: LD_INT 104
62077: PUSH
62078: LD_INT 105
62080: PUSH
62081: LD_INT 106
62083: PUSH
62084: LD_INT 107
62086: PUSH
62087: LD_INT 108
62089: PUSH
62090: LD_INT 109
62092: PUSH
62093: LD_INT 110
62095: PUSH
62096: LD_INT 111
62098: PUSH
62099: LD_INT 112
62101: PUSH
62102: LD_INT 113
62104: PUSH
62105: LD_INT 114
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: ST_TO_ADDR
62128: GO 63499
62130: LD_INT 13
62132: DOUBLE
62133: EQUAL
62134: IFTRUE 62138
62136: GO 62334
62138: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
62139: LD_ADDR_VAR 0 1
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: LD_INT 3
62152: PUSH
62153: LD_INT 4
62155: PUSH
62156: LD_INT 5
62158: PUSH
62159: LD_INT 8
62161: PUSH
62162: LD_INT 9
62164: PUSH
62165: LD_INT 10
62167: PUSH
62168: LD_INT 11
62170: PUSH
62171: LD_INT 12
62173: PUSH
62174: LD_INT 14
62176: PUSH
62177: LD_INT 15
62179: PUSH
62180: LD_INT 16
62182: PUSH
62183: LD_INT 17
62185: PUSH
62186: LD_INT 18
62188: PUSH
62189: LD_INT 19
62191: PUSH
62192: LD_INT 20
62194: PUSH
62195: LD_INT 21
62197: PUSH
62198: LD_INT 22
62200: PUSH
62201: LD_INT 23
62203: PUSH
62204: LD_INT 24
62206: PUSH
62207: LD_INT 25
62209: PUSH
62210: LD_INT 26
62212: PUSH
62213: LD_INT 27
62215: PUSH
62216: LD_INT 28
62218: PUSH
62219: LD_INT 30
62221: PUSH
62222: LD_INT 31
62224: PUSH
62225: LD_INT 32
62227: PUSH
62228: LD_INT 33
62230: PUSH
62231: LD_INT 34
62233: PUSH
62234: LD_INT 36
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 101
62272: PUSH
62273: LD_INT 102
62275: PUSH
62276: LD_INT 103
62278: PUSH
62279: LD_INT 104
62281: PUSH
62282: LD_INT 105
62284: PUSH
62285: LD_INT 106
62287: PUSH
62288: LD_INT 107
62290: PUSH
62291: LD_INT 108
62293: PUSH
62294: LD_INT 109
62296: PUSH
62297: LD_INT 110
62299: PUSH
62300: LD_INT 111
62302: PUSH
62303: LD_INT 112
62305: PUSH
62306: LD_INT 113
62308: PUSH
62309: LD_INT 114
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: ST_TO_ADDR
62332: GO 63499
62334: LD_INT 14
62336: DOUBLE
62337: EQUAL
62338: IFTRUE 62342
62340: GO 62554
62342: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
62343: LD_ADDR_VAR 0 1
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 2
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: LD_INT 4
62359: PUSH
62360: LD_INT 5
62362: PUSH
62363: LD_INT 6
62365: PUSH
62366: LD_INT 7
62368: PUSH
62369: LD_INT 8
62371: PUSH
62372: LD_INT 9
62374: PUSH
62375: LD_INT 10
62377: PUSH
62378: LD_INT 11
62380: PUSH
62381: LD_INT 12
62383: PUSH
62384: LD_INT 13
62386: PUSH
62387: LD_INT 14
62389: PUSH
62390: LD_INT 15
62392: PUSH
62393: LD_INT 16
62395: PUSH
62396: LD_INT 17
62398: PUSH
62399: LD_INT 18
62401: PUSH
62402: LD_INT 19
62404: PUSH
62405: LD_INT 20
62407: PUSH
62408: LD_INT 21
62410: PUSH
62411: LD_INT 22
62413: PUSH
62414: LD_INT 23
62416: PUSH
62417: LD_INT 24
62419: PUSH
62420: LD_INT 25
62422: PUSH
62423: LD_INT 26
62425: PUSH
62426: LD_INT 27
62428: PUSH
62429: LD_INT 28
62431: PUSH
62432: LD_INT 29
62434: PUSH
62435: LD_INT 30
62437: PUSH
62438: LD_INT 31
62440: PUSH
62441: LD_INT 32
62443: PUSH
62444: LD_INT 33
62446: PUSH
62447: LD_INT 34
62449: PUSH
62450: LD_INT 36
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 101
62492: PUSH
62493: LD_INT 102
62495: PUSH
62496: LD_INT 103
62498: PUSH
62499: LD_INT 104
62501: PUSH
62502: LD_INT 105
62504: PUSH
62505: LD_INT 106
62507: PUSH
62508: LD_INT 107
62510: PUSH
62511: LD_INT 108
62513: PUSH
62514: LD_INT 109
62516: PUSH
62517: LD_INT 110
62519: PUSH
62520: LD_INT 111
62522: PUSH
62523: LD_INT 112
62525: PUSH
62526: LD_INT 113
62528: PUSH
62529: LD_INT 114
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: ST_TO_ADDR
62552: GO 63499
62554: LD_INT 15
62556: DOUBLE
62557: EQUAL
62558: IFTRUE 62562
62560: GO 62774
62562: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
62563: LD_ADDR_VAR 0 1
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: LD_INT 2
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: LD_INT 4
62579: PUSH
62580: LD_INT 5
62582: PUSH
62583: LD_INT 6
62585: PUSH
62586: LD_INT 7
62588: PUSH
62589: LD_INT 8
62591: PUSH
62592: LD_INT 9
62594: PUSH
62595: LD_INT 10
62597: PUSH
62598: LD_INT 11
62600: PUSH
62601: LD_INT 12
62603: PUSH
62604: LD_INT 13
62606: PUSH
62607: LD_INT 14
62609: PUSH
62610: LD_INT 15
62612: PUSH
62613: LD_INT 16
62615: PUSH
62616: LD_INT 17
62618: PUSH
62619: LD_INT 18
62621: PUSH
62622: LD_INT 19
62624: PUSH
62625: LD_INT 20
62627: PUSH
62628: LD_INT 21
62630: PUSH
62631: LD_INT 22
62633: PUSH
62634: LD_INT 23
62636: PUSH
62637: LD_INT 24
62639: PUSH
62640: LD_INT 25
62642: PUSH
62643: LD_INT 26
62645: PUSH
62646: LD_INT 27
62648: PUSH
62649: LD_INT 28
62651: PUSH
62652: LD_INT 29
62654: PUSH
62655: LD_INT 30
62657: PUSH
62658: LD_INT 31
62660: PUSH
62661: LD_INT 32
62663: PUSH
62664: LD_INT 33
62666: PUSH
62667: LD_INT 34
62669: PUSH
62670: LD_INT 36
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 101
62712: PUSH
62713: LD_INT 102
62715: PUSH
62716: LD_INT 103
62718: PUSH
62719: LD_INT 104
62721: PUSH
62722: LD_INT 105
62724: PUSH
62725: LD_INT 106
62727: PUSH
62728: LD_INT 107
62730: PUSH
62731: LD_INT 108
62733: PUSH
62734: LD_INT 109
62736: PUSH
62737: LD_INT 110
62739: PUSH
62740: LD_INT 111
62742: PUSH
62743: LD_INT 112
62745: PUSH
62746: LD_INT 113
62748: PUSH
62749: LD_INT 114
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: ST_TO_ADDR
62772: GO 63499
62774: LD_INT 16
62776: DOUBLE
62777: EQUAL
62778: IFTRUE 62782
62780: GO 62906
62782: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
62783: LD_ADDR_VAR 0 1
62787: PUSH
62788: LD_INT 2
62790: PUSH
62791: LD_INT 4
62793: PUSH
62794: LD_INT 5
62796: PUSH
62797: LD_INT 7
62799: PUSH
62800: LD_INT 11
62802: PUSH
62803: LD_INT 12
62805: PUSH
62806: LD_INT 15
62808: PUSH
62809: LD_INT 16
62811: PUSH
62812: LD_INT 20
62814: PUSH
62815: LD_INT 21
62817: PUSH
62818: LD_INT 22
62820: PUSH
62821: LD_INT 23
62823: PUSH
62824: LD_INT 25
62826: PUSH
62827: LD_INT 26
62829: PUSH
62830: LD_INT 30
62832: PUSH
62833: LD_INT 31
62835: PUSH
62836: LD_INT 32
62838: PUSH
62839: LD_INT 33
62841: PUSH
62842: LD_INT 34
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 101
62868: PUSH
62869: LD_INT 102
62871: PUSH
62872: LD_INT 103
62874: PUSH
62875: LD_INT 106
62877: PUSH
62878: LD_INT 108
62880: PUSH
62881: LD_INT 112
62883: PUSH
62884: LD_INT 113
62886: PUSH
62887: LD_INT 114
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: ST_TO_ADDR
62904: GO 63499
62906: LD_INT 17
62908: DOUBLE
62909: EQUAL
62910: IFTRUE 62914
62912: GO 63126
62914: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
62915: LD_ADDR_VAR 0 1
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: LD_INT 4
62931: PUSH
62932: LD_INT 5
62934: PUSH
62935: LD_INT 6
62937: PUSH
62938: LD_INT 7
62940: PUSH
62941: LD_INT 8
62943: PUSH
62944: LD_INT 9
62946: PUSH
62947: LD_INT 10
62949: PUSH
62950: LD_INT 11
62952: PUSH
62953: LD_INT 12
62955: PUSH
62956: LD_INT 13
62958: PUSH
62959: LD_INT 14
62961: PUSH
62962: LD_INT 15
62964: PUSH
62965: LD_INT 16
62967: PUSH
62968: LD_INT 17
62970: PUSH
62971: LD_INT 18
62973: PUSH
62974: LD_INT 19
62976: PUSH
62977: LD_INT 20
62979: PUSH
62980: LD_INT 21
62982: PUSH
62983: LD_INT 22
62985: PUSH
62986: LD_INT 23
62988: PUSH
62989: LD_INT 24
62991: PUSH
62992: LD_INT 25
62994: PUSH
62995: LD_INT 26
62997: PUSH
62998: LD_INT 27
63000: PUSH
63001: LD_INT 28
63003: PUSH
63004: LD_INT 29
63006: PUSH
63007: LD_INT 30
63009: PUSH
63010: LD_INT 31
63012: PUSH
63013: LD_INT 32
63015: PUSH
63016: LD_INT 33
63018: PUSH
63019: LD_INT 34
63021: PUSH
63022: LD_INT 36
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 101
63064: PUSH
63065: LD_INT 102
63067: PUSH
63068: LD_INT 103
63070: PUSH
63071: LD_INT 104
63073: PUSH
63074: LD_INT 105
63076: PUSH
63077: LD_INT 106
63079: PUSH
63080: LD_INT 107
63082: PUSH
63083: LD_INT 108
63085: PUSH
63086: LD_INT 109
63088: PUSH
63089: LD_INT 110
63091: PUSH
63092: LD_INT 111
63094: PUSH
63095: LD_INT 112
63097: PUSH
63098: LD_INT 113
63100: PUSH
63101: LD_INT 114
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: ST_TO_ADDR
63124: GO 63499
63126: LD_INT 18
63128: DOUBLE
63129: EQUAL
63130: IFTRUE 63134
63132: GO 63270
63134: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
63135: LD_ADDR_VAR 0 1
63139: PUSH
63140: LD_INT 2
63142: PUSH
63143: LD_INT 4
63145: PUSH
63146: LD_INT 5
63148: PUSH
63149: LD_INT 7
63151: PUSH
63152: LD_INT 11
63154: PUSH
63155: LD_INT 12
63157: PUSH
63158: LD_INT 15
63160: PUSH
63161: LD_INT 16
63163: PUSH
63164: LD_INT 20
63166: PUSH
63167: LD_INT 21
63169: PUSH
63170: LD_INT 22
63172: PUSH
63173: LD_INT 23
63175: PUSH
63176: LD_INT 25
63178: PUSH
63179: LD_INT 26
63181: PUSH
63182: LD_INT 30
63184: PUSH
63185: LD_INT 31
63187: PUSH
63188: LD_INT 32
63190: PUSH
63191: LD_INT 33
63193: PUSH
63194: LD_INT 34
63196: PUSH
63197: LD_INT 35
63199: PUSH
63200: LD_INT 36
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 101
63228: PUSH
63229: LD_INT 102
63231: PUSH
63232: LD_INT 103
63234: PUSH
63235: LD_INT 106
63237: PUSH
63238: LD_INT 108
63240: PUSH
63241: LD_INT 112
63243: PUSH
63244: LD_INT 113
63246: PUSH
63247: LD_INT 114
63249: PUSH
63250: LD_INT 115
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: ST_TO_ADDR
63268: GO 63499
63270: LD_INT 19
63272: DOUBLE
63273: EQUAL
63274: IFTRUE 63278
63276: GO 63498
63278: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
63279: LD_ADDR_VAR 0 1
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: LD_INT 3
63292: PUSH
63293: LD_INT 4
63295: PUSH
63296: LD_INT 5
63298: PUSH
63299: LD_INT 6
63301: PUSH
63302: LD_INT 7
63304: PUSH
63305: LD_INT 8
63307: PUSH
63308: LD_INT 9
63310: PUSH
63311: LD_INT 10
63313: PUSH
63314: LD_INT 11
63316: PUSH
63317: LD_INT 12
63319: PUSH
63320: LD_INT 13
63322: PUSH
63323: LD_INT 14
63325: PUSH
63326: LD_INT 15
63328: PUSH
63329: LD_INT 16
63331: PUSH
63332: LD_INT 17
63334: PUSH
63335: LD_INT 18
63337: PUSH
63338: LD_INT 19
63340: PUSH
63341: LD_INT 20
63343: PUSH
63344: LD_INT 21
63346: PUSH
63347: LD_INT 22
63349: PUSH
63350: LD_INT 23
63352: PUSH
63353: LD_INT 24
63355: PUSH
63356: LD_INT 25
63358: PUSH
63359: LD_INT 26
63361: PUSH
63362: LD_INT 27
63364: PUSH
63365: LD_INT 28
63367: PUSH
63368: LD_INT 29
63370: PUSH
63371: LD_INT 30
63373: PUSH
63374: LD_INT 31
63376: PUSH
63377: LD_INT 32
63379: PUSH
63380: LD_INT 33
63382: PUSH
63383: LD_INT 34
63385: PUSH
63386: LD_INT 35
63388: PUSH
63389: LD_INT 36
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 101
63432: PUSH
63433: LD_INT 102
63435: PUSH
63436: LD_INT 103
63438: PUSH
63439: LD_INT 104
63441: PUSH
63442: LD_INT 105
63444: PUSH
63445: LD_INT 106
63447: PUSH
63448: LD_INT 107
63450: PUSH
63451: LD_INT 108
63453: PUSH
63454: LD_INT 109
63456: PUSH
63457: LD_INT 110
63459: PUSH
63460: LD_INT 111
63462: PUSH
63463: LD_INT 112
63465: PUSH
63466: LD_INT 113
63468: PUSH
63469: LD_INT 114
63471: PUSH
63472: LD_INT 115
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: ST_TO_ADDR
63496: GO 63499
63498: POP
// end else
63499: GO 63718
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
63501: LD_ADDR_VAR 0 1
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: LD_INT 2
63511: PUSH
63512: LD_INT 3
63514: PUSH
63515: LD_INT 4
63517: PUSH
63518: LD_INT 5
63520: PUSH
63521: LD_INT 6
63523: PUSH
63524: LD_INT 7
63526: PUSH
63527: LD_INT 8
63529: PUSH
63530: LD_INT 9
63532: PUSH
63533: LD_INT 10
63535: PUSH
63536: LD_INT 11
63538: PUSH
63539: LD_INT 12
63541: PUSH
63542: LD_INT 13
63544: PUSH
63545: LD_INT 14
63547: PUSH
63548: LD_INT 15
63550: PUSH
63551: LD_INT 16
63553: PUSH
63554: LD_INT 17
63556: PUSH
63557: LD_INT 18
63559: PUSH
63560: LD_INT 19
63562: PUSH
63563: LD_INT 20
63565: PUSH
63566: LD_INT 21
63568: PUSH
63569: LD_INT 22
63571: PUSH
63572: LD_INT 23
63574: PUSH
63575: LD_INT 24
63577: PUSH
63578: LD_INT 25
63580: PUSH
63581: LD_INT 26
63583: PUSH
63584: LD_INT 27
63586: PUSH
63587: LD_INT 28
63589: PUSH
63590: LD_INT 29
63592: PUSH
63593: LD_INT 30
63595: PUSH
63596: LD_INT 31
63598: PUSH
63599: LD_INT 32
63601: PUSH
63602: LD_INT 33
63604: PUSH
63605: LD_INT 34
63607: PUSH
63608: LD_INT 35
63610: PUSH
63611: LD_INT 36
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 101
63654: PUSH
63655: LD_INT 102
63657: PUSH
63658: LD_INT 103
63660: PUSH
63661: LD_INT 104
63663: PUSH
63664: LD_INT 105
63666: PUSH
63667: LD_INT 106
63669: PUSH
63670: LD_INT 107
63672: PUSH
63673: LD_INT 108
63675: PUSH
63676: LD_INT 109
63678: PUSH
63679: LD_INT 110
63681: PUSH
63682: LD_INT 111
63684: PUSH
63685: LD_INT 112
63687: PUSH
63688: LD_INT 113
63690: PUSH
63691: LD_INT 114
63693: PUSH
63694: LD_INT 115
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: ST_TO_ADDR
// if result then
63718: LD_VAR 0 1
63722: IFFALSE 64011
// begin normal :=  ;
63724: LD_ADDR_VAR 0 3
63728: PUSH
63729: LD_STRING 
63731: ST_TO_ADDR
// hardcore :=  ;
63732: LD_ADDR_VAR 0 4
63736: PUSH
63737: LD_STRING 
63739: ST_TO_ADDR
// for i = 1 to normalCounter do
63740: LD_ADDR_VAR 0 5
63744: PUSH
63745: DOUBLE
63746: LD_INT 1
63748: DEC
63749: ST_TO_ADDR
63750: LD_EXP 65
63754: PUSH
63755: FOR_TO
63756: IFFALSE 63857
// begin tmp := 0 ;
63758: LD_ADDR_VAR 0 2
63762: PUSH
63763: LD_STRING 0
63765: ST_TO_ADDR
// if result [ 1 ] then
63766: LD_VAR 0 1
63770: PUSH
63771: LD_INT 1
63773: ARRAY
63774: IFFALSE 63839
// if result [ 1 ] [ 1 ] = i then
63776: LD_VAR 0 1
63780: PUSH
63781: LD_INT 1
63783: ARRAY
63784: PUSH
63785: LD_INT 1
63787: ARRAY
63788: PUSH
63789: LD_VAR 0 5
63793: EQUAL
63794: IFFALSE 63839
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63796: LD_ADDR_VAR 0 1
63800: PUSH
63801: LD_VAR 0 1
63805: PPUSH
63806: LD_INT 1
63808: PPUSH
63809: LD_VAR 0 1
63813: PUSH
63814: LD_INT 1
63816: ARRAY
63817: PPUSH
63818: LD_INT 1
63820: PPUSH
63821: CALL_OW 3
63825: PPUSH
63826: CALL_OW 1
63830: ST_TO_ADDR
// tmp := 1 ;
63831: LD_ADDR_VAR 0 2
63835: PUSH
63836: LD_STRING 1
63838: ST_TO_ADDR
// end ; normal := normal & tmp ;
63839: LD_ADDR_VAR 0 3
63843: PUSH
63844: LD_VAR 0 3
63848: PUSH
63849: LD_VAR 0 2
63853: STR
63854: ST_TO_ADDR
// end ;
63855: GO 63755
63857: POP
63858: POP
// for i = 1 to hardcoreCounter do
63859: LD_ADDR_VAR 0 5
63863: PUSH
63864: DOUBLE
63865: LD_INT 1
63867: DEC
63868: ST_TO_ADDR
63869: LD_EXP 66
63873: PUSH
63874: FOR_TO
63875: IFFALSE 63980
// begin tmp := 0 ;
63877: LD_ADDR_VAR 0 2
63881: PUSH
63882: LD_STRING 0
63884: ST_TO_ADDR
// if result [ 2 ] then
63885: LD_VAR 0 1
63889: PUSH
63890: LD_INT 2
63892: ARRAY
63893: IFFALSE 63962
// if result [ 2 ] [ 1 ] = 100 + i then
63895: LD_VAR 0 1
63899: PUSH
63900: LD_INT 2
63902: ARRAY
63903: PUSH
63904: LD_INT 1
63906: ARRAY
63907: PUSH
63908: LD_INT 100
63910: PUSH
63911: LD_VAR 0 5
63915: PLUS
63916: EQUAL
63917: IFFALSE 63962
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63919: LD_ADDR_VAR 0 1
63923: PUSH
63924: LD_VAR 0 1
63928: PPUSH
63929: LD_INT 2
63931: PPUSH
63932: LD_VAR 0 1
63936: PUSH
63937: LD_INT 2
63939: ARRAY
63940: PPUSH
63941: LD_INT 1
63943: PPUSH
63944: CALL_OW 3
63948: PPUSH
63949: CALL_OW 1
63953: ST_TO_ADDR
// tmp := 1 ;
63954: LD_ADDR_VAR 0 2
63958: PUSH
63959: LD_STRING 1
63961: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63962: LD_ADDR_VAR 0 4
63966: PUSH
63967: LD_VAR 0 4
63971: PUSH
63972: LD_VAR 0 2
63976: STR
63977: ST_TO_ADDR
// end ;
63978: GO 63874
63980: POP
63981: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
63982: LD_STRING getStreamItemsFromMission("
63984: PUSH
63985: LD_VAR 0 3
63989: STR
63990: PUSH
63991: LD_STRING ","
63993: STR
63994: PUSH
63995: LD_VAR 0 4
63999: STR
64000: PUSH
64001: LD_STRING ")
64003: STR
64004: PPUSH
64005: CALL_OW 559
// end else
64009: GO 64018
// ToLua ( getStreamItemsFromMission("","") ) ;
64011: LD_STRING getStreamItemsFromMission("","")
64013: PPUSH
64014: CALL_OW 559
// end ;
64018: LD_VAR 0 1
64022: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64023: LD_EXP 64
64027: PUSH
64028: LD_EXP 69
64032: AND
64033: IFFALSE 64157
64035: GO 64037
64037: DISABLE
64038: LD_INT 0
64040: PPUSH
64041: PPUSH
// begin enable ;
64042: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64043: LD_ADDR_VAR 0 2
64047: PUSH
64048: LD_INT 22
64050: PUSH
64051: LD_OWVAR 2
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: LD_INT 34
64065: PUSH
64066: LD_INT 7
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 34
64075: PUSH
64076: LD_INT 45
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 34
64085: PUSH
64086: LD_INT 28
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 34
64095: PUSH
64096: LD_INT 47
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PPUSH
64114: CALL_OW 69
64118: ST_TO_ADDR
// if not tmp then
64119: LD_VAR 0 2
64123: NOT
64124: IFFALSE 64128
// exit ;
64126: GO 64157
// for i in tmp do
64128: LD_ADDR_VAR 0 1
64132: PUSH
64133: LD_VAR 0 2
64137: PUSH
64138: FOR_IN
64139: IFFALSE 64155
// begin SetLives ( i , 0 ) ;
64141: LD_VAR 0 1
64145: PPUSH
64146: LD_INT 0
64148: PPUSH
64149: CALL_OW 234
// end ;
64153: GO 64138
64155: POP
64156: POP
// end ;
64157: PPOPN 2
64159: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64160: LD_EXP 64
64164: PUSH
64165: LD_EXP 70
64169: AND
64170: IFFALSE 64254
64172: GO 64174
64174: DISABLE
64175: LD_INT 0
64177: PPUSH
64178: PPUSH
// begin enable ;
64179: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64180: LD_ADDR_VAR 0 2
64184: PUSH
64185: LD_INT 22
64187: PUSH
64188: LD_OWVAR 2
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 32
64199: PUSH
64200: LD_INT 3
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PPUSH
64211: CALL_OW 69
64215: ST_TO_ADDR
// if not tmp then
64216: LD_VAR 0 2
64220: NOT
64221: IFFALSE 64225
// exit ;
64223: GO 64254
// for i in tmp do
64225: LD_ADDR_VAR 0 1
64229: PUSH
64230: LD_VAR 0 2
64234: PUSH
64235: FOR_IN
64236: IFFALSE 64252
// begin SetLives ( i , 0 ) ;
64238: LD_VAR 0 1
64242: PPUSH
64243: LD_INT 0
64245: PPUSH
64246: CALL_OW 234
// end ;
64250: GO 64235
64252: POP
64253: POP
// end ;
64254: PPOPN 2
64256: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64257: LD_EXP 64
64261: PUSH
64262: LD_EXP 67
64266: AND
64267: IFFALSE 64360
64269: GO 64271
64271: DISABLE
64272: LD_INT 0
64274: PPUSH
// begin enable ;
64275: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64276: LD_ADDR_VAR 0 1
64280: PUSH
64281: LD_INT 22
64283: PUSH
64284: LD_OWVAR 2
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: LD_INT 25
64298: PUSH
64299: LD_INT 5
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 25
64308: PUSH
64309: LD_INT 9
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 25
64318: PUSH
64319: LD_INT 8
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PPUSH
64336: CALL_OW 69
64340: PUSH
64341: FOR_IN
64342: IFFALSE 64358
// begin SetClass ( i , 1 ) ;
64344: LD_VAR 0 1
64348: PPUSH
64349: LD_INT 1
64351: PPUSH
64352: CALL_OW 336
// end ;
64356: GO 64341
64358: POP
64359: POP
// end ;
64360: PPOPN 1
64362: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64363: LD_EXP 64
64367: PUSH
64368: LD_EXP 68
64372: AND
64373: PUSH
64374: LD_OWVAR 65
64378: PUSH
64379: LD_INT 7
64381: LESS
64382: AND
64383: IFFALSE 64397
64385: GO 64387
64387: DISABLE
// begin enable ;
64388: ENABLE
// game_speed := 7 ;
64389: LD_ADDR_OWVAR 65
64393: PUSH
64394: LD_INT 7
64396: ST_TO_ADDR
// end ;
64397: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64398: LD_EXP 64
64402: PUSH
64403: LD_EXP 71
64407: AND
64408: IFFALSE 64610
64410: GO 64412
64412: DISABLE
64413: LD_INT 0
64415: PPUSH
64416: PPUSH
64417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64418: LD_ADDR_VAR 0 3
64422: PUSH
64423: LD_INT 81
64425: PUSH
64426: LD_OWVAR 2
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 21
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PPUSH
64449: CALL_OW 69
64453: ST_TO_ADDR
// if not tmp then
64454: LD_VAR 0 3
64458: NOT
64459: IFFALSE 64463
// exit ;
64461: GO 64610
// if tmp > 5 then
64463: LD_VAR 0 3
64467: PUSH
64468: LD_INT 5
64470: GREATER
64471: IFFALSE 64483
// k := 5 else
64473: LD_ADDR_VAR 0 2
64477: PUSH
64478: LD_INT 5
64480: ST_TO_ADDR
64481: GO 64493
// k := tmp ;
64483: LD_ADDR_VAR 0 2
64487: PUSH
64488: LD_VAR 0 3
64492: ST_TO_ADDR
// for i := 1 to k do
64493: LD_ADDR_VAR 0 1
64497: PUSH
64498: DOUBLE
64499: LD_INT 1
64501: DEC
64502: ST_TO_ADDR
64503: LD_VAR 0 2
64507: PUSH
64508: FOR_TO
64509: IFFALSE 64608
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64511: LD_VAR 0 3
64515: PUSH
64516: LD_VAR 0 1
64520: ARRAY
64521: PPUSH
64522: LD_VAR 0 1
64526: PUSH
64527: LD_INT 4
64529: MOD
64530: PUSH
64531: LD_INT 1
64533: PLUS
64534: PPUSH
64535: CALL_OW 259
64539: PUSH
64540: LD_INT 10
64542: LESS
64543: IFFALSE 64606
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64545: LD_VAR 0 3
64549: PUSH
64550: LD_VAR 0 1
64554: ARRAY
64555: PPUSH
64556: LD_VAR 0 1
64560: PUSH
64561: LD_INT 4
64563: MOD
64564: PUSH
64565: LD_INT 1
64567: PLUS
64568: PPUSH
64569: LD_VAR 0 3
64573: PUSH
64574: LD_VAR 0 1
64578: ARRAY
64579: PPUSH
64580: LD_VAR 0 1
64584: PUSH
64585: LD_INT 4
64587: MOD
64588: PUSH
64589: LD_INT 1
64591: PLUS
64592: PPUSH
64593: CALL_OW 259
64597: PUSH
64598: LD_INT 1
64600: PLUS
64601: PPUSH
64602: CALL_OW 237
64606: GO 64508
64608: POP
64609: POP
// end ;
64610: PPOPN 3
64612: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64613: LD_EXP 64
64617: PUSH
64618: LD_EXP 72
64622: AND
64623: IFFALSE 64643
64625: GO 64627
64627: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64628: LD_INT 4
64630: PPUSH
64631: LD_OWVAR 2
64635: PPUSH
64636: LD_INT 0
64638: PPUSH
64639: CALL_OW 324
64643: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64644: LD_EXP 64
64648: PUSH
64649: LD_EXP 101
64653: AND
64654: IFFALSE 64674
64656: GO 64658
64658: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64659: LD_INT 19
64661: PPUSH
64662: LD_OWVAR 2
64666: PPUSH
64667: LD_INT 0
64669: PPUSH
64670: CALL_OW 324
64674: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64675: LD_EXP 64
64679: PUSH
64680: LD_EXP 73
64684: AND
64685: IFFALSE 64787
64687: GO 64689
64689: DISABLE
64690: LD_INT 0
64692: PPUSH
64693: PPUSH
// begin enable ;
64694: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64695: LD_ADDR_VAR 0 2
64699: PUSH
64700: LD_INT 22
64702: PUSH
64703: LD_OWVAR 2
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: LD_INT 34
64717: PUSH
64718: LD_INT 11
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 34
64727: PUSH
64728: LD_INT 30
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: LIST
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PPUSH
64744: CALL_OW 69
64748: ST_TO_ADDR
// if not tmp then
64749: LD_VAR 0 2
64753: NOT
64754: IFFALSE 64758
// exit ;
64756: GO 64787
// for i in tmp do
64758: LD_ADDR_VAR 0 1
64762: PUSH
64763: LD_VAR 0 2
64767: PUSH
64768: FOR_IN
64769: IFFALSE 64785
// begin SetLives ( i , 0 ) ;
64771: LD_VAR 0 1
64775: PPUSH
64776: LD_INT 0
64778: PPUSH
64779: CALL_OW 234
// end ;
64783: GO 64768
64785: POP
64786: POP
// end ;
64787: PPOPN 2
64789: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64790: LD_EXP 64
64794: PUSH
64795: LD_EXP 74
64799: AND
64800: IFFALSE 64820
64802: GO 64804
64804: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64805: LD_INT 32
64807: PPUSH
64808: LD_OWVAR 2
64812: PPUSH
64813: LD_INT 0
64815: PPUSH
64816: CALL_OW 324
64820: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64821: LD_EXP 64
64825: PUSH
64826: LD_EXP 75
64830: AND
64831: IFFALSE 65012
64833: GO 64835
64835: DISABLE
64836: LD_INT 0
64838: PPUSH
64839: PPUSH
64840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64841: LD_ADDR_VAR 0 2
64845: PUSH
64846: LD_INT 22
64848: PUSH
64849: LD_OWVAR 2
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 33
64860: PUSH
64861: LD_INT 3
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PPUSH
64872: CALL_OW 69
64876: ST_TO_ADDR
// if not tmp then
64877: LD_VAR 0 2
64881: NOT
64882: IFFALSE 64886
// exit ;
64884: GO 65012
// side := 0 ;
64886: LD_ADDR_VAR 0 3
64890: PUSH
64891: LD_INT 0
64893: ST_TO_ADDR
// for i := 1 to 8 do
64894: LD_ADDR_VAR 0 1
64898: PUSH
64899: DOUBLE
64900: LD_INT 1
64902: DEC
64903: ST_TO_ADDR
64904: LD_INT 8
64906: PUSH
64907: FOR_TO
64908: IFFALSE 64956
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64910: LD_OWVAR 2
64914: PUSH
64915: LD_VAR 0 1
64919: NONEQUAL
64920: PUSH
64921: LD_OWVAR 2
64925: PPUSH
64926: LD_VAR 0 1
64930: PPUSH
64931: CALL_OW 81
64935: PUSH
64936: LD_INT 2
64938: EQUAL
64939: AND
64940: IFFALSE 64954
// begin side := i ;
64942: LD_ADDR_VAR 0 3
64946: PUSH
64947: LD_VAR 0 1
64951: ST_TO_ADDR
// break ;
64952: GO 64956
// end ;
64954: GO 64907
64956: POP
64957: POP
// if not side then
64958: LD_VAR 0 3
64962: NOT
64963: IFFALSE 64967
// exit ;
64965: GO 65012
// for i := 1 to tmp do
64967: LD_ADDR_VAR 0 1
64971: PUSH
64972: DOUBLE
64973: LD_INT 1
64975: DEC
64976: ST_TO_ADDR
64977: LD_VAR 0 2
64981: PUSH
64982: FOR_TO
64983: IFFALSE 65010
// if Prob ( 60 ) then
64985: LD_INT 60
64987: PPUSH
64988: CALL_OW 13
64992: IFFALSE 65008
// SetSide ( i , side ) ;
64994: LD_VAR 0 1
64998: PPUSH
64999: LD_VAR 0 3
65003: PPUSH
65004: CALL_OW 235
65008: GO 64982
65010: POP
65011: POP
// end ;
65012: PPOPN 3
65014: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65015: LD_EXP 64
65019: PUSH
65020: LD_EXP 77
65024: AND
65025: IFFALSE 65144
65027: GO 65029
65029: DISABLE
65030: LD_INT 0
65032: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65033: LD_ADDR_VAR 0 1
65037: PUSH
65038: LD_INT 22
65040: PUSH
65041: LD_OWVAR 2
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 21
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 3
65062: PUSH
65063: LD_INT 23
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: LIST
65081: PPUSH
65082: CALL_OW 69
65086: PUSH
65087: FOR_IN
65088: IFFALSE 65142
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65090: LD_VAR 0 1
65094: PPUSH
65095: CALL_OW 257
65099: PUSH
65100: LD_INT 1
65102: PUSH
65103: LD_INT 2
65105: PUSH
65106: LD_INT 3
65108: PUSH
65109: LD_INT 4
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: IN
65118: IFFALSE 65140
// SetClass ( un , rand ( 1 , 4 ) ) ;
65120: LD_VAR 0 1
65124: PPUSH
65125: LD_INT 1
65127: PPUSH
65128: LD_INT 4
65130: PPUSH
65131: CALL_OW 12
65135: PPUSH
65136: CALL_OW 336
65140: GO 65087
65142: POP
65143: POP
// end ;
65144: PPOPN 1
65146: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65147: LD_EXP 64
65151: PUSH
65152: LD_EXP 76
65156: AND
65157: IFFALSE 65236
65159: GO 65161
65161: DISABLE
65162: LD_INT 0
65164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65165: LD_ADDR_VAR 0 1
65169: PUSH
65170: LD_INT 22
65172: PUSH
65173: LD_OWVAR 2
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 21
65184: PUSH
65185: LD_INT 3
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PPUSH
65196: CALL_OW 69
65200: ST_TO_ADDR
// if not tmp then
65201: LD_VAR 0 1
65205: NOT
65206: IFFALSE 65210
// exit ;
65208: GO 65236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65210: LD_VAR 0 1
65214: PUSH
65215: LD_INT 1
65217: PPUSH
65218: LD_VAR 0 1
65222: PPUSH
65223: CALL_OW 12
65227: ARRAY
65228: PPUSH
65229: LD_INT 100
65231: PPUSH
65232: CALL_OW 234
// end ;
65236: PPOPN 1
65238: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65239: LD_EXP 64
65243: PUSH
65244: LD_EXP 78
65248: AND
65249: IFFALSE 65347
65251: GO 65253
65253: DISABLE
65254: LD_INT 0
65256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65257: LD_ADDR_VAR 0 1
65261: PUSH
65262: LD_INT 22
65264: PUSH
65265: LD_OWVAR 2
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 21
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PPUSH
65288: CALL_OW 69
65292: ST_TO_ADDR
// if not tmp then
65293: LD_VAR 0 1
65297: NOT
65298: IFFALSE 65302
// exit ;
65300: GO 65347
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65302: LD_VAR 0 1
65306: PUSH
65307: LD_INT 1
65309: PPUSH
65310: LD_VAR 0 1
65314: PPUSH
65315: CALL_OW 12
65319: ARRAY
65320: PPUSH
65321: LD_INT 1
65323: PPUSH
65324: LD_INT 4
65326: PPUSH
65327: CALL_OW 12
65331: PPUSH
65332: LD_INT 3000
65334: PPUSH
65335: LD_INT 9000
65337: PPUSH
65338: CALL_OW 12
65342: PPUSH
65343: CALL_OW 492
// end ;
65347: PPOPN 1
65349: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65350: LD_EXP 64
65354: PUSH
65355: LD_EXP 79
65359: AND
65360: IFFALSE 65380
65362: GO 65364
65364: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65365: LD_INT 1
65367: PPUSH
65368: LD_OWVAR 2
65372: PPUSH
65373: LD_INT 0
65375: PPUSH
65376: CALL_OW 324
65380: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65381: LD_EXP 64
65385: PUSH
65386: LD_EXP 80
65390: AND
65391: IFFALSE 65474
65393: GO 65395
65395: DISABLE
65396: LD_INT 0
65398: PPUSH
65399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65400: LD_ADDR_VAR 0 2
65404: PUSH
65405: LD_INT 22
65407: PUSH
65408: LD_OWVAR 2
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 21
65419: PUSH
65420: LD_INT 3
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PPUSH
65431: CALL_OW 69
65435: ST_TO_ADDR
// if not tmp then
65436: LD_VAR 0 2
65440: NOT
65441: IFFALSE 65445
// exit ;
65443: GO 65474
// for i in tmp do
65445: LD_ADDR_VAR 0 1
65449: PUSH
65450: LD_VAR 0 2
65454: PUSH
65455: FOR_IN
65456: IFFALSE 65472
// SetBLevel ( i , 10 ) ;
65458: LD_VAR 0 1
65462: PPUSH
65463: LD_INT 10
65465: PPUSH
65466: CALL_OW 241
65470: GO 65455
65472: POP
65473: POP
// end ;
65474: PPOPN 2
65476: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65477: LD_EXP 64
65481: PUSH
65482: LD_EXP 81
65486: AND
65487: IFFALSE 65598
65489: GO 65491
65491: DISABLE
65492: LD_INT 0
65494: PPUSH
65495: PPUSH
65496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65497: LD_ADDR_VAR 0 3
65501: PUSH
65502: LD_INT 22
65504: PUSH
65505: LD_OWVAR 2
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 25
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PPUSH
65528: CALL_OW 69
65532: ST_TO_ADDR
// if not tmp then
65533: LD_VAR 0 3
65537: NOT
65538: IFFALSE 65542
// exit ;
65540: GO 65598
// un := tmp [ rand ( 1 , tmp ) ] ;
65542: LD_ADDR_VAR 0 2
65546: PUSH
65547: LD_VAR 0 3
65551: PUSH
65552: LD_INT 1
65554: PPUSH
65555: LD_VAR 0 3
65559: PPUSH
65560: CALL_OW 12
65564: ARRAY
65565: ST_TO_ADDR
// if Crawls ( un ) then
65566: LD_VAR 0 2
65570: PPUSH
65571: CALL_OW 318
65575: IFFALSE 65586
// ComWalk ( un ) ;
65577: LD_VAR 0 2
65581: PPUSH
65582: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65586: LD_VAR 0 2
65590: PPUSH
65591: LD_INT 5
65593: PPUSH
65594: CALL_OW 336
// end ;
65598: PPOPN 3
65600: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
65601: LD_EXP 64
65605: PUSH
65606: LD_EXP 82
65610: AND
65611: PUSH
65612: LD_OWVAR 67
65616: PUSH
65617: LD_INT 3
65619: LESS
65620: AND
65621: IFFALSE 65640
65623: GO 65625
65625: DISABLE
// Difficulty := Difficulty + 1 ;
65626: LD_ADDR_OWVAR 67
65630: PUSH
65631: LD_OWVAR 67
65635: PUSH
65636: LD_INT 1
65638: PLUS
65639: ST_TO_ADDR
65640: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65641: LD_EXP 64
65645: PUSH
65646: LD_EXP 83
65650: AND
65651: IFFALSE 65754
65653: GO 65655
65655: DISABLE
65656: LD_INT 0
65658: PPUSH
// begin for i := 1 to 5 do
65659: LD_ADDR_VAR 0 1
65663: PUSH
65664: DOUBLE
65665: LD_INT 1
65667: DEC
65668: ST_TO_ADDR
65669: LD_INT 5
65671: PUSH
65672: FOR_TO
65673: IFFALSE 65752
// begin uc_nation := nation_nature ;
65675: LD_ADDR_OWVAR 21
65679: PUSH
65680: LD_INT 0
65682: ST_TO_ADDR
// uc_side := 0 ;
65683: LD_ADDR_OWVAR 20
65687: PUSH
65688: LD_INT 0
65690: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65691: LD_ADDR_OWVAR 29
65695: PUSH
65696: LD_INT 12
65698: PUSH
65699: LD_INT 12
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: ST_TO_ADDR
// hc_agressivity := 20 ;
65706: LD_ADDR_OWVAR 35
65710: PUSH
65711: LD_INT 20
65713: ST_TO_ADDR
// hc_class := class_tiger ;
65714: LD_ADDR_OWVAR 28
65718: PUSH
65719: LD_INT 14
65721: ST_TO_ADDR
// hc_gallery :=  ;
65722: LD_ADDR_OWVAR 33
65726: PUSH
65727: LD_STRING 
65729: ST_TO_ADDR
// hc_name :=  ;
65730: LD_ADDR_OWVAR 26
65734: PUSH
65735: LD_STRING 
65737: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65738: CALL_OW 44
65742: PPUSH
65743: LD_INT 0
65745: PPUSH
65746: CALL_OW 51
// end ;
65750: GO 65672
65752: POP
65753: POP
// end ;
65754: PPOPN 1
65756: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65757: LD_EXP 64
65761: PUSH
65762: LD_EXP 84
65766: AND
65767: IFFALSE 65776
65769: GO 65771
65771: DISABLE
// StreamSibBomb ;
65772: CALL 65777 0 0
65776: END
// export function StreamSibBomb ; var i , x , y ; begin
65777: LD_INT 0
65779: PPUSH
65780: PPUSH
65781: PPUSH
65782: PPUSH
// result := false ;
65783: LD_ADDR_VAR 0 1
65787: PUSH
65788: LD_INT 0
65790: ST_TO_ADDR
// for i := 1 to 16 do
65791: LD_ADDR_VAR 0 2
65795: PUSH
65796: DOUBLE
65797: LD_INT 1
65799: DEC
65800: ST_TO_ADDR
65801: LD_INT 16
65803: PUSH
65804: FOR_TO
65805: IFFALSE 66004
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65807: LD_ADDR_VAR 0 3
65811: PUSH
65812: LD_INT 10
65814: PUSH
65815: LD_INT 20
65817: PUSH
65818: LD_INT 30
65820: PUSH
65821: LD_INT 40
65823: PUSH
65824: LD_INT 50
65826: PUSH
65827: LD_INT 60
65829: PUSH
65830: LD_INT 70
65832: PUSH
65833: LD_INT 80
65835: PUSH
65836: LD_INT 90
65838: PUSH
65839: LD_INT 100
65841: PUSH
65842: LD_INT 110
65844: PUSH
65845: LD_INT 120
65847: PUSH
65848: LD_INT 130
65850: PUSH
65851: LD_INT 140
65853: PUSH
65854: LD_INT 150
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 1
65876: PPUSH
65877: LD_INT 15
65879: PPUSH
65880: CALL_OW 12
65884: ARRAY
65885: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65886: LD_ADDR_VAR 0 4
65890: PUSH
65891: LD_INT 10
65893: PUSH
65894: LD_INT 20
65896: PUSH
65897: LD_INT 30
65899: PUSH
65900: LD_INT 40
65902: PUSH
65903: LD_INT 50
65905: PUSH
65906: LD_INT 60
65908: PUSH
65909: LD_INT 70
65911: PUSH
65912: LD_INT 80
65914: PUSH
65915: LD_INT 90
65917: PUSH
65918: LD_INT 100
65920: PUSH
65921: LD_INT 110
65923: PUSH
65924: LD_INT 120
65926: PUSH
65927: LD_INT 130
65929: PUSH
65930: LD_INT 140
65932: PUSH
65933: LD_INT 150
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: PPUSH
65956: LD_INT 15
65958: PPUSH
65959: CALL_OW 12
65963: ARRAY
65964: ST_TO_ADDR
// if ValidHex ( x , y ) then
65965: LD_VAR 0 3
65969: PPUSH
65970: LD_VAR 0 4
65974: PPUSH
65975: CALL_OW 488
65979: IFFALSE 66002
// begin result := [ x , y ] ;
65981: LD_ADDR_VAR 0 1
65985: PUSH
65986: LD_VAR 0 3
65990: PUSH
65991: LD_VAR 0 4
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: ST_TO_ADDR
// break ;
66000: GO 66004
// end ; end ;
66002: GO 65804
66004: POP
66005: POP
// if result then
66006: LD_VAR 0 1
66010: IFFALSE 66070
// begin ToLua ( playSibBomb() ) ;
66012: LD_STRING playSibBomb()
66014: PPUSH
66015: CALL_OW 559
// wait ( 0 0$14 ) ;
66019: LD_INT 490
66021: PPUSH
66022: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66026: LD_VAR 0 1
66030: PUSH
66031: LD_INT 1
66033: ARRAY
66034: PPUSH
66035: LD_VAR 0 1
66039: PUSH
66040: LD_INT 2
66042: ARRAY
66043: PPUSH
66044: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66048: LD_VAR 0 1
66052: PUSH
66053: LD_INT 1
66055: ARRAY
66056: PPUSH
66057: LD_VAR 0 1
66061: PUSH
66062: LD_INT 2
66064: ARRAY
66065: PPUSH
66066: CALL_OW 429
// end ; end ;
66070: LD_VAR 0 1
66074: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66075: LD_EXP 64
66079: PUSH
66080: LD_EXP 86
66084: AND
66085: IFFALSE 66097
66087: GO 66089
66089: DISABLE
// YouLost (  ) ;
66090: LD_STRING 
66092: PPUSH
66093: CALL_OW 104
66097: END
// every 0 0$1 trigger StreamModeActive and sFog do
66098: LD_EXP 64
66102: PUSH
66103: LD_EXP 85
66107: AND
66108: IFFALSE 66122
66110: GO 66112
66112: DISABLE
// FogOff ( your_side ) ;
66113: LD_OWVAR 2
66117: PPUSH
66118: CALL_OW 344
66122: END
// every 0 0$1 trigger StreamModeActive and sSun do
66123: LD_EXP 64
66127: PUSH
66128: LD_EXP 87
66132: AND
66133: IFFALSE 66161
66135: GO 66137
66137: DISABLE
// begin solar_recharge_percent := 0 ;
66138: LD_ADDR_OWVAR 79
66142: PUSH
66143: LD_INT 0
66145: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66146: LD_INT 10500
66148: PPUSH
66149: CALL_OW 67
// solar_recharge_percent := 100 ;
66153: LD_ADDR_OWVAR 79
66157: PUSH
66158: LD_INT 100
66160: ST_TO_ADDR
// end ;
66161: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66162: LD_EXP 64
66166: PUSH
66167: LD_EXP 88
66171: AND
66172: IFFALSE 66411
66174: GO 66176
66176: DISABLE
66177: LD_INT 0
66179: PPUSH
66180: PPUSH
66181: PPUSH
// begin tmp := [ ] ;
66182: LD_ADDR_VAR 0 3
66186: PUSH
66187: EMPTY
66188: ST_TO_ADDR
// for i := 1 to 6 do
66189: LD_ADDR_VAR 0 1
66193: PUSH
66194: DOUBLE
66195: LD_INT 1
66197: DEC
66198: ST_TO_ADDR
66199: LD_INT 6
66201: PUSH
66202: FOR_TO
66203: IFFALSE 66308
// begin uc_nation := nation_nature ;
66205: LD_ADDR_OWVAR 21
66209: PUSH
66210: LD_INT 0
66212: ST_TO_ADDR
// uc_side := 0 ;
66213: LD_ADDR_OWVAR 20
66217: PUSH
66218: LD_INT 0
66220: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66221: LD_ADDR_OWVAR 29
66225: PUSH
66226: LD_INT 12
66228: PUSH
66229: LD_INT 12
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: ST_TO_ADDR
// hc_agressivity := 20 ;
66236: LD_ADDR_OWVAR 35
66240: PUSH
66241: LD_INT 20
66243: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66244: LD_ADDR_OWVAR 28
66248: PUSH
66249: LD_INT 17
66251: ST_TO_ADDR
// hc_gallery :=  ;
66252: LD_ADDR_OWVAR 33
66256: PUSH
66257: LD_STRING 
66259: ST_TO_ADDR
// hc_name :=  ;
66260: LD_ADDR_OWVAR 26
66264: PUSH
66265: LD_STRING 
66267: ST_TO_ADDR
// un := CreateHuman ;
66268: LD_ADDR_VAR 0 2
66272: PUSH
66273: CALL_OW 44
66277: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66278: LD_VAR 0 2
66282: PPUSH
66283: LD_INT 1
66285: PPUSH
66286: CALL_OW 51
// tmp := tmp ^ un ;
66290: LD_ADDR_VAR 0 3
66294: PUSH
66295: LD_VAR 0 3
66299: PUSH
66300: LD_VAR 0 2
66304: ADD
66305: ST_TO_ADDR
// end ;
66306: GO 66202
66308: POP
66309: POP
// repeat wait ( 0 0$1 ) ;
66310: LD_INT 35
66312: PPUSH
66313: CALL_OW 67
// for un in tmp do
66317: LD_ADDR_VAR 0 2
66321: PUSH
66322: LD_VAR 0 3
66326: PUSH
66327: FOR_IN
66328: IFFALSE 66402
// begin if IsDead ( un ) then
66330: LD_VAR 0 2
66334: PPUSH
66335: CALL_OW 301
66339: IFFALSE 66359
// begin tmp := tmp diff un ;
66341: LD_ADDR_VAR 0 3
66345: PUSH
66346: LD_VAR 0 3
66350: PUSH
66351: LD_VAR 0 2
66355: DIFF
66356: ST_TO_ADDR
// continue ;
66357: GO 66327
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66359: LD_VAR 0 2
66363: PPUSH
66364: LD_INT 3
66366: PUSH
66367: LD_INT 22
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PPUSH
66381: CALL_OW 69
66385: PPUSH
66386: LD_VAR 0 2
66390: PPUSH
66391: CALL_OW 74
66395: PPUSH
66396: CALL_OW 115
// end ;
66400: GO 66327
66402: POP
66403: POP
// until not tmp ;
66404: LD_VAR 0 3
66408: NOT
66409: IFFALSE 66310
// end ;
66411: PPOPN 3
66413: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66414: LD_EXP 64
66418: PUSH
66419: LD_EXP 89
66423: AND
66424: IFFALSE 66478
66426: GO 66428
66428: DISABLE
// begin ToLua ( displayTroll(); ) ;
66429: LD_STRING displayTroll();
66431: PPUSH
66432: CALL_OW 559
// wait ( 3 3$00 ) ;
66436: LD_INT 6300
66438: PPUSH
66439: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66443: LD_STRING hideTroll();
66445: PPUSH
66446: CALL_OW 559
// wait ( 1 1$00 ) ;
66450: LD_INT 2100
66452: PPUSH
66453: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66457: LD_STRING displayTroll();
66459: PPUSH
66460: CALL_OW 559
// wait ( 1 1$00 ) ;
66464: LD_INT 2100
66466: PPUSH
66467: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66471: LD_STRING hideTroll();
66473: PPUSH
66474: CALL_OW 559
// end ;
66478: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66479: LD_EXP 64
66483: PUSH
66484: LD_EXP 90
66488: AND
66489: IFFALSE 66552
66491: GO 66493
66493: DISABLE
66494: LD_INT 0
66496: PPUSH
// begin p := 0 ;
66497: LD_ADDR_VAR 0 1
66501: PUSH
66502: LD_INT 0
66504: ST_TO_ADDR
// repeat game_speed := 1 ;
66505: LD_ADDR_OWVAR 65
66509: PUSH
66510: LD_INT 1
66512: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66513: LD_INT 35
66515: PPUSH
66516: CALL_OW 67
// p := p + 1 ;
66520: LD_ADDR_VAR 0 1
66524: PUSH
66525: LD_VAR 0 1
66529: PUSH
66530: LD_INT 1
66532: PLUS
66533: ST_TO_ADDR
// until p >= 60 ;
66534: LD_VAR 0 1
66538: PUSH
66539: LD_INT 60
66541: GREATEREQUAL
66542: IFFALSE 66505
// game_speed := 4 ;
66544: LD_ADDR_OWVAR 65
66548: PUSH
66549: LD_INT 4
66551: ST_TO_ADDR
// end ;
66552: PPOPN 1
66554: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66555: LD_EXP 64
66559: PUSH
66560: LD_EXP 91
66564: AND
66565: IFFALSE 66711
66567: GO 66569
66569: DISABLE
66570: LD_INT 0
66572: PPUSH
66573: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66574: LD_ADDR_VAR 0 1
66578: PUSH
66579: LD_INT 22
66581: PUSH
66582: LD_OWVAR 2
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 2
66593: PUSH
66594: LD_INT 30
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 30
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: LIST
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PPUSH
66623: CALL_OW 69
66627: ST_TO_ADDR
// if not depot then
66628: LD_VAR 0 1
66632: NOT
66633: IFFALSE 66637
// exit ;
66635: GO 66711
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66637: LD_ADDR_VAR 0 2
66641: PUSH
66642: LD_VAR 0 1
66646: PUSH
66647: LD_INT 1
66649: PPUSH
66650: LD_VAR 0 1
66654: PPUSH
66655: CALL_OW 12
66659: ARRAY
66660: PPUSH
66661: CALL_OW 274
66665: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66666: LD_VAR 0 2
66670: PPUSH
66671: LD_INT 1
66673: PPUSH
66674: LD_INT 0
66676: PPUSH
66677: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66681: LD_VAR 0 2
66685: PPUSH
66686: LD_INT 2
66688: PPUSH
66689: LD_INT 0
66691: PPUSH
66692: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66696: LD_VAR 0 2
66700: PPUSH
66701: LD_INT 3
66703: PPUSH
66704: LD_INT 0
66706: PPUSH
66707: CALL_OW 277
// end ;
66711: PPOPN 2
66713: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66714: LD_EXP 64
66718: PUSH
66719: LD_EXP 92
66723: AND
66724: IFFALSE 66821
66726: GO 66728
66728: DISABLE
66729: LD_INT 0
66731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66732: LD_ADDR_VAR 0 1
66736: PUSH
66737: LD_INT 22
66739: PUSH
66740: LD_OWVAR 2
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 21
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 3
66761: PUSH
66762: LD_INT 23
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: LIST
66780: PPUSH
66781: CALL_OW 69
66785: ST_TO_ADDR
// if not tmp then
66786: LD_VAR 0 1
66790: NOT
66791: IFFALSE 66795
// exit ;
66793: GO 66821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66795: LD_VAR 0 1
66799: PUSH
66800: LD_INT 1
66802: PPUSH
66803: LD_VAR 0 1
66807: PPUSH
66808: CALL_OW 12
66812: ARRAY
66813: PPUSH
66814: LD_INT 200
66816: PPUSH
66817: CALL_OW 234
// end ;
66821: PPOPN 1
66823: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66824: LD_EXP 64
66828: PUSH
66829: LD_EXP 93
66833: AND
66834: IFFALSE 66913
66836: GO 66838
66838: DISABLE
66839: LD_INT 0
66841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66842: LD_ADDR_VAR 0 1
66846: PUSH
66847: LD_INT 22
66849: PUSH
66850: LD_OWVAR 2
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 21
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PPUSH
66873: CALL_OW 69
66877: ST_TO_ADDR
// if not tmp then
66878: LD_VAR 0 1
66882: NOT
66883: IFFALSE 66887
// exit ;
66885: GO 66913
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66887: LD_VAR 0 1
66891: PUSH
66892: LD_INT 1
66894: PPUSH
66895: LD_VAR 0 1
66899: PPUSH
66900: CALL_OW 12
66904: ARRAY
66905: PPUSH
66906: LD_INT 60
66908: PPUSH
66909: CALL_OW 234
// end ;
66913: PPOPN 1
66915: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66916: LD_EXP 64
66920: PUSH
66921: LD_EXP 94
66925: AND
66926: IFFALSE 67025
66928: GO 66930
66930: DISABLE
66931: LD_INT 0
66933: PPUSH
66934: PPUSH
// begin enable ;
66935: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66936: LD_ADDR_VAR 0 1
66940: PUSH
66941: LD_INT 22
66943: PUSH
66944: LD_OWVAR 2
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 61
66955: PUSH
66956: EMPTY
66957: LIST
66958: PUSH
66959: LD_INT 33
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: LIST
66973: PPUSH
66974: CALL_OW 69
66978: ST_TO_ADDR
// if not tmp then
66979: LD_VAR 0 1
66983: NOT
66984: IFFALSE 66988
// exit ;
66986: GO 67025
// for i in tmp do
66988: LD_ADDR_VAR 0 2
66992: PUSH
66993: LD_VAR 0 1
66997: PUSH
66998: FOR_IN
66999: IFFALSE 67023
// if IsControledBy ( i ) then
67001: LD_VAR 0 2
67005: PPUSH
67006: CALL_OW 312
67010: IFFALSE 67021
// ComUnlink ( i ) ;
67012: LD_VAR 0 2
67016: PPUSH
67017: CALL_OW 136
67021: GO 66998
67023: POP
67024: POP
// end ;
67025: PPOPN 2
67027: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67028: LD_EXP 64
67032: PUSH
67033: LD_EXP 95
67037: AND
67038: IFFALSE 67178
67040: GO 67042
67042: DISABLE
67043: LD_INT 0
67045: PPUSH
67046: PPUSH
// begin ToLua ( displayPowell(); ) ;
67047: LD_STRING displayPowell();
67049: PPUSH
67050: CALL_OW 559
// uc_side := 0 ;
67054: LD_ADDR_OWVAR 20
67058: PUSH
67059: LD_INT 0
67061: ST_TO_ADDR
// uc_nation := 2 ;
67062: LD_ADDR_OWVAR 21
67066: PUSH
67067: LD_INT 2
67069: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67070: LD_ADDR_OWVAR 37
67074: PUSH
67075: LD_INT 14
67077: ST_TO_ADDR
// vc_engine := engine_siberite ;
67078: LD_ADDR_OWVAR 39
67082: PUSH
67083: LD_INT 3
67085: ST_TO_ADDR
// vc_control := control_apeman ;
67086: LD_ADDR_OWVAR 38
67090: PUSH
67091: LD_INT 5
67093: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67094: LD_ADDR_OWVAR 40
67098: PUSH
67099: LD_INT 29
67101: ST_TO_ADDR
// un := CreateVehicle ;
67102: LD_ADDR_VAR 0 2
67106: PUSH
67107: CALL_OW 45
67111: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67112: LD_VAR 0 2
67116: PPUSH
67117: LD_INT 1
67119: PPUSH
67120: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67124: LD_INT 35
67126: PPUSH
67127: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67131: LD_VAR 0 2
67135: PPUSH
67136: LD_INT 22
67138: PUSH
67139: LD_OWVAR 2
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PPUSH
67148: CALL_OW 69
67152: PPUSH
67153: LD_VAR 0 2
67157: PPUSH
67158: CALL_OW 74
67162: PPUSH
67163: CALL_OW 115
// until IsDead ( un ) ;
67167: LD_VAR 0 2
67171: PPUSH
67172: CALL_OW 301
67176: IFFALSE 67124
// end ;
67178: PPOPN 2
67180: END
// every 0 0$1 trigger StreamModeActive and sStu do
67181: LD_EXP 64
67185: PUSH
67186: LD_EXP 103
67190: AND
67191: IFFALSE 67207
67193: GO 67195
67195: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67196: LD_STRING displayStucuk();
67198: PPUSH
67199: CALL_OW 559
// ResetFog ;
67203: CALL_OW 335
// end ;
67207: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67208: LD_EXP 64
67212: PUSH
67213: LD_EXP 96
67217: AND
67218: IFFALSE 67359
67220: GO 67222
67222: DISABLE
67223: LD_INT 0
67225: PPUSH
67226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67227: LD_ADDR_VAR 0 2
67231: PUSH
67232: LD_INT 22
67234: PUSH
67235: LD_OWVAR 2
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 21
67246: PUSH
67247: LD_INT 1
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PPUSH
67258: CALL_OW 69
67262: ST_TO_ADDR
// if not tmp then
67263: LD_VAR 0 2
67267: NOT
67268: IFFALSE 67272
// exit ;
67270: GO 67359
// un := tmp [ rand ( 1 , tmp ) ] ;
67272: LD_ADDR_VAR 0 1
67276: PUSH
67277: LD_VAR 0 2
67281: PUSH
67282: LD_INT 1
67284: PPUSH
67285: LD_VAR 0 2
67289: PPUSH
67290: CALL_OW 12
67294: ARRAY
67295: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67296: LD_VAR 0 1
67300: PPUSH
67301: LD_INT 0
67303: PPUSH
67304: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67308: LD_VAR 0 1
67312: PPUSH
67313: LD_OWVAR 3
67317: PUSH
67318: LD_VAR 0 1
67322: DIFF
67323: PPUSH
67324: LD_VAR 0 1
67328: PPUSH
67329: CALL_OW 74
67333: PPUSH
67334: CALL_OW 115
// wait ( 0 0$20 ) ;
67338: LD_INT 700
67340: PPUSH
67341: CALL_OW 67
// SetSide ( un , your_side ) ;
67345: LD_VAR 0 1
67349: PPUSH
67350: LD_OWVAR 2
67354: PPUSH
67355: CALL_OW 235
// end ;
67359: PPOPN 2
67361: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67362: LD_EXP 64
67366: PUSH
67367: LD_EXP 97
67371: AND
67372: IFFALSE 67478
67374: GO 67376
67376: DISABLE
67377: LD_INT 0
67379: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67380: LD_ADDR_VAR 0 1
67384: PUSH
67385: LD_INT 22
67387: PUSH
67388: LD_OWVAR 2
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 2
67399: PUSH
67400: LD_INT 30
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 30
67412: PUSH
67413: LD_INT 1
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: LIST
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PPUSH
67429: CALL_OW 69
67433: ST_TO_ADDR
// if not depot then
67434: LD_VAR 0 1
67438: NOT
67439: IFFALSE 67443
// exit ;
67441: GO 67478
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67443: LD_VAR 0 1
67447: PUSH
67448: LD_INT 1
67450: ARRAY
67451: PPUSH
67452: CALL_OW 250
67456: PPUSH
67457: LD_VAR 0 1
67461: PUSH
67462: LD_INT 1
67464: ARRAY
67465: PPUSH
67466: CALL_OW 251
67470: PPUSH
67471: LD_INT 70
67473: PPUSH
67474: CALL_OW 495
// end ;
67478: PPOPN 1
67480: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67481: LD_EXP 64
67485: PUSH
67486: LD_EXP 98
67490: AND
67491: IFFALSE 67702
67493: GO 67495
67495: DISABLE
67496: LD_INT 0
67498: PPUSH
67499: PPUSH
67500: PPUSH
67501: PPUSH
67502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67503: LD_ADDR_VAR 0 5
67507: PUSH
67508: LD_INT 22
67510: PUSH
67511: LD_OWVAR 2
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 21
67522: PUSH
67523: LD_INT 1
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PPUSH
67534: CALL_OW 69
67538: ST_TO_ADDR
// if not tmp then
67539: LD_VAR 0 5
67543: NOT
67544: IFFALSE 67548
// exit ;
67546: GO 67702
// for i in tmp do
67548: LD_ADDR_VAR 0 1
67552: PUSH
67553: LD_VAR 0 5
67557: PUSH
67558: FOR_IN
67559: IFFALSE 67700
// begin d := rand ( 0 , 5 ) ;
67561: LD_ADDR_VAR 0 4
67565: PUSH
67566: LD_INT 0
67568: PPUSH
67569: LD_INT 5
67571: PPUSH
67572: CALL_OW 12
67576: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67577: LD_ADDR_VAR 0 2
67581: PUSH
67582: LD_VAR 0 1
67586: PPUSH
67587: CALL_OW 250
67591: PPUSH
67592: LD_VAR 0 4
67596: PPUSH
67597: LD_INT 3
67599: PPUSH
67600: LD_INT 12
67602: PPUSH
67603: CALL_OW 12
67607: PPUSH
67608: CALL_OW 272
67612: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67613: LD_ADDR_VAR 0 3
67617: PUSH
67618: LD_VAR 0 1
67622: PPUSH
67623: CALL_OW 251
67627: PPUSH
67628: LD_VAR 0 4
67632: PPUSH
67633: LD_INT 3
67635: PPUSH
67636: LD_INT 12
67638: PPUSH
67639: CALL_OW 12
67643: PPUSH
67644: CALL_OW 273
67648: ST_TO_ADDR
// if ValidHex ( x , y ) then
67649: LD_VAR 0 2
67653: PPUSH
67654: LD_VAR 0 3
67658: PPUSH
67659: CALL_OW 488
67663: IFFALSE 67698
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67665: LD_VAR 0 1
67669: PPUSH
67670: LD_VAR 0 2
67674: PPUSH
67675: LD_VAR 0 3
67679: PPUSH
67680: LD_INT 3
67682: PPUSH
67683: LD_INT 6
67685: PPUSH
67686: CALL_OW 12
67690: PPUSH
67691: LD_INT 1
67693: PPUSH
67694: CALL_OW 483
// end ;
67698: GO 67558
67700: POP
67701: POP
// end ;
67702: PPOPN 5
67704: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67705: LD_EXP 64
67709: PUSH
67710: LD_EXP 99
67714: AND
67715: IFFALSE 67809
67717: GO 67719
67719: DISABLE
67720: LD_INT 0
67722: PPUSH
67723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67724: LD_ADDR_VAR 0 2
67728: PUSH
67729: LD_INT 22
67731: PUSH
67732: LD_OWVAR 2
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 32
67743: PUSH
67744: LD_INT 1
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 21
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: LIST
67765: PPUSH
67766: CALL_OW 69
67770: ST_TO_ADDR
// if not tmp then
67771: LD_VAR 0 2
67775: NOT
67776: IFFALSE 67780
// exit ;
67778: GO 67809
// for i in tmp do
67780: LD_ADDR_VAR 0 1
67784: PUSH
67785: LD_VAR 0 2
67789: PUSH
67790: FOR_IN
67791: IFFALSE 67807
// SetFuel ( i , 0 ) ;
67793: LD_VAR 0 1
67797: PPUSH
67798: LD_INT 0
67800: PPUSH
67801: CALL_OW 240
67805: GO 67790
67807: POP
67808: POP
// end ;
67809: PPOPN 2
67811: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67812: LD_EXP 64
67816: PUSH
67817: LD_EXP 100
67821: AND
67822: IFFALSE 67888
67824: GO 67826
67826: DISABLE
67827: LD_INT 0
67829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67830: LD_ADDR_VAR 0 1
67834: PUSH
67835: LD_INT 22
67837: PUSH
67838: LD_OWVAR 2
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 30
67849: PUSH
67850: LD_INT 29
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PPUSH
67861: CALL_OW 69
67865: ST_TO_ADDR
// if not tmp then
67866: LD_VAR 0 1
67870: NOT
67871: IFFALSE 67875
// exit ;
67873: GO 67888
// DestroyUnit ( tmp [ 1 ] ) ;
67875: LD_VAR 0 1
67879: PUSH
67880: LD_INT 1
67882: ARRAY
67883: PPUSH
67884: CALL_OW 65
// end ;
67888: PPOPN 1
67890: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67891: LD_EXP 64
67895: PUSH
67896: LD_EXP 102
67900: AND
67901: IFFALSE 68030
67903: GO 67905
67905: DISABLE
67906: LD_INT 0
67908: PPUSH
// begin uc_side := 0 ;
67909: LD_ADDR_OWVAR 20
67913: PUSH
67914: LD_INT 0
67916: ST_TO_ADDR
// uc_nation := nation_arabian ;
67917: LD_ADDR_OWVAR 21
67921: PUSH
67922: LD_INT 2
67924: ST_TO_ADDR
// hc_gallery :=  ;
67925: LD_ADDR_OWVAR 33
67929: PUSH
67930: LD_STRING 
67932: ST_TO_ADDR
// hc_name :=  ;
67933: LD_ADDR_OWVAR 26
67937: PUSH
67938: LD_STRING 
67940: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67941: LD_INT 1
67943: PPUSH
67944: LD_INT 11
67946: PPUSH
67947: LD_INT 10
67949: PPUSH
67950: CALL_OW 380
// un := CreateHuman ;
67954: LD_ADDR_VAR 0 1
67958: PUSH
67959: CALL_OW 44
67963: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67964: LD_VAR 0 1
67968: PPUSH
67969: LD_INT 1
67971: PPUSH
67972: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67976: LD_INT 35
67978: PPUSH
67979: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67983: LD_VAR 0 1
67987: PPUSH
67988: LD_INT 22
67990: PUSH
67991: LD_OWVAR 2
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PPUSH
68000: CALL_OW 69
68004: PPUSH
68005: LD_VAR 0 1
68009: PPUSH
68010: CALL_OW 74
68014: PPUSH
68015: CALL_OW 115
// until IsDead ( un ) ;
68019: LD_VAR 0 1
68023: PPUSH
68024: CALL_OW 301
68028: IFFALSE 67976
// end ;
68030: PPOPN 1
68032: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68033: LD_EXP 64
68037: PUSH
68038: LD_EXP 104
68042: AND
68043: IFFALSE 68055
68045: GO 68047
68047: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68048: LD_STRING earthquake(getX(game), 0, 32)
68050: PPUSH
68051: CALL_OW 559
68055: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68056: LD_EXP 64
68060: PUSH
68061: LD_EXP 105
68065: AND
68066: IFFALSE 68157
68068: GO 68070
68070: DISABLE
68071: LD_INT 0
68073: PPUSH
// begin enable ;
68074: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68075: LD_ADDR_VAR 0 1
68079: PUSH
68080: LD_INT 22
68082: PUSH
68083: LD_OWVAR 2
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 21
68094: PUSH
68095: LD_INT 2
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 33
68104: PUSH
68105: LD_INT 3
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: LIST
68116: PPUSH
68117: CALL_OW 69
68121: ST_TO_ADDR
// if not tmp then
68122: LD_VAR 0 1
68126: NOT
68127: IFFALSE 68131
// exit ;
68129: GO 68157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68131: LD_VAR 0 1
68135: PUSH
68136: LD_INT 1
68138: PPUSH
68139: LD_VAR 0 1
68143: PPUSH
68144: CALL_OW 12
68148: ARRAY
68149: PPUSH
68150: LD_INT 1
68152: PPUSH
68153: CALL_OW 234
// end ;
68157: PPOPN 1
68159: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68160: LD_EXP 64
68164: PUSH
68165: LD_EXP 106
68169: AND
68170: IFFALSE 68311
68172: GO 68174
68174: DISABLE
68175: LD_INT 0
68177: PPUSH
68178: PPUSH
68179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68180: LD_ADDR_VAR 0 3
68184: PUSH
68185: LD_INT 22
68187: PUSH
68188: LD_OWVAR 2
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 25
68199: PUSH
68200: LD_INT 1
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PPUSH
68211: CALL_OW 69
68215: ST_TO_ADDR
// if not tmp then
68216: LD_VAR 0 3
68220: NOT
68221: IFFALSE 68225
// exit ;
68223: GO 68311
// un := tmp [ rand ( 1 , tmp ) ] ;
68225: LD_ADDR_VAR 0 2
68229: PUSH
68230: LD_VAR 0 3
68234: PUSH
68235: LD_INT 1
68237: PPUSH
68238: LD_VAR 0 3
68242: PPUSH
68243: CALL_OW 12
68247: ARRAY
68248: ST_TO_ADDR
// if Crawls ( un ) then
68249: LD_VAR 0 2
68253: PPUSH
68254: CALL_OW 318
68258: IFFALSE 68269
// ComWalk ( un ) ;
68260: LD_VAR 0 2
68264: PPUSH
68265: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68269: LD_VAR 0 2
68273: PPUSH
68274: LD_INT 9
68276: PPUSH
68277: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68281: LD_INT 28
68283: PPUSH
68284: LD_OWVAR 2
68288: PPUSH
68289: LD_INT 2
68291: PPUSH
68292: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68296: LD_INT 29
68298: PPUSH
68299: LD_OWVAR 2
68303: PPUSH
68304: LD_INT 2
68306: PPUSH
68307: CALL_OW 322
// end ;
68311: PPOPN 3
68313: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68314: LD_EXP 64
68318: PUSH
68319: LD_EXP 107
68323: AND
68324: IFFALSE 68435
68326: GO 68328
68328: DISABLE
68329: LD_INT 0
68331: PPUSH
68332: PPUSH
68333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68334: LD_ADDR_VAR 0 3
68338: PUSH
68339: LD_INT 22
68341: PUSH
68342: LD_OWVAR 2
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 25
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PPUSH
68365: CALL_OW 69
68369: ST_TO_ADDR
// if not tmp then
68370: LD_VAR 0 3
68374: NOT
68375: IFFALSE 68379
// exit ;
68377: GO 68435
// un := tmp [ rand ( 1 , tmp ) ] ;
68379: LD_ADDR_VAR 0 2
68383: PUSH
68384: LD_VAR 0 3
68388: PUSH
68389: LD_INT 1
68391: PPUSH
68392: LD_VAR 0 3
68396: PPUSH
68397: CALL_OW 12
68401: ARRAY
68402: ST_TO_ADDR
// if Crawls ( un ) then
68403: LD_VAR 0 2
68407: PPUSH
68408: CALL_OW 318
68412: IFFALSE 68423
// ComWalk ( un ) ;
68414: LD_VAR 0 2
68418: PPUSH
68419: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68423: LD_VAR 0 2
68427: PPUSH
68428: LD_INT 8
68430: PPUSH
68431: CALL_OW 336
// end ;
68435: PPOPN 3
68437: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68438: LD_EXP 64
68442: PUSH
68443: LD_EXP 108
68447: AND
68448: IFFALSE 68592
68450: GO 68452
68452: DISABLE
68453: LD_INT 0
68455: PPUSH
68456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68457: LD_ADDR_VAR 0 2
68461: PUSH
68462: LD_INT 22
68464: PUSH
68465: LD_OWVAR 2
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 21
68476: PUSH
68477: LD_INT 2
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 2
68486: PUSH
68487: LD_INT 34
68489: PUSH
68490: LD_INT 12
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 34
68499: PUSH
68500: LD_INT 51
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 34
68509: PUSH
68510: LD_INT 32
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: LIST
68527: PPUSH
68528: CALL_OW 69
68532: ST_TO_ADDR
// if not tmp then
68533: LD_VAR 0 2
68537: NOT
68538: IFFALSE 68542
// exit ;
68540: GO 68592
// for i in tmp do
68542: LD_ADDR_VAR 0 1
68546: PUSH
68547: LD_VAR 0 2
68551: PUSH
68552: FOR_IN
68553: IFFALSE 68590
// if GetCargo ( i , mat_artifact ) = 0 then
68555: LD_VAR 0 1
68559: PPUSH
68560: LD_INT 4
68562: PPUSH
68563: CALL_OW 289
68567: PUSH
68568: LD_INT 0
68570: EQUAL
68571: IFFALSE 68588
// SetCargo ( i , mat_siberit , 100 ) ;
68573: LD_VAR 0 1
68577: PPUSH
68578: LD_INT 3
68580: PPUSH
68581: LD_INT 100
68583: PPUSH
68584: CALL_OW 290
68588: GO 68552
68590: POP
68591: POP
// end ;
68592: PPOPN 2
68594: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68595: LD_EXP 64
68599: PUSH
68600: LD_EXP 109
68604: AND
68605: IFFALSE 68788
68607: GO 68609
68609: DISABLE
68610: LD_INT 0
68612: PPUSH
68613: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68614: LD_ADDR_VAR 0 2
68618: PUSH
68619: LD_INT 22
68621: PUSH
68622: LD_OWVAR 2
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PPUSH
68631: CALL_OW 69
68635: ST_TO_ADDR
// if not tmp then
68636: LD_VAR 0 2
68640: NOT
68641: IFFALSE 68645
// exit ;
68643: GO 68788
// for i := 1 to 2 do
68645: LD_ADDR_VAR 0 1
68649: PUSH
68650: DOUBLE
68651: LD_INT 1
68653: DEC
68654: ST_TO_ADDR
68655: LD_INT 2
68657: PUSH
68658: FOR_TO
68659: IFFALSE 68786
// begin uc_side := your_side ;
68661: LD_ADDR_OWVAR 20
68665: PUSH
68666: LD_OWVAR 2
68670: ST_TO_ADDR
// uc_nation := nation_american ;
68671: LD_ADDR_OWVAR 21
68675: PUSH
68676: LD_INT 1
68678: ST_TO_ADDR
// vc_chassis := us_morphling ;
68679: LD_ADDR_OWVAR 37
68683: PUSH
68684: LD_INT 5
68686: ST_TO_ADDR
// vc_engine := engine_siberite ;
68687: LD_ADDR_OWVAR 39
68691: PUSH
68692: LD_INT 3
68694: ST_TO_ADDR
// vc_control := control_computer ;
68695: LD_ADDR_OWVAR 38
68699: PUSH
68700: LD_INT 3
68702: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68703: LD_ADDR_OWVAR 40
68707: PUSH
68708: LD_INT 10
68710: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68711: LD_VAR 0 2
68715: PUSH
68716: LD_INT 1
68718: ARRAY
68719: PPUSH
68720: CALL_OW 310
68724: NOT
68725: IFFALSE 68772
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68727: CALL_OW 45
68731: PPUSH
68732: LD_VAR 0 2
68736: PUSH
68737: LD_INT 1
68739: ARRAY
68740: PPUSH
68741: CALL_OW 250
68745: PPUSH
68746: LD_VAR 0 2
68750: PUSH
68751: LD_INT 1
68753: ARRAY
68754: PPUSH
68755: CALL_OW 251
68759: PPUSH
68760: LD_INT 12
68762: PPUSH
68763: LD_INT 1
68765: PPUSH
68766: CALL_OW 50
68770: GO 68784
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68772: CALL_OW 45
68776: PPUSH
68777: LD_INT 1
68779: PPUSH
68780: CALL_OW 51
// end ;
68784: GO 68658
68786: POP
68787: POP
// end ;
68788: PPOPN 2
68790: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68791: LD_EXP 64
68795: PUSH
68796: LD_EXP 110
68800: AND
68801: IFFALSE 69023
68803: GO 68805
68805: DISABLE
68806: LD_INT 0
68808: PPUSH
68809: PPUSH
68810: PPUSH
68811: PPUSH
68812: PPUSH
68813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68814: LD_ADDR_VAR 0 6
68818: PUSH
68819: LD_INT 22
68821: PUSH
68822: LD_OWVAR 2
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 21
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 3
68843: PUSH
68844: LD_INT 23
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: PPUSH
68863: CALL_OW 69
68867: ST_TO_ADDR
// if not tmp then
68868: LD_VAR 0 6
68872: NOT
68873: IFFALSE 68877
// exit ;
68875: GO 69023
// s1 := rand ( 1 , 4 ) ;
68877: LD_ADDR_VAR 0 2
68881: PUSH
68882: LD_INT 1
68884: PPUSH
68885: LD_INT 4
68887: PPUSH
68888: CALL_OW 12
68892: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68893: LD_ADDR_VAR 0 4
68897: PUSH
68898: LD_VAR 0 6
68902: PUSH
68903: LD_INT 1
68905: ARRAY
68906: PPUSH
68907: LD_VAR 0 2
68911: PPUSH
68912: CALL_OW 259
68916: ST_TO_ADDR
// if s1 = 1 then
68917: LD_VAR 0 2
68921: PUSH
68922: LD_INT 1
68924: EQUAL
68925: IFFALSE 68945
// s2 := rand ( 2 , 4 ) else
68927: LD_ADDR_VAR 0 3
68931: PUSH
68932: LD_INT 2
68934: PPUSH
68935: LD_INT 4
68937: PPUSH
68938: CALL_OW 12
68942: ST_TO_ADDR
68943: GO 68953
// s2 := 1 ;
68945: LD_ADDR_VAR 0 3
68949: PUSH
68950: LD_INT 1
68952: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68953: LD_ADDR_VAR 0 5
68957: PUSH
68958: LD_VAR 0 6
68962: PUSH
68963: LD_INT 1
68965: ARRAY
68966: PPUSH
68967: LD_VAR 0 3
68971: PPUSH
68972: CALL_OW 259
68976: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68977: LD_VAR 0 6
68981: PUSH
68982: LD_INT 1
68984: ARRAY
68985: PPUSH
68986: LD_VAR 0 2
68990: PPUSH
68991: LD_VAR 0 5
68995: PPUSH
68996: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69000: LD_VAR 0 6
69004: PUSH
69005: LD_INT 1
69007: ARRAY
69008: PPUSH
69009: LD_VAR 0 3
69013: PPUSH
69014: LD_VAR 0 4
69018: PPUSH
69019: CALL_OW 237
// end ;
69023: PPOPN 6
69025: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69026: LD_EXP 64
69030: PUSH
69031: LD_EXP 111
69035: AND
69036: IFFALSE 69115
69038: GO 69040
69040: DISABLE
69041: LD_INT 0
69043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69044: LD_ADDR_VAR 0 1
69048: PUSH
69049: LD_INT 22
69051: PUSH
69052: LD_OWVAR 2
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 30
69063: PUSH
69064: LD_INT 3
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PPUSH
69075: CALL_OW 69
69079: ST_TO_ADDR
// if not tmp then
69080: LD_VAR 0 1
69084: NOT
69085: IFFALSE 69089
// exit ;
69087: GO 69115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69089: LD_VAR 0 1
69093: PUSH
69094: LD_INT 1
69096: PPUSH
69097: LD_VAR 0 1
69101: PPUSH
69102: CALL_OW 12
69106: ARRAY
69107: PPUSH
69108: LD_INT 1
69110: PPUSH
69111: CALL_OW 234
// end ;
69115: PPOPN 1
69117: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69118: LD_EXP 64
69122: PUSH
69123: LD_EXP 112
69127: AND
69128: IFFALSE 69240
69130: GO 69132
69132: DISABLE
69133: LD_INT 0
69135: PPUSH
69136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69137: LD_ADDR_VAR 0 2
69141: PUSH
69142: LD_INT 22
69144: PUSH
69145: LD_OWVAR 2
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 2
69156: PUSH
69157: LD_INT 30
69159: PUSH
69160: LD_INT 27
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 30
69169: PUSH
69170: LD_INT 26
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 30
69179: PUSH
69180: LD_INT 28
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PPUSH
69197: CALL_OW 69
69201: ST_TO_ADDR
// if not tmp then
69202: LD_VAR 0 2
69206: NOT
69207: IFFALSE 69211
// exit ;
69209: GO 69240
// for i in tmp do
69211: LD_ADDR_VAR 0 1
69215: PUSH
69216: LD_VAR 0 2
69220: PUSH
69221: FOR_IN
69222: IFFALSE 69238
// SetLives ( i , 1 ) ;
69224: LD_VAR 0 1
69228: PPUSH
69229: LD_INT 1
69231: PPUSH
69232: CALL_OW 234
69236: GO 69221
69238: POP
69239: POP
// end ;
69240: PPOPN 2
69242: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69243: LD_EXP 64
69247: PUSH
69248: LD_EXP 113
69252: AND
69253: IFFALSE 69527
69255: GO 69257
69257: DISABLE
69258: LD_INT 0
69260: PPUSH
69261: PPUSH
69262: PPUSH
// begin i := rand ( 1 , 7 ) ;
69263: LD_ADDR_VAR 0 1
69267: PUSH
69268: LD_INT 1
69270: PPUSH
69271: LD_INT 7
69273: PPUSH
69274: CALL_OW 12
69278: ST_TO_ADDR
// case i of 1 :
69279: LD_VAR 0 1
69283: PUSH
69284: LD_INT 1
69286: DOUBLE
69287: EQUAL
69288: IFTRUE 69292
69290: GO 69302
69292: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69293: LD_STRING earthquake(getX(game), 0, 32)
69295: PPUSH
69296: CALL_OW 559
69300: GO 69527
69302: LD_INT 2
69304: DOUBLE
69305: EQUAL
69306: IFTRUE 69310
69308: GO 69324
69310: POP
// begin ToLua ( displayStucuk(); ) ;
69311: LD_STRING displayStucuk();
69313: PPUSH
69314: CALL_OW 559
// ResetFog ;
69318: CALL_OW 335
// end ; 3 :
69322: GO 69527
69324: LD_INT 3
69326: DOUBLE
69327: EQUAL
69328: IFTRUE 69332
69330: GO 69436
69332: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69333: LD_ADDR_VAR 0 2
69337: PUSH
69338: LD_INT 22
69340: PUSH
69341: LD_OWVAR 2
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 25
69352: PUSH
69353: LD_INT 1
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PPUSH
69364: CALL_OW 69
69368: ST_TO_ADDR
// if not tmp then
69369: LD_VAR 0 2
69373: NOT
69374: IFFALSE 69378
// exit ;
69376: GO 69527
// un := tmp [ rand ( 1 , tmp ) ] ;
69378: LD_ADDR_VAR 0 3
69382: PUSH
69383: LD_VAR 0 2
69387: PUSH
69388: LD_INT 1
69390: PPUSH
69391: LD_VAR 0 2
69395: PPUSH
69396: CALL_OW 12
69400: ARRAY
69401: ST_TO_ADDR
// if Crawls ( un ) then
69402: LD_VAR 0 3
69406: PPUSH
69407: CALL_OW 318
69411: IFFALSE 69422
// ComWalk ( un ) ;
69413: LD_VAR 0 3
69417: PPUSH
69418: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69422: LD_VAR 0 3
69426: PPUSH
69427: LD_INT 8
69429: PPUSH
69430: CALL_OW 336
// end ; 4 :
69434: GO 69527
69436: LD_INT 4
69438: DOUBLE
69439: EQUAL
69440: IFTRUE 69444
69442: GO 69505
69444: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69445: LD_ADDR_VAR 0 2
69449: PUSH
69450: LD_INT 22
69452: PUSH
69453: LD_OWVAR 2
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 30
69464: PUSH
69465: LD_INT 29
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PPUSH
69476: CALL_OW 69
69480: ST_TO_ADDR
// if not tmp then
69481: LD_VAR 0 2
69485: NOT
69486: IFFALSE 69490
// exit ;
69488: GO 69527
// DestroyUnit ( tmp [ 1 ] ) ;
69490: LD_VAR 0 2
69494: PUSH
69495: LD_INT 1
69497: ARRAY
69498: PPUSH
69499: CALL_OW 65
// end ; 5 .. 7 :
69503: GO 69527
69505: LD_INT 5
69507: DOUBLE
69508: GREATEREQUAL
69509: IFFALSE 69517
69511: LD_INT 7
69513: DOUBLE
69514: LESSEQUAL
69515: IFTRUE 69519
69517: GO 69526
69519: POP
// StreamSibBomb ; end ;
69520: CALL 65777 0 0
69524: GO 69527
69526: POP
// end ;
69527: PPOPN 3
69529: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69530: LD_EXP 64
69534: PUSH
69535: LD_EXP 114
69539: AND
69540: IFFALSE 69696
69542: GO 69544
69544: DISABLE
69545: LD_INT 0
69547: PPUSH
69548: PPUSH
69549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69550: LD_ADDR_VAR 0 2
69554: PUSH
69555: LD_INT 81
69557: PUSH
69558: LD_OWVAR 2
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: LD_INT 21
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 21
69582: PUSH
69583: LD_INT 2
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: LIST
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PPUSH
69599: CALL_OW 69
69603: ST_TO_ADDR
// if not tmp then
69604: LD_VAR 0 2
69608: NOT
69609: IFFALSE 69613
// exit ;
69611: GO 69696
// p := 0 ;
69613: LD_ADDR_VAR 0 3
69617: PUSH
69618: LD_INT 0
69620: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69621: LD_INT 35
69623: PPUSH
69624: CALL_OW 67
// p := p + 1 ;
69628: LD_ADDR_VAR 0 3
69632: PUSH
69633: LD_VAR 0 3
69637: PUSH
69638: LD_INT 1
69640: PLUS
69641: ST_TO_ADDR
// for i in tmp do
69642: LD_ADDR_VAR 0 1
69646: PUSH
69647: LD_VAR 0 2
69651: PUSH
69652: FOR_IN
69653: IFFALSE 69684
// if GetLives ( i ) < 1000 then
69655: LD_VAR 0 1
69659: PPUSH
69660: CALL_OW 256
69664: PUSH
69665: LD_INT 1000
69667: LESS
69668: IFFALSE 69682
// SetLives ( i , 1000 ) ;
69670: LD_VAR 0 1
69674: PPUSH
69675: LD_INT 1000
69677: PPUSH
69678: CALL_OW 234
69682: GO 69652
69684: POP
69685: POP
// until p > 20 ;
69686: LD_VAR 0 3
69690: PUSH
69691: LD_INT 20
69693: GREATER
69694: IFFALSE 69621
// end ;
69696: PPOPN 3
69698: END
// every 0 0$1 trigger StreamModeActive and sTime do
69699: LD_EXP 64
69703: PUSH
69704: LD_EXP 115
69708: AND
69709: IFFALSE 69744
69711: GO 69713
69713: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69714: LD_INT 28
69716: PPUSH
69717: LD_OWVAR 2
69721: PPUSH
69722: LD_INT 2
69724: PPUSH
69725: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69729: LD_INT 30
69731: PPUSH
69732: LD_OWVAR 2
69736: PPUSH
69737: LD_INT 2
69739: PPUSH
69740: CALL_OW 322
// end ;
69744: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69745: LD_EXP 64
69749: PUSH
69750: LD_EXP 116
69754: AND
69755: IFFALSE 69876
69757: GO 69759
69759: DISABLE
69760: LD_INT 0
69762: PPUSH
69763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69764: LD_ADDR_VAR 0 2
69768: PUSH
69769: LD_INT 22
69771: PUSH
69772: LD_OWVAR 2
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 21
69783: PUSH
69784: LD_INT 1
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 3
69793: PUSH
69794: LD_INT 23
69796: PUSH
69797: LD_INT 0
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: LIST
69812: PPUSH
69813: CALL_OW 69
69817: ST_TO_ADDR
// if not tmp then
69818: LD_VAR 0 2
69822: NOT
69823: IFFALSE 69827
// exit ;
69825: GO 69876
// for i in tmp do
69827: LD_ADDR_VAR 0 1
69831: PUSH
69832: LD_VAR 0 2
69836: PUSH
69837: FOR_IN
69838: IFFALSE 69874
// begin if Crawls ( i ) then
69840: LD_VAR 0 1
69844: PPUSH
69845: CALL_OW 318
69849: IFFALSE 69860
// ComWalk ( i ) ;
69851: LD_VAR 0 1
69855: PPUSH
69856: CALL_OW 138
// SetClass ( i , 2 ) ;
69860: LD_VAR 0 1
69864: PPUSH
69865: LD_INT 2
69867: PPUSH
69868: CALL_OW 336
// end ;
69872: GO 69837
69874: POP
69875: POP
// end ;
69876: PPOPN 2
69878: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69879: LD_EXP 64
69883: PUSH
69884: LD_EXP 117
69888: AND
69889: IFFALSE 70170
69891: GO 69893
69893: DISABLE
69894: LD_INT 0
69896: PPUSH
69897: PPUSH
69898: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69899: LD_OWVAR 2
69903: PPUSH
69904: LD_INT 9
69906: PPUSH
69907: LD_INT 1
69909: PPUSH
69910: LD_INT 1
69912: PPUSH
69913: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69917: LD_INT 9
69919: PPUSH
69920: LD_OWVAR 2
69924: PPUSH
69925: CALL_OW 343
// uc_side := 9 ;
69929: LD_ADDR_OWVAR 20
69933: PUSH
69934: LD_INT 9
69936: ST_TO_ADDR
// uc_nation := 2 ;
69937: LD_ADDR_OWVAR 21
69941: PUSH
69942: LD_INT 2
69944: ST_TO_ADDR
// hc_name := Dark Warrior ;
69945: LD_ADDR_OWVAR 26
69949: PUSH
69950: LD_STRING Dark Warrior
69952: ST_TO_ADDR
// hc_gallery :=  ;
69953: LD_ADDR_OWVAR 33
69957: PUSH
69958: LD_STRING 
69960: ST_TO_ADDR
// hc_noskilllimit := true ;
69961: LD_ADDR_OWVAR 76
69965: PUSH
69966: LD_INT 1
69968: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69969: LD_ADDR_OWVAR 31
69973: PUSH
69974: LD_INT 30
69976: PUSH
69977: LD_INT 30
69979: PUSH
69980: LD_INT 30
69982: PUSH
69983: LD_INT 30
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: ST_TO_ADDR
// un := CreateHuman ;
69992: LD_ADDR_VAR 0 3
69996: PUSH
69997: CALL_OW 44
70001: ST_TO_ADDR
// hc_noskilllimit := false ;
70002: LD_ADDR_OWVAR 76
70006: PUSH
70007: LD_INT 0
70009: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70010: LD_VAR 0 3
70014: PPUSH
70015: LD_INT 1
70017: PPUSH
70018: CALL_OW 51
// p := 0 ;
70022: LD_ADDR_VAR 0 2
70026: PUSH
70027: LD_INT 0
70029: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70030: LD_INT 35
70032: PPUSH
70033: CALL_OW 67
// p := p + 1 ;
70037: LD_ADDR_VAR 0 2
70041: PUSH
70042: LD_VAR 0 2
70046: PUSH
70047: LD_INT 1
70049: PLUS
70050: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70051: LD_VAR 0 3
70055: PPUSH
70056: CALL_OW 256
70060: PUSH
70061: LD_INT 1000
70063: LESS
70064: IFFALSE 70078
// SetLives ( un , 1000 ) ;
70066: LD_VAR 0 3
70070: PPUSH
70071: LD_INT 1000
70073: PPUSH
70074: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70078: LD_VAR 0 3
70082: PPUSH
70083: LD_INT 81
70085: PUSH
70086: LD_OWVAR 2
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 91
70097: PUSH
70098: LD_VAR 0 3
70102: PUSH
70103: LD_INT 30
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: LIST
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PPUSH
70115: CALL_OW 69
70119: PPUSH
70120: LD_VAR 0 3
70124: PPUSH
70125: CALL_OW 74
70129: PPUSH
70130: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
70134: LD_VAR 0 2
70138: PUSH
70139: LD_INT 60
70141: GREATER
70142: PUSH
70143: LD_VAR 0 3
70147: PPUSH
70148: CALL_OW 301
70152: OR
70153: IFFALSE 70030
// if un then
70155: LD_VAR 0 3
70159: IFFALSE 70170
// RemoveUnit ( un ) ;
70161: LD_VAR 0 3
70165: PPUSH
70166: CALL_OW 64
// end ;
70170: PPOPN 3
70172: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70173: LD_INT 0
70175: PPUSH
70176: PPUSH
70177: PPUSH
70178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70179: LD_ADDR_VAR 0 4
70183: PUSH
70184: LD_INT 22
70186: PUSH
70187: LD_OWVAR 2
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 2
70198: PUSH
70199: LD_INT 30
70201: PUSH
70202: LD_INT 0
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 30
70211: PUSH
70212: LD_INT 1
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: LIST
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PPUSH
70228: CALL_OW 69
70232: ST_TO_ADDR
// if not tmp then
70233: LD_VAR 0 4
70237: NOT
70238: IFFALSE 70242
// exit ;
70240: GO 70301
// for i in tmp do
70242: LD_ADDR_VAR 0 2
70246: PUSH
70247: LD_VAR 0 4
70251: PUSH
70252: FOR_IN
70253: IFFALSE 70299
// for j = 1 to 3 do
70255: LD_ADDR_VAR 0 3
70259: PUSH
70260: DOUBLE
70261: LD_INT 1
70263: DEC
70264: ST_TO_ADDR
70265: LD_INT 3
70267: PUSH
70268: FOR_TO
70269: IFFALSE 70295
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70271: LD_VAR 0 2
70275: PPUSH
70276: CALL_OW 274
70280: PPUSH
70281: LD_VAR 0 3
70285: PPUSH
70286: LD_INT 99999
70288: PPUSH
70289: CALL_OW 277
70293: GO 70268
70295: POP
70296: POP
70297: GO 70252
70299: POP
70300: POP
// end ;
70301: LD_VAR 0 1
70305: RET
// export function hHackSetLevel10 ; var i , j ; begin
70306: LD_INT 0
70308: PPUSH
70309: PPUSH
70310: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70311: LD_ADDR_VAR 0 2
70315: PUSH
70316: LD_INT 21
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PPUSH
70326: CALL_OW 69
70330: PUSH
70331: FOR_IN
70332: IFFALSE 70384
// if IsSelected ( i ) then
70334: LD_VAR 0 2
70338: PPUSH
70339: CALL_OW 306
70343: IFFALSE 70382
// begin for j := 1 to 4 do
70345: LD_ADDR_VAR 0 3
70349: PUSH
70350: DOUBLE
70351: LD_INT 1
70353: DEC
70354: ST_TO_ADDR
70355: LD_INT 4
70357: PUSH
70358: FOR_TO
70359: IFFALSE 70380
// SetSkill ( i , j , 10 ) ;
70361: LD_VAR 0 2
70365: PPUSH
70366: LD_VAR 0 3
70370: PPUSH
70371: LD_INT 10
70373: PPUSH
70374: CALL_OW 237
70378: GO 70358
70380: POP
70381: POP
// end ;
70382: GO 70331
70384: POP
70385: POP
// end ;
70386: LD_VAR 0 1
70390: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
70391: LD_INT 0
70393: PPUSH
70394: PPUSH
70395: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
70396: LD_ADDR_VAR 0 2
70400: PUSH
70401: LD_INT 22
70403: PUSH
70404: LD_OWVAR 2
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 21
70415: PUSH
70416: LD_INT 1
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PPUSH
70427: CALL_OW 69
70431: PUSH
70432: FOR_IN
70433: IFFALSE 70474
// begin for j := 1 to 4 do
70435: LD_ADDR_VAR 0 3
70439: PUSH
70440: DOUBLE
70441: LD_INT 1
70443: DEC
70444: ST_TO_ADDR
70445: LD_INT 4
70447: PUSH
70448: FOR_TO
70449: IFFALSE 70470
// SetSkill ( i , j , 10 ) ;
70451: LD_VAR 0 2
70455: PPUSH
70456: LD_VAR 0 3
70460: PPUSH
70461: LD_INT 10
70463: PPUSH
70464: CALL_OW 237
70468: GO 70448
70470: POP
70471: POP
// end ;
70472: GO 70432
70474: POP
70475: POP
// end ;
70476: LD_VAR 0 1
70480: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
70481: LD_INT 0
70483: PPUSH
// uc_side := your_side ;
70484: LD_ADDR_OWVAR 20
70488: PUSH
70489: LD_OWVAR 2
70493: ST_TO_ADDR
// uc_nation := nation ;
70494: LD_ADDR_OWVAR 21
70498: PUSH
70499: LD_VAR 0 1
70503: ST_TO_ADDR
// InitHc ;
70504: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
70508: LD_INT 0
70510: PPUSH
70511: LD_VAR 0 2
70515: PPUSH
70516: LD_VAR 0 3
70520: PPUSH
70521: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
70525: CALL_OW 44
70529: PPUSH
70530: LD_INT 1
70532: PPUSH
70533: CALL_OW 51
// end ;
70537: LD_VAR 0 4
70541: RET
// export function hHackSpawnVehicle ; begin
70542: LD_INT 0
70544: PPUSH
// uc_side := your_side ;
70545: LD_ADDR_OWVAR 20
70549: PUSH
70550: LD_OWVAR 2
70554: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
70555: LD_ADDR_OWVAR 21
70559: PUSH
70560: LD_INT 1
70562: PPUSH
70563: LD_INT 3
70565: PPUSH
70566: CALL_OW 12
70570: ST_TO_ADDR
// InitVc ;
70571: CALL_OW 20
// case uc_nation of 1 :
70575: LD_OWVAR 21
70579: PUSH
70580: LD_INT 1
70582: DOUBLE
70583: EQUAL
70584: IFTRUE 70588
70586: GO 70732
70588: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
70589: LD_ADDR_OWVAR 37
70593: PUSH
70594: LD_INT 1
70596: PUSH
70597: LD_INT 2
70599: PUSH
70600: LD_INT 3
70602: PUSH
70603: LD_INT 4
70605: PUSH
70606: LD_INT 5
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 1
70618: PPUSH
70619: LD_INT 5
70621: PPUSH
70622: CALL_OW 12
70626: ARRAY
70627: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
70628: LD_ADDR_OWVAR 39
70632: PUSH
70633: LD_INT 1
70635: PPUSH
70636: LD_INT 3
70638: PPUSH
70639: CALL_OW 12
70643: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
70644: LD_ADDR_OWVAR 38
70648: PUSH
70649: LD_INT 1
70651: PUSH
70652: LD_INT 2
70654: PUSH
70655: LD_INT 3
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: PPUSH
70666: LD_INT 3
70668: PPUSH
70669: CALL_OW 12
70673: ARRAY
70674: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
70675: LD_ADDR_OWVAR 40
70679: PUSH
70680: LD_INT 2
70682: PUSH
70683: LD_INT 4
70685: PUSH
70686: LD_INT 5
70688: PUSH
70689: LD_INT 3
70691: PUSH
70692: LD_INT 7
70694: PUSH
70695: LD_INT 8
70697: PUSH
70698: LD_INT 9
70700: PUSH
70701: LD_INT 10
70703: PUSH
70704: LD_INT 6
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 1
70720: PPUSH
70721: LD_INT 9
70723: PPUSH
70724: CALL_OW 12
70728: ARRAY
70729: ST_TO_ADDR
// end ; 2 :
70730: GO 70997
70732: LD_INT 2
70734: DOUBLE
70735: EQUAL
70736: IFTRUE 70740
70738: GO 70864
70740: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
70741: LD_ADDR_OWVAR 37
70745: PUSH
70746: LD_INT 11
70748: PUSH
70749: LD_INT 12
70751: PUSH
70752: LD_INT 13
70754: PUSH
70755: LD_INT 14
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 1
70766: PPUSH
70767: LD_INT 4
70769: PPUSH
70770: CALL_OW 12
70774: ARRAY
70775: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
70776: LD_ADDR_OWVAR 39
70780: PUSH
70781: LD_INT 1
70783: PPUSH
70784: LD_INT 3
70786: PPUSH
70787: CALL_OW 12
70791: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
70792: LD_ADDR_OWVAR 38
70796: PUSH
70797: LD_INT 1
70799: PUSH
70800: LD_INT 2
70802: PUSH
70803: LD_INT 5
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 1
70813: PPUSH
70814: LD_INT 3
70816: PPUSH
70817: CALL_OW 12
70821: ARRAY
70822: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
70823: LD_ADDR_OWVAR 40
70827: PUSH
70828: LD_INT 24
70830: PUSH
70831: LD_INT 26
70833: PUSH
70834: LD_INT 27
70836: PUSH
70837: LD_INT 28
70839: PUSH
70840: LD_INT 29
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 1
70852: PPUSH
70853: LD_INT 5
70855: PPUSH
70856: CALL_OW 12
70860: ARRAY
70861: ST_TO_ADDR
// end ; 3 :
70862: GO 70997
70864: LD_INT 3
70866: DOUBLE
70867: EQUAL
70868: IFTRUE 70872
70870: GO 70996
70872: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
70873: LD_ADDR_OWVAR 37
70877: PUSH
70878: LD_INT 21
70880: PUSH
70881: LD_INT 23
70883: PUSH
70884: LD_INT 22
70886: PUSH
70887: LD_INT 24
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 1
70898: PPUSH
70899: LD_INT 4
70901: PPUSH
70902: CALL_OW 12
70906: ARRAY
70907: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
70908: LD_ADDR_OWVAR 39
70912: PUSH
70913: LD_INT 1
70915: PPUSH
70916: LD_INT 3
70918: PPUSH
70919: CALL_OW 12
70923: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
70924: LD_ADDR_OWVAR 38
70928: PUSH
70929: LD_INT 1
70931: PUSH
70932: LD_INT 3
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 1
70941: PPUSH
70942: LD_INT 2
70944: PPUSH
70945: CALL_OW 12
70949: ARRAY
70950: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
70951: LD_ADDR_OWVAR 40
70955: PUSH
70956: LD_INT 42
70958: PUSH
70959: LD_INT 43
70961: PUSH
70962: LD_INT 44
70964: PUSH
70965: LD_INT 46
70967: PUSH
70968: LD_INT 48
70970: PUSH
70971: LD_INT 47
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 1
70984: PPUSH
70985: LD_INT 6
70987: PPUSH
70988: CALL_OW 12
70992: ARRAY
70993: ST_TO_ADDR
// end ; end ;
70994: GO 70997
70996: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70997: CALL_OW 45
71001: PPUSH
71002: LD_INT 1
71004: PPUSH
71005: CALL_OW 51
// end ;
71009: LD_VAR 0 1
71013: RET
// export hInvincible ; every 1 do
71014: GO 71016
71016: DISABLE
// hInvincible := [ ] ;
71017: LD_ADDR_EXP 118
71021: PUSH
71022: EMPTY
71023: ST_TO_ADDR
71024: END
// every 10 do var i ;
71025: GO 71027
71027: DISABLE
71028: LD_INT 0
71030: PPUSH
// begin enable ;
71031: ENABLE
// if not hInvincible then
71032: LD_EXP 118
71036: NOT
71037: IFFALSE 71041
// exit ;
71039: GO 71085
// for i in hInvincible do
71041: LD_ADDR_VAR 0 1
71045: PUSH
71046: LD_EXP 118
71050: PUSH
71051: FOR_IN
71052: IFFALSE 71083
// if GetLives ( i ) < 1000 then
71054: LD_VAR 0 1
71058: PPUSH
71059: CALL_OW 256
71063: PUSH
71064: LD_INT 1000
71066: LESS
71067: IFFALSE 71081
// SetLives ( i , 1000 ) ;
71069: LD_VAR 0 1
71073: PPUSH
71074: LD_INT 1000
71076: PPUSH
71077: CALL_OW 234
71081: GO 71051
71083: POP
71084: POP
// end ;
71085: PPOPN 1
71087: END
// export function hHackInvincible ; var i ; begin
71088: LD_INT 0
71090: PPUSH
71091: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71092: LD_ADDR_VAR 0 2
71096: PUSH
71097: LD_INT 2
71099: PUSH
71100: LD_INT 21
71102: PUSH
71103: LD_INT 1
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 21
71112: PUSH
71113: LD_INT 2
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: LIST
71124: PPUSH
71125: CALL_OW 69
71129: PUSH
71130: FOR_IN
71131: IFFALSE 71192
// if IsSelected ( i ) then
71133: LD_VAR 0 2
71137: PPUSH
71138: CALL_OW 306
71142: IFFALSE 71190
// begin if i in hInvincible then
71144: LD_VAR 0 2
71148: PUSH
71149: LD_EXP 118
71153: IN
71154: IFFALSE 71174
// hInvincible := hInvincible diff i else
71156: LD_ADDR_EXP 118
71160: PUSH
71161: LD_EXP 118
71165: PUSH
71166: LD_VAR 0 2
71170: DIFF
71171: ST_TO_ADDR
71172: GO 71190
// hInvincible := hInvincible union i ;
71174: LD_ADDR_EXP 118
71178: PUSH
71179: LD_EXP 118
71183: PUSH
71184: LD_VAR 0 2
71188: UNION
71189: ST_TO_ADDR
// end ;
71190: GO 71130
71192: POP
71193: POP
// end ;
71194: LD_VAR 0 1
71198: RET
// export function hHackInvisible ; var i , j ; begin
71199: LD_INT 0
71201: PPUSH
71202: PPUSH
71203: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71204: LD_ADDR_VAR 0 2
71208: PUSH
71209: LD_INT 21
71211: PUSH
71212: LD_INT 1
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PPUSH
71219: CALL_OW 69
71223: PUSH
71224: FOR_IN
71225: IFFALSE 71249
// if IsSelected ( i ) then
71227: LD_VAR 0 2
71231: PPUSH
71232: CALL_OW 306
71236: IFFALSE 71247
// ComForceInvisible ( i ) ;
71238: LD_VAR 0 2
71242: PPUSH
71243: CALL_OW 496
71247: GO 71224
71249: POP
71250: POP
// end ;
71251: LD_VAR 0 1
71255: RET
// export function hHackChangeYourSide ; begin
71256: LD_INT 0
71258: PPUSH
// if your_side = 8 then
71259: LD_OWVAR 2
71263: PUSH
71264: LD_INT 8
71266: EQUAL
71267: IFFALSE 71279
// your_side := 0 else
71269: LD_ADDR_OWVAR 2
71273: PUSH
71274: LD_INT 0
71276: ST_TO_ADDR
71277: GO 71293
// your_side := your_side + 1 ;
71279: LD_ADDR_OWVAR 2
71283: PUSH
71284: LD_OWVAR 2
71288: PUSH
71289: LD_INT 1
71291: PLUS
71292: ST_TO_ADDR
// end ;
71293: LD_VAR 0 1
71297: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71298: LD_INT 0
71300: PPUSH
71301: PPUSH
71302: PPUSH
// for i in all_units do
71303: LD_ADDR_VAR 0 2
71307: PUSH
71308: LD_OWVAR 3
71312: PUSH
71313: FOR_IN
71314: IFFALSE 71392
// if IsSelected ( i ) then
71316: LD_VAR 0 2
71320: PPUSH
71321: CALL_OW 306
71325: IFFALSE 71390
// begin j := GetSide ( i ) ;
71327: LD_ADDR_VAR 0 3
71331: PUSH
71332: LD_VAR 0 2
71336: PPUSH
71337: CALL_OW 255
71341: ST_TO_ADDR
// if j = 8 then
71342: LD_VAR 0 3
71346: PUSH
71347: LD_INT 8
71349: EQUAL
71350: IFFALSE 71362
// j := 0 else
71352: LD_ADDR_VAR 0 3
71356: PUSH
71357: LD_INT 0
71359: ST_TO_ADDR
71360: GO 71376
// j := j + 1 ;
71362: LD_ADDR_VAR 0 3
71366: PUSH
71367: LD_VAR 0 3
71371: PUSH
71372: LD_INT 1
71374: PLUS
71375: ST_TO_ADDR
// SetSide ( i , j ) ;
71376: LD_VAR 0 2
71380: PPUSH
71381: LD_VAR 0 3
71385: PPUSH
71386: CALL_OW 235
// end ;
71390: GO 71313
71392: POP
71393: POP
// end ;
71394: LD_VAR 0 1
71398: RET
// export function hHackFog ; begin
71399: LD_INT 0
71401: PPUSH
// FogOff ( true ) ;
71402: LD_INT 1
71404: PPUSH
71405: CALL_OW 344
// end ;
71409: LD_VAR 0 1
71413: RET
// export function hHackApeman ; begin
71414: LD_INT 0
71416: PPUSH
// uc_side := your_side ;
71417: LD_ADDR_OWVAR 20
71421: PUSH
71422: LD_OWVAR 2
71426: ST_TO_ADDR
// uc_nation := 0 ;
71427: LD_ADDR_OWVAR 21
71431: PUSH
71432: LD_INT 0
71434: ST_TO_ADDR
// hc_name :=  ;
71435: LD_ADDR_OWVAR 26
71439: PUSH
71440: LD_STRING 
71442: ST_TO_ADDR
// hc_gallery :=  ;
71443: LD_ADDR_OWVAR 33
71447: PUSH
71448: LD_STRING 
71450: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
71451: LD_ADDR_OWVAR 31
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: LD_INT 0
71461: PUSH
71462: LD_INT 0
71464: PUSH
71465: LD_INT 0
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: ST_TO_ADDR
// hc_class := class_apeman ;
71474: LD_ADDR_OWVAR 28
71478: PUSH
71479: LD_INT 12
71481: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
71482: CALL_OW 44
71486: PPUSH
71487: LD_INT 1
71489: PPUSH
71490: CALL_OW 51
// end ;
71494: LD_VAR 0 1
71498: RET
// export function hHackBoom ; begin
71499: LD_INT 0
71501: PPUSH
// uc_side := your_side ;
71502: LD_ADDR_OWVAR 20
71506: PUSH
71507: LD_OWVAR 2
71511: ST_TO_ADDR
// uc_nation := 1 ;
71512: LD_ADDR_OWVAR 21
71516: PUSH
71517: LD_INT 1
71519: ST_TO_ADDR
// vc_chassis := us_morphling ;
71520: LD_ADDR_OWVAR 37
71524: PUSH
71525: LD_INT 5
71527: ST_TO_ADDR
// vc_engine := engine_siberite ;
71528: LD_ADDR_OWVAR 39
71532: PUSH
71533: LD_INT 3
71535: ST_TO_ADDR
// vc_control := control_computer ;
71536: LD_ADDR_OWVAR 38
71540: PUSH
71541: LD_INT 3
71543: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
71544: LD_ADDR_OWVAR 40
71548: PUSH
71549: LD_INT 8
71551: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71552: CALL_OW 45
71556: PPUSH
71557: LD_INT 1
71559: PPUSH
71560: CALL_OW 51
// end ; end_of_file
71564: LD_VAR 0 1
71568: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
71569: LD_INT 0
71571: PPUSH
// ar_crane := 88 ;
71572: LD_ADDR_EXP 125
71576: PUSH
71577: LD_INT 88
71579: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71580: LD_ADDR_EXP 120
71584: PUSH
71585: LD_INT 89
71587: ST_TO_ADDR
// us_hack := 99 ;
71588: LD_ADDR_EXP 121
71592: PUSH
71593: LD_INT 99
71595: ST_TO_ADDR
// us_artillery := 97 ;
71596: LD_ADDR_EXP 122
71600: PUSH
71601: LD_INT 97
71603: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71604: LD_ADDR_EXP 123
71608: PUSH
71609: LD_INT 91
71611: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
71612: LD_ADDR_EXP 124
71616: PUSH
71617: LD_INT 92
71619: ST_TO_ADDR
// ru_radar := 98 ;
71620: LD_ADDR_EXP 119
71624: PUSH
71625: LD_INT 98
71627: ST_TO_ADDR
// tech_Artillery := 80 ;
71628: LD_ADDR_EXP 126
71632: PUSH
71633: LD_INT 80
71635: ST_TO_ADDR
// tech_RadMat := 81 ;
71636: LD_ADDR_EXP 127
71640: PUSH
71641: LD_INT 81
71643: ST_TO_ADDR
// tech_BasicTools := 82 ;
71644: LD_ADDR_EXP 128
71648: PUSH
71649: LD_INT 82
71651: ST_TO_ADDR
// tech_Cargo := 83 ;
71652: LD_ADDR_EXP 129
71656: PUSH
71657: LD_INT 83
71659: ST_TO_ADDR
// tech_Track := 84 ;
71660: LD_ADDR_EXP 130
71664: PUSH
71665: LD_INT 84
71667: ST_TO_ADDR
// tech_Crane := 85 ;
71668: LD_ADDR_EXP 131
71672: PUSH
71673: LD_INT 85
71675: ST_TO_ADDR
// tech_Bulldozer := 86 ;
71676: LD_ADDR_EXP 132
71680: PUSH
71681: LD_INT 86
71683: ST_TO_ADDR
// tech_Hovercraft := 87 ;
71684: LD_ADDR_EXP 133
71688: PUSH
71689: LD_INT 87
71691: ST_TO_ADDR
// end ;
71692: LD_VAR 0 1
71696: RET
// every 1 do
71697: GO 71699
71699: DISABLE
// InitGlobalVariables ;
71700: CALL 71569 0 0
71704: END
