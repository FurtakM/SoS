// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export omarStatus , stevensStatus ; export tanksFromIntro ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InitMapConfig ;
  16: CALL 160 0 0
// omarStatus = 0 ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// stevensStatus = 0 ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  36: LD_ADDR_EXP 3
  40: PUSH
  41: LD_STRING 05_TanksIntro_1
  43: PPUSH
  44: EMPTY
  45: PPUSH
  46: CALL_OW 30
  50: ST_TO_ADDR
// actionTime = 0 0$00 ;
  51: LD_ADDR_EXP 4
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  59: LD_ADDR_EXP 7
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
  67: LD_ADDR_EXP 8
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// sawArabianBase = false ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// sawApeman = false ;
  83: LD_ADDR_EXP 6
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// stevensPlaced = false ;
  91: LD_ADDR_EXP 9
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// stevensFollow = false ;
  99: LD_ADDR_EXP 10
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 107: LD_ADDR_EXP 11
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// stevensDepot = false ;
 115: LD_ADDR_EXP 12
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// stevensWasInDepot = false ;
 123: LD_ADDR_EXP 13
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// stevensCanExitMap = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// PrepareRussians ;
 139: CALL 683 0 0
// PrepareArabians ;
 143: CALL 1430 0 0
// Nef_PrepareNature ;
 147: CALL 8711 0 0
// MissionIntro ;
 151: CALL 2204 0 0
// end ; end_of_file
 155: LD_VAR 0 1
 159: RET
// export function InitMapConfig ; begin
 160: LD_INT 0
 162: PPUSH
// BaseMapConfig ;
 163: CALL 176 0 0
// MissionMapConfig ;
 167: CALL 266 0 0
// end ;
 171: LD_VAR 0 1
 175: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 176: LD_INT 0
 178: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 179: LD_ADDR_EXP 15
 183: PUSH
 184: LD_INT 4
 186: PUSH
 187: LD_INT 3
 189: PUSH
 190: LD_INT 1
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: ST_TO_ADDR
// animalsAgression = 0 ;
 229: LD_ADDR_EXP 17
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// debugMode = 1 ;
 237: LD_ADDR_EXP 20
 241: PUSH
 242: LD_INT 1
 244: ST_TO_ADDR
// missionPrefix = 05_ ;
 245: LD_ADDR_EXP 18
 249: PUSH
 250: LD_STRING 05_
 252: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 253: LD_ADDR_EXP 19
 257: PUSH
 258: LD_STRING 04_
 260: ST_TO_ADDR
// end ;
 261: LD_VAR 0 1
 265: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits ; function MissionMapConfig ; begin
 266: LD_INT 0
 268: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 ] [ Difficulty ] ;
 269: LD_ADDR_EXP 21
 273: PUSH
 274: LD_INT 3
 276: PUSH
 277: LD_INT 3
 279: PUSH
 280: LD_INT 4
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: LIST
 287: PUSH
 288: LD_OWVAR 67
 292: ARRAY
 293: ST_TO_ADDR
// arabBreakthrough = [ 100 100$0 , 100 100$0 , 100 100$0 ] [ Difficulty ] ;
 294: LD_ADDR_EXP 22
 298: PUSH
 299: LD_INT 210000
 301: PUSH
 302: LD_INT 210000
 304: PUSH
 305: LD_INT 210000
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: PUSH
 313: LD_OWVAR 67
 317: ARRAY
 318: ST_TO_ADDR
// arabianUnits = [ 4 , 2 , 6 , 3 ] ;
 319: LD_ADDR_EXP 23
 323: PUSH
 324: LD_INT 4
 326: PUSH
 327: LD_INT 2
 329: PUSH
 330: LD_INT 6
 332: PUSH
 333: LD_INT 3
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: LIST
 340: LIST
 341: ST_TO_ADDR
// end ;
 342: LD_VAR 0 1
 346: RET
// every 0 0$1 trigger debugMode do var i ;
 347: LD_EXP 20
 351: IFFALSE 680
 353: GO 355
 355: DISABLE
 356: LD_INT 0
 358: PPUSH
// begin enable ;
 359: ENABLE
// actionTime = actionTime + 0 0$01 ;
 360: LD_ADDR_EXP 4
 364: PUSH
 365: LD_EXP 4
 369: PUSH
 370: LD_INT 35
 372: PLUS
 373: ST_TO_ADDR
// FogOff ( your_side ) ;
 374: LD_OWVAR 2
 378: PPUSH
 379: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 383: LD_ADDR_VAR 0 1
 387: PUSH
 388: LD_INT 22
 390: PUSH
 391: LD_OWVAR 2
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PUSH
 400: LD_INT 2
 402: PUSH
 403: LD_INT 21
 405: PUSH
 406: LD_INT 1
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: LD_INT 21
 415: PUSH
 416: LD_INT 2
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: LIST
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: PPUSH
 432: CALL_OW 69
 436: PUSH
 437: FOR_IN
 438: IFFALSE 454
// SetLives ( i , 1000 ) ;
 440: LD_VAR 0 1
 444: PPUSH
 445: LD_INT 1000
 447: PPUSH
 448: CALL_OW 234
 452: GO 437
 454: POP
 455: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 456: LD_ADDR_VAR 0 1
 460: PUSH
 461: LD_INT 22
 463: PUSH
 464: LD_OWVAR 2
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 21
 475: PUSH
 476: LD_INT 1
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PPUSH
 487: CALL_OW 69
 491: PUSH
 492: FOR_IN
 493: IFFALSE 557
// begin SetSkill ( i , skill_combat , 10 ) ;
 495: LD_VAR 0 1
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: LD_INT 10
 505: PPUSH
 506: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 510: LD_VAR 0 1
 514: PPUSH
 515: LD_INT 2
 517: PPUSH
 518: LD_INT 10
 520: PPUSH
 521: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 525: LD_VAR 0 1
 529: PPUSH
 530: LD_INT 3
 532: PPUSH
 533: LD_INT 10
 535: PPUSH
 536: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 540: LD_VAR 0 1
 544: PPUSH
 545: LD_INT 4
 547: PPUSH
 548: LD_INT 10
 550: PPUSH
 551: CALL_OW 237
// end ;
 555: GO 492
 557: POP
 558: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 559: LD_ADDR_VAR 0 1
 563: PUSH
 564: LD_INT 22
 566: PUSH
 567: LD_OWVAR 2
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: PUSH
 576: LD_INT 2
 578: PUSH
 579: LD_INT 30
 581: PUSH
 582: LD_INT 0
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 30
 591: PUSH
 592: LD_INT 1
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PPUSH
 608: CALL_OW 69
 612: PUSH
 613: FOR_IN
 614: IFFALSE 678
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 616: LD_VAR 0 1
 620: PPUSH
 621: CALL_OW 274
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: LD_INT 9999
 631: PPUSH
 632: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 636: LD_VAR 0 1
 640: PPUSH
 641: CALL_OW 274
 645: PPUSH
 646: LD_INT 2
 648: PPUSH
 649: LD_INT 9999
 651: PPUSH
 652: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 656: LD_VAR 0 1
 660: PPUSH
 661: CALL_OW 274
 665: PPUSH
 666: LD_INT 3
 668: PPUSH
 669: LD_INT 9999
 671: PPUSH
 672: CALL_OW 277
// end ;
 676: GO 613
 678: POP
 679: POP
// end ; end_of_file
 680: PPOPN 1
 682: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 683: LD_INT 0
 685: PPUSH
// PrepareHeroes ;
 686: CALL 695 0 0
// end ;
 690: LD_VAR 0 1
 694: RET
// function PrepareHeroes ; var i , car ; begin
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
 699: PPUSH
// ruCars = [ ] ;
 700: LD_ADDR_EXP 33
 704: PUSH
 705: EMPTY
 706: ST_TO_ADDR
// uc_side = 3 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 3
 714: ST_TO_ADDR
// uc_nation = 3 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 3
 722: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 723: LD_ADDR_EXP 24
 727: PUSH
 728: LD_STRING Burlak
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: LD_INT 3
 736: PPUSH
 737: CALL 6630 0 3
 741: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 742: LD_ADDR_EXP 29
 746: PUSH
 747: LD_STRING Titov
 749: PPUSH
 750: LD_INT 0
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 6630 0 3
 760: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 761: LD_ADDR_EXP 30
 765: PUSH
 766: LD_STRING Dolgov
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: LD_INT 4
 774: PPUSH
 775: CALL 6630 0 3
 779: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
 780: LD_ADDR_EXP 31
 784: PUSH
 785: LD_STRING Lipshchin
 787: PPUSH
 788: LD_INT 0
 790: PPUSH
 791: LD_INT 1
 793: PPUSH
 794: CALL 6630 0 3
 798: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
 799: LD_ADDR_EXP 25
 803: PUSH
 804: LD_STRING Karamazov
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL 6630 0 3
 817: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
 818: LD_ADDR_EXP 26
 822: PUSH
 823: LD_STRING Petrovova
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: CALL 6630 0 3
 836: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
 837: LD_ADDR_EXP 27
 841: PUSH
 842: LD_STRING Gleb
 844: PPUSH
 845: LD_INT 0
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: CALL 6630 0 3
 855: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
 856: LD_ADDR_EXP 28
 860: PUSH
 861: LD_STRING Petrosyan
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: LD_INT 4
 869: PPUSH
 870: CALL 6630 0 3
 874: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
 875: LD_ADDR_EXP 32
 879: PUSH
 880: LD_STRING Platonov
 882: PPUSH
 883: LD_INT 0
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: CALL 6630 0 3
 893: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ] , ru_dojezd , false ) ;
 894: LD_EXP 24
 898: PUSH
 899: LD_EXP 25
 903: PUSH
 904: LD_EXP 26
 908: PUSH
 909: LD_EXP 27
 913: PUSH
 914: LD_EXP 28
 918: PUSH
 919: LD_EXP 29
 923: PUSH
 924: LD_EXP 30
 928: PUSH
 929: LD_EXP 31
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: LD_INT 3
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL 6902 0 3
// for i := 1 to TanksFromIntro do
 954: LD_ADDR_VAR 0 2
 958: PUSH
 959: DOUBLE
 960: LD_INT 1
 962: DEC
 963: ST_TO_ADDR
 964: LD_EXP 3
 968: PUSH
 969: FOR_TO
 970: IFFALSE 1348
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
 972: LD_ADDR_OWVAR 37
 976: PUSH
 977: LD_EXP 3
 981: PUSH
 982: LD_VAR 0 2
 986: ARRAY
 987: PUSH
 988: LD_INT 1
 990: ARRAY
 991: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
 992: LD_ADDR_OWVAR 39
 996: PUSH
 997: LD_EXP 3
1001: PUSH
1002: LD_VAR 0 2
1006: ARRAY
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1012: LD_ADDR_OWVAR 38
1016: PUSH
1017: LD_EXP 3
1021: PUSH
1022: LD_VAR 0 2
1026: ARRAY
1027: PUSH
1028: LD_INT 3
1030: ARRAY
1031: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1032: LD_ADDR_OWVAR 40
1036: PUSH
1037: LD_EXP 3
1041: PUSH
1042: LD_VAR 0 2
1046: ARRAY
1047: PUSH
1048: LD_INT 4
1050: ARRAY
1051: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1052: LD_ADDR_OWVAR 24
1056: PUSH
1057: LD_INT 3
1059: PPUSH
1060: LD_INT 4
1062: PPUSH
1063: CALL_OW 12
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 25
1075: PPUSH
1076: LD_INT 40
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// car := CreateVehicle ;
1084: LD_ADDR_VAR 0 3
1088: PUSH
1089: CALL_OW 45
1093: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1094: LD_ADDR_EXP 33
1098: PUSH
1099: LD_EXP 33
1103: PUSH
1104: LD_VAR 0 3
1108: ADD
1109: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1110: LD_EXP 3
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: PUSH
1121: LD_INT 5
1123: ARRAY
1124: PUSH
1125: LD_STRING Bur
1127: DOUBLE
1128: EQUAL
1129: IFTRUE 1133
1131: GO 1150
1133: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1134: LD_EXP 24
1138: PPUSH
1139: LD_VAR 0 3
1143: PPUSH
1144: CALL_OW 52
1148: GO 1326
1150: LD_STRING Kar
1152: DOUBLE
1153: EQUAL
1154: IFTRUE 1158
1156: GO 1175
1158: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1159: LD_EXP 25
1163: PPUSH
1164: LD_VAR 0 3
1168: PPUSH
1169: CALL_OW 52
1173: GO 1326
1175: LD_STRING Ptr
1177: DOUBLE
1178: EQUAL
1179: IFTRUE 1183
1181: GO 1200
1183: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1184: LD_EXP 26
1188: PPUSH
1189: LD_VAR 0 3
1193: PPUSH
1194: CALL_OW 52
1198: GO 1326
1200: LD_STRING Glb
1202: DOUBLE
1203: EQUAL
1204: IFTRUE 1208
1206: GO 1225
1208: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1209: LD_EXP 27
1213: PPUSH
1214: LD_VAR 0 3
1218: PPUSH
1219: CALL_OW 52
1223: GO 1326
1225: LD_STRING Pet
1227: DOUBLE
1228: EQUAL
1229: IFTRUE 1233
1231: GO 1250
1233: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1234: LD_EXP 28
1238: PPUSH
1239: LD_VAR 0 3
1243: PPUSH
1244: CALL_OW 52
1248: GO 1326
1250: LD_STRING Dol
1252: DOUBLE
1253: EQUAL
1254: IFTRUE 1258
1256: GO 1275
1258: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1259: LD_EXP 30
1263: PPUSH
1264: LD_VAR 0 3
1268: PPUSH
1269: CALL_OW 52
1273: GO 1326
1275: LD_STRING Lip
1277: DOUBLE
1278: EQUAL
1279: IFTRUE 1283
1281: GO 1300
1283: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1284: LD_EXP 31
1288: PPUSH
1289: LD_VAR 0 3
1293: PPUSH
1294: CALL_OW 52
1298: GO 1326
1300: LD_STRING Tit
1302: DOUBLE
1303: EQUAL
1304: IFTRUE 1308
1306: GO 1325
1308: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1309: LD_EXP 29
1313: PPUSH
1314: LD_VAR 0 3
1318: PPUSH
1319: CALL_OW 52
1323: GO 1326
1325: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1326: LD_VAR 0 3
1330: PPUSH
1331: LD_INT 251
1333: PPUSH
1334: LD_INT 800
1336: PPUSH
1337: CALL_OW 12
1341: PPUSH
1342: CALL_OW 234
// end ;
1346: GO 969
1348: POP
1349: POP
// for i in ruCars do
1350: LD_ADDR_VAR 0 2
1354: PUSH
1355: LD_EXP 33
1359: PUSH
1360: FOR_IN
1361: IFFALSE 1380
// PlaceUnitArea ( i , ru_place2 , false ) ;
1363: LD_VAR 0 2
1367: PPUSH
1368: LD_INT 18
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
1378: GO 1360
1380: POP
1381: POP
// RevealFogArea ( 3 , co_vidi ) ;
1382: LD_INT 3
1384: PPUSH
1385: LD_INT 19
1387: PPUSH
1388: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1392: LD_EXP 33
1396: PPUSH
1397: LD_INT 3
1399: PPUSH
1400: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1404: LD_INT 4
1406: PPUSH
1407: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1411: LD_EXP 24
1415: PPUSH
1416: CALL_OW 310
1420: PPUSH
1421: CALL_OW 87
// end ; end_of_file
1425: LD_VAR 0 1
1429: RET
// export Heike , Omar ; export arabianUnitsInBase ; export function PrepareArabians ; begin
1430: LD_INT 0
1432: PPUSH
// arabianUnitsInBase = [ ] ;
1433: LD_ADDR_EXP 36
1437: PUSH
1438: EMPTY
1439: ST_TO_ADDR
// PrepareHeroes ;
1440: CALL 1457 0 0
// PrepareBuildings ;
1444: CALL 1523 0 0
// PrepareUnits ;
1448: CALL 1768 0 0
// end ;
1452: LD_VAR 0 1
1456: RET
// function PrepareHeroes ; begin
1457: LD_INT 0
1459: PPUSH
// uc_side = 2 ;
1460: LD_ADDR_OWVAR 20
1464: PUSH
1465: LD_INT 2
1467: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1468: LD_ADDR_EXP 34
1472: PUSH
1473: LD_STRING Heike
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL 6630 0 3
1486: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1487: LD_ADDR_EXP 35
1491: PUSH
1492: LD_STRING Omar
1494: PPUSH
1495: LD_INT 0
1497: PPUSH
1498: LD_INT 11
1500: PPUSH
1501: CALL 6630 0 3
1505: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1506: LD_EXP 35
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL_OW 52
// end ;
1518: LD_VAR 0 1
1522: RET
// function PrepareBuildings ; var depot ; begin
1523: LD_INT 0
1525: PPUSH
1526: PPUSH
// uc_side = 2 ;
1527: LD_ADDR_OWVAR 20
1531: PUSH
1532: LD_INT 2
1534: ST_TO_ADDR
// uc_nation = nation_arabian ;
1535: LD_ADDR_OWVAR 21
1539: PUSH
1540: LD_INT 2
1542: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1543: LD_ADDR_OWVAR 43
1547: PUSH
1548: LD_EXP 21
1552: ST_TO_ADDR
// bc_type = b_breastwork ;
1553: LD_ADDR_OWVAR 42
1557: PUSH
1558: LD_INT 31
1560: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1561: LD_INT 118
1563: PPUSH
1564: LD_INT 63
1566: PPUSH
1567: LD_INT 1
1569: PPUSH
1570: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1574: LD_INT 120
1576: PPUSH
1577: LD_INT 66
1579: PPUSH
1580: LD_INT 1
1582: PPUSH
1583: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1587: LD_INT 123
1589: PPUSH
1590: LD_INT 73
1592: PPUSH
1593: LD_INT 1
1595: PPUSH
1596: CALL_OW 47
// if Difficulty = 2 then
1600: LD_OWVAR 67
1604: PUSH
1605: LD_INT 2
1607: EQUAL
1608: IFFALSE 1623
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1610: LD_INT 145
1612: PPUSH
1613: LD_INT 83
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 47
// if Difficulty = 3 then
1623: LD_OWVAR 67
1627: PUSH
1628: LD_INT 3
1630: EQUAL
1631: IFFALSE 1659
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1633: LD_INT 145
1635: PPUSH
1636: LD_INT 83
1638: PPUSH
1639: LD_INT 0
1641: PPUSH
1642: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1646: LD_INT 151
1648: PPUSH
1649: LD_INT 81
1651: PPUSH
1652: LD_INT 5
1654: PPUSH
1655: CALL_OW 47
// end ; bc_type = b_depot ;
1659: LD_ADDR_OWVAR 42
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1667: LD_ADDR_VAR 0 2
1671: PUSH
1672: LD_INT 124
1674: PPUSH
1675: LD_INT 60
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 47
1685: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1686: LD_VAR 0 2
1690: PPUSH
1691: CALL_OW 274
1695: PPUSH
1696: LD_INT 1
1698: PPUSH
1699: LD_INT 3000
1701: PPUSH
1702: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1706: LD_INT 131
1708: PPUSH
1709: LD_INT 51
1711: PPUSH
1712: LD_INT 2
1714: PPUSH
1715: CALL_OW 441
// bc_type = b_oil_mine ;
1719: LD_ADDR_OWVAR 42
1723: PUSH
1724: LD_INT 29
1726: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
1727: LD_INT 131
1729: PPUSH
1730: LD_INT 51
1732: PPUSH
1733: LD_INT 2
1735: PPUSH
1736: CALL_OW 47
// if Difficulty >= 2 then
1740: LD_OWVAR 67
1744: PUSH
1745: LD_INT 2
1747: GREATEREQUAL
1748: IFFALSE 1763
// SetTech ( tech_weap2 , 2 , state_researched ) ;
1750: LD_INT 52
1752: PPUSH
1753: LD_INT 2
1755: PPUSH
1756: LD_INT 2
1758: PPUSH
1759: CALL_OW 322
// end ;
1763: LD_VAR 0 1
1767: RET
// function PrepareUnits ; var i , unit , bunker ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// uc_side = 2 ;
1774: LD_ADDR_OWVAR 20
1778: PUSH
1779: LD_INT 2
1781: ST_TO_ADDR
// uc_nation = 2 ;
1782: LD_ADDR_OWVAR 21
1786: PUSH
1787: LD_INT 2
1789: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
1790: LD_ADDR_VAR 0 4
1794: PUSH
1795: LD_INT 22
1797: PUSH
1798: LD_INT 2
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 30
1807: PUSH
1808: LD_INT 31
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PPUSH
1819: CALL_OW 69
1823: PUSH
1824: FOR_IN
1825: IFFALSE 1881
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
1827: LD_INT 0
1829: PPUSH
1830: LD_EXP 21
1834: PPUSH
1835: CALL_OW 381
// unit = CreateHuman ;
1839: LD_ADDR_VAR 0 3
1843: PUSH
1844: CALL_OW 44
1848: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
1849: LD_VAR 0 3
1853: PPUSH
1854: LD_VAR 0 4
1858: PPUSH
1859: CALL 7215 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
1863: LD_ADDR_EXP 36
1867: PUSH
1868: LD_EXP 36
1872: PUSH
1873: LD_VAR 0 3
1877: ADD
1878: ST_TO_ADDR
// end ;
1879: GO 1824
1881: POP
1882: POP
// for i := 1 to arabianUnits [ 1 ] do
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: DOUBLE
1889: LD_INT 1
1891: DEC
1892: ST_TO_ADDR
1893: LD_EXP 23
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PUSH
1902: FOR_TO
1903: IFFALSE 1960
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
1905: LD_INT 0
1907: PPUSH
1908: LD_EXP 21
1912: PPUSH
1913: CALL_OW 381
// unit = CreateHuman ;
1917: LD_ADDR_VAR 0 3
1921: PUSH
1922: CALL_OW 44
1926: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
1927: LD_VAR 0 3
1931: PPUSH
1932: LD_INT 38
1934: PPUSH
1935: LD_INT 0
1937: PPUSH
1938: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
1942: LD_ADDR_EXP 36
1946: PUSH
1947: LD_EXP 36
1951: PUSH
1952: LD_VAR 0 3
1956: ADD
1957: ST_TO_ADDR
// end ;
1958: GO 1902
1960: POP
1961: POP
// for i := 1 to arabianUnits [ 2 ] do
1962: LD_ADDR_VAR 0 2
1966: PUSH
1967: DOUBLE
1968: LD_INT 1
1970: DEC
1971: ST_TO_ADDR
1972: LD_EXP 23
1976: PUSH
1977: LD_INT 2
1979: ARRAY
1980: PUSH
1981: FOR_TO
1982: IFFALSE 2039
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
1984: LD_INT 0
1986: PPUSH
1987: LD_EXP 21
1991: PPUSH
1992: CALL_OW 382
// unit = CreateHuman ;
1996: LD_ADDR_VAR 0 3
2000: PUSH
2001: CALL_OW 44
2005: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2006: LD_VAR 0 3
2010: PPUSH
2011: LD_INT 38
2013: PPUSH
2014: LD_INT 0
2016: PPUSH
2017: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2021: LD_ADDR_EXP 36
2025: PUSH
2026: LD_EXP 36
2030: PUSH
2031: LD_VAR 0 3
2035: ADD
2036: ST_TO_ADDR
// end ;
2037: GO 1981
2039: POP
2040: POP
// for i := 1 to arabianUnits [ 3 ] do
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: DOUBLE
2047: LD_INT 1
2049: DEC
2050: ST_TO_ADDR
2051: LD_EXP 23
2055: PUSH
2056: LD_INT 3
2058: ARRAY
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2118
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2063: LD_INT 0
2065: PPUSH
2066: LD_EXP 21
2070: PPUSH
2071: CALL_OW 383
// unit = CreateHuman ;
2075: LD_ADDR_VAR 0 3
2079: PUSH
2080: CALL_OW 44
2084: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 38
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2100: LD_ADDR_EXP 36
2104: PUSH
2105: LD_EXP 36
2109: PUSH
2110: LD_VAR 0 3
2114: ADD
2115: ST_TO_ADDR
// end ;
2116: GO 2060
2118: POP
2119: POP
// for i := 1 to arabianUnits [ 4 ] do
2120: LD_ADDR_VAR 0 2
2124: PUSH
2125: DOUBLE
2126: LD_INT 1
2128: DEC
2129: ST_TO_ADDR
2130: LD_EXP 23
2134: PUSH
2135: LD_INT 4
2137: ARRAY
2138: PUSH
2139: FOR_TO
2140: IFFALSE 2197
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2142: LD_INT 0
2144: PPUSH
2145: LD_EXP 21
2149: PPUSH
2150: CALL_OW 384
// unit = CreateHuman ;
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: CALL_OW 44
2163: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2164: LD_VAR 0 3
2168: PPUSH
2169: LD_INT 38
2171: PPUSH
2172: LD_INT 0
2174: PPUSH
2175: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2179: LD_ADDR_EXP 36
2183: PUSH
2184: LD_EXP 36
2188: PUSH
2189: LD_VAR 0 3
2193: ADD
2194: ST_TO_ADDR
// end ;
2195: GO 2139
2197: POP
2198: POP
// end ; end_of_file
2199: LD_VAR 0 1
2203: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
2204: LD_INT 0
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
2210: LD_ADDR_VAR 0 3
2214: PUSH
2215: LD_INT 66
2217: PUSH
2218: LD_INT 87
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: LD_INT 66
2227: PUSH
2228: LD_INT 86
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 67
2237: PUSH
2238: LD_INT 86
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 69
2247: PUSH
2248: LD_INT 87
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 70
2257: PUSH
2258: LD_INT 88
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 71
2267: PUSH
2268: LD_INT 89
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 72
2277: PUSH
2278: LD_INT 90
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 72
2287: PUSH
2288: LD_INT 91
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: ST_TO_ADDR
// wait ( 0 0$8 ) ;
2305: LD_INT 280
2307: PPUSH
2308: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
2312: LD_EXP 24
2316: PPUSH
2317: LD_STRING DStart-Bur-1
2319: PPUSH
2320: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
2324: LD_EXP 32
2328: PPUSH
2329: LD_STRING DStart-Pla-1
2331: PPUSH
2332: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
2336: LD_EXP 24
2340: PPUSH
2341: LD_STRING DStart-Bur-2
2343: PPUSH
2344: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
2348: LD_EXP 32
2352: PPUSH
2353: LD_STRING DStart-Pla-2
2355: PPUSH
2356: CALL_OW 94
// x = 0 ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_INT 0
2367: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
2368: LD_ADDR_VAR 0 2
2372: PUSH
2373: LD_INT 22
2375: PUSH
2376: LD_INT 3
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 21
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PPUSH
2397: CALL_OW 69
2401: PUSH
2402: FOR_IN
2403: IFFALSE 2491
// begin ComExitVehicle ( unit ) ;
2405: LD_VAR 0 2
2409: PPUSH
2410: CALL_OW 121
// wait ( 0 0$1 ) ;
2414: LD_INT 35
2416: PPUSH
2417: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
2421: LD_VAR 0 2
2425: PPUSH
2426: LD_VAR 0 3
2430: PUSH
2431: LD_VAR 0 4
2435: ARRAY
2436: PUSH
2437: LD_INT 1
2439: ARRAY
2440: PPUSH
2441: LD_VAR 0 3
2445: PUSH
2446: LD_VAR 0 4
2450: ARRAY
2451: PUSH
2452: LD_INT 2
2454: ARRAY
2455: PPUSH
2456: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 69
2467: PPUSH
2468: LD_INT 96
2470: PPUSH
2471: CALL_OW 178
// x = x + 1 ;
2475: LD_ADDR_VAR 0 4
2479: PUSH
2480: LD_VAR 0 4
2484: PUSH
2485: LD_INT 1
2487: PLUS
2488: ST_TO_ADDR
// end ;
2489: GO 2402
2491: POP
2492: POP
// Say ( Karamazov , DDoubts-Kar-1 ) ;
2493: LD_EXP 25
2497: PPUSH
2498: LD_STRING DDoubts-Kar-1
2500: PPUSH
2501: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
2505: LD_EXP 26
2509: PPUSH
2510: LD_STRING DDoubts-Ptr-1
2512: PPUSH
2513: CALL_OW 88
// Say ( Lipshchin , DDoubts-Bur-1 ) ;
2517: LD_EXP 31
2521: PPUSH
2522: LD_STRING DDoubts-Bur-1
2524: PPUSH
2525: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
2529: LD_EXP 25
2533: PPUSH
2534: LD_STRING DDoubts-Kar-2
2536: PPUSH
2537: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
2541: LD_EXP 27
2545: PPUSH
2546: LD_STRING DDoubts-Glb-2
2548: PPUSH
2549: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
2553: LD_EXP 24
2557: PPUSH
2558: LD_STRING DDoubts-Bur-2
2560: PPUSH
2561: CALL_OW 88
// InGameOff ;
2565: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
2569: LD_STRING MBegin
2571: PPUSH
2572: CALL_OW 337
// SaveForQuickRestart ;
2576: CALL_OW 22
// BuildBase ;
2580: CALL 9382 0 0
// end ;
2584: LD_VAR 0 1
2588: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
2589: LD_EXP 5
2593: NOT
2594: IFFALSE 2840
2596: GO 2598
2598: DISABLE
2599: LD_INT 0
2601: PPUSH
// begin enable ;
2602: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ f_side , 2 ] ) do
2603: LD_ADDR_VAR 0 1
2607: PUSH
2608: LD_INT 34
2610: PPUSH
2611: LD_INT 22
2613: PUSH
2614: LD_INT 2
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 70
2625: PUSH
2626: FOR_IN
2627: IFFALSE 2838
// if See ( 3 , unit ) then
2629: LD_INT 3
2631: PPUSH
2632: LD_VAR 0 1
2636: PPUSH
2637: CALL_OW 292
2641: IFFALSE 2836
// begin sawArabianBase = true ;
2643: LD_ADDR_EXP 5
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: CALL_OW 87
// DialogueOn ;
2660: CALL_OW 6
// if IsOk ( Lipshchin ) then
2664: LD_EXP 31
2668: PPUSH
2669: CALL_OW 302
2673: IFFALSE 2687
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
2675: LD_EXP 31
2679: PPUSH
2680: LD_STRING DArabs-RSol1-1
2682: PPUSH
2683: CALL_OW 88
// if IsOk ( Karamazov ) then
2687: LD_EXP 25
2691: PPUSH
2692: CALL_OW 302
2696: IFFALSE 2710
// Say ( Karamazov , DArabs-Kar-1 ) ;
2698: LD_EXP 25
2702: PPUSH
2703: LD_STRING DArabs-Kar-1
2705: PPUSH
2706: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
2710: LD_EXP 24
2714: PPUSH
2715: LD_STRING DArabs-Bur-1
2717: PPUSH
2718: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
2722: LD_EXP 32
2726: PPUSH
2727: LD_STRING DArabs-Pla-1
2729: PPUSH
2730: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
2734: LD_EXP 35
2738: PPUSH
2739: LD_STRING DSurrender-Omar-1
2741: PPUSH
2742: CALL_OW 88
// case Query ( QSurrender ) of 1 :
2746: LD_STRING QSurrender
2748: PPUSH
2749: CALL_OW 97
2753: PUSH
2754: LD_INT 1
2756: DOUBLE
2757: EQUAL
2758: IFTRUE 2762
2760: GO 2781
2762: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
2763: LD_EXP 24
2767: PPUSH
2768: LD_STRING DQrSurrender#1-Bur-1
2770: PPUSH
2771: CALL_OW 88
// Lose_Survive ;
2775: CALL 8387 0 0
// end ; 2 :
2779: GO 2828
2781: LD_INT 2
2783: DOUBLE
2784: EQUAL
2785: IFTRUE 2789
2787: GO 2804
2789: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
2790: LD_EXP 24
2794: PPUSH
2795: LD_STRING DQrSurrender#2-Bur-1
2797: PPUSH
2798: CALL_OW 88
2802: GO 2828
2804: LD_INT 3
2806: DOUBLE
2807: EQUAL
2808: IFTRUE 2812
2810: GO 2827
2812: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
2813: LD_EXP 24
2817: PPUSH
2818: LD_STRING DQrSurrender#3-Bur-1
2820: PPUSH
2821: CALL_OW 88
2825: GO 2828
2827: POP
// DialogueOff ;
2828: CALL_OW 7
// exit ;
2832: POP
2833: POP
2834: GO 2840
// end ;
2836: GO 2626
2838: POP
2839: POP
// end ;
2840: PPOPN 1
2842: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
2843: LD_EXP 6
2847: NOT
2848: PUSH
2849: LD_INT 1
2851: PPUSH
2852: LD_INT 3
2854: PPUSH
2855: CALL_OW 321
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: AND
2864: IFFALSE 3229
2866: GO 2868
2868: DISABLE
2869: LD_INT 0
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2874: LD_ADDR_VAR 0 1
2878: PUSH
2879: LD_INT 22
2881: PUSH
2882: LD_INT 0
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: LD_INT 25
2891: PUSH
2892: LD_INT 12
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: PPUSH
2903: CALL_OW 69
2907: PUSH
2908: FOR_IN
2909: IFFALSE 3227
// if See ( 3 , unit ) then
2911: LD_INT 3
2913: PPUSH
2914: LD_VAR 0 1
2918: PPUSH
2919: CALL_OW 292
2923: IFFALSE 3225
// begin sawApeman = true ;
2925: LD_ADDR_EXP 6
2929: PUSH
2930: LD_INT 1
2932: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: LD_INT 22
2940: PUSH
2941: LD_INT 3
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 21
2950: PUSH
2951: LD_INT 1
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PUSH
2958: LD_INT 26
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 50
2970: PUSH
2971: EMPTY
2972: LIST
2973: PUSH
2974: LD_INT 2
2976: PUSH
2977: LD_INT 25
2979: PUSH
2980: LD_INT 1
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: PUSH
2987: LD_INT 25
2989: PUSH
2990: LD_INT 2
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 25
2999: PUSH
3000: LD_INT 3
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 25
3009: PUSH
3010: LD_INT 4
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: PPUSH
3031: CALL_OW 69
3035: PPUSH
3036: LD_VAR 0 1
3040: PPUSH
3041: CALL_OW 74
3045: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: CALL_OW 87
// DialogueOn ;
3055: CALL_OW 6
// if nearUnit = Burlak then
3059: LD_VAR 0 2
3063: PUSH
3064: LD_EXP 24
3068: EQUAL
3069: IFFALSE 3085
// Say ( Burlak , DApeSpot-Bur-1a ) else
3071: LD_EXP 24
3075: PPUSH
3076: LD_STRING DApeSpot-Bur-1a
3078: PPUSH
3079: CALL_OW 88
3083: GO 3097
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
3085: LD_VAR 0 2
3089: PPUSH
3090: LD_STRING DApeSpot-RSol1-1
3092: PPUSH
3093: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
3097: LD_EXP 24
3101: PPUSH
3102: LD_STRING DApeSpot-Bur-1
3104: PPUSH
3105: CALL_OW 88
// if IsOK ( Petrosyan ) then
3109: LD_EXP 28
3113: PPUSH
3114: CALL_OW 302
3118: IFFALSE 3217
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
3120: LD_EXP 28
3124: PPUSH
3125: LD_STRING DApeSpot-Pty-1
3127: PPUSH
3128: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
3132: LD_INT 22
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PUSH
3142: LD_INT 21
3144: PUSH
3145: LD_INT 3
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: LD_INT 30
3157: PUSH
3158: LD_INT 6
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: PUSH
3165: LD_INT 30
3167: PUSH
3168: LD_INT 7
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: LIST
3184: PPUSH
3185: CALL_OW 69
3189: IFFALSE 3205
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
3191: LD_EXP 28
3195: PPUSH
3196: LD_STRING DApeSpot-Pty-1a
3198: PPUSH
3199: CALL_OW 88
3203: GO 3217
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
3205: LD_EXP 28
3209: PPUSH
3210: LD_STRING DApeSpot-Pty-1b
3212: PPUSH
3213: CALL_OW 88
// end ; DialogueOff ;
3217: CALL_OW 7
// exit ;
3221: POP
3222: POP
3223: GO 3229
// end ;
3225: GO 2908
3227: POP
3228: POP
// end ;
3229: PPOPN 2
3231: END
// every 2 2$30 trigger sawApeman and IsOk ( Petrosyan ) do
3232: LD_EXP 6
3236: PUSH
3237: LD_EXP 28
3241: PPUSH
3242: CALL_OW 302
3246: AND
3247: IFFALSE 3264
3249: GO 3251
3251: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
3252: LD_EXP 28
3256: PPUSH
3257: LD_STRING DApeLab-Pty-1
3259: PPUSH
3260: CALL_OW 88
3264: END
// export function Dial_ResearchApeLang ; begin
3265: LD_INT 0
3267: PPUSH
// DialogueOn ;
3268: CALL_OW 6
// if IsOK ( Petrosyan ) then
3272: LD_EXP 28
3276: PPUSH
3277: CALL_OW 302
3281: IFFALSE 3367
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
3283: LD_EXP 28
3287: PPUSH
3288: LD_STRING DApeLangCompl-Pty-1
3290: PPUSH
3291: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
3295: LD_EXP 24
3299: PPUSH
3300: LD_STRING DApeLangCompl-Bur-1
3302: PPUSH
3303: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
3307: LD_EXP 28
3311: PPUSH
3312: LD_STRING DApeLangCompl-Pty-2
3314: PPUSH
3315: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
3319: LD_EXP 24
3323: PPUSH
3324: LD_STRING DApeLangCompl-Bur-2
3326: PPUSH
3327: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
3331: LD_EXP 28
3335: PPUSH
3336: LD_STRING DApeLangCompl-Pty-3
3338: PPUSH
3339: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
3343: LD_EXP 24
3347: PPUSH
3348: LD_STRING DApeLangCompl-Bur-3
3350: PPUSH
3351: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
3355: LD_EXP 28
3359: PPUSH
3360: LD_STRING DApeLangCompl-Pty-4
3362: PPUSH
3363: CALL_OW 88
// end ; DialogueOff ;
3367: CALL_OW 7
// end ;
3371: LD_VAR 0 1
3375: RET
// export function Dial_TameApe ( sci ) ; begin
3376: LD_INT 0
3378: PPUSH
// dial_tameApeBlocker = true ;
3379: LD_ADDR_EXP 7
3383: PUSH
3384: LD_INT 1
3386: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
3387: LD_VAR 0 1
3391: PPUSH
3392: CALL_OW 258
3396: PUSH
3397: LD_INT 1
3399: EQUAL
3400: IFFALSE 3416
// Say ( sci , DApeTame-Sci1-1 ) else
3402: LD_VAR 0 1
3406: PPUSH
3407: LD_STRING DApeTame-Sci1-1
3409: PPUSH
3410: CALL_OW 88
3414: GO 3580
// begin if IsOK ( Petrosyan ) then
3416: LD_EXP 28
3420: PPUSH
3421: CALL_OW 302
3425: IFFALSE 3441
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
3427: LD_EXP 28
3431: PPUSH
3432: LD_STRING DApeTame-Sci1-1
3434: PPUSH
3435: CALL_OW 88
3439: GO 3580
// if IsOK ( Dolgov ) then
3441: LD_EXP 30
3445: PPUSH
3446: CALL_OW 302
3450: IFFALSE 3466
// Say ( Dolgov , DApeTame-Sci1-1 ) else
3452: LD_EXP 30
3456: PPUSH
3457: LD_STRING DApeTame-Sci1-1
3459: PPUSH
3460: CALL_OW 88
3464: GO 3580
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
3466: LD_INT 22
3468: PUSH
3469: LD_INT 3
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: PUSH
3476: LD_INT 21
3478: PUSH
3479: LD_INT 1
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 26
3488: PUSH
3489: LD_INT 1
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: LD_INT 50
3498: PUSH
3499: EMPTY
3500: LIST
3501: PUSH
3502: LD_INT 2
3504: PUSH
3505: LD_INT 25
3507: PUSH
3508: LD_INT 1
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 25
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: LD_INT 25
3527: PUSH
3528: LD_INT 3
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PUSH
3535: LD_INT 25
3537: PUSH
3538: LD_INT 4
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: PPUSH
3559: CALL_OW 69
3563: PPUSH
3564: LD_STRING DApeTame-Sci1-1
3566: PPUSH
3567: LD_STRING 
3569: PPUSH
3570: LD_INT 0
3572: PPUSH
3573: LD_INT 1
3575: PPUSH
3576: CALL 6947 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
3580: LD_EXP 24
3584: PPUSH
3585: LD_STRING DApeTame-Bur-1
3587: PPUSH
3588: CALL_OW 88
// end ;
3592: LD_VAR 0 2
3596: RET
// export function Dial_ApeEnterLab ; begin
3597: LD_INT 0
3599: PPUSH
// dial_apeEnterLabBlocker = true ;
3600: LD_ADDR_EXP 8
3604: PUSH
3605: LD_INT 1
3607: ST_TO_ADDR
// DialogueOn ;
3608: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
3612: LD_EXP 24
3616: PPUSH
3617: LD_STRING DApeWorkSol-Bur-1
3619: PPUSH
3620: CALL_OW 88
// if IsOK ( Petrosyan ) then
3624: LD_EXP 28
3628: PPUSH
3629: CALL_OW 302
3633: IFFALSE 3649
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
3635: LD_EXP 28
3639: PPUSH
3640: LD_STRING DApeWorkSol-Pty-1
3642: PPUSH
3643: CALL_OW 88
3647: GO 3788
// if IsOK ( Dolgov ) then
3649: LD_EXP 30
3653: PPUSH
3654: CALL_OW 302
3658: IFFALSE 3674
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
3660: LD_EXP 30
3664: PPUSH
3665: LD_STRING DApeWorkSol-Pty-1
3667: PPUSH
3668: CALL_OW 88
3672: GO 3788
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
3674: LD_INT 22
3676: PUSH
3677: LD_INT 3
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: PUSH
3684: LD_INT 21
3686: PUSH
3687: LD_INT 1
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 26
3696: PUSH
3697: LD_INT 1
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: LD_INT 50
3706: PUSH
3707: EMPTY
3708: LIST
3709: PUSH
3710: LD_INT 2
3712: PUSH
3713: LD_INT 25
3715: PUSH
3716: LD_INT 1
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 25
3725: PUSH
3726: LD_INT 2
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 25
3735: PUSH
3736: LD_INT 3
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 25
3745: PUSH
3746: LD_INT 4
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PPUSH
3767: CALL_OW 69
3771: PPUSH
3772: LD_STRING DApeWorkSol-Pty-1
3774: PPUSH
3775: LD_STRING 
3777: PPUSH
3778: LD_INT 0
3780: PPUSH
3781: LD_INT 1
3783: PPUSH
3784: CALL 6947 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
3788: LD_EXP 24
3792: PPUSH
3793: LD_STRING DApeWorkSol-Bur-2
3795: PPUSH
3796: CALL_OW 88
// DialogueOff ;
3800: CALL_OW 7
// end ;
3804: LD_VAR 0 1
3808: RET
// export function Dial_ResearchApePsych ; begin
3809: LD_INT 0
3811: PPUSH
// DialogueOn ;
3812: CALL_OW 6
// if IsOK ( Petrosyan ) then
3816: LD_EXP 28
3820: PPUSH
3821: CALL_OW 302
3825: IFFALSE 3841
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
3827: LD_EXP 28
3831: PPUSH
3832: LD_STRING DApeWorkCompl-Pty-1
3834: PPUSH
3835: CALL_OW 88
3839: GO 3980
// if IsOK ( Dolgov ) then
3841: LD_EXP 30
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3866
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
3852: LD_EXP 30
3856: PPUSH
3857: LD_STRING DApeWorkCompl-Pty-1
3859: PPUSH
3860: CALL_OW 88
3864: GO 3980
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
3866: LD_INT 22
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PUSH
3876: LD_INT 21
3878: PUSH
3879: LD_INT 1
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: LD_INT 26
3888: PUSH
3889: LD_INT 1
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 50
3898: PUSH
3899: EMPTY
3900: LIST
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: LD_INT 25
3907: PUSH
3908: LD_INT 1
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: LD_INT 25
3917: PUSH
3918: LD_INT 2
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: LD_INT 25
3927: PUSH
3928: LD_INT 3
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PUSH
3935: LD_INT 25
3937: PUSH
3938: LD_INT 4
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: PPUSH
3959: CALL_OW 69
3963: PPUSH
3964: LD_STRING DApeWorkCompl-Pty-1
3966: PPUSH
3967: LD_STRING 
3969: PPUSH
3970: LD_INT 0
3972: PPUSH
3973: LD_INT 1
3975: PPUSH
3976: CALL 6947 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
3980: LD_EXP 24
3984: PPUSH
3985: LD_STRING DApeWorkCompl-Bur-1
3987: PPUSH
3988: CALL_OW 88
// DialogueOff ;
3992: CALL_OW 7
// end ;
3996: LD_VAR 0 1
4000: RET
// export function Dial_ResearchApeAgress ; begin
4001: LD_INT 0
4003: PPUSH
// DialogueOn ;
4004: CALL_OW 6
// if IsOK ( Petrosyan ) then
4008: LD_EXP 28
4012: PPUSH
4013: CALL_OW 302
4017: IFFALSE 4033
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
4019: LD_EXP 28
4023: PPUSH
4024: LD_STRING DApeSolCompl-Pty-1
4026: PPUSH
4027: CALL_OW 88
4031: GO 4172
// if IsOK ( Dolgov ) then
4033: LD_EXP 30
4037: PPUSH
4038: CALL_OW 302
4042: IFFALSE 4058
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
4044: LD_EXP 30
4048: PPUSH
4049: LD_STRING DApeSolCompl-Pty-1
4051: PPUSH
4052: CALL_OW 88
4056: GO 4172
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
4058: LD_INT 22
4060: PUSH
4061: LD_INT 3
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: LD_INT 1
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 26
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 50
4090: PUSH
4091: EMPTY
4092: LIST
4093: PUSH
4094: LD_INT 2
4096: PUSH
4097: LD_INT 25
4099: PUSH
4100: LD_INT 1
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PUSH
4107: LD_INT 25
4109: PUSH
4110: LD_INT 2
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 25
4119: PUSH
4120: LD_INT 3
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: LD_INT 25
4129: PUSH
4130: LD_INT 4
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: PPUSH
4151: CALL_OW 69
4155: PPUSH
4156: LD_STRING DApeSolCompl-Pty-1
4158: PPUSH
4159: LD_STRING 
4161: PPUSH
4162: LD_INT 0
4164: PPUSH
4165: LD_INT 1
4167: PPUSH
4168: CALL 6947 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
4172: LD_EXP 24
4176: PPUSH
4177: LD_STRING DApeSolCompl-Bur-1
4179: PPUSH
4180: CALL_OW 88
// DialogueOff ;
4184: CALL_OW 7
// end ;
4188: LD_VAR 0 1
4192: RET
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
4193: LD_INT 33
4195: PPUSH
4196: LD_INT 22
4198: PUSH
4199: LD_INT 3
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 21
4208: PUSH
4209: LD_INT 1
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: LD_INT 26
4218: PUSH
4219: LD_INT 1
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: LD_INT 50
4228: PUSH
4229: EMPTY
4230: LIST
4231: PUSH
4232: LD_INT 2
4234: PUSH
4235: LD_INT 25
4237: PUSH
4238: LD_INT 1
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 2
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 3
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 25
4267: PUSH
4268: LD_INT 4
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: PPUSH
4289: CALL_OW 70
4293: PUSH
4294: LD_EXP 24
4298: PUSH
4299: EMPTY
4300: LIST
4301: DIFF
4302: PUSH
4303: LD_INT 22
4305: PUSH
4306: LD_INT 3
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: LD_INT 21
4315: PUSH
4316: LD_INT 3
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: PUSH
4323: LD_INT 30
4325: PUSH
4326: LD_INT 0
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: LD_INT 50
4335: PUSH
4336: EMPTY
4337: LIST
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PPUSH
4345: CALL_OW 69
4349: AND
4350: IFFALSE 4374
4352: GO 4354
4354: DISABLE
// begin PrepareStevens ;
4355: CALL 9332 0 0
// wait ( 0 0$1.5 ) ;
4359: LD_INT 52
4361: PPUSH
4362: CALL_OW 67
// stevensPlaced = true ;
4366: LD_ADDR_EXP 9
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// end ;
4374: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced do var nearUnit ;
4375: LD_INT 3
4377: PPUSH
4378: LD_EXP 37
4382: PPUSH
4383: CALL_OW 292
4387: PUSH
4388: LD_EXP 9
4392: AND
4393: IFFALSE 4735
4395: GO 4397
4397: DISABLE
4398: LD_INT 0
4400: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
4401: LD_ADDR_VAR 0 1
4405: PUSH
4406: LD_INT 22
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 21
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 26
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: LD_INT 50
4438: PUSH
4439: EMPTY
4440: LIST
4441: PUSH
4442: LD_INT 2
4444: PUSH
4445: LD_INT 25
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 25
4457: PUSH
4458: LD_INT 2
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 25
4467: PUSH
4468: LD_INT 3
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: LD_INT 25
4477: PUSH
4478: LD_INT 4
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: PPUSH
4499: CALL_OW 69
4503: PPUSH
4504: LD_EXP 37
4508: PPUSH
4509: CALL_OW 74
4513: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
4514: LD_EXP 37
4518: PPUSH
4519: CALL_OW 87
// InGameOn ;
4523: CALL_OW 8
// DialogueOn ;
4527: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
4531: LD_VAR 0 1
4535: PPUSH
4536: LD_STRING DStevens-RSol1-1
4538: PPUSH
4539: CALL_OW 88
// DialogueOff ;
4543: CALL_OW 7
// wait ( 0 0$1.5 ) ;
4547: LD_INT 52
4549: PPUSH
4550: CALL_OW 67
// if IsOK ( Petrosyan ) then
4554: LD_EXP 28
4558: PPUSH
4559: CALL_OW 302
4563: IFFALSE 4731
// begin SetSide ( Stevens , 6 ) ;
4565: LD_EXP 37
4569: PPUSH
4570: LD_INT 6
4572: PPUSH
4573: CALL_OW 235
// DialogueOn ;
4577: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
4581: LD_EXP 37
4585: PPUSH
4586: LD_STRING DStevens-Huck-1
4588: PPUSH
4589: CALL_OW 88
// if nearUnit = Petrosyan then
4593: LD_VAR 0 1
4597: PUSH
4598: LD_EXP 28
4602: EQUAL
4603: IFFALSE 4699
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
4605: LD_EXP 28
4609: PPUSH
4610: LD_STRING DStevens-Pty-1a
4612: PPUSH
4613: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
4617: LD_EXP 37
4621: PPUSH
4622: LD_STRING DStevens-Huck-2
4624: PPUSH
4625: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
4629: LD_EXP 28
4633: PPUSH
4634: LD_STRING DStevens-Pty-2
4636: PPUSH
4637: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
4641: LD_EXP 37
4645: PPUSH
4646: LD_STRING DStevens-Huck-3
4648: PPUSH
4649: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
4653: LD_EXP 28
4657: PPUSH
4658: LD_STRING DStevens-Pty-3
4660: PPUSH
4661: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
4665: LD_EXP 37
4669: PPUSH
4670: LD_STRING DStevens-Huck-4
4672: PPUSH
4673: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
4677: LD_EXP 28
4681: PPUSH
4682: LD_STRING DStevens-Pty-4
4684: PPUSH
4685: CALL_OW 88
// stevensFollow = true ;
4689: LD_ADDR_EXP 10
4693: PUSH
4694: LD_INT 1
4696: ST_TO_ADDR
// end else
4697: GO 4727
// begin stevensFollow = true ;
4699: LD_ADDR_EXP 10
4703: PUSH
4704: LD_INT 1
4706: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
4707: LD_ADDR_EXP 11
4711: PUSH
4712: LD_INT 1
4714: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
4715: LD_EXP 28
4719: PPUSH
4720: LD_STRING DStevens-Pty-1
4722: PPUSH
4723: CALL_OW 88
// end ; DialogueOff ;
4727: CALL_OW 7
// end ; InGameOff ;
4731: CALL_OW 9
// end ;
4735: PPOPN 1
4737: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) do
4738: LD_EXP 11
4742: PUSH
4743: LD_EXP 28
4747: PPUSH
4748: LD_EXP 37
4752: PPUSH
4753: CALL_OW 296
4757: PUSH
4758: LD_INT 20
4760: LESS
4761: AND
4762: PUSH
4763: LD_EXP 28
4767: PPUSH
4768: CALL_OW 302
4772: AND
4773: IFFALSE 4878
4775: GO 4777
4777: DISABLE
// begin stevensWantTalkPetrosyan = false ;
4778: LD_ADDR_EXP 11
4782: PUSH
4783: LD_INT 0
4785: ST_TO_ADDR
// DialogueOn ;
4786: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
4790: LD_EXP 28
4794: PPUSH
4795: LD_STRING DStevens-Pty-1a
4797: PPUSH
4798: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
4802: LD_EXP 37
4806: PPUSH
4807: LD_STRING DStevens-Huck-2
4809: PPUSH
4810: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
4814: LD_EXP 28
4818: PPUSH
4819: LD_STRING DStevens-Pty-2
4821: PPUSH
4822: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
4826: LD_EXP 37
4830: PPUSH
4831: LD_STRING DStevens-Huck-3
4833: PPUSH
4834: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
4838: LD_EXP 28
4842: PPUSH
4843: LD_STRING DStevens-Pty-3
4845: PPUSH
4846: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
4850: LD_EXP 37
4854: PPUSH
4855: LD_STRING DStevens-Huck-4
4857: PPUSH
4858: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
4862: LD_EXP 28
4866: PPUSH
4867: LD_STRING DStevens-Pty-4
4869: PPUSH
4870: CALL_OW 88
// DialogueOff ;
4874: CALL_OW 7
// end ;
4878: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and IsOK ( Petrosyan ) do
4879: LD_EXP 37
4883: PPUSH
4884: LD_EXP 24
4888: PPUSH
4889: CALL_OW 296
4893: PUSH
4894: LD_INT 15
4896: LESS
4897: PUSH
4898: LD_EXP 28
4902: PPUSH
4903: CALL_OW 302
4907: AND
4908: IFFALSE 5123
4910: GO 4912
4912: DISABLE
// begin DialogueOn ;
4913: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
4917: LD_EXP 28
4921: PPUSH
4922: LD_STRING DStevensBurlak-Pty-1
4924: PPUSH
4925: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
4929: LD_EXP 24
4933: PPUSH
4934: LD_STRING DStevensBurlak-Bur-1
4936: PPUSH
4937: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
4941: LD_EXP 28
4945: PPUSH
4946: LD_STRING DStevensBurlak-Pty-2
4948: PPUSH
4949: CALL_OW 88
// case Query ( QKill ) of 1 :
4953: LD_STRING QKill
4955: PPUSH
4956: CALL_OW 97
4960: PUSH
4961: LD_INT 1
4963: DOUBLE
4964: EQUAL
4965: IFTRUE 4969
4967: GO 5047
4969: POP
// begin stevensCanExitMap = true ;
4970: LD_ADDR_EXP 14
4974: PUSH
4975: LD_INT 1
4977: ST_TO_ADDR
// stevensFollow = false ;
4978: LD_ADDR_EXP 10
4982: PUSH
4983: LD_INT 0
4985: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
4986: LD_EXP 24
4990: PPUSH
4991: LD_STRING DKill-1-Bur-1
4993: PPUSH
4994: CALL_OW 88
// if IsOK ( Gleb ) then
4998: LD_EXP 27
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5021
// Say ( Gleb , DKill-1-Glb-1 ) ;
5009: LD_EXP 27
5013: PPUSH
5014: LD_STRING DKill-1-Glb-1
5016: PPUSH
5017: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
5021: LD_EXP 37
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
5033: LD_EXP 37
5037: PPUSH
5038: LD_INT 37
5040: PPUSH
5041: CALL_OW 113
// end ; 2 :
5045: GO 5119
5047: LD_INT 2
5049: DOUBLE
5050: EQUAL
5051: IFTRUE 5055
5053: GO 5118
5055: POP
// begin stevensCanExitMap = true ;
5056: LD_ADDR_EXP 14
5060: PUSH
5061: LD_INT 1
5063: ST_TO_ADDR
// stevensFollow = false ;
5064: LD_ADDR_EXP 10
5068: PUSH
5069: LD_INT 0
5071: ST_TO_ADDR
// stevensDepot = true ;
5072: LD_ADDR_EXP 12
5076: PUSH
5077: LD_INT 1
5079: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
5080: LD_EXP 24
5084: PPUSH
5085: LD_STRING DKill-2-Bur-1
5087: PPUSH
5088: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
5092: LD_EXP 28
5096: PPUSH
5097: LD_STRING DKill-2-Pty-1
5099: PPUSH
5100: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
5104: LD_EXP 24
5108: PPUSH
5109: LD_STRING DKill-2-Bur-2
5111: PPUSH
5112: CALL_OW 88
// end ; end ;
5116: GO 5119
5118: POP
// DialogueOff ;
5119: CALL_OW 7
// end ;
5123: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
5124: LD_EXP 10
5128: IFFALSE 5268
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin enable ;
5136: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: LD_INT 22
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 21
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 50
5164: PUSH
5165: EMPTY
5166: LIST
5167: PUSH
5168: LD_INT 2
5170: PUSH
5171: LD_INT 25
5173: PUSH
5174: LD_INT 1
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: LD_INT 25
5183: PUSH
5184: LD_INT 2
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 25
5193: PUSH
5194: LD_INT 3
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PUSH
5201: LD_INT 25
5203: PUSH
5204: LD_INT 4
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: PPUSH
5224: CALL_OW 69
5228: PPUSH
5229: LD_EXP 37
5233: PPUSH
5234: CALL_OW 74
5238: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
5239: LD_EXP 37
5243: PPUSH
5244: LD_VAR 0 1
5248: PPUSH
5249: CALL_OW 250
5253: PPUSH
5254: LD_VAR 0 1
5258: PPUSH
5259: CALL_OW 251
5263: PPUSH
5264: CALL_OW 111
// end ;
5268: PPOPN 1
5270: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5271: LD_EXP 12
5275: PUSH
5276: LD_INT 22
5278: PUSH
5279: LD_INT 3
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 21
5288: PUSH
5289: LD_INT 3
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 30
5298: PUSH
5299: LD_INT 0
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 50
5308: PUSH
5309: EMPTY
5310: LIST
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: PPUSH
5318: CALL_OW 69
5322: NOT
5323: AND
5324: IFFALSE 5351
5326: GO 5328
5328: DISABLE
// begin enable ;
5329: ENABLE
// SetSide ( Stevens , 6 ) ;
5330: LD_EXP 37
5334: PPUSH
5335: LD_INT 6
5337: PPUSH
5338: CALL_OW 235
// ComHold ( Stevens ) ;
5342: LD_EXP 37
5346: PPUSH
5347: CALL_OW 140
// end ;
5351: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
5352: LD_EXP 12
5356: PUSH
5357: LD_INT 22
5359: PUSH
5360: LD_INT 3
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 21
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 30
5379: PUSH
5380: LD_INT 0
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: LD_INT 50
5389: PUSH
5390: EMPTY
5391: LIST
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 69
5403: AND
5404: IFFALSE 5931
5406: GO 5408
5408: DISABLE
5409: LD_INT 0
5411: PPUSH
5412: PPUSH
5413: PPUSH
// begin enable ;
5414: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) ;
5415: LD_ADDR_VAR 0 1
5419: PUSH
5420: LD_INT 22
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: LD_INT 21
5432: PUSH
5433: LD_INT 3
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 30
5442: PUSH
5443: LD_INT 0
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: LD_INT 50
5452: PUSH
5453: EMPTY
5454: LIST
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: PPUSH
5462: CALL_OW 69
5466: ST_TO_ADDR
// if not depot then
5467: LD_VAR 0 1
5471: NOT
5472: IFFALSE 5476
// exit ;
5474: GO 5931
// for depotUnit in depot do
5476: LD_ADDR_VAR 0 2
5480: PUSH
5481: LD_VAR 0 1
5485: PUSH
5486: FOR_IN
5487: IFFALSE 5513
// if not IsConstructed ( depotUnit ) then
5489: LD_VAR 0 2
5493: PPUSH
5494: CALL_OW 304
5498: NOT
5499: IFFALSE 5511
// constructDepot = depotUnit ;
5501: LD_ADDR_VAR 0 3
5505: PUSH
5506: LD_VAR 0 2
5510: ST_TO_ADDR
5511: GO 5486
5513: POP
5514: POP
// if not constructDepot then
5515: LD_VAR 0 3
5519: NOT
5520: IFFALSE 5524
// exit ;
5522: GO 5931
// if not stevensWasInDepot then
5524: LD_EXP 13
5528: NOT
5529: IFFALSE 5669
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) > 8 then
5531: LD_EXP 37
5535: PPUSH
5536: CALL_OW 310
5540: NOT
5541: PUSH
5542: LD_EXP 37
5546: PPUSH
5547: LD_VAR 0 1
5551: PPUSH
5552: CALL_OW 296
5556: PUSH
5557: LD_INT 8
5559: GREATER
5560: NOT
5561: AND
5562: IFFALSE 5595
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
5564: LD_EXP 37
5568: PPUSH
5569: LD_VAR 0 3
5573: PPUSH
5574: CALL_OW 250
5578: PPUSH
5579: LD_VAR 0 3
5583: PPUSH
5584: CALL_OW 251
5588: PPUSH
5589: CALL_OW 111
5593: GO 5667
// begin InGameOn ;
5595: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
5599: LD_EXP 37
5603: PPUSH
5604: LD_INT 3
5606: PPUSH
5607: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
5611: LD_EXP 37
5615: PPUSH
5616: LD_VAR 0 3
5620: PPUSH
5621: CALL_OW 120
// wait ( 0 0$1 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
5632: LD_EXP 37
5636: PPUSH
5637: CALL_OW 310
5641: PUSH
5642: LD_EXP 37
5646: PPUSH
5647: CALL_OW 302
5651: NOT
5652: OR
5653: IFFALSE 5599
// InGameOff ;
5655: CALL_OW 9
// stevensWasInDepot = true ;
5659: LD_ADDR_EXP 13
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// end ; end else
5667: GO 5931
// begin if not IsInUnit ( Stevens ) then
5669: LD_EXP 37
5673: PPUSH
5674: CALL_OW 310
5678: NOT
5679: IFFALSE 5931
// begin DialogueOn ;
5681: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
5685: LD_EXP 24
5689: PPUSH
5690: LD_STRING DRelease-Bur-1
5692: PPUSH
5693: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
5697: LD_STRING QKillAgain
5699: PPUSH
5700: CALL_OW 97
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5776
5713: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
5714: LD_EXP 24
5718: PPUSH
5719: LD_STRING DQrKillAgain#1-Bur-1
5721: PPUSH
5722: CALL_OW 88
// stevensCanExitMap = true ;
5726: LD_ADDR_EXP 14
5730: PUSH
5731: LD_INT 1
5733: ST_TO_ADDR
// stevensWasInDepot = false ;
5734: LD_ADDR_EXP 13
5738: PUSH
5739: LD_INT 0
5741: ST_TO_ADDR
// stevensDepot = false ;
5742: LD_ADDR_EXP 12
5746: PUSH
5747: LD_INT 0
5749: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
5750: LD_EXP 37
5754: PPUSH
5755: LD_INT 1
5757: PPUSH
5758: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
5762: LD_EXP 37
5766: PPUSH
5767: LD_INT 37
5769: PPUSH
5770: CALL_OW 113
// end ; 2 :
5774: GO 5927
5776: LD_INT 2
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5835
5784: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
5785: LD_EXP 24
5789: PPUSH
5790: LD_STRING DQrKillAgain#2-Bur-1
5792: PPUSH
5793: CALL_OW 88
// stevensCanExitMap = true ;
5797: LD_ADDR_EXP 14
5801: PUSH
5802: LD_INT 1
5804: ST_TO_ADDR
// stevensWasInDepot = false ;
5805: LD_ADDR_EXP 13
5809: PUSH
5810: LD_INT 0
5812: ST_TO_ADDR
// stevensDepot = false ;
5813: LD_ADDR_EXP 12
5817: PUSH
5818: LD_INT 0
5820: ST_TO_ADDR
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
5821: LD_EXP 37
5825: PPUSH
5826: LD_INT 37
5828: PPUSH
5829: CALL_OW 113
// end ; 3 :
5833: GO 5927
5835: LD_INT 3
5837: DOUBLE
5838: EQUAL
5839: IFTRUE 5843
5841: GO 5926
5843: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
5844: LD_EXP 24
5848: PPUSH
5849: LD_STRING DQrKillAgain#2-Bur-1a
5851: PPUSH
5852: CALL_OW 88
// DialogueOff ;
5856: CALL_OW 7
// InGameOn ;
5860: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
5864: LD_EXP 37
5868: PPUSH
5869: LD_INT 3
5871: PPUSH
5872: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
5876: LD_EXP 37
5880: PPUSH
5881: LD_VAR 0 3
5885: PPUSH
5886: CALL_OW 120
// wait ( 0 0$1 ) ;
5890: LD_INT 35
5892: PPUSH
5893: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
5897: LD_EXP 37
5901: PPUSH
5902: CALL_OW 310
5906: PUSH
5907: LD_EXP 37
5911: PPUSH
5912: CALL_OW 302
5916: NOT
5917: OR
5918: IFFALSE 5864
// InGameOff ;
5920: CALL_OW 9
// end ; end ;
5924: GO 5927
5926: POP
// DialogueOff ;
5927: CALL_OW 7
// end ; end ; end ;
5931: PPOPN 3
5933: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
5934: LD_INT 3
5936: PPUSH
5937: LD_INT 1
5939: PPUSH
5940: CALL_OW 292
5944: IFFALSE 6144
5946: GO 5948
5948: DISABLE
5949: LD_INT 0
5951: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
5952: LD_ADDR_VAR 0 1
5956: PUSH
5957: LD_INT 1
5959: PPUSH
5960: LD_INT 2
5962: PPUSH
5963: CALL_OW 12
5967: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
5968: LD_INT 1
5970: PPUSH
5971: CALL_OW 87
// DialogueOn ;
5975: CALL_OW 6
// if rnd = 1 then
5979: LD_VAR 0 1
5983: PUSH
5984: LD_INT 1
5986: EQUAL
5987: IFFALSE 6003
// Say ( Burlak , DMastodon-Bur-1 ) else
5989: LD_EXP 24
5993: PPUSH
5994: LD_STRING DMastodon-Bur-1
5996: PPUSH
5997: CALL_OW 88
6001: GO 6117
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
6003: LD_INT 22
6005: PUSH
6006: LD_INT 3
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 21
6015: PUSH
6016: LD_INT 1
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 26
6025: PUSH
6026: LD_INT 1
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 50
6035: PUSH
6036: EMPTY
6037: LIST
6038: PUSH
6039: LD_INT 2
6041: PUSH
6042: LD_INT 25
6044: PUSH
6045: LD_INT 1
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 25
6054: PUSH
6055: LD_INT 2
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 25
6064: PUSH
6065: LD_INT 3
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 25
6074: PUSH
6075: LD_INT 4
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 69
6100: PPUSH
6101: LD_STRING DMastodon-RSol1-1
6103: PPUSH
6104: LD_STRING 
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: LD_INT 1
6112: PPUSH
6113: CALL 6947 0 5
// if IsOK ( Gleb ) then
6117: LD_EXP 27
6121: PPUSH
6122: CALL_OW 302
6126: IFFALSE 6140
// Say ( Gleb , DMastodon-Glb-1 ) ;
6128: LD_EXP 27
6132: PPUSH
6133: LD_STRING DMastodon-Glb-1
6135: PPUSH
6136: CALL_OW 88
// DialogueOff ;
6140: CALL_OW 7
// end ;
6144: PPOPN 1
6146: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
6147: LD_INT 1
6149: PPUSH
6150: CALL_OW 302
6154: NOT
6155: IFFALSE 6214
6157: GO 6159
6159: DISABLE
// begin DialogueOn ;
6160: CALL_OW 6
// if IsOK ( Karamazov ) then
6164: LD_EXP 25
6168: PPUSH
6169: CALL_OW 302
6173: IFFALSE 6187
// Say ( Karamazov , DOmar-Kar-1 ) ;
6175: LD_EXP 25
6179: PPUSH
6180: LD_STRING DOmar-Kar-1
6182: PPUSH
6183: CALL_OW 88
// if IsOK ( Petrovova ) then
6187: LD_EXP 26
6191: PPUSH
6192: CALL_OW 302
6196: IFFALSE 6210
// Say ( Petrovova , DOmar-Ptr-1 ) ;
6198: LD_EXP 26
6202: PPUSH
6203: LD_STRING DOmar-Ptr-1
6205: PPUSH
6206: CALL_OW 88
// DialogueOff ;
6210: CALL_OW 7
// end ;
6214: END
// every 0 0$1 trigger IsDead ( Omar ) do
6215: LD_EXP 35
6219: PPUSH
6220: CALL_OW 301
6224: IFFALSE 6382
6226: GO 6228
6228: DISABLE
// begin DialogueOn ;
6229: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
6233: LD_INT 22
6235: PUSH
6236: LD_INT 3
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 21
6245: PUSH
6246: LD_INT 1
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 26
6255: PUSH
6256: LD_INT 1
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 50
6265: PUSH
6266: EMPTY
6267: LIST
6268: PUSH
6269: LD_INT 2
6271: PUSH
6272: LD_INT 25
6274: PUSH
6275: LD_INT 1
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: LD_INT 25
6284: PUSH
6285: LD_INT 2
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 25
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PUSH
6302: LD_INT 25
6304: PUSH
6305: LD_INT 4
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: PPUSH
6326: CALL_OW 69
6330: PPUSH
6331: LD_STRING DOmar-RSol1-1
6333: PPUSH
6334: LD_STRING 
6336: PPUSH
6337: LD_INT 0
6339: PPUSH
6340: LD_INT 1
6342: PPUSH
6343: CALL 6947 0 5
// wait ( 0 0$1 ) ;
6347: LD_INT 35
6349: PPUSH
6350: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
6354: LD_EXP 34
6358: PPUSH
6359: LD_STRING DOmar-Hke-1
6361: PPUSH
6362: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
6366: LD_EXP 24
6370: PPUSH
6371: LD_STRING DOmar-Bur-1
6373: PPUSH
6374: CALL_OW 88
// DialogueOff ;
6378: CALL_OW 7
// end ;
6382: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 do
6383: LD_EXP 35
6387: PPUSH
6388: CALL_OW 301
6392: PUSH
6393: LD_EXP 35
6397: PPUSH
6398: CALL_OW 305
6402: NOT
6403: OR
6404: PUSH
6405: LD_INT 22
6407: PUSH
6408: LD_INT 2
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 21
6417: PUSH
6418: LD_INT 1
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 24
6427: PUSH
6428: LD_INT 250
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: PPUSH
6440: CALL_OW 69
6444: PUSH
6445: LD_INT 5
6447: LESS
6448: AND
6449: IFFALSE 6629
6451: GO 6453
6453: DISABLE
// begin DialogueOn ;
6454: CALL_OW 6
// if IsOK ( Petrovova ) then
6458: LD_EXP 26
6462: PPUSH
6463: CALL_OW 302
6467: IFFALSE 6481
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
6469: LD_EXP 26
6473: PPUSH
6474: LD_STRING DBreakthrough-Ptr-1
6476: PPUSH
6477: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
6481: LD_EXP 24
6485: PPUSH
6486: LD_STRING DBreakthrough-Bur-1
6488: PPUSH
6489: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
6493: LD_EXP 32
6497: PPUSH
6498: LD_STRING DBreakthrough-Pla-1
6500: PPUSH
6501: CALL_OW 94
// if actionTime < arabBreakthrough then
6505: LD_EXP 4
6509: PUSH
6510: LD_EXP 22
6514: LESS
6515: IFFALSE 6531
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
6517: LD_EXP 32
6521: PPUSH
6522: LD_STRING DBreakthrough-Pla-1a
6524: PPUSH
6525: CALL_OW 94
6529: GO 6543
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
6531: LD_EXP 32
6535: PPUSH
6536: LD_STRING DBreakthrough-Pla-1b
6538: PPUSH
6539: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
6543: LD_INT 22
6545: PUSH
6546: LD_INT 3
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 21
6555: PUSH
6556: LD_INT 1
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 23
6565: PUSH
6566: LD_INT 3
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 2
6575: PUSH
6576: LD_INT 30
6578: PUSH
6579: LD_INT 6
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 30
6588: PUSH
6589: LD_INT 7
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: IFFALSE 6625
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
6613: LD_EXP 32
6617: PPUSH
6618: LD_STRING DBreakthrough-Pla-1c
6620: PPUSH
6621: CALL_OW 94
// DialogueOff ;
6625: CALL_OW 7
// end ; end_of_file
6629: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
6630: LD_INT 0
6632: PPUSH
6633: PPUSH
// if debugMode then
6634: LD_EXP 20
6638: IFFALSE 6655
// unit := NewCharacter ( ident ) ;
6640: LD_ADDR_VAR 0 5
6644: PUSH
6645: LD_VAR 0 1
6649: PPUSH
6650: CALL_OW 25
6654: ST_TO_ADDR
// if exist_mode and not debugMode then
6655: LD_VAR 0 2
6659: PUSH
6660: LD_EXP 20
6664: NOT
6665: AND
6666: IFFALSE 6691
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6668: LD_ADDR_VAR 0 5
6672: PUSH
6673: LD_EXP 19
6677: PUSH
6678: LD_VAR 0 1
6682: STR
6683: PPUSH
6684: CALL_OW 34
6688: ST_TO_ADDR
6689: GO 6713
// if not debugMode then
6691: LD_EXP 20
6695: NOT
6696: IFFALSE 6713
// unit := NewCharacter ( ident ) ;
6698: LD_ADDR_VAR 0 5
6702: PUSH
6703: LD_VAR 0 1
6707: PPUSH
6708: CALL_OW 25
6712: ST_TO_ADDR
// if class then
6713: LD_VAR 0 3
6717: IFFALSE 6733
// SetClass ( unit , class ) ;
6719: LD_VAR 0 5
6723: PPUSH
6724: LD_VAR 0 3
6728: PPUSH
6729: CALL_OW 336
// result := unit ;
6733: LD_ADDR_VAR 0 4
6737: PUSH
6738: LD_VAR 0 5
6742: ST_TO_ADDR
// end ;
6743: LD_VAR 0 4
6747: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
6748: LD_INT 0
6750: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
6751: LD_VAR 0 1
6755: PPUSH
6756: CALL_OW 255
6760: PUSH
6761: LD_VAR 0 3
6765: EQUAL
6766: PUSH
6767: LD_VAR 0 1
6771: PPUSH
6772: CALL_OW 302
6776: AND
6777: IFFALSE 6799
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
6779: LD_VAR 0 1
6783: PPUSH
6784: LD_EXP 18
6788: PUSH
6789: LD_VAR 0 2
6793: STR
6794: PPUSH
6795: CALL_OW 38
// end ;
6799: LD_VAR 0 4
6803: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
6804: LD_INT 0
6806: PPUSH
6807: PPUSH
6808: PPUSH
// resultCharactersToSave = [ ] ;
6809: LD_ADDR_VAR 0 6
6813: PUSH
6814: EMPTY
6815: ST_TO_ADDR
// for unit in characters do
6816: LD_ADDR_VAR 0 5
6820: PUSH
6821: LD_VAR 0 1
6825: PUSH
6826: FOR_IN
6827: IFFALSE 6875
// if GetSide ( unit ) = side and IsOK ( unit ) then
6829: LD_VAR 0 5
6833: PPUSH
6834: CALL_OW 255
6838: PUSH
6839: LD_VAR 0 3
6843: EQUAL
6844: PUSH
6845: LD_VAR 0 5
6849: PPUSH
6850: CALL_OW 302
6854: AND
6855: IFFALSE 6873
// resultCharactersToSave = resultCharactersToSave ^ unit ;
6857: LD_ADDR_VAR 0 6
6861: PUSH
6862: LD_VAR 0 6
6866: PUSH
6867: LD_VAR 0 5
6871: ADD
6872: ST_TO_ADDR
6873: GO 6826
6875: POP
6876: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
6877: LD_VAR 0 6
6881: PPUSH
6882: LD_EXP 18
6886: PUSH
6887: LD_VAR 0 2
6891: STR
6892: PPUSH
6893: CALL_OW 38
// end ;
6897: LD_VAR 0 4
6901: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
6902: LD_INT 0
6904: PPUSH
6905: PPUSH
// for unit in units do
6906: LD_ADDR_VAR 0 5
6910: PUSH
6911: LD_VAR 0 1
6915: PUSH
6916: FOR_IN
6917: IFFALSE 6940
// PlaceUnitArea ( unit , area , spawnMode ) ;
6919: LD_VAR 0 5
6923: PPUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: LD_VAR 0 3
6933: PPUSH
6934: CALL_OW 49
6938: GO 6916
6940: POP
6941: POP
// end ;
6942: LD_VAR 0 4
6946: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
// units = characters ;
6953: LD_ADDR_VAR 0 9
6957: PUSH
6958: LD_VAR 0 1
6962: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ] ;
6963: LD_ADDR_VAR 0 9
6967: PUSH
6968: LD_VAR 0 9
6972: PUSH
6973: LD_EXP 24
6977: PUSH
6978: LD_EXP 25
6982: PUSH
6983: LD_EXP 26
6987: PUSH
6988: LD_EXP 27
6992: PUSH
6993: LD_EXP 28
6997: PUSH
6998: LD_EXP 29
7002: PUSH
7003: LD_EXP 30
7007: PUSH
7008: LD_EXP 31
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: DIFF
7023: ST_TO_ADDR
// if not units and not canTalkHero then
7024: LD_VAR 0 9
7028: NOT
7029: PUSH
7030: LD_VAR 0 5
7034: NOT
7035: AND
7036: IFFALSE 7040
// exit ;
7038: GO 7210
// if not units then
7040: LD_VAR 0 9
7044: NOT
7045: IFFALSE 7063
// units = characters diff Burlak ;
7047: LD_ADDR_VAR 0 9
7051: PUSH
7052: LD_VAR 0 1
7056: PUSH
7057: LD_EXP 24
7061: DIFF
7062: ST_TO_ADDR
// if not units and canTalkHero then
7063: LD_VAR 0 9
7067: NOT
7068: PUSH
7069: LD_VAR 0 5
7073: AND
7074: IFFALSE 7078
// exit ;
7076: GO 7210
// speaker := characters [ rand ( 1 , units ) ] ;
7078: LD_ADDR_VAR 0 8
7082: PUSH
7083: LD_VAR 0 1
7087: PUSH
7088: LD_INT 1
7090: PPUSH
7091: LD_VAR 0 9
7095: PPUSH
7096: CALL_OW 12
7100: ARRAY
7101: ST_TO_ADDR
// if radio then
7102: LD_VAR 0 4
7106: IFFALSE 7155
// begin if GetSex ( speaker ) = sex_male then
7108: LD_VAR 0 8
7112: PPUSH
7113: CALL_OW 258
7117: PUSH
7118: LD_INT 1
7120: EQUAL
7121: IFFALSE 7139
// SayRadio ( speaker , dialogMID ) else
7123: LD_VAR 0 8
7127: PPUSH
7128: LD_VAR 0 2
7132: PPUSH
7133: CALL_OW 94
7137: GO 7153
// SayRadio ( speaker , dialogFID ) ;
7139: LD_VAR 0 8
7143: PPUSH
7144: LD_VAR 0 3
7148: PPUSH
7149: CALL_OW 94
// end else
7153: GO 7200
// begin if GetSex ( speaker ) = sex_male then
7155: LD_VAR 0 8
7159: PPUSH
7160: CALL_OW 258
7164: PUSH
7165: LD_INT 1
7167: EQUAL
7168: IFFALSE 7186
// Say ( speaker , dialogMID ) else
7170: LD_VAR 0 8
7174: PPUSH
7175: LD_VAR 0 2
7179: PPUSH
7180: CALL_OW 88
7184: GO 7200
// Say ( speaker , dialogFID ) ;
7186: LD_VAR 0 8
7190: PPUSH
7191: LD_VAR 0 3
7195: PPUSH
7196: CALL_OW 88
// end ; result := speaker ;
7200: LD_ADDR_VAR 0 6
7204: PUSH
7205: LD_VAR 0 8
7209: ST_TO_ADDR
// end ;
7210: LD_VAR 0 6
7214: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
7215: LD_INT 0
7217: PPUSH
7218: PPUSH
// dir := GetDir ( bunker ) - 3 ;
7219: LD_ADDR_VAR 0 4
7223: PUSH
7224: LD_VAR 0 2
7228: PPUSH
7229: CALL_OW 254
7233: PUSH
7234: LD_INT 3
7236: MINUS
7237: ST_TO_ADDR
// if dir < 0 then
7238: LD_VAR 0 4
7242: PUSH
7243: LD_INT 0
7245: LESS
7246: IFFALSE 7262
// dir := 6 + dir ;
7248: LD_ADDR_VAR 0 4
7252: PUSH
7253: LD_INT 6
7255: PUSH
7256: LD_VAR 0 4
7260: PLUS
7261: ST_TO_ADDR
// SetDir ( un , dir ) ;
7262: LD_VAR 0 1
7266: PPUSH
7267: LD_VAR 0 4
7271: PPUSH
7272: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
7276: LD_VAR 0 1
7280: PPUSH
7281: LD_VAR 0 2
7285: PPUSH
7286: CALL_OW 52
// result = un ;
7290: LD_ADDR_VAR 0 3
7294: PUSH
7295: LD_VAR 0 1
7299: ST_TO_ADDR
// end ;
7300: LD_VAR 0 3
7304: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7305: LD_INT 0
7307: PPUSH
7308: PPUSH
7309: PPUSH
7310: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7311: LD_ADDR_VAR 0 6
7315: PUSH
7316: LD_INT 34
7318: PUSH
7319: LD_INT 71
7321: PUSH
7322: LD_INT 70
7324: PUSH
7325: LD_INT 69
7327: PUSH
7328: LD_INT 39
7330: PUSH
7331: LD_INT 31
7333: PUSH
7334: LD_INT 14
7336: PUSH
7337: LD_INT 10
7339: PUSH
7340: LD_INT 40
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: ST_TO_ADDR
// resultWeapons = [ ] ;
7354: LD_ADDR_VAR 0 5
7358: PUSH
7359: EMPTY
7360: ST_TO_ADDR
// for i := 1 to weaponTechs do
7361: LD_ADDR_VAR 0 4
7365: PUSH
7366: DOUBLE
7367: LD_INT 1
7369: DEC
7370: ST_TO_ADDR
7371: LD_VAR 0 6
7375: PUSH
7376: FOR_TO
7377: IFFALSE 7564
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7379: LD_VAR 0 6
7383: PUSH
7384: LD_VAR 0 4
7388: ARRAY
7389: PPUSH
7390: LD_VAR 0 2
7394: PPUSH
7395: CALL_OW 482
7399: PUSH
7400: LD_VAR 0 6
7404: PUSH
7405: LD_VAR 0 4
7409: ARRAY
7410: PPUSH
7411: LD_VAR 0 1
7415: PPUSH
7416: CALL_OW 321
7420: PUSH
7421: LD_INT 2
7423: EQUAL
7424: AND
7425: IFFALSE 7562
// case nation of nation_american :
7427: LD_VAR 0 2
7431: PUSH
7432: LD_INT 1
7434: DOUBLE
7435: EQUAL
7436: IFTRUE 7440
7438: GO 7475
7440: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7441: LD_ADDR_VAR 0 5
7445: PUSH
7446: LD_VAR 0 5
7450: PUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_VAR 0 4
7460: ARRAY
7461: PPUSH
7462: LD_VAR 0 2
7466: PPUSH
7467: CALL 7581 0 2
7471: ADD
7472: ST_TO_ADDR
7473: GO 7562
7475: LD_INT 2
7477: DOUBLE
7478: EQUAL
7479: IFTRUE 7483
7481: GO 7518
7483: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7484: LD_ADDR_VAR 0 5
7488: PUSH
7489: LD_VAR 0 5
7493: PUSH
7494: LD_VAR 0 6
7498: PUSH
7499: LD_VAR 0 4
7503: ARRAY
7504: PPUSH
7505: LD_VAR 0 2
7509: PPUSH
7510: CALL 7581 0 2
7514: ADD
7515: ST_TO_ADDR
7516: GO 7562
7518: LD_INT 3
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7561
7526: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7527: LD_ADDR_VAR 0 5
7531: PUSH
7532: LD_VAR 0 5
7536: PUSH
7537: LD_VAR 0 6
7541: PUSH
7542: LD_VAR 0 4
7546: ARRAY
7547: PPUSH
7548: LD_VAR 0 2
7552: PPUSH
7553: CALL 7581 0 2
7557: ADD
7558: ST_TO_ADDR
7559: GO 7562
7561: POP
// end ;
7562: GO 7376
7564: POP
7565: POP
// result = resultWeapons ;
7566: LD_ADDR_VAR 0 3
7570: PUSH
7571: LD_VAR 0 5
7575: ST_TO_ADDR
// end ;
7576: LD_VAR 0 3
7580: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
7581: LD_INT 0
7583: PPUSH
// case tech of tech_AdvMet :
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 34
7591: DOUBLE
7592: EQUAL
7593: IFTRUE 7597
7595: GO 7625
7597: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
7598: LD_ADDR_VAR 0 3
7602: PUSH
7603: LD_INT 6
7605: PUSH
7606: LD_STRING 
7608: PUSH
7609: LD_INT 46
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: PUSH
7617: LD_VAR 0 2
7621: ARRAY
7622: ST_TO_ADDR
7623: GO 7914
7625: LD_INT 71
7627: DOUBLE
7628: EQUAL
7629: IFTRUE 7633
7631: GO 7661
7633: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
7634: LD_ADDR_VAR 0 3
7638: PUSH
7639: LD_STRING 
7641: PUSH
7642: LD_STRING 
7644: PUSH
7645: LD_INT 47
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: PUSH
7653: LD_VAR 0 2
7657: ARRAY
7658: ST_TO_ADDR
7659: GO 7914
7661: LD_INT 70
7663: DOUBLE
7664: EQUAL
7665: IFTRUE 7669
7667: GO 7697
7669: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
7670: LD_ADDR_VAR 0 3
7674: PUSH
7675: LD_STRING 
7677: PUSH
7678: LD_INT 26
7680: PUSH
7681: LD_STRING 
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PUSH
7689: LD_VAR 0 2
7693: ARRAY
7694: ST_TO_ADDR
7695: GO 7914
7697: LD_INT 69
7699: DOUBLE
7700: EQUAL
7701: IFTRUE 7705
7703: GO 7733
7705: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
7706: LD_ADDR_VAR 0 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 25
7716: PUSH
7717: LD_INT 43
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: LD_VAR 0 2
7729: ARRAY
7730: ST_TO_ADDR
7731: GO 7914
7733: LD_INT 39
7735: DOUBLE
7736: EQUAL
7737: IFTRUE 7741
7739: GO 7769
7741: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
7742: LD_ADDR_VAR 0 3
7746: PUSH
7747: LD_INT 5
7749: PUSH
7750: LD_INT 27
7752: PUSH
7753: LD_INT 44
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_VAR 0 2
7765: ARRAY
7766: ST_TO_ADDR
7767: GO 7914
7769: LD_INT 31
7771: DOUBLE
7772: EQUAL
7773: IFTRUE 7777
7775: GO 7805
7777: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
7778: LD_ADDR_VAR 0 3
7782: PUSH
7783: LD_STRING 
7785: PUSH
7786: LD_STRING 
7788: PUSH
7789: LD_INT 49
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: LIST
7796: PUSH
7797: LD_VAR 0 2
7801: ARRAY
7802: ST_TO_ADDR
7803: GO 7914
7805: LD_INT 14
7807: DOUBLE
7808: EQUAL
7809: IFTRUE 7813
7811: GO 7841
7813: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
7814: LD_ADDR_VAR 0 3
7818: PUSH
7819: LD_INT 10
7821: PUSH
7822: LD_STRING 
7824: PUSH
7825: LD_STRING 
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: LD_VAR 0 2
7837: ARRAY
7838: ST_TO_ADDR
7839: GO 7914
7841: LD_INT 10
7843: DOUBLE
7844: EQUAL
7845: IFTRUE 7849
7847: GO 7877
7849: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
7850: LD_ADDR_VAR 0 3
7854: PUSH
7855: LD_INT 9
7857: PUSH
7858: LD_STRING 
7860: PUSH
7861: LD_STRING 
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: PUSH
7869: LD_VAR 0 2
7873: ARRAY
7874: ST_TO_ADDR
7875: GO 7914
7877: LD_INT 40
7879: DOUBLE
7880: EQUAL
7881: IFTRUE 7885
7883: GO 7913
7885: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
7886: LD_ADDR_VAR 0 3
7890: PUSH
7891: LD_INT 7
7893: PUSH
7894: LD_INT 28
7896: PUSH
7897: LD_INT 45
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PUSH
7905: LD_VAR 0 2
7909: ARRAY
7910: ST_TO_ADDR
7911: GO 7914
7913: POP
// end ; end_of_file
7914: LD_VAR 0 3
7918: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
7919: LD_VAR 0 1
7923: PPUSH
7924: CALL_OW 255
7928: PUSH
7929: LD_INT 3
7931: EQUAL
7932: PUSH
7933: LD_VAR 0 1
7937: PPUSH
7938: CALL_OW 266
7942: PUSH
7943: LD_INT 0
7945: EQUAL
7946: AND
7947: IFFALSE 7961
// SetBname ( building , bukharin ) ;
7949: LD_VAR 0 1
7953: PPUSH
7954: LD_STRING bukharin
7956: PPUSH
7957: CALL_OW 500
// if GetSide ( building ) = 2 then
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 255
7970: PUSH
7971: LD_INT 2
7973: EQUAL
7974: IFFALSE 8156
// begin if GetBType ( building ) = b_armoury then
7976: LD_VAR 0 1
7980: PPUSH
7981: CALL_OW 266
7985: PUSH
7986: LD_INT 4
7988: EQUAL
7989: IFFALSE 8000
// ComUpgrade ( building ) ;
7991: LD_VAR 0 1
7995: PPUSH
7996: CALL_OW 146
// if GetBType ( building ) = b_lab then
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 266
8009: PUSH
8010: LD_INT 6
8012: EQUAL
8013: IFFALSE 8027
// ComUpgradeLab ( building , b_lab_weapon ) ;
8015: LD_VAR 0 1
8019: PPUSH
8020: LD_INT 10
8022: PPUSH
8023: CALL_OW 147
// if GetBType ( building ) = b_workshop then
8027: LD_VAR 0 1
8031: PPUSH
8032: CALL_OW 266
8036: PUSH
8037: LD_INT 2
8039: EQUAL
8040: IFFALSE 8051
// ComUpgrade ( building ) ;
8042: LD_VAR 0 1
8046: PPUSH
8047: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
8051: LD_VAR 0 1
8055: PPUSH
8056: CALL_OW 266
8060: PUSH
8061: LD_INT 17
8063: EQUAL
8064: IFFALSE 8156
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 3 , 5 , 6 ] [ Difficulty ] , [ 1 , 2 , 2 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , true ) ;
8066: LD_INT 2
8068: PPUSH
8069: LD_INT 2
8071: PPUSH
8072: LD_EXP 36
8076: PPUSH
8077: LD_INT 34
8079: PPUSH
8080: LD_INT 39
8082: PPUSH
8083: LD_INT 40
8085: PPUSH
8086: LD_INT 35
8088: PPUSH
8089: LD_INT 3
8091: PUSH
8092: LD_INT 5
8094: PUSH
8095: LD_INT 6
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: PUSH
8103: LD_OWVAR 67
8107: ARRAY
8108: PPUSH
8109: LD_INT 1
8111: PUSH
8112: LD_INT 2
8114: PUSH
8115: LD_INT 2
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: PUSH
8123: LD_OWVAR 67
8127: ARRAY
8128: PPUSH
8129: LD_INT 2
8131: PUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 4
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: PUSH
8143: LD_OWVAR 67
8147: ARRAY
8148: PPUSH
8149: LD_INT 1
8151: PPUSH
8152: CALL 9626 0 11
// end ; end ;
8156: PPOPN 1
8158: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
8159: LD_VAR 0 2
8163: PPUSH
8164: CALL_OW 255
8168: PUSH
8169: LD_INT 3
8171: EQUAL
8172: PUSH
8173: LD_VAR 0 2
8177: PPUSH
8178: CALL_OW 248
8182: PUSH
8183: LD_INT 3
8185: EQUAL
8186: AND
8187: PUSH
8188: LD_EXP 7
8192: NOT
8193: AND
8194: IFFALSE 8205
// Dial_TameApe ( human ) ;
8196: LD_VAR 0 2
8200: PPUSH
8201: CALL 3376 0 1
// end ;
8205: PPOPN 2
8207: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
8208: LD_VAR 0 1
8212: PUSH
8213: LD_INT 1
8215: EQUAL
8216: PUSH
8217: LD_VAR 0 2
8221: PPUSH
8222: CALL_OW 255
8226: PUSH
8227: LD_INT 3
8229: EQUAL
8230: AND
8231: IFFALSE 8237
// Dial_ResearchApeLang ;
8233: CALL 3265 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
8237: LD_VAR 0 1
8241: PUSH
8242: LD_INT 2
8244: EQUAL
8245: PUSH
8246: LD_VAR 0 2
8250: PPUSH
8251: CALL_OW 255
8255: PUSH
8256: LD_INT 3
8258: EQUAL
8259: AND
8260: IFFALSE 8266
// Dial_ResearchApePsych ;
8262: CALL 3809 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
8266: LD_VAR 0 1
8270: PUSH
8271: LD_INT 11
8273: EQUAL
8274: PUSH
8275: LD_VAR 0 2
8279: PPUSH
8280: CALL_OW 255
8284: PUSH
8285: LD_INT 3
8287: EQUAL
8288: AND
8289: IFFALSE 8295
// Dial_ResearchApeAgress ;
8291: CALL 4001 0 0
// end ;
8295: PPOPN 2
8297: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
8298: LD_VAR 0 2
8302: PPUSH
8303: CALL_OW 255
8307: PUSH
8308: LD_INT 3
8310: EQUAL
8311: PUSH
8312: LD_VAR 0 2
8316: PPUSH
8317: CALL_OW 257
8321: PUSH
8322: LD_INT 12
8324: EQUAL
8325: AND
8326: PUSH
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 266
8336: PUSH
8337: LD_INT 6
8339: EQUAL
8340: PUSH
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 266
8350: PUSH
8351: LD_INT 7
8353: EQUAL
8354: OR
8355: AND
8356: PUSH
8357: LD_EXP 8
8361: NOT
8362: AND
8363: IFFALSE 8369
// Dial_ApeEnterLab ;
8365: CALL 3597 0 0
// end ; end_of_file end_of_file
8369: PPOPN 2
8371: END
// export function Lose_Burlak ; begin
8372: LD_INT 0
8374: PPUSH
// YouLost ( Burlak ) ;
8375: LD_STRING Burlak
8377: PPUSH
8378: CALL_OW 104
// end ;
8382: LD_VAR 0 1
8386: RET
// export function Lose_Survive ; begin
8387: LD_INT 0
8389: PPUSH
// YouLost ( Survive ) ;
8390: LD_STRING Survive
8392: PPUSH
8393: CALL_OW 104
// end ;
8397: LD_VAR 0 1
8401: RET
// export function Lose_Surrender ; begin
8402: LD_INT 0
8404: PPUSH
// YouLost ( Surrender ) ;
8405: LD_STRING Surrender
8407: PPUSH
8408: CALL_OW 104
// end ; end_of_file
8412: LD_VAR 0 1
8416: RET
// every 0 0$5 do
8417: GO 8419
8419: DISABLE
// begin enable ;
8420: ENABLE
// if FilterUnitsInArea ( exit_area , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_area , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) then
8421: LD_INT 1
8423: PPUSH
8424: LD_INT 22
8426: PUSH
8427: LD_INT 3
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 21
8436: PUSH
8437: LD_INT 2
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 50
8446: PUSH
8447: EMPTY
8448: LIST
8449: PUSH
8450: LD_INT 2
8452: PUSH
8453: LD_INT 31
8455: PUSH
8456: LD_INT 22
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PUSH
8463: LD_INT 31
8465: PUSH
8466: LD_INT 24
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: LD_INT 31
8475: PUSH
8476: LD_INT 14
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: PPUSH
8495: CALL_OW 70
8499: PUSH
8500: LD_INT 1
8502: PPUSH
8503: LD_INT 22
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 21
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 50
8525: PUSH
8526: EMPTY
8527: LIST
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: PPUSH
8534: CALL_OW 70
8538: AND
8539: IFFALSE 8548
// Query ( QVehicles ) ;
8541: LD_STRING QVehicles
8543: PPUSH
8544: CALL_OW 97
// if FilterUnitsInArea ( exit_area , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 then
8548: LD_INT 1
8550: PPUSH
8551: LD_INT 22
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 21
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: LD_INT 50
8573: PUSH
8574: EMPTY
8575: LIST
8576: PUSH
8577: LD_INT 2
8579: PUSH
8580: LD_INT 31
8582: PUSH
8583: LD_INT 22
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 31
8592: PUSH
8593: LD_INT 24
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: LD_INT 31
8602: PUSH
8603: LD_INT 14
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: PPUSH
8622: CALL_OW 70
8626: PUSH
8627: LD_INT 6
8629: GREATEREQUAL
8630: IFFALSE 8641
// begin case Query ( QEndMission ) of end ;
8632: LD_STRING QEndMission
8634: PPUSH
8635: CALL_OW 97
8639: PUSH
8640: POP
// end ; end ;
8641: END
// function FinishMission ; begin
8642: LD_INT 0
8644: PPUSH
// SetRewards ;
8645: CALL 8666 0 0
// SavePlayerCharacters ;
8649: CALL 8682 0 0
// SaveGlobalVariables ;
8653: CALL 8703 0 0
// YouWin ;
8657: CALL_OW 103
// end ;
8661: LD_VAR 0 1
8665: RET
// function SetRewards ; var unitsToReward ; begin
8666: LD_INT 0
8668: PPUSH
8669: PPUSH
// GiveMedals ( Main ) ;
8670: LD_STRING Main
8672: PPUSH
8673: CALL_OW 102
// end ;
8677: LD_VAR 0 1
8681: RET
// function SavePlayerCharacters ; var othersYour ; begin
8682: LD_INT 0
8684: PPUSH
8685: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8686: LD_EXP 24
8690: PPUSH
8691: LD_STRING 04_Burlak
8693: PPUSH
8694: CALL_OW 38
// end ;
8698: LD_VAR 0 1
8702: RET
// function SaveGlobalVariables ; begin
8703: LD_INT 0
8705: PPUSH
// end ; end_of_file
8706: LD_VAR 0 1
8710: RET
// export function Nef_PrepareNature ; var i , un ; begin
8711: LD_INT 0
8713: PPUSH
8714: PPUSH
8715: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
8716: LD_ADDR_VAR 0 2
8720: PUSH
8721: DOUBLE
8722: LD_INT 1
8724: DEC
8725: ST_TO_ADDR
8726: LD_EXP 15
8730: PUSH
8731: LD_INT 1
8733: ARRAY
8734: PUSH
8735: FOR_TO
8736: IFFALSE 8846
// begin uc_side = 0 ;
8738: LD_ADDR_OWVAR 20
8742: PUSH
8743: LD_INT 0
8745: ST_TO_ADDR
// uc_nation = nation_nature ;
8746: LD_ADDR_OWVAR 21
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// hc_class = class_apeman ;
8754: LD_ADDR_OWVAR 28
8758: PUSH
8759: LD_INT 12
8761: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
8762: LD_ADDR_OWVAR 31
8766: PUSH
8767: LD_EXP 16
8771: PUSH
8772: LD_INT 1
8774: ARRAY
8775: PUSH
8776: LD_EXP 16
8780: PUSH
8781: LD_INT 2
8783: ARRAY
8784: PUSH
8785: LD_EXP 16
8789: PUSH
8790: LD_INT 3
8792: ARRAY
8793: PUSH
8794: LD_EXP 16
8798: PUSH
8799: LD_INT 4
8801: ARRAY
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
8809: LD_ADDR_OWVAR 35
8813: PUSH
8814: LD_EXP 17
8818: ST_TO_ADDR
// un = CreateHuman ;
8819: LD_ADDR_VAR 0 3
8823: PUSH
8824: CALL_OW 44
8828: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
8829: LD_VAR 0 3
8833: PPUSH
8834: LD_INT 33
8836: PPUSH
8837: LD_INT 0
8839: PPUSH
8840: CALL_OW 49
// end ;
8844: GO 8735
8846: POP
8847: POP
// for i := 1 to animalsAmount [ 2 ] do
8848: LD_ADDR_VAR 0 2
8852: PUSH
8853: DOUBLE
8854: LD_INT 1
8856: DEC
8857: ST_TO_ADDR
8858: LD_EXP 15
8862: PUSH
8863: LD_INT 2
8865: ARRAY
8866: PUSH
8867: FOR_TO
8868: IFFALSE 8978
// begin uc_side = 0 ;
8870: LD_ADDR_OWVAR 20
8874: PUSH
8875: LD_INT 0
8877: ST_TO_ADDR
// uc_nation = nation_nature ;
8878: LD_ADDR_OWVAR 21
8882: PUSH
8883: LD_INT 0
8885: ST_TO_ADDR
// hc_class = class_phororhacos ;
8886: LD_ADDR_OWVAR 28
8890: PUSH
8891: LD_INT 18
8893: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
8894: LD_ADDR_OWVAR 31
8898: PUSH
8899: LD_EXP 16
8903: PUSH
8904: LD_INT 1
8906: ARRAY
8907: PUSH
8908: LD_EXP 16
8912: PUSH
8913: LD_INT 2
8915: ARRAY
8916: PUSH
8917: LD_EXP 16
8921: PUSH
8922: LD_INT 3
8924: ARRAY
8925: PUSH
8926: LD_EXP 16
8930: PUSH
8931: LD_INT 4
8933: ARRAY
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
8941: LD_ADDR_OWVAR 35
8945: PUSH
8946: LD_EXP 17
8950: ST_TO_ADDR
// un = CreateHuman ;
8951: LD_ADDR_VAR 0 3
8955: PUSH
8956: CALL_OW 44
8960: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
8961: LD_VAR 0 3
8965: PPUSH
8966: LD_INT 33
8968: PPUSH
8969: LD_INT 0
8971: PPUSH
8972: CALL_OW 49
// end ;
8976: GO 8867
8978: POP
8979: POP
// for i := 1 to animalsAmount [ 3 ] do
8980: LD_ADDR_VAR 0 2
8984: PUSH
8985: DOUBLE
8986: LD_INT 1
8988: DEC
8989: ST_TO_ADDR
8990: LD_EXP 15
8994: PUSH
8995: LD_INT 3
8997: ARRAY
8998: PUSH
8999: FOR_TO
9000: IFFALSE 9110
// begin uc_side = 0 ;
9002: LD_ADDR_OWVAR 20
9006: PUSH
9007: LD_INT 0
9009: ST_TO_ADDR
// uc_nation = nation_nature ;
9010: LD_ADDR_OWVAR 21
9014: PUSH
9015: LD_INT 0
9017: ST_TO_ADDR
// hc_class = class_tiger ;
9018: LD_ADDR_OWVAR 28
9022: PUSH
9023: LD_INT 14
9025: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
9026: LD_ADDR_OWVAR 31
9030: PUSH
9031: LD_EXP 16
9035: PUSH
9036: LD_INT 1
9038: ARRAY
9039: PUSH
9040: LD_EXP 16
9044: PUSH
9045: LD_INT 2
9047: ARRAY
9048: PUSH
9049: LD_EXP 16
9053: PUSH
9054: LD_INT 3
9056: ARRAY
9057: PUSH
9058: LD_EXP 16
9062: PUSH
9063: LD_INT 4
9065: ARRAY
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
9073: LD_ADDR_OWVAR 35
9077: PUSH
9078: LD_EXP 17
9082: ST_TO_ADDR
// un = CreateHuman ;
9083: LD_ADDR_VAR 0 3
9087: PUSH
9088: CALL_OW 44
9092: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
9093: LD_VAR 0 3
9097: PPUSH
9098: LD_INT 33
9100: PPUSH
9101: LD_INT 0
9103: PPUSH
9104: CALL_OW 49
// end ;
9108: GO 8999
9110: POP
9111: POP
// for i := 1 to animalsAmount [ 4 ] do
9112: LD_ADDR_VAR 0 2
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_EXP 15
9126: PUSH
9127: LD_INT 4
9129: ARRAY
9130: PUSH
9131: FOR_TO
9132: IFFALSE 9242
// begin uc_side = 0 ;
9134: LD_ADDR_OWVAR 20
9138: PUSH
9139: LD_INT 0
9141: ST_TO_ADDR
// uc_nation = nation_nature ;
9142: LD_ADDR_OWVAR 21
9146: PUSH
9147: LD_INT 0
9149: ST_TO_ADDR
// hc_class = 21 ;
9150: LD_ADDR_OWVAR 28
9154: PUSH
9155: LD_INT 21
9157: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
9158: LD_ADDR_OWVAR 31
9162: PUSH
9163: LD_EXP 16
9167: PUSH
9168: LD_INT 1
9170: ARRAY
9171: PUSH
9172: LD_EXP 16
9176: PUSH
9177: LD_INT 2
9179: ARRAY
9180: PUSH
9181: LD_EXP 16
9185: PUSH
9186: LD_INT 3
9188: ARRAY
9189: PUSH
9190: LD_EXP 16
9194: PUSH
9195: LD_INT 4
9197: ARRAY
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
9205: LD_ADDR_OWVAR 35
9209: PUSH
9210: LD_EXP 17
9214: ST_TO_ADDR
// un = CreateHuman ;
9215: LD_ADDR_VAR 0 3
9219: PUSH
9220: CALL_OW 44
9224: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
9225: LD_VAR 0 3
9229: PPUSH
9230: LD_INT 33
9232: PPUSH
9233: LD_INT 0
9235: PPUSH
9236: CALL_OW 49
// end ;
9240: GO 9131
9242: POP
9243: POP
// for i := 1 to animalsAmount [ 5 ] do
9244: LD_ADDR_VAR 0 2
9248: PUSH
9249: DOUBLE
9250: LD_INT 1
9252: DEC
9253: ST_TO_ADDR
9254: LD_EXP 15
9258: PUSH
9259: LD_INT 5
9261: ARRAY
9262: PUSH
9263: FOR_TO
9264: IFFALSE 9325
// begin uc_side = 0 ;
9266: LD_ADDR_OWVAR 20
9270: PUSH
9271: LD_INT 0
9273: ST_TO_ADDR
// uc_nation = nation_nature ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_INT 0
9281: ST_TO_ADDR
// vc_chassis := 31 ;
9282: LD_ADDR_OWVAR 37
9286: PUSH
9287: LD_INT 31
9289: ST_TO_ADDR
// vc_control := control_rider ;
9290: LD_ADDR_OWVAR 38
9294: PUSH
9295: LD_INT 4
9297: ST_TO_ADDR
// un := CreateVehicle ;
9298: LD_ADDR_VAR 0 3
9302: PUSH
9303: CALL_OW 45
9307: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
9308: LD_VAR 0 3
9312: PPUSH
9313: LD_INT 33
9315: PPUSH
9316: LD_INT 0
9318: PPUSH
9319: CALL_OW 49
// end ;
9323: GO 9263
9325: POP
9326: POP
// end ; end_of_file end_of_file end_of_file
9327: LD_VAR 0 1
9331: RET
// export Stevens ; export function PrepareStevens ; begin
9332: LD_INT 0
9334: PPUSH
// uc_side = 1 ;
9335: LD_ADDR_OWVAR 20
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
9343: LD_ADDR_EXP 37
9347: PUSH
9348: LD_STRING Stevens
9350: PPUSH
9351: LD_INT 0
9353: PPUSH
9354: LD_INT 0
9356: PPUSH
9357: CALL 6630 0 3
9361: ST_TO_ADDR
// PlaceUnitArea ( Stevens , StevensSpawnArea , true ) ;
9362: LD_EXP 37
9366: PPUSH
9367: LD_INT 36
9369: PPUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 49
// end ; end_of_file
9377: LD_VAR 0 1
9381: RET
// export function BuildBase ; var engs ; begin
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
9386: LD_ADDR_VAR 0 2
9390: PUSH
9391: LD_INT 22
9393: PUSH
9394: LD_INT 2
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_INT 21
9403: PUSH
9404: LD_INT 1
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 25
9413: PUSH
9414: LD_INT 2
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 69
9430: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
9431: LD_VAR 0 2
9435: PPUSH
9436: LD_INT 4
9438: PPUSH
9439: LD_INT 129
9441: PPUSH
9442: LD_INT 74
9444: PPUSH
9445: LD_INT 2
9447: PPUSH
9448: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
9452: LD_VAR 0 2
9456: PPUSH
9457: LD_INT 26
9459: PPUSH
9460: LD_INT 128
9462: PPUSH
9463: LD_INT 53
9465: PPUSH
9466: LD_INT 2
9468: PPUSH
9469: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
9473: LD_VAR 0 2
9477: PPUSH
9478: LD_INT 6
9480: PPUSH
9481: LD_INT 138
9483: PPUSH
9484: LD_INT 78
9486: PPUSH
9487: LD_INT 5
9489: PPUSH
9490: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
9494: LD_VAR 0 2
9498: PPUSH
9499: LD_INT 2
9501: PPUSH
9502: LD_INT 137
9504: PPUSH
9505: LD_INT 63
9507: PPUSH
9508: LD_INT 4
9510: PPUSH
9511: CALL_OW 205
// AddComBuild ( engs , b_ext_noncombat , 137 , 60 , 3 ) ;
9515: LD_VAR 0 2
9519: PPUSH
9520: LD_INT 19
9522: PPUSH
9523: LD_INT 137
9525: PPUSH
9526: LD_INT 60
9528: PPUSH
9529: LD_INT 3
9531: PPUSH
9532: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
9536: LD_VAR 0 2
9540: PPUSH
9541: LD_INT 16
9543: PPUSH
9544: LD_INT 140
9546: PPUSH
9547: LD_INT 66
9549: PPUSH
9550: LD_INT 5
9552: PPUSH
9553: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
9557: LD_VAR 0 2
9561: PPUSH
9562: LD_INT 17
9564: PPUSH
9565: LD_INT 133
9567: PPUSH
9568: LD_INT 59
9570: PPUSH
9571: LD_INT 2
9573: PPUSH
9574: CALL_OW 205
// AddComBuild ( engs , b_ext_noncombat , 137 , 60 , 3 ) ;
9578: LD_VAR 0 2
9582: PPUSH
9583: LD_INT 19
9585: PPUSH
9586: LD_INT 137
9588: PPUSH
9589: LD_INT 60
9591: PPUSH
9592: LD_INT 3
9594: PPUSH
9595: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
9599: LD_INT 1
9601: PUSH
9602: LD_EXP 35
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PPUSH
9611: LD_INT 128
9613: PPUSH
9614: LD_INT 66
9616: PPUSH
9617: CALL_OW 111
// end ;
9621: LD_VAR 0 1
9625: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
9626: LD_INT 0
9628: PPUSH
9629: PPUSH
9630: PPUSH
9631: PPUSH
9632: PPUSH
9633: PPUSH
9634: PPUSH
9635: PPUSH
9636: PPUSH
9637: PPUSH
9638: PPUSH
9639: PPUSH
9640: PPUSH
9641: PPUSH
9642: PPUSH
9643: PPUSH
9644: PPUSH
9645: PPUSH
9646: PPUSH
9647: PPUSH
9648: PPUSH
9649: PPUSH
9650: PPUSH
9651: PPUSH
9652: PPUSH
9653: PPUSH
9654: PPUSH
9655: PPUSH
9656: PPUSH
// personel = [ ] ;
9657: LD_ADDR_VAR 0 18
9661: PUSH
9662: EMPTY
9663: ST_TO_ADDR
// vehicles = [ ] ;
9664: LD_ADDR_VAR 0 24
9668: PUSH
9669: EMPTY
9670: ST_TO_ADDR
// for unit in basePersonel do
9671: LD_ADDR_VAR 0 17
9675: PUSH
9676: LD_VAR 0 3
9680: PUSH
9681: FOR_IN
9682: IFFALSE 9730
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
9684: LD_ADDR_VAR 0 18
9688: PUSH
9689: LD_VAR 0 18
9693: PUSH
9694: LD_VAR 0 17
9698: PUSH
9699: LD_VAR 0 17
9703: PPUSH
9704: CALL_OW 310
9708: PUSH
9709: LD_VAR 0 17
9713: PPUSH
9714: CALL_OW 302
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: PUSH
9724: EMPTY
9725: LIST
9726: ADD
9727: ST_TO_ADDR
9728: GO 9681
9730: POP
9731: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
9732: LD_ADDR_VAR 0 23
9736: PUSH
9737: LD_VAR 0 4
9741: PPUSH
9742: LD_INT 22
9744: PUSH
9745: LD_VAR 0 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 21
9756: PUSH
9757: LD_INT 2
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 50
9766: PUSH
9767: EMPTY
9768: LIST
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: LD_INT 31
9778: PUSH
9779: LD_INT 31
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: LD_INT 34
9788: PUSH
9789: LD_INT 12
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 34
9798: PUSH
9799: LD_INT 51
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 34
9808: PUSH
9809: LD_INT 32
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 70
9837: PUSH
9838: FOR_IN
9839: IFFALSE 9887
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
9841: LD_ADDR_VAR 0 24
9845: PUSH
9846: LD_VAR 0 24
9850: PUSH
9851: LD_VAR 0 23
9855: PUSH
9856: LD_VAR 0 23
9860: PPUSH
9861: CALL_OW 310
9865: PUSH
9866: LD_VAR 0 23
9870: PPUSH
9871: CALL_OW 302
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: ADD
9884: ST_TO_ADDR
9885: GO 9838
9887: POP
9888: POP
// repeat soldiers = [ ] ;
9889: LD_ADDR_VAR 0 19
9893: PUSH
9894: EMPTY
9895: ST_TO_ADDR
// engineers = [ ] ;
9896: LD_ADDR_VAR 0 20
9900: PUSH
9901: EMPTY
9902: ST_TO_ADDR
// mechanics = [ ] ;
9903: LD_ADDR_VAR 0 21
9907: PUSH
9908: EMPTY
9909: ST_TO_ADDR
// scientists = [ ] ;
9910: LD_ADDR_VAR 0 22
9914: PUSH
9915: EMPTY
9916: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9917: LD_ADDR_VAR 0 30
9921: PUSH
9922: LD_VAR 0 4
9926: PPUSH
9927: LD_INT 22
9929: PUSH
9930: LD_VAR 0 1
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 21
9941: PUSH
9942: LD_INT 3
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 50
9951: PUSH
9952: EMPTY
9953: LIST
9954: PUSH
9955: LD_INT 2
9957: PUSH
9958: LD_INT 30
9960: PUSH
9961: LD_INT 0
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 30
9970: PUSH
9971: LD_INT 1
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 70
9993: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
9994: LD_ADDR_VAR 0 31
9998: PUSH
9999: LD_VAR 0 4
10003: PPUSH
10004: LD_INT 22
10006: PUSH
10007: LD_VAR 0 1
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 21
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 50
10028: PUSH
10029: EMPTY
10030: LIST
10031: PUSH
10032: LD_INT 2
10034: PUSH
10035: LD_INT 30
10037: PUSH
10038: LD_INT 2
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: LD_INT 30
10047: PUSH
10048: LD_INT 3
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PPUSH
10066: CALL_OW 70
10070: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
10071: LD_ADDR_VAR 0 32
10075: PUSH
10076: LD_VAR 0 4
10080: PPUSH
10081: LD_INT 22
10083: PUSH
10084: LD_VAR 0 1
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: LD_INT 21
10095: PUSH
10096: LD_INT 3
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 50
10105: PUSH
10106: EMPTY
10107: LIST
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: LD_INT 30
10114: PUSH
10115: LD_INT 6
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 30
10124: PUSH
10125: LD_INT 7
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 30
10134: PUSH
10135: LD_INT 8
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: PPUSH
10154: CALL_OW 70
10158: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
10159: LD_ADDR_VAR 0 33
10163: PUSH
10164: LD_VAR 0 4
10168: PPUSH
10169: LD_INT 22
10171: PUSH
10172: LD_VAR 0 1
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 21
10183: PUSH
10184: LD_INT 3
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 50
10193: PUSH
10194: EMPTY
10195: LIST
10196: PUSH
10197: LD_INT 2
10199: PUSH
10200: LD_INT 30
10202: PUSH
10203: LD_INT 31
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 30
10212: PUSH
10213: LD_INT 32
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: LIST
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 70
10235: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10236: LD_ADDR_VAR 0 34
10240: PUSH
10241: LD_VAR 0 4
10245: PPUSH
10246: LD_INT 22
10248: PUSH
10249: LD_VAR 0 1
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 21
10260: PUSH
10261: LD_INT 3
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 50
10270: PUSH
10271: EMPTY
10272: LIST
10273: PUSH
10274: LD_INT 2
10276: PUSH
10277: LD_INT 30
10279: PUSH
10280: LD_INT 4
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 30
10289: PUSH
10290: LD_INT 5
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: PPUSH
10308: CALL_OW 70
10312: ST_TO_ADDR
// for i := 1 to personel do
10313: LD_ADDR_VAR 0 13
10317: PUSH
10318: DOUBLE
10319: LD_INT 1
10321: DEC
10322: ST_TO_ADDR
10323: LD_VAR 0 18
10327: PUSH
10328: FOR_TO
10329: IFFALSE 10539
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
10331: LD_VAR 0 18
10335: PUSH
10336: LD_VAR 0 13
10340: ARRAY
10341: PUSH
10342: LD_INT 1
10344: ARRAY
10345: PPUSH
10346: CALL_OW 256
10350: PUSH
10351: LD_INT 1000
10353: EQUAL
10354: IFFALSE 10396
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
10356: LD_ADDR_VAR 0 18
10360: PUSH
10361: LD_VAR 0 18
10365: PPUSH
10366: LD_VAR 0 13
10370: PUSH
10371: LD_VAR 0 18
10375: PUSH
10376: LD_VAR 0 13
10380: ARRAY
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL 22407 0 3
10393: ST_TO_ADDR
// end else
10394: GO 10487
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
10396: LD_VAR 0 18
10400: PUSH
10401: LD_VAR 0 13
10405: ARRAY
10406: PUSH
10407: LD_INT 1
10409: ARRAY
10410: PPUSH
10411: CALL_OW 256
10415: PUSH
10416: LD_INT 950
10418: LESSEQUAL
10419: IFFALSE 10487
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , 0 ) ;
10421: LD_ADDR_VAR 0 18
10425: PUSH
10426: LD_VAR 0 18
10430: PPUSH
10431: LD_VAR 0 13
10435: PUSH
10436: LD_VAR 0 18
10440: PUSH
10441: LD_VAR 0 13
10445: ARRAY
10446: PUSH
10447: LD_INT 1
10449: MINUS
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PPUSH
10455: LD_INT 0
10457: PPUSH
10458: CALL 22407 0 3
10462: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
10463: LD_VAR 0 18
10467: PUSH
10468: LD_VAR 0 13
10472: ARRAY
10473: PUSH
10474: LD_INT 1
10476: ARRAY
10477: PPUSH
10478: LD_VAR 0 5
10482: PPUSH
10483: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
10487: LD_VAR 0 18
10491: PUSH
10492: LD_VAR 0 13
10496: ARRAY
10497: PUSH
10498: LD_INT 1
10500: ARRAY
10501: PPUSH
10502: CALL_OW 256
10506: PUSH
10507: LD_INT 250
10509: LESS
10510: IFFALSE 10537
// personel = personel diff [ personel [ i ] ] ;
10512: LD_ADDR_VAR 0 18
10516: PUSH
10517: LD_VAR 0 18
10521: PUSH
10522: LD_VAR 0 18
10526: PUSH
10527: LD_VAR 0 13
10531: ARRAY
10532: PUSH
10533: EMPTY
10534: LIST
10535: DIFF
10536: ST_TO_ADDR
// end ;
10537: GO 10328
10539: POP
10540: POP
// for i := 1 to vehicles do
10541: LD_ADDR_VAR 0 13
10545: PUSH
10546: DOUBLE
10547: LD_INT 1
10549: DEC
10550: ST_TO_ADDR
10551: LD_VAR 0 24
10555: PUSH
10556: FOR_TO
10557: IFFALSE 10896
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
10559: LD_VAR 0 24
10563: PUSH
10564: LD_VAR 0 13
10568: ARRAY
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PPUSH
10574: CALL_OW 256
10578: PUSH
10579: LD_INT 1000
10581: EQUAL
10582: IFFALSE 10757
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
10584: LD_VAR 0 24
10588: PUSH
10589: LD_VAR 0 13
10593: ARRAY
10594: PUSH
10595: LD_INT 1
10597: ARRAY
10598: PPUSH
10599: CALL_OW 263
10603: PUSH
10604: LD_INT 1
10606: EQUAL
10607: IFFALSE 10665
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
10609: LD_VAR 0 24
10613: PUSH
10614: LD_VAR 0 13
10618: ARRAY
10619: PUSH
10620: LD_INT 2
10622: ARRAY
10623: PPUSH
10624: CALL_OW 310
10628: NOT
10629: IFFALSE 10665
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
10631: LD_VAR 0 24
10635: PUSH
10636: LD_VAR 0 13
10640: ARRAY
10641: PUSH
10642: LD_INT 2
10644: ARRAY
10645: PPUSH
10646: LD_VAR 0 24
10650: PUSH
10651: LD_VAR 0 13
10655: ARRAY
10656: PUSH
10657: LD_INT 1
10659: ARRAY
10660: PPUSH
10661: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
10665: LD_VAR 0 24
10669: PUSH
10670: LD_VAR 0 10
10674: LESS
10675: IFFALSE 10717
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
10677: LD_ADDR_VAR 0 24
10681: PUSH
10682: LD_VAR 0 24
10686: PPUSH
10687: LD_VAR 0 13
10691: PUSH
10692: LD_VAR 0 24
10696: PUSH
10697: LD_VAR 0 13
10701: ARRAY
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PPUSH
10707: LD_INT 3
10709: PPUSH
10710: CALL 22407 0 3
10714: ST_TO_ADDR
10715: GO 10755
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
10717: LD_ADDR_VAR 0 24
10721: PUSH
10722: LD_VAR 0 24
10726: PPUSH
10727: LD_VAR 0 13
10731: PUSH
10732: LD_VAR 0 24
10736: PUSH
10737: LD_VAR 0 13
10741: ARRAY
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: LD_INT 2
10749: PPUSH
10750: CALL 22407 0 3
10754: ST_TO_ADDR
// end else
10755: GO 10844
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
10757: LD_VAR 0 24
10761: PUSH
10762: LD_VAR 0 13
10766: ARRAY
10767: PUSH
10768: LD_INT 1
10770: ARRAY
10771: PPUSH
10772: CALL_OW 256
10776: PUSH
10777: LD_INT 650
10779: LESSEQUAL
10780: IFFALSE 10844
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
10782: LD_ADDR_VAR 0 24
10786: PUSH
10787: LD_VAR 0 24
10791: PPUSH
10792: LD_VAR 0 13
10796: PUSH
10797: LD_VAR 0 24
10801: PUSH
10802: LD_VAR 0 13
10806: ARRAY
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PPUSH
10812: LD_INT 0
10814: PPUSH
10815: CALL 22407 0 3
10819: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
10820: LD_VAR 0 24
10824: PUSH
10825: LD_VAR 0 13
10829: ARRAY
10830: PUSH
10831: LD_INT 1
10833: ARRAY
10834: PPUSH
10835: LD_VAR 0 6
10839: PPUSH
10840: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
10844: LD_VAR 0 24
10848: PUSH
10849: LD_VAR 0 13
10853: ARRAY
10854: PUSH
10855: LD_INT 1
10857: ARRAY
10858: PPUSH
10859: CALL_OW 256
10863: PUSH
10864: LD_INT 250
10866: LESS
10867: IFFALSE 10894
// vehicles = vehicles diff [ vehicles [ i ] ] ;
10869: LD_ADDR_VAR 0 24
10873: PUSH
10874: LD_VAR 0 24
10878: PUSH
10879: LD_VAR 0 24
10883: PUSH
10884: LD_VAR 0 13
10888: ARRAY
10889: PUSH
10890: EMPTY
10891: LIST
10892: DIFF
10893: ST_TO_ADDR
// end ;
10894: GO 10556
10896: POP
10897: POP
// for i := 1 to personel do
10898: LD_ADDR_VAR 0 13
10902: PUSH
10903: DOUBLE
10904: LD_INT 1
10906: DEC
10907: ST_TO_ADDR
10908: LD_VAR 0 18
10912: PUSH
10913: FOR_TO
10914: IFFALSE 10955
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
10916: LD_ADDR_VAR 0 19
10920: PUSH
10921: LD_VAR 0 19
10925: PUSH
10926: LD_VAR 0 18
10930: PUSH
10931: LD_VAR 0 13
10935: ARRAY
10936: PPUSH
10937: LD_INT 25
10939: PUSH
10940: LD_INT 1
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PPUSH
10947: CALL_OW 72
10951: ADD
10952: ST_TO_ADDR
10953: GO 10913
10955: POP
10956: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
10957: LD_VAR 0 19
10961: PUSH
10962: LD_VAR 0 33
10966: PPUSH
10967: LD_INT 3
10969: PUSH
10970: LD_INT 59
10972: PUSH
10973: EMPTY
10974: LIST
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PPUSH
10980: CALL_OW 72
10984: AND
10985: IFFALSE 11273
// begin for i := 1 to personel do
10987: LD_ADDR_VAR 0 13
10991: PUSH
10992: DOUBLE
10993: LD_INT 1
10995: DEC
10996: ST_TO_ADDR
10997: LD_VAR 0 18
11001: PUSH
11002: FOR_TO
11003: IFFALSE 11269
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
11005: LD_VAR 0 18
11009: PUSH
11010: LD_VAR 0 13
11014: ARRAY
11015: PUSH
11016: LD_INT 1
11018: ARRAY
11019: PPUSH
11020: CALL_OW 257
11024: PUSH
11025: LD_INT 1
11027: EQUAL
11028: PUSH
11029: LD_VAR 0 18
11033: PUSH
11034: LD_VAR 0 13
11038: ARRAY
11039: PUSH
11040: LD_INT 3
11042: ARRAY
11043: PUSH
11044: LD_INT 1
11046: EQUAL
11047: AND
11048: IFFALSE 11267
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
11050: LD_VAR 0 18
11054: PUSH
11055: LD_VAR 0 13
11059: ARRAY
11060: PUSH
11061: LD_INT 1
11063: ARRAY
11064: PPUSH
11065: CALL_OW 437
11069: IFFALSE 11170
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
11071: LD_VAR 0 18
11075: PUSH
11076: LD_VAR 0 13
11080: ARRAY
11081: PUSH
11082: LD_INT 1
11084: ARRAY
11085: PPUSH
11086: CALL_OW 437
11090: PUSH
11091: LD_INT 1
11093: ARRAY
11094: PUSH
11095: LD_INT 1
11097: ARRAY
11098: PUSH
11099: LD_STRING e
11101: EQUAL
11102: PUSH
11103: LD_VAR 0 18
11107: PUSH
11108: LD_VAR 0 13
11112: ARRAY
11113: PUSH
11114: LD_INT 1
11116: ARRAY
11117: PPUSH
11118: CALL_OW 437
11122: PUSH
11123: LD_INT 1
11125: ARRAY
11126: PUSH
11127: LD_INT 4
11129: ARRAY
11130: PPUSH
11131: CALL_OW 266
11135: PUSH
11136: LD_INT 4
11138: PUSH
11139: LD_INT 5
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: IN
11146: AND
11147: IFFALSE 11170
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
11149: LD_VAR 0 18
11153: PUSH
11154: LD_VAR 0 13
11158: ARRAY
11159: PUSH
11160: LD_INT 1
11162: ARRAY
11163: PPUSH
11164: EMPTY
11165: PPUSH
11166: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
11170: LD_ADDR_VAR 0 37
11174: PUSH
11175: LD_VAR 0 33
11179: PPUSH
11180: LD_INT 3
11182: PUSH
11183: LD_INT 59
11185: PUSH
11186: EMPTY
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: CALL_OW 72
11197: PUSH
11198: FOR_IN
11199: IFFALSE 11265
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
11201: LD_VAR 0 18
11205: PUSH
11206: LD_VAR 0 13
11210: ARRAY
11211: PUSH
11212: LD_INT 1
11214: ARRAY
11215: PPUSH
11216: CALL_OW 310
11220: PPUSH
11221: CALL_OW 266
11225: PUSH
11226: LD_INT 31
11228: PUSH
11229: LD_INT 32
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: IN
11236: NOT
11237: IFFALSE 11263
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
11239: LD_VAR 0 18
11243: PUSH
11244: LD_VAR 0 13
11248: ARRAY
11249: PUSH
11250: LD_INT 1
11252: ARRAY
11253: PPUSH
11254: LD_VAR 0 37
11258: PPUSH
11259: CALL_OW 120
11263: GO 11198
11265: POP
11266: POP
// end ; end ;
11267: GO 11002
11269: POP
11270: POP
// end else
11271: GO 11488
// if soldiers and barracks then
11273: LD_VAR 0 19
11277: PUSH
11278: LD_VAR 0 34
11282: AND
11283: IFFALSE 11488
// for i := 1 to personel do
11285: LD_ADDR_VAR 0 13
11289: PUSH
11290: DOUBLE
11291: LD_INT 1
11293: DEC
11294: ST_TO_ADDR
11295: LD_VAR 0 18
11299: PUSH
11300: FOR_TO
11301: IFFALSE 11486
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
11303: LD_VAR 0 18
11307: PUSH
11308: LD_VAR 0 13
11312: ARRAY
11313: PUSH
11314: LD_INT 1
11316: ARRAY
11317: PPUSH
11318: CALL_OW 257
11322: PUSH
11323: LD_INT 1
11325: EQUAL
11326: PUSH
11327: LD_VAR 0 18
11331: PUSH
11332: LD_VAR 0 13
11336: ARRAY
11337: PUSH
11338: LD_INT 3
11340: ARRAY
11341: PUSH
11342: LD_INT 1
11344: EQUAL
11345: AND
11346: PUSH
11347: LD_VAR 0 18
11351: PUSH
11352: LD_VAR 0 13
11356: ARRAY
11357: PUSH
11358: LD_INT 1
11360: ARRAY
11361: PPUSH
11362: LD_INT 56
11364: PUSH
11365: EMPTY
11366: LIST
11367: PPUSH
11368: CALL_OW 72
11372: AND
11373: IFFALSE 11484
// begin if not personel [ i ] [ 2 ] then
11375: LD_VAR 0 18
11379: PUSH
11380: LD_VAR 0 13
11384: ARRAY
11385: PUSH
11386: LD_INT 2
11388: ARRAY
11389: NOT
11390: IFFALSE 11450
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
11392: LD_ADDR_VAR 0 18
11396: PUSH
11397: LD_VAR 0 18
11401: PPUSH
11402: LD_VAR 0 13
11406: PUSH
11407: LD_VAR 0 18
11411: PUSH
11412: LD_VAR 0 13
11416: ARRAY
11417: PUSH
11418: LD_INT 1
11420: MINUS
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PPUSH
11426: LD_VAR 0 34
11430: PUSH
11431: LD_INT 1
11433: PPUSH
11434: LD_VAR 0 34
11438: PPUSH
11439: CALL_OW 12
11443: ARRAY
11444: PPUSH
11445: CALL 22407 0 3
11449: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
11450: LD_VAR 0 18
11454: PUSH
11455: LD_VAR 0 13
11459: ARRAY
11460: PUSH
11461: LD_INT 1
11463: ARRAY
11464: PPUSH
11465: LD_VAR 0 18
11469: PUSH
11470: LD_VAR 0 13
11474: ARRAY
11475: PUSH
11476: LD_INT 2
11478: ARRAY
11479: PPUSH
11480: CALL_OW 120
// end ;
11484: GO 11300
11486: POP
11487: POP
// for i := 1 to personel do
11488: LD_ADDR_VAR 0 13
11492: PUSH
11493: DOUBLE
11494: LD_INT 1
11496: DEC
11497: ST_TO_ADDR
11498: LD_VAR 0 18
11502: PUSH
11503: FOR_TO
11504: IFFALSE 11545
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
11506: LD_ADDR_VAR 0 20
11510: PUSH
11511: LD_VAR 0 20
11515: PUSH
11516: LD_VAR 0 18
11520: PUSH
11521: LD_VAR 0 13
11525: ARRAY
11526: PPUSH
11527: LD_INT 25
11529: PUSH
11530: LD_INT 2
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 72
11541: ADD
11542: ST_TO_ADDR
11543: GO 11503
11545: POP
11546: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
11547: LD_VAR 0 20
11551: PUSH
11552: LD_VAR 0 4
11556: PPUSH
11557: LD_INT 22
11559: PUSH
11560: LD_VAR 0 1
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 21
11571: PUSH
11572: LD_INT 3
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: LD_INT 24
11584: PUSH
11585: LD_INT 1000
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: PPUSH
11601: CALL_OW 70
11605: AND
11606: IFFALSE 11882
// begin for i := 1 to personel do
11608: LD_ADDR_VAR 0 13
11612: PUSH
11613: DOUBLE
11614: LD_INT 1
11616: DEC
11617: ST_TO_ADDR
11618: LD_VAR 0 18
11622: PUSH
11623: FOR_TO
11624: IFFALSE 11878
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
11626: LD_VAR 0 18
11630: PUSH
11631: LD_VAR 0 13
11635: ARRAY
11636: PUSH
11637: LD_INT 1
11639: ARRAY
11640: PPUSH
11641: CALL_OW 257
11645: PUSH
11646: LD_INT 2
11648: EQUAL
11649: PUSH
11650: LD_VAR 0 18
11654: PUSH
11655: LD_VAR 0 13
11659: ARRAY
11660: PUSH
11661: LD_INT 3
11663: ARRAY
11664: PUSH
11665: LD_INT 1
11667: EQUAL
11668: AND
11669: IFFALSE 11876
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
11671: LD_VAR 0 18
11675: PUSH
11676: LD_VAR 0 13
11680: ARRAY
11681: PUSH
11682: LD_INT 1
11684: ARRAY
11685: PPUSH
11686: CALL_OW 437
11690: IFFALSE 11746
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
11692: LD_VAR 0 18
11696: PUSH
11697: LD_VAR 0 13
11701: ARRAY
11702: PUSH
11703: LD_INT 1
11705: ARRAY
11706: PPUSH
11707: CALL_OW 437
11711: PUSH
11712: LD_INT 1
11714: ARRAY
11715: PUSH
11716: LD_INT 1
11718: ARRAY
11719: PUSH
11720: LD_STRING e
11722: EQUAL
11723: IFFALSE 11746
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
11725: LD_VAR 0 18
11729: PUSH
11730: LD_VAR 0 13
11734: ARRAY
11735: PUSH
11736: LD_INT 1
11738: ARRAY
11739: PPUSH
11740: EMPTY
11741: PPUSH
11742: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
11746: LD_VAR 0 18
11750: PUSH
11751: LD_VAR 0 13
11755: ARRAY
11756: PUSH
11757: LD_INT 1
11759: ARRAY
11760: PPUSH
11761: CALL_OW 310
11765: IFFALSE 11786
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
11767: LD_VAR 0 18
11771: PUSH
11772: LD_VAR 0 13
11776: ARRAY
11777: PUSH
11778: LD_INT 1
11780: ARRAY
11781: PPUSH
11782: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11786: LD_ADDR_VAR 0 35
11790: PUSH
11791: LD_VAR 0 4
11795: PPUSH
11796: LD_INT 22
11798: PUSH
11799: LD_VAR 0 1
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 21
11810: PUSH
11811: LD_INT 3
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 3
11820: PUSH
11821: LD_INT 24
11823: PUSH
11824: LD_INT 1000
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 70
11844: PUSH
11845: FOR_IN
11846: IFFALSE 11874
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
11848: LD_VAR 0 18
11852: PUSH
11853: LD_VAR 0 13
11857: ARRAY
11858: PUSH
11859: LD_INT 1
11861: ARRAY
11862: PPUSH
11863: LD_VAR 0 35
11867: PPUSH
11868: CALL_OW 190
11872: GO 11845
11874: POP
11875: POP
// end ;
11876: GO 11623
11878: POP
11879: POP
// end else
11880: GO 12144
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
11882: LD_VAR 0 20
11886: PUSH
11887: LD_VAR 0 20
11891: PPUSH
11892: LD_INT 56
11894: PUSH
11895: EMPTY
11896: LIST
11897: PPUSH
11898: CALL_OW 72
11902: AND
11903: PUSH
11904: LD_VAR 0 30
11908: AND
11909: IFFALSE 12144
// for i := 1 to personel do
11911: LD_ADDR_VAR 0 13
11915: PUSH
11916: DOUBLE
11917: LD_INT 1
11919: DEC
11920: ST_TO_ADDR
11921: LD_VAR 0 18
11925: PUSH
11926: FOR_TO
11927: IFFALSE 12142
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
11929: LD_VAR 0 18
11933: PUSH
11934: LD_VAR 0 13
11938: ARRAY
11939: PUSH
11940: LD_INT 1
11942: ARRAY
11943: PPUSH
11944: CALL_OW 257
11948: PUSH
11949: LD_INT 2
11951: EQUAL
11952: PUSH
11953: LD_VAR 0 18
11957: PUSH
11958: LD_VAR 0 13
11962: ARRAY
11963: PUSH
11964: LD_INT 3
11966: ARRAY
11967: PUSH
11968: LD_INT 1
11970: EQUAL
11971: AND
11972: IFFALSE 12140
// begin if not personel [ i ] [ 2 ] then
11974: LD_VAR 0 18
11978: PUSH
11979: LD_VAR 0 13
11983: ARRAY
11984: PUSH
11985: LD_INT 2
11987: ARRAY
11988: NOT
11989: IFFALSE 12106
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
11991: LD_ADDR_VAR 0 18
11995: PUSH
11996: LD_VAR 0 18
12000: PPUSH
12001: LD_VAR 0 13
12005: PUSH
12006: LD_VAR 0 18
12010: PUSH
12011: LD_VAR 0 13
12015: ARRAY
12016: PUSH
12017: LD_INT 1
12019: MINUS
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PPUSH
12025: LD_VAR 0 4
12029: PPUSH
12030: LD_INT 22
12032: PUSH
12033: LD_VAR 0 1
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 21
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 50
12054: PUSH
12055: EMPTY
12056: LIST
12057: PUSH
12058: LD_INT 2
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: LD_INT 0
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 30
12073: PUSH
12074: LD_INT 1
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PPUSH
12092: CALL_OW 70
12096: PUSH
12097: LD_INT 1
12099: ARRAY
12100: PPUSH
12101: CALL 22407 0 3
12105: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12106: LD_VAR 0 18
12110: PUSH
12111: LD_VAR 0 13
12115: ARRAY
12116: PUSH
12117: LD_INT 1
12119: ARRAY
12120: PPUSH
12121: LD_VAR 0 18
12125: PUSH
12126: LD_VAR 0 13
12130: ARRAY
12131: PUSH
12132: LD_INT 2
12134: ARRAY
12135: PPUSH
12136: CALL_OW 120
// end ; end ;
12140: GO 11926
12142: POP
12143: POP
// for i := 1 to personel do
12144: LD_ADDR_VAR 0 13
12148: PUSH
12149: DOUBLE
12150: LD_INT 1
12152: DEC
12153: ST_TO_ADDR
12154: LD_VAR 0 18
12158: PUSH
12159: FOR_TO
12160: IFFALSE 12201
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
12162: LD_ADDR_VAR 0 21
12166: PUSH
12167: LD_VAR 0 21
12171: PUSH
12172: LD_VAR 0 18
12176: PUSH
12177: LD_VAR 0 13
12181: ARRAY
12182: PPUSH
12183: LD_INT 25
12185: PUSH
12186: LD_INT 3
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PPUSH
12193: CALL_OW 72
12197: ADD
12198: ST_TO_ADDR
12199: GO 12159
12201: POP
12202: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12203: LD_VAR 0 21
12207: PUSH
12208: LD_VAR 0 4
12212: PPUSH
12213: LD_INT 22
12215: PUSH
12216: LD_VAR 0 1
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 21
12227: PUSH
12228: LD_INT 2
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: LD_INT 3
12237: PUSH
12238: LD_INT 24
12240: PUSH
12241: LD_INT 1000
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: PPUSH
12257: CALL_OW 70
12261: AND
12262: IFFALSE 12866
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
12264: LD_ADDR_VAR 0 36
12268: PUSH
12269: LD_VAR 0 4
12273: PPUSH
12274: LD_INT 22
12276: PUSH
12277: LD_VAR 0 1
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 21
12288: PUSH
12289: LD_INT 2
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 3
12298: PUSH
12299: LD_INT 24
12301: PUSH
12302: LD_INT 1000
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: PPUSH
12318: CALL_OW 70
12322: PUSH
12323: FOR_IN
12324: IFFALSE 12862
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
12326: LD_VAR 0 36
12330: PPUSH
12331: LD_VAR 0 6
12335: PPUSH
12336: CALL_OW 299
12340: PUSH
12341: LD_INT 5
12343: LESS
12344: IFFALSE 12639
// begin for i := 1 to vehicles do
12346: LD_ADDR_VAR 0 13
12350: PUSH
12351: DOUBLE
12352: LD_INT 1
12354: DEC
12355: ST_TO_ADDR
12356: LD_VAR 0 24
12360: PUSH
12361: FOR_TO
12362: IFFALSE 12431
// begin if vehicles [ i ] [ 1 ] = damageUnit then
12364: LD_VAR 0 24
12368: PUSH
12369: LD_VAR 0 13
12373: ARRAY
12374: PUSH
12375: LD_INT 1
12377: ARRAY
12378: PUSH
12379: LD_VAR 0 36
12383: EQUAL
12384: IFFALSE 12405
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
12386: LD_VAR 0 24
12390: PUSH
12391: LD_VAR 0 13
12395: ARRAY
12396: PUSH
12397: LD_INT 2
12399: ARRAY
12400: PPUSH
12401: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
12405: LD_VAR 0 24
12409: PUSH
12410: LD_VAR 0 13
12414: ARRAY
12415: PUSH
12416: LD_INT 2
12418: ARRAY
12419: PPUSH
12420: LD_VAR 0 36
12424: PPUSH
12425: CALL_OW 189
// end ;
12429: GO 12361
12431: POP
12432: POP
// for i := 1 to personel do
12433: LD_ADDR_VAR 0 13
12437: PUSH
12438: DOUBLE
12439: LD_INT 1
12441: DEC
12442: ST_TO_ADDR
12443: LD_VAR 0 18
12447: PUSH
12448: FOR_TO
12449: IFFALSE 12637
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
12451: LD_VAR 0 18
12455: PUSH
12456: LD_VAR 0 13
12460: ARRAY
12461: PUSH
12462: LD_INT 1
12464: ARRAY
12465: PPUSH
12466: CALL_OW 257
12470: PUSH
12471: LD_INT 3
12473: EQUAL
12474: PUSH
12475: LD_VAR 0 18
12479: PUSH
12480: LD_VAR 0 13
12484: ARRAY
12485: PUSH
12486: LD_INT 3
12488: ARRAY
12489: PUSH
12490: LD_INT 1
12492: EQUAL
12493: AND
12494: IFFALSE 12635
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12496: LD_VAR 0 18
12500: PUSH
12501: LD_VAR 0 13
12505: ARRAY
12506: PUSH
12507: LD_INT 1
12509: ARRAY
12510: PPUSH
12511: CALL_OW 437
12515: IFFALSE 12571
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
12517: LD_VAR 0 18
12521: PUSH
12522: LD_VAR 0 13
12526: ARRAY
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: CALL_OW 437
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: PUSH
12541: LD_INT 1
12543: ARRAY
12544: PUSH
12545: LD_STRING e
12547: EQUAL
12548: IFFALSE 12571
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12550: LD_VAR 0 18
12554: PUSH
12555: LD_VAR 0 13
12559: ARRAY
12560: PUSH
12561: LD_INT 1
12563: ARRAY
12564: PPUSH
12565: EMPTY
12566: PPUSH
12567: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
12571: LD_VAR 0 18
12575: PUSH
12576: LD_VAR 0 13
12580: ARRAY
12581: PUSH
12582: LD_INT 1
12584: ARRAY
12585: PPUSH
12586: CALL_OW 310
12590: IFFALSE 12611
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
12592: LD_VAR 0 18
12596: PUSH
12597: LD_VAR 0 13
12601: ARRAY
12602: PUSH
12603: LD_INT 1
12605: ARRAY
12606: PPUSH
12607: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
12611: LD_VAR 0 18
12615: PUSH
12616: LD_VAR 0 13
12620: ARRAY
12621: PUSH
12622: LD_INT 1
12624: ARRAY
12625: PPUSH
12626: LD_VAR 0 36
12630: PPUSH
12631: CALL_OW 189
// end ;
12635: GO 12448
12637: POP
12638: POP
// end ; if GetLives ( damageUnit ) < 250 then
12639: LD_VAR 0 36
12643: PPUSH
12644: CALL_OW 256
12648: PUSH
12649: LD_INT 250
12651: LESS
12652: IFFALSE 12860
// for i := 1 to personel do
12654: LD_ADDR_VAR 0 13
12658: PUSH
12659: DOUBLE
12660: LD_INT 1
12662: DEC
12663: ST_TO_ADDR
12664: LD_VAR 0 18
12668: PUSH
12669: FOR_TO
12670: IFFALSE 12858
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
12672: LD_VAR 0 18
12676: PUSH
12677: LD_VAR 0 13
12681: ARRAY
12682: PUSH
12683: LD_INT 1
12685: ARRAY
12686: PPUSH
12687: CALL_OW 257
12691: PUSH
12692: LD_INT 3
12694: EQUAL
12695: PUSH
12696: LD_VAR 0 18
12700: PUSH
12701: LD_VAR 0 13
12705: ARRAY
12706: PUSH
12707: LD_INT 3
12709: ARRAY
12710: PUSH
12711: LD_INT 1
12713: EQUAL
12714: AND
12715: IFFALSE 12856
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12717: LD_VAR 0 18
12721: PUSH
12722: LD_VAR 0 13
12726: ARRAY
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PPUSH
12732: CALL_OW 437
12736: IFFALSE 12792
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
12738: LD_VAR 0 18
12742: PUSH
12743: LD_VAR 0 13
12747: ARRAY
12748: PUSH
12749: LD_INT 1
12751: ARRAY
12752: PPUSH
12753: CALL_OW 437
12757: PUSH
12758: LD_INT 1
12760: ARRAY
12761: PUSH
12762: LD_INT 1
12764: ARRAY
12765: PUSH
12766: LD_STRING e
12768: EQUAL
12769: IFFALSE 12792
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12771: LD_VAR 0 18
12775: PUSH
12776: LD_VAR 0 13
12780: ARRAY
12781: PUSH
12782: LD_INT 1
12784: ARRAY
12785: PPUSH
12786: EMPTY
12787: PPUSH
12788: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
12792: LD_VAR 0 18
12796: PUSH
12797: LD_VAR 0 13
12801: ARRAY
12802: PUSH
12803: LD_INT 1
12805: ARRAY
12806: PPUSH
12807: CALL_OW 310
12811: IFFALSE 12832
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
12813: LD_VAR 0 18
12817: PUSH
12818: LD_VAR 0 13
12822: ARRAY
12823: PUSH
12824: LD_INT 1
12826: ARRAY
12827: PPUSH
12828: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
12832: LD_VAR 0 18
12836: PUSH
12837: LD_VAR 0 13
12841: ARRAY
12842: PUSH
12843: LD_INT 1
12845: ARRAY
12846: PPUSH
12847: LD_VAR 0 36
12851: PPUSH
12852: CALL_OW 189
// end ;
12856: GO 12669
12858: POP
12859: POP
// end ;
12860: GO 12323
12862: POP
12863: POP
// end else
12864: GO 13071
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
12866: LD_VAR 0 21
12870: PUSH
12871: LD_VAR 0 21
12875: PPUSH
12876: LD_INT 56
12878: PUSH
12879: EMPTY
12880: LIST
12881: PPUSH
12882: CALL_OW 72
12886: AND
12887: PUSH
12888: LD_VAR 0 31
12892: AND
12893: IFFALSE 13071
// for i := 1 to personel do
12895: LD_ADDR_VAR 0 13
12899: PUSH
12900: DOUBLE
12901: LD_INT 1
12903: DEC
12904: ST_TO_ADDR
12905: LD_VAR 0 18
12909: PUSH
12910: FOR_TO
12911: IFFALSE 13069
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
12913: LD_VAR 0 18
12917: PUSH
12918: LD_VAR 0 13
12922: ARRAY
12923: PUSH
12924: LD_INT 1
12926: ARRAY
12927: PPUSH
12928: CALL_OW 257
12932: PUSH
12933: LD_INT 3
12935: EQUAL
12936: PUSH
12937: LD_VAR 0 18
12941: PUSH
12942: LD_VAR 0 13
12946: ARRAY
12947: PUSH
12948: LD_INT 3
12950: ARRAY
12951: PUSH
12952: LD_INT 1
12954: EQUAL
12955: AND
12956: IFFALSE 13067
// begin if not personel [ i ] [ 2 ] then
12958: LD_VAR 0 18
12962: PUSH
12963: LD_VAR 0 13
12967: ARRAY
12968: PUSH
12969: LD_INT 2
12971: ARRAY
12972: NOT
12973: IFFALSE 13033
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
12975: LD_ADDR_VAR 0 18
12979: PUSH
12980: LD_VAR 0 18
12984: PPUSH
12985: LD_VAR 0 13
12989: PUSH
12990: LD_VAR 0 18
12994: PUSH
12995: LD_VAR 0 13
12999: ARRAY
13000: PUSH
13001: LD_INT 1
13003: MINUS
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PPUSH
13009: LD_VAR 0 31
13013: PUSH
13014: LD_INT 1
13016: PPUSH
13017: LD_VAR 0 31
13021: PPUSH
13022: CALL_OW 12
13026: ARRAY
13027: PPUSH
13028: CALL 22407 0 3
13032: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13033: LD_VAR 0 18
13037: PUSH
13038: LD_VAR 0 13
13042: ARRAY
13043: PUSH
13044: LD_INT 1
13046: ARRAY
13047: PPUSH
13048: LD_VAR 0 18
13052: PUSH
13053: LD_VAR 0 13
13057: ARRAY
13058: PUSH
13059: LD_INT 2
13061: ARRAY
13062: PPUSH
13063: CALL_OW 120
// end ;
13067: GO 12910
13069: POP
13070: POP
// for i := 1 to personel do
13071: LD_ADDR_VAR 0 13
13075: PUSH
13076: DOUBLE
13077: LD_INT 1
13079: DEC
13080: ST_TO_ADDR
13081: LD_VAR 0 18
13085: PUSH
13086: FOR_TO
13087: IFFALSE 13128
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
13089: LD_ADDR_VAR 0 22
13093: PUSH
13094: LD_VAR 0 22
13098: PUSH
13099: LD_VAR 0 18
13103: PUSH
13104: LD_VAR 0 13
13108: ARRAY
13109: PPUSH
13110: LD_INT 25
13112: PUSH
13113: LD_INT 4
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PPUSH
13120: CALL_OW 72
13124: ADD
13125: ST_TO_ADDR
13126: GO 13086
13128: POP
13129: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13130: LD_VAR 0 22
13134: PUSH
13135: LD_VAR 0 4
13139: PPUSH
13140: LD_INT 22
13142: PUSH
13143: LD_VAR 0 1
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: LD_INT 21
13154: PUSH
13155: LD_INT 1
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: LD_INT 3
13164: PUSH
13165: LD_INT 24
13167: PUSH
13168: LD_INT 1000
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: PPUSH
13184: CALL_OW 70
13188: AND
13189: IFFALSE 13706
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13191: LD_ADDR_VAR 0 36
13195: PUSH
13196: LD_VAR 0 4
13200: PPUSH
13201: LD_INT 22
13203: PUSH
13204: LD_VAR 0 1
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 1
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: LD_INT 24
13228: PUSH
13229: LD_INT 1000
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 70
13249: PUSH
13250: FOR_IN
13251: IFFALSE 13702
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
13253: LD_VAR 0 36
13257: PPUSH
13258: LD_VAR 0 5
13262: PPUSH
13263: CALL_OW 299
13267: PUSH
13268: LD_INT 5
13270: LESS
13271: IFFALSE 13479
// for i := 1 to personel do
13273: LD_ADDR_VAR 0 13
13277: PUSH
13278: DOUBLE
13279: LD_INT 1
13281: DEC
13282: ST_TO_ADDR
13283: LD_VAR 0 18
13287: PUSH
13288: FOR_TO
13289: IFFALSE 13477
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
13291: LD_VAR 0 18
13295: PUSH
13296: LD_VAR 0 13
13300: ARRAY
13301: PUSH
13302: LD_INT 1
13304: ARRAY
13305: PPUSH
13306: CALL_OW 257
13310: PUSH
13311: LD_INT 4
13313: EQUAL
13314: PUSH
13315: LD_VAR 0 18
13319: PUSH
13320: LD_VAR 0 13
13324: ARRAY
13325: PUSH
13326: LD_INT 3
13328: ARRAY
13329: PUSH
13330: LD_INT 1
13332: EQUAL
13333: AND
13334: IFFALSE 13475
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13336: LD_VAR 0 18
13340: PUSH
13341: LD_VAR 0 13
13345: ARRAY
13346: PUSH
13347: LD_INT 1
13349: ARRAY
13350: PPUSH
13351: CALL_OW 437
13355: IFFALSE 13411
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13357: LD_VAR 0 18
13361: PUSH
13362: LD_VAR 0 13
13366: ARRAY
13367: PUSH
13368: LD_INT 1
13370: ARRAY
13371: PPUSH
13372: CALL_OW 437
13376: PUSH
13377: LD_INT 1
13379: ARRAY
13380: PUSH
13381: LD_INT 1
13383: ARRAY
13384: PUSH
13385: LD_STRING e
13387: EQUAL
13388: IFFALSE 13411
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13390: LD_VAR 0 18
13394: PUSH
13395: LD_VAR 0 13
13399: ARRAY
13400: PUSH
13401: LD_INT 1
13403: ARRAY
13404: PPUSH
13405: EMPTY
13406: PPUSH
13407: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13411: LD_VAR 0 18
13415: PUSH
13416: LD_VAR 0 13
13420: ARRAY
13421: PUSH
13422: LD_INT 1
13424: ARRAY
13425: PPUSH
13426: CALL_OW 310
13430: IFFALSE 13451
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13432: LD_VAR 0 18
13436: PUSH
13437: LD_VAR 0 13
13441: ARRAY
13442: PUSH
13443: LD_INT 1
13445: ARRAY
13446: PPUSH
13447: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
13451: LD_VAR 0 18
13455: PUSH
13456: LD_VAR 0 13
13460: ARRAY
13461: PUSH
13462: LD_INT 1
13464: ARRAY
13465: PPUSH
13466: LD_VAR 0 36
13470: PPUSH
13471: CALL_OW 188
// end ;
13475: GO 13288
13477: POP
13478: POP
// if GetLives ( damageUnit ) < 250 then
13479: LD_VAR 0 36
13483: PPUSH
13484: CALL_OW 256
13488: PUSH
13489: LD_INT 250
13491: LESS
13492: IFFALSE 13700
// for i := 1 to personel do
13494: LD_ADDR_VAR 0 13
13498: PUSH
13499: DOUBLE
13500: LD_INT 1
13502: DEC
13503: ST_TO_ADDR
13504: LD_VAR 0 18
13508: PUSH
13509: FOR_TO
13510: IFFALSE 13698
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
13512: LD_VAR 0 18
13516: PUSH
13517: LD_VAR 0 13
13521: ARRAY
13522: PUSH
13523: LD_INT 1
13525: ARRAY
13526: PPUSH
13527: CALL_OW 257
13531: PUSH
13532: LD_INT 4
13534: EQUAL
13535: PUSH
13536: LD_VAR 0 18
13540: PUSH
13541: LD_VAR 0 13
13545: ARRAY
13546: PUSH
13547: LD_INT 3
13549: ARRAY
13550: PUSH
13551: LD_INT 1
13553: EQUAL
13554: AND
13555: IFFALSE 13696
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13557: LD_VAR 0 18
13561: PUSH
13562: LD_VAR 0 13
13566: ARRAY
13567: PUSH
13568: LD_INT 1
13570: ARRAY
13571: PPUSH
13572: CALL_OW 437
13576: IFFALSE 13632
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13578: LD_VAR 0 18
13582: PUSH
13583: LD_VAR 0 13
13587: ARRAY
13588: PUSH
13589: LD_INT 1
13591: ARRAY
13592: PPUSH
13593: CALL_OW 437
13597: PUSH
13598: LD_INT 1
13600: ARRAY
13601: PUSH
13602: LD_INT 1
13604: ARRAY
13605: PUSH
13606: LD_STRING e
13608: EQUAL
13609: IFFALSE 13632
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13611: LD_VAR 0 18
13615: PUSH
13616: LD_VAR 0 13
13620: ARRAY
13621: PUSH
13622: LD_INT 1
13624: ARRAY
13625: PPUSH
13626: EMPTY
13627: PPUSH
13628: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13632: LD_VAR 0 18
13636: PUSH
13637: LD_VAR 0 13
13641: ARRAY
13642: PUSH
13643: LD_INT 1
13645: ARRAY
13646: PPUSH
13647: CALL_OW 310
13651: IFFALSE 13672
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13653: LD_VAR 0 18
13657: PUSH
13658: LD_VAR 0 13
13662: ARRAY
13663: PUSH
13664: LD_INT 1
13666: ARRAY
13667: PPUSH
13668: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
13672: LD_VAR 0 18
13676: PUSH
13677: LD_VAR 0 13
13681: ARRAY
13682: PUSH
13683: LD_INT 1
13685: ARRAY
13686: PPUSH
13687: LD_VAR 0 36
13691: PPUSH
13692: CALL_OW 188
// end ;
13696: GO 13509
13698: POP
13699: POP
// end ;
13700: GO 13250
13702: POP
13703: POP
// end else
13704: GO 13911
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
13706: LD_VAR 0 22
13710: PUSH
13711: LD_VAR 0 22
13715: PPUSH
13716: LD_INT 56
13718: PUSH
13719: EMPTY
13720: LIST
13721: PPUSH
13722: CALL_OW 72
13726: AND
13727: PUSH
13728: LD_VAR 0 32
13732: AND
13733: IFFALSE 13911
// for i := 1 to personel do
13735: LD_ADDR_VAR 0 13
13739: PUSH
13740: DOUBLE
13741: LD_INT 1
13743: DEC
13744: ST_TO_ADDR
13745: LD_VAR 0 18
13749: PUSH
13750: FOR_TO
13751: IFFALSE 13909
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
13753: LD_VAR 0 18
13757: PUSH
13758: LD_VAR 0 13
13762: ARRAY
13763: PUSH
13764: LD_INT 1
13766: ARRAY
13767: PPUSH
13768: CALL_OW 257
13772: PUSH
13773: LD_INT 4
13775: EQUAL
13776: PUSH
13777: LD_VAR 0 18
13781: PUSH
13782: LD_VAR 0 13
13786: ARRAY
13787: PUSH
13788: LD_INT 3
13790: ARRAY
13791: PUSH
13792: LD_INT 1
13794: EQUAL
13795: AND
13796: IFFALSE 13907
// begin if not personel [ i ] [ 2 ] then
13798: LD_VAR 0 18
13802: PUSH
13803: LD_VAR 0 13
13807: ARRAY
13808: PUSH
13809: LD_INT 2
13811: ARRAY
13812: NOT
13813: IFFALSE 13873
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
13815: LD_ADDR_VAR 0 18
13819: PUSH
13820: LD_VAR 0 18
13824: PPUSH
13825: LD_VAR 0 13
13829: PUSH
13830: LD_VAR 0 18
13834: PUSH
13835: LD_VAR 0 13
13839: ARRAY
13840: PUSH
13841: LD_INT 1
13843: MINUS
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PPUSH
13849: LD_VAR 0 32
13853: PUSH
13854: LD_INT 1
13856: PPUSH
13857: LD_VAR 0 32
13861: PPUSH
13862: CALL_OW 12
13866: ARRAY
13867: PPUSH
13868: CALL 22407 0 3
13872: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13873: LD_VAR 0 18
13877: PUSH
13878: LD_VAR 0 13
13882: ARRAY
13883: PUSH
13884: LD_INT 1
13886: ARRAY
13887: PPUSH
13888: LD_VAR 0 18
13892: PUSH
13893: LD_VAR 0 13
13897: ARRAY
13898: PUSH
13899: LD_INT 2
13901: ARRAY
13902: PPUSH
13903: CALL_OW 120
// end ;
13907: GO 13750
13909: POP
13910: POP
// wait ( 0 0$01 ) ;
13911: LD_INT 35
13913: PPUSH
13914: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
13918: LD_VAR 0 24
13922: PUSH
13923: LD_VAR 0 8
13927: LESS
13928: PUSH
13929: LD_VAR 0 31
13933: AND
13934: IFFALSE 14180
// begin tmp = vehiclesAmount - vehicles ;
13936: LD_ADDR_VAR 0 15
13940: PUSH
13941: LD_VAR 0 8
13945: PUSH
13946: LD_VAR 0 24
13950: MINUS
13951: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
13952: LD_ADDR_VAR 0 28
13956: PUSH
13957: LD_VAR 0 1
13961: PPUSH
13962: LD_VAR 0 2
13966: PPUSH
13967: CALL 7305 0 2
13971: ST_TO_ADDR
// for i := 1 to tmp do
13972: LD_ADDR_VAR 0 13
13976: PUSH
13977: DOUBLE
13978: LD_INT 1
13980: DEC
13981: ST_TO_ADDR
13982: LD_VAR 0 15
13986: PUSH
13987: FOR_TO
13988: IFFALSE 14176
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
13990: LD_ADDR_VAR 0 15
13994: PUSH
13995: LD_VAR 0 28
13999: PUSH
14000: LD_INT 1
14002: PPUSH
14003: LD_VAR 0 28
14007: PPUSH
14008: CALL_OW 12
14012: ARRAY
14013: ST_TO_ADDR
// if tmp then
14014: LD_VAR 0 15
14018: IFFALSE 14174
// begin if tmp in [ 34 , 14 , 71 ] then
14020: LD_VAR 0 15
14024: PUSH
14025: LD_INT 34
14027: PUSH
14028: LD_INT 14
14030: PUSH
14031: LD_INT 71
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: IN
14039: IFFALSE 14077
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
14041: LD_ADDR_VAR 0 29
14045: PUSH
14046: LD_INT 4
14048: PUSH
14049: EMPTY
14050: LIST
14051: PUSH
14052: LD_INT 14
14054: PUSH
14055: EMPTY
14056: LIST
14057: PUSH
14058: LD_INT 24
14060: PUSH
14061: EMPTY
14062: LIST
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: LD_VAR 0 2
14073: ARRAY
14074: ST_TO_ADDR
14075: GO 14131
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
14077: LD_ADDR_VAR 0 29
14081: PUSH
14082: LD_INT 2
14084: PUSH
14085: LD_INT 3
14087: PUSH
14088: LD_INT 4
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 14
14098: PUSH
14099: EMPTY
14100: LIST
14101: PUSH
14102: LD_INT 21
14104: PUSH
14105: LD_INT 23
14107: PUSH
14108: LD_INT 24
14110: PUSH
14111: LD_INT 22
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_VAR 0 2
14129: ARRAY
14130: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
14131: LD_VAR 0 31
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PPUSH
14140: LD_VAR 0 29
14144: PUSH
14145: LD_INT 1
14147: PPUSH
14148: LD_VAR 0 29
14152: PPUSH
14153: CALL_OW 12
14157: ARRAY
14158: PPUSH
14159: LD_INT 1
14161: PPUSH
14162: LD_INT 1
14164: PPUSH
14165: LD_VAR 0 15
14169: PPUSH
14170: CALL_OW 185
// end ; end ;
14174: GO 13987
14176: POP
14177: POP
// end else
14178: GO 14193
// ComCancel ( factory [ 1 ] ) ;
14180: LD_VAR 0 31
14184: PUSH
14185: LD_INT 1
14187: ARRAY
14188: PPUSH
14189: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
14193: LD_ADDR_VAR 0 23
14197: PUSH
14198: LD_VAR 0 4
14202: PPUSH
14203: LD_INT 22
14205: PUSH
14206: LD_VAR 0 1
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 21
14217: PUSH
14218: LD_INT 2
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 50
14227: PUSH
14228: EMPTY
14229: LIST
14230: PUSH
14231: LD_INT 3
14233: PUSH
14234: LD_INT 2
14236: PUSH
14237: LD_INT 31
14239: PUSH
14240: LD_INT 31
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 34
14249: PUSH
14250: LD_INT 12
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 34
14259: PUSH
14260: LD_INT 51
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 34
14269: PUSH
14270: LD_INT 32
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: PPUSH
14294: CALL_OW 70
14298: PUSH
14299: FOR_IN
14300: IFFALSE 14463
// begin vehicleInList = false ;
14302: LD_ADDR_VAR 0 25
14306: PUSH
14307: LD_INT 0
14309: ST_TO_ADDR
// for i := 1 to vehicles do
14310: LD_ADDR_VAR 0 13
14314: PUSH
14315: DOUBLE
14316: LD_INT 1
14318: DEC
14319: ST_TO_ADDR
14320: LD_VAR 0 24
14324: PUSH
14325: FOR_TO
14326: IFFALSE 14356
// begin if vehicle in vehicles [ i ] then
14328: LD_VAR 0 23
14332: PUSH
14333: LD_VAR 0 24
14337: PUSH
14338: LD_VAR 0 13
14342: ARRAY
14343: IN
14344: IFFALSE 14354
// vehicleInList = true ;
14346: LD_ADDR_VAR 0 25
14350: PUSH
14351: LD_INT 1
14353: ST_TO_ADDR
// end ;
14354: GO 14325
14356: POP
14357: POP
// if not vehicleInList then
14358: LD_VAR 0 25
14362: NOT
14363: IFFALSE 14461
// if vehicles < vehiclesToAttackAmount then
14365: LD_VAR 0 24
14369: PUSH
14370: LD_VAR 0 10
14374: LESS
14375: IFFALSE 14420
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
14377: LD_ADDR_VAR 0 24
14381: PUSH
14382: LD_VAR 0 24
14386: PUSH
14387: LD_VAR 0 23
14391: PUSH
14392: LD_VAR 0 23
14396: PPUSH
14397: CALL_OW 313
14401: PUSH
14402: LD_INT 1
14404: ARRAY
14405: PUSH
14406: LD_INT 3
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: PUSH
14414: EMPTY
14415: LIST
14416: ADD
14417: ST_TO_ADDR
14418: GO 14461
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
14420: LD_ADDR_VAR 0 24
14424: PUSH
14425: LD_VAR 0 24
14429: PUSH
14430: LD_VAR 0 23
14434: PUSH
14435: LD_VAR 0 23
14439: PPUSH
14440: CALL_OW 313
14444: PUSH
14445: LD_INT 1
14447: ARRAY
14448: PUSH
14449: LD_INT 2
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: PUSH
14457: EMPTY
14458: LIST
14459: ADD
14460: ST_TO_ADDR
// end ;
14461: GO 14299
14463: POP
14464: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
14465: LD_ADDR_VAR 0 38
14469: PUSH
14470: LD_INT 81
14472: PUSH
14473: LD_VAR 0 1
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: PUSH
14487: FOR_IN
14488: IFFALSE 14736
// begin offensiveUnits = [ ] ;
14490: LD_ADDR_VAR 0 27
14494: PUSH
14495: EMPTY
14496: ST_TO_ADDR
// Display_strings = [ vehicles , offensiveUnits , vehiclesToAttackAmount ] ;
14497: LD_ADDR_OWVAR 47
14501: PUSH
14502: LD_VAR 0 24
14506: PUSH
14507: LD_VAR 0 27
14511: PUSH
14512: LD_VAR 0 10
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: ST_TO_ADDR
// for i := 1 to vehicles do
14522: LD_ADDR_VAR 0 13
14526: PUSH
14527: DOUBLE
14528: LD_INT 1
14530: DEC
14531: ST_TO_ADDR
14532: LD_VAR 0 24
14536: PUSH
14537: FOR_TO
14538: IFFALSE 14684
// if vehicles [ i ] [ 3 ] = 3 then
14540: LD_VAR 0 24
14544: PUSH
14545: LD_VAR 0 13
14549: ARRAY
14550: PUSH
14551: LD_INT 3
14553: ARRAY
14554: PUSH
14555: LD_INT 3
14557: EQUAL
14558: IFFALSE 14682
// begin offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
14560: LD_ADDR_VAR 0 27
14564: PUSH
14565: LD_VAR 0 27
14569: PUSH
14570: LD_VAR 0 24
14574: PUSH
14575: LD_VAR 0 13
14579: ARRAY
14580: PUSH
14581: LD_INT 1
14583: ARRAY
14584: ADD
14585: ST_TO_ADDR
// for j = 1 to personel do
14586: LD_ADDR_VAR 0 14
14590: PUSH
14591: DOUBLE
14592: LD_INT 1
14594: DEC
14595: ST_TO_ADDR
14596: LD_VAR 0 18
14600: PUSH
14601: FOR_TO
14602: IFFALSE 14680
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
14604: LD_VAR 0 18
14608: PUSH
14609: LD_VAR 0 14
14613: ARRAY
14614: PUSH
14615: LD_INT 1
14617: ARRAY
14618: PUSH
14619: LD_VAR 0 24
14623: PUSH
14624: LD_VAR 0 13
14628: ARRAY
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: EQUAL
14634: IFFALSE 14678
// personel = ReplaceIn ( personel , [ j , personel [ j ] - 1 ] , 3 ) ;
14636: LD_ADDR_VAR 0 18
14640: PUSH
14641: LD_VAR 0 18
14645: PPUSH
14646: LD_VAR 0 14
14650: PUSH
14651: LD_VAR 0 18
14655: PUSH
14656: LD_VAR 0 14
14660: ARRAY
14661: PUSH
14662: LD_INT 1
14664: MINUS
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PPUSH
14670: LD_INT 3
14672: PPUSH
14673: CALL 22407 0 3
14677: ST_TO_ADDR
14678: GO 14601
14680: POP
14681: POP
// end ;
14682: GO 14537
14684: POP
14685: POP
// if offensiveUnits >= vehiclesToAttackAmount - 2 then
14686: LD_VAR 0 27
14690: PUSH
14691: LD_VAR 0 10
14695: PUSH
14696: LD_INT 2
14698: MINUS
14699: GREATEREQUAL
14700: IFFALSE 14734
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
14702: LD_VAR 0 27
14706: PPUSH
14707: LD_INT 3
14709: PUSH
14710: LD_INT 60
14712: PUSH
14713: EMPTY
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PPUSH
14720: CALL_OW 72
14724: PPUSH
14725: LD_VAR 0 38
14729: PPUSH
14730: CALL_OW 175
// end ;
14734: GO 14487
14736: POP
14737: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
14738: LD_ADDR_VAR 0 38
14742: PUSH
14743: LD_VAR 0 7
14747: PPUSH
14748: LD_INT 81
14750: PUSH
14751: LD_VAR 0 1
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PPUSH
14760: CALL_OW 70
14764: PUSH
14765: FOR_IN
14766: IFFALSE 14945
// begin defenceUnits = [ ] ;
14768: LD_ADDR_VAR 0 26
14772: PUSH
14773: EMPTY
14774: ST_TO_ADDR
// for i := 1 to personel do
14775: LD_ADDR_VAR 0 13
14779: PUSH
14780: DOUBLE
14781: LD_INT 1
14783: DEC
14784: ST_TO_ADDR
14785: LD_VAR 0 18
14789: PUSH
14790: FOR_TO
14791: IFFALSE 14841
// if personel [ i ] [ 3 ] = 2 then
14793: LD_VAR 0 18
14797: PUSH
14798: LD_VAR 0 13
14802: ARRAY
14803: PUSH
14804: LD_INT 3
14806: ARRAY
14807: PUSH
14808: LD_INT 2
14810: EQUAL
14811: IFFALSE 14839
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
14813: LD_ADDR_VAR 0 26
14817: PUSH
14818: LD_VAR 0 26
14822: PUSH
14823: LD_VAR 0 18
14827: PUSH
14828: LD_VAR 0 13
14832: ARRAY
14833: PUSH
14834: LD_INT 1
14836: ARRAY
14837: ADD
14838: ST_TO_ADDR
14839: GO 14790
14841: POP
14842: POP
// for i := 1 to vehicles do
14843: LD_ADDR_VAR 0 13
14847: PUSH
14848: DOUBLE
14849: LD_INT 1
14851: DEC
14852: ST_TO_ADDR
14853: LD_VAR 0 24
14857: PUSH
14858: FOR_TO
14859: IFFALSE 14909
// if vehicles [ i ] [ 3 ] = 2 then
14861: LD_VAR 0 24
14865: PUSH
14866: LD_VAR 0 13
14870: ARRAY
14871: PUSH
14872: LD_INT 3
14874: ARRAY
14875: PUSH
14876: LD_INT 2
14878: EQUAL
14879: IFFALSE 14907
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
14881: LD_ADDR_VAR 0 26
14885: PUSH
14886: LD_VAR 0 26
14890: PUSH
14891: LD_VAR 0 24
14895: PUSH
14896: LD_VAR 0 13
14900: ARRAY
14901: PUSH
14902: LD_INT 1
14904: ARRAY
14905: ADD
14906: ST_TO_ADDR
14907: GO 14858
14909: POP
14910: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
14911: LD_VAR 0 26
14915: PPUSH
14916: LD_INT 3
14918: PUSH
14919: LD_INT 60
14921: PUSH
14922: EMPTY
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PPUSH
14929: CALL_OW 72
14933: PPUSH
14934: LD_VAR 0 38
14938: PPUSH
14939: CALL_OW 175
// end ;
14943: GO 14765
14945: POP
14946: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
14947: LD_ADDR_VAR 0 39
14951: PUSH
14952: LD_INT 22
14954: PUSH
14955: LD_VAR 0 1
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 2
14966: PUSH
14967: LD_INT 30
14969: PUSH
14970: LD_INT 31
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 30
14979: PUSH
14980: LD_INT 32
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 30
14989: PUSH
14990: LD_INT 33
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 30
14999: PUSH
15000: LD_INT 4
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 30
15009: PUSH
15010: LD_INT 5
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PPUSH
15029: CALL_OW 69
15033: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
15034: LD_ADDR_VAR 0 40
15038: PUSH
15039: LD_INT 81
15041: PUSH
15042: LD_VAR 0 1
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 21
15053: PUSH
15054: LD_INT 3
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 58
15063: PUSH
15064: EMPTY
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
15077: LD_VAR 0 39
15081: PUSH
15082: LD_VAR 0 40
15086: AND
15087: IFFALSE 15157
// for i in attackBuildings do
15089: LD_ADDR_VAR 0 13
15093: PUSH
15094: LD_VAR 0 39
15098: PUSH
15099: FOR_IN
15100: IFFALSE 15155
// for j in enemyBuildings do
15102: LD_ADDR_VAR 0 14
15106: PUSH
15107: LD_VAR 0 40
15111: PUSH
15112: FOR_IN
15113: IFFALSE 15151
// if GetDistUnits ( i , j ) < 12 then
15115: LD_VAR 0 13
15119: PPUSH
15120: LD_VAR 0 14
15124: PPUSH
15125: CALL_OW 296
15129: PUSH
15130: LD_INT 12
15132: LESS
15133: IFFALSE 15149
// ComAttackUnit ( i , j ) ;
15135: LD_VAR 0 13
15139: PPUSH
15140: LD_VAR 0 14
15144: PPUSH
15145: CALL_OW 115
15149: GO 15112
15151: POP
15152: POP
15153: GO 15099
15155: POP
15156: POP
// until not personel ;
15157: LD_VAR 0 18
15161: NOT
15162: IFFALSE 9889
// end ; end_of_file
15164: LD_VAR 0 12
15168: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
15169: LD_INT 0
15171: PPUSH
15172: PPUSH
// if not missionNumber then
15173: LD_VAR 0 2
15177: NOT
15178: IFFALSE 15182
// exit ;
15180: GO 15312
// achiv := false ;
15182: LD_ADDR_VAR 0 7
15186: PUSH
15187: LD_INT 0
15189: ST_TO_ADDR
// case campaignNumber of 1 :
15190: LD_VAR 0 1
15194: PUSH
15195: LD_INT 1
15197: DOUBLE
15198: EQUAL
15199: IFTRUE 15203
15201: GO 15214
15203: POP
// achiv := ACH_GOTA ; 2 :
15204: LD_ADDR_VAR 0 7
15208: PUSH
15209: LD_STRING ACH_GOTA
15211: ST_TO_ADDR
15212: GO 15264
15214: LD_INT 2
15216: DOUBLE
15217: EQUAL
15218: IFTRUE 15222
15220: GO 15225
15222: POP
// ; 3 :
15223: GO 15264
15225: LD_INT 3
15227: DOUBLE
15228: EQUAL
15229: IFTRUE 15233
15231: GO 15244
15233: POP
// achiv := ACH_MOTSU ; 4 :
15234: LD_ADDR_VAR 0 7
15238: PUSH
15239: LD_STRING ACH_MOTSU
15241: ST_TO_ADDR
15242: GO 15264
15244: LD_INT 4
15246: DOUBLE
15247: EQUAL
15248: IFTRUE 15252
15250: GO 15263
15252: POP
// achiv := ACH_LOP ; end ;
15253: LD_ADDR_VAR 0 7
15257: PUSH
15258: LD_STRING ACH_LOP
15260: ST_TO_ADDR
15261: GO 15264
15263: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
15264: LD_OWVAR 67
15268: PUSH
15269: LD_INT 3
15271: EQUAL
15272: PUSH
15273: LD_VAR 0 7
15277: AND
15278: PUSH
15279: LD_VAR 0 3
15283: AND
15284: PUSH
15285: LD_VAR 0 4
15289: AND
15290: PUSH
15291: LD_VAR 0 5
15295: AND
15296: IFFALSE 15312
// SetAchievementEX ( achiv , missionNumber ) ;
15298: LD_VAR 0 7
15302: PPUSH
15303: LD_VAR 0 2
15307: PPUSH
15308: CALL_OW 564
// end ;
15312: LD_VAR 0 6
15316: RET
// export function SA_BehemothConstructed ; begin
15317: LD_INT 0
15319: PPUSH
// SetAchievement ( ACH_SMC ) ;
15320: LD_STRING ACH_SMC
15322: PPUSH
15323: CALL_OW 543
// end ;
15327: LD_VAR 0 1
15331: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
15332: LD_VAR 0 2
15336: PUSH
15337: LD_INT 1
15339: DOUBLE
15340: EQUAL
15341: IFTRUE 15345
15343: GO 15352
15345: POP
// HackUnlimitedResources ; 2 :
15346: CALL 15536 0 0
15350: GO 15533
15352: LD_INT 2
15354: DOUBLE
15355: EQUAL
15356: IFTRUE 15360
15358: GO 15367
15360: POP
// HackSetLevel10 ; 3 :
15361: CALL 15669 0 0
15365: GO 15533
15367: LD_INT 3
15369: DOUBLE
15370: EQUAL
15371: IFTRUE 15375
15373: GO 15382
15375: POP
// HackSetLevel10YourUnits ; 4 :
15376: CALL 15754 0 0
15380: GO 15533
15382: LD_INT 4
15384: DOUBLE
15385: EQUAL
15386: IFTRUE 15390
15388: GO 15412
15390: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
15391: LD_VAR 0 3
15395: PPUSH
15396: LD_VAR 0 4
15400: PPUSH
15401: LD_VAR 0 5
15405: PPUSH
15406: CALL 15844 0 3
15410: GO 15533
15412: LD_INT 5
15414: DOUBLE
15415: EQUAL
15416: IFTRUE 15420
15418: GO 15427
15420: POP
// HackSpawnVehicle ; 6 :
15421: CALL 15905 0 0
15425: GO 15533
15427: LD_INT 6
15429: DOUBLE
15430: EQUAL
15431: IFTRUE 15435
15433: GO 15442
15435: POP
// HackInvincible ; 7 :
15436: CALL 16980 0 0
15440: GO 15533
15442: LD_INT 7
15444: DOUBLE
15445: EQUAL
15446: IFTRUE 15450
15448: GO 15457
15450: POP
// HackInvisible ; 8 :
15451: CALL 17091 0 0
15455: GO 15533
15457: LD_INT 8
15459: DOUBLE
15460: EQUAL
15461: IFTRUE 15465
15463: GO 15472
15465: POP
// HackChangeYourSide ; 9 :
15466: CALL 17148 0 0
15470: GO 15533
15472: LD_INT 9
15474: DOUBLE
15475: EQUAL
15476: IFTRUE 15480
15478: GO 15487
15480: POP
// HackChangeUnitSide ; 10 :
15481: CALL 17190 0 0
15485: GO 15533
15487: LD_INT 10
15489: DOUBLE
15490: EQUAL
15491: IFTRUE 15495
15493: GO 15502
15495: POP
// HackFog ; 11 :
15496: CALL 17291 0 0
15500: GO 15533
15502: LD_INT 11
15504: DOUBLE
15505: EQUAL
15506: IFTRUE 15510
15508: GO 15517
15510: POP
// HackApeman ; 12 :
15511: CALL 17306 0 0
15515: GO 15533
15517: LD_INT 12
15519: DOUBLE
15520: EQUAL
15521: IFTRUE 15525
15523: GO 15532
15525: POP
// HackBoom ; end ;
15526: CALL 17391 0 0
15530: GO 15533
15532: POP
// end ;
15533: PPOPN 6
15535: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
15536: LD_INT 0
15538: PPUSH
15539: PPUSH
15540: PPUSH
15541: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15542: LD_ADDR_VAR 0 4
15546: PUSH
15547: LD_INT 22
15549: PUSH
15550: LD_OWVAR 2
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 2
15561: PUSH
15562: LD_INT 30
15564: PUSH
15565: LD_INT 0
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 30
15574: PUSH
15575: LD_INT 1
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PPUSH
15591: CALL_OW 69
15595: ST_TO_ADDR
// if not tmp then
15596: LD_VAR 0 4
15600: NOT
15601: IFFALSE 15605
// exit ;
15603: GO 15664
// for i in tmp do
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: LD_VAR 0 4
15614: PUSH
15615: FOR_IN
15616: IFFALSE 15662
// for j = 1 to 3 do
15618: LD_ADDR_VAR 0 3
15622: PUSH
15623: DOUBLE
15624: LD_INT 1
15626: DEC
15627: ST_TO_ADDR
15628: LD_INT 3
15630: PUSH
15631: FOR_TO
15632: IFFALSE 15658
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15634: LD_VAR 0 2
15638: PPUSH
15639: CALL_OW 274
15643: PPUSH
15644: LD_VAR 0 3
15648: PPUSH
15649: LD_INT 99999
15651: PPUSH
15652: CALL_OW 277
15656: GO 15631
15658: POP
15659: POP
15660: GO 15615
15662: POP
15663: POP
// end ;
15664: LD_VAR 0 1
15668: RET
// export function HackSetLevel10 ; var i , j ; begin
15669: LD_INT 0
15671: PPUSH
15672: PPUSH
15673: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15674: LD_ADDR_VAR 0 2
15678: PUSH
15679: LD_INT 21
15681: PUSH
15682: LD_INT 1
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PPUSH
15689: CALL_OW 69
15693: PUSH
15694: FOR_IN
15695: IFFALSE 15747
// if IsSelected ( i ) then
15697: LD_VAR 0 2
15701: PPUSH
15702: CALL_OW 306
15706: IFFALSE 15745
// begin for j := 1 to 4 do
15708: LD_ADDR_VAR 0 3
15712: PUSH
15713: DOUBLE
15714: LD_INT 1
15716: DEC
15717: ST_TO_ADDR
15718: LD_INT 4
15720: PUSH
15721: FOR_TO
15722: IFFALSE 15743
// SetSkill ( i , j , 10 ) ;
15724: LD_VAR 0 2
15728: PPUSH
15729: LD_VAR 0 3
15733: PPUSH
15734: LD_INT 10
15736: PPUSH
15737: CALL_OW 237
15741: GO 15721
15743: POP
15744: POP
// end ;
15745: GO 15694
15747: POP
15748: POP
// end ;
15749: LD_VAR 0 1
15753: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
15754: LD_INT 0
15756: PPUSH
15757: PPUSH
15758: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15759: LD_ADDR_VAR 0 2
15763: PUSH
15764: LD_INT 22
15766: PUSH
15767: LD_OWVAR 2
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 21
15778: PUSH
15779: LD_INT 1
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: PUSH
15795: FOR_IN
15796: IFFALSE 15837
// begin for j := 1 to 4 do
15798: LD_ADDR_VAR 0 3
15802: PUSH
15803: DOUBLE
15804: LD_INT 1
15806: DEC
15807: ST_TO_ADDR
15808: LD_INT 4
15810: PUSH
15811: FOR_TO
15812: IFFALSE 15833
// SetSkill ( i , j , 10 ) ;
15814: LD_VAR 0 2
15818: PPUSH
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 10
15826: PPUSH
15827: CALL_OW 237
15831: GO 15811
15833: POP
15834: POP
// end ;
15835: GO 15795
15837: POP
15838: POP
// end ;
15839: LD_VAR 0 1
15843: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
15844: LD_INT 0
15846: PPUSH
// uc_side := your_side ;
15847: LD_ADDR_OWVAR 20
15851: PUSH
15852: LD_OWVAR 2
15856: ST_TO_ADDR
// uc_nation := nation ;
15857: LD_ADDR_OWVAR 21
15861: PUSH
15862: LD_VAR 0 1
15866: ST_TO_ADDR
// InitHc ;
15867: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15871: LD_INT 0
15873: PPUSH
15874: LD_VAR 0 2
15878: PPUSH
15879: LD_VAR 0 3
15883: PPUSH
15884: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
15888: CALL_OW 44
15892: PPUSH
15893: LD_INT 1
15895: PPUSH
15896: CALL_OW 51
// end ;
15900: LD_VAR 0 4
15904: RET
// export function HackSpawnVehicle ; begin
15905: LD_INT 0
15907: PPUSH
// uc_side := your_side ;
15908: LD_ADDR_OWVAR 20
15912: PUSH
15913: LD_OWVAR 2
15917: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
15918: LD_ADDR_OWVAR 21
15922: PUSH
15923: LD_INT 1
15925: PPUSH
15926: LD_INT 3
15928: PPUSH
15929: CALL_OW 12
15933: ST_TO_ADDR
// InitVc ;
15934: CALL_OW 20
// case uc_nation of 1 :
15938: LD_OWVAR 21
15942: PUSH
15943: LD_INT 1
15945: DOUBLE
15946: EQUAL
15947: IFTRUE 15951
15949: GO 16258
15951: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
15952: LD_ADDR_OWVAR 37
15956: PUSH
15957: LD_INT 1
15959: PUSH
15960: LD_INT 2
15962: PUSH
15963: LD_INT 3
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: LD_INT 5
15971: PUSH
15972: LD_INT 11
15974: PUSH
15975: LD_INT 12
15977: PUSH
15978: LD_INT 13
15980: PUSH
15981: LD_INT 14
15983: PUSH
15984: LD_INT 21
15986: PUSH
15987: LD_INT 22
15989: PUSH
15990: LD_INT 23
15992: PUSH
15993: LD_INT 24
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 1
16013: PPUSH
16014: LD_INT 13
16016: PPUSH
16017: CALL_OW 12
16021: ARRAY
16022: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
16023: LD_ADDR_OWVAR 38
16027: PUSH
16028: LD_INT 1
16030: PUSH
16031: LD_INT 3
16033: PUSH
16034: LD_INT 4
16036: PUSH
16037: LD_INT 5
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 1
16048: PPUSH
16049: LD_INT 4
16051: PPUSH
16052: CALL_OW 12
16056: ARRAY
16057: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
16058: LD_ADDR_OWVAR 39
16062: PUSH
16063: LD_INT 1
16065: PUSH
16066: LD_INT 2
16068: PUSH
16069: LD_INT 3
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 1
16079: PPUSH
16080: LD_INT 3
16082: PPUSH
16083: CALL_OW 12
16087: ARRAY
16088: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
16089: LD_ADDR_OWVAR 40
16093: PUSH
16094: LD_INT 14
16096: PUSH
16097: LD_INT 12
16099: PUSH
16100: LD_INT 13
16102: PUSH
16103: LD_INT 5
16105: PUSH
16106: LD_INT 10
16108: PUSH
16109: LD_INT 4
16111: PUSH
16112: LD_INT 6
16114: PUSH
16115: LD_INT 9
16117: PUSH
16118: LD_INT 3
16120: PUSH
16121: LD_INT 2
16123: PUSH
16124: LD_INT 11
16126: PUSH
16127: LD_INT 7
16129: PUSH
16130: LD_INT 8
16132: PUSH
16133: LD_INT 15
16135: PUSH
16136: LD_INT 32
16138: PUSH
16139: LD_INT 31
16141: PUSH
16142: LD_INT 24
16144: PUSH
16145: LD_INT 26
16147: PUSH
16148: LD_INT 25
16150: PUSH
16151: LD_INT 27
16153: PUSH
16154: LD_INT 23
16156: PUSH
16157: LD_INT 22
16159: PUSH
16160: LD_INT 30
16162: PUSH
16163: LD_INT 28
16165: PUSH
16166: LD_INT 29
16168: PUSH
16169: LD_INT 53
16171: PUSH
16172: LD_INT 51
16174: PUSH
16175: LD_INT 52
16177: PUSH
16178: LD_INT 43
16180: PUSH
16181: LD_INT 44
16183: PUSH
16184: LD_INT 46
16186: PUSH
16187: LD_INT 42
16189: PUSH
16190: LD_INT 47
16192: PUSH
16193: LD_INT 45
16195: PUSH
16196: LD_INT 48
16198: PUSH
16199: LD_INT 55
16201: PUSH
16202: LD_INT 49
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 1
16246: PPUSH
16247: LD_INT 37
16249: PPUSH
16250: CALL_OW 12
16254: ARRAY
16255: ST_TO_ADDR
// end ; 2 :
16256: GO 16889
16258: LD_INT 2
16260: DOUBLE
16261: EQUAL
16262: IFTRUE 16266
16264: GO 16573
16266: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
16267: LD_ADDR_OWVAR 37
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: LD_INT 2
16277: PUSH
16278: LD_INT 3
16280: PUSH
16281: LD_INT 4
16283: PUSH
16284: LD_INT 5
16286: PUSH
16287: LD_INT 11
16289: PUSH
16290: LD_INT 12
16292: PUSH
16293: LD_INT 13
16295: PUSH
16296: LD_INT 14
16298: PUSH
16299: LD_INT 21
16301: PUSH
16302: LD_INT 22
16304: PUSH
16305: LD_INT 23
16307: PUSH
16308: LD_INT 24
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 1
16328: PPUSH
16329: LD_INT 13
16331: PPUSH
16332: CALL_OW 12
16336: ARRAY
16337: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
16338: LD_ADDR_OWVAR 38
16342: PUSH
16343: LD_INT 1
16345: PUSH
16346: LD_INT 3
16348: PUSH
16349: LD_INT 4
16351: PUSH
16352: LD_INT 5
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: PUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_INT 4
16366: PPUSH
16367: CALL_OW 12
16371: ARRAY
16372: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
16373: LD_ADDR_OWVAR 39
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: LD_INT 2
16383: PUSH
16384: LD_INT 3
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 1
16394: PPUSH
16395: LD_INT 3
16397: PPUSH
16398: CALL_OW 12
16402: ARRAY
16403: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
16404: LD_ADDR_OWVAR 40
16408: PUSH
16409: LD_INT 14
16411: PUSH
16412: LD_INT 12
16414: PUSH
16415: LD_INT 13
16417: PUSH
16418: LD_INT 5
16420: PUSH
16421: LD_INT 10
16423: PUSH
16424: LD_INT 4
16426: PUSH
16427: LD_INT 6
16429: PUSH
16430: LD_INT 9
16432: PUSH
16433: LD_INT 3
16435: PUSH
16436: LD_INT 2
16438: PUSH
16439: LD_INT 11
16441: PUSH
16442: LD_INT 7
16444: PUSH
16445: LD_INT 8
16447: PUSH
16448: LD_INT 15
16450: PUSH
16451: LD_INT 32
16453: PUSH
16454: LD_INT 31
16456: PUSH
16457: LD_INT 24
16459: PUSH
16460: LD_INT 26
16462: PUSH
16463: LD_INT 25
16465: PUSH
16466: LD_INT 27
16468: PUSH
16469: LD_INT 23
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 30
16477: PUSH
16478: LD_INT 28
16480: PUSH
16481: LD_INT 29
16483: PUSH
16484: LD_INT 53
16486: PUSH
16487: LD_INT 51
16489: PUSH
16490: LD_INT 52
16492: PUSH
16493: LD_INT 43
16495: PUSH
16496: LD_INT 44
16498: PUSH
16499: LD_INT 46
16501: PUSH
16502: LD_INT 42
16504: PUSH
16505: LD_INT 47
16507: PUSH
16508: LD_INT 45
16510: PUSH
16511: LD_INT 48
16513: PUSH
16514: LD_INT 55
16516: PUSH
16517: LD_INT 49
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 1
16561: PPUSH
16562: LD_INT 37
16564: PPUSH
16565: CALL_OW 12
16569: ARRAY
16570: ST_TO_ADDR
// end ; 3 :
16571: GO 16889
16573: LD_INT 3
16575: DOUBLE
16576: EQUAL
16577: IFTRUE 16581
16579: GO 16888
16581: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
16582: LD_ADDR_OWVAR 37
16586: PUSH
16587: LD_INT 1
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: LD_INT 3
16595: PUSH
16596: LD_INT 4
16598: PUSH
16599: LD_INT 5
16601: PUSH
16602: LD_INT 11
16604: PUSH
16605: LD_INT 12
16607: PUSH
16608: LD_INT 13
16610: PUSH
16611: LD_INT 14
16613: PUSH
16614: LD_INT 21
16616: PUSH
16617: LD_INT 22
16619: PUSH
16620: LD_INT 23
16622: PUSH
16623: LD_INT 24
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 1
16643: PPUSH
16644: LD_INT 13
16646: PPUSH
16647: CALL_OW 12
16651: ARRAY
16652: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
16653: LD_ADDR_OWVAR 38
16657: PUSH
16658: LD_INT 1
16660: PUSH
16661: LD_INT 3
16663: PUSH
16664: LD_INT 4
16666: PUSH
16667: LD_INT 5
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 1
16678: PPUSH
16679: LD_INT 4
16681: PPUSH
16682: CALL_OW 12
16686: ARRAY
16687: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
16688: LD_ADDR_OWVAR 39
16692: PUSH
16693: LD_INT 1
16695: PUSH
16696: LD_INT 2
16698: PUSH
16699: LD_INT 3
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 1
16709: PPUSH
16710: LD_INT 3
16712: PPUSH
16713: CALL_OW 12
16717: ARRAY
16718: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
16719: LD_ADDR_OWVAR 40
16723: PUSH
16724: LD_INT 14
16726: PUSH
16727: LD_INT 12
16729: PUSH
16730: LD_INT 13
16732: PUSH
16733: LD_INT 5
16735: PUSH
16736: LD_INT 10
16738: PUSH
16739: LD_INT 4
16741: PUSH
16742: LD_INT 6
16744: PUSH
16745: LD_INT 9
16747: PUSH
16748: LD_INT 3
16750: PUSH
16751: LD_INT 2
16753: PUSH
16754: LD_INT 11
16756: PUSH
16757: LD_INT 7
16759: PUSH
16760: LD_INT 8
16762: PUSH
16763: LD_INT 15
16765: PUSH
16766: LD_INT 32
16768: PUSH
16769: LD_INT 31
16771: PUSH
16772: LD_INT 24
16774: PUSH
16775: LD_INT 26
16777: PUSH
16778: LD_INT 25
16780: PUSH
16781: LD_INT 27
16783: PUSH
16784: LD_INT 23
16786: PUSH
16787: LD_INT 22
16789: PUSH
16790: LD_INT 30
16792: PUSH
16793: LD_INT 28
16795: PUSH
16796: LD_INT 29
16798: PUSH
16799: LD_INT 53
16801: PUSH
16802: LD_INT 51
16804: PUSH
16805: LD_INT 52
16807: PUSH
16808: LD_INT 43
16810: PUSH
16811: LD_INT 44
16813: PUSH
16814: LD_INT 46
16816: PUSH
16817: LD_INT 42
16819: PUSH
16820: LD_INT 47
16822: PUSH
16823: LD_INT 45
16825: PUSH
16826: LD_INT 48
16828: PUSH
16829: LD_INT 55
16831: PUSH
16832: LD_INT 49
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: PPUSH
16877: LD_INT 37
16879: PPUSH
16880: CALL_OW 12
16884: ARRAY
16885: ST_TO_ADDR
// end ; end ;
16886: GO 16889
16888: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16889: CALL_OW 45
16893: PPUSH
16894: LD_INT 1
16896: PPUSH
16897: CALL_OW 51
// end ;
16901: LD_VAR 0 1
16905: RET
// export invincible ; every 1 do
16906: GO 16908
16908: DISABLE
// invincible := [ ] ;
16909: LD_ADDR_EXP 38
16913: PUSH
16914: EMPTY
16915: ST_TO_ADDR
16916: END
// every 10 do var i ;
16917: GO 16919
16919: DISABLE
16920: LD_INT 0
16922: PPUSH
// begin enable ;
16923: ENABLE
// if not invincible then
16924: LD_EXP 38
16928: NOT
16929: IFFALSE 16933
// exit ;
16931: GO 16977
// for i in invincible do
16933: LD_ADDR_VAR 0 1
16937: PUSH
16938: LD_EXP 38
16942: PUSH
16943: FOR_IN
16944: IFFALSE 16975
// if GetLives ( i ) < 1000 then
16946: LD_VAR 0 1
16950: PPUSH
16951: CALL_OW 256
16955: PUSH
16956: LD_INT 1000
16958: LESS
16959: IFFALSE 16973
// SetLives ( i , 1000 ) ;
16961: LD_VAR 0 1
16965: PPUSH
16966: LD_INT 1000
16968: PPUSH
16969: CALL_OW 234
16973: GO 16943
16975: POP
16976: POP
// end ;
16977: PPOPN 1
16979: END
// export function HackInvincible ; var i ; begin
16980: LD_INT 0
16982: PPUSH
16983: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16984: LD_ADDR_VAR 0 2
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: LD_INT 21
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 21
17004: PUSH
17005: LD_INT 2
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: PUSH
17022: FOR_IN
17023: IFFALSE 17084
// if IsSelected ( i ) then
17025: LD_VAR 0 2
17029: PPUSH
17030: CALL_OW 306
17034: IFFALSE 17082
// begin if i in invincible then
17036: LD_VAR 0 2
17040: PUSH
17041: LD_EXP 38
17045: IN
17046: IFFALSE 17066
// invincible := invincible diff i else
17048: LD_ADDR_EXP 38
17052: PUSH
17053: LD_EXP 38
17057: PUSH
17058: LD_VAR 0 2
17062: DIFF
17063: ST_TO_ADDR
17064: GO 17082
// invincible := invincible union i ;
17066: LD_ADDR_EXP 38
17070: PUSH
17071: LD_EXP 38
17075: PUSH
17076: LD_VAR 0 2
17080: UNION
17081: ST_TO_ADDR
// end ;
17082: GO 17022
17084: POP
17085: POP
// end ;
17086: LD_VAR 0 1
17090: RET
// export function HackInvisible ; var i , j ; begin
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
17095: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17096: LD_ADDR_VAR 0 2
17100: PUSH
17101: LD_INT 21
17103: PUSH
17104: LD_INT 1
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PPUSH
17111: CALL_OW 69
17115: PUSH
17116: FOR_IN
17117: IFFALSE 17141
// if IsSelected ( i ) then
17119: LD_VAR 0 2
17123: PPUSH
17124: CALL_OW 306
17128: IFFALSE 17139
// begin ComForceInvisible ( i ) ;
17130: LD_VAR 0 2
17134: PPUSH
17135: CALL_OW 496
// end ;
17139: GO 17116
17141: POP
17142: POP
// end ;
17143: LD_VAR 0 1
17147: RET
// export function HackChangeYourSide ; begin
17148: LD_INT 0
17150: PPUSH
// if your_side = 8 then
17151: LD_OWVAR 2
17155: PUSH
17156: LD_INT 8
17158: EQUAL
17159: IFFALSE 17171
// your_side := 0 else
17161: LD_ADDR_OWVAR 2
17165: PUSH
17166: LD_INT 0
17168: ST_TO_ADDR
17169: GO 17185
// your_side := your_side + 1 ;
17171: LD_ADDR_OWVAR 2
17175: PUSH
17176: LD_OWVAR 2
17180: PUSH
17181: LD_INT 1
17183: PLUS
17184: ST_TO_ADDR
// end ;
17185: LD_VAR 0 1
17189: RET
// export function HackChangeUnitSide ; var i , j ; begin
17190: LD_INT 0
17192: PPUSH
17193: PPUSH
17194: PPUSH
// for i in all_units do
17195: LD_ADDR_VAR 0 2
17199: PUSH
17200: LD_OWVAR 3
17204: PUSH
17205: FOR_IN
17206: IFFALSE 17284
// if IsSelected ( i ) then
17208: LD_VAR 0 2
17212: PPUSH
17213: CALL_OW 306
17217: IFFALSE 17282
// begin j := GetSide ( i ) ;
17219: LD_ADDR_VAR 0 3
17223: PUSH
17224: LD_VAR 0 2
17228: PPUSH
17229: CALL_OW 255
17233: ST_TO_ADDR
// if j = 8 then
17234: LD_VAR 0 3
17238: PUSH
17239: LD_INT 8
17241: EQUAL
17242: IFFALSE 17254
// j := 0 else
17244: LD_ADDR_VAR 0 3
17248: PUSH
17249: LD_INT 0
17251: ST_TO_ADDR
17252: GO 17268
// j := j + 1 ;
17254: LD_ADDR_VAR 0 3
17258: PUSH
17259: LD_VAR 0 3
17263: PUSH
17264: LD_INT 1
17266: PLUS
17267: ST_TO_ADDR
// SetSide ( i , j ) ;
17268: LD_VAR 0 2
17272: PPUSH
17273: LD_VAR 0 3
17277: PPUSH
17278: CALL_OW 235
// end ;
17282: GO 17205
17284: POP
17285: POP
// end ;
17286: LD_VAR 0 1
17290: RET
// export function HackFog ; begin
17291: LD_INT 0
17293: PPUSH
// FogOff ( true ) ;
17294: LD_INT 1
17296: PPUSH
17297: CALL_OW 344
// end ;
17301: LD_VAR 0 1
17305: RET
// export function HackApeman ; begin
17306: LD_INT 0
17308: PPUSH
// uc_side := your_side ;
17309: LD_ADDR_OWVAR 20
17313: PUSH
17314: LD_OWVAR 2
17318: ST_TO_ADDR
// uc_nation := 0 ;
17319: LD_ADDR_OWVAR 21
17323: PUSH
17324: LD_INT 0
17326: ST_TO_ADDR
// hc_name :=  ;
17327: LD_ADDR_OWVAR 26
17331: PUSH
17332: LD_STRING 
17334: ST_TO_ADDR
// hc_gallery :=  ;
17335: LD_ADDR_OWVAR 33
17339: PUSH
17340: LD_STRING 
17342: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
17343: LD_ADDR_OWVAR 31
17347: PUSH
17348: LD_INT 0
17350: PUSH
17351: LD_INT 0
17353: PUSH
17354: LD_INT 0
17356: PUSH
17357: LD_INT 0
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: ST_TO_ADDR
// hc_class := class_apeman ;
17366: LD_ADDR_OWVAR 28
17370: PUSH
17371: LD_INT 12
17373: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
17374: CALL_OW 44
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: CALL_OW 51
// end ;
17386: LD_VAR 0 1
17390: RET
// export function HackBoom ; begin
17391: LD_INT 0
17393: PPUSH
// uc_side := your_side ;
17394: LD_ADDR_OWVAR 20
17398: PUSH
17399: LD_OWVAR 2
17403: ST_TO_ADDR
// uc_nation := 1 ;
17404: LD_ADDR_OWVAR 21
17408: PUSH
17409: LD_INT 1
17411: ST_TO_ADDR
// vc_chassis := us_morphling ;
17412: LD_ADDR_OWVAR 37
17416: PUSH
17417: LD_INT 5
17419: ST_TO_ADDR
// vc_engine := engine_siberite ;
17420: LD_ADDR_OWVAR 39
17424: PUSH
17425: LD_INT 3
17427: ST_TO_ADDR
// vc_control := control_computer ;
17428: LD_ADDR_OWVAR 38
17432: PUSH
17433: LD_INT 3
17435: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
17436: LD_ADDR_OWVAR 40
17440: PUSH
17441: LD_INT 8
17443: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17444: CALL_OW 45
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: CALL_OW 51
// end ; end_of_file
17456: LD_VAR 0 1
17460: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17461: LD_INT 0
17463: PPUSH
17464: PPUSH
// if exist_mode then
17465: LD_VAR 0 2
17469: IFFALSE 17494
// unit := CreateCharacter ( prefix & ident ) else
17471: LD_ADDR_VAR 0 5
17475: PUSH
17476: LD_VAR 0 3
17480: PUSH
17481: LD_VAR 0 1
17485: STR
17486: PPUSH
17487: CALL_OW 34
17491: ST_TO_ADDR
17492: GO 17509
// unit := NewCharacter ( ident ) ;
17494: LD_ADDR_VAR 0 5
17498: PUSH
17499: LD_VAR 0 1
17503: PPUSH
17504: CALL_OW 25
17508: ST_TO_ADDR
// result := unit ;
17509: LD_ADDR_VAR 0 4
17513: PUSH
17514: LD_VAR 0 5
17518: ST_TO_ADDR
// end ;
17519: LD_VAR 0 4
17523: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17524: LD_INT 0
17526: PPUSH
17527: PPUSH
// if not side or not nation then
17528: LD_VAR 0 1
17532: NOT
17533: PUSH
17534: LD_VAR 0 2
17538: NOT
17539: OR
17540: IFFALSE 17544
// exit ;
17542: GO 18308
// case nation of nation_american :
17544: LD_VAR 0 2
17548: PUSH
17549: LD_INT 1
17551: DOUBLE
17552: EQUAL
17553: IFTRUE 17557
17555: GO 17771
17557: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17558: LD_ADDR_VAR 0 4
17562: PUSH
17563: LD_INT 35
17565: PUSH
17566: LD_INT 45
17568: PUSH
17569: LD_INT 46
17571: PUSH
17572: LD_INT 47
17574: PUSH
17575: LD_INT 82
17577: PUSH
17578: LD_INT 83
17580: PUSH
17581: LD_INT 84
17583: PUSH
17584: LD_INT 85
17586: PUSH
17587: LD_INT 86
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: LD_INT 2
17595: PUSH
17596: LD_INT 6
17598: PUSH
17599: LD_INT 15
17601: PUSH
17602: LD_INT 16
17604: PUSH
17605: LD_INT 7
17607: PUSH
17608: LD_INT 12
17610: PUSH
17611: LD_INT 13
17613: PUSH
17614: LD_INT 10
17616: PUSH
17617: LD_INT 14
17619: PUSH
17620: LD_INT 20
17622: PUSH
17623: LD_INT 21
17625: PUSH
17626: LD_INT 22
17628: PUSH
17629: LD_INT 25
17631: PUSH
17632: LD_INT 32
17634: PUSH
17635: LD_INT 27
17637: PUSH
17638: LD_INT 36
17640: PUSH
17641: LD_INT 69
17643: PUSH
17644: LD_INT 39
17646: PUSH
17647: LD_INT 34
17649: PUSH
17650: LD_INT 40
17652: PUSH
17653: LD_INT 48
17655: PUSH
17656: LD_INT 49
17658: PUSH
17659: LD_INT 50
17661: PUSH
17662: LD_INT 51
17664: PUSH
17665: LD_INT 52
17667: PUSH
17668: LD_INT 53
17670: PUSH
17671: LD_INT 54
17673: PUSH
17674: LD_INT 55
17676: PUSH
17677: LD_INT 56
17679: PUSH
17680: LD_INT 57
17682: PUSH
17683: LD_INT 58
17685: PUSH
17686: LD_INT 59
17688: PUSH
17689: LD_INT 60
17691: PUSH
17692: LD_INT 61
17694: PUSH
17695: LD_INT 62
17697: PUSH
17698: LD_INT 80
17700: PUSH
17701: LD_INT 82
17703: PUSH
17704: LD_INT 83
17706: PUSH
17707: LD_INT 84
17709: PUSH
17710: LD_INT 85
17712: PUSH
17713: LD_INT 86
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: ST_TO_ADDR
17769: GO 18232
17771: LD_INT 2
17773: DOUBLE
17774: EQUAL
17775: IFTRUE 17779
17777: GO 18001
17779: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
17780: LD_ADDR_VAR 0 4
17784: PUSH
17785: LD_INT 35
17787: PUSH
17788: LD_INT 45
17790: PUSH
17791: LD_INT 46
17793: PUSH
17794: LD_INT 47
17796: PUSH
17797: LD_INT 82
17799: PUSH
17800: LD_INT 83
17802: PUSH
17803: LD_INT 84
17805: PUSH
17806: LD_INT 85
17808: PUSH
17809: LD_INT 87
17811: PUSH
17812: LD_INT 70
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: LD_INT 11
17820: PUSH
17821: LD_INT 3
17823: PUSH
17824: LD_INT 4
17826: PUSH
17827: LD_INT 5
17829: PUSH
17830: LD_INT 6
17832: PUSH
17833: LD_INT 15
17835: PUSH
17836: LD_INT 18
17838: PUSH
17839: LD_INT 7
17841: PUSH
17842: LD_INT 17
17844: PUSH
17845: LD_INT 8
17847: PUSH
17848: LD_INT 20
17850: PUSH
17851: LD_INT 21
17853: PUSH
17854: LD_INT 22
17856: PUSH
17857: LD_INT 72
17859: PUSH
17860: LD_INT 26
17862: PUSH
17863: LD_INT 69
17865: PUSH
17866: LD_INT 39
17868: PUSH
17869: LD_INT 40
17871: PUSH
17872: LD_INT 41
17874: PUSH
17875: LD_INT 42
17877: PUSH
17878: LD_INT 43
17880: PUSH
17881: LD_INT 48
17883: PUSH
17884: LD_INT 49
17886: PUSH
17887: LD_INT 50
17889: PUSH
17890: LD_INT 51
17892: PUSH
17893: LD_INT 52
17895: PUSH
17896: LD_INT 53
17898: PUSH
17899: LD_INT 54
17901: PUSH
17902: LD_INT 55
17904: PUSH
17905: LD_INT 56
17907: PUSH
17908: LD_INT 60
17910: PUSH
17911: LD_INT 61
17913: PUSH
17914: LD_INT 62
17916: PUSH
17917: LD_INT 66
17919: PUSH
17920: LD_INT 67
17922: PUSH
17923: LD_INT 68
17925: PUSH
17926: LD_INT 81
17928: PUSH
17929: LD_INT 82
17931: PUSH
17932: LD_INT 83
17934: PUSH
17935: LD_INT 84
17937: PUSH
17938: LD_INT 85
17940: PUSH
17941: LD_INT 87
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: ST_TO_ADDR
17999: GO 18232
18001: LD_INT 3
18003: DOUBLE
18004: EQUAL
18005: IFTRUE 18009
18007: GO 18231
18009: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
18010: LD_ADDR_VAR 0 4
18014: PUSH
18015: LD_INT 46
18017: PUSH
18018: LD_INT 47
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 82
18029: PUSH
18030: LD_INT 83
18032: PUSH
18033: LD_INT 84
18035: PUSH
18036: LD_INT 85
18038: PUSH
18039: LD_INT 86
18041: PUSH
18042: LD_INT 11
18044: PUSH
18045: LD_INT 9
18047: PUSH
18048: LD_INT 20
18050: PUSH
18051: LD_INT 19
18053: PUSH
18054: LD_INT 21
18056: PUSH
18057: LD_INT 24
18059: PUSH
18060: LD_INT 22
18062: PUSH
18063: LD_INT 25
18065: PUSH
18066: LD_INT 28
18068: PUSH
18069: LD_INT 29
18071: PUSH
18072: LD_INT 30
18074: PUSH
18075: LD_INT 31
18077: PUSH
18078: LD_INT 37
18080: PUSH
18081: LD_INT 38
18083: PUSH
18084: LD_INT 32
18086: PUSH
18087: LD_INT 27
18089: PUSH
18090: LD_INT 33
18092: PUSH
18093: LD_INT 69
18095: PUSH
18096: LD_INT 39
18098: PUSH
18099: LD_INT 34
18101: PUSH
18102: LD_INT 40
18104: PUSH
18105: LD_INT 71
18107: PUSH
18108: LD_INT 23
18110: PUSH
18111: LD_INT 44
18113: PUSH
18114: LD_INT 48
18116: PUSH
18117: LD_INT 49
18119: PUSH
18120: LD_INT 50
18122: PUSH
18123: LD_INT 51
18125: PUSH
18126: LD_INT 52
18128: PUSH
18129: LD_INT 53
18131: PUSH
18132: LD_INT 54
18134: PUSH
18135: LD_INT 55
18137: PUSH
18138: LD_INT 56
18140: PUSH
18141: LD_INT 57
18143: PUSH
18144: LD_INT 58
18146: PUSH
18147: LD_INT 59
18149: PUSH
18150: LD_INT 63
18152: PUSH
18153: LD_INT 64
18155: PUSH
18156: LD_INT 65
18158: PUSH
18159: LD_INT 82
18161: PUSH
18162: LD_INT 83
18164: PUSH
18165: LD_INT 84
18167: PUSH
18168: LD_INT 85
18170: PUSH
18171: LD_INT 86
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: ST_TO_ADDR
18229: GO 18232
18231: POP
// if state > - 1 and state < 3 then
18232: LD_VAR 0 3
18236: PUSH
18237: LD_INT 1
18239: NEG
18240: GREATER
18241: PUSH
18242: LD_VAR 0 3
18246: PUSH
18247: LD_INT 3
18249: LESS
18250: AND
18251: IFFALSE 18308
// for i in result do
18253: LD_ADDR_VAR 0 5
18257: PUSH
18258: LD_VAR 0 4
18262: PUSH
18263: FOR_IN
18264: IFFALSE 18306
// if GetTech ( i , side ) <> state then
18266: LD_VAR 0 5
18270: PPUSH
18271: LD_VAR 0 1
18275: PPUSH
18276: CALL_OW 321
18280: PUSH
18281: LD_VAR 0 3
18285: NONEQUAL
18286: IFFALSE 18304
// result := result diff i ;
18288: LD_ADDR_VAR 0 4
18292: PUSH
18293: LD_VAR 0 4
18297: PUSH
18298: LD_VAR 0 5
18302: DIFF
18303: ST_TO_ADDR
18304: GO 18263
18306: POP
18307: POP
// end ;
18308: LD_VAR 0 4
18312: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18313: LD_INT 0
18315: PPUSH
18316: PPUSH
18317: PPUSH
// result := true ;
18318: LD_ADDR_VAR 0 3
18322: PUSH
18323: LD_INT 1
18325: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18326: LD_ADDR_VAR 0 5
18330: PUSH
18331: LD_VAR 0 2
18335: PPUSH
18336: CALL_OW 480
18340: ST_TO_ADDR
// if not tmp then
18341: LD_VAR 0 5
18345: NOT
18346: IFFALSE 18350
// exit ;
18348: GO 18399
// for i in tmp do
18350: LD_ADDR_VAR 0 4
18354: PUSH
18355: LD_VAR 0 5
18359: PUSH
18360: FOR_IN
18361: IFFALSE 18397
// if GetTech ( i , side ) <> state_researched then
18363: LD_VAR 0 4
18367: PPUSH
18368: LD_VAR 0 1
18372: PPUSH
18373: CALL_OW 321
18377: PUSH
18378: LD_INT 2
18380: NONEQUAL
18381: IFFALSE 18395
// begin result := false ;
18383: LD_ADDR_VAR 0 3
18387: PUSH
18388: LD_INT 0
18390: ST_TO_ADDR
// exit ;
18391: POP
18392: POP
18393: GO 18399
// end ;
18395: GO 18360
18397: POP
18398: POP
// end ;
18399: LD_VAR 0 3
18403: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18404: LD_INT 0
18406: PPUSH
18407: PPUSH
18408: PPUSH
18409: PPUSH
18410: PPUSH
18411: PPUSH
18412: PPUSH
18413: PPUSH
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
18418: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18419: LD_VAR 0 1
18423: NOT
18424: PUSH
18425: LD_VAR 0 1
18429: PPUSH
18430: CALL_OW 257
18434: PUSH
18435: LD_INT 9
18437: NONEQUAL
18438: OR
18439: IFFALSE 18443
// exit ;
18441: GO 19016
// side := GetSide ( unit ) ;
18443: LD_ADDR_VAR 0 9
18447: PUSH
18448: LD_VAR 0 1
18452: PPUSH
18453: CALL_OW 255
18457: ST_TO_ADDR
// tech_space := tech_spacanom ;
18458: LD_ADDR_VAR 0 12
18462: PUSH
18463: LD_INT 29
18465: ST_TO_ADDR
// tech_time := tech_taurad ;
18466: LD_ADDR_VAR 0 13
18470: PUSH
18471: LD_INT 28
18473: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18474: LD_ADDR_VAR 0 11
18478: PUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 310
18488: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18489: LD_VAR 0 11
18493: PPUSH
18494: CALL_OW 247
18498: PUSH
18499: LD_INT 2
18501: EQUAL
18502: IFFALSE 18506
// exit ;
18504: GO 19016
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18506: LD_ADDR_VAR 0 8
18510: PUSH
18511: LD_INT 81
18513: PUSH
18514: LD_VAR 0 9
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 3
18525: PUSH
18526: LD_INT 21
18528: PUSH
18529: LD_INT 3
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PPUSH
18544: CALL_OW 69
18548: ST_TO_ADDR
// if not tmp then
18549: LD_VAR 0 8
18553: NOT
18554: IFFALSE 18558
// exit ;
18556: GO 19016
// if in_unit then
18558: LD_VAR 0 11
18562: IFFALSE 18586
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18564: LD_ADDR_VAR 0 10
18568: PUSH
18569: LD_VAR 0 8
18573: PPUSH
18574: LD_VAR 0 11
18578: PPUSH
18579: CALL_OW 74
18583: ST_TO_ADDR
18584: GO 18606
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18586: LD_ADDR_VAR 0 10
18590: PUSH
18591: LD_VAR 0 8
18595: PPUSH
18596: LD_VAR 0 1
18600: PPUSH
18601: CALL_OW 74
18605: ST_TO_ADDR
// if not enemy then
18606: LD_VAR 0 10
18610: NOT
18611: IFFALSE 18615
// exit ;
18613: GO 19016
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18615: LD_VAR 0 11
18619: PUSH
18620: LD_VAR 0 11
18624: PPUSH
18625: LD_VAR 0 10
18629: PPUSH
18630: CALL_OW 296
18634: PUSH
18635: LD_INT 13
18637: GREATER
18638: AND
18639: PUSH
18640: LD_VAR 0 1
18644: PPUSH
18645: LD_VAR 0 10
18649: PPUSH
18650: CALL_OW 296
18654: PUSH
18655: LD_INT 12
18657: GREATER
18658: OR
18659: IFFALSE 18663
// exit ;
18661: GO 19016
// missile := [ 1 ] ;
18663: LD_ADDR_VAR 0 14
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: EMPTY
18672: LIST
18673: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18674: LD_VAR 0 9
18678: PPUSH
18679: LD_VAR 0 12
18683: PPUSH
18684: CALL_OW 325
18688: IFFALSE 18717
// missile := Insert ( missile , missile + 1 , 2 ) ;
18690: LD_ADDR_VAR 0 14
18694: PUSH
18695: LD_VAR 0 14
18699: PPUSH
18700: LD_VAR 0 14
18704: PUSH
18705: LD_INT 1
18707: PLUS
18708: PPUSH
18709: LD_INT 2
18711: PPUSH
18712: CALL_OW 2
18716: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18717: LD_VAR 0 9
18721: PPUSH
18722: LD_VAR 0 13
18726: PPUSH
18727: CALL_OW 325
18731: PUSH
18732: LD_VAR 0 10
18736: PPUSH
18737: CALL_OW 255
18741: PPUSH
18742: LD_VAR 0 13
18746: PPUSH
18747: CALL_OW 325
18751: NOT
18752: AND
18753: IFFALSE 18782
// missile := Insert ( missile , missile + 1 , 3 ) ;
18755: LD_ADDR_VAR 0 14
18759: PUSH
18760: LD_VAR 0 14
18764: PPUSH
18765: LD_VAR 0 14
18769: PUSH
18770: LD_INT 1
18772: PLUS
18773: PPUSH
18774: LD_INT 3
18776: PPUSH
18777: CALL_OW 2
18781: ST_TO_ADDR
// if missile < 2 then
18782: LD_VAR 0 14
18786: PUSH
18787: LD_INT 2
18789: LESS
18790: IFFALSE 18794
// exit ;
18792: GO 19016
// x := GetX ( enemy ) ;
18794: LD_ADDR_VAR 0 4
18798: PUSH
18799: LD_VAR 0 10
18803: PPUSH
18804: CALL_OW 250
18808: ST_TO_ADDR
// y := GetY ( enemy ) ;
18809: LD_ADDR_VAR 0 5
18813: PUSH
18814: LD_VAR 0 10
18818: PPUSH
18819: CALL_OW 251
18823: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18824: LD_ADDR_VAR 0 6
18828: PUSH
18829: LD_VAR 0 4
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PPUSH
18838: LD_INT 1
18840: PPUSH
18841: CALL_OW 12
18845: PLUS
18846: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18847: LD_ADDR_VAR 0 7
18851: PUSH
18852: LD_VAR 0 5
18856: PUSH
18857: LD_INT 1
18859: NEG
18860: PPUSH
18861: LD_INT 1
18863: PPUSH
18864: CALL_OW 12
18868: PLUS
18869: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18870: LD_VAR 0 6
18874: PPUSH
18875: LD_VAR 0 7
18879: PPUSH
18880: CALL_OW 488
18884: NOT
18885: IFFALSE 18907
// begin _x := x ;
18887: LD_ADDR_VAR 0 6
18891: PUSH
18892: LD_VAR 0 4
18896: ST_TO_ADDR
// _y := y ;
18897: LD_ADDR_VAR 0 7
18901: PUSH
18902: LD_VAR 0 5
18906: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18907: LD_ADDR_VAR 0 3
18911: PUSH
18912: LD_INT 1
18914: PPUSH
18915: LD_VAR 0 14
18919: PPUSH
18920: CALL_OW 12
18924: ST_TO_ADDR
// case i of 1 :
18925: LD_VAR 0 3
18929: PUSH
18930: LD_INT 1
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18955
18938: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_VAR 0 10
18948: PPUSH
18949: CALL_OW 115
18953: GO 19016
18955: LD_INT 2
18957: DOUBLE
18958: EQUAL
18959: IFTRUE 18963
18961: GO 18985
18963: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18964: LD_VAR 0 1
18968: PPUSH
18969: LD_VAR 0 6
18973: PPUSH
18974: LD_VAR 0 7
18978: PPUSH
18979: CALL_OW 153
18983: GO 19016
18985: LD_INT 3
18987: DOUBLE
18988: EQUAL
18989: IFTRUE 18993
18991: GO 19015
18993: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18994: LD_VAR 0 1
18998: PPUSH
18999: LD_VAR 0 6
19003: PPUSH
19004: LD_VAR 0 7
19008: PPUSH
19009: CALL_OW 154
19013: GO 19016
19015: POP
// end ;
19016: LD_VAR 0 2
19020: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19021: LD_INT 0
19023: PPUSH
19024: PPUSH
19025: PPUSH
19026: PPUSH
19027: PPUSH
19028: PPUSH
// if not unit or not building then
19029: LD_VAR 0 1
19033: NOT
19034: PUSH
19035: LD_VAR 0 2
19039: NOT
19040: OR
19041: IFFALSE 19045
// exit ;
19043: GO 19203
// x := GetX ( building ) ;
19045: LD_ADDR_VAR 0 5
19049: PUSH
19050: LD_VAR 0 2
19054: PPUSH
19055: CALL_OW 250
19059: ST_TO_ADDR
// y := GetY ( building ) ;
19060: LD_ADDR_VAR 0 6
19064: PUSH
19065: LD_VAR 0 2
19069: PPUSH
19070: CALL_OW 251
19074: ST_TO_ADDR
// for i = 0 to 5 do
19075: LD_ADDR_VAR 0 4
19079: PUSH
19080: DOUBLE
19081: LD_INT 0
19083: DEC
19084: ST_TO_ADDR
19085: LD_INT 5
19087: PUSH
19088: FOR_TO
19089: IFFALSE 19201
// begin _x := ShiftX ( x , i , 3 ) ;
19091: LD_ADDR_VAR 0 7
19095: PUSH
19096: LD_VAR 0 5
19100: PPUSH
19101: LD_VAR 0 4
19105: PPUSH
19106: LD_INT 3
19108: PPUSH
19109: CALL_OW 272
19113: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19114: LD_ADDR_VAR 0 8
19118: PUSH
19119: LD_VAR 0 6
19123: PPUSH
19124: LD_VAR 0 4
19128: PPUSH
19129: LD_INT 3
19131: PPUSH
19132: CALL_OW 273
19136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19137: LD_VAR 0 7
19141: PPUSH
19142: LD_VAR 0 8
19146: PPUSH
19147: CALL_OW 488
19151: NOT
19152: IFFALSE 19156
// continue ;
19154: GO 19088
// if HexInfo ( _x , _y ) = 0 then
19156: LD_VAR 0 7
19160: PPUSH
19161: LD_VAR 0 8
19165: PPUSH
19166: CALL_OW 428
19170: PUSH
19171: LD_INT 0
19173: EQUAL
19174: IFFALSE 19199
// begin ComMoveXY ( unit , _x , _y ) ;
19176: LD_VAR 0 1
19180: PPUSH
19181: LD_VAR 0 7
19185: PPUSH
19186: LD_VAR 0 8
19190: PPUSH
19191: CALL_OW 111
// exit ;
19195: POP
19196: POP
19197: GO 19203
// end ; end ;
19199: GO 19088
19201: POP
19202: POP
// end ;
19203: LD_VAR 0 3
19207: RET
// export function ScanBase ( side , base_area ) ; begin
19208: LD_INT 0
19210: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19211: LD_ADDR_VAR 0 3
19215: PUSH
19216: LD_VAR 0 2
19220: PPUSH
19221: LD_INT 81
19223: PUSH
19224: LD_VAR 0 1
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PPUSH
19233: CALL_OW 70
19237: ST_TO_ADDR
// end ;
19238: LD_VAR 0 3
19242: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19243: LD_INT 0
19245: PPUSH
19246: PPUSH
19247: PPUSH
19248: PPUSH
// result := false ;
19249: LD_ADDR_VAR 0 2
19253: PUSH
19254: LD_INT 0
19256: ST_TO_ADDR
// side := GetSide ( unit ) ;
19257: LD_ADDR_VAR 0 3
19261: PUSH
19262: LD_VAR 0 1
19266: PPUSH
19267: CALL_OW 255
19271: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19272: LD_ADDR_VAR 0 4
19276: PUSH
19277: LD_VAR 0 1
19281: PPUSH
19282: CALL_OW 248
19286: ST_TO_ADDR
// case nat of 1 :
19287: LD_VAR 0 4
19291: PUSH
19292: LD_INT 1
19294: DOUBLE
19295: EQUAL
19296: IFTRUE 19300
19298: GO 19311
19300: POP
// tech := tech_lassight ; 2 :
19301: LD_ADDR_VAR 0 5
19305: PUSH
19306: LD_INT 12
19308: ST_TO_ADDR
19309: GO 19350
19311: LD_INT 2
19313: DOUBLE
19314: EQUAL
19315: IFTRUE 19319
19317: GO 19330
19319: POP
// tech := tech_mortar ; 3 :
19320: LD_ADDR_VAR 0 5
19324: PUSH
19325: LD_INT 41
19327: ST_TO_ADDR
19328: GO 19350
19330: LD_INT 3
19332: DOUBLE
19333: EQUAL
19334: IFTRUE 19338
19336: GO 19349
19338: POP
// tech := tech_bazooka ; end ;
19339: LD_ADDR_VAR 0 5
19343: PUSH
19344: LD_INT 44
19346: ST_TO_ADDR
19347: GO 19350
19349: POP
// if Researched ( side , tech ) then
19350: LD_VAR 0 3
19354: PPUSH
19355: LD_VAR 0 5
19359: PPUSH
19360: CALL_OW 325
19364: IFFALSE 19391
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19366: LD_ADDR_VAR 0 2
19370: PUSH
19371: LD_INT 5
19373: PUSH
19374: LD_INT 8
19376: PUSH
19377: LD_INT 9
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: PUSH
19385: LD_VAR 0 4
19389: ARRAY
19390: ST_TO_ADDR
// end ;
19391: LD_VAR 0 2
19395: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19396: LD_INT 0
19398: PPUSH
19399: PPUSH
19400: PPUSH
// if not mines then
19401: LD_VAR 0 2
19405: NOT
19406: IFFALSE 19410
// exit ;
19408: GO 19554
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19410: LD_ADDR_VAR 0 5
19414: PUSH
19415: LD_INT 81
19417: PUSH
19418: LD_VAR 0 1
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 3
19429: PUSH
19430: LD_INT 21
19432: PUSH
19433: LD_INT 3
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PPUSH
19448: CALL_OW 69
19452: ST_TO_ADDR
// for i in mines do
19453: LD_ADDR_VAR 0 4
19457: PUSH
19458: LD_VAR 0 2
19462: PUSH
19463: FOR_IN
19464: IFFALSE 19552
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19466: LD_VAR 0 4
19470: PUSH
19471: LD_INT 1
19473: ARRAY
19474: PPUSH
19475: LD_VAR 0 4
19479: PUSH
19480: LD_INT 2
19482: ARRAY
19483: PPUSH
19484: CALL_OW 458
19488: NOT
19489: IFFALSE 19493
// continue ;
19491: GO 19463
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19493: LD_VAR 0 4
19497: PUSH
19498: LD_INT 1
19500: ARRAY
19501: PPUSH
19502: LD_VAR 0 4
19506: PUSH
19507: LD_INT 2
19509: ARRAY
19510: PPUSH
19511: CALL_OW 428
19515: PUSH
19516: LD_VAR 0 5
19520: IN
19521: IFFALSE 19550
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19523: LD_VAR 0 4
19527: PUSH
19528: LD_INT 1
19530: ARRAY
19531: PPUSH
19532: LD_VAR 0 4
19536: PUSH
19537: LD_INT 2
19539: ARRAY
19540: PPUSH
19541: LD_VAR 0 1
19545: PPUSH
19546: CALL_OW 456
// end ;
19550: GO 19463
19552: POP
19553: POP
// end ;
19554: LD_VAR 0 3
19558: RET
// export function Count ( array ) ; var i ; begin
19559: LD_INT 0
19561: PPUSH
19562: PPUSH
// result := 0 ;
19563: LD_ADDR_VAR 0 2
19567: PUSH
19568: LD_INT 0
19570: ST_TO_ADDR
// for i in array do
19571: LD_ADDR_VAR 0 3
19575: PUSH
19576: LD_VAR 0 1
19580: PUSH
19581: FOR_IN
19582: IFFALSE 19606
// if i then
19584: LD_VAR 0 3
19588: IFFALSE 19604
// result := result + 1 ;
19590: LD_ADDR_VAR 0 2
19594: PUSH
19595: LD_VAR 0 2
19599: PUSH
19600: LD_INT 1
19602: PLUS
19603: ST_TO_ADDR
19604: GO 19581
19606: POP
19607: POP
// end ;
19608: LD_VAR 0 2
19612: RET
// export function IsEmpty ( building ) ; begin
19613: LD_INT 0
19615: PPUSH
// if not building then
19616: LD_VAR 0 1
19620: NOT
19621: IFFALSE 19625
// exit ;
19623: GO 19668
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19625: LD_ADDR_VAR 0 2
19629: PUSH
19630: LD_VAR 0 1
19634: PUSH
19635: LD_INT 22
19637: PUSH
19638: LD_VAR 0 1
19642: PPUSH
19643: CALL_OW 255
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 58
19654: PUSH
19655: EMPTY
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PPUSH
19662: CALL_OW 69
19666: IN
19667: ST_TO_ADDR
// end ;
19668: LD_VAR 0 2
19672: RET
// export function IsNotFull ( building ) ; begin
19673: LD_INT 0
19675: PPUSH
// if not building then
19676: LD_VAR 0 1
19680: NOT
19681: IFFALSE 19685
// exit ;
19683: GO 19704
// result := UnitsInside ( building ) < 6 ;
19685: LD_ADDR_VAR 0 2
19689: PUSH
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 313
19699: PUSH
19700: LD_INT 6
19702: LESS
19703: ST_TO_ADDR
// end ;
19704: LD_VAR 0 2
19708: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19709: LD_INT 0
19711: PPUSH
19712: PPUSH
19713: PPUSH
19714: PPUSH
// tmp := [ ] ;
19715: LD_ADDR_VAR 0 3
19719: PUSH
19720: EMPTY
19721: ST_TO_ADDR
// list := [ ] ;
19722: LD_ADDR_VAR 0 5
19726: PUSH
19727: EMPTY
19728: ST_TO_ADDR
// for i = 16 to 25 do
19729: LD_ADDR_VAR 0 4
19733: PUSH
19734: DOUBLE
19735: LD_INT 16
19737: DEC
19738: ST_TO_ADDR
19739: LD_INT 25
19741: PUSH
19742: FOR_TO
19743: IFFALSE 19816
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19745: LD_ADDR_VAR 0 3
19749: PUSH
19750: LD_VAR 0 3
19754: PUSH
19755: LD_INT 22
19757: PUSH
19758: LD_VAR 0 1
19762: PPUSH
19763: CALL_OW 255
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 91
19774: PUSH
19775: LD_VAR 0 1
19779: PUSH
19780: LD_INT 6
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 30
19790: PUSH
19791: LD_VAR 0 4
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: PUSH
19805: EMPTY
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: ADD
19813: ST_TO_ADDR
19814: GO 19742
19816: POP
19817: POP
// for i = 1 to tmp do
19818: LD_ADDR_VAR 0 4
19822: PUSH
19823: DOUBLE
19824: LD_INT 1
19826: DEC
19827: ST_TO_ADDR
19828: LD_VAR 0 3
19832: PUSH
19833: FOR_TO
19834: IFFALSE 19922
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19836: LD_ADDR_VAR 0 5
19840: PUSH
19841: LD_VAR 0 5
19845: PUSH
19846: LD_VAR 0 3
19850: PUSH
19851: LD_VAR 0 4
19855: ARRAY
19856: PPUSH
19857: CALL_OW 266
19861: PUSH
19862: LD_VAR 0 3
19866: PUSH
19867: LD_VAR 0 4
19871: ARRAY
19872: PPUSH
19873: CALL_OW 250
19877: PUSH
19878: LD_VAR 0 3
19882: PUSH
19883: LD_VAR 0 4
19887: ARRAY
19888: PPUSH
19889: CALL_OW 251
19893: PUSH
19894: LD_VAR 0 3
19898: PUSH
19899: LD_VAR 0 4
19903: ARRAY
19904: PPUSH
19905: CALL_OW 254
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: PUSH
19916: EMPTY
19917: LIST
19918: ADD
19919: ST_TO_ADDR
19920: GO 19833
19922: POP
19923: POP
// result := list ;
19924: LD_ADDR_VAR 0 2
19928: PUSH
19929: LD_VAR 0 5
19933: ST_TO_ADDR
// end ;
19934: LD_VAR 0 2
19938: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19939: LD_INT 0
19941: PPUSH
19942: PPUSH
19943: PPUSH
19944: PPUSH
19945: PPUSH
19946: PPUSH
19947: PPUSH
// if not factory then
19948: LD_VAR 0 1
19952: NOT
19953: IFFALSE 19957
// exit ;
19955: GO 20550
// if control = control_apeman then
19957: LD_VAR 0 4
19961: PUSH
19962: LD_INT 5
19964: EQUAL
19965: IFFALSE 20074
// begin tmp := UnitsInside ( factory ) ;
19967: LD_ADDR_VAR 0 8
19971: PUSH
19972: LD_VAR 0 1
19976: PPUSH
19977: CALL_OW 313
19981: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19982: LD_VAR 0 8
19986: PPUSH
19987: LD_INT 25
19989: PUSH
19990: LD_INT 12
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PPUSH
19997: CALL_OW 72
20001: NOT
20002: IFFALSE 20012
// control := control_manual ;
20004: LD_ADDR_VAR 0 4
20008: PUSH
20009: LD_INT 1
20011: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20012: LD_ADDR_VAR 0 8
20016: PUSH
20017: LD_VAR 0 1
20021: PPUSH
20022: CALL 19709 0 1
20026: ST_TO_ADDR
// if tmp then
20027: LD_VAR 0 8
20031: IFFALSE 20074
// begin for i in tmp do
20033: LD_ADDR_VAR 0 7
20037: PUSH
20038: LD_VAR 0 8
20042: PUSH
20043: FOR_IN
20044: IFFALSE 20072
// if i [ 1 ] = b_ext_radio then
20046: LD_VAR 0 7
20050: PUSH
20051: LD_INT 1
20053: ARRAY
20054: PUSH
20055: LD_INT 22
20057: EQUAL
20058: IFFALSE 20070
// begin control := control_remote ;
20060: LD_ADDR_VAR 0 4
20064: PUSH
20065: LD_INT 2
20067: ST_TO_ADDR
// break ;
20068: GO 20072
// end ;
20070: GO 20043
20072: POP
20073: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20074: LD_VAR 0 1
20078: PPUSH
20079: LD_VAR 0 2
20083: PPUSH
20084: LD_VAR 0 3
20088: PPUSH
20089: LD_VAR 0 4
20093: PPUSH
20094: LD_VAR 0 5
20098: PPUSH
20099: CALL_OW 448
20103: IFFALSE 20138
// begin result := [ chassis , engine , control , weapon ] ;
20105: LD_ADDR_VAR 0 6
20109: PUSH
20110: LD_VAR 0 2
20114: PUSH
20115: LD_VAR 0 3
20119: PUSH
20120: LD_VAR 0 4
20124: PUSH
20125: LD_VAR 0 5
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: ST_TO_ADDR
// exit ;
20136: GO 20550
// end ; _chassis := AvailableChassisList ( factory ) ;
20138: LD_ADDR_VAR 0 9
20142: PUSH
20143: LD_VAR 0 1
20147: PPUSH
20148: CALL_OW 475
20152: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20153: LD_ADDR_VAR 0 11
20157: PUSH
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 476
20167: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20168: LD_ADDR_VAR 0 12
20172: PUSH
20173: LD_VAR 0 1
20177: PPUSH
20178: CALL_OW 477
20182: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20183: LD_ADDR_VAR 0 10
20187: PUSH
20188: LD_VAR 0 1
20192: PPUSH
20193: CALL_OW 478
20197: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20198: LD_VAR 0 9
20202: NOT
20203: PUSH
20204: LD_VAR 0 11
20208: NOT
20209: OR
20210: PUSH
20211: LD_VAR 0 12
20215: NOT
20216: OR
20217: PUSH
20218: LD_VAR 0 10
20222: NOT
20223: OR
20224: IFFALSE 20259
// begin result := [ chassis , engine , control , weapon ] ;
20226: LD_ADDR_VAR 0 6
20230: PUSH
20231: LD_VAR 0 2
20235: PUSH
20236: LD_VAR 0 3
20240: PUSH
20241: LD_VAR 0 4
20245: PUSH
20246: LD_VAR 0 5
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: ST_TO_ADDR
// exit ;
20257: GO 20550
// end ; if not chassis in _chassis then
20259: LD_VAR 0 2
20263: PUSH
20264: LD_VAR 0 9
20268: IN
20269: NOT
20270: IFFALSE 20296
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20272: LD_ADDR_VAR 0 2
20276: PUSH
20277: LD_VAR 0 9
20281: PUSH
20282: LD_INT 1
20284: PPUSH
20285: LD_VAR 0 9
20289: PPUSH
20290: CALL_OW 12
20294: ARRAY
20295: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20296: LD_VAR 0 2
20300: PPUSH
20301: LD_VAR 0 3
20305: PPUSH
20306: CALL 20555 0 2
20310: NOT
20311: IFFALSE 20370
// repeat engine := _engine [ 1 ] ;
20313: LD_ADDR_VAR 0 3
20317: PUSH
20318: LD_VAR 0 11
20322: PUSH
20323: LD_INT 1
20325: ARRAY
20326: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20327: LD_ADDR_VAR 0 11
20331: PUSH
20332: LD_VAR 0 11
20336: PPUSH
20337: LD_INT 1
20339: PPUSH
20340: CALL_OW 3
20344: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20345: LD_VAR 0 2
20349: PPUSH
20350: LD_VAR 0 3
20354: PPUSH
20355: CALL 20555 0 2
20359: PUSH
20360: LD_VAR 0 11
20364: PUSH
20365: EMPTY
20366: EQUAL
20367: OR
20368: IFFALSE 20313
// if not control in _control then
20370: LD_VAR 0 4
20374: PUSH
20375: LD_VAR 0 12
20379: IN
20380: NOT
20381: IFFALSE 20407
// control := _control [ rand ( 1 , _control ) ] ;
20383: LD_ADDR_VAR 0 4
20387: PUSH
20388: LD_VAR 0 12
20392: PUSH
20393: LD_INT 1
20395: PPUSH
20396: LD_VAR 0 12
20400: PPUSH
20401: CALL_OW 12
20405: ARRAY
20406: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20407: LD_VAR 0 2
20411: PPUSH
20412: LD_VAR 0 5
20416: PPUSH
20417: CALL 20775 0 2
20421: NOT
20422: IFFALSE 20481
// repeat weapon := _weapon [ 1 ] ;
20424: LD_ADDR_VAR 0 5
20428: PUSH
20429: LD_VAR 0 10
20433: PUSH
20434: LD_INT 1
20436: ARRAY
20437: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20438: LD_ADDR_VAR 0 10
20442: PUSH
20443: LD_VAR 0 10
20447: PPUSH
20448: LD_INT 1
20450: PPUSH
20451: CALL_OW 3
20455: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20456: LD_VAR 0 2
20460: PPUSH
20461: LD_VAR 0 5
20465: PPUSH
20466: CALL 20775 0 2
20470: PUSH
20471: LD_VAR 0 10
20475: PUSH
20476: EMPTY
20477: EQUAL
20478: OR
20479: IFFALSE 20424
// result := [ ] ;
20481: LD_ADDR_VAR 0 6
20485: PUSH
20486: EMPTY
20487: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20488: LD_VAR 0 1
20492: PPUSH
20493: LD_VAR 0 2
20497: PPUSH
20498: LD_VAR 0 3
20502: PPUSH
20503: LD_VAR 0 4
20507: PPUSH
20508: LD_VAR 0 5
20512: PPUSH
20513: CALL_OW 448
20517: IFFALSE 20550
// result := [ chassis , engine , control , weapon ] ;
20519: LD_ADDR_VAR 0 6
20523: PUSH
20524: LD_VAR 0 2
20528: PUSH
20529: LD_VAR 0 3
20533: PUSH
20534: LD_VAR 0 4
20538: PUSH
20539: LD_VAR 0 5
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: ST_TO_ADDR
// end ;
20550: LD_VAR 0 6
20554: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20555: LD_INT 0
20557: PPUSH
// if not chassis or not engine then
20558: LD_VAR 0 1
20562: NOT
20563: PUSH
20564: LD_VAR 0 2
20568: NOT
20569: OR
20570: IFFALSE 20574
// exit ;
20572: GO 20770
// case engine of engine_solar :
20574: LD_VAR 0 2
20578: PUSH
20579: LD_INT 2
20581: DOUBLE
20582: EQUAL
20583: IFTRUE 20587
20585: GO 20625
20587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20588: LD_ADDR_VAR 0 3
20592: PUSH
20593: LD_INT 11
20595: PUSH
20596: LD_INT 12
20598: PUSH
20599: LD_INT 13
20601: PUSH
20602: LD_INT 14
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: LD_INT 2
20610: PUSH
20611: LD_INT 3
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: ST_TO_ADDR
20623: GO 20754
20625: LD_INT 1
20627: DOUBLE
20628: EQUAL
20629: IFTRUE 20633
20631: GO 20695
20633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20634: LD_ADDR_VAR 0 3
20638: PUSH
20639: LD_INT 11
20641: PUSH
20642: LD_INT 12
20644: PUSH
20645: LD_INT 13
20647: PUSH
20648: LD_INT 14
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: LD_INT 3
20659: PUSH
20660: LD_INT 4
20662: PUSH
20663: LD_INT 5
20665: PUSH
20666: LD_INT 21
20668: PUSH
20669: LD_INT 23
20671: PUSH
20672: LD_INT 22
20674: PUSH
20675: LD_INT 24
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: ST_TO_ADDR
20693: GO 20754
20695: LD_INT 3
20697: DOUBLE
20698: EQUAL
20699: IFTRUE 20703
20701: GO 20753
20703: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20704: LD_ADDR_VAR 0 3
20708: PUSH
20709: LD_INT 13
20711: PUSH
20712: LD_INT 14
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: LD_INT 3
20720: PUSH
20721: LD_INT 4
20723: PUSH
20724: LD_INT 5
20726: PUSH
20727: LD_INT 21
20729: PUSH
20730: LD_INT 22
20732: PUSH
20733: LD_INT 23
20735: PUSH
20736: LD_INT 24
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: ST_TO_ADDR
20751: GO 20754
20753: POP
// result := ( chassis in result ) ;
20754: LD_ADDR_VAR 0 3
20758: PUSH
20759: LD_VAR 0 1
20763: PUSH
20764: LD_VAR 0 3
20768: IN
20769: ST_TO_ADDR
// end ;
20770: LD_VAR 0 3
20774: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20775: LD_INT 0
20777: PPUSH
// if not chassis or not weapon then
20778: LD_VAR 0 1
20782: NOT
20783: PUSH
20784: LD_VAR 0 2
20788: NOT
20789: OR
20790: IFFALSE 20794
// exit ;
20792: GO 21820
// case weapon of us_machine_gun :
20794: LD_VAR 0 2
20798: PUSH
20799: LD_INT 2
20801: DOUBLE
20802: EQUAL
20803: IFTRUE 20807
20805: GO 20837
20807: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20808: LD_ADDR_VAR 0 3
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: LD_INT 3
20821: PUSH
20822: LD_INT 4
20824: PUSH
20825: LD_INT 5
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: ST_TO_ADDR
20835: GO 21804
20837: LD_INT 3
20839: DOUBLE
20840: EQUAL
20841: IFTRUE 20845
20843: GO 20875
20845: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20846: LD_ADDR_VAR 0 3
20850: PUSH
20851: LD_INT 1
20853: PUSH
20854: LD_INT 2
20856: PUSH
20857: LD_INT 3
20859: PUSH
20860: LD_INT 4
20862: PUSH
20863: LD_INT 5
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: ST_TO_ADDR
20873: GO 21804
20875: LD_INT 11
20877: DOUBLE
20878: EQUAL
20879: IFTRUE 20883
20881: GO 20913
20883: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20884: LD_ADDR_VAR 0 3
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: LD_INT 3
20897: PUSH
20898: LD_INT 4
20900: PUSH
20901: LD_INT 5
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: ST_TO_ADDR
20911: GO 21804
20913: LD_INT 4
20915: DOUBLE
20916: EQUAL
20917: IFTRUE 20921
20919: GO 20947
20921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20922: LD_ADDR_VAR 0 3
20926: PUSH
20927: LD_INT 2
20929: PUSH
20930: LD_INT 3
20932: PUSH
20933: LD_INT 4
20935: PUSH
20936: LD_INT 5
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: ST_TO_ADDR
20945: GO 21804
20947: LD_INT 5
20949: DOUBLE
20950: EQUAL
20951: IFTRUE 20955
20953: GO 20981
20955: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20956: LD_ADDR_VAR 0 3
20960: PUSH
20961: LD_INT 2
20963: PUSH
20964: LD_INT 3
20966: PUSH
20967: LD_INT 4
20969: PUSH
20970: LD_INT 5
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: ST_TO_ADDR
20979: GO 21804
20981: LD_INT 9
20983: DOUBLE
20984: EQUAL
20985: IFTRUE 20989
20987: GO 21015
20989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20990: LD_ADDR_VAR 0 3
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: LD_INT 3
21000: PUSH
21001: LD_INT 4
21003: PUSH
21004: LD_INT 5
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: ST_TO_ADDR
21013: GO 21804
21015: LD_INT 7
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21049
21023: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21024: LD_ADDR_VAR 0 3
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: LD_INT 3
21034: PUSH
21035: LD_INT 4
21037: PUSH
21038: LD_INT 5
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: ST_TO_ADDR
21047: GO 21804
21049: LD_INT 12
21051: DOUBLE
21052: EQUAL
21053: IFTRUE 21057
21055: GO 21083
21057: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21058: LD_ADDR_VAR 0 3
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: LD_INT 3
21068: PUSH
21069: LD_INT 4
21071: PUSH
21072: LD_INT 5
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: ST_TO_ADDR
21081: GO 21804
21083: LD_INT 13
21085: DOUBLE
21086: EQUAL
21087: IFTRUE 21091
21089: GO 21117
21091: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21092: LD_ADDR_VAR 0 3
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 4
21105: PUSH
21106: LD_INT 5
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: ST_TO_ADDR
21115: GO 21804
21117: LD_INT 14
21119: DOUBLE
21120: EQUAL
21121: IFTRUE 21125
21123: GO 21143
21125: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21126: LD_ADDR_VAR 0 3
21130: PUSH
21131: LD_INT 4
21133: PUSH
21134: LD_INT 5
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: ST_TO_ADDR
21141: GO 21804
21143: LD_INT 6
21145: DOUBLE
21146: EQUAL
21147: IFTRUE 21151
21149: GO 21169
21151: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21152: LD_ADDR_VAR 0 3
21156: PUSH
21157: LD_INT 4
21159: PUSH
21160: LD_INT 5
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: ST_TO_ADDR
21167: GO 21804
21169: LD_INT 10
21171: DOUBLE
21172: EQUAL
21173: IFTRUE 21177
21175: GO 21195
21177: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21178: LD_ADDR_VAR 0 3
21182: PUSH
21183: LD_INT 4
21185: PUSH
21186: LD_INT 5
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: ST_TO_ADDR
21193: GO 21804
21195: LD_INT 22
21197: DOUBLE
21198: EQUAL
21199: IFTRUE 21203
21201: GO 21229
21203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21204: LD_ADDR_VAR 0 3
21208: PUSH
21209: LD_INT 11
21211: PUSH
21212: LD_INT 12
21214: PUSH
21215: LD_INT 13
21217: PUSH
21218: LD_INT 14
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: ST_TO_ADDR
21227: GO 21804
21229: LD_INT 23
21231: DOUBLE
21232: EQUAL
21233: IFTRUE 21237
21235: GO 21263
21237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21238: LD_ADDR_VAR 0 3
21242: PUSH
21243: LD_INT 11
21245: PUSH
21246: LD_INT 12
21248: PUSH
21249: LD_INT 13
21251: PUSH
21252: LD_INT 14
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: ST_TO_ADDR
21261: GO 21804
21263: LD_INT 24
21265: DOUBLE
21266: EQUAL
21267: IFTRUE 21271
21269: GO 21297
21271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21272: LD_ADDR_VAR 0 3
21276: PUSH
21277: LD_INT 11
21279: PUSH
21280: LD_INT 12
21282: PUSH
21283: LD_INT 13
21285: PUSH
21286: LD_INT 14
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: ST_TO_ADDR
21295: GO 21804
21297: LD_INT 30
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 21331
21305: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21306: LD_ADDR_VAR 0 3
21310: PUSH
21311: LD_INT 11
21313: PUSH
21314: LD_INT 12
21316: PUSH
21317: LD_INT 13
21319: PUSH
21320: LD_INT 14
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: ST_TO_ADDR
21329: GO 21804
21331: LD_INT 25
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21357
21339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21340: LD_ADDR_VAR 0 3
21344: PUSH
21345: LD_INT 13
21347: PUSH
21348: LD_INT 14
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: ST_TO_ADDR
21355: GO 21804
21357: LD_INT 27
21359: DOUBLE
21360: EQUAL
21361: IFTRUE 21365
21363: GO 21383
21365: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21366: LD_ADDR_VAR 0 3
21370: PUSH
21371: LD_INT 13
21373: PUSH
21374: LD_INT 14
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: ST_TO_ADDR
21381: GO 21804
21383: LD_INT 28
21385: DOUBLE
21386: EQUAL
21387: IFTRUE 21391
21389: GO 21409
21391: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21392: LD_ADDR_VAR 0 3
21396: PUSH
21397: LD_INT 13
21399: PUSH
21400: LD_INT 14
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: ST_TO_ADDR
21407: GO 21804
21409: LD_INT 29
21411: DOUBLE
21412: EQUAL
21413: IFTRUE 21417
21415: GO 21435
21417: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21418: LD_ADDR_VAR 0 3
21422: PUSH
21423: LD_INT 13
21425: PUSH
21426: LD_INT 14
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: ST_TO_ADDR
21433: GO 21804
21435: LD_INT 31
21437: DOUBLE
21438: EQUAL
21439: IFTRUE 21443
21441: GO 21461
21443: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21444: LD_ADDR_VAR 0 3
21448: PUSH
21449: LD_INT 13
21451: PUSH
21452: LD_INT 14
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: ST_TO_ADDR
21459: GO 21804
21461: LD_INT 26
21463: DOUBLE
21464: EQUAL
21465: IFTRUE 21469
21467: GO 21487
21469: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21470: LD_ADDR_VAR 0 3
21474: PUSH
21475: LD_INT 13
21477: PUSH
21478: LD_INT 14
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: ST_TO_ADDR
21485: GO 21804
21487: LD_INT 42
21489: DOUBLE
21490: EQUAL
21491: IFTRUE 21495
21493: GO 21521
21495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21496: LD_ADDR_VAR 0 3
21500: PUSH
21501: LD_INT 21
21503: PUSH
21504: LD_INT 22
21506: PUSH
21507: LD_INT 23
21509: PUSH
21510: LD_INT 24
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: ST_TO_ADDR
21519: GO 21804
21521: LD_INT 43
21523: DOUBLE
21524: EQUAL
21525: IFTRUE 21529
21527: GO 21555
21529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21530: LD_ADDR_VAR 0 3
21534: PUSH
21535: LD_INT 21
21537: PUSH
21538: LD_INT 22
21540: PUSH
21541: LD_INT 23
21543: PUSH
21544: LD_INT 24
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: ST_TO_ADDR
21553: GO 21804
21555: LD_INT 44
21557: DOUBLE
21558: EQUAL
21559: IFTRUE 21563
21561: GO 21589
21563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21564: LD_ADDR_VAR 0 3
21568: PUSH
21569: LD_INT 21
21571: PUSH
21572: LD_INT 22
21574: PUSH
21575: LD_INT 23
21577: PUSH
21578: LD_INT 24
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: ST_TO_ADDR
21587: GO 21804
21589: LD_INT 45
21591: DOUBLE
21592: EQUAL
21593: IFTRUE 21597
21595: GO 21623
21597: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21598: LD_ADDR_VAR 0 3
21602: PUSH
21603: LD_INT 21
21605: PUSH
21606: LD_INT 22
21608: PUSH
21609: LD_INT 23
21611: PUSH
21612: LD_INT 24
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: ST_TO_ADDR
21621: GO 21804
21623: LD_INT 49
21625: DOUBLE
21626: EQUAL
21627: IFTRUE 21631
21629: GO 21657
21631: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21632: LD_ADDR_VAR 0 3
21636: PUSH
21637: LD_INT 21
21639: PUSH
21640: LD_INT 22
21642: PUSH
21643: LD_INT 23
21645: PUSH
21646: LD_INT 24
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: ST_TO_ADDR
21655: GO 21804
21657: LD_INT 51
21659: DOUBLE
21660: EQUAL
21661: IFTRUE 21665
21663: GO 21691
21665: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21666: LD_ADDR_VAR 0 3
21670: PUSH
21671: LD_INT 21
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_INT 23
21679: PUSH
21680: LD_INT 24
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: ST_TO_ADDR
21689: GO 21804
21691: LD_INT 52
21693: DOUBLE
21694: EQUAL
21695: IFTRUE 21699
21697: GO 21725
21699: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21700: LD_ADDR_VAR 0 3
21704: PUSH
21705: LD_INT 21
21707: PUSH
21708: LD_INT 22
21710: PUSH
21711: LD_INT 23
21713: PUSH
21714: LD_INT 24
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: ST_TO_ADDR
21723: GO 21804
21725: LD_INT 53
21727: DOUBLE
21728: EQUAL
21729: IFTRUE 21733
21731: GO 21751
21733: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21734: LD_ADDR_VAR 0 3
21738: PUSH
21739: LD_INT 23
21741: PUSH
21742: LD_INT 24
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: ST_TO_ADDR
21749: GO 21804
21751: LD_INT 46
21753: DOUBLE
21754: EQUAL
21755: IFTRUE 21759
21757: GO 21777
21759: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21760: LD_ADDR_VAR 0 3
21764: PUSH
21765: LD_INT 23
21767: PUSH
21768: LD_INT 24
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: ST_TO_ADDR
21775: GO 21804
21777: LD_INT 47
21779: DOUBLE
21780: EQUAL
21781: IFTRUE 21785
21783: GO 21803
21785: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21786: LD_ADDR_VAR 0 3
21790: PUSH
21791: LD_INT 23
21793: PUSH
21794: LD_INT 24
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: ST_TO_ADDR
21801: GO 21804
21803: POP
// result := ( chassis in result ) ;
21804: LD_ADDR_VAR 0 3
21808: PUSH
21809: LD_VAR 0 1
21813: PUSH
21814: LD_VAR 0 3
21818: IN
21819: ST_TO_ADDR
// end ;
21820: LD_VAR 0 3
21824: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21825: LD_INT 0
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
// result := array ;
21834: LD_ADDR_VAR 0 5
21838: PUSH
21839: LD_VAR 0 1
21843: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21844: LD_VAR 0 1
21848: NOT
21849: PUSH
21850: LD_VAR 0 2
21854: NOT
21855: OR
21856: PUSH
21857: LD_VAR 0 3
21861: NOT
21862: OR
21863: PUSH
21864: LD_VAR 0 2
21868: PUSH
21869: LD_VAR 0 1
21873: GREATER
21874: OR
21875: PUSH
21876: LD_VAR 0 3
21880: PUSH
21881: LD_VAR 0 1
21885: GREATER
21886: OR
21887: IFFALSE 21891
// exit ;
21889: GO 22187
// if direction then
21891: LD_VAR 0 4
21895: IFFALSE 21959
// begin d := 1 ;
21897: LD_ADDR_VAR 0 9
21901: PUSH
21902: LD_INT 1
21904: ST_TO_ADDR
// if i_from > i_to then
21905: LD_VAR 0 2
21909: PUSH
21910: LD_VAR 0 3
21914: GREATER
21915: IFFALSE 21941
// length := ( array - i_from ) + i_to else
21917: LD_ADDR_VAR 0 11
21921: PUSH
21922: LD_VAR 0 1
21926: PUSH
21927: LD_VAR 0 2
21931: MINUS
21932: PUSH
21933: LD_VAR 0 3
21937: PLUS
21938: ST_TO_ADDR
21939: GO 21957
// length := i_to - i_from ;
21941: LD_ADDR_VAR 0 11
21945: PUSH
21946: LD_VAR 0 3
21950: PUSH
21951: LD_VAR 0 2
21955: MINUS
21956: ST_TO_ADDR
// end else
21957: GO 22020
// begin d := - 1 ;
21959: LD_ADDR_VAR 0 9
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: ST_TO_ADDR
// if i_from > i_to then
21968: LD_VAR 0 2
21972: PUSH
21973: LD_VAR 0 3
21977: GREATER
21978: IFFALSE 21998
// length := i_from - i_to else
21980: LD_ADDR_VAR 0 11
21984: PUSH
21985: LD_VAR 0 2
21989: PUSH
21990: LD_VAR 0 3
21994: MINUS
21995: ST_TO_ADDR
21996: GO 22020
// length := ( array - i_to ) + i_from ;
21998: LD_ADDR_VAR 0 11
22002: PUSH
22003: LD_VAR 0 1
22007: PUSH
22008: LD_VAR 0 3
22012: MINUS
22013: PUSH
22014: LD_VAR 0 2
22018: PLUS
22019: ST_TO_ADDR
// end ; if not length then
22020: LD_VAR 0 11
22024: NOT
22025: IFFALSE 22029
// exit ;
22027: GO 22187
// tmp := array ;
22029: LD_ADDR_VAR 0 10
22033: PUSH
22034: LD_VAR 0 1
22038: ST_TO_ADDR
// for i = 1 to length do
22039: LD_ADDR_VAR 0 6
22043: PUSH
22044: DOUBLE
22045: LD_INT 1
22047: DEC
22048: ST_TO_ADDR
22049: LD_VAR 0 11
22053: PUSH
22054: FOR_TO
22055: IFFALSE 22175
// begin for j = 1 to array do
22057: LD_ADDR_VAR 0 7
22061: PUSH
22062: DOUBLE
22063: LD_INT 1
22065: DEC
22066: ST_TO_ADDR
22067: LD_VAR 0 1
22071: PUSH
22072: FOR_TO
22073: IFFALSE 22161
// begin k := j + d ;
22075: LD_ADDR_VAR 0 8
22079: PUSH
22080: LD_VAR 0 7
22084: PUSH
22085: LD_VAR 0 9
22089: PLUS
22090: ST_TO_ADDR
// if k > array then
22091: LD_VAR 0 8
22095: PUSH
22096: LD_VAR 0 1
22100: GREATER
22101: IFFALSE 22111
// k := 1 ;
22103: LD_ADDR_VAR 0 8
22107: PUSH
22108: LD_INT 1
22110: ST_TO_ADDR
// if not k then
22111: LD_VAR 0 8
22115: NOT
22116: IFFALSE 22128
// k := array ;
22118: LD_ADDR_VAR 0 8
22122: PUSH
22123: LD_VAR 0 1
22127: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22128: LD_ADDR_VAR 0 10
22132: PUSH
22133: LD_VAR 0 10
22137: PPUSH
22138: LD_VAR 0 8
22142: PPUSH
22143: LD_VAR 0 1
22147: PUSH
22148: LD_VAR 0 7
22152: ARRAY
22153: PPUSH
22154: CALL_OW 1
22158: ST_TO_ADDR
// end ;
22159: GO 22072
22161: POP
22162: POP
// array := tmp ;
22163: LD_ADDR_VAR 0 1
22167: PUSH
22168: LD_VAR 0 10
22172: ST_TO_ADDR
// end ;
22173: GO 22054
22175: POP
22176: POP
// result := array ;
22177: LD_ADDR_VAR 0 5
22181: PUSH
22182: LD_VAR 0 1
22186: ST_TO_ADDR
// end ;
22187: LD_VAR 0 5
22191: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22192: LD_INT 0
22194: PPUSH
22195: PPUSH
// result := 0 ;
22196: LD_ADDR_VAR 0 3
22200: PUSH
22201: LD_INT 0
22203: ST_TO_ADDR
// if not array or not value in array then
22204: LD_VAR 0 1
22208: NOT
22209: PUSH
22210: LD_VAR 0 2
22214: PUSH
22215: LD_VAR 0 1
22219: IN
22220: NOT
22221: OR
22222: IFFALSE 22226
// exit ;
22224: GO 22280
// for i = 1 to array do
22226: LD_ADDR_VAR 0 4
22230: PUSH
22231: DOUBLE
22232: LD_INT 1
22234: DEC
22235: ST_TO_ADDR
22236: LD_VAR 0 1
22240: PUSH
22241: FOR_TO
22242: IFFALSE 22278
// if value = array [ i ] then
22244: LD_VAR 0 2
22248: PUSH
22249: LD_VAR 0 1
22253: PUSH
22254: LD_VAR 0 4
22258: ARRAY
22259: EQUAL
22260: IFFALSE 22276
// begin result := i ;
22262: LD_ADDR_VAR 0 3
22266: PUSH
22267: LD_VAR 0 4
22271: ST_TO_ADDR
// exit ;
22272: POP
22273: POP
22274: GO 22280
// end ;
22276: GO 22241
22278: POP
22279: POP
// end ;
22280: LD_VAR 0 3
22284: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22285: LD_INT 0
22287: PPUSH
// vc_chassis := chassis ;
22288: LD_ADDR_OWVAR 37
22292: PUSH
22293: LD_VAR 0 1
22297: ST_TO_ADDR
// vc_engine := engine ;
22298: LD_ADDR_OWVAR 39
22302: PUSH
22303: LD_VAR 0 2
22307: ST_TO_ADDR
// vc_control := control ;
22308: LD_ADDR_OWVAR 38
22312: PUSH
22313: LD_VAR 0 3
22317: ST_TO_ADDR
// vc_weapon := weapon ;
22318: LD_ADDR_OWVAR 40
22322: PUSH
22323: LD_VAR 0 4
22327: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22328: LD_ADDR_OWVAR 41
22332: PUSH
22333: LD_VAR 0 5
22337: ST_TO_ADDR
// end ;
22338: LD_VAR 0 6
22342: RET
// export function WantPlant ( unit ) ; var task ; begin
22343: LD_INT 0
22345: PPUSH
22346: PPUSH
// result := false ;
22347: LD_ADDR_VAR 0 2
22351: PUSH
22352: LD_INT 0
22354: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22355: LD_ADDR_VAR 0 3
22359: PUSH
22360: LD_VAR 0 1
22364: PPUSH
22365: CALL_OW 437
22369: ST_TO_ADDR
// if task then
22370: LD_VAR 0 3
22374: IFFALSE 22402
// if task [ 1 ] [ 1 ] = p then
22376: LD_VAR 0 3
22380: PUSH
22381: LD_INT 1
22383: ARRAY
22384: PUSH
22385: LD_INT 1
22387: ARRAY
22388: PUSH
22389: LD_STRING p
22391: EQUAL
22392: IFFALSE 22402
// result := true ;
22394: LD_ADDR_VAR 0 2
22398: PUSH
22399: LD_INT 1
22401: ST_TO_ADDR
// end ;
22402: LD_VAR 0 2
22406: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22407: LD_INT 0
22409: PPUSH
22410: PPUSH
22411: PPUSH
22412: PPUSH
// if pos < 1 then
22413: LD_VAR 0 2
22417: PUSH
22418: LD_INT 1
22420: LESS
22421: IFFALSE 22425
// exit ;
22423: GO 22728
// if pos = 1 then
22425: LD_VAR 0 2
22429: PUSH
22430: LD_INT 1
22432: EQUAL
22433: IFFALSE 22466
// result := Replace ( arr , pos [ 1 ] , value ) else
22435: LD_ADDR_VAR 0 4
22439: PUSH
22440: LD_VAR 0 1
22444: PPUSH
22445: LD_VAR 0 2
22449: PUSH
22450: LD_INT 1
22452: ARRAY
22453: PPUSH
22454: LD_VAR 0 3
22458: PPUSH
22459: CALL_OW 1
22463: ST_TO_ADDR
22464: GO 22728
// begin tmp := arr ;
22466: LD_ADDR_VAR 0 6
22470: PUSH
22471: LD_VAR 0 1
22475: ST_TO_ADDR
// s_arr := [ tmp ] ;
22476: LD_ADDR_VAR 0 7
22480: PUSH
22481: LD_VAR 0 6
22485: PUSH
22486: EMPTY
22487: LIST
22488: ST_TO_ADDR
// for i = 1 to pos - 1 do
22489: LD_ADDR_VAR 0 5
22493: PUSH
22494: DOUBLE
22495: LD_INT 1
22497: DEC
22498: ST_TO_ADDR
22499: LD_VAR 0 2
22503: PUSH
22504: LD_INT 1
22506: MINUS
22507: PUSH
22508: FOR_TO
22509: IFFALSE 22554
// begin tmp := tmp [ pos [ i ] ] ;
22511: LD_ADDR_VAR 0 6
22515: PUSH
22516: LD_VAR 0 6
22520: PUSH
22521: LD_VAR 0 2
22525: PUSH
22526: LD_VAR 0 5
22530: ARRAY
22531: ARRAY
22532: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22533: LD_ADDR_VAR 0 7
22537: PUSH
22538: LD_VAR 0 7
22542: PUSH
22543: LD_VAR 0 6
22547: PUSH
22548: EMPTY
22549: LIST
22550: ADD
22551: ST_TO_ADDR
// end ;
22552: GO 22508
22554: POP
22555: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22556: LD_ADDR_VAR 0 6
22560: PUSH
22561: LD_VAR 0 6
22565: PPUSH
22566: LD_VAR 0 2
22570: PUSH
22571: LD_VAR 0 2
22575: ARRAY
22576: PPUSH
22577: LD_VAR 0 3
22581: PPUSH
22582: CALL_OW 1
22586: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22587: LD_ADDR_VAR 0 7
22591: PUSH
22592: LD_VAR 0 7
22596: PPUSH
22597: LD_VAR 0 7
22601: PPUSH
22602: LD_VAR 0 6
22606: PPUSH
22607: CALL_OW 1
22611: ST_TO_ADDR
// for i = s_arr downto 2 do
22612: LD_ADDR_VAR 0 5
22616: PUSH
22617: DOUBLE
22618: LD_VAR 0 7
22622: INC
22623: ST_TO_ADDR
22624: LD_INT 2
22626: PUSH
22627: FOR_DOWNTO
22628: IFFALSE 22712
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22630: LD_ADDR_VAR 0 6
22634: PUSH
22635: LD_VAR 0 7
22639: PUSH
22640: LD_VAR 0 5
22644: PUSH
22645: LD_INT 1
22647: MINUS
22648: ARRAY
22649: PPUSH
22650: LD_VAR 0 2
22654: PUSH
22655: LD_VAR 0 5
22659: PUSH
22660: LD_INT 1
22662: MINUS
22663: ARRAY
22664: PPUSH
22665: LD_VAR 0 7
22669: PUSH
22670: LD_VAR 0 5
22674: ARRAY
22675: PPUSH
22676: CALL_OW 1
22680: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22681: LD_ADDR_VAR 0 7
22685: PUSH
22686: LD_VAR 0 7
22690: PPUSH
22691: LD_VAR 0 5
22695: PUSH
22696: LD_INT 1
22698: MINUS
22699: PPUSH
22700: LD_VAR 0 6
22704: PPUSH
22705: CALL_OW 1
22709: ST_TO_ADDR
// end ;
22710: GO 22627
22712: POP
22713: POP
// result := s_arr [ 1 ] ;
22714: LD_ADDR_VAR 0 4
22718: PUSH
22719: LD_VAR 0 7
22723: PUSH
22724: LD_INT 1
22726: ARRAY
22727: ST_TO_ADDR
// end ; end ;
22728: LD_VAR 0 4
22732: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22733: LD_INT 0
22735: PPUSH
22736: PPUSH
// if not list then
22737: LD_VAR 0 1
22741: NOT
22742: IFFALSE 22746
// exit ;
22744: GO 22837
// i := list [ pos1 ] ;
22746: LD_ADDR_VAR 0 5
22750: PUSH
22751: LD_VAR 0 1
22755: PUSH
22756: LD_VAR 0 2
22760: ARRAY
22761: ST_TO_ADDR
// if not i then
22762: LD_VAR 0 5
22766: NOT
22767: IFFALSE 22771
// exit ;
22769: GO 22837
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22771: LD_ADDR_VAR 0 1
22775: PUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: LD_VAR 0 2
22785: PPUSH
22786: LD_VAR 0 1
22790: PUSH
22791: LD_VAR 0 3
22795: ARRAY
22796: PPUSH
22797: CALL_OW 1
22801: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22802: LD_ADDR_VAR 0 1
22806: PUSH
22807: LD_VAR 0 1
22811: PPUSH
22812: LD_VAR 0 3
22816: PPUSH
22817: LD_VAR 0 5
22821: PPUSH
22822: CALL_OW 1
22826: ST_TO_ADDR
// result := list ;
22827: LD_ADDR_VAR 0 4
22831: PUSH
22832: LD_VAR 0 1
22836: ST_TO_ADDR
// end ;
22837: LD_VAR 0 4
22841: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22842: LD_INT 0
22844: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22845: LD_ADDR_VAR 0 5
22849: PUSH
22850: LD_VAR 0 1
22854: PPUSH
22855: CALL_OW 250
22859: PPUSH
22860: LD_VAR 0 1
22864: PPUSH
22865: CALL_OW 251
22869: PPUSH
22870: LD_VAR 0 2
22874: PPUSH
22875: LD_VAR 0 3
22879: PPUSH
22880: LD_VAR 0 4
22884: PPUSH
22885: CALL 22895 0 5
22889: ST_TO_ADDR
// end ;
22890: LD_VAR 0 5
22894: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22895: LD_INT 0
22897: PPUSH
22898: PPUSH
22899: PPUSH
22900: PPUSH
// if not list then
22901: LD_VAR 0 3
22905: NOT
22906: IFFALSE 22910
// exit ;
22908: GO 23298
// result := [ ] ;
22910: LD_ADDR_VAR 0 6
22914: PUSH
22915: EMPTY
22916: ST_TO_ADDR
// for i in list do
22917: LD_ADDR_VAR 0 7
22921: PUSH
22922: LD_VAR 0 3
22926: PUSH
22927: FOR_IN
22928: IFFALSE 23130
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22930: LD_ADDR_VAR 0 9
22934: PUSH
22935: LD_VAR 0 7
22939: PPUSH
22940: LD_VAR 0 1
22944: PPUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: CALL_OW 297
22954: ST_TO_ADDR
// if not result then
22955: LD_VAR 0 6
22959: NOT
22960: IFFALSE 22986
// result := [ [ i , tmp ] ] else
22962: LD_ADDR_VAR 0 6
22966: PUSH
22967: LD_VAR 0 7
22971: PUSH
22972: LD_VAR 0 9
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: EMPTY
22982: LIST
22983: ST_TO_ADDR
22984: GO 23128
// begin if result [ result ] [ 2 ] < tmp then
22986: LD_VAR 0 6
22990: PUSH
22991: LD_VAR 0 6
22995: ARRAY
22996: PUSH
22997: LD_INT 2
22999: ARRAY
23000: PUSH
23001: LD_VAR 0 9
23005: LESS
23006: IFFALSE 23048
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23008: LD_ADDR_VAR 0 6
23012: PUSH
23013: LD_VAR 0 6
23017: PPUSH
23018: LD_VAR 0 6
23022: PUSH
23023: LD_INT 1
23025: PLUS
23026: PPUSH
23027: LD_VAR 0 7
23031: PUSH
23032: LD_VAR 0 9
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PPUSH
23041: CALL_OW 2
23045: ST_TO_ADDR
23046: GO 23128
// for j = 1 to result do
23048: LD_ADDR_VAR 0 8
23052: PUSH
23053: DOUBLE
23054: LD_INT 1
23056: DEC
23057: ST_TO_ADDR
23058: LD_VAR 0 6
23062: PUSH
23063: FOR_TO
23064: IFFALSE 23126
// begin if tmp < result [ j ] [ 2 ] then
23066: LD_VAR 0 9
23070: PUSH
23071: LD_VAR 0 6
23075: PUSH
23076: LD_VAR 0 8
23080: ARRAY
23081: PUSH
23082: LD_INT 2
23084: ARRAY
23085: LESS
23086: IFFALSE 23124
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23088: LD_ADDR_VAR 0 6
23092: PUSH
23093: LD_VAR 0 6
23097: PPUSH
23098: LD_VAR 0 8
23102: PPUSH
23103: LD_VAR 0 7
23107: PUSH
23108: LD_VAR 0 9
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PPUSH
23117: CALL_OW 2
23121: ST_TO_ADDR
// break ;
23122: GO 23126
// end ; end ;
23124: GO 23063
23126: POP
23127: POP
// end ; end ;
23128: GO 22927
23130: POP
23131: POP
// if result and not asc then
23132: LD_VAR 0 6
23136: PUSH
23137: LD_VAR 0 4
23141: NOT
23142: AND
23143: IFFALSE 23218
// begin tmp := result ;
23145: LD_ADDR_VAR 0 9
23149: PUSH
23150: LD_VAR 0 6
23154: ST_TO_ADDR
// for i = tmp downto 1 do
23155: LD_ADDR_VAR 0 7
23159: PUSH
23160: DOUBLE
23161: LD_VAR 0 9
23165: INC
23166: ST_TO_ADDR
23167: LD_INT 1
23169: PUSH
23170: FOR_DOWNTO
23171: IFFALSE 23216
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23173: LD_ADDR_VAR 0 6
23177: PUSH
23178: LD_VAR 0 6
23182: PPUSH
23183: LD_VAR 0 9
23187: PUSH
23188: LD_VAR 0 7
23192: MINUS
23193: PUSH
23194: LD_INT 1
23196: PLUS
23197: PPUSH
23198: LD_VAR 0 9
23202: PUSH
23203: LD_VAR 0 7
23207: ARRAY
23208: PPUSH
23209: CALL_OW 1
23213: ST_TO_ADDR
23214: GO 23170
23216: POP
23217: POP
// end ; tmp := [ ] ;
23218: LD_ADDR_VAR 0 9
23222: PUSH
23223: EMPTY
23224: ST_TO_ADDR
// if mode then
23225: LD_VAR 0 5
23229: IFFALSE 23298
// begin for i = 1 to result do
23231: LD_ADDR_VAR 0 7
23235: PUSH
23236: DOUBLE
23237: LD_INT 1
23239: DEC
23240: ST_TO_ADDR
23241: LD_VAR 0 6
23245: PUSH
23246: FOR_TO
23247: IFFALSE 23286
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23249: LD_ADDR_VAR 0 9
23253: PUSH
23254: LD_VAR 0 9
23258: PPUSH
23259: LD_VAR 0 7
23263: PPUSH
23264: LD_VAR 0 6
23268: PUSH
23269: LD_VAR 0 7
23273: ARRAY
23274: PUSH
23275: LD_INT 1
23277: ARRAY
23278: PPUSH
23279: CALL_OW 1
23283: ST_TO_ADDR
23284: GO 23246
23286: POP
23287: POP
// result := tmp ;
23288: LD_ADDR_VAR 0 6
23292: PUSH
23293: LD_VAR 0 9
23297: ST_TO_ADDR
// end ; end ;
23298: LD_VAR 0 6
23302: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23303: LD_INT 0
23305: PPUSH
23306: PPUSH
23307: PPUSH
23308: PPUSH
23309: PPUSH
23310: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23311: LD_ADDR_VAR 0 5
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: EMPTY
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: ST_TO_ADDR
// if not x or not y then
23333: LD_VAR 0 2
23337: NOT
23338: PUSH
23339: LD_VAR 0 3
23343: NOT
23344: OR
23345: IFFALSE 23349
// exit ;
23347: GO 24995
// if not range then
23349: LD_VAR 0 4
23353: NOT
23354: IFFALSE 23364
// range := 10 ;
23356: LD_ADDR_VAR 0 4
23360: PUSH
23361: LD_INT 10
23363: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23364: LD_ADDR_VAR 0 8
23368: PUSH
23369: LD_INT 81
23371: PUSH
23372: LD_VAR 0 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 92
23383: PUSH
23384: LD_VAR 0 2
23388: PUSH
23389: LD_VAR 0 3
23393: PUSH
23394: LD_VAR 0 4
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 3
23407: PUSH
23408: LD_INT 21
23410: PUSH
23411: LD_INT 3
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: PPUSH
23427: CALL_OW 69
23431: ST_TO_ADDR
// if not tmp then
23432: LD_VAR 0 8
23436: NOT
23437: IFFALSE 23441
// exit ;
23439: GO 24995
// for i in tmp do
23441: LD_ADDR_VAR 0 6
23445: PUSH
23446: LD_VAR 0 8
23450: PUSH
23451: FOR_IN
23452: IFFALSE 24970
// begin points := [ 0 , 0 , 0 ] ;
23454: LD_ADDR_VAR 0 9
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: LD_INT 0
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: ST_TO_ADDR
// bpoints := 1 ;
23473: LD_ADDR_VAR 0 10
23477: PUSH
23478: LD_INT 1
23480: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23481: LD_VAR 0 6
23485: PPUSH
23486: CALL_OW 247
23490: PUSH
23491: LD_INT 1
23493: DOUBLE
23494: EQUAL
23495: IFTRUE 23499
23497: GO 24077
23499: POP
// begin if GetClass ( i ) = 1 then
23500: LD_VAR 0 6
23504: PPUSH
23505: CALL_OW 257
23509: PUSH
23510: LD_INT 1
23512: EQUAL
23513: IFFALSE 23534
// points := [ 10 , 5 , 3 ] ;
23515: LD_ADDR_VAR 0 9
23519: PUSH
23520: LD_INT 10
23522: PUSH
23523: LD_INT 5
23525: PUSH
23526: LD_INT 3
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: LIST
23533: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23534: LD_VAR 0 6
23538: PPUSH
23539: CALL_OW 257
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: IN
23558: IFFALSE 23579
// points := [ 3 , 2 , 1 ] ;
23560: LD_ADDR_VAR 0 9
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 1
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: LIST
23578: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23579: LD_VAR 0 6
23583: PPUSH
23584: CALL_OW 257
23588: PUSH
23589: LD_INT 5
23591: EQUAL
23592: IFFALSE 23613
// points := [ 130 , 5 , 2 ] ;
23594: LD_ADDR_VAR 0 9
23598: PUSH
23599: LD_INT 130
23601: PUSH
23602: LD_INT 5
23604: PUSH
23605: LD_INT 2
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23613: LD_VAR 0 6
23617: PPUSH
23618: CALL_OW 257
23622: PUSH
23623: LD_INT 8
23625: EQUAL
23626: IFFALSE 23647
// points := [ 35 , 35 , 30 ] ;
23628: LD_ADDR_VAR 0 9
23632: PUSH
23633: LD_INT 35
23635: PUSH
23636: LD_INT 35
23638: PUSH
23639: LD_INT 30
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: LIST
23646: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23647: LD_VAR 0 6
23651: PPUSH
23652: CALL_OW 257
23656: PUSH
23657: LD_INT 9
23659: EQUAL
23660: IFFALSE 23681
// points := [ 20 , 55 , 40 ] ;
23662: LD_ADDR_VAR 0 9
23666: PUSH
23667: LD_INT 20
23669: PUSH
23670: LD_INT 55
23672: PUSH
23673: LD_INT 40
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23681: LD_VAR 0 6
23685: PPUSH
23686: CALL_OW 257
23690: PUSH
23691: LD_INT 12
23693: PUSH
23694: LD_INT 16
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: IN
23701: IFFALSE 23722
// points := [ 5 , 3 , 2 ] ;
23703: LD_ADDR_VAR 0 9
23707: PUSH
23708: LD_INT 5
23710: PUSH
23711: LD_INT 3
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23722: LD_VAR 0 6
23726: PPUSH
23727: CALL_OW 257
23731: PUSH
23732: LD_INT 17
23734: EQUAL
23735: IFFALSE 23756
// points := [ 100 , 50 , 75 ] ;
23737: LD_ADDR_VAR 0 9
23741: PUSH
23742: LD_INT 100
23744: PUSH
23745: LD_INT 50
23747: PUSH
23748: LD_INT 75
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23756: LD_VAR 0 6
23760: PPUSH
23761: CALL_OW 257
23765: PUSH
23766: LD_INT 15
23768: EQUAL
23769: IFFALSE 23790
// points := [ 10 , 5 , 3 ] ;
23771: LD_ADDR_VAR 0 9
23775: PUSH
23776: LD_INT 10
23778: PUSH
23779: LD_INT 5
23781: PUSH
23782: LD_INT 3
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23790: LD_VAR 0 6
23794: PPUSH
23795: CALL_OW 257
23799: PUSH
23800: LD_INT 14
23802: EQUAL
23803: IFFALSE 23824
// points := [ 10 , 0 , 0 ] ;
23805: LD_ADDR_VAR 0 9
23809: PUSH
23810: LD_INT 10
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: LIST
23823: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23824: LD_VAR 0 6
23828: PPUSH
23829: CALL_OW 257
23833: PUSH
23834: LD_INT 11
23836: EQUAL
23837: IFFALSE 23858
// points := [ 30 , 10 , 5 ] ;
23839: LD_ADDR_VAR 0 9
23843: PUSH
23844: LD_INT 30
23846: PUSH
23847: LD_INT 10
23849: PUSH
23850: LD_INT 5
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23858: LD_VAR 0 1
23862: PPUSH
23863: LD_INT 5
23865: PPUSH
23866: CALL_OW 321
23870: PUSH
23871: LD_INT 2
23873: EQUAL
23874: IFFALSE 23891
// bpoints := bpoints * 1.8 ;
23876: LD_ADDR_VAR 0 10
23880: PUSH
23881: LD_VAR 0 10
23885: PUSH
23886: LD_REAL  1.80000000000000E+0000
23889: MUL
23890: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23891: LD_VAR 0 6
23895: PPUSH
23896: CALL_OW 257
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: LD_INT 2
23906: PUSH
23907: LD_INT 3
23909: PUSH
23910: LD_INT 4
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: IN
23919: PUSH
23920: LD_VAR 0 1
23924: PPUSH
23925: LD_INT 51
23927: PPUSH
23928: CALL_OW 321
23932: PUSH
23933: LD_INT 2
23935: EQUAL
23936: AND
23937: IFFALSE 23954
// bpoints := bpoints * 1.2 ;
23939: LD_ADDR_VAR 0 10
23943: PUSH
23944: LD_VAR 0 10
23948: PUSH
23949: LD_REAL  1.20000000000000E+0000
23952: MUL
23953: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23954: LD_VAR 0 6
23958: PPUSH
23959: CALL_OW 257
23963: PUSH
23964: LD_INT 5
23966: PUSH
23967: LD_INT 7
23969: PUSH
23970: LD_INT 9
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: LIST
23977: IN
23978: PUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: LD_INT 52
23986: PPUSH
23987: CALL_OW 321
23991: PUSH
23992: LD_INT 2
23994: EQUAL
23995: AND
23996: IFFALSE 24013
// bpoints := bpoints * 1.5 ;
23998: LD_ADDR_VAR 0 10
24002: PUSH
24003: LD_VAR 0 10
24007: PUSH
24008: LD_REAL  1.50000000000000E+0000
24011: MUL
24012: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24013: LD_VAR 0 1
24017: PPUSH
24018: LD_INT 66
24020: PPUSH
24021: CALL_OW 321
24025: PUSH
24026: LD_INT 2
24028: EQUAL
24029: IFFALSE 24046
// bpoints := bpoints * 1.1 ;
24031: LD_ADDR_VAR 0 10
24035: PUSH
24036: LD_VAR 0 10
24040: PUSH
24041: LD_REAL  1.10000000000000E+0000
24044: MUL
24045: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24046: LD_ADDR_VAR 0 10
24050: PUSH
24051: LD_VAR 0 10
24055: PUSH
24056: LD_VAR 0 6
24060: PPUSH
24061: LD_INT 1
24063: PPUSH
24064: CALL_OW 259
24068: PUSH
24069: LD_REAL  1.15000000000000E+0000
24072: MUL
24073: MUL
24074: ST_TO_ADDR
// end ; unit_vehicle :
24075: GO 24899
24077: LD_INT 2
24079: DOUBLE
24080: EQUAL
24081: IFTRUE 24085
24083: GO 24887
24085: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24086: LD_VAR 0 6
24090: PPUSH
24091: CALL_OW 264
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: LD_INT 42
24101: PUSH
24102: LD_INT 24
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: IN
24110: IFFALSE 24131
// points := [ 25 , 5 , 3 ] ;
24112: LD_ADDR_VAR 0 9
24116: PUSH
24117: LD_INT 25
24119: PUSH
24120: LD_INT 5
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: LIST
24130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24131: LD_VAR 0 6
24135: PPUSH
24136: CALL_OW 264
24140: PUSH
24141: LD_INT 4
24143: PUSH
24144: LD_INT 43
24146: PUSH
24147: LD_INT 25
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: IN
24155: IFFALSE 24176
// points := [ 40 , 15 , 5 ] ;
24157: LD_ADDR_VAR 0 9
24161: PUSH
24162: LD_INT 40
24164: PUSH
24165: LD_INT 15
24167: PUSH
24168: LD_INT 5
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: LIST
24175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24176: LD_VAR 0 6
24180: PPUSH
24181: CALL_OW 264
24185: PUSH
24186: LD_INT 3
24188: PUSH
24189: LD_INT 23
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: IN
24196: IFFALSE 24217
// points := [ 7 , 25 , 8 ] ;
24198: LD_ADDR_VAR 0 9
24202: PUSH
24203: LD_INT 7
24205: PUSH
24206: LD_INT 25
24208: PUSH
24209: LD_INT 8
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24217: LD_VAR 0 6
24221: PPUSH
24222: CALL_OW 264
24226: PUSH
24227: LD_INT 5
24229: PUSH
24230: LD_INT 27
24232: PUSH
24233: LD_INT 44
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: LIST
24240: IN
24241: IFFALSE 24262
// points := [ 14 , 50 , 16 ] ;
24243: LD_ADDR_VAR 0 9
24247: PUSH
24248: LD_INT 14
24250: PUSH
24251: LD_INT 50
24253: PUSH
24254: LD_INT 16
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: LIST
24261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24262: LD_VAR 0 6
24266: PPUSH
24267: CALL_OW 264
24271: PUSH
24272: LD_INT 6
24274: PUSH
24275: LD_INT 46
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: IN
24282: IFFALSE 24303
// points := [ 32 , 120 , 70 ] ;
24284: LD_ADDR_VAR 0 9
24288: PUSH
24289: LD_INT 32
24291: PUSH
24292: LD_INT 120
24294: PUSH
24295: LD_INT 70
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
24303: LD_VAR 0 6
24307: PPUSH
24308: CALL_OW 264
24312: PUSH
24313: LD_INT 7
24315: PUSH
24316: LD_INT 28
24318: PUSH
24319: LD_INT 45
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: IN
24327: IFFALSE 24348
// points := [ 35 , 20 , 45 ] ;
24329: LD_ADDR_VAR 0 9
24333: PUSH
24334: LD_INT 35
24336: PUSH
24337: LD_INT 20
24339: PUSH
24340: LD_INT 45
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: LIST
24347: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24348: LD_VAR 0 6
24352: PPUSH
24353: CALL_OW 264
24357: PUSH
24358: LD_INT 47
24360: PUSH
24361: EMPTY
24362: LIST
24363: IN
24364: IFFALSE 24385
// points := [ 67 , 45 , 75 ] ;
24366: LD_ADDR_VAR 0 9
24370: PUSH
24371: LD_INT 67
24373: PUSH
24374: LD_INT 45
24376: PUSH
24377: LD_INT 75
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24385: LD_VAR 0 6
24389: PPUSH
24390: CALL_OW 264
24394: PUSH
24395: LD_INT 26
24397: PUSH
24398: EMPTY
24399: LIST
24400: IN
24401: IFFALSE 24422
// points := [ 120 , 30 , 80 ] ;
24403: LD_ADDR_VAR 0 9
24407: PUSH
24408: LD_INT 120
24410: PUSH
24411: LD_INT 30
24413: PUSH
24414: LD_INT 80
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24422: LD_VAR 0 6
24426: PPUSH
24427: CALL_OW 264
24431: PUSH
24432: LD_INT 22
24434: PUSH
24435: EMPTY
24436: LIST
24437: IN
24438: IFFALSE 24459
// points := [ 40 , 1 , 1 ] ;
24440: LD_ADDR_VAR 0 9
24444: PUSH
24445: LD_INT 40
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: LIST
24458: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24459: LD_VAR 0 6
24463: PPUSH
24464: CALL_OW 264
24468: PUSH
24469: LD_INT 29
24471: PUSH
24472: EMPTY
24473: LIST
24474: IN
24475: IFFALSE 24496
// points := [ 70 , 200 , 400 ] ;
24477: LD_ADDR_VAR 0 9
24481: PUSH
24482: LD_INT 70
24484: PUSH
24485: LD_INT 200
24487: PUSH
24488: LD_INT 400
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24496: LD_VAR 0 6
24500: PPUSH
24501: CALL_OW 264
24505: PUSH
24506: LD_INT 14
24508: PUSH
24509: LD_INT 53
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: IN
24516: IFFALSE 24537
// points := [ 40 , 10 , 20 ] ;
24518: LD_ADDR_VAR 0 9
24522: PUSH
24523: LD_INT 40
24525: PUSH
24526: LD_INT 10
24528: PUSH
24529: LD_INT 20
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24537: LD_VAR 0 6
24541: PPUSH
24542: CALL_OW 264
24546: PUSH
24547: LD_INT 9
24549: PUSH
24550: EMPTY
24551: LIST
24552: IN
24553: IFFALSE 24574
// points := [ 5 , 70 , 20 ] ;
24555: LD_ADDR_VAR 0 9
24559: PUSH
24560: LD_INT 5
24562: PUSH
24563: LD_INT 70
24565: PUSH
24566: LD_INT 20
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24574: LD_VAR 0 6
24578: PPUSH
24579: CALL_OW 264
24583: PUSH
24584: LD_INT 10
24586: PUSH
24587: EMPTY
24588: LIST
24589: IN
24590: IFFALSE 24611
// points := [ 35 , 110 , 70 ] ;
24592: LD_ADDR_VAR 0 9
24596: PUSH
24597: LD_INT 35
24599: PUSH
24600: LD_INT 110
24602: PUSH
24603: LD_INT 70
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: LIST
24610: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24611: LD_VAR 0 6
24615: PPUSH
24616: CALL_OW 265
24620: PUSH
24621: LD_INT 25
24623: EQUAL
24624: IFFALSE 24645
// points := [ 80 , 65 , 100 ] ;
24626: LD_ADDR_VAR 0 9
24630: PUSH
24631: LD_INT 80
24633: PUSH
24634: LD_INT 65
24636: PUSH
24637: LD_INT 100
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24645: LD_VAR 0 6
24649: PPUSH
24650: CALL_OW 263
24654: PUSH
24655: LD_INT 1
24657: EQUAL
24658: IFFALSE 24693
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24660: LD_ADDR_VAR 0 10
24664: PUSH
24665: LD_VAR 0 10
24669: PUSH
24670: LD_VAR 0 6
24674: PPUSH
24675: CALL_OW 311
24679: PPUSH
24680: LD_INT 3
24682: PPUSH
24683: CALL_OW 259
24687: PUSH
24688: LD_INT 4
24690: MUL
24691: MUL
24692: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24693: LD_VAR 0 6
24697: PPUSH
24698: CALL_OW 263
24702: PUSH
24703: LD_INT 2
24705: EQUAL
24706: IFFALSE 24757
// begin j := IsControledBy ( i ) ;
24708: LD_ADDR_VAR 0 7
24712: PUSH
24713: LD_VAR 0 6
24717: PPUSH
24718: CALL_OW 312
24722: ST_TO_ADDR
// if j then
24723: LD_VAR 0 7
24727: IFFALSE 24757
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24729: LD_ADDR_VAR 0 10
24733: PUSH
24734: LD_VAR 0 10
24738: PUSH
24739: LD_VAR 0 7
24743: PPUSH
24744: LD_INT 3
24746: PPUSH
24747: CALL_OW 259
24751: PUSH
24752: LD_INT 3
24754: MUL
24755: MUL
24756: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24757: LD_VAR 0 6
24761: PPUSH
24762: CALL_OW 264
24766: PUSH
24767: LD_INT 5
24769: PUSH
24770: LD_INT 6
24772: PUSH
24773: LD_INT 46
24775: PUSH
24776: LD_INT 44
24778: PUSH
24779: LD_INT 47
24781: PUSH
24782: LD_INT 45
24784: PUSH
24785: LD_INT 28
24787: PUSH
24788: LD_INT 7
24790: PUSH
24791: LD_INT 27
24793: PUSH
24794: LD_INT 29
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: IN
24809: PUSH
24810: LD_VAR 0 1
24814: PPUSH
24815: LD_INT 52
24817: PPUSH
24818: CALL_OW 321
24822: PUSH
24823: LD_INT 2
24825: EQUAL
24826: AND
24827: IFFALSE 24844
// bpoints := bpoints * 1.2 ;
24829: LD_ADDR_VAR 0 10
24833: PUSH
24834: LD_VAR 0 10
24838: PUSH
24839: LD_REAL  1.20000000000000E+0000
24842: MUL
24843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24844: LD_VAR 0 6
24848: PPUSH
24849: CALL_OW 264
24853: PUSH
24854: LD_INT 6
24856: PUSH
24857: LD_INT 46
24859: PUSH
24860: LD_INT 47
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: IN
24868: IFFALSE 24885
// bpoints := bpoints * 1.2 ;
24870: LD_ADDR_VAR 0 10
24874: PUSH
24875: LD_VAR 0 10
24879: PUSH
24880: LD_REAL  1.20000000000000E+0000
24883: MUL
24884: ST_TO_ADDR
// end ; unit_building :
24885: GO 24899
24887: LD_INT 3
24889: DOUBLE
24890: EQUAL
24891: IFTRUE 24895
24893: GO 24898
24895: POP
// ; end ;
24896: GO 24899
24898: POP
// for j = 1 to 3 do
24899: LD_ADDR_VAR 0 7
24903: PUSH
24904: DOUBLE
24905: LD_INT 1
24907: DEC
24908: ST_TO_ADDR
24909: LD_INT 3
24911: PUSH
24912: FOR_TO
24913: IFFALSE 24966
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24915: LD_ADDR_VAR 0 5
24919: PUSH
24920: LD_VAR 0 5
24924: PPUSH
24925: LD_VAR 0 7
24929: PPUSH
24930: LD_VAR 0 5
24934: PUSH
24935: LD_VAR 0 7
24939: ARRAY
24940: PUSH
24941: LD_VAR 0 9
24945: PUSH
24946: LD_VAR 0 7
24950: ARRAY
24951: PUSH
24952: LD_VAR 0 10
24956: MUL
24957: PLUS
24958: PPUSH
24959: CALL_OW 1
24963: ST_TO_ADDR
24964: GO 24912
24966: POP
24967: POP
// end ;
24968: GO 23451
24970: POP
24971: POP
// result := Replace ( result , 4 , tmp ) ;
24972: LD_ADDR_VAR 0 5
24976: PUSH
24977: LD_VAR 0 5
24981: PPUSH
24982: LD_INT 4
24984: PPUSH
24985: LD_VAR 0 8
24989: PPUSH
24990: CALL_OW 1
24994: ST_TO_ADDR
// end ;
24995: LD_VAR 0 5
24999: RET
// export function DangerAtRange ( unit , range ) ; begin
25000: LD_INT 0
25002: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25003: LD_ADDR_VAR 0 3
25007: PUSH
25008: LD_VAR 0 1
25012: PPUSH
25013: CALL_OW 255
25017: PPUSH
25018: LD_VAR 0 1
25022: PPUSH
25023: CALL_OW 250
25027: PPUSH
25028: LD_VAR 0 1
25032: PPUSH
25033: CALL_OW 251
25037: PPUSH
25038: LD_VAR 0 2
25042: PPUSH
25043: CALL 23303 0 4
25047: ST_TO_ADDR
// end ;
25048: LD_VAR 0 3
25052: RET
// export function DangerInArea ( side , area ) ; begin
25053: LD_INT 0
25055: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25056: LD_ADDR_VAR 0 3
25060: PUSH
25061: LD_VAR 0 2
25065: PPUSH
25066: LD_INT 81
25068: PUSH
25069: LD_VAR 0 1
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PPUSH
25078: CALL_OW 70
25082: ST_TO_ADDR
// end ;
25083: LD_VAR 0 3
25087: RET
// export function IsExtension ( b ) ; begin
25088: LD_INT 0
25090: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25091: LD_ADDR_VAR 0 2
25095: PUSH
25096: LD_VAR 0 1
25100: PUSH
25101: LD_INT 23
25103: PUSH
25104: LD_INT 20
25106: PUSH
25107: LD_INT 22
25109: PUSH
25110: LD_INT 17
25112: PUSH
25113: LD_INT 24
25115: PUSH
25116: LD_INT 21
25118: PUSH
25119: LD_INT 19
25121: PUSH
25122: LD_INT 16
25124: PUSH
25125: LD_INT 25
25127: PUSH
25128: LD_INT 18
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: IN
25143: ST_TO_ADDR
// end ;
25144: LD_VAR 0 2
25148: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
25149: LD_INT 0
25151: PPUSH
25152: PPUSH
25153: PPUSH
// result := [ ] ;
25154: LD_ADDR_VAR 0 3
25158: PUSH
25159: EMPTY
25160: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25161: LD_ADDR_VAR 0 4
25165: PUSH
25166: LD_VAR 0 2
25170: PPUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PPUSH
25181: CALL_OW 70
25185: ST_TO_ADDR
// if not tmp then
25186: LD_VAR 0 4
25190: NOT
25191: IFFALSE 25195
// exit ;
25193: GO 25253
// for i in tmp do
25195: LD_ADDR_VAR 0 5
25199: PUSH
25200: LD_VAR 0 4
25204: PUSH
25205: FOR_IN
25206: IFFALSE 25241
// if GetBase ( i ) <> base then
25208: LD_VAR 0 5
25212: PPUSH
25213: CALL_OW 274
25217: PUSH
25218: LD_VAR 0 1
25222: NONEQUAL
25223: IFFALSE 25239
// ComLinkToBase ( base , i ) ;
25225: LD_VAR 0 1
25229: PPUSH
25230: LD_VAR 0 5
25234: PPUSH
25235: CALL_OW 169
25239: GO 25205
25241: POP
25242: POP
// result := tmp ;
25243: LD_ADDR_VAR 0 3
25247: PUSH
25248: LD_VAR 0 4
25252: ST_TO_ADDR
// end ;
25253: LD_VAR 0 3
25257: RET
// export function ComComplete ( unit , b ) ; var i ; begin
25258: LD_INT 0
25260: PPUSH
25261: PPUSH
// if BuildingStatus ( b ) = bs_build then
25262: LD_VAR 0 2
25266: PPUSH
25267: CALL_OW 461
25271: PUSH
25272: LD_INT 1
25274: EQUAL
25275: IFFALSE 25335
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25277: LD_VAR 0 1
25281: PPUSH
25282: LD_STRING h
25284: PUSH
25285: LD_VAR 0 2
25289: PPUSH
25290: CALL_OW 250
25294: PUSH
25295: LD_VAR 0 2
25299: PPUSH
25300: CALL_OW 251
25304: PUSH
25305: LD_VAR 0 2
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: PUSH
25328: EMPTY
25329: LIST
25330: PPUSH
25331: CALL_OW 446
// end ;
25335: LD_VAR 0 3
25339: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25340: LD_INT 0
25342: PPUSH
25343: PPUSH
25344: PPUSH
25345: PPUSH
25346: PPUSH
25347: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
25348: LD_VAR 0 1
25352: NOT
25353: PUSH
25354: LD_VAR 0 1
25358: PPUSH
25359: CALL_OW 263
25363: PUSH
25364: LD_INT 2
25366: EQUAL
25367: NOT
25368: OR
25369: IFFALSE 25373
// exit ;
25371: GO 25689
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25373: LD_ADDR_VAR 0 6
25377: PUSH
25378: LD_INT 22
25380: PUSH
25381: LD_VAR 0 1
25385: PPUSH
25386: CALL_OW 255
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: LD_INT 30
25400: PUSH
25401: LD_INT 36
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 34
25410: PUSH
25411: LD_INT 31
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PPUSH
25427: CALL_OW 69
25431: ST_TO_ADDR
// if not tmp then
25432: LD_VAR 0 6
25436: NOT
25437: IFFALSE 25441
// exit ;
25439: GO 25689
// result := [ ] ;
25441: LD_ADDR_VAR 0 2
25445: PUSH
25446: EMPTY
25447: ST_TO_ADDR
// for i in tmp do
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_VAR 0 6
25457: PUSH
25458: FOR_IN
25459: IFFALSE 25530
// begin t := UnitsInside ( i ) ;
25461: LD_ADDR_VAR 0 4
25465: PUSH
25466: LD_VAR 0 3
25470: PPUSH
25471: CALL_OW 313
25475: ST_TO_ADDR
// if t then
25476: LD_VAR 0 4
25480: IFFALSE 25528
// for j in t do
25482: LD_ADDR_VAR 0 7
25486: PUSH
25487: LD_VAR 0 4
25491: PUSH
25492: FOR_IN
25493: IFFALSE 25526
// result := Insert ( result , result + 1 , j ) ;
25495: LD_ADDR_VAR 0 2
25499: PUSH
25500: LD_VAR 0 2
25504: PPUSH
25505: LD_VAR 0 2
25509: PUSH
25510: LD_INT 1
25512: PLUS
25513: PPUSH
25514: LD_VAR 0 7
25518: PPUSH
25519: CALL_OW 2
25523: ST_TO_ADDR
25524: GO 25492
25526: POP
25527: POP
// end ;
25528: GO 25458
25530: POP
25531: POP
// if not result then
25532: LD_VAR 0 2
25536: NOT
25537: IFFALSE 25541
// exit ;
25539: GO 25689
// mech := result [ 1 ] ;
25541: LD_ADDR_VAR 0 5
25545: PUSH
25546: LD_VAR 0 2
25550: PUSH
25551: LD_INT 1
25553: ARRAY
25554: ST_TO_ADDR
// if result > 1 then
25555: LD_VAR 0 2
25559: PUSH
25560: LD_INT 1
25562: GREATER
25563: IFFALSE 25675
// for i = 2 to result do
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: DOUBLE
25571: LD_INT 2
25573: DEC
25574: ST_TO_ADDR
25575: LD_VAR 0 2
25579: PUSH
25580: FOR_TO
25581: IFFALSE 25673
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25583: LD_ADDR_VAR 0 4
25587: PUSH
25588: LD_VAR 0 2
25592: PUSH
25593: LD_VAR 0 3
25597: ARRAY
25598: PPUSH
25599: LD_INT 3
25601: PPUSH
25602: CALL_OW 259
25606: PUSH
25607: LD_VAR 0 2
25611: PUSH
25612: LD_VAR 0 3
25616: ARRAY
25617: PPUSH
25618: CALL_OW 432
25622: MINUS
25623: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25624: LD_VAR 0 4
25628: PUSH
25629: LD_VAR 0 5
25633: PPUSH
25634: LD_INT 3
25636: PPUSH
25637: CALL_OW 259
25641: PUSH
25642: LD_VAR 0 5
25646: PPUSH
25647: CALL_OW 432
25651: MINUS
25652: GREATEREQUAL
25653: IFFALSE 25671
// mech := result [ i ] ;
25655: LD_ADDR_VAR 0 5
25659: PUSH
25660: LD_VAR 0 2
25664: PUSH
25665: LD_VAR 0 3
25669: ARRAY
25670: ST_TO_ADDR
// end ;
25671: GO 25580
25673: POP
25674: POP
// ComLinkTo ( vehicle , mech ) ;
25675: LD_VAR 0 1
25679: PPUSH
25680: LD_VAR 0 5
25684: PPUSH
25685: CALL_OW 135
// end ;
25689: LD_VAR 0 2
25693: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25694: LD_INT 0
25696: PPUSH
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
// result := [ ] ;
25709: LD_ADDR_VAR 0 7
25713: PUSH
25714: EMPTY
25715: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25716: LD_VAR 0 1
25720: PPUSH
25721: CALL_OW 266
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: IN
25736: NOT
25737: IFFALSE 25741
// exit ;
25739: GO 27372
// if name then
25741: LD_VAR 0 3
25745: IFFALSE 25761
// SetBName ( base_dep , name ) ;
25747: LD_VAR 0 1
25751: PPUSH
25752: LD_VAR 0 3
25756: PPUSH
25757: CALL_OW 500
// base := GetBase ( base_dep ) ;
25761: LD_ADDR_VAR 0 15
25765: PUSH
25766: LD_VAR 0 1
25770: PPUSH
25771: CALL_OW 274
25775: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25776: LD_ADDR_VAR 0 16
25780: PUSH
25781: LD_VAR 0 1
25785: PPUSH
25786: CALL_OW 255
25790: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25791: LD_ADDR_VAR 0 17
25795: PUSH
25796: LD_VAR 0 1
25800: PPUSH
25801: CALL_OW 248
25805: ST_TO_ADDR
// if sources then
25806: LD_VAR 0 5
25810: IFFALSE 25857
// for i = 1 to 3 do
25812: LD_ADDR_VAR 0 8
25816: PUSH
25817: DOUBLE
25818: LD_INT 1
25820: DEC
25821: ST_TO_ADDR
25822: LD_INT 3
25824: PUSH
25825: FOR_TO
25826: IFFALSE 25855
// AddResourceType ( base , i , sources [ i ] ) ;
25828: LD_VAR 0 15
25832: PPUSH
25833: LD_VAR 0 8
25837: PPUSH
25838: LD_VAR 0 5
25842: PUSH
25843: LD_VAR 0 8
25847: ARRAY
25848: PPUSH
25849: CALL_OW 276
25853: GO 25825
25855: POP
25856: POP
// buildings := GetBaseBuildings ( base , area ) ;
25857: LD_ADDR_VAR 0 18
25861: PUSH
25862: LD_VAR 0 15
25866: PPUSH
25867: LD_VAR 0 2
25871: PPUSH
25872: CALL 25149 0 2
25876: ST_TO_ADDR
// InitHc ;
25877: CALL_OW 19
// InitUc ;
25881: CALL_OW 18
// uc_side := side ;
25885: LD_ADDR_OWVAR 20
25889: PUSH
25890: LD_VAR 0 16
25894: ST_TO_ADDR
// uc_nation := nation ;
25895: LD_ADDR_OWVAR 21
25899: PUSH
25900: LD_VAR 0 17
25904: ST_TO_ADDR
// if buildings then
25905: LD_VAR 0 18
25909: IFFALSE 27231
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25911: LD_ADDR_VAR 0 19
25915: PUSH
25916: LD_VAR 0 18
25920: PPUSH
25921: LD_INT 2
25923: PUSH
25924: LD_INT 30
25926: PUSH
25927: LD_INT 29
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 30
25936: PUSH
25937: LD_INT 30
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 72
25953: ST_TO_ADDR
// if tmp then
25954: LD_VAR 0 19
25958: IFFALSE 26006
// for i in tmp do
25960: LD_ADDR_VAR 0 8
25964: PUSH
25965: LD_VAR 0 19
25969: PUSH
25970: FOR_IN
25971: IFFALSE 26004
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25973: LD_VAR 0 8
25977: PPUSH
25978: CALL_OW 250
25982: PPUSH
25983: LD_VAR 0 8
25987: PPUSH
25988: CALL_OW 251
25992: PPUSH
25993: LD_VAR 0 16
25997: PPUSH
25998: CALL_OW 441
26002: GO 25970
26004: POP
26005: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26006: LD_VAR 0 18
26010: PPUSH
26011: LD_INT 2
26013: PUSH
26014: LD_INT 30
26016: PUSH
26017: LD_INT 32
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 30
26026: PUSH
26027: LD_INT 33
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: PPUSH
26039: CALL_OW 72
26043: IFFALSE 26131
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26045: LD_ADDR_VAR 0 8
26049: PUSH
26050: LD_VAR 0 18
26054: PPUSH
26055: LD_INT 2
26057: PUSH
26058: LD_INT 30
26060: PUSH
26061: LD_INT 32
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 30
26070: PUSH
26071: LD_INT 33
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: LIST
26082: PPUSH
26083: CALL_OW 72
26087: PUSH
26088: FOR_IN
26089: IFFALSE 26129
// begin if not GetBWeapon ( i ) then
26091: LD_VAR 0 8
26095: PPUSH
26096: CALL_OW 269
26100: NOT
26101: IFFALSE 26127
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26103: LD_VAR 0 8
26107: PPUSH
26108: LD_VAR 0 8
26112: PPUSH
26113: LD_VAR 0 2
26117: PPUSH
26118: CALL 27377 0 2
26122: PPUSH
26123: CALL_OW 431
// end ;
26127: GO 26088
26129: POP
26130: POP
// end ; for i = 1 to personel do
26131: LD_ADDR_VAR 0 8
26135: PUSH
26136: DOUBLE
26137: LD_INT 1
26139: DEC
26140: ST_TO_ADDR
26141: LD_VAR 0 6
26145: PUSH
26146: FOR_TO
26147: IFFALSE 27211
// begin if i > 4 then
26149: LD_VAR 0 8
26153: PUSH
26154: LD_INT 4
26156: GREATER
26157: IFFALSE 26161
// break ;
26159: GO 27211
// case i of 1 :
26161: LD_VAR 0 8
26165: PUSH
26166: LD_INT 1
26168: DOUBLE
26169: EQUAL
26170: IFTRUE 26174
26172: GO 26254
26174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26175: LD_ADDR_VAR 0 12
26179: PUSH
26180: LD_VAR 0 18
26184: PPUSH
26185: LD_INT 22
26187: PUSH
26188: LD_VAR 0 16
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 58
26199: PUSH
26200: EMPTY
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: LD_INT 30
26208: PUSH
26209: LD_INT 32
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 30
26218: PUSH
26219: LD_INT 4
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 30
26228: PUSH
26229: LD_INT 5
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: PPUSH
26247: CALL_OW 72
26251: ST_TO_ADDR
26252: GO 26476
26254: LD_INT 2
26256: DOUBLE
26257: EQUAL
26258: IFTRUE 26262
26260: GO 26324
26262: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26263: LD_ADDR_VAR 0 12
26267: PUSH
26268: LD_VAR 0 18
26272: PPUSH
26273: LD_INT 22
26275: PUSH
26276: LD_VAR 0 16
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 2
26287: PUSH
26288: LD_INT 30
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 30
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: LIST
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PPUSH
26317: CALL_OW 72
26321: ST_TO_ADDR
26322: GO 26476
26324: LD_INT 3
26326: DOUBLE
26327: EQUAL
26328: IFTRUE 26332
26330: GO 26394
26332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26333: LD_ADDR_VAR 0 12
26337: PUSH
26338: LD_VAR 0 18
26342: PPUSH
26343: LD_INT 22
26345: PUSH
26346: LD_VAR 0 16
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: LD_INT 30
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 30
26370: PUSH
26371: LD_INT 3
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PPUSH
26387: CALL_OW 72
26391: ST_TO_ADDR
26392: GO 26476
26394: LD_INT 4
26396: DOUBLE
26397: EQUAL
26398: IFTRUE 26402
26400: GO 26475
26402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26403: LD_ADDR_VAR 0 12
26407: PUSH
26408: LD_VAR 0 18
26412: PPUSH
26413: LD_INT 22
26415: PUSH
26416: LD_VAR 0 16
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 30
26430: PUSH
26431: LD_INT 6
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 30
26440: PUSH
26441: LD_INT 7
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 30
26450: PUSH
26451: LD_INT 8
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PPUSH
26468: CALL_OW 72
26472: ST_TO_ADDR
26473: GO 26476
26475: POP
// if i = 1 then
26476: LD_VAR 0 8
26480: PUSH
26481: LD_INT 1
26483: EQUAL
26484: IFFALSE 26595
// begin tmp := [ ] ;
26486: LD_ADDR_VAR 0 19
26490: PUSH
26491: EMPTY
26492: ST_TO_ADDR
// for j in f do
26493: LD_ADDR_VAR 0 9
26497: PUSH
26498: LD_VAR 0 12
26502: PUSH
26503: FOR_IN
26504: IFFALSE 26577
// if GetBType ( j ) = b_bunker then
26506: LD_VAR 0 9
26510: PPUSH
26511: CALL_OW 266
26515: PUSH
26516: LD_INT 32
26518: EQUAL
26519: IFFALSE 26546
// tmp := Insert ( tmp , 1 , j ) else
26521: LD_ADDR_VAR 0 19
26525: PUSH
26526: LD_VAR 0 19
26530: PPUSH
26531: LD_INT 1
26533: PPUSH
26534: LD_VAR 0 9
26538: PPUSH
26539: CALL_OW 2
26543: ST_TO_ADDR
26544: GO 26575
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26546: LD_ADDR_VAR 0 19
26550: PUSH
26551: LD_VAR 0 19
26555: PPUSH
26556: LD_VAR 0 19
26560: PUSH
26561: LD_INT 1
26563: PLUS
26564: PPUSH
26565: LD_VAR 0 9
26569: PPUSH
26570: CALL_OW 2
26574: ST_TO_ADDR
26575: GO 26503
26577: POP
26578: POP
// if tmp then
26579: LD_VAR 0 19
26583: IFFALSE 26595
// f := tmp ;
26585: LD_ADDR_VAR 0 12
26589: PUSH
26590: LD_VAR 0 19
26594: ST_TO_ADDR
// end ; x := personel [ i ] ;
26595: LD_ADDR_VAR 0 13
26599: PUSH
26600: LD_VAR 0 6
26604: PUSH
26605: LD_VAR 0 8
26609: ARRAY
26610: ST_TO_ADDR
// if x = - 1 then
26611: LD_VAR 0 13
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: EQUAL
26620: IFFALSE 26829
// begin for j in f do
26622: LD_ADDR_VAR 0 9
26626: PUSH
26627: LD_VAR 0 12
26631: PUSH
26632: FOR_IN
26633: IFFALSE 26825
// repeat InitHc ;
26635: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26639: LD_VAR 0 9
26643: PPUSH
26644: CALL_OW 266
26648: PUSH
26649: LD_INT 5
26651: EQUAL
26652: IFFALSE 26722
// begin if UnitsInside ( j ) < 3 then
26654: LD_VAR 0 9
26658: PPUSH
26659: CALL_OW 313
26663: PUSH
26664: LD_INT 3
26666: LESS
26667: IFFALSE 26703
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26669: LD_INT 0
26671: PPUSH
26672: LD_INT 5
26674: PUSH
26675: LD_INT 8
26677: PUSH
26678: LD_INT 9
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: LIST
26685: PUSH
26686: LD_VAR 0 17
26690: ARRAY
26691: PPUSH
26692: LD_VAR 0 4
26696: PPUSH
26697: CALL_OW 380
26701: GO 26720
// PrepareHuman ( false , i , skill ) ;
26703: LD_INT 0
26705: PPUSH
26706: LD_VAR 0 8
26710: PPUSH
26711: LD_VAR 0 4
26715: PPUSH
26716: CALL_OW 380
// end else
26720: GO 26739
// PrepareHuman ( false , i , skill ) ;
26722: LD_INT 0
26724: PPUSH
26725: LD_VAR 0 8
26729: PPUSH
26730: LD_VAR 0 4
26734: PPUSH
26735: CALL_OW 380
// un := CreateHuman ;
26739: LD_ADDR_VAR 0 14
26743: PUSH
26744: CALL_OW 44
26748: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26749: LD_ADDR_VAR 0 7
26753: PUSH
26754: LD_VAR 0 7
26758: PPUSH
26759: LD_INT 1
26761: PPUSH
26762: LD_VAR 0 14
26766: PPUSH
26767: CALL_OW 2
26771: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26772: LD_VAR 0 14
26776: PPUSH
26777: LD_VAR 0 9
26781: PPUSH
26782: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26786: LD_VAR 0 9
26790: PPUSH
26791: CALL_OW 313
26795: PUSH
26796: LD_INT 6
26798: EQUAL
26799: PUSH
26800: LD_VAR 0 9
26804: PPUSH
26805: CALL_OW 266
26809: PUSH
26810: LD_INT 32
26812: PUSH
26813: LD_INT 31
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: IN
26820: OR
26821: IFFALSE 26635
26823: GO 26632
26825: POP
26826: POP
// end else
26827: GO 27209
// for j = 1 to x do
26829: LD_ADDR_VAR 0 9
26833: PUSH
26834: DOUBLE
26835: LD_INT 1
26837: DEC
26838: ST_TO_ADDR
26839: LD_VAR 0 13
26843: PUSH
26844: FOR_TO
26845: IFFALSE 27207
// begin InitHc ;
26847: CALL_OW 19
// if not f then
26851: LD_VAR 0 12
26855: NOT
26856: IFFALSE 26945
// begin PrepareHuman ( false , i , skill ) ;
26858: LD_INT 0
26860: PPUSH
26861: LD_VAR 0 8
26865: PPUSH
26866: LD_VAR 0 4
26870: PPUSH
26871: CALL_OW 380
// un := CreateHuman ;
26875: LD_ADDR_VAR 0 14
26879: PUSH
26880: CALL_OW 44
26884: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26885: LD_ADDR_VAR 0 7
26889: PUSH
26890: LD_VAR 0 7
26894: PPUSH
26895: LD_INT 1
26897: PPUSH
26898: LD_VAR 0 14
26902: PPUSH
26903: CALL_OW 2
26907: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26908: LD_VAR 0 14
26912: PPUSH
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 250
26922: PPUSH
26923: LD_VAR 0 1
26927: PPUSH
26928: CALL_OW 251
26932: PPUSH
26933: LD_INT 10
26935: PPUSH
26936: LD_INT 0
26938: PPUSH
26939: CALL_OW 50
// continue ;
26943: GO 26844
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26945: LD_VAR 0 12
26949: PUSH
26950: LD_INT 1
26952: ARRAY
26953: PPUSH
26954: CALL_OW 313
26958: PUSH
26959: LD_VAR 0 12
26963: PUSH
26964: LD_INT 1
26966: ARRAY
26967: PPUSH
26968: CALL_OW 266
26972: PUSH
26973: LD_INT 32
26975: PUSH
26976: LD_INT 31
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: IN
26983: AND
26984: PUSH
26985: LD_VAR 0 12
26989: PUSH
26990: LD_INT 1
26992: ARRAY
26993: PPUSH
26994: CALL_OW 313
26998: PUSH
26999: LD_INT 6
27001: EQUAL
27002: OR
27003: IFFALSE 27023
// f := Delete ( f , 1 ) ;
27005: LD_ADDR_VAR 0 12
27009: PUSH
27010: LD_VAR 0 12
27014: PPUSH
27015: LD_INT 1
27017: PPUSH
27018: CALL_OW 3
27022: ST_TO_ADDR
// if not f then
27023: LD_VAR 0 12
27027: NOT
27028: IFFALSE 27046
// begin x := x + 2 ;
27030: LD_ADDR_VAR 0 13
27034: PUSH
27035: LD_VAR 0 13
27039: PUSH
27040: LD_INT 2
27042: PLUS
27043: ST_TO_ADDR
// continue ;
27044: GO 26844
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27046: LD_VAR 0 12
27050: PUSH
27051: LD_INT 1
27053: ARRAY
27054: PPUSH
27055: CALL_OW 266
27059: PUSH
27060: LD_INT 5
27062: EQUAL
27063: IFFALSE 27137
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27065: LD_VAR 0 12
27069: PUSH
27070: LD_INT 1
27072: ARRAY
27073: PPUSH
27074: CALL_OW 313
27078: PUSH
27079: LD_INT 3
27081: LESS
27082: IFFALSE 27118
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27084: LD_INT 0
27086: PPUSH
27087: LD_INT 5
27089: PUSH
27090: LD_INT 8
27092: PUSH
27093: LD_INT 9
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: PUSH
27101: LD_VAR 0 17
27105: ARRAY
27106: PPUSH
27107: LD_VAR 0 4
27111: PPUSH
27112: CALL_OW 380
27116: GO 27135
// PrepareHuman ( false , i , skill ) ;
27118: LD_INT 0
27120: PPUSH
27121: LD_VAR 0 8
27125: PPUSH
27126: LD_VAR 0 4
27130: PPUSH
27131: CALL_OW 380
// end else
27135: GO 27154
// PrepareHuman ( false , i , skill ) ;
27137: LD_INT 0
27139: PPUSH
27140: LD_VAR 0 8
27144: PPUSH
27145: LD_VAR 0 4
27149: PPUSH
27150: CALL_OW 380
// un := CreateHuman ;
27154: LD_ADDR_VAR 0 14
27158: PUSH
27159: CALL_OW 44
27163: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27164: LD_ADDR_VAR 0 7
27168: PUSH
27169: LD_VAR 0 7
27173: PPUSH
27174: LD_INT 1
27176: PPUSH
27177: LD_VAR 0 14
27181: PPUSH
27182: CALL_OW 2
27186: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27187: LD_VAR 0 14
27191: PPUSH
27192: LD_VAR 0 12
27196: PUSH
27197: LD_INT 1
27199: ARRAY
27200: PPUSH
27201: CALL_OW 52
// end ;
27205: GO 26844
27207: POP
27208: POP
// end ;
27209: GO 26146
27211: POP
27212: POP
// result := result ^ buildings ;
27213: LD_ADDR_VAR 0 7
27217: PUSH
27218: LD_VAR 0 7
27222: PUSH
27223: LD_VAR 0 18
27227: ADD
27228: ST_TO_ADDR
// end else
27229: GO 27372
// begin for i = 1 to personel do
27231: LD_ADDR_VAR 0 8
27235: PUSH
27236: DOUBLE
27237: LD_INT 1
27239: DEC
27240: ST_TO_ADDR
27241: LD_VAR 0 6
27245: PUSH
27246: FOR_TO
27247: IFFALSE 27370
// begin if i > 4 then
27249: LD_VAR 0 8
27253: PUSH
27254: LD_INT 4
27256: GREATER
27257: IFFALSE 27261
// break ;
27259: GO 27370
// x := personel [ i ] ;
27261: LD_ADDR_VAR 0 13
27265: PUSH
27266: LD_VAR 0 6
27270: PUSH
27271: LD_VAR 0 8
27275: ARRAY
27276: ST_TO_ADDR
// if x = - 1 then
27277: LD_VAR 0 13
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: EQUAL
27286: IFFALSE 27290
// continue ;
27288: GO 27246
// PrepareHuman ( false , i , skill ) ;
27290: LD_INT 0
27292: PPUSH
27293: LD_VAR 0 8
27297: PPUSH
27298: LD_VAR 0 4
27302: PPUSH
27303: CALL_OW 380
// un := CreateHuman ;
27307: LD_ADDR_VAR 0 14
27311: PUSH
27312: CALL_OW 44
27316: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27317: LD_VAR 0 14
27321: PPUSH
27322: LD_VAR 0 1
27326: PPUSH
27327: CALL_OW 250
27331: PPUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL_OW 251
27341: PPUSH
27342: LD_INT 10
27344: PPUSH
27345: LD_INT 0
27347: PPUSH
27348: CALL_OW 50
// result := result ^ un ;
27352: LD_ADDR_VAR 0 7
27356: PUSH
27357: LD_VAR 0 7
27361: PUSH
27362: LD_VAR 0 14
27366: ADD
27367: ST_TO_ADDR
// end ;
27368: GO 27246
27370: POP
27371: POP
// end ; end ;
27372: LD_VAR 0 7
27376: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27377: LD_INT 0
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
27383: PPUSH
27384: PPUSH
27385: PPUSH
27386: PPUSH
27387: PPUSH
27388: PPUSH
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
27393: PPUSH
27394: PPUSH
// result := false ;
27395: LD_ADDR_VAR 0 3
27399: PUSH
27400: LD_INT 0
27402: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27403: LD_VAR 0 1
27407: NOT
27408: PUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 266
27418: PUSH
27419: LD_INT 32
27421: PUSH
27422: LD_INT 33
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: IN
27429: NOT
27430: OR
27431: IFFALSE 27435
// exit ;
27433: GO 28571
// nat := GetNation ( tower ) ;
27435: LD_ADDR_VAR 0 12
27439: PUSH
27440: LD_VAR 0 1
27444: PPUSH
27445: CALL_OW 248
27449: ST_TO_ADDR
// side := GetSide ( tower ) ;
27450: LD_ADDR_VAR 0 16
27454: PUSH
27455: LD_VAR 0 1
27459: PPUSH
27460: CALL_OW 255
27464: ST_TO_ADDR
// x := GetX ( tower ) ;
27465: LD_ADDR_VAR 0 10
27469: PUSH
27470: LD_VAR 0 1
27474: PPUSH
27475: CALL_OW 250
27479: ST_TO_ADDR
// y := GetY ( tower ) ;
27480: LD_ADDR_VAR 0 11
27484: PUSH
27485: LD_VAR 0 1
27489: PPUSH
27490: CALL_OW 251
27494: ST_TO_ADDR
// if not x or not y then
27495: LD_VAR 0 10
27499: NOT
27500: PUSH
27501: LD_VAR 0 11
27505: NOT
27506: OR
27507: IFFALSE 27511
// exit ;
27509: GO 28571
// weapon := 0 ;
27511: LD_ADDR_VAR 0 18
27515: PUSH
27516: LD_INT 0
27518: ST_TO_ADDR
// fac_list := [ ] ;
27519: LD_ADDR_VAR 0 17
27523: PUSH
27524: EMPTY
27525: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
27526: LD_ADDR_VAR 0 6
27530: PUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL_OW 274
27540: PPUSH
27541: LD_VAR 0 2
27545: PPUSH
27546: CALL 25149 0 2
27550: PPUSH
27551: LD_INT 30
27553: PUSH
27554: LD_INT 3
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PPUSH
27561: CALL_OW 72
27565: ST_TO_ADDR
// if not factories then
27566: LD_VAR 0 6
27570: NOT
27571: IFFALSE 27575
// exit ;
27573: GO 28571
// for i in factories do
27575: LD_ADDR_VAR 0 8
27579: PUSH
27580: LD_VAR 0 6
27584: PUSH
27585: FOR_IN
27586: IFFALSE 27611
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27588: LD_ADDR_VAR 0 17
27592: PUSH
27593: LD_VAR 0 17
27597: PUSH
27598: LD_VAR 0 8
27602: PPUSH
27603: CALL_OW 478
27607: UNION
27608: ST_TO_ADDR
27609: GO 27585
27611: POP
27612: POP
// if not fac_list then
27613: LD_VAR 0 17
27617: NOT
27618: IFFALSE 27622
// exit ;
27620: GO 28571
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27622: LD_ADDR_VAR 0 5
27626: PUSH
27627: LD_INT 4
27629: PUSH
27630: LD_INT 5
27632: PUSH
27633: LD_INT 9
27635: PUSH
27636: LD_INT 10
27638: PUSH
27639: LD_INT 6
27641: PUSH
27642: LD_INT 7
27644: PUSH
27645: LD_INT 11
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 27
27659: PUSH
27660: LD_INT 28
27662: PUSH
27663: LD_INT 26
27665: PUSH
27666: LD_INT 30
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 43
27677: PUSH
27678: LD_INT 44
27680: PUSH
27681: LD_INT 46
27683: PUSH
27684: LD_INT 45
27686: PUSH
27687: LD_INT 47
27689: PUSH
27690: LD_INT 49
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: PUSH
27706: LD_VAR 0 12
27710: ARRAY
27711: ST_TO_ADDR
// for i in list do
27712: LD_ADDR_VAR 0 8
27716: PUSH
27717: LD_VAR 0 5
27721: PUSH
27722: FOR_IN
27723: IFFALSE 27756
// if not i in fac_list then
27725: LD_VAR 0 8
27729: PUSH
27730: LD_VAR 0 17
27734: IN
27735: NOT
27736: IFFALSE 27754
// list := list diff i ;
27738: LD_ADDR_VAR 0 5
27742: PUSH
27743: LD_VAR 0 5
27747: PUSH
27748: LD_VAR 0 8
27752: DIFF
27753: ST_TO_ADDR
27754: GO 27722
27756: POP
27757: POP
// if not list then
27758: LD_VAR 0 5
27762: NOT
27763: IFFALSE 27767
// exit ;
27765: GO 28571
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27767: LD_VAR 0 12
27771: PUSH
27772: LD_INT 3
27774: EQUAL
27775: PUSH
27776: LD_INT 49
27778: PUSH
27779: LD_VAR 0 5
27783: IN
27784: AND
27785: PUSH
27786: LD_INT 31
27788: PPUSH
27789: LD_VAR 0 16
27793: PPUSH
27794: CALL_OW 321
27798: PUSH
27799: LD_INT 2
27801: EQUAL
27802: AND
27803: IFFALSE 27863
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27805: LD_INT 22
27807: PUSH
27808: LD_VAR 0 16
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 35
27819: PUSH
27820: LD_INT 49
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 91
27829: PUSH
27830: LD_VAR 0 1
27834: PUSH
27835: LD_INT 10
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: PPUSH
27848: CALL_OW 69
27852: NOT
27853: IFFALSE 27863
// weapon := ru_time_lapser ;
27855: LD_ADDR_VAR 0 18
27859: PUSH
27860: LD_INT 49
27862: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27863: LD_VAR 0 12
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: IN
27878: PUSH
27879: LD_INT 11
27881: PUSH
27882: LD_VAR 0 5
27886: IN
27887: PUSH
27888: LD_INT 30
27890: PUSH
27891: LD_VAR 0 5
27895: IN
27896: OR
27897: AND
27898: PUSH
27899: LD_INT 6
27901: PPUSH
27902: LD_VAR 0 16
27906: PPUSH
27907: CALL_OW 321
27911: PUSH
27912: LD_INT 2
27914: EQUAL
27915: AND
27916: IFFALSE 28081
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27918: LD_INT 22
27920: PUSH
27921: LD_VAR 0 16
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: LD_INT 35
27935: PUSH
27936: LD_INT 11
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 35
27945: PUSH
27946: LD_INT 30
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 91
27960: PUSH
27961: LD_VAR 0 1
27965: PUSH
27966: LD_INT 18
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: LIST
27978: PPUSH
27979: CALL_OW 69
27983: NOT
27984: PUSH
27985: LD_INT 22
27987: PUSH
27988: LD_VAR 0 16
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 2
27999: PUSH
28000: LD_INT 30
28002: PUSH
28003: LD_INT 32
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 30
28012: PUSH
28013: LD_INT 33
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 91
28027: PUSH
28028: LD_VAR 0 1
28032: PUSH
28033: LD_INT 12
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: PPUSH
28049: CALL_OW 69
28053: PUSH
28054: LD_INT 2
28056: GREATER
28057: AND
28058: IFFALSE 28081
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28060: LD_ADDR_VAR 0 18
28064: PUSH
28065: LD_INT 11
28067: PUSH
28068: LD_INT 30
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_VAR 0 12
28079: ARRAY
28080: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28081: LD_VAR 0 18
28085: NOT
28086: PUSH
28087: LD_INT 40
28089: PPUSH
28090: LD_VAR 0 16
28094: PPUSH
28095: CALL_OW 321
28099: PUSH
28100: LD_INT 2
28102: EQUAL
28103: AND
28104: PUSH
28105: LD_INT 7
28107: PUSH
28108: LD_VAR 0 5
28112: IN
28113: PUSH
28114: LD_INT 28
28116: PUSH
28117: LD_VAR 0 5
28121: IN
28122: OR
28123: PUSH
28124: LD_INT 45
28126: PUSH
28127: LD_VAR 0 5
28131: IN
28132: OR
28133: AND
28134: IFFALSE 28388
// begin hex := GetHexInfo ( x , y ) ;
28136: LD_ADDR_VAR 0 4
28140: PUSH
28141: LD_VAR 0 10
28145: PPUSH
28146: LD_VAR 0 11
28150: PPUSH
28151: CALL_OW 546
28155: ST_TO_ADDR
// if hex [ 1 ] then
28156: LD_VAR 0 4
28160: PUSH
28161: LD_INT 1
28163: ARRAY
28164: IFFALSE 28168
// exit ;
28166: GO 28571
// height := hex [ 2 ] ;
28168: LD_ADDR_VAR 0 15
28172: PUSH
28173: LD_VAR 0 4
28177: PUSH
28178: LD_INT 2
28180: ARRAY
28181: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28182: LD_ADDR_VAR 0 14
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: LD_INT 3
28195: PUSH
28196: LD_INT 5
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: ST_TO_ADDR
// for i in tmp do
28205: LD_ADDR_VAR 0 8
28209: PUSH
28210: LD_VAR 0 14
28214: PUSH
28215: FOR_IN
28216: IFFALSE 28386
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28218: LD_ADDR_VAR 0 9
28222: PUSH
28223: LD_VAR 0 10
28227: PPUSH
28228: LD_VAR 0 8
28232: PPUSH
28233: LD_INT 5
28235: PPUSH
28236: CALL_OW 272
28240: PUSH
28241: LD_VAR 0 11
28245: PPUSH
28246: LD_VAR 0 8
28250: PPUSH
28251: LD_INT 5
28253: PPUSH
28254: CALL_OW 273
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28263: LD_VAR 0 9
28267: PUSH
28268: LD_INT 1
28270: ARRAY
28271: PPUSH
28272: LD_VAR 0 9
28276: PUSH
28277: LD_INT 2
28279: ARRAY
28280: PPUSH
28281: CALL_OW 488
28285: IFFALSE 28384
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28287: LD_ADDR_VAR 0 4
28291: PUSH
28292: LD_VAR 0 9
28296: PUSH
28297: LD_INT 1
28299: ARRAY
28300: PPUSH
28301: LD_VAR 0 9
28305: PUSH
28306: LD_INT 2
28308: ARRAY
28309: PPUSH
28310: CALL_OW 546
28314: ST_TO_ADDR
// if hex [ 1 ] then
28315: LD_VAR 0 4
28319: PUSH
28320: LD_INT 1
28322: ARRAY
28323: IFFALSE 28327
// continue ;
28325: GO 28215
// h := hex [ 2 ] ;
28327: LD_ADDR_VAR 0 13
28331: PUSH
28332: LD_VAR 0 4
28336: PUSH
28337: LD_INT 2
28339: ARRAY
28340: ST_TO_ADDR
// if h + 7 < height then
28341: LD_VAR 0 13
28345: PUSH
28346: LD_INT 7
28348: PLUS
28349: PUSH
28350: LD_VAR 0 15
28354: LESS
28355: IFFALSE 28384
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28357: LD_ADDR_VAR 0 18
28361: PUSH
28362: LD_INT 7
28364: PUSH
28365: LD_INT 28
28367: PUSH
28368: LD_INT 45
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: PUSH
28376: LD_VAR 0 12
28380: ARRAY
28381: ST_TO_ADDR
// break ;
28382: GO 28386
// end ; end ; end ;
28384: GO 28215
28386: POP
28387: POP
// end ; if not weapon then
28388: LD_VAR 0 18
28392: NOT
28393: IFFALSE 28453
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28395: LD_ADDR_VAR 0 5
28399: PUSH
28400: LD_VAR 0 5
28404: PUSH
28405: LD_INT 11
28407: PUSH
28408: LD_INT 30
28410: PUSH
28411: LD_INT 49
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: LIST
28418: DIFF
28419: ST_TO_ADDR
// if not list then
28420: LD_VAR 0 5
28424: NOT
28425: IFFALSE 28429
// exit ;
28427: GO 28571
// weapon := list [ rand ( 1 , list ) ] ;
28429: LD_ADDR_VAR 0 18
28433: PUSH
28434: LD_VAR 0 5
28438: PUSH
28439: LD_INT 1
28441: PPUSH
28442: LD_VAR 0 5
28446: PPUSH
28447: CALL_OW 12
28451: ARRAY
28452: ST_TO_ADDR
// end ; if weapon then
28453: LD_VAR 0 18
28457: IFFALSE 28571
// begin tmp := CostOfWeapon ( weapon ) ;
28459: LD_ADDR_VAR 0 14
28463: PUSH
28464: LD_VAR 0 18
28468: PPUSH
28469: CALL_OW 451
28473: ST_TO_ADDR
// j := GetBase ( tower ) ;
28474: LD_ADDR_VAR 0 9
28478: PUSH
28479: LD_VAR 0 1
28483: PPUSH
28484: CALL_OW 274
28488: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28489: LD_VAR 0 9
28493: PPUSH
28494: LD_INT 1
28496: PPUSH
28497: CALL_OW 275
28501: PUSH
28502: LD_VAR 0 14
28506: PUSH
28507: LD_INT 1
28509: ARRAY
28510: GREATEREQUAL
28511: PUSH
28512: LD_VAR 0 9
28516: PPUSH
28517: LD_INT 2
28519: PPUSH
28520: CALL_OW 275
28524: PUSH
28525: LD_VAR 0 14
28529: PUSH
28530: LD_INT 2
28532: ARRAY
28533: GREATEREQUAL
28534: AND
28535: PUSH
28536: LD_VAR 0 9
28540: PPUSH
28541: LD_INT 3
28543: PPUSH
28544: CALL_OW 275
28548: PUSH
28549: LD_VAR 0 14
28553: PUSH
28554: LD_INT 3
28556: ARRAY
28557: GREATEREQUAL
28558: AND
28559: IFFALSE 28571
// result := weapon ;
28561: LD_ADDR_VAR 0 3
28565: PUSH
28566: LD_VAR 0 18
28570: ST_TO_ADDR
// end ; end ;
28571: LD_VAR 0 3
28575: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28576: LD_INT 0
28578: PPUSH
28579: PPUSH
// result := true ;
28580: LD_ADDR_VAR 0 3
28584: PUSH
28585: LD_INT 1
28587: ST_TO_ADDR
// if array1 = array2 then
28588: LD_VAR 0 1
28592: PUSH
28593: LD_VAR 0 2
28597: EQUAL
28598: IFFALSE 28658
// begin for i = 1 to array1 do
28600: LD_ADDR_VAR 0 4
28604: PUSH
28605: DOUBLE
28606: LD_INT 1
28608: DEC
28609: ST_TO_ADDR
28610: LD_VAR 0 1
28614: PUSH
28615: FOR_TO
28616: IFFALSE 28654
// if array1 [ i ] <> array2 [ i ] then
28618: LD_VAR 0 1
28622: PUSH
28623: LD_VAR 0 4
28627: ARRAY
28628: PUSH
28629: LD_VAR 0 2
28633: PUSH
28634: LD_VAR 0 4
28638: ARRAY
28639: NONEQUAL
28640: IFFALSE 28652
// begin result := false ;
28642: LD_ADDR_VAR 0 3
28646: PUSH
28647: LD_INT 0
28649: ST_TO_ADDR
// break ;
28650: GO 28654
// end ;
28652: GO 28615
28654: POP
28655: POP
// end else
28656: GO 28666
// result := false ;
28658: LD_ADDR_VAR 0 3
28662: PUSH
28663: LD_INT 0
28665: ST_TO_ADDR
// end ;
28666: LD_VAR 0 3
28670: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28671: LD_INT 0
28673: PPUSH
28674: PPUSH
28675: PPUSH
// pom := GetBase ( fac ) ;
28676: LD_ADDR_VAR 0 5
28680: PUSH
28681: LD_VAR 0 1
28685: PPUSH
28686: CALL_OW 274
28690: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28691: LD_ADDR_VAR 0 4
28695: PUSH
28696: LD_VAR 0 2
28700: PUSH
28701: LD_INT 1
28703: ARRAY
28704: PPUSH
28705: LD_VAR 0 2
28709: PUSH
28710: LD_INT 2
28712: ARRAY
28713: PPUSH
28714: LD_VAR 0 2
28718: PUSH
28719: LD_INT 3
28721: ARRAY
28722: PPUSH
28723: LD_VAR 0 2
28727: PUSH
28728: LD_INT 4
28730: ARRAY
28731: PPUSH
28732: CALL_OW 449
28736: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28737: LD_ADDR_VAR 0 3
28741: PUSH
28742: LD_VAR 0 5
28746: PPUSH
28747: LD_INT 1
28749: PPUSH
28750: CALL_OW 275
28754: PUSH
28755: LD_VAR 0 4
28759: PUSH
28760: LD_INT 1
28762: ARRAY
28763: GREATEREQUAL
28764: PUSH
28765: LD_VAR 0 5
28769: PPUSH
28770: LD_INT 2
28772: PPUSH
28773: CALL_OW 275
28777: PUSH
28778: LD_VAR 0 4
28782: PUSH
28783: LD_INT 2
28785: ARRAY
28786: GREATEREQUAL
28787: AND
28788: PUSH
28789: LD_VAR 0 5
28793: PPUSH
28794: LD_INT 3
28796: PPUSH
28797: CALL_OW 275
28801: PUSH
28802: LD_VAR 0 4
28806: PUSH
28807: LD_INT 3
28809: ARRAY
28810: GREATEREQUAL
28811: AND
28812: ST_TO_ADDR
// end ;
28813: LD_VAR 0 3
28817: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28818: LD_INT 0
28820: PPUSH
28821: PPUSH
28822: PPUSH
28823: PPUSH
// pom := GetBase ( building ) ;
28824: LD_ADDR_VAR 0 3
28828: PUSH
28829: LD_VAR 0 1
28833: PPUSH
28834: CALL_OW 274
28838: ST_TO_ADDR
// if not pom then
28839: LD_VAR 0 3
28843: NOT
28844: IFFALSE 28848
// exit ;
28846: GO 29018
// btype := GetBType ( building ) ;
28848: LD_ADDR_VAR 0 5
28852: PUSH
28853: LD_VAR 0 1
28857: PPUSH
28858: CALL_OW 266
28862: ST_TO_ADDR
// if btype = b_armoury then
28863: LD_VAR 0 5
28867: PUSH
28868: LD_INT 4
28870: EQUAL
28871: IFFALSE 28881
// btype := b_barracks ;
28873: LD_ADDR_VAR 0 5
28877: PUSH
28878: LD_INT 5
28880: ST_TO_ADDR
// if btype = b_depot then
28881: LD_VAR 0 5
28885: PUSH
28886: LD_INT 0
28888: EQUAL
28889: IFFALSE 28899
// btype := b_warehouse ;
28891: LD_ADDR_VAR 0 5
28895: PUSH
28896: LD_INT 1
28898: ST_TO_ADDR
// if btype = b_workshop then
28899: LD_VAR 0 5
28903: PUSH
28904: LD_INT 2
28906: EQUAL
28907: IFFALSE 28917
// btype := b_factory ;
28909: LD_ADDR_VAR 0 5
28913: PUSH
28914: LD_INT 3
28916: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28917: LD_ADDR_VAR 0 4
28921: PUSH
28922: LD_VAR 0 5
28926: PPUSH
28927: LD_VAR 0 1
28931: PPUSH
28932: CALL_OW 248
28936: PPUSH
28937: CALL_OW 450
28941: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28942: LD_ADDR_VAR 0 2
28946: PUSH
28947: LD_VAR 0 3
28951: PPUSH
28952: LD_INT 1
28954: PPUSH
28955: CALL_OW 275
28959: PUSH
28960: LD_VAR 0 4
28964: PUSH
28965: LD_INT 1
28967: ARRAY
28968: GREATEREQUAL
28969: PUSH
28970: LD_VAR 0 3
28974: PPUSH
28975: LD_INT 2
28977: PPUSH
28978: CALL_OW 275
28982: PUSH
28983: LD_VAR 0 4
28987: PUSH
28988: LD_INT 2
28990: ARRAY
28991: GREATEREQUAL
28992: AND
28993: PUSH
28994: LD_VAR 0 3
28998: PPUSH
28999: LD_INT 3
29001: PPUSH
29002: CALL_OW 275
29006: PUSH
29007: LD_VAR 0 4
29011: PUSH
29012: LD_INT 3
29014: ARRAY
29015: GREATEREQUAL
29016: AND
29017: ST_TO_ADDR
// end ;
29018: LD_VAR 0 2
29022: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29023: LD_INT 0
29025: PPUSH
29026: PPUSH
29027: PPUSH
// pom := GetBase ( building ) ;
29028: LD_ADDR_VAR 0 4
29032: PUSH
29033: LD_VAR 0 1
29037: PPUSH
29038: CALL_OW 274
29042: ST_TO_ADDR
// if not pom then
29043: LD_VAR 0 4
29047: NOT
29048: IFFALSE 29052
// exit ;
29050: GO 29153
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29052: LD_ADDR_VAR 0 5
29056: PUSH
29057: LD_VAR 0 2
29061: PPUSH
29062: LD_VAR 0 1
29066: PPUSH
29067: CALL_OW 248
29071: PPUSH
29072: CALL_OW 450
29076: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29077: LD_ADDR_VAR 0 3
29081: PUSH
29082: LD_VAR 0 4
29086: PPUSH
29087: LD_INT 1
29089: PPUSH
29090: CALL_OW 275
29094: PUSH
29095: LD_VAR 0 5
29099: PUSH
29100: LD_INT 1
29102: ARRAY
29103: GREATEREQUAL
29104: PUSH
29105: LD_VAR 0 4
29109: PPUSH
29110: LD_INT 2
29112: PPUSH
29113: CALL_OW 275
29117: PUSH
29118: LD_VAR 0 5
29122: PUSH
29123: LD_INT 2
29125: ARRAY
29126: GREATEREQUAL
29127: AND
29128: PUSH
29129: LD_VAR 0 4
29133: PPUSH
29134: LD_INT 3
29136: PPUSH
29137: CALL_OW 275
29141: PUSH
29142: LD_VAR 0 5
29146: PUSH
29147: LD_INT 3
29149: ARRAY
29150: GREATEREQUAL
29151: AND
29152: ST_TO_ADDR
// end ;
29153: LD_VAR 0 3
29157: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
29158: LD_INT 0
29160: PPUSH
29161: PPUSH
29162: PPUSH
29163: PPUSH
29164: PPUSH
29165: PPUSH
29166: PPUSH
29167: PPUSH
29168: PPUSH
29169: PPUSH
// result := false ;
29170: LD_ADDR_VAR 0 6
29174: PUSH
29175: LD_INT 0
29177: ST_TO_ADDR
// if not base or not btype or not x or not y then
29178: LD_VAR 0 1
29182: NOT
29183: PUSH
29184: LD_VAR 0 2
29188: NOT
29189: OR
29190: PUSH
29191: LD_VAR 0 3
29195: NOT
29196: OR
29197: PUSH
29198: LD_VAR 0 4
29202: NOT
29203: OR
29204: IFFALSE 29208
// exit ;
29206: GO 29817
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
29208: LD_ADDR_VAR 0 12
29212: PUSH
29213: LD_VAR 0 2
29217: PPUSH
29218: LD_VAR 0 3
29222: PPUSH
29223: LD_VAR 0 4
29227: PPUSH
29228: LD_VAR 0 5
29232: PPUSH
29233: LD_VAR 0 1
29237: PUSH
29238: LD_INT 1
29240: ARRAY
29241: PPUSH
29242: CALL_OW 248
29246: PPUSH
29247: LD_INT 0
29249: PPUSH
29250: CALL 30654 0 6
29254: ST_TO_ADDR
// if not hexes then
29255: LD_VAR 0 12
29259: NOT
29260: IFFALSE 29264
// exit ;
29262: GO 29817
// for i = 1 to hexes do
29264: LD_ADDR_VAR 0 7
29268: PUSH
29269: DOUBLE
29270: LD_INT 1
29272: DEC
29273: ST_TO_ADDR
29274: LD_VAR 0 12
29278: PUSH
29279: FOR_TO
29280: IFFALSE 29815
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29282: LD_ADDR_VAR 0 11
29286: PUSH
29287: LD_VAR 0 12
29291: PUSH
29292: LD_VAR 0 7
29296: ARRAY
29297: PUSH
29298: LD_INT 1
29300: ARRAY
29301: PPUSH
29302: LD_VAR 0 12
29306: PUSH
29307: LD_VAR 0 7
29311: ARRAY
29312: PUSH
29313: LD_INT 2
29315: ARRAY
29316: PPUSH
29317: CALL_OW 428
29321: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29322: LD_VAR 0 12
29326: PUSH
29327: LD_VAR 0 7
29331: ARRAY
29332: PUSH
29333: LD_INT 1
29335: ARRAY
29336: PPUSH
29337: LD_VAR 0 12
29341: PUSH
29342: LD_VAR 0 7
29346: ARRAY
29347: PUSH
29348: LD_INT 2
29350: ARRAY
29351: PPUSH
29352: CALL_OW 351
29356: PUSH
29357: LD_VAR 0 12
29361: PUSH
29362: LD_VAR 0 7
29366: ARRAY
29367: PUSH
29368: LD_INT 1
29370: ARRAY
29371: PPUSH
29372: LD_VAR 0 12
29376: PUSH
29377: LD_VAR 0 7
29381: ARRAY
29382: PUSH
29383: LD_INT 2
29385: ARRAY
29386: PPUSH
29387: CALL_OW 488
29391: NOT
29392: OR
29393: PUSH
29394: LD_VAR 0 11
29398: PPUSH
29399: CALL_OW 247
29403: PUSH
29404: LD_INT 3
29406: EQUAL
29407: OR
29408: IFFALSE 29414
// exit ;
29410: POP
29411: POP
29412: GO 29817
// if not tmp or not tmp in base then
29414: LD_VAR 0 11
29418: NOT
29419: PUSH
29420: LD_VAR 0 11
29424: PUSH
29425: LD_VAR 0 1
29429: IN
29430: NOT
29431: OR
29432: IFFALSE 29436
// continue ;
29434: GO 29279
// result := true ;
29436: LD_ADDR_VAR 0 6
29440: PUSH
29441: LD_INT 1
29443: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29444: LD_ADDR_VAR 0 15
29448: PUSH
29449: LD_VAR 0 1
29453: PPUSH
29454: LD_INT 22
29456: PUSH
29457: LD_VAR 0 11
29461: PPUSH
29462: CALL_OW 255
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 2
29473: PUSH
29474: LD_INT 30
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 30
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: LIST
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PPUSH
29503: CALL_OW 72
29507: ST_TO_ADDR
// if dep then
29508: LD_VAR 0 15
29512: IFFALSE 29648
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29514: LD_ADDR_VAR 0 14
29518: PUSH
29519: LD_VAR 0 15
29523: PUSH
29524: LD_INT 1
29526: ARRAY
29527: PPUSH
29528: CALL_OW 250
29532: PPUSH
29533: LD_VAR 0 15
29537: PUSH
29538: LD_INT 1
29540: ARRAY
29541: PPUSH
29542: CALL_OW 254
29546: PPUSH
29547: LD_INT 5
29549: PPUSH
29550: CALL_OW 272
29554: PUSH
29555: LD_VAR 0 15
29559: PUSH
29560: LD_INT 1
29562: ARRAY
29563: PPUSH
29564: CALL_OW 251
29568: PPUSH
29569: LD_VAR 0 15
29573: PUSH
29574: LD_INT 1
29576: ARRAY
29577: PPUSH
29578: CALL_OW 254
29582: PPUSH
29583: LD_INT 5
29585: PPUSH
29586: CALL_OW 273
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29595: LD_VAR 0 14
29599: PUSH
29600: LD_INT 1
29602: ARRAY
29603: PPUSH
29604: LD_VAR 0 14
29608: PUSH
29609: LD_INT 2
29611: ARRAY
29612: PPUSH
29613: CALL_OW 488
29617: IFFALSE 29648
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29619: LD_VAR 0 11
29623: PPUSH
29624: LD_VAR 0 14
29628: PUSH
29629: LD_INT 1
29631: ARRAY
29632: PPUSH
29633: LD_VAR 0 14
29637: PUSH
29638: LD_INT 2
29640: ARRAY
29641: PPUSH
29642: CALL_OW 111
// continue ;
29646: GO 29279
// end ; end ; r := GetDir ( tmp ) ;
29648: LD_ADDR_VAR 0 13
29652: PUSH
29653: LD_VAR 0 11
29657: PPUSH
29658: CALL_OW 254
29662: ST_TO_ADDR
// if r = 5 then
29663: LD_VAR 0 13
29667: PUSH
29668: LD_INT 5
29670: EQUAL
29671: IFFALSE 29681
// r := 0 ;
29673: LD_ADDR_VAR 0 13
29677: PUSH
29678: LD_INT 0
29680: ST_TO_ADDR
// for j = r to 5 do
29681: LD_ADDR_VAR 0 8
29685: PUSH
29686: DOUBLE
29687: LD_VAR 0 13
29691: DEC
29692: ST_TO_ADDR
29693: LD_INT 5
29695: PUSH
29696: FOR_TO
29697: IFFALSE 29811
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29699: LD_ADDR_VAR 0 9
29703: PUSH
29704: LD_VAR 0 11
29708: PPUSH
29709: CALL_OW 250
29713: PPUSH
29714: LD_VAR 0 8
29718: PPUSH
29719: LD_INT 2
29721: PPUSH
29722: CALL_OW 272
29726: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29727: LD_ADDR_VAR 0 10
29731: PUSH
29732: LD_VAR 0 11
29736: PPUSH
29737: CALL_OW 251
29741: PPUSH
29742: LD_VAR 0 8
29746: PPUSH
29747: LD_INT 2
29749: PPUSH
29750: CALL_OW 273
29754: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29755: LD_VAR 0 9
29759: PPUSH
29760: LD_VAR 0 10
29764: PPUSH
29765: CALL_OW 488
29769: PUSH
29770: LD_VAR 0 9
29774: PPUSH
29775: LD_VAR 0 10
29779: PPUSH
29780: CALL_OW 428
29784: NOT
29785: AND
29786: IFFALSE 29809
// begin ComMoveXY ( tmp , _x , _y ) ;
29788: LD_VAR 0 11
29792: PPUSH
29793: LD_VAR 0 9
29797: PPUSH
29798: LD_VAR 0 10
29802: PPUSH
29803: CALL_OW 111
// break ;
29807: GO 29811
// end ; end ;
29809: GO 29696
29811: POP
29812: POP
// end ;
29813: GO 29279
29815: POP
29816: POP
// end ;
29817: LD_VAR 0 6
29821: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
29822: LD_INT 0
29824: PPUSH
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
// result := false ;
29834: LD_ADDR_VAR 0 6
29838: PUSH
29839: LD_INT 0
29841: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29842: LD_VAR 0 1
29846: NOT
29847: PUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 266
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: IN
29868: NOT
29869: OR
29870: PUSH
29871: LD_VAR 0 2
29875: NOT
29876: OR
29877: PUSH
29878: LD_VAR 0 5
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: LD_INT 3
29894: PUSH
29895: LD_INT 4
29897: PUSH
29898: LD_INT 5
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: IN
29909: NOT
29910: OR
29911: PUSH
29912: LD_VAR 0 3
29916: PPUSH
29917: LD_VAR 0 4
29921: PPUSH
29922: CALL_OW 488
29926: NOT
29927: OR
29928: IFFALSE 29932
// exit ;
29930: GO 30649
// pom := GetBase ( depot ) ;
29932: LD_ADDR_VAR 0 10
29936: PUSH
29937: LD_VAR 0 1
29941: PPUSH
29942: CALL_OW 274
29946: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29947: LD_ADDR_VAR 0 11
29951: PUSH
29952: LD_VAR 0 2
29956: PPUSH
29957: LD_VAR 0 1
29961: PPUSH
29962: CALL_OW 248
29966: PPUSH
29967: CALL_OW 450
29971: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29972: LD_VAR 0 10
29976: PPUSH
29977: LD_INT 1
29979: PPUSH
29980: CALL_OW 275
29984: PUSH
29985: LD_VAR 0 11
29989: PUSH
29990: LD_INT 1
29992: ARRAY
29993: GREATEREQUAL
29994: PUSH
29995: LD_VAR 0 10
29999: PPUSH
30000: LD_INT 2
30002: PPUSH
30003: CALL_OW 275
30007: PUSH
30008: LD_VAR 0 11
30012: PUSH
30013: LD_INT 2
30015: ARRAY
30016: GREATEREQUAL
30017: AND
30018: PUSH
30019: LD_VAR 0 10
30023: PPUSH
30024: LD_INT 3
30026: PPUSH
30027: CALL_OW 275
30031: PUSH
30032: LD_VAR 0 11
30036: PUSH
30037: LD_INT 3
30039: ARRAY
30040: GREATEREQUAL
30041: AND
30042: NOT
30043: IFFALSE 30047
// exit ;
30045: GO 30649
// if GetBType ( depot ) = b_depot then
30047: LD_VAR 0 1
30051: PPUSH
30052: CALL_OW 266
30056: PUSH
30057: LD_INT 0
30059: EQUAL
30060: IFFALSE 30072
// dist := 28 else
30062: LD_ADDR_VAR 0 14
30066: PUSH
30067: LD_INT 28
30069: ST_TO_ADDR
30070: GO 30080
// dist := 36 ;
30072: LD_ADDR_VAR 0 14
30076: PUSH
30077: LD_INT 36
30079: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30080: LD_VAR 0 1
30084: PPUSH
30085: LD_VAR 0 3
30089: PPUSH
30090: LD_VAR 0 4
30094: PPUSH
30095: CALL_OW 297
30099: PUSH
30100: LD_VAR 0 14
30104: GREATER
30105: IFFALSE 30109
// exit ;
30107: GO 30649
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30109: LD_ADDR_VAR 0 12
30113: PUSH
30114: LD_VAR 0 2
30118: PPUSH
30119: LD_VAR 0 3
30123: PPUSH
30124: LD_VAR 0 4
30128: PPUSH
30129: LD_VAR 0 5
30133: PPUSH
30134: LD_VAR 0 1
30138: PPUSH
30139: CALL_OW 248
30143: PPUSH
30144: LD_INT 0
30146: PPUSH
30147: CALL 30654 0 6
30151: ST_TO_ADDR
// if not hexes then
30152: LD_VAR 0 12
30156: NOT
30157: IFFALSE 30161
// exit ;
30159: GO 30649
// hex := GetHexInfo ( x , y ) ;
30161: LD_ADDR_VAR 0 15
30165: PUSH
30166: LD_VAR 0 3
30170: PPUSH
30171: LD_VAR 0 4
30175: PPUSH
30176: CALL_OW 546
30180: ST_TO_ADDR
// if hex [ 1 ] then
30181: LD_VAR 0 15
30185: PUSH
30186: LD_INT 1
30188: ARRAY
30189: IFFALSE 30193
// exit ;
30191: GO 30649
// height := hex [ 2 ] ;
30193: LD_ADDR_VAR 0 13
30197: PUSH
30198: LD_VAR 0 15
30202: PUSH
30203: LD_INT 2
30205: ARRAY
30206: ST_TO_ADDR
// for i = 1 to hexes do
30207: LD_ADDR_VAR 0 7
30211: PUSH
30212: DOUBLE
30213: LD_INT 1
30215: DEC
30216: ST_TO_ADDR
30217: LD_VAR 0 12
30221: PUSH
30222: FOR_TO
30223: IFFALSE 30553
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30225: LD_VAR 0 12
30229: PUSH
30230: LD_VAR 0 7
30234: ARRAY
30235: PUSH
30236: LD_INT 1
30238: ARRAY
30239: PPUSH
30240: LD_VAR 0 12
30244: PUSH
30245: LD_VAR 0 7
30249: ARRAY
30250: PUSH
30251: LD_INT 2
30253: ARRAY
30254: PPUSH
30255: CALL_OW 488
30259: NOT
30260: PUSH
30261: LD_VAR 0 12
30265: PUSH
30266: LD_VAR 0 7
30270: ARRAY
30271: PUSH
30272: LD_INT 1
30274: ARRAY
30275: PPUSH
30276: LD_VAR 0 12
30280: PUSH
30281: LD_VAR 0 7
30285: ARRAY
30286: PUSH
30287: LD_INT 2
30289: ARRAY
30290: PPUSH
30291: CALL_OW 428
30295: PUSH
30296: LD_INT 0
30298: GREATER
30299: OR
30300: PUSH
30301: LD_VAR 0 12
30305: PUSH
30306: LD_VAR 0 7
30310: ARRAY
30311: PUSH
30312: LD_INT 1
30314: ARRAY
30315: PPUSH
30316: LD_VAR 0 12
30320: PUSH
30321: LD_VAR 0 7
30325: ARRAY
30326: PUSH
30327: LD_INT 2
30329: ARRAY
30330: PPUSH
30331: CALL_OW 351
30335: OR
30336: IFFALSE 30342
// exit ;
30338: POP
30339: POP
30340: GO 30649
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30342: LD_ADDR_VAR 0 8
30346: PUSH
30347: LD_VAR 0 12
30351: PUSH
30352: LD_VAR 0 7
30356: ARRAY
30357: PUSH
30358: LD_INT 1
30360: ARRAY
30361: PPUSH
30362: LD_VAR 0 12
30366: PUSH
30367: LD_VAR 0 7
30371: ARRAY
30372: PUSH
30373: LD_INT 2
30375: ARRAY
30376: PPUSH
30377: CALL_OW 546
30381: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30382: LD_VAR 0 8
30386: PUSH
30387: LD_INT 1
30389: ARRAY
30390: PUSH
30391: LD_VAR 0 8
30395: PUSH
30396: LD_INT 2
30398: ARRAY
30399: PUSH
30400: LD_VAR 0 13
30404: PUSH
30405: LD_INT 2
30407: PLUS
30408: GREATER
30409: OR
30410: PUSH
30411: LD_VAR 0 8
30415: PUSH
30416: LD_INT 2
30418: ARRAY
30419: PUSH
30420: LD_VAR 0 13
30424: PUSH
30425: LD_INT 2
30427: MINUS
30428: LESS
30429: OR
30430: PUSH
30431: LD_VAR 0 8
30435: PUSH
30436: LD_INT 3
30438: ARRAY
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: LD_INT 8
30445: PUSH
30446: LD_INT 9
30448: PUSH
30449: LD_INT 10
30451: PUSH
30452: LD_INT 11
30454: PUSH
30455: LD_INT 12
30457: PUSH
30458: LD_INT 13
30460: PUSH
30461: LD_INT 16
30463: PUSH
30464: LD_INT 17
30466: PUSH
30467: LD_INT 18
30469: PUSH
30470: LD_INT 19
30472: PUSH
30473: LD_INT 20
30475: PUSH
30476: LD_INT 21
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: IN
30494: NOT
30495: OR
30496: PUSH
30497: LD_VAR 0 8
30501: PUSH
30502: LD_INT 5
30504: ARRAY
30505: NOT
30506: OR
30507: PUSH
30508: LD_VAR 0 8
30512: PUSH
30513: LD_INT 6
30515: ARRAY
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: LD_INT 7
30525: PUSH
30526: LD_INT 9
30528: PUSH
30529: LD_INT 10
30531: PUSH
30532: LD_INT 11
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: IN
30543: NOT
30544: OR
30545: IFFALSE 30551
// exit ;
30547: POP
30548: POP
30549: GO 30649
// end ;
30551: GO 30222
30553: POP
30554: POP
// side := GetSide ( depot ) ;
30555: LD_ADDR_VAR 0 9
30559: PUSH
30560: LD_VAR 0 1
30564: PPUSH
30565: CALL_OW 255
30569: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30570: LD_VAR 0 9
30574: PPUSH
30575: LD_VAR 0 3
30579: PPUSH
30580: LD_VAR 0 4
30584: PPUSH
30585: LD_INT 20
30587: PPUSH
30588: CALL 23303 0 4
30592: PUSH
30593: LD_INT 4
30595: ARRAY
30596: IFFALSE 30600
// exit ;
30598: GO 30649
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30600: LD_VAR 0 2
30604: PUSH
30605: LD_INT 29
30607: PUSH
30608: LD_INT 30
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: IN
30615: PUSH
30616: LD_VAR 0 3
30620: PPUSH
30621: LD_VAR 0 4
30625: PPUSH
30626: LD_VAR 0 9
30630: PPUSH
30631: CALL_OW 440
30635: NOT
30636: AND
30637: IFFALSE 30641
// exit ;
30639: GO 30649
// result := true ;
30641: LD_ADDR_VAR 0 6
30645: PUSH
30646: LD_INT 1
30648: ST_TO_ADDR
// end ;
30649: LD_VAR 0 6
30653: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
30654: LD_INT 0
30656: PPUSH
30657: PPUSH
30658: PPUSH
30659: PPUSH
30660: PPUSH
30661: PPUSH
30662: PPUSH
30663: PPUSH
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
30679: PPUSH
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
30706: PPUSH
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
30711: PPUSH
30712: PPUSH
30713: PPUSH
// result = [ ] ;
30714: LD_ADDR_VAR 0 7
30718: PUSH
30719: EMPTY
30720: ST_TO_ADDR
// temp_list = [ ] ;
30721: LD_ADDR_VAR 0 9
30725: PUSH
30726: EMPTY
30727: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30728: LD_VAR 0 4
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: LD_INT 3
30744: PUSH
30745: LD_INT 4
30747: PUSH
30748: LD_INT 5
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: IN
30759: NOT
30760: PUSH
30761: LD_VAR 0 1
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: IN
30776: PUSH
30777: LD_VAR 0 5
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: LD_INT 2
30787: PUSH
30788: LD_INT 3
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: LIST
30795: IN
30796: NOT
30797: AND
30798: OR
30799: IFFALSE 30803
// exit ;
30801: GO 49194
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30803: LD_VAR 0 1
30807: PUSH
30808: LD_INT 6
30810: PUSH
30811: LD_INT 7
30813: PUSH
30814: LD_INT 8
30816: PUSH
30817: LD_INT 13
30819: PUSH
30820: LD_INT 12
30822: PUSH
30823: LD_INT 15
30825: PUSH
30826: LD_INT 11
30828: PUSH
30829: LD_INT 14
30831: PUSH
30832: LD_INT 10
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: IN
30846: IFFALSE 30856
// btype = b_lab ;
30848: LD_ADDR_VAR 0 1
30852: PUSH
30853: LD_INT 6
30855: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30856: LD_VAR 0 6
30860: PUSH
30861: LD_INT 0
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: IN
30875: NOT
30876: PUSH
30877: LD_VAR 0 1
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: LD_INT 3
30893: PUSH
30894: LD_INT 6
30896: PUSH
30897: LD_INT 36
30899: PUSH
30900: LD_INT 4
30902: PUSH
30903: LD_INT 5
30905: PUSH
30906: LD_INT 31
30908: PUSH
30909: LD_INT 32
30911: PUSH
30912: LD_INT 33
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: IN
30928: NOT
30929: PUSH
30930: LD_VAR 0 6
30934: PUSH
30935: LD_INT 1
30937: EQUAL
30938: AND
30939: OR
30940: PUSH
30941: LD_VAR 0 1
30945: PUSH
30946: LD_INT 2
30948: PUSH
30949: LD_INT 3
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: IN
30956: NOT
30957: PUSH
30958: LD_VAR 0 6
30962: PUSH
30963: LD_INT 2
30965: EQUAL
30966: AND
30967: OR
30968: IFFALSE 30978
// mode = 0 ;
30970: LD_ADDR_VAR 0 6
30974: PUSH
30975: LD_INT 0
30977: ST_TO_ADDR
// case mode of 0 :
30978: LD_VAR 0 6
30982: PUSH
30983: LD_INT 0
30985: DOUBLE
30986: EQUAL
30987: IFTRUE 30991
30989: GO 42444
30991: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30992: LD_ADDR_VAR 0 11
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: LD_INT 0
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: LD_INT 1
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: LD_INT 2
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: LD_INT 2
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: LD_INT 2
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: LD_INT 2
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: LD_INT 3
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: LD_INT 2
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31185: LD_ADDR_VAR 0 12
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 2
31308: NEG
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 2
31319: NEG
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 3
31342: NEG
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 3
31353: NEG
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31381: LD_ADDR_VAR 0 13
31385: PUSH
31386: LD_INT 0
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 2
31504: NEG
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 2
31516: NEG
31517: PUSH
31518: LD_INT 2
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: NEG
31529: PUSH
31530: LD_INT 3
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: LD_INT 2
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 3
31552: NEG
31553: PUSH
31554: LD_INT 3
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31580: LD_ADDR_VAR 0 14
31584: PUSH
31585: LD_INT 0
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 1
31638: NEG
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 1
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: LD_INT 2
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: LD_INT 3
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 3
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31776: LD_ADDR_VAR 0 15
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: LD_INT 1
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 1
31888: NEG
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: LD_INT 1
31914: NEG
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 3
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 3
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31969: LD_ADDR_VAR 0 16
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 1
32050: NEG
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 2
32092: NEG
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 2
32104: NEG
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 3
32126: PUSH
32127: LD_INT 3
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 3
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32162: LD_ADDR_VAR 0 17
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: LD_INT 1
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: LD_INT 1
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 1
32243: NEG
32244: PUSH
32245: LD_INT 2
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 2
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 2
32297: PUSH
32298: LD_INT 2
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: NEG
32350: PUSH
32351: LD_INT 1
32353: NEG
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: NEG
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32392: LD_ADDR_VAR 0 18
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: LD_INT 1
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: LD_INT 2
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: LD_INT 2
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: NEG
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: NEG
32580: PUSH
32581: LD_INT 1
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: LD_INT 2
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32622: LD_ADDR_VAR 0 19
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 1
32691: NEG
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 2
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 2
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 2
32757: PUSH
32758: LD_INT 2
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 2
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: LD_INT 1
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 2
32798: NEG
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: NEG
32810: PUSH
32811: LD_INT 1
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: LD_INT 2
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32852: LD_ADDR_VAR 0 20
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: LD_INT 2
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 1
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 2
33039: NEG
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: LD_INT 2
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33082: LD_ADDR_VAR 0 21
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: LD_INT 1
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: LD_INT 2
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: LD_INT 1
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 2
33217: PUSH
33218: LD_INT 2
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 1
33227: PUSH
33228: LD_INT 2
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: LD_INT 2
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 2
33269: NEG
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: LD_INT 2
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33312: LD_ADDR_VAR 0 22
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 1
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: NEG
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: NEG
33382: PUSH
33383: LD_INT 1
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: LD_INT 2
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 1
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 2
33447: PUSH
33448: LD_INT 2
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 1
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: LD_INT 2
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 1
33477: NEG
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 2
33488: NEG
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: LD_INT 2
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33542: LD_ADDR_VAR 0 23
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: LD_INT 2
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: LD_INT 2
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 2
33741: NEG
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: NEG
33754: PUSH
33755: LD_INT 3
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: LD_INT 3
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33822: LD_ADDR_VAR 0 24
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: LD_INT 2
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: LD_INT 2
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 2
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 2
34009: NEG
34010: PUSH
34011: LD_INT 1
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 2
34021: NEG
34022: PUSH
34023: LD_INT 2
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: LD_INT 2
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 3
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 3
34065: PUSH
34066: LD_INT 2
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34098: LD_ADDR_VAR 0 25
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 0
34146: PUSH
34147: LD_INT 1
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 1
34167: NEG
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: NEG
34180: PUSH
34181: LD_INT 2
34183: NEG
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 2
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: LD_INT 1
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 2
34223: PUSH
34224: LD_INT 1
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 2
34233: PUSH
34234: LD_INT 2
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 2
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 2
34285: NEG
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 2
34297: NEG
34298: PUSH
34299: LD_INT 2
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 3
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 3
34319: PUSH
34320: LD_INT 2
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 3
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34372: LD_ADDR_VAR 0 26
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 1
34441: NEG
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: LD_INT 2
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 1
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 2
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 1
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: LD_INT 2
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: NEG
34538: PUSH
34539: LD_INT 1
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 2
34548: NEG
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 2
34559: NEG
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 2
34571: NEG
34572: PUSH
34573: LD_INT 2
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: LD_INT 3
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: LD_INT 3
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34648: LD_ADDR_VAR 0 27
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: LD_INT 1
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: LD_INT 2
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: LD_INT 2
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: LD_INT 2
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 1
34813: NEG
34814: PUSH
34815: LD_INT 1
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 2
34847: NEG
34848: PUSH
34849: LD_INT 2
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: LD_INT 2
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 2
34870: NEG
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: NEG
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 3
34893: NEG
34894: PUSH
34895: LD_INT 2
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34928: LD_ADDR_VAR 0 28
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: LD_INT 2
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: LD_INT 2
35024: NEG
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: LD_INT 2
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: NEG
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 2
35127: NEG
35128: PUSH
35129: LD_INT 2
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: LD_INT 3
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 3
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 3
35163: NEG
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 3
35175: NEG
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35210: LD_ADDR_VAR 0 29
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: LD_INT 1
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: LD_INT 1
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: LD_INT 1
35283: NEG
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: NEG
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 2
35335: PUSH
35336: LD_INT 1
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: LD_INT 2
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 2
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 2
35388: NEG
35389: PUSH
35390: LD_INT 2
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 2
35400: NEG
35401: PUSH
35402: LD_INT 3
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 3
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: LD_INT 3
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 3
35454: NEG
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35489: LD_ADDR_VAR 0 30
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: LD_INT 2
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 2
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 2
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 2
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 2
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 2
35655: NEG
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 2
35666: NEG
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 3
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: LD_INT 2
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 3
35701: PUSH
35702: LD_INT 2
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 2
35711: PUSH
35712: LD_INT 3
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 2
35721: NEG
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 3
35732: NEG
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35767: LD_ADDR_VAR 0 31
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: LD_INT 2
35852: NEG
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: LD_INT 2
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: LD_INT 2
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 2
35932: NEG
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 2
35944: NEG
35945: PUSH
35946: LD_INT 2
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 2
35956: NEG
35957: PUSH
35958: LD_INT 3
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 3
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: LD_INT 3
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: LD_INT 2
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 3
36010: NEG
36011: PUSH
36012: LD_INT 2
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36045: LD_ADDR_VAR 0 32
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: LD_INT 2
36130: NEG
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: LD_INT 2
36141: NEG
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: LD_INT 1
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 2
36211: NEG
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 2
36222: NEG
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 3
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: LD_INT 2
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 3
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 2
36267: PUSH
36268: LD_INT 3
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 2
36277: NEG
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 3
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36323: LD_ADDR_VAR 0 33
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: LD_INT 1
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: LD_INT 0
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: LD_INT 1
36396: NEG
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: NEG
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 2
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 2
36478: NEG
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 2
36489: NEG
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 2
36513: NEG
36514: PUSH
36515: LD_INT 3
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 2
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 3
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: LD_INT 3
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 3
36567: NEG
36568: PUSH
36569: LD_INT 2
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36602: LD_ADDR_VAR 0 34
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 1
36660: NEG
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 2
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 2
36758: NEG
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 2
36769: NEG
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 2
36781: NEG
36782: PUSH
36783: LD_INT 2
36785: NEG
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: LD_INT 3
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 2
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 3
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: LD_INT 3
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 3
36847: NEG
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36882: LD_ADDR_VAR 0 35
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: LD_INT 1
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36994: LD_ADDR_VAR 0 36
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: LD_INT 1
37014: NEG
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: LD_INT 2
37079: NEG
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37106: LD_ADDR_VAR 0 37
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37218: LD_ADDR_VAR 0 38
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: NEG
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37330: LD_ADDR_VAR 0 39
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: LD_INT 1
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: LD_INT 1
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: NEG
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: LD_INT 2
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37442: LD_ADDR_VAR 0 40
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 1
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: NEG
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37554: LD_ADDR_VAR 0 41
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: LD_INT 2
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: LD_INT 2
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 2
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 2
37709: NEG
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: NEG
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: LD_INT 2
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: LD_INT 3
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 3
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 3
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 3
37797: PUSH
37798: LD_INT 3
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: LD_INT 3
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 3
37828: NEG
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 3
37839: NEG
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 3
37851: NEG
37852: PUSH
37853: LD_INT 2
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 3
37863: NEG
37864: PUSH
37865: LD_INT 3
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37904: LD_ADDR_VAR 0 42
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 2
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 2
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: PUSH
38030: LD_INT 2
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: LD_INT 2
38086: NEG
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 2
38094: NEG
38095: PUSH
38096: LD_INT 3
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 3
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 3
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 2
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 3
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 3
38150: PUSH
38151: LD_INT 3
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 3
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 2
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 3
38201: NEG
38202: PUSH
38203: LD_INT 2
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 3
38213: NEG
38214: PUSH
38215: LD_INT 3
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38254: LD_ADDR_VAR 0 43
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: LD_INT 1
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: NEG
38336: PUSH
38337: LD_INT 2
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: LD_INT 2
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 2
38420: NEG
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: LD_INT 3
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: LD_INT 3
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 3
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 3
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: LD_INT 3
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: NEG
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 3
38550: NEG
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 3
38561: NEG
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38602: LD_ADDR_VAR 0 44
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 1
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: LD_INT 2
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: LD_INT 2
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: NEG
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: LD_INT 3
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 3
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 3
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 3
38845: PUSH
38846: LD_INT 3
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 3
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 3
38876: NEG
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 3
38887: NEG
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 3
38899: NEG
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 3
38911: NEG
38912: PUSH
38913: LD_INT 3
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38952: LD_ADDR_VAR 0 45
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: LD_INT 2
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: NEG
39131: PUSH
39132: LD_INT 2
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: LD_INT 3
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: LD_INT 3
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: LD_INT 3
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: LD_INT 2
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 3
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 3
39198: PUSH
39199: LD_INT 3
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: LD_INT 3
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: LD_INT 3
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 3
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 3
39249: NEG
39250: PUSH
39251: LD_INT 2
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 3
39261: NEG
39262: PUSH
39263: LD_INT 3
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39302: LD_ADDR_VAR 0 46
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: LD_INT 2
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 2
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: NEG
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: LD_INT 3
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 3
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 2
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 3
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 3
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: LD_INT 3
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: LD_INT 3
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 3
39598: NEG
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 3
39609: NEG
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39650: LD_ADDR_VAR 0 47
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 1
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 2
39777: NEG
39778: PUSH
39779: LD_INT 2
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39801: LD_ADDR_VAR 0 48
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39948: LD_ADDR_VAR 0 49
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: NEG
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 2
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 2
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: LD_INT 2
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40092: LD_ADDR_VAR 0 50
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40236: LD_ADDR_VAR 0 51
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40383: LD_ADDR_VAR 0 52
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: LD_INT 2
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40534: LD_ADDR_VAR 0 53
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 2
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40764: LD_ADDR_VAR 0 54
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 2
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 2
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: NEG
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: LD_INT 2
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40994: LD_ADDR_VAR 0 55
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41224: LD_ADDR_VAR 0 56
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41454: LD_ADDR_VAR 0 57
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: LD_INT 2
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41684: LD_ADDR_VAR 0 58
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 2
41860: NEG
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41914: LD_ADDR_VAR 0 59
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42002: LD_ADDR_VAR 0 60
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42090: LD_ADDR_VAR 0 61
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 1
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42178: LD_ADDR_VAR 0 62
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42266: LD_ADDR_VAR 0 63
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42354: LD_ADDR_VAR 0 64
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
// end ; 1 :
42442: GO 48339
42444: LD_INT 1
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42452
42450: GO 45075
42452: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42453: LD_ADDR_VAR 0 11
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: LD_INT 3
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 3
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: LD_INT 2
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42497: LD_ADDR_VAR 0 12
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 3
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 3
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42538: LD_ADDR_VAR 0 13
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: LIST
42577: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42578: LD_ADDR_VAR 0 14
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: LD_INT 3
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 3
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42619: LD_ADDR_VAR 0 15
42623: PUSH
42624: LD_INT 2
42626: NEG
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: NEG
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 3
42648: NEG
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42663: LD_ADDR_VAR 0 16
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: LD_INT 3
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 3
42682: NEG
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 3
42694: NEG
42695: PUSH
42696: LD_INT 3
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42709: LD_ADDR_VAR 0 17
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 3
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 3
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42753: LD_ADDR_VAR 0 18
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 3
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42794: LD_ADDR_VAR 0 19
42798: PUSH
42799: LD_INT 3
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 3
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: LD_INT 3
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42834: LD_ADDR_VAR 0 20
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 3
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: LIST
42874: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42875: LD_ADDR_VAR 0 21
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 3
42893: NEG
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 3
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42919: LD_ADDR_VAR 0 22
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 3
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 3
42938: NEG
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 3
42950: NEG
42951: PUSH
42952: LD_INT 3
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42965: LD_ADDR_VAR 0 23
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 3
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: LD_INT 4
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 3
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: LIST
43008: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43009: LD_ADDR_VAR 0 24
43013: PUSH
43014: LD_INT 3
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 3
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 4
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43050: LD_ADDR_VAR 0 25
43054: PUSH
43055: LD_INT 3
43057: PUSH
43058: LD_INT 3
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 4
43067: PUSH
43068: LD_INT 3
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 4
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43090: LD_ADDR_VAR 0 26
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 3
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 4
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: LD_INT 3
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43131: LD_ADDR_VAR 0 27
43135: PUSH
43136: LD_INT 3
43138: NEG
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 3
43149: NEG
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 4
43160: NEG
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43175: LD_ADDR_VAR 0 28
43179: PUSH
43180: LD_INT 3
43182: NEG
43183: PUSH
43184: LD_INT 3
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 3
43194: NEG
43195: PUSH
43196: LD_INT 4
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 4
43206: NEG
43207: PUSH
43208: LD_INT 3
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43221: LD_ADDR_VAR 0 29
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 3
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: LD_INT 3
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: LD_INT 2
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 4
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 4
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 3
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: LD_INT 5
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 5
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: LD_INT 4
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 6
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 6
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 5
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43376: LD_ADDR_VAR 0 30
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 3
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 3
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 3
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 4
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 4
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 4
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 5
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 5
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 5
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 6
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 6
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43519: LD_ADDR_VAR 0 31
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: LD_INT 3
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 3
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 4
43556: PUSH
43557: LD_INT 3
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 4
43566: PUSH
43567: LD_INT 4
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 3
43576: PUSH
43577: LD_INT 4
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 5
43586: PUSH
43587: LD_INT 4
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 5
43596: PUSH
43597: LD_INT 5
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 4
43606: PUSH
43607: LD_INT 5
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 6
43616: PUSH
43617: LD_INT 5
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 6
43626: PUSH
43627: LD_INT 6
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 5
43636: PUSH
43637: LD_INT 6
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43658: LD_ADDR_VAR 0 32
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: LD_INT 3
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: LD_INT 3
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: LD_INT 4
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 4
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: LD_INT 5
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_INT 5
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: LD_INT 4
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 6
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 6
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 5
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43801: LD_ADDR_VAR 0 33
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 3
43819: NEG
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 3
43830: NEG
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 3
43842: NEG
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 4
43853: NEG
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 4
43864: NEG
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 4
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 5
43887: NEG
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 5
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 5
43910: NEG
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 6
43921: NEG
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 6
43932: NEG
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43956: LD_ADDR_VAR 0 34
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: LD_INT 3
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 3
43975: NEG
43976: PUSH
43977: LD_INT 2
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 3
43987: NEG
43988: PUSH
43989: LD_INT 3
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 3
43999: NEG
44000: PUSH
44001: LD_INT 4
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 4
44011: NEG
44012: PUSH
44013: LD_INT 3
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 4
44023: NEG
44024: PUSH
44025: LD_INT 4
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 4
44035: NEG
44036: PUSH
44037: LD_INT 5
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 5
44047: NEG
44048: PUSH
44049: LD_INT 4
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 5
44059: NEG
44060: PUSH
44061: LD_INT 5
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 5
44071: NEG
44072: PUSH
44073: LD_INT 6
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 6
44083: NEG
44084: PUSH
44085: LD_INT 5
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 6
44095: NEG
44096: PUSH
44097: LD_INT 6
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44119: LD_ADDR_VAR 0 41
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 3
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44163: LD_ADDR_VAR 0 42
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 3
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: LIST
44203: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44204: LD_ADDR_VAR 0 43
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 3
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 3
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44244: LD_ADDR_VAR 0 44
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 3
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: LIST
44284: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44285: LD_ADDR_VAR 0 45
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 3
44314: NEG
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44329: LD_ADDR_VAR 0 46
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: LD_INT 3
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 3
44360: NEG
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: LIST
44374: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44375: LD_ADDR_VAR 0 47
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: LD_INT 3
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 3
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44408: LD_ADDR_VAR 0 48
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44439: LD_ADDR_VAR 0 49
44443: PUSH
44444: LD_INT 3
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 3
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44468: LD_ADDR_VAR 0 50
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: LD_INT 3
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44497: LD_ADDR_VAR 0 51
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44528: LD_ADDR_VAR 0 52
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 3
44547: NEG
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44561: LD_ADDR_VAR 0 53
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 3
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 3
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: LIST
44604: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44605: LD_ADDR_VAR 0 54
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 3
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 3
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44646: LD_ADDR_VAR 0 55
44650: PUSH
44651: LD_INT 3
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: LD_INT 3
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44686: LD_ADDR_VAR 0 56
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 3
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 3
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44727: LD_ADDR_VAR 0 57
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 3
44745: NEG
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 3
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44771: LD_ADDR_VAR 0 58
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 3
44790: NEG
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 3
44802: NEG
44803: PUSH
44804: LD_INT 3
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44817: LD_ADDR_VAR 0 59
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: LD_INT 2
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 2
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44861: LD_ADDR_VAR 0 60
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: LIST
44901: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44902: LD_ADDR_VAR 0 61
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: LIST
44941: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44942: LD_ADDR_VAR 0 62
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44983: LD_ADDR_VAR 0 63
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45027: LD_ADDR_VAR 0 64
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// end ; 2 :
45073: GO 48339
45075: LD_INT 2
45077: DOUBLE
45078: EQUAL
45079: IFTRUE 45083
45081: GO 48338
45083: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45084: LD_ADDR_VAR 0 29
45088: PUSH
45089: LD_INT 4
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 4
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 5
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 5
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 4
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 3
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 3
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 3
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 5
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 3
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 3
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 4
45204: PUSH
45205: LD_INT 3
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 4
45214: PUSH
45215: LD_INT 4
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 3
45224: PUSH
45225: LD_INT 4
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: LD_INT 3
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 4
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 4
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 4
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 3
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 4
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 5
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 5
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 4
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 5
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: NEG
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 3
45367: NEG
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 3
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 3
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 4
45423: NEG
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 4
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 4
45446: NEG
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 4
45469: NEG
45470: PUSH
45471: LD_INT 4
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 4
45481: NEG
45482: PUSH
45483: LD_INT 5
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 3
45493: NEG
45494: PUSH
45495: LD_INT 4
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 3
45505: NEG
45506: PUSH
45507: LD_INT 3
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 4
45517: NEG
45518: PUSH
45519: LD_INT 3
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 5
45529: NEG
45530: PUSH
45531: LD_INT 4
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 5
45541: NEG
45542: PUSH
45543: LD_INT 5
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: NEG
45554: PUSH
45555: LD_INT 5
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 5
45565: NEG
45566: PUSH
45567: LD_INT 3
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45622: LD_ADDR_VAR 0 30
45626: PUSH
45627: LD_INT 4
45629: PUSH
45630: LD_INT 4
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 4
45639: PUSH
45640: LD_INT 3
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 5
45649: PUSH
45650: LD_INT 4
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 5
45659: PUSH
45660: LD_INT 5
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 4
45669: PUSH
45670: LD_INT 5
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 3
45679: PUSH
45680: LD_INT 4
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 3
45689: PUSH
45690: LD_INT 3
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 5
45699: PUSH
45700: LD_INT 3
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: LD_INT 5
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 3
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 3
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 4
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 4
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 4
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 4
45812: NEG
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 4
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: NEG
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 4
45857: NEG
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 5
45868: NEG
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 5
45879: NEG
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 5
45891: NEG
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 3
45903: NEG
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 3
45914: NEG
45915: PUSH
45916: LD_INT 3
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 3
45926: NEG
45927: PUSH
45928: LD_INT 4
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: LD_INT 3
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 4
45974: NEG
45975: PUSH
45976: LD_INT 3
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 4
45986: NEG
45987: PUSH
45988: LD_INT 4
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 4
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 4
46010: NEG
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 4
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 5
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 4
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 3
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 3
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 4
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: LD_INT 5
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 3
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: LD_INT 5
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46169: LD_ADDR_VAR 0 31
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 4
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 4
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 5
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 5
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 4
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 5
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: LD_INT 3
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 3
46269: NEG
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 3
46280: NEG
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 3
46314: NEG
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 4
46325: NEG
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 4
46336: NEG
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 4
46348: NEG
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 4
46371: NEG
46372: PUSH
46373: LD_INT 4
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 4
46383: NEG
46384: PUSH
46385: LD_INT 5
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 3
46395: NEG
46396: PUSH
46397: LD_INT 4
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 3
46407: NEG
46408: PUSH
46409: LD_INT 3
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 4
46419: NEG
46420: PUSH
46421: LD_INT 3
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 5
46431: NEG
46432: PUSH
46433: LD_INT 4
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 5
46443: NEG
46444: PUSH
46445: LD_INT 5
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 3
46455: NEG
46456: PUSH
46457: LD_INT 5
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 5
46467: NEG
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 3
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 4
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 3
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 3
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 4
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: LD_INT 4
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 4
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 4
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 5
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 5
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 4
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 5
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46719: LD_ADDR_VAR 0 32
46723: PUSH
46724: LD_INT 4
46726: NEG
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 4
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 3
46749: NEG
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 3
46760: NEG
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 4
46771: NEG
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 5
46782: NEG
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 5
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 5
46805: NEG
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 3
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 3
46828: NEG
46829: PUSH
46830: LD_INT 3
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 3
46840: NEG
46841: PUSH
46842: LD_INT 4
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 3
46876: NEG
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 4
46888: NEG
46889: PUSH
46890: LD_INT 3
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 4
46900: NEG
46901: PUSH
46902: LD_INT 4
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: LD_INT 4
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 4
46924: NEG
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 4
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 5
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 4
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 3
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 3
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 4
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: LD_INT 5
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 3
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: LD_INT 5
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 4
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 4
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 4
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 4
47131: PUSH
47132: LD_INT 4
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 4
47141: PUSH
47142: LD_INT 3
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 5
47151: PUSH
47152: LD_INT 4
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 5
47161: PUSH
47162: LD_INT 5
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: LD_INT 5
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: LD_INT 4
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: LD_INT 3
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 5
47201: PUSH
47202: LD_INT 3
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: LD_INT 5
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47266: LD_ADDR_VAR 0 33
47270: PUSH
47271: LD_INT 4
47273: NEG
47274: PUSH
47275: LD_INT 4
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 4
47285: NEG
47286: PUSH
47287: LD_INT 5
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 3
47297: NEG
47298: PUSH
47299: LD_INT 4
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 3
47309: NEG
47310: PUSH
47311: LD_INT 3
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 4
47321: NEG
47322: PUSH
47323: LD_INT 3
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 5
47333: NEG
47334: PUSH
47335: LD_INT 4
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 5
47345: NEG
47346: PUSH
47347: LD_INT 5
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 3
47357: NEG
47358: PUSH
47359: LD_INT 5
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 5
47369: NEG
47370: PUSH
47371: LD_INT 3
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 3
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 4
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 3
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 3
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 4
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: LD_INT 4
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 4
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 4
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 5
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 5
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 4
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 4
47596: PUSH
47597: LD_INT 3
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 4
47606: PUSH
47607: LD_INT 4
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: LD_INT 4
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: LD_INT 4
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 4
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 4
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 5
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 5
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 4
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 3
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: LD_INT 5
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47804: LD_ADDR_VAR 0 34
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 4
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 5
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 4
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 3
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 3
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 4
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 5
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 3
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 5
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 3
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 4
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 4
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 4
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 4
48006: PUSH
48007: LD_INT 4
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 4
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 5
48026: PUSH
48027: LD_INT 4
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 5
48036: PUSH
48037: LD_INT 5
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 4
48046: PUSH
48047: LD_INT 5
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 3
48056: PUSH
48057: LD_INT 4
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: LD_INT 3
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 5
48076: PUSH
48077: LD_INT 3
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 3
48086: PUSH
48087: LD_INT 5
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 3
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 3
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 4
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 4
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 4
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 4
48189: NEG
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 4
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 3
48212: NEG
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 4
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 5
48245: NEG
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 5
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 5
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: ST_TO_ADDR
// end ; end ;
48336: GO 48339
48338: POP
// case btype of b_depot , b_warehouse :
48339: LD_VAR 0 1
48343: PUSH
48344: LD_INT 0
48346: DOUBLE
48347: EQUAL
48348: IFTRUE 48358
48350: LD_INT 1
48352: DOUBLE
48353: EQUAL
48354: IFTRUE 48358
48356: GO 48559
48358: POP
// case nation of nation_american :
48359: LD_VAR 0 5
48363: PUSH
48364: LD_INT 1
48366: DOUBLE
48367: EQUAL
48368: IFTRUE 48372
48370: GO 48428
48372: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
48373: LD_ADDR_VAR 0 9
48377: PUSH
48378: LD_VAR 0 11
48382: PUSH
48383: LD_VAR 0 12
48387: PUSH
48388: LD_VAR 0 13
48392: PUSH
48393: LD_VAR 0 14
48397: PUSH
48398: LD_VAR 0 15
48402: PUSH
48403: LD_VAR 0 16
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: PUSH
48416: LD_VAR 0 4
48420: PUSH
48421: LD_INT 1
48423: PLUS
48424: ARRAY
48425: ST_TO_ADDR
48426: GO 48557
48428: LD_INT 2
48430: DOUBLE
48431: EQUAL
48432: IFTRUE 48436
48434: GO 48492
48436: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
48437: LD_ADDR_VAR 0 9
48441: PUSH
48442: LD_VAR 0 17
48446: PUSH
48447: LD_VAR 0 18
48451: PUSH
48452: LD_VAR 0 19
48456: PUSH
48457: LD_VAR 0 20
48461: PUSH
48462: LD_VAR 0 21
48466: PUSH
48467: LD_VAR 0 22
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: PUSH
48480: LD_VAR 0 4
48484: PUSH
48485: LD_INT 1
48487: PLUS
48488: ARRAY
48489: ST_TO_ADDR
48490: GO 48557
48492: LD_INT 3
48494: DOUBLE
48495: EQUAL
48496: IFTRUE 48500
48498: GO 48556
48500: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48501: LD_ADDR_VAR 0 9
48505: PUSH
48506: LD_VAR 0 23
48510: PUSH
48511: LD_VAR 0 24
48515: PUSH
48516: LD_VAR 0 25
48520: PUSH
48521: LD_VAR 0 26
48525: PUSH
48526: LD_VAR 0 27
48530: PUSH
48531: LD_VAR 0 28
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: PUSH
48544: LD_VAR 0 4
48548: PUSH
48549: LD_INT 1
48551: PLUS
48552: ARRAY
48553: ST_TO_ADDR
48554: GO 48557
48556: POP
48557: GO 49112
48559: LD_INT 2
48561: DOUBLE
48562: EQUAL
48563: IFTRUE 48573
48565: LD_INT 3
48567: DOUBLE
48568: EQUAL
48569: IFTRUE 48573
48571: GO 48629
48573: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48574: LD_ADDR_VAR 0 9
48578: PUSH
48579: LD_VAR 0 29
48583: PUSH
48584: LD_VAR 0 30
48588: PUSH
48589: LD_VAR 0 31
48593: PUSH
48594: LD_VAR 0 32
48598: PUSH
48599: LD_VAR 0 33
48603: PUSH
48604: LD_VAR 0 34
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: PUSH
48617: LD_VAR 0 4
48621: PUSH
48622: LD_INT 1
48624: PLUS
48625: ARRAY
48626: ST_TO_ADDR
48627: GO 49112
48629: LD_INT 16
48631: DOUBLE
48632: EQUAL
48633: IFTRUE 48691
48635: LD_INT 17
48637: DOUBLE
48638: EQUAL
48639: IFTRUE 48691
48641: LD_INT 18
48643: DOUBLE
48644: EQUAL
48645: IFTRUE 48691
48647: LD_INT 19
48649: DOUBLE
48650: EQUAL
48651: IFTRUE 48691
48653: LD_INT 22
48655: DOUBLE
48656: EQUAL
48657: IFTRUE 48691
48659: LD_INT 20
48661: DOUBLE
48662: EQUAL
48663: IFTRUE 48691
48665: LD_INT 21
48667: DOUBLE
48668: EQUAL
48669: IFTRUE 48691
48671: LD_INT 23
48673: DOUBLE
48674: EQUAL
48675: IFTRUE 48691
48677: LD_INT 24
48679: DOUBLE
48680: EQUAL
48681: IFTRUE 48691
48683: LD_INT 25
48685: DOUBLE
48686: EQUAL
48687: IFTRUE 48691
48689: GO 48747
48691: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48692: LD_ADDR_VAR 0 9
48696: PUSH
48697: LD_VAR 0 35
48701: PUSH
48702: LD_VAR 0 36
48706: PUSH
48707: LD_VAR 0 37
48711: PUSH
48712: LD_VAR 0 38
48716: PUSH
48717: LD_VAR 0 39
48721: PUSH
48722: LD_VAR 0 40
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: PUSH
48735: LD_VAR 0 4
48739: PUSH
48740: LD_INT 1
48742: PLUS
48743: ARRAY
48744: ST_TO_ADDR
48745: GO 49112
48747: LD_INT 6
48749: DOUBLE
48750: EQUAL
48751: IFTRUE 48803
48753: LD_INT 7
48755: DOUBLE
48756: EQUAL
48757: IFTRUE 48803
48759: LD_INT 8
48761: DOUBLE
48762: EQUAL
48763: IFTRUE 48803
48765: LD_INT 13
48767: DOUBLE
48768: EQUAL
48769: IFTRUE 48803
48771: LD_INT 12
48773: DOUBLE
48774: EQUAL
48775: IFTRUE 48803
48777: LD_INT 15
48779: DOUBLE
48780: EQUAL
48781: IFTRUE 48803
48783: LD_INT 11
48785: DOUBLE
48786: EQUAL
48787: IFTRUE 48803
48789: LD_INT 14
48791: DOUBLE
48792: EQUAL
48793: IFTRUE 48803
48795: LD_INT 10
48797: DOUBLE
48798: EQUAL
48799: IFTRUE 48803
48801: GO 48859
48803: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
48804: LD_ADDR_VAR 0 9
48808: PUSH
48809: LD_VAR 0 41
48813: PUSH
48814: LD_VAR 0 42
48818: PUSH
48819: LD_VAR 0 43
48823: PUSH
48824: LD_VAR 0 44
48828: PUSH
48829: LD_VAR 0 45
48833: PUSH
48834: LD_VAR 0 46
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: PUSH
48847: LD_VAR 0 4
48851: PUSH
48852: LD_INT 1
48854: PLUS
48855: ARRAY
48856: ST_TO_ADDR
48857: GO 49112
48859: LD_INT 36
48861: DOUBLE
48862: EQUAL
48863: IFTRUE 48867
48865: GO 48923
48867: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48868: LD_ADDR_VAR 0 9
48872: PUSH
48873: LD_VAR 0 47
48877: PUSH
48878: LD_VAR 0 48
48882: PUSH
48883: LD_VAR 0 49
48887: PUSH
48888: LD_VAR 0 50
48892: PUSH
48893: LD_VAR 0 51
48897: PUSH
48898: LD_VAR 0 52
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: PUSH
48911: LD_VAR 0 4
48915: PUSH
48916: LD_INT 1
48918: PLUS
48919: ARRAY
48920: ST_TO_ADDR
48921: GO 49112
48923: LD_INT 4
48925: DOUBLE
48926: EQUAL
48927: IFTRUE 48949
48929: LD_INT 5
48931: DOUBLE
48932: EQUAL
48933: IFTRUE 48949
48935: LD_INT 34
48937: DOUBLE
48938: EQUAL
48939: IFTRUE 48949
48941: LD_INT 37
48943: DOUBLE
48944: EQUAL
48945: IFTRUE 48949
48947: GO 49005
48949: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48950: LD_ADDR_VAR 0 9
48954: PUSH
48955: LD_VAR 0 53
48959: PUSH
48960: LD_VAR 0 54
48964: PUSH
48965: LD_VAR 0 55
48969: PUSH
48970: LD_VAR 0 56
48974: PUSH
48975: LD_VAR 0 57
48979: PUSH
48980: LD_VAR 0 58
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: PUSH
48993: LD_VAR 0 4
48997: PUSH
48998: LD_INT 1
49000: PLUS
49001: ARRAY
49002: ST_TO_ADDR
49003: GO 49112
49005: LD_INT 31
49007: DOUBLE
49008: EQUAL
49009: IFTRUE 49055
49011: LD_INT 32
49013: DOUBLE
49014: EQUAL
49015: IFTRUE 49055
49017: LD_INT 33
49019: DOUBLE
49020: EQUAL
49021: IFTRUE 49055
49023: LD_INT 27
49025: DOUBLE
49026: EQUAL
49027: IFTRUE 49055
49029: LD_INT 26
49031: DOUBLE
49032: EQUAL
49033: IFTRUE 49055
49035: LD_INT 28
49037: DOUBLE
49038: EQUAL
49039: IFTRUE 49055
49041: LD_INT 29
49043: DOUBLE
49044: EQUAL
49045: IFTRUE 49055
49047: LD_INT 30
49049: DOUBLE
49050: EQUAL
49051: IFTRUE 49055
49053: GO 49111
49055: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
49056: LD_ADDR_VAR 0 9
49060: PUSH
49061: LD_VAR 0 59
49065: PUSH
49066: LD_VAR 0 60
49070: PUSH
49071: LD_VAR 0 61
49075: PUSH
49076: LD_VAR 0 62
49080: PUSH
49081: LD_VAR 0 63
49085: PUSH
49086: LD_VAR 0 64
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: PUSH
49099: LD_VAR 0 4
49103: PUSH
49104: LD_INT 1
49106: PLUS
49107: ARRAY
49108: ST_TO_ADDR
49109: GO 49112
49111: POP
// temp_list2 = [ ] ;
49112: LD_ADDR_VAR 0 10
49116: PUSH
49117: EMPTY
49118: ST_TO_ADDR
// for i in temp_list do
49119: LD_ADDR_VAR 0 8
49123: PUSH
49124: LD_VAR 0 9
49128: PUSH
49129: FOR_IN
49130: IFFALSE 49182
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49132: LD_ADDR_VAR 0 10
49136: PUSH
49137: LD_VAR 0 10
49141: PUSH
49142: LD_VAR 0 8
49146: PUSH
49147: LD_INT 1
49149: ARRAY
49150: PUSH
49151: LD_VAR 0 2
49155: PLUS
49156: PUSH
49157: LD_VAR 0 8
49161: PUSH
49162: LD_INT 2
49164: ARRAY
49165: PUSH
49166: LD_VAR 0 3
49170: PLUS
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: ADD
49179: ST_TO_ADDR
49180: GO 49129
49182: POP
49183: POP
// result = temp_list2 ;
49184: LD_ADDR_VAR 0 7
49188: PUSH
49189: LD_VAR 0 10
49193: ST_TO_ADDR
// end ;
49194: LD_VAR 0 7
49198: RET
// export function EnemyInRange ( unit , dist ) ; begin
49199: LD_INT 0
49201: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49202: LD_ADDR_VAR 0 3
49206: PUSH
49207: LD_VAR 0 1
49211: PPUSH
49212: CALL_OW 255
49216: PPUSH
49217: LD_VAR 0 1
49221: PPUSH
49222: CALL_OW 250
49226: PPUSH
49227: LD_VAR 0 1
49231: PPUSH
49232: CALL_OW 251
49236: PPUSH
49237: LD_VAR 0 2
49241: PPUSH
49242: CALL 23303 0 4
49246: PUSH
49247: LD_INT 4
49249: ARRAY
49250: ST_TO_ADDR
// end ;
49251: LD_VAR 0 3
49255: RET
// export function PlayerSeeMe ( unit ) ; begin
49256: LD_INT 0
49258: PPUSH
// result := See ( your_side , unit ) ;
49259: LD_ADDR_VAR 0 2
49263: PUSH
49264: LD_OWVAR 2
49268: PPUSH
49269: LD_VAR 0 1
49273: PPUSH
49274: CALL_OW 292
49278: ST_TO_ADDR
// end ;
49279: LD_VAR 0 2
49283: RET
// export function ReverseDir ( unit ) ; begin
49284: LD_INT 0
49286: PPUSH
// if not unit then
49287: LD_VAR 0 1
49291: NOT
49292: IFFALSE 49296
// exit ;
49294: GO 49319
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49296: LD_ADDR_VAR 0 2
49300: PUSH
49301: LD_VAR 0 1
49305: PPUSH
49306: CALL_OW 254
49310: PUSH
49311: LD_INT 3
49313: PLUS
49314: PUSH
49315: LD_INT 6
49317: MOD
49318: ST_TO_ADDR
// end ;
49319: LD_VAR 0 2
49323: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49324: LD_INT 0
49326: PPUSH
49327: PPUSH
49328: PPUSH
49329: PPUSH
49330: PPUSH
// if not hexes then
49331: LD_VAR 0 2
49335: NOT
49336: IFFALSE 49340
// exit ;
49338: GO 49488
// dist := 9999 ;
49340: LD_ADDR_VAR 0 5
49344: PUSH
49345: LD_INT 9999
49347: ST_TO_ADDR
// for i = 1 to hexes do
49348: LD_ADDR_VAR 0 4
49352: PUSH
49353: DOUBLE
49354: LD_INT 1
49356: DEC
49357: ST_TO_ADDR
49358: LD_VAR 0 2
49362: PUSH
49363: FOR_TO
49364: IFFALSE 49476
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49366: LD_VAR 0 1
49370: PPUSH
49371: LD_VAR 0 2
49375: PUSH
49376: LD_VAR 0 4
49380: ARRAY
49381: PUSH
49382: LD_INT 1
49384: ARRAY
49385: PPUSH
49386: LD_VAR 0 2
49390: PUSH
49391: LD_VAR 0 4
49395: ARRAY
49396: PUSH
49397: LD_INT 2
49399: ARRAY
49400: PPUSH
49401: CALL_OW 297
49405: PUSH
49406: LD_VAR 0 5
49410: LESS
49411: IFFALSE 49474
// begin hex := hexes [ i ] ;
49413: LD_ADDR_VAR 0 7
49417: PUSH
49418: LD_VAR 0 2
49422: PUSH
49423: LD_VAR 0 4
49427: ARRAY
49428: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49429: LD_ADDR_VAR 0 5
49433: PUSH
49434: LD_VAR 0 1
49438: PPUSH
49439: LD_VAR 0 2
49443: PUSH
49444: LD_VAR 0 4
49448: ARRAY
49449: PUSH
49450: LD_INT 1
49452: ARRAY
49453: PPUSH
49454: LD_VAR 0 2
49458: PUSH
49459: LD_VAR 0 4
49463: ARRAY
49464: PUSH
49465: LD_INT 2
49467: ARRAY
49468: PPUSH
49469: CALL_OW 297
49473: ST_TO_ADDR
// end ; end ;
49474: GO 49363
49476: POP
49477: POP
// result := hex ;
49478: LD_ADDR_VAR 0 3
49482: PUSH
49483: LD_VAR 0 7
49487: ST_TO_ADDR
// end ;
49488: LD_VAR 0 3
49492: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49493: LD_INT 0
49495: PPUSH
49496: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49497: LD_VAR 0 1
49501: NOT
49502: PUSH
49503: LD_VAR 0 1
49507: PUSH
49508: LD_INT 21
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 23
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PPUSH
49532: CALL_OW 69
49536: IN
49537: NOT
49538: OR
49539: IFFALSE 49543
// exit ;
49541: GO 49590
// for i = 1 to 3 do
49543: LD_ADDR_VAR 0 3
49547: PUSH
49548: DOUBLE
49549: LD_INT 1
49551: DEC
49552: ST_TO_ADDR
49553: LD_INT 3
49555: PUSH
49556: FOR_TO
49557: IFFALSE 49588
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49559: LD_VAR 0 1
49563: PPUSH
49564: CALL_OW 250
49568: PPUSH
49569: LD_VAR 0 1
49573: PPUSH
49574: CALL_OW 251
49578: PPUSH
49579: LD_INT 1
49581: PPUSH
49582: CALL_OW 453
49586: GO 49556
49588: POP
49589: POP
// end ;
49590: LD_VAR 0 2
49594: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49595: LD_INT 0
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49603: LD_VAR 0 1
49607: NOT
49608: PUSH
49609: LD_VAR 0 2
49613: NOT
49614: OR
49615: PUSH
49616: LD_VAR 0 1
49620: PPUSH
49621: CALL_OW 314
49625: OR
49626: IFFALSE 49630
// exit ;
49628: GO 50071
// x := GetX ( enemy_unit ) ;
49630: LD_ADDR_VAR 0 7
49634: PUSH
49635: LD_VAR 0 2
49639: PPUSH
49640: CALL_OW 250
49644: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49645: LD_ADDR_VAR 0 8
49649: PUSH
49650: LD_VAR 0 2
49654: PPUSH
49655: CALL_OW 251
49659: ST_TO_ADDR
// if not x or not y then
49660: LD_VAR 0 7
49664: NOT
49665: PUSH
49666: LD_VAR 0 8
49670: NOT
49671: OR
49672: IFFALSE 49676
// exit ;
49674: GO 50071
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49676: LD_ADDR_VAR 0 6
49680: PUSH
49681: LD_VAR 0 7
49685: PPUSH
49686: LD_INT 0
49688: PPUSH
49689: LD_INT 4
49691: PPUSH
49692: CALL_OW 272
49696: PUSH
49697: LD_VAR 0 8
49701: PPUSH
49702: LD_INT 0
49704: PPUSH
49705: LD_INT 4
49707: PPUSH
49708: CALL_OW 273
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_VAR 0 7
49721: PPUSH
49722: LD_INT 1
49724: PPUSH
49725: LD_INT 4
49727: PPUSH
49728: CALL_OW 272
49732: PUSH
49733: LD_VAR 0 8
49737: PPUSH
49738: LD_INT 1
49740: PPUSH
49741: LD_INT 4
49743: PPUSH
49744: CALL_OW 273
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_VAR 0 7
49757: PPUSH
49758: LD_INT 2
49760: PPUSH
49761: LD_INT 4
49763: PPUSH
49764: CALL_OW 272
49768: PUSH
49769: LD_VAR 0 8
49773: PPUSH
49774: LD_INT 2
49776: PPUSH
49777: LD_INT 4
49779: PPUSH
49780: CALL_OW 273
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_VAR 0 7
49793: PPUSH
49794: LD_INT 3
49796: PPUSH
49797: LD_INT 4
49799: PPUSH
49800: CALL_OW 272
49804: PUSH
49805: LD_VAR 0 8
49809: PPUSH
49810: LD_INT 3
49812: PPUSH
49813: LD_INT 4
49815: PPUSH
49816: CALL_OW 273
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_VAR 0 7
49829: PPUSH
49830: LD_INT 4
49832: PPUSH
49833: LD_INT 4
49835: PPUSH
49836: CALL_OW 272
49840: PUSH
49841: LD_VAR 0 8
49845: PPUSH
49846: LD_INT 4
49848: PPUSH
49849: LD_INT 4
49851: PPUSH
49852: CALL_OW 273
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_VAR 0 7
49865: PPUSH
49866: LD_INT 5
49868: PPUSH
49869: LD_INT 4
49871: PPUSH
49872: CALL_OW 272
49876: PUSH
49877: LD_VAR 0 8
49881: PPUSH
49882: LD_INT 5
49884: PPUSH
49885: LD_INT 4
49887: PPUSH
49888: CALL_OW 273
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: ST_TO_ADDR
// for i = tmp downto 1 do
49905: LD_ADDR_VAR 0 4
49909: PUSH
49910: DOUBLE
49911: LD_VAR 0 6
49915: INC
49916: ST_TO_ADDR
49917: LD_INT 1
49919: PUSH
49920: FOR_DOWNTO
49921: IFFALSE 50022
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49923: LD_VAR 0 6
49927: PUSH
49928: LD_VAR 0 4
49932: ARRAY
49933: PUSH
49934: LD_INT 1
49936: ARRAY
49937: PPUSH
49938: LD_VAR 0 6
49942: PUSH
49943: LD_VAR 0 4
49947: ARRAY
49948: PUSH
49949: LD_INT 2
49951: ARRAY
49952: PPUSH
49953: CALL_OW 488
49957: NOT
49958: PUSH
49959: LD_VAR 0 6
49963: PUSH
49964: LD_VAR 0 4
49968: ARRAY
49969: PUSH
49970: LD_INT 1
49972: ARRAY
49973: PPUSH
49974: LD_VAR 0 6
49978: PUSH
49979: LD_VAR 0 4
49983: ARRAY
49984: PUSH
49985: LD_INT 2
49987: ARRAY
49988: PPUSH
49989: CALL_OW 428
49993: PUSH
49994: LD_INT 0
49996: NONEQUAL
49997: OR
49998: IFFALSE 50020
// tmp := Delete ( tmp , i ) ;
50000: LD_ADDR_VAR 0 6
50004: PUSH
50005: LD_VAR 0 6
50009: PPUSH
50010: LD_VAR 0 4
50014: PPUSH
50015: CALL_OW 3
50019: ST_TO_ADDR
50020: GO 49920
50022: POP
50023: POP
// j := GetClosestHex ( unit , tmp ) ;
50024: LD_ADDR_VAR 0 5
50028: PUSH
50029: LD_VAR 0 1
50033: PPUSH
50034: LD_VAR 0 6
50038: PPUSH
50039: CALL 49324 0 2
50043: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50044: LD_VAR 0 1
50048: PPUSH
50049: LD_VAR 0 5
50053: PUSH
50054: LD_INT 1
50056: ARRAY
50057: PPUSH
50058: LD_VAR 0 5
50062: PUSH
50063: LD_INT 2
50065: ARRAY
50066: PPUSH
50067: CALL_OW 111
// end ;
50071: LD_VAR 0 3
50075: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50076: LD_INT 0
50078: PPUSH
50079: PPUSH
50080: PPUSH
// uc_side = 0 ;
50081: LD_ADDR_OWVAR 20
50085: PUSH
50086: LD_INT 0
50088: ST_TO_ADDR
// uc_nation = 0 ;
50089: LD_ADDR_OWVAR 21
50093: PUSH
50094: LD_INT 0
50096: ST_TO_ADDR
// InitHc ;
50097: CALL_OW 19
// InitVc ;
50101: CALL_OW 20
// if mastodonts then
50105: LD_VAR 0 6
50109: IFFALSE 50176
// for i = 1 to mastodonts do
50111: LD_ADDR_VAR 0 11
50115: PUSH
50116: DOUBLE
50117: LD_INT 1
50119: DEC
50120: ST_TO_ADDR
50121: LD_VAR 0 6
50125: PUSH
50126: FOR_TO
50127: IFFALSE 50174
// begin vc_chassis := 31 ;
50129: LD_ADDR_OWVAR 37
50133: PUSH
50134: LD_INT 31
50136: ST_TO_ADDR
// vc_control := control_rider ;
50137: LD_ADDR_OWVAR 38
50141: PUSH
50142: LD_INT 4
50144: ST_TO_ADDR
// animal := CreateVehicle ;
50145: LD_ADDR_VAR 0 12
50149: PUSH
50150: CALL_OW 45
50154: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50155: LD_VAR 0 12
50159: PPUSH
50160: LD_VAR 0 8
50164: PPUSH
50165: LD_INT 0
50167: PPUSH
50168: CALL 52245 0 3
// end ;
50172: GO 50126
50174: POP
50175: POP
// if horses then
50176: LD_VAR 0 5
50180: IFFALSE 50247
// for i = 1 to horses do
50182: LD_ADDR_VAR 0 11
50186: PUSH
50187: DOUBLE
50188: LD_INT 1
50190: DEC
50191: ST_TO_ADDR
50192: LD_VAR 0 5
50196: PUSH
50197: FOR_TO
50198: IFFALSE 50245
// begin hc_class := 21 ;
50200: LD_ADDR_OWVAR 28
50204: PUSH
50205: LD_INT 21
50207: ST_TO_ADDR
// hc_gallery :=  ;
50208: LD_ADDR_OWVAR 33
50212: PUSH
50213: LD_STRING 
50215: ST_TO_ADDR
// animal := CreateHuman ;
50216: LD_ADDR_VAR 0 12
50220: PUSH
50221: CALL_OW 44
50225: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50226: LD_VAR 0 12
50230: PPUSH
50231: LD_VAR 0 8
50235: PPUSH
50236: LD_INT 0
50238: PPUSH
50239: CALL 52245 0 3
// end ;
50243: GO 50197
50245: POP
50246: POP
// if birds then
50247: LD_VAR 0 1
50251: IFFALSE 50318
// for i = 1 to birds do
50253: LD_ADDR_VAR 0 11
50257: PUSH
50258: DOUBLE
50259: LD_INT 1
50261: DEC
50262: ST_TO_ADDR
50263: LD_VAR 0 1
50267: PUSH
50268: FOR_TO
50269: IFFALSE 50316
// begin hc_class = 18 ;
50271: LD_ADDR_OWVAR 28
50275: PUSH
50276: LD_INT 18
50278: ST_TO_ADDR
// hc_gallery =  ;
50279: LD_ADDR_OWVAR 33
50283: PUSH
50284: LD_STRING 
50286: ST_TO_ADDR
// animal := CreateHuman ;
50287: LD_ADDR_VAR 0 12
50291: PUSH
50292: CALL_OW 44
50296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50297: LD_VAR 0 12
50301: PPUSH
50302: LD_VAR 0 8
50306: PPUSH
50307: LD_INT 0
50309: PPUSH
50310: CALL 52245 0 3
// end ;
50314: GO 50268
50316: POP
50317: POP
// if tigers then
50318: LD_VAR 0 2
50322: IFFALSE 50406
// for i = 1 to tigers do
50324: LD_ADDR_VAR 0 11
50328: PUSH
50329: DOUBLE
50330: LD_INT 1
50332: DEC
50333: ST_TO_ADDR
50334: LD_VAR 0 2
50338: PUSH
50339: FOR_TO
50340: IFFALSE 50404
// begin hc_class = class_tiger ;
50342: LD_ADDR_OWVAR 28
50346: PUSH
50347: LD_INT 14
50349: ST_TO_ADDR
// hc_gallery =  ;
50350: LD_ADDR_OWVAR 33
50354: PUSH
50355: LD_STRING 
50357: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50358: LD_ADDR_OWVAR 35
50362: PUSH
50363: LD_INT 7
50365: NEG
50366: PPUSH
50367: LD_INT 7
50369: PPUSH
50370: CALL_OW 12
50374: ST_TO_ADDR
// animal := CreateHuman ;
50375: LD_ADDR_VAR 0 12
50379: PUSH
50380: CALL_OW 44
50384: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50385: LD_VAR 0 12
50389: PPUSH
50390: LD_VAR 0 8
50394: PPUSH
50395: LD_INT 0
50397: PPUSH
50398: CALL 52245 0 3
// end ;
50402: GO 50339
50404: POP
50405: POP
// if apemans then
50406: LD_VAR 0 3
50410: IFFALSE 50533
// for i = 1 to apemans do
50412: LD_ADDR_VAR 0 11
50416: PUSH
50417: DOUBLE
50418: LD_INT 1
50420: DEC
50421: ST_TO_ADDR
50422: LD_VAR 0 3
50426: PUSH
50427: FOR_TO
50428: IFFALSE 50531
// begin hc_class = class_apeman ;
50430: LD_ADDR_OWVAR 28
50434: PUSH
50435: LD_INT 12
50437: ST_TO_ADDR
// hc_gallery =  ;
50438: LD_ADDR_OWVAR 33
50442: PUSH
50443: LD_STRING 
50445: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
50446: LD_ADDR_OWVAR 35
50450: PUSH
50451: LD_INT 5
50453: NEG
50454: PPUSH
50455: LD_INT 5
50457: PPUSH
50458: CALL_OW 12
50462: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50463: LD_ADDR_OWVAR 31
50467: PUSH
50468: LD_INT 1
50470: PPUSH
50471: LD_INT 3
50473: PPUSH
50474: CALL_OW 12
50478: PUSH
50479: LD_INT 1
50481: PPUSH
50482: LD_INT 3
50484: PPUSH
50485: CALL_OW 12
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: ST_TO_ADDR
// animal := CreateHuman ;
50502: LD_ADDR_VAR 0 12
50506: PUSH
50507: CALL_OW 44
50511: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50512: LD_VAR 0 12
50516: PPUSH
50517: LD_VAR 0 8
50521: PPUSH
50522: LD_INT 0
50524: PPUSH
50525: CALL 52245 0 3
// end ;
50529: GO 50427
50531: POP
50532: POP
// if enchidnas then
50533: LD_VAR 0 4
50537: IFFALSE 50604
// for i = 1 to enchidnas do
50539: LD_ADDR_VAR 0 11
50543: PUSH
50544: DOUBLE
50545: LD_INT 1
50547: DEC
50548: ST_TO_ADDR
50549: LD_VAR 0 4
50553: PUSH
50554: FOR_TO
50555: IFFALSE 50602
// begin hc_class = 13 ;
50557: LD_ADDR_OWVAR 28
50561: PUSH
50562: LD_INT 13
50564: ST_TO_ADDR
// hc_gallery =  ;
50565: LD_ADDR_OWVAR 33
50569: PUSH
50570: LD_STRING 
50572: ST_TO_ADDR
// animal := CreateHuman ;
50573: LD_ADDR_VAR 0 12
50577: PUSH
50578: CALL_OW 44
50582: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50583: LD_VAR 0 12
50587: PPUSH
50588: LD_VAR 0 8
50592: PPUSH
50593: LD_INT 0
50595: PPUSH
50596: CALL 52245 0 3
// end ;
50600: GO 50554
50602: POP
50603: POP
// if fishes then
50604: LD_VAR 0 7
50608: IFFALSE 50675
// for i = 1 to fishes do
50610: LD_ADDR_VAR 0 11
50614: PUSH
50615: DOUBLE
50616: LD_INT 1
50618: DEC
50619: ST_TO_ADDR
50620: LD_VAR 0 7
50624: PUSH
50625: FOR_TO
50626: IFFALSE 50673
// begin hc_class = 20 ;
50628: LD_ADDR_OWVAR 28
50632: PUSH
50633: LD_INT 20
50635: ST_TO_ADDR
// hc_gallery =  ;
50636: LD_ADDR_OWVAR 33
50640: PUSH
50641: LD_STRING 
50643: ST_TO_ADDR
// animal := CreateHuman ;
50644: LD_ADDR_VAR 0 12
50648: PUSH
50649: CALL_OW 44
50653: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50654: LD_VAR 0 12
50658: PPUSH
50659: LD_VAR 0 9
50663: PPUSH
50664: LD_INT 0
50666: PPUSH
50667: CALL 52245 0 3
// end ;
50671: GO 50625
50673: POP
50674: POP
// end ;
50675: LD_VAR 0 10
50679: RET
// export function WantHeal ( sci , unit ) ; begin
50680: LD_INT 0
50682: PPUSH
// if GetTaskList ( sci ) > 0 then
50683: LD_VAR 0 1
50687: PPUSH
50688: CALL_OW 437
50692: PUSH
50693: LD_INT 0
50695: GREATER
50696: IFFALSE 50766
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50698: LD_VAR 0 1
50702: PPUSH
50703: CALL_OW 437
50707: PUSH
50708: LD_INT 1
50710: ARRAY
50711: PUSH
50712: LD_INT 1
50714: ARRAY
50715: PUSH
50716: LD_STRING l
50718: EQUAL
50719: PUSH
50720: LD_VAR 0 1
50724: PPUSH
50725: CALL_OW 437
50729: PUSH
50730: LD_INT 1
50732: ARRAY
50733: PUSH
50734: LD_INT 4
50736: ARRAY
50737: PUSH
50738: LD_VAR 0 2
50742: EQUAL
50743: AND
50744: IFFALSE 50756
// result := true else
50746: LD_ADDR_VAR 0 3
50750: PUSH
50751: LD_INT 1
50753: ST_TO_ADDR
50754: GO 50764
// result := false ;
50756: LD_ADDR_VAR 0 3
50760: PUSH
50761: LD_INT 0
50763: ST_TO_ADDR
// end else
50764: GO 50774
// result := false ;
50766: LD_ADDR_VAR 0 3
50770: PUSH
50771: LD_INT 0
50773: ST_TO_ADDR
// end ;
50774: LD_VAR 0 3
50778: RET
// export function HealTarget ( sci ) ; begin
50779: LD_INT 0
50781: PPUSH
// if not sci then
50782: LD_VAR 0 1
50786: NOT
50787: IFFALSE 50791
// exit ;
50789: GO 50856
// result := 0 ;
50791: LD_ADDR_VAR 0 2
50795: PUSH
50796: LD_INT 0
50798: ST_TO_ADDR
// if GetTaskList ( sci ) then
50799: LD_VAR 0 1
50803: PPUSH
50804: CALL_OW 437
50808: IFFALSE 50856
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50810: LD_VAR 0 1
50814: PPUSH
50815: CALL_OW 437
50819: PUSH
50820: LD_INT 1
50822: ARRAY
50823: PUSH
50824: LD_INT 1
50826: ARRAY
50827: PUSH
50828: LD_STRING l
50830: EQUAL
50831: IFFALSE 50856
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50833: LD_ADDR_VAR 0 2
50837: PUSH
50838: LD_VAR 0 1
50842: PPUSH
50843: CALL_OW 437
50847: PUSH
50848: LD_INT 1
50850: ARRAY
50851: PUSH
50852: LD_INT 4
50854: ARRAY
50855: ST_TO_ADDR
// end ;
50856: LD_VAR 0 2
50860: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50861: LD_INT 0
50863: PPUSH
50864: PPUSH
50865: PPUSH
50866: PPUSH
// if not base_units then
50867: LD_VAR 0 1
50871: NOT
50872: IFFALSE 50876
// exit ;
50874: GO 50963
// result := false ;
50876: LD_ADDR_VAR 0 2
50880: PUSH
50881: LD_INT 0
50883: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50884: LD_ADDR_VAR 0 5
50888: PUSH
50889: LD_VAR 0 1
50893: PPUSH
50894: LD_INT 21
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PPUSH
50904: CALL_OW 72
50908: ST_TO_ADDR
// if not tmp then
50909: LD_VAR 0 5
50913: NOT
50914: IFFALSE 50918
// exit ;
50916: GO 50963
// for i in tmp do
50918: LD_ADDR_VAR 0 3
50922: PUSH
50923: LD_VAR 0 5
50927: PUSH
50928: FOR_IN
50929: IFFALSE 50961
// begin result := EnemyInRange ( i , 22 ) ;
50931: LD_ADDR_VAR 0 2
50935: PUSH
50936: LD_VAR 0 3
50940: PPUSH
50941: LD_INT 22
50943: PPUSH
50944: CALL 49199 0 2
50948: ST_TO_ADDR
// if result then
50949: LD_VAR 0 2
50953: IFFALSE 50959
// exit ;
50955: POP
50956: POP
50957: GO 50963
// end ;
50959: GO 50928
50961: POP
50962: POP
// end ;
50963: LD_VAR 0 2
50967: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50968: LD_INT 0
50970: PPUSH
50971: PPUSH
// if not units then
50972: LD_VAR 0 1
50976: NOT
50977: IFFALSE 50981
// exit ;
50979: GO 51051
// result := [ ] ;
50981: LD_ADDR_VAR 0 3
50985: PUSH
50986: EMPTY
50987: ST_TO_ADDR
// for i in units do
50988: LD_ADDR_VAR 0 4
50992: PUSH
50993: LD_VAR 0 1
50997: PUSH
50998: FOR_IN
50999: IFFALSE 51049
// if GetTag ( i ) = tag then
51001: LD_VAR 0 4
51005: PPUSH
51006: CALL_OW 110
51010: PUSH
51011: LD_VAR 0 2
51015: EQUAL
51016: IFFALSE 51047
// result := Insert ( result , result + 1 , i ) ;
51018: LD_ADDR_VAR 0 3
51022: PUSH
51023: LD_VAR 0 3
51027: PPUSH
51028: LD_VAR 0 3
51032: PUSH
51033: LD_INT 1
51035: PLUS
51036: PPUSH
51037: LD_VAR 0 4
51041: PPUSH
51042: CALL_OW 2
51046: ST_TO_ADDR
51047: GO 50998
51049: POP
51050: POP
// end ;
51051: LD_VAR 0 3
51055: RET
// export function IsDriver ( un ) ; begin
51056: LD_INT 0
51058: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51059: LD_ADDR_VAR 0 2
51063: PUSH
51064: LD_VAR 0 1
51068: PUSH
51069: LD_INT 55
51071: PUSH
51072: EMPTY
51073: LIST
51074: PPUSH
51075: CALL_OW 69
51079: IN
51080: ST_TO_ADDR
// end ;
51081: LD_VAR 0 2
51085: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51086: LD_INT 0
51088: PPUSH
51089: PPUSH
// list := [ ] ;
51090: LD_ADDR_VAR 0 5
51094: PUSH
51095: EMPTY
51096: ST_TO_ADDR
// case d of 0 :
51097: LD_VAR 0 3
51101: PUSH
51102: LD_INT 0
51104: DOUBLE
51105: EQUAL
51106: IFTRUE 51110
51108: GO 51243
51110: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51111: LD_ADDR_VAR 0 5
51115: PUSH
51116: LD_VAR 0 1
51120: PUSH
51121: LD_INT 4
51123: MINUS
51124: PUSH
51125: LD_VAR 0 2
51129: PUSH
51130: LD_INT 4
51132: MINUS
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: PUSH
51142: LD_VAR 0 1
51146: PUSH
51147: LD_INT 3
51149: MINUS
51150: PUSH
51151: LD_VAR 0 2
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: PUSH
51164: LD_VAR 0 1
51168: PUSH
51169: LD_INT 4
51171: PLUS
51172: PUSH
51173: LD_VAR 0 2
51177: PUSH
51178: LD_INT 4
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: LIST
51185: PUSH
51186: LD_VAR 0 1
51190: PUSH
51191: LD_INT 3
51193: PLUS
51194: PUSH
51195: LD_VAR 0 2
51199: PUSH
51200: LD_INT 3
51202: PLUS
51203: PUSH
51204: LD_INT 5
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: PUSH
51212: LD_VAR 0 1
51216: PUSH
51217: LD_VAR 0 2
51221: PUSH
51222: LD_INT 4
51224: PLUS
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: LIST
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: ST_TO_ADDR
// end ; 1 :
51241: GO 51941
51243: LD_INT 1
51245: DOUBLE
51246: EQUAL
51247: IFTRUE 51251
51249: GO 51384
51251: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51252: LD_ADDR_VAR 0 5
51256: PUSH
51257: LD_VAR 0 1
51261: PUSH
51262: LD_VAR 0 2
51266: PUSH
51267: LD_INT 4
51269: MINUS
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: LIST
51278: PUSH
51279: LD_VAR 0 1
51283: PUSH
51284: LD_INT 3
51286: MINUS
51287: PUSH
51288: LD_VAR 0 2
51292: PUSH
51293: LD_INT 3
51295: MINUS
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: PUSH
51305: LD_VAR 0 1
51309: PUSH
51310: LD_INT 4
51312: MINUS
51313: PUSH
51314: LD_VAR 0 2
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: LIST
51326: PUSH
51327: LD_VAR 0 1
51331: PUSH
51332: LD_VAR 0 2
51336: PUSH
51337: LD_INT 3
51339: PLUS
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: PUSH
51349: LD_VAR 0 1
51353: PUSH
51354: LD_INT 4
51356: PLUS
51357: PUSH
51358: LD_VAR 0 2
51362: PUSH
51363: LD_INT 4
51365: PLUS
51366: PUSH
51367: LD_INT 5
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: LIST
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// end ; 2 :
51382: GO 51941
51384: LD_INT 2
51386: DOUBLE
51387: EQUAL
51388: IFTRUE 51392
51390: GO 51521
51392: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51393: LD_ADDR_VAR 0 5
51397: PUSH
51398: LD_VAR 0 1
51402: PUSH
51403: LD_VAR 0 2
51407: PUSH
51408: LD_INT 3
51410: MINUS
51411: PUSH
51412: LD_INT 3
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: PUSH
51420: LD_VAR 0 1
51424: PUSH
51425: LD_INT 4
51427: PLUS
51428: PUSH
51429: LD_VAR 0 2
51433: PUSH
51434: LD_INT 4
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: LIST
51441: PUSH
51442: LD_VAR 0 1
51446: PUSH
51447: LD_VAR 0 2
51451: PUSH
51452: LD_INT 4
51454: PLUS
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: LIST
51463: PUSH
51464: LD_VAR 0 1
51468: PUSH
51469: LD_INT 3
51471: MINUS
51472: PUSH
51473: LD_VAR 0 2
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: LIST
51485: PUSH
51486: LD_VAR 0 1
51490: PUSH
51491: LD_INT 4
51493: MINUS
51494: PUSH
51495: LD_VAR 0 2
51499: PUSH
51500: LD_INT 4
51502: MINUS
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: ST_TO_ADDR
// end ; 3 :
51519: GO 51941
51521: LD_INT 3
51523: DOUBLE
51524: EQUAL
51525: IFTRUE 51529
51527: GO 51662
51529: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51530: LD_ADDR_VAR 0 5
51534: PUSH
51535: LD_VAR 0 1
51539: PUSH
51540: LD_INT 3
51542: PLUS
51543: PUSH
51544: LD_VAR 0 2
51548: PUSH
51549: LD_INT 4
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: LIST
51556: PUSH
51557: LD_VAR 0 1
51561: PUSH
51562: LD_INT 4
51564: PLUS
51565: PUSH
51566: LD_VAR 0 2
51570: PUSH
51571: LD_INT 4
51573: PLUS
51574: PUSH
51575: LD_INT 5
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: LIST
51582: PUSH
51583: LD_VAR 0 1
51587: PUSH
51588: LD_INT 4
51590: MINUS
51591: PUSH
51592: LD_VAR 0 2
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: PUSH
51605: LD_VAR 0 1
51609: PUSH
51610: LD_VAR 0 2
51614: PUSH
51615: LD_INT 4
51617: MINUS
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: PUSH
51627: LD_VAR 0 1
51631: PUSH
51632: LD_INT 3
51634: MINUS
51635: PUSH
51636: LD_VAR 0 2
51640: PUSH
51641: LD_INT 3
51643: MINUS
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: LIST
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: ST_TO_ADDR
// end ; 4 :
51660: GO 51941
51662: LD_INT 4
51664: DOUBLE
51665: EQUAL
51666: IFTRUE 51670
51668: GO 51803
51670: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51671: LD_ADDR_VAR 0 5
51675: PUSH
51676: LD_VAR 0 1
51680: PUSH
51681: LD_VAR 0 2
51685: PUSH
51686: LD_INT 4
51688: PLUS
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: LIST
51697: PUSH
51698: LD_VAR 0 1
51702: PUSH
51703: LD_INT 3
51705: PLUS
51706: PUSH
51707: LD_VAR 0 2
51711: PUSH
51712: LD_INT 3
51714: PLUS
51715: PUSH
51716: LD_INT 5
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: PUSH
51724: LD_VAR 0 1
51728: PUSH
51729: LD_INT 4
51731: PLUS
51732: PUSH
51733: LD_VAR 0 2
51737: PUSH
51738: LD_INT 4
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: PUSH
51746: LD_VAR 0 1
51750: PUSH
51751: LD_VAR 0 2
51755: PUSH
51756: LD_INT 3
51758: MINUS
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: PUSH
51768: LD_VAR 0 1
51772: PUSH
51773: LD_INT 4
51775: MINUS
51776: PUSH
51777: LD_VAR 0 2
51781: PUSH
51782: LD_INT 4
51784: MINUS
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: ST_TO_ADDR
// end ; 5 :
51801: GO 51941
51803: LD_INT 5
51805: DOUBLE
51806: EQUAL
51807: IFTRUE 51811
51809: GO 51940
51811: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51812: LD_ADDR_VAR 0 5
51816: PUSH
51817: LD_VAR 0 1
51821: PUSH
51822: LD_INT 4
51824: MINUS
51825: PUSH
51826: LD_VAR 0 2
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: PUSH
51839: LD_VAR 0 1
51843: PUSH
51844: LD_VAR 0 2
51848: PUSH
51849: LD_INT 4
51851: MINUS
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: PUSH
51861: LD_VAR 0 1
51865: PUSH
51866: LD_INT 4
51868: PLUS
51869: PUSH
51870: LD_VAR 0 2
51874: PUSH
51875: LD_INT 4
51877: PLUS
51878: PUSH
51879: LD_INT 5
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: PUSH
51887: LD_VAR 0 1
51891: PUSH
51892: LD_INT 3
51894: PLUS
51895: PUSH
51896: LD_VAR 0 2
51900: PUSH
51901: LD_INT 4
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: PUSH
51909: LD_VAR 0 1
51913: PUSH
51914: LD_VAR 0 2
51918: PUSH
51919: LD_INT 3
51921: PLUS
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: ST_TO_ADDR
// end ; end ;
51938: GO 51941
51940: POP
// result := list ;
51941: LD_ADDR_VAR 0 4
51945: PUSH
51946: LD_VAR 0 5
51950: ST_TO_ADDR
// end ;
51951: LD_VAR 0 4
51955: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51956: LD_INT 0
51958: PPUSH
51959: PPUSH
51960: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51961: LD_VAR 0 1
51965: NOT
51966: PUSH
51967: LD_VAR 0 2
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: LD_INT 4
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: IN
51990: NOT
51991: OR
51992: IFFALSE 51996
// exit ;
51994: GO 52088
// tmp := [ ] ;
51996: LD_ADDR_VAR 0 5
52000: PUSH
52001: EMPTY
52002: ST_TO_ADDR
// for i in units do
52003: LD_ADDR_VAR 0 4
52007: PUSH
52008: LD_VAR 0 1
52012: PUSH
52013: FOR_IN
52014: IFFALSE 52057
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52016: LD_ADDR_VAR 0 5
52020: PUSH
52021: LD_VAR 0 5
52025: PPUSH
52026: LD_VAR 0 5
52030: PUSH
52031: LD_INT 1
52033: PLUS
52034: PPUSH
52035: LD_VAR 0 4
52039: PPUSH
52040: LD_VAR 0 2
52044: PPUSH
52045: CALL_OW 259
52049: PPUSH
52050: CALL_OW 2
52054: ST_TO_ADDR
52055: GO 52013
52057: POP
52058: POP
// if not tmp then
52059: LD_VAR 0 5
52063: NOT
52064: IFFALSE 52068
// exit ;
52066: GO 52088
// result := SortListByListDesc ( units , tmp ) ;
52068: LD_ADDR_VAR 0 3
52072: PUSH
52073: LD_VAR 0 1
52077: PPUSH
52078: LD_VAR 0 5
52082: PPUSH
52083: CALL_OW 77
52087: ST_TO_ADDR
// end ;
52088: LD_VAR 0 3
52092: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52093: LD_INT 0
52095: PPUSH
52096: PPUSH
52097: PPUSH
// x := GetX ( building ) ;
52098: LD_ADDR_VAR 0 4
52102: PUSH
52103: LD_VAR 0 2
52107: PPUSH
52108: CALL_OW 250
52112: ST_TO_ADDR
// y := GetY ( building ) ;
52113: LD_ADDR_VAR 0 5
52117: PUSH
52118: LD_VAR 0 2
52122: PPUSH
52123: CALL_OW 251
52127: ST_TO_ADDR
// if GetTaskList ( unit ) then
52128: LD_VAR 0 1
52132: PPUSH
52133: CALL_OW 437
52137: IFFALSE 52232
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52139: LD_STRING e
52141: PUSH
52142: LD_VAR 0 1
52146: PPUSH
52147: CALL_OW 437
52151: PUSH
52152: LD_INT 1
52154: ARRAY
52155: PUSH
52156: LD_INT 1
52158: ARRAY
52159: EQUAL
52160: PUSH
52161: LD_VAR 0 4
52165: PUSH
52166: LD_VAR 0 1
52170: PPUSH
52171: CALL_OW 437
52175: PUSH
52176: LD_INT 1
52178: ARRAY
52179: PUSH
52180: LD_INT 2
52182: ARRAY
52183: EQUAL
52184: AND
52185: PUSH
52186: LD_VAR 0 5
52190: PUSH
52191: LD_VAR 0 1
52195: PPUSH
52196: CALL_OW 437
52200: PUSH
52201: LD_INT 1
52203: ARRAY
52204: PUSH
52205: LD_INT 3
52207: ARRAY
52208: EQUAL
52209: AND
52210: IFFALSE 52222
// result := true else
52212: LD_ADDR_VAR 0 3
52216: PUSH
52217: LD_INT 1
52219: ST_TO_ADDR
52220: GO 52230
// result := false ;
52222: LD_ADDR_VAR 0 3
52226: PUSH
52227: LD_INT 0
52229: ST_TO_ADDR
// end else
52230: GO 52240
// result := false ;
52232: LD_ADDR_VAR 0 3
52236: PUSH
52237: LD_INT 0
52239: ST_TO_ADDR
// end ;
52240: LD_VAR 0 3
52244: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52245: LD_INT 0
52247: PPUSH
52248: PPUSH
52249: PPUSH
52250: PPUSH
// if not unit or not area then
52251: LD_VAR 0 1
52255: NOT
52256: PUSH
52257: LD_VAR 0 2
52261: NOT
52262: OR
52263: IFFALSE 52267
// exit ;
52265: GO 52431
// tmp := AreaToList ( area , i ) ;
52267: LD_ADDR_VAR 0 6
52271: PUSH
52272: LD_VAR 0 2
52276: PPUSH
52277: LD_VAR 0 5
52281: PPUSH
52282: CALL_OW 517
52286: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52287: LD_ADDR_VAR 0 5
52291: PUSH
52292: DOUBLE
52293: LD_INT 1
52295: DEC
52296: ST_TO_ADDR
52297: LD_VAR 0 6
52301: PUSH
52302: LD_INT 1
52304: ARRAY
52305: PUSH
52306: FOR_TO
52307: IFFALSE 52429
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52309: LD_ADDR_VAR 0 7
52313: PUSH
52314: LD_VAR 0 6
52318: PUSH
52319: LD_INT 1
52321: ARRAY
52322: PUSH
52323: LD_VAR 0 5
52327: ARRAY
52328: PUSH
52329: LD_VAR 0 6
52333: PUSH
52334: LD_INT 2
52336: ARRAY
52337: PUSH
52338: LD_VAR 0 5
52342: ARRAY
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52348: LD_VAR 0 7
52352: PUSH
52353: LD_INT 1
52355: ARRAY
52356: PPUSH
52357: LD_VAR 0 7
52361: PUSH
52362: LD_INT 2
52364: ARRAY
52365: PPUSH
52366: CALL_OW 428
52370: PUSH
52371: LD_INT 0
52373: EQUAL
52374: IFFALSE 52427
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52376: LD_VAR 0 1
52380: PPUSH
52381: LD_VAR 0 7
52385: PUSH
52386: LD_INT 1
52388: ARRAY
52389: PPUSH
52390: LD_VAR 0 7
52394: PUSH
52395: LD_INT 2
52397: ARRAY
52398: PPUSH
52399: LD_VAR 0 3
52403: PPUSH
52404: CALL_OW 48
// result := IsPlaced ( unit ) ;
52408: LD_ADDR_VAR 0 4
52412: PUSH
52413: LD_VAR 0 1
52417: PPUSH
52418: CALL_OW 305
52422: ST_TO_ADDR
// exit ;
52423: POP
52424: POP
52425: GO 52431
// end ; end ;
52427: GO 52306
52429: POP
52430: POP
// end ;
52431: LD_VAR 0 4
52435: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52436: LD_INT 0
52438: PPUSH
52439: PPUSH
52440: PPUSH
// if not side or side > 8 then
52441: LD_VAR 0 1
52445: NOT
52446: PUSH
52447: LD_VAR 0 1
52451: PUSH
52452: LD_INT 8
52454: GREATER
52455: OR
52456: IFFALSE 52460
// exit ;
52458: GO 52647
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52460: LD_ADDR_VAR 0 4
52464: PUSH
52465: LD_INT 22
52467: PUSH
52468: LD_VAR 0 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 21
52479: PUSH
52480: LD_INT 3
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PPUSH
52491: CALL_OW 69
52495: ST_TO_ADDR
// if not tmp then
52496: LD_VAR 0 4
52500: NOT
52501: IFFALSE 52505
// exit ;
52503: GO 52647
// enable_addtolog := true ;
52505: LD_ADDR_OWVAR 81
52509: PUSH
52510: LD_INT 1
52512: ST_TO_ADDR
// AddToLog ( [ ) ;
52513: LD_STRING [
52515: PPUSH
52516: CALL_OW 561
// for i in tmp do
52520: LD_ADDR_VAR 0 3
52524: PUSH
52525: LD_VAR 0 4
52529: PUSH
52530: FOR_IN
52531: IFFALSE 52638
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52533: LD_STRING [
52535: PUSH
52536: LD_VAR 0 3
52540: PPUSH
52541: CALL_OW 266
52545: STR
52546: PUSH
52547: LD_STRING , 
52549: STR
52550: PUSH
52551: LD_VAR 0 3
52555: PPUSH
52556: CALL_OW 250
52560: STR
52561: PUSH
52562: LD_STRING , 
52564: STR
52565: PUSH
52566: LD_VAR 0 3
52570: PPUSH
52571: CALL_OW 251
52575: STR
52576: PUSH
52577: LD_STRING , 
52579: STR
52580: PUSH
52581: LD_VAR 0 3
52585: PPUSH
52586: CALL_OW 254
52590: STR
52591: PUSH
52592: LD_STRING , 
52594: STR
52595: PUSH
52596: LD_VAR 0 3
52600: PPUSH
52601: LD_INT 1
52603: PPUSH
52604: CALL_OW 268
52608: STR
52609: PUSH
52610: LD_STRING , 
52612: STR
52613: PUSH
52614: LD_VAR 0 3
52618: PPUSH
52619: LD_INT 2
52621: PPUSH
52622: CALL_OW 268
52626: STR
52627: PUSH
52628: LD_STRING ],
52630: STR
52631: PPUSH
52632: CALL_OW 561
// end ;
52636: GO 52530
52638: POP
52639: POP
// AddToLog ( ]; ) ;
52640: LD_STRING ];
52642: PPUSH
52643: CALL_OW 561
// end ;
52647: LD_VAR 0 2
52651: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52652: LD_INT 0
52654: PPUSH
52655: PPUSH
52656: PPUSH
52657: PPUSH
52658: PPUSH
// if not area or not rate or not max then
52659: LD_VAR 0 1
52663: NOT
52664: PUSH
52665: LD_VAR 0 2
52669: NOT
52670: OR
52671: PUSH
52672: LD_VAR 0 4
52676: NOT
52677: OR
52678: IFFALSE 52682
// exit ;
52680: GO 52874
// while 1 do
52682: LD_INT 1
52684: IFFALSE 52874
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52686: LD_ADDR_VAR 0 9
52690: PUSH
52691: LD_VAR 0 1
52695: PPUSH
52696: LD_INT 1
52698: PPUSH
52699: CALL_OW 287
52703: PUSH
52704: LD_INT 10
52706: MUL
52707: ST_TO_ADDR
// r := rate / 10 ;
52708: LD_ADDR_VAR 0 7
52712: PUSH
52713: LD_VAR 0 2
52717: PUSH
52718: LD_INT 10
52720: DIVREAL
52721: ST_TO_ADDR
// time := 1 1$00 ;
52722: LD_ADDR_VAR 0 8
52726: PUSH
52727: LD_INT 2100
52729: ST_TO_ADDR
// if amount < min then
52730: LD_VAR 0 9
52734: PUSH
52735: LD_VAR 0 3
52739: LESS
52740: IFFALSE 52758
// r := r * 2 else
52742: LD_ADDR_VAR 0 7
52746: PUSH
52747: LD_VAR 0 7
52751: PUSH
52752: LD_INT 2
52754: MUL
52755: ST_TO_ADDR
52756: GO 52784
// if amount > max then
52758: LD_VAR 0 9
52762: PUSH
52763: LD_VAR 0 4
52767: GREATER
52768: IFFALSE 52784
// r := r / 2 ;
52770: LD_ADDR_VAR 0 7
52774: PUSH
52775: LD_VAR 0 7
52779: PUSH
52780: LD_INT 2
52782: DIVREAL
52783: ST_TO_ADDR
// time := time / r ;
52784: LD_ADDR_VAR 0 8
52788: PUSH
52789: LD_VAR 0 8
52793: PUSH
52794: LD_VAR 0 7
52798: DIVREAL
52799: ST_TO_ADDR
// if time < 0 then
52800: LD_VAR 0 8
52804: PUSH
52805: LD_INT 0
52807: LESS
52808: IFFALSE 52825
// time := time * - 1 ;
52810: LD_ADDR_VAR 0 8
52814: PUSH
52815: LD_VAR 0 8
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: MUL
52824: ST_TO_ADDR
// wait ( time ) ;
52825: LD_VAR 0 8
52829: PPUSH
52830: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52834: LD_INT 35
52836: PPUSH
52837: LD_INT 875
52839: PPUSH
52840: CALL_OW 12
52844: PPUSH
52845: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52849: LD_INT 1
52851: PPUSH
52852: LD_INT 5
52854: PPUSH
52855: CALL_OW 12
52859: PPUSH
52860: LD_VAR 0 1
52864: PPUSH
52865: LD_INT 1
52867: PPUSH
52868: CALL_OW 55
// end ;
52872: GO 52682
// end ;
52874: LD_VAR 0 5
52878: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52879: LD_INT 0
52881: PPUSH
52882: PPUSH
52883: PPUSH
52884: PPUSH
52885: PPUSH
52886: PPUSH
52887: PPUSH
52888: PPUSH
// if not turrets or not factories then
52889: LD_VAR 0 1
52893: NOT
52894: PUSH
52895: LD_VAR 0 2
52899: NOT
52900: OR
52901: IFFALSE 52905
// exit ;
52903: GO 53212
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52905: LD_ADDR_VAR 0 10
52909: PUSH
52910: LD_INT 5
52912: PUSH
52913: LD_INT 6
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 4
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: LD_INT 5
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 24
52947: PUSH
52948: LD_INT 25
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 23
52957: PUSH
52958: LD_INT 27
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 42
52971: PUSH
52972: LD_INT 43
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 44
52981: PUSH
52982: LD_INT 46
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 45
52991: PUSH
52992: LD_INT 47
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: LIST
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: ST_TO_ADDR
// result := [ ] ;
53009: LD_ADDR_VAR 0 3
53013: PUSH
53014: EMPTY
53015: ST_TO_ADDR
// for i in turrets do
53016: LD_ADDR_VAR 0 4
53020: PUSH
53021: LD_VAR 0 1
53025: PUSH
53026: FOR_IN
53027: IFFALSE 53210
// begin nat := GetNation ( i ) ;
53029: LD_ADDR_VAR 0 7
53033: PUSH
53034: LD_VAR 0 4
53038: PPUSH
53039: CALL_OW 248
53043: ST_TO_ADDR
// weapon := 0 ;
53044: LD_ADDR_VAR 0 8
53048: PUSH
53049: LD_INT 0
53051: ST_TO_ADDR
// if not nat then
53052: LD_VAR 0 7
53056: NOT
53057: IFFALSE 53061
// continue ;
53059: GO 53026
// for j in list [ nat ] do
53061: LD_ADDR_VAR 0 5
53065: PUSH
53066: LD_VAR 0 10
53070: PUSH
53071: LD_VAR 0 7
53075: ARRAY
53076: PUSH
53077: FOR_IN
53078: IFFALSE 53119
// if GetBWeapon ( i ) = j [ 1 ] then
53080: LD_VAR 0 4
53084: PPUSH
53085: CALL_OW 269
53089: PUSH
53090: LD_VAR 0 5
53094: PUSH
53095: LD_INT 1
53097: ARRAY
53098: EQUAL
53099: IFFALSE 53117
// begin weapon := j [ 2 ] ;
53101: LD_ADDR_VAR 0 8
53105: PUSH
53106: LD_VAR 0 5
53110: PUSH
53111: LD_INT 2
53113: ARRAY
53114: ST_TO_ADDR
// break ;
53115: GO 53119
// end ;
53117: GO 53077
53119: POP
53120: POP
// if not weapon then
53121: LD_VAR 0 8
53125: NOT
53126: IFFALSE 53130
// continue ;
53128: GO 53026
// for k in factories do
53130: LD_ADDR_VAR 0 6
53134: PUSH
53135: LD_VAR 0 2
53139: PUSH
53140: FOR_IN
53141: IFFALSE 53206
// begin weapons := AvailableWeaponList ( k ) ;
53143: LD_ADDR_VAR 0 9
53147: PUSH
53148: LD_VAR 0 6
53152: PPUSH
53153: CALL_OW 478
53157: ST_TO_ADDR
// if not weapons then
53158: LD_VAR 0 9
53162: NOT
53163: IFFALSE 53167
// continue ;
53165: GO 53140
// if weapon in weapons then
53167: LD_VAR 0 8
53171: PUSH
53172: LD_VAR 0 9
53176: IN
53177: IFFALSE 53204
// begin result := [ i , weapon ] ;
53179: LD_ADDR_VAR 0 3
53183: PUSH
53184: LD_VAR 0 4
53188: PUSH
53189: LD_VAR 0 8
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: ST_TO_ADDR
// exit ;
53198: POP
53199: POP
53200: POP
53201: POP
53202: GO 53212
// end ; end ;
53204: GO 53140
53206: POP
53207: POP
// end ;
53208: GO 53026
53210: POP
53211: POP
// end ;
53212: LD_VAR 0 3
53216: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53217: LD_INT 0
53219: PPUSH
// if not side or side > 8 then
53220: LD_VAR 0 3
53224: NOT
53225: PUSH
53226: LD_VAR 0 3
53230: PUSH
53231: LD_INT 8
53233: GREATER
53234: OR
53235: IFFALSE 53239
// exit ;
53237: GO 53298
// if not range then
53239: LD_VAR 0 4
53243: NOT
53244: IFFALSE 53255
// range := - 12 ;
53246: LD_ADDR_VAR 0 4
53250: PUSH
53251: LD_INT 12
53253: NEG
53254: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53255: LD_VAR 0 1
53259: PPUSH
53260: LD_VAR 0 2
53264: PPUSH
53265: LD_VAR 0 3
53269: PPUSH
53270: LD_VAR 0 4
53274: PPUSH
53275: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53279: LD_VAR 0 1
53283: PPUSH
53284: LD_VAR 0 2
53288: PPUSH
53289: LD_VAR 0 3
53293: PPUSH
53294: CALL_OW 331
// end ;
53298: LD_VAR 0 5
53302: RET
// export function Video ( mode ) ; begin
53303: LD_INT 0
53305: PPUSH
// ingame_video = mode ;
53306: LD_ADDR_OWVAR 52
53310: PUSH
53311: LD_VAR 0 1
53315: ST_TO_ADDR
// interface_hidden = mode ;
53316: LD_ADDR_OWVAR 54
53320: PUSH
53321: LD_VAR 0 1
53325: ST_TO_ADDR
// end ;
53326: LD_VAR 0 2
53330: RET
// export function Join ( array , element ) ; begin
53331: LD_INT 0
53333: PPUSH
// result := array ^ element ;
53334: LD_ADDR_VAR 0 3
53338: PUSH
53339: LD_VAR 0 1
53343: PUSH
53344: LD_VAR 0 2
53348: ADD
53349: ST_TO_ADDR
// end ;
53350: LD_VAR 0 3
53354: RET
// export function JoinUnion ( array , element ) ; begin
53355: LD_INT 0
53357: PPUSH
// result := array union element ;
53358: LD_ADDR_VAR 0 3
53362: PUSH
53363: LD_VAR 0 1
53367: PUSH
53368: LD_VAR 0 2
53372: UNION
53373: ST_TO_ADDR
// end ;
53374: LD_VAR 0 3
53378: RET
// export function GetBehemoths ( side ) ; begin
53379: LD_INT 0
53381: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53382: LD_ADDR_VAR 0 2
53386: PUSH
53387: LD_INT 22
53389: PUSH
53390: LD_VAR 0 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 31
53401: PUSH
53402: LD_INT 25
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PPUSH
53413: CALL_OW 69
53417: ST_TO_ADDR
// end ;
53418: LD_VAR 0 2
53422: RET
// export function Shuffle ( array ) ; var i , index ; begin
53423: LD_INT 0
53425: PPUSH
53426: PPUSH
53427: PPUSH
// result := [ ] ;
53428: LD_ADDR_VAR 0 2
53432: PUSH
53433: EMPTY
53434: ST_TO_ADDR
// if not array then
53435: LD_VAR 0 1
53439: NOT
53440: IFFALSE 53444
// exit ;
53442: GO 53543
// Randomize ;
53444: CALL_OW 10
// for i = array downto 1 do
53448: LD_ADDR_VAR 0 3
53452: PUSH
53453: DOUBLE
53454: LD_VAR 0 1
53458: INC
53459: ST_TO_ADDR
53460: LD_INT 1
53462: PUSH
53463: FOR_DOWNTO
53464: IFFALSE 53541
// begin index := rand ( 1 , array ) ;
53466: LD_ADDR_VAR 0 4
53470: PUSH
53471: LD_INT 1
53473: PPUSH
53474: LD_VAR 0 1
53478: PPUSH
53479: CALL_OW 12
53483: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53484: LD_ADDR_VAR 0 2
53488: PUSH
53489: LD_VAR 0 2
53493: PPUSH
53494: LD_VAR 0 2
53498: PUSH
53499: LD_INT 1
53501: PLUS
53502: PPUSH
53503: LD_VAR 0 1
53507: PUSH
53508: LD_VAR 0 4
53512: ARRAY
53513: PPUSH
53514: CALL_OW 2
53518: ST_TO_ADDR
// array := Delete ( array , index ) ;
53519: LD_ADDR_VAR 0 1
53523: PUSH
53524: LD_VAR 0 1
53528: PPUSH
53529: LD_VAR 0 4
53533: PPUSH
53534: CALL_OW 3
53538: ST_TO_ADDR
// end ;
53539: GO 53463
53541: POP
53542: POP
// end ;
53543: LD_VAR 0 2
53547: RET
// export function GetBaseMaterials ( base ) ; begin
53548: LD_INT 0
53550: PPUSH
// result := [ 0 , 0 , 0 ] ;
53551: LD_ADDR_VAR 0 2
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: LIST
53569: ST_TO_ADDR
// if not base then
53570: LD_VAR 0 1
53574: NOT
53575: IFFALSE 53579
// exit ;
53577: GO 53628
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53579: LD_ADDR_VAR 0 2
53583: PUSH
53584: LD_VAR 0 1
53588: PPUSH
53589: LD_INT 1
53591: PPUSH
53592: CALL_OW 275
53596: PUSH
53597: LD_VAR 0 1
53601: PPUSH
53602: LD_INT 2
53604: PPUSH
53605: CALL_OW 275
53609: PUSH
53610: LD_VAR 0 1
53614: PPUSH
53615: LD_INT 3
53617: PPUSH
53618: CALL_OW 275
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: LIST
53627: ST_TO_ADDR
// end ;
53628: LD_VAR 0 2
53632: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53633: LD_INT 0
53635: PPUSH
53636: PPUSH
// result := array ;
53637: LD_ADDR_VAR 0 3
53641: PUSH
53642: LD_VAR 0 1
53646: ST_TO_ADDR
// if size > 0 then
53647: LD_VAR 0 2
53651: PUSH
53652: LD_INT 0
53654: GREATER
53655: IFFALSE 53701
// for i := array downto size do
53657: LD_ADDR_VAR 0 4
53661: PUSH
53662: DOUBLE
53663: LD_VAR 0 1
53667: INC
53668: ST_TO_ADDR
53669: LD_VAR 0 2
53673: PUSH
53674: FOR_DOWNTO
53675: IFFALSE 53699
// result := Delete ( result , result ) ;
53677: LD_ADDR_VAR 0 3
53681: PUSH
53682: LD_VAR 0 3
53686: PPUSH
53687: LD_VAR 0 3
53691: PPUSH
53692: CALL_OW 3
53696: ST_TO_ADDR
53697: GO 53674
53699: POP
53700: POP
// end ;
53701: LD_VAR 0 3
53705: RET
// export function ComExit ( unit ) ; var tmp ; begin
53706: LD_INT 0
53708: PPUSH
53709: PPUSH
// if not IsInUnit ( unit ) then
53710: LD_VAR 0 1
53714: PPUSH
53715: CALL_OW 310
53719: NOT
53720: IFFALSE 53724
// exit ;
53722: GO 53784
// tmp := IsInUnit ( unit ) ;
53724: LD_ADDR_VAR 0 3
53728: PUSH
53729: LD_VAR 0 1
53733: PPUSH
53734: CALL_OW 310
53738: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53739: LD_VAR 0 3
53743: PPUSH
53744: CALL_OW 247
53748: PUSH
53749: LD_INT 2
53751: EQUAL
53752: IFFALSE 53765
// ComExitVehicle ( unit ) else
53754: LD_VAR 0 1
53758: PPUSH
53759: CALL_OW 121
53763: GO 53774
// ComExitBuilding ( unit ) ;
53765: LD_VAR 0 1
53769: PPUSH
53770: CALL_OW 122
// result := tmp ;
53774: LD_ADDR_VAR 0 2
53778: PUSH
53779: LD_VAR 0 3
53783: ST_TO_ADDR
// end ;
53784: LD_VAR 0 2
53788: RET
// export function ResetHc ; begin
53789: LD_INT 0
53791: PPUSH
// InitHc ;
53792: CALL_OW 19
// hc_importance := 0 ;
53796: LD_ADDR_OWVAR 32
53800: PUSH
53801: LD_INT 0
53803: ST_TO_ADDR
// end ;
53804: LD_VAR 0 1
53808: RET
