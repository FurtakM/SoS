// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; export buildedLab ; export achievement_DestroyedHovercrafts ; export achievement_CollectedCrates ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 250 0 0
// omarStatus = 0 ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// stevensStatus = 0 ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// labDestroyed = 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  48: LD_ADDR_EXP 5
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  55: LD_ADDR_EXP 6
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  62: LD_ADDR_EXP 4
  66: PUSH
  67: LD_STRING 05_TanksIntro_1
  69: PPUSH
  70: EMPTY
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// actionTime = 0 0$00 ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  85: LD_ADDR_EXP 10
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
  93: LD_ADDR_EXP 11
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// sawArabianBase = false ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// sawApeman = false ;
 109: LD_ADDR_EXP 9
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// stevensPlaced = false ;
 117: LD_ADDR_EXP 14
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// stevensFollow = false ;
 125: LD_ADDR_EXP 15
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// stevensDepot = false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// stevensWasInDepot = false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// stevensCanExitMap = false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// cratesSpawned = 0 ;
 165: LD_ADDR_EXP 22
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// fastBreakthrough = false ;
 173: LD_ADDR_EXP 23
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// finishMissionBool = false ;
 181: LD_ADDR_EXP 24
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// buildedLab = false ;
 189: LD_ADDR_EXP 25
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// omarCanExitMap = false ;
 197: LD_ADDR_EXP 20
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// arabianCanExitMap = false ;
 205: LD_ADDR_EXP 21
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// achievement_DestroyedHovercrafts = 0 ;
 213: LD_ADDR_EXP 26
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// achievement_CollectedCrates = false ;
 221: LD_ADDR_EXP 27
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// PrepareRussians ;
 229: CALL 921 0 0
// PrepareArabians ;
 233: CALL 1668 0 0
// Nef_PrepareNature ;
 237: CALL 20050 0 0
// MissionIntro ;
 241: CALL 3006 0 0
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function InitMapConfig ; begin
 250: LD_INT 0
 252: PPUSH
// BaseMapConfig ;
 253: CALL 266 0 0
// MissionMapConfig ;
 257: CALL 356 0 0
// end ;
 261: LD_VAR 0 1
 265: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 266: LD_INT 0
 268: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 269: LD_ADDR_EXP 28
 273: PUSH
 274: LD_INT 4
 276: PUSH
 277: LD_INT 3
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 296: LD_ADDR_EXP 29
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 2
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: ST_TO_ADDR
// animalsAgression = 0 ;
 319: LD_ADDR_EXP 30
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// debugMode = 0 ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// missionPrefix = 05_ ;
 335: LD_ADDR_EXP 31
 339: PUSH
 340: LD_STRING 05_
 342: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 343: LD_ADDR_EXP 32
 347: PUSH
 348: LD_STRING 04_
 350: ST_TO_ADDR
// end ;
 351: LD_VAR 0 1
 355: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 356: LD_INT 0
 358: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 , 5 ] [ Difficulty ] ;
 359: LD_ADDR_EXP 34
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 3
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: LD_INT 5
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: PUSH
 382: LD_OWVAR 67
 386: ARRAY
 387: ST_TO_ADDR
// arabBreakthrough = [ 70 70$0 , 65 65$0 , 60 60$0 , 55 55$0 ] [ Difficulty ] ;
 388: LD_ADDR_EXP 35
 392: PUSH
 393: LD_INT 147000
 395: PUSH
 396: LD_INT 136500
 398: PUSH
 399: LD_INT 126000
 401: PUSH
 402: LD_INT 115500
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_OWVAR 67
 415: ARRAY
 416: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 417: LD_ADDR_EXP 36
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: LD_INT 1
 427: PUSH
 428: LD_INT 6
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: ST_TO_ADDR
// arabianPatrolVehiclesAmount = 1 ;
 440: LD_ADDR_EXP 37
 444: PUSH
 445: LD_INT 1
 447: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 , 3 ] [ Difficulty ] ;
 448: LD_ADDR_EXP 38
 452: PUSH
 453: LD_INT 2
 455: PUSH
 456: LD_INT 3
 458: PUSH
 459: LD_INT 3
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: PUSH
 471: LD_OWVAR 67
 475: ARRAY
 476: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 477: LD_ADDR_EXP 39
 481: PUSH
 482: LD_INT 108
 484: PUSH
 485: LD_INT 15
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 102
 494: PUSH
 495: LD_INT 45
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 65
 504: PUSH
 505: LD_INT 23
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 37
 514: PUSH
 515: LD_INT 28
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 32
 524: PUSH
 525: LD_INT 40
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 45
 534: PUSH
 535: LD_INT 74
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 69
 544: PUSH
 545: LD_INT 98
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 101
 554: PUSH
 555: LD_INT 101
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 117
 564: PUSH
 565: LD_INT 84
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: PUSH
 572: LD_INT 158
 574: PUSH
 575: LD_INT 132
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// end ;
 594: LD_VAR 0 1
 598: RET
// every 0 0$1 trigger debugMode do var i ;
 599: LD_EXP 33
 603: IFFALSE 918
 605: GO 607
 607: DISABLE
 608: LD_INT 0
 610: PPUSH
// begin enable ;
 611: ENABLE
// FogOff ( your_side ) ;
 612: LD_OWVAR 2
 616: PPUSH
 617: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 621: LD_ADDR_VAR 0 1
 625: PUSH
 626: LD_INT 22
 628: PUSH
 629: LD_OWVAR 2
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 2
 640: PUSH
 641: LD_INT 21
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 21
 653: PUSH
 654: LD_INT 2
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: LIST
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PPUSH
 670: CALL_OW 69
 674: PUSH
 675: FOR_IN
 676: IFFALSE 692
// SetLives ( i , 1000 ) ;
 678: LD_VAR 0 1
 682: PPUSH
 683: LD_INT 1000
 685: PPUSH
 686: CALL_OW 234
 690: GO 675
 692: POP
 693: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 694: LD_ADDR_VAR 0 1
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_OWVAR 2
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PPUSH
 725: CALL_OW 69
 729: PUSH
 730: FOR_IN
 731: IFFALSE 795
// begin SetSkill ( i , skill_combat , 10 ) ;
 733: LD_VAR 0 1
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 10
 743: PPUSH
 744: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 748: LD_VAR 0 1
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: LD_INT 10
 758: PPUSH
 759: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 763: LD_VAR 0 1
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: LD_INT 10
 773: PPUSH
 774: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 778: LD_VAR 0 1
 782: PPUSH
 783: LD_INT 4
 785: PPUSH
 786: LD_INT 10
 788: PPUSH
 789: CALL_OW 237
// end ;
 793: GO 730
 795: POP
 796: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 797: LD_ADDR_VAR 0 1
 801: PUSH
 802: LD_INT 22
 804: PUSH
 805: LD_OWVAR 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 2
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 0
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 30
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PPUSH
 846: CALL_OW 69
 850: PUSH
 851: FOR_IN
 852: IFFALSE 916
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 854: LD_VAR 0 1
 858: PPUSH
 859: CALL_OW 274
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_INT 9999
 869: PPUSH
 870: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 874: LD_VAR 0 1
 878: PPUSH
 879: CALL_OW 274
 883: PPUSH
 884: LD_INT 2
 886: PPUSH
 887: LD_INT 9999
 889: PPUSH
 890: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 274
 903: PPUSH
 904: LD_INT 3
 906: PPUSH
 907: LD_INT 9999
 909: PPUSH
 910: CALL_OW 277
// end ;
 914: GO 851
 916: POP
 917: POP
// end ; end_of_file
 918: PPOPN 1
 920: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 921: LD_INT 0
 923: PPUSH
// PrepareHeroes ;
 924: CALL 933 0 0
// end ;
 928: LD_VAR 0 1
 932: RET
// function PrepareHeroes ; var i , car ; begin
 933: LD_INT 0
 935: PPUSH
 936: PPUSH
 937: PPUSH
// ruCars = [ ] ;
 938: LD_ADDR_EXP 49
 942: PUSH
 943: EMPTY
 944: ST_TO_ADDR
// uc_side = 3 ;
 945: LD_ADDR_OWVAR 20
 949: PUSH
 950: LD_INT 3
 952: ST_TO_ADDR
// uc_nation = 3 ;
 953: LD_ADDR_OWVAR 21
 957: PUSH
 958: LD_INT 3
 960: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 961: LD_ADDR_EXP 40
 965: PUSH
 966: LD_STRING Burlak
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: LD_INT 3
 974: PPUSH
 975: CALL 8546 0 3
 979: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 980: LD_ADDR_EXP 45
 984: PUSH
 985: LD_STRING Titov
 987: PPUSH
 988: LD_INT 0
 990: PPUSH
 991: LD_INT 1
 993: PPUSH
 994: CALL 8546 0 3
 998: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 999: LD_ADDR_EXP 46
1003: PUSH
1004: LD_STRING Dolgov
1006: PPUSH
1007: LD_INT 0
1009: PPUSH
1010: LD_INT 4
1012: PPUSH
1013: CALL 8546 0 3
1017: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
1018: LD_ADDR_EXP 47
1022: PUSH
1023: LD_STRING Lipshchin
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: CALL 8546 0 3
1036: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1037: LD_ADDR_EXP 41
1041: PUSH
1042: LD_STRING Karamazov
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_INT 2
1050: PPUSH
1051: CALL 8546 0 3
1055: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1056: LD_ADDR_EXP 42
1060: PUSH
1061: LD_STRING Petrovova
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: CALL 8546 0 3
1074: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1075: LD_ADDR_EXP 43
1079: PUSH
1080: LD_STRING Gleb
1082: PPUSH
1083: LD_INT 0
1085: PPUSH
1086: LD_INT 1
1088: PPUSH
1089: CALL 8546 0 3
1093: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1094: LD_ADDR_EXP 44
1098: PUSH
1099: LD_STRING Petrosyan
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: LD_INT 4
1107: PPUSH
1108: CALL 8546 0 3
1112: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1113: LD_ADDR_EXP 48
1117: PUSH
1118: LD_STRING Platonov
1120: PPUSH
1121: LD_INT 0
1123: PPUSH
1124: LD_INT 0
1126: PPUSH
1127: CALL 8546 0 3
1131: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1132: LD_ADDR_VAR 0 2
1136: PUSH
1137: DOUBLE
1138: LD_INT 1
1140: DEC
1141: ST_TO_ADDR
1142: LD_EXP 4
1146: PUSH
1147: FOR_TO
1148: IFFALSE 1526
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1150: LD_ADDR_OWVAR 37
1154: PUSH
1155: LD_EXP 4
1159: PUSH
1160: LD_VAR 0 2
1164: ARRAY
1165: PUSH
1166: LD_INT 1
1168: ARRAY
1169: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1170: LD_ADDR_OWVAR 39
1174: PUSH
1175: LD_EXP 4
1179: PUSH
1180: LD_VAR 0 2
1184: ARRAY
1185: PUSH
1186: LD_INT 2
1188: ARRAY
1189: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1190: LD_ADDR_OWVAR 38
1194: PUSH
1195: LD_EXP 4
1199: PUSH
1200: LD_VAR 0 2
1204: ARRAY
1205: PUSH
1206: LD_INT 3
1208: ARRAY
1209: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1210: LD_ADDR_OWVAR 40
1214: PUSH
1215: LD_EXP 4
1219: PUSH
1220: LD_VAR 0 2
1224: ARRAY
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1230: LD_ADDR_OWVAR 24
1234: PUSH
1235: LD_INT 3
1237: PPUSH
1238: LD_INT 4
1240: PPUSH
1241: CALL_OW 12
1245: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1246: LD_ADDR_OWVAR 41
1250: PUSH
1251: LD_INT 25
1253: PPUSH
1254: LD_INT 40
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
// car := CreateVehicle ;
1262: LD_ADDR_VAR 0 3
1266: PUSH
1267: CALL_OW 45
1271: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1272: LD_ADDR_EXP 49
1276: PUSH
1277: LD_EXP 49
1281: PUSH
1282: LD_VAR 0 3
1286: ADD
1287: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1288: LD_EXP 4
1292: PUSH
1293: LD_VAR 0 2
1297: ARRAY
1298: PUSH
1299: LD_INT 5
1301: ARRAY
1302: PUSH
1303: LD_STRING Bur
1305: DOUBLE
1306: EQUAL
1307: IFTRUE 1311
1309: GO 1328
1311: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1312: LD_EXP 40
1316: PPUSH
1317: LD_VAR 0 3
1321: PPUSH
1322: CALL_OW 52
1326: GO 1504
1328: LD_STRING Kar
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1353
1336: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1337: LD_EXP 41
1341: PPUSH
1342: LD_VAR 0 3
1346: PPUSH
1347: CALL_OW 52
1351: GO 1504
1353: LD_STRING Ptr
1355: DOUBLE
1356: EQUAL
1357: IFTRUE 1361
1359: GO 1378
1361: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1362: LD_EXP 42
1366: PPUSH
1367: LD_VAR 0 3
1371: PPUSH
1372: CALL_OW 52
1376: GO 1504
1378: LD_STRING Glb
1380: DOUBLE
1381: EQUAL
1382: IFTRUE 1386
1384: GO 1403
1386: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1387: LD_EXP 43
1391: PPUSH
1392: LD_VAR 0 3
1396: PPUSH
1397: CALL_OW 52
1401: GO 1504
1403: LD_STRING Pet
1405: DOUBLE
1406: EQUAL
1407: IFTRUE 1411
1409: GO 1428
1411: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1412: LD_EXP 44
1416: PPUSH
1417: LD_VAR 0 3
1421: PPUSH
1422: CALL_OW 52
1426: GO 1504
1428: LD_STRING Dol
1430: DOUBLE
1431: EQUAL
1432: IFTRUE 1436
1434: GO 1453
1436: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1437: LD_EXP 46
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: CALL_OW 52
1451: GO 1504
1453: LD_STRING Lip
1455: DOUBLE
1456: EQUAL
1457: IFTRUE 1461
1459: GO 1478
1461: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1462: LD_EXP 47
1466: PPUSH
1467: LD_VAR 0 3
1471: PPUSH
1472: CALL_OW 52
1476: GO 1504
1478: LD_STRING Tit
1480: DOUBLE
1481: EQUAL
1482: IFTRUE 1486
1484: GO 1503
1486: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1487: LD_EXP 45
1491: PPUSH
1492: LD_VAR 0 3
1496: PPUSH
1497: CALL_OW 52
1501: GO 1504
1503: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 251
1511: PPUSH
1512: LD_INT 800
1514: PPUSH
1515: CALL_OW 12
1519: PPUSH
1520: CALL_OW 234
// end ;
1524: GO 1147
1526: POP
1527: POP
// for i in ruCars do
1528: LD_ADDR_VAR 0 2
1532: PUSH
1533: LD_EXP 49
1537: PUSH
1538: FOR_IN
1539: IFFALSE 1558
// PlaceUnitArea ( i , ru_place2 , false ) ;
1541: LD_VAR 0 2
1545: PPUSH
1546: LD_INT 18
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 49
1556: GO 1538
1558: POP
1559: POP
// RevealFogArea ( 3 , co_vidi ) ;
1560: LD_INT 3
1562: PPUSH
1563: LD_INT 19
1565: PPUSH
1566: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1570: LD_EXP 49
1574: PPUSH
1575: LD_INT 3
1577: PPUSH
1578: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1582: LD_INT 4
1584: PPUSH
1585: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1589: LD_EXP 40
1593: PPUSH
1594: CALL_OW 310
1598: PPUSH
1599: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1603: LD_INT 3
1605: PPUSH
1606: LD_INT 22
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 70
1634: PUSH
1635: LD_INT 5
1637: LESS
1638: IFFALSE 1663
// begin wait ( 0 0$1 ) ;
1640: LD_INT 35
1642: PPUSH
1643: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1647: LD_EXP 40
1651: PPUSH
1652: CALL_OW 310
1656: PPUSH
1657: CALL_OW 85
// end ;
1661: GO 1603
// end ; end_of_file
1663: LD_VAR 0 1
1667: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts , arabianPatrolTroops ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1668: LD_INT 0
1670: PPUSH
// arabianUnitsInBase = [ ] ;
1671: LD_ADDR_EXP 52
1675: PUSH
1676: EMPTY
1677: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1678: LD_ADDR_EXP 54
1682: PUSH
1683: EMPTY
1684: ST_TO_ADDR
// arabianPatrolTroops = [ ] ;
1685: LD_ADDR_EXP 55
1689: PUSH
1690: EMPTY
1691: ST_TO_ADDR
// arabLeftExit = true ;
1692: LD_ADDR_EXP 56
1696: PUSH
1697: LD_INT 1
1699: ST_TO_ADDR
// PrepareHeroes ;
1700: CALL 1733 0 0
// PrepareBuildings ;
1704: CALL 1799 0 0
// PrepareUnits ;
1708: CALL 2157 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1712: LD_EXP 37
1716: PPUSH
1717: LD_INT 42
1719: PPUSH
1720: CALL 2694 0 2
// PrepareArabianHovercraft ;
1724: CALL 2853 0 0
// end ;
1728: LD_VAR 0 1
1732: RET
// function PrepareHeroes ; begin
1733: LD_INT 0
1735: PPUSH
// uc_side = 2 ;
1736: LD_ADDR_OWVAR 20
1740: PUSH
1741: LD_INT 2
1743: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1744: LD_ADDR_EXP 50
1748: PUSH
1749: LD_STRING Heike
1751: PPUSH
1752: LD_INT 0
1754: PPUSH
1755: LD_INT 0
1757: PPUSH
1758: CALL 8546 0 3
1762: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1763: LD_ADDR_EXP 51
1767: PUSH
1768: LD_STRING Omar
1770: PPUSH
1771: LD_INT 0
1773: PPUSH
1774: LD_INT 11
1776: PPUSH
1777: CALL 8546 0 3
1781: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1782: LD_EXP 51
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: CALL_OW 52
// end ;
1794: LD_VAR 0 1
1798: RET
// function PrepareBuildings ; var depot ; begin
1799: LD_INT 0
1801: PPUSH
1802: PPUSH
// uc_side = 2 ;
1803: LD_ADDR_OWVAR 20
1807: PUSH
1808: LD_INT 2
1810: ST_TO_ADDR
// uc_nation = nation_arabian ;
1811: LD_ADDR_OWVAR 21
1815: PUSH
1816: LD_INT 2
1818: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1819: LD_ADDR_OWVAR 43
1823: PUSH
1824: LD_EXP 34
1828: ST_TO_ADDR
// bc_type = b_breastwork ;
1829: LD_ADDR_OWVAR 42
1833: PUSH
1834: LD_INT 31
1836: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1837: LD_INT 118
1839: PPUSH
1840: LD_INT 63
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1850: LD_INT 120
1852: PPUSH
1853: LD_INT 66
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1863: LD_INT 123
1865: PPUSH
1866: LD_INT 73
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: CALL_OW 47
// if Difficulty = 2 then
1876: LD_OWVAR 67
1880: PUSH
1881: LD_INT 2
1883: EQUAL
1884: IFFALSE 1899
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1886: LD_INT 145
1888: PPUSH
1889: LD_INT 83
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 47
// if Difficulty >= 3 then
1899: LD_OWVAR 67
1903: PUSH
1904: LD_INT 3
1906: GREATEREQUAL
1907: IFFALSE 1935
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1909: LD_INT 145
1911: PPUSH
1912: LD_INT 83
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1922: LD_INT 151
1924: PPUSH
1925: LD_INT 81
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 47
// end ; bc_type = b_depot ;
1935: LD_ADDR_OWVAR 42
1939: PUSH
1940: LD_INT 0
1942: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1943: LD_ADDR_VAR 0 2
1947: PUSH
1948: LD_INT 124
1950: PPUSH
1951: LD_INT 60
1953: PPUSH
1954: LD_INT 2
1956: PPUSH
1957: CALL_OW 47
1961: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1962: LD_VAR 0 2
1966: PPUSH
1967: CALL_OW 274
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 3000
1977: PPUSH
1978: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1982: LD_INT 131
1984: PPUSH
1985: LD_INT 51
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: CALL_OW 441
// bc_type = b_oil_mine ;
1995: LD_ADDR_OWVAR 42
1999: PUSH
2000: LD_INT 29
2002: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
2003: LD_INT 131
2005: PPUSH
2006: LD_INT 51
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: CALL_OW 47
// case Difficulty of 1 :
2016: LD_OWVAR 67
2020: PUSH
2021: LD_INT 1
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2045
2029: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2030: LD_INT 48
2032: PPUSH
2033: LD_INT 2
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: CALL_OW 322
// end ; 2 :
2043: GO 2152
2045: LD_INT 2
2047: DOUBLE
2048: EQUAL
2049: IFTRUE 2053
2051: GO 2082
2053: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2054: LD_INT 48
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2067: LD_INT 51
2069: PPUSH
2070: LD_INT 2
2072: PPUSH
2073: LD_INT 2
2075: PPUSH
2076: CALL_OW 322
// end ; 3 .. 4 :
2080: GO 2152
2082: LD_INT 3
2084: DOUBLE
2085: GREATEREQUAL
2086: IFFALSE 2094
2088: LD_INT 4
2090: DOUBLE
2091: LESSEQUAL
2092: IFTRUE 2096
2094: GO 2151
2096: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2097: LD_INT 48
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 2
2105: PPUSH
2106: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2110: LD_INT 51
2112: PPUSH
2113: LD_INT 2
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2123: LD_INT 49
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: LD_INT 2
2131: PPUSH
2132: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2136: LD_INT 52
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: LD_INT 2
2144: PPUSH
2145: CALL_OW 322
// end ; end ;
2149: GO 2152
2151: POP
// end ;
2152: LD_VAR 0 1
2156: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2157: LD_INT 0
2159: PPUSH
2160: PPUSH
2161: PPUSH
2162: PPUSH
// uc_side = 2 ;
2163: LD_ADDR_OWVAR 20
2167: PUSH
2168: LD_INT 2
2170: ST_TO_ADDR
// uc_nation = 2 ;
2171: LD_ADDR_OWVAR 21
2175: PUSH
2176: LD_INT 2
2178: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2179: LD_ADDR_VAR 0 4
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 2
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 30
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PPUSH
2208: CALL_OW 69
2212: PUSH
2213: FOR_IN
2214: IFFALSE 2270
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2216: LD_INT 0
2218: PPUSH
2219: LD_EXP 34
2223: PPUSH
2224: CALL_OW 381
// unit = CreateHuman ;
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: CALL_OW 44
2237: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2238: LD_VAR 0 3
2242: PPUSH
2243: LD_VAR 0 4
2247: PPUSH
2248: CALL 9146 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2252: LD_ADDR_EXP 52
2256: PUSH
2257: LD_EXP 52
2261: PUSH
2262: LD_VAR 0 3
2266: ADD
2267: ST_TO_ADDR
// end ;
2268: GO 2213
2270: POP
2271: POP
// for i := 1 to arabianUnits [ 1 ] do
2272: LD_ADDR_VAR 0 2
2276: PUSH
2277: DOUBLE
2278: LD_INT 1
2280: DEC
2281: ST_TO_ADDR
2282: LD_EXP 36
2286: PUSH
2287: LD_INT 1
2289: ARRAY
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2349
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2294: LD_INT 0
2296: PPUSH
2297: LD_EXP 34
2301: PPUSH
2302: CALL_OW 381
// unit = CreateHuman ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: CALL_OW 44
2315: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2316: LD_VAR 0 3
2320: PPUSH
2321: LD_INT 38
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2331: LD_ADDR_EXP 52
2335: PUSH
2336: LD_EXP 52
2340: PUSH
2341: LD_VAR 0 3
2345: ADD
2346: ST_TO_ADDR
// end ;
2347: GO 2291
2349: POP
2350: POP
// for i := 1 to arabianUnits [ 2 ] do
2351: LD_ADDR_VAR 0 2
2355: PUSH
2356: DOUBLE
2357: LD_INT 1
2359: DEC
2360: ST_TO_ADDR
2361: LD_EXP 36
2365: PUSH
2366: LD_INT 2
2368: ARRAY
2369: PUSH
2370: FOR_TO
2371: IFFALSE 2428
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2373: LD_INT 0
2375: PPUSH
2376: LD_EXP 34
2380: PPUSH
2381: CALL_OW 382
// unit = CreateHuman ;
2385: LD_ADDR_VAR 0 3
2389: PUSH
2390: CALL_OW 44
2394: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2395: LD_VAR 0 3
2399: PPUSH
2400: LD_INT 38
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2410: LD_ADDR_EXP 52
2414: PUSH
2415: LD_EXP 52
2419: PUSH
2420: LD_VAR 0 3
2424: ADD
2425: ST_TO_ADDR
// end ;
2426: GO 2370
2428: POP
2429: POP
// for i := 1 to arabianUnits [ 3 ] do
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: DOUBLE
2436: LD_INT 1
2438: DEC
2439: ST_TO_ADDR
2440: LD_EXP 36
2444: PUSH
2445: LD_INT 3
2447: ARRAY
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2507
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2452: LD_INT 0
2454: PPUSH
2455: LD_EXP 34
2459: PPUSH
2460: CALL_OW 383
// unit = CreateHuman ;
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: CALL_OW 44
2473: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2474: LD_VAR 0 3
2478: PPUSH
2479: LD_INT 38
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2489: LD_ADDR_EXP 52
2493: PUSH
2494: LD_EXP 52
2498: PUSH
2499: LD_VAR 0 3
2503: ADD
2504: ST_TO_ADDR
// end ;
2505: GO 2449
2507: POP
2508: POP
// for i := 1 to arabianUnits [ 4 ] do
2509: LD_ADDR_VAR 0 2
2513: PUSH
2514: DOUBLE
2515: LD_INT 1
2517: DEC
2518: ST_TO_ADDR
2519: LD_EXP 36
2523: PUSH
2524: LD_INT 4
2526: ARRAY
2527: PUSH
2528: FOR_TO
2529: IFFALSE 2586
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2531: LD_INT 0
2533: PPUSH
2534: LD_EXP 34
2538: PPUSH
2539: CALL_OW 384
// unit = CreateHuman ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: CALL_OW 44
2552: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2553: LD_VAR 0 3
2557: PPUSH
2558: LD_INT 38
2560: PPUSH
2561: LD_INT 0
2563: PPUSH
2564: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2568: LD_ADDR_EXP 52
2572: PUSH
2573: LD_EXP 52
2577: PUSH
2578: LD_VAR 0 3
2582: ADD
2583: ST_TO_ADDR
// end ;
2584: GO 2528
2586: POP
2587: POP
// end ;
2588: LD_VAR 0 1
2592: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2593: LD_INT 0
2595: PPUSH
2596: PPUSH
2597: PPUSH
// uc_side = 2 ;
2598: LD_ADDR_OWVAR 20
2602: PUSH
2603: LD_INT 2
2605: ST_TO_ADDR
// uc_nation = 2 ;
2606: LD_ADDR_OWVAR 21
2610: PUSH
2611: LD_INT 2
2613: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_EXP 38
2628: PUSH
2629: FOR_TO
2630: IFFALSE 2687
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2632: LD_INT 0
2634: PPUSH
2635: LD_EXP 34
2639: PPUSH
2640: CALL_OW 381
// unit = CreateHuman ;
2644: LD_ADDR_VAR 0 3
2648: PUSH
2649: CALL_OW 44
2653: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 45
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// arabianPatrolTroops = arabianPatrolTroops ^ unit ;
2669: LD_ADDR_EXP 55
2673: PUSH
2674: LD_EXP 55
2678: PUSH
2679: LD_VAR 0 3
2683: ADD
2684: ST_TO_ADDR
// end ;
2685: GO 2629
2687: POP
2688: POP
// end ;
2689: LD_VAR 0 1
2693: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
2698: PPUSH
// uc_side = 2 ;
2699: LD_ADDR_OWVAR 20
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// uc_nation = 2 ;
2707: LD_ADDR_OWVAR 21
2711: PUSH
2712: LD_INT 2
2714: ST_TO_ADDR
// for i := 1 to amount do
2715: LD_ADDR_VAR 0 4
2719: PUSH
2720: DOUBLE
2721: LD_INT 1
2723: DEC
2724: ST_TO_ADDR
2725: LD_VAR 0 1
2729: PUSH
2730: FOR_TO
2731: IFFALSE 2846
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2733: LD_INT 14
2735: PPUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: LD_INT 26
2744: PUSH
2745: LD_INT 25
2747: PUSH
2748: LD_INT 27
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 3
2761: PPUSH
2762: CALL_OW 12
2766: ARRAY
2767: PPUSH
2768: LD_INT 100
2770: PPUSH
2771: CALL 26112 0 5
// veh = CreateVehicle ;
2775: LD_ADDR_VAR 0 5
2779: PUSH
2780: CALL_OW 45
2784: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2785: LD_ADDR_EXP 53
2789: PUSH
2790: LD_EXP 53
2794: PUSH
2795: LD_VAR 0 5
2799: ADD
2800: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2801: LD_VAR 0 5
2805: PPUSH
2806: LD_VAR 0 2
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2818: LD_INT 0
2820: PPUSH
2821: LD_EXP 34
2825: PPUSH
2826: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2830: CALL_OW 44
2834: PPUSH
2835: LD_VAR 0 5
2839: PPUSH
2840: CALL_OW 52
// end ;
2844: GO 2730
2846: POP
2847: POP
// end ;
2848: LD_VAR 0 3
2852: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2853: LD_INT 0
2855: PPUSH
2856: PPUSH
2857: PPUSH
// uc_side = 2 ;
2858: LD_ADDR_OWVAR 20
2862: PUSH
2863: LD_INT 2
2865: ST_TO_ADDR
// uc_nation = 2 ;
2866: LD_ADDR_OWVAR 21
2870: PUSH
2871: LD_INT 2
2873: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2874: LD_ADDR_VAR 0 2
2878: PUSH
2879: DOUBLE
2880: LD_INT 1
2882: DEC
2883: ST_TO_ADDR
2884: LD_EXP 37
2888: PUSH
2889: FOR_TO
2890: IFFALSE 2999
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2892: LD_INT 11
2894: PPUSH
2895: LD_INT 1
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 24
2903: PUSH
2904: LD_INT 23
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 1
2913: PPUSH
2914: LD_INT 2
2916: PPUSH
2917: CALL_OW 12
2921: ARRAY
2922: PPUSH
2923: LD_INT 100
2925: PPUSH
2926: CALL 26112 0 5
// veh = CreateVehicle ;
2930: LD_ADDR_VAR 0 3
2934: PUSH
2935: CALL_OW 45
2939: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2940: LD_ADDR_EXP 54
2944: PUSH
2945: LD_EXP 54
2949: PUSH
2950: LD_VAR 0 3
2954: ADD
2955: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2956: LD_VAR 0 3
2960: PPUSH
2961: LD_INT 47
2963: PPUSH
2964: LD_INT 0
2966: PPUSH
2967: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2971: LD_INT 0
2973: PPUSH
2974: LD_EXP 34
2978: PPUSH
2979: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2983: CALL_OW 44
2987: PPUSH
2988: LD_VAR 0 3
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2889
2999: POP
3000: POP
// end ; end_of_file
3001: LD_VAR 0 1
3005: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
3006: LD_INT 0
3008: PPUSH
3009: PPUSH
3010: PPUSH
3011: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
3012: LD_ADDR_VAR 0 3
3016: PUSH
3017: LD_INT 66
3019: PUSH
3020: LD_INT 87
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 66
3029: PUSH
3030: LD_INT 86
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 67
3039: PUSH
3040: LD_INT 86
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 69
3049: PUSH
3050: LD_INT 87
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: LD_INT 70
3059: PUSH
3060: LD_INT 88
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 71
3069: PUSH
3070: LD_INT 89
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: LD_INT 72
3079: PUSH
3080: LD_INT 90
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PUSH
3087: LD_INT 72
3089: PUSH
3090: LD_INT 91
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3107: LD_INT 280
3109: PPUSH
3110: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3114: LD_EXP 40
3118: PPUSH
3119: LD_STRING DStart-Bur-1
3121: PPUSH
3122: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3126: LD_EXP 48
3130: PPUSH
3131: LD_STRING DStart-Pla-1
3133: PPUSH
3134: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3138: LD_EXP 40
3142: PPUSH
3143: LD_STRING DStart-Bur-2
3145: PPUSH
3146: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3150: LD_EXP 48
3154: PPUSH
3155: LD_STRING DStart-Pla-2
3157: PPUSH
3158: CALL_OW 94
// x = 0 ;
3162: LD_ADDR_VAR 0 4
3166: PUSH
3167: LD_INT 0
3169: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3170: LD_ADDR_VAR 0 2
3174: PUSH
3175: LD_INT 22
3177: PUSH
3178: LD_INT 3
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 21
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PUSH
3204: FOR_IN
3205: IFFALSE 3293
// begin ComExitVehicle ( unit ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: CALL_OW 121
// wait ( 0 0$1 ) ;
3216: LD_INT 35
3218: PPUSH
3219: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3223: LD_VAR 0 2
3227: PPUSH
3228: LD_VAR 0 3
3232: PUSH
3233: LD_VAR 0 4
3237: ARRAY
3238: PUSH
3239: LD_INT 1
3241: ARRAY
3242: PPUSH
3243: LD_VAR 0 3
3247: PUSH
3248: LD_VAR 0 4
3252: ARRAY
3253: PUSH
3254: LD_INT 2
3256: ARRAY
3257: PPUSH
3258: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3262: LD_VAR 0 2
3266: PPUSH
3267: LD_INT 69
3269: PPUSH
3270: LD_INT 96
3272: PPUSH
3273: CALL_OW 178
// x = x + 1 ;
3277: LD_ADDR_VAR 0 4
3281: PUSH
3282: LD_VAR 0 4
3286: PUSH
3287: LD_INT 1
3289: PLUS
3290: ST_TO_ADDR
// end ;
3291: GO 3204
3293: POP
3294: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3295: LD_EXP 40
3299: PPUSH
3300: CALL_OW 87
// x = 0 ;
3304: LD_ADDR_VAR 0 4
3308: PUSH
3309: LD_INT 0
3311: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: LD_INT 22
3319: PUSH
3320: LD_INT 3
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 21
3329: PUSH
3330: LD_INT 1
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PPUSH
3341: CALL_OW 69
3345: PUSH
3346: FOR_IN
3347: IFFALSE 3419
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3349: LD_VAR 0 2
3353: PPUSH
3354: LD_VAR 0 3
3358: PUSH
3359: LD_VAR 0 4
3363: ARRAY
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_VAR 0 4
3378: ARRAY
3379: PUSH
3380: LD_INT 2
3382: ARRAY
3383: PPUSH
3384: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3388: LD_VAR 0 2
3392: PPUSH
3393: LD_INT 69
3395: PPUSH
3396: LD_INT 96
3398: PPUSH
3399: CALL_OW 178
// x = x + 1 ;
3403: LD_ADDR_VAR 0 4
3407: PUSH
3408: LD_VAR 0 4
3412: PUSH
3413: LD_INT 1
3415: PLUS
3416: ST_TO_ADDR
// end ;
3417: GO 3346
3419: POP
3420: POP
// wait ( 0 0$1 ) ;
3421: LD_INT 35
3423: PPUSH
3424: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3428: LD_EXP 40
3432: PPUSH
3433: LD_INT 70
3435: PPUSH
3436: LD_INT 90
3438: PPUSH
3439: CALL_OW 297
3443: PUSH
3444: LD_INT 7
3446: LESS
3447: PUSH
3448: LD_EXP 41
3452: PPUSH
3453: LD_INT 70
3455: PPUSH
3456: LD_INT 90
3458: PPUSH
3459: CALL_OW 297
3463: PUSH
3464: LD_INT 7
3466: LESS
3467: AND
3468: PUSH
3469: LD_EXP 42
3473: PPUSH
3474: LD_INT 70
3476: PPUSH
3477: LD_INT 90
3479: PPUSH
3480: CALL_OW 297
3484: PUSH
3485: LD_INT 7
3487: LESS
3488: AND
3489: PUSH
3490: LD_EXP 43
3494: PPUSH
3495: LD_INT 70
3497: PPUSH
3498: LD_INT 90
3500: PPUSH
3501: CALL_OW 297
3505: PUSH
3506: LD_INT 7
3508: LESS
3509: AND
3510: PUSH
3511: LD_EXP 47
3515: PPUSH
3516: LD_INT 70
3518: PPUSH
3519: LD_INT 90
3521: PPUSH
3522: CALL_OW 297
3526: PUSH
3527: LD_INT 7
3529: LESS
3530: AND
3531: IFFALSE 3295
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3533: LD_EXP 41
3537: PPUSH
3538: LD_STRING DDoubts-Kar-1
3540: PPUSH
3541: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3545: LD_EXP 42
3549: PPUSH
3550: LD_STRING DDoubts-Ptr-1
3552: PPUSH
3553: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-1 ) ;
3557: LD_EXP 40
3561: PPUSH
3562: LD_STRING DDoubts-Bur-1
3564: PPUSH
3565: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3569: LD_EXP 41
3573: PPUSH
3574: LD_STRING DDoubts-Kar-2
3576: PPUSH
3577: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3581: LD_EXP 43
3585: PPUSH
3586: LD_STRING DDoubts-Glb-2
3588: PPUSH
3589: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3593: LD_EXP 40
3597: PPUSH
3598: LD_STRING DDoubts-Bur-2
3600: PPUSH
3601: CALL_OW 88
// InGameOff ;
3605: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3609: LD_STRING MBegin
3611: PPUSH
3612: CALL_OW 337
// SaveForQuickRestart ;
3616: CALL_OW 22
// BuildBase ;
3620: CALL 10744 0 0
// end ;
3624: LD_VAR 0 1
3628: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3629: LD_EXP 8
3633: NOT
3634: IFFALSE 3894
3636: GO 3638
3638: DISABLE
3639: LD_INT 0
3641: PPUSH
// begin enable ;
3642: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3643: LD_ADDR_VAR 0 1
3647: PUSH
3648: LD_INT 34
3650: PPUSH
3651: LD_INT 22
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 21
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PPUSH
3675: CALL_OW 70
3679: PUSH
3680: FOR_IN
3681: IFFALSE 3892
// if See ( 3 , unit ) then
3683: LD_INT 3
3685: PPUSH
3686: LD_VAR 0 1
3690: PPUSH
3691: CALL_OW 292
3695: IFFALSE 3890
// begin sawArabianBase = true ;
3697: LD_ADDR_EXP 8
3701: PUSH
3702: LD_INT 1
3704: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3705: LD_VAR 0 1
3709: PPUSH
3710: CALL_OW 87
// DialogueOn ;
3714: CALL_OW 6
// if IsOk ( Lipshchin ) then
3718: LD_EXP 47
3722: PPUSH
3723: CALL_OW 302
3727: IFFALSE 3741
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3729: LD_EXP 47
3733: PPUSH
3734: LD_STRING DArabs-RSol1-1
3736: PPUSH
3737: CALL_OW 88
// if IsOk ( Karamazov ) then
3741: LD_EXP 41
3745: PPUSH
3746: CALL_OW 302
3750: IFFALSE 3764
// Say ( Karamazov , DArabs-Kar-1 ) ;
3752: LD_EXP 41
3756: PPUSH
3757: LD_STRING DArabs-Kar-1
3759: PPUSH
3760: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3764: LD_EXP 40
3768: PPUSH
3769: LD_STRING DArabs-Bur-1
3771: PPUSH
3772: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3776: LD_EXP 48
3780: PPUSH
3781: LD_STRING DArabs-Pla-1
3783: PPUSH
3784: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3788: LD_EXP 51
3792: PPUSH
3793: LD_STRING DSurrender-Omar-1
3795: PPUSH
3796: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3800: LD_STRING QSurrender
3802: PPUSH
3803: CALL_OW 97
3807: PUSH
3808: LD_INT 1
3810: DOUBLE
3811: EQUAL
3812: IFTRUE 3816
3814: GO 3835
3816: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3817: LD_EXP 40
3821: PPUSH
3822: LD_STRING DQrSurrender#1-Bur-1
3824: PPUSH
3825: CALL_OW 88
// Lose_Survive ;
3829: CALL 17411 0 0
// end ; 2 :
3833: GO 3882
3835: LD_INT 2
3837: DOUBLE
3838: EQUAL
3839: IFTRUE 3843
3841: GO 3858
3843: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3844: LD_EXP 40
3848: PPUSH
3849: LD_STRING DQrSurrender#2-Bur-1
3851: PPUSH
3852: CALL_OW 88
3856: GO 3882
3858: LD_INT 3
3860: DOUBLE
3861: EQUAL
3862: IFTRUE 3866
3864: GO 3881
3866: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3867: LD_EXP 40
3871: PPUSH
3872: LD_STRING DQrSurrender#3-Bur-1
3874: PPUSH
3875: CALL_OW 88
3879: GO 3882
3881: POP
// DialogueOff ;
3882: CALL_OW 7
// exit ;
3886: POP
3887: POP
3888: GO 3894
// end ;
3890: GO 3680
3892: POP
3893: POP
// end ;
3894: PPOPN 1
3896: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3897: LD_EXP 9
3901: NOT
3902: PUSH
3903: LD_INT 1
3905: PPUSH
3906: LD_INT 3
3908: PPUSH
3909: CALL_OW 321
3913: PUSH
3914: LD_INT 1
3916: EQUAL
3917: AND
3918: IFFALSE 4283
3920: GO 3922
3922: DISABLE
3923: LD_INT 0
3925: PPUSH
3926: PPUSH
// begin enable ;
3927: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3928: LD_ADDR_VAR 0 1
3932: PUSH
3933: LD_INT 22
3935: PUSH
3936: LD_INT 0
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PUSH
3943: LD_INT 25
3945: PUSH
3946: LD_INT 12
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: PPUSH
3957: CALL_OW 69
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4281
// if See ( 3 , unit ) then
3965: LD_INT 3
3967: PPUSH
3968: LD_VAR 0 1
3972: PPUSH
3973: CALL_OW 292
3977: IFFALSE 4279
// begin sawApeman = true ;
3979: LD_ADDR_EXP 9
3983: PUSH
3984: LD_INT 1
3986: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3987: LD_ADDR_VAR 0 2
3991: PUSH
3992: LD_INT 22
3994: PUSH
3995: LD_INT 3
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 21
4004: PUSH
4005: LD_INT 1
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 26
4014: PUSH
4015: LD_INT 1
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 50
4024: PUSH
4025: EMPTY
4026: LIST
4027: PUSH
4028: LD_INT 2
4030: PUSH
4031: LD_INT 25
4033: PUSH
4034: LD_INT 1
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PUSH
4041: LD_INT 25
4043: PUSH
4044: LD_INT 2
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 25
4053: PUSH
4054: LD_INT 3
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 25
4063: PUSH
4064: LD_INT 4
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 69
4089: PPUSH
4090: LD_VAR 0 1
4094: PPUSH
4095: CALL_OW 74
4099: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4100: LD_VAR 0 1
4104: PPUSH
4105: CALL_OW 87
// DialogueOn ;
4109: CALL_OW 6
// if nearUnit = Burlak then
4113: LD_VAR 0 2
4117: PUSH
4118: LD_EXP 40
4122: EQUAL
4123: IFFALSE 4139
// Say ( Burlak , DApeSpot-Bur-1a ) else
4125: LD_EXP 40
4129: PPUSH
4130: LD_STRING DApeSpot-Bur-1a
4132: PPUSH
4133: CALL_OW 88
4137: GO 4151
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4139: LD_VAR 0 2
4143: PPUSH
4144: LD_STRING DApeSpot-RSol1-1
4146: PPUSH
4147: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4151: LD_EXP 40
4155: PPUSH
4156: LD_STRING DApeSpot-Bur-1
4158: PPUSH
4159: CALL_OW 88
// if IsOK ( Petrosyan ) then
4163: LD_EXP 44
4167: PPUSH
4168: CALL_OW 302
4172: IFFALSE 4271
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4174: LD_EXP 44
4178: PPUSH
4179: LD_STRING DApeSpot-Pty-1
4181: PPUSH
4182: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4186: LD_INT 22
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: LD_INT 21
4198: PUSH
4199: LD_INT 3
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 2
4208: PUSH
4209: LD_INT 30
4211: PUSH
4212: LD_INT 6
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 30
4221: PUSH
4222: LD_INT 7
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: IFFALSE 4259
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4245: LD_EXP 44
4249: PPUSH
4250: LD_STRING DApeSpot-Pty-1a
4252: PPUSH
4253: CALL_OW 88
4257: GO 4271
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4259: LD_EXP 44
4263: PPUSH
4264: LD_STRING DApeSpot-Pty-1b
4266: PPUSH
4267: CALL_OW 88
// end ; DialogueOff ;
4271: CALL_OW 7
// exit ;
4275: POP
4276: POP
4277: GO 4283
// end ;
4279: GO 3962
4281: POP
4282: POP
// end ;
4283: PPOPN 2
4285: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and not buildedLab do
4286: LD_EXP 44
4290: PPUSH
4291: CALL_OW 302
4295: PUSH
4296: LD_INT 22
4298: PUSH
4299: LD_INT 3
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: LD_INT 21
4308: PUSH
4309: LD_INT 3
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 2
4318: PUSH
4319: LD_INT 30
4321: PUSH
4322: LD_INT 6
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: LD_INT 30
4331: PUSH
4332: LD_INT 7
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: PPUSH
4349: CALL_OW 69
4353: NOT
4354: AND
4355: PUSH
4356: LD_EXP 25
4360: NOT
4361: AND
4362: IFFALSE 4379
4364: GO 4366
4366: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4367: LD_EXP 44
4371: PPUSH
4372: LD_STRING DApeLab-Pty-1
4374: PPUSH
4375: CALL_OW 88
4379: END
// export function Dial_ResearchApeLang ; begin
4380: LD_INT 0
4382: PPUSH
// DialogueOn ;
4383: CALL_OW 6
// if IsOK ( Petrosyan ) then
4387: LD_EXP 44
4391: PPUSH
4392: CALL_OW 302
4396: IFFALSE 4482
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4398: LD_EXP 44
4402: PPUSH
4403: LD_STRING DApeLangCompl-Pty-1
4405: PPUSH
4406: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4410: LD_EXP 40
4414: PPUSH
4415: LD_STRING DApeLangCompl-Bur-1
4417: PPUSH
4418: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4422: LD_EXP 44
4426: PPUSH
4427: LD_STRING DApeLangCompl-Pty-2
4429: PPUSH
4430: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4434: LD_EXP 40
4438: PPUSH
4439: LD_STRING DApeLangCompl-Bur-2
4441: PPUSH
4442: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4446: LD_EXP 44
4450: PPUSH
4451: LD_STRING DApeLangCompl-Pty-3
4453: PPUSH
4454: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4458: LD_EXP 40
4462: PPUSH
4463: LD_STRING DApeLangCompl-Bur-3
4465: PPUSH
4466: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4470: LD_EXP 44
4474: PPUSH
4475: LD_STRING DApeLangCompl-Pty-4
4477: PPUSH
4478: CALL_OW 88
// end ; DialogueOff ;
4482: CALL_OW 7
// end ;
4486: LD_VAR 0 1
4490: RET
// export function Dial_TameApe ( sci ) ; begin
4491: LD_INT 0
4493: PPUSH
// dial_tameApeBlocker = true ;
4494: LD_ADDR_EXP 10
4498: PUSH
4499: LD_INT 1
4501: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4502: LD_VAR 0 1
4506: PPUSH
4507: CALL_OW 258
4511: PUSH
4512: LD_INT 1
4514: EQUAL
4515: IFFALSE 4531
// Say ( sci , DApeTame-Sci1-1 ) else
4517: LD_VAR 0 1
4521: PPUSH
4522: LD_STRING DApeTame-Sci1-1
4524: PPUSH
4525: CALL_OW 88
4529: GO 4695
// begin if IsOK ( Petrosyan ) then
4531: LD_EXP 44
4535: PPUSH
4536: CALL_OW 302
4540: IFFALSE 4556
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4542: LD_EXP 44
4546: PPUSH
4547: LD_STRING DApeTame-Sci1-1
4549: PPUSH
4550: CALL_OW 88
4554: GO 4695
// if IsOK ( Dolgov ) then
4556: LD_EXP 46
4560: PPUSH
4561: CALL_OW 302
4565: IFFALSE 4581
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4567: LD_EXP 46
4571: PPUSH
4572: LD_STRING DApeTame-Sci1-1
4574: PPUSH
4575: CALL_OW 88
4579: GO 4695
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4581: LD_INT 22
4583: PUSH
4584: LD_INT 3
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 21
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 26
4603: PUSH
4604: LD_INT 1
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 50
4613: PUSH
4614: EMPTY
4615: LIST
4616: PUSH
4617: LD_INT 2
4619: PUSH
4620: LD_INT 25
4622: PUSH
4623: LD_INT 1
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 25
4632: PUSH
4633: LD_INT 2
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 3
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 25
4652: PUSH
4653: LD_INT 4
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: PPUSH
4674: CALL_OW 69
4678: PPUSH
4679: LD_STRING DApeTame-Sci1-1
4681: PPUSH
4682: LD_STRING 
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL 8863 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4695: LD_EXP 40
4699: PPUSH
4700: LD_STRING DApeTame-Bur-1
4702: PPUSH
4703: CALL_OW 88
// end ;
4707: LD_VAR 0 2
4711: RET
// export function Dial_ApeEnterLab ; begin
4712: LD_INT 0
4714: PPUSH
// dial_apeEnterLabBlocker = true ;
4715: LD_ADDR_EXP 11
4719: PUSH
4720: LD_INT 1
4722: ST_TO_ADDR
// DialogueOn ;
4723: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4727: LD_EXP 40
4731: PPUSH
4732: LD_STRING DApeWorkSol-Bur-1
4734: PPUSH
4735: CALL_OW 88
// if IsOK ( Petrosyan ) then
4739: LD_EXP 44
4743: PPUSH
4744: CALL_OW 302
4748: IFFALSE 4764
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4750: LD_EXP 44
4754: PPUSH
4755: LD_STRING DApeWorkSol-Pty-1
4757: PPUSH
4758: CALL_OW 88
4762: GO 4903
// if IsOK ( Dolgov ) then
4764: LD_EXP 46
4768: PPUSH
4769: CALL_OW 302
4773: IFFALSE 4789
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4775: LD_EXP 46
4779: PPUSH
4780: LD_STRING DApeWorkSol-Pty-1
4782: PPUSH
4783: CALL_OW 88
4787: GO 4903
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4789: LD_INT 22
4791: PUSH
4792: LD_INT 3
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 21
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 26
4811: PUSH
4812: LD_INT 1
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 50
4821: PUSH
4822: EMPTY
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 25
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 25
4840: PUSH
4841: LD_INT 2
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 3
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: LD_INT 25
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 69
4886: PPUSH
4887: LD_STRING DApeWorkSol-Pty-1
4889: PPUSH
4890: LD_STRING 
4892: PPUSH
4893: LD_INT 0
4895: PPUSH
4896: LD_INT 1
4898: PPUSH
4899: CALL 8863 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4903: LD_EXP 40
4907: PPUSH
4908: LD_STRING DApeWorkSol-Bur-2
4910: PPUSH
4911: CALL_OW 88
// DialogueOff ;
4915: CALL_OW 7
// end ;
4919: LD_VAR 0 1
4923: RET
// export function Dial_ResearchApePsych ; begin
4924: LD_INT 0
4926: PPUSH
// DialogueOn ;
4927: CALL_OW 6
// if IsOK ( Petrosyan ) then
4931: LD_EXP 44
4935: PPUSH
4936: CALL_OW 302
4940: IFFALSE 4956
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4942: LD_EXP 44
4946: PPUSH
4947: LD_STRING DApeWorkCompl-Pty-1
4949: PPUSH
4950: CALL_OW 88
4954: GO 5095
// if IsOK ( Dolgov ) then
4956: LD_EXP 46
4960: PPUSH
4961: CALL_OW 302
4965: IFFALSE 4981
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4967: LD_EXP 46
4971: PPUSH
4972: LD_STRING DApeWorkCompl-Pty-1
4974: PPUSH
4975: CALL_OW 88
4979: GO 5095
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4981: LD_INT 22
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: LD_INT 21
4993: PUSH
4994: LD_INT 1
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 26
5003: PUSH
5004: LD_INT 1
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: LD_INT 50
5013: PUSH
5014: EMPTY
5015: LIST
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: LD_INT 25
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 2
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 25
5042: PUSH
5043: LD_INT 3
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 25
5052: PUSH
5053: LD_INT 4
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PPUSH
5079: LD_STRING DApeWorkCompl-Pty-1
5081: PPUSH
5082: LD_STRING 
5084: PPUSH
5085: LD_INT 0
5087: PPUSH
5088: LD_INT 1
5090: PPUSH
5091: CALL 8863 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5095: LD_EXP 40
5099: PPUSH
5100: LD_STRING DApeWorkCompl-Bur-1
5102: PPUSH
5103: CALL_OW 88
// DialogueOff ;
5107: CALL_OW 7
// end ;
5111: LD_VAR 0 1
5115: RET
// export function Dial_ResearchApeAgress ; begin
5116: LD_INT 0
5118: PPUSH
// DialogueOn ;
5119: CALL_OW 6
// if IsOK ( Petrosyan ) then
5123: LD_EXP 44
5127: PPUSH
5128: CALL_OW 302
5132: IFFALSE 5148
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5134: LD_EXP 44
5138: PPUSH
5139: LD_STRING DApeSolCompl-Pty-1
5141: PPUSH
5142: CALL_OW 88
5146: GO 5287
// if IsOK ( Dolgov ) then
5148: LD_EXP 46
5152: PPUSH
5153: CALL_OW 302
5157: IFFALSE 5173
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5159: LD_EXP 46
5163: PPUSH
5164: LD_STRING DApeSolCompl-Pty-1
5166: PPUSH
5167: CALL_OW 88
5171: GO 5287
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5173: LD_INT 22
5175: PUSH
5176: LD_INT 3
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PUSH
5183: LD_INT 21
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 26
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: LD_INT 50
5205: PUSH
5206: EMPTY
5207: LIST
5208: PUSH
5209: LD_INT 2
5211: PUSH
5212: LD_INT 25
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 25
5234: PUSH
5235: LD_INT 3
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: LD_INT 25
5244: PUSH
5245: LD_INT 4
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: LD_STRING DApeSolCompl-Pty-1
5273: PPUSH
5274: LD_STRING 
5276: PPUSH
5277: LD_INT 0
5279: PPUSH
5280: LD_INT 1
5282: PPUSH
5283: CALL 8863 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5287: LD_EXP 40
5291: PPUSH
5292: LD_STRING DApeSolCompl-Bur-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// end ;
5303: LD_VAR 0 1
5307: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5308: LD_INT 3
5310: PPUSH
5311: LD_INT 74
5313: PPUSH
5314: LD_INT 115
5316: PPUSH
5317: CALL_OW 293
5321: IFFALSE 5452
5323: GO 5325
5325: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5326: LD_INT 22
5328: PUSH
5329: LD_INT 3
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 21
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: LD_INT 26
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 50
5358: PUSH
5359: EMPTY
5360: LIST
5361: PUSH
5362: LD_INT 2
5364: PUSH
5365: LD_INT 25
5367: PUSH
5368: LD_INT 1
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 2
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 3
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 25
5397: PUSH
5398: LD_INT 4
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: PPUSH
5419: CALL_OW 69
5423: PPUSH
5424: LD_STRING DShipments-RSol1-1
5426: PPUSH
5427: LD_STRING 
5429: PPUSH
5430: LD_INT 0
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL 8863 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5440: LD_EXP 40
5444: PPUSH
5445: LD_STRING DShipments-Bur-1
5447: PPUSH
5448: CALL_OW 88
// end ;
5452: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5453: LD_INT 3
5455: PPUSH
5456: LD_INT 81
5458: PPUSH
5459: LD_INT 132
5461: PPUSH
5462: CALL_OW 293
5466: IFFALSE 5606
5468: GO 5470
5470: DISABLE
5471: LD_INT 0
5473: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5474: LD_ADDR_VAR 0 1
5478: PUSH
5479: LD_INT 22
5481: PUSH
5482: LD_INT 3
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 21
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 26
5501: PUSH
5502: LD_INT 1
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 50
5511: PUSH
5512: EMPTY
5513: LIST
5514: PUSH
5515: LD_INT 2
5517: PUSH
5518: LD_INT 25
5520: PUSH
5521: LD_INT 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 25
5530: PUSH
5531: LD_INT 2
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 3
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 25
5550: PUSH
5551: LD_INT 4
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PPUSH
5572: CALL_OW 69
5576: PPUSH
5577: LD_STRING DRoad-RSol1-1
5579: PPUSH
5580: LD_STRING 
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: LD_INT 1
5588: PPUSH
5589: CALL 8863 0 5
5593: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_STRING DRoad-RSol1-1a
5601: PPUSH
5602: CALL_OW 88
// end ;
5606: PPOPN 1
5608: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5609: LD_INT 33
5611: PPUSH
5612: LD_INT 22
5614: PUSH
5615: LD_INT 3
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 21
5624: PUSH
5625: LD_INT 1
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 26
5634: PUSH
5635: LD_INT 1
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PUSH
5642: LD_INT 50
5644: PUSH
5645: EMPTY
5646: LIST
5647: PUSH
5648: LD_INT 2
5650: PUSH
5651: LD_INT 25
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 25
5663: PUSH
5664: LD_INT 2
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 25
5673: PUSH
5674: LD_INT 3
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 25
5683: PUSH
5684: LD_INT 4
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: PUSH
5710: LD_EXP 40
5714: PUSH
5715: EMPTY
5716: LIST
5717: DIFF
5718: PUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 3
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 21
5731: PUSH
5732: LD_INT 3
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 30
5741: PUSH
5742: LD_INT 0
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 50
5751: PUSH
5752: EMPTY
5753: LIST
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: PPUSH
5761: CALL_OW 69
5765: AND
5766: IFFALSE 5793
5768: GO 5770
5770: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5771: LD_INT 36
5773: PPUSH
5774: CALL 20911 0 1
// wait ( 0 0$2 ) ;
5778: LD_INT 70
5780: PPUSH
5781: CALL_OW 67
// stevensPlaced = true ;
5785: LD_ADDR_EXP 14
5789: PUSH
5790: LD_INT 1
5792: ST_TO_ADDR
// end ;
5793: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5794: LD_INT 3
5796: PPUSH
5797: LD_EXP 58
5801: PPUSH
5802: CALL_OW 292
5806: PUSH
5807: LD_EXP 14
5811: AND
5812: PUSH
5813: LD_EXP 24
5817: NOT
5818: AND
5819: IFFALSE 6161
5821: GO 5823
5823: DISABLE
5824: LD_INT 0
5826: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5827: LD_ADDR_VAR 0 1
5831: PUSH
5832: LD_INT 22
5834: PUSH
5835: LD_INT 3
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 21
5844: PUSH
5845: LD_INT 1
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PUSH
5852: LD_INT 26
5854: PUSH
5855: LD_INT 1
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: LD_INT 50
5864: PUSH
5865: EMPTY
5866: LIST
5867: PUSH
5868: LD_INT 2
5870: PUSH
5871: LD_INT 25
5873: PUSH
5874: LD_INT 1
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 25
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 25
5893: PUSH
5894: LD_INT 3
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 25
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: PPUSH
5925: CALL_OW 69
5929: PPUSH
5930: LD_EXP 58
5934: PPUSH
5935: CALL_OW 74
5939: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5940: LD_EXP 58
5944: PPUSH
5945: CALL_OW 87
// InGameOn ;
5949: CALL_OW 8
// DialogueOn ;
5953: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_STRING DStevens-RSol1-1
5964: PPUSH
5965: CALL_OW 88
// DialogueOff ;
5969: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5973: LD_INT 52
5975: PPUSH
5976: CALL_OW 67
// if IsOK ( Petrosyan ) then
5980: LD_EXP 44
5984: PPUSH
5985: CALL_OW 302
5989: IFFALSE 6157
// begin SetSide ( Stevens , 6 ) ;
5991: LD_EXP 58
5995: PPUSH
5996: LD_INT 6
5998: PPUSH
5999: CALL_OW 235
// DialogueOn ;
6003: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
6007: LD_EXP 58
6011: PPUSH
6012: LD_STRING DStevens-Huck-1
6014: PPUSH
6015: CALL_OW 88
// if nearUnit = Petrosyan then
6019: LD_VAR 0 1
6023: PUSH
6024: LD_EXP 44
6028: EQUAL
6029: IFFALSE 6125
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
6031: LD_EXP 44
6035: PPUSH
6036: LD_STRING DStevens-Pty-1a
6038: PPUSH
6039: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6043: LD_EXP 58
6047: PPUSH
6048: LD_STRING DStevens-Huck-2
6050: PPUSH
6051: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6055: LD_EXP 44
6059: PPUSH
6060: LD_STRING DStevens-Pty-2
6062: PPUSH
6063: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6067: LD_EXP 58
6071: PPUSH
6072: LD_STRING DStevens-Huck-3
6074: PPUSH
6075: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6079: LD_EXP 44
6083: PPUSH
6084: LD_STRING DStevens-Pty-3
6086: PPUSH
6087: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6091: LD_EXP 58
6095: PPUSH
6096: LD_STRING DStevens-Huck-4
6098: PPUSH
6099: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6103: LD_EXP 44
6107: PPUSH
6108: LD_STRING DStevens-Pty-4
6110: PPUSH
6111: CALL_OW 88
// stevensFollow = true ;
6115: LD_ADDR_EXP 15
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// end else
6123: GO 6153
// begin stevensFollow = true ;
6125: LD_ADDR_EXP 15
6129: PUSH
6130: LD_INT 1
6132: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6133: LD_ADDR_EXP 16
6137: PUSH
6138: LD_INT 1
6140: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6141: LD_EXP 44
6145: PPUSH
6146: LD_STRING DStevens-Pty-1
6148: PPUSH
6149: CALL_OW 88
// end ; DialogueOff ;
6153: CALL_OW 7
// end ; InGameOff ;
6157: CALL_OW 9
// end ;
6161: PPOPN 1
6163: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6164: LD_EXP 16
6168: PUSH
6169: LD_EXP 44
6173: PPUSH
6174: LD_EXP 58
6178: PPUSH
6179: CALL_OW 296
6183: PUSH
6184: LD_INT 20
6186: LESS
6187: AND
6188: PUSH
6189: LD_EXP 44
6193: PPUSH
6194: CALL_OW 302
6198: AND
6199: PUSH
6200: LD_EXP 24
6204: NOT
6205: AND
6206: IFFALSE 6311
6208: GO 6210
6210: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6211: LD_ADDR_EXP 16
6215: PUSH
6216: LD_INT 0
6218: ST_TO_ADDR
// DialogueOn ;
6219: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6223: LD_EXP 44
6227: PPUSH
6228: LD_STRING DStevens-Pty-1a
6230: PPUSH
6231: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6235: LD_EXP 58
6239: PPUSH
6240: LD_STRING DStevens-Huck-2
6242: PPUSH
6243: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6247: LD_EXP 44
6251: PPUSH
6252: LD_STRING DStevens-Pty-2
6254: PPUSH
6255: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6259: LD_EXP 58
6263: PPUSH
6264: LD_STRING DStevens-Huck-3
6266: PPUSH
6267: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6271: LD_EXP 44
6275: PPUSH
6276: LD_STRING DStevens-Pty-3
6278: PPUSH
6279: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6283: LD_EXP 58
6287: PPUSH
6288: LD_STRING DStevens-Huck-4
6290: PPUSH
6291: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6295: LD_EXP 44
6299: PPUSH
6300: LD_STRING DStevens-Pty-4
6302: PPUSH
6303: CALL_OW 88
// DialogueOff ;
6307: CALL_OW 7
// end ;
6311: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and GetSide ( Stevens ) = 6 and IsOK ( Petrosyan ) and not finishMissionBool do
6312: LD_EXP 58
6316: PPUSH
6317: LD_EXP 40
6321: PPUSH
6322: CALL_OW 296
6326: PUSH
6327: LD_INT 15
6329: LESS
6330: PUSH
6331: LD_EXP 58
6335: PPUSH
6336: CALL_OW 255
6340: PUSH
6341: LD_INT 6
6343: EQUAL
6344: AND
6345: PUSH
6346: LD_EXP 44
6350: PPUSH
6351: CALL_OW 302
6355: AND
6356: PUSH
6357: LD_EXP 24
6361: NOT
6362: AND
6363: IFFALSE 6578
6365: GO 6367
6367: DISABLE
// begin DialogueOn ;
6368: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6372: LD_EXP 44
6376: PPUSH
6377: LD_STRING DStevensBurlak-Pty-1
6379: PPUSH
6380: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6384: LD_EXP 40
6388: PPUSH
6389: LD_STRING DStevensBurlak-Bur-1
6391: PPUSH
6392: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6396: LD_EXP 44
6400: PPUSH
6401: LD_STRING DStevensBurlak-Pty-2
6403: PPUSH
6404: CALL_OW 88
// case Query ( QKill ) of 1 :
6408: LD_STRING QKill
6410: PPUSH
6411: CALL_OW 97
6415: PUSH
6416: LD_INT 1
6418: DOUBLE
6419: EQUAL
6420: IFTRUE 6424
6422: GO 6502
6424: POP
// begin stevensCanExitMap = true ;
6425: LD_ADDR_EXP 19
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// stevensFollow = false ;
6433: LD_ADDR_EXP 15
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6441: LD_EXP 40
6445: PPUSH
6446: LD_STRING DKill-1-Bur-1
6448: PPUSH
6449: CALL_OW 88
// if IsOK ( Gleb ) then
6453: LD_EXP 43
6457: PPUSH
6458: CALL_OW 302
6462: IFFALSE 6476
// Say ( Gleb , DKill-1-Glb-1 ) ;
6464: LD_EXP 43
6468: PPUSH
6469: LD_STRING DKill-1-Glb-1
6471: PPUSH
6472: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6476: LD_EXP 58
6480: PPUSH
6481: LD_INT 1
6483: PPUSH
6484: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6488: LD_EXP 58
6492: PPUSH
6493: LD_INT 37
6495: PPUSH
6496: CALL_OW 113
// end ; 2 :
6500: GO 6574
6502: LD_INT 2
6504: DOUBLE
6505: EQUAL
6506: IFTRUE 6510
6508: GO 6573
6510: POP
// begin stevensCanExitMap = true ;
6511: LD_ADDR_EXP 19
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// stevensFollow = false ;
6519: LD_ADDR_EXP 15
6523: PUSH
6524: LD_INT 0
6526: ST_TO_ADDR
// stevensDepot = true ;
6527: LD_ADDR_EXP 17
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6535: LD_EXP 40
6539: PPUSH
6540: LD_STRING DKill-2-Bur-1
6542: PPUSH
6543: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6547: LD_EXP 44
6551: PPUSH
6552: LD_STRING DKill-2-Pty-1
6554: PPUSH
6555: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6559: LD_EXP 40
6563: PPUSH
6564: LD_STRING DKill-2-Bur-2
6566: PPUSH
6567: CALL_OW 88
// end ; end ;
6571: GO 6574
6573: POP
// DialogueOff ;
6574: CALL_OW 7
// end ;
6578: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6579: LD_EXP 15
6583: IFFALSE 6723
6585: GO 6587
6587: DISABLE
6588: LD_INT 0
6590: PPUSH
// begin enable ;
6591: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 21
6609: PUSH
6610: LD_INT 1
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 50
6619: PUSH
6620: EMPTY
6621: LIST
6622: PUSH
6623: LD_INT 2
6625: PUSH
6626: LD_INT 25
6628: PUSH
6629: LD_INT 1
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 25
6638: PUSH
6639: LD_INT 2
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 25
6648: PUSH
6649: LD_INT 3
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 25
6658: PUSH
6659: LD_INT 4
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 69
6683: PPUSH
6684: LD_EXP 58
6688: PPUSH
6689: CALL_OW 74
6693: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6694: LD_EXP 58
6698: PPUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 250
6708: PPUSH
6709: LD_VAR 0 1
6713: PPUSH
6714: CALL_OW 251
6718: PPUSH
6719: CALL_OW 111
// end ;
6723: PPOPN 1
6725: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6726: LD_EXP 17
6730: PUSH
6731: LD_INT 22
6733: PUSH
6734: LD_INT 3
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 21
6743: PUSH
6744: LD_INT 3
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 30
6753: PUSH
6754: LD_INT 0
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 50
6763: PUSH
6764: EMPTY
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: NOT
6778: AND
6779: IFFALSE 6806
6781: GO 6783
6783: DISABLE
// begin enable ;
6784: ENABLE
// SetSide ( Stevens , 6 ) ;
6785: LD_EXP 58
6789: PPUSH
6790: LD_INT 6
6792: PPUSH
6793: CALL_OW 235
// ComHold ( Stevens ) ;
6797: LD_EXP 58
6801: PPUSH
6802: CALL_OW 140
// end ;
6806: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6807: LD_EXP 17
6811: PUSH
6812: LD_INT 22
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 21
6824: PUSH
6825: LD_INT 3
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 30
6834: PUSH
6835: LD_INT 0
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 50
6844: PUSH
6845: EMPTY
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 69
6858: AND
6859: IFFALSE 7458
6861: GO 6863
6863: DISABLE
6864: LD_INT 0
6866: PPUSH
6867: PPUSH
6868: PPUSH
// begin enable ;
6869: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6870: LD_ADDR_VAR 0 1
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 3
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 21
6887: PUSH
6888: LD_INT 3
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 30
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 50
6907: PUSH
6908: EMPTY
6909: LIST
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: PPUSH
6917: CALL_OW 69
6921: PUSH
6922: LD_INT 1
6924: ARRAY
6925: ST_TO_ADDR
// stevensFollow = false ;
6926: LD_ADDR_EXP 15
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// if not depot then
6934: LD_VAR 0 1
6938: NOT
6939: IFFALSE 6943
// exit ;
6941: GO 7458
// for depotUnit in depot do
6943: LD_ADDR_VAR 0 2
6947: PUSH
6948: LD_VAR 0 1
6952: PUSH
6953: FOR_IN
6954: IFFALSE 6980
// if not IsConstructed ( depotUnit ) then
6956: LD_VAR 0 2
6960: PPUSH
6961: CALL_OW 304
6965: NOT
6966: IFFALSE 6978
// constructDepot = depotUnit ;
6968: LD_ADDR_VAR 0 3
6972: PUSH
6973: LD_VAR 0 2
6977: ST_TO_ADDR
6978: GO 6953
6980: POP
6981: POP
// if not constructDepot then
6982: LD_VAR 0 3
6986: NOT
6987: IFFALSE 6991
// exit ;
6989: GO 7458
// if not stevensWasInDepot then
6991: LD_EXP 18
6995: NOT
6996: IFFALSE 7136
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6998: LD_EXP 58
7002: PPUSH
7003: CALL_OW 310
7007: NOT
7008: PUSH
7009: LD_EXP 58
7013: PPUSH
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL_OW 296
7023: PUSH
7024: LD_INT 8
7026: LESS
7027: NOT
7028: AND
7029: IFFALSE 7062
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
7031: LD_EXP 58
7035: PPUSH
7036: LD_VAR 0 3
7040: PPUSH
7041: CALL_OW 250
7045: PPUSH
7046: LD_VAR 0 3
7050: PPUSH
7051: CALL_OW 251
7055: PPUSH
7056: CALL_OW 111
7060: GO 7134
// begin InGameOn ;
7062: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7066: LD_EXP 58
7070: PPUSH
7071: LD_INT 3
7073: PPUSH
7074: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7078: LD_EXP 58
7082: PPUSH
7083: LD_VAR 0 3
7087: PPUSH
7088: CALL_OW 120
// wait ( 0 0$1 ) ;
7092: LD_INT 35
7094: PPUSH
7095: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7099: LD_EXP 58
7103: PPUSH
7104: CALL_OW 310
7108: PUSH
7109: LD_EXP 58
7113: PPUSH
7114: CALL_OW 302
7118: NOT
7119: OR
7120: IFFALSE 7066
// InGameOff ;
7122: CALL_OW 9
// stevensWasInDepot = true ;
7126: LD_ADDR_EXP 18
7130: PUSH
7131: LD_INT 1
7133: ST_TO_ADDR
// end ; end else
7134: GO 7458
// begin if not IsInUnit ( Stevens ) or GetType ( IsInUnit ( Stevens ) ) = unit_vehicle then
7136: LD_EXP 58
7140: PPUSH
7141: CALL_OW 310
7145: NOT
7146: PUSH
7147: LD_EXP 58
7151: PPUSH
7152: CALL_OW 310
7156: PPUSH
7157: CALL_OW 247
7161: PUSH
7162: LD_INT 2
7164: EQUAL
7165: OR
7166: IFFALSE 7458
// begin DialogueOn ;
7168: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7172: LD_EXP 40
7176: PPUSH
7177: LD_STRING DRelease-Bur-1
7179: PPUSH
7180: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7184: LD_STRING QKillAgain
7186: PPUSH
7187: CALL_OW 97
7191: PUSH
7192: LD_INT 1
7194: DOUBLE
7195: EQUAL
7196: IFTRUE 7200
7198: GO 7269
7200: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7201: LD_EXP 40
7205: PPUSH
7206: LD_STRING DQrKillAgain#1-Bur-1
7208: PPUSH
7209: CALL_OW 88
// stevensCanExitMap = true ;
7213: LD_ADDR_EXP 19
7217: PUSH
7218: LD_INT 1
7220: ST_TO_ADDR
// stevensWasInDepot = false ;
7221: LD_ADDR_EXP 18
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// stevensDepot = false ;
7229: LD_ADDR_EXP 17
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7237: LD_EXP 58
7241: PPUSH
7242: LD_INT 1
7244: PPUSH
7245: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7249: LD_EXP 58
7253: PPUSH
7254: LD_INT 37
7256: PPUSH
7257: CALL_OW 113
// DialogueOff ;
7261: CALL_OW 7
// exit ;
7265: GO 7458
// end ; 2 :
7267: GO 7454
7269: LD_INT 2
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7346
7277: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7278: LD_EXP 40
7282: PPUSH
7283: LD_STRING DQrKillAgain#2-Bur-1
7285: PPUSH
7286: CALL_OW 88
// stevensCanExitMap = true ;
7290: LD_ADDR_EXP 19
7294: PUSH
7295: LD_INT 1
7297: ST_TO_ADDR
// stevensWasInDepot = false ;
7298: LD_ADDR_EXP 18
7302: PUSH
7303: LD_INT 0
7305: ST_TO_ADDR
// stevensDepot = false ;
7306: LD_ADDR_EXP 17
7310: PUSH
7311: LD_INT 0
7313: ST_TO_ADDR
// SetSide ( Stevens , 6 ) ;
7314: LD_EXP 58
7318: PPUSH
7319: LD_INT 6
7321: PPUSH
7322: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7326: LD_EXP 58
7330: PPUSH
7331: LD_INT 37
7333: PPUSH
7334: CALL_OW 113
// DialogueOff ;
7338: CALL_OW 7
// exit ;
7342: GO 7458
// end ; 3 :
7344: GO 7454
7346: LD_INT 3
7348: DOUBLE
7349: EQUAL
7350: IFTRUE 7354
7352: GO 7453
7354: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7355: LD_EXP 40
7359: PPUSH
7360: LD_STRING DQrKillAgain#2-Bur-1a
7362: PPUSH
7363: CALL_OW 88
// DialogueOff ;
7367: CALL_OW 7
// InGameOn ;
7371: CALL_OW 8
// ComExitVehicle ( Stevens ) ;
7375: LD_EXP 58
7379: PPUSH
7380: CALL_OW 121
// wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// repeat SetSide ( Stevens , 3 ) ;
7391: LD_EXP 58
7395: PPUSH
7396: LD_INT 3
7398: PPUSH
7399: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7403: LD_EXP 58
7407: PPUSH
7408: LD_VAR 0 3
7412: PPUSH
7413: CALL_OW 120
// wait ( 0 0$1 ) ;
7417: LD_INT 35
7419: PPUSH
7420: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7424: LD_EXP 58
7428: PPUSH
7429: CALL_OW 310
7433: PUSH
7434: LD_EXP 58
7438: PPUSH
7439: CALL_OW 302
7443: NOT
7444: OR
7445: IFFALSE 7391
// InGameOff ;
7447: CALL_OW 9
// end ; end ;
7451: GO 7454
7453: POP
// DialogueOff ;
7454: CALL_OW 7
// end ; end ; end ;
7458: PPOPN 3
7460: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7461: LD_EXP 19
7465: PUSH
7466: LD_EXP 58
7470: PPUSH
7471: LD_INT 37
7473: PPUSH
7474: CALL_OW 308
7478: AND
7479: IFFALSE 7526
7481: GO 7483
7483: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7484: LD_EXP 58
7488: PPUSH
7489: CALL_OW 255
7493: PUSH
7494: LD_INT 6
7496: EQUAL
7497: IFFALSE 7509
// stevensStatus = 1 else
7499: LD_ADDR_EXP 2
7503: PUSH
7504: LD_INT 1
7506: ST_TO_ADDR
7507: GO 7517
// stevensStatus = 2 ;
7509: LD_ADDR_EXP 2
7513: PUSH
7514: LD_INT 2
7516: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7517: LD_EXP 58
7521: PPUSH
7522: CALL_OW 64
// end ;
7526: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7527: LD_INT 3
7529: PPUSH
7530: LD_INT 1
7532: PPUSH
7533: CALL_OW 292
7537: IFFALSE 7737
7539: GO 7541
7541: DISABLE
7542: LD_INT 0
7544: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7545: LD_ADDR_VAR 0 1
7549: PUSH
7550: LD_INT 1
7552: PPUSH
7553: LD_INT 2
7555: PPUSH
7556: CALL_OW 12
7560: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7561: LD_INT 1
7563: PPUSH
7564: CALL_OW 87
// DialogueOn ;
7568: CALL_OW 6
// if rnd = 1 then
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 1
7579: EQUAL
7580: IFFALSE 7596
// Say ( Burlak , DMastodon-Bur-1 ) else
7582: LD_EXP 40
7586: PPUSH
7587: LD_STRING DMastodon-Bur-1
7589: PPUSH
7590: CALL_OW 88
7594: GO 7710
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7596: LD_INT 22
7598: PUSH
7599: LD_INT 3
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 21
7608: PUSH
7609: LD_INT 1
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 26
7618: PUSH
7619: LD_INT 1
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 50
7628: PUSH
7629: EMPTY
7630: LIST
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 25
7637: PUSH
7638: LD_INT 1
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 25
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 25
7657: PUSH
7658: LD_INT 3
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 25
7667: PUSH
7668: LD_INT 4
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: PPUSH
7694: LD_STRING DMastodon-RSol1-1
7696: PPUSH
7697: LD_STRING 
7699: PPUSH
7700: LD_INT 0
7702: PPUSH
7703: LD_INT 1
7705: PPUSH
7706: CALL 8863 0 5
// if IsOK ( Gleb ) then
7710: LD_EXP 43
7714: PPUSH
7715: CALL_OW 302
7719: IFFALSE 7733
// Say ( Gleb , DMastodon-Glb-1 ) ;
7721: LD_EXP 43
7725: PPUSH
7726: LD_STRING DMastodon-Glb-1
7728: PPUSH
7729: CALL_OW 88
// DialogueOff ;
7733: CALL_OW 7
// end ;
7737: PPOPN 1
7739: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7740: LD_INT 1
7742: PPUSH
7743: CALL_OW 302
7747: NOT
7748: IFFALSE 7827
7750: GO 7752
7752: DISABLE
// begin omarCanExitMap = true ;
7753: LD_ADDR_EXP 20
7757: PUSH
7758: LD_INT 1
7760: ST_TO_ADDR
// DialogueOn ;
7761: CALL_OW 6
// if IsOK ( Karamazov ) then
7765: LD_EXP 41
7769: PPUSH
7770: CALL_OW 302
7774: IFFALSE 7788
// Say ( Karamazov , DOmar-Kar-1 ) ;
7776: LD_EXP 41
7780: PPUSH
7781: LD_STRING DOmar-Kar-1
7783: PPUSH
7784: CALL_OW 88
// if IsOK ( Petrovova ) then
7788: LD_EXP 42
7792: PPUSH
7793: CALL_OW 302
7797: IFFALSE 7811
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7799: LD_EXP 42
7803: PPUSH
7804: LD_STRING DOmar-Ptr-1
7806: PPUSH
7807: CALL_OW 88
// DialogueOff ;
7811: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7815: LD_EXP 51
7819: PPUSH
7820: LD_INT 41
7822: PPUSH
7823: CALL_OW 113
// end ;
7827: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7828: LD_EXP 51
7832: PPUSH
7833: LD_INT 41
7835: PPUSH
7836: CALL_OW 308
7840: PUSH
7841: LD_EXP 20
7845: AND
7846: IFFALSE 7868
7848: GO 7850
7850: DISABLE
// begin RemoveUnit ( Omar ) ;
7851: LD_EXP 51
7855: PPUSH
7856: CALL_OW 64
// omarStatus = 1 ;
7860: LD_ADDR_EXP 1
7864: PUSH
7865: LD_INT 1
7867: ST_TO_ADDR
// end ;
7868: END
// every 0 0$1 trigger IsDead ( Omar ) do
7869: LD_EXP 51
7873: PPUSH
7874: CALL_OW 301
7878: IFFALSE 8036
7880: GO 7882
7882: DISABLE
// begin DialogueOn ;
7883: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7887: LD_INT 22
7889: PUSH
7890: LD_INT 3
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 21
7899: PUSH
7900: LD_INT 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 26
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 50
7919: PUSH
7920: EMPTY
7921: LIST
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: LD_INT 25
7928: PUSH
7929: LD_INT 1
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 25
7938: PUSH
7939: LD_INT 2
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 25
7948: PUSH
7949: LD_INT 3
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 25
7958: PUSH
7959: LD_INT 4
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 69
7984: PPUSH
7985: LD_STRING DOmar-RSol1-1
7987: PPUSH
7988: LD_STRING 
7990: PPUSH
7991: LD_INT 0
7993: PPUSH
7994: LD_INT 1
7996: PPUSH
7997: CALL 8863 0 5
// wait ( 0 0$1 ) ;
8001: LD_INT 35
8003: PPUSH
8004: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
8008: LD_EXP 50
8012: PPUSH
8013: LD_STRING DOmar-Hke-1
8015: PPUSH
8016: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
8020: LD_EXP 40
8024: PPUSH
8025: LD_STRING DOmar-Bur-1
8027: PPUSH
8028: CALL_OW 88
// DialogueOff ;
8032: CALL_OW 7
// end ;
8036: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
8037: LD_EXP 51
8041: PPUSH
8042: CALL_OW 301
8046: PUSH
8047: LD_EXP 51
8051: PPUSH
8052: CALL_OW 305
8056: NOT
8057: OR
8058: PUSH
8059: LD_EXP 52
8063: PUSH
8064: LD_INT 3
8066: LESS
8067: AND
8068: IFFALSE 8219
8070: GO 8072
8072: DISABLE
// begin if actionTime < arabBreakthrough then
8073: LD_EXP 7
8077: PUSH
8078: LD_EXP 35
8082: LESS
8083: IFFALSE 8093
// fastBreakthrough = true ;
8085: LD_ADDR_EXP 23
8089: PUSH
8090: LD_INT 1
8092: ST_TO_ADDR
// DialogueOn ;
8093: CALL_OW 6
// if IsOK ( Petrovova ) then
8097: LD_EXP 42
8101: PPUSH
8102: CALL_OW 302
8106: IFFALSE 8120
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
8108: LD_EXP 42
8112: PPUSH
8113: LD_STRING DBreakthrough-Ptr-1
8115: PPUSH
8116: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
8120: LD_EXP 40
8124: PPUSH
8125: LD_STRING DBreakthrough-Bur-1
8127: PPUSH
8128: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
8132: LD_EXP 48
8136: PPUSH
8137: LD_STRING DBreakthrough-Pla-1
8139: PPUSH
8140: CALL_OW 94
// if fastBreakthrough then
8144: LD_EXP 23
8148: IFFALSE 8164
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8150: LD_EXP 48
8154: PPUSH
8155: LD_STRING DBreakthrough-Pla-1a
8157: PPUSH
8158: CALL_OW 94
8162: GO 8176
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8164: LD_EXP 48
8168: PPUSH
8169: LD_STRING DBreakthrough-Pla-1b
8171: PPUSH
8172: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8176: LD_EXP 48
8180: PPUSH
8181: LD_STRING DBreakthrough-Pla-1c
8183: PPUSH
8184: CALL_OW 94
// DialogueOff ;
8188: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8192: LD_STRING MAddLab
8194: PPUSH
8195: CALL_OW 337
// arabianCanExitMap = true ;
8199: LD_ADDR_EXP 21
8203: PUSH
8204: LD_INT 1
8206: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8207: LD_EXP 52
8211: PPUSH
8212: LD_INT 41
8214: PPUSH
8215: CALL_OW 113
// end ;
8219: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8220: LD_EXP 21
8224: IFFALSE 8289
8226: GO 8228
8228: DISABLE
8229: LD_INT 0
8231: PPUSH
// begin enable ;
8232: ENABLE
// for unit in arabianUnitsInBase do
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_EXP 52
8242: PUSH
8243: FOR_IN
8244: IFFALSE 8287
// if IsInArea ( unit , ArabianExitArea ) then
8246: LD_VAR 0 1
8250: PPUSH
8251: LD_INT 41
8253: PPUSH
8254: CALL_OW 308
8258: IFFALSE 8285
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8260: LD_ADDR_EXP 52
8264: PUSH
8265: LD_EXP 52
8269: PUSH
8270: LD_VAR 0 1
8274: DIFF
8275: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8276: LD_VAR 0 1
8280: PPUSH
8281: CALL_OW 64
// end ;
8285: GO 8243
8287: POP
8288: POP
// end ;
8289: PPOPN 1
8291: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8292: LD_EXP 12
8296: NOT
8297: IFFALSE 8535
8299: GO 8301
8301: DISABLE
8302: LD_INT 0
8304: PPUSH
// begin for unit in arabianPatrolVehicles do
8305: LD_ADDR_VAR 0 1
8309: PUSH
8310: LD_EXP 53
8314: PUSH
8315: FOR_IN
8316: IFFALSE 8533
// if See ( 3 , unit ) then
8318: LD_INT 3
8320: PPUSH
8321: LD_VAR 0 1
8325: PPUSH
8326: CALL_OW 292
8330: IFFALSE 8531
// begin dial_southRoadBlocker = true ;
8332: LD_ADDR_EXP 12
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8340: LD_VAR 0 1
8344: PPUSH
8345: CALL_OW 87
// if IsOK ( Karamazov ) then
8349: LD_EXP 41
8353: PPUSH
8354: CALL_OW 302
8358: IFFALSE 8372
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8360: LD_EXP 41
8364: PPUSH
8365: LD_STRING DPatrol-Kar-1
8367: PPUSH
8368: CALL_OW 88
// if IsOK ( Petrovova ) then
8372: LD_EXP 42
8376: PPUSH
8377: CALL_OW 302
8381: IFFALSE 8395
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8383: LD_EXP 42
8387: PPUSH
8388: LD_STRING DPatrol-Ptr-1
8390: PPUSH
8391: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8395: LD_INT 22
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 21
8407: PUSH
8408: LD_INT 1
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PUSH
8415: LD_INT 26
8417: PUSH
8418: LD_INT 1
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 50
8427: PUSH
8428: EMPTY
8429: LIST
8430: PUSH
8431: LD_INT 2
8433: PUSH
8434: LD_INT 25
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 25
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 25
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 4
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: PPUSH
8488: CALL_OW 69
8492: PUSH
8493: LD_EXP 41
8497: DIFF
8498: PPUSH
8499: LD_STRING DPatrol-RSol1-1
8501: PPUSH
8502: LD_STRING 
8504: PPUSH
8505: LD_INT 0
8507: PPUSH
8508: LD_INT 1
8510: PPUSH
8511: CALL 8863 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8515: LD_EXP 40
8519: PPUSH
8520: LD_STRING DPatrol-Bur-1
8522: PPUSH
8523: CALL_OW 88
// exit ;
8527: POP
8528: POP
8529: GO 8535
// end ;
8531: GO 8315
8533: POP
8534: POP
// end ;
8535: PPOPN 1
8537: END
// every 10 10$0 do
8538: GO 8540
8540: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8541: CALL 2593 0 0
8545: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
// if debugMode then
8550: LD_EXP 33
8554: IFFALSE 8571
// unit := NewCharacter ( ident ) ;
8556: LD_ADDR_VAR 0 5
8560: PUSH
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 25
8570: ST_TO_ADDR
// if exist_mode and not debugMode then
8571: LD_VAR 0 2
8575: PUSH
8576: LD_EXP 33
8580: NOT
8581: AND
8582: IFFALSE 8607
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8584: LD_ADDR_VAR 0 5
8588: PUSH
8589: LD_EXP 32
8593: PUSH
8594: LD_VAR 0 1
8598: STR
8599: PPUSH
8600: CALL_OW 34
8604: ST_TO_ADDR
8605: GO 8629
// if not debugMode then
8607: LD_EXP 33
8611: NOT
8612: IFFALSE 8629
// unit := NewCharacter ( ident ) ;
8614: LD_ADDR_VAR 0 5
8618: PUSH
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 25
8628: ST_TO_ADDR
// if class then
8629: LD_VAR 0 3
8633: IFFALSE 8649
// SetClass ( unit , class ) ;
8635: LD_VAR 0 5
8639: PPUSH
8640: LD_VAR 0 3
8644: PPUSH
8645: CALL_OW 336
// result := unit ;
8649: LD_ADDR_VAR 0 4
8653: PUSH
8654: LD_VAR 0 5
8658: ST_TO_ADDR
// end ;
8659: LD_VAR 0 4
8663: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8664: LD_INT 0
8666: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 255
8676: PUSH
8677: LD_VAR 0 3
8681: EQUAL
8682: PUSH
8683: LD_VAR 0 1
8687: PPUSH
8688: CALL_OW 302
8692: AND
8693: IFFALSE 8715
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8695: LD_VAR 0 1
8699: PPUSH
8700: LD_EXP 31
8704: PUSH
8705: LD_VAR 0 2
8709: STR
8710: PPUSH
8711: CALL_OW 38
// end ;
8715: LD_VAR 0 4
8719: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8720: LD_INT 0
8722: PPUSH
8723: PPUSH
8724: PPUSH
// resultCharactersToSave = [ ] ;
8725: LD_ADDR_VAR 0 6
8729: PUSH
8730: EMPTY
8731: ST_TO_ADDR
// for unit in characters do
8732: LD_ADDR_VAR 0 5
8736: PUSH
8737: LD_VAR 0 1
8741: PUSH
8742: FOR_IN
8743: IFFALSE 8791
// if GetSide ( unit ) = side and IsOK ( unit ) then
8745: LD_VAR 0 5
8749: PPUSH
8750: CALL_OW 255
8754: PUSH
8755: LD_VAR 0 3
8759: EQUAL
8760: PUSH
8761: LD_VAR 0 5
8765: PPUSH
8766: CALL_OW 302
8770: AND
8771: IFFALSE 8789
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8773: LD_ADDR_VAR 0 6
8777: PUSH
8778: LD_VAR 0 6
8782: PUSH
8783: LD_VAR 0 5
8787: ADD
8788: ST_TO_ADDR
8789: GO 8742
8791: POP
8792: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8793: LD_VAR 0 6
8797: PPUSH
8798: LD_EXP 31
8802: PUSH
8803: LD_VAR 0 2
8807: STR
8808: PPUSH
8809: CALL_OW 38
// end ;
8813: LD_VAR 0 4
8817: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8818: LD_INT 0
8820: PPUSH
8821: PPUSH
// for unit in units do
8822: LD_ADDR_VAR 0 5
8826: PUSH
8827: LD_VAR 0 1
8831: PUSH
8832: FOR_IN
8833: IFFALSE 8856
// PlaceUnitArea ( unit , area , spawnMode ) ;
8835: LD_VAR 0 5
8839: PPUSH
8840: LD_VAR 0 2
8844: PPUSH
8845: LD_VAR 0 3
8849: PPUSH
8850: CALL_OW 49
8854: GO 8832
8856: POP
8857: POP
// end ;
8858: LD_VAR 0 4
8862: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8863: LD_INT 0
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
// units = characters ;
8869: LD_ADDR_VAR 0 9
8873: PUSH
8874: LD_VAR 0 1
8878: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8879: LD_ADDR_VAR 0 9
8883: PUSH
8884: LD_VAR 0 9
8888: PUSH
8889: LD_EXP 40
8893: PUSH
8894: LD_EXP 41
8898: PUSH
8899: LD_EXP 42
8903: PUSH
8904: LD_EXP 43
8908: PUSH
8909: LD_EXP 44
8913: PUSH
8914: LD_EXP 45
8918: PUSH
8919: LD_EXP 46
8923: PUSH
8924: LD_EXP 47
8928: PUSH
8929: LD_EXP 58
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: DIFF
8945: ST_TO_ADDR
// if not units and not canTalkHero then
8946: LD_VAR 0 9
8950: NOT
8951: PUSH
8952: LD_VAR 0 5
8956: NOT
8957: AND
8958: IFFALSE 8962
// exit ;
8960: GO 9141
// if not units then
8962: LD_VAR 0 9
8966: NOT
8967: IFFALSE 8994
// units = characters diff [ Burlak , Stevens ] ;
8969: LD_ADDR_VAR 0 9
8973: PUSH
8974: LD_VAR 0 1
8978: PUSH
8979: LD_EXP 40
8983: PUSH
8984: LD_EXP 58
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: DIFF
8993: ST_TO_ADDR
// if not units and canTalkHero then
8994: LD_VAR 0 9
8998: NOT
8999: PUSH
9000: LD_VAR 0 5
9004: AND
9005: IFFALSE 9009
// exit ;
9007: GO 9141
// speaker := units [ rand ( 1 , units ) ] ;
9009: LD_ADDR_VAR 0 8
9013: PUSH
9014: LD_VAR 0 9
9018: PUSH
9019: LD_INT 1
9021: PPUSH
9022: LD_VAR 0 9
9026: PPUSH
9027: CALL_OW 12
9031: ARRAY
9032: ST_TO_ADDR
// if radio then
9033: LD_VAR 0 4
9037: IFFALSE 9086
// begin if GetSex ( speaker ) = sex_male then
9039: LD_VAR 0 8
9043: PPUSH
9044: CALL_OW 258
9048: PUSH
9049: LD_INT 1
9051: EQUAL
9052: IFFALSE 9070
// SayRadio ( speaker , dialogMID ) else
9054: LD_VAR 0 8
9058: PPUSH
9059: LD_VAR 0 2
9063: PPUSH
9064: CALL_OW 94
9068: GO 9084
// SayRadio ( speaker , dialogFID ) ;
9070: LD_VAR 0 8
9074: PPUSH
9075: LD_VAR 0 3
9079: PPUSH
9080: CALL_OW 94
// end else
9084: GO 9131
// begin if GetSex ( speaker ) = sex_male then
9086: LD_VAR 0 8
9090: PPUSH
9091: CALL_OW 258
9095: PUSH
9096: LD_INT 1
9098: EQUAL
9099: IFFALSE 9117
// Say ( speaker , dialogMID ) else
9101: LD_VAR 0 8
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: CALL_OW 88
9115: GO 9131
// Say ( speaker , dialogFID ) ;
9117: LD_VAR 0 8
9121: PPUSH
9122: LD_VAR 0 3
9126: PPUSH
9127: CALL_OW 88
// end ; result := speaker ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_VAR 0 8
9140: ST_TO_ADDR
// end ;
9141: LD_VAR 0 6
9145: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9146: LD_INT 0
9148: PPUSH
9149: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: LD_VAR 0 2
9159: PPUSH
9160: CALL_OW 254
9164: PUSH
9165: LD_INT 3
9167: MINUS
9168: ST_TO_ADDR
// if dir < 0 then
9169: LD_VAR 0 4
9173: PUSH
9174: LD_INT 0
9176: LESS
9177: IFFALSE 9193
// dir := 6 + dir ;
9179: LD_ADDR_VAR 0 4
9183: PUSH
9184: LD_INT 6
9186: PUSH
9187: LD_VAR 0 4
9191: PLUS
9192: ST_TO_ADDR
// SetDir ( un , dir ) ;
9193: LD_VAR 0 1
9197: PPUSH
9198: LD_VAR 0 4
9202: PPUSH
9203: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9207: LD_VAR 0 1
9211: PPUSH
9212: LD_VAR 0 2
9216: PPUSH
9217: CALL_OW 52
// result = un ;
9221: LD_ADDR_VAR 0 3
9225: PUSH
9226: LD_VAR 0 1
9230: ST_TO_ADDR
// end ;
9231: LD_VAR 0 3
9235: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9242: LD_ADDR_VAR 0 6
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 71
9252: PUSH
9253: LD_INT 70
9255: PUSH
9256: LD_INT 69
9258: PUSH
9259: LD_INT 39
9261: PUSH
9262: LD_INT 31
9264: PUSH
9265: LD_INT 14
9267: PUSH
9268: LD_INT 10
9270: PUSH
9271: LD_INT 40
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: ST_TO_ADDR
// resultWeapons = [ ] ;
9285: LD_ADDR_VAR 0 5
9289: PUSH
9290: EMPTY
9291: ST_TO_ADDR
// for i := 1 to weaponTechs do
9292: LD_ADDR_VAR 0 4
9296: PUSH
9297: DOUBLE
9298: LD_INT 1
9300: DEC
9301: ST_TO_ADDR
9302: LD_VAR 0 6
9306: PUSH
9307: FOR_TO
9308: IFFALSE 9495
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9310: LD_VAR 0 6
9314: PUSH
9315: LD_VAR 0 4
9319: ARRAY
9320: PPUSH
9321: LD_VAR 0 2
9325: PPUSH
9326: CALL_OW 482
9330: PUSH
9331: LD_VAR 0 6
9335: PUSH
9336: LD_VAR 0 4
9340: ARRAY
9341: PPUSH
9342: LD_VAR 0 1
9346: PPUSH
9347: CALL_OW 321
9351: PUSH
9352: LD_INT 2
9354: EQUAL
9355: AND
9356: IFFALSE 9493
// case nation of nation_american :
9358: LD_VAR 0 2
9362: PUSH
9363: LD_INT 1
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9406
9371: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9372: LD_ADDR_VAR 0 5
9376: PUSH
9377: LD_VAR 0 5
9381: PUSH
9382: LD_VAR 0 6
9386: PUSH
9387: LD_VAR 0 4
9391: ARRAY
9392: PPUSH
9393: LD_VAR 0 2
9397: PPUSH
9398: CALL 9512 0 2
9402: ADD
9403: ST_TO_ADDR
9404: GO 9493
9406: LD_INT 2
9408: DOUBLE
9409: EQUAL
9410: IFTRUE 9414
9412: GO 9449
9414: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9415: LD_ADDR_VAR 0 5
9419: PUSH
9420: LD_VAR 0 5
9424: PUSH
9425: LD_VAR 0 6
9429: PUSH
9430: LD_VAR 0 4
9434: ARRAY
9435: PPUSH
9436: LD_VAR 0 2
9440: PPUSH
9441: CALL 9512 0 2
9445: ADD
9446: ST_TO_ADDR
9447: GO 9493
9449: LD_INT 3
9451: DOUBLE
9452: EQUAL
9453: IFTRUE 9457
9455: GO 9492
9457: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9458: LD_ADDR_VAR 0 5
9462: PUSH
9463: LD_VAR 0 5
9467: PUSH
9468: LD_VAR 0 6
9472: PUSH
9473: LD_VAR 0 4
9477: ARRAY
9478: PPUSH
9479: LD_VAR 0 2
9483: PPUSH
9484: CALL 9512 0 2
9488: ADD
9489: ST_TO_ADDR
9490: GO 9493
9492: POP
// end ;
9493: GO 9307
9495: POP
9496: POP
// result = resultWeapons ;
9497: LD_ADDR_VAR 0 3
9501: PUSH
9502: LD_VAR 0 5
9506: ST_TO_ADDR
// end ;
9507: LD_VAR 0 3
9511: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9512: LD_INT 0
9514: PPUSH
// case tech of tech_AdvMet :
9515: LD_VAR 0 1
9519: PUSH
9520: LD_INT 34
9522: DOUBLE
9523: EQUAL
9524: IFTRUE 9528
9526: GO 9556
9528: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9529: LD_ADDR_VAR 0 3
9533: PUSH
9534: LD_INT 6
9536: PUSH
9537: LD_STRING 
9539: PUSH
9540: LD_INT 46
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: PUSH
9548: LD_VAR 0 2
9552: ARRAY
9553: ST_TO_ADDR
9554: GO 9845
9556: LD_INT 71
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9592
9564: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9565: LD_ADDR_VAR 0 3
9569: PUSH
9570: LD_STRING 
9572: PUSH
9573: LD_STRING 
9575: PUSH
9576: LD_INT 47
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: PUSH
9584: LD_VAR 0 2
9588: ARRAY
9589: ST_TO_ADDR
9590: GO 9845
9592: LD_INT 70
9594: DOUBLE
9595: EQUAL
9596: IFTRUE 9600
9598: GO 9628
9600: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: LD_STRING 
9608: PUSH
9609: LD_INT 26
9611: PUSH
9612: LD_STRING 
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_VAR 0 2
9624: ARRAY
9625: ST_TO_ADDR
9626: GO 9845
9628: LD_INT 69
9630: DOUBLE
9631: EQUAL
9632: IFTRUE 9636
9634: GO 9664
9636: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9637: LD_ADDR_VAR 0 3
9641: PUSH
9642: LD_INT 4
9644: PUSH
9645: LD_INT 25
9647: PUSH
9648: LD_INT 43
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_VAR 0 2
9660: ARRAY
9661: ST_TO_ADDR
9662: GO 9845
9664: LD_INT 39
9666: DOUBLE
9667: EQUAL
9668: IFTRUE 9672
9670: GO 9700
9672: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9673: LD_ADDR_VAR 0 3
9677: PUSH
9678: LD_INT 5
9680: PUSH
9681: LD_INT 27
9683: PUSH
9684: LD_INT 44
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: LD_VAR 0 2
9696: ARRAY
9697: ST_TO_ADDR
9698: GO 9845
9700: LD_INT 31
9702: DOUBLE
9703: EQUAL
9704: IFTRUE 9708
9706: GO 9736
9708: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9709: LD_ADDR_VAR 0 3
9713: PUSH
9714: LD_STRING 
9716: PUSH
9717: LD_STRING 
9719: PUSH
9720: LD_INT 49
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: LD_VAR 0 2
9732: ARRAY
9733: ST_TO_ADDR
9734: GO 9845
9736: LD_INT 14
9738: DOUBLE
9739: EQUAL
9740: IFTRUE 9744
9742: GO 9772
9744: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9745: LD_ADDR_VAR 0 3
9749: PUSH
9750: LD_INT 10
9752: PUSH
9753: LD_STRING 
9755: PUSH
9756: LD_STRING 
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: LD_VAR 0 2
9768: ARRAY
9769: ST_TO_ADDR
9770: GO 9845
9772: LD_INT 10
9774: DOUBLE
9775: EQUAL
9776: IFTRUE 9780
9778: GO 9808
9780: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9781: LD_ADDR_VAR 0 3
9785: PUSH
9786: LD_INT 9
9788: PUSH
9789: LD_STRING 
9791: PUSH
9792: LD_STRING 
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: LD_VAR 0 2
9804: ARRAY
9805: ST_TO_ADDR
9806: GO 9845
9808: LD_INT 40
9810: DOUBLE
9811: EQUAL
9812: IFTRUE 9816
9814: GO 9844
9816: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9817: LD_ADDR_VAR 0 3
9821: PUSH
9822: LD_INT 7
9824: PUSH
9825: LD_INT 28
9827: PUSH
9828: LD_INT 45
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: PUSH
9836: LD_VAR 0 2
9840: ARRAY
9841: ST_TO_ADDR
9842: GO 9845
9844: POP
// end ;
9845: LD_VAR 0 3
9849: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9850: LD_INT 0
9852: PPUSH
9853: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_VAR 0 1
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 289
9871: PUSH
9872: LD_VAR 0 1
9876: PPUSH
9877: LD_INT 2
9879: PPUSH
9880: CALL_OW 289
9884: PUSH
9885: LD_VAR 0 1
9889: PPUSH
9890: LD_INT 3
9892: PPUSH
9893: CALL_OW 289
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: ST_TO_ADDR
// end ; end_of_file
9903: LD_VAR 0 2
9907: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9908: LD_VAR 0 1
9912: PPUSH
9913: CALL_OW 255
9917: PUSH
9918: LD_INT 3
9920: EQUAL
9921: PUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 266
9931: PUSH
9932: LD_INT 0
9934: EQUAL
9935: AND
9936: IFFALSE 9950
// SetBname ( building , bukharin ) ;
9938: LD_VAR 0 1
9942: PPUSH
9943: LD_STRING bukharin
9945: PPUSH
9946: CALL_OW 500
// if GetSide ( building ) = 3 and GetBTYpe ( building ) in [ b_lab , b_lab_basic , b_lab_full , b_lab_half ] and not buildedLab then
9950: LD_VAR 0 1
9954: PPUSH
9955: CALL_OW 255
9959: PUSH
9960: LD_INT 3
9962: EQUAL
9963: PUSH
9964: LD_VAR 0 1
9968: PPUSH
9969: CALL_OW 266
9973: PUSH
9974: LD_INT 6
9976: PUSH
9977: LD_INT 9
9979: PUSH
9980: LD_INT 8
9982: PUSH
9983: LD_INT 7
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: IN
9992: AND
9993: PUSH
9994: LD_EXP 25
9998: NOT
9999: AND
10000: IFFALSE 10010
// buildedLab = true ;
10002: LD_ADDR_EXP 25
10006: PUSH
10007: LD_INT 1
10009: ST_TO_ADDR
// if GetSide ( building ) = 2 then
10010: LD_VAR 0 1
10014: PPUSH
10015: CALL_OW 255
10019: PUSH
10020: LD_INT 2
10022: EQUAL
10023: IFFALSE 10172
// begin if GetBType ( building ) = b_lab then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 266
10034: PUSH
10035: LD_INT 6
10037: EQUAL
10038: IFFALSE 10052
// ComUpgradeLab ( building , b_lab_weapon ) ;
10040: LD_VAR 0 1
10044: PPUSH
10045: LD_INT 10
10047: PPUSH
10048: CALL_OW 147
// if GetBType ( building ) = b_workshop then
10052: LD_VAR 0 1
10056: PPUSH
10057: CALL_OW 266
10061: PUSH
10062: LD_INT 2
10064: EQUAL
10065: IFFALSE 10076
// ComUpgrade ( building ) ;
10067: LD_VAR 0 1
10071: PPUSH
10072: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
10076: LD_VAR 0 1
10080: PPUSH
10081: CALL_OW 266
10085: PUSH
10086: LD_INT 17
10088: EQUAL
10089: IFFALSE 10172
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 2 , 2 , 3 , 3 ] [ Difficulty ] , 1 , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , true ) ;
10091: LD_INT 2
10093: PPUSH
10094: LD_INT 2
10096: PPUSH
10097: LD_EXP 52
10101: PPUSH
10102: LD_INT 34
10104: PPUSH
10105: LD_INT 39
10107: PPUSH
10108: LD_INT 40
10110: PPUSH
10111: LD_INT 35
10113: PPUSH
10114: LD_INT 2
10116: PUSH
10117: LD_INT 2
10119: PUSH
10120: LD_INT 3
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PUSH
10132: LD_OWVAR 67
10136: ARRAY
10137: PPUSH
10138: LD_INT 1
10140: PPUSH
10141: LD_INT 1
10143: PUSH
10144: LD_INT 1
10146: PUSH
10147: LD_INT 2
10149: PUSH
10150: LD_INT 2
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: PUSH
10159: LD_OWVAR 67
10163: ARRAY
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: CALL 10988 0 11
// end ; end ;
10172: PPOPN 1
10174: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
10175: LD_VAR 0 2
10179: PPUSH
10180: CALL_OW 255
10184: PUSH
10185: LD_INT 3
10187: EQUAL
10188: PUSH
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 248
10198: PUSH
10199: LD_INT 3
10201: EQUAL
10202: AND
10203: PUSH
10204: LD_EXP 10
10208: NOT
10209: AND
10210: IFFALSE 10221
// Dial_TameApe ( human ) ;
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL 4491 0 1
// end ;
10221: PPOPN 2
10223: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10224: LD_VAR 0 1
10228: PUSH
10229: LD_INT 1
10231: EQUAL
10232: PUSH
10233: LD_VAR 0 2
10237: PPUSH
10238: CALL_OW 255
10242: PUSH
10243: LD_INT 3
10245: EQUAL
10246: AND
10247: IFFALSE 10253
// Dial_ResearchApeLang ;
10249: CALL 4380 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10253: LD_VAR 0 1
10257: PUSH
10258: LD_INT 2
10260: EQUAL
10261: PUSH
10262: LD_VAR 0 2
10266: PPUSH
10267: CALL_OW 255
10271: PUSH
10272: LD_INT 3
10274: EQUAL
10275: AND
10276: IFFALSE 10282
// Dial_ResearchApePsych ;
10278: CALL 4924 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10282: LD_VAR 0 1
10286: PUSH
10287: LD_INT 11
10289: EQUAL
10290: PUSH
10291: LD_VAR 0 2
10295: PPUSH
10296: CALL_OW 255
10300: PUSH
10301: LD_INT 3
10303: EQUAL
10304: AND
10305: IFFALSE 10311
// Dial_ResearchApeAgress ;
10307: CALL 5116 0 0
// end ;
10311: PPOPN 2
10313: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 255
10323: PUSH
10324: LD_INT 3
10326: EQUAL
10327: PUSH
10328: LD_VAR 0 2
10332: PPUSH
10333: CALL_OW 257
10337: PUSH
10338: LD_INT 12
10340: EQUAL
10341: AND
10342: PUSH
10343: LD_VAR 0 1
10347: PPUSH
10348: CALL_OW 266
10352: PUSH
10353: LD_INT 6
10355: EQUAL
10356: PUSH
10357: LD_VAR 0 1
10361: PPUSH
10362: CALL_OW 266
10366: PUSH
10367: LD_INT 7
10369: EQUAL
10370: OR
10371: AND
10372: PUSH
10373: LD_EXP 11
10377: NOT
10378: AND
10379: IFFALSE 10385
// Dial_ApeEnterLab ;
10381: CALL 4712 0 0
// end ;
10385: PPOPN 2
10387: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10388: LD_VAR 0 1
10392: PUSH
10393: LD_EXP 53
10397: IN
10398: IFFALSE 10416
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10400: LD_ADDR_EXP 53
10404: PUSH
10405: LD_EXP 53
10409: PUSH
10410: LD_VAR 0 1
10414: DIFF
10415: ST_TO_ADDR
// if unit in arabianHovercrafts then
10416: LD_VAR 0 1
10420: PUSH
10421: LD_EXP 54
10425: IN
10426: IFFALSE 10444
// arabianHovercrafts = arabianHovercrafts diff unit ;
10428: LD_ADDR_EXP 54
10432: PUSH
10433: LD_EXP 54
10437: PUSH
10438: LD_VAR 0 1
10442: DIFF
10443: ST_TO_ADDR
// if unit in arabianPatrolTroops then
10444: LD_VAR 0 1
10448: PUSH
10449: LD_EXP 55
10453: IN
10454: IFFALSE 10472
// arabianPatrolTroops = arabianPatrolTroops diff unit ;
10456: LD_ADDR_EXP 55
10460: PUSH
10461: LD_EXP 55
10465: PUSH
10466: LD_VAR 0 1
10470: DIFF
10471: ST_TO_ADDR
// end ;
10472: PPOPN 1
10474: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10475: LD_VAR 0 1
10479: PUSH
10480: LD_EXP 52
10484: IN
10485: IFFALSE 10503
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10487: LD_ADDR_EXP 52
10491: PUSH
10492: LD_EXP 52
10496: PUSH
10497: LD_VAR 0 1
10501: DIFF
10502: ST_TO_ADDR
// if unit = Burlak then
10503: LD_VAR 0 1
10507: PUSH
10508: LD_EXP 40
10512: EQUAL
10513: IFFALSE 10519
// Lose_Burlak ;
10515: CALL 17396 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10519: LD_INT 22
10521: PUSH
10522: LD_INT 3
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 21
10531: PUSH
10532: LD_INT 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 23
10541: PUSH
10542: LD_INT 3
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 69
10558: PUSH
10559: LD_INT 6
10561: LESS
10562: IFFALSE 10568
// Lose_Survive ;
10564: CALL 17411 0 0
// if GetType ( unit ) = unit_vehicle and GetSide ( unit ) = 2 and GetChassis ( unit ) = ar_hovercraft then
10568: LD_VAR 0 1
10572: PPUSH
10573: CALL_OW 247
10577: PUSH
10578: LD_INT 2
10580: EQUAL
10581: PUSH
10582: LD_VAR 0 1
10586: PPUSH
10587: CALL_OW 255
10591: PUSH
10592: LD_INT 2
10594: EQUAL
10595: AND
10596: PUSH
10597: LD_VAR 0 1
10601: PPUSH
10602: CALL_OW 265
10606: PUSH
10607: LD_INT 11
10609: EQUAL
10610: AND
10611: IFFALSE 10627
// achievement_DestroyedHovercrafts = achievement_DestroyedHovercrafts + 1 ;
10613: LD_ADDR_EXP 26
10617: PUSH
10618: LD_EXP 26
10622: PUSH
10623: LD_INT 1
10625: PLUS
10626: ST_TO_ADDR
// end ;
10627: PPOPN 1
10629: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10630: LD_VAR 0 1
10634: PUSH
10635: LD_INT 3
10637: EQUAL
10638: PUSH
10639: LD_VAR 0 2
10643: PUSH
10644: LD_INT 6
10646: EQUAL
10647: AND
10648: PUSH
10649: LD_VAR 0 1
10653: PUSH
10654: LD_INT 6
10656: EQUAL
10657: PUSH
10658: LD_VAR 0 2
10662: PUSH
10663: LD_INT 3
10665: EQUAL
10666: AND
10667: OR
10668: PUSH
10669: LD_EXP 58
10673: PPUSH
10674: CALL_OW 255
10678: PUSH
10679: LD_INT 6
10681: EQUAL
10682: AND
10683: IFFALSE 10741
// begin stevensFollow = false ;
10685: LD_ADDR_EXP 15
10689: PUSH
10690: LD_INT 0
10692: ST_TO_ADDR
// stevensCanExitMap = true ;
10693: LD_ADDR_EXP 19
10697: PUSH
10698: LD_INT 1
10700: ST_TO_ADDR
// stevensWasInDepot = false ;
10701: LD_ADDR_EXP 18
10705: PUSH
10706: LD_INT 0
10708: ST_TO_ADDR
// stevensDepot = false ;
10709: LD_ADDR_EXP 17
10713: PUSH
10714: LD_INT 0
10716: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10717: LD_EXP 58
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10729: LD_EXP 58
10733: PPUSH
10734: LD_INT 37
10736: PPUSH
10737: CALL_OW 113
// end ; end ; end_of_file
10741: PPOPN 2
10743: END
// export function BuildBase ; var engs ; begin
10744: LD_INT 0
10746: PPUSH
10747: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10748: LD_ADDR_VAR 0 2
10752: PUSH
10753: LD_INT 22
10755: PUSH
10756: LD_INT 2
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 21
10765: PUSH
10766: LD_INT 1
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 25
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 69
10792: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10793: LD_VAR 0 2
10797: PPUSH
10798: LD_INT 4
10800: PPUSH
10801: LD_INT 129
10803: PPUSH
10804: LD_INT 74
10806: PPUSH
10807: LD_INT 2
10809: PPUSH
10810: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10814: LD_VAR 0 2
10818: PPUSH
10819: LD_INT 26
10821: PPUSH
10822: LD_INT 128
10824: PPUSH
10825: LD_INT 53
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 127 , 56 , 1 ) ;
10835: LD_VAR 0 2
10839: PPUSH
10840: LD_INT 26
10842: PPUSH
10843: LD_INT 127
10845: PPUSH
10846: LD_INT 56
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10856: LD_VAR 0 2
10860: PPUSH
10861: LD_INT 6
10863: PPUSH
10864: LD_INT 138
10866: PPUSH
10867: LD_INT 78
10869: PPUSH
10870: LD_INT 5
10872: PPUSH
10873: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10877: LD_VAR 0 2
10881: PPUSH
10882: LD_INT 2
10884: PPUSH
10885: LD_INT 137
10887: PPUSH
10888: LD_INT 63
10890: PPUSH
10891: LD_INT 4
10893: PPUSH
10894: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10898: LD_VAR 0 2
10902: PPUSH
10903: LD_INT 23
10905: PPUSH
10906: LD_INT 137
10908: PPUSH
10909: LD_INT 60
10911: PPUSH
10912: LD_INT 3
10914: PPUSH
10915: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10919: LD_VAR 0 2
10923: PPUSH
10924: LD_INT 16
10926: PPUSH
10927: LD_INT 140
10929: PPUSH
10930: LD_INT 66
10932: PPUSH
10933: LD_INT 5
10935: PPUSH
10936: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10940: LD_VAR 0 2
10944: PPUSH
10945: LD_INT 17
10947: PPUSH
10948: LD_INT 133
10950: PPUSH
10951: LD_INT 59
10953: PPUSH
10954: LD_INT 2
10956: PPUSH
10957: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10961: LD_INT 1
10963: PUSH
10964: LD_EXP 51
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PPUSH
10973: LD_INT 128
10975: PPUSH
10976: LD_INT 66
10978: PPUSH
10979: CALL_OW 111
// end ;
10983: LD_VAR 0 1
10987: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , offensiveReadyCounter , target1 , target2 , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10988: LD_INT 0
10990: PPUSH
10991: PPUSH
10992: PPUSH
10993: PPUSH
10994: PPUSH
10995: PPUSH
10996: PPUSH
10997: PPUSH
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
11004: PPUSH
11005: PPUSH
11006: PPUSH
11007: PPUSH
11008: PPUSH
11009: PPUSH
11010: PPUSH
11011: PPUSH
11012: PPUSH
11013: PPUSH
11014: PPUSH
11015: PPUSH
11016: PPUSH
11017: PPUSH
11018: PPUSH
11019: PPUSH
11020: PPUSH
11021: PPUSH
// personel = [ ] ;
11022: LD_ADDR_VAR 0 18
11026: PUSH
11027: EMPTY
11028: ST_TO_ADDR
// vehicles = [ ] ;
11029: LD_ADDR_VAR 0 24
11033: PUSH
11034: EMPTY
11035: ST_TO_ADDR
// for unit in basePersonel do
11036: LD_ADDR_VAR 0 17
11040: PUSH
11041: LD_VAR 0 3
11045: PUSH
11046: FOR_IN
11047: IFFALSE 11095
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11049: LD_ADDR_VAR 0 18
11053: PUSH
11054: LD_VAR 0 18
11058: PUSH
11059: LD_VAR 0 17
11063: PUSH
11064: LD_VAR 0 17
11068: PPUSH
11069: CALL_OW 310
11073: PUSH
11074: LD_VAR 0 17
11078: PPUSH
11079: CALL_OW 302
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: ADD
11092: ST_TO_ADDR
11093: GO 11046
11095: POP
11096: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
11097: LD_ADDR_VAR 0 23
11101: PUSH
11102: LD_VAR 0 4
11106: PPUSH
11107: LD_INT 22
11109: PUSH
11110: LD_VAR 0 1
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 21
11121: PUSH
11122: LD_INT 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 50
11131: PUSH
11132: EMPTY
11133: LIST
11134: PUSH
11135: LD_INT 3
11137: PUSH
11138: LD_INT 2
11140: PUSH
11141: LD_INT 31
11143: PUSH
11144: LD_INT 31
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 34
11153: PUSH
11154: LD_INT 12
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 34
11163: PUSH
11164: LD_INT 51
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 34
11173: PUSH
11174: LD_INT 32
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 70
11202: PUSH
11203: LD_EXP 53
11207: DIFF
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11258
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11212: LD_ADDR_VAR 0 24
11216: PUSH
11217: LD_VAR 0 24
11221: PUSH
11222: LD_VAR 0 23
11226: PUSH
11227: LD_VAR 0 23
11231: PPUSH
11232: CALL_OW 310
11236: PUSH
11237: LD_VAR 0 23
11241: PPUSH
11242: CALL_OW 302
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: ADD
11255: ST_TO_ADDR
11256: GO 11209
11258: POP
11259: POP
// repeat soldiers = [ ] ;
11260: LD_ADDR_VAR 0 19
11264: PUSH
11265: EMPTY
11266: ST_TO_ADDR
// engineers = [ ] ;
11267: LD_ADDR_VAR 0 20
11271: PUSH
11272: EMPTY
11273: ST_TO_ADDR
// mechanics = [ ] ;
11274: LD_ADDR_VAR 0 21
11278: PUSH
11279: EMPTY
11280: ST_TO_ADDR
// scientists = [ ] ;
11281: LD_ADDR_VAR 0 22
11285: PUSH
11286: EMPTY
11287: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11288: LD_ADDR_VAR 0 33
11292: PUSH
11293: LD_VAR 0 4
11297: PPUSH
11298: LD_INT 22
11300: PUSH
11301: LD_VAR 0 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 21
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 50
11322: PUSH
11323: EMPTY
11324: LIST
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 0
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 30
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 70
11364: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11365: LD_ADDR_VAR 0 34
11369: PUSH
11370: LD_VAR 0 4
11374: PPUSH
11375: LD_INT 22
11377: PUSH
11378: LD_VAR 0 1
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 21
11389: PUSH
11390: LD_INT 3
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 50
11399: PUSH
11400: EMPTY
11401: LIST
11402: PUSH
11403: LD_INT 2
11405: PUSH
11406: LD_INT 30
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 30
11418: PUSH
11419: LD_INT 3
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 70
11441: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11442: LD_ADDR_VAR 0 35
11446: PUSH
11447: LD_VAR 0 4
11451: PPUSH
11452: LD_INT 22
11454: PUSH
11455: LD_VAR 0 1
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 21
11466: PUSH
11467: LD_INT 3
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: EMPTY
11478: LIST
11479: PUSH
11480: LD_INT 2
11482: PUSH
11483: LD_INT 30
11485: PUSH
11486: LD_INT 6
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 7
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 30
11505: PUSH
11506: LD_INT 8
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PPUSH
11525: CALL_OW 70
11529: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11530: LD_ADDR_VAR 0 36
11534: PUSH
11535: LD_VAR 0 4
11539: PPUSH
11540: LD_INT 22
11542: PUSH
11543: LD_VAR 0 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 21
11554: PUSH
11555: LD_INT 3
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 50
11564: PUSH
11565: EMPTY
11566: LIST
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 30
11573: PUSH
11574: LD_INT 31
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 30
11583: PUSH
11584: LD_INT 32
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 70
11606: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11607: LD_ADDR_VAR 0 37
11611: PUSH
11612: LD_VAR 0 4
11616: PPUSH
11617: LD_INT 22
11619: PUSH
11620: LD_VAR 0 1
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 21
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 50
11641: PUSH
11642: EMPTY
11643: LIST
11644: PUSH
11645: LD_INT 2
11647: PUSH
11648: LD_INT 30
11650: PUSH
11651: LD_INT 4
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 30
11660: PUSH
11661: LD_INT 5
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 70
11683: ST_TO_ADDR
// for i := 1 to personel do
11684: LD_ADDR_VAR 0 13
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_VAR 0 18
11698: PUSH
11699: FOR_TO
11700: IFFALSE 11906
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11702: LD_VAR 0 18
11706: PUSH
11707: LD_VAR 0 13
11711: ARRAY
11712: PUSH
11713: LD_INT 1
11715: ARRAY
11716: PPUSH
11717: CALL_OW 256
11721: PUSH
11722: LD_INT 1000
11724: EQUAL
11725: IFFALSE 11767
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11727: LD_ADDR_VAR 0 18
11731: PUSH
11732: LD_VAR 0 18
11736: PPUSH
11737: LD_VAR 0 13
11741: PUSH
11742: LD_VAR 0 18
11746: PUSH
11747: LD_VAR 0 13
11751: ARRAY
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: LD_INT 1
11759: PPUSH
11760: CALL 26234 0 3
11764: ST_TO_ADDR
// end else
11765: GO 11854
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11767: LD_VAR 0 18
11771: PUSH
11772: LD_VAR 0 13
11776: ARRAY
11777: PUSH
11778: LD_INT 1
11780: ARRAY
11781: PPUSH
11782: CALL_OW 256
11786: PUSH
11787: LD_INT 950
11789: LESSEQUAL
11790: IFFALSE 11854
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
11792: LD_ADDR_VAR 0 18
11796: PUSH
11797: LD_VAR 0 18
11801: PPUSH
11802: LD_VAR 0 13
11806: PUSH
11807: LD_VAR 0 18
11811: PUSH
11812: LD_VAR 0 13
11816: ARRAY
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PPUSH
11822: LD_INT 0
11824: PPUSH
11825: CALL 26234 0 3
11829: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11830: LD_VAR 0 18
11834: PUSH
11835: LD_VAR 0 13
11839: ARRAY
11840: PUSH
11841: LD_INT 1
11843: ARRAY
11844: PPUSH
11845: LD_VAR 0 5
11849: PPUSH
11850: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11854: LD_VAR 0 18
11858: PUSH
11859: LD_VAR 0 13
11863: ARRAY
11864: PUSH
11865: LD_INT 1
11867: ARRAY
11868: PPUSH
11869: CALL_OW 256
11873: PUSH
11874: LD_INT 250
11876: LESS
11877: IFFALSE 11904
// personel = personel diff [ personel [ i ] ] ;
11879: LD_ADDR_VAR 0 18
11883: PUSH
11884: LD_VAR 0 18
11888: PUSH
11889: LD_VAR 0 18
11893: PUSH
11894: LD_VAR 0 13
11898: ARRAY
11899: PUSH
11900: EMPTY
11901: LIST
11902: DIFF
11903: ST_TO_ADDR
// end ;
11904: GO 11699
11906: POP
11907: POP
// for i := 1 to vehicles do
11908: LD_ADDR_VAR 0 13
11912: PUSH
11913: DOUBLE
11914: LD_INT 1
11916: DEC
11917: ST_TO_ADDR
11918: LD_VAR 0 24
11922: PUSH
11923: FOR_TO
11924: IFFALSE 12310
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
11926: LD_VAR 0 24
11930: PUSH
11931: LD_VAR 0 13
11935: ARRAY
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: CALL_OW 261
11945: PUSH
11946: LD_INT 50
11948: LESS
11949: IFFALSE 11973
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
11951: LD_VAR 0 24
11955: PUSH
11956: LD_VAR 0 13
11960: ARRAY
11961: PUSH
11962: LD_INT 1
11964: ARRAY
11965: PPUSH
11966: LD_INT 100
11968: PPUSH
11969: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11973: LD_VAR 0 24
11977: PUSH
11978: LD_VAR 0 13
11982: ARRAY
11983: PUSH
11984: LD_INT 1
11986: ARRAY
11987: PPUSH
11988: CALL_OW 256
11992: PUSH
11993: LD_INT 1000
11995: EQUAL
11996: IFFALSE 12171
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11998: LD_VAR 0 24
12002: PUSH
12003: LD_VAR 0 13
12007: ARRAY
12008: PUSH
12009: LD_INT 1
12011: ARRAY
12012: PPUSH
12013: CALL_OW 263
12017: PUSH
12018: LD_INT 1
12020: EQUAL
12021: IFFALSE 12079
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
12023: LD_VAR 0 24
12027: PUSH
12028: LD_VAR 0 13
12032: ARRAY
12033: PUSH
12034: LD_INT 2
12036: ARRAY
12037: PPUSH
12038: CALL_OW 310
12042: NOT
12043: IFFALSE 12079
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12045: LD_VAR 0 24
12049: PUSH
12050: LD_VAR 0 13
12054: ARRAY
12055: PUSH
12056: LD_INT 2
12058: ARRAY
12059: PPUSH
12060: LD_VAR 0 24
12064: PUSH
12065: LD_VAR 0 13
12069: ARRAY
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: PPUSH
12075: CALL_OW 120
// if offensiveunits < vehiclesToAttackAmount then
12079: LD_VAR 0 27
12083: PUSH
12084: LD_VAR 0 10
12088: LESS
12089: IFFALSE 12131
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
12091: LD_ADDR_VAR 0 24
12095: PUSH
12096: LD_VAR 0 24
12100: PPUSH
12101: LD_VAR 0 13
12105: PUSH
12106: LD_VAR 0 24
12110: PUSH
12111: LD_VAR 0 13
12115: ARRAY
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PPUSH
12121: LD_INT 3
12123: PPUSH
12124: CALL 26234 0 3
12128: ST_TO_ADDR
12129: GO 12169
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12131: LD_ADDR_VAR 0 24
12135: PUSH
12136: LD_VAR 0 24
12140: PPUSH
12141: LD_VAR 0 13
12145: PUSH
12146: LD_VAR 0 24
12150: PUSH
12151: LD_VAR 0 13
12155: ARRAY
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PPUSH
12161: LD_INT 2
12163: PPUSH
12164: CALL 26234 0 3
12168: ST_TO_ADDR
// end else
12169: GO 12258
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12171: LD_VAR 0 24
12175: PUSH
12176: LD_VAR 0 13
12180: ARRAY
12181: PUSH
12182: LD_INT 1
12184: ARRAY
12185: PPUSH
12186: CALL_OW 256
12190: PUSH
12191: LD_INT 650
12193: LESSEQUAL
12194: IFFALSE 12258
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12196: LD_ADDR_VAR 0 24
12200: PUSH
12201: LD_VAR 0 24
12205: PPUSH
12206: LD_VAR 0 13
12210: PUSH
12211: LD_VAR 0 24
12215: PUSH
12216: LD_VAR 0 13
12220: ARRAY
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL 26234 0 3
12233: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12234: LD_VAR 0 24
12238: PUSH
12239: LD_VAR 0 13
12243: ARRAY
12244: PUSH
12245: LD_INT 1
12247: ARRAY
12248: PPUSH
12249: LD_VAR 0 6
12253: PPUSH
12254: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12258: LD_VAR 0 24
12262: PUSH
12263: LD_VAR 0 13
12267: ARRAY
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 256
12277: PUSH
12278: LD_INT 250
12280: LESS
12281: IFFALSE 12308
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12283: LD_ADDR_VAR 0 24
12287: PUSH
12288: LD_VAR 0 24
12292: PUSH
12293: LD_VAR 0 24
12297: PUSH
12298: LD_VAR 0 13
12302: ARRAY
12303: PUSH
12304: EMPTY
12305: LIST
12306: DIFF
12307: ST_TO_ADDR
// end ;
12308: GO 11923
12310: POP
12311: POP
// for i := 1 to personel do
12312: LD_ADDR_VAR 0 13
12316: PUSH
12317: DOUBLE
12318: LD_INT 1
12320: DEC
12321: ST_TO_ADDR
12322: LD_VAR 0 18
12326: PUSH
12327: FOR_TO
12328: IFFALSE 12369
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12330: LD_ADDR_VAR 0 19
12334: PUSH
12335: LD_VAR 0 19
12339: PUSH
12340: LD_VAR 0 18
12344: PUSH
12345: LD_VAR 0 13
12349: ARRAY
12350: PPUSH
12351: LD_INT 25
12353: PUSH
12354: LD_INT 1
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 72
12365: ADD
12366: ST_TO_ADDR
12367: GO 12327
12369: POP
12370: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12371: LD_VAR 0 19
12375: PUSH
12376: LD_VAR 0 36
12380: PPUSH
12381: LD_INT 3
12383: PUSH
12384: LD_INT 59
12386: PUSH
12387: EMPTY
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 72
12398: AND
12399: IFFALSE 12687
// begin for i := 1 to personel do
12401: LD_ADDR_VAR 0 13
12405: PUSH
12406: DOUBLE
12407: LD_INT 1
12409: DEC
12410: ST_TO_ADDR
12411: LD_VAR 0 18
12415: PUSH
12416: FOR_TO
12417: IFFALSE 12683
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12419: LD_VAR 0 18
12423: PUSH
12424: LD_VAR 0 13
12428: ARRAY
12429: PUSH
12430: LD_INT 1
12432: ARRAY
12433: PPUSH
12434: CALL_OW 257
12438: PUSH
12439: LD_INT 1
12441: EQUAL
12442: PUSH
12443: LD_VAR 0 18
12447: PUSH
12448: LD_VAR 0 13
12452: ARRAY
12453: PUSH
12454: LD_INT 3
12456: ARRAY
12457: PUSH
12458: LD_INT 1
12460: EQUAL
12461: AND
12462: IFFALSE 12681
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12464: LD_VAR 0 18
12468: PUSH
12469: LD_VAR 0 13
12473: ARRAY
12474: PUSH
12475: LD_INT 1
12477: ARRAY
12478: PPUSH
12479: CALL_OW 437
12483: IFFALSE 12584
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12485: LD_VAR 0 18
12489: PUSH
12490: LD_VAR 0 13
12494: ARRAY
12495: PUSH
12496: LD_INT 1
12498: ARRAY
12499: PPUSH
12500: CALL_OW 437
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PUSH
12513: LD_STRING e
12515: EQUAL
12516: PUSH
12517: LD_VAR 0 18
12521: PUSH
12522: LD_VAR 0 13
12526: ARRAY
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: CALL_OW 437
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: PUSH
12541: LD_INT 4
12543: ARRAY
12544: PPUSH
12545: CALL_OW 266
12549: PUSH
12550: LD_INT 4
12552: PUSH
12553: LD_INT 5
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: IN
12560: AND
12561: IFFALSE 12584
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12563: LD_VAR 0 18
12567: PUSH
12568: LD_VAR 0 13
12572: ARRAY
12573: PUSH
12574: LD_INT 1
12576: ARRAY
12577: PPUSH
12578: EMPTY
12579: PPUSH
12580: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12584: LD_ADDR_VAR 0 40
12588: PUSH
12589: LD_VAR 0 36
12593: PPUSH
12594: LD_INT 3
12596: PUSH
12597: LD_INT 59
12599: PUSH
12600: EMPTY
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 72
12611: PUSH
12612: FOR_IN
12613: IFFALSE 12679
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12615: LD_VAR 0 18
12619: PUSH
12620: LD_VAR 0 13
12624: ARRAY
12625: PUSH
12626: LD_INT 1
12628: ARRAY
12629: PPUSH
12630: CALL_OW 310
12634: PPUSH
12635: CALL_OW 266
12639: PUSH
12640: LD_INT 31
12642: PUSH
12643: LD_INT 32
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: IN
12650: NOT
12651: IFFALSE 12677
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12653: LD_VAR 0 18
12657: PUSH
12658: LD_VAR 0 13
12662: ARRAY
12663: PUSH
12664: LD_INT 1
12666: ARRAY
12667: PPUSH
12668: LD_VAR 0 40
12672: PPUSH
12673: CALL_OW 120
12677: GO 12612
12679: POP
12680: POP
// end ; end ;
12681: GO 12416
12683: POP
12684: POP
// end else
12685: GO 12902
// if soldiers and barracks then
12687: LD_VAR 0 19
12691: PUSH
12692: LD_VAR 0 37
12696: AND
12697: IFFALSE 12902
// for i := 1 to personel do
12699: LD_ADDR_VAR 0 13
12703: PUSH
12704: DOUBLE
12705: LD_INT 1
12707: DEC
12708: ST_TO_ADDR
12709: LD_VAR 0 18
12713: PUSH
12714: FOR_TO
12715: IFFALSE 12900
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12717: LD_VAR 0 18
12721: PUSH
12722: LD_VAR 0 13
12726: ARRAY
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PPUSH
12732: CALL_OW 257
12736: PUSH
12737: LD_INT 1
12739: EQUAL
12740: PUSH
12741: LD_VAR 0 18
12745: PUSH
12746: LD_VAR 0 13
12750: ARRAY
12751: PUSH
12752: LD_INT 3
12754: ARRAY
12755: PUSH
12756: LD_INT 1
12758: EQUAL
12759: AND
12760: PUSH
12761: LD_VAR 0 18
12765: PUSH
12766: LD_VAR 0 13
12770: ARRAY
12771: PUSH
12772: LD_INT 1
12774: ARRAY
12775: PPUSH
12776: LD_INT 56
12778: PUSH
12779: EMPTY
12780: LIST
12781: PPUSH
12782: CALL_OW 72
12786: AND
12787: IFFALSE 12898
// begin if not personel [ i ] [ 2 ] then
12789: LD_VAR 0 18
12793: PUSH
12794: LD_VAR 0 13
12798: ARRAY
12799: PUSH
12800: LD_INT 2
12802: ARRAY
12803: NOT
12804: IFFALSE 12864
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12806: LD_ADDR_VAR 0 18
12810: PUSH
12811: LD_VAR 0 18
12815: PPUSH
12816: LD_VAR 0 13
12820: PUSH
12821: LD_VAR 0 18
12825: PUSH
12826: LD_VAR 0 13
12830: ARRAY
12831: PUSH
12832: LD_INT 1
12834: MINUS
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: LD_VAR 0 37
12844: PUSH
12845: LD_INT 1
12847: PPUSH
12848: LD_VAR 0 37
12852: PPUSH
12853: CALL_OW 12
12857: ARRAY
12858: PPUSH
12859: CALL 26234 0 3
12863: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12864: LD_VAR 0 18
12868: PUSH
12869: LD_VAR 0 13
12873: ARRAY
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 18
12883: PUSH
12884: LD_VAR 0 13
12888: ARRAY
12889: PUSH
12890: LD_INT 2
12892: ARRAY
12893: PPUSH
12894: CALL_OW 120
// end ;
12898: GO 12714
12900: POP
12901: POP
// for i := 1 to personel do
12902: LD_ADDR_VAR 0 13
12906: PUSH
12907: DOUBLE
12908: LD_INT 1
12910: DEC
12911: ST_TO_ADDR
12912: LD_VAR 0 18
12916: PUSH
12917: FOR_TO
12918: IFFALSE 12959
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12920: LD_ADDR_VAR 0 20
12924: PUSH
12925: LD_VAR 0 20
12929: PUSH
12930: LD_VAR 0 18
12934: PUSH
12935: LD_VAR 0 13
12939: ARRAY
12940: PPUSH
12941: LD_INT 25
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 72
12955: ADD
12956: ST_TO_ADDR
12957: GO 12917
12959: POP
12960: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12961: LD_VAR 0 20
12965: PUSH
12966: LD_VAR 0 4
12970: PPUSH
12971: LD_INT 22
12973: PUSH
12974: LD_VAR 0 1
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 21
12985: PUSH
12986: LD_INT 3
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 3
12995: PUSH
12996: LD_INT 24
12998: PUSH
12999: LD_INT 1000
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: PPUSH
13015: CALL_OW 70
13019: AND
13020: IFFALSE 13296
// begin for i := 1 to personel do
13022: LD_ADDR_VAR 0 13
13026: PUSH
13027: DOUBLE
13028: LD_INT 1
13030: DEC
13031: ST_TO_ADDR
13032: LD_VAR 0 18
13036: PUSH
13037: FOR_TO
13038: IFFALSE 13292
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13040: LD_VAR 0 18
13044: PUSH
13045: LD_VAR 0 13
13049: ARRAY
13050: PUSH
13051: LD_INT 1
13053: ARRAY
13054: PPUSH
13055: CALL_OW 257
13059: PUSH
13060: LD_INT 2
13062: EQUAL
13063: PUSH
13064: LD_VAR 0 18
13068: PUSH
13069: LD_VAR 0 13
13073: ARRAY
13074: PUSH
13075: LD_INT 3
13077: ARRAY
13078: PUSH
13079: LD_INT 1
13081: EQUAL
13082: AND
13083: IFFALSE 13290
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13085: LD_VAR 0 18
13089: PUSH
13090: LD_VAR 0 13
13094: ARRAY
13095: PUSH
13096: LD_INT 1
13098: ARRAY
13099: PPUSH
13100: CALL_OW 437
13104: IFFALSE 13160
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13106: LD_VAR 0 18
13110: PUSH
13111: LD_VAR 0 13
13115: ARRAY
13116: PUSH
13117: LD_INT 1
13119: ARRAY
13120: PPUSH
13121: CALL_OW 437
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PUSH
13130: LD_INT 1
13132: ARRAY
13133: PUSH
13134: LD_STRING e
13136: EQUAL
13137: IFFALSE 13160
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13139: LD_VAR 0 18
13143: PUSH
13144: LD_VAR 0 13
13148: ARRAY
13149: PUSH
13150: LD_INT 1
13152: ARRAY
13153: PPUSH
13154: EMPTY
13155: PPUSH
13156: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13160: LD_VAR 0 18
13164: PUSH
13165: LD_VAR 0 13
13169: ARRAY
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: CALL_OW 310
13179: IFFALSE 13200
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13181: LD_VAR 0 18
13185: PUSH
13186: LD_VAR 0 13
13190: ARRAY
13191: PUSH
13192: LD_INT 1
13194: ARRAY
13195: PPUSH
13196: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13200: LD_ADDR_VAR 0 38
13204: PUSH
13205: LD_VAR 0 4
13209: PPUSH
13210: LD_INT 22
13212: PUSH
13213: LD_VAR 0 1
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 21
13224: PUSH
13225: LD_INT 3
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 3
13234: PUSH
13235: LD_INT 24
13237: PUSH
13238: LD_INT 1000
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 70
13258: PUSH
13259: FOR_IN
13260: IFFALSE 13288
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13262: LD_VAR 0 18
13266: PUSH
13267: LD_VAR 0 13
13271: ARRAY
13272: PUSH
13273: LD_INT 1
13275: ARRAY
13276: PPUSH
13277: LD_VAR 0 38
13281: PPUSH
13282: CALL_OW 190
13286: GO 13259
13288: POP
13289: POP
// end ;
13290: GO 13037
13292: POP
13293: POP
// end else
13294: GO 13558
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13296: LD_VAR 0 20
13300: PUSH
13301: LD_VAR 0 20
13305: PPUSH
13306: LD_INT 56
13308: PUSH
13309: EMPTY
13310: LIST
13311: PPUSH
13312: CALL_OW 72
13316: AND
13317: PUSH
13318: LD_VAR 0 33
13322: AND
13323: IFFALSE 13558
// for i := 1 to personel do
13325: LD_ADDR_VAR 0 13
13329: PUSH
13330: DOUBLE
13331: LD_INT 1
13333: DEC
13334: ST_TO_ADDR
13335: LD_VAR 0 18
13339: PUSH
13340: FOR_TO
13341: IFFALSE 13556
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13343: LD_VAR 0 18
13347: PUSH
13348: LD_VAR 0 13
13352: ARRAY
13353: PUSH
13354: LD_INT 1
13356: ARRAY
13357: PPUSH
13358: CALL_OW 257
13362: PUSH
13363: LD_INT 2
13365: EQUAL
13366: PUSH
13367: LD_VAR 0 18
13371: PUSH
13372: LD_VAR 0 13
13376: ARRAY
13377: PUSH
13378: LD_INT 3
13380: ARRAY
13381: PUSH
13382: LD_INT 1
13384: EQUAL
13385: AND
13386: IFFALSE 13554
// begin if not personel [ i ] [ 2 ] then
13388: LD_VAR 0 18
13392: PUSH
13393: LD_VAR 0 13
13397: ARRAY
13398: PUSH
13399: LD_INT 2
13401: ARRAY
13402: NOT
13403: IFFALSE 13520
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13405: LD_ADDR_VAR 0 18
13409: PUSH
13410: LD_VAR 0 18
13414: PPUSH
13415: LD_VAR 0 13
13419: PUSH
13420: LD_VAR 0 18
13424: PUSH
13425: LD_VAR 0 13
13429: ARRAY
13430: PUSH
13431: LD_INT 1
13433: MINUS
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: LD_VAR 0 4
13443: PPUSH
13444: LD_INT 22
13446: PUSH
13447: LD_VAR 0 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 21
13458: PUSH
13459: LD_INT 3
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 50
13468: PUSH
13469: EMPTY
13470: LIST
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: LD_INT 30
13477: PUSH
13478: LD_INT 0
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 30
13487: PUSH
13488: LD_INT 1
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 70
13510: PUSH
13511: LD_INT 1
13513: ARRAY
13514: PPUSH
13515: CALL 26234 0 3
13519: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13520: LD_VAR 0 18
13524: PUSH
13525: LD_VAR 0 13
13529: ARRAY
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_VAR 0 18
13539: PUSH
13540: LD_VAR 0 13
13544: ARRAY
13545: PUSH
13546: LD_INT 2
13548: ARRAY
13549: PPUSH
13550: CALL_OW 120
// end ; end ;
13554: GO 13340
13556: POP
13557: POP
// for i := 1 to personel do
13558: LD_ADDR_VAR 0 13
13562: PUSH
13563: DOUBLE
13564: LD_INT 1
13566: DEC
13567: ST_TO_ADDR
13568: LD_VAR 0 18
13572: PUSH
13573: FOR_TO
13574: IFFALSE 13615
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13576: LD_ADDR_VAR 0 21
13580: PUSH
13581: LD_VAR 0 21
13585: PUSH
13586: LD_VAR 0 18
13590: PUSH
13591: LD_VAR 0 13
13595: ARRAY
13596: PPUSH
13597: LD_INT 25
13599: PUSH
13600: LD_INT 3
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 72
13611: ADD
13612: ST_TO_ADDR
13613: GO 13573
13615: POP
13616: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13617: LD_VAR 0 21
13621: PUSH
13622: LD_VAR 0 4
13626: PPUSH
13627: LD_INT 22
13629: PUSH
13630: LD_VAR 0 1
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 21
13641: PUSH
13642: LD_INT 2
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 3
13651: PUSH
13652: LD_INT 24
13654: PUSH
13655: LD_INT 1000
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: PPUSH
13671: CALL_OW 70
13675: AND
13676: IFFALSE 14110
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13678: LD_ADDR_VAR 0 39
13682: PUSH
13683: LD_VAR 0 4
13687: PPUSH
13688: LD_INT 22
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 21
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 3
13712: PUSH
13713: LD_INT 24
13715: PUSH
13716: LD_INT 1000
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 70
13736: PUSH
13737: FOR_IN
13738: IFFALSE 14106
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13740: LD_VAR 0 39
13744: PPUSH
13745: LD_VAR 0 6
13749: PPUSH
13750: CALL_OW 299
13754: PUSH
13755: LD_INT 5
13757: LESS
13758: IFFALSE 14104
// begin for i := 1 to vehicles do
13760: LD_ADDR_VAR 0 13
13764: PUSH
13765: DOUBLE
13766: LD_INT 1
13768: DEC
13769: ST_TO_ADDR
13770: LD_VAR 0 24
13774: PUSH
13775: FOR_TO
13776: IFFALSE 13845
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13778: LD_VAR 0 24
13782: PUSH
13783: LD_VAR 0 13
13787: ARRAY
13788: PUSH
13789: LD_INT 1
13791: ARRAY
13792: PUSH
13793: LD_VAR 0 39
13797: EQUAL
13798: IFFALSE 13819
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13800: LD_VAR 0 24
13804: PUSH
13805: LD_VAR 0 13
13809: ARRAY
13810: PUSH
13811: LD_INT 2
13813: ARRAY
13814: PPUSH
13815: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13819: LD_VAR 0 24
13823: PUSH
13824: LD_VAR 0 13
13828: ARRAY
13829: PUSH
13830: LD_INT 2
13832: ARRAY
13833: PPUSH
13834: LD_VAR 0 39
13838: PPUSH
13839: CALL_OW 189
// end ;
13843: GO 13775
13845: POP
13846: POP
// for i := 1 to personel do
13847: LD_ADDR_VAR 0 13
13851: PUSH
13852: DOUBLE
13853: LD_INT 1
13855: DEC
13856: ST_TO_ADDR
13857: LD_VAR 0 18
13861: PUSH
13862: FOR_TO
13863: IFFALSE 14102
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13865: LD_VAR 0 18
13869: PUSH
13870: LD_VAR 0 13
13874: ARRAY
13875: PUSH
13876: LD_INT 1
13878: ARRAY
13879: PPUSH
13880: CALL_OW 257
13884: PUSH
13885: LD_INT 3
13887: EQUAL
13888: PUSH
13889: LD_VAR 0 18
13893: PUSH
13894: LD_VAR 0 13
13898: ARRAY
13899: PUSH
13900: LD_INT 3
13902: ARRAY
13903: PUSH
13904: LD_INT 1
13906: EQUAL
13907: AND
13908: IFFALSE 14100
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13910: LD_VAR 0 18
13914: PUSH
13915: LD_VAR 0 13
13919: ARRAY
13920: PUSH
13921: LD_INT 1
13923: ARRAY
13924: PPUSH
13925: CALL_OW 437
13929: IFFALSE 13985
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13931: LD_VAR 0 18
13935: PUSH
13936: LD_VAR 0 13
13940: ARRAY
13941: PUSH
13942: LD_INT 1
13944: ARRAY
13945: PPUSH
13946: CALL_OW 437
13950: PUSH
13951: LD_INT 1
13953: ARRAY
13954: PUSH
13955: LD_INT 1
13957: ARRAY
13958: PUSH
13959: LD_STRING e
13961: EQUAL
13962: IFFALSE 13985
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13964: LD_VAR 0 18
13968: PUSH
13969: LD_VAR 0 13
13973: ARRAY
13974: PUSH
13975: LD_INT 1
13977: ARRAY
13978: PPUSH
13979: EMPTY
13980: PPUSH
13981: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13985: LD_VAR 0 18
13989: PUSH
13990: LD_VAR 0 13
13994: ARRAY
13995: PUSH
13996: LD_INT 1
13998: ARRAY
13999: PPUSH
14000: CALL_OW 310
14004: IFFALSE 14025
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14006: LD_VAR 0 18
14010: PUSH
14011: LD_VAR 0 13
14015: ARRAY
14016: PUSH
14017: LD_INT 1
14019: ARRAY
14020: PPUSH
14021: CALL_OW 122
// if not IsInArea ( personel [ i ] [ 1 ] , baseArea ) then
14025: LD_VAR 0 18
14029: PUSH
14030: LD_VAR 0 13
14034: ARRAY
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: PPUSH
14040: LD_VAR 0 4
14044: PPUSH
14045: CALL_OW 308
14049: NOT
14050: IFFALSE 14076
// ComMoveToArea ( personel [ i ] [ 1 ] , baseArea ) ;
14052: LD_VAR 0 18
14056: PUSH
14057: LD_VAR 0 13
14061: ARRAY
14062: PUSH
14063: LD_INT 1
14065: ARRAY
14066: PPUSH
14067: LD_VAR 0 4
14071: PPUSH
14072: CALL_OW 113
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14076: LD_VAR 0 18
14080: PUSH
14081: LD_VAR 0 13
14085: ARRAY
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: LD_VAR 0 39
14095: PPUSH
14096: CALL_OW 189
// end ;
14100: GO 13862
14102: POP
14103: POP
// end ; end ;
14104: GO 13737
14106: POP
14107: POP
// end else
14108: GO 14315
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
14110: LD_VAR 0 21
14114: PUSH
14115: LD_VAR 0 21
14119: PPUSH
14120: LD_INT 56
14122: PUSH
14123: EMPTY
14124: LIST
14125: PPUSH
14126: CALL_OW 72
14130: AND
14131: PUSH
14132: LD_VAR 0 34
14136: AND
14137: IFFALSE 14315
// for i := 1 to personel do
14139: LD_ADDR_VAR 0 13
14143: PUSH
14144: DOUBLE
14145: LD_INT 1
14147: DEC
14148: ST_TO_ADDR
14149: LD_VAR 0 18
14153: PUSH
14154: FOR_TO
14155: IFFALSE 14313
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14157: LD_VAR 0 18
14161: PUSH
14162: LD_VAR 0 13
14166: ARRAY
14167: PUSH
14168: LD_INT 1
14170: ARRAY
14171: PPUSH
14172: CALL_OW 257
14176: PUSH
14177: LD_INT 3
14179: EQUAL
14180: PUSH
14181: LD_VAR 0 18
14185: PUSH
14186: LD_VAR 0 13
14190: ARRAY
14191: PUSH
14192: LD_INT 3
14194: ARRAY
14195: PUSH
14196: LD_INT 1
14198: EQUAL
14199: AND
14200: IFFALSE 14311
// begin if not personel [ i ] [ 2 ] then
14202: LD_VAR 0 18
14206: PUSH
14207: LD_VAR 0 13
14211: ARRAY
14212: PUSH
14213: LD_INT 2
14215: ARRAY
14216: NOT
14217: IFFALSE 14277
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
14219: LD_ADDR_VAR 0 18
14223: PUSH
14224: LD_VAR 0 18
14228: PPUSH
14229: LD_VAR 0 13
14233: PUSH
14234: LD_VAR 0 18
14238: PUSH
14239: LD_VAR 0 13
14243: ARRAY
14244: PUSH
14245: LD_INT 1
14247: MINUS
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PPUSH
14253: LD_VAR 0 34
14257: PUSH
14258: LD_INT 1
14260: PPUSH
14261: LD_VAR 0 34
14265: PPUSH
14266: CALL_OW 12
14270: ARRAY
14271: PPUSH
14272: CALL 26234 0 3
14276: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14277: LD_VAR 0 18
14281: PUSH
14282: LD_VAR 0 13
14286: ARRAY
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: LD_VAR 0 18
14296: PUSH
14297: LD_VAR 0 13
14301: ARRAY
14302: PUSH
14303: LD_INT 2
14305: ARRAY
14306: PPUSH
14307: CALL_OW 120
// end ;
14311: GO 14154
14313: POP
14314: POP
// for i := 1 to personel do
14315: LD_ADDR_VAR 0 13
14319: PUSH
14320: DOUBLE
14321: LD_INT 1
14323: DEC
14324: ST_TO_ADDR
14325: LD_VAR 0 18
14329: PUSH
14330: FOR_TO
14331: IFFALSE 14372
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14333: LD_ADDR_VAR 0 22
14337: PUSH
14338: LD_VAR 0 22
14342: PUSH
14343: LD_VAR 0 18
14347: PUSH
14348: LD_VAR 0 13
14352: ARRAY
14353: PPUSH
14354: LD_INT 25
14356: PUSH
14357: LD_INT 4
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 72
14368: ADD
14369: ST_TO_ADDR
14370: GO 14330
14372: POP
14373: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14374: LD_VAR 0 22
14378: PUSH
14379: LD_VAR 0 4
14383: PPUSH
14384: LD_INT 22
14386: PUSH
14387: LD_VAR 0 1
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 21
14398: PUSH
14399: LD_INT 1
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 3
14408: PUSH
14409: LD_INT 24
14411: PUSH
14412: LD_INT 1000
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: PPUSH
14428: CALL_OW 70
14432: AND
14433: IFFALSE 14950
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14435: LD_ADDR_VAR 0 39
14439: PUSH
14440: LD_VAR 0 4
14444: PPUSH
14445: LD_INT 22
14447: PUSH
14448: LD_VAR 0 1
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: LD_INT 21
14459: PUSH
14460: LD_INT 1
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 3
14469: PUSH
14470: LD_INT 24
14472: PUSH
14473: LD_INT 1000
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: PPUSH
14489: CALL_OW 70
14493: PUSH
14494: FOR_IN
14495: IFFALSE 14946
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14497: LD_VAR 0 39
14501: PPUSH
14502: LD_VAR 0 5
14506: PPUSH
14507: CALL_OW 299
14511: PUSH
14512: LD_INT 5
14514: LESS
14515: IFFALSE 14723
// for i := 1 to personel do
14517: LD_ADDR_VAR 0 13
14521: PUSH
14522: DOUBLE
14523: LD_INT 1
14525: DEC
14526: ST_TO_ADDR
14527: LD_VAR 0 18
14531: PUSH
14532: FOR_TO
14533: IFFALSE 14721
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14535: LD_VAR 0 18
14539: PUSH
14540: LD_VAR 0 13
14544: ARRAY
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PPUSH
14550: CALL_OW 257
14554: PUSH
14555: LD_INT 4
14557: EQUAL
14558: PUSH
14559: LD_VAR 0 18
14563: PUSH
14564: LD_VAR 0 13
14568: ARRAY
14569: PUSH
14570: LD_INT 3
14572: ARRAY
14573: PUSH
14574: LD_INT 1
14576: EQUAL
14577: AND
14578: IFFALSE 14719
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14580: LD_VAR 0 18
14584: PUSH
14585: LD_VAR 0 13
14589: ARRAY
14590: PUSH
14591: LD_INT 1
14593: ARRAY
14594: PPUSH
14595: CALL_OW 437
14599: IFFALSE 14655
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14601: LD_VAR 0 18
14605: PUSH
14606: LD_VAR 0 13
14610: ARRAY
14611: PUSH
14612: LD_INT 1
14614: ARRAY
14615: PPUSH
14616: CALL_OW 437
14620: PUSH
14621: LD_INT 1
14623: ARRAY
14624: PUSH
14625: LD_INT 1
14627: ARRAY
14628: PUSH
14629: LD_STRING e
14631: EQUAL
14632: IFFALSE 14655
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14634: LD_VAR 0 18
14638: PUSH
14639: LD_VAR 0 13
14643: ARRAY
14644: PUSH
14645: LD_INT 1
14647: ARRAY
14648: PPUSH
14649: EMPTY
14650: PPUSH
14651: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14655: LD_VAR 0 18
14659: PUSH
14660: LD_VAR 0 13
14664: ARRAY
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: PPUSH
14670: CALL_OW 310
14674: IFFALSE 14695
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14676: LD_VAR 0 18
14680: PUSH
14681: LD_VAR 0 13
14685: ARRAY
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PPUSH
14691: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14695: LD_VAR 0 18
14699: PUSH
14700: LD_VAR 0 13
14704: ARRAY
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PPUSH
14710: LD_VAR 0 39
14714: PPUSH
14715: CALL_OW 188
// end ;
14719: GO 14532
14721: POP
14722: POP
// if GetLives ( damageUnit ) < 250 then
14723: LD_VAR 0 39
14727: PPUSH
14728: CALL_OW 256
14732: PUSH
14733: LD_INT 250
14735: LESS
14736: IFFALSE 14944
// for i := 1 to personel do
14738: LD_ADDR_VAR 0 13
14742: PUSH
14743: DOUBLE
14744: LD_INT 1
14746: DEC
14747: ST_TO_ADDR
14748: LD_VAR 0 18
14752: PUSH
14753: FOR_TO
14754: IFFALSE 14942
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14756: LD_VAR 0 18
14760: PUSH
14761: LD_VAR 0 13
14765: ARRAY
14766: PUSH
14767: LD_INT 1
14769: ARRAY
14770: PPUSH
14771: CALL_OW 257
14775: PUSH
14776: LD_INT 4
14778: EQUAL
14779: PUSH
14780: LD_VAR 0 18
14784: PUSH
14785: LD_VAR 0 13
14789: ARRAY
14790: PUSH
14791: LD_INT 3
14793: ARRAY
14794: PUSH
14795: LD_INT 1
14797: EQUAL
14798: AND
14799: IFFALSE 14940
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14801: LD_VAR 0 18
14805: PUSH
14806: LD_VAR 0 13
14810: ARRAY
14811: PUSH
14812: LD_INT 1
14814: ARRAY
14815: PPUSH
14816: CALL_OW 437
14820: IFFALSE 14876
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14822: LD_VAR 0 18
14826: PUSH
14827: LD_VAR 0 13
14831: ARRAY
14832: PUSH
14833: LD_INT 1
14835: ARRAY
14836: PPUSH
14837: CALL_OW 437
14841: PUSH
14842: LD_INT 1
14844: ARRAY
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PUSH
14850: LD_STRING e
14852: EQUAL
14853: IFFALSE 14876
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14855: LD_VAR 0 18
14859: PUSH
14860: LD_VAR 0 13
14864: ARRAY
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: PPUSH
14870: EMPTY
14871: PPUSH
14872: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14876: LD_VAR 0 18
14880: PUSH
14881: LD_VAR 0 13
14885: ARRAY
14886: PUSH
14887: LD_INT 1
14889: ARRAY
14890: PPUSH
14891: CALL_OW 310
14895: IFFALSE 14916
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14897: LD_VAR 0 18
14901: PUSH
14902: LD_VAR 0 13
14906: ARRAY
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14916: LD_VAR 0 18
14920: PUSH
14921: LD_VAR 0 13
14925: ARRAY
14926: PUSH
14927: LD_INT 1
14929: ARRAY
14930: PPUSH
14931: LD_VAR 0 39
14935: PPUSH
14936: CALL_OW 188
// end ;
14940: GO 14753
14942: POP
14943: POP
// end ;
14944: GO 14494
14946: POP
14947: POP
// end else
14948: GO 15155
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14950: LD_VAR 0 22
14954: PUSH
14955: LD_VAR 0 22
14959: PPUSH
14960: LD_INT 56
14962: PUSH
14963: EMPTY
14964: LIST
14965: PPUSH
14966: CALL_OW 72
14970: AND
14971: PUSH
14972: LD_VAR 0 35
14976: AND
14977: IFFALSE 15155
// for i := 1 to personel do
14979: LD_ADDR_VAR 0 13
14983: PUSH
14984: DOUBLE
14985: LD_INT 1
14987: DEC
14988: ST_TO_ADDR
14989: LD_VAR 0 18
14993: PUSH
14994: FOR_TO
14995: IFFALSE 15153
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14997: LD_VAR 0 18
15001: PUSH
15002: LD_VAR 0 13
15006: ARRAY
15007: PUSH
15008: LD_INT 1
15010: ARRAY
15011: PPUSH
15012: CALL_OW 257
15016: PUSH
15017: LD_INT 4
15019: EQUAL
15020: PUSH
15021: LD_VAR 0 18
15025: PUSH
15026: LD_VAR 0 13
15030: ARRAY
15031: PUSH
15032: LD_INT 3
15034: ARRAY
15035: PUSH
15036: LD_INT 1
15038: EQUAL
15039: AND
15040: IFFALSE 15151
// begin if not personel [ i ] [ 2 ] then
15042: LD_VAR 0 18
15046: PUSH
15047: LD_VAR 0 13
15051: ARRAY
15052: PUSH
15053: LD_INT 2
15055: ARRAY
15056: NOT
15057: IFFALSE 15117
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
15059: LD_ADDR_VAR 0 18
15063: PUSH
15064: LD_VAR 0 18
15068: PPUSH
15069: LD_VAR 0 13
15073: PUSH
15074: LD_VAR 0 18
15078: PUSH
15079: LD_VAR 0 13
15083: ARRAY
15084: PUSH
15085: LD_INT 1
15087: MINUS
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PPUSH
15093: LD_VAR 0 35
15097: PUSH
15098: LD_INT 1
15100: PPUSH
15101: LD_VAR 0 35
15105: PPUSH
15106: CALL_OW 12
15110: ARRAY
15111: PPUSH
15112: CALL 26234 0 3
15116: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15117: LD_VAR 0 18
15121: PUSH
15122: LD_VAR 0 13
15126: ARRAY
15127: PUSH
15128: LD_INT 1
15130: ARRAY
15131: PPUSH
15132: LD_VAR 0 18
15136: PUSH
15137: LD_VAR 0 13
15141: ARRAY
15142: PUSH
15143: LD_INT 2
15145: ARRAY
15146: PPUSH
15147: CALL_OW 120
// end ;
15151: GO 14994
15153: POP
15154: POP
// wait ( 0 0$01 ) ;
15155: LD_INT 35
15157: PPUSH
15158: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
15162: LD_VAR 0 24
15166: PUSH
15167: LD_VAR 0 8
15171: LESS
15172: PUSH
15173: LD_VAR 0 34
15177: AND
15178: IFFALSE 15424
// begin tmp = vehiclesAmount - vehicles ;
15180: LD_ADDR_VAR 0 15
15184: PUSH
15185: LD_VAR 0 8
15189: PUSH
15190: LD_VAR 0 24
15194: MINUS
15195: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
15196: LD_ADDR_VAR 0 31
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_VAR 0 2
15210: PPUSH
15211: CALL 9236 0 2
15215: ST_TO_ADDR
// for i := 1 to tmp do
15216: LD_ADDR_VAR 0 13
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_VAR 0 15
15230: PUSH
15231: FOR_TO
15232: IFFALSE 15420
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
15234: LD_ADDR_VAR 0 15
15238: PUSH
15239: LD_VAR 0 31
15243: PUSH
15244: LD_INT 1
15246: PPUSH
15247: LD_VAR 0 31
15251: PPUSH
15252: CALL_OW 12
15256: ARRAY
15257: ST_TO_ADDR
// if tmp then
15258: LD_VAR 0 15
15262: IFFALSE 15418
// begin if tmp in [ 34 , 14 , 71 ] then
15264: LD_VAR 0 15
15268: PUSH
15269: LD_INT 34
15271: PUSH
15272: LD_INT 14
15274: PUSH
15275: LD_INT 71
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: IN
15283: IFFALSE 15321
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15285: LD_ADDR_VAR 0 32
15289: PUSH
15290: LD_INT 4
15292: PUSH
15293: EMPTY
15294: LIST
15295: PUSH
15296: LD_INT 14
15298: PUSH
15299: EMPTY
15300: LIST
15301: PUSH
15302: LD_INT 24
15304: PUSH
15305: EMPTY
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: LIST
15312: PUSH
15313: LD_VAR 0 2
15317: ARRAY
15318: ST_TO_ADDR
15319: GO 15375
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15321: LD_ADDR_VAR 0 32
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: LD_INT 3
15331: PUSH
15332: LD_INT 4
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 14
15342: PUSH
15343: EMPTY
15344: LIST
15345: PUSH
15346: LD_INT 21
15348: PUSH
15349: LD_INT 23
15351: PUSH
15352: LD_INT 24
15354: PUSH
15355: LD_INT 22
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: LD_VAR 0 2
15373: ARRAY
15374: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15375: LD_VAR 0 34
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: LD_VAR 0 32
15388: PUSH
15389: LD_INT 1
15391: PPUSH
15392: LD_VAR 0 32
15396: PPUSH
15397: CALL_OW 12
15401: ARRAY
15402: PPUSH
15403: LD_INT 1
15405: PPUSH
15406: LD_INT 1
15408: PPUSH
15409: LD_VAR 0 15
15413: PPUSH
15414: CALL_OW 185
// end ; end ;
15418: GO 15231
15420: POP
15421: POP
// end else
15422: GO 15437
// ComCancel ( factory [ 1 ] ) ;
15424: LD_VAR 0 34
15428: PUSH
15429: LD_INT 1
15431: ARRAY
15432: PPUSH
15433: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15437: LD_ADDR_VAR 0 23
15441: PUSH
15442: LD_VAR 0 4
15446: PPUSH
15447: LD_INT 22
15449: PUSH
15450: LD_VAR 0 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 21
15461: PUSH
15462: LD_INT 2
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 50
15471: PUSH
15472: EMPTY
15473: LIST
15474: PUSH
15475: LD_INT 3
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: LD_INT 31
15483: PUSH
15484: LD_INT 31
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 34
15493: PUSH
15494: LD_INT 12
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 34
15503: PUSH
15504: LD_INT 51
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 34
15513: PUSH
15514: LD_INT 32
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 70
15542: PUSH
15543: LD_EXP 53
15547: DIFF
15548: PUSH
15549: FOR_IN
15550: IFFALSE 15713
// begin vehicleInList = false ;
15552: LD_ADDR_VAR 0 25
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// for i := 1 to vehicles do
15560: LD_ADDR_VAR 0 13
15564: PUSH
15565: DOUBLE
15566: LD_INT 1
15568: DEC
15569: ST_TO_ADDR
15570: LD_VAR 0 24
15574: PUSH
15575: FOR_TO
15576: IFFALSE 15606
// begin if vehicle in vehicles [ i ] then
15578: LD_VAR 0 23
15582: PUSH
15583: LD_VAR 0 24
15587: PUSH
15588: LD_VAR 0 13
15592: ARRAY
15593: IN
15594: IFFALSE 15604
// vehicleInList = true ;
15596: LD_ADDR_VAR 0 25
15600: PUSH
15601: LD_INT 1
15603: ST_TO_ADDR
// end ;
15604: GO 15575
15606: POP
15607: POP
// if not vehicleInList then
15608: LD_VAR 0 25
15612: NOT
15613: IFFALSE 15711
// if vehicles < vehiclesToAttackAmount then
15615: LD_VAR 0 24
15619: PUSH
15620: LD_VAR 0 10
15624: LESS
15625: IFFALSE 15670
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15627: LD_ADDR_VAR 0 24
15631: PUSH
15632: LD_VAR 0 24
15636: PUSH
15637: LD_VAR 0 23
15641: PUSH
15642: LD_VAR 0 23
15646: PPUSH
15647: CALL_OW 313
15651: PUSH
15652: LD_INT 1
15654: ARRAY
15655: PUSH
15656: LD_INT 3
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: ADD
15667: ST_TO_ADDR
15668: GO 15711
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15670: LD_ADDR_VAR 0 24
15674: PUSH
15675: LD_VAR 0 24
15679: PUSH
15680: LD_VAR 0 23
15684: PUSH
15685: LD_VAR 0 23
15689: PPUSH
15690: CALL_OW 313
15694: PUSH
15695: LD_INT 1
15697: ARRAY
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: ADD
15710: ST_TO_ADDR
// end ;
15711: GO 15549
15713: POP
15714: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15715: LD_ADDR_VAR 0 41
15719: PUSH
15720: LD_INT 81
15722: PUSH
15723: LD_VAR 0 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: PUSH
15737: FOR_IN
15738: IFFALSE 16220
// begin offensiveUnits = [ ] ;
15740: LD_ADDR_VAR 0 27
15744: PUSH
15745: EMPTY
15746: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
15747: LD_ADDR_VAR 0 28
15751: PUSH
15752: LD_INT 0
15754: ST_TO_ADDR
// for i := 1 to vehicles do
15755: LD_ADDR_VAR 0 13
15759: PUSH
15760: DOUBLE
15761: LD_INT 1
15763: DEC
15764: ST_TO_ADDR
15765: LD_VAR 0 24
15769: PUSH
15770: FOR_TO
15771: IFFALSE 15952
// if vehicles [ i ] [ 3 ] = 3 then
15773: LD_VAR 0 24
15777: PUSH
15778: LD_VAR 0 13
15782: ARRAY
15783: PUSH
15784: LD_INT 3
15786: ARRAY
15787: PUSH
15788: LD_INT 3
15790: EQUAL
15791: IFFALSE 15950
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
15793: LD_VAR 0 24
15797: PUSH
15798: LD_VAR 0 13
15802: ARRAY
15803: PUSH
15804: LD_INT 1
15806: ARRAY
15807: PPUSH
15808: CALL_OW 256
15812: PUSH
15813: LD_INT 650
15815: GREATER
15816: IFFALSE 15832
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
15818: LD_ADDR_VAR 0 28
15822: PUSH
15823: LD_VAR 0 28
15827: PUSH
15828: LD_INT 1
15830: PLUS
15831: ST_TO_ADDR
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15832: LD_ADDR_VAR 0 27
15836: PUSH
15837: LD_VAR 0 27
15841: PUSH
15842: LD_VAR 0 24
15846: PUSH
15847: LD_VAR 0 13
15851: ARRAY
15852: PUSH
15853: LD_INT 1
15855: ARRAY
15856: ADD
15857: ST_TO_ADDR
// for j = 1 to personel do
15858: LD_ADDR_VAR 0 14
15862: PUSH
15863: DOUBLE
15864: LD_INT 1
15866: DEC
15867: ST_TO_ADDR
15868: LD_VAR 0 18
15872: PUSH
15873: FOR_TO
15874: IFFALSE 15948
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15876: LD_VAR 0 18
15880: PUSH
15881: LD_VAR 0 14
15885: ARRAY
15886: PUSH
15887: LD_INT 1
15889: ARRAY
15890: PUSH
15891: LD_VAR 0 24
15895: PUSH
15896: LD_VAR 0 13
15900: ARRAY
15901: PUSH
15902: LD_INT 2
15904: ARRAY
15905: EQUAL
15906: IFFALSE 15946
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
15908: LD_ADDR_VAR 0 18
15912: PUSH
15913: LD_VAR 0 18
15917: PPUSH
15918: LD_VAR 0 14
15922: PUSH
15923: LD_VAR 0 18
15927: PUSH
15928: LD_VAR 0 14
15932: ARRAY
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: LD_INT 3
15940: PPUSH
15941: CALL 26234 0 3
15945: ST_TO_ADDR
15946: GO 15873
15948: POP
15949: POP
// end ;
15950: GO 15770
15952: POP
15953: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
15954: LD_VAR 0 10
15958: PUSH
15959: LD_VAR 0 28
15963: LESSEQUAL
15964: IFFALSE 16218
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , offensiveUnits [ 1 ] ) ;
15966: LD_ADDR_VAR 0 29
15970: PUSH
15971: LD_INT 81
15973: PUSH
15974: LD_INT 2
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PPUSH
15981: CALL_OW 69
15985: PPUSH
15986: LD_VAR 0 27
15990: PUSH
15991: LD_INT 1
15993: ARRAY
15994: PPUSH
15995: CALL_OW 74
15999: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 2 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ 1 ] ) ;
16000: LD_ADDR_VAR 0 30
16004: PUSH
16005: LD_INT 81
16007: PUSH
16008: LD_INT 2
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 2
16017: PUSH
16018: LD_INT 59
16020: PUSH
16021: EMPTY
16022: LIST
16023: PUSH
16024: LD_INT 21
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 21
16036: PUSH
16037: LD_INT 2
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: PPUSH
16057: CALL_OW 69
16061: PPUSH
16062: LD_VAR 0 27
16066: PUSH
16067: LD_INT 1
16069: ARRAY
16070: PPUSH
16071: CALL_OW 74
16075: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ 1 ] , target1 ) + 8 < GetDistUnits ( offensiveUnits [ 1 ] , target2 ) then
16076: LD_VAR 0 27
16080: PUSH
16081: LD_INT 1
16083: ARRAY
16084: PPUSH
16085: LD_VAR 0 29
16089: PPUSH
16090: CALL_OW 296
16094: PUSH
16095: LD_INT 8
16097: PLUS
16098: PUSH
16099: LD_VAR 0 27
16103: PUSH
16104: LD_INT 1
16106: ARRAY
16107: PPUSH
16108: LD_VAR 0 30
16112: PPUSH
16113: CALL_OW 296
16117: LESS
16118: IFFALSE 16154
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target1 ) else
16120: LD_VAR 0 27
16124: PPUSH
16125: LD_INT 3
16127: PUSH
16128: LD_INT 60
16130: PUSH
16131: EMPTY
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PPUSH
16138: CALL_OW 72
16142: PPUSH
16143: LD_VAR 0 29
16147: PPUSH
16148: CALL_OW 115
16152: GO 16186
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target2 ) ;
16154: LD_VAR 0 27
16158: PPUSH
16159: LD_INT 3
16161: PUSH
16162: LD_INT 60
16164: PUSH
16165: EMPTY
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PPUSH
16172: CALL_OW 72
16176: PPUSH
16177: LD_VAR 0 30
16181: PPUSH
16182: CALL_OW 115
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16186: LD_VAR 0 27
16190: PPUSH
16191: LD_INT 3
16193: PUSH
16194: LD_INT 60
16196: PUSH
16197: EMPTY
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 72
16208: PPUSH
16209: LD_VAR 0 41
16213: PPUSH
16214: CALL_OW 175
// end ; end ;
16218: GO 15737
16220: POP
16221: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16222: LD_ADDR_VAR 0 41
16226: PUSH
16227: LD_VAR 0 7
16231: PPUSH
16232: LD_INT 81
16234: PUSH
16235: LD_VAR 0 1
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PPUSH
16244: CALL_OW 70
16248: PUSH
16249: FOR_IN
16250: IFFALSE 16429
// begin defenceUnits = [ ] ;
16252: LD_ADDR_VAR 0 26
16256: PUSH
16257: EMPTY
16258: ST_TO_ADDR
// for i := 1 to personel do
16259: LD_ADDR_VAR 0 13
16263: PUSH
16264: DOUBLE
16265: LD_INT 1
16267: DEC
16268: ST_TO_ADDR
16269: LD_VAR 0 18
16273: PUSH
16274: FOR_TO
16275: IFFALSE 16325
// if personel [ i ] [ 3 ] = 2 then
16277: LD_VAR 0 18
16281: PUSH
16282: LD_VAR 0 13
16286: ARRAY
16287: PUSH
16288: LD_INT 3
16290: ARRAY
16291: PUSH
16292: LD_INT 2
16294: EQUAL
16295: IFFALSE 16323
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16297: LD_ADDR_VAR 0 26
16301: PUSH
16302: LD_VAR 0 26
16306: PUSH
16307: LD_VAR 0 18
16311: PUSH
16312: LD_VAR 0 13
16316: ARRAY
16317: PUSH
16318: LD_INT 1
16320: ARRAY
16321: ADD
16322: ST_TO_ADDR
16323: GO 16274
16325: POP
16326: POP
// for i := 1 to vehicles do
16327: LD_ADDR_VAR 0 13
16331: PUSH
16332: DOUBLE
16333: LD_INT 1
16335: DEC
16336: ST_TO_ADDR
16337: LD_VAR 0 24
16341: PUSH
16342: FOR_TO
16343: IFFALSE 16393
// if vehicles [ i ] [ 3 ] = 2 then
16345: LD_VAR 0 24
16349: PUSH
16350: LD_VAR 0 13
16354: ARRAY
16355: PUSH
16356: LD_INT 3
16358: ARRAY
16359: PUSH
16360: LD_INT 2
16362: EQUAL
16363: IFFALSE 16391
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16365: LD_ADDR_VAR 0 26
16369: PUSH
16370: LD_VAR 0 26
16374: PUSH
16375: LD_VAR 0 24
16379: PUSH
16380: LD_VAR 0 13
16384: ARRAY
16385: PUSH
16386: LD_INT 1
16388: ARRAY
16389: ADD
16390: ST_TO_ADDR
16391: GO 16342
16393: POP
16394: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16395: LD_VAR 0 26
16399: PPUSH
16400: LD_INT 3
16402: PUSH
16403: LD_INT 60
16405: PUSH
16406: EMPTY
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PPUSH
16413: CALL_OW 72
16417: PPUSH
16418: LD_VAR 0 41
16422: PPUSH
16423: CALL_OW 175
// end ;
16427: GO 16249
16429: POP
16430: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16431: LD_ADDR_VAR 0 42
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 1
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 30
16453: PUSH
16454: LD_INT 31
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 30
16463: PUSH
16464: LD_INT 32
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 30
16473: PUSH
16474: LD_INT 33
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 30
16483: PUSH
16484: LD_INT 4
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 5
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PPUSH
16513: CALL_OW 69
16517: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16518: LD_ADDR_VAR 0 43
16522: PUSH
16523: LD_INT 81
16525: PUSH
16526: LD_VAR 0 1
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 21
16537: PUSH
16538: LD_INT 3
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 58
16547: PUSH
16548: EMPTY
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16561: LD_VAR 0 42
16565: PUSH
16566: LD_VAR 0 43
16570: AND
16571: IFFALSE 16641
// for i in attackBuildings do
16573: LD_ADDR_VAR 0 13
16577: PUSH
16578: LD_VAR 0 42
16582: PUSH
16583: FOR_IN
16584: IFFALSE 16639
// for j in enemyBuildings do
16586: LD_ADDR_VAR 0 14
16590: PUSH
16591: LD_VAR 0 43
16595: PUSH
16596: FOR_IN
16597: IFFALSE 16635
// if GetDistUnits ( i , j ) < 12 then
16599: LD_VAR 0 13
16603: PPUSH
16604: LD_VAR 0 14
16608: PPUSH
16609: CALL_OW 296
16613: PUSH
16614: LD_INT 12
16616: LESS
16617: IFFALSE 16633
// ComAttackUnit ( i , j ) ;
16619: LD_VAR 0 13
16623: PPUSH
16624: LD_VAR 0 14
16628: PPUSH
16629: CALL_OW 115
16633: GO 16596
16635: POP
16636: POP
16637: GO 16583
16639: POP
16640: POP
// until not personel or arabianCanExitMap ;
16641: LD_VAR 0 18
16645: NOT
16646: PUSH
16647: LD_EXP 21
16651: OR
16652: IFFALSE 11260
// end ;
16654: LD_VAR 0 12
16658: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16659: LD_EXP 53
16663: NOT
16664: IFFALSE 16698
16666: GO 16668
16668: DISABLE
// begin enable ;
16669: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16670: LD_EXP 37
16674: PPUSH
16675: LD_INT 42
16677: PPUSH
16678: CALL 2694 0 2
// arabLeftExit = true ;
16682: LD_ADDR_EXP 56
16686: PUSH
16687: LD_INT 1
16689: ST_TO_ADDR
// arabRightExit = false ;
16690: LD_ADDR_EXP 57
16694: PUSH
16695: LD_INT 0
16697: ST_TO_ADDR
// end ;
16698: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base ;
16699: LD_EXP 53
16703: PUSH
16704: LD_EXP 56
16708: AND
16709: IFFALSE 16904
16711: GO 16713
16713: DISABLE
16714: LD_INT 0
16716: PPUSH
16717: PPUSH
16718: PPUSH
// begin enable ;
16719: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16720: LD_EXP 53
16724: PPUSH
16725: LD_INT 71
16727: PPUSH
16728: LD_INT 137
16730: PPUSH
16731: CALL_OW 114
// for veh in arabianPatrolVehicles do
16735: LD_ADDR_VAR 0 1
16739: PUSH
16740: LD_EXP 53
16744: PUSH
16745: FOR_IN
16746: IFFALSE 16902
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16748: LD_VAR 0 1
16752: PPUSH
16753: LD_INT 43
16755: PPUSH
16756: CALL_OW 308
16760: IFFALSE 16900
// begin if arabianPatrolVehicles then
16762: LD_EXP 53
16766: IFFALSE 16795
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 313
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PPUSH
16782: CALL_OW 64
// RemoveUnit ( veh ) ;
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 64
// end ; x = 0 ;
16795: LD_ADDR_VAR 0 2
16799: PUSH
16800: LD_INT 0
16802: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16803: LD_ADDR_VAR 0 1
16807: PUSH
16808: LD_EXP 53
16812: PUSH
16813: FOR_IN
16814: IFFALSE 16844
// if not IsPlaced ( veh ) then
16816: LD_VAR 0 1
16820: PPUSH
16821: CALL_OW 305
16825: NOT
16826: IFFALSE 16842
// x = x + 1 ;
16828: LD_ADDR_VAR 0 2
16832: PUSH
16833: LD_VAR 0 2
16837: PUSH
16838: LD_INT 1
16840: PLUS
16841: ST_TO_ADDR
16842: GO 16813
16844: POP
16845: POP
// if x = arabianPatrolVehicles then
16846: LD_VAR 0 2
16850: PUSH
16851: LD_EXP 53
16855: EQUAL
16856: IFFALSE 16900
// begin arabLeftExit = false ;
16858: LD_ADDR_EXP 56
16862: PUSH
16863: LD_INT 0
16865: ST_TO_ADDR
// arabRightExit = true ;
16866: LD_ADDR_EXP 57
16870: PUSH
16871: LD_INT 1
16873: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16874: LD_INT 4200
16876: PPUSH
16877: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16881: LD_ADDR_EXP 53
16885: PUSH
16886: EMPTY
16887: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16888: LD_EXP 37
16892: PPUSH
16893: LD_INT 43
16895: PPUSH
16896: CALL 2694 0 2
// end ; end ; end ;
16900: GO 16745
16902: POP
16903: POP
// end ;
16904: PPOPN 3
16906: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16907: LD_EXP 53
16911: PUSH
16912: LD_EXP 57
16916: AND
16917: IFFALSE 17112
16919: GO 16921
16921: DISABLE
16922: LD_INT 0
16924: PPUSH
16925: PPUSH
16926: PPUSH
// begin enable ;
16927: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16928: LD_EXP 53
16932: PPUSH
16933: LD_INT 184
16935: PPUSH
16936: LD_INT 134
16938: PPUSH
16939: CALL_OW 114
// for veh in arabianPatrolVehicles do
16943: LD_ADDR_VAR 0 1
16947: PUSH
16948: LD_EXP 53
16952: PUSH
16953: FOR_IN
16954: IFFALSE 17110
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16956: LD_VAR 0 1
16960: PPUSH
16961: LD_INT 42
16963: PPUSH
16964: CALL_OW 308
16968: IFFALSE 17108
// begin if arabianPatrolVehicles then
16970: LD_EXP 53
16974: IFFALSE 17003
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16976: LD_VAR 0 1
16980: PPUSH
16981: CALL_OW 313
16985: PUSH
16986: LD_INT 1
16988: ARRAY
16989: PPUSH
16990: CALL_OW 64
// RemoveUnit ( veh ) ;
16994: LD_VAR 0 1
16998: PPUSH
16999: CALL_OW 64
// end ; x = 0 ;
17003: LD_ADDR_VAR 0 2
17007: PUSH
17008: LD_INT 0
17010: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
17011: LD_ADDR_VAR 0 1
17015: PUSH
17016: LD_EXP 53
17020: PUSH
17021: FOR_IN
17022: IFFALSE 17052
// if not IsPlaced ( veh ) then
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 305
17033: NOT
17034: IFFALSE 17050
// x = x + 1 ;
17036: LD_ADDR_VAR 0 2
17040: PUSH
17041: LD_VAR 0 2
17045: PUSH
17046: LD_INT 1
17048: PLUS
17049: ST_TO_ADDR
17050: GO 17021
17052: POP
17053: POP
// if x = arabianPatrolVehicles then
17054: LD_VAR 0 2
17058: PUSH
17059: LD_EXP 53
17063: EQUAL
17064: IFFALSE 17108
// begin arabLeftExit = true ;
17066: LD_ADDR_EXP 56
17070: PUSH
17071: LD_INT 1
17073: ST_TO_ADDR
// arabRightExit = false ;
17074: LD_ADDR_EXP 57
17078: PUSH
17079: LD_INT 0
17081: ST_TO_ADDR
// wait ( 2 2$0 ) ;
17082: LD_INT 4200
17084: PPUSH
17085: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
17089: LD_ADDR_EXP 53
17093: PUSH
17094: EMPTY
17095: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
17096: LD_EXP 37
17100: PPUSH
17101: LD_INT 42
17103: PPUSH
17104: CALL 2694 0 2
// end ; end ; end ;
17108: GO 16953
17110: POP
17111: POP
// end ;
17112: PPOPN 3
17114: END
// every 6 6$0 trigger not arabianHovercrafts and not arabianCanExitMap do
17115: LD_EXP 54
17119: NOT
17120: PUSH
17121: LD_EXP 21
17125: NOT
17126: AND
17127: IFFALSE 17137
17129: GO 17131
17131: DISABLE
// begin enable ;
17132: ENABLE
// PrepareArabianHovercraft ;
17133: CALL 2853 0 0
// end ;
17137: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
17138: LD_EXP 54
17142: IFFALSE 17322
17144: GO 17146
17146: DISABLE
17147: LD_INT 0
17149: PPUSH
17150: PPUSH
// begin enable ;
17151: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
17152: LD_EXP 54
17156: PPUSH
17157: LD_INT 100
17159: PPUSH
17160: CALL_OW 240
// if not arabianCanExitMap then
17164: LD_EXP 21
17168: NOT
17169: IFFALSE 17307
// begin for i := 1 to arabianHovercraftsPath do
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: DOUBLE
17177: LD_INT 1
17179: DEC
17180: ST_TO_ADDR
17181: LD_EXP 39
17185: PUSH
17186: FOR_TO
17187: IFFALSE 17230
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
17189: LD_EXP 54
17193: PPUSH
17194: LD_EXP 39
17198: PUSH
17199: LD_VAR 0 1
17203: ARRAY
17204: PUSH
17205: LD_INT 1
17207: ARRAY
17208: PPUSH
17209: LD_EXP 39
17213: PUSH
17214: LD_VAR 0 1
17218: ARRAY
17219: PUSH
17220: LD_INT 2
17222: ARRAY
17223: PPUSH
17224: CALL_OW 174
17228: GO 17186
17230: POP
17231: POP
// x = arabianHovercraftsPath ;
17232: LD_ADDR_VAR 0 2
17236: PUSH
17237: LD_EXP 39
17241: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
17242: LD_EXP 54
17246: PPUSH
17247: LD_EXP 39
17251: PUSH
17252: LD_VAR 0 2
17256: ARRAY
17257: PUSH
17258: LD_INT 1
17260: ARRAY
17261: PPUSH
17262: LD_EXP 39
17266: PUSH
17267: LD_VAR 0 2
17271: ARRAY
17272: PUSH
17273: LD_INT 2
17275: ARRAY
17276: PPUSH
17277: CALL_OW 174
// x = x - 1 ;
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_VAR 0 2
17290: PUSH
17291: LD_INT 1
17293: MINUS
17294: ST_TO_ADDR
// until x = 0 ;
17295: LD_VAR 0 2
17299: PUSH
17300: LD_INT 0
17302: EQUAL
17303: IFFALSE 17242
// end else
17305: GO 17322
// ComAgressiveMove ( arabianHovercrafts , 134 , 68 ) ;
17307: LD_EXP 54
17311: PPUSH
17312: LD_INT 134
17314: PPUSH
17315: LD_INT 68
17317: PPUSH
17318: CALL_OW 114
// end ;
17322: PPOPN 2
17324: END
// every 0 0$1 trigger arabianPatrolTroops do
17325: LD_EXP 55
17329: IFFALSE 17395
17331: GO 17333
17333: DISABLE
// begin enable ;
17334: ENABLE
// AddComAgressiveMove ( arabianPatrolTroops , 127 , 100 ) ;
17335: LD_EXP 55
17339: PPUSH
17340: LD_INT 127
17342: PPUSH
17343: LD_INT 100
17345: PPUSH
17346: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 141 , 133 ) ;
17350: LD_EXP 55
17354: PPUSH
17355: LD_INT 141
17357: PPUSH
17358: LD_INT 133
17360: PPUSH
17361: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 80 , 132 ) ;
17365: LD_EXP 55
17369: PPUSH
17370: LD_INT 80
17372: PPUSH
17373: LD_INT 132
17375: PPUSH
17376: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 174 , 122 ) ;
17380: LD_EXP 55
17384: PPUSH
17385: LD_INT 174
17387: PPUSH
17388: LD_INT 122
17390: PPUSH
17391: CALL_OW 174
// end ; end_of_file
17395: END
// export function Lose_Burlak ; begin
17396: LD_INT 0
17398: PPUSH
// YouLost ( Burlak ) ;
17399: LD_STRING Burlak
17401: PPUSH
17402: CALL_OW 104
// end ;
17406: LD_VAR 0 1
17410: RET
// export function Lose_Survive ; begin
17411: LD_INT 0
17413: PPUSH
// YouLost ( Survive ) ;
17414: LD_STRING Survive
17416: PPUSH
17417: CALL_OW 104
// end ;
17421: LD_VAR 0 1
17425: RET
// export function Lose_Surrender ; begin
17426: LD_INT 0
17428: PPUSH
// YouLost ( Surrender ) ;
17429: LD_STRING Surrender
17431: PPUSH
17432: CALL_OW 104
// end ; end_of_file
17436: LD_VAR 0 1
17440: RET
// every 0 0$1 do
17441: GO 17443
17443: DISABLE
// begin if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
17444: LD_EXP 24
17448: NOT
17449: PUSH
17450: LD_INT 22
17452: PPUSH
17453: LD_INT 22
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 21
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 50
17475: PUSH
17476: EMPTY
17477: LIST
17478: PUSH
17479: LD_INT 59
17481: PUSH
17482: EMPTY
17483: LIST
17484: PUSH
17485: LD_INT 2
17487: PUSH
17488: LD_INT 31
17490: PUSH
17491: LD_INT 22
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 31
17500: PUSH
17501: LD_INT 24
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 31
17510: PUSH
17511: LD_INT 14
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: PPUSH
17531: CALL_OW 70
17535: AND
17536: PUSH
17537: LD_INT 22
17539: PPUSH
17540: LD_INT 22
17542: PUSH
17543: LD_INT 3
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 21
17552: PUSH
17553: LD_INT 1
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 23
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 50
17572: PUSH
17573: EMPTY
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: PPUSH
17582: CALL_OW 70
17586: AND
17587: IFFALSE 17596
// Query ( QVehicles ) ;
17589: LD_STRING QVehicles
17591: PPUSH
17592: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17596: LD_EXP 40
17600: PPUSH
17601: CALL_OW 310
17605: PPUSH
17606: LD_INT 22
17608: PPUSH
17609: CALL_OW 308
17613: PUSH
17614: LD_EXP 24
17618: NOT
17619: AND
17620: PUSH
17621: LD_INT 22
17623: PPUSH
17624: LD_INT 22
17626: PUSH
17627: LD_INT 3
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 21
17636: PUSH
17637: LD_INT 2
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 59
17646: PUSH
17647: EMPTY
17648: LIST
17649: PUSH
17650: LD_INT 50
17652: PUSH
17653: EMPTY
17654: LIST
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: LD_INT 31
17661: PUSH
17662: LD_INT 22
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 31
17671: PUSH
17672: LD_INT 24
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 31
17681: PUSH
17682: LD_INT 14
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: PPUSH
17702: CALL_OW 70
17706: PUSH
17707: LD_INT 22
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 21
17719: PUSH
17720: LD_INT 1
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 23
17729: PUSH
17730: LD_INT 3
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 25
17742: PUSH
17743: LD_INT 1
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 25
17752: PUSH
17753: LD_INT 2
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 25
17762: PUSH
17763: LD_INT 3
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 25
17772: PUSH
17773: LD_INT 4
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: PPUSH
17793: CALL_OW 69
17797: GREATEREQUAL
17798: AND
17799: IFFALSE 17805
// FinishMission ;
17801: CALL 18134 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17805: LD_EXP 40
17809: PPUSH
17810: CALL_OW 310
17814: PPUSH
17815: LD_INT 22
17817: PPUSH
17818: CALL_OW 308
17822: PUSH
17823: LD_EXP 24
17827: NOT
17828: AND
17829: PUSH
17830: LD_INT 22
17832: PPUSH
17833: LD_INT 22
17835: PUSH
17836: LD_INT 3
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 21
17845: PUSH
17846: LD_INT 2
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 59
17855: PUSH
17856: EMPTY
17857: LIST
17858: PUSH
17859: LD_INT 50
17861: PUSH
17862: EMPTY
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 31
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 31
17880: PUSH
17881: LD_INT 24
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 31
17890: PUSH
17891: LD_INT 14
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: PPUSH
17911: CALL_OW 70
17915: PUSH
17916: LD_INT 6
17918: GREATEREQUAL
17919: AND
17920: PUSH
17921: LD_INT 22
17923: PPUSH
17924: LD_INT 22
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 21
17936: PUSH
17937: LD_INT 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 59
17946: PUSH
17947: EMPTY
17948: LIST
17949: PUSH
17950: LD_INT 50
17952: PUSH
17953: EMPTY
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: LD_INT 31
17961: PUSH
17962: LD_INT 22
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 31
17971: PUSH
17972: LD_INT 24
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 31
17981: PUSH
17982: LD_INT 14
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: PPUSH
18002: CALL_OW 70
18006: PUSH
18007: LD_INT 22
18009: PUSH
18010: LD_INT 3
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 21
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 23
18029: PUSH
18030: LD_INT 3
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 2
18039: PUSH
18040: LD_INT 25
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 25
18052: PUSH
18053: LD_INT 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 25
18062: PUSH
18063: LD_INT 3
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 25
18072: PUSH
18073: LD_INT 4
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: PPUSH
18093: CALL_OW 69
18097: LESS
18098: AND
18099: IFFALSE 18125
// begin case Query ( QEndMission ) of 1 :
18101: LD_STRING QEndMission
18103: PPUSH
18104: CALL_OW 97
18108: PUSH
18109: LD_INT 1
18111: DOUBLE
18112: EQUAL
18113: IFTRUE 18117
18115: GO 18124
18117: POP
// FinishMission ; end ;
18118: CALL 18134 0 0
18122: GO 18125
18124: POP
// end ; wait ( 0 0$5 ) ;
18125: LD_INT 175
18127: PPUSH
18128: CALL_OW 67
// enable ;
18132: ENABLE
// end ;
18133: END
// function FinishMission ; var nearUnit ; begin
18134: LD_INT 0
18136: PPUSH
18137: PPUSH
// finishMissionBool = true ;
18138: LD_ADDR_EXP 24
18142: PUSH
18143: LD_INT 1
18145: ST_TO_ADDR
// if stevensDepot then
18146: LD_EXP 17
18150: IFFALSE 18319
// begin DialogueOn ;
18152: CALL_OW 6
// if IsOK ( Petrosyan ) then
18156: LD_EXP 44
18160: PPUSH
18161: CALL_OW 302
18165: IFFALSE 18181
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
18167: LD_EXP 44
18171: PPUSH
18172: LD_STRING DStevensLeftBehind-Pty-1
18174: PPUSH
18175: CALL_OW 88
18179: GO 18295
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
18181: LD_INT 22
18183: PUSH
18184: LD_INT 3
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 21
18193: PUSH
18194: LD_INT 1
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 26
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 50
18213: PUSH
18214: EMPTY
18215: LIST
18216: PUSH
18217: LD_INT 2
18219: PUSH
18220: LD_INT 25
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 25
18232: PUSH
18233: LD_INT 2
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 25
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 25
18252: PUSH
18253: LD_INT 4
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: PPUSH
18274: CALL_OW 69
18278: PPUSH
18279: LD_STRING StevensLeftBehind-RSol1-1
18281: PPUSH
18282: LD_STRING 
18284: PPUSH
18285: LD_INT 0
18287: PPUSH
18288: LD_INT 1
18290: PPUSH
18291: CALL 8863 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
18295: LD_EXP 40
18299: PPUSH
18300: LD_STRING DStevensLeftBehind-Bur-1
18302: PPUSH
18303: CALL_OW 88
// DialogueOff ;
18307: CALL_OW 7
// stevensStatus = 1 ;
18311: LD_ADDR_EXP 2
18315: PUSH
18316: LD_INT 1
18318: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
18319: LD_EXP 14
18323: NOT
18324: PUSH
18325: LD_EXP 44
18329: PPUSH
18330: CALL_OW 302
18334: AND
18335: IFFALSE 18867
// begin PrepareStevens ( exit_rus ) ;
18337: LD_INT 22
18339: PPUSH
18340: CALL 20911 0 1
// wait ( 0 0$1.5 ) ;
18344: LD_INT 52
18346: PPUSH
18347: CALL_OW 67
// stevensPlaced = true ;
18351: LD_ADDR_EXP 14
18355: PUSH
18356: LD_INT 1
18358: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
18359: LD_ADDR_VAR 0 2
18363: PUSH
18364: LD_INT 22
18366: PUSH
18367: LD_INT 3
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 21
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 26
18386: PUSH
18387: LD_INT 1
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 50
18396: PUSH
18397: EMPTY
18398: LIST
18399: PUSH
18400: LD_INT 2
18402: PUSH
18403: LD_INT 25
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 25
18415: PUSH
18416: LD_INT 2
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 25
18425: PUSH
18426: LD_INT 3
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 25
18435: PUSH
18436: LD_INT 4
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: PPUSH
18457: CALL_OW 69
18461: PPUSH
18462: LD_EXP 58
18466: PPUSH
18467: CALL_OW 74
18471: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
18472: LD_EXP 58
18476: PPUSH
18477: CALL_OW 87
// InGameOn ;
18481: CALL_OW 8
// wait ( 0 0$1.5 ) ;
18485: LD_INT 52
18487: PPUSH
18488: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18492: LD_EXP 58
18496: PPUSH
18497: LD_INT 6
18499: PPUSH
18500: CALL_OW 235
// DialogueOn ;
18504: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18508: LD_EXP 58
18512: PPUSH
18513: LD_STRING DStevens-Huck-1
18515: PPUSH
18516: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18520: LD_EXP 44
18524: PPUSH
18525: LD_STRING DStevens-Pty-1
18527: PPUSH
18528: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18532: LD_EXP 44
18536: PPUSH
18537: LD_STRING DStevens-Pty-1a
18539: PPUSH
18540: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18544: LD_EXP 58
18548: PPUSH
18549: LD_STRING DStevens-Huck-2
18551: PPUSH
18552: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18556: LD_EXP 44
18560: PPUSH
18561: LD_STRING DStevens-Pty-2
18563: PPUSH
18564: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18568: LD_EXP 58
18572: PPUSH
18573: LD_STRING DStevens-Huck-3
18575: PPUSH
18576: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18580: LD_EXP 44
18584: PPUSH
18585: LD_STRING DStevens-Pty-3
18587: PPUSH
18588: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18592: LD_EXP 58
18596: PPUSH
18597: LD_STRING DStevens-Huck-4
18599: PPUSH
18600: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18604: LD_EXP 44
18608: PPUSH
18609: LD_STRING DStevensBurlak-Pty-1
18611: PPUSH
18612: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18616: LD_EXP 40
18620: PPUSH
18621: LD_STRING DStevensBurlak-Bur-1
18623: PPUSH
18624: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18628: LD_EXP 44
18632: PPUSH
18633: LD_STRING DStevensBurlak-Pty-2
18635: PPUSH
18636: CALL_OW 88
// case Query ( QKill ) of 1 :
18640: LD_STRING QKill
18642: PPUSH
18643: CALL_OW 97
18647: PUSH
18648: LD_INT 1
18650: DOUBLE
18651: EQUAL
18652: IFTRUE 18656
18654: GO 18783
18656: POP
// begin stevensCanExitMap = true ;
18657: LD_ADDR_EXP 19
18661: PUSH
18662: LD_INT 1
18664: ST_TO_ADDR
// stevensFollow = false ;
18665: LD_ADDR_EXP 15
18669: PUSH
18670: LD_INT 0
18672: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18673: LD_EXP 40
18677: PPUSH
18678: LD_STRING DKill-1-Bur-1
18680: PPUSH
18681: CALL_OW 88
// if IsOK ( Gleb ) then
18685: LD_EXP 43
18689: PPUSH
18690: CALL_OW 302
18694: IFFALSE 18708
// Say ( Gleb , DKill-1-Glb-1 ) ;
18696: LD_EXP 43
18700: PPUSH
18701: LD_STRING DKill-1-Glb-1
18703: PPUSH
18704: CALL_OW 88
// DialogueOff ;
18708: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18712: LD_EXP 58
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 235
// stevensStatus = 0 ;
18724: LD_ADDR_EXP 2
18728: PUSH
18729: LD_INT 0
18731: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18732: LD_INT 22
18734: PUSH
18735: LD_INT 3
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PPUSH
18742: CALL_OW 69
18746: PPUSH
18747: LD_EXP 58
18751: PPUSH
18752: CALL_OW 115
// wait ( 0 0$1 ) ;
18756: LD_INT 35
18758: PPUSH
18759: CALL_OW 67
// until IsDead ( Stevens ) ;
18763: LD_EXP 58
18767: PPUSH
18768: CALL_OW 301
18772: IFFALSE 18732
// wait ( 0 0$1.5 ) ;
18774: LD_INT 52
18776: PPUSH
18777: CALL_OW 67
// end ; 2 :
18781: GO 18867
18783: LD_INT 2
18785: DOUBLE
18786: EQUAL
18787: IFTRUE 18791
18789: GO 18866
18791: POP
// begin stevensCanExitMap = true ;
18792: LD_ADDR_EXP 19
18796: PUSH
18797: LD_INT 1
18799: ST_TO_ADDR
// stevensWasInDepot = false ;
18800: LD_ADDR_EXP 18
18804: PUSH
18805: LD_INT 0
18807: ST_TO_ADDR
// stevensDepot = false ;
18808: LD_ADDR_EXP 17
18812: PUSH
18813: LD_INT 0
18815: ST_TO_ADDR
// stevensStatus = 1 ;
18816: LD_ADDR_EXP 2
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18824: LD_EXP 40
18828: PPUSH
18829: LD_STRING DKill-2-Bur-1
18831: PPUSH
18832: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18836: LD_EXP 44
18840: PPUSH
18841: LD_STRING DKill-2-Pty-1
18843: PPUSH
18844: CALL_OW 88
// DialogueOff ;
18848: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18852: LD_EXP 58
18856: PPUSH
18857: LD_INT 37
18859: PPUSH
18860: CALL_OW 113
// end ; end ;
18864: GO 18867
18866: POP
// end ; SetRewards ;
18867: CALL 18888 0 0
// SavePlayerCharacters ;
18871: CALL 19129 0 0
// SaveGlobalVariables ;
18875: CALL 19474 0 0
// YouWin ;
18879: CALL_OW 103
// end ;
18883: LD_VAR 0 1
18887: RET
// function SetRewards ; begin
18888: LD_INT 0
18890: PPUSH
// if fastBreakthrough then
18891: LD_EXP 23
18895: IFFALSE 18909
// AddMedal ( Time , 1 ) else
18897: LD_STRING Time
18899: PPUSH
18900: LD_INT 1
18902: PPUSH
18903: CALL_OW 101
18907: GO 18920
// AddMedal ( Time , - 1 ) ;
18909: LD_STRING Time
18911: PPUSH
18912: LD_INT 1
18914: NEG
18915: PPUSH
18916: CALL_OW 101
// if dial_tameApeBlocker then
18920: LD_EXP 10
18924: IFFALSE 18938
// AddMedal ( Apemen , 1 ) else
18926: LD_STRING Apemen
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: CALL_OW 101
18936: GO 18985
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18938: LD_EXP 10
18942: NOT
18943: PUSH
18944: LD_INT 1
18946: PPUSH
18947: LD_INT 3
18949: PPUSH
18950: CALL_OW 321
18954: PUSH
18955: LD_INT 1
18957: EQUAL
18958: AND
18959: IFFALSE 18974
// AddMedal ( Apemen , - 1 ) else
18961: LD_STRING Apemen
18963: PPUSH
18964: LD_INT 1
18966: NEG
18967: PPUSH
18968: CALL_OW 101
18972: GO 18985
// AddMedal ( Apemen , - 2 ) ;
18974: LD_STRING Apemen
18976: PPUSH
18977: LD_INT 2
18979: NEG
18980: PPUSH
18981: CALL_OW 101
// if not omarStatus then
18985: LD_EXP 1
18989: NOT
18990: IFFALSE 19004
// AddMedal ( Abdul , 1 ) else
18992: LD_STRING Abdul
18994: PPUSH
18995: LD_INT 1
18997: PPUSH
18998: CALL_OW 101
19002: GO 19015
// AddMedal ( Abdul , - 1 ) ;
19004: LD_STRING Abdul
19006: PPUSH
19007: LD_INT 1
19009: NEG
19010: PPUSH
19011: CALL_OW 101
// GiveMedals ( Main ) ;
19015: LD_STRING Main
19017: PPUSH
19018: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19022: LD_INT 22
19024: PUSH
19025: LD_INT 3
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 21
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 23
19044: PUSH
19045: LD_INT 3
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 50
19054: PUSH
19055: EMPTY
19056: LIST
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: LD_INT 25
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 25
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 25
19083: PUSH
19084: LD_INT 3
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 25
19093: PUSH
19094: LD_INT 4
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: PPUSH
19115: CALL_OW 69
19119: PPUSH
19120: CALL_OW 43
// end ;
19124: LD_VAR 0 1
19128: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
19129: LD_INT 0
19131: PPUSH
19132: PPUSH
19133: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19134: LD_EXP 40
19138: PPUSH
19139: LD_STRING Burlak
19141: PPUSH
19142: LD_INT 3
19144: PPUSH
19145: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
19149: LD_EXP 41
19153: PPUSH
19154: CALL_OW 310
19158: PPUSH
19159: LD_INT 22
19161: PPUSH
19162: CALL_OW 308
19166: IFFALSE 19183
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
19168: LD_EXP 41
19172: PPUSH
19173: LD_STRING Karamazov
19175: PPUSH
19176: LD_INT 3
19178: PPUSH
19179: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
19183: LD_EXP 42
19187: PPUSH
19188: CALL_OW 310
19192: PPUSH
19193: LD_INT 22
19195: PPUSH
19196: CALL_OW 308
19200: IFFALSE 19217
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
19202: LD_EXP 42
19206: PPUSH
19207: LD_STRING Petrovova
19209: PPUSH
19210: LD_INT 3
19212: PPUSH
19213: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
19217: LD_EXP 43
19221: PPUSH
19222: CALL_OW 310
19226: PPUSH
19227: LD_INT 22
19229: PPUSH
19230: CALL_OW 308
19234: IFFALSE 19251
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
19236: LD_EXP 43
19240: PPUSH
19241: LD_STRING Gleb
19243: PPUSH
19244: LD_INT 3
19246: PPUSH
19247: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
19251: LD_EXP 44
19255: PPUSH
19256: CALL_OW 310
19260: PPUSH
19261: LD_INT 22
19263: PPUSH
19264: CALL_OW 308
19268: IFFALSE 19285
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
19270: LD_EXP 44
19274: PPUSH
19275: LD_STRING Petrosyan
19277: PPUSH
19278: LD_INT 3
19280: PPUSH
19281: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
19285: LD_EXP 46
19289: PPUSH
19290: CALL_OW 310
19294: PPUSH
19295: LD_INT 22
19297: PPUSH
19298: CALL_OW 308
19302: IFFALSE 19319
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
19304: LD_EXP 46
19308: PPUSH
19309: LD_STRING Dolgov
19311: PPUSH
19312: LD_INT 3
19314: PPUSH
19315: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
19319: LD_EXP 47
19323: PPUSH
19324: CALL_OW 310
19328: PPUSH
19329: LD_INT 22
19331: PPUSH
19332: CALL_OW 308
19336: IFFALSE 19353
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
19338: LD_EXP 47
19342: PPUSH
19343: LD_STRING Lipshchin
19345: PPUSH
19346: LD_INT 3
19348: PPUSH
19349: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
19353: LD_EXP 45
19357: PPUSH
19358: CALL_OW 310
19362: PPUSH
19363: LD_INT 22
19365: PPUSH
19366: CALL_OW 308
19370: IFFALSE 19387
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
19372: LD_EXP 45
19376: PPUSH
19377: LD_STRING Titov
19379: PPUSH
19380: LD_INT 3
19382: PPUSH
19383: CALL 8664 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
19387: LD_INT 22
19389: PPUSH
19390: LD_INT 22
19392: PUSH
19393: LD_INT 3
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 21
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: LD_INT 25
19415: PUSH
19416: LD_INT 12
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 25
19425: PUSH
19426: LD_INT 16
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 25
19435: PUSH
19436: LD_INT 15
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: PPUSH
19454: CALL_OW 70
19458: PPUSH
19459: LD_STRING other_apemans
19461: PPUSH
19462: LD_INT 3
19464: PPUSH
19465: CALL 8720 0 3
// end ;
19469: LD_VAR 0 1
19473: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
19474: LD_INT 0
19476: PPUSH
19477: PPUSH
19478: PPUSH
19479: PPUSH
19480: PPUSH
// resources = [ ] ;
19481: LD_ADDR_VAR 0 3
19485: PUSH
19486: EMPTY
19487: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19488: LD_ADDR_EXP 5
19492: PUSH
19493: EMPTY
19494: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19495: LD_EXP 2
19499: PPUSH
19500: LD_STRING 05_StevensStatus_1
19502: PPUSH
19503: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19507: LD_EXP 1
19511: PPUSH
19512: LD_STRING 05_OmarStatus_2
19514: PPUSH
19515: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
19519: LD_ADDR_VAR 0 2
19523: PUSH
19524: LD_INT 22
19526: PPUSH
19527: LD_INT 22
19529: PUSH
19530: LD_INT 3
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 59
19539: PUSH
19540: EMPTY
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: LD_INT 34
19548: PUSH
19549: LD_INT 51
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 34
19558: PUSH
19559: LD_INT 32
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 34
19568: PUSH
19569: LD_INT 89
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 70
19591: PUSH
19592: FOR_IN
19593: IFFALSE 19621
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19595: LD_ADDR_VAR 0 3
19599: PUSH
19600: LD_VAR 0 3
19604: PUSH
19605: LD_VAR 0 2
19609: PPUSH
19610: CALL 9850 0 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: ADD
19618: ST_TO_ADDR
19619: GO 19592
19621: POP
19622: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19623: LD_VAR 0 3
19627: PPUSH
19628: LD_STRING 05_ResourcesInCargo_3
19630: PPUSH
19631: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19635: LD_ADDR_VAR 0 2
19639: PUSH
19640: LD_INT 22
19642: PPUSH
19643: LD_INT 22
19645: PUSH
19646: LD_INT 3
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 21
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 59
19665: PUSH
19666: EMPTY
19667: LIST
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: LIST
19673: PPUSH
19674: CALL_OW 70
19678: PUSH
19679: FOR_IN
19680: IFFALSE 19940
// begin driver = UnitsInside ( i ) [ 1 ] ;
19682: LD_ADDR_VAR 0 4
19686: PUSH
19687: LD_VAR 0 2
19691: PPUSH
19692: CALL_OW 313
19696: PUSH
19697: LD_INT 1
19699: ARRAY
19700: ST_TO_ADDR
// if driver = Burlak then
19701: LD_VAR 0 4
19705: PUSH
19706: LD_EXP 40
19710: EQUAL
19711: IFFALSE 19721
// driverShortName = Bur ;
19713: LD_ADDR_VAR 0 5
19717: PUSH
19718: LD_STRING Bur
19720: ST_TO_ADDR
// if driver = Karamazov then
19721: LD_VAR 0 4
19725: PUSH
19726: LD_EXP 41
19730: EQUAL
19731: IFFALSE 19741
// driverShortName = Kar ;
19733: LD_ADDR_VAR 0 5
19737: PUSH
19738: LD_STRING Kar
19740: ST_TO_ADDR
// if driver = Petrovova then
19741: LD_VAR 0 4
19745: PUSH
19746: LD_EXP 42
19750: EQUAL
19751: IFFALSE 19761
// driverShortName = Ptr ;
19753: LD_ADDR_VAR 0 5
19757: PUSH
19758: LD_STRING Ptr
19760: ST_TO_ADDR
// if driver = Gleb then
19761: LD_VAR 0 4
19765: PUSH
19766: LD_EXP 43
19770: EQUAL
19771: IFFALSE 19781
// driverShortName = Glb ;
19773: LD_ADDR_VAR 0 5
19777: PUSH
19778: LD_STRING Glb
19780: ST_TO_ADDR
// if driver = Petrosyan then
19781: LD_VAR 0 4
19785: PUSH
19786: LD_EXP 44
19790: EQUAL
19791: IFFALSE 19801
// driverShortName = Pet ;
19793: LD_ADDR_VAR 0 5
19797: PUSH
19798: LD_STRING Pet
19800: ST_TO_ADDR
// if driver = Dolgov then
19801: LD_VAR 0 4
19805: PUSH
19806: LD_EXP 46
19810: EQUAL
19811: IFFALSE 19821
// driverShortName = Dol ;
19813: LD_ADDR_VAR 0 5
19817: PUSH
19818: LD_STRING Dol
19820: ST_TO_ADDR
// if driver = Lipshchin then
19821: LD_VAR 0 4
19825: PUSH
19826: LD_EXP 47
19830: EQUAL
19831: IFFALSE 19841
// driverShortName = Lip ;
19833: LD_ADDR_VAR 0 5
19837: PUSH
19838: LD_STRING Lip
19840: ST_TO_ADDR
// if driver = Titov then
19841: LD_VAR 0 4
19845: PUSH
19846: LD_EXP 45
19850: EQUAL
19851: IFFALSE 19861
// driverShortName = Tit ;
19853: LD_ADDR_VAR 0 5
19857: PUSH
19858: LD_STRING Tit
19860: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19861: LD_ADDR_EXP 5
19865: PUSH
19866: LD_EXP 5
19870: PUSH
19871: LD_VAR 0 2
19875: PPUSH
19876: CALL_OW 248
19880: PUSH
19881: LD_VAR 0 2
19885: PPUSH
19886: CALL_OW 265
19890: PUSH
19891: LD_VAR 0 2
19895: PPUSH
19896: CALL_OW 262
19900: PUSH
19901: LD_VAR 0 2
19905: PPUSH
19906: CALL_OW 263
19910: PUSH
19911: LD_VAR 0 2
19915: PPUSH
19916: CALL_OW 264
19920: PUSH
19921: LD_VAR 0 5
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: ADD
19937: ST_TO_ADDR
// end ;
19938: GO 19679
19940: POP
19941: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19942: LD_EXP 5
19946: PPUSH
19947: LD_STRING 05_Tanks_4
19949: PPUSH
19950: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19954: LD_INT 22
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 23
19966: PUSH
19967: LD_INT 3
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 21
19976: PUSH
19977: LD_INT 3
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: LD_INT 30
19989: PUSH
19990: LD_INT 6
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 30
19999: PUSH
20000: LD_INT 7
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: PPUSH
20018: CALL_OW 69
20022: NOT
20023: IFFALSE 20033
// labDestroyed = 1 ;
20025: LD_ADDR_EXP 3
20029: PUSH
20030: LD_INT 1
20032: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
20033: LD_EXP 3
20037: PPUSH
20038: LD_STRING 05_LabDestroyed_5
20040: PPUSH
20041: CALL_OW 39
// end ; end_of_file
20045: LD_VAR 0 1
20049: RET
// export function Nef_PrepareNature ; var i , un ; begin
20050: LD_INT 0
20052: PPUSH
20053: PPUSH
20054: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
20055: LD_ADDR_VAR 0 2
20059: PUSH
20060: DOUBLE
20061: LD_INT 1
20063: DEC
20064: ST_TO_ADDR
20065: LD_EXP 28
20069: PUSH
20070: LD_INT 1
20072: ARRAY
20073: PUSH
20074: FOR_TO
20075: IFFALSE 20185
// begin uc_side = 0 ;
20077: LD_ADDR_OWVAR 20
20081: PUSH
20082: LD_INT 0
20084: ST_TO_ADDR
// uc_nation = nation_nature ;
20085: LD_ADDR_OWVAR 21
20089: PUSH
20090: LD_INT 0
20092: ST_TO_ADDR
// hc_class = class_apeman ;
20093: LD_ADDR_OWVAR 28
20097: PUSH
20098: LD_INT 12
20100: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20101: LD_ADDR_OWVAR 31
20105: PUSH
20106: LD_EXP 29
20110: PUSH
20111: LD_INT 1
20113: ARRAY
20114: PUSH
20115: LD_EXP 29
20119: PUSH
20120: LD_INT 2
20122: ARRAY
20123: PUSH
20124: LD_EXP 29
20128: PUSH
20129: LD_INT 3
20131: ARRAY
20132: PUSH
20133: LD_EXP 29
20137: PUSH
20138: LD_INT 4
20140: ARRAY
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20148: LD_ADDR_OWVAR 35
20152: PUSH
20153: LD_EXP 30
20157: ST_TO_ADDR
// un = CreateHuman ;
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: CALL_OW 44
20167: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20168: LD_VAR 0 3
20172: PPUSH
20173: LD_INT 33
20175: PPUSH
20176: LD_INT 0
20178: PPUSH
20179: CALL_OW 49
// end ;
20183: GO 20074
20185: POP
20186: POP
// for i := 1 to animalsAmount [ 2 ] do
20187: LD_ADDR_VAR 0 2
20191: PUSH
20192: DOUBLE
20193: LD_INT 1
20195: DEC
20196: ST_TO_ADDR
20197: LD_EXP 28
20201: PUSH
20202: LD_INT 2
20204: ARRAY
20205: PUSH
20206: FOR_TO
20207: IFFALSE 20317
// begin uc_side = 0 ;
20209: LD_ADDR_OWVAR 20
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// uc_nation = nation_nature ;
20217: LD_ADDR_OWVAR 21
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// hc_class = class_phororhacos ;
20225: LD_ADDR_OWVAR 28
20229: PUSH
20230: LD_INT 18
20232: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20233: LD_ADDR_OWVAR 31
20237: PUSH
20238: LD_EXP 29
20242: PUSH
20243: LD_INT 1
20245: ARRAY
20246: PUSH
20247: LD_EXP 29
20251: PUSH
20252: LD_INT 2
20254: ARRAY
20255: PUSH
20256: LD_EXP 29
20260: PUSH
20261: LD_INT 3
20263: ARRAY
20264: PUSH
20265: LD_EXP 29
20269: PUSH
20270: LD_INT 4
20272: ARRAY
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20280: LD_ADDR_OWVAR 35
20284: PUSH
20285: LD_EXP 30
20289: ST_TO_ADDR
// un = CreateHuman ;
20290: LD_ADDR_VAR 0 3
20294: PUSH
20295: CALL_OW 44
20299: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20300: LD_VAR 0 3
20304: PPUSH
20305: LD_INT 33
20307: PPUSH
20308: LD_INT 0
20310: PPUSH
20311: CALL_OW 49
// end ;
20315: GO 20206
20317: POP
20318: POP
// for i := 1 to animalsAmount [ 3 ] do
20319: LD_ADDR_VAR 0 2
20323: PUSH
20324: DOUBLE
20325: LD_INT 1
20327: DEC
20328: ST_TO_ADDR
20329: LD_EXP 28
20333: PUSH
20334: LD_INT 3
20336: ARRAY
20337: PUSH
20338: FOR_TO
20339: IFFALSE 20449
// begin uc_side = 0 ;
20341: LD_ADDR_OWVAR 20
20345: PUSH
20346: LD_INT 0
20348: ST_TO_ADDR
// uc_nation = nation_nature ;
20349: LD_ADDR_OWVAR 21
20353: PUSH
20354: LD_INT 0
20356: ST_TO_ADDR
// hc_class = class_tiger ;
20357: LD_ADDR_OWVAR 28
20361: PUSH
20362: LD_INT 14
20364: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20365: LD_ADDR_OWVAR 31
20369: PUSH
20370: LD_EXP 29
20374: PUSH
20375: LD_INT 1
20377: ARRAY
20378: PUSH
20379: LD_EXP 29
20383: PUSH
20384: LD_INT 2
20386: ARRAY
20387: PUSH
20388: LD_EXP 29
20392: PUSH
20393: LD_INT 3
20395: ARRAY
20396: PUSH
20397: LD_EXP 29
20401: PUSH
20402: LD_INT 4
20404: ARRAY
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20412: LD_ADDR_OWVAR 35
20416: PUSH
20417: LD_EXP 30
20421: ST_TO_ADDR
// un = CreateHuman ;
20422: LD_ADDR_VAR 0 3
20426: PUSH
20427: CALL_OW 44
20431: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20432: LD_VAR 0 3
20436: PPUSH
20437: LD_INT 33
20439: PPUSH
20440: LD_INT 0
20442: PPUSH
20443: CALL_OW 49
// end ;
20447: GO 20338
20449: POP
20450: POP
// for i := 1 to animalsAmount [ 4 ] do
20451: LD_ADDR_VAR 0 2
20455: PUSH
20456: DOUBLE
20457: LD_INT 1
20459: DEC
20460: ST_TO_ADDR
20461: LD_EXP 28
20465: PUSH
20466: LD_INT 4
20468: ARRAY
20469: PUSH
20470: FOR_TO
20471: IFFALSE 20581
// begin uc_side = 0 ;
20473: LD_ADDR_OWVAR 20
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// uc_nation = nation_nature ;
20481: LD_ADDR_OWVAR 21
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// hc_class = 21 ;
20489: LD_ADDR_OWVAR 28
20493: PUSH
20494: LD_INT 21
20496: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20497: LD_ADDR_OWVAR 31
20501: PUSH
20502: LD_EXP 29
20506: PUSH
20507: LD_INT 1
20509: ARRAY
20510: PUSH
20511: LD_EXP 29
20515: PUSH
20516: LD_INT 2
20518: ARRAY
20519: PUSH
20520: LD_EXP 29
20524: PUSH
20525: LD_INT 3
20527: ARRAY
20528: PUSH
20529: LD_EXP 29
20533: PUSH
20534: LD_INT 4
20536: ARRAY
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20544: LD_ADDR_OWVAR 35
20548: PUSH
20549: LD_EXP 30
20553: ST_TO_ADDR
// un = CreateHuman ;
20554: LD_ADDR_VAR 0 3
20558: PUSH
20559: CALL_OW 44
20563: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20564: LD_VAR 0 3
20568: PPUSH
20569: LD_INT 33
20571: PPUSH
20572: LD_INT 0
20574: PPUSH
20575: CALL_OW 49
// end ;
20579: GO 20470
20581: POP
20582: POP
// for i := 1 to animalsAmount [ 5 ] do
20583: LD_ADDR_VAR 0 2
20587: PUSH
20588: DOUBLE
20589: LD_INT 1
20591: DEC
20592: ST_TO_ADDR
20593: LD_EXP 28
20597: PUSH
20598: LD_INT 5
20600: ARRAY
20601: PUSH
20602: FOR_TO
20603: IFFALSE 20664
// begin uc_side = 0 ;
20605: LD_ADDR_OWVAR 20
20609: PUSH
20610: LD_INT 0
20612: ST_TO_ADDR
// uc_nation = nation_nature ;
20613: LD_ADDR_OWVAR 21
20617: PUSH
20618: LD_INT 0
20620: ST_TO_ADDR
// vc_chassis := 31 ;
20621: LD_ADDR_OWVAR 37
20625: PUSH
20626: LD_INT 31
20628: ST_TO_ADDR
// vc_control := control_rider ;
20629: LD_ADDR_OWVAR 38
20633: PUSH
20634: LD_INT 4
20636: ST_TO_ADDR
// un := CreateVehicle ;
20637: LD_ADDR_VAR 0 3
20641: PUSH
20642: CALL_OW 45
20646: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20647: LD_VAR 0 3
20651: PPUSH
20652: LD_INT 33
20654: PPUSH
20655: LD_INT 0
20657: PPUSH
20658: CALL_OW 49
// end ;
20662: GO 20602
20664: POP
20665: POP
// end ; end_of_file
20666: LD_VAR 0 1
20670: RET
// every 0 0$1 do
20671: GO 20673
20673: DISABLE
// begin enable ;
20674: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20675: LD_ADDR_OWVAR 47
20679: PUSH
20680: LD_STRING #Am01-1
20682: PUSH
20683: LD_EXP 7
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20692: LD_ADDR_EXP 7
20696: PUSH
20697: LD_EXP 7
20701: PUSH
20702: LD_INT 35
20704: PLUS
20705: ST_TO_ADDR
// end ; end_of_file
20706: END
// every 0 0$01 do var timer ;
20707: GO 20709
20709: DISABLE
20710: LD_INT 0
20712: PPUSH
// begin timer := 0 0$30 ;
20713: LD_ADDR_VAR 0 1
20717: PUSH
20718: LD_INT 1050
20720: ST_TO_ADDR
// repeat wait ( timer ) ;
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20730: LD_EXP 22
20734: PUSH
20735: LD_INT 6
20737: GREATEREQUAL
20738: PUSH
20739: LD_EXP 22
20743: PUSH
20744: LD_INT 12
20746: LESS
20747: AND
20748: IFFALSE 20764
// timer := timer + 0 0$3 ;
20750: LD_ADDR_VAR 0 1
20754: PUSH
20755: LD_VAR 0 1
20759: PUSH
20760: LD_INT 105
20762: PLUS
20763: ST_TO_ADDR
// if cratesSpawned >= 12 then
20764: LD_EXP 22
20768: PUSH
20769: LD_INT 12
20771: GREATEREQUAL
20772: IFFALSE 20788
// timer := timer + 0 0$9 ;
20774: LD_ADDR_VAR 0 1
20778: PUSH
20779: LD_VAR 0 1
20783: PUSH
20784: LD_INT 315
20786: PLUS
20787: ST_TO_ADDR
// if timer > 3 3$00 then
20788: LD_VAR 0 1
20792: PUSH
20793: LD_INT 6300
20795: GREATER
20796: IFFALSE 20806
// timer := 0 0$50 ;
20798: LD_ADDR_VAR 0 1
20802: PUSH
20803: LD_INT 1750
20805: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20806: LD_INT 3
20808: PPUSH
20809: LD_INT 5
20811: PPUSH
20812: CALL_OW 12
20816: PPUSH
20817: LD_INT 46
20819: PPUSH
20820: LD_INT 1
20822: PPUSH
20823: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20827: LD_ADDR_EXP 22
20831: PUSH
20832: LD_EXP 22
20836: PUSH
20837: LD_INT 1
20839: PLUS
20840: ST_TO_ADDR
// until false ;
20841: LD_INT 0
20843: IFFALSE 20721
// end ;
20845: PPOPN 1
20847: END
// every 0 0$5 do
20848: GO 20850
20850: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20851: LD_INT 5
20853: PPUSH
20854: LD_INT 48
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL_OW 55
// wait ( 0 0$40 ) ;
20864: LD_INT 1400
20866: PPUSH
20867: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20871: LD_INT 5
20873: PPUSH
20874: LD_INT 48
20876: PPUSH
20877: LD_INT 1
20879: PPUSH
20880: CALL_OW 55
// end ;
20884: END
// every 10 10$0 do
20885: GO 20887
20887: DISABLE
// begin enable ;
20888: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20889: LD_INT 3
20891: PPUSH
20892: LD_INT 5
20894: PPUSH
20895: CALL_OW 12
20899: PPUSH
20900: LD_INT 48
20902: PPUSH
20903: LD_INT 1
20905: PPUSH
20906: CALL_OW 55
// end ; end_of_file
20910: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20911: LD_INT 0
20913: PPUSH
// uc_side = 1 ;
20914: LD_ADDR_OWVAR 20
20918: PUSH
20919: LD_INT 1
20921: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20922: LD_ADDR_EXP 58
20926: PUSH
20927: LD_STRING Stevens
20929: PPUSH
20930: LD_INT 0
20932: PPUSH
20933: LD_INT 0
20935: PPUSH
20936: CALL 8546 0 3
20940: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20941: LD_EXP 58
20945: PPUSH
20946: LD_VAR 0 1
20950: PPUSH
20951: LD_INT 1
20953: PPUSH
20954: CALL_OW 49
// end ; end_of_file
20958: LD_VAR 0 2
20962: RET
// every 1 trigger achievement_DestroyedHovercrafts >= 3 do
20963: LD_EXP 26
20967: PUSH
20968: LD_INT 3
20970: GREATEREQUAL
20971: IFFALSE 20983
20973: GO 20975
20975: DISABLE
// SetAchievement ( ACH_HOVER ) ;
20976: LD_STRING ACH_HOVER
20978: PPUSH
20979: CALL_OW 543
20983: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_nature ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) and not FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_class , class_apeman ] ] ) do
20984: LD_INT 22
20986: PUSH
20987: LD_INT 3
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 23
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: PUSH
21007: LD_INT 25
21009: PUSH
21010: LD_INT 12
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 25
21019: PUSH
21020: LD_INT 16
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 25
21029: PUSH
21030: LD_INT 15
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: LIST
21047: PPUSH
21048: CALL_OW 69
21052: PUSH
21053: LD_INT 22
21055: PUSH
21056: LD_INT 0
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 23
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 25
21075: PUSH
21076: LD_INT 12
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: LIST
21087: PPUSH
21088: CALL_OW 69
21092: NOT
21093: AND
21094: IFFALSE 21106
21096: GO 21098
21098: DISABLE
// SetAchievement ( ACH_REDARMY ) ;
21099: LD_STRING ACH_REDARMY
21101: PPUSH
21102: CALL_OW 543
21106: END
// every 1 trigger not achievement_CollectedCrates do var crates , depot ;
21107: LD_EXP 27
21111: NOT
21112: IFFALSE 21245
21114: GO 21116
21116: DISABLE
21117: LD_INT 0
21119: PPUSH
21120: PPUSH
// begin enable ;
21121: ENABLE
// crates = 0 ;
21122: LD_ADDR_VAR 0 1
21126: PUSH
21127: LD_INT 0
21129: ST_TO_ADDR
// for depot in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: LD_INT 22
21137: PUSH
21138: LD_INT 3
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 21
21147: PUSH
21148: LD_INT 3
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 30
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 50
21167: PUSH
21168: EMPTY
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: PPUSH
21177: CALL_OW 69
21181: PUSH
21182: FOR_IN
21183: IFFALSE 21216
// crates = crates + GetResourceType ( GetBase ( depot ) , mat_cans ) ;
21185: LD_ADDR_VAR 0 1
21189: PUSH
21190: LD_VAR 0 1
21194: PUSH
21195: LD_VAR 0 2
21199: PPUSH
21200: CALL_OW 274
21204: PPUSH
21205: LD_INT 1
21207: PPUSH
21208: CALL_OW 275
21212: PLUS
21213: ST_TO_ADDR
21214: GO 21182
21216: POP
21217: POP
// if crates >= 500 then
21218: LD_VAR 0 1
21222: PUSH
21223: LD_INT 500
21225: GREATEREQUAL
21226: IFFALSE 21245
// begin achievement_CollectedCrates = true ;
21228: LD_ADDR_EXP 27
21232: PUSH
21233: LD_INT 1
21235: ST_TO_ADDR
// SetAchievement ( ACH_CRATES ) ;
21236: LD_STRING ACH_CRATES
21238: PPUSH
21239: CALL_OW 543
// exit ;
21243: GO 21245
// end ; end ; end_of_file
21245: PPOPN 2
21247: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21248: LD_INT 0
21250: PPUSH
21251: PPUSH
// if exist_mode then
21252: LD_VAR 0 2
21256: IFFALSE 21281
// unit := CreateCharacter ( prefix & ident ) else
21258: LD_ADDR_VAR 0 5
21262: PUSH
21263: LD_VAR 0 3
21267: PUSH
21268: LD_VAR 0 1
21272: STR
21273: PPUSH
21274: CALL_OW 34
21278: ST_TO_ADDR
21279: GO 21296
// unit := NewCharacter ( ident ) ;
21281: LD_ADDR_VAR 0 5
21285: PUSH
21286: LD_VAR 0 1
21290: PPUSH
21291: CALL_OW 25
21295: ST_TO_ADDR
// result := unit ;
21296: LD_ADDR_VAR 0 4
21300: PUSH
21301: LD_VAR 0 5
21305: ST_TO_ADDR
// end ;
21306: LD_VAR 0 4
21310: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21311: LD_INT 0
21313: PPUSH
21314: PPUSH
// if not side or not nation then
21315: LD_VAR 0 1
21319: NOT
21320: PUSH
21321: LD_VAR 0 2
21325: NOT
21326: OR
21327: IFFALSE 21331
// exit ;
21329: GO 22099
// case nation of nation_american :
21331: LD_VAR 0 2
21335: PUSH
21336: LD_INT 1
21338: DOUBLE
21339: EQUAL
21340: IFTRUE 21344
21342: GO 21558
21344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21345: LD_ADDR_VAR 0 4
21349: PUSH
21350: LD_INT 35
21352: PUSH
21353: LD_INT 45
21355: PUSH
21356: LD_INT 46
21358: PUSH
21359: LD_INT 47
21361: PUSH
21362: LD_INT 82
21364: PUSH
21365: LD_INT 83
21367: PUSH
21368: LD_INT 84
21370: PUSH
21371: LD_INT 85
21373: PUSH
21374: LD_INT 86
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: LD_INT 6
21385: PUSH
21386: LD_INT 15
21388: PUSH
21389: LD_INT 16
21391: PUSH
21392: LD_INT 7
21394: PUSH
21395: LD_INT 12
21397: PUSH
21398: LD_INT 13
21400: PUSH
21401: LD_INT 10
21403: PUSH
21404: LD_INT 14
21406: PUSH
21407: LD_INT 20
21409: PUSH
21410: LD_INT 21
21412: PUSH
21413: LD_INT 22
21415: PUSH
21416: LD_INT 25
21418: PUSH
21419: LD_INT 32
21421: PUSH
21422: LD_INT 27
21424: PUSH
21425: LD_INT 36
21427: PUSH
21428: LD_INT 69
21430: PUSH
21431: LD_INT 39
21433: PUSH
21434: LD_INT 34
21436: PUSH
21437: LD_INT 40
21439: PUSH
21440: LD_INT 48
21442: PUSH
21443: LD_INT 49
21445: PUSH
21446: LD_INT 50
21448: PUSH
21449: LD_INT 51
21451: PUSH
21452: LD_INT 52
21454: PUSH
21455: LD_INT 53
21457: PUSH
21458: LD_INT 54
21460: PUSH
21461: LD_INT 55
21463: PUSH
21464: LD_INT 56
21466: PUSH
21467: LD_INT 57
21469: PUSH
21470: LD_INT 58
21472: PUSH
21473: LD_INT 59
21475: PUSH
21476: LD_INT 60
21478: PUSH
21479: LD_INT 61
21481: PUSH
21482: LD_INT 62
21484: PUSH
21485: LD_INT 80
21487: PUSH
21488: LD_INT 82
21490: PUSH
21491: LD_INT 83
21493: PUSH
21494: LD_INT 84
21496: PUSH
21497: LD_INT 85
21499: PUSH
21500: LD_INT 86
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: ST_TO_ADDR
21556: GO 22023
21558: LD_INT 2
21560: DOUBLE
21561: EQUAL
21562: IFTRUE 21566
21564: GO 21792
21566: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21567: LD_ADDR_VAR 0 4
21571: PUSH
21572: LD_INT 35
21574: PUSH
21575: LD_INT 45
21577: PUSH
21578: LD_INT 46
21580: PUSH
21581: LD_INT 47
21583: PUSH
21584: LD_INT 82
21586: PUSH
21587: LD_INT 83
21589: PUSH
21590: LD_INT 84
21592: PUSH
21593: LD_INT 85
21595: PUSH
21596: LD_INT 87
21598: PUSH
21599: LD_INT 70
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: LD_INT 11
21607: PUSH
21608: LD_INT 3
21610: PUSH
21611: LD_INT 4
21613: PUSH
21614: LD_INT 5
21616: PUSH
21617: LD_INT 6
21619: PUSH
21620: LD_INT 15
21622: PUSH
21623: LD_INT 18
21625: PUSH
21626: LD_INT 7
21628: PUSH
21629: LD_INT 17
21631: PUSH
21632: LD_INT 8
21634: PUSH
21635: LD_INT 20
21637: PUSH
21638: LD_INT 21
21640: PUSH
21641: LD_INT 22
21643: PUSH
21644: LD_INT 72
21646: PUSH
21647: LD_INT 26
21649: PUSH
21650: LD_INT 69
21652: PUSH
21653: LD_INT 39
21655: PUSH
21656: LD_INT 40
21658: PUSH
21659: LD_INT 41
21661: PUSH
21662: LD_INT 42
21664: PUSH
21665: LD_INT 43
21667: PUSH
21668: LD_INT 48
21670: PUSH
21671: LD_INT 49
21673: PUSH
21674: LD_INT 50
21676: PUSH
21677: LD_INT 51
21679: PUSH
21680: LD_INT 52
21682: PUSH
21683: LD_INT 53
21685: PUSH
21686: LD_INT 54
21688: PUSH
21689: LD_INT 55
21691: PUSH
21692: LD_INT 56
21694: PUSH
21695: LD_INT 60
21697: PUSH
21698: LD_INT 61
21700: PUSH
21701: LD_INT 62
21703: PUSH
21704: LD_INT 66
21706: PUSH
21707: LD_INT 67
21709: PUSH
21710: LD_INT 68
21712: PUSH
21713: LD_INT 81
21715: PUSH
21716: LD_INT 82
21718: PUSH
21719: LD_INT 83
21721: PUSH
21722: LD_INT 84
21724: PUSH
21725: LD_INT 85
21727: PUSH
21728: LD_INT 87
21730: PUSH
21731: LD_INT 88
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
21790: GO 22023
21792: LD_INT 3
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 22022
21800: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21801: LD_ADDR_VAR 0 4
21805: PUSH
21806: LD_INT 46
21808: PUSH
21809: LD_INT 47
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: LD_INT 2
21817: PUSH
21818: LD_INT 82
21820: PUSH
21821: LD_INT 83
21823: PUSH
21824: LD_INT 84
21826: PUSH
21827: LD_INT 85
21829: PUSH
21830: LD_INT 86
21832: PUSH
21833: LD_INT 11
21835: PUSH
21836: LD_INT 9
21838: PUSH
21839: LD_INT 20
21841: PUSH
21842: LD_INT 19
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 24
21850: PUSH
21851: LD_INT 22
21853: PUSH
21854: LD_INT 25
21856: PUSH
21857: LD_INT 28
21859: PUSH
21860: LD_INT 29
21862: PUSH
21863: LD_INT 30
21865: PUSH
21866: LD_INT 31
21868: PUSH
21869: LD_INT 37
21871: PUSH
21872: LD_INT 38
21874: PUSH
21875: LD_INT 32
21877: PUSH
21878: LD_INT 27
21880: PUSH
21881: LD_INT 33
21883: PUSH
21884: LD_INT 69
21886: PUSH
21887: LD_INT 39
21889: PUSH
21890: LD_INT 34
21892: PUSH
21893: LD_INT 40
21895: PUSH
21896: LD_INT 71
21898: PUSH
21899: LD_INT 23
21901: PUSH
21902: LD_INT 44
21904: PUSH
21905: LD_INT 48
21907: PUSH
21908: LD_INT 49
21910: PUSH
21911: LD_INT 50
21913: PUSH
21914: LD_INT 51
21916: PUSH
21917: LD_INT 52
21919: PUSH
21920: LD_INT 53
21922: PUSH
21923: LD_INT 54
21925: PUSH
21926: LD_INT 55
21928: PUSH
21929: LD_INT 56
21931: PUSH
21932: LD_INT 57
21934: PUSH
21935: LD_INT 58
21937: PUSH
21938: LD_INT 59
21940: PUSH
21941: LD_INT 63
21943: PUSH
21944: LD_INT 64
21946: PUSH
21947: LD_INT 65
21949: PUSH
21950: LD_INT 82
21952: PUSH
21953: LD_INT 83
21955: PUSH
21956: LD_INT 84
21958: PUSH
21959: LD_INT 85
21961: PUSH
21962: LD_INT 86
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: ST_TO_ADDR
22020: GO 22023
22022: POP
// if state > - 1 and state < 3 then
22023: LD_VAR 0 3
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: GREATER
22032: PUSH
22033: LD_VAR 0 3
22037: PUSH
22038: LD_INT 3
22040: LESS
22041: AND
22042: IFFALSE 22099
// for i in result do
22044: LD_ADDR_VAR 0 5
22048: PUSH
22049: LD_VAR 0 4
22053: PUSH
22054: FOR_IN
22055: IFFALSE 22097
// if GetTech ( i , side ) <> state then
22057: LD_VAR 0 5
22061: PPUSH
22062: LD_VAR 0 1
22066: PPUSH
22067: CALL_OW 321
22071: PUSH
22072: LD_VAR 0 3
22076: NONEQUAL
22077: IFFALSE 22095
// result := result diff i ;
22079: LD_ADDR_VAR 0 4
22083: PUSH
22084: LD_VAR 0 4
22088: PUSH
22089: LD_VAR 0 5
22093: DIFF
22094: ST_TO_ADDR
22095: GO 22054
22097: POP
22098: POP
// end ;
22099: LD_VAR 0 4
22103: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22104: LD_INT 0
22106: PPUSH
22107: PPUSH
22108: PPUSH
// result := true ;
22109: LD_ADDR_VAR 0 3
22113: PUSH
22114: LD_INT 1
22116: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22117: LD_ADDR_VAR 0 5
22121: PUSH
22122: LD_VAR 0 2
22126: PPUSH
22127: CALL_OW 480
22131: ST_TO_ADDR
// if not tmp then
22132: LD_VAR 0 5
22136: NOT
22137: IFFALSE 22141
// exit ;
22139: GO 22190
// for i in tmp do
22141: LD_ADDR_VAR 0 4
22145: PUSH
22146: LD_VAR 0 5
22150: PUSH
22151: FOR_IN
22152: IFFALSE 22188
// if GetTech ( i , side ) <> state_researched then
22154: LD_VAR 0 4
22158: PPUSH
22159: LD_VAR 0 1
22163: PPUSH
22164: CALL_OW 321
22168: PUSH
22169: LD_INT 2
22171: NONEQUAL
22172: IFFALSE 22186
// begin result := false ;
22174: LD_ADDR_VAR 0 3
22178: PUSH
22179: LD_INT 0
22181: ST_TO_ADDR
// exit ;
22182: POP
22183: POP
22184: GO 22190
// end ;
22186: GO 22151
22188: POP
22189: POP
// end ;
22190: LD_VAR 0 3
22194: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22195: LD_INT 0
22197: PPUSH
22198: PPUSH
22199: PPUSH
22200: PPUSH
22201: PPUSH
22202: PPUSH
22203: PPUSH
22204: PPUSH
22205: PPUSH
22206: PPUSH
22207: PPUSH
22208: PPUSH
22209: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22210: LD_VAR 0 1
22214: NOT
22215: PUSH
22216: LD_VAR 0 1
22220: PPUSH
22221: CALL_OW 257
22225: PUSH
22226: LD_INT 9
22228: NONEQUAL
22229: OR
22230: IFFALSE 22234
// exit ;
22232: GO 22807
// side := GetSide ( unit ) ;
22234: LD_ADDR_VAR 0 9
22238: PUSH
22239: LD_VAR 0 1
22243: PPUSH
22244: CALL_OW 255
22248: ST_TO_ADDR
// tech_space := tech_spacanom ;
22249: LD_ADDR_VAR 0 12
22253: PUSH
22254: LD_INT 29
22256: ST_TO_ADDR
// tech_time := tech_taurad ;
22257: LD_ADDR_VAR 0 13
22261: PUSH
22262: LD_INT 28
22264: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22265: LD_ADDR_VAR 0 11
22269: PUSH
22270: LD_VAR 0 1
22274: PPUSH
22275: CALL_OW 310
22279: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22280: LD_VAR 0 11
22284: PPUSH
22285: CALL_OW 247
22289: PUSH
22290: LD_INT 2
22292: EQUAL
22293: IFFALSE 22297
// exit ;
22295: GO 22807
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22297: LD_ADDR_VAR 0 8
22301: PUSH
22302: LD_INT 81
22304: PUSH
22305: LD_VAR 0 9
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 3
22316: PUSH
22317: LD_INT 21
22319: PUSH
22320: LD_INT 3
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PPUSH
22335: CALL_OW 69
22339: ST_TO_ADDR
// if not tmp then
22340: LD_VAR 0 8
22344: NOT
22345: IFFALSE 22349
// exit ;
22347: GO 22807
// if in_unit then
22349: LD_VAR 0 11
22353: IFFALSE 22377
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22355: LD_ADDR_VAR 0 10
22359: PUSH
22360: LD_VAR 0 8
22364: PPUSH
22365: LD_VAR 0 11
22369: PPUSH
22370: CALL_OW 74
22374: ST_TO_ADDR
22375: GO 22397
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22377: LD_ADDR_VAR 0 10
22381: PUSH
22382: LD_VAR 0 8
22386: PPUSH
22387: LD_VAR 0 1
22391: PPUSH
22392: CALL_OW 74
22396: ST_TO_ADDR
// if not enemy then
22397: LD_VAR 0 10
22401: NOT
22402: IFFALSE 22406
// exit ;
22404: GO 22807
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22406: LD_VAR 0 11
22410: PUSH
22411: LD_VAR 0 11
22415: PPUSH
22416: LD_VAR 0 10
22420: PPUSH
22421: CALL_OW 296
22425: PUSH
22426: LD_INT 13
22428: GREATER
22429: AND
22430: PUSH
22431: LD_VAR 0 1
22435: PPUSH
22436: LD_VAR 0 10
22440: PPUSH
22441: CALL_OW 296
22445: PUSH
22446: LD_INT 12
22448: GREATER
22449: OR
22450: IFFALSE 22454
// exit ;
22452: GO 22807
// missile := [ 1 ] ;
22454: LD_ADDR_VAR 0 14
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: EMPTY
22463: LIST
22464: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22465: LD_VAR 0 9
22469: PPUSH
22470: LD_VAR 0 12
22474: PPUSH
22475: CALL_OW 325
22479: IFFALSE 22508
// missile := Insert ( missile , missile + 1 , 2 ) ;
22481: LD_ADDR_VAR 0 14
22485: PUSH
22486: LD_VAR 0 14
22490: PPUSH
22491: LD_VAR 0 14
22495: PUSH
22496: LD_INT 1
22498: PLUS
22499: PPUSH
22500: LD_INT 2
22502: PPUSH
22503: CALL_OW 2
22507: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22508: LD_VAR 0 9
22512: PPUSH
22513: LD_VAR 0 13
22517: PPUSH
22518: CALL_OW 325
22522: PUSH
22523: LD_VAR 0 10
22527: PPUSH
22528: CALL_OW 255
22532: PPUSH
22533: LD_VAR 0 13
22537: PPUSH
22538: CALL_OW 325
22542: NOT
22543: AND
22544: IFFALSE 22573
// missile := Insert ( missile , missile + 1 , 3 ) ;
22546: LD_ADDR_VAR 0 14
22550: PUSH
22551: LD_VAR 0 14
22555: PPUSH
22556: LD_VAR 0 14
22560: PUSH
22561: LD_INT 1
22563: PLUS
22564: PPUSH
22565: LD_INT 3
22567: PPUSH
22568: CALL_OW 2
22572: ST_TO_ADDR
// if missile < 2 then
22573: LD_VAR 0 14
22577: PUSH
22578: LD_INT 2
22580: LESS
22581: IFFALSE 22585
// exit ;
22583: GO 22807
// x := GetX ( enemy ) ;
22585: LD_ADDR_VAR 0 4
22589: PUSH
22590: LD_VAR 0 10
22594: PPUSH
22595: CALL_OW 250
22599: ST_TO_ADDR
// y := GetY ( enemy ) ;
22600: LD_ADDR_VAR 0 5
22604: PUSH
22605: LD_VAR 0 10
22609: PPUSH
22610: CALL_OW 251
22614: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22615: LD_ADDR_VAR 0 6
22619: PUSH
22620: LD_VAR 0 4
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PPUSH
22629: LD_INT 1
22631: PPUSH
22632: CALL_OW 12
22636: PLUS
22637: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22638: LD_ADDR_VAR 0 7
22642: PUSH
22643: LD_VAR 0 5
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PPUSH
22652: LD_INT 1
22654: PPUSH
22655: CALL_OW 12
22659: PLUS
22660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22661: LD_VAR 0 6
22665: PPUSH
22666: LD_VAR 0 7
22670: PPUSH
22671: CALL_OW 488
22675: NOT
22676: IFFALSE 22698
// begin _x := x ;
22678: LD_ADDR_VAR 0 6
22682: PUSH
22683: LD_VAR 0 4
22687: ST_TO_ADDR
// _y := y ;
22688: LD_ADDR_VAR 0 7
22692: PUSH
22693: LD_VAR 0 5
22697: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: LD_INT 1
22705: PPUSH
22706: LD_VAR 0 14
22710: PPUSH
22711: CALL_OW 12
22715: ST_TO_ADDR
// case i of 1 :
22716: LD_VAR 0 3
22720: PUSH
22721: LD_INT 1
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22746
22729: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22730: LD_VAR 0 1
22734: PPUSH
22735: LD_VAR 0 10
22739: PPUSH
22740: CALL_OW 115
22744: GO 22807
22746: LD_INT 2
22748: DOUBLE
22749: EQUAL
22750: IFTRUE 22754
22752: GO 22776
22754: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_VAR 0 6
22764: PPUSH
22765: LD_VAR 0 7
22769: PPUSH
22770: CALL_OW 153
22774: GO 22807
22776: LD_INT 3
22778: DOUBLE
22779: EQUAL
22780: IFTRUE 22784
22782: GO 22806
22784: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22785: LD_VAR 0 1
22789: PPUSH
22790: LD_VAR 0 6
22794: PPUSH
22795: LD_VAR 0 7
22799: PPUSH
22800: CALL_OW 154
22804: GO 22807
22806: POP
// end ;
22807: LD_VAR 0 2
22811: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
22817: PPUSH
22818: PPUSH
22819: PPUSH
// if not unit or not building then
22820: LD_VAR 0 1
22824: NOT
22825: PUSH
22826: LD_VAR 0 2
22830: NOT
22831: OR
22832: IFFALSE 22836
// exit ;
22834: GO 22994
// x := GetX ( building ) ;
22836: LD_ADDR_VAR 0 5
22840: PUSH
22841: LD_VAR 0 2
22845: PPUSH
22846: CALL_OW 250
22850: ST_TO_ADDR
// y := GetY ( building ) ;
22851: LD_ADDR_VAR 0 6
22855: PUSH
22856: LD_VAR 0 2
22860: PPUSH
22861: CALL_OW 251
22865: ST_TO_ADDR
// for i = 0 to 5 do
22866: LD_ADDR_VAR 0 4
22870: PUSH
22871: DOUBLE
22872: LD_INT 0
22874: DEC
22875: ST_TO_ADDR
22876: LD_INT 5
22878: PUSH
22879: FOR_TO
22880: IFFALSE 22992
// begin _x := ShiftX ( x , i , 3 ) ;
22882: LD_ADDR_VAR 0 7
22886: PUSH
22887: LD_VAR 0 5
22891: PPUSH
22892: LD_VAR 0 4
22896: PPUSH
22897: LD_INT 3
22899: PPUSH
22900: CALL_OW 272
22904: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22905: LD_ADDR_VAR 0 8
22909: PUSH
22910: LD_VAR 0 6
22914: PPUSH
22915: LD_VAR 0 4
22919: PPUSH
22920: LD_INT 3
22922: PPUSH
22923: CALL_OW 273
22927: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22928: LD_VAR 0 7
22932: PPUSH
22933: LD_VAR 0 8
22937: PPUSH
22938: CALL_OW 488
22942: NOT
22943: IFFALSE 22947
// continue ;
22945: GO 22879
// if HexInfo ( _x , _y ) = 0 then
22947: LD_VAR 0 7
22951: PPUSH
22952: LD_VAR 0 8
22956: PPUSH
22957: CALL_OW 428
22961: PUSH
22962: LD_INT 0
22964: EQUAL
22965: IFFALSE 22990
// begin ComMoveXY ( unit , _x , _y ) ;
22967: LD_VAR 0 1
22971: PPUSH
22972: LD_VAR 0 7
22976: PPUSH
22977: LD_VAR 0 8
22981: PPUSH
22982: CALL_OW 111
// exit ;
22986: POP
22987: POP
22988: GO 22994
// end ; end ;
22990: GO 22879
22992: POP
22993: POP
// end ;
22994: LD_VAR 0 3
22998: RET
// export function ScanBase ( side , base_area ) ; begin
22999: LD_INT 0
23001: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23002: LD_ADDR_VAR 0 3
23006: PUSH
23007: LD_VAR 0 2
23011: PPUSH
23012: LD_INT 81
23014: PUSH
23015: LD_VAR 0 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PPUSH
23024: CALL_OW 70
23028: ST_TO_ADDR
// end ;
23029: LD_VAR 0 3
23033: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23034: LD_INT 0
23036: PPUSH
23037: PPUSH
23038: PPUSH
23039: PPUSH
// result := false ;
23040: LD_ADDR_VAR 0 2
23044: PUSH
23045: LD_INT 0
23047: ST_TO_ADDR
// side := GetSide ( unit ) ;
23048: LD_ADDR_VAR 0 3
23052: PUSH
23053: LD_VAR 0 1
23057: PPUSH
23058: CALL_OW 255
23062: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23063: LD_ADDR_VAR 0 4
23067: PUSH
23068: LD_VAR 0 1
23072: PPUSH
23073: CALL_OW 248
23077: ST_TO_ADDR
// case nat of 1 :
23078: LD_VAR 0 4
23082: PUSH
23083: LD_INT 1
23085: DOUBLE
23086: EQUAL
23087: IFTRUE 23091
23089: GO 23102
23091: POP
// tech := tech_lassight ; 2 :
23092: LD_ADDR_VAR 0 5
23096: PUSH
23097: LD_INT 12
23099: ST_TO_ADDR
23100: GO 23141
23102: LD_INT 2
23104: DOUBLE
23105: EQUAL
23106: IFTRUE 23110
23108: GO 23121
23110: POP
// tech := tech_mortar ; 3 :
23111: LD_ADDR_VAR 0 5
23115: PUSH
23116: LD_INT 41
23118: ST_TO_ADDR
23119: GO 23141
23121: LD_INT 3
23123: DOUBLE
23124: EQUAL
23125: IFTRUE 23129
23127: GO 23140
23129: POP
// tech := tech_bazooka ; end ;
23130: LD_ADDR_VAR 0 5
23134: PUSH
23135: LD_INT 44
23137: ST_TO_ADDR
23138: GO 23141
23140: POP
// if Researched ( side , tech ) then
23141: LD_VAR 0 3
23145: PPUSH
23146: LD_VAR 0 5
23150: PPUSH
23151: CALL_OW 325
23155: IFFALSE 23182
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23157: LD_ADDR_VAR 0 2
23161: PUSH
23162: LD_INT 5
23164: PUSH
23165: LD_INT 8
23167: PUSH
23168: LD_INT 9
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: PUSH
23176: LD_VAR 0 4
23180: ARRAY
23181: ST_TO_ADDR
// end ;
23182: LD_VAR 0 2
23186: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23187: LD_INT 0
23189: PPUSH
23190: PPUSH
23191: PPUSH
// if not mines then
23192: LD_VAR 0 2
23196: NOT
23197: IFFALSE 23201
// exit ;
23199: GO 23345
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23201: LD_ADDR_VAR 0 5
23205: PUSH
23206: LD_INT 81
23208: PUSH
23209: LD_VAR 0 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 3
23220: PUSH
23221: LD_INT 21
23223: PUSH
23224: LD_INT 3
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 69
23243: ST_TO_ADDR
// for i in mines do
23244: LD_ADDR_VAR 0 4
23248: PUSH
23249: LD_VAR 0 2
23253: PUSH
23254: FOR_IN
23255: IFFALSE 23343
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23257: LD_VAR 0 4
23261: PUSH
23262: LD_INT 1
23264: ARRAY
23265: PPUSH
23266: LD_VAR 0 4
23270: PUSH
23271: LD_INT 2
23273: ARRAY
23274: PPUSH
23275: CALL_OW 458
23279: NOT
23280: IFFALSE 23284
// continue ;
23282: GO 23254
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23284: LD_VAR 0 4
23288: PUSH
23289: LD_INT 1
23291: ARRAY
23292: PPUSH
23293: LD_VAR 0 4
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: CALL_OW 428
23306: PUSH
23307: LD_VAR 0 5
23311: IN
23312: IFFALSE 23341
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23314: LD_VAR 0 4
23318: PUSH
23319: LD_INT 1
23321: ARRAY
23322: PPUSH
23323: LD_VAR 0 4
23327: PUSH
23328: LD_INT 2
23330: ARRAY
23331: PPUSH
23332: LD_VAR 0 1
23336: PPUSH
23337: CALL_OW 456
// end ;
23341: GO 23254
23343: POP
23344: POP
// end ;
23345: LD_VAR 0 3
23349: RET
// export function Count ( array ) ; var i ; begin
23350: LD_INT 0
23352: PPUSH
23353: PPUSH
// result := 0 ;
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_INT 0
23361: ST_TO_ADDR
// for i in array do
23362: LD_ADDR_VAR 0 3
23366: PUSH
23367: LD_VAR 0 1
23371: PUSH
23372: FOR_IN
23373: IFFALSE 23397
// if i then
23375: LD_VAR 0 3
23379: IFFALSE 23395
// result := result + 1 ;
23381: LD_ADDR_VAR 0 2
23385: PUSH
23386: LD_VAR 0 2
23390: PUSH
23391: LD_INT 1
23393: PLUS
23394: ST_TO_ADDR
23395: GO 23372
23397: POP
23398: POP
// end ;
23399: LD_VAR 0 2
23403: RET
// export function IsEmpty ( building ) ; begin
23404: LD_INT 0
23406: PPUSH
// if not building then
23407: LD_VAR 0 1
23411: NOT
23412: IFFALSE 23416
// exit ;
23414: GO 23459
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23416: LD_ADDR_VAR 0 2
23420: PUSH
23421: LD_VAR 0 1
23425: PUSH
23426: LD_INT 22
23428: PUSH
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 255
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 58
23445: PUSH
23446: EMPTY
23447: LIST
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PPUSH
23453: CALL_OW 69
23457: IN
23458: ST_TO_ADDR
// end ;
23459: LD_VAR 0 2
23463: RET
// export function IsNotFull ( building ) ; begin
23464: LD_INT 0
23466: PPUSH
// if not building then
23467: LD_VAR 0 1
23471: NOT
23472: IFFALSE 23476
// exit ;
23474: GO 23495
// result := UnitsInside ( building ) < 6 ;
23476: LD_ADDR_VAR 0 2
23480: PUSH
23481: LD_VAR 0 1
23485: PPUSH
23486: CALL_OW 313
23490: PUSH
23491: LD_INT 6
23493: LESS
23494: ST_TO_ADDR
// end ;
23495: LD_VAR 0 2
23499: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23500: LD_INT 0
23502: PPUSH
23503: PPUSH
23504: PPUSH
23505: PPUSH
// tmp := [ ] ;
23506: LD_ADDR_VAR 0 3
23510: PUSH
23511: EMPTY
23512: ST_TO_ADDR
// list := [ ] ;
23513: LD_ADDR_VAR 0 5
23517: PUSH
23518: EMPTY
23519: ST_TO_ADDR
// for i = 16 to 25 do
23520: LD_ADDR_VAR 0 4
23524: PUSH
23525: DOUBLE
23526: LD_INT 16
23528: DEC
23529: ST_TO_ADDR
23530: LD_INT 25
23532: PUSH
23533: FOR_TO
23534: IFFALSE 23607
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23536: LD_ADDR_VAR 0 3
23540: PUSH
23541: LD_VAR 0 3
23545: PUSH
23546: LD_INT 22
23548: PUSH
23549: LD_VAR 0 1
23553: PPUSH
23554: CALL_OW 255
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 91
23565: PUSH
23566: LD_VAR 0 1
23570: PUSH
23571: LD_INT 6
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 30
23581: PUSH
23582: LD_VAR 0 4
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: LIST
23595: PUSH
23596: EMPTY
23597: LIST
23598: PPUSH
23599: CALL_OW 69
23603: ADD
23604: ST_TO_ADDR
23605: GO 23533
23607: POP
23608: POP
// for i = 1 to tmp do
23609: LD_ADDR_VAR 0 4
23613: PUSH
23614: DOUBLE
23615: LD_INT 1
23617: DEC
23618: ST_TO_ADDR
23619: LD_VAR 0 3
23623: PUSH
23624: FOR_TO
23625: IFFALSE 23713
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23627: LD_ADDR_VAR 0 5
23631: PUSH
23632: LD_VAR 0 5
23636: PUSH
23637: LD_VAR 0 3
23641: PUSH
23642: LD_VAR 0 4
23646: ARRAY
23647: PPUSH
23648: CALL_OW 266
23652: PUSH
23653: LD_VAR 0 3
23657: PUSH
23658: LD_VAR 0 4
23662: ARRAY
23663: PPUSH
23664: CALL_OW 250
23668: PUSH
23669: LD_VAR 0 3
23673: PUSH
23674: LD_VAR 0 4
23678: ARRAY
23679: PPUSH
23680: CALL_OW 251
23684: PUSH
23685: LD_VAR 0 3
23689: PUSH
23690: LD_VAR 0 4
23694: ARRAY
23695: PPUSH
23696: CALL_OW 254
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: PUSH
23707: EMPTY
23708: LIST
23709: ADD
23710: ST_TO_ADDR
23711: GO 23624
23713: POP
23714: POP
// result := list ;
23715: LD_ADDR_VAR 0 2
23719: PUSH
23720: LD_VAR 0 5
23724: ST_TO_ADDR
// end ;
23725: LD_VAR 0 2
23729: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23730: LD_INT 0
23732: PPUSH
23733: PPUSH
23734: PPUSH
23735: PPUSH
23736: PPUSH
23737: PPUSH
23738: PPUSH
// if not factory then
23739: LD_VAR 0 1
23743: NOT
23744: IFFALSE 23748
// exit ;
23746: GO 24341
// if control = control_apeman then
23748: LD_VAR 0 4
23752: PUSH
23753: LD_INT 5
23755: EQUAL
23756: IFFALSE 23865
// begin tmp := UnitsInside ( factory ) ;
23758: LD_ADDR_VAR 0 8
23762: PUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: CALL_OW 313
23772: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23773: LD_VAR 0 8
23777: PPUSH
23778: LD_INT 25
23780: PUSH
23781: LD_INT 12
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PPUSH
23788: CALL_OW 72
23792: NOT
23793: IFFALSE 23803
// control := control_manual ;
23795: LD_ADDR_VAR 0 4
23799: PUSH
23800: LD_INT 1
23802: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23803: LD_ADDR_VAR 0 8
23807: PUSH
23808: LD_VAR 0 1
23812: PPUSH
23813: CALL 23500 0 1
23817: ST_TO_ADDR
// if tmp then
23818: LD_VAR 0 8
23822: IFFALSE 23865
// begin for i in tmp do
23824: LD_ADDR_VAR 0 7
23828: PUSH
23829: LD_VAR 0 8
23833: PUSH
23834: FOR_IN
23835: IFFALSE 23863
// if i [ 1 ] = b_ext_radio then
23837: LD_VAR 0 7
23841: PUSH
23842: LD_INT 1
23844: ARRAY
23845: PUSH
23846: LD_INT 22
23848: EQUAL
23849: IFFALSE 23861
// begin control := control_remote ;
23851: LD_ADDR_VAR 0 4
23855: PUSH
23856: LD_INT 2
23858: ST_TO_ADDR
// break ;
23859: GO 23863
// end ;
23861: GO 23834
23863: POP
23864: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23865: LD_VAR 0 1
23869: PPUSH
23870: LD_VAR 0 2
23874: PPUSH
23875: LD_VAR 0 3
23879: PPUSH
23880: LD_VAR 0 4
23884: PPUSH
23885: LD_VAR 0 5
23889: PPUSH
23890: CALL_OW 448
23894: IFFALSE 23929
// begin result := [ chassis , engine , control , weapon ] ;
23896: LD_ADDR_VAR 0 6
23900: PUSH
23901: LD_VAR 0 2
23905: PUSH
23906: LD_VAR 0 3
23910: PUSH
23911: LD_VAR 0 4
23915: PUSH
23916: LD_VAR 0 5
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: ST_TO_ADDR
// exit ;
23927: GO 24341
// end ; _chassis := AvailableChassisList ( factory ) ;
23929: LD_ADDR_VAR 0 9
23933: PUSH
23934: LD_VAR 0 1
23938: PPUSH
23939: CALL_OW 475
23943: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23944: LD_ADDR_VAR 0 11
23948: PUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: CALL_OW 476
23958: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23959: LD_ADDR_VAR 0 12
23963: PUSH
23964: LD_VAR 0 1
23968: PPUSH
23969: CALL_OW 477
23973: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23974: LD_ADDR_VAR 0 10
23978: PUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: CALL_OW 478
23988: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23989: LD_VAR 0 9
23993: NOT
23994: PUSH
23995: LD_VAR 0 11
23999: NOT
24000: OR
24001: PUSH
24002: LD_VAR 0 12
24006: NOT
24007: OR
24008: PUSH
24009: LD_VAR 0 10
24013: NOT
24014: OR
24015: IFFALSE 24050
// begin result := [ chassis , engine , control , weapon ] ;
24017: LD_ADDR_VAR 0 6
24021: PUSH
24022: LD_VAR 0 2
24026: PUSH
24027: LD_VAR 0 3
24031: PUSH
24032: LD_VAR 0 4
24036: PUSH
24037: LD_VAR 0 5
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: ST_TO_ADDR
// exit ;
24048: GO 24341
// end ; if not chassis in _chassis then
24050: LD_VAR 0 2
24054: PUSH
24055: LD_VAR 0 9
24059: IN
24060: NOT
24061: IFFALSE 24087
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24063: LD_ADDR_VAR 0 2
24067: PUSH
24068: LD_VAR 0 9
24072: PUSH
24073: LD_INT 1
24075: PPUSH
24076: LD_VAR 0 9
24080: PPUSH
24081: CALL_OW 12
24085: ARRAY
24086: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24087: LD_VAR 0 2
24091: PPUSH
24092: LD_VAR 0 3
24096: PPUSH
24097: CALL 24346 0 2
24101: NOT
24102: IFFALSE 24161
// repeat engine := _engine [ 1 ] ;
24104: LD_ADDR_VAR 0 3
24108: PUSH
24109: LD_VAR 0 11
24113: PUSH
24114: LD_INT 1
24116: ARRAY
24117: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24118: LD_ADDR_VAR 0 11
24122: PUSH
24123: LD_VAR 0 11
24127: PPUSH
24128: LD_INT 1
24130: PPUSH
24131: CALL_OW 3
24135: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24136: LD_VAR 0 2
24140: PPUSH
24141: LD_VAR 0 3
24145: PPUSH
24146: CALL 24346 0 2
24150: PUSH
24151: LD_VAR 0 11
24155: PUSH
24156: EMPTY
24157: EQUAL
24158: OR
24159: IFFALSE 24104
// if not control in _control then
24161: LD_VAR 0 4
24165: PUSH
24166: LD_VAR 0 12
24170: IN
24171: NOT
24172: IFFALSE 24198
// control := _control [ rand ( 1 , _control ) ] ;
24174: LD_ADDR_VAR 0 4
24178: PUSH
24179: LD_VAR 0 12
24183: PUSH
24184: LD_INT 1
24186: PPUSH
24187: LD_VAR 0 12
24191: PPUSH
24192: CALL_OW 12
24196: ARRAY
24197: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24198: LD_VAR 0 2
24202: PPUSH
24203: LD_VAR 0 5
24207: PPUSH
24208: CALL 24566 0 2
24212: NOT
24213: IFFALSE 24272
// repeat weapon := _weapon [ 1 ] ;
24215: LD_ADDR_VAR 0 5
24219: PUSH
24220: LD_VAR 0 10
24224: PUSH
24225: LD_INT 1
24227: ARRAY
24228: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24229: LD_ADDR_VAR 0 10
24233: PUSH
24234: LD_VAR 0 10
24238: PPUSH
24239: LD_INT 1
24241: PPUSH
24242: CALL_OW 3
24246: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24247: LD_VAR 0 2
24251: PPUSH
24252: LD_VAR 0 5
24256: PPUSH
24257: CALL 24566 0 2
24261: PUSH
24262: LD_VAR 0 10
24266: PUSH
24267: EMPTY
24268: EQUAL
24269: OR
24270: IFFALSE 24215
// result := [ ] ;
24272: LD_ADDR_VAR 0 6
24276: PUSH
24277: EMPTY
24278: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24279: LD_VAR 0 1
24283: PPUSH
24284: LD_VAR 0 2
24288: PPUSH
24289: LD_VAR 0 3
24293: PPUSH
24294: LD_VAR 0 4
24298: PPUSH
24299: LD_VAR 0 5
24303: PPUSH
24304: CALL_OW 448
24308: IFFALSE 24341
// result := [ chassis , engine , control , weapon ] ;
24310: LD_ADDR_VAR 0 6
24314: PUSH
24315: LD_VAR 0 2
24319: PUSH
24320: LD_VAR 0 3
24324: PUSH
24325: LD_VAR 0 4
24329: PUSH
24330: LD_VAR 0 5
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: ST_TO_ADDR
// end ;
24341: LD_VAR 0 6
24345: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24346: LD_INT 0
24348: PPUSH
// if not chassis or not engine then
24349: LD_VAR 0 1
24353: NOT
24354: PUSH
24355: LD_VAR 0 2
24359: NOT
24360: OR
24361: IFFALSE 24365
// exit ;
24363: GO 24561
// case engine of engine_solar :
24365: LD_VAR 0 2
24369: PUSH
24370: LD_INT 2
24372: DOUBLE
24373: EQUAL
24374: IFTRUE 24378
24376: GO 24416
24378: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24379: LD_ADDR_VAR 0 3
24383: PUSH
24384: LD_INT 11
24386: PUSH
24387: LD_INT 12
24389: PUSH
24390: LD_INT 13
24392: PUSH
24393: LD_INT 14
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 2
24401: PUSH
24402: LD_INT 3
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: ST_TO_ADDR
24414: GO 24545
24416: LD_INT 1
24418: DOUBLE
24419: EQUAL
24420: IFTRUE 24424
24422: GO 24486
24424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24425: LD_ADDR_VAR 0 3
24429: PUSH
24430: LD_INT 11
24432: PUSH
24433: LD_INT 12
24435: PUSH
24436: LD_INT 13
24438: PUSH
24439: LD_INT 14
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: LD_INT 3
24450: PUSH
24451: LD_INT 4
24453: PUSH
24454: LD_INT 5
24456: PUSH
24457: LD_INT 21
24459: PUSH
24460: LD_INT 23
24462: PUSH
24463: LD_INT 22
24465: PUSH
24466: LD_INT 24
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: ST_TO_ADDR
24484: GO 24545
24486: LD_INT 3
24488: DOUBLE
24489: EQUAL
24490: IFTRUE 24494
24492: GO 24544
24494: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24495: LD_ADDR_VAR 0 3
24499: PUSH
24500: LD_INT 13
24502: PUSH
24503: LD_INT 14
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: LD_INT 3
24511: PUSH
24512: LD_INT 4
24514: PUSH
24515: LD_INT 5
24517: PUSH
24518: LD_INT 21
24520: PUSH
24521: LD_INT 22
24523: PUSH
24524: LD_INT 23
24526: PUSH
24527: LD_INT 24
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: ST_TO_ADDR
24542: GO 24545
24544: POP
// result := ( chassis in result ) ;
24545: LD_ADDR_VAR 0 3
24549: PUSH
24550: LD_VAR 0 1
24554: PUSH
24555: LD_VAR 0 3
24559: IN
24560: ST_TO_ADDR
// end ;
24561: LD_VAR 0 3
24565: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24566: LD_INT 0
24568: PPUSH
// if not chassis or not weapon then
24569: LD_VAR 0 1
24573: NOT
24574: PUSH
24575: LD_VAR 0 2
24579: NOT
24580: OR
24581: IFFALSE 24585
// exit ;
24583: GO 25647
// case weapon of us_machine_gun :
24585: LD_VAR 0 2
24589: PUSH
24590: LD_INT 2
24592: DOUBLE
24593: EQUAL
24594: IFTRUE 24598
24596: GO 24628
24598: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24599: LD_ADDR_VAR 0 3
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: LD_INT 3
24612: PUSH
24613: LD_INT 4
24615: PUSH
24616: LD_INT 5
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: ST_TO_ADDR
24626: GO 25631
24628: LD_INT 3
24630: DOUBLE
24631: EQUAL
24632: IFTRUE 24636
24634: GO 24666
24636: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24637: LD_ADDR_VAR 0 3
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: LD_INT 4
24653: PUSH
24654: LD_INT 5
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: ST_TO_ADDR
24664: GO 25631
24666: LD_INT 11
24668: DOUBLE
24669: EQUAL
24670: IFTRUE 24674
24672: GO 24704
24674: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24675: LD_ADDR_VAR 0 3
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 3
24688: PUSH
24689: LD_INT 4
24691: PUSH
24692: LD_INT 5
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: ST_TO_ADDR
24702: GO 25631
24704: LD_INT 4
24706: DOUBLE
24707: EQUAL
24708: IFTRUE 24712
24710: GO 24738
24712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_INT 2
24720: PUSH
24721: LD_INT 3
24723: PUSH
24724: LD_INT 4
24726: PUSH
24727: LD_INT 5
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: ST_TO_ADDR
24736: GO 25631
24738: LD_INT 5
24740: DOUBLE
24741: EQUAL
24742: IFTRUE 24746
24744: GO 24772
24746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24747: LD_ADDR_VAR 0 3
24751: PUSH
24752: LD_INT 2
24754: PUSH
24755: LD_INT 3
24757: PUSH
24758: LD_INT 4
24760: PUSH
24761: LD_INT 5
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: ST_TO_ADDR
24770: GO 25631
24772: LD_INT 9
24774: DOUBLE
24775: EQUAL
24776: IFTRUE 24780
24778: GO 24806
24780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24781: LD_ADDR_VAR 0 3
24785: PUSH
24786: LD_INT 2
24788: PUSH
24789: LD_INT 3
24791: PUSH
24792: LD_INT 4
24794: PUSH
24795: LD_INT 5
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: ST_TO_ADDR
24804: GO 25631
24806: LD_INT 7
24808: DOUBLE
24809: EQUAL
24810: IFTRUE 24814
24812: GO 24840
24814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24815: LD_ADDR_VAR 0 3
24819: PUSH
24820: LD_INT 2
24822: PUSH
24823: LD_INT 3
24825: PUSH
24826: LD_INT 4
24828: PUSH
24829: LD_INT 5
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: ST_TO_ADDR
24838: GO 25631
24840: LD_INT 12
24842: DOUBLE
24843: EQUAL
24844: IFTRUE 24848
24846: GO 24874
24848: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24849: LD_ADDR_VAR 0 3
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 3
24859: PUSH
24860: LD_INT 4
24862: PUSH
24863: LD_INT 5
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: ST_TO_ADDR
24872: GO 25631
24874: LD_INT 13
24876: DOUBLE
24877: EQUAL
24878: IFTRUE 24882
24880: GO 24908
24882: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24883: LD_ADDR_VAR 0 3
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: LD_INT 3
24893: PUSH
24894: LD_INT 4
24896: PUSH
24897: LD_INT 5
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: ST_TO_ADDR
24906: GO 25631
24908: LD_INT 14
24910: DOUBLE
24911: EQUAL
24912: IFTRUE 24916
24914: GO 24934
24916: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24917: LD_ADDR_VAR 0 3
24921: PUSH
24922: LD_INT 4
24924: PUSH
24925: LD_INT 5
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: ST_TO_ADDR
24932: GO 25631
24934: LD_INT 6
24936: DOUBLE
24937: EQUAL
24938: IFTRUE 24942
24940: GO 24960
24942: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_INT 4
24950: PUSH
24951: LD_INT 5
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: ST_TO_ADDR
24958: GO 25631
24960: LD_INT 10
24962: DOUBLE
24963: EQUAL
24964: IFTRUE 24968
24966: GO 24986
24968: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24969: LD_ADDR_VAR 0 3
24973: PUSH
24974: LD_INT 4
24976: PUSH
24977: LD_INT 5
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: ST_TO_ADDR
24984: GO 25631
24986: LD_INT 22
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25020
24994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24995: LD_ADDR_VAR 0 3
24999: PUSH
25000: LD_INT 11
25002: PUSH
25003: LD_INT 12
25005: PUSH
25006: LD_INT 13
25008: PUSH
25009: LD_INT 14
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: ST_TO_ADDR
25018: GO 25631
25020: LD_INT 23
25022: DOUBLE
25023: EQUAL
25024: IFTRUE 25028
25026: GO 25054
25028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25029: LD_ADDR_VAR 0 3
25033: PUSH
25034: LD_INT 11
25036: PUSH
25037: LD_INT 12
25039: PUSH
25040: LD_INT 13
25042: PUSH
25043: LD_INT 14
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: ST_TO_ADDR
25052: GO 25631
25054: LD_INT 24
25056: DOUBLE
25057: EQUAL
25058: IFTRUE 25062
25060: GO 25088
25062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: LD_INT 11
25070: PUSH
25071: LD_INT 12
25073: PUSH
25074: LD_INT 13
25076: PUSH
25077: LD_INT 14
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: ST_TO_ADDR
25086: GO 25631
25088: LD_INT 30
25090: DOUBLE
25091: EQUAL
25092: IFTRUE 25096
25094: GO 25122
25096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25097: LD_ADDR_VAR 0 3
25101: PUSH
25102: LD_INT 11
25104: PUSH
25105: LD_INT 12
25107: PUSH
25108: LD_INT 13
25110: PUSH
25111: LD_INT 14
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: ST_TO_ADDR
25120: GO 25631
25122: LD_INT 25
25124: DOUBLE
25125: EQUAL
25126: IFTRUE 25130
25128: GO 25148
25130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25131: LD_ADDR_VAR 0 3
25135: PUSH
25136: LD_INT 13
25138: PUSH
25139: LD_INT 14
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: ST_TO_ADDR
25146: GO 25631
25148: LD_INT 27
25150: DOUBLE
25151: EQUAL
25152: IFTRUE 25156
25154: GO 25174
25156: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25157: LD_ADDR_VAR 0 3
25161: PUSH
25162: LD_INT 13
25164: PUSH
25165: LD_INT 14
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: ST_TO_ADDR
25172: GO 25631
25174: LD_EXP 131
25178: DOUBLE
25179: EQUAL
25180: IFTRUE 25184
25182: GO 25210
25184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25185: LD_ADDR_VAR 0 3
25189: PUSH
25190: LD_INT 11
25192: PUSH
25193: LD_INT 12
25195: PUSH
25196: LD_INT 13
25198: PUSH
25199: LD_INT 14
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: ST_TO_ADDR
25208: GO 25631
25210: LD_INT 28
25212: DOUBLE
25213: EQUAL
25214: IFTRUE 25218
25216: GO 25236
25218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25219: LD_ADDR_VAR 0 3
25223: PUSH
25224: LD_INT 13
25226: PUSH
25227: LD_INT 14
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: ST_TO_ADDR
25234: GO 25631
25236: LD_INT 29
25238: DOUBLE
25239: EQUAL
25240: IFTRUE 25244
25242: GO 25262
25244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25245: LD_ADDR_VAR 0 3
25249: PUSH
25250: LD_INT 13
25252: PUSH
25253: LD_INT 14
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: ST_TO_ADDR
25260: GO 25631
25262: LD_INT 31
25264: DOUBLE
25265: EQUAL
25266: IFTRUE 25270
25268: GO 25288
25270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25271: LD_ADDR_VAR 0 3
25275: PUSH
25276: LD_INT 13
25278: PUSH
25279: LD_INT 14
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: ST_TO_ADDR
25286: GO 25631
25288: LD_INT 26
25290: DOUBLE
25291: EQUAL
25292: IFTRUE 25296
25294: GO 25314
25296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25297: LD_ADDR_VAR 0 3
25301: PUSH
25302: LD_INT 13
25304: PUSH
25305: LD_INT 14
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: ST_TO_ADDR
25312: GO 25631
25314: LD_INT 42
25316: DOUBLE
25317: EQUAL
25318: IFTRUE 25322
25320: GO 25348
25322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25323: LD_ADDR_VAR 0 3
25327: PUSH
25328: LD_INT 21
25330: PUSH
25331: LD_INT 22
25333: PUSH
25334: LD_INT 23
25336: PUSH
25337: LD_INT 24
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: ST_TO_ADDR
25346: GO 25631
25348: LD_INT 43
25350: DOUBLE
25351: EQUAL
25352: IFTRUE 25356
25354: GO 25382
25356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25357: LD_ADDR_VAR 0 3
25361: PUSH
25362: LD_INT 21
25364: PUSH
25365: LD_INT 22
25367: PUSH
25368: LD_INT 23
25370: PUSH
25371: LD_INT 24
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: ST_TO_ADDR
25380: GO 25631
25382: LD_INT 44
25384: DOUBLE
25385: EQUAL
25386: IFTRUE 25390
25388: GO 25416
25390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25391: LD_ADDR_VAR 0 3
25395: PUSH
25396: LD_INT 21
25398: PUSH
25399: LD_INT 22
25401: PUSH
25402: LD_INT 23
25404: PUSH
25405: LD_INT 24
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: ST_TO_ADDR
25414: GO 25631
25416: LD_INT 45
25418: DOUBLE
25419: EQUAL
25420: IFTRUE 25424
25422: GO 25450
25424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25425: LD_ADDR_VAR 0 3
25429: PUSH
25430: LD_INT 21
25432: PUSH
25433: LD_INT 22
25435: PUSH
25436: LD_INT 23
25438: PUSH
25439: LD_INT 24
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: ST_TO_ADDR
25448: GO 25631
25450: LD_INT 49
25452: DOUBLE
25453: EQUAL
25454: IFTRUE 25458
25456: GO 25484
25458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25459: LD_ADDR_VAR 0 3
25463: PUSH
25464: LD_INT 21
25466: PUSH
25467: LD_INT 22
25469: PUSH
25470: LD_INT 23
25472: PUSH
25473: LD_INT 24
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: ST_TO_ADDR
25482: GO 25631
25484: LD_INT 51
25486: DOUBLE
25487: EQUAL
25488: IFTRUE 25492
25490: GO 25518
25492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25493: LD_ADDR_VAR 0 3
25497: PUSH
25498: LD_INT 21
25500: PUSH
25501: LD_INT 22
25503: PUSH
25504: LD_INT 23
25506: PUSH
25507: LD_INT 24
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: ST_TO_ADDR
25516: GO 25631
25518: LD_INT 52
25520: DOUBLE
25521: EQUAL
25522: IFTRUE 25526
25524: GO 25552
25526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25527: LD_ADDR_VAR 0 3
25531: PUSH
25532: LD_INT 21
25534: PUSH
25535: LD_INT 22
25537: PUSH
25538: LD_INT 23
25540: PUSH
25541: LD_INT 24
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: ST_TO_ADDR
25550: GO 25631
25552: LD_INT 53
25554: DOUBLE
25555: EQUAL
25556: IFTRUE 25560
25558: GO 25578
25560: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25561: LD_ADDR_VAR 0 3
25565: PUSH
25566: LD_INT 23
25568: PUSH
25569: LD_INT 24
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: ST_TO_ADDR
25576: GO 25631
25578: LD_INT 46
25580: DOUBLE
25581: EQUAL
25582: IFTRUE 25586
25584: GO 25604
25586: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25587: LD_ADDR_VAR 0 3
25591: PUSH
25592: LD_INT 23
25594: PUSH
25595: LD_INT 24
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: ST_TO_ADDR
25602: GO 25631
25604: LD_INT 47
25606: DOUBLE
25607: EQUAL
25608: IFTRUE 25612
25610: GO 25630
25612: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25613: LD_ADDR_VAR 0 3
25617: PUSH
25618: LD_INT 23
25620: PUSH
25621: LD_INT 24
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: ST_TO_ADDR
25628: GO 25631
25630: POP
// result := ( chassis in result ) ;
25631: LD_ADDR_VAR 0 3
25635: PUSH
25636: LD_VAR 0 1
25640: PUSH
25641: LD_VAR 0 3
25645: IN
25646: ST_TO_ADDR
// end ;
25647: LD_VAR 0 3
25651: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25652: LD_INT 0
25654: PPUSH
25655: PPUSH
25656: PPUSH
25657: PPUSH
25658: PPUSH
25659: PPUSH
25660: PPUSH
// result := array ;
25661: LD_ADDR_VAR 0 5
25665: PUSH
25666: LD_VAR 0 1
25670: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25671: LD_VAR 0 1
25675: NOT
25676: PUSH
25677: LD_VAR 0 2
25681: NOT
25682: OR
25683: PUSH
25684: LD_VAR 0 3
25688: NOT
25689: OR
25690: PUSH
25691: LD_VAR 0 2
25695: PUSH
25696: LD_VAR 0 1
25700: GREATER
25701: OR
25702: PUSH
25703: LD_VAR 0 3
25707: PUSH
25708: LD_VAR 0 1
25712: GREATER
25713: OR
25714: IFFALSE 25718
// exit ;
25716: GO 26014
// if direction then
25718: LD_VAR 0 4
25722: IFFALSE 25786
// begin d := 1 ;
25724: LD_ADDR_VAR 0 9
25728: PUSH
25729: LD_INT 1
25731: ST_TO_ADDR
// if i_from > i_to then
25732: LD_VAR 0 2
25736: PUSH
25737: LD_VAR 0 3
25741: GREATER
25742: IFFALSE 25768
// length := ( array - i_from ) + i_to else
25744: LD_ADDR_VAR 0 11
25748: PUSH
25749: LD_VAR 0 1
25753: PUSH
25754: LD_VAR 0 2
25758: MINUS
25759: PUSH
25760: LD_VAR 0 3
25764: PLUS
25765: ST_TO_ADDR
25766: GO 25784
// length := i_to - i_from ;
25768: LD_ADDR_VAR 0 11
25772: PUSH
25773: LD_VAR 0 3
25777: PUSH
25778: LD_VAR 0 2
25782: MINUS
25783: ST_TO_ADDR
// end else
25784: GO 25847
// begin d := - 1 ;
25786: LD_ADDR_VAR 0 9
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: ST_TO_ADDR
// if i_from > i_to then
25795: LD_VAR 0 2
25799: PUSH
25800: LD_VAR 0 3
25804: GREATER
25805: IFFALSE 25825
// length := i_from - i_to else
25807: LD_ADDR_VAR 0 11
25811: PUSH
25812: LD_VAR 0 2
25816: PUSH
25817: LD_VAR 0 3
25821: MINUS
25822: ST_TO_ADDR
25823: GO 25847
// length := ( array - i_to ) + i_from ;
25825: LD_ADDR_VAR 0 11
25829: PUSH
25830: LD_VAR 0 1
25834: PUSH
25835: LD_VAR 0 3
25839: MINUS
25840: PUSH
25841: LD_VAR 0 2
25845: PLUS
25846: ST_TO_ADDR
// end ; if not length then
25847: LD_VAR 0 11
25851: NOT
25852: IFFALSE 25856
// exit ;
25854: GO 26014
// tmp := array ;
25856: LD_ADDR_VAR 0 10
25860: PUSH
25861: LD_VAR 0 1
25865: ST_TO_ADDR
// for i = 1 to length do
25866: LD_ADDR_VAR 0 6
25870: PUSH
25871: DOUBLE
25872: LD_INT 1
25874: DEC
25875: ST_TO_ADDR
25876: LD_VAR 0 11
25880: PUSH
25881: FOR_TO
25882: IFFALSE 26002
// begin for j = 1 to array do
25884: LD_ADDR_VAR 0 7
25888: PUSH
25889: DOUBLE
25890: LD_INT 1
25892: DEC
25893: ST_TO_ADDR
25894: LD_VAR 0 1
25898: PUSH
25899: FOR_TO
25900: IFFALSE 25988
// begin k := j + d ;
25902: LD_ADDR_VAR 0 8
25906: PUSH
25907: LD_VAR 0 7
25911: PUSH
25912: LD_VAR 0 9
25916: PLUS
25917: ST_TO_ADDR
// if k > array then
25918: LD_VAR 0 8
25922: PUSH
25923: LD_VAR 0 1
25927: GREATER
25928: IFFALSE 25938
// k := 1 ;
25930: LD_ADDR_VAR 0 8
25934: PUSH
25935: LD_INT 1
25937: ST_TO_ADDR
// if not k then
25938: LD_VAR 0 8
25942: NOT
25943: IFFALSE 25955
// k := array ;
25945: LD_ADDR_VAR 0 8
25949: PUSH
25950: LD_VAR 0 1
25954: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25955: LD_ADDR_VAR 0 10
25959: PUSH
25960: LD_VAR 0 10
25964: PPUSH
25965: LD_VAR 0 8
25969: PPUSH
25970: LD_VAR 0 1
25974: PUSH
25975: LD_VAR 0 7
25979: ARRAY
25980: PPUSH
25981: CALL_OW 1
25985: ST_TO_ADDR
// end ;
25986: GO 25899
25988: POP
25989: POP
// array := tmp ;
25990: LD_ADDR_VAR 0 1
25994: PUSH
25995: LD_VAR 0 10
25999: ST_TO_ADDR
// end ;
26000: GO 25881
26002: POP
26003: POP
// result := array ;
26004: LD_ADDR_VAR 0 5
26008: PUSH
26009: LD_VAR 0 1
26013: ST_TO_ADDR
// end ;
26014: LD_VAR 0 5
26018: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26019: LD_INT 0
26021: PPUSH
26022: PPUSH
// result := 0 ;
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: LD_INT 0
26030: ST_TO_ADDR
// if not array or not value in array then
26031: LD_VAR 0 1
26035: NOT
26036: PUSH
26037: LD_VAR 0 2
26041: PUSH
26042: LD_VAR 0 1
26046: IN
26047: NOT
26048: OR
26049: IFFALSE 26053
// exit ;
26051: GO 26107
// for i = 1 to array do
26053: LD_ADDR_VAR 0 4
26057: PUSH
26058: DOUBLE
26059: LD_INT 1
26061: DEC
26062: ST_TO_ADDR
26063: LD_VAR 0 1
26067: PUSH
26068: FOR_TO
26069: IFFALSE 26105
// if value = array [ i ] then
26071: LD_VAR 0 2
26075: PUSH
26076: LD_VAR 0 1
26080: PUSH
26081: LD_VAR 0 4
26085: ARRAY
26086: EQUAL
26087: IFFALSE 26103
// begin result := i ;
26089: LD_ADDR_VAR 0 3
26093: PUSH
26094: LD_VAR 0 4
26098: ST_TO_ADDR
// exit ;
26099: POP
26100: POP
26101: GO 26107
// end ;
26103: GO 26068
26105: POP
26106: POP
// end ;
26107: LD_VAR 0 3
26111: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26112: LD_INT 0
26114: PPUSH
// vc_chassis := chassis ;
26115: LD_ADDR_OWVAR 37
26119: PUSH
26120: LD_VAR 0 1
26124: ST_TO_ADDR
// vc_engine := engine ;
26125: LD_ADDR_OWVAR 39
26129: PUSH
26130: LD_VAR 0 2
26134: ST_TO_ADDR
// vc_control := control ;
26135: LD_ADDR_OWVAR 38
26139: PUSH
26140: LD_VAR 0 3
26144: ST_TO_ADDR
// vc_weapon := weapon ;
26145: LD_ADDR_OWVAR 40
26149: PUSH
26150: LD_VAR 0 4
26154: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26155: LD_ADDR_OWVAR 41
26159: PUSH
26160: LD_VAR 0 5
26164: ST_TO_ADDR
// end ;
26165: LD_VAR 0 6
26169: RET
// export function WantPlant ( unit ) ; var task ; begin
26170: LD_INT 0
26172: PPUSH
26173: PPUSH
// result := false ;
26174: LD_ADDR_VAR 0 2
26178: PUSH
26179: LD_INT 0
26181: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26182: LD_ADDR_VAR 0 3
26186: PUSH
26187: LD_VAR 0 1
26191: PPUSH
26192: CALL_OW 437
26196: ST_TO_ADDR
// if task then
26197: LD_VAR 0 3
26201: IFFALSE 26229
// if task [ 1 ] [ 1 ] = p then
26203: LD_VAR 0 3
26207: PUSH
26208: LD_INT 1
26210: ARRAY
26211: PUSH
26212: LD_INT 1
26214: ARRAY
26215: PUSH
26216: LD_STRING p
26218: EQUAL
26219: IFFALSE 26229
// result := true ;
26221: LD_ADDR_VAR 0 2
26225: PUSH
26226: LD_INT 1
26228: ST_TO_ADDR
// end ;
26229: LD_VAR 0 2
26233: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26234: LD_INT 0
26236: PPUSH
26237: PPUSH
26238: PPUSH
26239: PPUSH
// if pos < 1 then
26240: LD_VAR 0 2
26244: PUSH
26245: LD_INT 1
26247: LESS
26248: IFFALSE 26252
// exit ;
26250: GO 26555
// if pos = 1 then
26252: LD_VAR 0 2
26256: PUSH
26257: LD_INT 1
26259: EQUAL
26260: IFFALSE 26293
// result := Replace ( arr , pos [ 1 ] , value ) else
26262: LD_ADDR_VAR 0 4
26266: PUSH
26267: LD_VAR 0 1
26271: PPUSH
26272: LD_VAR 0 2
26276: PUSH
26277: LD_INT 1
26279: ARRAY
26280: PPUSH
26281: LD_VAR 0 3
26285: PPUSH
26286: CALL_OW 1
26290: ST_TO_ADDR
26291: GO 26555
// begin tmp := arr ;
26293: LD_ADDR_VAR 0 6
26297: PUSH
26298: LD_VAR 0 1
26302: ST_TO_ADDR
// s_arr := [ tmp ] ;
26303: LD_ADDR_VAR 0 7
26307: PUSH
26308: LD_VAR 0 6
26312: PUSH
26313: EMPTY
26314: LIST
26315: ST_TO_ADDR
// for i = 1 to pos - 1 do
26316: LD_ADDR_VAR 0 5
26320: PUSH
26321: DOUBLE
26322: LD_INT 1
26324: DEC
26325: ST_TO_ADDR
26326: LD_VAR 0 2
26330: PUSH
26331: LD_INT 1
26333: MINUS
26334: PUSH
26335: FOR_TO
26336: IFFALSE 26381
// begin tmp := tmp [ pos [ i ] ] ;
26338: LD_ADDR_VAR 0 6
26342: PUSH
26343: LD_VAR 0 6
26347: PUSH
26348: LD_VAR 0 2
26352: PUSH
26353: LD_VAR 0 5
26357: ARRAY
26358: ARRAY
26359: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26360: LD_ADDR_VAR 0 7
26364: PUSH
26365: LD_VAR 0 7
26369: PUSH
26370: LD_VAR 0 6
26374: PUSH
26375: EMPTY
26376: LIST
26377: ADD
26378: ST_TO_ADDR
// end ;
26379: GO 26335
26381: POP
26382: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26383: LD_ADDR_VAR 0 6
26387: PUSH
26388: LD_VAR 0 6
26392: PPUSH
26393: LD_VAR 0 2
26397: PUSH
26398: LD_VAR 0 2
26402: ARRAY
26403: PPUSH
26404: LD_VAR 0 3
26408: PPUSH
26409: CALL_OW 1
26413: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26414: LD_ADDR_VAR 0 7
26418: PUSH
26419: LD_VAR 0 7
26423: PPUSH
26424: LD_VAR 0 7
26428: PPUSH
26429: LD_VAR 0 6
26433: PPUSH
26434: CALL_OW 1
26438: ST_TO_ADDR
// for i = s_arr downto 2 do
26439: LD_ADDR_VAR 0 5
26443: PUSH
26444: DOUBLE
26445: LD_VAR 0 7
26449: INC
26450: ST_TO_ADDR
26451: LD_INT 2
26453: PUSH
26454: FOR_DOWNTO
26455: IFFALSE 26539
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26457: LD_ADDR_VAR 0 6
26461: PUSH
26462: LD_VAR 0 7
26466: PUSH
26467: LD_VAR 0 5
26471: PUSH
26472: LD_INT 1
26474: MINUS
26475: ARRAY
26476: PPUSH
26477: LD_VAR 0 2
26481: PUSH
26482: LD_VAR 0 5
26486: PUSH
26487: LD_INT 1
26489: MINUS
26490: ARRAY
26491: PPUSH
26492: LD_VAR 0 7
26496: PUSH
26497: LD_VAR 0 5
26501: ARRAY
26502: PPUSH
26503: CALL_OW 1
26507: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26508: LD_ADDR_VAR 0 7
26512: PUSH
26513: LD_VAR 0 7
26517: PPUSH
26518: LD_VAR 0 5
26522: PUSH
26523: LD_INT 1
26525: MINUS
26526: PPUSH
26527: LD_VAR 0 6
26531: PPUSH
26532: CALL_OW 1
26536: ST_TO_ADDR
// end ;
26537: GO 26454
26539: POP
26540: POP
// result := s_arr [ 1 ] ;
26541: LD_ADDR_VAR 0 4
26545: PUSH
26546: LD_VAR 0 7
26550: PUSH
26551: LD_INT 1
26553: ARRAY
26554: ST_TO_ADDR
// end ; end ;
26555: LD_VAR 0 4
26559: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26560: LD_INT 0
26562: PPUSH
26563: PPUSH
// if not list then
26564: LD_VAR 0 1
26568: NOT
26569: IFFALSE 26573
// exit ;
26571: GO 26664
// i := list [ pos1 ] ;
26573: LD_ADDR_VAR 0 5
26577: PUSH
26578: LD_VAR 0 1
26582: PUSH
26583: LD_VAR 0 2
26587: ARRAY
26588: ST_TO_ADDR
// if not i then
26589: LD_VAR 0 5
26593: NOT
26594: IFFALSE 26598
// exit ;
26596: GO 26664
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26598: LD_ADDR_VAR 0 1
26602: PUSH
26603: LD_VAR 0 1
26607: PPUSH
26608: LD_VAR 0 2
26612: PPUSH
26613: LD_VAR 0 1
26617: PUSH
26618: LD_VAR 0 3
26622: ARRAY
26623: PPUSH
26624: CALL_OW 1
26628: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26629: LD_ADDR_VAR 0 1
26633: PUSH
26634: LD_VAR 0 1
26638: PPUSH
26639: LD_VAR 0 3
26643: PPUSH
26644: LD_VAR 0 5
26648: PPUSH
26649: CALL_OW 1
26653: ST_TO_ADDR
// result := list ;
26654: LD_ADDR_VAR 0 4
26658: PUSH
26659: LD_VAR 0 1
26663: ST_TO_ADDR
// end ;
26664: LD_VAR 0 4
26668: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26669: LD_INT 0
26671: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26672: LD_ADDR_VAR 0 5
26676: PUSH
26677: LD_VAR 0 1
26681: PPUSH
26682: CALL_OW 250
26686: PPUSH
26687: LD_VAR 0 1
26691: PPUSH
26692: CALL_OW 251
26696: PPUSH
26697: LD_VAR 0 2
26701: PPUSH
26702: LD_VAR 0 3
26706: PPUSH
26707: LD_VAR 0 4
26711: PPUSH
26712: CALL 26722 0 5
26716: ST_TO_ADDR
// end ;
26717: LD_VAR 0 5
26721: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26722: LD_INT 0
26724: PPUSH
26725: PPUSH
26726: PPUSH
26727: PPUSH
// if not list then
26728: LD_VAR 0 3
26732: NOT
26733: IFFALSE 26737
// exit ;
26735: GO 27125
// result := [ ] ;
26737: LD_ADDR_VAR 0 6
26741: PUSH
26742: EMPTY
26743: ST_TO_ADDR
// for i in list do
26744: LD_ADDR_VAR 0 7
26748: PUSH
26749: LD_VAR 0 3
26753: PUSH
26754: FOR_IN
26755: IFFALSE 26957
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26757: LD_ADDR_VAR 0 9
26761: PUSH
26762: LD_VAR 0 7
26766: PPUSH
26767: LD_VAR 0 1
26771: PPUSH
26772: LD_VAR 0 2
26776: PPUSH
26777: CALL_OW 297
26781: ST_TO_ADDR
// if not result then
26782: LD_VAR 0 6
26786: NOT
26787: IFFALSE 26813
// result := [ [ i , tmp ] ] else
26789: LD_ADDR_VAR 0 6
26793: PUSH
26794: LD_VAR 0 7
26798: PUSH
26799: LD_VAR 0 9
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: EMPTY
26809: LIST
26810: ST_TO_ADDR
26811: GO 26955
// begin if result [ result ] [ 2 ] < tmp then
26813: LD_VAR 0 6
26817: PUSH
26818: LD_VAR 0 6
26822: ARRAY
26823: PUSH
26824: LD_INT 2
26826: ARRAY
26827: PUSH
26828: LD_VAR 0 9
26832: LESS
26833: IFFALSE 26875
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26835: LD_ADDR_VAR 0 6
26839: PUSH
26840: LD_VAR 0 6
26844: PPUSH
26845: LD_VAR 0 6
26849: PUSH
26850: LD_INT 1
26852: PLUS
26853: PPUSH
26854: LD_VAR 0 7
26858: PUSH
26859: LD_VAR 0 9
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PPUSH
26868: CALL_OW 2
26872: ST_TO_ADDR
26873: GO 26955
// for j = 1 to result do
26875: LD_ADDR_VAR 0 8
26879: PUSH
26880: DOUBLE
26881: LD_INT 1
26883: DEC
26884: ST_TO_ADDR
26885: LD_VAR 0 6
26889: PUSH
26890: FOR_TO
26891: IFFALSE 26953
// begin if tmp < result [ j ] [ 2 ] then
26893: LD_VAR 0 9
26897: PUSH
26898: LD_VAR 0 6
26902: PUSH
26903: LD_VAR 0 8
26907: ARRAY
26908: PUSH
26909: LD_INT 2
26911: ARRAY
26912: LESS
26913: IFFALSE 26951
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26915: LD_ADDR_VAR 0 6
26919: PUSH
26920: LD_VAR 0 6
26924: PPUSH
26925: LD_VAR 0 8
26929: PPUSH
26930: LD_VAR 0 7
26934: PUSH
26935: LD_VAR 0 9
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PPUSH
26944: CALL_OW 2
26948: ST_TO_ADDR
// break ;
26949: GO 26953
// end ; end ;
26951: GO 26890
26953: POP
26954: POP
// end ; end ;
26955: GO 26754
26957: POP
26958: POP
// if result and not asc then
26959: LD_VAR 0 6
26963: PUSH
26964: LD_VAR 0 4
26968: NOT
26969: AND
26970: IFFALSE 27045
// begin tmp := result ;
26972: LD_ADDR_VAR 0 9
26976: PUSH
26977: LD_VAR 0 6
26981: ST_TO_ADDR
// for i = tmp downto 1 do
26982: LD_ADDR_VAR 0 7
26986: PUSH
26987: DOUBLE
26988: LD_VAR 0 9
26992: INC
26993: ST_TO_ADDR
26994: LD_INT 1
26996: PUSH
26997: FOR_DOWNTO
26998: IFFALSE 27043
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27000: LD_ADDR_VAR 0 6
27004: PUSH
27005: LD_VAR 0 6
27009: PPUSH
27010: LD_VAR 0 9
27014: PUSH
27015: LD_VAR 0 7
27019: MINUS
27020: PUSH
27021: LD_INT 1
27023: PLUS
27024: PPUSH
27025: LD_VAR 0 9
27029: PUSH
27030: LD_VAR 0 7
27034: ARRAY
27035: PPUSH
27036: CALL_OW 1
27040: ST_TO_ADDR
27041: GO 26997
27043: POP
27044: POP
// end ; tmp := [ ] ;
27045: LD_ADDR_VAR 0 9
27049: PUSH
27050: EMPTY
27051: ST_TO_ADDR
// if mode then
27052: LD_VAR 0 5
27056: IFFALSE 27125
// begin for i = 1 to result do
27058: LD_ADDR_VAR 0 7
27062: PUSH
27063: DOUBLE
27064: LD_INT 1
27066: DEC
27067: ST_TO_ADDR
27068: LD_VAR 0 6
27072: PUSH
27073: FOR_TO
27074: IFFALSE 27113
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27076: LD_ADDR_VAR 0 9
27080: PUSH
27081: LD_VAR 0 9
27085: PPUSH
27086: LD_VAR 0 7
27090: PPUSH
27091: LD_VAR 0 6
27095: PUSH
27096: LD_VAR 0 7
27100: ARRAY
27101: PUSH
27102: LD_INT 1
27104: ARRAY
27105: PPUSH
27106: CALL_OW 1
27110: ST_TO_ADDR
27111: GO 27073
27113: POP
27114: POP
// result := tmp ;
27115: LD_ADDR_VAR 0 6
27119: PUSH
27120: LD_VAR 0 9
27124: ST_TO_ADDR
// end ; end ;
27125: LD_VAR 0 6
27129: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27130: LD_INT 0
27132: PPUSH
27133: PPUSH
27134: PPUSH
27135: PPUSH
27136: PPUSH
27137: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27138: LD_ADDR_VAR 0 5
27142: PUSH
27143: LD_INT 0
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: EMPTY
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: ST_TO_ADDR
// if not x or not y then
27160: LD_VAR 0 2
27164: NOT
27165: PUSH
27166: LD_VAR 0 3
27170: NOT
27171: OR
27172: IFFALSE 27176
// exit ;
27174: GO 28828
// if not range then
27176: LD_VAR 0 4
27180: NOT
27181: IFFALSE 27191
// range := 10 ;
27183: LD_ADDR_VAR 0 4
27187: PUSH
27188: LD_INT 10
27190: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27191: LD_ADDR_VAR 0 8
27195: PUSH
27196: LD_INT 81
27198: PUSH
27199: LD_VAR 0 1
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 92
27210: PUSH
27211: LD_VAR 0 2
27215: PUSH
27216: LD_VAR 0 3
27220: PUSH
27221: LD_VAR 0 4
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 3
27234: PUSH
27235: LD_INT 21
27237: PUSH
27238: LD_INT 3
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: LIST
27253: PPUSH
27254: CALL_OW 69
27258: ST_TO_ADDR
// if not tmp then
27259: LD_VAR 0 8
27263: NOT
27264: IFFALSE 27268
// exit ;
27266: GO 28828
// for i in tmp do
27268: LD_ADDR_VAR 0 6
27272: PUSH
27273: LD_VAR 0 8
27277: PUSH
27278: FOR_IN
27279: IFFALSE 28803
// begin points := [ 0 , 0 , 0 ] ;
27281: LD_ADDR_VAR 0 9
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: ST_TO_ADDR
// bpoints := 1 ;
27300: LD_ADDR_VAR 0 10
27304: PUSH
27305: LD_INT 1
27307: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27308: LD_VAR 0 6
27312: PPUSH
27313: CALL_OW 247
27317: PUSH
27318: LD_INT 1
27320: DOUBLE
27321: EQUAL
27322: IFTRUE 27326
27324: GO 27904
27326: POP
// begin if GetClass ( i ) = 1 then
27327: LD_VAR 0 6
27331: PPUSH
27332: CALL_OW 257
27336: PUSH
27337: LD_INT 1
27339: EQUAL
27340: IFFALSE 27361
// points := [ 10 , 5 , 3 ] ;
27342: LD_ADDR_VAR 0 9
27346: PUSH
27347: LD_INT 10
27349: PUSH
27350: LD_INT 5
27352: PUSH
27353: LD_INT 3
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: LIST
27360: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27361: LD_VAR 0 6
27365: PPUSH
27366: CALL_OW 257
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 3
27376: PUSH
27377: LD_INT 4
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: LIST
27384: IN
27385: IFFALSE 27406
// points := [ 3 , 2 , 1 ] ;
27387: LD_ADDR_VAR 0 9
27391: PUSH
27392: LD_INT 3
27394: PUSH
27395: LD_INT 2
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27406: LD_VAR 0 6
27410: PPUSH
27411: CALL_OW 257
27415: PUSH
27416: LD_INT 5
27418: EQUAL
27419: IFFALSE 27440
// points := [ 130 , 5 , 2 ] ;
27421: LD_ADDR_VAR 0 9
27425: PUSH
27426: LD_INT 130
27428: PUSH
27429: LD_INT 5
27431: PUSH
27432: LD_INT 2
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27440: LD_VAR 0 6
27444: PPUSH
27445: CALL_OW 257
27449: PUSH
27450: LD_INT 8
27452: EQUAL
27453: IFFALSE 27474
// points := [ 35 , 35 , 30 ] ;
27455: LD_ADDR_VAR 0 9
27459: PUSH
27460: LD_INT 35
27462: PUSH
27463: LD_INT 35
27465: PUSH
27466: LD_INT 30
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27474: LD_VAR 0 6
27478: PPUSH
27479: CALL_OW 257
27483: PUSH
27484: LD_INT 9
27486: EQUAL
27487: IFFALSE 27508
// points := [ 20 , 55 , 40 ] ;
27489: LD_ADDR_VAR 0 9
27493: PUSH
27494: LD_INT 20
27496: PUSH
27497: LD_INT 55
27499: PUSH
27500: LD_INT 40
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27508: LD_VAR 0 6
27512: PPUSH
27513: CALL_OW 257
27517: PUSH
27518: LD_INT 12
27520: PUSH
27521: LD_INT 16
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: IN
27528: IFFALSE 27549
// points := [ 5 , 3 , 2 ] ;
27530: LD_ADDR_VAR 0 9
27534: PUSH
27535: LD_INT 5
27537: PUSH
27538: LD_INT 3
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27549: LD_VAR 0 6
27553: PPUSH
27554: CALL_OW 257
27558: PUSH
27559: LD_INT 17
27561: EQUAL
27562: IFFALSE 27583
// points := [ 100 , 50 , 75 ] ;
27564: LD_ADDR_VAR 0 9
27568: PUSH
27569: LD_INT 100
27571: PUSH
27572: LD_INT 50
27574: PUSH
27575: LD_INT 75
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27583: LD_VAR 0 6
27587: PPUSH
27588: CALL_OW 257
27592: PUSH
27593: LD_INT 15
27595: EQUAL
27596: IFFALSE 27617
// points := [ 10 , 5 , 3 ] ;
27598: LD_ADDR_VAR 0 9
27602: PUSH
27603: LD_INT 10
27605: PUSH
27606: LD_INT 5
27608: PUSH
27609: LD_INT 3
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: LIST
27616: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27617: LD_VAR 0 6
27621: PPUSH
27622: CALL_OW 257
27626: PUSH
27627: LD_INT 14
27629: EQUAL
27630: IFFALSE 27651
// points := [ 10 , 0 , 0 ] ;
27632: LD_ADDR_VAR 0 9
27636: PUSH
27637: LD_INT 10
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27651: LD_VAR 0 6
27655: PPUSH
27656: CALL_OW 257
27660: PUSH
27661: LD_INT 11
27663: EQUAL
27664: IFFALSE 27685
// points := [ 30 , 10 , 5 ] ;
27666: LD_ADDR_VAR 0 9
27670: PUSH
27671: LD_INT 30
27673: PUSH
27674: LD_INT 10
27676: PUSH
27677: LD_INT 5
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27685: LD_VAR 0 1
27689: PPUSH
27690: LD_INT 5
27692: PPUSH
27693: CALL_OW 321
27697: PUSH
27698: LD_INT 2
27700: EQUAL
27701: IFFALSE 27718
// bpoints := bpoints * 1.8 ;
27703: LD_ADDR_VAR 0 10
27707: PUSH
27708: LD_VAR 0 10
27712: PUSH
27713: LD_REAL  1.80000000000000E+0000
27716: MUL
27717: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27718: LD_VAR 0 6
27722: PPUSH
27723: CALL_OW 257
27727: PUSH
27728: LD_INT 1
27730: PUSH
27731: LD_INT 2
27733: PUSH
27734: LD_INT 3
27736: PUSH
27737: LD_INT 4
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: IN
27746: PUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: LD_INT 51
27754: PPUSH
27755: CALL_OW 321
27759: PUSH
27760: LD_INT 2
27762: EQUAL
27763: AND
27764: IFFALSE 27781
// bpoints := bpoints * 1.2 ;
27766: LD_ADDR_VAR 0 10
27770: PUSH
27771: LD_VAR 0 10
27775: PUSH
27776: LD_REAL  1.20000000000000E+0000
27779: MUL
27780: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27781: LD_VAR 0 6
27785: PPUSH
27786: CALL_OW 257
27790: PUSH
27791: LD_INT 5
27793: PUSH
27794: LD_INT 7
27796: PUSH
27797: LD_INT 9
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: IN
27805: PUSH
27806: LD_VAR 0 1
27810: PPUSH
27811: LD_INT 52
27813: PPUSH
27814: CALL_OW 321
27818: PUSH
27819: LD_INT 2
27821: EQUAL
27822: AND
27823: IFFALSE 27840
// bpoints := bpoints * 1.5 ;
27825: LD_ADDR_VAR 0 10
27829: PUSH
27830: LD_VAR 0 10
27834: PUSH
27835: LD_REAL  1.50000000000000E+0000
27838: MUL
27839: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27840: LD_VAR 0 1
27844: PPUSH
27845: LD_INT 66
27847: PPUSH
27848: CALL_OW 321
27852: PUSH
27853: LD_INT 2
27855: EQUAL
27856: IFFALSE 27873
// bpoints := bpoints * 1.1 ;
27858: LD_ADDR_VAR 0 10
27862: PUSH
27863: LD_VAR 0 10
27867: PUSH
27868: LD_REAL  1.10000000000000E+0000
27871: MUL
27872: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27873: LD_ADDR_VAR 0 10
27877: PUSH
27878: LD_VAR 0 10
27882: PUSH
27883: LD_VAR 0 6
27887: PPUSH
27888: LD_INT 1
27890: PPUSH
27891: CALL_OW 259
27895: PUSH
27896: LD_REAL  1.15000000000000E+0000
27899: MUL
27900: MUL
27901: ST_TO_ADDR
// end ; unit_vehicle :
27902: GO 28732
27904: LD_INT 2
27906: DOUBLE
27907: EQUAL
27908: IFTRUE 27912
27910: GO 28720
27912: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27913: LD_VAR 0 6
27917: PPUSH
27918: CALL_OW 264
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: LD_INT 42
27928: PUSH
27929: LD_INT 24
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: IN
27937: IFFALSE 27958
// points := [ 25 , 5 , 3 ] ;
27939: LD_ADDR_VAR 0 9
27943: PUSH
27944: LD_INT 25
27946: PUSH
27947: LD_INT 5
27949: PUSH
27950: LD_INT 3
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27958: LD_VAR 0 6
27962: PPUSH
27963: CALL_OW 264
27967: PUSH
27968: LD_INT 4
27970: PUSH
27971: LD_INT 43
27973: PUSH
27974: LD_INT 25
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: LIST
27981: IN
27982: IFFALSE 28003
// points := [ 40 , 15 , 5 ] ;
27984: LD_ADDR_VAR 0 9
27988: PUSH
27989: LD_INT 40
27991: PUSH
27992: LD_INT 15
27994: PUSH
27995: LD_INT 5
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: LIST
28002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28003: LD_VAR 0 6
28007: PPUSH
28008: CALL_OW 264
28012: PUSH
28013: LD_INT 3
28015: PUSH
28016: LD_INT 23
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: IN
28023: IFFALSE 28044
// points := [ 7 , 25 , 8 ] ;
28025: LD_ADDR_VAR 0 9
28029: PUSH
28030: LD_INT 7
28032: PUSH
28033: LD_INT 25
28035: PUSH
28036: LD_INT 8
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28044: LD_VAR 0 6
28048: PPUSH
28049: CALL_OW 264
28053: PUSH
28054: LD_INT 5
28056: PUSH
28057: LD_INT 27
28059: PUSH
28060: LD_INT 44
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: IN
28068: IFFALSE 28089
// points := [ 14 , 50 , 16 ] ;
28070: LD_ADDR_VAR 0 9
28074: PUSH
28075: LD_INT 14
28077: PUSH
28078: LD_INT 50
28080: PUSH
28081: LD_INT 16
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28089: LD_VAR 0 6
28093: PPUSH
28094: CALL_OW 264
28098: PUSH
28099: LD_INT 6
28101: PUSH
28102: LD_INT 46
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: IN
28109: IFFALSE 28130
// points := [ 32 , 120 , 70 ] ;
28111: LD_ADDR_VAR 0 9
28115: PUSH
28116: LD_INT 32
28118: PUSH
28119: LD_INT 120
28121: PUSH
28122: LD_INT 70
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: LIST
28129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28130: LD_VAR 0 6
28134: PPUSH
28135: CALL_OW 264
28139: PUSH
28140: LD_INT 7
28142: PUSH
28143: LD_INT 28
28145: PUSH
28146: LD_INT 45
28148: PUSH
28149: LD_EXP 131
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: IN
28160: IFFALSE 28181
// points := [ 35 , 20 , 45 ] ;
28162: LD_ADDR_VAR 0 9
28166: PUSH
28167: LD_INT 35
28169: PUSH
28170: LD_INT 20
28172: PUSH
28173: LD_INT 45
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: LIST
28180: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28181: LD_VAR 0 6
28185: PPUSH
28186: CALL_OW 264
28190: PUSH
28191: LD_INT 47
28193: PUSH
28194: EMPTY
28195: LIST
28196: IN
28197: IFFALSE 28218
// points := [ 67 , 45 , 75 ] ;
28199: LD_ADDR_VAR 0 9
28203: PUSH
28204: LD_INT 67
28206: PUSH
28207: LD_INT 45
28209: PUSH
28210: LD_INT 75
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28218: LD_VAR 0 6
28222: PPUSH
28223: CALL_OW 264
28227: PUSH
28228: LD_INT 26
28230: PUSH
28231: EMPTY
28232: LIST
28233: IN
28234: IFFALSE 28255
// points := [ 120 , 30 , 80 ] ;
28236: LD_ADDR_VAR 0 9
28240: PUSH
28241: LD_INT 120
28243: PUSH
28244: LD_INT 30
28246: PUSH
28247: LD_INT 80
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28255: LD_VAR 0 6
28259: PPUSH
28260: CALL_OW 264
28264: PUSH
28265: LD_INT 22
28267: PUSH
28268: EMPTY
28269: LIST
28270: IN
28271: IFFALSE 28292
// points := [ 40 , 1 , 1 ] ;
28273: LD_ADDR_VAR 0 9
28277: PUSH
28278: LD_INT 40
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: LIST
28291: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28292: LD_VAR 0 6
28296: PPUSH
28297: CALL_OW 264
28301: PUSH
28302: LD_INT 29
28304: PUSH
28305: EMPTY
28306: LIST
28307: IN
28308: IFFALSE 28329
// points := [ 70 , 200 , 400 ] ;
28310: LD_ADDR_VAR 0 9
28314: PUSH
28315: LD_INT 70
28317: PUSH
28318: LD_INT 200
28320: PUSH
28321: LD_INT 400
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: LIST
28328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28329: LD_VAR 0 6
28333: PPUSH
28334: CALL_OW 264
28338: PUSH
28339: LD_INT 14
28341: PUSH
28342: LD_INT 53
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: IN
28349: IFFALSE 28370
// points := [ 40 , 10 , 20 ] ;
28351: LD_ADDR_VAR 0 9
28355: PUSH
28356: LD_INT 40
28358: PUSH
28359: LD_INT 10
28361: PUSH
28362: LD_INT 20
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: LIST
28369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28370: LD_VAR 0 6
28374: PPUSH
28375: CALL_OW 264
28379: PUSH
28380: LD_INT 9
28382: PUSH
28383: EMPTY
28384: LIST
28385: IN
28386: IFFALSE 28407
// points := [ 5 , 70 , 20 ] ;
28388: LD_ADDR_VAR 0 9
28392: PUSH
28393: LD_INT 5
28395: PUSH
28396: LD_INT 70
28398: PUSH
28399: LD_INT 20
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: LIST
28406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28407: LD_VAR 0 6
28411: PPUSH
28412: CALL_OW 264
28416: PUSH
28417: LD_INT 10
28419: PUSH
28420: EMPTY
28421: LIST
28422: IN
28423: IFFALSE 28444
// points := [ 35 , 110 , 70 ] ;
28425: LD_ADDR_VAR 0 9
28429: PUSH
28430: LD_INT 35
28432: PUSH
28433: LD_INT 110
28435: PUSH
28436: LD_INT 70
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28444: LD_VAR 0 6
28448: PPUSH
28449: CALL_OW 265
28453: PUSH
28454: LD_INT 25
28456: EQUAL
28457: IFFALSE 28478
// points := [ 80 , 65 , 100 ] ;
28459: LD_ADDR_VAR 0 9
28463: PUSH
28464: LD_INT 80
28466: PUSH
28467: LD_INT 65
28469: PUSH
28470: LD_INT 100
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28478: LD_VAR 0 6
28482: PPUSH
28483: CALL_OW 263
28487: PUSH
28488: LD_INT 1
28490: EQUAL
28491: IFFALSE 28526
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28493: LD_ADDR_VAR 0 10
28497: PUSH
28498: LD_VAR 0 10
28502: PUSH
28503: LD_VAR 0 6
28507: PPUSH
28508: CALL_OW 311
28512: PPUSH
28513: LD_INT 3
28515: PPUSH
28516: CALL_OW 259
28520: PUSH
28521: LD_INT 4
28523: MUL
28524: MUL
28525: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28526: LD_VAR 0 6
28530: PPUSH
28531: CALL_OW 263
28535: PUSH
28536: LD_INT 2
28538: EQUAL
28539: IFFALSE 28590
// begin j := IsControledBy ( i ) ;
28541: LD_ADDR_VAR 0 7
28545: PUSH
28546: LD_VAR 0 6
28550: PPUSH
28551: CALL_OW 312
28555: ST_TO_ADDR
// if j then
28556: LD_VAR 0 7
28560: IFFALSE 28590
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28562: LD_ADDR_VAR 0 10
28566: PUSH
28567: LD_VAR 0 10
28571: PUSH
28572: LD_VAR 0 7
28576: PPUSH
28577: LD_INT 3
28579: PPUSH
28580: CALL_OW 259
28584: PUSH
28585: LD_INT 3
28587: MUL
28588: MUL
28589: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28590: LD_VAR 0 6
28594: PPUSH
28595: CALL_OW 264
28599: PUSH
28600: LD_INT 5
28602: PUSH
28603: LD_INT 6
28605: PUSH
28606: LD_INT 46
28608: PUSH
28609: LD_INT 44
28611: PUSH
28612: LD_INT 47
28614: PUSH
28615: LD_INT 45
28617: PUSH
28618: LD_INT 28
28620: PUSH
28621: LD_INT 7
28623: PUSH
28624: LD_INT 27
28626: PUSH
28627: LD_INT 29
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: IN
28642: PUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: LD_INT 52
28650: PPUSH
28651: CALL_OW 321
28655: PUSH
28656: LD_INT 2
28658: EQUAL
28659: AND
28660: IFFALSE 28677
// bpoints := bpoints * 1.2 ;
28662: LD_ADDR_VAR 0 10
28666: PUSH
28667: LD_VAR 0 10
28671: PUSH
28672: LD_REAL  1.20000000000000E+0000
28675: MUL
28676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28677: LD_VAR 0 6
28681: PPUSH
28682: CALL_OW 264
28686: PUSH
28687: LD_INT 6
28689: PUSH
28690: LD_INT 46
28692: PUSH
28693: LD_INT 47
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: IN
28701: IFFALSE 28718
// bpoints := bpoints * 1.2 ;
28703: LD_ADDR_VAR 0 10
28707: PUSH
28708: LD_VAR 0 10
28712: PUSH
28713: LD_REAL  1.20000000000000E+0000
28716: MUL
28717: ST_TO_ADDR
// end ; unit_building :
28718: GO 28732
28720: LD_INT 3
28722: DOUBLE
28723: EQUAL
28724: IFTRUE 28728
28726: GO 28731
28728: POP
// ; end ;
28729: GO 28732
28731: POP
// for j = 1 to 3 do
28732: LD_ADDR_VAR 0 7
28736: PUSH
28737: DOUBLE
28738: LD_INT 1
28740: DEC
28741: ST_TO_ADDR
28742: LD_INT 3
28744: PUSH
28745: FOR_TO
28746: IFFALSE 28799
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28748: LD_ADDR_VAR 0 5
28752: PUSH
28753: LD_VAR 0 5
28757: PPUSH
28758: LD_VAR 0 7
28762: PPUSH
28763: LD_VAR 0 5
28767: PUSH
28768: LD_VAR 0 7
28772: ARRAY
28773: PUSH
28774: LD_VAR 0 9
28778: PUSH
28779: LD_VAR 0 7
28783: ARRAY
28784: PUSH
28785: LD_VAR 0 10
28789: MUL
28790: PLUS
28791: PPUSH
28792: CALL_OW 1
28796: ST_TO_ADDR
28797: GO 28745
28799: POP
28800: POP
// end ;
28801: GO 27278
28803: POP
28804: POP
// result := Replace ( result , 4 , tmp ) ;
28805: LD_ADDR_VAR 0 5
28809: PUSH
28810: LD_VAR 0 5
28814: PPUSH
28815: LD_INT 4
28817: PPUSH
28818: LD_VAR 0 8
28822: PPUSH
28823: CALL_OW 1
28827: ST_TO_ADDR
// end ;
28828: LD_VAR 0 5
28832: RET
// export function DangerAtRange ( unit , range ) ; begin
28833: LD_INT 0
28835: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28836: LD_ADDR_VAR 0 3
28840: PUSH
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 255
28850: PPUSH
28851: LD_VAR 0 1
28855: PPUSH
28856: CALL_OW 250
28860: PPUSH
28861: LD_VAR 0 1
28865: PPUSH
28866: CALL_OW 251
28870: PPUSH
28871: LD_VAR 0 2
28875: PPUSH
28876: CALL 27130 0 4
28880: ST_TO_ADDR
// end ;
28881: LD_VAR 0 3
28885: RET
// export function DangerInArea ( side , area ) ; begin
28886: LD_INT 0
28888: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28889: LD_ADDR_VAR 0 3
28893: PUSH
28894: LD_VAR 0 2
28898: PPUSH
28899: LD_INT 81
28901: PUSH
28902: LD_VAR 0 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PPUSH
28911: CALL_OW 70
28915: ST_TO_ADDR
// end ;
28916: LD_VAR 0 3
28920: RET
// export function IsExtension ( b ) ; begin
28921: LD_INT 0
28923: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28924: LD_ADDR_VAR 0 2
28928: PUSH
28929: LD_VAR 0 1
28933: PUSH
28934: LD_INT 23
28936: PUSH
28937: LD_INT 20
28939: PUSH
28940: LD_INT 22
28942: PUSH
28943: LD_INT 17
28945: PUSH
28946: LD_INT 24
28948: PUSH
28949: LD_INT 21
28951: PUSH
28952: LD_INT 19
28954: PUSH
28955: LD_INT 16
28957: PUSH
28958: LD_INT 25
28960: PUSH
28961: LD_INT 18
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: IN
28976: ST_TO_ADDR
// end ;
28977: LD_VAR 0 2
28981: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28982: LD_INT 0
28984: PPUSH
28985: PPUSH
28986: PPUSH
// result := [ ] ;
28987: LD_ADDR_VAR 0 4
28991: PUSH
28992: EMPTY
28993: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28994: LD_ADDR_VAR 0 5
28998: PUSH
28999: LD_VAR 0 2
29003: PPUSH
29004: LD_INT 21
29006: PUSH
29007: LD_INT 3
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PPUSH
29014: CALL_OW 70
29018: ST_TO_ADDR
// if not tmp then
29019: LD_VAR 0 5
29023: NOT
29024: IFFALSE 29028
// exit ;
29026: GO 29092
// if checkLink then
29028: LD_VAR 0 3
29032: IFFALSE 29082
// begin for i in tmp do
29034: LD_ADDR_VAR 0 6
29038: PUSH
29039: LD_VAR 0 5
29043: PUSH
29044: FOR_IN
29045: IFFALSE 29080
// if GetBase ( i ) <> base then
29047: LD_VAR 0 6
29051: PPUSH
29052: CALL_OW 274
29056: PUSH
29057: LD_VAR 0 1
29061: NONEQUAL
29062: IFFALSE 29078
// ComLinkToBase ( base , i ) ;
29064: LD_VAR 0 1
29068: PPUSH
29069: LD_VAR 0 6
29073: PPUSH
29074: CALL_OW 169
29078: GO 29044
29080: POP
29081: POP
// end ; result := tmp ;
29082: LD_ADDR_VAR 0 4
29086: PUSH
29087: LD_VAR 0 5
29091: ST_TO_ADDR
// end ;
29092: LD_VAR 0 4
29096: RET
// export function ComComplete ( units , b ) ; var i ; begin
29097: LD_INT 0
29099: PPUSH
29100: PPUSH
// if not units then
29101: LD_VAR 0 1
29105: NOT
29106: IFFALSE 29110
// exit ;
29108: GO 29200
// for i in units do
29110: LD_ADDR_VAR 0 4
29114: PUSH
29115: LD_VAR 0 1
29119: PUSH
29120: FOR_IN
29121: IFFALSE 29198
// if BuildingStatus ( b ) = bs_build then
29123: LD_VAR 0 2
29127: PPUSH
29128: CALL_OW 461
29132: PUSH
29133: LD_INT 1
29135: EQUAL
29136: IFFALSE 29196
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29138: LD_VAR 0 4
29142: PPUSH
29143: LD_STRING h
29145: PUSH
29146: LD_VAR 0 2
29150: PPUSH
29151: CALL_OW 250
29155: PUSH
29156: LD_VAR 0 2
29160: PPUSH
29161: CALL_OW 251
29165: PUSH
29166: LD_VAR 0 2
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: PUSH
29189: EMPTY
29190: LIST
29191: PPUSH
29192: CALL_OW 446
29196: GO 29120
29198: POP
29199: POP
// end ;
29200: LD_VAR 0 3
29204: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29205: LD_INT 0
29207: PPUSH
29208: PPUSH
29209: PPUSH
29210: PPUSH
29211: PPUSH
29212: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29213: LD_VAR 0 1
29217: NOT
29218: PUSH
29219: LD_VAR 0 1
29223: PPUSH
29224: CALL_OW 263
29228: PUSH
29229: LD_INT 2
29231: NONEQUAL
29232: OR
29233: IFFALSE 29237
// exit ;
29235: GO 29553
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29237: LD_ADDR_VAR 0 6
29241: PUSH
29242: LD_INT 22
29244: PUSH
29245: LD_VAR 0 1
29249: PPUSH
29250: CALL_OW 255
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: LD_INT 30
29264: PUSH
29265: LD_INT 36
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 34
29274: PUSH
29275: LD_INT 31
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PPUSH
29291: CALL_OW 69
29295: ST_TO_ADDR
// if not tmp then
29296: LD_VAR 0 6
29300: NOT
29301: IFFALSE 29305
// exit ;
29303: GO 29553
// result := [ ] ;
29305: LD_ADDR_VAR 0 2
29309: PUSH
29310: EMPTY
29311: ST_TO_ADDR
// for i in tmp do
29312: LD_ADDR_VAR 0 3
29316: PUSH
29317: LD_VAR 0 6
29321: PUSH
29322: FOR_IN
29323: IFFALSE 29394
// begin t := UnitsInside ( i ) ;
29325: LD_ADDR_VAR 0 4
29329: PUSH
29330: LD_VAR 0 3
29334: PPUSH
29335: CALL_OW 313
29339: ST_TO_ADDR
// if t then
29340: LD_VAR 0 4
29344: IFFALSE 29392
// for j in t do
29346: LD_ADDR_VAR 0 7
29350: PUSH
29351: LD_VAR 0 4
29355: PUSH
29356: FOR_IN
29357: IFFALSE 29390
// result := Replace ( result , result + 1 , j ) ;
29359: LD_ADDR_VAR 0 2
29363: PUSH
29364: LD_VAR 0 2
29368: PPUSH
29369: LD_VAR 0 2
29373: PUSH
29374: LD_INT 1
29376: PLUS
29377: PPUSH
29378: LD_VAR 0 7
29382: PPUSH
29383: CALL_OW 1
29387: ST_TO_ADDR
29388: GO 29356
29390: POP
29391: POP
// end ;
29392: GO 29322
29394: POP
29395: POP
// if not result then
29396: LD_VAR 0 2
29400: NOT
29401: IFFALSE 29405
// exit ;
29403: GO 29553
// mech := result [ 1 ] ;
29405: LD_ADDR_VAR 0 5
29409: PUSH
29410: LD_VAR 0 2
29414: PUSH
29415: LD_INT 1
29417: ARRAY
29418: ST_TO_ADDR
// if result > 1 then
29419: LD_VAR 0 2
29423: PUSH
29424: LD_INT 1
29426: GREATER
29427: IFFALSE 29539
// begin for i = 2 to result do
29429: LD_ADDR_VAR 0 3
29433: PUSH
29434: DOUBLE
29435: LD_INT 2
29437: DEC
29438: ST_TO_ADDR
29439: LD_VAR 0 2
29443: PUSH
29444: FOR_TO
29445: IFFALSE 29537
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29447: LD_ADDR_VAR 0 4
29451: PUSH
29452: LD_VAR 0 2
29456: PUSH
29457: LD_VAR 0 3
29461: ARRAY
29462: PPUSH
29463: LD_INT 3
29465: PPUSH
29466: CALL_OW 259
29470: PUSH
29471: LD_VAR 0 2
29475: PUSH
29476: LD_VAR 0 3
29480: ARRAY
29481: PPUSH
29482: CALL_OW 432
29486: MINUS
29487: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29488: LD_VAR 0 4
29492: PUSH
29493: LD_VAR 0 5
29497: PPUSH
29498: LD_INT 3
29500: PPUSH
29501: CALL_OW 259
29505: PUSH
29506: LD_VAR 0 5
29510: PPUSH
29511: CALL_OW 432
29515: MINUS
29516: GREATEREQUAL
29517: IFFALSE 29535
// mech := result [ i ] ;
29519: LD_ADDR_VAR 0 5
29523: PUSH
29524: LD_VAR 0 2
29528: PUSH
29529: LD_VAR 0 3
29533: ARRAY
29534: ST_TO_ADDR
// end ;
29535: GO 29444
29537: POP
29538: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29539: LD_VAR 0 1
29543: PPUSH
29544: LD_VAR 0 5
29548: PPUSH
29549: CALL_OW 135
// end ;
29553: LD_VAR 0 2
29557: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29558: LD_INT 0
29560: PPUSH
29561: PPUSH
29562: PPUSH
29563: PPUSH
29564: PPUSH
29565: PPUSH
29566: PPUSH
29567: PPUSH
29568: PPUSH
29569: PPUSH
29570: PPUSH
29571: PPUSH
29572: PPUSH
// result := [ ] ;
29573: LD_ADDR_VAR 0 7
29577: PUSH
29578: EMPTY
29579: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29580: LD_VAR 0 1
29584: PPUSH
29585: CALL_OW 266
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: IN
29600: NOT
29601: IFFALSE 29605
// exit ;
29603: GO 31239
// if name then
29605: LD_VAR 0 3
29609: IFFALSE 29625
// SetBName ( base_dep , name ) ;
29611: LD_VAR 0 1
29615: PPUSH
29616: LD_VAR 0 3
29620: PPUSH
29621: CALL_OW 500
// base := GetBase ( base_dep ) ;
29625: LD_ADDR_VAR 0 15
29629: PUSH
29630: LD_VAR 0 1
29634: PPUSH
29635: CALL_OW 274
29639: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29640: LD_ADDR_VAR 0 16
29644: PUSH
29645: LD_VAR 0 1
29649: PPUSH
29650: CALL_OW 255
29654: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29655: LD_ADDR_VAR 0 17
29659: PUSH
29660: LD_VAR 0 1
29664: PPUSH
29665: CALL_OW 248
29669: ST_TO_ADDR
// if sources then
29670: LD_VAR 0 5
29674: IFFALSE 29721
// for i = 1 to 3 do
29676: LD_ADDR_VAR 0 8
29680: PUSH
29681: DOUBLE
29682: LD_INT 1
29684: DEC
29685: ST_TO_ADDR
29686: LD_INT 3
29688: PUSH
29689: FOR_TO
29690: IFFALSE 29719
// AddResourceType ( base , i , sources [ i ] ) ;
29692: LD_VAR 0 15
29696: PPUSH
29697: LD_VAR 0 8
29701: PPUSH
29702: LD_VAR 0 5
29706: PUSH
29707: LD_VAR 0 8
29711: ARRAY
29712: PPUSH
29713: CALL_OW 276
29717: GO 29689
29719: POP
29720: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29721: LD_ADDR_VAR 0 18
29725: PUSH
29726: LD_VAR 0 15
29730: PPUSH
29731: LD_VAR 0 2
29735: PPUSH
29736: LD_INT 1
29738: PPUSH
29739: CALL 28982 0 3
29743: ST_TO_ADDR
// InitHc ;
29744: CALL_OW 19
// InitUc ;
29748: CALL_OW 18
// uc_side := side ;
29752: LD_ADDR_OWVAR 20
29756: PUSH
29757: LD_VAR 0 16
29761: ST_TO_ADDR
// uc_nation := nation ;
29762: LD_ADDR_OWVAR 21
29766: PUSH
29767: LD_VAR 0 17
29771: ST_TO_ADDR
// if buildings then
29772: LD_VAR 0 18
29776: IFFALSE 31098
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29778: LD_ADDR_VAR 0 19
29782: PUSH
29783: LD_VAR 0 18
29787: PPUSH
29788: LD_INT 2
29790: PUSH
29791: LD_INT 30
29793: PUSH
29794: LD_INT 29
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 30
29803: PUSH
29804: LD_INT 30
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: PPUSH
29816: CALL_OW 72
29820: ST_TO_ADDR
// if tmp then
29821: LD_VAR 0 19
29825: IFFALSE 29873
// for i in tmp do
29827: LD_ADDR_VAR 0 8
29831: PUSH
29832: LD_VAR 0 19
29836: PUSH
29837: FOR_IN
29838: IFFALSE 29871
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29840: LD_VAR 0 8
29844: PPUSH
29845: CALL_OW 250
29849: PPUSH
29850: LD_VAR 0 8
29854: PPUSH
29855: CALL_OW 251
29859: PPUSH
29860: LD_VAR 0 16
29864: PPUSH
29865: CALL_OW 441
29869: GO 29837
29871: POP
29872: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29873: LD_VAR 0 18
29877: PPUSH
29878: LD_INT 2
29880: PUSH
29881: LD_INT 30
29883: PUSH
29884: LD_INT 32
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 30
29893: PUSH
29894: LD_INT 33
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: LIST
29905: PPUSH
29906: CALL_OW 72
29910: IFFALSE 29998
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29912: LD_ADDR_VAR 0 8
29916: PUSH
29917: LD_VAR 0 18
29921: PPUSH
29922: LD_INT 2
29924: PUSH
29925: LD_INT 30
29927: PUSH
29928: LD_INT 32
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 30
29937: PUSH
29938: LD_INT 33
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: PPUSH
29950: CALL_OW 72
29954: PUSH
29955: FOR_IN
29956: IFFALSE 29996
// begin if not GetBWeapon ( i ) then
29958: LD_VAR 0 8
29962: PPUSH
29963: CALL_OW 269
29967: NOT
29968: IFFALSE 29994
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29970: LD_VAR 0 8
29974: PPUSH
29975: LD_VAR 0 8
29979: PPUSH
29980: LD_VAR 0 2
29984: PPUSH
29985: CALL 31244 0 2
29989: PPUSH
29990: CALL_OW 431
// end ;
29994: GO 29955
29996: POP
29997: POP
// end ; for i = 1 to personel do
29998: LD_ADDR_VAR 0 8
30002: PUSH
30003: DOUBLE
30004: LD_INT 1
30006: DEC
30007: ST_TO_ADDR
30008: LD_VAR 0 6
30012: PUSH
30013: FOR_TO
30014: IFFALSE 31078
// begin if i > 4 then
30016: LD_VAR 0 8
30020: PUSH
30021: LD_INT 4
30023: GREATER
30024: IFFALSE 30028
// break ;
30026: GO 31078
// case i of 1 :
30028: LD_VAR 0 8
30032: PUSH
30033: LD_INT 1
30035: DOUBLE
30036: EQUAL
30037: IFTRUE 30041
30039: GO 30121
30041: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30042: LD_ADDR_VAR 0 12
30046: PUSH
30047: LD_VAR 0 18
30051: PPUSH
30052: LD_INT 22
30054: PUSH
30055: LD_VAR 0 16
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 58
30066: PUSH
30067: EMPTY
30068: LIST
30069: PUSH
30070: LD_INT 2
30072: PUSH
30073: LD_INT 30
30075: PUSH
30076: LD_INT 32
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 30
30085: PUSH
30086: LD_INT 4
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 30
30095: PUSH
30096: LD_INT 5
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 72
30118: ST_TO_ADDR
30119: GO 30343
30121: LD_INT 2
30123: DOUBLE
30124: EQUAL
30125: IFTRUE 30129
30127: GO 30191
30129: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30130: LD_ADDR_VAR 0 12
30134: PUSH
30135: LD_VAR 0 18
30139: PPUSH
30140: LD_INT 22
30142: PUSH
30143: LD_VAR 0 16
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 2
30154: PUSH
30155: LD_INT 30
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 30
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: LIST
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PPUSH
30184: CALL_OW 72
30188: ST_TO_ADDR
30189: GO 30343
30191: LD_INT 3
30193: DOUBLE
30194: EQUAL
30195: IFTRUE 30199
30197: GO 30261
30199: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30200: LD_ADDR_VAR 0 12
30204: PUSH
30205: LD_VAR 0 18
30209: PPUSH
30210: LD_INT 22
30212: PUSH
30213: LD_VAR 0 16
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 30
30227: PUSH
30228: LD_INT 2
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 30
30237: PUSH
30238: LD_INT 3
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PPUSH
30254: CALL_OW 72
30258: ST_TO_ADDR
30259: GO 30343
30261: LD_INT 4
30263: DOUBLE
30264: EQUAL
30265: IFTRUE 30269
30267: GO 30342
30269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30270: LD_ADDR_VAR 0 12
30274: PUSH
30275: LD_VAR 0 18
30279: PPUSH
30280: LD_INT 22
30282: PUSH
30283: LD_VAR 0 16
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 30
30297: PUSH
30298: LD_INT 6
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 30
30307: PUSH
30308: LD_INT 7
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 30
30317: PUSH
30318: LD_INT 8
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PPUSH
30335: CALL_OW 72
30339: ST_TO_ADDR
30340: GO 30343
30342: POP
// if i = 1 then
30343: LD_VAR 0 8
30347: PUSH
30348: LD_INT 1
30350: EQUAL
30351: IFFALSE 30462
// begin tmp := [ ] ;
30353: LD_ADDR_VAR 0 19
30357: PUSH
30358: EMPTY
30359: ST_TO_ADDR
// for j in f do
30360: LD_ADDR_VAR 0 9
30364: PUSH
30365: LD_VAR 0 12
30369: PUSH
30370: FOR_IN
30371: IFFALSE 30444
// if GetBType ( j ) = b_bunker then
30373: LD_VAR 0 9
30377: PPUSH
30378: CALL_OW 266
30382: PUSH
30383: LD_INT 32
30385: EQUAL
30386: IFFALSE 30413
// tmp := Insert ( tmp , 1 , j ) else
30388: LD_ADDR_VAR 0 19
30392: PUSH
30393: LD_VAR 0 19
30397: PPUSH
30398: LD_INT 1
30400: PPUSH
30401: LD_VAR 0 9
30405: PPUSH
30406: CALL_OW 2
30410: ST_TO_ADDR
30411: GO 30442
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30413: LD_ADDR_VAR 0 19
30417: PUSH
30418: LD_VAR 0 19
30422: PPUSH
30423: LD_VAR 0 19
30427: PUSH
30428: LD_INT 1
30430: PLUS
30431: PPUSH
30432: LD_VAR 0 9
30436: PPUSH
30437: CALL_OW 2
30441: ST_TO_ADDR
30442: GO 30370
30444: POP
30445: POP
// if tmp then
30446: LD_VAR 0 19
30450: IFFALSE 30462
// f := tmp ;
30452: LD_ADDR_VAR 0 12
30456: PUSH
30457: LD_VAR 0 19
30461: ST_TO_ADDR
// end ; x := personel [ i ] ;
30462: LD_ADDR_VAR 0 13
30466: PUSH
30467: LD_VAR 0 6
30471: PUSH
30472: LD_VAR 0 8
30476: ARRAY
30477: ST_TO_ADDR
// if x = - 1 then
30478: LD_VAR 0 13
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: EQUAL
30487: IFFALSE 30696
// begin for j in f do
30489: LD_ADDR_VAR 0 9
30493: PUSH
30494: LD_VAR 0 12
30498: PUSH
30499: FOR_IN
30500: IFFALSE 30692
// repeat InitHc ;
30502: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30506: LD_VAR 0 9
30510: PPUSH
30511: CALL_OW 266
30515: PUSH
30516: LD_INT 5
30518: EQUAL
30519: IFFALSE 30589
// begin if UnitsInside ( j ) < 3 then
30521: LD_VAR 0 9
30525: PPUSH
30526: CALL_OW 313
30530: PUSH
30531: LD_INT 3
30533: LESS
30534: IFFALSE 30570
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30536: LD_INT 0
30538: PPUSH
30539: LD_INT 5
30541: PUSH
30542: LD_INT 8
30544: PUSH
30545: LD_INT 9
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: PUSH
30553: LD_VAR 0 17
30557: ARRAY
30558: PPUSH
30559: LD_VAR 0 4
30563: PPUSH
30564: CALL_OW 380
30568: GO 30587
// PrepareHuman ( false , i , skill ) ;
30570: LD_INT 0
30572: PPUSH
30573: LD_VAR 0 8
30577: PPUSH
30578: LD_VAR 0 4
30582: PPUSH
30583: CALL_OW 380
// end else
30587: GO 30606
// PrepareHuman ( false , i , skill ) ;
30589: LD_INT 0
30591: PPUSH
30592: LD_VAR 0 8
30596: PPUSH
30597: LD_VAR 0 4
30601: PPUSH
30602: CALL_OW 380
// un := CreateHuman ;
30606: LD_ADDR_VAR 0 14
30610: PUSH
30611: CALL_OW 44
30615: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30616: LD_ADDR_VAR 0 7
30620: PUSH
30621: LD_VAR 0 7
30625: PPUSH
30626: LD_INT 1
30628: PPUSH
30629: LD_VAR 0 14
30633: PPUSH
30634: CALL_OW 2
30638: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30639: LD_VAR 0 14
30643: PPUSH
30644: LD_VAR 0 9
30648: PPUSH
30649: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30653: LD_VAR 0 9
30657: PPUSH
30658: CALL_OW 313
30662: PUSH
30663: LD_INT 6
30665: EQUAL
30666: PUSH
30667: LD_VAR 0 9
30671: PPUSH
30672: CALL_OW 266
30676: PUSH
30677: LD_INT 32
30679: PUSH
30680: LD_INT 31
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: IN
30687: OR
30688: IFFALSE 30502
30690: GO 30499
30692: POP
30693: POP
// end else
30694: GO 31076
// for j = 1 to x do
30696: LD_ADDR_VAR 0 9
30700: PUSH
30701: DOUBLE
30702: LD_INT 1
30704: DEC
30705: ST_TO_ADDR
30706: LD_VAR 0 13
30710: PUSH
30711: FOR_TO
30712: IFFALSE 31074
// begin InitHc ;
30714: CALL_OW 19
// if not f then
30718: LD_VAR 0 12
30722: NOT
30723: IFFALSE 30812
// begin PrepareHuman ( false , i , skill ) ;
30725: LD_INT 0
30727: PPUSH
30728: LD_VAR 0 8
30732: PPUSH
30733: LD_VAR 0 4
30737: PPUSH
30738: CALL_OW 380
// un := CreateHuman ;
30742: LD_ADDR_VAR 0 14
30746: PUSH
30747: CALL_OW 44
30751: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30752: LD_ADDR_VAR 0 7
30756: PUSH
30757: LD_VAR 0 7
30761: PPUSH
30762: LD_INT 1
30764: PPUSH
30765: LD_VAR 0 14
30769: PPUSH
30770: CALL_OW 2
30774: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30775: LD_VAR 0 14
30779: PPUSH
30780: LD_VAR 0 1
30784: PPUSH
30785: CALL_OW 250
30789: PPUSH
30790: LD_VAR 0 1
30794: PPUSH
30795: CALL_OW 251
30799: PPUSH
30800: LD_INT 10
30802: PPUSH
30803: LD_INT 0
30805: PPUSH
30806: CALL_OW 50
// continue ;
30810: GO 30711
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30812: LD_VAR 0 12
30816: PUSH
30817: LD_INT 1
30819: ARRAY
30820: PPUSH
30821: CALL_OW 313
30825: PUSH
30826: LD_VAR 0 12
30830: PUSH
30831: LD_INT 1
30833: ARRAY
30834: PPUSH
30835: CALL_OW 266
30839: PUSH
30840: LD_INT 32
30842: PUSH
30843: LD_INT 31
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: IN
30850: AND
30851: PUSH
30852: LD_VAR 0 12
30856: PUSH
30857: LD_INT 1
30859: ARRAY
30860: PPUSH
30861: CALL_OW 313
30865: PUSH
30866: LD_INT 6
30868: EQUAL
30869: OR
30870: IFFALSE 30890
// f := Delete ( f , 1 ) ;
30872: LD_ADDR_VAR 0 12
30876: PUSH
30877: LD_VAR 0 12
30881: PPUSH
30882: LD_INT 1
30884: PPUSH
30885: CALL_OW 3
30889: ST_TO_ADDR
// if not f then
30890: LD_VAR 0 12
30894: NOT
30895: IFFALSE 30913
// begin x := x + 2 ;
30897: LD_ADDR_VAR 0 13
30901: PUSH
30902: LD_VAR 0 13
30906: PUSH
30907: LD_INT 2
30909: PLUS
30910: ST_TO_ADDR
// continue ;
30911: GO 30711
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30913: LD_VAR 0 12
30917: PUSH
30918: LD_INT 1
30920: ARRAY
30921: PPUSH
30922: CALL_OW 266
30926: PUSH
30927: LD_INT 5
30929: EQUAL
30930: IFFALSE 31004
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30932: LD_VAR 0 12
30936: PUSH
30937: LD_INT 1
30939: ARRAY
30940: PPUSH
30941: CALL_OW 313
30945: PUSH
30946: LD_INT 3
30948: LESS
30949: IFFALSE 30985
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30951: LD_INT 0
30953: PPUSH
30954: LD_INT 5
30956: PUSH
30957: LD_INT 8
30959: PUSH
30960: LD_INT 9
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: PUSH
30968: LD_VAR 0 17
30972: ARRAY
30973: PPUSH
30974: LD_VAR 0 4
30978: PPUSH
30979: CALL_OW 380
30983: GO 31002
// PrepareHuman ( false , i , skill ) ;
30985: LD_INT 0
30987: PPUSH
30988: LD_VAR 0 8
30992: PPUSH
30993: LD_VAR 0 4
30997: PPUSH
30998: CALL_OW 380
// end else
31002: GO 31021
// PrepareHuman ( false , i , skill ) ;
31004: LD_INT 0
31006: PPUSH
31007: LD_VAR 0 8
31011: PPUSH
31012: LD_VAR 0 4
31016: PPUSH
31017: CALL_OW 380
// un := CreateHuman ;
31021: LD_ADDR_VAR 0 14
31025: PUSH
31026: CALL_OW 44
31030: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31031: LD_ADDR_VAR 0 7
31035: PUSH
31036: LD_VAR 0 7
31040: PPUSH
31041: LD_INT 1
31043: PPUSH
31044: LD_VAR 0 14
31048: PPUSH
31049: CALL_OW 2
31053: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31054: LD_VAR 0 14
31058: PPUSH
31059: LD_VAR 0 12
31063: PUSH
31064: LD_INT 1
31066: ARRAY
31067: PPUSH
31068: CALL_OW 52
// end ;
31072: GO 30711
31074: POP
31075: POP
// end ;
31076: GO 30013
31078: POP
31079: POP
// result := result ^ buildings ;
31080: LD_ADDR_VAR 0 7
31084: PUSH
31085: LD_VAR 0 7
31089: PUSH
31090: LD_VAR 0 18
31094: ADD
31095: ST_TO_ADDR
// end else
31096: GO 31239
// begin for i = 1 to personel do
31098: LD_ADDR_VAR 0 8
31102: PUSH
31103: DOUBLE
31104: LD_INT 1
31106: DEC
31107: ST_TO_ADDR
31108: LD_VAR 0 6
31112: PUSH
31113: FOR_TO
31114: IFFALSE 31237
// begin if i > 4 then
31116: LD_VAR 0 8
31120: PUSH
31121: LD_INT 4
31123: GREATER
31124: IFFALSE 31128
// break ;
31126: GO 31237
// x := personel [ i ] ;
31128: LD_ADDR_VAR 0 13
31132: PUSH
31133: LD_VAR 0 6
31137: PUSH
31138: LD_VAR 0 8
31142: ARRAY
31143: ST_TO_ADDR
// if x = - 1 then
31144: LD_VAR 0 13
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: EQUAL
31153: IFFALSE 31157
// continue ;
31155: GO 31113
// PrepareHuman ( false , i , skill ) ;
31157: LD_INT 0
31159: PPUSH
31160: LD_VAR 0 8
31164: PPUSH
31165: LD_VAR 0 4
31169: PPUSH
31170: CALL_OW 380
// un := CreateHuman ;
31174: LD_ADDR_VAR 0 14
31178: PUSH
31179: CALL_OW 44
31183: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31184: LD_VAR 0 14
31188: PPUSH
31189: LD_VAR 0 1
31193: PPUSH
31194: CALL_OW 250
31198: PPUSH
31199: LD_VAR 0 1
31203: PPUSH
31204: CALL_OW 251
31208: PPUSH
31209: LD_INT 10
31211: PPUSH
31212: LD_INT 0
31214: PPUSH
31215: CALL_OW 50
// result := result ^ un ;
31219: LD_ADDR_VAR 0 7
31223: PUSH
31224: LD_VAR 0 7
31228: PUSH
31229: LD_VAR 0 14
31233: ADD
31234: ST_TO_ADDR
// end ;
31235: GO 31113
31237: POP
31238: POP
// end ; end ;
31239: LD_VAR 0 7
31243: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31244: LD_INT 0
31246: PPUSH
31247: PPUSH
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
31255: PPUSH
31256: PPUSH
31257: PPUSH
31258: PPUSH
31259: PPUSH
31260: PPUSH
31261: PPUSH
// result := false ;
31262: LD_ADDR_VAR 0 3
31266: PUSH
31267: LD_INT 0
31269: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31270: LD_VAR 0 1
31274: NOT
31275: PUSH
31276: LD_VAR 0 1
31280: PPUSH
31281: CALL_OW 266
31285: PUSH
31286: LD_INT 32
31288: PUSH
31289: LD_INT 33
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: IN
31296: NOT
31297: OR
31298: IFFALSE 31302
// exit ;
31300: GO 32411
// nat := GetNation ( tower ) ;
31302: LD_ADDR_VAR 0 12
31306: PUSH
31307: LD_VAR 0 1
31311: PPUSH
31312: CALL_OW 248
31316: ST_TO_ADDR
// side := GetSide ( tower ) ;
31317: LD_ADDR_VAR 0 16
31321: PUSH
31322: LD_VAR 0 1
31326: PPUSH
31327: CALL_OW 255
31331: ST_TO_ADDR
// x := GetX ( tower ) ;
31332: LD_ADDR_VAR 0 10
31336: PUSH
31337: LD_VAR 0 1
31341: PPUSH
31342: CALL_OW 250
31346: ST_TO_ADDR
// y := GetY ( tower ) ;
31347: LD_ADDR_VAR 0 11
31351: PUSH
31352: LD_VAR 0 1
31356: PPUSH
31357: CALL_OW 251
31361: ST_TO_ADDR
// if not x or not y then
31362: LD_VAR 0 10
31366: NOT
31367: PUSH
31368: LD_VAR 0 11
31372: NOT
31373: OR
31374: IFFALSE 31378
// exit ;
31376: GO 32411
// weapon := 0 ;
31378: LD_ADDR_VAR 0 18
31382: PUSH
31383: LD_INT 0
31385: ST_TO_ADDR
// fac_list := [ ] ;
31386: LD_ADDR_VAR 0 17
31390: PUSH
31391: EMPTY
31392: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31393: LD_ADDR_VAR 0 6
31397: PUSH
31398: LD_VAR 0 1
31402: PPUSH
31403: CALL_OW 274
31407: PPUSH
31408: LD_VAR 0 2
31412: PPUSH
31413: LD_INT 0
31415: PPUSH
31416: CALL 28982 0 3
31420: PPUSH
31421: LD_INT 30
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PPUSH
31431: CALL_OW 72
31435: ST_TO_ADDR
// if not factories then
31436: LD_VAR 0 6
31440: NOT
31441: IFFALSE 31445
// exit ;
31443: GO 32411
// for i in factories do
31445: LD_ADDR_VAR 0 8
31449: PUSH
31450: LD_VAR 0 6
31454: PUSH
31455: FOR_IN
31456: IFFALSE 31481
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31458: LD_ADDR_VAR 0 17
31462: PUSH
31463: LD_VAR 0 17
31467: PUSH
31468: LD_VAR 0 8
31472: PPUSH
31473: CALL_OW 478
31477: UNION
31478: ST_TO_ADDR
31479: GO 31455
31481: POP
31482: POP
// if not fac_list then
31483: LD_VAR 0 17
31487: NOT
31488: IFFALSE 31492
// exit ;
31490: GO 32411
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31492: LD_ADDR_VAR 0 5
31496: PUSH
31497: LD_INT 4
31499: PUSH
31500: LD_INT 5
31502: PUSH
31503: LD_INT 9
31505: PUSH
31506: LD_INT 10
31508: PUSH
31509: LD_INT 6
31511: PUSH
31512: LD_INT 7
31514: PUSH
31515: LD_INT 11
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 27
31529: PUSH
31530: LD_INT 28
31532: PUSH
31533: LD_INT 26
31535: PUSH
31536: LD_INT 30
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 43
31547: PUSH
31548: LD_INT 44
31550: PUSH
31551: LD_INT 46
31553: PUSH
31554: LD_INT 45
31556: PUSH
31557: LD_INT 47
31559: PUSH
31560: LD_INT 49
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: PUSH
31576: LD_VAR 0 12
31580: ARRAY
31581: ST_TO_ADDR
// list := list isect fac_list ;
31582: LD_ADDR_VAR 0 5
31586: PUSH
31587: LD_VAR 0 5
31591: PUSH
31592: LD_VAR 0 17
31596: ISECT
31597: ST_TO_ADDR
// if not list then
31598: LD_VAR 0 5
31602: NOT
31603: IFFALSE 31607
// exit ;
31605: GO 32411
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31607: LD_VAR 0 12
31611: PUSH
31612: LD_INT 3
31614: EQUAL
31615: PUSH
31616: LD_INT 49
31618: PUSH
31619: LD_VAR 0 5
31623: IN
31624: AND
31625: PUSH
31626: LD_INT 31
31628: PPUSH
31629: LD_VAR 0 16
31633: PPUSH
31634: CALL_OW 321
31638: PUSH
31639: LD_INT 2
31641: EQUAL
31642: AND
31643: IFFALSE 31703
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31645: LD_INT 22
31647: PUSH
31648: LD_VAR 0 16
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 35
31659: PUSH
31660: LD_INT 49
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 91
31669: PUSH
31670: LD_VAR 0 1
31674: PUSH
31675: LD_INT 10
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: LIST
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: PPUSH
31688: CALL_OW 69
31692: NOT
31693: IFFALSE 31703
// weapon := ru_time_lapser ;
31695: LD_ADDR_VAR 0 18
31699: PUSH
31700: LD_INT 49
31702: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31703: LD_VAR 0 12
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: IN
31718: PUSH
31719: LD_INT 11
31721: PUSH
31722: LD_VAR 0 5
31726: IN
31727: PUSH
31728: LD_INT 30
31730: PUSH
31731: LD_VAR 0 5
31735: IN
31736: OR
31737: AND
31738: PUSH
31739: LD_INT 6
31741: PPUSH
31742: LD_VAR 0 16
31746: PPUSH
31747: CALL_OW 321
31751: PUSH
31752: LD_INT 2
31754: EQUAL
31755: AND
31756: IFFALSE 31921
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31758: LD_INT 22
31760: PUSH
31761: LD_VAR 0 16
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 2
31772: PUSH
31773: LD_INT 35
31775: PUSH
31776: LD_INT 11
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 35
31785: PUSH
31786: LD_INT 30
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 91
31800: PUSH
31801: LD_VAR 0 1
31805: PUSH
31806: LD_INT 18
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: PPUSH
31819: CALL_OW 69
31823: NOT
31824: PUSH
31825: LD_INT 22
31827: PUSH
31828: LD_VAR 0 16
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: LD_INT 30
31842: PUSH
31843: LD_INT 32
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 30
31852: PUSH
31853: LD_INT 33
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 91
31867: PUSH
31868: LD_VAR 0 1
31872: PUSH
31873: LD_INT 12
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: PUSH
31886: EMPTY
31887: LIST
31888: PPUSH
31889: CALL_OW 69
31893: PUSH
31894: LD_INT 2
31896: GREATER
31897: AND
31898: IFFALSE 31921
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31900: LD_ADDR_VAR 0 18
31904: PUSH
31905: LD_INT 11
31907: PUSH
31908: LD_INT 30
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_VAR 0 12
31919: ARRAY
31920: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31921: LD_VAR 0 18
31925: NOT
31926: PUSH
31927: LD_INT 40
31929: PPUSH
31930: LD_VAR 0 16
31934: PPUSH
31935: CALL_OW 321
31939: PUSH
31940: LD_INT 2
31942: EQUAL
31943: AND
31944: PUSH
31945: LD_INT 7
31947: PUSH
31948: LD_VAR 0 5
31952: IN
31953: PUSH
31954: LD_INT 28
31956: PUSH
31957: LD_VAR 0 5
31961: IN
31962: OR
31963: PUSH
31964: LD_INT 45
31966: PUSH
31967: LD_VAR 0 5
31971: IN
31972: OR
31973: AND
31974: IFFALSE 32228
// begin hex := GetHexInfo ( x , y ) ;
31976: LD_ADDR_VAR 0 4
31980: PUSH
31981: LD_VAR 0 10
31985: PPUSH
31986: LD_VAR 0 11
31990: PPUSH
31991: CALL_OW 546
31995: ST_TO_ADDR
// if hex [ 1 ] then
31996: LD_VAR 0 4
32000: PUSH
32001: LD_INT 1
32003: ARRAY
32004: IFFALSE 32008
// exit ;
32006: GO 32411
// height := hex [ 2 ] ;
32008: LD_ADDR_VAR 0 15
32012: PUSH
32013: LD_VAR 0 4
32017: PUSH
32018: LD_INT 2
32020: ARRAY
32021: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32022: LD_ADDR_VAR 0 14
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: LD_INT 3
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: ST_TO_ADDR
// for i in tmp do
32045: LD_ADDR_VAR 0 8
32049: PUSH
32050: LD_VAR 0 14
32054: PUSH
32055: FOR_IN
32056: IFFALSE 32226
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32058: LD_ADDR_VAR 0 9
32062: PUSH
32063: LD_VAR 0 10
32067: PPUSH
32068: LD_VAR 0 8
32072: PPUSH
32073: LD_INT 5
32075: PPUSH
32076: CALL_OW 272
32080: PUSH
32081: LD_VAR 0 11
32085: PPUSH
32086: LD_VAR 0 8
32090: PPUSH
32091: LD_INT 5
32093: PPUSH
32094: CALL_OW 273
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32103: LD_VAR 0 9
32107: PUSH
32108: LD_INT 1
32110: ARRAY
32111: PPUSH
32112: LD_VAR 0 9
32116: PUSH
32117: LD_INT 2
32119: ARRAY
32120: PPUSH
32121: CALL_OW 488
32125: IFFALSE 32224
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32127: LD_ADDR_VAR 0 4
32131: PUSH
32132: LD_VAR 0 9
32136: PUSH
32137: LD_INT 1
32139: ARRAY
32140: PPUSH
32141: LD_VAR 0 9
32145: PUSH
32146: LD_INT 2
32148: ARRAY
32149: PPUSH
32150: CALL_OW 546
32154: ST_TO_ADDR
// if hex [ 1 ] then
32155: LD_VAR 0 4
32159: PUSH
32160: LD_INT 1
32162: ARRAY
32163: IFFALSE 32167
// continue ;
32165: GO 32055
// h := hex [ 2 ] ;
32167: LD_ADDR_VAR 0 13
32171: PUSH
32172: LD_VAR 0 4
32176: PUSH
32177: LD_INT 2
32179: ARRAY
32180: ST_TO_ADDR
// if h + 7 < height then
32181: LD_VAR 0 13
32185: PUSH
32186: LD_INT 7
32188: PLUS
32189: PUSH
32190: LD_VAR 0 15
32194: LESS
32195: IFFALSE 32224
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32197: LD_ADDR_VAR 0 18
32201: PUSH
32202: LD_INT 7
32204: PUSH
32205: LD_INT 28
32207: PUSH
32208: LD_INT 45
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: LIST
32215: PUSH
32216: LD_VAR 0 12
32220: ARRAY
32221: ST_TO_ADDR
// break ;
32222: GO 32226
// end ; end ; end ;
32224: GO 32055
32226: POP
32227: POP
// end ; if not weapon then
32228: LD_VAR 0 18
32232: NOT
32233: IFFALSE 32293
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32235: LD_ADDR_VAR 0 5
32239: PUSH
32240: LD_VAR 0 5
32244: PUSH
32245: LD_INT 11
32247: PUSH
32248: LD_INT 30
32250: PUSH
32251: LD_INT 49
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: DIFF
32259: ST_TO_ADDR
// if not list then
32260: LD_VAR 0 5
32264: NOT
32265: IFFALSE 32269
// exit ;
32267: GO 32411
// weapon := list [ rand ( 1 , list ) ] ;
32269: LD_ADDR_VAR 0 18
32273: PUSH
32274: LD_VAR 0 5
32278: PUSH
32279: LD_INT 1
32281: PPUSH
32282: LD_VAR 0 5
32286: PPUSH
32287: CALL_OW 12
32291: ARRAY
32292: ST_TO_ADDR
// end ; if weapon then
32293: LD_VAR 0 18
32297: IFFALSE 32411
// begin tmp := CostOfWeapon ( weapon ) ;
32299: LD_ADDR_VAR 0 14
32303: PUSH
32304: LD_VAR 0 18
32308: PPUSH
32309: CALL_OW 451
32313: ST_TO_ADDR
// j := GetBase ( tower ) ;
32314: LD_ADDR_VAR 0 9
32318: PUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: CALL_OW 274
32328: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32329: LD_VAR 0 9
32333: PPUSH
32334: LD_INT 1
32336: PPUSH
32337: CALL_OW 275
32341: PUSH
32342: LD_VAR 0 14
32346: PUSH
32347: LD_INT 1
32349: ARRAY
32350: GREATEREQUAL
32351: PUSH
32352: LD_VAR 0 9
32356: PPUSH
32357: LD_INT 2
32359: PPUSH
32360: CALL_OW 275
32364: PUSH
32365: LD_VAR 0 14
32369: PUSH
32370: LD_INT 2
32372: ARRAY
32373: GREATEREQUAL
32374: AND
32375: PUSH
32376: LD_VAR 0 9
32380: PPUSH
32381: LD_INT 3
32383: PPUSH
32384: CALL_OW 275
32388: PUSH
32389: LD_VAR 0 14
32393: PUSH
32394: LD_INT 3
32396: ARRAY
32397: GREATEREQUAL
32398: AND
32399: IFFALSE 32411
// result := weapon ;
32401: LD_ADDR_VAR 0 3
32405: PUSH
32406: LD_VAR 0 18
32410: ST_TO_ADDR
// end ; end ;
32411: LD_VAR 0 3
32415: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32416: LD_INT 0
32418: PPUSH
32419: PPUSH
// result := true ;
32420: LD_ADDR_VAR 0 3
32424: PUSH
32425: LD_INT 1
32427: ST_TO_ADDR
// if array1 = array2 then
32428: LD_VAR 0 1
32432: PUSH
32433: LD_VAR 0 2
32437: EQUAL
32438: IFFALSE 32498
// begin for i = 1 to array1 do
32440: LD_ADDR_VAR 0 4
32444: PUSH
32445: DOUBLE
32446: LD_INT 1
32448: DEC
32449: ST_TO_ADDR
32450: LD_VAR 0 1
32454: PUSH
32455: FOR_TO
32456: IFFALSE 32494
// if array1 [ i ] <> array2 [ i ] then
32458: LD_VAR 0 1
32462: PUSH
32463: LD_VAR 0 4
32467: ARRAY
32468: PUSH
32469: LD_VAR 0 2
32473: PUSH
32474: LD_VAR 0 4
32478: ARRAY
32479: NONEQUAL
32480: IFFALSE 32492
// begin result := false ;
32482: LD_ADDR_VAR 0 3
32486: PUSH
32487: LD_INT 0
32489: ST_TO_ADDR
// break ;
32490: GO 32494
// end ;
32492: GO 32455
32494: POP
32495: POP
// end else
32496: GO 32506
// result := false ;
32498: LD_ADDR_VAR 0 3
32502: PUSH
32503: LD_INT 0
32505: ST_TO_ADDR
// end ;
32506: LD_VAR 0 3
32510: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32511: LD_INT 0
32513: PPUSH
32514: PPUSH
// if not array1 or not array2 then
32515: LD_VAR 0 1
32519: NOT
32520: PUSH
32521: LD_VAR 0 2
32525: NOT
32526: OR
32527: IFFALSE 32531
// exit ;
32529: GO 32595
// result := true ;
32531: LD_ADDR_VAR 0 3
32535: PUSH
32536: LD_INT 1
32538: ST_TO_ADDR
// for i = 1 to array1 do
32539: LD_ADDR_VAR 0 4
32543: PUSH
32544: DOUBLE
32545: LD_INT 1
32547: DEC
32548: ST_TO_ADDR
32549: LD_VAR 0 1
32553: PUSH
32554: FOR_TO
32555: IFFALSE 32593
// if array1 [ i ] <> array2 [ i ] then
32557: LD_VAR 0 1
32561: PUSH
32562: LD_VAR 0 4
32566: ARRAY
32567: PUSH
32568: LD_VAR 0 2
32572: PUSH
32573: LD_VAR 0 4
32577: ARRAY
32578: NONEQUAL
32579: IFFALSE 32591
// begin result := false ;
32581: LD_ADDR_VAR 0 3
32585: PUSH
32586: LD_INT 0
32588: ST_TO_ADDR
// break ;
32589: GO 32593
// end ;
32591: GO 32554
32593: POP
32594: POP
// end ;
32595: LD_VAR 0 3
32599: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32600: LD_INT 0
32602: PPUSH
32603: PPUSH
32604: PPUSH
// pom := GetBase ( fac ) ;
32605: LD_ADDR_VAR 0 5
32609: PUSH
32610: LD_VAR 0 1
32614: PPUSH
32615: CALL_OW 274
32619: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32620: LD_ADDR_VAR 0 4
32624: PUSH
32625: LD_VAR 0 2
32629: PUSH
32630: LD_INT 1
32632: ARRAY
32633: PPUSH
32634: LD_VAR 0 2
32638: PUSH
32639: LD_INT 2
32641: ARRAY
32642: PPUSH
32643: LD_VAR 0 2
32647: PUSH
32648: LD_INT 3
32650: ARRAY
32651: PPUSH
32652: LD_VAR 0 2
32656: PUSH
32657: LD_INT 4
32659: ARRAY
32660: PPUSH
32661: CALL_OW 449
32665: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32666: LD_ADDR_VAR 0 3
32670: PUSH
32671: LD_VAR 0 5
32675: PPUSH
32676: LD_INT 1
32678: PPUSH
32679: CALL_OW 275
32683: PUSH
32684: LD_VAR 0 4
32688: PUSH
32689: LD_INT 1
32691: ARRAY
32692: GREATEREQUAL
32693: PUSH
32694: LD_VAR 0 5
32698: PPUSH
32699: LD_INT 2
32701: PPUSH
32702: CALL_OW 275
32706: PUSH
32707: LD_VAR 0 4
32711: PUSH
32712: LD_INT 2
32714: ARRAY
32715: GREATEREQUAL
32716: AND
32717: PUSH
32718: LD_VAR 0 5
32722: PPUSH
32723: LD_INT 3
32725: PPUSH
32726: CALL_OW 275
32730: PUSH
32731: LD_VAR 0 4
32735: PUSH
32736: LD_INT 3
32738: ARRAY
32739: GREATEREQUAL
32740: AND
32741: ST_TO_ADDR
// end ;
32742: LD_VAR 0 3
32746: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32747: LD_INT 0
32749: PPUSH
32750: PPUSH
32751: PPUSH
32752: PPUSH
// pom := GetBase ( building ) ;
32753: LD_ADDR_VAR 0 3
32757: PUSH
32758: LD_VAR 0 1
32762: PPUSH
32763: CALL_OW 274
32767: ST_TO_ADDR
// if not pom then
32768: LD_VAR 0 3
32772: NOT
32773: IFFALSE 32777
// exit ;
32775: GO 32947
// btype := GetBType ( building ) ;
32777: LD_ADDR_VAR 0 5
32781: PUSH
32782: LD_VAR 0 1
32786: PPUSH
32787: CALL_OW 266
32791: ST_TO_ADDR
// if btype = b_armoury then
32792: LD_VAR 0 5
32796: PUSH
32797: LD_INT 4
32799: EQUAL
32800: IFFALSE 32810
// btype := b_barracks ;
32802: LD_ADDR_VAR 0 5
32806: PUSH
32807: LD_INT 5
32809: ST_TO_ADDR
// if btype = b_depot then
32810: LD_VAR 0 5
32814: PUSH
32815: LD_INT 0
32817: EQUAL
32818: IFFALSE 32828
// btype := b_warehouse ;
32820: LD_ADDR_VAR 0 5
32824: PUSH
32825: LD_INT 1
32827: ST_TO_ADDR
// if btype = b_workshop then
32828: LD_VAR 0 5
32832: PUSH
32833: LD_INT 2
32835: EQUAL
32836: IFFALSE 32846
// btype := b_factory ;
32838: LD_ADDR_VAR 0 5
32842: PUSH
32843: LD_INT 3
32845: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32846: LD_ADDR_VAR 0 4
32850: PUSH
32851: LD_VAR 0 5
32855: PPUSH
32856: LD_VAR 0 1
32860: PPUSH
32861: CALL_OW 248
32865: PPUSH
32866: CALL_OW 450
32870: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32871: LD_ADDR_VAR 0 2
32875: PUSH
32876: LD_VAR 0 3
32880: PPUSH
32881: LD_INT 1
32883: PPUSH
32884: CALL_OW 275
32888: PUSH
32889: LD_VAR 0 4
32893: PUSH
32894: LD_INT 1
32896: ARRAY
32897: GREATEREQUAL
32898: PUSH
32899: LD_VAR 0 3
32903: PPUSH
32904: LD_INT 2
32906: PPUSH
32907: CALL_OW 275
32911: PUSH
32912: LD_VAR 0 4
32916: PUSH
32917: LD_INT 2
32919: ARRAY
32920: GREATEREQUAL
32921: AND
32922: PUSH
32923: LD_VAR 0 3
32927: PPUSH
32928: LD_INT 3
32930: PPUSH
32931: CALL_OW 275
32935: PUSH
32936: LD_VAR 0 4
32940: PUSH
32941: LD_INT 3
32943: ARRAY
32944: GREATEREQUAL
32945: AND
32946: ST_TO_ADDR
// end ;
32947: LD_VAR 0 2
32951: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32952: LD_INT 0
32954: PPUSH
32955: PPUSH
32956: PPUSH
// pom := GetBase ( building ) ;
32957: LD_ADDR_VAR 0 4
32961: PUSH
32962: LD_VAR 0 1
32966: PPUSH
32967: CALL_OW 274
32971: ST_TO_ADDR
// if not pom then
32972: LD_VAR 0 4
32976: NOT
32977: IFFALSE 32981
// exit ;
32979: GO 33082
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32981: LD_ADDR_VAR 0 5
32985: PUSH
32986: LD_VAR 0 2
32990: PPUSH
32991: LD_VAR 0 1
32995: PPUSH
32996: CALL_OW 248
33000: PPUSH
33001: CALL_OW 450
33005: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33006: LD_ADDR_VAR 0 3
33010: PUSH
33011: LD_VAR 0 4
33015: PPUSH
33016: LD_INT 1
33018: PPUSH
33019: CALL_OW 275
33023: PUSH
33024: LD_VAR 0 5
33028: PUSH
33029: LD_INT 1
33031: ARRAY
33032: GREATEREQUAL
33033: PUSH
33034: LD_VAR 0 4
33038: PPUSH
33039: LD_INT 2
33041: PPUSH
33042: CALL_OW 275
33046: PUSH
33047: LD_VAR 0 5
33051: PUSH
33052: LD_INT 2
33054: ARRAY
33055: GREATEREQUAL
33056: AND
33057: PUSH
33058: LD_VAR 0 4
33062: PPUSH
33063: LD_INT 3
33065: PPUSH
33066: CALL_OW 275
33070: PUSH
33071: LD_VAR 0 5
33075: PUSH
33076: LD_INT 3
33078: ARRAY
33079: GREATEREQUAL
33080: AND
33081: ST_TO_ADDR
// end ;
33082: LD_VAR 0 3
33086: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33087: LD_INT 0
33089: PPUSH
33090: PPUSH
33091: PPUSH
33092: PPUSH
33093: PPUSH
33094: PPUSH
33095: PPUSH
33096: PPUSH
33097: PPUSH
33098: PPUSH
33099: PPUSH
// result := false ;
33100: LD_ADDR_VAR 0 8
33104: PUSH
33105: LD_INT 0
33107: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33108: LD_VAR 0 5
33112: NOT
33113: PUSH
33114: LD_VAR 0 1
33118: NOT
33119: OR
33120: PUSH
33121: LD_VAR 0 2
33125: NOT
33126: OR
33127: PUSH
33128: LD_VAR 0 3
33132: NOT
33133: OR
33134: IFFALSE 33138
// exit ;
33136: GO 33952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33138: LD_ADDR_VAR 0 14
33142: PUSH
33143: LD_VAR 0 1
33147: PPUSH
33148: LD_VAR 0 2
33152: PPUSH
33153: LD_VAR 0 3
33157: PPUSH
33158: LD_VAR 0 4
33162: PPUSH
33163: LD_VAR 0 5
33167: PUSH
33168: LD_INT 1
33170: ARRAY
33171: PPUSH
33172: CALL_OW 248
33176: PPUSH
33177: LD_INT 0
33179: PPUSH
33180: CALL 35189 0 6
33184: ST_TO_ADDR
// if not hexes then
33185: LD_VAR 0 14
33189: NOT
33190: IFFALSE 33194
// exit ;
33192: GO 33952
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33194: LD_ADDR_VAR 0 17
33198: PUSH
33199: LD_VAR 0 5
33203: PPUSH
33204: LD_INT 22
33206: PUSH
33207: LD_VAR 0 13
33211: PPUSH
33212: CALL_OW 255
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: LD_INT 30
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 30
33236: PUSH
33237: LD_INT 1
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: LIST
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PPUSH
33253: CALL_OW 72
33257: ST_TO_ADDR
// for i = 1 to hexes do
33258: LD_ADDR_VAR 0 9
33262: PUSH
33263: DOUBLE
33264: LD_INT 1
33266: DEC
33267: ST_TO_ADDR
33268: LD_VAR 0 14
33272: PUSH
33273: FOR_TO
33274: IFFALSE 33950
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33276: LD_ADDR_VAR 0 13
33280: PUSH
33281: LD_VAR 0 14
33285: PUSH
33286: LD_VAR 0 9
33290: ARRAY
33291: PUSH
33292: LD_INT 1
33294: ARRAY
33295: PPUSH
33296: LD_VAR 0 14
33300: PUSH
33301: LD_VAR 0 9
33305: ARRAY
33306: PUSH
33307: LD_INT 2
33309: ARRAY
33310: PPUSH
33311: CALL_OW 428
33315: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33316: LD_VAR 0 14
33320: PUSH
33321: LD_VAR 0 9
33325: ARRAY
33326: PUSH
33327: LD_INT 1
33329: ARRAY
33330: PPUSH
33331: LD_VAR 0 14
33335: PUSH
33336: LD_VAR 0 9
33340: ARRAY
33341: PUSH
33342: LD_INT 2
33344: ARRAY
33345: PPUSH
33346: CALL_OW 351
33350: PUSH
33351: LD_VAR 0 14
33355: PUSH
33356: LD_VAR 0 9
33360: ARRAY
33361: PUSH
33362: LD_INT 1
33364: ARRAY
33365: PPUSH
33366: LD_VAR 0 14
33370: PUSH
33371: LD_VAR 0 9
33375: ARRAY
33376: PUSH
33377: LD_INT 2
33379: ARRAY
33380: PPUSH
33381: CALL_OW 488
33385: NOT
33386: OR
33387: PUSH
33388: LD_VAR 0 13
33392: PPUSH
33393: CALL_OW 247
33397: PUSH
33398: LD_INT 3
33400: EQUAL
33401: OR
33402: IFFALSE 33408
// exit ;
33404: POP
33405: POP
33406: GO 33952
// if not tmp then
33408: LD_VAR 0 13
33412: NOT
33413: IFFALSE 33417
// continue ;
33415: GO 33273
// result := true ;
33417: LD_ADDR_VAR 0 8
33421: PUSH
33422: LD_INT 1
33424: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33425: LD_VAR 0 6
33429: PUSH
33430: LD_VAR 0 13
33434: PPUSH
33435: CALL_OW 247
33439: PUSH
33440: LD_INT 2
33442: EQUAL
33443: AND
33444: PUSH
33445: LD_VAR 0 13
33449: PPUSH
33450: CALL_OW 263
33454: PUSH
33455: LD_INT 1
33457: EQUAL
33458: AND
33459: IFFALSE 33623
// begin if IsDrivenBy ( tmp ) then
33461: LD_VAR 0 13
33465: PPUSH
33466: CALL_OW 311
33470: IFFALSE 33474
// continue ;
33472: GO 33273
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33474: LD_VAR 0 6
33478: PPUSH
33479: LD_INT 3
33481: PUSH
33482: LD_INT 60
33484: PUSH
33485: EMPTY
33486: LIST
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: LD_INT 55
33497: PUSH
33498: EMPTY
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PPUSH
33509: CALL_OW 72
33513: IFFALSE 33621
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33515: LD_ADDR_VAR 0 18
33519: PUSH
33520: LD_VAR 0 6
33524: PPUSH
33525: LD_INT 3
33527: PUSH
33528: LD_INT 60
33530: PUSH
33531: EMPTY
33532: LIST
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 3
33540: PUSH
33541: LD_INT 55
33543: PUSH
33544: EMPTY
33545: LIST
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PPUSH
33555: CALL_OW 72
33559: PUSH
33560: LD_INT 1
33562: ARRAY
33563: ST_TO_ADDR
// if IsInUnit ( driver ) then
33564: LD_VAR 0 18
33568: PPUSH
33569: CALL_OW 310
33573: IFFALSE 33584
// ComExit ( driver ) ;
33575: LD_VAR 0 18
33579: PPUSH
33580: CALL 58373 0 1
// AddComEnterUnit ( driver , tmp ) ;
33584: LD_VAR 0 18
33588: PPUSH
33589: LD_VAR 0 13
33593: PPUSH
33594: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33598: LD_VAR 0 18
33602: PPUSH
33603: LD_VAR 0 7
33607: PPUSH
33608: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33612: LD_VAR 0 18
33616: PPUSH
33617: CALL_OW 181
// end ; continue ;
33621: GO 33273
// end ; if not cleaners or not tmp in cleaners then
33623: LD_VAR 0 6
33627: NOT
33628: PUSH
33629: LD_VAR 0 13
33633: PUSH
33634: LD_VAR 0 6
33638: IN
33639: NOT
33640: OR
33641: IFFALSE 33948
// begin if dep then
33643: LD_VAR 0 17
33647: IFFALSE 33783
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33649: LD_ADDR_VAR 0 16
33653: PUSH
33654: LD_VAR 0 17
33658: PUSH
33659: LD_INT 1
33661: ARRAY
33662: PPUSH
33663: CALL_OW 250
33667: PPUSH
33668: LD_VAR 0 17
33672: PUSH
33673: LD_INT 1
33675: ARRAY
33676: PPUSH
33677: CALL_OW 254
33681: PPUSH
33682: LD_INT 5
33684: PPUSH
33685: CALL_OW 272
33689: PUSH
33690: LD_VAR 0 17
33694: PUSH
33695: LD_INT 1
33697: ARRAY
33698: PPUSH
33699: CALL_OW 251
33703: PPUSH
33704: LD_VAR 0 17
33708: PUSH
33709: LD_INT 1
33711: ARRAY
33712: PPUSH
33713: CALL_OW 254
33717: PPUSH
33718: LD_INT 5
33720: PPUSH
33721: CALL_OW 273
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33730: LD_VAR 0 16
33734: PUSH
33735: LD_INT 1
33737: ARRAY
33738: PPUSH
33739: LD_VAR 0 16
33743: PUSH
33744: LD_INT 2
33746: ARRAY
33747: PPUSH
33748: CALL_OW 488
33752: IFFALSE 33783
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33754: LD_VAR 0 13
33758: PPUSH
33759: LD_VAR 0 16
33763: PUSH
33764: LD_INT 1
33766: ARRAY
33767: PPUSH
33768: LD_VAR 0 16
33772: PUSH
33773: LD_INT 2
33775: ARRAY
33776: PPUSH
33777: CALL_OW 111
// continue ;
33781: GO 33273
// end ; end ; r := GetDir ( tmp ) ;
33783: LD_ADDR_VAR 0 15
33787: PUSH
33788: LD_VAR 0 13
33792: PPUSH
33793: CALL_OW 254
33797: ST_TO_ADDR
// if r = 5 then
33798: LD_VAR 0 15
33802: PUSH
33803: LD_INT 5
33805: EQUAL
33806: IFFALSE 33816
// r := 0 ;
33808: LD_ADDR_VAR 0 15
33812: PUSH
33813: LD_INT 0
33815: ST_TO_ADDR
// for j = r to 5 do
33816: LD_ADDR_VAR 0 10
33820: PUSH
33821: DOUBLE
33822: LD_VAR 0 15
33826: DEC
33827: ST_TO_ADDR
33828: LD_INT 5
33830: PUSH
33831: FOR_TO
33832: IFFALSE 33946
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33834: LD_ADDR_VAR 0 11
33838: PUSH
33839: LD_VAR 0 13
33843: PPUSH
33844: CALL_OW 250
33848: PPUSH
33849: LD_VAR 0 10
33853: PPUSH
33854: LD_INT 2
33856: PPUSH
33857: CALL_OW 272
33861: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33862: LD_ADDR_VAR 0 12
33866: PUSH
33867: LD_VAR 0 13
33871: PPUSH
33872: CALL_OW 251
33876: PPUSH
33877: LD_VAR 0 10
33881: PPUSH
33882: LD_INT 2
33884: PPUSH
33885: CALL_OW 273
33889: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33890: LD_VAR 0 11
33894: PPUSH
33895: LD_VAR 0 12
33899: PPUSH
33900: CALL_OW 488
33904: PUSH
33905: LD_VAR 0 11
33909: PPUSH
33910: LD_VAR 0 12
33914: PPUSH
33915: CALL_OW 428
33919: NOT
33920: AND
33921: IFFALSE 33944
// begin ComMoveXY ( tmp , _x , _y ) ;
33923: LD_VAR 0 13
33927: PPUSH
33928: LD_VAR 0 11
33932: PPUSH
33933: LD_VAR 0 12
33937: PPUSH
33938: CALL_OW 111
// break ;
33942: GO 33946
// end ; end ;
33944: GO 33831
33946: POP
33947: POP
// end ; end ;
33948: GO 33273
33950: POP
33951: POP
// end ;
33952: LD_VAR 0 8
33956: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33957: LD_INT 0
33959: PPUSH
// result := true ;
33960: LD_ADDR_VAR 0 3
33964: PUSH
33965: LD_INT 1
33967: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33968: LD_VAR 0 2
33972: PUSH
33973: LD_INT 24
33975: DOUBLE
33976: EQUAL
33977: IFTRUE 33987
33979: LD_INT 33
33981: DOUBLE
33982: EQUAL
33983: IFTRUE 33987
33985: GO 34012
33987: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33988: LD_ADDR_VAR 0 3
33992: PUSH
33993: LD_INT 32
33995: PPUSH
33996: LD_VAR 0 1
34000: PPUSH
34001: CALL_OW 321
34005: PUSH
34006: LD_INT 2
34008: EQUAL
34009: ST_TO_ADDR
34010: GO 34332
34012: LD_INT 20
34014: DOUBLE
34015: EQUAL
34016: IFTRUE 34020
34018: GO 34045
34020: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34021: LD_ADDR_VAR 0 3
34025: PUSH
34026: LD_INT 6
34028: PPUSH
34029: LD_VAR 0 1
34033: PPUSH
34034: CALL_OW 321
34038: PUSH
34039: LD_INT 2
34041: EQUAL
34042: ST_TO_ADDR
34043: GO 34332
34045: LD_INT 22
34047: DOUBLE
34048: EQUAL
34049: IFTRUE 34059
34051: LD_INT 36
34053: DOUBLE
34054: EQUAL
34055: IFTRUE 34059
34057: GO 34084
34059: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34060: LD_ADDR_VAR 0 3
34064: PUSH
34065: LD_INT 15
34067: PPUSH
34068: LD_VAR 0 1
34072: PPUSH
34073: CALL_OW 321
34077: PUSH
34078: LD_INT 2
34080: EQUAL
34081: ST_TO_ADDR
34082: GO 34332
34084: LD_INT 30
34086: DOUBLE
34087: EQUAL
34088: IFTRUE 34092
34090: GO 34117
34092: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34093: LD_ADDR_VAR 0 3
34097: PUSH
34098: LD_INT 20
34100: PPUSH
34101: LD_VAR 0 1
34105: PPUSH
34106: CALL_OW 321
34110: PUSH
34111: LD_INT 2
34113: EQUAL
34114: ST_TO_ADDR
34115: GO 34332
34117: LD_INT 28
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34131
34123: LD_INT 21
34125: DOUBLE
34126: EQUAL
34127: IFTRUE 34131
34129: GO 34156
34131: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34132: LD_ADDR_VAR 0 3
34136: PUSH
34137: LD_INT 21
34139: PPUSH
34140: LD_VAR 0 1
34144: PPUSH
34145: CALL_OW 321
34149: PUSH
34150: LD_INT 2
34152: EQUAL
34153: ST_TO_ADDR
34154: GO 34332
34156: LD_INT 16
34158: DOUBLE
34159: EQUAL
34160: IFTRUE 34164
34162: GO 34191
34164: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34165: LD_ADDR_VAR 0 3
34169: PUSH
34170: LD_EXP 138
34174: PPUSH
34175: LD_VAR 0 1
34179: PPUSH
34180: CALL_OW 321
34184: PUSH
34185: LD_INT 2
34187: EQUAL
34188: ST_TO_ADDR
34189: GO 34332
34191: LD_INT 19
34193: DOUBLE
34194: EQUAL
34195: IFTRUE 34205
34197: LD_INT 23
34199: DOUBLE
34200: EQUAL
34201: IFTRUE 34205
34203: GO 34232
34205: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34206: LD_ADDR_VAR 0 3
34210: PUSH
34211: LD_EXP 137
34215: PPUSH
34216: LD_VAR 0 1
34220: PPUSH
34221: CALL_OW 321
34225: PUSH
34226: LD_INT 2
34228: EQUAL
34229: ST_TO_ADDR
34230: GO 34332
34232: LD_INT 17
34234: DOUBLE
34235: EQUAL
34236: IFTRUE 34240
34238: GO 34265
34240: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34241: LD_ADDR_VAR 0 3
34245: PUSH
34246: LD_INT 39
34248: PPUSH
34249: LD_VAR 0 1
34253: PPUSH
34254: CALL_OW 321
34258: PUSH
34259: LD_INT 2
34261: EQUAL
34262: ST_TO_ADDR
34263: GO 34332
34265: LD_INT 18
34267: DOUBLE
34268: EQUAL
34269: IFTRUE 34273
34271: GO 34298
34273: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34274: LD_ADDR_VAR 0 3
34278: PUSH
34279: LD_INT 40
34281: PPUSH
34282: LD_VAR 0 1
34286: PPUSH
34287: CALL_OW 321
34291: PUSH
34292: LD_INT 2
34294: EQUAL
34295: ST_TO_ADDR
34296: GO 34332
34298: LD_INT 27
34300: DOUBLE
34301: EQUAL
34302: IFTRUE 34306
34304: GO 34331
34306: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34307: LD_ADDR_VAR 0 3
34311: PUSH
34312: LD_INT 35
34314: PPUSH
34315: LD_VAR 0 1
34319: PPUSH
34320: CALL_OW 321
34324: PUSH
34325: LD_INT 2
34327: EQUAL
34328: ST_TO_ADDR
34329: GO 34332
34331: POP
// end ;
34332: LD_VAR 0 3
34336: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34337: LD_INT 0
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
// result := false ;
34350: LD_ADDR_VAR 0 6
34354: PUSH
34355: LD_INT 0
34357: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34358: LD_VAR 0 1
34362: NOT
34363: PUSH
34364: LD_VAR 0 1
34368: PPUSH
34369: CALL_OW 266
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: IN
34384: NOT
34385: OR
34386: PUSH
34387: LD_VAR 0 2
34391: NOT
34392: OR
34393: PUSH
34394: LD_VAR 0 5
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: LD_INT 3
34410: PUSH
34411: LD_INT 4
34413: PUSH
34414: LD_INT 5
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: IN
34425: NOT
34426: OR
34427: PUSH
34428: LD_VAR 0 3
34432: PPUSH
34433: LD_VAR 0 4
34437: PPUSH
34438: CALL_OW 488
34442: NOT
34443: OR
34444: IFFALSE 34448
// exit ;
34446: GO 35184
// side := GetSide ( depot ) ;
34448: LD_ADDR_VAR 0 9
34452: PUSH
34453: LD_VAR 0 1
34457: PPUSH
34458: CALL_OW 255
34462: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34463: LD_VAR 0 9
34467: PPUSH
34468: LD_VAR 0 2
34472: PPUSH
34473: CALL 33957 0 2
34477: NOT
34478: IFFALSE 34482
// exit ;
34480: GO 35184
// pom := GetBase ( depot ) ;
34482: LD_ADDR_VAR 0 10
34486: PUSH
34487: LD_VAR 0 1
34491: PPUSH
34492: CALL_OW 274
34496: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34497: LD_ADDR_VAR 0 11
34501: PUSH
34502: LD_VAR 0 2
34506: PPUSH
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 248
34516: PPUSH
34517: CALL_OW 450
34521: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34522: LD_VAR 0 10
34526: PPUSH
34527: LD_INT 1
34529: PPUSH
34530: CALL_OW 275
34534: PUSH
34535: LD_VAR 0 11
34539: PUSH
34540: LD_INT 1
34542: ARRAY
34543: GREATEREQUAL
34544: PUSH
34545: LD_VAR 0 10
34549: PPUSH
34550: LD_INT 2
34552: PPUSH
34553: CALL_OW 275
34557: PUSH
34558: LD_VAR 0 11
34562: PUSH
34563: LD_INT 2
34565: ARRAY
34566: GREATEREQUAL
34567: AND
34568: PUSH
34569: LD_VAR 0 10
34573: PPUSH
34574: LD_INT 3
34576: PPUSH
34577: CALL_OW 275
34581: PUSH
34582: LD_VAR 0 11
34586: PUSH
34587: LD_INT 3
34589: ARRAY
34590: GREATEREQUAL
34591: AND
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 35184
// if GetBType ( depot ) = b_depot then
34597: LD_VAR 0 1
34601: PPUSH
34602: CALL_OW 266
34606: PUSH
34607: LD_INT 0
34609: EQUAL
34610: IFFALSE 34622
// dist := 28 else
34612: LD_ADDR_VAR 0 14
34616: PUSH
34617: LD_INT 28
34619: ST_TO_ADDR
34620: GO 34630
// dist := 36 ;
34622: LD_ADDR_VAR 0 14
34626: PUSH
34627: LD_INT 36
34629: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34630: LD_VAR 0 1
34634: PPUSH
34635: LD_VAR 0 3
34639: PPUSH
34640: LD_VAR 0 4
34644: PPUSH
34645: CALL_OW 297
34649: PUSH
34650: LD_VAR 0 14
34654: GREATER
34655: IFFALSE 34659
// exit ;
34657: GO 35184
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34659: LD_ADDR_VAR 0 12
34663: PUSH
34664: LD_VAR 0 2
34668: PPUSH
34669: LD_VAR 0 3
34673: PPUSH
34674: LD_VAR 0 4
34678: PPUSH
34679: LD_VAR 0 5
34683: PPUSH
34684: LD_VAR 0 1
34688: PPUSH
34689: CALL_OW 248
34693: PPUSH
34694: LD_INT 0
34696: PPUSH
34697: CALL 35189 0 6
34701: ST_TO_ADDR
// if not hexes then
34702: LD_VAR 0 12
34706: NOT
34707: IFFALSE 34711
// exit ;
34709: GO 35184
// hex := GetHexInfo ( x , y ) ;
34711: LD_ADDR_VAR 0 15
34715: PUSH
34716: LD_VAR 0 3
34720: PPUSH
34721: LD_VAR 0 4
34725: PPUSH
34726: CALL_OW 546
34730: ST_TO_ADDR
// if hex [ 1 ] then
34731: LD_VAR 0 15
34735: PUSH
34736: LD_INT 1
34738: ARRAY
34739: IFFALSE 34743
// exit ;
34741: GO 35184
// height := hex [ 2 ] ;
34743: LD_ADDR_VAR 0 13
34747: PUSH
34748: LD_VAR 0 15
34752: PUSH
34753: LD_INT 2
34755: ARRAY
34756: ST_TO_ADDR
// for i = 1 to hexes do
34757: LD_ADDR_VAR 0 7
34761: PUSH
34762: DOUBLE
34763: LD_INT 1
34765: DEC
34766: ST_TO_ADDR
34767: LD_VAR 0 12
34771: PUSH
34772: FOR_TO
34773: IFFALSE 35103
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34775: LD_VAR 0 12
34779: PUSH
34780: LD_VAR 0 7
34784: ARRAY
34785: PUSH
34786: LD_INT 1
34788: ARRAY
34789: PPUSH
34790: LD_VAR 0 12
34794: PUSH
34795: LD_VAR 0 7
34799: ARRAY
34800: PUSH
34801: LD_INT 2
34803: ARRAY
34804: PPUSH
34805: CALL_OW 488
34809: NOT
34810: PUSH
34811: LD_VAR 0 12
34815: PUSH
34816: LD_VAR 0 7
34820: ARRAY
34821: PUSH
34822: LD_INT 1
34824: ARRAY
34825: PPUSH
34826: LD_VAR 0 12
34830: PUSH
34831: LD_VAR 0 7
34835: ARRAY
34836: PUSH
34837: LD_INT 2
34839: ARRAY
34840: PPUSH
34841: CALL_OW 428
34845: PUSH
34846: LD_INT 0
34848: GREATER
34849: OR
34850: PUSH
34851: LD_VAR 0 12
34855: PUSH
34856: LD_VAR 0 7
34860: ARRAY
34861: PUSH
34862: LD_INT 1
34864: ARRAY
34865: PPUSH
34866: LD_VAR 0 12
34870: PUSH
34871: LD_VAR 0 7
34875: ARRAY
34876: PUSH
34877: LD_INT 2
34879: ARRAY
34880: PPUSH
34881: CALL_OW 351
34885: OR
34886: IFFALSE 34892
// exit ;
34888: POP
34889: POP
34890: GO 35184
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34892: LD_ADDR_VAR 0 8
34896: PUSH
34897: LD_VAR 0 12
34901: PUSH
34902: LD_VAR 0 7
34906: ARRAY
34907: PUSH
34908: LD_INT 1
34910: ARRAY
34911: PPUSH
34912: LD_VAR 0 12
34916: PUSH
34917: LD_VAR 0 7
34921: ARRAY
34922: PUSH
34923: LD_INT 2
34925: ARRAY
34926: PPUSH
34927: CALL_OW 546
34931: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34932: LD_VAR 0 8
34936: PUSH
34937: LD_INT 1
34939: ARRAY
34940: PUSH
34941: LD_VAR 0 8
34945: PUSH
34946: LD_INT 2
34948: ARRAY
34949: PUSH
34950: LD_VAR 0 13
34954: PUSH
34955: LD_INT 2
34957: PLUS
34958: GREATER
34959: OR
34960: PUSH
34961: LD_VAR 0 8
34965: PUSH
34966: LD_INT 2
34968: ARRAY
34969: PUSH
34970: LD_VAR 0 13
34974: PUSH
34975: LD_INT 2
34977: MINUS
34978: LESS
34979: OR
34980: PUSH
34981: LD_VAR 0 8
34985: PUSH
34986: LD_INT 3
34988: ARRAY
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: LD_INT 8
34995: PUSH
34996: LD_INT 9
34998: PUSH
34999: LD_INT 10
35001: PUSH
35002: LD_INT 11
35004: PUSH
35005: LD_INT 12
35007: PUSH
35008: LD_INT 13
35010: PUSH
35011: LD_INT 16
35013: PUSH
35014: LD_INT 17
35016: PUSH
35017: LD_INT 18
35019: PUSH
35020: LD_INT 19
35022: PUSH
35023: LD_INT 20
35025: PUSH
35026: LD_INT 21
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: IN
35044: NOT
35045: OR
35046: PUSH
35047: LD_VAR 0 8
35051: PUSH
35052: LD_INT 5
35054: ARRAY
35055: NOT
35056: OR
35057: PUSH
35058: LD_VAR 0 8
35062: PUSH
35063: LD_INT 6
35065: ARRAY
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 2
35072: PUSH
35073: LD_INT 7
35075: PUSH
35076: LD_INT 9
35078: PUSH
35079: LD_INT 10
35081: PUSH
35082: LD_INT 11
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: IN
35093: NOT
35094: OR
35095: IFFALSE 35101
// exit ;
35097: POP
35098: POP
35099: GO 35184
// end ;
35101: GO 34772
35103: POP
35104: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35105: LD_VAR 0 9
35109: PPUSH
35110: LD_VAR 0 3
35114: PPUSH
35115: LD_VAR 0 4
35119: PPUSH
35120: LD_INT 20
35122: PPUSH
35123: CALL 27130 0 4
35127: PUSH
35128: LD_INT 4
35130: ARRAY
35131: IFFALSE 35135
// exit ;
35133: GO 35184
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35135: LD_VAR 0 2
35139: PUSH
35140: LD_INT 29
35142: PUSH
35143: LD_INT 30
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: IN
35150: PUSH
35151: LD_VAR 0 3
35155: PPUSH
35156: LD_VAR 0 4
35160: PPUSH
35161: LD_VAR 0 9
35165: PPUSH
35166: CALL_OW 440
35170: NOT
35171: AND
35172: IFFALSE 35176
// exit ;
35174: GO 35184
// result := true ;
35176: LD_ADDR_VAR 0 6
35180: PUSH
35181: LD_INT 1
35183: ST_TO_ADDR
// end ;
35184: LD_VAR 0 6
35188: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35189: LD_INT 0
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
35213: PPUSH
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
35239: PPUSH
35240: PPUSH
35241: PPUSH
35242: PPUSH
35243: PPUSH
35244: PPUSH
35245: PPUSH
35246: PPUSH
35247: PPUSH
35248: PPUSH
// result = [ ] ;
35249: LD_ADDR_VAR 0 7
35253: PUSH
35254: EMPTY
35255: ST_TO_ADDR
// temp_list = [ ] ;
35256: LD_ADDR_VAR 0 9
35260: PUSH
35261: EMPTY
35262: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35263: LD_VAR 0 4
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: LD_INT 3
35279: PUSH
35280: LD_INT 4
35282: PUSH
35283: LD_INT 5
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: IN
35294: NOT
35295: PUSH
35296: LD_VAR 0 1
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: IN
35311: PUSH
35312: LD_VAR 0 5
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 2
35322: PUSH
35323: LD_INT 3
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: IN
35331: NOT
35332: AND
35333: OR
35334: IFFALSE 35338
// exit ;
35336: GO 53729
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35338: LD_VAR 0 1
35342: PUSH
35343: LD_INT 6
35345: PUSH
35346: LD_INT 7
35348: PUSH
35349: LD_INT 8
35351: PUSH
35352: LD_INT 13
35354: PUSH
35355: LD_INT 12
35357: PUSH
35358: LD_INT 15
35360: PUSH
35361: LD_INT 11
35363: PUSH
35364: LD_INT 14
35366: PUSH
35367: LD_INT 10
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: IN
35381: IFFALSE 35391
// btype = b_lab ;
35383: LD_ADDR_VAR 0 1
35387: PUSH
35388: LD_INT 6
35390: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35391: LD_VAR 0 6
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: LD_INT 2
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: IN
35410: NOT
35411: PUSH
35412: LD_VAR 0 1
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: LD_INT 2
35425: PUSH
35426: LD_INT 3
35428: PUSH
35429: LD_INT 6
35431: PUSH
35432: LD_INT 36
35434: PUSH
35435: LD_INT 4
35437: PUSH
35438: LD_INT 5
35440: PUSH
35441: LD_INT 31
35443: PUSH
35444: LD_INT 32
35446: PUSH
35447: LD_INT 33
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: IN
35463: NOT
35464: PUSH
35465: LD_VAR 0 6
35469: PUSH
35470: LD_INT 1
35472: EQUAL
35473: AND
35474: OR
35475: PUSH
35476: LD_VAR 0 1
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: LD_INT 3
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: IN
35491: NOT
35492: PUSH
35493: LD_VAR 0 6
35497: PUSH
35498: LD_INT 2
35500: EQUAL
35501: AND
35502: OR
35503: IFFALSE 35513
// mode = 0 ;
35505: LD_ADDR_VAR 0 6
35509: PUSH
35510: LD_INT 0
35512: ST_TO_ADDR
// case mode of 0 :
35513: LD_VAR 0 6
35517: PUSH
35518: LD_INT 0
35520: DOUBLE
35521: EQUAL
35522: IFTRUE 35526
35524: GO 46979
35526: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35527: LD_ADDR_VAR 0 11
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 0
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 1
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 2
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 3
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 3
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: LD_INT 2
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35720: LD_ADDR_VAR 0 12
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 1
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 3
35877: NEG
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 3
35888: NEG
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35916: LD_ADDR_VAR 0 13
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: LD_INT 1
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: NEG
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: LD_INT 2
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 2
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: NEG
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 2
36051: NEG
36052: PUSH
36053: LD_INT 2
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: NEG
36064: PUSH
36065: LD_INT 3
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 3
36075: NEG
36076: PUSH
36077: LD_INT 2
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 3
36087: NEG
36088: PUSH
36089: LD_INT 3
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36115: LD_ADDR_VAR 0 14
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: LD_INT 2
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 2
36211: NEG
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: LD_INT 3
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 3
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: LD_INT 2
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36311: LD_ADDR_VAR 0 15
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: NEG
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: NEG
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 3
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 3
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36504: LD_ADDR_VAR 0 16
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 2
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 2
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: NEG
36640: PUSH
36641: LD_INT 2
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 3
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 3
36661: PUSH
36662: LD_INT 3
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: LD_INT 3
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36697: LD_ADDR_VAR 0 17
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: NEG
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 2
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: LD_INT 2
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 2
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 2
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 2
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: NEG
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36927: LD_ADDR_VAR 0 18
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 2
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: LD_INT 2
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 2
37114: NEG
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: NEG
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37157: LD_ADDR_VAR 0 19
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: LD_INT 1
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 2
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: LD_INT 2
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: NEG
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37387: LD_ADDR_VAR 0 20
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: NEG
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37617: LD_ADDR_VAR 0 21
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: NEG
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 2
37702: NEG
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: LD_INT 2
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37847: LD_ADDR_VAR 0 22
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: LD_INT 2
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 2
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: LD_INT 2
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 2
38046: NEG
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38077: LD_ADDR_VAR 0 23
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: LD_INT 2
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: LD_INT 2
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: LD_INT 3
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: LD_INT 3
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: LD_INT 1
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38357: LD_ADDR_VAR 0 24
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: LD_INT 1
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: LD_INT 2
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: LD_INT 2
38453: NEG
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 2
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 2
38556: NEG
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 2
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 3
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 3
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38633: LD_ADDR_VAR 0 25
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 0
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 1
38702: NEG
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: LD_INT 2
38729: NEG
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 2
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 2
38809: NEG
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 2
38820: NEG
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 2
38832: NEG
38833: PUSH
38834: LD_INT 2
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 3
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 3
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: LD_INT 3
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38907: LD_ADDR_VAR 0 26
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 2
39094: NEG
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 2
39106: NEG
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 3
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39183: LD_ADDR_VAR 0 27
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 1
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 2
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: LD_INT 2
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 2
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39463: LD_ADDR_VAR 0 28
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: LD_INT 2
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: LD_INT 2
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 2
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 2
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 2
39639: NEG
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: LD_INT 3
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 3
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 3
39698: NEG
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 3
39710: NEG
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39745: LD_ADDR_VAR 0 29
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: LD_INT 2
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: LD_INT 3
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 3
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 3
39989: NEG
39990: PUSH
39991: LD_INT 2
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40024: LD_ADDR_VAR 0 30
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 3
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 3
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: LD_INT 3
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 3
40267: NEG
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40302: LD_ADDR_VAR 0 31
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: LD_INT 3
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 3
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 3
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 3
40545: NEG
40546: PUSH
40547: LD_INT 2
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40580: LD_ADDR_VAR 0 32
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: LD_INT 2
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 3
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: LD_INT 2
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 3
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: LD_INT 3
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 3
40823: NEG
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40858: LD_ADDR_VAR 0 33
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: LD_INT 2
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: NEG
41049: PUSH
41050: LD_INT 3
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 3
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: LD_INT 3
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 3
41102: NEG
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41137: LD_ADDR_VAR 0 34
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 1
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: LD_INT 3
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 3
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: LD_INT 3
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 3
41382: NEG
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41417: LD_ADDR_VAR 0 35
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41529: LD_ADDR_VAR 0 36
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41641: LD_ADDR_VAR 0 37
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41753: LD_ADDR_VAR 0 38
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41865: LD_ADDR_VAR 0 39
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41977: LD_ADDR_VAR 0 40
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42089: LD_ADDR_VAR 0 41
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 2
42255: NEG
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: LD_INT 3
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 3
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 3
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 3
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 3
42332: PUSH
42333: LD_INT 3
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 3
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 3
42363: NEG
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 3
42374: NEG
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 3
42386: NEG
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 3
42398: NEG
42399: PUSH
42400: LD_INT 3
42402: NEG
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42439: LD_ADDR_VAR 0 42
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 2
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: LD_INT 2
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: LD_INT 2
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: LD_INT 3
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 3
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 3
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 3
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 3
42685: PUSH
42686: LD_INT 3
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 3
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 3
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 3
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42789: LD_ADDR_VAR 0 43
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 3
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 3
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 3
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 3
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 3
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 3
43085: NEG
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 3
43096: NEG
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43137: LD_ADDR_VAR 0 44
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 2
43327: NEG
43328: PUSH
43329: LD_INT 3
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 3
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 3
43422: NEG
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 3
43446: NEG
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43487: LD_ADDR_VAR 0 45
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: NEG
43678: PUSH
43679: LD_INT 3
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 3
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 3
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 3
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 3
43784: NEG
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 3
43796: NEG
43797: PUSH
43798: LD_INT 3
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43837: LD_ADDR_VAR 0 46
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: LD_INT 3
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 3
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 3
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 3
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 3
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 3
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 3
44133: NEG
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 3
44144: NEG
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44185: LD_ADDR_VAR 0 47
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44336: LD_ADDR_VAR 0 48
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44483: LD_ADDR_VAR 0 49
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44627: LD_ADDR_VAR 0 50
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44771: LD_ADDR_VAR 0 51
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44918: LD_ADDR_VAR 0 52
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45069: LD_ADDR_VAR 0 53
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45299: LD_ADDR_VAR 0 54
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45529: LD_ADDR_VAR 0 55
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45759: LD_ADDR_VAR 0 56
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45989: LD_ADDR_VAR 0 57
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46219: LD_ADDR_VAR 0 58
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46449: LD_ADDR_VAR 0 59
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46537: LD_ADDR_VAR 0 60
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46625: LD_ADDR_VAR 0 61
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46713: LD_ADDR_VAR 0 62
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46801: LD_ADDR_VAR 0 63
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46889: LD_ADDR_VAR 0 64
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: ST_TO_ADDR
// end ; 1 :
46977: GO 52874
46979: LD_INT 1
46981: DOUBLE
46982: EQUAL
46983: IFTRUE 46987
46985: GO 49610
46987: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46988: LD_ADDR_VAR 0 11
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 3
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: LIST
47031: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47032: LD_ADDR_VAR 0 12
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47073: LD_ADDR_VAR 0 13
47077: PUSH
47078: LD_INT 3
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 3
47090: PUSH
47091: LD_INT 3
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47113: LD_ADDR_VAR 0 14
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: LD_INT 3
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 3
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47154: LD_ADDR_VAR 0 15
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 3
47172: NEG
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 3
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47198: LD_ADDR_VAR 0 16
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: LD_INT 3
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 3
47217: NEG
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 3
47229: NEG
47230: PUSH
47231: LD_INT 3
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47244: LD_ADDR_VAR 0 17
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 3
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47288: LD_ADDR_VAR 0 18
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47329: LD_ADDR_VAR 0 19
47333: PUSH
47334: LD_INT 3
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47369: LD_ADDR_VAR 0 20
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47410: LD_ADDR_VAR 0 21
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 3
47428: NEG
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47454: LD_ADDR_VAR 0 22
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: LD_INT 3
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: NEG
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 3
47485: NEG
47486: PUSH
47487: LD_INT 3
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47500: LD_ADDR_VAR 0 23
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 3
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 4
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: LIST
47543: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47544: LD_ADDR_VAR 0 24
47548: PUSH
47549: LD_INT 3
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 4
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47585: LD_ADDR_VAR 0 25
47589: PUSH
47590: LD_INT 3
47592: PUSH
47593: LD_INT 3
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 4
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: LD_INT 4
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47625: LD_ADDR_VAR 0 26
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 4
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 3
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47666: LD_ADDR_VAR 0 27
47670: PUSH
47671: LD_INT 3
47673: NEG
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 3
47684: NEG
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 4
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47710: LD_ADDR_VAR 0 28
47714: PUSH
47715: LD_INT 3
47717: NEG
47718: PUSH
47719: LD_INT 3
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 3
47729: NEG
47730: PUSH
47731: LD_INT 4
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 4
47741: NEG
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47756: LD_ADDR_VAR 0 29
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: LD_INT 3
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 3
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 4
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 4
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 3
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 5
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 5
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 4
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 6
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 6
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 5
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47911: LD_ADDR_VAR 0 30
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 4
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 4
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 4
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 5
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 5
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 5
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 6
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 6
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48054: LD_ADDR_VAR 0 31
48058: PUSH
48059: LD_INT 3
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: LD_INT 3
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 4
48091: PUSH
48092: LD_INT 3
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 4
48101: PUSH
48102: LD_INT 4
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: PUSH
48112: LD_INT 4
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 5
48121: PUSH
48122: LD_INT 4
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 5
48131: PUSH
48132: LD_INT 5
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 4
48141: PUSH
48142: LD_INT 5
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 6
48151: PUSH
48152: LD_INT 5
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 6
48161: PUSH
48162: LD_INT 6
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 5
48171: PUSH
48172: LD_INT 6
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48193: LD_ADDR_VAR 0 32
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 3
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 4
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 4
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 3
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 5
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 5
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 4
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 6
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 6
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 5
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48336: LD_ADDR_VAR 0 33
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 3
48354: NEG
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 3
48377: NEG
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 4
48388: NEG
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 4
48399: NEG
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 4
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 5
48422: NEG
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 5
48433: NEG
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 5
48445: NEG
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 6
48456: NEG
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 6
48467: NEG
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48491: LD_ADDR_VAR 0 34
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 3
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: NEG
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 3
48534: NEG
48535: PUSH
48536: LD_INT 4
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 4
48546: NEG
48547: PUSH
48548: LD_INT 3
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 4
48558: NEG
48559: PUSH
48560: LD_INT 4
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 4
48570: NEG
48571: PUSH
48572: LD_INT 5
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 5
48582: NEG
48583: PUSH
48584: LD_INT 4
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 5
48594: NEG
48595: PUSH
48596: LD_INT 5
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 5
48606: NEG
48607: PUSH
48608: LD_INT 6
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 6
48618: NEG
48619: PUSH
48620: LD_INT 5
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 6
48630: NEG
48631: PUSH
48632: LD_INT 6
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48654: LD_ADDR_VAR 0 41
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: LIST
48697: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48698: LD_ADDR_VAR 0 42
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48739: LD_ADDR_VAR 0 43
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 3
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: LIST
48778: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48779: LD_ADDR_VAR 0 44
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48820: LD_ADDR_VAR 0 45
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: LIST
48863: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48864: LD_ADDR_VAR 0 46
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: LD_INT 3
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 3
48895: NEG
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48910: LD_ADDR_VAR 0 47
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 3
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48943: LD_ADDR_VAR 0 48
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48974: LD_ADDR_VAR 0 49
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49003: LD_ADDR_VAR 0 50
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49032: LD_ADDR_VAR 0 51
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49063: LD_ADDR_VAR 0 52
49067: PUSH
49068: LD_INT 3
49070: NEG
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 3
49082: NEG
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49096: LD_ADDR_VAR 0 53
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 3
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 3
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49140: LD_ADDR_VAR 0 54
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 3
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 3
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49181: LD_ADDR_VAR 0 55
49185: PUSH
49186: LD_INT 3
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 3
49198: PUSH
49199: LD_INT 3
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 3
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49221: LD_ADDR_VAR 0 56
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: LD_INT 3
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: LD_INT 3
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: LIST
49261: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49262: LD_ADDR_VAR 0 57
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 3
49280: NEG
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 3
49291: NEG
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: LIST
49305: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49306: LD_ADDR_VAR 0 58
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 3
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 3
49337: NEG
49338: PUSH
49339: LD_INT 3
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49352: LD_ADDR_VAR 0 59
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49396: LD_ADDR_VAR 0 60
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: LIST
49436: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49437: LD_ADDR_VAR 0 61
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49477: LD_ADDR_VAR 0 62
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49518: LD_ADDR_VAR 0 63
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: LIST
49561: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49562: LD_ADDR_VAR 0 64
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: LIST
49607: ST_TO_ADDR
// end ; 2 :
49608: GO 52874
49610: LD_INT 2
49612: DOUBLE
49613: EQUAL
49614: IFTRUE 49618
49616: GO 52873
49618: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49619: LD_ADDR_VAR 0 29
49623: PUSH
49624: LD_INT 4
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 4
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 5
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 5
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 4
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 3
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 3
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 5
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 3
49719: PUSH
49720: LD_INT 3
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 4
49739: PUSH
49740: LD_INT 3
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 4
49749: PUSH
49750: LD_INT 4
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 3
49759: PUSH
49760: LD_INT 4
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 3
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 4
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 4
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 4
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 3
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 4
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 5
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 5
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 4
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: LD_INT 5
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: LD_INT 3
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 3
49902: NEG
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 3
49947: NEG
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 4
49958: NEG
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 4
49969: NEG
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 4
49981: NEG
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 4
50004: NEG
50005: PUSH
50006: LD_INT 4
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 4
50016: NEG
50017: PUSH
50018: LD_INT 5
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 3
50028: NEG
50029: PUSH
50030: LD_INT 4
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: LD_INT 3
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 4
50052: NEG
50053: PUSH
50054: LD_INT 3
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 5
50064: NEG
50065: PUSH
50066: LD_INT 4
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 5
50076: NEG
50077: PUSH
50078: LD_INT 5
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 3
50088: NEG
50089: PUSH
50090: LD_INT 5
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 5
50100: NEG
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50157: LD_ADDR_VAR 0 30
50161: PUSH
50162: LD_INT 4
50164: PUSH
50165: LD_INT 4
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 4
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 5
50184: PUSH
50185: LD_INT 4
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 5
50194: PUSH
50195: LD_INT 5
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 4
50204: PUSH
50205: LD_INT 5
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: LD_INT 4
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 5
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: LD_INT 5
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 3
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 4
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 4
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 3
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: LD_INT 4
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 4
50347: NEG
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 4
50358: NEG
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 3
50370: NEG
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 3
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 4
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 5
50403: NEG
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 5
50414: NEG
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 5
50426: NEG
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 3
50449: NEG
50450: PUSH
50451: LD_INT 3
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 3
50461: NEG
50462: PUSH
50463: LD_INT 4
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: LD_INT 3
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 3
50497: NEG
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 4
50509: NEG
50510: PUSH
50511: LD_INT 3
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 4
50521: NEG
50522: PUSH
50523: LD_INT 4
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: LD_INT 4
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 4
50545: NEG
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 4
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 5
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 4
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 3
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 3
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 4
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 5
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 3
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: LD_INT 5
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50704: LD_ADDR_VAR 0 31
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 4
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 4
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 5
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 5
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: LD_INT 4
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: LD_INT 5
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 3
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: NEG
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 3
50815: NEG
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 3
50849: NEG
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 4
50860: NEG
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 4
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 4
50883: NEG
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: NEG
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 4
50906: NEG
50907: PUSH
50908: LD_INT 4
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 4
50918: NEG
50919: PUSH
50920: LD_INT 5
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: LD_INT 4
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: NEG
50943: PUSH
50944: LD_INT 3
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 4
50954: NEG
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 5
50966: NEG
50967: PUSH
50968: LD_INT 4
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 5
50978: NEG
50979: PUSH
50980: LD_INT 5
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: LD_INT 5
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 5
51002: NEG
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 4
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 3
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: LD_INT 3
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 4
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 4
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 4
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 5
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 5
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 4
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 5
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51254: LD_ADDR_VAR 0 32
51258: PUSH
51259: LD_INT 4
51261: NEG
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 4
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: NEG
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: NEG
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 4
51306: NEG
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 5
51317: NEG
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 5
51328: NEG
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 5
51340: NEG
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 3
51352: NEG
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: LD_INT 4
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: LD_INT 3
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 3
51411: NEG
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 4
51423: NEG
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 4
51435: NEG
51436: PUSH
51437: LD_INT 4
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 4
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 4
51459: NEG
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 4
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 5
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 4
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 3
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: LD_INT 4
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 5
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: LD_INT 5
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 3
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 4
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 4
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 4
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 4
51666: PUSH
51667: LD_INT 4
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 4
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 5
51686: PUSH
51687: LD_INT 4
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 5
51696: PUSH
51697: LD_INT 5
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 4
51706: PUSH
51707: LD_INT 5
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 4
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 5
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: LD_INT 5
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51801: LD_ADDR_VAR 0 33
51805: PUSH
51806: LD_INT 4
51808: NEG
51809: PUSH
51810: LD_INT 4
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 4
51820: NEG
51821: PUSH
51822: LD_INT 5
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 4
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 4
51856: NEG
51857: PUSH
51858: LD_INT 3
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 5
51868: NEG
51869: PUSH
51870: LD_INT 4
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 5
51880: NEG
51881: PUSH
51882: LD_INT 5
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 3
51892: NEG
51893: PUSH
51894: LD_INT 5
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 5
51904: NEG
51905: PUSH
51906: LD_INT 3
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 3
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: LD_INT 4
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 3
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 3
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 4
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 4
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 4
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 4
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 5
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 5
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 4
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 3
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 5
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 4
52131: PUSH
52132: LD_INT 3
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 4
52141: PUSH
52142: LD_INT 4
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: LD_INT 4
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 4
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 4
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 4
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 4
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 5
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: LD_INT 5
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 4
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: LD_INT 3
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 5
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: LD_INT 3
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52339: LD_ADDR_VAR 0 34
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 4
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 5
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 4
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 3
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 3
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 4
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 5
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 5
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 4
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 4
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 3
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 4
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 4
52541: PUSH
52542: LD_INT 4
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 4
52551: PUSH
52552: LD_INT 3
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 5
52561: PUSH
52562: LD_INT 4
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 5
52571: PUSH
52572: LD_INT 5
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 4
52581: PUSH
52582: LD_INT 5
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 4
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 5
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: LD_INT 5
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 4
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 4
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 4
52724: NEG
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 4
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: NEG
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 4
52769: NEG
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 5
52780: NEG
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 5
52791: NEG
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 5
52803: NEG
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: NEG
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: ST_TO_ADDR
// end ; end ;
52871: GO 52874
52873: POP
// case btype of b_depot , b_warehouse :
52874: LD_VAR 0 1
52878: PUSH
52879: LD_INT 0
52881: DOUBLE
52882: EQUAL
52883: IFTRUE 52893
52885: LD_INT 1
52887: DOUBLE
52888: EQUAL
52889: IFTRUE 52893
52891: GO 53094
52893: POP
// case nation of nation_american :
52894: LD_VAR 0 5
52898: PUSH
52899: LD_INT 1
52901: DOUBLE
52902: EQUAL
52903: IFTRUE 52907
52905: GO 52963
52907: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52908: LD_ADDR_VAR 0 9
52912: PUSH
52913: LD_VAR 0 11
52917: PUSH
52918: LD_VAR 0 12
52922: PUSH
52923: LD_VAR 0 13
52927: PUSH
52928: LD_VAR 0 14
52932: PUSH
52933: LD_VAR 0 15
52937: PUSH
52938: LD_VAR 0 16
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: PUSH
52951: LD_VAR 0 4
52955: PUSH
52956: LD_INT 1
52958: PLUS
52959: ARRAY
52960: ST_TO_ADDR
52961: GO 53092
52963: LD_INT 2
52965: DOUBLE
52966: EQUAL
52967: IFTRUE 52971
52969: GO 53027
52971: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52972: LD_ADDR_VAR 0 9
52976: PUSH
52977: LD_VAR 0 17
52981: PUSH
52982: LD_VAR 0 18
52986: PUSH
52987: LD_VAR 0 19
52991: PUSH
52992: LD_VAR 0 20
52996: PUSH
52997: LD_VAR 0 21
53001: PUSH
53002: LD_VAR 0 22
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: PUSH
53015: LD_VAR 0 4
53019: PUSH
53020: LD_INT 1
53022: PLUS
53023: ARRAY
53024: ST_TO_ADDR
53025: GO 53092
53027: LD_INT 3
53029: DOUBLE
53030: EQUAL
53031: IFTRUE 53035
53033: GO 53091
53035: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53036: LD_ADDR_VAR 0 9
53040: PUSH
53041: LD_VAR 0 23
53045: PUSH
53046: LD_VAR 0 24
53050: PUSH
53051: LD_VAR 0 25
53055: PUSH
53056: LD_VAR 0 26
53060: PUSH
53061: LD_VAR 0 27
53065: PUSH
53066: LD_VAR 0 28
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: PUSH
53079: LD_VAR 0 4
53083: PUSH
53084: LD_INT 1
53086: PLUS
53087: ARRAY
53088: ST_TO_ADDR
53089: GO 53092
53091: POP
53092: GO 53647
53094: LD_INT 2
53096: DOUBLE
53097: EQUAL
53098: IFTRUE 53108
53100: LD_INT 3
53102: DOUBLE
53103: EQUAL
53104: IFTRUE 53108
53106: GO 53164
53108: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53109: LD_ADDR_VAR 0 9
53113: PUSH
53114: LD_VAR 0 29
53118: PUSH
53119: LD_VAR 0 30
53123: PUSH
53124: LD_VAR 0 31
53128: PUSH
53129: LD_VAR 0 32
53133: PUSH
53134: LD_VAR 0 33
53138: PUSH
53139: LD_VAR 0 34
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: PUSH
53152: LD_VAR 0 4
53156: PUSH
53157: LD_INT 1
53159: PLUS
53160: ARRAY
53161: ST_TO_ADDR
53162: GO 53647
53164: LD_INT 16
53166: DOUBLE
53167: EQUAL
53168: IFTRUE 53226
53170: LD_INT 17
53172: DOUBLE
53173: EQUAL
53174: IFTRUE 53226
53176: LD_INT 18
53178: DOUBLE
53179: EQUAL
53180: IFTRUE 53226
53182: LD_INT 19
53184: DOUBLE
53185: EQUAL
53186: IFTRUE 53226
53188: LD_INT 22
53190: DOUBLE
53191: EQUAL
53192: IFTRUE 53226
53194: LD_INT 20
53196: DOUBLE
53197: EQUAL
53198: IFTRUE 53226
53200: LD_INT 21
53202: DOUBLE
53203: EQUAL
53204: IFTRUE 53226
53206: LD_INT 23
53208: DOUBLE
53209: EQUAL
53210: IFTRUE 53226
53212: LD_INT 24
53214: DOUBLE
53215: EQUAL
53216: IFTRUE 53226
53218: LD_INT 25
53220: DOUBLE
53221: EQUAL
53222: IFTRUE 53226
53224: GO 53282
53226: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53227: LD_ADDR_VAR 0 9
53231: PUSH
53232: LD_VAR 0 35
53236: PUSH
53237: LD_VAR 0 36
53241: PUSH
53242: LD_VAR 0 37
53246: PUSH
53247: LD_VAR 0 38
53251: PUSH
53252: LD_VAR 0 39
53256: PUSH
53257: LD_VAR 0 40
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: PUSH
53270: LD_VAR 0 4
53274: PUSH
53275: LD_INT 1
53277: PLUS
53278: ARRAY
53279: ST_TO_ADDR
53280: GO 53647
53282: LD_INT 6
53284: DOUBLE
53285: EQUAL
53286: IFTRUE 53338
53288: LD_INT 7
53290: DOUBLE
53291: EQUAL
53292: IFTRUE 53338
53294: LD_INT 8
53296: DOUBLE
53297: EQUAL
53298: IFTRUE 53338
53300: LD_INT 13
53302: DOUBLE
53303: EQUAL
53304: IFTRUE 53338
53306: LD_INT 12
53308: DOUBLE
53309: EQUAL
53310: IFTRUE 53338
53312: LD_INT 15
53314: DOUBLE
53315: EQUAL
53316: IFTRUE 53338
53318: LD_INT 11
53320: DOUBLE
53321: EQUAL
53322: IFTRUE 53338
53324: LD_INT 14
53326: DOUBLE
53327: EQUAL
53328: IFTRUE 53338
53330: LD_INT 10
53332: DOUBLE
53333: EQUAL
53334: IFTRUE 53338
53336: GO 53394
53338: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53339: LD_ADDR_VAR 0 9
53343: PUSH
53344: LD_VAR 0 41
53348: PUSH
53349: LD_VAR 0 42
53353: PUSH
53354: LD_VAR 0 43
53358: PUSH
53359: LD_VAR 0 44
53363: PUSH
53364: LD_VAR 0 45
53368: PUSH
53369: LD_VAR 0 46
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: PUSH
53382: LD_VAR 0 4
53386: PUSH
53387: LD_INT 1
53389: PLUS
53390: ARRAY
53391: ST_TO_ADDR
53392: GO 53647
53394: LD_INT 36
53396: DOUBLE
53397: EQUAL
53398: IFTRUE 53402
53400: GO 53458
53402: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53403: LD_ADDR_VAR 0 9
53407: PUSH
53408: LD_VAR 0 47
53412: PUSH
53413: LD_VAR 0 48
53417: PUSH
53418: LD_VAR 0 49
53422: PUSH
53423: LD_VAR 0 50
53427: PUSH
53428: LD_VAR 0 51
53432: PUSH
53433: LD_VAR 0 52
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: PUSH
53446: LD_VAR 0 4
53450: PUSH
53451: LD_INT 1
53453: PLUS
53454: ARRAY
53455: ST_TO_ADDR
53456: GO 53647
53458: LD_INT 4
53460: DOUBLE
53461: EQUAL
53462: IFTRUE 53484
53464: LD_INT 5
53466: DOUBLE
53467: EQUAL
53468: IFTRUE 53484
53470: LD_INT 34
53472: DOUBLE
53473: EQUAL
53474: IFTRUE 53484
53476: LD_INT 37
53478: DOUBLE
53479: EQUAL
53480: IFTRUE 53484
53482: GO 53540
53484: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53485: LD_ADDR_VAR 0 9
53489: PUSH
53490: LD_VAR 0 53
53494: PUSH
53495: LD_VAR 0 54
53499: PUSH
53500: LD_VAR 0 55
53504: PUSH
53505: LD_VAR 0 56
53509: PUSH
53510: LD_VAR 0 57
53514: PUSH
53515: LD_VAR 0 58
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: PUSH
53528: LD_VAR 0 4
53532: PUSH
53533: LD_INT 1
53535: PLUS
53536: ARRAY
53537: ST_TO_ADDR
53538: GO 53647
53540: LD_INT 31
53542: DOUBLE
53543: EQUAL
53544: IFTRUE 53590
53546: LD_INT 32
53548: DOUBLE
53549: EQUAL
53550: IFTRUE 53590
53552: LD_INT 33
53554: DOUBLE
53555: EQUAL
53556: IFTRUE 53590
53558: LD_INT 27
53560: DOUBLE
53561: EQUAL
53562: IFTRUE 53590
53564: LD_INT 26
53566: DOUBLE
53567: EQUAL
53568: IFTRUE 53590
53570: LD_INT 28
53572: DOUBLE
53573: EQUAL
53574: IFTRUE 53590
53576: LD_INT 29
53578: DOUBLE
53579: EQUAL
53580: IFTRUE 53590
53582: LD_INT 30
53584: DOUBLE
53585: EQUAL
53586: IFTRUE 53590
53588: GO 53646
53590: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53591: LD_ADDR_VAR 0 9
53595: PUSH
53596: LD_VAR 0 59
53600: PUSH
53601: LD_VAR 0 60
53605: PUSH
53606: LD_VAR 0 61
53610: PUSH
53611: LD_VAR 0 62
53615: PUSH
53616: LD_VAR 0 63
53620: PUSH
53621: LD_VAR 0 64
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: PUSH
53634: LD_VAR 0 4
53638: PUSH
53639: LD_INT 1
53641: PLUS
53642: ARRAY
53643: ST_TO_ADDR
53644: GO 53647
53646: POP
// temp_list2 = [ ] ;
53647: LD_ADDR_VAR 0 10
53651: PUSH
53652: EMPTY
53653: ST_TO_ADDR
// for i in temp_list do
53654: LD_ADDR_VAR 0 8
53658: PUSH
53659: LD_VAR 0 9
53663: PUSH
53664: FOR_IN
53665: IFFALSE 53717
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53667: LD_ADDR_VAR 0 10
53671: PUSH
53672: LD_VAR 0 10
53676: PUSH
53677: LD_VAR 0 8
53681: PUSH
53682: LD_INT 1
53684: ARRAY
53685: PUSH
53686: LD_VAR 0 2
53690: PLUS
53691: PUSH
53692: LD_VAR 0 8
53696: PUSH
53697: LD_INT 2
53699: ARRAY
53700: PUSH
53701: LD_VAR 0 3
53705: PLUS
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: ADD
53714: ST_TO_ADDR
53715: GO 53664
53717: POP
53718: POP
// result = temp_list2 ;
53719: LD_ADDR_VAR 0 7
53723: PUSH
53724: LD_VAR 0 10
53728: ST_TO_ADDR
// end ;
53729: LD_VAR 0 7
53733: RET
// export function EnemyInRange ( unit , dist ) ; begin
53734: LD_INT 0
53736: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53737: LD_ADDR_VAR 0 3
53741: PUSH
53742: LD_VAR 0 1
53746: PPUSH
53747: CALL_OW 255
53751: PPUSH
53752: LD_VAR 0 1
53756: PPUSH
53757: CALL_OW 250
53761: PPUSH
53762: LD_VAR 0 1
53766: PPUSH
53767: CALL_OW 251
53771: PPUSH
53772: LD_VAR 0 2
53776: PPUSH
53777: CALL 27130 0 4
53781: PUSH
53782: LD_INT 4
53784: ARRAY
53785: ST_TO_ADDR
// end ;
53786: LD_VAR 0 3
53790: RET
// export function PlayerSeeMe ( unit ) ; begin
53791: LD_INT 0
53793: PPUSH
// result := See ( your_side , unit ) ;
53794: LD_ADDR_VAR 0 2
53798: PUSH
53799: LD_OWVAR 2
53803: PPUSH
53804: LD_VAR 0 1
53808: PPUSH
53809: CALL_OW 292
53813: ST_TO_ADDR
// end ;
53814: LD_VAR 0 2
53818: RET
// export function ReverseDir ( unit ) ; begin
53819: LD_INT 0
53821: PPUSH
// if not unit then
53822: LD_VAR 0 1
53826: NOT
53827: IFFALSE 53831
// exit ;
53829: GO 53854
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53831: LD_ADDR_VAR 0 2
53835: PUSH
53836: LD_VAR 0 1
53840: PPUSH
53841: CALL_OW 254
53845: PUSH
53846: LD_INT 3
53848: PLUS
53849: PUSH
53850: LD_INT 6
53852: MOD
53853: ST_TO_ADDR
// end ;
53854: LD_VAR 0 2
53858: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53859: LD_INT 0
53861: PPUSH
53862: PPUSH
53863: PPUSH
53864: PPUSH
53865: PPUSH
// if not hexes then
53866: LD_VAR 0 2
53870: NOT
53871: IFFALSE 53875
// exit ;
53873: GO 54023
// dist := 9999 ;
53875: LD_ADDR_VAR 0 5
53879: PUSH
53880: LD_INT 9999
53882: ST_TO_ADDR
// for i = 1 to hexes do
53883: LD_ADDR_VAR 0 4
53887: PUSH
53888: DOUBLE
53889: LD_INT 1
53891: DEC
53892: ST_TO_ADDR
53893: LD_VAR 0 2
53897: PUSH
53898: FOR_TO
53899: IFFALSE 54011
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53901: LD_VAR 0 1
53905: PPUSH
53906: LD_VAR 0 2
53910: PUSH
53911: LD_VAR 0 4
53915: ARRAY
53916: PUSH
53917: LD_INT 1
53919: ARRAY
53920: PPUSH
53921: LD_VAR 0 2
53925: PUSH
53926: LD_VAR 0 4
53930: ARRAY
53931: PUSH
53932: LD_INT 2
53934: ARRAY
53935: PPUSH
53936: CALL_OW 297
53940: PUSH
53941: LD_VAR 0 5
53945: LESS
53946: IFFALSE 54009
// begin hex := hexes [ i ] ;
53948: LD_ADDR_VAR 0 7
53952: PUSH
53953: LD_VAR 0 2
53957: PUSH
53958: LD_VAR 0 4
53962: ARRAY
53963: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53964: LD_ADDR_VAR 0 5
53968: PUSH
53969: LD_VAR 0 1
53973: PPUSH
53974: LD_VAR 0 2
53978: PUSH
53979: LD_VAR 0 4
53983: ARRAY
53984: PUSH
53985: LD_INT 1
53987: ARRAY
53988: PPUSH
53989: LD_VAR 0 2
53993: PUSH
53994: LD_VAR 0 4
53998: ARRAY
53999: PUSH
54000: LD_INT 2
54002: ARRAY
54003: PPUSH
54004: CALL_OW 297
54008: ST_TO_ADDR
// end ; end ;
54009: GO 53898
54011: POP
54012: POP
// result := hex ;
54013: LD_ADDR_VAR 0 3
54017: PUSH
54018: LD_VAR 0 7
54022: ST_TO_ADDR
// end ;
54023: LD_VAR 0 3
54027: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54028: LD_INT 0
54030: PPUSH
54031: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54032: LD_VAR 0 1
54036: NOT
54037: PUSH
54038: LD_VAR 0 1
54042: PUSH
54043: LD_INT 21
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 23
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PPUSH
54067: CALL_OW 69
54071: IN
54072: NOT
54073: OR
54074: IFFALSE 54078
// exit ;
54076: GO 54125
// for i = 1 to 3 do
54078: LD_ADDR_VAR 0 3
54082: PUSH
54083: DOUBLE
54084: LD_INT 1
54086: DEC
54087: ST_TO_ADDR
54088: LD_INT 3
54090: PUSH
54091: FOR_TO
54092: IFFALSE 54123
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54094: LD_VAR 0 1
54098: PPUSH
54099: CALL_OW 250
54103: PPUSH
54104: LD_VAR 0 1
54108: PPUSH
54109: CALL_OW 251
54113: PPUSH
54114: LD_INT 1
54116: PPUSH
54117: CALL_OW 453
54121: GO 54091
54123: POP
54124: POP
// end ;
54125: LD_VAR 0 2
54129: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54130: LD_INT 0
54132: PPUSH
54133: PPUSH
54134: PPUSH
54135: PPUSH
54136: PPUSH
54137: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54138: LD_VAR 0 1
54142: NOT
54143: PUSH
54144: LD_VAR 0 2
54148: NOT
54149: OR
54150: PUSH
54151: LD_VAR 0 1
54155: PPUSH
54156: CALL_OW 314
54160: OR
54161: IFFALSE 54165
// exit ;
54163: GO 54606
// x := GetX ( enemy_unit ) ;
54165: LD_ADDR_VAR 0 7
54169: PUSH
54170: LD_VAR 0 2
54174: PPUSH
54175: CALL_OW 250
54179: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54180: LD_ADDR_VAR 0 8
54184: PUSH
54185: LD_VAR 0 2
54189: PPUSH
54190: CALL_OW 251
54194: ST_TO_ADDR
// if not x or not y then
54195: LD_VAR 0 7
54199: NOT
54200: PUSH
54201: LD_VAR 0 8
54205: NOT
54206: OR
54207: IFFALSE 54211
// exit ;
54209: GO 54606
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54211: LD_ADDR_VAR 0 6
54215: PUSH
54216: LD_VAR 0 7
54220: PPUSH
54221: LD_INT 0
54223: PPUSH
54224: LD_INT 4
54226: PPUSH
54227: CALL_OW 272
54231: PUSH
54232: LD_VAR 0 8
54236: PPUSH
54237: LD_INT 0
54239: PPUSH
54240: LD_INT 4
54242: PPUSH
54243: CALL_OW 273
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_VAR 0 7
54256: PPUSH
54257: LD_INT 1
54259: PPUSH
54260: LD_INT 4
54262: PPUSH
54263: CALL_OW 272
54267: PUSH
54268: LD_VAR 0 8
54272: PPUSH
54273: LD_INT 1
54275: PPUSH
54276: LD_INT 4
54278: PPUSH
54279: CALL_OW 273
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_VAR 0 7
54292: PPUSH
54293: LD_INT 2
54295: PPUSH
54296: LD_INT 4
54298: PPUSH
54299: CALL_OW 272
54303: PUSH
54304: LD_VAR 0 8
54308: PPUSH
54309: LD_INT 2
54311: PPUSH
54312: LD_INT 4
54314: PPUSH
54315: CALL_OW 273
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_VAR 0 7
54328: PPUSH
54329: LD_INT 3
54331: PPUSH
54332: LD_INT 4
54334: PPUSH
54335: CALL_OW 272
54339: PUSH
54340: LD_VAR 0 8
54344: PPUSH
54345: LD_INT 3
54347: PPUSH
54348: LD_INT 4
54350: PPUSH
54351: CALL_OW 273
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_VAR 0 7
54364: PPUSH
54365: LD_INT 4
54367: PPUSH
54368: LD_INT 4
54370: PPUSH
54371: CALL_OW 272
54375: PUSH
54376: LD_VAR 0 8
54380: PPUSH
54381: LD_INT 4
54383: PPUSH
54384: LD_INT 4
54386: PPUSH
54387: CALL_OW 273
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_VAR 0 7
54400: PPUSH
54401: LD_INT 5
54403: PPUSH
54404: LD_INT 4
54406: PPUSH
54407: CALL_OW 272
54411: PUSH
54412: LD_VAR 0 8
54416: PPUSH
54417: LD_INT 5
54419: PPUSH
54420: LD_INT 4
54422: PPUSH
54423: CALL_OW 273
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: ST_TO_ADDR
// for i = tmp downto 1 do
54440: LD_ADDR_VAR 0 4
54444: PUSH
54445: DOUBLE
54446: LD_VAR 0 6
54450: INC
54451: ST_TO_ADDR
54452: LD_INT 1
54454: PUSH
54455: FOR_DOWNTO
54456: IFFALSE 54557
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54458: LD_VAR 0 6
54462: PUSH
54463: LD_VAR 0 4
54467: ARRAY
54468: PUSH
54469: LD_INT 1
54471: ARRAY
54472: PPUSH
54473: LD_VAR 0 6
54477: PUSH
54478: LD_VAR 0 4
54482: ARRAY
54483: PUSH
54484: LD_INT 2
54486: ARRAY
54487: PPUSH
54488: CALL_OW 488
54492: NOT
54493: PUSH
54494: LD_VAR 0 6
54498: PUSH
54499: LD_VAR 0 4
54503: ARRAY
54504: PUSH
54505: LD_INT 1
54507: ARRAY
54508: PPUSH
54509: LD_VAR 0 6
54513: PUSH
54514: LD_VAR 0 4
54518: ARRAY
54519: PUSH
54520: LD_INT 2
54522: ARRAY
54523: PPUSH
54524: CALL_OW 428
54528: PUSH
54529: LD_INT 0
54531: NONEQUAL
54532: OR
54533: IFFALSE 54555
// tmp := Delete ( tmp , i ) ;
54535: LD_ADDR_VAR 0 6
54539: PUSH
54540: LD_VAR 0 6
54544: PPUSH
54545: LD_VAR 0 4
54549: PPUSH
54550: CALL_OW 3
54554: ST_TO_ADDR
54555: GO 54455
54557: POP
54558: POP
// j := GetClosestHex ( unit , tmp ) ;
54559: LD_ADDR_VAR 0 5
54563: PUSH
54564: LD_VAR 0 1
54568: PPUSH
54569: LD_VAR 0 6
54573: PPUSH
54574: CALL 53859 0 2
54578: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54579: LD_VAR 0 1
54583: PPUSH
54584: LD_VAR 0 5
54588: PUSH
54589: LD_INT 1
54591: ARRAY
54592: PPUSH
54593: LD_VAR 0 5
54597: PUSH
54598: LD_INT 2
54600: ARRAY
54601: PPUSH
54602: CALL_OW 111
// end ;
54606: LD_VAR 0 3
54610: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54611: LD_INT 0
54613: PPUSH
54614: PPUSH
54615: PPUSH
// uc_side = 0 ;
54616: LD_ADDR_OWVAR 20
54620: PUSH
54621: LD_INT 0
54623: ST_TO_ADDR
// uc_nation = 0 ;
54624: LD_ADDR_OWVAR 21
54628: PUSH
54629: LD_INT 0
54631: ST_TO_ADDR
// InitHc_All ( ) ;
54632: CALL_OW 584
// InitVc ;
54636: CALL_OW 20
// if mastodonts then
54640: LD_VAR 0 6
54644: IFFALSE 54711
// for i = 1 to mastodonts do
54646: LD_ADDR_VAR 0 11
54650: PUSH
54651: DOUBLE
54652: LD_INT 1
54654: DEC
54655: ST_TO_ADDR
54656: LD_VAR 0 6
54660: PUSH
54661: FOR_TO
54662: IFFALSE 54709
// begin vc_chassis := 31 ;
54664: LD_ADDR_OWVAR 37
54668: PUSH
54669: LD_INT 31
54671: ST_TO_ADDR
// vc_control := control_rider ;
54672: LD_ADDR_OWVAR 38
54676: PUSH
54677: LD_INT 4
54679: ST_TO_ADDR
// animal := CreateVehicle ;
54680: LD_ADDR_VAR 0 12
54684: PUSH
54685: CALL_OW 45
54689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54690: LD_VAR 0 12
54694: PPUSH
54695: LD_VAR 0 8
54699: PPUSH
54700: LD_INT 0
54702: PPUSH
54703: CALL 56899 0 3
// end ;
54707: GO 54661
54709: POP
54710: POP
// if horses then
54711: LD_VAR 0 5
54715: IFFALSE 54782
// for i = 1 to horses do
54717: LD_ADDR_VAR 0 11
54721: PUSH
54722: DOUBLE
54723: LD_INT 1
54725: DEC
54726: ST_TO_ADDR
54727: LD_VAR 0 5
54731: PUSH
54732: FOR_TO
54733: IFFALSE 54780
// begin hc_class := 21 ;
54735: LD_ADDR_OWVAR 28
54739: PUSH
54740: LD_INT 21
54742: ST_TO_ADDR
// hc_gallery :=  ;
54743: LD_ADDR_OWVAR 33
54747: PUSH
54748: LD_STRING 
54750: ST_TO_ADDR
// animal := CreateHuman ;
54751: LD_ADDR_VAR 0 12
54755: PUSH
54756: CALL_OW 44
54760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54761: LD_VAR 0 12
54765: PPUSH
54766: LD_VAR 0 8
54770: PPUSH
54771: LD_INT 0
54773: PPUSH
54774: CALL 56899 0 3
// end ;
54778: GO 54732
54780: POP
54781: POP
// if birds then
54782: LD_VAR 0 1
54786: IFFALSE 54853
// for i = 1 to birds do
54788: LD_ADDR_VAR 0 11
54792: PUSH
54793: DOUBLE
54794: LD_INT 1
54796: DEC
54797: ST_TO_ADDR
54798: LD_VAR 0 1
54802: PUSH
54803: FOR_TO
54804: IFFALSE 54851
// begin hc_class = 18 ;
54806: LD_ADDR_OWVAR 28
54810: PUSH
54811: LD_INT 18
54813: ST_TO_ADDR
// hc_gallery =  ;
54814: LD_ADDR_OWVAR 33
54818: PUSH
54819: LD_STRING 
54821: ST_TO_ADDR
// animal := CreateHuman ;
54822: LD_ADDR_VAR 0 12
54826: PUSH
54827: CALL_OW 44
54831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54832: LD_VAR 0 12
54836: PPUSH
54837: LD_VAR 0 8
54841: PPUSH
54842: LD_INT 0
54844: PPUSH
54845: CALL 56899 0 3
// end ;
54849: GO 54803
54851: POP
54852: POP
// if tigers then
54853: LD_VAR 0 2
54857: IFFALSE 54941
// for i = 1 to tigers do
54859: LD_ADDR_VAR 0 11
54863: PUSH
54864: DOUBLE
54865: LD_INT 1
54867: DEC
54868: ST_TO_ADDR
54869: LD_VAR 0 2
54873: PUSH
54874: FOR_TO
54875: IFFALSE 54939
// begin hc_class = class_tiger ;
54877: LD_ADDR_OWVAR 28
54881: PUSH
54882: LD_INT 14
54884: ST_TO_ADDR
// hc_gallery =  ;
54885: LD_ADDR_OWVAR 33
54889: PUSH
54890: LD_STRING 
54892: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54893: LD_ADDR_OWVAR 35
54897: PUSH
54898: LD_INT 7
54900: NEG
54901: PPUSH
54902: LD_INT 7
54904: PPUSH
54905: CALL_OW 12
54909: ST_TO_ADDR
// animal := CreateHuman ;
54910: LD_ADDR_VAR 0 12
54914: PUSH
54915: CALL_OW 44
54919: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54920: LD_VAR 0 12
54924: PPUSH
54925: LD_VAR 0 8
54929: PPUSH
54930: LD_INT 0
54932: PPUSH
54933: CALL 56899 0 3
// end ;
54937: GO 54874
54939: POP
54940: POP
// if apemans then
54941: LD_VAR 0 3
54945: IFFALSE 55068
// for i = 1 to apemans do
54947: LD_ADDR_VAR 0 11
54951: PUSH
54952: DOUBLE
54953: LD_INT 1
54955: DEC
54956: ST_TO_ADDR
54957: LD_VAR 0 3
54961: PUSH
54962: FOR_TO
54963: IFFALSE 55066
// begin hc_class = class_apeman ;
54965: LD_ADDR_OWVAR 28
54969: PUSH
54970: LD_INT 12
54972: ST_TO_ADDR
// hc_gallery =  ;
54973: LD_ADDR_OWVAR 33
54977: PUSH
54978: LD_STRING 
54980: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54981: LD_ADDR_OWVAR 35
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PPUSH
54990: LD_INT 2
54992: PPUSH
54993: CALL_OW 12
54997: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54998: LD_ADDR_OWVAR 31
55002: PUSH
55003: LD_INT 1
55005: PPUSH
55006: LD_INT 3
55008: PPUSH
55009: CALL_OW 12
55013: PUSH
55014: LD_INT 1
55016: PPUSH
55017: LD_INT 3
55019: PPUSH
55020: CALL_OW 12
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// animal := CreateHuman ;
55037: LD_ADDR_VAR 0 12
55041: PUSH
55042: CALL_OW 44
55046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55047: LD_VAR 0 12
55051: PPUSH
55052: LD_VAR 0 8
55056: PPUSH
55057: LD_INT 0
55059: PPUSH
55060: CALL 56899 0 3
// end ;
55064: GO 54962
55066: POP
55067: POP
// if enchidnas then
55068: LD_VAR 0 4
55072: IFFALSE 55139
// for i = 1 to enchidnas do
55074: LD_ADDR_VAR 0 11
55078: PUSH
55079: DOUBLE
55080: LD_INT 1
55082: DEC
55083: ST_TO_ADDR
55084: LD_VAR 0 4
55088: PUSH
55089: FOR_TO
55090: IFFALSE 55137
// begin hc_class = 13 ;
55092: LD_ADDR_OWVAR 28
55096: PUSH
55097: LD_INT 13
55099: ST_TO_ADDR
// hc_gallery =  ;
55100: LD_ADDR_OWVAR 33
55104: PUSH
55105: LD_STRING 
55107: ST_TO_ADDR
// animal := CreateHuman ;
55108: LD_ADDR_VAR 0 12
55112: PUSH
55113: CALL_OW 44
55117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55118: LD_VAR 0 12
55122: PPUSH
55123: LD_VAR 0 8
55127: PPUSH
55128: LD_INT 0
55130: PPUSH
55131: CALL 56899 0 3
// end ;
55135: GO 55089
55137: POP
55138: POP
// if fishes then
55139: LD_VAR 0 7
55143: IFFALSE 55210
// for i = 1 to fishes do
55145: LD_ADDR_VAR 0 11
55149: PUSH
55150: DOUBLE
55151: LD_INT 1
55153: DEC
55154: ST_TO_ADDR
55155: LD_VAR 0 7
55159: PUSH
55160: FOR_TO
55161: IFFALSE 55208
// begin hc_class = 20 ;
55163: LD_ADDR_OWVAR 28
55167: PUSH
55168: LD_INT 20
55170: ST_TO_ADDR
// hc_gallery =  ;
55171: LD_ADDR_OWVAR 33
55175: PUSH
55176: LD_STRING 
55178: ST_TO_ADDR
// animal := CreateHuman ;
55179: LD_ADDR_VAR 0 12
55183: PUSH
55184: CALL_OW 44
55188: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55189: LD_VAR 0 12
55193: PPUSH
55194: LD_VAR 0 9
55198: PPUSH
55199: LD_INT 0
55201: PPUSH
55202: CALL 56899 0 3
// end ;
55206: GO 55160
55208: POP
55209: POP
// end ;
55210: LD_VAR 0 10
55214: RET
// export function WantHeal ( sci , unit ) ; begin
55215: LD_INT 0
55217: PPUSH
// if GetTaskList ( sci ) > 0 then
55218: LD_VAR 0 1
55222: PPUSH
55223: CALL_OW 437
55227: PUSH
55228: LD_INT 0
55230: GREATER
55231: IFFALSE 55301
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55233: LD_VAR 0 1
55237: PPUSH
55238: CALL_OW 437
55242: PUSH
55243: LD_INT 1
55245: ARRAY
55246: PUSH
55247: LD_INT 1
55249: ARRAY
55250: PUSH
55251: LD_STRING l
55253: EQUAL
55254: PUSH
55255: LD_VAR 0 1
55259: PPUSH
55260: CALL_OW 437
55264: PUSH
55265: LD_INT 1
55267: ARRAY
55268: PUSH
55269: LD_INT 4
55271: ARRAY
55272: PUSH
55273: LD_VAR 0 2
55277: EQUAL
55278: AND
55279: IFFALSE 55291
// result := true else
55281: LD_ADDR_VAR 0 3
55285: PUSH
55286: LD_INT 1
55288: ST_TO_ADDR
55289: GO 55299
// result := false ;
55291: LD_ADDR_VAR 0 3
55295: PUSH
55296: LD_INT 0
55298: ST_TO_ADDR
// end else
55299: GO 55309
// result := false ;
55301: LD_ADDR_VAR 0 3
55305: PUSH
55306: LD_INT 0
55308: ST_TO_ADDR
// end ;
55309: LD_VAR 0 3
55313: RET
// export function HealTarget ( sci ) ; begin
55314: LD_INT 0
55316: PPUSH
// if not sci then
55317: LD_VAR 0 1
55321: NOT
55322: IFFALSE 55326
// exit ;
55324: GO 55391
// result := 0 ;
55326: LD_ADDR_VAR 0 2
55330: PUSH
55331: LD_INT 0
55333: ST_TO_ADDR
// if GetTaskList ( sci ) then
55334: LD_VAR 0 1
55338: PPUSH
55339: CALL_OW 437
55343: IFFALSE 55391
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55345: LD_VAR 0 1
55349: PPUSH
55350: CALL_OW 437
55354: PUSH
55355: LD_INT 1
55357: ARRAY
55358: PUSH
55359: LD_INT 1
55361: ARRAY
55362: PUSH
55363: LD_STRING l
55365: EQUAL
55366: IFFALSE 55391
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55368: LD_ADDR_VAR 0 2
55372: PUSH
55373: LD_VAR 0 1
55377: PPUSH
55378: CALL_OW 437
55382: PUSH
55383: LD_INT 1
55385: ARRAY
55386: PUSH
55387: LD_INT 4
55389: ARRAY
55390: ST_TO_ADDR
// end ;
55391: LD_VAR 0 2
55395: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55396: LD_INT 0
55398: PPUSH
55399: PPUSH
55400: PPUSH
55401: PPUSH
// if not base_units then
55402: LD_VAR 0 1
55406: NOT
55407: IFFALSE 55411
// exit ;
55409: GO 55498
// result := false ;
55411: LD_ADDR_VAR 0 2
55415: PUSH
55416: LD_INT 0
55418: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55419: LD_ADDR_VAR 0 5
55423: PUSH
55424: LD_VAR 0 1
55428: PPUSH
55429: LD_INT 21
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PPUSH
55439: CALL_OW 72
55443: ST_TO_ADDR
// if not tmp then
55444: LD_VAR 0 5
55448: NOT
55449: IFFALSE 55453
// exit ;
55451: GO 55498
// for i in tmp do
55453: LD_ADDR_VAR 0 3
55457: PUSH
55458: LD_VAR 0 5
55462: PUSH
55463: FOR_IN
55464: IFFALSE 55496
// begin result := EnemyInRange ( i , 22 ) ;
55466: LD_ADDR_VAR 0 2
55470: PUSH
55471: LD_VAR 0 3
55475: PPUSH
55476: LD_INT 22
55478: PPUSH
55479: CALL 53734 0 2
55483: ST_TO_ADDR
// if result then
55484: LD_VAR 0 2
55488: IFFALSE 55494
// exit ;
55490: POP
55491: POP
55492: GO 55498
// end ;
55494: GO 55463
55496: POP
55497: POP
// end ;
55498: LD_VAR 0 2
55502: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55503: LD_INT 0
55505: PPUSH
55506: PPUSH
// if not units then
55507: LD_VAR 0 1
55511: NOT
55512: IFFALSE 55516
// exit ;
55514: GO 55586
// result := [ ] ;
55516: LD_ADDR_VAR 0 3
55520: PUSH
55521: EMPTY
55522: ST_TO_ADDR
// for i in units do
55523: LD_ADDR_VAR 0 4
55527: PUSH
55528: LD_VAR 0 1
55532: PUSH
55533: FOR_IN
55534: IFFALSE 55584
// if GetTag ( i ) = tag then
55536: LD_VAR 0 4
55540: PPUSH
55541: CALL_OW 110
55545: PUSH
55546: LD_VAR 0 2
55550: EQUAL
55551: IFFALSE 55582
// result := Replace ( result , result + 1 , i ) ;
55553: LD_ADDR_VAR 0 3
55557: PUSH
55558: LD_VAR 0 3
55562: PPUSH
55563: LD_VAR 0 3
55567: PUSH
55568: LD_INT 1
55570: PLUS
55571: PPUSH
55572: LD_VAR 0 4
55576: PPUSH
55577: CALL_OW 1
55581: ST_TO_ADDR
55582: GO 55533
55584: POP
55585: POP
// end ;
55586: LD_VAR 0 3
55590: RET
// export function IsDriver ( un ) ; begin
55591: LD_INT 0
55593: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55594: LD_ADDR_VAR 0 2
55598: PUSH
55599: LD_VAR 0 1
55603: PUSH
55604: LD_INT 55
55606: PUSH
55607: EMPTY
55608: LIST
55609: PPUSH
55610: CALL_OW 69
55614: IN
55615: ST_TO_ADDR
// end ;
55616: LD_VAR 0 2
55620: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55621: LD_INT 0
55623: PPUSH
55624: PPUSH
// list := [ ] ;
55625: LD_ADDR_VAR 0 5
55629: PUSH
55630: EMPTY
55631: ST_TO_ADDR
// case d of 0 :
55632: LD_VAR 0 3
55636: PUSH
55637: LD_INT 0
55639: DOUBLE
55640: EQUAL
55641: IFTRUE 55645
55643: GO 55778
55645: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55646: LD_ADDR_VAR 0 5
55650: PUSH
55651: LD_VAR 0 1
55655: PUSH
55656: LD_INT 4
55658: MINUS
55659: PUSH
55660: LD_VAR 0 2
55664: PUSH
55665: LD_INT 4
55667: MINUS
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: PUSH
55677: LD_VAR 0 1
55681: PUSH
55682: LD_INT 3
55684: MINUS
55685: PUSH
55686: LD_VAR 0 2
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: PUSH
55699: LD_VAR 0 1
55703: PUSH
55704: LD_INT 4
55706: PLUS
55707: PUSH
55708: LD_VAR 0 2
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: PUSH
55721: LD_VAR 0 1
55725: PUSH
55726: LD_INT 3
55728: PLUS
55729: PUSH
55730: LD_VAR 0 2
55734: PUSH
55735: LD_INT 3
55737: PLUS
55738: PUSH
55739: LD_INT 5
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: LIST
55746: PUSH
55747: LD_VAR 0 1
55751: PUSH
55752: LD_VAR 0 2
55756: PUSH
55757: LD_INT 4
55759: PLUS
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: ST_TO_ADDR
// end ; 1 :
55776: GO 56476
55778: LD_INT 1
55780: DOUBLE
55781: EQUAL
55782: IFTRUE 55786
55784: GO 55919
55786: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55787: LD_ADDR_VAR 0 5
55791: PUSH
55792: LD_VAR 0 1
55796: PUSH
55797: LD_VAR 0 2
55801: PUSH
55802: LD_INT 4
55804: MINUS
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: LIST
55813: PUSH
55814: LD_VAR 0 1
55818: PUSH
55819: LD_INT 3
55821: MINUS
55822: PUSH
55823: LD_VAR 0 2
55827: PUSH
55828: LD_INT 3
55830: MINUS
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: LIST
55839: PUSH
55840: LD_VAR 0 1
55844: PUSH
55845: LD_INT 4
55847: MINUS
55848: PUSH
55849: LD_VAR 0 2
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: PUSH
55862: LD_VAR 0 1
55866: PUSH
55867: LD_VAR 0 2
55871: PUSH
55872: LD_INT 3
55874: PLUS
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: LIST
55883: PUSH
55884: LD_VAR 0 1
55888: PUSH
55889: LD_INT 4
55891: PLUS
55892: PUSH
55893: LD_VAR 0 2
55897: PUSH
55898: LD_INT 4
55900: PLUS
55901: PUSH
55902: LD_INT 5
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: ST_TO_ADDR
// end ; 2 :
55917: GO 56476
55919: LD_INT 2
55921: DOUBLE
55922: EQUAL
55923: IFTRUE 55927
55925: GO 56056
55927: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55928: LD_ADDR_VAR 0 5
55932: PUSH
55933: LD_VAR 0 1
55937: PUSH
55938: LD_VAR 0 2
55942: PUSH
55943: LD_INT 3
55945: MINUS
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: PUSH
55955: LD_VAR 0 1
55959: PUSH
55960: LD_INT 4
55962: PLUS
55963: PUSH
55964: LD_VAR 0 2
55968: PUSH
55969: LD_INT 4
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: PUSH
55977: LD_VAR 0 1
55981: PUSH
55982: LD_VAR 0 2
55986: PUSH
55987: LD_INT 4
55989: PLUS
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: LIST
55998: PUSH
55999: LD_VAR 0 1
56003: PUSH
56004: LD_INT 3
56006: MINUS
56007: PUSH
56008: LD_VAR 0 2
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: PUSH
56021: LD_VAR 0 1
56025: PUSH
56026: LD_INT 4
56028: MINUS
56029: PUSH
56030: LD_VAR 0 2
56034: PUSH
56035: LD_INT 4
56037: MINUS
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// end ; 3 :
56054: GO 56476
56056: LD_INT 3
56058: DOUBLE
56059: EQUAL
56060: IFTRUE 56064
56062: GO 56197
56064: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56065: LD_ADDR_VAR 0 5
56069: PUSH
56070: LD_VAR 0 1
56074: PUSH
56075: LD_INT 3
56077: PLUS
56078: PUSH
56079: LD_VAR 0 2
56083: PUSH
56084: LD_INT 4
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: PUSH
56092: LD_VAR 0 1
56096: PUSH
56097: LD_INT 4
56099: PLUS
56100: PUSH
56101: LD_VAR 0 2
56105: PUSH
56106: LD_INT 4
56108: PLUS
56109: PUSH
56110: LD_INT 5
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: LIST
56117: PUSH
56118: LD_VAR 0 1
56122: PUSH
56123: LD_INT 4
56125: MINUS
56126: PUSH
56127: LD_VAR 0 2
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: LIST
56139: PUSH
56140: LD_VAR 0 1
56144: PUSH
56145: LD_VAR 0 2
56149: PUSH
56150: LD_INT 4
56152: MINUS
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: PUSH
56162: LD_VAR 0 1
56166: PUSH
56167: LD_INT 3
56169: MINUS
56170: PUSH
56171: LD_VAR 0 2
56175: PUSH
56176: LD_INT 3
56178: MINUS
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// end ; 4 :
56195: GO 56476
56197: LD_INT 4
56199: DOUBLE
56200: EQUAL
56201: IFTRUE 56205
56203: GO 56338
56205: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56206: LD_ADDR_VAR 0 5
56210: PUSH
56211: LD_VAR 0 1
56215: PUSH
56216: LD_VAR 0 2
56220: PUSH
56221: LD_INT 4
56223: PLUS
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: LIST
56232: PUSH
56233: LD_VAR 0 1
56237: PUSH
56238: LD_INT 3
56240: PLUS
56241: PUSH
56242: LD_VAR 0 2
56246: PUSH
56247: LD_INT 3
56249: PLUS
56250: PUSH
56251: LD_INT 5
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: PUSH
56259: LD_VAR 0 1
56263: PUSH
56264: LD_INT 4
56266: PLUS
56267: PUSH
56268: LD_VAR 0 2
56272: PUSH
56273: LD_INT 4
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: LIST
56280: PUSH
56281: LD_VAR 0 1
56285: PUSH
56286: LD_VAR 0 2
56290: PUSH
56291: LD_INT 3
56293: MINUS
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: LIST
56302: PUSH
56303: LD_VAR 0 1
56307: PUSH
56308: LD_INT 4
56310: MINUS
56311: PUSH
56312: LD_VAR 0 2
56316: PUSH
56317: LD_INT 4
56319: MINUS
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: ST_TO_ADDR
// end ; 5 :
56336: GO 56476
56338: LD_INT 5
56340: DOUBLE
56341: EQUAL
56342: IFTRUE 56346
56344: GO 56475
56346: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56347: LD_ADDR_VAR 0 5
56351: PUSH
56352: LD_VAR 0 1
56356: PUSH
56357: LD_INT 4
56359: MINUS
56360: PUSH
56361: LD_VAR 0 2
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: LIST
56373: PUSH
56374: LD_VAR 0 1
56378: PUSH
56379: LD_VAR 0 2
56383: PUSH
56384: LD_INT 4
56386: MINUS
56387: PUSH
56388: LD_INT 3
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: PUSH
56396: LD_VAR 0 1
56400: PUSH
56401: LD_INT 4
56403: PLUS
56404: PUSH
56405: LD_VAR 0 2
56409: PUSH
56410: LD_INT 4
56412: PLUS
56413: PUSH
56414: LD_INT 5
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: LIST
56421: PUSH
56422: LD_VAR 0 1
56426: PUSH
56427: LD_INT 3
56429: PLUS
56430: PUSH
56431: LD_VAR 0 2
56435: PUSH
56436: LD_INT 4
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: LIST
56443: PUSH
56444: LD_VAR 0 1
56448: PUSH
56449: LD_VAR 0 2
56453: PUSH
56454: LD_INT 3
56456: PLUS
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: ST_TO_ADDR
// end ; end ;
56473: GO 56476
56475: POP
// result := list ;
56476: LD_ADDR_VAR 0 4
56480: PUSH
56481: LD_VAR 0 5
56485: ST_TO_ADDR
// end ;
56486: LD_VAR 0 4
56490: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56491: LD_INT 0
56493: PPUSH
56494: PPUSH
56495: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56496: LD_VAR 0 1
56500: NOT
56501: PUSH
56502: LD_VAR 0 2
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: LD_INT 4
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: IN
56525: NOT
56526: OR
56527: IFFALSE 56531
// exit ;
56529: GO 56623
// tmp := [ ] ;
56531: LD_ADDR_VAR 0 5
56535: PUSH
56536: EMPTY
56537: ST_TO_ADDR
// for i in units do
56538: LD_ADDR_VAR 0 4
56542: PUSH
56543: LD_VAR 0 1
56547: PUSH
56548: FOR_IN
56549: IFFALSE 56592
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56551: LD_ADDR_VAR 0 5
56555: PUSH
56556: LD_VAR 0 5
56560: PPUSH
56561: LD_VAR 0 5
56565: PUSH
56566: LD_INT 1
56568: PLUS
56569: PPUSH
56570: LD_VAR 0 4
56574: PPUSH
56575: LD_VAR 0 2
56579: PPUSH
56580: CALL_OW 259
56584: PPUSH
56585: CALL_OW 2
56589: ST_TO_ADDR
56590: GO 56548
56592: POP
56593: POP
// if not tmp then
56594: LD_VAR 0 5
56598: NOT
56599: IFFALSE 56603
// exit ;
56601: GO 56623
// result := SortListByListDesc ( units , tmp ) ;
56603: LD_ADDR_VAR 0 3
56607: PUSH
56608: LD_VAR 0 1
56612: PPUSH
56613: LD_VAR 0 5
56617: PPUSH
56618: CALL_OW 77
56622: ST_TO_ADDR
// end ;
56623: LD_VAR 0 3
56627: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56628: LD_INT 0
56630: PPUSH
56631: PPUSH
56632: PPUSH
// result := false ;
56633: LD_ADDR_VAR 0 3
56637: PUSH
56638: LD_INT 0
56640: ST_TO_ADDR
// x := GetX ( building ) ;
56641: LD_ADDR_VAR 0 4
56645: PUSH
56646: LD_VAR 0 2
56650: PPUSH
56651: CALL_OW 250
56655: ST_TO_ADDR
// y := GetY ( building ) ;
56656: LD_ADDR_VAR 0 5
56660: PUSH
56661: LD_VAR 0 2
56665: PPUSH
56666: CALL_OW 251
56670: ST_TO_ADDR
// if not building or not x or not y then
56671: LD_VAR 0 2
56675: NOT
56676: PUSH
56677: LD_VAR 0 4
56681: NOT
56682: OR
56683: PUSH
56684: LD_VAR 0 5
56688: NOT
56689: OR
56690: IFFALSE 56694
// exit ;
56692: GO 56786
// if GetTaskList ( unit ) then
56694: LD_VAR 0 1
56698: PPUSH
56699: CALL_OW 437
56703: IFFALSE 56786
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56705: LD_STRING e
56707: PUSH
56708: LD_VAR 0 1
56712: PPUSH
56713: CALL_OW 437
56717: PUSH
56718: LD_INT 1
56720: ARRAY
56721: PUSH
56722: LD_INT 1
56724: ARRAY
56725: EQUAL
56726: PUSH
56727: LD_VAR 0 4
56731: PUSH
56732: LD_VAR 0 1
56736: PPUSH
56737: CALL_OW 437
56741: PUSH
56742: LD_INT 1
56744: ARRAY
56745: PUSH
56746: LD_INT 2
56748: ARRAY
56749: EQUAL
56750: AND
56751: PUSH
56752: LD_VAR 0 5
56756: PUSH
56757: LD_VAR 0 1
56761: PPUSH
56762: CALL_OW 437
56766: PUSH
56767: LD_INT 1
56769: ARRAY
56770: PUSH
56771: LD_INT 3
56773: ARRAY
56774: EQUAL
56775: AND
56776: IFFALSE 56786
// result := true end ;
56778: LD_ADDR_VAR 0 3
56782: PUSH
56783: LD_INT 1
56785: ST_TO_ADDR
// end ;
56786: LD_VAR 0 3
56790: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56791: LD_INT 0
56793: PPUSH
// result := false ;
56794: LD_ADDR_VAR 0 4
56798: PUSH
56799: LD_INT 0
56801: ST_TO_ADDR
// if GetTaskList ( unit ) then
56802: LD_VAR 0 1
56806: PPUSH
56807: CALL_OW 437
56811: IFFALSE 56894
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56813: LD_STRING M
56815: PUSH
56816: LD_VAR 0 1
56820: PPUSH
56821: CALL_OW 437
56825: PUSH
56826: LD_INT 1
56828: ARRAY
56829: PUSH
56830: LD_INT 1
56832: ARRAY
56833: EQUAL
56834: PUSH
56835: LD_VAR 0 2
56839: PUSH
56840: LD_VAR 0 1
56844: PPUSH
56845: CALL_OW 437
56849: PUSH
56850: LD_INT 1
56852: ARRAY
56853: PUSH
56854: LD_INT 2
56856: ARRAY
56857: EQUAL
56858: AND
56859: PUSH
56860: LD_VAR 0 3
56864: PUSH
56865: LD_VAR 0 1
56869: PPUSH
56870: CALL_OW 437
56874: PUSH
56875: LD_INT 1
56877: ARRAY
56878: PUSH
56879: LD_INT 3
56881: ARRAY
56882: EQUAL
56883: AND
56884: IFFALSE 56894
// result := true ;
56886: LD_ADDR_VAR 0 4
56890: PUSH
56891: LD_INT 1
56893: ST_TO_ADDR
// end ; end ;
56894: LD_VAR 0 4
56898: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56899: LD_INT 0
56901: PPUSH
56902: PPUSH
56903: PPUSH
56904: PPUSH
// if not unit or not area then
56905: LD_VAR 0 1
56909: NOT
56910: PUSH
56911: LD_VAR 0 2
56915: NOT
56916: OR
56917: IFFALSE 56921
// exit ;
56919: GO 57085
// tmp := AreaToList ( area , i ) ;
56921: LD_ADDR_VAR 0 6
56925: PUSH
56926: LD_VAR 0 2
56930: PPUSH
56931: LD_VAR 0 5
56935: PPUSH
56936: CALL_OW 517
56940: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56941: LD_ADDR_VAR 0 5
56945: PUSH
56946: DOUBLE
56947: LD_INT 1
56949: DEC
56950: ST_TO_ADDR
56951: LD_VAR 0 6
56955: PUSH
56956: LD_INT 1
56958: ARRAY
56959: PUSH
56960: FOR_TO
56961: IFFALSE 57083
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56963: LD_ADDR_VAR 0 7
56967: PUSH
56968: LD_VAR 0 6
56972: PUSH
56973: LD_INT 1
56975: ARRAY
56976: PUSH
56977: LD_VAR 0 5
56981: ARRAY
56982: PUSH
56983: LD_VAR 0 6
56987: PUSH
56988: LD_INT 2
56990: ARRAY
56991: PUSH
56992: LD_VAR 0 5
56996: ARRAY
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57002: LD_VAR 0 7
57006: PUSH
57007: LD_INT 1
57009: ARRAY
57010: PPUSH
57011: LD_VAR 0 7
57015: PUSH
57016: LD_INT 2
57018: ARRAY
57019: PPUSH
57020: CALL_OW 428
57024: PUSH
57025: LD_INT 0
57027: EQUAL
57028: IFFALSE 57081
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57030: LD_VAR 0 1
57034: PPUSH
57035: LD_VAR 0 7
57039: PUSH
57040: LD_INT 1
57042: ARRAY
57043: PPUSH
57044: LD_VAR 0 7
57048: PUSH
57049: LD_INT 2
57051: ARRAY
57052: PPUSH
57053: LD_VAR 0 3
57057: PPUSH
57058: CALL_OW 48
// result := IsPlaced ( unit ) ;
57062: LD_ADDR_VAR 0 4
57066: PUSH
57067: LD_VAR 0 1
57071: PPUSH
57072: CALL_OW 305
57076: ST_TO_ADDR
// exit ;
57077: POP
57078: POP
57079: GO 57085
// end ; end ;
57081: GO 56960
57083: POP
57084: POP
// end ;
57085: LD_VAR 0 4
57089: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57090: LD_INT 0
57092: PPUSH
57093: PPUSH
57094: PPUSH
// if not side or side > 8 then
57095: LD_VAR 0 1
57099: NOT
57100: PUSH
57101: LD_VAR 0 1
57105: PUSH
57106: LD_INT 8
57108: GREATER
57109: OR
57110: IFFALSE 57114
// exit ;
57112: GO 57301
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57114: LD_ADDR_VAR 0 4
57118: PUSH
57119: LD_INT 22
57121: PUSH
57122: LD_VAR 0 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 21
57133: PUSH
57134: LD_INT 3
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PPUSH
57145: CALL_OW 69
57149: ST_TO_ADDR
// if not tmp then
57150: LD_VAR 0 4
57154: NOT
57155: IFFALSE 57159
// exit ;
57157: GO 57301
// enable_addtolog := true ;
57159: LD_ADDR_OWVAR 81
57163: PUSH
57164: LD_INT 1
57166: ST_TO_ADDR
// AddToLog ( [ ) ;
57167: LD_STRING [
57169: PPUSH
57170: CALL_OW 561
// for i in tmp do
57174: LD_ADDR_VAR 0 3
57178: PUSH
57179: LD_VAR 0 4
57183: PUSH
57184: FOR_IN
57185: IFFALSE 57292
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57187: LD_STRING [
57189: PUSH
57190: LD_VAR 0 3
57194: PPUSH
57195: CALL_OW 266
57199: STR
57200: PUSH
57201: LD_STRING , 
57203: STR
57204: PUSH
57205: LD_VAR 0 3
57209: PPUSH
57210: CALL_OW 250
57214: STR
57215: PUSH
57216: LD_STRING , 
57218: STR
57219: PUSH
57220: LD_VAR 0 3
57224: PPUSH
57225: CALL_OW 251
57229: STR
57230: PUSH
57231: LD_STRING , 
57233: STR
57234: PUSH
57235: LD_VAR 0 3
57239: PPUSH
57240: CALL_OW 254
57244: STR
57245: PUSH
57246: LD_STRING , 
57248: STR
57249: PUSH
57250: LD_VAR 0 3
57254: PPUSH
57255: LD_INT 1
57257: PPUSH
57258: CALL_OW 268
57262: STR
57263: PUSH
57264: LD_STRING , 
57266: STR
57267: PUSH
57268: LD_VAR 0 3
57272: PPUSH
57273: LD_INT 2
57275: PPUSH
57276: CALL_OW 268
57280: STR
57281: PUSH
57282: LD_STRING ],
57284: STR
57285: PPUSH
57286: CALL_OW 561
// end ;
57290: GO 57184
57292: POP
57293: POP
// AddToLog ( ]; ) ;
57294: LD_STRING ];
57296: PPUSH
57297: CALL_OW 561
// end ;
57301: LD_VAR 0 2
57305: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57306: LD_INT 0
57308: PPUSH
57309: PPUSH
57310: PPUSH
57311: PPUSH
57312: PPUSH
// if not area or not rate or not max then
57313: LD_VAR 0 1
57317: NOT
57318: PUSH
57319: LD_VAR 0 2
57323: NOT
57324: OR
57325: PUSH
57326: LD_VAR 0 4
57330: NOT
57331: OR
57332: IFFALSE 57336
// exit ;
57334: GO 57528
// while 1 do
57336: LD_INT 1
57338: IFFALSE 57528
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57340: LD_ADDR_VAR 0 9
57344: PUSH
57345: LD_VAR 0 1
57349: PPUSH
57350: LD_INT 1
57352: PPUSH
57353: CALL_OW 287
57357: PUSH
57358: LD_INT 10
57360: MUL
57361: ST_TO_ADDR
// r := rate / 10 ;
57362: LD_ADDR_VAR 0 7
57366: PUSH
57367: LD_VAR 0 2
57371: PUSH
57372: LD_INT 10
57374: DIVREAL
57375: ST_TO_ADDR
// time := 1 1$00 ;
57376: LD_ADDR_VAR 0 8
57380: PUSH
57381: LD_INT 2100
57383: ST_TO_ADDR
// if amount < min then
57384: LD_VAR 0 9
57388: PUSH
57389: LD_VAR 0 3
57393: LESS
57394: IFFALSE 57412
// r := r * 2 else
57396: LD_ADDR_VAR 0 7
57400: PUSH
57401: LD_VAR 0 7
57405: PUSH
57406: LD_INT 2
57408: MUL
57409: ST_TO_ADDR
57410: GO 57438
// if amount > max then
57412: LD_VAR 0 9
57416: PUSH
57417: LD_VAR 0 4
57421: GREATER
57422: IFFALSE 57438
// r := r / 2 ;
57424: LD_ADDR_VAR 0 7
57428: PUSH
57429: LD_VAR 0 7
57433: PUSH
57434: LD_INT 2
57436: DIVREAL
57437: ST_TO_ADDR
// time := time / r ;
57438: LD_ADDR_VAR 0 8
57442: PUSH
57443: LD_VAR 0 8
57447: PUSH
57448: LD_VAR 0 7
57452: DIVREAL
57453: ST_TO_ADDR
// if time < 0 then
57454: LD_VAR 0 8
57458: PUSH
57459: LD_INT 0
57461: LESS
57462: IFFALSE 57479
// time := time * - 1 ;
57464: LD_ADDR_VAR 0 8
57468: PUSH
57469: LD_VAR 0 8
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: MUL
57478: ST_TO_ADDR
// wait ( time ) ;
57479: LD_VAR 0 8
57483: PPUSH
57484: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57488: LD_INT 35
57490: PPUSH
57491: LD_INT 875
57493: PPUSH
57494: CALL_OW 12
57498: PPUSH
57499: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57503: LD_INT 1
57505: PPUSH
57506: LD_INT 5
57508: PPUSH
57509: CALL_OW 12
57513: PPUSH
57514: LD_VAR 0 1
57518: PPUSH
57519: LD_INT 1
57521: PPUSH
57522: CALL_OW 55
// end ;
57526: GO 57336
// end ;
57528: LD_VAR 0 5
57532: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57533: LD_INT 0
57535: PPUSH
57536: PPUSH
57537: PPUSH
57538: PPUSH
57539: PPUSH
57540: PPUSH
57541: PPUSH
57542: PPUSH
// if not turrets or not factories then
57543: LD_VAR 0 1
57547: NOT
57548: PUSH
57549: LD_VAR 0 2
57553: NOT
57554: OR
57555: IFFALSE 57559
// exit ;
57557: GO 57866
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57559: LD_ADDR_VAR 0 10
57563: PUSH
57564: LD_INT 5
57566: PUSH
57567: LD_INT 6
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: PUSH
57577: LD_INT 4
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: LD_INT 5
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 24
57601: PUSH
57602: LD_INT 25
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 23
57611: PUSH
57612: LD_INT 27
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 42
57625: PUSH
57626: LD_INT 43
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 44
57635: PUSH
57636: LD_INT 46
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 45
57645: PUSH
57646: LD_INT 47
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// result := [ ] ;
57663: LD_ADDR_VAR 0 3
57667: PUSH
57668: EMPTY
57669: ST_TO_ADDR
// for i in turrets do
57670: LD_ADDR_VAR 0 4
57674: PUSH
57675: LD_VAR 0 1
57679: PUSH
57680: FOR_IN
57681: IFFALSE 57864
// begin nat := GetNation ( i ) ;
57683: LD_ADDR_VAR 0 7
57687: PUSH
57688: LD_VAR 0 4
57692: PPUSH
57693: CALL_OW 248
57697: ST_TO_ADDR
// weapon := 0 ;
57698: LD_ADDR_VAR 0 8
57702: PUSH
57703: LD_INT 0
57705: ST_TO_ADDR
// if not nat then
57706: LD_VAR 0 7
57710: NOT
57711: IFFALSE 57715
// continue ;
57713: GO 57680
// for j in list [ nat ] do
57715: LD_ADDR_VAR 0 5
57719: PUSH
57720: LD_VAR 0 10
57724: PUSH
57725: LD_VAR 0 7
57729: ARRAY
57730: PUSH
57731: FOR_IN
57732: IFFALSE 57773
// if GetBWeapon ( i ) = j [ 1 ] then
57734: LD_VAR 0 4
57738: PPUSH
57739: CALL_OW 269
57743: PUSH
57744: LD_VAR 0 5
57748: PUSH
57749: LD_INT 1
57751: ARRAY
57752: EQUAL
57753: IFFALSE 57771
// begin weapon := j [ 2 ] ;
57755: LD_ADDR_VAR 0 8
57759: PUSH
57760: LD_VAR 0 5
57764: PUSH
57765: LD_INT 2
57767: ARRAY
57768: ST_TO_ADDR
// break ;
57769: GO 57773
// end ;
57771: GO 57731
57773: POP
57774: POP
// if not weapon then
57775: LD_VAR 0 8
57779: NOT
57780: IFFALSE 57784
// continue ;
57782: GO 57680
// for k in factories do
57784: LD_ADDR_VAR 0 6
57788: PUSH
57789: LD_VAR 0 2
57793: PUSH
57794: FOR_IN
57795: IFFALSE 57860
// begin weapons := AvailableWeaponList ( k ) ;
57797: LD_ADDR_VAR 0 9
57801: PUSH
57802: LD_VAR 0 6
57806: PPUSH
57807: CALL_OW 478
57811: ST_TO_ADDR
// if not weapons then
57812: LD_VAR 0 9
57816: NOT
57817: IFFALSE 57821
// continue ;
57819: GO 57794
// if weapon in weapons then
57821: LD_VAR 0 8
57825: PUSH
57826: LD_VAR 0 9
57830: IN
57831: IFFALSE 57858
// begin result := [ i , weapon ] ;
57833: LD_ADDR_VAR 0 3
57837: PUSH
57838: LD_VAR 0 4
57842: PUSH
57843: LD_VAR 0 8
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: ST_TO_ADDR
// exit ;
57852: POP
57853: POP
57854: POP
57855: POP
57856: GO 57866
// end ; end ;
57858: GO 57794
57860: POP
57861: POP
// end ;
57862: GO 57680
57864: POP
57865: POP
// end ;
57866: LD_VAR 0 3
57870: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57871: LD_INT 0
57873: PPUSH
// if not side or side > 8 then
57874: LD_VAR 0 3
57878: NOT
57879: PUSH
57880: LD_VAR 0 3
57884: PUSH
57885: LD_INT 8
57887: GREATER
57888: OR
57889: IFFALSE 57893
// exit ;
57891: GO 57952
// if not range then
57893: LD_VAR 0 4
57897: NOT
57898: IFFALSE 57909
// range := - 12 ;
57900: LD_ADDR_VAR 0 4
57904: PUSH
57905: LD_INT 12
57907: NEG
57908: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57909: LD_VAR 0 1
57913: PPUSH
57914: LD_VAR 0 2
57918: PPUSH
57919: LD_VAR 0 3
57923: PPUSH
57924: LD_VAR 0 4
57928: PPUSH
57929: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57933: LD_VAR 0 1
57937: PPUSH
57938: LD_VAR 0 2
57942: PPUSH
57943: LD_VAR 0 3
57947: PPUSH
57948: CALL_OW 331
// end ;
57952: LD_VAR 0 5
57956: RET
// export function Video ( mode ) ; begin
57957: LD_INT 0
57959: PPUSH
// ingame_video = mode ;
57960: LD_ADDR_OWVAR 52
57964: PUSH
57965: LD_VAR 0 1
57969: ST_TO_ADDR
// interface_hidden = mode ;
57970: LD_ADDR_OWVAR 54
57974: PUSH
57975: LD_VAR 0 1
57979: ST_TO_ADDR
// end ;
57980: LD_VAR 0 2
57984: RET
// export function Join ( array , element ) ; begin
57985: LD_INT 0
57987: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57988: LD_ADDR_VAR 0 3
57992: PUSH
57993: LD_VAR 0 1
57997: PPUSH
57998: LD_VAR 0 1
58002: PUSH
58003: LD_INT 1
58005: PLUS
58006: PPUSH
58007: LD_VAR 0 2
58011: PPUSH
58012: CALL_OW 1
58016: ST_TO_ADDR
// end ;
58017: LD_VAR 0 3
58021: RET
// export function JoinUnion ( array , element ) ; begin
58022: LD_INT 0
58024: PPUSH
// result := array union element ;
58025: LD_ADDR_VAR 0 3
58029: PUSH
58030: LD_VAR 0 1
58034: PUSH
58035: LD_VAR 0 2
58039: UNION
58040: ST_TO_ADDR
// end ;
58041: LD_VAR 0 3
58045: RET
// export function GetBehemoths ( side ) ; begin
58046: LD_INT 0
58048: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58049: LD_ADDR_VAR 0 2
58053: PUSH
58054: LD_INT 22
58056: PUSH
58057: LD_VAR 0 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 31
58068: PUSH
58069: LD_INT 25
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PPUSH
58080: CALL_OW 69
58084: ST_TO_ADDR
// end ;
58085: LD_VAR 0 2
58089: RET
// export function Shuffle ( array ) ; var i , index ; begin
58090: LD_INT 0
58092: PPUSH
58093: PPUSH
58094: PPUSH
// result := [ ] ;
58095: LD_ADDR_VAR 0 2
58099: PUSH
58100: EMPTY
58101: ST_TO_ADDR
// if not array then
58102: LD_VAR 0 1
58106: NOT
58107: IFFALSE 58111
// exit ;
58109: GO 58210
// Randomize ;
58111: CALL_OW 10
// for i = array downto 1 do
58115: LD_ADDR_VAR 0 3
58119: PUSH
58120: DOUBLE
58121: LD_VAR 0 1
58125: INC
58126: ST_TO_ADDR
58127: LD_INT 1
58129: PUSH
58130: FOR_DOWNTO
58131: IFFALSE 58208
// begin index := rand ( 1 , array ) ;
58133: LD_ADDR_VAR 0 4
58137: PUSH
58138: LD_INT 1
58140: PPUSH
58141: LD_VAR 0 1
58145: PPUSH
58146: CALL_OW 12
58150: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58151: LD_ADDR_VAR 0 2
58155: PUSH
58156: LD_VAR 0 2
58160: PPUSH
58161: LD_VAR 0 2
58165: PUSH
58166: LD_INT 1
58168: PLUS
58169: PPUSH
58170: LD_VAR 0 1
58174: PUSH
58175: LD_VAR 0 4
58179: ARRAY
58180: PPUSH
58181: CALL_OW 2
58185: ST_TO_ADDR
// array := Delete ( array , index ) ;
58186: LD_ADDR_VAR 0 1
58190: PUSH
58191: LD_VAR 0 1
58195: PPUSH
58196: LD_VAR 0 4
58200: PPUSH
58201: CALL_OW 3
58205: ST_TO_ADDR
// end ;
58206: GO 58130
58208: POP
58209: POP
// end ;
58210: LD_VAR 0 2
58214: RET
// export function GetBaseMaterials ( base ) ; begin
58215: LD_INT 0
58217: PPUSH
// result := [ 0 , 0 , 0 ] ;
58218: LD_ADDR_VAR 0 2
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: LIST
58236: ST_TO_ADDR
// if not base then
58237: LD_VAR 0 1
58241: NOT
58242: IFFALSE 58246
// exit ;
58244: GO 58295
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58246: LD_ADDR_VAR 0 2
58250: PUSH
58251: LD_VAR 0 1
58255: PPUSH
58256: LD_INT 1
58258: PPUSH
58259: CALL_OW 275
58263: PUSH
58264: LD_VAR 0 1
58268: PPUSH
58269: LD_INT 2
58271: PPUSH
58272: CALL_OW 275
58276: PUSH
58277: LD_VAR 0 1
58281: PPUSH
58282: LD_INT 3
58284: PPUSH
58285: CALL_OW 275
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// end ;
58295: LD_VAR 0 2
58299: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58300: LD_INT 0
58302: PPUSH
58303: PPUSH
// result := array ;
58304: LD_ADDR_VAR 0 3
58308: PUSH
58309: LD_VAR 0 1
58313: ST_TO_ADDR
// if size > 0 then
58314: LD_VAR 0 2
58318: PUSH
58319: LD_INT 0
58321: GREATER
58322: IFFALSE 58368
// for i := array downto size do
58324: LD_ADDR_VAR 0 4
58328: PUSH
58329: DOUBLE
58330: LD_VAR 0 1
58334: INC
58335: ST_TO_ADDR
58336: LD_VAR 0 2
58340: PUSH
58341: FOR_DOWNTO
58342: IFFALSE 58366
// result := Delete ( result , result ) ;
58344: LD_ADDR_VAR 0 3
58348: PUSH
58349: LD_VAR 0 3
58353: PPUSH
58354: LD_VAR 0 3
58358: PPUSH
58359: CALL_OW 3
58363: ST_TO_ADDR
58364: GO 58341
58366: POP
58367: POP
// end ;
58368: LD_VAR 0 3
58372: RET
// export function ComExit ( unit ) ; var tmp ; begin
58373: LD_INT 0
58375: PPUSH
58376: PPUSH
// if not IsInUnit ( unit ) then
58377: LD_VAR 0 1
58381: PPUSH
58382: CALL_OW 310
58386: NOT
58387: IFFALSE 58391
// exit ;
58389: GO 58451
// tmp := IsInUnit ( unit ) ;
58391: LD_ADDR_VAR 0 3
58395: PUSH
58396: LD_VAR 0 1
58400: PPUSH
58401: CALL_OW 310
58405: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58406: LD_VAR 0 3
58410: PPUSH
58411: CALL_OW 247
58415: PUSH
58416: LD_INT 2
58418: EQUAL
58419: IFFALSE 58432
// ComExitVehicle ( unit ) else
58421: LD_VAR 0 1
58425: PPUSH
58426: CALL_OW 121
58430: GO 58441
// ComExitBuilding ( unit ) ;
58432: LD_VAR 0 1
58436: PPUSH
58437: CALL_OW 122
// result := tmp ;
58441: LD_ADDR_VAR 0 2
58445: PUSH
58446: LD_VAR 0 3
58450: ST_TO_ADDR
// end ;
58451: LD_VAR 0 2
58455: RET
// export function ComExitAll ( units ) ; var i ; begin
58456: LD_INT 0
58458: PPUSH
58459: PPUSH
// if not units then
58460: LD_VAR 0 1
58464: NOT
58465: IFFALSE 58469
// exit ;
58467: GO 58495
// for i in units do
58469: LD_ADDR_VAR 0 3
58473: PUSH
58474: LD_VAR 0 1
58478: PUSH
58479: FOR_IN
58480: IFFALSE 58493
// ComExit ( i ) ;
58482: LD_VAR 0 3
58486: PPUSH
58487: CALL 58373 0 1
58491: GO 58479
58493: POP
58494: POP
// end ;
58495: LD_VAR 0 2
58499: RET
// export function ResetHc ; begin
58500: LD_INT 0
58502: PPUSH
// InitHc ;
58503: CALL_OW 19
// hc_importance := 0 ;
58507: LD_ADDR_OWVAR 32
58511: PUSH
58512: LD_INT 0
58514: ST_TO_ADDR
// end ;
58515: LD_VAR 0 1
58519: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58520: LD_INT 0
58522: PPUSH
58523: PPUSH
58524: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58525: LD_ADDR_VAR 0 6
58529: PUSH
58530: LD_VAR 0 1
58534: PUSH
58535: LD_VAR 0 3
58539: PLUS
58540: PUSH
58541: LD_INT 2
58543: DIV
58544: ST_TO_ADDR
// if _x < 0 then
58545: LD_VAR 0 6
58549: PUSH
58550: LD_INT 0
58552: LESS
58553: IFFALSE 58570
// _x := _x * - 1 ;
58555: LD_ADDR_VAR 0 6
58559: PUSH
58560: LD_VAR 0 6
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: MUL
58569: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58570: LD_ADDR_VAR 0 7
58574: PUSH
58575: LD_VAR 0 2
58579: PUSH
58580: LD_VAR 0 4
58584: PLUS
58585: PUSH
58586: LD_INT 2
58588: DIV
58589: ST_TO_ADDR
// if _y < 0 then
58590: LD_VAR 0 7
58594: PUSH
58595: LD_INT 0
58597: LESS
58598: IFFALSE 58615
// _y := _y * - 1 ;
58600: LD_ADDR_VAR 0 7
58604: PUSH
58605: LD_VAR 0 7
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: MUL
58614: ST_TO_ADDR
// result := [ _x , _y ] ;
58615: LD_ADDR_VAR 0 5
58619: PUSH
58620: LD_VAR 0 6
58624: PUSH
58625: LD_VAR 0 7
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: ST_TO_ADDR
// end ;
58634: LD_VAR 0 5
58638: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58639: LD_INT 0
58641: PPUSH
58642: PPUSH
58643: PPUSH
58644: PPUSH
// task := GetTaskList ( unit ) ;
58645: LD_ADDR_VAR 0 7
58649: PUSH
58650: LD_VAR 0 1
58654: PPUSH
58655: CALL_OW 437
58659: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58660: LD_VAR 0 7
58664: NOT
58665: PUSH
58666: LD_VAR 0 1
58670: PPUSH
58671: LD_VAR 0 2
58675: PPUSH
58676: CALL_OW 308
58680: NOT
58681: AND
58682: IFFALSE 58686
// exit ;
58684: GO 58804
// if IsInArea ( unit , area ) then
58686: LD_VAR 0 1
58690: PPUSH
58691: LD_VAR 0 2
58695: PPUSH
58696: CALL_OW 308
58700: IFFALSE 58718
// begin ComMoveToArea ( unit , goAway ) ;
58702: LD_VAR 0 1
58706: PPUSH
58707: LD_VAR 0 3
58711: PPUSH
58712: CALL_OW 113
// exit ;
58716: GO 58804
// end ; if task [ 1 ] [ 1 ] <> M then
58718: LD_VAR 0 7
58722: PUSH
58723: LD_INT 1
58725: ARRAY
58726: PUSH
58727: LD_INT 1
58729: ARRAY
58730: PUSH
58731: LD_STRING M
58733: NONEQUAL
58734: IFFALSE 58738
// exit ;
58736: GO 58804
// x := task [ 1 ] [ 2 ] ;
58738: LD_ADDR_VAR 0 5
58742: PUSH
58743: LD_VAR 0 7
58747: PUSH
58748: LD_INT 1
58750: ARRAY
58751: PUSH
58752: LD_INT 2
58754: ARRAY
58755: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58756: LD_ADDR_VAR 0 6
58760: PUSH
58761: LD_VAR 0 7
58765: PUSH
58766: LD_INT 1
58768: ARRAY
58769: PUSH
58770: LD_INT 3
58772: ARRAY
58773: ST_TO_ADDR
// if InArea ( x , y , area ) then
58774: LD_VAR 0 5
58778: PPUSH
58779: LD_VAR 0 6
58783: PPUSH
58784: LD_VAR 0 2
58788: PPUSH
58789: CALL_OW 309
58793: IFFALSE 58804
// ComStop ( unit ) ;
58795: LD_VAR 0 1
58799: PPUSH
58800: CALL_OW 141
// end ;
58804: LD_VAR 0 4
58808: RET
// export function Abs ( value ) ; begin
58809: LD_INT 0
58811: PPUSH
// result := value ;
58812: LD_ADDR_VAR 0 2
58816: PUSH
58817: LD_VAR 0 1
58821: ST_TO_ADDR
// if value < 0 then
58822: LD_VAR 0 1
58826: PUSH
58827: LD_INT 0
58829: LESS
58830: IFFALSE 58847
// result := value * - 1 ;
58832: LD_ADDR_VAR 0 2
58836: PUSH
58837: LD_VAR 0 1
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: MUL
58846: ST_TO_ADDR
// end ;
58847: LD_VAR 0 2
58851: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58852: LD_INT 0
58854: PPUSH
58855: PPUSH
58856: PPUSH
58857: PPUSH
58858: PPUSH
58859: PPUSH
58860: PPUSH
58861: PPUSH
// if not unit or not building then
58862: LD_VAR 0 1
58866: NOT
58867: PUSH
58868: LD_VAR 0 2
58872: NOT
58873: OR
58874: IFFALSE 58878
// exit ;
58876: GO 59104
// x := GetX ( building ) ;
58878: LD_ADDR_VAR 0 4
58882: PUSH
58883: LD_VAR 0 2
58887: PPUSH
58888: CALL_OW 250
58892: ST_TO_ADDR
// y := GetY ( building ) ;
58893: LD_ADDR_VAR 0 6
58897: PUSH
58898: LD_VAR 0 2
58902: PPUSH
58903: CALL_OW 251
58907: ST_TO_ADDR
// d := GetDir ( building ) ;
58908: LD_ADDR_VAR 0 8
58912: PUSH
58913: LD_VAR 0 2
58917: PPUSH
58918: CALL_OW 254
58922: ST_TO_ADDR
// r := 4 ;
58923: LD_ADDR_VAR 0 9
58927: PUSH
58928: LD_INT 4
58930: ST_TO_ADDR
// for i := 1 to 5 do
58931: LD_ADDR_VAR 0 10
58935: PUSH
58936: DOUBLE
58937: LD_INT 1
58939: DEC
58940: ST_TO_ADDR
58941: LD_INT 5
58943: PUSH
58944: FOR_TO
58945: IFFALSE 59102
// begin _x := ShiftX ( x , d , r + i ) ;
58947: LD_ADDR_VAR 0 5
58951: PUSH
58952: LD_VAR 0 4
58956: PPUSH
58957: LD_VAR 0 8
58961: PPUSH
58962: LD_VAR 0 9
58966: PUSH
58967: LD_VAR 0 10
58971: PLUS
58972: PPUSH
58973: CALL_OW 272
58977: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58978: LD_ADDR_VAR 0 7
58982: PUSH
58983: LD_VAR 0 6
58987: PPUSH
58988: LD_VAR 0 8
58992: PPUSH
58993: LD_VAR 0 9
58997: PUSH
58998: LD_VAR 0 10
59002: PLUS
59003: PPUSH
59004: CALL_OW 273
59008: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59009: LD_VAR 0 5
59013: PPUSH
59014: LD_VAR 0 7
59018: PPUSH
59019: CALL_OW 488
59023: PUSH
59024: LD_VAR 0 5
59028: PPUSH
59029: LD_VAR 0 7
59033: PPUSH
59034: CALL_OW 428
59038: PPUSH
59039: CALL_OW 247
59043: PUSH
59044: LD_INT 3
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: IN
59054: NOT
59055: AND
59056: IFFALSE 59100
// begin ComMoveXY ( unit , _x , _y ) ;
59058: LD_VAR 0 1
59062: PPUSH
59063: LD_VAR 0 5
59067: PPUSH
59068: LD_VAR 0 7
59072: PPUSH
59073: CALL_OW 111
// result := [ _x , _y ] ;
59077: LD_ADDR_VAR 0 3
59081: PUSH
59082: LD_VAR 0 5
59086: PUSH
59087: LD_VAR 0 7
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: ST_TO_ADDR
// exit ;
59096: POP
59097: POP
59098: GO 59104
// end ; end ;
59100: GO 58944
59102: POP
59103: POP
// end ;
59104: LD_VAR 0 3
59108: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59109: LD_INT 0
59111: PPUSH
59112: PPUSH
59113: PPUSH
// result := 0 ;
59114: LD_ADDR_VAR 0 3
59118: PUSH
59119: LD_INT 0
59121: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59122: LD_VAR 0 1
59126: PUSH
59127: LD_INT 0
59129: LESS
59130: PUSH
59131: LD_VAR 0 1
59135: PUSH
59136: LD_INT 8
59138: GREATER
59139: OR
59140: PUSH
59141: LD_VAR 0 2
59145: PUSH
59146: LD_INT 0
59148: LESS
59149: OR
59150: PUSH
59151: LD_VAR 0 2
59155: PUSH
59156: LD_INT 8
59158: GREATER
59159: OR
59160: IFFALSE 59164
// exit ;
59162: GO 59239
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59164: LD_ADDR_VAR 0 4
59168: PUSH
59169: LD_INT 22
59171: PUSH
59172: LD_VAR 0 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PPUSH
59181: CALL_OW 69
59185: PUSH
59186: FOR_IN
59187: IFFALSE 59237
// begin un := UnitShoot ( i ) ;
59189: LD_ADDR_VAR 0 5
59193: PUSH
59194: LD_VAR 0 4
59198: PPUSH
59199: CALL_OW 504
59203: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59204: LD_VAR 0 5
59208: PPUSH
59209: CALL_OW 255
59213: PUSH
59214: LD_VAR 0 1
59218: EQUAL
59219: IFFALSE 59235
// begin result := un ;
59221: LD_ADDR_VAR 0 3
59225: PUSH
59226: LD_VAR 0 5
59230: ST_TO_ADDR
// exit ;
59231: POP
59232: POP
59233: GO 59239
// end ; end ;
59235: GO 59186
59237: POP
59238: POP
// end ;
59239: LD_VAR 0 3
59243: RET
// export function GetCargoBay ( units ) ; begin
59244: LD_INT 0
59246: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59247: LD_ADDR_VAR 0 2
59251: PUSH
59252: LD_VAR 0 1
59256: PPUSH
59257: LD_INT 2
59259: PUSH
59260: LD_INT 34
59262: PUSH
59263: LD_INT 12
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 34
59272: PUSH
59273: LD_INT 51
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 34
59282: PUSH
59283: LD_INT 32
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 34
59292: PUSH
59293: LD_EXP 127
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: PPUSH
59309: CALL_OW 72
59313: ST_TO_ADDR
// end ;
59314: LD_VAR 0 2
59318: RET
// export function Negate ( value ) ; begin
59319: LD_INT 0
59321: PPUSH
// result := not value ;
59322: LD_ADDR_VAR 0 2
59326: PUSH
59327: LD_VAR 0 1
59331: NOT
59332: ST_TO_ADDR
// end ;
59333: LD_VAR 0 2
59337: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
59338: LD_INT 0
59340: PPUSH
// if x1 = x2 then
59341: LD_VAR 0 1
59345: PUSH
59346: LD_VAR 0 3
59350: EQUAL
59351: IFFALSE 59385
// begin if y1 > y2 then
59353: LD_VAR 0 2
59357: PUSH
59358: LD_VAR 0 4
59362: GREATER
59363: IFFALSE 59375
// result := 0 else
59365: LD_ADDR_VAR 0 5
59369: PUSH
59370: LD_INT 0
59372: ST_TO_ADDR
59373: GO 59383
// result := 3 ;
59375: LD_ADDR_VAR 0 5
59379: PUSH
59380: LD_INT 3
59382: ST_TO_ADDR
// exit ;
59383: GO 59471
// end ; if y1 = y2 then
59385: LD_VAR 0 2
59389: PUSH
59390: LD_VAR 0 4
59394: EQUAL
59395: IFFALSE 59429
// begin if x1 > x2 then
59397: LD_VAR 0 1
59401: PUSH
59402: LD_VAR 0 3
59406: GREATER
59407: IFFALSE 59419
// result := 1 else
59409: LD_ADDR_VAR 0 5
59413: PUSH
59414: LD_INT 1
59416: ST_TO_ADDR
59417: GO 59427
// result := 4 ;
59419: LD_ADDR_VAR 0 5
59423: PUSH
59424: LD_INT 4
59426: ST_TO_ADDR
// exit ;
59427: GO 59471
// end ; if x1 > x2 and y1 > y2 then
59429: LD_VAR 0 1
59433: PUSH
59434: LD_VAR 0 3
59438: GREATER
59439: PUSH
59440: LD_VAR 0 2
59444: PUSH
59445: LD_VAR 0 4
59449: GREATER
59450: AND
59451: IFFALSE 59463
// result := 2 else
59453: LD_ADDR_VAR 0 5
59457: PUSH
59458: LD_INT 2
59460: ST_TO_ADDR
59461: GO 59471
// result := 5 ;
59463: LD_ADDR_VAR 0 5
59467: PUSH
59468: LD_INT 5
59470: ST_TO_ADDR
// end ;
59471: LD_VAR 0 5
59475: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59476: LD_INT 0
59478: PPUSH
59479: PPUSH
// if not driver or not IsInUnit ( driver ) then
59480: LD_VAR 0 1
59484: NOT
59485: PUSH
59486: LD_VAR 0 1
59490: PPUSH
59491: CALL_OW 310
59495: NOT
59496: OR
59497: IFFALSE 59501
// exit ;
59499: GO 59591
// vehicle := IsInUnit ( driver ) ;
59501: LD_ADDR_VAR 0 3
59505: PUSH
59506: LD_VAR 0 1
59510: PPUSH
59511: CALL_OW 310
59515: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59516: LD_VAR 0 1
59520: PPUSH
59521: LD_STRING \
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: PUSH
59551: LD_STRING E
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_VAR 0 3
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PPUSH
59587: CALL_OW 446
// end ;
59591: LD_VAR 0 2
59595: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59596: LD_INT 0
59598: PPUSH
59599: PPUSH
// if not driver or not IsInUnit ( driver ) then
59600: LD_VAR 0 1
59604: NOT
59605: PUSH
59606: LD_VAR 0 1
59610: PPUSH
59611: CALL_OW 310
59615: NOT
59616: OR
59617: IFFALSE 59621
// exit ;
59619: GO 59711
// vehicle := IsInUnit ( driver ) ;
59621: LD_ADDR_VAR 0 3
59625: PUSH
59626: LD_VAR 0 1
59630: PPUSH
59631: CALL_OW 310
59635: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59636: LD_VAR 0 1
59640: PPUSH
59641: LD_STRING \
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: PUSH
59671: LD_STRING E
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: LD_VAR 0 3
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PPUSH
59707: CALL_OW 447
// end ;
59711: LD_VAR 0 2
59715: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59716: LD_INT 0
59718: PPUSH
59719: PPUSH
59720: PPUSH
// tmp := [ ] ;
59721: LD_ADDR_VAR 0 5
59725: PUSH
59726: EMPTY
59727: ST_TO_ADDR
// for i in units do
59728: LD_ADDR_VAR 0 4
59732: PUSH
59733: LD_VAR 0 1
59737: PUSH
59738: FOR_IN
59739: IFFALSE 59777
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59741: LD_ADDR_VAR 0 5
59745: PUSH
59746: LD_VAR 0 5
59750: PPUSH
59751: LD_VAR 0 5
59755: PUSH
59756: LD_INT 1
59758: PLUS
59759: PPUSH
59760: LD_VAR 0 4
59764: PPUSH
59765: CALL_OW 256
59769: PPUSH
59770: CALL_OW 2
59774: ST_TO_ADDR
59775: GO 59738
59777: POP
59778: POP
// if not tmp then
59779: LD_VAR 0 5
59783: NOT
59784: IFFALSE 59788
// exit ;
59786: GO 59836
// if asc then
59788: LD_VAR 0 2
59792: IFFALSE 59816
// result := SortListByListAsc ( units , tmp ) else
59794: LD_ADDR_VAR 0 3
59798: PUSH
59799: LD_VAR 0 1
59803: PPUSH
59804: LD_VAR 0 5
59808: PPUSH
59809: CALL_OW 76
59813: ST_TO_ADDR
59814: GO 59836
// result := SortListByListDesc ( units , tmp ) ;
59816: LD_ADDR_VAR 0 3
59820: PUSH
59821: LD_VAR 0 1
59825: PPUSH
59826: LD_VAR 0 5
59830: PPUSH
59831: CALL_OW 77
59835: ST_TO_ADDR
// end ;
59836: LD_VAR 0 3
59840: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59841: LD_INT 0
59843: PPUSH
59844: PPUSH
// task := GetTaskList ( mech ) ;
59845: LD_ADDR_VAR 0 4
59849: PUSH
59850: LD_VAR 0 1
59854: PPUSH
59855: CALL_OW 437
59859: ST_TO_ADDR
// if not task then
59860: LD_VAR 0 4
59864: NOT
59865: IFFALSE 59869
// exit ;
59867: GO 59911
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59869: LD_ADDR_VAR 0 3
59873: PUSH
59874: LD_VAR 0 4
59878: PUSH
59879: LD_INT 1
59881: ARRAY
59882: PUSH
59883: LD_INT 1
59885: ARRAY
59886: PUSH
59887: LD_STRING r
59889: EQUAL
59890: PUSH
59891: LD_VAR 0 4
59895: PUSH
59896: LD_INT 1
59898: ARRAY
59899: PUSH
59900: LD_INT 4
59902: ARRAY
59903: PUSH
59904: LD_VAR 0 2
59908: EQUAL
59909: AND
59910: ST_TO_ADDR
// end ;
59911: LD_VAR 0 3
59915: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59916: LD_INT 0
59918: PPUSH
// SetDir ( unit , d ) ;
59919: LD_VAR 0 1
59923: PPUSH
59924: LD_VAR 0 4
59928: PPUSH
59929: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59933: LD_VAR 0 1
59937: PPUSH
59938: LD_VAR 0 2
59942: PPUSH
59943: LD_VAR 0 3
59947: PPUSH
59948: LD_VAR 0 5
59952: PPUSH
59953: CALL_OW 48
// end ;
59957: LD_VAR 0 6
59961: RET
// export function ToNaturalNumber ( number ) ; begin
59962: LD_INT 0
59964: PPUSH
// result := number div 1 ;
59965: LD_ADDR_VAR 0 2
59969: PUSH
59970: LD_VAR 0 1
59974: PUSH
59975: LD_INT 1
59977: DIV
59978: ST_TO_ADDR
// if number < 0 then
59979: LD_VAR 0 1
59983: PUSH
59984: LD_INT 0
59986: LESS
59987: IFFALSE 59997
// result := 0 ;
59989: LD_ADDR_VAR 0 2
59993: PUSH
59994: LD_INT 0
59996: ST_TO_ADDR
// end ;
59997: LD_VAR 0 2
60001: RET
// export function SortByClass ( units , class ) ; var un ; begin
60002: LD_INT 0
60004: PPUSH
60005: PPUSH
// if not units or not class then
60006: LD_VAR 0 1
60010: NOT
60011: PUSH
60012: LD_VAR 0 2
60016: NOT
60017: OR
60018: IFFALSE 60022
// exit ;
60020: GO 60117
// result := [ ] ;
60022: LD_ADDR_VAR 0 3
60026: PUSH
60027: EMPTY
60028: ST_TO_ADDR
// for un in units do
60029: LD_ADDR_VAR 0 4
60033: PUSH
60034: LD_VAR 0 1
60038: PUSH
60039: FOR_IN
60040: IFFALSE 60115
// if GetClass ( un ) = class then
60042: LD_VAR 0 4
60046: PPUSH
60047: CALL_OW 257
60051: PUSH
60052: LD_VAR 0 2
60056: EQUAL
60057: IFFALSE 60084
// result := Insert ( result , 1 , un ) else
60059: LD_ADDR_VAR 0 3
60063: PUSH
60064: LD_VAR 0 3
60068: PPUSH
60069: LD_INT 1
60071: PPUSH
60072: LD_VAR 0 4
60076: PPUSH
60077: CALL_OW 2
60081: ST_TO_ADDR
60082: GO 60113
// result := Replace ( result , result + 1 , un ) ;
60084: LD_ADDR_VAR 0 3
60088: PUSH
60089: LD_VAR 0 3
60093: PPUSH
60094: LD_VAR 0 3
60098: PUSH
60099: LD_INT 1
60101: PLUS
60102: PPUSH
60103: LD_VAR 0 4
60107: PPUSH
60108: CALL_OW 1
60112: ST_TO_ADDR
60113: GO 60039
60115: POP
60116: POP
// end ;
60117: LD_VAR 0 3
60121: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60122: LD_INT 0
60124: PPUSH
60125: PPUSH
60126: PPUSH
60127: PPUSH
60128: PPUSH
60129: PPUSH
60130: PPUSH
// result := [ ] ;
60131: LD_ADDR_VAR 0 4
60135: PUSH
60136: EMPTY
60137: ST_TO_ADDR
// if x - r < 0 then
60138: LD_VAR 0 1
60142: PUSH
60143: LD_VAR 0 3
60147: MINUS
60148: PUSH
60149: LD_INT 0
60151: LESS
60152: IFFALSE 60164
// min_x := 0 else
60154: LD_ADDR_VAR 0 8
60158: PUSH
60159: LD_INT 0
60161: ST_TO_ADDR
60162: GO 60180
// min_x := x - r ;
60164: LD_ADDR_VAR 0 8
60168: PUSH
60169: LD_VAR 0 1
60173: PUSH
60174: LD_VAR 0 3
60178: MINUS
60179: ST_TO_ADDR
// if y - r < 0 then
60180: LD_VAR 0 2
60184: PUSH
60185: LD_VAR 0 3
60189: MINUS
60190: PUSH
60191: LD_INT 0
60193: LESS
60194: IFFALSE 60206
// min_y := 0 else
60196: LD_ADDR_VAR 0 7
60200: PUSH
60201: LD_INT 0
60203: ST_TO_ADDR
60204: GO 60222
// min_y := y - r ;
60206: LD_ADDR_VAR 0 7
60210: PUSH
60211: LD_VAR 0 2
60215: PUSH
60216: LD_VAR 0 3
60220: MINUS
60221: ST_TO_ADDR
// max_x := x + r ;
60222: LD_ADDR_VAR 0 9
60226: PUSH
60227: LD_VAR 0 1
60231: PUSH
60232: LD_VAR 0 3
60236: PLUS
60237: ST_TO_ADDR
// max_y := y + r ;
60238: LD_ADDR_VAR 0 10
60242: PUSH
60243: LD_VAR 0 2
60247: PUSH
60248: LD_VAR 0 3
60252: PLUS
60253: ST_TO_ADDR
// for _x = min_x to max_x do
60254: LD_ADDR_VAR 0 5
60258: PUSH
60259: DOUBLE
60260: LD_VAR 0 8
60264: DEC
60265: ST_TO_ADDR
60266: LD_VAR 0 9
60270: PUSH
60271: FOR_TO
60272: IFFALSE 60373
// for _y = min_y to max_y do
60274: LD_ADDR_VAR 0 6
60278: PUSH
60279: DOUBLE
60280: LD_VAR 0 7
60284: DEC
60285: ST_TO_ADDR
60286: LD_VAR 0 10
60290: PUSH
60291: FOR_TO
60292: IFFALSE 60369
// begin if not ValidHex ( _x , _y ) then
60294: LD_VAR 0 5
60298: PPUSH
60299: LD_VAR 0 6
60303: PPUSH
60304: CALL_OW 488
60308: NOT
60309: IFFALSE 60313
// continue ;
60311: GO 60291
// if GetResourceTypeXY ( _x , _y ) then
60313: LD_VAR 0 5
60317: PPUSH
60318: LD_VAR 0 6
60322: PPUSH
60323: CALL_OW 283
60327: IFFALSE 60367
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60329: LD_ADDR_VAR 0 4
60333: PUSH
60334: LD_VAR 0 4
60338: PPUSH
60339: LD_VAR 0 4
60343: PUSH
60344: LD_INT 1
60346: PLUS
60347: PPUSH
60348: LD_VAR 0 5
60352: PUSH
60353: LD_VAR 0 6
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PPUSH
60362: CALL_OW 1
60366: ST_TO_ADDR
// end ;
60367: GO 60291
60369: POP
60370: POP
60371: GO 60271
60373: POP
60374: POP
// end ;
60375: LD_VAR 0 4
60379: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
60380: LD_INT 0
60382: PPUSH
60383: PPUSH
60384: PPUSH
60385: PPUSH
60386: PPUSH
60387: PPUSH
// if not units then
60388: LD_VAR 0 1
60392: NOT
60393: IFFALSE 60397
// exit ;
60395: GO 60798
// result := UnitFilter ( units , [ f_ok ] ) ;
60397: LD_ADDR_VAR 0 3
60401: PUSH
60402: LD_VAR 0 1
60406: PPUSH
60407: LD_INT 50
60409: PUSH
60410: EMPTY
60411: LIST
60412: PPUSH
60413: CALL_OW 72
60417: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60418: LD_ADDR_VAR 0 7
60422: PUSH
60423: LD_VAR 0 1
60427: PUSH
60428: LD_INT 1
60430: ARRAY
60431: PPUSH
60432: CALL_OW 255
60436: ST_TO_ADDR
// if not result then
60437: LD_VAR 0 3
60441: NOT
60442: IFFALSE 60446
// exit ;
60444: GO 60798
// for i in result do
60446: LD_ADDR_VAR 0 4
60450: PUSH
60451: LD_VAR 0 3
60455: PUSH
60456: FOR_IN
60457: IFFALSE 60796
// begin tag := GetTag ( i ) + 1 ;
60459: LD_ADDR_VAR 0 8
60463: PUSH
60464: LD_VAR 0 4
60468: PPUSH
60469: CALL_OW 110
60473: PUSH
60474: LD_INT 1
60476: PLUS
60477: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60478: LD_ADDR_VAR 0 6
60482: PUSH
60483: LD_VAR 0 4
60487: PPUSH
60488: CALL_OW 250
60492: PPUSH
60493: LD_VAR 0 4
60497: PPUSH
60498: CALL_OW 251
60502: PPUSH
60503: LD_INT 6
60505: PPUSH
60506: CALL 60122 0 3
60510: ST_TO_ADDR
// if cr then
60511: LD_VAR 0 6
60515: IFFALSE 60554
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60517: LD_VAR 0 4
60521: PPUSH
60522: LD_VAR 0 6
60526: PUSH
60527: LD_INT 1
60529: ARRAY
60530: PUSH
60531: LD_INT 1
60533: ARRAY
60534: PPUSH
60535: LD_VAR 0 6
60539: PUSH
60540: LD_INT 1
60542: ARRAY
60543: PUSH
60544: LD_INT 2
60546: ARRAY
60547: PPUSH
60548: CALL_OW 116
60552: GO 60794
// if path > tag then
60554: LD_VAR 0 2
60558: PUSH
60559: LD_VAR 0 8
60563: GREATER
60564: IFFALSE 60742
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
60566: LD_ADDR_VAR 0 5
60570: PUSH
60571: LD_INT 81
60573: PUSH
60574: LD_VAR 0 7
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 91
60585: PUSH
60586: LD_VAR 0 4
60590: PUSH
60591: LD_INT 12
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PPUSH
60603: CALL_OW 69
60607: ST_TO_ADDR
// if enemy then
60608: LD_VAR 0 5
60612: IFFALSE 60640
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60614: LD_VAR 0 4
60618: PPUSH
60619: LD_VAR 0 5
60623: PPUSH
60624: LD_VAR 0 4
60628: PPUSH
60629: CALL_OW 74
60633: PPUSH
60634: CALL_OW 115
60638: GO 60740
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60640: LD_VAR 0 4
60644: PPUSH
60645: LD_VAR 0 2
60649: PUSH
60650: LD_VAR 0 8
60654: ARRAY
60655: PUSH
60656: LD_INT 1
60658: ARRAY
60659: PPUSH
60660: LD_VAR 0 2
60664: PUSH
60665: LD_VAR 0 8
60669: ARRAY
60670: PUSH
60671: LD_INT 2
60673: ARRAY
60674: PPUSH
60675: CALL_OW 297
60679: PUSH
60680: LD_INT 6
60682: GREATER
60683: IFFALSE 60726
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60685: LD_VAR 0 4
60689: PPUSH
60690: LD_VAR 0 2
60694: PUSH
60695: LD_VAR 0 8
60699: ARRAY
60700: PUSH
60701: LD_INT 1
60703: ARRAY
60704: PPUSH
60705: LD_VAR 0 2
60709: PUSH
60710: LD_VAR 0 8
60714: ARRAY
60715: PUSH
60716: LD_INT 2
60718: ARRAY
60719: PPUSH
60720: CALL_OW 114
60724: GO 60740
// SetTag ( i , tag ) ;
60726: LD_VAR 0 4
60730: PPUSH
60731: LD_VAR 0 8
60735: PPUSH
60736: CALL_OW 109
// end else
60740: GO 60794
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60742: LD_ADDR_VAR 0 5
60746: PUSH
60747: LD_INT 81
60749: PUSH
60750: LD_VAR 0 7
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PPUSH
60759: CALL_OW 69
60763: ST_TO_ADDR
// if enemy then
60764: LD_VAR 0 5
60768: IFFALSE 60794
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60770: LD_VAR 0 4
60774: PPUSH
60775: LD_VAR 0 5
60779: PPUSH
60780: LD_VAR 0 4
60784: PPUSH
60785: CALL_OW 74
60789: PPUSH
60790: CALL_OW 115
// end ; end ;
60794: GO 60456
60796: POP
60797: POP
// end ; end_of_file
60798: LD_VAR 0 3
60802: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
60803: LD_INT 0
60805: PPUSH
60806: PPUSH
60807: PPUSH
60808: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
60809: LD_VAR 0 1
60813: PPUSH
60814: CALL_OW 264
60818: PUSH
60819: LD_EXP 130
60823: EQUAL
60824: IFFALSE 60896
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60826: LD_INT 68
60828: PPUSH
60829: LD_VAR 0 1
60833: PPUSH
60834: CALL_OW 255
60838: PPUSH
60839: CALL_OW 321
60843: PUSH
60844: LD_INT 2
60846: EQUAL
60847: IFFALSE 60859
// eff := 70 else
60849: LD_ADDR_VAR 0 4
60853: PUSH
60854: LD_INT 70
60856: ST_TO_ADDR
60857: GO 60867
// eff := 30 ;
60859: LD_ADDR_VAR 0 4
60863: PUSH
60864: LD_INT 30
60866: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60867: LD_VAR 0 1
60871: PPUSH
60872: CALL_OW 250
60876: PPUSH
60877: LD_VAR 0 1
60881: PPUSH
60882: CALL_OW 251
60886: PPUSH
60887: LD_VAR 0 4
60891: PPUSH
60892: CALL_OW 495
// end ; end ;
60896: LD_VAR 0 2
60900: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60901: LD_INT 0
60903: PPUSH
// end ;
60904: LD_VAR 0 4
60908: RET
// export function SOS_Command ( cmd ) ; begin
60909: LD_INT 0
60911: PPUSH
// end ;
60912: LD_VAR 0 2
60916: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60917: LD_INT 0
60919: PPUSH
// if cmd = 121 then
60920: LD_VAR 0 1
60924: PUSH
60925: LD_INT 121
60927: EQUAL
60928: IFFALSE 60930
// end ;
60930: LD_VAR 0 6
60934: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60935: LD_INT 0
60937: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60938: LD_VAR 0 1
60942: PUSH
60943: LD_INT 250
60945: EQUAL
60946: PUSH
60947: LD_VAR 0 2
60951: PPUSH
60952: CALL_OW 264
60956: PUSH
60957: LD_EXP 133
60961: EQUAL
60962: AND
60963: IFFALSE 60984
// MinerPlaceMine ( unit , x , y ) ;
60965: LD_VAR 0 2
60969: PPUSH
60970: LD_VAR 0 4
60974: PPUSH
60975: LD_VAR 0 5
60979: PPUSH
60980: CALL 63333 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60984: LD_VAR 0 1
60988: PUSH
60989: LD_INT 251
60991: EQUAL
60992: PUSH
60993: LD_VAR 0 2
60997: PPUSH
60998: CALL_OW 264
61002: PUSH
61003: LD_EXP 133
61007: EQUAL
61008: AND
61009: IFFALSE 61030
// MinerDetonateMine ( unit , x , y ) ;
61011: LD_VAR 0 2
61015: PPUSH
61016: LD_VAR 0 4
61020: PPUSH
61021: LD_VAR 0 5
61025: PPUSH
61026: CALL 63610 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61030: LD_VAR 0 1
61034: PUSH
61035: LD_INT 252
61037: EQUAL
61038: PUSH
61039: LD_VAR 0 2
61043: PPUSH
61044: CALL_OW 264
61048: PUSH
61049: LD_EXP 133
61053: EQUAL
61054: AND
61055: IFFALSE 61076
// MinerCreateMinefield ( unit , x , y ) ;
61057: LD_VAR 0 2
61061: PPUSH
61062: LD_VAR 0 4
61066: PPUSH
61067: LD_VAR 0 5
61071: PPUSH
61072: CALL 64027 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61076: LD_VAR 0 1
61080: PUSH
61081: LD_INT 253
61083: EQUAL
61084: PUSH
61085: LD_VAR 0 2
61089: PPUSH
61090: CALL_OW 257
61094: PUSH
61095: LD_INT 5
61097: EQUAL
61098: AND
61099: IFFALSE 61120
// ComBinocular ( unit , x , y ) ;
61101: LD_VAR 0 2
61105: PPUSH
61106: LD_VAR 0 4
61110: PPUSH
61111: LD_VAR 0 5
61115: PPUSH
61116: CALL 64398 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61120: LD_VAR 0 1
61124: PUSH
61125: LD_INT 254
61127: EQUAL
61128: PUSH
61129: LD_VAR 0 2
61133: PPUSH
61134: CALL_OW 264
61138: PUSH
61139: LD_EXP 128
61143: EQUAL
61144: AND
61145: PUSH
61146: LD_VAR 0 3
61150: PPUSH
61151: CALL_OW 263
61155: PUSH
61156: LD_INT 3
61158: EQUAL
61159: AND
61160: IFFALSE 61176
// HackDestroyVehicle ( unit , selectedUnit ) ;
61162: LD_VAR 0 2
61166: PPUSH
61167: LD_VAR 0 3
61171: PPUSH
61172: CALL 62693 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61176: LD_VAR 0 1
61180: PUSH
61181: LD_INT 255
61183: EQUAL
61184: PUSH
61185: LD_VAR 0 2
61189: PPUSH
61190: CALL_OW 264
61194: PUSH
61195: LD_INT 14
61197: PUSH
61198: LD_INT 53
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: IN
61205: AND
61206: PUSH
61207: LD_VAR 0 4
61211: PPUSH
61212: LD_VAR 0 5
61216: PPUSH
61217: CALL_OW 488
61221: AND
61222: IFFALSE 61246
// CutTreeXYR ( unit , x , y , 12 ) ;
61224: LD_VAR 0 2
61228: PPUSH
61229: LD_VAR 0 4
61233: PPUSH
61234: LD_VAR 0 5
61238: PPUSH
61239: LD_INT 12
61241: PPUSH
61242: CALL 61259 0 4
// end ;
61246: LD_VAR 0 6
61250: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
61251: LD_INT 0
61253: PPUSH
// end ;
61254: LD_VAR 0 4
61258: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61259: LD_INT 0
61261: PPUSH
61262: PPUSH
61263: PPUSH
61264: PPUSH
61265: PPUSH
61266: PPUSH
61267: PPUSH
61268: PPUSH
61269: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61270: LD_VAR 0 1
61274: NOT
61275: PUSH
61276: LD_VAR 0 2
61280: PPUSH
61281: LD_VAR 0 3
61285: PPUSH
61286: CALL_OW 488
61290: NOT
61291: OR
61292: PUSH
61293: LD_VAR 0 4
61297: NOT
61298: OR
61299: IFFALSE 61303
// exit ;
61301: GO 61643
// list := [ ] ;
61303: LD_ADDR_VAR 0 13
61307: PUSH
61308: EMPTY
61309: ST_TO_ADDR
// if x - r < 0 then
61310: LD_VAR 0 2
61314: PUSH
61315: LD_VAR 0 4
61319: MINUS
61320: PUSH
61321: LD_INT 0
61323: LESS
61324: IFFALSE 61336
// min_x := 0 else
61326: LD_ADDR_VAR 0 7
61330: PUSH
61331: LD_INT 0
61333: ST_TO_ADDR
61334: GO 61352
// min_x := x - r ;
61336: LD_ADDR_VAR 0 7
61340: PUSH
61341: LD_VAR 0 2
61345: PUSH
61346: LD_VAR 0 4
61350: MINUS
61351: ST_TO_ADDR
// if y - r < 0 then
61352: LD_VAR 0 3
61356: PUSH
61357: LD_VAR 0 4
61361: MINUS
61362: PUSH
61363: LD_INT 0
61365: LESS
61366: IFFALSE 61378
// min_y := 0 else
61368: LD_ADDR_VAR 0 8
61372: PUSH
61373: LD_INT 0
61375: ST_TO_ADDR
61376: GO 61394
// min_y := y - r ;
61378: LD_ADDR_VAR 0 8
61382: PUSH
61383: LD_VAR 0 3
61387: PUSH
61388: LD_VAR 0 4
61392: MINUS
61393: ST_TO_ADDR
// max_x := x + r ;
61394: LD_ADDR_VAR 0 9
61398: PUSH
61399: LD_VAR 0 2
61403: PUSH
61404: LD_VAR 0 4
61408: PLUS
61409: ST_TO_ADDR
// max_y := y + r ;
61410: LD_ADDR_VAR 0 10
61414: PUSH
61415: LD_VAR 0 3
61419: PUSH
61420: LD_VAR 0 4
61424: PLUS
61425: ST_TO_ADDR
// for _x = min_x to max_x do
61426: LD_ADDR_VAR 0 11
61430: PUSH
61431: DOUBLE
61432: LD_VAR 0 7
61436: DEC
61437: ST_TO_ADDR
61438: LD_VAR 0 9
61442: PUSH
61443: FOR_TO
61444: IFFALSE 61561
// for _y = min_y to max_y do
61446: LD_ADDR_VAR 0 12
61450: PUSH
61451: DOUBLE
61452: LD_VAR 0 8
61456: DEC
61457: ST_TO_ADDR
61458: LD_VAR 0 10
61462: PUSH
61463: FOR_TO
61464: IFFALSE 61557
// begin if not ValidHex ( _x , _y ) then
61466: LD_VAR 0 11
61470: PPUSH
61471: LD_VAR 0 12
61475: PPUSH
61476: CALL_OW 488
61480: NOT
61481: IFFALSE 61485
// continue ;
61483: GO 61463
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61485: LD_VAR 0 11
61489: PPUSH
61490: LD_VAR 0 12
61494: PPUSH
61495: CALL_OW 351
61499: PUSH
61500: LD_VAR 0 11
61504: PPUSH
61505: LD_VAR 0 12
61509: PPUSH
61510: CALL_OW 554
61514: AND
61515: IFFALSE 61555
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61517: LD_ADDR_VAR 0 13
61521: PUSH
61522: LD_VAR 0 13
61526: PPUSH
61527: LD_VAR 0 13
61531: PUSH
61532: LD_INT 1
61534: PLUS
61535: PPUSH
61536: LD_VAR 0 11
61540: PUSH
61541: LD_VAR 0 12
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PPUSH
61550: CALL_OW 2
61554: ST_TO_ADDR
// end ;
61555: GO 61463
61557: POP
61558: POP
61559: GO 61443
61561: POP
61562: POP
// if not list then
61563: LD_VAR 0 13
61567: NOT
61568: IFFALSE 61572
// exit ;
61570: GO 61643
// for i in list do
61572: LD_ADDR_VAR 0 6
61576: PUSH
61577: LD_VAR 0 13
61581: PUSH
61582: FOR_IN
61583: IFFALSE 61641
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61585: LD_VAR 0 1
61589: PPUSH
61590: LD_STRING M
61592: PUSH
61593: LD_VAR 0 6
61597: PUSH
61598: LD_INT 1
61600: ARRAY
61601: PUSH
61602: LD_VAR 0 6
61606: PUSH
61607: LD_INT 2
61609: ARRAY
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: PUSH
61632: EMPTY
61633: LIST
61634: PPUSH
61635: CALL_OW 447
61639: GO 61582
61641: POP
61642: POP
// end ;
61643: LD_VAR 0 5
61647: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61648: LD_EXP 61
61652: NOT
61653: IFFALSE 61703
61655: GO 61657
61657: DISABLE
// begin initHack := true ;
61658: LD_ADDR_EXP 61
61662: PUSH
61663: LD_INT 1
61665: ST_TO_ADDR
// hackTanks := [ ] ;
61666: LD_ADDR_EXP 62
61670: PUSH
61671: EMPTY
61672: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61673: LD_ADDR_EXP 63
61677: PUSH
61678: EMPTY
61679: ST_TO_ADDR
// hackLimit := 3 ;
61680: LD_ADDR_EXP 64
61684: PUSH
61685: LD_INT 3
61687: ST_TO_ADDR
// hackDist := 12 ;
61688: LD_ADDR_EXP 65
61692: PUSH
61693: LD_INT 12
61695: ST_TO_ADDR
// hackCounter := [ ] ;
61696: LD_ADDR_EXP 66
61700: PUSH
61701: EMPTY
61702: ST_TO_ADDR
// end ;
61703: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61704: LD_EXP 61
61708: PUSH
61709: LD_INT 34
61711: PUSH
61712: LD_EXP 128
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PPUSH
61721: CALL_OW 69
61725: AND
61726: IFFALSE 61981
61728: GO 61730
61730: DISABLE
61731: LD_INT 0
61733: PPUSH
61734: PPUSH
// begin enable ;
61735: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61736: LD_ADDR_VAR 0 1
61740: PUSH
61741: LD_INT 34
61743: PUSH
61744: LD_EXP 128
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PPUSH
61753: CALL_OW 69
61757: PUSH
61758: FOR_IN
61759: IFFALSE 61979
// begin if not i in hackTanks then
61761: LD_VAR 0 1
61765: PUSH
61766: LD_EXP 62
61770: IN
61771: NOT
61772: IFFALSE 61855
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61774: LD_ADDR_EXP 62
61778: PUSH
61779: LD_EXP 62
61783: PPUSH
61784: LD_EXP 62
61788: PUSH
61789: LD_INT 1
61791: PLUS
61792: PPUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: CALL_OW 1
61802: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61803: LD_ADDR_EXP 63
61807: PUSH
61808: LD_EXP 63
61812: PPUSH
61813: LD_EXP 63
61817: PUSH
61818: LD_INT 1
61820: PLUS
61821: PPUSH
61822: EMPTY
61823: PPUSH
61824: CALL_OW 1
61828: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61829: LD_ADDR_EXP 66
61833: PUSH
61834: LD_EXP 66
61838: PPUSH
61839: LD_EXP 66
61843: PUSH
61844: LD_INT 1
61846: PLUS
61847: PPUSH
61848: EMPTY
61849: PPUSH
61850: CALL_OW 1
61854: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61855: LD_VAR 0 1
61859: PPUSH
61860: CALL_OW 302
61864: NOT
61865: IFFALSE 61878
// begin HackUnlinkAll ( i ) ;
61867: LD_VAR 0 1
61871: PPUSH
61872: CALL 61984 0 1
// continue ;
61876: GO 61758
// end ; HackCheckCapturedStatus ( i ) ;
61878: LD_VAR 0 1
61882: PPUSH
61883: CALL 62427 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61887: LD_ADDR_VAR 0 2
61891: PUSH
61892: LD_INT 81
61894: PUSH
61895: LD_VAR 0 1
61899: PPUSH
61900: CALL_OW 255
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 33
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 91
61921: PUSH
61922: LD_VAR 0 1
61926: PUSH
61927: LD_EXP 65
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 50
61939: PUSH
61940: EMPTY
61941: LIST
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: PPUSH
61949: CALL_OW 69
61953: ST_TO_ADDR
// if not tmp then
61954: LD_VAR 0 2
61958: NOT
61959: IFFALSE 61963
// continue ;
61961: GO 61758
// HackLink ( i , tmp ) ;
61963: LD_VAR 0 1
61967: PPUSH
61968: LD_VAR 0 2
61972: PPUSH
61973: CALL 62120 0 2
// end ;
61977: GO 61758
61979: POP
61980: POP
// end ;
61981: PPOPN 2
61983: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61984: LD_INT 0
61986: PPUSH
61987: PPUSH
61988: PPUSH
// if not hack in hackTanks then
61989: LD_VAR 0 1
61993: PUSH
61994: LD_EXP 62
61998: IN
61999: NOT
62000: IFFALSE 62004
// exit ;
62002: GO 62115
// index := GetElementIndex ( hackTanks , hack ) ;
62004: LD_ADDR_VAR 0 4
62008: PUSH
62009: LD_EXP 62
62013: PPUSH
62014: LD_VAR 0 1
62018: PPUSH
62019: CALL 26019 0 2
62023: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62024: LD_EXP 63
62028: PUSH
62029: LD_VAR 0 4
62033: ARRAY
62034: IFFALSE 62115
// begin for i in hackTanksCaptured [ index ] do
62036: LD_ADDR_VAR 0 3
62040: PUSH
62041: LD_EXP 63
62045: PUSH
62046: LD_VAR 0 4
62050: ARRAY
62051: PUSH
62052: FOR_IN
62053: IFFALSE 62079
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62055: LD_VAR 0 3
62059: PUSH
62060: LD_INT 1
62062: ARRAY
62063: PPUSH
62064: LD_VAR 0 3
62068: PUSH
62069: LD_INT 2
62071: ARRAY
62072: PPUSH
62073: CALL_OW 235
62077: GO 62052
62079: POP
62080: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62081: LD_ADDR_EXP 63
62085: PUSH
62086: LD_EXP 63
62090: PPUSH
62091: LD_VAR 0 4
62095: PPUSH
62096: EMPTY
62097: PPUSH
62098: CALL_OW 1
62102: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62103: LD_VAR 0 1
62107: PPUSH
62108: LD_INT 0
62110: PPUSH
62111: CALL_OW 505
// end ; end ;
62115: LD_VAR 0 2
62119: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62120: LD_INT 0
62122: PPUSH
62123: PPUSH
62124: PPUSH
// if not hack in hackTanks or not vehicles then
62125: LD_VAR 0 1
62129: PUSH
62130: LD_EXP 62
62134: IN
62135: NOT
62136: PUSH
62137: LD_VAR 0 2
62141: NOT
62142: OR
62143: IFFALSE 62147
// exit ;
62145: GO 62422
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62147: LD_ADDR_VAR 0 2
62151: PUSH
62152: LD_VAR 0 1
62156: PPUSH
62157: LD_VAR 0 2
62161: PPUSH
62162: LD_INT 1
62164: PPUSH
62165: LD_INT 1
62167: PPUSH
62168: CALL 26669 0 4
62172: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62173: LD_ADDR_VAR 0 5
62177: PUSH
62178: LD_EXP 62
62182: PPUSH
62183: LD_VAR 0 1
62187: PPUSH
62188: CALL 26019 0 2
62192: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62193: LD_EXP 63
62197: PUSH
62198: LD_VAR 0 5
62202: ARRAY
62203: PUSH
62204: LD_EXP 64
62208: LESS
62209: IFFALSE 62398
// begin for i := 1 to vehicles do
62211: LD_ADDR_VAR 0 4
62215: PUSH
62216: DOUBLE
62217: LD_INT 1
62219: DEC
62220: ST_TO_ADDR
62221: LD_VAR 0 2
62225: PUSH
62226: FOR_TO
62227: IFFALSE 62396
// begin if hackTanksCaptured [ index ] = hackLimit then
62229: LD_EXP 63
62233: PUSH
62234: LD_VAR 0 5
62238: ARRAY
62239: PUSH
62240: LD_EXP 64
62244: EQUAL
62245: IFFALSE 62249
// break ;
62247: GO 62396
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62249: LD_ADDR_EXP 66
62253: PUSH
62254: LD_EXP 66
62258: PPUSH
62259: LD_VAR 0 5
62263: PPUSH
62264: LD_EXP 66
62268: PUSH
62269: LD_VAR 0 5
62273: ARRAY
62274: PUSH
62275: LD_INT 1
62277: PLUS
62278: PPUSH
62279: CALL_OW 1
62283: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62284: LD_ADDR_EXP 63
62288: PUSH
62289: LD_EXP 63
62293: PPUSH
62294: LD_VAR 0 5
62298: PUSH
62299: LD_EXP 63
62303: PUSH
62304: LD_VAR 0 5
62308: ARRAY
62309: PUSH
62310: LD_INT 1
62312: PLUS
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PPUSH
62318: LD_VAR 0 2
62322: PUSH
62323: LD_VAR 0 4
62327: ARRAY
62328: PUSH
62329: LD_VAR 0 2
62333: PUSH
62334: LD_VAR 0 4
62338: ARRAY
62339: PPUSH
62340: CALL_OW 255
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PPUSH
62349: CALL 26234 0 3
62353: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62354: LD_VAR 0 2
62358: PUSH
62359: LD_VAR 0 4
62363: ARRAY
62364: PPUSH
62365: LD_VAR 0 1
62369: PPUSH
62370: CALL_OW 255
62374: PPUSH
62375: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62379: LD_VAR 0 2
62383: PUSH
62384: LD_VAR 0 4
62388: ARRAY
62389: PPUSH
62390: CALL_OW 141
// end ;
62394: GO 62226
62396: POP
62397: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62398: LD_VAR 0 1
62402: PPUSH
62403: LD_EXP 63
62407: PUSH
62408: LD_VAR 0 5
62412: ARRAY
62413: PUSH
62414: LD_INT 0
62416: PLUS
62417: PPUSH
62418: CALL_OW 505
// end ;
62422: LD_VAR 0 3
62426: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62427: LD_INT 0
62429: PPUSH
62430: PPUSH
62431: PPUSH
62432: PPUSH
// if not hack in hackTanks then
62433: LD_VAR 0 1
62437: PUSH
62438: LD_EXP 62
62442: IN
62443: NOT
62444: IFFALSE 62448
// exit ;
62446: GO 62688
// index := GetElementIndex ( hackTanks , hack ) ;
62448: LD_ADDR_VAR 0 4
62452: PUSH
62453: LD_EXP 62
62457: PPUSH
62458: LD_VAR 0 1
62462: PPUSH
62463: CALL 26019 0 2
62467: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62468: LD_ADDR_VAR 0 3
62472: PUSH
62473: DOUBLE
62474: LD_EXP 63
62478: PUSH
62479: LD_VAR 0 4
62483: ARRAY
62484: INC
62485: ST_TO_ADDR
62486: LD_INT 1
62488: PUSH
62489: FOR_DOWNTO
62490: IFFALSE 62662
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62492: LD_ADDR_VAR 0 5
62496: PUSH
62497: LD_EXP 63
62501: PUSH
62502: LD_VAR 0 4
62506: ARRAY
62507: PUSH
62508: LD_VAR 0 3
62512: ARRAY
62513: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62514: LD_VAR 0 5
62518: PUSH
62519: LD_INT 1
62521: ARRAY
62522: PPUSH
62523: CALL_OW 302
62527: NOT
62528: PUSH
62529: LD_VAR 0 5
62533: PUSH
62534: LD_INT 1
62536: ARRAY
62537: PPUSH
62538: CALL_OW 255
62542: PUSH
62543: LD_VAR 0 1
62547: PPUSH
62548: CALL_OW 255
62552: NONEQUAL
62553: OR
62554: IFFALSE 62660
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62556: LD_VAR 0 5
62560: PUSH
62561: LD_INT 1
62563: ARRAY
62564: PPUSH
62565: CALL_OW 305
62569: PUSH
62570: LD_VAR 0 5
62574: PUSH
62575: LD_INT 1
62577: ARRAY
62578: PPUSH
62579: CALL_OW 255
62583: PUSH
62584: LD_VAR 0 1
62588: PPUSH
62589: CALL_OW 255
62593: EQUAL
62594: AND
62595: IFFALSE 62619
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62597: LD_VAR 0 5
62601: PUSH
62602: LD_INT 1
62604: ARRAY
62605: PPUSH
62606: LD_VAR 0 5
62610: PUSH
62611: LD_INT 2
62613: ARRAY
62614: PPUSH
62615: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62619: LD_ADDR_EXP 63
62623: PUSH
62624: LD_EXP 63
62628: PPUSH
62629: LD_VAR 0 4
62633: PPUSH
62634: LD_EXP 63
62638: PUSH
62639: LD_VAR 0 4
62643: ARRAY
62644: PPUSH
62645: LD_VAR 0 3
62649: PPUSH
62650: CALL_OW 3
62654: PPUSH
62655: CALL_OW 1
62659: ST_TO_ADDR
// end ; end ;
62660: GO 62489
62662: POP
62663: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62664: LD_VAR 0 1
62668: PPUSH
62669: LD_EXP 63
62673: PUSH
62674: LD_VAR 0 4
62678: ARRAY
62679: PUSH
62680: LD_INT 0
62682: PLUS
62683: PPUSH
62684: CALL_OW 505
// end ;
62688: LD_VAR 0 2
62692: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62693: LD_INT 0
62695: PPUSH
62696: PPUSH
62697: PPUSH
62698: PPUSH
// if not hack in hackTanks then
62699: LD_VAR 0 1
62703: PUSH
62704: LD_EXP 62
62708: IN
62709: NOT
62710: IFFALSE 62714
// exit ;
62712: GO 62799
// index := GetElementIndex ( hackTanks , hack ) ;
62714: LD_ADDR_VAR 0 5
62718: PUSH
62719: LD_EXP 62
62723: PPUSH
62724: LD_VAR 0 1
62728: PPUSH
62729: CALL 26019 0 2
62733: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62734: LD_ADDR_VAR 0 4
62738: PUSH
62739: DOUBLE
62740: LD_INT 1
62742: DEC
62743: ST_TO_ADDR
62744: LD_EXP 63
62748: PUSH
62749: LD_VAR 0 5
62753: ARRAY
62754: PUSH
62755: FOR_TO
62756: IFFALSE 62797
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62758: LD_EXP 63
62762: PUSH
62763: LD_VAR 0 5
62767: ARRAY
62768: PUSH
62769: LD_VAR 0 4
62773: ARRAY
62774: PUSH
62775: LD_INT 1
62777: ARRAY
62778: PUSH
62779: LD_VAR 0 2
62783: EQUAL
62784: IFFALSE 62795
// KillUnit ( vehicle ) ;
62786: LD_VAR 0 2
62790: PPUSH
62791: CALL_OW 66
62795: GO 62755
62797: POP
62798: POP
// end ;
62799: LD_VAR 0 3
62803: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62804: LD_EXP 67
62808: NOT
62809: IFFALSE 62844
62811: GO 62813
62813: DISABLE
// begin initMiner := true ;
62814: LD_ADDR_EXP 67
62818: PUSH
62819: LD_INT 1
62821: ST_TO_ADDR
// minersList := [ ] ;
62822: LD_ADDR_EXP 68
62826: PUSH
62827: EMPTY
62828: ST_TO_ADDR
// minerMinesList := [ ] ;
62829: LD_ADDR_EXP 69
62833: PUSH
62834: EMPTY
62835: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62836: LD_ADDR_EXP 70
62840: PUSH
62841: LD_INT 5
62843: ST_TO_ADDR
// end ;
62844: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62845: LD_EXP 67
62849: PUSH
62850: LD_INT 34
62852: PUSH
62853: LD_EXP 133
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PPUSH
62862: CALL_OW 69
62866: AND
62867: IFFALSE 63330
62869: GO 62871
62871: DISABLE
62872: LD_INT 0
62874: PPUSH
62875: PPUSH
62876: PPUSH
62877: PPUSH
// begin enable ;
62878: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62879: LD_ADDR_VAR 0 1
62883: PUSH
62884: LD_INT 34
62886: PUSH
62887: LD_EXP 133
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PPUSH
62896: CALL_OW 69
62900: PUSH
62901: FOR_IN
62902: IFFALSE 62974
// begin if not i in minersList then
62904: LD_VAR 0 1
62908: PUSH
62909: LD_EXP 68
62913: IN
62914: NOT
62915: IFFALSE 62972
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62917: LD_ADDR_EXP 68
62921: PUSH
62922: LD_EXP 68
62926: PPUSH
62927: LD_EXP 68
62931: PUSH
62932: LD_INT 1
62934: PLUS
62935: PPUSH
62936: LD_VAR 0 1
62940: PPUSH
62941: CALL_OW 1
62945: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62946: LD_ADDR_EXP 69
62950: PUSH
62951: LD_EXP 69
62955: PPUSH
62956: LD_EXP 69
62960: PUSH
62961: LD_INT 1
62963: PLUS
62964: PPUSH
62965: EMPTY
62966: PPUSH
62967: CALL_OW 1
62971: ST_TO_ADDR
// end end ;
62972: GO 62901
62974: POP
62975: POP
// for i := minerMinesList downto 1 do
62976: LD_ADDR_VAR 0 1
62980: PUSH
62981: DOUBLE
62982: LD_EXP 69
62986: INC
62987: ST_TO_ADDR
62988: LD_INT 1
62990: PUSH
62991: FOR_DOWNTO
62992: IFFALSE 63328
// begin if IsLive ( minersList [ i ] ) then
62994: LD_EXP 68
62998: PUSH
62999: LD_VAR 0 1
63003: ARRAY
63004: PPUSH
63005: CALL_OW 300
63009: IFFALSE 63037
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63011: LD_EXP 68
63015: PUSH
63016: LD_VAR 0 1
63020: ARRAY
63021: PPUSH
63022: LD_EXP 69
63026: PUSH
63027: LD_VAR 0 1
63031: ARRAY
63032: PPUSH
63033: CALL_OW 505
// if not minerMinesList [ i ] then
63037: LD_EXP 69
63041: PUSH
63042: LD_VAR 0 1
63046: ARRAY
63047: NOT
63048: IFFALSE 63052
// continue ;
63050: GO 62991
// for j := minerMinesList [ i ] downto 1 do
63052: LD_ADDR_VAR 0 2
63056: PUSH
63057: DOUBLE
63058: LD_EXP 69
63062: PUSH
63063: LD_VAR 0 1
63067: ARRAY
63068: INC
63069: ST_TO_ADDR
63070: LD_INT 1
63072: PUSH
63073: FOR_DOWNTO
63074: IFFALSE 63324
// begin side := GetSide ( minersList [ i ] ) ;
63076: LD_ADDR_VAR 0 3
63080: PUSH
63081: LD_EXP 68
63085: PUSH
63086: LD_VAR 0 1
63090: ARRAY
63091: PPUSH
63092: CALL_OW 255
63096: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63097: LD_ADDR_VAR 0 4
63101: PUSH
63102: LD_EXP 69
63106: PUSH
63107: LD_VAR 0 1
63111: ARRAY
63112: PUSH
63113: LD_VAR 0 2
63117: ARRAY
63118: PUSH
63119: LD_INT 1
63121: ARRAY
63122: PPUSH
63123: LD_EXP 69
63127: PUSH
63128: LD_VAR 0 1
63132: ARRAY
63133: PUSH
63134: LD_VAR 0 2
63138: ARRAY
63139: PUSH
63140: LD_INT 2
63142: ARRAY
63143: PPUSH
63144: CALL_OW 428
63148: ST_TO_ADDR
// if not tmp then
63149: LD_VAR 0 4
63153: NOT
63154: IFFALSE 63158
// continue ;
63156: GO 63073
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63158: LD_VAR 0 4
63162: PUSH
63163: LD_INT 81
63165: PUSH
63166: LD_VAR 0 3
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PPUSH
63175: CALL_OW 69
63179: IN
63180: PUSH
63181: LD_EXP 69
63185: PUSH
63186: LD_VAR 0 1
63190: ARRAY
63191: PUSH
63192: LD_VAR 0 2
63196: ARRAY
63197: PUSH
63198: LD_INT 1
63200: ARRAY
63201: PPUSH
63202: LD_EXP 69
63206: PUSH
63207: LD_VAR 0 1
63211: ARRAY
63212: PUSH
63213: LD_VAR 0 2
63217: ARRAY
63218: PUSH
63219: LD_INT 2
63221: ARRAY
63222: PPUSH
63223: CALL_OW 458
63227: AND
63228: IFFALSE 63322
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63230: LD_EXP 69
63234: PUSH
63235: LD_VAR 0 1
63239: ARRAY
63240: PUSH
63241: LD_VAR 0 2
63245: ARRAY
63246: PUSH
63247: LD_INT 1
63249: ARRAY
63250: PPUSH
63251: LD_EXP 69
63255: PUSH
63256: LD_VAR 0 1
63260: ARRAY
63261: PUSH
63262: LD_VAR 0 2
63266: ARRAY
63267: PUSH
63268: LD_INT 2
63270: ARRAY
63271: PPUSH
63272: LD_VAR 0 3
63276: PPUSH
63277: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63281: LD_ADDR_EXP 69
63285: PUSH
63286: LD_EXP 69
63290: PPUSH
63291: LD_VAR 0 1
63295: PPUSH
63296: LD_EXP 69
63300: PUSH
63301: LD_VAR 0 1
63305: ARRAY
63306: PPUSH
63307: LD_VAR 0 2
63311: PPUSH
63312: CALL_OW 3
63316: PPUSH
63317: CALL_OW 1
63321: ST_TO_ADDR
// end ; end ;
63322: GO 63073
63324: POP
63325: POP
// end ;
63326: GO 62991
63328: POP
63329: POP
// end ;
63330: PPOPN 4
63332: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63333: LD_INT 0
63335: PPUSH
63336: PPUSH
// result := false ;
63337: LD_ADDR_VAR 0 4
63341: PUSH
63342: LD_INT 0
63344: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63345: LD_VAR 0 1
63349: PPUSH
63350: CALL_OW 264
63354: PUSH
63355: LD_EXP 133
63359: EQUAL
63360: NOT
63361: IFFALSE 63365
// exit ;
63363: GO 63605
// index := GetElementIndex ( minersList , unit ) ;
63365: LD_ADDR_VAR 0 5
63369: PUSH
63370: LD_EXP 68
63374: PPUSH
63375: LD_VAR 0 1
63379: PPUSH
63380: CALL 26019 0 2
63384: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63385: LD_EXP 69
63389: PUSH
63390: LD_VAR 0 5
63394: ARRAY
63395: PUSH
63396: LD_EXP 70
63400: GREATEREQUAL
63401: IFFALSE 63405
// exit ;
63403: GO 63605
// ComMoveXY ( unit , x , y ) ;
63405: LD_VAR 0 1
63409: PPUSH
63410: LD_VAR 0 2
63414: PPUSH
63415: LD_VAR 0 3
63419: PPUSH
63420: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63424: LD_INT 35
63426: PPUSH
63427: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63431: LD_VAR 0 1
63435: PPUSH
63436: LD_VAR 0 2
63440: PPUSH
63441: LD_VAR 0 3
63445: PPUSH
63446: CALL 56791 0 3
63450: NOT
63451: PUSH
63452: LD_VAR 0 1
63456: PPUSH
63457: CALL_OW 314
63461: AND
63462: IFFALSE 63466
// exit ;
63464: GO 63605
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63466: LD_VAR 0 2
63470: PPUSH
63471: LD_VAR 0 3
63475: PPUSH
63476: CALL_OW 428
63480: PUSH
63481: LD_VAR 0 1
63485: EQUAL
63486: PUSH
63487: LD_VAR 0 1
63491: PPUSH
63492: CALL_OW 314
63496: NOT
63497: AND
63498: IFFALSE 63424
// PlaySoundXY ( x , y , PlantMine ) ;
63500: LD_VAR 0 2
63504: PPUSH
63505: LD_VAR 0 3
63509: PPUSH
63510: LD_STRING PlantMine
63512: PPUSH
63513: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63517: LD_VAR 0 2
63521: PPUSH
63522: LD_VAR 0 3
63526: PPUSH
63527: LD_VAR 0 1
63531: PPUSH
63532: CALL_OW 255
63536: PPUSH
63537: LD_INT 0
63539: PPUSH
63540: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63544: LD_ADDR_EXP 69
63548: PUSH
63549: LD_EXP 69
63553: PPUSH
63554: LD_VAR 0 5
63558: PUSH
63559: LD_EXP 69
63563: PUSH
63564: LD_VAR 0 5
63568: ARRAY
63569: PUSH
63570: LD_INT 1
63572: PLUS
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PPUSH
63578: LD_VAR 0 2
63582: PUSH
63583: LD_VAR 0 3
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PPUSH
63592: CALL 26234 0 3
63596: ST_TO_ADDR
// result := true ;
63597: LD_ADDR_VAR 0 4
63601: PUSH
63602: LD_INT 1
63604: ST_TO_ADDR
// end ;
63605: LD_VAR 0 4
63609: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63610: LD_INT 0
63612: PPUSH
63613: PPUSH
63614: PPUSH
// if not unit in minersList then
63615: LD_VAR 0 1
63619: PUSH
63620: LD_EXP 68
63624: IN
63625: NOT
63626: IFFALSE 63630
// exit ;
63628: GO 64022
// index := GetElementIndex ( minersList , unit ) ;
63630: LD_ADDR_VAR 0 6
63634: PUSH
63635: LD_EXP 68
63639: PPUSH
63640: LD_VAR 0 1
63644: PPUSH
63645: CALL 26019 0 2
63649: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63650: LD_ADDR_VAR 0 5
63654: PUSH
63655: DOUBLE
63656: LD_EXP 69
63660: PUSH
63661: LD_VAR 0 6
63665: ARRAY
63666: INC
63667: ST_TO_ADDR
63668: LD_INT 1
63670: PUSH
63671: FOR_DOWNTO
63672: IFFALSE 63833
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63674: LD_EXP 69
63678: PUSH
63679: LD_VAR 0 6
63683: ARRAY
63684: PUSH
63685: LD_VAR 0 5
63689: ARRAY
63690: PUSH
63691: LD_INT 1
63693: ARRAY
63694: PUSH
63695: LD_VAR 0 2
63699: EQUAL
63700: PUSH
63701: LD_EXP 69
63705: PUSH
63706: LD_VAR 0 6
63710: ARRAY
63711: PUSH
63712: LD_VAR 0 5
63716: ARRAY
63717: PUSH
63718: LD_INT 2
63720: ARRAY
63721: PUSH
63722: LD_VAR 0 3
63726: EQUAL
63727: AND
63728: IFFALSE 63831
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63730: LD_EXP 69
63734: PUSH
63735: LD_VAR 0 6
63739: ARRAY
63740: PUSH
63741: LD_VAR 0 5
63745: ARRAY
63746: PUSH
63747: LD_INT 1
63749: ARRAY
63750: PPUSH
63751: LD_EXP 69
63755: PUSH
63756: LD_VAR 0 6
63760: ARRAY
63761: PUSH
63762: LD_VAR 0 5
63766: ARRAY
63767: PUSH
63768: LD_INT 2
63770: ARRAY
63771: PPUSH
63772: LD_VAR 0 1
63776: PPUSH
63777: CALL_OW 255
63781: PPUSH
63782: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63786: LD_ADDR_EXP 69
63790: PUSH
63791: LD_EXP 69
63795: PPUSH
63796: LD_VAR 0 6
63800: PPUSH
63801: LD_EXP 69
63805: PUSH
63806: LD_VAR 0 6
63810: ARRAY
63811: PPUSH
63812: LD_VAR 0 5
63816: PPUSH
63817: CALL_OW 3
63821: PPUSH
63822: CALL_OW 1
63826: ST_TO_ADDR
// exit ;
63827: POP
63828: POP
63829: GO 64022
// end ; end ;
63831: GO 63671
63833: POP
63834: POP
// for i := minerMinesList [ index ] downto 1 do
63835: LD_ADDR_VAR 0 5
63839: PUSH
63840: DOUBLE
63841: LD_EXP 69
63845: PUSH
63846: LD_VAR 0 6
63850: ARRAY
63851: INC
63852: ST_TO_ADDR
63853: LD_INT 1
63855: PUSH
63856: FOR_DOWNTO
63857: IFFALSE 64020
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63859: LD_EXP 69
63863: PUSH
63864: LD_VAR 0 6
63868: ARRAY
63869: PUSH
63870: LD_VAR 0 5
63874: ARRAY
63875: PUSH
63876: LD_INT 1
63878: ARRAY
63879: PPUSH
63880: LD_EXP 69
63884: PUSH
63885: LD_VAR 0 6
63889: ARRAY
63890: PUSH
63891: LD_VAR 0 5
63895: ARRAY
63896: PUSH
63897: LD_INT 2
63899: ARRAY
63900: PPUSH
63901: LD_VAR 0 2
63905: PPUSH
63906: LD_VAR 0 3
63910: PPUSH
63911: CALL_OW 298
63915: PUSH
63916: LD_INT 6
63918: LESS
63919: IFFALSE 64018
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63921: LD_EXP 69
63925: PUSH
63926: LD_VAR 0 6
63930: ARRAY
63931: PUSH
63932: LD_VAR 0 5
63936: ARRAY
63937: PUSH
63938: LD_INT 1
63940: ARRAY
63941: PPUSH
63942: LD_EXP 69
63946: PUSH
63947: LD_VAR 0 6
63951: ARRAY
63952: PUSH
63953: LD_VAR 0 5
63957: ARRAY
63958: PUSH
63959: LD_INT 2
63961: ARRAY
63962: PPUSH
63963: LD_VAR 0 1
63967: PPUSH
63968: CALL_OW 255
63972: PPUSH
63973: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63977: LD_ADDR_EXP 69
63981: PUSH
63982: LD_EXP 69
63986: PPUSH
63987: LD_VAR 0 6
63991: PPUSH
63992: LD_EXP 69
63996: PUSH
63997: LD_VAR 0 6
64001: ARRAY
64002: PPUSH
64003: LD_VAR 0 5
64007: PPUSH
64008: CALL_OW 3
64012: PPUSH
64013: CALL_OW 1
64017: ST_TO_ADDR
// end ; end ;
64018: GO 63856
64020: POP
64021: POP
// end ;
64022: LD_VAR 0 4
64026: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64027: LD_INT 0
64029: PPUSH
64030: PPUSH
64031: PPUSH
64032: PPUSH
64033: PPUSH
64034: PPUSH
64035: PPUSH
64036: PPUSH
64037: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64038: LD_VAR 0 1
64042: PPUSH
64043: CALL_OW 264
64047: PUSH
64048: LD_EXP 133
64052: EQUAL
64053: NOT
64054: PUSH
64055: LD_VAR 0 1
64059: PUSH
64060: LD_EXP 68
64064: IN
64065: NOT
64066: OR
64067: IFFALSE 64071
// exit ;
64069: GO 64393
// index := GetElementIndex ( minersList , unit ) ;
64071: LD_ADDR_VAR 0 6
64075: PUSH
64076: LD_EXP 68
64080: PPUSH
64081: LD_VAR 0 1
64085: PPUSH
64086: CALL 26019 0 2
64090: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64091: LD_ADDR_VAR 0 8
64095: PUSH
64096: LD_EXP 70
64100: PUSH
64101: LD_EXP 69
64105: PUSH
64106: LD_VAR 0 6
64110: ARRAY
64111: MINUS
64112: ST_TO_ADDR
// if not minesFreeAmount then
64113: LD_VAR 0 8
64117: NOT
64118: IFFALSE 64122
// exit ;
64120: GO 64393
// tmp := [ ] ;
64122: LD_ADDR_VAR 0 7
64126: PUSH
64127: EMPTY
64128: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64129: LD_ADDR_VAR 0 5
64133: PUSH
64134: DOUBLE
64135: LD_INT 1
64137: DEC
64138: ST_TO_ADDR
64139: LD_VAR 0 8
64143: PUSH
64144: FOR_TO
64145: IFFALSE 64340
// begin _d := rand ( 0 , 5 ) ;
64147: LD_ADDR_VAR 0 11
64151: PUSH
64152: LD_INT 0
64154: PPUSH
64155: LD_INT 5
64157: PPUSH
64158: CALL_OW 12
64162: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64163: LD_ADDR_VAR 0 12
64167: PUSH
64168: LD_INT 2
64170: PPUSH
64171: LD_INT 6
64173: PPUSH
64174: CALL_OW 12
64178: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64179: LD_ADDR_VAR 0 9
64183: PUSH
64184: LD_VAR 0 2
64188: PPUSH
64189: LD_VAR 0 11
64193: PPUSH
64194: LD_VAR 0 12
64198: PPUSH
64199: CALL_OW 272
64203: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64204: LD_ADDR_VAR 0 10
64208: PUSH
64209: LD_VAR 0 3
64213: PPUSH
64214: LD_VAR 0 11
64218: PPUSH
64219: LD_VAR 0 12
64223: PPUSH
64224: CALL_OW 273
64228: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64229: LD_VAR 0 9
64233: PPUSH
64234: LD_VAR 0 10
64238: PPUSH
64239: CALL_OW 488
64243: PUSH
64244: LD_VAR 0 9
64248: PUSH
64249: LD_VAR 0 10
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_VAR 0 7
64262: IN
64263: NOT
64264: AND
64265: PUSH
64266: LD_VAR 0 9
64270: PPUSH
64271: LD_VAR 0 10
64275: PPUSH
64276: CALL_OW 458
64280: NOT
64281: AND
64282: IFFALSE 64324
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64284: LD_ADDR_VAR 0 7
64288: PUSH
64289: LD_VAR 0 7
64293: PPUSH
64294: LD_VAR 0 7
64298: PUSH
64299: LD_INT 1
64301: PLUS
64302: PPUSH
64303: LD_VAR 0 9
64307: PUSH
64308: LD_VAR 0 10
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PPUSH
64317: CALL_OW 1
64321: ST_TO_ADDR
64322: GO 64338
// i := i - 1 ;
64324: LD_ADDR_VAR 0 5
64328: PUSH
64329: LD_VAR 0 5
64333: PUSH
64334: LD_INT 1
64336: MINUS
64337: ST_TO_ADDR
// end ;
64338: GO 64144
64340: POP
64341: POP
// for i in tmp do
64342: LD_ADDR_VAR 0 5
64346: PUSH
64347: LD_VAR 0 7
64351: PUSH
64352: FOR_IN
64353: IFFALSE 64391
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64355: LD_VAR 0 1
64359: PPUSH
64360: LD_VAR 0 5
64364: PUSH
64365: LD_INT 1
64367: ARRAY
64368: PPUSH
64369: LD_VAR 0 5
64373: PUSH
64374: LD_INT 2
64376: ARRAY
64377: PPUSH
64378: CALL 63333 0 3
64382: NOT
64383: IFFALSE 64389
// exit ;
64385: POP
64386: POP
64387: GO 64393
64389: GO 64352
64391: POP
64392: POP
// end ;
64393: LD_VAR 0 4
64397: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
64398: LD_INT 0
64400: PPUSH
64401: PPUSH
64402: PPUSH
64403: PPUSH
64404: PPUSH
64405: PPUSH
64406: PPUSH
// if not GetClass ( unit ) = class_sniper then
64407: LD_VAR 0 1
64411: PPUSH
64412: CALL_OW 257
64416: PUSH
64417: LD_INT 5
64419: EQUAL
64420: NOT
64421: IFFALSE 64425
// exit ;
64423: GO 64813
// dist := 8 ;
64425: LD_ADDR_VAR 0 5
64429: PUSH
64430: LD_INT 8
64432: ST_TO_ADDR
// viewRange := 12 ;
64433: LD_ADDR_VAR 0 7
64437: PUSH
64438: LD_INT 12
64440: ST_TO_ADDR
// side := GetSide ( unit ) ;
64441: LD_ADDR_VAR 0 6
64445: PUSH
64446: LD_VAR 0 1
64450: PPUSH
64451: CALL_OW 255
64455: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64456: LD_INT 61
64458: PPUSH
64459: LD_VAR 0 6
64463: PPUSH
64464: CALL_OW 321
64468: PUSH
64469: LD_INT 2
64471: EQUAL
64472: IFFALSE 64482
// viewRange := 16 ;
64474: LD_ADDR_VAR 0 7
64478: PUSH
64479: LD_INT 16
64481: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64482: LD_VAR 0 1
64486: PPUSH
64487: LD_VAR 0 2
64491: PPUSH
64492: LD_VAR 0 3
64496: PPUSH
64497: CALL_OW 297
64501: PUSH
64502: LD_VAR 0 5
64506: GREATER
64507: IFFALSE 64586
// begin ComMoveXY ( unit , x , y ) ;
64509: LD_VAR 0 1
64513: PPUSH
64514: LD_VAR 0 2
64518: PPUSH
64519: LD_VAR 0 3
64523: PPUSH
64524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64528: LD_INT 35
64530: PPUSH
64531: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64535: LD_VAR 0 1
64539: PPUSH
64540: LD_VAR 0 2
64544: PPUSH
64545: LD_VAR 0 3
64549: PPUSH
64550: CALL 56791 0 3
64554: NOT
64555: IFFALSE 64559
// exit ;
64557: GO 64813
// until GetDistUnitXY ( unit , x , y ) < dist ;
64559: LD_VAR 0 1
64563: PPUSH
64564: LD_VAR 0 2
64568: PPUSH
64569: LD_VAR 0 3
64573: PPUSH
64574: CALL_OW 297
64578: PUSH
64579: LD_VAR 0 5
64583: LESS
64584: IFFALSE 64528
// end ; ComTurnXY ( unit , x , y ) ;
64586: LD_VAR 0 1
64590: PPUSH
64591: LD_VAR 0 2
64595: PPUSH
64596: LD_VAR 0 3
64600: PPUSH
64601: CALL_OW 118
// wait ( 5 ) ;
64605: LD_INT 5
64607: PPUSH
64608: CALL_OW 67
// _d := GetDir ( unit ) ;
64612: LD_ADDR_VAR 0 10
64616: PUSH
64617: LD_VAR 0 1
64621: PPUSH
64622: CALL_OW 254
64626: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
64627: LD_ADDR_VAR 0 8
64631: PUSH
64632: LD_VAR 0 1
64636: PPUSH
64637: CALL_OW 250
64641: PPUSH
64642: LD_VAR 0 10
64646: PPUSH
64647: LD_VAR 0 5
64651: PPUSH
64652: CALL_OW 272
64656: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64657: LD_ADDR_VAR 0 9
64661: PUSH
64662: LD_VAR 0 1
64666: PPUSH
64667: CALL_OW 251
64671: PPUSH
64672: LD_VAR 0 10
64676: PPUSH
64677: LD_VAR 0 5
64681: PPUSH
64682: CALL_OW 273
64686: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64687: LD_VAR 0 8
64691: PPUSH
64692: LD_VAR 0 9
64696: PPUSH
64697: CALL_OW 488
64701: NOT
64702: IFFALSE 64706
// exit ;
64704: GO 64813
// ComAnimCustom ( unit , 1 ) ;
64706: LD_VAR 0 1
64710: PPUSH
64711: LD_INT 1
64713: PPUSH
64714: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64718: LD_VAR 0 8
64722: PPUSH
64723: LD_VAR 0 9
64727: PPUSH
64728: LD_VAR 0 6
64732: PPUSH
64733: LD_VAR 0 7
64737: PPUSH
64738: CALL_OW 330
// repeat wait ( 1 ) ;
64742: LD_INT 1
64744: PPUSH
64745: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64749: LD_VAR 0 1
64753: PPUSH
64754: CALL_OW 316
64758: PUSH
64759: LD_VAR 0 1
64763: PPUSH
64764: CALL_OW 314
64768: OR
64769: PUSH
64770: LD_VAR 0 1
64774: PPUSH
64775: CALL_OW 302
64779: NOT
64780: OR
64781: PUSH
64782: LD_VAR 0 1
64786: PPUSH
64787: CALL_OW 301
64791: OR
64792: IFFALSE 64742
// RemoveSeeing ( _x , _y , side ) ;
64794: LD_VAR 0 8
64798: PPUSH
64799: LD_VAR 0 9
64803: PPUSH
64804: LD_VAR 0 6
64808: PPUSH
64809: CALL_OW 331
// end ; end_of_file
64813: LD_VAR 0 4
64817: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64818: LD_INT 0
64820: PPUSH
// if p2 = 100 then
64821: LD_VAR 0 2
64825: PUSH
64826: LD_INT 100
64828: EQUAL
64829: IFFALSE 65778
// begin if not StreamModeActive then
64831: LD_EXP 71
64835: NOT
64836: IFFALSE 64846
// StreamModeActive := true ;
64838: LD_ADDR_EXP 71
64842: PUSH
64843: LD_INT 1
64845: ST_TO_ADDR
// if p3 = 0 then
64846: LD_VAR 0 3
64850: PUSH
64851: LD_INT 0
64853: EQUAL
64854: IFFALSE 64860
// InitStreamMode ;
64856: CALL 65938 0 0
// if p3 = 1 then
64860: LD_VAR 0 3
64864: PUSH
64865: LD_INT 1
64867: EQUAL
64868: IFFALSE 64878
// sRocket := true ;
64870: LD_ADDR_EXP 76
64874: PUSH
64875: LD_INT 1
64877: ST_TO_ADDR
// if p3 = 2 then
64878: LD_VAR 0 3
64882: PUSH
64883: LD_INT 2
64885: EQUAL
64886: IFFALSE 64896
// sSpeed := true ;
64888: LD_ADDR_EXP 75
64892: PUSH
64893: LD_INT 1
64895: ST_TO_ADDR
// if p3 = 3 then
64896: LD_VAR 0 3
64900: PUSH
64901: LD_INT 3
64903: EQUAL
64904: IFFALSE 64914
// sEngine := true ;
64906: LD_ADDR_EXP 77
64910: PUSH
64911: LD_INT 1
64913: ST_TO_ADDR
// if p3 = 4 then
64914: LD_VAR 0 3
64918: PUSH
64919: LD_INT 4
64921: EQUAL
64922: IFFALSE 64932
// sSpec := true ;
64924: LD_ADDR_EXP 74
64928: PUSH
64929: LD_INT 1
64931: ST_TO_ADDR
// if p3 = 5 then
64932: LD_VAR 0 3
64936: PUSH
64937: LD_INT 5
64939: EQUAL
64940: IFFALSE 64950
// sLevel := true ;
64942: LD_ADDR_EXP 78
64946: PUSH
64947: LD_INT 1
64949: ST_TO_ADDR
// if p3 = 6 then
64950: LD_VAR 0 3
64954: PUSH
64955: LD_INT 6
64957: EQUAL
64958: IFFALSE 64968
// sArmoury := true ;
64960: LD_ADDR_EXP 79
64964: PUSH
64965: LD_INT 1
64967: ST_TO_ADDR
// if p3 = 7 then
64968: LD_VAR 0 3
64972: PUSH
64973: LD_INT 7
64975: EQUAL
64976: IFFALSE 64986
// sRadar := true ;
64978: LD_ADDR_EXP 80
64982: PUSH
64983: LD_INT 1
64985: ST_TO_ADDR
// if p3 = 8 then
64986: LD_VAR 0 3
64990: PUSH
64991: LD_INT 8
64993: EQUAL
64994: IFFALSE 65004
// sBunker := true ;
64996: LD_ADDR_EXP 81
65000: PUSH
65001: LD_INT 1
65003: ST_TO_ADDR
// if p3 = 9 then
65004: LD_VAR 0 3
65008: PUSH
65009: LD_INT 9
65011: EQUAL
65012: IFFALSE 65022
// sHack := true ;
65014: LD_ADDR_EXP 82
65018: PUSH
65019: LD_INT 1
65021: ST_TO_ADDR
// if p3 = 10 then
65022: LD_VAR 0 3
65026: PUSH
65027: LD_INT 10
65029: EQUAL
65030: IFFALSE 65040
// sFire := true ;
65032: LD_ADDR_EXP 83
65036: PUSH
65037: LD_INT 1
65039: ST_TO_ADDR
// if p3 = 11 then
65040: LD_VAR 0 3
65044: PUSH
65045: LD_INT 11
65047: EQUAL
65048: IFFALSE 65058
// sRefresh := true ;
65050: LD_ADDR_EXP 84
65054: PUSH
65055: LD_INT 1
65057: ST_TO_ADDR
// if p3 = 12 then
65058: LD_VAR 0 3
65062: PUSH
65063: LD_INT 12
65065: EQUAL
65066: IFFALSE 65076
// sExp := true ;
65068: LD_ADDR_EXP 85
65072: PUSH
65073: LD_INT 1
65075: ST_TO_ADDR
// if p3 = 13 then
65076: LD_VAR 0 3
65080: PUSH
65081: LD_INT 13
65083: EQUAL
65084: IFFALSE 65094
// sDepot := true ;
65086: LD_ADDR_EXP 86
65090: PUSH
65091: LD_INT 1
65093: ST_TO_ADDR
// if p3 = 14 then
65094: LD_VAR 0 3
65098: PUSH
65099: LD_INT 14
65101: EQUAL
65102: IFFALSE 65112
// sFlag := true ;
65104: LD_ADDR_EXP 87
65108: PUSH
65109: LD_INT 1
65111: ST_TO_ADDR
// if p3 = 15 then
65112: LD_VAR 0 3
65116: PUSH
65117: LD_INT 15
65119: EQUAL
65120: IFFALSE 65130
// sKamikadze := true ;
65122: LD_ADDR_EXP 95
65126: PUSH
65127: LD_INT 1
65129: ST_TO_ADDR
// if p3 = 16 then
65130: LD_VAR 0 3
65134: PUSH
65135: LD_INT 16
65137: EQUAL
65138: IFFALSE 65148
// sTroll := true ;
65140: LD_ADDR_EXP 96
65144: PUSH
65145: LD_INT 1
65147: ST_TO_ADDR
// if p3 = 17 then
65148: LD_VAR 0 3
65152: PUSH
65153: LD_INT 17
65155: EQUAL
65156: IFFALSE 65166
// sSlow := true ;
65158: LD_ADDR_EXP 97
65162: PUSH
65163: LD_INT 1
65165: ST_TO_ADDR
// if p3 = 18 then
65166: LD_VAR 0 3
65170: PUSH
65171: LD_INT 18
65173: EQUAL
65174: IFFALSE 65184
// sLack := true ;
65176: LD_ADDR_EXP 98
65180: PUSH
65181: LD_INT 1
65183: ST_TO_ADDR
// if p3 = 19 then
65184: LD_VAR 0 3
65188: PUSH
65189: LD_INT 19
65191: EQUAL
65192: IFFALSE 65202
// sTank := true ;
65194: LD_ADDR_EXP 100
65198: PUSH
65199: LD_INT 1
65201: ST_TO_ADDR
// if p3 = 20 then
65202: LD_VAR 0 3
65206: PUSH
65207: LD_INT 20
65209: EQUAL
65210: IFFALSE 65220
// sRemote := true ;
65212: LD_ADDR_EXP 101
65216: PUSH
65217: LD_INT 1
65219: ST_TO_ADDR
// if p3 = 21 then
65220: LD_VAR 0 3
65224: PUSH
65225: LD_INT 21
65227: EQUAL
65228: IFFALSE 65238
// sPowell := true ;
65230: LD_ADDR_EXP 102
65234: PUSH
65235: LD_INT 1
65237: ST_TO_ADDR
// if p3 = 22 then
65238: LD_VAR 0 3
65242: PUSH
65243: LD_INT 22
65245: EQUAL
65246: IFFALSE 65256
// sTeleport := true ;
65248: LD_ADDR_EXP 105
65252: PUSH
65253: LD_INT 1
65255: ST_TO_ADDR
// if p3 = 23 then
65256: LD_VAR 0 3
65260: PUSH
65261: LD_INT 23
65263: EQUAL
65264: IFFALSE 65274
// sOilTower := true ;
65266: LD_ADDR_EXP 107
65270: PUSH
65271: LD_INT 1
65273: ST_TO_ADDR
// if p3 = 24 then
65274: LD_VAR 0 3
65278: PUSH
65279: LD_INT 24
65281: EQUAL
65282: IFFALSE 65292
// sShovel := true ;
65284: LD_ADDR_EXP 108
65288: PUSH
65289: LD_INT 1
65291: ST_TO_ADDR
// if p3 = 25 then
65292: LD_VAR 0 3
65296: PUSH
65297: LD_INT 25
65299: EQUAL
65300: IFFALSE 65310
// sSheik := true ;
65302: LD_ADDR_EXP 109
65306: PUSH
65307: LD_INT 1
65309: ST_TO_ADDR
// if p3 = 26 then
65310: LD_VAR 0 3
65314: PUSH
65315: LD_INT 26
65317: EQUAL
65318: IFFALSE 65328
// sEarthquake := true ;
65320: LD_ADDR_EXP 111
65324: PUSH
65325: LD_INT 1
65327: ST_TO_ADDR
// if p3 = 27 then
65328: LD_VAR 0 3
65332: PUSH
65333: LD_INT 27
65335: EQUAL
65336: IFFALSE 65346
// sAI := true ;
65338: LD_ADDR_EXP 112
65342: PUSH
65343: LD_INT 1
65345: ST_TO_ADDR
// if p3 = 28 then
65346: LD_VAR 0 3
65350: PUSH
65351: LD_INT 28
65353: EQUAL
65354: IFFALSE 65364
// sCargo := true ;
65356: LD_ADDR_EXP 115
65360: PUSH
65361: LD_INT 1
65363: ST_TO_ADDR
// if p3 = 29 then
65364: LD_VAR 0 3
65368: PUSH
65369: LD_INT 29
65371: EQUAL
65372: IFFALSE 65382
// sDLaser := true ;
65374: LD_ADDR_EXP 116
65378: PUSH
65379: LD_INT 1
65381: ST_TO_ADDR
// if p3 = 30 then
65382: LD_VAR 0 3
65386: PUSH
65387: LD_INT 30
65389: EQUAL
65390: IFFALSE 65400
// sExchange := true ;
65392: LD_ADDR_EXP 117
65396: PUSH
65397: LD_INT 1
65399: ST_TO_ADDR
// if p3 = 31 then
65400: LD_VAR 0 3
65404: PUSH
65405: LD_INT 31
65407: EQUAL
65408: IFFALSE 65418
// sFac := true ;
65410: LD_ADDR_EXP 118
65414: PUSH
65415: LD_INT 1
65417: ST_TO_ADDR
// if p3 = 32 then
65418: LD_VAR 0 3
65422: PUSH
65423: LD_INT 32
65425: EQUAL
65426: IFFALSE 65436
// sPower := true ;
65428: LD_ADDR_EXP 119
65432: PUSH
65433: LD_INT 1
65435: ST_TO_ADDR
// if p3 = 33 then
65436: LD_VAR 0 3
65440: PUSH
65441: LD_INT 33
65443: EQUAL
65444: IFFALSE 65454
// sRandom := true ;
65446: LD_ADDR_EXP 120
65450: PUSH
65451: LD_INT 1
65453: ST_TO_ADDR
// if p3 = 34 then
65454: LD_VAR 0 3
65458: PUSH
65459: LD_INT 34
65461: EQUAL
65462: IFFALSE 65472
// sShield := true ;
65464: LD_ADDR_EXP 121
65468: PUSH
65469: LD_INT 1
65471: ST_TO_ADDR
// if p3 = 35 then
65472: LD_VAR 0 3
65476: PUSH
65477: LD_INT 35
65479: EQUAL
65480: IFFALSE 65490
// sTime := true ;
65482: LD_ADDR_EXP 122
65486: PUSH
65487: LD_INT 1
65489: ST_TO_ADDR
// if p3 = 36 then
65490: LD_VAR 0 3
65494: PUSH
65495: LD_INT 36
65497: EQUAL
65498: IFFALSE 65508
// sTools := true ;
65500: LD_ADDR_EXP 123
65504: PUSH
65505: LD_INT 1
65507: ST_TO_ADDR
// if p3 = 101 then
65508: LD_VAR 0 3
65512: PUSH
65513: LD_INT 101
65515: EQUAL
65516: IFFALSE 65526
// sSold := true ;
65518: LD_ADDR_EXP 88
65522: PUSH
65523: LD_INT 1
65525: ST_TO_ADDR
// if p3 = 102 then
65526: LD_VAR 0 3
65530: PUSH
65531: LD_INT 102
65533: EQUAL
65534: IFFALSE 65544
// sDiff := true ;
65536: LD_ADDR_EXP 89
65540: PUSH
65541: LD_INT 1
65543: ST_TO_ADDR
// if p3 = 103 then
65544: LD_VAR 0 3
65548: PUSH
65549: LD_INT 103
65551: EQUAL
65552: IFFALSE 65562
// sFog := true ;
65554: LD_ADDR_EXP 92
65558: PUSH
65559: LD_INT 1
65561: ST_TO_ADDR
// if p3 = 104 then
65562: LD_VAR 0 3
65566: PUSH
65567: LD_INT 104
65569: EQUAL
65570: IFFALSE 65580
// sReset := true ;
65572: LD_ADDR_EXP 93
65576: PUSH
65577: LD_INT 1
65579: ST_TO_ADDR
// if p3 = 105 then
65580: LD_VAR 0 3
65584: PUSH
65585: LD_INT 105
65587: EQUAL
65588: IFFALSE 65598
// sSun := true ;
65590: LD_ADDR_EXP 94
65594: PUSH
65595: LD_INT 1
65597: ST_TO_ADDR
// if p3 = 106 then
65598: LD_VAR 0 3
65602: PUSH
65603: LD_INT 106
65605: EQUAL
65606: IFFALSE 65616
// sTiger := true ;
65608: LD_ADDR_EXP 90
65612: PUSH
65613: LD_INT 1
65615: ST_TO_ADDR
// if p3 = 107 then
65616: LD_VAR 0 3
65620: PUSH
65621: LD_INT 107
65623: EQUAL
65624: IFFALSE 65634
// sBomb := true ;
65626: LD_ADDR_EXP 91
65630: PUSH
65631: LD_INT 1
65633: ST_TO_ADDR
// if p3 = 108 then
65634: LD_VAR 0 3
65638: PUSH
65639: LD_INT 108
65641: EQUAL
65642: IFFALSE 65652
// sWound := true ;
65644: LD_ADDR_EXP 99
65648: PUSH
65649: LD_INT 1
65651: ST_TO_ADDR
// if p3 = 109 then
65652: LD_VAR 0 3
65656: PUSH
65657: LD_INT 109
65659: EQUAL
65660: IFFALSE 65670
// sBetray := true ;
65662: LD_ADDR_EXP 103
65666: PUSH
65667: LD_INT 1
65669: ST_TO_ADDR
// if p3 = 110 then
65670: LD_VAR 0 3
65674: PUSH
65675: LD_INT 110
65677: EQUAL
65678: IFFALSE 65688
// sContamin := true ;
65680: LD_ADDR_EXP 104
65684: PUSH
65685: LD_INT 1
65687: ST_TO_ADDR
// if p3 = 111 then
65688: LD_VAR 0 3
65692: PUSH
65693: LD_INT 111
65695: EQUAL
65696: IFFALSE 65706
// sOil := true ;
65698: LD_ADDR_EXP 106
65702: PUSH
65703: LD_INT 1
65705: ST_TO_ADDR
// if p3 = 112 then
65706: LD_VAR 0 3
65710: PUSH
65711: LD_INT 112
65713: EQUAL
65714: IFFALSE 65724
// sStu := true ;
65716: LD_ADDR_EXP 110
65720: PUSH
65721: LD_INT 1
65723: ST_TO_ADDR
// if p3 = 113 then
65724: LD_VAR 0 3
65728: PUSH
65729: LD_INT 113
65731: EQUAL
65732: IFFALSE 65742
// sBazooka := true ;
65734: LD_ADDR_EXP 113
65738: PUSH
65739: LD_INT 1
65741: ST_TO_ADDR
// if p3 = 114 then
65742: LD_VAR 0 3
65746: PUSH
65747: LD_INT 114
65749: EQUAL
65750: IFFALSE 65760
// sMortar := true ;
65752: LD_ADDR_EXP 114
65756: PUSH
65757: LD_INT 1
65759: ST_TO_ADDR
// if p3 = 115 then
65760: LD_VAR 0 3
65764: PUSH
65765: LD_INT 115
65767: EQUAL
65768: IFFALSE 65778
// sRanger := true ;
65770: LD_ADDR_EXP 124
65774: PUSH
65775: LD_INT 1
65777: ST_TO_ADDR
// end ; if p2 = 101 then
65778: LD_VAR 0 2
65782: PUSH
65783: LD_INT 101
65785: EQUAL
65786: IFFALSE 65914
// begin case p3 of 1 :
65788: LD_VAR 0 3
65792: PUSH
65793: LD_INT 1
65795: DOUBLE
65796: EQUAL
65797: IFTRUE 65801
65799: GO 65808
65801: POP
// hHackUnlimitedResources ; 2 :
65802: CALL 76951 0 0
65806: GO 65914
65808: LD_INT 2
65810: DOUBLE
65811: EQUAL
65812: IFTRUE 65816
65814: GO 65823
65816: POP
// hHackSetLevel10 ; 3 :
65817: CALL 77084 0 0
65821: GO 65914
65823: LD_INT 3
65825: DOUBLE
65826: EQUAL
65827: IFTRUE 65831
65829: GO 65838
65831: POP
// hHackSetLevel10YourUnits ; 4 :
65832: CALL 77169 0 0
65836: GO 65914
65838: LD_INT 4
65840: DOUBLE
65841: EQUAL
65842: IFTRUE 65846
65844: GO 65853
65846: POP
// hHackInvincible ; 5 :
65847: CALL 77617 0 0
65851: GO 65914
65853: LD_INT 5
65855: DOUBLE
65856: EQUAL
65857: IFTRUE 65861
65859: GO 65868
65861: POP
// hHackInvisible ; 6 :
65862: CALL 77728 0 0
65866: GO 65914
65868: LD_INT 6
65870: DOUBLE
65871: EQUAL
65872: IFTRUE 65876
65874: GO 65883
65876: POP
// hHackChangeYourSide ; 7 :
65877: CALL 77785 0 0
65881: GO 65914
65883: LD_INT 7
65885: DOUBLE
65886: EQUAL
65887: IFTRUE 65891
65889: GO 65898
65891: POP
// hHackChangeUnitSide ; 8 :
65892: CALL 77827 0 0
65896: GO 65914
65898: LD_INT 8
65900: DOUBLE
65901: EQUAL
65902: IFTRUE 65906
65904: GO 65913
65906: POP
// hHackFog ; end ;
65907: CALL 77928 0 0
65911: GO 65914
65913: POP
// end ; end ;
65914: LD_VAR 0 7
65918: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
65919: GO 65921
65921: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
65922: LD_STRING initStreamRollete();
65924: PPUSH
65925: CALL_OW 559
// InitStreamMode ;
65929: CALL 65938 0 0
// DefineStreamItems ( ) ;
65933: CALL 66378 0 0
// end ;
65937: END
// function InitStreamMode ; begin
65938: LD_INT 0
65940: PPUSH
// streamModeActive := false ;
65941: LD_ADDR_EXP 71
65945: PUSH
65946: LD_INT 0
65948: ST_TO_ADDR
// normalCounter := 36 ;
65949: LD_ADDR_EXP 72
65953: PUSH
65954: LD_INT 36
65956: ST_TO_ADDR
// hardcoreCounter := 16 ;
65957: LD_ADDR_EXP 73
65961: PUSH
65962: LD_INT 16
65964: ST_TO_ADDR
// sRocket := false ;
65965: LD_ADDR_EXP 76
65969: PUSH
65970: LD_INT 0
65972: ST_TO_ADDR
// sSpeed := false ;
65973: LD_ADDR_EXP 75
65977: PUSH
65978: LD_INT 0
65980: ST_TO_ADDR
// sEngine := false ;
65981: LD_ADDR_EXP 77
65985: PUSH
65986: LD_INT 0
65988: ST_TO_ADDR
// sSpec := false ;
65989: LD_ADDR_EXP 74
65993: PUSH
65994: LD_INT 0
65996: ST_TO_ADDR
// sLevel := false ;
65997: LD_ADDR_EXP 78
66001: PUSH
66002: LD_INT 0
66004: ST_TO_ADDR
// sArmoury := false ;
66005: LD_ADDR_EXP 79
66009: PUSH
66010: LD_INT 0
66012: ST_TO_ADDR
// sRadar := false ;
66013: LD_ADDR_EXP 80
66017: PUSH
66018: LD_INT 0
66020: ST_TO_ADDR
// sBunker := false ;
66021: LD_ADDR_EXP 81
66025: PUSH
66026: LD_INT 0
66028: ST_TO_ADDR
// sHack := false ;
66029: LD_ADDR_EXP 82
66033: PUSH
66034: LD_INT 0
66036: ST_TO_ADDR
// sFire := false ;
66037: LD_ADDR_EXP 83
66041: PUSH
66042: LD_INT 0
66044: ST_TO_ADDR
// sRefresh := false ;
66045: LD_ADDR_EXP 84
66049: PUSH
66050: LD_INT 0
66052: ST_TO_ADDR
// sExp := false ;
66053: LD_ADDR_EXP 85
66057: PUSH
66058: LD_INT 0
66060: ST_TO_ADDR
// sDepot := false ;
66061: LD_ADDR_EXP 86
66065: PUSH
66066: LD_INT 0
66068: ST_TO_ADDR
// sFlag := false ;
66069: LD_ADDR_EXP 87
66073: PUSH
66074: LD_INT 0
66076: ST_TO_ADDR
// sKamikadze := false ;
66077: LD_ADDR_EXP 95
66081: PUSH
66082: LD_INT 0
66084: ST_TO_ADDR
// sTroll := false ;
66085: LD_ADDR_EXP 96
66089: PUSH
66090: LD_INT 0
66092: ST_TO_ADDR
// sSlow := false ;
66093: LD_ADDR_EXP 97
66097: PUSH
66098: LD_INT 0
66100: ST_TO_ADDR
// sLack := false ;
66101: LD_ADDR_EXP 98
66105: PUSH
66106: LD_INT 0
66108: ST_TO_ADDR
// sTank := false ;
66109: LD_ADDR_EXP 100
66113: PUSH
66114: LD_INT 0
66116: ST_TO_ADDR
// sRemote := false ;
66117: LD_ADDR_EXP 101
66121: PUSH
66122: LD_INT 0
66124: ST_TO_ADDR
// sPowell := false ;
66125: LD_ADDR_EXP 102
66129: PUSH
66130: LD_INT 0
66132: ST_TO_ADDR
// sTeleport := false ;
66133: LD_ADDR_EXP 105
66137: PUSH
66138: LD_INT 0
66140: ST_TO_ADDR
// sOilTower := false ;
66141: LD_ADDR_EXP 107
66145: PUSH
66146: LD_INT 0
66148: ST_TO_ADDR
// sShovel := false ;
66149: LD_ADDR_EXP 108
66153: PUSH
66154: LD_INT 0
66156: ST_TO_ADDR
// sSheik := false ;
66157: LD_ADDR_EXP 109
66161: PUSH
66162: LD_INT 0
66164: ST_TO_ADDR
// sEarthquake := false ;
66165: LD_ADDR_EXP 111
66169: PUSH
66170: LD_INT 0
66172: ST_TO_ADDR
// sAI := false ;
66173: LD_ADDR_EXP 112
66177: PUSH
66178: LD_INT 0
66180: ST_TO_ADDR
// sCargo := false ;
66181: LD_ADDR_EXP 115
66185: PUSH
66186: LD_INT 0
66188: ST_TO_ADDR
// sDLaser := false ;
66189: LD_ADDR_EXP 116
66193: PUSH
66194: LD_INT 0
66196: ST_TO_ADDR
// sExchange := false ;
66197: LD_ADDR_EXP 117
66201: PUSH
66202: LD_INT 0
66204: ST_TO_ADDR
// sFac := false ;
66205: LD_ADDR_EXP 118
66209: PUSH
66210: LD_INT 0
66212: ST_TO_ADDR
// sPower := false ;
66213: LD_ADDR_EXP 119
66217: PUSH
66218: LD_INT 0
66220: ST_TO_ADDR
// sRandom := false ;
66221: LD_ADDR_EXP 120
66225: PUSH
66226: LD_INT 0
66228: ST_TO_ADDR
// sShield := false ;
66229: LD_ADDR_EXP 121
66233: PUSH
66234: LD_INT 0
66236: ST_TO_ADDR
// sTime := false ;
66237: LD_ADDR_EXP 122
66241: PUSH
66242: LD_INT 0
66244: ST_TO_ADDR
// sTools := false ;
66245: LD_ADDR_EXP 123
66249: PUSH
66250: LD_INT 0
66252: ST_TO_ADDR
// sSold := false ;
66253: LD_ADDR_EXP 88
66257: PUSH
66258: LD_INT 0
66260: ST_TO_ADDR
// sDiff := false ;
66261: LD_ADDR_EXP 89
66265: PUSH
66266: LD_INT 0
66268: ST_TO_ADDR
// sFog := false ;
66269: LD_ADDR_EXP 92
66273: PUSH
66274: LD_INT 0
66276: ST_TO_ADDR
// sReset := false ;
66277: LD_ADDR_EXP 93
66281: PUSH
66282: LD_INT 0
66284: ST_TO_ADDR
// sSun := false ;
66285: LD_ADDR_EXP 94
66289: PUSH
66290: LD_INT 0
66292: ST_TO_ADDR
// sTiger := false ;
66293: LD_ADDR_EXP 90
66297: PUSH
66298: LD_INT 0
66300: ST_TO_ADDR
// sBomb := false ;
66301: LD_ADDR_EXP 91
66305: PUSH
66306: LD_INT 0
66308: ST_TO_ADDR
// sWound := false ;
66309: LD_ADDR_EXP 99
66313: PUSH
66314: LD_INT 0
66316: ST_TO_ADDR
// sBetray := false ;
66317: LD_ADDR_EXP 103
66321: PUSH
66322: LD_INT 0
66324: ST_TO_ADDR
// sContamin := false ;
66325: LD_ADDR_EXP 104
66329: PUSH
66330: LD_INT 0
66332: ST_TO_ADDR
// sOil := false ;
66333: LD_ADDR_EXP 106
66337: PUSH
66338: LD_INT 0
66340: ST_TO_ADDR
// sStu := false ;
66341: LD_ADDR_EXP 110
66345: PUSH
66346: LD_INT 0
66348: ST_TO_ADDR
// sBazooka := false ;
66349: LD_ADDR_EXP 113
66353: PUSH
66354: LD_INT 0
66356: ST_TO_ADDR
// sMortar := false ;
66357: LD_ADDR_EXP 114
66361: PUSH
66362: LD_INT 0
66364: ST_TO_ADDR
// sRanger := false ;
66365: LD_ADDR_EXP 124
66369: PUSH
66370: LD_INT 0
66372: ST_TO_ADDR
// end ;
66373: LD_VAR 0 1
66377: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
66378: LD_INT 0
66380: PPUSH
66381: PPUSH
66382: PPUSH
66383: PPUSH
66384: PPUSH
// result := [ ] ;
66385: LD_ADDR_VAR 0 1
66389: PUSH
66390: EMPTY
66391: ST_TO_ADDR
// if campaign_id = 1 then
66392: LD_OWVAR 69
66396: PUSH
66397: LD_INT 1
66399: EQUAL
66400: IFFALSE 69338
// begin case mission_number of 1 :
66402: LD_OWVAR 70
66406: PUSH
66407: LD_INT 1
66409: DOUBLE
66410: EQUAL
66411: IFTRUE 66415
66413: GO 66479
66415: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
66416: LD_ADDR_VAR 0 1
66420: PUSH
66421: LD_INT 2
66423: PUSH
66424: LD_INT 4
66426: PUSH
66427: LD_INT 11
66429: PUSH
66430: LD_INT 12
66432: PUSH
66433: LD_INT 15
66435: PUSH
66436: LD_INT 16
66438: PUSH
66439: LD_INT 22
66441: PUSH
66442: LD_INT 23
66444: PUSH
66445: LD_INT 26
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 101
66461: PUSH
66462: LD_INT 102
66464: PUSH
66465: LD_INT 106
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: LIST
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: ST_TO_ADDR
66477: GO 69336
66479: LD_INT 2
66481: DOUBLE
66482: EQUAL
66483: IFTRUE 66487
66485: GO 66559
66487: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
66488: LD_ADDR_VAR 0 1
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: LD_INT 11
66501: PUSH
66502: LD_INT 12
66504: PUSH
66505: LD_INT 15
66507: PUSH
66508: LD_INT 16
66510: PUSH
66511: LD_INT 22
66513: PUSH
66514: LD_INT 23
66516: PUSH
66517: LD_INT 26
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 101
66533: PUSH
66534: LD_INT 102
66536: PUSH
66537: LD_INT 105
66539: PUSH
66540: LD_INT 106
66542: PUSH
66543: LD_INT 108
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: ST_TO_ADDR
66557: GO 69336
66559: LD_INT 3
66561: DOUBLE
66562: EQUAL
66563: IFTRUE 66567
66565: GO 66643
66567: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
66568: LD_ADDR_VAR 0 1
66572: PUSH
66573: LD_INT 2
66575: PUSH
66576: LD_INT 4
66578: PUSH
66579: LD_INT 5
66581: PUSH
66582: LD_INT 11
66584: PUSH
66585: LD_INT 12
66587: PUSH
66588: LD_INT 15
66590: PUSH
66591: LD_INT 16
66593: PUSH
66594: LD_INT 22
66596: PUSH
66597: LD_INT 26
66599: PUSH
66600: LD_INT 36
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 101
66617: PUSH
66618: LD_INT 102
66620: PUSH
66621: LD_INT 105
66623: PUSH
66624: LD_INT 106
66626: PUSH
66627: LD_INT 108
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: ST_TO_ADDR
66641: GO 69336
66643: LD_INT 4
66645: DOUBLE
66646: EQUAL
66647: IFTRUE 66651
66649: GO 66735
66651: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
66652: LD_ADDR_VAR 0 1
66656: PUSH
66657: LD_INT 2
66659: PUSH
66660: LD_INT 4
66662: PUSH
66663: LD_INT 5
66665: PUSH
66666: LD_INT 8
66668: PUSH
66669: LD_INT 11
66671: PUSH
66672: LD_INT 12
66674: PUSH
66675: LD_INT 15
66677: PUSH
66678: LD_INT 16
66680: PUSH
66681: LD_INT 22
66683: PUSH
66684: LD_INT 23
66686: PUSH
66687: LD_INT 26
66689: PUSH
66690: LD_INT 36
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 101
66709: PUSH
66710: LD_INT 102
66712: PUSH
66713: LD_INT 105
66715: PUSH
66716: LD_INT 106
66718: PUSH
66719: LD_INT 108
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: ST_TO_ADDR
66733: GO 69336
66735: LD_INT 5
66737: DOUBLE
66738: EQUAL
66739: IFTRUE 66743
66741: GO 66843
66743: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
66744: LD_ADDR_VAR 0 1
66748: PUSH
66749: LD_INT 2
66751: PUSH
66752: LD_INT 4
66754: PUSH
66755: LD_INT 5
66757: PUSH
66758: LD_INT 6
66760: PUSH
66761: LD_INT 8
66763: PUSH
66764: LD_INT 11
66766: PUSH
66767: LD_INT 12
66769: PUSH
66770: LD_INT 15
66772: PUSH
66773: LD_INT 16
66775: PUSH
66776: LD_INT 22
66778: PUSH
66779: LD_INT 23
66781: PUSH
66782: LD_INT 25
66784: PUSH
66785: LD_INT 26
66787: PUSH
66788: LD_INT 36
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 101
66809: PUSH
66810: LD_INT 102
66812: PUSH
66813: LD_INT 105
66815: PUSH
66816: LD_INT 106
66818: PUSH
66819: LD_INT 108
66821: PUSH
66822: LD_INT 109
66824: PUSH
66825: LD_INT 112
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: ST_TO_ADDR
66841: GO 69336
66843: LD_INT 6
66845: DOUBLE
66846: EQUAL
66847: IFTRUE 66851
66849: GO 66971
66851: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
66852: LD_ADDR_VAR 0 1
66856: PUSH
66857: LD_INT 2
66859: PUSH
66860: LD_INT 4
66862: PUSH
66863: LD_INT 5
66865: PUSH
66866: LD_INT 6
66868: PUSH
66869: LD_INT 8
66871: PUSH
66872: LD_INT 11
66874: PUSH
66875: LD_INT 12
66877: PUSH
66878: LD_INT 15
66880: PUSH
66881: LD_INT 16
66883: PUSH
66884: LD_INT 20
66886: PUSH
66887: LD_INT 21
66889: PUSH
66890: LD_INT 22
66892: PUSH
66893: LD_INT 23
66895: PUSH
66896: LD_INT 25
66898: PUSH
66899: LD_INT 26
66901: PUSH
66902: LD_INT 30
66904: PUSH
66905: LD_INT 31
66907: PUSH
66908: LD_INT 32
66910: PUSH
66911: LD_INT 36
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 101
66937: PUSH
66938: LD_INT 102
66940: PUSH
66941: LD_INT 105
66943: PUSH
66944: LD_INT 106
66946: PUSH
66947: LD_INT 108
66949: PUSH
66950: LD_INT 109
66952: PUSH
66953: LD_INT 112
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: ST_TO_ADDR
66969: GO 69336
66971: LD_INT 7
66973: DOUBLE
66974: EQUAL
66975: IFTRUE 66979
66977: GO 67079
66979: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
66980: LD_ADDR_VAR 0 1
66984: PUSH
66985: LD_INT 2
66987: PUSH
66988: LD_INT 4
66990: PUSH
66991: LD_INT 5
66993: PUSH
66994: LD_INT 7
66996: PUSH
66997: LD_INT 11
66999: PUSH
67000: LD_INT 12
67002: PUSH
67003: LD_INT 15
67005: PUSH
67006: LD_INT 16
67008: PUSH
67009: LD_INT 20
67011: PUSH
67012: LD_INT 21
67014: PUSH
67015: LD_INT 22
67017: PUSH
67018: LD_INT 23
67020: PUSH
67021: LD_INT 25
67023: PUSH
67024: LD_INT 26
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 101
67045: PUSH
67046: LD_INT 102
67048: PUSH
67049: LD_INT 103
67051: PUSH
67052: LD_INT 105
67054: PUSH
67055: LD_INT 106
67057: PUSH
67058: LD_INT 108
67060: PUSH
67061: LD_INT 112
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: ST_TO_ADDR
67077: GO 69336
67079: LD_INT 8
67081: DOUBLE
67082: EQUAL
67083: IFTRUE 67087
67085: GO 67215
67087: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
67088: LD_ADDR_VAR 0 1
67092: PUSH
67093: LD_INT 2
67095: PUSH
67096: LD_INT 4
67098: PUSH
67099: LD_INT 5
67101: PUSH
67102: LD_INT 6
67104: PUSH
67105: LD_INT 7
67107: PUSH
67108: LD_INT 8
67110: PUSH
67111: LD_INT 11
67113: PUSH
67114: LD_INT 12
67116: PUSH
67117: LD_INT 15
67119: PUSH
67120: LD_INT 16
67122: PUSH
67123: LD_INT 20
67125: PUSH
67126: LD_INT 21
67128: PUSH
67129: LD_INT 22
67131: PUSH
67132: LD_INT 23
67134: PUSH
67135: LD_INT 25
67137: PUSH
67138: LD_INT 26
67140: PUSH
67141: LD_INT 30
67143: PUSH
67144: LD_INT 31
67146: PUSH
67147: LD_INT 32
67149: PUSH
67150: LD_INT 36
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 101
67177: PUSH
67178: LD_INT 102
67180: PUSH
67181: LD_INT 103
67183: PUSH
67184: LD_INT 105
67186: PUSH
67187: LD_INT 106
67189: PUSH
67190: LD_INT 108
67192: PUSH
67193: LD_INT 109
67195: PUSH
67196: LD_INT 112
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: ST_TO_ADDR
67213: GO 69336
67215: LD_INT 9
67217: DOUBLE
67218: EQUAL
67219: IFTRUE 67223
67221: GO 67359
67223: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
67224: LD_ADDR_VAR 0 1
67228: PUSH
67229: LD_INT 2
67231: PUSH
67232: LD_INT 4
67234: PUSH
67235: LD_INT 5
67237: PUSH
67238: LD_INT 6
67240: PUSH
67241: LD_INT 7
67243: PUSH
67244: LD_INT 8
67246: PUSH
67247: LD_INT 11
67249: PUSH
67250: LD_INT 12
67252: PUSH
67253: LD_INT 15
67255: PUSH
67256: LD_INT 16
67258: PUSH
67259: LD_INT 20
67261: PUSH
67262: LD_INT 21
67264: PUSH
67265: LD_INT 22
67267: PUSH
67268: LD_INT 23
67270: PUSH
67271: LD_INT 25
67273: PUSH
67274: LD_INT 26
67276: PUSH
67277: LD_INT 28
67279: PUSH
67280: LD_INT 30
67282: PUSH
67283: LD_INT 31
67285: PUSH
67286: LD_INT 32
67288: PUSH
67289: LD_INT 36
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 101
67317: PUSH
67318: LD_INT 102
67320: PUSH
67321: LD_INT 103
67323: PUSH
67324: LD_INT 105
67326: PUSH
67327: LD_INT 106
67329: PUSH
67330: LD_INT 108
67332: PUSH
67333: LD_INT 109
67335: PUSH
67336: LD_INT 112
67338: PUSH
67339: LD_INT 114
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: ST_TO_ADDR
67357: GO 69336
67359: LD_INT 10
67361: DOUBLE
67362: EQUAL
67363: IFTRUE 67367
67365: GO 67551
67367: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
67368: LD_ADDR_VAR 0 1
67372: PUSH
67373: LD_INT 2
67375: PUSH
67376: LD_INT 4
67378: PUSH
67379: LD_INT 5
67381: PUSH
67382: LD_INT 6
67384: PUSH
67385: LD_INT 7
67387: PUSH
67388: LD_INT 8
67390: PUSH
67391: LD_INT 9
67393: PUSH
67394: LD_INT 10
67396: PUSH
67397: LD_INT 11
67399: PUSH
67400: LD_INT 12
67402: PUSH
67403: LD_INT 13
67405: PUSH
67406: LD_INT 14
67408: PUSH
67409: LD_INT 15
67411: PUSH
67412: LD_INT 16
67414: PUSH
67415: LD_INT 17
67417: PUSH
67418: LD_INT 18
67420: PUSH
67421: LD_INT 19
67423: PUSH
67424: LD_INT 20
67426: PUSH
67427: LD_INT 21
67429: PUSH
67430: LD_INT 22
67432: PUSH
67433: LD_INT 23
67435: PUSH
67436: LD_INT 24
67438: PUSH
67439: LD_INT 25
67441: PUSH
67442: LD_INT 26
67444: PUSH
67445: LD_INT 28
67447: PUSH
67448: LD_INT 30
67450: PUSH
67451: LD_INT 31
67453: PUSH
67454: LD_INT 32
67456: PUSH
67457: LD_INT 36
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 101
67493: PUSH
67494: LD_INT 102
67496: PUSH
67497: LD_INT 103
67499: PUSH
67500: LD_INT 104
67502: PUSH
67503: LD_INT 105
67505: PUSH
67506: LD_INT 106
67508: PUSH
67509: LD_INT 107
67511: PUSH
67512: LD_INT 108
67514: PUSH
67515: LD_INT 109
67517: PUSH
67518: LD_INT 110
67520: PUSH
67521: LD_INT 111
67523: PUSH
67524: LD_INT 112
67526: PUSH
67527: LD_INT 114
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: ST_TO_ADDR
67549: GO 69336
67551: LD_INT 11
67553: DOUBLE
67554: EQUAL
67555: IFTRUE 67559
67557: GO 67751
67559: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
67560: LD_ADDR_VAR 0 1
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: LD_INT 4
67573: PUSH
67574: LD_INT 5
67576: PUSH
67577: LD_INT 6
67579: PUSH
67580: LD_INT 7
67582: PUSH
67583: LD_INT 8
67585: PUSH
67586: LD_INT 9
67588: PUSH
67589: LD_INT 10
67591: PUSH
67592: LD_INT 11
67594: PUSH
67595: LD_INT 12
67597: PUSH
67598: LD_INT 13
67600: PUSH
67601: LD_INT 14
67603: PUSH
67604: LD_INT 15
67606: PUSH
67607: LD_INT 16
67609: PUSH
67610: LD_INT 17
67612: PUSH
67613: LD_INT 18
67615: PUSH
67616: LD_INT 19
67618: PUSH
67619: LD_INT 20
67621: PUSH
67622: LD_INT 21
67624: PUSH
67625: LD_INT 22
67627: PUSH
67628: LD_INT 23
67630: PUSH
67631: LD_INT 24
67633: PUSH
67634: LD_INT 25
67636: PUSH
67637: LD_INT 26
67639: PUSH
67640: LD_INT 28
67642: PUSH
67643: LD_INT 30
67645: PUSH
67646: LD_INT 31
67648: PUSH
67649: LD_INT 32
67651: PUSH
67652: LD_INT 34
67654: PUSH
67655: LD_INT 36
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 101
67693: PUSH
67694: LD_INT 102
67696: PUSH
67697: LD_INT 103
67699: PUSH
67700: LD_INT 104
67702: PUSH
67703: LD_INT 105
67705: PUSH
67706: LD_INT 106
67708: PUSH
67709: LD_INT 107
67711: PUSH
67712: LD_INT 108
67714: PUSH
67715: LD_INT 109
67717: PUSH
67718: LD_INT 110
67720: PUSH
67721: LD_INT 111
67723: PUSH
67724: LD_INT 112
67726: PUSH
67727: LD_INT 114
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: ST_TO_ADDR
67749: GO 69336
67751: LD_INT 12
67753: DOUBLE
67754: EQUAL
67755: IFTRUE 67759
67757: GO 67967
67759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
67760: LD_ADDR_VAR 0 1
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: LD_INT 2
67770: PUSH
67771: LD_INT 3
67773: PUSH
67774: LD_INT 4
67776: PUSH
67777: LD_INT 5
67779: PUSH
67780: LD_INT 6
67782: PUSH
67783: LD_INT 7
67785: PUSH
67786: LD_INT 8
67788: PUSH
67789: LD_INT 9
67791: PUSH
67792: LD_INT 10
67794: PUSH
67795: LD_INT 11
67797: PUSH
67798: LD_INT 12
67800: PUSH
67801: LD_INT 13
67803: PUSH
67804: LD_INT 14
67806: PUSH
67807: LD_INT 15
67809: PUSH
67810: LD_INT 16
67812: PUSH
67813: LD_INT 17
67815: PUSH
67816: LD_INT 18
67818: PUSH
67819: LD_INT 19
67821: PUSH
67822: LD_INT 20
67824: PUSH
67825: LD_INT 21
67827: PUSH
67828: LD_INT 22
67830: PUSH
67831: LD_INT 23
67833: PUSH
67834: LD_INT 24
67836: PUSH
67837: LD_INT 25
67839: PUSH
67840: LD_INT 26
67842: PUSH
67843: LD_INT 27
67845: PUSH
67846: LD_INT 28
67848: PUSH
67849: LD_INT 30
67851: PUSH
67852: LD_INT 31
67854: PUSH
67855: LD_INT 32
67857: PUSH
67858: LD_INT 33
67860: PUSH
67861: LD_INT 34
67863: PUSH
67864: LD_INT 36
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 101
67905: PUSH
67906: LD_INT 102
67908: PUSH
67909: LD_INT 103
67911: PUSH
67912: LD_INT 104
67914: PUSH
67915: LD_INT 105
67917: PUSH
67918: LD_INT 106
67920: PUSH
67921: LD_INT 107
67923: PUSH
67924: LD_INT 108
67926: PUSH
67927: LD_INT 109
67929: PUSH
67930: LD_INT 110
67932: PUSH
67933: LD_INT 111
67935: PUSH
67936: LD_INT 112
67938: PUSH
67939: LD_INT 113
67941: PUSH
67942: LD_INT 114
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: ST_TO_ADDR
67965: GO 69336
67967: LD_INT 13
67969: DOUBLE
67970: EQUAL
67971: IFTRUE 67975
67973: GO 68171
67975: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
67976: LD_ADDR_VAR 0 1
67980: PUSH
67981: LD_INT 1
67983: PUSH
67984: LD_INT 2
67986: PUSH
67987: LD_INT 3
67989: PUSH
67990: LD_INT 4
67992: PUSH
67993: LD_INT 5
67995: PUSH
67996: LD_INT 8
67998: PUSH
67999: LD_INT 9
68001: PUSH
68002: LD_INT 10
68004: PUSH
68005: LD_INT 11
68007: PUSH
68008: LD_INT 12
68010: PUSH
68011: LD_INT 14
68013: PUSH
68014: LD_INT 15
68016: PUSH
68017: LD_INT 16
68019: PUSH
68020: LD_INT 17
68022: PUSH
68023: LD_INT 18
68025: PUSH
68026: LD_INT 19
68028: PUSH
68029: LD_INT 20
68031: PUSH
68032: LD_INT 21
68034: PUSH
68035: LD_INT 22
68037: PUSH
68038: LD_INT 23
68040: PUSH
68041: LD_INT 24
68043: PUSH
68044: LD_INT 25
68046: PUSH
68047: LD_INT 26
68049: PUSH
68050: LD_INT 27
68052: PUSH
68053: LD_INT 28
68055: PUSH
68056: LD_INT 30
68058: PUSH
68059: LD_INT 31
68061: PUSH
68062: LD_INT 32
68064: PUSH
68065: LD_INT 33
68067: PUSH
68068: LD_INT 34
68070: PUSH
68071: LD_INT 36
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 101
68109: PUSH
68110: LD_INT 102
68112: PUSH
68113: LD_INT 103
68115: PUSH
68116: LD_INT 104
68118: PUSH
68119: LD_INT 105
68121: PUSH
68122: LD_INT 106
68124: PUSH
68125: LD_INT 107
68127: PUSH
68128: LD_INT 108
68130: PUSH
68131: LD_INT 109
68133: PUSH
68134: LD_INT 110
68136: PUSH
68137: LD_INT 111
68139: PUSH
68140: LD_INT 112
68142: PUSH
68143: LD_INT 113
68145: PUSH
68146: LD_INT 114
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: ST_TO_ADDR
68169: GO 69336
68171: LD_INT 14
68173: DOUBLE
68174: EQUAL
68175: IFTRUE 68179
68177: GO 68391
68179: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
68180: LD_ADDR_VAR 0 1
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: LD_INT 2
68190: PUSH
68191: LD_INT 3
68193: PUSH
68194: LD_INT 4
68196: PUSH
68197: LD_INT 5
68199: PUSH
68200: LD_INT 6
68202: PUSH
68203: LD_INT 7
68205: PUSH
68206: LD_INT 8
68208: PUSH
68209: LD_INT 9
68211: PUSH
68212: LD_INT 10
68214: PUSH
68215: LD_INT 11
68217: PUSH
68218: LD_INT 12
68220: PUSH
68221: LD_INT 13
68223: PUSH
68224: LD_INT 14
68226: PUSH
68227: LD_INT 15
68229: PUSH
68230: LD_INT 16
68232: PUSH
68233: LD_INT 17
68235: PUSH
68236: LD_INT 18
68238: PUSH
68239: LD_INT 19
68241: PUSH
68242: LD_INT 20
68244: PUSH
68245: LD_INT 21
68247: PUSH
68248: LD_INT 22
68250: PUSH
68251: LD_INT 23
68253: PUSH
68254: LD_INT 24
68256: PUSH
68257: LD_INT 25
68259: PUSH
68260: LD_INT 26
68262: PUSH
68263: LD_INT 27
68265: PUSH
68266: LD_INT 28
68268: PUSH
68269: LD_INT 29
68271: PUSH
68272: LD_INT 30
68274: PUSH
68275: LD_INT 31
68277: PUSH
68278: LD_INT 32
68280: PUSH
68281: LD_INT 33
68283: PUSH
68284: LD_INT 34
68286: PUSH
68287: LD_INT 36
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 101
68329: PUSH
68330: LD_INT 102
68332: PUSH
68333: LD_INT 103
68335: PUSH
68336: LD_INT 104
68338: PUSH
68339: LD_INT 105
68341: PUSH
68342: LD_INT 106
68344: PUSH
68345: LD_INT 107
68347: PUSH
68348: LD_INT 108
68350: PUSH
68351: LD_INT 109
68353: PUSH
68354: LD_INT 110
68356: PUSH
68357: LD_INT 111
68359: PUSH
68360: LD_INT 112
68362: PUSH
68363: LD_INT 113
68365: PUSH
68366: LD_INT 114
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: ST_TO_ADDR
68389: GO 69336
68391: LD_INT 15
68393: DOUBLE
68394: EQUAL
68395: IFTRUE 68399
68397: GO 68611
68399: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
68400: LD_ADDR_VAR 0 1
68404: PUSH
68405: LD_INT 1
68407: PUSH
68408: LD_INT 2
68410: PUSH
68411: LD_INT 3
68413: PUSH
68414: LD_INT 4
68416: PUSH
68417: LD_INT 5
68419: PUSH
68420: LD_INT 6
68422: PUSH
68423: LD_INT 7
68425: PUSH
68426: LD_INT 8
68428: PUSH
68429: LD_INT 9
68431: PUSH
68432: LD_INT 10
68434: PUSH
68435: LD_INT 11
68437: PUSH
68438: LD_INT 12
68440: PUSH
68441: LD_INT 13
68443: PUSH
68444: LD_INT 14
68446: PUSH
68447: LD_INT 15
68449: PUSH
68450: LD_INT 16
68452: PUSH
68453: LD_INT 17
68455: PUSH
68456: LD_INT 18
68458: PUSH
68459: LD_INT 19
68461: PUSH
68462: LD_INT 20
68464: PUSH
68465: LD_INT 21
68467: PUSH
68468: LD_INT 22
68470: PUSH
68471: LD_INT 23
68473: PUSH
68474: LD_INT 24
68476: PUSH
68477: LD_INT 25
68479: PUSH
68480: LD_INT 26
68482: PUSH
68483: LD_INT 27
68485: PUSH
68486: LD_INT 28
68488: PUSH
68489: LD_INT 29
68491: PUSH
68492: LD_INT 30
68494: PUSH
68495: LD_INT 31
68497: PUSH
68498: LD_INT 32
68500: PUSH
68501: LD_INT 33
68503: PUSH
68504: LD_INT 34
68506: PUSH
68507: LD_INT 36
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 101
68549: PUSH
68550: LD_INT 102
68552: PUSH
68553: LD_INT 103
68555: PUSH
68556: LD_INT 104
68558: PUSH
68559: LD_INT 105
68561: PUSH
68562: LD_INT 106
68564: PUSH
68565: LD_INT 107
68567: PUSH
68568: LD_INT 108
68570: PUSH
68571: LD_INT 109
68573: PUSH
68574: LD_INT 110
68576: PUSH
68577: LD_INT 111
68579: PUSH
68580: LD_INT 112
68582: PUSH
68583: LD_INT 113
68585: PUSH
68586: LD_INT 114
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: ST_TO_ADDR
68609: GO 69336
68611: LD_INT 16
68613: DOUBLE
68614: EQUAL
68615: IFTRUE 68619
68617: GO 68743
68619: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
68620: LD_ADDR_VAR 0 1
68624: PUSH
68625: LD_INT 2
68627: PUSH
68628: LD_INT 4
68630: PUSH
68631: LD_INT 5
68633: PUSH
68634: LD_INT 7
68636: PUSH
68637: LD_INT 11
68639: PUSH
68640: LD_INT 12
68642: PUSH
68643: LD_INT 15
68645: PUSH
68646: LD_INT 16
68648: PUSH
68649: LD_INT 20
68651: PUSH
68652: LD_INT 21
68654: PUSH
68655: LD_INT 22
68657: PUSH
68658: LD_INT 23
68660: PUSH
68661: LD_INT 25
68663: PUSH
68664: LD_INT 26
68666: PUSH
68667: LD_INT 30
68669: PUSH
68670: LD_INT 31
68672: PUSH
68673: LD_INT 32
68675: PUSH
68676: LD_INT 33
68678: PUSH
68679: LD_INT 34
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 101
68705: PUSH
68706: LD_INT 102
68708: PUSH
68709: LD_INT 103
68711: PUSH
68712: LD_INT 106
68714: PUSH
68715: LD_INT 108
68717: PUSH
68718: LD_INT 112
68720: PUSH
68721: LD_INT 113
68723: PUSH
68724: LD_INT 114
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: ST_TO_ADDR
68741: GO 69336
68743: LD_INT 17
68745: DOUBLE
68746: EQUAL
68747: IFTRUE 68751
68749: GO 68963
68751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
68752: LD_ADDR_VAR 0 1
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: LD_INT 2
68762: PUSH
68763: LD_INT 3
68765: PUSH
68766: LD_INT 4
68768: PUSH
68769: LD_INT 5
68771: PUSH
68772: LD_INT 6
68774: PUSH
68775: LD_INT 7
68777: PUSH
68778: LD_INT 8
68780: PUSH
68781: LD_INT 9
68783: PUSH
68784: LD_INT 10
68786: PUSH
68787: LD_INT 11
68789: PUSH
68790: LD_INT 12
68792: PUSH
68793: LD_INT 13
68795: PUSH
68796: LD_INT 14
68798: PUSH
68799: LD_INT 15
68801: PUSH
68802: LD_INT 16
68804: PUSH
68805: LD_INT 17
68807: PUSH
68808: LD_INT 18
68810: PUSH
68811: LD_INT 19
68813: PUSH
68814: LD_INT 20
68816: PUSH
68817: LD_INT 21
68819: PUSH
68820: LD_INT 22
68822: PUSH
68823: LD_INT 23
68825: PUSH
68826: LD_INT 24
68828: PUSH
68829: LD_INT 25
68831: PUSH
68832: LD_INT 26
68834: PUSH
68835: LD_INT 27
68837: PUSH
68838: LD_INT 28
68840: PUSH
68841: LD_INT 29
68843: PUSH
68844: LD_INT 30
68846: PUSH
68847: LD_INT 31
68849: PUSH
68850: LD_INT 32
68852: PUSH
68853: LD_INT 33
68855: PUSH
68856: LD_INT 34
68858: PUSH
68859: LD_INT 36
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 101
68901: PUSH
68902: LD_INT 102
68904: PUSH
68905: LD_INT 103
68907: PUSH
68908: LD_INT 104
68910: PUSH
68911: LD_INT 105
68913: PUSH
68914: LD_INT 106
68916: PUSH
68917: LD_INT 107
68919: PUSH
68920: LD_INT 108
68922: PUSH
68923: LD_INT 109
68925: PUSH
68926: LD_INT 110
68928: PUSH
68929: LD_INT 111
68931: PUSH
68932: LD_INT 112
68934: PUSH
68935: LD_INT 113
68937: PUSH
68938: LD_INT 114
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: ST_TO_ADDR
68961: GO 69336
68963: LD_INT 18
68965: DOUBLE
68966: EQUAL
68967: IFTRUE 68971
68969: GO 69107
68971: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
68972: LD_ADDR_VAR 0 1
68976: PUSH
68977: LD_INT 2
68979: PUSH
68980: LD_INT 4
68982: PUSH
68983: LD_INT 5
68985: PUSH
68986: LD_INT 7
68988: PUSH
68989: LD_INT 11
68991: PUSH
68992: LD_INT 12
68994: PUSH
68995: LD_INT 15
68997: PUSH
68998: LD_INT 16
69000: PUSH
69001: LD_INT 20
69003: PUSH
69004: LD_INT 21
69006: PUSH
69007: LD_INT 22
69009: PUSH
69010: LD_INT 23
69012: PUSH
69013: LD_INT 25
69015: PUSH
69016: LD_INT 26
69018: PUSH
69019: LD_INT 30
69021: PUSH
69022: LD_INT 31
69024: PUSH
69025: LD_INT 32
69027: PUSH
69028: LD_INT 33
69030: PUSH
69031: LD_INT 34
69033: PUSH
69034: LD_INT 35
69036: PUSH
69037: LD_INT 36
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 101
69065: PUSH
69066: LD_INT 102
69068: PUSH
69069: LD_INT 103
69071: PUSH
69072: LD_INT 106
69074: PUSH
69075: LD_INT 108
69077: PUSH
69078: LD_INT 112
69080: PUSH
69081: LD_INT 113
69083: PUSH
69084: LD_INT 114
69086: PUSH
69087: LD_INT 115
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: ST_TO_ADDR
69105: GO 69336
69107: LD_INT 19
69109: DOUBLE
69110: EQUAL
69111: IFTRUE 69115
69113: GO 69335
69115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
69116: LD_ADDR_VAR 0 1
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: LD_INT 2
69126: PUSH
69127: LD_INT 3
69129: PUSH
69130: LD_INT 4
69132: PUSH
69133: LD_INT 5
69135: PUSH
69136: LD_INT 6
69138: PUSH
69139: LD_INT 7
69141: PUSH
69142: LD_INT 8
69144: PUSH
69145: LD_INT 9
69147: PUSH
69148: LD_INT 10
69150: PUSH
69151: LD_INT 11
69153: PUSH
69154: LD_INT 12
69156: PUSH
69157: LD_INT 13
69159: PUSH
69160: LD_INT 14
69162: PUSH
69163: LD_INT 15
69165: PUSH
69166: LD_INT 16
69168: PUSH
69169: LD_INT 17
69171: PUSH
69172: LD_INT 18
69174: PUSH
69175: LD_INT 19
69177: PUSH
69178: LD_INT 20
69180: PUSH
69181: LD_INT 21
69183: PUSH
69184: LD_INT 22
69186: PUSH
69187: LD_INT 23
69189: PUSH
69190: LD_INT 24
69192: PUSH
69193: LD_INT 25
69195: PUSH
69196: LD_INT 26
69198: PUSH
69199: LD_INT 27
69201: PUSH
69202: LD_INT 28
69204: PUSH
69205: LD_INT 29
69207: PUSH
69208: LD_INT 30
69210: PUSH
69211: LD_INT 31
69213: PUSH
69214: LD_INT 32
69216: PUSH
69217: LD_INT 33
69219: PUSH
69220: LD_INT 34
69222: PUSH
69223: LD_INT 35
69225: PUSH
69226: LD_INT 36
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 101
69269: PUSH
69270: LD_INT 102
69272: PUSH
69273: LD_INT 103
69275: PUSH
69276: LD_INT 104
69278: PUSH
69279: LD_INT 105
69281: PUSH
69282: LD_INT 106
69284: PUSH
69285: LD_INT 107
69287: PUSH
69288: LD_INT 108
69290: PUSH
69291: LD_INT 109
69293: PUSH
69294: LD_INT 110
69296: PUSH
69297: LD_INT 111
69299: PUSH
69300: LD_INT 112
69302: PUSH
69303: LD_INT 113
69305: PUSH
69306: LD_INT 114
69308: PUSH
69309: LD_INT 115
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: ST_TO_ADDR
69333: GO 69336
69335: POP
// end else
69336: GO 69555
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
69338: LD_ADDR_VAR 0 1
69342: PUSH
69343: LD_INT 1
69345: PUSH
69346: LD_INT 2
69348: PUSH
69349: LD_INT 3
69351: PUSH
69352: LD_INT 4
69354: PUSH
69355: LD_INT 5
69357: PUSH
69358: LD_INT 6
69360: PUSH
69361: LD_INT 7
69363: PUSH
69364: LD_INT 8
69366: PUSH
69367: LD_INT 9
69369: PUSH
69370: LD_INT 10
69372: PUSH
69373: LD_INT 11
69375: PUSH
69376: LD_INT 12
69378: PUSH
69379: LD_INT 13
69381: PUSH
69382: LD_INT 14
69384: PUSH
69385: LD_INT 15
69387: PUSH
69388: LD_INT 16
69390: PUSH
69391: LD_INT 17
69393: PUSH
69394: LD_INT 18
69396: PUSH
69397: LD_INT 19
69399: PUSH
69400: LD_INT 20
69402: PUSH
69403: LD_INT 21
69405: PUSH
69406: LD_INT 22
69408: PUSH
69409: LD_INT 23
69411: PUSH
69412: LD_INT 24
69414: PUSH
69415: LD_INT 25
69417: PUSH
69418: LD_INT 26
69420: PUSH
69421: LD_INT 27
69423: PUSH
69424: LD_INT 28
69426: PUSH
69427: LD_INT 29
69429: PUSH
69430: LD_INT 30
69432: PUSH
69433: LD_INT 31
69435: PUSH
69436: LD_INT 32
69438: PUSH
69439: LD_INT 33
69441: PUSH
69442: LD_INT 34
69444: PUSH
69445: LD_INT 35
69447: PUSH
69448: LD_INT 36
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 101
69491: PUSH
69492: LD_INT 102
69494: PUSH
69495: LD_INT 103
69497: PUSH
69498: LD_INT 104
69500: PUSH
69501: LD_INT 105
69503: PUSH
69504: LD_INT 106
69506: PUSH
69507: LD_INT 107
69509: PUSH
69510: LD_INT 108
69512: PUSH
69513: LD_INT 109
69515: PUSH
69516: LD_INT 110
69518: PUSH
69519: LD_INT 111
69521: PUSH
69522: LD_INT 112
69524: PUSH
69525: LD_INT 113
69527: PUSH
69528: LD_INT 114
69530: PUSH
69531: LD_INT 115
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: ST_TO_ADDR
// if result then
69555: LD_VAR 0 1
69559: IFFALSE 69848
// begin normal :=  ;
69561: LD_ADDR_VAR 0 3
69565: PUSH
69566: LD_STRING 
69568: ST_TO_ADDR
// hardcore :=  ;
69569: LD_ADDR_VAR 0 4
69573: PUSH
69574: LD_STRING 
69576: ST_TO_ADDR
// for i = 1 to normalCounter do
69577: LD_ADDR_VAR 0 5
69581: PUSH
69582: DOUBLE
69583: LD_INT 1
69585: DEC
69586: ST_TO_ADDR
69587: LD_EXP 72
69591: PUSH
69592: FOR_TO
69593: IFFALSE 69694
// begin tmp := 0 ;
69595: LD_ADDR_VAR 0 2
69599: PUSH
69600: LD_STRING 0
69602: ST_TO_ADDR
// if result [ 1 ] then
69603: LD_VAR 0 1
69607: PUSH
69608: LD_INT 1
69610: ARRAY
69611: IFFALSE 69676
// if result [ 1 ] [ 1 ] = i then
69613: LD_VAR 0 1
69617: PUSH
69618: LD_INT 1
69620: ARRAY
69621: PUSH
69622: LD_INT 1
69624: ARRAY
69625: PUSH
69626: LD_VAR 0 5
69630: EQUAL
69631: IFFALSE 69676
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69633: LD_ADDR_VAR 0 1
69637: PUSH
69638: LD_VAR 0 1
69642: PPUSH
69643: LD_INT 1
69645: PPUSH
69646: LD_VAR 0 1
69650: PUSH
69651: LD_INT 1
69653: ARRAY
69654: PPUSH
69655: LD_INT 1
69657: PPUSH
69658: CALL_OW 3
69662: PPUSH
69663: CALL_OW 1
69667: ST_TO_ADDR
// tmp := 1 ;
69668: LD_ADDR_VAR 0 2
69672: PUSH
69673: LD_STRING 1
69675: ST_TO_ADDR
// end ; normal := normal & tmp ;
69676: LD_ADDR_VAR 0 3
69680: PUSH
69681: LD_VAR 0 3
69685: PUSH
69686: LD_VAR 0 2
69690: STR
69691: ST_TO_ADDR
// end ;
69692: GO 69592
69694: POP
69695: POP
// for i = 1 to hardcoreCounter do
69696: LD_ADDR_VAR 0 5
69700: PUSH
69701: DOUBLE
69702: LD_INT 1
69704: DEC
69705: ST_TO_ADDR
69706: LD_EXP 73
69710: PUSH
69711: FOR_TO
69712: IFFALSE 69817
// begin tmp := 0 ;
69714: LD_ADDR_VAR 0 2
69718: PUSH
69719: LD_STRING 0
69721: ST_TO_ADDR
// if result [ 2 ] then
69722: LD_VAR 0 1
69726: PUSH
69727: LD_INT 2
69729: ARRAY
69730: IFFALSE 69799
// if result [ 2 ] [ 1 ] = 100 + i then
69732: LD_VAR 0 1
69736: PUSH
69737: LD_INT 2
69739: ARRAY
69740: PUSH
69741: LD_INT 1
69743: ARRAY
69744: PUSH
69745: LD_INT 100
69747: PUSH
69748: LD_VAR 0 5
69752: PLUS
69753: EQUAL
69754: IFFALSE 69799
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69756: LD_ADDR_VAR 0 1
69760: PUSH
69761: LD_VAR 0 1
69765: PPUSH
69766: LD_INT 2
69768: PPUSH
69769: LD_VAR 0 1
69773: PUSH
69774: LD_INT 2
69776: ARRAY
69777: PPUSH
69778: LD_INT 1
69780: PPUSH
69781: CALL_OW 3
69785: PPUSH
69786: CALL_OW 1
69790: ST_TO_ADDR
// tmp := 1 ;
69791: LD_ADDR_VAR 0 2
69795: PUSH
69796: LD_STRING 1
69798: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69799: LD_ADDR_VAR 0 4
69803: PUSH
69804: LD_VAR 0 4
69808: PUSH
69809: LD_VAR 0 2
69813: STR
69814: ST_TO_ADDR
// end ;
69815: GO 69711
69817: POP
69818: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
69819: LD_STRING getStreamItemsFromMission("
69821: PUSH
69822: LD_VAR 0 3
69826: STR
69827: PUSH
69828: LD_STRING ","
69830: STR
69831: PUSH
69832: LD_VAR 0 4
69836: STR
69837: PUSH
69838: LD_STRING ")
69840: STR
69841: PPUSH
69842: CALL_OW 559
// end else
69846: GO 69855
// ToLua ( getStreamItemsFromMission("","") ) ;
69848: LD_STRING getStreamItemsFromMission("","")
69850: PPUSH
69851: CALL_OW 559
// end ;
69855: LD_VAR 0 1
69859: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
69860: LD_EXP 71
69864: PUSH
69865: LD_EXP 76
69869: AND
69870: IFFALSE 69994
69872: GO 69874
69874: DISABLE
69875: LD_INT 0
69877: PPUSH
69878: PPUSH
// begin enable ;
69879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
69880: LD_ADDR_VAR 0 2
69884: PUSH
69885: LD_INT 22
69887: PUSH
69888: LD_OWVAR 2
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 2
69899: PUSH
69900: LD_INT 34
69902: PUSH
69903: LD_INT 7
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 34
69912: PUSH
69913: LD_INT 45
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 34
69922: PUSH
69923: LD_INT 28
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 34
69932: PUSH
69933: LD_INT 47
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PPUSH
69951: CALL_OW 69
69955: ST_TO_ADDR
// if not tmp then
69956: LD_VAR 0 2
69960: NOT
69961: IFFALSE 69965
// exit ;
69963: GO 69994
// for i in tmp do
69965: LD_ADDR_VAR 0 1
69969: PUSH
69970: LD_VAR 0 2
69974: PUSH
69975: FOR_IN
69976: IFFALSE 69992
// begin SetLives ( i , 0 ) ;
69978: LD_VAR 0 1
69982: PPUSH
69983: LD_INT 0
69985: PPUSH
69986: CALL_OW 234
// end ;
69990: GO 69975
69992: POP
69993: POP
// end ;
69994: PPOPN 2
69996: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
69997: LD_EXP 71
70001: PUSH
70002: LD_EXP 77
70006: AND
70007: IFFALSE 70091
70009: GO 70011
70011: DISABLE
70012: LD_INT 0
70014: PPUSH
70015: PPUSH
// begin enable ;
70016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
70017: LD_ADDR_VAR 0 2
70021: PUSH
70022: LD_INT 22
70024: PUSH
70025: LD_OWVAR 2
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 32
70036: PUSH
70037: LD_INT 3
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PPUSH
70048: CALL_OW 69
70052: ST_TO_ADDR
// if not tmp then
70053: LD_VAR 0 2
70057: NOT
70058: IFFALSE 70062
// exit ;
70060: GO 70091
// for i in tmp do
70062: LD_ADDR_VAR 0 1
70066: PUSH
70067: LD_VAR 0 2
70071: PUSH
70072: FOR_IN
70073: IFFALSE 70089
// begin SetLives ( i , 0 ) ;
70075: LD_VAR 0 1
70079: PPUSH
70080: LD_INT 0
70082: PPUSH
70083: CALL_OW 234
// end ;
70087: GO 70072
70089: POP
70090: POP
// end ;
70091: PPOPN 2
70093: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
70094: LD_EXP 71
70098: PUSH
70099: LD_EXP 74
70103: AND
70104: IFFALSE 70197
70106: GO 70108
70108: DISABLE
70109: LD_INT 0
70111: PPUSH
// begin enable ;
70112: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
70113: LD_ADDR_VAR 0 1
70117: PUSH
70118: LD_INT 22
70120: PUSH
70121: LD_OWVAR 2
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 2
70132: PUSH
70133: LD_INT 25
70135: PUSH
70136: LD_INT 5
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 25
70145: PUSH
70146: LD_INT 9
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 25
70155: PUSH
70156: LD_INT 8
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PPUSH
70173: CALL_OW 69
70177: PUSH
70178: FOR_IN
70179: IFFALSE 70195
// begin SetClass ( i , 1 ) ;
70181: LD_VAR 0 1
70185: PPUSH
70186: LD_INT 1
70188: PPUSH
70189: CALL_OW 336
// end ;
70193: GO 70178
70195: POP
70196: POP
// end ;
70197: PPOPN 1
70199: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70200: LD_EXP 71
70204: PUSH
70205: LD_EXP 75
70209: AND
70210: PUSH
70211: LD_OWVAR 65
70215: PUSH
70216: LD_INT 7
70218: LESS
70219: AND
70220: IFFALSE 70234
70222: GO 70224
70224: DISABLE
// begin enable ;
70225: ENABLE
// game_speed := 7 ;
70226: LD_ADDR_OWVAR 65
70230: PUSH
70231: LD_INT 7
70233: ST_TO_ADDR
// end ;
70234: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70235: LD_EXP 71
70239: PUSH
70240: LD_EXP 78
70244: AND
70245: IFFALSE 70447
70247: GO 70249
70249: DISABLE
70250: LD_INT 0
70252: PPUSH
70253: PPUSH
70254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70255: LD_ADDR_VAR 0 3
70259: PUSH
70260: LD_INT 81
70262: PUSH
70263: LD_OWVAR 2
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 21
70274: PUSH
70275: LD_INT 1
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PPUSH
70286: CALL_OW 69
70290: ST_TO_ADDR
// if not tmp then
70291: LD_VAR 0 3
70295: NOT
70296: IFFALSE 70300
// exit ;
70298: GO 70447
// if tmp > 5 then
70300: LD_VAR 0 3
70304: PUSH
70305: LD_INT 5
70307: GREATER
70308: IFFALSE 70320
// k := 5 else
70310: LD_ADDR_VAR 0 2
70314: PUSH
70315: LD_INT 5
70317: ST_TO_ADDR
70318: GO 70330
// k := tmp ;
70320: LD_ADDR_VAR 0 2
70324: PUSH
70325: LD_VAR 0 3
70329: ST_TO_ADDR
// for i := 1 to k do
70330: LD_ADDR_VAR 0 1
70334: PUSH
70335: DOUBLE
70336: LD_INT 1
70338: DEC
70339: ST_TO_ADDR
70340: LD_VAR 0 2
70344: PUSH
70345: FOR_TO
70346: IFFALSE 70445
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70348: LD_VAR 0 3
70352: PUSH
70353: LD_VAR 0 1
70357: ARRAY
70358: PPUSH
70359: LD_VAR 0 1
70363: PUSH
70364: LD_INT 4
70366: MOD
70367: PUSH
70368: LD_INT 1
70370: PLUS
70371: PPUSH
70372: CALL_OW 259
70376: PUSH
70377: LD_INT 10
70379: LESS
70380: IFFALSE 70443
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70382: LD_VAR 0 3
70386: PUSH
70387: LD_VAR 0 1
70391: ARRAY
70392: PPUSH
70393: LD_VAR 0 1
70397: PUSH
70398: LD_INT 4
70400: MOD
70401: PUSH
70402: LD_INT 1
70404: PLUS
70405: PPUSH
70406: LD_VAR 0 3
70410: PUSH
70411: LD_VAR 0 1
70415: ARRAY
70416: PPUSH
70417: LD_VAR 0 1
70421: PUSH
70422: LD_INT 4
70424: MOD
70425: PUSH
70426: LD_INT 1
70428: PLUS
70429: PPUSH
70430: CALL_OW 259
70434: PUSH
70435: LD_INT 1
70437: PLUS
70438: PPUSH
70439: CALL_OW 237
70443: GO 70345
70445: POP
70446: POP
// end ;
70447: PPOPN 3
70449: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70450: LD_EXP 71
70454: PUSH
70455: LD_EXP 79
70459: AND
70460: IFFALSE 70480
70462: GO 70464
70464: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70465: LD_INT 4
70467: PPUSH
70468: LD_OWVAR 2
70472: PPUSH
70473: LD_INT 0
70475: PPUSH
70476: CALL_OW 324
70480: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70481: LD_EXP 71
70485: PUSH
70486: LD_EXP 108
70490: AND
70491: IFFALSE 70511
70493: GO 70495
70495: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70496: LD_INT 19
70498: PPUSH
70499: LD_OWVAR 2
70503: PPUSH
70504: LD_INT 0
70506: PPUSH
70507: CALL_OW 324
70511: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70512: LD_EXP 71
70516: PUSH
70517: LD_EXP 80
70521: AND
70522: IFFALSE 70624
70524: GO 70526
70526: DISABLE
70527: LD_INT 0
70529: PPUSH
70530: PPUSH
// begin enable ;
70531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70532: LD_ADDR_VAR 0 2
70536: PUSH
70537: LD_INT 22
70539: PUSH
70540: LD_OWVAR 2
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 2
70551: PUSH
70552: LD_INT 34
70554: PUSH
70555: LD_INT 11
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 34
70564: PUSH
70565: LD_INT 30
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: LIST
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PPUSH
70581: CALL_OW 69
70585: ST_TO_ADDR
// if not tmp then
70586: LD_VAR 0 2
70590: NOT
70591: IFFALSE 70595
// exit ;
70593: GO 70624
// for i in tmp do
70595: LD_ADDR_VAR 0 1
70599: PUSH
70600: LD_VAR 0 2
70604: PUSH
70605: FOR_IN
70606: IFFALSE 70622
// begin SetLives ( i , 0 ) ;
70608: LD_VAR 0 1
70612: PPUSH
70613: LD_INT 0
70615: PPUSH
70616: CALL_OW 234
// end ;
70620: GO 70605
70622: POP
70623: POP
// end ;
70624: PPOPN 2
70626: END
// every 0 0$1 trigger StreamModeActive and sBunker do
70627: LD_EXP 71
70631: PUSH
70632: LD_EXP 81
70636: AND
70637: IFFALSE 70657
70639: GO 70641
70641: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
70642: LD_INT 32
70644: PPUSH
70645: LD_OWVAR 2
70649: PPUSH
70650: LD_INT 0
70652: PPUSH
70653: CALL_OW 324
70657: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
70658: LD_EXP 71
70662: PUSH
70663: LD_EXP 82
70667: AND
70668: IFFALSE 70849
70670: GO 70672
70672: DISABLE
70673: LD_INT 0
70675: PPUSH
70676: PPUSH
70677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
70678: LD_ADDR_VAR 0 2
70682: PUSH
70683: LD_INT 22
70685: PUSH
70686: LD_OWVAR 2
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 33
70697: PUSH
70698: LD_INT 3
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PPUSH
70709: CALL_OW 69
70713: ST_TO_ADDR
// if not tmp then
70714: LD_VAR 0 2
70718: NOT
70719: IFFALSE 70723
// exit ;
70721: GO 70849
// side := 0 ;
70723: LD_ADDR_VAR 0 3
70727: PUSH
70728: LD_INT 0
70730: ST_TO_ADDR
// for i := 1 to 8 do
70731: LD_ADDR_VAR 0 1
70735: PUSH
70736: DOUBLE
70737: LD_INT 1
70739: DEC
70740: ST_TO_ADDR
70741: LD_INT 8
70743: PUSH
70744: FOR_TO
70745: IFFALSE 70793
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
70747: LD_OWVAR 2
70751: PUSH
70752: LD_VAR 0 1
70756: NONEQUAL
70757: PUSH
70758: LD_OWVAR 2
70762: PPUSH
70763: LD_VAR 0 1
70767: PPUSH
70768: CALL_OW 81
70772: PUSH
70773: LD_INT 2
70775: EQUAL
70776: AND
70777: IFFALSE 70791
// begin side := i ;
70779: LD_ADDR_VAR 0 3
70783: PUSH
70784: LD_VAR 0 1
70788: ST_TO_ADDR
// break ;
70789: GO 70793
// end ;
70791: GO 70744
70793: POP
70794: POP
// if not side then
70795: LD_VAR 0 3
70799: NOT
70800: IFFALSE 70804
// exit ;
70802: GO 70849
// for i := 1 to tmp do
70804: LD_ADDR_VAR 0 1
70808: PUSH
70809: DOUBLE
70810: LD_INT 1
70812: DEC
70813: ST_TO_ADDR
70814: LD_VAR 0 2
70818: PUSH
70819: FOR_TO
70820: IFFALSE 70847
// if Prob ( 60 ) then
70822: LD_INT 60
70824: PPUSH
70825: CALL_OW 13
70829: IFFALSE 70845
// SetSide ( i , side ) ;
70831: LD_VAR 0 1
70835: PPUSH
70836: LD_VAR 0 3
70840: PPUSH
70841: CALL_OW 235
70845: GO 70819
70847: POP
70848: POP
// end ;
70849: PPOPN 3
70851: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
70852: LD_EXP 71
70856: PUSH
70857: LD_EXP 84
70861: AND
70862: IFFALSE 70981
70864: GO 70866
70866: DISABLE
70867: LD_INT 0
70869: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
70870: LD_ADDR_VAR 0 1
70874: PUSH
70875: LD_INT 22
70877: PUSH
70878: LD_OWVAR 2
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 21
70889: PUSH
70890: LD_INT 1
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 3
70899: PUSH
70900: LD_INT 23
70902: PUSH
70903: LD_INT 0
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: LIST
70918: PPUSH
70919: CALL_OW 69
70923: PUSH
70924: FOR_IN
70925: IFFALSE 70979
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
70927: LD_VAR 0 1
70931: PPUSH
70932: CALL_OW 257
70936: PUSH
70937: LD_INT 1
70939: PUSH
70940: LD_INT 2
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: LD_INT 4
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: IN
70955: IFFALSE 70977
// SetClass ( un , rand ( 1 , 4 ) ) ;
70957: LD_VAR 0 1
70961: PPUSH
70962: LD_INT 1
70964: PPUSH
70965: LD_INT 4
70967: PPUSH
70968: CALL_OW 12
70972: PPUSH
70973: CALL_OW 336
70977: GO 70924
70979: POP
70980: POP
// end ;
70981: PPOPN 1
70983: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
70984: LD_EXP 71
70988: PUSH
70989: LD_EXP 83
70993: AND
70994: IFFALSE 71073
70996: GO 70998
70998: DISABLE
70999: LD_INT 0
71001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71002: LD_ADDR_VAR 0 1
71006: PUSH
71007: LD_INT 22
71009: PUSH
71010: LD_OWVAR 2
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 21
71021: PUSH
71022: LD_INT 3
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PPUSH
71033: CALL_OW 69
71037: ST_TO_ADDR
// if not tmp then
71038: LD_VAR 0 1
71042: NOT
71043: IFFALSE 71047
// exit ;
71045: GO 71073
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
71047: LD_VAR 0 1
71051: PUSH
71052: LD_INT 1
71054: PPUSH
71055: LD_VAR 0 1
71059: PPUSH
71060: CALL_OW 12
71064: ARRAY
71065: PPUSH
71066: LD_INT 100
71068: PPUSH
71069: CALL_OW 234
// end ;
71073: PPOPN 1
71075: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
71076: LD_EXP 71
71080: PUSH
71081: LD_EXP 85
71085: AND
71086: IFFALSE 71184
71088: GO 71090
71090: DISABLE
71091: LD_INT 0
71093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71094: LD_ADDR_VAR 0 1
71098: PUSH
71099: LD_INT 22
71101: PUSH
71102: LD_OWVAR 2
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 21
71113: PUSH
71114: LD_INT 1
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PPUSH
71125: CALL_OW 69
71129: ST_TO_ADDR
// if not tmp then
71130: LD_VAR 0 1
71134: NOT
71135: IFFALSE 71139
// exit ;
71137: GO 71184
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
71139: LD_VAR 0 1
71143: PUSH
71144: LD_INT 1
71146: PPUSH
71147: LD_VAR 0 1
71151: PPUSH
71152: CALL_OW 12
71156: ARRAY
71157: PPUSH
71158: LD_INT 1
71160: PPUSH
71161: LD_INT 4
71163: PPUSH
71164: CALL_OW 12
71168: PPUSH
71169: LD_INT 3000
71171: PPUSH
71172: LD_INT 9000
71174: PPUSH
71175: CALL_OW 12
71179: PPUSH
71180: CALL_OW 492
// end ;
71184: PPOPN 1
71186: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71187: LD_EXP 71
71191: PUSH
71192: LD_EXP 86
71196: AND
71197: IFFALSE 71217
71199: GO 71201
71201: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71202: LD_INT 1
71204: PPUSH
71205: LD_OWVAR 2
71209: PPUSH
71210: LD_INT 0
71212: PPUSH
71213: CALL_OW 324
71217: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71218: LD_EXP 71
71222: PUSH
71223: LD_EXP 87
71227: AND
71228: IFFALSE 71311
71230: GO 71232
71232: DISABLE
71233: LD_INT 0
71235: PPUSH
71236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71237: LD_ADDR_VAR 0 2
71241: PUSH
71242: LD_INT 22
71244: PUSH
71245: LD_OWVAR 2
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 21
71256: PUSH
71257: LD_INT 3
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PPUSH
71268: CALL_OW 69
71272: ST_TO_ADDR
// if not tmp then
71273: LD_VAR 0 2
71277: NOT
71278: IFFALSE 71282
// exit ;
71280: GO 71311
// for i in tmp do
71282: LD_ADDR_VAR 0 1
71286: PUSH
71287: LD_VAR 0 2
71291: PUSH
71292: FOR_IN
71293: IFFALSE 71309
// SetBLevel ( i , 10 ) ;
71295: LD_VAR 0 1
71299: PPUSH
71300: LD_INT 10
71302: PPUSH
71303: CALL_OW 241
71307: GO 71292
71309: POP
71310: POP
// end ;
71311: PPOPN 2
71313: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71314: LD_EXP 71
71318: PUSH
71319: LD_EXP 88
71323: AND
71324: IFFALSE 71435
71326: GO 71328
71328: DISABLE
71329: LD_INT 0
71331: PPUSH
71332: PPUSH
71333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71334: LD_ADDR_VAR 0 3
71338: PUSH
71339: LD_INT 22
71341: PUSH
71342: LD_OWVAR 2
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 25
71353: PUSH
71354: LD_INT 1
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PPUSH
71365: CALL_OW 69
71369: ST_TO_ADDR
// if not tmp then
71370: LD_VAR 0 3
71374: NOT
71375: IFFALSE 71379
// exit ;
71377: GO 71435
// un := tmp [ rand ( 1 , tmp ) ] ;
71379: LD_ADDR_VAR 0 2
71383: PUSH
71384: LD_VAR 0 3
71388: PUSH
71389: LD_INT 1
71391: PPUSH
71392: LD_VAR 0 3
71396: PPUSH
71397: CALL_OW 12
71401: ARRAY
71402: ST_TO_ADDR
// if Crawls ( un ) then
71403: LD_VAR 0 2
71407: PPUSH
71408: CALL_OW 318
71412: IFFALSE 71423
// ComWalk ( un ) ;
71414: LD_VAR 0 2
71418: PPUSH
71419: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71423: LD_VAR 0 2
71427: PPUSH
71428: LD_INT 5
71430: PPUSH
71431: CALL_OW 336
// end ;
71435: PPOPN 3
71437: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
71438: LD_EXP 71
71442: PUSH
71443: LD_EXP 89
71447: AND
71448: PUSH
71449: LD_OWVAR 67
71453: PUSH
71454: LD_INT 3
71456: LESS
71457: AND
71458: IFFALSE 71477
71460: GO 71462
71462: DISABLE
// Difficulty := Difficulty + 1 ;
71463: LD_ADDR_OWVAR 67
71467: PUSH
71468: LD_OWVAR 67
71472: PUSH
71473: LD_INT 1
71475: PLUS
71476: ST_TO_ADDR
71477: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71478: LD_EXP 71
71482: PUSH
71483: LD_EXP 90
71487: AND
71488: IFFALSE 71591
71490: GO 71492
71492: DISABLE
71493: LD_INT 0
71495: PPUSH
// begin for i := 1 to 5 do
71496: LD_ADDR_VAR 0 1
71500: PUSH
71501: DOUBLE
71502: LD_INT 1
71504: DEC
71505: ST_TO_ADDR
71506: LD_INT 5
71508: PUSH
71509: FOR_TO
71510: IFFALSE 71589
// begin uc_nation := nation_nature ;
71512: LD_ADDR_OWVAR 21
71516: PUSH
71517: LD_INT 0
71519: ST_TO_ADDR
// uc_side := 0 ;
71520: LD_ADDR_OWVAR 20
71524: PUSH
71525: LD_INT 0
71527: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71528: LD_ADDR_OWVAR 29
71532: PUSH
71533: LD_INT 12
71535: PUSH
71536: LD_INT 12
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: ST_TO_ADDR
// hc_agressivity := 20 ;
71543: LD_ADDR_OWVAR 35
71547: PUSH
71548: LD_INT 20
71550: ST_TO_ADDR
// hc_class := class_tiger ;
71551: LD_ADDR_OWVAR 28
71555: PUSH
71556: LD_INT 14
71558: ST_TO_ADDR
// hc_gallery :=  ;
71559: LD_ADDR_OWVAR 33
71563: PUSH
71564: LD_STRING 
71566: ST_TO_ADDR
// hc_name :=  ;
71567: LD_ADDR_OWVAR 26
71571: PUSH
71572: LD_STRING 
71574: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71575: CALL_OW 44
71579: PPUSH
71580: LD_INT 0
71582: PPUSH
71583: CALL_OW 51
// end ;
71587: GO 71509
71589: POP
71590: POP
// end ;
71591: PPOPN 1
71593: END
// every 0 0$1 trigger StreamModeActive and sBomb do
71594: LD_EXP 71
71598: PUSH
71599: LD_EXP 91
71603: AND
71604: IFFALSE 71613
71606: GO 71608
71608: DISABLE
// StreamSibBomb ;
71609: CALL 71614 0 0
71613: END
// export function StreamSibBomb ; var i , x , y ; begin
71614: LD_INT 0
71616: PPUSH
71617: PPUSH
71618: PPUSH
71619: PPUSH
// result := false ;
71620: LD_ADDR_VAR 0 1
71624: PUSH
71625: LD_INT 0
71627: ST_TO_ADDR
// for i := 1 to 16 do
71628: LD_ADDR_VAR 0 2
71632: PUSH
71633: DOUBLE
71634: LD_INT 1
71636: DEC
71637: ST_TO_ADDR
71638: LD_INT 16
71640: PUSH
71641: FOR_TO
71642: IFFALSE 71841
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71644: LD_ADDR_VAR 0 3
71648: PUSH
71649: LD_INT 10
71651: PUSH
71652: LD_INT 20
71654: PUSH
71655: LD_INT 30
71657: PUSH
71658: LD_INT 40
71660: PUSH
71661: LD_INT 50
71663: PUSH
71664: LD_INT 60
71666: PUSH
71667: LD_INT 70
71669: PUSH
71670: LD_INT 80
71672: PUSH
71673: LD_INT 90
71675: PUSH
71676: LD_INT 100
71678: PUSH
71679: LD_INT 110
71681: PUSH
71682: LD_INT 120
71684: PUSH
71685: LD_INT 130
71687: PUSH
71688: LD_INT 140
71690: PUSH
71691: LD_INT 150
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 1
71713: PPUSH
71714: LD_INT 15
71716: PPUSH
71717: CALL_OW 12
71721: ARRAY
71722: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71723: LD_ADDR_VAR 0 4
71727: PUSH
71728: LD_INT 10
71730: PUSH
71731: LD_INT 20
71733: PUSH
71734: LD_INT 30
71736: PUSH
71737: LD_INT 40
71739: PUSH
71740: LD_INT 50
71742: PUSH
71743: LD_INT 60
71745: PUSH
71746: LD_INT 70
71748: PUSH
71749: LD_INT 80
71751: PUSH
71752: LD_INT 90
71754: PUSH
71755: LD_INT 100
71757: PUSH
71758: LD_INT 110
71760: PUSH
71761: LD_INT 120
71763: PUSH
71764: LD_INT 130
71766: PUSH
71767: LD_INT 140
71769: PUSH
71770: LD_INT 150
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 1
71792: PPUSH
71793: LD_INT 15
71795: PPUSH
71796: CALL_OW 12
71800: ARRAY
71801: ST_TO_ADDR
// if ValidHex ( x , y ) then
71802: LD_VAR 0 3
71806: PPUSH
71807: LD_VAR 0 4
71811: PPUSH
71812: CALL_OW 488
71816: IFFALSE 71839
// begin result := [ x , y ] ;
71818: LD_ADDR_VAR 0 1
71822: PUSH
71823: LD_VAR 0 3
71827: PUSH
71828: LD_VAR 0 4
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: ST_TO_ADDR
// break ;
71837: GO 71841
// end ; end ;
71839: GO 71641
71841: POP
71842: POP
// if result then
71843: LD_VAR 0 1
71847: IFFALSE 71907
// begin ToLua ( playSibBomb() ) ;
71849: LD_STRING playSibBomb()
71851: PPUSH
71852: CALL_OW 559
// wait ( 0 0$14 ) ;
71856: LD_INT 490
71858: PPUSH
71859: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
71863: LD_VAR 0 1
71867: PUSH
71868: LD_INT 1
71870: ARRAY
71871: PPUSH
71872: LD_VAR 0 1
71876: PUSH
71877: LD_INT 2
71879: ARRAY
71880: PPUSH
71881: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
71885: LD_VAR 0 1
71889: PUSH
71890: LD_INT 1
71892: ARRAY
71893: PPUSH
71894: LD_VAR 0 1
71898: PUSH
71899: LD_INT 2
71901: ARRAY
71902: PPUSH
71903: CALL_OW 429
// end ; end ;
71907: LD_VAR 0 1
71911: RET
// every 0 0$1 trigger StreamModeActive and sReset do
71912: LD_EXP 71
71916: PUSH
71917: LD_EXP 93
71921: AND
71922: IFFALSE 71934
71924: GO 71926
71926: DISABLE
// YouLost (  ) ;
71927: LD_STRING 
71929: PPUSH
71930: CALL_OW 104
71934: END
// every 0 0$1 trigger StreamModeActive and sFog do
71935: LD_EXP 71
71939: PUSH
71940: LD_EXP 92
71944: AND
71945: IFFALSE 71959
71947: GO 71949
71949: DISABLE
// FogOff ( your_side ) ;
71950: LD_OWVAR 2
71954: PPUSH
71955: CALL_OW 344
71959: END
// every 0 0$1 trigger StreamModeActive and sSun do
71960: LD_EXP 71
71964: PUSH
71965: LD_EXP 94
71969: AND
71970: IFFALSE 71998
71972: GO 71974
71974: DISABLE
// begin solar_recharge_percent := 0 ;
71975: LD_ADDR_OWVAR 79
71979: PUSH
71980: LD_INT 0
71982: ST_TO_ADDR
// wait ( 5 5$00 ) ;
71983: LD_INT 10500
71985: PPUSH
71986: CALL_OW 67
// solar_recharge_percent := 100 ;
71990: LD_ADDR_OWVAR 79
71994: PUSH
71995: LD_INT 100
71997: ST_TO_ADDR
// end ;
71998: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
71999: LD_EXP 71
72003: PUSH
72004: LD_EXP 95
72008: AND
72009: IFFALSE 72248
72011: GO 72013
72013: DISABLE
72014: LD_INT 0
72016: PPUSH
72017: PPUSH
72018: PPUSH
// begin tmp := [ ] ;
72019: LD_ADDR_VAR 0 3
72023: PUSH
72024: EMPTY
72025: ST_TO_ADDR
// for i := 1 to 6 do
72026: LD_ADDR_VAR 0 1
72030: PUSH
72031: DOUBLE
72032: LD_INT 1
72034: DEC
72035: ST_TO_ADDR
72036: LD_INT 6
72038: PUSH
72039: FOR_TO
72040: IFFALSE 72145
// begin uc_nation := nation_nature ;
72042: LD_ADDR_OWVAR 21
72046: PUSH
72047: LD_INT 0
72049: ST_TO_ADDR
// uc_side := 0 ;
72050: LD_ADDR_OWVAR 20
72054: PUSH
72055: LD_INT 0
72057: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72058: LD_ADDR_OWVAR 29
72062: PUSH
72063: LD_INT 12
72065: PUSH
72066: LD_INT 12
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: ST_TO_ADDR
// hc_agressivity := 20 ;
72073: LD_ADDR_OWVAR 35
72077: PUSH
72078: LD_INT 20
72080: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
72081: LD_ADDR_OWVAR 28
72085: PUSH
72086: LD_INT 17
72088: ST_TO_ADDR
// hc_gallery :=  ;
72089: LD_ADDR_OWVAR 33
72093: PUSH
72094: LD_STRING 
72096: ST_TO_ADDR
// hc_name :=  ;
72097: LD_ADDR_OWVAR 26
72101: PUSH
72102: LD_STRING 
72104: ST_TO_ADDR
// un := CreateHuman ;
72105: LD_ADDR_VAR 0 2
72109: PUSH
72110: CALL_OW 44
72114: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
72115: LD_VAR 0 2
72119: PPUSH
72120: LD_INT 1
72122: PPUSH
72123: CALL_OW 51
// tmp := tmp ^ un ;
72127: LD_ADDR_VAR 0 3
72131: PUSH
72132: LD_VAR 0 3
72136: PUSH
72137: LD_VAR 0 2
72141: ADD
72142: ST_TO_ADDR
// end ;
72143: GO 72039
72145: POP
72146: POP
// repeat wait ( 0 0$1 ) ;
72147: LD_INT 35
72149: PPUSH
72150: CALL_OW 67
// for un in tmp do
72154: LD_ADDR_VAR 0 2
72158: PUSH
72159: LD_VAR 0 3
72163: PUSH
72164: FOR_IN
72165: IFFALSE 72239
// begin if IsDead ( un ) then
72167: LD_VAR 0 2
72171: PPUSH
72172: CALL_OW 301
72176: IFFALSE 72196
// begin tmp := tmp diff un ;
72178: LD_ADDR_VAR 0 3
72182: PUSH
72183: LD_VAR 0 3
72187: PUSH
72188: LD_VAR 0 2
72192: DIFF
72193: ST_TO_ADDR
// continue ;
72194: GO 72164
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72196: LD_VAR 0 2
72200: PPUSH
72201: LD_INT 3
72203: PUSH
72204: LD_INT 22
72206: PUSH
72207: LD_INT 0
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PPUSH
72218: CALL_OW 69
72222: PPUSH
72223: LD_VAR 0 2
72227: PPUSH
72228: CALL_OW 74
72232: PPUSH
72233: CALL_OW 115
// end ;
72237: GO 72164
72239: POP
72240: POP
// until not tmp ;
72241: LD_VAR 0 3
72245: NOT
72246: IFFALSE 72147
// end ;
72248: PPOPN 3
72250: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72251: LD_EXP 71
72255: PUSH
72256: LD_EXP 96
72260: AND
72261: IFFALSE 72315
72263: GO 72265
72265: DISABLE
// begin ToLua ( displayTroll(); ) ;
72266: LD_STRING displayTroll();
72268: PPUSH
72269: CALL_OW 559
// wait ( 3 3$00 ) ;
72273: LD_INT 6300
72275: PPUSH
72276: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72280: LD_STRING hideTroll();
72282: PPUSH
72283: CALL_OW 559
// wait ( 1 1$00 ) ;
72287: LD_INT 2100
72289: PPUSH
72290: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72294: LD_STRING displayTroll();
72296: PPUSH
72297: CALL_OW 559
// wait ( 1 1$00 ) ;
72301: LD_INT 2100
72303: PPUSH
72304: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72308: LD_STRING hideTroll();
72310: PPUSH
72311: CALL_OW 559
// end ;
72315: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72316: LD_EXP 71
72320: PUSH
72321: LD_EXP 97
72325: AND
72326: IFFALSE 72389
72328: GO 72330
72330: DISABLE
72331: LD_INT 0
72333: PPUSH
// begin p := 0 ;
72334: LD_ADDR_VAR 0 1
72338: PUSH
72339: LD_INT 0
72341: ST_TO_ADDR
// repeat game_speed := 1 ;
72342: LD_ADDR_OWVAR 65
72346: PUSH
72347: LD_INT 1
72349: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72350: LD_INT 35
72352: PPUSH
72353: CALL_OW 67
// p := p + 1 ;
72357: LD_ADDR_VAR 0 1
72361: PUSH
72362: LD_VAR 0 1
72366: PUSH
72367: LD_INT 1
72369: PLUS
72370: ST_TO_ADDR
// until p >= 60 ;
72371: LD_VAR 0 1
72375: PUSH
72376: LD_INT 60
72378: GREATEREQUAL
72379: IFFALSE 72342
// game_speed := 4 ;
72381: LD_ADDR_OWVAR 65
72385: PUSH
72386: LD_INT 4
72388: ST_TO_ADDR
// end ;
72389: PPOPN 1
72391: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72392: LD_EXP 71
72396: PUSH
72397: LD_EXP 98
72401: AND
72402: IFFALSE 72548
72404: GO 72406
72406: DISABLE
72407: LD_INT 0
72409: PPUSH
72410: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72411: LD_ADDR_VAR 0 1
72415: PUSH
72416: LD_INT 22
72418: PUSH
72419: LD_OWVAR 2
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PUSH
72428: LD_INT 2
72430: PUSH
72431: LD_INT 30
72433: PUSH
72434: LD_INT 0
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 30
72443: PUSH
72444: LD_INT 1
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: LIST
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PPUSH
72460: CALL_OW 69
72464: ST_TO_ADDR
// if not depot then
72465: LD_VAR 0 1
72469: NOT
72470: IFFALSE 72474
// exit ;
72472: GO 72548
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72474: LD_ADDR_VAR 0 2
72478: PUSH
72479: LD_VAR 0 1
72483: PUSH
72484: LD_INT 1
72486: PPUSH
72487: LD_VAR 0 1
72491: PPUSH
72492: CALL_OW 12
72496: ARRAY
72497: PPUSH
72498: CALL_OW 274
72502: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72503: LD_VAR 0 2
72507: PPUSH
72508: LD_INT 1
72510: PPUSH
72511: LD_INT 0
72513: PPUSH
72514: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72518: LD_VAR 0 2
72522: PPUSH
72523: LD_INT 2
72525: PPUSH
72526: LD_INT 0
72528: PPUSH
72529: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72533: LD_VAR 0 2
72537: PPUSH
72538: LD_INT 3
72540: PPUSH
72541: LD_INT 0
72543: PPUSH
72544: CALL_OW 277
// end ;
72548: PPOPN 2
72550: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72551: LD_EXP 71
72555: PUSH
72556: LD_EXP 99
72560: AND
72561: IFFALSE 72658
72563: GO 72565
72565: DISABLE
72566: LD_INT 0
72568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72569: LD_ADDR_VAR 0 1
72573: PUSH
72574: LD_INT 22
72576: PUSH
72577: LD_OWVAR 2
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 21
72588: PUSH
72589: LD_INT 1
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: LD_INT 3
72598: PUSH
72599: LD_INT 23
72601: PUSH
72602: LD_INT 0
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: LIST
72617: PPUSH
72618: CALL_OW 69
72622: ST_TO_ADDR
// if not tmp then
72623: LD_VAR 0 1
72627: NOT
72628: IFFALSE 72632
// exit ;
72630: GO 72658
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
72632: LD_VAR 0 1
72636: PUSH
72637: LD_INT 1
72639: PPUSH
72640: LD_VAR 0 1
72644: PPUSH
72645: CALL_OW 12
72649: ARRAY
72650: PPUSH
72651: LD_INT 200
72653: PPUSH
72654: CALL_OW 234
// end ;
72658: PPOPN 1
72660: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
72661: LD_EXP 71
72665: PUSH
72666: LD_EXP 100
72670: AND
72671: IFFALSE 72750
72673: GO 72675
72675: DISABLE
72676: LD_INT 0
72678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
72679: LD_ADDR_VAR 0 1
72683: PUSH
72684: LD_INT 22
72686: PUSH
72687: LD_OWVAR 2
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 21
72698: PUSH
72699: LD_INT 2
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PPUSH
72710: CALL_OW 69
72714: ST_TO_ADDR
// if not tmp then
72715: LD_VAR 0 1
72719: NOT
72720: IFFALSE 72724
// exit ;
72722: GO 72750
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
72724: LD_VAR 0 1
72728: PUSH
72729: LD_INT 1
72731: PPUSH
72732: LD_VAR 0 1
72736: PPUSH
72737: CALL_OW 12
72741: ARRAY
72742: PPUSH
72743: LD_INT 60
72745: PPUSH
72746: CALL_OW 234
// end ;
72750: PPOPN 1
72752: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
72753: LD_EXP 71
72757: PUSH
72758: LD_EXP 101
72762: AND
72763: IFFALSE 72862
72765: GO 72767
72767: DISABLE
72768: LD_INT 0
72770: PPUSH
72771: PPUSH
// begin enable ;
72772: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
72773: LD_ADDR_VAR 0 1
72777: PUSH
72778: LD_INT 22
72780: PUSH
72781: LD_OWVAR 2
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 61
72792: PUSH
72793: EMPTY
72794: LIST
72795: PUSH
72796: LD_INT 33
72798: PUSH
72799: LD_INT 2
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: LIST
72810: PPUSH
72811: CALL_OW 69
72815: ST_TO_ADDR
// if not tmp then
72816: LD_VAR 0 1
72820: NOT
72821: IFFALSE 72825
// exit ;
72823: GO 72862
// for i in tmp do
72825: LD_ADDR_VAR 0 2
72829: PUSH
72830: LD_VAR 0 1
72834: PUSH
72835: FOR_IN
72836: IFFALSE 72860
// if IsControledBy ( i ) then
72838: LD_VAR 0 2
72842: PPUSH
72843: CALL_OW 312
72847: IFFALSE 72858
// ComUnlink ( i ) ;
72849: LD_VAR 0 2
72853: PPUSH
72854: CALL_OW 136
72858: GO 72835
72860: POP
72861: POP
// end ;
72862: PPOPN 2
72864: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
72865: LD_EXP 71
72869: PUSH
72870: LD_EXP 102
72874: AND
72875: IFFALSE 73015
72877: GO 72879
72879: DISABLE
72880: LD_INT 0
72882: PPUSH
72883: PPUSH
// begin ToLua ( displayPowell(); ) ;
72884: LD_STRING displayPowell();
72886: PPUSH
72887: CALL_OW 559
// uc_side := 0 ;
72891: LD_ADDR_OWVAR 20
72895: PUSH
72896: LD_INT 0
72898: ST_TO_ADDR
// uc_nation := 2 ;
72899: LD_ADDR_OWVAR 21
72903: PUSH
72904: LD_INT 2
72906: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
72907: LD_ADDR_OWVAR 37
72911: PUSH
72912: LD_INT 14
72914: ST_TO_ADDR
// vc_engine := engine_siberite ;
72915: LD_ADDR_OWVAR 39
72919: PUSH
72920: LD_INT 3
72922: ST_TO_ADDR
// vc_control := control_apeman ;
72923: LD_ADDR_OWVAR 38
72927: PUSH
72928: LD_INT 5
72930: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
72931: LD_ADDR_OWVAR 40
72935: PUSH
72936: LD_INT 29
72938: ST_TO_ADDR
// un := CreateVehicle ;
72939: LD_ADDR_VAR 0 2
72943: PUSH
72944: CALL_OW 45
72948: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72949: LD_VAR 0 2
72953: PPUSH
72954: LD_INT 1
72956: PPUSH
72957: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72961: LD_INT 35
72963: PPUSH
72964: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72968: LD_VAR 0 2
72972: PPUSH
72973: LD_INT 22
72975: PUSH
72976: LD_OWVAR 2
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PPUSH
72985: CALL_OW 69
72989: PPUSH
72990: LD_VAR 0 2
72994: PPUSH
72995: CALL_OW 74
72999: PPUSH
73000: CALL_OW 115
// until IsDead ( un ) ;
73004: LD_VAR 0 2
73008: PPUSH
73009: CALL_OW 301
73013: IFFALSE 72961
// end ;
73015: PPOPN 2
73017: END
// every 0 0$1 trigger StreamModeActive and sStu do
73018: LD_EXP 71
73022: PUSH
73023: LD_EXP 110
73027: AND
73028: IFFALSE 73044
73030: GO 73032
73032: DISABLE
// begin ToLua ( displayStucuk(); ) ;
73033: LD_STRING displayStucuk();
73035: PPUSH
73036: CALL_OW 559
// ResetFog ;
73040: CALL_OW 335
// end ;
73044: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
73045: LD_EXP 71
73049: PUSH
73050: LD_EXP 103
73054: AND
73055: IFFALSE 73196
73057: GO 73059
73059: DISABLE
73060: LD_INT 0
73062: PPUSH
73063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73064: LD_ADDR_VAR 0 2
73068: PUSH
73069: LD_INT 22
73071: PUSH
73072: LD_OWVAR 2
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 21
73083: PUSH
73084: LD_INT 1
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PPUSH
73095: CALL_OW 69
73099: ST_TO_ADDR
// if not tmp then
73100: LD_VAR 0 2
73104: NOT
73105: IFFALSE 73109
// exit ;
73107: GO 73196
// un := tmp [ rand ( 1 , tmp ) ] ;
73109: LD_ADDR_VAR 0 1
73113: PUSH
73114: LD_VAR 0 2
73118: PUSH
73119: LD_INT 1
73121: PPUSH
73122: LD_VAR 0 2
73126: PPUSH
73127: CALL_OW 12
73131: ARRAY
73132: ST_TO_ADDR
// SetSide ( un , 0 ) ;
73133: LD_VAR 0 1
73137: PPUSH
73138: LD_INT 0
73140: PPUSH
73141: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
73145: LD_VAR 0 1
73149: PPUSH
73150: LD_OWVAR 3
73154: PUSH
73155: LD_VAR 0 1
73159: DIFF
73160: PPUSH
73161: LD_VAR 0 1
73165: PPUSH
73166: CALL_OW 74
73170: PPUSH
73171: CALL_OW 115
// wait ( 0 0$20 ) ;
73175: LD_INT 700
73177: PPUSH
73178: CALL_OW 67
// SetSide ( un , your_side ) ;
73182: LD_VAR 0 1
73186: PPUSH
73187: LD_OWVAR 2
73191: PPUSH
73192: CALL_OW 235
// end ;
73196: PPOPN 2
73198: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73199: LD_EXP 71
73203: PUSH
73204: LD_EXP 104
73208: AND
73209: IFFALSE 73315
73211: GO 73213
73213: DISABLE
73214: LD_INT 0
73216: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73217: LD_ADDR_VAR 0 1
73221: PUSH
73222: LD_INT 22
73224: PUSH
73225: LD_OWVAR 2
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 2
73236: PUSH
73237: LD_INT 30
73239: PUSH
73240: LD_INT 0
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 30
73249: PUSH
73250: LD_INT 1
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: LIST
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: PPUSH
73266: CALL_OW 69
73270: ST_TO_ADDR
// if not depot then
73271: LD_VAR 0 1
73275: NOT
73276: IFFALSE 73280
// exit ;
73278: GO 73315
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73280: LD_VAR 0 1
73284: PUSH
73285: LD_INT 1
73287: ARRAY
73288: PPUSH
73289: CALL_OW 250
73293: PPUSH
73294: LD_VAR 0 1
73298: PUSH
73299: LD_INT 1
73301: ARRAY
73302: PPUSH
73303: CALL_OW 251
73307: PPUSH
73308: LD_INT 70
73310: PPUSH
73311: CALL_OW 495
// end ;
73315: PPOPN 1
73317: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73318: LD_EXP 71
73322: PUSH
73323: LD_EXP 105
73327: AND
73328: IFFALSE 73539
73330: GO 73332
73332: DISABLE
73333: LD_INT 0
73335: PPUSH
73336: PPUSH
73337: PPUSH
73338: PPUSH
73339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73340: LD_ADDR_VAR 0 5
73344: PUSH
73345: LD_INT 22
73347: PUSH
73348: LD_OWVAR 2
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: PUSH
73357: LD_INT 21
73359: PUSH
73360: LD_INT 1
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PPUSH
73371: CALL_OW 69
73375: ST_TO_ADDR
// if not tmp then
73376: LD_VAR 0 5
73380: NOT
73381: IFFALSE 73385
// exit ;
73383: GO 73539
// for i in tmp do
73385: LD_ADDR_VAR 0 1
73389: PUSH
73390: LD_VAR 0 5
73394: PUSH
73395: FOR_IN
73396: IFFALSE 73537
// begin d := rand ( 0 , 5 ) ;
73398: LD_ADDR_VAR 0 4
73402: PUSH
73403: LD_INT 0
73405: PPUSH
73406: LD_INT 5
73408: PPUSH
73409: CALL_OW 12
73413: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73414: LD_ADDR_VAR 0 2
73418: PUSH
73419: LD_VAR 0 1
73423: PPUSH
73424: CALL_OW 250
73428: PPUSH
73429: LD_VAR 0 4
73433: PPUSH
73434: LD_INT 3
73436: PPUSH
73437: LD_INT 12
73439: PPUSH
73440: CALL_OW 12
73444: PPUSH
73445: CALL_OW 272
73449: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73450: LD_ADDR_VAR 0 3
73454: PUSH
73455: LD_VAR 0 1
73459: PPUSH
73460: CALL_OW 251
73464: PPUSH
73465: LD_VAR 0 4
73469: PPUSH
73470: LD_INT 3
73472: PPUSH
73473: LD_INT 12
73475: PPUSH
73476: CALL_OW 12
73480: PPUSH
73481: CALL_OW 273
73485: ST_TO_ADDR
// if ValidHex ( x , y ) then
73486: LD_VAR 0 2
73490: PPUSH
73491: LD_VAR 0 3
73495: PPUSH
73496: CALL_OW 488
73500: IFFALSE 73535
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73502: LD_VAR 0 1
73506: PPUSH
73507: LD_VAR 0 2
73511: PPUSH
73512: LD_VAR 0 3
73516: PPUSH
73517: LD_INT 3
73519: PPUSH
73520: LD_INT 6
73522: PPUSH
73523: CALL_OW 12
73527: PPUSH
73528: LD_INT 1
73530: PPUSH
73531: CALL_OW 483
// end ;
73535: GO 73395
73537: POP
73538: POP
// end ;
73539: PPOPN 5
73541: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73542: LD_EXP 71
73546: PUSH
73547: LD_EXP 106
73551: AND
73552: IFFALSE 73646
73554: GO 73556
73556: DISABLE
73557: LD_INT 0
73559: PPUSH
73560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73561: LD_ADDR_VAR 0 2
73565: PUSH
73566: LD_INT 22
73568: PUSH
73569: LD_OWVAR 2
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 32
73580: PUSH
73581: LD_INT 1
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 21
73590: PUSH
73591: LD_INT 2
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: LIST
73602: PPUSH
73603: CALL_OW 69
73607: ST_TO_ADDR
// if not tmp then
73608: LD_VAR 0 2
73612: NOT
73613: IFFALSE 73617
// exit ;
73615: GO 73646
// for i in tmp do
73617: LD_ADDR_VAR 0 1
73621: PUSH
73622: LD_VAR 0 2
73626: PUSH
73627: FOR_IN
73628: IFFALSE 73644
// SetFuel ( i , 0 ) ;
73630: LD_VAR 0 1
73634: PPUSH
73635: LD_INT 0
73637: PPUSH
73638: CALL_OW 240
73642: GO 73627
73644: POP
73645: POP
// end ;
73646: PPOPN 2
73648: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
73649: LD_EXP 71
73653: PUSH
73654: LD_EXP 107
73658: AND
73659: IFFALSE 73725
73661: GO 73663
73663: DISABLE
73664: LD_INT 0
73666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73667: LD_ADDR_VAR 0 1
73671: PUSH
73672: LD_INT 22
73674: PUSH
73675: LD_OWVAR 2
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: LD_INT 30
73686: PUSH
73687: LD_INT 29
73689: PUSH
73690: EMPTY
73691: LIST
73692: LIST
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PPUSH
73698: CALL_OW 69
73702: ST_TO_ADDR
// if not tmp then
73703: LD_VAR 0 1
73707: NOT
73708: IFFALSE 73712
// exit ;
73710: GO 73725
// DestroyUnit ( tmp [ 1 ] ) ;
73712: LD_VAR 0 1
73716: PUSH
73717: LD_INT 1
73719: ARRAY
73720: PPUSH
73721: CALL_OW 65
// end ;
73725: PPOPN 1
73727: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
73728: LD_EXP 71
73732: PUSH
73733: LD_EXP 109
73737: AND
73738: IFFALSE 73867
73740: GO 73742
73742: DISABLE
73743: LD_INT 0
73745: PPUSH
// begin uc_side := 0 ;
73746: LD_ADDR_OWVAR 20
73750: PUSH
73751: LD_INT 0
73753: ST_TO_ADDR
// uc_nation := nation_arabian ;
73754: LD_ADDR_OWVAR 21
73758: PUSH
73759: LD_INT 2
73761: ST_TO_ADDR
// hc_gallery :=  ;
73762: LD_ADDR_OWVAR 33
73766: PUSH
73767: LD_STRING 
73769: ST_TO_ADDR
// hc_name :=  ;
73770: LD_ADDR_OWVAR 26
73774: PUSH
73775: LD_STRING 
73777: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
73778: LD_INT 1
73780: PPUSH
73781: LD_INT 11
73783: PPUSH
73784: LD_INT 10
73786: PPUSH
73787: CALL_OW 380
// un := CreateHuman ;
73791: LD_ADDR_VAR 0 1
73795: PUSH
73796: CALL_OW 44
73800: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73801: LD_VAR 0 1
73805: PPUSH
73806: LD_INT 1
73808: PPUSH
73809: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73813: LD_INT 35
73815: PPUSH
73816: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73820: LD_VAR 0 1
73824: PPUSH
73825: LD_INT 22
73827: PUSH
73828: LD_OWVAR 2
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PPUSH
73837: CALL_OW 69
73841: PPUSH
73842: LD_VAR 0 1
73846: PPUSH
73847: CALL_OW 74
73851: PPUSH
73852: CALL_OW 115
// until IsDead ( un ) ;
73856: LD_VAR 0 1
73860: PPUSH
73861: CALL_OW 301
73865: IFFALSE 73813
// end ;
73867: PPOPN 1
73869: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
73870: LD_EXP 71
73874: PUSH
73875: LD_EXP 111
73879: AND
73880: IFFALSE 73892
73882: GO 73884
73884: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
73885: LD_STRING earthquake(getX(game), 0, 32)
73887: PPUSH
73888: CALL_OW 559
73892: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
73893: LD_EXP 71
73897: PUSH
73898: LD_EXP 112
73902: AND
73903: IFFALSE 73994
73905: GO 73907
73907: DISABLE
73908: LD_INT 0
73910: PPUSH
// begin enable ;
73911: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
73912: LD_ADDR_VAR 0 1
73916: PUSH
73917: LD_INT 22
73919: PUSH
73920: LD_OWVAR 2
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: PUSH
73929: LD_INT 21
73931: PUSH
73932: LD_INT 2
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_INT 33
73941: PUSH
73942: LD_INT 3
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: LIST
73953: PPUSH
73954: CALL_OW 69
73958: ST_TO_ADDR
// if not tmp then
73959: LD_VAR 0 1
73963: NOT
73964: IFFALSE 73968
// exit ;
73966: GO 73994
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73968: LD_VAR 0 1
73972: PUSH
73973: LD_INT 1
73975: PPUSH
73976: LD_VAR 0 1
73980: PPUSH
73981: CALL_OW 12
73985: ARRAY
73986: PPUSH
73987: LD_INT 1
73989: PPUSH
73990: CALL_OW 234
// end ;
73994: PPOPN 1
73996: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
73997: LD_EXP 71
74001: PUSH
74002: LD_EXP 113
74006: AND
74007: IFFALSE 74148
74009: GO 74011
74011: DISABLE
74012: LD_INT 0
74014: PPUSH
74015: PPUSH
74016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74017: LD_ADDR_VAR 0 3
74021: PUSH
74022: LD_INT 22
74024: PUSH
74025: LD_OWVAR 2
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PUSH
74034: LD_INT 25
74036: PUSH
74037: LD_INT 1
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PPUSH
74048: CALL_OW 69
74052: ST_TO_ADDR
// if not tmp then
74053: LD_VAR 0 3
74057: NOT
74058: IFFALSE 74062
// exit ;
74060: GO 74148
// un := tmp [ rand ( 1 , tmp ) ] ;
74062: LD_ADDR_VAR 0 2
74066: PUSH
74067: LD_VAR 0 3
74071: PUSH
74072: LD_INT 1
74074: PPUSH
74075: LD_VAR 0 3
74079: PPUSH
74080: CALL_OW 12
74084: ARRAY
74085: ST_TO_ADDR
// if Crawls ( un ) then
74086: LD_VAR 0 2
74090: PPUSH
74091: CALL_OW 318
74095: IFFALSE 74106
// ComWalk ( un ) ;
74097: LD_VAR 0 2
74101: PPUSH
74102: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
74106: LD_VAR 0 2
74110: PPUSH
74111: LD_INT 9
74113: PPUSH
74114: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
74118: LD_INT 28
74120: PPUSH
74121: LD_OWVAR 2
74125: PPUSH
74126: LD_INT 2
74128: PPUSH
74129: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
74133: LD_INT 29
74135: PPUSH
74136: LD_OWVAR 2
74140: PPUSH
74141: LD_INT 2
74143: PPUSH
74144: CALL_OW 322
// end ;
74148: PPOPN 3
74150: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
74151: LD_EXP 71
74155: PUSH
74156: LD_EXP 114
74160: AND
74161: IFFALSE 74272
74163: GO 74165
74165: DISABLE
74166: LD_INT 0
74168: PPUSH
74169: PPUSH
74170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74171: LD_ADDR_VAR 0 3
74175: PUSH
74176: LD_INT 22
74178: PUSH
74179: LD_OWVAR 2
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: LD_INT 25
74190: PUSH
74191: LD_INT 1
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PPUSH
74202: CALL_OW 69
74206: ST_TO_ADDR
// if not tmp then
74207: LD_VAR 0 3
74211: NOT
74212: IFFALSE 74216
// exit ;
74214: GO 74272
// un := tmp [ rand ( 1 , tmp ) ] ;
74216: LD_ADDR_VAR 0 2
74220: PUSH
74221: LD_VAR 0 3
74225: PUSH
74226: LD_INT 1
74228: PPUSH
74229: LD_VAR 0 3
74233: PPUSH
74234: CALL_OW 12
74238: ARRAY
74239: ST_TO_ADDR
// if Crawls ( un ) then
74240: LD_VAR 0 2
74244: PPUSH
74245: CALL_OW 318
74249: IFFALSE 74260
// ComWalk ( un ) ;
74251: LD_VAR 0 2
74255: PPUSH
74256: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74260: LD_VAR 0 2
74264: PPUSH
74265: LD_INT 8
74267: PPUSH
74268: CALL_OW 336
// end ;
74272: PPOPN 3
74274: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74275: LD_EXP 71
74279: PUSH
74280: LD_EXP 115
74284: AND
74285: IFFALSE 74429
74287: GO 74289
74289: DISABLE
74290: LD_INT 0
74292: PPUSH
74293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74294: LD_ADDR_VAR 0 2
74298: PUSH
74299: LD_INT 22
74301: PUSH
74302: LD_OWVAR 2
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PUSH
74311: LD_INT 21
74313: PUSH
74314: LD_INT 2
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: PUSH
74321: LD_INT 2
74323: PUSH
74324: LD_INT 34
74326: PUSH
74327: LD_INT 12
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: PUSH
74334: LD_INT 34
74336: PUSH
74337: LD_INT 51
74339: PUSH
74340: EMPTY
74341: LIST
74342: LIST
74343: PUSH
74344: LD_INT 34
74346: PUSH
74347: LD_INT 32
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: LIST
74364: PPUSH
74365: CALL_OW 69
74369: ST_TO_ADDR
// if not tmp then
74370: LD_VAR 0 2
74374: NOT
74375: IFFALSE 74379
// exit ;
74377: GO 74429
// for i in tmp do
74379: LD_ADDR_VAR 0 1
74383: PUSH
74384: LD_VAR 0 2
74388: PUSH
74389: FOR_IN
74390: IFFALSE 74427
// if GetCargo ( i , mat_artifact ) = 0 then
74392: LD_VAR 0 1
74396: PPUSH
74397: LD_INT 4
74399: PPUSH
74400: CALL_OW 289
74404: PUSH
74405: LD_INT 0
74407: EQUAL
74408: IFFALSE 74425
// SetCargo ( i , mat_siberit , 100 ) ;
74410: LD_VAR 0 1
74414: PPUSH
74415: LD_INT 3
74417: PPUSH
74418: LD_INT 100
74420: PPUSH
74421: CALL_OW 290
74425: GO 74389
74427: POP
74428: POP
// end ;
74429: PPOPN 2
74431: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74432: LD_EXP 71
74436: PUSH
74437: LD_EXP 116
74441: AND
74442: IFFALSE 74625
74444: GO 74446
74446: DISABLE
74447: LD_INT 0
74449: PPUSH
74450: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74451: LD_ADDR_VAR 0 2
74455: PUSH
74456: LD_INT 22
74458: PUSH
74459: LD_OWVAR 2
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PPUSH
74468: CALL_OW 69
74472: ST_TO_ADDR
// if not tmp then
74473: LD_VAR 0 2
74477: NOT
74478: IFFALSE 74482
// exit ;
74480: GO 74625
// for i := 1 to 2 do
74482: LD_ADDR_VAR 0 1
74486: PUSH
74487: DOUBLE
74488: LD_INT 1
74490: DEC
74491: ST_TO_ADDR
74492: LD_INT 2
74494: PUSH
74495: FOR_TO
74496: IFFALSE 74623
// begin uc_side := your_side ;
74498: LD_ADDR_OWVAR 20
74502: PUSH
74503: LD_OWVAR 2
74507: ST_TO_ADDR
// uc_nation := nation_american ;
74508: LD_ADDR_OWVAR 21
74512: PUSH
74513: LD_INT 1
74515: ST_TO_ADDR
// vc_chassis := us_morphling ;
74516: LD_ADDR_OWVAR 37
74520: PUSH
74521: LD_INT 5
74523: ST_TO_ADDR
// vc_engine := engine_siberite ;
74524: LD_ADDR_OWVAR 39
74528: PUSH
74529: LD_INT 3
74531: ST_TO_ADDR
// vc_control := control_computer ;
74532: LD_ADDR_OWVAR 38
74536: PUSH
74537: LD_INT 3
74539: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74540: LD_ADDR_OWVAR 40
74544: PUSH
74545: LD_INT 10
74547: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74548: LD_VAR 0 2
74552: PUSH
74553: LD_INT 1
74555: ARRAY
74556: PPUSH
74557: CALL_OW 310
74561: NOT
74562: IFFALSE 74609
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74564: CALL_OW 45
74568: PPUSH
74569: LD_VAR 0 2
74573: PUSH
74574: LD_INT 1
74576: ARRAY
74577: PPUSH
74578: CALL_OW 250
74582: PPUSH
74583: LD_VAR 0 2
74587: PUSH
74588: LD_INT 1
74590: ARRAY
74591: PPUSH
74592: CALL_OW 251
74596: PPUSH
74597: LD_INT 12
74599: PPUSH
74600: LD_INT 1
74602: PPUSH
74603: CALL_OW 50
74607: GO 74621
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
74609: CALL_OW 45
74613: PPUSH
74614: LD_INT 1
74616: PPUSH
74617: CALL_OW 51
// end ;
74621: GO 74495
74623: POP
74624: POP
// end ;
74625: PPOPN 2
74627: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
74628: LD_EXP 71
74632: PUSH
74633: LD_EXP 117
74637: AND
74638: IFFALSE 74860
74640: GO 74642
74642: DISABLE
74643: LD_INT 0
74645: PPUSH
74646: PPUSH
74647: PPUSH
74648: PPUSH
74649: PPUSH
74650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74651: LD_ADDR_VAR 0 6
74655: PUSH
74656: LD_INT 22
74658: PUSH
74659: LD_OWVAR 2
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PUSH
74668: LD_INT 21
74670: PUSH
74671: LD_INT 1
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: PUSH
74678: LD_INT 3
74680: PUSH
74681: LD_INT 23
74683: PUSH
74684: LD_INT 0
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: LIST
74699: PPUSH
74700: CALL_OW 69
74704: ST_TO_ADDR
// if not tmp then
74705: LD_VAR 0 6
74709: NOT
74710: IFFALSE 74714
// exit ;
74712: GO 74860
// s1 := rand ( 1 , 4 ) ;
74714: LD_ADDR_VAR 0 2
74718: PUSH
74719: LD_INT 1
74721: PPUSH
74722: LD_INT 4
74724: PPUSH
74725: CALL_OW 12
74729: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
74730: LD_ADDR_VAR 0 4
74734: PUSH
74735: LD_VAR 0 6
74739: PUSH
74740: LD_INT 1
74742: ARRAY
74743: PPUSH
74744: LD_VAR 0 2
74748: PPUSH
74749: CALL_OW 259
74753: ST_TO_ADDR
// if s1 = 1 then
74754: LD_VAR 0 2
74758: PUSH
74759: LD_INT 1
74761: EQUAL
74762: IFFALSE 74782
// s2 := rand ( 2 , 4 ) else
74764: LD_ADDR_VAR 0 3
74768: PUSH
74769: LD_INT 2
74771: PPUSH
74772: LD_INT 4
74774: PPUSH
74775: CALL_OW 12
74779: ST_TO_ADDR
74780: GO 74790
// s2 := 1 ;
74782: LD_ADDR_VAR 0 3
74786: PUSH
74787: LD_INT 1
74789: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
74790: LD_ADDR_VAR 0 5
74794: PUSH
74795: LD_VAR 0 6
74799: PUSH
74800: LD_INT 1
74802: ARRAY
74803: PPUSH
74804: LD_VAR 0 3
74808: PPUSH
74809: CALL_OW 259
74813: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
74814: LD_VAR 0 6
74818: PUSH
74819: LD_INT 1
74821: ARRAY
74822: PPUSH
74823: LD_VAR 0 2
74827: PPUSH
74828: LD_VAR 0 5
74832: PPUSH
74833: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
74837: LD_VAR 0 6
74841: PUSH
74842: LD_INT 1
74844: ARRAY
74845: PPUSH
74846: LD_VAR 0 3
74850: PPUSH
74851: LD_VAR 0 4
74855: PPUSH
74856: CALL_OW 237
// end ;
74860: PPOPN 6
74862: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
74863: LD_EXP 71
74867: PUSH
74868: LD_EXP 118
74872: AND
74873: IFFALSE 74952
74875: GO 74877
74877: DISABLE
74878: LD_INT 0
74880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
74881: LD_ADDR_VAR 0 1
74885: PUSH
74886: LD_INT 22
74888: PUSH
74889: LD_OWVAR 2
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: PUSH
74898: LD_INT 30
74900: PUSH
74901: LD_INT 3
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PPUSH
74912: CALL_OW 69
74916: ST_TO_ADDR
// if not tmp then
74917: LD_VAR 0 1
74921: NOT
74922: IFFALSE 74926
// exit ;
74924: GO 74952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74926: LD_VAR 0 1
74930: PUSH
74931: LD_INT 1
74933: PPUSH
74934: LD_VAR 0 1
74938: PPUSH
74939: CALL_OW 12
74943: ARRAY
74944: PPUSH
74945: LD_INT 1
74947: PPUSH
74948: CALL_OW 234
// end ;
74952: PPOPN 1
74954: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
74955: LD_EXP 71
74959: PUSH
74960: LD_EXP 119
74964: AND
74965: IFFALSE 75077
74967: GO 74969
74969: DISABLE
74970: LD_INT 0
74972: PPUSH
74973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
74974: LD_ADDR_VAR 0 2
74978: PUSH
74979: LD_INT 22
74981: PUSH
74982: LD_OWVAR 2
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 2
74993: PUSH
74994: LD_INT 30
74996: PUSH
74997: LD_INT 27
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PUSH
75004: LD_INT 30
75006: PUSH
75007: LD_INT 26
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 30
75016: PUSH
75017: LD_INT 28
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: PPUSH
75034: CALL_OW 69
75038: ST_TO_ADDR
// if not tmp then
75039: LD_VAR 0 2
75043: NOT
75044: IFFALSE 75048
// exit ;
75046: GO 75077
// for i in tmp do
75048: LD_ADDR_VAR 0 1
75052: PUSH
75053: LD_VAR 0 2
75057: PUSH
75058: FOR_IN
75059: IFFALSE 75075
// SetLives ( i , 1 ) ;
75061: LD_VAR 0 1
75065: PPUSH
75066: LD_INT 1
75068: PPUSH
75069: CALL_OW 234
75073: GO 75058
75075: POP
75076: POP
// end ;
75077: PPOPN 2
75079: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
75080: LD_EXP 71
75084: PUSH
75085: LD_EXP 120
75089: AND
75090: IFFALSE 75364
75092: GO 75094
75094: DISABLE
75095: LD_INT 0
75097: PPUSH
75098: PPUSH
75099: PPUSH
// begin i := rand ( 1 , 7 ) ;
75100: LD_ADDR_VAR 0 1
75104: PUSH
75105: LD_INT 1
75107: PPUSH
75108: LD_INT 7
75110: PPUSH
75111: CALL_OW 12
75115: ST_TO_ADDR
// case i of 1 :
75116: LD_VAR 0 1
75120: PUSH
75121: LD_INT 1
75123: DOUBLE
75124: EQUAL
75125: IFTRUE 75129
75127: GO 75139
75129: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
75130: LD_STRING earthquake(getX(game), 0, 32)
75132: PPUSH
75133: CALL_OW 559
75137: GO 75364
75139: LD_INT 2
75141: DOUBLE
75142: EQUAL
75143: IFTRUE 75147
75145: GO 75161
75147: POP
// begin ToLua ( displayStucuk(); ) ;
75148: LD_STRING displayStucuk();
75150: PPUSH
75151: CALL_OW 559
// ResetFog ;
75155: CALL_OW 335
// end ; 3 :
75159: GO 75364
75161: LD_INT 3
75163: DOUBLE
75164: EQUAL
75165: IFTRUE 75169
75167: GO 75273
75169: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75170: LD_ADDR_VAR 0 2
75174: PUSH
75175: LD_INT 22
75177: PUSH
75178: LD_OWVAR 2
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: PUSH
75187: LD_INT 25
75189: PUSH
75190: LD_INT 1
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PPUSH
75201: CALL_OW 69
75205: ST_TO_ADDR
// if not tmp then
75206: LD_VAR 0 2
75210: NOT
75211: IFFALSE 75215
// exit ;
75213: GO 75364
// un := tmp [ rand ( 1 , tmp ) ] ;
75215: LD_ADDR_VAR 0 3
75219: PUSH
75220: LD_VAR 0 2
75224: PUSH
75225: LD_INT 1
75227: PPUSH
75228: LD_VAR 0 2
75232: PPUSH
75233: CALL_OW 12
75237: ARRAY
75238: ST_TO_ADDR
// if Crawls ( un ) then
75239: LD_VAR 0 3
75243: PPUSH
75244: CALL_OW 318
75248: IFFALSE 75259
// ComWalk ( un ) ;
75250: LD_VAR 0 3
75254: PPUSH
75255: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75259: LD_VAR 0 3
75263: PPUSH
75264: LD_INT 8
75266: PPUSH
75267: CALL_OW 336
// end ; 4 :
75271: GO 75364
75273: LD_INT 4
75275: DOUBLE
75276: EQUAL
75277: IFTRUE 75281
75279: GO 75342
75281: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75282: LD_ADDR_VAR 0 2
75286: PUSH
75287: LD_INT 22
75289: PUSH
75290: LD_OWVAR 2
75294: PUSH
75295: EMPTY
75296: LIST
75297: LIST
75298: PUSH
75299: LD_INT 30
75301: PUSH
75302: LD_INT 29
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PPUSH
75313: CALL_OW 69
75317: ST_TO_ADDR
// if not tmp then
75318: LD_VAR 0 2
75322: NOT
75323: IFFALSE 75327
// exit ;
75325: GO 75364
// DestroyUnit ( tmp [ 1 ] ) ;
75327: LD_VAR 0 2
75331: PUSH
75332: LD_INT 1
75334: ARRAY
75335: PPUSH
75336: CALL_OW 65
// end ; 5 .. 7 :
75340: GO 75364
75342: LD_INT 5
75344: DOUBLE
75345: GREATEREQUAL
75346: IFFALSE 75354
75348: LD_INT 7
75350: DOUBLE
75351: LESSEQUAL
75352: IFTRUE 75356
75354: GO 75363
75356: POP
// StreamSibBomb ; end ;
75357: CALL 71614 0 0
75361: GO 75364
75363: POP
// end ;
75364: PPOPN 3
75366: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75367: LD_EXP 71
75371: PUSH
75372: LD_EXP 121
75376: AND
75377: IFFALSE 75533
75379: GO 75381
75381: DISABLE
75382: LD_INT 0
75384: PPUSH
75385: PPUSH
75386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75387: LD_ADDR_VAR 0 2
75391: PUSH
75392: LD_INT 81
75394: PUSH
75395: LD_OWVAR 2
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: PUSH
75404: LD_INT 2
75406: PUSH
75407: LD_INT 21
75409: PUSH
75410: LD_INT 1
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PUSH
75417: LD_INT 21
75419: PUSH
75420: LD_INT 2
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: LIST
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PPUSH
75436: CALL_OW 69
75440: ST_TO_ADDR
// if not tmp then
75441: LD_VAR 0 2
75445: NOT
75446: IFFALSE 75450
// exit ;
75448: GO 75533
// p := 0 ;
75450: LD_ADDR_VAR 0 3
75454: PUSH
75455: LD_INT 0
75457: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75458: LD_INT 35
75460: PPUSH
75461: CALL_OW 67
// p := p + 1 ;
75465: LD_ADDR_VAR 0 3
75469: PUSH
75470: LD_VAR 0 3
75474: PUSH
75475: LD_INT 1
75477: PLUS
75478: ST_TO_ADDR
// for i in tmp do
75479: LD_ADDR_VAR 0 1
75483: PUSH
75484: LD_VAR 0 2
75488: PUSH
75489: FOR_IN
75490: IFFALSE 75521
// if GetLives ( i ) < 1000 then
75492: LD_VAR 0 1
75496: PPUSH
75497: CALL_OW 256
75501: PUSH
75502: LD_INT 1000
75504: LESS
75505: IFFALSE 75519
// SetLives ( i , 1000 ) ;
75507: LD_VAR 0 1
75511: PPUSH
75512: LD_INT 1000
75514: PPUSH
75515: CALL_OW 234
75519: GO 75489
75521: POP
75522: POP
// until p > 20 ;
75523: LD_VAR 0 3
75527: PUSH
75528: LD_INT 20
75530: GREATER
75531: IFFALSE 75458
// end ;
75533: PPOPN 3
75535: END
// every 0 0$1 trigger StreamModeActive and sTime do
75536: LD_EXP 71
75540: PUSH
75541: LD_EXP 122
75545: AND
75546: IFFALSE 75581
75548: GO 75550
75550: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75551: LD_INT 28
75553: PPUSH
75554: LD_OWVAR 2
75558: PPUSH
75559: LD_INT 2
75561: PPUSH
75562: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
75566: LD_INT 30
75568: PPUSH
75569: LD_OWVAR 2
75573: PPUSH
75574: LD_INT 2
75576: PPUSH
75577: CALL_OW 322
// end ;
75581: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
75582: LD_EXP 71
75586: PUSH
75587: LD_EXP 123
75591: AND
75592: IFFALSE 75713
75594: GO 75596
75596: DISABLE
75597: LD_INT 0
75599: PPUSH
75600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75601: LD_ADDR_VAR 0 2
75605: PUSH
75606: LD_INT 22
75608: PUSH
75609: LD_OWVAR 2
75613: PUSH
75614: EMPTY
75615: LIST
75616: LIST
75617: PUSH
75618: LD_INT 21
75620: PUSH
75621: LD_INT 1
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PUSH
75628: LD_INT 3
75630: PUSH
75631: LD_INT 23
75633: PUSH
75634: LD_INT 0
75636: PUSH
75637: EMPTY
75638: LIST
75639: LIST
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: PUSH
75645: EMPTY
75646: LIST
75647: LIST
75648: LIST
75649: PPUSH
75650: CALL_OW 69
75654: ST_TO_ADDR
// if not tmp then
75655: LD_VAR 0 2
75659: NOT
75660: IFFALSE 75664
// exit ;
75662: GO 75713
// for i in tmp do
75664: LD_ADDR_VAR 0 1
75668: PUSH
75669: LD_VAR 0 2
75673: PUSH
75674: FOR_IN
75675: IFFALSE 75711
// begin if Crawls ( i ) then
75677: LD_VAR 0 1
75681: PPUSH
75682: CALL_OW 318
75686: IFFALSE 75697
// ComWalk ( i ) ;
75688: LD_VAR 0 1
75692: PPUSH
75693: CALL_OW 138
// SetClass ( i , 2 ) ;
75697: LD_VAR 0 1
75701: PPUSH
75702: LD_INT 2
75704: PPUSH
75705: CALL_OW 336
// end ;
75709: GO 75674
75711: POP
75712: POP
// end ;
75713: PPOPN 2
75715: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
75716: LD_EXP 71
75720: PUSH
75721: LD_EXP 124
75725: AND
75726: IFFALSE 76007
75728: GO 75730
75730: DISABLE
75731: LD_INT 0
75733: PPUSH
75734: PPUSH
75735: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
75736: LD_OWVAR 2
75740: PPUSH
75741: LD_INT 9
75743: PPUSH
75744: LD_INT 1
75746: PPUSH
75747: LD_INT 1
75749: PPUSH
75750: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
75754: LD_INT 9
75756: PPUSH
75757: LD_OWVAR 2
75761: PPUSH
75762: CALL_OW 343
// uc_side := 9 ;
75766: LD_ADDR_OWVAR 20
75770: PUSH
75771: LD_INT 9
75773: ST_TO_ADDR
// uc_nation := 2 ;
75774: LD_ADDR_OWVAR 21
75778: PUSH
75779: LD_INT 2
75781: ST_TO_ADDR
// hc_name := Dark Warrior ;
75782: LD_ADDR_OWVAR 26
75786: PUSH
75787: LD_STRING Dark Warrior
75789: ST_TO_ADDR
// hc_gallery :=  ;
75790: LD_ADDR_OWVAR 33
75794: PUSH
75795: LD_STRING 
75797: ST_TO_ADDR
// hc_noskilllimit := true ;
75798: LD_ADDR_OWVAR 76
75802: PUSH
75803: LD_INT 1
75805: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
75806: LD_ADDR_OWVAR 31
75810: PUSH
75811: LD_INT 30
75813: PUSH
75814: LD_INT 30
75816: PUSH
75817: LD_INT 30
75819: PUSH
75820: LD_INT 30
75822: PUSH
75823: EMPTY
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: ST_TO_ADDR
// un := CreateHuman ;
75829: LD_ADDR_VAR 0 3
75833: PUSH
75834: CALL_OW 44
75838: ST_TO_ADDR
// hc_noskilllimit := false ;
75839: LD_ADDR_OWVAR 76
75843: PUSH
75844: LD_INT 0
75846: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75847: LD_VAR 0 3
75851: PPUSH
75852: LD_INT 1
75854: PPUSH
75855: CALL_OW 51
// p := 0 ;
75859: LD_ADDR_VAR 0 2
75863: PUSH
75864: LD_INT 0
75866: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75867: LD_INT 35
75869: PPUSH
75870: CALL_OW 67
// p := p + 1 ;
75874: LD_ADDR_VAR 0 2
75878: PUSH
75879: LD_VAR 0 2
75883: PUSH
75884: LD_INT 1
75886: PLUS
75887: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
75888: LD_VAR 0 3
75892: PPUSH
75893: CALL_OW 256
75897: PUSH
75898: LD_INT 1000
75900: LESS
75901: IFFALSE 75915
// SetLives ( un , 1000 ) ;
75903: LD_VAR 0 3
75907: PPUSH
75908: LD_INT 1000
75910: PPUSH
75911: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
75915: LD_VAR 0 3
75919: PPUSH
75920: LD_INT 81
75922: PUSH
75923: LD_OWVAR 2
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: PUSH
75932: LD_INT 91
75934: PUSH
75935: LD_VAR 0 3
75939: PUSH
75940: LD_INT 30
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: LIST
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PPUSH
75952: CALL_OW 69
75956: PPUSH
75957: LD_VAR 0 3
75961: PPUSH
75962: CALL_OW 74
75966: PPUSH
75967: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
75971: LD_VAR 0 2
75975: PUSH
75976: LD_INT 60
75978: GREATER
75979: PUSH
75980: LD_VAR 0 3
75984: PPUSH
75985: CALL_OW 301
75989: OR
75990: IFFALSE 75867
// if un then
75992: LD_VAR 0 3
75996: IFFALSE 76007
// RemoveUnit ( un ) ;
75998: LD_VAR 0 3
76002: PPUSH
76003: CALL_OW 64
// end ;
76007: PPOPN 3
76009: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76010: LD_INT 0
76012: PPUSH
// case cmd of 301 :
76013: LD_VAR 0 1
76017: PUSH
76018: LD_INT 301
76020: DOUBLE
76021: EQUAL
76022: IFTRUE 76026
76024: GO 76058
76026: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76027: LD_VAR 0 6
76031: PPUSH
76032: LD_VAR 0 7
76036: PPUSH
76037: LD_VAR 0 8
76041: PPUSH
76042: LD_VAR 0 4
76046: PPUSH
76047: LD_VAR 0 5
76051: PPUSH
76052: CALL 77259 0 5
76056: GO 76179
76058: LD_INT 302
76060: DOUBLE
76061: EQUAL
76062: IFTRUE 76066
76064: GO 76103
76066: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76067: LD_VAR 0 6
76071: PPUSH
76072: LD_VAR 0 7
76076: PPUSH
76077: LD_VAR 0 8
76081: PPUSH
76082: LD_VAR 0 9
76086: PPUSH
76087: LD_VAR 0 4
76091: PPUSH
76092: LD_VAR 0 5
76096: PPUSH
76097: CALL 77350 0 6
76101: GO 76179
76103: LD_INT 303
76105: DOUBLE
76106: EQUAL
76107: IFTRUE 76111
76109: GO 76148
76111: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76112: LD_VAR 0 6
76116: PPUSH
76117: LD_VAR 0 7
76121: PPUSH
76122: LD_VAR 0 8
76126: PPUSH
76127: LD_VAR 0 9
76131: PPUSH
76132: LD_VAR 0 4
76136: PPUSH
76137: LD_VAR 0 5
76141: PPUSH
76142: CALL 76184 0 6
76146: GO 76179
76148: LD_INT 304
76150: DOUBLE
76151: EQUAL
76152: IFTRUE 76156
76154: GO 76178
76156: POP
// hHackTeleport ( unit , x , y ) ; end ;
76157: LD_VAR 0 2
76161: PPUSH
76162: LD_VAR 0 4
76166: PPUSH
76167: LD_VAR 0 5
76171: PPUSH
76172: CALL 77943 0 3
76176: GO 76179
76178: POP
// end ;
76179: LD_VAR 0 12
76183: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
76184: LD_INT 0
76186: PPUSH
76187: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
76188: LD_VAR 0 1
76192: PUSH
76193: LD_INT 1
76195: LESS
76196: PUSH
76197: LD_VAR 0 1
76201: PUSH
76202: LD_INT 3
76204: GREATER
76205: OR
76206: PUSH
76207: LD_VAR 0 5
76211: PPUSH
76212: LD_VAR 0 6
76216: PPUSH
76217: CALL_OW 428
76221: OR
76222: IFFALSE 76226
// exit ;
76224: GO 76946
// uc_side := your_side ;
76226: LD_ADDR_OWVAR 20
76230: PUSH
76231: LD_OWVAR 2
76235: ST_TO_ADDR
// uc_nation := nation ;
76236: LD_ADDR_OWVAR 21
76240: PUSH
76241: LD_VAR 0 1
76245: ST_TO_ADDR
// bc_level = 1 ;
76246: LD_ADDR_OWVAR 43
76250: PUSH
76251: LD_INT 1
76253: ST_TO_ADDR
// case btype of 1 :
76254: LD_VAR 0 2
76258: PUSH
76259: LD_INT 1
76261: DOUBLE
76262: EQUAL
76263: IFTRUE 76267
76265: GO 76278
76267: POP
// bc_type := b_depot ; 2 :
76268: LD_ADDR_OWVAR 42
76272: PUSH
76273: LD_INT 0
76275: ST_TO_ADDR
76276: GO 76890
76278: LD_INT 2
76280: DOUBLE
76281: EQUAL
76282: IFTRUE 76286
76284: GO 76297
76286: POP
// bc_type := b_warehouse ; 3 :
76287: LD_ADDR_OWVAR 42
76291: PUSH
76292: LD_INT 1
76294: ST_TO_ADDR
76295: GO 76890
76297: LD_INT 3
76299: DOUBLE
76300: EQUAL
76301: IFTRUE 76305
76303: GO 76316
76305: POP
// bc_type := b_lab ; 4 .. 9 :
76306: LD_ADDR_OWVAR 42
76310: PUSH
76311: LD_INT 6
76313: ST_TO_ADDR
76314: GO 76890
76316: LD_INT 4
76318: DOUBLE
76319: GREATEREQUAL
76320: IFFALSE 76328
76322: LD_INT 9
76324: DOUBLE
76325: LESSEQUAL
76326: IFTRUE 76330
76328: GO 76382
76330: POP
// begin bc_type := b_lab_half ;
76331: LD_ADDR_OWVAR 42
76335: PUSH
76336: LD_INT 7
76338: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
76339: LD_ADDR_OWVAR 44
76343: PUSH
76344: LD_INT 10
76346: PUSH
76347: LD_INT 11
76349: PUSH
76350: LD_INT 12
76352: PUSH
76353: LD_INT 15
76355: PUSH
76356: LD_INT 14
76358: PUSH
76359: LD_INT 13
76361: PUSH
76362: EMPTY
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: LIST
76369: PUSH
76370: LD_VAR 0 2
76374: PUSH
76375: LD_INT 3
76377: MINUS
76378: ARRAY
76379: ST_TO_ADDR
// end ; 10 .. 13 :
76380: GO 76890
76382: LD_INT 10
76384: DOUBLE
76385: GREATEREQUAL
76386: IFFALSE 76394
76388: LD_INT 13
76390: DOUBLE
76391: LESSEQUAL
76392: IFTRUE 76396
76394: GO 76473
76396: POP
// begin bc_type := b_lab_full ;
76397: LD_ADDR_OWVAR 42
76401: PUSH
76402: LD_INT 8
76404: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
76405: LD_ADDR_OWVAR 44
76409: PUSH
76410: LD_INT 10
76412: PUSH
76413: LD_INT 12
76415: PUSH
76416: LD_INT 14
76418: PUSH
76419: LD_INT 13
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: LIST
76426: LIST
76427: PUSH
76428: LD_VAR 0 2
76432: PUSH
76433: LD_INT 9
76435: MINUS
76436: ARRAY
76437: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
76438: LD_ADDR_OWVAR 45
76442: PUSH
76443: LD_INT 11
76445: PUSH
76446: LD_INT 15
76448: PUSH
76449: LD_INT 12
76451: PUSH
76452: LD_INT 15
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: LIST
76459: LIST
76460: PUSH
76461: LD_VAR 0 2
76465: PUSH
76466: LD_INT 9
76468: MINUS
76469: ARRAY
76470: ST_TO_ADDR
// end ; 14 :
76471: GO 76890
76473: LD_INT 14
76475: DOUBLE
76476: EQUAL
76477: IFTRUE 76481
76479: GO 76492
76481: POP
// bc_type := b_workshop ; 15 :
76482: LD_ADDR_OWVAR 42
76486: PUSH
76487: LD_INT 2
76489: ST_TO_ADDR
76490: GO 76890
76492: LD_INT 15
76494: DOUBLE
76495: EQUAL
76496: IFTRUE 76500
76498: GO 76511
76500: POP
// bc_type := b_factory ; 16 :
76501: LD_ADDR_OWVAR 42
76505: PUSH
76506: LD_INT 3
76508: ST_TO_ADDR
76509: GO 76890
76511: LD_INT 16
76513: DOUBLE
76514: EQUAL
76515: IFTRUE 76519
76517: GO 76530
76519: POP
// bc_type := b_ext_gun ; 17 :
76520: LD_ADDR_OWVAR 42
76524: PUSH
76525: LD_INT 17
76527: ST_TO_ADDR
76528: GO 76890
76530: LD_INT 17
76532: DOUBLE
76533: EQUAL
76534: IFTRUE 76538
76536: GO 76566
76538: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
76539: LD_ADDR_OWVAR 42
76543: PUSH
76544: LD_INT 19
76546: PUSH
76547: LD_INT 23
76549: PUSH
76550: LD_INT 19
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: LIST
76557: PUSH
76558: LD_VAR 0 1
76562: ARRAY
76563: ST_TO_ADDR
76564: GO 76890
76566: LD_INT 18
76568: DOUBLE
76569: EQUAL
76570: IFTRUE 76574
76572: GO 76585
76574: POP
// bc_type := b_ext_radar ; 19 :
76575: LD_ADDR_OWVAR 42
76579: PUSH
76580: LD_INT 20
76582: ST_TO_ADDR
76583: GO 76890
76585: LD_INT 19
76587: DOUBLE
76588: EQUAL
76589: IFTRUE 76593
76591: GO 76604
76593: POP
// bc_type := b_ext_radio ; 20 :
76594: LD_ADDR_OWVAR 42
76598: PUSH
76599: LD_INT 22
76601: ST_TO_ADDR
76602: GO 76890
76604: LD_INT 20
76606: DOUBLE
76607: EQUAL
76608: IFTRUE 76612
76610: GO 76623
76612: POP
// bc_type := b_ext_siberium ; 21 :
76613: LD_ADDR_OWVAR 42
76617: PUSH
76618: LD_INT 21
76620: ST_TO_ADDR
76621: GO 76890
76623: LD_INT 21
76625: DOUBLE
76626: EQUAL
76627: IFTRUE 76631
76629: GO 76642
76631: POP
// bc_type := b_ext_computer ; 22 :
76632: LD_ADDR_OWVAR 42
76636: PUSH
76637: LD_INT 24
76639: ST_TO_ADDR
76640: GO 76890
76642: LD_INT 22
76644: DOUBLE
76645: EQUAL
76646: IFTRUE 76650
76648: GO 76661
76650: POP
// bc_type := b_ext_track ; 23 :
76651: LD_ADDR_OWVAR 42
76655: PUSH
76656: LD_INT 16
76658: ST_TO_ADDR
76659: GO 76890
76661: LD_INT 23
76663: DOUBLE
76664: EQUAL
76665: IFTRUE 76669
76667: GO 76680
76669: POP
// bc_type := b_ext_laser ; 24 :
76670: LD_ADDR_OWVAR 42
76674: PUSH
76675: LD_INT 25
76677: ST_TO_ADDR
76678: GO 76890
76680: LD_INT 24
76682: DOUBLE
76683: EQUAL
76684: IFTRUE 76688
76686: GO 76699
76688: POP
// bc_type := b_control_tower ; 25 :
76689: LD_ADDR_OWVAR 42
76693: PUSH
76694: LD_INT 36
76696: ST_TO_ADDR
76697: GO 76890
76699: LD_INT 25
76701: DOUBLE
76702: EQUAL
76703: IFTRUE 76707
76705: GO 76718
76707: POP
// bc_type := b_breastwork ; 26 :
76708: LD_ADDR_OWVAR 42
76712: PUSH
76713: LD_INT 31
76715: ST_TO_ADDR
76716: GO 76890
76718: LD_INT 26
76720: DOUBLE
76721: EQUAL
76722: IFTRUE 76726
76724: GO 76737
76726: POP
// bc_type := b_bunker ; 27 :
76727: LD_ADDR_OWVAR 42
76731: PUSH
76732: LD_INT 32
76734: ST_TO_ADDR
76735: GO 76890
76737: LD_INT 27
76739: DOUBLE
76740: EQUAL
76741: IFTRUE 76745
76743: GO 76756
76745: POP
// bc_type := b_turret ; 28 :
76746: LD_ADDR_OWVAR 42
76750: PUSH
76751: LD_INT 33
76753: ST_TO_ADDR
76754: GO 76890
76756: LD_INT 28
76758: DOUBLE
76759: EQUAL
76760: IFTRUE 76764
76762: GO 76775
76764: POP
// bc_type := b_armoury ; 29 :
76765: LD_ADDR_OWVAR 42
76769: PUSH
76770: LD_INT 4
76772: ST_TO_ADDR
76773: GO 76890
76775: LD_INT 29
76777: DOUBLE
76778: EQUAL
76779: IFTRUE 76783
76781: GO 76794
76783: POP
// bc_type := b_barracks ; 30 :
76784: LD_ADDR_OWVAR 42
76788: PUSH
76789: LD_INT 5
76791: ST_TO_ADDR
76792: GO 76890
76794: LD_INT 30
76796: DOUBLE
76797: EQUAL
76798: IFTRUE 76802
76800: GO 76813
76802: POP
// bc_type := b_solar_power ; 31 :
76803: LD_ADDR_OWVAR 42
76807: PUSH
76808: LD_INT 27
76810: ST_TO_ADDR
76811: GO 76890
76813: LD_INT 31
76815: DOUBLE
76816: EQUAL
76817: IFTRUE 76821
76819: GO 76832
76821: POP
// bc_type := b_oil_power ; 32 :
76822: LD_ADDR_OWVAR 42
76826: PUSH
76827: LD_INT 26
76829: ST_TO_ADDR
76830: GO 76890
76832: LD_INT 32
76834: DOUBLE
76835: EQUAL
76836: IFTRUE 76840
76838: GO 76851
76840: POP
// bc_type := b_siberite_power ; 33 :
76841: LD_ADDR_OWVAR 42
76845: PUSH
76846: LD_INT 28
76848: ST_TO_ADDR
76849: GO 76890
76851: LD_INT 33
76853: DOUBLE
76854: EQUAL
76855: IFTRUE 76859
76857: GO 76870
76859: POP
// bc_type := b_oil_mine ; 34 :
76860: LD_ADDR_OWVAR 42
76864: PUSH
76865: LD_INT 29
76867: ST_TO_ADDR
76868: GO 76890
76870: LD_INT 34
76872: DOUBLE
76873: EQUAL
76874: IFTRUE 76878
76876: GO 76889
76878: POP
// bc_type := b_siberite_mine ; end ;
76879: LD_ADDR_OWVAR 42
76883: PUSH
76884: LD_INT 30
76886: ST_TO_ADDR
76887: GO 76890
76889: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
76890: LD_ADDR_VAR 0 8
76894: PUSH
76895: LD_VAR 0 5
76899: PPUSH
76900: LD_VAR 0 6
76904: PPUSH
76905: LD_VAR 0 3
76909: PPUSH
76910: CALL_OW 47
76914: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
76915: LD_OWVAR 42
76919: PUSH
76920: LD_INT 32
76922: PUSH
76923: LD_INT 33
76925: PUSH
76926: EMPTY
76927: LIST
76928: LIST
76929: IN
76930: IFFALSE 76946
// PlaceWeaponTurret ( b , weapon ) ;
76932: LD_VAR 0 8
76936: PPUSH
76937: LD_VAR 0 4
76941: PPUSH
76942: CALL_OW 431
// end ;
76946: LD_VAR 0 7
76950: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
76951: LD_INT 0
76953: PPUSH
76954: PPUSH
76955: PPUSH
76956: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76957: LD_ADDR_VAR 0 4
76961: PUSH
76962: LD_INT 22
76964: PUSH
76965: LD_OWVAR 2
76969: PUSH
76970: EMPTY
76971: LIST
76972: LIST
76973: PUSH
76974: LD_INT 2
76976: PUSH
76977: LD_INT 30
76979: PUSH
76980: LD_INT 0
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 30
76989: PUSH
76990: LD_INT 1
76992: PUSH
76993: EMPTY
76994: LIST
76995: LIST
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: LIST
77001: PUSH
77002: EMPTY
77003: LIST
77004: LIST
77005: PPUSH
77006: CALL_OW 69
77010: ST_TO_ADDR
// if not tmp then
77011: LD_VAR 0 4
77015: NOT
77016: IFFALSE 77020
// exit ;
77018: GO 77079
// for i in tmp do
77020: LD_ADDR_VAR 0 2
77024: PUSH
77025: LD_VAR 0 4
77029: PUSH
77030: FOR_IN
77031: IFFALSE 77077
// for j = 1 to 3 do
77033: LD_ADDR_VAR 0 3
77037: PUSH
77038: DOUBLE
77039: LD_INT 1
77041: DEC
77042: ST_TO_ADDR
77043: LD_INT 3
77045: PUSH
77046: FOR_TO
77047: IFFALSE 77073
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77049: LD_VAR 0 2
77053: PPUSH
77054: CALL_OW 274
77058: PPUSH
77059: LD_VAR 0 3
77063: PPUSH
77064: LD_INT 99999
77066: PPUSH
77067: CALL_OW 277
77071: GO 77046
77073: POP
77074: POP
77075: GO 77030
77077: POP
77078: POP
// end ;
77079: LD_VAR 0 1
77083: RET
// export function hHackSetLevel10 ; var i , j ; begin
77084: LD_INT 0
77086: PPUSH
77087: PPUSH
77088: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77089: LD_ADDR_VAR 0 2
77093: PUSH
77094: LD_INT 21
77096: PUSH
77097: LD_INT 1
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: PPUSH
77104: CALL_OW 69
77108: PUSH
77109: FOR_IN
77110: IFFALSE 77162
// if IsSelected ( i ) then
77112: LD_VAR 0 2
77116: PPUSH
77117: CALL_OW 306
77121: IFFALSE 77160
// begin for j := 1 to 4 do
77123: LD_ADDR_VAR 0 3
77127: PUSH
77128: DOUBLE
77129: LD_INT 1
77131: DEC
77132: ST_TO_ADDR
77133: LD_INT 4
77135: PUSH
77136: FOR_TO
77137: IFFALSE 77158
// SetSkill ( i , j , 10 ) ;
77139: LD_VAR 0 2
77143: PPUSH
77144: LD_VAR 0 3
77148: PPUSH
77149: LD_INT 10
77151: PPUSH
77152: CALL_OW 237
77156: GO 77136
77158: POP
77159: POP
// end ;
77160: GO 77109
77162: POP
77163: POP
// end ;
77164: LD_VAR 0 1
77168: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77169: LD_INT 0
77171: PPUSH
77172: PPUSH
77173: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
77174: LD_ADDR_VAR 0 2
77178: PUSH
77179: LD_INT 22
77181: PUSH
77182: LD_OWVAR 2
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PUSH
77191: LD_INT 21
77193: PUSH
77194: LD_INT 1
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: PPUSH
77205: CALL_OW 69
77209: PUSH
77210: FOR_IN
77211: IFFALSE 77252
// begin for j := 1 to 4 do
77213: LD_ADDR_VAR 0 3
77217: PUSH
77218: DOUBLE
77219: LD_INT 1
77221: DEC
77222: ST_TO_ADDR
77223: LD_INT 4
77225: PUSH
77226: FOR_TO
77227: IFFALSE 77248
// SetSkill ( i , j , 10 ) ;
77229: LD_VAR 0 2
77233: PPUSH
77234: LD_VAR 0 3
77238: PPUSH
77239: LD_INT 10
77241: PPUSH
77242: CALL_OW 237
77246: GO 77226
77248: POP
77249: POP
// end ;
77250: GO 77210
77252: POP
77253: POP
// end ;
77254: LD_VAR 0 1
77258: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
77259: LD_INT 0
77261: PPUSH
// uc_side := your_side ;
77262: LD_ADDR_OWVAR 20
77266: PUSH
77267: LD_OWVAR 2
77271: ST_TO_ADDR
// uc_nation := nation ;
77272: LD_ADDR_OWVAR 21
77276: PUSH
77277: LD_VAR 0 1
77281: ST_TO_ADDR
// InitHc ;
77282: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
77286: LD_INT 0
77288: PPUSH
77289: LD_VAR 0 2
77293: PPUSH
77294: LD_VAR 0 3
77298: PPUSH
77299: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
77303: LD_VAR 0 4
77307: PPUSH
77308: LD_VAR 0 5
77312: PPUSH
77313: CALL_OW 428
77317: PUSH
77318: LD_INT 0
77320: EQUAL
77321: IFFALSE 77345
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
77323: CALL_OW 44
77327: PPUSH
77328: LD_VAR 0 4
77332: PPUSH
77333: LD_VAR 0 5
77337: PPUSH
77338: LD_INT 1
77340: PPUSH
77341: CALL_OW 48
// end ;
77345: LD_VAR 0 6
77349: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
77350: LD_INT 0
77352: PPUSH
77353: PPUSH
// uc_side := your_side ;
77354: LD_ADDR_OWVAR 20
77358: PUSH
77359: LD_OWVAR 2
77363: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
77364: LD_VAR 0 1
77368: PUSH
77369: LD_INT 1
77371: PUSH
77372: LD_INT 2
77374: PUSH
77375: LD_INT 3
77377: PUSH
77378: LD_INT 4
77380: PUSH
77381: LD_INT 5
77383: PUSH
77384: EMPTY
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: IN
77391: IFFALSE 77403
// uc_nation := nation_american else
77393: LD_ADDR_OWVAR 21
77397: PUSH
77398: LD_INT 1
77400: ST_TO_ADDR
77401: GO 77446
// if chassis in [ 11 , 12 , 13 , 14 ] then
77403: LD_VAR 0 1
77407: PUSH
77408: LD_INT 11
77410: PUSH
77411: LD_INT 12
77413: PUSH
77414: LD_INT 13
77416: PUSH
77417: LD_INT 14
77419: PUSH
77420: EMPTY
77421: LIST
77422: LIST
77423: LIST
77424: LIST
77425: IN
77426: IFFALSE 77438
// uc_nation := nation_arabian else
77428: LD_ADDR_OWVAR 21
77432: PUSH
77433: LD_INT 2
77435: ST_TO_ADDR
77436: GO 77446
// uc_nation := nation_russian ;
77438: LD_ADDR_OWVAR 21
77442: PUSH
77443: LD_INT 3
77445: ST_TO_ADDR
// vc_chassis := chassis ;
77446: LD_ADDR_OWVAR 37
77450: PUSH
77451: LD_VAR 0 1
77455: ST_TO_ADDR
// vc_engine := engine ;
77456: LD_ADDR_OWVAR 39
77460: PUSH
77461: LD_VAR 0 2
77465: ST_TO_ADDR
// vc_control := control ;
77466: LD_ADDR_OWVAR 38
77470: PUSH
77471: LD_VAR 0 3
77475: ST_TO_ADDR
// vc_weapon := weapon ;
77476: LD_ADDR_OWVAR 40
77480: PUSH
77481: LD_VAR 0 4
77485: ST_TO_ADDR
// un := CreateVehicle ;
77486: LD_ADDR_VAR 0 8
77490: PUSH
77491: CALL_OW 45
77495: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
77496: LD_VAR 0 8
77500: PPUSH
77501: LD_INT 0
77503: PPUSH
77504: LD_INT 5
77506: PPUSH
77507: CALL_OW 12
77511: PPUSH
77512: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
77516: LD_VAR 0 8
77520: PPUSH
77521: LD_VAR 0 5
77525: PPUSH
77526: LD_VAR 0 6
77530: PPUSH
77531: LD_INT 1
77533: PPUSH
77534: CALL_OW 48
// end ;
77538: LD_VAR 0 7
77542: RET
// export hInvincible ; every 1 do
77543: GO 77545
77545: DISABLE
// hInvincible := [ ] ;
77546: LD_ADDR_EXP 125
77550: PUSH
77551: EMPTY
77552: ST_TO_ADDR
77553: END
// every 10 do var i ;
77554: GO 77556
77556: DISABLE
77557: LD_INT 0
77559: PPUSH
// begin enable ;
77560: ENABLE
// if not hInvincible then
77561: LD_EXP 125
77565: NOT
77566: IFFALSE 77570
// exit ;
77568: GO 77614
// for i in hInvincible do
77570: LD_ADDR_VAR 0 1
77574: PUSH
77575: LD_EXP 125
77579: PUSH
77580: FOR_IN
77581: IFFALSE 77612
// if GetLives ( i ) < 1000 then
77583: LD_VAR 0 1
77587: PPUSH
77588: CALL_OW 256
77592: PUSH
77593: LD_INT 1000
77595: LESS
77596: IFFALSE 77610
// SetLives ( i , 1000 ) ;
77598: LD_VAR 0 1
77602: PPUSH
77603: LD_INT 1000
77605: PPUSH
77606: CALL_OW 234
77610: GO 77580
77612: POP
77613: POP
// end ;
77614: PPOPN 1
77616: END
// export function hHackInvincible ; var i ; begin
77617: LD_INT 0
77619: PPUSH
77620: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
77621: LD_ADDR_VAR 0 2
77625: PUSH
77626: LD_INT 2
77628: PUSH
77629: LD_INT 21
77631: PUSH
77632: LD_INT 1
77634: PUSH
77635: EMPTY
77636: LIST
77637: LIST
77638: PUSH
77639: LD_INT 21
77641: PUSH
77642: LD_INT 2
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: LIST
77653: PPUSH
77654: CALL_OW 69
77658: PUSH
77659: FOR_IN
77660: IFFALSE 77721
// if IsSelected ( i ) then
77662: LD_VAR 0 2
77666: PPUSH
77667: CALL_OW 306
77671: IFFALSE 77719
// begin if i in hInvincible then
77673: LD_VAR 0 2
77677: PUSH
77678: LD_EXP 125
77682: IN
77683: IFFALSE 77703
// hInvincible := hInvincible diff i else
77685: LD_ADDR_EXP 125
77689: PUSH
77690: LD_EXP 125
77694: PUSH
77695: LD_VAR 0 2
77699: DIFF
77700: ST_TO_ADDR
77701: GO 77719
// hInvincible := hInvincible union i ;
77703: LD_ADDR_EXP 125
77707: PUSH
77708: LD_EXP 125
77712: PUSH
77713: LD_VAR 0 2
77717: UNION
77718: ST_TO_ADDR
// end ;
77719: GO 77659
77721: POP
77722: POP
// end ;
77723: LD_VAR 0 1
77727: RET
// export function hHackInvisible ; var i , j ; begin
77728: LD_INT 0
77730: PPUSH
77731: PPUSH
77732: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77733: LD_ADDR_VAR 0 2
77737: PUSH
77738: LD_INT 21
77740: PUSH
77741: LD_INT 1
77743: PUSH
77744: EMPTY
77745: LIST
77746: LIST
77747: PPUSH
77748: CALL_OW 69
77752: PUSH
77753: FOR_IN
77754: IFFALSE 77778
// if IsSelected ( i ) then
77756: LD_VAR 0 2
77760: PPUSH
77761: CALL_OW 306
77765: IFFALSE 77776
// ComForceInvisible ( i ) ;
77767: LD_VAR 0 2
77771: PPUSH
77772: CALL_OW 496
77776: GO 77753
77778: POP
77779: POP
// end ;
77780: LD_VAR 0 1
77784: RET
// export function hHackChangeYourSide ; begin
77785: LD_INT 0
77787: PPUSH
// if your_side = 8 then
77788: LD_OWVAR 2
77792: PUSH
77793: LD_INT 8
77795: EQUAL
77796: IFFALSE 77808
// your_side := 0 else
77798: LD_ADDR_OWVAR 2
77802: PUSH
77803: LD_INT 0
77805: ST_TO_ADDR
77806: GO 77822
// your_side := your_side + 1 ;
77808: LD_ADDR_OWVAR 2
77812: PUSH
77813: LD_OWVAR 2
77817: PUSH
77818: LD_INT 1
77820: PLUS
77821: ST_TO_ADDR
// end ;
77822: LD_VAR 0 1
77826: RET
// export function hHackChangeUnitSide ; var i , j ; begin
77827: LD_INT 0
77829: PPUSH
77830: PPUSH
77831: PPUSH
// for i in all_units do
77832: LD_ADDR_VAR 0 2
77836: PUSH
77837: LD_OWVAR 3
77841: PUSH
77842: FOR_IN
77843: IFFALSE 77921
// if IsSelected ( i ) then
77845: LD_VAR 0 2
77849: PPUSH
77850: CALL_OW 306
77854: IFFALSE 77919
// begin j := GetSide ( i ) ;
77856: LD_ADDR_VAR 0 3
77860: PUSH
77861: LD_VAR 0 2
77865: PPUSH
77866: CALL_OW 255
77870: ST_TO_ADDR
// if j = 8 then
77871: LD_VAR 0 3
77875: PUSH
77876: LD_INT 8
77878: EQUAL
77879: IFFALSE 77891
// j := 0 else
77881: LD_ADDR_VAR 0 3
77885: PUSH
77886: LD_INT 0
77888: ST_TO_ADDR
77889: GO 77905
// j := j + 1 ;
77891: LD_ADDR_VAR 0 3
77895: PUSH
77896: LD_VAR 0 3
77900: PUSH
77901: LD_INT 1
77903: PLUS
77904: ST_TO_ADDR
// SetSide ( i , j ) ;
77905: LD_VAR 0 2
77909: PPUSH
77910: LD_VAR 0 3
77914: PPUSH
77915: CALL_OW 235
// end ;
77919: GO 77842
77921: POP
77922: POP
// end ;
77923: LD_VAR 0 1
77927: RET
// export function hHackFog ; begin
77928: LD_INT 0
77930: PPUSH
// FogOff ( true ) ;
77931: LD_INT 1
77933: PPUSH
77934: CALL_OW 344
// end ;
77938: LD_VAR 0 1
77942: RET
// export function hHackTeleport ( unit , x , y ) ; begin
77943: LD_INT 0
77945: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
77946: LD_VAR 0 1
77950: PPUSH
77951: LD_VAR 0 2
77955: PPUSH
77956: LD_VAR 0 3
77960: PPUSH
77961: LD_INT 1
77963: PPUSH
77964: LD_INT 1
77966: PPUSH
77967: CALL_OW 483
// CenterOnXY ( x , y ) ;
77971: LD_VAR 0 2
77975: PPUSH
77976: LD_VAR 0 3
77980: PPUSH
77981: CALL_OW 84
// end ; end_of_file
77985: LD_VAR 0 4
77989: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
77990: LD_INT 0
77992: PPUSH
// ar_miner := 81 ;
77993: LD_ADDR_EXP 133
77997: PUSH
77998: LD_INT 81
78000: ST_TO_ADDR
// ar_crane := 88 ;
78001: LD_ADDR_EXP 132
78005: PUSH
78006: LD_INT 88
78008: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
78009: LD_ADDR_EXP 127
78013: PUSH
78014: LD_INT 89
78016: ST_TO_ADDR
// us_hack := 99 ;
78017: LD_ADDR_EXP 128
78021: PUSH
78022: LD_INT 99
78024: ST_TO_ADDR
// us_artillery := 97 ;
78025: LD_ADDR_EXP 129
78029: PUSH
78030: LD_INT 97
78032: ST_TO_ADDR
// ar_bio_bomb := 91 ;
78033: LD_ADDR_EXP 130
78037: PUSH
78038: LD_INT 91
78040: ST_TO_ADDR
// ar_mortar := 92 ;
78041: LD_ADDR_EXP 131
78045: PUSH
78046: LD_INT 92
78048: ST_TO_ADDR
// ru_radar := 98 ;
78049: LD_ADDR_EXP 126
78053: PUSH
78054: LD_INT 98
78056: ST_TO_ADDR
// tech_Artillery := 80 ;
78057: LD_ADDR_EXP 134
78061: PUSH
78062: LD_INT 80
78064: ST_TO_ADDR
// tech_RadMat := 81 ;
78065: LD_ADDR_EXP 135
78069: PUSH
78070: LD_INT 81
78072: ST_TO_ADDR
// tech_BasicTools := 82 ;
78073: LD_ADDR_EXP 136
78077: PUSH
78078: LD_INT 82
78080: ST_TO_ADDR
// tech_Cargo := 83 ;
78081: LD_ADDR_EXP 137
78085: PUSH
78086: LD_INT 83
78088: ST_TO_ADDR
// tech_Track := 84 ;
78089: LD_ADDR_EXP 138
78093: PUSH
78094: LD_INT 84
78096: ST_TO_ADDR
// tech_Crane := 85 ;
78097: LD_ADDR_EXP 139
78101: PUSH
78102: LD_INT 85
78104: ST_TO_ADDR
// tech_Bulldozer := 86 ;
78105: LD_ADDR_EXP 140
78109: PUSH
78110: LD_INT 86
78112: ST_TO_ADDR
// tech_Hovercraft := 87 ;
78113: LD_ADDR_EXP 141
78117: PUSH
78118: LD_INT 87
78120: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
78121: LD_ADDR_EXP 142
78125: PUSH
78126: LD_INT 88
78128: ST_TO_ADDR
// class_mastodont := 31 ;
78129: LD_ADDR_EXP 143
78133: PUSH
78134: LD_INT 31
78136: ST_TO_ADDR
// class_horse := 21 ;
78137: LD_ADDR_EXP 144
78141: PUSH
78142: LD_INT 21
78144: ST_TO_ADDR
// end ;
78145: LD_VAR 0 1
78149: RET
// every 1 do
78150: GO 78152
78152: DISABLE
// InitGlobalVariables ; end_of_file
78153: CALL 77990 0 0
78157: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78158: LD_VAR 0 1
78162: PUSH
78163: LD_INT 200
78165: DOUBLE
78166: GREATEREQUAL
78167: IFFALSE 78175
78169: LD_INT 299
78171: DOUBLE
78172: LESSEQUAL
78173: IFTRUE 78177
78175: GO 78209
78177: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78178: LD_VAR 0 1
78182: PPUSH
78183: LD_VAR 0 2
78187: PPUSH
78188: LD_VAR 0 3
78192: PPUSH
78193: LD_VAR 0 4
78197: PPUSH
78198: LD_VAR 0 5
78202: PPUSH
78203: CALL 60935 0 5
78207: GO 78286
78209: LD_INT 300
78211: DOUBLE
78212: GREATEREQUAL
78213: IFFALSE 78221
78215: LD_INT 399
78217: DOUBLE
78218: LESSEQUAL
78219: IFTRUE 78223
78221: GO 78285
78223: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78224: LD_VAR 0 1
78228: PPUSH
78229: LD_VAR 0 2
78233: PPUSH
78234: LD_VAR 0 3
78238: PPUSH
78239: LD_VAR 0 4
78243: PPUSH
78244: LD_VAR 0 5
78248: PPUSH
78249: LD_VAR 0 6
78253: PPUSH
78254: LD_VAR 0 7
78258: PPUSH
78259: LD_VAR 0 8
78263: PPUSH
78264: LD_VAR 0 9
78268: PPUSH
78269: LD_VAR 0 10
78273: PPUSH
78274: LD_VAR 0 11
78278: PPUSH
78279: CALL 76010 0 11
78283: GO 78286
78285: POP
// end ;
78286: PPOPN 11
78288: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78289: LD_VAR 0 1
78293: PPUSH
78294: LD_VAR 0 2
78298: PPUSH
78299: LD_VAR 0 3
78303: PPUSH
78304: LD_VAR 0 4
78308: PPUSH
78309: LD_VAR 0 5
78313: PPUSH
78314: CALL 60917 0 5
// end ;
78318: PPOPN 5
78320: END
