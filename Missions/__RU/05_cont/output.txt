// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; export achievement_DestroyedHovercrafts ; export achievement_CollectedCrates ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 242 0 0
// omarStatus = 0 ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// stevensStatus = 0 ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// labDestroyed = 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  48: LD_ADDR_EXP 5
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  55: LD_ADDR_EXP 6
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  62: LD_ADDR_EXP 4
  66: PUSH
  67: LD_STRING 05_TanksIntro_1
  69: PPUSH
  70: EMPTY
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// actionTime = 0 0$00 ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  85: LD_ADDR_EXP 10
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
  93: LD_ADDR_EXP 11
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// sawArabianBase = false ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// sawApeman = false ;
 109: LD_ADDR_EXP 9
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// stevensPlaced = false ;
 117: LD_ADDR_EXP 14
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// stevensFollow = false ;
 125: LD_ADDR_EXP 15
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// stevensDepot = false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// stevensWasInDepot = false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// stevensCanExitMap = false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// cratesSpawned = 0 ;
 165: LD_ADDR_EXP 22
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// fastBreakthrough = false ;
 173: LD_ADDR_EXP 23
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// finishMissionBool = false ;
 181: LD_ADDR_EXP 24
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// omarCanExitMap = false ;
 189: LD_ADDR_EXP 20
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// arabianCanExitMap = false ;
 197: LD_ADDR_EXP 21
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// achievement_DestroyedHovercrafts = 0 ;
 205: LD_ADDR_EXP 25
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// achievement_CollectedCrates = false ;
 213: LD_ADDR_EXP 26
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// PrepareRussians ;
 221: CALL 901 0 0
// PrepareArabians ;
 225: CALL 1648 0 0
// Nef_PrepareNature ;
 229: CALL 19842 0 0
// MissionIntro ;
 233: CALL 2980 0 0
// end ; end_of_file
 237: LD_VAR 0 1
 241: RET
// export function InitMapConfig ; begin
 242: LD_INT 0
 244: PPUSH
// BaseMapConfig ;
 245: CALL 258 0 0
// MissionMapConfig ;
 249: CALL 348 0 0
// end ;
 253: LD_VAR 0 1
 257: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 258: LD_INT 0
 260: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 261: LD_ADDR_EXP 27
 265: PUSH
 266: LD_INT 4
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: LD_INT 0
 277: PUSH
 278: LD_INT 0
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: LIST
 287: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 2
 295: PUSH
 296: LD_INT 2
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: LD_INT 2
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: LIST
 309: LIST
 310: ST_TO_ADDR
// animalsAgression = 0 ;
 311: LD_ADDR_EXP 29
 315: PUSH
 316: LD_INT 0
 318: ST_TO_ADDR
// debugMode = 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// missionPrefix = 05_ ;
 327: LD_ADDR_EXP 30
 331: PUSH
 332: LD_STRING 05_
 334: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 335: LD_ADDR_EXP 31
 339: PUSH
 340: LD_STRING 04_
 342: ST_TO_ADDR
// end ;
 343: LD_VAR 0 1
 347: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 348: LD_INT 0
 350: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 ] [ Difficulty ] ;
 351: LD_ADDR_EXP 33
 355: PUSH
 356: LD_INT 3
 358: PUSH
 359: LD_INT 3
 361: PUSH
 362: LD_INT 4
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: PUSH
 370: LD_OWVAR 67
 374: ARRAY
 375: ST_TO_ADDR
// arabBreakthrough = [ 35 35$0 , 33 33$0 , 30 30$0 ] [ Difficulty ] ;
 376: LD_ADDR_EXP 34
 380: PUSH
 381: LD_INT 73500
 383: PUSH
 384: LD_INT 69300
 386: PUSH
 387: LD_INT 63000
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: PUSH
 395: LD_OWVAR 67
 399: ARRAY
 400: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 401: LD_ADDR_EXP 35
 405: PUSH
 406: LD_INT 2
 408: PUSH
 409: LD_INT 1
 411: PUSH
 412: LD_INT 6
 414: PUSH
 415: LD_INT 3
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: ST_TO_ADDR
// arabianPatrolVehiclesAmount = 1 ;
 424: LD_ADDR_EXP 36
 428: PUSH
 429: LD_INT 1
 431: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 ] [ Difficulty ] ;
 432: LD_ADDR_EXP 37
 436: PUSH
 437: LD_INT 2
 439: PUSH
 440: LD_INT 3
 442: PUSH
 443: LD_INT 3
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_OWVAR 67
 455: ARRAY
 456: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 457: LD_ADDR_EXP 38
 461: PUSH
 462: LD_INT 108
 464: PUSH
 465: LD_INT 15
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PUSH
 472: LD_INT 102
 474: PUSH
 475: LD_INT 45
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 65
 484: PUSH
 485: LD_INT 23
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 37
 494: PUSH
 495: LD_INT 28
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 32
 504: PUSH
 505: LD_INT 40
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 45
 514: PUSH
 515: LD_INT 74
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 69
 524: PUSH
 525: LD_INT 98
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 101
 534: PUSH
 535: LD_INT 101
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 117
 544: PUSH
 545: LD_INT 84
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 158
 554: PUSH
 555: LD_INT 132
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: ST_TO_ADDR
// end ;
 574: LD_VAR 0 1
 578: RET
// every 0 0$1 trigger debugMode do var i ;
 579: LD_EXP 32
 583: IFFALSE 898
 585: GO 587
 587: DISABLE
 588: LD_INT 0
 590: PPUSH
// begin enable ;
 591: ENABLE
// FogOff ( your_side ) ;
 592: LD_OWVAR 2
 596: PPUSH
 597: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 601: LD_ADDR_VAR 0 1
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_OWVAR 2
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 2
 620: PUSH
 621: LD_INT 21
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 21
 633: PUSH
 634: LD_INT 2
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PPUSH
 650: CALL_OW 69
 654: PUSH
 655: FOR_IN
 656: IFFALSE 672
// SetLives ( i , 1000 ) ;
 658: LD_VAR 0 1
 662: PPUSH
 663: LD_INT 1000
 665: PPUSH
 666: CALL_OW 234
 670: GO 655
 672: POP
 673: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 674: LD_ADDR_VAR 0 1
 678: PUSH
 679: LD_INT 22
 681: PUSH
 682: LD_OWVAR 2
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 21
 693: PUSH
 694: LD_INT 1
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PPUSH
 705: CALL_OW 69
 709: PUSH
 710: FOR_IN
 711: IFFALSE 775
// begin SetSkill ( i , skill_combat , 10 ) ;
 713: LD_VAR 0 1
 717: PPUSH
 718: LD_INT 1
 720: PPUSH
 721: LD_INT 10
 723: PPUSH
 724: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 728: LD_VAR 0 1
 732: PPUSH
 733: LD_INT 2
 735: PPUSH
 736: LD_INT 10
 738: PPUSH
 739: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 743: LD_VAR 0 1
 747: PPUSH
 748: LD_INT 3
 750: PPUSH
 751: LD_INT 10
 753: PPUSH
 754: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 758: LD_VAR 0 1
 762: PPUSH
 763: LD_INT 4
 765: PPUSH
 766: LD_INT 10
 768: PPUSH
 769: CALL_OW 237
// end ;
 773: GO 710
 775: POP
 776: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 777: LD_ADDR_VAR 0 1
 781: PUSH
 782: LD_INT 22
 784: PUSH
 785: LD_OWVAR 2
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 2
 796: PUSH
 797: LD_INT 30
 799: PUSH
 800: LD_INT 0
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 30
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: LIST
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PPUSH
 826: CALL_OW 69
 830: PUSH
 831: FOR_IN
 832: IFFALSE 896
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 834: LD_VAR 0 1
 838: PPUSH
 839: CALL_OW 274
 843: PPUSH
 844: LD_INT 1
 846: PPUSH
 847: LD_INT 9999
 849: PPUSH
 850: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 854: LD_VAR 0 1
 858: PPUSH
 859: CALL_OW 274
 863: PPUSH
 864: LD_INT 2
 866: PPUSH
 867: LD_INT 9999
 869: PPUSH
 870: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 874: LD_VAR 0 1
 878: PPUSH
 879: CALL_OW 274
 883: PPUSH
 884: LD_INT 3
 886: PPUSH
 887: LD_INT 9999
 889: PPUSH
 890: CALL_OW 277
// end ;
 894: GO 831
 896: POP
 897: POP
// end ; end_of_file
 898: PPOPN 1
 900: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 901: LD_INT 0
 903: PPUSH
// PrepareHeroes ;
 904: CALL 913 0 0
// end ;
 908: LD_VAR 0 1
 912: RET
// function PrepareHeroes ; var i , car ; begin
 913: LD_INT 0
 915: PPUSH
 916: PPUSH
 917: PPUSH
// ruCars = [ ] ;
 918: LD_ADDR_EXP 48
 922: PUSH
 923: EMPTY
 924: ST_TO_ADDR
// uc_side = 3 ;
 925: LD_ADDR_OWVAR 20
 929: PUSH
 930: LD_INT 3
 932: ST_TO_ADDR
// uc_nation = 3 ;
 933: LD_ADDR_OWVAR 21
 937: PUSH
 938: LD_INT 3
 940: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 941: LD_ADDR_EXP 39
 945: PUSH
 946: LD_STRING Burlak
 948: PPUSH
 949: LD_INT 1
 951: PPUSH
 952: LD_INT 3
 954: PPUSH
 955: CALL 8448 0 3
 959: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 960: LD_ADDR_EXP 44
 964: PUSH
 965: LD_STRING Titov
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: LD_INT 1
 973: PPUSH
 974: CALL 8448 0 3
 978: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 979: LD_ADDR_EXP 45
 983: PUSH
 984: LD_STRING Dolgov
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: LD_INT 4
 992: PPUSH
 993: CALL 8448 0 3
 997: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
 998: LD_ADDR_EXP 46
1002: PUSH
1003: LD_STRING Lipshchin
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: LD_INT 1
1011: PPUSH
1012: CALL 8448 0 3
1016: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1017: LD_ADDR_EXP 40
1021: PUSH
1022: LD_STRING Karamazov
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: LD_INT 2
1030: PPUSH
1031: CALL 8448 0 3
1035: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1036: LD_ADDR_EXP 41
1040: PUSH
1041: LD_STRING Petrovova
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 8448 0 3
1054: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1055: LD_ADDR_EXP 42
1059: PUSH
1060: LD_STRING Gleb
1062: PPUSH
1063: LD_INT 0
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL 8448 0 3
1073: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1074: LD_ADDR_EXP 43
1078: PUSH
1079: LD_STRING Petrosyan
1081: PPUSH
1082: LD_INT 0
1084: PPUSH
1085: LD_INT 4
1087: PPUSH
1088: CALL 8448 0 3
1092: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1093: LD_ADDR_EXP 47
1097: PUSH
1098: LD_STRING Platonov
1100: PPUSH
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL 8448 0 3
1111: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1112: LD_ADDR_VAR 0 2
1116: PUSH
1117: DOUBLE
1118: LD_INT 1
1120: DEC
1121: ST_TO_ADDR
1122: LD_EXP 4
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1506
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1130: LD_ADDR_OWVAR 37
1134: PUSH
1135: LD_EXP 4
1139: PUSH
1140: LD_VAR 0 2
1144: ARRAY
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1150: LD_ADDR_OWVAR 39
1154: PUSH
1155: LD_EXP 4
1159: PUSH
1160: LD_VAR 0 2
1164: ARRAY
1165: PUSH
1166: LD_INT 2
1168: ARRAY
1169: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1170: LD_ADDR_OWVAR 38
1174: PUSH
1175: LD_EXP 4
1179: PUSH
1180: LD_VAR 0 2
1184: ARRAY
1185: PUSH
1186: LD_INT 3
1188: ARRAY
1189: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1190: LD_ADDR_OWVAR 40
1194: PUSH
1195: LD_EXP 4
1199: PUSH
1200: LD_VAR 0 2
1204: ARRAY
1205: PUSH
1206: LD_INT 4
1208: ARRAY
1209: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1210: LD_ADDR_OWVAR 24
1214: PUSH
1215: LD_INT 3
1217: PPUSH
1218: LD_INT 4
1220: PPUSH
1221: CALL_OW 12
1225: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1226: LD_ADDR_OWVAR 41
1230: PUSH
1231: LD_INT 25
1233: PPUSH
1234: LD_INT 40
1236: PPUSH
1237: CALL_OW 12
1241: ST_TO_ADDR
// car := CreateVehicle ;
1242: LD_ADDR_VAR 0 3
1246: PUSH
1247: CALL_OW 45
1251: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1252: LD_ADDR_EXP 48
1256: PUSH
1257: LD_EXP 48
1261: PUSH
1262: LD_VAR 0 3
1266: ADD
1267: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1268: LD_EXP 4
1272: PUSH
1273: LD_VAR 0 2
1277: ARRAY
1278: PUSH
1279: LD_INT 5
1281: ARRAY
1282: PUSH
1283: LD_STRING Bur
1285: DOUBLE
1286: EQUAL
1287: IFTRUE 1291
1289: GO 1308
1291: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1292: LD_EXP 39
1296: PPUSH
1297: LD_VAR 0 3
1301: PPUSH
1302: CALL_OW 52
1306: GO 1484
1308: LD_STRING Kar
1310: DOUBLE
1311: EQUAL
1312: IFTRUE 1316
1314: GO 1333
1316: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1317: LD_EXP 40
1321: PPUSH
1322: LD_VAR 0 3
1326: PPUSH
1327: CALL_OW 52
1331: GO 1484
1333: LD_STRING Ptr
1335: DOUBLE
1336: EQUAL
1337: IFTRUE 1341
1339: GO 1358
1341: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1342: LD_EXP 41
1346: PPUSH
1347: LD_VAR 0 3
1351: PPUSH
1352: CALL_OW 52
1356: GO 1484
1358: LD_STRING Glb
1360: DOUBLE
1361: EQUAL
1362: IFTRUE 1366
1364: GO 1383
1366: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1367: LD_EXP 42
1371: PPUSH
1372: LD_VAR 0 3
1376: PPUSH
1377: CALL_OW 52
1381: GO 1484
1383: LD_STRING Pet
1385: DOUBLE
1386: EQUAL
1387: IFTRUE 1391
1389: GO 1408
1391: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1392: LD_EXP 43
1396: PPUSH
1397: LD_VAR 0 3
1401: PPUSH
1402: CALL_OW 52
1406: GO 1484
1408: LD_STRING Dol
1410: DOUBLE
1411: EQUAL
1412: IFTRUE 1416
1414: GO 1433
1416: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1417: LD_EXP 45
1421: PPUSH
1422: LD_VAR 0 3
1426: PPUSH
1427: CALL_OW 52
1431: GO 1484
1433: LD_STRING Lip
1435: DOUBLE
1436: EQUAL
1437: IFTRUE 1441
1439: GO 1458
1441: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1442: LD_EXP 46
1446: PPUSH
1447: LD_VAR 0 3
1451: PPUSH
1452: CALL_OW 52
1456: GO 1484
1458: LD_STRING Tit
1460: DOUBLE
1461: EQUAL
1462: IFTRUE 1466
1464: GO 1483
1466: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1467: LD_EXP 44
1471: PPUSH
1472: LD_VAR 0 3
1476: PPUSH
1477: CALL_OW 52
1481: GO 1484
1483: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1484: LD_VAR 0 3
1488: PPUSH
1489: LD_INT 251
1491: PPUSH
1492: LD_INT 800
1494: PPUSH
1495: CALL_OW 12
1499: PPUSH
1500: CALL_OW 234
// end ;
1504: GO 1127
1506: POP
1507: POP
// for i in ruCars do
1508: LD_ADDR_VAR 0 2
1512: PUSH
1513: LD_EXP 48
1517: PUSH
1518: FOR_IN
1519: IFFALSE 1538
// PlaceUnitArea ( i , ru_place2 , false ) ;
1521: LD_VAR 0 2
1525: PPUSH
1526: LD_INT 18
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
1536: GO 1518
1538: POP
1539: POP
// RevealFogArea ( 3 , co_vidi ) ;
1540: LD_INT 3
1542: PPUSH
1543: LD_INT 19
1545: PPUSH
1546: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1550: LD_EXP 48
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1562: LD_INT 4
1564: PPUSH
1565: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1569: LD_EXP 39
1573: PPUSH
1574: CALL_OW 310
1578: PPUSH
1579: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1583: LD_INT 3
1585: PPUSH
1586: LD_INT 22
1588: PUSH
1589: LD_INT 3
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 21
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PPUSH
1610: CALL_OW 70
1614: PUSH
1615: LD_INT 5
1617: LESS
1618: IFFALSE 1643
// begin wait ( 0 0$1 ) ;
1620: LD_INT 35
1622: PPUSH
1623: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1627: LD_EXP 39
1631: PPUSH
1632: CALL_OW 310
1636: PPUSH
1637: CALL_OW 85
// end ;
1641: GO 1583
// end ; end_of_file
1643: LD_VAR 0 1
1647: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts , arabianPatrolTroops ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1648: LD_INT 0
1650: PPUSH
// arabianUnitsInBase = [ ] ;
1651: LD_ADDR_EXP 51
1655: PUSH
1656: EMPTY
1657: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1658: LD_ADDR_EXP 53
1662: PUSH
1663: EMPTY
1664: ST_TO_ADDR
// arabianPatrolTroops = [ ] ;
1665: LD_ADDR_EXP 54
1669: PUSH
1670: EMPTY
1671: ST_TO_ADDR
// arabLeftExit = true ;
1672: LD_ADDR_EXP 55
1676: PUSH
1677: LD_INT 1
1679: ST_TO_ADDR
// PrepareHeroes ;
1680: CALL 1713 0 0
// PrepareBuildings ;
1684: CALL 1779 0 0
// PrepareUnits ;
1688: CALL 2131 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1692: LD_EXP 36
1696: PPUSH
1697: LD_INT 42
1699: PPUSH
1700: CALL 2668 0 2
// PrepareArabianHovercraft ;
1704: CALL 2827 0 0
// end ;
1708: LD_VAR 0 1
1712: RET
// function PrepareHeroes ; begin
1713: LD_INT 0
1715: PPUSH
// uc_side = 2 ;
1716: LD_ADDR_OWVAR 20
1720: PUSH
1721: LD_INT 2
1723: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1724: LD_ADDR_EXP 49
1728: PUSH
1729: LD_STRING Heike
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL 8448 0 3
1742: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1743: LD_ADDR_EXP 50
1747: PUSH
1748: LD_STRING Omar
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: LD_INT 11
1756: PPUSH
1757: CALL 8448 0 3
1761: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1762: LD_EXP 50
1766: PPUSH
1767: LD_INT 1
1769: PPUSH
1770: CALL_OW 52
// end ;
1774: LD_VAR 0 1
1778: RET
// function PrepareBuildings ; var depot ; begin
1779: LD_INT 0
1781: PPUSH
1782: PPUSH
// uc_side = 2 ;
1783: LD_ADDR_OWVAR 20
1787: PUSH
1788: LD_INT 2
1790: ST_TO_ADDR
// uc_nation = nation_arabian ;
1791: LD_ADDR_OWVAR 21
1795: PUSH
1796: LD_INT 2
1798: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1799: LD_ADDR_OWVAR 43
1803: PUSH
1804: LD_EXP 33
1808: ST_TO_ADDR
// bc_type = b_breastwork ;
1809: LD_ADDR_OWVAR 42
1813: PUSH
1814: LD_INT 31
1816: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1817: LD_INT 118
1819: PPUSH
1820: LD_INT 63
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1830: LD_INT 120
1832: PPUSH
1833: LD_INT 66
1835: PPUSH
1836: LD_INT 1
1838: PPUSH
1839: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1843: LD_INT 123
1845: PPUSH
1846: LD_INT 73
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL_OW 47
// if Difficulty = 2 then
1856: LD_OWVAR 67
1860: PUSH
1861: LD_INT 2
1863: EQUAL
1864: IFFALSE 1879
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1866: LD_INT 145
1868: PPUSH
1869: LD_INT 83
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 47
// if Difficulty = 3 then
1879: LD_OWVAR 67
1883: PUSH
1884: LD_INT 3
1886: EQUAL
1887: IFFALSE 1915
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1889: LD_INT 145
1891: PPUSH
1892: LD_INT 83
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1902: LD_INT 151
1904: PPUSH
1905: LD_INT 81
1907: PPUSH
1908: LD_INT 5
1910: PPUSH
1911: CALL_OW 47
// end ; bc_type = b_depot ;
1915: LD_ADDR_OWVAR 42
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1923: LD_ADDR_VAR 0 2
1927: PUSH
1928: LD_INT 124
1930: PPUSH
1931: LD_INT 60
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL_OW 47
1941: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1942: LD_VAR 0 2
1946: PPUSH
1947: CALL_OW 274
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: LD_INT 3000
1957: PPUSH
1958: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1962: LD_INT 131
1964: PPUSH
1965: LD_INT 51
1967: PPUSH
1968: LD_INT 2
1970: PPUSH
1971: CALL_OW 441
// bc_type = b_oil_mine ;
1975: LD_ADDR_OWVAR 42
1979: PUSH
1980: LD_INT 29
1982: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
1983: LD_INT 131
1985: PPUSH
1986: LD_INT 51
1988: PPUSH
1989: LD_INT 2
1991: PPUSH
1992: CALL_OW 47
// case Difficulty of 1 :
1996: LD_OWVAR 67
2000: PUSH
2001: LD_INT 1
2003: DOUBLE
2004: EQUAL
2005: IFTRUE 2009
2007: GO 2025
2009: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2010: LD_INT 48
2012: PPUSH
2013: LD_INT 2
2015: PPUSH
2016: LD_INT 2
2018: PPUSH
2019: CALL_OW 322
// end ; 2 :
2023: GO 2126
2025: LD_INT 2
2027: DOUBLE
2028: EQUAL
2029: IFTRUE 2033
2031: GO 2062
2033: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2034: LD_INT 48
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: LD_INT 2
2042: PPUSH
2043: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2047: LD_INT 51
2049: PPUSH
2050: LD_INT 2
2052: PPUSH
2053: LD_INT 2
2055: PPUSH
2056: CALL_OW 322
// end ; 3 :
2060: GO 2126
2062: LD_INT 3
2064: DOUBLE
2065: EQUAL
2066: IFTRUE 2070
2068: GO 2125
2070: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2071: LD_INT 48
2073: PPUSH
2074: LD_INT 2
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2084: LD_INT 51
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: LD_INT 2
2092: PPUSH
2093: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2097: LD_INT 49
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 2
2105: PPUSH
2106: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2110: LD_INT 52
2112: PPUSH
2113: LD_INT 2
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: CALL_OW 322
// end ; end ;
2123: GO 2126
2125: POP
// end ;
2126: LD_VAR 0 1
2130: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2131: LD_INT 0
2133: PPUSH
2134: PPUSH
2135: PPUSH
2136: PPUSH
// uc_side = 2 ;
2137: LD_ADDR_OWVAR 20
2141: PUSH
2142: LD_INT 2
2144: ST_TO_ADDR
// uc_nation = 2 ;
2145: LD_ADDR_OWVAR 21
2149: PUSH
2150: LD_INT 2
2152: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2153: LD_ADDR_VAR 0 4
2157: PUSH
2158: LD_INT 22
2160: PUSH
2161: LD_INT 2
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 30
2170: PUSH
2171: LD_INT 31
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PPUSH
2182: CALL_OW 69
2186: PUSH
2187: FOR_IN
2188: IFFALSE 2244
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2190: LD_INT 0
2192: PPUSH
2193: LD_EXP 33
2197: PPUSH
2198: CALL_OW 381
// unit = CreateHuman ;
2202: LD_ADDR_VAR 0 3
2206: PUSH
2207: CALL_OW 44
2211: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2212: LD_VAR 0 3
2216: PPUSH
2217: LD_VAR 0 4
2221: PPUSH
2222: CALL 9048 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2226: LD_ADDR_EXP 51
2230: PUSH
2231: LD_EXP 51
2235: PUSH
2236: LD_VAR 0 3
2240: ADD
2241: ST_TO_ADDR
// end ;
2242: GO 2187
2244: POP
2245: POP
// for i := 1 to arabianUnits [ 1 ] do
2246: LD_ADDR_VAR 0 2
2250: PUSH
2251: DOUBLE
2252: LD_INT 1
2254: DEC
2255: ST_TO_ADDR
2256: LD_EXP 35
2260: PUSH
2261: LD_INT 1
2263: ARRAY
2264: PUSH
2265: FOR_TO
2266: IFFALSE 2323
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2268: LD_INT 0
2270: PPUSH
2271: LD_EXP 33
2275: PPUSH
2276: CALL_OW 381
// unit = CreateHuman ;
2280: LD_ADDR_VAR 0 3
2284: PUSH
2285: CALL_OW 44
2289: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2290: LD_VAR 0 3
2294: PPUSH
2295: LD_INT 38
2297: PPUSH
2298: LD_INT 0
2300: PPUSH
2301: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2305: LD_ADDR_EXP 51
2309: PUSH
2310: LD_EXP 51
2314: PUSH
2315: LD_VAR 0 3
2319: ADD
2320: ST_TO_ADDR
// end ;
2321: GO 2265
2323: POP
2324: POP
// for i := 1 to arabianUnits [ 2 ] do
2325: LD_ADDR_VAR 0 2
2329: PUSH
2330: DOUBLE
2331: LD_INT 1
2333: DEC
2334: ST_TO_ADDR
2335: LD_EXP 35
2339: PUSH
2340: LD_INT 2
2342: ARRAY
2343: PUSH
2344: FOR_TO
2345: IFFALSE 2402
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2347: LD_INT 0
2349: PPUSH
2350: LD_EXP 33
2354: PPUSH
2355: CALL_OW 382
// unit = CreateHuman ;
2359: LD_ADDR_VAR 0 3
2363: PUSH
2364: CALL_OW 44
2368: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2369: LD_VAR 0 3
2373: PPUSH
2374: LD_INT 38
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2384: LD_ADDR_EXP 51
2388: PUSH
2389: LD_EXP 51
2393: PUSH
2394: LD_VAR 0 3
2398: ADD
2399: ST_TO_ADDR
// end ;
2400: GO 2344
2402: POP
2403: POP
// for i := 1 to arabianUnits [ 3 ] do
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: DOUBLE
2410: LD_INT 1
2412: DEC
2413: ST_TO_ADDR
2414: LD_EXP 35
2418: PUSH
2419: LD_INT 3
2421: ARRAY
2422: PUSH
2423: FOR_TO
2424: IFFALSE 2481
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2426: LD_INT 0
2428: PPUSH
2429: LD_EXP 33
2433: PPUSH
2434: CALL_OW 383
// unit = CreateHuman ;
2438: LD_ADDR_VAR 0 3
2442: PUSH
2443: CALL_OW 44
2447: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2448: LD_VAR 0 3
2452: PPUSH
2453: LD_INT 38
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2463: LD_ADDR_EXP 51
2467: PUSH
2468: LD_EXP 51
2472: PUSH
2473: LD_VAR 0 3
2477: ADD
2478: ST_TO_ADDR
// end ;
2479: GO 2423
2481: POP
2482: POP
// for i := 1 to arabianUnits [ 4 ] do
2483: LD_ADDR_VAR 0 2
2487: PUSH
2488: DOUBLE
2489: LD_INT 1
2491: DEC
2492: ST_TO_ADDR
2493: LD_EXP 35
2497: PUSH
2498: LD_INT 4
2500: ARRAY
2501: PUSH
2502: FOR_TO
2503: IFFALSE 2560
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2505: LD_INT 0
2507: PPUSH
2508: LD_EXP 33
2512: PPUSH
2513: CALL_OW 384
// unit = CreateHuman ;
2517: LD_ADDR_VAR 0 3
2521: PUSH
2522: CALL_OW 44
2526: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2527: LD_VAR 0 3
2531: PPUSH
2532: LD_INT 38
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2542: LD_ADDR_EXP 51
2546: PUSH
2547: LD_EXP 51
2551: PUSH
2552: LD_VAR 0 3
2556: ADD
2557: ST_TO_ADDR
// end ;
2558: GO 2502
2560: POP
2561: POP
// end ;
2562: LD_VAR 0 1
2566: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2567: LD_INT 0
2569: PPUSH
2570: PPUSH
2571: PPUSH
// uc_side = 2 ;
2572: LD_ADDR_OWVAR 20
2576: PUSH
2577: LD_INT 2
2579: ST_TO_ADDR
// uc_nation = 2 ;
2580: LD_ADDR_OWVAR 21
2584: PUSH
2585: LD_INT 2
2587: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2588: LD_ADDR_VAR 0 2
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_EXP 37
2602: PUSH
2603: FOR_TO
2604: IFFALSE 2661
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2606: LD_INT 0
2608: PPUSH
2609: LD_EXP 33
2613: PPUSH
2614: CALL_OW 381
// unit = CreateHuman ;
2618: LD_ADDR_VAR 0 3
2622: PUSH
2623: CALL_OW 44
2627: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2628: LD_VAR 0 3
2632: PPUSH
2633: LD_INT 45
2635: PPUSH
2636: LD_INT 0
2638: PPUSH
2639: CALL_OW 49
// arabianPatrolTroops = arabianPatrolTroops ^ unit ;
2643: LD_ADDR_EXP 54
2647: PUSH
2648: LD_EXP 54
2652: PUSH
2653: LD_VAR 0 3
2657: ADD
2658: ST_TO_ADDR
// end ;
2659: GO 2603
2661: POP
2662: POP
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
// uc_side = 2 ;
2673: LD_ADDR_OWVAR 20
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// uc_nation = 2 ;
2681: LD_ADDR_OWVAR 21
2685: PUSH
2686: LD_INT 2
2688: ST_TO_ADDR
// for i := 1 to amount do
2689: LD_ADDR_VAR 0 4
2693: PUSH
2694: DOUBLE
2695: LD_INT 1
2697: DEC
2698: ST_TO_ADDR
2699: LD_VAR 0 1
2703: PUSH
2704: FOR_TO
2705: IFFALSE 2820
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2707: LD_INT 14
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: LD_INT 1
2715: PPUSH
2716: LD_INT 26
2718: PUSH
2719: LD_INT 25
2721: PUSH
2722: LD_INT 27
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 1
2732: PPUSH
2733: LD_INT 3
2735: PPUSH
2736: CALL_OW 12
2740: ARRAY
2741: PPUSH
2742: LD_INT 100
2744: PPUSH
2745: CALL 28156 0 5
// veh = CreateVehicle ;
2749: LD_ADDR_VAR 0 5
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2759: LD_ADDR_EXP 52
2763: PUSH
2764: LD_EXP 52
2768: PUSH
2769: LD_VAR 0 5
2773: ADD
2774: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2775: LD_VAR 0 5
2779: PPUSH
2780: LD_VAR 0 2
2784: PPUSH
2785: LD_INT 0
2787: PPUSH
2788: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2792: LD_INT 0
2794: PPUSH
2795: LD_EXP 33
2799: PPUSH
2800: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2804: CALL_OW 44
2808: PPUSH
2809: LD_VAR 0 5
2813: PPUSH
2814: CALL_OW 52
// end ;
2818: GO 2704
2820: POP
2821: POP
// end ;
2822: LD_VAR 0 3
2826: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2827: LD_INT 0
2829: PPUSH
2830: PPUSH
2831: PPUSH
// uc_side = 2 ;
2832: LD_ADDR_OWVAR 20
2836: PUSH
2837: LD_INT 2
2839: ST_TO_ADDR
// uc_nation = 2 ;
2840: LD_ADDR_OWVAR 21
2844: PUSH
2845: LD_INT 2
2847: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2848: LD_ADDR_VAR 0 2
2852: PUSH
2853: DOUBLE
2854: LD_INT 1
2856: DEC
2857: ST_TO_ADDR
2858: LD_EXP 36
2862: PUSH
2863: FOR_TO
2864: IFFALSE 2973
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2866: LD_INT 11
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: LD_INT 1
2874: PPUSH
2875: LD_INT 24
2877: PUSH
2878: LD_INT 23
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 1
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 12
2895: ARRAY
2896: PPUSH
2897: LD_INT 100
2899: PPUSH
2900: CALL 28156 0 5
// veh = CreateVehicle ;
2904: LD_ADDR_VAR 0 3
2908: PUSH
2909: CALL_OW 45
2913: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2914: LD_ADDR_EXP 53
2918: PUSH
2919: LD_EXP 53
2923: PUSH
2924: LD_VAR 0 3
2928: ADD
2929: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2930: LD_VAR 0 3
2934: PPUSH
2935: LD_INT 47
2937: PPUSH
2938: LD_INT 0
2940: PPUSH
2941: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2945: LD_INT 0
2947: PPUSH
2948: LD_EXP 33
2952: PPUSH
2953: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2957: CALL_OW 44
2961: PPUSH
2962: LD_VAR 0 3
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: GO 2863
2973: POP
2974: POP
// end ; end_of_file
2975: LD_VAR 0 1
2979: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
2980: LD_INT 0
2982: PPUSH
2983: PPUSH
2984: PPUSH
2985: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
2986: LD_ADDR_VAR 0 3
2990: PUSH
2991: LD_INT 66
2993: PUSH
2994: LD_INT 87
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: LD_INT 66
3003: PUSH
3004: LD_INT 86
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 67
3013: PUSH
3014: LD_INT 86
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 69
3023: PUSH
3024: LD_INT 87
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 70
3033: PUSH
3034: LD_INT 88
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 71
3043: PUSH
3044: LD_INT 89
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PUSH
3051: LD_INT 72
3053: PUSH
3054: LD_INT 90
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 72
3063: PUSH
3064: LD_INT 91
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3081: LD_INT 280
3083: PPUSH
3084: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3088: LD_EXP 39
3092: PPUSH
3093: LD_STRING DStart-Bur-1
3095: PPUSH
3096: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3100: LD_EXP 47
3104: PPUSH
3105: LD_STRING DStart-Pla-1
3107: PPUSH
3108: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3112: LD_EXP 39
3116: PPUSH
3117: LD_STRING DStart-Bur-2
3119: PPUSH
3120: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3124: LD_EXP 47
3128: PPUSH
3129: LD_STRING DStart-Pla-2
3131: PPUSH
3132: CALL_OW 94
// x = 0 ;
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3144: LD_ADDR_VAR 0 2
3148: PUSH
3149: LD_INT 22
3151: PUSH
3152: LD_INT 3
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 21
3161: PUSH
3162: LD_INT 1
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PPUSH
3173: CALL_OW 69
3177: PUSH
3178: FOR_IN
3179: IFFALSE 3267
// begin ComExitVehicle ( unit ) ;
3181: LD_VAR 0 2
3185: PPUSH
3186: CALL_OW 121
// wait ( 0 0$1 ) ;
3190: LD_INT 35
3192: PPUSH
3193: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3197: LD_VAR 0 2
3201: PPUSH
3202: LD_VAR 0 3
3206: PUSH
3207: LD_VAR 0 4
3211: ARRAY
3212: PUSH
3213: LD_INT 1
3215: ARRAY
3216: PPUSH
3217: LD_VAR 0 3
3221: PUSH
3222: LD_VAR 0 4
3226: ARRAY
3227: PUSH
3228: LD_INT 2
3230: ARRAY
3231: PPUSH
3232: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 69
3243: PPUSH
3244: LD_INT 96
3246: PPUSH
3247: CALL_OW 178
// x = x + 1 ;
3251: LD_ADDR_VAR 0 4
3255: PUSH
3256: LD_VAR 0 4
3260: PUSH
3261: LD_INT 1
3263: PLUS
3264: ST_TO_ADDR
// end ;
3265: GO 3178
3267: POP
3268: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3269: LD_EXP 39
3273: PPUSH
3274: CALL_OW 87
// x = 0 ;
3278: LD_ADDR_VAR 0 4
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3286: LD_ADDR_VAR 0 2
3290: PUSH
3291: LD_INT 22
3293: PUSH
3294: LD_INT 3
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 21
3303: PUSH
3304: LD_INT 1
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PPUSH
3315: CALL_OW 69
3319: PUSH
3320: FOR_IN
3321: IFFALSE 3393
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3323: LD_VAR 0 2
3327: PPUSH
3328: LD_VAR 0 3
3332: PUSH
3333: LD_VAR 0 4
3337: ARRAY
3338: PUSH
3339: LD_INT 1
3341: ARRAY
3342: PPUSH
3343: LD_VAR 0 3
3347: PUSH
3348: LD_VAR 0 4
3352: ARRAY
3353: PUSH
3354: LD_INT 2
3356: ARRAY
3357: PPUSH
3358: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3362: LD_VAR 0 2
3366: PPUSH
3367: LD_INT 69
3369: PPUSH
3370: LD_INT 96
3372: PPUSH
3373: CALL_OW 178
// x = x + 1 ;
3377: LD_ADDR_VAR 0 4
3381: PUSH
3382: LD_VAR 0 4
3386: PUSH
3387: LD_INT 1
3389: PLUS
3390: ST_TO_ADDR
// end ;
3391: GO 3320
3393: POP
3394: POP
// wait ( 0 0$1 ) ;
3395: LD_INT 35
3397: PPUSH
3398: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3402: LD_EXP 39
3406: PPUSH
3407: LD_INT 70
3409: PPUSH
3410: LD_INT 90
3412: PPUSH
3413: CALL_OW 297
3417: PUSH
3418: LD_INT 7
3420: LESS
3421: PUSH
3422: LD_EXP 40
3426: PPUSH
3427: LD_INT 70
3429: PPUSH
3430: LD_INT 90
3432: PPUSH
3433: CALL_OW 297
3437: PUSH
3438: LD_INT 7
3440: LESS
3441: AND
3442: PUSH
3443: LD_EXP 41
3447: PPUSH
3448: LD_INT 70
3450: PPUSH
3451: LD_INT 90
3453: PPUSH
3454: CALL_OW 297
3458: PUSH
3459: LD_INT 7
3461: LESS
3462: AND
3463: PUSH
3464: LD_EXP 42
3468: PPUSH
3469: LD_INT 70
3471: PPUSH
3472: LD_INT 90
3474: PPUSH
3475: CALL_OW 297
3479: PUSH
3480: LD_INT 7
3482: LESS
3483: AND
3484: PUSH
3485: LD_EXP 46
3489: PPUSH
3490: LD_INT 70
3492: PPUSH
3493: LD_INT 90
3495: PPUSH
3496: CALL_OW 297
3500: PUSH
3501: LD_INT 7
3503: LESS
3504: AND
3505: IFFALSE 3269
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3507: LD_EXP 40
3511: PPUSH
3512: LD_STRING DDoubts-Kar-1
3514: PPUSH
3515: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3519: LD_EXP 41
3523: PPUSH
3524: LD_STRING DDoubts-Ptr-1
3526: PPUSH
3527: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-1 ) ;
3531: LD_EXP 39
3535: PPUSH
3536: LD_STRING DDoubts-Bur-1
3538: PPUSH
3539: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3543: LD_EXP 40
3547: PPUSH
3548: LD_STRING DDoubts-Kar-2
3550: PPUSH
3551: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3555: LD_EXP 42
3559: PPUSH
3560: LD_STRING DDoubts-Glb-2
3562: PPUSH
3563: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3567: LD_EXP 39
3571: PPUSH
3572: LD_STRING DDoubts-Bur-2
3574: PPUSH
3575: CALL_OW 88
// InGameOff ;
3579: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3583: LD_STRING MBegin
3585: PPUSH
3586: CALL_OW 337
// SaveForQuickRestart ;
3590: CALL_OW 22
// BuildBase ;
3594: CALL 10578 0 0
// end ;
3598: LD_VAR 0 1
3602: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3603: LD_EXP 8
3607: NOT
3608: IFFALSE 3854
3610: GO 3612
3612: DISABLE
3613: LD_INT 0
3615: PPUSH
// begin enable ;
3616: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ f_side , 2 ] ) do
3617: LD_ADDR_VAR 0 1
3621: PUSH
3622: LD_INT 34
3624: PPUSH
3625: LD_INT 22
3627: PUSH
3628: LD_INT 2
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PPUSH
3635: CALL_OW 70
3639: PUSH
3640: FOR_IN
3641: IFFALSE 3852
// if See ( 3 , unit ) then
3643: LD_INT 3
3645: PPUSH
3646: LD_VAR 0 1
3650: PPUSH
3651: CALL_OW 292
3655: IFFALSE 3850
// begin sawArabianBase = true ;
3657: LD_ADDR_EXP 8
3661: PUSH
3662: LD_INT 1
3664: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3665: LD_VAR 0 1
3669: PPUSH
3670: CALL_OW 87
// DialogueOn ;
3674: CALL_OW 6
// if IsOk ( Lipshchin ) then
3678: LD_EXP 46
3682: PPUSH
3683: CALL_OW 302
3687: IFFALSE 3701
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3689: LD_EXP 46
3693: PPUSH
3694: LD_STRING DArabs-RSol1-1
3696: PPUSH
3697: CALL_OW 88
// if IsOk ( Karamazov ) then
3701: LD_EXP 40
3705: PPUSH
3706: CALL_OW 302
3710: IFFALSE 3724
// Say ( Karamazov , DArabs-Kar-1 ) ;
3712: LD_EXP 40
3716: PPUSH
3717: LD_STRING DArabs-Kar-1
3719: PPUSH
3720: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3724: LD_EXP 39
3728: PPUSH
3729: LD_STRING DArabs-Bur-1
3731: PPUSH
3732: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3736: LD_EXP 47
3740: PPUSH
3741: LD_STRING DArabs-Pla-1
3743: PPUSH
3744: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3748: LD_EXP 50
3752: PPUSH
3753: LD_STRING DSurrender-Omar-1
3755: PPUSH
3756: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3760: LD_STRING QSurrender
3762: PPUSH
3763: CALL_OW 97
3767: PUSH
3768: LD_INT 1
3770: DOUBLE
3771: EQUAL
3772: IFTRUE 3776
3774: GO 3795
3776: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3777: LD_EXP 39
3781: PPUSH
3782: LD_STRING DQrSurrender#1-Bur-1
3784: PPUSH
3785: CALL_OW 88
// Lose_Survive ;
3789: CALL 17221 0 0
// end ; 2 :
3793: GO 3842
3795: LD_INT 2
3797: DOUBLE
3798: EQUAL
3799: IFTRUE 3803
3801: GO 3818
3803: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3804: LD_EXP 39
3808: PPUSH
3809: LD_STRING DQrSurrender#2-Bur-1
3811: PPUSH
3812: CALL_OW 88
3816: GO 3842
3818: LD_INT 3
3820: DOUBLE
3821: EQUAL
3822: IFTRUE 3826
3824: GO 3841
3826: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3827: LD_EXP 39
3831: PPUSH
3832: LD_STRING DQrSurrender#3-Bur-1
3834: PPUSH
3835: CALL_OW 88
3839: GO 3842
3841: POP
// DialogueOff ;
3842: CALL_OW 7
// exit ;
3846: POP
3847: POP
3848: GO 3854
// end ;
3850: GO 3640
3852: POP
3853: POP
// end ;
3854: PPOPN 1
3856: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3857: LD_EXP 9
3861: NOT
3862: PUSH
3863: LD_INT 1
3865: PPUSH
3866: LD_INT 3
3868: PPUSH
3869: CALL_OW 321
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: AND
3878: IFFALSE 4243
3880: GO 3882
3882: DISABLE
3883: LD_INT 0
3885: PPUSH
3886: PPUSH
// begin enable ;
3887: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3888: LD_ADDR_VAR 0 1
3892: PUSH
3893: LD_INT 22
3895: PUSH
3896: LD_INT 0
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 25
3905: PUSH
3906: LD_INT 12
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PPUSH
3917: CALL_OW 69
3921: PUSH
3922: FOR_IN
3923: IFFALSE 4241
// if See ( 3 , unit ) then
3925: LD_INT 3
3927: PPUSH
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 292
3937: IFFALSE 4239
// begin sawApeman = true ;
3939: LD_ADDR_EXP 9
3943: PUSH
3944: LD_INT 1
3946: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3947: LD_ADDR_VAR 0 2
3951: PUSH
3952: LD_INT 22
3954: PUSH
3955: LD_INT 3
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: LD_INT 21
3964: PUSH
3965: LD_INT 1
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: LD_INT 26
3974: PUSH
3975: LD_INT 1
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 50
3984: PUSH
3985: EMPTY
3986: LIST
3987: PUSH
3988: LD_INT 2
3990: PUSH
3991: LD_INT 25
3993: PUSH
3994: LD_INT 1
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: LD_INT 25
4003: PUSH
4004: LD_INT 2
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: LD_INT 25
4013: PUSH
4014: LD_INT 3
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: LD_INT 25
4023: PUSH
4024: LD_INT 4
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: PPUSH
4045: CALL_OW 69
4049: PPUSH
4050: LD_VAR 0 1
4054: PPUSH
4055: CALL_OW 74
4059: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4060: LD_VAR 0 1
4064: PPUSH
4065: CALL_OW 87
// DialogueOn ;
4069: CALL_OW 6
// if nearUnit = Burlak then
4073: LD_VAR 0 2
4077: PUSH
4078: LD_EXP 39
4082: EQUAL
4083: IFFALSE 4099
// Say ( Burlak , DApeSpot-Bur-1a ) else
4085: LD_EXP 39
4089: PPUSH
4090: LD_STRING DApeSpot-Bur-1a
4092: PPUSH
4093: CALL_OW 88
4097: GO 4111
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4099: LD_VAR 0 2
4103: PPUSH
4104: LD_STRING DApeSpot-RSol1-1
4106: PPUSH
4107: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4111: LD_EXP 39
4115: PPUSH
4116: LD_STRING DApeSpot-Bur-1
4118: PPUSH
4119: CALL_OW 88
// if IsOK ( Petrosyan ) then
4123: LD_EXP 43
4127: PPUSH
4128: CALL_OW 302
4132: IFFALSE 4231
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4134: LD_EXP 43
4138: PPUSH
4139: LD_STRING DApeSpot-Pty-1
4141: PPUSH
4142: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4146: LD_INT 22
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 21
4158: PUSH
4159: LD_INT 3
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 2
4168: PUSH
4169: LD_INT 30
4171: PUSH
4172: LD_INT 6
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 30
4181: PUSH
4182: LD_INT 7
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: LIST
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 69
4203: IFFALSE 4219
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4205: LD_EXP 43
4209: PPUSH
4210: LD_STRING DApeSpot-Pty-1a
4212: PPUSH
4213: CALL_OW 88
4217: GO 4231
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4219: LD_EXP 43
4223: PPUSH
4224: LD_STRING DApeSpot-Pty-1b
4226: PPUSH
4227: CALL_OW 88
// end ; DialogueOff ;
4231: CALL_OW 7
// exit ;
4235: POP
4236: POP
4237: GO 4243
// end ;
4239: GO 3922
4241: POP
4242: POP
// end ;
4243: PPOPN 2
4245: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) do
4246: LD_EXP 43
4250: PPUSH
4251: CALL_OW 302
4255: PUSH
4256: LD_INT 22
4258: PUSH
4259: LD_INT 3
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PUSH
4266: LD_INT 21
4268: PUSH
4269: LD_INT 3
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PUSH
4276: LD_INT 2
4278: PUSH
4279: LD_INT 30
4281: PUSH
4282: LD_INT 6
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: PUSH
4289: LD_INT 30
4291: PUSH
4292: LD_INT 7
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: LIST
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: NOT
4314: AND
4315: IFFALSE 4332
4317: GO 4319
4319: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4320: LD_EXP 43
4324: PPUSH
4325: LD_STRING DApeLab-Pty-1
4327: PPUSH
4328: CALL_OW 88
4332: END
// export function Dial_ResearchApeLang ; begin
4333: LD_INT 0
4335: PPUSH
// DialogueOn ;
4336: CALL_OW 6
// if IsOK ( Petrosyan ) then
4340: LD_EXP 43
4344: PPUSH
4345: CALL_OW 302
4349: IFFALSE 4435
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4351: LD_EXP 43
4355: PPUSH
4356: LD_STRING DApeLangCompl-Pty-1
4358: PPUSH
4359: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4363: LD_EXP 39
4367: PPUSH
4368: LD_STRING DApeLangCompl-Bur-1
4370: PPUSH
4371: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4375: LD_EXP 43
4379: PPUSH
4380: LD_STRING DApeLangCompl-Pty-2
4382: PPUSH
4383: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4387: LD_EXP 39
4391: PPUSH
4392: LD_STRING DApeLangCompl-Bur-2
4394: PPUSH
4395: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4399: LD_EXP 43
4403: PPUSH
4404: LD_STRING DApeLangCompl-Pty-3
4406: PPUSH
4407: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4411: LD_EXP 39
4415: PPUSH
4416: LD_STRING DApeLangCompl-Bur-3
4418: PPUSH
4419: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4423: LD_EXP 43
4427: PPUSH
4428: LD_STRING DApeLangCompl-Pty-4
4430: PPUSH
4431: CALL_OW 88
// end ; DialogueOff ;
4435: CALL_OW 7
// end ;
4439: LD_VAR 0 1
4443: RET
// export function Dial_TameApe ( sci ) ; begin
4444: LD_INT 0
4446: PPUSH
// dial_tameApeBlocker = true ;
4447: LD_ADDR_EXP 10
4451: PUSH
4452: LD_INT 1
4454: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4455: LD_VAR 0 1
4459: PPUSH
4460: CALL_OW 258
4464: PUSH
4465: LD_INT 1
4467: EQUAL
4468: IFFALSE 4484
// Say ( sci , DApeTame-Sci1-1 ) else
4470: LD_VAR 0 1
4474: PPUSH
4475: LD_STRING DApeTame-Sci1-1
4477: PPUSH
4478: CALL_OW 88
4482: GO 4648
// begin if IsOK ( Petrosyan ) then
4484: LD_EXP 43
4488: PPUSH
4489: CALL_OW 302
4493: IFFALSE 4509
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4495: LD_EXP 43
4499: PPUSH
4500: LD_STRING DApeTame-Sci1-1
4502: PPUSH
4503: CALL_OW 88
4507: GO 4648
// if IsOK ( Dolgov ) then
4509: LD_EXP 45
4513: PPUSH
4514: CALL_OW 302
4518: IFFALSE 4534
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4520: LD_EXP 45
4524: PPUSH
4525: LD_STRING DApeTame-Sci1-1
4527: PPUSH
4528: CALL_OW 88
4532: GO 4648
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4534: LD_INT 22
4536: PUSH
4537: LD_INT 3
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 21
4546: PUSH
4547: LD_INT 1
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 26
4556: PUSH
4557: LD_INT 1
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 50
4566: PUSH
4567: EMPTY
4568: LIST
4569: PUSH
4570: LD_INT 2
4572: PUSH
4573: LD_INT 25
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 25
4585: PUSH
4586: LD_INT 2
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 25
4595: PUSH
4596: LD_INT 3
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 25
4605: PUSH
4606: LD_INT 4
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PPUSH
4627: CALL_OW 69
4631: PPUSH
4632: LD_STRING DApeTame-Sci1-1
4634: PPUSH
4635: LD_STRING 
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: LD_INT 1
4643: PPUSH
4644: CALL 8765 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4648: LD_EXP 39
4652: PPUSH
4653: LD_STRING DApeTame-Bur-1
4655: PPUSH
4656: CALL_OW 88
// end ;
4660: LD_VAR 0 2
4664: RET
// export function Dial_ApeEnterLab ; begin
4665: LD_INT 0
4667: PPUSH
// dial_apeEnterLabBlocker = true ;
4668: LD_ADDR_EXP 11
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// DialogueOn ;
4676: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4680: LD_EXP 39
4684: PPUSH
4685: LD_STRING DApeWorkSol-Bur-1
4687: PPUSH
4688: CALL_OW 88
// if IsOK ( Petrosyan ) then
4692: LD_EXP 43
4696: PPUSH
4697: CALL_OW 302
4701: IFFALSE 4717
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4703: LD_EXP 43
4707: PPUSH
4708: LD_STRING DApeWorkSol-Pty-1
4710: PPUSH
4711: CALL_OW 88
4715: GO 4856
// if IsOK ( Dolgov ) then
4717: LD_EXP 45
4721: PPUSH
4722: CALL_OW 302
4726: IFFALSE 4742
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4728: LD_EXP 45
4732: PPUSH
4733: LD_STRING DApeWorkSol-Pty-1
4735: PPUSH
4736: CALL_OW 88
4740: GO 4856
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4742: LD_INT 22
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 21
4754: PUSH
4755: LD_INT 1
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 26
4764: PUSH
4765: LD_INT 1
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 50
4774: PUSH
4775: EMPTY
4776: LIST
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 25
4783: PUSH
4784: LD_INT 1
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 25
4793: PUSH
4794: LD_INT 2
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 3
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 25
4813: PUSH
4814: LD_INT 4
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: PPUSH
4835: CALL_OW 69
4839: PPUSH
4840: LD_STRING DApeWorkSol-Pty-1
4842: PPUSH
4843: LD_STRING 
4845: PPUSH
4846: LD_INT 0
4848: PPUSH
4849: LD_INT 1
4851: PPUSH
4852: CALL 8765 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4856: LD_EXP 39
4860: PPUSH
4861: LD_STRING DApeWorkSol-Bur-2
4863: PPUSH
4864: CALL_OW 88
// DialogueOff ;
4868: CALL_OW 7
// end ;
4872: LD_VAR 0 1
4876: RET
// export function Dial_ResearchApePsych ; begin
4877: LD_INT 0
4879: PPUSH
// DialogueOn ;
4880: CALL_OW 6
// if IsOK ( Petrosyan ) then
4884: LD_EXP 43
4888: PPUSH
4889: CALL_OW 302
4893: IFFALSE 4909
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4895: LD_EXP 43
4899: PPUSH
4900: LD_STRING DApeWorkCompl-Pty-1
4902: PPUSH
4903: CALL_OW 88
4907: GO 5048
// if IsOK ( Dolgov ) then
4909: LD_EXP 45
4913: PPUSH
4914: CALL_OW 302
4918: IFFALSE 4934
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4920: LD_EXP 45
4924: PPUSH
4925: LD_STRING DApeWorkCompl-Pty-1
4927: PPUSH
4928: CALL_OW 88
4932: GO 5048
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4934: LD_INT 22
4936: PUSH
4937: LD_INT 3
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 21
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 26
4956: PUSH
4957: LD_INT 1
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 50
4966: PUSH
4967: EMPTY
4968: LIST
4969: PUSH
4970: LD_INT 2
4972: PUSH
4973: LD_INT 25
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: LD_INT 25
4985: PUSH
4986: LD_INT 2
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 25
4995: PUSH
4996: LD_INT 3
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: LD_INT 25
5005: PUSH
5006: LD_INT 4
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: PPUSH
5027: CALL_OW 69
5031: PPUSH
5032: LD_STRING DApeWorkCompl-Pty-1
5034: PPUSH
5035: LD_STRING 
5037: PPUSH
5038: LD_INT 0
5040: PPUSH
5041: LD_INT 1
5043: PPUSH
5044: CALL 8765 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5048: LD_EXP 39
5052: PPUSH
5053: LD_STRING DApeWorkCompl-Bur-1
5055: PPUSH
5056: CALL_OW 88
// DialogueOff ;
5060: CALL_OW 7
// end ;
5064: LD_VAR 0 1
5068: RET
// export function Dial_ResearchApeAgress ; begin
5069: LD_INT 0
5071: PPUSH
// DialogueOn ;
5072: CALL_OW 6
// if IsOK ( Petrosyan ) then
5076: LD_EXP 43
5080: PPUSH
5081: CALL_OW 302
5085: IFFALSE 5101
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5087: LD_EXP 43
5091: PPUSH
5092: LD_STRING DApeSolCompl-Pty-1
5094: PPUSH
5095: CALL_OW 88
5099: GO 5240
// if IsOK ( Dolgov ) then
5101: LD_EXP 45
5105: PPUSH
5106: CALL_OW 302
5110: IFFALSE 5126
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5112: LD_EXP 45
5116: PPUSH
5117: LD_STRING DApeSolCompl-Pty-1
5119: PPUSH
5120: CALL_OW 88
5124: GO 5240
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5126: LD_INT 22
5128: PUSH
5129: LD_INT 3
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PUSH
5136: LD_INT 21
5138: PUSH
5139: LD_INT 1
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 26
5148: PUSH
5149: LD_INT 1
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: PUSH
5156: LD_INT 50
5158: PUSH
5159: EMPTY
5160: LIST
5161: PUSH
5162: LD_INT 2
5164: PUSH
5165: LD_INT 25
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 25
5177: PUSH
5178: LD_INT 2
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 3
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 25
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: PPUSH
5219: CALL_OW 69
5223: PPUSH
5224: LD_STRING DApeSolCompl-Pty-1
5226: PPUSH
5227: LD_STRING 
5229: PPUSH
5230: LD_INT 0
5232: PPUSH
5233: LD_INT 1
5235: PPUSH
5236: CALL 8765 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5240: LD_EXP 39
5244: PPUSH
5245: LD_STRING DApeSolCompl-Bur-1
5247: PPUSH
5248: CALL_OW 88
// DialogueOff ;
5252: CALL_OW 7
// end ;
5256: LD_VAR 0 1
5260: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5261: LD_INT 3
5263: PPUSH
5264: LD_INT 74
5266: PPUSH
5267: LD_INT 115
5269: PPUSH
5270: CALL_OW 293
5274: IFFALSE 5405
5276: GO 5278
5278: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5279: LD_INT 22
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 21
5291: PUSH
5292: LD_INT 1
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 26
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 50
5311: PUSH
5312: EMPTY
5313: LIST
5314: PUSH
5315: LD_INT 2
5317: PUSH
5318: LD_INT 25
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 25
5330: PUSH
5331: LD_INT 2
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 25
5340: PUSH
5341: LD_INT 3
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 25
5350: PUSH
5351: LD_INT 4
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PPUSH
5372: CALL_OW 69
5376: PPUSH
5377: LD_STRING DShipments-RSol1-1
5379: PPUSH
5380: LD_STRING 
5382: PPUSH
5383: LD_INT 0
5385: PPUSH
5386: LD_INT 1
5388: PPUSH
5389: CALL 8765 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5393: LD_EXP 39
5397: PPUSH
5398: LD_STRING DShipments-Bur-1
5400: PPUSH
5401: CALL_OW 88
// end ;
5405: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5406: LD_INT 3
5408: PPUSH
5409: LD_INT 81
5411: PPUSH
5412: LD_INT 132
5414: PPUSH
5415: CALL_OW 293
5419: IFFALSE 5559
5421: GO 5423
5423: DISABLE
5424: LD_INT 0
5426: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5427: LD_ADDR_VAR 0 1
5431: PUSH
5432: LD_INT 22
5434: PUSH
5435: LD_INT 3
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: LD_INT 21
5444: PUSH
5445: LD_INT 1
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 26
5454: PUSH
5455: LD_INT 1
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 50
5464: PUSH
5465: EMPTY
5466: LIST
5467: PUSH
5468: LD_INT 2
5470: PUSH
5471: LD_INT 25
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 25
5483: PUSH
5484: LD_INT 2
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 25
5493: PUSH
5494: LD_INT 3
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 25
5503: PUSH
5504: LD_INT 4
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 69
5529: PPUSH
5530: LD_STRING DRoad-RSol1-1
5532: PPUSH
5533: LD_STRING 
5535: PPUSH
5536: LD_INT 0
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL 8765 0 5
5546: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5547: LD_VAR 0 1
5551: PPUSH
5552: LD_STRING DRoad-RSol1-1a
5554: PPUSH
5555: CALL_OW 88
// end ;
5559: PPOPN 1
5561: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5562: LD_INT 33
5564: PPUSH
5565: LD_INT 22
5567: PUSH
5568: LD_INT 3
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 21
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 26
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 50
5597: PUSH
5598: EMPTY
5599: LIST
5600: PUSH
5601: LD_INT 2
5603: PUSH
5604: LD_INT 25
5606: PUSH
5607: LD_INT 1
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: LD_INT 25
5616: PUSH
5617: LD_INT 2
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PUSH
5624: LD_INT 25
5626: PUSH
5627: LD_INT 3
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 25
5636: PUSH
5637: LD_INT 4
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 70
5662: PUSH
5663: LD_EXP 39
5667: PUSH
5668: EMPTY
5669: LIST
5670: DIFF
5671: PUSH
5672: LD_INT 22
5674: PUSH
5675: LD_INT 3
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 21
5684: PUSH
5685: LD_INT 3
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 30
5694: PUSH
5695: LD_INT 0
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 50
5704: PUSH
5705: EMPTY
5706: LIST
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: PPUSH
5714: CALL_OW 69
5718: AND
5719: IFFALSE 5746
5721: GO 5723
5723: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5724: LD_INT 36
5726: PPUSH
5727: CALL 20703 0 1
// wait ( 0 0$1.5 ) ;
5731: LD_INT 52
5733: PPUSH
5734: CALL_OW 67
// stevensPlaced = true ;
5738: LD_ADDR_EXP 14
5742: PUSH
5743: LD_INT 1
5745: ST_TO_ADDR
// end ;
5746: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5747: LD_INT 3
5749: PPUSH
5750: LD_EXP 57
5754: PPUSH
5755: CALL_OW 292
5759: PUSH
5760: LD_EXP 14
5764: AND
5765: PUSH
5766: LD_EXP 24
5770: NOT
5771: AND
5772: IFFALSE 6114
5774: GO 5776
5776: DISABLE
5777: LD_INT 0
5779: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5780: LD_ADDR_VAR 0 1
5784: PUSH
5785: LD_INT 22
5787: PUSH
5788: LD_INT 3
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: LD_INT 21
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 26
5807: PUSH
5808: LD_INT 1
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 50
5817: PUSH
5818: EMPTY
5819: LIST
5820: PUSH
5821: LD_INT 2
5823: PUSH
5824: LD_INT 25
5826: PUSH
5827: LD_INT 1
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 25
5836: PUSH
5837: LD_INT 2
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PUSH
5844: LD_INT 25
5846: PUSH
5847: LD_INT 3
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PUSH
5854: LD_INT 25
5856: PUSH
5857: LD_INT 4
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PPUSH
5878: CALL_OW 69
5882: PPUSH
5883: LD_EXP 57
5887: PPUSH
5888: CALL_OW 74
5892: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5893: LD_EXP 57
5897: PPUSH
5898: CALL_OW 87
// InGameOn ;
5902: CALL_OW 8
// DialogueOn ;
5906: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5910: LD_VAR 0 1
5914: PPUSH
5915: LD_STRING DStevens-RSol1-1
5917: PPUSH
5918: CALL_OW 88
// DialogueOff ;
5922: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5926: LD_INT 52
5928: PPUSH
5929: CALL_OW 67
// if IsOK ( Petrosyan ) then
5933: LD_EXP 43
5937: PPUSH
5938: CALL_OW 302
5942: IFFALSE 6110
// begin SetSide ( Stevens , 6 ) ;
5944: LD_EXP 57
5948: PPUSH
5949: LD_INT 6
5951: PPUSH
5952: CALL_OW 235
// DialogueOn ;
5956: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
5960: LD_EXP 57
5964: PPUSH
5965: LD_STRING DStevens-Huck-1
5967: PPUSH
5968: CALL_OW 88
// if nearUnit = Petrosyan then
5972: LD_VAR 0 1
5976: PUSH
5977: LD_EXP 43
5981: EQUAL
5982: IFFALSE 6078
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
5984: LD_EXP 43
5988: PPUSH
5989: LD_STRING DStevens-Pty-1a
5991: PPUSH
5992: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
5996: LD_EXP 57
6000: PPUSH
6001: LD_STRING DStevens-Huck-2
6003: PPUSH
6004: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6008: LD_EXP 43
6012: PPUSH
6013: LD_STRING DStevens-Pty-2
6015: PPUSH
6016: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6020: LD_EXP 57
6024: PPUSH
6025: LD_STRING DStevens-Huck-3
6027: PPUSH
6028: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6032: LD_EXP 43
6036: PPUSH
6037: LD_STRING DStevens-Pty-3
6039: PPUSH
6040: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6044: LD_EXP 57
6048: PPUSH
6049: LD_STRING DStevens-Huck-4
6051: PPUSH
6052: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6056: LD_EXP 43
6060: PPUSH
6061: LD_STRING DStevens-Pty-4
6063: PPUSH
6064: CALL_OW 88
// stevensFollow = true ;
6068: LD_ADDR_EXP 15
6072: PUSH
6073: LD_INT 1
6075: ST_TO_ADDR
// end else
6076: GO 6106
// begin stevensFollow = true ;
6078: LD_ADDR_EXP 15
6082: PUSH
6083: LD_INT 1
6085: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6086: LD_ADDR_EXP 16
6090: PUSH
6091: LD_INT 1
6093: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6094: LD_EXP 43
6098: PPUSH
6099: LD_STRING DStevens-Pty-1
6101: PPUSH
6102: CALL_OW 88
// end ; DialogueOff ;
6106: CALL_OW 7
// end ; InGameOff ;
6110: CALL_OW 9
// end ;
6114: PPOPN 1
6116: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6117: LD_EXP 16
6121: PUSH
6122: LD_EXP 43
6126: PPUSH
6127: LD_EXP 57
6131: PPUSH
6132: CALL_OW 296
6136: PUSH
6137: LD_INT 20
6139: LESS
6140: AND
6141: PUSH
6142: LD_EXP 43
6146: PPUSH
6147: CALL_OW 302
6151: AND
6152: PUSH
6153: LD_EXP 24
6157: NOT
6158: AND
6159: IFFALSE 6264
6161: GO 6163
6163: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6164: LD_ADDR_EXP 16
6168: PUSH
6169: LD_INT 0
6171: ST_TO_ADDR
// DialogueOn ;
6172: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6176: LD_EXP 43
6180: PPUSH
6181: LD_STRING DStevens-Pty-1a
6183: PPUSH
6184: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6188: LD_EXP 57
6192: PPUSH
6193: LD_STRING DStevens-Huck-2
6195: PPUSH
6196: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6200: LD_EXP 43
6204: PPUSH
6205: LD_STRING DStevens-Pty-2
6207: PPUSH
6208: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6212: LD_EXP 57
6216: PPUSH
6217: LD_STRING DStevens-Huck-3
6219: PPUSH
6220: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6224: LD_EXP 43
6228: PPUSH
6229: LD_STRING DStevens-Pty-3
6231: PPUSH
6232: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6236: LD_EXP 57
6240: PPUSH
6241: LD_STRING DStevens-Huck-4
6243: PPUSH
6244: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6248: LD_EXP 43
6252: PPUSH
6253: LD_STRING DStevens-Pty-4
6255: PPUSH
6256: CALL_OW 88
// DialogueOff ;
6260: CALL_OW 7
// end ;
6264: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and IsOK ( Petrosyan ) and not finishMissionBool do
6265: LD_EXP 57
6269: PPUSH
6270: LD_EXP 39
6274: PPUSH
6275: CALL_OW 296
6279: PUSH
6280: LD_INT 15
6282: LESS
6283: PUSH
6284: LD_EXP 43
6288: PPUSH
6289: CALL_OW 302
6293: AND
6294: PUSH
6295: LD_EXP 24
6299: NOT
6300: AND
6301: IFFALSE 6516
6303: GO 6305
6305: DISABLE
// begin DialogueOn ;
6306: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6310: LD_EXP 43
6314: PPUSH
6315: LD_STRING DStevensBurlak-Pty-1
6317: PPUSH
6318: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6322: LD_EXP 39
6326: PPUSH
6327: LD_STRING DStevensBurlak-Bur-1
6329: PPUSH
6330: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6334: LD_EXP 43
6338: PPUSH
6339: LD_STRING DStevensBurlak-Pty-2
6341: PPUSH
6342: CALL_OW 88
// case Query ( QKill ) of 1 :
6346: LD_STRING QKill
6348: PPUSH
6349: CALL_OW 97
6353: PUSH
6354: LD_INT 1
6356: DOUBLE
6357: EQUAL
6358: IFTRUE 6362
6360: GO 6440
6362: POP
// begin stevensCanExitMap = true ;
6363: LD_ADDR_EXP 19
6367: PUSH
6368: LD_INT 1
6370: ST_TO_ADDR
// stevensFollow = false ;
6371: LD_ADDR_EXP 15
6375: PUSH
6376: LD_INT 0
6378: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6379: LD_EXP 39
6383: PPUSH
6384: LD_STRING DKill-1-Bur-1
6386: PPUSH
6387: CALL_OW 88
// if IsOK ( Gleb ) then
6391: LD_EXP 42
6395: PPUSH
6396: CALL_OW 302
6400: IFFALSE 6414
// Say ( Gleb , DKill-1-Glb-1 ) ;
6402: LD_EXP 42
6406: PPUSH
6407: LD_STRING DKill-1-Glb-1
6409: PPUSH
6410: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6414: LD_EXP 57
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6426: LD_EXP 57
6430: PPUSH
6431: LD_INT 37
6433: PPUSH
6434: CALL_OW 113
// end ; 2 :
6438: GO 6512
6440: LD_INT 2
6442: DOUBLE
6443: EQUAL
6444: IFTRUE 6448
6446: GO 6511
6448: POP
// begin stevensCanExitMap = true ;
6449: LD_ADDR_EXP 19
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// stevensFollow = false ;
6457: LD_ADDR_EXP 15
6461: PUSH
6462: LD_INT 0
6464: ST_TO_ADDR
// stevensDepot = true ;
6465: LD_ADDR_EXP 17
6469: PUSH
6470: LD_INT 1
6472: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6473: LD_EXP 39
6477: PPUSH
6478: LD_STRING DKill-2-Bur-1
6480: PPUSH
6481: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6485: LD_EXP 43
6489: PPUSH
6490: LD_STRING DKill-2-Pty-1
6492: PPUSH
6493: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6497: LD_EXP 39
6501: PPUSH
6502: LD_STRING DKill-2-Bur-2
6504: PPUSH
6505: CALL_OW 88
// end ; end ;
6509: GO 6512
6511: POP
// DialogueOff ;
6512: CALL_OW 7
// end ;
6516: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6517: LD_EXP 15
6521: IFFALSE 6661
6523: GO 6525
6525: DISABLE
6526: LD_INT 0
6528: PPUSH
// begin enable ;
6529: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6530: LD_ADDR_VAR 0 1
6534: PUSH
6535: LD_INT 22
6537: PUSH
6538: LD_INT 3
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 21
6547: PUSH
6548: LD_INT 1
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 50
6557: PUSH
6558: EMPTY
6559: LIST
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 25
6566: PUSH
6567: LD_INT 1
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 25
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: LD_INT 25
6586: PUSH
6587: LD_INT 3
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 25
6596: PUSH
6597: LD_INT 4
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 69
6621: PPUSH
6622: LD_EXP 57
6626: PPUSH
6627: CALL_OW 74
6631: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6632: LD_EXP 57
6636: PPUSH
6637: LD_VAR 0 1
6641: PPUSH
6642: CALL_OW 250
6646: PPUSH
6647: LD_VAR 0 1
6651: PPUSH
6652: CALL_OW 251
6656: PPUSH
6657: CALL_OW 111
// end ;
6661: PPOPN 1
6663: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6664: LD_EXP 17
6668: PUSH
6669: LD_INT 22
6671: PUSH
6672: LD_INT 3
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PUSH
6679: LD_INT 21
6681: PUSH
6682: LD_INT 3
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 30
6691: PUSH
6692: LD_INT 0
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PUSH
6699: LD_INT 50
6701: PUSH
6702: EMPTY
6703: LIST
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: PPUSH
6711: CALL_OW 69
6715: NOT
6716: AND
6717: IFFALSE 6744
6719: GO 6721
6721: DISABLE
// begin enable ;
6722: ENABLE
// SetSide ( Stevens , 6 ) ;
6723: LD_EXP 57
6727: PPUSH
6728: LD_INT 6
6730: PPUSH
6731: CALL_OW 235
// ComHold ( Stevens ) ;
6735: LD_EXP 57
6739: PPUSH
6740: CALL_OW 140
// end ;
6744: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6745: LD_EXP 17
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 3
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 21
6762: PUSH
6763: LD_INT 3
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 30
6772: PUSH
6773: LD_INT 0
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 50
6782: PUSH
6783: EMPTY
6784: LIST
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: PPUSH
6792: CALL_OW 69
6796: AND
6797: IFFALSE 7360
6799: GO 6801
6801: DISABLE
6802: LD_INT 0
6804: PPUSH
6805: PPUSH
6806: PPUSH
// begin enable ;
6807: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6808: LD_ADDR_VAR 0 1
6812: PUSH
6813: LD_INT 22
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 21
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 30
6835: PUSH
6836: LD_INT 0
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 50
6845: PUSH
6846: EMPTY
6847: LIST
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: PUSH
6860: LD_INT 1
6862: ARRAY
6863: ST_TO_ADDR
// stevensFollow = false ;
6864: LD_ADDR_EXP 15
6868: PUSH
6869: LD_INT 0
6871: ST_TO_ADDR
// if not depot then
6872: LD_VAR 0 1
6876: NOT
6877: IFFALSE 6881
// exit ;
6879: GO 7360
// for depotUnit in depot do
6881: LD_ADDR_VAR 0 2
6885: PUSH
6886: LD_VAR 0 1
6890: PUSH
6891: FOR_IN
6892: IFFALSE 6918
// if not IsConstructed ( depotUnit ) then
6894: LD_VAR 0 2
6898: PPUSH
6899: CALL_OW 304
6903: NOT
6904: IFFALSE 6916
// constructDepot = depotUnit ;
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_VAR 0 2
6915: ST_TO_ADDR
6916: GO 6891
6918: POP
6919: POP
// if not constructDepot then
6920: LD_VAR 0 3
6924: NOT
6925: IFFALSE 6929
// exit ;
6927: GO 7360
// if not stevensWasInDepot then
6929: LD_EXP 18
6933: NOT
6934: IFFALSE 7074
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6936: LD_EXP 57
6940: PPUSH
6941: CALL_OW 310
6945: NOT
6946: PUSH
6947: LD_EXP 57
6951: PPUSH
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL_OW 296
6961: PUSH
6962: LD_INT 8
6964: LESS
6965: NOT
6966: AND
6967: IFFALSE 7000
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
6969: LD_EXP 57
6973: PPUSH
6974: LD_VAR 0 3
6978: PPUSH
6979: CALL_OW 250
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL_OW 251
6993: PPUSH
6994: CALL_OW 111
6998: GO 7072
// begin InGameOn ;
7000: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7004: LD_EXP 57
7008: PPUSH
7009: LD_INT 3
7011: PPUSH
7012: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7016: LD_EXP 57
7020: PPUSH
7021: LD_VAR 0 3
7025: PPUSH
7026: CALL_OW 120
// wait ( 0 0$1 ) ;
7030: LD_INT 35
7032: PPUSH
7033: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7037: LD_EXP 57
7041: PPUSH
7042: CALL_OW 310
7046: PUSH
7047: LD_EXP 57
7051: PPUSH
7052: CALL_OW 302
7056: NOT
7057: OR
7058: IFFALSE 7004
// InGameOff ;
7060: CALL_OW 9
// stevensWasInDepot = true ;
7064: LD_ADDR_EXP 18
7068: PUSH
7069: LD_INT 1
7071: ST_TO_ADDR
// end ; end else
7072: GO 7360
// begin if not IsInUnit ( Stevens ) then
7074: LD_EXP 57
7078: PPUSH
7079: CALL_OW 310
7083: NOT
7084: IFFALSE 7360
// begin DialogueOn ;
7086: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7090: LD_EXP 39
7094: PPUSH
7095: LD_STRING DRelease-Bur-1
7097: PPUSH
7098: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7102: LD_STRING QKillAgain
7104: PPUSH
7105: CALL_OW 97
7109: PUSH
7110: LD_INT 1
7112: DOUBLE
7113: EQUAL
7114: IFTRUE 7118
7116: GO 7187
7118: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7119: LD_EXP 39
7123: PPUSH
7124: LD_STRING DQrKillAgain#1-Bur-1
7126: PPUSH
7127: CALL_OW 88
// stevensCanExitMap = true ;
7131: LD_ADDR_EXP 19
7135: PUSH
7136: LD_INT 1
7138: ST_TO_ADDR
// stevensWasInDepot = false ;
7139: LD_ADDR_EXP 18
7143: PUSH
7144: LD_INT 0
7146: ST_TO_ADDR
// stevensDepot = false ;
7147: LD_ADDR_EXP 17
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7155: LD_EXP 57
7159: PPUSH
7160: LD_INT 1
7162: PPUSH
7163: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7167: LD_EXP 57
7171: PPUSH
7172: LD_INT 37
7174: PPUSH
7175: CALL_OW 113
// DialogueOff ;
7179: CALL_OW 7
// exit ;
7183: GO 7360
// end ; 2 :
7185: GO 7356
7187: LD_INT 2
7189: DOUBLE
7190: EQUAL
7191: IFTRUE 7195
7193: GO 7264
7195: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7196: LD_EXP 39
7200: PPUSH
7201: LD_STRING DQrKillAgain#2-Bur-1
7203: PPUSH
7204: CALL_OW 88
// stevensCanExitMap = true ;
7208: LD_ADDR_EXP 19
7212: PUSH
7213: LD_INT 1
7215: ST_TO_ADDR
// stevensWasInDepot = false ;
7216: LD_ADDR_EXP 18
7220: PUSH
7221: LD_INT 0
7223: ST_TO_ADDR
// stevensDepot = false ;
7224: LD_ADDR_EXP 17
7228: PUSH
7229: LD_INT 0
7231: ST_TO_ADDR
// SetSide ( Stevens , 6 ) ;
7232: LD_EXP 57
7236: PPUSH
7237: LD_INT 6
7239: PPUSH
7240: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7244: LD_EXP 57
7248: PPUSH
7249: LD_INT 37
7251: PPUSH
7252: CALL_OW 113
// DialogueOff ;
7256: CALL_OW 7
// exit ;
7260: GO 7360
// end ; 3 :
7262: GO 7356
7264: LD_INT 3
7266: DOUBLE
7267: EQUAL
7268: IFTRUE 7272
7270: GO 7355
7272: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7273: LD_EXP 39
7277: PPUSH
7278: LD_STRING DQrKillAgain#2-Bur-1a
7280: PPUSH
7281: CALL_OW 88
// DialogueOff ;
7285: CALL_OW 7
// InGameOn ;
7289: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7293: LD_EXP 57
7297: PPUSH
7298: LD_INT 3
7300: PPUSH
7301: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7305: LD_EXP 57
7309: PPUSH
7310: LD_VAR 0 3
7314: PPUSH
7315: CALL_OW 120
// wait ( 0 0$1 ) ;
7319: LD_INT 35
7321: PPUSH
7322: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7326: LD_EXP 57
7330: PPUSH
7331: CALL_OW 310
7335: PUSH
7336: LD_EXP 57
7340: PPUSH
7341: CALL_OW 302
7345: NOT
7346: OR
7347: IFFALSE 7293
// InGameOff ;
7349: CALL_OW 9
// end ; end ;
7353: GO 7356
7355: POP
// DialogueOff ;
7356: CALL_OW 7
// end ; end ; end ;
7360: PPOPN 3
7362: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7363: LD_EXP 19
7367: PUSH
7368: LD_EXP 57
7372: PPUSH
7373: LD_INT 37
7375: PPUSH
7376: CALL_OW 308
7380: AND
7381: IFFALSE 7428
7383: GO 7385
7385: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7386: LD_EXP 57
7390: PPUSH
7391: CALL_OW 255
7395: PUSH
7396: LD_INT 6
7398: EQUAL
7399: IFFALSE 7411
// stevensStatus = 1 else
7401: LD_ADDR_EXP 2
7405: PUSH
7406: LD_INT 1
7408: ST_TO_ADDR
7409: GO 7419
// stevensStatus = 2 ;
7411: LD_ADDR_EXP 2
7415: PUSH
7416: LD_INT 2
7418: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7419: LD_EXP 57
7423: PPUSH
7424: CALL_OW 64
// end ;
7428: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7429: LD_INT 3
7431: PPUSH
7432: LD_INT 1
7434: PPUSH
7435: CALL_OW 292
7439: IFFALSE 7639
7441: GO 7443
7443: DISABLE
7444: LD_INT 0
7446: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7447: LD_ADDR_VAR 0 1
7451: PUSH
7452: LD_INT 1
7454: PPUSH
7455: LD_INT 2
7457: PPUSH
7458: CALL_OW 12
7462: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7463: LD_INT 1
7465: PPUSH
7466: CALL_OW 87
// DialogueOn ;
7470: CALL_OW 6
// if rnd = 1 then
7474: LD_VAR 0 1
7478: PUSH
7479: LD_INT 1
7481: EQUAL
7482: IFFALSE 7498
// Say ( Burlak , DMastodon-Bur-1 ) else
7484: LD_EXP 39
7488: PPUSH
7489: LD_STRING DMastodon-Bur-1
7491: PPUSH
7492: CALL_OW 88
7496: GO 7612
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7498: LD_INT 22
7500: PUSH
7501: LD_INT 3
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 21
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 50
7530: PUSH
7531: EMPTY
7532: LIST
7533: PUSH
7534: LD_INT 2
7536: PUSH
7537: LD_INT 25
7539: PUSH
7540: LD_INT 1
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 25
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 25
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 25
7569: PUSH
7570: LD_INT 4
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 69
7595: PPUSH
7596: LD_STRING DMastodon-RSol1-1
7598: PPUSH
7599: LD_STRING 
7601: PPUSH
7602: LD_INT 0
7604: PPUSH
7605: LD_INT 1
7607: PPUSH
7608: CALL 8765 0 5
// if IsOK ( Gleb ) then
7612: LD_EXP 42
7616: PPUSH
7617: CALL_OW 302
7621: IFFALSE 7635
// Say ( Gleb , DMastodon-Glb-1 ) ;
7623: LD_EXP 42
7627: PPUSH
7628: LD_STRING DMastodon-Glb-1
7630: PPUSH
7631: CALL_OW 88
// DialogueOff ;
7635: CALL_OW 7
// end ;
7639: PPOPN 1
7641: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7642: LD_INT 1
7644: PPUSH
7645: CALL_OW 302
7649: NOT
7650: IFFALSE 7729
7652: GO 7654
7654: DISABLE
// begin omarCanExitMap = true ;
7655: LD_ADDR_EXP 20
7659: PUSH
7660: LD_INT 1
7662: ST_TO_ADDR
// DialogueOn ;
7663: CALL_OW 6
// if IsOK ( Karamazov ) then
7667: LD_EXP 40
7671: PPUSH
7672: CALL_OW 302
7676: IFFALSE 7690
// Say ( Karamazov , DOmar-Kar-1 ) ;
7678: LD_EXP 40
7682: PPUSH
7683: LD_STRING DOmar-Kar-1
7685: PPUSH
7686: CALL_OW 88
// if IsOK ( Petrovova ) then
7690: LD_EXP 41
7694: PPUSH
7695: CALL_OW 302
7699: IFFALSE 7713
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7701: LD_EXP 41
7705: PPUSH
7706: LD_STRING DOmar-Ptr-1
7708: PPUSH
7709: CALL_OW 88
// DialogueOff ;
7713: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7717: LD_EXP 50
7721: PPUSH
7722: LD_INT 41
7724: PPUSH
7725: CALL_OW 113
// end ;
7729: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7730: LD_EXP 50
7734: PPUSH
7735: LD_INT 41
7737: PPUSH
7738: CALL_OW 308
7742: PUSH
7743: LD_EXP 20
7747: AND
7748: IFFALSE 7770
7750: GO 7752
7752: DISABLE
// begin RemoveUnit ( Omar ) ;
7753: LD_EXP 50
7757: PPUSH
7758: CALL_OW 64
// omarStatus = 1 ;
7762: LD_ADDR_EXP 1
7766: PUSH
7767: LD_INT 1
7769: ST_TO_ADDR
// end ;
7770: END
// every 0 0$1 trigger IsDead ( Omar ) do
7771: LD_EXP 50
7775: PPUSH
7776: CALL_OW 301
7780: IFFALSE 7938
7782: GO 7784
7784: DISABLE
// begin DialogueOn ;
7785: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7789: LD_INT 22
7791: PUSH
7792: LD_INT 3
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 21
7801: PUSH
7802: LD_INT 1
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 26
7811: PUSH
7812: LD_INT 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 50
7821: PUSH
7822: EMPTY
7823: LIST
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: LD_INT 25
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 25
7840: PUSH
7841: LD_INT 2
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 25
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: LD_INT 25
7860: PUSH
7861: LD_INT 4
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: PPUSH
7882: CALL_OW 69
7886: PPUSH
7887: LD_STRING DOmar-RSol1-1
7889: PPUSH
7890: LD_STRING 
7892: PPUSH
7893: LD_INT 0
7895: PPUSH
7896: LD_INT 1
7898: PPUSH
7899: CALL 8765 0 5
// wait ( 0 0$1 ) ;
7903: LD_INT 35
7905: PPUSH
7906: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
7910: LD_EXP 49
7914: PPUSH
7915: LD_STRING DOmar-Hke-1
7917: PPUSH
7918: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
7922: LD_EXP 39
7926: PPUSH
7927: LD_STRING DOmar-Bur-1
7929: PPUSH
7930: CALL_OW 88
// DialogueOff ;
7934: CALL_OW 7
// end ;
7938: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
7939: LD_EXP 50
7943: PPUSH
7944: CALL_OW 301
7948: PUSH
7949: LD_EXP 50
7953: PPUSH
7954: CALL_OW 305
7958: NOT
7959: OR
7960: PUSH
7961: LD_EXP 51
7965: PUSH
7966: LD_INT 3
7968: LESS
7969: AND
7970: IFFALSE 8121
7972: GO 7974
7974: DISABLE
// begin if actionTime < arabBreakthrough then
7975: LD_EXP 7
7979: PUSH
7980: LD_EXP 34
7984: LESS
7985: IFFALSE 7995
// fastBreakthrough = true ;
7987: LD_ADDR_EXP 23
7991: PUSH
7992: LD_INT 1
7994: ST_TO_ADDR
// DialogueOn ;
7995: CALL_OW 6
// if IsOK ( Petrovova ) then
7999: LD_EXP 41
8003: PPUSH
8004: CALL_OW 302
8008: IFFALSE 8022
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
8010: LD_EXP 41
8014: PPUSH
8015: LD_STRING DBreakthrough-Ptr-1
8017: PPUSH
8018: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
8022: LD_EXP 39
8026: PPUSH
8027: LD_STRING DBreakthrough-Bur-1
8029: PPUSH
8030: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
8034: LD_EXP 47
8038: PPUSH
8039: LD_STRING DBreakthrough-Pla-1
8041: PPUSH
8042: CALL_OW 94
// if fastBreakthrough then
8046: LD_EXP 23
8050: IFFALSE 8066
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8052: LD_EXP 47
8056: PPUSH
8057: LD_STRING DBreakthrough-Pla-1a
8059: PPUSH
8060: CALL_OW 94
8064: GO 8078
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8066: LD_EXP 47
8070: PPUSH
8071: LD_STRING DBreakthrough-Pla-1b
8073: PPUSH
8074: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8078: LD_EXP 47
8082: PPUSH
8083: LD_STRING DBreakthrough-Pla-1c
8085: PPUSH
8086: CALL_OW 94
// DialogueOff ;
8090: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8094: LD_STRING MAddLab
8096: PPUSH
8097: CALL_OW 337
// arabianCanExitMap = true ;
8101: LD_ADDR_EXP 21
8105: PUSH
8106: LD_INT 1
8108: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8109: LD_EXP 51
8113: PPUSH
8114: LD_INT 41
8116: PPUSH
8117: CALL_OW 113
// end ;
8121: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8122: LD_EXP 21
8126: IFFALSE 8191
8128: GO 8130
8130: DISABLE
8131: LD_INT 0
8133: PPUSH
// begin enable ;
8134: ENABLE
// for unit in arabianUnitsInBase do
8135: LD_ADDR_VAR 0 1
8139: PUSH
8140: LD_EXP 51
8144: PUSH
8145: FOR_IN
8146: IFFALSE 8189
// if IsInArea ( unit , ArabianExitArea ) then
8148: LD_VAR 0 1
8152: PPUSH
8153: LD_INT 41
8155: PPUSH
8156: CALL_OW 308
8160: IFFALSE 8187
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8162: LD_ADDR_EXP 51
8166: PUSH
8167: LD_EXP 51
8171: PUSH
8172: LD_VAR 0 1
8176: DIFF
8177: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8178: LD_VAR 0 1
8182: PPUSH
8183: CALL_OW 64
// end ;
8187: GO 8145
8189: POP
8190: POP
// end ;
8191: PPOPN 1
8193: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8194: LD_EXP 12
8198: NOT
8199: IFFALSE 8437
8201: GO 8203
8203: DISABLE
8204: LD_INT 0
8206: PPUSH
// begin for unit in arabianPatrolVehicles do
8207: LD_ADDR_VAR 0 1
8211: PUSH
8212: LD_EXP 52
8216: PUSH
8217: FOR_IN
8218: IFFALSE 8435
// if See ( 3 , unit ) then
8220: LD_INT 3
8222: PPUSH
8223: LD_VAR 0 1
8227: PPUSH
8228: CALL_OW 292
8232: IFFALSE 8433
// begin dial_southRoadBlocker = true ;
8234: LD_ADDR_EXP 12
8238: PUSH
8239: LD_INT 1
8241: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8242: LD_VAR 0 1
8246: PPUSH
8247: CALL_OW 87
// if IsOK ( Karamazov ) then
8251: LD_EXP 40
8255: PPUSH
8256: CALL_OW 302
8260: IFFALSE 8274
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8262: LD_EXP 40
8266: PPUSH
8267: LD_STRING DPatrol-Kar-1
8269: PPUSH
8270: CALL_OW 88
// if IsOK ( Petrovova ) then
8274: LD_EXP 41
8278: PPUSH
8279: CALL_OW 302
8283: IFFALSE 8297
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8285: LD_EXP 41
8289: PPUSH
8290: LD_STRING DPatrol-Ptr-1
8292: PPUSH
8293: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8297: LD_INT 22
8299: PUSH
8300: LD_INT 3
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 21
8309: PUSH
8310: LD_INT 1
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 26
8319: PUSH
8320: LD_INT 1
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 50
8329: PUSH
8330: EMPTY
8331: LIST
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 25
8338: PUSH
8339: LD_INT 1
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: LD_INT 25
8348: PUSH
8349: LD_INT 2
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PUSH
8356: LD_INT 25
8358: PUSH
8359: LD_INT 3
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 25
8368: PUSH
8369: LD_INT 4
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: PPUSH
8390: CALL_OW 69
8394: PUSH
8395: LD_EXP 40
8399: DIFF
8400: PPUSH
8401: LD_STRING DPatrol-RSol1-1
8403: PPUSH
8404: LD_STRING 
8406: PPUSH
8407: LD_INT 0
8409: PPUSH
8410: LD_INT 1
8412: PPUSH
8413: CALL 8765 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8417: LD_EXP 39
8421: PPUSH
8422: LD_STRING DPatrol-Bur-1
8424: PPUSH
8425: CALL_OW 88
// exit ;
8429: POP
8430: POP
8431: GO 8437
// end ;
8433: GO 8217
8435: POP
8436: POP
// end ;
8437: PPOPN 1
8439: END
// every 10 10$0 do
8440: GO 8442
8442: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8443: CALL 2567 0 0
8447: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8448: LD_INT 0
8450: PPUSH
8451: PPUSH
// if debugMode then
8452: LD_EXP 32
8456: IFFALSE 8473
// unit := NewCharacter ( ident ) ;
8458: LD_ADDR_VAR 0 5
8462: PUSH
8463: LD_VAR 0 1
8467: PPUSH
8468: CALL_OW 25
8472: ST_TO_ADDR
// if exist_mode and not debugMode then
8473: LD_VAR 0 2
8477: PUSH
8478: LD_EXP 32
8482: NOT
8483: AND
8484: IFFALSE 8509
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8486: LD_ADDR_VAR 0 5
8490: PUSH
8491: LD_EXP 31
8495: PUSH
8496: LD_VAR 0 1
8500: STR
8501: PPUSH
8502: CALL_OW 34
8506: ST_TO_ADDR
8507: GO 8531
// if not debugMode then
8509: LD_EXP 32
8513: NOT
8514: IFFALSE 8531
// unit := NewCharacter ( ident ) ;
8516: LD_ADDR_VAR 0 5
8520: PUSH
8521: LD_VAR 0 1
8525: PPUSH
8526: CALL_OW 25
8530: ST_TO_ADDR
// if class then
8531: LD_VAR 0 3
8535: IFFALSE 8551
// SetClass ( unit , class ) ;
8537: LD_VAR 0 5
8541: PPUSH
8542: LD_VAR 0 3
8546: PPUSH
8547: CALL_OW 336
// result := unit ;
8551: LD_ADDR_VAR 0 4
8555: PUSH
8556: LD_VAR 0 5
8560: ST_TO_ADDR
// end ;
8561: LD_VAR 0 4
8565: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8566: LD_INT 0
8568: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 255
8578: PUSH
8579: LD_VAR 0 3
8583: EQUAL
8584: PUSH
8585: LD_VAR 0 1
8589: PPUSH
8590: CALL_OW 302
8594: AND
8595: IFFALSE 8617
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: LD_EXP 30
8606: PUSH
8607: LD_VAR 0 2
8611: STR
8612: PPUSH
8613: CALL_OW 38
// end ;
8617: LD_VAR 0 4
8621: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8622: LD_INT 0
8624: PPUSH
8625: PPUSH
8626: PPUSH
// resultCharactersToSave = [ ] ;
8627: LD_ADDR_VAR 0 6
8631: PUSH
8632: EMPTY
8633: ST_TO_ADDR
// for unit in characters do
8634: LD_ADDR_VAR 0 5
8638: PUSH
8639: LD_VAR 0 1
8643: PUSH
8644: FOR_IN
8645: IFFALSE 8693
// if GetSide ( unit ) = side and IsOK ( unit ) then
8647: LD_VAR 0 5
8651: PPUSH
8652: CALL_OW 255
8656: PUSH
8657: LD_VAR 0 3
8661: EQUAL
8662: PUSH
8663: LD_VAR 0 5
8667: PPUSH
8668: CALL_OW 302
8672: AND
8673: IFFALSE 8691
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8675: LD_ADDR_VAR 0 6
8679: PUSH
8680: LD_VAR 0 6
8684: PUSH
8685: LD_VAR 0 5
8689: ADD
8690: ST_TO_ADDR
8691: GO 8644
8693: POP
8694: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8695: LD_VAR 0 6
8699: PPUSH
8700: LD_EXP 30
8704: PUSH
8705: LD_VAR 0 2
8709: STR
8710: PPUSH
8711: CALL_OW 38
// end ;
8715: LD_VAR 0 4
8719: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8720: LD_INT 0
8722: PPUSH
8723: PPUSH
// for unit in units do
8724: LD_ADDR_VAR 0 5
8728: PUSH
8729: LD_VAR 0 1
8733: PUSH
8734: FOR_IN
8735: IFFALSE 8758
// PlaceUnitArea ( unit , area , spawnMode ) ;
8737: LD_VAR 0 5
8741: PPUSH
8742: LD_VAR 0 2
8746: PPUSH
8747: LD_VAR 0 3
8751: PPUSH
8752: CALL_OW 49
8756: GO 8734
8758: POP
8759: POP
// end ;
8760: LD_VAR 0 4
8764: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8765: LD_INT 0
8767: PPUSH
8768: PPUSH
8769: PPUSH
8770: PPUSH
// units = characters ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_VAR 0 1
8780: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8781: LD_ADDR_VAR 0 9
8785: PUSH
8786: LD_VAR 0 9
8790: PUSH
8791: LD_EXP 39
8795: PUSH
8796: LD_EXP 40
8800: PUSH
8801: LD_EXP 41
8805: PUSH
8806: LD_EXP 42
8810: PUSH
8811: LD_EXP 43
8815: PUSH
8816: LD_EXP 44
8820: PUSH
8821: LD_EXP 45
8825: PUSH
8826: LD_EXP 46
8830: PUSH
8831: LD_EXP 57
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: DIFF
8847: ST_TO_ADDR
// if not units and not canTalkHero then
8848: LD_VAR 0 9
8852: NOT
8853: PUSH
8854: LD_VAR 0 5
8858: NOT
8859: AND
8860: IFFALSE 8864
// exit ;
8862: GO 9043
// if not units then
8864: LD_VAR 0 9
8868: NOT
8869: IFFALSE 8896
// units = characters diff [ Burlak , Stevens ] ;
8871: LD_ADDR_VAR 0 9
8875: PUSH
8876: LD_VAR 0 1
8880: PUSH
8881: LD_EXP 39
8885: PUSH
8886: LD_EXP 57
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: DIFF
8895: ST_TO_ADDR
// if not units and canTalkHero then
8896: LD_VAR 0 9
8900: NOT
8901: PUSH
8902: LD_VAR 0 5
8906: AND
8907: IFFALSE 8911
// exit ;
8909: GO 9043
// speaker := units [ rand ( 1 , units ) ] ;
8911: LD_ADDR_VAR 0 8
8915: PUSH
8916: LD_VAR 0 9
8920: PUSH
8921: LD_INT 1
8923: PPUSH
8924: LD_VAR 0 9
8928: PPUSH
8929: CALL_OW 12
8933: ARRAY
8934: ST_TO_ADDR
// if radio then
8935: LD_VAR 0 4
8939: IFFALSE 8988
// begin if GetSex ( speaker ) = sex_male then
8941: LD_VAR 0 8
8945: PPUSH
8946: CALL_OW 258
8950: PUSH
8951: LD_INT 1
8953: EQUAL
8954: IFFALSE 8972
// SayRadio ( speaker , dialogMID ) else
8956: LD_VAR 0 8
8960: PPUSH
8961: LD_VAR 0 2
8965: PPUSH
8966: CALL_OW 94
8970: GO 8986
// SayRadio ( speaker , dialogFID ) ;
8972: LD_VAR 0 8
8976: PPUSH
8977: LD_VAR 0 3
8981: PPUSH
8982: CALL_OW 94
// end else
8986: GO 9033
// begin if GetSex ( speaker ) = sex_male then
8988: LD_VAR 0 8
8992: PPUSH
8993: CALL_OW 258
8997: PUSH
8998: LD_INT 1
9000: EQUAL
9001: IFFALSE 9019
// Say ( speaker , dialogMID ) else
9003: LD_VAR 0 8
9007: PPUSH
9008: LD_VAR 0 2
9012: PPUSH
9013: CALL_OW 88
9017: GO 9033
// Say ( speaker , dialogFID ) ;
9019: LD_VAR 0 8
9023: PPUSH
9024: LD_VAR 0 3
9028: PPUSH
9029: CALL_OW 88
// end ; result := speaker ;
9033: LD_ADDR_VAR 0 6
9037: PUSH
9038: LD_VAR 0 8
9042: ST_TO_ADDR
// end ;
9043: LD_VAR 0 6
9047: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9048: LD_INT 0
9050: PPUSH
9051: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9052: LD_ADDR_VAR 0 4
9056: PUSH
9057: LD_VAR 0 2
9061: PPUSH
9062: CALL_OW 254
9066: PUSH
9067: LD_INT 3
9069: MINUS
9070: ST_TO_ADDR
// if dir < 0 then
9071: LD_VAR 0 4
9075: PUSH
9076: LD_INT 0
9078: LESS
9079: IFFALSE 9095
// dir := 6 + dir ;
9081: LD_ADDR_VAR 0 4
9085: PUSH
9086: LD_INT 6
9088: PUSH
9089: LD_VAR 0 4
9093: PLUS
9094: ST_TO_ADDR
// SetDir ( un , dir ) ;
9095: LD_VAR 0 1
9099: PPUSH
9100: LD_VAR 0 4
9104: PPUSH
9105: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9109: LD_VAR 0 1
9113: PPUSH
9114: LD_VAR 0 2
9118: PPUSH
9119: CALL_OW 52
// result = un ;
9123: LD_ADDR_VAR 0 3
9127: PUSH
9128: LD_VAR 0 1
9132: ST_TO_ADDR
// end ;
9133: LD_VAR 0 3
9137: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9138: LD_INT 0
9140: PPUSH
9141: PPUSH
9142: PPUSH
9143: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9144: LD_ADDR_VAR 0 6
9148: PUSH
9149: LD_INT 34
9151: PUSH
9152: LD_INT 71
9154: PUSH
9155: LD_INT 70
9157: PUSH
9158: LD_INT 69
9160: PUSH
9161: LD_INT 39
9163: PUSH
9164: LD_INT 31
9166: PUSH
9167: LD_INT 14
9169: PUSH
9170: LD_INT 10
9172: PUSH
9173: LD_INT 40
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: ST_TO_ADDR
// resultWeapons = [ ] ;
9187: LD_ADDR_VAR 0 5
9191: PUSH
9192: EMPTY
9193: ST_TO_ADDR
// for i := 1 to weaponTechs do
9194: LD_ADDR_VAR 0 4
9198: PUSH
9199: DOUBLE
9200: LD_INT 1
9202: DEC
9203: ST_TO_ADDR
9204: LD_VAR 0 6
9208: PUSH
9209: FOR_TO
9210: IFFALSE 9397
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9212: LD_VAR 0 6
9216: PUSH
9217: LD_VAR 0 4
9221: ARRAY
9222: PPUSH
9223: LD_VAR 0 2
9227: PPUSH
9228: CALL_OW 482
9232: PUSH
9233: LD_VAR 0 6
9237: PUSH
9238: LD_VAR 0 4
9242: ARRAY
9243: PPUSH
9244: LD_VAR 0 1
9248: PPUSH
9249: CALL_OW 321
9253: PUSH
9254: LD_INT 2
9256: EQUAL
9257: AND
9258: IFFALSE 9395
// case nation of nation_american :
9260: LD_VAR 0 2
9264: PUSH
9265: LD_INT 1
9267: DOUBLE
9268: EQUAL
9269: IFTRUE 9273
9271: GO 9308
9273: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9274: LD_ADDR_VAR 0 5
9278: PUSH
9279: LD_VAR 0 5
9283: PUSH
9284: LD_VAR 0 6
9288: PUSH
9289: LD_VAR 0 4
9293: ARRAY
9294: PPUSH
9295: LD_VAR 0 2
9299: PPUSH
9300: CALL 9414 0 2
9304: ADD
9305: ST_TO_ADDR
9306: GO 9395
9308: LD_INT 2
9310: DOUBLE
9311: EQUAL
9312: IFTRUE 9316
9314: GO 9351
9316: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9317: LD_ADDR_VAR 0 5
9321: PUSH
9322: LD_VAR 0 5
9326: PUSH
9327: LD_VAR 0 6
9331: PUSH
9332: LD_VAR 0 4
9336: ARRAY
9337: PPUSH
9338: LD_VAR 0 2
9342: PPUSH
9343: CALL 9414 0 2
9347: ADD
9348: ST_TO_ADDR
9349: GO 9395
9351: LD_INT 3
9353: DOUBLE
9354: EQUAL
9355: IFTRUE 9359
9357: GO 9394
9359: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9360: LD_ADDR_VAR 0 5
9364: PUSH
9365: LD_VAR 0 5
9369: PUSH
9370: LD_VAR 0 6
9374: PUSH
9375: LD_VAR 0 4
9379: ARRAY
9380: PPUSH
9381: LD_VAR 0 2
9385: PPUSH
9386: CALL 9414 0 2
9390: ADD
9391: ST_TO_ADDR
9392: GO 9395
9394: POP
// end ;
9395: GO 9209
9397: POP
9398: POP
// result = resultWeapons ;
9399: LD_ADDR_VAR 0 3
9403: PUSH
9404: LD_VAR 0 5
9408: ST_TO_ADDR
// end ;
9409: LD_VAR 0 3
9413: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9414: LD_INT 0
9416: PPUSH
// case tech of tech_AdvMet :
9417: LD_VAR 0 1
9421: PUSH
9422: LD_INT 34
9424: DOUBLE
9425: EQUAL
9426: IFTRUE 9430
9428: GO 9458
9430: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9431: LD_ADDR_VAR 0 3
9435: PUSH
9436: LD_INT 6
9438: PUSH
9439: LD_STRING 
9441: PUSH
9442: LD_INT 46
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: PUSH
9450: LD_VAR 0 2
9454: ARRAY
9455: ST_TO_ADDR
9456: GO 9747
9458: LD_INT 71
9460: DOUBLE
9461: EQUAL
9462: IFTRUE 9466
9464: GO 9494
9466: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9467: LD_ADDR_VAR 0 3
9471: PUSH
9472: LD_STRING 
9474: PUSH
9475: LD_STRING 
9477: PUSH
9478: LD_INT 47
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: LD_VAR 0 2
9490: ARRAY
9491: ST_TO_ADDR
9492: GO 9747
9494: LD_INT 70
9496: DOUBLE
9497: EQUAL
9498: IFTRUE 9502
9500: GO 9530
9502: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9503: LD_ADDR_VAR 0 3
9507: PUSH
9508: LD_STRING 
9510: PUSH
9511: LD_INT 26
9513: PUSH
9514: LD_STRING 
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: LD_VAR 0 2
9526: ARRAY
9527: ST_TO_ADDR
9528: GO 9747
9530: LD_INT 69
9532: DOUBLE
9533: EQUAL
9534: IFTRUE 9538
9536: GO 9566
9538: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9539: LD_ADDR_VAR 0 3
9543: PUSH
9544: LD_INT 4
9546: PUSH
9547: LD_INT 25
9549: PUSH
9550: LD_INT 43
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: PUSH
9558: LD_VAR 0 2
9562: ARRAY
9563: ST_TO_ADDR
9564: GO 9747
9566: LD_INT 39
9568: DOUBLE
9569: EQUAL
9570: IFTRUE 9574
9572: GO 9602
9574: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9575: LD_ADDR_VAR 0 3
9579: PUSH
9580: LD_INT 5
9582: PUSH
9583: LD_INT 27
9585: PUSH
9586: LD_INT 44
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: LD_VAR 0 2
9598: ARRAY
9599: ST_TO_ADDR
9600: GO 9747
9602: LD_INT 31
9604: DOUBLE
9605: EQUAL
9606: IFTRUE 9610
9608: GO 9638
9610: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9611: LD_ADDR_VAR 0 3
9615: PUSH
9616: LD_STRING 
9618: PUSH
9619: LD_STRING 
9621: PUSH
9622: LD_INT 49
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_VAR 0 2
9634: ARRAY
9635: ST_TO_ADDR
9636: GO 9747
9638: LD_INT 14
9640: DOUBLE
9641: EQUAL
9642: IFTRUE 9646
9644: GO 9674
9646: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9647: LD_ADDR_VAR 0 3
9651: PUSH
9652: LD_INT 10
9654: PUSH
9655: LD_STRING 
9657: PUSH
9658: LD_STRING 
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: LD_VAR 0 2
9670: ARRAY
9671: ST_TO_ADDR
9672: GO 9747
9674: LD_INT 10
9676: DOUBLE
9677: EQUAL
9678: IFTRUE 9682
9680: GO 9710
9682: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9683: LD_ADDR_VAR 0 3
9687: PUSH
9688: LD_INT 9
9690: PUSH
9691: LD_STRING 
9693: PUSH
9694: LD_STRING 
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: PUSH
9702: LD_VAR 0 2
9706: ARRAY
9707: ST_TO_ADDR
9708: GO 9747
9710: LD_INT 40
9712: DOUBLE
9713: EQUAL
9714: IFTRUE 9718
9716: GO 9746
9718: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9719: LD_ADDR_VAR 0 3
9723: PUSH
9724: LD_INT 7
9726: PUSH
9727: LD_INT 28
9729: PUSH
9730: LD_INT 45
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: PUSH
9738: LD_VAR 0 2
9742: ARRAY
9743: ST_TO_ADDR
9744: GO 9747
9746: POP
// end ;
9747: LD_VAR 0 3
9751: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_VAR 0 1
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: CALL_OW 289
9773: PUSH
9774: LD_VAR 0 1
9778: PPUSH
9779: LD_INT 2
9781: PPUSH
9782: CALL_OW 289
9786: PUSH
9787: LD_VAR 0 1
9791: PPUSH
9792: LD_INT 3
9794: PPUSH
9795: CALL_OW 289
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: ST_TO_ADDR
// end ; end_of_file
9805: LD_VAR 0 2
9809: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9810: LD_VAR 0 1
9814: PPUSH
9815: CALL_OW 255
9819: PUSH
9820: LD_INT 3
9822: EQUAL
9823: PUSH
9824: LD_VAR 0 1
9828: PPUSH
9829: CALL_OW 266
9833: PUSH
9834: LD_INT 0
9836: EQUAL
9837: AND
9838: IFFALSE 9852
// SetBname ( building , bukharin ) ;
9840: LD_VAR 0 1
9844: PPUSH
9845: LD_STRING bukharin
9847: PPUSH
9848: CALL_OW 500
// if GetSide ( building ) = 2 then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 255
9861: PUSH
9862: LD_INT 2
9864: EQUAL
9865: IFFALSE 10006
// begin if GetBType ( building ) = b_lab then
9867: LD_VAR 0 1
9871: PPUSH
9872: CALL_OW 266
9876: PUSH
9877: LD_INT 6
9879: EQUAL
9880: IFFALSE 9894
// ComUpgradeLab ( building , b_lab_weapon ) ;
9882: LD_VAR 0 1
9886: PPUSH
9887: LD_INT 10
9889: PPUSH
9890: CALL_OW 147
// if GetBType ( building ) = b_workshop then
9894: LD_VAR 0 1
9898: PPUSH
9899: CALL_OW 266
9903: PUSH
9904: LD_INT 2
9906: EQUAL
9907: IFFALSE 9918
// ComUpgrade ( building ) ;
9909: LD_VAR 0 1
9913: PPUSH
9914: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
9918: LD_VAR 0 1
9922: PPUSH
9923: CALL_OW 266
9927: PUSH
9928: LD_INT 17
9930: EQUAL
9931: IFFALSE 10006
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 2 , 2 , 3 ] [ Difficulty ] , 1 , [ 1 , 1 , 2 ] [ Difficulty ] , true ) ;
9933: LD_INT 2
9935: PPUSH
9936: LD_INT 2
9938: PPUSH
9939: LD_EXP 51
9943: PPUSH
9944: LD_INT 34
9946: PPUSH
9947: LD_INT 39
9949: PPUSH
9950: LD_INT 40
9952: PPUSH
9953: LD_INT 35
9955: PPUSH
9956: LD_INT 2
9958: PUSH
9959: LD_INT 2
9961: PUSH
9962: LD_INT 3
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: LIST
9969: PUSH
9970: LD_OWVAR 67
9974: ARRAY
9975: PPUSH
9976: LD_INT 1
9978: PPUSH
9979: LD_INT 1
9981: PUSH
9982: LD_INT 1
9984: PUSH
9985: LD_INT 2
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: PUSH
9993: LD_OWVAR 67
9997: ARRAY
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL 10822 0 11
// end ; end ;
10006: PPOPN 1
10008: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
10009: LD_VAR 0 2
10013: PPUSH
10014: CALL_OW 255
10018: PUSH
10019: LD_INT 3
10021: EQUAL
10022: PUSH
10023: LD_VAR 0 2
10027: PPUSH
10028: CALL_OW 248
10032: PUSH
10033: LD_INT 3
10035: EQUAL
10036: AND
10037: PUSH
10038: LD_EXP 10
10042: NOT
10043: AND
10044: IFFALSE 10055
// Dial_TameApe ( human ) ;
10046: LD_VAR 0 2
10050: PPUSH
10051: CALL 4444 0 1
// end ;
10055: PPOPN 2
10057: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10058: LD_VAR 0 1
10062: PUSH
10063: LD_INT 1
10065: EQUAL
10066: PUSH
10067: LD_VAR 0 2
10071: PPUSH
10072: CALL_OW 255
10076: PUSH
10077: LD_INT 3
10079: EQUAL
10080: AND
10081: IFFALSE 10087
// Dial_ResearchApeLang ;
10083: CALL 4333 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10087: LD_VAR 0 1
10091: PUSH
10092: LD_INT 2
10094: EQUAL
10095: PUSH
10096: LD_VAR 0 2
10100: PPUSH
10101: CALL_OW 255
10105: PUSH
10106: LD_INT 3
10108: EQUAL
10109: AND
10110: IFFALSE 10116
// Dial_ResearchApePsych ;
10112: CALL 4877 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10116: LD_VAR 0 1
10120: PUSH
10121: LD_INT 11
10123: EQUAL
10124: PUSH
10125: LD_VAR 0 2
10129: PPUSH
10130: CALL_OW 255
10134: PUSH
10135: LD_INT 3
10137: EQUAL
10138: AND
10139: IFFALSE 10145
// Dial_ResearchApeAgress ;
10141: CALL 5069 0 0
// end ;
10145: PPOPN 2
10147: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10148: LD_VAR 0 2
10152: PPUSH
10153: CALL_OW 255
10157: PUSH
10158: LD_INT 3
10160: EQUAL
10161: PUSH
10162: LD_VAR 0 2
10166: PPUSH
10167: CALL_OW 257
10171: PUSH
10172: LD_INT 12
10174: EQUAL
10175: AND
10176: PUSH
10177: LD_VAR 0 1
10181: PPUSH
10182: CALL_OW 266
10186: PUSH
10187: LD_INT 6
10189: EQUAL
10190: PUSH
10191: LD_VAR 0 1
10195: PPUSH
10196: CALL_OW 266
10200: PUSH
10201: LD_INT 7
10203: EQUAL
10204: OR
10205: AND
10206: PUSH
10207: LD_EXP 11
10211: NOT
10212: AND
10213: IFFALSE 10219
// Dial_ApeEnterLab ;
10215: CALL 4665 0 0
// end ;
10219: PPOPN 2
10221: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10222: LD_VAR 0 1
10226: PUSH
10227: LD_EXP 52
10231: IN
10232: IFFALSE 10250
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10234: LD_ADDR_EXP 52
10238: PUSH
10239: LD_EXP 52
10243: PUSH
10244: LD_VAR 0 1
10248: DIFF
10249: ST_TO_ADDR
// if unit in arabianHovercrafts then
10250: LD_VAR 0 1
10254: PUSH
10255: LD_EXP 53
10259: IN
10260: IFFALSE 10278
// arabianHovercrafts = arabianHovercrafts diff unit ;
10262: LD_ADDR_EXP 53
10266: PUSH
10267: LD_EXP 53
10271: PUSH
10272: LD_VAR 0 1
10276: DIFF
10277: ST_TO_ADDR
// if unit in arabianPatrolTroops then
10278: LD_VAR 0 1
10282: PUSH
10283: LD_EXP 54
10287: IN
10288: IFFALSE 10306
// arabianPatrolTroops = arabianPatrolTroops diff unit ;
10290: LD_ADDR_EXP 54
10294: PUSH
10295: LD_EXP 54
10299: PUSH
10300: LD_VAR 0 1
10304: DIFF
10305: ST_TO_ADDR
// end ;
10306: PPOPN 1
10308: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10309: LD_VAR 0 1
10313: PUSH
10314: LD_EXP 51
10318: IN
10319: IFFALSE 10337
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10321: LD_ADDR_EXP 51
10325: PUSH
10326: LD_EXP 51
10330: PUSH
10331: LD_VAR 0 1
10335: DIFF
10336: ST_TO_ADDR
// if unit = Burlak then
10337: LD_VAR 0 1
10341: PUSH
10342: LD_EXP 39
10346: EQUAL
10347: IFFALSE 10353
// Lose_Burlak ;
10349: CALL 17206 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10353: LD_INT 22
10355: PUSH
10356: LD_INT 3
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: LD_INT 21
10365: PUSH
10366: LD_INT 1
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 23
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: PPUSH
10388: CALL_OW 69
10392: PUSH
10393: LD_INT 6
10395: LESS
10396: IFFALSE 10402
// Lose_Survive ;
10398: CALL 17221 0 0
// if GetType ( unit ) = unit_vehicle and GetSide ( unit ) = 2 and GetChassis ( unit ) = ar_hovercraft then
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL_OW 247
10411: PUSH
10412: LD_INT 2
10414: EQUAL
10415: PUSH
10416: LD_VAR 0 1
10420: PPUSH
10421: CALL_OW 255
10425: PUSH
10426: LD_INT 2
10428: EQUAL
10429: AND
10430: PUSH
10431: LD_VAR 0 1
10435: PPUSH
10436: CALL_OW 265
10440: PUSH
10441: LD_INT 11
10443: EQUAL
10444: AND
10445: IFFALSE 10461
// achievement_DestroyedHovercrafts = achievement_DestroyedHovercrafts + 1 ;
10447: LD_ADDR_EXP 25
10451: PUSH
10452: LD_EXP 25
10456: PUSH
10457: LD_INT 1
10459: PLUS
10460: ST_TO_ADDR
// end ;
10461: PPOPN 1
10463: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10464: LD_VAR 0 1
10468: PUSH
10469: LD_INT 3
10471: EQUAL
10472: PUSH
10473: LD_VAR 0 2
10477: PUSH
10478: LD_INT 6
10480: EQUAL
10481: AND
10482: PUSH
10483: LD_VAR 0 1
10487: PUSH
10488: LD_INT 6
10490: EQUAL
10491: PUSH
10492: LD_VAR 0 2
10496: PUSH
10497: LD_INT 3
10499: EQUAL
10500: AND
10501: OR
10502: PUSH
10503: LD_EXP 57
10507: PPUSH
10508: CALL_OW 255
10512: PUSH
10513: LD_INT 6
10515: EQUAL
10516: AND
10517: IFFALSE 10575
// begin stevensFollow = false ;
10519: LD_ADDR_EXP 15
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
// stevensCanExitMap = true ;
10527: LD_ADDR_EXP 19
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// stevensWasInDepot = false ;
10535: LD_ADDR_EXP 18
10539: PUSH
10540: LD_INT 0
10542: ST_TO_ADDR
// stevensDepot = false ;
10543: LD_ADDR_EXP 17
10547: PUSH
10548: LD_INT 0
10550: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10551: LD_EXP 57
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10563: LD_EXP 57
10567: PPUSH
10568: LD_INT 37
10570: PPUSH
10571: CALL_OW 113
// end ; end ; end_of_file
10575: PPOPN 2
10577: END
// export function BuildBase ; var engs ; begin
10578: LD_INT 0
10580: PPUSH
10581: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10582: LD_ADDR_VAR 0 2
10586: PUSH
10587: LD_INT 22
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 21
10599: PUSH
10600: LD_INT 1
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: PUSH
10607: LD_INT 25
10609: PUSH
10610: LD_INT 2
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 69
10626: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10627: LD_VAR 0 2
10631: PPUSH
10632: LD_INT 4
10634: PPUSH
10635: LD_INT 129
10637: PPUSH
10638: LD_INT 74
10640: PPUSH
10641: LD_INT 2
10643: PPUSH
10644: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10648: LD_VAR 0 2
10652: PPUSH
10653: LD_INT 26
10655: PPUSH
10656: LD_INT 128
10658: PPUSH
10659: LD_INT 53
10661: PPUSH
10662: LD_INT 2
10664: PPUSH
10665: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 127 , 56 , 1 ) ;
10669: LD_VAR 0 2
10673: PPUSH
10674: LD_INT 26
10676: PPUSH
10677: LD_INT 127
10679: PPUSH
10680: LD_INT 56
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10690: LD_VAR 0 2
10694: PPUSH
10695: LD_INT 6
10697: PPUSH
10698: LD_INT 138
10700: PPUSH
10701: LD_INT 78
10703: PPUSH
10704: LD_INT 5
10706: PPUSH
10707: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10711: LD_VAR 0 2
10715: PPUSH
10716: LD_INT 2
10718: PPUSH
10719: LD_INT 137
10721: PPUSH
10722: LD_INT 63
10724: PPUSH
10725: LD_INT 4
10727: PPUSH
10728: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10732: LD_VAR 0 2
10736: PPUSH
10737: LD_INT 23
10739: PPUSH
10740: LD_INT 137
10742: PPUSH
10743: LD_INT 60
10745: PPUSH
10746: LD_INT 3
10748: PPUSH
10749: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10753: LD_VAR 0 2
10757: PPUSH
10758: LD_INT 16
10760: PPUSH
10761: LD_INT 140
10763: PPUSH
10764: LD_INT 66
10766: PPUSH
10767: LD_INT 5
10769: PPUSH
10770: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10774: LD_VAR 0 2
10778: PPUSH
10779: LD_INT 17
10781: PPUSH
10782: LD_INT 133
10784: PPUSH
10785: LD_INT 59
10787: PPUSH
10788: LD_INT 2
10790: PPUSH
10791: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10795: LD_INT 1
10797: PUSH
10798: LD_EXP 50
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PPUSH
10807: LD_INT 128
10809: PPUSH
10810: LD_INT 66
10812: PPUSH
10813: CALL_OW 111
// end ;
10817: LD_VAR 0 1
10821: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , offensiveReadyCounter , target1 , target2 , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10822: LD_INT 0
10824: PPUSH
10825: PPUSH
10826: PPUSH
10827: PPUSH
10828: PPUSH
10829: PPUSH
10830: PPUSH
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
10835: PPUSH
10836: PPUSH
10837: PPUSH
10838: PPUSH
10839: PPUSH
10840: PPUSH
10841: PPUSH
10842: PPUSH
10843: PPUSH
10844: PPUSH
10845: PPUSH
10846: PPUSH
10847: PPUSH
10848: PPUSH
10849: PPUSH
10850: PPUSH
10851: PPUSH
10852: PPUSH
10853: PPUSH
10854: PPUSH
10855: PPUSH
// personel = [ ] ;
10856: LD_ADDR_VAR 0 18
10860: PUSH
10861: EMPTY
10862: ST_TO_ADDR
// vehicles = [ ] ;
10863: LD_ADDR_VAR 0 24
10867: PUSH
10868: EMPTY
10869: ST_TO_ADDR
// for unit in basePersonel do
10870: LD_ADDR_VAR 0 17
10874: PUSH
10875: LD_VAR 0 3
10879: PUSH
10880: FOR_IN
10881: IFFALSE 10929
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
10883: LD_ADDR_VAR 0 18
10887: PUSH
10888: LD_VAR 0 18
10892: PUSH
10893: LD_VAR 0 17
10897: PUSH
10898: LD_VAR 0 17
10902: PPUSH
10903: CALL_OW 310
10907: PUSH
10908: LD_VAR 0 17
10912: PPUSH
10913: CALL_OW 302
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: PUSH
10923: EMPTY
10924: LIST
10925: ADD
10926: ST_TO_ADDR
10927: GO 10880
10929: POP
10930: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
10931: LD_ADDR_VAR 0 23
10935: PUSH
10936: LD_VAR 0 4
10940: PPUSH
10941: LD_INT 22
10943: PUSH
10944: LD_VAR 0 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 21
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 50
10965: PUSH
10966: EMPTY
10967: LIST
10968: PUSH
10969: LD_INT 3
10971: PUSH
10972: LD_INT 2
10974: PUSH
10975: LD_INT 31
10977: PUSH
10978: LD_INT 31
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 34
10987: PUSH
10988: LD_INT 12
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 34
10997: PUSH
10998: LD_INT 51
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 34
11007: PUSH
11008: LD_INT 32
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: PPUSH
11032: CALL_OW 70
11036: PUSH
11037: LD_EXP 52
11041: DIFF
11042: PUSH
11043: FOR_IN
11044: IFFALSE 11092
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11046: LD_ADDR_VAR 0 24
11050: PUSH
11051: LD_VAR 0 24
11055: PUSH
11056: LD_VAR 0 23
11060: PUSH
11061: LD_VAR 0 23
11065: PPUSH
11066: CALL_OW 310
11070: PUSH
11071: LD_VAR 0 23
11075: PPUSH
11076: CALL_OW 302
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: ADD
11089: ST_TO_ADDR
11090: GO 11043
11092: POP
11093: POP
// repeat soldiers = [ ] ;
11094: LD_ADDR_VAR 0 19
11098: PUSH
11099: EMPTY
11100: ST_TO_ADDR
// engineers = [ ] ;
11101: LD_ADDR_VAR 0 20
11105: PUSH
11106: EMPTY
11107: ST_TO_ADDR
// mechanics = [ ] ;
11108: LD_ADDR_VAR 0 21
11112: PUSH
11113: EMPTY
11114: ST_TO_ADDR
// scientists = [ ] ;
11115: LD_ADDR_VAR 0 22
11119: PUSH
11120: EMPTY
11121: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11122: LD_ADDR_VAR 0 33
11126: PUSH
11127: LD_VAR 0 4
11131: PPUSH
11132: LD_INT 22
11134: PUSH
11135: LD_VAR 0 1
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 21
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 50
11156: PUSH
11157: EMPTY
11158: LIST
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: LD_INT 30
11165: PUSH
11166: LD_INT 0
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 30
11175: PUSH
11176: LD_INT 1
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 70
11198: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11199: LD_ADDR_VAR 0 34
11203: PUSH
11204: LD_VAR 0 4
11208: PPUSH
11209: LD_INT 22
11211: PUSH
11212: LD_VAR 0 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 21
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 50
11233: PUSH
11234: EMPTY
11235: LIST
11236: PUSH
11237: LD_INT 2
11239: PUSH
11240: LD_INT 30
11242: PUSH
11243: LD_INT 2
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 30
11252: PUSH
11253: LD_INT 3
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 70
11275: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11276: LD_ADDR_VAR 0 35
11280: PUSH
11281: LD_VAR 0 4
11285: PPUSH
11286: LD_INT 22
11288: PUSH
11289: LD_VAR 0 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 3
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 50
11310: PUSH
11311: EMPTY
11312: LIST
11313: PUSH
11314: LD_INT 2
11316: PUSH
11317: LD_INT 30
11319: PUSH
11320: LD_INT 6
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 30
11329: PUSH
11330: LD_INT 7
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: LD_INT 30
11339: PUSH
11340: LD_INT 8
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11364: LD_ADDR_VAR 0 36
11368: PUSH
11369: LD_VAR 0 4
11373: PPUSH
11374: LD_INT 22
11376: PUSH
11377: LD_VAR 0 1
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 21
11388: PUSH
11389: LD_INT 3
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 50
11398: PUSH
11399: EMPTY
11400: LIST
11401: PUSH
11402: LD_INT 2
11404: PUSH
11405: LD_INT 30
11407: PUSH
11408: LD_INT 31
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 30
11417: PUSH
11418: LD_INT 32
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: PPUSH
11436: CALL_OW 70
11440: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11441: LD_ADDR_VAR 0 37
11445: PUSH
11446: LD_VAR 0 4
11450: PPUSH
11451: LD_INT 22
11453: PUSH
11454: LD_VAR 0 1
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 21
11465: PUSH
11466: LD_INT 3
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 50
11475: PUSH
11476: EMPTY
11477: LIST
11478: PUSH
11479: LD_INT 2
11481: PUSH
11482: LD_INT 30
11484: PUSH
11485: LD_INT 4
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 30
11494: PUSH
11495: LD_INT 5
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: PPUSH
11513: CALL_OW 70
11517: ST_TO_ADDR
// for i := 1 to personel do
11518: LD_ADDR_VAR 0 13
11522: PUSH
11523: DOUBLE
11524: LD_INT 1
11526: DEC
11527: ST_TO_ADDR
11528: LD_VAR 0 18
11532: PUSH
11533: FOR_TO
11534: IFFALSE 11740
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11536: LD_VAR 0 18
11540: PUSH
11541: LD_VAR 0 13
11545: ARRAY
11546: PUSH
11547: LD_INT 1
11549: ARRAY
11550: PPUSH
11551: CALL_OW 256
11555: PUSH
11556: LD_INT 1000
11558: EQUAL
11559: IFFALSE 11601
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11561: LD_ADDR_VAR 0 18
11565: PUSH
11566: LD_VAR 0 18
11570: PPUSH
11571: LD_VAR 0 13
11575: PUSH
11576: LD_VAR 0 18
11580: PUSH
11581: LD_VAR 0 13
11585: ARRAY
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PPUSH
11591: LD_INT 1
11593: PPUSH
11594: CALL 28278 0 3
11598: ST_TO_ADDR
// end else
11599: GO 11688
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11601: LD_VAR 0 18
11605: PUSH
11606: LD_VAR 0 13
11610: ARRAY
11611: PUSH
11612: LD_INT 1
11614: ARRAY
11615: PPUSH
11616: CALL_OW 256
11620: PUSH
11621: LD_INT 950
11623: LESSEQUAL
11624: IFFALSE 11688
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
11626: LD_ADDR_VAR 0 18
11630: PUSH
11631: LD_VAR 0 18
11635: PPUSH
11636: LD_VAR 0 13
11640: PUSH
11641: LD_VAR 0 18
11645: PUSH
11646: LD_VAR 0 13
11650: ARRAY
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PPUSH
11656: LD_INT 0
11658: PPUSH
11659: CALL 28278 0 3
11663: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11664: LD_VAR 0 18
11668: PUSH
11669: LD_VAR 0 13
11673: ARRAY
11674: PUSH
11675: LD_INT 1
11677: ARRAY
11678: PPUSH
11679: LD_VAR 0 5
11683: PPUSH
11684: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11688: LD_VAR 0 18
11692: PUSH
11693: LD_VAR 0 13
11697: ARRAY
11698: PUSH
11699: LD_INT 1
11701: ARRAY
11702: PPUSH
11703: CALL_OW 256
11707: PUSH
11708: LD_INT 250
11710: LESS
11711: IFFALSE 11738
// personel = personel diff [ personel [ i ] ] ;
11713: LD_ADDR_VAR 0 18
11717: PUSH
11718: LD_VAR 0 18
11722: PUSH
11723: LD_VAR 0 18
11727: PUSH
11728: LD_VAR 0 13
11732: ARRAY
11733: PUSH
11734: EMPTY
11735: LIST
11736: DIFF
11737: ST_TO_ADDR
// end ;
11738: GO 11533
11740: POP
11741: POP
// for i := 1 to vehicles do
11742: LD_ADDR_VAR 0 13
11746: PUSH
11747: DOUBLE
11748: LD_INT 1
11750: DEC
11751: ST_TO_ADDR
11752: LD_VAR 0 24
11756: PUSH
11757: FOR_TO
11758: IFFALSE 12144
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
11760: LD_VAR 0 24
11764: PUSH
11765: LD_VAR 0 13
11769: ARRAY
11770: PUSH
11771: LD_INT 1
11773: ARRAY
11774: PPUSH
11775: CALL_OW 261
11779: PUSH
11780: LD_INT 50
11782: LESS
11783: IFFALSE 11807
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
11785: LD_VAR 0 24
11789: PUSH
11790: LD_VAR 0 13
11794: ARRAY
11795: PUSH
11796: LD_INT 1
11798: ARRAY
11799: PPUSH
11800: LD_INT 100
11802: PPUSH
11803: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11807: LD_VAR 0 24
11811: PUSH
11812: LD_VAR 0 13
11816: ARRAY
11817: PUSH
11818: LD_INT 1
11820: ARRAY
11821: PPUSH
11822: CALL_OW 256
11826: PUSH
11827: LD_INT 1000
11829: EQUAL
11830: IFFALSE 12005
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11832: LD_VAR 0 24
11836: PUSH
11837: LD_VAR 0 13
11841: ARRAY
11842: PUSH
11843: LD_INT 1
11845: ARRAY
11846: PPUSH
11847: CALL_OW 263
11851: PUSH
11852: LD_INT 1
11854: EQUAL
11855: IFFALSE 11913
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
11857: LD_VAR 0 24
11861: PUSH
11862: LD_VAR 0 13
11866: ARRAY
11867: PUSH
11868: LD_INT 2
11870: ARRAY
11871: PPUSH
11872: CALL_OW 310
11876: NOT
11877: IFFALSE 11913
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
11879: LD_VAR 0 24
11883: PUSH
11884: LD_VAR 0 13
11888: ARRAY
11889: PUSH
11890: LD_INT 2
11892: ARRAY
11893: PPUSH
11894: LD_VAR 0 24
11898: PUSH
11899: LD_VAR 0 13
11903: ARRAY
11904: PUSH
11905: LD_INT 1
11907: ARRAY
11908: PPUSH
11909: CALL_OW 120
// if offensiveunits < vehiclesToAttackAmount then
11913: LD_VAR 0 27
11917: PUSH
11918: LD_VAR 0 10
11922: LESS
11923: IFFALSE 11965
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
11925: LD_ADDR_VAR 0 24
11929: PUSH
11930: LD_VAR 0 24
11934: PPUSH
11935: LD_VAR 0 13
11939: PUSH
11940: LD_VAR 0 24
11944: PUSH
11945: LD_VAR 0 13
11949: ARRAY
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: LD_INT 3
11957: PPUSH
11958: CALL 28278 0 3
11962: ST_TO_ADDR
11963: GO 12003
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
11965: LD_ADDR_VAR 0 24
11969: PUSH
11970: LD_VAR 0 24
11974: PPUSH
11975: LD_VAR 0 13
11979: PUSH
11980: LD_VAR 0 24
11984: PUSH
11985: LD_VAR 0 13
11989: ARRAY
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PPUSH
11995: LD_INT 2
11997: PPUSH
11998: CALL 28278 0 3
12002: ST_TO_ADDR
// end else
12003: GO 12092
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12005: LD_VAR 0 24
12009: PUSH
12010: LD_VAR 0 13
12014: ARRAY
12015: PUSH
12016: LD_INT 1
12018: ARRAY
12019: PPUSH
12020: CALL_OW 256
12024: PUSH
12025: LD_INT 650
12027: LESSEQUAL
12028: IFFALSE 12092
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12030: LD_ADDR_VAR 0 24
12034: PUSH
12035: LD_VAR 0 24
12039: PPUSH
12040: LD_VAR 0 13
12044: PUSH
12045: LD_VAR 0 24
12049: PUSH
12050: LD_VAR 0 13
12054: ARRAY
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PPUSH
12060: LD_INT 0
12062: PPUSH
12063: CALL 28278 0 3
12067: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12068: LD_VAR 0 24
12072: PUSH
12073: LD_VAR 0 13
12077: ARRAY
12078: PUSH
12079: LD_INT 1
12081: ARRAY
12082: PPUSH
12083: LD_VAR 0 6
12087: PPUSH
12088: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12092: LD_VAR 0 24
12096: PUSH
12097: LD_VAR 0 13
12101: ARRAY
12102: PUSH
12103: LD_INT 1
12105: ARRAY
12106: PPUSH
12107: CALL_OW 256
12111: PUSH
12112: LD_INT 250
12114: LESS
12115: IFFALSE 12142
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12117: LD_ADDR_VAR 0 24
12121: PUSH
12122: LD_VAR 0 24
12126: PUSH
12127: LD_VAR 0 24
12131: PUSH
12132: LD_VAR 0 13
12136: ARRAY
12137: PUSH
12138: EMPTY
12139: LIST
12140: DIFF
12141: ST_TO_ADDR
// end ;
12142: GO 11757
12144: POP
12145: POP
// for i := 1 to personel do
12146: LD_ADDR_VAR 0 13
12150: PUSH
12151: DOUBLE
12152: LD_INT 1
12154: DEC
12155: ST_TO_ADDR
12156: LD_VAR 0 18
12160: PUSH
12161: FOR_TO
12162: IFFALSE 12203
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12164: LD_ADDR_VAR 0 19
12168: PUSH
12169: LD_VAR 0 19
12173: PUSH
12174: LD_VAR 0 18
12178: PUSH
12179: LD_VAR 0 13
12183: ARRAY
12184: PPUSH
12185: LD_INT 25
12187: PUSH
12188: LD_INT 1
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PPUSH
12195: CALL_OW 72
12199: ADD
12200: ST_TO_ADDR
12201: GO 12161
12203: POP
12204: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12205: LD_VAR 0 19
12209: PUSH
12210: LD_VAR 0 36
12214: PPUSH
12215: LD_INT 3
12217: PUSH
12218: LD_INT 59
12220: PUSH
12221: EMPTY
12222: LIST
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL_OW 72
12232: AND
12233: IFFALSE 12521
// begin for i := 1 to personel do
12235: LD_ADDR_VAR 0 13
12239: PUSH
12240: DOUBLE
12241: LD_INT 1
12243: DEC
12244: ST_TO_ADDR
12245: LD_VAR 0 18
12249: PUSH
12250: FOR_TO
12251: IFFALSE 12517
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12253: LD_VAR 0 18
12257: PUSH
12258: LD_VAR 0 13
12262: ARRAY
12263: PUSH
12264: LD_INT 1
12266: ARRAY
12267: PPUSH
12268: CALL_OW 257
12272: PUSH
12273: LD_INT 1
12275: EQUAL
12276: PUSH
12277: LD_VAR 0 18
12281: PUSH
12282: LD_VAR 0 13
12286: ARRAY
12287: PUSH
12288: LD_INT 3
12290: ARRAY
12291: PUSH
12292: LD_INT 1
12294: EQUAL
12295: AND
12296: IFFALSE 12515
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12298: LD_VAR 0 18
12302: PUSH
12303: LD_VAR 0 13
12307: ARRAY
12308: PUSH
12309: LD_INT 1
12311: ARRAY
12312: PPUSH
12313: CALL_OW 437
12317: IFFALSE 12418
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12319: LD_VAR 0 18
12323: PUSH
12324: LD_VAR 0 13
12328: ARRAY
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: PPUSH
12334: CALL_OW 437
12338: PUSH
12339: LD_INT 1
12341: ARRAY
12342: PUSH
12343: LD_INT 1
12345: ARRAY
12346: PUSH
12347: LD_STRING e
12349: EQUAL
12350: PUSH
12351: LD_VAR 0 18
12355: PUSH
12356: LD_VAR 0 13
12360: ARRAY
12361: PUSH
12362: LD_INT 1
12364: ARRAY
12365: PPUSH
12366: CALL_OW 437
12370: PUSH
12371: LD_INT 1
12373: ARRAY
12374: PUSH
12375: LD_INT 4
12377: ARRAY
12378: PPUSH
12379: CALL_OW 266
12383: PUSH
12384: LD_INT 4
12386: PUSH
12387: LD_INT 5
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: IN
12394: AND
12395: IFFALSE 12418
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12397: LD_VAR 0 18
12401: PUSH
12402: LD_VAR 0 13
12406: ARRAY
12407: PUSH
12408: LD_INT 1
12410: ARRAY
12411: PPUSH
12412: EMPTY
12413: PPUSH
12414: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12418: LD_ADDR_VAR 0 40
12422: PUSH
12423: LD_VAR 0 36
12427: PPUSH
12428: LD_INT 3
12430: PUSH
12431: LD_INT 59
12433: PUSH
12434: EMPTY
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PPUSH
12441: CALL_OW 72
12445: PUSH
12446: FOR_IN
12447: IFFALSE 12513
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12449: LD_VAR 0 18
12453: PUSH
12454: LD_VAR 0 13
12458: ARRAY
12459: PUSH
12460: LD_INT 1
12462: ARRAY
12463: PPUSH
12464: CALL_OW 310
12468: PPUSH
12469: CALL_OW 266
12473: PUSH
12474: LD_INT 31
12476: PUSH
12477: LD_INT 32
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: IN
12484: NOT
12485: IFFALSE 12511
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12487: LD_VAR 0 18
12491: PUSH
12492: LD_VAR 0 13
12496: ARRAY
12497: PUSH
12498: LD_INT 1
12500: ARRAY
12501: PPUSH
12502: LD_VAR 0 40
12506: PPUSH
12507: CALL_OW 120
12511: GO 12446
12513: POP
12514: POP
// end ; end ;
12515: GO 12250
12517: POP
12518: POP
// end else
12519: GO 12736
// if soldiers and barracks then
12521: LD_VAR 0 19
12525: PUSH
12526: LD_VAR 0 37
12530: AND
12531: IFFALSE 12736
// for i := 1 to personel do
12533: LD_ADDR_VAR 0 13
12537: PUSH
12538: DOUBLE
12539: LD_INT 1
12541: DEC
12542: ST_TO_ADDR
12543: LD_VAR 0 18
12547: PUSH
12548: FOR_TO
12549: IFFALSE 12734
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12551: LD_VAR 0 18
12555: PUSH
12556: LD_VAR 0 13
12560: ARRAY
12561: PUSH
12562: LD_INT 1
12564: ARRAY
12565: PPUSH
12566: CALL_OW 257
12570: PUSH
12571: LD_INT 1
12573: EQUAL
12574: PUSH
12575: LD_VAR 0 18
12579: PUSH
12580: LD_VAR 0 13
12584: ARRAY
12585: PUSH
12586: LD_INT 3
12588: ARRAY
12589: PUSH
12590: LD_INT 1
12592: EQUAL
12593: AND
12594: PUSH
12595: LD_VAR 0 18
12599: PUSH
12600: LD_VAR 0 13
12604: ARRAY
12605: PUSH
12606: LD_INT 1
12608: ARRAY
12609: PPUSH
12610: LD_INT 56
12612: PUSH
12613: EMPTY
12614: LIST
12615: PPUSH
12616: CALL_OW 72
12620: AND
12621: IFFALSE 12732
// begin if not personel [ i ] [ 2 ] then
12623: LD_VAR 0 18
12627: PUSH
12628: LD_VAR 0 13
12632: ARRAY
12633: PUSH
12634: LD_INT 2
12636: ARRAY
12637: NOT
12638: IFFALSE 12698
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12640: LD_ADDR_VAR 0 18
12644: PUSH
12645: LD_VAR 0 18
12649: PPUSH
12650: LD_VAR 0 13
12654: PUSH
12655: LD_VAR 0 18
12659: PUSH
12660: LD_VAR 0 13
12664: ARRAY
12665: PUSH
12666: LD_INT 1
12668: MINUS
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PPUSH
12674: LD_VAR 0 37
12678: PUSH
12679: LD_INT 1
12681: PPUSH
12682: LD_VAR 0 37
12686: PPUSH
12687: CALL_OW 12
12691: ARRAY
12692: PPUSH
12693: CALL 28278 0 3
12697: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12698: LD_VAR 0 18
12702: PUSH
12703: LD_VAR 0 13
12707: ARRAY
12708: PUSH
12709: LD_INT 1
12711: ARRAY
12712: PPUSH
12713: LD_VAR 0 18
12717: PUSH
12718: LD_VAR 0 13
12722: ARRAY
12723: PUSH
12724: LD_INT 2
12726: ARRAY
12727: PPUSH
12728: CALL_OW 120
// end ;
12732: GO 12548
12734: POP
12735: POP
// for i := 1 to personel do
12736: LD_ADDR_VAR 0 13
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_VAR 0 18
12750: PUSH
12751: FOR_TO
12752: IFFALSE 12793
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12754: LD_ADDR_VAR 0 20
12758: PUSH
12759: LD_VAR 0 20
12763: PUSH
12764: LD_VAR 0 18
12768: PUSH
12769: LD_VAR 0 13
12773: ARRAY
12774: PPUSH
12775: LD_INT 25
12777: PUSH
12778: LD_INT 2
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PPUSH
12785: CALL_OW 72
12789: ADD
12790: ST_TO_ADDR
12791: GO 12751
12793: POP
12794: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12795: LD_VAR 0 20
12799: PUSH
12800: LD_VAR 0 4
12804: PPUSH
12805: LD_INT 22
12807: PUSH
12808: LD_VAR 0 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 21
12819: PUSH
12820: LD_INT 3
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 3
12829: PUSH
12830: LD_INT 24
12832: PUSH
12833: LD_INT 1000
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: LIST
12848: PPUSH
12849: CALL_OW 70
12853: AND
12854: IFFALSE 13130
// begin for i := 1 to personel do
12856: LD_ADDR_VAR 0 13
12860: PUSH
12861: DOUBLE
12862: LD_INT 1
12864: DEC
12865: ST_TO_ADDR
12866: LD_VAR 0 18
12870: PUSH
12871: FOR_TO
12872: IFFALSE 13126
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
12874: LD_VAR 0 18
12878: PUSH
12879: LD_VAR 0 13
12883: ARRAY
12884: PUSH
12885: LD_INT 1
12887: ARRAY
12888: PPUSH
12889: CALL_OW 257
12893: PUSH
12894: LD_INT 2
12896: EQUAL
12897: PUSH
12898: LD_VAR 0 18
12902: PUSH
12903: LD_VAR 0 13
12907: ARRAY
12908: PUSH
12909: LD_INT 3
12911: ARRAY
12912: PUSH
12913: LD_INT 1
12915: EQUAL
12916: AND
12917: IFFALSE 13124
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12919: LD_VAR 0 18
12923: PUSH
12924: LD_VAR 0 13
12928: ARRAY
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: CALL_OW 437
12938: IFFALSE 12994
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
12940: LD_VAR 0 18
12944: PUSH
12945: LD_VAR 0 13
12949: ARRAY
12950: PUSH
12951: LD_INT 1
12953: ARRAY
12954: PPUSH
12955: CALL_OW 437
12959: PUSH
12960: LD_INT 1
12962: ARRAY
12963: PUSH
12964: LD_INT 1
12966: ARRAY
12967: PUSH
12968: LD_STRING e
12970: EQUAL
12971: IFFALSE 12994
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12973: LD_VAR 0 18
12977: PUSH
12978: LD_VAR 0 13
12982: ARRAY
12983: PUSH
12984: LD_INT 1
12986: ARRAY
12987: PPUSH
12988: EMPTY
12989: PPUSH
12990: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
12994: LD_VAR 0 18
12998: PUSH
12999: LD_VAR 0 13
13003: ARRAY
13004: PUSH
13005: LD_INT 1
13007: ARRAY
13008: PPUSH
13009: CALL_OW 310
13013: IFFALSE 13034
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13015: LD_VAR 0 18
13019: PUSH
13020: LD_VAR 0 13
13024: ARRAY
13025: PUSH
13026: LD_INT 1
13028: ARRAY
13029: PPUSH
13030: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13034: LD_ADDR_VAR 0 38
13038: PUSH
13039: LD_VAR 0 4
13043: PPUSH
13044: LD_INT 22
13046: PUSH
13047: LD_VAR 0 1
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 21
13058: PUSH
13059: LD_INT 3
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 3
13068: PUSH
13069: LD_INT 24
13071: PUSH
13072: LD_INT 1000
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 70
13092: PUSH
13093: FOR_IN
13094: IFFALSE 13122
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13096: LD_VAR 0 18
13100: PUSH
13101: LD_VAR 0 13
13105: ARRAY
13106: PUSH
13107: LD_INT 1
13109: ARRAY
13110: PPUSH
13111: LD_VAR 0 38
13115: PPUSH
13116: CALL_OW 190
13120: GO 13093
13122: POP
13123: POP
// end ;
13124: GO 12871
13126: POP
13127: POP
// end else
13128: GO 13392
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13130: LD_VAR 0 20
13134: PUSH
13135: LD_VAR 0 20
13139: PPUSH
13140: LD_INT 56
13142: PUSH
13143: EMPTY
13144: LIST
13145: PPUSH
13146: CALL_OW 72
13150: AND
13151: PUSH
13152: LD_VAR 0 33
13156: AND
13157: IFFALSE 13392
// for i := 1 to personel do
13159: LD_ADDR_VAR 0 13
13163: PUSH
13164: DOUBLE
13165: LD_INT 1
13167: DEC
13168: ST_TO_ADDR
13169: LD_VAR 0 18
13173: PUSH
13174: FOR_TO
13175: IFFALSE 13390
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13177: LD_VAR 0 18
13181: PUSH
13182: LD_VAR 0 13
13186: ARRAY
13187: PUSH
13188: LD_INT 1
13190: ARRAY
13191: PPUSH
13192: CALL_OW 257
13196: PUSH
13197: LD_INT 2
13199: EQUAL
13200: PUSH
13201: LD_VAR 0 18
13205: PUSH
13206: LD_VAR 0 13
13210: ARRAY
13211: PUSH
13212: LD_INT 3
13214: ARRAY
13215: PUSH
13216: LD_INT 1
13218: EQUAL
13219: AND
13220: IFFALSE 13388
// begin if not personel [ i ] [ 2 ] then
13222: LD_VAR 0 18
13226: PUSH
13227: LD_VAR 0 13
13231: ARRAY
13232: PUSH
13233: LD_INT 2
13235: ARRAY
13236: NOT
13237: IFFALSE 13354
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13239: LD_ADDR_VAR 0 18
13243: PUSH
13244: LD_VAR 0 18
13248: PPUSH
13249: LD_VAR 0 13
13253: PUSH
13254: LD_VAR 0 18
13258: PUSH
13259: LD_VAR 0 13
13263: ARRAY
13264: PUSH
13265: LD_INT 1
13267: MINUS
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PPUSH
13273: LD_VAR 0 4
13277: PPUSH
13278: LD_INT 22
13280: PUSH
13281: LD_VAR 0 1
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 21
13292: PUSH
13293: LD_INT 3
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 50
13302: PUSH
13303: EMPTY
13304: LIST
13305: PUSH
13306: LD_INT 2
13308: PUSH
13309: LD_INT 30
13311: PUSH
13312: LD_INT 0
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: LD_INT 30
13321: PUSH
13322: LD_INT 1
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 70
13344: PUSH
13345: LD_INT 1
13347: ARRAY
13348: PPUSH
13349: CALL 28278 0 3
13353: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13354: LD_VAR 0 18
13358: PUSH
13359: LD_VAR 0 13
13363: ARRAY
13364: PUSH
13365: LD_INT 1
13367: ARRAY
13368: PPUSH
13369: LD_VAR 0 18
13373: PUSH
13374: LD_VAR 0 13
13378: ARRAY
13379: PUSH
13380: LD_INT 2
13382: ARRAY
13383: PPUSH
13384: CALL_OW 120
// end ; end ;
13388: GO 13174
13390: POP
13391: POP
// for i := 1 to personel do
13392: LD_ADDR_VAR 0 13
13396: PUSH
13397: DOUBLE
13398: LD_INT 1
13400: DEC
13401: ST_TO_ADDR
13402: LD_VAR 0 18
13406: PUSH
13407: FOR_TO
13408: IFFALSE 13449
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13410: LD_ADDR_VAR 0 21
13414: PUSH
13415: LD_VAR 0 21
13419: PUSH
13420: LD_VAR 0 18
13424: PUSH
13425: LD_VAR 0 13
13429: ARRAY
13430: PPUSH
13431: LD_INT 25
13433: PUSH
13434: LD_INT 3
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PPUSH
13441: CALL_OW 72
13445: ADD
13446: ST_TO_ADDR
13447: GO 13407
13449: POP
13450: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13451: LD_VAR 0 21
13455: PUSH
13456: LD_VAR 0 4
13460: PPUSH
13461: LD_INT 22
13463: PUSH
13464: LD_VAR 0 1
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 21
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 3
13485: PUSH
13486: LD_INT 24
13488: PUSH
13489: LD_INT 1000
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 70
13509: AND
13510: IFFALSE 13944
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13512: LD_ADDR_VAR 0 39
13516: PUSH
13517: LD_VAR 0 4
13521: PPUSH
13522: LD_INT 22
13524: PUSH
13525: LD_VAR 0 1
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 21
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 3
13546: PUSH
13547: LD_INT 24
13549: PUSH
13550: LD_INT 1000
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: PPUSH
13566: CALL_OW 70
13570: PUSH
13571: FOR_IN
13572: IFFALSE 13940
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13574: LD_VAR 0 39
13578: PPUSH
13579: LD_VAR 0 6
13583: PPUSH
13584: CALL_OW 299
13588: PUSH
13589: LD_INT 5
13591: LESS
13592: IFFALSE 13938
// begin for i := 1 to vehicles do
13594: LD_ADDR_VAR 0 13
13598: PUSH
13599: DOUBLE
13600: LD_INT 1
13602: DEC
13603: ST_TO_ADDR
13604: LD_VAR 0 24
13608: PUSH
13609: FOR_TO
13610: IFFALSE 13679
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13612: LD_VAR 0 24
13616: PUSH
13617: LD_VAR 0 13
13621: ARRAY
13622: PUSH
13623: LD_INT 1
13625: ARRAY
13626: PUSH
13627: LD_VAR 0 39
13631: EQUAL
13632: IFFALSE 13653
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13634: LD_VAR 0 24
13638: PUSH
13639: LD_VAR 0 13
13643: ARRAY
13644: PUSH
13645: LD_INT 2
13647: ARRAY
13648: PPUSH
13649: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13653: LD_VAR 0 24
13657: PUSH
13658: LD_VAR 0 13
13662: ARRAY
13663: PUSH
13664: LD_INT 2
13666: ARRAY
13667: PPUSH
13668: LD_VAR 0 39
13672: PPUSH
13673: CALL_OW 189
// end ;
13677: GO 13609
13679: POP
13680: POP
// for i := 1 to personel do
13681: LD_ADDR_VAR 0 13
13685: PUSH
13686: DOUBLE
13687: LD_INT 1
13689: DEC
13690: ST_TO_ADDR
13691: LD_VAR 0 18
13695: PUSH
13696: FOR_TO
13697: IFFALSE 13936
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13699: LD_VAR 0 18
13703: PUSH
13704: LD_VAR 0 13
13708: ARRAY
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PPUSH
13714: CALL_OW 257
13718: PUSH
13719: LD_INT 3
13721: EQUAL
13722: PUSH
13723: LD_VAR 0 18
13727: PUSH
13728: LD_VAR 0 13
13732: ARRAY
13733: PUSH
13734: LD_INT 3
13736: ARRAY
13737: PUSH
13738: LD_INT 1
13740: EQUAL
13741: AND
13742: IFFALSE 13934
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13744: LD_VAR 0 18
13748: PUSH
13749: LD_VAR 0 13
13753: ARRAY
13754: PUSH
13755: LD_INT 1
13757: ARRAY
13758: PPUSH
13759: CALL_OW 437
13763: IFFALSE 13819
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13765: LD_VAR 0 18
13769: PUSH
13770: LD_VAR 0 13
13774: ARRAY
13775: PUSH
13776: LD_INT 1
13778: ARRAY
13779: PPUSH
13780: CALL_OW 437
13784: PUSH
13785: LD_INT 1
13787: ARRAY
13788: PUSH
13789: LD_INT 1
13791: ARRAY
13792: PUSH
13793: LD_STRING e
13795: EQUAL
13796: IFFALSE 13819
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13798: LD_VAR 0 18
13802: PUSH
13803: LD_VAR 0 13
13807: ARRAY
13808: PUSH
13809: LD_INT 1
13811: ARRAY
13812: PPUSH
13813: EMPTY
13814: PPUSH
13815: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13819: LD_VAR 0 18
13823: PUSH
13824: LD_VAR 0 13
13828: ARRAY
13829: PUSH
13830: LD_INT 1
13832: ARRAY
13833: PPUSH
13834: CALL_OW 310
13838: IFFALSE 13859
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13840: LD_VAR 0 18
13844: PUSH
13845: LD_VAR 0 13
13849: ARRAY
13850: PUSH
13851: LD_INT 1
13853: ARRAY
13854: PPUSH
13855: CALL_OW 122
// if not IsInArea ( personel [ i ] [ 1 ] , baseArea ) then
13859: LD_VAR 0 18
13863: PUSH
13864: LD_VAR 0 13
13868: ARRAY
13869: PUSH
13870: LD_INT 1
13872: ARRAY
13873: PPUSH
13874: LD_VAR 0 4
13878: PPUSH
13879: CALL_OW 308
13883: NOT
13884: IFFALSE 13910
// ComMoveToArea ( personel [ i ] [ 1 ] , baseArea ) ;
13886: LD_VAR 0 18
13890: PUSH
13891: LD_VAR 0 13
13895: ARRAY
13896: PUSH
13897: LD_INT 1
13899: ARRAY
13900: PPUSH
13901: LD_VAR 0 4
13905: PPUSH
13906: CALL_OW 113
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
13910: LD_VAR 0 18
13914: PUSH
13915: LD_VAR 0 13
13919: ARRAY
13920: PUSH
13921: LD_INT 1
13923: ARRAY
13924: PPUSH
13925: LD_VAR 0 39
13929: PPUSH
13930: CALL_OW 189
// end ;
13934: GO 13696
13936: POP
13937: POP
// end ; end ;
13938: GO 13571
13940: POP
13941: POP
// end else
13942: GO 14149
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
13944: LD_VAR 0 21
13948: PUSH
13949: LD_VAR 0 21
13953: PPUSH
13954: LD_INT 56
13956: PUSH
13957: EMPTY
13958: LIST
13959: PPUSH
13960: CALL_OW 72
13964: AND
13965: PUSH
13966: LD_VAR 0 34
13970: AND
13971: IFFALSE 14149
// for i := 1 to personel do
13973: LD_ADDR_VAR 0 13
13977: PUSH
13978: DOUBLE
13979: LD_INT 1
13981: DEC
13982: ST_TO_ADDR
13983: LD_VAR 0 18
13987: PUSH
13988: FOR_TO
13989: IFFALSE 14147
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13991: LD_VAR 0 18
13995: PUSH
13996: LD_VAR 0 13
14000: ARRAY
14001: PUSH
14002: LD_INT 1
14004: ARRAY
14005: PPUSH
14006: CALL_OW 257
14010: PUSH
14011: LD_INT 3
14013: EQUAL
14014: PUSH
14015: LD_VAR 0 18
14019: PUSH
14020: LD_VAR 0 13
14024: ARRAY
14025: PUSH
14026: LD_INT 3
14028: ARRAY
14029: PUSH
14030: LD_INT 1
14032: EQUAL
14033: AND
14034: IFFALSE 14145
// begin if not personel [ i ] [ 2 ] then
14036: LD_VAR 0 18
14040: PUSH
14041: LD_VAR 0 13
14045: ARRAY
14046: PUSH
14047: LD_INT 2
14049: ARRAY
14050: NOT
14051: IFFALSE 14111
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
14053: LD_ADDR_VAR 0 18
14057: PUSH
14058: LD_VAR 0 18
14062: PPUSH
14063: LD_VAR 0 13
14067: PUSH
14068: LD_VAR 0 18
14072: PUSH
14073: LD_VAR 0 13
14077: ARRAY
14078: PUSH
14079: LD_INT 1
14081: MINUS
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PPUSH
14087: LD_VAR 0 34
14091: PUSH
14092: LD_INT 1
14094: PPUSH
14095: LD_VAR 0 34
14099: PPUSH
14100: CALL_OW 12
14104: ARRAY
14105: PPUSH
14106: CALL 28278 0 3
14110: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14111: LD_VAR 0 18
14115: PUSH
14116: LD_VAR 0 13
14120: ARRAY
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: LD_VAR 0 18
14130: PUSH
14131: LD_VAR 0 13
14135: ARRAY
14136: PUSH
14137: LD_INT 2
14139: ARRAY
14140: PPUSH
14141: CALL_OW 120
// end ;
14145: GO 13988
14147: POP
14148: POP
// for i := 1 to personel do
14149: LD_ADDR_VAR 0 13
14153: PUSH
14154: DOUBLE
14155: LD_INT 1
14157: DEC
14158: ST_TO_ADDR
14159: LD_VAR 0 18
14163: PUSH
14164: FOR_TO
14165: IFFALSE 14206
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14167: LD_ADDR_VAR 0 22
14171: PUSH
14172: LD_VAR 0 22
14176: PUSH
14177: LD_VAR 0 18
14181: PUSH
14182: LD_VAR 0 13
14186: ARRAY
14187: PPUSH
14188: LD_INT 25
14190: PUSH
14191: LD_INT 4
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 72
14202: ADD
14203: ST_TO_ADDR
14204: GO 14164
14206: POP
14207: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14208: LD_VAR 0 22
14212: PUSH
14213: LD_VAR 0 4
14217: PPUSH
14218: LD_INT 22
14220: PUSH
14221: LD_VAR 0 1
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 21
14232: PUSH
14233: LD_INT 1
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: LD_INT 3
14242: PUSH
14243: LD_INT 24
14245: PUSH
14246: LD_INT 1000
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: PPUSH
14262: CALL_OW 70
14266: AND
14267: IFFALSE 14784
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14269: LD_ADDR_VAR 0 39
14273: PUSH
14274: LD_VAR 0 4
14278: PPUSH
14279: LD_INT 22
14281: PUSH
14282: LD_VAR 0 1
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 21
14293: PUSH
14294: LD_INT 1
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: LD_INT 3
14303: PUSH
14304: LD_INT 24
14306: PUSH
14307: LD_INT 1000
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 70
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14780
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14331: LD_VAR 0 39
14335: PPUSH
14336: LD_VAR 0 5
14340: PPUSH
14341: CALL_OW 299
14345: PUSH
14346: LD_INT 5
14348: LESS
14349: IFFALSE 14557
// for i := 1 to personel do
14351: LD_ADDR_VAR 0 13
14355: PUSH
14356: DOUBLE
14357: LD_INT 1
14359: DEC
14360: ST_TO_ADDR
14361: LD_VAR 0 18
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14555
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14369: LD_VAR 0 18
14373: PUSH
14374: LD_VAR 0 13
14378: ARRAY
14379: PUSH
14380: LD_INT 1
14382: ARRAY
14383: PPUSH
14384: CALL_OW 257
14388: PUSH
14389: LD_INT 4
14391: EQUAL
14392: PUSH
14393: LD_VAR 0 18
14397: PUSH
14398: LD_VAR 0 13
14402: ARRAY
14403: PUSH
14404: LD_INT 3
14406: ARRAY
14407: PUSH
14408: LD_INT 1
14410: EQUAL
14411: AND
14412: IFFALSE 14553
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14414: LD_VAR 0 18
14418: PUSH
14419: LD_VAR 0 13
14423: ARRAY
14424: PUSH
14425: LD_INT 1
14427: ARRAY
14428: PPUSH
14429: CALL_OW 437
14433: IFFALSE 14489
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14435: LD_VAR 0 18
14439: PUSH
14440: LD_VAR 0 13
14444: ARRAY
14445: PUSH
14446: LD_INT 1
14448: ARRAY
14449: PPUSH
14450: CALL_OW 437
14454: PUSH
14455: LD_INT 1
14457: ARRAY
14458: PUSH
14459: LD_INT 1
14461: ARRAY
14462: PUSH
14463: LD_STRING e
14465: EQUAL
14466: IFFALSE 14489
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14468: LD_VAR 0 18
14472: PUSH
14473: LD_VAR 0 13
14477: ARRAY
14478: PUSH
14479: LD_INT 1
14481: ARRAY
14482: PPUSH
14483: EMPTY
14484: PPUSH
14485: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14489: LD_VAR 0 18
14493: PUSH
14494: LD_VAR 0 13
14498: ARRAY
14499: PUSH
14500: LD_INT 1
14502: ARRAY
14503: PPUSH
14504: CALL_OW 310
14508: IFFALSE 14529
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14510: LD_VAR 0 18
14514: PUSH
14515: LD_VAR 0 13
14519: ARRAY
14520: PUSH
14521: LD_INT 1
14523: ARRAY
14524: PPUSH
14525: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14529: LD_VAR 0 18
14533: PUSH
14534: LD_VAR 0 13
14538: ARRAY
14539: PUSH
14540: LD_INT 1
14542: ARRAY
14543: PPUSH
14544: LD_VAR 0 39
14548: PPUSH
14549: CALL_OW 188
// end ;
14553: GO 14366
14555: POP
14556: POP
// if GetLives ( damageUnit ) < 250 then
14557: LD_VAR 0 39
14561: PPUSH
14562: CALL_OW 256
14566: PUSH
14567: LD_INT 250
14569: LESS
14570: IFFALSE 14778
// for i := 1 to personel do
14572: LD_ADDR_VAR 0 13
14576: PUSH
14577: DOUBLE
14578: LD_INT 1
14580: DEC
14581: ST_TO_ADDR
14582: LD_VAR 0 18
14586: PUSH
14587: FOR_TO
14588: IFFALSE 14776
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14590: LD_VAR 0 18
14594: PUSH
14595: LD_VAR 0 13
14599: ARRAY
14600: PUSH
14601: LD_INT 1
14603: ARRAY
14604: PPUSH
14605: CALL_OW 257
14609: PUSH
14610: LD_INT 4
14612: EQUAL
14613: PUSH
14614: LD_VAR 0 18
14618: PUSH
14619: LD_VAR 0 13
14623: ARRAY
14624: PUSH
14625: LD_INT 3
14627: ARRAY
14628: PUSH
14629: LD_INT 1
14631: EQUAL
14632: AND
14633: IFFALSE 14774
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14635: LD_VAR 0 18
14639: PUSH
14640: LD_VAR 0 13
14644: ARRAY
14645: PUSH
14646: LD_INT 1
14648: ARRAY
14649: PPUSH
14650: CALL_OW 437
14654: IFFALSE 14710
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14656: LD_VAR 0 18
14660: PUSH
14661: LD_VAR 0 13
14665: ARRAY
14666: PUSH
14667: LD_INT 1
14669: ARRAY
14670: PPUSH
14671: CALL_OW 437
14675: PUSH
14676: LD_INT 1
14678: ARRAY
14679: PUSH
14680: LD_INT 1
14682: ARRAY
14683: PUSH
14684: LD_STRING e
14686: EQUAL
14687: IFFALSE 14710
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14689: LD_VAR 0 18
14693: PUSH
14694: LD_VAR 0 13
14698: ARRAY
14699: PUSH
14700: LD_INT 1
14702: ARRAY
14703: PPUSH
14704: EMPTY
14705: PPUSH
14706: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14710: LD_VAR 0 18
14714: PUSH
14715: LD_VAR 0 13
14719: ARRAY
14720: PUSH
14721: LD_INT 1
14723: ARRAY
14724: PPUSH
14725: CALL_OW 310
14729: IFFALSE 14750
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14731: LD_VAR 0 18
14735: PUSH
14736: LD_VAR 0 13
14740: ARRAY
14741: PUSH
14742: LD_INT 1
14744: ARRAY
14745: PPUSH
14746: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14750: LD_VAR 0 18
14754: PUSH
14755: LD_VAR 0 13
14759: ARRAY
14760: PUSH
14761: LD_INT 1
14763: ARRAY
14764: PPUSH
14765: LD_VAR 0 39
14769: PPUSH
14770: CALL_OW 188
// end ;
14774: GO 14587
14776: POP
14777: POP
// end ;
14778: GO 14328
14780: POP
14781: POP
// end else
14782: GO 14989
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14784: LD_VAR 0 22
14788: PUSH
14789: LD_VAR 0 22
14793: PPUSH
14794: LD_INT 56
14796: PUSH
14797: EMPTY
14798: LIST
14799: PPUSH
14800: CALL_OW 72
14804: AND
14805: PUSH
14806: LD_VAR 0 35
14810: AND
14811: IFFALSE 14989
// for i := 1 to personel do
14813: LD_ADDR_VAR 0 13
14817: PUSH
14818: DOUBLE
14819: LD_INT 1
14821: DEC
14822: ST_TO_ADDR
14823: LD_VAR 0 18
14827: PUSH
14828: FOR_TO
14829: IFFALSE 14987
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14831: LD_VAR 0 18
14835: PUSH
14836: LD_VAR 0 13
14840: ARRAY
14841: PUSH
14842: LD_INT 1
14844: ARRAY
14845: PPUSH
14846: CALL_OW 257
14850: PUSH
14851: LD_INT 4
14853: EQUAL
14854: PUSH
14855: LD_VAR 0 18
14859: PUSH
14860: LD_VAR 0 13
14864: ARRAY
14865: PUSH
14866: LD_INT 3
14868: ARRAY
14869: PUSH
14870: LD_INT 1
14872: EQUAL
14873: AND
14874: IFFALSE 14985
// begin if not personel [ i ] [ 2 ] then
14876: LD_VAR 0 18
14880: PUSH
14881: LD_VAR 0 13
14885: ARRAY
14886: PUSH
14887: LD_INT 2
14889: ARRAY
14890: NOT
14891: IFFALSE 14951
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
14893: LD_ADDR_VAR 0 18
14897: PUSH
14898: LD_VAR 0 18
14902: PPUSH
14903: LD_VAR 0 13
14907: PUSH
14908: LD_VAR 0 18
14912: PUSH
14913: LD_VAR 0 13
14917: ARRAY
14918: PUSH
14919: LD_INT 1
14921: MINUS
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PPUSH
14927: LD_VAR 0 35
14931: PUSH
14932: LD_INT 1
14934: PPUSH
14935: LD_VAR 0 35
14939: PPUSH
14940: CALL_OW 12
14944: ARRAY
14945: PPUSH
14946: CALL 28278 0 3
14950: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14951: LD_VAR 0 18
14955: PUSH
14956: LD_VAR 0 13
14960: ARRAY
14961: PUSH
14962: LD_INT 1
14964: ARRAY
14965: PPUSH
14966: LD_VAR 0 18
14970: PUSH
14971: LD_VAR 0 13
14975: ARRAY
14976: PUSH
14977: LD_INT 2
14979: ARRAY
14980: PPUSH
14981: CALL_OW 120
// end ;
14985: GO 14828
14987: POP
14988: POP
// wait ( 0 0$01 ) ;
14989: LD_INT 35
14991: PPUSH
14992: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
14996: LD_VAR 0 24
15000: PUSH
15001: LD_VAR 0 8
15005: LESS
15006: PUSH
15007: LD_VAR 0 34
15011: AND
15012: IFFALSE 15258
// begin tmp = vehiclesAmount - vehicles ;
15014: LD_ADDR_VAR 0 15
15018: PUSH
15019: LD_VAR 0 8
15023: PUSH
15024: LD_VAR 0 24
15028: MINUS
15029: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
15030: LD_ADDR_VAR 0 31
15034: PUSH
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_VAR 0 2
15044: PPUSH
15045: CALL 9138 0 2
15049: ST_TO_ADDR
// for i := 1 to tmp do
15050: LD_ADDR_VAR 0 13
15054: PUSH
15055: DOUBLE
15056: LD_INT 1
15058: DEC
15059: ST_TO_ADDR
15060: LD_VAR 0 15
15064: PUSH
15065: FOR_TO
15066: IFFALSE 15254
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
15068: LD_ADDR_VAR 0 15
15072: PUSH
15073: LD_VAR 0 31
15077: PUSH
15078: LD_INT 1
15080: PPUSH
15081: LD_VAR 0 31
15085: PPUSH
15086: CALL_OW 12
15090: ARRAY
15091: ST_TO_ADDR
// if tmp then
15092: LD_VAR 0 15
15096: IFFALSE 15252
// begin if tmp in [ 34 , 14 , 71 ] then
15098: LD_VAR 0 15
15102: PUSH
15103: LD_INT 34
15105: PUSH
15106: LD_INT 14
15108: PUSH
15109: LD_INT 71
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: IN
15117: IFFALSE 15155
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15119: LD_ADDR_VAR 0 32
15123: PUSH
15124: LD_INT 4
15126: PUSH
15127: EMPTY
15128: LIST
15129: PUSH
15130: LD_INT 14
15132: PUSH
15133: EMPTY
15134: LIST
15135: PUSH
15136: LD_INT 24
15138: PUSH
15139: EMPTY
15140: LIST
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: LIST
15146: PUSH
15147: LD_VAR 0 2
15151: ARRAY
15152: ST_TO_ADDR
15153: GO 15209
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15155: LD_ADDR_VAR 0 32
15159: PUSH
15160: LD_INT 2
15162: PUSH
15163: LD_INT 3
15165: PUSH
15166: LD_INT 4
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 14
15176: PUSH
15177: EMPTY
15178: LIST
15179: PUSH
15180: LD_INT 21
15182: PUSH
15183: LD_INT 23
15185: PUSH
15186: LD_INT 24
15188: PUSH
15189: LD_INT 22
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: PUSH
15203: LD_VAR 0 2
15207: ARRAY
15208: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15209: LD_VAR 0 34
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: LD_VAR 0 32
15222: PUSH
15223: LD_INT 1
15225: PPUSH
15226: LD_VAR 0 32
15230: PPUSH
15231: CALL_OW 12
15235: ARRAY
15236: PPUSH
15237: LD_INT 1
15239: PPUSH
15240: LD_INT 1
15242: PPUSH
15243: LD_VAR 0 15
15247: PPUSH
15248: CALL_OW 185
// end ; end ;
15252: GO 15065
15254: POP
15255: POP
// end else
15256: GO 15271
// ComCancel ( factory [ 1 ] ) ;
15258: LD_VAR 0 34
15262: PUSH
15263: LD_INT 1
15265: ARRAY
15266: PPUSH
15267: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15271: LD_ADDR_VAR 0 23
15275: PUSH
15276: LD_VAR 0 4
15280: PPUSH
15281: LD_INT 22
15283: PUSH
15284: LD_VAR 0 1
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 21
15295: PUSH
15296: LD_INT 2
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 50
15305: PUSH
15306: EMPTY
15307: LIST
15308: PUSH
15309: LD_INT 3
15311: PUSH
15312: LD_INT 2
15314: PUSH
15315: LD_INT 31
15317: PUSH
15318: LD_INT 31
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 34
15327: PUSH
15328: LD_INT 12
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 34
15337: PUSH
15338: LD_INT 51
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 34
15347: PUSH
15348: LD_INT 32
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 70
15376: PUSH
15377: LD_EXP 52
15381: DIFF
15382: PUSH
15383: FOR_IN
15384: IFFALSE 15547
// begin vehicleInList = false ;
15386: LD_ADDR_VAR 0 25
15390: PUSH
15391: LD_INT 0
15393: ST_TO_ADDR
// for i := 1 to vehicles do
15394: LD_ADDR_VAR 0 13
15398: PUSH
15399: DOUBLE
15400: LD_INT 1
15402: DEC
15403: ST_TO_ADDR
15404: LD_VAR 0 24
15408: PUSH
15409: FOR_TO
15410: IFFALSE 15440
// begin if vehicle in vehicles [ i ] then
15412: LD_VAR 0 23
15416: PUSH
15417: LD_VAR 0 24
15421: PUSH
15422: LD_VAR 0 13
15426: ARRAY
15427: IN
15428: IFFALSE 15438
// vehicleInList = true ;
15430: LD_ADDR_VAR 0 25
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// end ;
15438: GO 15409
15440: POP
15441: POP
// if not vehicleInList then
15442: LD_VAR 0 25
15446: NOT
15447: IFFALSE 15545
// if vehicles < vehiclesToAttackAmount then
15449: LD_VAR 0 24
15453: PUSH
15454: LD_VAR 0 10
15458: LESS
15459: IFFALSE 15504
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15461: LD_ADDR_VAR 0 24
15465: PUSH
15466: LD_VAR 0 24
15470: PUSH
15471: LD_VAR 0 23
15475: PUSH
15476: LD_VAR 0 23
15480: PPUSH
15481: CALL_OW 313
15485: PUSH
15486: LD_INT 1
15488: ARRAY
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: LIST
15497: PUSH
15498: EMPTY
15499: LIST
15500: ADD
15501: ST_TO_ADDR
15502: GO 15545
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15504: LD_ADDR_VAR 0 24
15508: PUSH
15509: LD_VAR 0 24
15513: PUSH
15514: LD_VAR 0 23
15518: PUSH
15519: LD_VAR 0 23
15523: PPUSH
15524: CALL_OW 313
15528: PUSH
15529: LD_INT 1
15531: ARRAY
15532: PUSH
15533: LD_INT 2
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: ADD
15544: ST_TO_ADDR
// end ;
15545: GO 15383
15547: POP
15548: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15549: LD_ADDR_VAR 0 41
15553: PUSH
15554: LD_INT 81
15556: PUSH
15557: LD_VAR 0 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PPUSH
15566: CALL_OW 69
15570: PUSH
15571: FOR_IN
15572: IFFALSE 16054
// begin offensiveUnits = [ ] ;
15574: LD_ADDR_VAR 0 27
15578: PUSH
15579: EMPTY
15580: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
15581: LD_ADDR_VAR 0 28
15585: PUSH
15586: LD_INT 0
15588: ST_TO_ADDR
// for i := 1 to vehicles do
15589: LD_ADDR_VAR 0 13
15593: PUSH
15594: DOUBLE
15595: LD_INT 1
15597: DEC
15598: ST_TO_ADDR
15599: LD_VAR 0 24
15603: PUSH
15604: FOR_TO
15605: IFFALSE 15786
// if vehicles [ i ] [ 3 ] = 3 then
15607: LD_VAR 0 24
15611: PUSH
15612: LD_VAR 0 13
15616: ARRAY
15617: PUSH
15618: LD_INT 3
15620: ARRAY
15621: PUSH
15622: LD_INT 3
15624: EQUAL
15625: IFFALSE 15784
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
15627: LD_VAR 0 24
15631: PUSH
15632: LD_VAR 0 13
15636: ARRAY
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PPUSH
15642: CALL_OW 256
15646: PUSH
15647: LD_INT 650
15649: GREATER
15650: IFFALSE 15666
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
15652: LD_ADDR_VAR 0 28
15656: PUSH
15657: LD_VAR 0 28
15661: PUSH
15662: LD_INT 1
15664: PLUS
15665: ST_TO_ADDR
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15666: LD_ADDR_VAR 0 27
15670: PUSH
15671: LD_VAR 0 27
15675: PUSH
15676: LD_VAR 0 24
15680: PUSH
15681: LD_VAR 0 13
15685: ARRAY
15686: PUSH
15687: LD_INT 1
15689: ARRAY
15690: ADD
15691: ST_TO_ADDR
// for j = 1 to personel do
15692: LD_ADDR_VAR 0 14
15696: PUSH
15697: DOUBLE
15698: LD_INT 1
15700: DEC
15701: ST_TO_ADDR
15702: LD_VAR 0 18
15706: PUSH
15707: FOR_TO
15708: IFFALSE 15782
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15710: LD_VAR 0 18
15714: PUSH
15715: LD_VAR 0 14
15719: ARRAY
15720: PUSH
15721: LD_INT 1
15723: ARRAY
15724: PUSH
15725: LD_VAR 0 24
15729: PUSH
15730: LD_VAR 0 13
15734: ARRAY
15735: PUSH
15736: LD_INT 2
15738: ARRAY
15739: EQUAL
15740: IFFALSE 15780
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
15742: LD_ADDR_VAR 0 18
15746: PUSH
15747: LD_VAR 0 18
15751: PPUSH
15752: LD_VAR 0 14
15756: PUSH
15757: LD_VAR 0 18
15761: PUSH
15762: LD_VAR 0 14
15766: ARRAY
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PPUSH
15772: LD_INT 3
15774: PPUSH
15775: CALL 28278 0 3
15779: ST_TO_ADDR
15780: GO 15707
15782: POP
15783: POP
// end ;
15784: GO 15604
15786: POP
15787: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
15788: LD_VAR 0 10
15792: PUSH
15793: LD_VAR 0 28
15797: LESSEQUAL
15798: IFFALSE 16052
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , offensiveUnits [ 1 ] ) ;
15800: LD_ADDR_VAR 0 29
15804: PUSH
15805: LD_INT 81
15807: PUSH
15808: LD_INT 2
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 69
15819: PPUSH
15820: LD_VAR 0 27
15824: PUSH
15825: LD_INT 1
15827: ARRAY
15828: PPUSH
15829: CALL_OW 74
15833: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 2 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ 1 ] ) ;
15834: LD_ADDR_VAR 0 30
15838: PUSH
15839: LD_INT 81
15841: PUSH
15842: LD_INT 2
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 2
15851: PUSH
15852: LD_INT 59
15854: PUSH
15855: EMPTY
15856: LIST
15857: PUSH
15858: LD_INT 21
15860: PUSH
15861: LD_INT 1
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 21
15870: PUSH
15871: LD_INT 2
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: EMPTY
15889: LIST
15890: PPUSH
15891: CALL_OW 69
15895: PPUSH
15896: LD_VAR 0 27
15900: PUSH
15901: LD_INT 1
15903: ARRAY
15904: PPUSH
15905: CALL_OW 74
15909: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ 1 ] , target1 ) + 8 < GetDistUnits ( offensiveUnits [ 1 ] , target2 ) then
15910: LD_VAR 0 27
15914: PUSH
15915: LD_INT 1
15917: ARRAY
15918: PPUSH
15919: LD_VAR 0 29
15923: PPUSH
15924: CALL_OW 296
15928: PUSH
15929: LD_INT 8
15931: PLUS
15932: PUSH
15933: LD_VAR 0 27
15937: PUSH
15938: LD_INT 1
15940: ARRAY
15941: PPUSH
15942: LD_VAR 0 30
15946: PPUSH
15947: CALL_OW 296
15951: LESS
15952: IFFALSE 15988
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target1 ) else
15954: LD_VAR 0 27
15958: PPUSH
15959: LD_INT 3
15961: PUSH
15962: LD_INT 60
15964: PUSH
15965: EMPTY
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 72
15976: PPUSH
15977: LD_VAR 0 29
15981: PPUSH
15982: CALL_OW 115
15986: GO 16020
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target2 ) ;
15988: LD_VAR 0 27
15992: PPUSH
15993: LD_INT 3
15995: PUSH
15996: LD_INT 60
15998: PUSH
15999: EMPTY
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PPUSH
16006: CALL_OW 72
16010: PPUSH
16011: LD_VAR 0 30
16015: PPUSH
16016: CALL_OW 115
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16020: LD_VAR 0 27
16024: PPUSH
16025: LD_INT 3
16027: PUSH
16028: LD_INT 60
16030: PUSH
16031: EMPTY
16032: LIST
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PPUSH
16038: CALL_OW 72
16042: PPUSH
16043: LD_VAR 0 41
16047: PPUSH
16048: CALL_OW 175
// end ; end ;
16052: GO 15571
16054: POP
16055: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16056: LD_ADDR_VAR 0 41
16060: PUSH
16061: LD_VAR 0 7
16065: PPUSH
16066: LD_INT 81
16068: PUSH
16069: LD_VAR 0 1
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PPUSH
16078: CALL_OW 70
16082: PUSH
16083: FOR_IN
16084: IFFALSE 16263
// begin defenceUnits = [ ] ;
16086: LD_ADDR_VAR 0 26
16090: PUSH
16091: EMPTY
16092: ST_TO_ADDR
// for i := 1 to personel do
16093: LD_ADDR_VAR 0 13
16097: PUSH
16098: DOUBLE
16099: LD_INT 1
16101: DEC
16102: ST_TO_ADDR
16103: LD_VAR 0 18
16107: PUSH
16108: FOR_TO
16109: IFFALSE 16159
// if personel [ i ] [ 3 ] = 2 then
16111: LD_VAR 0 18
16115: PUSH
16116: LD_VAR 0 13
16120: ARRAY
16121: PUSH
16122: LD_INT 3
16124: ARRAY
16125: PUSH
16126: LD_INT 2
16128: EQUAL
16129: IFFALSE 16157
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16131: LD_ADDR_VAR 0 26
16135: PUSH
16136: LD_VAR 0 26
16140: PUSH
16141: LD_VAR 0 18
16145: PUSH
16146: LD_VAR 0 13
16150: ARRAY
16151: PUSH
16152: LD_INT 1
16154: ARRAY
16155: ADD
16156: ST_TO_ADDR
16157: GO 16108
16159: POP
16160: POP
// for i := 1 to vehicles do
16161: LD_ADDR_VAR 0 13
16165: PUSH
16166: DOUBLE
16167: LD_INT 1
16169: DEC
16170: ST_TO_ADDR
16171: LD_VAR 0 24
16175: PUSH
16176: FOR_TO
16177: IFFALSE 16227
// if vehicles [ i ] [ 3 ] = 2 then
16179: LD_VAR 0 24
16183: PUSH
16184: LD_VAR 0 13
16188: ARRAY
16189: PUSH
16190: LD_INT 3
16192: ARRAY
16193: PUSH
16194: LD_INT 2
16196: EQUAL
16197: IFFALSE 16225
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16199: LD_ADDR_VAR 0 26
16203: PUSH
16204: LD_VAR 0 26
16208: PUSH
16209: LD_VAR 0 24
16213: PUSH
16214: LD_VAR 0 13
16218: ARRAY
16219: PUSH
16220: LD_INT 1
16222: ARRAY
16223: ADD
16224: ST_TO_ADDR
16225: GO 16176
16227: POP
16228: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16229: LD_VAR 0 26
16233: PPUSH
16234: LD_INT 3
16236: PUSH
16237: LD_INT 60
16239: PUSH
16240: EMPTY
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PPUSH
16247: CALL_OW 72
16251: PPUSH
16252: LD_VAR 0 41
16256: PPUSH
16257: CALL_OW 175
// end ;
16261: GO 16083
16263: POP
16264: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16265: LD_ADDR_VAR 0 42
16269: PUSH
16270: LD_INT 22
16272: PUSH
16273: LD_VAR 0 1
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: LD_INT 30
16287: PUSH
16288: LD_INT 31
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 30
16297: PUSH
16298: LD_INT 32
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 30
16307: PUSH
16308: LD_INT 33
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 30
16317: PUSH
16318: LD_INT 4
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 30
16327: PUSH
16328: LD_INT 5
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16352: LD_ADDR_VAR 0 43
16356: PUSH
16357: LD_INT 81
16359: PUSH
16360: LD_VAR 0 1
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 21
16371: PUSH
16372: LD_INT 3
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 58
16381: PUSH
16382: EMPTY
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: PPUSH
16390: CALL_OW 69
16394: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16395: LD_VAR 0 42
16399: PUSH
16400: LD_VAR 0 43
16404: AND
16405: IFFALSE 16475
// for i in attackBuildings do
16407: LD_ADDR_VAR 0 13
16411: PUSH
16412: LD_VAR 0 42
16416: PUSH
16417: FOR_IN
16418: IFFALSE 16473
// for j in enemyBuildings do
16420: LD_ADDR_VAR 0 14
16424: PUSH
16425: LD_VAR 0 43
16429: PUSH
16430: FOR_IN
16431: IFFALSE 16469
// if GetDistUnits ( i , j ) < 12 then
16433: LD_VAR 0 13
16437: PPUSH
16438: LD_VAR 0 14
16442: PPUSH
16443: CALL_OW 296
16447: PUSH
16448: LD_INT 12
16450: LESS
16451: IFFALSE 16467
// ComAttackUnit ( i , j ) ;
16453: LD_VAR 0 13
16457: PPUSH
16458: LD_VAR 0 14
16462: PPUSH
16463: CALL_OW 115
16467: GO 16430
16469: POP
16470: POP
16471: GO 16417
16473: POP
16474: POP
// until not personel or arabianCanExitMap ;
16475: LD_VAR 0 18
16479: NOT
16480: PUSH
16481: LD_EXP 21
16485: OR
16486: IFFALSE 11094
// end ;
16488: LD_VAR 0 12
16492: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16493: LD_EXP 52
16497: NOT
16498: IFFALSE 16532
16500: GO 16502
16502: DISABLE
// begin enable ;
16503: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16504: LD_EXP 36
16508: PPUSH
16509: LD_INT 42
16511: PPUSH
16512: CALL 2668 0 2
// arabLeftExit = true ;
16516: LD_ADDR_EXP 55
16520: PUSH
16521: LD_INT 1
16523: ST_TO_ADDR
// arabRightExit = false ;
16524: LD_ADDR_EXP 56
16528: PUSH
16529: LD_INT 0
16531: ST_TO_ADDR
// end ;
16532: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base ;
16533: LD_EXP 52
16537: PUSH
16538: LD_EXP 55
16542: AND
16543: IFFALSE 16738
16545: GO 16547
16547: DISABLE
16548: LD_INT 0
16550: PPUSH
16551: PPUSH
16552: PPUSH
// begin enable ;
16553: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16554: LD_EXP 52
16558: PPUSH
16559: LD_INT 71
16561: PPUSH
16562: LD_INT 137
16564: PPUSH
16565: CALL_OW 114
// for veh in arabianPatrolVehicles do
16569: LD_ADDR_VAR 0 1
16573: PUSH
16574: LD_EXP 52
16578: PUSH
16579: FOR_IN
16580: IFFALSE 16736
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16582: LD_VAR 0 1
16586: PPUSH
16587: LD_INT 43
16589: PPUSH
16590: CALL_OW 308
16594: IFFALSE 16734
// begin if arabianPatrolVehicles then
16596: LD_EXP 52
16600: IFFALSE 16629
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16602: LD_VAR 0 1
16606: PPUSH
16607: CALL_OW 313
16611: PUSH
16612: LD_INT 1
16614: ARRAY
16615: PPUSH
16616: CALL_OW 64
// RemoveUnit ( veh ) ;
16620: LD_VAR 0 1
16624: PPUSH
16625: CALL_OW 64
// end ; x = 0 ;
16629: LD_ADDR_VAR 0 2
16633: PUSH
16634: LD_INT 0
16636: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16637: LD_ADDR_VAR 0 1
16641: PUSH
16642: LD_EXP 52
16646: PUSH
16647: FOR_IN
16648: IFFALSE 16678
// if not IsPlaced ( veh ) then
16650: LD_VAR 0 1
16654: PPUSH
16655: CALL_OW 305
16659: NOT
16660: IFFALSE 16676
// x = x + 1 ;
16662: LD_ADDR_VAR 0 2
16666: PUSH
16667: LD_VAR 0 2
16671: PUSH
16672: LD_INT 1
16674: PLUS
16675: ST_TO_ADDR
16676: GO 16647
16678: POP
16679: POP
// if x = arabianPatrolVehicles then
16680: LD_VAR 0 2
16684: PUSH
16685: LD_EXP 52
16689: EQUAL
16690: IFFALSE 16734
// begin arabLeftExit = false ;
16692: LD_ADDR_EXP 55
16696: PUSH
16697: LD_INT 0
16699: ST_TO_ADDR
// arabRightExit = true ;
16700: LD_ADDR_EXP 56
16704: PUSH
16705: LD_INT 1
16707: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16708: LD_INT 4200
16710: PPUSH
16711: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16715: LD_ADDR_EXP 52
16719: PUSH
16720: EMPTY
16721: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16722: LD_EXP 36
16726: PPUSH
16727: LD_INT 43
16729: PPUSH
16730: CALL 2668 0 2
// end ; end ; end ;
16734: GO 16579
16736: POP
16737: POP
// end ;
16738: PPOPN 3
16740: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16741: LD_EXP 52
16745: PUSH
16746: LD_EXP 56
16750: AND
16751: IFFALSE 16946
16753: GO 16755
16755: DISABLE
16756: LD_INT 0
16758: PPUSH
16759: PPUSH
16760: PPUSH
// begin enable ;
16761: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16762: LD_EXP 52
16766: PPUSH
16767: LD_INT 184
16769: PPUSH
16770: LD_INT 134
16772: PPUSH
16773: CALL_OW 114
// for veh in arabianPatrolVehicles do
16777: LD_ADDR_VAR 0 1
16781: PUSH
16782: LD_EXP 52
16786: PUSH
16787: FOR_IN
16788: IFFALSE 16944
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16790: LD_VAR 0 1
16794: PPUSH
16795: LD_INT 42
16797: PPUSH
16798: CALL_OW 308
16802: IFFALSE 16942
// begin if arabianPatrolVehicles then
16804: LD_EXP 52
16808: IFFALSE 16837
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16810: LD_VAR 0 1
16814: PPUSH
16815: CALL_OW 313
16819: PUSH
16820: LD_INT 1
16822: ARRAY
16823: PPUSH
16824: CALL_OW 64
// RemoveUnit ( veh ) ;
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 64
// end ; x = 0 ;
16837: LD_ADDR_VAR 0 2
16841: PUSH
16842: LD_INT 0
16844: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16845: LD_ADDR_VAR 0 1
16849: PUSH
16850: LD_EXP 52
16854: PUSH
16855: FOR_IN
16856: IFFALSE 16886
// if not IsPlaced ( veh ) then
16858: LD_VAR 0 1
16862: PPUSH
16863: CALL_OW 305
16867: NOT
16868: IFFALSE 16884
// x = x + 1 ;
16870: LD_ADDR_VAR 0 2
16874: PUSH
16875: LD_VAR 0 2
16879: PUSH
16880: LD_INT 1
16882: PLUS
16883: ST_TO_ADDR
16884: GO 16855
16886: POP
16887: POP
// if x = arabianPatrolVehicles then
16888: LD_VAR 0 2
16892: PUSH
16893: LD_EXP 52
16897: EQUAL
16898: IFFALSE 16942
// begin arabLeftExit = true ;
16900: LD_ADDR_EXP 55
16904: PUSH
16905: LD_INT 1
16907: ST_TO_ADDR
// arabRightExit = false ;
16908: LD_ADDR_EXP 56
16912: PUSH
16913: LD_INT 0
16915: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16916: LD_INT 4200
16918: PPUSH
16919: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16923: LD_ADDR_EXP 52
16927: PUSH
16928: EMPTY
16929: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16930: LD_EXP 36
16934: PPUSH
16935: LD_INT 42
16937: PPUSH
16938: CALL 2668 0 2
// end ; end ; end ;
16942: GO 16787
16944: POP
16945: POP
// end ;
16946: PPOPN 3
16948: END
// every 6 6$0 trigger not arabianHovercrafts and not arabianCanExitMap do
16949: LD_EXP 53
16953: NOT
16954: PUSH
16955: LD_EXP 21
16959: NOT
16960: AND
16961: IFFALSE 16971
16963: GO 16965
16965: DISABLE
// begin enable ;
16966: ENABLE
// PrepareArabianHovercraft ;
16967: CALL 2827 0 0
// end ;
16971: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
16972: LD_EXP 53
16976: IFFALSE 17132
16978: GO 16980
16980: DISABLE
16981: LD_INT 0
16983: PPUSH
16984: PPUSH
// begin enable ;
16985: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
16986: LD_EXP 53
16990: PPUSH
16991: LD_INT 100
16993: PPUSH
16994: CALL_OW 240
// for i := 1 to arabianHovercraftsPath do
16998: LD_ADDR_VAR 0 1
17002: PUSH
17003: DOUBLE
17004: LD_INT 1
17006: DEC
17007: ST_TO_ADDR
17008: LD_EXP 38
17012: PUSH
17013: FOR_TO
17014: IFFALSE 17057
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
17016: LD_EXP 53
17020: PPUSH
17021: LD_EXP 38
17025: PUSH
17026: LD_VAR 0 1
17030: ARRAY
17031: PUSH
17032: LD_INT 1
17034: ARRAY
17035: PPUSH
17036: LD_EXP 38
17040: PUSH
17041: LD_VAR 0 1
17045: ARRAY
17046: PUSH
17047: LD_INT 2
17049: ARRAY
17050: PPUSH
17051: CALL_OW 174
17055: GO 17013
17057: POP
17058: POP
// x = arabianHovercraftsPath ;
17059: LD_ADDR_VAR 0 2
17063: PUSH
17064: LD_EXP 38
17068: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
17069: LD_EXP 53
17073: PPUSH
17074: LD_EXP 38
17078: PUSH
17079: LD_VAR 0 2
17083: ARRAY
17084: PUSH
17085: LD_INT 1
17087: ARRAY
17088: PPUSH
17089: LD_EXP 38
17093: PUSH
17094: LD_VAR 0 2
17098: ARRAY
17099: PUSH
17100: LD_INT 2
17102: ARRAY
17103: PPUSH
17104: CALL_OW 174
// x = x - 1 ;
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_VAR 0 2
17117: PUSH
17118: LD_INT 1
17120: MINUS
17121: ST_TO_ADDR
// until x = 0 ;
17122: LD_VAR 0 2
17126: PUSH
17127: LD_INT 0
17129: EQUAL
17130: IFFALSE 17069
// end ;
17132: PPOPN 2
17134: END
// every 0 0$1 trigger arabianPatrolTroops do
17135: LD_EXP 54
17139: IFFALSE 17205
17141: GO 17143
17143: DISABLE
// begin enable ;
17144: ENABLE
// AddComAgressiveMove ( arabianPatrolTroops , 127 , 100 ) ;
17145: LD_EXP 54
17149: PPUSH
17150: LD_INT 127
17152: PPUSH
17153: LD_INT 100
17155: PPUSH
17156: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 141 , 133 ) ;
17160: LD_EXP 54
17164: PPUSH
17165: LD_INT 141
17167: PPUSH
17168: LD_INT 133
17170: PPUSH
17171: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 80 , 132 ) ;
17175: LD_EXP 54
17179: PPUSH
17180: LD_INT 80
17182: PPUSH
17183: LD_INT 132
17185: PPUSH
17186: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 174 , 122 ) ;
17190: LD_EXP 54
17194: PPUSH
17195: LD_INT 174
17197: PPUSH
17198: LD_INT 122
17200: PPUSH
17201: CALL_OW 174
// end ; end_of_file
17205: END
// export function Lose_Burlak ; begin
17206: LD_INT 0
17208: PPUSH
// YouLost ( Burlak ) ;
17209: LD_STRING Burlak
17211: PPUSH
17212: CALL_OW 104
// end ;
17216: LD_VAR 0 1
17220: RET
// export function Lose_Survive ; begin
17221: LD_INT 0
17223: PPUSH
// YouLost ( Survive ) ;
17224: LD_STRING Survive
17226: PPUSH
17227: CALL_OW 104
// end ;
17231: LD_VAR 0 1
17235: RET
// export function Lose_Surrender ; begin
17236: LD_INT 0
17238: PPUSH
// YouLost ( Surrender ) ;
17239: LD_STRING Surrender
17241: PPUSH
17242: CALL_OW 104
// end ; end_of_file
17246: LD_VAR 0 1
17250: RET
// every 0 0$5 do
17251: GO 17253
17253: DISABLE
// begin enable ;
17254: ENABLE
// if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
17255: LD_EXP 24
17259: NOT
17260: PUSH
17261: LD_INT 22
17263: PPUSH
17264: LD_INT 22
17266: PUSH
17267: LD_INT 3
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 2
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 50
17286: PUSH
17287: EMPTY
17288: LIST
17289: PUSH
17290: LD_INT 59
17292: PUSH
17293: EMPTY
17294: LIST
17295: PUSH
17296: LD_INT 2
17298: PUSH
17299: LD_INT 31
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 31
17311: PUSH
17312: LD_INT 24
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 31
17321: PUSH
17322: LD_INT 14
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: PPUSH
17342: CALL_OW 70
17346: AND
17347: PUSH
17348: LD_INT 22
17350: PPUSH
17351: LD_INT 22
17353: PUSH
17354: LD_INT 3
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 21
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 23
17373: PUSH
17374: LD_INT 3
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 50
17383: PUSH
17384: EMPTY
17385: LIST
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: PPUSH
17393: CALL_OW 70
17397: AND
17398: IFFALSE 17407
// Query ( QVehicles ) ;
17400: LD_STRING QVehicles
17402: PPUSH
17403: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17407: LD_EXP 39
17411: PPUSH
17412: CALL_OW 310
17416: PPUSH
17417: LD_INT 22
17419: PPUSH
17420: CALL_OW 308
17424: PUSH
17425: LD_EXP 24
17429: NOT
17430: AND
17431: PUSH
17432: LD_INT 22
17434: PPUSH
17435: LD_INT 22
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 21
17447: PUSH
17448: LD_INT 2
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 59
17457: PUSH
17458: EMPTY
17459: LIST
17460: PUSH
17461: LD_INT 50
17463: PUSH
17464: EMPTY
17465: LIST
17466: PUSH
17467: LD_INT 2
17469: PUSH
17470: LD_INT 31
17472: PUSH
17473: LD_INT 22
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 31
17482: PUSH
17483: LD_INT 24
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 31
17492: PUSH
17493: LD_INT 14
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 70
17517: PUSH
17518: LD_INT 22
17520: PUSH
17521: LD_INT 3
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 21
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 23
17540: PUSH
17541: LD_INT 3
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 2
17550: PUSH
17551: LD_INT 25
17553: PUSH
17554: LD_INT 1
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 25
17563: PUSH
17564: LD_INT 2
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 25
17573: PUSH
17574: LD_INT 3
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 25
17583: PUSH
17584: LD_INT 4
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: PPUSH
17604: CALL_OW 69
17608: GREATEREQUAL
17609: AND
17610: IFFALSE 17616
// FinishMission ;
17612: CALL 17937 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17616: LD_EXP 39
17620: PPUSH
17621: CALL_OW 310
17625: PPUSH
17626: LD_INT 22
17628: PPUSH
17629: CALL_OW 308
17633: PUSH
17634: LD_EXP 24
17638: NOT
17639: AND
17640: PUSH
17641: LD_INT 22
17643: PPUSH
17644: LD_INT 22
17646: PUSH
17647: LD_INT 3
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 21
17656: PUSH
17657: LD_INT 2
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 59
17666: PUSH
17667: EMPTY
17668: LIST
17669: PUSH
17670: LD_INT 50
17672: PUSH
17673: EMPTY
17674: LIST
17675: PUSH
17676: LD_INT 2
17678: PUSH
17679: LD_INT 31
17681: PUSH
17682: LD_INT 22
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 31
17691: PUSH
17692: LD_INT 24
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 31
17701: PUSH
17702: LD_INT 14
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: PPUSH
17722: CALL_OW 70
17726: PUSH
17727: LD_INT 6
17729: GREATEREQUAL
17730: AND
17731: PUSH
17732: LD_INT 22
17734: PPUSH
17735: LD_INT 22
17737: PUSH
17738: LD_INT 3
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 21
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 59
17757: PUSH
17758: EMPTY
17759: LIST
17760: PUSH
17761: LD_INT 50
17763: PUSH
17764: EMPTY
17765: LIST
17766: PUSH
17767: LD_INT 2
17769: PUSH
17770: LD_INT 31
17772: PUSH
17773: LD_INT 22
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 31
17782: PUSH
17783: LD_INT 24
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 31
17792: PUSH
17793: LD_INT 14
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: PPUSH
17813: CALL_OW 70
17817: PUSH
17818: LD_INT 22
17820: PUSH
17821: LD_INT 3
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 21
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 23
17840: PUSH
17841: LD_INT 3
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: LD_INT 25
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 25
17863: PUSH
17864: LD_INT 2
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 25
17873: PUSH
17874: LD_INT 3
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 25
17883: PUSH
17884: LD_INT 4
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: PPUSH
17904: CALL_OW 69
17908: LESS
17909: AND
17910: IFFALSE 17936
// begin case Query ( QEndMission ) of 1 :
17912: LD_STRING QEndMission
17914: PPUSH
17915: CALL_OW 97
17919: PUSH
17920: LD_INT 1
17922: DOUBLE
17923: EQUAL
17924: IFTRUE 17928
17926: GO 17935
17928: POP
// FinishMission ; end ;
17929: CALL 17937 0 0
17933: GO 17936
17935: POP
// end ; end ;
17936: END
// function FinishMission ; var nearUnit ; begin
17937: LD_INT 0
17939: PPUSH
17940: PPUSH
// finishMissionBool = true ;
17941: LD_ADDR_EXP 24
17945: PUSH
17946: LD_INT 1
17948: ST_TO_ADDR
// if stevensDepot then
17949: LD_EXP 17
17953: IFFALSE 18122
// begin DialogueOn ;
17955: CALL_OW 6
// if IsOK ( Petrosyan ) then
17959: LD_EXP 43
17963: PPUSH
17964: CALL_OW 302
17968: IFFALSE 17984
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
17970: LD_EXP 43
17974: PPUSH
17975: LD_STRING DStevensLeftBehind-Pty-1
17977: PPUSH
17978: CALL_OW 88
17982: GO 18098
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
17984: LD_INT 22
17986: PUSH
17987: LD_INT 3
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 21
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 26
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 50
18016: PUSH
18017: EMPTY
18018: LIST
18019: PUSH
18020: LD_INT 2
18022: PUSH
18023: LD_INT 25
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 25
18035: PUSH
18036: LD_INT 2
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 25
18045: PUSH
18046: LD_INT 3
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 25
18055: PUSH
18056: LD_INT 4
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: PPUSH
18077: CALL_OW 69
18081: PPUSH
18082: LD_STRING StevensLeftBehind-RSol1-1
18084: PPUSH
18085: LD_STRING 
18087: PPUSH
18088: LD_INT 0
18090: PPUSH
18091: LD_INT 1
18093: PPUSH
18094: CALL 8765 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
18098: LD_EXP 39
18102: PPUSH
18103: LD_STRING DStevensLeftBehind-Bur-1
18105: PPUSH
18106: CALL_OW 88
// DialogueOff ;
18110: CALL_OW 7
// stevensStatus = 1 ;
18114: LD_ADDR_EXP 2
18118: PUSH
18119: LD_INT 1
18121: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
18122: LD_EXP 14
18126: NOT
18127: PUSH
18128: LD_EXP 43
18132: PPUSH
18133: CALL_OW 302
18137: AND
18138: IFFALSE 18670
// begin PrepareStevens ( exit_rus ) ;
18140: LD_INT 22
18142: PPUSH
18143: CALL 20703 0 1
// wait ( 0 0$1.5 ) ;
18147: LD_INT 52
18149: PPUSH
18150: CALL_OW 67
// stevensPlaced = true ;
18154: LD_ADDR_EXP 14
18158: PUSH
18159: LD_INT 1
18161: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
18162: LD_ADDR_VAR 0 2
18166: PUSH
18167: LD_INT 22
18169: PUSH
18170: LD_INT 3
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 21
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 26
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 50
18199: PUSH
18200: EMPTY
18201: LIST
18202: PUSH
18203: LD_INT 2
18205: PUSH
18206: LD_INT 25
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 25
18218: PUSH
18219: LD_INT 2
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 25
18228: PUSH
18229: LD_INT 3
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 25
18238: PUSH
18239: LD_INT 4
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PPUSH
18260: CALL_OW 69
18264: PPUSH
18265: LD_EXP 57
18269: PPUSH
18270: CALL_OW 74
18274: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
18275: LD_EXP 57
18279: PPUSH
18280: CALL_OW 87
// InGameOn ;
18284: CALL_OW 8
// wait ( 0 0$1.5 ) ;
18288: LD_INT 52
18290: PPUSH
18291: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18295: LD_EXP 57
18299: PPUSH
18300: LD_INT 6
18302: PPUSH
18303: CALL_OW 235
// DialogueOn ;
18307: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18311: LD_EXP 57
18315: PPUSH
18316: LD_STRING DStevens-Huck-1
18318: PPUSH
18319: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18323: LD_EXP 43
18327: PPUSH
18328: LD_STRING DStevens-Pty-1
18330: PPUSH
18331: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18335: LD_EXP 43
18339: PPUSH
18340: LD_STRING DStevens-Pty-1a
18342: PPUSH
18343: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18347: LD_EXP 57
18351: PPUSH
18352: LD_STRING DStevens-Huck-2
18354: PPUSH
18355: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18359: LD_EXP 43
18363: PPUSH
18364: LD_STRING DStevens-Pty-2
18366: PPUSH
18367: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18371: LD_EXP 57
18375: PPUSH
18376: LD_STRING DStevens-Huck-3
18378: PPUSH
18379: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18383: LD_EXP 43
18387: PPUSH
18388: LD_STRING DStevens-Pty-3
18390: PPUSH
18391: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18395: LD_EXP 57
18399: PPUSH
18400: LD_STRING DStevens-Huck-4
18402: PPUSH
18403: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18407: LD_EXP 43
18411: PPUSH
18412: LD_STRING DStevensBurlak-Pty-1
18414: PPUSH
18415: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18419: LD_EXP 39
18423: PPUSH
18424: LD_STRING DStevensBurlak-Bur-1
18426: PPUSH
18427: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18431: LD_EXP 43
18435: PPUSH
18436: LD_STRING DStevensBurlak-Pty-2
18438: PPUSH
18439: CALL_OW 88
// case Query ( QKill ) of 1 :
18443: LD_STRING QKill
18445: PPUSH
18446: CALL_OW 97
18450: PUSH
18451: LD_INT 1
18453: DOUBLE
18454: EQUAL
18455: IFTRUE 18459
18457: GO 18586
18459: POP
// begin stevensCanExitMap = true ;
18460: LD_ADDR_EXP 19
18464: PUSH
18465: LD_INT 1
18467: ST_TO_ADDR
// stevensFollow = false ;
18468: LD_ADDR_EXP 15
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18476: LD_EXP 39
18480: PPUSH
18481: LD_STRING DKill-1-Bur-1
18483: PPUSH
18484: CALL_OW 88
// if IsOK ( Gleb ) then
18488: LD_EXP 42
18492: PPUSH
18493: CALL_OW 302
18497: IFFALSE 18511
// Say ( Gleb , DKill-1-Glb-1 ) ;
18499: LD_EXP 42
18503: PPUSH
18504: LD_STRING DKill-1-Glb-1
18506: PPUSH
18507: CALL_OW 88
// DialogueOff ;
18511: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18515: LD_EXP 57
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: CALL_OW 235
// stevensStatus = 0 ;
18527: LD_ADDR_EXP 2
18531: PUSH
18532: LD_INT 0
18534: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18535: LD_INT 22
18537: PUSH
18538: LD_INT 3
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PPUSH
18545: CALL_OW 69
18549: PPUSH
18550: LD_EXP 57
18554: PPUSH
18555: CALL_OW 115
// wait ( 0 0$1 ) ;
18559: LD_INT 35
18561: PPUSH
18562: CALL_OW 67
// until IsDead ( Stevens ) ;
18566: LD_EXP 57
18570: PPUSH
18571: CALL_OW 301
18575: IFFALSE 18535
// wait ( 0 0$1.5 ) ;
18577: LD_INT 52
18579: PPUSH
18580: CALL_OW 67
// end ; 2 :
18584: GO 18670
18586: LD_INT 2
18588: DOUBLE
18589: EQUAL
18590: IFTRUE 18594
18592: GO 18669
18594: POP
// begin stevensCanExitMap = true ;
18595: LD_ADDR_EXP 19
18599: PUSH
18600: LD_INT 1
18602: ST_TO_ADDR
// stevensWasInDepot = false ;
18603: LD_ADDR_EXP 18
18607: PUSH
18608: LD_INT 0
18610: ST_TO_ADDR
// stevensDepot = false ;
18611: LD_ADDR_EXP 17
18615: PUSH
18616: LD_INT 0
18618: ST_TO_ADDR
// stevensStatus = 1 ;
18619: LD_ADDR_EXP 2
18623: PUSH
18624: LD_INT 1
18626: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18627: LD_EXP 39
18631: PPUSH
18632: LD_STRING DKill-2-Bur-1
18634: PPUSH
18635: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18639: LD_EXP 43
18643: PPUSH
18644: LD_STRING DKill-2-Pty-1
18646: PPUSH
18647: CALL_OW 88
// DialogueOff ;
18651: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18655: LD_EXP 57
18659: PPUSH
18660: LD_INT 37
18662: PPUSH
18663: CALL_OW 113
// end ; end ;
18667: GO 18670
18669: POP
// end ; SetRewards ;
18670: CALL 18691 0 0
// SavePlayerCharacters ;
18674: CALL 18932 0 0
// SaveGlobalVariables ;
18678: CALL 19277 0 0
// YouWin ;
18682: CALL_OW 103
// end ;
18686: LD_VAR 0 1
18690: RET
// function SetRewards ; begin
18691: LD_INT 0
18693: PPUSH
// if fastBreakthrough then
18694: LD_EXP 23
18698: IFFALSE 18712
// AddMedal ( Time , 1 ) else
18700: LD_STRING Time
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL_OW 101
18710: GO 18723
// AddMedal ( Time , - 1 ) ;
18712: LD_STRING Time
18714: PPUSH
18715: LD_INT 1
18717: NEG
18718: PPUSH
18719: CALL_OW 101
// if dial_tameApeBlocker then
18723: LD_EXP 10
18727: IFFALSE 18741
// AddMedal ( Apemen , 1 ) else
18729: LD_STRING Apemen
18731: PPUSH
18732: LD_INT 1
18734: PPUSH
18735: CALL_OW 101
18739: GO 18788
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18741: LD_EXP 10
18745: NOT
18746: PUSH
18747: LD_INT 1
18749: PPUSH
18750: LD_INT 3
18752: PPUSH
18753: CALL_OW 321
18757: PUSH
18758: LD_INT 1
18760: EQUAL
18761: AND
18762: IFFALSE 18777
// AddMedal ( Apemen , - 1 ) else
18764: LD_STRING Apemen
18766: PPUSH
18767: LD_INT 1
18769: NEG
18770: PPUSH
18771: CALL_OW 101
18775: GO 18788
// AddMedal ( Apemen , - 2 ) ;
18777: LD_STRING Apemen
18779: PPUSH
18780: LD_INT 2
18782: NEG
18783: PPUSH
18784: CALL_OW 101
// if not omarStatus then
18788: LD_EXP 1
18792: NOT
18793: IFFALSE 18807
// AddMedal ( Abdul , 1 ) else
18795: LD_STRING Abdul
18797: PPUSH
18798: LD_INT 1
18800: PPUSH
18801: CALL_OW 101
18805: GO 18818
// AddMedal ( Abdul , - 1 ) ;
18807: LD_STRING Abdul
18809: PPUSH
18810: LD_INT 1
18812: NEG
18813: PPUSH
18814: CALL_OW 101
// GiveMedals ( Main ) ;
18818: LD_STRING Main
18820: PPUSH
18821: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18825: LD_INT 22
18827: PUSH
18828: LD_INT 3
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 21
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 23
18847: PUSH
18848: LD_INT 3
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 50
18857: PUSH
18858: EMPTY
18859: LIST
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: LD_INT 25
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 25
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 25
18886: PUSH
18887: LD_INT 3
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 25
18896: PUSH
18897: LD_INT 4
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: PPUSH
18918: CALL_OW 69
18922: PPUSH
18923: CALL_OW 43
// end ;
18927: LD_VAR 0 1
18931: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
18932: LD_INT 0
18934: PPUSH
18935: PPUSH
18936: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
18937: LD_EXP 39
18941: PPUSH
18942: LD_STRING Burlak
18944: PPUSH
18945: LD_INT 3
18947: PPUSH
18948: CALL 8566 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
18952: LD_EXP 40
18956: PPUSH
18957: CALL_OW 310
18961: PPUSH
18962: LD_INT 22
18964: PPUSH
18965: CALL_OW 308
18969: IFFALSE 18986
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
18971: LD_EXP 40
18975: PPUSH
18976: LD_STRING Karamazov
18978: PPUSH
18979: LD_INT 3
18981: PPUSH
18982: CALL 8566 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
18986: LD_EXP 41
18990: PPUSH
18991: CALL_OW 310
18995: PPUSH
18996: LD_INT 22
18998: PPUSH
18999: CALL_OW 308
19003: IFFALSE 19020
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
19005: LD_EXP 41
19009: PPUSH
19010: LD_STRING Petrovova
19012: PPUSH
19013: LD_INT 3
19015: PPUSH
19016: CALL 8566 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
19020: LD_EXP 42
19024: PPUSH
19025: CALL_OW 310
19029: PPUSH
19030: LD_INT 22
19032: PPUSH
19033: CALL_OW 308
19037: IFFALSE 19054
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
19039: LD_EXP 42
19043: PPUSH
19044: LD_STRING Gleb
19046: PPUSH
19047: LD_INT 3
19049: PPUSH
19050: CALL 8566 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
19054: LD_EXP 43
19058: PPUSH
19059: CALL_OW 310
19063: PPUSH
19064: LD_INT 22
19066: PPUSH
19067: CALL_OW 308
19071: IFFALSE 19088
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
19073: LD_EXP 43
19077: PPUSH
19078: LD_STRING Petrosyan
19080: PPUSH
19081: LD_INT 3
19083: PPUSH
19084: CALL 8566 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
19088: LD_EXP 45
19092: PPUSH
19093: CALL_OW 310
19097: PPUSH
19098: LD_INT 22
19100: PPUSH
19101: CALL_OW 308
19105: IFFALSE 19122
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
19107: LD_EXP 45
19111: PPUSH
19112: LD_STRING Dolgov
19114: PPUSH
19115: LD_INT 3
19117: PPUSH
19118: CALL 8566 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
19122: LD_EXP 46
19126: PPUSH
19127: CALL_OW 310
19131: PPUSH
19132: LD_INT 22
19134: PPUSH
19135: CALL_OW 308
19139: IFFALSE 19156
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
19141: LD_EXP 46
19145: PPUSH
19146: LD_STRING Lipshchin
19148: PPUSH
19149: LD_INT 3
19151: PPUSH
19152: CALL 8566 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
19156: LD_EXP 44
19160: PPUSH
19161: CALL_OW 310
19165: PPUSH
19166: LD_INT 22
19168: PPUSH
19169: CALL_OW 308
19173: IFFALSE 19190
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
19175: LD_EXP 44
19179: PPUSH
19180: LD_STRING Titov
19182: PPUSH
19183: LD_INT 3
19185: PPUSH
19186: CALL 8566 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
19190: LD_INT 22
19192: PPUSH
19193: LD_INT 22
19195: PUSH
19196: LD_INT 3
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 21
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 2
19215: PUSH
19216: LD_INT 25
19218: PUSH
19219: LD_INT 12
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 25
19228: PUSH
19229: LD_INT 16
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 25
19238: PUSH
19239: LD_INT 15
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: PPUSH
19257: CALL_OW 70
19261: PPUSH
19262: LD_STRING other_apemans
19264: PPUSH
19265: LD_INT 3
19267: PPUSH
19268: CALL 8622 0 3
// end ;
19272: LD_VAR 0 1
19276: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
19277: LD_INT 0
19279: PPUSH
19280: PPUSH
19281: PPUSH
19282: PPUSH
19283: PPUSH
// resources = [ ] ;
19284: LD_ADDR_VAR 0 3
19288: PUSH
19289: EMPTY
19290: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19291: LD_ADDR_EXP 5
19295: PUSH
19296: EMPTY
19297: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19298: LD_EXP 2
19302: PPUSH
19303: LD_STRING 05_StevensStatus_1
19305: PPUSH
19306: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19310: LD_EXP 1
19314: PPUSH
19315: LD_STRING 05_OmarStatus_2
19317: PPUSH
19318: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) do
19322: LD_ADDR_VAR 0 2
19326: PUSH
19327: LD_INT 22
19329: PPUSH
19330: LD_INT 22
19332: PUSH
19333: LD_INT 3
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 59
19342: PUSH
19343: EMPTY
19344: LIST
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: LD_INT 34
19351: PUSH
19352: LD_INT 51
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 34
19361: PUSH
19362: LD_INT 32
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: PPUSH
19379: CALL_OW 70
19383: PUSH
19384: FOR_IN
19385: IFFALSE 19413
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19387: LD_ADDR_VAR 0 3
19391: PUSH
19392: LD_VAR 0 3
19396: PUSH
19397: LD_VAR 0 2
19401: PPUSH
19402: CALL 9752 0 1
19406: PUSH
19407: EMPTY
19408: LIST
19409: ADD
19410: ST_TO_ADDR
19411: GO 19384
19413: POP
19414: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19415: LD_VAR 0 3
19419: PPUSH
19420: LD_STRING 05_ResourcesInCargo_3
19422: PPUSH
19423: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19427: LD_ADDR_VAR 0 2
19431: PUSH
19432: LD_INT 22
19434: PPUSH
19435: LD_INT 22
19437: PUSH
19438: LD_INT 3
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 21
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 59
19457: PUSH
19458: EMPTY
19459: LIST
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: LIST
19465: PPUSH
19466: CALL_OW 70
19470: PUSH
19471: FOR_IN
19472: IFFALSE 19732
// begin driver = UnitsInside ( i ) [ 1 ] ;
19474: LD_ADDR_VAR 0 4
19478: PUSH
19479: LD_VAR 0 2
19483: PPUSH
19484: CALL_OW 313
19488: PUSH
19489: LD_INT 1
19491: ARRAY
19492: ST_TO_ADDR
// if driver = Burlak then
19493: LD_VAR 0 4
19497: PUSH
19498: LD_EXP 39
19502: EQUAL
19503: IFFALSE 19513
// driverShortName = Bur ;
19505: LD_ADDR_VAR 0 5
19509: PUSH
19510: LD_STRING Bur
19512: ST_TO_ADDR
// if driver = Karamazov then
19513: LD_VAR 0 4
19517: PUSH
19518: LD_EXP 40
19522: EQUAL
19523: IFFALSE 19533
// driverShortName = Kar ;
19525: LD_ADDR_VAR 0 5
19529: PUSH
19530: LD_STRING Kar
19532: ST_TO_ADDR
// if driver = Petrovova then
19533: LD_VAR 0 4
19537: PUSH
19538: LD_EXP 41
19542: EQUAL
19543: IFFALSE 19553
// driverShortName = Ptr ;
19545: LD_ADDR_VAR 0 5
19549: PUSH
19550: LD_STRING Ptr
19552: ST_TO_ADDR
// if driver = Gleb then
19553: LD_VAR 0 4
19557: PUSH
19558: LD_EXP 42
19562: EQUAL
19563: IFFALSE 19573
// driverShortName = Glb ;
19565: LD_ADDR_VAR 0 5
19569: PUSH
19570: LD_STRING Glb
19572: ST_TO_ADDR
// if driver = Petrosyan then
19573: LD_VAR 0 4
19577: PUSH
19578: LD_EXP 43
19582: EQUAL
19583: IFFALSE 19593
// driverShortName = Pet ;
19585: LD_ADDR_VAR 0 5
19589: PUSH
19590: LD_STRING Pet
19592: ST_TO_ADDR
// if driver = Dolgov then
19593: LD_VAR 0 4
19597: PUSH
19598: LD_EXP 45
19602: EQUAL
19603: IFFALSE 19613
// driverShortName = Dol ;
19605: LD_ADDR_VAR 0 5
19609: PUSH
19610: LD_STRING Dol
19612: ST_TO_ADDR
// if driver = Lipshchin then
19613: LD_VAR 0 4
19617: PUSH
19618: LD_EXP 46
19622: EQUAL
19623: IFFALSE 19633
// driverShortName = Lip ;
19625: LD_ADDR_VAR 0 5
19629: PUSH
19630: LD_STRING Lip
19632: ST_TO_ADDR
// if driver = Titov then
19633: LD_VAR 0 4
19637: PUSH
19638: LD_EXP 44
19642: EQUAL
19643: IFFALSE 19653
// driverShortName = Tit ;
19645: LD_ADDR_VAR 0 5
19649: PUSH
19650: LD_STRING Tit
19652: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19653: LD_ADDR_EXP 5
19657: PUSH
19658: LD_EXP 5
19662: PUSH
19663: LD_VAR 0 2
19667: PPUSH
19668: CALL_OW 248
19672: PUSH
19673: LD_VAR 0 2
19677: PPUSH
19678: CALL_OW 265
19682: PUSH
19683: LD_VAR 0 2
19687: PPUSH
19688: CALL_OW 262
19692: PUSH
19693: LD_VAR 0 2
19697: PPUSH
19698: CALL_OW 263
19702: PUSH
19703: LD_VAR 0 2
19707: PPUSH
19708: CALL_OW 264
19712: PUSH
19713: LD_VAR 0 5
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: PUSH
19726: EMPTY
19727: LIST
19728: ADD
19729: ST_TO_ADDR
// end ;
19730: GO 19471
19732: POP
19733: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19734: LD_EXP 5
19738: PPUSH
19739: LD_STRING 05_Tanks_4
19741: PPUSH
19742: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19746: LD_INT 22
19748: PUSH
19749: LD_INT 3
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 23
19758: PUSH
19759: LD_INT 3
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 21
19768: PUSH
19769: LD_INT 3
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: LD_INT 30
19781: PUSH
19782: LD_INT 6
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 30
19791: PUSH
19792: LD_INT 7
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PPUSH
19810: CALL_OW 69
19814: NOT
19815: IFFALSE 19825
// labDestroyed = 1 ;
19817: LD_ADDR_EXP 3
19821: PUSH
19822: LD_INT 1
19824: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
19825: LD_EXP 3
19829: PPUSH
19830: LD_STRING 05_LabDestroyed_5
19832: PPUSH
19833: CALL_OW 39
// end ; end_of_file
19837: LD_VAR 0 1
19841: RET
// export function Nef_PrepareNature ; var i , un ; begin
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
19846: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
19847: LD_ADDR_VAR 0 2
19851: PUSH
19852: DOUBLE
19853: LD_INT 1
19855: DEC
19856: ST_TO_ADDR
19857: LD_EXP 27
19861: PUSH
19862: LD_INT 1
19864: ARRAY
19865: PUSH
19866: FOR_TO
19867: IFFALSE 19977
// begin uc_side = 0 ;
19869: LD_ADDR_OWVAR 20
19873: PUSH
19874: LD_INT 0
19876: ST_TO_ADDR
// uc_nation = nation_nature ;
19877: LD_ADDR_OWVAR 21
19881: PUSH
19882: LD_INT 0
19884: ST_TO_ADDR
// hc_class = class_apeman ;
19885: LD_ADDR_OWVAR 28
19889: PUSH
19890: LD_INT 12
19892: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19893: LD_ADDR_OWVAR 31
19897: PUSH
19898: LD_EXP 28
19902: PUSH
19903: LD_INT 1
19905: ARRAY
19906: PUSH
19907: LD_EXP 28
19911: PUSH
19912: LD_INT 2
19914: ARRAY
19915: PUSH
19916: LD_EXP 28
19920: PUSH
19921: LD_INT 3
19923: ARRAY
19924: PUSH
19925: LD_EXP 28
19929: PUSH
19930: LD_INT 4
19932: ARRAY
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19940: LD_ADDR_OWVAR 35
19944: PUSH
19945: LD_EXP 29
19949: ST_TO_ADDR
// un = CreateHuman ;
19950: LD_ADDR_VAR 0 3
19954: PUSH
19955: CALL_OW 44
19959: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19960: LD_VAR 0 3
19964: PPUSH
19965: LD_INT 33
19967: PPUSH
19968: LD_INT 0
19970: PPUSH
19971: CALL_OW 49
// end ;
19975: GO 19866
19977: POP
19978: POP
// for i := 1 to animalsAmount [ 2 ] do
19979: LD_ADDR_VAR 0 2
19983: PUSH
19984: DOUBLE
19985: LD_INT 1
19987: DEC
19988: ST_TO_ADDR
19989: LD_EXP 27
19993: PUSH
19994: LD_INT 2
19996: ARRAY
19997: PUSH
19998: FOR_TO
19999: IFFALSE 20109
// begin uc_side = 0 ;
20001: LD_ADDR_OWVAR 20
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// uc_nation = nation_nature ;
20009: LD_ADDR_OWVAR 21
20013: PUSH
20014: LD_INT 0
20016: ST_TO_ADDR
// hc_class = class_phororhacos ;
20017: LD_ADDR_OWVAR 28
20021: PUSH
20022: LD_INT 18
20024: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20025: LD_ADDR_OWVAR 31
20029: PUSH
20030: LD_EXP 28
20034: PUSH
20035: LD_INT 1
20037: ARRAY
20038: PUSH
20039: LD_EXP 28
20043: PUSH
20044: LD_INT 2
20046: ARRAY
20047: PUSH
20048: LD_EXP 28
20052: PUSH
20053: LD_INT 3
20055: ARRAY
20056: PUSH
20057: LD_EXP 28
20061: PUSH
20062: LD_INT 4
20064: ARRAY
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20072: LD_ADDR_OWVAR 35
20076: PUSH
20077: LD_EXP 29
20081: ST_TO_ADDR
// un = CreateHuman ;
20082: LD_ADDR_VAR 0 3
20086: PUSH
20087: CALL_OW 44
20091: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20092: LD_VAR 0 3
20096: PPUSH
20097: LD_INT 33
20099: PPUSH
20100: LD_INT 0
20102: PPUSH
20103: CALL_OW 49
// end ;
20107: GO 19998
20109: POP
20110: POP
// for i := 1 to animalsAmount [ 3 ] do
20111: LD_ADDR_VAR 0 2
20115: PUSH
20116: DOUBLE
20117: LD_INT 1
20119: DEC
20120: ST_TO_ADDR
20121: LD_EXP 27
20125: PUSH
20126: LD_INT 3
20128: ARRAY
20129: PUSH
20130: FOR_TO
20131: IFFALSE 20241
// begin uc_side = 0 ;
20133: LD_ADDR_OWVAR 20
20137: PUSH
20138: LD_INT 0
20140: ST_TO_ADDR
// uc_nation = nation_nature ;
20141: LD_ADDR_OWVAR 21
20145: PUSH
20146: LD_INT 0
20148: ST_TO_ADDR
// hc_class = class_tiger ;
20149: LD_ADDR_OWVAR 28
20153: PUSH
20154: LD_INT 14
20156: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20157: LD_ADDR_OWVAR 31
20161: PUSH
20162: LD_EXP 28
20166: PUSH
20167: LD_INT 1
20169: ARRAY
20170: PUSH
20171: LD_EXP 28
20175: PUSH
20176: LD_INT 2
20178: ARRAY
20179: PUSH
20180: LD_EXP 28
20184: PUSH
20185: LD_INT 3
20187: ARRAY
20188: PUSH
20189: LD_EXP 28
20193: PUSH
20194: LD_INT 4
20196: ARRAY
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20204: LD_ADDR_OWVAR 35
20208: PUSH
20209: LD_EXP 29
20213: ST_TO_ADDR
// un = CreateHuman ;
20214: LD_ADDR_VAR 0 3
20218: PUSH
20219: CALL_OW 44
20223: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20224: LD_VAR 0 3
20228: PPUSH
20229: LD_INT 33
20231: PPUSH
20232: LD_INT 0
20234: PPUSH
20235: CALL_OW 49
// end ;
20239: GO 20130
20241: POP
20242: POP
// for i := 1 to animalsAmount [ 4 ] do
20243: LD_ADDR_VAR 0 2
20247: PUSH
20248: DOUBLE
20249: LD_INT 1
20251: DEC
20252: ST_TO_ADDR
20253: LD_EXP 27
20257: PUSH
20258: LD_INT 4
20260: ARRAY
20261: PUSH
20262: FOR_TO
20263: IFFALSE 20373
// begin uc_side = 0 ;
20265: LD_ADDR_OWVAR 20
20269: PUSH
20270: LD_INT 0
20272: ST_TO_ADDR
// uc_nation = nation_nature ;
20273: LD_ADDR_OWVAR 21
20277: PUSH
20278: LD_INT 0
20280: ST_TO_ADDR
// hc_class = 21 ;
20281: LD_ADDR_OWVAR 28
20285: PUSH
20286: LD_INT 21
20288: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20289: LD_ADDR_OWVAR 31
20293: PUSH
20294: LD_EXP 28
20298: PUSH
20299: LD_INT 1
20301: ARRAY
20302: PUSH
20303: LD_EXP 28
20307: PUSH
20308: LD_INT 2
20310: ARRAY
20311: PUSH
20312: LD_EXP 28
20316: PUSH
20317: LD_INT 3
20319: ARRAY
20320: PUSH
20321: LD_EXP 28
20325: PUSH
20326: LD_INT 4
20328: ARRAY
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20336: LD_ADDR_OWVAR 35
20340: PUSH
20341: LD_EXP 29
20345: ST_TO_ADDR
// un = CreateHuman ;
20346: LD_ADDR_VAR 0 3
20350: PUSH
20351: CALL_OW 44
20355: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20356: LD_VAR 0 3
20360: PPUSH
20361: LD_INT 33
20363: PPUSH
20364: LD_INT 0
20366: PPUSH
20367: CALL_OW 49
// end ;
20371: GO 20262
20373: POP
20374: POP
// for i := 1 to animalsAmount [ 5 ] do
20375: LD_ADDR_VAR 0 2
20379: PUSH
20380: DOUBLE
20381: LD_INT 1
20383: DEC
20384: ST_TO_ADDR
20385: LD_EXP 27
20389: PUSH
20390: LD_INT 5
20392: ARRAY
20393: PUSH
20394: FOR_TO
20395: IFFALSE 20456
// begin uc_side = 0 ;
20397: LD_ADDR_OWVAR 20
20401: PUSH
20402: LD_INT 0
20404: ST_TO_ADDR
// uc_nation = nation_nature ;
20405: LD_ADDR_OWVAR 21
20409: PUSH
20410: LD_INT 0
20412: ST_TO_ADDR
// vc_chassis := 31 ;
20413: LD_ADDR_OWVAR 37
20417: PUSH
20418: LD_INT 31
20420: ST_TO_ADDR
// vc_control := control_rider ;
20421: LD_ADDR_OWVAR 38
20425: PUSH
20426: LD_INT 4
20428: ST_TO_ADDR
// un := CreateVehicle ;
20429: LD_ADDR_VAR 0 3
20433: PUSH
20434: CALL_OW 45
20438: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20439: LD_VAR 0 3
20443: PPUSH
20444: LD_INT 33
20446: PPUSH
20447: LD_INT 0
20449: PPUSH
20450: CALL_OW 49
// end ;
20454: GO 20394
20456: POP
20457: POP
// end ; end_of_file
20458: LD_VAR 0 1
20462: RET
// every 0 0$1 do
20463: GO 20465
20465: DISABLE
// begin enable ;
20466: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20467: LD_ADDR_OWVAR 47
20471: PUSH
20472: LD_STRING #Am01-1
20474: PUSH
20475: LD_EXP 7
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20484: LD_ADDR_EXP 7
20488: PUSH
20489: LD_EXP 7
20493: PUSH
20494: LD_INT 35
20496: PLUS
20497: ST_TO_ADDR
// end ; end_of_file
20498: END
// every 0 0$01 do var timer ;
20499: GO 20501
20501: DISABLE
20502: LD_INT 0
20504: PPUSH
// begin timer := 0 0$30 ;
20505: LD_ADDR_VAR 0 1
20509: PUSH
20510: LD_INT 1050
20512: ST_TO_ADDR
// repeat wait ( timer ) ;
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20522: LD_EXP 22
20526: PUSH
20527: LD_INT 6
20529: GREATEREQUAL
20530: PUSH
20531: LD_EXP 22
20535: PUSH
20536: LD_INT 12
20538: LESS
20539: AND
20540: IFFALSE 20556
// timer := timer + 0 0$3 ;
20542: LD_ADDR_VAR 0 1
20546: PUSH
20547: LD_VAR 0 1
20551: PUSH
20552: LD_INT 105
20554: PLUS
20555: ST_TO_ADDR
// if cratesSpawned >= 12 then
20556: LD_EXP 22
20560: PUSH
20561: LD_INT 12
20563: GREATEREQUAL
20564: IFFALSE 20580
// timer := timer + 0 0$9 ;
20566: LD_ADDR_VAR 0 1
20570: PUSH
20571: LD_VAR 0 1
20575: PUSH
20576: LD_INT 315
20578: PLUS
20579: ST_TO_ADDR
// if timer > 3 3$00 then
20580: LD_VAR 0 1
20584: PUSH
20585: LD_INT 6300
20587: GREATER
20588: IFFALSE 20598
// timer := 0 0$50 ;
20590: LD_ADDR_VAR 0 1
20594: PUSH
20595: LD_INT 1750
20597: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20598: LD_INT 3
20600: PPUSH
20601: LD_INT 5
20603: PPUSH
20604: CALL_OW 12
20608: PPUSH
20609: LD_INT 46
20611: PPUSH
20612: LD_INT 1
20614: PPUSH
20615: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20619: LD_ADDR_EXP 22
20623: PUSH
20624: LD_EXP 22
20628: PUSH
20629: LD_INT 1
20631: PLUS
20632: ST_TO_ADDR
// until false ;
20633: LD_INT 0
20635: IFFALSE 20513
// end ;
20637: PPOPN 1
20639: END
// every 0 0$5 do
20640: GO 20642
20642: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20643: LD_INT 5
20645: PPUSH
20646: LD_INT 48
20648: PPUSH
20649: LD_INT 1
20651: PPUSH
20652: CALL_OW 55
// wait ( 0 0$40 ) ;
20656: LD_INT 1400
20658: PPUSH
20659: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20663: LD_INT 5
20665: PPUSH
20666: LD_INT 48
20668: PPUSH
20669: LD_INT 1
20671: PPUSH
20672: CALL_OW 55
// end ;
20676: END
// every 10 10$0 do
20677: GO 20679
20679: DISABLE
// begin enable ;
20680: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20681: LD_INT 3
20683: PPUSH
20684: LD_INT 5
20686: PPUSH
20687: CALL_OW 12
20691: PPUSH
20692: LD_INT 48
20694: PPUSH
20695: LD_INT 1
20697: PPUSH
20698: CALL_OW 55
// end ; end_of_file
20702: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20703: LD_INT 0
20705: PPUSH
// uc_side = 1 ;
20706: LD_ADDR_OWVAR 20
20710: PUSH
20711: LD_INT 1
20713: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20714: LD_ADDR_EXP 57
20718: PUSH
20719: LD_STRING Stevens
20721: PPUSH
20722: LD_INT 0
20724: PPUSH
20725: LD_INT 0
20727: PPUSH
20728: CALL 8448 0 3
20732: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20733: LD_EXP 57
20737: PPUSH
20738: LD_VAR 0 1
20742: PPUSH
20743: LD_INT 1
20745: PPUSH
20746: CALL_OW 49
// end ; end_of_file
20750: LD_VAR 0 2
20754: RET
// every 1 trigger achievement_DestroyedHovercrafts >= 3 do
20755: LD_EXP 25
20759: PUSH
20760: LD_INT 3
20762: GREATEREQUAL
20763: IFFALSE 20775
20765: GO 20767
20767: DISABLE
// SetAchievement ( ACH_HOVER ) ;
20768: LD_STRING ACH_HOVER
20770: PPUSH
20771: CALL_OW 543
20775: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_nature ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) and not FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_class , class_apeman ] ] ) do
20776: LD_INT 22
20778: PUSH
20779: LD_INT 3
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 23
20788: PUSH
20789: LD_INT 0
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 2
20798: PUSH
20799: LD_INT 25
20801: PUSH
20802: LD_INT 12
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 25
20811: PUSH
20812: LD_INT 16
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 25
20821: PUSH
20822: LD_INT 15
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: LIST
20839: PPUSH
20840: CALL_OW 69
20844: PUSH
20845: LD_INT 22
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 23
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 25
20867: PUSH
20868: LD_INT 12
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: PPUSH
20880: CALL_OW 69
20884: NOT
20885: AND
20886: IFFALSE 20898
20888: GO 20890
20890: DISABLE
// SetAchievement ( ACH_REDARMY ) ;
20891: LD_STRING ACH_REDARMY
20893: PPUSH
20894: CALL_OW 543
20898: END
// every 0 0$1 trigger not achievement_CollectedCrates do var crates , depot ;
20899: LD_EXP 26
20903: NOT
20904: IFFALSE 21037
20906: GO 20908
20908: DISABLE
20909: LD_INT 0
20911: PPUSH
20912: PPUSH
// begin enable ;
20913: ENABLE
// crates = 0 ;
20914: LD_ADDR_VAR 0 1
20918: PUSH
20919: LD_INT 0
20921: ST_TO_ADDR
// for depot in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
20922: LD_ADDR_VAR 0 2
20926: PUSH
20927: LD_INT 22
20929: PUSH
20930: LD_INT 3
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 21
20939: PUSH
20940: LD_INT 3
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 30
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 50
20959: PUSH
20960: EMPTY
20961: LIST
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: PPUSH
20969: CALL_OW 69
20973: PUSH
20974: FOR_IN
20975: IFFALSE 21008
// crates = crates + GetResourceType ( GetBase ( depot ) , mat_cans ) ;
20977: LD_ADDR_VAR 0 1
20981: PUSH
20982: LD_VAR 0 1
20986: PUSH
20987: LD_VAR 0 2
20991: PPUSH
20992: CALL_OW 274
20996: PPUSH
20997: LD_INT 1
20999: PPUSH
21000: CALL_OW 275
21004: PLUS
21005: ST_TO_ADDR
21006: GO 20974
21008: POP
21009: POP
// if crates >= 500 then
21010: LD_VAR 0 1
21014: PUSH
21015: LD_INT 500
21017: GREATEREQUAL
21018: IFFALSE 21037
// begin achievement_CollectedCrates = true ;
21020: LD_ADDR_EXP 26
21024: PUSH
21025: LD_INT 1
21027: ST_TO_ADDR
// SetAchievement ( ACH_CRATES ) ;
21028: LD_STRING ACH_CRATES
21030: PPUSH
21031: CALL_OW 543
// exit ;
21035: GO 21037
// end ; end ; end_of_file
21037: PPOPN 2
21039: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
21040: LD_INT 0
21042: PPUSH
21043: PPUSH
// if not missionNumber then
21044: LD_VAR 0 2
21048: NOT
21049: IFFALSE 21053
// exit ;
21051: GO 21183
// achiv := false ;
21053: LD_ADDR_VAR 0 7
21057: PUSH
21058: LD_INT 0
21060: ST_TO_ADDR
// case campaignNumber of 1 :
21061: LD_VAR 0 1
21065: PUSH
21066: LD_INT 1
21068: DOUBLE
21069: EQUAL
21070: IFTRUE 21074
21072: GO 21085
21074: POP
// achiv := ACH_GOTA ; 2 :
21075: LD_ADDR_VAR 0 7
21079: PUSH
21080: LD_STRING ACH_GOTA
21082: ST_TO_ADDR
21083: GO 21135
21085: LD_INT 2
21087: DOUBLE
21088: EQUAL
21089: IFTRUE 21093
21091: GO 21096
21093: POP
// ; 3 :
21094: GO 21135
21096: LD_INT 3
21098: DOUBLE
21099: EQUAL
21100: IFTRUE 21104
21102: GO 21115
21104: POP
// achiv := ACH_MOTSU ; 4 :
21105: LD_ADDR_VAR 0 7
21109: PUSH
21110: LD_STRING ACH_MOTSU
21112: ST_TO_ADDR
21113: GO 21135
21115: LD_INT 4
21117: DOUBLE
21118: EQUAL
21119: IFTRUE 21123
21121: GO 21134
21123: POP
// achiv := ACH_LOP ; end ;
21124: LD_ADDR_VAR 0 7
21128: PUSH
21129: LD_STRING ACH_LOP
21131: ST_TO_ADDR
21132: GO 21135
21134: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
21135: LD_OWVAR 67
21139: PUSH
21140: LD_INT 3
21142: EQUAL
21143: PUSH
21144: LD_VAR 0 7
21148: AND
21149: PUSH
21150: LD_VAR 0 3
21154: AND
21155: PUSH
21156: LD_VAR 0 4
21160: AND
21161: PUSH
21162: LD_VAR 0 5
21166: AND
21167: IFFALSE 21183
// SetAchievementEX ( achiv , missionNumber ) ;
21169: LD_VAR 0 7
21173: PPUSH
21174: LD_VAR 0 2
21178: PPUSH
21179: CALL_OW 564
// end ;
21183: LD_VAR 0 6
21187: RET
// export function SA_BehemothConstructed ; begin
21188: LD_INT 0
21190: PPUSH
// SetAchievement ( ACH_SMC ) ;
21191: LD_STRING ACH_SMC
21193: PPUSH
21194: CALL_OW 543
// end ;
21198: LD_VAR 0 1
21202: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
21203: LD_VAR 0 2
21207: PUSH
21208: LD_INT 1
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21223
21216: POP
// HackUnlimitedResources ; 2 :
21217: CALL 21407 0 0
21221: GO 21404
21223: LD_INT 2
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21238
21231: POP
// HackSetLevel10 ; 3 :
21232: CALL 21540 0 0
21236: GO 21404
21238: LD_INT 3
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21253
21246: POP
// HackSetLevel10YourUnits ; 4 :
21247: CALL 21625 0 0
21251: GO 21404
21253: LD_INT 4
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21283
21261: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
21262: LD_VAR 0 3
21266: PPUSH
21267: LD_VAR 0 4
21271: PPUSH
21272: LD_VAR 0 5
21276: PPUSH
21277: CALL 21715 0 3
21281: GO 21404
21283: LD_INT 5
21285: DOUBLE
21286: EQUAL
21287: IFTRUE 21291
21289: GO 21298
21291: POP
// HackSpawnVehicle ; 6 :
21292: CALL 21776 0 0
21296: GO 21404
21298: LD_INT 6
21300: DOUBLE
21301: EQUAL
21302: IFTRUE 21306
21304: GO 21313
21306: POP
// HackInvincible ; 7 :
21307: CALL 22851 0 0
21311: GO 21404
21313: LD_INT 7
21315: DOUBLE
21316: EQUAL
21317: IFTRUE 21321
21319: GO 21328
21321: POP
// HackInvisible ; 8 :
21322: CALL 22962 0 0
21326: GO 21404
21328: LD_INT 8
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21336
21334: GO 21343
21336: POP
// HackChangeYourSide ; 9 :
21337: CALL 23019 0 0
21341: GO 21404
21343: LD_INT 9
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21358
21351: POP
// HackChangeUnitSide ; 10 :
21352: CALL 23061 0 0
21356: GO 21404
21358: LD_INT 10
21360: DOUBLE
21361: EQUAL
21362: IFTRUE 21366
21364: GO 21373
21366: POP
// HackFog ; 11 :
21367: CALL 23162 0 0
21371: GO 21404
21373: LD_INT 11
21375: DOUBLE
21376: EQUAL
21377: IFTRUE 21381
21379: GO 21388
21381: POP
// HackApeman ; 12 :
21382: CALL 23177 0 0
21386: GO 21404
21388: LD_INT 12
21390: DOUBLE
21391: EQUAL
21392: IFTRUE 21396
21394: GO 21403
21396: POP
// HackBoom ; end ;
21397: CALL 23262 0 0
21401: GO 21404
21403: POP
// end ;
21404: PPOPN 6
21406: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
21407: LD_INT 0
21409: PPUSH
21410: PPUSH
21411: PPUSH
21412: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21413: LD_ADDR_VAR 0 4
21417: PUSH
21418: LD_INT 22
21420: PUSH
21421: LD_OWVAR 2
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 2
21432: PUSH
21433: LD_INT 30
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 30
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PPUSH
21462: CALL_OW 69
21466: ST_TO_ADDR
// if not tmp then
21467: LD_VAR 0 4
21471: NOT
21472: IFFALSE 21476
// exit ;
21474: GO 21535
// for i in tmp do
21476: LD_ADDR_VAR 0 2
21480: PUSH
21481: LD_VAR 0 4
21485: PUSH
21486: FOR_IN
21487: IFFALSE 21533
// for j = 1 to 3 do
21489: LD_ADDR_VAR 0 3
21493: PUSH
21494: DOUBLE
21495: LD_INT 1
21497: DEC
21498: ST_TO_ADDR
21499: LD_INT 3
21501: PUSH
21502: FOR_TO
21503: IFFALSE 21529
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21505: LD_VAR 0 2
21509: PPUSH
21510: CALL_OW 274
21514: PPUSH
21515: LD_VAR 0 3
21519: PPUSH
21520: LD_INT 99999
21522: PPUSH
21523: CALL_OW 277
21527: GO 21502
21529: POP
21530: POP
21531: GO 21486
21533: POP
21534: POP
// end ;
21535: LD_VAR 0 1
21539: RET
// export function HackSetLevel10 ; var i , j ; begin
21540: LD_INT 0
21542: PPUSH
21543: PPUSH
21544: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21545: LD_ADDR_VAR 0 2
21549: PUSH
21550: LD_INT 21
21552: PUSH
21553: LD_INT 1
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PPUSH
21560: CALL_OW 69
21564: PUSH
21565: FOR_IN
21566: IFFALSE 21618
// if IsSelected ( i ) then
21568: LD_VAR 0 2
21572: PPUSH
21573: CALL_OW 306
21577: IFFALSE 21616
// begin for j := 1 to 4 do
21579: LD_ADDR_VAR 0 3
21583: PUSH
21584: DOUBLE
21585: LD_INT 1
21587: DEC
21588: ST_TO_ADDR
21589: LD_INT 4
21591: PUSH
21592: FOR_TO
21593: IFFALSE 21614
// SetSkill ( i , j , 10 ) ;
21595: LD_VAR 0 2
21599: PPUSH
21600: LD_VAR 0 3
21604: PPUSH
21605: LD_INT 10
21607: PPUSH
21608: CALL_OW 237
21612: GO 21592
21614: POP
21615: POP
// end ;
21616: GO 21565
21618: POP
21619: POP
// end ;
21620: LD_VAR 0 1
21624: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
21625: LD_INT 0
21627: PPUSH
21628: PPUSH
21629: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21630: LD_ADDR_VAR 0 2
21634: PUSH
21635: LD_INT 22
21637: PUSH
21638: LD_OWVAR 2
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 21
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PPUSH
21661: CALL_OW 69
21665: PUSH
21666: FOR_IN
21667: IFFALSE 21708
// begin for j := 1 to 4 do
21669: LD_ADDR_VAR 0 3
21673: PUSH
21674: DOUBLE
21675: LD_INT 1
21677: DEC
21678: ST_TO_ADDR
21679: LD_INT 4
21681: PUSH
21682: FOR_TO
21683: IFFALSE 21704
// SetSkill ( i , j , 10 ) ;
21685: LD_VAR 0 2
21689: PPUSH
21690: LD_VAR 0 3
21694: PPUSH
21695: LD_INT 10
21697: PPUSH
21698: CALL_OW 237
21702: GO 21682
21704: POP
21705: POP
// end ;
21706: GO 21666
21708: POP
21709: POP
// end ;
21710: LD_VAR 0 1
21714: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
21715: LD_INT 0
21717: PPUSH
// uc_side := your_side ;
21718: LD_ADDR_OWVAR 20
21722: PUSH
21723: LD_OWVAR 2
21727: ST_TO_ADDR
// uc_nation := nation ;
21728: LD_ADDR_OWVAR 21
21732: PUSH
21733: LD_VAR 0 1
21737: ST_TO_ADDR
// InitHc ;
21738: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21742: LD_INT 0
21744: PPUSH
21745: LD_VAR 0 2
21749: PPUSH
21750: LD_VAR 0 3
21754: PPUSH
21755: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
21759: CALL_OW 44
21763: PPUSH
21764: LD_INT 1
21766: PPUSH
21767: CALL_OW 51
// end ;
21771: LD_VAR 0 4
21775: RET
// export function HackSpawnVehicle ; begin
21776: LD_INT 0
21778: PPUSH
// uc_side := your_side ;
21779: LD_ADDR_OWVAR 20
21783: PUSH
21784: LD_OWVAR 2
21788: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
21789: LD_ADDR_OWVAR 21
21793: PUSH
21794: LD_INT 1
21796: PPUSH
21797: LD_INT 3
21799: PPUSH
21800: CALL_OW 12
21804: ST_TO_ADDR
// InitVc ;
21805: CALL_OW 20
// case uc_nation of 1 :
21809: LD_OWVAR 21
21813: PUSH
21814: LD_INT 1
21816: DOUBLE
21817: EQUAL
21818: IFTRUE 21822
21820: GO 22129
21822: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
21823: LD_ADDR_OWVAR 37
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 3
21836: PUSH
21837: LD_INT 4
21839: PUSH
21840: LD_INT 5
21842: PUSH
21843: LD_INT 11
21845: PUSH
21846: LD_INT 12
21848: PUSH
21849: LD_INT 13
21851: PUSH
21852: LD_INT 14
21854: PUSH
21855: LD_INT 21
21857: PUSH
21858: LD_INT 22
21860: PUSH
21861: LD_INT 23
21863: PUSH
21864: LD_INT 24
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 1
21884: PPUSH
21885: LD_INT 13
21887: PPUSH
21888: CALL_OW 12
21892: ARRAY
21893: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
21894: LD_ADDR_OWVAR 38
21898: PUSH
21899: LD_INT 1
21901: PUSH
21902: LD_INT 3
21904: PUSH
21905: LD_INT 4
21907: PUSH
21908: LD_INT 5
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 1
21919: PPUSH
21920: LD_INT 4
21922: PPUSH
21923: CALL_OW 12
21927: ARRAY
21928: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
21929: LD_ADDR_OWVAR 39
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 2
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: PPUSH
21951: LD_INT 3
21953: PPUSH
21954: CALL_OW 12
21958: ARRAY
21959: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
21960: LD_ADDR_OWVAR 40
21964: PUSH
21965: LD_INT 14
21967: PUSH
21968: LD_INT 12
21970: PUSH
21971: LD_INT 13
21973: PUSH
21974: LD_INT 5
21976: PUSH
21977: LD_INT 10
21979: PUSH
21980: LD_INT 4
21982: PUSH
21983: LD_INT 6
21985: PUSH
21986: LD_INT 9
21988: PUSH
21989: LD_INT 3
21991: PUSH
21992: LD_INT 2
21994: PUSH
21995: LD_INT 11
21997: PUSH
21998: LD_INT 7
22000: PUSH
22001: LD_INT 8
22003: PUSH
22004: LD_INT 15
22006: PUSH
22007: LD_INT 32
22009: PUSH
22010: LD_INT 31
22012: PUSH
22013: LD_INT 24
22015: PUSH
22016: LD_INT 26
22018: PUSH
22019: LD_INT 25
22021: PUSH
22022: LD_INT 27
22024: PUSH
22025: LD_INT 23
22027: PUSH
22028: LD_INT 22
22030: PUSH
22031: LD_INT 30
22033: PUSH
22034: LD_INT 28
22036: PUSH
22037: LD_INT 29
22039: PUSH
22040: LD_INT 53
22042: PUSH
22043: LD_INT 51
22045: PUSH
22046: LD_INT 52
22048: PUSH
22049: LD_INT 43
22051: PUSH
22052: LD_INT 44
22054: PUSH
22055: LD_INT 46
22057: PUSH
22058: LD_INT 42
22060: PUSH
22061: LD_INT 47
22063: PUSH
22064: LD_INT 45
22066: PUSH
22067: LD_INT 48
22069: PUSH
22070: LD_INT 55
22072: PUSH
22073: LD_INT 49
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 1
22117: PPUSH
22118: LD_INT 37
22120: PPUSH
22121: CALL_OW 12
22125: ARRAY
22126: ST_TO_ADDR
// end ; 2 :
22127: GO 22760
22129: LD_INT 2
22131: DOUBLE
22132: EQUAL
22133: IFTRUE 22137
22135: GO 22444
22137: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
22138: LD_ADDR_OWVAR 37
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: LD_INT 3
22151: PUSH
22152: LD_INT 4
22154: PUSH
22155: LD_INT 5
22157: PUSH
22158: LD_INT 11
22160: PUSH
22161: LD_INT 12
22163: PUSH
22164: LD_INT 13
22166: PUSH
22167: LD_INT 14
22169: PUSH
22170: LD_INT 21
22172: PUSH
22173: LD_INT 22
22175: PUSH
22176: LD_INT 23
22178: PUSH
22179: LD_INT 24
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 1
22199: PPUSH
22200: LD_INT 13
22202: PPUSH
22203: CALL_OW 12
22207: ARRAY
22208: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
22209: LD_ADDR_OWVAR 38
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: LD_INT 3
22219: PUSH
22220: LD_INT 4
22222: PUSH
22223: LD_INT 5
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 1
22234: PPUSH
22235: LD_INT 4
22237: PPUSH
22238: CALL_OW 12
22242: ARRAY
22243: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
22244: LD_ADDR_OWVAR 39
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: LD_INT 2
22254: PUSH
22255: LD_INT 3
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: PPUSH
22266: LD_INT 3
22268: PPUSH
22269: CALL_OW 12
22273: ARRAY
22274: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
22275: LD_ADDR_OWVAR 40
22279: PUSH
22280: LD_INT 14
22282: PUSH
22283: LD_INT 12
22285: PUSH
22286: LD_INT 13
22288: PUSH
22289: LD_INT 5
22291: PUSH
22292: LD_INT 10
22294: PUSH
22295: LD_INT 4
22297: PUSH
22298: LD_INT 6
22300: PUSH
22301: LD_INT 9
22303: PUSH
22304: LD_INT 3
22306: PUSH
22307: LD_INT 2
22309: PUSH
22310: LD_INT 11
22312: PUSH
22313: LD_INT 7
22315: PUSH
22316: LD_INT 8
22318: PUSH
22319: LD_INT 15
22321: PUSH
22322: LD_INT 32
22324: PUSH
22325: LD_INT 31
22327: PUSH
22328: LD_INT 24
22330: PUSH
22331: LD_INT 26
22333: PUSH
22334: LD_INT 25
22336: PUSH
22337: LD_INT 27
22339: PUSH
22340: LD_INT 23
22342: PUSH
22343: LD_INT 22
22345: PUSH
22346: LD_INT 30
22348: PUSH
22349: LD_INT 28
22351: PUSH
22352: LD_INT 29
22354: PUSH
22355: LD_INT 53
22357: PUSH
22358: LD_INT 51
22360: PUSH
22361: LD_INT 52
22363: PUSH
22364: LD_INT 43
22366: PUSH
22367: LD_INT 44
22369: PUSH
22370: LD_INT 46
22372: PUSH
22373: LD_INT 42
22375: PUSH
22376: LD_INT 47
22378: PUSH
22379: LD_INT 45
22381: PUSH
22382: LD_INT 48
22384: PUSH
22385: LD_INT 55
22387: PUSH
22388: LD_INT 49
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 1
22432: PPUSH
22433: LD_INT 37
22435: PPUSH
22436: CALL_OW 12
22440: ARRAY
22441: ST_TO_ADDR
// end ; 3 :
22442: GO 22760
22444: LD_INT 3
22446: DOUBLE
22447: EQUAL
22448: IFTRUE 22452
22450: GO 22759
22452: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
22453: LD_ADDR_OWVAR 37
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: LD_INT 3
22466: PUSH
22467: LD_INT 4
22469: PUSH
22470: LD_INT 5
22472: PUSH
22473: LD_INT 11
22475: PUSH
22476: LD_INT 12
22478: PUSH
22479: LD_INT 13
22481: PUSH
22482: LD_INT 14
22484: PUSH
22485: LD_INT 21
22487: PUSH
22488: LD_INT 22
22490: PUSH
22491: LD_INT 23
22493: PUSH
22494: LD_INT 24
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 1
22514: PPUSH
22515: LD_INT 13
22517: PPUSH
22518: CALL_OW 12
22522: ARRAY
22523: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
22524: LD_ADDR_OWVAR 38
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: LD_INT 4
22537: PUSH
22538: LD_INT 5
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 1
22549: PPUSH
22550: LD_INT 4
22552: PPUSH
22553: CALL_OW 12
22557: ARRAY
22558: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
22559: LD_ADDR_OWVAR 39
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 3
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PPUSH
22581: LD_INT 3
22583: PPUSH
22584: CALL_OW 12
22588: ARRAY
22589: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
22590: LD_ADDR_OWVAR 40
22594: PUSH
22595: LD_INT 14
22597: PUSH
22598: LD_INT 12
22600: PUSH
22601: LD_INT 13
22603: PUSH
22604: LD_INT 5
22606: PUSH
22607: LD_INT 10
22609: PUSH
22610: LD_INT 4
22612: PUSH
22613: LD_INT 6
22615: PUSH
22616: LD_INT 9
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: LD_INT 11
22627: PUSH
22628: LD_INT 7
22630: PUSH
22631: LD_INT 8
22633: PUSH
22634: LD_INT 15
22636: PUSH
22637: LD_INT 32
22639: PUSH
22640: LD_INT 31
22642: PUSH
22643: LD_INT 24
22645: PUSH
22646: LD_INT 26
22648: PUSH
22649: LD_INT 25
22651: PUSH
22652: LD_INT 27
22654: PUSH
22655: LD_INT 23
22657: PUSH
22658: LD_INT 22
22660: PUSH
22661: LD_INT 30
22663: PUSH
22664: LD_INT 28
22666: PUSH
22667: LD_INT 29
22669: PUSH
22670: LD_INT 53
22672: PUSH
22673: LD_INT 51
22675: PUSH
22676: LD_INT 52
22678: PUSH
22679: LD_INT 43
22681: PUSH
22682: LD_INT 44
22684: PUSH
22685: LD_INT 46
22687: PUSH
22688: LD_INT 42
22690: PUSH
22691: LD_INT 47
22693: PUSH
22694: LD_INT 45
22696: PUSH
22697: LD_INT 48
22699: PUSH
22700: LD_INT 55
22702: PUSH
22703: LD_INT 49
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 1
22747: PPUSH
22748: LD_INT 37
22750: PPUSH
22751: CALL_OW 12
22755: ARRAY
22756: ST_TO_ADDR
// end ; end ;
22757: GO 22760
22759: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22760: CALL_OW 45
22764: PPUSH
22765: LD_INT 1
22767: PPUSH
22768: CALL_OW 51
// end ;
22772: LD_VAR 0 1
22776: RET
// export invincible ; every 1 do
22777: GO 22779
22779: DISABLE
// invincible := [ ] ;
22780: LD_ADDR_EXP 58
22784: PUSH
22785: EMPTY
22786: ST_TO_ADDR
22787: END
// every 10 do var i ;
22788: GO 22790
22790: DISABLE
22791: LD_INT 0
22793: PPUSH
// begin enable ;
22794: ENABLE
// if not invincible then
22795: LD_EXP 58
22799: NOT
22800: IFFALSE 22804
// exit ;
22802: GO 22848
// for i in invincible do
22804: LD_ADDR_VAR 0 1
22808: PUSH
22809: LD_EXP 58
22813: PUSH
22814: FOR_IN
22815: IFFALSE 22846
// if GetLives ( i ) < 1000 then
22817: LD_VAR 0 1
22821: PPUSH
22822: CALL_OW 256
22826: PUSH
22827: LD_INT 1000
22829: LESS
22830: IFFALSE 22844
// SetLives ( i , 1000 ) ;
22832: LD_VAR 0 1
22836: PPUSH
22837: LD_INT 1000
22839: PPUSH
22840: CALL_OW 234
22844: GO 22814
22846: POP
22847: POP
// end ;
22848: PPOPN 1
22850: END
// export function HackInvincible ; var i ; begin
22851: LD_INT 0
22853: PPUSH
22854: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22855: LD_ADDR_VAR 0 2
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 21
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 21
22875: PUSH
22876: LD_INT 2
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: PPUSH
22888: CALL_OW 69
22892: PUSH
22893: FOR_IN
22894: IFFALSE 22955
// if IsSelected ( i ) then
22896: LD_VAR 0 2
22900: PPUSH
22901: CALL_OW 306
22905: IFFALSE 22953
// begin if i in invincible then
22907: LD_VAR 0 2
22911: PUSH
22912: LD_EXP 58
22916: IN
22917: IFFALSE 22937
// invincible := invincible diff i else
22919: LD_ADDR_EXP 58
22923: PUSH
22924: LD_EXP 58
22928: PUSH
22929: LD_VAR 0 2
22933: DIFF
22934: ST_TO_ADDR
22935: GO 22953
// invincible := invincible union i ;
22937: LD_ADDR_EXP 58
22941: PUSH
22942: LD_EXP 58
22946: PUSH
22947: LD_VAR 0 2
22951: UNION
22952: ST_TO_ADDR
// end ;
22953: GO 22893
22955: POP
22956: POP
// end ;
22957: LD_VAR 0 1
22961: RET
// export function HackInvisible ; var i , j ; begin
22962: LD_INT 0
22964: PPUSH
22965: PPUSH
22966: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22967: LD_ADDR_VAR 0 2
22971: PUSH
22972: LD_INT 21
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PPUSH
22982: CALL_OW 69
22986: PUSH
22987: FOR_IN
22988: IFFALSE 23012
// if IsSelected ( i ) then
22990: LD_VAR 0 2
22994: PPUSH
22995: CALL_OW 306
22999: IFFALSE 23010
// begin ComForceInvisible ( i ) ;
23001: LD_VAR 0 2
23005: PPUSH
23006: CALL_OW 496
// end ;
23010: GO 22987
23012: POP
23013: POP
// end ;
23014: LD_VAR 0 1
23018: RET
// export function HackChangeYourSide ; begin
23019: LD_INT 0
23021: PPUSH
// if your_side = 8 then
23022: LD_OWVAR 2
23026: PUSH
23027: LD_INT 8
23029: EQUAL
23030: IFFALSE 23042
// your_side := 0 else
23032: LD_ADDR_OWVAR 2
23036: PUSH
23037: LD_INT 0
23039: ST_TO_ADDR
23040: GO 23056
// your_side := your_side + 1 ;
23042: LD_ADDR_OWVAR 2
23046: PUSH
23047: LD_OWVAR 2
23051: PUSH
23052: LD_INT 1
23054: PLUS
23055: ST_TO_ADDR
// end ;
23056: LD_VAR 0 1
23060: RET
// export function HackChangeUnitSide ; var i , j ; begin
23061: LD_INT 0
23063: PPUSH
23064: PPUSH
23065: PPUSH
// for i in all_units do
23066: LD_ADDR_VAR 0 2
23070: PUSH
23071: LD_OWVAR 3
23075: PUSH
23076: FOR_IN
23077: IFFALSE 23155
// if IsSelected ( i ) then
23079: LD_VAR 0 2
23083: PPUSH
23084: CALL_OW 306
23088: IFFALSE 23153
// begin j := GetSide ( i ) ;
23090: LD_ADDR_VAR 0 3
23094: PUSH
23095: LD_VAR 0 2
23099: PPUSH
23100: CALL_OW 255
23104: ST_TO_ADDR
// if j = 8 then
23105: LD_VAR 0 3
23109: PUSH
23110: LD_INT 8
23112: EQUAL
23113: IFFALSE 23125
// j := 0 else
23115: LD_ADDR_VAR 0 3
23119: PUSH
23120: LD_INT 0
23122: ST_TO_ADDR
23123: GO 23139
// j := j + 1 ;
23125: LD_ADDR_VAR 0 3
23129: PUSH
23130: LD_VAR 0 3
23134: PUSH
23135: LD_INT 1
23137: PLUS
23138: ST_TO_ADDR
// SetSide ( i , j ) ;
23139: LD_VAR 0 2
23143: PPUSH
23144: LD_VAR 0 3
23148: PPUSH
23149: CALL_OW 235
// end ;
23153: GO 23076
23155: POP
23156: POP
// end ;
23157: LD_VAR 0 1
23161: RET
// export function HackFog ; begin
23162: LD_INT 0
23164: PPUSH
// FogOff ( true ) ;
23165: LD_INT 1
23167: PPUSH
23168: CALL_OW 344
// end ;
23172: LD_VAR 0 1
23176: RET
// export function HackApeman ; begin
23177: LD_INT 0
23179: PPUSH
// uc_side := your_side ;
23180: LD_ADDR_OWVAR 20
23184: PUSH
23185: LD_OWVAR 2
23189: ST_TO_ADDR
// uc_nation := 0 ;
23190: LD_ADDR_OWVAR 21
23194: PUSH
23195: LD_INT 0
23197: ST_TO_ADDR
// hc_name :=  ;
23198: LD_ADDR_OWVAR 26
23202: PUSH
23203: LD_STRING 
23205: ST_TO_ADDR
// hc_gallery :=  ;
23206: LD_ADDR_OWVAR 33
23210: PUSH
23211: LD_STRING 
23213: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
23214: LD_ADDR_OWVAR 31
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: LD_INT 0
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: ST_TO_ADDR
// hc_class := class_apeman ;
23237: LD_ADDR_OWVAR 28
23241: PUSH
23242: LD_INT 12
23244: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
23245: CALL_OW 44
23249: PPUSH
23250: LD_INT 1
23252: PPUSH
23253: CALL_OW 51
// end ;
23257: LD_VAR 0 1
23261: RET
// export function HackBoom ; begin
23262: LD_INT 0
23264: PPUSH
// uc_side := your_side ;
23265: LD_ADDR_OWVAR 20
23269: PUSH
23270: LD_OWVAR 2
23274: ST_TO_ADDR
// uc_nation := 1 ;
23275: LD_ADDR_OWVAR 21
23279: PUSH
23280: LD_INT 1
23282: ST_TO_ADDR
// vc_chassis := us_morphling ;
23283: LD_ADDR_OWVAR 37
23287: PUSH
23288: LD_INT 5
23290: ST_TO_ADDR
// vc_engine := engine_siberite ;
23291: LD_ADDR_OWVAR 39
23295: PUSH
23296: LD_INT 3
23298: ST_TO_ADDR
// vc_control := control_computer ;
23299: LD_ADDR_OWVAR 38
23303: PUSH
23304: LD_INT 3
23306: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
23307: LD_ADDR_OWVAR 40
23311: PUSH
23312: LD_INT 8
23314: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23315: CALL_OW 45
23319: PPUSH
23320: LD_INT 1
23322: PPUSH
23323: CALL_OW 51
// end ; end_of_file
23327: LD_VAR 0 1
23331: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23332: LD_INT 0
23334: PPUSH
23335: PPUSH
// if exist_mode then
23336: LD_VAR 0 2
23340: IFFALSE 23365
// unit := CreateCharacter ( prefix & ident ) else
23342: LD_ADDR_VAR 0 5
23346: PUSH
23347: LD_VAR 0 3
23351: PUSH
23352: LD_VAR 0 1
23356: STR
23357: PPUSH
23358: CALL_OW 34
23362: ST_TO_ADDR
23363: GO 23380
// unit := NewCharacter ( ident ) ;
23365: LD_ADDR_VAR 0 5
23369: PUSH
23370: LD_VAR 0 1
23374: PPUSH
23375: CALL_OW 25
23379: ST_TO_ADDR
// result := unit ;
23380: LD_ADDR_VAR 0 4
23384: PUSH
23385: LD_VAR 0 5
23389: ST_TO_ADDR
// end ;
23390: LD_VAR 0 4
23394: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23395: LD_INT 0
23397: PPUSH
23398: PPUSH
// if not side or not nation then
23399: LD_VAR 0 1
23403: NOT
23404: PUSH
23405: LD_VAR 0 2
23409: NOT
23410: OR
23411: IFFALSE 23415
// exit ;
23413: GO 24179
// case nation of nation_american :
23415: LD_VAR 0 2
23419: PUSH
23420: LD_INT 1
23422: DOUBLE
23423: EQUAL
23424: IFTRUE 23428
23426: GO 23642
23428: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23429: LD_ADDR_VAR 0 4
23433: PUSH
23434: LD_INT 35
23436: PUSH
23437: LD_INT 45
23439: PUSH
23440: LD_INT 46
23442: PUSH
23443: LD_INT 47
23445: PUSH
23446: LD_INT 82
23448: PUSH
23449: LD_INT 83
23451: PUSH
23452: LD_INT 84
23454: PUSH
23455: LD_INT 85
23457: PUSH
23458: LD_INT 86
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: LD_INT 6
23469: PUSH
23470: LD_INT 15
23472: PUSH
23473: LD_INT 16
23475: PUSH
23476: LD_INT 7
23478: PUSH
23479: LD_INT 12
23481: PUSH
23482: LD_INT 13
23484: PUSH
23485: LD_INT 10
23487: PUSH
23488: LD_INT 14
23490: PUSH
23491: LD_INT 20
23493: PUSH
23494: LD_INT 21
23496: PUSH
23497: LD_INT 22
23499: PUSH
23500: LD_INT 25
23502: PUSH
23503: LD_INT 32
23505: PUSH
23506: LD_INT 27
23508: PUSH
23509: LD_INT 36
23511: PUSH
23512: LD_INT 69
23514: PUSH
23515: LD_INT 39
23517: PUSH
23518: LD_INT 34
23520: PUSH
23521: LD_INT 40
23523: PUSH
23524: LD_INT 48
23526: PUSH
23527: LD_INT 49
23529: PUSH
23530: LD_INT 50
23532: PUSH
23533: LD_INT 51
23535: PUSH
23536: LD_INT 52
23538: PUSH
23539: LD_INT 53
23541: PUSH
23542: LD_INT 54
23544: PUSH
23545: LD_INT 55
23547: PUSH
23548: LD_INT 56
23550: PUSH
23551: LD_INT 57
23553: PUSH
23554: LD_INT 58
23556: PUSH
23557: LD_INT 59
23559: PUSH
23560: LD_INT 60
23562: PUSH
23563: LD_INT 61
23565: PUSH
23566: LD_INT 62
23568: PUSH
23569: LD_INT 80
23571: PUSH
23572: LD_INT 82
23574: PUSH
23575: LD_INT 83
23577: PUSH
23578: LD_INT 84
23580: PUSH
23581: LD_INT 85
23583: PUSH
23584: LD_INT 86
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: ST_TO_ADDR
23640: GO 24103
23642: LD_INT 2
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23872
23650: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
23651: LD_ADDR_VAR 0 4
23655: PUSH
23656: LD_INT 35
23658: PUSH
23659: LD_INT 45
23661: PUSH
23662: LD_INT 46
23664: PUSH
23665: LD_INT 47
23667: PUSH
23668: LD_INT 82
23670: PUSH
23671: LD_INT 83
23673: PUSH
23674: LD_INT 84
23676: PUSH
23677: LD_INT 85
23679: PUSH
23680: LD_INT 87
23682: PUSH
23683: LD_INT 70
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 11
23691: PUSH
23692: LD_INT 3
23694: PUSH
23695: LD_INT 4
23697: PUSH
23698: LD_INT 5
23700: PUSH
23701: LD_INT 6
23703: PUSH
23704: LD_INT 15
23706: PUSH
23707: LD_INT 18
23709: PUSH
23710: LD_INT 7
23712: PUSH
23713: LD_INT 17
23715: PUSH
23716: LD_INT 8
23718: PUSH
23719: LD_INT 20
23721: PUSH
23722: LD_INT 21
23724: PUSH
23725: LD_INT 22
23727: PUSH
23728: LD_INT 72
23730: PUSH
23731: LD_INT 26
23733: PUSH
23734: LD_INT 69
23736: PUSH
23737: LD_INT 39
23739: PUSH
23740: LD_INT 40
23742: PUSH
23743: LD_INT 41
23745: PUSH
23746: LD_INT 42
23748: PUSH
23749: LD_INT 43
23751: PUSH
23752: LD_INT 48
23754: PUSH
23755: LD_INT 49
23757: PUSH
23758: LD_INT 50
23760: PUSH
23761: LD_INT 51
23763: PUSH
23764: LD_INT 52
23766: PUSH
23767: LD_INT 53
23769: PUSH
23770: LD_INT 54
23772: PUSH
23773: LD_INT 55
23775: PUSH
23776: LD_INT 56
23778: PUSH
23779: LD_INT 60
23781: PUSH
23782: LD_INT 61
23784: PUSH
23785: LD_INT 62
23787: PUSH
23788: LD_INT 66
23790: PUSH
23791: LD_INT 67
23793: PUSH
23794: LD_INT 68
23796: PUSH
23797: LD_INT 81
23799: PUSH
23800: LD_INT 82
23802: PUSH
23803: LD_INT 83
23805: PUSH
23806: LD_INT 84
23808: PUSH
23809: LD_INT 85
23811: PUSH
23812: LD_INT 87
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: ST_TO_ADDR
23870: GO 24103
23872: LD_INT 3
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 24102
23880: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23881: LD_ADDR_VAR 0 4
23885: PUSH
23886: LD_INT 46
23888: PUSH
23889: LD_INT 47
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: LD_INT 2
23897: PUSH
23898: LD_INT 82
23900: PUSH
23901: LD_INT 83
23903: PUSH
23904: LD_INT 84
23906: PUSH
23907: LD_INT 85
23909: PUSH
23910: LD_INT 86
23912: PUSH
23913: LD_INT 11
23915: PUSH
23916: LD_INT 9
23918: PUSH
23919: LD_INT 20
23921: PUSH
23922: LD_INT 19
23924: PUSH
23925: LD_INT 21
23927: PUSH
23928: LD_INT 24
23930: PUSH
23931: LD_INT 22
23933: PUSH
23934: LD_INT 25
23936: PUSH
23937: LD_INT 28
23939: PUSH
23940: LD_INT 29
23942: PUSH
23943: LD_INT 30
23945: PUSH
23946: LD_INT 31
23948: PUSH
23949: LD_INT 37
23951: PUSH
23952: LD_INT 38
23954: PUSH
23955: LD_INT 32
23957: PUSH
23958: LD_INT 27
23960: PUSH
23961: LD_INT 33
23963: PUSH
23964: LD_INT 69
23966: PUSH
23967: LD_INT 39
23969: PUSH
23970: LD_INT 34
23972: PUSH
23973: LD_INT 40
23975: PUSH
23976: LD_INT 71
23978: PUSH
23979: LD_INT 23
23981: PUSH
23982: LD_INT 44
23984: PUSH
23985: LD_INT 48
23987: PUSH
23988: LD_INT 49
23990: PUSH
23991: LD_INT 50
23993: PUSH
23994: LD_INT 51
23996: PUSH
23997: LD_INT 52
23999: PUSH
24000: LD_INT 53
24002: PUSH
24003: LD_INT 54
24005: PUSH
24006: LD_INT 55
24008: PUSH
24009: LD_INT 56
24011: PUSH
24012: LD_INT 57
24014: PUSH
24015: LD_INT 58
24017: PUSH
24018: LD_INT 59
24020: PUSH
24021: LD_INT 63
24023: PUSH
24024: LD_INT 64
24026: PUSH
24027: LD_INT 65
24029: PUSH
24030: LD_INT 82
24032: PUSH
24033: LD_INT 83
24035: PUSH
24036: LD_INT 84
24038: PUSH
24039: LD_INT 85
24041: PUSH
24042: LD_INT 86
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: ST_TO_ADDR
24100: GO 24103
24102: POP
// if state > - 1 and state < 3 then
24103: LD_VAR 0 3
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: GREATER
24112: PUSH
24113: LD_VAR 0 3
24117: PUSH
24118: LD_INT 3
24120: LESS
24121: AND
24122: IFFALSE 24179
// for i in result do
24124: LD_ADDR_VAR 0 5
24128: PUSH
24129: LD_VAR 0 4
24133: PUSH
24134: FOR_IN
24135: IFFALSE 24177
// if GetTech ( i , side ) <> state then
24137: LD_VAR 0 5
24141: PPUSH
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 321
24151: PUSH
24152: LD_VAR 0 3
24156: NONEQUAL
24157: IFFALSE 24175
// result := result diff i ;
24159: LD_ADDR_VAR 0 4
24163: PUSH
24164: LD_VAR 0 4
24168: PUSH
24169: LD_VAR 0 5
24173: DIFF
24174: ST_TO_ADDR
24175: GO 24134
24177: POP
24178: POP
// end ;
24179: LD_VAR 0 4
24183: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24184: LD_INT 0
24186: PPUSH
24187: PPUSH
24188: PPUSH
// result := true ;
24189: LD_ADDR_VAR 0 3
24193: PUSH
24194: LD_INT 1
24196: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24197: LD_ADDR_VAR 0 5
24201: PUSH
24202: LD_VAR 0 2
24206: PPUSH
24207: CALL_OW 480
24211: ST_TO_ADDR
// if not tmp then
24212: LD_VAR 0 5
24216: NOT
24217: IFFALSE 24221
// exit ;
24219: GO 24270
// for i in tmp do
24221: LD_ADDR_VAR 0 4
24225: PUSH
24226: LD_VAR 0 5
24230: PUSH
24231: FOR_IN
24232: IFFALSE 24268
// if GetTech ( i , side ) <> state_researched then
24234: LD_VAR 0 4
24238: PPUSH
24239: LD_VAR 0 1
24243: PPUSH
24244: CALL_OW 321
24248: PUSH
24249: LD_INT 2
24251: NONEQUAL
24252: IFFALSE 24266
// begin result := false ;
24254: LD_ADDR_VAR 0 3
24258: PUSH
24259: LD_INT 0
24261: ST_TO_ADDR
// exit ;
24262: POP
24263: POP
24264: GO 24270
// end ;
24266: GO 24231
24268: POP
24269: POP
// end ;
24270: LD_VAR 0 3
24274: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24275: LD_INT 0
24277: PPUSH
24278: PPUSH
24279: PPUSH
24280: PPUSH
24281: PPUSH
24282: PPUSH
24283: PPUSH
24284: PPUSH
24285: PPUSH
24286: PPUSH
24287: PPUSH
24288: PPUSH
24289: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24290: LD_VAR 0 1
24294: NOT
24295: PUSH
24296: LD_VAR 0 1
24300: PPUSH
24301: CALL_OW 257
24305: PUSH
24306: LD_INT 9
24308: NONEQUAL
24309: OR
24310: IFFALSE 24314
// exit ;
24312: GO 24887
// side := GetSide ( unit ) ;
24314: LD_ADDR_VAR 0 9
24318: PUSH
24319: LD_VAR 0 1
24323: PPUSH
24324: CALL_OW 255
24328: ST_TO_ADDR
// tech_space := tech_spacanom ;
24329: LD_ADDR_VAR 0 12
24333: PUSH
24334: LD_INT 29
24336: ST_TO_ADDR
// tech_time := tech_taurad ;
24337: LD_ADDR_VAR 0 13
24341: PUSH
24342: LD_INT 28
24344: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24345: LD_ADDR_VAR 0 11
24349: PUSH
24350: LD_VAR 0 1
24354: PPUSH
24355: CALL_OW 310
24359: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24360: LD_VAR 0 11
24364: PPUSH
24365: CALL_OW 247
24369: PUSH
24370: LD_INT 2
24372: EQUAL
24373: IFFALSE 24377
// exit ;
24375: GO 24887
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24377: LD_ADDR_VAR 0 8
24381: PUSH
24382: LD_INT 81
24384: PUSH
24385: LD_VAR 0 9
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 3
24396: PUSH
24397: LD_INT 21
24399: PUSH
24400: LD_INT 3
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PPUSH
24415: CALL_OW 69
24419: ST_TO_ADDR
// if not tmp then
24420: LD_VAR 0 8
24424: NOT
24425: IFFALSE 24429
// exit ;
24427: GO 24887
// if in_unit then
24429: LD_VAR 0 11
24433: IFFALSE 24457
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24435: LD_ADDR_VAR 0 10
24439: PUSH
24440: LD_VAR 0 8
24444: PPUSH
24445: LD_VAR 0 11
24449: PPUSH
24450: CALL_OW 74
24454: ST_TO_ADDR
24455: GO 24477
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24457: LD_ADDR_VAR 0 10
24461: PUSH
24462: LD_VAR 0 8
24466: PPUSH
24467: LD_VAR 0 1
24471: PPUSH
24472: CALL_OW 74
24476: ST_TO_ADDR
// if not enemy then
24477: LD_VAR 0 10
24481: NOT
24482: IFFALSE 24486
// exit ;
24484: GO 24887
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24486: LD_VAR 0 11
24490: PUSH
24491: LD_VAR 0 11
24495: PPUSH
24496: LD_VAR 0 10
24500: PPUSH
24501: CALL_OW 296
24505: PUSH
24506: LD_INT 13
24508: GREATER
24509: AND
24510: PUSH
24511: LD_VAR 0 1
24515: PPUSH
24516: LD_VAR 0 10
24520: PPUSH
24521: CALL_OW 296
24525: PUSH
24526: LD_INT 12
24528: GREATER
24529: OR
24530: IFFALSE 24534
// exit ;
24532: GO 24887
// missile := [ 1 ] ;
24534: LD_ADDR_VAR 0 14
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24545: LD_VAR 0 9
24549: PPUSH
24550: LD_VAR 0 12
24554: PPUSH
24555: CALL_OW 325
24559: IFFALSE 24588
// missile := Insert ( missile , missile + 1 , 2 ) ;
24561: LD_ADDR_VAR 0 14
24565: PUSH
24566: LD_VAR 0 14
24570: PPUSH
24571: LD_VAR 0 14
24575: PUSH
24576: LD_INT 1
24578: PLUS
24579: PPUSH
24580: LD_INT 2
24582: PPUSH
24583: CALL_OW 2
24587: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24588: LD_VAR 0 9
24592: PPUSH
24593: LD_VAR 0 13
24597: PPUSH
24598: CALL_OW 325
24602: PUSH
24603: LD_VAR 0 10
24607: PPUSH
24608: CALL_OW 255
24612: PPUSH
24613: LD_VAR 0 13
24617: PPUSH
24618: CALL_OW 325
24622: NOT
24623: AND
24624: IFFALSE 24653
// missile := Insert ( missile , missile + 1 , 3 ) ;
24626: LD_ADDR_VAR 0 14
24630: PUSH
24631: LD_VAR 0 14
24635: PPUSH
24636: LD_VAR 0 14
24640: PUSH
24641: LD_INT 1
24643: PLUS
24644: PPUSH
24645: LD_INT 3
24647: PPUSH
24648: CALL_OW 2
24652: ST_TO_ADDR
// if missile < 2 then
24653: LD_VAR 0 14
24657: PUSH
24658: LD_INT 2
24660: LESS
24661: IFFALSE 24665
// exit ;
24663: GO 24887
// x := GetX ( enemy ) ;
24665: LD_ADDR_VAR 0 4
24669: PUSH
24670: LD_VAR 0 10
24674: PPUSH
24675: CALL_OW 250
24679: ST_TO_ADDR
// y := GetY ( enemy ) ;
24680: LD_ADDR_VAR 0 5
24684: PUSH
24685: LD_VAR 0 10
24689: PPUSH
24690: CALL_OW 251
24694: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24695: LD_ADDR_VAR 0 6
24699: PUSH
24700: LD_VAR 0 4
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PPUSH
24709: LD_INT 1
24711: PPUSH
24712: CALL_OW 12
24716: PLUS
24717: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24718: LD_ADDR_VAR 0 7
24722: PUSH
24723: LD_VAR 0 5
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PPUSH
24732: LD_INT 1
24734: PPUSH
24735: CALL_OW 12
24739: PLUS
24740: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24741: LD_VAR 0 6
24745: PPUSH
24746: LD_VAR 0 7
24750: PPUSH
24751: CALL_OW 488
24755: NOT
24756: IFFALSE 24778
// begin _x := x ;
24758: LD_ADDR_VAR 0 6
24762: PUSH
24763: LD_VAR 0 4
24767: ST_TO_ADDR
// _y := y ;
24768: LD_ADDR_VAR 0 7
24772: PUSH
24773: LD_VAR 0 5
24777: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24778: LD_ADDR_VAR 0 3
24782: PUSH
24783: LD_INT 1
24785: PPUSH
24786: LD_VAR 0 14
24790: PPUSH
24791: CALL_OW 12
24795: ST_TO_ADDR
// case i of 1 :
24796: LD_VAR 0 3
24800: PUSH
24801: LD_INT 1
24803: DOUBLE
24804: EQUAL
24805: IFTRUE 24809
24807: GO 24826
24809: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24810: LD_VAR 0 1
24814: PPUSH
24815: LD_VAR 0 10
24819: PPUSH
24820: CALL_OW 115
24824: GO 24887
24826: LD_INT 2
24828: DOUBLE
24829: EQUAL
24830: IFTRUE 24834
24832: GO 24856
24834: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24835: LD_VAR 0 1
24839: PPUSH
24840: LD_VAR 0 6
24844: PPUSH
24845: LD_VAR 0 7
24849: PPUSH
24850: CALL_OW 153
24854: GO 24887
24856: LD_INT 3
24858: DOUBLE
24859: EQUAL
24860: IFTRUE 24864
24862: GO 24886
24864: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24865: LD_VAR 0 1
24869: PPUSH
24870: LD_VAR 0 6
24874: PPUSH
24875: LD_VAR 0 7
24879: PPUSH
24880: CALL_OW 154
24884: GO 24887
24886: POP
// end ;
24887: LD_VAR 0 2
24891: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24892: LD_INT 0
24894: PPUSH
24895: PPUSH
24896: PPUSH
24897: PPUSH
24898: PPUSH
24899: PPUSH
// if not unit or not building then
24900: LD_VAR 0 1
24904: NOT
24905: PUSH
24906: LD_VAR 0 2
24910: NOT
24911: OR
24912: IFFALSE 24916
// exit ;
24914: GO 25074
// x := GetX ( building ) ;
24916: LD_ADDR_VAR 0 5
24920: PUSH
24921: LD_VAR 0 2
24925: PPUSH
24926: CALL_OW 250
24930: ST_TO_ADDR
// y := GetY ( building ) ;
24931: LD_ADDR_VAR 0 6
24935: PUSH
24936: LD_VAR 0 2
24940: PPUSH
24941: CALL_OW 251
24945: ST_TO_ADDR
// for i = 0 to 5 do
24946: LD_ADDR_VAR 0 4
24950: PUSH
24951: DOUBLE
24952: LD_INT 0
24954: DEC
24955: ST_TO_ADDR
24956: LD_INT 5
24958: PUSH
24959: FOR_TO
24960: IFFALSE 25072
// begin _x := ShiftX ( x , i , 3 ) ;
24962: LD_ADDR_VAR 0 7
24966: PUSH
24967: LD_VAR 0 5
24971: PPUSH
24972: LD_VAR 0 4
24976: PPUSH
24977: LD_INT 3
24979: PPUSH
24980: CALL_OW 272
24984: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24985: LD_ADDR_VAR 0 8
24989: PUSH
24990: LD_VAR 0 6
24994: PPUSH
24995: LD_VAR 0 4
24999: PPUSH
25000: LD_INT 3
25002: PPUSH
25003: CALL_OW 273
25007: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25008: LD_VAR 0 7
25012: PPUSH
25013: LD_VAR 0 8
25017: PPUSH
25018: CALL_OW 488
25022: NOT
25023: IFFALSE 25027
// continue ;
25025: GO 24959
// if HexInfo ( _x , _y ) = 0 then
25027: LD_VAR 0 7
25031: PPUSH
25032: LD_VAR 0 8
25036: PPUSH
25037: CALL_OW 428
25041: PUSH
25042: LD_INT 0
25044: EQUAL
25045: IFFALSE 25070
// begin ComMoveXY ( unit , _x , _y ) ;
25047: LD_VAR 0 1
25051: PPUSH
25052: LD_VAR 0 7
25056: PPUSH
25057: LD_VAR 0 8
25061: PPUSH
25062: CALL_OW 111
// exit ;
25066: POP
25067: POP
25068: GO 25074
// end ; end ;
25070: GO 24959
25072: POP
25073: POP
// end ;
25074: LD_VAR 0 3
25078: RET
// export function ScanBase ( side , base_area ) ; begin
25079: LD_INT 0
25081: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: LD_VAR 0 2
25091: PPUSH
25092: LD_INT 81
25094: PUSH
25095: LD_VAR 0 1
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PPUSH
25104: CALL_OW 70
25108: ST_TO_ADDR
// end ;
25109: LD_VAR 0 3
25113: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25114: LD_INT 0
25116: PPUSH
25117: PPUSH
25118: PPUSH
25119: PPUSH
// result := false ;
25120: LD_ADDR_VAR 0 2
25124: PUSH
25125: LD_INT 0
25127: ST_TO_ADDR
// side := GetSide ( unit ) ;
25128: LD_ADDR_VAR 0 3
25132: PUSH
25133: LD_VAR 0 1
25137: PPUSH
25138: CALL_OW 255
25142: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25143: LD_ADDR_VAR 0 4
25147: PUSH
25148: LD_VAR 0 1
25152: PPUSH
25153: CALL_OW 248
25157: ST_TO_ADDR
// case nat of 1 :
25158: LD_VAR 0 4
25162: PUSH
25163: LD_INT 1
25165: DOUBLE
25166: EQUAL
25167: IFTRUE 25171
25169: GO 25182
25171: POP
// tech := tech_lassight ; 2 :
25172: LD_ADDR_VAR 0 5
25176: PUSH
25177: LD_INT 12
25179: ST_TO_ADDR
25180: GO 25221
25182: LD_INT 2
25184: DOUBLE
25185: EQUAL
25186: IFTRUE 25190
25188: GO 25201
25190: POP
// tech := tech_mortar ; 3 :
25191: LD_ADDR_VAR 0 5
25195: PUSH
25196: LD_INT 41
25198: ST_TO_ADDR
25199: GO 25221
25201: LD_INT 3
25203: DOUBLE
25204: EQUAL
25205: IFTRUE 25209
25207: GO 25220
25209: POP
// tech := tech_bazooka ; end ;
25210: LD_ADDR_VAR 0 5
25214: PUSH
25215: LD_INT 44
25217: ST_TO_ADDR
25218: GO 25221
25220: POP
// if Researched ( side , tech ) then
25221: LD_VAR 0 3
25225: PPUSH
25226: LD_VAR 0 5
25230: PPUSH
25231: CALL_OW 325
25235: IFFALSE 25262
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25237: LD_ADDR_VAR 0 2
25241: PUSH
25242: LD_INT 5
25244: PUSH
25245: LD_INT 8
25247: PUSH
25248: LD_INT 9
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: PUSH
25256: LD_VAR 0 4
25260: ARRAY
25261: ST_TO_ADDR
// end ;
25262: LD_VAR 0 2
25266: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25267: LD_INT 0
25269: PPUSH
25270: PPUSH
25271: PPUSH
// if not mines then
25272: LD_VAR 0 2
25276: NOT
25277: IFFALSE 25281
// exit ;
25279: GO 25425
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25281: LD_ADDR_VAR 0 5
25285: PUSH
25286: LD_INT 81
25288: PUSH
25289: LD_VAR 0 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 3
25300: PUSH
25301: LD_INT 21
25303: PUSH
25304: LD_INT 3
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PPUSH
25319: CALL_OW 69
25323: ST_TO_ADDR
// for i in mines do
25324: LD_ADDR_VAR 0 4
25328: PUSH
25329: LD_VAR 0 2
25333: PUSH
25334: FOR_IN
25335: IFFALSE 25423
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25337: LD_VAR 0 4
25341: PUSH
25342: LD_INT 1
25344: ARRAY
25345: PPUSH
25346: LD_VAR 0 4
25350: PUSH
25351: LD_INT 2
25353: ARRAY
25354: PPUSH
25355: CALL_OW 458
25359: NOT
25360: IFFALSE 25364
// continue ;
25362: GO 25334
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25364: LD_VAR 0 4
25368: PUSH
25369: LD_INT 1
25371: ARRAY
25372: PPUSH
25373: LD_VAR 0 4
25377: PUSH
25378: LD_INT 2
25380: ARRAY
25381: PPUSH
25382: CALL_OW 428
25386: PUSH
25387: LD_VAR 0 5
25391: IN
25392: IFFALSE 25421
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25394: LD_VAR 0 4
25398: PUSH
25399: LD_INT 1
25401: ARRAY
25402: PPUSH
25403: LD_VAR 0 4
25407: PUSH
25408: LD_INT 2
25410: ARRAY
25411: PPUSH
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL_OW 456
// end ;
25421: GO 25334
25423: POP
25424: POP
// end ;
25425: LD_VAR 0 3
25429: RET
// export function Count ( array ) ; var i ; begin
25430: LD_INT 0
25432: PPUSH
25433: PPUSH
// result := 0 ;
25434: LD_ADDR_VAR 0 2
25438: PUSH
25439: LD_INT 0
25441: ST_TO_ADDR
// for i in array do
25442: LD_ADDR_VAR 0 3
25446: PUSH
25447: LD_VAR 0 1
25451: PUSH
25452: FOR_IN
25453: IFFALSE 25477
// if i then
25455: LD_VAR 0 3
25459: IFFALSE 25475
// result := result + 1 ;
25461: LD_ADDR_VAR 0 2
25465: PUSH
25466: LD_VAR 0 2
25470: PUSH
25471: LD_INT 1
25473: PLUS
25474: ST_TO_ADDR
25475: GO 25452
25477: POP
25478: POP
// end ;
25479: LD_VAR 0 2
25483: RET
// export function IsEmpty ( building ) ; begin
25484: LD_INT 0
25486: PPUSH
// if not building then
25487: LD_VAR 0 1
25491: NOT
25492: IFFALSE 25496
// exit ;
25494: GO 25539
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25496: LD_ADDR_VAR 0 2
25500: PUSH
25501: LD_VAR 0 1
25505: PUSH
25506: LD_INT 22
25508: PUSH
25509: LD_VAR 0 1
25513: PPUSH
25514: CALL_OW 255
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 58
25525: PUSH
25526: EMPTY
25527: LIST
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PPUSH
25533: CALL_OW 69
25537: IN
25538: ST_TO_ADDR
// end ;
25539: LD_VAR 0 2
25543: RET
// export function IsNotFull ( building ) ; begin
25544: LD_INT 0
25546: PPUSH
// if not building then
25547: LD_VAR 0 1
25551: NOT
25552: IFFALSE 25556
// exit ;
25554: GO 25575
// result := UnitsInside ( building ) < 6 ;
25556: LD_ADDR_VAR 0 2
25560: PUSH
25561: LD_VAR 0 1
25565: PPUSH
25566: CALL_OW 313
25570: PUSH
25571: LD_INT 6
25573: LESS
25574: ST_TO_ADDR
// end ;
25575: LD_VAR 0 2
25579: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25580: LD_INT 0
25582: PPUSH
25583: PPUSH
25584: PPUSH
25585: PPUSH
// tmp := [ ] ;
25586: LD_ADDR_VAR 0 3
25590: PUSH
25591: EMPTY
25592: ST_TO_ADDR
// list := [ ] ;
25593: LD_ADDR_VAR 0 5
25597: PUSH
25598: EMPTY
25599: ST_TO_ADDR
// for i = 16 to 25 do
25600: LD_ADDR_VAR 0 4
25604: PUSH
25605: DOUBLE
25606: LD_INT 16
25608: DEC
25609: ST_TO_ADDR
25610: LD_INT 25
25612: PUSH
25613: FOR_TO
25614: IFFALSE 25687
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25616: LD_ADDR_VAR 0 3
25620: PUSH
25621: LD_VAR 0 3
25625: PUSH
25626: LD_INT 22
25628: PUSH
25629: LD_VAR 0 1
25633: PPUSH
25634: CALL_OW 255
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 91
25645: PUSH
25646: LD_VAR 0 1
25650: PUSH
25651: LD_INT 6
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 30
25661: PUSH
25662: LD_VAR 0 4
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: LIST
25675: PUSH
25676: EMPTY
25677: LIST
25678: PPUSH
25679: CALL_OW 69
25683: ADD
25684: ST_TO_ADDR
25685: GO 25613
25687: POP
25688: POP
// for i = 1 to tmp do
25689: LD_ADDR_VAR 0 4
25693: PUSH
25694: DOUBLE
25695: LD_INT 1
25697: DEC
25698: ST_TO_ADDR
25699: LD_VAR 0 3
25703: PUSH
25704: FOR_TO
25705: IFFALSE 25793
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25707: LD_ADDR_VAR 0 5
25711: PUSH
25712: LD_VAR 0 5
25716: PUSH
25717: LD_VAR 0 3
25721: PUSH
25722: LD_VAR 0 4
25726: ARRAY
25727: PPUSH
25728: CALL_OW 266
25732: PUSH
25733: LD_VAR 0 3
25737: PUSH
25738: LD_VAR 0 4
25742: ARRAY
25743: PPUSH
25744: CALL_OW 250
25748: PUSH
25749: LD_VAR 0 3
25753: PUSH
25754: LD_VAR 0 4
25758: ARRAY
25759: PPUSH
25760: CALL_OW 251
25764: PUSH
25765: LD_VAR 0 3
25769: PUSH
25770: LD_VAR 0 4
25774: ARRAY
25775: PPUSH
25776: CALL_OW 254
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: PUSH
25787: EMPTY
25788: LIST
25789: ADD
25790: ST_TO_ADDR
25791: GO 25704
25793: POP
25794: POP
// result := list ;
25795: LD_ADDR_VAR 0 2
25799: PUSH
25800: LD_VAR 0 5
25804: ST_TO_ADDR
// end ;
25805: LD_VAR 0 2
25809: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25810: LD_INT 0
25812: PPUSH
25813: PPUSH
25814: PPUSH
25815: PPUSH
25816: PPUSH
25817: PPUSH
25818: PPUSH
// if not factory then
25819: LD_VAR 0 1
25823: NOT
25824: IFFALSE 25828
// exit ;
25826: GO 26421
// if control = control_apeman then
25828: LD_VAR 0 4
25832: PUSH
25833: LD_INT 5
25835: EQUAL
25836: IFFALSE 25945
// begin tmp := UnitsInside ( factory ) ;
25838: LD_ADDR_VAR 0 8
25842: PUSH
25843: LD_VAR 0 1
25847: PPUSH
25848: CALL_OW 313
25852: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25853: LD_VAR 0 8
25857: PPUSH
25858: LD_INT 25
25860: PUSH
25861: LD_INT 12
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PPUSH
25868: CALL_OW 72
25872: NOT
25873: IFFALSE 25883
// control := control_manual ;
25875: LD_ADDR_VAR 0 4
25879: PUSH
25880: LD_INT 1
25882: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25883: LD_ADDR_VAR 0 8
25887: PUSH
25888: LD_VAR 0 1
25892: PPUSH
25893: CALL 25580 0 1
25897: ST_TO_ADDR
// if tmp then
25898: LD_VAR 0 8
25902: IFFALSE 25945
// begin for i in tmp do
25904: LD_ADDR_VAR 0 7
25908: PUSH
25909: LD_VAR 0 8
25913: PUSH
25914: FOR_IN
25915: IFFALSE 25943
// if i [ 1 ] = b_ext_radio then
25917: LD_VAR 0 7
25921: PUSH
25922: LD_INT 1
25924: ARRAY
25925: PUSH
25926: LD_INT 22
25928: EQUAL
25929: IFFALSE 25941
// begin control := control_remote ;
25931: LD_ADDR_VAR 0 4
25935: PUSH
25936: LD_INT 2
25938: ST_TO_ADDR
// break ;
25939: GO 25943
// end ;
25941: GO 25914
25943: POP
25944: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25945: LD_VAR 0 1
25949: PPUSH
25950: LD_VAR 0 2
25954: PPUSH
25955: LD_VAR 0 3
25959: PPUSH
25960: LD_VAR 0 4
25964: PPUSH
25965: LD_VAR 0 5
25969: PPUSH
25970: CALL_OW 448
25974: IFFALSE 26009
// begin result := [ chassis , engine , control , weapon ] ;
25976: LD_ADDR_VAR 0 6
25980: PUSH
25981: LD_VAR 0 2
25985: PUSH
25986: LD_VAR 0 3
25990: PUSH
25991: LD_VAR 0 4
25995: PUSH
25996: LD_VAR 0 5
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: ST_TO_ADDR
// exit ;
26007: GO 26421
// end ; _chassis := AvailableChassisList ( factory ) ;
26009: LD_ADDR_VAR 0 9
26013: PUSH
26014: LD_VAR 0 1
26018: PPUSH
26019: CALL_OW 475
26023: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26024: LD_ADDR_VAR 0 11
26028: PUSH
26029: LD_VAR 0 1
26033: PPUSH
26034: CALL_OW 476
26038: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26039: LD_ADDR_VAR 0 12
26043: PUSH
26044: LD_VAR 0 1
26048: PPUSH
26049: CALL_OW 477
26053: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26054: LD_ADDR_VAR 0 10
26058: PUSH
26059: LD_VAR 0 1
26063: PPUSH
26064: CALL_OW 478
26068: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26069: LD_VAR 0 9
26073: NOT
26074: PUSH
26075: LD_VAR 0 11
26079: NOT
26080: OR
26081: PUSH
26082: LD_VAR 0 12
26086: NOT
26087: OR
26088: PUSH
26089: LD_VAR 0 10
26093: NOT
26094: OR
26095: IFFALSE 26130
// begin result := [ chassis , engine , control , weapon ] ;
26097: LD_ADDR_VAR 0 6
26101: PUSH
26102: LD_VAR 0 2
26106: PUSH
26107: LD_VAR 0 3
26111: PUSH
26112: LD_VAR 0 4
26116: PUSH
26117: LD_VAR 0 5
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: ST_TO_ADDR
// exit ;
26128: GO 26421
// end ; if not chassis in _chassis then
26130: LD_VAR 0 2
26134: PUSH
26135: LD_VAR 0 9
26139: IN
26140: NOT
26141: IFFALSE 26167
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26143: LD_ADDR_VAR 0 2
26147: PUSH
26148: LD_VAR 0 9
26152: PUSH
26153: LD_INT 1
26155: PPUSH
26156: LD_VAR 0 9
26160: PPUSH
26161: CALL_OW 12
26165: ARRAY
26166: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26167: LD_VAR 0 2
26171: PPUSH
26172: LD_VAR 0 3
26176: PPUSH
26177: CALL 26426 0 2
26181: NOT
26182: IFFALSE 26241
// repeat engine := _engine [ 1 ] ;
26184: LD_ADDR_VAR 0 3
26188: PUSH
26189: LD_VAR 0 11
26193: PUSH
26194: LD_INT 1
26196: ARRAY
26197: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26198: LD_ADDR_VAR 0 11
26202: PUSH
26203: LD_VAR 0 11
26207: PPUSH
26208: LD_INT 1
26210: PPUSH
26211: CALL_OW 3
26215: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26216: LD_VAR 0 2
26220: PPUSH
26221: LD_VAR 0 3
26225: PPUSH
26226: CALL 26426 0 2
26230: PUSH
26231: LD_VAR 0 11
26235: PUSH
26236: EMPTY
26237: EQUAL
26238: OR
26239: IFFALSE 26184
// if not control in _control then
26241: LD_VAR 0 4
26245: PUSH
26246: LD_VAR 0 12
26250: IN
26251: NOT
26252: IFFALSE 26278
// control := _control [ rand ( 1 , _control ) ] ;
26254: LD_ADDR_VAR 0 4
26258: PUSH
26259: LD_VAR 0 12
26263: PUSH
26264: LD_INT 1
26266: PPUSH
26267: LD_VAR 0 12
26271: PPUSH
26272: CALL_OW 12
26276: ARRAY
26277: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26278: LD_VAR 0 2
26282: PPUSH
26283: LD_VAR 0 5
26287: PPUSH
26288: CALL 26646 0 2
26292: NOT
26293: IFFALSE 26352
// repeat weapon := _weapon [ 1 ] ;
26295: LD_ADDR_VAR 0 5
26299: PUSH
26300: LD_VAR 0 10
26304: PUSH
26305: LD_INT 1
26307: ARRAY
26308: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26309: LD_ADDR_VAR 0 10
26313: PUSH
26314: LD_VAR 0 10
26318: PPUSH
26319: LD_INT 1
26321: PPUSH
26322: CALL_OW 3
26326: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26327: LD_VAR 0 2
26331: PPUSH
26332: LD_VAR 0 5
26336: PPUSH
26337: CALL 26646 0 2
26341: PUSH
26342: LD_VAR 0 10
26346: PUSH
26347: EMPTY
26348: EQUAL
26349: OR
26350: IFFALSE 26295
// result := [ ] ;
26352: LD_ADDR_VAR 0 6
26356: PUSH
26357: EMPTY
26358: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26359: LD_VAR 0 1
26363: PPUSH
26364: LD_VAR 0 2
26368: PPUSH
26369: LD_VAR 0 3
26373: PPUSH
26374: LD_VAR 0 4
26378: PPUSH
26379: LD_VAR 0 5
26383: PPUSH
26384: CALL_OW 448
26388: IFFALSE 26421
// result := [ chassis , engine , control , weapon ] ;
26390: LD_ADDR_VAR 0 6
26394: PUSH
26395: LD_VAR 0 2
26399: PUSH
26400: LD_VAR 0 3
26404: PUSH
26405: LD_VAR 0 4
26409: PUSH
26410: LD_VAR 0 5
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: ST_TO_ADDR
// end ;
26421: LD_VAR 0 6
26425: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26426: LD_INT 0
26428: PPUSH
// if not chassis or not engine then
26429: LD_VAR 0 1
26433: NOT
26434: PUSH
26435: LD_VAR 0 2
26439: NOT
26440: OR
26441: IFFALSE 26445
// exit ;
26443: GO 26641
// case engine of engine_solar :
26445: LD_VAR 0 2
26449: PUSH
26450: LD_INT 2
26452: DOUBLE
26453: EQUAL
26454: IFTRUE 26458
26456: GO 26496
26458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26459: LD_ADDR_VAR 0 3
26463: PUSH
26464: LD_INT 11
26466: PUSH
26467: LD_INT 12
26469: PUSH
26470: LD_INT 13
26472: PUSH
26473: LD_INT 14
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: LD_INT 2
26481: PUSH
26482: LD_INT 3
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: ST_TO_ADDR
26494: GO 26625
26496: LD_INT 1
26498: DOUBLE
26499: EQUAL
26500: IFTRUE 26504
26502: GO 26566
26504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26505: LD_ADDR_VAR 0 3
26509: PUSH
26510: LD_INT 11
26512: PUSH
26513: LD_INT 12
26515: PUSH
26516: LD_INT 13
26518: PUSH
26519: LD_INT 14
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: LD_INT 3
26530: PUSH
26531: LD_INT 4
26533: PUSH
26534: LD_INT 5
26536: PUSH
26537: LD_INT 21
26539: PUSH
26540: LD_INT 23
26542: PUSH
26543: LD_INT 22
26545: PUSH
26546: LD_INT 24
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: ST_TO_ADDR
26564: GO 26625
26566: LD_INT 3
26568: DOUBLE
26569: EQUAL
26570: IFTRUE 26574
26572: GO 26624
26574: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26575: LD_ADDR_VAR 0 3
26579: PUSH
26580: LD_INT 13
26582: PUSH
26583: LD_INT 14
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: LD_INT 3
26591: PUSH
26592: LD_INT 4
26594: PUSH
26595: LD_INT 5
26597: PUSH
26598: LD_INT 21
26600: PUSH
26601: LD_INT 22
26603: PUSH
26604: LD_INT 23
26606: PUSH
26607: LD_INT 24
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: ST_TO_ADDR
26622: GO 26625
26624: POP
// result := ( chassis in result ) ;
26625: LD_ADDR_VAR 0 3
26629: PUSH
26630: LD_VAR 0 1
26634: PUSH
26635: LD_VAR 0 3
26639: IN
26640: ST_TO_ADDR
// end ;
26641: LD_VAR 0 3
26645: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26646: LD_INT 0
26648: PPUSH
// if not chassis or not weapon then
26649: LD_VAR 0 1
26653: NOT
26654: PUSH
26655: LD_VAR 0 2
26659: NOT
26660: OR
26661: IFFALSE 26665
// exit ;
26663: GO 27691
// case weapon of us_machine_gun :
26665: LD_VAR 0 2
26669: PUSH
26670: LD_INT 2
26672: DOUBLE
26673: EQUAL
26674: IFTRUE 26678
26676: GO 26708
26678: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26679: LD_ADDR_VAR 0 3
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: LD_INT 3
26692: PUSH
26693: LD_INT 4
26695: PUSH
26696: LD_INT 5
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: ST_TO_ADDR
26706: GO 27675
26708: LD_INT 3
26710: DOUBLE
26711: EQUAL
26712: IFTRUE 26716
26714: GO 26746
26716: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26717: LD_ADDR_VAR 0 3
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: LD_INT 3
26730: PUSH
26731: LD_INT 4
26733: PUSH
26734: LD_INT 5
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: ST_TO_ADDR
26744: GO 27675
26746: LD_INT 11
26748: DOUBLE
26749: EQUAL
26750: IFTRUE 26754
26752: GO 26784
26754: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26755: LD_ADDR_VAR 0 3
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: LD_INT 3
26768: PUSH
26769: LD_INT 4
26771: PUSH
26772: LD_INT 5
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: ST_TO_ADDR
26782: GO 27675
26784: LD_INT 4
26786: DOUBLE
26787: EQUAL
26788: IFTRUE 26792
26790: GO 26818
26792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26793: LD_ADDR_VAR 0 3
26797: PUSH
26798: LD_INT 2
26800: PUSH
26801: LD_INT 3
26803: PUSH
26804: LD_INT 4
26806: PUSH
26807: LD_INT 5
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: ST_TO_ADDR
26816: GO 27675
26818: LD_INT 5
26820: DOUBLE
26821: EQUAL
26822: IFTRUE 26826
26824: GO 26852
26826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26827: LD_ADDR_VAR 0 3
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: LD_INT 3
26837: PUSH
26838: LD_INT 4
26840: PUSH
26841: LD_INT 5
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: ST_TO_ADDR
26850: GO 27675
26852: LD_INT 9
26854: DOUBLE
26855: EQUAL
26856: IFTRUE 26860
26858: GO 26886
26860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26861: LD_ADDR_VAR 0 3
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: LD_INT 4
26874: PUSH
26875: LD_INT 5
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: ST_TO_ADDR
26884: GO 27675
26886: LD_INT 7
26888: DOUBLE
26889: EQUAL
26890: IFTRUE 26894
26892: GO 26920
26894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26895: LD_ADDR_VAR 0 3
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: LD_INT 3
26905: PUSH
26906: LD_INT 4
26908: PUSH
26909: LD_INT 5
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: ST_TO_ADDR
26918: GO 27675
26920: LD_INT 12
26922: DOUBLE
26923: EQUAL
26924: IFTRUE 26928
26926: GO 26954
26928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26929: LD_ADDR_VAR 0 3
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: LD_INT 3
26939: PUSH
26940: LD_INT 4
26942: PUSH
26943: LD_INT 5
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: ST_TO_ADDR
26952: GO 27675
26954: LD_INT 13
26956: DOUBLE
26957: EQUAL
26958: IFTRUE 26962
26960: GO 26988
26962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26963: LD_ADDR_VAR 0 3
26967: PUSH
26968: LD_INT 2
26970: PUSH
26971: LD_INT 3
26973: PUSH
26974: LD_INT 4
26976: PUSH
26977: LD_INT 5
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: ST_TO_ADDR
26986: GO 27675
26988: LD_INT 14
26990: DOUBLE
26991: EQUAL
26992: IFTRUE 26996
26994: GO 27014
26996: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26997: LD_ADDR_VAR 0 3
27001: PUSH
27002: LD_INT 4
27004: PUSH
27005: LD_INT 5
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: ST_TO_ADDR
27012: GO 27675
27014: LD_INT 6
27016: DOUBLE
27017: EQUAL
27018: IFTRUE 27022
27020: GO 27040
27022: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27023: LD_ADDR_VAR 0 3
27027: PUSH
27028: LD_INT 4
27030: PUSH
27031: LD_INT 5
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: ST_TO_ADDR
27038: GO 27675
27040: LD_INT 10
27042: DOUBLE
27043: EQUAL
27044: IFTRUE 27048
27046: GO 27066
27048: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27049: LD_ADDR_VAR 0 3
27053: PUSH
27054: LD_INT 4
27056: PUSH
27057: LD_INT 5
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: ST_TO_ADDR
27064: GO 27675
27066: LD_INT 22
27068: DOUBLE
27069: EQUAL
27070: IFTRUE 27074
27072: GO 27100
27074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27075: LD_ADDR_VAR 0 3
27079: PUSH
27080: LD_INT 11
27082: PUSH
27083: LD_INT 12
27085: PUSH
27086: LD_INT 13
27088: PUSH
27089: LD_INT 14
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: ST_TO_ADDR
27098: GO 27675
27100: LD_INT 23
27102: DOUBLE
27103: EQUAL
27104: IFTRUE 27108
27106: GO 27134
27108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27109: LD_ADDR_VAR 0 3
27113: PUSH
27114: LD_INT 11
27116: PUSH
27117: LD_INT 12
27119: PUSH
27120: LD_INT 13
27122: PUSH
27123: LD_INT 14
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: ST_TO_ADDR
27132: GO 27675
27134: LD_INT 24
27136: DOUBLE
27137: EQUAL
27138: IFTRUE 27142
27140: GO 27168
27142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27143: LD_ADDR_VAR 0 3
27147: PUSH
27148: LD_INT 11
27150: PUSH
27151: LD_INT 12
27153: PUSH
27154: LD_INT 13
27156: PUSH
27157: LD_INT 14
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: ST_TO_ADDR
27166: GO 27675
27168: LD_INT 30
27170: DOUBLE
27171: EQUAL
27172: IFTRUE 27176
27174: GO 27202
27176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27177: LD_ADDR_VAR 0 3
27181: PUSH
27182: LD_INT 11
27184: PUSH
27185: LD_INT 12
27187: PUSH
27188: LD_INT 13
27190: PUSH
27191: LD_INT 14
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: ST_TO_ADDR
27200: GO 27675
27202: LD_INT 25
27204: DOUBLE
27205: EQUAL
27206: IFTRUE 27210
27208: GO 27228
27210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27211: LD_ADDR_VAR 0 3
27215: PUSH
27216: LD_INT 13
27218: PUSH
27219: LD_INT 14
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: ST_TO_ADDR
27226: GO 27675
27228: LD_INT 27
27230: DOUBLE
27231: EQUAL
27232: IFTRUE 27236
27234: GO 27254
27236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27237: LD_ADDR_VAR 0 3
27241: PUSH
27242: LD_INT 13
27244: PUSH
27245: LD_INT 14
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: ST_TO_ADDR
27252: GO 27675
27254: LD_INT 28
27256: DOUBLE
27257: EQUAL
27258: IFTRUE 27262
27260: GO 27280
27262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27263: LD_ADDR_VAR 0 3
27267: PUSH
27268: LD_INT 13
27270: PUSH
27271: LD_INT 14
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: ST_TO_ADDR
27278: GO 27675
27280: LD_INT 29
27282: DOUBLE
27283: EQUAL
27284: IFTRUE 27288
27286: GO 27306
27288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27289: LD_ADDR_VAR 0 3
27293: PUSH
27294: LD_INT 13
27296: PUSH
27297: LD_INT 14
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: ST_TO_ADDR
27304: GO 27675
27306: LD_INT 31
27308: DOUBLE
27309: EQUAL
27310: IFTRUE 27314
27312: GO 27332
27314: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27315: LD_ADDR_VAR 0 3
27319: PUSH
27320: LD_INT 13
27322: PUSH
27323: LD_INT 14
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: ST_TO_ADDR
27330: GO 27675
27332: LD_INT 26
27334: DOUBLE
27335: EQUAL
27336: IFTRUE 27340
27338: GO 27358
27340: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27341: LD_ADDR_VAR 0 3
27345: PUSH
27346: LD_INT 13
27348: PUSH
27349: LD_INT 14
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: ST_TO_ADDR
27356: GO 27675
27358: LD_INT 42
27360: DOUBLE
27361: EQUAL
27362: IFTRUE 27366
27364: GO 27392
27366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27367: LD_ADDR_VAR 0 3
27371: PUSH
27372: LD_INT 21
27374: PUSH
27375: LD_INT 22
27377: PUSH
27378: LD_INT 23
27380: PUSH
27381: LD_INT 24
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: ST_TO_ADDR
27390: GO 27675
27392: LD_INT 43
27394: DOUBLE
27395: EQUAL
27396: IFTRUE 27400
27398: GO 27426
27400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27401: LD_ADDR_VAR 0 3
27405: PUSH
27406: LD_INT 21
27408: PUSH
27409: LD_INT 22
27411: PUSH
27412: LD_INT 23
27414: PUSH
27415: LD_INT 24
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: ST_TO_ADDR
27424: GO 27675
27426: LD_INT 44
27428: DOUBLE
27429: EQUAL
27430: IFTRUE 27434
27432: GO 27460
27434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27435: LD_ADDR_VAR 0 3
27439: PUSH
27440: LD_INT 21
27442: PUSH
27443: LD_INT 22
27445: PUSH
27446: LD_INT 23
27448: PUSH
27449: LD_INT 24
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
27458: GO 27675
27460: LD_INT 45
27462: DOUBLE
27463: EQUAL
27464: IFTRUE 27468
27466: GO 27494
27468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27469: LD_ADDR_VAR 0 3
27473: PUSH
27474: LD_INT 21
27476: PUSH
27477: LD_INT 22
27479: PUSH
27480: LD_INT 23
27482: PUSH
27483: LD_INT 24
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: ST_TO_ADDR
27492: GO 27675
27494: LD_INT 49
27496: DOUBLE
27497: EQUAL
27498: IFTRUE 27502
27500: GO 27528
27502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27503: LD_ADDR_VAR 0 3
27507: PUSH
27508: LD_INT 21
27510: PUSH
27511: LD_INT 22
27513: PUSH
27514: LD_INT 23
27516: PUSH
27517: LD_INT 24
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: ST_TO_ADDR
27526: GO 27675
27528: LD_INT 51
27530: DOUBLE
27531: EQUAL
27532: IFTRUE 27536
27534: GO 27562
27536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27537: LD_ADDR_VAR 0 3
27541: PUSH
27542: LD_INT 21
27544: PUSH
27545: LD_INT 22
27547: PUSH
27548: LD_INT 23
27550: PUSH
27551: LD_INT 24
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: ST_TO_ADDR
27560: GO 27675
27562: LD_INT 52
27564: DOUBLE
27565: EQUAL
27566: IFTRUE 27570
27568: GO 27596
27570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27571: LD_ADDR_VAR 0 3
27575: PUSH
27576: LD_INT 21
27578: PUSH
27579: LD_INT 22
27581: PUSH
27582: LD_INT 23
27584: PUSH
27585: LD_INT 24
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: ST_TO_ADDR
27594: GO 27675
27596: LD_INT 53
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27604
27602: GO 27622
27604: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27605: LD_ADDR_VAR 0 3
27609: PUSH
27610: LD_INT 23
27612: PUSH
27613: LD_INT 24
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: ST_TO_ADDR
27620: GO 27675
27622: LD_INT 46
27624: DOUBLE
27625: EQUAL
27626: IFTRUE 27630
27628: GO 27648
27630: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27631: LD_ADDR_VAR 0 3
27635: PUSH
27636: LD_INT 23
27638: PUSH
27639: LD_INT 24
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: ST_TO_ADDR
27646: GO 27675
27648: LD_INT 47
27650: DOUBLE
27651: EQUAL
27652: IFTRUE 27656
27654: GO 27674
27656: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27657: LD_ADDR_VAR 0 3
27661: PUSH
27662: LD_INT 23
27664: PUSH
27665: LD_INT 24
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: ST_TO_ADDR
27672: GO 27675
27674: POP
// result := ( chassis in result ) ;
27675: LD_ADDR_VAR 0 3
27679: PUSH
27680: LD_VAR 0 1
27684: PUSH
27685: LD_VAR 0 3
27689: IN
27690: ST_TO_ADDR
// end ;
27691: LD_VAR 0 3
27695: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27696: LD_INT 0
27698: PPUSH
27699: PPUSH
27700: PPUSH
27701: PPUSH
27702: PPUSH
27703: PPUSH
27704: PPUSH
// result := array ;
27705: LD_ADDR_VAR 0 5
27709: PUSH
27710: LD_VAR 0 1
27714: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27715: LD_VAR 0 1
27719: NOT
27720: PUSH
27721: LD_VAR 0 2
27725: NOT
27726: OR
27727: PUSH
27728: LD_VAR 0 3
27732: NOT
27733: OR
27734: PUSH
27735: LD_VAR 0 2
27739: PUSH
27740: LD_VAR 0 1
27744: GREATER
27745: OR
27746: PUSH
27747: LD_VAR 0 3
27751: PUSH
27752: LD_VAR 0 1
27756: GREATER
27757: OR
27758: IFFALSE 27762
// exit ;
27760: GO 28058
// if direction then
27762: LD_VAR 0 4
27766: IFFALSE 27830
// begin d := 1 ;
27768: LD_ADDR_VAR 0 9
27772: PUSH
27773: LD_INT 1
27775: ST_TO_ADDR
// if i_from > i_to then
27776: LD_VAR 0 2
27780: PUSH
27781: LD_VAR 0 3
27785: GREATER
27786: IFFALSE 27812
// length := ( array - i_from ) + i_to else
27788: LD_ADDR_VAR 0 11
27792: PUSH
27793: LD_VAR 0 1
27797: PUSH
27798: LD_VAR 0 2
27802: MINUS
27803: PUSH
27804: LD_VAR 0 3
27808: PLUS
27809: ST_TO_ADDR
27810: GO 27828
// length := i_to - i_from ;
27812: LD_ADDR_VAR 0 11
27816: PUSH
27817: LD_VAR 0 3
27821: PUSH
27822: LD_VAR 0 2
27826: MINUS
27827: ST_TO_ADDR
// end else
27828: GO 27891
// begin d := - 1 ;
27830: LD_ADDR_VAR 0 9
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: ST_TO_ADDR
// if i_from > i_to then
27839: LD_VAR 0 2
27843: PUSH
27844: LD_VAR 0 3
27848: GREATER
27849: IFFALSE 27869
// length := i_from - i_to else
27851: LD_ADDR_VAR 0 11
27855: PUSH
27856: LD_VAR 0 2
27860: PUSH
27861: LD_VAR 0 3
27865: MINUS
27866: ST_TO_ADDR
27867: GO 27891
// length := ( array - i_to ) + i_from ;
27869: LD_ADDR_VAR 0 11
27873: PUSH
27874: LD_VAR 0 1
27878: PUSH
27879: LD_VAR 0 3
27883: MINUS
27884: PUSH
27885: LD_VAR 0 2
27889: PLUS
27890: ST_TO_ADDR
// end ; if not length then
27891: LD_VAR 0 11
27895: NOT
27896: IFFALSE 27900
// exit ;
27898: GO 28058
// tmp := array ;
27900: LD_ADDR_VAR 0 10
27904: PUSH
27905: LD_VAR 0 1
27909: ST_TO_ADDR
// for i = 1 to length do
27910: LD_ADDR_VAR 0 6
27914: PUSH
27915: DOUBLE
27916: LD_INT 1
27918: DEC
27919: ST_TO_ADDR
27920: LD_VAR 0 11
27924: PUSH
27925: FOR_TO
27926: IFFALSE 28046
// begin for j = 1 to array do
27928: LD_ADDR_VAR 0 7
27932: PUSH
27933: DOUBLE
27934: LD_INT 1
27936: DEC
27937: ST_TO_ADDR
27938: LD_VAR 0 1
27942: PUSH
27943: FOR_TO
27944: IFFALSE 28032
// begin k := j + d ;
27946: LD_ADDR_VAR 0 8
27950: PUSH
27951: LD_VAR 0 7
27955: PUSH
27956: LD_VAR 0 9
27960: PLUS
27961: ST_TO_ADDR
// if k > array then
27962: LD_VAR 0 8
27966: PUSH
27967: LD_VAR 0 1
27971: GREATER
27972: IFFALSE 27982
// k := 1 ;
27974: LD_ADDR_VAR 0 8
27978: PUSH
27979: LD_INT 1
27981: ST_TO_ADDR
// if not k then
27982: LD_VAR 0 8
27986: NOT
27987: IFFALSE 27999
// k := array ;
27989: LD_ADDR_VAR 0 8
27993: PUSH
27994: LD_VAR 0 1
27998: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27999: LD_ADDR_VAR 0 10
28003: PUSH
28004: LD_VAR 0 10
28008: PPUSH
28009: LD_VAR 0 8
28013: PPUSH
28014: LD_VAR 0 1
28018: PUSH
28019: LD_VAR 0 7
28023: ARRAY
28024: PPUSH
28025: CALL_OW 1
28029: ST_TO_ADDR
// end ;
28030: GO 27943
28032: POP
28033: POP
// array := tmp ;
28034: LD_ADDR_VAR 0 1
28038: PUSH
28039: LD_VAR 0 10
28043: ST_TO_ADDR
// end ;
28044: GO 27925
28046: POP
28047: POP
// result := array ;
28048: LD_ADDR_VAR 0 5
28052: PUSH
28053: LD_VAR 0 1
28057: ST_TO_ADDR
// end ;
28058: LD_VAR 0 5
28062: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28063: LD_INT 0
28065: PPUSH
28066: PPUSH
// result := 0 ;
28067: LD_ADDR_VAR 0 3
28071: PUSH
28072: LD_INT 0
28074: ST_TO_ADDR
// if not array or not value in array then
28075: LD_VAR 0 1
28079: NOT
28080: PUSH
28081: LD_VAR 0 2
28085: PUSH
28086: LD_VAR 0 1
28090: IN
28091: NOT
28092: OR
28093: IFFALSE 28097
// exit ;
28095: GO 28151
// for i = 1 to array do
28097: LD_ADDR_VAR 0 4
28101: PUSH
28102: DOUBLE
28103: LD_INT 1
28105: DEC
28106: ST_TO_ADDR
28107: LD_VAR 0 1
28111: PUSH
28112: FOR_TO
28113: IFFALSE 28149
// if value = array [ i ] then
28115: LD_VAR 0 2
28119: PUSH
28120: LD_VAR 0 1
28124: PUSH
28125: LD_VAR 0 4
28129: ARRAY
28130: EQUAL
28131: IFFALSE 28147
// begin result := i ;
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_VAR 0 4
28142: ST_TO_ADDR
// exit ;
28143: POP
28144: POP
28145: GO 28151
// end ;
28147: GO 28112
28149: POP
28150: POP
// end ;
28151: LD_VAR 0 3
28155: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28156: LD_INT 0
28158: PPUSH
// vc_chassis := chassis ;
28159: LD_ADDR_OWVAR 37
28163: PUSH
28164: LD_VAR 0 1
28168: ST_TO_ADDR
// vc_engine := engine ;
28169: LD_ADDR_OWVAR 39
28173: PUSH
28174: LD_VAR 0 2
28178: ST_TO_ADDR
// vc_control := control ;
28179: LD_ADDR_OWVAR 38
28183: PUSH
28184: LD_VAR 0 3
28188: ST_TO_ADDR
// vc_weapon := weapon ;
28189: LD_ADDR_OWVAR 40
28193: PUSH
28194: LD_VAR 0 4
28198: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28199: LD_ADDR_OWVAR 41
28203: PUSH
28204: LD_VAR 0 5
28208: ST_TO_ADDR
// end ;
28209: LD_VAR 0 6
28213: RET
// export function WantPlant ( unit ) ; var task ; begin
28214: LD_INT 0
28216: PPUSH
28217: PPUSH
// result := false ;
28218: LD_ADDR_VAR 0 2
28222: PUSH
28223: LD_INT 0
28225: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28226: LD_ADDR_VAR 0 3
28230: PUSH
28231: LD_VAR 0 1
28235: PPUSH
28236: CALL_OW 437
28240: ST_TO_ADDR
// if task then
28241: LD_VAR 0 3
28245: IFFALSE 28273
// if task [ 1 ] [ 1 ] = p then
28247: LD_VAR 0 3
28251: PUSH
28252: LD_INT 1
28254: ARRAY
28255: PUSH
28256: LD_INT 1
28258: ARRAY
28259: PUSH
28260: LD_STRING p
28262: EQUAL
28263: IFFALSE 28273
// result := true ;
28265: LD_ADDR_VAR 0 2
28269: PUSH
28270: LD_INT 1
28272: ST_TO_ADDR
// end ;
28273: LD_VAR 0 2
28277: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28278: LD_INT 0
28280: PPUSH
28281: PPUSH
28282: PPUSH
28283: PPUSH
// if pos < 1 then
28284: LD_VAR 0 2
28288: PUSH
28289: LD_INT 1
28291: LESS
28292: IFFALSE 28296
// exit ;
28294: GO 28599
// if pos = 1 then
28296: LD_VAR 0 2
28300: PUSH
28301: LD_INT 1
28303: EQUAL
28304: IFFALSE 28337
// result := Replace ( arr , pos [ 1 ] , value ) else
28306: LD_ADDR_VAR 0 4
28310: PUSH
28311: LD_VAR 0 1
28315: PPUSH
28316: LD_VAR 0 2
28320: PUSH
28321: LD_INT 1
28323: ARRAY
28324: PPUSH
28325: LD_VAR 0 3
28329: PPUSH
28330: CALL_OW 1
28334: ST_TO_ADDR
28335: GO 28599
// begin tmp := arr ;
28337: LD_ADDR_VAR 0 6
28341: PUSH
28342: LD_VAR 0 1
28346: ST_TO_ADDR
// s_arr := [ tmp ] ;
28347: LD_ADDR_VAR 0 7
28351: PUSH
28352: LD_VAR 0 6
28356: PUSH
28357: EMPTY
28358: LIST
28359: ST_TO_ADDR
// for i = 1 to pos - 1 do
28360: LD_ADDR_VAR 0 5
28364: PUSH
28365: DOUBLE
28366: LD_INT 1
28368: DEC
28369: ST_TO_ADDR
28370: LD_VAR 0 2
28374: PUSH
28375: LD_INT 1
28377: MINUS
28378: PUSH
28379: FOR_TO
28380: IFFALSE 28425
// begin tmp := tmp [ pos [ i ] ] ;
28382: LD_ADDR_VAR 0 6
28386: PUSH
28387: LD_VAR 0 6
28391: PUSH
28392: LD_VAR 0 2
28396: PUSH
28397: LD_VAR 0 5
28401: ARRAY
28402: ARRAY
28403: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28404: LD_ADDR_VAR 0 7
28408: PUSH
28409: LD_VAR 0 7
28413: PUSH
28414: LD_VAR 0 6
28418: PUSH
28419: EMPTY
28420: LIST
28421: ADD
28422: ST_TO_ADDR
// end ;
28423: GO 28379
28425: POP
28426: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28427: LD_ADDR_VAR 0 6
28431: PUSH
28432: LD_VAR 0 6
28436: PPUSH
28437: LD_VAR 0 2
28441: PUSH
28442: LD_VAR 0 2
28446: ARRAY
28447: PPUSH
28448: LD_VAR 0 3
28452: PPUSH
28453: CALL_OW 1
28457: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28458: LD_ADDR_VAR 0 7
28462: PUSH
28463: LD_VAR 0 7
28467: PPUSH
28468: LD_VAR 0 7
28472: PPUSH
28473: LD_VAR 0 6
28477: PPUSH
28478: CALL_OW 1
28482: ST_TO_ADDR
// for i = s_arr downto 2 do
28483: LD_ADDR_VAR 0 5
28487: PUSH
28488: DOUBLE
28489: LD_VAR 0 7
28493: INC
28494: ST_TO_ADDR
28495: LD_INT 2
28497: PUSH
28498: FOR_DOWNTO
28499: IFFALSE 28583
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28501: LD_ADDR_VAR 0 6
28505: PUSH
28506: LD_VAR 0 7
28510: PUSH
28511: LD_VAR 0 5
28515: PUSH
28516: LD_INT 1
28518: MINUS
28519: ARRAY
28520: PPUSH
28521: LD_VAR 0 2
28525: PUSH
28526: LD_VAR 0 5
28530: PUSH
28531: LD_INT 1
28533: MINUS
28534: ARRAY
28535: PPUSH
28536: LD_VAR 0 7
28540: PUSH
28541: LD_VAR 0 5
28545: ARRAY
28546: PPUSH
28547: CALL_OW 1
28551: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28552: LD_ADDR_VAR 0 7
28556: PUSH
28557: LD_VAR 0 7
28561: PPUSH
28562: LD_VAR 0 5
28566: PUSH
28567: LD_INT 1
28569: MINUS
28570: PPUSH
28571: LD_VAR 0 6
28575: PPUSH
28576: CALL_OW 1
28580: ST_TO_ADDR
// end ;
28581: GO 28498
28583: POP
28584: POP
// result := s_arr [ 1 ] ;
28585: LD_ADDR_VAR 0 4
28589: PUSH
28590: LD_VAR 0 7
28594: PUSH
28595: LD_INT 1
28597: ARRAY
28598: ST_TO_ADDR
// end ; end ;
28599: LD_VAR 0 4
28603: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28604: LD_INT 0
28606: PPUSH
28607: PPUSH
// if not list then
28608: LD_VAR 0 1
28612: NOT
28613: IFFALSE 28617
// exit ;
28615: GO 28708
// i := list [ pos1 ] ;
28617: LD_ADDR_VAR 0 5
28621: PUSH
28622: LD_VAR 0 1
28626: PUSH
28627: LD_VAR 0 2
28631: ARRAY
28632: ST_TO_ADDR
// if not i then
28633: LD_VAR 0 5
28637: NOT
28638: IFFALSE 28642
// exit ;
28640: GO 28708
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28642: LD_ADDR_VAR 0 1
28646: PUSH
28647: LD_VAR 0 1
28651: PPUSH
28652: LD_VAR 0 2
28656: PPUSH
28657: LD_VAR 0 1
28661: PUSH
28662: LD_VAR 0 3
28666: ARRAY
28667: PPUSH
28668: CALL_OW 1
28672: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28673: LD_ADDR_VAR 0 1
28677: PUSH
28678: LD_VAR 0 1
28682: PPUSH
28683: LD_VAR 0 3
28687: PPUSH
28688: LD_VAR 0 5
28692: PPUSH
28693: CALL_OW 1
28697: ST_TO_ADDR
// result := list ;
28698: LD_ADDR_VAR 0 4
28702: PUSH
28703: LD_VAR 0 1
28707: ST_TO_ADDR
// end ;
28708: LD_VAR 0 4
28712: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28713: LD_INT 0
28715: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28716: LD_ADDR_VAR 0 5
28720: PUSH
28721: LD_VAR 0 1
28725: PPUSH
28726: CALL_OW 250
28730: PPUSH
28731: LD_VAR 0 1
28735: PPUSH
28736: CALL_OW 251
28740: PPUSH
28741: LD_VAR 0 2
28745: PPUSH
28746: LD_VAR 0 3
28750: PPUSH
28751: LD_VAR 0 4
28755: PPUSH
28756: CALL 28766 0 5
28760: ST_TO_ADDR
// end ;
28761: LD_VAR 0 5
28765: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28766: LD_INT 0
28768: PPUSH
28769: PPUSH
28770: PPUSH
28771: PPUSH
// if not list then
28772: LD_VAR 0 3
28776: NOT
28777: IFFALSE 28781
// exit ;
28779: GO 29169
// result := [ ] ;
28781: LD_ADDR_VAR 0 6
28785: PUSH
28786: EMPTY
28787: ST_TO_ADDR
// for i in list do
28788: LD_ADDR_VAR 0 7
28792: PUSH
28793: LD_VAR 0 3
28797: PUSH
28798: FOR_IN
28799: IFFALSE 29001
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28801: LD_ADDR_VAR 0 9
28805: PUSH
28806: LD_VAR 0 7
28810: PPUSH
28811: LD_VAR 0 1
28815: PPUSH
28816: LD_VAR 0 2
28820: PPUSH
28821: CALL_OW 297
28825: ST_TO_ADDR
// if not result then
28826: LD_VAR 0 6
28830: NOT
28831: IFFALSE 28857
// result := [ [ i , tmp ] ] else
28833: LD_ADDR_VAR 0 6
28837: PUSH
28838: LD_VAR 0 7
28842: PUSH
28843: LD_VAR 0 9
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: EMPTY
28853: LIST
28854: ST_TO_ADDR
28855: GO 28999
// begin if result [ result ] [ 2 ] < tmp then
28857: LD_VAR 0 6
28861: PUSH
28862: LD_VAR 0 6
28866: ARRAY
28867: PUSH
28868: LD_INT 2
28870: ARRAY
28871: PUSH
28872: LD_VAR 0 9
28876: LESS
28877: IFFALSE 28919
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28879: LD_ADDR_VAR 0 6
28883: PUSH
28884: LD_VAR 0 6
28888: PPUSH
28889: LD_VAR 0 6
28893: PUSH
28894: LD_INT 1
28896: PLUS
28897: PPUSH
28898: LD_VAR 0 7
28902: PUSH
28903: LD_VAR 0 9
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PPUSH
28912: CALL_OW 2
28916: ST_TO_ADDR
28917: GO 28999
// for j = 1 to result do
28919: LD_ADDR_VAR 0 8
28923: PUSH
28924: DOUBLE
28925: LD_INT 1
28927: DEC
28928: ST_TO_ADDR
28929: LD_VAR 0 6
28933: PUSH
28934: FOR_TO
28935: IFFALSE 28997
// begin if tmp < result [ j ] [ 2 ] then
28937: LD_VAR 0 9
28941: PUSH
28942: LD_VAR 0 6
28946: PUSH
28947: LD_VAR 0 8
28951: ARRAY
28952: PUSH
28953: LD_INT 2
28955: ARRAY
28956: LESS
28957: IFFALSE 28995
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28959: LD_ADDR_VAR 0 6
28963: PUSH
28964: LD_VAR 0 6
28968: PPUSH
28969: LD_VAR 0 8
28973: PPUSH
28974: LD_VAR 0 7
28978: PUSH
28979: LD_VAR 0 9
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PPUSH
28988: CALL_OW 2
28992: ST_TO_ADDR
// break ;
28993: GO 28997
// end ; end ;
28995: GO 28934
28997: POP
28998: POP
// end ; end ;
28999: GO 28798
29001: POP
29002: POP
// if result and not asc then
29003: LD_VAR 0 6
29007: PUSH
29008: LD_VAR 0 4
29012: NOT
29013: AND
29014: IFFALSE 29089
// begin tmp := result ;
29016: LD_ADDR_VAR 0 9
29020: PUSH
29021: LD_VAR 0 6
29025: ST_TO_ADDR
// for i = tmp downto 1 do
29026: LD_ADDR_VAR 0 7
29030: PUSH
29031: DOUBLE
29032: LD_VAR 0 9
29036: INC
29037: ST_TO_ADDR
29038: LD_INT 1
29040: PUSH
29041: FOR_DOWNTO
29042: IFFALSE 29087
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29044: LD_ADDR_VAR 0 6
29048: PUSH
29049: LD_VAR 0 6
29053: PPUSH
29054: LD_VAR 0 9
29058: PUSH
29059: LD_VAR 0 7
29063: MINUS
29064: PUSH
29065: LD_INT 1
29067: PLUS
29068: PPUSH
29069: LD_VAR 0 9
29073: PUSH
29074: LD_VAR 0 7
29078: ARRAY
29079: PPUSH
29080: CALL_OW 1
29084: ST_TO_ADDR
29085: GO 29041
29087: POP
29088: POP
// end ; tmp := [ ] ;
29089: LD_ADDR_VAR 0 9
29093: PUSH
29094: EMPTY
29095: ST_TO_ADDR
// if mode then
29096: LD_VAR 0 5
29100: IFFALSE 29169
// begin for i = 1 to result do
29102: LD_ADDR_VAR 0 7
29106: PUSH
29107: DOUBLE
29108: LD_INT 1
29110: DEC
29111: ST_TO_ADDR
29112: LD_VAR 0 6
29116: PUSH
29117: FOR_TO
29118: IFFALSE 29157
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29120: LD_ADDR_VAR 0 9
29124: PUSH
29125: LD_VAR 0 9
29129: PPUSH
29130: LD_VAR 0 7
29134: PPUSH
29135: LD_VAR 0 6
29139: PUSH
29140: LD_VAR 0 7
29144: ARRAY
29145: PUSH
29146: LD_INT 1
29148: ARRAY
29149: PPUSH
29150: CALL_OW 1
29154: ST_TO_ADDR
29155: GO 29117
29157: POP
29158: POP
// result := tmp ;
29159: LD_ADDR_VAR 0 6
29163: PUSH
29164: LD_VAR 0 9
29168: ST_TO_ADDR
// end ; end ;
29169: LD_VAR 0 6
29173: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29174: LD_INT 0
29176: PPUSH
29177: PPUSH
29178: PPUSH
29179: PPUSH
29180: PPUSH
29181: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29182: LD_ADDR_VAR 0 5
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: EMPTY
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: ST_TO_ADDR
// if not x or not y then
29204: LD_VAR 0 2
29208: NOT
29209: PUSH
29210: LD_VAR 0 3
29214: NOT
29215: OR
29216: IFFALSE 29220
// exit ;
29218: GO 30866
// if not range then
29220: LD_VAR 0 4
29224: NOT
29225: IFFALSE 29235
// range := 10 ;
29227: LD_ADDR_VAR 0 4
29231: PUSH
29232: LD_INT 10
29234: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29235: LD_ADDR_VAR 0 8
29239: PUSH
29240: LD_INT 81
29242: PUSH
29243: LD_VAR 0 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 92
29254: PUSH
29255: LD_VAR 0 2
29259: PUSH
29260: LD_VAR 0 3
29264: PUSH
29265: LD_VAR 0 4
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: LD_INT 21
29281: PUSH
29282: LD_INT 3
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: LIST
29297: PPUSH
29298: CALL_OW 69
29302: ST_TO_ADDR
// if not tmp then
29303: LD_VAR 0 8
29307: NOT
29308: IFFALSE 29312
// exit ;
29310: GO 30866
// for i in tmp do
29312: LD_ADDR_VAR 0 6
29316: PUSH
29317: LD_VAR 0 8
29321: PUSH
29322: FOR_IN
29323: IFFALSE 30841
// begin points := [ 0 , 0 , 0 ] ;
29325: LD_ADDR_VAR 0 9
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 0
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: ST_TO_ADDR
// bpoints := 1 ;
29344: LD_ADDR_VAR 0 10
29348: PUSH
29349: LD_INT 1
29351: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29352: LD_VAR 0 6
29356: PPUSH
29357: CALL_OW 247
29361: PUSH
29362: LD_INT 1
29364: DOUBLE
29365: EQUAL
29366: IFTRUE 29370
29368: GO 29948
29370: POP
// begin if GetClass ( i ) = 1 then
29371: LD_VAR 0 6
29375: PPUSH
29376: CALL_OW 257
29380: PUSH
29381: LD_INT 1
29383: EQUAL
29384: IFFALSE 29405
// points := [ 10 , 5 , 3 ] ;
29386: LD_ADDR_VAR 0 9
29390: PUSH
29391: LD_INT 10
29393: PUSH
29394: LD_INT 5
29396: PUSH
29397: LD_INT 3
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: LIST
29404: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29405: LD_VAR 0 6
29409: PPUSH
29410: CALL_OW 257
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: LD_INT 3
29420: PUSH
29421: LD_INT 4
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: IN
29429: IFFALSE 29450
// points := [ 3 , 2 , 1 ] ;
29431: LD_ADDR_VAR 0 9
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29450: LD_VAR 0 6
29454: PPUSH
29455: CALL_OW 257
29459: PUSH
29460: LD_INT 5
29462: EQUAL
29463: IFFALSE 29484
// points := [ 130 , 5 , 2 ] ;
29465: LD_ADDR_VAR 0 9
29469: PUSH
29470: LD_INT 130
29472: PUSH
29473: LD_INT 5
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: LIST
29483: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29484: LD_VAR 0 6
29488: PPUSH
29489: CALL_OW 257
29493: PUSH
29494: LD_INT 8
29496: EQUAL
29497: IFFALSE 29518
// points := [ 35 , 35 , 30 ] ;
29499: LD_ADDR_VAR 0 9
29503: PUSH
29504: LD_INT 35
29506: PUSH
29507: LD_INT 35
29509: PUSH
29510: LD_INT 30
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: LIST
29517: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29518: LD_VAR 0 6
29522: PPUSH
29523: CALL_OW 257
29527: PUSH
29528: LD_INT 9
29530: EQUAL
29531: IFFALSE 29552
// points := [ 20 , 55 , 40 ] ;
29533: LD_ADDR_VAR 0 9
29537: PUSH
29538: LD_INT 20
29540: PUSH
29541: LD_INT 55
29543: PUSH
29544: LD_INT 40
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: LIST
29551: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29552: LD_VAR 0 6
29556: PPUSH
29557: CALL_OW 257
29561: PUSH
29562: LD_INT 12
29564: PUSH
29565: LD_INT 16
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: IN
29572: IFFALSE 29593
// points := [ 5 , 3 , 2 ] ;
29574: LD_ADDR_VAR 0 9
29578: PUSH
29579: LD_INT 5
29581: PUSH
29582: LD_INT 3
29584: PUSH
29585: LD_INT 2
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29593: LD_VAR 0 6
29597: PPUSH
29598: CALL_OW 257
29602: PUSH
29603: LD_INT 17
29605: EQUAL
29606: IFFALSE 29627
// points := [ 100 , 50 , 75 ] ;
29608: LD_ADDR_VAR 0 9
29612: PUSH
29613: LD_INT 100
29615: PUSH
29616: LD_INT 50
29618: PUSH
29619: LD_INT 75
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: LIST
29626: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29627: LD_VAR 0 6
29631: PPUSH
29632: CALL_OW 257
29636: PUSH
29637: LD_INT 15
29639: EQUAL
29640: IFFALSE 29661
// points := [ 10 , 5 , 3 ] ;
29642: LD_ADDR_VAR 0 9
29646: PUSH
29647: LD_INT 10
29649: PUSH
29650: LD_INT 5
29652: PUSH
29653: LD_INT 3
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29661: LD_VAR 0 6
29665: PPUSH
29666: CALL_OW 257
29670: PUSH
29671: LD_INT 14
29673: EQUAL
29674: IFFALSE 29695
// points := [ 10 , 0 , 0 ] ;
29676: LD_ADDR_VAR 0 9
29680: PUSH
29681: LD_INT 10
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: LIST
29694: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29695: LD_VAR 0 6
29699: PPUSH
29700: CALL_OW 257
29704: PUSH
29705: LD_INT 11
29707: EQUAL
29708: IFFALSE 29729
// points := [ 30 , 10 , 5 ] ;
29710: LD_ADDR_VAR 0 9
29714: PUSH
29715: LD_INT 30
29717: PUSH
29718: LD_INT 10
29720: PUSH
29721: LD_INT 5
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29729: LD_VAR 0 1
29733: PPUSH
29734: LD_INT 5
29736: PPUSH
29737: CALL_OW 321
29741: PUSH
29742: LD_INT 2
29744: EQUAL
29745: IFFALSE 29762
// bpoints := bpoints * 1.8 ;
29747: LD_ADDR_VAR 0 10
29751: PUSH
29752: LD_VAR 0 10
29756: PUSH
29757: LD_REAL  1.80000000000000E+0000
29760: MUL
29761: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29762: LD_VAR 0 6
29766: PPUSH
29767: CALL_OW 257
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: LD_INT 2
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: LD_INT 4
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: IN
29790: PUSH
29791: LD_VAR 0 1
29795: PPUSH
29796: LD_INT 51
29798: PPUSH
29799: CALL_OW 321
29803: PUSH
29804: LD_INT 2
29806: EQUAL
29807: AND
29808: IFFALSE 29825
// bpoints := bpoints * 1.2 ;
29810: LD_ADDR_VAR 0 10
29814: PUSH
29815: LD_VAR 0 10
29819: PUSH
29820: LD_REAL  1.20000000000000E+0000
29823: MUL
29824: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29825: LD_VAR 0 6
29829: PPUSH
29830: CALL_OW 257
29834: PUSH
29835: LD_INT 5
29837: PUSH
29838: LD_INT 7
29840: PUSH
29841: LD_INT 9
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: IN
29849: PUSH
29850: LD_VAR 0 1
29854: PPUSH
29855: LD_INT 52
29857: PPUSH
29858: CALL_OW 321
29862: PUSH
29863: LD_INT 2
29865: EQUAL
29866: AND
29867: IFFALSE 29884
// bpoints := bpoints * 1.5 ;
29869: LD_ADDR_VAR 0 10
29873: PUSH
29874: LD_VAR 0 10
29878: PUSH
29879: LD_REAL  1.50000000000000E+0000
29882: MUL
29883: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29884: LD_VAR 0 1
29888: PPUSH
29889: LD_INT 66
29891: PPUSH
29892: CALL_OW 321
29896: PUSH
29897: LD_INT 2
29899: EQUAL
29900: IFFALSE 29917
// bpoints := bpoints * 1.1 ;
29902: LD_ADDR_VAR 0 10
29906: PUSH
29907: LD_VAR 0 10
29911: PUSH
29912: LD_REAL  1.10000000000000E+0000
29915: MUL
29916: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29917: LD_ADDR_VAR 0 10
29921: PUSH
29922: LD_VAR 0 10
29926: PUSH
29927: LD_VAR 0 6
29931: PPUSH
29932: LD_INT 1
29934: PPUSH
29935: CALL_OW 259
29939: PUSH
29940: LD_REAL  1.15000000000000E+0000
29943: MUL
29944: MUL
29945: ST_TO_ADDR
// end ; unit_vehicle :
29946: GO 30770
29948: LD_INT 2
29950: DOUBLE
29951: EQUAL
29952: IFTRUE 29956
29954: GO 30758
29956: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29957: LD_VAR 0 6
29961: PPUSH
29962: CALL_OW 264
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: LD_INT 42
29972: PUSH
29973: LD_INT 24
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: IN
29981: IFFALSE 30002
// points := [ 25 , 5 , 3 ] ;
29983: LD_ADDR_VAR 0 9
29987: PUSH
29988: LD_INT 25
29990: PUSH
29991: LD_INT 5
29993: PUSH
29994: LD_INT 3
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: LIST
30001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30002: LD_VAR 0 6
30006: PPUSH
30007: CALL_OW 264
30011: PUSH
30012: LD_INT 4
30014: PUSH
30015: LD_INT 43
30017: PUSH
30018: LD_INT 25
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: IN
30026: IFFALSE 30047
// points := [ 40 , 15 , 5 ] ;
30028: LD_ADDR_VAR 0 9
30032: PUSH
30033: LD_INT 40
30035: PUSH
30036: LD_INT 15
30038: PUSH
30039: LD_INT 5
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30047: LD_VAR 0 6
30051: PPUSH
30052: CALL_OW 264
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: LD_INT 23
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: IN
30067: IFFALSE 30088
// points := [ 7 , 25 , 8 ] ;
30069: LD_ADDR_VAR 0 9
30073: PUSH
30074: LD_INT 7
30076: PUSH
30077: LD_INT 25
30079: PUSH
30080: LD_INT 8
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30088: LD_VAR 0 6
30092: PPUSH
30093: CALL_OW 264
30097: PUSH
30098: LD_INT 5
30100: PUSH
30101: LD_INT 27
30103: PUSH
30104: LD_INT 44
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: LIST
30111: IN
30112: IFFALSE 30133
// points := [ 14 , 50 , 16 ] ;
30114: LD_ADDR_VAR 0 9
30118: PUSH
30119: LD_INT 14
30121: PUSH
30122: LD_INT 50
30124: PUSH
30125: LD_INT 16
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: LIST
30132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30133: LD_VAR 0 6
30137: PPUSH
30138: CALL_OW 264
30142: PUSH
30143: LD_INT 6
30145: PUSH
30146: LD_INT 46
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: IN
30153: IFFALSE 30174
// points := [ 32 , 120 , 70 ] ;
30155: LD_ADDR_VAR 0 9
30159: PUSH
30160: LD_INT 32
30162: PUSH
30163: LD_INT 120
30165: PUSH
30166: LD_INT 70
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30174: LD_VAR 0 6
30178: PPUSH
30179: CALL_OW 264
30183: PUSH
30184: LD_INT 7
30186: PUSH
30187: LD_INT 28
30189: PUSH
30190: LD_INT 45
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: LIST
30197: IN
30198: IFFALSE 30219
// points := [ 35 , 20 , 45 ] ;
30200: LD_ADDR_VAR 0 9
30204: PUSH
30205: LD_INT 35
30207: PUSH
30208: LD_INT 20
30210: PUSH
30211: LD_INT 45
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30219: LD_VAR 0 6
30223: PPUSH
30224: CALL_OW 264
30228: PUSH
30229: LD_INT 47
30231: PUSH
30232: EMPTY
30233: LIST
30234: IN
30235: IFFALSE 30256
// points := [ 67 , 45 , 75 ] ;
30237: LD_ADDR_VAR 0 9
30241: PUSH
30242: LD_INT 67
30244: PUSH
30245: LD_INT 45
30247: PUSH
30248: LD_INT 75
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: LIST
30255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30256: LD_VAR 0 6
30260: PPUSH
30261: CALL_OW 264
30265: PUSH
30266: LD_INT 26
30268: PUSH
30269: EMPTY
30270: LIST
30271: IN
30272: IFFALSE 30293
// points := [ 120 , 30 , 80 ] ;
30274: LD_ADDR_VAR 0 9
30278: PUSH
30279: LD_INT 120
30281: PUSH
30282: LD_INT 30
30284: PUSH
30285: LD_INT 80
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: LIST
30292: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30293: LD_VAR 0 6
30297: PPUSH
30298: CALL_OW 264
30302: PUSH
30303: LD_INT 22
30305: PUSH
30306: EMPTY
30307: LIST
30308: IN
30309: IFFALSE 30330
// points := [ 40 , 1 , 1 ] ;
30311: LD_ADDR_VAR 0 9
30315: PUSH
30316: LD_INT 40
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30330: LD_VAR 0 6
30334: PPUSH
30335: CALL_OW 264
30339: PUSH
30340: LD_INT 29
30342: PUSH
30343: EMPTY
30344: LIST
30345: IN
30346: IFFALSE 30367
// points := [ 70 , 200 , 400 ] ;
30348: LD_ADDR_VAR 0 9
30352: PUSH
30353: LD_INT 70
30355: PUSH
30356: LD_INT 200
30358: PUSH
30359: LD_INT 400
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30367: LD_VAR 0 6
30371: PPUSH
30372: CALL_OW 264
30376: PUSH
30377: LD_INT 14
30379: PUSH
30380: LD_INT 53
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: IN
30387: IFFALSE 30408
// points := [ 40 , 10 , 20 ] ;
30389: LD_ADDR_VAR 0 9
30393: PUSH
30394: LD_INT 40
30396: PUSH
30397: LD_INT 10
30399: PUSH
30400: LD_INT 20
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: LIST
30407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30408: LD_VAR 0 6
30412: PPUSH
30413: CALL_OW 264
30417: PUSH
30418: LD_INT 9
30420: PUSH
30421: EMPTY
30422: LIST
30423: IN
30424: IFFALSE 30445
// points := [ 5 , 70 , 20 ] ;
30426: LD_ADDR_VAR 0 9
30430: PUSH
30431: LD_INT 5
30433: PUSH
30434: LD_INT 70
30436: PUSH
30437: LD_INT 20
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: LIST
30444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30445: LD_VAR 0 6
30449: PPUSH
30450: CALL_OW 264
30454: PUSH
30455: LD_INT 10
30457: PUSH
30458: EMPTY
30459: LIST
30460: IN
30461: IFFALSE 30482
// points := [ 35 , 110 , 70 ] ;
30463: LD_ADDR_VAR 0 9
30467: PUSH
30468: LD_INT 35
30470: PUSH
30471: LD_INT 110
30473: PUSH
30474: LD_INT 70
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30482: LD_VAR 0 6
30486: PPUSH
30487: CALL_OW 265
30491: PUSH
30492: LD_INT 25
30494: EQUAL
30495: IFFALSE 30516
// points := [ 80 , 65 , 100 ] ;
30497: LD_ADDR_VAR 0 9
30501: PUSH
30502: LD_INT 80
30504: PUSH
30505: LD_INT 65
30507: PUSH
30508: LD_INT 100
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: LIST
30515: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30516: LD_VAR 0 6
30520: PPUSH
30521: CALL_OW 263
30525: PUSH
30526: LD_INT 1
30528: EQUAL
30529: IFFALSE 30564
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30531: LD_ADDR_VAR 0 10
30535: PUSH
30536: LD_VAR 0 10
30540: PUSH
30541: LD_VAR 0 6
30545: PPUSH
30546: CALL_OW 311
30550: PPUSH
30551: LD_INT 3
30553: PPUSH
30554: CALL_OW 259
30558: PUSH
30559: LD_INT 4
30561: MUL
30562: MUL
30563: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30564: LD_VAR 0 6
30568: PPUSH
30569: CALL_OW 263
30573: PUSH
30574: LD_INT 2
30576: EQUAL
30577: IFFALSE 30628
// begin j := IsControledBy ( i ) ;
30579: LD_ADDR_VAR 0 7
30583: PUSH
30584: LD_VAR 0 6
30588: PPUSH
30589: CALL_OW 312
30593: ST_TO_ADDR
// if j then
30594: LD_VAR 0 7
30598: IFFALSE 30628
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30600: LD_ADDR_VAR 0 10
30604: PUSH
30605: LD_VAR 0 10
30609: PUSH
30610: LD_VAR 0 7
30614: PPUSH
30615: LD_INT 3
30617: PPUSH
30618: CALL_OW 259
30622: PUSH
30623: LD_INT 3
30625: MUL
30626: MUL
30627: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30628: LD_VAR 0 6
30632: PPUSH
30633: CALL_OW 264
30637: PUSH
30638: LD_INT 5
30640: PUSH
30641: LD_INT 6
30643: PUSH
30644: LD_INT 46
30646: PUSH
30647: LD_INT 44
30649: PUSH
30650: LD_INT 47
30652: PUSH
30653: LD_INT 45
30655: PUSH
30656: LD_INT 28
30658: PUSH
30659: LD_INT 7
30661: PUSH
30662: LD_INT 27
30664: PUSH
30665: LD_INT 29
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: IN
30680: PUSH
30681: LD_VAR 0 1
30685: PPUSH
30686: LD_INT 52
30688: PPUSH
30689: CALL_OW 321
30693: PUSH
30694: LD_INT 2
30696: EQUAL
30697: AND
30698: IFFALSE 30715
// bpoints := bpoints * 1.2 ;
30700: LD_ADDR_VAR 0 10
30704: PUSH
30705: LD_VAR 0 10
30709: PUSH
30710: LD_REAL  1.20000000000000E+0000
30713: MUL
30714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30715: LD_VAR 0 6
30719: PPUSH
30720: CALL_OW 264
30724: PUSH
30725: LD_INT 6
30727: PUSH
30728: LD_INT 46
30730: PUSH
30731: LD_INT 47
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: LIST
30738: IN
30739: IFFALSE 30756
// bpoints := bpoints * 1.2 ;
30741: LD_ADDR_VAR 0 10
30745: PUSH
30746: LD_VAR 0 10
30750: PUSH
30751: LD_REAL  1.20000000000000E+0000
30754: MUL
30755: ST_TO_ADDR
// end ; unit_building :
30756: GO 30770
30758: LD_INT 3
30760: DOUBLE
30761: EQUAL
30762: IFTRUE 30766
30764: GO 30769
30766: POP
// ; end ;
30767: GO 30770
30769: POP
// for j = 1 to 3 do
30770: LD_ADDR_VAR 0 7
30774: PUSH
30775: DOUBLE
30776: LD_INT 1
30778: DEC
30779: ST_TO_ADDR
30780: LD_INT 3
30782: PUSH
30783: FOR_TO
30784: IFFALSE 30837
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30786: LD_ADDR_VAR 0 5
30790: PUSH
30791: LD_VAR 0 5
30795: PPUSH
30796: LD_VAR 0 7
30800: PPUSH
30801: LD_VAR 0 5
30805: PUSH
30806: LD_VAR 0 7
30810: ARRAY
30811: PUSH
30812: LD_VAR 0 9
30816: PUSH
30817: LD_VAR 0 7
30821: ARRAY
30822: PUSH
30823: LD_VAR 0 10
30827: MUL
30828: PLUS
30829: PPUSH
30830: CALL_OW 1
30834: ST_TO_ADDR
30835: GO 30783
30837: POP
30838: POP
// end ;
30839: GO 29322
30841: POP
30842: POP
// result := Replace ( result , 4 , tmp ) ;
30843: LD_ADDR_VAR 0 5
30847: PUSH
30848: LD_VAR 0 5
30852: PPUSH
30853: LD_INT 4
30855: PPUSH
30856: LD_VAR 0 8
30860: PPUSH
30861: CALL_OW 1
30865: ST_TO_ADDR
// end ;
30866: LD_VAR 0 5
30870: RET
// export function DangerAtRange ( unit , range ) ; begin
30871: LD_INT 0
30873: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30874: LD_ADDR_VAR 0 3
30878: PUSH
30879: LD_VAR 0 1
30883: PPUSH
30884: CALL_OW 255
30888: PPUSH
30889: LD_VAR 0 1
30893: PPUSH
30894: CALL_OW 250
30898: PPUSH
30899: LD_VAR 0 1
30903: PPUSH
30904: CALL_OW 251
30908: PPUSH
30909: LD_VAR 0 2
30913: PPUSH
30914: CALL 29174 0 4
30918: ST_TO_ADDR
// end ;
30919: LD_VAR 0 3
30923: RET
// export function DangerInArea ( side , area ) ; begin
30924: LD_INT 0
30926: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30927: LD_ADDR_VAR 0 3
30931: PUSH
30932: LD_VAR 0 2
30936: PPUSH
30937: LD_INT 81
30939: PUSH
30940: LD_VAR 0 1
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PPUSH
30949: CALL_OW 70
30953: ST_TO_ADDR
// end ;
30954: LD_VAR 0 3
30958: RET
// export function IsExtension ( b ) ; begin
30959: LD_INT 0
30961: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30962: LD_ADDR_VAR 0 2
30966: PUSH
30967: LD_VAR 0 1
30971: PUSH
30972: LD_INT 23
30974: PUSH
30975: LD_INT 20
30977: PUSH
30978: LD_INT 22
30980: PUSH
30981: LD_INT 17
30983: PUSH
30984: LD_INT 24
30986: PUSH
30987: LD_INT 21
30989: PUSH
30990: LD_INT 19
30992: PUSH
30993: LD_INT 16
30995: PUSH
30996: LD_INT 25
30998: PUSH
30999: LD_INT 18
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: IN
31014: ST_TO_ADDR
// end ;
31015: LD_VAR 0 2
31019: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
31020: LD_INT 0
31022: PPUSH
31023: PPUSH
31024: PPUSH
// result := [ ] ;
31025: LD_ADDR_VAR 0 3
31029: PUSH
31030: EMPTY
31031: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31032: LD_ADDR_VAR 0 4
31036: PUSH
31037: LD_VAR 0 2
31041: PPUSH
31042: LD_INT 21
31044: PUSH
31045: LD_INT 3
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PPUSH
31052: CALL_OW 70
31056: ST_TO_ADDR
// if not tmp then
31057: LD_VAR 0 4
31061: NOT
31062: IFFALSE 31066
// exit ;
31064: GO 31124
// for i in tmp do
31066: LD_ADDR_VAR 0 5
31070: PUSH
31071: LD_VAR 0 4
31075: PUSH
31076: FOR_IN
31077: IFFALSE 31112
// if GetBase ( i ) <> base then
31079: LD_VAR 0 5
31083: PPUSH
31084: CALL_OW 274
31088: PUSH
31089: LD_VAR 0 1
31093: NONEQUAL
31094: IFFALSE 31110
// ComLinkToBase ( base , i ) ;
31096: LD_VAR 0 1
31100: PPUSH
31101: LD_VAR 0 5
31105: PPUSH
31106: CALL_OW 169
31110: GO 31076
31112: POP
31113: POP
// result := tmp ;
31114: LD_ADDR_VAR 0 3
31118: PUSH
31119: LD_VAR 0 4
31123: ST_TO_ADDR
// end ;
31124: LD_VAR 0 3
31128: RET
// export function ComComplete ( unit , b ) ; var i ; begin
31129: LD_INT 0
31131: PPUSH
31132: PPUSH
// if BuildingStatus ( b ) = bs_build then
31133: LD_VAR 0 2
31137: PPUSH
31138: CALL_OW 461
31142: PUSH
31143: LD_INT 1
31145: EQUAL
31146: IFFALSE 31206
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31148: LD_VAR 0 1
31152: PPUSH
31153: LD_STRING h
31155: PUSH
31156: LD_VAR 0 2
31160: PPUSH
31161: CALL_OW 250
31165: PUSH
31166: LD_VAR 0 2
31170: PPUSH
31171: CALL_OW 251
31175: PUSH
31176: LD_VAR 0 2
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: PUSH
31199: EMPTY
31200: LIST
31201: PPUSH
31202: CALL_OW 446
// end ;
31206: LD_VAR 0 3
31210: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31211: LD_INT 0
31213: PPUSH
31214: PPUSH
31215: PPUSH
31216: PPUSH
31217: PPUSH
31218: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31219: LD_VAR 0 1
31223: NOT
31224: PUSH
31225: LD_VAR 0 1
31229: PPUSH
31230: CALL_OW 263
31234: PUSH
31235: LD_INT 2
31237: EQUAL
31238: NOT
31239: OR
31240: IFFALSE 31244
// exit ;
31242: GO 31560
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31244: LD_ADDR_VAR 0 6
31248: PUSH
31249: LD_INT 22
31251: PUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: CALL_OW 255
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 2
31268: PUSH
31269: LD_INT 30
31271: PUSH
31272: LD_INT 36
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 34
31281: PUSH
31282: LD_INT 31
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PPUSH
31298: CALL_OW 69
31302: ST_TO_ADDR
// if not tmp then
31303: LD_VAR 0 6
31307: NOT
31308: IFFALSE 31312
// exit ;
31310: GO 31560
// result := [ ] ;
31312: LD_ADDR_VAR 0 2
31316: PUSH
31317: EMPTY
31318: ST_TO_ADDR
// for i in tmp do
31319: LD_ADDR_VAR 0 3
31323: PUSH
31324: LD_VAR 0 6
31328: PUSH
31329: FOR_IN
31330: IFFALSE 31401
// begin t := UnitsInside ( i ) ;
31332: LD_ADDR_VAR 0 4
31336: PUSH
31337: LD_VAR 0 3
31341: PPUSH
31342: CALL_OW 313
31346: ST_TO_ADDR
// if t then
31347: LD_VAR 0 4
31351: IFFALSE 31399
// for j in t do
31353: LD_ADDR_VAR 0 7
31357: PUSH
31358: LD_VAR 0 4
31362: PUSH
31363: FOR_IN
31364: IFFALSE 31397
// result := Insert ( result , result + 1 , j ) ;
31366: LD_ADDR_VAR 0 2
31370: PUSH
31371: LD_VAR 0 2
31375: PPUSH
31376: LD_VAR 0 2
31380: PUSH
31381: LD_INT 1
31383: PLUS
31384: PPUSH
31385: LD_VAR 0 7
31389: PPUSH
31390: CALL_OW 2
31394: ST_TO_ADDR
31395: GO 31363
31397: POP
31398: POP
// end ;
31399: GO 31329
31401: POP
31402: POP
// if not result then
31403: LD_VAR 0 2
31407: NOT
31408: IFFALSE 31412
// exit ;
31410: GO 31560
// mech := result [ 1 ] ;
31412: LD_ADDR_VAR 0 5
31416: PUSH
31417: LD_VAR 0 2
31421: PUSH
31422: LD_INT 1
31424: ARRAY
31425: ST_TO_ADDR
// if result > 1 then
31426: LD_VAR 0 2
31430: PUSH
31431: LD_INT 1
31433: GREATER
31434: IFFALSE 31546
// for i = 2 to result do
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: DOUBLE
31442: LD_INT 2
31444: DEC
31445: ST_TO_ADDR
31446: LD_VAR 0 2
31450: PUSH
31451: FOR_TO
31452: IFFALSE 31544
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31454: LD_ADDR_VAR 0 4
31458: PUSH
31459: LD_VAR 0 2
31463: PUSH
31464: LD_VAR 0 3
31468: ARRAY
31469: PPUSH
31470: LD_INT 3
31472: PPUSH
31473: CALL_OW 259
31477: PUSH
31478: LD_VAR 0 2
31482: PUSH
31483: LD_VAR 0 3
31487: ARRAY
31488: PPUSH
31489: CALL_OW 432
31493: MINUS
31494: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31495: LD_VAR 0 4
31499: PUSH
31500: LD_VAR 0 5
31504: PPUSH
31505: LD_INT 3
31507: PPUSH
31508: CALL_OW 259
31512: PUSH
31513: LD_VAR 0 5
31517: PPUSH
31518: CALL_OW 432
31522: MINUS
31523: GREATEREQUAL
31524: IFFALSE 31542
// mech := result [ i ] ;
31526: LD_ADDR_VAR 0 5
31530: PUSH
31531: LD_VAR 0 2
31535: PUSH
31536: LD_VAR 0 3
31540: ARRAY
31541: ST_TO_ADDR
// end ;
31542: GO 31451
31544: POP
31545: POP
// ComLinkTo ( vehicle , mech ) ;
31546: LD_VAR 0 1
31550: PPUSH
31551: LD_VAR 0 5
31555: PPUSH
31556: CALL_OW 135
// end ;
31560: LD_VAR 0 2
31564: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31565: LD_INT 0
31567: PPUSH
31568: PPUSH
31569: PPUSH
31570: PPUSH
31571: PPUSH
31572: PPUSH
31573: PPUSH
31574: PPUSH
31575: PPUSH
31576: PPUSH
31577: PPUSH
31578: PPUSH
31579: PPUSH
// result := [ ] ;
31580: LD_ADDR_VAR 0 7
31584: PUSH
31585: EMPTY
31586: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31587: LD_VAR 0 1
31591: PPUSH
31592: CALL_OW 266
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: IN
31607: NOT
31608: IFFALSE 31612
// exit ;
31610: GO 33243
// if name then
31612: LD_VAR 0 3
31616: IFFALSE 31632
// SetBName ( base_dep , name ) ;
31618: LD_VAR 0 1
31622: PPUSH
31623: LD_VAR 0 3
31627: PPUSH
31628: CALL_OW 500
// base := GetBase ( base_dep ) ;
31632: LD_ADDR_VAR 0 15
31636: PUSH
31637: LD_VAR 0 1
31641: PPUSH
31642: CALL_OW 274
31646: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31647: LD_ADDR_VAR 0 16
31651: PUSH
31652: LD_VAR 0 1
31656: PPUSH
31657: CALL_OW 255
31661: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31662: LD_ADDR_VAR 0 17
31666: PUSH
31667: LD_VAR 0 1
31671: PPUSH
31672: CALL_OW 248
31676: ST_TO_ADDR
// if sources then
31677: LD_VAR 0 5
31681: IFFALSE 31728
// for i = 1 to 3 do
31683: LD_ADDR_VAR 0 8
31687: PUSH
31688: DOUBLE
31689: LD_INT 1
31691: DEC
31692: ST_TO_ADDR
31693: LD_INT 3
31695: PUSH
31696: FOR_TO
31697: IFFALSE 31726
// AddResourceType ( base , i , sources [ i ] ) ;
31699: LD_VAR 0 15
31703: PPUSH
31704: LD_VAR 0 8
31708: PPUSH
31709: LD_VAR 0 5
31713: PUSH
31714: LD_VAR 0 8
31718: ARRAY
31719: PPUSH
31720: CALL_OW 276
31724: GO 31696
31726: POP
31727: POP
// buildings := GetBaseBuildings ( base , area ) ;
31728: LD_ADDR_VAR 0 18
31732: PUSH
31733: LD_VAR 0 15
31737: PPUSH
31738: LD_VAR 0 2
31742: PPUSH
31743: CALL 31020 0 2
31747: ST_TO_ADDR
// InitHc ;
31748: CALL_OW 19
// InitUc ;
31752: CALL_OW 18
// uc_side := side ;
31756: LD_ADDR_OWVAR 20
31760: PUSH
31761: LD_VAR 0 16
31765: ST_TO_ADDR
// uc_nation := nation ;
31766: LD_ADDR_OWVAR 21
31770: PUSH
31771: LD_VAR 0 17
31775: ST_TO_ADDR
// if buildings then
31776: LD_VAR 0 18
31780: IFFALSE 33102
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31782: LD_ADDR_VAR 0 19
31786: PUSH
31787: LD_VAR 0 18
31791: PPUSH
31792: LD_INT 2
31794: PUSH
31795: LD_INT 30
31797: PUSH
31798: LD_INT 29
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 30
31807: PUSH
31808: LD_INT 30
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: PPUSH
31820: CALL_OW 72
31824: ST_TO_ADDR
// if tmp then
31825: LD_VAR 0 19
31829: IFFALSE 31877
// for i in tmp do
31831: LD_ADDR_VAR 0 8
31835: PUSH
31836: LD_VAR 0 19
31840: PUSH
31841: FOR_IN
31842: IFFALSE 31875
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31844: LD_VAR 0 8
31848: PPUSH
31849: CALL_OW 250
31853: PPUSH
31854: LD_VAR 0 8
31858: PPUSH
31859: CALL_OW 251
31863: PPUSH
31864: LD_VAR 0 16
31868: PPUSH
31869: CALL_OW 441
31873: GO 31841
31875: POP
31876: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31877: LD_VAR 0 18
31881: PPUSH
31882: LD_INT 2
31884: PUSH
31885: LD_INT 30
31887: PUSH
31888: LD_INT 32
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 30
31897: PUSH
31898: LD_INT 33
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: LIST
31909: PPUSH
31910: CALL_OW 72
31914: IFFALSE 32002
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31916: LD_ADDR_VAR 0 8
31920: PUSH
31921: LD_VAR 0 18
31925: PPUSH
31926: LD_INT 2
31928: PUSH
31929: LD_INT 30
31931: PUSH
31932: LD_INT 32
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 30
31941: PUSH
31942: LD_INT 33
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: LIST
31953: PPUSH
31954: CALL_OW 72
31958: PUSH
31959: FOR_IN
31960: IFFALSE 32000
// begin if not GetBWeapon ( i ) then
31962: LD_VAR 0 8
31966: PPUSH
31967: CALL_OW 269
31971: NOT
31972: IFFALSE 31998
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31974: LD_VAR 0 8
31978: PPUSH
31979: LD_VAR 0 8
31983: PPUSH
31984: LD_VAR 0 2
31988: PPUSH
31989: CALL 33248 0 2
31993: PPUSH
31994: CALL_OW 431
// end ;
31998: GO 31959
32000: POP
32001: POP
// end ; for i = 1 to personel do
32002: LD_ADDR_VAR 0 8
32006: PUSH
32007: DOUBLE
32008: LD_INT 1
32010: DEC
32011: ST_TO_ADDR
32012: LD_VAR 0 6
32016: PUSH
32017: FOR_TO
32018: IFFALSE 33082
// begin if i > 4 then
32020: LD_VAR 0 8
32024: PUSH
32025: LD_INT 4
32027: GREATER
32028: IFFALSE 32032
// break ;
32030: GO 33082
// case i of 1 :
32032: LD_VAR 0 8
32036: PUSH
32037: LD_INT 1
32039: DOUBLE
32040: EQUAL
32041: IFTRUE 32045
32043: GO 32125
32045: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32046: LD_ADDR_VAR 0 12
32050: PUSH
32051: LD_VAR 0 18
32055: PPUSH
32056: LD_INT 22
32058: PUSH
32059: LD_VAR 0 16
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 58
32070: PUSH
32071: EMPTY
32072: LIST
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: LD_INT 30
32079: PUSH
32080: LD_INT 32
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 30
32089: PUSH
32090: LD_INT 4
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 30
32099: PUSH
32100: LD_INT 5
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: LIST
32117: PPUSH
32118: CALL_OW 72
32122: ST_TO_ADDR
32123: GO 32347
32125: LD_INT 2
32127: DOUBLE
32128: EQUAL
32129: IFTRUE 32133
32131: GO 32195
32133: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32134: LD_ADDR_VAR 0 12
32138: PUSH
32139: LD_VAR 0 18
32143: PPUSH
32144: LD_INT 22
32146: PUSH
32147: LD_VAR 0 16
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 2
32158: PUSH
32159: LD_INT 30
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 30
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: LIST
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PPUSH
32188: CALL_OW 72
32192: ST_TO_ADDR
32193: GO 32347
32195: LD_INT 3
32197: DOUBLE
32198: EQUAL
32199: IFTRUE 32203
32201: GO 32265
32203: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32204: LD_ADDR_VAR 0 12
32208: PUSH
32209: LD_VAR 0 18
32213: PPUSH
32214: LD_INT 22
32216: PUSH
32217: LD_VAR 0 16
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 30
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 30
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PPUSH
32258: CALL_OW 72
32262: ST_TO_ADDR
32263: GO 32347
32265: LD_INT 4
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32346
32273: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32274: LD_ADDR_VAR 0 12
32278: PUSH
32279: LD_VAR 0 18
32283: PPUSH
32284: LD_INT 22
32286: PUSH
32287: LD_VAR 0 16
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 2
32298: PUSH
32299: LD_INT 30
32301: PUSH
32302: LD_INT 6
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 30
32311: PUSH
32312: LD_INT 7
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 30
32321: PUSH
32322: LD_INT 8
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PPUSH
32339: CALL_OW 72
32343: ST_TO_ADDR
32344: GO 32347
32346: POP
// if i = 1 then
32347: LD_VAR 0 8
32351: PUSH
32352: LD_INT 1
32354: EQUAL
32355: IFFALSE 32466
// begin tmp := [ ] ;
32357: LD_ADDR_VAR 0 19
32361: PUSH
32362: EMPTY
32363: ST_TO_ADDR
// for j in f do
32364: LD_ADDR_VAR 0 9
32368: PUSH
32369: LD_VAR 0 12
32373: PUSH
32374: FOR_IN
32375: IFFALSE 32448
// if GetBType ( j ) = b_bunker then
32377: LD_VAR 0 9
32381: PPUSH
32382: CALL_OW 266
32386: PUSH
32387: LD_INT 32
32389: EQUAL
32390: IFFALSE 32417
// tmp := Insert ( tmp , 1 , j ) else
32392: LD_ADDR_VAR 0 19
32396: PUSH
32397: LD_VAR 0 19
32401: PPUSH
32402: LD_INT 1
32404: PPUSH
32405: LD_VAR 0 9
32409: PPUSH
32410: CALL_OW 2
32414: ST_TO_ADDR
32415: GO 32446
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32417: LD_ADDR_VAR 0 19
32421: PUSH
32422: LD_VAR 0 19
32426: PPUSH
32427: LD_VAR 0 19
32431: PUSH
32432: LD_INT 1
32434: PLUS
32435: PPUSH
32436: LD_VAR 0 9
32440: PPUSH
32441: CALL_OW 2
32445: ST_TO_ADDR
32446: GO 32374
32448: POP
32449: POP
// if tmp then
32450: LD_VAR 0 19
32454: IFFALSE 32466
// f := tmp ;
32456: LD_ADDR_VAR 0 12
32460: PUSH
32461: LD_VAR 0 19
32465: ST_TO_ADDR
// end ; x := personel [ i ] ;
32466: LD_ADDR_VAR 0 13
32470: PUSH
32471: LD_VAR 0 6
32475: PUSH
32476: LD_VAR 0 8
32480: ARRAY
32481: ST_TO_ADDR
// if x = - 1 then
32482: LD_VAR 0 13
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: EQUAL
32491: IFFALSE 32700
// begin for j in f do
32493: LD_ADDR_VAR 0 9
32497: PUSH
32498: LD_VAR 0 12
32502: PUSH
32503: FOR_IN
32504: IFFALSE 32696
// repeat InitHc ;
32506: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32510: LD_VAR 0 9
32514: PPUSH
32515: CALL_OW 266
32519: PUSH
32520: LD_INT 5
32522: EQUAL
32523: IFFALSE 32593
// begin if UnitsInside ( j ) < 3 then
32525: LD_VAR 0 9
32529: PPUSH
32530: CALL_OW 313
32534: PUSH
32535: LD_INT 3
32537: LESS
32538: IFFALSE 32574
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32540: LD_INT 0
32542: PPUSH
32543: LD_INT 5
32545: PUSH
32546: LD_INT 8
32548: PUSH
32549: LD_INT 9
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: PUSH
32557: LD_VAR 0 17
32561: ARRAY
32562: PPUSH
32563: LD_VAR 0 4
32567: PPUSH
32568: CALL_OW 380
32572: GO 32591
// PrepareHuman ( false , i , skill ) ;
32574: LD_INT 0
32576: PPUSH
32577: LD_VAR 0 8
32581: PPUSH
32582: LD_VAR 0 4
32586: PPUSH
32587: CALL_OW 380
// end else
32591: GO 32610
// PrepareHuman ( false , i , skill ) ;
32593: LD_INT 0
32595: PPUSH
32596: LD_VAR 0 8
32600: PPUSH
32601: LD_VAR 0 4
32605: PPUSH
32606: CALL_OW 380
// un := CreateHuman ;
32610: LD_ADDR_VAR 0 14
32614: PUSH
32615: CALL_OW 44
32619: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32620: LD_ADDR_VAR 0 7
32624: PUSH
32625: LD_VAR 0 7
32629: PPUSH
32630: LD_INT 1
32632: PPUSH
32633: LD_VAR 0 14
32637: PPUSH
32638: CALL_OW 2
32642: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32643: LD_VAR 0 14
32647: PPUSH
32648: LD_VAR 0 9
32652: PPUSH
32653: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32657: LD_VAR 0 9
32661: PPUSH
32662: CALL_OW 313
32666: PUSH
32667: LD_INT 6
32669: EQUAL
32670: PUSH
32671: LD_VAR 0 9
32675: PPUSH
32676: CALL_OW 266
32680: PUSH
32681: LD_INT 32
32683: PUSH
32684: LD_INT 31
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: IN
32691: OR
32692: IFFALSE 32506
32694: GO 32503
32696: POP
32697: POP
// end else
32698: GO 33080
// for j = 1 to x do
32700: LD_ADDR_VAR 0 9
32704: PUSH
32705: DOUBLE
32706: LD_INT 1
32708: DEC
32709: ST_TO_ADDR
32710: LD_VAR 0 13
32714: PUSH
32715: FOR_TO
32716: IFFALSE 33078
// begin InitHc ;
32718: CALL_OW 19
// if not f then
32722: LD_VAR 0 12
32726: NOT
32727: IFFALSE 32816
// begin PrepareHuman ( false , i , skill ) ;
32729: LD_INT 0
32731: PPUSH
32732: LD_VAR 0 8
32736: PPUSH
32737: LD_VAR 0 4
32741: PPUSH
32742: CALL_OW 380
// un := CreateHuman ;
32746: LD_ADDR_VAR 0 14
32750: PUSH
32751: CALL_OW 44
32755: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32756: LD_ADDR_VAR 0 7
32760: PUSH
32761: LD_VAR 0 7
32765: PPUSH
32766: LD_INT 1
32768: PPUSH
32769: LD_VAR 0 14
32773: PPUSH
32774: CALL_OW 2
32778: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32779: LD_VAR 0 14
32783: PPUSH
32784: LD_VAR 0 1
32788: PPUSH
32789: CALL_OW 250
32793: PPUSH
32794: LD_VAR 0 1
32798: PPUSH
32799: CALL_OW 251
32803: PPUSH
32804: LD_INT 10
32806: PPUSH
32807: LD_INT 0
32809: PPUSH
32810: CALL_OW 50
// continue ;
32814: GO 32715
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32816: LD_VAR 0 12
32820: PUSH
32821: LD_INT 1
32823: ARRAY
32824: PPUSH
32825: CALL_OW 313
32829: PUSH
32830: LD_VAR 0 12
32834: PUSH
32835: LD_INT 1
32837: ARRAY
32838: PPUSH
32839: CALL_OW 266
32843: PUSH
32844: LD_INT 32
32846: PUSH
32847: LD_INT 31
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: IN
32854: AND
32855: PUSH
32856: LD_VAR 0 12
32860: PUSH
32861: LD_INT 1
32863: ARRAY
32864: PPUSH
32865: CALL_OW 313
32869: PUSH
32870: LD_INT 6
32872: EQUAL
32873: OR
32874: IFFALSE 32894
// f := Delete ( f , 1 ) ;
32876: LD_ADDR_VAR 0 12
32880: PUSH
32881: LD_VAR 0 12
32885: PPUSH
32886: LD_INT 1
32888: PPUSH
32889: CALL_OW 3
32893: ST_TO_ADDR
// if not f then
32894: LD_VAR 0 12
32898: NOT
32899: IFFALSE 32917
// begin x := x + 2 ;
32901: LD_ADDR_VAR 0 13
32905: PUSH
32906: LD_VAR 0 13
32910: PUSH
32911: LD_INT 2
32913: PLUS
32914: ST_TO_ADDR
// continue ;
32915: GO 32715
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32917: LD_VAR 0 12
32921: PUSH
32922: LD_INT 1
32924: ARRAY
32925: PPUSH
32926: CALL_OW 266
32930: PUSH
32931: LD_INT 5
32933: EQUAL
32934: IFFALSE 33008
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32936: LD_VAR 0 12
32940: PUSH
32941: LD_INT 1
32943: ARRAY
32944: PPUSH
32945: CALL_OW 313
32949: PUSH
32950: LD_INT 3
32952: LESS
32953: IFFALSE 32989
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32955: LD_INT 0
32957: PPUSH
32958: LD_INT 5
32960: PUSH
32961: LD_INT 8
32963: PUSH
32964: LD_INT 9
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: PUSH
32972: LD_VAR 0 17
32976: ARRAY
32977: PPUSH
32978: LD_VAR 0 4
32982: PPUSH
32983: CALL_OW 380
32987: GO 33006
// PrepareHuman ( false , i , skill ) ;
32989: LD_INT 0
32991: PPUSH
32992: LD_VAR 0 8
32996: PPUSH
32997: LD_VAR 0 4
33001: PPUSH
33002: CALL_OW 380
// end else
33006: GO 33025
// PrepareHuman ( false , i , skill ) ;
33008: LD_INT 0
33010: PPUSH
33011: LD_VAR 0 8
33015: PPUSH
33016: LD_VAR 0 4
33020: PPUSH
33021: CALL_OW 380
// un := CreateHuman ;
33025: LD_ADDR_VAR 0 14
33029: PUSH
33030: CALL_OW 44
33034: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33035: LD_ADDR_VAR 0 7
33039: PUSH
33040: LD_VAR 0 7
33044: PPUSH
33045: LD_INT 1
33047: PPUSH
33048: LD_VAR 0 14
33052: PPUSH
33053: CALL_OW 2
33057: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33058: LD_VAR 0 14
33062: PPUSH
33063: LD_VAR 0 12
33067: PUSH
33068: LD_INT 1
33070: ARRAY
33071: PPUSH
33072: CALL_OW 52
// end ;
33076: GO 32715
33078: POP
33079: POP
// end ;
33080: GO 32017
33082: POP
33083: POP
// result := result ^ buildings ;
33084: LD_ADDR_VAR 0 7
33088: PUSH
33089: LD_VAR 0 7
33093: PUSH
33094: LD_VAR 0 18
33098: ADD
33099: ST_TO_ADDR
// end else
33100: GO 33243
// begin for i = 1 to personel do
33102: LD_ADDR_VAR 0 8
33106: PUSH
33107: DOUBLE
33108: LD_INT 1
33110: DEC
33111: ST_TO_ADDR
33112: LD_VAR 0 6
33116: PUSH
33117: FOR_TO
33118: IFFALSE 33241
// begin if i > 4 then
33120: LD_VAR 0 8
33124: PUSH
33125: LD_INT 4
33127: GREATER
33128: IFFALSE 33132
// break ;
33130: GO 33241
// x := personel [ i ] ;
33132: LD_ADDR_VAR 0 13
33136: PUSH
33137: LD_VAR 0 6
33141: PUSH
33142: LD_VAR 0 8
33146: ARRAY
33147: ST_TO_ADDR
// if x = - 1 then
33148: LD_VAR 0 13
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: EQUAL
33157: IFFALSE 33161
// continue ;
33159: GO 33117
// PrepareHuman ( false , i , skill ) ;
33161: LD_INT 0
33163: PPUSH
33164: LD_VAR 0 8
33168: PPUSH
33169: LD_VAR 0 4
33173: PPUSH
33174: CALL_OW 380
// un := CreateHuman ;
33178: LD_ADDR_VAR 0 14
33182: PUSH
33183: CALL_OW 44
33187: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33188: LD_VAR 0 14
33192: PPUSH
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL_OW 250
33202: PPUSH
33203: LD_VAR 0 1
33207: PPUSH
33208: CALL_OW 251
33212: PPUSH
33213: LD_INT 10
33215: PPUSH
33216: LD_INT 0
33218: PPUSH
33219: CALL_OW 50
// result := result ^ un ;
33223: LD_ADDR_VAR 0 7
33227: PUSH
33228: LD_VAR 0 7
33232: PUSH
33233: LD_VAR 0 14
33237: ADD
33238: ST_TO_ADDR
// end ;
33239: GO 33117
33241: POP
33242: POP
// end ; end ;
33243: LD_VAR 0 7
33247: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33248: LD_INT 0
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
33254: PPUSH
33255: PPUSH
33256: PPUSH
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
33261: PPUSH
33262: PPUSH
33263: PPUSH
33264: PPUSH
33265: PPUSH
// result := false ;
33266: LD_ADDR_VAR 0 3
33270: PUSH
33271: LD_INT 0
33273: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33274: LD_VAR 0 1
33278: NOT
33279: PUSH
33280: LD_VAR 0 1
33284: PPUSH
33285: CALL_OW 266
33289: PUSH
33290: LD_INT 32
33292: PUSH
33293: LD_INT 33
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: IN
33300: NOT
33301: OR
33302: IFFALSE 33306
// exit ;
33304: GO 34442
// nat := GetNation ( tower ) ;
33306: LD_ADDR_VAR 0 12
33310: PUSH
33311: LD_VAR 0 1
33315: PPUSH
33316: CALL_OW 248
33320: ST_TO_ADDR
// side := GetSide ( tower ) ;
33321: LD_ADDR_VAR 0 16
33325: PUSH
33326: LD_VAR 0 1
33330: PPUSH
33331: CALL_OW 255
33335: ST_TO_ADDR
// x := GetX ( tower ) ;
33336: LD_ADDR_VAR 0 10
33340: PUSH
33341: LD_VAR 0 1
33345: PPUSH
33346: CALL_OW 250
33350: ST_TO_ADDR
// y := GetY ( tower ) ;
33351: LD_ADDR_VAR 0 11
33355: PUSH
33356: LD_VAR 0 1
33360: PPUSH
33361: CALL_OW 251
33365: ST_TO_ADDR
// if not x or not y then
33366: LD_VAR 0 10
33370: NOT
33371: PUSH
33372: LD_VAR 0 11
33376: NOT
33377: OR
33378: IFFALSE 33382
// exit ;
33380: GO 34442
// weapon := 0 ;
33382: LD_ADDR_VAR 0 18
33386: PUSH
33387: LD_INT 0
33389: ST_TO_ADDR
// fac_list := [ ] ;
33390: LD_ADDR_VAR 0 17
33394: PUSH
33395: EMPTY
33396: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
33397: LD_ADDR_VAR 0 6
33401: PUSH
33402: LD_VAR 0 1
33406: PPUSH
33407: CALL_OW 274
33411: PPUSH
33412: LD_VAR 0 2
33416: PPUSH
33417: CALL 31020 0 2
33421: PPUSH
33422: LD_INT 30
33424: PUSH
33425: LD_INT 3
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PPUSH
33432: CALL_OW 72
33436: ST_TO_ADDR
// if not factories then
33437: LD_VAR 0 6
33441: NOT
33442: IFFALSE 33446
// exit ;
33444: GO 34442
// for i in factories do
33446: LD_ADDR_VAR 0 8
33450: PUSH
33451: LD_VAR 0 6
33455: PUSH
33456: FOR_IN
33457: IFFALSE 33482
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33459: LD_ADDR_VAR 0 17
33463: PUSH
33464: LD_VAR 0 17
33468: PUSH
33469: LD_VAR 0 8
33473: PPUSH
33474: CALL_OW 478
33478: UNION
33479: ST_TO_ADDR
33480: GO 33456
33482: POP
33483: POP
// if not fac_list then
33484: LD_VAR 0 17
33488: NOT
33489: IFFALSE 33493
// exit ;
33491: GO 34442
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33493: LD_ADDR_VAR 0 5
33497: PUSH
33498: LD_INT 4
33500: PUSH
33501: LD_INT 5
33503: PUSH
33504: LD_INT 9
33506: PUSH
33507: LD_INT 10
33509: PUSH
33510: LD_INT 6
33512: PUSH
33513: LD_INT 7
33515: PUSH
33516: LD_INT 11
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 27
33530: PUSH
33531: LD_INT 28
33533: PUSH
33534: LD_INT 26
33536: PUSH
33537: LD_INT 30
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 43
33548: PUSH
33549: LD_INT 44
33551: PUSH
33552: LD_INT 46
33554: PUSH
33555: LD_INT 45
33557: PUSH
33558: LD_INT 47
33560: PUSH
33561: LD_INT 49
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: LIST
33576: PUSH
33577: LD_VAR 0 12
33581: ARRAY
33582: ST_TO_ADDR
// for i in list do
33583: LD_ADDR_VAR 0 8
33587: PUSH
33588: LD_VAR 0 5
33592: PUSH
33593: FOR_IN
33594: IFFALSE 33627
// if not i in fac_list then
33596: LD_VAR 0 8
33600: PUSH
33601: LD_VAR 0 17
33605: IN
33606: NOT
33607: IFFALSE 33625
// list := list diff i ;
33609: LD_ADDR_VAR 0 5
33613: PUSH
33614: LD_VAR 0 5
33618: PUSH
33619: LD_VAR 0 8
33623: DIFF
33624: ST_TO_ADDR
33625: GO 33593
33627: POP
33628: POP
// if not list then
33629: LD_VAR 0 5
33633: NOT
33634: IFFALSE 33638
// exit ;
33636: GO 34442
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33638: LD_VAR 0 12
33642: PUSH
33643: LD_INT 3
33645: EQUAL
33646: PUSH
33647: LD_INT 49
33649: PUSH
33650: LD_VAR 0 5
33654: IN
33655: AND
33656: PUSH
33657: LD_INT 31
33659: PPUSH
33660: LD_VAR 0 16
33664: PPUSH
33665: CALL_OW 321
33669: PUSH
33670: LD_INT 2
33672: EQUAL
33673: AND
33674: IFFALSE 33734
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33676: LD_INT 22
33678: PUSH
33679: LD_VAR 0 16
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 35
33690: PUSH
33691: LD_INT 49
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 91
33700: PUSH
33701: LD_VAR 0 1
33705: PUSH
33706: LD_INT 10
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: LIST
33718: PPUSH
33719: CALL_OW 69
33723: NOT
33724: IFFALSE 33734
// weapon := ru_time_lapser ;
33726: LD_ADDR_VAR 0 18
33730: PUSH
33731: LD_INT 49
33733: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33734: LD_VAR 0 12
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: IN
33749: PUSH
33750: LD_INT 11
33752: PUSH
33753: LD_VAR 0 5
33757: IN
33758: PUSH
33759: LD_INT 30
33761: PUSH
33762: LD_VAR 0 5
33766: IN
33767: OR
33768: AND
33769: PUSH
33770: LD_INT 6
33772: PPUSH
33773: LD_VAR 0 16
33777: PPUSH
33778: CALL_OW 321
33782: PUSH
33783: LD_INT 2
33785: EQUAL
33786: AND
33787: IFFALSE 33952
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33789: LD_INT 22
33791: PUSH
33792: LD_VAR 0 16
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 35
33806: PUSH
33807: LD_INT 11
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 35
33816: PUSH
33817: LD_INT 30
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 91
33831: PUSH
33832: LD_VAR 0 1
33836: PUSH
33837: LD_INT 18
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: LIST
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: PPUSH
33850: CALL_OW 69
33854: NOT
33855: PUSH
33856: LD_INT 22
33858: PUSH
33859: LD_VAR 0 16
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 30
33873: PUSH
33874: LD_INT 32
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 30
33883: PUSH
33884: LD_INT 33
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 91
33898: PUSH
33899: LD_VAR 0 1
33903: PUSH
33904: LD_INT 12
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: LIST
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: LIST
33916: PUSH
33917: EMPTY
33918: LIST
33919: PPUSH
33920: CALL_OW 69
33924: PUSH
33925: LD_INT 2
33927: GREATER
33928: AND
33929: IFFALSE 33952
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33931: LD_ADDR_VAR 0 18
33935: PUSH
33936: LD_INT 11
33938: PUSH
33939: LD_INT 30
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_VAR 0 12
33950: ARRAY
33951: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33952: LD_VAR 0 18
33956: NOT
33957: PUSH
33958: LD_INT 40
33960: PPUSH
33961: LD_VAR 0 16
33965: PPUSH
33966: CALL_OW 321
33970: PUSH
33971: LD_INT 2
33973: EQUAL
33974: AND
33975: PUSH
33976: LD_INT 7
33978: PUSH
33979: LD_VAR 0 5
33983: IN
33984: PUSH
33985: LD_INT 28
33987: PUSH
33988: LD_VAR 0 5
33992: IN
33993: OR
33994: PUSH
33995: LD_INT 45
33997: PUSH
33998: LD_VAR 0 5
34002: IN
34003: OR
34004: AND
34005: IFFALSE 34259
// begin hex := GetHexInfo ( x , y ) ;
34007: LD_ADDR_VAR 0 4
34011: PUSH
34012: LD_VAR 0 10
34016: PPUSH
34017: LD_VAR 0 11
34021: PPUSH
34022: CALL_OW 546
34026: ST_TO_ADDR
// if hex [ 1 ] then
34027: LD_VAR 0 4
34031: PUSH
34032: LD_INT 1
34034: ARRAY
34035: IFFALSE 34039
// exit ;
34037: GO 34442
// height := hex [ 2 ] ;
34039: LD_ADDR_VAR 0 15
34043: PUSH
34044: LD_VAR 0 4
34048: PUSH
34049: LD_INT 2
34051: ARRAY
34052: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34053: LD_ADDR_VAR 0 14
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: LD_INT 3
34066: PUSH
34067: LD_INT 5
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: ST_TO_ADDR
// for i in tmp do
34076: LD_ADDR_VAR 0 8
34080: PUSH
34081: LD_VAR 0 14
34085: PUSH
34086: FOR_IN
34087: IFFALSE 34257
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34089: LD_ADDR_VAR 0 9
34093: PUSH
34094: LD_VAR 0 10
34098: PPUSH
34099: LD_VAR 0 8
34103: PPUSH
34104: LD_INT 5
34106: PPUSH
34107: CALL_OW 272
34111: PUSH
34112: LD_VAR 0 11
34116: PPUSH
34117: LD_VAR 0 8
34121: PPUSH
34122: LD_INT 5
34124: PPUSH
34125: CALL_OW 273
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34134: LD_VAR 0 9
34138: PUSH
34139: LD_INT 1
34141: ARRAY
34142: PPUSH
34143: LD_VAR 0 9
34147: PUSH
34148: LD_INT 2
34150: ARRAY
34151: PPUSH
34152: CALL_OW 488
34156: IFFALSE 34255
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34158: LD_ADDR_VAR 0 4
34162: PUSH
34163: LD_VAR 0 9
34167: PUSH
34168: LD_INT 1
34170: ARRAY
34171: PPUSH
34172: LD_VAR 0 9
34176: PUSH
34177: LD_INT 2
34179: ARRAY
34180: PPUSH
34181: CALL_OW 546
34185: ST_TO_ADDR
// if hex [ 1 ] then
34186: LD_VAR 0 4
34190: PUSH
34191: LD_INT 1
34193: ARRAY
34194: IFFALSE 34198
// continue ;
34196: GO 34086
// h := hex [ 2 ] ;
34198: LD_ADDR_VAR 0 13
34202: PUSH
34203: LD_VAR 0 4
34207: PUSH
34208: LD_INT 2
34210: ARRAY
34211: ST_TO_ADDR
// if h + 7 < height then
34212: LD_VAR 0 13
34216: PUSH
34217: LD_INT 7
34219: PLUS
34220: PUSH
34221: LD_VAR 0 15
34225: LESS
34226: IFFALSE 34255
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34228: LD_ADDR_VAR 0 18
34232: PUSH
34233: LD_INT 7
34235: PUSH
34236: LD_INT 28
34238: PUSH
34239: LD_INT 45
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: LIST
34246: PUSH
34247: LD_VAR 0 12
34251: ARRAY
34252: ST_TO_ADDR
// break ;
34253: GO 34257
// end ; end ; end ;
34255: GO 34086
34257: POP
34258: POP
// end ; if not weapon then
34259: LD_VAR 0 18
34263: NOT
34264: IFFALSE 34324
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34266: LD_ADDR_VAR 0 5
34270: PUSH
34271: LD_VAR 0 5
34275: PUSH
34276: LD_INT 11
34278: PUSH
34279: LD_INT 30
34281: PUSH
34282: LD_INT 49
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: DIFF
34290: ST_TO_ADDR
// if not list then
34291: LD_VAR 0 5
34295: NOT
34296: IFFALSE 34300
// exit ;
34298: GO 34442
// weapon := list [ rand ( 1 , list ) ] ;
34300: LD_ADDR_VAR 0 18
34304: PUSH
34305: LD_VAR 0 5
34309: PUSH
34310: LD_INT 1
34312: PPUSH
34313: LD_VAR 0 5
34317: PPUSH
34318: CALL_OW 12
34322: ARRAY
34323: ST_TO_ADDR
// end ; if weapon then
34324: LD_VAR 0 18
34328: IFFALSE 34442
// begin tmp := CostOfWeapon ( weapon ) ;
34330: LD_ADDR_VAR 0 14
34334: PUSH
34335: LD_VAR 0 18
34339: PPUSH
34340: CALL_OW 451
34344: ST_TO_ADDR
// j := GetBase ( tower ) ;
34345: LD_ADDR_VAR 0 9
34349: PUSH
34350: LD_VAR 0 1
34354: PPUSH
34355: CALL_OW 274
34359: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34360: LD_VAR 0 9
34364: PPUSH
34365: LD_INT 1
34367: PPUSH
34368: CALL_OW 275
34372: PUSH
34373: LD_VAR 0 14
34377: PUSH
34378: LD_INT 1
34380: ARRAY
34381: GREATEREQUAL
34382: PUSH
34383: LD_VAR 0 9
34387: PPUSH
34388: LD_INT 2
34390: PPUSH
34391: CALL_OW 275
34395: PUSH
34396: LD_VAR 0 14
34400: PUSH
34401: LD_INT 2
34403: ARRAY
34404: GREATEREQUAL
34405: AND
34406: PUSH
34407: LD_VAR 0 9
34411: PPUSH
34412: LD_INT 3
34414: PPUSH
34415: CALL_OW 275
34419: PUSH
34420: LD_VAR 0 14
34424: PUSH
34425: LD_INT 3
34427: ARRAY
34428: GREATEREQUAL
34429: AND
34430: IFFALSE 34442
// result := weapon ;
34432: LD_ADDR_VAR 0 3
34436: PUSH
34437: LD_VAR 0 18
34441: ST_TO_ADDR
// end ; end ;
34442: LD_VAR 0 3
34446: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34447: LD_INT 0
34449: PPUSH
34450: PPUSH
// result := true ;
34451: LD_ADDR_VAR 0 3
34455: PUSH
34456: LD_INT 1
34458: ST_TO_ADDR
// if array1 = array2 then
34459: LD_VAR 0 1
34463: PUSH
34464: LD_VAR 0 2
34468: EQUAL
34469: IFFALSE 34529
// begin for i = 1 to array1 do
34471: LD_ADDR_VAR 0 4
34475: PUSH
34476: DOUBLE
34477: LD_INT 1
34479: DEC
34480: ST_TO_ADDR
34481: LD_VAR 0 1
34485: PUSH
34486: FOR_TO
34487: IFFALSE 34525
// if array1 [ i ] <> array2 [ i ] then
34489: LD_VAR 0 1
34493: PUSH
34494: LD_VAR 0 4
34498: ARRAY
34499: PUSH
34500: LD_VAR 0 2
34504: PUSH
34505: LD_VAR 0 4
34509: ARRAY
34510: NONEQUAL
34511: IFFALSE 34523
// begin result := false ;
34513: LD_ADDR_VAR 0 3
34517: PUSH
34518: LD_INT 0
34520: ST_TO_ADDR
// break ;
34521: GO 34525
// end ;
34523: GO 34486
34525: POP
34526: POP
// end else
34527: GO 34537
// result := false ;
34529: LD_ADDR_VAR 0 3
34533: PUSH
34534: LD_INT 0
34536: ST_TO_ADDR
// end ;
34537: LD_VAR 0 3
34541: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34542: LD_INT 0
34544: PPUSH
34545: PPUSH
34546: PPUSH
// pom := GetBase ( fac ) ;
34547: LD_ADDR_VAR 0 5
34551: PUSH
34552: LD_VAR 0 1
34556: PPUSH
34557: CALL_OW 274
34561: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34562: LD_ADDR_VAR 0 4
34566: PUSH
34567: LD_VAR 0 2
34571: PUSH
34572: LD_INT 1
34574: ARRAY
34575: PPUSH
34576: LD_VAR 0 2
34580: PUSH
34581: LD_INT 2
34583: ARRAY
34584: PPUSH
34585: LD_VAR 0 2
34589: PUSH
34590: LD_INT 3
34592: ARRAY
34593: PPUSH
34594: LD_VAR 0 2
34598: PUSH
34599: LD_INT 4
34601: ARRAY
34602: PPUSH
34603: CALL_OW 449
34607: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34608: LD_ADDR_VAR 0 3
34612: PUSH
34613: LD_VAR 0 5
34617: PPUSH
34618: LD_INT 1
34620: PPUSH
34621: CALL_OW 275
34625: PUSH
34626: LD_VAR 0 4
34630: PUSH
34631: LD_INT 1
34633: ARRAY
34634: GREATEREQUAL
34635: PUSH
34636: LD_VAR 0 5
34640: PPUSH
34641: LD_INT 2
34643: PPUSH
34644: CALL_OW 275
34648: PUSH
34649: LD_VAR 0 4
34653: PUSH
34654: LD_INT 2
34656: ARRAY
34657: GREATEREQUAL
34658: AND
34659: PUSH
34660: LD_VAR 0 5
34664: PPUSH
34665: LD_INT 3
34667: PPUSH
34668: CALL_OW 275
34672: PUSH
34673: LD_VAR 0 4
34677: PUSH
34678: LD_INT 3
34680: ARRAY
34681: GREATEREQUAL
34682: AND
34683: ST_TO_ADDR
// end ;
34684: LD_VAR 0 3
34688: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34689: LD_INT 0
34691: PPUSH
34692: PPUSH
34693: PPUSH
34694: PPUSH
// pom := GetBase ( building ) ;
34695: LD_ADDR_VAR 0 3
34699: PUSH
34700: LD_VAR 0 1
34704: PPUSH
34705: CALL_OW 274
34709: ST_TO_ADDR
// if not pom then
34710: LD_VAR 0 3
34714: NOT
34715: IFFALSE 34719
// exit ;
34717: GO 34889
// btype := GetBType ( building ) ;
34719: LD_ADDR_VAR 0 5
34723: PUSH
34724: LD_VAR 0 1
34728: PPUSH
34729: CALL_OW 266
34733: ST_TO_ADDR
// if btype = b_armoury then
34734: LD_VAR 0 5
34738: PUSH
34739: LD_INT 4
34741: EQUAL
34742: IFFALSE 34752
// btype := b_barracks ;
34744: LD_ADDR_VAR 0 5
34748: PUSH
34749: LD_INT 5
34751: ST_TO_ADDR
// if btype = b_depot then
34752: LD_VAR 0 5
34756: PUSH
34757: LD_INT 0
34759: EQUAL
34760: IFFALSE 34770
// btype := b_warehouse ;
34762: LD_ADDR_VAR 0 5
34766: PUSH
34767: LD_INT 1
34769: ST_TO_ADDR
// if btype = b_workshop then
34770: LD_VAR 0 5
34774: PUSH
34775: LD_INT 2
34777: EQUAL
34778: IFFALSE 34788
// btype := b_factory ;
34780: LD_ADDR_VAR 0 5
34784: PUSH
34785: LD_INT 3
34787: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34788: LD_ADDR_VAR 0 4
34792: PUSH
34793: LD_VAR 0 5
34797: PPUSH
34798: LD_VAR 0 1
34802: PPUSH
34803: CALL_OW 248
34807: PPUSH
34808: CALL_OW 450
34812: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34813: LD_ADDR_VAR 0 2
34817: PUSH
34818: LD_VAR 0 3
34822: PPUSH
34823: LD_INT 1
34825: PPUSH
34826: CALL_OW 275
34830: PUSH
34831: LD_VAR 0 4
34835: PUSH
34836: LD_INT 1
34838: ARRAY
34839: GREATEREQUAL
34840: PUSH
34841: LD_VAR 0 3
34845: PPUSH
34846: LD_INT 2
34848: PPUSH
34849: CALL_OW 275
34853: PUSH
34854: LD_VAR 0 4
34858: PUSH
34859: LD_INT 2
34861: ARRAY
34862: GREATEREQUAL
34863: AND
34864: PUSH
34865: LD_VAR 0 3
34869: PPUSH
34870: LD_INT 3
34872: PPUSH
34873: CALL_OW 275
34877: PUSH
34878: LD_VAR 0 4
34882: PUSH
34883: LD_INT 3
34885: ARRAY
34886: GREATEREQUAL
34887: AND
34888: ST_TO_ADDR
// end ;
34889: LD_VAR 0 2
34893: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34894: LD_INT 0
34896: PPUSH
34897: PPUSH
34898: PPUSH
// pom := GetBase ( building ) ;
34899: LD_ADDR_VAR 0 4
34903: PUSH
34904: LD_VAR 0 1
34908: PPUSH
34909: CALL_OW 274
34913: ST_TO_ADDR
// if not pom then
34914: LD_VAR 0 4
34918: NOT
34919: IFFALSE 34923
// exit ;
34921: GO 35024
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34923: LD_ADDR_VAR 0 5
34927: PUSH
34928: LD_VAR 0 2
34932: PPUSH
34933: LD_VAR 0 1
34937: PPUSH
34938: CALL_OW 248
34942: PPUSH
34943: CALL_OW 450
34947: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34948: LD_ADDR_VAR 0 3
34952: PUSH
34953: LD_VAR 0 4
34957: PPUSH
34958: LD_INT 1
34960: PPUSH
34961: CALL_OW 275
34965: PUSH
34966: LD_VAR 0 5
34970: PUSH
34971: LD_INT 1
34973: ARRAY
34974: GREATEREQUAL
34975: PUSH
34976: LD_VAR 0 4
34980: PPUSH
34981: LD_INT 2
34983: PPUSH
34984: CALL_OW 275
34988: PUSH
34989: LD_VAR 0 5
34993: PUSH
34994: LD_INT 2
34996: ARRAY
34997: GREATEREQUAL
34998: AND
34999: PUSH
35000: LD_VAR 0 4
35004: PPUSH
35005: LD_INT 3
35007: PPUSH
35008: CALL_OW 275
35012: PUSH
35013: LD_VAR 0 5
35017: PUSH
35018: LD_INT 3
35020: ARRAY
35021: GREATEREQUAL
35022: AND
35023: ST_TO_ADDR
// end ;
35024: LD_VAR 0 3
35028: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
35029: LD_INT 0
35031: PPUSH
35032: PPUSH
35033: PPUSH
35034: PPUSH
35035: PPUSH
35036: PPUSH
35037: PPUSH
35038: PPUSH
35039: PPUSH
35040: PPUSH
// result := false ;
35041: LD_ADDR_VAR 0 6
35045: PUSH
35046: LD_INT 0
35048: ST_TO_ADDR
// if not base or not btype or not x or not y then
35049: LD_VAR 0 1
35053: NOT
35054: PUSH
35055: LD_VAR 0 2
35059: NOT
35060: OR
35061: PUSH
35062: LD_VAR 0 3
35066: NOT
35067: OR
35068: PUSH
35069: LD_VAR 0 4
35073: NOT
35074: OR
35075: IFFALSE 35079
// exit ;
35077: GO 35688
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
35079: LD_ADDR_VAR 0 12
35083: PUSH
35084: LD_VAR 0 2
35088: PPUSH
35089: LD_VAR 0 3
35093: PPUSH
35094: LD_VAR 0 4
35098: PPUSH
35099: LD_VAR 0 5
35103: PPUSH
35104: LD_VAR 0 1
35108: PUSH
35109: LD_INT 1
35111: ARRAY
35112: PPUSH
35113: CALL_OW 248
35117: PPUSH
35118: LD_INT 0
35120: PPUSH
35121: CALL 36525 0 6
35125: ST_TO_ADDR
// if not hexes then
35126: LD_VAR 0 12
35130: NOT
35131: IFFALSE 35135
// exit ;
35133: GO 35688
// for i = 1 to hexes do
35135: LD_ADDR_VAR 0 7
35139: PUSH
35140: DOUBLE
35141: LD_INT 1
35143: DEC
35144: ST_TO_ADDR
35145: LD_VAR 0 12
35149: PUSH
35150: FOR_TO
35151: IFFALSE 35686
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35153: LD_ADDR_VAR 0 11
35157: PUSH
35158: LD_VAR 0 12
35162: PUSH
35163: LD_VAR 0 7
35167: ARRAY
35168: PUSH
35169: LD_INT 1
35171: ARRAY
35172: PPUSH
35173: LD_VAR 0 12
35177: PUSH
35178: LD_VAR 0 7
35182: ARRAY
35183: PUSH
35184: LD_INT 2
35186: ARRAY
35187: PPUSH
35188: CALL_OW 428
35192: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35193: LD_VAR 0 12
35197: PUSH
35198: LD_VAR 0 7
35202: ARRAY
35203: PUSH
35204: LD_INT 1
35206: ARRAY
35207: PPUSH
35208: LD_VAR 0 12
35212: PUSH
35213: LD_VAR 0 7
35217: ARRAY
35218: PUSH
35219: LD_INT 2
35221: ARRAY
35222: PPUSH
35223: CALL_OW 351
35227: PUSH
35228: LD_VAR 0 12
35232: PUSH
35233: LD_VAR 0 7
35237: ARRAY
35238: PUSH
35239: LD_INT 1
35241: ARRAY
35242: PPUSH
35243: LD_VAR 0 12
35247: PUSH
35248: LD_VAR 0 7
35252: ARRAY
35253: PUSH
35254: LD_INT 2
35256: ARRAY
35257: PPUSH
35258: CALL_OW 488
35262: NOT
35263: OR
35264: PUSH
35265: LD_VAR 0 11
35269: PPUSH
35270: CALL_OW 247
35274: PUSH
35275: LD_INT 3
35277: EQUAL
35278: OR
35279: IFFALSE 35285
// exit ;
35281: POP
35282: POP
35283: GO 35688
// if not tmp or not tmp in base then
35285: LD_VAR 0 11
35289: NOT
35290: PUSH
35291: LD_VAR 0 11
35295: PUSH
35296: LD_VAR 0 1
35300: IN
35301: NOT
35302: OR
35303: IFFALSE 35307
// continue ;
35305: GO 35150
// result := true ;
35307: LD_ADDR_VAR 0 6
35311: PUSH
35312: LD_INT 1
35314: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35315: LD_ADDR_VAR 0 15
35319: PUSH
35320: LD_VAR 0 1
35324: PPUSH
35325: LD_INT 22
35327: PUSH
35328: LD_VAR 0 11
35332: PPUSH
35333: CALL_OW 255
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: LD_INT 30
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 30
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PPUSH
35374: CALL_OW 72
35378: ST_TO_ADDR
// if dep then
35379: LD_VAR 0 15
35383: IFFALSE 35519
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35385: LD_ADDR_VAR 0 14
35389: PUSH
35390: LD_VAR 0 15
35394: PUSH
35395: LD_INT 1
35397: ARRAY
35398: PPUSH
35399: CALL_OW 250
35403: PPUSH
35404: LD_VAR 0 15
35408: PUSH
35409: LD_INT 1
35411: ARRAY
35412: PPUSH
35413: CALL_OW 254
35417: PPUSH
35418: LD_INT 5
35420: PPUSH
35421: CALL_OW 272
35425: PUSH
35426: LD_VAR 0 15
35430: PUSH
35431: LD_INT 1
35433: ARRAY
35434: PPUSH
35435: CALL_OW 251
35439: PPUSH
35440: LD_VAR 0 15
35444: PUSH
35445: LD_INT 1
35447: ARRAY
35448: PPUSH
35449: CALL_OW 254
35453: PPUSH
35454: LD_INT 5
35456: PPUSH
35457: CALL_OW 273
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35466: LD_VAR 0 14
35470: PUSH
35471: LD_INT 1
35473: ARRAY
35474: PPUSH
35475: LD_VAR 0 14
35479: PUSH
35480: LD_INT 2
35482: ARRAY
35483: PPUSH
35484: CALL_OW 488
35488: IFFALSE 35519
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35490: LD_VAR 0 11
35494: PPUSH
35495: LD_VAR 0 14
35499: PUSH
35500: LD_INT 1
35502: ARRAY
35503: PPUSH
35504: LD_VAR 0 14
35508: PUSH
35509: LD_INT 2
35511: ARRAY
35512: PPUSH
35513: CALL_OW 111
// continue ;
35517: GO 35150
// end ; end ; r := GetDir ( tmp ) ;
35519: LD_ADDR_VAR 0 13
35523: PUSH
35524: LD_VAR 0 11
35528: PPUSH
35529: CALL_OW 254
35533: ST_TO_ADDR
// if r = 5 then
35534: LD_VAR 0 13
35538: PUSH
35539: LD_INT 5
35541: EQUAL
35542: IFFALSE 35552
// r := 0 ;
35544: LD_ADDR_VAR 0 13
35548: PUSH
35549: LD_INT 0
35551: ST_TO_ADDR
// for j = r to 5 do
35552: LD_ADDR_VAR 0 8
35556: PUSH
35557: DOUBLE
35558: LD_VAR 0 13
35562: DEC
35563: ST_TO_ADDR
35564: LD_INT 5
35566: PUSH
35567: FOR_TO
35568: IFFALSE 35682
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35570: LD_ADDR_VAR 0 9
35574: PUSH
35575: LD_VAR 0 11
35579: PPUSH
35580: CALL_OW 250
35584: PPUSH
35585: LD_VAR 0 8
35589: PPUSH
35590: LD_INT 2
35592: PPUSH
35593: CALL_OW 272
35597: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35598: LD_ADDR_VAR 0 10
35602: PUSH
35603: LD_VAR 0 11
35607: PPUSH
35608: CALL_OW 251
35612: PPUSH
35613: LD_VAR 0 8
35617: PPUSH
35618: LD_INT 2
35620: PPUSH
35621: CALL_OW 273
35625: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35626: LD_VAR 0 9
35630: PPUSH
35631: LD_VAR 0 10
35635: PPUSH
35636: CALL_OW 488
35640: PUSH
35641: LD_VAR 0 9
35645: PPUSH
35646: LD_VAR 0 10
35650: PPUSH
35651: CALL_OW 428
35655: NOT
35656: AND
35657: IFFALSE 35680
// begin ComMoveXY ( tmp , _x , _y ) ;
35659: LD_VAR 0 11
35663: PPUSH
35664: LD_VAR 0 9
35668: PPUSH
35669: LD_VAR 0 10
35673: PPUSH
35674: CALL_OW 111
// break ;
35678: GO 35682
// end ; end ;
35680: GO 35567
35682: POP
35683: POP
// end ;
35684: GO 35150
35686: POP
35687: POP
// end ;
35688: LD_VAR 0 6
35692: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
35693: LD_INT 0
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
// result := false ;
35705: LD_ADDR_VAR 0 6
35709: PUSH
35710: LD_INT 0
35712: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35713: LD_VAR 0 1
35717: NOT
35718: PUSH
35719: LD_VAR 0 1
35723: PPUSH
35724: CALL_OW 266
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: IN
35739: NOT
35740: OR
35741: PUSH
35742: LD_VAR 0 2
35746: NOT
35747: OR
35748: PUSH
35749: LD_VAR 0 5
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: LD_INT 3
35765: PUSH
35766: LD_INT 4
35768: PUSH
35769: LD_INT 5
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: IN
35780: NOT
35781: OR
35782: PUSH
35783: LD_VAR 0 3
35787: PPUSH
35788: LD_VAR 0 4
35792: PPUSH
35793: CALL_OW 488
35797: NOT
35798: OR
35799: IFFALSE 35803
// exit ;
35801: GO 36520
// pom := GetBase ( depot ) ;
35803: LD_ADDR_VAR 0 10
35807: PUSH
35808: LD_VAR 0 1
35812: PPUSH
35813: CALL_OW 274
35817: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35818: LD_ADDR_VAR 0 11
35822: PUSH
35823: LD_VAR 0 2
35827: PPUSH
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL_OW 248
35837: PPUSH
35838: CALL_OW 450
35842: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35843: LD_VAR 0 10
35847: PPUSH
35848: LD_INT 1
35850: PPUSH
35851: CALL_OW 275
35855: PUSH
35856: LD_VAR 0 11
35860: PUSH
35861: LD_INT 1
35863: ARRAY
35864: GREATEREQUAL
35865: PUSH
35866: LD_VAR 0 10
35870: PPUSH
35871: LD_INT 2
35873: PPUSH
35874: CALL_OW 275
35878: PUSH
35879: LD_VAR 0 11
35883: PUSH
35884: LD_INT 2
35886: ARRAY
35887: GREATEREQUAL
35888: AND
35889: PUSH
35890: LD_VAR 0 10
35894: PPUSH
35895: LD_INT 3
35897: PPUSH
35898: CALL_OW 275
35902: PUSH
35903: LD_VAR 0 11
35907: PUSH
35908: LD_INT 3
35910: ARRAY
35911: GREATEREQUAL
35912: AND
35913: NOT
35914: IFFALSE 35918
// exit ;
35916: GO 36520
// if GetBType ( depot ) = b_depot then
35918: LD_VAR 0 1
35922: PPUSH
35923: CALL_OW 266
35927: PUSH
35928: LD_INT 0
35930: EQUAL
35931: IFFALSE 35943
// dist := 28 else
35933: LD_ADDR_VAR 0 14
35937: PUSH
35938: LD_INT 28
35940: ST_TO_ADDR
35941: GO 35951
// dist := 36 ;
35943: LD_ADDR_VAR 0 14
35947: PUSH
35948: LD_INT 36
35950: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35951: LD_VAR 0 1
35955: PPUSH
35956: LD_VAR 0 3
35960: PPUSH
35961: LD_VAR 0 4
35965: PPUSH
35966: CALL_OW 297
35970: PUSH
35971: LD_VAR 0 14
35975: GREATER
35976: IFFALSE 35980
// exit ;
35978: GO 36520
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35980: LD_ADDR_VAR 0 12
35984: PUSH
35985: LD_VAR 0 2
35989: PPUSH
35990: LD_VAR 0 3
35994: PPUSH
35995: LD_VAR 0 4
35999: PPUSH
36000: LD_VAR 0 5
36004: PPUSH
36005: LD_VAR 0 1
36009: PPUSH
36010: CALL_OW 248
36014: PPUSH
36015: LD_INT 0
36017: PPUSH
36018: CALL 36525 0 6
36022: ST_TO_ADDR
// if not hexes then
36023: LD_VAR 0 12
36027: NOT
36028: IFFALSE 36032
// exit ;
36030: GO 36520
// hex := GetHexInfo ( x , y ) ;
36032: LD_ADDR_VAR 0 15
36036: PUSH
36037: LD_VAR 0 3
36041: PPUSH
36042: LD_VAR 0 4
36046: PPUSH
36047: CALL_OW 546
36051: ST_TO_ADDR
// if hex [ 1 ] then
36052: LD_VAR 0 15
36056: PUSH
36057: LD_INT 1
36059: ARRAY
36060: IFFALSE 36064
// exit ;
36062: GO 36520
// height := hex [ 2 ] ;
36064: LD_ADDR_VAR 0 13
36068: PUSH
36069: LD_VAR 0 15
36073: PUSH
36074: LD_INT 2
36076: ARRAY
36077: ST_TO_ADDR
// for i = 1 to hexes do
36078: LD_ADDR_VAR 0 7
36082: PUSH
36083: DOUBLE
36084: LD_INT 1
36086: DEC
36087: ST_TO_ADDR
36088: LD_VAR 0 12
36092: PUSH
36093: FOR_TO
36094: IFFALSE 36424
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36096: LD_VAR 0 12
36100: PUSH
36101: LD_VAR 0 7
36105: ARRAY
36106: PUSH
36107: LD_INT 1
36109: ARRAY
36110: PPUSH
36111: LD_VAR 0 12
36115: PUSH
36116: LD_VAR 0 7
36120: ARRAY
36121: PUSH
36122: LD_INT 2
36124: ARRAY
36125: PPUSH
36126: CALL_OW 488
36130: NOT
36131: PUSH
36132: LD_VAR 0 12
36136: PUSH
36137: LD_VAR 0 7
36141: ARRAY
36142: PUSH
36143: LD_INT 1
36145: ARRAY
36146: PPUSH
36147: LD_VAR 0 12
36151: PUSH
36152: LD_VAR 0 7
36156: ARRAY
36157: PUSH
36158: LD_INT 2
36160: ARRAY
36161: PPUSH
36162: CALL_OW 428
36166: PUSH
36167: LD_INT 0
36169: GREATER
36170: OR
36171: PUSH
36172: LD_VAR 0 12
36176: PUSH
36177: LD_VAR 0 7
36181: ARRAY
36182: PUSH
36183: LD_INT 1
36185: ARRAY
36186: PPUSH
36187: LD_VAR 0 12
36191: PUSH
36192: LD_VAR 0 7
36196: ARRAY
36197: PUSH
36198: LD_INT 2
36200: ARRAY
36201: PPUSH
36202: CALL_OW 351
36206: OR
36207: IFFALSE 36213
// exit ;
36209: POP
36210: POP
36211: GO 36520
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36213: LD_ADDR_VAR 0 8
36217: PUSH
36218: LD_VAR 0 12
36222: PUSH
36223: LD_VAR 0 7
36227: ARRAY
36228: PUSH
36229: LD_INT 1
36231: ARRAY
36232: PPUSH
36233: LD_VAR 0 12
36237: PUSH
36238: LD_VAR 0 7
36242: ARRAY
36243: PUSH
36244: LD_INT 2
36246: ARRAY
36247: PPUSH
36248: CALL_OW 546
36252: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36253: LD_VAR 0 8
36257: PUSH
36258: LD_INT 1
36260: ARRAY
36261: PUSH
36262: LD_VAR 0 8
36266: PUSH
36267: LD_INT 2
36269: ARRAY
36270: PUSH
36271: LD_VAR 0 13
36275: PUSH
36276: LD_INT 2
36278: PLUS
36279: GREATER
36280: OR
36281: PUSH
36282: LD_VAR 0 8
36286: PUSH
36287: LD_INT 2
36289: ARRAY
36290: PUSH
36291: LD_VAR 0 13
36295: PUSH
36296: LD_INT 2
36298: MINUS
36299: LESS
36300: OR
36301: PUSH
36302: LD_VAR 0 8
36306: PUSH
36307: LD_INT 3
36309: ARRAY
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: LD_INT 8
36316: PUSH
36317: LD_INT 9
36319: PUSH
36320: LD_INT 10
36322: PUSH
36323: LD_INT 11
36325: PUSH
36326: LD_INT 12
36328: PUSH
36329: LD_INT 13
36331: PUSH
36332: LD_INT 16
36334: PUSH
36335: LD_INT 17
36337: PUSH
36338: LD_INT 18
36340: PUSH
36341: LD_INT 19
36343: PUSH
36344: LD_INT 20
36346: PUSH
36347: LD_INT 21
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: IN
36365: NOT
36366: OR
36367: PUSH
36368: LD_VAR 0 8
36372: PUSH
36373: LD_INT 5
36375: ARRAY
36376: NOT
36377: OR
36378: PUSH
36379: LD_VAR 0 8
36383: PUSH
36384: LD_INT 6
36386: ARRAY
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: LD_INT 7
36396: PUSH
36397: LD_INT 9
36399: PUSH
36400: LD_INT 10
36402: PUSH
36403: LD_INT 11
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: IN
36414: NOT
36415: OR
36416: IFFALSE 36422
// exit ;
36418: POP
36419: POP
36420: GO 36520
// end ;
36422: GO 36093
36424: POP
36425: POP
// side := GetSide ( depot ) ;
36426: LD_ADDR_VAR 0 9
36430: PUSH
36431: LD_VAR 0 1
36435: PPUSH
36436: CALL_OW 255
36440: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36441: LD_VAR 0 9
36445: PPUSH
36446: LD_VAR 0 3
36450: PPUSH
36451: LD_VAR 0 4
36455: PPUSH
36456: LD_INT 20
36458: PPUSH
36459: CALL 29174 0 4
36463: PUSH
36464: LD_INT 4
36466: ARRAY
36467: IFFALSE 36471
// exit ;
36469: GO 36520
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36471: LD_VAR 0 2
36475: PUSH
36476: LD_INT 29
36478: PUSH
36479: LD_INT 30
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: IN
36486: PUSH
36487: LD_VAR 0 3
36491: PPUSH
36492: LD_VAR 0 4
36496: PPUSH
36497: LD_VAR 0 9
36501: PPUSH
36502: CALL_OW 440
36506: NOT
36507: AND
36508: IFFALSE 36512
// exit ;
36510: GO 36520
// result := true ;
36512: LD_ADDR_VAR 0 6
36516: PUSH
36517: LD_INT 1
36519: ST_TO_ADDR
// end ;
36520: LD_VAR 0 6
36524: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
36525: LD_INT 0
36527: PPUSH
36528: PPUSH
36529: PPUSH
36530: PPUSH
36531: PPUSH
36532: PPUSH
36533: PPUSH
36534: PPUSH
36535: PPUSH
36536: PPUSH
36537: PPUSH
36538: PPUSH
36539: PPUSH
36540: PPUSH
36541: PPUSH
36542: PPUSH
36543: PPUSH
36544: PPUSH
36545: PPUSH
36546: PPUSH
36547: PPUSH
36548: PPUSH
36549: PPUSH
36550: PPUSH
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
36556: PPUSH
36557: PPUSH
36558: PPUSH
36559: PPUSH
36560: PPUSH
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
36565: PPUSH
36566: PPUSH
36567: PPUSH
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
36576: PPUSH
36577: PPUSH
36578: PPUSH
36579: PPUSH
36580: PPUSH
36581: PPUSH
36582: PPUSH
36583: PPUSH
36584: PPUSH
// result = [ ] ;
36585: LD_ADDR_VAR 0 7
36589: PUSH
36590: EMPTY
36591: ST_TO_ADDR
// temp_list = [ ] ;
36592: LD_ADDR_VAR 0 9
36596: PUSH
36597: EMPTY
36598: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36599: LD_VAR 0 4
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: LD_INT 3
36615: PUSH
36616: LD_INT 4
36618: PUSH
36619: LD_INT 5
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: IN
36630: NOT
36631: PUSH
36632: LD_VAR 0 1
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: IN
36647: PUSH
36648: LD_VAR 0 5
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: LD_INT 3
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: IN
36667: NOT
36668: AND
36669: OR
36670: IFFALSE 36674
// exit ;
36672: GO 55065
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36674: LD_VAR 0 1
36678: PUSH
36679: LD_INT 6
36681: PUSH
36682: LD_INT 7
36684: PUSH
36685: LD_INT 8
36687: PUSH
36688: LD_INT 13
36690: PUSH
36691: LD_INT 12
36693: PUSH
36694: LD_INT 15
36696: PUSH
36697: LD_INT 11
36699: PUSH
36700: LD_INT 14
36702: PUSH
36703: LD_INT 10
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: IN
36717: IFFALSE 36727
// btype = b_lab ;
36719: LD_ADDR_VAR 0 1
36723: PUSH
36724: LD_INT 6
36726: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36727: LD_VAR 0 6
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: IN
36746: NOT
36747: PUSH
36748: LD_VAR 0 1
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: LD_INT 3
36764: PUSH
36765: LD_INT 6
36767: PUSH
36768: LD_INT 36
36770: PUSH
36771: LD_INT 4
36773: PUSH
36774: LD_INT 5
36776: PUSH
36777: LD_INT 31
36779: PUSH
36780: LD_INT 32
36782: PUSH
36783: LD_INT 33
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: IN
36799: NOT
36800: PUSH
36801: LD_VAR 0 6
36805: PUSH
36806: LD_INT 1
36808: EQUAL
36809: AND
36810: OR
36811: PUSH
36812: LD_VAR 0 1
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: LD_INT 3
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: IN
36827: NOT
36828: PUSH
36829: LD_VAR 0 6
36833: PUSH
36834: LD_INT 2
36836: EQUAL
36837: AND
36838: OR
36839: IFFALSE 36849
// mode = 0 ;
36841: LD_ADDR_VAR 0 6
36845: PUSH
36846: LD_INT 0
36848: ST_TO_ADDR
// case mode of 0 :
36849: LD_VAR 0 6
36853: PUSH
36854: LD_INT 0
36856: DOUBLE
36857: EQUAL
36858: IFTRUE 36862
36860: GO 48315
36862: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36863: LD_ADDR_VAR 0 11
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: LD_INT 1
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: LD_INT 2
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: LD_INT 2
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 2
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 3
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 3
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37056: LD_ADDR_VAR 0 12
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 2
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 3
37213: NEG
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 3
37224: NEG
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37252: LD_ADDR_VAR 0 13
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 2
37355: PUSH
37356: LD_INT 2
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: LD_INT 2
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 2
37375: NEG
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: LD_INT 3
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 3
37411: NEG
37412: PUSH
37413: LD_INT 2
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 3
37423: NEG
37424: PUSH
37425: LD_INT 3
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37451: LD_ADDR_VAR 0 14
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 2
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: LD_INT 3
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: LD_INT 3
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: LD_INT 2
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37647: LD_ADDR_VAR 0 15
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 2
37781: NEG
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 3
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 3
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37840: LD_ADDR_VAR 0 16
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 2
37975: NEG
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: LD_INT 2
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 3
37997: PUSH
37998: LD_INT 3
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: LD_INT 3
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38033: LD_ADDR_VAR 0 17
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 2
38209: NEG
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 2
38220: NEG
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: NEG
38233: PUSH
38234: LD_INT 2
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38263: LD_ADDR_VAR 0 18
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: NEG
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 2
38450: NEG
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: NEG
38463: PUSH
38464: LD_INT 2
38466: NEG
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38493: LD_ADDR_VAR 0 19
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: LD_INT 2
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 2
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: LD_INT 2
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38723: LD_ADDR_VAR 0 20
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: NEG
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: LD_INT 2
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 2
38899: NEG
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: LD_INT 2
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38953: LD_ADDR_VAR 0 21
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: LD_INT 2
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: LD_INT 1
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: LD_INT 2
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39183: LD_ADDR_VAR 0 22
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 1
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 2
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: LD_INT 2
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39413: LD_ADDR_VAR 0 23
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: NEG
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: NEG
39625: PUSH
39626: LD_INT 3
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 3
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 2
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39693: LD_ADDR_VAR 0 24
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 2
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: NEG
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 3
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39969: LD_ADDR_VAR 0 25
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: NEG
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: LD_INT 2
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 3
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 3
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: LD_INT 3
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40243: LD_ADDR_VAR 0 26
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 2
40454: PUSH
40455: LD_INT 3
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: LD_INT 3
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40519: LD_ADDR_VAR 0 27
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 2
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 2
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 2
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 3
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 3
40764: NEG
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40799: LD_ADDR_VAR 0 28
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: LD_INT 2
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 2
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: PUSH
40935: LD_INT 2
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: LD_INT 2
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: NEG
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: LD_INT 3
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: LD_INT 3
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 3
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 3
41046: NEG
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41081: LD_ADDR_VAR 0 29
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 2
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: NEG
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 2
41259: NEG
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: NEG
41272: PUSH
41273: LD_INT 3
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 3
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: LD_INT 3
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 3
41325: NEG
41326: PUSH
41327: LD_INT 2
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41360: LD_ADDR_VAR 0 30
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 2
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: LD_INT 3
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 3
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: LD_INT 3
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 2
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 3
41603: NEG
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41638: LD_ADDR_VAR 0 31
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 2
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: LD_INT 3
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 3
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 3
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 3
41881: NEG
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41916: LD_ADDR_VAR 0 32
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 2
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 3
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 3
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 3
42159: NEG
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42194: LD_ADDR_VAR 0 33
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: NEG
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: NEG
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 2
42384: NEG
42385: PUSH
42386: LD_INT 3
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 3
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 3
42438: NEG
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42473: LD_ADDR_VAR 0 34
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 2
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 2
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: LD_INT 3
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 3
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 3
42718: NEG
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42753: LD_ADDR_VAR 0 35
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42865: LD_ADDR_VAR 0 36
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42977: LD_ADDR_VAR 0 37
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43089: LD_ADDR_VAR 0 38
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43201: LD_ADDR_VAR 0 39
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43313: LD_ADDR_VAR 0 40
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43425: LD_ADDR_VAR 0 41
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 2
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 3
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 3
43668: PUSH
43669: LD_INT 3
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 3
43699: NEG
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 3
43710: NEG
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: NEG
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 3
43734: NEG
43735: PUSH
43736: LD_INT 3
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43775: LD_ADDR_VAR 0 42
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: NEG
43966: PUSH
43967: LD_INT 3
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 3
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 3
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 3
44011: PUSH
44012: LD_INT 2
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 3
44021: PUSH
44022: LD_INT 3
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 3
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 3
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 3
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 3
44072: NEG
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 3
44084: NEG
44085: PUSH
44086: LD_INT 3
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44125: LD_ADDR_VAR 0 43
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 3
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 3
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 3
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 3
44421: NEG
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 3
44432: NEG
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44473: LD_ADDR_VAR 0 44
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 3
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 3
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 3
44716: PUSH
44717: LD_INT 3
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 3
44747: NEG
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 3
44758: NEG
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 3
44770: NEG
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: LD_INT 3
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44823: LD_ADDR_VAR 0 45
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: LD_INT 3
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: LD_INT 3
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: LD_INT 3
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 3
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 3
45069: PUSH
45070: LD_INT 3
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 3
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 3
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 3
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 3
45120: NEG
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 3
45132: NEG
45133: PUSH
45134: LD_INT 3
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45173: LD_ADDR_VAR 0 46
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 3
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: LD_INT 3
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 3
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 3
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 3
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 3
45469: NEG
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 3
45480: NEG
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45521: LD_ADDR_VAR 0 47
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45672: LD_ADDR_VAR 0 48
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45819: LD_ADDR_VAR 0 49
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45963: LD_ADDR_VAR 0 50
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46107: LD_ADDR_VAR 0 51
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46254: LD_ADDR_VAR 0 52
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46405: LD_ADDR_VAR 0 53
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: LD_INT 2
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46635: LD_ADDR_VAR 0 54
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46865: LD_ADDR_VAR 0 55
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47095: LD_ADDR_VAR 0 56
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47325: LD_ADDR_VAR 0 57
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47555: LD_ADDR_VAR 0 58
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 2
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47785: LD_ADDR_VAR 0 59
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47873: LD_ADDR_VAR 0 60
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47961: LD_ADDR_VAR 0 61
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48049: LD_ADDR_VAR 0 62
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48137: LD_ADDR_VAR 0 63
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48225: LD_ADDR_VAR 0 64
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: ST_TO_ADDR
// end ; 1 :
48313: GO 54210
48315: LD_INT 1
48317: DOUBLE
48318: EQUAL
48319: IFTRUE 48323
48321: GO 50946
48323: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48324: LD_ADDR_VAR 0 11
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 3
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48368: LD_ADDR_VAR 0 12
48372: PUSH
48373: LD_INT 2
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 3
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: LIST
48408: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48409: LD_ADDR_VAR 0 13
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: LIST
48448: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48449: LD_ADDR_VAR 0 14
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 3
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48490: LD_ADDR_VAR 0 15
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 3
48508: NEG
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48534: LD_ADDR_VAR 0 16
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: LD_INT 3
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 3
48553: NEG
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 3
48565: NEG
48566: PUSH
48567: LD_INT 3
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48580: LD_ADDR_VAR 0 17
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 3
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: LD_INT 3
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48624: LD_ADDR_VAR 0 18
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48665: LD_ADDR_VAR 0 19
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 3
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: LD_INT 3
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: LIST
48704: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48705: LD_ADDR_VAR 0 20
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48746: LD_ADDR_VAR 0 21
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48790: LD_ADDR_VAR 0 22
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 3
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: NEG
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: LD_INT 3
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48836: LD_ADDR_VAR 0 23
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 3
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 4
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 3
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48880: LD_ADDR_VAR 0 24
48884: PUSH
48885: LD_INT 3
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 3
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 4
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48921: LD_ADDR_VAR 0 25
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 4
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 3
48948: PUSH
48949: LD_INT 4
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48961: LD_ADDR_VAR 0 26
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 3
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 4
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 3
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49002: LD_ADDR_VAR 0 27
49006: PUSH
49007: LD_INT 3
49009: NEG
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 3
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 4
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49046: LD_ADDR_VAR 0 28
49050: PUSH
49051: LD_INT 3
49053: NEG
49054: PUSH
49055: LD_INT 3
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 3
49065: NEG
49066: PUSH
49067: LD_INT 4
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 4
49077: NEG
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49092: LD_ADDR_VAR 0 29
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 3
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 3
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 4
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 4
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 3
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 5
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 5
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 4
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 6
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 6
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 5
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49247: LD_ADDR_VAR 0 30
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 3
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 3
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 4
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 4
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 4
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 5
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 5
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 5
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 6
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 6
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49390: LD_ADDR_VAR 0 31
49394: PUSH
49395: LD_INT 3
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 3
49407: PUSH
49408: LD_INT 3
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: LD_INT 3
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 4
49427: PUSH
49428: LD_INT 3
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 4
49437: PUSH
49438: LD_INT 4
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: LD_INT 4
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 5
49457: PUSH
49458: LD_INT 4
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 5
49467: PUSH
49468: LD_INT 5
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 4
49477: PUSH
49478: LD_INT 5
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 6
49487: PUSH
49488: LD_INT 5
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 6
49497: PUSH
49498: LD_INT 6
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 5
49507: PUSH
49508: LD_INT 6
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49529: LD_ADDR_VAR 0 32
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 3
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 4
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 4
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: LD_INT 3
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 5
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 5
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 4
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 6
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 6
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 5
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49672: LD_ADDR_VAR 0 33
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 3
49690: NEG
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 3
49713: NEG
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 4
49724: NEG
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 4
49735: NEG
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 4
49747: NEG
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 5
49758: NEG
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 5
49769: NEG
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 5
49781: NEG
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 6
49792: NEG
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 6
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49827: LD_ADDR_VAR 0 34
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: LD_INT 3
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 3
49846: NEG
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 3
49870: NEG
49871: PUSH
49872: LD_INT 4
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 4
49882: NEG
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 4
49894: NEG
49895: PUSH
49896: LD_INT 4
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 4
49906: NEG
49907: PUSH
49908: LD_INT 5
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 5
49918: NEG
49919: PUSH
49920: LD_INT 4
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 5
49930: NEG
49931: PUSH
49932: LD_INT 5
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 5
49942: NEG
49943: PUSH
49944: LD_INT 6
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 6
49954: NEG
49955: PUSH
49956: LD_INT 5
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 6
49966: NEG
49967: PUSH
49968: LD_INT 6
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49990: LD_ADDR_VAR 0 41
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 3
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50034: LD_ADDR_VAR 0 42
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50075: LD_ADDR_VAR 0 43
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50115: LD_ADDR_VAR 0 44
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 3
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: LIST
50155: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50156: LD_ADDR_VAR 0 45
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 3
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50200: LD_ADDR_VAR 0 46
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: LD_INT 3
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 3
50231: NEG
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: LIST
50245: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50246: LD_ADDR_VAR 0 47
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: LD_INT 3
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50279: LD_ADDR_VAR 0 48
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50310: LD_ADDR_VAR 0 49
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50339: LD_ADDR_VAR 0 50
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 3
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50368: LD_ADDR_VAR 0 51
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50399: LD_ADDR_VAR 0 52
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 3
50418: NEG
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50432: LD_ADDR_VAR 0 53
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50476: LD_ADDR_VAR 0 54
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: LIST
50516: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50517: LD_ADDR_VAR 0 55
50521: PUSH
50522: LD_INT 3
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 3
50534: PUSH
50535: LD_INT 3
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: LD_INT 3
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50557: LD_ADDR_VAR 0 56
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 2
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50598: LD_ADDR_VAR 0 57
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50642: LD_ADDR_VAR 0 58
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: LD_INT 3
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 3
50661: NEG
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 3
50673: NEG
50674: PUSH
50675: LD_INT 3
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: LIST
50687: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50688: LD_ADDR_VAR 0 59
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50732: LD_ADDR_VAR 0 60
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: LIST
50772: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50773: LD_ADDR_VAR 0 61
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50813: LD_ADDR_VAR 0 62
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: LIST
50853: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50854: LD_ADDR_VAR 0 63
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50898: LD_ADDR_VAR 0 64
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: LIST
50943: ST_TO_ADDR
// end ; 2 :
50944: GO 54210
50946: LD_INT 2
50948: DOUBLE
50949: EQUAL
50950: IFTRUE 50954
50952: GO 54209
50954: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50955: LD_ADDR_VAR 0 29
50959: PUSH
50960: LD_INT 4
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 4
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 5
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 5
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 4
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 3
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 5
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 4
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 4
51085: PUSH
51086: LD_INT 4
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: LD_INT 4
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 3
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 4
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: LD_INT 4
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 4
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 4
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 5
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 5
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 4
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: LD_INT 5
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 3
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 3
51238: NEG
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 3
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 3
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 4
51294: NEG
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 4
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 4
51317: NEG
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 4
51340: NEG
51341: PUSH
51342: LD_INT 4
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 4
51352: NEG
51353: PUSH
51354: LD_INT 5
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 3
51364: NEG
51365: PUSH
51366: LD_INT 4
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 3
51376: NEG
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 4
51388: NEG
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 5
51400: NEG
51401: PUSH
51402: LD_INT 4
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 5
51412: NEG
51413: PUSH
51414: LD_INT 5
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: LD_INT 5
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 5
51436: NEG
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51493: LD_ADDR_VAR 0 30
51497: PUSH
51498: LD_INT 4
51500: PUSH
51501: LD_INT 4
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 4
51510: PUSH
51511: LD_INT 3
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 5
51520: PUSH
51521: LD_INT 4
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 5
51530: PUSH
51531: LD_INT 5
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: LD_INT 5
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: PUSH
51551: LD_INT 4
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: LD_INT 3
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 5
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 3
51580: PUSH
51581: LD_INT 5
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 3
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 4
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 4
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 4
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 4
51683: NEG
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 4
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: NEG
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 4
51728: NEG
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 5
51739: NEG
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 5
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 5
51762: NEG
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 3
51785: NEG
51786: PUSH
51787: LD_INT 3
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 3
51797: NEG
51798: PUSH
51799: LD_INT 4
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 3
51833: NEG
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 4
51845: NEG
51846: PUSH
51847: LD_INT 3
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 4
51857: NEG
51858: PUSH
51859: LD_INT 4
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: LD_INT 4
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 4
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 4
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 5
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 4
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 3
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 4
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 5
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 3
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 5
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52040: LD_ADDR_VAR 0 31
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 4
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 3
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 4
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 5
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 5
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 4
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 5
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 3
52140: NEG
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: NEG
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 3
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 4
52196: NEG
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 4
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 4
52219: NEG
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 4
52242: NEG
52243: PUSH
52244: LD_INT 4
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 4
52254: NEG
52255: PUSH
52256: LD_INT 5
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: LD_INT 4
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 3
52278: NEG
52279: PUSH
52280: LD_INT 3
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 4
52290: NEG
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 5
52302: NEG
52303: PUSH
52304: LD_INT 4
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 5
52314: NEG
52315: PUSH
52316: LD_INT 5
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 3
52326: NEG
52327: PUSH
52328: LD_INT 5
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 5
52338: NEG
52339: PUSH
52340: LD_INT 3
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 3
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 4
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 3
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 4
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 4
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 4
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 4
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 5
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 5
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 4
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 3
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 5
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52590: LD_ADDR_VAR 0 32
52594: PUSH
52595: LD_INT 4
52597: NEG
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 4
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 3
52620: NEG
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: NEG
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 4
52642: NEG
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 5
52653: NEG
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 5
52664: NEG
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 5
52676: NEG
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 3
52688: NEG
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: NEG
52700: PUSH
52701: LD_INT 3
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 3
52711: NEG
52712: PUSH
52713: LD_INT 4
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 3
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: LD_INT 2
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 4
52759: NEG
52760: PUSH
52761: LD_INT 3
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 4
52771: NEG
52772: PUSH
52773: LD_INT 4
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: LD_INT 4
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 4
52795: NEG
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 4
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 5
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 4
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 3
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 3
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 4
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 5
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 3
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: LD_INT 5
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 4
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 4
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 4
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 4
53002: PUSH
53003: LD_INT 4
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 4
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 5
53022: PUSH
53023: LD_INT 4
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 5
53032: PUSH
53033: LD_INT 5
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 4
53042: PUSH
53043: LD_INT 5
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: LD_INT 4
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: PUSH
53063: LD_INT 3
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 5
53072: PUSH
53073: LD_INT 3
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: LD_INT 5
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53137: LD_ADDR_VAR 0 33
53141: PUSH
53142: LD_INT 4
53144: NEG
53145: PUSH
53146: LD_INT 4
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 4
53156: NEG
53157: PUSH
53158: LD_INT 5
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 3
53168: NEG
53169: PUSH
53170: LD_INT 4
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 4
53192: NEG
53193: PUSH
53194: LD_INT 3
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 5
53204: NEG
53205: PUSH
53206: LD_INT 4
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 5
53216: NEG
53217: PUSH
53218: LD_INT 5
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 3
53228: NEG
53229: PUSH
53230: LD_INT 5
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 5
53240: NEG
53241: PUSH
53242: LD_INT 3
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 3
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 4
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: LD_INT 4
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 4
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 4
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 4
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 5
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 5
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 4
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 3
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 5
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: LD_INT 3
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 4
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 4
53477: PUSH
53478: LD_INT 4
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: LD_INT 4
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 4
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: LD_INT 4
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 4
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 4
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 5
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 5
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 4
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 5
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53675: LD_ADDR_VAR 0 34
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 4
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 5
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 4
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 3
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 4
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 5
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: LD_INT 5
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 4
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 4
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 4
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: LD_INT 4
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 4
53887: PUSH
53888: LD_INT 3
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 5
53897: PUSH
53898: LD_INT 4
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 5
53907: PUSH
53908: LD_INT 5
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 4
53917: PUSH
53918: LD_INT 5
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: PUSH
53928: LD_INT 4
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 5
53947: PUSH
53948: LD_INT 3
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: LD_INT 5
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 4
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 4
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: LD_INT 3
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: LD_INT 4
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 4
54060: NEG
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 4
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 3
54083: NEG
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 3
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 4
54105: NEG
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 5
54116: NEG
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 5
54127: NEG
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 5
54139: NEG
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: ST_TO_ADDR
// end ; end ;
54207: GO 54210
54209: POP
// case btype of b_depot , b_warehouse :
54210: LD_VAR 0 1
54214: PUSH
54215: LD_INT 0
54217: DOUBLE
54218: EQUAL
54219: IFTRUE 54229
54221: LD_INT 1
54223: DOUBLE
54224: EQUAL
54225: IFTRUE 54229
54227: GO 54430
54229: POP
// case nation of nation_american :
54230: LD_VAR 0 5
54234: PUSH
54235: LD_INT 1
54237: DOUBLE
54238: EQUAL
54239: IFTRUE 54243
54241: GO 54299
54243: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
54244: LD_ADDR_VAR 0 9
54248: PUSH
54249: LD_VAR 0 11
54253: PUSH
54254: LD_VAR 0 12
54258: PUSH
54259: LD_VAR 0 13
54263: PUSH
54264: LD_VAR 0 14
54268: PUSH
54269: LD_VAR 0 15
54273: PUSH
54274: LD_VAR 0 16
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: PUSH
54287: LD_VAR 0 4
54291: PUSH
54292: LD_INT 1
54294: PLUS
54295: ARRAY
54296: ST_TO_ADDR
54297: GO 54428
54299: LD_INT 2
54301: DOUBLE
54302: EQUAL
54303: IFTRUE 54307
54305: GO 54363
54307: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
54308: LD_ADDR_VAR 0 9
54312: PUSH
54313: LD_VAR 0 17
54317: PUSH
54318: LD_VAR 0 18
54322: PUSH
54323: LD_VAR 0 19
54327: PUSH
54328: LD_VAR 0 20
54332: PUSH
54333: LD_VAR 0 21
54337: PUSH
54338: LD_VAR 0 22
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: PUSH
54351: LD_VAR 0 4
54355: PUSH
54356: LD_INT 1
54358: PLUS
54359: ARRAY
54360: ST_TO_ADDR
54361: GO 54428
54363: LD_INT 3
54365: DOUBLE
54366: EQUAL
54367: IFTRUE 54371
54369: GO 54427
54371: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54372: LD_ADDR_VAR 0 9
54376: PUSH
54377: LD_VAR 0 23
54381: PUSH
54382: LD_VAR 0 24
54386: PUSH
54387: LD_VAR 0 25
54391: PUSH
54392: LD_VAR 0 26
54396: PUSH
54397: LD_VAR 0 27
54401: PUSH
54402: LD_VAR 0 28
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: PUSH
54415: LD_VAR 0 4
54419: PUSH
54420: LD_INT 1
54422: PLUS
54423: ARRAY
54424: ST_TO_ADDR
54425: GO 54428
54427: POP
54428: GO 54983
54430: LD_INT 2
54432: DOUBLE
54433: EQUAL
54434: IFTRUE 54444
54436: LD_INT 3
54438: DOUBLE
54439: EQUAL
54440: IFTRUE 54444
54442: GO 54500
54444: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54445: LD_ADDR_VAR 0 9
54449: PUSH
54450: LD_VAR 0 29
54454: PUSH
54455: LD_VAR 0 30
54459: PUSH
54460: LD_VAR 0 31
54464: PUSH
54465: LD_VAR 0 32
54469: PUSH
54470: LD_VAR 0 33
54474: PUSH
54475: LD_VAR 0 34
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: PUSH
54488: LD_VAR 0 4
54492: PUSH
54493: LD_INT 1
54495: PLUS
54496: ARRAY
54497: ST_TO_ADDR
54498: GO 54983
54500: LD_INT 16
54502: DOUBLE
54503: EQUAL
54504: IFTRUE 54562
54506: LD_INT 17
54508: DOUBLE
54509: EQUAL
54510: IFTRUE 54562
54512: LD_INT 18
54514: DOUBLE
54515: EQUAL
54516: IFTRUE 54562
54518: LD_INT 19
54520: DOUBLE
54521: EQUAL
54522: IFTRUE 54562
54524: LD_INT 22
54526: DOUBLE
54527: EQUAL
54528: IFTRUE 54562
54530: LD_INT 20
54532: DOUBLE
54533: EQUAL
54534: IFTRUE 54562
54536: LD_INT 21
54538: DOUBLE
54539: EQUAL
54540: IFTRUE 54562
54542: LD_INT 23
54544: DOUBLE
54545: EQUAL
54546: IFTRUE 54562
54548: LD_INT 24
54550: DOUBLE
54551: EQUAL
54552: IFTRUE 54562
54554: LD_INT 25
54556: DOUBLE
54557: EQUAL
54558: IFTRUE 54562
54560: GO 54618
54562: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54563: LD_ADDR_VAR 0 9
54567: PUSH
54568: LD_VAR 0 35
54572: PUSH
54573: LD_VAR 0 36
54577: PUSH
54578: LD_VAR 0 37
54582: PUSH
54583: LD_VAR 0 38
54587: PUSH
54588: LD_VAR 0 39
54592: PUSH
54593: LD_VAR 0 40
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: PUSH
54606: LD_VAR 0 4
54610: PUSH
54611: LD_INT 1
54613: PLUS
54614: ARRAY
54615: ST_TO_ADDR
54616: GO 54983
54618: LD_INT 6
54620: DOUBLE
54621: EQUAL
54622: IFTRUE 54674
54624: LD_INT 7
54626: DOUBLE
54627: EQUAL
54628: IFTRUE 54674
54630: LD_INT 8
54632: DOUBLE
54633: EQUAL
54634: IFTRUE 54674
54636: LD_INT 13
54638: DOUBLE
54639: EQUAL
54640: IFTRUE 54674
54642: LD_INT 12
54644: DOUBLE
54645: EQUAL
54646: IFTRUE 54674
54648: LD_INT 15
54650: DOUBLE
54651: EQUAL
54652: IFTRUE 54674
54654: LD_INT 11
54656: DOUBLE
54657: EQUAL
54658: IFTRUE 54674
54660: LD_INT 14
54662: DOUBLE
54663: EQUAL
54664: IFTRUE 54674
54666: LD_INT 10
54668: DOUBLE
54669: EQUAL
54670: IFTRUE 54674
54672: GO 54730
54674: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
54675: LD_ADDR_VAR 0 9
54679: PUSH
54680: LD_VAR 0 41
54684: PUSH
54685: LD_VAR 0 42
54689: PUSH
54690: LD_VAR 0 43
54694: PUSH
54695: LD_VAR 0 44
54699: PUSH
54700: LD_VAR 0 45
54704: PUSH
54705: LD_VAR 0 46
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: PUSH
54718: LD_VAR 0 4
54722: PUSH
54723: LD_INT 1
54725: PLUS
54726: ARRAY
54727: ST_TO_ADDR
54728: GO 54983
54730: LD_INT 36
54732: DOUBLE
54733: EQUAL
54734: IFTRUE 54738
54736: GO 54794
54738: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54739: LD_ADDR_VAR 0 9
54743: PUSH
54744: LD_VAR 0 47
54748: PUSH
54749: LD_VAR 0 48
54753: PUSH
54754: LD_VAR 0 49
54758: PUSH
54759: LD_VAR 0 50
54763: PUSH
54764: LD_VAR 0 51
54768: PUSH
54769: LD_VAR 0 52
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: PUSH
54782: LD_VAR 0 4
54786: PUSH
54787: LD_INT 1
54789: PLUS
54790: ARRAY
54791: ST_TO_ADDR
54792: GO 54983
54794: LD_INT 4
54796: DOUBLE
54797: EQUAL
54798: IFTRUE 54820
54800: LD_INT 5
54802: DOUBLE
54803: EQUAL
54804: IFTRUE 54820
54806: LD_INT 34
54808: DOUBLE
54809: EQUAL
54810: IFTRUE 54820
54812: LD_INT 37
54814: DOUBLE
54815: EQUAL
54816: IFTRUE 54820
54818: GO 54876
54820: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54821: LD_ADDR_VAR 0 9
54825: PUSH
54826: LD_VAR 0 53
54830: PUSH
54831: LD_VAR 0 54
54835: PUSH
54836: LD_VAR 0 55
54840: PUSH
54841: LD_VAR 0 56
54845: PUSH
54846: LD_VAR 0 57
54850: PUSH
54851: LD_VAR 0 58
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: PUSH
54864: LD_VAR 0 4
54868: PUSH
54869: LD_INT 1
54871: PLUS
54872: ARRAY
54873: ST_TO_ADDR
54874: GO 54983
54876: LD_INT 31
54878: DOUBLE
54879: EQUAL
54880: IFTRUE 54926
54882: LD_INT 32
54884: DOUBLE
54885: EQUAL
54886: IFTRUE 54926
54888: LD_INT 33
54890: DOUBLE
54891: EQUAL
54892: IFTRUE 54926
54894: LD_INT 27
54896: DOUBLE
54897: EQUAL
54898: IFTRUE 54926
54900: LD_INT 26
54902: DOUBLE
54903: EQUAL
54904: IFTRUE 54926
54906: LD_INT 28
54908: DOUBLE
54909: EQUAL
54910: IFTRUE 54926
54912: LD_INT 29
54914: DOUBLE
54915: EQUAL
54916: IFTRUE 54926
54918: LD_INT 30
54920: DOUBLE
54921: EQUAL
54922: IFTRUE 54926
54924: GO 54982
54926: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
54927: LD_ADDR_VAR 0 9
54931: PUSH
54932: LD_VAR 0 59
54936: PUSH
54937: LD_VAR 0 60
54941: PUSH
54942: LD_VAR 0 61
54946: PUSH
54947: LD_VAR 0 62
54951: PUSH
54952: LD_VAR 0 63
54956: PUSH
54957: LD_VAR 0 64
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: PUSH
54970: LD_VAR 0 4
54974: PUSH
54975: LD_INT 1
54977: PLUS
54978: ARRAY
54979: ST_TO_ADDR
54980: GO 54983
54982: POP
// temp_list2 = [ ] ;
54983: LD_ADDR_VAR 0 10
54987: PUSH
54988: EMPTY
54989: ST_TO_ADDR
// for i in temp_list do
54990: LD_ADDR_VAR 0 8
54994: PUSH
54995: LD_VAR 0 9
54999: PUSH
55000: FOR_IN
55001: IFFALSE 55053
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55003: LD_ADDR_VAR 0 10
55007: PUSH
55008: LD_VAR 0 10
55012: PUSH
55013: LD_VAR 0 8
55017: PUSH
55018: LD_INT 1
55020: ARRAY
55021: PUSH
55022: LD_VAR 0 2
55026: PLUS
55027: PUSH
55028: LD_VAR 0 8
55032: PUSH
55033: LD_INT 2
55035: ARRAY
55036: PUSH
55037: LD_VAR 0 3
55041: PLUS
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: EMPTY
55048: LIST
55049: ADD
55050: ST_TO_ADDR
55051: GO 55000
55053: POP
55054: POP
// result = temp_list2 ;
55055: LD_ADDR_VAR 0 7
55059: PUSH
55060: LD_VAR 0 10
55064: ST_TO_ADDR
// end ;
55065: LD_VAR 0 7
55069: RET
// export function EnemyInRange ( unit , dist ) ; begin
55070: LD_INT 0
55072: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55073: LD_ADDR_VAR 0 3
55077: PUSH
55078: LD_VAR 0 1
55082: PPUSH
55083: CALL_OW 255
55087: PPUSH
55088: LD_VAR 0 1
55092: PPUSH
55093: CALL_OW 250
55097: PPUSH
55098: LD_VAR 0 1
55102: PPUSH
55103: CALL_OW 251
55107: PPUSH
55108: LD_VAR 0 2
55112: PPUSH
55113: CALL 29174 0 4
55117: PUSH
55118: LD_INT 4
55120: ARRAY
55121: ST_TO_ADDR
// end ;
55122: LD_VAR 0 3
55126: RET
// export function PlayerSeeMe ( unit ) ; begin
55127: LD_INT 0
55129: PPUSH
// result := See ( your_side , unit ) ;
55130: LD_ADDR_VAR 0 2
55134: PUSH
55135: LD_OWVAR 2
55139: PPUSH
55140: LD_VAR 0 1
55144: PPUSH
55145: CALL_OW 292
55149: ST_TO_ADDR
// end ;
55150: LD_VAR 0 2
55154: RET
// export function ReverseDir ( unit ) ; begin
55155: LD_INT 0
55157: PPUSH
// if not unit then
55158: LD_VAR 0 1
55162: NOT
55163: IFFALSE 55167
// exit ;
55165: GO 55190
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55167: LD_ADDR_VAR 0 2
55171: PUSH
55172: LD_VAR 0 1
55176: PPUSH
55177: CALL_OW 254
55181: PUSH
55182: LD_INT 3
55184: PLUS
55185: PUSH
55186: LD_INT 6
55188: MOD
55189: ST_TO_ADDR
// end ;
55190: LD_VAR 0 2
55194: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55195: LD_INT 0
55197: PPUSH
55198: PPUSH
55199: PPUSH
55200: PPUSH
55201: PPUSH
// if not hexes then
55202: LD_VAR 0 2
55206: NOT
55207: IFFALSE 55211
// exit ;
55209: GO 55359
// dist := 9999 ;
55211: LD_ADDR_VAR 0 5
55215: PUSH
55216: LD_INT 9999
55218: ST_TO_ADDR
// for i = 1 to hexes do
55219: LD_ADDR_VAR 0 4
55223: PUSH
55224: DOUBLE
55225: LD_INT 1
55227: DEC
55228: ST_TO_ADDR
55229: LD_VAR 0 2
55233: PUSH
55234: FOR_TO
55235: IFFALSE 55347
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55237: LD_VAR 0 1
55241: PPUSH
55242: LD_VAR 0 2
55246: PUSH
55247: LD_VAR 0 4
55251: ARRAY
55252: PUSH
55253: LD_INT 1
55255: ARRAY
55256: PPUSH
55257: LD_VAR 0 2
55261: PUSH
55262: LD_VAR 0 4
55266: ARRAY
55267: PUSH
55268: LD_INT 2
55270: ARRAY
55271: PPUSH
55272: CALL_OW 297
55276: PUSH
55277: LD_VAR 0 5
55281: LESS
55282: IFFALSE 55345
// begin hex := hexes [ i ] ;
55284: LD_ADDR_VAR 0 7
55288: PUSH
55289: LD_VAR 0 2
55293: PUSH
55294: LD_VAR 0 4
55298: ARRAY
55299: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55300: LD_ADDR_VAR 0 5
55304: PUSH
55305: LD_VAR 0 1
55309: PPUSH
55310: LD_VAR 0 2
55314: PUSH
55315: LD_VAR 0 4
55319: ARRAY
55320: PUSH
55321: LD_INT 1
55323: ARRAY
55324: PPUSH
55325: LD_VAR 0 2
55329: PUSH
55330: LD_VAR 0 4
55334: ARRAY
55335: PUSH
55336: LD_INT 2
55338: ARRAY
55339: PPUSH
55340: CALL_OW 297
55344: ST_TO_ADDR
// end ; end ;
55345: GO 55234
55347: POP
55348: POP
// result := hex ;
55349: LD_ADDR_VAR 0 3
55353: PUSH
55354: LD_VAR 0 7
55358: ST_TO_ADDR
// end ;
55359: LD_VAR 0 3
55363: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55364: LD_INT 0
55366: PPUSH
55367: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55368: LD_VAR 0 1
55372: NOT
55373: PUSH
55374: LD_VAR 0 1
55378: PUSH
55379: LD_INT 21
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 23
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PPUSH
55403: CALL_OW 69
55407: IN
55408: NOT
55409: OR
55410: IFFALSE 55414
// exit ;
55412: GO 55461
// for i = 1 to 3 do
55414: LD_ADDR_VAR 0 3
55418: PUSH
55419: DOUBLE
55420: LD_INT 1
55422: DEC
55423: ST_TO_ADDR
55424: LD_INT 3
55426: PUSH
55427: FOR_TO
55428: IFFALSE 55459
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55430: LD_VAR 0 1
55434: PPUSH
55435: CALL_OW 250
55439: PPUSH
55440: LD_VAR 0 1
55444: PPUSH
55445: CALL_OW 251
55449: PPUSH
55450: LD_INT 1
55452: PPUSH
55453: CALL_OW 453
55457: GO 55427
55459: POP
55460: POP
// end ;
55461: LD_VAR 0 2
55465: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55466: LD_INT 0
55468: PPUSH
55469: PPUSH
55470: PPUSH
55471: PPUSH
55472: PPUSH
55473: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55474: LD_VAR 0 1
55478: NOT
55479: PUSH
55480: LD_VAR 0 2
55484: NOT
55485: OR
55486: PUSH
55487: LD_VAR 0 1
55491: PPUSH
55492: CALL_OW 314
55496: OR
55497: IFFALSE 55501
// exit ;
55499: GO 55942
// x := GetX ( enemy_unit ) ;
55501: LD_ADDR_VAR 0 7
55505: PUSH
55506: LD_VAR 0 2
55510: PPUSH
55511: CALL_OW 250
55515: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55516: LD_ADDR_VAR 0 8
55520: PUSH
55521: LD_VAR 0 2
55525: PPUSH
55526: CALL_OW 251
55530: ST_TO_ADDR
// if not x or not y then
55531: LD_VAR 0 7
55535: NOT
55536: PUSH
55537: LD_VAR 0 8
55541: NOT
55542: OR
55543: IFFALSE 55547
// exit ;
55545: GO 55942
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55547: LD_ADDR_VAR 0 6
55551: PUSH
55552: LD_VAR 0 7
55556: PPUSH
55557: LD_INT 0
55559: PPUSH
55560: LD_INT 4
55562: PPUSH
55563: CALL_OW 272
55567: PUSH
55568: LD_VAR 0 8
55572: PPUSH
55573: LD_INT 0
55575: PPUSH
55576: LD_INT 4
55578: PPUSH
55579: CALL_OW 273
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_VAR 0 7
55592: PPUSH
55593: LD_INT 1
55595: PPUSH
55596: LD_INT 4
55598: PPUSH
55599: CALL_OW 272
55603: PUSH
55604: LD_VAR 0 8
55608: PPUSH
55609: LD_INT 1
55611: PPUSH
55612: LD_INT 4
55614: PPUSH
55615: CALL_OW 273
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_VAR 0 7
55628: PPUSH
55629: LD_INT 2
55631: PPUSH
55632: LD_INT 4
55634: PPUSH
55635: CALL_OW 272
55639: PUSH
55640: LD_VAR 0 8
55644: PPUSH
55645: LD_INT 2
55647: PPUSH
55648: LD_INT 4
55650: PPUSH
55651: CALL_OW 273
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_VAR 0 7
55664: PPUSH
55665: LD_INT 3
55667: PPUSH
55668: LD_INT 4
55670: PPUSH
55671: CALL_OW 272
55675: PUSH
55676: LD_VAR 0 8
55680: PPUSH
55681: LD_INT 3
55683: PPUSH
55684: LD_INT 4
55686: PPUSH
55687: CALL_OW 273
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_VAR 0 7
55700: PPUSH
55701: LD_INT 4
55703: PPUSH
55704: LD_INT 4
55706: PPUSH
55707: CALL_OW 272
55711: PUSH
55712: LD_VAR 0 8
55716: PPUSH
55717: LD_INT 4
55719: PPUSH
55720: LD_INT 4
55722: PPUSH
55723: CALL_OW 273
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_VAR 0 7
55736: PPUSH
55737: LD_INT 5
55739: PPUSH
55740: LD_INT 4
55742: PPUSH
55743: CALL_OW 272
55747: PUSH
55748: LD_VAR 0 8
55752: PPUSH
55753: LD_INT 5
55755: PPUSH
55756: LD_INT 4
55758: PPUSH
55759: CALL_OW 273
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: ST_TO_ADDR
// for i = tmp downto 1 do
55776: LD_ADDR_VAR 0 4
55780: PUSH
55781: DOUBLE
55782: LD_VAR 0 6
55786: INC
55787: ST_TO_ADDR
55788: LD_INT 1
55790: PUSH
55791: FOR_DOWNTO
55792: IFFALSE 55893
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55794: LD_VAR 0 6
55798: PUSH
55799: LD_VAR 0 4
55803: ARRAY
55804: PUSH
55805: LD_INT 1
55807: ARRAY
55808: PPUSH
55809: LD_VAR 0 6
55813: PUSH
55814: LD_VAR 0 4
55818: ARRAY
55819: PUSH
55820: LD_INT 2
55822: ARRAY
55823: PPUSH
55824: CALL_OW 488
55828: NOT
55829: PUSH
55830: LD_VAR 0 6
55834: PUSH
55835: LD_VAR 0 4
55839: ARRAY
55840: PUSH
55841: LD_INT 1
55843: ARRAY
55844: PPUSH
55845: LD_VAR 0 6
55849: PUSH
55850: LD_VAR 0 4
55854: ARRAY
55855: PUSH
55856: LD_INT 2
55858: ARRAY
55859: PPUSH
55860: CALL_OW 428
55864: PUSH
55865: LD_INT 0
55867: NONEQUAL
55868: OR
55869: IFFALSE 55891
// tmp := Delete ( tmp , i ) ;
55871: LD_ADDR_VAR 0 6
55875: PUSH
55876: LD_VAR 0 6
55880: PPUSH
55881: LD_VAR 0 4
55885: PPUSH
55886: CALL_OW 3
55890: ST_TO_ADDR
55891: GO 55791
55893: POP
55894: POP
// j := GetClosestHex ( unit , tmp ) ;
55895: LD_ADDR_VAR 0 5
55899: PUSH
55900: LD_VAR 0 1
55904: PPUSH
55905: LD_VAR 0 6
55909: PPUSH
55910: CALL 55195 0 2
55914: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55915: LD_VAR 0 1
55919: PPUSH
55920: LD_VAR 0 5
55924: PUSH
55925: LD_INT 1
55927: ARRAY
55928: PPUSH
55929: LD_VAR 0 5
55933: PUSH
55934: LD_INT 2
55936: ARRAY
55937: PPUSH
55938: CALL_OW 111
// end ;
55942: LD_VAR 0 3
55946: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55947: LD_INT 0
55949: PPUSH
55950: PPUSH
55951: PPUSH
// uc_side = 0 ;
55952: LD_ADDR_OWVAR 20
55956: PUSH
55957: LD_INT 0
55959: ST_TO_ADDR
// uc_nation = 0 ;
55960: LD_ADDR_OWVAR 21
55964: PUSH
55965: LD_INT 0
55967: ST_TO_ADDR
// InitHc ;
55968: CALL_OW 19
// InitVc ;
55972: CALL_OW 20
// if mastodonts then
55976: LD_VAR 0 6
55980: IFFALSE 56047
// for i = 1 to mastodonts do
55982: LD_ADDR_VAR 0 11
55986: PUSH
55987: DOUBLE
55988: LD_INT 1
55990: DEC
55991: ST_TO_ADDR
55992: LD_VAR 0 6
55996: PUSH
55997: FOR_TO
55998: IFFALSE 56045
// begin vc_chassis := 31 ;
56000: LD_ADDR_OWVAR 37
56004: PUSH
56005: LD_INT 31
56007: ST_TO_ADDR
// vc_control := control_rider ;
56008: LD_ADDR_OWVAR 38
56012: PUSH
56013: LD_INT 4
56015: ST_TO_ADDR
// animal := CreateVehicle ;
56016: LD_ADDR_VAR 0 12
56020: PUSH
56021: CALL_OW 45
56025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56026: LD_VAR 0 12
56030: PPUSH
56031: LD_VAR 0 8
56035: PPUSH
56036: LD_INT 0
56038: PPUSH
56039: CALL 58116 0 3
// end ;
56043: GO 55997
56045: POP
56046: POP
// if horses then
56047: LD_VAR 0 5
56051: IFFALSE 56118
// for i = 1 to horses do
56053: LD_ADDR_VAR 0 11
56057: PUSH
56058: DOUBLE
56059: LD_INT 1
56061: DEC
56062: ST_TO_ADDR
56063: LD_VAR 0 5
56067: PUSH
56068: FOR_TO
56069: IFFALSE 56116
// begin hc_class := 21 ;
56071: LD_ADDR_OWVAR 28
56075: PUSH
56076: LD_INT 21
56078: ST_TO_ADDR
// hc_gallery :=  ;
56079: LD_ADDR_OWVAR 33
56083: PUSH
56084: LD_STRING 
56086: ST_TO_ADDR
// animal := CreateHuman ;
56087: LD_ADDR_VAR 0 12
56091: PUSH
56092: CALL_OW 44
56096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56097: LD_VAR 0 12
56101: PPUSH
56102: LD_VAR 0 8
56106: PPUSH
56107: LD_INT 0
56109: PPUSH
56110: CALL 58116 0 3
// end ;
56114: GO 56068
56116: POP
56117: POP
// if birds then
56118: LD_VAR 0 1
56122: IFFALSE 56189
// for i = 1 to birds do
56124: LD_ADDR_VAR 0 11
56128: PUSH
56129: DOUBLE
56130: LD_INT 1
56132: DEC
56133: ST_TO_ADDR
56134: LD_VAR 0 1
56138: PUSH
56139: FOR_TO
56140: IFFALSE 56187
// begin hc_class = 18 ;
56142: LD_ADDR_OWVAR 28
56146: PUSH
56147: LD_INT 18
56149: ST_TO_ADDR
// hc_gallery =  ;
56150: LD_ADDR_OWVAR 33
56154: PUSH
56155: LD_STRING 
56157: ST_TO_ADDR
// animal := CreateHuman ;
56158: LD_ADDR_VAR 0 12
56162: PUSH
56163: CALL_OW 44
56167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56168: LD_VAR 0 12
56172: PPUSH
56173: LD_VAR 0 8
56177: PPUSH
56178: LD_INT 0
56180: PPUSH
56181: CALL 58116 0 3
// end ;
56185: GO 56139
56187: POP
56188: POP
// if tigers then
56189: LD_VAR 0 2
56193: IFFALSE 56277
// for i = 1 to tigers do
56195: LD_ADDR_VAR 0 11
56199: PUSH
56200: DOUBLE
56201: LD_INT 1
56203: DEC
56204: ST_TO_ADDR
56205: LD_VAR 0 2
56209: PUSH
56210: FOR_TO
56211: IFFALSE 56275
// begin hc_class = class_tiger ;
56213: LD_ADDR_OWVAR 28
56217: PUSH
56218: LD_INT 14
56220: ST_TO_ADDR
// hc_gallery =  ;
56221: LD_ADDR_OWVAR 33
56225: PUSH
56226: LD_STRING 
56228: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56229: LD_ADDR_OWVAR 35
56233: PUSH
56234: LD_INT 7
56236: NEG
56237: PPUSH
56238: LD_INT 7
56240: PPUSH
56241: CALL_OW 12
56245: ST_TO_ADDR
// animal := CreateHuman ;
56246: LD_ADDR_VAR 0 12
56250: PUSH
56251: CALL_OW 44
56255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56256: LD_VAR 0 12
56260: PPUSH
56261: LD_VAR 0 8
56265: PPUSH
56266: LD_INT 0
56268: PPUSH
56269: CALL 58116 0 3
// end ;
56273: GO 56210
56275: POP
56276: POP
// if apemans then
56277: LD_VAR 0 3
56281: IFFALSE 56404
// for i = 1 to apemans do
56283: LD_ADDR_VAR 0 11
56287: PUSH
56288: DOUBLE
56289: LD_INT 1
56291: DEC
56292: ST_TO_ADDR
56293: LD_VAR 0 3
56297: PUSH
56298: FOR_TO
56299: IFFALSE 56402
// begin hc_class = class_apeman ;
56301: LD_ADDR_OWVAR 28
56305: PUSH
56306: LD_INT 12
56308: ST_TO_ADDR
// hc_gallery =  ;
56309: LD_ADDR_OWVAR 33
56313: PUSH
56314: LD_STRING 
56316: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
56317: LD_ADDR_OWVAR 35
56321: PUSH
56322: LD_INT 5
56324: NEG
56325: PPUSH
56326: LD_INT 5
56328: PPUSH
56329: CALL_OW 12
56333: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56334: LD_ADDR_OWVAR 31
56338: PUSH
56339: LD_INT 1
56341: PPUSH
56342: LD_INT 3
56344: PPUSH
56345: CALL_OW 12
56349: PUSH
56350: LD_INT 1
56352: PPUSH
56353: LD_INT 3
56355: PPUSH
56356: CALL_OW 12
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: ST_TO_ADDR
// animal := CreateHuman ;
56373: LD_ADDR_VAR 0 12
56377: PUSH
56378: CALL_OW 44
56382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56383: LD_VAR 0 12
56387: PPUSH
56388: LD_VAR 0 8
56392: PPUSH
56393: LD_INT 0
56395: PPUSH
56396: CALL 58116 0 3
// end ;
56400: GO 56298
56402: POP
56403: POP
// if enchidnas then
56404: LD_VAR 0 4
56408: IFFALSE 56475
// for i = 1 to enchidnas do
56410: LD_ADDR_VAR 0 11
56414: PUSH
56415: DOUBLE
56416: LD_INT 1
56418: DEC
56419: ST_TO_ADDR
56420: LD_VAR 0 4
56424: PUSH
56425: FOR_TO
56426: IFFALSE 56473
// begin hc_class = 13 ;
56428: LD_ADDR_OWVAR 28
56432: PUSH
56433: LD_INT 13
56435: ST_TO_ADDR
// hc_gallery =  ;
56436: LD_ADDR_OWVAR 33
56440: PUSH
56441: LD_STRING 
56443: ST_TO_ADDR
// animal := CreateHuman ;
56444: LD_ADDR_VAR 0 12
56448: PUSH
56449: CALL_OW 44
56453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56454: LD_VAR 0 12
56458: PPUSH
56459: LD_VAR 0 8
56463: PPUSH
56464: LD_INT 0
56466: PPUSH
56467: CALL 58116 0 3
// end ;
56471: GO 56425
56473: POP
56474: POP
// if fishes then
56475: LD_VAR 0 7
56479: IFFALSE 56546
// for i = 1 to fishes do
56481: LD_ADDR_VAR 0 11
56485: PUSH
56486: DOUBLE
56487: LD_INT 1
56489: DEC
56490: ST_TO_ADDR
56491: LD_VAR 0 7
56495: PUSH
56496: FOR_TO
56497: IFFALSE 56544
// begin hc_class = 20 ;
56499: LD_ADDR_OWVAR 28
56503: PUSH
56504: LD_INT 20
56506: ST_TO_ADDR
// hc_gallery =  ;
56507: LD_ADDR_OWVAR 33
56511: PUSH
56512: LD_STRING 
56514: ST_TO_ADDR
// animal := CreateHuman ;
56515: LD_ADDR_VAR 0 12
56519: PUSH
56520: CALL_OW 44
56524: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56525: LD_VAR 0 12
56529: PPUSH
56530: LD_VAR 0 9
56534: PPUSH
56535: LD_INT 0
56537: PPUSH
56538: CALL 58116 0 3
// end ;
56542: GO 56496
56544: POP
56545: POP
// end ;
56546: LD_VAR 0 10
56550: RET
// export function WantHeal ( sci , unit ) ; begin
56551: LD_INT 0
56553: PPUSH
// if GetTaskList ( sci ) > 0 then
56554: LD_VAR 0 1
56558: PPUSH
56559: CALL_OW 437
56563: PUSH
56564: LD_INT 0
56566: GREATER
56567: IFFALSE 56637
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56569: LD_VAR 0 1
56573: PPUSH
56574: CALL_OW 437
56578: PUSH
56579: LD_INT 1
56581: ARRAY
56582: PUSH
56583: LD_INT 1
56585: ARRAY
56586: PUSH
56587: LD_STRING l
56589: EQUAL
56590: PUSH
56591: LD_VAR 0 1
56595: PPUSH
56596: CALL_OW 437
56600: PUSH
56601: LD_INT 1
56603: ARRAY
56604: PUSH
56605: LD_INT 4
56607: ARRAY
56608: PUSH
56609: LD_VAR 0 2
56613: EQUAL
56614: AND
56615: IFFALSE 56627
// result := true else
56617: LD_ADDR_VAR 0 3
56621: PUSH
56622: LD_INT 1
56624: ST_TO_ADDR
56625: GO 56635
// result := false ;
56627: LD_ADDR_VAR 0 3
56631: PUSH
56632: LD_INT 0
56634: ST_TO_ADDR
// end else
56635: GO 56645
// result := false ;
56637: LD_ADDR_VAR 0 3
56641: PUSH
56642: LD_INT 0
56644: ST_TO_ADDR
// end ;
56645: LD_VAR 0 3
56649: RET
// export function HealTarget ( sci ) ; begin
56650: LD_INT 0
56652: PPUSH
// if not sci then
56653: LD_VAR 0 1
56657: NOT
56658: IFFALSE 56662
// exit ;
56660: GO 56727
// result := 0 ;
56662: LD_ADDR_VAR 0 2
56666: PUSH
56667: LD_INT 0
56669: ST_TO_ADDR
// if GetTaskList ( sci ) then
56670: LD_VAR 0 1
56674: PPUSH
56675: CALL_OW 437
56679: IFFALSE 56727
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56681: LD_VAR 0 1
56685: PPUSH
56686: CALL_OW 437
56690: PUSH
56691: LD_INT 1
56693: ARRAY
56694: PUSH
56695: LD_INT 1
56697: ARRAY
56698: PUSH
56699: LD_STRING l
56701: EQUAL
56702: IFFALSE 56727
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56704: LD_ADDR_VAR 0 2
56708: PUSH
56709: LD_VAR 0 1
56713: PPUSH
56714: CALL_OW 437
56718: PUSH
56719: LD_INT 1
56721: ARRAY
56722: PUSH
56723: LD_INT 4
56725: ARRAY
56726: ST_TO_ADDR
// end ;
56727: LD_VAR 0 2
56731: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56732: LD_INT 0
56734: PPUSH
56735: PPUSH
56736: PPUSH
56737: PPUSH
// if not base_units then
56738: LD_VAR 0 1
56742: NOT
56743: IFFALSE 56747
// exit ;
56745: GO 56834
// result := false ;
56747: LD_ADDR_VAR 0 2
56751: PUSH
56752: LD_INT 0
56754: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56755: LD_ADDR_VAR 0 5
56759: PUSH
56760: LD_VAR 0 1
56764: PPUSH
56765: LD_INT 21
56767: PUSH
56768: LD_INT 3
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PPUSH
56775: CALL_OW 72
56779: ST_TO_ADDR
// if not tmp then
56780: LD_VAR 0 5
56784: NOT
56785: IFFALSE 56789
// exit ;
56787: GO 56834
// for i in tmp do
56789: LD_ADDR_VAR 0 3
56793: PUSH
56794: LD_VAR 0 5
56798: PUSH
56799: FOR_IN
56800: IFFALSE 56832
// begin result := EnemyInRange ( i , 22 ) ;
56802: LD_ADDR_VAR 0 2
56806: PUSH
56807: LD_VAR 0 3
56811: PPUSH
56812: LD_INT 22
56814: PPUSH
56815: CALL 55070 0 2
56819: ST_TO_ADDR
// if result then
56820: LD_VAR 0 2
56824: IFFALSE 56830
// exit ;
56826: POP
56827: POP
56828: GO 56834
// end ;
56830: GO 56799
56832: POP
56833: POP
// end ;
56834: LD_VAR 0 2
56838: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56839: LD_INT 0
56841: PPUSH
56842: PPUSH
// if not units then
56843: LD_VAR 0 1
56847: NOT
56848: IFFALSE 56852
// exit ;
56850: GO 56922
// result := [ ] ;
56852: LD_ADDR_VAR 0 3
56856: PUSH
56857: EMPTY
56858: ST_TO_ADDR
// for i in units do
56859: LD_ADDR_VAR 0 4
56863: PUSH
56864: LD_VAR 0 1
56868: PUSH
56869: FOR_IN
56870: IFFALSE 56920
// if GetTag ( i ) = tag then
56872: LD_VAR 0 4
56876: PPUSH
56877: CALL_OW 110
56881: PUSH
56882: LD_VAR 0 2
56886: EQUAL
56887: IFFALSE 56918
// result := Insert ( result , result + 1 , i ) ;
56889: LD_ADDR_VAR 0 3
56893: PUSH
56894: LD_VAR 0 3
56898: PPUSH
56899: LD_VAR 0 3
56903: PUSH
56904: LD_INT 1
56906: PLUS
56907: PPUSH
56908: LD_VAR 0 4
56912: PPUSH
56913: CALL_OW 2
56917: ST_TO_ADDR
56918: GO 56869
56920: POP
56921: POP
// end ;
56922: LD_VAR 0 3
56926: RET
// export function IsDriver ( un ) ; begin
56927: LD_INT 0
56929: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56930: LD_ADDR_VAR 0 2
56934: PUSH
56935: LD_VAR 0 1
56939: PUSH
56940: LD_INT 55
56942: PUSH
56943: EMPTY
56944: LIST
56945: PPUSH
56946: CALL_OW 69
56950: IN
56951: ST_TO_ADDR
// end ;
56952: LD_VAR 0 2
56956: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56957: LD_INT 0
56959: PPUSH
56960: PPUSH
// list := [ ] ;
56961: LD_ADDR_VAR 0 5
56965: PUSH
56966: EMPTY
56967: ST_TO_ADDR
// case d of 0 :
56968: LD_VAR 0 3
56972: PUSH
56973: LD_INT 0
56975: DOUBLE
56976: EQUAL
56977: IFTRUE 56981
56979: GO 57114
56981: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56982: LD_ADDR_VAR 0 5
56986: PUSH
56987: LD_VAR 0 1
56991: PUSH
56992: LD_INT 4
56994: MINUS
56995: PUSH
56996: LD_VAR 0 2
57000: PUSH
57001: LD_INT 4
57003: MINUS
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: PUSH
57013: LD_VAR 0 1
57017: PUSH
57018: LD_INT 3
57020: MINUS
57021: PUSH
57022: LD_VAR 0 2
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: LIST
57034: PUSH
57035: LD_VAR 0 1
57039: PUSH
57040: LD_INT 4
57042: PLUS
57043: PUSH
57044: LD_VAR 0 2
57048: PUSH
57049: LD_INT 4
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: LIST
57056: PUSH
57057: LD_VAR 0 1
57061: PUSH
57062: LD_INT 3
57064: PLUS
57065: PUSH
57066: LD_VAR 0 2
57070: PUSH
57071: LD_INT 3
57073: PLUS
57074: PUSH
57075: LD_INT 5
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: PUSH
57083: LD_VAR 0 1
57087: PUSH
57088: LD_VAR 0 2
57092: PUSH
57093: LD_INT 4
57095: PLUS
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// end ; 1 :
57112: GO 57812
57114: LD_INT 1
57116: DOUBLE
57117: EQUAL
57118: IFTRUE 57122
57120: GO 57255
57122: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57123: LD_ADDR_VAR 0 5
57127: PUSH
57128: LD_VAR 0 1
57132: PUSH
57133: LD_VAR 0 2
57137: PUSH
57138: LD_INT 4
57140: MINUS
57141: PUSH
57142: LD_INT 3
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: LIST
57149: PUSH
57150: LD_VAR 0 1
57154: PUSH
57155: LD_INT 3
57157: MINUS
57158: PUSH
57159: LD_VAR 0 2
57163: PUSH
57164: LD_INT 3
57166: MINUS
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: PUSH
57176: LD_VAR 0 1
57180: PUSH
57181: LD_INT 4
57183: MINUS
57184: PUSH
57185: LD_VAR 0 2
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: PUSH
57198: LD_VAR 0 1
57202: PUSH
57203: LD_VAR 0 2
57207: PUSH
57208: LD_INT 3
57210: PLUS
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: PUSH
57220: LD_VAR 0 1
57224: PUSH
57225: LD_INT 4
57227: PLUS
57228: PUSH
57229: LD_VAR 0 2
57233: PUSH
57234: LD_INT 4
57236: PLUS
57237: PUSH
57238: LD_INT 5
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// end ; 2 :
57253: GO 57812
57255: LD_INT 2
57257: DOUBLE
57258: EQUAL
57259: IFTRUE 57263
57261: GO 57392
57263: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57264: LD_ADDR_VAR 0 5
57268: PUSH
57269: LD_VAR 0 1
57273: PUSH
57274: LD_VAR 0 2
57278: PUSH
57279: LD_INT 3
57281: MINUS
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: LIST
57290: PUSH
57291: LD_VAR 0 1
57295: PUSH
57296: LD_INT 4
57298: PLUS
57299: PUSH
57300: LD_VAR 0 2
57304: PUSH
57305: LD_INT 4
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: LIST
57312: PUSH
57313: LD_VAR 0 1
57317: PUSH
57318: LD_VAR 0 2
57322: PUSH
57323: LD_INT 4
57325: PLUS
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: LIST
57334: PUSH
57335: LD_VAR 0 1
57339: PUSH
57340: LD_INT 3
57342: MINUS
57343: PUSH
57344: LD_VAR 0 2
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: LIST
57356: PUSH
57357: LD_VAR 0 1
57361: PUSH
57362: LD_INT 4
57364: MINUS
57365: PUSH
57366: LD_VAR 0 2
57370: PUSH
57371: LD_INT 4
57373: MINUS
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: ST_TO_ADDR
// end ; 3 :
57390: GO 57812
57392: LD_INT 3
57394: DOUBLE
57395: EQUAL
57396: IFTRUE 57400
57398: GO 57533
57400: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57401: LD_ADDR_VAR 0 5
57405: PUSH
57406: LD_VAR 0 1
57410: PUSH
57411: LD_INT 3
57413: PLUS
57414: PUSH
57415: LD_VAR 0 2
57419: PUSH
57420: LD_INT 4
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: PUSH
57428: LD_VAR 0 1
57432: PUSH
57433: LD_INT 4
57435: PLUS
57436: PUSH
57437: LD_VAR 0 2
57441: PUSH
57442: LD_INT 4
57444: PLUS
57445: PUSH
57446: LD_INT 5
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: LIST
57453: PUSH
57454: LD_VAR 0 1
57458: PUSH
57459: LD_INT 4
57461: MINUS
57462: PUSH
57463: LD_VAR 0 2
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: LIST
57475: PUSH
57476: LD_VAR 0 1
57480: PUSH
57481: LD_VAR 0 2
57485: PUSH
57486: LD_INT 4
57488: MINUS
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: PUSH
57498: LD_VAR 0 1
57502: PUSH
57503: LD_INT 3
57505: MINUS
57506: PUSH
57507: LD_VAR 0 2
57511: PUSH
57512: LD_INT 3
57514: MINUS
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: ST_TO_ADDR
// end ; 4 :
57531: GO 57812
57533: LD_INT 4
57535: DOUBLE
57536: EQUAL
57537: IFTRUE 57541
57539: GO 57674
57541: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57542: LD_ADDR_VAR 0 5
57546: PUSH
57547: LD_VAR 0 1
57551: PUSH
57552: LD_VAR 0 2
57556: PUSH
57557: LD_INT 4
57559: PLUS
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: LIST
57568: PUSH
57569: LD_VAR 0 1
57573: PUSH
57574: LD_INT 3
57576: PLUS
57577: PUSH
57578: LD_VAR 0 2
57582: PUSH
57583: LD_INT 3
57585: PLUS
57586: PUSH
57587: LD_INT 5
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: LIST
57594: PUSH
57595: LD_VAR 0 1
57599: PUSH
57600: LD_INT 4
57602: PLUS
57603: PUSH
57604: LD_VAR 0 2
57608: PUSH
57609: LD_INT 4
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: LIST
57616: PUSH
57617: LD_VAR 0 1
57621: PUSH
57622: LD_VAR 0 2
57626: PUSH
57627: LD_INT 3
57629: MINUS
57630: PUSH
57631: LD_INT 3
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: PUSH
57639: LD_VAR 0 1
57643: PUSH
57644: LD_INT 4
57646: MINUS
57647: PUSH
57648: LD_VAR 0 2
57652: PUSH
57653: LD_INT 4
57655: MINUS
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: ST_TO_ADDR
// end ; 5 :
57672: GO 57812
57674: LD_INT 5
57676: DOUBLE
57677: EQUAL
57678: IFTRUE 57682
57680: GO 57811
57682: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57683: LD_ADDR_VAR 0 5
57687: PUSH
57688: LD_VAR 0 1
57692: PUSH
57693: LD_INT 4
57695: MINUS
57696: PUSH
57697: LD_VAR 0 2
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: LIST
57709: PUSH
57710: LD_VAR 0 1
57714: PUSH
57715: LD_VAR 0 2
57719: PUSH
57720: LD_INT 4
57722: MINUS
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: LIST
57731: PUSH
57732: LD_VAR 0 1
57736: PUSH
57737: LD_INT 4
57739: PLUS
57740: PUSH
57741: LD_VAR 0 2
57745: PUSH
57746: LD_INT 4
57748: PLUS
57749: PUSH
57750: LD_INT 5
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: PUSH
57758: LD_VAR 0 1
57762: PUSH
57763: LD_INT 3
57765: PLUS
57766: PUSH
57767: LD_VAR 0 2
57771: PUSH
57772: LD_INT 4
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: LIST
57779: PUSH
57780: LD_VAR 0 1
57784: PUSH
57785: LD_VAR 0 2
57789: PUSH
57790: LD_INT 3
57792: PLUS
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: LIST
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// end ; end ;
57809: GO 57812
57811: POP
// result := list ;
57812: LD_ADDR_VAR 0 4
57816: PUSH
57817: LD_VAR 0 5
57821: ST_TO_ADDR
// end ;
57822: LD_VAR 0 4
57826: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57827: LD_INT 0
57829: PPUSH
57830: PPUSH
57831: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57832: LD_VAR 0 1
57836: NOT
57837: PUSH
57838: LD_VAR 0 2
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: LD_INT 4
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: IN
57861: NOT
57862: OR
57863: IFFALSE 57867
// exit ;
57865: GO 57959
// tmp := [ ] ;
57867: LD_ADDR_VAR 0 5
57871: PUSH
57872: EMPTY
57873: ST_TO_ADDR
// for i in units do
57874: LD_ADDR_VAR 0 4
57878: PUSH
57879: LD_VAR 0 1
57883: PUSH
57884: FOR_IN
57885: IFFALSE 57928
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57887: LD_ADDR_VAR 0 5
57891: PUSH
57892: LD_VAR 0 5
57896: PPUSH
57897: LD_VAR 0 5
57901: PUSH
57902: LD_INT 1
57904: PLUS
57905: PPUSH
57906: LD_VAR 0 4
57910: PPUSH
57911: LD_VAR 0 2
57915: PPUSH
57916: CALL_OW 259
57920: PPUSH
57921: CALL_OW 2
57925: ST_TO_ADDR
57926: GO 57884
57928: POP
57929: POP
// if not tmp then
57930: LD_VAR 0 5
57934: NOT
57935: IFFALSE 57939
// exit ;
57937: GO 57959
// result := SortListByListDesc ( units , tmp ) ;
57939: LD_ADDR_VAR 0 3
57943: PUSH
57944: LD_VAR 0 1
57948: PPUSH
57949: LD_VAR 0 5
57953: PPUSH
57954: CALL_OW 77
57958: ST_TO_ADDR
// end ;
57959: LD_VAR 0 3
57963: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57964: LD_INT 0
57966: PPUSH
57967: PPUSH
57968: PPUSH
// x := GetX ( building ) ;
57969: LD_ADDR_VAR 0 4
57973: PUSH
57974: LD_VAR 0 2
57978: PPUSH
57979: CALL_OW 250
57983: ST_TO_ADDR
// y := GetY ( building ) ;
57984: LD_ADDR_VAR 0 5
57988: PUSH
57989: LD_VAR 0 2
57993: PPUSH
57994: CALL_OW 251
57998: ST_TO_ADDR
// if GetTaskList ( unit ) then
57999: LD_VAR 0 1
58003: PPUSH
58004: CALL_OW 437
58008: IFFALSE 58103
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58010: LD_STRING e
58012: PUSH
58013: LD_VAR 0 1
58017: PPUSH
58018: CALL_OW 437
58022: PUSH
58023: LD_INT 1
58025: ARRAY
58026: PUSH
58027: LD_INT 1
58029: ARRAY
58030: EQUAL
58031: PUSH
58032: LD_VAR 0 4
58036: PUSH
58037: LD_VAR 0 1
58041: PPUSH
58042: CALL_OW 437
58046: PUSH
58047: LD_INT 1
58049: ARRAY
58050: PUSH
58051: LD_INT 2
58053: ARRAY
58054: EQUAL
58055: AND
58056: PUSH
58057: LD_VAR 0 5
58061: PUSH
58062: LD_VAR 0 1
58066: PPUSH
58067: CALL_OW 437
58071: PUSH
58072: LD_INT 1
58074: ARRAY
58075: PUSH
58076: LD_INT 3
58078: ARRAY
58079: EQUAL
58080: AND
58081: IFFALSE 58093
// result := true else
58083: LD_ADDR_VAR 0 3
58087: PUSH
58088: LD_INT 1
58090: ST_TO_ADDR
58091: GO 58101
// result := false ;
58093: LD_ADDR_VAR 0 3
58097: PUSH
58098: LD_INT 0
58100: ST_TO_ADDR
// end else
58101: GO 58111
// result := false ;
58103: LD_ADDR_VAR 0 3
58107: PUSH
58108: LD_INT 0
58110: ST_TO_ADDR
// end ;
58111: LD_VAR 0 3
58115: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58116: LD_INT 0
58118: PPUSH
58119: PPUSH
58120: PPUSH
58121: PPUSH
// if not unit or not area then
58122: LD_VAR 0 1
58126: NOT
58127: PUSH
58128: LD_VAR 0 2
58132: NOT
58133: OR
58134: IFFALSE 58138
// exit ;
58136: GO 58302
// tmp := AreaToList ( area , i ) ;
58138: LD_ADDR_VAR 0 6
58142: PUSH
58143: LD_VAR 0 2
58147: PPUSH
58148: LD_VAR 0 5
58152: PPUSH
58153: CALL_OW 517
58157: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58158: LD_ADDR_VAR 0 5
58162: PUSH
58163: DOUBLE
58164: LD_INT 1
58166: DEC
58167: ST_TO_ADDR
58168: LD_VAR 0 6
58172: PUSH
58173: LD_INT 1
58175: ARRAY
58176: PUSH
58177: FOR_TO
58178: IFFALSE 58300
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58180: LD_ADDR_VAR 0 7
58184: PUSH
58185: LD_VAR 0 6
58189: PUSH
58190: LD_INT 1
58192: ARRAY
58193: PUSH
58194: LD_VAR 0 5
58198: ARRAY
58199: PUSH
58200: LD_VAR 0 6
58204: PUSH
58205: LD_INT 2
58207: ARRAY
58208: PUSH
58209: LD_VAR 0 5
58213: ARRAY
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58219: LD_VAR 0 7
58223: PUSH
58224: LD_INT 1
58226: ARRAY
58227: PPUSH
58228: LD_VAR 0 7
58232: PUSH
58233: LD_INT 2
58235: ARRAY
58236: PPUSH
58237: CALL_OW 428
58241: PUSH
58242: LD_INT 0
58244: EQUAL
58245: IFFALSE 58298
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58247: LD_VAR 0 1
58251: PPUSH
58252: LD_VAR 0 7
58256: PUSH
58257: LD_INT 1
58259: ARRAY
58260: PPUSH
58261: LD_VAR 0 7
58265: PUSH
58266: LD_INT 2
58268: ARRAY
58269: PPUSH
58270: LD_VAR 0 3
58274: PPUSH
58275: CALL_OW 48
// result := IsPlaced ( unit ) ;
58279: LD_ADDR_VAR 0 4
58283: PUSH
58284: LD_VAR 0 1
58288: PPUSH
58289: CALL_OW 305
58293: ST_TO_ADDR
// exit ;
58294: POP
58295: POP
58296: GO 58302
// end ; end ;
58298: GO 58177
58300: POP
58301: POP
// end ;
58302: LD_VAR 0 4
58306: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58307: LD_INT 0
58309: PPUSH
58310: PPUSH
58311: PPUSH
// if not side or side > 8 then
58312: LD_VAR 0 1
58316: NOT
58317: PUSH
58318: LD_VAR 0 1
58322: PUSH
58323: LD_INT 8
58325: GREATER
58326: OR
58327: IFFALSE 58331
// exit ;
58329: GO 58518
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58331: LD_ADDR_VAR 0 4
58335: PUSH
58336: LD_INT 22
58338: PUSH
58339: LD_VAR 0 1
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 21
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PPUSH
58362: CALL_OW 69
58366: ST_TO_ADDR
// if not tmp then
58367: LD_VAR 0 4
58371: NOT
58372: IFFALSE 58376
// exit ;
58374: GO 58518
// enable_addtolog := true ;
58376: LD_ADDR_OWVAR 81
58380: PUSH
58381: LD_INT 1
58383: ST_TO_ADDR
// AddToLog ( [ ) ;
58384: LD_STRING [
58386: PPUSH
58387: CALL_OW 561
// for i in tmp do
58391: LD_ADDR_VAR 0 3
58395: PUSH
58396: LD_VAR 0 4
58400: PUSH
58401: FOR_IN
58402: IFFALSE 58509
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58404: LD_STRING [
58406: PUSH
58407: LD_VAR 0 3
58411: PPUSH
58412: CALL_OW 266
58416: STR
58417: PUSH
58418: LD_STRING , 
58420: STR
58421: PUSH
58422: LD_VAR 0 3
58426: PPUSH
58427: CALL_OW 250
58431: STR
58432: PUSH
58433: LD_STRING , 
58435: STR
58436: PUSH
58437: LD_VAR 0 3
58441: PPUSH
58442: CALL_OW 251
58446: STR
58447: PUSH
58448: LD_STRING , 
58450: STR
58451: PUSH
58452: LD_VAR 0 3
58456: PPUSH
58457: CALL_OW 254
58461: STR
58462: PUSH
58463: LD_STRING , 
58465: STR
58466: PUSH
58467: LD_VAR 0 3
58471: PPUSH
58472: LD_INT 1
58474: PPUSH
58475: CALL_OW 268
58479: STR
58480: PUSH
58481: LD_STRING , 
58483: STR
58484: PUSH
58485: LD_VAR 0 3
58489: PPUSH
58490: LD_INT 2
58492: PPUSH
58493: CALL_OW 268
58497: STR
58498: PUSH
58499: LD_STRING ],
58501: STR
58502: PPUSH
58503: CALL_OW 561
// end ;
58507: GO 58401
58509: POP
58510: POP
// AddToLog ( ]; ) ;
58511: LD_STRING ];
58513: PPUSH
58514: CALL_OW 561
// end ;
58518: LD_VAR 0 2
58522: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58523: LD_INT 0
58525: PPUSH
58526: PPUSH
58527: PPUSH
58528: PPUSH
58529: PPUSH
// if not area or not rate or not max then
58530: LD_VAR 0 1
58534: NOT
58535: PUSH
58536: LD_VAR 0 2
58540: NOT
58541: OR
58542: PUSH
58543: LD_VAR 0 4
58547: NOT
58548: OR
58549: IFFALSE 58553
// exit ;
58551: GO 58745
// while 1 do
58553: LD_INT 1
58555: IFFALSE 58745
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58557: LD_ADDR_VAR 0 9
58561: PUSH
58562: LD_VAR 0 1
58566: PPUSH
58567: LD_INT 1
58569: PPUSH
58570: CALL_OW 287
58574: PUSH
58575: LD_INT 10
58577: MUL
58578: ST_TO_ADDR
// r := rate / 10 ;
58579: LD_ADDR_VAR 0 7
58583: PUSH
58584: LD_VAR 0 2
58588: PUSH
58589: LD_INT 10
58591: DIVREAL
58592: ST_TO_ADDR
// time := 1 1$00 ;
58593: LD_ADDR_VAR 0 8
58597: PUSH
58598: LD_INT 2100
58600: ST_TO_ADDR
// if amount < min then
58601: LD_VAR 0 9
58605: PUSH
58606: LD_VAR 0 3
58610: LESS
58611: IFFALSE 58629
// r := r * 2 else
58613: LD_ADDR_VAR 0 7
58617: PUSH
58618: LD_VAR 0 7
58622: PUSH
58623: LD_INT 2
58625: MUL
58626: ST_TO_ADDR
58627: GO 58655
// if amount > max then
58629: LD_VAR 0 9
58633: PUSH
58634: LD_VAR 0 4
58638: GREATER
58639: IFFALSE 58655
// r := r / 2 ;
58641: LD_ADDR_VAR 0 7
58645: PUSH
58646: LD_VAR 0 7
58650: PUSH
58651: LD_INT 2
58653: DIVREAL
58654: ST_TO_ADDR
// time := time / r ;
58655: LD_ADDR_VAR 0 8
58659: PUSH
58660: LD_VAR 0 8
58664: PUSH
58665: LD_VAR 0 7
58669: DIVREAL
58670: ST_TO_ADDR
// if time < 0 then
58671: LD_VAR 0 8
58675: PUSH
58676: LD_INT 0
58678: LESS
58679: IFFALSE 58696
// time := time * - 1 ;
58681: LD_ADDR_VAR 0 8
58685: PUSH
58686: LD_VAR 0 8
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: MUL
58695: ST_TO_ADDR
// wait ( time ) ;
58696: LD_VAR 0 8
58700: PPUSH
58701: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58705: LD_INT 35
58707: PPUSH
58708: LD_INT 875
58710: PPUSH
58711: CALL_OW 12
58715: PPUSH
58716: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58720: LD_INT 1
58722: PPUSH
58723: LD_INT 5
58725: PPUSH
58726: CALL_OW 12
58730: PPUSH
58731: LD_VAR 0 1
58735: PPUSH
58736: LD_INT 1
58738: PPUSH
58739: CALL_OW 55
// end ;
58743: GO 58553
// end ;
58745: LD_VAR 0 5
58749: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58750: LD_INT 0
58752: PPUSH
58753: PPUSH
58754: PPUSH
58755: PPUSH
58756: PPUSH
58757: PPUSH
58758: PPUSH
58759: PPUSH
// if not turrets or not factories then
58760: LD_VAR 0 1
58764: NOT
58765: PUSH
58766: LD_VAR 0 2
58770: NOT
58771: OR
58772: IFFALSE 58776
// exit ;
58774: GO 59083
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58776: LD_ADDR_VAR 0 10
58780: PUSH
58781: LD_INT 5
58783: PUSH
58784: LD_INT 6
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: LD_INT 4
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: LD_INT 5
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 24
58818: PUSH
58819: LD_INT 25
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 23
58828: PUSH
58829: LD_INT 27
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 42
58842: PUSH
58843: LD_INT 43
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 44
58852: PUSH
58853: LD_INT 46
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 45
58862: PUSH
58863: LD_INT 47
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: LIST
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: LIST
58879: ST_TO_ADDR
// result := [ ] ;
58880: LD_ADDR_VAR 0 3
58884: PUSH
58885: EMPTY
58886: ST_TO_ADDR
// for i in turrets do
58887: LD_ADDR_VAR 0 4
58891: PUSH
58892: LD_VAR 0 1
58896: PUSH
58897: FOR_IN
58898: IFFALSE 59081
// begin nat := GetNation ( i ) ;
58900: LD_ADDR_VAR 0 7
58904: PUSH
58905: LD_VAR 0 4
58909: PPUSH
58910: CALL_OW 248
58914: ST_TO_ADDR
// weapon := 0 ;
58915: LD_ADDR_VAR 0 8
58919: PUSH
58920: LD_INT 0
58922: ST_TO_ADDR
// if not nat then
58923: LD_VAR 0 7
58927: NOT
58928: IFFALSE 58932
// continue ;
58930: GO 58897
// for j in list [ nat ] do
58932: LD_ADDR_VAR 0 5
58936: PUSH
58937: LD_VAR 0 10
58941: PUSH
58942: LD_VAR 0 7
58946: ARRAY
58947: PUSH
58948: FOR_IN
58949: IFFALSE 58990
// if GetBWeapon ( i ) = j [ 1 ] then
58951: LD_VAR 0 4
58955: PPUSH
58956: CALL_OW 269
58960: PUSH
58961: LD_VAR 0 5
58965: PUSH
58966: LD_INT 1
58968: ARRAY
58969: EQUAL
58970: IFFALSE 58988
// begin weapon := j [ 2 ] ;
58972: LD_ADDR_VAR 0 8
58976: PUSH
58977: LD_VAR 0 5
58981: PUSH
58982: LD_INT 2
58984: ARRAY
58985: ST_TO_ADDR
// break ;
58986: GO 58990
// end ;
58988: GO 58948
58990: POP
58991: POP
// if not weapon then
58992: LD_VAR 0 8
58996: NOT
58997: IFFALSE 59001
// continue ;
58999: GO 58897
// for k in factories do
59001: LD_ADDR_VAR 0 6
59005: PUSH
59006: LD_VAR 0 2
59010: PUSH
59011: FOR_IN
59012: IFFALSE 59077
// begin weapons := AvailableWeaponList ( k ) ;
59014: LD_ADDR_VAR 0 9
59018: PUSH
59019: LD_VAR 0 6
59023: PPUSH
59024: CALL_OW 478
59028: ST_TO_ADDR
// if not weapons then
59029: LD_VAR 0 9
59033: NOT
59034: IFFALSE 59038
// continue ;
59036: GO 59011
// if weapon in weapons then
59038: LD_VAR 0 8
59042: PUSH
59043: LD_VAR 0 9
59047: IN
59048: IFFALSE 59075
// begin result := [ i , weapon ] ;
59050: LD_ADDR_VAR 0 3
59054: PUSH
59055: LD_VAR 0 4
59059: PUSH
59060: LD_VAR 0 8
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: ST_TO_ADDR
// exit ;
59069: POP
59070: POP
59071: POP
59072: POP
59073: GO 59083
// end ; end ;
59075: GO 59011
59077: POP
59078: POP
// end ;
59079: GO 58897
59081: POP
59082: POP
// end ;
59083: LD_VAR 0 3
59087: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59088: LD_INT 0
59090: PPUSH
// if not side or side > 8 then
59091: LD_VAR 0 3
59095: NOT
59096: PUSH
59097: LD_VAR 0 3
59101: PUSH
59102: LD_INT 8
59104: GREATER
59105: OR
59106: IFFALSE 59110
// exit ;
59108: GO 59169
// if not range then
59110: LD_VAR 0 4
59114: NOT
59115: IFFALSE 59126
// range := - 12 ;
59117: LD_ADDR_VAR 0 4
59121: PUSH
59122: LD_INT 12
59124: NEG
59125: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59126: LD_VAR 0 1
59130: PPUSH
59131: LD_VAR 0 2
59135: PPUSH
59136: LD_VAR 0 3
59140: PPUSH
59141: LD_VAR 0 4
59145: PPUSH
59146: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59150: LD_VAR 0 1
59154: PPUSH
59155: LD_VAR 0 2
59159: PPUSH
59160: LD_VAR 0 3
59164: PPUSH
59165: CALL_OW 331
// end ;
59169: LD_VAR 0 5
59173: RET
// export function Video ( mode ) ; begin
59174: LD_INT 0
59176: PPUSH
// ingame_video = mode ;
59177: LD_ADDR_OWVAR 52
59181: PUSH
59182: LD_VAR 0 1
59186: ST_TO_ADDR
// interface_hidden = mode ;
59187: LD_ADDR_OWVAR 54
59191: PUSH
59192: LD_VAR 0 1
59196: ST_TO_ADDR
// end ;
59197: LD_VAR 0 2
59201: RET
// export function Join ( array , element ) ; begin
59202: LD_INT 0
59204: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59205: LD_ADDR_VAR 0 3
59209: PUSH
59210: LD_VAR 0 1
59214: PPUSH
59215: LD_VAR 0 1
59219: PUSH
59220: LD_INT 1
59222: PLUS
59223: PPUSH
59224: LD_VAR 0 2
59228: PPUSH
59229: CALL_OW 1
59233: ST_TO_ADDR
// end ;
59234: LD_VAR 0 3
59238: RET
// export function JoinUnion ( array , element ) ; begin
59239: LD_INT 0
59241: PPUSH
// result := array union element ;
59242: LD_ADDR_VAR 0 3
59246: PUSH
59247: LD_VAR 0 1
59251: PUSH
59252: LD_VAR 0 2
59256: UNION
59257: ST_TO_ADDR
// end ;
59258: LD_VAR 0 3
59262: RET
// export function GetBehemoths ( side ) ; begin
59263: LD_INT 0
59265: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59266: LD_ADDR_VAR 0 2
59270: PUSH
59271: LD_INT 22
59273: PUSH
59274: LD_VAR 0 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 31
59285: PUSH
59286: LD_INT 25
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PPUSH
59297: CALL_OW 69
59301: ST_TO_ADDR
// end ;
59302: LD_VAR 0 2
59306: RET
// export function Shuffle ( array ) ; var i , index ; begin
59307: LD_INT 0
59309: PPUSH
59310: PPUSH
59311: PPUSH
// result := [ ] ;
59312: LD_ADDR_VAR 0 2
59316: PUSH
59317: EMPTY
59318: ST_TO_ADDR
// if not array then
59319: LD_VAR 0 1
59323: NOT
59324: IFFALSE 59328
// exit ;
59326: GO 59427
// Randomize ;
59328: CALL_OW 10
// for i = array downto 1 do
59332: LD_ADDR_VAR 0 3
59336: PUSH
59337: DOUBLE
59338: LD_VAR 0 1
59342: INC
59343: ST_TO_ADDR
59344: LD_INT 1
59346: PUSH
59347: FOR_DOWNTO
59348: IFFALSE 59425
// begin index := rand ( 1 , array ) ;
59350: LD_ADDR_VAR 0 4
59354: PUSH
59355: LD_INT 1
59357: PPUSH
59358: LD_VAR 0 1
59362: PPUSH
59363: CALL_OW 12
59367: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59368: LD_ADDR_VAR 0 2
59372: PUSH
59373: LD_VAR 0 2
59377: PPUSH
59378: LD_VAR 0 2
59382: PUSH
59383: LD_INT 1
59385: PLUS
59386: PPUSH
59387: LD_VAR 0 1
59391: PUSH
59392: LD_VAR 0 4
59396: ARRAY
59397: PPUSH
59398: CALL_OW 2
59402: ST_TO_ADDR
// array := Delete ( array , index ) ;
59403: LD_ADDR_VAR 0 1
59407: PUSH
59408: LD_VAR 0 1
59412: PPUSH
59413: LD_VAR 0 4
59417: PPUSH
59418: CALL_OW 3
59422: ST_TO_ADDR
// end ;
59423: GO 59347
59425: POP
59426: POP
// end ;
59427: LD_VAR 0 2
59431: RET
// export function GetBaseMaterials ( base ) ; begin
59432: LD_INT 0
59434: PPUSH
// result := [ 0 , 0 , 0 ] ;
59435: LD_ADDR_VAR 0 2
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: LIST
59453: ST_TO_ADDR
// if not base then
59454: LD_VAR 0 1
59458: NOT
59459: IFFALSE 59463
// exit ;
59461: GO 59512
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59463: LD_ADDR_VAR 0 2
59467: PUSH
59468: LD_VAR 0 1
59472: PPUSH
59473: LD_INT 1
59475: PPUSH
59476: CALL_OW 275
59480: PUSH
59481: LD_VAR 0 1
59485: PPUSH
59486: LD_INT 2
59488: PPUSH
59489: CALL_OW 275
59493: PUSH
59494: LD_VAR 0 1
59498: PPUSH
59499: LD_INT 3
59501: PPUSH
59502: CALL_OW 275
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: LIST
59511: ST_TO_ADDR
// end ;
59512: LD_VAR 0 2
59516: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59517: LD_INT 0
59519: PPUSH
59520: PPUSH
// result := array ;
59521: LD_ADDR_VAR 0 3
59525: PUSH
59526: LD_VAR 0 1
59530: ST_TO_ADDR
// if size > 0 then
59531: LD_VAR 0 2
59535: PUSH
59536: LD_INT 0
59538: GREATER
59539: IFFALSE 59585
// for i := array downto size do
59541: LD_ADDR_VAR 0 4
59545: PUSH
59546: DOUBLE
59547: LD_VAR 0 1
59551: INC
59552: ST_TO_ADDR
59553: LD_VAR 0 2
59557: PUSH
59558: FOR_DOWNTO
59559: IFFALSE 59583
// result := Delete ( result , result ) ;
59561: LD_ADDR_VAR 0 3
59565: PUSH
59566: LD_VAR 0 3
59570: PPUSH
59571: LD_VAR 0 3
59575: PPUSH
59576: CALL_OW 3
59580: ST_TO_ADDR
59581: GO 59558
59583: POP
59584: POP
// end ;
59585: LD_VAR 0 3
59589: RET
// export function ComExit ( unit ) ; var tmp ; begin
59590: LD_INT 0
59592: PPUSH
59593: PPUSH
// if not IsInUnit ( unit ) then
59594: LD_VAR 0 1
59598: PPUSH
59599: CALL_OW 310
59603: NOT
59604: IFFALSE 59608
// exit ;
59606: GO 59668
// tmp := IsInUnit ( unit ) ;
59608: LD_ADDR_VAR 0 3
59612: PUSH
59613: LD_VAR 0 1
59617: PPUSH
59618: CALL_OW 310
59622: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59623: LD_VAR 0 3
59627: PPUSH
59628: CALL_OW 247
59632: PUSH
59633: LD_INT 2
59635: EQUAL
59636: IFFALSE 59649
// ComExitVehicle ( unit ) else
59638: LD_VAR 0 1
59642: PPUSH
59643: CALL_OW 121
59647: GO 59658
// ComExitBuilding ( unit ) ;
59649: LD_VAR 0 1
59653: PPUSH
59654: CALL_OW 122
// result := tmp ;
59658: LD_ADDR_VAR 0 2
59662: PUSH
59663: LD_VAR 0 3
59667: ST_TO_ADDR
// end ;
59668: LD_VAR 0 2
59672: RET
// export function ResetHc ; begin
59673: LD_INT 0
59675: PPUSH
// InitHc ;
59676: CALL_OW 19
// hc_importance := 0 ;
59680: LD_ADDR_OWVAR 32
59684: PUSH
59685: LD_INT 0
59687: ST_TO_ADDR
// end ;
59688: LD_VAR 0 1
59692: RET
