// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; export achievement_DestroyedHovercrafts ; export achievement_CollectedCrates ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 242 0 0
// omarStatus = 0 ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// stevensStatus = 0 ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// labDestroyed = 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  48: LD_ADDR_EXP 5
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  55: LD_ADDR_EXP 6
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  62: LD_ADDR_EXP 4
  66: PUSH
  67: LD_STRING 05_TanksIntro_1
  69: PPUSH
  70: EMPTY
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// actionTime = 0 0$00 ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  85: LD_ADDR_EXP 10
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
  93: LD_ADDR_EXP 11
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// sawArabianBase = false ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// sawApeman = false ;
 109: LD_ADDR_EXP 9
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// stevensPlaced = false ;
 117: LD_ADDR_EXP 14
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// stevensFollow = false ;
 125: LD_ADDR_EXP 15
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// stevensDepot = false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// stevensWasInDepot = false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// stevensCanExitMap = false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// cratesSpawned = 0 ;
 165: LD_ADDR_EXP 22
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// fastBreakthrough = false ;
 173: LD_ADDR_EXP 23
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// finishMissionBool = false ;
 181: LD_ADDR_EXP 24
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// omarCanExitMap = false ;
 189: LD_ADDR_EXP 20
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// arabianCanExitMap = false ;
 197: LD_ADDR_EXP 21
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// achievement_DestroyedHovercrafts = 0 ;
 205: LD_ADDR_EXP 25
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// achievement_CollectedCrates = false ;
 213: LD_ADDR_EXP 26
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// PrepareRussians ;
 221: CALL 901 0 0
// PrepareArabians ;
 225: CALL 1648 0 0
// Nef_PrepareNature ;
 229: CALL 19925 0 0
// MissionIntro ;
 233: CALL 2980 0 0
// end ; end_of_file
 237: LD_VAR 0 1
 241: RET
// export function InitMapConfig ; begin
 242: LD_INT 0
 244: PPUSH
// BaseMapConfig ;
 245: CALL 258 0 0
// MissionMapConfig ;
 249: CALL 348 0 0
// end ;
 253: LD_VAR 0 1
 257: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 258: LD_INT 0
 260: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 261: LD_ADDR_EXP 27
 265: PUSH
 266: LD_INT 4
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: LD_INT 0
 277: PUSH
 278: LD_INT 0
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: LIST
 287: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 2
 295: PUSH
 296: LD_INT 2
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: LD_INT 2
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: LIST
 309: LIST
 310: ST_TO_ADDR
// animalsAgression = 0 ;
 311: LD_ADDR_EXP 29
 315: PUSH
 316: LD_INT 0
 318: ST_TO_ADDR
// debugMode = 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// missionPrefix = 05_ ;
 327: LD_ADDR_EXP 30
 331: PUSH
 332: LD_STRING 05_
 334: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 335: LD_ADDR_EXP 31
 339: PUSH
 340: LD_STRING 04_
 342: ST_TO_ADDR
// end ;
 343: LD_VAR 0 1
 347: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 348: LD_INT 0
 350: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 ] [ Difficulty ] ;
 351: LD_ADDR_EXP 33
 355: PUSH
 356: LD_INT 3
 358: PUSH
 359: LD_INT 3
 361: PUSH
 362: LD_INT 4
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: PUSH
 370: LD_OWVAR 67
 374: ARRAY
 375: ST_TO_ADDR
// arabBreakthrough = [ 35 35$0 , 33 33$0 , 30 30$0 ] [ Difficulty ] ;
 376: LD_ADDR_EXP 34
 380: PUSH
 381: LD_INT 73500
 383: PUSH
 384: LD_INT 69300
 386: PUSH
 387: LD_INT 63000
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: PUSH
 395: LD_OWVAR 67
 399: ARRAY
 400: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 401: LD_ADDR_EXP 35
 405: PUSH
 406: LD_INT 2
 408: PUSH
 409: LD_INT 1
 411: PUSH
 412: LD_INT 6
 414: PUSH
 415: LD_INT 3
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: ST_TO_ADDR
// arabianPatrolVehiclesAmount = 1 ;
 424: LD_ADDR_EXP 36
 428: PUSH
 429: LD_INT 1
 431: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 ] [ Difficulty ] ;
 432: LD_ADDR_EXP 37
 436: PUSH
 437: LD_INT 2
 439: PUSH
 440: LD_INT 3
 442: PUSH
 443: LD_INT 3
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_OWVAR 67
 455: ARRAY
 456: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 457: LD_ADDR_EXP 38
 461: PUSH
 462: LD_INT 108
 464: PUSH
 465: LD_INT 15
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PUSH
 472: LD_INT 102
 474: PUSH
 475: LD_INT 45
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 65
 484: PUSH
 485: LD_INT 23
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 37
 494: PUSH
 495: LD_INT 28
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 32
 504: PUSH
 505: LD_INT 40
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 45
 514: PUSH
 515: LD_INT 74
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 69
 524: PUSH
 525: LD_INT 98
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 101
 534: PUSH
 535: LD_INT 101
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 117
 544: PUSH
 545: LD_INT 84
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 158
 554: PUSH
 555: LD_INT 132
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: ST_TO_ADDR
// end ;
 574: LD_VAR 0 1
 578: RET
// every 0 0$1 trigger debugMode do var i ;
 579: LD_EXP 32
 583: IFFALSE 898
 585: GO 587
 587: DISABLE
 588: LD_INT 0
 590: PPUSH
// begin enable ;
 591: ENABLE
// FogOff ( your_side ) ;
 592: LD_OWVAR 2
 596: PPUSH
 597: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 601: LD_ADDR_VAR 0 1
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_OWVAR 2
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 2
 620: PUSH
 621: LD_INT 21
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 21
 633: PUSH
 634: LD_INT 2
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PPUSH
 650: CALL_OW 69
 654: PUSH
 655: FOR_IN
 656: IFFALSE 672
// SetLives ( i , 1000 ) ;
 658: LD_VAR 0 1
 662: PPUSH
 663: LD_INT 1000
 665: PPUSH
 666: CALL_OW 234
 670: GO 655
 672: POP
 673: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 674: LD_ADDR_VAR 0 1
 678: PUSH
 679: LD_INT 22
 681: PUSH
 682: LD_OWVAR 2
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 21
 693: PUSH
 694: LD_INT 1
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PPUSH
 705: CALL_OW 69
 709: PUSH
 710: FOR_IN
 711: IFFALSE 775
// begin SetSkill ( i , skill_combat , 10 ) ;
 713: LD_VAR 0 1
 717: PPUSH
 718: LD_INT 1
 720: PPUSH
 721: LD_INT 10
 723: PPUSH
 724: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 728: LD_VAR 0 1
 732: PPUSH
 733: LD_INT 2
 735: PPUSH
 736: LD_INT 10
 738: PPUSH
 739: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 743: LD_VAR 0 1
 747: PPUSH
 748: LD_INT 3
 750: PPUSH
 751: LD_INT 10
 753: PPUSH
 754: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 758: LD_VAR 0 1
 762: PPUSH
 763: LD_INT 4
 765: PPUSH
 766: LD_INT 10
 768: PPUSH
 769: CALL_OW 237
// end ;
 773: GO 710
 775: POP
 776: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 777: LD_ADDR_VAR 0 1
 781: PUSH
 782: LD_INT 22
 784: PUSH
 785: LD_OWVAR 2
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 2
 796: PUSH
 797: LD_INT 30
 799: PUSH
 800: LD_INT 0
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 30
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: LIST
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PPUSH
 826: CALL_OW 69
 830: PUSH
 831: FOR_IN
 832: IFFALSE 896
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 834: LD_VAR 0 1
 838: PPUSH
 839: CALL_OW 274
 843: PPUSH
 844: LD_INT 1
 846: PPUSH
 847: LD_INT 9999
 849: PPUSH
 850: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 854: LD_VAR 0 1
 858: PPUSH
 859: CALL_OW 274
 863: PPUSH
 864: LD_INT 2
 866: PPUSH
 867: LD_INT 9999
 869: PPUSH
 870: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 874: LD_VAR 0 1
 878: PPUSH
 879: CALL_OW 274
 883: PPUSH
 884: LD_INT 3
 886: PPUSH
 887: LD_INT 9999
 889: PPUSH
 890: CALL_OW 277
// end ;
 894: GO 831
 896: POP
 897: POP
// end ; end_of_file
 898: PPOPN 1
 900: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 901: LD_INT 0
 903: PPUSH
// PrepareHeroes ;
 904: CALL 913 0 0
// end ;
 908: LD_VAR 0 1
 912: RET
// function PrepareHeroes ; var i , car ; begin
 913: LD_INT 0
 915: PPUSH
 916: PPUSH
 917: PPUSH
// ruCars = [ ] ;
 918: LD_ADDR_EXP 48
 922: PUSH
 923: EMPTY
 924: ST_TO_ADDR
// uc_side = 3 ;
 925: LD_ADDR_OWVAR 20
 929: PUSH
 930: LD_INT 3
 932: ST_TO_ADDR
// uc_nation = 3 ;
 933: LD_ADDR_OWVAR 21
 937: PUSH
 938: LD_INT 3
 940: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 941: LD_ADDR_EXP 39
 945: PUSH
 946: LD_STRING Burlak
 948: PPUSH
 949: LD_INT 1
 951: PPUSH
 952: LD_INT 3
 954: PPUSH
 955: CALL 8513 0 3
 959: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 960: LD_ADDR_EXP 44
 964: PUSH
 965: LD_STRING Titov
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: LD_INT 1
 973: PPUSH
 974: CALL 8513 0 3
 978: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 979: LD_ADDR_EXP 45
 983: PUSH
 984: LD_STRING Dolgov
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: LD_INT 4
 992: PPUSH
 993: CALL 8513 0 3
 997: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
 998: LD_ADDR_EXP 46
1002: PUSH
1003: LD_STRING Lipshchin
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: LD_INT 1
1011: PPUSH
1012: CALL 8513 0 3
1016: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1017: LD_ADDR_EXP 40
1021: PUSH
1022: LD_STRING Karamazov
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: LD_INT 2
1030: PPUSH
1031: CALL 8513 0 3
1035: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1036: LD_ADDR_EXP 41
1040: PUSH
1041: LD_STRING Petrovova
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL 8513 0 3
1054: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1055: LD_ADDR_EXP 42
1059: PUSH
1060: LD_STRING Gleb
1062: PPUSH
1063: LD_INT 0
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL 8513 0 3
1073: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1074: LD_ADDR_EXP 43
1078: PUSH
1079: LD_STRING Petrosyan
1081: PPUSH
1082: LD_INT 0
1084: PPUSH
1085: LD_INT 4
1087: PPUSH
1088: CALL 8513 0 3
1092: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1093: LD_ADDR_EXP 47
1097: PUSH
1098: LD_STRING Platonov
1100: PPUSH
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL 8513 0 3
1111: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1112: LD_ADDR_VAR 0 2
1116: PUSH
1117: DOUBLE
1118: LD_INT 1
1120: DEC
1121: ST_TO_ADDR
1122: LD_EXP 4
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1506
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1130: LD_ADDR_OWVAR 37
1134: PUSH
1135: LD_EXP 4
1139: PUSH
1140: LD_VAR 0 2
1144: ARRAY
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1150: LD_ADDR_OWVAR 39
1154: PUSH
1155: LD_EXP 4
1159: PUSH
1160: LD_VAR 0 2
1164: ARRAY
1165: PUSH
1166: LD_INT 2
1168: ARRAY
1169: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1170: LD_ADDR_OWVAR 38
1174: PUSH
1175: LD_EXP 4
1179: PUSH
1180: LD_VAR 0 2
1184: ARRAY
1185: PUSH
1186: LD_INT 3
1188: ARRAY
1189: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1190: LD_ADDR_OWVAR 40
1194: PUSH
1195: LD_EXP 4
1199: PUSH
1200: LD_VAR 0 2
1204: ARRAY
1205: PUSH
1206: LD_INT 4
1208: ARRAY
1209: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1210: LD_ADDR_OWVAR 24
1214: PUSH
1215: LD_INT 3
1217: PPUSH
1218: LD_INT 4
1220: PPUSH
1221: CALL_OW 12
1225: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1226: LD_ADDR_OWVAR 41
1230: PUSH
1231: LD_INT 25
1233: PPUSH
1234: LD_INT 40
1236: PPUSH
1237: CALL_OW 12
1241: ST_TO_ADDR
// car := CreateVehicle ;
1242: LD_ADDR_VAR 0 3
1246: PUSH
1247: CALL_OW 45
1251: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1252: LD_ADDR_EXP 48
1256: PUSH
1257: LD_EXP 48
1261: PUSH
1262: LD_VAR 0 3
1266: ADD
1267: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1268: LD_EXP 4
1272: PUSH
1273: LD_VAR 0 2
1277: ARRAY
1278: PUSH
1279: LD_INT 5
1281: ARRAY
1282: PUSH
1283: LD_STRING Bur
1285: DOUBLE
1286: EQUAL
1287: IFTRUE 1291
1289: GO 1308
1291: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1292: LD_EXP 39
1296: PPUSH
1297: LD_VAR 0 3
1301: PPUSH
1302: CALL_OW 52
1306: GO 1484
1308: LD_STRING Kar
1310: DOUBLE
1311: EQUAL
1312: IFTRUE 1316
1314: GO 1333
1316: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1317: LD_EXP 40
1321: PPUSH
1322: LD_VAR 0 3
1326: PPUSH
1327: CALL_OW 52
1331: GO 1484
1333: LD_STRING Ptr
1335: DOUBLE
1336: EQUAL
1337: IFTRUE 1341
1339: GO 1358
1341: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1342: LD_EXP 41
1346: PPUSH
1347: LD_VAR 0 3
1351: PPUSH
1352: CALL_OW 52
1356: GO 1484
1358: LD_STRING Glb
1360: DOUBLE
1361: EQUAL
1362: IFTRUE 1366
1364: GO 1383
1366: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1367: LD_EXP 42
1371: PPUSH
1372: LD_VAR 0 3
1376: PPUSH
1377: CALL_OW 52
1381: GO 1484
1383: LD_STRING Pet
1385: DOUBLE
1386: EQUAL
1387: IFTRUE 1391
1389: GO 1408
1391: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1392: LD_EXP 43
1396: PPUSH
1397: LD_VAR 0 3
1401: PPUSH
1402: CALL_OW 52
1406: GO 1484
1408: LD_STRING Dol
1410: DOUBLE
1411: EQUAL
1412: IFTRUE 1416
1414: GO 1433
1416: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1417: LD_EXP 45
1421: PPUSH
1422: LD_VAR 0 3
1426: PPUSH
1427: CALL_OW 52
1431: GO 1484
1433: LD_STRING Lip
1435: DOUBLE
1436: EQUAL
1437: IFTRUE 1441
1439: GO 1458
1441: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1442: LD_EXP 46
1446: PPUSH
1447: LD_VAR 0 3
1451: PPUSH
1452: CALL_OW 52
1456: GO 1484
1458: LD_STRING Tit
1460: DOUBLE
1461: EQUAL
1462: IFTRUE 1466
1464: GO 1483
1466: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1467: LD_EXP 44
1471: PPUSH
1472: LD_VAR 0 3
1476: PPUSH
1477: CALL_OW 52
1481: GO 1484
1483: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1484: LD_VAR 0 3
1488: PPUSH
1489: LD_INT 251
1491: PPUSH
1492: LD_INT 800
1494: PPUSH
1495: CALL_OW 12
1499: PPUSH
1500: CALL_OW 234
// end ;
1504: GO 1127
1506: POP
1507: POP
// for i in ruCars do
1508: LD_ADDR_VAR 0 2
1512: PUSH
1513: LD_EXP 48
1517: PUSH
1518: FOR_IN
1519: IFFALSE 1538
// PlaceUnitArea ( i , ru_place2 , false ) ;
1521: LD_VAR 0 2
1525: PPUSH
1526: LD_INT 18
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
1536: GO 1518
1538: POP
1539: POP
// RevealFogArea ( 3 , co_vidi ) ;
1540: LD_INT 3
1542: PPUSH
1543: LD_INT 19
1545: PPUSH
1546: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1550: LD_EXP 48
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1562: LD_INT 4
1564: PPUSH
1565: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1569: LD_EXP 39
1573: PPUSH
1574: CALL_OW 310
1578: PPUSH
1579: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1583: LD_INT 3
1585: PPUSH
1586: LD_INT 22
1588: PUSH
1589: LD_INT 3
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 21
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PPUSH
1610: CALL_OW 70
1614: PUSH
1615: LD_INT 5
1617: LESS
1618: IFFALSE 1643
// begin wait ( 0 0$1 ) ;
1620: LD_INT 35
1622: PPUSH
1623: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1627: LD_EXP 39
1631: PPUSH
1632: CALL_OW 310
1636: PPUSH
1637: CALL_OW 85
// end ;
1641: GO 1583
// end ; end_of_file
1643: LD_VAR 0 1
1647: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts , arabianPatrolTroops ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1648: LD_INT 0
1650: PPUSH
// arabianUnitsInBase = [ ] ;
1651: LD_ADDR_EXP 51
1655: PUSH
1656: EMPTY
1657: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1658: LD_ADDR_EXP 53
1662: PUSH
1663: EMPTY
1664: ST_TO_ADDR
// arabianPatrolTroops = [ ] ;
1665: LD_ADDR_EXP 54
1669: PUSH
1670: EMPTY
1671: ST_TO_ADDR
// arabLeftExit = true ;
1672: LD_ADDR_EXP 55
1676: PUSH
1677: LD_INT 1
1679: ST_TO_ADDR
// PrepareHeroes ;
1680: CALL 1713 0 0
// PrepareBuildings ;
1684: CALL 1779 0 0
// PrepareUnits ;
1688: CALL 2131 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1692: LD_EXP 36
1696: PPUSH
1697: LD_INT 42
1699: PPUSH
1700: CALL 2668 0 2
// PrepareArabianHovercraft ;
1704: CALL 2827 0 0
// end ;
1708: LD_VAR 0 1
1712: RET
// function PrepareHeroes ; begin
1713: LD_INT 0
1715: PPUSH
// uc_side = 2 ;
1716: LD_ADDR_OWVAR 20
1720: PUSH
1721: LD_INT 2
1723: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1724: LD_ADDR_EXP 49
1728: PUSH
1729: LD_STRING Heike
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL 8513 0 3
1742: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1743: LD_ADDR_EXP 50
1747: PUSH
1748: LD_STRING Omar
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: LD_INT 11
1756: PPUSH
1757: CALL 8513 0 3
1761: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1762: LD_EXP 50
1766: PPUSH
1767: LD_INT 1
1769: PPUSH
1770: CALL_OW 52
// end ;
1774: LD_VAR 0 1
1778: RET
// function PrepareBuildings ; var depot ; begin
1779: LD_INT 0
1781: PPUSH
1782: PPUSH
// uc_side = 2 ;
1783: LD_ADDR_OWVAR 20
1787: PUSH
1788: LD_INT 2
1790: ST_TO_ADDR
// uc_nation = nation_arabian ;
1791: LD_ADDR_OWVAR 21
1795: PUSH
1796: LD_INT 2
1798: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1799: LD_ADDR_OWVAR 43
1803: PUSH
1804: LD_EXP 33
1808: ST_TO_ADDR
// bc_type = b_breastwork ;
1809: LD_ADDR_OWVAR 42
1813: PUSH
1814: LD_INT 31
1816: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1817: LD_INT 118
1819: PPUSH
1820: LD_INT 63
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1830: LD_INT 120
1832: PPUSH
1833: LD_INT 66
1835: PPUSH
1836: LD_INT 1
1838: PPUSH
1839: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1843: LD_INT 123
1845: PPUSH
1846: LD_INT 73
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL_OW 47
// if Difficulty = 2 then
1856: LD_OWVAR 67
1860: PUSH
1861: LD_INT 2
1863: EQUAL
1864: IFFALSE 1879
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1866: LD_INT 145
1868: PPUSH
1869: LD_INT 83
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 47
// if Difficulty = 3 then
1879: LD_OWVAR 67
1883: PUSH
1884: LD_INT 3
1886: EQUAL
1887: IFFALSE 1915
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1889: LD_INT 145
1891: PPUSH
1892: LD_INT 83
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1902: LD_INT 151
1904: PPUSH
1905: LD_INT 81
1907: PPUSH
1908: LD_INT 5
1910: PPUSH
1911: CALL_OW 47
// end ; bc_type = b_depot ;
1915: LD_ADDR_OWVAR 42
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1923: LD_ADDR_VAR 0 2
1927: PUSH
1928: LD_INT 124
1930: PPUSH
1931: LD_INT 60
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL_OW 47
1941: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1942: LD_VAR 0 2
1946: PPUSH
1947: CALL_OW 274
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: LD_INT 3000
1957: PPUSH
1958: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1962: LD_INT 131
1964: PPUSH
1965: LD_INT 51
1967: PPUSH
1968: LD_INT 2
1970: PPUSH
1971: CALL_OW 441
// bc_type = b_oil_mine ;
1975: LD_ADDR_OWVAR 42
1979: PUSH
1980: LD_INT 29
1982: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
1983: LD_INT 131
1985: PPUSH
1986: LD_INT 51
1988: PPUSH
1989: LD_INT 2
1991: PPUSH
1992: CALL_OW 47
// case Difficulty of 1 :
1996: LD_OWVAR 67
2000: PUSH
2001: LD_INT 1
2003: DOUBLE
2004: EQUAL
2005: IFTRUE 2009
2007: GO 2025
2009: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2010: LD_INT 48
2012: PPUSH
2013: LD_INT 2
2015: PPUSH
2016: LD_INT 2
2018: PPUSH
2019: CALL_OW 322
// end ; 2 :
2023: GO 2126
2025: LD_INT 2
2027: DOUBLE
2028: EQUAL
2029: IFTRUE 2033
2031: GO 2062
2033: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2034: LD_INT 48
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: LD_INT 2
2042: PPUSH
2043: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2047: LD_INT 51
2049: PPUSH
2050: LD_INT 2
2052: PPUSH
2053: LD_INT 2
2055: PPUSH
2056: CALL_OW 322
// end ; 3 :
2060: GO 2126
2062: LD_INT 3
2064: DOUBLE
2065: EQUAL
2066: IFTRUE 2070
2068: GO 2125
2070: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2071: LD_INT 48
2073: PPUSH
2074: LD_INT 2
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2084: LD_INT 51
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: LD_INT 2
2092: PPUSH
2093: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2097: LD_INT 49
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 2
2105: PPUSH
2106: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2110: LD_INT 52
2112: PPUSH
2113: LD_INT 2
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: CALL_OW 322
// end ; end ;
2123: GO 2126
2125: POP
// end ;
2126: LD_VAR 0 1
2130: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2131: LD_INT 0
2133: PPUSH
2134: PPUSH
2135: PPUSH
2136: PPUSH
// uc_side = 2 ;
2137: LD_ADDR_OWVAR 20
2141: PUSH
2142: LD_INT 2
2144: ST_TO_ADDR
// uc_nation = 2 ;
2145: LD_ADDR_OWVAR 21
2149: PUSH
2150: LD_INT 2
2152: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2153: LD_ADDR_VAR 0 4
2157: PUSH
2158: LD_INT 22
2160: PUSH
2161: LD_INT 2
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 30
2170: PUSH
2171: LD_INT 31
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PPUSH
2182: CALL_OW 69
2186: PUSH
2187: FOR_IN
2188: IFFALSE 2244
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2190: LD_INT 0
2192: PPUSH
2193: LD_EXP 33
2197: PPUSH
2198: CALL_OW 381
// unit = CreateHuman ;
2202: LD_ADDR_VAR 0 3
2206: PUSH
2207: CALL_OW 44
2211: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2212: LD_VAR 0 3
2216: PPUSH
2217: LD_VAR 0 4
2221: PPUSH
2222: CALL 9113 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2226: LD_ADDR_EXP 51
2230: PUSH
2231: LD_EXP 51
2235: PUSH
2236: LD_VAR 0 3
2240: ADD
2241: ST_TO_ADDR
// end ;
2242: GO 2187
2244: POP
2245: POP
// for i := 1 to arabianUnits [ 1 ] do
2246: LD_ADDR_VAR 0 2
2250: PUSH
2251: DOUBLE
2252: LD_INT 1
2254: DEC
2255: ST_TO_ADDR
2256: LD_EXP 35
2260: PUSH
2261: LD_INT 1
2263: ARRAY
2264: PUSH
2265: FOR_TO
2266: IFFALSE 2323
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2268: LD_INT 0
2270: PPUSH
2271: LD_EXP 33
2275: PPUSH
2276: CALL_OW 381
// unit = CreateHuman ;
2280: LD_ADDR_VAR 0 3
2284: PUSH
2285: CALL_OW 44
2289: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2290: LD_VAR 0 3
2294: PPUSH
2295: LD_INT 38
2297: PPUSH
2298: LD_INT 0
2300: PPUSH
2301: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2305: LD_ADDR_EXP 51
2309: PUSH
2310: LD_EXP 51
2314: PUSH
2315: LD_VAR 0 3
2319: ADD
2320: ST_TO_ADDR
// end ;
2321: GO 2265
2323: POP
2324: POP
// for i := 1 to arabianUnits [ 2 ] do
2325: LD_ADDR_VAR 0 2
2329: PUSH
2330: DOUBLE
2331: LD_INT 1
2333: DEC
2334: ST_TO_ADDR
2335: LD_EXP 35
2339: PUSH
2340: LD_INT 2
2342: ARRAY
2343: PUSH
2344: FOR_TO
2345: IFFALSE 2402
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2347: LD_INT 0
2349: PPUSH
2350: LD_EXP 33
2354: PPUSH
2355: CALL_OW 382
// unit = CreateHuman ;
2359: LD_ADDR_VAR 0 3
2363: PUSH
2364: CALL_OW 44
2368: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2369: LD_VAR 0 3
2373: PPUSH
2374: LD_INT 38
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2384: LD_ADDR_EXP 51
2388: PUSH
2389: LD_EXP 51
2393: PUSH
2394: LD_VAR 0 3
2398: ADD
2399: ST_TO_ADDR
// end ;
2400: GO 2344
2402: POP
2403: POP
// for i := 1 to arabianUnits [ 3 ] do
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: DOUBLE
2410: LD_INT 1
2412: DEC
2413: ST_TO_ADDR
2414: LD_EXP 35
2418: PUSH
2419: LD_INT 3
2421: ARRAY
2422: PUSH
2423: FOR_TO
2424: IFFALSE 2481
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2426: LD_INT 0
2428: PPUSH
2429: LD_EXP 33
2433: PPUSH
2434: CALL_OW 383
// unit = CreateHuman ;
2438: LD_ADDR_VAR 0 3
2442: PUSH
2443: CALL_OW 44
2447: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2448: LD_VAR 0 3
2452: PPUSH
2453: LD_INT 38
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2463: LD_ADDR_EXP 51
2467: PUSH
2468: LD_EXP 51
2472: PUSH
2473: LD_VAR 0 3
2477: ADD
2478: ST_TO_ADDR
// end ;
2479: GO 2423
2481: POP
2482: POP
// for i := 1 to arabianUnits [ 4 ] do
2483: LD_ADDR_VAR 0 2
2487: PUSH
2488: DOUBLE
2489: LD_INT 1
2491: DEC
2492: ST_TO_ADDR
2493: LD_EXP 35
2497: PUSH
2498: LD_INT 4
2500: ARRAY
2501: PUSH
2502: FOR_TO
2503: IFFALSE 2560
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2505: LD_INT 0
2507: PPUSH
2508: LD_EXP 33
2512: PPUSH
2513: CALL_OW 384
// unit = CreateHuman ;
2517: LD_ADDR_VAR 0 3
2521: PUSH
2522: CALL_OW 44
2526: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2527: LD_VAR 0 3
2531: PPUSH
2532: LD_INT 38
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2542: LD_ADDR_EXP 51
2546: PUSH
2547: LD_EXP 51
2551: PUSH
2552: LD_VAR 0 3
2556: ADD
2557: ST_TO_ADDR
// end ;
2558: GO 2502
2560: POP
2561: POP
// end ;
2562: LD_VAR 0 1
2566: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2567: LD_INT 0
2569: PPUSH
2570: PPUSH
2571: PPUSH
// uc_side = 2 ;
2572: LD_ADDR_OWVAR 20
2576: PUSH
2577: LD_INT 2
2579: ST_TO_ADDR
// uc_nation = 2 ;
2580: LD_ADDR_OWVAR 21
2584: PUSH
2585: LD_INT 2
2587: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2588: LD_ADDR_VAR 0 2
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_EXP 37
2602: PUSH
2603: FOR_TO
2604: IFFALSE 2661
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2606: LD_INT 0
2608: PPUSH
2609: LD_EXP 33
2613: PPUSH
2614: CALL_OW 381
// unit = CreateHuman ;
2618: LD_ADDR_VAR 0 3
2622: PUSH
2623: CALL_OW 44
2627: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2628: LD_VAR 0 3
2632: PPUSH
2633: LD_INT 45
2635: PPUSH
2636: LD_INT 0
2638: PPUSH
2639: CALL_OW 49
// arabianPatrolTroops = arabianPatrolTroops ^ unit ;
2643: LD_ADDR_EXP 54
2647: PUSH
2648: LD_EXP 54
2652: PUSH
2653: LD_VAR 0 3
2657: ADD
2658: ST_TO_ADDR
// end ;
2659: GO 2603
2661: POP
2662: POP
// end ;
2663: LD_VAR 0 1
2667: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
2672: PPUSH
// uc_side = 2 ;
2673: LD_ADDR_OWVAR 20
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// uc_nation = 2 ;
2681: LD_ADDR_OWVAR 21
2685: PUSH
2686: LD_INT 2
2688: ST_TO_ADDR
// for i := 1 to amount do
2689: LD_ADDR_VAR 0 4
2693: PUSH
2694: DOUBLE
2695: LD_INT 1
2697: DEC
2698: ST_TO_ADDR
2699: LD_VAR 0 1
2703: PUSH
2704: FOR_TO
2705: IFFALSE 2820
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2707: LD_INT 14
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: LD_INT 1
2715: PPUSH
2716: LD_INT 26
2718: PUSH
2719: LD_INT 25
2721: PUSH
2722: LD_INT 27
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 1
2732: PPUSH
2733: LD_INT 3
2735: PPUSH
2736: CALL_OW 12
2740: ARRAY
2741: PPUSH
2742: LD_INT 100
2744: PPUSH
2745: CALL 25947 0 5
// veh = CreateVehicle ;
2749: LD_ADDR_VAR 0 5
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2759: LD_ADDR_EXP 52
2763: PUSH
2764: LD_EXP 52
2768: PUSH
2769: LD_VAR 0 5
2773: ADD
2774: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2775: LD_VAR 0 5
2779: PPUSH
2780: LD_VAR 0 2
2784: PPUSH
2785: LD_INT 0
2787: PPUSH
2788: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2792: LD_INT 0
2794: PPUSH
2795: LD_EXP 33
2799: PPUSH
2800: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2804: CALL_OW 44
2808: PPUSH
2809: LD_VAR 0 5
2813: PPUSH
2814: CALL_OW 52
// end ;
2818: GO 2704
2820: POP
2821: POP
// end ;
2822: LD_VAR 0 3
2826: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2827: LD_INT 0
2829: PPUSH
2830: PPUSH
2831: PPUSH
// uc_side = 2 ;
2832: LD_ADDR_OWVAR 20
2836: PUSH
2837: LD_INT 2
2839: ST_TO_ADDR
// uc_nation = 2 ;
2840: LD_ADDR_OWVAR 21
2844: PUSH
2845: LD_INT 2
2847: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2848: LD_ADDR_VAR 0 2
2852: PUSH
2853: DOUBLE
2854: LD_INT 1
2856: DEC
2857: ST_TO_ADDR
2858: LD_EXP 36
2862: PUSH
2863: FOR_TO
2864: IFFALSE 2973
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2866: LD_INT 11
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: LD_INT 1
2874: PPUSH
2875: LD_INT 24
2877: PUSH
2878: LD_INT 23
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 1
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 12
2895: ARRAY
2896: PPUSH
2897: LD_INT 100
2899: PPUSH
2900: CALL 25947 0 5
// veh = CreateVehicle ;
2904: LD_ADDR_VAR 0 3
2908: PUSH
2909: CALL_OW 45
2913: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2914: LD_ADDR_EXP 53
2918: PUSH
2919: LD_EXP 53
2923: PUSH
2924: LD_VAR 0 3
2928: ADD
2929: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2930: LD_VAR 0 3
2934: PPUSH
2935: LD_INT 47
2937: PPUSH
2938: LD_INT 0
2940: PPUSH
2941: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2945: LD_INT 0
2947: PPUSH
2948: LD_EXP 33
2952: PPUSH
2953: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2957: CALL_OW 44
2961: PPUSH
2962: LD_VAR 0 3
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: GO 2863
2973: POP
2974: POP
// end ; end_of_file
2975: LD_VAR 0 1
2979: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
2980: LD_INT 0
2982: PPUSH
2983: PPUSH
2984: PPUSH
2985: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
2986: LD_ADDR_VAR 0 3
2990: PUSH
2991: LD_INT 66
2993: PUSH
2994: LD_INT 87
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: LD_INT 66
3003: PUSH
3004: LD_INT 86
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 67
3013: PUSH
3014: LD_INT 86
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 69
3023: PUSH
3024: LD_INT 87
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 70
3033: PUSH
3034: LD_INT 88
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 71
3043: PUSH
3044: LD_INT 89
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PUSH
3051: LD_INT 72
3053: PUSH
3054: LD_INT 90
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 72
3063: PUSH
3064: LD_INT 91
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3081: LD_INT 280
3083: PPUSH
3084: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3088: LD_EXP 39
3092: PPUSH
3093: LD_STRING DStart-Bur-1
3095: PPUSH
3096: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3100: LD_EXP 47
3104: PPUSH
3105: LD_STRING DStart-Pla-1
3107: PPUSH
3108: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3112: LD_EXP 39
3116: PPUSH
3117: LD_STRING DStart-Bur-2
3119: PPUSH
3120: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3124: LD_EXP 47
3128: PPUSH
3129: LD_STRING DStart-Pla-2
3131: PPUSH
3132: CALL_OW 94
// x = 0 ;
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3144: LD_ADDR_VAR 0 2
3148: PUSH
3149: LD_INT 22
3151: PUSH
3152: LD_INT 3
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 21
3161: PUSH
3162: LD_INT 1
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PPUSH
3173: CALL_OW 69
3177: PUSH
3178: FOR_IN
3179: IFFALSE 3267
// begin ComExitVehicle ( unit ) ;
3181: LD_VAR 0 2
3185: PPUSH
3186: CALL_OW 121
// wait ( 0 0$1 ) ;
3190: LD_INT 35
3192: PPUSH
3193: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3197: LD_VAR 0 2
3201: PPUSH
3202: LD_VAR 0 3
3206: PUSH
3207: LD_VAR 0 4
3211: ARRAY
3212: PUSH
3213: LD_INT 1
3215: ARRAY
3216: PPUSH
3217: LD_VAR 0 3
3221: PUSH
3222: LD_VAR 0 4
3226: ARRAY
3227: PUSH
3228: LD_INT 2
3230: ARRAY
3231: PPUSH
3232: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 69
3243: PPUSH
3244: LD_INT 96
3246: PPUSH
3247: CALL_OW 178
// x = x + 1 ;
3251: LD_ADDR_VAR 0 4
3255: PUSH
3256: LD_VAR 0 4
3260: PUSH
3261: LD_INT 1
3263: PLUS
3264: ST_TO_ADDR
// end ;
3265: GO 3178
3267: POP
3268: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3269: LD_EXP 39
3273: PPUSH
3274: CALL_OW 87
// x = 0 ;
3278: LD_ADDR_VAR 0 4
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3286: LD_ADDR_VAR 0 2
3290: PUSH
3291: LD_INT 22
3293: PUSH
3294: LD_INT 3
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 21
3303: PUSH
3304: LD_INT 1
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PPUSH
3315: CALL_OW 69
3319: PUSH
3320: FOR_IN
3321: IFFALSE 3393
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3323: LD_VAR 0 2
3327: PPUSH
3328: LD_VAR 0 3
3332: PUSH
3333: LD_VAR 0 4
3337: ARRAY
3338: PUSH
3339: LD_INT 1
3341: ARRAY
3342: PPUSH
3343: LD_VAR 0 3
3347: PUSH
3348: LD_VAR 0 4
3352: ARRAY
3353: PUSH
3354: LD_INT 2
3356: ARRAY
3357: PPUSH
3358: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3362: LD_VAR 0 2
3366: PPUSH
3367: LD_INT 69
3369: PPUSH
3370: LD_INT 96
3372: PPUSH
3373: CALL_OW 178
// x = x + 1 ;
3377: LD_ADDR_VAR 0 4
3381: PUSH
3382: LD_VAR 0 4
3386: PUSH
3387: LD_INT 1
3389: PLUS
3390: ST_TO_ADDR
// end ;
3391: GO 3320
3393: POP
3394: POP
// wait ( 0 0$1 ) ;
3395: LD_INT 35
3397: PPUSH
3398: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3402: LD_EXP 39
3406: PPUSH
3407: LD_INT 70
3409: PPUSH
3410: LD_INT 90
3412: PPUSH
3413: CALL_OW 297
3417: PUSH
3418: LD_INT 7
3420: LESS
3421: PUSH
3422: LD_EXP 40
3426: PPUSH
3427: LD_INT 70
3429: PPUSH
3430: LD_INT 90
3432: PPUSH
3433: CALL_OW 297
3437: PUSH
3438: LD_INT 7
3440: LESS
3441: AND
3442: PUSH
3443: LD_EXP 41
3447: PPUSH
3448: LD_INT 70
3450: PPUSH
3451: LD_INT 90
3453: PPUSH
3454: CALL_OW 297
3458: PUSH
3459: LD_INT 7
3461: LESS
3462: AND
3463: PUSH
3464: LD_EXP 42
3468: PPUSH
3469: LD_INT 70
3471: PPUSH
3472: LD_INT 90
3474: PPUSH
3475: CALL_OW 297
3479: PUSH
3480: LD_INT 7
3482: LESS
3483: AND
3484: PUSH
3485: LD_EXP 46
3489: PPUSH
3490: LD_INT 70
3492: PPUSH
3493: LD_INT 90
3495: PPUSH
3496: CALL_OW 297
3500: PUSH
3501: LD_INT 7
3503: LESS
3504: AND
3505: IFFALSE 3269
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3507: LD_EXP 40
3511: PPUSH
3512: LD_STRING DDoubts-Kar-1
3514: PPUSH
3515: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3519: LD_EXP 41
3523: PPUSH
3524: LD_STRING DDoubts-Ptr-1
3526: PPUSH
3527: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-1 ) ;
3531: LD_EXP 39
3535: PPUSH
3536: LD_STRING DDoubts-Bur-1
3538: PPUSH
3539: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3543: LD_EXP 40
3547: PPUSH
3548: LD_STRING DDoubts-Kar-2
3550: PPUSH
3551: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3555: LD_EXP 42
3559: PPUSH
3560: LD_STRING DDoubts-Glb-2
3562: PPUSH
3563: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3567: LD_EXP 39
3571: PPUSH
3572: LD_STRING DDoubts-Bur-2
3574: PPUSH
3575: CALL_OW 88
// InGameOff ;
3579: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3583: LD_STRING MBegin
3585: PPUSH
3586: CALL_OW 337
// SaveForQuickRestart ;
3590: CALL_OW 22
// BuildBase ;
3594: CALL 10643 0 0
// end ;
3598: LD_VAR 0 1
3602: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3603: LD_EXP 8
3607: NOT
3608: IFFALSE 3868
3610: GO 3612
3612: DISABLE
3613: LD_INT 0
3615: PPUSH
// begin enable ;
3616: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3617: LD_ADDR_VAR 0 1
3621: PUSH
3622: LD_INT 34
3624: PPUSH
3625: LD_INT 22
3627: PUSH
3628: LD_INT 2
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 21
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PPUSH
3649: CALL_OW 70
3653: PUSH
3654: FOR_IN
3655: IFFALSE 3866
// if See ( 3 , unit ) then
3657: LD_INT 3
3659: PPUSH
3660: LD_VAR 0 1
3664: PPUSH
3665: CALL_OW 292
3669: IFFALSE 3864
// begin sawArabianBase = true ;
3671: LD_ADDR_EXP 8
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL_OW 87
// DialogueOn ;
3688: CALL_OW 6
// if IsOk ( Lipshchin ) then
3692: LD_EXP 46
3696: PPUSH
3697: CALL_OW 302
3701: IFFALSE 3715
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3703: LD_EXP 46
3707: PPUSH
3708: LD_STRING DArabs-RSol1-1
3710: PPUSH
3711: CALL_OW 88
// if IsOk ( Karamazov ) then
3715: LD_EXP 40
3719: PPUSH
3720: CALL_OW 302
3724: IFFALSE 3738
// Say ( Karamazov , DArabs-Kar-1 ) ;
3726: LD_EXP 40
3730: PPUSH
3731: LD_STRING DArabs-Kar-1
3733: PPUSH
3734: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3738: LD_EXP 39
3742: PPUSH
3743: LD_STRING DArabs-Bur-1
3745: PPUSH
3746: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3750: LD_EXP 47
3754: PPUSH
3755: LD_STRING DArabs-Pla-1
3757: PPUSH
3758: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3762: LD_EXP 50
3766: PPUSH
3767: LD_STRING DSurrender-Omar-1
3769: PPUSH
3770: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3774: LD_STRING QSurrender
3776: PPUSH
3777: CALL_OW 97
3781: PUSH
3782: LD_INT 1
3784: DOUBLE
3785: EQUAL
3786: IFTRUE 3790
3788: GO 3809
3790: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3791: LD_EXP 39
3795: PPUSH
3796: LD_STRING DQrSurrender#1-Bur-1
3798: PPUSH
3799: CALL_OW 88
// Lose_Survive ;
3803: CALL 17286 0 0
// end ; 2 :
3807: GO 3856
3809: LD_INT 2
3811: DOUBLE
3812: EQUAL
3813: IFTRUE 3817
3815: GO 3832
3817: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3818: LD_EXP 39
3822: PPUSH
3823: LD_STRING DQrSurrender#2-Bur-1
3825: PPUSH
3826: CALL_OW 88
3830: GO 3856
3832: LD_INT 3
3834: DOUBLE
3835: EQUAL
3836: IFTRUE 3840
3838: GO 3855
3840: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3841: LD_EXP 39
3845: PPUSH
3846: LD_STRING DQrSurrender#3-Bur-1
3848: PPUSH
3849: CALL_OW 88
3853: GO 3856
3855: POP
// DialogueOff ;
3856: CALL_OW 7
// exit ;
3860: POP
3861: POP
3862: GO 3868
// end ;
3864: GO 3654
3866: POP
3867: POP
// end ;
3868: PPOPN 1
3870: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3871: LD_EXP 9
3875: NOT
3876: PUSH
3877: LD_INT 1
3879: PPUSH
3880: LD_INT 3
3882: PPUSH
3883: CALL_OW 321
3887: PUSH
3888: LD_INT 1
3890: EQUAL
3891: AND
3892: IFFALSE 4257
3894: GO 3896
3896: DISABLE
3897: LD_INT 0
3899: PPUSH
3900: PPUSH
// begin enable ;
3901: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3902: LD_ADDR_VAR 0 1
3906: PUSH
3907: LD_INT 22
3909: PUSH
3910: LD_INT 0
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PUSH
3917: LD_INT 25
3919: PUSH
3920: LD_INT 12
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PPUSH
3931: CALL_OW 69
3935: PUSH
3936: FOR_IN
3937: IFFALSE 4255
// if See ( 3 , unit ) then
3939: LD_INT 3
3941: PPUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 292
3951: IFFALSE 4253
// begin sawApeman = true ;
3953: LD_ADDR_EXP 9
3957: PUSH
3958: LD_INT 1
3960: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3961: LD_ADDR_VAR 0 2
3965: PUSH
3966: LD_INT 22
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PUSH
3976: LD_INT 21
3978: PUSH
3979: LD_INT 1
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: LD_INT 26
3988: PUSH
3989: LD_INT 1
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 50
3998: PUSH
3999: EMPTY
4000: LIST
4001: PUSH
4002: LD_INT 2
4004: PUSH
4005: LD_INT 25
4007: PUSH
4008: LD_INT 1
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PUSH
4015: LD_INT 25
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: LD_INT 25
4027: PUSH
4028: LD_INT 3
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PUSH
4035: LD_INT 25
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL_OW 69
4063: PPUSH
4064: LD_VAR 0 1
4068: PPUSH
4069: CALL_OW 74
4073: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4074: LD_VAR 0 1
4078: PPUSH
4079: CALL_OW 87
// DialogueOn ;
4083: CALL_OW 6
// if nearUnit = Burlak then
4087: LD_VAR 0 2
4091: PUSH
4092: LD_EXP 39
4096: EQUAL
4097: IFFALSE 4113
// Say ( Burlak , DApeSpot-Bur-1a ) else
4099: LD_EXP 39
4103: PPUSH
4104: LD_STRING DApeSpot-Bur-1a
4106: PPUSH
4107: CALL_OW 88
4111: GO 4125
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4113: LD_VAR 0 2
4117: PPUSH
4118: LD_STRING DApeSpot-RSol1-1
4120: PPUSH
4121: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4125: LD_EXP 39
4129: PPUSH
4130: LD_STRING DApeSpot-Bur-1
4132: PPUSH
4133: CALL_OW 88
// if IsOK ( Petrosyan ) then
4137: LD_EXP 43
4141: PPUSH
4142: CALL_OW 302
4146: IFFALSE 4245
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4148: LD_EXP 43
4152: PPUSH
4153: LD_STRING DApeSpot-Pty-1
4155: PPUSH
4156: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4160: LD_INT 22
4162: PUSH
4163: LD_INT 3
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 21
4172: PUSH
4173: LD_INT 3
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: LD_INT 2
4182: PUSH
4183: LD_INT 30
4185: PUSH
4186: LD_INT 6
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 30
4195: PUSH
4196: LD_INT 7
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: IFFALSE 4233
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4219: LD_EXP 43
4223: PPUSH
4224: LD_STRING DApeSpot-Pty-1a
4226: PPUSH
4227: CALL_OW 88
4231: GO 4245
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4233: LD_EXP 43
4237: PPUSH
4238: LD_STRING DApeSpot-Pty-1b
4240: PPUSH
4241: CALL_OW 88
// end ; DialogueOff ;
4245: CALL_OW 7
// exit ;
4249: POP
4250: POP
4251: GO 4257
// end ;
4253: GO 3936
4255: POP
4256: POP
// end ;
4257: PPOPN 2
4259: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) do
4260: LD_EXP 43
4264: PPUSH
4265: CALL_OW 302
4269: PUSH
4270: LD_INT 22
4272: PUSH
4273: LD_INT 3
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: PUSH
4280: LD_INT 21
4282: PUSH
4283: LD_INT 3
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 2
4292: PUSH
4293: LD_INT 30
4295: PUSH
4296: LD_INT 6
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 30
4305: PUSH
4306: LD_INT 7
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: PPUSH
4323: CALL_OW 69
4327: NOT
4328: AND
4329: IFFALSE 4346
4331: GO 4333
4333: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4334: LD_EXP 43
4338: PPUSH
4339: LD_STRING DApeLab-Pty-1
4341: PPUSH
4342: CALL_OW 88
4346: END
// export function Dial_ResearchApeLang ; begin
4347: LD_INT 0
4349: PPUSH
// DialogueOn ;
4350: CALL_OW 6
// if IsOK ( Petrosyan ) then
4354: LD_EXP 43
4358: PPUSH
4359: CALL_OW 302
4363: IFFALSE 4449
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4365: LD_EXP 43
4369: PPUSH
4370: LD_STRING DApeLangCompl-Pty-1
4372: PPUSH
4373: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4377: LD_EXP 39
4381: PPUSH
4382: LD_STRING DApeLangCompl-Bur-1
4384: PPUSH
4385: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4389: LD_EXP 43
4393: PPUSH
4394: LD_STRING DApeLangCompl-Pty-2
4396: PPUSH
4397: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4401: LD_EXP 39
4405: PPUSH
4406: LD_STRING DApeLangCompl-Bur-2
4408: PPUSH
4409: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4413: LD_EXP 43
4417: PPUSH
4418: LD_STRING DApeLangCompl-Pty-3
4420: PPUSH
4421: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4425: LD_EXP 39
4429: PPUSH
4430: LD_STRING DApeLangCompl-Bur-3
4432: PPUSH
4433: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4437: LD_EXP 43
4441: PPUSH
4442: LD_STRING DApeLangCompl-Pty-4
4444: PPUSH
4445: CALL_OW 88
// end ; DialogueOff ;
4449: CALL_OW 7
// end ;
4453: LD_VAR 0 1
4457: RET
// export function Dial_TameApe ( sci ) ; begin
4458: LD_INT 0
4460: PPUSH
// dial_tameApeBlocker = true ;
4461: LD_ADDR_EXP 10
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4469: LD_VAR 0 1
4473: PPUSH
4474: CALL_OW 258
4478: PUSH
4479: LD_INT 1
4481: EQUAL
4482: IFFALSE 4498
// Say ( sci , DApeTame-Sci1-1 ) else
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_STRING DApeTame-Sci1-1
4491: PPUSH
4492: CALL_OW 88
4496: GO 4662
// begin if IsOK ( Petrosyan ) then
4498: LD_EXP 43
4502: PPUSH
4503: CALL_OW 302
4507: IFFALSE 4523
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4509: LD_EXP 43
4513: PPUSH
4514: LD_STRING DApeTame-Sci1-1
4516: PPUSH
4517: CALL_OW 88
4521: GO 4662
// if IsOK ( Dolgov ) then
4523: LD_EXP 45
4527: PPUSH
4528: CALL_OW 302
4532: IFFALSE 4548
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4534: LD_EXP 45
4538: PPUSH
4539: LD_STRING DApeTame-Sci1-1
4541: PPUSH
4542: CALL_OW 88
4546: GO 4662
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4548: LD_INT 22
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 21
4560: PUSH
4561: LD_INT 1
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 26
4570: PUSH
4571: LD_INT 1
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: PUSH
4578: LD_INT 50
4580: PUSH
4581: EMPTY
4582: LIST
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: LD_INT 25
4589: PUSH
4590: LD_INT 1
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 25
4599: PUSH
4600: LD_INT 2
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 25
4609: PUSH
4610: LD_INT 3
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 25
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: PPUSH
4641: CALL_OW 69
4645: PPUSH
4646: LD_STRING DApeTame-Sci1-1
4648: PPUSH
4649: LD_STRING 
4651: PPUSH
4652: LD_INT 0
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL 8830 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4662: LD_EXP 39
4666: PPUSH
4667: LD_STRING DApeTame-Bur-1
4669: PPUSH
4670: CALL_OW 88
// end ;
4674: LD_VAR 0 2
4678: RET
// export function Dial_ApeEnterLab ; begin
4679: LD_INT 0
4681: PPUSH
// dial_apeEnterLabBlocker = true ;
4682: LD_ADDR_EXP 11
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// DialogueOn ;
4690: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4694: LD_EXP 39
4698: PPUSH
4699: LD_STRING DApeWorkSol-Bur-1
4701: PPUSH
4702: CALL_OW 88
// if IsOK ( Petrosyan ) then
4706: LD_EXP 43
4710: PPUSH
4711: CALL_OW 302
4715: IFFALSE 4731
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4717: LD_EXP 43
4721: PPUSH
4722: LD_STRING DApeWorkSol-Pty-1
4724: PPUSH
4725: CALL_OW 88
4729: GO 4870
// if IsOK ( Dolgov ) then
4731: LD_EXP 45
4735: PPUSH
4736: CALL_OW 302
4740: IFFALSE 4756
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4742: LD_EXP 45
4746: PPUSH
4747: LD_STRING DApeWorkSol-Pty-1
4749: PPUSH
4750: CALL_OW 88
4754: GO 4870
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4756: LD_INT 22
4758: PUSH
4759: LD_INT 3
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 21
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 26
4778: PUSH
4779: LD_INT 1
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 50
4788: PUSH
4789: EMPTY
4790: LIST
4791: PUSH
4792: LD_INT 2
4794: PUSH
4795: LD_INT 25
4797: PUSH
4798: LD_INT 1
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 25
4807: PUSH
4808: LD_INT 2
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PUSH
4815: LD_INT 25
4817: PUSH
4818: LD_INT 3
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 25
4827: PUSH
4828: LD_INT 4
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: PPUSH
4849: CALL_OW 69
4853: PPUSH
4854: LD_STRING DApeWorkSol-Pty-1
4856: PPUSH
4857: LD_STRING 
4859: PPUSH
4860: LD_INT 0
4862: PPUSH
4863: LD_INT 1
4865: PPUSH
4866: CALL 8830 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4870: LD_EXP 39
4874: PPUSH
4875: LD_STRING DApeWorkSol-Bur-2
4877: PPUSH
4878: CALL_OW 88
// DialogueOff ;
4882: CALL_OW 7
// end ;
4886: LD_VAR 0 1
4890: RET
// export function Dial_ResearchApePsych ; begin
4891: LD_INT 0
4893: PPUSH
// DialogueOn ;
4894: CALL_OW 6
// if IsOK ( Petrosyan ) then
4898: LD_EXP 43
4902: PPUSH
4903: CALL_OW 302
4907: IFFALSE 4923
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4909: LD_EXP 43
4913: PPUSH
4914: LD_STRING DApeWorkCompl-Pty-1
4916: PPUSH
4917: CALL_OW 88
4921: GO 5062
// if IsOK ( Dolgov ) then
4923: LD_EXP 45
4927: PPUSH
4928: CALL_OW 302
4932: IFFALSE 4948
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4934: LD_EXP 45
4938: PPUSH
4939: LD_STRING DApeWorkCompl-Pty-1
4941: PPUSH
4942: CALL_OW 88
4946: GO 5062
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 21
4960: PUSH
4961: LD_INT 1
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: LD_INT 26
4970: PUSH
4971: LD_INT 1
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 50
4980: PUSH
4981: EMPTY
4982: LIST
4983: PUSH
4984: LD_INT 2
4986: PUSH
4987: LD_INT 25
4989: PUSH
4990: LD_INT 1
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: LD_INT 25
4999: PUSH
5000: LD_INT 2
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 25
5009: PUSH
5010: LD_INT 3
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 25
5019: PUSH
5020: LD_INT 4
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: PPUSH
5041: CALL_OW 69
5045: PPUSH
5046: LD_STRING DApeWorkCompl-Pty-1
5048: PPUSH
5049: LD_STRING 
5051: PPUSH
5052: LD_INT 0
5054: PPUSH
5055: LD_INT 1
5057: PPUSH
5058: CALL 8830 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5062: LD_EXP 39
5066: PPUSH
5067: LD_STRING DApeWorkCompl-Bur-1
5069: PPUSH
5070: CALL_OW 88
// DialogueOff ;
5074: CALL_OW 7
// end ;
5078: LD_VAR 0 1
5082: RET
// export function Dial_ResearchApeAgress ; begin
5083: LD_INT 0
5085: PPUSH
// DialogueOn ;
5086: CALL_OW 6
// if IsOK ( Petrosyan ) then
5090: LD_EXP 43
5094: PPUSH
5095: CALL_OW 302
5099: IFFALSE 5115
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5101: LD_EXP 43
5105: PPUSH
5106: LD_STRING DApeSolCompl-Pty-1
5108: PPUSH
5109: CALL_OW 88
5113: GO 5254
// if IsOK ( Dolgov ) then
5115: LD_EXP 45
5119: PPUSH
5120: CALL_OW 302
5124: IFFALSE 5140
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5126: LD_EXP 45
5130: PPUSH
5131: LD_STRING DApeSolCompl-Pty-1
5133: PPUSH
5134: CALL_OW 88
5138: GO 5254
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5140: LD_INT 22
5142: PUSH
5143: LD_INT 3
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 21
5152: PUSH
5153: LD_INT 1
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: LD_INT 26
5162: PUSH
5163: LD_INT 1
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: LD_INT 50
5172: PUSH
5173: EMPTY
5174: LIST
5175: PUSH
5176: LD_INT 2
5178: PUSH
5179: LD_INT 25
5181: PUSH
5182: LD_INT 1
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 25
5191: PUSH
5192: LD_INT 2
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 25
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: LD_INT 25
5211: PUSH
5212: LD_INT 4
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL_OW 69
5237: PPUSH
5238: LD_STRING DApeSolCompl-Pty-1
5240: PPUSH
5241: LD_STRING 
5243: PPUSH
5244: LD_INT 0
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: CALL 8830 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5254: LD_EXP 39
5258: PPUSH
5259: LD_STRING DApeSolCompl-Bur-1
5261: PPUSH
5262: CALL_OW 88
// DialogueOff ;
5266: CALL_OW 7
// end ;
5270: LD_VAR 0 1
5274: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5275: LD_INT 3
5277: PPUSH
5278: LD_INT 74
5280: PPUSH
5281: LD_INT 115
5283: PPUSH
5284: CALL_OW 293
5288: IFFALSE 5419
5290: GO 5292
5292: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5293: LD_INT 22
5295: PUSH
5296: LD_INT 3
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 21
5305: PUSH
5306: LD_INT 1
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 26
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 50
5325: PUSH
5326: EMPTY
5327: LIST
5328: PUSH
5329: LD_INT 2
5331: PUSH
5332: LD_INT 25
5334: PUSH
5335: LD_INT 1
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: LD_INT 25
5344: PUSH
5345: LD_INT 2
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 25
5354: PUSH
5355: LD_INT 3
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: LD_INT 25
5364: PUSH
5365: LD_INT 4
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 69
5390: PPUSH
5391: LD_STRING DShipments-RSol1-1
5393: PPUSH
5394: LD_STRING 
5396: PPUSH
5397: LD_INT 0
5399: PPUSH
5400: LD_INT 1
5402: PPUSH
5403: CALL 8830 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5407: LD_EXP 39
5411: PPUSH
5412: LD_STRING DShipments-Bur-1
5414: PPUSH
5415: CALL_OW 88
// end ;
5419: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5420: LD_INT 3
5422: PPUSH
5423: LD_INT 81
5425: PPUSH
5426: LD_INT 132
5428: PPUSH
5429: CALL_OW 293
5433: IFFALSE 5573
5435: GO 5437
5437: DISABLE
5438: LD_INT 0
5440: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5441: LD_ADDR_VAR 0 1
5445: PUSH
5446: LD_INT 22
5448: PUSH
5449: LD_INT 3
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 21
5458: PUSH
5459: LD_INT 1
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 26
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 50
5478: PUSH
5479: EMPTY
5480: LIST
5481: PUSH
5482: LD_INT 2
5484: PUSH
5485: LD_INT 25
5487: PUSH
5488: LD_INT 1
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: LD_INT 25
5497: PUSH
5498: LD_INT 2
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PUSH
5505: LD_INT 25
5507: PUSH
5508: LD_INT 3
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 25
5517: PUSH
5518: LD_INT 4
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PPUSH
5539: CALL_OW 69
5543: PPUSH
5544: LD_STRING DRoad-RSol1-1
5546: PPUSH
5547: LD_STRING 
5549: PPUSH
5550: LD_INT 0
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: CALL 8830 0 5
5560: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5561: LD_VAR 0 1
5565: PPUSH
5566: LD_STRING DRoad-RSol1-1a
5568: PPUSH
5569: CALL_OW 88
// end ;
5573: PPOPN 1
5575: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5576: LD_INT 33
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 3
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 21
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 26
5601: PUSH
5602: LD_INT 1
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 50
5611: PUSH
5612: EMPTY
5613: LIST
5614: PUSH
5615: LD_INT 2
5617: PUSH
5618: LD_INT 25
5620: PUSH
5621: LD_INT 1
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: LD_INT 25
5630: PUSH
5631: LD_INT 2
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 25
5640: PUSH
5641: LD_INT 3
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: LD_INT 25
5650: PUSH
5651: LD_INT 4
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: PPUSH
5672: CALL_OW 70
5676: PUSH
5677: LD_EXP 39
5681: PUSH
5682: EMPTY
5683: LIST
5684: DIFF
5685: PUSH
5686: LD_INT 22
5688: PUSH
5689: LD_INT 3
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: PUSH
5696: LD_INT 21
5698: PUSH
5699: LD_INT 3
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 30
5708: PUSH
5709: LD_INT 0
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 50
5718: PUSH
5719: EMPTY
5720: LIST
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PPUSH
5728: CALL_OW 69
5732: AND
5733: IFFALSE 5760
5735: GO 5737
5737: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5738: LD_INT 36
5740: PPUSH
5741: CALL 20786 0 1
// wait ( 0 0$2 ) ;
5745: LD_INT 70
5747: PPUSH
5748: CALL_OW 67
// stevensPlaced = true ;
5752: LD_ADDR_EXP 14
5756: PUSH
5757: LD_INT 1
5759: ST_TO_ADDR
// end ;
5760: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5761: LD_INT 3
5763: PPUSH
5764: LD_EXP 57
5768: PPUSH
5769: CALL_OW 292
5773: PUSH
5774: LD_EXP 14
5778: AND
5779: PUSH
5780: LD_EXP 24
5784: NOT
5785: AND
5786: IFFALSE 6128
5788: GO 5790
5790: DISABLE
5791: LD_INT 0
5793: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5794: LD_ADDR_VAR 0 1
5798: PUSH
5799: LD_INT 22
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: LD_INT 21
5811: PUSH
5812: LD_INT 1
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PUSH
5819: LD_INT 26
5821: PUSH
5822: LD_INT 1
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 50
5831: PUSH
5832: EMPTY
5833: LIST
5834: PUSH
5835: LD_INT 2
5837: PUSH
5838: LD_INT 25
5840: PUSH
5841: LD_INT 1
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: LD_INT 25
5850: PUSH
5851: LD_INT 2
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 25
5860: PUSH
5861: LD_INT 3
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PUSH
5868: LD_INT 25
5870: PUSH
5871: LD_INT 4
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: PPUSH
5892: CALL_OW 69
5896: PPUSH
5897: LD_EXP 57
5901: PPUSH
5902: CALL_OW 74
5906: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5907: LD_EXP 57
5911: PPUSH
5912: CALL_OW 87
// InGameOn ;
5916: CALL_OW 8
// DialogueOn ;
5920: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5924: LD_VAR 0 1
5928: PPUSH
5929: LD_STRING DStevens-RSol1-1
5931: PPUSH
5932: CALL_OW 88
// DialogueOff ;
5936: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5940: LD_INT 52
5942: PPUSH
5943: CALL_OW 67
// if IsOK ( Petrosyan ) then
5947: LD_EXP 43
5951: PPUSH
5952: CALL_OW 302
5956: IFFALSE 6124
// begin SetSide ( Stevens , 6 ) ;
5958: LD_EXP 57
5962: PPUSH
5963: LD_INT 6
5965: PPUSH
5966: CALL_OW 235
// DialogueOn ;
5970: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
5974: LD_EXP 57
5978: PPUSH
5979: LD_STRING DStevens-Huck-1
5981: PPUSH
5982: CALL_OW 88
// if nearUnit = Petrosyan then
5986: LD_VAR 0 1
5990: PUSH
5991: LD_EXP 43
5995: EQUAL
5996: IFFALSE 6092
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
5998: LD_EXP 43
6002: PPUSH
6003: LD_STRING DStevens-Pty-1a
6005: PPUSH
6006: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6010: LD_EXP 57
6014: PPUSH
6015: LD_STRING DStevens-Huck-2
6017: PPUSH
6018: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6022: LD_EXP 43
6026: PPUSH
6027: LD_STRING DStevens-Pty-2
6029: PPUSH
6030: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6034: LD_EXP 57
6038: PPUSH
6039: LD_STRING DStevens-Huck-3
6041: PPUSH
6042: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6046: LD_EXP 43
6050: PPUSH
6051: LD_STRING DStevens-Pty-3
6053: PPUSH
6054: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6058: LD_EXP 57
6062: PPUSH
6063: LD_STRING DStevens-Huck-4
6065: PPUSH
6066: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6070: LD_EXP 43
6074: PPUSH
6075: LD_STRING DStevens-Pty-4
6077: PPUSH
6078: CALL_OW 88
// stevensFollow = true ;
6082: LD_ADDR_EXP 15
6086: PUSH
6087: LD_INT 1
6089: ST_TO_ADDR
// end else
6090: GO 6120
// begin stevensFollow = true ;
6092: LD_ADDR_EXP 15
6096: PUSH
6097: LD_INT 1
6099: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6100: LD_ADDR_EXP 16
6104: PUSH
6105: LD_INT 1
6107: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6108: LD_EXP 43
6112: PPUSH
6113: LD_STRING DStevens-Pty-1
6115: PPUSH
6116: CALL_OW 88
// end ; DialogueOff ;
6120: CALL_OW 7
// end ; InGameOff ;
6124: CALL_OW 9
// end ;
6128: PPOPN 1
6130: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6131: LD_EXP 16
6135: PUSH
6136: LD_EXP 43
6140: PPUSH
6141: LD_EXP 57
6145: PPUSH
6146: CALL_OW 296
6150: PUSH
6151: LD_INT 20
6153: LESS
6154: AND
6155: PUSH
6156: LD_EXP 43
6160: PPUSH
6161: CALL_OW 302
6165: AND
6166: PUSH
6167: LD_EXP 24
6171: NOT
6172: AND
6173: IFFALSE 6278
6175: GO 6177
6177: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6178: LD_ADDR_EXP 16
6182: PUSH
6183: LD_INT 0
6185: ST_TO_ADDR
// DialogueOn ;
6186: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6190: LD_EXP 43
6194: PPUSH
6195: LD_STRING DStevens-Pty-1a
6197: PPUSH
6198: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6202: LD_EXP 57
6206: PPUSH
6207: LD_STRING DStevens-Huck-2
6209: PPUSH
6210: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6214: LD_EXP 43
6218: PPUSH
6219: LD_STRING DStevens-Pty-2
6221: PPUSH
6222: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6226: LD_EXP 57
6230: PPUSH
6231: LD_STRING DStevens-Huck-3
6233: PPUSH
6234: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6238: LD_EXP 43
6242: PPUSH
6243: LD_STRING DStevens-Pty-3
6245: PPUSH
6246: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6250: LD_EXP 57
6254: PPUSH
6255: LD_STRING DStevens-Huck-4
6257: PPUSH
6258: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6262: LD_EXP 43
6266: PPUSH
6267: LD_STRING DStevens-Pty-4
6269: PPUSH
6270: CALL_OW 88
// DialogueOff ;
6274: CALL_OW 7
// end ;
6278: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and GetSide ( Stevens ) = 6 and IsOK ( Petrosyan ) and not finishMissionBool do
6279: LD_EXP 57
6283: PPUSH
6284: LD_EXP 39
6288: PPUSH
6289: CALL_OW 296
6293: PUSH
6294: LD_INT 15
6296: LESS
6297: PUSH
6298: LD_EXP 57
6302: PPUSH
6303: CALL_OW 255
6307: PUSH
6308: LD_INT 6
6310: EQUAL
6311: AND
6312: PUSH
6313: LD_EXP 43
6317: PPUSH
6318: CALL_OW 302
6322: AND
6323: PUSH
6324: LD_EXP 24
6328: NOT
6329: AND
6330: IFFALSE 6545
6332: GO 6334
6334: DISABLE
// begin DialogueOn ;
6335: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6339: LD_EXP 43
6343: PPUSH
6344: LD_STRING DStevensBurlak-Pty-1
6346: PPUSH
6347: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6351: LD_EXP 39
6355: PPUSH
6356: LD_STRING DStevensBurlak-Bur-1
6358: PPUSH
6359: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6363: LD_EXP 43
6367: PPUSH
6368: LD_STRING DStevensBurlak-Pty-2
6370: PPUSH
6371: CALL_OW 88
// case Query ( QKill ) of 1 :
6375: LD_STRING QKill
6377: PPUSH
6378: CALL_OW 97
6382: PUSH
6383: LD_INT 1
6385: DOUBLE
6386: EQUAL
6387: IFTRUE 6391
6389: GO 6469
6391: POP
// begin stevensCanExitMap = true ;
6392: LD_ADDR_EXP 19
6396: PUSH
6397: LD_INT 1
6399: ST_TO_ADDR
// stevensFollow = false ;
6400: LD_ADDR_EXP 15
6404: PUSH
6405: LD_INT 0
6407: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6408: LD_EXP 39
6412: PPUSH
6413: LD_STRING DKill-1-Bur-1
6415: PPUSH
6416: CALL_OW 88
// if IsOK ( Gleb ) then
6420: LD_EXP 42
6424: PPUSH
6425: CALL_OW 302
6429: IFFALSE 6443
// Say ( Gleb , DKill-1-Glb-1 ) ;
6431: LD_EXP 42
6435: PPUSH
6436: LD_STRING DKill-1-Glb-1
6438: PPUSH
6439: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6443: LD_EXP 57
6447: PPUSH
6448: LD_INT 1
6450: PPUSH
6451: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6455: LD_EXP 57
6459: PPUSH
6460: LD_INT 37
6462: PPUSH
6463: CALL_OW 113
// end ; 2 :
6467: GO 6541
6469: LD_INT 2
6471: DOUBLE
6472: EQUAL
6473: IFTRUE 6477
6475: GO 6540
6477: POP
// begin stevensCanExitMap = true ;
6478: LD_ADDR_EXP 19
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// stevensFollow = false ;
6486: LD_ADDR_EXP 15
6490: PUSH
6491: LD_INT 0
6493: ST_TO_ADDR
// stevensDepot = true ;
6494: LD_ADDR_EXP 17
6498: PUSH
6499: LD_INT 1
6501: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6502: LD_EXP 39
6506: PPUSH
6507: LD_STRING DKill-2-Bur-1
6509: PPUSH
6510: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6514: LD_EXP 43
6518: PPUSH
6519: LD_STRING DKill-2-Pty-1
6521: PPUSH
6522: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6526: LD_EXP 39
6530: PPUSH
6531: LD_STRING DKill-2-Bur-2
6533: PPUSH
6534: CALL_OW 88
// end ; end ;
6538: GO 6541
6540: POP
// DialogueOff ;
6541: CALL_OW 7
// end ;
6545: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6546: LD_EXP 15
6550: IFFALSE 6690
6552: GO 6554
6554: DISABLE
6555: LD_INT 0
6557: PPUSH
// begin enable ;
6558: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6559: LD_ADDR_VAR 0 1
6563: PUSH
6564: LD_INT 22
6566: PUSH
6567: LD_INT 3
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 21
6576: PUSH
6577: LD_INT 1
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: LD_INT 50
6586: PUSH
6587: EMPTY
6588: LIST
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: LD_INT 25
6595: PUSH
6596: LD_INT 1
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 25
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: LD_INT 25
6615: PUSH
6616: LD_INT 3
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 25
6625: PUSH
6626: LD_INT 4
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: PPUSH
6646: CALL_OW 69
6650: PPUSH
6651: LD_EXP 57
6655: PPUSH
6656: CALL_OW 74
6660: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6661: LD_EXP 57
6665: PPUSH
6666: LD_VAR 0 1
6670: PPUSH
6671: CALL_OW 250
6675: PPUSH
6676: LD_VAR 0 1
6680: PPUSH
6681: CALL_OW 251
6685: PPUSH
6686: CALL_OW 111
// end ;
6690: PPOPN 1
6692: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6693: LD_EXP 17
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 21
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: LD_INT 30
6720: PUSH
6721: LD_INT 0
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 50
6730: PUSH
6731: EMPTY
6732: LIST
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 69
6744: NOT
6745: AND
6746: IFFALSE 6773
6748: GO 6750
6750: DISABLE
// begin enable ;
6751: ENABLE
// SetSide ( Stevens , 6 ) ;
6752: LD_EXP 57
6756: PPUSH
6757: LD_INT 6
6759: PPUSH
6760: CALL_OW 235
// ComHold ( Stevens ) ;
6764: LD_EXP 57
6768: PPUSH
6769: CALL_OW 140
// end ;
6773: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6774: LD_EXP 17
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 3
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 21
6791: PUSH
6792: LD_INT 3
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 30
6801: PUSH
6802: LD_INT 0
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 50
6811: PUSH
6812: EMPTY
6813: LIST
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: PPUSH
6821: CALL_OW 69
6825: AND
6826: IFFALSE 7425
6828: GO 6830
6830: DISABLE
6831: LD_INT 0
6833: PPUSH
6834: PPUSH
6835: PPUSH
// begin enable ;
6836: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6837: LD_ADDR_VAR 0 1
6841: PUSH
6842: LD_INT 22
6844: PUSH
6845: LD_INT 3
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: LD_INT 21
6854: PUSH
6855: LD_INT 3
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 30
6864: PUSH
6865: LD_INT 0
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 50
6874: PUSH
6875: EMPTY
6876: LIST
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: PPUSH
6884: CALL_OW 69
6888: PUSH
6889: LD_INT 1
6891: ARRAY
6892: ST_TO_ADDR
// stevensFollow = false ;
6893: LD_ADDR_EXP 15
6897: PUSH
6898: LD_INT 0
6900: ST_TO_ADDR
// if not depot then
6901: LD_VAR 0 1
6905: NOT
6906: IFFALSE 6910
// exit ;
6908: GO 7425
// for depotUnit in depot do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: LD_VAR 0 1
6919: PUSH
6920: FOR_IN
6921: IFFALSE 6947
// if not IsConstructed ( depotUnit ) then
6923: LD_VAR 0 2
6927: PPUSH
6928: CALL_OW 304
6932: NOT
6933: IFFALSE 6945
// constructDepot = depotUnit ;
6935: LD_ADDR_VAR 0 3
6939: PUSH
6940: LD_VAR 0 2
6944: ST_TO_ADDR
6945: GO 6920
6947: POP
6948: POP
// if not constructDepot then
6949: LD_VAR 0 3
6953: NOT
6954: IFFALSE 6958
// exit ;
6956: GO 7425
// if not stevensWasInDepot then
6958: LD_EXP 18
6962: NOT
6963: IFFALSE 7103
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6965: LD_EXP 57
6969: PPUSH
6970: CALL_OW 310
6974: NOT
6975: PUSH
6976: LD_EXP 57
6980: PPUSH
6981: LD_VAR 0 1
6985: PPUSH
6986: CALL_OW 296
6990: PUSH
6991: LD_INT 8
6993: LESS
6994: NOT
6995: AND
6996: IFFALSE 7029
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
6998: LD_EXP 57
7002: PPUSH
7003: LD_VAR 0 3
7007: PPUSH
7008: CALL_OW 250
7012: PPUSH
7013: LD_VAR 0 3
7017: PPUSH
7018: CALL_OW 251
7022: PPUSH
7023: CALL_OW 111
7027: GO 7101
// begin InGameOn ;
7029: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7033: LD_EXP 57
7037: PPUSH
7038: LD_INT 3
7040: PPUSH
7041: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7045: LD_EXP 57
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: CALL_OW 120
// wait ( 0 0$1 ) ;
7059: LD_INT 35
7061: PPUSH
7062: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7066: LD_EXP 57
7070: PPUSH
7071: CALL_OW 310
7075: PUSH
7076: LD_EXP 57
7080: PPUSH
7081: CALL_OW 302
7085: NOT
7086: OR
7087: IFFALSE 7033
// InGameOff ;
7089: CALL_OW 9
// stevensWasInDepot = true ;
7093: LD_ADDR_EXP 18
7097: PUSH
7098: LD_INT 1
7100: ST_TO_ADDR
// end ; end else
7101: GO 7425
// begin if not IsInUnit ( Stevens ) or GetType ( IsInUnit ( Stevens ) ) = unit_vehicle then
7103: LD_EXP 57
7107: PPUSH
7108: CALL_OW 310
7112: NOT
7113: PUSH
7114: LD_EXP 57
7118: PPUSH
7119: CALL_OW 310
7123: PPUSH
7124: CALL_OW 247
7128: PUSH
7129: LD_INT 2
7131: EQUAL
7132: OR
7133: IFFALSE 7425
// begin DialogueOn ;
7135: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7139: LD_EXP 39
7143: PPUSH
7144: LD_STRING DRelease-Bur-1
7146: PPUSH
7147: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7151: LD_STRING QKillAgain
7153: PPUSH
7154: CALL_OW 97
7158: PUSH
7159: LD_INT 1
7161: DOUBLE
7162: EQUAL
7163: IFTRUE 7167
7165: GO 7236
7167: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7168: LD_EXP 39
7172: PPUSH
7173: LD_STRING DQrKillAgain#1-Bur-1
7175: PPUSH
7176: CALL_OW 88
// stevensCanExitMap = true ;
7180: LD_ADDR_EXP 19
7184: PUSH
7185: LD_INT 1
7187: ST_TO_ADDR
// stevensWasInDepot = false ;
7188: LD_ADDR_EXP 18
7192: PUSH
7193: LD_INT 0
7195: ST_TO_ADDR
// stevensDepot = false ;
7196: LD_ADDR_EXP 17
7200: PUSH
7201: LD_INT 0
7203: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7204: LD_EXP 57
7208: PPUSH
7209: LD_INT 1
7211: PPUSH
7212: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7216: LD_EXP 57
7220: PPUSH
7221: LD_INT 37
7223: PPUSH
7224: CALL_OW 113
// DialogueOff ;
7228: CALL_OW 7
// exit ;
7232: GO 7425
// end ; 2 :
7234: GO 7421
7236: LD_INT 2
7238: DOUBLE
7239: EQUAL
7240: IFTRUE 7244
7242: GO 7313
7244: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7245: LD_EXP 39
7249: PPUSH
7250: LD_STRING DQrKillAgain#2-Bur-1
7252: PPUSH
7253: CALL_OW 88
// stevensCanExitMap = true ;
7257: LD_ADDR_EXP 19
7261: PUSH
7262: LD_INT 1
7264: ST_TO_ADDR
// stevensWasInDepot = false ;
7265: LD_ADDR_EXP 18
7269: PUSH
7270: LD_INT 0
7272: ST_TO_ADDR
// stevensDepot = false ;
7273: LD_ADDR_EXP 17
7277: PUSH
7278: LD_INT 0
7280: ST_TO_ADDR
// SetSide ( Stevens , 6 ) ;
7281: LD_EXP 57
7285: PPUSH
7286: LD_INT 6
7288: PPUSH
7289: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7293: LD_EXP 57
7297: PPUSH
7298: LD_INT 37
7300: PPUSH
7301: CALL_OW 113
// DialogueOff ;
7305: CALL_OW 7
// exit ;
7309: GO 7425
// end ; 3 :
7311: GO 7421
7313: LD_INT 3
7315: DOUBLE
7316: EQUAL
7317: IFTRUE 7321
7319: GO 7420
7321: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7322: LD_EXP 39
7326: PPUSH
7327: LD_STRING DQrKillAgain#2-Bur-1a
7329: PPUSH
7330: CALL_OW 88
// DialogueOff ;
7334: CALL_OW 7
// InGameOn ;
7338: CALL_OW 8
// ComExitVehicle ( Stevens ) ;
7342: LD_EXP 57
7346: PPUSH
7347: CALL_OW 121
// wait ( 0 0$1 ) ;
7351: LD_INT 35
7353: PPUSH
7354: CALL_OW 67
// repeat SetSide ( Stevens , 3 ) ;
7358: LD_EXP 57
7362: PPUSH
7363: LD_INT 3
7365: PPUSH
7366: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7370: LD_EXP 57
7374: PPUSH
7375: LD_VAR 0 3
7379: PPUSH
7380: CALL_OW 120
// wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7391: LD_EXP 57
7395: PPUSH
7396: CALL_OW 310
7400: PUSH
7401: LD_EXP 57
7405: PPUSH
7406: CALL_OW 302
7410: NOT
7411: OR
7412: IFFALSE 7358
// InGameOff ;
7414: CALL_OW 9
// end ; end ;
7418: GO 7421
7420: POP
// DialogueOff ;
7421: CALL_OW 7
// end ; end ; end ;
7425: PPOPN 3
7427: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7428: LD_EXP 19
7432: PUSH
7433: LD_EXP 57
7437: PPUSH
7438: LD_INT 37
7440: PPUSH
7441: CALL_OW 308
7445: AND
7446: IFFALSE 7493
7448: GO 7450
7450: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7451: LD_EXP 57
7455: PPUSH
7456: CALL_OW 255
7460: PUSH
7461: LD_INT 6
7463: EQUAL
7464: IFFALSE 7476
// stevensStatus = 1 else
7466: LD_ADDR_EXP 2
7470: PUSH
7471: LD_INT 1
7473: ST_TO_ADDR
7474: GO 7484
// stevensStatus = 2 ;
7476: LD_ADDR_EXP 2
7480: PUSH
7481: LD_INT 2
7483: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7484: LD_EXP 57
7488: PPUSH
7489: CALL_OW 64
// end ;
7493: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7494: LD_INT 3
7496: PPUSH
7497: LD_INT 1
7499: PPUSH
7500: CALL_OW 292
7504: IFFALSE 7704
7506: GO 7508
7508: DISABLE
7509: LD_INT 0
7511: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7512: LD_ADDR_VAR 0 1
7516: PUSH
7517: LD_INT 1
7519: PPUSH
7520: LD_INT 2
7522: PPUSH
7523: CALL_OW 12
7527: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7528: LD_INT 1
7530: PPUSH
7531: CALL_OW 87
// DialogueOn ;
7535: CALL_OW 6
// if rnd = 1 then
7539: LD_VAR 0 1
7543: PUSH
7544: LD_INT 1
7546: EQUAL
7547: IFFALSE 7563
// Say ( Burlak , DMastodon-Bur-1 ) else
7549: LD_EXP 39
7553: PPUSH
7554: LD_STRING DMastodon-Bur-1
7556: PPUSH
7557: CALL_OW 88
7561: GO 7677
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7563: LD_INT 22
7565: PUSH
7566: LD_INT 3
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: LD_INT 21
7575: PUSH
7576: LD_INT 1
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: LD_INT 26
7585: PUSH
7586: LD_INT 1
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 50
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 2
7601: PUSH
7602: LD_INT 25
7604: PUSH
7605: LD_INT 1
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 25
7614: PUSH
7615: LD_INT 2
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 25
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 4
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: PPUSH
7661: LD_STRING DMastodon-RSol1-1
7663: PPUSH
7664: LD_STRING 
7666: PPUSH
7667: LD_INT 0
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: CALL 8830 0 5
// if IsOK ( Gleb ) then
7677: LD_EXP 42
7681: PPUSH
7682: CALL_OW 302
7686: IFFALSE 7700
// Say ( Gleb , DMastodon-Glb-1 ) ;
7688: LD_EXP 42
7692: PPUSH
7693: LD_STRING DMastodon-Glb-1
7695: PPUSH
7696: CALL_OW 88
// DialogueOff ;
7700: CALL_OW 7
// end ;
7704: PPOPN 1
7706: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7707: LD_INT 1
7709: PPUSH
7710: CALL_OW 302
7714: NOT
7715: IFFALSE 7794
7717: GO 7719
7719: DISABLE
// begin omarCanExitMap = true ;
7720: LD_ADDR_EXP 20
7724: PUSH
7725: LD_INT 1
7727: ST_TO_ADDR
// DialogueOn ;
7728: CALL_OW 6
// if IsOK ( Karamazov ) then
7732: LD_EXP 40
7736: PPUSH
7737: CALL_OW 302
7741: IFFALSE 7755
// Say ( Karamazov , DOmar-Kar-1 ) ;
7743: LD_EXP 40
7747: PPUSH
7748: LD_STRING DOmar-Kar-1
7750: PPUSH
7751: CALL_OW 88
// if IsOK ( Petrovova ) then
7755: LD_EXP 41
7759: PPUSH
7760: CALL_OW 302
7764: IFFALSE 7778
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7766: LD_EXP 41
7770: PPUSH
7771: LD_STRING DOmar-Ptr-1
7773: PPUSH
7774: CALL_OW 88
// DialogueOff ;
7778: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7782: LD_EXP 50
7786: PPUSH
7787: LD_INT 41
7789: PPUSH
7790: CALL_OW 113
// end ;
7794: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7795: LD_EXP 50
7799: PPUSH
7800: LD_INT 41
7802: PPUSH
7803: CALL_OW 308
7807: PUSH
7808: LD_EXP 20
7812: AND
7813: IFFALSE 7835
7815: GO 7817
7817: DISABLE
// begin RemoveUnit ( Omar ) ;
7818: LD_EXP 50
7822: PPUSH
7823: CALL_OW 64
// omarStatus = 1 ;
7827: LD_ADDR_EXP 1
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// end ;
7835: END
// every 0 0$1 trigger IsDead ( Omar ) do
7836: LD_EXP 50
7840: PPUSH
7841: CALL_OW 301
7845: IFFALSE 8003
7847: GO 7849
7849: DISABLE
// begin DialogueOn ;
7850: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7854: LD_INT 22
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 21
7866: PUSH
7867: LD_INT 1
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 26
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 50
7886: PUSH
7887: EMPTY
7888: LIST
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: LD_INT 25
7895: PUSH
7896: LD_INT 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 25
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 25
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 4
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: PPUSH
7947: CALL_OW 69
7951: PPUSH
7952: LD_STRING DOmar-RSol1-1
7954: PPUSH
7955: LD_STRING 
7957: PPUSH
7958: LD_INT 0
7960: PPUSH
7961: LD_INT 1
7963: PPUSH
7964: CALL 8830 0 5
// wait ( 0 0$1 ) ;
7968: LD_INT 35
7970: PPUSH
7971: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
7975: LD_EXP 49
7979: PPUSH
7980: LD_STRING DOmar-Hke-1
7982: PPUSH
7983: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
7987: LD_EXP 39
7991: PPUSH
7992: LD_STRING DOmar-Bur-1
7994: PPUSH
7995: CALL_OW 88
// DialogueOff ;
7999: CALL_OW 7
// end ;
8003: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
8004: LD_EXP 50
8008: PPUSH
8009: CALL_OW 301
8013: PUSH
8014: LD_EXP 50
8018: PPUSH
8019: CALL_OW 305
8023: NOT
8024: OR
8025: PUSH
8026: LD_EXP 51
8030: PUSH
8031: LD_INT 3
8033: LESS
8034: AND
8035: IFFALSE 8186
8037: GO 8039
8039: DISABLE
// begin if actionTime < arabBreakthrough then
8040: LD_EXP 7
8044: PUSH
8045: LD_EXP 34
8049: LESS
8050: IFFALSE 8060
// fastBreakthrough = true ;
8052: LD_ADDR_EXP 23
8056: PUSH
8057: LD_INT 1
8059: ST_TO_ADDR
// DialogueOn ;
8060: CALL_OW 6
// if IsOK ( Petrovova ) then
8064: LD_EXP 41
8068: PPUSH
8069: CALL_OW 302
8073: IFFALSE 8087
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
8075: LD_EXP 41
8079: PPUSH
8080: LD_STRING DBreakthrough-Ptr-1
8082: PPUSH
8083: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
8087: LD_EXP 39
8091: PPUSH
8092: LD_STRING DBreakthrough-Bur-1
8094: PPUSH
8095: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
8099: LD_EXP 47
8103: PPUSH
8104: LD_STRING DBreakthrough-Pla-1
8106: PPUSH
8107: CALL_OW 94
// if fastBreakthrough then
8111: LD_EXP 23
8115: IFFALSE 8131
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8117: LD_EXP 47
8121: PPUSH
8122: LD_STRING DBreakthrough-Pla-1a
8124: PPUSH
8125: CALL_OW 94
8129: GO 8143
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8131: LD_EXP 47
8135: PPUSH
8136: LD_STRING DBreakthrough-Pla-1b
8138: PPUSH
8139: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8143: LD_EXP 47
8147: PPUSH
8148: LD_STRING DBreakthrough-Pla-1c
8150: PPUSH
8151: CALL_OW 94
// DialogueOff ;
8155: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8159: LD_STRING MAddLab
8161: PPUSH
8162: CALL_OW 337
// arabianCanExitMap = true ;
8166: LD_ADDR_EXP 21
8170: PUSH
8171: LD_INT 1
8173: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8174: LD_EXP 51
8178: PPUSH
8179: LD_INT 41
8181: PPUSH
8182: CALL_OW 113
// end ;
8186: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8187: LD_EXP 21
8191: IFFALSE 8256
8193: GO 8195
8195: DISABLE
8196: LD_INT 0
8198: PPUSH
// begin enable ;
8199: ENABLE
// for unit in arabianUnitsInBase do
8200: LD_ADDR_VAR 0 1
8204: PUSH
8205: LD_EXP 51
8209: PUSH
8210: FOR_IN
8211: IFFALSE 8254
// if IsInArea ( unit , ArabianExitArea ) then
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_INT 41
8220: PPUSH
8221: CALL_OW 308
8225: IFFALSE 8252
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8227: LD_ADDR_EXP 51
8231: PUSH
8232: LD_EXP 51
8236: PUSH
8237: LD_VAR 0 1
8241: DIFF
8242: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8243: LD_VAR 0 1
8247: PPUSH
8248: CALL_OW 64
// end ;
8252: GO 8210
8254: POP
8255: POP
// end ;
8256: PPOPN 1
8258: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8259: LD_EXP 12
8263: NOT
8264: IFFALSE 8502
8266: GO 8268
8268: DISABLE
8269: LD_INT 0
8271: PPUSH
// begin for unit in arabianPatrolVehicles do
8272: LD_ADDR_VAR 0 1
8276: PUSH
8277: LD_EXP 52
8281: PUSH
8282: FOR_IN
8283: IFFALSE 8500
// if See ( 3 , unit ) then
8285: LD_INT 3
8287: PPUSH
8288: LD_VAR 0 1
8292: PPUSH
8293: CALL_OW 292
8297: IFFALSE 8498
// begin dial_southRoadBlocker = true ;
8299: LD_ADDR_EXP 12
8303: PUSH
8304: LD_INT 1
8306: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8307: LD_VAR 0 1
8311: PPUSH
8312: CALL_OW 87
// if IsOK ( Karamazov ) then
8316: LD_EXP 40
8320: PPUSH
8321: CALL_OW 302
8325: IFFALSE 8339
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8327: LD_EXP 40
8331: PPUSH
8332: LD_STRING DPatrol-Kar-1
8334: PPUSH
8335: CALL_OW 88
// if IsOK ( Petrovova ) then
8339: LD_EXP 41
8343: PPUSH
8344: CALL_OW 302
8348: IFFALSE 8362
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8350: LD_EXP 41
8354: PPUSH
8355: LD_STRING DPatrol-Ptr-1
8357: PPUSH
8358: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8362: LD_INT 22
8364: PUSH
8365: LD_INT 3
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: PUSH
8372: LD_INT 21
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 26
8384: PUSH
8385: LD_INT 1
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 50
8394: PUSH
8395: EMPTY
8396: LIST
8397: PUSH
8398: LD_INT 2
8400: PUSH
8401: LD_INT 25
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: LD_INT 25
8413: PUSH
8414: LD_INT 2
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: LD_INT 25
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: LD_INT 25
8433: PUSH
8434: LD_INT 4
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: PPUSH
8455: CALL_OW 69
8459: PUSH
8460: LD_EXP 40
8464: DIFF
8465: PPUSH
8466: LD_STRING DPatrol-RSol1-1
8468: PPUSH
8469: LD_STRING 
8471: PPUSH
8472: LD_INT 0
8474: PPUSH
8475: LD_INT 1
8477: PPUSH
8478: CALL 8830 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8482: LD_EXP 39
8486: PPUSH
8487: LD_STRING DPatrol-Bur-1
8489: PPUSH
8490: CALL_OW 88
// exit ;
8494: POP
8495: POP
8496: GO 8502
// end ;
8498: GO 8282
8500: POP
8501: POP
// end ;
8502: PPOPN 1
8504: END
// every 10 10$0 do
8505: GO 8507
8507: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8508: CALL 2567 0 0
8512: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8513: LD_INT 0
8515: PPUSH
8516: PPUSH
// if debugMode then
8517: LD_EXP 32
8521: IFFALSE 8538
// unit := NewCharacter ( ident ) ;
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 25
8537: ST_TO_ADDR
// if exist_mode and not debugMode then
8538: LD_VAR 0 2
8542: PUSH
8543: LD_EXP 32
8547: NOT
8548: AND
8549: IFFALSE 8574
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8551: LD_ADDR_VAR 0 5
8555: PUSH
8556: LD_EXP 31
8560: PUSH
8561: LD_VAR 0 1
8565: STR
8566: PPUSH
8567: CALL_OW 34
8571: ST_TO_ADDR
8572: GO 8596
// if not debugMode then
8574: LD_EXP 32
8578: NOT
8579: IFFALSE 8596
// unit := NewCharacter ( ident ) ;
8581: LD_ADDR_VAR 0 5
8585: PUSH
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 25
8595: ST_TO_ADDR
// if class then
8596: LD_VAR 0 3
8600: IFFALSE 8616
// SetClass ( unit , class ) ;
8602: LD_VAR 0 5
8606: PPUSH
8607: LD_VAR 0 3
8611: PPUSH
8612: CALL_OW 336
// result := unit ;
8616: LD_ADDR_VAR 0 4
8620: PUSH
8621: LD_VAR 0 5
8625: ST_TO_ADDR
// end ;
8626: LD_VAR 0 4
8630: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8631: LD_INT 0
8633: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8634: LD_VAR 0 1
8638: PPUSH
8639: CALL_OW 255
8643: PUSH
8644: LD_VAR 0 3
8648: EQUAL
8649: PUSH
8650: LD_VAR 0 1
8654: PPUSH
8655: CALL_OW 302
8659: AND
8660: IFFALSE 8682
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8662: LD_VAR 0 1
8666: PPUSH
8667: LD_EXP 30
8671: PUSH
8672: LD_VAR 0 2
8676: STR
8677: PPUSH
8678: CALL_OW 38
// end ;
8682: LD_VAR 0 4
8686: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8687: LD_INT 0
8689: PPUSH
8690: PPUSH
8691: PPUSH
// resultCharactersToSave = [ ] ;
8692: LD_ADDR_VAR 0 6
8696: PUSH
8697: EMPTY
8698: ST_TO_ADDR
// for unit in characters do
8699: LD_ADDR_VAR 0 5
8703: PUSH
8704: LD_VAR 0 1
8708: PUSH
8709: FOR_IN
8710: IFFALSE 8758
// if GetSide ( unit ) = side and IsOK ( unit ) then
8712: LD_VAR 0 5
8716: PPUSH
8717: CALL_OW 255
8721: PUSH
8722: LD_VAR 0 3
8726: EQUAL
8727: PUSH
8728: LD_VAR 0 5
8732: PPUSH
8733: CALL_OW 302
8737: AND
8738: IFFALSE 8756
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8740: LD_ADDR_VAR 0 6
8744: PUSH
8745: LD_VAR 0 6
8749: PUSH
8750: LD_VAR 0 5
8754: ADD
8755: ST_TO_ADDR
8756: GO 8709
8758: POP
8759: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8760: LD_VAR 0 6
8764: PPUSH
8765: LD_EXP 30
8769: PUSH
8770: LD_VAR 0 2
8774: STR
8775: PPUSH
8776: CALL_OW 38
// end ;
8780: LD_VAR 0 4
8784: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
// for unit in units do
8789: LD_ADDR_VAR 0 5
8793: PUSH
8794: LD_VAR 0 1
8798: PUSH
8799: FOR_IN
8800: IFFALSE 8823
// PlaceUnitArea ( unit , area , spawnMode ) ;
8802: LD_VAR 0 5
8806: PPUSH
8807: LD_VAR 0 2
8811: PPUSH
8812: LD_VAR 0 3
8816: PPUSH
8817: CALL_OW 49
8821: GO 8799
8823: POP
8824: POP
// end ;
8825: LD_VAR 0 4
8829: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8830: LD_INT 0
8832: PPUSH
8833: PPUSH
8834: PPUSH
8835: PPUSH
// units = characters ;
8836: LD_ADDR_VAR 0 9
8840: PUSH
8841: LD_VAR 0 1
8845: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8846: LD_ADDR_VAR 0 9
8850: PUSH
8851: LD_VAR 0 9
8855: PUSH
8856: LD_EXP 39
8860: PUSH
8861: LD_EXP 40
8865: PUSH
8866: LD_EXP 41
8870: PUSH
8871: LD_EXP 42
8875: PUSH
8876: LD_EXP 43
8880: PUSH
8881: LD_EXP 44
8885: PUSH
8886: LD_EXP 45
8890: PUSH
8891: LD_EXP 46
8895: PUSH
8896: LD_EXP 57
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: DIFF
8912: ST_TO_ADDR
// if not units and not canTalkHero then
8913: LD_VAR 0 9
8917: NOT
8918: PUSH
8919: LD_VAR 0 5
8923: NOT
8924: AND
8925: IFFALSE 8929
// exit ;
8927: GO 9108
// if not units then
8929: LD_VAR 0 9
8933: NOT
8934: IFFALSE 8961
// units = characters diff [ Burlak , Stevens ] ;
8936: LD_ADDR_VAR 0 9
8940: PUSH
8941: LD_VAR 0 1
8945: PUSH
8946: LD_EXP 39
8950: PUSH
8951: LD_EXP 57
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: DIFF
8960: ST_TO_ADDR
// if not units and canTalkHero then
8961: LD_VAR 0 9
8965: NOT
8966: PUSH
8967: LD_VAR 0 5
8971: AND
8972: IFFALSE 8976
// exit ;
8974: GO 9108
// speaker := units [ rand ( 1 , units ) ] ;
8976: LD_ADDR_VAR 0 8
8980: PUSH
8981: LD_VAR 0 9
8985: PUSH
8986: LD_INT 1
8988: PPUSH
8989: LD_VAR 0 9
8993: PPUSH
8994: CALL_OW 12
8998: ARRAY
8999: ST_TO_ADDR
// if radio then
9000: LD_VAR 0 4
9004: IFFALSE 9053
// begin if GetSex ( speaker ) = sex_male then
9006: LD_VAR 0 8
9010: PPUSH
9011: CALL_OW 258
9015: PUSH
9016: LD_INT 1
9018: EQUAL
9019: IFFALSE 9037
// SayRadio ( speaker , dialogMID ) else
9021: LD_VAR 0 8
9025: PPUSH
9026: LD_VAR 0 2
9030: PPUSH
9031: CALL_OW 94
9035: GO 9051
// SayRadio ( speaker , dialogFID ) ;
9037: LD_VAR 0 8
9041: PPUSH
9042: LD_VAR 0 3
9046: PPUSH
9047: CALL_OW 94
// end else
9051: GO 9098
// begin if GetSex ( speaker ) = sex_male then
9053: LD_VAR 0 8
9057: PPUSH
9058: CALL_OW 258
9062: PUSH
9063: LD_INT 1
9065: EQUAL
9066: IFFALSE 9084
// Say ( speaker , dialogMID ) else
9068: LD_VAR 0 8
9072: PPUSH
9073: LD_VAR 0 2
9077: PPUSH
9078: CALL_OW 88
9082: GO 9098
// Say ( speaker , dialogFID ) ;
9084: LD_VAR 0 8
9088: PPUSH
9089: LD_VAR 0 3
9093: PPUSH
9094: CALL_OW 88
// end ; result := speaker ;
9098: LD_ADDR_VAR 0 6
9102: PUSH
9103: LD_VAR 0 8
9107: ST_TO_ADDR
// end ;
9108: LD_VAR 0 6
9112: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9113: LD_INT 0
9115: PPUSH
9116: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9117: LD_ADDR_VAR 0 4
9121: PUSH
9122: LD_VAR 0 2
9126: PPUSH
9127: CALL_OW 254
9131: PUSH
9132: LD_INT 3
9134: MINUS
9135: ST_TO_ADDR
// if dir < 0 then
9136: LD_VAR 0 4
9140: PUSH
9141: LD_INT 0
9143: LESS
9144: IFFALSE 9160
// dir := 6 + dir ;
9146: LD_ADDR_VAR 0 4
9150: PUSH
9151: LD_INT 6
9153: PUSH
9154: LD_VAR 0 4
9158: PLUS
9159: ST_TO_ADDR
// SetDir ( un , dir ) ;
9160: LD_VAR 0 1
9164: PPUSH
9165: LD_VAR 0 4
9169: PPUSH
9170: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9174: LD_VAR 0 1
9178: PPUSH
9179: LD_VAR 0 2
9183: PPUSH
9184: CALL_OW 52
// result = un ;
9188: LD_ADDR_VAR 0 3
9192: PUSH
9193: LD_VAR 0 1
9197: ST_TO_ADDR
// end ;
9198: LD_VAR 0 3
9202: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9203: LD_INT 0
9205: PPUSH
9206: PPUSH
9207: PPUSH
9208: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9209: LD_ADDR_VAR 0 6
9213: PUSH
9214: LD_INT 34
9216: PUSH
9217: LD_INT 71
9219: PUSH
9220: LD_INT 70
9222: PUSH
9223: LD_INT 69
9225: PUSH
9226: LD_INT 39
9228: PUSH
9229: LD_INT 31
9231: PUSH
9232: LD_INT 14
9234: PUSH
9235: LD_INT 10
9237: PUSH
9238: LD_INT 40
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: ST_TO_ADDR
// resultWeapons = [ ] ;
9252: LD_ADDR_VAR 0 5
9256: PUSH
9257: EMPTY
9258: ST_TO_ADDR
// for i := 1 to weaponTechs do
9259: LD_ADDR_VAR 0 4
9263: PUSH
9264: DOUBLE
9265: LD_INT 1
9267: DEC
9268: ST_TO_ADDR
9269: LD_VAR 0 6
9273: PUSH
9274: FOR_TO
9275: IFFALSE 9462
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9277: LD_VAR 0 6
9281: PUSH
9282: LD_VAR 0 4
9286: ARRAY
9287: PPUSH
9288: LD_VAR 0 2
9292: PPUSH
9293: CALL_OW 482
9297: PUSH
9298: LD_VAR 0 6
9302: PUSH
9303: LD_VAR 0 4
9307: ARRAY
9308: PPUSH
9309: LD_VAR 0 1
9313: PPUSH
9314: CALL_OW 321
9318: PUSH
9319: LD_INT 2
9321: EQUAL
9322: AND
9323: IFFALSE 9460
// case nation of nation_american :
9325: LD_VAR 0 2
9329: PUSH
9330: LD_INT 1
9332: DOUBLE
9333: EQUAL
9334: IFTRUE 9338
9336: GO 9373
9338: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9339: LD_ADDR_VAR 0 5
9343: PUSH
9344: LD_VAR 0 5
9348: PUSH
9349: LD_VAR 0 6
9353: PUSH
9354: LD_VAR 0 4
9358: ARRAY
9359: PPUSH
9360: LD_VAR 0 2
9364: PPUSH
9365: CALL 9479 0 2
9369: ADD
9370: ST_TO_ADDR
9371: GO 9460
9373: LD_INT 2
9375: DOUBLE
9376: EQUAL
9377: IFTRUE 9381
9379: GO 9416
9381: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_VAR 0 5
9391: PUSH
9392: LD_VAR 0 6
9396: PUSH
9397: LD_VAR 0 4
9401: ARRAY
9402: PPUSH
9403: LD_VAR 0 2
9407: PPUSH
9408: CALL 9479 0 2
9412: ADD
9413: ST_TO_ADDR
9414: GO 9460
9416: LD_INT 3
9418: DOUBLE
9419: EQUAL
9420: IFTRUE 9424
9422: GO 9459
9424: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9425: LD_ADDR_VAR 0 5
9429: PUSH
9430: LD_VAR 0 5
9434: PUSH
9435: LD_VAR 0 6
9439: PUSH
9440: LD_VAR 0 4
9444: ARRAY
9445: PPUSH
9446: LD_VAR 0 2
9450: PPUSH
9451: CALL 9479 0 2
9455: ADD
9456: ST_TO_ADDR
9457: GO 9460
9459: POP
// end ;
9460: GO 9274
9462: POP
9463: POP
// result = resultWeapons ;
9464: LD_ADDR_VAR 0 3
9468: PUSH
9469: LD_VAR 0 5
9473: ST_TO_ADDR
// end ;
9474: LD_VAR 0 3
9478: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9479: LD_INT 0
9481: PPUSH
// case tech of tech_AdvMet :
9482: LD_VAR 0 1
9486: PUSH
9487: LD_INT 34
9489: DOUBLE
9490: EQUAL
9491: IFTRUE 9495
9493: GO 9523
9495: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9496: LD_ADDR_VAR 0 3
9500: PUSH
9501: LD_INT 6
9503: PUSH
9504: LD_STRING 
9506: PUSH
9507: LD_INT 46
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: PUSH
9515: LD_VAR 0 2
9519: ARRAY
9520: ST_TO_ADDR
9521: GO 9812
9523: LD_INT 71
9525: DOUBLE
9526: EQUAL
9527: IFTRUE 9531
9529: GO 9559
9531: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9532: LD_ADDR_VAR 0 3
9536: PUSH
9537: LD_STRING 
9539: PUSH
9540: LD_STRING 
9542: PUSH
9543: LD_INT 47
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: PUSH
9551: LD_VAR 0 2
9555: ARRAY
9556: ST_TO_ADDR
9557: GO 9812
9559: LD_INT 70
9561: DOUBLE
9562: EQUAL
9563: IFTRUE 9567
9565: GO 9595
9567: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9568: LD_ADDR_VAR 0 3
9572: PUSH
9573: LD_STRING 
9575: PUSH
9576: LD_INT 26
9578: PUSH
9579: LD_STRING 
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: PUSH
9587: LD_VAR 0 2
9591: ARRAY
9592: ST_TO_ADDR
9593: GO 9812
9595: LD_INT 69
9597: DOUBLE
9598: EQUAL
9599: IFTRUE 9603
9601: GO 9631
9603: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9604: LD_ADDR_VAR 0 3
9608: PUSH
9609: LD_INT 4
9611: PUSH
9612: LD_INT 25
9614: PUSH
9615: LD_INT 43
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: LD_VAR 0 2
9627: ARRAY
9628: ST_TO_ADDR
9629: GO 9812
9631: LD_INT 39
9633: DOUBLE
9634: EQUAL
9635: IFTRUE 9639
9637: GO 9667
9639: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9640: LD_ADDR_VAR 0 3
9644: PUSH
9645: LD_INT 5
9647: PUSH
9648: LD_INT 27
9650: PUSH
9651: LD_INT 44
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: PUSH
9659: LD_VAR 0 2
9663: ARRAY
9664: ST_TO_ADDR
9665: GO 9812
9667: LD_INT 31
9669: DOUBLE
9670: EQUAL
9671: IFTRUE 9675
9673: GO 9703
9675: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9676: LD_ADDR_VAR 0 3
9680: PUSH
9681: LD_STRING 
9683: PUSH
9684: LD_STRING 
9686: PUSH
9687: LD_INT 49
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: PUSH
9695: LD_VAR 0 2
9699: ARRAY
9700: ST_TO_ADDR
9701: GO 9812
9703: LD_INT 14
9705: DOUBLE
9706: EQUAL
9707: IFTRUE 9711
9709: GO 9739
9711: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9712: LD_ADDR_VAR 0 3
9716: PUSH
9717: LD_INT 10
9719: PUSH
9720: LD_STRING 
9722: PUSH
9723: LD_STRING 
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: PUSH
9731: LD_VAR 0 2
9735: ARRAY
9736: ST_TO_ADDR
9737: GO 9812
9739: LD_INT 10
9741: DOUBLE
9742: EQUAL
9743: IFTRUE 9747
9745: GO 9775
9747: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9748: LD_ADDR_VAR 0 3
9752: PUSH
9753: LD_INT 9
9755: PUSH
9756: LD_STRING 
9758: PUSH
9759: LD_STRING 
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: LD_VAR 0 2
9771: ARRAY
9772: ST_TO_ADDR
9773: GO 9812
9775: LD_INT 40
9777: DOUBLE
9778: EQUAL
9779: IFTRUE 9783
9781: GO 9811
9783: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9784: LD_ADDR_VAR 0 3
9788: PUSH
9789: LD_INT 7
9791: PUSH
9792: LD_INT 28
9794: PUSH
9795: LD_INT 45
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: LD_VAR 0 2
9807: ARRAY
9808: ST_TO_ADDR
9809: GO 9812
9811: POP
// end ;
9812: LD_VAR 0 3
9816: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9817: LD_INT 0
9819: PPUSH
9820: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9821: LD_ADDR_VAR 0 2
9825: PUSH
9826: LD_VAR 0 1
9830: PPUSH
9831: LD_INT 1
9833: PPUSH
9834: CALL_OW 289
9838: PUSH
9839: LD_VAR 0 1
9843: PPUSH
9844: LD_INT 2
9846: PPUSH
9847: CALL_OW 289
9851: PUSH
9852: LD_VAR 0 1
9856: PPUSH
9857: LD_INT 3
9859: PPUSH
9860: CALL_OW 289
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: LIST
9869: ST_TO_ADDR
// end ; end_of_file
9870: LD_VAR 0 2
9874: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9875: LD_VAR 0 1
9879: PPUSH
9880: CALL_OW 255
9884: PUSH
9885: LD_INT 3
9887: EQUAL
9888: PUSH
9889: LD_VAR 0 1
9893: PPUSH
9894: CALL_OW 266
9898: PUSH
9899: LD_INT 0
9901: EQUAL
9902: AND
9903: IFFALSE 9917
// SetBname ( building , bukharin ) ;
9905: LD_VAR 0 1
9909: PPUSH
9910: LD_STRING bukharin
9912: PPUSH
9913: CALL_OW 500
// if GetSide ( building ) = 2 then
9917: LD_VAR 0 1
9921: PPUSH
9922: CALL_OW 255
9926: PUSH
9927: LD_INT 2
9929: EQUAL
9930: IFFALSE 10071
// begin if GetBType ( building ) = b_lab then
9932: LD_VAR 0 1
9936: PPUSH
9937: CALL_OW 266
9941: PUSH
9942: LD_INT 6
9944: EQUAL
9945: IFFALSE 9959
// ComUpgradeLab ( building , b_lab_weapon ) ;
9947: LD_VAR 0 1
9951: PPUSH
9952: LD_INT 10
9954: PPUSH
9955: CALL_OW 147
// if GetBType ( building ) = b_workshop then
9959: LD_VAR 0 1
9963: PPUSH
9964: CALL_OW 266
9968: PUSH
9969: LD_INT 2
9971: EQUAL
9972: IFFALSE 9983
// ComUpgrade ( building ) ;
9974: LD_VAR 0 1
9978: PPUSH
9979: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
9983: LD_VAR 0 1
9987: PPUSH
9988: CALL_OW 266
9992: PUSH
9993: LD_INT 17
9995: EQUAL
9996: IFFALSE 10071
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 2 , 2 , 3 ] [ Difficulty ] , 1 , [ 1 , 1 , 2 ] [ Difficulty ] , true ) ;
9998: LD_INT 2
10000: PPUSH
10001: LD_INT 2
10003: PPUSH
10004: LD_EXP 51
10008: PPUSH
10009: LD_INT 34
10011: PPUSH
10012: LD_INT 39
10014: PPUSH
10015: LD_INT 40
10017: PPUSH
10018: LD_INT 35
10020: PPUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 2
10026: PUSH
10027: LD_INT 3
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: PUSH
10035: LD_OWVAR 67
10039: ARRAY
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: LD_INT 1
10046: PUSH
10047: LD_INT 1
10049: PUSH
10050: LD_INT 2
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: PUSH
10058: LD_OWVAR 67
10062: ARRAY
10063: PPUSH
10064: LD_INT 1
10066: PPUSH
10067: CALL 10887 0 11
// end ; end ;
10071: PPOPN 1
10073: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
10074: LD_VAR 0 2
10078: PPUSH
10079: CALL_OW 255
10083: PUSH
10084: LD_INT 3
10086: EQUAL
10087: PUSH
10088: LD_VAR 0 2
10092: PPUSH
10093: CALL_OW 248
10097: PUSH
10098: LD_INT 3
10100: EQUAL
10101: AND
10102: PUSH
10103: LD_EXP 10
10107: NOT
10108: AND
10109: IFFALSE 10120
// Dial_TameApe ( human ) ;
10111: LD_VAR 0 2
10115: PPUSH
10116: CALL 4458 0 1
// end ;
10120: PPOPN 2
10122: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10123: LD_VAR 0 1
10127: PUSH
10128: LD_INT 1
10130: EQUAL
10131: PUSH
10132: LD_VAR 0 2
10136: PPUSH
10137: CALL_OW 255
10141: PUSH
10142: LD_INT 3
10144: EQUAL
10145: AND
10146: IFFALSE 10152
// Dial_ResearchApeLang ;
10148: CALL 4347 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10152: LD_VAR 0 1
10156: PUSH
10157: LD_INT 2
10159: EQUAL
10160: PUSH
10161: LD_VAR 0 2
10165: PPUSH
10166: CALL_OW 255
10170: PUSH
10171: LD_INT 3
10173: EQUAL
10174: AND
10175: IFFALSE 10181
// Dial_ResearchApePsych ;
10177: CALL 4891 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10181: LD_VAR 0 1
10185: PUSH
10186: LD_INT 11
10188: EQUAL
10189: PUSH
10190: LD_VAR 0 2
10194: PPUSH
10195: CALL_OW 255
10199: PUSH
10200: LD_INT 3
10202: EQUAL
10203: AND
10204: IFFALSE 10210
// Dial_ResearchApeAgress ;
10206: CALL 5083 0 0
// end ;
10210: PPOPN 2
10212: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL_OW 255
10222: PUSH
10223: LD_INT 3
10225: EQUAL
10226: PUSH
10227: LD_VAR 0 2
10231: PPUSH
10232: CALL_OW 257
10236: PUSH
10237: LD_INT 12
10239: EQUAL
10240: AND
10241: PUSH
10242: LD_VAR 0 1
10246: PPUSH
10247: CALL_OW 266
10251: PUSH
10252: LD_INT 6
10254: EQUAL
10255: PUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 266
10265: PUSH
10266: LD_INT 7
10268: EQUAL
10269: OR
10270: AND
10271: PUSH
10272: LD_EXP 11
10276: NOT
10277: AND
10278: IFFALSE 10284
// Dial_ApeEnterLab ;
10280: CALL 4679 0 0
// end ;
10284: PPOPN 2
10286: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10287: LD_VAR 0 1
10291: PUSH
10292: LD_EXP 52
10296: IN
10297: IFFALSE 10315
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10299: LD_ADDR_EXP 52
10303: PUSH
10304: LD_EXP 52
10308: PUSH
10309: LD_VAR 0 1
10313: DIFF
10314: ST_TO_ADDR
// if unit in arabianHovercrafts then
10315: LD_VAR 0 1
10319: PUSH
10320: LD_EXP 53
10324: IN
10325: IFFALSE 10343
// arabianHovercrafts = arabianHovercrafts diff unit ;
10327: LD_ADDR_EXP 53
10331: PUSH
10332: LD_EXP 53
10336: PUSH
10337: LD_VAR 0 1
10341: DIFF
10342: ST_TO_ADDR
// if unit in arabianPatrolTroops then
10343: LD_VAR 0 1
10347: PUSH
10348: LD_EXP 54
10352: IN
10353: IFFALSE 10371
// arabianPatrolTroops = arabianPatrolTroops diff unit ;
10355: LD_ADDR_EXP 54
10359: PUSH
10360: LD_EXP 54
10364: PUSH
10365: LD_VAR 0 1
10369: DIFF
10370: ST_TO_ADDR
// end ;
10371: PPOPN 1
10373: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10374: LD_VAR 0 1
10378: PUSH
10379: LD_EXP 51
10383: IN
10384: IFFALSE 10402
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10386: LD_ADDR_EXP 51
10390: PUSH
10391: LD_EXP 51
10395: PUSH
10396: LD_VAR 0 1
10400: DIFF
10401: ST_TO_ADDR
// if unit = Burlak then
10402: LD_VAR 0 1
10406: PUSH
10407: LD_EXP 39
10411: EQUAL
10412: IFFALSE 10418
// Lose_Burlak ;
10414: CALL 17271 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10418: LD_INT 22
10420: PUSH
10421: LD_INT 3
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: LD_INT 21
10430: PUSH
10431: LD_INT 1
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 23
10440: PUSH
10441: LD_INT 3
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: LIST
10452: PPUSH
10453: CALL_OW 69
10457: PUSH
10458: LD_INT 6
10460: LESS
10461: IFFALSE 10467
// Lose_Survive ;
10463: CALL 17286 0 0
// if GetType ( unit ) = unit_vehicle and GetSide ( unit ) = 2 and GetChassis ( unit ) = ar_hovercraft then
10467: LD_VAR 0 1
10471: PPUSH
10472: CALL_OW 247
10476: PUSH
10477: LD_INT 2
10479: EQUAL
10480: PUSH
10481: LD_VAR 0 1
10485: PPUSH
10486: CALL_OW 255
10490: PUSH
10491: LD_INT 2
10493: EQUAL
10494: AND
10495: PUSH
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL_OW 265
10505: PUSH
10506: LD_INT 11
10508: EQUAL
10509: AND
10510: IFFALSE 10526
// achievement_DestroyedHovercrafts = achievement_DestroyedHovercrafts + 1 ;
10512: LD_ADDR_EXP 25
10516: PUSH
10517: LD_EXP 25
10521: PUSH
10522: LD_INT 1
10524: PLUS
10525: ST_TO_ADDR
// end ;
10526: PPOPN 1
10528: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10529: LD_VAR 0 1
10533: PUSH
10534: LD_INT 3
10536: EQUAL
10537: PUSH
10538: LD_VAR 0 2
10542: PUSH
10543: LD_INT 6
10545: EQUAL
10546: AND
10547: PUSH
10548: LD_VAR 0 1
10552: PUSH
10553: LD_INT 6
10555: EQUAL
10556: PUSH
10557: LD_VAR 0 2
10561: PUSH
10562: LD_INT 3
10564: EQUAL
10565: AND
10566: OR
10567: PUSH
10568: LD_EXP 57
10572: PPUSH
10573: CALL_OW 255
10577: PUSH
10578: LD_INT 6
10580: EQUAL
10581: AND
10582: IFFALSE 10640
// begin stevensFollow = false ;
10584: LD_ADDR_EXP 15
10588: PUSH
10589: LD_INT 0
10591: ST_TO_ADDR
// stevensCanExitMap = true ;
10592: LD_ADDR_EXP 19
10596: PUSH
10597: LD_INT 1
10599: ST_TO_ADDR
// stevensWasInDepot = false ;
10600: LD_ADDR_EXP 18
10604: PUSH
10605: LD_INT 0
10607: ST_TO_ADDR
// stevensDepot = false ;
10608: LD_ADDR_EXP 17
10612: PUSH
10613: LD_INT 0
10615: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10616: LD_EXP 57
10620: PPUSH
10621: LD_INT 1
10623: PPUSH
10624: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10628: LD_EXP 57
10632: PPUSH
10633: LD_INT 37
10635: PPUSH
10636: CALL_OW 113
// end ; end ; end_of_file
10640: PPOPN 2
10642: END
// export function BuildBase ; var engs ; begin
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_INT 22
10654: PUSH
10655: LD_INT 2
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 21
10664: PUSH
10665: LD_INT 1
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 25
10674: PUSH
10675: LD_INT 2
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: PPUSH
10687: CALL_OW 69
10691: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10692: LD_VAR 0 2
10696: PPUSH
10697: LD_INT 4
10699: PPUSH
10700: LD_INT 129
10702: PPUSH
10703: LD_INT 74
10705: PPUSH
10706: LD_INT 2
10708: PPUSH
10709: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10713: LD_VAR 0 2
10717: PPUSH
10718: LD_INT 26
10720: PPUSH
10721: LD_INT 128
10723: PPUSH
10724: LD_INT 53
10726: PPUSH
10727: LD_INT 2
10729: PPUSH
10730: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 127 , 56 , 1 ) ;
10734: LD_VAR 0 2
10738: PPUSH
10739: LD_INT 26
10741: PPUSH
10742: LD_INT 127
10744: PPUSH
10745: LD_INT 56
10747: PPUSH
10748: LD_INT 1
10750: PPUSH
10751: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10755: LD_VAR 0 2
10759: PPUSH
10760: LD_INT 6
10762: PPUSH
10763: LD_INT 138
10765: PPUSH
10766: LD_INT 78
10768: PPUSH
10769: LD_INT 5
10771: PPUSH
10772: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10776: LD_VAR 0 2
10780: PPUSH
10781: LD_INT 2
10783: PPUSH
10784: LD_INT 137
10786: PPUSH
10787: LD_INT 63
10789: PPUSH
10790: LD_INT 4
10792: PPUSH
10793: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10797: LD_VAR 0 2
10801: PPUSH
10802: LD_INT 23
10804: PPUSH
10805: LD_INT 137
10807: PPUSH
10808: LD_INT 60
10810: PPUSH
10811: LD_INT 3
10813: PPUSH
10814: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10818: LD_VAR 0 2
10822: PPUSH
10823: LD_INT 16
10825: PPUSH
10826: LD_INT 140
10828: PPUSH
10829: LD_INT 66
10831: PPUSH
10832: LD_INT 5
10834: PPUSH
10835: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 17
10846: PPUSH
10847: LD_INT 133
10849: PPUSH
10850: LD_INT 59
10852: PPUSH
10853: LD_INT 2
10855: PPUSH
10856: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10860: LD_INT 1
10862: PUSH
10863: LD_EXP 50
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PPUSH
10872: LD_INT 128
10874: PPUSH
10875: LD_INT 66
10877: PPUSH
10878: CALL_OW 111
// end ;
10882: LD_VAR 0 1
10886: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , offensiveReadyCounter , target1 , target2 , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10887: LD_INT 0
10889: PPUSH
10890: PPUSH
10891: PPUSH
10892: PPUSH
10893: PPUSH
10894: PPUSH
10895: PPUSH
10896: PPUSH
10897: PPUSH
10898: PPUSH
10899: PPUSH
10900: PPUSH
10901: PPUSH
10902: PPUSH
10903: PPUSH
10904: PPUSH
10905: PPUSH
10906: PPUSH
10907: PPUSH
10908: PPUSH
10909: PPUSH
10910: PPUSH
10911: PPUSH
10912: PPUSH
10913: PPUSH
10914: PPUSH
10915: PPUSH
10916: PPUSH
10917: PPUSH
10918: PPUSH
10919: PPUSH
10920: PPUSH
// personel = [ ] ;
10921: LD_ADDR_VAR 0 18
10925: PUSH
10926: EMPTY
10927: ST_TO_ADDR
// vehicles = [ ] ;
10928: LD_ADDR_VAR 0 24
10932: PUSH
10933: EMPTY
10934: ST_TO_ADDR
// for unit in basePersonel do
10935: LD_ADDR_VAR 0 17
10939: PUSH
10940: LD_VAR 0 3
10944: PUSH
10945: FOR_IN
10946: IFFALSE 10994
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
10948: LD_ADDR_VAR 0 18
10952: PUSH
10953: LD_VAR 0 18
10957: PUSH
10958: LD_VAR 0 17
10962: PUSH
10963: LD_VAR 0 17
10967: PPUSH
10968: CALL_OW 310
10972: PUSH
10973: LD_VAR 0 17
10977: PPUSH
10978: CALL_OW 302
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: ADD
10991: ST_TO_ADDR
10992: GO 10945
10994: POP
10995: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
10996: LD_ADDR_VAR 0 23
11000: PUSH
11001: LD_VAR 0 4
11005: PPUSH
11006: LD_INT 22
11008: PUSH
11009: LD_VAR 0 1
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 21
11020: PUSH
11021: LD_INT 2
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 50
11030: PUSH
11031: EMPTY
11032: LIST
11033: PUSH
11034: LD_INT 3
11036: PUSH
11037: LD_INT 2
11039: PUSH
11040: LD_INT 31
11042: PUSH
11043: LD_INT 31
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 34
11052: PUSH
11053: LD_INT 12
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 34
11062: PUSH
11063: LD_INT 51
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 34
11072: PUSH
11073: LD_INT 32
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PPUSH
11097: CALL_OW 70
11101: PUSH
11102: LD_EXP 52
11106: DIFF
11107: PUSH
11108: FOR_IN
11109: IFFALSE 11157
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11111: LD_ADDR_VAR 0 24
11115: PUSH
11116: LD_VAR 0 24
11120: PUSH
11121: LD_VAR 0 23
11125: PUSH
11126: LD_VAR 0 23
11130: PPUSH
11131: CALL_OW 310
11135: PUSH
11136: LD_VAR 0 23
11140: PPUSH
11141: CALL_OW 302
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: ADD
11154: ST_TO_ADDR
11155: GO 11108
11157: POP
11158: POP
// repeat soldiers = [ ] ;
11159: LD_ADDR_VAR 0 19
11163: PUSH
11164: EMPTY
11165: ST_TO_ADDR
// engineers = [ ] ;
11166: LD_ADDR_VAR 0 20
11170: PUSH
11171: EMPTY
11172: ST_TO_ADDR
// mechanics = [ ] ;
11173: LD_ADDR_VAR 0 21
11177: PUSH
11178: EMPTY
11179: ST_TO_ADDR
// scientists = [ ] ;
11180: LD_ADDR_VAR 0 22
11184: PUSH
11185: EMPTY
11186: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11187: LD_ADDR_VAR 0 33
11191: PUSH
11192: LD_VAR 0 4
11196: PPUSH
11197: LD_INT 22
11199: PUSH
11200: LD_VAR 0 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 21
11211: PUSH
11212: LD_INT 3
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 50
11221: PUSH
11222: EMPTY
11223: LIST
11224: PUSH
11225: LD_INT 2
11227: PUSH
11228: LD_INT 30
11230: PUSH
11231: LD_INT 0
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 30
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 70
11263: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11264: LD_ADDR_VAR 0 34
11268: PUSH
11269: LD_VAR 0 4
11273: PPUSH
11274: LD_INT 22
11276: PUSH
11277: LD_VAR 0 1
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 21
11288: PUSH
11289: LD_INT 3
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 50
11298: PUSH
11299: EMPTY
11300: LIST
11301: PUSH
11302: LD_INT 2
11304: PUSH
11305: LD_INT 30
11307: PUSH
11308: LD_INT 2
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 30
11317: PUSH
11318: LD_INT 3
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PPUSH
11336: CALL_OW 70
11340: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11341: LD_ADDR_VAR 0 35
11345: PUSH
11346: LD_VAR 0 4
11350: PPUSH
11351: LD_INT 22
11353: PUSH
11354: LD_VAR 0 1
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 21
11365: PUSH
11366: LD_INT 3
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 50
11375: PUSH
11376: EMPTY
11377: LIST
11378: PUSH
11379: LD_INT 2
11381: PUSH
11382: LD_INT 30
11384: PUSH
11385: LD_INT 6
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 30
11394: PUSH
11395: LD_INT 7
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 30
11404: PUSH
11405: LD_INT 8
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 70
11428: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11429: LD_ADDR_VAR 0 36
11433: PUSH
11434: LD_VAR 0 4
11438: PPUSH
11439: LD_INT 22
11441: PUSH
11442: LD_VAR 0 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: LD_INT 3
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 50
11463: PUSH
11464: EMPTY
11465: LIST
11466: PUSH
11467: LD_INT 2
11469: PUSH
11470: LD_INT 30
11472: PUSH
11473: LD_INT 31
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 30
11482: PUSH
11483: LD_INT 32
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: PPUSH
11501: CALL_OW 70
11505: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11506: LD_ADDR_VAR 0 37
11510: PUSH
11511: LD_VAR 0 4
11515: PPUSH
11516: LD_INT 22
11518: PUSH
11519: LD_VAR 0 1
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 21
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 50
11540: PUSH
11541: EMPTY
11542: LIST
11543: PUSH
11544: LD_INT 2
11546: PUSH
11547: LD_INT 30
11549: PUSH
11550: LD_INT 4
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: LD_INT 30
11559: PUSH
11560: LD_INT 5
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: PPUSH
11578: CALL_OW 70
11582: ST_TO_ADDR
// for i := 1 to personel do
11583: LD_ADDR_VAR 0 13
11587: PUSH
11588: DOUBLE
11589: LD_INT 1
11591: DEC
11592: ST_TO_ADDR
11593: LD_VAR 0 18
11597: PUSH
11598: FOR_TO
11599: IFFALSE 11805
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11601: LD_VAR 0 18
11605: PUSH
11606: LD_VAR 0 13
11610: ARRAY
11611: PUSH
11612: LD_INT 1
11614: ARRAY
11615: PPUSH
11616: CALL_OW 256
11620: PUSH
11621: LD_INT 1000
11623: EQUAL
11624: IFFALSE 11666
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11626: LD_ADDR_VAR 0 18
11630: PUSH
11631: LD_VAR 0 18
11635: PPUSH
11636: LD_VAR 0 13
11640: PUSH
11641: LD_VAR 0 18
11645: PUSH
11646: LD_VAR 0 13
11650: ARRAY
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PPUSH
11656: LD_INT 1
11658: PPUSH
11659: CALL 26069 0 3
11663: ST_TO_ADDR
// end else
11664: GO 11753
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11666: LD_VAR 0 18
11670: PUSH
11671: LD_VAR 0 13
11675: ARRAY
11676: PUSH
11677: LD_INT 1
11679: ARRAY
11680: PPUSH
11681: CALL_OW 256
11685: PUSH
11686: LD_INT 950
11688: LESSEQUAL
11689: IFFALSE 11753
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
11691: LD_ADDR_VAR 0 18
11695: PUSH
11696: LD_VAR 0 18
11700: PPUSH
11701: LD_VAR 0 13
11705: PUSH
11706: LD_VAR 0 18
11710: PUSH
11711: LD_VAR 0 13
11715: ARRAY
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PPUSH
11721: LD_INT 0
11723: PPUSH
11724: CALL 26069 0 3
11728: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11729: LD_VAR 0 18
11733: PUSH
11734: LD_VAR 0 13
11738: ARRAY
11739: PUSH
11740: LD_INT 1
11742: ARRAY
11743: PPUSH
11744: LD_VAR 0 5
11748: PPUSH
11749: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11753: LD_VAR 0 18
11757: PUSH
11758: LD_VAR 0 13
11762: ARRAY
11763: PUSH
11764: LD_INT 1
11766: ARRAY
11767: PPUSH
11768: CALL_OW 256
11772: PUSH
11773: LD_INT 250
11775: LESS
11776: IFFALSE 11803
// personel = personel diff [ personel [ i ] ] ;
11778: LD_ADDR_VAR 0 18
11782: PUSH
11783: LD_VAR 0 18
11787: PUSH
11788: LD_VAR 0 18
11792: PUSH
11793: LD_VAR 0 13
11797: ARRAY
11798: PUSH
11799: EMPTY
11800: LIST
11801: DIFF
11802: ST_TO_ADDR
// end ;
11803: GO 11598
11805: POP
11806: POP
// for i := 1 to vehicles do
11807: LD_ADDR_VAR 0 13
11811: PUSH
11812: DOUBLE
11813: LD_INT 1
11815: DEC
11816: ST_TO_ADDR
11817: LD_VAR 0 24
11821: PUSH
11822: FOR_TO
11823: IFFALSE 12209
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
11825: LD_VAR 0 24
11829: PUSH
11830: LD_VAR 0 13
11834: ARRAY
11835: PUSH
11836: LD_INT 1
11838: ARRAY
11839: PPUSH
11840: CALL_OW 261
11844: PUSH
11845: LD_INT 50
11847: LESS
11848: IFFALSE 11872
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
11850: LD_VAR 0 24
11854: PUSH
11855: LD_VAR 0 13
11859: ARRAY
11860: PUSH
11861: LD_INT 1
11863: ARRAY
11864: PPUSH
11865: LD_INT 100
11867: PPUSH
11868: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11872: LD_VAR 0 24
11876: PUSH
11877: LD_VAR 0 13
11881: ARRAY
11882: PUSH
11883: LD_INT 1
11885: ARRAY
11886: PPUSH
11887: CALL_OW 256
11891: PUSH
11892: LD_INT 1000
11894: EQUAL
11895: IFFALSE 12070
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11897: LD_VAR 0 24
11901: PUSH
11902: LD_VAR 0 13
11906: ARRAY
11907: PUSH
11908: LD_INT 1
11910: ARRAY
11911: PPUSH
11912: CALL_OW 263
11916: PUSH
11917: LD_INT 1
11919: EQUAL
11920: IFFALSE 11978
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
11922: LD_VAR 0 24
11926: PUSH
11927: LD_VAR 0 13
11931: ARRAY
11932: PUSH
11933: LD_INT 2
11935: ARRAY
11936: PPUSH
11937: CALL_OW 310
11941: NOT
11942: IFFALSE 11978
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
11944: LD_VAR 0 24
11948: PUSH
11949: LD_VAR 0 13
11953: ARRAY
11954: PUSH
11955: LD_INT 2
11957: ARRAY
11958: PPUSH
11959: LD_VAR 0 24
11963: PUSH
11964: LD_VAR 0 13
11968: ARRAY
11969: PUSH
11970: LD_INT 1
11972: ARRAY
11973: PPUSH
11974: CALL_OW 120
// if offensiveunits < vehiclesToAttackAmount then
11978: LD_VAR 0 27
11982: PUSH
11983: LD_VAR 0 10
11987: LESS
11988: IFFALSE 12030
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
11990: LD_ADDR_VAR 0 24
11994: PUSH
11995: LD_VAR 0 24
11999: PPUSH
12000: LD_VAR 0 13
12004: PUSH
12005: LD_VAR 0 24
12009: PUSH
12010: LD_VAR 0 13
12014: ARRAY
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: CALL 26069 0 3
12027: ST_TO_ADDR
12028: GO 12068
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12030: LD_ADDR_VAR 0 24
12034: PUSH
12035: LD_VAR 0 24
12039: PPUSH
12040: LD_VAR 0 13
12044: PUSH
12045: LD_VAR 0 24
12049: PUSH
12050: LD_VAR 0 13
12054: ARRAY
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PPUSH
12060: LD_INT 2
12062: PPUSH
12063: CALL 26069 0 3
12067: ST_TO_ADDR
// end else
12068: GO 12157
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12070: LD_VAR 0 24
12074: PUSH
12075: LD_VAR 0 13
12079: ARRAY
12080: PUSH
12081: LD_INT 1
12083: ARRAY
12084: PPUSH
12085: CALL_OW 256
12089: PUSH
12090: LD_INT 650
12092: LESSEQUAL
12093: IFFALSE 12157
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12095: LD_ADDR_VAR 0 24
12099: PUSH
12100: LD_VAR 0 24
12104: PPUSH
12105: LD_VAR 0 13
12109: PUSH
12110: LD_VAR 0 24
12114: PUSH
12115: LD_VAR 0 13
12119: ARRAY
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PPUSH
12125: LD_INT 0
12127: PPUSH
12128: CALL 26069 0 3
12132: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12133: LD_VAR 0 24
12137: PUSH
12138: LD_VAR 0 13
12142: ARRAY
12143: PUSH
12144: LD_INT 1
12146: ARRAY
12147: PPUSH
12148: LD_VAR 0 6
12152: PPUSH
12153: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12157: LD_VAR 0 24
12161: PUSH
12162: LD_VAR 0 13
12166: ARRAY
12167: PUSH
12168: LD_INT 1
12170: ARRAY
12171: PPUSH
12172: CALL_OW 256
12176: PUSH
12177: LD_INT 250
12179: LESS
12180: IFFALSE 12207
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12182: LD_ADDR_VAR 0 24
12186: PUSH
12187: LD_VAR 0 24
12191: PUSH
12192: LD_VAR 0 24
12196: PUSH
12197: LD_VAR 0 13
12201: ARRAY
12202: PUSH
12203: EMPTY
12204: LIST
12205: DIFF
12206: ST_TO_ADDR
// end ;
12207: GO 11822
12209: POP
12210: POP
// for i := 1 to personel do
12211: LD_ADDR_VAR 0 13
12215: PUSH
12216: DOUBLE
12217: LD_INT 1
12219: DEC
12220: ST_TO_ADDR
12221: LD_VAR 0 18
12225: PUSH
12226: FOR_TO
12227: IFFALSE 12268
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12229: LD_ADDR_VAR 0 19
12233: PUSH
12234: LD_VAR 0 19
12238: PUSH
12239: LD_VAR 0 18
12243: PUSH
12244: LD_VAR 0 13
12248: ARRAY
12249: PPUSH
12250: LD_INT 25
12252: PUSH
12253: LD_INT 1
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 72
12264: ADD
12265: ST_TO_ADDR
12266: GO 12226
12268: POP
12269: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12270: LD_VAR 0 19
12274: PUSH
12275: LD_VAR 0 36
12279: PPUSH
12280: LD_INT 3
12282: PUSH
12283: LD_INT 59
12285: PUSH
12286: EMPTY
12287: LIST
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PPUSH
12293: CALL_OW 72
12297: AND
12298: IFFALSE 12586
// begin for i := 1 to personel do
12300: LD_ADDR_VAR 0 13
12304: PUSH
12305: DOUBLE
12306: LD_INT 1
12308: DEC
12309: ST_TO_ADDR
12310: LD_VAR 0 18
12314: PUSH
12315: FOR_TO
12316: IFFALSE 12582
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12318: LD_VAR 0 18
12322: PUSH
12323: LD_VAR 0 13
12327: ARRAY
12328: PUSH
12329: LD_INT 1
12331: ARRAY
12332: PPUSH
12333: CALL_OW 257
12337: PUSH
12338: LD_INT 1
12340: EQUAL
12341: PUSH
12342: LD_VAR 0 18
12346: PUSH
12347: LD_VAR 0 13
12351: ARRAY
12352: PUSH
12353: LD_INT 3
12355: ARRAY
12356: PUSH
12357: LD_INT 1
12359: EQUAL
12360: AND
12361: IFFALSE 12580
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12363: LD_VAR 0 18
12367: PUSH
12368: LD_VAR 0 13
12372: ARRAY
12373: PUSH
12374: LD_INT 1
12376: ARRAY
12377: PPUSH
12378: CALL_OW 437
12382: IFFALSE 12483
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12384: LD_VAR 0 18
12388: PUSH
12389: LD_VAR 0 13
12393: ARRAY
12394: PUSH
12395: LD_INT 1
12397: ARRAY
12398: PPUSH
12399: CALL_OW 437
12403: PUSH
12404: LD_INT 1
12406: ARRAY
12407: PUSH
12408: LD_INT 1
12410: ARRAY
12411: PUSH
12412: LD_STRING e
12414: EQUAL
12415: PUSH
12416: LD_VAR 0 18
12420: PUSH
12421: LD_VAR 0 13
12425: ARRAY
12426: PUSH
12427: LD_INT 1
12429: ARRAY
12430: PPUSH
12431: CALL_OW 437
12435: PUSH
12436: LD_INT 1
12438: ARRAY
12439: PUSH
12440: LD_INT 4
12442: ARRAY
12443: PPUSH
12444: CALL_OW 266
12448: PUSH
12449: LD_INT 4
12451: PUSH
12452: LD_INT 5
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: IN
12459: AND
12460: IFFALSE 12483
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12462: LD_VAR 0 18
12466: PUSH
12467: LD_VAR 0 13
12471: ARRAY
12472: PUSH
12473: LD_INT 1
12475: ARRAY
12476: PPUSH
12477: EMPTY
12478: PPUSH
12479: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12483: LD_ADDR_VAR 0 40
12487: PUSH
12488: LD_VAR 0 36
12492: PPUSH
12493: LD_INT 3
12495: PUSH
12496: LD_INT 59
12498: PUSH
12499: EMPTY
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PPUSH
12506: CALL_OW 72
12510: PUSH
12511: FOR_IN
12512: IFFALSE 12578
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12514: LD_VAR 0 18
12518: PUSH
12519: LD_VAR 0 13
12523: ARRAY
12524: PUSH
12525: LD_INT 1
12527: ARRAY
12528: PPUSH
12529: CALL_OW 310
12533: PPUSH
12534: CALL_OW 266
12538: PUSH
12539: LD_INT 31
12541: PUSH
12542: LD_INT 32
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: IN
12549: NOT
12550: IFFALSE 12576
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12552: LD_VAR 0 18
12556: PUSH
12557: LD_VAR 0 13
12561: ARRAY
12562: PUSH
12563: LD_INT 1
12565: ARRAY
12566: PPUSH
12567: LD_VAR 0 40
12571: PPUSH
12572: CALL_OW 120
12576: GO 12511
12578: POP
12579: POP
// end ; end ;
12580: GO 12315
12582: POP
12583: POP
// end else
12584: GO 12801
// if soldiers and barracks then
12586: LD_VAR 0 19
12590: PUSH
12591: LD_VAR 0 37
12595: AND
12596: IFFALSE 12801
// for i := 1 to personel do
12598: LD_ADDR_VAR 0 13
12602: PUSH
12603: DOUBLE
12604: LD_INT 1
12606: DEC
12607: ST_TO_ADDR
12608: LD_VAR 0 18
12612: PUSH
12613: FOR_TO
12614: IFFALSE 12799
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12616: LD_VAR 0 18
12620: PUSH
12621: LD_VAR 0 13
12625: ARRAY
12626: PUSH
12627: LD_INT 1
12629: ARRAY
12630: PPUSH
12631: CALL_OW 257
12635: PUSH
12636: LD_INT 1
12638: EQUAL
12639: PUSH
12640: LD_VAR 0 18
12644: PUSH
12645: LD_VAR 0 13
12649: ARRAY
12650: PUSH
12651: LD_INT 3
12653: ARRAY
12654: PUSH
12655: LD_INT 1
12657: EQUAL
12658: AND
12659: PUSH
12660: LD_VAR 0 18
12664: PUSH
12665: LD_VAR 0 13
12669: ARRAY
12670: PUSH
12671: LD_INT 1
12673: ARRAY
12674: PPUSH
12675: LD_INT 56
12677: PUSH
12678: EMPTY
12679: LIST
12680: PPUSH
12681: CALL_OW 72
12685: AND
12686: IFFALSE 12797
// begin if not personel [ i ] [ 2 ] then
12688: LD_VAR 0 18
12692: PUSH
12693: LD_VAR 0 13
12697: ARRAY
12698: PUSH
12699: LD_INT 2
12701: ARRAY
12702: NOT
12703: IFFALSE 12763
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12705: LD_ADDR_VAR 0 18
12709: PUSH
12710: LD_VAR 0 18
12714: PPUSH
12715: LD_VAR 0 13
12719: PUSH
12720: LD_VAR 0 18
12724: PUSH
12725: LD_VAR 0 13
12729: ARRAY
12730: PUSH
12731: LD_INT 1
12733: MINUS
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: LD_VAR 0 37
12743: PUSH
12744: LD_INT 1
12746: PPUSH
12747: LD_VAR 0 37
12751: PPUSH
12752: CALL_OW 12
12756: ARRAY
12757: PPUSH
12758: CALL 26069 0 3
12762: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12763: LD_VAR 0 18
12767: PUSH
12768: LD_VAR 0 13
12772: ARRAY
12773: PUSH
12774: LD_INT 1
12776: ARRAY
12777: PPUSH
12778: LD_VAR 0 18
12782: PUSH
12783: LD_VAR 0 13
12787: ARRAY
12788: PUSH
12789: LD_INT 2
12791: ARRAY
12792: PPUSH
12793: CALL_OW 120
// end ;
12797: GO 12613
12799: POP
12800: POP
// for i := 1 to personel do
12801: LD_ADDR_VAR 0 13
12805: PUSH
12806: DOUBLE
12807: LD_INT 1
12809: DEC
12810: ST_TO_ADDR
12811: LD_VAR 0 18
12815: PUSH
12816: FOR_TO
12817: IFFALSE 12858
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12819: LD_ADDR_VAR 0 20
12823: PUSH
12824: LD_VAR 0 20
12828: PUSH
12829: LD_VAR 0 18
12833: PUSH
12834: LD_VAR 0 13
12838: ARRAY
12839: PPUSH
12840: LD_INT 25
12842: PUSH
12843: LD_INT 2
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 72
12854: ADD
12855: ST_TO_ADDR
12856: GO 12816
12858: POP
12859: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12860: LD_VAR 0 20
12864: PUSH
12865: LD_VAR 0 4
12869: PPUSH
12870: LD_INT 22
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 21
12884: PUSH
12885: LD_INT 3
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 3
12894: PUSH
12895: LD_INT 24
12897: PUSH
12898: LD_INT 1000
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 70
12918: AND
12919: IFFALSE 13195
// begin for i := 1 to personel do
12921: LD_ADDR_VAR 0 13
12925: PUSH
12926: DOUBLE
12927: LD_INT 1
12929: DEC
12930: ST_TO_ADDR
12931: LD_VAR 0 18
12935: PUSH
12936: FOR_TO
12937: IFFALSE 13191
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
12939: LD_VAR 0 18
12943: PUSH
12944: LD_VAR 0 13
12948: ARRAY
12949: PUSH
12950: LD_INT 1
12952: ARRAY
12953: PPUSH
12954: CALL_OW 257
12958: PUSH
12959: LD_INT 2
12961: EQUAL
12962: PUSH
12963: LD_VAR 0 18
12967: PUSH
12968: LD_VAR 0 13
12972: ARRAY
12973: PUSH
12974: LD_INT 3
12976: ARRAY
12977: PUSH
12978: LD_INT 1
12980: EQUAL
12981: AND
12982: IFFALSE 13189
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12984: LD_VAR 0 18
12988: PUSH
12989: LD_VAR 0 13
12993: ARRAY
12994: PUSH
12995: LD_INT 1
12997: ARRAY
12998: PPUSH
12999: CALL_OW 437
13003: IFFALSE 13059
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13005: LD_VAR 0 18
13009: PUSH
13010: LD_VAR 0 13
13014: ARRAY
13015: PUSH
13016: LD_INT 1
13018: ARRAY
13019: PPUSH
13020: CALL_OW 437
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PUSH
13033: LD_STRING e
13035: EQUAL
13036: IFFALSE 13059
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13038: LD_VAR 0 18
13042: PUSH
13043: LD_VAR 0 13
13047: ARRAY
13048: PUSH
13049: LD_INT 1
13051: ARRAY
13052: PPUSH
13053: EMPTY
13054: PPUSH
13055: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13059: LD_VAR 0 18
13063: PUSH
13064: LD_VAR 0 13
13068: ARRAY
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: CALL_OW 310
13078: IFFALSE 13099
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13080: LD_VAR 0 18
13084: PUSH
13085: LD_VAR 0 13
13089: ARRAY
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: PPUSH
13095: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13099: LD_ADDR_VAR 0 38
13103: PUSH
13104: LD_VAR 0 4
13108: PPUSH
13109: LD_INT 22
13111: PUSH
13112: LD_VAR 0 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 21
13123: PUSH
13124: LD_INT 3
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 3
13133: PUSH
13134: LD_INT 24
13136: PUSH
13137: LD_INT 1000
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: PPUSH
13153: CALL_OW 70
13157: PUSH
13158: FOR_IN
13159: IFFALSE 13187
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13161: LD_VAR 0 18
13165: PUSH
13166: LD_VAR 0 13
13170: ARRAY
13171: PUSH
13172: LD_INT 1
13174: ARRAY
13175: PPUSH
13176: LD_VAR 0 38
13180: PPUSH
13181: CALL_OW 190
13185: GO 13158
13187: POP
13188: POP
// end ;
13189: GO 12936
13191: POP
13192: POP
// end else
13193: GO 13457
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13195: LD_VAR 0 20
13199: PUSH
13200: LD_VAR 0 20
13204: PPUSH
13205: LD_INT 56
13207: PUSH
13208: EMPTY
13209: LIST
13210: PPUSH
13211: CALL_OW 72
13215: AND
13216: PUSH
13217: LD_VAR 0 33
13221: AND
13222: IFFALSE 13457
// for i := 1 to personel do
13224: LD_ADDR_VAR 0 13
13228: PUSH
13229: DOUBLE
13230: LD_INT 1
13232: DEC
13233: ST_TO_ADDR
13234: LD_VAR 0 18
13238: PUSH
13239: FOR_TO
13240: IFFALSE 13455
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13242: LD_VAR 0 18
13246: PUSH
13247: LD_VAR 0 13
13251: ARRAY
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: CALL_OW 257
13261: PUSH
13262: LD_INT 2
13264: EQUAL
13265: PUSH
13266: LD_VAR 0 18
13270: PUSH
13271: LD_VAR 0 13
13275: ARRAY
13276: PUSH
13277: LD_INT 3
13279: ARRAY
13280: PUSH
13281: LD_INT 1
13283: EQUAL
13284: AND
13285: IFFALSE 13453
// begin if not personel [ i ] [ 2 ] then
13287: LD_VAR 0 18
13291: PUSH
13292: LD_VAR 0 13
13296: ARRAY
13297: PUSH
13298: LD_INT 2
13300: ARRAY
13301: NOT
13302: IFFALSE 13419
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13304: LD_ADDR_VAR 0 18
13308: PUSH
13309: LD_VAR 0 18
13313: PPUSH
13314: LD_VAR 0 13
13318: PUSH
13319: LD_VAR 0 18
13323: PUSH
13324: LD_VAR 0 13
13328: ARRAY
13329: PUSH
13330: LD_INT 1
13332: MINUS
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PPUSH
13338: LD_VAR 0 4
13342: PPUSH
13343: LD_INT 22
13345: PUSH
13346: LD_VAR 0 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 21
13357: PUSH
13358: LD_INT 3
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 50
13367: PUSH
13368: EMPTY
13369: LIST
13370: PUSH
13371: LD_INT 2
13373: PUSH
13374: LD_INT 30
13376: PUSH
13377: LD_INT 0
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 30
13386: PUSH
13387: LD_INT 1
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: PPUSH
13405: CALL_OW 70
13409: PUSH
13410: LD_INT 1
13412: ARRAY
13413: PPUSH
13414: CALL 26069 0 3
13418: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13419: LD_VAR 0 18
13423: PUSH
13424: LD_VAR 0 13
13428: ARRAY
13429: PUSH
13430: LD_INT 1
13432: ARRAY
13433: PPUSH
13434: LD_VAR 0 18
13438: PUSH
13439: LD_VAR 0 13
13443: ARRAY
13444: PUSH
13445: LD_INT 2
13447: ARRAY
13448: PPUSH
13449: CALL_OW 120
// end ; end ;
13453: GO 13239
13455: POP
13456: POP
// for i := 1 to personel do
13457: LD_ADDR_VAR 0 13
13461: PUSH
13462: DOUBLE
13463: LD_INT 1
13465: DEC
13466: ST_TO_ADDR
13467: LD_VAR 0 18
13471: PUSH
13472: FOR_TO
13473: IFFALSE 13514
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13475: LD_ADDR_VAR 0 21
13479: PUSH
13480: LD_VAR 0 21
13484: PUSH
13485: LD_VAR 0 18
13489: PUSH
13490: LD_VAR 0 13
13494: ARRAY
13495: PPUSH
13496: LD_INT 25
13498: PUSH
13499: LD_INT 3
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 72
13510: ADD
13511: ST_TO_ADDR
13512: GO 13472
13514: POP
13515: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13516: LD_VAR 0 21
13520: PUSH
13521: LD_VAR 0 4
13525: PPUSH
13526: LD_INT 22
13528: PUSH
13529: LD_VAR 0 1
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 21
13540: PUSH
13541: LD_INT 2
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 3
13550: PUSH
13551: LD_INT 24
13553: PUSH
13554: LD_INT 1000
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 70
13574: AND
13575: IFFALSE 14009
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13577: LD_ADDR_VAR 0 39
13581: PUSH
13582: LD_VAR 0 4
13586: PPUSH
13587: LD_INT 22
13589: PUSH
13590: LD_VAR 0 1
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 21
13601: PUSH
13602: LD_INT 2
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PUSH
13609: LD_INT 3
13611: PUSH
13612: LD_INT 24
13614: PUSH
13615: LD_INT 1000
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: PPUSH
13631: CALL_OW 70
13635: PUSH
13636: FOR_IN
13637: IFFALSE 14005
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13639: LD_VAR 0 39
13643: PPUSH
13644: LD_VAR 0 6
13648: PPUSH
13649: CALL_OW 299
13653: PUSH
13654: LD_INT 5
13656: LESS
13657: IFFALSE 14003
// begin for i := 1 to vehicles do
13659: LD_ADDR_VAR 0 13
13663: PUSH
13664: DOUBLE
13665: LD_INT 1
13667: DEC
13668: ST_TO_ADDR
13669: LD_VAR 0 24
13673: PUSH
13674: FOR_TO
13675: IFFALSE 13744
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13677: LD_VAR 0 24
13681: PUSH
13682: LD_VAR 0 13
13686: ARRAY
13687: PUSH
13688: LD_INT 1
13690: ARRAY
13691: PUSH
13692: LD_VAR 0 39
13696: EQUAL
13697: IFFALSE 13718
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13699: LD_VAR 0 24
13703: PUSH
13704: LD_VAR 0 13
13708: ARRAY
13709: PUSH
13710: LD_INT 2
13712: ARRAY
13713: PPUSH
13714: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13718: LD_VAR 0 24
13722: PUSH
13723: LD_VAR 0 13
13727: ARRAY
13728: PUSH
13729: LD_INT 2
13731: ARRAY
13732: PPUSH
13733: LD_VAR 0 39
13737: PPUSH
13738: CALL_OW 189
// end ;
13742: GO 13674
13744: POP
13745: POP
// for i := 1 to personel do
13746: LD_ADDR_VAR 0 13
13750: PUSH
13751: DOUBLE
13752: LD_INT 1
13754: DEC
13755: ST_TO_ADDR
13756: LD_VAR 0 18
13760: PUSH
13761: FOR_TO
13762: IFFALSE 14001
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13764: LD_VAR 0 18
13768: PUSH
13769: LD_VAR 0 13
13773: ARRAY
13774: PUSH
13775: LD_INT 1
13777: ARRAY
13778: PPUSH
13779: CALL_OW 257
13783: PUSH
13784: LD_INT 3
13786: EQUAL
13787: PUSH
13788: LD_VAR 0 18
13792: PUSH
13793: LD_VAR 0 13
13797: ARRAY
13798: PUSH
13799: LD_INT 3
13801: ARRAY
13802: PUSH
13803: LD_INT 1
13805: EQUAL
13806: AND
13807: IFFALSE 13999
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13809: LD_VAR 0 18
13813: PUSH
13814: LD_VAR 0 13
13818: ARRAY
13819: PUSH
13820: LD_INT 1
13822: ARRAY
13823: PPUSH
13824: CALL_OW 437
13828: IFFALSE 13884
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13830: LD_VAR 0 18
13834: PUSH
13835: LD_VAR 0 13
13839: ARRAY
13840: PUSH
13841: LD_INT 1
13843: ARRAY
13844: PPUSH
13845: CALL_OW 437
13849: PUSH
13850: LD_INT 1
13852: ARRAY
13853: PUSH
13854: LD_INT 1
13856: ARRAY
13857: PUSH
13858: LD_STRING e
13860: EQUAL
13861: IFFALSE 13884
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13863: LD_VAR 0 18
13867: PUSH
13868: LD_VAR 0 13
13872: ARRAY
13873: PUSH
13874: LD_INT 1
13876: ARRAY
13877: PPUSH
13878: EMPTY
13879: PPUSH
13880: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13884: LD_VAR 0 18
13888: PUSH
13889: LD_VAR 0 13
13893: ARRAY
13894: PUSH
13895: LD_INT 1
13897: ARRAY
13898: PPUSH
13899: CALL_OW 310
13903: IFFALSE 13924
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13905: LD_VAR 0 18
13909: PUSH
13910: LD_VAR 0 13
13914: ARRAY
13915: PUSH
13916: LD_INT 1
13918: ARRAY
13919: PPUSH
13920: CALL_OW 122
// if not IsInArea ( personel [ i ] [ 1 ] , baseArea ) then
13924: LD_VAR 0 18
13928: PUSH
13929: LD_VAR 0 13
13933: ARRAY
13934: PUSH
13935: LD_INT 1
13937: ARRAY
13938: PPUSH
13939: LD_VAR 0 4
13943: PPUSH
13944: CALL_OW 308
13948: NOT
13949: IFFALSE 13975
// ComMoveToArea ( personel [ i ] [ 1 ] , baseArea ) ;
13951: LD_VAR 0 18
13955: PUSH
13956: LD_VAR 0 13
13960: ARRAY
13961: PUSH
13962: LD_INT 1
13964: ARRAY
13965: PPUSH
13966: LD_VAR 0 4
13970: PPUSH
13971: CALL_OW 113
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
13975: LD_VAR 0 18
13979: PUSH
13980: LD_VAR 0 13
13984: ARRAY
13985: PUSH
13986: LD_INT 1
13988: ARRAY
13989: PPUSH
13990: LD_VAR 0 39
13994: PPUSH
13995: CALL_OW 189
// end ;
13999: GO 13761
14001: POP
14002: POP
// end ; end ;
14003: GO 13636
14005: POP
14006: POP
// end else
14007: GO 14214
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
14009: LD_VAR 0 21
14013: PUSH
14014: LD_VAR 0 21
14018: PPUSH
14019: LD_INT 56
14021: PUSH
14022: EMPTY
14023: LIST
14024: PPUSH
14025: CALL_OW 72
14029: AND
14030: PUSH
14031: LD_VAR 0 34
14035: AND
14036: IFFALSE 14214
// for i := 1 to personel do
14038: LD_ADDR_VAR 0 13
14042: PUSH
14043: DOUBLE
14044: LD_INT 1
14046: DEC
14047: ST_TO_ADDR
14048: LD_VAR 0 18
14052: PUSH
14053: FOR_TO
14054: IFFALSE 14212
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14056: LD_VAR 0 18
14060: PUSH
14061: LD_VAR 0 13
14065: ARRAY
14066: PUSH
14067: LD_INT 1
14069: ARRAY
14070: PPUSH
14071: CALL_OW 257
14075: PUSH
14076: LD_INT 3
14078: EQUAL
14079: PUSH
14080: LD_VAR 0 18
14084: PUSH
14085: LD_VAR 0 13
14089: ARRAY
14090: PUSH
14091: LD_INT 3
14093: ARRAY
14094: PUSH
14095: LD_INT 1
14097: EQUAL
14098: AND
14099: IFFALSE 14210
// begin if not personel [ i ] [ 2 ] then
14101: LD_VAR 0 18
14105: PUSH
14106: LD_VAR 0 13
14110: ARRAY
14111: PUSH
14112: LD_INT 2
14114: ARRAY
14115: NOT
14116: IFFALSE 14176
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
14118: LD_ADDR_VAR 0 18
14122: PUSH
14123: LD_VAR 0 18
14127: PPUSH
14128: LD_VAR 0 13
14132: PUSH
14133: LD_VAR 0 18
14137: PUSH
14138: LD_VAR 0 13
14142: ARRAY
14143: PUSH
14144: LD_INT 1
14146: MINUS
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PPUSH
14152: LD_VAR 0 34
14156: PUSH
14157: LD_INT 1
14159: PPUSH
14160: LD_VAR 0 34
14164: PPUSH
14165: CALL_OW 12
14169: ARRAY
14170: PPUSH
14171: CALL 26069 0 3
14175: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14176: LD_VAR 0 18
14180: PUSH
14181: LD_VAR 0 13
14185: ARRAY
14186: PUSH
14187: LD_INT 1
14189: ARRAY
14190: PPUSH
14191: LD_VAR 0 18
14195: PUSH
14196: LD_VAR 0 13
14200: ARRAY
14201: PUSH
14202: LD_INT 2
14204: ARRAY
14205: PPUSH
14206: CALL_OW 120
// end ;
14210: GO 14053
14212: POP
14213: POP
// for i := 1 to personel do
14214: LD_ADDR_VAR 0 13
14218: PUSH
14219: DOUBLE
14220: LD_INT 1
14222: DEC
14223: ST_TO_ADDR
14224: LD_VAR 0 18
14228: PUSH
14229: FOR_TO
14230: IFFALSE 14271
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14232: LD_ADDR_VAR 0 22
14236: PUSH
14237: LD_VAR 0 22
14241: PUSH
14242: LD_VAR 0 18
14246: PUSH
14247: LD_VAR 0 13
14251: ARRAY
14252: PPUSH
14253: LD_INT 25
14255: PUSH
14256: LD_INT 4
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PPUSH
14263: CALL_OW 72
14267: ADD
14268: ST_TO_ADDR
14269: GO 14229
14271: POP
14272: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14273: LD_VAR 0 22
14277: PUSH
14278: LD_VAR 0 4
14282: PPUSH
14283: LD_INT 22
14285: PUSH
14286: LD_VAR 0 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 1
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: LD_INT 24
14310: PUSH
14311: LD_INT 1000
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: PPUSH
14327: CALL_OW 70
14331: AND
14332: IFFALSE 14849
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14334: LD_ADDR_VAR 0 39
14338: PUSH
14339: LD_VAR 0 4
14343: PPUSH
14344: LD_INT 22
14346: PUSH
14347: LD_VAR 0 1
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 21
14358: PUSH
14359: LD_INT 1
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: LD_INT 3
14368: PUSH
14369: LD_INT 24
14371: PUSH
14372: LD_INT 1000
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: PPUSH
14388: CALL_OW 70
14392: PUSH
14393: FOR_IN
14394: IFFALSE 14845
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14396: LD_VAR 0 39
14400: PPUSH
14401: LD_VAR 0 5
14405: PPUSH
14406: CALL_OW 299
14410: PUSH
14411: LD_INT 5
14413: LESS
14414: IFFALSE 14622
// for i := 1 to personel do
14416: LD_ADDR_VAR 0 13
14420: PUSH
14421: DOUBLE
14422: LD_INT 1
14424: DEC
14425: ST_TO_ADDR
14426: LD_VAR 0 18
14430: PUSH
14431: FOR_TO
14432: IFFALSE 14620
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14434: LD_VAR 0 18
14438: PUSH
14439: LD_VAR 0 13
14443: ARRAY
14444: PUSH
14445: LD_INT 1
14447: ARRAY
14448: PPUSH
14449: CALL_OW 257
14453: PUSH
14454: LD_INT 4
14456: EQUAL
14457: PUSH
14458: LD_VAR 0 18
14462: PUSH
14463: LD_VAR 0 13
14467: ARRAY
14468: PUSH
14469: LD_INT 3
14471: ARRAY
14472: PUSH
14473: LD_INT 1
14475: EQUAL
14476: AND
14477: IFFALSE 14618
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14479: LD_VAR 0 18
14483: PUSH
14484: LD_VAR 0 13
14488: ARRAY
14489: PUSH
14490: LD_INT 1
14492: ARRAY
14493: PPUSH
14494: CALL_OW 437
14498: IFFALSE 14554
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14500: LD_VAR 0 18
14504: PUSH
14505: LD_VAR 0 13
14509: ARRAY
14510: PUSH
14511: LD_INT 1
14513: ARRAY
14514: PPUSH
14515: CALL_OW 437
14519: PUSH
14520: LD_INT 1
14522: ARRAY
14523: PUSH
14524: LD_INT 1
14526: ARRAY
14527: PUSH
14528: LD_STRING e
14530: EQUAL
14531: IFFALSE 14554
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14533: LD_VAR 0 18
14537: PUSH
14538: LD_VAR 0 13
14542: ARRAY
14543: PUSH
14544: LD_INT 1
14546: ARRAY
14547: PPUSH
14548: EMPTY
14549: PPUSH
14550: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14554: LD_VAR 0 18
14558: PUSH
14559: LD_VAR 0 13
14563: ARRAY
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: PPUSH
14569: CALL_OW 310
14573: IFFALSE 14594
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14575: LD_VAR 0 18
14579: PUSH
14580: LD_VAR 0 13
14584: ARRAY
14585: PUSH
14586: LD_INT 1
14588: ARRAY
14589: PPUSH
14590: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14594: LD_VAR 0 18
14598: PUSH
14599: LD_VAR 0 13
14603: ARRAY
14604: PUSH
14605: LD_INT 1
14607: ARRAY
14608: PPUSH
14609: LD_VAR 0 39
14613: PPUSH
14614: CALL_OW 188
// end ;
14618: GO 14431
14620: POP
14621: POP
// if GetLives ( damageUnit ) < 250 then
14622: LD_VAR 0 39
14626: PPUSH
14627: CALL_OW 256
14631: PUSH
14632: LD_INT 250
14634: LESS
14635: IFFALSE 14843
// for i := 1 to personel do
14637: LD_ADDR_VAR 0 13
14641: PUSH
14642: DOUBLE
14643: LD_INT 1
14645: DEC
14646: ST_TO_ADDR
14647: LD_VAR 0 18
14651: PUSH
14652: FOR_TO
14653: IFFALSE 14841
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14655: LD_VAR 0 18
14659: PUSH
14660: LD_VAR 0 13
14664: ARRAY
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: PPUSH
14670: CALL_OW 257
14674: PUSH
14675: LD_INT 4
14677: EQUAL
14678: PUSH
14679: LD_VAR 0 18
14683: PUSH
14684: LD_VAR 0 13
14688: ARRAY
14689: PUSH
14690: LD_INT 3
14692: ARRAY
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: AND
14698: IFFALSE 14839
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14700: LD_VAR 0 18
14704: PUSH
14705: LD_VAR 0 13
14709: ARRAY
14710: PUSH
14711: LD_INT 1
14713: ARRAY
14714: PPUSH
14715: CALL_OW 437
14719: IFFALSE 14775
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14721: LD_VAR 0 18
14725: PUSH
14726: LD_VAR 0 13
14730: ARRAY
14731: PUSH
14732: LD_INT 1
14734: ARRAY
14735: PPUSH
14736: CALL_OW 437
14740: PUSH
14741: LD_INT 1
14743: ARRAY
14744: PUSH
14745: LD_INT 1
14747: ARRAY
14748: PUSH
14749: LD_STRING e
14751: EQUAL
14752: IFFALSE 14775
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14754: LD_VAR 0 18
14758: PUSH
14759: LD_VAR 0 13
14763: ARRAY
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PPUSH
14769: EMPTY
14770: PPUSH
14771: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14775: LD_VAR 0 18
14779: PUSH
14780: LD_VAR 0 13
14784: ARRAY
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: CALL_OW 310
14794: IFFALSE 14815
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14796: LD_VAR 0 18
14800: PUSH
14801: LD_VAR 0 13
14805: ARRAY
14806: PUSH
14807: LD_INT 1
14809: ARRAY
14810: PPUSH
14811: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14815: LD_VAR 0 18
14819: PUSH
14820: LD_VAR 0 13
14824: ARRAY
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: PPUSH
14830: LD_VAR 0 39
14834: PPUSH
14835: CALL_OW 188
// end ;
14839: GO 14652
14841: POP
14842: POP
// end ;
14843: GO 14393
14845: POP
14846: POP
// end else
14847: GO 15054
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14849: LD_VAR 0 22
14853: PUSH
14854: LD_VAR 0 22
14858: PPUSH
14859: LD_INT 56
14861: PUSH
14862: EMPTY
14863: LIST
14864: PPUSH
14865: CALL_OW 72
14869: AND
14870: PUSH
14871: LD_VAR 0 35
14875: AND
14876: IFFALSE 15054
// for i := 1 to personel do
14878: LD_ADDR_VAR 0 13
14882: PUSH
14883: DOUBLE
14884: LD_INT 1
14886: DEC
14887: ST_TO_ADDR
14888: LD_VAR 0 18
14892: PUSH
14893: FOR_TO
14894: IFFALSE 15052
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14896: LD_VAR 0 18
14900: PUSH
14901: LD_VAR 0 13
14905: ARRAY
14906: PUSH
14907: LD_INT 1
14909: ARRAY
14910: PPUSH
14911: CALL_OW 257
14915: PUSH
14916: LD_INT 4
14918: EQUAL
14919: PUSH
14920: LD_VAR 0 18
14924: PUSH
14925: LD_VAR 0 13
14929: ARRAY
14930: PUSH
14931: LD_INT 3
14933: ARRAY
14934: PUSH
14935: LD_INT 1
14937: EQUAL
14938: AND
14939: IFFALSE 15050
// begin if not personel [ i ] [ 2 ] then
14941: LD_VAR 0 18
14945: PUSH
14946: LD_VAR 0 13
14950: ARRAY
14951: PUSH
14952: LD_INT 2
14954: ARRAY
14955: NOT
14956: IFFALSE 15016
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
14958: LD_ADDR_VAR 0 18
14962: PUSH
14963: LD_VAR 0 18
14967: PPUSH
14968: LD_VAR 0 13
14972: PUSH
14973: LD_VAR 0 18
14977: PUSH
14978: LD_VAR 0 13
14982: ARRAY
14983: PUSH
14984: LD_INT 1
14986: MINUS
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PPUSH
14992: LD_VAR 0 35
14996: PUSH
14997: LD_INT 1
14999: PPUSH
15000: LD_VAR 0 35
15004: PPUSH
15005: CALL_OW 12
15009: ARRAY
15010: PPUSH
15011: CALL 26069 0 3
15015: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15016: LD_VAR 0 18
15020: PUSH
15021: LD_VAR 0 13
15025: ARRAY
15026: PUSH
15027: LD_INT 1
15029: ARRAY
15030: PPUSH
15031: LD_VAR 0 18
15035: PUSH
15036: LD_VAR 0 13
15040: ARRAY
15041: PUSH
15042: LD_INT 2
15044: ARRAY
15045: PPUSH
15046: CALL_OW 120
// end ;
15050: GO 14893
15052: POP
15053: POP
// wait ( 0 0$01 ) ;
15054: LD_INT 35
15056: PPUSH
15057: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
15061: LD_VAR 0 24
15065: PUSH
15066: LD_VAR 0 8
15070: LESS
15071: PUSH
15072: LD_VAR 0 34
15076: AND
15077: IFFALSE 15323
// begin tmp = vehiclesAmount - vehicles ;
15079: LD_ADDR_VAR 0 15
15083: PUSH
15084: LD_VAR 0 8
15088: PUSH
15089: LD_VAR 0 24
15093: MINUS
15094: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
15095: LD_ADDR_VAR 0 31
15099: PUSH
15100: LD_VAR 0 1
15104: PPUSH
15105: LD_VAR 0 2
15109: PPUSH
15110: CALL 9203 0 2
15114: ST_TO_ADDR
// for i := 1 to tmp do
15115: LD_ADDR_VAR 0 13
15119: PUSH
15120: DOUBLE
15121: LD_INT 1
15123: DEC
15124: ST_TO_ADDR
15125: LD_VAR 0 15
15129: PUSH
15130: FOR_TO
15131: IFFALSE 15319
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
15133: LD_ADDR_VAR 0 15
15137: PUSH
15138: LD_VAR 0 31
15142: PUSH
15143: LD_INT 1
15145: PPUSH
15146: LD_VAR 0 31
15150: PPUSH
15151: CALL_OW 12
15155: ARRAY
15156: ST_TO_ADDR
// if tmp then
15157: LD_VAR 0 15
15161: IFFALSE 15317
// begin if tmp in [ 34 , 14 , 71 ] then
15163: LD_VAR 0 15
15167: PUSH
15168: LD_INT 34
15170: PUSH
15171: LD_INT 14
15173: PUSH
15174: LD_INT 71
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: IN
15182: IFFALSE 15220
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15184: LD_ADDR_VAR 0 32
15188: PUSH
15189: LD_INT 4
15191: PUSH
15192: EMPTY
15193: LIST
15194: PUSH
15195: LD_INT 14
15197: PUSH
15198: EMPTY
15199: LIST
15200: PUSH
15201: LD_INT 24
15203: PUSH
15204: EMPTY
15205: LIST
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: PUSH
15212: LD_VAR 0 2
15216: ARRAY
15217: ST_TO_ADDR
15218: GO 15274
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15220: LD_ADDR_VAR 0 32
15224: PUSH
15225: LD_INT 2
15227: PUSH
15228: LD_INT 3
15230: PUSH
15231: LD_INT 4
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: PUSH
15239: LD_INT 14
15241: PUSH
15242: EMPTY
15243: LIST
15244: PUSH
15245: LD_INT 21
15247: PUSH
15248: LD_INT 23
15250: PUSH
15251: LD_INT 24
15253: PUSH
15254: LD_INT 22
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: LIST
15267: PUSH
15268: LD_VAR 0 2
15272: ARRAY
15273: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15274: LD_VAR 0 34
15278: PUSH
15279: LD_INT 1
15281: ARRAY
15282: PPUSH
15283: LD_VAR 0 32
15287: PUSH
15288: LD_INT 1
15290: PPUSH
15291: LD_VAR 0 32
15295: PPUSH
15296: CALL_OW 12
15300: ARRAY
15301: PPUSH
15302: LD_INT 1
15304: PPUSH
15305: LD_INT 1
15307: PPUSH
15308: LD_VAR 0 15
15312: PPUSH
15313: CALL_OW 185
// end ; end ;
15317: GO 15130
15319: POP
15320: POP
// end else
15321: GO 15336
// ComCancel ( factory [ 1 ] ) ;
15323: LD_VAR 0 34
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15336: LD_ADDR_VAR 0 23
15340: PUSH
15341: LD_VAR 0 4
15345: PPUSH
15346: LD_INT 22
15348: PUSH
15349: LD_VAR 0 1
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 21
15360: PUSH
15361: LD_INT 2
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 50
15370: PUSH
15371: EMPTY
15372: LIST
15373: PUSH
15374: LD_INT 3
15376: PUSH
15377: LD_INT 2
15379: PUSH
15380: LD_INT 31
15382: PUSH
15383: LD_INT 31
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 34
15392: PUSH
15393: LD_INT 12
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 34
15402: PUSH
15403: LD_INT 51
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 34
15412: PUSH
15413: LD_INT 32
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: PPUSH
15437: CALL_OW 70
15441: PUSH
15442: LD_EXP 52
15446: DIFF
15447: PUSH
15448: FOR_IN
15449: IFFALSE 15612
// begin vehicleInList = false ;
15451: LD_ADDR_VAR 0 25
15455: PUSH
15456: LD_INT 0
15458: ST_TO_ADDR
// for i := 1 to vehicles do
15459: LD_ADDR_VAR 0 13
15463: PUSH
15464: DOUBLE
15465: LD_INT 1
15467: DEC
15468: ST_TO_ADDR
15469: LD_VAR 0 24
15473: PUSH
15474: FOR_TO
15475: IFFALSE 15505
// begin if vehicle in vehicles [ i ] then
15477: LD_VAR 0 23
15481: PUSH
15482: LD_VAR 0 24
15486: PUSH
15487: LD_VAR 0 13
15491: ARRAY
15492: IN
15493: IFFALSE 15503
// vehicleInList = true ;
15495: LD_ADDR_VAR 0 25
15499: PUSH
15500: LD_INT 1
15502: ST_TO_ADDR
// end ;
15503: GO 15474
15505: POP
15506: POP
// if not vehicleInList then
15507: LD_VAR 0 25
15511: NOT
15512: IFFALSE 15610
// if vehicles < vehiclesToAttackAmount then
15514: LD_VAR 0 24
15518: PUSH
15519: LD_VAR 0 10
15523: LESS
15524: IFFALSE 15569
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15526: LD_ADDR_VAR 0 24
15530: PUSH
15531: LD_VAR 0 24
15535: PUSH
15536: LD_VAR 0 23
15540: PUSH
15541: LD_VAR 0 23
15545: PPUSH
15546: CALL_OW 313
15550: PUSH
15551: LD_INT 1
15553: ARRAY
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: ADD
15566: ST_TO_ADDR
15567: GO 15610
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15569: LD_ADDR_VAR 0 24
15573: PUSH
15574: LD_VAR 0 24
15578: PUSH
15579: LD_VAR 0 23
15583: PUSH
15584: LD_VAR 0 23
15588: PPUSH
15589: CALL_OW 313
15593: PUSH
15594: LD_INT 1
15596: ARRAY
15597: PUSH
15598: LD_INT 2
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: ADD
15609: ST_TO_ADDR
// end ;
15610: GO 15448
15612: POP
15613: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15614: LD_ADDR_VAR 0 41
15618: PUSH
15619: LD_INT 81
15621: PUSH
15622: LD_VAR 0 1
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 69
15635: PUSH
15636: FOR_IN
15637: IFFALSE 16119
// begin offensiveUnits = [ ] ;
15639: LD_ADDR_VAR 0 27
15643: PUSH
15644: EMPTY
15645: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
15646: LD_ADDR_VAR 0 28
15650: PUSH
15651: LD_INT 0
15653: ST_TO_ADDR
// for i := 1 to vehicles do
15654: LD_ADDR_VAR 0 13
15658: PUSH
15659: DOUBLE
15660: LD_INT 1
15662: DEC
15663: ST_TO_ADDR
15664: LD_VAR 0 24
15668: PUSH
15669: FOR_TO
15670: IFFALSE 15851
// if vehicles [ i ] [ 3 ] = 3 then
15672: LD_VAR 0 24
15676: PUSH
15677: LD_VAR 0 13
15681: ARRAY
15682: PUSH
15683: LD_INT 3
15685: ARRAY
15686: PUSH
15687: LD_INT 3
15689: EQUAL
15690: IFFALSE 15849
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
15692: LD_VAR 0 24
15696: PUSH
15697: LD_VAR 0 13
15701: ARRAY
15702: PUSH
15703: LD_INT 1
15705: ARRAY
15706: PPUSH
15707: CALL_OW 256
15711: PUSH
15712: LD_INT 650
15714: GREATER
15715: IFFALSE 15731
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
15717: LD_ADDR_VAR 0 28
15721: PUSH
15722: LD_VAR 0 28
15726: PUSH
15727: LD_INT 1
15729: PLUS
15730: ST_TO_ADDR
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15731: LD_ADDR_VAR 0 27
15735: PUSH
15736: LD_VAR 0 27
15740: PUSH
15741: LD_VAR 0 24
15745: PUSH
15746: LD_VAR 0 13
15750: ARRAY
15751: PUSH
15752: LD_INT 1
15754: ARRAY
15755: ADD
15756: ST_TO_ADDR
// for j = 1 to personel do
15757: LD_ADDR_VAR 0 14
15761: PUSH
15762: DOUBLE
15763: LD_INT 1
15765: DEC
15766: ST_TO_ADDR
15767: LD_VAR 0 18
15771: PUSH
15772: FOR_TO
15773: IFFALSE 15847
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15775: LD_VAR 0 18
15779: PUSH
15780: LD_VAR 0 14
15784: ARRAY
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PUSH
15790: LD_VAR 0 24
15794: PUSH
15795: LD_VAR 0 13
15799: ARRAY
15800: PUSH
15801: LD_INT 2
15803: ARRAY
15804: EQUAL
15805: IFFALSE 15845
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
15807: LD_ADDR_VAR 0 18
15811: PUSH
15812: LD_VAR 0 18
15816: PPUSH
15817: LD_VAR 0 14
15821: PUSH
15822: LD_VAR 0 18
15826: PUSH
15827: LD_VAR 0 14
15831: ARRAY
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PPUSH
15837: LD_INT 3
15839: PPUSH
15840: CALL 26069 0 3
15844: ST_TO_ADDR
15845: GO 15772
15847: POP
15848: POP
// end ;
15849: GO 15669
15851: POP
15852: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
15853: LD_VAR 0 10
15857: PUSH
15858: LD_VAR 0 28
15862: LESSEQUAL
15863: IFFALSE 16117
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , offensiveUnits [ 1 ] ) ;
15865: LD_ADDR_VAR 0 29
15869: PUSH
15870: LD_INT 81
15872: PUSH
15873: LD_INT 2
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PPUSH
15880: CALL_OW 69
15884: PPUSH
15885: LD_VAR 0 27
15889: PUSH
15890: LD_INT 1
15892: ARRAY
15893: PPUSH
15894: CALL_OW 74
15898: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 2 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ 1 ] ) ;
15899: LD_ADDR_VAR 0 30
15903: PUSH
15904: LD_INT 81
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: LD_INT 59
15919: PUSH
15920: EMPTY
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 21
15935: PUSH
15936: LD_INT 2
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: EMPTY
15954: LIST
15955: PPUSH
15956: CALL_OW 69
15960: PPUSH
15961: LD_VAR 0 27
15965: PUSH
15966: LD_INT 1
15968: ARRAY
15969: PPUSH
15970: CALL_OW 74
15974: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ 1 ] , target1 ) + 8 < GetDistUnits ( offensiveUnits [ 1 ] , target2 ) then
15975: LD_VAR 0 27
15979: PUSH
15980: LD_INT 1
15982: ARRAY
15983: PPUSH
15984: LD_VAR 0 29
15988: PPUSH
15989: CALL_OW 296
15993: PUSH
15994: LD_INT 8
15996: PLUS
15997: PUSH
15998: LD_VAR 0 27
16002: PUSH
16003: LD_INT 1
16005: ARRAY
16006: PPUSH
16007: LD_VAR 0 30
16011: PPUSH
16012: CALL_OW 296
16016: LESS
16017: IFFALSE 16053
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target1 ) else
16019: LD_VAR 0 27
16023: PPUSH
16024: LD_INT 3
16026: PUSH
16027: LD_INT 60
16029: PUSH
16030: EMPTY
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PPUSH
16037: CALL_OW 72
16041: PPUSH
16042: LD_VAR 0 29
16046: PPUSH
16047: CALL_OW 115
16051: GO 16085
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target2 ) ;
16053: LD_VAR 0 27
16057: PPUSH
16058: LD_INT 3
16060: PUSH
16061: LD_INT 60
16063: PUSH
16064: EMPTY
16065: LIST
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PPUSH
16071: CALL_OW 72
16075: PPUSH
16076: LD_VAR 0 30
16080: PPUSH
16081: CALL_OW 115
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16085: LD_VAR 0 27
16089: PPUSH
16090: LD_INT 3
16092: PUSH
16093: LD_INT 60
16095: PUSH
16096: EMPTY
16097: LIST
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PPUSH
16103: CALL_OW 72
16107: PPUSH
16108: LD_VAR 0 41
16112: PPUSH
16113: CALL_OW 175
// end ; end ;
16117: GO 15636
16119: POP
16120: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16121: LD_ADDR_VAR 0 41
16125: PUSH
16126: LD_VAR 0 7
16130: PPUSH
16131: LD_INT 81
16133: PUSH
16134: LD_VAR 0 1
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PPUSH
16143: CALL_OW 70
16147: PUSH
16148: FOR_IN
16149: IFFALSE 16328
// begin defenceUnits = [ ] ;
16151: LD_ADDR_VAR 0 26
16155: PUSH
16156: EMPTY
16157: ST_TO_ADDR
// for i := 1 to personel do
16158: LD_ADDR_VAR 0 13
16162: PUSH
16163: DOUBLE
16164: LD_INT 1
16166: DEC
16167: ST_TO_ADDR
16168: LD_VAR 0 18
16172: PUSH
16173: FOR_TO
16174: IFFALSE 16224
// if personel [ i ] [ 3 ] = 2 then
16176: LD_VAR 0 18
16180: PUSH
16181: LD_VAR 0 13
16185: ARRAY
16186: PUSH
16187: LD_INT 3
16189: ARRAY
16190: PUSH
16191: LD_INT 2
16193: EQUAL
16194: IFFALSE 16222
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16196: LD_ADDR_VAR 0 26
16200: PUSH
16201: LD_VAR 0 26
16205: PUSH
16206: LD_VAR 0 18
16210: PUSH
16211: LD_VAR 0 13
16215: ARRAY
16216: PUSH
16217: LD_INT 1
16219: ARRAY
16220: ADD
16221: ST_TO_ADDR
16222: GO 16173
16224: POP
16225: POP
// for i := 1 to vehicles do
16226: LD_ADDR_VAR 0 13
16230: PUSH
16231: DOUBLE
16232: LD_INT 1
16234: DEC
16235: ST_TO_ADDR
16236: LD_VAR 0 24
16240: PUSH
16241: FOR_TO
16242: IFFALSE 16292
// if vehicles [ i ] [ 3 ] = 2 then
16244: LD_VAR 0 24
16248: PUSH
16249: LD_VAR 0 13
16253: ARRAY
16254: PUSH
16255: LD_INT 3
16257: ARRAY
16258: PUSH
16259: LD_INT 2
16261: EQUAL
16262: IFFALSE 16290
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16264: LD_ADDR_VAR 0 26
16268: PUSH
16269: LD_VAR 0 26
16273: PUSH
16274: LD_VAR 0 24
16278: PUSH
16279: LD_VAR 0 13
16283: ARRAY
16284: PUSH
16285: LD_INT 1
16287: ARRAY
16288: ADD
16289: ST_TO_ADDR
16290: GO 16241
16292: POP
16293: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16294: LD_VAR 0 26
16298: PPUSH
16299: LD_INT 3
16301: PUSH
16302: LD_INT 60
16304: PUSH
16305: EMPTY
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PPUSH
16312: CALL_OW 72
16316: PPUSH
16317: LD_VAR 0 41
16321: PPUSH
16322: CALL_OW 175
// end ;
16326: GO 16148
16328: POP
16329: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16330: LD_ADDR_VAR 0 42
16334: PUSH
16335: LD_INT 22
16337: PUSH
16338: LD_VAR 0 1
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 2
16349: PUSH
16350: LD_INT 30
16352: PUSH
16353: LD_INT 31
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 30
16362: PUSH
16363: LD_INT 32
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 30
16372: PUSH
16373: LD_INT 33
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 30
16382: PUSH
16383: LD_INT 4
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 30
16392: PUSH
16393: LD_INT 5
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PPUSH
16412: CALL_OW 69
16416: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16417: LD_ADDR_VAR 0 43
16421: PUSH
16422: LD_INT 81
16424: PUSH
16425: LD_VAR 0 1
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 21
16436: PUSH
16437: LD_INT 3
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 58
16446: PUSH
16447: EMPTY
16448: LIST
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: LIST
16454: PPUSH
16455: CALL_OW 69
16459: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16460: LD_VAR 0 42
16464: PUSH
16465: LD_VAR 0 43
16469: AND
16470: IFFALSE 16540
// for i in attackBuildings do
16472: LD_ADDR_VAR 0 13
16476: PUSH
16477: LD_VAR 0 42
16481: PUSH
16482: FOR_IN
16483: IFFALSE 16538
// for j in enemyBuildings do
16485: LD_ADDR_VAR 0 14
16489: PUSH
16490: LD_VAR 0 43
16494: PUSH
16495: FOR_IN
16496: IFFALSE 16534
// if GetDistUnits ( i , j ) < 12 then
16498: LD_VAR 0 13
16502: PPUSH
16503: LD_VAR 0 14
16507: PPUSH
16508: CALL_OW 296
16512: PUSH
16513: LD_INT 12
16515: LESS
16516: IFFALSE 16532
// ComAttackUnit ( i , j ) ;
16518: LD_VAR 0 13
16522: PPUSH
16523: LD_VAR 0 14
16527: PPUSH
16528: CALL_OW 115
16532: GO 16495
16534: POP
16535: POP
16536: GO 16482
16538: POP
16539: POP
// until not personel or arabianCanExitMap ;
16540: LD_VAR 0 18
16544: NOT
16545: PUSH
16546: LD_EXP 21
16550: OR
16551: IFFALSE 11159
// end ;
16553: LD_VAR 0 12
16557: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16558: LD_EXP 52
16562: NOT
16563: IFFALSE 16597
16565: GO 16567
16567: DISABLE
// begin enable ;
16568: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16569: LD_EXP 36
16573: PPUSH
16574: LD_INT 42
16576: PPUSH
16577: CALL 2668 0 2
// arabLeftExit = true ;
16581: LD_ADDR_EXP 55
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// arabRightExit = false ;
16589: LD_ADDR_EXP 56
16593: PUSH
16594: LD_INT 0
16596: ST_TO_ADDR
// end ;
16597: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base ;
16598: LD_EXP 52
16602: PUSH
16603: LD_EXP 55
16607: AND
16608: IFFALSE 16803
16610: GO 16612
16612: DISABLE
16613: LD_INT 0
16615: PPUSH
16616: PPUSH
16617: PPUSH
// begin enable ;
16618: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16619: LD_EXP 52
16623: PPUSH
16624: LD_INT 71
16626: PPUSH
16627: LD_INT 137
16629: PPUSH
16630: CALL_OW 114
// for veh in arabianPatrolVehicles do
16634: LD_ADDR_VAR 0 1
16638: PUSH
16639: LD_EXP 52
16643: PUSH
16644: FOR_IN
16645: IFFALSE 16801
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16647: LD_VAR 0 1
16651: PPUSH
16652: LD_INT 43
16654: PPUSH
16655: CALL_OW 308
16659: IFFALSE 16799
// begin if arabianPatrolVehicles then
16661: LD_EXP 52
16665: IFFALSE 16694
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16667: LD_VAR 0 1
16671: PPUSH
16672: CALL_OW 313
16676: PUSH
16677: LD_INT 1
16679: ARRAY
16680: PPUSH
16681: CALL_OW 64
// RemoveUnit ( veh ) ;
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 64
// end ; x = 0 ;
16694: LD_ADDR_VAR 0 2
16698: PUSH
16699: LD_INT 0
16701: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16702: LD_ADDR_VAR 0 1
16706: PUSH
16707: LD_EXP 52
16711: PUSH
16712: FOR_IN
16713: IFFALSE 16743
// if not IsPlaced ( veh ) then
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 305
16724: NOT
16725: IFFALSE 16741
// x = x + 1 ;
16727: LD_ADDR_VAR 0 2
16731: PUSH
16732: LD_VAR 0 2
16736: PUSH
16737: LD_INT 1
16739: PLUS
16740: ST_TO_ADDR
16741: GO 16712
16743: POP
16744: POP
// if x = arabianPatrolVehicles then
16745: LD_VAR 0 2
16749: PUSH
16750: LD_EXP 52
16754: EQUAL
16755: IFFALSE 16799
// begin arabLeftExit = false ;
16757: LD_ADDR_EXP 55
16761: PUSH
16762: LD_INT 0
16764: ST_TO_ADDR
// arabRightExit = true ;
16765: LD_ADDR_EXP 56
16769: PUSH
16770: LD_INT 1
16772: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16773: LD_INT 4200
16775: PPUSH
16776: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16780: LD_ADDR_EXP 52
16784: PUSH
16785: EMPTY
16786: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16787: LD_EXP 36
16791: PPUSH
16792: LD_INT 43
16794: PPUSH
16795: CALL 2668 0 2
// end ; end ; end ;
16799: GO 16644
16801: POP
16802: POP
// end ;
16803: PPOPN 3
16805: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16806: LD_EXP 52
16810: PUSH
16811: LD_EXP 56
16815: AND
16816: IFFALSE 17011
16818: GO 16820
16820: DISABLE
16821: LD_INT 0
16823: PPUSH
16824: PPUSH
16825: PPUSH
// begin enable ;
16826: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16827: LD_EXP 52
16831: PPUSH
16832: LD_INT 184
16834: PPUSH
16835: LD_INT 134
16837: PPUSH
16838: CALL_OW 114
// for veh in arabianPatrolVehicles do
16842: LD_ADDR_VAR 0 1
16846: PUSH
16847: LD_EXP 52
16851: PUSH
16852: FOR_IN
16853: IFFALSE 17009
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16855: LD_VAR 0 1
16859: PPUSH
16860: LD_INT 42
16862: PPUSH
16863: CALL_OW 308
16867: IFFALSE 17007
// begin if arabianPatrolVehicles then
16869: LD_EXP 52
16873: IFFALSE 16902
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 313
16884: PUSH
16885: LD_INT 1
16887: ARRAY
16888: PPUSH
16889: CALL_OW 64
// RemoveUnit ( veh ) ;
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 64
// end ; x = 0 ;
16902: LD_ADDR_VAR 0 2
16906: PUSH
16907: LD_INT 0
16909: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16910: LD_ADDR_VAR 0 1
16914: PUSH
16915: LD_EXP 52
16919: PUSH
16920: FOR_IN
16921: IFFALSE 16951
// if not IsPlaced ( veh ) then
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 305
16932: NOT
16933: IFFALSE 16949
// x = x + 1 ;
16935: LD_ADDR_VAR 0 2
16939: PUSH
16940: LD_VAR 0 2
16944: PUSH
16945: LD_INT 1
16947: PLUS
16948: ST_TO_ADDR
16949: GO 16920
16951: POP
16952: POP
// if x = arabianPatrolVehicles then
16953: LD_VAR 0 2
16957: PUSH
16958: LD_EXP 52
16962: EQUAL
16963: IFFALSE 17007
// begin arabLeftExit = true ;
16965: LD_ADDR_EXP 55
16969: PUSH
16970: LD_INT 1
16972: ST_TO_ADDR
// arabRightExit = false ;
16973: LD_ADDR_EXP 56
16977: PUSH
16978: LD_INT 0
16980: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16981: LD_INT 4200
16983: PPUSH
16984: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16988: LD_ADDR_EXP 52
16992: PUSH
16993: EMPTY
16994: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16995: LD_EXP 36
16999: PPUSH
17000: LD_INT 42
17002: PPUSH
17003: CALL 2668 0 2
// end ; end ; end ;
17007: GO 16852
17009: POP
17010: POP
// end ;
17011: PPOPN 3
17013: END
// every 6 6$0 trigger not arabianHovercrafts and not arabianCanExitMap do
17014: LD_EXP 53
17018: NOT
17019: PUSH
17020: LD_EXP 21
17024: NOT
17025: AND
17026: IFFALSE 17036
17028: GO 17030
17030: DISABLE
// begin enable ;
17031: ENABLE
// PrepareArabianHovercraft ;
17032: CALL 2827 0 0
// end ;
17036: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
17037: LD_EXP 53
17041: IFFALSE 17197
17043: GO 17045
17045: DISABLE
17046: LD_INT 0
17048: PPUSH
17049: PPUSH
// begin enable ;
17050: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
17051: LD_EXP 53
17055: PPUSH
17056: LD_INT 100
17058: PPUSH
17059: CALL_OW 240
// for i := 1 to arabianHovercraftsPath do
17063: LD_ADDR_VAR 0 1
17067: PUSH
17068: DOUBLE
17069: LD_INT 1
17071: DEC
17072: ST_TO_ADDR
17073: LD_EXP 38
17077: PUSH
17078: FOR_TO
17079: IFFALSE 17122
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
17081: LD_EXP 53
17085: PPUSH
17086: LD_EXP 38
17090: PUSH
17091: LD_VAR 0 1
17095: ARRAY
17096: PUSH
17097: LD_INT 1
17099: ARRAY
17100: PPUSH
17101: LD_EXP 38
17105: PUSH
17106: LD_VAR 0 1
17110: ARRAY
17111: PUSH
17112: LD_INT 2
17114: ARRAY
17115: PPUSH
17116: CALL_OW 174
17120: GO 17078
17122: POP
17123: POP
// x = arabianHovercraftsPath ;
17124: LD_ADDR_VAR 0 2
17128: PUSH
17129: LD_EXP 38
17133: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
17134: LD_EXP 53
17138: PPUSH
17139: LD_EXP 38
17143: PUSH
17144: LD_VAR 0 2
17148: ARRAY
17149: PUSH
17150: LD_INT 1
17152: ARRAY
17153: PPUSH
17154: LD_EXP 38
17158: PUSH
17159: LD_VAR 0 2
17163: ARRAY
17164: PUSH
17165: LD_INT 2
17167: ARRAY
17168: PPUSH
17169: CALL_OW 174
// x = x - 1 ;
17173: LD_ADDR_VAR 0 2
17177: PUSH
17178: LD_VAR 0 2
17182: PUSH
17183: LD_INT 1
17185: MINUS
17186: ST_TO_ADDR
// until x = 0 ;
17187: LD_VAR 0 2
17191: PUSH
17192: LD_INT 0
17194: EQUAL
17195: IFFALSE 17134
// end ;
17197: PPOPN 2
17199: END
// every 0 0$1 trigger arabianPatrolTroops do
17200: LD_EXP 54
17204: IFFALSE 17270
17206: GO 17208
17208: DISABLE
// begin enable ;
17209: ENABLE
// AddComAgressiveMove ( arabianPatrolTroops , 127 , 100 ) ;
17210: LD_EXP 54
17214: PPUSH
17215: LD_INT 127
17217: PPUSH
17218: LD_INT 100
17220: PPUSH
17221: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 141 , 133 ) ;
17225: LD_EXP 54
17229: PPUSH
17230: LD_INT 141
17232: PPUSH
17233: LD_INT 133
17235: PPUSH
17236: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 80 , 132 ) ;
17240: LD_EXP 54
17244: PPUSH
17245: LD_INT 80
17247: PPUSH
17248: LD_INT 132
17250: PPUSH
17251: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 174 , 122 ) ;
17255: LD_EXP 54
17259: PPUSH
17260: LD_INT 174
17262: PPUSH
17263: LD_INT 122
17265: PPUSH
17266: CALL_OW 174
// end ; end_of_file
17270: END
// export function Lose_Burlak ; begin
17271: LD_INT 0
17273: PPUSH
// YouLost ( Burlak ) ;
17274: LD_STRING Burlak
17276: PPUSH
17277: CALL_OW 104
// end ;
17281: LD_VAR 0 1
17285: RET
// export function Lose_Survive ; begin
17286: LD_INT 0
17288: PPUSH
// YouLost ( Survive ) ;
17289: LD_STRING Survive
17291: PPUSH
17292: CALL_OW 104
// end ;
17296: LD_VAR 0 1
17300: RET
// export function Lose_Surrender ; begin
17301: LD_INT 0
17303: PPUSH
// YouLost ( Surrender ) ;
17304: LD_STRING Surrender
17306: PPUSH
17307: CALL_OW 104
// end ; end_of_file
17311: LD_VAR 0 1
17315: RET
// every 0 0$1 do
17316: GO 17318
17318: DISABLE
// begin if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
17319: LD_EXP 24
17323: NOT
17324: PUSH
17325: LD_INT 22
17327: PPUSH
17328: LD_INT 22
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 21
17340: PUSH
17341: LD_INT 2
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 50
17350: PUSH
17351: EMPTY
17352: LIST
17353: PUSH
17354: LD_INT 59
17356: PUSH
17357: EMPTY
17358: LIST
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: LD_INT 31
17365: PUSH
17366: LD_INT 22
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 31
17375: PUSH
17376: LD_INT 24
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 31
17385: PUSH
17386: LD_INT 14
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: PPUSH
17406: CALL_OW 70
17410: AND
17411: PUSH
17412: LD_INT 22
17414: PPUSH
17415: LD_INT 22
17417: PUSH
17418: LD_INT 3
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 21
17427: PUSH
17428: LD_INT 1
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 23
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 50
17447: PUSH
17448: EMPTY
17449: LIST
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 70
17461: AND
17462: IFFALSE 17471
// Query ( QVehicles ) ;
17464: LD_STRING QVehicles
17466: PPUSH
17467: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17471: LD_EXP 39
17475: PPUSH
17476: CALL_OW 310
17480: PPUSH
17481: LD_INT 22
17483: PPUSH
17484: CALL_OW 308
17488: PUSH
17489: LD_EXP 24
17493: NOT
17494: AND
17495: PUSH
17496: LD_INT 22
17498: PPUSH
17499: LD_INT 22
17501: PUSH
17502: LD_INT 3
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 21
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 59
17521: PUSH
17522: EMPTY
17523: LIST
17524: PUSH
17525: LD_INT 50
17527: PUSH
17528: EMPTY
17529: LIST
17530: PUSH
17531: LD_INT 2
17533: PUSH
17534: LD_INT 31
17536: PUSH
17537: LD_INT 22
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 31
17546: PUSH
17547: LD_INT 24
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 31
17556: PUSH
17557: LD_INT 14
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PPUSH
17577: CALL_OW 70
17581: PUSH
17582: LD_INT 22
17584: PUSH
17585: LD_INT 3
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 21
17594: PUSH
17595: LD_INT 1
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 23
17604: PUSH
17605: LD_INT 3
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 2
17614: PUSH
17615: LD_INT 25
17617: PUSH
17618: LD_INT 1
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 25
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 25
17637: PUSH
17638: LD_INT 3
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 25
17647: PUSH
17648: LD_INT 4
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: PPUSH
17668: CALL_OW 69
17672: GREATEREQUAL
17673: AND
17674: IFFALSE 17680
// FinishMission ;
17676: CALL 18009 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17680: LD_EXP 39
17684: PPUSH
17685: CALL_OW 310
17689: PPUSH
17690: LD_INT 22
17692: PPUSH
17693: CALL_OW 308
17697: PUSH
17698: LD_EXP 24
17702: NOT
17703: AND
17704: PUSH
17705: LD_INT 22
17707: PPUSH
17708: LD_INT 22
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 21
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 59
17730: PUSH
17731: EMPTY
17732: LIST
17733: PUSH
17734: LD_INT 50
17736: PUSH
17737: EMPTY
17738: LIST
17739: PUSH
17740: LD_INT 2
17742: PUSH
17743: LD_INT 31
17745: PUSH
17746: LD_INT 22
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 31
17755: PUSH
17756: LD_INT 24
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 31
17765: PUSH
17766: LD_INT 14
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: PPUSH
17786: CALL_OW 70
17790: PUSH
17791: LD_INT 6
17793: GREATEREQUAL
17794: AND
17795: PUSH
17796: LD_INT 22
17798: PPUSH
17799: LD_INT 22
17801: PUSH
17802: LD_INT 3
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 21
17811: PUSH
17812: LD_INT 2
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 59
17821: PUSH
17822: EMPTY
17823: LIST
17824: PUSH
17825: LD_INT 50
17827: PUSH
17828: EMPTY
17829: LIST
17830: PUSH
17831: LD_INT 2
17833: PUSH
17834: LD_INT 31
17836: PUSH
17837: LD_INT 22
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 31
17846: PUSH
17847: LD_INT 24
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 31
17856: PUSH
17857: LD_INT 14
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: PPUSH
17877: CALL_OW 70
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_INT 3
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 21
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 23
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: LD_INT 25
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 25
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 25
17937: PUSH
17938: LD_INT 3
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 25
17947: PUSH
17948: LD_INT 4
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: PPUSH
17968: CALL_OW 69
17972: LESS
17973: AND
17974: IFFALSE 18000
// begin case Query ( QEndMission ) of 1 :
17976: LD_STRING QEndMission
17978: PPUSH
17979: CALL_OW 97
17983: PUSH
17984: LD_INT 1
17986: DOUBLE
17987: EQUAL
17988: IFTRUE 17992
17990: GO 17999
17992: POP
// FinishMission ; end ;
17993: CALL 18009 0 0
17997: GO 18000
17999: POP
// end ; wait ( 0 0$5 ) ;
18000: LD_INT 175
18002: PPUSH
18003: CALL_OW 67
// enable ;
18007: ENABLE
// end ;
18008: END
// function FinishMission ; var nearUnit ; begin
18009: LD_INT 0
18011: PPUSH
18012: PPUSH
// finishMissionBool = true ;
18013: LD_ADDR_EXP 24
18017: PUSH
18018: LD_INT 1
18020: ST_TO_ADDR
// if stevensDepot then
18021: LD_EXP 17
18025: IFFALSE 18194
// begin DialogueOn ;
18027: CALL_OW 6
// if IsOK ( Petrosyan ) then
18031: LD_EXP 43
18035: PPUSH
18036: CALL_OW 302
18040: IFFALSE 18056
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
18042: LD_EXP 43
18046: PPUSH
18047: LD_STRING DStevensLeftBehind-Pty-1
18049: PPUSH
18050: CALL_OW 88
18054: GO 18170
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
18056: LD_INT 22
18058: PUSH
18059: LD_INT 3
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 21
18068: PUSH
18069: LD_INT 1
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 26
18078: PUSH
18079: LD_INT 1
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 50
18088: PUSH
18089: EMPTY
18090: LIST
18091: PUSH
18092: LD_INT 2
18094: PUSH
18095: LD_INT 25
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 25
18107: PUSH
18108: LD_INT 2
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 25
18117: PUSH
18118: LD_INT 3
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 25
18127: PUSH
18128: LD_INT 4
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 69
18153: PPUSH
18154: LD_STRING StevensLeftBehind-RSol1-1
18156: PPUSH
18157: LD_STRING 
18159: PPUSH
18160: LD_INT 0
18162: PPUSH
18163: LD_INT 1
18165: PPUSH
18166: CALL 8830 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
18170: LD_EXP 39
18174: PPUSH
18175: LD_STRING DStevensLeftBehind-Bur-1
18177: PPUSH
18178: CALL_OW 88
// DialogueOff ;
18182: CALL_OW 7
// stevensStatus = 1 ;
18186: LD_ADDR_EXP 2
18190: PUSH
18191: LD_INT 1
18193: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
18194: LD_EXP 14
18198: NOT
18199: PUSH
18200: LD_EXP 43
18204: PPUSH
18205: CALL_OW 302
18209: AND
18210: IFFALSE 18742
// begin PrepareStevens ( exit_rus ) ;
18212: LD_INT 22
18214: PPUSH
18215: CALL 20786 0 1
// wait ( 0 0$1.5 ) ;
18219: LD_INT 52
18221: PPUSH
18222: CALL_OW 67
// stevensPlaced = true ;
18226: LD_ADDR_EXP 14
18230: PUSH
18231: LD_INT 1
18233: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
18234: LD_ADDR_VAR 0 2
18238: PUSH
18239: LD_INT 22
18241: PUSH
18242: LD_INT 3
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 21
18251: PUSH
18252: LD_INT 1
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 26
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 50
18271: PUSH
18272: EMPTY
18273: LIST
18274: PUSH
18275: LD_INT 2
18277: PUSH
18278: LD_INT 25
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 25
18290: PUSH
18291: LD_INT 2
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 25
18300: PUSH
18301: LD_INT 3
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 25
18310: PUSH
18311: LD_INT 4
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 69
18336: PPUSH
18337: LD_EXP 57
18341: PPUSH
18342: CALL_OW 74
18346: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
18347: LD_EXP 57
18351: PPUSH
18352: CALL_OW 87
// InGameOn ;
18356: CALL_OW 8
// wait ( 0 0$1.5 ) ;
18360: LD_INT 52
18362: PPUSH
18363: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18367: LD_EXP 57
18371: PPUSH
18372: LD_INT 6
18374: PPUSH
18375: CALL_OW 235
// DialogueOn ;
18379: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18383: LD_EXP 57
18387: PPUSH
18388: LD_STRING DStevens-Huck-1
18390: PPUSH
18391: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18395: LD_EXP 43
18399: PPUSH
18400: LD_STRING DStevens-Pty-1
18402: PPUSH
18403: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18407: LD_EXP 43
18411: PPUSH
18412: LD_STRING DStevens-Pty-1a
18414: PPUSH
18415: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18419: LD_EXP 57
18423: PPUSH
18424: LD_STRING DStevens-Huck-2
18426: PPUSH
18427: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18431: LD_EXP 43
18435: PPUSH
18436: LD_STRING DStevens-Pty-2
18438: PPUSH
18439: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18443: LD_EXP 57
18447: PPUSH
18448: LD_STRING DStevens-Huck-3
18450: PPUSH
18451: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18455: LD_EXP 43
18459: PPUSH
18460: LD_STRING DStevens-Pty-3
18462: PPUSH
18463: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18467: LD_EXP 57
18471: PPUSH
18472: LD_STRING DStevens-Huck-4
18474: PPUSH
18475: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18479: LD_EXP 43
18483: PPUSH
18484: LD_STRING DStevensBurlak-Pty-1
18486: PPUSH
18487: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18491: LD_EXP 39
18495: PPUSH
18496: LD_STRING DStevensBurlak-Bur-1
18498: PPUSH
18499: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18503: LD_EXP 43
18507: PPUSH
18508: LD_STRING DStevensBurlak-Pty-2
18510: PPUSH
18511: CALL_OW 88
// case Query ( QKill ) of 1 :
18515: LD_STRING QKill
18517: PPUSH
18518: CALL_OW 97
18522: PUSH
18523: LD_INT 1
18525: DOUBLE
18526: EQUAL
18527: IFTRUE 18531
18529: GO 18658
18531: POP
// begin stevensCanExitMap = true ;
18532: LD_ADDR_EXP 19
18536: PUSH
18537: LD_INT 1
18539: ST_TO_ADDR
// stevensFollow = false ;
18540: LD_ADDR_EXP 15
18544: PUSH
18545: LD_INT 0
18547: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18548: LD_EXP 39
18552: PPUSH
18553: LD_STRING DKill-1-Bur-1
18555: PPUSH
18556: CALL_OW 88
// if IsOK ( Gleb ) then
18560: LD_EXP 42
18564: PPUSH
18565: CALL_OW 302
18569: IFFALSE 18583
// Say ( Gleb , DKill-1-Glb-1 ) ;
18571: LD_EXP 42
18575: PPUSH
18576: LD_STRING DKill-1-Glb-1
18578: PPUSH
18579: CALL_OW 88
// DialogueOff ;
18583: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18587: LD_EXP 57
18591: PPUSH
18592: LD_INT 1
18594: PPUSH
18595: CALL_OW 235
// stevensStatus = 0 ;
18599: LD_ADDR_EXP 2
18603: PUSH
18604: LD_INT 0
18606: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18607: LD_INT 22
18609: PUSH
18610: LD_INT 3
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PPUSH
18617: CALL_OW 69
18621: PPUSH
18622: LD_EXP 57
18626: PPUSH
18627: CALL_OW 115
// wait ( 0 0$1 ) ;
18631: LD_INT 35
18633: PPUSH
18634: CALL_OW 67
// until IsDead ( Stevens ) ;
18638: LD_EXP 57
18642: PPUSH
18643: CALL_OW 301
18647: IFFALSE 18607
// wait ( 0 0$1.5 ) ;
18649: LD_INT 52
18651: PPUSH
18652: CALL_OW 67
// end ; 2 :
18656: GO 18742
18658: LD_INT 2
18660: DOUBLE
18661: EQUAL
18662: IFTRUE 18666
18664: GO 18741
18666: POP
// begin stevensCanExitMap = true ;
18667: LD_ADDR_EXP 19
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// stevensWasInDepot = false ;
18675: LD_ADDR_EXP 18
18679: PUSH
18680: LD_INT 0
18682: ST_TO_ADDR
// stevensDepot = false ;
18683: LD_ADDR_EXP 17
18687: PUSH
18688: LD_INT 0
18690: ST_TO_ADDR
// stevensStatus = 1 ;
18691: LD_ADDR_EXP 2
18695: PUSH
18696: LD_INT 1
18698: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18699: LD_EXP 39
18703: PPUSH
18704: LD_STRING DKill-2-Bur-1
18706: PPUSH
18707: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18711: LD_EXP 43
18715: PPUSH
18716: LD_STRING DKill-2-Pty-1
18718: PPUSH
18719: CALL_OW 88
// DialogueOff ;
18723: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18727: LD_EXP 57
18731: PPUSH
18732: LD_INT 37
18734: PPUSH
18735: CALL_OW 113
// end ; end ;
18739: GO 18742
18741: POP
// end ; SetRewards ;
18742: CALL 18763 0 0
// SavePlayerCharacters ;
18746: CALL 19004 0 0
// SaveGlobalVariables ;
18750: CALL 19349 0 0
// YouWin ;
18754: CALL_OW 103
// end ;
18758: LD_VAR 0 1
18762: RET
// function SetRewards ; begin
18763: LD_INT 0
18765: PPUSH
// if fastBreakthrough then
18766: LD_EXP 23
18770: IFFALSE 18784
// AddMedal ( Time , 1 ) else
18772: LD_STRING Time
18774: PPUSH
18775: LD_INT 1
18777: PPUSH
18778: CALL_OW 101
18782: GO 18795
// AddMedal ( Time , - 1 ) ;
18784: LD_STRING Time
18786: PPUSH
18787: LD_INT 1
18789: NEG
18790: PPUSH
18791: CALL_OW 101
// if dial_tameApeBlocker then
18795: LD_EXP 10
18799: IFFALSE 18813
// AddMedal ( Apemen , 1 ) else
18801: LD_STRING Apemen
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: CALL_OW 101
18811: GO 18860
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18813: LD_EXP 10
18817: NOT
18818: PUSH
18819: LD_INT 1
18821: PPUSH
18822: LD_INT 3
18824: PPUSH
18825: CALL_OW 321
18829: PUSH
18830: LD_INT 1
18832: EQUAL
18833: AND
18834: IFFALSE 18849
// AddMedal ( Apemen , - 1 ) else
18836: LD_STRING Apemen
18838: PPUSH
18839: LD_INT 1
18841: NEG
18842: PPUSH
18843: CALL_OW 101
18847: GO 18860
// AddMedal ( Apemen , - 2 ) ;
18849: LD_STRING Apemen
18851: PPUSH
18852: LD_INT 2
18854: NEG
18855: PPUSH
18856: CALL_OW 101
// if not omarStatus then
18860: LD_EXP 1
18864: NOT
18865: IFFALSE 18879
// AddMedal ( Abdul , 1 ) else
18867: LD_STRING Abdul
18869: PPUSH
18870: LD_INT 1
18872: PPUSH
18873: CALL_OW 101
18877: GO 18890
// AddMedal ( Abdul , - 1 ) ;
18879: LD_STRING Abdul
18881: PPUSH
18882: LD_INT 1
18884: NEG
18885: PPUSH
18886: CALL_OW 101
// GiveMedals ( Main ) ;
18890: LD_STRING Main
18892: PPUSH
18893: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18897: LD_INT 22
18899: PUSH
18900: LD_INT 3
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 21
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 23
18919: PUSH
18920: LD_INT 3
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 50
18929: PUSH
18930: EMPTY
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: LD_INT 25
18938: PUSH
18939: LD_INT 1
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 25
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 25
18958: PUSH
18959: LD_INT 3
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 25
18968: PUSH
18969: LD_INT 4
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: PPUSH
18990: CALL_OW 69
18994: PPUSH
18995: CALL_OW 43
// end ;
18999: LD_VAR 0 1
19003: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
19004: LD_INT 0
19006: PPUSH
19007: PPUSH
19008: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19009: LD_EXP 39
19013: PPUSH
19014: LD_STRING Burlak
19016: PPUSH
19017: LD_INT 3
19019: PPUSH
19020: CALL 8631 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
19024: LD_EXP 40
19028: PPUSH
19029: CALL_OW 310
19033: PPUSH
19034: LD_INT 22
19036: PPUSH
19037: CALL_OW 308
19041: IFFALSE 19058
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
19043: LD_EXP 40
19047: PPUSH
19048: LD_STRING Karamazov
19050: PPUSH
19051: LD_INT 3
19053: PPUSH
19054: CALL 8631 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
19058: LD_EXP 41
19062: PPUSH
19063: CALL_OW 310
19067: PPUSH
19068: LD_INT 22
19070: PPUSH
19071: CALL_OW 308
19075: IFFALSE 19092
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
19077: LD_EXP 41
19081: PPUSH
19082: LD_STRING Petrovova
19084: PPUSH
19085: LD_INT 3
19087: PPUSH
19088: CALL 8631 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
19092: LD_EXP 42
19096: PPUSH
19097: CALL_OW 310
19101: PPUSH
19102: LD_INT 22
19104: PPUSH
19105: CALL_OW 308
19109: IFFALSE 19126
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
19111: LD_EXP 42
19115: PPUSH
19116: LD_STRING Gleb
19118: PPUSH
19119: LD_INT 3
19121: PPUSH
19122: CALL 8631 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
19126: LD_EXP 43
19130: PPUSH
19131: CALL_OW 310
19135: PPUSH
19136: LD_INT 22
19138: PPUSH
19139: CALL_OW 308
19143: IFFALSE 19160
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
19145: LD_EXP 43
19149: PPUSH
19150: LD_STRING Petrosyan
19152: PPUSH
19153: LD_INT 3
19155: PPUSH
19156: CALL 8631 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
19160: LD_EXP 45
19164: PPUSH
19165: CALL_OW 310
19169: PPUSH
19170: LD_INT 22
19172: PPUSH
19173: CALL_OW 308
19177: IFFALSE 19194
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
19179: LD_EXP 45
19183: PPUSH
19184: LD_STRING Dolgov
19186: PPUSH
19187: LD_INT 3
19189: PPUSH
19190: CALL 8631 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
19194: LD_EXP 46
19198: PPUSH
19199: CALL_OW 310
19203: PPUSH
19204: LD_INT 22
19206: PPUSH
19207: CALL_OW 308
19211: IFFALSE 19228
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
19213: LD_EXP 46
19217: PPUSH
19218: LD_STRING Lipshchin
19220: PPUSH
19221: LD_INT 3
19223: PPUSH
19224: CALL 8631 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
19228: LD_EXP 44
19232: PPUSH
19233: CALL_OW 310
19237: PPUSH
19238: LD_INT 22
19240: PPUSH
19241: CALL_OW 308
19245: IFFALSE 19262
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
19247: LD_EXP 44
19251: PPUSH
19252: LD_STRING Titov
19254: PPUSH
19255: LD_INT 3
19257: PPUSH
19258: CALL 8631 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
19262: LD_INT 22
19264: PPUSH
19265: LD_INT 22
19267: PUSH
19268: LD_INT 3
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 21
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 2
19287: PUSH
19288: LD_INT 25
19290: PUSH
19291: LD_INT 12
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 25
19300: PUSH
19301: LD_INT 16
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 25
19310: PUSH
19311: LD_INT 15
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: PPUSH
19329: CALL_OW 70
19333: PPUSH
19334: LD_STRING other_apemans
19336: PPUSH
19337: LD_INT 3
19339: PPUSH
19340: CALL 8687 0 3
// end ;
19344: LD_VAR 0 1
19348: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
19349: LD_INT 0
19351: PPUSH
19352: PPUSH
19353: PPUSH
19354: PPUSH
19355: PPUSH
// resources = [ ] ;
19356: LD_ADDR_VAR 0 3
19360: PUSH
19361: EMPTY
19362: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19363: LD_ADDR_EXP 5
19367: PUSH
19368: EMPTY
19369: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19370: LD_EXP 2
19374: PPUSH
19375: LD_STRING 05_StevensStatus_1
19377: PPUSH
19378: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19382: LD_EXP 1
19386: PPUSH
19387: LD_STRING 05_OmarStatus_2
19389: PPUSH
19390: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
19394: LD_ADDR_VAR 0 2
19398: PUSH
19399: LD_INT 22
19401: PPUSH
19402: LD_INT 22
19404: PUSH
19405: LD_INT 3
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 59
19414: PUSH
19415: EMPTY
19416: LIST
19417: PUSH
19418: LD_INT 2
19420: PUSH
19421: LD_INT 34
19423: PUSH
19424: LD_INT 51
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 34
19433: PUSH
19434: LD_INT 32
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 34
19443: PUSH
19444: LD_INT 89
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: LIST
19461: PPUSH
19462: CALL_OW 70
19466: PUSH
19467: FOR_IN
19468: IFFALSE 19496
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19470: LD_ADDR_VAR 0 3
19474: PUSH
19475: LD_VAR 0 3
19479: PUSH
19480: LD_VAR 0 2
19484: PPUSH
19485: CALL 9817 0 1
19489: PUSH
19490: EMPTY
19491: LIST
19492: ADD
19493: ST_TO_ADDR
19494: GO 19467
19496: POP
19497: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19498: LD_VAR 0 3
19502: PPUSH
19503: LD_STRING 05_ResourcesInCargo_3
19505: PPUSH
19506: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19510: LD_ADDR_VAR 0 2
19514: PUSH
19515: LD_INT 22
19517: PPUSH
19518: LD_INT 22
19520: PUSH
19521: LD_INT 3
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 21
19530: PUSH
19531: LD_INT 2
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 59
19540: PUSH
19541: EMPTY
19542: LIST
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: LIST
19548: PPUSH
19549: CALL_OW 70
19553: PUSH
19554: FOR_IN
19555: IFFALSE 19815
// begin driver = UnitsInside ( i ) [ 1 ] ;
19557: LD_ADDR_VAR 0 4
19561: PUSH
19562: LD_VAR 0 2
19566: PPUSH
19567: CALL_OW 313
19571: PUSH
19572: LD_INT 1
19574: ARRAY
19575: ST_TO_ADDR
// if driver = Burlak then
19576: LD_VAR 0 4
19580: PUSH
19581: LD_EXP 39
19585: EQUAL
19586: IFFALSE 19596
// driverShortName = Bur ;
19588: LD_ADDR_VAR 0 5
19592: PUSH
19593: LD_STRING Bur
19595: ST_TO_ADDR
// if driver = Karamazov then
19596: LD_VAR 0 4
19600: PUSH
19601: LD_EXP 40
19605: EQUAL
19606: IFFALSE 19616
// driverShortName = Kar ;
19608: LD_ADDR_VAR 0 5
19612: PUSH
19613: LD_STRING Kar
19615: ST_TO_ADDR
// if driver = Petrovova then
19616: LD_VAR 0 4
19620: PUSH
19621: LD_EXP 41
19625: EQUAL
19626: IFFALSE 19636
// driverShortName = Ptr ;
19628: LD_ADDR_VAR 0 5
19632: PUSH
19633: LD_STRING Ptr
19635: ST_TO_ADDR
// if driver = Gleb then
19636: LD_VAR 0 4
19640: PUSH
19641: LD_EXP 42
19645: EQUAL
19646: IFFALSE 19656
// driverShortName = Glb ;
19648: LD_ADDR_VAR 0 5
19652: PUSH
19653: LD_STRING Glb
19655: ST_TO_ADDR
// if driver = Petrosyan then
19656: LD_VAR 0 4
19660: PUSH
19661: LD_EXP 43
19665: EQUAL
19666: IFFALSE 19676
// driverShortName = Pet ;
19668: LD_ADDR_VAR 0 5
19672: PUSH
19673: LD_STRING Pet
19675: ST_TO_ADDR
// if driver = Dolgov then
19676: LD_VAR 0 4
19680: PUSH
19681: LD_EXP 45
19685: EQUAL
19686: IFFALSE 19696
// driverShortName = Dol ;
19688: LD_ADDR_VAR 0 5
19692: PUSH
19693: LD_STRING Dol
19695: ST_TO_ADDR
// if driver = Lipshchin then
19696: LD_VAR 0 4
19700: PUSH
19701: LD_EXP 46
19705: EQUAL
19706: IFFALSE 19716
// driverShortName = Lip ;
19708: LD_ADDR_VAR 0 5
19712: PUSH
19713: LD_STRING Lip
19715: ST_TO_ADDR
// if driver = Titov then
19716: LD_VAR 0 4
19720: PUSH
19721: LD_EXP 44
19725: EQUAL
19726: IFFALSE 19736
// driverShortName = Tit ;
19728: LD_ADDR_VAR 0 5
19732: PUSH
19733: LD_STRING Tit
19735: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19736: LD_ADDR_EXP 5
19740: PUSH
19741: LD_EXP 5
19745: PUSH
19746: LD_VAR 0 2
19750: PPUSH
19751: CALL_OW 248
19755: PUSH
19756: LD_VAR 0 2
19760: PPUSH
19761: CALL_OW 265
19765: PUSH
19766: LD_VAR 0 2
19770: PPUSH
19771: CALL_OW 262
19775: PUSH
19776: LD_VAR 0 2
19780: PPUSH
19781: CALL_OW 263
19785: PUSH
19786: LD_VAR 0 2
19790: PPUSH
19791: CALL_OW 264
19795: PUSH
19796: LD_VAR 0 5
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: PUSH
19809: EMPTY
19810: LIST
19811: ADD
19812: ST_TO_ADDR
// end ;
19813: GO 19554
19815: POP
19816: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19817: LD_EXP 5
19821: PPUSH
19822: LD_STRING 05_Tanks_4
19824: PPUSH
19825: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19829: LD_INT 22
19831: PUSH
19832: LD_INT 3
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 23
19841: PUSH
19842: LD_INT 3
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 21
19851: PUSH
19852: LD_INT 3
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: LD_INT 30
19864: PUSH
19865: LD_INT 6
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 30
19874: PUSH
19875: LD_INT 7
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: PPUSH
19893: CALL_OW 69
19897: NOT
19898: IFFALSE 19908
// labDestroyed = 1 ;
19900: LD_ADDR_EXP 3
19904: PUSH
19905: LD_INT 1
19907: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
19908: LD_EXP 3
19912: PPUSH
19913: LD_STRING 05_LabDestroyed_5
19915: PPUSH
19916: CALL_OW 39
// end ; end_of_file
19920: LD_VAR 0 1
19924: RET
// export function Nef_PrepareNature ; var i , un ; begin
19925: LD_INT 0
19927: PPUSH
19928: PPUSH
19929: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
19930: LD_ADDR_VAR 0 2
19934: PUSH
19935: DOUBLE
19936: LD_INT 1
19938: DEC
19939: ST_TO_ADDR
19940: LD_EXP 27
19944: PUSH
19945: LD_INT 1
19947: ARRAY
19948: PUSH
19949: FOR_TO
19950: IFFALSE 20060
// begin uc_side = 0 ;
19952: LD_ADDR_OWVAR 20
19956: PUSH
19957: LD_INT 0
19959: ST_TO_ADDR
// uc_nation = nation_nature ;
19960: LD_ADDR_OWVAR 21
19964: PUSH
19965: LD_INT 0
19967: ST_TO_ADDR
// hc_class = class_apeman ;
19968: LD_ADDR_OWVAR 28
19972: PUSH
19973: LD_INT 12
19975: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19976: LD_ADDR_OWVAR 31
19980: PUSH
19981: LD_EXP 28
19985: PUSH
19986: LD_INT 1
19988: ARRAY
19989: PUSH
19990: LD_EXP 28
19994: PUSH
19995: LD_INT 2
19997: ARRAY
19998: PUSH
19999: LD_EXP 28
20003: PUSH
20004: LD_INT 3
20006: ARRAY
20007: PUSH
20008: LD_EXP 28
20012: PUSH
20013: LD_INT 4
20015: ARRAY
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20023: LD_ADDR_OWVAR 35
20027: PUSH
20028: LD_EXP 29
20032: ST_TO_ADDR
// un = CreateHuman ;
20033: LD_ADDR_VAR 0 3
20037: PUSH
20038: CALL_OW 44
20042: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20043: LD_VAR 0 3
20047: PPUSH
20048: LD_INT 33
20050: PPUSH
20051: LD_INT 0
20053: PPUSH
20054: CALL_OW 49
// end ;
20058: GO 19949
20060: POP
20061: POP
// for i := 1 to animalsAmount [ 2 ] do
20062: LD_ADDR_VAR 0 2
20066: PUSH
20067: DOUBLE
20068: LD_INT 1
20070: DEC
20071: ST_TO_ADDR
20072: LD_EXP 27
20076: PUSH
20077: LD_INT 2
20079: ARRAY
20080: PUSH
20081: FOR_TO
20082: IFFALSE 20192
// begin uc_side = 0 ;
20084: LD_ADDR_OWVAR 20
20088: PUSH
20089: LD_INT 0
20091: ST_TO_ADDR
// uc_nation = nation_nature ;
20092: LD_ADDR_OWVAR 21
20096: PUSH
20097: LD_INT 0
20099: ST_TO_ADDR
// hc_class = class_phororhacos ;
20100: LD_ADDR_OWVAR 28
20104: PUSH
20105: LD_INT 18
20107: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20108: LD_ADDR_OWVAR 31
20112: PUSH
20113: LD_EXP 28
20117: PUSH
20118: LD_INT 1
20120: ARRAY
20121: PUSH
20122: LD_EXP 28
20126: PUSH
20127: LD_INT 2
20129: ARRAY
20130: PUSH
20131: LD_EXP 28
20135: PUSH
20136: LD_INT 3
20138: ARRAY
20139: PUSH
20140: LD_EXP 28
20144: PUSH
20145: LD_INT 4
20147: ARRAY
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20155: LD_ADDR_OWVAR 35
20159: PUSH
20160: LD_EXP 29
20164: ST_TO_ADDR
// un = CreateHuman ;
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: CALL_OW 44
20174: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20175: LD_VAR 0 3
20179: PPUSH
20180: LD_INT 33
20182: PPUSH
20183: LD_INT 0
20185: PPUSH
20186: CALL_OW 49
// end ;
20190: GO 20081
20192: POP
20193: POP
// for i := 1 to animalsAmount [ 3 ] do
20194: LD_ADDR_VAR 0 2
20198: PUSH
20199: DOUBLE
20200: LD_INT 1
20202: DEC
20203: ST_TO_ADDR
20204: LD_EXP 27
20208: PUSH
20209: LD_INT 3
20211: ARRAY
20212: PUSH
20213: FOR_TO
20214: IFFALSE 20324
// begin uc_side = 0 ;
20216: LD_ADDR_OWVAR 20
20220: PUSH
20221: LD_INT 0
20223: ST_TO_ADDR
// uc_nation = nation_nature ;
20224: LD_ADDR_OWVAR 21
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// hc_class = class_tiger ;
20232: LD_ADDR_OWVAR 28
20236: PUSH
20237: LD_INT 14
20239: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20240: LD_ADDR_OWVAR 31
20244: PUSH
20245: LD_EXP 28
20249: PUSH
20250: LD_INT 1
20252: ARRAY
20253: PUSH
20254: LD_EXP 28
20258: PUSH
20259: LD_INT 2
20261: ARRAY
20262: PUSH
20263: LD_EXP 28
20267: PUSH
20268: LD_INT 3
20270: ARRAY
20271: PUSH
20272: LD_EXP 28
20276: PUSH
20277: LD_INT 4
20279: ARRAY
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20287: LD_ADDR_OWVAR 35
20291: PUSH
20292: LD_EXP 29
20296: ST_TO_ADDR
// un = CreateHuman ;
20297: LD_ADDR_VAR 0 3
20301: PUSH
20302: CALL_OW 44
20306: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20307: LD_VAR 0 3
20311: PPUSH
20312: LD_INT 33
20314: PPUSH
20315: LD_INT 0
20317: PPUSH
20318: CALL_OW 49
// end ;
20322: GO 20213
20324: POP
20325: POP
// for i := 1 to animalsAmount [ 4 ] do
20326: LD_ADDR_VAR 0 2
20330: PUSH
20331: DOUBLE
20332: LD_INT 1
20334: DEC
20335: ST_TO_ADDR
20336: LD_EXP 27
20340: PUSH
20341: LD_INT 4
20343: ARRAY
20344: PUSH
20345: FOR_TO
20346: IFFALSE 20456
// begin uc_side = 0 ;
20348: LD_ADDR_OWVAR 20
20352: PUSH
20353: LD_INT 0
20355: ST_TO_ADDR
// uc_nation = nation_nature ;
20356: LD_ADDR_OWVAR 21
20360: PUSH
20361: LD_INT 0
20363: ST_TO_ADDR
// hc_class = 21 ;
20364: LD_ADDR_OWVAR 28
20368: PUSH
20369: LD_INT 21
20371: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20372: LD_ADDR_OWVAR 31
20376: PUSH
20377: LD_EXP 28
20381: PUSH
20382: LD_INT 1
20384: ARRAY
20385: PUSH
20386: LD_EXP 28
20390: PUSH
20391: LD_INT 2
20393: ARRAY
20394: PUSH
20395: LD_EXP 28
20399: PUSH
20400: LD_INT 3
20402: ARRAY
20403: PUSH
20404: LD_EXP 28
20408: PUSH
20409: LD_INT 4
20411: ARRAY
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20419: LD_ADDR_OWVAR 35
20423: PUSH
20424: LD_EXP 29
20428: ST_TO_ADDR
// un = CreateHuman ;
20429: LD_ADDR_VAR 0 3
20433: PUSH
20434: CALL_OW 44
20438: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20439: LD_VAR 0 3
20443: PPUSH
20444: LD_INT 33
20446: PPUSH
20447: LD_INT 0
20449: PPUSH
20450: CALL_OW 49
// end ;
20454: GO 20345
20456: POP
20457: POP
// for i := 1 to animalsAmount [ 5 ] do
20458: LD_ADDR_VAR 0 2
20462: PUSH
20463: DOUBLE
20464: LD_INT 1
20466: DEC
20467: ST_TO_ADDR
20468: LD_EXP 27
20472: PUSH
20473: LD_INT 5
20475: ARRAY
20476: PUSH
20477: FOR_TO
20478: IFFALSE 20539
// begin uc_side = 0 ;
20480: LD_ADDR_OWVAR 20
20484: PUSH
20485: LD_INT 0
20487: ST_TO_ADDR
// uc_nation = nation_nature ;
20488: LD_ADDR_OWVAR 21
20492: PUSH
20493: LD_INT 0
20495: ST_TO_ADDR
// vc_chassis := 31 ;
20496: LD_ADDR_OWVAR 37
20500: PUSH
20501: LD_INT 31
20503: ST_TO_ADDR
// vc_control := control_rider ;
20504: LD_ADDR_OWVAR 38
20508: PUSH
20509: LD_INT 4
20511: ST_TO_ADDR
// un := CreateVehicle ;
20512: LD_ADDR_VAR 0 3
20516: PUSH
20517: CALL_OW 45
20521: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20522: LD_VAR 0 3
20526: PPUSH
20527: LD_INT 33
20529: PPUSH
20530: LD_INT 0
20532: PPUSH
20533: CALL_OW 49
// end ;
20537: GO 20477
20539: POP
20540: POP
// end ; end_of_file
20541: LD_VAR 0 1
20545: RET
// every 0 0$1 do
20546: GO 20548
20548: DISABLE
// begin enable ;
20549: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20550: LD_ADDR_OWVAR 47
20554: PUSH
20555: LD_STRING #Am01-1
20557: PUSH
20558: LD_EXP 7
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20567: LD_ADDR_EXP 7
20571: PUSH
20572: LD_EXP 7
20576: PUSH
20577: LD_INT 35
20579: PLUS
20580: ST_TO_ADDR
// end ; end_of_file
20581: END
// every 0 0$01 do var timer ;
20582: GO 20584
20584: DISABLE
20585: LD_INT 0
20587: PPUSH
// begin timer := 0 0$30 ;
20588: LD_ADDR_VAR 0 1
20592: PUSH
20593: LD_INT 1050
20595: ST_TO_ADDR
// repeat wait ( timer ) ;
20596: LD_VAR 0 1
20600: PPUSH
20601: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20605: LD_EXP 22
20609: PUSH
20610: LD_INT 6
20612: GREATEREQUAL
20613: PUSH
20614: LD_EXP 22
20618: PUSH
20619: LD_INT 12
20621: LESS
20622: AND
20623: IFFALSE 20639
// timer := timer + 0 0$3 ;
20625: LD_ADDR_VAR 0 1
20629: PUSH
20630: LD_VAR 0 1
20634: PUSH
20635: LD_INT 105
20637: PLUS
20638: ST_TO_ADDR
// if cratesSpawned >= 12 then
20639: LD_EXP 22
20643: PUSH
20644: LD_INT 12
20646: GREATEREQUAL
20647: IFFALSE 20663
// timer := timer + 0 0$9 ;
20649: LD_ADDR_VAR 0 1
20653: PUSH
20654: LD_VAR 0 1
20658: PUSH
20659: LD_INT 315
20661: PLUS
20662: ST_TO_ADDR
// if timer > 3 3$00 then
20663: LD_VAR 0 1
20667: PUSH
20668: LD_INT 6300
20670: GREATER
20671: IFFALSE 20681
// timer := 0 0$50 ;
20673: LD_ADDR_VAR 0 1
20677: PUSH
20678: LD_INT 1750
20680: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20681: LD_INT 3
20683: PPUSH
20684: LD_INT 5
20686: PPUSH
20687: CALL_OW 12
20691: PPUSH
20692: LD_INT 46
20694: PPUSH
20695: LD_INT 1
20697: PPUSH
20698: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20702: LD_ADDR_EXP 22
20706: PUSH
20707: LD_EXP 22
20711: PUSH
20712: LD_INT 1
20714: PLUS
20715: ST_TO_ADDR
// until false ;
20716: LD_INT 0
20718: IFFALSE 20596
// end ;
20720: PPOPN 1
20722: END
// every 0 0$5 do
20723: GO 20725
20725: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20726: LD_INT 5
20728: PPUSH
20729: LD_INT 48
20731: PPUSH
20732: LD_INT 1
20734: PPUSH
20735: CALL_OW 55
// wait ( 0 0$40 ) ;
20739: LD_INT 1400
20741: PPUSH
20742: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20746: LD_INT 5
20748: PPUSH
20749: LD_INT 48
20751: PPUSH
20752: LD_INT 1
20754: PPUSH
20755: CALL_OW 55
// end ;
20759: END
// every 10 10$0 do
20760: GO 20762
20762: DISABLE
// begin enable ;
20763: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20764: LD_INT 3
20766: PPUSH
20767: LD_INT 5
20769: PPUSH
20770: CALL_OW 12
20774: PPUSH
20775: LD_INT 48
20777: PPUSH
20778: LD_INT 1
20780: PPUSH
20781: CALL_OW 55
// end ; end_of_file
20785: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20786: LD_INT 0
20788: PPUSH
// uc_side = 1 ;
20789: LD_ADDR_OWVAR 20
20793: PUSH
20794: LD_INT 1
20796: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20797: LD_ADDR_EXP 57
20801: PUSH
20802: LD_STRING Stevens
20804: PPUSH
20805: LD_INT 0
20807: PPUSH
20808: LD_INT 0
20810: PPUSH
20811: CALL 8513 0 3
20815: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20816: LD_EXP 57
20820: PPUSH
20821: LD_VAR 0 1
20825: PPUSH
20826: LD_INT 1
20828: PPUSH
20829: CALL_OW 49
// end ; end_of_file
20833: LD_VAR 0 2
20837: RET
// every 1 trigger achievement_DestroyedHovercrafts >= 3 do
20838: LD_EXP 25
20842: PUSH
20843: LD_INT 3
20845: GREATEREQUAL
20846: IFFALSE 20858
20848: GO 20850
20850: DISABLE
// SetAchievement ( ACH_HOVER ) ;
20851: LD_STRING ACH_HOVER
20853: PPUSH
20854: CALL_OW 543
20858: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_nature ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) and not FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_class , class_apeman ] ] ) do
20859: LD_INT 22
20861: PUSH
20862: LD_INT 3
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 23
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: LD_INT 25
20884: PUSH
20885: LD_INT 12
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 25
20894: PUSH
20895: LD_INT 16
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 25
20904: PUSH
20905: LD_INT 15
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: LIST
20922: PPUSH
20923: CALL_OW 69
20927: PUSH
20928: LD_INT 22
20930: PUSH
20931: LD_INT 0
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 23
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 25
20950: PUSH
20951: LD_INT 12
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: PPUSH
20963: CALL_OW 69
20967: NOT
20968: AND
20969: IFFALSE 20981
20971: GO 20973
20973: DISABLE
// SetAchievement ( ACH_REDARMY ) ;
20974: LD_STRING ACH_REDARMY
20976: PPUSH
20977: CALL_OW 543
20981: END
// every 1 trigger not achievement_CollectedCrates do var crates , depot ;
20982: LD_EXP 26
20986: NOT
20987: IFFALSE 21120
20989: GO 20991
20991: DISABLE
20992: LD_INT 0
20994: PPUSH
20995: PPUSH
// begin enable ;
20996: ENABLE
// crates = 0 ;
20997: LD_ADDR_VAR 0 1
21001: PUSH
21002: LD_INT 0
21004: ST_TO_ADDR
// for depot in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
21005: LD_ADDR_VAR 0 2
21009: PUSH
21010: LD_INT 22
21012: PUSH
21013: LD_INT 3
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 21
21022: PUSH
21023: LD_INT 3
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 30
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 50
21042: PUSH
21043: EMPTY
21044: LIST
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: PPUSH
21052: CALL_OW 69
21056: PUSH
21057: FOR_IN
21058: IFFALSE 21091
// crates = crates + GetResourceType ( GetBase ( depot ) , mat_cans ) ;
21060: LD_ADDR_VAR 0 1
21064: PUSH
21065: LD_VAR 0 1
21069: PUSH
21070: LD_VAR 0 2
21074: PPUSH
21075: CALL_OW 274
21079: PPUSH
21080: LD_INT 1
21082: PPUSH
21083: CALL_OW 275
21087: PLUS
21088: ST_TO_ADDR
21089: GO 21057
21091: POP
21092: POP
// if crates >= 500 then
21093: LD_VAR 0 1
21097: PUSH
21098: LD_INT 500
21100: GREATEREQUAL
21101: IFFALSE 21120
// begin achievement_CollectedCrates = true ;
21103: LD_ADDR_EXP 26
21107: PUSH
21108: LD_INT 1
21110: ST_TO_ADDR
// SetAchievement ( ACH_CRATES ) ;
21111: LD_STRING ACH_CRATES
21113: PPUSH
21114: CALL_OW 543
// exit ;
21118: GO 21120
// end ; end ; end_of_file
21120: PPOPN 2
21122: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21123: LD_INT 0
21125: PPUSH
21126: PPUSH
// if exist_mode then
21127: LD_VAR 0 2
21131: IFFALSE 21156
// unit := CreateCharacter ( prefix & ident ) else
21133: LD_ADDR_VAR 0 5
21137: PUSH
21138: LD_VAR 0 3
21142: PUSH
21143: LD_VAR 0 1
21147: STR
21148: PPUSH
21149: CALL_OW 34
21153: ST_TO_ADDR
21154: GO 21171
// unit := NewCharacter ( ident ) ;
21156: LD_ADDR_VAR 0 5
21160: PUSH
21161: LD_VAR 0 1
21165: PPUSH
21166: CALL_OW 25
21170: ST_TO_ADDR
// result := unit ;
21171: LD_ADDR_VAR 0 4
21175: PUSH
21176: LD_VAR 0 5
21180: ST_TO_ADDR
// end ;
21181: LD_VAR 0 4
21185: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21186: LD_INT 0
21188: PPUSH
21189: PPUSH
// if not side or not nation then
21190: LD_VAR 0 1
21194: NOT
21195: PUSH
21196: LD_VAR 0 2
21200: NOT
21201: OR
21202: IFFALSE 21206
// exit ;
21204: GO 21970
// case nation of nation_american :
21206: LD_VAR 0 2
21210: PUSH
21211: LD_INT 1
21213: DOUBLE
21214: EQUAL
21215: IFTRUE 21219
21217: GO 21433
21219: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21220: LD_ADDR_VAR 0 4
21224: PUSH
21225: LD_INT 35
21227: PUSH
21228: LD_INT 45
21230: PUSH
21231: LD_INT 46
21233: PUSH
21234: LD_INT 47
21236: PUSH
21237: LD_INT 82
21239: PUSH
21240: LD_INT 83
21242: PUSH
21243: LD_INT 84
21245: PUSH
21246: LD_INT 85
21248: PUSH
21249: LD_INT 86
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: LD_INT 2
21257: PUSH
21258: LD_INT 6
21260: PUSH
21261: LD_INT 15
21263: PUSH
21264: LD_INT 16
21266: PUSH
21267: LD_INT 7
21269: PUSH
21270: LD_INT 12
21272: PUSH
21273: LD_INT 13
21275: PUSH
21276: LD_INT 10
21278: PUSH
21279: LD_INT 14
21281: PUSH
21282: LD_INT 20
21284: PUSH
21285: LD_INT 21
21287: PUSH
21288: LD_INT 22
21290: PUSH
21291: LD_INT 25
21293: PUSH
21294: LD_INT 32
21296: PUSH
21297: LD_INT 27
21299: PUSH
21300: LD_INT 36
21302: PUSH
21303: LD_INT 69
21305: PUSH
21306: LD_INT 39
21308: PUSH
21309: LD_INT 34
21311: PUSH
21312: LD_INT 40
21314: PUSH
21315: LD_INT 48
21317: PUSH
21318: LD_INT 49
21320: PUSH
21321: LD_INT 50
21323: PUSH
21324: LD_INT 51
21326: PUSH
21327: LD_INT 52
21329: PUSH
21330: LD_INT 53
21332: PUSH
21333: LD_INT 54
21335: PUSH
21336: LD_INT 55
21338: PUSH
21339: LD_INT 56
21341: PUSH
21342: LD_INT 57
21344: PUSH
21345: LD_INT 58
21347: PUSH
21348: LD_INT 59
21350: PUSH
21351: LD_INT 60
21353: PUSH
21354: LD_INT 61
21356: PUSH
21357: LD_INT 62
21359: PUSH
21360: LD_INT 80
21362: PUSH
21363: LD_INT 82
21365: PUSH
21366: LD_INT 83
21368: PUSH
21369: LD_INT 84
21371: PUSH
21372: LD_INT 85
21374: PUSH
21375: LD_INT 86
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: ST_TO_ADDR
21431: GO 21894
21433: LD_INT 2
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21663
21441: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21442: LD_ADDR_VAR 0 4
21446: PUSH
21447: LD_INT 35
21449: PUSH
21450: LD_INT 45
21452: PUSH
21453: LD_INT 46
21455: PUSH
21456: LD_INT 47
21458: PUSH
21459: LD_INT 82
21461: PUSH
21462: LD_INT 83
21464: PUSH
21465: LD_INT 84
21467: PUSH
21468: LD_INT 85
21470: PUSH
21471: LD_INT 87
21473: PUSH
21474: LD_INT 70
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: LD_INT 11
21482: PUSH
21483: LD_INT 3
21485: PUSH
21486: LD_INT 4
21488: PUSH
21489: LD_INT 5
21491: PUSH
21492: LD_INT 6
21494: PUSH
21495: LD_INT 15
21497: PUSH
21498: LD_INT 18
21500: PUSH
21501: LD_INT 7
21503: PUSH
21504: LD_INT 17
21506: PUSH
21507: LD_INT 8
21509: PUSH
21510: LD_INT 20
21512: PUSH
21513: LD_INT 21
21515: PUSH
21516: LD_INT 22
21518: PUSH
21519: LD_INT 72
21521: PUSH
21522: LD_INT 26
21524: PUSH
21525: LD_INT 69
21527: PUSH
21528: LD_INT 39
21530: PUSH
21531: LD_INT 40
21533: PUSH
21534: LD_INT 41
21536: PUSH
21537: LD_INT 42
21539: PUSH
21540: LD_INT 43
21542: PUSH
21543: LD_INT 48
21545: PUSH
21546: LD_INT 49
21548: PUSH
21549: LD_INT 50
21551: PUSH
21552: LD_INT 51
21554: PUSH
21555: LD_INT 52
21557: PUSH
21558: LD_INT 53
21560: PUSH
21561: LD_INT 54
21563: PUSH
21564: LD_INT 55
21566: PUSH
21567: LD_INT 56
21569: PUSH
21570: LD_INT 60
21572: PUSH
21573: LD_INT 61
21575: PUSH
21576: LD_INT 62
21578: PUSH
21579: LD_INT 66
21581: PUSH
21582: LD_INT 67
21584: PUSH
21585: LD_INT 68
21587: PUSH
21588: LD_INT 81
21590: PUSH
21591: LD_INT 82
21593: PUSH
21594: LD_INT 83
21596: PUSH
21597: LD_INT 84
21599: PUSH
21600: LD_INT 85
21602: PUSH
21603: LD_INT 87
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: ST_TO_ADDR
21661: GO 21894
21663: LD_INT 3
21665: DOUBLE
21666: EQUAL
21667: IFTRUE 21671
21669: GO 21893
21671: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21672: LD_ADDR_VAR 0 4
21676: PUSH
21677: LD_INT 46
21679: PUSH
21680: LD_INT 47
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: LD_INT 82
21691: PUSH
21692: LD_INT 83
21694: PUSH
21695: LD_INT 84
21697: PUSH
21698: LD_INT 85
21700: PUSH
21701: LD_INT 86
21703: PUSH
21704: LD_INT 11
21706: PUSH
21707: LD_INT 9
21709: PUSH
21710: LD_INT 20
21712: PUSH
21713: LD_INT 19
21715: PUSH
21716: LD_INT 21
21718: PUSH
21719: LD_INT 24
21721: PUSH
21722: LD_INT 22
21724: PUSH
21725: LD_INT 25
21727: PUSH
21728: LD_INT 28
21730: PUSH
21731: LD_INT 29
21733: PUSH
21734: LD_INT 30
21736: PUSH
21737: LD_INT 31
21739: PUSH
21740: LD_INT 37
21742: PUSH
21743: LD_INT 38
21745: PUSH
21746: LD_INT 32
21748: PUSH
21749: LD_INT 27
21751: PUSH
21752: LD_INT 33
21754: PUSH
21755: LD_INT 69
21757: PUSH
21758: LD_INT 39
21760: PUSH
21761: LD_INT 34
21763: PUSH
21764: LD_INT 40
21766: PUSH
21767: LD_INT 71
21769: PUSH
21770: LD_INT 23
21772: PUSH
21773: LD_INT 44
21775: PUSH
21776: LD_INT 48
21778: PUSH
21779: LD_INT 49
21781: PUSH
21782: LD_INT 50
21784: PUSH
21785: LD_INT 51
21787: PUSH
21788: LD_INT 52
21790: PUSH
21791: LD_INT 53
21793: PUSH
21794: LD_INT 54
21796: PUSH
21797: LD_INT 55
21799: PUSH
21800: LD_INT 56
21802: PUSH
21803: LD_INT 57
21805: PUSH
21806: LD_INT 58
21808: PUSH
21809: LD_INT 59
21811: PUSH
21812: LD_INT 63
21814: PUSH
21815: LD_INT 64
21817: PUSH
21818: LD_INT 65
21820: PUSH
21821: LD_INT 82
21823: PUSH
21824: LD_INT 83
21826: PUSH
21827: LD_INT 84
21829: PUSH
21830: LD_INT 85
21832: PUSH
21833: LD_INT 86
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: ST_TO_ADDR
21891: GO 21894
21893: POP
// if state > - 1 and state < 3 then
21894: LD_VAR 0 3
21898: PUSH
21899: LD_INT 1
21901: NEG
21902: GREATER
21903: PUSH
21904: LD_VAR 0 3
21908: PUSH
21909: LD_INT 3
21911: LESS
21912: AND
21913: IFFALSE 21970
// for i in result do
21915: LD_ADDR_VAR 0 5
21919: PUSH
21920: LD_VAR 0 4
21924: PUSH
21925: FOR_IN
21926: IFFALSE 21968
// if GetTech ( i , side ) <> state then
21928: LD_VAR 0 5
21932: PPUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 321
21942: PUSH
21943: LD_VAR 0 3
21947: NONEQUAL
21948: IFFALSE 21966
// result := result diff i ;
21950: LD_ADDR_VAR 0 4
21954: PUSH
21955: LD_VAR 0 4
21959: PUSH
21960: LD_VAR 0 5
21964: DIFF
21965: ST_TO_ADDR
21966: GO 21925
21968: POP
21969: POP
// end ;
21970: LD_VAR 0 4
21974: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21975: LD_INT 0
21977: PPUSH
21978: PPUSH
21979: PPUSH
// result := true ;
21980: LD_ADDR_VAR 0 3
21984: PUSH
21985: LD_INT 1
21987: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21988: LD_ADDR_VAR 0 5
21992: PUSH
21993: LD_VAR 0 2
21997: PPUSH
21998: CALL_OW 480
22002: ST_TO_ADDR
// if not tmp then
22003: LD_VAR 0 5
22007: NOT
22008: IFFALSE 22012
// exit ;
22010: GO 22061
// for i in tmp do
22012: LD_ADDR_VAR 0 4
22016: PUSH
22017: LD_VAR 0 5
22021: PUSH
22022: FOR_IN
22023: IFFALSE 22059
// if GetTech ( i , side ) <> state_researched then
22025: LD_VAR 0 4
22029: PPUSH
22030: LD_VAR 0 1
22034: PPUSH
22035: CALL_OW 321
22039: PUSH
22040: LD_INT 2
22042: NONEQUAL
22043: IFFALSE 22057
// begin result := false ;
22045: LD_ADDR_VAR 0 3
22049: PUSH
22050: LD_INT 0
22052: ST_TO_ADDR
// exit ;
22053: POP
22054: POP
22055: GO 22061
// end ;
22057: GO 22022
22059: POP
22060: POP
// end ;
22061: LD_VAR 0 3
22065: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22066: LD_INT 0
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
22076: PPUSH
22077: PPUSH
22078: PPUSH
22079: PPUSH
22080: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22081: LD_VAR 0 1
22085: NOT
22086: PUSH
22087: LD_VAR 0 1
22091: PPUSH
22092: CALL_OW 257
22096: PUSH
22097: LD_INT 9
22099: NONEQUAL
22100: OR
22101: IFFALSE 22105
// exit ;
22103: GO 22678
// side := GetSide ( unit ) ;
22105: LD_ADDR_VAR 0 9
22109: PUSH
22110: LD_VAR 0 1
22114: PPUSH
22115: CALL_OW 255
22119: ST_TO_ADDR
// tech_space := tech_spacanom ;
22120: LD_ADDR_VAR 0 12
22124: PUSH
22125: LD_INT 29
22127: ST_TO_ADDR
// tech_time := tech_taurad ;
22128: LD_ADDR_VAR 0 13
22132: PUSH
22133: LD_INT 28
22135: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22136: LD_ADDR_VAR 0 11
22140: PUSH
22141: LD_VAR 0 1
22145: PPUSH
22146: CALL_OW 310
22150: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22151: LD_VAR 0 11
22155: PPUSH
22156: CALL_OW 247
22160: PUSH
22161: LD_INT 2
22163: EQUAL
22164: IFFALSE 22168
// exit ;
22166: GO 22678
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22168: LD_ADDR_VAR 0 8
22172: PUSH
22173: LD_INT 81
22175: PUSH
22176: LD_VAR 0 9
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 3
22187: PUSH
22188: LD_INT 21
22190: PUSH
22191: LD_INT 3
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PPUSH
22206: CALL_OW 69
22210: ST_TO_ADDR
// if not tmp then
22211: LD_VAR 0 8
22215: NOT
22216: IFFALSE 22220
// exit ;
22218: GO 22678
// if in_unit then
22220: LD_VAR 0 11
22224: IFFALSE 22248
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22226: LD_ADDR_VAR 0 10
22230: PUSH
22231: LD_VAR 0 8
22235: PPUSH
22236: LD_VAR 0 11
22240: PPUSH
22241: CALL_OW 74
22245: ST_TO_ADDR
22246: GO 22268
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22248: LD_ADDR_VAR 0 10
22252: PUSH
22253: LD_VAR 0 8
22257: PPUSH
22258: LD_VAR 0 1
22262: PPUSH
22263: CALL_OW 74
22267: ST_TO_ADDR
// if not enemy then
22268: LD_VAR 0 10
22272: NOT
22273: IFFALSE 22277
// exit ;
22275: GO 22678
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22277: LD_VAR 0 11
22281: PUSH
22282: LD_VAR 0 11
22286: PPUSH
22287: LD_VAR 0 10
22291: PPUSH
22292: CALL_OW 296
22296: PUSH
22297: LD_INT 13
22299: GREATER
22300: AND
22301: PUSH
22302: LD_VAR 0 1
22306: PPUSH
22307: LD_VAR 0 10
22311: PPUSH
22312: CALL_OW 296
22316: PUSH
22317: LD_INT 12
22319: GREATER
22320: OR
22321: IFFALSE 22325
// exit ;
22323: GO 22678
// missile := [ 1 ] ;
22325: LD_ADDR_VAR 0 14
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: EMPTY
22334: LIST
22335: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22336: LD_VAR 0 9
22340: PPUSH
22341: LD_VAR 0 12
22345: PPUSH
22346: CALL_OW 325
22350: IFFALSE 22379
// missile := Insert ( missile , missile + 1 , 2 ) ;
22352: LD_ADDR_VAR 0 14
22356: PUSH
22357: LD_VAR 0 14
22361: PPUSH
22362: LD_VAR 0 14
22366: PUSH
22367: LD_INT 1
22369: PLUS
22370: PPUSH
22371: LD_INT 2
22373: PPUSH
22374: CALL_OW 2
22378: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22379: LD_VAR 0 9
22383: PPUSH
22384: LD_VAR 0 13
22388: PPUSH
22389: CALL_OW 325
22393: PUSH
22394: LD_VAR 0 10
22398: PPUSH
22399: CALL_OW 255
22403: PPUSH
22404: LD_VAR 0 13
22408: PPUSH
22409: CALL_OW 325
22413: NOT
22414: AND
22415: IFFALSE 22444
// missile := Insert ( missile , missile + 1 , 3 ) ;
22417: LD_ADDR_VAR 0 14
22421: PUSH
22422: LD_VAR 0 14
22426: PPUSH
22427: LD_VAR 0 14
22431: PUSH
22432: LD_INT 1
22434: PLUS
22435: PPUSH
22436: LD_INT 3
22438: PPUSH
22439: CALL_OW 2
22443: ST_TO_ADDR
// if missile < 2 then
22444: LD_VAR 0 14
22448: PUSH
22449: LD_INT 2
22451: LESS
22452: IFFALSE 22456
// exit ;
22454: GO 22678
// x := GetX ( enemy ) ;
22456: LD_ADDR_VAR 0 4
22460: PUSH
22461: LD_VAR 0 10
22465: PPUSH
22466: CALL_OW 250
22470: ST_TO_ADDR
// y := GetY ( enemy ) ;
22471: LD_ADDR_VAR 0 5
22475: PUSH
22476: LD_VAR 0 10
22480: PPUSH
22481: CALL_OW 251
22485: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22486: LD_ADDR_VAR 0 6
22490: PUSH
22491: LD_VAR 0 4
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PPUSH
22500: LD_INT 1
22502: PPUSH
22503: CALL_OW 12
22507: PLUS
22508: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22509: LD_ADDR_VAR 0 7
22513: PUSH
22514: LD_VAR 0 5
22518: PUSH
22519: LD_INT 1
22521: NEG
22522: PPUSH
22523: LD_INT 1
22525: PPUSH
22526: CALL_OW 12
22530: PLUS
22531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22532: LD_VAR 0 6
22536: PPUSH
22537: LD_VAR 0 7
22541: PPUSH
22542: CALL_OW 488
22546: NOT
22547: IFFALSE 22569
// begin _x := x ;
22549: LD_ADDR_VAR 0 6
22553: PUSH
22554: LD_VAR 0 4
22558: ST_TO_ADDR
// _y := y ;
22559: LD_ADDR_VAR 0 7
22563: PUSH
22564: LD_VAR 0 5
22568: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22569: LD_ADDR_VAR 0 3
22573: PUSH
22574: LD_INT 1
22576: PPUSH
22577: LD_VAR 0 14
22581: PPUSH
22582: CALL_OW 12
22586: ST_TO_ADDR
// case i of 1 :
22587: LD_VAR 0 3
22591: PUSH
22592: LD_INT 1
22594: DOUBLE
22595: EQUAL
22596: IFTRUE 22600
22598: GO 22617
22600: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22601: LD_VAR 0 1
22605: PPUSH
22606: LD_VAR 0 10
22610: PPUSH
22611: CALL_OW 115
22615: GO 22678
22617: LD_INT 2
22619: DOUBLE
22620: EQUAL
22621: IFTRUE 22625
22623: GO 22647
22625: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22626: LD_VAR 0 1
22630: PPUSH
22631: LD_VAR 0 6
22635: PPUSH
22636: LD_VAR 0 7
22640: PPUSH
22641: CALL_OW 153
22645: GO 22678
22647: LD_INT 3
22649: DOUBLE
22650: EQUAL
22651: IFTRUE 22655
22653: GO 22677
22655: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22656: LD_VAR 0 1
22660: PPUSH
22661: LD_VAR 0 6
22665: PPUSH
22666: LD_VAR 0 7
22670: PPUSH
22671: CALL_OW 154
22675: GO 22678
22677: POP
// end ;
22678: LD_VAR 0 2
22682: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22683: LD_INT 0
22685: PPUSH
22686: PPUSH
22687: PPUSH
22688: PPUSH
22689: PPUSH
22690: PPUSH
// if not unit or not building then
22691: LD_VAR 0 1
22695: NOT
22696: PUSH
22697: LD_VAR 0 2
22701: NOT
22702: OR
22703: IFFALSE 22707
// exit ;
22705: GO 22865
// x := GetX ( building ) ;
22707: LD_ADDR_VAR 0 5
22711: PUSH
22712: LD_VAR 0 2
22716: PPUSH
22717: CALL_OW 250
22721: ST_TO_ADDR
// y := GetY ( building ) ;
22722: LD_ADDR_VAR 0 6
22726: PUSH
22727: LD_VAR 0 2
22731: PPUSH
22732: CALL_OW 251
22736: ST_TO_ADDR
// for i = 0 to 5 do
22737: LD_ADDR_VAR 0 4
22741: PUSH
22742: DOUBLE
22743: LD_INT 0
22745: DEC
22746: ST_TO_ADDR
22747: LD_INT 5
22749: PUSH
22750: FOR_TO
22751: IFFALSE 22863
// begin _x := ShiftX ( x , i , 3 ) ;
22753: LD_ADDR_VAR 0 7
22757: PUSH
22758: LD_VAR 0 5
22762: PPUSH
22763: LD_VAR 0 4
22767: PPUSH
22768: LD_INT 3
22770: PPUSH
22771: CALL_OW 272
22775: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22776: LD_ADDR_VAR 0 8
22780: PUSH
22781: LD_VAR 0 6
22785: PPUSH
22786: LD_VAR 0 4
22790: PPUSH
22791: LD_INT 3
22793: PPUSH
22794: CALL_OW 273
22798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22799: LD_VAR 0 7
22803: PPUSH
22804: LD_VAR 0 8
22808: PPUSH
22809: CALL_OW 488
22813: NOT
22814: IFFALSE 22818
// continue ;
22816: GO 22750
// if HexInfo ( _x , _y ) = 0 then
22818: LD_VAR 0 7
22822: PPUSH
22823: LD_VAR 0 8
22827: PPUSH
22828: CALL_OW 428
22832: PUSH
22833: LD_INT 0
22835: EQUAL
22836: IFFALSE 22861
// begin ComMoveXY ( unit , _x , _y ) ;
22838: LD_VAR 0 1
22842: PPUSH
22843: LD_VAR 0 7
22847: PPUSH
22848: LD_VAR 0 8
22852: PPUSH
22853: CALL_OW 111
// exit ;
22857: POP
22858: POP
22859: GO 22865
// end ; end ;
22861: GO 22750
22863: POP
22864: POP
// end ;
22865: LD_VAR 0 3
22869: RET
// export function ScanBase ( side , base_area ) ; begin
22870: LD_INT 0
22872: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22873: LD_ADDR_VAR 0 3
22877: PUSH
22878: LD_VAR 0 2
22882: PPUSH
22883: LD_INT 81
22885: PUSH
22886: LD_VAR 0 1
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PPUSH
22895: CALL_OW 70
22899: ST_TO_ADDR
// end ;
22900: LD_VAR 0 3
22904: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22905: LD_INT 0
22907: PPUSH
22908: PPUSH
22909: PPUSH
22910: PPUSH
// result := false ;
22911: LD_ADDR_VAR 0 2
22915: PUSH
22916: LD_INT 0
22918: ST_TO_ADDR
// side := GetSide ( unit ) ;
22919: LD_ADDR_VAR 0 3
22923: PUSH
22924: LD_VAR 0 1
22928: PPUSH
22929: CALL_OW 255
22933: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22934: LD_ADDR_VAR 0 4
22938: PUSH
22939: LD_VAR 0 1
22943: PPUSH
22944: CALL_OW 248
22948: ST_TO_ADDR
// case nat of 1 :
22949: LD_VAR 0 4
22953: PUSH
22954: LD_INT 1
22956: DOUBLE
22957: EQUAL
22958: IFTRUE 22962
22960: GO 22973
22962: POP
// tech := tech_lassight ; 2 :
22963: LD_ADDR_VAR 0 5
22967: PUSH
22968: LD_INT 12
22970: ST_TO_ADDR
22971: GO 23012
22973: LD_INT 2
22975: DOUBLE
22976: EQUAL
22977: IFTRUE 22981
22979: GO 22992
22981: POP
// tech := tech_mortar ; 3 :
22982: LD_ADDR_VAR 0 5
22986: PUSH
22987: LD_INT 41
22989: ST_TO_ADDR
22990: GO 23012
22992: LD_INT 3
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23011
23000: POP
// tech := tech_bazooka ; end ;
23001: LD_ADDR_VAR 0 5
23005: PUSH
23006: LD_INT 44
23008: ST_TO_ADDR
23009: GO 23012
23011: POP
// if Researched ( side , tech ) then
23012: LD_VAR 0 3
23016: PPUSH
23017: LD_VAR 0 5
23021: PPUSH
23022: CALL_OW 325
23026: IFFALSE 23053
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23028: LD_ADDR_VAR 0 2
23032: PUSH
23033: LD_INT 5
23035: PUSH
23036: LD_INT 8
23038: PUSH
23039: LD_INT 9
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: PUSH
23047: LD_VAR 0 4
23051: ARRAY
23052: ST_TO_ADDR
// end ;
23053: LD_VAR 0 2
23057: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23058: LD_INT 0
23060: PPUSH
23061: PPUSH
23062: PPUSH
// if not mines then
23063: LD_VAR 0 2
23067: NOT
23068: IFFALSE 23072
// exit ;
23070: GO 23216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23072: LD_ADDR_VAR 0 5
23076: PUSH
23077: LD_INT 81
23079: PUSH
23080: LD_VAR 0 1
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 3
23091: PUSH
23092: LD_INT 21
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PPUSH
23110: CALL_OW 69
23114: ST_TO_ADDR
// for i in mines do
23115: LD_ADDR_VAR 0 4
23119: PUSH
23120: LD_VAR 0 2
23124: PUSH
23125: FOR_IN
23126: IFFALSE 23214
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23128: LD_VAR 0 4
23132: PUSH
23133: LD_INT 1
23135: ARRAY
23136: PPUSH
23137: LD_VAR 0 4
23141: PUSH
23142: LD_INT 2
23144: ARRAY
23145: PPUSH
23146: CALL_OW 458
23150: NOT
23151: IFFALSE 23155
// continue ;
23153: GO 23125
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23155: LD_VAR 0 4
23159: PUSH
23160: LD_INT 1
23162: ARRAY
23163: PPUSH
23164: LD_VAR 0 4
23168: PUSH
23169: LD_INT 2
23171: ARRAY
23172: PPUSH
23173: CALL_OW 428
23177: PUSH
23178: LD_VAR 0 5
23182: IN
23183: IFFALSE 23212
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23185: LD_VAR 0 4
23189: PUSH
23190: LD_INT 1
23192: ARRAY
23193: PPUSH
23194: LD_VAR 0 4
23198: PUSH
23199: LD_INT 2
23201: ARRAY
23202: PPUSH
23203: LD_VAR 0 1
23207: PPUSH
23208: CALL_OW 456
// end ;
23212: GO 23125
23214: POP
23215: POP
// end ;
23216: LD_VAR 0 3
23220: RET
// export function Count ( array ) ; var i ; begin
23221: LD_INT 0
23223: PPUSH
23224: PPUSH
// result := 0 ;
23225: LD_ADDR_VAR 0 2
23229: PUSH
23230: LD_INT 0
23232: ST_TO_ADDR
// for i in array do
23233: LD_ADDR_VAR 0 3
23237: PUSH
23238: LD_VAR 0 1
23242: PUSH
23243: FOR_IN
23244: IFFALSE 23268
// if i then
23246: LD_VAR 0 3
23250: IFFALSE 23266
// result := result + 1 ;
23252: LD_ADDR_VAR 0 2
23256: PUSH
23257: LD_VAR 0 2
23261: PUSH
23262: LD_INT 1
23264: PLUS
23265: ST_TO_ADDR
23266: GO 23243
23268: POP
23269: POP
// end ;
23270: LD_VAR 0 2
23274: RET
// export function IsEmpty ( building ) ; begin
23275: LD_INT 0
23277: PPUSH
// if not building then
23278: LD_VAR 0 1
23282: NOT
23283: IFFALSE 23287
// exit ;
23285: GO 23330
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: LD_VAR 0 1
23296: PUSH
23297: LD_INT 22
23299: PUSH
23300: LD_VAR 0 1
23304: PPUSH
23305: CALL_OW 255
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 58
23316: PUSH
23317: EMPTY
23318: LIST
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PPUSH
23324: CALL_OW 69
23328: IN
23329: ST_TO_ADDR
// end ;
23330: LD_VAR 0 2
23334: RET
// export function IsNotFull ( building ) ; begin
23335: LD_INT 0
23337: PPUSH
// if not building then
23338: LD_VAR 0 1
23342: NOT
23343: IFFALSE 23347
// exit ;
23345: GO 23366
// result := UnitsInside ( building ) < 6 ;
23347: LD_ADDR_VAR 0 2
23351: PUSH
23352: LD_VAR 0 1
23356: PPUSH
23357: CALL_OW 313
23361: PUSH
23362: LD_INT 6
23364: LESS
23365: ST_TO_ADDR
// end ;
23366: LD_VAR 0 2
23370: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23371: LD_INT 0
23373: PPUSH
23374: PPUSH
23375: PPUSH
23376: PPUSH
// tmp := [ ] ;
23377: LD_ADDR_VAR 0 3
23381: PUSH
23382: EMPTY
23383: ST_TO_ADDR
// list := [ ] ;
23384: LD_ADDR_VAR 0 5
23388: PUSH
23389: EMPTY
23390: ST_TO_ADDR
// for i = 16 to 25 do
23391: LD_ADDR_VAR 0 4
23395: PUSH
23396: DOUBLE
23397: LD_INT 16
23399: DEC
23400: ST_TO_ADDR
23401: LD_INT 25
23403: PUSH
23404: FOR_TO
23405: IFFALSE 23478
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23407: LD_ADDR_VAR 0 3
23411: PUSH
23412: LD_VAR 0 3
23416: PUSH
23417: LD_INT 22
23419: PUSH
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 255
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 91
23436: PUSH
23437: LD_VAR 0 1
23441: PUSH
23442: LD_INT 6
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 30
23452: PUSH
23453: LD_VAR 0 4
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: LIST
23466: PUSH
23467: EMPTY
23468: LIST
23469: PPUSH
23470: CALL_OW 69
23474: ADD
23475: ST_TO_ADDR
23476: GO 23404
23478: POP
23479: POP
// for i = 1 to tmp do
23480: LD_ADDR_VAR 0 4
23484: PUSH
23485: DOUBLE
23486: LD_INT 1
23488: DEC
23489: ST_TO_ADDR
23490: LD_VAR 0 3
23494: PUSH
23495: FOR_TO
23496: IFFALSE 23584
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23498: LD_ADDR_VAR 0 5
23502: PUSH
23503: LD_VAR 0 5
23507: PUSH
23508: LD_VAR 0 3
23512: PUSH
23513: LD_VAR 0 4
23517: ARRAY
23518: PPUSH
23519: CALL_OW 266
23523: PUSH
23524: LD_VAR 0 3
23528: PUSH
23529: LD_VAR 0 4
23533: ARRAY
23534: PPUSH
23535: CALL_OW 250
23539: PUSH
23540: LD_VAR 0 3
23544: PUSH
23545: LD_VAR 0 4
23549: ARRAY
23550: PPUSH
23551: CALL_OW 251
23555: PUSH
23556: LD_VAR 0 3
23560: PUSH
23561: LD_VAR 0 4
23565: ARRAY
23566: PPUSH
23567: CALL_OW 254
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: PUSH
23578: EMPTY
23579: LIST
23580: ADD
23581: ST_TO_ADDR
23582: GO 23495
23584: POP
23585: POP
// result := list ;
23586: LD_ADDR_VAR 0 2
23590: PUSH
23591: LD_VAR 0 5
23595: ST_TO_ADDR
// end ;
23596: LD_VAR 0 2
23600: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23601: LD_INT 0
23603: PPUSH
23604: PPUSH
23605: PPUSH
23606: PPUSH
23607: PPUSH
23608: PPUSH
23609: PPUSH
// if not factory then
23610: LD_VAR 0 1
23614: NOT
23615: IFFALSE 23619
// exit ;
23617: GO 24212
// if control = control_apeman then
23619: LD_VAR 0 4
23623: PUSH
23624: LD_INT 5
23626: EQUAL
23627: IFFALSE 23736
// begin tmp := UnitsInside ( factory ) ;
23629: LD_ADDR_VAR 0 8
23633: PUSH
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 313
23643: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23644: LD_VAR 0 8
23648: PPUSH
23649: LD_INT 25
23651: PUSH
23652: LD_INT 12
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PPUSH
23659: CALL_OW 72
23663: NOT
23664: IFFALSE 23674
// control := control_manual ;
23666: LD_ADDR_VAR 0 4
23670: PUSH
23671: LD_INT 1
23673: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23674: LD_ADDR_VAR 0 8
23678: PUSH
23679: LD_VAR 0 1
23683: PPUSH
23684: CALL 23371 0 1
23688: ST_TO_ADDR
// if tmp then
23689: LD_VAR 0 8
23693: IFFALSE 23736
// begin for i in tmp do
23695: LD_ADDR_VAR 0 7
23699: PUSH
23700: LD_VAR 0 8
23704: PUSH
23705: FOR_IN
23706: IFFALSE 23734
// if i [ 1 ] = b_ext_radio then
23708: LD_VAR 0 7
23712: PUSH
23713: LD_INT 1
23715: ARRAY
23716: PUSH
23717: LD_INT 22
23719: EQUAL
23720: IFFALSE 23732
// begin control := control_remote ;
23722: LD_ADDR_VAR 0 4
23726: PUSH
23727: LD_INT 2
23729: ST_TO_ADDR
// break ;
23730: GO 23734
// end ;
23732: GO 23705
23734: POP
23735: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23736: LD_VAR 0 1
23740: PPUSH
23741: LD_VAR 0 2
23745: PPUSH
23746: LD_VAR 0 3
23750: PPUSH
23751: LD_VAR 0 4
23755: PPUSH
23756: LD_VAR 0 5
23760: PPUSH
23761: CALL_OW 448
23765: IFFALSE 23800
// begin result := [ chassis , engine , control , weapon ] ;
23767: LD_ADDR_VAR 0 6
23771: PUSH
23772: LD_VAR 0 2
23776: PUSH
23777: LD_VAR 0 3
23781: PUSH
23782: LD_VAR 0 4
23786: PUSH
23787: LD_VAR 0 5
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: ST_TO_ADDR
// exit ;
23798: GO 24212
// end ; _chassis := AvailableChassisList ( factory ) ;
23800: LD_ADDR_VAR 0 9
23804: PUSH
23805: LD_VAR 0 1
23809: PPUSH
23810: CALL_OW 475
23814: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23815: LD_ADDR_VAR 0 11
23819: PUSH
23820: LD_VAR 0 1
23824: PPUSH
23825: CALL_OW 476
23829: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23830: LD_ADDR_VAR 0 12
23834: PUSH
23835: LD_VAR 0 1
23839: PPUSH
23840: CALL_OW 477
23844: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23845: LD_ADDR_VAR 0 10
23849: PUSH
23850: LD_VAR 0 1
23854: PPUSH
23855: CALL_OW 478
23859: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23860: LD_VAR 0 9
23864: NOT
23865: PUSH
23866: LD_VAR 0 11
23870: NOT
23871: OR
23872: PUSH
23873: LD_VAR 0 12
23877: NOT
23878: OR
23879: PUSH
23880: LD_VAR 0 10
23884: NOT
23885: OR
23886: IFFALSE 23921
// begin result := [ chassis , engine , control , weapon ] ;
23888: LD_ADDR_VAR 0 6
23892: PUSH
23893: LD_VAR 0 2
23897: PUSH
23898: LD_VAR 0 3
23902: PUSH
23903: LD_VAR 0 4
23907: PUSH
23908: LD_VAR 0 5
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: ST_TO_ADDR
// exit ;
23919: GO 24212
// end ; if not chassis in _chassis then
23921: LD_VAR 0 2
23925: PUSH
23926: LD_VAR 0 9
23930: IN
23931: NOT
23932: IFFALSE 23958
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23934: LD_ADDR_VAR 0 2
23938: PUSH
23939: LD_VAR 0 9
23943: PUSH
23944: LD_INT 1
23946: PPUSH
23947: LD_VAR 0 9
23951: PPUSH
23952: CALL_OW 12
23956: ARRAY
23957: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23958: LD_VAR 0 2
23962: PPUSH
23963: LD_VAR 0 3
23967: PPUSH
23968: CALL 24217 0 2
23972: NOT
23973: IFFALSE 24032
// repeat engine := _engine [ 1 ] ;
23975: LD_ADDR_VAR 0 3
23979: PUSH
23980: LD_VAR 0 11
23984: PUSH
23985: LD_INT 1
23987: ARRAY
23988: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23989: LD_ADDR_VAR 0 11
23993: PUSH
23994: LD_VAR 0 11
23998: PPUSH
23999: LD_INT 1
24001: PPUSH
24002: CALL_OW 3
24006: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24007: LD_VAR 0 2
24011: PPUSH
24012: LD_VAR 0 3
24016: PPUSH
24017: CALL 24217 0 2
24021: PUSH
24022: LD_VAR 0 11
24026: PUSH
24027: EMPTY
24028: EQUAL
24029: OR
24030: IFFALSE 23975
// if not control in _control then
24032: LD_VAR 0 4
24036: PUSH
24037: LD_VAR 0 12
24041: IN
24042: NOT
24043: IFFALSE 24069
// control := _control [ rand ( 1 , _control ) ] ;
24045: LD_ADDR_VAR 0 4
24049: PUSH
24050: LD_VAR 0 12
24054: PUSH
24055: LD_INT 1
24057: PPUSH
24058: LD_VAR 0 12
24062: PPUSH
24063: CALL_OW 12
24067: ARRAY
24068: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24069: LD_VAR 0 2
24073: PPUSH
24074: LD_VAR 0 5
24078: PPUSH
24079: CALL 24437 0 2
24083: NOT
24084: IFFALSE 24143
// repeat weapon := _weapon [ 1 ] ;
24086: LD_ADDR_VAR 0 5
24090: PUSH
24091: LD_VAR 0 10
24095: PUSH
24096: LD_INT 1
24098: ARRAY
24099: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24100: LD_ADDR_VAR 0 10
24104: PUSH
24105: LD_VAR 0 10
24109: PPUSH
24110: LD_INT 1
24112: PPUSH
24113: CALL_OW 3
24117: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24118: LD_VAR 0 2
24122: PPUSH
24123: LD_VAR 0 5
24127: PPUSH
24128: CALL 24437 0 2
24132: PUSH
24133: LD_VAR 0 10
24137: PUSH
24138: EMPTY
24139: EQUAL
24140: OR
24141: IFFALSE 24086
// result := [ ] ;
24143: LD_ADDR_VAR 0 6
24147: PUSH
24148: EMPTY
24149: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24150: LD_VAR 0 1
24154: PPUSH
24155: LD_VAR 0 2
24159: PPUSH
24160: LD_VAR 0 3
24164: PPUSH
24165: LD_VAR 0 4
24169: PPUSH
24170: LD_VAR 0 5
24174: PPUSH
24175: CALL_OW 448
24179: IFFALSE 24212
// result := [ chassis , engine , control , weapon ] ;
24181: LD_ADDR_VAR 0 6
24185: PUSH
24186: LD_VAR 0 2
24190: PUSH
24191: LD_VAR 0 3
24195: PUSH
24196: LD_VAR 0 4
24200: PUSH
24201: LD_VAR 0 5
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: ST_TO_ADDR
// end ;
24212: LD_VAR 0 6
24216: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24217: LD_INT 0
24219: PPUSH
// if not chassis or not engine then
24220: LD_VAR 0 1
24224: NOT
24225: PUSH
24226: LD_VAR 0 2
24230: NOT
24231: OR
24232: IFFALSE 24236
// exit ;
24234: GO 24432
// case engine of engine_solar :
24236: LD_VAR 0 2
24240: PUSH
24241: LD_INT 2
24243: DOUBLE
24244: EQUAL
24245: IFTRUE 24249
24247: GO 24287
24249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24250: LD_ADDR_VAR 0 3
24254: PUSH
24255: LD_INT 11
24257: PUSH
24258: LD_INT 12
24260: PUSH
24261: LD_INT 13
24263: PUSH
24264: LD_INT 14
24266: PUSH
24267: LD_INT 1
24269: PUSH
24270: LD_INT 2
24272: PUSH
24273: LD_INT 3
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: ST_TO_ADDR
24285: GO 24416
24287: LD_INT 1
24289: DOUBLE
24290: EQUAL
24291: IFTRUE 24295
24293: GO 24357
24295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24296: LD_ADDR_VAR 0 3
24300: PUSH
24301: LD_INT 11
24303: PUSH
24304: LD_INT 12
24306: PUSH
24307: LD_INT 13
24309: PUSH
24310: LD_INT 14
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: LD_INT 2
24318: PUSH
24319: LD_INT 3
24321: PUSH
24322: LD_INT 4
24324: PUSH
24325: LD_INT 5
24327: PUSH
24328: LD_INT 21
24330: PUSH
24331: LD_INT 23
24333: PUSH
24334: LD_INT 22
24336: PUSH
24337: LD_INT 24
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: ST_TO_ADDR
24355: GO 24416
24357: LD_INT 3
24359: DOUBLE
24360: EQUAL
24361: IFTRUE 24365
24363: GO 24415
24365: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24366: LD_ADDR_VAR 0 3
24370: PUSH
24371: LD_INT 13
24373: PUSH
24374: LD_INT 14
24376: PUSH
24377: LD_INT 2
24379: PUSH
24380: LD_INT 3
24382: PUSH
24383: LD_INT 4
24385: PUSH
24386: LD_INT 5
24388: PUSH
24389: LD_INT 21
24391: PUSH
24392: LD_INT 22
24394: PUSH
24395: LD_INT 23
24397: PUSH
24398: LD_INT 24
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: ST_TO_ADDR
24413: GO 24416
24415: POP
// result := ( chassis in result ) ;
24416: LD_ADDR_VAR 0 3
24420: PUSH
24421: LD_VAR 0 1
24425: PUSH
24426: LD_VAR 0 3
24430: IN
24431: ST_TO_ADDR
// end ;
24432: LD_VAR 0 3
24436: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24437: LD_INT 0
24439: PPUSH
// if not chassis or not weapon then
24440: LD_VAR 0 1
24444: NOT
24445: PUSH
24446: LD_VAR 0 2
24450: NOT
24451: OR
24452: IFFALSE 24456
// exit ;
24454: GO 25482
// case weapon of us_machine_gun :
24456: LD_VAR 0 2
24460: PUSH
24461: LD_INT 2
24463: DOUBLE
24464: EQUAL
24465: IFTRUE 24469
24467: GO 24499
24469: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24470: LD_ADDR_VAR 0 3
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 3
24483: PUSH
24484: LD_INT 4
24486: PUSH
24487: LD_INT 5
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: ST_TO_ADDR
24497: GO 25466
24499: LD_INT 3
24501: DOUBLE
24502: EQUAL
24503: IFTRUE 24507
24505: GO 24537
24507: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24508: LD_ADDR_VAR 0 3
24512: PUSH
24513: LD_INT 1
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: LD_INT 3
24521: PUSH
24522: LD_INT 4
24524: PUSH
24525: LD_INT 5
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: ST_TO_ADDR
24535: GO 25466
24537: LD_INT 11
24539: DOUBLE
24540: EQUAL
24541: IFTRUE 24545
24543: GO 24575
24545: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24546: LD_ADDR_VAR 0 3
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: LD_INT 3
24559: PUSH
24560: LD_INT 4
24562: PUSH
24563: LD_INT 5
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: ST_TO_ADDR
24573: GO 25466
24575: LD_INT 4
24577: DOUBLE
24578: EQUAL
24579: IFTRUE 24583
24581: GO 24609
24583: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24584: LD_ADDR_VAR 0 3
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: LD_INT 3
24594: PUSH
24595: LD_INT 4
24597: PUSH
24598: LD_INT 5
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: ST_TO_ADDR
24607: GO 25466
24609: LD_INT 5
24611: DOUBLE
24612: EQUAL
24613: IFTRUE 24617
24615: GO 24643
24617: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 3
24628: PUSH
24629: LD_INT 4
24631: PUSH
24632: LD_INT 5
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: ST_TO_ADDR
24641: GO 25466
24643: LD_INT 9
24645: DOUBLE
24646: EQUAL
24647: IFTRUE 24651
24649: GO 24677
24651: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24652: LD_ADDR_VAR 0 3
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: LD_INT 3
24662: PUSH
24663: LD_INT 4
24665: PUSH
24666: LD_INT 5
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: ST_TO_ADDR
24675: GO 25466
24677: LD_INT 7
24679: DOUBLE
24680: EQUAL
24681: IFTRUE 24685
24683: GO 24711
24685: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24686: LD_ADDR_VAR 0 3
24690: PUSH
24691: LD_INT 2
24693: PUSH
24694: LD_INT 3
24696: PUSH
24697: LD_INT 4
24699: PUSH
24700: LD_INT 5
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: ST_TO_ADDR
24709: GO 25466
24711: LD_INT 12
24713: DOUBLE
24714: EQUAL
24715: IFTRUE 24719
24717: GO 24745
24719: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24720: LD_ADDR_VAR 0 3
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: LD_INT 4
24733: PUSH
24734: LD_INT 5
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: ST_TO_ADDR
24743: GO 25466
24745: LD_INT 13
24747: DOUBLE
24748: EQUAL
24749: IFTRUE 24753
24751: GO 24779
24753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24754: LD_ADDR_VAR 0 3
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: LD_INT 3
24764: PUSH
24765: LD_INT 4
24767: PUSH
24768: LD_INT 5
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: ST_TO_ADDR
24777: GO 25466
24779: LD_INT 14
24781: DOUBLE
24782: EQUAL
24783: IFTRUE 24787
24785: GO 24805
24787: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24788: LD_ADDR_VAR 0 3
24792: PUSH
24793: LD_INT 4
24795: PUSH
24796: LD_INT 5
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: ST_TO_ADDR
24803: GO 25466
24805: LD_INT 6
24807: DOUBLE
24808: EQUAL
24809: IFTRUE 24813
24811: GO 24831
24813: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24814: LD_ADDR_VAR 0 3
24818: PUSH
24819: LD_INT 4
24821: PUSH
24822: LD_INT 5
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: ST_TO_ADDR
24829: GO 25466
24831: LD_INT 10
24833: DOUBLE
24834: EQUAL
24835: IFTRUE 24839
24837: GO 24857
24839: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24840: LD_ADDR_VAR 0 3
24844: PUSH
24845: LD_INT 4
24847: PUSH
24848: LD_INT 5
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: ST_TO_ADDR
24855: GO 25466
24857: LD_INT 22
24859: DOUBLE
24860: EQUAL
24861: IFTRUE 24865
24863: GO 24891
24865: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_INT 11
24873: PUSH
24874: LD_INT 12
24876: PUSH
24877: LD_INT 13
24879: PUSH
24880: LD_INT 14
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: ST_TO_ADDR
24889: GO 25466
24891: LD_INT 23
24893: DOUBLE
24894: EQUAL
24895: IFTRUE 24899
24897: GO 24925
24899: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24900: LD_ADDR_VAR 0 3
24904: PUSH
24905: LD_INT 11
24907: PUSH
24908: LD_INT 12
24910: PUSH
24911: LD_INT 13
24913: PUSH
24914: LD_INT 14
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: ST_TO_ADDR
24923: GO 25466
24925: LD_INT 24
24927: DOUBLE
24928: EQUAL
24929: IFTRUE 24933
24931: GO 24959
24933: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24934: LD_ADDR_VAR 0 3
24938: PUSH
24939: LD_INT 11
24941: PUSH
24942: LD_INT 12
24944: PUSH
24945: LD_INT 13
24947: PUSH
24948: LD_INT 14
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: ST_TO_ADDR
24957: GO 25466
24959: LD_INT 30
24961: DOUBLE
24962: EQUAL
24963: IFTRUE 24967
24965: GO 24993
24967: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24968: LD_ADDR_VAR 0 3
24972: PUSH
24973: LD_INT 11
24975: PUSH
24976: LD_INT 12
24978: PUSH
24979: LD_INT 13
24981: PUSH
24982: LD_INT 14
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: ST_TO_ADDR
24991: GO 25466
24993: LD_INT 25
24995: DOUBLE
24996: EQUAL
24997: IFTRUE 25001
24999: GO 25019
25001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25002: LD_ADDR_VAR 0 3
25006: PUSH
25007: LD_INT 13
25009: PUSH
25010: LD_INT 14
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: ST_TO_ADDR
25017: GO 25466
25019: LD_INT 27
25021: DOUBLE
25022: EQUAL
25023: IFTRUE 25027
25025: GO 25045
25027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25028: LD_ADDR_VAR 0 3
25032: PUSH
25033: LD_INT 13
25035: PUSH
25036: LD_INT 14
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: ST_TO_ADDR
25043: GO 25466
25045: LD_INT 28
25047: DOUBLE
25048: EQUAL
25049: IFTRUE 25053
25051: GO 25071
25053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25054: LD_ADDR_VAR 0 3
25058: PUSH
25059: LD_INT 13
25061: PUSH
25062: LD_INT 14
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: ST_TO_ADDR
25069: GO 25466
25071: LD_INT 29
25073: DOUBLE
25074: EQUAL
25075: IFTRUE 25079
25077: GO 25097
25079: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25080: LD_ADDR_VAR 0 3
25084: PUSH
25085: LD_INT 13
25087: PUSH
25088: LD_INT 14
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: ST_TO_ADDR
25095: GO 25466
25097: LD_INT 31
25099: DOUBLE
25100: EQUAL
25101: IFTRUE 25105
25103: GO 25123
25105: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25106: LD_ADDR_VAR 0 3
25110: PUSH
25111: LD_INT 13
25113: PUSH
25114: LD_INT 14
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: ST_TO_ADDR
25121: GO 25466
25123: LD_INT 26
25125: DOUBLE
25126: EQUAL
25127: IFTRUE 25131
25129: GO 25149
25131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25132: LD_ADDR_VAR 0 3
25136: PUSH
25137: LD_INT 13
25139: PUSH
25140: LD_INT 14
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: ST_TO_ADDR
25147: GO 25466
25149: LD_INT 42
25151: DOUBLE
25152: EQUAL
25153: IFTRUE 25157
25155: GO 25183
25157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25158: LD_ADDR_VAR 0 3
25162: PUSH
25163: LD_INT 21
25165: PUSH
25166: LD_INT 22
25168: PUSH
25169: LD_INT 23
25171: PUSH
25172: LD_INT 24
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: ST_TO_ADDR
25181: GO 25466
25183: LD_INT 43
25185: DOUBLE
25186: EQUAL
25187: IFTRUE 25191
25189: GO 25217
25191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25192: LD_ADDR_VAR 0 3
25196: PUSH
25197: LD_INT 21
25199: PUSH
25200: LD_INT 22
25202: PUSH
25203: LD_INT 23
25205: PUSH
25206: LD_INT 24
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: ST_TO_ADDR
25215: GO 25466
25217: LD_INT 44
25219: DOUBLE
25220: EQUAL
25221: IFTRUE 25225
25223: GO 25251
25225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25226: LD_ADDR_VAR 0 3
25230: PUSH
25231: LD_INT 21
25233: PUSH
25234: LD_INT 22
25236: PUSH
25237: LD_INT 23
25239: PUSH
25240: LD_INT 24
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: ST_TO_ADDR
25249: GO 25466
25251: LD_INT 45
25253: DOUBLE
25254: EQUAL
25255: IFTRUE 25259
25257: GO 25285
25259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25260: LD_ADDR_VAR 0 3
25264: PUSH
25265: LD_INT 21
25267: PUSH
25268: LD_INT 22
25270: PUSH
25271: LD_INT 23
25273: PUSH
25274: LD_INT 24
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: ST_TO_ADDR
25283: GO 25466
25285: LD_INT 49
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25319
25293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25294: LD_ADDR_VAR 0 3
25298: PUSH
25299: LD_INT 21
25301: PUSH
25302: LD_INT 22
25304: PUSH
25305: LD_INT 23
25307: PUSH
25308: LD_INT 24
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: ST_TO_ADDR
25317: GO 25466
25319: LD_INT 51
25321: DOUBLE
25322: EQUAL
25323: IFTRUE 25327
25325: GO 25353
25327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25328: LD_ADDR_VAR 0 3
25332: PUSH
25333: LD_INT 21
25335: PUSH
25336: LD_INT 22
25338: PUSH
25339: LD_INT 23
25341: PUSH
25342: LD_INT 24
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: ST_TO_ADDR
25351: GO 25466
25353: LD_INT 52
25355: DOUBLE
25356: EQUAL
25357: IFTRUE 25361
25359: GO 25387
25361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25362: LD_ADDR_VAR 0 3
25366: PUSH
25367: LD_INT 21
25369: PUSH
25370: LD_INT 22
25372: PUSH
25373: LD_INT 23
25375: PUSH
25376: LD_INT 24
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: ST_TO_ADDR
25385: GO 25466
25387: LD_INT 53
25389: DOUBLE
25390: EQUAL
25391: IFTRUE 25395
25393: GO 25413
25395: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25396: LD_ADDR_VAR 0 3
25400: PUSH
25401: LD_INT 23
25403: PUSH
25404: LD_INT 24
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: ST_TO_ADDR
25411: GO 25466
25413: LD_INT 46
25415: DOUBLE
25416: EQUAL
25417: IFTRUE 25421
25419: GO 25439
25421: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25422: LD_ADDR_VAR 0 3
25426: PUSH
25427: LD_INT 23
25429: PUSH
25430: LD_INT 24
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: ST_TO_ADDR
25437: GO 25466
25439: LD_INT 47
25441: DOUBLE
25442: EQUAL
25443: IFTRUE 25447
25445: GO 25465
25447: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_INT 23
25455: PUSH
25456: LD_INT 24
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: ST_TO_ADDR
25463: GO 25466
25465: POP
// result := ( chassis in result ) ;
25466: LD_ADDR_VAR 0 3
25470: PUSH
25471: LD_VAR 0 1
25475: PUSH
25476: LD_VAR 0 3
25480: IN
25481: ST_TO_ADDR
// end ;
25482: LD_VAR 0 3
25486: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25487: LD_INT 0
25489: PPUSH
25490: PPUSH
25491: PPUSH
25492: PPUSH
25493: PPUSH
25494: PPUSH
25495: PPUSH
// result := array ;
25496: LD_ADDR_VAR 0 5
25500: PUSH
25501: LD_VAR 0 1
25505: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25506: LD_VAR 0 1
25510: NOT
25511: PUSH
25512: LD_VAR 0 2
25516: NOT
25517: OR
25518: PUSH
25519: LD_VAR 0 3
25523: NOT
25524: OR
25525: PUSH
25526: LD_VAR 0 2
25530: PUSH
25531: LD_VAR 0 1
25535: GREATER
25536: OR
25537: PUSH
25538: LD_VAR 0 3
25542: PUSH
25543: LD_VAR 0 1
25547: GREATER
25548: OR
25549: IFFALSE 25553
// exit ;
25551: GO 25849
// if direction then
25553: LD_VAR 0 4
25557: IFFALSE 25621
// begin d := 1 ;
25559: LD_ADDR_VAR 0 9
25563: PUSH
25564: LD_INT 1
25566: ST_TO_ADDR
// if i_from > i_to then
25567: LD_VAR 0 2
25571: PUSH
25572: LD_VAR 0 3
25576: GREATER
25577: IFFALSE 25603
// length := ( array - i_from ) + i_to else
25579: LD_ADDR_VAR 0 11
25583: PUSH
25584: LD_VAR 0 1
25588: PUSH
25589: LD_VAR 0 2
25593: MINUS
25594: PUSH
25595: LD_VAR 0 3
25599: PLUS
25600: ST_TO_ADDR
25601: GO 25619
// length := i_to - i_from ;
25603: LD_ADDR_VAR 0 11
25607: PUSH
25608: LD_VAR 0 3
25612: PUSH
25613: LD_VAR 0 2
25617: MINUS
25618: ST_TO_ADDR
// end else
25619: GO 25682
// begin d := - 1 ;
25621: LD_ADDR_VAR 0 9
25625: PUSH
25626: LD_INT 1
25628: NEG
25629: ST_TO_ADDR
// if i_from > i_to then
25630: LD_VAR 0 2
25634: PUSH
25635: LD_VAR 0 3
25639: GREATER
25640: IFFALSE 25660
// length := i_from - i_to else
25642: LD_ADDR_VAR 0 11
25646: PUSH
25647: LD_VAR 0 2
25651: PUSH
25652: LD_VAR 0 3
25656: MINUS
25657: ST_TO_ADDR
25658: GO 25682
// length := ( array - i_to ) + i_from ;
25660: LD_ADDR_VAR 0 11
25664: PUSH
25665: LD_VAR 0 1
25669: PUSH
25670: LD_VAR 0 3
25674: MINUS
25675: PUSH
25676: LD_VAR 0 2
25680: PLUS
25681: ST_TO_ADDR
// end ; if not length then
25682: LD_VAR 0 11
25686: NOT
25687: IFFALSE 25691
// exit ;
25689: GO 25849
// tmp := array ;
25691: LD_ADDR_VAR 0 10
25695: PUSH
25696: LD_VAR 0 1
25700: ST_TO_ADDR
// for i = 1 to length do
25701: LD_ADDR_VAR 0 6
25705: PUSH
25706: DOUBLE
25707: LD_INT 1
25709: DEC
25710: ST_TO_ADDR
25711: LD_VAR 0 11
25715: PUSH
25716: FOR_TO
25717: IFFALSE 25837
// begin for j = 1 to array do
25719: LD_ADDR_VAR 0 7
25723: PUSH
25724: DOUBLE
25725: LD_INT 1
25727: DEC
25728: ST_TO_ADDR
25729: LD_VAR 0 1
25733: PUSH
25734: FOR_TO
25735: IFFALSE 25823
// begin k := j + d ;
25737: LD_ADDR_VAR 0 8
25741: PUSH
25742: LD_VAR 0 7
25746: PUSH
25747: LD_VAR 0 9
25751: PLUS
25752: ST_TO_ADDR
// if k > array then
25753: LD_VAR 0 8
25757: PUSH
25758: LD_VAR 0 1
25762: GREATER
25763: IFFALSE 25773
// k := 1 ;
25765: LD_ADDR_VAR 0 8
25769: PUSH
25770: LD_INT 1
25772: ST_TO_ADDR
// if not k then
25773: LD_VAR 0 8
25777: NOT
25778: IFFALSE 25790
// k := array ;
25780: LD_ADDR_VAR 0 8
25784: PUSH
25785: LD_VAR 0 1
25789: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25790: LD_ADDR_VAR 0 10
25794: PUSH
25795: LD_VAR 0 10
25799: PPUSH
25800: LD_VAR 0 8
25804: PPUSH
25805: LD_VAR 0 1
25809: PUSH
25810: LD_VAR 0 7
25814: ARRAY
25815: PPUSH
25816: CALL_OW 1
25820: ST_TO_ADDR
// end ;
25821: GO 25734
25823: POP
25824: POP
// array := tmp ;
25825: LD_ADDR_VAR 0 1
25829: PUSH
25830: LD_VAR 0 10
25834: ST_TO_ADDR
// end ;
25835: GO 25716
25837: POP
25838: POP
// result := array ;
25839: LD_ADDR_VAR 0 5
25843: PUSH
25844: LD_VAR 0 1
25848: ST_TO_ADDR
// end ;
25849: LD_VAR 0 5
25853: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25854: LD_INT 0
25856: PPUSH
25857: PPUSH
// result := 0 ;
25858: LD_ADDR_VAR 0 3
25862: PUSH
25863: LD_INT 0
25865: ST_TO_ADDR
// if not array or not value in array then
25866: LD_VAR 0 1
25870: NOT
25871: PUSH
25872: LD_VAR 0 2
25876: PUSH
25877: LD_VAR 0 1
25881: IN
25882: NOT
25883: OR
25884: IFFALSE 25888
// exit ;
25886: GO 25942
// for i = 1 to array do
25888: LD_ADDR_VAR 0 4
25892: PUSH
25893: DOUBLE
25894: LD_INT 1
25896: DEC
25897: ST_TO_ADDR
25898: LD_VAR 0 1
25902: PUSH
25903: FOR_TO
25904: IFFALSE 25940
// if value = array [ i ] then
25906: LD_VAR 0 2
25910: PUSH
25911: LD_VAR 0 1
25915: PUSH
25916: LD_VAR 0 4
25920: ARRAY
25921: EQUAL
25922: IFFALSE 25938
// begin result := i ;
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_VAR 0 4
25933: ST_TO_ADDR
// exit ;
25934: POP
25935: POP
25936: GO 25942
// end ;
25938: GO 25903
25940: POP
25941: POP
// end ;
25942: LD_VAR 0 3
25946: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25947: LD_INT 0
25949: PPUSH
// vc_chassis := chassis ;
25950: LD_ADDR_OWVAR 37
25954: PUSH
25955: LD_VAR 0 1
25959: ST_TO_ADDR
// vc_engine := engine ;
25960: LD_ADDR_OWVAR 39
25964: PUSH
25965: LD_VAR 0 2
25969: ST_TO_ADDR
// vc_control := control ;
25970: LD_ADDR_OWVAR 38
25974: PUSH
25975: LD_VAR 0 3
25979: ST_TO_ADDR
// vc_weapon := weapon ;
25980: LD_ADDR_OWVAR 40
25984: PUSH
25985: LD_VAR 0 4
25989: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25990: LD_ADDR_OWVAR 41
25994: PUSH
25995: LD_VAR 0 5
25999: ST_TO_ADDR
// end ;
26000: LD_VAR 0 6
26004: RET
// export function WantPlant ( unit ) ; var task ; begin
26005: LD_INT 0
26007: PPUSH
26008: PPUSH
// result := false ;
26009: LD_ADDR_VAR 0 2
26013: PUSH
26014: LD_INT 0
26016: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26017: LD_ADDR_VAR 0 3
26021: PUSH
26022: LD_VAR 0 1
26026: PPUSH
26027: CALL_OW 437
26031: ST_TO_ADDR
// if task then
26032: LD_VAR 0 3
26036: IFFALSE 26064
// if task [ 1 ] [ 1 ] = p then
26038: LD_VAR 0 3
26042: PUSH
26043: LD_INT 1
26045: ARRAY
26046: PUSH
26047: LD_INT 1
26049: ARRAY
26050: PUSH
26051: LD_STRING p
26053: EQUAL
26054: IFFALSE 26064
// result := true ;
26056: LD_ADDR_VAR 0 2
26060: PUSH
26061: LD_INT 1
26063: ST_TO_ADDR
// end ;
26064: LD_VAR 0 2
26068: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26069: LD_INT 0
26071: PPUSH
26072: PPUSH
26073: PPUSH
26074: PPUSH
// if pos < 1 then
26075: LD_VAR 0 2
26079: PUSH
26080: LD_INT 1
26082: LESS
26083: IFFALSE 26087
// exit ;
26085: GO 26390
// if pos = 1 then
26087: LD_VAR 0 2
26091: PUSH
26092: LD_INT 1
26094: EQUAL
26095: IFFALSE 26128
// result := Replace ( arr , pos [ 1 ] , value ) else
26097: LD_ADDR_VAR 0 4
26101: PUSH
26102: LD_VAR 0 1
26106: PPUSH
26107: LD_VAR 0 2
26111: PUSH
26112: LD_INT 1
26114: ARRAY
26115: PPUSH
26116: LD_VAR 0 3
26120: PPUSH
26121: CALL_OW 1
26125: ST_TO_ADDR
26126: GO 26390
// begin tmp := arr ;
26128: LD_ADDR_VAR 0 6
26132: PUSH
26133: LD_VAR 0 1
26137: ST_TO_ADDR
// s_arr := [ tmp ] ;
26138: LD_ADDR_VAR 0 7
26142: PUSH
26143: LD_VAR 0 6
26147: PUSH
26148: EMPTY
26149: LIST
26150: ST_TO_ADDR
// for i = 1 to pos - 1 do
26151: LD_ADDR_VAR 0 5
26155: PUSH
26156: DOUBLE
26157: LD_INT 1
26159: DEC
26160: ST_TO_ADDR
26161: LD_VAR 0 2
26165: PUSH
26166: LD_INT 1
26168: MINUS
26169: PUSH
26170: FOR_TO
26171: IFFALSE 26216
// begin tmp := tmp [ pos [ i ] ] ;
26173: LD_ADDR_VAR 0 6
26177: PUSH
26178: LD_VAR 0 6
26182: PUSH
26183: LD_VAR 0 2
26187: PUSH
26188: LD_VAR 0 5
26192: ARRAY
26193: ARRAY
26194: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26195: LD_ADDR_VAR 0 7
26199: PUSH
26200: LD_VAR 0 7
26204: PUSH
26205: LD_VAR 0 6
26209: PUSH
26210: EMPTY
26211: LIST
26212: ADD
26213: ST_TO_ADDR
// end ;
26214: GO 26170
26216: POP
26217: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26218: LD_ADDR_VAR 0 6
26222: PUSH
26223: LD_VAR 0 6
26227: PPUSH
26228: LD_VAR 0 2
26232: PUSH
26233: LD_VAR 0 2
26237: ARRAY
26238: PPUSH
26239: LD_VAR 0 3
26243: PPUSH
26244: CALL_OW 1
26248: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26249: LD_ADDR_VAR 0 7
26253: PUSH
26254: LD_VAR 0 7
26258: PPUSH
26259: LD_VAR 0 7
26263: PPUSH
26264: LD_VAR 0 6
26268: PPUSH
26269: CALL_OW 1
26273: ST_TO_ADDR
// for i = s_arr downto 2 do
26274: LD_ADDR_VAR 0 5
26278: PUSH
26279: DOUBLE
26280: LD_VAR 0 7
26284: INC
26285: ST_TO_ADDR
26286: LD_INT 2
26288: PUSH
26289: FOR_DOWNTO
26290: IFFALSE 26374
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26292: LD_ADDR_VAR 0 6
26296: PUSH
26297: LD_VAR 0 7
26301: PUSH
26302: LD_VAR 0 5
26306: PUSH
26307: LD_INT 1
26309: MINUS
26310: ARRAY
26311: PPUSH
26312: LD_VAR 0 2
26316: PUSH
26317: LD_VAR 0 5
26321: PUSH
26322: LD_INT 1
26324: MINUS
26325: ARRAY
26326: PPUSH
26327: LD_VAR 0 7
26331: PUSH
26332: LD_VAR 0 5
26336: ARRAY
26337: PPUSH
26338: CALL_OW 1
26342: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26343: LD_ADDR_VAR 0 7
26347: PUSH
26348: LD_VAR 0 7
26352: PPUSH
26353: LD_VAR 0 5
26357: PUSH
26358: LD_INT 1
26360: MINUS
26361: PPUSH
26362: LD_VAR 0 6
26366: PPUSH
26367: CALL_OW 1
26371: ST_TO_ADDR
// end ;
26372: GO 26289
26374: POP
26375: POP
// result := s_arr [ 1 ] ;
26376: LD_ADDR_VAR 0 4
26380: PUSH
26381: LD_VAR 0 7
26385: PUSH
26386: LD_INT 1
26388: ARRAY
26389: ST_TO_ADDR
// end ; end ;
26390: LD_VAR 0 4
26394: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26395: LD_INT 0
26397: PPUSH
26398: PPUSH
// if not list then
26399: LD_VAR 0 1
26403: NOT
26404: IFFALSE 26408
// exit ;
26406: GO 26499
// i := list [ pos1 ] ;
26408: LD_ADDR_VAR 0 5
26412: PUSH
26413: LD_VAR 0 1
26417: PUSH
26418: LD_VAR 0 2
26422: ARRAY
26423: ST_TO_ADDR
// if not i then
26424: LD_VAR 0 5
26428: NOT
26429: IFFALSE 26433
// exit ;
26431: GO 26499
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26433: LD_ADDR_VAR 0 1
26437: PUSH
26438: LD_VAR 0 1
26442: PPUSH
26443: LD_VAR 0 2
26447: PPUSH
26448: LD_VAR 0 1
26452: PUSH
26453: LD_VAR 0 3
26457: ARRAY
26458: PPUSH
26459: CALL_OW 1
26463: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26464: LD_ADDR_VAR 0 1
26468: PUSH
26469: LD_VAR 0 1
26473: PPUSH
26474: LD_VAR 0 3
26478: PPUSH
26479: LD_VAR 0 5
26483: PPUSH
26484: CALL_OW 1
26488: ST_TO_ADDR
// result := list ;
26489: LD_ADDR_VAR 0 4
26493: PUSH
26494: LD_VAR 0 1
26498: ST_TO_ADDR
// end ;
26499: LD_VAR 0 4
26503: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26504: LD_INT 0
26506: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26507: LD_ADDR_VAR 0 5
26511: PUSH
26512: LD_VAR 0 1
26516: PPUSH
26517: CALL_OW 250
26521: PPUSH
26522: LD_VAR 0 1
26526: PPUSH
26527: CALL_OW 251
26531: PPUSH
26532: LD_VAR 0 2
26536: PPUSH
26537: LD_VAR 0 3
26541: PPUSH
26542: LD_VAR 0 4
26546: PPUSH
26547: CALL 26557 0 5
26551: ST_TO_ADDR
// end ;
26552: LD_VAR 0 5
26556: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26557: LD_INT 0
26559: PPUSH
26560: PPUSH
26561: PPUSH
26562: PPUSH
// if not list then
26563: LD_VAR 0 3
26567: NOT
26568: IFFALSE 26572
// exit ;
26570: GO 26960
// result := [ ] ;
26572: LD_ADDR_VAR 0 6
26576: PUSH
26577: EMPTY
26578: ST_TO_ADDR
// for i in list do
26579: LD_ADDR_VAR 0 7
26583: PUSH
26584: LD_VAR 0 3
26588: PUSH
26589: FOR_IN
26590: IFFALSE 26792
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26592: LD_ADDR_VAR 0 9
26596: PUSH
26597: LD_VAR 0 7
26601: PPUSH
26602: LD_VAR 0 1
26606: PPUSH
26607: LD_VAR 0 2
26611: PPUSH
26612: CALL_OW 297
26616: ST_TO_ADDR
// if not result then
26617: LD_VAR 0 6
26621: NOT
26622: IFFALSE 26648
// result := [ [ i , tmp ] ] else
26624: LD_ADDR_VAR 0 6
26628: PUSH
26629: LD_VAR 0 7
26633: PUSH
26634: LD_VAR 0 9
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: ST_TO_ADDR
26646: GO 26790
// begin if result [ result ] [ 2 ] < tmp then
26648: LD_VAR 0 6
26652: PUSH
26653: LD_VAR 0 6
26657: ARRAY
26658: PUSH
26659: LD_INT 2
26661: ARRAY
26662: PUSH
26663: LD_VAR 0 9
26667: LESS
26668: IFFALSE 26710
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26670: LD_ADDR_VAR 0 6
26674: PUSH
26675: LD_VAR 0 6
26679: PPUSH
26680: LD_VAR 0 6
26684: PUSH
26685: LD_INT 1
26687: PLUS
26688: PPUSH
26689: LD_VAR 0 7
26693: PUSH
26694: LD_VAR 0 9
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PPUSH
26703: CALL_OW 2
26707: ST_TO_ADDR
26708: GO 26790
// for j = 1 to result do
26710: LD_ADDR_VAR 0 8
26714: PUSH
26715: DOUBLE
26716: LD_INT 1
26718: DEC
26719: ST_TO_ADDR
26720: LD_VAR 0 6
26724: PUSH
26725: FOR_TO
26726: IFFALSE 26788
// begin if tmp < result [ j ] [ 2 ] then
26728: LD_VAR 0 9
26732: PUSH
26733: LD_VAR 0 6
26737: PUSH
26738: LD_VAR 0 8
26742: ARRAY
26743: PUSH
26744: LD_INT 2
26746: ARRAY
26747: LESS
26748: IFFALSE 26786
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26750: LD_ADDR_VAR 0 6
26754: PUSH
26755: LD_VAR 0 6
26759: PPUSH
26760: LD_VAR 0 8
26764: PPUSH
26765: LD_VAR 0 7
26769: PUSH
26770: LD_VAR 0 9
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PPUSH
26779: CALL_OW 2
26783: ST_TO_ADDR
// break ;
26784: GO 26788
// end ; end ;
26786: GO 26725
26788: POP
26789: POP
// end ; end ;
26790: GO 26589
26792: POP
26793: POP
// if result and not asc then
26794: LD_VAR 0 6
26798: PUSH
26799: LD_VAR 0 4
26803: NOT
26804: AND
26805: IFFALSE 26880
// begin tmp := result ;
26807: LD_ADDR_VAR 0 9
26811: PUSH
26812: LD_VAR 0 6
26816: ST_TO_ADDR
// for i = tmp downto 1 do
26817: LD_ADDR_VAR 0 7
26821: PUSH
26822: DOUBLE
26823: LD_VAR 0 9
26827: INC
26828: ST_TO_ADDR
26829: LD_INT 1
26831: PUSH
26832: FOR_DOWNTO
26833: IFFALSE 26878
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26835: LD_ADDR_VAR 0 6
26839: PUSH
26840: LD_VAR 0 6
26844: PPUSH
26845: LD_VAR 0 9
26849: PUSH
26850: LD_VAR 0 7
26854: MINUS
26855: PUSH
26856: LD_INT 1
26858: PLUS
26859: PPUSH
26860: LD_VAR 0 9
26864: PUSH
26865: LD_VAR 0 7
26869: ARRAY
26870: PPUSH
26871: CALL_OW 1
26875: ST_TO_ADDR
26876: GO 26832
26878: POP
26879: POP
// end ; tmp := [ ] ;
26880: LD_ADDR_VAR 0 9
26884: PUSH
26885: EMPTY
26886: ST_TO_ADDR
// if mode then
26887: LD_VAR 0 5
26891: IFFALSE 26960
// begin for i = 1 to result do
26893: LD_ADDR_VAR 0 7
26897: PUSH
26898: DOUBLE
26899: LD_INT 1
26901: DEC
26902: ST_TO_ADDR
26903: LD_VAR 0 6
26907: PUSH
26908: FOR_TO
26909: IFFALSE 26948
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26911: LD_ADDR_VAR 0 9
26915: PUSH
26916: LD_VAR 0 9
26920: PPUSH
26921: LD_VAR 0 7
26925: PPUSH
26926: LD_VAR 0 6
26930: PUSH
26931: LD_VAR 0 7
26935: ARRAY
26936: PUSH
26937: LD_INT 1
26939: ARRAY
26940: PPUSH
26941: CALL_OW 1
26945: ST_TO_ADDR
26946: GO 26908
26948: POP
26949: POP
// result := tmp ;
26950: LD_ADDR_VAR 0 6
26954: PUSH
26955: LD_VAR 0 9
26959: ST_TO_ADDR
// end ; end ;
26960: LD_VAR 0 6
26964: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26965: LD_INT 0
26967: PPUSH
26968: PPUSH
26969: PPUSH
26970: PPUSH
26971: PPUSH
26972: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26973: LD_ADDR_VAR 0 5
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: EMPTY
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: ST_TO_ADDR
// if not x or not y then
26995: LD_VAR 0 2
26999: NOT
27000: PUSH
27001: LD_VAR 0 3
27005: NOT
27006: OR
27007: IFFALSE 27011
// exit ;
27009: GO 28657
// if not range then
27011: LD_VAR 0 4
27015: NOT
27016: IFFALSE 27026
// range := 10 ;
27018: LD_ADDR_VAR 0 4
27022: PUSH
27023: LD_INT 10
27025: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27026: LD_ADDR_VAR 0 8
27030: PUSH
27031: LD_INT 81
27033: PUSH
27034: LD_VAR 0 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 92
27045: PUSH
27046: LD_VAR 0 2
27050: PUSH
27051: LD_VAR 0 3
27055: PUSH
27056: LD_VAR 0 4
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 3
27069: PUSH
27070: LD_INT 21
27072: PUSH
27073: LD_INT 3
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: PPUSH
27089: CALL_OW 69
27093: ST_TO_ADDR
// if not tmp then
27094: LD_VAR 0 8
27098: NOT
27099: IFFALSE 27103
// exit ;
27101: GO 28657
// for i in tmp do
27103: LD_ADDR_VAR 0 6
27107: PUSH
27108: LD_VAR 0 8
27112: PUSH
27113: FOR_IN
27114: IFFALSE 28632
// begin points := [ 0 , 0 , 0 ] ;
27116: LD_ADDR_VAR 0 9
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: ST_TO_ADDR
// bpoints := 1 ;
27135: LD_ADDR_VAR 0 10
27139: PUSH
27140: LD_INT 1
27142: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27143: LD_VAR 0 6
27147: PPUSH
27148: CALL_OW 247
27152: PUSH
27153: LD_INT 1
27155: DOUBLE
27156: EQUAL
27157: IFTRUE 27161
27159: GO 27739
27161: POP
// begin if GetClass ( i ) = 1 then
27162: LD_VAR 0 6
27166: PPUSH
27167: CALL_OW 257
27171: PUSH
27172: LD_INT 1
27174: EQUAL
27175: IFFALSE 27196
// points := [ 10 , 5 , 3 ] ;
27177: LD_ADDR_VAR 0 9
27181: PUSH
27182: LD_INT 10
27184: PUSH
27185: LD_INT 5
27187: PUSH
27188: LD_INT 3
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: LIST
27195: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27196: LD_VAR 0 6
27200: PPUSH
27201: CALL_OW 257
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: LD_INT 3
27211: PUSH
27212: LD_INT 4
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: LIST
27219: IN
27220: IFFALSE 27241
// points := [ 3 , 2 , 1 ] ;
27222: LD_ADDR_VAR 0 9
27226: PUSH
27227: LD_INT 3
27229: PUSH
27230: LD_INT 2
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27241: LD_VAR 0 6
27245: PPUSH
27246: CALL_OW 257
27250: PUSH
27251: LD_INT 5
27253: EQUAL
27254: IFFALSE 27275
// points := [ 130 , 5 , 2 ] ;
27256: LD_ADDR_VAR 0 9
27260: PUSH
27261: LD_INT 130
27263: PUSH
27264: LD_INT 5
27266: PUSH
27267: LD_INT 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27275: LD_VAR 0 6
27279: PPUSH
27280: CALL_OW 257
27284: PUSH
27285: LD_INT 8
27287: EQUAL
27288: IFFALSE 27309
// points := [ 35 , 35 , 30 ] ;
27290: LD_ADDR_VAR 0 9
27294: PUSH
27295: LD_INT 35
27297: PUSH
27298: LD_INT 35
27300: PUSH
27301: LD_INT 30
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27309: LD_VAR 0 6
27313: PPUSH
27314: CALL_OW 257
27318: PUSH
27319: LD_INT 9
27321: EQUAL
27322: IFFALSE 27343
// points := [ 20 , 55 , 40 ] ;
27324: LD_ADDR_VAR 0 9
27328: PUSH
27329: LD_INT 20
27331: PUSH
27332: LD_INT 55
27334: PUSH
27335: LD_INT 40
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27343: LD_VAR 0 6
27347: PPUSH
27348: CALL_OW 257
27352: PUSH
27353: LD_INT 12
27355: PUSH
27356: LD_INT 16
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: IN
27363: IFFALSE 27384
// points := [ 5 , 3 , 2 ] ;
27365: LD_ADDR_VAR 0 9
27369: PUSH
27370: LD_INT 5
27372: PUSH
27373: LD_INT 3
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27384: LD_VAR 0 6
27388: PPUSH
27389: CALL_OW 257
27393: PUSH
27394: LD_INT 17
27396: EQUAL
27397: IFFALSE 27418
// points := [ 100 , 50 , 75 ] ;
27399: LD_ADDR_VAR 0 9
27403: PUSH
27404: LD_INT 100
27406: PUSH
27407: LD_INT 50
27409: PUSH
27410: LD_INT 75
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: LIST
27417: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27418: LD_VAR 0 6
27422: PPUSH
27423: CALL_OW 257
27427: PUSH
27428: LD_INT 15
27430: EQUAL
27431: IFFALSE 27452
// points := [ 10 , 5 , 3 ] ;
27433: LD_ADDR_VAR 0 9
27437: PUSH
27438: LD_INT 10
27440: PUSH
27441: LD_INT 5
27443: PUSH
27444: LD_INT 3
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: LIST
27451: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27452: LD_VAR 0 6
27456: PPUSH
27457: CALL_OW 257
27461: PUSH
27462: LD_INT 14
27464: EQUAL
27465: IFFALSE 27486
// points := [ 10 , 0 , 0 ] ;
27467: LD_ADDR_VAR 0 9
27471: PUSH
27472: LD_INT 10
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: LIST
27485: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27486: LD_VAR 0 6
27490: PPUSH
27491: CALL_OW 257
27495: PUSH
27496: LD_INT 11
27498: EQUAL
27499: IFFALSE 27520
// points := [ 30 , 10 , 5 ] ;
27501: LD_ADDR_VAR 0 9
27505: PUSH
27506: LD_INT 30
27508: PUSH
27509: LD_INT 10
27511: PUSH
27512: LD_INT 5
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27520: LD_VAR 0 1
27524: PPUSH
27525: LD_INT 5
27527: PPUSH
27528: CALL_OW 321
27532: PUSH
27533: LD_INT 2
27535: EQUAL
27536: IFFALSE 27553
// bpoints := bpoints * 1.8 ;
27538: LD_ADDR_VAR 0 10
27542: PUSH
27543: LD_VAR 0 10
27547: PUSH
27548: LD_REAL  1.80000000000000E+0000
27551: MUL
27552: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27553: LD_VAR 0 6
27557: PPUSH
27558: CALL_OW 257
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: LD_INT 2
27568: PUSH
27569: LD_INT 3
27571: PUSH
27572: LD_INT 4
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: IN
27581: PUSH
27582: LD_VAR 0 1
27586: PPUSH
27587: LD_INT 51
27589: PPUSH
27590: CALL_OW 321
27594: PUSH
27595: LD_INT 2
27597: EQUAL
27598: AND
27599: IFFALSE 27616
// bpoints := bpoints * 1.2 ;
27601: LD_ADDR_VAR 0 10
27605: PUSH
27606: LD_VAR 0 10
27610: PUSH
27611: LD_REAL  1.20000000000000E+0000
27614: MUL
27615: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27616: LD_VAR 0 6
27620: PPUSH
27621: CALL_OW 257
27625: PUSH
27626: LD_INT 5
27628: PUSH
27629: LD_INT 7
27631: PUSH
27632: LD_INT 9
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: IN
27640: PUSH
27641: LD_VAR 0 1
27645: PPUSH
27646: LD_INT 52
27648: PPUSH
27649: CALL_OW 321
27653: PUSH
27654: LD_INT 2
27656: EQUAL
27657: AND
27658: IFFALSE 27675
// bpoints := bpoints * 1.5 ;
27660: LD_ADDR_VAR 0 10
27664: PUSH
27665: LD_VAR 0 10
27669: PUSH
27670: LD_REAL  1.50000000000000E+0000
27673: MUL
27674: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27675: LD_VAR 0 1
27679: PPUSH
27680: LD_INT 66
27682: PPUSH
27683: CALL_OW 321
27687: PUSH
27688: LD_INT 2
27690: EQUAL
27691: IFFALSE 27708
// bpoints := bpoints * 1.1 ;
27693: LD_ADDR_VAR 0 10
27697: PUSH
27698: LD_VAR 0 10
27702: PUSH
27703: LD_REAL  1.10000000000000E+0000
27706: MUL
27707: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27708: LD_ADDR_VAR 0 10
27712: PUSH
27713: LD_VAR 0 10
27717: PUSH
27718: LD_VAR 0 6
27722: PPUSH
27723: LD_INT 1
27725: PPUSH
27726: CALL_OW 259
27730: PUSH
27731: LD_REAL  1.15000000000000E+0000
27734: MUL
27735: MUL
27736: ST_TO_ADDR
// end ; unit_vehicle :
27737: GO 28561
27739: LD_INT 2
27741: DOUBLE
27742: EQUAL
27743: IFTRUE 27747
27745: GO 28549
27747: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27748: LD_VAR 0 6
27752: PPUSH
27753: CALL_OW 264
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: LD_INT 42
27763: PUSH
27764: LD_INT 24
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: IN
27772: IFFALSE 27793
// points := [ 25 , 5 , 3 ] ;
27774: LD_ADDR_VAR 0 9
27778: PUSH
27779: LD_INT 25
27781: PUSH
27782: LD_INT 5
27784: PUSH
27785: LD_INT 3
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27793: LD_VAR 0 6
27797: PPUSH
27798: CALL_OW 264
27802: PUSH
27803: LD_INT 4
27805: PUSH
27806: LD_INT 43
27808: PUSH
27809: LD_INT 25
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: IN
27817: IFFALSE 27838
// points := [ 40 , 15 , 5 ] ;
27819: LD_ADDR_VAR 0 9
27823: PUSH
27824: LD_INT 40
27826: PUSH
27827: LD_INT 15
27829: PUSH
27830: LD_INT 5
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27838: LD_VAR 0 6
27842: PPUSH
27843: CALL_OW 264
27847: PUSH
27848: LD_INT 3
27850: PUSH
27851: LD_INT 23
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: IN
27858: IFFALSE 27879
// points := [ 7 , 25 , 8 ] ;
27860: LD_ADDR_VAR 0 9
27864: PUSH
27865: LD_INT 7
27867: PUSH
27868: LD_INT 25
27870: PUSH
27871: LD_INT 8
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27879: LD_VAR 0 6
27883: PPUSH
27884: CALL_OW 264
27888: PUSH
27889: LD_INT 5
27891: PUSH
27892: LD_INT 27
27894: PUSH
27895: LD_INT 44
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: IN
27903: IFFALSE 27924
// points := [ 14 , 50 , 16 ] ;
27905: LD_ADDR_VAR 0 9
27909: PUSH
27910: LD_INT 14
27912: PUSH
27913: LD_INT 50
27915: PUSH
27916: LD_INT 16
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27924: LD_VAR 0 6
27928: PPUSH
27929: CALL_OW 264
27933: PUSH
27934: LD_INT 6
27936: PUSH
27937: LD_INT 46
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: IN
27944: IFFALSE 27965
// points := [ 32 , 120 , 70 ] ;
27946: LD_ADDR_VAR 0 9
27950: PUSH
27951: LD_INT 32
27953: PUSH
27954: LD_INT 120
27956: PUSH
27957: LD_INT 70
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27965: LD_VAR 0 6
27969: PPUSH
27970: CALL_OW 264
27974: PUSH
27975: LD_INT 7
27977: PUSH
27978: LD_INT 28
27980: PUSH
27981: LD_INT 45
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: LIST
27988: IN
27989: IFFALSE 28010
// points := [ 35 , 20 , 45 ] ;
27991: LD_ADDR_VAR 0 9
27995: PUSH
27996: LD_INT 35
27998: PUSH
27999: LD_INT 20
28001: PUSH
28002: LD_INT 45
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28010: LD_VAR 0 6
28014: PPUSH
28015: CALL_OW 264
28019: PUSH
28020: LD_INT 47
28022: PUSH
28023: EMPTY
28024: LIST
28025: IN
28026: IFFALSE 28047
// points := [ 67 , 45 , 75 ] ;
28028: LD_ADDR_VAR 0 9
28032: PUSH
28033: LD_INT 67
28035: PUSH
28036: LD_INT 45
28038: PUSH
28039: LD_INT 75
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28047: LD_VAR 0 6
28051: PPUSH
28052: CALL_OW 264
28056: PUSH
28057: LD_INT 26
28059: PUSH
28060: EMPTY
28061: LIST
28062: IN
28063: IFFALSE 28084
// points := [ 120 , 30 , 80 ] ;
28065: LD_ADDR_VAR 0 9
28069: PUSH
28070: LD_INT 120
28072: PUSH
28073: LD_INT 30
28075: PUSH
28076: LD_INT 80
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28084: LD_VAR 0 6
28088: PPUSH
28089: CALL_OW 264
28093: PUSH
28094: LD_INT 22
28096: PUSH
28097: EMPTY
28098: LIST
28099: IN
28100: IFFALSE 28121
// points := [ 40 , 1 , 1 ] ;
28102: LD_ADDR_VAR 0 9
28106: PUSH
28107: LD_INT 40
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: LIST
28120: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28121: LD_VAR 0 6
28125: PPUSH
28126: CALL_OW 264
28130: PUSH
28131: LD_INT 29
28133: PUSH
28134: EMPTY
28135: LIST
28136: IN
28137: IFFALSE 28158
// points := [ 70 , 200 , 400 ] ;
28139: LD_ADDR_VAR 0 9
28143: PUSH
28144: LD_INT 70
28146: PUSH
28147: LD_INT 200
28149: PUSH
28150: LD_INT 400
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28158: LD_VAR 0 6
28162: PPUSH
28163: CALL_OW 264
28167: PUSH
28168: LD_INT 14
28170: PUSH
28171: LD_INT 53
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: IN
28178: IFFALSE 28199
// points := [ 40 , 10 , 20 ] ;
28180: LD_ADDR_VAR 0 9
28184: PUSH
28185: LD_INT 40
28187: PUSH
28188: LD_INT 10
28190: PUSH
28191: LD_INT 20
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28199: LD_VAR 0 6
28203: PPUSH
28204: CALL_OW 264
28208: PUSH
28209: LD_INT 9
28211: PUSH
28212: EMPTY
28213: LIST
28214: IN
28215: IFFALSE 28236
// points := [ 5 , 70 , 20 ] ;
28217: LD_ADDR_VAR 0 9
28221: PUSH
28222: LD_INT 5
28224: PUSH
28225: LD_INT 70
28227: PUSH
28228: LD_INT 20
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: LIST
28235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28236: LD_VAR 0 6
28240: PPUSH
28241: CALL_OW 264
28245: PUSH
28246: LD_INT 10
28248: PUSH
28249: EMPTY
28250: LIST
28251: IN
28252: IFFALSE 28273
// points := [ 35 , 110 , 70 ] ;
28254: LD_ADDR_VAR 0 9
28258: PUSH
28259: LD_INT 35
28261: PUSH
28262: LD_INT 110
28264: PUSH
28265: LD_INT 70
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28273: LD_VAR 0 6
28277: PPUSH
28278: CALL_OW 265
28282: PUSH
28283: LD_INT 25
28285: EQUAL
28286: IFFALSE 28307
// points := [ 80 , 65 , 100 ] ;
28288: LD_ADDR_VAR 0 9
28292: PUSH
28293: LD_INT 80
28295: PUSH
28296: LD_INT 65
28298: PUSH
28299: LD_INT 100
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28307: LD_VAR 0 6
28311: PPUSH
28312: CALL_OW 263
28316: PUSH
28317: LD_INT 1
28319: EQUAL
28320: IFFALSE 28355
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28322: LD_ADDR_VAR 0 10
28326: PUSH
28327: LD_VAR 0 10
28331: PUSH
28332: LD_VAR 0 6
28336: PPUSH
28337: CALL_OW 311
28341: PPUSH
28342: LD_INT 3
28344: PPUSH
28345: CALL_OW 259
28349: PUSH
28350: LD_INT 4
28352: MUL
28353: MUL
28354: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28355: LD_VAR 0 6
28359: PPUSH
28360: CALL_OW 263
28364: PUSH
28365: LD_INT 2
28367: EQUAL
28368: IFFALSE 28419
// begin j := IsControledBy ( i ) ;
28370: LD_ADDR_VAR 0 7
28374: PUSH
28375: LD_VAR 0 6
28379: PPUSH
28380: CALL_OW 312
28384: ST_TO_ADDR
// if j then
28385: LD_VAR 0 7
28389: IFFALSE 28419
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28391: LD_ADDR_VAR 0 10
28395: PUSH
28396: LD_VAR 0 10
28400: PUSH
28401: LD_VAR 0 7
28405: PPUSH
28406: LD_INT 3
28408: PPUSH
28409: CALL_OW 259
28413: PUSH
28414: LD_INT 3
28416: MUL
28417: MUL
28418: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28419: LD_VAR 0 6
28423: PPUSH
28424: CALL_OW 264
28428: PUSH
28429: LD_INT 5
28431: PUSH
28432: LD_INT 6
28434: PUSH
28435: LD_INT 46
28437: PUSH
28438: LD_INT 44
28440: PUSH
28441: LD_INT 47
28443: PUSH
28444: LD_INT 45
28446: PUSH
28447: LD_INT 28
28449: PUSH
28450: LD_INT 7
28452: PUSH
28453: LD_INT 27
28455: PUSH
28456: LD_INT 29
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: IN
28471: PUSH
28472: LD_VAR 0 1
28476: PPUSH
28477: LD_INT 52
28479: PPUSH
28480: CALL_OW 321
28484: PUSH
28485: LD_INT 2
28487: EQUAL
28488: AND
28489: IFFALSE 28506
// bpoints := bpoints * 1.2 ;
28491: LD_ADDR_VAR 0 10
28495: PUSH
28496: LD_VAR 0 10
28500: PUSH
28501: LD_REAL  1.20000000000000E+0000
28504: MUL
28505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28506: LD_VAR 0 6
28510: PPUSH
28511: CALL_OW 264
28515: PUSH
28516: LD_INT 6
28518: PUSH
28519: LD_INT 46
28521: PUSH
28522: LD_INT 47
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: IN
28530: IFFALSE 28547
// bpoints := bpoints * 1.2 ;
28532: LD_ADDR_VAR 0 10
28536: PUSH
28537: LD_VAR 0 10
28541: PUSH
28542: LD_REAL  1.20000000000000E+0000
28545: MUL
28546: ST_TO_ADDR
// end ; unit_building :
28547: GO 28561
28549: LD_INT 3
28551: DOUBLE
28552: EQUAL
28553: IFTRUE 28557
28555: GO 28560
28557: POP
// ; end ;
28558: GO 28561
28560: POP
// for j = 1 to 3 do
28561: LD_ADDR_VAR 0 7
28565: PUSH
28566: DOUBLE
28567: LD_INT 1
28569: DEC
28570: ST_TO_ADDR
28571: LD_INT 3
28573: PUSH
28574: FOR_TO
28575: IFFALSE 28628
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28577: LD_ADDR_VAR 0 5
28581: PUSH
28582: LD_VAR 0 5
28586: PPUSH
28587: LD_VAR 0 7
28591: PPUSH
28592: LD_VAR 0 5
28596: PUSH
28597: LD_VAR 0 7
28601: ARRAY
28602: PUSH
28603: LD_VAR 0 9
28607: PUSH
28608: LD_VAR 0 7
28612: ARRAY
28613: PUSH
28614: LD_VAR 0 10
28618: MUL
28619: PLUS
28620: PPUSH
28621: CALL_OW 1
28625: ST_TO_ADDR
28626: GO 28574
28628: POP
28629: POP
// end ;
28630: GO 27113
28632: POP
28633: POP
// result := Replace ( result , 4 , tmp ) ;
28634: LD_ADDR_VAR 0 5
28638: PUSH
28639: LD_VAR 0 5
28643: PPUSH
28644: LD_INT 4
28646: PPUSH
28647: LD_VAR 0 8
28651: PPUSH
28652: CALL_OW 1
28656: ST_TO_ADDR
// end ;
28657: LD_VAR 0 5
28661: RET
// export function DangerAtRange ( unit , range ) ; begin
28662: LD_INT 0
28664: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28665: LD_ADDR_VAR 0 3
28669: PUSH
28670: LD_VAR 0 1
28674: PPUSH
28675: CALL_OW 255
28679: PPUSH
28680: LD_VAR 0 1
28684: PPUSH
28685: CALL_OW 250
28689: PPUSH
28690: LD_VAR 0 1
28694: PPUSH
28695: CALL_OW 251
28699: PPUSH
28700: LD_VAR 0 2
28704: PPUSH
28705: CALL 26965 0 4
28709: ST_TO_ADDR
// end ;
28710: LD_VAR 0 3
28714: RET
// export function DangerInArea ( side , area ) ; begin
28715: LD_INT 0
28717: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28718: LD_ADDR_VAR 0 3
28722: PUSH
28723: LD_VAR 0 2
28727: PPUSH
28728: LD_INT 81
28730: PUSH
28731: LD_VAR 0 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PPUSH
28740: CALL_OW 70
28744: ST_TO_ADDR
// end ;
28745: LD_VAR 0 3
28749: RET
// export function IsExtension ( b ) ; begin
28750: LD_INT 0
28752: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28753: LD_ADDR_VAR 0 2
28757: PUSH
28758: LD_VAR 0 1
28762: PUSH
28763: LD_INT 23
28765: PUSH
28766: LD_INT 20
28768: PUSH
28769: LD_INT 22
28771: PUSH
28772: LD_INT 17
28774: PUSH
28775: LD_INT 24
28777: PUSH
28778: LD_INT 21
28780: PUSH
28781: LD_INT 19
28783: PUSH
28784: LD_INT 16
28786: PUSH
28787: LD_INT 25
28789: PUSH
28790: LD_INT 18
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: IN
28805: ST_TO_ADDR
// end ;
28806: LD_VAR 0 2
28810: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28811: LD_INT 0
28813: PPUSH
28814: PPUSH
28815: PPUSH
// result := [ ] ;
28816: LD_ADDR_VAR 0 3
28820: PUSH
28821: EMPTY
28822: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28823: LD_ADDR_VAR 0 4
28827: PUSH
28828: LD_VAR 0 2
28832: PPUSH
28833: LD_INT 21
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PPUSH
28843: CALL_OW 70
28847: ST_TO_ADDR
// if not tmp then
28848: LD_VAR 0 4
28852: NOT
28853: IFFALSE 28857
// exit ;
28855: GO 28915
// for i in tmp do
28857: LD_ADDR_VAR 0 5
28861: PUSH
28862: LD_VAR 0 4
28866: PUSH
28867: FOR_IN
28868: IFFALSE 28903
// if GetBase ( i ) <> base then
28870: LD_VAR 0 5
28874: PPUSH
28875: CALL_OW 274
28879: PUSH
28880: LD_VAR 0 1
28884: NONEQUAL
28885: IFFALSE 28901
// ComLinkToBase ( base , i ) ;
28887: LD_VAR 0 1
28891: PPUSH
28892: LD_VAR 0 5
28896: PPUSH
28897: CALL_OW 169
28901: GO 28867
28903: POP
28904: POP
// result := tmp ;
28905: LD_ADDR_VAR 0 3
28909: PUSH
28910: LD_VAR 0 4
28914: ST_TO_ADDR
// end ;
28915: LD_VAR 0 3
28919: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28920: LD_INT 0
28922: PPUSH
28923: PPUSH
// if BuildingStatus ( b ) = bs_build then
28924: LD_VAR 0 2
28928: PPUSH
28929: CALL_OW 461
28933: PUSH
28934: LD_INT 1
28936: EQUAL
28937: IFFALSE 28997
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28939: LD_VAR 0 1
28943: PPUSH
28944: LD_STRING h
28946: PUSH
28947: LD_VAR 0 2
28951: PPUSH
28952: CALL_OW 250
28956: PUSH
28957: LD_VAR 0 2
28961: PPUSH
28962: CALL_OW 251
28966: PUSH
28967: LD_VAR 0 2
28971: PUSH
28972: LD_INT 0
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: PPUSH
28993: CALL_OW 446
// end ;
28997: LD_VAR 0 3
29001: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29002: LD_INT 0
29004: PPUSH
29005: PPUSH
29006: PPUSH
29007: PPUSH
29008: PPUSH
29009: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29010: LD_VAR 0 1
29014: NOT
29015: PUSH
29016: LD_VAR 0 1
29020: PPUSH
29021: CALL_OW 263
29025: PUSH
29026: LD_INT 2
29028: EQUAL
29029: NOT
29030: OR
29031: IFFALSE 29035
// exit ;
29033: GO 29351
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29035: LD_ADDR_VAR 0 6
29039: PUSH
29040: LD_INT 22
29042: PUSH
29043: LD_VAR 0 1
29047: PPUSH
29048: CALL_OW 255
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: PUSH
29060: LD_INT 30
29062: PUSH
29063: LD_INT 36
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 34
29072: PUSH
29073: LD_INT 31
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PPUSH
29089: CALL_OW 69
29093: ST_TO_ADDR
// if not tmp then
29094: LD_VAR 0 6
29098: NOT
29099: IFFALSE 29103
// exit ;
29101: GO 29351
// result := [ ] ;
29103: LD_ADDR_VAR 0 2
29107: PUSH
29108: EMPTY
29109: ST_TO_ADDR
// for i in tmp do
29110: LD_ADDR_VAR 0 3
29114: PUSH
29115: LD_VAR 0 6
29119: PUSH
29120: FOR_IN
29121: IFFALSE 29192
// begin t := UnitsInside ( i ) ;
29123: LD_ADDR_VAR 0 4
29127: PUSH
29128: LD_VAR 0 3
29132: PPUSH
29133: CALL_OW 313
29137: ST_TO_ADDR
// if t then
29138: LD_VAR 0 4
29142: IFFALSE 29190
// for j in t do
29144: LD_ADDR_VAR 0 7
29148: PUSH
29149: LD_VAR 0 4
29153: PUSH
29154: FOR_IN
29155: IFFALSE 29188
// result := Insert ( result , result + 1 , j ) ;
29157: LD_ADDR_VAR 0 2
29161: PUSH
29162: LD_VAR 0 2
29166: PPUSH
29167: LD_VAR 0 2
29171: PUSH
29172: LD_INT 1
29174: PLUS
29175: PPUSH
29176: LD_VAR 0 7
29180: PPUSH
29181: CALL_OW 2
29185: ST_TO_ADDR
29186: GO 29154
29188: POP
29189: POP
// end ;
29190: GO 29120
29192: POP
29193: POP
// if not result then
29194: LD_VAR 0 2
29198: NOT
29199: IFFALSE 29203
// exit ;
29201: GO 29351
// mech := result [ 1 ] ;
29203: LD_ADDR_VAR 0 5
29207: PUSH
29208: LD_VAR 0 2
29212: PUSH
29213: LD_INT 1
29215: ARRAY
29216: ST_TO_ADDR
// if result > 1 then
29217: LD_VAR 0 2
29221: PUSH
29222: LD_INT 1
29224: GREATER
29225: IFFALSE 29337
// for i = 2 to result do
29227: LD_ADDR_VAR 0 3
29231: PUSH
29232: DOUBLE
29233: LD_INT 2
29235: DEC
29236: ST_TO_ADDR
29237: LD_VAR 0 2
29241: PUSH
29242: FOR_TO
29243: IFFALSE 29335
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29245: LD_ADDR_VAR 0 4
29249: PUSH
29250: LD_VAR 0 2
29254: PUSH
29255: LD_VAR 0 3
29259: ARRAY
29260: PPUSH
29261: LD_INT 3
29263: PPUSH
29264: CALL_OW 259
29268: PUSH
29269: LD_VAR 0 2
29273: PUSH
29274: LD_VAR 0 3
29278: ARRAY
29279: PPUSH
29280: CALL_OW 432
29284: MINUS
29285: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29286: LD_VAR 0 4
29290: PUSH
29291: LD_VAR 0 5
29295: PPUSH
29296: LD_INT 3
29298: PPUSH
29299: CALL_OW 259
29303: PUSH
29304: LD_VAR 0 5
29308: PPUSH
29309: CALL_OW 432
29313: MINUS
29314: GREATEREQUAL
29315: IFFALSE 29333
// mech := result [ i ] ;
29317: LD_ADDR_VAR 0 5
29321: PUSH
29322: LD_VAR 0 2
29326: PUSH
29327: LD_VAR 0 3
29331: ARRAY
29332: ST_TO_ADDR
// end ;
29333: GO 29242
29335: POP
29336: POP
// ComLinkTo ( vehicle , mech ) ;
29337: LD_VAR 0 1
29341: PPUSH
29342: LD_VAR 0 5
29346: PPUSH
29347: CALL_OW 135
// end ;
29351: LD_VAR 0 2
29355: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29356: LD_INT 0
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
// result := [ ] ;
29371: LD_ADDR_VAR 0 7
29375: PUSH
29376: EMPTY
29377: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29378: LD_VAR 0 1
29382: PPUSH
29383: CALL_OW 266
29387: PUSH
29388: LD_INT 0
29390: PUSH
29391: LD_INT 1
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: IN
29398: NOT
29399: IFFALSE 29403
// exit ;
29401: GO 31034
// if name then
29403: LD_VAR 0 3
29407: IFFALSE 29423
// SetBName ( base_dep , name ) ;
29409: LD_VAR 0 1
29413: PPUSH
29414: LD_VAR 0 3
29418: PPUSH
29419: CALL_OW 500
// base := GetBase ( base_dep ) ;
29423: LD_ADDR_VAR 0 15
29427: PUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 274
29437: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29438: LD_ADDR_VAR 0 16
29442: PUSH
29443: LD_VAR 0 1
29447: PPUSH
29448: CALL_OW 255
29452: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29453: LD_ADDR_VAR 0 17
29457: PUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 248
29467: ST_TO_ADDR
// if sources then
29468: LD_VAR 0 5
29472: IFFALSE 29519
// for i = 1 to 3 do
29474: LD_ADDR_VAR 0 8
29478: PUSH
29479: DOUBLE
29480: LD_INT 1
29482: DEC
29483: ST_TO_ADDR
29484: LD_INT 3
29486: PUSH
29487: FOR_TO
29488: IFFALSE 29517
// AddResourceType ( base , i , sources [ i ] ) ;
29490: LD_VAR 0 15
29494: PPUSH
29495: LD_VAR 0 8
29499: PPUSH
29500: LD_VAR 0 5
29504: PUSH
29505: LD_VAR 0 8
29509: ARRAY
29510: PPUSH
29511: CALL_OW 276
29515: GO 29487
29517: POP
29518: POP
// buildings := GetBaseBuildings ( base , area ) ;
29519: LD_ADDR_VAR 0 18
29523: PUSH
29524: LD_VAR 0 15
29528: PPUSH
29529: LD_VAR 0 2
29533: PPUSH
29534: CALL 28811 0 2
29538: ST_TO_ADDR
// InitHc ;
29539: CALL_OW 19
// InitUc ;
29543: CALL_OW 18
// uc_side := side ;
29547: LD_ADDR_OWVAR 20
29551: PUSH
29552: LD_VAR 0 16
29556: ST_TO_ADDR
// uc_nation := nation ;
29557: LD_ADDR_OWVAR 21
29561: PUSH
29562: LD_VAR 0 17
29566: ST_TO_ADDR
// if buildings then
29567: LD_VAR 0 18
29571: IFFALSE 30893
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29573: LD_ADDR_VAR 0 19
29577: PUSH
29578: LD_VAR 0 18
29582: PPUSH
29583: LD_INT 2
29585: PUSH
29586: LD_INT 30
29588: PUSH
29589: LD_INT 29
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 30
29598: PUSH
29599: LD_INT 30
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 72
29615: ST_TO_ADDR
// if tmp then
29616: LD_VAR 0 19
29620: IFFALSE 29668
// for i in tmp do
29622: LD_ADDR_VAR 0 8
29626: PUSH
29627: LD_VAR 0 19
29631: PUSH
29632: FOR_IN
29633: IFFALSE 29666
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29635: LD_VAR 0 8
29639: PPUSH
29640: CALL_OW 250
29644: PPUSH
29645: LD_VAR 0 8
29649: PPUSH
29650: CALL_OW 251
29654: PPUSH
29655: LD_VAR 0 16
29659: PPUSH
29660: CALL_OW 441
29664: GO 29632
29666: POP
29667: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29668: LD_VAR 0 18
29672: PPUSH
29673: LD_INT 2
29675: PUSH
29676: LD_INT 30
29678: PUSH
29679: LD_INT 32
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 30
29688: PUSH
29689: LD_INT 33
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: PPUSH
29701: CALL_OW 72
29705: IFFALSE 29793
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29707: LD_ADDR_VAR 0 8
29711: PUSH
29712: LD_VAR 0 18
29716: PPUSH
29717: LD_INT 2
29719: PUSH
29720: LD_INT 30
29722: PUSH
29723: LD_INT 32
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 30
29732: PUSH
29733: LD_INT 33
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: PPUSH
29745: CALL_OW 72
29749: PUSH
29750: FOR_IN
29751: IFFALSE 29791
// begin if not GetBWeapon ( i ) then
29753: LD_VAR 0 8
29757: PPUSH
29758: CALL_OW 269
29762: NOT
29763: IFFALSE 29789
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29765: LD_VAR 0 8
29769: PPUSH
29770: LD_VAR 0 8
29774: PPUSH
29775: LD_VAR 0 2
29779: PPUSH
29780: CALL 31039 0 2
29784: PPUSH
29785: CALL_OW 431
// end ;
29789: GO 29750
29791: POP
29792: POP
// end ; for i = 1 to personel do
29793: LD_ADDR_VAR 0 8
29797: PUSH
29798: DOUBLE
29799: LD_INT 1
29801: DEC
29802: ST_TO_ADDR
29803: LD_VAR 0 6
29807: PUSH
29808: FOR_TO
29809: IFFALSE 30873
// begin if i > 4 then
29811: LD_VAR 0 8
29815: PUSH
29816: LD_INT 4
29818: GREATER
29819: IFFALSE 29823
// break ;
29821: GO 30873
// case i of 1 :
29823: LD_VAR 0 8
29827: PUSH
29828: LD_INT 1
29830: DOUBLE
29831: EQUAL
29832: IFTRUE 29836
29834: GO 29916
29836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29837: LD_ADDR_VAR 0 12
29841: PUSH
29842: LD_VAR 0 18
29846: PPUSH
29847: LD_INT 22
29849: PUSH
29850: LD_VAR 0 16
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 58
29861: PUSH
29862: EMPTY
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: LD_INT 30
29870: PUSH
29871: LD_INT 32
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 30
29880: PUSH
29881: LD_INT 4
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 30
29890: PUSH
29891: LD_INT 5
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: PPUSH
29909: CALL_OW 72
29913: ST_TO_ADDR
29914: GO 30138
29916: LD_INT 2
29918: DOUBLE
29919: EQUAL
29920: IFTRUE 29924
29922: GO 29986
29924: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29925: LD_ADDR_VAR 0 12
29929: PUSH
29930: LD_VAR 0 18
29934: PPUSH
29935: LD_INT 22
29937: PUSH
29938: LD_VAR 0 16
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 2
29949: PUSH
29950: LD_INT 30
29952: PUSH
29953: LD_INT 0
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 30
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PPUSH
29979: CALL_OW 72
29983: ST_TO_ADDR
29984: GO 30138
29986: LD_INT 3
29988: DOUBLE
29989: EQUAL
29990: IFTRUE 29994
29992: GO 30056
29994: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29995: LD_ADDR_VAR 0 12
29999: PUSH
30000: LD_VAR 0 18
30004: PPUSH
30005: LD_INT 22
30007: PUSH
30008: LD_VAR 0 16
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 2
30019: PUSH
30020: LD_INT 30
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 30
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PPUSH
30049: CALL_OW 72
30053: ST_TO_ADDR
30054: GO 30138
30056: LD_INT 4
30058: DOUBLE
30059: EQUAL
30060: IFTRUE 30064
30062: GO 30137
30064: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30065: LD_ADDR_VAR 0 12
30069: PUSH
30070: LD_VAR 0 18
30074: PPUSH
30075: LD_INT 22
30077: PUSH
30078: LD_VAR 0 16
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 2
30089: PUSH
30090: LD_INT 30
30092: PUSH
30093: LD_INT 6
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 30
30102: PUSH
30103: LD_INT 7
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 30
30112: PUSH
30113: LD_INT 8
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PPUSH
30130: CALL_OW 72
30134: ST_TO_ADDR
30135: GO 30138
30137: POP
// if i = 1 then
30138: LD_VAR 0 8
30142: PUSH
30143: LD_INT 1
30145: EQUAL
30146: IFFALSE 30257
// begin tmp := [ ] ;
30148: LD_ADDR_VAR 0 19
30152: PUSH
30153: EMPTY
30154: ST_TO_ADDR
// for j in f do
30155: LD_ADDR_VAR 0 9
30159: PUSH
30160: LD_VAR 0 12
30164: PUSH
30165: FOR_IN
30166: IFFALSE 30239
// if GetBType ( j ) = b_bunker then
30168: LD_VAR 0 9
30172: PPUSH
30173: CALL_OW 266
30177: PUSH
30178: LD_INT 32
30180: EQUAL
30181: IFFALSE 30208
// tmp := Insert ( tmp , 1 , j ) else
30183: LD_ADDR_VAR 0 19
30187: PUSH
30188: LD_VAR 0 19
30192: PPUSH
30193: LD_INT 1
30195: PPUSH
30196: LD_VAR 0 9
30200: PPUSH
30201: CALL_OW 2
30205: ST_TO_ADDR
30206: GO 30237
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30208: LD_ADDR_VAR 0 19
30212: PUSH
30213: LD_VAR 0 19
30217: PPUSH
30218: LD_VAR 0 19
30222: PUSH
30223: LD_INT 1
30225: PLUS
30226: PPUSH
30227: LD_VAR 0 9
30231: PPUSH
30232: CALL_OW 2
30236: ST_TO_ADDR
30237: GO 30165
30239: POP
30240: POP
// if tmp then
30241: LD_VAR 0 19
30245: IFFALSE 30257
// f := tmp ;
30247: LD_ADDR_VAR 0 12
30251: PUSH
30252: LD_VAR 0 19
30256: ST_TO_ADDR
// end ; x := personel [ i ] ;
30257: LD_ADDR_VAR 0 13
30261: PUSH
30262: LD_VAR 0 6
30266: PUSH
30267: LD_VAR 0 8
30271: ARRAY
30272: ST_TO_ADDR
// if x = - 1 then
30273: LD_VAR 0 13
30277: PUSH
30278: LD_INT 1
30280: NEG
30281: EQUAL
30282: IFFALSE 30491
// begin for j in f do
30284: LD_ADDR_VAR 0 9
30288: PUSH
30289: LD_VAR 0 12
30293: PUSH
30294: FOR_IN
30295: IFFALSE 30487
// repeat InitHc ;
30297: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30301: LD_VAR 0 9
30305: PPUSH
30306: CALL_OW 266
30310: PUSH
30311: LD_INT 5
30313: EQUAL
30314: IFFALSE 30384
// begin if UnitsInside ( j ) < 3 then
30316: LD_VAR 0 9
30320: PPUSH
30321: CALL_OW 313
30325: PUSH
30326: LD_INT 3
30328: LESS
30329: IFFALSE 30365
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30331: LD_INT 0
30333: PPUSH
30334: LD_INT 5
30336: PUSH
30337: LD_INT 8
30339: PUSH
30340: LD_INT 9
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: PUSH
30348: LD_VAR 0 17
30352: ARRAY
30353: PPUSH
30354: LD_VAR 0 4
30358: PPUSH
30359: CALL_OW 380
30363: GO 30382
// PrepareHuman ( false , i , skill ) ;
30365: LD_INT 0
30367: PPUSH
30368: LD_VAR 0 8
30372: PPUSH
30373: LD_VAR 0 4
30377: PPUSH
30378: CALL_OW 380
// end else
30382: GO 30401
// PrepareHuman ( false , i , skill ) ;
30384: LD_INT 0
30386: PPUSH
30387: LD_VAR 0 8
30391: PPUSH
30392: LD_VAR 0 4
30396: PPUSH
30397: CALL_OW 380
// un := CreateHuman ;
30401: LD_ADDR_VAR 0 14
30405: PUSH
30406: CALL_OW 44
30410: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30411: LD_ADDR_VAR 0 7
30415: PUSH
30416: LD_VAR 0 7
30420: PPUSH
30421: LD_INT 1
30423: PPUSH
30424: LD_VAR 0 14
30428: PPUSH
30429: CALL_OW 2
30433: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30434: LD_VAR 0 14
30438: PPUSH
30439: LD_VAR 0 9
30443: PPUSH
30444: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30448: LD_VAR 0 9
30452: PPUSH
30453: CALL_OW 313
30457: PUSH
30458: LD_INT 6
30460: EQUAL
30461: PUSH
30462: LD_VAR 0 9
30466: PPUSH
30467: CALL_OW 266
30471: PUSH
30472: LD_INT 32
30474: PUSH
30475: LD_INT 31
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: IN
30482: OR
30483: IFFALSE 30297
30485: GO 30294
30487: POP
30488: POP
// end else
30489: GO 30871
// for j = 1 to x do
30491: LD_ADDR_VAR 0 9
30495: PUSH
30496: DOUBLE
30497: LD_INT 1
30499: DEC
30500: ST_TO_ADDR
30501: LD_VAR 0 13
30505: PUSH
30506: FOR_TO
30507: IFFALSE 30869
// begin InitHc ;
30509: CALL_OW 19
// if not f then
30513: LD_VAR 0 12
30517: NOT
30518: IFFALSE 30607
// begin PrepareHuman ( false , i , skill ) ;
30520: LD_INT 0
30522: PPUSH
30523: LD_VAR 0 8
30527: PPUSH
30528: LD_VAR 0 4
30532: PPUSH
30533: CALL_OW 380
// un := CreateHuman ;
30537: LD_ADDR_VAR 0 14
30541: PUSH
30542: CALL_OW 44
30546: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30547: LD_ADDR_VAR 0 7
30551: PUSH
30552: LD_VAR 0 7
30556: PPUSH
30557: LD_INT 1
30559: PPUSH
30560: LD_VAR 0 14
30564: PPUSH
30565: CALL_OW 2
30569: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30570: LD_VAR 0 14
30574: PPUSH
30575: LD_VAR 0 1
30579: PPUSH
30580: CALL_OW 250
30584: PPUSH
30585: LD_VAR 0 1
30589: PPUSH
30590: CALL_OW 251
30594: PPUSH
30595: LD_INT 10
30597: PPUSH
30598: LD_INT 0
30600: PPUSH
30601: CALL_OW 50
// continue ;
30605: GO 30506
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30607: LD_VAR 0 12
30611: PUSH
30612: LD_INT 1
30614: ARRAY
30615: PPUSH
30616: CALL_OW 313
30620: PUSH
30621: LD_VAR 0 12
30625: PUSH
30626: LD_INT 1
30628: ARRAY
30629: PPUSH
30630: CALL_OW 266
30634: PUSH
30635: LD_INT 32
30637: PUSH
30638: LD_INT 31
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: IN
30645: AND
30646: PUSH
30647: LD_VAR 0 12
30651: PUSH
30652: LD_INT 1
30654: ARRAY
30655: PPUSH
30656: CALL_OW 313
30660: PUSH
30661: LD_INT 6
30663: EQUAL
30664: OR
30665: IFFALSE 30685
// f := Delete ( f , 1 ) ;
30667: LD_ADDR_VAR 0 12
30671: PUSH
30672: LD_VAR 0 12
30676: PPUSH
30677: LD_INT 1
30679: PPUSH
30680: CALL_OW 3
30684: ST_TO_ADDR
// if not f then
30685: LD_VAR 0 12
30689: NOT
30690: IFFALSE 30708
// begin x := x + 2 ;
30692: LD_ADDR_VAR 0 13
30696: PUSH
30697: LD_VAR 0 13
30701: PUSH
30702: LD_INT 2
30704: PLUS
30705: ST_TO_ADDR
// continue ;
30706: GO 30506
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30708: LD_VAR 0 12
30712: PUSH
30713: LD_INT 1
30715: ARRAY
30716: PPUSH
30717: CALL_OW 266
30721: PUSH
30722: LD_INT 5
30724: EQUAL
30725: IFFALSE 30799
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30727: LD_VAR 0 12
30731: PUSH
30732: LD_INT 1
30734: ARRAY
30735: PPUSH
30736: CALL_OW 313
30740: PUSH
30741: LD_INT 3
30743: LESS
30744: IFFALSE 30780
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30746: LD_INT 0
30748: PPUSH
30749: LD_INT 5
30751: PUSH
30752: LD_INT 8
30754: PUSH
30755: LD_INT 9
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: LIST
30762: PUSH
30763: LD_VAR 0 17
30767: ARRAY
30768: PPUSH
30769: LD_VAR 0 4
30773: PPUSH
30774: CALL_OW 380
30778: GO 30797
// PrepareHuman ( false , i , skill ) ;
30780: LD_INT 0
30782: PPUSH
30783: LD_VAR 0 8
30787: PPUSH
30788: LD_VAR 0 4
30792: PPUSH
30793: CALL_OW 380
// end else
30797: GO 30816
// PrepareHuman ( false , i , skill ) ;
30799: LD_INT 0
30801: PPUSH
30802: LD_VAR 0 8
30806: PPUSH
30807: LD_VAR 0 4
30811: PPUSH
30812: CALL_OW 380
// un := CreateHuman ;
30816: LD_ADDR_VAR 0 14
30820: PUSH
30821: CALL_OW 44
30825: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30826: LD_ADDR_VAR 0 7
30830: PUSH
30831: LD_VAR 0 7
30835: PPUSH
30836: LD_INT 1
30838: PPUSH
30839: LD_VAR 0 14
30843: PPUSH
30844: CALL_OW 2
30848: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30849: LD_VAR 0 14
30853: PPUSH
30854: LD_VAR 0 12
30858: PUSH
30859: LD_INT 1
30861: ARRAY
30862: PPUSH
30863: CALL_OW 52
// end ;
30867: GO 30506
30869: POP
30870: POP
// end ;
30871: GO 29808
30873: POP
30874: POP
// result := result ^ buildings ;
30875: LD_ADDR_VAR 0 7
30879: PUSH
30880: LD_VAR 0 7
30884: PUSH
30885: LD_VAR 0 18
30889: ADD
30890: ST_TO_ADDR
// end else
30891: GO 31034
// begin for i = 1 to personel do
30893: LD_ADDR_VAR 0 8
30897: PUSH
30898: DOUBLE
30899: LD_INT 1
30901: DEC
30902: ST_TO_ADDR
30903: LD_VAR 0 6
30907: PUSH
30908: FOR_TO
30909: IFFALSE 31032
// begin if i > 4 then
30911: LD_VAR 0 8
30915: PUSH
30916: LD_INT 4
30918: GREATER
30919: IFFALSE 30923
// break ;
30921: GO 31032
// x := personel [ i ] ;
30923: LD_ADDR_VAR 0 13
30927: PUSH
30928: LD_VAR 0 6
30932: PUSH
30933: LD_VAR 0 8
30937: ARRAY
30938: ST_TO_ADDR
// if x = - 1 then
30939: LD_VAR 0 13
30943: PUSH
30944: LD_INT 1
30946: NEG
30947: EQUAL
30948: IFFALSE 30952
// continue ;
30950: GO 30908
// PrepareHuman ( false , i , skill ) ;
30952: LD_INT 0
30954: PPUSH
30955: LD_VAR 0 8
30959: PPUSH
30960: LD_VAR 0 4
30964: PPUSH
30965: CALL_OW 380
// un := CreateHuman ;
30969: LD_ADDR_VAR 0 14
30973: PUSH
30974: CALL_OW 44
30978: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30979: LD_VAR 0 14
30983: PPUSH
30984: LD_VAR 0 1
30988: PPUSH
30989: CALL_OW 250
30993: PPUSH
30994: LD_VAR 0 1
30998: PPUSH
30999: CALL_OW 251
31003: PPUSH
31004: LD_INT 10
31006: PPUSH
31007: LD_INT 0
31009: PPUSH
31010: CALL_OW 50
// result := result ^ un ;
31014: LD_ADDR_VAR 0 7
31018: PUSH
31019: LD_VAR 0 7
31023: PUSH
31024: LD_VAR 0 14
31028: ADD
31029: ST_TO_ADDR
// end ;
31030: GO 30908
31032: POP
31033: POP
// end ; end ;
31034: LD_VAR 0 7
31038: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31039: LD_INT 0
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
// result := false ;
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: LD_INT 0
31064: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31065: LD_VAR 0 1
31069: NOT
31070: PUSH
31071: LD_VAR 0 1
31075: PPUSH
31076: CALL_OW 266
31080: PUSH
31081: LD_INT 32
31083: PUSH
31084: LD_INT 33
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: IN
31091: NOT
31092: OR
31093: IFFALSE 31097
// exit ;
31095: GO 32233
// nat := GetNation ( tower ) ;
31097: LD_ADDR_VAR 0 12
31101: PUSH
31102: LD_VAR 0 1
31106: PPUSH
31107: CALL_OW 248
31111: ST_TO_ADDR
// side := GetSide ( tower ) ;
31112: LD_ADDR_VAR 0 16
31116: PUSH
31117: LD_VAR 0 1
31121: PPUSH
31122: CALL_OW 255
31126: ST_TO_ADDR
// x := GetX ( tower ) ;
31127: LD_ADDR_VAR 0 10
31131: PUSH
31132: LD_VAR 0 1
31136: PPUSH
31137: CALL_OW 250
31141: ST_TO_ADDR
// y := GetY ( tower ) ;
31142: LD_ADDR_VAR 0 11
31146: PUSH
31147: LD_VAR 0 1
31151: PPUSH
31152: CALL_OW 251
31156: ST_TO_ADDR
// if not x or not y then
31157: LD_VAR 0 10
31161: NOT
31162: PUSH
31163: LD_VAR 0 11
31167: NOT
31168: OR
31169: IFFALSE 31173
// exit ;
31171: GO 32233
// weapon := 0 ;
31173: LD_ADDR_VAR 0 18
31177: PUSH
31178: LD_INT 0
31180: ST_TO_ADDR
// fac_list := [ ] ;
31181: LD_ADDR_VAR 0 17
31185: PUSH
31186: EMPTY
31187: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31188: LD_ADDR_VAR 0 6
31192: PUSH
31193: LD_VAR 0 1
31197: PPUSH
31198: CALL_OW 274
31202: PPUSH
31203: LD_VAR 0 2
31207: PPUSH
31208: CALL 28811 0 2
31212: PPUSH
31213: LD_INT 30
31215: PUSH
31216: LD_INT 3
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PPUSH
31223: CALL_OW 72
31227: ST_TO_ADDR
// if not factories then
31228: LD_VAR 0 6
31232: NOT
31233: IFFALSE 31237
// exit ;
31235: GO 32233
// for i in factories do
31237: LD_ADDR_VAR 0 8
31241: PUSH
31242: LD_VAR 0 6
31246: PUSH
31247: FOR_IN
31248: IFFALSE 31273
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31250: LD_ADDR_VAR 0 17
31254: PUSH
31255: LD_VAR 0 17
31259: PUSH
31260: LD_VAR 0 8
31264: PPUSH
31265: CALL_OW 478
31269: UNION
31270: ST_TO_ADDR
31271: GO 31247
31273: POP
31274: POP
// if not fac_list then
31275: LD_VAR 0 17
31279: NOT
31280: IFFALSE 31284
// exit ;
31282: GO 32233
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31284: LD_ADDR_VAR 0 5
31288: PUSH
31289: LD_INT 4
31291: PUSH
31292: LD_INT 5
31294: PUSH
31295: LD_INT 9
31297: PUSH
31298: LD_INT 10
31300: PUSH
31301: LD_INT 6
31303: PUSH
31304: LD_INT 7
31306: PUSH
31307: LD_INT 11
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 27
31321: PUSH
31322: LD_INT 28
31324: PUSH
31325: LD_INT 26
31327: PUSH
31328: LD_INT 30
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 43
31339: PUSH
31340: LD_INT 44
31342: PUSH
31343: LD_INT 46
31345: PUSH
31346: LD_INT 45
31348: PUSH
31349: LD_INT 47
31351: PUSH
31352: LD_INT 49
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: PUSH
31368: LD_VAR 0 12
31372: ARRAY
31373: ST_TO_ADDR
// for i in list do
31374: LD_ADDR_VAR 0 8
31378: PUSH
31379: LD_VAR 0 5
31383: PUSH
31384: FOR_IN
31385: IFFALSE 31418
// if not i in fac_list then
31387: LD_VAR 0 8
31391: PUSH
31392: LD_VAR 0 17
31396: IN
31397: NOT
31398: IFFALSE 31416
// list := list diff i ;
31400: LD_ADDR_VAR 0 5
31404: PUSH
31405: LD_VAR 0 5
31409: PUSH
31410: LD_VAR 0 8
31414: DIFF
31415: ST_TO_ADDR
31416: GO 31384
31418: POP
31419: POP
// if not list then
31420: LD_VAR 0 5
31424: NOT
31425: IFFALSE 31429
// exit ;
31427: GO 32233
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31429: LD_VAR 0 12
31433: PUSH
31434: LD_INT 3
31436: EQUAL
31437: PUSH
31438: LD_INT 49
31440: PUSH
31441: LD_VAR 0 5
31445: IN
31446: AND
31447: PUSH
31448: LD_INT 31
31450: PPUSH
31451: LD_VAR 0 16
31455: PPUSH
31456: CALL_OW 321
31460: PUSH
31461: LD_INT 2
31463: EQUAL
31464: AND
31465: IFFALSE 31525
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31467: LD_INT 22
31469: PUSH
31470: LD_VAR 0 16
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 35
31481: PUSH
31482: LD_INT 49
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 91
31491: PUSH
31492: LD_VAR 0 1
31496: PUSH
31497: LD_INT 10
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: PPUSH
31510: CALL_OW 69
31514: NOT
31515: IFFALSE 31525
// weapon := ru_time_lapser ;
31517: LD_ADDR_VAR 0 18
31521: PUSH
31522: LD_INT 49
31524: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31525: LD_VAR 0 12
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: IN
31540: PUSH
31541: LD_INT 11
31543: PUSH
31544: LD_VAR 0 5
31548: IN
31549: PUSH
31550: LD_INT 30
31552: PUSH
31553: LD_VAR 0 5
31557: IN
31558: OR
31559: AND
31560: PUSH
31561: LD_INT 6
31563: PPUSH
31564: LD_VAR 0 16
31568: PPUSH
31569: CALL_OW 321
31573: PUSH
31574: LD_INT 2
31576: EQUAL
31577: AND
31578: IFFALSE 31743
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31580: LD_INT 22
31582: PUSH
31583: LD_VAR 0 16
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 2
31594: PUSH
31595: LD_INT 35
31597: PUSH
31598: LD_INT 11
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 35
31607: PUSH
31608: LD_INT 30
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 91
31622: PUSH
31623: LD_VAR 0 1
31627: PUSH
31628: LD_INT 18
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: PPUSH
31641: CALL_OW 69
31645: NOT
31646: PUSH
31647: LD_INT 22
31649: PUSH
31650: LD_VAR 0 16
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 30
31664: PUSH
31665: LD_INT 32
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 30
31674: PUSH
31675: LD_INT 33
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 91
31689: PUSH
31690: LD_VAR 0 1
31694: PUSH
31695: LD_INT 12
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: PUSH
31708: EMPTY
31709: LIST
31710: PPUSH
31711: CALL_OW 69
31715: PUSH
31716: LD_INT 2
31718: GREATER
31719: AND
31720: IFFALSE 31743
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31722: LD_ADDR_VAR 0 18
31726: PUSH
31727: LD_INT 11
31729: PUSH
31730: LD_INT 30
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_VAR 0 12
31741: ARRAY
31742: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31743: LD_VAR 0 18
31747: NOT
31748: PUSH
31749: LD_INT 40
31751: PPUSH
31752: LD_VAR 0 16
31756: PPUSH
31757: CALL_OW 321
31761: PUSH
31762: LD_INT 2
31764: EQUAL
31765: AND
31766: PUSH
31767: LD_INT 7
31769: PUSH
31770: LD_VAR 0 5
31774: IN
31775: PUSH
31776: LD_INT 28
31778: PUSH
31779: LD_VAR 0 5
31783: IN
31784: OR
31785: PUSH
31786: LD_INT 45
31788: PUSH
31789: LD_VAR 0 5
31793: IN
31794: OR
31795: AND
31796: IFFALSE 32050
// begin hex := GetHexInfo ( x , y ) ;
31798: LD_ADDR_VAR 0 4
31802: PUSH
31803: LD_VAR 0 10
31807: PPUSH
31808: LD_VAR 0 11
31812: PPUSH
31813: CALL_OW 546
31817: ST_TO_ADDR
// if hex [ 1 ] then
31818: LD_VAR 0 4
31822: PUSH
31823: LD_INT 1
31825: ARRAY
31826: IFFALSE 31830
// exit ;
31828: GO 32233
// height := hex [ 2 ] ;
31830: LD_ADDR_VAR 0 15
31834: PUSH
31835: LD_VAR 0 4
31839: PUSH
31840: LD_INT 2
31842: ARRAY
31843: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31844: LD_ADDR_VAR 0 14
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: LD_INT 3
31857: PUSH
31858: LD_INT 5
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: ST_TO_ADDR
// for i in tmp do
31867: LD_ADDR_VAR 0 8
31871: PUSH
31872: LD_VAR 0 14
31876: PUSH
31877: FOR_IN
31878: IFFALSE 32048
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31880: LD_ADDR_VAR 0 9
31884: PUSH
31885: LD_VAR 0 10
31889: PPUSH
31890: LD_VAR 0 8
31894: PPUSH
31895: LD_INT 5
31897: PPUSH
31898: CALL_OW 272
31902: PUSH
31903: LD_VAR 0 11
31907: PPUSH
31908: LD_VAR 0 8
31912: PPUSH
31913: LD_INT 5
31915: PPUSH
31916: CALL_OW 273
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31925: LD_VAR 0 9
31929: PUSH
31930: LD_INT 1
31932: ARRAY
31933: PPUSH
31934: LD_VAR 0 9
31938: PUSH
31939: LD_INT 2
31941: ARRAY
31942: PPUSH
31943: CALL_OW 488
31947: IFFALSE 32046
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31949: LD_ADDR_VAR 0 4
31953: PUSH
31954: LD_VAR 0 9
31958: PUSH
31959: LD_INT 1
31961: ARRAY
31962: PPUSH
31963: LD_VAR 0 9
31967: PUSH
31968: LD_INT 2
31970: ARRAY
31971: PPUSH
31972: CALL_OW 546
31976: ST_TO_ADDR
// if hex [ 1 ] then
31977: LD_VAR 0 4
31981: PUSH
31982: LD_INT 1
31984: ARRAY
31985: IFFALSE 31989
// continue ;
31987: GO 31877
// h := hex [ 2 ] ;
31989: LD_ADDR_VAR 0 13
31993: PUSH
31994: LD_VAR 0 4
31998: PUSH
31999: LD_INT 2
32001: ARRAY
32002: ST_TO_ADDR
// if h + 7 < height then
32003: LD_VAR 0 13
32007: PUSH
32008: LD_INT 7
32010: PLUS
32011: PUSH
32012: LD_VAR 0 15
32016: LESS
32017: IFFALSE 32046
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32019: LD_ADDR_VAR 0 18
32023: PUSH
32024: LD_INT 7
32026: PUSH
32027: LD_INT 28
32029: PUSH
32030: LD_INT 45
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: PUSH
32038: LD_VAR 0 12
32042: ARRAY
32043: ST_TO_ADDR
// break ;
32044: GO 32048
// end ; end ; end ;
32046: GO 31877
32048: POP
32049: POP
// end ; if not weapon then
32050: LD_VAR 0 18
32054: NOT
32055: IFFALSE 32115
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32057: LD_ADDR_VAR 0 5
32061: PUSH
32062: LD_VAR 0 5
32066: PUSH
32067: LD_INT 11
32069: PUSH
32070: LD_INT 30
32072: PUSH
32073: LD_INT 49
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: DIFF
32081: ST_TO_ADDR
// if not list then
32082: LD_VAR 0 5
32086: NOT
32087: IFFALSE 32091
// exit ;
32089: GO 32233
// weapon := list [ rand ( 1 , list ) ] ;
32091: LD_ADDR_VAR 0 18
32095: PUSH
32096: LD_VAR 0 5
32100: PUSH
32101: LD_INT 1
32103: PPUSH
32104: LD_VAR 0 5
32108: PPUSH
32109: CALL_OW 12
32113: ARRAY
32114: ST_TO_ADDR
// end ; if weapon then
32115: LD_VAR 0 18
32119: IFFALSE 32233
// begin tmp := CostOfWeapon ( weapon ) ;
32121: LD_ADDR_VAR 0 14
32125: PUSH
32126: LD_VAR 0 18
32130: PPUSH
32131: CALL_OW 451
32135: ST_TO_ADDR
// j := GetBase ( tower ) ;
32136: LD_ADDR_VAR 0 9
32140: PUSH
32141: LD_VAR 0 1
32145: PPUSH
32146: CALL_OW 274
32150: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32151: LD_VAR 0 9
32155: PPUSH
32156: LD_INT 1
32158: PPUSH
32159: CALL_OW 275
32163: PUSH
32164: LD_VAR 0 14
32168: PUSH
32169: LD_INT 1
32171: ARRAY
32172: GREATEREQUAL
32173: PUSH
32174: LD_VAR 0 9
32178: PPUSH
32179: LD_INT 2
32181: PPUSH
32182: CALL_OW 275
32186: PUSH
32187: LD_VAR 0 14
32191: PUSH
32192: LD_INT 2
32194: ARRAY
32195: GREATEREQUAL
32196: AND
32197: PUSH
32198: LD_VAR 0 9
32202: PPUSH
32203: LD_INT 3
32205: PPUSH
32206: CALL_OW 275
32210: PUSH
32211: LD_VAR 0 14
32215: PUSH
32216: LD_INT 3
32218: ARRAY
32219: GREATEREQUAL
32220: AND
32221: IFFALSE 32233
// result := weapon ;
32223: LD_ADDR_VAR 0 3
32227: PUSH
32228: LD_VAR 0 18
32232: ST_TO_ADDR
// end ; end ;
32233: LD_VAR 0 3
32237: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32238: LD_INT 0
32240: PPUSH
32241: PPUSH
// result := true ;
32242: LD_ADDR_VAR 0 3
32246: PUSH
32247: LD_INT 1
32249: ST_TO_ADDR
// if array1 = array2 then
32250: LD_VAR 0 1
32254: PUSH
32255: LD_VAR 0 2
32259: EQUAL
32260: IFFALSE 32320
// begin for i = 1 to array1 do
32262: LD_ADDR_VAR 0 4
32266: PUSH
32267: DOUBLE
32268: LD_INT 1
32270: DEC
32271: ST_TO_ADDR
32272: LD_VAR 0 1
32276: PUSH
32277: FOR_TO
32278: IFFALSE 32316
// if array1 [ i ] <> array2 [ i ] then
32280: LD_VAR 0 1
32284: PUSH
32285: LD_VAR 0 4
32289: ARRAY
32290: PUSH
32291: LD_VAR 0 2
32295: PUSH
32296: LD_VAR 0 4
32300: ARRAY
32301: NONEQUAL
32302: IFFALSE 32314
// begin result := false ;
32304: LD_ADDR_VAR 0 3
32308: PUSH
32309: LD_INT 0
32311: ST_TO_ADDR
// break ;
32312: GO 32316
// end ;
32314: GO 32277
32316: POP
32317: POP
// end else
32318: GO 32328
// result := false ;
32320: LD_ADDR_VAR 0 3
32324: PUSH
32325: LD_INT 0
32327: ST_TO_ADDR
// end ;
32328: LD_VAR 0 3
32332: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32333: LD_INT 0
32335: PPUSH
32336: PPUSH
32337: PPUSH
// pom := GetBase ( fac ) ;
32338: LD_ADDR_VAR 0 5
32342: PUSH
32343: LD_VAR 0 1
32347: PPUSH
32348: CALL_OW 274
32352: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32353: LD_ADDR_VAR 0 4
32357: PUSH
32358: LD_VAR 0 2
32362: PUSH
32363: LD_INT 1
32365: ARRAY
32366: PPUSH
32367: LD_VAR 0 2
32371: PUSH
32372: LD_INT 2
32374: ARRAY
32375: PPUSH
32376: LD_VAR 0 2
32380: PUSH
32381: LD_INT 3
32383: ARRAY
32384: PPUSH
32385: LD_VAR 0 2
32389: PUSH
32390: LD_INT 4
32392: ARRAY
32393: PPUSH
32394: CALL_OW 449
32398: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32399: LD_ADDR_VAR 0 3
32403: PUSH
32404: LD_VAR 0 5
32408: PPUSH
32409: LD_INT 1
32411: PPUSH
32412: CALL_OW 275
32416: PUSH
32417: LD_VAR 0 4
32421: PUSH
32422: LD_INT 1
32424: ARRAY
32425: GREATEREQUAL
32426: PUSH
32427: LD_VAR 0 5
32431: PPUSH
32432: LD_INT 2
32434: PPUSH
32435: CALL_OW 275
32439: PUSH
32440: LD_VAR 0 4
32444: PUSH
32445: LD_INT 2
32447: ARRAY
32448: GREATEREQUAL
32449: AND
32450: PUSH
32451: LD_VAR 0 5
32455: PPUSH
32456: LD_INT 3
32458: PPUSH
32459: CALL_OW 275
32463: PUSH
32464: LD_VAR 0 4
32468: PUSH
32469: LD_INT 3
32471: ARRAY
32472: GREATEREQUAL
32473: AND
32474: ST_TO_ADDR
// end ;
32475: LD_VAR 0 3
32479: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32480: LD_INT 0
32482: PPUSH
32483: PPUSH
32484: PPUSH
32485: PPUSH
// pom := GetBase ( building ) ;
32486: LD_ADDR_VAR 0 3
32490: PUSH
32491: LD_VAR 0 1
32495: PPUSH
32496: CALL_OW 274
32500: ST_TO_ADDR
// if not pom then
32501: LD_VAR 0 3
32505: NOT
32506: IFFALSE 32510
// exit ;
32508: GO 32680
// btype := GetBType ( building ) ;
32510: LD_ADDR_VAR 0 5
32514: PUSH
32515: LD_VAR 0 1
32519: PPUSH
32520: CALL_OW 266
32524: ST_TO_ADDR
// if btype = b_armoury then
32525: LD_VAR 0 5
32529: PUSH
32530: LD_INT 4
32532: EQUAL
32533: IFFALSE 32543
// btype := b_barracks ;
32535: LD_ADDR_VAR 0 5
32539: PUSH
32540: LD_INT 5
32542: ST_TO_ADDR
// if btype = b_depot then
32543: LD_VAR 0 5
32547: PUSH
32548: LD_INT 0
32550: EQUAL
32551: IFFALSE 32561
// btype := b_warehouse ;
32553: LD_ADDR_VAR 0 5
32557: PUSH
32558: LD_INT 1
32560: ST_TO_ADDR
// if btype = b_workshop then
32561: LD_VAR 0 5
32565: PUSH
32566: LD_INT 2
32568: EQUAL
32569: IFFALSE 32579
// btype := b_factory ;
32571: LD_ADDR_VAR 0 5
32575: PUSH
32576: LD_INT 3
32578: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32579: LD_ADDR_VAR 0 4
32583: PUSH
32584: LD_VAR 0 5
32588: PPUSH
32589: LD_VAR 0 1
32593: PPUSH
32594: CALL_OW 248
32598: PPUSH
32599: CALL_OW 450
32603: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32604: LD_ADDR_VAR 0 2
32608: PUSH
32609: LD_VAR 0 3
32613: PPUSH
32614: LD_INT 1
32616: PPUSH
32617: CALL_OW 275
32621: PUSH
32622: LD_VAR 0 4
32626: PUSH
32627: LD_INT 1
32629: ARRAY
32630: GREATEREQUAL
32631: PUSH
32632: LD_VAR 0 3
32636: PPUSH
32637: LD_INT 2
32639: PPUSH
32640: CALL_OW 275
32644: PUSH
32645: LD_VAR 0 4
32649: PUSH
32650: LD_INT 2
32652: ARRAY
32653: GREATEREQUAL
32654: AND
32655: PUSH
32656: LD_VAR 0 3
32660: PPUSH
32661: LD_INT 3
32663: PPUSH
32664: CALL_OW 275
32668: PUSH
32669: LD_VAR 0 4
32673: PUSH
32674: LD_INT 3
32676: ARRAY
32677: GREATEREQUAL
32678: AND
32679: ST_TO_ADDR
// end ;
32680: LD_VAR 0 2
32684: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32685: LD_INT 0
32687: PPUSH
32688: PPUSH
32689: PPUSH
// pom := GetBase ( building ) ;
32690: LD_ADDR_VAR 0 4
32694: PUSH
32695: LD_VAR 0 1
32699: PPUSH
32700: CALL_OW 274
32704: ST_TO_ADDR
// if not pom then
32705: LD_VAR 0 4
32709: NOT
32710: IFFALSE 32714
// exit ;
32712: GO 32815
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32714: LD_ADDR_VAR 0 5
32718: PUSH
32719: LD_VAR 0 2
32723: PPUSH
32724: LD_VAR 0 1
32728: PPUSH
32729: CALL_OW 248
32733: PPUSH
32734: CALL_OW 450
32738: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32739: LD_ADDR_VAR 0 3
32743: PUSH
32744: LD_VAR 0 4
32748: PPUSH
32749: LD_INT 1
32751: PPUSH
32752: CALL_OW 275
32756: PUSH
32757: LD_VAR 0 5
32761: PUSH
32762: LD_INT 1
32764: ARRAY
32765: GREATEREQUAL
32766: PUSH
32767: LD_VAR 0 4
32771: PPUSH
32772: LD_INT 2
32774: PPUSH
32775: CALL_OW 275
32779: PUSH
32780: LD_VAR 0 5
32784: PUSH
32785: LD_INT 2
32787: ARRAY
32788: GREATEREQUAL
32789: AND
32790: PUSH
32791: LD_VAR 0 4
32795: PPUSH
32796: LD_INT 3
32798: PPUSH
32799: CALL_OW 275
32803: PUSH
32804: LD_VAR 0 5
32808: PUSH
32809: LD_INT 3
32811: ARRAY
32812: GREATEREQUAL
32813: AND
32814: ST_TO_ADDR
// end ;
32815: LD_VAR 0 3
32819: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32820: LD_INT 0
32822: PPUSH
32823: PPUSH
32824: PPUSH
32825: PPUSH
32826: PPUSH
32827: PPUSH
32828: PPUSH
32829: PPUSH
32830: PPUSH
32831: PPUSH
// result := false ;
32832: LD_ADDR_VAR 0 6
32836: PUSH
32837: LD_INT 0
32839: ST_TO_ADDR
// if not base or not btype or not x or not y then
32840: LD_VAR 0 1
32844: NOT
32845: PUSH
32846: LD_VAR 0 2
32850: NOT
32851: OR
32852: PUSH
32853: LD_VAR 0 3
32857: NOT
32858: OR
32859: PUSH
32860: LD_VAR 0 4
32864: NOT
32865: OR
32866: IFFALSE 32870
// exit ;
32868: GO 33479
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32870: LD_ADDR_VAR 0 12
32874: PUSH
32875: LD_VAR 0 2
32879: PPUSH
32880: LD_VAR 0 3
32884: PPUSH
32885: LD_VAR 0 4
32889: PPUSH
32890: LD_VAR 0 5
32894: PPUSH
32895: LD_VAR 0 1
32899: PUSH
32900: LD_INT 1
32902: ARRAY
32903: PPUSH
32904: CALL_OW 248
32908: PPUSH
32909: LD_INT 0
32911: PPUSH
32912: CALL 34316 0 6
32916: ST_TO_ADDR
// if not hexes then
32917: LD_VAR 0 12
32921: NOT
32922: IFFALSE 32926
// exit ;
32924: GO 33479
// for i = 1 to hexes do
32926: LD_ADDR_VAR 0 7
32930: PUSH
32931: DOUBLE
32932: LD_INT 1
32934: DEC
32935: ST_TO_ADDR
32936: LD_VAR 0 12
32940: PUSH
32941: FOR_TO
32942: IFFALSE 33477
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32944: LD_ADDR_VAR 0 11
32948: PUSH
32949: LD_VAR 0 12
32953: PUSH
32954: LD_VAR 0 7
32958: ARRAY
32959: PUSH
32960: LD_INT 1
32962: ARRAY
32963: PPUSH
32964: LD_VAR 0 12
32968: PUSH
32969: LD_VAR 0 7
32973: ARRAY
32974: PUSH
32975: LD_INT 2
32977: ARRAY
32978: PPUSH
32979: CALL_OW 428
32983: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32984: LD_VAR 0 12
32988: PUSH
32989: LD_VAR 0 7
32993: ARRAY
32994: PUSH
32995: LD_INT 1
32997: ARRAY
32998: PPUSH
32999: LD_VAR 0 12
33003: PUSH
33004: LD_VAR 0 7
33008: ARRAY
33009: PUSH
33010: LD_INT 2
33012: ARRAY
33013: PPUSH
33014: CALL_OW 351
33018: PUSH
33019: LD_VAR 0 12
33023: PUSH
33024: LD_VAR 0 7
33028: ARRAY
33029: PUSH
33030: LD_INT 1
33032: ARRAY
33033: PPUSH
33034: LD_VAR 0 12
33038: PUSH
33039: LD_VAR 0 7
33043: ARRAY
33044: PUSH
33045: LD_INT 2
33047: ARRAY
33048: PPUSH
33049: CALL_OW 488
33053: NOT
33054: OR
33055: PUSH
33056: LD_VAR 0 11
33060: PPUSH
33061: CALL_OW 247
33065: PUSH
33066: LD_INT 3
33068: EQUAL
33069: OR
33070: IFFALSE 33076
// exit ;
33072: POP
33073: POP
33074: GO 33479
// if not tmp or not tmp in base then
33076: LD_VAR 0 11
33080: NOT
33081: PUSH
33082: LD_VAR 0 11
33086: PUSH
33087: LD_VAR 0 1
33091: IN
33092: NOT
33093: OR
33094: IFFALSE 33098
// continue ;
33096: GO 32941
// result := true ;
33098: LD_ADDR_VAR 0 6
33102: PUSH
33103: LD_INT 1
33105: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33106: LD_ADDR_VAR 0 15
33110: PUSH
33111: LD_VAR 0 1
33115: PPUSH
33116: LD_INT 22
33118: PUSH
33119: LD_VAR 0 11
33123: PPUSH
33124: CALL_OW 255
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 2
33135: PUSH
33136: LD_INT 30
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 30
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PPUSH
33165: CALL_OW 72
33169: ST_TO_ADDR
// if dep then
33170: LD_VAR 0 15
33174: IFFALSE 33310
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33176: LD_ADDR_VAR 0 14
33180: PUSH
33181: LD_VAR 0 15
33185: PUSH
33186: LD_INT 1
33188: ARRAY
33189: PPUSH
33190: CALL_OW 250
33194: PPUSH
33195: LD_VAR 0 15
33199: PUSH
33200: LD_INT 1
33202: ARRAY
33203: PPUSH
33204: CALL_OW 254
33208: PPUSH
33209: LD_INT 5
33211: PPUSH
33212: CALL_OW 272
33216: PUSH
33217: LD_VAR 0 15
33221: PUSH
33222: LD_INT 1
33224: ARRAY
33225: PPUSH
33226: CALL_OW 251
33230: PPUSH
33231: LD_VAR 0 15
33235: PUSH
33236: LD_INT 1
33238: ARRAY
33239: PPUSH
33240: CALL_OW 254
33244: PPUSH
33245: LD_INT 5
33247: PPUSH
33248: CALL_OW 273
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33257: LD_VAR 0 14
33261: PUSH
33262: LD_INT 1
33264: ARRAY
33265: PPUSH
33266: LD_VAR 0 14
33270: PUSH
33271: LD_INT 2
33273: ARRAY
33274: PPUSH
33275: CALL_OW 488
33279: IFFALSE 33310
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33281: LD_VAR 0 11
33285: PPUSH
33286: LD_VAR 0 14
33290: PUSH
33291: LD_INT 1
33293: ARRAY
33294: PPUSH
33295: LD_VAR 0 14
33299: PUSH
33300: LD_INT 2
33302: ARRAY
33303: PPUSH
33304: CALL_OW 111
// continue ;
33308: GO 32941
// end ; end ; r := GetDir ( tmp ) ;
33310: LD_ADDR_VAR 0 13
33314: PUSH
33315: LD_VAR 0 11
33319: PPUSH
33320: CALL_OW 254
33324: ST_TO_ADDR
// if r = 5 then
33325: LD_VAR 0 13
33329: PUSH
33330: LD_INT 5
33332: EQUAL
33333: IFFALSE 33343
// r := 0 ;
33335: LD_ADDR_VAR 0 13
33339: PUSH
33340: LD_INT 0
33342: ST_TO_ADDR
// for j = r to 5 do
33343: LD_ADDR_VAR 0 8
33347: PUSH
33348: DOUBLE
33349: LD_VAR 0 13
33353: DEC
33354: ST_TO_ADDR
33355: LD_INT 5
33357: PUSH
33358: FOR_TO
33359: IFFALSE 33473
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33361: LD_ADDR_VAR 0 9
33365: PUSH
33366: LD_VAR 0 11
33370: PPUSH
33371: CALL_OW 250
33375: PPUSH
33376: LD_VAR 0 8
33380: PPUSH
33381: LD_INT 2
33383: PPUSH
33384: CALL_OW 272
33388: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33389: LD_ADDR_VAR 0 10
33393: PUSH
33394: LD_VAR 0 11
33398: PPUSH
33399: CALL_OW 251
33403: PPUSH
33404: LD_VAR 0 8
33408: PPUSH
33409: LD_INT 2
33411: PPUSH
33412: CALL_OW 273
33416: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33417: LD_VAR 0 9
33421: PPUSH
33422: LD_VAR 0 10
33426: PPUSH
33427: CALL_OW 488
33431: PUSH
33432: LD_VAR 0 9
33436: PPUSH
33437: LD_VAR 0 10
33441: PPUSH
33442: CALL_OW 428
33446: NOT
33447: AND
33448: IFFALSE 33471
// begin ComMoveXY ( tmp , _x , _y ) ;
33450: LD_VAR 0 11
33454: PPUSH
33455: LD_VAR 0 9
33459: PPUSH
33460: LD_VAR 0 10
33464: PPUSH
33465: CALL_OW 111
// break ;
33469: GO 33473
// end ; end ;
33471: GO 33358
33473: POP
33474: POP
// end ;
33475: GO 32941
33477: POP
33478: POP
// end ;
33479: LD_VAR 0 6
33483: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33484: LD_INT 0
33486: PPUSH
33487: PPUSH
33488: PPUSH
33489: PPUSH
33490: PPUSH
33491: PPUSH
33492: PPUSH
33493: PPUSH
33494: PPUSH
33495: PPUSH
// result := false ;
33496: LD_ADDR_VAR 0 6
33500: PUSH
33501: LD_INT 0
33503: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33504: LD_VAR 0 1
33508: NOT
33509: PUSH
33510: LD_VAR 0 1
33514: PPUSH
33515: CALL_OW 266
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: IN
33530: NOT
33531: OR
33532: PUSH
33533: LD_VAR 0 2
33537: NOT
33538: OR
33539: PUSH
33540: LD_VAR 0 5
33544: PUSH
33545: LD_INT 0
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 2
33553: PUSH
33554: LD_INT 3
33556: PUSH
33557: LD_INT 4
33559: PUSH
33560: LD_INT 5
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: IN
33571: NOT
33572: OR
33573: PUSH
33574: LD_VAR 0 3
33578: PPUSH
33579: LD_VAR 0 4
33583: PPUSH
33584: CALL_OW 488
33588: NOT
33589: OR
33590: IFFALSE 33594
// exit ;
33592: GO 34311
// pom := GetBase ( depot ) ;
33594: LD_ADDR_VAR 0 10
33598: PUSH
33599: LD_VAR 0 1
33603: PPUSH
33604: CALL_OW 274
33608: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33609: LD_ADDR_VAR 0 11
33613: PUSH
33614: LD_VAR 0 2
33618: PPUSH
33619: LD_VAR 0 1
33623: PPUSH
33624: CALL_OW 248
33628: PPUSH
33629: CALL_OW 450
33633: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33634: LD_VAR 0 10
33638: PPUSH
33639: LD_INT 1
33641: PPUSH
33642: CALL_OW 275
33646: PUSH
33647: LD_VAR 0 11
33651: PUSH
33652: LD_INT 1
33654: ARRAY
33655: GREATEREQUAL
33656: PUSH
33657: LD_VAR 0 10
33661: PPUSH
33662: LD_INT 2
33664: PPUSH
33665: CALL_OW 275
33669: PUSH
33670: LD_VAR 0 11
33674: PUSH
33675: LD_INT 2
33677: ARRAY
33678: GREATEREQUAL
33679: AND
33680: PUSH
33681: LD_VAR 0 10
33685: PPUSH
33686: LD_INT 3
33688: PPUSH
33689: CALL_OW 275
33693: PUSH
33694: LD_VAR 0 11
33698: PUSH
33699: LD_INT 3
33701: ARRAY
33702: GREATEREQUAL
33703: AND
33704: NOT
33705: IFFALSE 33709
// exit ;
33707: GO 34311
// if GetBType ( depot ) = b_depot then
33709: LD_VAR 0 1
33713: PPUSH
33714: CALL_OW 266
33718: PUSH
33719: LD_INT 0
33721: EQUAL
33722: IFFALSE 33734
// dist := 28 else
33724: LD_ADDR_VAR 0 14
33728: PUSH
33729: LD_INT 28
33731: ST_TO_ADDR
33732: GO 33742
// dist := 36 ;
33734: LD_ADDR_VAR 0 14
33738: PUSH
33739: LD_INT 36
33741: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33742: LD_VAR 0 1
33746: PPUSH
33747: LD_VAR 0 3
33751: PPUSH
33752: LD_VAR 0 4
33756: PPUSH
33757: CALL_OW 297
33761: PUSH
33762: LD_VAR 0 14
33766: GREATER
33767: IFFALSE 33771
// exit ;
33769: GO 34311
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33771: LD_ADDR_VAR 0 12
33775: PUSH
33776: LD_VAR 0 2
33780: PPUSH
33781: LD_VAR 0 3
33785: PPUSH
33786: LD_VAR 0 4
33790: PPUSH
33791: LD_VAR 0 5
33795: PPUSH
33796: LD_VAR 0 1
33800: PPUSH
33801: CALL_OW 248
33805: PPUSH
33806: LD_INT 0
33808: PPUSH
33809: CALL 34316 0 6
33813: ST_TO_ADDR
// if not hexes then
33814: LD_VAR 0 12
33818: NOT
33819: IFFALSE 33823
// exit ;
33821: GO 34311
// hex := GetHexInfo ( x , y ) ;
33823: LD_ADDR_VAR 0 15
33827: PUSH
33828: LD_VAR 0 3
33832: PPUSH
33833: LD_VAR 0 4
33837: PPUSH
33838: CALL_OW 546
33842: ST_TO_ADDR
// if hex [ 1 ] then
33843: LD_VAR 0 15
33847: PUSH
33848: LD_INT 1
33850: ARRAY
33851: IFFALSE 33855
// exit ;
33853: GO 34311
// height := hex [ 2 ] ;
33855: LD_ADDR_VAR 0 13
33859: PUSH
33860: LD_VAR 0 15
33864: PUSH
33865: LD_INT 2
33867: ARRAY
33868: ST_TO_ADDR
// for i = 1 to hexes do
33869: LD_ADDR_VAR 0 7
33873: PUSH
33874: DOUBLE
33875: LD_INT 1
33877: DEC
33878: ST_TO_ADDR
33879: LD_VAR 0 12
33883: PUSH
33884: FOR_TO
33885: IFFALSE 34215
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33887: LD_VAR 0 12
33891: PUSH
33892: LD_VAR 0 7
33896: ARRAY
33897: PUSH
33898: LD_INT 1
33900: ARRAY
33901: PPUSH
33902: LD_VAR 0 12
33906: PUSH
33907: LD_VAR 0 7
33911: ARRAY
33912: PUSH
33913: LD_INT 2
33915: ARRAY
33916: PPUSH
33917: CALL_OW 488
33921: NOT
33922: PUSH
33923: LD_VAR 0 12
33927: PUSH
33928: LD_VAR 0 7
33932: ARRAY
33933: PUSH
33934: LD_INT 1
33936: ARRAY
33937: PPUSH
33938: LD_VAR 0 12
33942: PUSH
33943: LD_VAR 0 7
33947: ARRAY
33948: PUSH
33949: LD_INT 2
33951: ARRAY
33952: PPUSH
33953: CALL_OW 428
33957: PUSH
33958: LD_INT 0
33960: GREATER
33961: OR
33962: PUSH
33963: LD_VAR 0 12
33967: PUSH
33968: LD_VAR 0 7
33972: ARRAY
33973: PUSH
33974: LD_INT 1
33976: ARRAY
33977: PPUSH
33978: LD_VAR 0 12
33982: PUSH
33983: LD_VAR 0 7
33987: ARRAY
33988: PUSH
33989: LD_INT 2
33991: ARRAY
33992: PPUSH
33993: CALL_OW 351
33997: OR
33998: IFFALSE 34004
// exit ;
34000: POP
34001: POP
34002: GO 34311
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34004: LD_ADDR_VAR 0 8
34008: PUSH
34009: LD_VAR 0 12
34013: PUSH
34014: LD_VAR 0 7
34018: ARRAY
34019: PUSH
34020: LD_INT 1
34022: ARRAY
34023: PPUSH
34024: LD_VAR 0 12
34028: PUSH
34029: LD_VAR 0 7
34033: ARRAY
34034: PUSH
34035: LD_INT 2
34037: ARRAY
34038: PPUSH
34039: CALL_OW 546
34043: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34044: LD_VAR 0 8
34048: PUSH
34049: LD_INT 1
34051: ARRAY
34052: PUSH
34053: LD_VAR 0 8
34057: PUSH
34058: LD_INT 2
34060: ARRAY
34061: PUSH
34062: LD_VAR 0 13
34066: PUSH
34067: LD_INT 2
34069: PLUS
34070: GREATER
34071: OR
34072: PUSH
34073: LD_VAR 0 8
34077: PUSH
34078: LD_INT 2
34080: ARRAY
34081: PUSH
34082: LD_VAR 0 13
34086: PUSH
34087: LD_INT 2
34089: MINUS
34090: LESS
34091: OR
34092: PUSH
34093: LD_VAR 0 8
34097: PUSH
34098: LD_INT 3
34100: ARRAY
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: LD_INT 8
34107: PUSH
34108: LD_INT 9
34110: PUSH
34111: LD_INT 10
34113: PUSH
34114: LD_INT 11
34116: PUSH
34117: LD_INT 12
34119: PUSH
34120: LD_INT 13
34122: PUSH
34123: LD_INT 16
34125: PUSH
34126: LD_INT 17
34128: PUSH
34129: LD_INT 18
34131: PUSH
34132: LD_INT 19
34134: PUSH
34135: LD_INT 20
34137: PUSH
34138: LD_INT 21
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: IN
34156: NOT
34157: OR
34158: PUSH
34159: LD_VAR 0 8
34163: PUSH
34164: LD_INT 5
34166: ARRAY
34167: NOT
34168: OR
34169: PUSH
34170: LD_VAR 0 8
34174: PUSH
34175: LD_INT 6
34177: ARRAY
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: LD_INT 7
34187: PUSH
34188: LD_INT 9
34190: PUSH
34191: LD_INT 10
34193: PUSH
34194: LD_INT 11
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: IN
34205: NOT
34206: OR
34207: IFFALSE 34213
// exit ;
34209: POP
34210: POP
34211: GO 34311
// end ;
34213: GO 33884
34215: POP
34216: POP
// side := GetSide ( depot ) ;
34217: LD_ADDR_VAR 0 9
34221: PUSH
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 255
34231: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34232: LD_VAR 0 9
34236: PPUSH
34237: LD_VAR 0 3
34241: PPUSH
34242: LD_VAR 0 4
34246: PPUSH
34247: LD_INT 20
34249: PPUSH
34250: CALL 26965 0 4
34254: PUSH
34255: LD_INT 4
34257: ARRAY
34258: IFFALSE 34262
// exit ;
34260: GO 34311
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34262: LD_VAR 0 2
34266: PUSH
34267: LD_INT 29
34269: PUSH
34270: LD_INT 30
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: IN
34277: PUSH
34278: LD_VAR 0 3
34282: PPUSH
34283: LD_VAR 0 4
34287: PPUSH
34288: LD_VAR 0 9
34292: PPUSH
34293: CALL_OW 440
34297: NOT
34298: AND
34299: IFFALSE 34303
// exit ;
34301: GO 34311
// result := true ;
34303: LD_ADDR_VAR 0 6
34307: PUSH
34308: LD_INT 1
34310: ST_TO_ADDR
// end ;
34311: LD_VAR 0 6
34315: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34316: LD_INT 0
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
34362: PPUSH
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
34370: PPUSH
34371: PPUSH
34372: PPUSH
34373: PPUSH
34374: PPUSH
34375: PPUSH
// result = [ ] ;
34376: LD_ADDR_VAR 0 7
34380: PUSH
34381: EMPTY
34382: ST_TO_ADDR
// temp_list = [ ] ;
34383: LD_ADDR_VAR 0 9
34387: PUSH
34388: EMPTY
34389: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34390: LD_VAR 0 4
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 3
34406: PUSH
34407: LD_INT 4
34409: PUSH
34410: LD_INT 5
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: IN
34421: NOT
34422: PUSH
34423: LD_VAR 0 1
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: IN
34438: PUSH
34439: LD_VAR 0 5
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 3
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: LIST
34457: IN
34458: NOT
34459: AND
34460: OR
34461: IFFALSE 34465
// exit ;
34463: GO 52856
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34465: LD_VAR 0 1
34469: PUSH
34470: LD_INT 6
34472: PUSH
34473: LD_INT 7
34475: PUSH
34476: LD_INT 8
34478: PUSH
34479: LD_INT 13
34481: PUSH
34482: LD_INT 12
34484: PUSH
34485: LD_INT 15
34487: PUSH
34488: LD_INT 11
34490: PUSH
34491: LD_INT 14
34493: PUSH
34494: LD_INT 10
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: IN
34508: IFFALSE 34518
// btype = b_lab ;
34510: LD_ADDR_VAR 0 1
34514: PUSH
34515: LD_INT 6
34517: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34518: LD_VAR 0 6
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: IN
34537: NOT
34538: PUSH
34539: LD_VAR 0 1
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: LD_INT 6
34558: PUSH
34559: LD_INT 36
34561: PUSH
34562: LD_INT 4
34564: PUSH
34565: LD_INT 5
34567: PUSH
34568: LD_INT 31
34570: PUSH
34571: LD_INT 32
34573: PUSH
34574: LD_INT 33
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: IN
34590: NOT
34591: PUSH
34592: LD_VAR 0 6
34596: PUSH
34597: LD_INT 1
34599: EQUAL
34600: AND
34601: OR
34602: PUSH
34603: LD_VAR 0 1
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 3
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: IN
34618: NOT
34619: PUSH
34620: LD_VAR 0 6
34624: PUSH
34625: LD_INT 2
34627: EQUAL
34628: AND
34629: OR
34630: IFFALSE 34640
// mode = 0 ;
34632: LD_ADDR_VAR 0 6
34636: PUSH
34637: LD_INT 0
34639: ST_TO_ADDR
// case mode of 0 :
34640: LD_VAR 0 6
34644: PUSH
34645: LD_INT 0
34647: DOUBLE
34648: EQUAL
34649: IFTRUE 34653
34651: GO 46106
34653: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34654: LD_ADDR_VAR 0 11
34658: PUSH
34659: LD_INT 0
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: LD_INT 1
34727: NEG
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: LD_INT 2
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 2
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: LD_INT 3
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 3
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34847: LD_ADDR_VAR 0 12
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: NEG
34906: PUSH
34907: LD_INT 0
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 3
35004: NEG
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 3
35015: NEG
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35043: LD_ADDR_VAR 0 13
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: LD_INT 1
35116: NEG
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: LD_INT 2
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 2
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: NEG
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: NEG
35179: PUSH
35180: LD_INT 2
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: LD_INT 3
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 3
35202: NEG
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 3
35214: NEG
35215: PUSH
35216: LD_INT 3
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35242: LD_ADDR_VAR 0 14
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 2
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 1
35357: PUSH
35358: LD_INT 2
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: LD_INT 2
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: LD_INT 1
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: LD_INT 3
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 3
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: LD_INT 2
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35438: LD_ADDR_VAR 0 15
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: LD_INT 1
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 2
35572: NEG
35573: PUSH
35574: LD_INT 1
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 3
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35631: LD_ADDR_VAR 0 16
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 2
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 2
35766: NEG
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 3
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 3
35788: PUSH
35789: LD_INT 3
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 3
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35824: LD_ADDR_VAR 0 17
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: LD_INT 1
35844: NEG
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: LD_INT 2
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: LD_INT 2
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 1
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: NEG
36024: PUSH
36025: LD_INT 2
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36054: LD_ADDR_VAR 0 18
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 2
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: LD_INT 2
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: LD_INT 2
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: LD_INT 2
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 2
36230: NEG
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 2
36253: NEG
36254: PUSH
36255: LD_INT 2
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36284: LD_ADDR_VAR 0 19
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 0
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: LD_INT 2
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: LD_INT 2
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: LD_INT 2
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: LD_INT 2
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 2
36460: NEG
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: NEG
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36514: LD_ADDR_VAR 0 20
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: LD_INT 2
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: LD_INT 1
36705: NEG
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: LD_INT 2
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36744: LD_ADDR_VAR 0 21
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 2
36879: PUSH
36880: LD_INT 2
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: LD_INT 2
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: LD_INT 2
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36974: LD_ADDR_VAR 0 22
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: LD_INT 2
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 2
37109: PUSH
37110: LD_INT 2
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 2
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: NEG
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 2
37173: NEG
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37204: LD_ADDR_VAR 0 23
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 2
37403: NEG
37404: PUSH
37405: LD_INT 2
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 2
37415: NEG
37416: PUSH
37417: LD_INT 3
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: LD_INT 3
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37484: LD_ADDR_VAR 0 24
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: PUSH
37589: LD_INT 1
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 2
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: LD_INT 2
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 3
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 3
37727: PUSH
37728: LD_INT 2
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37760: LD_ADDR_VAR 0 25
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: LD_INT 2
37845: NEG
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: LD_INT 2
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 2
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: LD_INT 1
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 3
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: LD_INT 3
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38034: LD_ADDR_VAR 0 26
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 3
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 3
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38310: LD_ADDR_VAR 0 27
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: NEG
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 2
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: LD_INT 2
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 2
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 2
38497: NEG
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: NEG
38510: PUSH
38511: LD_INT 2
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: NEG
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 3
38543: NEG
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 3
38555: NEG
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38590: LD_ADDR_VAR 0 28
38594: PUSH
38595: LD_INT 0
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 2
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 2
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: NEG
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 2
38789: NEG
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: LD_INT 3
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: LD_INT 3
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 3
38825: NEG
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: NEG
38838: PUSH
38839: LD_INT 2
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38872: LD_ADDR_VAR 0 29
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 2
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 2
39038: NEG
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 2
39050: NEG
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 2
39062: NEG
39063: PUSH
39064: LD_INT 3
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 3
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 3
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 3
39116: NEG
39117: PUSH
39118: LD_INT 2
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39151: LD_ADDR_VAR 0 30
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 2
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: LD_INT 2
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 2
39317: NEG
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: NEG
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: LD_INT 3
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 3
39363: PUSH
39364: LD_INT 2
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: LD_INT 3
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 3
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39429: LD_ADDR_VAR 0 31
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 2
39606: NEG
39607: PUSH
39608: LD_INT 2
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: LD_INT 3
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 3
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 3
39672: NEG
39673: PUSH
39674: LD_INT 2
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39707: LD_ADDR_VAR 0 32
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 2
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: LD_INT 3
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 3
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 3
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 2
39939: NEG
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 3
39950: NEG
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39985: LD_ADDR_VAR 0 33
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: NEG
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: LD_INT 2
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 2
40175: NEG
40176: PUSH
40177: LD_INT 3
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 2
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 3
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 3
40229: NEG
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40264: LD_ADDR_VAR 0 34
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: NEG
40444: PUSH
40445: LD_INT 2
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: LD_INT 3
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 3
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 3
40509: NEG
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40544: LD_ADDR_VAR 0 35
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40656: LD_ADDR_VAR 0 36
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40768: LD_ADDR_VAR 0 37
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40880: LD_ADDR_VAR 0 38
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40992: LD_ADDR_VAR 0 39
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41104: LD_ADDR_VAR 0 40
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41216: LD_ADDR_VAR 0 41
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 3
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 3
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 3
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 3
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 3
41459: PUSH
41460: LD_INT 3
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 2
41469: PUSH
41470: LD_INT 3
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 2
41479: NEG
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 3
41490: NEG
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 3
41501: NEG
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 3
41513: NEG
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 3
41525: NEG
41526: PUSH
41527: LD_INT 3
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41566: LD_ADDR_VAR 0 42
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: LD_INT 2
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: NEG
41757: PUSH
41758: LD_INT 3
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 3
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 3
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 3
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 3
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: LD_INT 3
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 3
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 3
41863: NEG
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 3
41875: NEG
41876: PUSH
41877: LD_INT 3
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41916: LD_ADDR_VAR 0 43
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 2
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 3
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 3
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 3
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 3
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 3
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 3
42212: NEG
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 3
42223: NEG
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42264: LD_ADDR_VAR 0 44
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: LD_INT 2
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 2
42454: NEG
42455: PUSH
42456: LD_INT 3
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 3
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 3
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 3
42507: PUSH
42508: LD_INT 3
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: LD_INT 3
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 3
42538: NEG
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 3
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 3
42561: NEG
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 3
42573: NEG
42574: PUSH
42575: LD_INT 3
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42614: LD_ADDR_VAR 0 45
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 2
42780: NEG
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: LD_INT 2
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: LD_INT 3
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 3
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 3
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 3
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 3
42860: PUSH
42861: LD_INT 3
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 3
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 3
42911: NEG
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 3
42923: NEG
42924: PUSH
42925: LD_INT 3
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42964: LD_ADDR_VAR 0 46
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: NEG
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: NEG
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 3
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 3
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 3
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 3
43260: NEG
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 3
43271: NEG
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43312: LD_ADDR_VAR 0 47
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43463: LD_ADDR_VAR 0 48
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43610: LD_ADDR_VAR 0 49
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43754: LD_ADDR_VAR 0 50
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 2
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43898: LD_ADDR_VAR 0 51
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44045: LD_ADDR_VAR 0 52
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44196: LD_ADDR_VAR 0 53
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44426: LD_ADDR_VAR 0 54
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44656: LD_ADDR_VAR 0 55
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: LD_INT 2
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44886: LD_ADDR_VAR 0 56
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45116: LD_ADDR_VAR 0 57
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: NEG
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45346: LD_ADDR_VAR 0 58
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 2
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 2
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45576: LD_ADDR_VAR 0 59
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45664: LD_ADDR_VAR 0 60
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45752: LD_ADDR_VAR 0 61
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45840: LD_ADDR_VAR 0 62
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45928: LD_ADDR_VAR 0 63
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46016: LD_ADDR_VAR 0 64
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
// end ; 1 :
46104: GO 52001
46106: LD_INT 1
46108: DOUBLE
46109: EQUAL
46110: IFTRUE 46114
46112: GO 48737
46114: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46115: LD_ADDR_VAR 0 11
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 3
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 3
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46159: LD_ADDR_VAR 0 12
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 3
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46200: LD_ADDR_VAR 0 13
46204: PUSH
46205: LD_INT 3
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: LD_INT 3
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 3
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46240: LD_ADDR_VAR 0 14
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46281: LD_ADDR_VAR 0 15
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 3
46299: NEG
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 3
46310: NEG
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: LIST
46324: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46325: LD_ADDR_VAR 0 16
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: LD_INT 3
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 3
46344: NEG
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 3
46356: NEG
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: LIST
46370: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46371: LD_ADDR_VAR 0 17
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 3
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46415: LD_ADDR_VAR 0 18
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 3
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: LIST
46455: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46456: LD_ADDR_VAR 0 19
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 3
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 3
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: LIST
46495: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46496: LD_ADDR_VAR 0 20
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 3
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46537: LD_ADDR_VAR 0 21
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 3
46555: NEG
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 3
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: LIST
46580: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46581: LD_ADDR_VAR 0 22
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: NEG
46613: PUSH
46614: LD_INT 3
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46627: LD_ADDR_VAR 0 23
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 3
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 4
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 3
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46671: LD_ADDR_VAR 0 24
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 3
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 4
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46712: LD_ADDR_VAR 0 25
46716: PUSH
46717: LD_INT 3
46719: PUSH
46720: LD_INT 3
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 4
46729: PUSH
46730: LD_INT 3
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 3
46739: PUSH
46740: LD_INT 4
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46752: LD_ADDR_VAR 0 26
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 4
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46793: LD_ADDR_VAR 0 27
46797: PUSH
46798: LD_INT 3
46800: NEG
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: NEG
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 4
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46837: LD_ADDR_VAR 0 28
46841: PUSH
46842: LD_INT 3
46844: NEG
46845: PUSH
46846: LD_INT 3
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: LD_INT 4
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 4
46868: NEG
46869: PUSH
46870: LD_INT 3
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46883: LD_ADDR_VAR 0 29
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 4
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 4
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 5
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 5
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 4
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: LD_INT 6
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 6
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 5
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47038: LD_ADDR_VAR 0 30
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 3
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 4
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 4
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 4
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 5
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 5
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 5
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 6
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 6
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47181: LD_ADDR_VAR 0 31
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 4
47218: PUSH
47219: LD_INT 3
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 4
47228: PUSH
47229: LD_INT 4
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: LD_INT 4
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 5
47248: PUSH
47249: LD_INT 4
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 5
47258: PUSH
47259: LD_INT 5
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 4
47268: PUSH
47269: LD_INT 5
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 6
47278: PUSH
47279: LD_INT 5
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 6
47288: PUSH
47289: LD_INT 6
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 5
47298: PUSH
47299: LD_INT 6
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47320: LD_ADDR_VAR 0 32
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 3
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 4
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 4
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 3
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 5
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 5
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 4
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 6
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 6
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 5
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47463: LD_ADDR_VAR 0 33
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: NEG
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 3
47492: NEG
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 3
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 4
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 4
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 4
47538: NEG
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 5
47549: NEG
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 5
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 5
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 6
47583: NEG
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 6
47594: NEG
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47618: LD_ADDR_VAR 0 34
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 3
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 3
47637: NEG
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 3
47649: NEG
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 3
47661: NEG
47662: PUSH
47663: LD_INT 4
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 4
47673: NEG
47674: PUSH
47675: LD_INT 3
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 4
47685: NEG
47686: PUSH
47687: LD_INT 4
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 4
47697: NEG
47698: PUSH
47699: LD_INT 5
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 5
47709: NEG
47710: PUSH
47711: LD_INT 4
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 5
47721: NEG
47722: PUSH
47723: LD_INT 5
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 5
47733: NEG
47734: PUSH
47735: LD_INT 6
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 6
47745: NEG
47746: PUSH
47747: LD_INT 5
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 6
47757: NEG
47758: PUSH
47759: LD_INT 6
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47781: LD_ADDR_VAR 0 41
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 3
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47825: LD_ADDR_VAR 0 42
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 3
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47866: LD_ADDR_VAR 0 43
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: LIST
47905: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47906: LD_ADDR_VAR 0 44
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 3
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47947: LD_ADDR_VAR 0 45
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 3
47976: NEG
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: LIST
47990: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47991: LD_ADDR_VAR 0 46
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: LD_INT 3
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 3
48022: NEG
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: LIST
48036: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48037: LD_ADDR_VAR 0 47
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: LD_INT 3
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48070: LD_ADDR_VAR 0 48
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48101: LD_ADDR_VAR 0 49
48105: PUSH
48106: LD_INT 3
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48130: LD_ADDR_VAR 0 50
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: LD_INT 3
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48159: LD_ADDR_VAR 0 51
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48190: LD_ADDR_VAR 0 52
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48223: LD_ADDR_VAR 0 53
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 3
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 3
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: LIST
48266: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48267: LD_ADDR_VAR 0 54
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 3
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: LIST
48307: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48308: LD_ADDR_VAR 0 55
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 3
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: LIST
48347: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48348: LD_ADDR_VAR 0 56
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 3
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: LD_INT 3
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: LIST
48388: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48389: LD_ADDR_VAR 0 57
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: NEG
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 3
48418: NEG
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48433: LD_ADDR_VAR 0 58
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 3
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 3
48452: NEG
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 3
48464: NEG
48465: PUSH
48466: LD_INT 3
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: LIST
48478: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48479: LD_ADDR_VAR 0 59
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48523: LD_ADDR_VAR 0 60
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48564: LD_ADDR_VAR 0 61
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48604: LD_ADDR_VAR 0 62
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48645: LD_ADDR_VAR 0 63
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48689: LD_ADDR_VAR 0 64
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: LIST
48734: ST_TO_ADDR
// end ; 2 :
48735: GO 52001
48737: LD_INT 2
48739: DOUBLE
48740: EQUAL
48741: IFTRUE 48745
48743: GO 52000
48745: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48746: LD_ADDR_VAR 0 29
48750: PUSH
48751: LD_INT 4
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 4
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 5
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 5
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 4
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 3
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 3
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 5
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 3
48846: PUSH
48847: LD_INT 3
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 3
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 4
48866: PUSH
48867: LD_INT 3
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 4
48876: PUSH
48877: LD_INT 4
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: PUSH
48887: LD_INT 4
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: LD_INT 3
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 4
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: PUSH
48927: LD_INT 4
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: LD_INT 4
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 3
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 4
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 5
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 5
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 4
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: LD_INT 5
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 3
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 4
49085: NEG
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 4
49096: NEG
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 4
49108: NEG
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 4
49131: NEG
49132: PUSH
49133: LD_INT 4
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 4
49143: NEG
49144: PUSH
49145: LD_INT 5
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: LD_INT 4
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 3
49167: NEG
49168: PUSH
49169: LD_INT 3
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 4
49179: NEG
49180: PUSH
49181: LD_INT 3
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 5
49191: NEG
49192: PUSH
49193: LD_INT 4
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 5
49203: NEG
49204: PUSH
49205: LD_INT 5
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: LD_INT 5
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 5
49227: NEG
49228: PUSH
49229: LD_INT 3
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49284: LD_ADDR_VAR 0 30
49288: PUSH
49289: LD_INT 4
49291: PUSH
49292: LD_INT 4
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 4
49301: PUSH
49302: LD_INT 3
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 5
49311: PUSH
49312: LD_INT 4
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 5
49321: PUSH
49322: LD_INT 5
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 4
49331: PUSH
49332: LD_INT 5
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: LD_INT 4
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 3
49351: PUSH
49352: LD_INT 3
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 5
49361: PUSH
49362: LD_INT 3
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: LD_INT 5
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 3
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 3
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: LD_INT 4
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 4
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 4
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 4
49474: NEG
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 4
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 4
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 5
49530: NEG
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 5
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 5
49553: NEG
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 3
49565: NEG
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: LD_INT 3
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: LD_INT 4
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: LD_INT 3
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 4
49636: NEG
49637: PUSH
49638: LD_INT 3
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 4
49648: NEG
49649: PUSH
49650: LD_INT 4
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: LD_INT 4
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 4
49672: NEG
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 4
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 5
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 4
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 3
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 4
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 5
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: LD_INT 5
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49831: LD_ADDR_VAR 0 31
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 4
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 4
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 5
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 5
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 4
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 5
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: LD_INT 3
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 3
49942: NEG
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: NEG
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 4
49987: NEG
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 4
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 4
50010: NEG
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 4
50033: NEG
50034: PUSH
50035: LD_INT 4
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 4
50045: NEG
50046: PUSH
50047: LD_INT 5
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 3
50057: NEG
50058: PUSH
50059: LD_INT 4
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 3
50069: NEG
50070: PUSH
50071: LD_INT 3
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 4
50081: NEG
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 5
50093: NEG
50094: PUSH
50095: LD_INT 4
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 5
50105: NEG
50106: PUSH
50107: LD_INT 5
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: LD_INT 5
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 5
50129: NEG
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 3
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 4
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 3
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 2
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: LD_INT 3
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: LD_INT 4
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: LD_INT 4
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 4
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 4
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 5
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 5
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 4
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 5
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50381: LD_ADDR_VAR 0 32
50385: PUSH
50386: LD_INT 4
50388: NEG
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 4
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 3
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 4
50433: NEG
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 5
50444: NEG
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 5
50455: NEG
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 5
50467: NEG
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 3
50479: NEG
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 3
50502: NEG
50503: PUSH
50504: LD_INT 4
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: LD_INT 3
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 3
50538: NEG
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 4
50550: NEG
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 4
50562: NEG
50563: PUSH
50564: LD_INT 4
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: LD_INT 4
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 4
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 4
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 5
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 4
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: LD_INT 4
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 5
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: LD_INT 5
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 3
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 4
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 4
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 3
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 4
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 4
50793: PUSH
50794: LD_INT 4
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 4
50803: PUSH
50804: LD_INT 3
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 5
50813: PUSH
50814: LD_INT 4
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 5
50823: PUSH
50824: LD_INT 5
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 4
50833: PUSH
50834: LD_INT 5
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 3
50843: PUSH
50844: LD_INT 4
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 3
50853: PUSH
50854: LD_INT 3
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 5
50863: PUSH
50864: LD_INT 3
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: PUSH
50874: LD_INT 5
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50928: LD_ADDR_VAR 0 33
50932: PUSH
50933: LD_INT 4
50935: NEG
50936: PUSH
50937: LD_INT 4
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 4
50947: NEG
50948: PUSH
50949: LD_INT 5
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 3
50959: NEG
50960: PUSH
50961: LD_INT 4
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: LD_INT 3
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 4
50983: NEG
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 5
50995: NEG
50996: PUSH
50997: LD_INT 4
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 5
51007: NEG
51008: PUSH
51009: LD_INT 5
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 3
51019: NEG
51020: PUSH
51021: LD_INT 5
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 5
51031: NEG
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 4
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 3
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 3
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 4
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 4
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 4
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 4
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 5
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 5
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 4
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 3
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 5
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 3
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 4
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 4
51268: PUSH
51269: LD_INT 4
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: LD_INT 4
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: LD_INT 3
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 4
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: LD_INT 4
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 4
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 3
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 4
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 5
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 5
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 4
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: LD_INT 5
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 3
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51466: LD_ADDR_VAR 0 34
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: LD_INT 4
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 5
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 4
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 3
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 3
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 4
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: LD_INT 5
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: LD_INT 3
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: LD_INT 5
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 3
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 3
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 4
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 4
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 4
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 4
51668: PUSH
51669: LD_INT 4
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 4
51678: PUSH
51679: LD_INT 3
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 5
51688: PUSH
51689: LD_INT 4
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 5
51698: PUSH
51699: LD_INT 5
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 4
51708: PUSH
51709: LD_INT 5
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: LD_INT 4
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 5
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: PUSH
51749: LD_INT 5
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 3
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: LD_INT 3
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 4
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 4
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 3
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: LD_INT 4
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 4
51851: NEG
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 4
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 3
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 4
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 5
51907: NEG
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 5
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 5
51930: NEG
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: ST_TO_ADDR
// end ; end ;
51998: GO 52001
52000: POP
// case btype of b_depot , b_warehouse :
52001: LD_VAR 0 1
52005: PUSH
52006: LD_INT 0
52008: DOUBLE
52009: EQUAL
52010: IFTRUE 52020
52012: LD_INT 1
52014: DOUBLE
52015: EQUAL
52016: IFTRUE 52020
52018: GO 52221
52020: POP
// case nation of nation_american :
52021: LD_VAR 0 5
52025: PUSH
52026: LD_INT 1
52028: DOUBLE
52029: EQUAL
52030: IFTRUE 52034
52032: GO 52090
52034: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52035: LD_ADDR_VAR 0 9
52039: PUSH
52040: LD_VAR 0 11
52044: PUSH
52045: LD_VAR 0 12
52049: PUSH
52050: LD_VAR 0 13
52054: PUSH
52055: LD_VAR 0 14
52059: PUSH
52060: LD_VAR 0 15
52064: PUSH
52065: LD_VAR 0 16
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: PUSH
52078: LD_VAR 0 4
52082: PUSH
52083: LD_INT 1
52085: PLUS
52086: ARRAY
52087: ST_TO_ADDR
52088: GO 52219
52090: LD_INT 2
52092: DOUBLE
52093: EQUAL
52094: IFTRUE 52098
52096: GO 52154
52098: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52099: LD_ADDR_VAR 0 9
52103: PUSH
52104: LD_VAR 0 17
52108: PUSH
52109: LD_VAR 0 18
52113: PUSH
52114: LD_VAR 0 19
52118: PUSH
52119: LD_VAR 0 20
52123: PUSH
52124: LD_VAR 0 21
52128: PUSH
52129: LD_VAR 0 22
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: PUSH
52142: LD_VAR 0 4
52146: PUSH
52147: LD_INT 1
52149: PLUS
52150: ARRAY
52151: ST_TO_ADDR
52152: GO 52219
52154: LD_INT 3
52156: DOUBLE
52157: EQUAL
52158: IFTRUE 52162
52160: GO 52218
52162: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52163: LD_ADDR_VAR 0 9
52167: PUSH
52168: LD_VAR 0 23
52172: PUSH
52173: LD_VAR 0 24
52177: PUSH
52178: LD_VAR 0 25
52182: PUSH
52183: LD_VAR 0 26
52187: PUSH
52188: LD_VAR 0 27
52192: PUSH
52193: LD_VAR 0 28
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: PUSH
52206: LD_VAR 0 4
52210: PUSH
52211: LD_INT 1
52213: PLUS
52214: ARRAY
52215: ST_TO_ADDR
52216: GO 52219
52218: POP
52219: GO 52774
52221: LD_INT 2
52223: DOUBLE
52224: EQUAL
52225: IFTRUE 52235
52227: LD_INT 3
52229: DOUBLE
52230: EQUAL
52231: IFTRUE 52235
52233: GO 52291
52235: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52236: LD_ADDR_VAR 0 9
52240: PUSH
52241: LD_VAR 0 29
52245: PUSH
52246: LD_VAR 0 30
52250: PUSH
52251: LD_VAR 0 31
52255: PUSH
52256: LD_VAR 0 32
52260: PUSH
52261: LD_VAR 0 33
52265: PUSH
52266: LD_VAR 0 34
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: PUSH
52279: LD_VAR 0 4
52283: PUSH
52284: LD_INT 1
52286: PLUS
52287: ARRAY
52288: ST_TO_ADDR
52289: GO 52774
52291: LD_INT 16
52293: DOUBLE
52294: EQUAL
52295: IFTRUE 52353
52297: LD_INT 17
52299: DOUBLE
52300: EQUAL
52301: IFTRUE 52353
52303: LD_INT 18
52305: DOUBLE
52306: EQUAL
52307: IFTRUE 52353
52309: LD_INT 19
52311: DOUBLE
52312: EQUAL
52313: IFTRUE 52353
52315: LD_INT 22
52317: DOUBLE
52318: EQUAL
52319: IFTRUE 52353
52321: LD_INT 20
52323: DOUBLE
52324: EQUAL
52325: IFTRUE 52353
52327: LD_INT 21
52329: DOUBLE
52330: EQUAL
52331: IFTRUE 52353
52333: LD_INT 23
52335: DOUBLE
52336: EQUAL
52337: IFTRUE 52353
52339: LD_INT 24
52341: DOUBLE
52342: EQUAL
52343: IFTRUE 52353
52345: LD_INT 25
52347: DOUBLE
52348: EQUAL
52349: IFTRUE 52353
52351: GO 52409
52353: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52354: LD_ADDR_VAR 0 9
52358: PUSH
52359: LD_VAR 0 35
52363: PUSH
52364: LD_VAR 0 36
52368: PUSH
52369: LD_VAR 0 37
52373: PUSH
52374: LD_VAR 0 38
52378: PUSH
52379: LD_VAR 0 39
52383: PUSH
52384: LD_VAR 0 40
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: PUSH
52397: LD_VAR 0 4
52401: PUSH
52402: LD_INT 1
52404: PLUS
52405: ARRAY
52406: ST_TO_ADDR
52407: GO 52774
52409: LD_INT 6
52411: DOUBLE
52412: EQUAL
52413: IFTRUE 52465
52415: LD_INT 7
52417: DOUBLE
52418: EQUAL
52419: IFTRUE 52465
52421: LD_INT 8
52423: DOUBLE
52424: EQUAL
52425: IFTRUE 52465
52427: LD_INT 13
52429: DOUBLE
52430: EQUAL
52431: IFTRUE 52465
52433: LD_INT 12
52435: DOUBLE
52436: EQUAL
52437: IFTRUE 52465
52439: LD_INT 15
52441: DOUBLE
52442: EQUAL
52443: IFTRUE 52465
52445: LD_INT 11
52447: DOUBLE
52448: EQUAL
52449: IFTRUE 52465
52451: LD_INT 14
52453: DOUBLE
52454: EQUAL
52455: IFTRUE 52465
52457: LD_INT 10
52459: DOUBLE
52460: EQUAL
52461: IFTRUE 52465
52463: GO 52521
52465: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52466: LD_ADDR_VAR 0 9
52470: PUSH
52471: LD_VAR 0 41
52475: PUSH
52476: LD_VAR 0 42
52480: PUSH
52481: LD_VAR 0 43
52485: PUSH
52486: LD_VAR 0 44
52490: PUSH
52491: LD_VAR 0 45
52495: PUSH
52496: LD_VAR 0 46
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: PUSH
52509: LD_VAR 0 4
52513: PUSH
52514: LD_INT 1
52516: PLUS
52517: ARRAY
52518: ST_TO_ADDR
52519: GO 52774
52521: LD_INT 36
52523: DOUBLE
52524: EQUAL
52525: IFTRUE 52529
52527: GO 52585
52529: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52530: LD_ADDR_VAR 0 9
52534: PUSH
52535: LD_VAR 0 47
52539: PUSH
52540: LD_VAR 0 48
52544: PUSH
52545: LD_VAR 0 49
52549: PUSH
52550: LD_VAR 0 50
52554: PUSH
52555: LD_VAR 0 51
52559: PUSH
52560: LD_VAR 0 52
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: PUSH
52573: LD_VAR 0 4
52577: PUSH
52578: LD_INT 1
52580: PLUS
52581: ARRAY
52582: ST_TO_ADDR
52583: GO 52774
52585: LD_INT 4
52587: DOUBLE
52588: EQUAL
52589: IFTRUE 52611
52591: LD_INT 5
52593: DOUBLE
52594: EQUAL
52595: IFTRUE 52611
52597: LD_INT 34
52599: DOUBLE
52600: EQUAL
52601: IFTRUE 52611
52603: LD_INT 37
52605: DOUBLE
52606: EQUAL
52607: IFTRUE 52611
52609: GO 52667
52611: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52612: LD_ADDR_VAR 0 9
52616: PUSH
52617: LD_VAR 0 53
52621: PUSH
52622: LD_VAR 0 54
52626: PUSH
52627: LD_VAR 0 55
52631: PUSH
52632: LD_VAR 0 56
52636: PUSH
52637: LD_VAR 0 57
52641: PUSH
52642: LD_VAR 0 58
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: PUSH
52655: LD_VAR 0 4
52659: PUSH
52660: LD_INT 1
52662: PLUS
52663: ARRAY
52664: ST_TO_ADDR
52665: GO 52774
52667: LD_INT 31
52669: DOUBLE
52670: EQUAL
52671: IFTRUE 52717
52673: LD_INT 32
52675: DOUBLE
52676: EQUAL
52677: IFTRUE 52717
52679: LD_INT 33
52681: DOUBLE
52682: EQUAL
52683: IFTRUE 52717
52685: LD_INT 27
52687: DOUBLE
52688: EQUAL
52689: IFTRUE 52717
52691: LD_INT 26
52693: DOUBLE
52694: EQUAL
52695: IFTRUE 52717
52697: LD_INT 28
52699: DOUBLE
52700: EQUAL
52701: IFTRUE 52717
52703: LD_INT 29
52705: DOUBLE
52706: EQUAL
52707: IFTRUE 52717
52709: LD_INT 30
52711: DOUBLE
52712: EQUAL
52713: IFTRUE 52717
52715: GO 52773
52717: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52718: LD_ADDR_VAR 0 9
52722: PUSH
52723: LD_VAR 0 59
52727: PUSH
52728: LD_VAR 0 60
52732: PUSH
52733: LD_VAR 0 61
52737: PUSH
52738: LD_VAR 0 62
52742: PUSH
52743: LD_VAR 0 63
52747: PUSH
52748: LD_VAR 0 64
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: PUSH
52761: LD_VAR 0 4
52765: PUSH
52766: LD_INT 1
52768: PLUS
52769: ARRAY
52770: ST_TO_ADDR
52771: GO 52774
52773: POP
// temp_list2 = [ ] ;
52774: LD_ADDR_VAR 0 10
52778: PUSH
52779: EMPTY
52780: ST_TO_ADDR
// for i in temp_list do
52781: LD_ADDR_VAR 0 8
52785: PUSH
52786: LD_VAR 0 9
52790: PUSH
52791: FOR_IN
52792: IFFALSE 52844
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52794: LD_ADDR_VAR 0 10
52798: PUSH
52799: LD_VAR 0 10
52803: PUSH
52804: LD_VAR 0 8
52808: PUSH
52809: LD_INT 1
52811: ARRAY
52812: PUSH
52813: LD_VAR 0 2
52817: PLUS
52818: PUSH
52819: LD_VAR 0 8
52823: PUSH
52824: LD_INT 2
52826: ARRAY
52827: PUSH
52828: LD_VAR 0 3
52832: PLUS
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: ADD
52841: ST_TO_ADDR
52842: GO 52791
52844: POP
52845: POP
// result = temp_list2 ;
52846: LD_ADDR_VAR 0 7
52850: PUSH
52851: LD_VAR 0 10
52855: ST_TO_ADDR
// end ;
52856: LD_VAR 0 7
52860: RET
// export function EnemyInRange ( unit , dist ) ; begin
52861: LD_INT 0
52863: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52864: LD_ADDR_VAR 0 3
52868: PUSH
52869: LD_VAR 0 1
52873: PPUSH
52874: CALL_OW 255
52878: PPUSH
52879: LD_VAR 0 1
52883: PPUSH
52884: CALL_OW 250
52888: PPUSH
52889: LD_VAR 0 1
52893: PPUSH
52894: CALL_OW 251
52898: PPUSH
52899: LD_VAR 0 2
52903: PPUSH
52904: CALL 26965 0 4
52908: PUSH
52909: LD_INT 4
52911: ARRAY
52912: ST_TO_ADDR
// end ;
52913: LD_VAR 0 3
52917: RET
// export function PlayerSeeMe ( unit ) ; begin
52918: LD_INT 0
52920: PPUSH
// result := See ( your_side , unit ) ;
52921: LD_ADDR_VAR 0 2
52925: PUSH
52926: LD_OWVAR 2
52930: PPUSH
52931: LD_VAR 0 1
52935: PPUSH
52936: CALL_OW 292
52940: ST_TO_ADDR
// end ;
52941: LD_VAR 0 2
52945: RET
// export function ReverseDir ( unit ) ; begin
52946: LD_INT 0
52948: PPUSH
// if not unit then
52949: LD_VAR 0 1
52953: NOT
52954: IFFALSE 52958
// exit ;
52956: GO 52981
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52958: LD_ADDR_VAR 0 2
52962: PUSH
52963: LD_VAR 0 1
52967: PPUSH
52968: CALL_OW 254
52972: PUSH
52973: LD_INT 3
52975: PLUS
52976: PUSH
52977: LD_INT 6
52979: MOD
52980: ST_TO_ADDR
// end ;
52981: LD_VAR 0 2
52985: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52986: LD_INT 0
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
// if not hexes then
52993: LD_VAR 0 2
52997: NOT
52998: IFFALSE 53002
// exit ;
53000: GO 53150
// dist := 9999 ;
53002: LD_ADDR_VAR 0 5
53006: PUSH
53007: LD_INT 9999
53009: ST_TO_ADDR
// for i = 1 to hexes do
53010: LD_ADDR_VAR 0 4
53014: PUSH
53015: DOUBLE
53016: LD_INT 1
53018: DEC
53019: ST_TO_ADDR
53020: LD_VAR 0 2
53024: PUSH
53025: FOR_TO
53026: IFFALSE 53138
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53028: LD_VAR 0 1
53032: PPUSH
53033: LD_VAR 0 2
53037: PUSH
53038: LD_VAR 0 4
53042: ARRAY
53043: PUSH
53044: LD_INT 1
53046: ARRAY
53047: PPUSH
53048: LD_VAR 0 2
53052: PUSH
53053: LD_VAR 0 4
53057: ARRAY
53058: PUSH
53059: LD_INT 2
53061: ARRAY
53062: PPUSH
53063: CALL_OW 297
53067: PUSH
53068: LD_VAR 0 5
53072: LESS
53073: IFFALSE 53136
// begin hex := hexes [ i ] ;
53075: LD_ADDR_VAR 0 7
53079: PUSH
53080: LD_VAR 0 2
53084: PUSH
53085: LD_VAR 0 4
53089: ARRAY
53090: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53091: LD_ADDR_VAR 0 5
53095: PUSH
53096: LD_VAR 0 1
53100: PPUSH
53101: LD_VAR 0 2
53105: PUSH
53106: LD_VAR 0 4
53110: ARRAY
53111: PUSH
53112: LD_INT 1
53114: ARRAY
53115: PPUSH
53116: LD_VAR 0 2
53120: PUSH
53121: LD_VAR 0 4
53125: ARRAY
53126: PUSH
53127: LD_INT 2
53129: ARRAY
53130: PPUSH
53131: CALL_OW 297
53135: ST_TO_ADDR
// end ; end ;
53136: GO 53025
53138: POP
53139: POP
// result := hex ;
53140: LD_ADDR_VAR 0 3
53144: PUSH
53145: LD_VAR 0 7
53149: ST_TO_ADDR
// end ;
53150: LD_VAR 0 3
53154: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53155: LD_INT 0
53157: PPUSH
53158: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53159: LD_VAR 0 1
53163: NOT
53164: PUSH
53165: LD_VAR 0 1
53169: PUSH
53170: LD_INT 21
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 23
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PPUSH
53194: CALL_OW 69
53198: IN
53199: NOT
53200: OR
53201: IFFALSE 53205
// exit ;
53203: GO 53252
// for i = 1 to 3 do
53205: LD_ADDR_VAR 0 3
53209: PUSH
53210: DOUBLE
53211: LD_INT 1
53213: DEC
53214: ST_TO_ADDR
53215: LD_INT 3
53217: PUSH
53218: FOR_TO
53219: IFFALSE 53250
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53221: LD_VAR 0 1
53225: PPUSH
53226: CALL_OW 250
53230: PPUSH
53231: LD_VAR 0 1
53235: PPUSH
53236: CALL_OW 251
53240: PPUSH
53241: LD_INT 1
53243: PPUSH
53244: CALL_OW 453
53248: GO 53218
53250: POP
53251: POP
// end ;
53252: LD_VAR 0 2
53256: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53257: LD_INT 0
53259: PPUSH
53260: PPUSH
53261: PPUSH
53262: PPUSH
53263: PPUSH
53264: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53265: LD_VAR 0 1
53269: NOT
53270: PUSH
53271: LD_VAR 0 2
53275: NOT
53276: OR
53277: PUSH
53278: LD_VAR 0 1
53282: PPUSH
53283: CALL_OW 314
53287: OR
53288: IFFALSE 53292
// exit ;
53290: GO 53733
// x := GetX ( enemy_unit ) ;
53292: LD_ADDR_VAR 0 7
53296: PUSH
53297: LD_VAR 0 2
53301: PPUSH
53302: CALL_OW 250
53306: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53307: LD_ADDR_VAR 0 8
53311: PUSH
53312: LD_VAR 0 2
53316: PPUSH
53317: CALL_OW 251
53321: ST_TO_ADDR
// if not x or not y then
53322: LD_VAR 0 7
53326: NOT
53327: PUSH
53328: LD_VAR 0 8
53332: NOT
53333: OR
53334: IFFALSE 53338
// exit ;
53336: GO 53733
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53338: LD_ADDR_VAR 0 6
53342: PUSH
53343: LD_VAR 0 7
53347: PPUSH
53348: LD_INT 0
53350: PPUSH
53351: LD_INT 4
53353: PPUSH
53354: CALL_OW 272
53358: PUSH
53359: LD_VAR 0 8
53363: PPUSH
53364: LD_INT 0
53366: PPUSH
53367: LD_INT 4
53369: PPUSH
53370: CALL_OW 273
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_VAR 0 7
53383: PPUSH
53384: LD_INT 1
53386: PPUSH
53387: LD_INT 4
53389: PPUSH
53390: CALL_OW 272
53394: PUSH
53395: LD_VAR 0 8
53399: PPUSH
53400: LD_INT 1
53402: PPUSH
53403: LD_INT 4
53405: PPUSH
53406: CALL_OW 273
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_VAR 0 7
53419: PPUSH
53420: LD_INT 2
53422: PPUSH
53423: LD_INT 4
53425: PPUSH
53426: CALL_OW 272
53430: PUSH
53431: LD_VAR 0 8
53435: PPUSH
53436: LD_INT 2
53438: PPUSH
53439: LD_INT 4
53441: PPUSH
53442: CALL_OW 273
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_VAR 0 7
53455: PPUSH
53456: LD_INT 3
53458: PPUSH
53459: LD_INT 4
53461: PPUSH
53462: CALL_OW 272
53466: PUSH
53467: LD_VAR 0 8
53471: PPUSH
53472: LD_INT 3
53474: PPUSH
53475: LD_INT 4
53477: PPUSH
53478: CALL_OW 273
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_VAR 0 7
53491: PPUSH
53492: LD_INT 4
53494: PPUSH
53495: LD_INT 4
53497: PPUSH
53498: CALL_OW 272
53502: PUSH
53503: LD_VAR 0 8
53507: PPUSH
53508: LD_INT 4
53510: PPUSH
53511: LD_INT 4
53513: PPUSH
53514: CALL_OW 273
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_VAR 0 7
53527: PPUSH
53528: LD_INT 5
53530: PPUSH
53531: LD_INT 4
53533: PPUSH
53534: CALL_OW 272
53538: PUSH
53539: LD_VAR 0 8
53543: PPUSH
53544: LD_INT 5
53546: PPUSH
53547: LD_INT 4
53549: PPUSH
53550: CALL_OW 273
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// for i = tmp downto 1 do
53567: LD_ADDR_VAR 0 4
53571: PUSH
53572: DOUBLE
53573: LD_VAR 0 6
53577: INC
53578: ST_TO_ADDR
53579: LD_INT 1
53581: PUSH
53582: FOR_DOWNTO
53583: IFFALSE 53684
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53585: LD_VAR 0 6
53589: PUSH
53590: LD_VAR 0 4
53594: ARRAY
53595: PUSH
53596: LD_INT 1
53598: ARRAY
53599: PPUSH
53600: LD_VAR 0 6
53604: PUSH
53605: LD_VAR 0 4
53609: ARRAY
53610: PUSH
53611: LD_INT 2
53613: ARRAY
53614: PPUSH
53615: CALL_OW 488
53619: NOT
53620: PUSH
53621: LD_VAR 0 6
53625: PUSH
53626: LD_VAR 0 4
53630: ARRAY
53631: PUSH
53632: LD_INT 1
53634: ARRAY
53635: PPUSH
53636: LD_VAR 0 6
53640: PUSH
53641: LD_VAR 0 4
53645: ARRAY
53646: PUSH
53647: LD_INT 2
53649: ARRAY
53650: PPUSH
53651: CALL_OW 428
53655: PUSH
53656: LD_INT 0
53658: NONEQUAL
53659: OR
53660: IFFALSE 53682
// tmp := Delete ( tmp , i ) ;
53662: LD_ADDR_VAR 0 6
53666: PUSH
53667: LD_VAR 0 6
53671: PPUSH
53672: LD_VAR 0 4
53676: PPUSH
53677: CALL_OW 3
53681: ST_TO_ADDR
53682: GO 53582
53684: POP
53685: POP
// j := GetClosestHex ( unit , tmp ) ;
53686: LD_ADDR_VAR 0 5
53690: PUSH
53691: LD_VAR 0 1
53695: PPUSH
53696: LD_VAR 0 6
53700: PPUSH
53701: CALL 52986 0 2
53705: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53706: LD_VAR 0 1
53710: PPUSH
53711: LD_VAR 0 5
53715: PUSH
53716: LD_INT 1
53718: ARRAY
53719: PPUSH
53720: LD_VAR 0 5
53724: PUSH
53725: LD_INT 2
53727: ARRAY
53728: PPUSH
53729: CALL_OW 111
// end ;
53733: LD_VAR 0 3
53737: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53738: LD_INT 0
53740: PPUSH
53741: PPUSH
53742: PPUSH
// uc_side = 0 ;
53743: LD_ADDR_OWVAR 20
53747: PUSH
53748: LD_INT 0
53750: ST_TO_ADDR
// uc_nation = 0 ;
53751: LD_ADDR_OWVAR 21
53755: PUSH
53756: LD_INT 0
53758: ST_TO_ADDR
// InitHc_All ( ) ;
53759: CALL_OW 584
// InitVc ;
53763: CALL_OW 20
// if mastodonts then
53767: LD_VAR 0 6
53771: IFFALSE 53838
// for i = 1 to mastodonts do
53773: LD_ADDR_VAR 0 11
53777: PUSH
53778: DOUBLE
53779: LD_INT 1
53781: DEC
53782: ST_TO_ADDR
53783: LD_VAR 0 6
53787: PUSH
53788: FOR_TO
53789: IFFALSE 53836
// begin vc_chassis := 31 ;
53791: LD_ADDR_OWVAR 37
53795: PUSH
53796: LD_INT 31
53798: ST_TO_ADDR
// vc_control := control_rider ;
53799: LD_ADDR_OWVAR 38
53803: PUSH
53804: LD_INT 4
53806: ST_TO_ADDR
// animal := CreateVehicle ;
53807: LD_ADDR_VAR 0 12
53811: PUSH
53812: CALL_OW 45
53816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53817: LD_VAR 0 12
53821: PPUSH
53822: LD_VAR 0 8
53826: PPUSH
53827: LD_INT 0
53829: PPUSH
53830: CALL 56026 0 3
// end ;
53834: GO 53788
53836: POP
53837: POP
// if horses then
53838: LD_VAR 0 5
53842: IFFALSE 53909
// for i = 1 to horses do
53844: LD_ADDR_VAR 0 11
53848: PUSH
53849: DOUBLE
53850: LD_INT 1
53852: DEC
53853: ST_TO_ADDR
53854: LD_VAR 0 5
53858: PUSH
53859: FOR_TO
53860: IFFALSE 53907
// begin hc_class := 21 ;
53862: LD_ADDR_OWVAR 28
53866: PUSH
53867: LD_INT 21
53869: ST_TO_ADDR
// hc_gallery :=  ;
53870: LD_ADDR_OWVAR 33
53874: PUSH
53875: LD_STRING 
53877: ST_TO_ADDR
// animal := CreateHuman ;
53878: LD_ADDR_VAR 0 12
53882: PUSH
53883: CALL_OW 44
53887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53888: LD_VAR 0 12
53892: PPUSH
53893: LD_VAR 0 8
53897: PPUSH
53898: LD_INT 0
53900: PPUSH
53901: CALL 56026 0 3
// end ;
53905: GO 53859
53907: POP
53908: POP
// if birds then
53909: LD_VAR 0 1
53913: IFFALSE 53980
// for i = 1 to birds do
53915: LD_ADDR_VAR 0 11
53919: PUSH
53920: DOUBLE
53921: LD_INT 1
53923: DEC
53924: ST_TO_ADDR
53925: LD_VAR 0 1
53929: PUSH
53930: FOR_TO
53931: IFFALSE 53978
// begin hc_class = 18 ;
53933: LD_ADDR_OWVAR 28
53937: PUSH
53938: LD_INT 18
53940: ST_TO_ADDR
// hc_gallery =  ;
53941: LD_ADDR_OWVAR 33
53945: PUSH
53946: LD_STRING 
53948: ST_TO_ADDR
// animal := CreateHuman ;
53949: LD_ADDR_VAR 0 12
53953: PUSH
53954: CALL_OW 44
53958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53959: LD_VAR 0 12
53963: PPUSH
53964: LD_VAR 0 8
53968: PPUSH
53969: LD_INT 0
53971: PPUSH
53972: CALL 56026 0 3
// end ;
53976: GO 53930
53978: POP
53979: POP
// if tigers then
53980: LD_VAR 0 2
53984: IFFALSE 54068
// for i = 1 to tigers do
53986: LD_ADDR_VAR 0 11
53990: PUSH
53991: DOUBLE
53992: LD_INT 1
53994: DEC
53995: ST_TO_ADDR
53996: LD_VAR 0 2
54000: PUSH
54001: FOR_TO
54002: IFFALSE 54066
// begin hc_class = class_tiger ;
54004: LD_ADDR_OWVAR 28
54008: PUSH
54009: LD_INT 14
54011: ST_TO_ADDR
// hc_gallery =  ;
54012: LD_ADDR_OWVAR 33
54016: PUSH
54017: LD_STRING 
54019: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54020: LD_ADDR_OWVAR 35
54024: PUSH
54025: LD_INT 7
54027: NEG
54028: PPUSH
54029: LD_INT 7
54031: PPUSH
54032: CALL_OW 12
54036: ST_TO_ADDR
// animal := CreateHuman ;
54037: LD_ADDR_VAR 0 12
54041: PUSH
54042: CALL_OW 44
54046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54047: LD_VAR 0 12
54051: PPUSH
54052: LD_VAR 0 8
54056: PPUSH
54057: LD_INT 0
54059: PPUSH
54060: CALL 56026 0 3
// end ;
54064: GO 54001
54066: POP
54067: POP
// if apemans then
54068: LD_VAR 0 3
54072: IFFALSE 54195
// for i = 1 to apemans do
54074: LD_ADDR_VAR 0 11
54078: PUSH
54079: DOUBLE
54080: LD_INT 1
54082: DEC
54083: ST_TO_ADDR
54084: LD_VAR 0 3
54088: PUSH
54089: FOR_TO
54090: IFFALSE 54193
// begin hc_class = class_apeman ;
54092: LD_ADDR_OWVAR 28
54096: PUSH
54097: LD_INT 12
54099: ST_TO_ADDR
// hc_gallery =  ;
54100: LD_ADDR_OWVAR 33
54104: PUSH
54105: LD_STRING 
54107: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54108: LD_ADDR_OWVAR 35
54112: PUSH
54113: LD_INT 5
54115: NEG
54116: PPUSH
54117: LD_INT 5
54119: PPUSH
54120: CALL_OW 12
54124: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54125: LD_ADDR_OWVAR 31
54129: PUSH
54130: LD_INT 1
54132: PPUSH
54133: LD_INT 3
54135: PPUSH
54136: CALL_OW 12
54140: PUSH
54141: LD_INT 1
54143: PPUSH
54144: LD_INT 3
54146: PPUSH
54147: CALL_OW 12
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// animal := CreateHuman ;
54164: LD_ADDR_VAR 0 12
54168: PUSH
54169: CALL_OW 44
54173: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54174: LD_VAR 0 12
54178: PPUSH
54179: LD_VAR 0 8
54183: PPUSH
54184: LD_INT 0
54186: PPUSH
54187: CALL 56026 0 3
// end ;
54191: GO 54089
54193: POP
54194: POP
// if enchidnas then
54195: LD_VAR 0 4
54199: IFFALSE 54266
// for i = 1 to enchidnas do
54201: LD_ADDR_VAR 0 11
54205: PUSH
54206: DOUBLE
54207: LD_INT 1
54209: DEC
54210: ST_TO_ADDR
54211: LD_VAR 0 4
54215: PUSH
54216: FOR_TO
54217: IFFALSE 54264
// begin hc_class = 13 ;
54219: LD_ADDR_OWVAR 28
54223: PUSH
54224: LD_INT 13
54226: ST_TO_ADDR
// hc_gallery =  ;
54227: LD_ADDR_OWVAR 33
54231: PUSH
54232: LD_STRING 
54234: ST_TO_ADDR
// animal := CreateHuman ;
54235: LD_ADDR_VAR 0 12
54239: PUSH
54240: CALL_OW 44
54244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54245: LD_VAR 0 12
54249: PPUSH
54250: LD_VAR 0 8
54254: PPUSH
54255: LD_INT 0
54257: PPUSH
54258: CALL 56026 0 3
// end ;
54262: GO 54216
54264: POP
54265: POP
// if fishes then
54266: LD_VAR 0 7
54270: IFFALSE 54337
// for i = 1 to fishes do
54272: LD_ADDR_VAR 0 11
54276: PUSH
54277: DOUBLE
54278: LD_INT 1
54280: DEC
54281: ST_TO_ADDR
54282: LD_VAR 0 7
54286: PUSH
54287: FOR_TO
54288: IFFALSE 54335
// begin hc_class = 20 ;
54290: LD_ADDR_OWVAR 28
54294: PUSH
54295: LD_INT 20
54297: ST_TO_ADDR
// hc_gallery =  ;
54298: LD_ADDR_OWVAR 33
54302: PUSH
54303: LD_STRING 
54305: ST_TO_ADDR
// animal := CreateHuman ;
54306: LD_ADDR_VAR 0 12
54310: PUSH
54311: CALL_OW 44
54315: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54316: LD_VAR 0 12
54320: PPUSH
54321: LD_VAR 0 9
54325: PPUSH
54326: LD_INT 0
54328: PPUSH
54329: CALL 56026 0 3
// end ;
54333: GO 54287
54335: POP
54336: POP
// end ;
54337: LD_VAR 0 10
54341: RET
// export function WantHeal ( sci , unit ) ; begin
54342: LD_INT 0
54344: PPUSH
// if GetTaskList ( sci ) > 0 then
54345: LD_VAR 0 1
54349: PPUSH
54350: CALL_OW 437
54354: PUSH
54355: LD_INT 0
54357: GREATER
54358: IFFALSE 54428
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54360: LD_VAR 0 1
54364: PPUSH
54365: CALL_OW 437
54369: PUSH
54370: LD_INT 1
54372: ARRAY
54373: PUSH
54374: LD_INT 1
54376: ARRAY
54377: PUSH
54378: LD_STRING l
54380: EQUAL
54381: PUSH
54382: LD_VAR 0 1
54386: PPUSH
54387: CALL_OW 437
54391: PUSH
54392: LD_INT 1
54394: ARRAY
54395: PUSH
54396: LD_INT 4
54398: ARRAY
54399: PUSH
54400: LD_VAR 0 2
54404: EQUAL
54405: AND
54406: IFFALSE 54418
// result := true else
54408: LD_ADDR_VAR 0 3
54412: PUSH
54413: LD_INT 1
54415: ST_TO_ADDR
54416: GO 54426
// result := false ;
54418: LD_ADDR_VAR 0 3
54422: PUSH
54423: LD_INT 0
54425: ST_TO_ADDR
// end else
54426: GO 54436
// result := false ;
54428: LD_ADDR_VAR 0 3
54432: PUSH
54433: LD_INT 0
54435: ST_TO_ADDR
// end ;
54436: LD_VAR 0 3
54440: RET
// export function HealTarget ( sci ) ; begin
54441: LD_INT 0
54443: PPUSH
// if not sci then
54444: LD_VAR 0 1
54448: NOT
54449: IFFALSE 54453
// exit ;
54451: GO 54518
// result := 0 ;
54453: LD_ADDR_VAR 0 2
54457: PUSH
54458: LD_INT 0
54460: ST_TO_ADDR
// if GetTaskList ( sci ) then
54461: LD_VAR 0 1
54465: PPUSH
54466: CALL_OW 437
54470: IFFALSE 54518
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54472: LD_VAR 0 1
54476: PPUSH
54477: CALL_OW 437
54481: PUSH
54482: LD_INT 1
54484: ARRAY
54485: PUSH
54486: LD_INT 1
54488: ARRAY
54489: PUSH
54490: LD_STRING l
54492: EQUAL
54493: IFFALSE 54518
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54495: LD_ADDR_VAR 0 2
54499: PUSH
54500: LD_VAR 0 1
54504: PPUSH
54505: CALL_OW 437
54509: PUSH
54510: LD_INT 1
54512: ARRAY
54513: PUSH
54514: LD_INT 4
54516: ARRAY
54517: ST_TO_ADDR
// end ;
54518: LD_VAR 0 2
54522: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54523: LD_INT 0
54525: PPUSH
54526: PPUSH
54527: PPUSH
54528: PPUSH
// if not base_units then
54529: LD_VAR 0 1
54533: NOT
54534: IFFALSE 54538
// exit ;
54536: GO 54625
// result := false ;
54538: LD_ADDR_VAR 0 2
54542: PUSH
54543: LD_INT 0
54545: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54546: LD_ADDR_VAR 0 5
54550: PUSH
54551: LD_VAR 0 1
54555: PPUSH
54556: LD_INT 21
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PPUSH
54566: CALL_OW 72
54570: ST_TO_ADDR
// if not tmp then
54571: LD_VAR 0 5
54575: NOT
54576: IFFALSE 54580
// exit ;
54578: GO 54625
// for i in tmp do
54580: LD_ADDR_VAR 0 3
54584: PUSH
54585: LD_VAR 0 5
54589: PUSH
54590: FOR_IN
54591: IFFALSE 54623
// begin result := EnemyInRange ( i , 22 ) ;
54593: LD_ADDR_VAR 0 2
54597: PUSH
54598: LD_VAR 0 3
54602: PPUSH
54603: LD_INT 22
54605: PPUSH
54606: CALL 52861 0 2
54610: ST_TO_ADDR
// if result then
54611: LD_VAR 0 2
54615: IFFALSE 54621
// exit ;
54617: POP
54618: POP
54619: GO 54625
// end ;
54621: GO 54590
54623: POP
54624: POP
// end ;
54625: LD_VAR 0 2
54629: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54630: LD_INT 0
54632: PPUSH
54633: PPUSH
// if not units then
54634: LD_VAR 0 1
54638: NOT
54639: IFFALSE 54643
// exit ;
54641: GO 54713
// result := [ ] ;
54643: LD_ADDR_VAR 0 3
54647: PUSH
54648: EMPTY
54649: ST_TO_ADDR
// for i in units do
54650: LD_ADDR_VAR 0 4
54654: PUSH
54655: LD_VAR 0 1
54659: PUSH
54660: FOR_IN
54661: IFFALSE 54711
// if GetTag ( i ) = tag then
54663: LD_VAR 0 4
54667: PPUSH
54668: CALL_OW 110
54672: PUSH
54673: LD_VAR 0 2
54677: EQUAL
54678: IFFALSE 54709
// result := Insert ( result , result + 1 , i ) ;
54680: LD_ADDR_VAR 0 3
54684: PUSH
54685: LD_VAR 0 3
54689: PPUSH
54690: LD_VAR 0 3
54694: PUSH
54695: LD_INT 1
54697: PLUS
54698: PPUSH
54699: LD_VAR 0 4
54703: PPUSH
54704: CALL_OW 2
54708: ST_TO_ADDR
54709: GO 54660
54711: POP
54712: POP
// end ;
54713: LD_VAR 0 3
54717: RET
// export function IsDriver ( un ) ; begin
54718: LD_INT 0
54720: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54721: LD_ADDR_VAR 0 2
54725: PUSH
54726: LD_VAR 0 1
54730: PUSH
54731: LD_INT 55
54733: PUSH
54734: EMPTY
54735: LIST
54736: PPUSH
54737: CALL_OW 69
54741: IN
54742: ST_TO_ADDR
// end ;
54743: LD_VAR 0 2
54747: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54748: LD_INT 0
54750: PPUSH
54751: PPUSH
// list := [ ] ;
54752: LD_ADDR_VAR 0 5
54756: PUSH
54757: EMPTY
54758: ST_TO_ADDR
// case d of 0 :
54759: LD_VAR 0 3
54763: PUSH
54764: LD_INT 0
54766: DOUBLE
54767: EQUAL
54768: IFTRUE 54772
54770: GO 54905
54772: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54773: LD_ADDR_VAR 0 5
54777: PUSH
54778: LD_VAR 0 1
54782: PUSH
54783: LD_INT 4
54785: MINUS
54786: PUSH
54787: LD_VAR 0 2
54791: PUSH
54792: LD_INT 4
54794: MINUS
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: PUSH
54804: LD_VAR 0 1
54808: PUSH
54809: LD_INT 3
54811: MINUS
54812: PUSH
54813: LD_VAR 0 2
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: LIST
54825: PUSH
54826: LD_VAR 0 1
54830: PUSH
54831: LD_INT 4
54833: PLUS
54834: PUSH
54835: LD_VAR 0 2
54839: PUSH
54840: LD_INT 4
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: PUSH
54848: LD_VAR 0 1
54852: PUSH
54853: LD_INT 3
54855: PLUS
54856: PUSH
54857: LD_VAR 0 2
54861: PUSH
54862: LD_INT 3
54864: PLUS
54865: PUSH
54866: LD_INT 5
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: PUSH
54874: LD_VAR 0 1
54878: PUSH
54879: LD_VAR 0 2
54883: PUSH
54884: LD_INT 4
54886: PLUS
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// end ; 1 :
54903: GO 55603
54905: LD_INT 1
54907: DOUBLE
54908: EQUAL
54909: IFTRUE 54913
54911: GO 55046
54913: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54914: LD_ADDR_VAR 0 5
54918: PUSH
54919: LD_VAR 0 1
54923: PUSH
54924: LD_VAR 0 2
54928: PUSH
54929: LD_INT 4
54931: MINUS
54932: PUSH
54933: LD_INT 3
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: PUSH
54941: LD_VAR 0 1
54945: PUSH
54946: LD_INT 3
54948: MINUS
54949: PUSH
54950: LD_VAR 0 2
54954: PUSH
54955: LD_INT 3
54957: MINUS
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: LIST
54966: PUSH
54967: LD_VAR 0 1
54971: PUSH
54972: LD_INT 4
54974: MINUS
54975: PUSH
54976: LD_VAR 0 2
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: LIST
54988: PUSH
54989: LD_VAR 0 1
54993: PUSH
54994: LD_VAR 0 2
54998: PUSH
54999: LD_INT 3
55001: PLUS
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: LIST
55010: PUSH
55011: LD_VAR 0 1
55015: PUSH
55016: LD_INT 4
55018: PLUS
55019: PUSH
55020: LD_VAR 0 2
55024: PUSH
55025: LD_INT 4
55027: PLUS
55028: PUSH
55029: LD_INT 5
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: ST_TO_ADDR
// end ; 2 :
55044: GO 55603
55046: LD_INT 2
55048: DOUBLE
55049: EQUAL
55050: IFTRUE 55054
55052: GO 55183
55054: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55055: LD_ADDR_VAR 0 5
55059: PUSH
55060: LD_VAR 0 1
55064: PUSH
55065: LD_VAR 0 2
55069: PUSH
55070: LD_INT 3
55072: MINUS
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: PUSH
55082: LD_VAR 0 1
55086: PUSH
55087: LD_INT 4
55089: PLUS
55090: PUSH
55091: LD_VAR 0 2
55095: PUSH
55096: LD_INT 4
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: LIST
55103: PUSH
55104: LD_VAR 0 1
55108: PUSH
55109: LD_VAR 0 2
55113: PUSH
55114: LD_INT 4
55116: PLUS
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: PUSH
55126: LD_VAR 0 1
55130: PUSH
55131: LD_INT 3
55133: MINUS
55134: PUSH
55135: LD_VAR 0 2
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: PUSH
55148: LD_VAR 0 1
55152: PUSH
55153: LD_INT 4
55155: MINUS
55156: PUSH
55157: LD_VAR 0 2
55161: PUSH
55162: LD_INT 4
55164: MINUS
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: ST_TO_ADDR
// end ; 3 :
55181: GO 55603
55183: LD_INT 3
55185: DOUBLE
55186: EQUAL
55187: IFTRUE 55191
55189: GO 55324
55191: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55192: LD_ADDR_VAR 0 5
55196: PUSH
55197: LD_VAR 0 1
55201: PUSH
55202: LD_INT 3
55204: PLUS
55205: PUSH
55206: LD_VAR 0 2
55210: PUSH
55211: LD_INT 4
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: PUSH
55219: LD_VAR 0 1
55223: PUSH
55224: LD_INT 4
55226: PLUS
55227: PUSH
55228: LD_VAR 0 2
55232: PUSH
55233: LD_INT 4
55235: PLUS
55236: PUSH
55237: LD_INT 5
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: PUSH
55245: LD_VAR 0 1
55249: PUSH
55250: LD_INT 4
55252: MINUS
55253: PUSH
55254: LD_VAR 0 2
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: LIST
55266: PUSH
55267: LD_VAR 0 1
55271: PUSH
55272: LD_VAR 0 2
55276: PUSH
55277: LD_INT 4
55279: MINUS
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: LIST
55288: PUSH
55289: LD_VAR 0 1
55293: PUSH
55294: LD_INT 3
55296: MINUS
55297: PUSH
55298: LD_VAR 0 2
55302: PUSH
55303: LD_INT 3
55305: MINUS
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: ST_TO_ADDR
// end ; 4 :
55322: GO 55603
55324: LD_INT 4
55326: DOUBLE
55327: EQUAL
55328: IFTRUE 55332
55330: GO 55465
55332: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55333: LD_ADDR_VAR 0 5
55337: PUSH
55338: LD_VAR 0 1
55342: PUSH
55343: LD_VAR 0 2
55347: PUSH
55348: LD_INT 4
55350: PLUS
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: PUSH
55360: LD_VAR 0 1
55364: PUSH
55365: LD_INT 3
55367: PLUS
55368: PUSH
55369: LD_VAR 0 2
55373: PUSH
55374: LD_INT 3
55376: PLUS
55377: PUSH
55378: LD_INT 5
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: PUSH
55386: LD_VAR 0 1
55390: PUSH
55391: LD_INT 4
55393: PLUS
55394: PUSH
55395: LD_VAR 0 2
55399: PUSH
55400: LD_INT 4
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: PUSH
55408: LD_VAR 0 1
55412: PUSH
55413: LD_VAR 0 2
55417: PUSH
55418: LD_INT 3
55420: MINUS
55421: PUSH
55422: LD_INT 3
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: PUSH
55430: LD_VAR 0 1
55434: PUSH
55435: LD_INT 4
55437: MINUS
55438: PUSH
55439: LD_VAR 0 2
55443: PUSH
55444: LD_INT 4
55446: MINUS
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: LIST
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// end ; 5 :
55463: GO 55603
55465: LD_INT 5
55467: DOUBLE
55468: EQUAL
55469: IFTRUE 55473
55471: GO 55602
55473: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55474: LD_ADDR_VAR 0 5
55478: PUSH
55479: LD_VAR 0 1
55483: PUSH
55484: LD_INT 4
55486: MINUS
55487: PUSH
55488: LD_VAR 0 2
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: PUSH
55501: LD_VAR 0 1
55505: PUSH
55506: LD_VAR 0 2
55510: PUSH
55511: LD_INT 4
55513: MINUS
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: PUSH
55523: LD_VAR 0 1
55527: PUSH
55528: LD_INT 4
55530: PLUS
55531: PUSH
55532: LD_VAR 0 2
55536: PUSH
55537: LD_INT 4
55539: PLUS
55540: PUSH
55541: LD_INT 5
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: PUSH
55549: LD_VAR 0 1
55553: PUSH
55554: LD_INT 3
55556: PLUS
55557: PUSH
55558: LD_VAR 0 2
55562: PUSH
55563: LD_INT 4
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: LIST
55570: PUSH
55571: LD_VAR 0 1
55575: PUSH
55576: LD_VAR 0 2
55580: PUSH
55581: LD_INT 3
55583: PLUS
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: ST_TO_ADDR
// end ; end ;
55600: GO 55603
55602: POP
// result := list ;
55603: LD_ADDR_VAR 0 4
55607: PUSH
55608: LD_VAR 0 5
55612: ST_TO_ADDR
// end ;
55613: LD_VAR 0 4
55617: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55618: LD_INT 0
55620: PPUSH
55621: PPUSH
55622: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55623: LD_VAR 0 1
55627: NOT
55628: PUSH
55629: LD_VAR 0 2
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: LD_INT 4
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: IN
55652: NOT
55653: OR
55654: IFFALSE 55658
// exit ;
55656: GO 55750
// tmp := [ ] ;
55658: LD_ADDR_VAR 0 5
55662: PUSH
55663: EMPTY
55664: ST_TO_ADDR
// for i in units do
55665: LD_ADDR_VAR 0 4
55669: PUSH
55670: LD_VAR 0 1
55674: PUSH
55675: FOR_IN
55676: IFFALSE 55719
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55678: LD_ADDR_VAR 0 5
55682: PUSH
55683: LD_VAR 0 5
55687: PPUSH
55688: LD_VAR 0 5
55692: PUSH
55693: LD_INT 1
55695: PLUS
55696: PPUSH
55697: LD_VAR 0 4
55701: PPUSH
55702: LD_VAR 0 2
55706: PPUSH
55707: CALL_OW 259
55711: PPUSH
55712: CALL_OW 2
55716: ST_TO_ADDR
55717: GO 55675
55719: POP
55720: POP
// if not tmp then
55721: LD_VAR 0 5
55725: NOT
55726: IFFALSE 55730
// exit ;
55728: GO 55750
// result := SortListByListDesc ( units , tmp ) ;
55730: LD_ADDR_VAR 0 3
55734: PUSH
55735: LD_VAR 0 1
55739: PPUSH
55740: LD_VAR 0 5
55744: PPUSH
55745: CALL_OW 77
55749: ST_TO_ADDR
// end ;
55750: LD_VAR 0 3
55754: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55755: LD_INT 0
55757: PPUSH
55758: PPUSH
55759: PPUSH
// result := false ;
55760: LD_ADDR_VAR 0 3
55764: PUSH
55765: LD_INT 0
55767: ST_TO_ADDR
// x := GetX ( building ) ;
55768: LD_ADDR_VAR 0 4
55772: PUSH
55773: LD_VAR 0 2
55777: PPUSH
55778: CALL_OW 250
55782: ST_TO_ADDR
// y := GetY ( building ) ;
55783: LD_ADDR_VAR 0 5
55787: PUSH
55788: LD_VAR 0 2
55792: PPUSH
55793: CALL_OW 251
55797: ST_TO_ADDR
// if not building or not x or not y then
55798: LD_VAR 0 2
55802: NOT
55803: PUSH
55804: LD_VAR 0 4
55808: NOT
55809: OR
55810: PUSH
55811: LD_VAR 0 5
55815: NOT
55816: OR
55817: IFFALSE 55821
// exit ;
55819: GO 55913
// if GetTaskList ( unit ) then
55821: LD_VAR 0 1
55825: PPUSH
55826: CALL_OW 437
55830: IFFALSE 55913
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55832: LD_STRING e
55834: PUSH
55835: LD_VAR 0 1
55839: PPUSH
55840: CALL_OW 437
55844: PUSH
55845: LD_INT 1
55847: ARRAY
55848: PUSH
55849: LD_INT 1
55851: ARRAY
55852: EQUAL
55853: PUSH
55854: LD_VAR 0 4
55858: PUSH
55859: LD_VAR 0 1
55863: PPUSH
55864: CALL_OW 437
55868: PUSH
55869: LD_INT 1
55871: ARRAY
55872: PUSH
55873: LD_INT 2
55875: ARRAY
55876: EQUAL
55877: AND
55878: PUSH
55879: LD_VAR 0 5
55883: PUSH
55884: LD_VAR 0 1
55888: PPUSH
55889: CALL_OW 437
55893: PUSH
55894: LD_INT 1
55896: ARRAY
55897: PUSH
55898: LD_INT 3
55900: ARRAY
55901: EQUAL
55902: AND
55903: IFFALSE 55913
// result := true end ;
55905: LD_ADDR_VAR 0 3
55909: PUSH
55910: LD_INT 1
55912: ST_TO_ADDR
// end ;
55913: LD_VAR 0 3
55917: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55918: LD_INT 0
55920: PPUSH
// result := false ;
55921: LD_ADDR_VAR 0 4
55925: PUSH
55926: LD_INT 0
55928: ST_TO_ADDR
// if GetTaskList ( unit ) then
55929: LD_VAR 0 1
55933: PPUSH
55934: CALL_OW 437
55938: IFFALSE 56021
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55940: LD_STRING M
55942: PUSH
55943: LD_VAR 0 1
55947: PPUSH
55948: CALL_OW 437
55952: PUSH
55953: LD_INT 1
55955: ARRAY
55956: PUSH
55957: LD_INT 1
55959: ARRAY
55960: EQUAL
55961: PUSH
55962: LD_VAR 0 2
55966: PUSH
55967: LD_VAR 0 1
55971: PPUSH
55972: CALL_OW 437
55976: PUSH
55977: LD_INT 1
55979: ARRAY
55980: PUSH
55981: LD_INT 2
55983: ARRAY
55984: EQUAL
55985: AND
55986: PUSH
55987: LD_VAR 0 3
55991: PUSH
55992: LD_VAR 0 1
55996: PPUSH
55997: CALL_OW 437
56001: PUSH
56002: LD_INT 1
56004: ARRAY
56005: PUSH
56006: LD_INT 3
56008: ARRAY
56009: EQUAL
56010: AND
56011: IFFALSE 56021
// result := true ;
56013: LD_ADDR_VAR 0 4
56017: PUSH
56018: LD_INT 1
56020: ST_TO_ADDR
// end ; end ;
56021: LD_VAR 0 4
56025: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56026: LD_INT 0
56028: PPUSH
56029: PPUSH
56030: PPUSH
56031: PPUSH
// if not unit or not area then
56032: LD_VAR 0 1
56036: NOT
56037: PUSH
56038: LD_VAR 0 2
56042: NOT
56043: OR
56044: IFFALSE 56048
// exit ;
56046: GO 56212
// tmp := AreaToList ( area , i ) ;
56048: LD_ADDR_VAR 0 6
56052: PUSH
56053: LD_VAR 0 2
56057: PPUSH
56058: LD_VAR 0 5
56062: PPUSH
56063: CALL_OW 517
56067: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56068: LD_ADDR_VAR 0 5
56072: PUSH
56073: DOUBLE
56074: LD_INT 1
56076: DEC
56077: ST_TO_ADDR
56078: LD_VAR 0 6
56082: PUSH
56083: LD_INT 1
56085: ARRAY
56086: PUSH
56087: FOR_TO
56088: IFFALSE 56210
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56090: LD_ADDR_VAR 0 7
56094: PUSH
56095: LD_VAR 0 6
56099: PUSH
56100: LD_INT 1
56102: ARRAY
56103: PUSH
56104: LD_VAR 0 5
56108: ARRAY
56109: PUSH
56110: LD_VAR 0 6
56114: PUSH
56115: LD_INT 2
56117: ARRAY
56118: PUSH
56119: LD_VAR 0 5
56123: ARRAY
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56129: LD_VAR 0 7
56133: PUSH
56134: LD_INT 1
56136: ARRAY
56137: PPUSH
56138: LD_VAR 0 7
56142: PUSH
56143: LD_INT 2
56145: ARRAY
56146: PPUSH
56147: CALL_OW 428
56151: PUSH
56152: LD_INT 0
56154: EQUAL
56155: IFFALSE 56208
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56157: LD_VAR 0 1
56161: PPUSH
56162: LD_VAR 0 7
56166: PUSH
56167: LD_INT 1
56169: ARRAY
56170: PPUSH
56171: LD_VAR 0 7
56175: PUSH
56176: LD_INT 2
56178: ARRAY
56179: PPUSH
56180: LD_VAR 0 3
56184: PPUSH
56185: CALL_OW 48
// result := IsPlaced ( unit ) ;
56189: LD_ADDR_VAR 0 4
56193: PUSH
56194: LD_VAR 0 1
56198: PPUSH
56199: CALL_OW 305
56203: ST_TO_ADDR
// exit ;
56204: POP
56205: POP
56206: GO 56212
// end ; end ;
56208: GO 56087
56210: POP
56211: POP
// end ;
56212: LD_VAR 0 4
56216: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56217: LD_INT 0
56219: PPUSH
56220: PPUSH
56221: PPUSH
// if not side or side > 8 then
56222: LD_VAR 0 1
56226: NOT
56227: PUSH
56228: LD_VAR 0 1
56232: PUSH
56233: LD_INT 8
56235: GREATER
56236: OR
56237: IFFALSE 56241
// exit ;
56239: GO 56428
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56241: LD_ADDR_VAR 0 4
56245: PUSH
56246: LD_INT 22
56248: PUSH
56249: LD_VAR 0 1
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 21
56260: PUSH
56261: LD_INT 3
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PPUSH
56272: CALL_OW 69
56276: ST_TO_ADDR
// if not tmp then
56277: LD_VAR 0 4
56281: NOT
56282: IFFALSE 56286
// exit ;
56284: GO 56428
// enable_addtolog := true ;
56286: LD_ADDR_OWVAR 81
56290: PUSH
56291: LD_INT 1
56293: ST_TO_ADDR
// AddToLog ( [ ) ;
56294: LD_STRING [
56296: PPUSH
56297: CALL_OW 561
// for i in tmp do
56301: LD_ADDR_VAR 0 3
56305: PUSH
56306: LD_VAR 0 4
56310: PUSH
56311: FOR_IN
56312: IFFALSE 56419
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56314: LD_STRING [
56316: PUSH
56317: LD_VAR 0 3
56321: PPUSH
56322: CALL_OW 266
56326: STR
56327: PUSH
56328: LD_STRING , 
56330: STR
56331: PUSH
56332: LD_VAR 0 3
56336: PPUSH
56337: CALL_OW 250
56341: STR
56342: PUSH
56343: LD_STRING , 
56345: STR
56346: PUSH
56347: LD_VAR 0 3
56351: PPUSH
56352: CALL_OW 251
56356: STR
56357: PUSH
56358: LD_STRING , 
56360: STR
56361: PUSH
56362: LD_VAR 0 3
56366: PPUSH
56367: CALL_OW 254
56371: STR
56372: PUSH
56373: LD_STRING , 
56375: STR
56376: PUSH
56377: LD_VAR 0 3
56381: PPUSH
56382: LD_INT 1
56384: PPUSH
56385: CALL_OW 268
56389: STR
56390: PUSH
56391: LD_STRING , 
56393: STR
56394: PUSH
56395: LD_VAR 0 3
56399: PPUSH
56400: LD_INT 2
56402: PPUSH
56403: CALL_OW 268
56407: STR
56408: PUSH
56409: LD_STRING ],
56411: STR
56412: PPUSH
56413: CALL_OW 561
// end ;
56417: GO 56311
56419: POP
56420: POP
// AddToLog ( ]; ) ;
56421: LD_STRING ];
56423: PPUSH
56424: CALL_OW 561
// end ;
56428: LD_VAR 0 2
56432: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56433: LD_INT 0
56435: PPUSH
56436: PPUSH
56437: PPUSH
56438: PPUSH
56439: PPUSH
// if not area or not rate or not max then
56440: LD_VAR 0 1
56444: NOT
56445: PUSH
56446: LD_VAR 0 2
56450: NOT
56451: OR
56452: PUSH
56453: LD_VAR 0 4
56457: NOT
56458: OR
56459: IFFALSE 56463
// exit ;
56461: GO 56655
// while 1 do
56463: LD_INT 1
56465: IFFALSE 56655
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56467: LD_ADDR_VAR 0 9
56471: PUSH
56472: LD_VAR 0 1
56476: PPUSH
56477: LD_INT 1
56479: PPUSH
56480: CALL_OW 287
56484: PUSH
56485: LD_INT 10
56487: MUL
56488: ST_TO_ADDR
// r := rate / 10 ;
56489: LD_ADDR_VAR 0 7
56493: PUSH
56494: LD_VAR 0 2
56498: PUSH
56499: LD_INT 10
56501: DIVREAL
56502: ST_TO_ADDR
// time := 1 1$00 ;
56503: LD_ADDR_VAR 0 8
56507: PUSH
56508: LD_INT 2100
56510: ST_TO_ADDR
// if amount < min then
56511: LD_VAR 0 9
56515: PUSH
56516: LD_VAR 0 3
56520: LESS
56521: IFFALSE 56539
// r := r * 2 else
56523: LD_ADDR_VAR 0 7
56527: PUSH
56528: LD_VAR 0 7
56532: PUSH
56533: LD_INT 2
56535: MUL
56536: ST_TO_ADDR
56537: GO 56565
// if amount > max then
56539: LD_VAR 0 9
56543: PUSH
56544: LD_VAR 0 4
56548: GREATER
56549: IFFALSE 56565
// r := r / 2 ;
56551: LD_ADDR_VAR 0 7
56555: PUSH
56556: LD_VAR 0 7
56560: PUSH
56561: LD_INT 2
56563: DIVREAL
56564: ST_TO_ADDR
// time := time / r ;
56565: LD_ADDR_VAR 0 8
56569: PUSH
56570: LD_VAR 0 8
56574: PUSH
56575: LD_VAR 0 7
56579: DIVREAL
56580: ST_TO_ADDR
// if time < 0 then
56581: LD_VAR 0 8
56585: PUSH
56586: LD_INT 0
56588: LESS
56589: IFFALSE 56606
// time := time * - 1 ;
56591: LD_ADDR_VAR 0 8
56595: PUSH
56596: LD_VAR 0 8
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: MUL
56605: ST_TO_ADDR
// wait ( time ) ;
56606: LD_VAR 0 8
56610: PPUSH
56611: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56615: LD_INT 35
56617: PPUSH
56618: LD_INT 875
56620: PPUSH
56621: CALL_OW 12
56625: PPUSH
56626: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56630: LD_INT 1
56632: PPUSH
56633: LD_INT 5
56635: PPUSH
56636: CALL_OW 12
56640: PPUSH
56641: LD_VAR 0 1
56645: PPUSH
56646: LD_INT 1
56648: PPUSH
56649: CALL_OW 55
// end ;
56653: GO 56463
// end ;
56655: LD_VAR 0 5
56659: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56660: LD_INT 0
56662: PPUSH
56663: PPUSH
56664: PPUSH
56665: PPUSH
56666: PPUSH
56667: PPUSH
56668: PPUSH
56669: PPUSH
// if not turrets or not factories then
56670: LD_VAR 0 1
56674: NOT
56675: PUSH
56676: LD_VAR 0 2
56680: NOT
56681: OR
56682: IFFALSE 56686
// exit ;
56684: GO 56993
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56686: LD_ADDR_VAR 0 10
56690: PUSH
56691: LD_INT 5
56693: PUSH
56694: LD_INT 6
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 4
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: LD_INT 5
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 24
56728: PUSH
56729: LD_INT 25
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 23
56738: PUSH
56739: LD_INT 27
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 42
56752: PUSH
56753: LD_INT 43
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 44
56762: PUSH
56763: LD_INT 46
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 45
56772: PUSH
56773: LD_INT 47
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: LIST
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// result := [ ] ;
56790: LD_ADDR_VAR 0 3
56794: PUSH
56795: EMPTY
56796: ST_TO_ADDR
// for i in turrets do
56797: LD_ADDR_VAR 0 4
56801: PUSH
56802: LD_VAR 0 1
56806: PUSH
56807: FOR_IN
56808: IFFALSE 56991
// begin nat := GetNation ( i ) ;
56810: LD_ADDR_VAR 0 7
56814: PUSH
56815: LD_VAR 0 4
56819: PPUSH
56820: CALL_OW 248
56824: ST_TO_ADDR
// weapon := 0 ;
56825: LD_ADDR_VAR 0 8
56829: PUSH
56830: LD_INT 0
56832: ST_TO_ADDR
// if not nat then
56833: LD_VAR 0 7
56837: NOT
56838: IFFALSE 56842
// continue ;
56840: GO 56807
// for j in list [ nat ] do
56842: LD_ADDR_VAR 0 5
56846: PUSH
56847: LD_VAR 0 10
56851: PUSH
56852: LD_VAR 0 7
56856: ARRAY
56857: PUSH
56858: FOR_IN
56859: IFFALSE 56900
// if GetBWeapon ( i ) = j [ 1 ] then
56861: LD_VAR 0 4
56865: PPUSH
56866: CALL_OW 269
56870: PUSH
56871: LD_VAR 0 5
56875: PUSH
56876: LD_INT 1
56878: ARRAY
56879: EQUAL
56880: IFFALSE 56898
// begin weapon := j [ 2 ] ;
56882: LD_ADDR_VAR 0 8
56886: PUSH
56887: LD_VAR 0 5
56891: PUSH
56892: LD_INT 2
56894: ARRAY
56895: ST_TO_ADDR
// break ;
56896: GO 56900
// end ;
56898: GO 56858
56900: POP
56901: POP
// if not weapon then
56902: LD_VAR 0 8
56906: NOT
56907: IFFALSE 56911
// continue ;
56909: GO 56807
// for k in factories do
56911: LD_ADDR_VAR 0 6
56915: PUSH
56916: LD_VAR 0 2
56920: PUSH
56921: FOR_IN
56922: IFFALSE 56987
// begin weapons := AvailableWeaponList ( k ) ;
56924: LD_ADDR_VAR 0 9
56928: PUSH
56929: LD_VAR 0 6
56933: PPUSH
56934: CALL_OW 478
56938: ST_TO_ADDR
// if not weapons then
56939: LD_VAR 0 9
56943: NOT
56944: IFFALSE 56948
// continue ;
56946: GO 56921
// if weapon in weapons then
56948: LD_VAR 0 8
56952: PUSH
56953: LD_VAR 0 9
56957: IN
56958: IFFALSE 56985
// begin result := [ i , weapon ] ;
56960: LD_ADDR_VAR 0 3
56964: PUSH
56965: LD_VAR 0 4
56969: PUSH
56970: LD_VAR 0 8
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// exit ;
56979: POP
56980: POP
56981: POP
56982: POP
56983: GO 56993
// end ; end ;
56985: GO 56921
56987: POP
56988: POP
// end ;
56989: GO 56807
56991: POP
56992: POP
// end ;
56993: LD_VAR 0 3
56997: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56998: LD_INT 0
57000: PPUSH
// if not side or side > 8 then
57001: LD_VAR 0 3
57005: NOT
57006: PUSH
57007: LD_VAR 0 3
57011: PUSH
57012: LD_INT 8
57014: GREATER
57015: OR
57016: IFFALSE 57020
// exit ;
57018: GO 57079
// if not range then
57020: LD_VAR 0 4
57024: NOT
57025: IFFALSE 57036
// range := - 12 ;
57027: LD_ADDR_VAR 0 4
57031: PUSH
57032: LD_INT 12
57034: NEG
57035: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57036: LD_VAR 0 1
57040: PPUSH
57041: LD_VAR 0 2
57045: PPUSH
57046: LD_VAR 0 3
57050: PPUSH
57051: LD_VAR 0 4
57055: PPUSH
57056: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57060: LD_VAR 0 1
57064: PPUSH
57065: LD_VAR 0 2
57069: PPUSH
57070: LD_VAR 0 3
57074: PPUSH
57075: CALL_OW 331
// end ;
57079: LD_VAR 0 5
57083: RET
// export function Video ( mode ) ; begin
57084: LD_INT 0
57086: PPUSH
// ingame_video = mode ;
57087: LD_ADDR_OWVAR 52
57091: PUSH
57092: LD_VAR 0 1
57096: ST_TO_ADDR
// interface_hidden = mode ;
57097: LD_ADDR_OWVAR 54
57101: PUSH
57102: LD_VAR 0 1
57106: ST_TO_ADDR
// end ;
57107: LD_VAR 0 2
57111: RET
// export function Join ( array , element ) ; begin
57112: LD_INT 0
57114: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57115: LD_ADDR_VAR 0 3
57119: PUSH
57120: LD_VAR 0 1
57124: PPUSH
57125: LD_VAR 0 1
57129: PUSH
57130: LD_INT 1
57132: PLUS
57133: PPUSH
57134: LD_VAR 0 2
57138: PPUSH
57139: CALL_OW 1
57143: ST_TO_ADDR
// end ;
57144: LD_VAR 0 3
57148: RET
// export function JoinUnion ( array , element ) ; begin
57149: LD_INT 0
57151: PPUSH
// result := array union element ;
57152: LD_ADDR_VAR 0 3
57156: PUSH
57157: LD_VAR 0 1
57161: PUSH
57162: LD_VAR 0 2
57166: UNION
57167: ST_TO_ADDR
// end ;
57168: LD_VAR 0 3
57172: RET
// export function GetBehemoths ( side ) ; begin
57173: LD_INT 0
57175: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57176: LD_ADDR_VAR 0 2
57180: PUSH
57181: LD_INT 22
57183: PUSH
57184: LD_VAR 0 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 31
57195: PUSH
57196: LD_INT 25
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PPUSH
57207: CALL_OW 69
57211: ST_TO_ADDR
// end ;
57212: LD_VAR 0 2
57216: RET
// export function Shuffle ( array ) ; var i , index ; begin
57217: LD_INT 0
57219: PPUSH
57220: PPUSH
57221: PPUSH
// result := [ ] ;
57222: LD_ADDR_VAR 0 2
57226: PUSH
57227: EMPTY
57228: ST_TO_ADDR
// if not array then
57229: LD_VAR 0 1
57233: NOT
57234: IFFALSE 57238
// exit ;
57236: GO 57337
// Randomize ;
57238: CALL_OW 10
// for i = array downto 1 do
57242: LD_ADDR_VAR 0 3
57246: PUSH
57247: DOUBLE
57248: LD_VAR 0 1
57252: INC
57253: ST_TO_ADDR
57254: LD_INT 1
57256: PUSH
57257: FOR_DOWNTO
57258: IFFALSE 57335
// begin index := rand ( 1 , array ) ;
57260: LD_ADDR_VAR 0 4
57264: PUSH
57265: LD_INT 1
57267: PPUSH
57268: LD_VAR 0 1
57272: PPUSH
57273: CALL_OW 12
57277: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57278: LD_ADDR_VAR 0 2
57282: PUSH
57283: LD_VAR 0 2
57287: PPUSH
57288: LD_VAR 0 2
57292: PUSH
57293: LD_INT 1
57295: PLUS
57296: PPUSH
57297: LD_VAR 0 1
57301: PUSH
57302: LD_VAR 0 4
57306: ARRAY
57307: PPUSH
57308: CALL_OW 2
57312: ST_TO_ADDR
// array := Delete ( array , index ) ;
57313: LD_ADDR_VAR 0 1
57317: PUSH
57318: LD_VAR 0 1
57322: PPUSH
57323: LD_VAR 0 4
57327: PPUSH
57328: CALL_OW 3
57332: ST_TO_ADDR
// end ;
57333: GO 57257
57335: POP
57336: POP
// end ;
57337: LD_VAR 0 2
57341: RET
// export function GetBaseMaterials ( base ) ; begin
57342: LD_INT 0
57344: PPUSH
// result := [ 0 , 0 , 0 ] ;
57345: LD_ADDR_VAR 0 2
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// if not base then
57364: LD_VAR 0 1
57368: NOT
57369: IFFALSE 57373
// exit ;
57371: GO 57422
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57373: LD_ADDR_VAR 0 2
57377: PUSH
57378: LD_VAR 0 1
57382: PPUSH
57383: LD_INT 1
57385: PPUSH
57386: CALL_OW 275
57390: PUSH
57391: LD_VAR 0 1
57395: PPUSH
57396: LD_INT 2
57398: PPUSH
57399: CALL_OW 275
57403: PUSH
57404: LD_VAR 0 1
57408: PPUSH
57409: LD_INT 3
57411: PPUSH
57412: CALL_OW 275
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// end ;
57422: LD_VAR 0 2
57426: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57427: LD_INT 0
57429: PPUSH
57430: PPUSH
// result := array ;
57431: LD_ADDR_VAR 0 3
57435: PUSH
57436: LD_VAR 0 1
57440: ST_TO_ADDR
// if size > 0 then
57441: LD_VAR 0 2
57445: PUSH
57446: LD_INT 0
57448: GREATER
57449: IFFALSE 57495
// for i := array downto size do
57451: LD_ADDR_VAR 0 4
57455: PUSH
57456: DOUBLE
57457: LD_VAR 0 1
57461: INC
57462: ST_TO_ADDR
57463: LD_VAR 0 2
57467: PUSH
57468: FOR_DOWNTO
57469: IFFALSE 57493
// result := Delete ( result , result ) ;
57471: LD_ADDR_VAR 0 3
57475: PUSH
57476: LD_VAR 0 3
57480: PPUSH
57481: LD_VAR 0 3
57485: PPUSH
57486: CALL_OW 3
57490: ST_TO_ADDR
57491: GO 57468
57493: POP
57494: POP
// end ;
57495: LD_VAR 0 3
57499: RET
// export function ComExit ( unit ) ; var tmp ; begin
57500: LD_INT 0
57502: PPUSH
57503: PPUSH
// if not IsInUnit ( unit ) then
57504: LD_VAR 0 1
57508: PPUSH
57509: CALL_OW 310
57513: NOT
57514: IFFALSE 57518
// exit ;
57516: GO 57578
// tmp := IsInUnit ( unit ) ;
57518: LD_ADDR_VAR 0 3
57522: PUSH
57523: LD_VAR 0 1
57527: PPUSH
57528: CALL_OW 310
57532: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57533: LD_VAR 0 3
57537: PPUSH
57538: CALL_OW 247
57542: PUSH
57543: LD_INT 2
57545: EQUAL
57546: IFFALSE 57559
// ComExitVehicle ( unit ) else
57548: LD_VAR 0 1
57552: PPUSH
57553: CALL_OW 121
57557: GO 57568
// ComExitBuilding ( unit ) ;
57559: LD_VAR 0 1
57563: PPUSH
57564: CALL_OW 122
// result := tmp ;
57568: LD_ADDR_VAR 0 2
57572: PUSH
57573: LD_VAR 0 3
57577: ST_TO_ADDR
// end ;
57578: LD_VAR 0 2
57582: RET
// export function ResetHc ; begin
57583: LD_INT 0
57585: PPUSH
// InitHc ;
57586: CALL_OW 19
// hc_importance := 0 ;
57590: LD_ADDR_OWVAR 32
57594: PUSH
57595: LD_INT 0
57597: ST_TO_ADDR
// end ;
57598: LD_VAR 0 1
57602: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57603: LD_INT 0
57605: PPUSH
57606: PPUSH
57607: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57608: LD_ADDR_VAR 0 6
57612: PUSH
57613: LD_VAR 0 1
57617: PUSH
57618: LD_VAR 0 3
57622: PLUS
57623: PUSH
57624: LD_INT 2
57626: DIV
57627: ST_TO_ADDR
// if _x < 0 then
57628: LD_VAR 0 6
57632: PUSH
57633: LD_INT 0
57635: LESS
57636: IFFALSE 57653
// _x := _x * - 1 ;
57638: LD_ADDR_VAR 0 6
57642: PUSH
57643: LD_VAR 0 6
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: MUL
57652: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57653: LD_ADDR_VAR 0 7
57657: PUSH
57658: LD_VAR 0 2
57662: PUSH
57663: LD_VAR 0 4
57667: PLUS
57668: PUSH
57669: LD_INT 2
57671: DIV
57672: ST_TO_ADDR
// if _y < 0 then
57673: LD_VAR 0 7
57677: PUSH
57678: LD_INT 0
57680: LESS
57681: IFFALSE 57698
// _y := _y * - 1 ;
57683: LD_ADDR_VAR 0 7
57687: PUSH
57688: LD_VAR 0 7
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: MUL
57697: ST_TO_ADDR
// result := [ _x , _y ] ;
57698: LD_ADDR_VAR 0 5
57702: PUSH
57703: LD_VAR 0 6
57707: PUSH
57708: LD_VAR 0 7
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: ST_TO_ADDR
// end ;
57717: LD_VAR 0 5
57721: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57722: LD_INT 0
57724: PPUSH
57725: PPUSH
57726: PPUSH
57727: PPUSH
// task := GetTaskList ( unit ) ;
57728: LD_ADDR_VAR 0 7
57732: PUSH
57733: LD_VAR 0 1
57737: PPUSH
57738: CALL_OW 437
57742: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57743: LD_VAR 0 7
57747: NOT
57748: PUSH
57749: LD_VAR 0 1
57753: PPUSH
57754: LD_VAR 0 2
57758: PPUSH
57759: CALL_OW 308
57763: NOT
57764: AND
57765: IFFALSE 57769
// exit ;
57767: GO 57887
// if IsInArea ( unit , area ) then
57769: LD_VAR 0 1
57773: PPUSH
57774: LD_VAR 0 2
57778: PPUSH
57779: CALL_OW 308
57783: IFFALSE 57801
// begin ComMoveToArea ( unit , goAway ) ;
57785: LD_VAR 0 1
57789: PPUSH
57790: LD_VAR 0 3
57794: PPUSH
57795: CALL_OW 113
// exit ;
57799: GO 57887
// end ; if task [ 1 ] [ 1 ] <> M then
57801: LD_VAR 0 7
57805: PUSH
57806: LD_INT 1
57808: ARRAY
57809: PUSH
57810: LD_INT 1
57812: ARRAY
57813: PUSH
57814: LD_STRING M
57816: NONEQUAL
57817: IFFALSE 57821
// exit ;
57819: GO 57887
// x := task [ 1 ] [ 2 ] ;
57821: LD_ADDR_VAR 0 5
57825: PUSH
57826: LD_VAR 0 7
57830: PUSH
57831: LD_INT 1
57833: ARRAY
57834: PUSH
57835: LD_INT 2
57837: ARRAY
57838: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57839: LD_ADDR_VAR 0 6
57843: PUSH
57844: LD_VAR 0 7
57848: PUSH
57849: LD_INT 1
57851: ARRAY
57852: PUSH
57853: LD_INT 3
57855: ARRAY
57856: ST_TO_ADDR
// if InArea ( x , y , area ) then
57857: LD_VAR 0 5
57861: PPUSH
57862: LD_VAR 0 6
57866: PPUSH
57867: LD_VAR 0 2
57871: PPUSH
57872: CALL_OW 309
57876: IFFALSE 57887
// ComStop ( unit ) ;
57878: LD_VAR 0 1
57882: PPUSH
57883: CALL_OW 141
// end ;
57887: LD_VAR 0 4
57891: RET
// export function Abs ( value ) ; begin
57892: LD_INT 0
57894: PPUSH
// result := value ;
57895: LD_ADDR_VAR 0 2
57899: PUSH
57900: LD_VAR 0 1
57904: ST_TO_ADDR
// if value < 0 then
57905: LD_VAR 0 1
57909: PUSH
57910: LD_INT 0
57912: LESS
57913: IFFALSE 57930
// result := value * - 1 ;
57915: LD_ADDR_VAR 0 2
57919: PUSH
57920: LD_VAR 0 1
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: MUL
57929: ST_TO_ADDR
// end ;
57930: LD_VAR 0 2
57934: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57935: LD_INT 0
57937: PPUSH
57938: PPUSH
57939: PPUSH
57940: PPUSH
57941: PPUSH
57942: PPUSH
57943: PPUSH
57944: PPUSH
// if not unit or not building then
57945: LD_VAR 0 1
57949: NOT
57950: PUSH
57951: LD_VAR 0 2
57955: NOT
57956: OR
57957: IFFALSE 57961
// exit ;
57959: GO 58187
// x := GetX ( building ) ;
57961: LD_ADDR_VAR 0 4
57965: PUSH
57966: LD_VAR 0 2
57970: PPUSH
57971: CALL_OW 250
57975: ST_TO_ADDR
// y := GetY ( building ) ;
57976: LD_ADDR_VAR 0 6
57980: PUSH
57981: LD_VAR 0 2
57985: PPUSH
57986: CALL_OW 251
57990: ST_TO_ADDR
// d := GetDir ( building ) ;
57991: LD_ADDR_VAR 0 8
57995: PUSH
57996: LD_VAR 0 2
58000: PPUSH
58001: CALL_OW 254
58005: ST_TO_ADDR
// r := 4 ;
58006: LD_ADDR_VAR 0 9
58010: PUSH
58011: LD_INT 4
58013: ST_TO_ADDR
// for i := 1 to 5 do
58014: LD_ADDR_VAR 0 10
58018: PUSH
58019: DOUBLE
58020: LD_INT 1
58022: DEC
58023: ST_TO_ADDR
58024: LD_INT 5
58026: PUSH
58027: FOR_TO
58028: IFFALSE 58185
// begin _x := ShiftX ( x , d , r + i ) ;
58030: LD_ADDR_VAR 0 5
58034: PUSH
58035: LD_VAR 0 4
58039: PPUSH
58040: LD_VAR 0 8
58044: PPUSH
58045: LD_VAR 0 9
58049: PUSH
58050: LD_VAR 0 10
58054: PLUS
58055: PPUSH
58056: CALL_OW 272
58060: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58061: LD_ADDR_VAR 0 7
58065: PUSH
58066: LD_VAR 0 6
58070: PPUSH
58071: LD_VAR 0 8
58075: PPUSH
58076: LD_VAR 0 9
58080: PUSH
58081: LD_VAR 0 10
58085: PLUS
58086: PPUSH
58087: CALL_OW 273
58091: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58092: LD_VAR 0 5
58096: PPUSH
58097: LD_VAR 0 7
58101: PPUSH
58102: CALL_OW 488
58106: PUSH
58107: LD_VAR 0 5
58111: PPUSH
58112: LD_VAR 0 7
58116: PPUSH
58117: CALL_OW 428
58121: PPUSH
58122: CALL_OW 247
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: IN
58137: NOT
58138: AND
58139: IFFALSE 58183
// begin ComMoveXY ( unit , _x , _y ) ;
58141: LD_VAR 0 1
58145: PPUSH
58146: LD_VAR 0 5
58150: PPUSH
58151: LD_VAR 0 7
58155: PPUSH
58156: CALL_OW 111
// result := [ _x , _y ] ;
58160: LD_ADDR_VAR 0 3
58164: PUSH
58165: LD_VAR 0 5
58169: PUSH
58170: LD_VAR 0 7
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: ST_TO_ADDR
// exit ;
58179: POP
58180: POP
58181: GO 58187
// end ; end ;
58183: GO 58027
58185: POP
58186: POP
// end ; end_of_file
58187: LD_VAR 0 3
58191: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
58192: LD_INT 0
58194: PPUSH
58195: PPUSH
58196: PPUSH
58197: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
58198: LD_VAR 0 1
58202: PPUSH
58203: CALL_OW 264
58207: PUSH
58208: LD_EXP 127
58212: EQUAL
58213: IFFALSE 58285
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58215: LD_INT 68
58217: PPUSH
58218: LD_VAR 0 1
58222: PPUSH
58223: CALL_OW 255
58227: PPUSH
58228: CALL_OW 321
58232: PUSH
58233: LD_INT 2
58235: EQUAL
58236: IFFALSE 58248
// eff := 70 else
58238: LD_ADDR_VAR 0 4
58242: PUSH
58243: LD_INT 70
58245: ST_TO_ADDR
58246: GO 58256
// eff := 30 ;
58248: LD_ADDR_VAR 0 4
58252: PUSH
58253: LD_INT 30
58255: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58256: LD_VAR 0 1
58260: PPUSH
58261: CALL_OW 250
58265: PPUSH
58266: LD_VAR 0 1
58270: PPUSH
58271: CALL_OW 251
58275: PPUSH
58276: LD_VAR 0 4
58280: PPUSH
58281: CALL_OW 495
// end ; end ;
58285: LD_VAR 0 2
58289: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58290: LD_INT 0
58292: PPUSH
// end ;
58293: LD_VAR 0 4
58297: RET
// export function SOS_Command ( cmd ) ; begin
58298: LD_INT 0
58300: PPUSH
// end ;
58301: LD_VAR 0 2
58305: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58306: LD_INT 0
58308: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58309: LD_VAR 0 1
58313: PUSH
58314: LD_INT 250
58316: EQUAL
58317: PUSH
58318: LD_VAR 0 2
58322: PPUSH
58323: CALL_OW 264
58327: PUSH
58328: LD_EXP 130
58332: EQUAL
58333: AND
58334: IFFALSE 58355
// MinerPlaceMine ( unit , x , y ) ;
58336: LD_VAR 0 2
58340: PPUSH
58341: LD_VAR 0 4
58345: PPUSH
58346: LD_VAR 0 5
58350: PPUSH
58351: CALL 60696 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58355: LD_VAR 0 1
58359: PUSH
58360: LD_INT 251
58362: EQUAL
58363: PUSH
58364: LD_VAR 0 2
58368: PPUSH
58369: CALL_OW 264
58373: PUSH
58374: LD_EXP 130
58378: EQUAL
58379: AND
58380: IFFALSE 58401
// MinerDetonateMine ( unit , x , y ) ;
58382: LD_VAR 0 2
58386: PPUSH
58387: LD_VAR 0 4
58391: PPUSH
58392: LD_VAR 0 5
58396: PPUSH
58397: CALL 60973 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58401: LD_VAR 0 1
58405: PUSH
58406: LD_INT 252
58408: EQUAL
58409: PUSH
58410: LD_VAR 0 2
58414: PPUSH
58415: CALL_OW 264
58419: PUSH
58420: LD_EXP 130
58424: EQUAL
58425: AND
58426: IFFALSE 58447
// MinerCreateMinefield ( unit , x , y ) ;
58428: LD_VAR 0 2
58432: PPUSH
58433: LD_VAR 0 4
58437: PPUSH
58438: LD_VAR 0 5
58442: PPUSH
58443: CALL 61390 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58447: LD_VAR 0 1
58451: PUSH
58452: LD_INT 253
58454: EQUAL
58455: PUSH
58456: LD_VAR 0 2
58460: PPUSH
58461: CALL_OW 257
58465: PUSH
58466: LD_INT 5
58468: EQUAL
58469: AND
58470: IFFALSE 58491
// ComBinocular ( unit , x , y ) ;
58472: LD_VAR 0 2
58476: PPUSH
58477: LD_VAR 0 4
58481: PPUSH
58482: LD_VAR 0 5
58486: PPUSH
58487: CALL 61761 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58491: LD_VAR 0 1
58495: PUSH
58496: LD_INT 254
58498: EQUAL
58499: PUSH
58500: LD_VAR 0 2
58504: PPUSH
58505: CALL_OW 264
58509: PUSH
58510: LD_EXP 125
58514: EQUAL
58515: AND
58516: PUSH
58517: LD_VAR 0 3
58521: PPUSH
58522: CALL_OW 263
58526: PUSH
58527: LD_INT 3
58529: EQUAL
58530: AND
58531: IFFALSE 58547
// HackDestroyVehicle ( unit , selectedUnit ) ;
58533: LD_VAR 0 2
58537: PPUSH
58538: LD_VAR 0 3
58542: PPUSH
58543: CALL 60056 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58547: LD_VAR 0 1
58551: PUSH
58552: LD_INT 255
58554: EQUAL
58555: PUSH
58556: LD_VAR 0 2
58560: PPUSH
58561: CALL_OW 264
58565: PUSH
58566: LD_INT 14
58568: PUSH
58569: LD_INT 53
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: IN
58576: AND
58577: PUSH
58578: LD_VAR 0 4
58582: PPUSH
58583: LD_VAR 0 5
58587: PPUSH
58588: CALL_OW 488
58592: AND
58593: IFFALSE 58617
// CutTreeXYR ( unit , x , y , 12 ) ;
58595: LD_VAR 0 2
58599: PPUSH
58600: LD_VAR 0 4
58604: PPUSH
58605: LD_VAR 0 5
58609: PPUSH
58610: LD_INT 12
58612: PPUSH
58613: CALL 58622 0 4
// end ;
58617: LD_VAR 0 6
58621: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58622: LD_INT 0
58624: PPUSH
58625: PPUSH
58626: PPUSH
58627: PPUSH
58628: PPUSH
58629: PPUSH
58630: PPUSH
58631: PPUSH
58632: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
58633: LD_VAR 0 1
58637: NOT
58638: PUSH
58639: LD_VAR 0 2
58643: PPUSH
58644: LD_VAR 0 3
58648: PPUSH
58649: CALL_OW 488
58653: NOT
58654: OR
58655: PUSH
58656: LD_VAR 0 4
58660: NOT
58661: OR
58662: IFFALSE 58666
// exit ;
58664: GO 59006
// list := [ ] ;
58666: LD_ADDR_VAR 0 13
58670: PUSH
58671: EMPTY
58672: ST_TO_ADDR
// if x - r < 0 then
58673: LD_VAR 0 2
58677: PUSH
58678: LD_VAR 0 4
58682: MINUS
58683: PUSH
58684: LD_INT 0
58686: LESS
58687: IFFALSE 58699
// min_x := 0 else
58689: LD_ADDR_VAR 0 7
58693: PUSH
58694: LD_INT 0
58696: ST_TO_ADDR
58697: GO 58715
// min_x := x - r ;
58699: LD_ADDR_VAR 0 7
58703: PUSH
58704: LD_VAR 0 2
58708: PUSH
58709: LD_VAR 0 4
58713: MINUS
58714: ST_TO_ADDR
// if y - r < 0 then
58715: LD_VAR 0 3
58719: PUSH
58720: LD_VAR 0 4
58724: MINUS
58725: PUSH
58726: LD_INT 0
58728: LESS
58729: IFFALSE 58741
// min_y := 0 else
58731: LD_ADDR_VAR 0 8
58735: PUSH
58736: LD_INT 0
58738: ST_TO_ADDR
58739: GO 58757
// min_y := y - r ;
58741: LD_ADDR_VAR 0 8
58745: PUSH
58746: LD_VAR 0 3
58750: PUSH
58751: LD_VAR 0 4
58755: MINUS
58756: ST_TO_ADDR
// max_x := x + r ;
58757: LD_ADDR_VAR 0 9
58761: PUSH
58762: LD_VAR 0 2
58766: PUSH
58767: LD_VAR 0 4
58771: PLUS
58772: ST_TO_ADDR
// max_y := y + r ;
58773: LD_ADDR_VAR 0 10
58777: PUSH
58778: LD_VAR 0 3
58782: PUSH
58783: LD_VAR 0 4
58787: PLUS
58788: ST_TO_ADDR
// for _x = min_x to max_x do
58789: LD_ADDR_VAR 0 11
58793: PUSH
58794: DOUBLE
58795: LD_VAR 0 7
58799: DEC
58800: ST_TO_ADDR
58801: LD_VAR 0 9
58805: PUSH
58806: FOR_TO
58807: IFFALSE 58924
// for _y = min_y to max_y do
58809: LD_ADDR_VAR 0 12
58813: PUSH
58814: DOUBLE
58815: LD_VAR 0 8
58819: DEC
58820: ST_TO_ADDR
58821: LD_VAR 0 10
58825: PUSH
58826: FOR_TO
58827: IFFALSE 58920
// begin if not ValidHex ( _x , _y ) then
58829: LD_VAR 0 11
58833: PPUSH
58834: LD_VAR 0 12
58838: PPUSH
58839: CALL_OW 488
58843: NOT
58844: IFFALSE 58848
// continue ;
58846: GO 58826
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58848: LD_VAR 0 11
58852: PPUSH
58853: LD_VAR 0 12
58857: PPUSH
58858: CALL_OW 351
58862: PUSH
58863: LD_VAR 0 11
58867: PPUSH
58868: LD_VAR 0 12
58872: PPUSH
58873: CALL_OW 554
58877: AND
58878: IFFALSE 58918
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58880: LD_ADDR_VAR 0 13
58884: PUSH
58885: LD_VAR 0 13
58889: PPUSH
58890: LD_VAR 0 13
58894: PUSH
58895: LD_INT 1
58897: PLUS
58898: PPUSH
58899: LD_VAR 0 11
58903: PUSH
58904: LD_VAR 0 12
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PPUSH
58913: CALL_OW 2
58917: ST_TO_ADDR
// end ;
58918: GO 58826
58920: POP
58921: POP
58922: GO 58806
58924: POP
58925: POP
// if not list then
58926: LD_VAR 0 13
58930: NOT
58931: IFFALSE 58935
// exit ;
58933: GO 59006
// for i in list do
58935: LD_ADDR_VAR 0 6
58939: PUSH
58940: LD_VAR 0 13
58944: PUSH
58945: FOR_IN
58946: IFFALSE 59004
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58948: LD_VAR 0 1
58952: PPUSH
58953: LD_STRING M
58955: PUSH
58956: LD_VAR 0 6
58960: PUSH
58961: LD_INT 1
58963: ARRAY
58964: PUSH
58965: LD_VAR 0 6
58969: PUSH
58970: LD_INT 2
58972: ARRAY
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: PPUSH
58998: CALL_OW 447
59002: GO 58945
59004: POP
59005: POP
// end ;
59006: LD_VAR 0 5
59010: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59011: LD_EXP 58
59015: NOT
59016: IFFALSE 59066
59018: GO 59020
59020: DISABLE
// begin initHack := true ;
59021: LD_ADDR_EXP 58
59025: PUSH
59026: LD_INT 1
59028: ST_TO_ADDR
// hackTanks := [ ] ;
59029: LD_ADDR_EXP 59
59033: PUSH
59034: EMPTY
59035: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59036: LD_ADDR_EXP 60
59040: PUSH
59041: EMPTY
59042: ST_TO_ADDR
// hackLimit := 3 ;
59043: LD_ADDR_EXP 61
59047: PUSH
59048: LD_INT 3
59050: ST_TO_ADDR
// hackDist := 12 ;
59051: LD_ADDR_EXP 62
59055: PUSH
59056: LD_INT 12
59058: ST_TO_ADDR
// hackCounter := [ ] ;
59059: LD_ADDR_EXP 63
59063: PUSH
59064: EMPTY
59065: ST_TO_ADDR
// end ;
59066: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59067: LD_EXP 58
59071: PUSH
59072: LD_INT 34
59074: PUSH
59075: LD_EXP 125
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PPUSH
59084: CALL_OW 69
59088: AND
59089: IFFALSE 59344
59091: GO 59093
59093: DISABLE
59094: LD_INT 0
59096: PPUSH
59097: PPUSH
// begin enable ;
59098: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59099: LD_ADDR_VAR 0 1
59103: PUSH
59104: LD_INT 34
59106: PUSH
59107: LD_EXP 125
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PPUSH
59116: CALL_OW 69
59120: PUSH
59121: FOR_IN
59122: IFFALSE 59342
// begin if not i in hackTanks then
59124: LD_VAR 0 1
59128: PUSH
59129: LD_EXP 59
59133: IN
59134: NOT
59135: IFFALSE 59218
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59137: LD_ADDR_EXP 59
59141: PUSH
59142: LD_EXP 59
59146: PPUSH
59147: LD_EXP 59
59151: PUSH
59152: LD_INT 1
59154: PLUS
59155: PPUSH
59156: LD_VAR 0 1
59160: PPUSH
59161: CALL_OW 1
59165: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59166: LD_ADDR_EXP 60
59170: PUSH
59171: LD_EXP 60
59175: PPUSH
59176: LD_EXP 60
59180: PUSH
59181: LD_INT 1
59183: PLUS
59184: PPUSH
59185: EMPTY
59186: PPUSH
59187: CALL_OW 1
59191: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59192: LD_ADDR_EXP 63
59196: PUSH
59197: LD_EXP 63
59201: PPUSH
59202: LD_EXP 63
59206: PUSH
59207: LD_INT 1
59209: PLUS
59210: PPUSH
59211: EMPTY
59212: PPUSH
59213: CALL_OW 1
59217: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59218: LD_VAR 0 1
59222: PPUSH
59223: CALL_OW 302
59227: NOT
59228: IFFALSE 59241
// begin HackUnlinkAll ( i ) ;
59230: LD_VAR 0 1
59234: PPUSH
59235: CALL 59347 0 1
// continue ;
59239: GO 59121
// end ; HackCheckCapturedStatus ( i ) ;
59241: LD_VAR 0 1
59245: PPUSH
59246: CALL 59790 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59250: LD_ADDR_VAR 0 2
59254: PUSH
59255: LD_INT 81
59257: PUSH
59258: LD_VAR 0 1
59262: PPUSH
59263: CALL_OW 255
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 33
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 91
59284: PUSH
59285: LD_VAR 0 1
59289: PUSH
59290: LD_EXP 62
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 50
59302: PUSH
59303: EMPTY
59304: LIST
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: PPUSH
59312: CALL_OW 69
59316: ST_TO_ADDR
// if not tmp then
59317: LD_VAR 0 2
59321: NOT
59322: IFFALSE 59326
// continue ;
59324: GO 59121
// HackLink ( i , tmp ) ;
59326: LD_VAR 0 1
59330: PPUSH
59331: LD_VAR 0 2
59335: PPUSH
59336: CALL 59483 0 2
// end ;
59340: GO 59121
59342: POP
59343: POP
// end ;
59344: PPOPN 2
59346: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59347: LD_INT 0
59349: PPUSH
59350: PPUSH
59351: PPUSH
// if not hack in hackTanks then
59352: LD_VAR 0 1
59356: PUSH
59357: LD_EXP 59
59361: IN
59362: NOT
59363: IFFALSE 59367
// exit ;
59365: GO 59478
// index := GetElementIndex ( hackTanks , hack ) ;
59367: LD_ADDR_VAR 0 4
59371: PUSH
59372: LD_EXP 59
59376: PPUSH
59377: LD_VAR 0 1
59381: PPUSH
59382: CALL 25854 0 2
59386: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59387: LD_EXP 60
59391: PUSH
59392: LD_VAR 0 4
59396: ARRAY
59397: IFFALSE 59478
// begin for i in hackTanksCaptured [ index ] do
59399: LD_ADDR_VAR 0 3
59403: PUSH
59404: LD_EXP 60
59408: PUSH
59409: LD_VAR 0 4
59413: ARRAY
59414: PUSH
59415: FOR_IN
59416: IFFALSE 59442
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59418: LD_VAR 0 3
59422: PUSH
59423: LD_INT 1
59425: ARRAY
59426: PPUSH
59427: LD_VAR 0 3
59431: PUSH
59432: LD_INT 2
59434: ARRAY
59435: PPUSH
59436: CALL_OW 235
59440: GO 59415
59442: POP
59443: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59444: LD_ADDR_EXP 60
59448: PUSH
59449: LD_EXP 60
59453: PPUSH
59454: LD_VAR 0 4
59458: PPUSH
59459: EMPTY
59460: PPUSH
59461: CALL_OW 1
59465: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59466: LD_VAR 0 1
59470: PPUSH
59471: LD_INT 0
59473: PPUSH
59474: CALL_OW 505
// end ; end ;
59478: LD_VAR 0 2
59482: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59483: LD_INT 0
59485: PPUSH
59486: PPUSH
59487: PPUSH
// if not hack in hackTanks or not vehicles then
59488: LD_VAR 0 1
59492: PUSH
59493: LD_EXP 59
59497: IN
59498: NOT
59499: PUSH
59500: LD_VAR 0 2
59504: NOT
59505: OR
59506: IFFALSE 59510
// exit ;
59508: GO 59785
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59510: LD_ADDR_VAR 0 2
59514: PUSH
59515: LD_VAR 0 1
59519: PPUSH
59520: LD_VAR 0 2
59524: PPUSH
59525: LD_INT 1
59527: PPUSH
59528: LD_INT 1
59530: PPUSH
59531: CALL 26504 0 4
59535: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59536: LD_ADDR_VAR 0 5
59540: PUSH
59541: LD_EXP 59
59545: PPUSH
59546: LD_VAR 0 1
59550: PPUSH
59551: CALL 25854 0 2
59555: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59556: LD_EXP 60
59560: PUSH
59561: LD_VAR 0 5
59565: ARRAY
59566: PUSH
59567: LD_EXP 61
59571: LESS
59572: IFFALSE 59761
// begin for i := 1 to vehicles do
59574: LD_ADDR_VAR 0 4
59578: PUSH
59579: DOUBLE
59580: LD_INT 1
59582: DEC
59583: ST_TO_ADDR
59584: LD_VAR 0 2
59588: PUSH
59589: FOR_TO
59590: IFFALSE 59759
// begin if hackTanksCaptured [ index ] = hackLimit then
59592: LD_EXP 60
59596: PUSH
59597: LD_VAR 0 5
59601: ARRAY
59602: PUSH
59603: LD_EXP 61
59607: EQUAL
59608: IFFALSE 59612
// break ;
59610: GO 59759
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59612: LD_ADDR_EXP 63
59616: PUSH
59617: LD_EXP 63
59621: PPUSH
59622: LD_VAR 0 5
59626: PPUSH
59627: LD_EXP 63
59631: PUSH
59632: LD_VAR 0 5
59636: ARRAY
59637: PUSH
59638: LD_INT 1
59640: PLUS
59641: PPUSH
59642: CALL_OW 1
59646: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59647: LD_ADDR_EXP 60
59651: PUSH
59652: LD_EXP 60
59656: PPUSH
59657: LD_VAR 0 5
59661: PUSH
59662: LD_EXP 60
59666: PUSH
59667: LD_VAR 0 5
59671: ARRAY
59672: PUSH
59673: LD_INT 1
59675: PLUS
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PPUSH
59681: LD_VAR 0 2
59685: PUSH
59686: LD_VAR 0 4
59690: ARRAY
59691: PUSH
59692: LD_VAR 0 2
59696: PUSH
59697: LD_VAR 0 4
59701: ARRAY
59702: PPUSH
59703: CALL_OW 255
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PPUSH
59712: CALL 26069 0 3
59716: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59717: LD_VAR 0 2
59721: PUSH
59722: LD_VAR 0 4
59726: ARRAY
59727: PPUSH
59728: LD_VAR 0 1
59732: PPUSH
59733: CALL_OW 255
59737: PPUSH
59738: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59742: LD_VAR 0 2
59746: PUSH
59747: LD_VAR 0 4
59751: ARRAY
59752: PPUSH
59753: CALL_OW 141
// end ;
59757: GO 59589
59759: POP
59760: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59761: LD_VAR 0 1
59765: PPUSH
59766: LD_EXP 60
59770: PUSH
59771: LD_VAR 0 5
59775: ARRAY
59776: PUSH
59777: LD_INT 0
59779: PLUS
59780: PPUSH
59781: CALL_OW 505
// end ;
59785: LD_VAR 0 3
59789: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59790: LD_INT 0
59792: PPUSH
59793: PPUSH
59794: PPUSH
59795: PPUSH
// if not hack in hackTanks then
59796: LD_VAR 0 1
59800: PUSH
59801: LD_EXP 59
59805: IN
59806: NOT
59807: IFFALSE 59811
// exit ;
59809: GO 60051
// index := GetElementIndex ( hackTanks , hack ) ;
59811: LD_ADDR_VAR 0 4
59815: PUSH
59816: LD_EXP 59
59820: PPUSH
59821: LD_VAR 0 1
59825: PPUSH
59826: CALL 25854 0 2
59830: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59831: LD_ADDR_VAR 0 3
59835: PUSH
59836: DOUBLE
59837: LD_EXP 60
59841: PUSH
59842: LD_VAR 0 4
59846: ARRAY
59847: INC
59848: ST_TO_ADDR
59849: LD_INT 1
59851: PUSH
59852: FOR_DOWNTO
59853: IFFALSE 60025
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59855: LD_ADDR_VAR 0 5
59859: PUSH
59860: LD_EXP 60
59864: PUSH
59865: LD_VAR 0 4
59869: ARRAY
59870: PUSH
59871: LD_VAR 0 3
59875: ARRAY
59876: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59877: LD_VAR 0 5
59881: PUSH
59882: LD_INT 1
59884: ARRAY
59885: PPUSH
59886: CALL_OW 302
59890: NOT
59891: PUSH
59892: LD_VAR 0 5
59896: PUSH
59897: LD_INT 1
59899: ARRAY
59900: PPUSH
59901: CALL_OW 255
59905: PUSH
59906: LD_VAR 0 1
59910: PPUSH
59911: CALL_OW 255
59915: NONEQUAL
59916: OR
59917: IFFALSE 60023
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59919: LD_VAR 0 5
59923: PUSH
59924: LD_INT 1
59926: ARRAY
59927: PPUSH
59928: CALL_OW 305
59932: PUSH
59933: LD_VAR 0 5
59937: PUSH
59938: LD_INT 1
59940: ARRAY
59941: PPUSH
59942: CALL_OW 255
59946: PUSH
59947: LD_VAR 0 1
59951: PPUSH
59952: CALL_OW 255
59956: EQUAL
59957: AND
59958: IFFALSE 59982
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59960: LD_VAR 0 5
59964: PUSH
59965: LD_INT 1
59967: ARRAY
59968: PPUSH
59969: LD_VAR 0 5
59973: PUSH
59974: LD_INT 2
59976: ARRAY
59977: PPUSH
59978: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59982: LD_ADDR_EXP 60
59986: PUSH
59987: LD_EXP 60
59991: PPUSH
59992: LD_VAR 0 4
59996: PPUSH
59997: LD_EXP 60
60001: PUSH
60002: LD_VAR 0 4
60006: ARRAY
60007: PPUSH
60008: LD_VAR 0 3
60012: PPUSH
60013: CALL_OW 3
60017: PPUSH
60018: CALL_OW 1
60022: ST_TO_ADDR
// end ; end ;
60023: GO 59852
60025: POP
60026: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60027: LD_VAR 0 1
60031: PPUSH
60032: LD_EXP 60
60036: PUSH
60037: LD_VAR 0 4
60041: ARRAY
60042: PUSH
60043: LD_INT 0
60045: PLUS
60046: PPUSH
60047: CALL_OW 505
// end ;
60051: LD_VAR 0 2
60055: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60056: LD_INT 0
60058: PPUSH
60059: PPUSH
60060: PPUSH
60061: PPUSH
// if not hack in hackTanks then
60062: LD_VAR 0 1
60066: PUSH
60067: LD_EXP 59
60071: IN
60072: NOT
60073: IFFALSE 60077
// exit ;
60075: GO 60162
// index := GetElementIndex ( hackTanks , hack ) ;
60077: LD_ADDR_VAR 0 5
60081: PUSH
60082: LD_EXP 59
60086: PPUSH
60087: LD_VAR 0 1
60091: PPUSH
60092: CALL 25854 0 2
60096: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60097: LD_ADDR_VAR 0 4
60101: PUSH
60102: DOUBLE
60103: LD_INT 1
60105: DEC
60106: ST_TO_ADDR
60107: LD_EXP 60
60111: PUSH
60112: LD_VAR 0 5
60116: ARRAY
60117: PUSH
60118: FOR_TO
60119: IFFALSE 60160
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60121: LD_EXP 60
60125: PUSH
60126: LD_VAR 0 5
60130: ARRAY
60131: PUSH
60132: LD_VAR 0 4
60136: ARRAY
60137: PUSH
60138: LD_INT 1
60140: ARRAY
60141: PUSH
60142: LD_VAR 0 2
60146: EQUAL
60147: IFFALSE 60158
// KillUnit ( vehicle ) ;
60149: LD_VAR 0 2
60153: PPUSH
60154: CALL_OW 66
60158: GO 60118
60160: POP
60161: POP
// end ;
60162: LD_VAR 0 3
60166: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
60167: LD_EXP 64
60171: NOT
60172: IFFALSE 60207
60174: GO 60176
60176: DISABLE
// begin initMiner := true ;
60177: LD_ADDR_EXP 64
60181: PUSH
60182: LD_INT 1
60184: ST_TO_ADDR
// minersList := [ ] ;
60185: LD_ADDR_EXP 65
60189: PUSH
60190: EMPTY
60191: ST_TO_ADDR
// minerMinesList := [ ] ;
60192: LD_ADDR_EXP 66
60196: PUSH
60197: EMPTY
60198: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
60199: LD_ADDR_EXP 67
60203: PUSH
60204: LD_INT 5
60206: ST_TO_ADDR
// end ;
60207: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
60208: LD_EXP 64
60212: PUSH
60213: LD_INT 34
60215: PUSH
60216: LD_EXP 130
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PPUSH
60225: CALL_OW 69
60229: AND
60230: IFFALSE 60693
60232: GO 60234
60234: DISABLE
60235: LD_INT 0
60237: PPUSH
60238: PPUSH
60239: PPUSH
60240: PPUSH
// begin enable ;
60241: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60242: LD_ADDR_VAR 0 1
60246: PUSH
60247: LD_INT 34
60249: PUSH
60250: LD_EXP 130
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PPUSH
60259: CALL_OW 69
60263: PUSH
60264: FOR_IN
60265: IFFALSE 60337
// begin if not i in minersList then
60267: LD_VAR 0 1
60271: PUSH
60272: LD_EXP 65
60276: IN
60277: NOT
60278: IFFALSE 60335
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60280: LD_ADDR_EXP 65
60284: PUSH
60285: LD_EXP 65
60289: PPUSH
60290: LD_EXP 65
60294: PUSH
60295: LD_INT 1
60297: PLUS
60298: PPUSH
60299: LD_VAR 0 1
60303: PPUSH
60304: CALL_OW 1
60308: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60309: LD_ADDR_EXP 66
60313: PUSH
60314: LD_EXP 66
60318: PPUSH
60319: LD_EXP 66
60323: PUSH
60324: LD_INT 1
60326: PLUS
60327: PPUSH
60328: EMPTY
60329: PPUSH
60330: CALL_OW 1
60334: ST_TO_ADDR
// end end ;
60335: GO 60264
60337: POP
60338: POP
// for i := minerMinesList downto 1 do
60339: LD_ADDR_VAR 0 1
60343: PUSH
60344: DOUBLE
60345: LD_EXP 66
60349: INC
60350: ST_TO_ADDR
60351: LD_INT 1
60353: PUSH
60354: FOR_DOWNTO
60355: IFFALSE 60691
// begin if IsLive ( minersList [ i ] ) then
60357: LD_EXP 65
60361: PUSH
60362: LD_VAR 0 1
60366: ARRAY
60367: PPUSH
60368: CALL_OW 300
60372: IFFALSE 60400
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
60374: LD_EXP 65
60378: PUSH
60379: LD_VAR 0 1
60383: ARRAY
60384: PPUSH
60385: LD_EXP 66
60389: PUSH
60390: LD_VAR 0 1
60394: ARRAY
60395: PPUSH
60396: CALL_OW 505
// if not minerMinesList [ i ] then
60400: LD_EXP 66
60404: PUSH
60405: LD_VAR 0 1
60409: ARRAY
60410: NOT
60411: IFFALSE 60415
// continue ;
60413: GO 60354
// for j := minerMinesList [ i ] downto 1 do
60415: LD_ADDR_VAR 0 2
60419: PUSH
60420: DOUBLE
60421: LD_EXP 66
60425: PUSH
60426: LD_VAR 0 1
60430: ARRAY
60431: INC
60432: ST_TO_ADDR
60433: LD_INT 1
60435: PUSH
60436: FOR_DOWNTO
60437: IFFALSE 60687
// begin side := GetSide ( minersList [ i ] ) ;
60439: LD_ADDR_VAR 0 3
60443: PUSH
60444: LD_EXP 65
60448: PUSH
60449: LD_VAR 0 1
60453: ARRAY
60454: PPUSH
60455: CALL_OW 255
60459: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60460: LD_ADDR_VAR 0 4
60464: PUSH
60465: LD_EXP 66
60469: PUSH
60470: LD_VAR 0 1
60474: ARRAY
60475: PUSH
60476: LD_VAR 0 2
60480: ARRAY
60481: PUSH
60482: LD_INT 1
60484: ARRAY
60485: PPUSH
60486: LD_EXP 66
60490: PUSH
60491: LD_VAR 0 1
60495: ARRAY
60496: PUSH
60497: LD_VAR 0 2
60501: ARRAY
60502: PUSH
60503: LD_INT 2
60505: ARRAY
60506: PPUSH
60507: CALL_OW 428
60511: ST_TO_ADDR
// if not tmp then
60512: LD_VAR 0 4
60516: NOT
60517: IFFALSE 60521
// continue ;
60519: GO 60436
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60521: LD_VAR 0 4
60525: PUSH
60526: LD_INT 81
60528: PUSH
60529: LD_VAR 0 3
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PPUSH
60538: CALL_OW 69
60542: IN
60543: PUSH
60544: LD_EXP 66
60548: PUSH
60549: LD_VAR 0 1
60553: ARRAY
60554: PUSH
60555: LD_VAR 0 2
60559: ARRAY
60560: PUSH
60561: LD_INT 1
60563: ARRAY
60564: PPUSH
60565: LD_EXP 66
60569: PUSH
60570: LD_VAR 0 1
60574: ARRAY
60575: PUSH
60576: LD_VAR 0 2
60580: ARRAY
60581: PUSH
60582: LD_INT 2
60584: ARRAY
60585: PPUSH
60586: CALL_OW 458
60590: AND
60591: IFFALSE 60685
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60593: LD_EXP 66
60597: PUSH
60598: LD_VAR 0 1
60602: ARRAY
60603: PUSH
60604: LD_VAR 0 2
60608: ARRAY
60609: PUSH
60610: LD_INT 1
60612: ARRAY
60613: PPUSH
60614: LD_EXP 66
60618: PUSH
60619: LD_VAR 0 1
60623: ARRAY
60624: PUSH
60625: LD_VAR 0 2
60629: ARRAY
60630: PUSH
60631: LD_INT 2
60633: ARRAY
60634: PPUSH
60635: LD_VAR 0 3
60639: PPUSH
60640: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60644: LD_ADDR_EXP 66
60648: PUSH
60649: LD_EXP 66
60653: PPUSH
60654: LD_VAR 0 1
60658: PPUSH
60659: LD_EXP 66
60663: PUSH
60664: LD_VAR 0 1
60668: ARRAY
60669: PPUSH
60670: LD_VAR 0 2
60674: PPUSH
60675: CALL_OW 3
60679: PPUSH
60680: CALL_OW 1
60684: ST_TO_ADDR
// end ; end ;
60685: GO 60436
60687: POP
60688: POP
// end ;
60689: GO 60354
60691: POP
60692: POP
// end ;
60693: PPOPN 4
60695: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60696: LD_INT 0
60698: PPUSH
60699: PPUSH
// result := false ;
60700: LD_ADDR_VAR 0 4
60704: PUSH
60705: LD_INT 0
60707: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60708: LD_VAR 0 1
60712: PPUSH
60713: CALL_OW 264
60717: PUSH
60718: LD_EXP 130
60722: EQUAL
60723: NOT
60724: IFFALSE 60728
// exit ;
60726: GO 60968
// index := GetElementIndex ( minersList , unit ) ;
60728: LD_ADDR_VAR 0 5
60732: PUSH
60733: LD_EXP 65
60737: PPUSH
60738: LD_VAR 0 1
60742: PPUSH
60743: CALL 25854 0 2
60747: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60748: LD_EXP 66
60752: PUSH
60753: LD_VAR 0 5
60757: ARRAY
60758: PUSH
60759: LD_EXP 67
60763: GREATEREQUAL
60764: IFFALSE 60768
// exit ;
60766: GO 60968
// ComMoveXY ( unit , x , y ) ;
60768: LD_VAR 0 1
60772: PPUSH
60773: LD_VAR 0 2
60777: PPUSH
60778: LD_VAR 0 3
60782: PPUSH
60783: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60787: LD_INT 35
60789: PPUSH
60790: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60794: LD_VAR 0 1
60798: PPUSH
60799: LD_VAR 0 2
60803: PPUSH
60804: LD_VAR 0 3
60808: PPUSH
60809: CALL 55918 0 3
60813: NOT
60814: PUSH
60815: LD_VAR 0 1
60819: PPUSH
60820: CALL_OW 314
60824: AND
60825: IFFALSE 60829
// exit ;
60827: GO 60968
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60829: LD_VAR 0 2
60833: PPUSH
60834: LD_VAR 0 3
60838: PPUSH
60839: CALL_OW 428
60843: PUSH
60844: LD_VAR 0 1
60848: EQUAL
60849: PUSH
60850: LD_VAR 0 1
60854: PPUSH
60855: CALL_OW 314
60859: NOT
60860: AND
60861: IFFALSE 60787
// PlaySoundXY ( x , y , PlantMine ) ;
60863: LD_VAR 0 2
60867: PPUSH
60868: LD_VAR 0 3
60872: PPUSH
60873: LD_STRING PlantMine
60875: PPUSH
60876: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60880: LD_VAR 0 2
60884: PPUSH
60885: LD_VAR 0 3
60889: PPUSH
60890: LD_VAR 0 1
60894: PPUSH
60895: CALL_OW 255
60899: PPUSH
60900: LD_INT 0
60902: PPUSH
60903: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60907: LD_ADDR_EXP 66
60911: PUSH
60912: LD_EXP 66
60916: PPUSH
60917: LD_VAR 0 5
60921: PUSH
60922: LD_EXP 66
60926: PUSH
60927: LD_VAR 0 5
60931: ARRAY
60932: PUSH
60933: LD_INT 1
60935: PLUS
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PPUSH
60941: LD_VAR 0 2
60945: PUSH
60946: LD_VAR 0 3
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PPUSH
60955: CALL 26069 0 3
60959: ST_TO_ADDR
// result := true ;
60960: LD_ADDR_VAR 0 4
60964: PUSH
60965: LD_INT 1
60967: ST_TO_ADDR
// end ;
60968: LD_VAR 0 4
60972: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60973: LD_INT 0
60975: PPUSH
60976: PPUSH
60977: PPUSH
// if not unit in minersList then
60978: LD_VAR 0 1
60982: PUSH
60983: LD_EXP 65
60987: IN
60988: NOT
60989: IFFALSE 60993
// exit ;
60991: GO 61385
// index := GetElementIndex ( minersList , unit ) ;
60993: LD_ADDR_VAR 0 6
60997: PUSH
60998: LD_EXP 65
61002: PPUSH
61003: LD_VAR 0 1
61007: PPUSH
61008: CALL 25854 0 2
61012: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61013: LD_ADDR_VAR 0 5
61017: PUSH
61018: DOUBLE
61019: LD_EXP 66
61023: PUSH
61024: LD_VAR 0 6
61028: ARRAY
61029: INC
61030: ST_TO_ADDR
61031: LD_INT 1
61033: PUSH
61034: FOR_DOWNTO
61035: IFFALSE 61196
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
61037: LD_EXP 66
61041: PUSH
61042: LD_VAR 0 6
61046: ARRAY
61047: PUSH
61048: LD_VAR 0 5
61052: ARRAY
61053: PUSH
61054: LD_INT 1
61056: ARRAY
61057: PUSH
61058: LD_VAR 0 2
61062: EQUAL
61063: PUSH
61064: LD_EXP 66
61068: PUSH
61069: LD_VAR 0 6
61073: ARRAY
61074: PUSH
61075: LD_VAR 0 5
61079: ARRAY
61080: PUSH
61081: LD_INT 2
61083: ARRAY
61084: PUSH
61085: LD_VAR 0 3
61089: EQUAL
61090: AND
61091: IFFALSE 61194
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61093: LD_EXP 66
61097: PUSH
61098: LD_VAR 0 6
61102: ARRAY
61103: PUSH
61104: LD_VAR 0 5
61108: ARRAY
61109: PUSH
61110: LD_INT 1
61112: ARRAY
61113: PPUSH
61114: LD_EXP 66
61118: PUSH
61119: LD_VAR 0 6
61123: ARRAY
61124: PUSH
61125: LD_VAR 0 5
61129: ARRAY
61130: PUSH
61131: LD_INT 2
61133: ARRAY
61134: PPUSH
61135: LD_VAR 0 1
61139: PPUSH
61140: CALL_OW 255
61144: PPUSH
61145: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61149: LD_ADDR_EXP 66
61153: PUSH
61154: LD_EXP 66
61158: PPUSH
61159: LD_VAR 0 6
61163: PPUSH
61164: LD_EXP 66
61168: PUSH
61169: LD_VAR 0 6
61173: ARRAY
61174: PPUSH
61175: LD_VAR 0 5
61179: PPUSH
61180: CALL_OW 3
61184: PPUSH
61185: CALL_OW 1
61189: ST_TO_ADDR
// exit ;
61190: POP
61191: POP
61192: GO 61385
// end ; end ;
61194: GO 61034
61196: POP
61197: POP
// for i := minerMinesList [ index ] downto 1 do
61198: LD_ADDR_VAR 0 5
61202: PUSH
61203: DOUBLE
61204: LD_EXP 66
61208: PUSH
61209: LD_VAR 0 6
61213: ARRAY
61214: INC
61215: ST_TO_ADDR
61216: LD_INT 1
61218: PUSH
61219: FOR_DOWNTO
61220: IFFALSE 61383
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61222: LD_EXP 66
61226: PUSH
61227: LD_VAR 0 6
61231: ARRAY
61232: PUSH
61233: LD_VAR 0 5
61237: ARRAY
61238: PUSH
61239: LD_INT 1
61241: ARRAY
61242: PPUSH
61243: LD_EXP 66
61247: PUSH
61248: LD_VAR 0 6
61252: ARRAY
61253: PUSH
61254: LD_VAR 0 5
61258: ARRAY
61259: PUSH
61260: LD_INT 2
61262: ARRAY
61263: PPUSH
61264: LD_VAR 0 2
61268: PPUSH
61269: LD_VAR 0 3
61273: PPUSH
61274: CALL_OW 298
61278: PUSH
61279: LD_INT 6
61281: LESS
61282: IFFALSE 61381
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61284: LD_EXP 66
61288: PUSH
61289: LD_VAR 0 6
61293: ARRAY
61294: PUSH
61295: LD_VAR 0 5
61299: ARRAY
61300: PUSH
61301: LD_INT 1
61303: ARRAY
61304: PPUSH
61305: LD_EXP 66
61309: PUSH
61310: LD_VAR 0 6
61314: ARRAY
61315: PUSH
61316: LD_VAR 0 5
61320: ARRAY
61321: PUSH
61322: LD_INT 2
61324: ARRAY
61325: PPUSH
61326: LD_VAR 0 1
61330: PPUSH
61331: CALL_OW 255
61335: PPUSH
61336: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61340: LD_ADDR_EXP 66
61344: PUSH
61345: LD_EXP 66
61349: PPUSH
61350: LD_VAR 0 6
61354: PPUSH
61355: LD_EXP 66
61359: PUSH
61360: LD_VAR 0 6
61364: ARRAY
61365: PPUSH
61366: LD_VAR 0 5
61370: PPUSH
61371: CALL_OW 3
61375: PPUSH
61376: CALL_OW 1
61380: ST_TO_ADDR
// end ; end ;
61381: GO 61219
61383: POP
61384: POP
// end ;
61385: LD_VAR 0 4
61389: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61390: LD_INT 0
61392: PPUSH
61393: PPUSH
61394: PPUSH
61395: PPUSH
61396: PPUSH
61397: PPUSH
61398: PPUSH
61399: PPUSH
61400: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61401: LD_VAR 0 1
61405: PPUSH
61406: CALL_OW 264
61410: PUSH
61411: LD_EXP 130
61415: EQUAL
61416: NOT
61417: PUSH
61418: LD_VAR 0 1
61422: PUSH
61423: LD_EXP 65
61427: IN
61428: NOT
61429: OR
61430: IFFALSE 61434
// exit ;
61432: GO 61756
// index := GetElementIndex ( minersList , unit ) ;
61434: LD_ADDR_VAR 0 6
61438: PUSH
61439: LD_EXP 65
61443: PPUSH
61444: LD_VAR 0 1
61448: PPUSH
61449: CALL 25854 0 2
61453: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61454: LD_ADDR_VAR 0 8
61458: PUSH
61459: LD_EXP 67
61463: PUSH
61464: LD_EXP 66
61468: PUSH
61469: LD_VAR 0 6
61473: ARRAY
61474: MINUS
61475: ST_TO_ADDR
// if not minesFreeAmount then
61476: LD_VAR 0 8
61480: NOT
61481: IFFALSE 61485
// exit ;
61483: GO 61756
// tmp := [ ] ;
61485: LD_ADDR_VAR 0 7
61489: PUSH
61490: EMPTY
61491: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61492: LD_ADDR_VAR 0 5
61496: PUSH
61497: DOUBLE
61498: LD_INT 1
61500: DEC
61501: ST_TO_ADDR
61502: LD_VAR 0 8
61506: PUSH
61507: FOR_TO
61508: IFFALSE 61703
// begin _d := rand ( 0 , 5 ) ;
61510: LD_ADDR_VAR 0 11
61514: PUSH
61515: LD_INT 0
61517: PPUSH
61518: LD_INT 5
61520: PPUSH
61521: CALL_OW 12
61525: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61526: LD_ADDR_VAR 0 12
61530: PUSH
61531: LD_INT 2
61533: PPUSH
61534: LD_INT 6
61536: PPUSH
61537: CALL_OW 12
61541: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61542: LD_ADDR_VAR 0 9
61546: PUSH
61547: LD_VAR 0 2
61551: PPUSH
61552: LD_VAR 0 11
61556: PPUSH
61557: LD_VAR 0 12
61561: PPUSH
61562: CALL_OW 272
61566: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61567: LD_ADDR_VAR 0 10
61571: PUSH
61572: LD_VAR 0 3
61576: PPUSH
61577: LD_VAR 0 11
61581: PPUSH
61582: LD_VAR 0 12
61586: PPUSH
61587: CALL_OW 273
61591: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61592: LD_VAR 0 9
61596: PPUSH
61597: LD_VAR 0 10
61601: PPUSH
61602: CALL_OW 488
61606: PUSH
61607: LD_VAR 0 9
61611: PUSH
61612: LD_VAR 0 10
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_VAR 0 7
61625: IN
61626: NOT
61627: AND
61628: PUSH
61629: LD_VAR 0 9
61633: PPUSH
61634: LD_VAR 0 10
61638: PPUSH
61639: CALL_OW 458
61643: NOT
61644: AND
61645: IFFALSE 61687
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61647: LD_ADDR_VAR 0 7
61651: PUSH
61652: LD_VAR 0 7
61656: PPUSH
61657: LD_VAR 0 7
61661: PUSH
61662: LD_INT 1
61664: PLUS
61665: PPUSH
61666: LD_VAR 0 9
61670: PUSH
61671: LD_VAR 0 10
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PPUSH
61680: CALL_OW 1
61684: ST_TO_ADDR
61685: GO 61701
// i := i - 1 ;
61687: LD_ADDR_VAR 0 5
61691: PUSH
61692: LD_VAR 0 5
61696: PUSH
61697: LD_INT 1
61699: MINUS
61700: ST_TO_ADDR
// end ;
61701: GO 61507
61703: POP
61704: POP
// for i in tmp do
61705: LD_ADDR_VAR 0 5
61709: PUSH
61710: LD_VAR 0 7
61714: PUSH
61715: FOR_IN
61716: IFFALSE 61754
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61718: LD_VAR 0 1
61722: PPUSH
61723: LD_VAR 0 5
61727: PUSH
61728: LD_INT 1
61730: ARRAY
61731: PPUSH
61732: LD_VAR 0 5
61736: PUSH
61737: LD_INT 2
61739: ARRAY
61740: PPUSH
61741: CALL 60696 0 3
61745: NOT
61746: IFFALSE 61752
// exit ;
61748: POP
61749: POP
61750: GO 61756
61752: GO 61715
61754: POP
61755: POP
// end ;
61756: LD_VAR 0 4
61760: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
61761: LD_INT 0
61763: PPUSH
61764: PPUSH
61765: PPUSH
61766: PPUSH
61767: PPUSH
61768: PPUSH
61769: PPUSH
// if not GetClass ( unit ) = class_sniper then
61770: LD_VAR 0 1
61774: PPUSH
61775: CALL_OW 257
61779: PUSH
61780: LD_INT 5
61782: EQUAL
61783: NOT
61784: IFFALSE 61788
// exit ;
61786: GO 62176
// dist := 8 ;
61788: LD_ADDR_VAR 0 5
61792: PUSH
61793: LD_INT 8
61795: ST_TO_ADDR
// viewRange := 12 ;
61796: LD_ADDR_VAR 0 7
61800: PUSH
61801: LD_INT 12
61803: ST_TO_ADDR
// side := GetSide ( unit ) ;
61804: LD_ADDR_VAR 0 6
61808: PUSH
61809: LD_VAR 0 1
61813: PPUSH
61814: CALL_OW 255
61818: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61819: LD_INT 61
61821: PPUSH
61822: LD_VAR 0 6
61826: PPUSH
61827: CALL_OW 321
61831: PUSH
61832: LD_INT 2
61834: EQUAL
61835: IFFALSE 61845
// viewRange := 16 ;
61837: LD_ADDR_VAR 0 7
61841: PUSH
61842: LD_INT 16
61844: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61845: LD_VAR 0 1
61849: PPUSH
61850: LD_VAR 0 2
61854: PPUSH
61855: LD_VAR 0 3
61859: PPUSH
61860: CALL_OW 297
61864: PUSH
61865: LD_VAR 0 5
61869: GREATER
61870: IFFALSE 61949
// begin ComMoveXY ( unit , x , y ) ;
61872: LD_VAR 0 1
61876: PPUSH
61877: LD_VAR 0 2
61881: PPUSH
61882: LD_VAR 0 3
61886: PPUSH
61887: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61891: LD_INT 35
61893: PPUSH
61894: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61898: LD_VAR 0 1
61902: PPUSH
61903: LD_VAR 0 2
61907: PPUSH
61908: LD_VAR 0 3
61912: PPUSH
61913: CALL 55918 0 3
61917: NOT
61918: IFFALSE 61922
// exit ;
61920: GO 62176
// until GetDistUnitXY ( unit , x , y ) < dist ;
61922: LD_VAR 0 1
61926: PPUSH
61927: LD_VAR 0 2
61931: PPUSH
61932: LD_VAR 0 3
61936: PPUSH
61937: CALL_OW 297
61941: PUSH
61942: LD_VAR 0 5
61946: LESS
61947: IFFALSE 61891
// end ; ComTurnXY ( unit , x , y ) ;
61949: LD_VAR 0 1
61953: PPUSH
61954: LD_VAR 0 2
61958: PPUSH
61959: LD_VAR 0 3
61963: PPUSH
61964: CALL_OW 118
// wait ( 5 ) ;
61968: LD_INT 5
61970: PPUSH
61971: CALL_OW 67
// _d := GetDir ( unit ) ;
61975: LD_ADDR_VAR 0 10
61979: PUSH
61980: LD_VAR 0 1
61984: PPUSH
61985: CALL_OW 254
61989: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
61990: LD_ADDR_VAR 0 8
61994: PUSH
61995: LD_VAR 0 1
61999: PPUSH
62000: CALL_OW 250
62004: PPUSH
62005: LD_VAR 0 10
62009: PPUSH
62010: LD_VAR 0 5
62014: PPUSH
62015: CALL_OW 272
62019: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
62020: LD_ADDR_VAR 0 9
62024: PUSH
62025: LD_VAR 0 1
62029: PPUSH
62030: CALL_OW 251
62034: PPUSH
62035: LD_VAR 0 10
62039: PPUSH
62040: LD_VAR 0 5
62044: PPUSH
62045: CALL_OW 273
62049: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62050: LD_VAR 0 8
62054: PPUSH
62055: LD_VAR 0 9
62059: PPUSH
62060: CALL_OW 488
62064: NOT
62065: IFFALSE 62069
// exit ;
62067: GO 62176
// ComAnimCustom ( unit , 1 ) ;
62069: LD_VAR 0 1
62073: PPUSH
62074: LD_INT 1
62076: PPUSH
62077: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62081: LD_VAR 0 8
62085: PPUSH
62086: LD_VAR 0 9
62090: PPUSH
62091: LD_VAR 0 6
62095: PPUSH
62096: LD_VAR 0 7
62100: PPUSH
62101: CALL_OW 330
// repeat wait ( 1 ) ;
62105: LD_INT 1
62107: PPUSH
62108: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
62112: LD_VAR 0 1
62116: PPUSH
62117: CALL_OW 316
62121: PUSH
62122: LD_VAR 0 1
62126: PPUSH
62127: CALL_OW 314
62131: OR
62132: PUSH
62133: LD_VAR 0 1
62137: PPUSH
62138: CALL_OW 302
62142: NOT
62143: OR
62144: PUSH
62145: LD_VAR 0 1
62149: PPUSH
62150: CALL_OW 301
62154: OR
62155: IFFALSE 62105
// RemoveSeeing ( _x , _y , side ) ;
62157: LD_VAR 0 8
62161: PPUSH
62162: LD_VAR 0 9
62166: PPUSH
62167: LD_VAR 0 6
62171: PPUSH
62172: CALL_OW 331
// end ; end_of_file
62176: LD_VAR 0 4
62180: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
62181: LD_VAR 0 2
62185: PUSH
62186: LD_INT 100
62188: EQUAL
62189: IFFALSE 63138
// begin if not StreamModeActive then
62191: LD_EXP 68
62195: NOT
62196: IFFALSE 62206
// StreamModeActive := true ;
62198: LD_ADDR_EXP 68
62202: PUSH
62203: LD_INT 1
62205: ST_TO_ADDR
// if p3 = 0 then
62206: LD_VAR 0 3
62210: PUSH
62211: LD_INT 0
62213: EQUAL
62214: IFFALSE 62220
// InitStreamMode ;
62216: CALL 63296 0 0
// if p3 = 1 then
62220: LD_VAR 0 3
62224: PUSH
62225: LD_INT 1
62227: EQUAL
62228: IFFALSE 62238
// sRocket := true ;
62230: LD_ADDR_EXP 73
62234: PUSH
62235: LD_INT 1
62237: ST_TO_ADDR
// if p3 = 2 then
62238: LD_VAR 0 3
62242: PUSH
62243: LD_INT 2
62245: EQUAL
62246: IFFALSE 62256
// sSpeed := true ;
62248: LD_ADDR_EXP 72
62252: PUSH
62253: LD_INT 1
62255: ST_TO_ADDR
// if p3 = 3 then
62256: LD_VAR 0 3
62260: PUSH
62261: LD_INT 3
62263: EQUAL
62264: IFFALSE 62274
// sEngine := true ;
62266: LD_ADDR_EXP 74
62270: PUSH
62271: LD_INT 1
62273: ST_TO_ADDR
// if p3 = 4 then
62274: LD_VAR 0 3
62278: PUSH
62279: LD_INT 4
62281: EQUAL
62282: IFFALSE 62292
// sSpec := true ;
62284: LD_ADDR_EXP 71
62288: PUSH
62289: LD_INT 1
62291: ST_TO_ADDR
// if p3 = 5 then
62292: LD_VAR 0 3
62296: PUSH
62297: LD_INT 5
62299: EQUAL
62300: IFFALSE 62310
// sLevel := true ;
62302: LD_ADDR_EXP 75
62306: PUSH
62307: LD_INT 1
62309: ST_TO_ADDR
// if p3 = 6 then
62310: LD_VAR 0 3
62314: PUSH
62315: LD_INT 6
62317: EQUAL
62318: IFFALSE 62328
// sArmoury := true ;
62320: LD_ADDR_EXP 76
62324: PUSH
62325: LD_INT 1
62327: ST_TO_ADDR
// if p3 = 7 then
62328: LD_VAR 0 3
62332: PUSH
62333: LD_INT 7
62335: EQUAL
62336: IFFALSE 62346
// sRadar := true ;
62338: LD_ADDR_EXP 77
62342: PUSH
62343: LD_INT 1
62345: ST_TO_ADDR
// if p3 = 8 then
62346: LD_VAR 0 3
62350: PUSH
62351: LD_INT 8
62353: EQUAL
62354: IFFALSE 62364
// sBunker := true ;
62356: LD_ADDR_EXP 78
62360: PUSH
62361: LD_INT 1
62363: ST_TO_ADDR
// if p3 = 9 then
62364: LD_VAR 0 3
62368: PUSH
62369: LD_INT 9
62371: EQUAL
62372: IFFALSE 62382
// sHack := true ;
62374: LD_ADDR_EXP 79
62378: PUSH
62379: LD_INT 1
62381: ST_TO_ADDR
// if p3 = 10 then
62382: LD_VAR 0 3
62386: PUSH
62387: LD_INT 10
62389: EQUAL
62390: IFFALSE 62400
// sFire := true ;
62392: LD_ADDR_EXP 80
62396: PUSH
62397: LD_INT 1
62399: ST_TO_ADDR
// if p3 = 11 then
62400: LD_VAR 0 3
62404: PUSH
62405: LD_INT 11
62407: EQUAL
62408: IFFALSE 62418
// sRefresh := true ;
62410: LD_ADDR_EXP 81
62414: PUSH
62415: LD_INT 1
62417: ST_TO_ADDR
// if p3 = 12 then
62418: LD_VAR 0 3
62422: PUSH
62423: LD_INT 12
62425: EQUAL
62426: IFFALSE 62436
// sExp := true ;
62428: LD_ADDR_EXP 82
62432: PUSH
62433: LD_INT 1
62435: ST_TO_ADDR
// if p3 = 13 then
62436: LD_VAR 0 3
62440: PUSH
62441: LD_INT 13
62443: EQUAL
62444: IFFALSE 62454
// sDepot := true ;
62446: LD_ADDR_EXP 83
62450: PUSH
62451: LD_INT 1
62453: ST_TO_ADDR
// if p3 = 14 then
62454: LD_VAR 0 3
62458: PUSH
62459: LD_INT 14
62461: EQUAL
62462: IFFALSE 62472
// sFlag := true ;
62464: LD_ADDR_EXP 84
62468: PUSH
62469: LD_INT 1
62471: ST_TO_ADDR
// if p3 = 15 then
62472: LD_VAR 0 3
62476: PUSH
62477: LD_INT 15
62479: EQUAL
62480: IFFALSE 62490
// sKamikadze := true ;
62482: LD_ADDR_EXP 92
62486: PUSH
62487: LD_INT 1
62489: ST_TO_ADDR
// if p3 = 16 then
62490: LD_VAR 0 3
62494: PUSH
62495: LD_INT 16
62497: EQUAL
62498: IFFALSE 62508
// sTroll := true ;
62500: LD_ADDR_EXP 93
62504: PUSH
62505: LD_INT 1
62507: ST_TO_ADDR
// if p3 = 17 then
62508: LD_VAR 0 3
62512: PUSH
62513: LD_INT 17
62515: EQUAL
62516: IFFALSE 62526
// sSlow := true ;
62518: LD_ADDR_EXP 94
62522: PUSH
62523: LD_INT 1
62525: ST_TO_ADDR
// if p3 = 18 then
62526: LD_VAR 0 3
62530: PUSH
62531: LD_INT 18
62533: EQUAL
62534: IFFALSE 62544
// sLack := true ;
62536: LD_ADDR_EXP 95
62540: PUSH
62541: LD_INT 1
62543: ST_TO_ADDR
// if p3 = 19 then
62544: LD_VAR 0 3
62548: PUSH
62549: LD_INT 19
62551: EQUAL
62552: IFFALSE 62562
// sTank := true ;
62554: LD_ADDR_EXP 97
62558: PUSH
62559: LD_INT 1
62561: ST_TO_ADDR
// if p3 = 20 then
62562: LD_VAR 0 3
62566: PUSH
62567: LD_INT 20
62569: EQUAL
62570: IFFALSE 62580
// sRemote := true ;
62572: LD_ADDR_EXP 98
62576: PUSH
62577: LD_INT 1
62579: ST_TO_ADDR
// if p3 = 21 then
62580: LD_VAR 0 3
62584: PUSH
62585: LD_INT 21
62587: EQUAL
62588: IFFALSE 62598
// sPowell := true ;
62590: LD_ADDR_EXP 99
62594: PUSH
62595: LD_INT 1
62597: ST_TO_ADDR
// if p3 = 22 then
62598: LD_VAR 0 3
62602: PUSH
62603: LD_INT 22
62605: EQUAL
62606: IFFALSE 62616
// sTeleport := true ;
62608: LD_ADDR_EXP 102
62612: PUSH
62613: LD_INT 1
62615: ST_TO_ADDR
// if p3 = 23 then
62616: LD_VAR 0 3
62620: PUSH
62621: LD_INT 23
62623: EQUAL
62624: IFFALSE 62634
// sOilTower := true ;
62626: LD_ADDR_EXP 104
62630: PUSH
62631: LD_INT 1
62633: ST_TO_ADDR
// if p3 = 24 then
62634: LD_VAR 0 3
62638: PUSH
62639: LD_INT 24
62641: EQUAL
62642: IFFALSE 62652
// sShovel := true ;
62644: LD_ADDR_EXP 105
62648: PUSH
62649: LD_INT 1
62651: ST_TO_ADDR
// if p3 = 25 then
62652: LD_VAR 0 3
62656: PUSH
62657: LD_INT 25
62659: EQUAL
62660: IFFALSE 62670
// sSheik := true ;
62662: LD_ADDR_EXP 106
62666: PUSH
62667: LD_INT 1
62669: ST_TO_ADDR
// if p3 = 26 then
62670: LD_VAR 0 3
62674: PUSH
62675: LD_INT 26
62677: EQUAL
62678: IFFALSE 62688
// sEarthquake := true ;
62680: LD_ADDR_EXP 108
62684: PUSH
62685: LD_INT 1
62687: ST_TO_ADDR
// if p3 = 27 then
62688: LD_VAR 0 3
62692: PUSH
62693: LD_INT 27
62695: EQUAL
62696: IFFALSE 62706
// sAI := true ;
62698: LD_ADDR_EXP 109
62702: PUSH
62703: LD_INT 1
62705: ST_TO_ADDR
// if p3 = 28 then
62706: LD_VAR 0 3
62710: PUSH
62711: LD_INT 28
62713: EQUAL
62714: IFFALSE 62724
// sCargo := true ;
62716: LD_ADDR_EXP 112
62720: PUSH
62721: LD_INT 1
62723: ST_TO_ADDR
// if p3 = 29 then
62724: LD_VAR 0 3
62728: PUSH
62729: LD_INT 29
62731: EQUAL
62732: IFFALSE 62742
// sDLaser := true ;
62734: LD_ADDR_EXP 113
62738: PUSH
62739: LD_INT 1
62741: ST_TO_ADDR
// if p3 = 30 then
62742: LD_VAR 0 3
62746: PUSH
62747: LD_INT 30
62749: EQUAL
62750: IFFALSE 62760
// sExchange := true ;
62752: LD_ADDR_EXP 114
62756: PUSH
62757: LD_INT 1
62759: ST_TO_ADDR
// if p3 = 31 then
62760: LD_VAR 0 3
62764: PUSH
62765: LD_INT 31
62767: EQUAL
62768: IFFALSE 62778
// sFac := true ;
62770: LD_ADDR_EXP 115
62774: PUSH
62775: LD_INT 1
62777: ST_TO_ADDR
// if p3 = 32 then
62778: LD_VAR 0 3
62782: PUSH
62783: LD_INT 32
62785: EQUAL
62786: IFFALSE 62796
// sPower := true ;
62788: LD_ADDR_EXP 116
62792: PUSH
62793: LD_INT 1
62795: ST_TO_ADDR
// if p3 = 33 then
62796: LD_VAR 0 3
62800: PUSH
62801: LD_INT 33
62803: EQUAL
62804: IFFALSE 62814
// sRandom := true ;
62806: LD_ADDR_EXP 117
62810: PUSH
62811: LD_INT 1
62813: ST_TO_ADDR
// if p3 = 34 then
62814: LD_VAR 0 3
62818: PUSH
62819: LD_INT 34
62821: EQUAL
62822: IFFALSE 62832
// sShield := true ;
62824: LD_ADDR_EXP 118
62828: PUSH
62829: LD_INT 1
62831: ST_TO_ADDR
// if p3 = 35 then
62832: LD_VAR 0 3
62836: PUSH
62837: LD_INT 35
62839: EQUAL
62840: IFFALSE 62850
// sTime := true ;
62842: LD_ADDR_EXP 119
62846: PUSH
62847: LD_INT 1
62849: ST_TO_ADDR
// if p3 = 36 then
62850: LD_VAR 0 3
62854: PUSH
62855: LD_INT 36
62857: EQUAL
62858: IFFALSE 62868
// sTools := true ;
62860: LD_ADDR_EXP 120
62864: PUSH
62865: LD_INT 1
62867: ST_TO_ADDR
// if p3 = 101 then
62868: LD_VAR 0 3
62872: PUSH
62873: LD_INT 101
62875: EQUAL
62876: IFFALSE 62886
// sSold := true ;
62878: LD_ADDR_EXP 85
62882: PUSH
62883: LD_INT 1
62885: ST_TO_ADDR
// if p3 = 102 then
62886: LD_VAR 0 3
62890: PUSH
62891: LD_INT 102
62893: EQUAL
62894: IFFALSE 62904
// sDiff := true ;
62896: LD_ADDR_EXP 86
62900: PUSH
62901: LD_INT 1
62903: ST_TO_ADDR
// if p3 = 103 then
62904: LD_VAR 0 3
62908: PUSH
62909: LD_INT 103
62911: EQUAL
62912: IFFALSE 62922
// sFog := true ;
62914: LD_ADDR_EXP 89
62918: PUSH
62919: LD_INT 1
62921: ST_TO_ADDR
// if p3 = 104 then
62922: LD_VAR 0 3
62926: PUSH
62927: LD_INT 104
62929: EQUAL
62930: IFFALSE 62940
// sReset := true ;
62932: LD_ADDR_EXP 90
62936: PUSH
62937: LD_INT 1
62939: ST_TO_ADDR
// if p3 = 105 then
62940: LD_VAR 0 3
62944: PUSH
62945: LD_INT 105
62947: EQUAL
62948: IFFALSE 62958
// sSun := true ;
62950: LD_ADDR_EXP 91
62954: PUSH
62955: LD_INT 1
62957: ST_TO_ADDR
// if p3 = 106 then
62958: LD_VAR 0 3
62962: PUSH
62963: LD_INT 106
62965: EQUAL
62966: IFFALSE 62976
// sTiger := true ;
62968: LD_ADDR_EXP 87
62972: PUSH
62973: LD_INT 1
62975: ST_TO_ADDR
// if p3 = 107 then
62976: LD_VAR 0 3
62980: PUSH
62981: LD_INT 107
62983: EQUAL
62984: IFFALSE 62994
// sBomb := true ;
62986: LD_ADDR_EXP 88
62990: PUSH
62991: LD_INT 1
62993: ST_TO_ADDR
// if p3 = 108 then
62994: LD_VAR 0 3
62998: PUSH
62999: LD_INT 108
63001: EQUAL
63002: IFFALSE 63012
// sWound := true ;
63004: LD_ADDR_EXP 96
63008: PUSH
63009: LD_INT 1
63011: ST_TO_ADDR
// if p3 = 109 then
63012: LD_VAR 0 3
63016: PUSH
63017: LD_INT 109
63019: EQUAL
63020: IFFALSE 63030
// sBetray := true ;
63022: LD_ADDR_EXP 100
63026: PUSH
63027: LD_INT 1
63029: ST_TO_ADDR
// if p3 = 110 then
63030: LD_VAR 0 3
63034: PUSH
63035: LD_INT 110
63037: EQUAL
63038: IFFALSE 63048
// sContamin := true ;
63040: LD_ADDR_EXP 101
63044: PUSH
63045: LD_INT 1
63047: ST_TO_ADDR
// if p3 = 111 then
63048: LD_VAR 0 3
63052: PUSH
63053: LD_INT 111
63055: EQUAL
63056: IFFALSE 63066
// sOil := true ;
63058: LD_ADDR_EXP 103
63062: PUSH
63063: LD_INT 1
63065: ST_TO_ADDR
// if p3 = 112 then
63066: LD_VAR 0 3
63070: PUSH
63071: LD_INT 112
63073: EQUAL
63074: IFFALSE 63084
// sStu := true ;
63076: LD_ADDR_EXP 107
63080: PUSH
63081: LD_INT 1
63083: ST_TO_ADDR
// if p3 = 113 then
63084: LD_VAR 0 3
63088: PUSH
63089: LD_INT 113
63091: EQUAL
63092: IFFALSE 63102
// sBazooka := true ;
63094: LD_ADDR_EXP 110
63098: PUSH
63099: LD_INT 1
63101: ST_TO_ADDR
// if p3 = 114 then
63102: LD_VAR 0 3
63106: PUSH
63107: LD_INT 114
63109: EQUAL
63110: IFFALSE 63120
// sMortar := true ;
63112: LD_ADDR_EXP 111
63116: PUSH
63117: LD_INT 1
63119: ST_TO_ADDR
// if p3 = 115 then
63120: LD_VAR 0 3
63124: PUSH
63125: LD_INT 115
63127: EQUAL
63128: IFFALSE 63138
// sRanger := true ;
63130: LD_ADDR_EXP 121
63134: PUSH
63135: LD_INT 1
63137: ST_TO_ADDR
// end ; if p2 = 101 then
63138: LD_VAR 0 2
63142: PUSH
63143: LD_INT 101
63145: EQUAL
63146: IFFALSE 63274
// begin case p3 of 1 :
63148: LD_VAR 0 3
63152: PUSH
63153: LD_INT 1
63155: DOUBLE
63156: EQUAL
63157: IFTRUE 63161
63159: GO 63168
63161: POP
// hHackUnlimitedResources ; 2 :
63162: CALL 74309 0 0
63166: GO 63274
63168: LD_INT 2
63170: DOUBLE
63171: EQUAL
63172: IFTRUE 63176
63174: GO 63183
63176: POP
// hHackSetLevel10 ; 3 :
63177: CALL 74442 0 0
63181: GO 63274
63183: LD_INT 3
63185: DOUBLE
63186: EQUAL
63187: IFTRUE 63191
63189: GO 63198
63191: POP
// hHackSetLevel10YourUnits ; 4 :
63192: CALL 74527 0 0
63196: GO 63274
63198: LD_INT 4
63200: DOUBLE
63201: EQUAL
63202: IFTRUE 63206
63204: GO 63213
63206: POP
// hHackInvincible ; 5 :
63207: CALL 74975 0 0
63211: GO 63274
63213: LD_INT 5
63215: DOUBLE
63216: EQUAL
63217: IFTRUE 63221
63219: GO 63228
63221: POP
// hHackInvisible ; 6 :
63222: CALL 75086 0 0
63226: GO 63274
63228: LD_INT 6
63230: DOUBLE
63231: EQUAL
63232: IFTRUE 63236
63234: GO 63243
63236: POP
// hHackChangeYourSide ; 7 :
63237: CALL 75143 0 0
63241: GO 63274
63243: LD_INT 7
63245: DOUBLE
63246: EQUAL
63247: IFTRUE 63251
63249: GO 63258
63251: POP
// hHackChangeUnitSide ; 8 :
63252: CALL 75185 0 0
63256: GO 63274
63258: LD_INT 8
63260: DOUBLE
63261: EQUAL
63262: IFTRUE 63266
63264: GO 63273
63266: POP
// hHackFog ; end ;
63267: CALL 75286 0 0
63271: GO 63274
63273: POP
// end ; end ;
63274: PPOPN 6
63276: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
63277: GO 63279
63279: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
63280: LD_STRING initStreamRollete();
63282: PPUSH
63283: CALL_OW 559
// InitStreamMode ;
63287: CALL 63296 0 0
// DefineStreamItems ( ) ;
63291: CALL 63736 0 0
// end ;
63295: END
// function InitStreamMode ; begin
63296: LD_INT 0
63298: PPUSH
// streamModeActive := false ;
63299: LD_ADDR_EXP 68
63303: PUSH
63304: LD_INT 0
63306: ST_TO_ADDR
// normalCounter := 36 ;
63307: LD_ADDR_EXP 69
63311: PUSH
63312: LD_INT 36
63314: ST_TO_ADDR
// hardcoreCounter := 16 ;
63315: LD_ADDR_EXP 70
63319: PUSH
63320: LD_INT 16
63322: ST_TO_ADDR
// sRocket := false ;
63323: LD_ADDR_EXP 73
63327: PUSH
63328: LD_INT 0
63330: ST_TO_ADDR
// sSpeed := false ;
63331: LD_ADDR_EXP 72
63335: PUSH
63336: LD_INT 0
63338: ST_TO_ADDR
// sEngine := false ;
63339: LD_ADDR_EXP 74
63343: PUSH
63344: LD_INT 0
63346: ST_TO_ADDR
// sSpec := false ;
63347: LD_ADDR_EXP 71
63351: PUSH
63352: LD_INT 0
63354: ST_TO_ADDR
// sLevel := false ;
63355: LD_ADDR_EXP 75
63359: PUSH
63360: LD_INT 0
63362: ST_TO_ADDR
// sArmoury := false ;
63363: LD_ADDR_EXP 76
63367: PUSH
63368: LD_INT 0
63370: ST_TO_ADDR
// sRadar := false ;
63371: LD_ADDR_EXP 77
63375: PUSH
63376: LD_INT 0
63378: ST_TO_ADDR
// sBunker := false ;
63379: LD_ADDR_EXP 78
63383: PUSH
63384: LD_INT 0
63386: ST_TO_ADDR
// sHack := false ;
63387: LD_ADDR_EXP 79
63391: PUSH
63392: LD_INT 0
63394: ST_TO_ADDR
// sFire := false ;
63395: LD_ADDR_EXP 80
63399: PUSH
63400: LD_INT 0
63402: ST_TO_ADDR
// sRefresh := false ;
63403: LD_ADDR_EXP 81
63407: PUSH
63408: LD_INT 0
63410: ST_TO_ADDR
// sExp := false ;
63411: LD_ADDR_EXP 82
63415: PUSH
63416: LD_INT 0
63418: ST_TO_ADDR
// sDepot := false ;
63419: LD_ADDR_EXP 83
63423: PUSH
63424: LD_INT 0
63426: ST_TO_ADDR
// sFlag := false ;
63427: LD_ADDR_EXP 84
63431: PUSH
63432: LD_INT 0
63434: ST_TO_ADDR
// sKamikadze := false ;
63435: LD_ADDR_EXP 92
63439: PUSH
63440: LD_INT 0
63442: ST_TO_ADDR
// sTroll := false ;
63443: LD_ADDR_EXP 93
63447: PUSH
63448: LD_INT 0
63450: ST_TO_ADDR
// sSlow := false ;
63451: LD_ADDR_EXP 94
63455: PUSH
63456: LD_INT 0
63458: ST_TO_ADDR
// sLack := false ;
63459: LD_ADDR_EXP 95
63463: PUSH
63464: LD_INT 0
63466: ST_TO_ADDR
// sTank := false ;
63467: LD_ADDR_EXP 97
63471: PUSH
63472: LD_INT 0
63474: ST_TO_ADDR
// sRemote := false ;
63475: LD_ADDR_EXP 98
63479: PUSH
63480: LD_INT 0
63482: ST_TO_ADDR
// sPowell := false ;
63483: LD_ADDR_EXP 99
63487: PUSH
63488: LD_INT 0
63490: ST_TO_ADDR
// sTeleport := false ;
63491: LD_ADDR_EXP 102
63495: PUSH
63496: LD_INT 0
63498: ST_TO_ADDR
// sOilTower := false ;
63499: LD_ADDR_EXP 104
63503: PUSH
63504: LD_INT 0
63506: ST_TO_ADDR
// sShovel := false ;
63507: LD_ADDR_EXP 105
63511: PUSH
63512: LD_INT 0
63514: ST_TO_ADDR
// sSheik := false ;
63515: LD_ADDR_EXP 106
63519: PUSH
63520: LD_INT 0
63522: ST_TO_ADDR
// sEarthquake := false ;
63523: LD_ADDR_EXP 108
63527: PUSH
63528: LD_INT 0
63530: ST_TO_ADDR
// sAI := false ;
63531: LD_ADDR_EXP 109
63535: PUSH
63536: LD_INT 0
63538: ST_TO_ADDR
// sCargo := false ;
63539: LD_ADDR_EXP 112
63543: PUSH
63544: LD_INT 0
63546: ST_TO_ADDR
// sDLaser := false ;
63547: LD_ADDR_EXP 113
63551: PUSH
63552: LD_INT 0
63554: ST_TO_ADDR
// sExchange := false ;
63555: LD_ADDR_EXP 114
63559: PUSH
63560: LD_INT 0
63562: ST_TO_ADDR
// sFac := false ;
63563: LD_ADDR_EXP 115
63567: PUSH
63568: LD_INT 0
63570: ST_TO_ADDR
// sPower := false ;
63571: LD_ADDR_EXP 116
63575: PUSH
63576: LD_INT 0
63578: ST_TO_ADDR
// sRandom := false ;
63579: LD_ADDR_EXP 117
63583: PUSH
63584: LD_INT 0
63586: ST_TO_ADDR
// sShield := false ;
63587: LD_ADDR_EXP 118
63591: PUSH
63592: LD_INT 0
63594: ST_TO_ADDR
// sTime := false ;
63595: LD_ADDR_EXP 119
63599: PUSH
63600: LD_INT 0
63602: ST_TO_ADDR
// sTools := false ;
63603: LD_ADDR_EXP 120
63607: PUSH
63608: LD_INT 0
63610: ST_TO_ADDR
// sSold := false ;
63611: LD_ADDR_EXP 85
63615: PUSH
63616: LD_INT 0
63618: ST_TO_ADDR
// sDiff := false ;
63619: LD_ADDR_EXP 86
63623: PUSH
63624: LD_INT 0
63626: ST_TO_ADDR
// sFog := false ;
63627: LD_ADDR_EXP 89
63631: PUSH
63632: LD_INT 0
63634: ST_TO_ADDR
// sReset := false ;
63635: LD_ADDR_EXP 90
63639: PUSH
63640: LD_INT 0
63642: ST_TO_ADDR
// sSun := false ;
63643: LD_ADDR_EXP 91
63647: PUSH
63648: LD_INT 0
63650: ST_TO_ADDR
// sTiger := false ;
63651: LD_ADDR_EXP 87
63655: PUSH
63656: LD_INT 0
63658: ST_TO_ADDR
// sBomb := false ;
63659: LD_ADDR_EXP 88
63663: PUSH
63664: LD_INT 0
63666: ST_TO_ADDR
// sWound := false ;
63667: LD_ADDR_EXP 96
63671: PUSH
63672: LD_INT 0
63674: ST_TO_ADDR
// sBetray := false ;
63675: LD_ADDR_EXP 100
63679: PUSH
63680: LD_INT 0
63682: ST_TO_ADDR
// sContamin := false ;
63683: LD_ADDR_EXP 101
63687: PUSH
63688: LD_INT 0
63690: ST_TO_ADDR
// sOil := false ;
63691: LD_ADDR_EXP 103
63695: PUSH
63696: LD_INT 0
63698: ST_TO_ADDR
// sStu := false ;
63699: LD_ADDR_EXP 107
63703: PUSH
63704: LD_INT 0
63706: ST_TO_ADDR
// sBazooka := false ;
63707: LD_ADDR_EXP 110
63711: PUSH
63712: LD_INT 0
63714: ST_TO_ADDR
// sMortar := false ;
63715: LD_ADDR_EXP 111
63719: PUSH
63720: LD_INT 0
63722: ST_TO_ADDR
// sRanger := false ;
63723: LD_ADDR_EXP 121
63727: PUSH
63728: LD_INT 0
63730: ST_TO_ADDR
// end ;
63731: LD_VAR 0 1
63735: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
63736: LD_INT 0
63738: PPUSH
63739: PPUSH
63740: PPUSH
63741: PPUSH
63742: PPUSH
// result := [ ] ;
63743: LD_ADDR_VAR 0 1
63747: PUSH
63748: EMPTY
63749: ST_TO_ADDR
// if campaign_id = 1 then
63750: LD_OWVAR 69
63754: PUSH
63755: LD_INT 1
63757: EQUAL
63758: IFFALSE 66696
// begin case mission_number of 1 :
63760: LD_OWVAR 70
63764: PUSH
63765: LD_INT 1
63767: DOUBLE
63768: EQUAL
63769: IFTRUE 63773
63771: GO 63837
63773: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
63774: LD_ADDR_VAR 0 1
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: LD_INT 4
63784: PUSH
63785: LD_INT 11
63787: PUSH
63788: LD_INT 12
63790: PUSH
63791: LD_INT 15
63793: PUSH
63794: LD_INT 16
63796: PUSH
63797: LD_INT 22
63799: PUSH
63800: LD_INT 23
63802: PUSH
63803: LD_INT 26
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 101
63819: PUSH
63820: LD_INT 102
63822: PUSH
63823: LD_INT 106
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: LIST
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: ST_TO_ADDR
63835: GO 66694
63837: LD_INT 2
63839: DOUBLE
63840: EQUAL
63841: IFTRUE 63845
63843: GO 63917
63845: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
63846: LD_ADDR_VAR 0 1
63850: PUSH
63851: LD_INT 2
63853: PUSH
63854: LD_INT 4
63856: PUSH
63857: LD_INT 11
63859: PUSH
63860: LD_INT 12
63862: PUSH
63863: LD_INT 15
63865: PUSH
63866: LD_INT 16
63868: PUSH
63869: LD_INT 22
63871: PUSH
63872: LD_INT 23
63874: PUSH
63875: LD_INT 26
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 101
63891: PUSH
63892: LD_INT 102
63894: PUSH
63895: LD_INT 105
63897: PUSH
63898: LD_INT 106
63900: PUSH
63901: LD_INT 108
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: ST_TO_ADDR
63915: GO 66694
63917: LD_INT 3
63919: DOUBLE
63920: EQUAL
63921: IFTRUE 63925
63923: GO 64001
63925: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
63926: LD_ADDR_VAR 0 1
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: LD_INT 4
63936: PUSH
63937: LD_INT 5
63939: PUSH
63940: LD_INT 11
63942: PUSH
63943: LD_INT 12
63945: PUSH
63946: LD_INT 15
63948: PUSH
63949: LD_INT 16
63951: PUSH
63952: LD_INT 22
63954: PUSH
63955: LD_INT 26
63957: PUSH
63958: LD_INT 36
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 101
63975: PUSH
63976: LD_INT 102
63978: PUSH
63979: LD_INT 105
63981: PUSH
63982: LD_INT 106
63984: PUSH
63985: LD_INT 108
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: ST_TO_ADDR
63999: GO 66694
64001: LD_INT 4
64003: DOUBLE
64004: EQUAL
64005: IFTRUE 64009
64007: GO 64093
64009: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
64010: LD_ADDR_VAR 0 1
64014: PUSH
64015: LD_INT 2
64017: PUSH
64018: LD_INT 4
64020: PUSH
64021: LD_INT 5
64023: PUSH
64024: LD_INT 8
64026: PUSH
64027: LD_INT 11
64029: PUSH
64030: LD_INT 12
64032: PUSH
64033: LD_INT 15
64035: PUSH
64036: LD_INT 16
64038: PUSH
64039: LD_INT 22
64041: PUSH
64042: LD_INT 23
64044: PUSH
64045: LD_INT 26
64047: PUSH
64048: LD_INT 36
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 101
64067: PUSH
64068: LD_INT 102
64070: PUSH
64071: LD_INT 105
64073: PUSH
64074: LD_INT 106
64076: PUSH
64077: LD_INT 108
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: ST_TO_ADDR
64091: GO 66694
64093: LD_INT 5
64095: DOUBLE
64096: EQUAL
64097: IFTRUE 64101
64099: GO 64201
64101: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
64102: LD_ADDR_VAR 0 1
64106: PUSH
64107: LD_INT 2
64109: PUSH
64110: LD_INT 4
64112: PUSH
64113: LD_INT 5
64115: PUSH
64116: LD_INT 6
64118: PUSH
64119: LD_INT 8
64121: PUSH
64122: LD_INT 11
64124: PUSH
64125: LD_INT 12
64127: PUSH
64128: LD_INT 15
64130: PUSH
64131: LD_INT 16
64133: PUSH
64134: LD_INT 22
64136: PUSH
64137: LD_INT 23
64139: PUSH
64140: LD_INT 25
64142: PUSH
64143: LD_INT 26
64145: PUSH
64146: LD_INT 36
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 101
64167: PUSH
64168: LD_INT 102
64170: PUSH
64171: LD_INT 105
64173: PUSH
64174: LD_INT 106
64176: PUSH
64177: LD_INT 108
64179: PUSH
64180: LD_INT 109
64182: PUSH
64183: LD_INT 112
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: ST_TO_ADDR
64199: GO 66694
64201: LD_INT 6
64203: DOUBLE
64204: EQUAL
64205: IFTRUE 64209
64207: GO 64329
64209: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
64210: LD_ADDR_VAR 0 1
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: LD_INT 4
64220: PUSH
64221: LD_INT 5
64223: PUSH
64224: LD_INT 6
64226: PUSH
64227: LD_INT 8
64229: PUSH
64230: LD_INT 11
64232: PUSH
64233: LD_INT 12
64235: PUSH
64236: LD_INT 15
64238: PUSH
64239: LD_INT 16
64241: PUSH
64242: LD_INT 20
64244: PUSH
64245: LD_INT 21
64247: PUSH
64248: LD_INT 22
64250: PUSH
64251: LD_INT 23
64253: PUSH
64254: LD_INT 25
64256: PUSH
64257: LD_INT 26
64259: PUSH
64260: LD_INT 30
64262: PUSH
64263: LD_INT 31
64265: PUSH
64266: LD_INT 32
64268: PUSH
64269: LD_INT 36
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 101
64295: PUSH
64296: LD_INT 102
64298: PUSH
64299: LD_INT 105
64301: PUSH
64302: LD_INT 106
64304: PUSH
64305: LD_INT 108
64307: PUSH
64308: LD_INT 109
64310: PUSH
64311: LD_INT 112
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: ST_TO_ADDR
64327: GO 66694
64329: LD_INT 7
64331: DOUBLE
64332: EQUAL
64333: IFTRUE 64337
64335: GO 64437
64337: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
64338: LD_ADDR_VAR 0 1
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 4
64348: PUSH
64349: LD_INT 5
64351: PUSH
64352: LD_INT 7
64354: PUSH
64355: LD_INT 11
64357: PUSH
64358: LD_INT 12
64360: PUSH
64361: LD_INT 15
64363: PUSH
64364: LD_INT 16
64366: PUSH
64367: LD_INT 20
64369: PUSH
64370: LD_INT 21
64372: PUSH
64373: LD_INT 22
64375: PUSH
64376: LD_INT 23
64378: PUSH
64379: LD_INT 25
64381: PUSH
64382: LD_INT 26
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 101
64403: PUSH
64404: LD_INT 102
64406: PUSH
64407: LD_INT 103
64409: PUSH
64410: LD_INT 105
64412: PUSH
64413: LD_INT 106
64415: PUSH
64416: LD_INT 108
64418: PUSH
64419: LD_INT 112
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: ST_TO_ADDR
64435: GO 66694
64437: LD_INT 8
64439: DOUBLE
64440: EQUAL
64441: IFTRUE 64445
64443: GO 64573
64445: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
64446: LD_ADDR_VAR 0 1
64450: PUSH
64451: LD_INT 2
64453: PUSH
64454: LD_INT 4
64456: PUSH
64457: LD_INT 5
64459: PUSH
64460: LD_INT 6
64462: PUSH
64463: LD_INT 7
64465: PUSH
64466: LD_INT 8
64468: PUSH
64469: LD_INT 11
64471: PUSH
64472: LD_INT 12
64474: PUSH
64475: LD_INT 15
64477: PUSH
64478: LD_INT 16
64480: PUSH
64481: LD_INT 20
64483: PUSH
64484: LD_INT 21
64486: PUSH
64487: LD_INT 22
64489: PUSH
64490: LD_INT 23
64492: PUSH
64493: LD_INT 25
64495: PUSH
64496: LD_INT 26
64498: PUSH
64499: LD_INT 30
64501: PUSH
64502: LD_INT 31
64504: PUSH
64505: LD_INT 32
64507: PUSH
64508: LD_INT 36
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 101
64535: PUSH
64536: LD_INT 102
64538: PUSH
64539: LD_INT 103
64541: PUSH
64542: LD_INT 105
64544: PUSH
64545: LD_INT 106
64547: PUSH
64548: LD_INT 108
64550: PUSH
64551: LD_INT 109
64553: PUSH
64554: LD_INT 112
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: ST_TO_ADDR
64571: GO 66694
64573: LD_INT 9
64575: DOUBLE
64576: EQUAL
64577: IFTRUE 64581
64579: GO 64717
64581: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
64582: LD_ADDR_VAR 0 1
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: LD_INT 4
64592: PUSH
64593: LD_INT 5
64595: PUSH
64596: LD_INT 6
64598: PUSH
64599: LD_INT 7
64601: PUSH
64602: LD_INT 8
64604: PUSH
64605: LD_INT 11
64607: PUSH
64608: LD_INT 12
64610: PUSH
64611: LD_INT 15
64613: PUSH
64614: LD_INT 16
64616: PUSH
64617: LD_INT 20
64619: PUSH
64620: LD_INT 21
64622: PUSH
64623: LD_INT 22
64625: PUSH
64626: LD_INT 23
64628: PUSH
64629: LD_INT 25
64631: PUSH
64632: LD_INT 26
64634: PUSH
64635: LD_INT 28
64637: PUSH
64638: LD_INT 30
64640: PUSH
64641: LD_INT 31
64643: PUSH
64644: LD_INT 32
64646: PUSH
64647: LD_INT 36
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 101
64675: PUSH
64676: LD_INT 102
64678: PUSH
64679: LD_INT 103
64681: PUSH
64682: LD_INT 105
64684: PUSH
64685: LD_INT 106
64687: PUSH
64688: LD_INT 108
64690: PUSH
64691: LD_INT 109
64693: PUSH
64694: LD_INT 112
64696: PUSH
64697: LD_INT 114
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: ST_TO_ADDR
64715: GO 66694
64717: LD_INT 10
64719: DOUBLE
64720: EQUAL
64721: IFTRUE 64725
64723: GO 64909
64725: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
64726: LD_ADDR_VAR 0 1
64730: PUSH
64731: LD_INT 2
64733: PUSH
64734: LD_INT 4
64736: PUSH
64737: LD_INT 5
64739: PUSH
64740: LD_INT 6
64742: PUSH
64743: LD_INT 7
64745: PUSH
64746: LD_INT 8
64748: PUSH
64749: LD_INT 9
64751: PUSH
64752: LD_INT 10
64754: PUSH
64755: LD_INT 11
64757: PUSH
64758: LD_INT 12
64760: PUSH
64761: LD_INT 13
64763: PUSH
64764: LD_INT 14
64766: PUSH
64767: LD_INT 15
64769: PUSH
64770: LD_INT 16
64772: PUSH
64773: LD_INT 17
64775: PUSH
64776: LD_INT 18
64778: PUSH
64779: LD_INT 19
64781: PUSH
64782: LD_INT 20
64784: PUSH
64785: LD_INT 21
64787: PUSH
64788: LD_INT 22
64790: PUSH
64791: LD_INT 23
64793: PUSH
64794: LD_INT 24
64796: PUSH
64797: LD_INT 25
64799: PUSH
64800: LD_INT 26
64802: PUSH
64803: LD_INT 28
64805: PUSH
64806: LD_INT 30
64808: PUSH
64809: LD_INT 31
64811: PUSH
64812: LD_INT 32
64814: PUSH
64815: LD_INT 36
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 101
64851: PUSH
64852: LD_INT 102
64854: PUSH
64855: LD_INT 103
64857: PUSH
64858: LD_INT 104
64860: PUSH
64861: LD_INT 105
64863: PUSH
64864: LD_INT 106
64866: PUSH
64867: LD_INT 107
64869: PUSH
64870: LD_INT 108
64872: PUSH
64873: LD_INT 109
64875: PUSH
64876: LD_INT 110
64878: PUSH
64879: LD_INT 111
64881: PUSH
64882: LD_INT 112
64884: PUSH
64885: LD_INT 114
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: ST_TO_ADDR
64907: GO 66694
64909: LD_INT 11
64911: DOUBLE
64912: EQUAL
64913: IFTRUE 64917
64915: GO 65109
64917: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
64918: LD_ADDR_VAR 0 1
64922: PUSH
64923: LD_INT 2
64925: PUSH
64926: LD_INT 3
64928: PUSH
64929: LD_INT 4
64931: PUSH
64932: LD_INT 5
64934: PUSH
64935: LD_INT 6
64937: PUSH
64938: LD_INT 7
64940: PUSH
64941: LD_INT 8
64943: PUSH
64944: LD_INT 9
64946: PUSH
64947: LD_INT 10
64949: PUSH
64950: LD_INT 11
64952: PUSH
64953: LD_INT 12
64955: PUSH
64956: LD_INT 13
64958: PUSH
64959: LD_INT 14
64961: PUSH
64962: LD_INT 15
64964: PUSH
64965: LD_INT 16
64967: PUSH
64968: LD_INT 17
64970: PUSH
64971: LD_INT 18
64973: PUSH
64974: LD_INT 19
64976: PUSH
64977: LD_INT 20
64979: PUSH
64980: LD_INT 21
64982: PUSH
64983: LD_INT 22
64985: PUSH
64986: LD_INT 23
64988: PUSH
64989: LD_INT 24
64991: PUSH
64992: LD_INT 25
64994: PUSH
64995: LD_INT 26
64997: PUSH
64998: LD_INT 28
65000: PUSH
65001: LD_INT 30
65003: PUSH
65004: LD_INT 31
65006: PUSH
65007: LD_INT 32
65009: PUSH
65010: LD_INT 34
65012: PUSH
65013: LD_INT 36
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 101
65051: PUSH
65052: LD_INT 102
65054: PUSH
65055: LD_INT 103
65057: PUSH
65058: LD_INT 104
65060: PUSH
65061: LD_INT 105
65063: PUSH
65064: LD_INT 106
65066: PUSH
65067: LD_INT 107
65069: PUSH
65070: LD_INT 108
65072: PUSH
65073: LD_INT 109
65075: PUSH
65076: LD_INT 110
65078: PUSH
65079: LD_INT 111
65081: PUSH
65082: LD_INT 112
65084: PUSH
65085: LD_INT 114
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: ST_TO_ADDR
65107: GO 66694
65109: LD_INT 12
65111: DOUBLE
65112: EQUAL
65113: IFTRUE 65117
65115: GO 65325
65117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
65118: LD_ADDR_VAR 0 1
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: LD_INT 3
65131: PUSH
65132: LD_INT 4
65134: PUSH
65135: LD_INT 5
65137: PUSH
65138: LD_INT 6
65140: PUSH
65141: LD_INT 7
65143: PUSH
65144: LD_INT 8
65146: PUSH
65147: LD_INT 9
65149: PUSH
65150: LD_INT 10
65152: PUSH
65153: LD_INT 11
65155: PUSH
65156: LD_INT 12
65158: PUSH
65159: LD_INT 13
65161: PUSH
65162: LD_INT 14
65164: PUSH
65165: LD_INT 15
65167: PUSH
65168: LD_INT 16
65170: PUSH
65171: LD_INT 17
65173: PUSH
65174: LD_INT 18
65176: PUSH
65177: LD_INT 19
65179: PUSH
65180: LD_INT 20
65182: PUSH
65183: LD_INT 21
65185: PUSH
65186: LD_INT 22
65188: PUSH
65189: LD_INT 23
65191: PUSH
65192: LD_INT 24
65194: PUSH
65195: LD_INT 25
65197: PUSH
65198: LD_INT 26
65200: PUSH
65201: LD_INT 27
65203: PUSH
65204: LD_INT 28
65206: PUSH
65207: LD_INT 30
65209: PUSH
65210: LD_INT 31
65212: PUSH
65213: LD_INT 32
65215: PUSH
65216: LD_INT 33
65218: PUSH
65219: LD_INT 34
65221: PUSH
65222: LD_INT 36
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 101
65263: PUSH
65264: LD_INT 102
65266: PUSH
65267: LD_INT 103
65269: PUSH
65270: LD_INT 104
65272: PUSH
65273: LD_INT 105
65275: PUSH
65276: LD_INT 106
65278: PUSH
65279: LD_INT 107
65281: PUSH
65282: LD_INT 108
65284: PUSH
65285: LD_INT 109
65287: PUSH
65288: LD_INT 110
65290: PUSH
65291: LD_INT 111
65293: PUSH
65294: LD_INT 112
65296: PUSH
65297: LD_INT 113
65299: PUSH
65300: LD_INT 114
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: ST_TO_ADDR
65323: GO 66694
65325: LD_INT 13
65327: DOUBLE
65328: EQUAL
65329: IFTRUE 65333
65331: GO 65529
65333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
65334: LD_ADDR_VAR 0 1
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: LD_INT 2
65344: PUSH
65345: LD_INT 3
65347: PUSH
65348: LD_INT 4
65350: PUSH
65351: LD_INT 5
65353: PUSH
65354: LD_INT 8
65356: PUSH
65357: LD_INT 9
65359: PUSH
65360: LD_INT 10
65362: PUSH
65363: LD_INT 11
65365: PUSH
65366: LD_INT 12
65368: PUSH
65369: LD_INT 14
65371: PUSH
65372: LD_INT 15
65374: PUSH
65375: LD_INT 16
65377: PUSH
65378: LD_INT 17
65380: PUSH
65381: LD_INT 18
65383: PUSH
65384: LD_INT 19
65386: PUSH
65387: LD_INT 20
65389: PUSH
65390: LD_INT 21
65392: PUSH
65393: LD_INT 22
65395: PUSH
65396: LD_INT 23
65398: PUSH
65399: LD_INT 24
65401: PUSH
65402: LD_INT 25
65404: PUSH
65405: LD_INT 26
65407: PUSH
65408: LD_INT 27
65410: PUSH
65411: LD_INT 28
65413: PUSH
65414: LD_INT 30
65416: PUSH
65417: LD_INT 31
65419: PUSH
65420: LD_INT 32
65422: PUSH
65423: LD_INT 33
65425: PUSH
65426: LD_INT 34
65428: PUSH
65429: LD_INT 36
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 101
65467: PUSH
65468: LD_INT 102
65470: PUSH
65471: LD_INT 103
65473: PUSH
65474: LD_INT 104
65476: PUSH
65477: LD_INT 105
65479: PUSH
65480: LD_INT 106
65482: PUSH
65483: LD_INT 107
65485: PUSH
65486: LD_INT 108
65488: PUSH
65489: LD_INT 109
65491: PUSH
65492: LD_INT 110
65494: PUSH
65495: LD_INT 111
65497: PUSH
65498: LD_INT 112
65500: PUSH
65501: LD_INT 113
65503: PUSH
65504: LD_INT 114
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: ST_TO_ADDR
65527: GO 66694
65529: LD_INT 14
65531: DOUBLE
65532: EQUAL
65533: IFTRUE 65537
65535: GO 65749
65537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
65538: LD_ADDR_VAR 0 1
65542: PUSH
65543: LD_INT 1
65545: PUSH
65546: LD_INT 2
65548: PUSH
65549: LD_INT 3
65551: PUSH
65552: LD_INT 4
65554: PUSH
65555: LD_INT 5
65557: PUSH
65558: LD_INT 6
65560: PUSH
65561: LD_INT 7
65563: PUSH
65564: LD_INT 8
65566: PUSH
65567: LD_INT 9
65569: PUSH
65570: LD_INT 10
65572: PUSH
65573: LD_INT 11
65575: PUSH
65576: LD_INT 12
65578: PUSH
65579: LD_INT 13
65581: PUSH
65582: LD_INT 14
65584: PUSH
65585: LD_INT 15
65587: PUSH
65588: LD_INT 16
65590: PUSH
65591: LD_INT 17
65593: PUSH
65594: LD_INT 18
65596: PUSH
65597: LD_INT 19
65599: PUSH
65600: LD_INT 20
65602: PUSH
65603: LD_INT 21
65605: PUSH
65606: LD_INT 22
65608: PUSH
65609: LD_INT 23
65611: PUSH
65612: LD_INT 24
65614: PUSH
65615: LD_INT 25
65617: PUSH
65618: LD_INT 26
65620: PUSH
65621: LD_INT 27
65623: PUSH
65624: LD_INT 28
65626: PUSH
65627: LD_INT 29
65629: PUSH
65630: LD_INT 30
65632: PUSH
65633: LD_INT 31
65635: PUSH
65636: LD_INT 32
65638: PUSH
65639: LD_INT 33
65641: PUSH
65642: LD_INT 34
65644: PUSH
65645: LD_INT 36
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 101
65687: PUSH
65688: LD_INT 102
65690: PUSH
65691: LD_INT 103
65693: PUSH
65694: LD_INT 104
65696: PUSH
65697: LD_INT 105
65699: PUSH
65700: LD_INT 106
65702: PUSH
65703: LD_INT 107
65705: PUSH
65706: LD_INT 108
65708: PUSH
65709: LD_INT 109
65711: PUSH
65712: LD_INT 110
65714: PUSH
65715: LD_INT 111
65717: PUSH
65718: LD_INT 112
65720: PUSH
65721: LD_INT 113
65723: PUSH
65724: LD_INT 114
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: ST_TO_ADDR
65747: GO 66694
65749: LD_INT 15
65751: DOUBLE
65752: EQUAL
65753: IFTRUE 65757
65755: GO 65969
65757: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
65758: LD_ADDR_VAR 0 1
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: LD_INT 3
65771: PUSH
65772: LD_INT 4
65774: PUSH
65775: LD_INT 5
65777: PUSH
65778: LD_INT 6
65780: PUSH
65781: LD_INT 7
65783: PUSH
65784: LD_INT 8
65786: PUSH
65787: LD_INT 9
65789: PUSH
65790: LD_INT 10
65792: PUSH
65793: LD_INT 11
65795: PUSH
65796: LD_INT 12
65798: PUSH
65799: LD_INT 13
65801: PUSH
65802: LD_INT 14
65804: PUSH
65805: LD_INT 15
65807: PUSH
65808: LD_INT 16
65810: PUSH
65811: LD_INT 17
65813: PUSH
65814: LD_INT 18
65816: PUSH
65817: LD_INT 19
65819: PUSH
65820: LD_INT 20
65822: PUSH
65823: LD_INT 21
65825: PUSH
65826: LD_INT 22
65828: PUSH
65829: LD_INT 23
65831: PUSH
65832: LD_INT 24
65834: PUSH
65835: LD_INT 25
65837: PUSH
65838: LD_INT 26
65840: PUSH
65841: LD_INT 27
65843: PUSH
65844: LD_INT 28
65846: PUSH
65847: LD_INT 29
65849: PUSH
65850: LD_INT 30
65852: PUSH
65853: LD_INT 31
65855: PUSH
65856: LD_INT 32
65858: PUSH
65859: LD_INT 33
65861: PUSH
65862: LD_INT 34
65864: PUSH
65865: LD_INT 36
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 101
65907: PUSH
65908: LD_INT 102
65910: PUSH
65911: LD_INT 103
65913: PUSH
65914: LD_INT 104
65916: PUSH
65917: LD_INT 105
65919: PUSH
65920: LD_INT 106
65922: PUSH
65923: LD_INT 107
65925: PUSH
65926: LD_INT 108
65928: PUSH
65929: LD_INT 109
65931: PUSH
65932: LD_INT 110
65934: PUSH
65935: LD_INT 111
65937: PUSH
65938: LD_INT 112
65940: PUSH
65941: LD_INT 113
65943: PUSH
65944: LD_INT 114
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: ST_TO_ADDR
65967: GO 66694
65969: LD_INT 16
65971: DOUBLE
65972: EQUAL
65973: IFTRUE 65977
65975: GO 66101
65977: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
65978: LD_ADDR_VAR 0 1
65982: PUSH
65983: LD_INT 2
65985: PUSH
65986: LD_INT 4
65988: PUSH
65989: LD_INT 5
65991: PUSH
65992: LD_INT 7
65994: PUSH
65995: LD_INT 11
65997: PUSH
65998: LD_INT 12
66000: PUSH
66001: LD_INT 15
66003: PUSH
66004: LD_INT 16
66006: PUSH
66007: LD_INT 20
66009: PUSH
66010: LD_INT 21
66012: PUSH
66013: LD_INT 22
66015: PUSH
66016: LD_INT 23
66018: PUSH
66019: LD_INT 25
66021: PUSH
66022: LD_INT 26
66024: PUSH
66025: LD_INT 30
66027: PUSH
66028: LD_INT 31
66030: PUSH
66031: LD_INT 32
66033: PUSH
66034: LD_INT 33
66036: PUSH
66037: LD_INT 34
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 101
66063: PUSH
66064: LD_INT 102
66066: PUSH
66067: LD_INT 103
66069: PUSH
66070: LD_INT 106
66072: PUSH
66073: LD_INT 108
66075: PUSH
66076: LD_INT 112
66078: PUSH
66079: LD_INT 113
66081: PUSH
66082: LD_INT 114
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: ST_TO_ADDR
66099: GO 66694
66101: LD_INT 17
66103: DOUBLE
66104: EQUAL
66105: IFTRUE 66109
66107: GO 66321
66109: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
66110: LD_ADDR_VAR 0 1
66114: PUSH
66115: LD_INT 1
66117: PUSH
66118: LD_INT 2
66120: PUSH
66121: LD_INT 3
66123: PUSH
66124: LD_INT 4
66126: PUSH
66127: LD_INT 5
66129: PUSH
66130: LD_INT 6
66132: PUSH
66133: LD_INT 7
66135: PUSH
66136: LD_INT 8
66138: PUSH
66139: LD_INT 9
66141: PUSH
66142: LD_INT 10
66144: PUSH
66145: LD_INT 11
66147: PUSH
66148: LD_INT 12
66150: PUSH
66151: LD_INT 13
66153: PUSH
66154: LD_INT 14
66156: PUSH
66157: LD_INT 15
66159: PUSH
66160: LD_INT 16
66162: PUSH
66163: LD_INT 17
66165: PUSH
66166: LD_INT 18
66168: PUSH
66169: LD_INT 19
66171: PUSH
66172: LD_INT 20
66174: PUSH
66175: LD_INT 21
66177: PUSH
66178: LD_INT 22
66180: PUSH
66181: LD_INT 23
66183: PUSH
66184: LD_INT 24
66186: PUSH
66187: LD_INT 25
66189: PUSH
66190: LD_INT 26
66192: PUSH
66193: LD_INT 27
66195: PUSH
66196: LD_INT 28
66198: PUSH
66199: LD_INT 29
66201: PUSH
66202: LD_INT 30
66204: PUSH
66205: LD_INT 31
66207: PUSH
66208: LD_INT 32
66210: PUSH
66211: LD_INT 33
66213: PUSH
66214: LD_INT 34
66216: PUSH
66217: LD_INT 36
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 101
66259: PUSH
66260: LD_INT 102
66262: PUSH
66263: LD_INT 103
66265: PUSH
66266: LD_INT 104
66268: PUSH
66269: LD_INT 105
66271: PUSH
66272: LD_INT 106
66274: PUSH
66275: LD_INT 107
66277: PUSH
66278: LD_INT 108
66280: PUSH
66281: LD_INT 109
66283: PUSH
66284: LD_INT 110
66286: PUSH
66287: LD_INT 111
66289: PUSH
66290: LD_INT 112
66292: PUSH
66293: LD_INT 113
66295: PUSH
66296: LD_INT 114
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: ST_TO_ADDR
66319: GO 66694
66321: LD_INT 18
66323: DOUBLE
66324: EQUAL
66325: IFTRUE 66329
66327: GO 66465
66329: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
66330: LD_ADDR_VAR 0 1
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: LD_INT 4
66340: PUSH
66341: LD_INT 5
66343: PUSH
66344: LD_INT 7
66346: PUSH
66347: LD_INT 11
66349: PUSH
66350: LD_INT 12
66352: PUSH
66353: LD_INT 15
66355: PUSH
66356: LD_INT 16
66358: PUSH
66359: LD_INT 20
66361: PUSH
66362: LD_INT 21
66364: PUSH
66365: LD_INT 22
66367: PUSH
66368: LD_INT 23
66370: PUSH
66371: LD_INT 25
66373: PUSH
66374: LD_INT 26
66376: PUSH
66377: LD_INT 30
66379: PUSH
66380: LD_INT 31
66382: PUSH
66383: LD_INT 32
66385: PUSH
66386: LD_INT 33
66388: PUSH
66389: LD_INT 34
66391: PUSH
66392: LD_INT 35
66394: PUSH
66395: LD_INT 36
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 101
66423: PUSH
66424: LD_INT 102
66426: PUSH
66427: LD_INT 103
66429: PUSH
66430: LD_INT 106
66432: PUSH
66433: LD_INT 108
66435: PUSH
66436: LD_INT 112
66438: PUSH
66439: LD_INT 113
66441: PUSH
66442: LD_INT 114
66444: PUSH
66445: LD_INT 115
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: ST_TO_ADDR
66463: GO 66694
66465: LD_INT 19
66467: DOUBLE
66468: EQUAL
66469: IFTRUE 66473
66471: GO 66693
66473: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
66474: LD_ADDR_VAR 0 1
66478: PUSH
66479: LD_INT 1
66481: PUSH
66482: LD_INT 2
66484: PUSH
66485: LD_INT 3
66487: PUSH
66488: LD_INT 4
66490: PUSH
66491: LD_INT 5
66493: PUSH
66494: LD_INT 6
66496: PUSH
66497: LD_INT 7
66499: PUSH
66500: LD_INT 8
66502: PUSH
66503: LD_INT 9
66505: PUSH
66506: LD_INT 10
66508: PUSH
66509: LD_INT 11
66511: PUSH
66512: LD_INT 12
66514: PUSH
66515: LD_INT 13
66517: PUSH
66518: LD_INT 14
66520: PUSH
66521: LD_INT 15
66523: PUSH
66524: LD_INT 16
66526: PUSH
66527: LD_INT 17
66529: PUSH
66530: LD_INT 18
66532: PUSH
66533: LD_INT 19
66535: PUSH
66536: LD_INT 20
66538: PUSH
66539: LD_INT 21
66541: PUSH
66542: LD_INT 22
66544: PUSH
66545: LD_INT 23
66547: PUSH
66548: LD_INT 24
66550: PUSH
66551: LD_INT 25
66553: PUSH
66554: LD_INT 26
66556: PUSH
66557: LD_INT 27
66559: PUSH
66560: LD_INT 28
66562: PUSH
66563: LD_INT 29
66565: PUSH
66566: LD_INT 30
66568: PUSH
66569: LD_INT 31
66571: PUSH
66572: LD_INT 32
66574: PUSH
66575: LD_INT 33
66577: PUSH
66578: LD_INT 34
66580: PUSH
66581: LD_INT 35
66583: PUSH
66584: LD_INT 36
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 101
66627: PUSH
66628: LD_INT 102
66630: PUSH
66631: LD_INT 103
66633: PUSH
66634: LD_INT 104
66636: PUSH
66637: LD_INT 105
66639: PUSH
66640: LD_INT 106
66642: PUSH
66643: LD_INT 107
66645: PUSH
66646: LD_INT 108
66648: PUSH
66649: LD_INT 109
66651: PUSH
66652: LD_INT 110
66654: PUSH
66655: LD_INT 111
66657: PUSH
66658: LD_INT 112
66660: PUSH
66661: LD_INT 113
66663: PUSH
66664: LD_INT 114
66666: PUSH
66667: LD_INT 115
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: ST_TO_ADDR
66691: GO 66694
66693: POP
// end else
66694: GO 66913
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
66696: LD_ADDR_VAR 0 1
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: LD_INT 2
66706: PUSH
66707: LD_INT 3
66709: PUSH
66710: LD_INT 4
66712: PUSH
66713: LD_INT 5
66715: PUSH
66716: LD_INT 6
66718: PUSH
66719: LD_INT 7
66721: PUSH
66722: LD_INT 8
66724: PUSH
66725: LD_INT 9
66727: PUSH
66728: LD_INT 10
66730: PUSH
66731: LD_INT 11
66733: PUSH
66734: LD_INT 12
66736: PUSH
66737: LD_INT 13
66739: PUSH
66740: LD_INT 14
66742: PUSH
66743: LD_INT 15
66745: PUSH
66746: LD_INT 16
66748: PUSH
66749: LD_INT 17
66751: PUSH
66752: LD_INT 18
66754: PUSH
66755: LD_INT 19
66757: PUSH
66758: LD_INT 20
66760: PUSH
66761: LD_INT 21
66763: PUSH
66764: LD_INT 22
66766: PUSH
66767: LD_INT 23
66769: PUSH
66770: LD_INT 24
66772: PUSH
66773: LD_INT 25
66775: PUSH
66776: LD_INT 26
66778: PUSH
66779: LD_INT 27
66781: PUSH
66782: LD_INT 28
66784: PUSH
66785: LD_INT 29
66787: PUSH
66788: LD_INT 30
66790: PUSH
66791: LD_INT 31
66793: PUSH
66794: LD_INT 32
66796: PUSH
66797: LD_INT 33
66799: PUSH
66800: LD_INT 34
66802: PUSH
66803: LD_INT 35
66805: PUSH
66806: LD_INT 36
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 101
66849: PUSH
66850: LD_INT 102
66852: PUSH
66853: LD_INT 103
66855: PUSH
66856: LD_INT 104
66858: PUSH
66859: LD_INT 105
66861: PUSH
66862: LD_INT 106
66864: PUSH
66865: LD_INT 107
66867: PUSH
66868: LD_INT 108
66870: PUSH
66871: LD_INT 109
66873: PUSH
66874: LD_INT 110
66876: PUSH
66877: LD_INT 111
66879: PUSH
66880: LD_INT 112
66882: PUSH
66883: LD_INT 113
66885: PUSH
66886: LD_INT 114
66888: PUSH
66889: LD_INT 115
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: ST_TO_ADDR
// if result then
66913: LD_VAR 0 1
66917: IFFALSE 67206
// begin normal :=  ;
66919: LD_ADDR_VAR 0 3
66923: PUSH
66924: LD_STRING 
66926: ST_TO_ADDR
// hardcore :=  ;
66927: LD_ADDR_VAR 0 4
66931: PUSH
66932: LD_STRING 
66934: ST_TO_ADDR
// for i = 1 to normalCounter do
66935: LD_ADDR_VAR 0 5
66939: PUSH
66940: DOUBLE
66941: LD_INT 1
66943: DEC
66944: ST_TO_ADDR
66945: LD_EXP 69
66949: PUSH
66950: FOR_TO
66951: IFFALSE 67052
// begin tmp := 0 ;
66953: LD_ADDR_VAR 0 2
66957: PUSH
66958: LD_STRING 0
66960: ST_TO_ADDR
// if result [ 1 ] then
66961: LD_VAR 0 1
66965: PUSH
66966: LD_INT 1
66968: ARRAY
66969: IFFALSE 67034
// if result [ 1 ] [ 1 ] = i then
66971: LD_VAR 0 1
66975: PUSH
66976: LD_INT 1
66978: ARRAY
66979: PUSH
66980: LD_INT 1
66982: ARRAY
66983: PUSH
66984: LD_VAR 0 5
66988: EQUAL
66989: IFFALSE 67034
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66991: LD_ADDR_VAR 0 1
66995: PUSH
66996: LD_VAR 0 1
67000: PPUSH
67001: LD_INT 1
67003: PPUSH
67004: LD_VAR 0 1
67008: PUSH
67009: LD_INT 1
67011: ARRAY
67012: PPUSH
67013: LD_INT 1
67015: PPUSH
67016: CALL_OW 3
67020: PPUSH
67021: CALL_OW 1
67025: ST_TO_ADDR
// tmp := 1 ;
67026: LD_ADDR_VAR 0 2
67030: PUSH
67031: LD_STRING 1
67033: ST_TO_ADDR
// end ; normal := normal & tmp ;
67034: LD_ADDR_VAR 0 3
67038: PUSH
67039: LD_VAR 0 3
67043: PUSH
67044: LD_VAR 0 2
67048: STR
67049: ST_TO_ADDR
// end ;
67050: GO 66950
67052: POP
67053: POP
// for i = 1 to hardcoreCounter do
67054: LD_ADDR_VAR 0 5
67058: PUSH
67059: DOUBLE
67060: LD_INT 1
67062: DEC
67063: ST_TO_ADDR
67064: LD_EXP 70
67068: PUSH
67069: FOR_TO
67070: IFFALSE 67175
// begin tmp := 0 ;
67072: LD_ADDR_VAR 0 2
67076: PUSH
67077: LD_STRING 0
67079: ST_TO_ADDR
// if result [ 2 ] then
67080: LD_VAR 0 1
67084: PUSH
67085: LD_INT 2
67087: ARRAY
67088: IFFALSE 67157
// if result [ 2 ] [ 1 ] = 100 + i then
67090: LD_VAR 0 1
67094: PUSH
67095: LD_INT 2
67097: ARRAY
67098: PUSH
67099: LD_INT 1
67101: ARRAY
67102: PUSH
67103: LD_INT 100
67105: PUSH
67106: LD_VAR 0 5
67110: PLUS
67111: EQUAL
67112: IFFALSE 67157
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67114: LD_ADDR_VAR 0 1
67118: PUSH
67119: LD_VAR 0 1
67123: PPUSH
67124: LD_INT 2
67126: PPUSH
67127: LD_VAR 0 1
67131: PUSH
67132: LD_INT 2
67134: ARRAY
67135: PPUSH
67136: LD_INT 1
67138: PPUSH
67139: CALL_OW 3
67143: PPUSH
67144: CALL_OW 1
67148: ST_TO_ADDR
// tmp := 1 ;
67149: LD_ADDR_VAR 0 2
67153: PUSH
67154: LD_STRING 1
67156: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67157: LD_ADDR_VAR 0 4
67161: PUSH
67162: LD_VAR 0 4
67166: PUSH
67167: LD_VAR 0 2
67171: STR
67172: ST_TO_ADDR
// end ;
67173: GO 67069
67175: POP
67176: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
67177: LD_STRING getStreamItemsFromMission("
67179: PUSH
67180: LD_VAR 0 3
67184: STR
67185: PUSH
67186: LD_STRING ","
67188: STR
67189: PUSH
67190: LD_VAR 0 4
67194: STR
67195: PUSH
67196: LD_STRING ")
67198: STR
67199: PPUSH
67200: CALL_OW 559
// end else
67204: GO 67213
// ToLua ( getStreamItemsFromMission("","") ) ;
67206: LD_STRING getStreamItemsFromMission("","")
67208: PPUSH
67209: CALL_OW 559
// end ;
67213: LD_VAR 0 1
67217: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67218: LD_EXP 68
67222: PUSH
67223: LD_EXP 73
67227: AND
67228: IFFALSE 67352
67230: GO 67232
67232: DISABLE
67233: LD_INT 0
67235: PPUSH
67236: PPUSH
// begin enable ;
67237: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67238: LD_ADDR_VAR 0 2
67242: PUSH
67243: LD_INT 22
67245: PUSH
67246: LD_OWVAR 2
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 2
67257: PUSH
67258: LD_INT 34
67260: PUSH
67261: LD_INT 7
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 34
67270: PUSH
67271: LD_INT 45
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 34
67280: PUSH
67281: LD_INT 28
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 34
67290: PUSH
67291: LD_INT 47
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PPUSH
67309: CALL_OW 69
67313: ST_TO_ADDR
// if not tmp then
67314: LD_VAR 0 2
67318: NOT
67319: IFFALSE 67323
// exit ;
67321: GO 67352
// for i in tmp do
67323: LD_ADDR_VAR 0 1
67327: PUSH
67328: LD_VAR 0 2
67332: PUSH
67333: FOR_IN
67334: IFFALSE 67350
// begin SetLives ( i , 0 ) ;
67336: LD_VAR 0 1
67340: PPUSH
67341: LD_INT 0
67343: PPUSH
67344: CALL_OW 234
// end ;
67348: GO 67333
67350: POP
67351: POP
// end ;
67352: PPOPN 2
67354: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67355: LD_EXP 68
67359: PUSH
67360: LD_EXP 74
67364: AND
67365: IFFALSE 67449
67367: GO 67369
67369: DISABLE
67370: LD_INT 0
67372: PPUSH
67373: PPUSH
// begin enable ;
67374: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67375: LD_ADDR_VAR 0 2
67379: PUSH
67380: LD_INT 22
67382: PUSH
67383: LD_OWVAR 2
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 32
67394: PUSH
67395: LD_INT 3
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PPUSH
67406: CALL_OW 69
67410: ST_TO_ADDR
// if not tmp then
67411: LD_VAR 0 2
67415: NOT
67416: IFFALSE 67420
// exit ;
67418: GO 67449
// for i in tmp do
67420: LD_ADDR_VAR 0 1
67424: PUSH
67425: LD_VAR 0 2
67429: PUSH
67430: FOR_IN
67431: IFFALSE 67447
// begin SetLives ( i , 0 ) ;
67433: LD_VAR 0 1
67437: PPUSH
67438: LD_INT 0
67440: PPUSH
67441: CALL_OW 234
// end ;
67445: GO 67430
67447: POP
67448: POP
// end ;
67449: PPOPN 2
67451: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67452: LD_EXP 68
67456: PUSH
67457: LD_EXP 71
67461: AND
67462: IFFALSE 67555
67464: GO 67466
67466: DISABLE
67467: LD_INT 0
67469: PPUSH
// begin enable ;
67470: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67471: LD_ADDR_VAR 0 1
67475: PUSH
67476: LD_INT 22
67478: PUSH
67479: LD_OWVAR 2
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 2
67490: PUSH
67491: LD_INT 25
67493: PUSH
67494: LD_INT 5
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 25
67503: PUSH
67504: LD_INT 9
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 25
67513: PUSH
67514: LD_INT 8
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PPUSH
67531: CALL_OW 69
67535: PUSH
67536: FOR_IN
67537: IFFALSE 67553
// begin SetClass ( i , 1 ) ;
67539: LD_VAR 0 1
67543: PPUSH
67544: LD_INT 1
67546: PPUSH
67547: CALL_OW 336
// end ;
67551: GO 67536
67553: POP
67554: POP
// end ;
67555: PPOPN 1
67557: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67558: LD_EXP 68
67562: PUSH
67563: LD_EXP 72
67567: AND
67568: PUSH
67569: LD_OWVAR 65
67573: PUSH
67574: LD_INT 7
67576: LESS
67577: AND
67578: IFFALSE 67592
67580: GO 67582
67582: DISABLE
// begin enable ;
67583: ENABLE
// game_speed := 7 ;
67584: LD_ADDR_OWVAR 65
67588: PUSH
67589: LD_INT 7
67591: ST_TO_ADDR
// end ;
67592: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67593: LD_EXP 68
67597: PUSH
67598: LD_EXP 75
67602: AND
67603: IFFALSE 67805
67605: GO 67607
67607: DISABLE
67608: LD_INT 0
67610: PPUSH
67611: PPUSH
67612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67613: LD_ADDR_VAR 0 3
67617: PUSH
67618: LD_INT 81
67620: PUSH
67621: LD_OWVAR 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 21
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PPUSH
67644: CALL_OW 69
67648: ST_TO_ADDR
// if not tmp then
67649: LD_VAR 0 3
67653: NOT
67654: IFFALSE 67658
// exit ;
67656: GO 67805
// if tmp > 5 then
67658: LD_VAR 0 3
67662: PUSH
67663: LD_INT 5
67665: GREATER
67666: IFFALSE 67678
// k := 5 else
67668: LD_ADDR_VAR 0 2
67672: PUSH
67673: LD_INT 5
67675: ST_TO_ADDR
67676: GO 67688
// k := tmp ;
67678: LD_ADDR_VAR 0 2
67682: PUSH
67683: LD_VAR 0 3
67687: ST_TO_ADDR
// for i := 1 to k do
67688: LD_ADDR_VAR 0 1
67692: PUSH
67693: DOUBLE
67694: LD_INT 1
67696: DEC
67697: ST_TO_ADDR
67698: LD_VAR 0 2
67702: PUSH
67703: FOR_TO
67704: IFFALSE 67803
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67706: LD_VAR 0 3
67710: PUSH
67711: LD_VAR 0 1
67715: ARRAY
67716: PPUSH
67717: LD_VAR 0 1
67721: PUSH
67722: LD_INT 4
67724: MOD
67725: PUSH
67726: LD_INT 1
67728: PLUS
67729: PPUSH
67730: CALL_OW 259
67734: PUSH
67735: LD_INT 10
67737: LESS
67738: IFFALSE 67801
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67740: LD_VAR 0 3
67744: PUSH
67745: LD_VAR 0 1
67749: ARRAY
67750: PPUSH
67751: LD_VAR 0 1
67755: PUSH
67756: LD_INT 4
67758: MOD
67759: PUSH
67760: LD_INT 1
67762: PLUS
67763: PPUSH
67764: LD_VAR 0 3
67768: PUSH
67769: LD_VAR 0 1
67773: ARRAY
67774: PPUSH
67775: LD_VAR 0 1
67779: PUSH
67780: LD_INT 4
67782: MOD
67783: PUSH
67784: LD_INT 1
67786: PLUS
67787: PPUSH
67788: CALL_OW 259
67792: PUSH
67793: LD_INT 1
67795: PLUS
67796: PPUSH
67797: CALL_OW 237
67801: GO 67703
67803: POP
67804: POP
// end ;
67805: PPOPN 3
67807: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67808: LD_EXP 68
67812: PUSH
67813: LD_EXP 76
67817: AND
67818: IFFALSE 67838
67820: GO 67822
67822: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67823: LD_INT 4
67825: PPUSH
67826: LD_OWVAR 2
67830: PPUSH
67831: LD_INT 0
67833: PPUSH
67834: CALL_OW 324
67838: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67839: LD_EXP 68
67843: PUSH
67844: LD_EXP 105
67848: AND
67849: IFFALSE 67869
67851: GO 67853
67853: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67854: LD_INT 19
67856: PPUSH
67857: LD_OWVAR 2
67861: PPUSH
67862: LD_INT 0
67864: PPUSH
67865: CALL_OW 324
67869: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67870: LD_EXP 68
67874: PUSH
67875: LD_EXP 77
67879: AND
67880: IFFALSE 67982
67882: GO 67884
67884: DISABLE
67885: LD_INT 0
67887: PPUSH
67888: PPUSH
// begin enable ;
67889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67890: LD_ADDR_VAR 0 2
67894: PUSH
67895: LD_INT 22
67897: PUSH
67898: LD_OWVAR 2
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: LD_INT 34
67912: PUSH
67913: LD_INT 11
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 34
67922: PUSH
67923: LD_INT 30
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: LIST
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PPUSH
67939: CALL_OW 69
67943: ST_TO_ADDR
// if not tmp then
67944: LD_VAR 0 2
67948: NOT
67949: IFFALSE 67953
// exit ;
67951: GO 67982
// for i in tmp do
67953: LD_ADDR_VAR 0 1
67957: PUSH
67958: LD_VAR 0 2
67962: PUSH
67963: FOR_IN
67964: IFFALSE 67980
// begin SetLives ( i , 0 ) ;
67966: LD_VAR 0 1
67970: PPUSH
67971: LD_INT 0
67973: PPUSH
67974: CALL_OW 234
// end ;
67978: GO 67963
67980: POP
67981: POP
// end ;
67982: PPOPN 2
67984: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67985: LD_EXP 68
67989: PUSH
67990: LD_EXP 78
67994: AND
67995: IFFALSE 68015
67997: GO 67999
67999: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68000: LD_INT 32
68002: PPUSH
68003: LD_OWVAR 2
68007: PPUSH
68008: LD_INT 0
68010: PPUSH
68011: CALL_OW 324
68015: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68016: LD_EXP 68
68020: PUSH
68021: LD_EXP 79
68025: AND
68026: IFFALSE 68207
68028: GO 68030
68030: DISABLE
68031: LD_INT 0
68033: PPUSH
68034: PPUSH
68035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68036: LD_ADDR_VAR 0 2
68040: PUSH
68041: LD_INT 22
68043: PUSH
68044: LD_OWVAR 2
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 33
68055: PUSH
68056: LD_INT 3
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PPUSH
68067: CALL_OW 69
68071: ST_TO_ADDR
// if not tmp then
68072: LD_VAR 0 2
68076: NOT
68077: IFFALSE 68081
// exit ;
68079: GO 68207
// side := 0 ;
68081: LD_ADDR_VAR 0 3
68085: PUSH
68086: LD_INT 0
68088: ST_TO_ADDR
// for i := 1 to 8 do
68089: LD_ADDR_VAR 0 1
68093: PUSH
68094: DOUBLE
68095: LD_INT 1
68097: DEC
68098: ST_TO_ADDR
68099: LD_INT 8
68101: PUSH
68102: FOR_TO
68103: IFFALSE 68151
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68105: LD_OWVAR 2
68109: PUSH
68110: LD_VAR 0 1
68114: NONEQUAL
68115: PUSH
68116: LD_OWVAR 2
68120: PPUSH
68121: LD_VAR 0 1
68125: PPUSH
68126: CALL_OW 81
68130: PUSH
68131: LD_INT 2
68133: EQUAL
68134: AND
68135: IFFALSE 68149
// begin side := i ;
68137: LD_ADDR_VAR 0 3
68141: PUSH
68142: LD_VAR 0 1
68146: ST_TO_ADDR
// break ;
68147: GO 68151
// end ;
68149: GO 68102
68151: POP
68152: POP
// if not side then
68153: LD_VAR 0 3
68157: NOT
68158: IFFALSE 68162
// exit ;
68160: GO 68207
// for i := 1 to tmp do
68162: LD_ADDR_VAR 0 1
68166: PUSH
68167: DOUBLE
68168: LD_INT 1
68170: DEC
68171: ST_TO_ADDR
68172: LD_VAR 0 2
68176: PUSH
68177: FOR_TO
68178: IFFALSE 68205
// if Prob ( 60 ) then
68180: LD_INT 60
68182: PPUSH
68183: CALL_OW 13
68187: IFFALSE 68203
// SetSide ( i , side ) ;
68189: LD_VAR 0 1
68193: PPUSH
68194: LD_VAR 0 3
68198: PPUSH
68199: CALL_OW 235
68203: GO 68177
68205: POP
68206: POP
// end ;
68207: PPOPN 3
68209: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68210: LD_EXP 68
68214: PUSH
68215: LD_EXP 81
68219: AND
68220: IFFALSE 68339
68222: GO 68224
68224: DISABLE
68225: LD_INT 0
68227: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68228: LD_ADDR_VAR 0 1
68232: PUSH
68233: LD_INT 22
68235: PUSH
68236: LD_OWVAR 2
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 21
68247: PUSH
68248: LD_INT 1
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 3
68257: PUSH
68258: LD_INT 23
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: LIST
68276: PPUSH
68277: CALL_OW 69
68281: PUSH
68282: FOR_IN
68283: IFFALSE 68337
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68285: LD_VAR 0 1
68289: PPUSH
68290: CALL_OW 257
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: LD_INT 2
68300: PUSH
68301: LD_INT 3
68303: PUSH
68304: LD_INT 4
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: IN
68313: IFFALSE 68335
// SetClass ( un , rand ( 1 , 4 ) ) ;
68315: LD_VAR 0 1
68319: PPUSH
68320: LD_INT 1
68322: PPUSH
68323: LD_INT 4
68325: PPUSH
68326: CALL_OW 12
68330: PPUSH
68331: CALL_OW 336
68335: GO 68282
68337: POP
68338: POP
// end ;
68339: PPOPN 1
68341: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68342: LD_EXP 68
68346: PUSH
68347: LD_EXP 80
68351: AND
68352: IFFALSE 68431
68354: GO 68356
68356: DISABLE
68357: LD_INT 0
68359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68360: LD_ADDR_VAR 0 1
68364: PUSH
68365: LD_INT 22
68367: PUSH
68368: LD_OWVAR 2
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 21
68379: PUSH
68380: LD_INT 3
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PPUSH
68391: CALL_OW 69
68395: ST_TO_ADDR
// if not tmp then
68396: LD_VAR 0 1
68400: NOT
68401: IFFALSE 68405
// exit ;
68403: GO 68431
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68405: LD_VAR 0 1
68409: PUSH
68410: LD_INT 1
68412: PPUSH
68413: LD_VAR 0 1
68417: PPUSH
68418: CALL_OW 12
68422: ARRAY
68423: PPUSH
68424: LD_INT 100
68426: PPUSH
68427: CALL_OW 234
// end ;
68431: PPOPN 1
68433: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68434: LD_EXP 68
68438: PUSH
68439: LD_EXP 82
68443: AND
68444: IFFALSE 68542
68446: GO 68448
68448: DISABLE
68449: LD_INT 0
68451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68452: LD_ADDR_VAR 0 1
68456: PUSH
68457: LD_INT 22
68459: PUSH
68460: LD_OWVAR 2
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 21
68471: PUSH
68472: LD_INT 1
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PPUSH
68483: CALL_OW 69
68487: ST_TO_ADDR
// if not tmp then
68488: LD_VAR 0 1
68492: NOT
68493: IFFALSE 68497
// exit ;
68495: GO 68542
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68497: LD_VAR 0 1
68501: PUSH
68502: LD_INT 1
68504: PPUSH
68505: LD_VAR 0 1
68509: PPUSH
68510: CALL_OW 12
68514: ARRAY
68515: PPUSH
68516: LD_INT 1
68518: PPUSH
68519: LD_INT 4
68521: PPUSH
68522: CALL_OW 12
68526: PPUSH
68527: LD_INT 3000
68529: PPUSH
68530: LD_INT 9000
68532: PPUSH
68533: CALL_OW 12
68537: PPUSH
68538: CALL_OW 492
// end ;
68542: PPOPN 1
68544: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68545: LD_EXP 68
68549: PUSH
68550: LD_EXP 83
68554: AND
68555: IFFALSE 68575
68557: GO 68559
68559: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68560: LD_INT 1
68562: PPUSH
68563: LD_OWVAR 2
68567: PPUSH
68568: LD_INT 0
68570: PPUSH
68571: CALL_OW 324
68575: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68576: LD_EXP 68
68580: PUSH
68581: LD_EXP 84
68585: AND
68586: IFFALSE 68669
68588: GO 68590
68590: DISABLE
68591: LD_INT 0
68593: PPUSH
68594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68595: LD_ADDR_VAR 0 2
68599: PUSH
68600: LD_INT 22
68602: PUSH
68603: LD_OWVAR 2
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 21
68614: PUSH
68615: LD_INT 3
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PPUSH
68626: CALL_OW 69
68630: ST_TO_ADDR
// if not tmp then
68631: LD_VAR 0 2
68635: NOT
68636: IFFALSE 68640
// exit ;
68638: GO 68669
// for i in tmp do
68640: LD_ADDR_VAR 0 1
68644: PUSH
68645: LD_VAR 0 2
68649: PUSH
68650: FOR_IN
68651: IFFALSE 68667
// SetBLevel ( i , 10 ) ;
68653: LD_VAR 0 1
68657: PPUSH
68658: LD_INT 10
68660: PPUSH
68661: CALL_OW 241
68665: GO 68650
68667: POP
68668: POP
// end ;
68669: PPOPN 2
68671: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68672: LD_EXP 68
68676: PUSH
68677: LD_EXP 85
68681: AND
68682: IFFALSE 68793
68684: GO 68686
68686: DISABLE
68687: LD_INT 0
68689: PPUSH
68690: PPUSH
68691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68692: LD_ADDR_VAR 0 3
68696: PUSH
68697: LD_INT 22
68699: PUSH
68700: LD_OWVAR 2
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 25
68711: PUSH
68712: LD_INT 1
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PPUSH
68723: CALL_OW 69
68727: ST_TO_ADDR
// if not tmp then
68728: LD_VAR 0 3
68732: NOT
68733: IFFALSE 68737
// exit ;
68735: GO 68793
// un := tmp [ rand ( 1 , tmp ) ] ;
68737: LD_ADDR_VAR 0 2
68741: PUSH
68742: LD_VAR 0 3
68746: PUSH
68747: LD_INT 1
68749: PPUSH
68750: LD_VAR 0 3
68754: PPUSH
68755: CALL_OW 12
68759: ARRAY
68760: ST_TO_ADDR
// if Crawls ( un ) then
68761: LD_VAR 0 2
68765: PPUSH
68766: CALL_OW 318
68770: IFFALSE 68781
// ComWalk ( un ) ;
68772: LD_VAR 0 2
68776: PPUSH
68777: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68781: LD_VAR 0 2
68785: PPUSH
68786: LD_INT 5
68788: PPUSH
68789: CALL_OW 336
// end ;
68793: PPOPN 3
68795: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
68796: LD_EXP 68
68800: PUSH
68801: LD_EXP 86
68805: AND
68806: PUSH
68807: LD_OWVAR 67
68811: PUSH
68812: LD_INT 3
68814: LESS
68815: AND
68816: IFFALSE 68835
68818: GO 68820
68820: DISABLE
// Difficulty := Difficulty + 1 ;
68821: LD_ADDR_OWVAR 67
68825: PUSH
68826: LD_OWVAR 67
68830: PUSH
68831: LD_INT 1
68833: PLUS
68834: ST_TO_ADDR
68835: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68836: LD_EXP 68
68840: PUSH
68841: LD_EXP 87
68845: AND
68846: IFFALSE 68949
68848: GO 68850
68850: DISABLE
68851: LD_INT 0
68853: PPUSH
// begin for i := 1 to 5 do
68854: LD_ADDR_VAR 0 1
68858: PUSH
68859: DOUBLE
68860: LD_INT 1
68862: DEC
68863: ST_TO_ADDR
68864: LD_INT 5
68866: PUSH
68867: FOR_TO
68868: IFFALSE 68947
// begin uc_nation := nation_nature ;
68870: LD_ADDR_OWVAR 21
68874: PUSH
68875: LD_INT 0
68877: ST_TO_ADDR
// uc_side := 0 ;
68878: LD_ADDR_OWVAR 20
68882: PUSH
68883: LD_INT 0
68885: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68886: LD_ADDR_OWVAR 29
68890: PUSH
68891: LD_INT 12
68893: PUSH
68894: LD_INT 12
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: ST_TO_ADDR
// hc_agressivity := 20 ;
68901: LD_ADDR_OWVAR 35
68905: PUSH
68906: LD_INT 20
68908: ST_TO_ADDR
// hc_class := class_tiger ;
68909: LD_ADDR_OWVAR 28
68913: PUSH
68914: LD_INT 14
68916: ST_TO_ADDR
// hc_gallery :=  ;
68917: LD_ADDR_OWVAR 33
68921: PUSH
68922: LD_STRING 
68924: ST_TO_ADDR
// hc_name :=  ;
68925: LD_ADDR_OWVAR 26
68929: PUSH
68930: LD_STRING 
68932: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68933: CALL_OW 44
68937: PPUSH
68938: LD_INT 0
68940: PPUSH
68941: CALL_OW 51
// end ;
68945: GO 68867
68947: POP
68948: POP
// end ;
68949: PPOPN 1
68951: END
// every 0 0$1 trigger StreamModeActive and sBomb do
68952: LD_EXP 68
68956: PUSH
68957: LD_EXP 88
68961: AND
68962: IFFALSE 68971
68964: GO 68966
68966: DISABLE
// StreamSibBomb ;
68967: CALL 68972 0 0
68971: END
// export function StreamSibBomb ; var i , x , y ; begin
68972: LD_INT 0
68974: PPUSH
68975: PPUSH
68976: PPUSH
68977: PPUSH
// result := false ;
68978: LD_ADDR_VAR 0 1
68982: PUSH
68983: LD_INT 0
68985: ST_TO_ADDR
// for i := 1 to 16 do
68986: LD_ADDR_VAR 0 2
68990: PUSH
68991: DOUBLE
68992: LD_INT 1
68994: DEC
68995: ST_TO_ADDR
68996: LD_INT 16
68998: PUSH
68999: FOR_TO
69000: IFFALSE 69199
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69002: LD_ADDR_VAR 0 3
69006: PUSH
69007: LD_INT 10
69009: PUSH
69010: LD_INT 20
69012: PUSH
69013: LD_INT 30
69015: PUSH
69016: LD_INT 40
69018: PUSH
69019: LD_INT 50
69021: PUSH
69022: LD_INT 60
69024: PUSH
69025: LD_INT 70
69027: PUSH
69028: LD_INT 80
69030: PUSH
69031: LD_INT 90
69033: PUSH
69034: LD_INT 100
69036: PUSH
69037: LD_INT 110
69039: PUSH
69040: LD_INT 120
69042: PUSH
69043: LD_INT 130
69045: PUSH
69046: LD_INT 140
69048: PUSH
69049: LD_INT 150
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 1
69071: PPUSH
69072: LD_INT 15
69074: PPUSH
69075: CALL_OW 12
69079: ARRAY
69080: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69081: LD_ADDR_VAR 0 4
69085: PUSH
69086: LD_INT 10
69088: PUSH
69089: LD_INT 20
69091: PUSH
69092: LD_INT 30
69094: PUSH
69095: LD_INT 40
69097: PUSH
69098: LD_INT 50
69100: PUSH
69101: LD_INT 60
69103: PUSH
69104: LD_INT 70
69106: PUSH
69107: LD_INT 80
69109: PUSH
69110: LD_INT 90
69112: PUSH
69113: LD_INT 100
69115: PUSH
69116: LD_INT 110
69118: PUSH
69119: LD_INT 120
69121: PUSH
69122: LD_INT 130
69124: PUSH
69125: LD_INT 140
69127: PUSH
69128: LD_INT 150
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: PPUSH
69151: LD_INT 15
69153: PPUSH
69154: CALL_OW 12
69158: ARRAY
69159: ST_TO_ADDR
// if ValidHex ( x , y ) then
69160: LD_VAR 0 3
69164: PPUSH
69165: LD_VAR 0 4
69169: PPUSH
69170: CALL_OW 488
69174: IFFALSE 69197
// begin result := [ x , y ] ;
69176: LD_ADDR_VAR 0 1
69180: PUSH
69181: LD_VAR 0 3
69185: PUSH
69186: LD_VAR 0 4
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: ST_TO_ADDR
// break ;
69195: GO 69199
// end ; end ;
69197: GO 68999
69199: POP
69200: POP
// if result then
69201: LD_VAR 0 1
69205: IFFALSE 69265
// begin ToLua ( playSibBomb() ) ;
69207: LD_STRING playSibBomb()
69209: PPUSH
69210: CALL_OW 559
// wait ( 0 0$14 ) ;
69214: LD_INT 490
69216: PPUSH
69217: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69221: LD_VAR 0 1
69225: PUSH
69226: LD_INT 1
69228: ARRAY
69229: PPUSH
69230: LD_VAR 0 1
69234: PUSH
69235: LD_INT 2
69237: ARRAY
69238: PPUSH
69239: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69243: LD_VAR 0 1
69247: PUSH
69248: LD_INT 1
69250: ARRAY
69251: PPUSH
69252: LD_VAR 0 1
69256: PUSH
69257: LD_INT 2
69259: ARRAY
69260: PPUSH
69261: CALL_OW 429
// end ; end ;
69265: LD_VAR 0 1
69269: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69270: LD_EXP 68
69274: PUSH
69275: LD_EXP 90
69279: AND
69280: IFFALSE 69292
69282: GO 69284
69284: DISABLE
// YouLost (  ) ;
69285: LD_STRING 
69287: PPUSH
69288: CALL_OW 104
69292: END
// every 0 0$1 trigger StreamModeActive and sFog do
69293: LD_EXP 68
69297: PUSH
69298: LD_EXP 89
69302: AND
69303: IFFALSE 69317
69305: GO 69307
69307: DISABLE
// FogOff ( your_side ) ;
69308: LD_OWVAR 2
69312: PPUSH
69313: CALL_OW 344
69317: END
// every 0 0$1 trigger StreamModeActive and sSun do
69318: LD_EXP 68
69322: PUSH
69323: LD_EXP 91
69327: AND
69328: IFFALSE 69356
69330: GO 69332
69332: DISABLE
// begin solar_recharge_percent := 0 ;
69333: LD_ADDR_OWVAR 79
69337: PUSH
69338: LD_INT 0
69340: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69341: LD_INT 10500
69343: PPUSH
69344: CALL_OW 67
// solar_recharge_percent := 100 ;
69348: LD_ADDR_OWVAR 79
69352: PUSH
69353: LD_INT 100
69355: ST_TO_ADDR
// end ;
69356: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69357: LD_EXP 68
69361: PUSH
69362: LD_EXP 92
69366: AND
69367: IFFALSE 69606
69369: GO 69371
69371: DISABLE
69372: LD_INT 0
69374: PPUSH
69375: PPUSH
69376: PPUSH
// begin tmp := [ ] ;
69377: LD_ADDR_VAR 0 3
69381: PUSH
69382: EMPTY
69383: ST_TO_ADDR
// for i := 1 to 6 do
69384: LD_ADDR_VAR 0 1
69388: PUSH
69389: DOUBLE
69390: LD_INT 1
69392: DEC
69393: ST_TO_ADDR
69394: LD_INT 6
69396: PUSH
69397: FOR_TO
69398: IFFALSE 69503
// begin uc_nation := nation_nature ;
69400: LD_ADDR_OWVAR 21
69404: PUSH
69405: LD_INT 0
69407: ST_TO_ADDR
// uc_side := 0 ;
69408: LD_ADDR_OWVAR 20
69412: PUSH
69413: LD_INT 0
69415: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69416: LD_ADDR_OWVAR 29
69420: PUSH
69421: LD_INT 12
69423: PUSH
69424: LD_INT 12
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: ST_TO_ADDR
// hc_agressivity := 20 ;
69431: LD_ADDR_OWVAR 35
69435: PUSH
69436: LD_INT 20
69438: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69439: LD_ADDR_OWVAR 28
69443: PUSH
69444: LD_INT 17
69446: ST_TO_ADDR
// hc_gallery :=  ;
69447: LD_ADDR_OWVAR 33
69451: PUSH
69452: LD_STRING 
69454: ST_TO_ADDR
// hc_name :=  ;
69455: LD_ADDR_OWVAR 26
69459: PUSH
69460: LD_STRING 
69462: ST_TO_ADDR
// un := CreateHuman ;
69463: LD_ADDR_VAR 0 2
69467: PUSH
69468: CALL_OW 44
69472: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69473: LD_VAR 0 2
69477: PPUSH
69478: LD_INT 1
69480: PPUSH
69481: CALL_OW 51
// tmp := tmp ^ un ;
69485: LD_ADDR_VAR 0 3
69489: PUSH
69490: LD_VAR 0 3
69494: PUSH
69495: LD_VAR 0 2
69499: ADD
69500: ST_TO_ADDR
// end ;
69501: GO 69397
69503: POP
69504: POP
// repeat wait ( 0 0$1 ) ;
69505: LD_INT 35
69507: PPUSH
69508: CALL_OW 67
// for un in tmp do
69512: LD_ADDR_VAR 0 2
69516: PUSH
69517: LD_VAR 0 3
69521: PUSH
69522: FOR_IN
69523: IFFALSE 69597
// begin if IsDead ( un ) then
69525: LD_VAR 0 2
69529: PPUSH
69530: CALL_OW 301
69534: IFFALSE 69554
// begin tmp := tmp diff un ;
69536: LD_ADDR_VAR 0 3
69540: PUSH
69541: LD_VAR 0 3
69545: PUSH
69546: LD_VAR 0 2
69550: DIFF
69551: ST_TO_ADDR
// continue ;
69552: GO 69522
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69554: LD_VAR 0 2
69558: PPUSH
69559: LD_INT 3
69561: PUSH
69562: LD_INT 22
69564: PUSH
69565: LD_INT 0
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PPUSH
69576: CALL_OW 69
69580: PPUSH
69581: LD_VAR 0 2
69585: PPUSH
69586: CALL_OW 74
69590: PPUSH
69591: CALL_OW 115
// end ;
69595: GO 69522
69597: POP
69598: POP
// until not tmp ;
69599: LD_VAR 0 3
69603: NOT
69604: IFFALSE 69505
// end ;
69606: PPOPN 3
69608: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69609: LD_EXP 68
69613: PUSH
69614: LD_EXP 93
69618: AND
69619: IFFALSE 69673
69621: GO 69623
69623: DISABLE
// begin ToLua ( displayTroll(); ) ;
69624: LD_STRING displayTroll();
69626: PPUSH
69627: CALL_OW 559
// wait ( 3 3$00 ) ;
69631: LD_INT 6300
69633: PPUSH
69634: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69638: LD_STRING hideTroll();
69640: PPUSH
69641: CALL_OW 559
// wait ( 1 1$00 ) ;
69645: LD_INT 2100
69647: PPUSH
69648: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69652: LD_STRING displayTroll();
69654: PPUSH
69655: CALL_OW 559
// wait ( 1 1$00 ) ;
69659: LD_INT 2100
69661: PPUSH
69662: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69666: LD_STRING hideTroll();
69668: PPUSH
69669: CALL_OW 559
// end ;
69673: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69674: LD_EXP 68
69678: PUSH
69679: LD_EXP 94
69683: AND
69684: IFFALSE 69747
69686: GO 69688
69688: DISABLE
69689: LD_INT 0
69691: PPUSH
// begin p := 0 ;
69692: LD_ADDR_VAR 0 1
69696: PUSH
69697: LD_INT 0
69699: ST_TO_ADDR
// repeat game_speed := 1 ;
69700: LD_ADDR_OWVAR 65
69704: PUSH
69705: LD_INT 1
69707: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69708: LD_INT 35
69710: PPUSH
69711: CALL_OW 67
// p := p + 1 ;
69715: LD_ADDR_VAR 0 1
69719: PUSH
69720: LD_VAR 0 1
69724: PUSH
69725: LD_INT 1
69727: PLUS
69728: ST_TO_ADDR
// until p >= 60 ;
69729: LD_VAR 0 1
69733: PUSH
69734: LD_INT 60
69736: GREATEREQUAL
69737: IFFALSE 69700
// game_speed := 4 ;
69739: LD_ADDR_OWVAR 65
69743: PUSH
69744: LD_INT 4
69746: ST_TO_ADDR
// end ;
69747: PPOPN 1
69749: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69750: LD_EXP 68
69754: PUSH
69755: LD_EXP 95
69759: AND
69760: IFFALSE 69906
69762: GO 69764
69764: DISABLE
69765: LD_INT 0
69767: PPUSH
69768: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69769: LD_ADDR_VAR 0 1
69773: PUSH
69774: LD_INT 22
69776: PUSH
69777: LD_OWVAR 2
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 2
69788: PUSH
69789: LD_INT 30
69791: PUSH
69792: LD_INT 0
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 30
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: LIST
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PPUSH
69818: CALL_OW 69
69822: ST_TO_ADDR
// if not depot then
69823: LD_VAR 0 1
69827: NOT
69828: IFFALSE 69832
// exit ;
69830: GO 69906
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69832: LD_ADDR_VAR 0 2
69836: PUSH
69837: LD_VAR 0 1
69841: PUSH
69842: LD_INT 1
69844: PPUSH
69845: LD_VAR 0 1
69849: PPUSH
69850: CALL_OW 12
69854: ARRAY
69855: PPUSH
69856: CALL_OW 274
69860: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69861: LD_VAR 0 2
69865: PPUSH
69866: LD_INT 1
69868: PPUSH
69869: LD_INT 0
69871: PPUSH
69872: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69876: LD_VAR 0 2
69880: PPUSH
69881: LD_INT 2
69883: PPUSH
69884: LD_INT 0
69886: PPUSH
69887: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69891: LD_VAR 0 2
69895: PPUSH
69896: LD_INT 3
69898: PPUSH
69899: LD_INT 0
69901: PPUSH
69902: CALL_OW 277
// end ;
69906: PPOPN 2
69908: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69909: LD_EXP 68
69913: PUSH
69914: LD_EXP 96
69918: AND
69919: IFFALSE 70016
69921: GO 69923
69923: DISABLE
69924: LD_INT 0
69926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69927: LD_ADDR_VAR 0 1
69931: PUSH
69932: LD_INT 22
69934: PUSH
69935: LD_OWVAR 2
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 21
69946: PUSH
69947: LD_INT 1
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 3
69956: PUSH
69957: LD_INT 23
69959: PUSH
69960: LD_INT 0
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: LIST
69975: PPUSH
69976: CALL_OW 69
69980: ST_TO_ADDR
// if not tmp then
69981: LD_VAR 0 1
69985: NOT
69986: IFFALSE 69990
// exit ;
69988: GO 70016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69990: LD_VAR 0 1
69994: PUSH
69995: LD_INT 1
69997: PPUSH
69998: LD_VAR 0 1
70002: PPUSH
70003: CALL_OW 12
70007: ARRAY
70008: PPUSH
70009: LD_INT 200
70011: PPUSH
70012: CALL_OW 234
// end ;
70016: PPOPN 1
70018: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70019: LD_EXP 68
70023: PUSH
70024: LD_EXP 97
70028: AND
70029: IFFALSE 70108
70031: GO 70033
70033: DISABLE
70034: LD_INT 0
70036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70037: LD_ADDR_VAR 0 1
70041: PUSH
70042: LD_INT 22
70044: PUSH
70045: LD_OWVAR 2
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 21
70056: PUSH
70057: LD_INT 2
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PPUSH
70068: CALL_OW 69
70072: ST_TO_ADDR
// if not tmp then
70073: LD_VAR 0 1
70077: NOT
70078: IFFALSE 70082
// exit ;
70080: GO 70108
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70082: LD_VAR 0 1
70086: PUSH
70087: LD_INT 1
70089: PPUSH
70090: LD_VAR 0 1
70094: PPUSH
70095: CALL_OW 12
70099: ARRAY
70100: PPUSH
70101: LD_INT 60
70103: PPUSH
70104: CALL_OW 234
// end ;
70108: PPOPN 1
70110: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70111: LD_EXP 68
70115: PUSH
70116: LD_EXP 98
70120: AND
70121: IFFALSE 70220
70123: GO 70125
70125: DISABLE
70126: LD_INT 0
70128: PPUSH
70129: PPUSH
// begin enable ;
70130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70131: LD_ADDR_VAR 0 1
70135: PUSH
70136: LD_INT 22
70138: PUSH
70139: LD_OWVAR 2
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 61
70150: PUSH
70151: EMPTY
70152: LIST
70153: PUSH
70154: LD_INT 33
70156: PUSH
70157: LD_INT 2
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: LIST
70168: PPUSH
70169: CALL_OW 69
70173: ST_TO_ADDR
// if not tmp then
70174: LD_VAR 0 1
70178: NOT
70179: IFFALSE 70183
// exit ;
70181: GO 70220
// for i in tmp do
70183: LD_ADDR_VAR 0 2
70187: PUSH
70188: LD_VAR 0 1
70192: PUSH
70193: FOR_IN
70194: IFFALSE 70218
// if IsControledBy ( i ) then
70196: LD_VAR 0 2
70200: PPUSH
70201: CALL_OW 312
70205: IFFALSE 70216
// ComUnlink ( i ) ;
70207: LD_VAR 0 2
70211: PPUSH
70212: CALL_OW 136
70216: GO 70193
70218: POP
70219: POP
// end ;
70220: PPOPN 2
70222: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70223: LD_EXP 68
70227: PUSH
70228: LD_EXP 99
70232: AND
70233: IFFALSE 70373
70235: GO 70237
70237: DISABLE
70238: LD_INT 0
70240: PPUSH
70241: PPUSH
// begin ToLua ( displayPowell(); ) ;
70242: LD_STRING displayPowell();
70244: PPUSH
70245: CALL_OW 559
// uc_side := 0 ;
70249: LD_ADDR_OWVAR 20
70253: PUSH
70254: LD_INT 0
70256: ST_TO_ADDR
// uc_nation := 2 ;
70257: LD_ADDR_OWVAR 21
70261: PUSH
70262: LD_INT 2
70264: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70265: LD_ADDR_OWVAR 37
70269: PUSH
70270: LD_INT 14
70272: ST_TO_ADDR
// vc_engine := engine_siberite ;
70273: LD_ADDR_OWVAR 39
70277: PUSH
70278: LD_INT 3
70280: ST_TO_ADDR
// vc_control := control_apeman ;
70281: LD_ADDR_OWVAR 38
70285: PUSH
70286: LD_INT 5
70288: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70289: LD_ADDR_OWVAR 40
70293: PUSH
70294: LD_INT 29
70296: ST_TO_ADDR
// un := CreateVehicle ;
70297: LD_ADDR_VAR 0 2
70301: PUSH
70302: CALL_OW 45
70306: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70307: LD_VAR 0 2
70311: PPUSH
70312: LD_INT 1
70314: PPUSH
70315: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70319: LD_INT 35
70321: PPUSH
70322: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70326: LD_VAR 0 2
70330: PPUSH
70331: LD_INT 22
70333: PUSH
70334: LD_OWVAR 2
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PPUSH
70343: CALL_OW 69
70347: PPUSH
70348: LD_VAR 0 2
70352: PPUSH
70353: CALL_OW 74
70357: PPUSH
70358: CALL_OW 115
// until IsDead ( un ) ;
70362: LD_VAR 0 2
70366: PPUSH
70367: CALL_OW 301
70371: IFFALSE 70319
// end ;
70373: PPOPN 2
70375: END
// every 0 0$1 trigger StreamModeActive and sStu do
70376: LD_EXP 68
70380: PUSH
70381: LD_EXP 107
70385: AND
70386: IFFALSE 70402
70388: GO 70390
70390: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70391: LD_STRING displayStucuk();
70393: PPUSH
70394: CALL_OW 559
// ResetFog ;
70398: CALL_OW 335
// end ;
70402: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70403: LD_EXP 68
70407: PUSH
70408: LD_EXP 100
70412: AND
70413: IFFALSE 70554
70415: GO 70417
70417: DISABLE
70418: LD_INT 0
70420: PPUSH
70421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70422: LD_ADDR_VAR 0 2
70426: PUSH
70427: LD_INT 22
70429: PUSH
70430: LD_OWVAR 2
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 21
70441: PUSH
70442: LD_INT 1
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PPUSH
70453: CALL_OW 69
70457: ST_TO_ADDR
// if not tmp then
70458: LD_VAR 0 2
70462: NOT
70463: IFFALSE 70467
// exit ;
70465: GO 70554
// un := tmp [ rand ( 1 , tmp ) ] ;
70467: LD_ADDR_VAR 0 1
70471: PUSH
70472: LD_VAR 0 2
70476: PUSH
70477: LD_INT 1
70479: PPUSH
70480: LD_VAR 0 2
70484: PPUSH
70485: CALL_OW 12
70489: ARRAY
70490: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70491: LD_VAR 0 1
70495: PPUSH
70496: LD_INT 0
70498: PPUSH
70499: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70503: LD_VAR 0 1
70507: PPUSH
70508: LD_OWVAR 3
70512: PUSH
70513: LD_VAR 0 1
70517: DIFF
70518: PPUSH
70519: LD_VAR 0 1
70523: PPUSH
70524: CALL_OW 74
70528: PPUSH
70529: CALL_OW 115
// wait ( 0 0$20 ) ;
70533: LD_INT 700
70535: PPUSH
70536: CALL_OW 67
// SetSide ( un , your_side ) ;
70540: LD_VAR 0 1
70544: PPUSH
70545: LD_OWVAR 2
70549: PPUSH
70550: CALL_OW 235
// end ;
70554: PPOPN 2
70556: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70557: LD_EXP 68
70561: PUSH
70562: LD_EXP 101
70566: AND
70567: IFFALSE 70673
70569: GO 70571
70571: DISABLE
70572: LD_INT 0
70574: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70575: LD_ADDR_VAR 0 1
70579: PUSH
70580: LD_INT 22
70582: PUSH
70583: LD_OWVAR 2
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 2
70594: PUSH
70595: LD_INT 30
70597: PUSH
70598: LD_INT 0
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 30
70607: PUSH
70608: LD_INT 1
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: LIST
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PPUSH
70624: CALL_OW 69
70628: ST_TO_ADDR
// if not depot then
70629: LD_VAR 0 1
70633: NOT
70634: IFFALSE 70638
// exit ;
70636: GO 70673
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70638: LD_VAR 0 1
70642: PUSH
70643: LD_INT 1
70645: ARRAY
70646: PPUSH
70647: CALL_OW 250
70651: PPUSH
70652: LD_VAR 0 1
70656: PUSH
70657: LD_INT 1
70659: ARRAY
70660: PPUSH
70661: CALL_OW 251
70665: PPUSH
70666: LD_INT 70
70668: PPUSH
70669: CALL_OW 495
// end ;
70673: PPOPN 1
70675: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70676: LD_EXP 68
70680: PUSH
70681: LD_EXP 102
70685: AND
70686: IFFALSE 70897
70688: GO 70690
70690: DISABLE
70691: LD_INT 0
70693: PPUSH
70694: PPUSH
70695: PPUSH
70696: PPUSH
70697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70698: LD_ADDR_VAR 0 5
70702: PUSH
70703: LD_INT 22
70705: PUSH
70706: LD_OWVAR 2
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 21
70717: PUSH
70718: LD_INT 1
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PPUSH
70729: CALL_OW 69
70733: ST_TO_ADDR
// if not tmp then
70734: LD_VAR 0 5
70738: NOT
70739: IFFALSE 70743
// exit ;
70741: GO 70897
// for i in tmp do
70743: LD_ADDR_VAR 0 1
70747: PUSH
70748: LD_VAR 0 5
70752: PUSH
70753: FOR_IN
70754: IFFALSE 70895
// begin d := rand ( 0 , 5 ) ;
70756: LD_ADDR_VAR 0 4
70760: PUSH
70761: LD_INT 0
70763: PPUSH
70764: LD_INT 5
70766: PPUSH
70767: CALL_OW 12
70771: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70772: LD_ADDR_VAR 0 2
70776: PUSH
70777: LD_VAR 0 1
70781: PPUSH
70782: CALL_OW 250
70786: PPUSH
70787: LD_VAR 0 4
70791: PPUSH
70792: LD_INT 3
70794: PPUSH
70795: LD_INT 12
70797: PPUSH
70798: CALL_OW 12
70802: PPUSH
70803: CALL_OW 272
70807: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70808: LD_ADDR_VAR 0 3
70812: PUSH
70813: LD_VAR 0 1
70817: PPUSH
70818: CALL_OW 251
70822: PPUSH
70823: LD_VAR 0 4
70827: PPUSH
70828: LD_INT 3
70830: PPUSH
70831: LD_INT 12
70833: PPUSH
70834: CALL_OW 12
70838: PPUSH
70839: CALL_OW 273
70843: ST_TO_ADDR
// if ValidHex ( x , y ) then
70844: LD_VAR 0 2
70848: PPUSH
70849: LD_VAR 0 3
70853: PPUSH
70854: CALL_OW 488
70858: IFFALSE 70893
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70860: LD_VAR 0 1
70864: PPUSH
70865: LD_VAR 0 2
70869: PPUSH
70870: LD_VAR 0 3
70874: PPUSH
70875: LD_INT 3
70877: PPUSH
70878: LD_INT 6
70880: PPUSH
70881: CALL_OW 12
70885: PPUSH
70886: LD_INT 1
70888: PPUSH
70889: CALL_OW 483
// end ;
70893: GO 70753
70895: POP
70896: POP
// end ;
70897: PPOPN 5
70899: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70900: LD_EXP 68
70904: PUSH
70905: LD_EXP 103
70909: AND
70910: IFFALSE 71004
70912: GO 70914
70914: DISABLE
70915: LD_INT 0
70917: PPUSH
70918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70919: LD_ADDR_VAR 0 2
70923: PUSH
70924: LD_INT 22
70926: PUSH
70927: LD_OWVAR 2
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 32
70938: PUSH
70939: LD_INT 1
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 21
70948: PUSH
70949: LD_INT 2
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: LIST
70960: PPUSH
70961: CALL_OW 69
70965: ST_TO_ADDR
// if not tmp then
70966: LD_VAR 0 2
70970: NOT
70971: IFFALSE 70975
// exit ;
70973: GO 71004
// for i in tmp do
70975: LD_ADDR_VAR 0 1
70979: PUSH
70980: LD_VAR 0 2
70984: PUSH
70985: FOR_IN
70986: IFFALSE 71002
// SetFuel ( i , 0 ) ;
70988: LD_VAR 0 1
70992: PPUSH
70993: LD_INT 0
70995: PPUSH
70996: CALL_OW 240
71000: GO 70985
71002: POP
71003: POP
// end ;
71004: PPOPN 2
71006: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71007: LD_EXP 68
71011: PUSH
71012: LD_EXP 104
71016: AND
71017: IFFALSE 71083
71019: GO 71021
71021: DISABLE
71022: LD_INT 0
71024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71025: LD_ADDR_VAR 0 1
71029: PUSH
71030: LD_INT 22
71032: PUSH
71033: LD_OWVAR 2
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 30
71044: PUSH
71045: LD_INT 29
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PPUSH
71056: CALL_OW 69
71060: ST_TO_ADDR
// if not tmp then
71061: LD_VAR 0 1
71065: NOT
71066: IFFALSE 71070
// exit ;
71068: GO 71083
// DestroyUnit ( tmp [ 1 ] ) ;
71070: LD_VAR 0 1
71074: PUSH
71075: LD_INT 1
71077: ARRAY
71078: PPUSH
71079: CALL_OW 65
// end ;
71083: PPOPN 1
71085: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71086: LD_EXP 68
71090: PUSH
71091: LD_EXP 106
71095: AND
71096: IFFALSE 71225
71098: GO 71100
71100: DISABLE
71101: LD_INT 0
71103: PPUSH
// begin uc_side := 0 ;
71104: LD_ADDR_OWVAR 20
71108: PUSH
71109: LD_INT 0
71111: ST_TO_ADDR
// uc_nation := nation_arabian ;
71112: LD_ADDR_OWVAR 21
71116: PUSH
71117: LD_INT 2
71119: ST_TO_ADDR
// hc_gallery :=  ;
71120: LD_ADDR_OWVAR 33
71124: PUSH
71125: LD_STRING 
71127: ST_TO_ADDR
// hc_name :=  ;
71128: LD_ADDR_OWVAR 26
71132: PUSH
71133: LD_STRING 
71135: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71136: LD_INT 1
71138: PPUSH
71139: LD_INT 11
71141: PPUSH
71142: LD_INT 10
71144: PPUSH
71145: CALL_OW 380
// un := CreateHuman ;
71149: LD_ADDR_VAR 0 1
71153: PUSH
71154: CALL_OW 44
71158: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71159: LD_VAR 0 1
71163: PPUSH
71164: LD_INT 1
71166: PPUSH
71167: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71171: LD_INT 35
71173: PPUSH
71174: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71178: LD_VAR 0 1
71182: PPUSH
71183: LD_INT 22
71185: PUSH
71186: LD_OWVAR 2
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PPUSH
71195: CALL_OW 69
71199: PPUSH
71200: LD_VAR 0 1
71204: PPUSH
71205: CALL_OW 74
71209: PPUSH
71210: CALL_OW 115
// until IsDead ( un ) ;
71214: LD_VAR 0 1
71218: PPUSH
71219: CALL_OW 301
71223: IFFALSE 71171
// end ;
71225: PPOPN 1
71227: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71228: LD_EXP 68
71232: PUSH
71233: LD_EXP 108
71237: AND
71238: IFFALSE 71250
71240: GO 71242
71242: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71243: LD_STRING earthquake(getX(game), 0, 32)
71245: PPUSH
71246: CALL_OW 559
71250: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71251: LD_EXP 68
71255: PUSH
71256: LD_EXP 109
71260: AND
71261: IFFALSE 71352
71263: GO 71265
71265: DISABLE
71266: LD_INT 0
71268: PPUSH
// begin enable ;
71269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71270: LD_ADDR_VAR 0 1
71274: PUSH
71275: LD_INT 22
71277: PUSH
71278: LD_OWVAR 2
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 21
71289: PUSH
71290: LD_INT 2
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 33
71299: PUSH
71300: LD_INT 3
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: LIST
71311: PPUSH
71312: CALL_OW 69
71316: ST_TO_ADDR
// if not tmp then
71317: LD_VAR 0 1
71321: NOT
71322: IFFALSE 71326
// exit ;
71324: GO 71352
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71326: LD_VAR 0 1
71330: PUSH
71331: LD_INT 1
71333: PPUSH
71334: LD_VAR 0 1
71338: PPUSH
71339: CALL_OW 12
71343: ARRAY
71344: PPUSH
71345: LD_INT 1
71347: PPUSH
71348: CALL_OW 234
// end ;
71352: PPOPN 1
71354: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71355: LD_EXP 68
71359: PUSH
71360: LD_EXP 110
71364: AND
71365: IFFALSE 71506
71367: GO 71369
71369: DISABLE
71370: LD_INT 0
71372: PPUSH
71373: PPUSH
71374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71375: LD_ADDR_VAR 0 3
71379: PUSH
71380: LD_INT 22
71382: PUSH
71383: LD_OWVAR 2
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 25
71394: PUSH
71395: LD_INT 1
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PPUSH
71406: CALL_OW 69
71410: ST_TO_ADDR
// if not tmp then
71411: LD_VAR 0 3
71415: NOT
71416: IFFALSE 71420
// exit ;
71418: GO 71506
// un := tmp [ rand ( 1 , tmp ) ] ;
71420: LD_ADDR_VAR 0 2
71424: PUSH
71425: LD_VAR 0 3
71429: PUSH
71430: LD_INT 1
71432: PPUSH
71433: LD_VAR 0 3
71437: PPUSH
71438: CALL_OW 12
71442: ARRAY
71443: ST_TO_ADDR
// if Crawls ( un ) then
71444: LD_VAR 0 2
71448: PPUSH
71449: CALL_OW 318
71453: IFFALSE 71464
// ComWalk ( un ) ;
71455: LD_VAR 0 2
71459: PPUSH
71460: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71464: LD_VAR 0 2
71468: PPUSH
71469: LD_INT 9
71471: PPUSH
71472: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71476: LD_INT 28
71478: PPUSH
71479: LD_OWVAR 2
71483: PPUSH
71484: LD_INT 2
71486: PPUSH
71487: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71491: LD_INT 29
71493: PPUSH
71494: LD_OWVAR 2
71498: PPUSH
71499: LD_INT 2
71501: PPUSH
71502: CALL_OW 322
// end ;
71506: PPOPN 3
71508: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71509: LD_EXP 68
71513: PUSH
71514: LD_EXP 111
71518: AND
71519: IFFALSE 71630
71521: GO 71523
71523: DISABLE
71524: LD_INT 0
71526: PPUSH
71527: PPUSH
71528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71529: LD_ADDR_VAR 0 3
71533: PUSH
71534: LD_INT 22
71536: PUSH
71537: LD_OWVAR 2
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 25
71548: PUSH
71549: LD_INT 1
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PPUSH
71560: CALL_OW 69
71564: ST_TO_ADDR
// if not tmp then
71565: LD_VAR 0 3
71569: NOT
71570: IFFALSE 71574
// exit ;
71572: GO 71630
// un := tmp [ rand ( 1 , tmp ) ] ;
71574: LD_ADDR_VAR 0 2
71578: PUSH
71579: LD_VAR 0 3
71583: PUSH
71584: LD_INT 1
71586: PPUSH
71587: LD_VAR 0 3
71591: PPUSH
71592: CALL_OW 12
71596: ARRAY
71597: ST_TO_ADDR
// if Crawls ( un ) then
71598: LD_VAR 0 2
71602: PPUSH
71603: CALL_OW 318
71607: IFFALSE 71618
// ComWalk ( un ) ;
71609: LD_VAR 0 2
71613: PPUSH
71614: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71618: LD_VAR 0 2
71622: PPUSH
71623: LD_INT 8
71625: PPUSH
71626: CALL_OW 336
// end ;
71630: PPOPN 3
71632: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71633: LD_EXP 68
71637: PUSH
71638: LD_EXP 112
71642: AND
71643: IFFALSE 71787
71645: GO 71647
71647: DISABLE
71648: LD_INT 0
71650: PPUSH
71651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71652: LD_ADDR_VAR 0 2
71656: PUSH
71657: LD_INT 22
71659: PUSH
71660: LD_OWVAR 2
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 21
71671: PUSH
71672: LD_INT 2
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 2
71681: PUSH
71682: LD_INT 34
71684: PUSH
71685: LD_INT 12
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 34
71694: PUSH
71695: LD_INT 51
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 34
71704: PUSH
71705: LD_INT 32
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: LIST
71722: PPUSH
71723: CALL_OW 69
71727: ST_TO_ADDR
// if not tmp then
71728: LD_VAR 0 2
71732: NOT
71733: IFFALSE 71737
// exit ;
71735: GO 71787
// for i in tmp do
71737: LD_ADDR_VAR 0 1
71741: PUSH
71742: LD_VAR 0 2
71746: PUSH
71747: FOR_IN
71748: IFFALSE 71785
// if GetCargo ( i , mat_artifact ) = 0 then
71750: LD_VAR 0 1
71754: PPUSH
71755: LD_INT 4
71757: PPUSH
71758: CALL_OW 289
71762: PUSH
71763: LD_INT 0
71765: EQUAL
71766: IFFALSE 71783
// SetCargo ( i , mat_siberit , 100 ) ;
71768: LD_VAR 0 1
71772: PPUSH
71773: LD_INT 3
71775: PPUSH
71776: LD_INT 100
71778: PPUSH
71779: CALL_OW 290
71783: GO 71747
71785: POP
71786: POP
// end ;
71787: PPOPN 2
71789: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71790: LD_EXP 68
71794: PUSH
71795: LD_EXP 113
71799: AND
71800: IFFALSE 71983
71802: GO 71804
71804: DISABLE
71805: LD_INT 0
71807: PPUSH
71808: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71809: LD_ADDR_VAR 0 2
71813: PUSH
71814: LD_INT 22
71816: PUSH
71817: LD_OWVAR 2
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PPUSH
71826: CALL_OW 69
71830: ST_TO_ADDR
// if not tmp then
71831: LD_VAR 0 2
71835: NOT
71836: IFFALSE 71840
// exit ;
71838: GO 71983
// for i := 1 to 2 do
71840: LD_ADDR_VAR 0 1
71844: PUSH
71845: DOUBLE
71846: LD_INT 1
71848: DEC
71849: ST_TO_ADDR
71850: LD_INT 2
71852: PUSH
71853: FOR_TO
71854: IFFALSE 71981
// begin uc_side := your_side ;
71856: LD_ADDR_OWVAR 20
71860: PUSH
71861: LD_OWVAR 2
71865: ST_TO_ADDR
// uc_nation := nation_american ;
71866: LD_ADDR_OWVAR 21
71870: PUSH
71871: LD_INT 1
71873: ST_TO_ADDR
// vc_chassis := us_morphling ;
71874: LD_ADDR_OWVAR 37
71878: PUSH
71879: LD_INT 5
71881: ST_TO_ADDR
// vc_engine := engine_siberite ;
71882: LD_ADDR_OWVAR 39
71886: PUSH
71887: LD_INT 3
71889: ST_TO_ADDR
// vc_control := control_computer ;
71890: LD_ADDR_OWVAR 38
71894: PUSH
71895: LD_INT 3
71897: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71898: LD_ADDR_OWVAR 40
71902: PUSH
71903: LD_INT 10
71905: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71906: LD_VAR 0 2
71910: PUSH
71911: LD_INT 1
71913: ARRAY
71914: PPUSH
71915: CALL_OW 310
71919: NOT
71920: IFFALSE 71967
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71922: CALL_OW 45
71926: PPUSH
71927: LD_VAR 0 2
71931: PUSH
71932: LD_INT 1
71934: ARRAY
71935: PPUSH
71936: CALL_OW 250
71940: PPUSH
71941: LD_VAR 0 2
71945: PUSH
71946: LD_INT 1
71948: ARRAY
71949: PPUSH
71950: CALL_OW 251
71954: PPUSH
71955: LD_INT 12
71957: PPUSH
71958: LD_INT 1
71960: PPUSH
71961: CALL_OW 50
71965: GO 71979
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71967: CALL_OW 45
71971: PPUSH
71972: LD_INT 1
71974: PPUSH
71975: CALL_OW 51
// end ;
71979: GO 71853
71981: POP
71982: POP
// end ;
71983: PPOPN 2
71985: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71986: LD_EXP 68
71990: PUSH
71991: LD_EXP 114
71995: AND
71996: IFFALSE 72218
71998: GO 72000
72000: DISABLE
72001: LD_INT 0
72003: PPUSH
72004: PPUSH
72005: PPUSH
72006: PPUSH
72007: PPUSH
72008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72009: LD_ADDR_VAR 0 6
72013: PUSH
72014: LD_INT 22
72016: PUSH
72017: LD_OWVAR 2
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 21
72028: PUSH
72029: LD_INT 1
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 3
72038: PUSH
72039: LD_INT 23
72041: PUSH
72042: LD_INT 0
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: LIST
72057: PPUSH
72058: CALL_OW 69
72062: ST_TO_ADDR
// if not tmp then
72063: LD_VAR 0 6
72067: NOT
72068: IFFALSE 72072
// exit ;
72070: GO 72218
// s1 := rand ( 1 , 4 ) ;
72072: LD_ADDR_VAR 0 2
72076: PUSH
72077: LD_INT 1
72079: PPUSH
72080: LD_INT 4
72082: PPUSH
72083: CALL_OW 12
72087: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72088: LD_ADDR_VAR 0 4
72092: PUSH
72093: LD_VAR 0 6
72097: PUSH
72098: LD_INT 1
72100: ARRAY
72101: PPUSH
72102: LD_VAR 0 2
72106: PPUSH
72107: CALL_OW 259
72111: ST_TO_ADDR
// if s1 = 1 then
72112: LD_VAR 0 2
72116: PUSH
72117: LD_INT 1
72119: EQUAL
72120: IFFALSE 72140
// s2 := rand ( 2 , 4 ) else
72122: LD_ADDR_VAR 0 3
72126: PUSH
72127: LD_INT 2
72129: PPUSH
72130: LD_INT 4
72132: PPUSH
72133: CALL_OW 12
72137: ST_TO_ADDR
72138: GO 72148
// s2 := 1 ;
72140: LD_ADDR_VAR 0 3
72144: PUSH
72145: LD_INT 1
72147: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72148: LD_ADDR_VAR 0 5
72152: PUSH
72153: LD_VAR 0 6
72157: PUSH
72158: LD_INT 1
72160: ARRAY
72161: PPUSH
72162: LD_VAR 0 3
72166: PPUSH
72167: CALL_OW 259
72171: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72172: LD_VAR 0 6
72176: PUSH
72177: LD_INT 1
72179: ARRAY
72180: PPUSH
72181: LD_VAR 0 2
72185: PPUSH
72186: LD_VAR 0 5
72190: PPUSH
72191: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72195: LD_VAR 0 6
72199: PUSH
72200: LD_INT 1
72202: ARRAY
72203: PPUSH
72204: LD_VAR 0 3
72208: PPUSH
72209: LD_VAR 0 4
72213: PPUSH
72214: CALL_OW 237
// end ;
72218: PPOPN 6
72220: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72221: LD_EXP 68
72225: PUSH
72226: LD_EXP 115
72230: AND
72231: IFFALSE 72310
72233: GO 72235
72235: DISABLE
72236: LD_INT 0
72238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72239: LD_ADDR_VAR 0 1
72243: PUSH
72244: LD_INT 22
72246: PUSH
72247: LD_OWVAR 2
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 30
72258: PUSH
72259: LD_INT 3
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PPUSH
72270: CALL_OW 69
72274: ST_TO_ADDR
// if not tmp then
72275: LD_VAR 0 1
72279: NOT
72280: IFFALSE 72284
// exit ;
72282: GO 72310
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72284: LD_VAR 0 1
72288: PUSH
72289: LD_INT 1
72291: PPUSH
72292: LD_VAR 0 1
72296: PPUSH
72297: CALL_OW 12
72301: ARRAY
72302: PPUSH
72303: LD_INT 1
72305: PPUSH
72306: CALL_OW 234
// end ;
72310: PPOPN 1
72312: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72313: LD_EXP 68
72317: PUSH
72318: LD_EXP 116
72322: AND
72323: IFFALSE 72435
72325: GO 72327
72327: DISABLE
72328: LD_INT 0
72330: PPUSH
72331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72332: LD_ADDR_VAR 0 2
72336: PUSH
72337: LD_INT 22
72339: PUSH
72340: LD_OWVAR 2
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 2
72351: PUSH
72352: LD_INT 30
72354: PUSH
72355: LD_INT 27
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 30
72364: PUSH
72365: LD_INT 26
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 30
72374: PUSH
72375: LD_INT 28
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: PPUSH
72392: CALL_OW 69
72396: ST_TO_ADDR
// if not tmp then
72397: LD_VAR 0 2
72401: NOT
72402: IFFALSE 72406
// exit ;
72404: GO 72435
// for i in tmp do
72406: LD_ADDR_VAR 0 1
72410: PUSH
72411: LD_VAR 0 2
72415: PUSH
72416: FOR_IN
72417: IFFALSE 72433
// SetLives ( i , 1 ) ;
72419: LD_VAR 0 1
72423: PPUSH
72424: LD_INT 1
72426: PPUSH
72427: CALL_OW 234
72431: GO 72416
72433: POP
72434: POP
// end ;
72435: PPOPN 2
72437: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72438: LD_EXP 68
72442: PUSH
72443: LD_EXP 117
72447: AND
72448: IFFALSE 72722
72450: GO 72452
72452: DISABLE
72453: LD_INT 0
72455: PPUSH
72456: PPUSH
72457: PPUSH
// begin i := rand ( 1 , 7 ) ;
72458: LD_ADDR_VAR 0 1
72462: PUSH
72463: LD_INT 1
72465: PPUSH
72466: LD_INT 7
72468: PPUSH
72469: CALL_OW 12
72473: ST_TO_ADDR
// case i of 1 :
72474: LD_VAR 0 1
72478: PUSH
72479: LD_INT 1
72481: DOUBLE
72482: EQUAL
72483: IFTRUE 72487
72485: GO 72497
72487: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72488: LD_STRING earthquake(getX(game), 0, 32)
72490: PPUSH
72491: CALL_OW 559
72495: GO 72722
72497: LD_INT 2
72499: DOUBLE
72500: EQUAL
72501: IFTRUE 72505
72503: GO 72519
72505: POP
// begin ToLua ( displayStucuk(); ) ;
72506: LD_STRING displayStucuk();
72508: PPUSH
72509: CALL_OW 559
// ResetFog ;
72513: CALL_OW 335
// end ; 3 :
72517: GO 72722
72519: LD_INT 3
72521: DOUBLE
72522: EQUAL
72523: IFTRUE 72527
72525: GO 72631
72527: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72528: LD_ADDR_VAR 0 2
72532: PUSH
72533: LD_INT 22
72535: PUSH
72536: LD_OWVAR 2
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 25
72547: PUSH
72548: LD_INT 1
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PPUSH
72559: CALL_OW 69
72563: ST_TO_ADDR
// if not tmp then
72564: LD_VAR 0 2
72568: NOT
72569: IFFALSE 72573
// exit ;
72571: GO 72722
// un := tmp [ rand ( 1 , tmp ) ] ;
72573: LD_ADDR_VAR 0 3
72577: PUSH
72578: LD_VAR 0 2
72582: PUSH
72583: LD_INT 1
72585: PPUSH
72586: LD_VAR 0 2
72590: PPUSH
72591: CALL_OW 12
72595: ARRAY
72596: ST_TO_ADDR
// if Crawls ( un ) then
72597: LD_VAR 0 3
72601: PPUSH
72602: CALL_OW 318
72606: IFFALSE 72617
// ComWalk ( un ) ;
72608: LD_VAR 0 3
72612: PPUSH
72613: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72617: LD_VAR 0 3
72621: PPUSH
72622: LD_INT 8
72624: PPUSH
72625: CALL_OW 336
// end ; 4 :
72629: GO 72722
72631: LD_INT 4
72633: DOUBLE
72634: EQUAL
72635: IFTRUE 72639
72637: GO 72700
72639: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72640: LD_ADDR_VAR 0 2
72644: PUSH
72645: LD_INT 22
72647: PUSH
72648: LD_OWVAR 2
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 30
72659: PUSH
72660: LD_INT 29
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PPUSH
72671: CALL_OW 69
72675: ST_TO_ADDR
// if not tmp then
72676: LD_VAR 0 2
72680: NOT
72681: IFFALSE 72685
// exit ;
72683: GO 72722
// DestroyUnit ( tmp [ 1 ] ) ;
72685: LD_VAR 0 2
72689: PUSH
72690: LD_INT 1
72692: ARRAY
72693: PPUSH
72694: CALL_OW 65
// end ; 5 .. 7 :
72698: GO 72722
72700: LD_INT 5
72702: DOUBLE
72703: GREATEREQUAL
72704: IFFALSE 72712
72706: LD_INT 7
72708: DOUBLE
72709: LESSEQUAL
72710: IFTRUE 72714
72712: GO 72721
72714: POP
// StreamSibBomb ; end ;
72715: CALL 68972 0 0
72719: GO 72722
72721: POP
// end ;
72722: PPOPN 3
72724: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72725: LD_EXP 68
72729: PUSH
72730: LD_EXP 118
72734: AND
72735: IFFALSE 72891
72737: GO 72739
72739: DISABLE
72740: LD_INT 0
72742: PPUSH
72743: PPUSH
72744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72745: LD_ADDR_VAR 0 2
72749: PUSH
72750: LD_INT 81
72752: PUSH
72753: LD_OWVAR 2
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 2
72764: PUSH
72765: LD_INT 21
72767: PUSH
72768: LD_INT 1
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: LD_INT 21
72777: PUSH
72778: LD_INT 2
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: LIST
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PPUSH
72794: CALL_OW 69
72798: ST_TO_ADDR
// if not tmp then
72799: LD_VAR 0 2
72803: NOT
72804: IFFALSE 72808
// exit ;
72806: GO 72891
// p := 0 ;
72808: LD_ADDR_VAR 0 3
72812: PUSH
72813: LD_INT 0
72815: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72816: LD_INT 35
72818: PPUSH
72819: CALL_OW 67
// p := p + 1 ;
72823: LD_ADDR_VAR 0 3
72827: PUSH
72828: LD_VAR 0 3
72832: PUSH
72833: LD_INT 1
72835: PLUS
72836: ST_TO_ADDR
// for i in tmp do
72837: LD_ADDR_VAR 0 1
72841: PUSH
72842: LD_VAR 0 2
72846: PUSH
72847: FOR_IN
72848: IFFALSE 72879
// if GetLives ( i ) < 1000 then
72850: LD_VAR 0 1
72854: PPUSH
72855: CALL_OW 256
72859: PUSH
72860: LD_INT 1000
72862: LESS
72863: IFFALSE 72877
// SetLives ( i , 1000 ) ;
72865: LD_VAR 0 1
72869: PPUSH
72870: LD_INT 1000
72872: PPUSH
72873: CALL_OW 234
72877: GO 72847
72879: POP
72880: POP
// until p > 20 ;
72881: LD_VAR 0 3
72885: PUSH
72886: LD_INT 20
72888: GREATER
72889: IFFALSE 72816
// end ;
72891: PPOPN 3
72893: END
// every 0 0$1 trigger StreamModeActive and sTime do
72894: LD_EXP 68
72898: PUSH
72899: LD_EXP 119
72903: AND
72904: IFFALSE 72939
72906: GO 72908
72908: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72909: LD_INT 28
72911: PPUSH
72912: LD_OWVAR 2
72916: PPUSH
72917: LD_INT 2
72919: PPUSH
72920: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72924: LD_INT 30
72926: PPUSH
72927: LD_OWVAR 2
72931: PPUSH
72932: LD_INT 2
72934: PPUSH
72935: CALL_OW 322
// end ;
72939: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
72940: LD_EXP 68
72944: PUSH
72945: LD_EXP 120
72949: AND
72950: IFFALSE 73071
72952: GO 72954
72954: DISABLE
72955: LD_INT 0
72957: PPUSH
72958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72959: LD_ADDR_VAR 0 2
72963: PUSH
72964: LD_INT 22
72966: PUSH
72967: LD_OWVAR 2
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: LD_INT 21
72978: PUSH
72979: LD_INT 1
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PUSH
72986: LD_INT 3
72988: PUSH
72989: LD_INT 23
72991: PUSH
72992: LD_INT 0
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: LIST
73007: PPUSH
73008: CALL_OW 69
73012: ST_TO_ADDR
// if not tmp then
73013: LD_VAR 0 2
73017: NOT
73018: IFFALSE 73022
// exit ;
73020: GO 73071
// for i in tmp do
73022: LD_ADDR_VAR 0 1
73026: PUSH
73027: LD_VAR 0 2
73031: PUSH
73032: FOR_IN
73033: IFFALSE 73069
// begin if Crawls ( i ) then
73035: LD_VAR 0 1
73039: PPUSH
73040: CALL_OW 318
73044: IFFALSE 73055
// ComWalk ( i ) ;
73046: LD_VAR 0 1
73050: PPUSH
73051: CALL_OW 138
// SetClass ( i , 2 ) ;
73055: LD_VAR 0 1
73059: PPUSH
73060: LD_INT 2
73062: PPUSH
73063: CALL_OW 336
// end ;
73067: GO 73032
73069: POP
73070: POP
// end ;
73071: PPOPN 2
73073: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73074: LD_EXP 68
73078: PUSH
73079: LD_EXP 121
73083: AND
73084: IFFALSE 73365
73086: GO 73088
73088: DISABLE
73089: LD_INT 0
73091: PPUSH
73092: PPUSH
73093: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73094: LD_OWVAR 2
73098: PPUSH
73099: LD_INT 9
73101: PPUSH
73102: LD_INT 1
73104: PPUSH
73105: LD_INT 1
73107: PPUSH
73108: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73112: LD_INT 9
73114: PPUSH
73115: LD_OWVAR 2
73119: PPUSH
73120: CALL_OW 343
// uc_side := 9 ;
73124: LD_ADDR_OWVAR 20
73128: PUSH
73129: LD_INT 9
73131: ST_TO_ADDR
// uc_nation := 2 ;
73132: LD_ADDR_OWVAR 21
73136: PUSH
73137: LD_INT 2
73139: ST_TO_ADDR
// hc_name := Dark Warrior ;
73140: LD_ADDR_OWVAR 26
73144: PUSH
73145: LD_STRING Dark Warrior
73147: ST_TO_ADDR
// hc_gallery :=  ;
73148: LD_ADDR_OWVAR 33
73152: PUSH
73153: LD_STRING 
73155: ST_TO_ADDR
// hc_noskilllimit := true ;
73156: LD_ADDR_OWVAR 76
73160: PUSH
73161: LD_INT 1
73163: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73164: LD_ADDR_OWVAR 31
73168: PUSH
73169: LD_INT 30
73171: PUSH
73172: LD_INT 30
73174: PUSH
73175: LD_INT 30
73177: PUSH
73178: LD_INT 30
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: ST_TO_ADDR
// un := CreateHuman ;
73187: LD_ADDR_VAR 0 3
73191: PUSH
73192: CALL_OW 44
73196: ST_TO_ADDR
// hc_noskilllimit := false ;
73197: LD_ADDR_OWVAR 76
73201: PUSH
73202: LD_INT 0
73204: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73205: LD_VAR 0 3
73209: PPUSH
73210: LD_INT 1
73212: PPUSH
73213: CALL_OW 51
// p := 0 ;
73217: LD_ADDR_VAR 0 2
73221: PUSH
73222: LD_INT 0
73224: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73225: LD_INT 35
73227: PPUSH
73228: CALL_OW 67
// p := p + 1 ;
73232: LD_ADDR_VAR 0 2
73236: PUSH
73237: LD_VAR 0 2
73241: PUSH
73242: LD_INT 1
73244: PLUS
73245: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73246: LD_VAR 0 3
73250: PPUSH
73251: CALL_OW 256
73255: PUSH
73256: LD_INT 1000
73258: LESS
73259: IFFALSE 73273
// SetLives ( un , 1000 ) ;
73261: LD_VAR 0 3
73265: PPUSH
73266: LD_INT 1000
73268: PPUSH
73269: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73273: LD_VAR 0 3
73277: PPUSH
73278: LD_INT 81
73280: PUSH
73281: LD_OWVAR 2
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 91
73292: PUSH
73293: LD_VAR 0 3
73297: PUSH
73298: LD_INT 30
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: LIST
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PPUSH
73310: CALL_OW 69
73314: PPUSH
73315: LD_VAR 0 3
73319: PPUSH
73320: CALL_OW 74
73324: PPUSH
73325: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
73329: LD_VAR 0 2
73333: PUSH
73334: LD_INT 60
73336: GREATER
73337: PUSH
73338: LD_VAR 0 3
73342: PPUSH
73343: CALL_OW 301
73347: OR
73348: IFFALSE 73225
// if un then
73350: LD_VAR 0 3
73354: IFFALSE 73365
// RemoveUnit ( un ) ;
73356: LD_VAR 0 3
73360: PPUSH
73361: CALL_OW 64
// end ;
73365: PPOPN 3
73367: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73368: LD_INT 0
73370: PPUSH
// case cmd of 301 :
73371: LD_VAR 0 1
73375: PUSH
73376: LD_INT 301
73378: DOUBLE
73379: EQUAL
73380: IFTRUE 73384
73382: GO 73416
73384: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73385: LD_VAR 0 6
73389: PPUSH
73390: LD_VAR 0 7
73394: PPUSH
73395: LD_VAR 0 8
73399: PPUSH
73400: LD_VAR 0 4
73404: PPUSH
73405: LD_VAR 0 5
73409: PPUSH
73410: CALL 74617 0 5
73414: GO 73537
73416: LD_INT 302
73418: DOUBLE
73419: EQUAL
73420: IFTRUE 73424
73422: GO 73461
73424: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73425: LD_VAR 0 6
73429: PPUSH
73430: LD_VAR 0 7
73434: PPUSH
73435: LD_VAR 0 8
73439: PPUSH
73440: LD_VAR 0 9
73444: PPUSH
73445: LD_VAR 0 4
73449: PPUSH
73450: LD_VAR 0 5
73454: PPUSH
73455: CALL 74708 0 6
73459: GO 73537
73461: LD_INT 303
73463: DOUBLE
73464: EQUAL
73465: IFTRUE 73469
73467: GO 73506
73469: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73470: LD_VAR 0 6
73474: PPUSH
73475: LD_VAR 0 7
73479: PPUSH
73480: LD_VAR 0 8
73484: PPUSH
73485: LD_VAR 0 9
73489: PPUSH
73490: LD_VAR 0 4
73494: PPUSH
73495: LD_VAR 0 5
73499: PPUSH
73500: CALL 73542 0 6
73504: GO 73537
73506: LD_INT 304
73508: DOUBLE
73509: EQUAL
73510: IFTRUE 73514
73512: GO 73536
73514: POP
// hHackTeleport ( unit , x , y ) ; end ;
73515: LD_VAR 0 2
73519: PPUSH
73520: LD_VAR 0 4
73524: PPUSH
73525: LD_VAR 0 5
73529: PPUSH
73530: CALL 75301 0 3
73534: GO 73537
73536: POP
// end ;
73537: LD_VAR 0 12
73541: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73542: LD_INT 0
73544: PPUSH
73545: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73546: LD_VAR 0 1
73550: PUSH
73551: LD_INT 1
73553: LESS
73554: PUSH
73555: LD_VAR 0 1
73559: PUSH
73560: LD_INT 3
73562: GREATER
73563: OR
73564: PUSH
73565: LD_VAR 0 5
73569: PPUSH
73570: LD_VAR 0 6
73574: PPUSH
73575: CALL_OW 428
73579: OR
73580: IFFALSE 73584
// exit ;
73582: GO 74304
// uc_side := your_side ;
73584: LD_ADDR_OWVAR 20
73588: PUSH
73589: LD_OWVAR 2
73593: ST_TO_ADDR
// uc_nation := nation ;
73594: LD_ADDR_OWVAR 21
73598: PUSH
73599: LD_VAR 0 1
73603: ST_TO_ADDR
// bc_level = 1 ;
73604: LD_ADDR_OWVAR 43
73608: PUSH
73609: LD_INT 1
73611: ST_TO_ADDR
// case btype of 1 :
73612: LD_VAR 0 2
73616: PUSH
73617: LD_INT 1
73619: DOUBLE
73620: EQUAL
73621: IFTRUE 73625
73623: GO 73636
73625: POP
// bc_type := b_depot ; 2 :
73626: LD_ADDR_OWVAR 42
73630: PUSH
73631: LD_INT 0
73633: ST_TO_ADDR
73634: GO 74248
73636: LD_INT 2
73638: DOUBLE
73639: EQUAL
73640: IFTRUE 73644
73642: GO 73655
73644: POP
// bc_type := b_warehouse ; 3 :
73645: LD_ADDR_OWVAR 42
73649: PUSH
73650: LD_INT 1
73652: ST_TO_ADDR
73653: GO 74248
73655: LD_INT 3
73657: DOUBLE
73658: EQUAL
73659: IFTRUE 73663
73661: GO 73674
73663: POP
// bc_type := b_lab ; 4 .. 9 :
73664: LD_ADDR_OWVAR 42
73668: PUSH
73669: LD_INT 6
73671: ST_TO_ADDR
73672: GO 74248
73674: LD_INT 4
73676: DOUBLE
73677: GREATEREQUAL
73678: IFFALSE 73686
73680: LD_INT 9
73682: DOUBLE
73683: LESSEQUAL
73684: IFTRUE 73688
73686: GO 73740
73688: POP
// begin bc_type := b_lab_half ;
73689: LD_ADDR_OWVAR 42
73693: PUSH
73694: LD_INT 7
73696: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73697: LD_ADDR_OWVAR 44
73701: PUSH
73702: LD_INT 10
73704: PUSH
73705: LD_INT 11
73707: PUSH
73708: LD_INT 12
73710: PUSH
73711: LD_INT 15
73713: PUSH
73714: LD_INT 14
73716: PUSH
73717: LD_INT 13
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: PUSH
73728: LD_VAR 0 2
73732: PUSH
73733: LD_INT 3
73735: MINUS
73736: ARRAY
73737: ST_TO_ADDR
// end ; 10 .. 13 :
73738: GO 74248
73740: LD_INT 10
73742: DOUBLE
73743: GREATEREQUAL
73744: IFFALSE 73752
73746: LD_INT 13
73748: DOUBLE
73749: LESSEQUAL
73750: IFTRUE 73754
73752: GO 73831
73754: POP
// begin bc_type := b_lab_full ;
73755: LD_ADDR_OWVAR 42
73759: PUSH
73760: LD_INT 8
73762: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
73763: LD_ADDR_OWVAR 44
73767: PUSH
73768: LD_INT 10
73770: PUSH
73771: LD_INT 12
73773: PUSH
73774: LD_INT 14
73776: PUSH
73777: LD_INT 13
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: PUSH
73786: LD_VAR 0 2
73790: PUSH
73791: LD_INT 9
73793: MINUS
73794: ARRAY
73795: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
73796: LD_ADDR_OWVAR 45
73800: PUSH
73801: LD_INT 11
73803: PUSH
73804: LD_INT 15
73806: PUSH
73807: LD_INT 12
73809: PUSH
73810: LD_INT 15
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: PUSH
73819: LD_VAR 0 2
73823: PUSH
73824: LD_INT 9
73826: MINUS
73827: ARRAY
73828: ST_TO_ADDR
// end ; 14 :
73829: GO 74248
73831: LD_INT 14
73833: DOUBLE
73834: EQUAL
73835: IFTRUE 73839
73837: GO 73850
73839: POP
// bc_type := b_workshop ; 15 :
73840: LD_ADDR_OWVAR 42
73844: PUSH
73845: LD_INT 2
73847: ST_TO_ADDR
73848: GO 74248
73850: LD_INT 15
73852: DOUBLE
73853: EQUAL
73854: IFTRUE 73858
73856: GO 73869
73858: POP
// bc_type := b_factory ; 16 :
73859: LD_ADDR_OWVAR 42
73863: PUSH
73864: LD_INT 3
73866: ST_TO_ADDR
73867: GO 74248
73869: LD_INT 16
73871: DOUBLE
73872: EQUAL
73873: IFTRUE 73877
73875: GO 73888
73877: POP
// bc_type := b_ext_gun ; 17 :
73878: LD_ADDR_OWVAR 42
73882: PUSH
73883: LD_INT 17
73885: ST_TO_ADDR
73886: GO 74248
73888: LD_INT 17
73890: DOUBLE
73891: EQUAL
73892: IFTRUE 73896
73894: GO 73924
73896: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
73897: LD_ADDR_OWVAR 42
73901: PUSH
73902: LD_INT 19
73904: PUSH
73905: LD_INT 23
73907: PUSH
73908: LD_INT 19
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: LIST
73915: PUSH
73916: LD_VAR 0 1
73920: ARRAY
73921: ST_TO_ADDR
73922: GO 74248
73924: LD_INT 18
73926: DOUBLE
73927: EQUAL
73928: IFTRUE 73932
73930: GO 73943
73932: POP
// bc_type := b_ext_radar ; 19 :
73933: LD_ADDR_OWVAR 42
73937: PUSH
73938: LD_INT 20
73940: ST_TO_ADDR
73941: GO 74248
73943: LD_INT 19
73945: DOUBLE
73946: EQUAL
73947: IFTRUE 73951
73949: GO 73962
73951: POP
// bc_type := b_ext_radio ; 20 :
73952: LD_ADDR_OWVAR 42
73956: PUSH
73957: LD_INT 22
73959: ST_TO_ADDR
73960: GO 74248
73962: LD_INT 20
73964: DOUBLE
73965: EQUAL
73966: IFTRUE 73970
73968: GO 73981
73970: POP
// bc_type := b_ext_siberium ; 21 :
73971: LD_ADDR_OWVAR 42
73975: PUSH
73976: LD_INT 21
73978: ST_TO_ADDR
73979: GO 74248
73981: LD_INT 21
73983: DOUBLE
73984: EQUAL
73985: IFTRUE 73989
73987: GO 74000
73989: POP
// bc_type := b_ext_computer ; 22 :
73990: LD_ADDR_OWVAR 42
73994: PUSH
73995: LD_INT 24
73997: ST_TO_ADDR
73998: GO 74248
74000: LD_INT 22
74002: DOUBLE
74003: EQUAL
74004: IFTRUE 74008
74006: GO 74019
74008: POP
// bc_type := b_ext_track ; 23 :
74009: LD_ADDR_OWVAR 42
74013: PUSH
74014: LD_INT 16
74016: ST_TO_ADDR
74017: GO 74248
74019: LD_INT 23
74021: DOUBLE
74022: EQUAL
74023: IFTRUE 74027
74025: GO 74038
74027: POP
// bc_type := b_ext_laser ; 24 :
74028: LD_ADDR_OWVAR 42
74032: PUSH
74033: LD_INT 25
74035: ST_TO_ADDR
74036: GO 74248
74038: LD_INT 24
74040: DOUBLE
74041: EQUAL
74042: IFTRUE 74046
74044: GO 74057
74046: POP
// bc_type := b_control_tower ; 25 :
74047: LD_ADDR_OWVAR 42
74051: PUSH
74052: LD_INT 36
74054: ST_TO_ADDR
74055: GO 74248
74057: LD_INT 25
74059: DOUBLE
74060: EQUAL
74061: IFTRUE 74065
74063: GO 74076
74065: POP
// bc_type := b_breastwork ; 26 :
74066: LD_ADDR_OWVAR 42
74070: PUSH
74071: LD_INT 31
74073: ST_TO_ADDR
74074: GO 74248
74076: LD_INT 26
74078: DOUBLE
74079: EQUAL
74080: IFTRUE 74084
74082: GO 74095
74084: POP
// bc_type := b_bunker ; 27 :
74085: LD_ADDR_OWVAR 42
74089: PUSH
74090: LD_INT 32
74092: ST_TO_ADDR
74093: GO 74248
74095: LD_INT 27
74097: DOUBLE
74098: EQUAL
74099: IFTRUE 74103
74101: GO 74114
74103: POP
// bc_type := b_turret ; 28 :
74104: LD_ADDR_OWVAR 42
74108: PUSH
74109: LD_INT 33
74111: ST_TO_ADDR
74112: GO 74248
74114: LD_INT 28
74116: DOUBLE
74117: EQUAL
74118: IFTRUE 74122
74120: GO 74133
74122: POP
// bc_type := b_armoury ; 29 :
74123: LD_ADDR_OWVAR 42
74127: PUSH
74128: LD_INT 4
74130: ST_TO_ADDR
74131: GO 74248
74133: LD_INT 29
74135: DOUBLE
74136: EQUAL
74137: IFTRUE 74141
74139: GO 74152
74141: POP
// bc_type := b_barracks ; 30 :
74142: LD_ADDR_OWVAR 42
74146: PUSH
74147: LD_INT 5
74149: ST_TO_ADDR
74150: GO 74248
74152: LD_INT 30
74154: DOUBLE
74155: EQUAL
74156: IFTRUE 74160
74158: GO 74171
74160: POP
// bc_type := b_solar_power ; 31 :
74161: LD_ADDR_OWVAR 42
74165: PUSH
74166: LD_INT 27
74168: ST_TO_ADDR
74169: GO 74248
74171: LD_INT 31
74173: DOUBLE
74174: EQUAL
74175: IFTRUE 74179
74177: GO 74190
74179: POP
// bc_type := b_oil_power ; 32 :
74180: LD_ADDR_OWVAR 42
74184: PUSH
74185: LD_INT 26
74187: ST_TO_ADDR
74188: GO 74248
74190: LD_INT 32
74192: DOUBLE
74193: EQUAL
74194: IFTRUE 74198
74196: GO 74209
74198: POP
// bc_type := b_siberite_power ; 33 :
74199: LD_ADDR_OWVAR 42
74203: PUSH
74204: LD_INT 28
74206: ST_TO_ADDR
74207: GO 74248
74209: LD_INT 33
74211: DOUBLE
74212: EQUAL
74213: IFTRUE 74217
74215: GO 74228
74217: POP
// bc_type := b_oil_mine ; 34 :
74218: LD_ADDR_OWVAR 42
74222: PUSH
74223: LD_INT 29
74225: ST_TO_ADDR
74226: GO 74248
74228: LD_INT 34
74230: DOUBLE
74231: EQUAL
74232: IFTRUE 74236
74234: GO 74247
74236: POP
// bc_type := b_siberite_mine ; end ;
74237: LD_ADDR_OWVAR 42
74241: PUSH
74242: LD_INT 30
74244: ST_TO_ADDR
74245: GO 74248
74247: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74248: LD_ADDR_VAR 0 8
74252: PUSH
74253: LD_VAR 0 5
74257: PPUSH
74258: LD_VAR 0 6
74262: PPUSH
74263: LD_VAR 0 3
74267: PPUSH
74268: CALL_OW 47
74272: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74273: LD_OWVAR 42
74277: PUSH
74278: LD_INT 32
74280: PUSH
74281: LD_INT 33
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: IN
74288: IFFALSE 74304
// PlaceWeaponTurret ( b , weapon ) ;
74290: LD_VAR 0 8
74294: PPUSH
74295: LD_VAR 0 4
74299: PPUSH
74300: CALL_OW 431
// end ;
74304: LD_VAR 0 7
74308: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74309: LD_INT 0
74311: PPUSH
74312: PPUSH
74313: PPUSH
74314: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74315: LD_ADDR_VAR 0 4
74319: PUSH
74320: LD_INT 22
74322: PUSH
74323: LD_OWVAR 2
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: PUSH
74332: LD_INT 2
74334: PUSH
74335: LD_INT 30
74337: PUSH
74338: LD_INT 0
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PUSH
74345: LD_INT 30
74347: PUSH
74348: LD_INT 1
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: LIST
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PPUSH
74364: CALL_OW 69
74368: ST_TO_ADDR
// if not tmp then
74369: LD_VAR 0 4
74373: NOT
74374: IFFALSE 74378
// exit ;
74376: GO 74437
// for i in tmp do
74378: LD_ADDR_VAR 0 2
74382: PUSH
74383: LD_VAR 0 4
74387: PUSH
74388: FOR_IN
74389: IFFALSE 74435
// for j = 1 to 3 do
74391: LD_ADDR_VAR 0 3
74395: PUSH
74396: DOUBLE
74397: LD_INT 1
74399: DEC
74400: ST_TO_ADDR
74401: LD_INT 3
74403: PUSH
74404: FOR_TO
74405: IFFALSE 74431
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74407: LD_VAR 0 2
74411: PPUSH
74412: CALL_OW 274
74416: PPUSH
74417: LD_VAR 0 3
74421: PPUSH
74422: LD_INT 99999
74424: PPUSH
74425: CALL_OW 277
74429: GO 74404
74431: POP
74432: POP
74433: GO 74388
74435: POP
74436: POP
// end ;
74437: LD_VAR 0 1
74441: RET
// export function hHackSetLevel10 ; var i , j ; begin
74442: LD_INT 0
74444: PPUSH
74445: PPUSH
74446: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74447: LD_ADDR_VAR 0 2
74451: PUSH
74452: LD_INT 21
74454: PUSH
74455: LD_INT 1
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: PPUSH
74462: CALL_OW 69
74466: PUSH
74467: FOR_IN
74468: IFFALSE 74520
// if IsSelected ( i ) then
74470: LD_VAR 0 2
74474: PPUSH
74475: CALL_OW 306
74479: IFFALSE 74518
// begin for j := 1 to 4 do
74481: LD_ADDR_VAR 0 3
74485: PUSH
74486: DOUBLE
74487: LD_INT 1
74489: DEC
74490: ST_TO_ADDR
74491: LD_INT 4
74493: PUSH
74494: FOR_TO
74495: IFFALSE 74516
// SetSkill ( i , j , 10 ) ;
74497: LD_VAR 0 2
74501: PPUSH
74502: LD_VAR 0 3
74506: PPUSH
74507: LD_INT 10
74509: PPUSH
74510: CALL_OW 237
74514: GO 74494
74516: POP
74517: POP
// end ;
74518: GO 74467
74520: POP
74521: POP
// end ;
74522: LD_VAR 0 1
74526: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74527: LD_INT 0
74529: PPUSH
74530: PPUSH
74531: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74532: LD_ADDR_VAR 0 2
74536: PUSH
74537: LD_INT 22
74539: PUSH
74540: LD_OWVAR 2
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 21
74551: PUSH
74552: LD_INT 1
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PPUSH
74563: CALL_OW 69
74567: PUSH
74568: FOR_IN
74569: IFFALSE 74610
// begin for j := 1 to 4 do
74571: LD_ADDR_VAR 0 3
74575: PUSH
74576: DOUBLE
74577: LD_INT 1
74579: DEC
74580: ST_TO_ADDR
74581: LD_INT 4
74583: PUSH
74584: FOR_TO
74585: IFFALSE 74606
// SetSkill ( i , j , 10 ) ;
74587: LD_VAR 0 2
74591: PPUSH
74592: LD_VAR 0 3
74596: PPUSH
74597: LD_INT 10
74599: PPUSH
74600: CALL_OW 237
74604: GO 74584
74606: POP
74607: POP
// end ;
74608: GO 74568
74610: POP
74611: POP
// end ;
74612: LD_VAR 0 1
74616: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74617: LD_INT 0
74619: PPUSH
// uc_side := your_side ;
74620: LD_ADDR_OWVAR 20
74624: PUSH
74625: LD_OWVAR 2
74629: ST_TO_ADDR
// uc_nation := nation ;
74630: LD_ADDR_OWVAR 21
74634: PUSH
74635: LD_VAR 0 1
74639: ST_TO_ADDR
// InitHc ;
74640: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74644: LD_INT 0
74646: PPUSH
74647: LD_VAR 0 2
74651: PPUSH
74652: LD_VAR 0 3
74656: PPUSH
74657: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74661: LD_VAR 0 4
74665: PPUSH
74666: LD_VAR 0 5
74670: PPUSH
74671: CALL_OW 428
74675: PUSH
74676: LD_INT 0
74678: EQUAL
74679: IFFALSE 74703
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74681: CALL_OW 44
74685: PPUSH
74686: LD_VAR 0 4
74690: PPUSH
74691: LD_VAR 0 5
74695: PPUSH
74696: LD_INT 1
74698: PPUSH
74699: CALL_OW 48
// end ;
74703: LD_VAR 0 6
74707: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74708: LD_INT 0
74710: PPUSH
74711: PPUSH
// uc_side := your_side ;
74712: LD_ADDR_OWVAR 20
74716: PUSH
74717: LD_OWVAR 2
74721: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74722: LD_VAR 0 1
74726: PUSH
74727: LD_INT 1
74729: PUSH
74730: LD_INT 2
74732: PUSH
74733: LD_INT 3
74735: PUSH
74736: LD_INT 4
74738: PUSH
74739: LD_INT 5
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: IN
74749: IFFALSE 74761
// uc_nation := nation_american else
74751: LD_ADDR_OWVAR 21
74755: PUSH
74756: LD_INT 1
74758: ST_TO_ADDR
74759: GO 74804
// if chassis in [ 11 , 12 , 13 , 14 ] then
74761: LD_VAR 0 1
74765: PUSH
74766: LD_INT 11
74768: PUSH
74769: LD_INT 12
74771: PUSH
74772: LD_INT 13
74774: PUSH
74775: LD_INT 14
74777: PUSH
74778: EMPTY
74779: LIST
74780: LIST
74781: LIST
74782: LIST
74783: IN
74784: IFFALSE 74796
// uc_nation := nation_arabian else
74786: LD_ADDR_OWVAR 21
74790: PUSH
74791: LD_INT 2
74793: ST_TO_ADDR
74794: GO 74804
// uc_nation := nation_russian ;
74796: LD_ADDR_OWVAR 21
74800: PUSH
74801: LD_INT 3
74803: ST_TO_ADDR
// vc_chassis := chassis ;
74804: LD_ADDR_OWVAR 37
74808: PUSH
74809: LD_VAR 0 1
74813: ST_TO_ADDR
// vc_engine := engine ;
74814: LD_ADDR_OWVAR 39
74818: PUSH
74819: LD_VAR 0 2
74823: ST_TO_ADDR
// vc_control := control ;
74824: LD_ADDR_OWVAR 38
74828: PUSH
74829: LD_VAR 0 3
74833: ST_TO_ADDR
// vc_weapon := weapon ;
74834: LD_ADDR_OWVAR 40
74838: PUSH
74839: LD_VAR 0 4
74843: ST_TO_ADDR
// un := CreateVehicle ;
74844: LD_ADDR_VAR 0 8
74848: PUSH
74849: CALL_OW 45
74853: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
74854: LD_VAR 0 8
74858: PPUSH
74859: LD_INT 0
74861: PPUSH
74862: LD_INT 5
74864: PPUSH
74865: CALL_OW 12
74869: PPUSH
74870: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
74874: LD_VAR 0 8
74878: PPUSH
74879: LD_VAR 0 5
74883: PPUSH
74884: LD_VAR 0 6
74888: PPUSH
74889: LD_INT 1
74891: PPUSH
74892: CALL_OW 48
// end ;
74896: LD_VAR 0 7
74900: RET
// export hInvincible ; every 1 do
74901: GO 74903
74903: DISABLE
// hInvincible := [ ] ;
74904: LD_ADDR_EXP 122
74908: PUSH
74909: EMPTY
74910: ST_TO_ADDR
74911: END
// every 10 do var i ;
74912: GO 74914
74914: DISABLE
74915: LD_INT 0
74917: PPUSH
// begin enable ;
74918: ENABLE
// if not hInvincible then
74919: LD_EXP 122
74923: NOT
74924: IFFALSE 74928
// exit ;
74926: GO 74972
// for i in hInvincible do
74928: LD_ADDR_VAR 0 1
74932: PUSH
74933: LD_EXP 122
74937: PUSH
74938: FOR_IN
74939: IFFALSE 74970
// if GetLives ( i ) < 1000 then
74941: LD_VAR 0 1
74945: PPUSH
74946: CALL_OW 256
74950: PUSH
74951: LD_INT 1000
74953: LESS
74954: IFFALSE 74968
// SetLives ( i , 1000 ) ;
74956: LD_VAR 0 1
74960: PPUSH
74961: LD_INT 1000
74963: PPUSH
74964: CALL_OW 234
74968: GO 74938
74970: POP
74971: POP
// end ;
74972: PPOPN 1
74974: END
// export function hHackInvincible ; var i ; begin
74975: LD_INT 0
74977: PPUSH
74978: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
74979: LD_ADDR_VAR 0 2
74983: PUSH
74984: LD_INT 2
74986: PUSH
74987: LD_INT 21
74989: PUSH
74990: LD_INT 1
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: PUSH
74997: LD_INT 21
74999: PUSH
75000: LD_INT 2
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: LIST
75011: PPUSH
75012: CALL_OW 69
75016: PUSH
75017: FOR_IN
75018: IFFALSE 75079
// if IsSelected ( i ) then
75020: LD_VAR 0 2
75024: PPUSH
75025: CALL_OW 306
75029: IFFALSE 75077
// begin if i in hInvincible then
75031: LD_VAR 0 2
75035: PUSH
75036: LD_EXP 122
75040: IN
75041: IFFALSE 75061
// hInvincible := hInvincible diff i else
75043: LD_ADDR_EXP 122
75047: PUSH
75048: LD_EXP 122
75052: PUSH
75053: LD_VAR 0 2
75057: DIFF
75058: ST_TO_ADDR
75059: GO 75077
// hInvincible := hInvincible union i ;
75061: LD_ADDR_EXP 122
75065: PUSH
75066: LD_EXP 122
75070: PUSH
75071: LD_VAR 0 2
75075: UNION
75076: ST_TO_ADDR
// end ;
75077: GO 75017
75079: POP
75080: POP
// end ;
75081: LD_VAR 0 1
75085: RET
// export function hHackInvisible ; var i , j ; begin
75086: LD_INT 0
75088: PPUSH
75089: PPUSH
75090: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75091: LD_ADDR_VAR 0 2
75095: PUSH
75096: LD_INT 21
75098: PUSH
75099: LD_INT 1
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PPUSH
75106: CALL_OW 69
75110: PUSH
75111: FOR_IN
75112: IFFALSE 75136
// if IsSelected ( i ) then
75114: LD_VAR 0 2
75118: PPUSH
75119: CALL_OW 306
75123: IFFALSE 75134
// ComForceInvisible ( i ) ;
75125: LD_VAR 0 2
75129: PPUSH
75130: CALL_OW 496
75134: GO 75111
75136: POP
75137: POP
// end ;
75138: LD_VAR 0 1
75142: RET
// export function hHackChangeYourSide ; begin
75143: LD_INT 0
75145: PPUSH
// if your_side = 8 then
75146: LD_OWVAR 2
75150: PUSH
75151: LD_INT 8
75153: EQUAL
75154: IFFALSE 75166
// your_side := 0 else
75156: LD_ADDR_OWVAR 2
75160: PUSH
75161: LD_INT 0
75163: ST_TO_ADDR
75164: GO 75180
// your_side := your_side + 1 ;
75166: LD_ADDR_OWVAR 2
75170: PUSH
75171: LD_OWVAR 2
75175: PUSH
75176: LD_INT 1
75178: PLUS
75179: ST_TO_ADDR
// end ;
75180: LD_VAR 0 1
75184: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75185: LD_INT 0
75187: PPUSH
75188: PPUSH
75189: PPUSH
// for i in all_units do
75190: LD_ADDR_VAR 0 2
75194: PUSH
75195: LD_OWVAR 3
75199: PUSH
75200: FOR_IN
75201: IFFALSE 75279
// if IsSelected ( i ) then
75203: LD_VAR 0 2
75207: PPUSH
75208: CALL_OW 306
75212: IFFALSE 75277
// begin j := GetSide ( i ) ;
75214: LD_ADDR_VAR 0 3
75218: PUSH
75219: LD_VAR 0 2
75223: PPUSH
75224: CALL_OW 255
75228: ST_TO_ADDR
// if j = 8 then
75229: LD_VAR 0 3
75233: PUSH
75234: LD_INT 8
75236: EQUAL
75237: IFFALSE 75249
// j := 0 else
75239: LD_ADDR_VAR 0 3
75243: PUSH
75244: LD_INT 0
75246: ST_TO_ADDR
75247: GO 75263
// j := j + 1 ;
75249: LD_ADDR_VAR 0 3
75253: PUSH
75254: LD_VAR 0 3
75258: PUSH
75259: LD_INT 1
75261: PLUS
75262: ST_TO_ADDR
// SetSide ( i , j ) ;
75263: LD_VAR 0 2
75267: PPUSH
75268: LD_VAR 0 3
75272: PPUSH
75273: CALL_OW 235
// end ;
75277: GO 75200
75279: POP
75280: POP
// end ;
75281: LD_VAR 0 1
75285: RET
// export function hHackFog ; begin
75286: LD_INT 0
75288: PPUSH
// FogOff ( true ) ;
75289: LD_INT 1
75291: PPUSH
75292: CALL_OW 344
// end ;
75296: LD_VAR 0 1
75300: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75301: LD_INT 0
75303: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75304: LD_VAR 0 1
75308: PPUSH
75309: LD_VAR 0 2
75313: PPUSH
75314: LD_VAR 0 3
75318: PPUSH
75319: LD_INT 1
75321: PPUSH
75322: LD_INT 1
75324: PPUSH
75325: CALL_OW 483
// CenterOnXY ( x , y ) ;
75329: LD_VAR 0 2
75333: PPUSH
75334: LD_VAR 0 3
75338: PPUSH
75339: CALL_OW 84
// end ; end_of_file
75343: LD_VAR 0 4
75347: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
75348: LD_INT 0
75350: PPUSH
// ar_miner := 81 ;
75351: LD_ADDR_EXP 130
75355: PUSH
75356: LD_INT 81
75358: ST_TO_ADDR
// ar_crane := 88 ;
75359: LD_ADDR_EXP 129
75363: PUSH
75364: LD_INT 88
75366: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
75367: LD_ADDR_EXP 124
75371: PUSH
75372: LD_INT 89
75374: ST_TO_ADDR
// us_hack := 99 ;
75375: LD_ADDR_EXP 125
75379: PUSH
75380: LD_INT 99
75382: ST_TO_ADDR
// us_artillery := 97 ;
75383: LD_ADDR_EXP 126
75387: PUSH
75388: LD_INT 97
75390: ST_TO_ADDR
// ar_bio_bomb := 91 ;
75391: LD_ADDR_EXP 127
75395: PUSH
75396: LD_INT 91
75398: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
75399: LD_ADDR_EXP 128
75403: PUSH
75404: LD_INT 92
75406: ST_TO_ADDR
// ru_radar := 98 ;
75407: LD_ADDR_EXP 123
75411: PUSH
75412: LD_INT 98
75414: ST_TO_ADDR
// tech_Artillery := 80 ;
75415: LD_ADDR_EXP 131
75419: PUSH
75420: LD_INT 80
75422: ST_TO_ADDR
// tech_RadMat := 81 ;
75423: LD_ADDR_EXP 132
75427: PUSH
75428: LD_INT 81
75430: ST_TO_ADDR
// tech_BasicTools := 82 ;
75431: LD_ADDR_EXP 133
75435: PUSH
75436: LD_INT 82
75438: ST_TO_ADDR
// tech_Cargo := 83 ;
75439: LD_ADDR_EXP 134
75443: PUSH
75444: LD_INT 83
75446: ST_TO_ADDR
// tech_Track := 84 ;
75447: LD_ADDR_EXP 135
75451: PUSH
75452: LD_INT 84
75454: ST_TO_ADDR
// tech_Crane := 85 ;
75455: LD_ADDR_EXP 136
75459: PUSH
75460: LD_INT 85
75462: ST_TO_ADDR
// tech_Bulldozer := 86 ;
75463: LD_ADDR_EXP 137
75467: PUSH
75468: LD_INT 86
75470: ST_TO_ADDR
// tech_Hovercraft := 87 ;
75471: LD_ADDR_EXP 138
75475: PUSH
75476: LD_INT 87
75478: ST_TO_ADDR
// end ;
75479: LD_VAR 0 1
75483: RET
// every 1 do
75484: GO 75486
75486: DISABLE
// InitGlobalVariables ; end_of_file
75487: CALL 75348 0 0
75491: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75492: LD_VAR 0 1
75496: PUSH
75497: LD_INT 200
75499: DOUBLE
75500: GREATEREQUAL
75501: IFFALSE 75509
75503: LD_INT 299
75505: DOUBLE
75506: LESSEQUAL
75507: IFTRUE 75511
75509: GO 75543
75511: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75512: LD_VAR 0 1
75516: PPUSH
75517: LD_VAR 0 2
75521: PPUSH
75522: LD_VAR 0 3
75526: PPUSH
75527: LD_VAR 0 4
75531: PPUSH
75532: LD_VAR 0 5
75536: PPUSH
75537: CALL 58306 0 5
75541: GO 75620
75543: LD_INT 300
75545: DOUBLE
75546: GREATEREQUAL
75547: IFFALSE 75555
75549: LD_INT 399
75551: DOUBLE
75552: LESSEQUAL
75553: IFTRUE 75557
75555: GO 75619
75557: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75558: LD_VAR 0 1
75562: PPUSH
75563: LD_VAR 0 2
75567: PPUSH
75568: LD_VAR 0 3
75572: PPUSH
75573: LD_VAR 0 4
75577: PPUSH
75578: LD_VAR 0 5
75582: PPUSH
75583: LD_VAR 0 6
75587: PPUSH
75588: LD_VAR 0 7
75592: PPUSH
75593: LD_VAR 0 8
75597: PPUSH
75598: LD_VAR 0 9
75602: PPUSH
75603: LD_VAR 0 10
75607: PPUSH
75608: LD_VAR 0 11
75612: PPUSH
75613: CALL 73368 0 11
75617: GO 75620
75619: POP
// end ;
75620: PPOPN 11
75622: END
