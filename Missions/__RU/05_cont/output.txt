// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; export buildedLab ; export achievement_DestroyedHovercrafts ; export achievement_CollectedCrates ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 250 0 0
// omarStatus = 0 ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// stevensStatus = 0 ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// labDestroyed = 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  48: LD_ADDR_EXP 5
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  55: LD_ADDR_EXP 6
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  62: LD_ADDR_EXP 4
  66: PUSH
  67: LD_STRING 05_TanksIntro_1
  69: PPUSH
  70: EMPTY
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// actionTime = 0 0$00 ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  85: LD_ADDR_EXP 10
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
  93: LD_ADDR_EXP 11
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// sawArabianBase = false ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// sawApeman = false ;
 109: LD_ADDR_EXP 9
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// stevensPlaced = false ;
 117: LD_ADDR_EXP 14
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// stevensFollow = false ;
 125: LD_ADDR_EXP 15
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// stevensDepot = false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// stevensWasInDepot = false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// stevensCanExitMap = false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// cratesSpawned = 0 ;
 165: LD_ADDR_EXP 22
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// fastBreakthrough = false ;
 173: LD_ADDR_EXP 23
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// finishMissionBool = false ;
 181: LD_ADDR_EXP 24
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// buildedLab = false ;
 189: LD_ADDR_EXP 25
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// omarCanExitMap = false ;
 197: LD_ADDR_EXP 20
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// arabianCanExitMap = false ;
 205: LD_ADDR_EXP 21
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// achievement_DestroyedHovercrafts = 0 ;
 213: LD_ADDR_EXP 26
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// achievement_CollectedCrates = false ;
 221: LD_ADDR_EXP 27
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// PrepareRussians ;
 229: CALL 921 0 0
// PrepareArabians ;
 233: CALL 1668 0 0
// Nef_PrepareNature ;
 237: CALL 20050 0 0
// MissionIntro ;
 241: CALL 3006 0 0
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function InitMapConfig ; begin
 250: LD_INT 0
 252: PPUSH
// BaseMapConfig ;
 253: CALL 266 0 0
// MissionMapConfig ;
 257: CALL 356 0 0
// end ;
 261: LD_VAR 0 1
 265: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 266: LD_INT 0
 268: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 269: LD_ADDR_EXP 28
 273: PUSH
 274: LD_INT 4
 276: PUSH
 277: LD_INT 3
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 296: LD_ADDR_EXP 29
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 2
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: ST_TO_ADDR
// animalsAgression = 0 ;
 319: LD_ADDR_EXP 30
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// debugMode = 0 ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// missionPrefix = 05_ ;
 335: LD_ADDR_EXP 31
 339: PUSH
 340: LD_STRING 05_
 342: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 343: LD_ADDR_EXP 32
 347: PUSH
 348: LD_STRING 04_
 350: ST_TO_ADDR
// end ;
 351: LD_VAR 0 1
 355: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 356: LD_INT 0
 358: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 , 5 ] [ Difficulty ] ;
 359: LD_ADDR_EXP 34
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 3
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: LD_INT 5
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: PUSH
 382: LD_OWVAR 67
 386: ARRAY
 387: ST_TO_ADDR
// arabBreakthrough = [ 70 70$0 , 65 65$0 , 60 60$0 , 55 55$0 ] [ Difficulty ] ;
 388: LD_ADDR_EXP 35
 392: PUSH
 393: LD_INT 147000
 395: PUSH
 396: LD_INT 136500
 398: PUSH
 399: LD_INT 126000
 401: PUSH
 402: LD_INT 115500
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_OWVAR 67
 415: ARRAY
 416: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 417: LD_ADDR_EXP 36
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: LD_INT 1
 427: PUSH
 428: LD_INT 6
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: ST_TO_ADDR
// arabianPatrolVehiclesAmount = 1 ;
 440: LD_ADDR_EXP 37
 444: PUSH
 445: LD_INT 1
 447: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 , 3 ] [ Difficulty ] ;
 448: LD_ADDR_EXP 38
 452: PUSH
 453: LD_INT 2
 455: PUSH
 456: LD_INT 3
 458: PUSH
 459: LD_INT 3
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: PUSH
 471: LD_OWVAR 67
 475: ARRAY
 476: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 477: LD_ADDR_EXP 39
 481: PUSH
 482: LD_INT 108
 484: PUSH
 485: LD_INT 15
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 102
 494: PUSH
 495: LD_INT 45
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 65
 504: PUSH
 505: LD_INT 23
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 37
 514: PUSH
 515: LD_INT 28
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 32
 524: PUSH
 525: LD_INT 40
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 45
 534: PUSH
 535: LD_INT 74
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 69
 544: PUSH
 545: LD_INT 98
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 101
 554: PUSH
 555: LD_INT 101
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 117
 564: PUSH
 565: LD_INT 84
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: PUSH
 572: LD_INT 158
 574: PUSH
 575: LD_INT 132
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// end ;
 594: LD_VAR 0 1
 598: RET
// every 0 0$1 trigger debugMode do var i ;
 599: LD_EXP 33
 603: IFFALSE 918
 605: GO 607
 607: DISABLE
 608: LD_INT 0
 610: PPUSH
// begin enable ;
 611: ENABLE
// FogOff ( your_side ) ;
 612: LD_OWVAR 2
 616: PPUSH
 617: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 621: LD_ADDR_VAR 0 1
 625: PUSH
 626: LD_INT 22
 628: PUSH
 629: LD_OWVAR 2
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 2
 640: PUSH
 641: LD_INT 21
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 21
 653: PUSH
 654: LD_INT 2
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: LIST
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PPUSH
 670: CALL_OW 69
 674: PUSH
 675: FOR_IN
 676: IFFALSE 692
// SetLives ( i , 1000 ) ;
 678: LD_VAR 0 1
 682: PPUSH
 683: LD_INT 1000
 685: PPUSH
 686: CALL_OW 234
 690: GO 675
 692: POP
 693: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 694: LD_ADDR_VAR 0 1
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_OWVAR 2
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PPUSH
 725: CALL_OW 69
 729: PUSH
 730: FOR_IN
 731: IFFALSE 795
// begin SetSkill ( i , skill_combat , 10 ) ;
 733: LD_VAR 0 1
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 10
 743: PPUSH
 744: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 748: LD_VAR 0 1
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: LD_INT 10
 758: PPUSH
 759: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 763: LD_VAR 0 1
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: LD_INT 10
 773: PPUSH
 774: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 778: LD_VAR 0 1
 782: PPUSH
 783: LD_INT 4
 785: PPUSH
 786: LD_INT 10
 788: PPUSH
 789: CALL_OW 237
// end ;
 793: GO 730
 795: POP
 796: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 797: LD_ADDR_VAR 0 1
 801: PUSH
 802: LD_INT 22
 804: PUSH
 805: LD_OWVAR 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 2
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 0
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 30
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PPUSH
 846: CALL_OW 69
 850: PUSH
 851: FOR_IN
 852: IFFALSE 916
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 854: LD_VAR 0 1
 858: PPUSH
 859: CALL_OW 274
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_INT 9999
 869: PPUSH
 870: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 874: LD_VAR 0 1
 878: PPUSH
 879: CALL_OW 274
 883: PPUSH
 884: LD_INT 2
 886: PPUSH
 887: LD_INT 9999
 889: PPUSH
 890: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 274
 903: PPUSH
 904: LD_INT 3
 906: PPUSH
 907: LD_INT 9999
 909: PPUSH
 910: CALL_OW 277
// end ;
 914: GO 851
 916: POP
 917: POP
// end ; end_of_file
 918: PPOPN 1
 920: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 921: LD_INT 0
 923: PPUSH
// PrepareHeroes ;
 924: CALL 933 0 0
// end ;
 928: LD_VAR 0 1
 932: RET
// function PrepareHeroes ; var i , car ; begin
 933: LD_INT 0
 935: PPUSH
 936: PPUSH
 937: PPUSH
// ruCars = [ ] ;
 938: LD_ADDR_EXP 49
 942: PUSH
 943: EMPTY
 944: ST_TO_ADDR
// uc_side = 3 ;
 945: LD_ADDR_OWVAR 20
 949: PUSH
 950: LD_INT 3
 952: ST_TO_ADDR
// uc_nation = 3 ;
 953: LD_ADDR_OWVAR 21
 957: PUSH
 958: LD_INT 3
 960: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 961: LD_ADDR_EXP 40
 965: PUSH
 966: LD_STRING Burlak
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: LD_INT 3
 974: PPUSH
 975: CALL 8546 0 3
 979: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 980: LD_ADDR_EXP 45
 984: PUSH
 985: LD_STRING Titov
 987: PPUSH
 988: LD_INT 0
 990: PPUSH
 991: LD_INT 1
 993: PPUSH
 994: CALL 8546 0 3
 998: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 999: LD_ADDR_EXP 46
1003: PUSH
1004: LD_STRING Dolgov
1006: PPUSH
1007: LD_INT 0
1009: PPUSH
1010: LD_INT 4
1012: PPUSH
1013: CALL 8546 0 3
1017: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
1018: LD_ADDR_EXP 47
1022: PUSH
1023: LD_STRING Lipshchin
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: CALL 8546 0 3
1036: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1037: LD_ADDR_EXP 41
1041: PUSH
1042: LD_STRING Karamazov
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_INT 2
1050: PPUSH
1051: CALL 8546 0 3
1055: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1056: LD_ADDR_EXP 42
1060: PUSH
1061: LD_STRING Petrovova
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: CALL 8546 0 3
1074: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1075: LD_ADDR_EXP 43
1079: PUSH
1080: LD_STRING Gleb
1082: PPUSH
1083: LD_INT 0
1085: PPUSH
1086: LD_INT 1
1088: PPUSH
1089: CALL 8546 0 3
1093: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1094: LD_ADDR_EXP 44
1098: PUSH
1099: LD_STRING Petrosyan
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: LD_INT 4
1107: PPUSH
1108: CALL 8546 0 3
1112: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1113: LD_ADDR_EXP 48
1117: PUSH
1118: LD_STRING Platonov
1120: PPUSH
1121: LD_INT 0
1123: PPUSH
1124: LD_INT 0
1126: PPUSH
1127: CALL 8546 0 3
1131: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1132: LD_ADDR_VAR 0 2
1136: PUSH
1137: DOUBLE
1138: LD_INT 1
1140: DEC
1141: ST_TO_ADDR
1142: LD_EXP 4
1146: PUSH
1147: FOR_TO
1148: IFFALSE 1526
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1150: LD_ADDR_OWVAR 37
1154: PUSH
1155: LD_EXP 4
1159: PUSH
1160: LD_VAR 0 2
1164: ARRAY
1165: PUSH
1166: LD_INT 1
1168: ARRAY
1169: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1170: LD_ADDR_OWVAR 39
1174: PUSH
1175: LD_EXP 4
1179: PUSH
1180: LD_VAR 0 2
1184: ARRAY
1185: PUSH
1186: LD_INT 2
1188: ARRAY
1189: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1190: LD_ADDR_OWVAR 38
1194: PUSH
1195: LD_EXP 4
1199: PUSH
1200: LD_VAR 0 2
1204: ARRAY
1205: PUSH
1206: LD_INT 3
1208: ARRAY
1209: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1210: LD_ADDR_OWVAR 40
1214: PUSH
1215: LD_EXP 4
1219: PUSH
1220: LD_VAR 0 2
1224: ARRAY
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1230: LD_ADDR_OWVAR 24
1234: PUSH
1235: LD_INT 3
1237: PPUSH
1238: LD_INT 4
1240: PPUSH
1241: CALL_OW 12
1245: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1246: LD_ADDR_OWVAR 41
1250: PUSH
1251: LD_INT 25
1253: PPUSH
1254: LD_INT 40
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
// car := CreateVehicle ;
1262: LD_ADDR_VAR 0 3
1266: PUSH
1267: CALL_OW 45
1271: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1272: LD_ADDR_EXP 49
1276: PUSH
1277: LD_EXP 49
1281: PUSH
1282: LD_VAR 0 3
1286: ADD
1287: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1288: LD_EXP 4
1292: PUSH
1293: LD_VAR 0 2
1297: ARRAY
1298: PUSH
1299: LD_INT 5
1301: ARRAY
1302: PUSH
1303: LD_STRING Bur
1305: DOUBLE
1306: EQUAL
1307: IFTRUE 1311
1309: GO 1328
1311: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1312: LD_EXP 40
1316: PPUSH
1317: LD_VAR 0 3
1321: PPUSH
1322: CALL_OW 52
1326: GO 1504
1328: LD_STRING Kar
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1353
1336: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1337: LD_EXP 41
1341: PPUSH
1342: LD_VAR 0 3
1346: PPUSH
1347: CALL_OW 52
1351: GO 1504
1353: LD_STRING Ptr
1355: DOUBLE
1356: EQUAL
1357: IFTRUE 1361
1359: GO 1378
1361: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1362: LD_EXP 42
1366: PPUSH
1367: LD_VAR 0 3
1371: PPUSH
1372: CALL_OW 52
1376: GO 1504
1378: LD_STRING Glb
1380: DOUBLE
1381: EQUAL
1382: IFTRUE 1386
1384: GO 1403
1386: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1387: LD_EXP 43
1391: PPUSH
1392: LD_VAR 0 3
1396: PPUSH
1397: CALL_OW 52
1401: GO 1504
1403: LD_STRING Pet
1405: DOUBLE
1406: EQUAL
1407: IFTRUE 1411
1409: GO 1428
1411: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1412: LD_EXP 44
1416: PPUSH
1417: LD_VAR 0 3
1421: PPUSH
1422: CALL_OW 52
1426: GO 1504
1428: LD_STRING Dol
1430: DOUBLE
1431: EQUAL
1432: IFTRUE 1436
1434: GO 1453
1436: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1437: LD_EXP 46
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: CALL_OW 52
1451: GO 1504
1453: LD_STRING Lip
1455: DOUBLE
1456: EQUAL
1457: IFTRUE 1461
1459: GO 1478
1461: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1462: LD_EXP 47
1466: PPUSH
1467: LD_VAR 0 3
1471: PPUSH
1472: CALL_OW 52
1476: GO 1504
1478: LD_STRING Tit
1480: DOUBLE
1481: EQUAL
1482: IFTRUE 1486
1484: GO 1503
1486: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1487: LD_EXP 45
1491: PPUSH
1492: LD_VAR 0 3
1496: PPUSH
1497: CALL_OW 52
1501: GO 1504
1503: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 251
1511: PPUSH
1512: LD_INT 800
1514: PPUSH
1515: CALL_OW 12
1519: PPUSH
1520: CALL_OW 234
// end ;
1524: GO 1147
1526: POP
1527: POP
// for i in ruCars do
1528: LD_ADDR_VAR 0 2
1532: PUSH
1533: LD_EXP 49
1537: PUSH
1538: FOR_IN
1539: IFFALSE 1558
// PlaceUnitArea ( i , ru_place2 , false ) ;
1541: LD_VAR 0 2
1545: PPUSH
1546: LD_INT 18
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 49
1556: GO 1538
1558: POP
1559: POP
// RevealFogArea ( 3 , co_vidi ) ;
1560: LD_INT 3
1562: PPUSH
1563: LD_INT 19
1565: PPUSH
1566: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1570: LD_EXP 49
1574: PPUSH
1575: LD_INT 3
1577: PPUSH
1578: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1582: LD_INT 4
1584: PPUSH
1585: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1589: LD_EXP 40
1593: PPUSH
1594: CALL_OW 310
1598: PPUSH
1599: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1603: LD_INT 3
1605: PPUSH
1606: LD_INT 22
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 70
1634: PUSH
1635: LD_INT 5
1637: LESS
1638: IFFALSE 1663
// begin wait ( 0 0$1 ) ;
1640: LD_INT 35
1642: PPUSH
1643: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1647: LD_EXP 40
1651: PPUSH
1652: CALL_OW 310
1656: PPUSH
1657: CALL_OW 85
// end ;
1661: GO 1603
// end ; end_of_file
1663: LD_VAR 0 1
1667: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts , arabianPatrolTroops ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1668: LD_INT 0
1670: PPUSH
// arabianUnitsInBase = [ ] ;
1671: LD_ADDR_EXP 52
1675: PUSH
1676: EMPTY
1677: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1678: LD_ADDR_EXP 54
1682: PUSH
1683: EMPTY
1684: ST_TO_ADDR
// arabianPatrolTroops = [ ] ;
1685: LD_ADDR_EXP 55
1689: PUSH
1690: EMPTY
1691: ST_TO_ADDR
// arabLeftExit = true ;
1692: LD_ADDR_EXP 56
1696: PUSH
1697: LD_INT 1
1699: ST_TO_ADDR
// PrepareHeroes ;
1700: CALL 1733 0 0
// PrepareBuildings ;
1704: CALL 1799 0 0
// PrepareUnits ;
1708: CALL 2157 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1712: LD_EXP 37
1716: PPUSH
1717: LD_INT 42
1719: PPUSH
1720: CALL 2694 0 2
// PrepareArabianHovercraft ;
1724: CALL 2853 0 0
// end ;
1728: LD_VAR 0 1
1732: RET
// function PrepareHeroes ; begin
1733: LD_INT 0
1735: PPUSH
// uc_side = 2 ;
1736: LD_ADDR_OWVAR 20
1740: PUSH
1741: LD_INT 2
1743: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1744: LD_ADDR_EXP 50
1748: PUSH
1749: LD_STRING Heike
1751: PPUSH
1752: LD_INT 0
1754: PPUSH
1755: LD_INT 0
1757: PPUSH
1758: CALL 8546 0 3
1762: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1763: LD_ADDR_EXP 51
1767: PUSH
1768: LD_STRING Omar
1770: PPUSH
1771: LD_INT 0
1773: PPUSH
1774: LD_INT 11
1776: PPUSH
1777: CALL 8546 0 3
1781: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1782: LD_EXP 51
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: CALL_OW 52
// end ;
1794: LD_VAR 0 1
1798: RET
// function PrepareBuildings ; var depot ; begin
1799: LD_INT 0
1801: PPUSH
1802: PPUSH
// uc_side = 2 ;
1803: LD_ADDR_OWVAR 20
1807: PUSH
1808: LD_INT 2
1810: ST_TO_ADDR
// uc_nation = nation_arabian ;
1811: LD_ADDR_OWVAR 21
1815: PUSH
1816: LD_INT 2
1818: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1819: LD_ADDR_OWVAR 43
1823: PUSH
1824: LD_EXP 34
1828: ST_TO_ADDR
// bc_type = b_breastwork ;
1829: LD_ADDR_OWVAR 42
1833: PUSH
1834: LD_INT 31
1836: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1837: LD_INT 118
1839: PPUSH
1840: LD_INT 63
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1850: LD_INT 120
1852: PPUSH
1853: LD_INT 66
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1863: LD_INT 123
1865: PPUSH
1866: LD_INT 73
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: CALL_OW 47
// if Difficulty = 2 then
1876: LD_OWVAR 67
1880: PUSH
1881: LD_INT 2
1883: EQUAL
1884: IFFALSE 1899
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1886: LD_INT 145
1888: PPUSH
1889: LD_INT 83
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 47
// if Difficulty >= 3 then
1899: LD_OWVAR 67
1903: PUSH
1904: LD_INT 3
1906: GREATEREQUAL
1907: IFFALSE 1935
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1909: LD_INT 145
1911: PPUSH
1912: LD_INT 83
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1922: LD_INT 151
1924: PPUSH
1925: LD_INT 81
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 47
// end ; bc_type = b_depot ;
1935: LD_ADDR_OWVAR 42
1939: PUSH
1940: LD_INT 0
1942: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1943: LD_ADDR_VAR 0 2
1947: PUSH
1948: LD_INT 124
1950: PPUSH
1951: LD_INT 60
1953: PPUSH
1954: LD_INT 2
1956: PPUSH
1957: CALL_OW 47
1961: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1962: LD_VAR 0 2
1966: PPUSH
1967: CALL_OW 274
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 3000
1977: PPUSH
1978: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1982: LD_INT 131
1984: PPUSH
1985: LD_INT 51
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: CALL_OW 441
// bc_type = b_oil_mine ;
1995: LD_ADDR_OWVAR 42
1999: PUSH
2000: LD_INT 29
2002: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
2003: LD_INT 131
2005: PPUSH
2006: LD_INT 51
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: CALL_OW 47
// case Difficulty of 1 :
2016: LD_OWVAR 67
2020: PUSH
2021: LD_INT 1
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2045
2029: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2030: LD_INT 48
2032: PPUSH
2033: LD_INT 2
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: CALL_OW 322
// end ; 2 :
2043: GO 2152
2045: LD_INT 2
2047: DOUBLE
2048: EQUAL
2049: IFTRUE 2053
2051: GO 2082
2053: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2054: LD_INT 48
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2067: LD_INT 51
2069: PPUSH
2070: LD_INT 2
2072: PPUSH
2073: LD_INT 2
2075: PPUSH
2076: CALL_OW 322
// end ; 3 .. 4 :
2080: GO 2152
2082: LD_INT 3
2084: DOUBLE
2085: GREATEREQUAL
2086: IFFALSE 2094
2088: LD_INT 4
2090: DOUBLE
2091: LESSEQUAL
2092: IFTRUE 2096
2094: GO 2151
2096: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2097: LD_INT 48
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 2
2105: PPUSH
2106: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2110: LD_INT 51
2112: PPUSH
2113: LD_INT 2
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2123: LD_INT 49
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: LD_INT 2
2131: PPUSH
2132: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2136: LD_INT 52
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: LD_INT 2
2144: PPUSH
2145: CALL_OW 322
// end ; end ;
2149: GO 2152
2151: POP
// end ;
2152: LD_VAR 0 1
2156: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2157: LD_INT 0
2159: PPUSH
2160: PPUSH
2161: PPUSH
2162: PPUSH
// uc_side = 2 ;
2163: LD_ADDR_OWVAR 20
2167: PUSH
2168: LD_INT 2
2170: ST_TO_ADDR
// uc_nation = 2 ;
2171: LD_ADDR_OWVAR 21
2175: PUSH
2176: LD_INT 2
2178: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2179: LD_ADDR_VAR 0 4
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 2
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 30
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PPUSH
2208: CALL_OW 69
2212: PUSH
2213: FOR_IN
2214: IFFALSE 2270
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2216: LD_INT 0
2218: PPUSH
2219: LD_EXP 34
2223: PPUSH
2224: CALL_OW 381
// unit = CreateHuman ;
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: CALL_OW 44
2237: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2238: LD_VAR 0 3
2242: PPUSH
2243: LD_VAR 0 4
2247: PPUSH
2248: CALL 9146 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2252: LD_ADDR_EXP 52
2256: PUSH
2257: LD_EXP 52
2261: PUSH
2262: LD_VAR 0 3
2266: ADD
2267: ST_TO_ADDR
// end ;
2268: GO 2213
2270: POP
2271: POP
// for i := 1 to arabianUnits [ 1 ] do
2272: LD_ADDR_VAR 0 2
2276: PUSH
2277: DOUBLE
2278: LD_INT 1
2280: DEC
2281: ST_TO_ADDR
2282: LD_EXP 36
2286: PUSH
2287: LD_INT 1
2289: ARRAY
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2349
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2294: LD_INT 0
2296: PPUSH
2297: LD_EXP 34
2301: PPUSH
2302: CALL_OW 381
// unit = CreateHuman ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: CALL_OW 44
2315: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2316: LD_VAR 0 3
2320: PPUSH
2321: LD_INT 38
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2331: LD_ADDR_EXP 52
2335: PUSH
2336: LD_EXP 52
2340: PUSH
2341: LD_VAR 0 3
2345: ADD
2346: ST_TO_ADDR
// end ;
2347: GO 2291
2349: POP
2350: POP
// for i := 1 to arabianUnits [ 2 ] do
2351: LD_ADDR_VAR 0 2
2355: PUSH
2356: DOUBLE
2357: LD_INT 1
2359: DEC
2360: ST_TO_ADDR
2361: LD_EXP 36
2365: PUSH
2366: LD_INT 2
2368: ARRAY
2369: PUSH
2370: FOR_TO
2371: IFFALSE 2428
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2373: LD_INT 0
2375: PPUSH
2376: LD_EXP 34
2380: PPUSH
2381: CALL_OW 382
// unit = CreateHuman ;
2385: LD_ADDR_VAR 0 3
2389: PUSH
2390: CALL_OW 44
2394: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2395: LD_VAR 0 3
2399: PPUSH
2400: LD_INT 38
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2410: LD_ADDR_EXP 52
2414: PUSH
2415: LD_EXP 52
2419: PUSH
2420: LD_VAR 0 3
2424: ADD
2425: ST_TO_ADDR
// end ;
2426: GO 2370
2428: POP
2429: POP
// for i := 1 to arabianUnits [ 3 ] do
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: DOUBLE
2436: LD_INT 1
2438: DEC
2439: ST_TO_ADDR
2440: LD_EXP 36
2444: PUSH
2445: LD_INT 3
2447: ARRAY
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2507
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2452: LD_INT 0
2454: PPUSH
2455: LD_EXP 34
2459: PPUSH
2460: CALL_OW 383
// unit = CreateHuman ;
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: CALL_OW 44
2473: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2474: LD_VAR 0 3
2478: PPUSH
2479: LD_INT 38
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2489: LD_ADDR_EXP 52
2493: PUSH
2494: LD_EXP 52
2498: PUSH
2499: LD_VAR 0 3
2503: ADD
2504: ST_TO_ADDR
// end ;
2505: GO 2449
2507: POP
2508: POP
// for i := 1 to arabianUnits [ 4 ] do
2509: LD_ADDR_VAR 0 2
2513: PUSH
2514: DOUBLE
2515: LD_INT 1
2517: DEC
2518: ST_TO_ADDR
2519: LD_EXP 36
2523: PUSH
2524: LD_INT 4
2526: ARRAY
2527: PUSH
2528: FOR_TO
2529: IFFALSE 2586
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2531: LD_INT 0
2533: PPUSH
2534: LD_EXP 34
2538: PPUSH
2539: CALL_OW 384
// unit = CreateHuman ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: CALL_OW 44
2552: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2553: LD_VAR 0 3
2557: PPUSH
2558: LD_INT 38
2560: PPUSH
2561: LD_INT 0
2563: PPUSH
2564: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2568: LD_ADDR_EXP 52
2572: PUSH
2573: LD_EXP 52
2577: PUSH
2578: LD_VAR 0 3
2582: ADD
2583: ST_TO_ADDR
// end ;
2584: GO 2528
2586: POP
2587: POP
// end ;
2588: LD_VAR 0 1
2592: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2593: LD_INT 0
2595: PPUSH
2596: PPUSH
2597: PPUSH
// uc_side = 2 ;
2598: LD_ADDR_OWVAR 20
2602: PUSH
2603: LD_INT 2
2605: ST_TO_ADDR
// uc_nation = 2 ;
2606: LD_ADDR_OWVAR 21
2610: PUSH
2611: LD_INT 2
2613: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_EXP 38
2628: PUSH
2629: FOR_TO
2630: IFFALSE 2687
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2632: LD_INT 0
2634: PPUSH
2635: LD_EXP 34
2639: PPUSH
2640: CALL_OW 381
// unit = CreateHuman ;
2644: LD_ADDR_VAR 0 3
2648: PUSH
2649: CALL_OW 44
2653: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 45
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// arabianPatrolTroops = arabianPatrolTroops ^ unit ;
2669: LD_ADDR_EXP 55
2673: PUSH
2674: LD_EXP 55
2678: PUSH
2679: LD_VAR 0 3
2683: ADD
2684: ST_TO_ADDR
// end ;
2685: GO 2629
2687: POP
2688: POP
// end ;
2689: LD_VAR 0 1
2693: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
2698: PPUSH
// uc_side = 2 ;
2699: LD_ADDR_OWVAR 20
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// uc_nation = 2 ;
2707: LD_ADDR_OWVAR 21
2711: PUSH
2712: LD_INT 2
2714: ST_TO_ADDR
// for i := 1 to amount do
2715: LD_ADDR_VAR 0 4
2719: PUSH
2720: DOUBLE
2721: LD_INT 1
2723: DEC
2724: ST_TO_ADDR
2725: LD_VAR 0 1
2729: PUSH
2730: FOR_TO
2731: IFFALSE 2846
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2733: LD_INT 14
2735: PPUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: LD_INT 26
2744: PUSH
2745: LD_INT 25
2747: PUSH
2748: LD_INT 27
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 3
2761: PPUSH
2762: CALL_OW 12
2766: ARRAY
2767: PPUSH
2768: LD_INT 100
2770: PPUSH
2771: CALL 26263 0 5
// veh = CreateVehicle ;
2775: LD_ADDR_VAR 0 5
2779: PUSH
2780: CALL_OW 45
2784: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2785: LD_ADDR_EXP 53
2789: PUSH
2790: LD_EXP 53
2794: PUSH
2795: LD_VAR 0 5
2799: ADD
2800: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2801: LD_VAR 0 5
2805: PPUSH
2806: LD_VAR 0 2
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2818: LD_INT 0
2820: PPUSH
2821: LD_EXP 34
2825: PPUSH
2826: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2830: CALL_OW 44
2834: PPUSH
2835: LD_VAR 0 5
2839: PPUSH
2840: CALL_OW 52
// end ;
2844: GO 2730
2846: POP
2847: POP
// end ;
2848: LD_VAR 0 3
2852: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2853: LD_INT 0
2855: PPUSH
2856: PPUSH
2857: PPUSH
// uc_side = 2 ;
2858: LD_ADDR_OWVAR 20
2862: PUSH
2863: LD_INT 2
2865: ST_TO_ADDR
// uc_nation = 2 ;
2866: LD_ADDR_OWVAR 21
2870: PUSH
2871: LD_INT 2
2873: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2874: LD_ADDR_VAR 0 2
2878: PUSH
2879: DOUBLE
2880: LD_INT 1
2882: DEC
2883: ST_TO_ADDR
2884: LD_EXP 37
2888: PUSH
2889: FOR_TO
2890: IFFALSE 2999
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2892: LD_INT 11
2894: PPUSH
2895: LD_INT 1
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 24
2903: PUSH
2904: LD_INT 23
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 1
2913: PPUSH
2914: LD_INT 2
2916: PPUSH
2917: CALL_OW 12
2921: ARRAY
2922: PPUSH
2923: LD_INT 100
2925: PPUSH
2926: CALL 26263 0 5
// veh = CreateVehicle ;
2930: LD_ADDR_VAR 0 3
2934: PUSH
2935: CALL_OW 45
2939: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2940: LD_ADDR_EXP 54
2944: PUSH
2945: LD_EXP 54
2949: PUSH
2950: LD_VAR 0 3
2954: ADD
2955: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2956: LD_VAR 0 3
2960: PPUSH
2961: LD_INT 47
2963: PPUSH
2964: LD_INT 0
2966: PPUSH
2967: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2971: LD_INT 0
2973: PPUSH
2974: LD_EXP 34
2978: PPUSH
2979: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2983: CALL_OW 44
2987: PPUSH
2988: LD_VAR 0 3
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2889
2999: POP
3000: POP
// end ; end_of_file
3001: LD_VAR 0 1
3005: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
3006: LD_INT 0
3008: PPUSH
3009: PPUSH
3010: PPUSH
3011: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
3012: LD_ADDR_VAR 0 3
3016: PUSH
3017: LD_INT 66
3019: PUSH
3020: LD_INT 87
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 66
3029: PUSH
3030: LD_INT 86
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 67
3039: PUSH
3040: LD_INT 86
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 69
3049: PUSH
3050: LD_INT 87
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: LD_INT 70
3059: PUSH
3060: LD_INT 88
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 71
3069: PUSH
3070: LD_INT 89
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: LD_INT 72
3079: PUSH
3080: LD_INT 90
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PUSH
3087: LD_INT 72
3089: PUSH
3090: LD_INT 91
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3107: LD_INT 280
3109: PPUSH
3110: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3114: LD_EXP 40
3118: PPUSH
3119: LD_STRING DStart-Bur-1
3121: PPUSH
3122: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3126: LD_EXP 48
3130: PPUSH
3131: LD_STRING DStart-Pla-1
3133: PPUSH
3134: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3138: LD_EXP 40
3142: PPUSH
3143: LD_STRING DStart-Bur-2
3145: PPUSH
3146: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3150: LD_EXP 48
3154: PPUSH
3155: LD_STRING DStart-Pla-2
3157: PPUSH
3158: CALL_OW 94
// x = 0 ;
3162: LD_ADDR_VAR 0 4
3166: PUSH
3167: LD_INT 0
3169: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3170: LD_ADDR_VAR 0 2
3174: PUSH
3175: LD_INT 22
3177: PUSH
3178: LD_INT 3
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 21
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PUSH
3204: FOR_IN
3205: IFFALSE 3293
// begin ComExitVehicle ( unit ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: CALL_OW 121
// wait ( 0 0$1 ) ;
3216: LD_INT 35
3218: PPUSH
3219: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3223: LD_VAR 0 2
3227: PPUSH
3228: LD_VAR 0 3
3232: PUSH
3233: LD_VAR 0 4
3237: ARRAY
3238: PUSH
3239: LD_INT 1
3241: ARRAY
3242: PPUSH
3243: LD_VAR 0 3
3247: PUSH
3248: LD_VAR 0 4
3252: ARRAY
3253: PUSH
3254: LD_INT 2
3256: ARRAY
3257: PPUSH
3258: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3262: LD_VAR 0 2
3266: PPUSH
3267: LD_INT 69
3269: PPUSH
3270: LD_INT 96
3272: PPUSH
3273: CALL_OW 178
// x = x + 1 ;
3277: LD_ADDR_VAR 0 4
3281: PUSH
3282: LD_VAR 0 4
3286: PUSH
3287: LD_INT 1
3289: PLUS
3290: ST_TO_ADDR
// end ;
3291: GO 3204
3293: POP
3294: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3295: LD_EXP 40
3299: PPUSH
3300: CALL_OW 87
// x = 0 ;
3304: LD_ADDR_VAR 0 4
3308: PUSH
3309: LD_INT 0
3311: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: LD_INT 22
3319: PUSH
3320: LD_INT 3
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 21
3329: PUSH
3330: LD_INT 1
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PPUSH
3341: CALL_OW 69
3345: PUSH
3346: FOR_IN
3347: IFFALSE 3419
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3349: LD_VAR 0 2
3353: PPUSH
3354: LD_VAR 0 3
3358: PUSH
3359: LD_VAR 0 4
3363: ARRAY
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_VAR 0 4
3378: ARRAY
3379: PUSH
3380: LD_INT 2
3382: ARRAY
3383: PPUSH
3384: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3388: LD_VAR 0 2
3392: PPUSH
3393: LD_INT 69
3395: PPUSH
3396: LD_INT 96
3398: PPUSH
3399: CALL_OW 178
// x = x + 1 ;
3403: LD_ADDR_VAR 0 4
3407: PUSH
3408: LD_VAR 0 4
3412: PUSH
3413: LD_INT 1
3415: PLUS
3416: ST_TO_ADDR
// end ;
3417: GO 3346
3419: POP
3420: POP
// wait ( 0 0$1 ) ;
3421: LD_INT 35
3423: PPUSH
3424: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3428: LD_EXP 40
3432: PPUSH
3433: LD_INT 70
3435: PPUSH
3436: LD_INT 90
3438: PPUSH
3439: CALL_OW 297
3443: PUSH
3444: LD_INT 7
3446: LESS
3447: PUSH
3448: LD_EXP 41
3452: PPUSH
3453: LD_INT 70
3455: PPUSH
3456: LD_INT 90
3458: PPUSH
3459: CALL_OW 297
3463: PUSH
3464: LD_INT 7
3466: LESS
3467: AND
3468: PUSH
3469: LD_EXP 42
3473: PPUSH
3474: LD_INT 70
3476: PPUSH
3477: LD_INT 90
3479: PPUSH
3480: CALL_OW 297
3484: PUSH
3485: LD_INT 7
3487: LESS
3488: AND
3489: PUSH
3490: LD_EXP 43
3494: PPUSH
3495: LD_INT 70
3497: PPUSH
3498: LD_INT 90
3500: PPUSH
3501: CALL_OW 297
3505: PUSH
3506: LD_INT 7
3508: LESS
3509: AND
3510: PUSH
3511: LD_EXP 47
3515: PPUSH
3516: LD_INT 70
3518: PPUSH
3519: LD_INT 90
3521: PPUSH
3522: CALL_OW 297
3526: PUSH
3527: LD_INT 7
3529: LESS
3530: AND
3531: IFFALSE 3295
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3533: LD_EXP 41
3537: PPUSH
3538: LD_STRING DDoubts-Kar-1
3540: PPUSH
3541: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3545: LD_EXP 42
3549: PPUSH
3550: LD_STRING DDoubts-Ptr-1
3552: PPUSH
3553: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-1 ) ;
3557: LD_EXP 40
3561: PPUSH
3562: LD_STRING DDoubts-Bur-1
3564: PPUSH
3565: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3569: LD_EXP 41
3573: PPUSH
3574: LD_STRING DDoubts-Kar-2
3576: PPUSH
3577: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3581: LD_EXP 43
3585: PPUSH
3586: LD_STRING DDoubts-Glb-2
3588: PPUSH
3589: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3593: LD_EXP 40
3597: PPUSH
3598: LD_STRING DDoubts-Bur-2
3600: PPUSH
3601: CALL_OW 88
// InGameOff ;
3605: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3609: LD_STRING MBegin
3611: PPUSH
3612: CALL_OW 337
// SaveForQuickRestart ;
3616: CALL_OW 22
// BuildBase ;
3620: CALL 10744 0 0
// end ;
3624: LD_VAR 0 1
3628: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3629: LD_EXP 8
3633: NOT
3634: IFFALSE 3894
3636: GO 3638
3638: DISABLE
3639: LD_INT 0
3641: PPUSH
// begin enable ;
3642: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3643: LD_ADDR_VAR 0 1
3647: PUSH
3648: LD_INT 34
3650: PPUSH
3651: LD_INT 22
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 21
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PPUSH
3675: CALL_OW 70
3679: PUSH
3680: FOR_IN
3681: IFFALSE 3892
// if See ( 3 , unit ) then
3683: LD_INT 3
3685: PPUSH
3686: LD_VAR 0 1
3690: PPUSH
3691: CALL_OW 292
3695: IFFALSE 3890
// begin sawArabianBase = true ;
3697: LD_ADDR_EXP 8
3701: PUSH
3702: LD_INT 1
3704: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3705: LD_VAR 0 1
3709: PPUSH
3710: CALL_OW 87
// DialogueOn ;
3714: CALL_OW 6
// if IsOk ( Lipshchin ) then
3718: LD_EXP 47
3722: PPUSH
3723: CALL_OW 302
3727: IFFALSE 3741
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3729: LD_EXP 47
3733: PPUSH
3734: LD_STRING DArabs-RSol1-1
3736: PPUSH
3737: CALL_OW 88
// if IsOk ( Karamazov ) then
3741: LD_EXP 41
3745: PPUSH
3746: CALL_OW 302
3750: IFFALSE 3764
// Say ( Karamazov , DArabs-Kar-1 ) ;
3752: LD_EXP 41
3756: PPUSH
3757: LD_STRING DArabs-Kar-1
3759: PPUSH
3760: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3764: LD_EXP 40
3768: PPUSH
3769: LD_STRING DArabs-Bur-1
3771: PPUSH
3772: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3776: LD_EXP 48
3780: PPUSH
3781: LD_STRING DArabs-Pla-1
3783: PPUSH
3784: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3788: LD_EXP 51
3792: PPUSH
3793: LD_STRING DSurrender-Omar-1
3795: PPUSH
3796: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3800: LD_STRING QSurrender
3802: PPUSH
3803: CALL_OW 97
3807: PUSH
3808: LD_INT 1
3810: DOUBLE
3811: EQUAL
3812: IFTRUE 3816
3814: GO 3835
3816: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3817: LD_EXP 40
3821: PPUSH
3822: LD_STRING DQrSurrender#1-Bur-1
3824: PPUSH
3825: CALL_OW 88
// Lose_Survive ;
3829: CALL 17411 0 0
// end ; 2 :
3833: GO 3882
3835: LD_INT 2
3837: DOUBLE
3838: EQUAL
3839: IFTRUE 3843
3841: GO 3858
3843: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3844: LD_EXP 40
3848: PPUSH
3849: LD_STRING DQrSurrender#2-Bur-1
3851: PPUSH
3852: CALL_OW 88
3856: GO 3882
3858: LD_INT 3
3860: DOUBLE
3861: EQUAL
3862: IFTRUE 3866
3864: GO 3881
3866: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3867: LD_EXP 40
3871: PPUSH
3872: LD_STRING DQrSurrender#3-Bur-1
3874: PPUSH
3875: CALL_OW 88
3879: GO 3882
3881: POP
// DialogueOff ;
3882: CALL_OW 7
// exit ;
3886: POP
3887: POP
3888: GO 3894
// end ;
3890: GO 3680
3892: POP
3893: POP
// end ;
3894: PPOPN 1
3896: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3897: LD_EXP 9
3901: NOT
3902: PUSH
3903: LD_INT 1
3905: PPUSH
3906: LD_INT 3
3908: PPUSH
3909: CALL_OW 321
3913: PUSH
3914: LD_INT 1
3916: EQUAL
3917: AND
3918: IFFALSE 4283
3920: GO 3922
3922: DISABLE
3923: LD_INT 0
3925: PPUSH
3926: PPUSH
// begin enable ;
3927: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3928: LD_ADDR_VAR 0 1
3932: PUSH
3933: LD_INT 22
3935: PUSH
3936: LD_INT 0
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PUSH
3943: LD_INT 25
3945: PUSH
3946: LD_INT 12
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: PPUSH
3957: CALL_OW 69
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4281
// if See ( 3 , unit ) then
3965: LD_INT 3
3967: PPUSH
3968: LD_VAR 0 1
3972: PPUSH
3973: CALL_OW 292
3977: IFFALSE 4279
// begin sawApeman = true ;
3979: LD_ADDR_EXP 9
3983: PUSH
3984: LD_INT 1
3986: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3987: LD_ADDR_VAR 0 2
3991: PUSH
3992: LD_INT 22
3994: PUSH
3995: LD_INT 3
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 21
4004: PUSH
4005: LD_INT 1
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 26
4014: PUSH
4015: LD_INT 1
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 50
4024: PUSH
4025: EMPTY
4026: LIST
4027: PUSH
4028: LD_INT 2
4030: PUSH
4031: LD_INT 25
4033: PUSH
4034: LD_INT 1
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PUSH
4041: LD_INT 25
4043: PUSH
4044: LD_INT 2
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 25
4053: PUSH
4054: LD_INT 3
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 25
4063: PUSH
4064: LD_INT 4
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 69
4089: PPUSH
4090: LD_VAR 0 1
4094: PPUSH
4095: CALL_OW 74
4099: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4100: LD_VAR 0 1
4104: PPUSH
4105: CALL_OW 87
// DialogueOn ;
4109: CALL_OW 6
// if nearUnit = Burlak then
4113: LD_VAR 0 2
4117: PUSH
4118: LD_EXP 40
4122: EQUAL
4123: IFFALSE 4139
// Say ( Burlak , DApeSpot-Bur-1a ) else
4125: LD_EXP 40
4129: PPUSH
4130: LD_STRING DApeSpot-Bur-1a
4132: PPUSH
4133: CALL_OW 88
4137: GO 4151
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4139: LD_VAR 0 2
4143: PPUSH
4144: LD_STRING DApeSpot-RSol1-1
4146: PPUSH
4147: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4151: LD_EXP 40
4155: PPUSH
4156: LD_STRING DApeSpot-Bur-1
4158: PPUSH
4159: CALL_OW 88
// if IsOK ( Petrosyan ) then
4163: LD_EXP 44
4167: PPUSH
4168: CALL_OW 302
4172: IFFALSE 4271
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4174: LD_EXP 44
4178: PPUSH
4179: LD_STRING DApeSpot-Pty-1
4181: PPUSH
4182: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4186: LD_INT 22
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: LD_INT 21
4198: PUSH
4199: LD_INT 3
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 2
4208: PUSH
4209: LD_INT 30
4211: PUSH
4212: LD_INT 6
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 30
4221: PUSH
4222: LD_INT 7
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: IFFALSE 4259
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4245: LD_EXP 44
4249: PPUSH
4250: LD_STRING DApeSpot-Pty-1a
4252: PPUSH
4253: CALL_OW 88
4257: GO 4271
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4259: LD_EXP 44
4263: PPUSH
4264: LD_STRING DApeSpot-Pty-1b
4266: PPUSH
4267: CALL_OW 88
// end ; DialogueOff ;
4271: CALL_OW 7
// exit ;
4275: POP
4276: POP
4277: GO 4283
// end ;
4279: GO 3962
4281: POP
4282: POP
// end ;
4283: PPOPN 2
4285: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and not buildedLab do
4286: LD_EXP 44
4290: PPUSH
4291: CALL_OW 302
4295: PUSH
4296: LD_INT 22
4298: PUSH
4299: LD_INT 3
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: LD_INT 21
4308: PUSH
4309: LD_INT 3
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 2
4318: PUSH
4319: LD_INT 30
4321: PUSH
4322: LD_INT 6
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: LD_INT 30
4331: PUSH
4332: LD_INT 7
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: PPUSH
4349: CALL_OW 69
4353: NOT
4354: AND
4355: PUSH
4356: LD_EXP 25
4360: NOT
4361: AND
4362: IFFALSE 4379
4364: GO 4366
4366: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4367: LD_EXP 44
4371: PPUSH
4372: LD_STRING DApeLab-Pty-1
4374: PPUSH
4375: CALL_OW 88
4379: END
// export function Dial_ResearchApeLang ; begin
4380: LD_INT 0
4382: PPUSH
// DialogueOn ;
4383: CALL_OW 6
// if IsOK ( Petrosyan ) then
4387: LD_EXP 44
4391: PPUSH
4392: CALL_OW 302
4396: IFFALSE 4482
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4398: LD_EXP 44
4402: PPUSH
4403: LD_STRING DApeLangCompl-Pty-1
4405: PPUSH
4406: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4410: LD_EXP 40
4414: PPUSH
4415: LD_STRING DApeLangCompl-Bur-1
4417: PPUSH
4418: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4422: LD_EXP 44
4426: PPUSH
4427: LD_STRING DApeLangCompl-Pty-2
4429: PPUSH
4430: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4434: LD_EXP 40
4438: PPUSH
4439: LD_STRING DApeLangCompl-Bur-2
4441: PPUSH
4442: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4446: LD_EXP 44
4450: PPUSH
4451: LD_STRING DApeLangCompl-Pty-3
4453: PPUSH
4454: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4458: LD_EXP 40
4462: PPUSH
4463: LD_STRING DApeLangCompl-Bur-3
4465: PPUSH
4466: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4470: LD_EXP 44
4474: PPUSH
4475: LD_STRING DApeLangCompl-Pty-4
4477: PPUSH
4478: CALL_OW 88
// end ; DialogueOff ;
4482: CALL_OW 7
// end ;
4486: LD_VAR 0 1
4490: RET
// export function Dial_TameApe ( sci ) ; begin
4491: LD_INT 0
4493: PPUSH
// dial_tameApeBlocker = true ;
4494: LD_ADDR_EXP 10
4498: PUSH
4499: LD_INT 1
4501: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4502: LD_VAR 0 1
4506: PPUSH
4507: CALL_OW 258
4511: PUSH
4512: LD_INT 1
4514: EQUAL
4515: IFFALSE 4531
// Say ( sci , DApeTame-Sci1-1 ) else
4517: LD_VAR 0 1
4521: PPUSH
4522: LD_STRING DApeTame-Sci1-1
4524: PPUSH
4525: CALL_OW 88
4529: GO 4695
// begin if IsOK ( Petrosyan ) then
4531: LD_EXP 44
4535: PPUSH
4536: CALL_OW 302
4540: IFFALSE 4556
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4542: LD_EXP 44
4546: PPUSH
4547: LD_STRING DApeTame-Sci1-1
4549: PPUSH
4550: CALL_OW 88
4554: GO 4695
// if IsOK ( Dolgov ) then
4556: LD_EXP 46
4560: PPUSH
4561: CALL_OW 302
4565: IFFALSE 4581
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4567: LD_EXP 46
4571: PPUSH
4572: LD_STRING DApeTame-Sci1-1
4574: PPUSH
4575: CALL_OW 88
4579: GO 4695
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4581: LD_INT 22
4583: PUSH
4584: LD_INT 3
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 21
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 26
4603: PUSH
4604: LD_INT 1
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 50
4613: PUSH
4614: EMPTY
4615: LIST
4616: PUSH
4617: LD_INT 2
4619: PUSH
4620: LD_INT 25
4622: PUSH
4623: LD_INT 1
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 25
4632: PUSH
4633: LD_INT 2
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 3
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 25
4652: PUSH
4653: LD_INT 4
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: PPUSH
4674: CALL_OW 69
4678: PPUSH
4679: LD_STRING DApeTame-Sci1-1
4681: PPUSH
4682: LD_STRING 
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL 8863 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4695: LD_EXP 40
4699: PPUSH
4700: LD_STRING DApeTame-Bur-1
4702: PPUSH
4703: CALL_OW 88
// end ;
4707: LD_VAR 0 2
4711: RET
// export function Dial_ApeEnterLab ; begin
4712: LD_INT 0
4714: PPUSH
// dial_apeEnterLabBlocker = true ;
4715: LD_ADDR_EXP 11
4719: PUSH
4720: LD_INT 1
4722: ST_TO_ADDR
// DialogueOn ;
4723: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4727: LD_EXP 40
4731: PPUSH
4732: LD_STRING DApeWorkSol-Bur-1
4734: PPUSH
4735: CALL_OW 88
// if IsOK ( Petrosyan ) then
4739: LD_EXP 44
4743: PPUSH
4744: CALL_OW 302
4748: IFFALSE 4764
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4750: LD_EXP 44
4754: PPUSH
4755: LD_STRING DApeWorkSol-Pty-1
4757: PPUSH
4758: CALL_OW 88
4762: GO 4903
// if IsOK ( Dolgov ) then
4764: LD_EXP 46
4768: PPUSH
4769: CALL_OW 302
4773: IFFALSE 4789
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4775: LD_EXP 46
4779: PPUSH
4780: LD_STRING DApeWorkSol-Pty-1
4782: PPUSH
4783: CALL_OW 88
4787: GO 4903
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4789: LD_INT 22
4791: PUSH
4792: LD_INT 3
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 21
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 26
4811: PUSH
4812: LD_INT 1
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 50
4821: PUSH
4822: EMPTY
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 25
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 25
4840: PUSH
4841: LD_INT 2
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 3
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: LD_INT 25
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 69
4886: PPUSH
4887: LD_STRING DApeWorkSol-Pty-1
4889: PPUSH
4890: LD_STRING 
4892: PPUSH
4893: LD_INT 0
4895: PPUSH
4896: LD_INT 1
4898: PPUSH
4899: CALL 8863 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4903: LD_EXP 40
4907: PPUSH
4908: LD_STRING DApeWorkSol-Bur-2
4910: PPUSH
4911: CALL_OW 88
// DialogueOff ;
4915: CALL_OW 7
// end ;
4919: LD_VAR 0 1
4923: RET
// export function Dial_ResearchApePsych ; begin
4924: LD_INT 0
4926: PPUSH
// DialogueOn ;
4927: CALL_OW 6
// if IsOK ( Petrosyan ) then
4931: LD_EXP 44
4935: PPUSH
4936: CALL_OW 302
4940: IFFALSE 4956
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4942: LD_EXP 44
4946: PPUSH
4947: LD_STRING DApeWorkCompl-Pty-1
4949: PPUSH
4950: CALL_OW 88
4954: GO 5095
// if IsOK ( Dolgov ) then
4956: LD_EXP 46
4960: PPUSH
4961: CALL_OW 302
4965: IFFALSE 4981
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4967: LD_EXP 46
4971: PPUSH
4972: LD_STRING DApeWorkCompl-Pty-1
4974: PPUSH
4975: CALL_OW 88
4979: GO 5095
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4981: LD_INT 22
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: LD_INT 21
4993: PUSH
4994: LD_INT 1
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 26
5003: PUSH
5004: LD_INT 1
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: LD_INT 50
5013: PUSH
5014: EMPTY
5015: LIST
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: LD_INT 25
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 2
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 25
5042: PUSH
5043: LD_INT 3
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 25
5052: PUSH
5053: LD_INT 4
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PPUSH
5079: LD_STRING DApeWorkCompl-Pty-1
5081: PPUSH
5082: LD_STRING 
5084: PPUSH
5085: LD_INT 0
5087: PPUSH
5088: LD_INT 1
5090: PPUSH
5091: CALL 8863 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5095: LD_EXP 40
5099: PPUSH
5100: LD_STRING DApeWorkCompl-Bur-1
5102: PPUSH
5103: CALL_OW 88
// DialogueOff ;
5107: CALL_OW 7
// end ;
5111: LD_VAR 0 1
5115: RET
// export function Dial_ResearchApeAgress ; begin
5116: LD_INT 0
5118: PPUSH
// DialogueOn ;
5119: CALL_OW 6
// if IsOK ( Petrosyan ) then
5123: LD_EXP 44
5127: PPUSH
5128: CALL_OW 302
5132: IFFALSE 5148
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5134: LD_EXP 44
5138: PPUSH
5139: LD_STRING DApeSolCompl-Pty-1
5141: PPUSH
5142: CALL_OW 88
5146: GO 5287
// if IsOK ( Dolgov ) then
5148: LD_EXP 46
5152: PPUSH
5153: CALL_OW 302
5157: IFFALSE 5173
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5159: LD_EXP 46
5163: PPUSH
5164: LD_STRING DApeSolCompl-Pty-1
5166: PPUSH
5167: CALL_OW 88
5171: GO 5287
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5173: LD_INT 22
5175: PUSH
5176: LD_INT 3
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PUSH
5183: LD_INT 21
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 26
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: LD_INT 50
5205: PUSH
5206: EMPTY
5207: LIST
5208: PUSH
5209: LD_INT 2
5211: PUSH
5212: LD_INT 25
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 25
5234: PUSH
5235: LD_INT 3
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: LD_INT 25
5244: PUSH
5245: LD_INT 4
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: LD_STRING DApeSolCompl-Pty-1
5273: PPUSH
5274: LD_STRING 
5276: PPUSH
5277: LD_INT 0
5279: PPUSH
5280: LD_INT 1
5282: PPUSH
5283: CALL 8863 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5287: LD_EXP 40
5291: PPUSH
5292: LD_STRING DApeSolCompl-Bur-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// end ;
5303: LD_VAR 0 1
5307: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5308: LD_INT 3
5310: PPUSH
5311: LD_INT 74
5313: PPUSH
5314: LD_INT 115
5316: PPUSH
5317: CALL_OW 293
5321: IFFALSE 5452
5323: GO 5325
5325: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5326: LD_INT 22
5328: PUSH
5329: LD_INT 3
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 21
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: LD_INT 26
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 50
5358: PUSH
5359: EMPTY
5360: LIST
5361: PUSH
5362: LD_INT 2
5364: PUSH
5365: LD_INT 25
5367: PUSH
5368: LD_INT 1
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 2
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 3
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 25
5397: PUSH
5398: LD_INT 4
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: PPUSH
5419: CALL_OW 69
5423: PPUSH
5424: LD_STRING DShipments-RSol1-1
5426: PPUSH
5427: LD_STRING 
5429: PPUSH
5430: LD_INT 0
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL 8863 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5440: LD_EXP 40
5444: PPUSH
5445: LD_STRING DShipments-Bur-1
5447: PPUSH
5448: CALL_OW 88
// end ;
5452: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5453: LD_INT 3
5455: PPUSH
5456: LD_INT 81
5458: PPUSH
5459: LD_INT 132
5461: PPUSH
5462: CALL_OW 293
5466: IFFALSE 5606
5468: GO 5470
5470: DISABLE
5471: LD_INT 0
5473: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5474: LD_ADDR_VAR 0 1
5478: PUSH
5479: LD_INT 22
5481: PUSH
5482: LD_INT 3
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 21
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 26
5501: PUSH
5502: LD_INT 1
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 50
5511: PUSH
5512: EMPTY
5513: LIST
5514: PUSH
5515: LD_INT 2
5517: PUSH
5518: LD_INT 25
5520: PUSH
5521: LD_INT 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 25
5530: PUSH
5531: LD_INT 2
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 3
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 25
5550: PUSH
5551: LD_INT 4
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PPUSH
5572: CALL_OW 69
5576: PPUSH
5577: LD_STRING DRoad-RSol1-1
5579: PPUSH
5580: LD_STRING 
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: LD_INT 1
5588: PPUSH
5589: CALL 8863 0 5
5593: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_STRING DRoad-RSol1-1a
5601: PPUSH
5602: CALL_OW 88
// end ;
5606: PPOPN 1
5608: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5609: LD_INT 33
5611: PPUSH
5612: LD_INT 22
5614: PUSH
5615: LD_INT 3
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 21
5624: PUSH
5625: LD_INT 1
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 26
5634: PUSH
5635: LD_INT 1
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PUSH
5642: LD_INT 50
5644: PUSH
5645: EMPTY
5646: LIST
5647: PUSH
5648: LD_INT 2
5650: PUSH
5651: LD_INT 25
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 25
5663: PUSH
5664: LD_INT 2
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 25
5673: PUSH
5674: LD_INT 3
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 25
5683: PUSH
5684: LD_INT 4
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: PUSH
5710: LD_EXP 40
5714: PUSH
5715: EMPTY
5716: LIST
5717: DIFF
5718: PUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 3
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 21
5731: PUSH
5732: LD_INT 3
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 30
5741: PUSH
5742: LD_INT 0
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 50
5751: PUSH
5752: EMPTY
5753: LIST
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: PPUSH
5761: CALL_OW 69
5765: AND
5766: IFFALSE 5793
5768: GO 5770
5770: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5771: LD_INT 36
5773: PPUSH
5774: CALL 20911 0 1
// wait ( 0 0$2 ) ;
5778: LD_INT 70
5780: PPUSH
5781: CALL_OW 67
// stevensPlaced = true ;
5785: LD_ADDR_EXP 14
5789: PUSH
5790: LD_INT 1
5792: ST_TO_ADDR
// end ;
5793: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5794: LD_INT 3
5796: PPUSH
5797: LD_EXP 58
5801: PPUSH
5802: CALL_OW 292
5806: PUSH
5807: LD_EXP 14
5811: AND
5812: PUSH
5813: LD_EXP 24
5817: NOT
5818: AND
5819: IFFALSE 6161
5821: GO 5823
5823: DISABLE
5824: LD_INT 0
5826: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5827: LD_ADDR_VAR 0 1
5831: PUSH
5832: LD_INT 22
5834: PUSH
5835: LD_INT 3
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 21
5844: PUSH
5845: LD_INT 1
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PUSH
5852: LD_INT 26
5854: PUSH
5855: LD_INT 1
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: LD_INT 50
5864: PUSH
5865: EMPTY
5866: LIST
5867: PUSH
5868: LD_INT 2
5870: PUSH
5871: LD_INT 25
5873: PUSH
5874: LD_INT 1
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 25
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 25
5893: PUSH
5894: LD_INT 3
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 25
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: PPUSH
5925: CALL_OW 69
5929: PPUSH
5930: LD_EXP 58
5934: PPUSH
5935: CALL_OW 74
5939: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5940: LD_EXP 58
5944: PPUSH
5945: CALL_OW 87
// InGameOn ;
5949: CALL_OW 8
// DialogueOn ;
5953: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_STRING DStevens-RSol1-1
5964: PPUSH
5965: CALL_OW 88
// DialogueOff ;
5969: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5973: LD_INT 52
5975: PPUSH
5976: CALL_OW 67
// if IsOK ( Petrosyan ) then
5980: LD_EXP 44
5984: PPUSH
5985: CALL_OW 302
5989: IFFALSE 6157
// begin SetSide ( Stevens , 6 ) ;
5991: LD_EXP 58
5995: PPUSH
5996: LD_INT 6
5998: PPUSH
5999: CALL_OW 235
// DialogueOn ;
6003: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
6007: LD_EXP 58
6011: PPUSH
6012: LD_STRING DStevens-Huck-1
6014: PPUSH
6015: CALL_OW 88
// if nearUnit = Petrosyan then
6019: LD_VAR 0 1
6023: PUSH
6024: LD_EXP 44
6028: EQUAL
6029: IFFALSE 6125
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
6031: LD_EXP 44
6035: PPUSH
6036: LD_STRING DStevens-Pty-1a
6038: PPUSH
6039: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6043: LD_EXP 58
6047: PPUSH
6048: LD_STRING DStevens-Huck-2
6050: PPUSH
6051: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6055: LD_EXP 44
6059: PPUSH
6060: LD_STRING DStevens-Pty-2
6062: PPUSH
6063: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6067: LD_EXP 58
6071: PPUSH
6072: LD_STRING DStevens-Huck-3
6074: PPUSH
6075: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6079: LD_EXP 44
6083: PPUSH
6084: LD_STRING DStevens-Pty-3
6086: PPUSH
6087: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6091: LD_EXP 58
6095: PPUSH
6096: LD_STRING DStevens-Huck-4
6098: PPUSH
6099: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6103: LD_EXP 44
6107: PPUSH
6108: LD_STRING DStevens-Pty-4
6110: PPUSH
6111: CALL_OW 88
// stevensFollow = true ;
6115: LD_ADDR_EXP 15
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// end else
6123: GO 6153
// begin stevensFollow = true ;
6125: LD_ADDR_EXP 15
6129: PUSH
6130: LD_INT 1
6132: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6133: LD_ADDR_EXP 16
6137: PUSH
6138: LD_INT 1
6140: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6141: LD_EXP 44
6145: PPUSH
6146: LD_STRING DStevens-Pty-1
6148: PPUSH
6149: CALL_OW 88
// end ; DialogueOff ;
6153: CALL_OW 7
// end ; InGameOff ;
6157: CALL_OW 9
// end ;
6161: PPOPN 1
6163: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6164: LD_EXP 16
6168: PUSH
6169: LD_EXP 44
6173: PPUSH
6174: LD_EXP 58
6178: PPUSH
6179: CALL_OW 296
6183: PUSH
6184: LD_INT 20
6186: LESS
6187: AND
6188: PUSH
6189: LD_EXP 44
6193: PPUSH
6194: CALL_OW 302
6198: AND
6199: PUSH
6200: LD_EXP 24
6204: NOT
6205: AND
6206: IFFALSE 6311
6208: GO 6210
6210: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6211: LD_ADDR_EXP 16
6215: PUSH
6216: LD_INT 0
6218: ST_TO_ADDR
// DialogueOn ;
6219: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6223: LD_EXP 44
6227: PPUSH
6228: LD_STRING DStevens-Pty-1a
6230: PPUSH
6231: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6235: LD_EXP 58
6239: PPUSH
6240: LD_STRING DStevens-Huck-2
6242: PPUSH
6243: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6247: LD_EXP 44
6251: PPUSH
6252: LD_STRING DStevens-Pty-2
6254: PPUSH
6255: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6259: LD_EXP 58
6263: PPUSH
6264: LD_STRING DStevens-Huck-3
6266: PPUSH
6267: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6271: LD_EXP 44
6275: PPUSH
6276: LD_STRING DStevens-Pty-3
6278: PPUSH
6279: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6283: LD_EXP 58
6287: PPUSH
6288: LD_STRING DStevens-Huck-4
6290: PPUSH
6291: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6295: LD_EXP 44
6299: PPUSH
6300: LD_STRING DStevens-Pty-4
6302: PPUSH
6303: CALL_OW 88
// DialogueOff ;
6307: CALL_OW 7
// end ;
6311: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and GetSide ( Stevens ) = 6 and IsOK ( Petrosyan ) and not finishMissionBool do
6312: LD_EXP 58
6316: PPUSH
6317: LD_EXP 40
6321: PPUSH
6322: CALL_OW 296
6326: PUSH
6327: LD_INT 15
6329: LESS
6330: PUSH
6331: LD_EXP 58
6335: PPUSH
6336: CALL_OW 255
6340: PUSH
6341: LD_INT 6
6343: EQUAL
6344: AND
6345: PUSH
6346: LD_EXP 44
6350: PPUSH
6351: CALL_OW 302
6355: AND
6356: PUSH
6357: LD_EXP 24
6361: NOT
6362: AND
6363: IFFALSE 6578
6365: GO 6367
6367: DISABLE
// begin DialogueOn ;
6368: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6372: LD_EXP 44
6376: PPUSH
6377: LD_STRING DStevensBurlak-Pty-1
6379: PPUSH
6380: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6384: LD_EXP 40
6388: PPUSH
6389: LD_STRING DStevensBurlak-Bur-1
6391: PPUSH
6392: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6396: LD_EXP 44
6400: PPUSH
6401: LD_STRING DStevensBurlak-Pty-2
6403: PPUSH
6404: CALL_OW 88
// case Query ( QKill ) of 1 :
6408: LD_STRING QKill
6410: PPUSH
6411: CALL_OW 97
6415: PUSH
6416: LD_INT 1
6418: DOUBLE
6419: EQUAL
6420: IFTRUE 6424
6422: GO 6502
6424: POP
// begin stevensCanExitMap = true ;
6425: LD_ADDR_EXP 19
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// stevensFollow = false ;
6433: LD_ADDR_EXP 15
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6441: LD_EXP 40
6445: PPUSH
6446: LD_STRING DKill-1-Bur-1
6448: PPUSH
6449: CALL_OW 88
// if IsOK ( Gleb ) then
6453: LD_EXP 43
6457: PPUSH
6458: CALL_OW 302
6462: IFFALSE 6476
// Say ( Gleb , DKill-1-Glb-1 ) ;
6464: LD_EXP 43
6468: PPUSH
6469: LD_STRING DKill-1-Glb-1
6471: PPUSH
6472: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6476: LD_EXP 58
6480: PPUSH
6481: LD_INT 1
6483: PPUSH
6484: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6488: LD_EXP 58
6492: PPUSH
6493: LD_INT 37
6495: PPUSH
6496: CALL_OW 113
// end ; 2 :
6500: GO 6574
6502: LD_INT 2
6504: DOUBLE
6505: EQUAL
6506: IFTRUE 6510
6508: GO 6573
6510: POP
// begin stevensCanExitMap = true ;
6511: LD_ADDR_EXP 19
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// stevensFollow = false ;
6519: LD_ADDR_EXP 15
6523: PUSH
6524: LD_INT 0
6526: ST_TO_ADDR
// stevensDepot = true ;
6527: LD_ADDR_EXP 17
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6535: LD_EXP 40
6539: PPUSH
6540: LD_STRING DKill-2-Bur-1
6542: PPUSH
6543: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6547: LD_EXP 44
6551: PPUSH
6552: LD_STRING DKill-2-Pty-1
6554: PPUSH
6555: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6559: LD_EXP 40
6563: PPUSH
6564: LD_STRING DKill-2-Bur-2
6566: PPUSH
6567: CALL_OW 88
// end ; end ;
6571: GO 6574
6573: POP
// DialogueOff ;
6574: CALL_OW 7
// end ;
6578: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6579: LD_EXP 15
6583: IFFALSE 6723
6585: GO 6587
6587: DISABLE
6588: LD_INT 0
6590: PPUSH
// begin enable ;
6591: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 21
6609: PUSH
6610: LD_INT 1
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 50
6619: PUSH
6620: EMPTY
6621: LIST
6622: PUSH
6623: LD_INT 2
6625: PUSH
6626: LD_INT 25
6628: PUSH
6629: LD_INT 1
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 25
6638: PUSH
6639: LD_INT 2
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 25
6648: PUSH
6649: LD_INT 3
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 25
6658: PUSH
6659: LD_INT 4
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 69
6683: PPUSH
6684: LD_EXP 58
6688: PPUSH
6689: CALL_OW 74
6693: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6694: LD_EXP 58
6698: PPUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 250
6708: PPUSH
6709: LD_VAR 0 1
6713: PPUSH
6714: CALL_OW 251
6718: PPUSH
6719: CALL_OW 111
// end ;
6723: PPOPN 1
6725: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6726: LD_EXP 17
6730: PUSH
6731: LD_INT 22
6733: PUSH
6734: LD_INT 3
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 21
6743: PUSH
6744: LD_INT 3
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 30
6753: PUSH
6754: LD_INT 0
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 50
6763: PUSH
6764: EMPTY
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: NOT
6778: AND
6779: IFFALSE 6806
6781: GO 6783
6783: DISABLE
// begin enable ;
6784: ENABLE
// SetSide ( Stevens , 6 ) ;
6785: LD_EXP 58
6789: PPUSH
6790: LD_INT 6
6792: PPUSH
6793: CALL_OW 235
// ComHold ( Stevens ) ;
6797: LD_EXP 58
6801: PPUSH
6802: CALL_OW 140
// end ;
6806: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6807: LD_EXP 17
6811: PUSH
6812: LD_INT 22
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 21
6824: PUSH
6825: LD_INT 3
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 30
6834: PUSH
6835: LD_INT 0
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 50
6844: PUSH
6845: EMPTY
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 69
6858: AND
6859: IFFALSE 7458
6861: GO 6863
6863: DISABLE
6864: LD_INT 0
6866: PPUSH
6867: PPUSH
6868: PPUSH
// begin enable ;
6869: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6870: LD_ADDR_VAR 0 1
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 3
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 21
6887: PUSH
6888: LD_INT 3
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 30
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 50
6907: PUSH
6908: EMPTY
6909: LIST
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: PPUSH
6917: CALL_OW 69
6921: PUSH
6922: LD_INT 1
6924: ARRAY
6925: ST_TO_ADDR
// stevensFollow = false ;
6926: LD_ADDR_EXP 15
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// if not depot then
6934: LD_VAR 0 1
6938: NOT
6939: IFFALSE 6943
// exit ;
6941: GO 7458
// for depotUnit in depot do
6943: LD_ADDR_VAR 0 2
6947: PUSH
6948: LD_VAR 0 1
6952: PUSH
6953: FOR_IN
6954: IFFALSE 6980
// if not IsConstructed ( depotUnit ) then
6956: LD_VAR 0 2
6960: PPUSH
6961: CALL_OW 304
6965: NOT
6966: IFFALSE 6978
// constructDepot = depotUnit ;
6968: LD_ADDR_VAR 0 3
6972: PUSH
6973: LD_VAR 0 2
6977: ST_TO_ADDR
6978: GO 6953
6980: POP
6981: POP
// if not constructDepot then
6982: LD_VAR 0 3
6986: NOT
6987: IFFALSE 6991
// exit ;
6989: GO 7458
// if not stevensWasInDepot then
6991: LD_EXP 18
6995: NOT
6996: IFFALSE 7136
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6998: LD_EXP 58
7002: PPUSH
7003: CALL_OW 310
7007: NOT
7008: PUSH
7009: LD_EXP 58
7013: PPUSH
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL_OW 296
7023: PUSH
7024: LD_INT 8
7026: LESS
7027: NOT
7028: AND
7029: IFFALSE 7062
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
7031: LD_EXP 58
7035: PPUSH
7036: LD_VAR 0 3
7040: PPUSH
7041: CALL_OW 250
7045: PPUSH
7046: LD_VAR 0 3
7050: PPUSH
7051: CALL_OW 251
7055: PPUSH
7056: CALL_OW 111
7060: GO 7134
// begin InGameOn ;
7062: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7066: LD_EXP 58
7070: PPUSH
7071: LD_INT 3
7073: PPUSH
7074: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7078: LD_EXP 58
7082: PPUSH
7083: LD_VAR 0 3
7087: PPUSH
7088: CALL_OW 120
// wait ( 0 0$1 ) ;
7092: LD_INT 35
7094: PPUSH
7095: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7099: LD_EXP 58
7103: PPUSH
7104: CALL_OW 310
7108: PUSH
7109: LD_EXP 58
7113: PPUSH
7114: CALL_OW 302
7118: NOT
7119: OR
7120: IFFALSE 7066
// InGameOff ;
7122: CALL_OW 9
// stevensWasInDepot = true ;
7126: LD_ADDR_EXP 18
7130: PUSH
7131: LD_INT 1
7133: ST_TO_ADDR
// end ; end else
7134: GO 7458
// begin if not IsInUnit ( Stevens ) or GetType ( IsInUnit ( Stevens ) ) = unit_vehicle then
7136: LD_EXP 58
7140: PPUSH
7141: CALL_OW 310
7145: NOT
7146: PUSH
7147: LD_EXP 58
7151: PPUSH
7152: CALL_OW 310
7156: PPUSH
7157: CALL_OW 247
7161: PUSH
7162: LD_INT 2
7164: EQUAL
7165: OR
7166: IFFALSE 7458
// begin DialogueOn ;
7168: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7172: LD_EXP 40
7176: PPUSH
7177: LD_STRING DRelease-Bur-1
7179: PPUSH
7180: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7184: LD_STRING QKillAgain
7186: PPUSH
7187: CALL_OW 97
7191: PUSH
7192: LD_INT 1
7194: DOUBLE
7195: EQUAL
7196: IFTRUE 7200
7198: GO 7269
7200: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7201: LD_EXP 40
7205: PPUSH
7206: LD_STRING DQrKillAgain#1-Bur-1
7208: PPUSH
7209: CALL_OW 88
// stevensCanExitMap = true ;
7213: LD_ADDR_EXP 19
7217: PUSH
7218: LD_INT 1
7220: ST_TO_ADDR
// stevensWasInDepot = false ;
7221: LD_ADDR_EXP 18
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// stevensDepot = false ;
7229: LD_ADDR_EXP 17
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7237: LD_EXP 58
7241: PPUSH
7242: LD_INT 1
7244: PPUSH
7245: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7249: LD_EXP 58
7253: PPUSH
7254: LD_INT 37
7256: PPUSH
7257: CALL_OW 113
// DialogueOff ;
7261: CALL_OW 7
// exit ;
7265: GO 7458
// end ; 2 :
7267: GO 7454
7269: LD_INT 2
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7346
7277: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7278: LD_EXP 40
7282: PPUSH
7283: LD_STRING DQrKillAgain#2-Bur-1
7285: PPUSH
7286: CALL_OW 88
// stevensCanExitMap = true ;
7290: LD_ADDR_EXP 19
7294: PUSH
7295: LD_INT 1
7297: ST_TO_ADDR
// stevensWasInDepot = false ;
7298: LD_ADDR_EXP 18
7302: PUSH
7303: LD_INT 0
7305: ST_TO_ADDR
// stevensDepot = false ;
7306: LD_ADDR_EXP 17
7310: PUSH
7311: LD_INT 0
7313: ST_TO_ADDR
// SetSide ( Stevens , 6 ) ;
7314: LD_EXP 58
7318: PPUSH
7319: LD_INT 6
7321: PPUSH
7322: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7326: LD_EXP 58
7330: PPUSH
7331: LD_INT 37
7333: PPUSH
7334: CALL_OW 113
// DialogueOff ;
7338: CALL_OW 7
// exit ;
7342: GO 7458
// end ; 3 :
7344: GO 7454
7346: LD_INT 3
7348: DOUBLE
7349: EQUAL
7350: IFTRUE 7354
7352: GO 7453
7354: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7355: LD_EXP 40
7359: PPUSH
7360: LD_STRING DQrKillAgain#2-Bur-1a
7362: PPUSH
7363: CALL_OW 88
// DialogueOff ;
7367: CALL_OW 7
// InGameOn ;
7371: CALL_OW 8
// ComExitVehicle ( Stevens ) ;
7375: LD_EXP 58
7379: PPUSH
7380: CALL_OW 121
// wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// repeat SetSide ( Stevens , 3 ) ;
7391: LD_EXP 58
7395: PPUSH
7396: LD_INT 3
7398: PPUSH
7399: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7403: LD_EXP 58
7407: PPUSH
7408: LD_VAR 0 3
7412: PPUSH
7413: CALL_OW 120
// wait ( 0 0$1 ) ;
7417: LD_INT 35
7419: PPUSH
7420: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7424: LD_EXP 58
7428: PPUSH
7429: CALL_OW 310
7433: PUSH
7434: LD_EXP 58
7438: PPUSH
7439: CALL_OW 302
7443: NOT
7444: OR
7445: IFFALSE 7391
// InGameOff ;
7447: CALL_OW 9
// end ; end ;
7451: GO 7454
7453: POP
// DialogueOff ;
7454: CALL_OW 7
// end ; end ; end ;
7458: PPOPN 3
7460: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7461: LD_EXP 19
7465: PUSH
7466: LD_EXP 58
7470: PPUSH
7471: LD_INT 37
7473: PPUSH
7474: CALL_OW 308
7478: AND
7479: IFFALSE 7526
7481: GO 7483
7483: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7484: LD_EXP 58
7488: PPUSH
7489: CALL_OW 255
7493: PUSH
7494: LD_INT 6
7496: EQUAL
7497: IFFALSE 7509
// stevensStatus = 1 else
7499: LD_ADDR_EXP 2
7503: PUSH
7504: LD_INT 1
7506: ST_TO_ADDR
7507: GO 7517
// stevensStatus = 2 ;
7509: LD_ADDR_EXP 2
7513: PUSH
7514: LD_INT 2
7516: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7517: LD_EXP 58
7521: PPUSH
7522: CALL_OW 64
// end ;
7526: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7527: LD_INT 3
7529: PPUSH
7530: LD_INT 1
7532: PPUSH
7533: CALL_OW 292
7537: IFFALSE 7737
7539: GO 7541
7541: DISABLE
7542: LD_INT 0
7544: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7545: LD_ADDR_VAR 0 1
7549: PUSH
7550: LD_INT 1
7552: PPUSH
7553: LD_INT 2
7555: PPUSH
7556: CALL_OW 12
7560: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7561: LD_INT 1
7563: PPUSH
7564: CALL_OW 87
// DialogueOn ;
7568: CALL_OW 6
// if rnd = 1 then
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 1
7579: EQUAL
7580: IFFALSE 7596
// Say ( Burlak , DMastodon-Bur-1 ) else
7582: LD_EXP 40
7586: PPUSH
7587: LD_STRING DMastodon-Bur-1
7589: PPUSH
7590: CALL_OW 88
7594: GO 7710
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7596: LD_INT 22
7598: PUSH
7599: LD_INT 3
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 21
7608: PUSH
7609: LD_INT 1
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 26
7618: PUSH
7619: LD_INT 1
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 50
7628: PUSH
7629: EMPTY
7630: LIST
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 25
7637: PUSH
7638: LD_INT 1
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 25
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 25
7657: PUSH
7658: LD_INT 3
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 25
7667: PUSH
7668: LD_INT 4
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: PPUSH
7694: LD_STRING DMastodon-RSol1-1
7696: PPUSH
7697: LD_STRING 
7699: PPUSH
7700: LD_INT 0
7702: PPUSH
7703: LD_INT 1
7705: PPUSH
7706: CALL 8863 0 5
// if IsOK ( Gleb ) then
7710: LD_EXP 43
7714: PPUSH
7715: CALL_OW 302
7719: IFFALSE 7733
// Say ( Gleb , DMastodon-Glb-1 ) ;
7721: LD_EXP 43
7725: PPUSH
7726: LD_STRING DMastodon-Glb-1
7728: PPUSH
7729: CALL_OW 88
// DialogueOff ;
7733: CALL_OW 7
// end ;
7737: PPOPN 1
7739: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7740: LD_INT 1
7742: PPUSH
7743: CALL_OW 302
7747: NOT
7748: IFFALSE 7827
7750: GO 7752
7752: DISABLE
// begin omarCanExitMap = true ;
7753: LD_ADDR_EXP 20
7757: PUSH
7758: LD_INT 1
7760: ST_TO_ADDR
// DialogueOn ;
7761: CALL_OW 6
// if IsOK ( Karamazov ) then
7765: LD_EXP 41
7769: PPUSH
7770: CALL_OW 302
7774: IFFALSE 7788
// Say ( Karamazov , DOmar-Kar-1 ) ;
7776: LD_EXP 41
7780: PPUSH
7781: LD_STRING DOmar-Kar-1
7783: PPUSH
7784: CALL_OW 88
// if IsOK ( Petrovova ) then
7788: LD_EXP 42
7792: PPUSH
7793: CALL_OW 302
7797: IFFALSE 7811
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7799: LD_EXP 42
7803: PPUSH
7804: LD_STRING DOmar-Ptr-1
7806: PPUSH
7807: CALL_OW 88
// DialogueOff ;
7811: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7815: LD_EXP 51
7819: PPUSH
7820: LD_INT 41
7822: PPUSH
7823: CALL_OW 113
// end ;
7827: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7828: LD_EXP 51
7832: PPUSH
7833: LD_INT 41
7835: PPUSH
7836: CALL_OW 308
7840: PUSH
7841: LD_EXP 20
7845: AND
7846: IFFALSE 7868
7848: GO 7850
7850: DISABLE
// begin RemoveUnit ( Omar ) ;
7851: LD_EXP 51
7855: PPUSH
7856: CALL_OW 64
// omarStatus = 1 ;
7860: LD_ADDR_EXP 1
7864: PUSH
7865: LD_INT 1
7867: ST_TO_ADDR
// end ;
7868: END
// every 0 0$1 trigger IsDead ( Omar ) do
7869: LD_EXP 51
7873: PPUSH
7874: CALL_OW 301
7878: IFFALSE 8036
7880: GO 7882
7882: DISABLE
// begin DialogueOn ;
7883: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7887: LD_INT 22
7889: PUSH
7890: LD_INT 3
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 21
7899: PUSH
7900: LD_INT 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 26
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 50
7919: PUSH
7920: EMPTY
7921: LIST
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: LD_INT 25
7928: PUSH
7929: LD_INT 1
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 25
7938: PUSH
7939: LD_INT 2
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 25
7948: PUSH
7949: LD_INT 3
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 25
7958: PUSH
7959: LD_INT 4
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 69
7984: PPUSH
7985: LD_STRING DOmar-RSol1-1
7987: PPUSH
7988: LD_STRING 
7990: PPUSH
7991: LD_INT 0
7993: PPUSH
7994: LD_INT 1
7996: PPUSH
7997: CALL 8863 0 5
// wait ( 0 0$1 ) ;
8001: LD_INT 35
8003: PPUSH
8004: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
8008: LD_EXP 50
8012: PPUSH
8013: LD_STRING DOmar-Hke-1
8015: PPUSH
8016: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
8020: LD_EXP 40
8024: PPUSH
8025: LD_STRING DOmar-Bur-1
8027: PPUSH
8028: CALL_OW 88
// DialogueOff ;
8032: CALL_OW 7
// end ;
8036: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
8037: LD_EXP 51
8041: PPUSH
8042: CALL_OW 301
8046: PUSH
8047: LD_EXP 51
8051: PPUSH
8052: CALL_OW 305
8056: NOT
8057: OR
8058: PUSH
8059: LD_EXP 52
8063: PUSH
8064: LD_INT 3
8066: LESS
8067: AND
8068: IFFALSE 8219
8070: GO 8072
8072: DISABLE
// begin if actionTime < arabBreakthrough then
8073: LD_EXP 7
8077: PUSH
8078: LD_EXP 35
8082: LESS
8083: IFFALSE 8093
// fastBreakthrough = true ;
8085: LD_ADDR_EXP 23
8089: PUSH
8090: LD_INT 1
8092: ST_TO_ADDR
// DialogueOn ;
8093: CALL_OW 6
// if IsOK ( Petrovova ) then
8097: LD_EXP 42
8101: PPUSH
8102: CALL_OW 302
8106: IFFALSE 8120
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
8108: LD_EXP 42
8112: PPUSH
8113: LD_STRING DBreakthrough-Ptr-1
8115: PPUSH
8116: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
8120: LD_EXP 40
8124: PPUSH
8125: LD_STRING DBreakthrough-Bur-1
8127: PPUSH
8128: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
8132: LD_EXP 48
8136: PPUSH
8137: LD_STRING DBreakthrough-Pla-1
8139: PPUSH
8140: CALL_OW 94
// if fastBreakthrough then
8144: LD_EXP 23
8148: IFFALSE 8164
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8150: LD_EXP 48
8154: PPUSH
8155: LD_STRING DBreakthrough-Pla-1a
8157: PPUSH
8158: CALL_OW 94
8162: GO 8176
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8164: LD_EXP 48
8168: PPUSH
8169: LD_STRING DBreakthrough-Pla-1b
8171: PPUSH
8172: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8176: LD_EXP 48
8180: PPUSH
8181: LD_STRING DBreakthrough-Pla-1c
8183: PPUSH
8184: CALL_OW 94
// DialogueOff ;
8188: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8192: LD_STRING MAddLab
8194: PPUSH
8195: CALL_OW 337
// arabianCanExitMap = true ;
8199: LD_ADDR_EXP 21
8203: PUSH
8204: LD_INT 1
8206: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8207: LD_EXP 52
8211: PPUSH
8212: LD_INT 41
8214: PPUSH
8215: CALL_OW 113
// end ;
8219: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8220: LD_EXP 21
8224: IFFALSE 8289
8226: GO 8228
8228: DISABLE
8229: LD_INT 0
8231: PPUSH
// begin enable ;
8232: ENABLE
// for unit in arabianUnitsInBase do
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_EXP 52
8242: PUSH
8243: FOR_IN
8244: IFFALSE 8287
// if IsInArea ( unit , ArabianExitArea ) then
8246: LD_VAR 0 1
8250: PPUSH
8251: LD_INT 41
8253: PPUSH
8254: CALL_OW 308
8258: IFFALSE 8285
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8260: LD_ADDR_EXP 52
8264: PUSH
8265: LD_EXP 52
8269: PUSH
8270: LD_VAR 0 1
8274: DIFF
8275: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8276: LD_VAR 0 1
8280: PPUSH
8281: CALL_OW 64
// end ;
8285: GO 8243
8287: POP
8288: POP
// end ;
8289: PPOPN 1
8291: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8292: LD_EXP 12
8296: NOT
8297: IFFALSE 8535
8299: GO 8301
8301: DISABLE
8302: LD_INT 0
8304: PPUSH
// begin for unit in arabianPatrolVehicles do
8305: LD_ADDR_VAR 0 1
8309: PUSH
8310: LD_EXP 53
8314: PUSH
8315: FOR_IN
8316: IFFALSE 8533
// if See ( 3 , unit ) then
8318: LD_INT 3
8320: PPUSH
8321: LD_VAR 0 1
8325: PPUSH
8326: CALL_OW 292
8330: IFFALSE 8531
// begin dial_southRoadBlocker = true ;
8332: LD_ADDR_EXP 12
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8340: LD_VAR 0 1
8344: PPUSH
8345: CALL_OW 87
// if IsOK ( Karamazov ) then
8349: LD_EXP 41
8353: PPUSH
8354: CALL_OW 302
8358: IFFALSE 8372
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8360: LD_EXP 41
8364: PPUSH
8365: LD_STRING DPatrol-Kar-1
8367: PPUSH
8368: CALL_OW 88
// if IsOK ( Petrovova ) then
8372: LD_EXP 42
8376: PPUSH
8377: CALL_OW 302
8381: IFFALSE 8395
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8383: LD_EXP 42
8387: PPUSH
8388: LD_STRING DPatrol-Ptr-1
8390: PPUSH
8391: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8395: LD_INT 22
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 21
8407: PUSH
8408: LD_INT 1
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PUSH
8415: LD_INT 26
8417: PUSH
8418: LD_INT 1
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 50
8427: PUSH
8428: EMPTY
8429: LIST
8430: PUSH
8431: LD_INT 2
8433: PUSH
8434: LD_INT 25
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 25
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 25
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 4
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: PPUSH
8488: CALL_OW 69
8492: PUSH
8493: LD_EXP 41
8497: DIFF
8498: PPUSH
8499: LD_STRING DPatrol-RSol1-1
8501: PPUSH
8502: LD_STRING 
8504: PPUSH
8505: LD_INT 0
8507: PPUSH
8508: LD_INT 1
8510: PPUSH
8511: CALL 8863 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8515: LD_EXP 40
8519: PPUSH
8520: LD_STRING DPatrol-Bur-1
8522: PPUSH
8523: CALL_OW 88
// exit ;
8527: POP
8528: POP
8529: GO 8535
// end ;
8531: GO 8315
8533: POP
8534: POP
// end ;
8535: PPOPN 1
8537: END
// every 10 10$0 do
8538: GO 8540
8540: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8541: CALL 2593 0 0
8545: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
// if debugMode then
8550: LD_EXP 33
8554: IFFALSE 8571
// unit := NewCharacter ( ident ) ;
8556: LD_ADDR_VAR 0 5
8560: PUSH
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 25
8570: ST_TO_ADDR
// if exist_mode and not debugMode then
8571: LD_VAR 0 2
8575: PUSH
8576: LD_EXP 33
8580: NOT
8581: AND
8582: IFFALSE 8607
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8584: LD_ADDR_VAR 0 5
8588: PUSH
8589: LD_EXP 32
8593: PUSH
8594: LD_VAR 0 1
8598: STR
8599: PPUSH
8600: CALL_OW 34
8604: ST_TO_ADDR
8605: GO 8629
// if not debugMode then
8607: LD_EXP 33
8611: NOT
8612: IFFALSE 8629
// unit := NewCharacter ( ident ) ;
8614: LD_ADDR_VAR 0 5
8618: PUSH
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 25
8628: ST_TO_ADDR
// if class then
8629: LD_VAR 0 3
8633: IFFALSE 8649
// SetClass ( unit , class ) ;
8635: LD_VAR 0 5
8639: PPUSH
8640: LD_VAR 0 3
8644: PPUSH
8645: CALL_OW 336
// result := unit ;
8649: LD_ADDR_VAR 0 4
8653: PUSH
8654: LD_VAR 0 5
8658: ST_TO_ADDR
// end ;
8659: LD_VAR 0 4
8663: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8664: LD_INT 0
8666: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 255
8676: PUSH
8677: LD_VAR 0 3
8681: EQUAL
8682: PUSH
8683: LD_VAR 0 1
8687: PPUSH
8688: CALL_OW 302
8692: AND
8693: IFFALSE 8715
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8695: LD_VAR 0 1
8699: PPUSH
8700: LD_EXP 31
8704: PUSH
8705: LD_VAR 0 2
8709: STR
8710: PPUSH
8711: CALL_OW 38
// end ;
8715: LD_VAR 0 4
8719: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8720: LD_INT 0
8722: PPUSH
8723: PPUSH
8724: PPUSH
// resultCharactersToSave = [ ] ;
8725: LD_ADDR_VAR 0 6
8729: PUSH
8730: EMPTY
8731: ST_TO_ADDR
// for unit in characters do
8732: LD_ADDR_VAR 0 5
8736: PUSH
8737: LD_VAR 0 1
8741: PUSH
8742: FOR_IN
8743: IFFALSE 8791
// if GetSide ( unit ) = side and IsOK ( unit ) then
8745: LD_VAR 0 5
8749: PPUSH
8750: CALL_OW 255
8754: PUSH
8755: LD_VAR 0 3
8759: EQUAL
8760: PUSH
8761: LD_VAR 0 5
8765: PPUSH
8766: CALL_OW 302
8770: AND
8771: IFFALSE 8789
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8773: LD_ADDR_VAR 0 6
8777: PUSH
8778: LD_VAR 0 6
8782: PUSH
8783: LD_VAR 0 5
8787: ADD
8788: ST_TO_ADDR
8789: GO 8742
8791: POP
8792: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8793: LD_VAR 0 6
8797: PPUSH
8798: LD_EXP 31
8802: PUSH
8803: LD_VAR 0 2
8807: STR
8808: PPUSH
8809: CALL_OW 38
// end ;
8813: LD_VAR 0 4
8817: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8818: LD_INT 0
8820: PPUSH
8821: PPUSH
// for unit in units do
8822: LD_ADDR_VAR 0 5
8826: PUSH
8827: LD_VAR 0 1
8831: PUSH
8832: FOR_IN
8833: IFFALSE 8856
// PlaceUnitArea ( unit , area , spawnMode ) ;
8835: LD_VAR 0 5
8839: PPUSH
8840: LD_VAR 0 2
8844: PPUSH
8845: LD_VAR 0 3
8849: PPUSH
8850: CALL_OW 49
8854: GO 8832
8856: POP
8857: POP
// end ;
8858: LD_VAR 0 4
8862: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8863: LD_INT 0
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
// units = characters ;
8869: LD_ADDR_VAR 0 9
8873: PUSH
8874: LD_VAR 0 1
8878: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8879: LD_ADDR_VAR 0 9
8883: PUSH
8884: LD_VAR 0 9
8888: PUSH
8889: LD_EXP 40
8893: PUSH
8894: LD_EXP 41
8898: PUSH
8899: LD_EXP 42
8903: PUSH
8904: LD_EXP 43
8908: PUSH
8909: LD_EXP 44
8913: PUSH
8914: LD_EXP 45
8918: PUSH
8919: LD_EXP 46
8923: PUSH
8924: LD_EXP 47
8928: PUSH
8929: LD_EXP 58
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: DIFF
8945: ST_TO_ADDR
// if not units and not canTalkHero then
8946: LD_VAR 0 9
8950: NOT
8951: PUSH
8952: LD_VAR 0 5
8956: NOT
8957: AND
8958: IFFALSE 8962
// exit ;
8960: GO 9141
// if not units then
8962: LD_VAR 0 9
8966: NOT
8967: IFFALSE 8994
// units = characters diff [ Burlak , Stevens ] ;
8969: LD_ADDR_VAR 0 9
8973: PUSH
8974: LD_VAR 0 1
8978: PUSH
8979: LD_EXP 40
8983: PUSH
8984: LD_EXP 58
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: DIFF
8993: ST_TO_ADDR
// if not units and canTalkHero then
8994: LD_VAR 0 9
8998: NOT
8999: PUSH
9000: LD_VAR 0 5
9004: AND
9005: IFFALSE 9009
// exit ;
9007: GO 9141
// speaker := units [ rand ( 1 , units ) ] ;
9009: LD_ADDR_VAR 0 8
9013: PUSH
9014: LD_VAR 0 9
9018: PUSH
9019: LD_INT 1
9021: PPUSH
9022: LD_VAR 0 9
9026: PPUSH
9027: CALL_OW 12
9031: ARRAY
9032: ST_TO_ADDR
// if radio then
9033: LD_VAR 0 4
9037: IFFALSE 9086
// begin if GetSex ( speaker ) = sex_male then
9039: LD_VAR 0 8
9043: PPUSH
9044: CALL_OW 258
9048: PUSH
9049: LD_INT 1
9051: EQUAL
9052: IFFALSE 9070
// SayRadio ( speaker , dialogMID ) else
9054: LD_VAR 0 8
9058: PPUSH
9059: LD_VAR 0 2
9063: PPUSH
9064: CALL_OW 94
9068: GO 9084
// SayRadio ( speaker , dialogFID ) ;
9070: LD_VAR 0 8
9074: PPUSH
9075: LD_VAR 0 3
9079: PPUSH
9080: CALL_OW 94
// end else
9084: GO 9131
// begin if GetSex ( speaker ) = sex_male then
9086: LD_VAR 0 8
9090: PPUSH
9091: CALL_OW 258
9095: PUSH
9096: LD_INT 1
9098: EQUAL
9099: IFFALSE 9117
// Say ( speaker , dialogMID ) else
9101: LD_VAR 0 8
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: CALL_OW 88
9115: GO 9131
// Say ( speaker , dialogFID ) ;
9117: LD_VAR 0 8
9121: PPUSH
9122: LD_VAR 0 3
9126: PPUSH
9127: CALL_OW 88
// end ; result := speaker ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_VAR 0 8
9140: ST_TO_ADDR
// end ;
9141: LD_VAR 0 6
9145: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9146: LD_INT 0
9148: PPUSH
9149: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: LD_VAR 0 2
9159: PPUSH
9160: CALL_OW 254
9164: PUSH
9165: LD_INT 3
9167: MINUS
9168: ST_TO_ADDR
// if dir < 0 then
9169: LD_VAR 0 4
9173: PUSH
9174: LD_INT 0
9176: LESS
9177: IFFALSE 9193
// dir := 6 + dir ;
9179: LD_ADDR_VAR 0 4
9183: PUSH
9184: LD_INT 6
9186: PUSH
9187: LD_VAR 0 4
9191: PLUS
9192: ST_TO_ADDR
// SetDir ( un , dir ) ;
9193: LD_VAR 0 1
9197: PPUSH
9198: LD_VAR 0 4
9202: PPUSH
9203: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9207: LD_VAR 0 1
9211: PPUSH
9212: LD_VAR 0 2
9216: PPUSH
9217: CALL_OW 52
// result = un ;
9221: LD_ADDR_VAR 0 3
9225: PUSH
9226: LD_VAR 0 1
9230: ST_TO_ADDR
// end ;
9231: LD_VAR 0 3
9235: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9242: LD_ADDR_VAR 0 6
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 71
9252: PUSH
9253: LD_INT 70
9255: PUSH
9256: LD_INT 69
9258: PUSH
9259: LD_INT 39
9261: PUSH
9262: LD_INT 31
9264: PUSH
9265: LD_INT 14
9267: PUSH
9268: LD_INT 10
9270: PUSH
9271: LD_INT 40
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: ST_TO_ADDR
// resultWeapons = [ ] ;
9285: LD_ADDR_VAR 0 5
9289: PUSH
9290: EMPTY
9291: ST_TO_ADDR
// for i := 1 to weaponTechs do
9292: LD_ADDR_VAR 0 4
9296: PUSH
9297: DOUBLE
9298: LD_INT 1
9300: DEC
9301: ST_TO_ADDR
9302: LD_VAR 0 6
9306: PUSH
9307: FOR_TO
9308: IFFALSE 9495
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9310: LD_VAR 0 6
9314: PUSH
9315: LD_VAR 0 4
9319: ARRAY
9320: PPUSH
9321: LD_VAR 0 2
9325: PPUSH
9326: CALL_OW 482
9330: PUSH
9331: LD_VAR 0 6
9335: PUSH
9336: LD_VAR 0 4
9340: ARRAY
9341: PPUSH
9342: LD_VAR 0 1
9346: PPUSH
9347: CALL_OW 321
9351: PUSH
9352: LD_INT 2
9354: EQUAL
9355: AND
9356: IFFALSE 9493
// case nation of nation_american :
9358: LD_VAR 0 2
9362: PUSH
9363: LD_INT 1
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9406
9371: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9372: LD_ADDR_VAR 0 5
9376: PUSH
9377: LD_VAR 0 5
9381: PUSH
9382: LD_VAR 0 6
9386: PUSH
9387: LD_VAR 0 4
9391: ARRAY
9392: PPUSH
9393: LD_VAR 0 2
9397: PPUSH
9398: CALL 9512 0 2
9402: ADD
9403: ST_TO_ADDR
9404: GO 9493
9406: LD_INT 2
9408: DOUBLE
9409: EQUAL
9410: IFTRUE 9414
9412: GO 9449
9414: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9415: LD_ADDR_VAR 0 5
9419: PUSH
9420: LD_VAR 0 5
9424: PUSH
9425: LD_VAR 0 6
9429: PUSH
9430: LD_VAR 0 4
9434: ARRAY
9435: PPUSH
9436: LD_VAR 0 2
9440: PPUSH
9441: CALL 9512 0 2
9445: ADD
9446: ST_TO_ADDR
9447: GO 9493
9449: LD_INT 3
9451: DOUBLE
9452: EQUAL
9453: IFTRUE 9457
9455: GO 9492
9457: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9458: LD_ADDR_VAR 0 5
9462: PUSH
9463: LD_VAR 0 5
9467: PUSH
9468: LD_VAR 0 6
9472: PUSH
9473: LD_VAR 0 4
9477: ARRAY
9478: PPUSH
9479: LD_VAR 0 2
9483: PPUSH
9484: CALL 9512 0 2
9488: ADD
9489: ST_TO_ADDR
9490: GO 9493
9492: POP
// end ;
9493: GO 9307
9495: POP
9496: POP
// result = resultWeapons ;
9497: LD_ADDR_VAR 0 3
9501: PUSH
9502: LD_VAR 0 5
9506: ST_TO_ADDR
// end ;
9507: LD_VAR 0 3
9511: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9512: LD_INT 0
9514: PPUSH
// case tech of tech_AdvMet :
9515: LD_VAR 0 1
9519: PUSH
9520: LD_INT 34
9522: DOUBLE
9523: EQUAL
9524: IFTRUE 9528
9526: GO 9556
9528: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9529: LD_ADDR_VAR 0 3
9533: PUSH
9534: LD_INT 6
9536: PUSH
9537: LD_STRING 
9539: PUSH
9540: LD_INT 46
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: PUSH
9548: LD_VAR 0 2
9552: ARRAY
9553: ST_TO_ADDR
9554: GO 9845
9556: LD_INT 71
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9592
9564: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9565: LD_ADDR_VAR 0 3
9569: PUSH
9570: LD_STRING 
9572: PUSH
9573: LD_STRING 
9575: PUSH
9576: LD_INT 47
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: PUSH
9584: LD_VAR 0 2
9588: ARRAY
9589: ST_TO_ADDR
9590: GO 9845
9592: LD_INT 70
9594: DOUBLE
9595: EQUAL
9596: IFTRUE 9600
9598: GO 9628
9600: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: LD_STRING 
9608: PUSH
9609: LD_INT 26
9611: PUSH
9612: LD_STRING 
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_VAR 0 2
9624: ARRAY
9625: ST_TO_ADDR
9626: GO 9845
9628: LD_INT 69
9630: DOUBLE
9631: EQUAL
9632: IFTRUE 9636
9634: GO 9664
9636: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9637: LD_ADDR_VAR 0 3
9641: PUSH
9642: LD_INT 4
9644: PUSH
9645: LD_INT 25
9647: PUSH
9648: LD_INT 43
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_VAR 0 2
9660: ARRAY
9661: ST_TO_ADDR
9662: GO 9845
9664: LD_INT 39
9666: DOUBLE
9667: EQUAL
9668: IFTRUE 9672
9670: GO 9700
9672: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9673: LD_ADDR_VAR 0 3
9677: PUSH
9678: LD_INT 5
9680: PUSH
9681: LD_INT 27
9683: PUSH
9684: LD_INT 44
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: LD_VAR 0 2
9696: ARRAY
9697: ST_TO_ADDR
9698: GO 9845
9700: LD_INT 31
9702: DOUBLE
9703: EQUAL
9704: IFTRUE 9708
9706: GO 9736
9708: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9709: LD_ADDR_VAR 0 3
9713: PUSH
9714: LD_STRING 
9716: PUSH
9717: LD_STRING 
9719: PUSH
9720: LD_INT 49
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: LD_VAR 0 2
9732: ARRAY
9733: ST_TO_ADDR
9734: GO 9845
9736: LD_INT 14
9738: DOUBLE
9739: EQUAL
9740: IFTRUE 9744
9742: GO 9772
9744: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9745: LD_ADDR_VAR 0 3
9749: PUSH
9750: LD_INT 10
9752: PUSH
9753: LD_STRING 
9755: PUSH
9756: LD_STRING 
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: LD_VAR 0 2
9768: ARRAY
9769: ST_TO_ADDR
9770: GO 9845
9772: LD_INT 10
9774: DOUBLE
9775: EQUAL
9776: IFTRUE 9780
9778: GO 9808
9780: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9781: LD_ADDR_VAR 0 3
9785: PUSH
9786: LD_INT 9
9788: PUSH
9789: LD_STRING 
9791: PUSH
9792: LD_STRING 
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: LD_VAR 0 2
9804: ARRAY
9805: ST_TO_ADDR
9806: GO 9845
9808: LD_INT 40
9810: DOUBLE
9811: EQUAL
9812: IFTRUE 9816
9814: GO 9844
9816: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9817: LD_ADDR_VAR 0 3
9821: PUSH
9822: LD_INT 7
9824: PUSH
9825: LD_INT 28
9827: PUSH
9828: LD_INT 45
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: PUSH
9836: LD_VAR 0 2
9840: ARRAY
9841: ST_TO_ADDR
9842: GO 9845
9844: POP
// end ;
9845: LD_VAR 0 3
9849: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9850: LD_INT 0
9852: PPUSH
9853: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_VAR 0 1
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 289
9871: PUSH
9872: LD_VAR 0 1
9876: PPUSH
9877: LD_INT 2
9879: PPUSH
9880: CALL_OW 289
9884: PUSH
9885: LD_VAR 0 1
9889: PPUSH
9890: LD_INT 3
9892: PPUSH
9893: CALL_OW 289
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: ST_TO_ADDR
// end ; end_of_file
9903: LD_VAR 0 2
9907: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9908: LD_VAR 0 1
9912: PPUSH
9913: CALL_OW 255
9917: PUSH
9918: LD_INT 3
9920: EQUAL
9921: PUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 266
9931: PUSH
9932: LD_INT 0
9934: EQUAL
9935: AND
9936: IFFALSE 9950
// SetBname ( building , bukharin ) ;
9938: LD_VAR 0 1
9942: PPUSH
9943: LD_STRING bukharin
9945: PPUSH
9946: CALL_OW 500
// if GetSide ( building ) = 3 and GetBTYpe ( building ) in [ b_lab , b_lab_basic , b_lab_full , b_lab_half ] and not buildedLab then
9950: LD_VAR 0 1
9954: PPUSH
9955: CALL_OW 255
9959: PUSH
9960: LD_INT 3
9962: EQUAL
9963: PUSH
9964: LD_VAR 0 1
9968: PPUSH
9969: CALL_OW 266
9973: PUSH
9974: LD_INT 6
9976: PUSH
9977: LD_INT 9
9979: PUSH
9980: LD_INT 8
9982: PUSH
9983: LD_INT 7
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: IN
9992: AND
9993: PUSH
9994: LD_EXP 25
9998: NOT
9999: AND
10000: IFFALSE 10010
// buildedLab = true ;
10002: LD_ADDR_EXP 25
10006: PUSH
10007: LD_INT 1
10009: ST_TO_ADDR
// if GetSide ( building ) = 2 then
10010: LD_VAR 0 1
10014: PPUSH
10015: CALL_OW 255
10019: PUSH
10020: LD_INT 2
10022: EQUAL
10023: IFFALSE 10172
// begin if GetBType ( building ) = b_lab then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 266
10034: PUSH
10035: LD_INT 6
10037: EQUAL
10038: IFFALSE 10052
// ComUpgradeLab ( building , b_lab_weapon ) ;
10040: LD_VAR 0 1
10044: PPUSH
10045: LD_INT 10
10047: PPUSH
10048: CALL_OW 147
// if GetBType ( building ) = b_workshop then
10052: LD_VAR 0 1
10056: PPUSH
10057: CALL_OW 266
10061: PUSH
10062: LD_INT 2
10064: EQUAL
10065: IFFALSE 10076
// ComUpgrade ( building ) ;
10067: LD_VAR 0 1
10071: PPUSH
10072: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
10076: LD_VAR 0 1
10080: PPUSH
10081: CALL_OW 266
10085: PUSH
10086: LD_INT 17
10088: EQUAL
10089: IFFALSE 10172
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 2 , 2 , 3 , 3 ] [ Difficulty ] , 1 , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , true ) ;
10091: LD_INT 2
10093: PPUSH
10094: LD_INT 2
10096: PPUSH
10097: LD_EXP 52
10101: PPUSH
10102: LD_INT 34
10104: PPUSH
10105: LD_INT 39
10107: PPUSH
10108: LD_INT 40
10110: PPUSH
10111: LD_INT 35
10113: PPUSH
10114: LD_INT 2
10116: PUSH
10117: LD_INT 2
10119: PUSH
10120: LD_INT 3
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PUSH
10132: LD_OWVAR 67
10136: ARRAY
10137: PPUSH
10138: LD_INT 1
10140: PPUSH
10141: LD_INT 1
10143: PUSH
10144: LD_INT 1
10146: PUSH
10147: LD_INT 2
10149: PUSH
10150: LD_INT 2
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: PUSH
10159: LD_OWVAR 67
10163: ARRAY
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: CALL 10988 0 11
// end ; end ;
10172: PPOPN 1
10174: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
10175: LD_VAR 0 2
10179: PPUSH
10180: CALL_OW 255
10184: PUSH
10185: LD_INT 3
10187: EQUAL
10188: PUSH
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 248
10198: PUSH
10199: LD_INT 3
10201: EQUAL
10202: AND
10203: PUSH
10204: LD_EXP 10
10208: NOT
10209: AND
10210: IFFALSE 10221
// Dial_TameApe ( human ) ;
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL 4491 0 1
// end ;
10221: PPOPN 2
10223: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10224: LD_VAR 0 1
10228: PUSH
10229: LD_INT 1
10231: EQUAL
10232: PUSH
10233: LD_VAR 0 2
10237: PPUSH
10238: CALL_OW 255
10242: PUSH
10243: LD_INT 3
10245: EQUAL
10246: AND
10247: IFFALSE 10253
// Dial_ResearchApeLang ;
10249: CALL 4380 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10253: LD_VAR 0 1
10257: PUSH
10258: LD_INT 2
10260: EQUAL
10261: PUSH
10262: LD_VAR 0 2
10266: PPUSH
10267: CALL_OW 255
10271: PUSH
10272: LD_INT 3
10274: EQUAL
10275: AND
10276: IFFALSE 10282
// Dial_ResearchApePsych ;
10278: CALL 4924 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10282: LD_VAR 0 1
10286: PUSH
10287: LD_INT 11
10289: EQUAL
10290: PUSH
10291: LD_VAR 0 2
10295: PPUSH
10296: CALL_OW 255
10300: PUSH
10301: LD_INT 3
10303: EQUAL
10304: AND
10305: IFFALSE 10311
// Dial_ResearchApeAgress ;
10307: CALL 5116 0 0
// end ;
10311: PPOPN 2
10313: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 255
10323: PUSH
10324: LD_INT 3
10326: EQUAL
10327: PUSH
10328: LD_VAR 0 2
10332: PPUSH
10333: CALL_OW 257
10337: PUSH
10338: LD_INT 12
10340: EQUAL
10341: AND
10342: PUSH
10343: LD_VAR 0 1
10347: PPUSH
10348: CALL_OW 266
10352: PUSH
10353: LD_INT 6
10355: EQUAL
10356: PUSH
10357: LD_VAR 0 1
10361: PPUSH
10362: CALL_OW 266
10366: PUSH
10367: LD_INT 7
10369: EQUAL
10370: OR
10371: AND
10372: PUSH
10373: LD_EXP 11
10377: NOT
10378: AND
10379: IFFALSE 10385
// Dial_ApeEnterLab ;
10381: CALL 4712 0 0
// end ;
10385: PPOPN 2
10387: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10388: LD_VAR 0 1
10392: PUSH
10393: LD_EXP 53
10397: IN
10398: IFFALSE 10416
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10400: LD_ADDR_EXP 53
10404: PUSH
10405: LD_EXP 53
10409: PUSH
10410: LD_VAR 0 1
10414: DIFF
10415: ST_TO_ADDR
// if unit in arabianHovercrafts then
10416: LD_VAR 0 1
10420: PUSH
10421: LD_EXP 54
10425: IN
10426: IFFALSE 10444
// arabianHovercrafts = arabianHovercrafts diff unit ;
10428: LD_ADDR_EXP 54
10432: PUSH
10433: LD_EXP 54
10437: PUSH
10438: LD_VAR 0 1
10442: DIFF
10443: ST_TO_ADDR
// if unit in arabianPatrolTroops then
10444: LD_VAR 0 1
10448: PUSH
10449: LD_EXP 55
10453: IN
10454: IFFALSE 10472
// arabianPatrolTroops = arabianPatrolTroops diff unit ;
10456: LD_ADDR_EXP 55
10460: PUSH
10461: LD_EXP 55
10465: PUSH
10466: LD_VAR 0 1
10470: DIFF
10471: ST_TO_ADDR
// end ;
10472: PPOPN 1
10474: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10475: LD_VAR 0 1
10479: PUSH
10480: LD_EXP 52
10484: IN
10485: IFFALSE 10503
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10487: LD_ADDR_EXP 52
10491: PUSH
10492: LD_EXP 52
10496: PUSH
10497: LD_VAR 0 1
10501: DIFF
10502: ST_TO_ADDR
// if unit = Burlak then
10503: LD_VAR 0 1
10507: PUSH
10508: LD_EXP 40
10512: EQUAL
10513: IFFALSE 10519
// Lose_Burlak ;
10515: CALL 17396 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10519: LD_INT 22
10521: PUSH
10522: LD_INT 3
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 21
10531: PUSH
10532: LD_INT 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 23
10541: PUSH
10542: LD_INT 3
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 69
10558: PUSH
10559: LD_INT 6
10561: LESS
10562: IFFALSE 10568
// Lose_Survive ;
10564: CALL 17411 0 0
// if GetType ( unit ) = unit_vehicle and GetSide ( unit ) = 2 and GetChassis ( unit ) = ar_hovercraft then
10568: LD_VAR 0 1
10572: PPUSH
10573: CALL_OW 247
10577: PUSH
10578: LD_INT 2
10580: EQUAL
10581: PUSH
10582: LD_VAR 0 1
10586: PPUSH
10587: CALL_OW 255
10591: PUSH
10592: LD_INT 2
10594: EQUAL
10595: AND
10596: PUSH
10597: LD_VAR 0 1
10601: PPUSH
10602: CALL_OW 265
10606: PUSH
10607: LD_INT 11
10609: EQUAL
10610: AND
10611: IFFALSE 10627
// achievement_DestroyedHovercrafts = achievement_DestroyedHovercrafts + 1 ;
10613: LD_ADDR_EXP 26
10617: PUSH
10618: LD_EXP 26
10622: PUSH
10623: LD_INT 1
10625: PLUS
10626: ST_TO_ADDR
// end ;
10627: PPOPN 1
10629: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10630: LD_VAR 0 1
10634: PUSH
10635: LD_INT 3
10637: EQUAL
10638: PUSH
10639: LD_VAR 0 2
10643: PUSH
10644: LD_INT 6
10646: EQUAL
10647: AND
10648: PUSH
10649: LD_VAR 0 1
10653: PUSH
10654: LD_INT 6
10656: EQUAL
10657: PUSH
10658: LD_VAR 0 2
10662: PUSH
10663: LD_INT 3
10665: EQUAL
10666: AND
10667: OR
10668: PUSH
10669: LD_EXP 58
10673: PPUSH
10674: CALL_OW 255
10678: PUSH
10679: LD_INT 6
10681: EQUAL
10682: AND
10683: IFFALSE 10741
// begin stevensFollow = false ;
10685: LD_ADDR_EXP 15
10689: PUSH
10690: LD_INT 0
10692: ST_TO_ADDR
// stevensCanExitMap = true ;
10693: LD_ADDR_EXP 19
10697: PUSH
10698: LD_INT 1
10700: ST_TO_ADDR
// stevensWasInDepot = false ;
10701: LD_ADDR_EXP 18
10705: PUSH
10706: LD_INT 0
10708: ST_TO_ADDR
// stevensDepot = false ;
10709: LD_ADDR_EXP 17
10713: PUSH
10714: LD_INT 0
10716: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10717: LD_EXP 58
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10729: LD_EXP 58
10733: PPUSH
10734: LD_INT 37
10736: PPUSH
10737: CALL_OW 113
// end ; end ; end_of_file
10741: PPOPN 2
10743: END
// export function BuildBase ; var engs ; begin
10744: LD_INT 0
10746: PPUSH
10747: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10748: LD_ADDR_VAR 0 2
10752: PUSH
10753: LD_INT 22
10755: PUSH
10756: LD_INT 2
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 21
10765: PUSH
10766: LD_INT 1
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 25
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 69
10792: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10793: LD_VAR 0 2
10797: PPUSH
10798: LD_INT 4
10800: PPUSH
10801: LD_INT 129
10803: PPUSH
10804: LD_INT 74
10806: PPUSH
10807: LD_INT 2
10809: PPUSH
10810: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10814: LD_VAR 0 2
10818: PPUSH
10819: LD_INT 26
10821: PPUSH
10822: LD_INT 128
10824: PPUSH
10825: LD_INT 53
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 127 , 56 , 1 ) ;
10835: LD_VAR 0 2
10839: PPUSH
10840: LD_INT 26
10842: PPUSH
10843: LD_INT 127
10845: PPUSH
10846: LD_INT 56
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10856: LD_VAR 0 2
10860: PPUSH
10861: LD_INT 6
10863: PPUSH
10864: LD_INT 138
10866: PPUSH
10867: LD_INT 78
10869: PPUSH
10870: LD_INT 5
10872: PPUSH
10873: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10877: LD_VAR 0 2
10881: PPUSH
10882: LD_INT 2
10884: PPUSH
10885: LD_INT 137
10887: PPUSH
10888: LD_INT 63
10890: PPUSH
10891: LD_INT 4
10893: PPUSH
10894: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10898: LD_VAR 0 2
10902: PPUSH
10903: LD_INT 23
10905: PPUSH
10906: LD_INT 137
10908: PPUSH
10909: LD_INT 60
10911: PPUSH
10912: LD_INT 3
10914: PPUSH
10915: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10919: LD_VAR 0 2
10923: PPUSH
10924: LD_INT 16
10926: PPUSH
10927: LD_INT 140
10929: PPUSH
10930: LD_INT 66
10932: PPUSH
10933: LD_INT 5
10935: PPUSH
10936: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10940: LD_VAR 0 2
10944: PPUSH
10945: LD_INT 17
10947: PPUSH
10948: LD_INT 133
10950: PPUSH
10951: LD_INT 59
10953: PPUSH
10954: LD_INT 2
10956: PPUSH
10957: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10961: LD_INT 1
10963: PUSH
10964: LD_EXP 51
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PPUSH
10973: LD_INT 128
10975: PPUSH
10976: LD_INT 66
10978: PPUSH
10979: CALL_OW 111
// end ;
10983: LD_VAR 0 1
10987: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , offensiveReadyCounter , target1 , target2 , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10988: LD_INT 0
10990: PPUSH
10991: PPUSH
10992: PPUSH
10993: PPUSH
10994: PPUSH
10995: PPUSH
10996: PPUSH
10997: PPUSH
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
11004: PPUSH
11005: PPUSH
11006: PPUSH
11007: PPUSH
11008: PPUSH
11009: PPUSH
11010: PPUSH
11011: PPUSH
11012: PPUSH
11013: PPUSH
11014: PPUSH
11015: PPUSH
11016: PPUSH
11017: PPUSH
11018: PPUSH
11019: PPUSH
11020: PPUSH
11021: PPUSH
// personel = [ ] ;
11022: LD_ADDR_VAR 0 18
11026: PUSH
11027: EMPTY
11028: ST_TO_ADDR
// vehicles = [ ] ;
11029: LD_ADDR_VAR 0 24
11033: PUSH
11034: EMPTY
11035: ST_TO_ADDR
// for unit in basePersonel do
11036: LD_ADDR_VAR 0 17
11040: PUSH
11041: LD_VAR 0 3
11045: PUSH
11046: FOR_IN
11047: IFFALSE 11095
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11049: LD_ADDR_VAR 0 18
11053: PUSH
11054: LD_VAR 0 18
11058: PUSH
11059: LD_VAR 0 17
11063: PUSH
11064: LD_VAR 0 17
11068: PPUSH
11069: CALL_OW 310
11073: PUSH
11074: LD_VAR 0 17
11078: PPUSH
11079: CALL_OW 302
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: ADD
11092: ST_TO_ADDR
11093: GO 11046
11095: POP
11096: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
11097: LD_ADDR_VAR 0 23
11101: PUSH
11102: LD_VAR 0 4
11106: PPUSH
11107: LD_INT 22
11109: PUSH
11110: LD_VAR 0 1
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 21
11121: PUSH
11122: LD_INT 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 50
11131: PUSH
11132: EMPTY
11133: LIST
11134: PUSH
11135: LD_INT 3
11137: PUSH
11138: LD_INT 2
11140: PUSH
11141: LD_INT 31
11143: PUSH
11144: LD_INT 31
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 34
11153: PUSH
11154: LD_INT 12
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 34
11163: PUSH
11164: LD_INT 51
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 34
11173: PUSH
11174: LD_INT 32
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 70
11202: PUSH
11203: LD_EXP 53
11207: DIFF
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11258
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11212: LD_ADDR_VAR 0 24
11216: PUSH
11217: LD_VAR 0 24
11221: PUSH
11222: LD_VAR 0 23
11226: PUSH
11227: LD_VAR 0 23
11231: PPUSH
11232: CALL_OW 310
11236: PUSH
11237: LD_VAR 0 23
11241: PPUSH
11242: CALL_OW 302
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: ADD
11255: ST_TO_ADDR
11256: GO 11209
11258: POP
11259: POP
// repeat soldiers = [ ] ;
11260: LD_ADDR_VAR 0 19
11264: PUSH
11265: EMPTY
11266: ST_TO_ADDR
// engineers = [ ] ;
11267: LD_ADDR_VAR 0 20
11271: PUSH
11272: EMPTY
11273: ST_TO_ADDR
// mechanics = [ ] ;
11274: LD_ADDR_VAR 0 21
11278: PUSH
11279: EMPTY
11280: ST_TO_ADDR
// scientists = [ ] ;
11281: LD_ADDR_VAR 0 22
11285: PUSH
11286: EMPTY
11287: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11288: LD_ADDR_VAR 0 33
11292: PUSH
11293: LD_VAR 0 4
11297: PPUSH
11298: LD_INT 22
11300: PUSH
11301: LD_VAR 0 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 21
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 50
11322: PUSH
11323: EMPTY
11324: LIST
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 0
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 30
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 70
11364: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11365: LD_ADDR_VAR 0 34
11369: PUSH
11370: LD_VAR 0 4
11374: PPUSH
11375: LD_INT 22
11377: PUSH
11378: LD_VAR 0 1
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 21
11389: PUSH
11390: LD_INT 3
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 50
11399: PUSH
11400: EMPTY
11401: LIST
11402: PUSH
11403: LD_INT 2
11405: PUSH
11406: LD_INT 30
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 30
11418: PUSH
11419: LD_INT 3
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 70
11441: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11442: LD_ADDR_VAR 0 35
11446: PUSH
11447: LD_VAR 0 4
11451: PPUSH
11452: LD_INT 22
11454: PUSH
11455: LD_VAR 0 1
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 21
11466: PUSH
11467: LD_INT 3
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: EMPTY
11478: LIST
11479: PUSH
11480: LD_INT 2
11482: PUSH
11483: LD_INT 30
11485: PUSH
11486: LD_INT 6
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 7
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 30
11505: PUSH
11506: LD_INT 8
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PPUSH
11525: CALL_OW 70
11529: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11530: LD_ADDR_VAR 0 36
11534: PUSH
11535: LD_VAR 0 4
11539: PPUSH
11540: LD_INT 22
11542: PUSH
11543: LD_VAR 0 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 21
11554: PUSH
11555: LD_INT 3
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 50
11564: PUSH
11565: EMPTY
11566: LIST
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 30
11573: PUSH
11574: LD_INT 31
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 30
11583: PUSH
11584: LD_INT 32
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 70
11606: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11607: LD_ADDR_VAR 0 37
11611: PUSH
11612: LD_VAR 0 4
11616: PPUSH
11617: LD_INT 22
11619: PUSH
11620: LD_VAR 0 1
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 21
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 50
11641: PUSH
11642: EMPTY
11643: LIST
11644: PUSH
11645: LD_INT 2
11647: PUSH
11648: LD_INT 30
11650: PUSH
11651: LD_INT 4
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 30
11660: PUSH
11661: LD_INT 5
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 70
11683: ST_TO_ADDR
// for i := 1 to personel do
11684: LD_ADDR_VAR 0 13
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_VAR 0 18
11698: PUSH
11699: FOR_TO
11700: IFFALSE 11906
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11702: LD_VAR 0 18
11706: PUSH
11707: LD_VAR 0 13
11711: ARRAY
11712: PUSH
11713: LD_INT 1
11715: ARRAY
11716: PPUSH
11717: CALL_OW 256
11721: PUSH
11722: LD_INT 1000
11724: EQUAL
11725: IFFALSE 11767
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11727: LD_ADDR_VAR 0 18
11731: PUSH
11732: LD_VAR 0 18
11736: PPUSH
11737: LD_VAR 0 13
11741: PUSH
11742: LD_VAR 0 18
11746: PUSH
11747: LD_VAR 0 13
11751: ARRAY
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: LD_INT 1
11759: PPUSH
11760: CALL 26385 0 3
11764: ST_TO_ADDR
// end else
11765: GO 11854
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11767: LD_VAR 0 18
11771: PUSH
11772: LD_VAR 0 13
11776: ARRAY
11777: PUSH
11778: LD_INT 1
11780: ARRAY
11781: PPUSH
11782: CALL_OW 256
11786: PUSH
11787: LD_INT 950
11789: LESSEQUAL
11790: IFFALSE 11854
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
11792: LD_ADDR_VAR 0 18
11796: PUSH
11797: LD_VAR 0 18
11801: PPUSH
11802: LD_VAR 0 13
11806: PUSH
11807: LD_VAR 0 18
11811: PUSH
11812: LD_VAR 0 13
11816: ARRAY
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PPUSH
11822: LD_INT 0
11824: PPUSH
11825: CALL 26385 0 3
11829: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11830: LD_VAR 0 18
11834: PUSH
11835: LD_VAR 0 13
11839: ARRAY
11840: PUSH
11841: LD_INT 1
11843: ARRAY
11844: PPUSH
11845: LD_VAR 0 5
11849: PPUSH
11850: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11854: LD_VAR 0 18
11858: PUSH
11859: LD_VAR 0 13
11863: ARRAY
11864: PUSH
11865: LD_INT 1
11867: ARRAY
11868: PPUSH
11869: CALL_OW 256
11873: PUSH
11874: LD_INT 250
11876: LESS
11877: IFFALSE 11904
// personel = personel diff [ personel [ i ] ] ;
11879: LD_ADDR_VAR 0 18
11883: PUSH
11884: LD_VAR 0 18
11888: PUSH
11889: LD_VAR 0 18
11893: PUSH
11894: LD_VAR 0 13
11898: ARRAY
11899: PUSH
11900: EMPTY
11901: LIST
11902: DIFF
11903: ST_TO_ADDR
// end ;
11904: GO 11699
11906: POP
11907: POP
// for i := 1 to vehicles do
11908: LD_ADDR_VAR 0 13
11912: PUSH
11913: DOUBLE
11914: LD_INT 1
11916: DEC
11917: ST_TO_ADDR
11918: LD_VAR 0 24
11922: PUSH
11923: FOR_TO
11924: IFFALSE 12310
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
11926: LD_VAR 0 24
11930: PUSH
11931: LD_VAR 0 13
11935: ARRAY
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: CALL_OW 261
11945: PUSH
11946: LD_INT 50
11948: LESS
11949: IFFALSE 11973
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
11951: LD_VAR 0 24
11955: PUSH
11956: LD_VAR 0 13
11960: ARRAY
11961: PUSH
11962: LD_INT 1
11964: ARRAY
11965: PPUSH
11966: LD_INT 100
11968: PPUSH
11969: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11973: LD_VAR 0 24
11977: PUSH
11978: LD_VAR 0 13
11982: ARRAY
11983: PUSH
11984: LD_INT 1
11986: ARRAY
11987: PPUSH
11988: CALL_OW 256
11992: PUSH
11993: LD_INT 1000
11995: EQUAL
11996: IFFALSE 12171
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11998: LD_VAR 0 24
12002: PUSH
12003: LD_VAR 0 13
12007: ARRAY
12008: PUSH
12009: LD_INT 1
12011: ARRAY
12012: PPUSH
12013: CALL_OW 263
12017: PUSH
12018: LD_INT 1
12020: EQUAL
12021: IFFALSE 12079
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
12023: LD_VAR 0 24
12027: PUSH
12028: LD_VAR 0 13
12032: ARRAY
12033: PUSH
12034: LD_INT 2
12036: ARRAY
12037: PPUSH
12038: CALL_OW 310
12042: NOT
12043: IFFALSE 12079
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12045: LD_VAR 0 24
12049: PUSH
12050: LD_VAR 0 13
12054: ARRAY
12055: PUSH
12056: LD_INT 2
12058: ARRAY
12059: PPUSH
12060: LD_VAR 0 24
12064: PUSH
12065: LD_VAR 0 13
12069: ARRAY
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: PPUSH
12075: CALL_OW 120
// if offensiveunits < vehiclesToAttackAmount then
12079: LD_VAR 0 27
12083: PUSH
12084: LD_VAR 0 10
12088: LESS
12089: IFFALSE 12131
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
12091: LD_ADDR_VAR 0 24
12095: PUSH
12096: LD_VAR 0 24
12100: PPUSH
12101: LD_VAR 0 13
12105: PUSH
12106: LD_VAR 0 24
12110: PUSH
12111: LD_VAR 0 13
12115: ARRAY
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PPUSH
12121: LD_INT 3
12123: PPUSH
12124: CALL 26385 0 3
12128: ST_TO_ADDR
12129: GO 12169
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12131: LD_ADDR_VAR 0 24
12135: PUSH
12136: LD_VAR 0 24
12140: PPUSH
12141: LD_VAR 0 13
12145: PUSH
12146: LD_VAR 0 24
12150: PUSH
12151: LD_VAR 0 13
12155: ARRAY
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PPUSH
12161: LD_INT 2
12163: PPUSH
12164: CALL 26385 0 3
12168: ST_TO_ADDR
// end else
12169: GO 12258
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12171: LD_VAR 0 24
12175: PUSH
12176: LD_VAR 0 13
12180: ARRAY
12181: PUSH
12182: LD_INT 1
12184: ARRAY
12185: PPUSH
12186: CALL_OW 256
12190: PUSH
12191: LD_INT 650
12193: LESSEQUAL
12194: IFFALSE 12258
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12196: LD_ADDR_VAR 0 24
12200: PUSH
12201: LD_VAR 0 24
12205: PPUSH
12206: LD_VAR 0 13
12210: PUSH
12211: LD_VAR 0 24
12215: PUSH
12216: LD_VAR 0 13
12220: ARRAY
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL 26385 0 3
12233: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12234: LD_VAR 0 24
12238: PUSH
12239: LD_VAR 0 13
12243: ARRAY
12244: PUSH
12245: LD_INT 1
12247: ARRAY
12248: PPUSH
12249: LD_VAR 0 6
12253: PPUSH
12254: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12258: LD_VAR 0 24
12262: PUSH
12263: LD_VAR 0 13
12267: ARRAY
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 256
12277: PUSH
12278: LD_INT 250
12280: LESS
12281: IFFALSE 12308
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12283: LD_ADDR_VAR 0 24
12287: PUSH
12288: LD_VAR 0 24
12292: PUSH
12293: LD_VAR 0 24
12297: PUSH
12298: LD_VAR 0 13
12302: ARRAY
12303: PUSH
12304: EMPTY
12305: LIST
12306: DIFF
12307: ST_TO_ADDR
// end ;
12308: GO 11923
12310: POP
12311: POP
// for i := 1 to personel do
12312: LD_ADDR_VAR 0 13
12316: PUSH
12317: DOUBLE
12318: LD_INT 1
12320: DEC
12321: ST_TO_ADDR
12322: LD_VAR 0 18
12326: PUSH
12327: FOR_TO
12328: IFFALSE 12369
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12330: LD_ADDR_VAR 0 19
12334: PUSH
12335: LD_VAR 0 19
12339: PUSH
12340: LD_VAR 0 18
12344: PUSH
12345: LD_VAR 0 13
12349: ARRAY
12350: PPUSH
12351: LD_INT 25
12353: PUSH
12354: LD_INT 1
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 72
12365: ADD
12366: ST_TO_ADDR
12367: GO 12327
12369: POP
12370: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12371: LD_VAR 0 19
12375: PUSH
12376: LD_VAR 0 36
12380: PPUSH
12381: LD_INT 3
12383: PUSH
12384: LD_INT 59
12386: PUSH
12387: EMPTY
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 72
12398: AND
12399: IFFALSE 12687
// begin for i := 1 to personel do
12401: LD_ADDR_VAR 0 13
12405: PUSH
12406: DOUBLE
12407: LD_INT 1
12409: DEC
12410: ST_TO_ADDR
12411: LD_VAR 0 18
12415: PUSH
12416: FOR_TO
12417: IFFALSE 12683
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12419: LD_VAR 0 18
12423: PUSH
12424: LD_VAR 0 13
12428: ARRAY
12429: PUSH
12430: LD_INT 1
12432: ARRAY
12433: PPUSH
12434: CALL_OW 257
12438: PUSH
12439: LD_INT 1
12441: EQUAL
12442: PUSH
12443: LD_VAR 0 18
12447: PUSH
12448: LD_VAR 0 13
12452: ARRAY
12453: PUSH
12454: LD_INT 3
12456: ARRAY
12457: PUSH
12458: LD_INT 1
12460: EQUAL
12461: AND
12462: IFFALSE 12681
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12464: LD_VAR 0 18
12468: PUSH
12469: LD_VAR 0 13
12473: ARRAY
12474: PUSH
12475: LD_INT 1
12477: ARRAY
12478: PPUSH
12479: CALL_OW 437
12483: IFFALSE 12584
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12485: LD_VAR 0 18
12489: PUSH
12490: LD_VAR 0 13
12494: ARRAY
12495: PUSH
12496: LD_INT 1
12498: ARRAY
12499: PPUSH
12500: CALL_OW 437
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PUSH
12513: LD_STRING e
12515: EQUAL
12516: PUSH
12517: LD_VAR 0 18
12521: PUSH
12522: LD_VAR 0 13
12526: ARRAY
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: CALL_OW 437
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: PUSH
12541: LD_INT 4
12543: ARRAY
12544: PPUSH
12545: CALL_OW 266
12549: PUSH
12550: LD_INT 4
12552: PUSH
12553: LD_INT 5
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: IN
12560: AND
12561: IFFALSE 12584
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12563: LD_VAR 0 18
12567: PUSH
12568: LD_VAR 0 13
12572: ARRAY
12573: PUSH
12574: LD_INT 1
12576: ARRAY
12577: PPUSH
12578: EMPTY
12579: PPUSH
12580: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12584: LD_ADDR_VAR 0 40
12588: PUSH
12589: LD_VAR 0 36
12593: PPUSH
12594: LD_INT 3
12596: PUSH
12597: LD_INT 59
12599: PUSH
12600: EMPTY
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 72
12611: PUSH
12612: FOR_IN
12613: IFFALSE 12679
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12615: LD_VAR 0 18
12619: PUSH
12620: LD_VAR 0 13
12624: ARRAY
12625: PUSH
12626: LD_INT 1
12628: ARRAY
12629: PPUSH
12630: CALL_OW 310
12634: PPUSH
12635: CALL_OW 266
12639: PUSH
12640: LD_INT 31
12642: PUSH
12643: LD_INT 32
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: IN
12650: NOT
12651: IFFALSE 12677
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12653: LD_VAR 0 18
12657: PUSH
12658: LD_VAR 0 13
12662: ARRAY
12663: PUSH
12664: LD_INT 1
12666: ARRAY
12667: PPUSH
12668: LD_VAR 0 40
12672: PPUSH
12673: CALL_OW 120
12677: GO 12612
12679: POP
12680: POP
// end ; end ;
12681: GO 12416
12683: POP
12684: POP
// end else
12685: GO 12902
// if soldiers and barracks then
12687: LD_VAR 0 19
12691: PUSH
12692: LD_VAR 0 37
12696: AND
12697: IFFALSE 12902
// for i := 1 to personel do
12699: LD_ADDR_VAR 0 13
12703: PUSH
12704: DOUBLE
12705: LD_INT 1
12707: DEC
12708: ST_TO_ADDR
12709: LD_VAR 0 18
12713: PUSH
12714: FOR_TO
12715: IFFALSE 12900
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12717: LD_VAR 0 18
12721: PUSH
12722: LD_VAR 0 13
12726: ARRAY
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PPUSH
12732: CALL_OW 257
12736: PUSH
12737: LD_INT 1
12739: EQUAL
12740: PUSH
12741: LD_VAR 0 18
12745: PUSH
12746: LD_VAR 0 13
12750: ARRAY
12751: PUSH
12752: LD_INT 3
12754: ARRAY
12755: PUSH
12756: LD_INT 1
12758: EQUAL
12759: AND
12760: PUSH
12761: LD_VAR 0 18
12765: PUSH
12766: LD_VAR 0 13
12770: ARRAY
12771: PUSH
12772: LD_INT 1
12774: ARRAY
12775: PPUSH
12776: LD_INT 56
12778: PUSH
12779: EMPTY
12780: LIST
12781: PPUSH
12782: CALL_OW 72
12786: AND
12787: IFFALSE 12898
// begin if not personel [ i ] [ 2 ] then
12789: LD_VAR 0 18
12793: PUSH
12794: LD_VAR 0 13
12798: ARRAY
12799: PUSH
12800: LD_INT 2
12802: ARRAY
12803: NOT
12804: IFFALSE 12864
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12806: LD_ADDR_VAR 0 18
12810: PUSH
12811: LD_VAR 0 18
12815: PPUSH
12816: LD_VAR 0 13
12820: PUSH
12821: LD_VAR 0 18
12825: PUSH
12826: LD_VAR 0 13
12830: ARRAY
12831: PUSH
12832: LD_INT 1
12834: MINUS
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: LD_VAR 0 37
12844: PUSH
12845: LD_INT 1
12847: PPUSH
12848: LD_VAR 0 37
12852: PPUSH
12853: CALL_OW 12
12857: ARRAY
12858: PPUSH
12859: CALL 26385 0 3
12863: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12864: LD_VAR 0 18
12868: PUSH
12869: LD_VAR 0 13
12873: ARRAY
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 18
12883: PUSH
12884: LD_VAR 0 13
12888: ARRAY
12889: PUSH
12890: LD_INT 2
12892: ARRAY
12893: PPUSH
12894: CALL_OW 120
// end ;
12898: GO 12714
12900: POP
12901: POP
// for i := 1 to personel do
12902: LD_ADDR_VAR 0 13
12906: PUSH
12907: DOUBLE
12908: LD_INT 1
12910: DEC
12911: ST_TO_ADDR
12912: LD_VAR 0 18
12916: PUSH
12917: FOR_TO
12918: IFFALSE 12959
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12920: LD_ADDR_VAR 0 20
12924: PUSH
12925: LD_VAR 0 20
12929: PUSH
12930: LD_VAR 0 18
12934: PUSH
12935: LD_VAR 0 13
12939: ARRAY
12940: PPUSH
12941: LD_INT 25
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 72
12955: ADD
12956: ST_TO_ADDR
12957: GO 12917
12959: POP
12960: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12961: LD_VAR 0 20
12965: PUSH
12966: LD_VAR 0 4
12970: PPUSH
12971: LD_INT 22
12973: PUSH
12974: LD_VAR 0 1
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 21
12985: PUSH
12986: LD_INT 3
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 3
12995: PUSH
12996: LD_INT 24
12998: PUSH
12999: LD_INT 1000
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: PPUSH
13015: CALL_OW 70
13019: AND
13020: IFFALSE 13296
// begin for i := 1 to personel do
13022: LD_ADDR_VAR 0 13
13026: PUSH
13027: DOUBLE
13028: LD_INT 1
13030: DEC
13031: ST_TO_ADDR
13032: LD_VAR 0 18
13036: PUSH
13037: FOR_TO
13038: IFFALSE 13292
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13040: LD_VAR 0 18
13044: PUSH
13045: LD_VAR 0 13
13049: ARRAY
13050: PUSH
13051: LD_INT 1
13053: ARRAY
13054: PPUSH
13055: CALL_OW 257
13059: PUSH
13060: LD_INT 2
13062: EQUAL
13063: PUSH
13064: LD_VAR 0 18
13068: PUSH
13069: LD_VAR 0 13
13073: ARRAY
13074: PUSH
13075: LD_INT 3
13077: ARRAY
13078: PUSH
13079: LD_INT 1
13081: EQUAL
13082: AND
13083: IFFALSE 13290
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13085: LD_VAR 0 18
13089: PUSH
13090: LD_VAR 0 13
13094: ARRAY
13095: PUSH
13096: LD_INT 1
13098: ARRAY
13099: PPUSH
13100: CALL_OW 437
13104: IFFALSE 13160
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13106: LD_VAR 0 18
13110: PUSH
13111: LD_VAR 0 13
13115: ARRAY
13116: PUSH
13117: LD_INT 1
13119: ARRAY
13120: PPUSH
13121: CALL_OW 437
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PUSH
13130: LD_INT 1
13132: ARRAY
13133: PUSH
13134: LD_STRING e
13136: EQUAL
13137: IFFALSE 13160
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13139: LD_VAR 0 18
13143: PUSH
13144: LD_VAR 0 13
13148: ARRAY
13149: PUSH
13150: LD_INT 1
13152: ARRAY
13153: PPUSH
13154: EMPTY
13155: PPUSH
13156: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13160: LD_VAR 0 18
13164: PUSH
13165: LD_VAR 0 13
13169: ARRAY
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: CALL_OW 310
13179: IFFALSE 13200
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13181: LD_VAR 0 18
13185: PUSH
13186: LD_VAR 0 13
13190: ARRAY
13191: PUSH
13192: LD_INT 1
13194: ARRAY
13195: PPUSH
13196: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13200: LD_ADDR_VAR 0 38
13204: PUSH
13205: LD_VAR 0 4
13209: PPUSH
13210: LD_INT 22
13212: PUSH
13213: LD_VAR 0 1
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 21
13224: PUSH
13225: LD_INT 3
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 3
13234: PUSH
13235: LD_INT 24
13237: PUSH
13238: LD_INT 1000
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 70
13258: PUSH
13259: FOR_IN
13260: IFFALSE 13288
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13262: LD_VAR 0 18
13266: PUSH
13267: LD_VAR 0 13
13271: ARRAY
13272: PUSH
13273: LD_INT 1
13275: ARRAY
13276: PPUSH
13277: LD_VAR 0 38
13281: PPUSH
13282: CALL_OW 190
13286: GO 13259
13288: POP
13289: POP
// end ;
13290: GO 13037
13292: POP
13293: POP
// end else
13294: GO 13558
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13296: LD_VAR 0 20
13300: PUSH
13301: LD_VAR 0 20
13305: PPUSH
13306: LD_INT 56
13308: PUSH
13309: EMPTY
13310: LIST
13311: PPUSH
13312: CALL_OW 72
13316: AND
13317: PUSH
13318: LD_VAR 0 33
13322: AND
13323: IFFALSE 13558
// for i := 1 to personel do
13325: LD_ADDR_VAR 0 13
13329: PUSH
13330: DOUBLE
13331: LD_INT 1
13333: DEC
13334: ST_TO_ADDR
13335: LD_VAR 0 18
13339: PUSH
13340: FOR_TO
13341: IFFALSE 13556
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13343: LD_VAR 0 18
13347: PUSH
13348: LD_VAR 0 13
13352: ARRAY
13353: PUSH
13354: LD_INT 1
13356: ARRAY
13357: PPUSH
13358: CALL_OW 257
13362: PUSH
13363: LD_INT 2
13365: EQUAL
13366: PUSH
13367: LD_VAR 0 18
13371: PUSH
13372: LD_VAR 0 13
13376: ARRAY
13377: PUSH
13378: LD_INT 3
13380: ARRAY
13381: PUSH
13382: LD_INT 1
13384: EQUAL
13385: AND
13386: IFFALSE 13554
// begin if not personel [ i ] [ 2 ] then
13388: LD_VAR 0 18
13392: PUSH
13393: LD_VAR 0 13
13397: ARRAY
13398: PUSH
13399: LD_INT 2
13401: ARRAY
13402: NOT
13403: IFFALSE 13520
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13405: LD_ADDR_VAR 0 18
13409: PUSH
13410: LD_VAR 0 18
13414: PPUSH
13415: LD_VAR 0 13
13419: PUSH
13420: LD_VAR 0 18
13424: PUSH
13425: LD_VAR 0 13
13429: ARRAY
13430: PUSH
13431: LD_INT 1
13433: MINUS
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: LD_VAR 0 4
13443: PPUSH
13444: LD_INT 22
13446: PUSH
13447: LD_VAR 0 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 21
13458: PUSH
13459: LD_INT 3
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 50
13468: PUSH
13469: EMPTY
13470: LIST
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: LD_INT 30
13477: PUSH
13478: LD_INT 0
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 30
13487: PUSH
13488: LD_INT 1
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 70
13510: PUSH
13511: LD_INT 1
13513: ARRAY
13514: PPUSH
13515: CALL 26385 0 3
13519: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13520: LD_VAR 0 18
13524: PUSH
13525: LD_VAR 0 13
13529: ARRAY
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_VAR 0 18
13539: PUSH
13540: LD_VAR 0 13
13544: ARRAY
13545: PUSH
13546: LD_INT 2
13548: ARRAY
13549: PPUSH
13550: CALL_OW 120
// end ; end ;
13554: GO 13340
13556: POP
13557: POP
// for i := 1 to personel do
13558: LD_ADDR_VAR 0 13
13562: PUSH
13563: DOUBLE
13564: LD_INT 1
13566: DEC
13567: ST_TO_ADDR
13568: LD_VAR 0 18
13572: PUSH
13573: FOR_TO
13574: IFFALSE 13615
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13576: LD_ADDR_VAR 0 21
13580: PUSH
13581: LD_VAR 0 21
13585: PUSH
13586: LD_VAR 0 18
13590: PUSH
13591: LD_VAR 0 13
13595: ARRAY
13596: PPUSH
13597: LD_INT 25
13599: PUSH
13600: LD_INT 3
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 72
13611: ADD
13612: ST_TO_ADDR
13613: GO 13573
13615: POP
13616: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13617: LD_VAR 0 21
13621: PUSH
13622: LD_VAR 0 4
13626: PPUSH
13627: LD_INT 22
13629: PUSH
13630: LD_VAR 0 1
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 21
13641: PUSH
13642: LD_INT 2
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 3
13651: PUSH
13652: LD_INT 24
13654: PUSH
13655: LD_INT 1000
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: PPUSH
13671: CALL_OW 70
13675: AND
13676: IFFALSE 14110
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13678: LD_ADDR_VAR 0 39
13682: PUSH
13683: LD_VAR 0 4
13687: PPUSH
13688: LD_INT 22
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 21
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 3
13712: PUSH
13713: LD_INT 24
13715: PUSH
13716: LD_INT 1000
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 70
13736: PUSH
13737: FOR_IN
13738: IFFALSE 14106
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13740: LD_VAR 0 39
13744: PPUSH
13745: LD_VAR 0 6
13749: PPUSH
13750: CALL_OW 299
13754: PUSH
13755: LD_INT 5
13757: LESS
13758: IFFALSE 14104
// begin for i := 1 to vehicles do
13760: LD_ADDR_VAR 0 13
13764: PUSH
13765: DOUBLE
13766: LD_INT 1
13768: DEC
13769: ST_TO_ADDR
13770: LD_VAR 0 24
13774: PUSH
13775: FOR_TO
13776: IFFALSE 13845
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13778: LD_VAR 0 24
13782: PUSH
13783: LD_VAR 0 13
13787: ARRAY
13788: PUSH
13789: LD_INT 1
13791: ARRAY
13792: PUSH
13793: LD_VAR 0 39
13797: EQUAL
13798: IFFALSE 13819
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13800: LD_VAR 0 24
13804: PUSH
13805: LD_VAR 0 13
13809: ARRAY
13810: PUSH
13811: LD_INT 2
13813: ARRAY
13814: PPUSH
13815: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13819: LD_VAR 0 24
13823: PUSH
13824: LD_VAR 0 13
13828: ARRAY
13829: PUSH
13830: LD_INT 2
13832: ARRAY
13833: PPUSH
13834: LD_VAR 0 39
13838: PPUSH
13839: CALL_OW 189
// end ;
13843: GO 13775
13845: POP
13846: POP
// for i := 1 to personel do
13847: LD_ADDR_VAR 0 13
13851: PUSH
13852: DOUBLE
13853: LD_INT 1
13855: DEC
13856: ST_TO_ADDR
13857: LD_VAR 0 18
13861: PUSH
13862: FOR_TO
13863: IFFALSE 14102
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13865: LD_VAR 0 18
13869: PUSH
13870: LD_VAR 0 13
13874: ARRAY
13875: PUSH
13876: LD_INT 1
13878: ARRAY
13879: PPUSH
13880: CALL_OW 257
13884: PUSH
13885: LD_INT 3
13887: EQUAL
13888: PUSH
13889: LD_VAR 0 18
13893: PUSH
13894: LD_VAR 0 13
13898: ARRAY
13899: PUSH
13900: LD_INT 3
13902: ARRAY
13903: PUSH
13904: LD_INT 1
13906: EQUAL
13907: AND
13908: IFFALSE 14100
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13910: LD_VAR 0 18
13914: PUSH
13915: LD_VAR 0 13
13919: ARRAY
13920: PUSH
13921: LD_INT 1
13923: ARRAY
13924: PPUSH
13925: CALL_OW 437
13929: IFFALSE 13985
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13931: LD_VAR 0 18
13935: PUSH
13936: LD_VAR 0 13
13940: ARRAY
13941: PUSH
13942: LD_INT 1
13944: ARRAY
13945: PPUSH
13946: CALL_OW 437
13950: PUSH
13951: LD_INT 1
13953: ARRAY
13954: PUSH
13955: LD_INT 1
13957: ARRAY
13958: PUSH
13959: LD_STRING e
13961: EQUAL
13962: IFFALSE 13985
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13964: LD_VAR 0 18
13968: PUSH
13969: LD_VAR 0 13
13973: ARRAY
13974: PUSH
13975: LD_INT 1
13977: ARRAY
13978: PPUSH
13979: EMPTY
13980: PPUSH
13981: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13985: LD_VAR 0 18
13989: PUSH
13990: LD_VAR 0 13
13994: ARRAY
13995: PUSH
13996: LD_INT 1
13998: ARRAY
13999: PPUSH
14000: CALL_OW 310
14004: IFFALSE 14025
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14006: LD_VAR 0 18
14010: PUSH
14011: LD_VAR 0 13
14015: ARRAY
14016: PUSH
14017: LD_INT 1
14019: ARRAY
14020: PPUSH
14021: CALL_OW 122
// if not IsInArea ( personel [ i ] [ 1 ] , baseArea ) then
14025: LD_VAR 0 18
14029: PUSH
14030: LD_VAR 0 13
14034: ARRAY
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: PPUSH
14040: LD_VAR 0 4
14044: PPUSH
14045: CALL_OW 308
14049: NOT
14050: IFFALSE 14076
// ComMoveToArea ( personel [ i ] [ 1 ] , baseArea ) ;
14052: LD_VAR 0 18
14056: PUSH
14057: LD_VAR 0 13
14061: ARRAY
14062: PUSH
14063: LD_INT 1
14065: ARRAY
14066: PPUSH
14067: LD_VAR 0 4
14071: PPUSH
14072: CALL_OW 113
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14076: LD_VAR 0 18
14080: PUSH
14081: LD_VAR 0 13
14085: ARRAY
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: LD_VAR 0 39
14095: PPUSH
14096: CALL_OW 189
// end ;
14100: GO 13862
14102: POP
14103: POP
// end ; end ;
14104: GO 13737
14106: POP
14107: POP
// end else
14108: GO 14315
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
14110: LD_VAR 0 21
14114: PUSH
14115: LD_VAR 0 21
14119: PPUSH
14120: LD_INT 56
14122: PUSH
14123: EMPTY
14124: LIST
14125: PPUSH
14126: CALL_OW 72
14130: AND
14131: PUSH
14132: LD_VAR 0 34
14136: AND
14137: IFFALSE 14315
// for i := 1 to personel do
14139: LD_ADDR_VAR 0 13
14143: PUSH
14144: DOUBLE
14145: LD_INT 1
14147: DEC
14148: ST_TO_ADDR
14149: LD_VAR 0 18
14153: PUSH
14154: FOR_TO
14155: IFFALSE 14313
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14157: LD_VAR 0 18
14161: PUSH
14162: LD_VAR 0 13
14166: ARRAY
14167: PUSH
14168: LD_INT 1
14170: ARRAY
14171: PPUSH
14172: CALL_OW 257
14176: PUSH
14177: LD_INT 3
14179: EQUAL
14180: PUSH
14181: LD_VAR 0 18
14185: PUSH
14186: LD_VAR 0 13
14190: ARRAY
14191: PUSH
14192: LD_INT 3
14194: ARRAY
14195: PUSH
14196: LD_INT 1
14198: EQUAL
14199: AND
14200: IFFALSE 14311
// begin if not personel [ i ] [ 2 ] then
14202: LD_VAR 0 18
14206: PUSH
14207: LD_VAR 0 13
14211: ARRAY
14212: PUSH
14213: LD_INT 2
14215: ARRAY
14216: NOT
14217: IFFALSE 14277
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
14219: LD_ADDR_VAR 0 18
14223: PUSH
14224: LD_VAR 0 18
14228: PPUSH
14229: LD_VAR 0 13
14233: PUSH
14234: LD_VAR 0 18
14238: PUSH
14239: LD_VAR 0 13
14243: ARRAY
14244: PUSH
14245: LD_INT 1
14247: MINUS
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PPUSH
14253: LD_VAR 0 34
14257: PUSH
14258: LD_INT 1
14260: PPUSH
14261: LD_VAR 0 34
14265: PPUSH
14266: CALL_OW 12
14270: ARRAY
14271: PPUSH
14272: CALL 26385 0 3
14276: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14277: LD_VAR 0 18
14281: PUSH
14282: LD_VAR 0 13
14286: ARRAY
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: LD_VAR 0 18
14296: PUSH
14297: LD_VAR 0 13
14301: ARRAY
14302: PUSH
14303: LD_INT 2
14305: ARRAY
14306: PPUSH
14307: CALL_OW 120
// end ;
14311: GO 14154
14313: POP
14314: POP
// for i := 1 to personel do
14315: LD_ADDR_VAR 0 13
14319: PUSH
14320: DOUBLE
14321: LD_INT 1
14323: DEC
14324: ST_TO_ADDR
14325: LD_VAR 0 18
14329: PUSH
14330: FOR_TO
14331: IFFALSE 14372
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14333: LD_ADDR_VAR 0 22
14337: PUSH
14338: LD_VAR 0 22
14342: PUSH
14343: LD_VAR 0 18
14347: PUSH
14348: LD_VAR 0 13
14352: ARRAY
14353: PPUSH
14354: LD_INT 25
14356: PUSH
14357: LD_INT 4
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 72
14368: ADD
14369: ST_TO_ADDR
14370: GO 14330
14372: POP
14373: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14374: LD_VAR 0 22
14378: PUSH
14379: LD_VAR 0 4
14383: PPUSH
14384: LD_INT 22
14386: PUSH
14387: LD_VAR 0 1
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 21
14398: PUSH
14399: LD_INT 1
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 3
14408: PUSH
14409: LD_INT 24
14411: PUSH
14412: LD_INT 1000
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: PPUSH
14428: CALL_OW 70
14432: AND
14433: IFFALSE 14950
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14435: LD_ADDR_VAR 0 39
14439: PUSH
14440: LD_VAR 0 4
14444: PPUSH
14445: LD_INT 22
14447: PUSH
14448: LD_VAR 0 1
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: LD_INT 21
14459: PUSH
14460: LD_INT 1
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 3
14469: PUSH
14470: LD_INT 24
14472: PUSH
14473: LD_INT 1000
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: PPUSH
14489: CALL_OW 70
14493: PUSH
14494: FOR_IN
14495: IFFALSE 14946
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14497: LD_VAR 0 39
14501: PPUSH
14502: LD_VAR 0 5
14506: PPUSH
14507: CALL_OW 299
14511: PUSH
14512: LD_INT 5
14514: LESS
14515: IFFALSE 14723
// for i := 1 to personel do
14517: LD_ADDR_VAR 0 13
14521: PUSH
14522: DOUBLE
14523: LD_INT 1
14525: DEC
14526: ST_TO_ADDR
14527: LD_VAR 0 18
14531: PUSH
14532: FOR_TO
14533: IFFALSE 14721
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14535: LD_VAR 0 18
14539: PUSH
14540: LD_VAR 0 13
14544: ARRAY
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PPUSH
14550: CALL_OW 257
14554: PUSH
14555: LD_INT 4
14557: EQUAL
14558: PUSH
14559: LD_VAR 0 18
14563: PUSH
14564: LD_VAR 0 13
14568: ARRAY
14569: PUSH
14570: LD_INT 3
14572: ARRAY
14573: PUSH
14574: LD_INT 1
14576: EQUAL
14577: AND
14578: IFFALSE 14719
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14580: LD_VAR 0 18
14584: PUSH
14585: LD_VAR 0 13
14589: ARRAY
14590: PUSH
14591: LD_INT 1
14593: ARRAY
14594: PPUSH
14595: CALL_OW 437
14599: IFFALSE 14655
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14601: LD_VAR 0 18
14605: PUSH
14606: LD_VAR 0 13
14610: ARRAY
14611: PUSH
14612: LD_INT 1
14614: ARRAY
14615: PPUSH
14616: CALL_OW 437
14620: PUSH
14621: LD_INT 1
14623: ARRAY
14624: PUSH
14625: LD_INT 1
14627: ARRAY
14628: PUSH
14629: LD_STRING e
14631: EQUAL
14632: IFFALSE 14655
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14634: LD_VAR 0 18
14638: PUSH
14639: LD_VAR 0 13
14643: ARRAY
14644: PUSH
14645: LD_INT 1
14647: ARRAY
14648: PPUSH
14649: EMPTY
14650: PPUSH
14651: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14655: LD_VAR 0 18
14659: PUSH
14660: LD_VAR 0 13
14664: ARRAY
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: PPUSH
14670: CALL_OW 310
14674: IFFALSE 14695
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14676: LD_VAR 0 18
14680: PUSH
14681: LD_VAR 0 13
14685: ARRAY
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PPUSH
14691: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14695: LD_VAR 0 18
14699: PUSH
14700: LD_VAR 0 13
14704: ARRAY
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PPUSH
14710: LD_VAR 0 39
14714: PPUSH
14715: CALL_OW 188
// end ;
14719: GO 14532
14721: POP
14722: POP
// if GetLives ( damageUnit ) < 250 then
14723: LD_VAR 0 39
14727: PPUSH
14728: CALL_OW 256
14732: PUSH
14733: LD_INT 250
14735: LESS
14736: IFFALSE 14944
// for i := 1 to personel do
14738: LD_ADDR_VAR 0 13
14742: PUSH
14743: DOUBLE
14744: LD_INT 1
14746: DEC
14747: ST_TO_ADDR
14748: LD_VAR 0 18
14752: PUSH
14753: FOR_TO
14754: IFFALSE 14942
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14756: LD_VAR 0 18
14760: PUSH
14761: LD_VAR 0 13
14765: ARRAY
14766: PUSH
14767: LD_INT 1
14769: ARRAY
14770: PPUSH
14771: CALL_OW 257
14775: PUSH
14776: LD_INT 4
14778: EQUAL
14779: PUSH
14780: LD_VAR 0 18
14784: PUSH
14785: LD_VAR 0 13
14789: ARRAY
14790: PUSH
14791: LD_INT 3
14793: ARRAY
14794: PUSH
14795: LD_INT 1
14797: EQUAL
14798: AND
14799: IFFALSE 14940
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14801: LD_VAR 0 18
14805: PUSH
14806: LD_VAR 0 13
14810: ARRAY
14811: PUSH
14812: LD_INT 1
14814: ARRAY
14815: PPUSH
14816: CALL_OW 437
14820: IFFALSE 14876
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14822: LD_VAR 0 18
14826: PUSH
14827: LD_VAR 0 13
14831: ARRAY
14832: PUSH
14833: LD_INT 1
14835: ARRAY
14836: PPUSH
14837: CALL_OW 437
14841: PUSH
14842: LD_INT 1
14844: ARRAY
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PUSH
14850: LD_STRING e
14852: EQUAL
14853: IFFALSE 14876
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14855: LD_VAR 0 18
14859: PUSH
14860: LD_VAR 0 13
14864: ARRAY
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: PPUSH
14870: EMPTY
14871: PPUSH
14872: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14876: LD_VAR 0 18
14880: PUSH
14881: LD_VAR 0 13
14885: ARRAY
14886: PUSH
14887: LD_INT 1
14889: ARRAY
14890: PPUSH
14891: CALL_OW 310
14895: IFFALSE 14916
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14897: LD_VAR 0 18
14901: PUSH
14902: LD_VAR 0 13
14906: ARRAY
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14916: LD_VAR 0 18
14920: PUSH
14921: LD_VAR 0 13
14925: ARRAY
14926: PUSH
14927: LD_INT 1
14929: ARRAY
14930: PPUSH
14931: LD_VAR 0 39
14935: PPUSH
14936: CALL_OW 188
// end ;
14940: GO 14753
14942: POP
14943: POP
// end ;
14944: GO 14494
14946: POP
14947: POP
// end else
14948: GO 15155
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14950: LD_VAR 0 22
14954: PUSH
14955: LD_VAR 0 22
14959: PPUSH
14960: LD_INT 56
14962: PUSH
14963: EMPTY
14964: LIST
14965: PPUSH
14966: CALL_OW 72
14970: AND
14971: PUSH
14972: LD_VAR 0 35
14976: AND
14977: IFFALSE 15155
// for i := 1 to personel do
14979: LD_ADDR_VAR 0 13
14983: PUSH
14984: DOUBLE
14985: LD_INT 1
14987: DEC
14988: ST_TO_ADDR
14989: LD_VAR 0 18
14993: PUSH
14994: FOR_TO
14995: IFFALSE 15153
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14997: LD_VAR 0 18
15001: PUSH
15002: LD_VAR 0 13
15006: ARRAY
15007: PUSH
15008: LD_INT 1
15010: ARRAY
15011: PPUSH
15012: CALL_OW 257
15016: PUSH
15017: LD_INT 4
15019: EQUAL
15020: PUSH
15021: LD_VAR 0 18
15025: PUSH
15026: LD_VAR 0 13
15030: ARRAY
15031: PUSH
15032: LD_INT 3
15034: ARRAY
15035: PUSH
15036: LD_INT 1
15038: EQUAL
15039: AND
15040: IFFALSE 15151
// begin if not personel [ i ] [ 2 ] then
15042: LD_VAR 0 18
15046: PUSH
15047: LD_VAR 0 13
15051: ARRAY
15052: PUSH
15053: LD_INT 2
15055: ARRAY
15056: NOT
15057: IFFALSE 15117
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
15059: LD_ADDR_VAR 0 18
15063: PUSH
15064: LD_VAR 0 18
15068: PPUSH
15069: LD_VAR 0 13
15073: PUSH
15074: LD_VAR 0 18
15078: PUSH
15079: LD_VAR 0 13
15083: ARRAY
15084: PUSH
15085: LD_INT 1
15087: MINUS
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PPUSH
15093: LD_VAR 0 35
15097: PUSH
15098: LD_INT 1
15100: PPUSH
15101: LD_VAR 0 35
15105: PPUSH
15106: CALL_OW 12
15110: ARRAY
15111: PPUSH
15112: CALL 26385 0 3
15116: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15117: LD_VAR 0 18
15121: PUSH
15122: LD_VAR 0 13
15126: ARRAY
15127: PUSH
15128: LD_INT 1
15130: ARRAY
15131: PPUSH
15132: LD_VAR 0 18
15136: PUSH
15137: LD_VAR 0 13
15141: ARRAY
15142: PUSH
15143: LD_INT 2
15145: ARRAY
15146: PPUSH
15147: CALL_OW 120
// end ;
15151: GO 14994
15153: POP
15154: POP
// wait ( 0 0$01 ) ;
15155: LD_INT 35
15157: PPUSH
15158: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
15162: LD_VAR 0 24
15166: PUSH
15167: LD_VAR 0 8
15171: LESS
15172: PUSH
15173: LD_VAR 0 34
15177: AND
15178: IFFALSE 15424
// begin tmp = vehiclesAmount - vehicles ;
15180: LD_ADDR_VAR 0 15
15184: PUSH
15185: LD_VAR 0 8
15189: PUSH
15190: LD_VAR 0 24
15194: MINUS
15195: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
15196: LD_ADDR_VAR 0 31
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_VAR 0 2
15210: PPUSH
15211: CALL 9236 0 2
15215: ST_TO_ADDR
// for i := 1 to tmp do
15216: LD_ADDR_VAR 0 13
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_VAR 0 15
15230: PUSH
15231: FOR_TO
15232: IFFALSE 15420
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
15234: LD_ADDR_VAR 0 15
15238: PUSH
15239: LD_VAR 0 31
15243: PUSH
15244: LD_INT 1
15246: PPUSH
15247: LD_VAR 0 31
15251: PPUSH
15252: CALL_OW 12
15256: ARRAY
15257: ST_TO_ADDR
// if tmp then
15258: LD_VAR 0 15
15262: IFFALSE 15418
// begin if tmp in [ 34 , 14 , 71 ] then
15264: LD_VAR 0 15
15268: PUSH
15269: LD_INT 34
15271: PUSH
15272: LD_INT 14
15274: PUSH
15275: LD_INT 71
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: IN
15283: IFFALSE 15321
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15285: LD_ADDR_VAR 0 32
15289: PUSH
15290: LD_INT 4
15292: PUSH
15293: EMPTY
15294: LIST
15295: PUSH
15296: LD_INT 14
15298: PUSH
15299: EMPTY
15300: LIST
15301: PUSH
15302: LD_INT 24
15304: PUSH
15305: EMPTY
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: LIST
15312: PUSH
15313: LD_VAR 0 2
15317: ARRAY
15318: ST_TO_ADDR
15319: GO 15375
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15321: LD_ADDR_VAR 0 32
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: LD_INT 3
15331: PUSH
15332: LD_INT 4
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 14
15342: PUSH
15343: EMPTY
15344: LIST
15345: PUSH
15346: LD_INT 21
15348: PUSH
15349: LD_INT 23
15351: PUSH
15352: LD_INT 24
15354: PUSH
15355: LD_INT 22
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: LD_VAR 0 2
15373: ARRAY
15374: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15375: LD_VAR 0 34
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: LD_VAR 0 32
15388: PUSH
15389: LD_INT 1
15391: PPUSH
15392: LD_VAR 0 32
15396: PPUSH
15397: CALL_OW 12
15401: ARRAY
15402: PPUSH
15403: LD_INT 1
15405: PPUSH
15406: LD_INT 1
15408: PPUSH
15409: LD_VAR 0 15
15413: PPUSH
15414: CALL_OW 185
// end ; end ;
15418: GO 15231
15420: POP
15421: POP
// end else
15422: GO 15437
// ComCancel ( factory [ 1 ] ) ;
15424: LD_VAR 0 34
15428: PUSH
15429: LD_INT 1
15431: ARRAY
15432: PPUSH
15433: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15437: LD_ADDR_VAR 0 23
15441: PUSH
15442: LD_VAR 0 4
15446: PPUSH
15447: LD_INT 22
15449: PUSH
15450: LD_VAR 0 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 21
15461: PUSH
15462: LD_INT 2
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 50
15471: PUSH
15472: EMPTY
15473: LIST
15474: PUSH
15475: LD_INT 3
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: LD_INT 31
15483: PUSH
15484: LD_INT 31
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 34
15493: PUSH
15494: LD_INT 12
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 34
15503: PUSH
15504: LD_INT 51
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 34
15513: PUSH
15514: LD_INT 32
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 70
15542: PUSH
15543: LD_EXP 53
15547: DIFF
15548: PUSH
15549: FOR_IN
15550: IFFALSE 15713
// begin vehicleInList = false ;
15552: LD_ADDR_VAR 0 25
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// for i := 1 to vehicles do
15560: LD_ADDR_VAR 0 13
15564: PUSH
15565: DOUBLE
15566: LD_INT 1
15568: DEC
15569: ST_TO_ADDR
15570: LD_VAR 0 24
15574: PUSH
15575: FOR_TO
15576: IFFALSE 15606
// begin if vehicle in vehicles [ i ] then
15578: LD_VAR 0 23
15582: PUSH
15583: LD_VAR 0 24
15587: PUSH
15588: LD_VAR 0 13
15592: ARRAY
15593: IN
15594: IFFALSE 15604
// vehicleInList = true ;
15596: LD_ADDR_VAR 0 25
15600: PUSH
15601: LD_INT 1
15603: ST_TO_ADDR
// end ;
15604: GO 15575
15606: POP
15607: POP
// if not vehicleInList then
15608: LD_VAR 0 25
15612: NOT
15613: IFFALSE 15711
// if vehicles < vehiclesToAttackAmount then
15615: LD_VAR 0 24
15619: PUSH
15620: LD_VAR 0 10
15624: LESS
15625: IFFALSE 15670
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15627: LD_ADDR_VAR 0 24
15631: PUSH
15632: LD_VAR 0 24
15636: PUSH
15637: LD_VAR 0 23
15641: PUSH
15642: LD_VAR 0 23
15646: PPUSH
15647: CALL_OW 313
15651: PUSH
15652: LD_INT 1
15654: ARRAY
15655: PUSH
15656: LD_INT 3
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: ADD
15667: ST_TO_ADDR
15668: GO 15711
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15670: LD_ADDR_VAR 0 24
15674: PUSH
15675: LD_VAR 0 24
15679: PUSH
15680: LD_VAR 0 23
15684: PUSH
15685: LD_VAR 0 23
15689: PPUSH
15690: CALL_OW 313
15694: PUSH
15695: LD_INT 1
15697: ARRAY
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: ADD
15710: ST_TO_ADDR
// end ;
15711: GO 15549
15713: POP
15714: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15715: LD_ADDR_VAR 0 41
15719: PUSH
15720: LD_INT 81
15722: PUSH
15723: LD_VAR 0 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: PUSH
15737: FOR_IN
15738: IFFALSE 16220
// begin offensiveUnits = [ ] ;
15740: LD_ADDR_VAR 0 27
15744: PUSH
15745: EMPTY
15746: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
15747: LD_ADDR_VAR 0 28
15751: PUSH
15752: LD_INT 0
15754: ST_TO_ADDR
// for i := 1 to vehicles do
15755: LD_ADDR_VAR 0 13
15759: PUSH
15760: DOUBLE
15761: LD_INT 1
15763: DEC
15764: ST_TO_ADDR
15765: LD_VAR 0 24
15769: PUSH
15770: FOR_TO
15771: IFFALSE 15952
// if vehicles [ i ] [ 3 ] = 3 then
15773: LD_VAR 0 24
15777: PUSH
15778: LD_VAR 0 13
15782: ARRAY
15783: PUSH
15784: LD_INT 3
15786: ARRAY
15787: PUSH
15788: LD_INT 3
15790: EQUAL
15791: IFFALSE 15950
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
15793: LD_VAR 0 24
15797: PUSH
15798: LD_VAR 0 13
15802: ARRAY
15803: PUSH
15804: LD_INT 1
15806: ARRAY
15807: PPUSH
15808: CALL_OW 256
15812: PUSH
15813: LD_INT 650
15815: GREATER
15816: IFFALSE 15832
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
15818: LD_ADDR_VAR 0 28
15822: PUSH
15823: LD_VAR 0 28
15827: PUSH
15828: LD_INT 1
15830: PLUS
15831: ST_TO_ADDR
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15832: LD_ADDR_VAR 0 27
15836: PUSH
15837: LD_VAR 0 27
15841: PUSH
15842: LD_VAR 0 24
15846: PUSH
15847: LD_VAR 0 13
15851: ARRAY
15852: PUSH
15853: LD_INT 1
15855: ARRAY
15856: ADD
15857: ST_TO_ADDR
// for j = 1 to personel do
15858: LD_ADDR_VAR 0 14
15862: PUSH
15863: DOUBLE
15864: LD_INT 1
15866: DEC
15867: ST_TO_ADDR
15868: LD_VAR 0 18
15872: PUSH
15873: FOR_TO
15874: IFFALSE 15948
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15876: LD_VAR 0 18
15880: PUSH
15881: LD_VAR 0 14
15885: ARRAY
15886: PUSH
15887: LD_INT 1
15889: ARRAY
15890: PUSH
15891: LD_VAR 0 24
15895: PUSH
15896: LD_VAR 0 13
15900: ARRAY
15901: PUSH
15902: LD_INT 2
15904: ARRAY
15905: EQUAL
15906: IFFALSE 15946
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
15908: LD_ADDR_VAR 0 18
15912: PUSH
15913: LD_VAR 0 18
15917: PPUSH
15918: LD_VAR 0 14
15922: PUSH
15923: LD_VAR 0 18
15927: PUSH
15928: LD_VAR 0 14
15932: ARRAY
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: LD_INT 3
15940: PPUSH
15941: CALL 26385 0 3
15945: ST_TO_ADDR
15946: GO 15873
15948: POP
15949: POP
// end ;
15950: GO 15770
15952: POP
15953: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
15954: LD_VAR 0 10
15958: PUSH
15959: LD_VAR 0 28
15963: LESSEQUAL
15964: IFFALSE 16218
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , offensiveUnits [ 1 ] ) ;
15966: LD_ADDR_VAR 0 29
15970: PUSH
15971: LD_INT 81
15973: PUSH
15974: LD_INT 2
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PPUSH
15981: CALL_OW 69
15985: PPUSH
15986: LD_VAR 0 27
15990: PUSH
15991: LD_INT 1
15993: ARRAY
15994: PPUSH
15995: CALL_OW 74
15999: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 2 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ 1 ] ) ;
16000: LD_ADDR_VAR 0 30
16004: PUSH
16005: LD_INT 81
16007: PUSH
16008: LD_INT 2
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 2
16017: PUSH
16018: LD_INT 59
16020: PUSH
16021: EMPTY
16022: LIST
16023: PUSH
16024: LD_INT 21
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 21
16036: PUSH
16037: LD_INT 2
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: PPUSH
16057: CALL_OW 69
16061: PPUSH
16062: LD_VAR 0 27
16066: PUSH
16067: LD_INT 1
16069: ARRAY
16070: PPUSH
16071: CALL_OW 74
16075: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ 1 ] , target1 ) + 8 < GetDistUnits ( offensiveUnits [ 1 ] , target2 ) then
16076: LD_VAR 0 27
16080: PUSH
16081: LD_INT 1
16083: ARRAY
16084: PPUSH
16085: LD_VAR 0 29
16089: PPUSH
16090: CALL_OW 296
16094: PUSH
16095: LD_INT 8
16097: PLUS
16098: PUSH
16099: LD_VAR 0 27
16103: PUSH
16104: LD_INT 1
16106: ARRAY
16107: PPUSH
16108: LD_VAR 0 30
16112: PPUSH
16113: CALL_OW 296
16117: LESS
16118: IFFALSE 16154
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target1 ) else
16120: LD_VAR 0 27
16124: PPUSH
16125: LD_INT 3
16127: PUSH
16128: LD_INT 60
16130: PUSH
16131: EMPTY
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PPUSH
16138: CALL_OW 72
16142: PPUSH
16143: LD_VAR 0 29
16147: PPUSH
16148: CALL_OW 115
16152: GO 16186
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target2 ) ;
16154: LD_VAR 0 27
16158: PPUSH
16159: LD_INT 3
16161: PUSH
16162: LD_INT 60
16164: PUSH
16165: EMPTY
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PPUSH
16172: CALL_OW 72
16176: PPUSH
16177: LD_VAR 0 30
16181: PPUSH
16182: CALL_OW 115
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16186: LD_VAR 0 27
16190: PPUSH
16191: LD_INT 3
16193: PUSH
16194: LD_INT 60
16196: PUSH
16197: EMPTY
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 72
16208: PPUSH
16209: LD_VAR 0 41
16213: PPUSH
16214: CALL_OW 175
// end ; end ;
16218: GO 15737
16220: POP
16221: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16222: LD_ADDR_VAR 0 41
16226: PUSH
16227: LD_VAR 0 7
16231: PPUSH
16232: LD_INT 81
16234: PUSH
16235: LD_VAR 0 1
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PPUSH
16244: CALL_OW 70
16248: PUSH
16249: FOR_IN
16250: IFFALSE 16429
// begin defenceUnits = [ ] ;
16252: LD_ADDR_VAR 0 26
16256: PUSH
16257: EMPTY
16258: ST_TO_ADDR
// for i := 1 to personel do
16259: LD_ADDR_VAR 0 13
16263: PUSH
16264: DOUBLE
16265: LD_INT 1
16267: DEC
16268: ST_TO_ADDR
16269: LD_VAR 0 18
16273: PUSH
16274: FOR_TO
16275: IFFALSE 16325
// if personel [ i ] [ 3 ] = 2 then
16277: LD_VAR 0 18
16281: PUSH
16282: LD_VAR 0 13
16286: ARRAY
16287: PUSH
16288: LD_INT 3
16290: ARRAY
16291: PUSH
16292: LD_INT 2
16294: EQUAL
16295: IFFALSE 16323
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16297: LD_ADDR_VAR 0 26
16301: PUSH
16302: LD_VAR 0 26
16306: PUSH
16307: LD_VAR 0 18
16311: PUSH
16312: LD_VAR 0 13
16316: ARRAY
16317: PUSH
16318: LD_INT 1
16320: ARRAY
16321: ADD
16322: ST_TO_ADDR
16323: GO 16274
16325: POP
16326: POP
// for i := 1 to vehicles do
16327: LD_ADDR_VAR 0 13
16331: PUSH
16332: DOUBLE
16333: LD_INT 1
16335: DEC
16336: ST_TO_ADDR
16337: LD_VAR 0 24
16341: PUSH
16342: FOR_TO
16343: IFFALSE 16393
// if vehicles [ i ] [ 3 ] = 2 then
16345: LD_VAR 0 24
16349: PUSH
16350: LD_VAR 0 13
16354: ARRAY
16355: PUSH
16356: LD_INT 3
16358: ARRAY
16359: PUSH
16360: LD_INT 2
16362: EQUAL
16363: IFFALSE 16391
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16365: LD_ADDR_VAR 0 26
16369: PUSH
16370: LD_VAR 0 26
16374: PUSH
16375: LD_VAR 0 24
16379: PUSH
16380: LD_VAR 0 13
16384: ARRAY
16385: PUSH
16386: LD_INT 1
16388: ARRAY
16389: ADD
16390: ST_TO_ADDR
16391: GO 16342
16393: POP
16394: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16395: LD_VAR 0 26
16399: PPUSH
16400: LD_INT 3
16402: PUSH
16403: LD_INT 60
16405: PUSH
16406: EMPTY
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PPUSH
16413: CALL_OW 72
16417: PPUSH
16418: LD_VAR 0 41
16422: PPUSH
16423: CALL_OW 175
// end ;
16427: GO 16249
16429: POP
16430: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16431: LD_ADDR_VAR 0 42
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 1
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 30
16453: PUSH
16454: LD_INT 31
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 30
16463: PUSH
16464: LD_INT 32
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 30
16473: PUSH
16474: LD_INT 33
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 30
16483: PUSH
16484: LD_INT 4
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 5
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PPUSH
16513: CALL_OW 69
16517: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16518: LD_ADDR_VAR 0 43
16522: PUSH
16523: LD_INT 81
16525: PUSH
16526: LD_VAR 0 1
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 21
16537: PUSH
16538: LD_INT 3
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 58
16547: PUSH
16548: EMPTY
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16561: LD_VAR 0 42
16565: PUSH
16566: LD_VAR 0 43
16570: AND
16571: IFFALSE 16641
// for i in attackBuildings do
16573: LD_ADDR_VAR 0 13
16577: PUSH
16578: LD_VAR 0 42
16582: PUSH
16583: FOR_IN
16584: IFFALSE 16639
// for j in enemyBuildings do
16586: LD_ADDR_VAR 0 14
16590: PUSH
16591: LD_VAR 0 43
16595: PUSH
16596: FOR_IN
16597: IFFALSE 16635
// if GetDistUnits ( i , j ) < 12 then
16599: LD_VAR 0 13
16603: PPUSH
16604: LD_VAR 0 14
16608: PPUSH
16609: CALL_OW 296
16613: PUSH
16614: LD_INT 12
16616: LESS
16617: IFFALSE 16633
// ComAttackUnit ( i , j ) ;
16619: LD_VAR 0 13
16623: PPUSH
16624: LD_VAR 0 14
16628: PPUSH
16629: CALL_OW 115
16633: GO 16596
16635: POP
16636: POP
16637: GO 16583
16639: POP
16640: POP
// until not personel or arabianCanExitMap ;
16641: LD_VAR 0 18
16645: NOT
16646: PUSH
16647: LD_EXP 21
16651: OR
16652: IFFALSE 11260
// end ;
16654: LD_VAR 0 12
16658: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16659: LD_EXP 53
16663: NOT
16664: IFFALSE 16698
16666: GO 16668
16668: DISABLE
// begin enable ;
16669: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16670: LD_EXP 37
16674: PPUSH
16675: LD_INT 42
16677: PPUSH
16678: CALL 2694 0 2
// arabLeftExit = true ;
16682: LD_ADDR_EXP 56
16686: PUSH
16687: LD_INT 1
16689: ST_TO_ADDR
// arabRightExit = false ;
16690: LD_ADDR_EXP 57
16694: PUSH
16695: LD_INT 0
16697: ST_TO_ADDR
// end ;
16698: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base ;
16699: LD_EXP 53
16703: PUSH
16704: LD_EXP 56
16708: AND
16709: IFFALSE 16904
16711: GO 16713
16713: DISABLE
16714: LD_INT 0
16716: PPUSH
16717: PPUSH
16718: PPUSH
// begin enable ;
16719: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16720: LD_EXP 53
16724: PPUSH
16725: LD_INT 71
16727: PPUSH
16728: LD_INT 137
16730: PPUSH
16731: CALL_OW 114
// for veh in arabianPatrolVehicles do
16735: LD_ADDR_VAR 0 1
16739: PUSH
16740: LD_EXP 53
16744: PUSH
16745: FOR_IN
16746: IFFALSE 16902
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16748: LD_VAR 0 1
16752: PPUSH
16753: LD_INT 43
16755: PPUSH
16756: CALL_OW 308
16760: IFFALSE 16900
// begin if arabianPatrolVehicles then
16762: LD_EXP 53
16766: IFFALSE 16795
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 313
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PPUSH
16782: CALL_OW 64
// RemoveUnit ( veh ) ;
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 64
// end ; x = 0 ;
16795: LD_ADDR_VAR 0 2
16799: PUSH
16800: LD_INT 0
16802: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16803: LD_ADDR_VAR 0 1
16807: PUSH
16808: LD_EXP 53
16812: PUSH
16813: FOR_IN
16814: IFFALSE 16844
// if not IsPlaced ( veh ) then
16816: LD_VAR 0 1
16820: PPUSH
16821: CALL_OW 305
16825: NOT
16826: IFFALSE 16842
// x = x + 1 ;
16828: LD_ADDR_VAR 0 2
16832: PUSH
16833: LD_VAR 0 2
16837: PUSH
16838: LD_INT 1
16840: PLUS
16841: ST_TO_ADDR
16842: GO 16813
16844: POP
16845: POP
// if x = arabianPatrolVehicles then
16846: LD_VAR 0 2
16850: PUSH
16851: LD_EXP 53
16855: EQUAL
16856: IFFALSE 16900
// begin arabLeftExit = false ;
16858: LD_ADDR_EXP 56
16862: PUSH
16863: LD_INT 0
16865: ST_TO_ADDR
// arabRightExit = true ;
16866: LD_ADDR_EXP 57
16870: PUSH
16871: LD_INT 1
16873: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16874: LD_INT 4200
16876: PPUSH
16877: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16881: LD_ADDR_EXP 53
16885: PUSH
16886: EMPTY
16887: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16888: LD_EXP 37
16892: PPUSH
16893: LD_INT 43
16895: PPUSH
16896: CALL 2694 0 2
// end ; end ; end ;
16900: GO 16745
16902: POP
16903: POP
// end ;
16904: PPOPN 3
16906: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16907: LD_EXP 53
16911: PUSH
16912: LD_EXP 57
16916: AND
16917: IFFALSE 17112
16919: GO 16921
16921: DISABLE
16922: LD_INT 0
16924: PPUSH
16925: PPUSH
16926: PPUSH
// begin enable ;
16927: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16928: LD_EXP 53
16932: PPUSH
16933: LD_INT 184
16935: PPUSH
16936: LD_INT 134
16938: PPUSH
16939: CALL_OW 114
// for veh in arabianPatrolVehicles do
16943: LD_ADDR_VAR 0 1
16947: PUSH
16948: LD_EXP 53
16952: PUSH
16953: FOR_IN
16954: IFFALSE 17110
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16956: LD_VAR 0 1
16960: PPUSH
16961: LD_INT 42
16963: PPUSH
16964: CALL_OW 308
16968: IFFALSE 17108
// begin if arabianPatrolVehicles then
16970: LD_EXP 53
16974: IFFALSE 17003
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16976: LD_VAR 0 1
16980: PPUSH
16981: CALL_OW 313
16985: PUSH
16986: LD_INT 1
16988: ARRAY
16989: PPUSH
16990: CALL_OW 64
// RemoveUnit ( veh ) ;
16994: LD_VAR 0 1
16998: PPUSH
16999: CALL_OW 64
// end ; x = 0 ;
17003: LD_ADDR_VAR 0 2
17007: PUSH
17008: LD_INT 0
17010: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
17011: LD_ADDR_VAR 0 1
17015: PUSH
17016: LD_EXP 53
17020: PUSH
17021: FOR_IN
17022: IFFALSE 17052
// if not IsPlaced ( veh ) then
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 305
17033: NOT
17034: IFFALSE 17050
// x = x + 1 ;
17036: LD_ADDR_VAR 0 2
17040: PUSH
17041: LD_VAR 0 2
17045: PUSH
17046: LD_INT 1
17048: PLUS
17049: ST_TO_ADDR
17050: GO 17021
17052: POP
17053: POP
// if x = arabianPatrolVehicles then
17054: LD_VAR 0 2
17058: PUSH
17059: LD_EXP 53
17063: EQUAL
17064: IFFALSE 17108
// begin arabLeftExit = true ;
17066: LD_ADDR_EXP 56
17070: PUSH
17071: LD_INT 1
17073: ST_TO_ADDR
// arabRightExit = false ;
17074: LD_ADDR_EXP 57
17078: PUSH
17079: LD_INT 0
17081: ST_TO_ADDR
// wait ( 2 2$0 ) ;
17082: LD_INT 4200
17084: PPUSH
17085: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
17089: LD_ADDR_EXP 53
17093: PUSH
17094: EMPTY
17095: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
17096: LD_EXP 37
17100: PPUSH
17101: LD_INT 42
17103: PPUSH
17104: CALL 2694 0 2
// end ; end ; end ;
17108: GO 16953
17110: POP
17111: POP
// end ;
17112: PPOPN 3
17114: END
// every 6 6$0 trigger not arabianHovercrafts and not arabianCanExitMap do
17115: LD_EXP 54
17119: NOT
17120: PUSH
17121: LD_EXP 21
17125: NOT
17126: AND
17127: IFFALSE 17137
17129: GO 17131
17131: DISABLE
// begin enable ;
17132: ENABLE
// PrepareArabianHovercraft ;
17133: CALL 2853 0 0
// end ;
17137: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
17138: LD_EXP 54
17142: IFFALSE 17322
17144: GO 17146
17146: DISABLE
17147: LD_INT 0
17149: PPUSH
17150: PPUSH
// begin enable ;
17151: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
17152: LD_EXP 54
17156: PPUSH
17157: LD_INT 100
17159: PPUSH
17160: CALL_OW 240
// if not arabianCanExitMap then
17164: LD_EXP 21
17168: NOT
17169: IFFALSE 17307
// begin for i := 1 to arabianHovercraftsPath do
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: DOUBLE
17177: LD_INT 1
17179: DEC
17180: ST_TO_ADDR
17181: LD_EXP 39
17185: PUSH
17186: FOR_TO
17187: IFFALSE 17230
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
17189: LD_EXP 54
17193: PPUSH
17194: LD_EXP 39
17198: PUSH
17199: LD_VAR 0 1
17203: ARRAY
17204: PUSH
17205: LD_INT 1
17207: ARRAY
17208: PPUSH
17209: LD_EXP 39
17213: PUSH
17214: LD_VAR 0 1
17218: ARRAY
17219: PUSH
17220: LD_INT 2
17222: ARRAY
17223: PPUSH
17224: CALL_OW 174
17228: GO 17186
17230: POP
17231: POP
// x = arabianHovercraftsPath ;
17232: LD_ADDR_VAR 0 2
17236: PUSH
17237: LD_EXP 39
17241: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
17242: LD_EXP 54
17246: PPUSH
17247: LD_EXP 39
17251: PUSH
17252: LD_VAR 0 2
17256: ARRAY
17257: PUSH
17258: LD_INT 1
17260: ARRAY
17261: PPUSH
17262: LD_EXP 39
17266: PUSH
17267: LD_VAR 0 2
17271: ARRAY
17272: PUSH
17273: LD_INT 2
17275: ARRAY
17276: PPUSH
17277: CALL_OW 174
// x = x - 1 ;
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_VAR 0 2
17290: PUSH
17291: LD_INT 1
17293: MINUS
17294: ST_TO_ADDR
// until x = 0 ;
17295: LD_VAR 0 2
17299: PUSH
17300: LD_INT 0
17302: EQUAL
17303: IFFALSE 17242
// end else
17305: GO 17322
// ComAgressiveMove ( arabianHovercrafts , 134 , 68 ) ;
17307: LD_EXP 54
17311: PPUSH
17312: LD_INT 134
17314: PPUSH
17315: LD_INT 68
17317: PPUSH
17318: CALL_OW 114
// end ;
17322: PPOPN 2
17324: END
// every 0 0$1 trigger arabianPatrolTroops do
17325: LD_EXP 55
17329: IFFALSE 17395
17331: GO 17333
17333: DISABLE
// begin enable ;
17334: ENABLE
// AddComAgressiveMove ( arabianPatrolTroops , 127 , 100 ) ;
17335: LD_EXP 55
17339: PPUSH
17340: LD_INT 127
17342: PPUSH
17343: LD_INT 100
17345: PPUSH
17346: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 141 , 133 ) ;
17350: LD_EXP 55
17354: PPUSH
17355: LD_INT 141
17357: PPUSH
17358: LD_INT 133
17360: PPUSH
17361: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 80 , 132 ) ;
17365: LD_EXP 55
17369: PPUSH
17370: LD_INT 80
17372: PPUSH
17373: LD_INT 132
17375: PPUSH
17376: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 174 , 122 ) ;
17380: LD_EXP 55
17384: PPUSH
17385: LD_INT 174
17387: PPUSH
17388: LD_INT 122
17390: PPUSH
17391: CALL_OW 174
// end ; end_of_file
17395: END
// export function Lose_Burlak ; begin
17396: LD_INT 0
17398: PPUSH
// YouLost ( Burlak ) ;
17399: LD_STRING Burlak
17401: PPUSH
17402: CALL_OW 104
// end ;
17406: LD_VAR 0 1
17410: RET
// export function Lose_Survive ; begin
17411: LD_INT 0
17413: PPUSH
// YouLost ( Survive ) ;
17414: LD_STRING Survive
17416: PPUSH
17417: CALL_OW 104
// end ;
17421: LD_VAR 0 1
17425: RET
// export function Lose_Surrender ; begin
17426: LD_INT 0
17428: PPUSH
// YouLost ( Surrender ) ;
17429: LD_STRING Surrender
17431: PPUSH
17432: CALL_OW 104
// end ; end_of_file
17436: LD_VAR 0 1
17440: RET
// every 0 0$1 do
17441: GO 17443
17443: DISABLE
// begin if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
17444: LD_EXP 24
17448: NOT
17449: PUSH
17450: LD_INT 22
17452: PPUSH
17453: LD_INT 22
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 21
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 50
17475: PUSH
17476: EMPTY
17477: LIST
17478: PUSH
17479: LD_INT 59
17481: PUSH
17482: EMPTY
17483: LIST
17484: PUSH
17485: LD_INT 2
17487: PUSH
17488: LD_INT 31
17490: PUSH
17491: LD_INT 22
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 31
17500: PUSH
17501: LD_INT 24
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 31
17510: PUSH
17511: LD_INT 14
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: PPUSH
17531: CALL_OW 70
17535: AND
17536: PUSH
17537: LD_INT 22
17539: PPUSH
17540: LD_INT 22
17542: PUSH
17543: LD_INT 3
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 21
17552: PUSH
17553: LD_INT 1
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 23
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 50
17572: PUSH
17573: EMPTY
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: PPUSH
17582: CALL_OW 70
17586: AND
17587: IFFALSE 17596
// Query ( QVehicles ) ;
17589: LD_STRING QVehicles
17591: PPUSH
17592: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17596: LD_EXP 40
17600: PPUSH
17601: CALL_OW 310
17605: PPUSH
17606: LD_INT 22
17608: PPUSH
17609: CALL_OW 308
17613: PUSH
17614: LD_EXP 24
17618: NOT
17619: AND
17620: PUSH
17621: LD_INT 22
17623: PPUSH
17624: LD_INT 22
17626: PUSH
17627: LD_INT 3
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 21
17636: PUSH
17637: LD_INT 2
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 59
17646: PUSH
17647: EMPTY
17648: LIST
17649: PUSH
17650: LD_INT 50
17652: PUSH
17653: EMPTY
17654: LIST
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: LD_INT 31
17661: PUSH
17662: LD_INT 22
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 31
17671: PUSH
17672: LD_INT 24
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 31
17681: PUSH
17682: LD_INT 14
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: PPUSH
17702: CALL_OW 70
17706: PUSH
17707: LD_INT 22
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 21
17719: PUSH
17720: LD_INT 1
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 23
17729: PUSH
17730: LD_INT 3
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 25
17742: PUSH
17743: LD_INT 1
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 25
17752: PUSH
17753: LD_INT 2
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 25
17762: PUSH
17763: LD_INT 3
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 25
17772: PUSH
17773: LD_INT 4
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: PPUSH
17793: CALL_OW 69
17797: GREATEREQUAL
17798: AND
17799: IFFALSE 17805
// FinishMission ;
17801: CALL 18134 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17805: LD_EXP 40
17809: PPUSH
17810: CALL_OW 310
17814: PPUSH
17815: LD_INT 22
17817: PPUSH
17818: CALL_OW 308
17822: PUSH
17823: LD_EXP 24
17827: NOT
17828: AND
17829: PUSH
17830: LD_INT 22
17832: PPUSH
17833: LD_INT 22
17835: PUSH
17836: LD_INT 3
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 21
17845: PUSH
17846: LD_INT 2
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 59
17855: PUSH
17856: EMPTY
17857: LIST
17858: PUSH
17859: LD_INT 50
17861: PUSH
17862: EMPTY
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 31
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 31
17880: PUSH
17881: LD_INT 24
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 31
17890: PUSH
17891: LD_INT 14
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: PPUSH
17911: CALL_OW 70
17915: PUSH
17916: LD_INT 6
17918: GREATEREQUAL
17919: AND
17920: PUSH
17921: LD_INT 22
17923: PPUSH
17924: LD_INT 22
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 21
17936: PUSH
17937: LD_INT 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 59
17946: PUSH
17947: EMPTY
17948: LIST
17949: PUSH
17950: LD_INT 50
17952: PUSH
17953: EMPTY
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: LD_INT 31
17961: PUSH
17962: LD_INT 22
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 31
17971: PUSH
17972: LD_INT 24
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 31
17981: PUSH
17982: LD_INT 14
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: PPUSH
18002: CALL_OW 70
18006: PUSH
18007: LD_INT 22
18009: PUSH
18010: LD_INT 3
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 21
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 23
18029: PUSH
18030: LD_INT 3
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 2
18039: PUSH
18040: LD_INT 25
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 25
18052: PUSH
18053: LD_INT 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 25
18062: PUSH
18063: LD_INT 3
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 25
18072: PUSH
18073: LD_INT 4
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: PPUSH
18093: CALL_OW 69
18097: LESS
18098: AND
18099: IFFALSE 18125
// begin case Query ( QEndMission ) of 1 :
18101: LD_STRING QEndMission
18103: PPUSH
18104: CALL_OW 97
18108: PUSH
18109: LD_INT 1
18111: DOUBLE
18112: EQUAL
18113: IFTRUE 18117
18115: GO 18124
18117: POP
// FinishMission ; end ;
18118: CALL 18134 0 0
18122: GO 18125
18124: POP
// end ; wait ( 0 0$5 ) ;
18125: LD_INT 175
18127: PPUSH
18128: CALL_OW 67
// enable ;
18132: ENABLE
// end ;
18133: END
// function FinishMission ; var nearUnit ; begin
18134: LD_INT 0
18136: PPUSH
18137: PPUSH
// finishMissionBool = true ;
18138: LD_ADDR_EXP 24
18142: PUSH
18143: LD_INT 1
18145: ST_TO_ADDR
// if stevensDepot then
18146: LD_EXP 17
18150: IFFALSE 18319
// begin DialogueOn ;
18152: CALL_OW 6
// if IsOK ( Petrosyan ) then
18156: LD_EXP 44
18160: PPUSH
18161: CALL_OW 302
18165: IFFALSE 18181
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
18167: LD_EXP 44
18171: PPUSH
18172: LD_STRING DStevensLeftBehind-Pty-1
18174: PPUSH
18175: CALL_OW 88
18179: GO 18295
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
18181: LD_INT 22
18183: PUSH
18184: LD_INT 3
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 21
18193: PUSH
18194: LD_INT 1
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 26
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 50
18213: PUSH
18214: EMPTY
18215: LIST
18216: PUSH
18217: LD_INT 2
18219: PUSH
18220: LD_INT 25
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 25
18232: PUSH
18233: LD_INT 2
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 25
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 25
18252: PUSH
18253: LD_INT 4
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: PPUSH
18274: CALL_OW 69
18278: PPUSH
18279: LD_STRING StevensLeftBehind-RSol1-1
18281: PPUSH
18282: LD_STRING 
18284: PPUSH
18285: LD_INT 0
18287: PPUSH
18288: LD_INT 1
18290: PPUSH
18291: CALL 8863 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
18295: LD_EXP 40
18299: PPUSH
18300: LD_STRING DStevensLeftBehind-Bur-1
18302: PPUSH
18303: CALL_OW 88
// DialogueOff ;
18307: CALL_OW 7
// stevensStatus = 1 ;
18311: LD_ADDR_EXP 2
18315: PUSH
18316: LD_INT 1
18318: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
18319: LD_EXP 14
18323: NOT
18324: PUSH
18325: LD_EXP 44
18329: PPUSH
18330: CALL_OW 302
18334: AND
18335: IFFALSE 18867
// begin PrepareStevens ( exit_rus ) ;
18337: LD_INT 22
18339: PPUSH
18340: CALL 20911 0 1
// wait ( 0 0$1.5 ) ;
18344: LD_INT 52
18346: PPUSH
18347: CALL_OW 67
// stevensPlaced = true ;
18351: LD_ADDR_EXP 14
18355: PUSH
18356: LD_INT 1
18358: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
18359: LD_ADDR_VAR 0 2
18363: PUSH
18364: LD_INT 22
18366: PUSH
18367: LD_INT 3
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 21
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 26
18386: PUSH
18387: LD_INT 1
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 50
18396: PUSH
18397: EMPTY
18398: LIST
18399: PUSH
18400: LD_INT 2
18402: PUSH
18403: LD_INT 25
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 25
18415: PUSH
18416: LD_INT 2
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 25
18425: PUSH
18426: LD_INT 3
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 25
18435: PUSH
18436: LD_INT 4
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: PPUSH
18457: CALL_OW 69
18461: PPUSH
18462: LD_EXP 58
18466: PPUSH
18467: CALL_OW 74
18471: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
18472: LD_EXP 58
18476: PPUSH
18477: CALL_OW 87
// InGameOn ;
18481: CALL_OW 8
// wait ( 0 0$1.5 ) ;
18485: LD_INT 52
18487: PPUSH
18488: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18492: LD_EXP 58
18496: PPUSH
18497: LD_INT 6
18499: PPUSH
18500: CALL_OW 235
// DialogueOn ;
18504: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18508: LD_EXP 58
18512: PPUSH
18513: LD_STRING DStevens-Huck-1
18515: PPUSH
18516: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18520: LD_EXP 44
18524: PPUSH
18525: LD_STRING DStevens-Pty-1
18527: PPUSH
18528: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18532: LD_EXP 44
18536: PPUSH
18537: LD_STRING DStevens-Pty-1a
18539: PPUSH
18540: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18544: LD_EXP 58
18548: PPUSH
18549: LD_STRING DStevens-Huck-2
18551: PPUSH
18552: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18556: LD_EXP 44
18560: PPUSH
18561: LD_STRING DStevens-Pty-2
18563: PPUSH
18564: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18568: LD_EXP 58
18572: PPUSH
18573: LD_STRING DStevens-Huck-3
18575: PPUSH
18576: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18580: LD_EXP 44
18584: PPUSH
18585: LD_STRING DStevens-Pty-3
18587: PPUSH
18588: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18592: LD_EXP 58
18596: PPUSH
18597: LD_STRING DStevens-Huck-4
18599: PPUSH
18600: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18604: LD_EXP 44
18608: PPUSH
18609: LD_STRING DStevensBurlak-Pty-1
18611: PPUSH
18612: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18616: LD_EXP 40
18620: PPUSH
18621: LD_STRING DStevensBurlak-Bur-1
18623: PPUSH
18624: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18628: LD_EXP 44
18632: PPUSH
18633: LD_STRING DStevensBurlak-Pty-2
18635: PPUSH
18636: CALL_OW 88
// case Query ( QKill ) of 1 :
18640: LD_STRING QKill
18642: PPUSH
18643: CALL_OW 97
18647: PUSH
18648: LD_INT 1
18650: DOUBLE
18651: EQUAL
18652: IFTRUE 18656
18654: GO 18783
18656: POP
// begin stevensCanExitMap = true ;
18657: LD_ADDR_EXP 19
18661: PUSH
18662: LD_INT 1
18664: ST_TO_ADDR
// stevensFollow = false ;
18665: LD_ADDR_EXP 15
18669: PUSH
18670: LD_INT 0
18672: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18673: LD_EXP 40
18677: PPUSH
18678: LD_STRING DKill-1-Bur-1
18680: PPUSH
18681: CALL_OW 88
// if IsOK ( Gleb ) then
18685: LD_EXP 43
18689: PPUSH
18690: CALL_OW 302
18694: IFFALSE 18708
// Say ( Gleb , DKill-1-Glb-1 ) ;
18696: LD_EXP 43
18700: PPUSH
18701: LD_STRING DKill-1-Glb-1
18703: PPUSH
18704: CALL_OW 88
// DialogueOff ;
18708: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18712: LD_EXP 58
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 235
// stevensStatus = 0 ;
18724: LD_ADDR_EXP 2
18728: PUSH
18729: LD_INT 0
18731: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18732: LD_INT 22
18734: PUSH
18735: LD_INT 3
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PPUSH
18742: CALL_OW 69
18746: PPUSH
18747: LD_EXP 58
18751: PPUSH
18752: CALL_OW 115
// wait ( 0 0$1 ) ;
18756: LD_INT 35
18758: PPUSH
18759: CALL_OW 67
// until IsDead ( Stevens ) ;
18763: LD_EXP 58
18767: PPUSH
18768: CALL_OW 301
18772: IFFALSE 18732
// wait ( 0 0$1.5 ) ;
18774: LD_INT 52
18776: PPUSH
18777: CALL_OW 67
// end ; 2 :
18781: GO 18867
18783: LD_INT 2
18785: DOUBLE
18786: EQUAL
18787: IFTRUE 18791
18789: GO 18866
18791: POP
// begin stevensCanExitMap = true ;
18792: LD_ADDR_EXP 19
18796: PUSH
18797: LD_INT 1
18799: ST_TO_ADDR
// stevensWasInDepot = false ;
18800: LD_ADDR_EXP 18
18804: PUSH
18805: LD_INT 0
18807: ST_TO_ADDR
// stevensDepot = false ;
18808: LD_ADDR_EXP 17
18812: PUSH
18813: LD_INT 0
18815: ST_TO_ADDR
// stevensStatus = 1 ;
18816: LD_ADDR_EXP 2
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18824: LD_EXP 40
18828: PPUSH
18829: LD_STRING DKill-2-Bur-1
18831: PPUSH
18832: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18836: LD_EXP 44
18840: PPUSH
18841: LD_STRING DKill-2-Pty-1
18843: PPUSH
18844: CALL_OW 88
// DialogueOff ;
18848: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18852: LD_EXP 58
18856: PPUSH
18857: LD_INT 37
18859: PPUSH
18860: CALL_OW 113
// end ; end ;
18864: GO 18867
18866: POP
// end ; SetRewards ;
18867: CALL 18888 0 0
// SavePlayerCharacters ;
18871: CALL 19129 0 0
// SaveGlobalVariables ;
18875: CALL 19474 0 0
// YouWin ;
18879: CALL_OW 103
// end ;
18883: LD_VAR 0 1
18887: RET
// function SetRewards ; begin
18888: LD_INT 0
18890: PPUSH
// if fastBreakthrough then
18891: LD_EXP 23
18895: IFFALSE 18909
// AddMedal ( Time , 1 ) else
18897: LD_STRING Time
18899: PPUSH
18900: LD_INT 1
18902: PPUSH
18903: CALL_OW 101
18907: GO 18920
// AddMedal ( Time , - 1 ) ;
18909: LD_STRING Time
18911: PPUSH
18912: LD_INT 1
18914: NEG
18915: PPUSH
18916: CALL_OW 101
// if dial_tameApeBlocker then
18920: LD_EXP 10
18924: IFFALSE 18938
// AddMedal ( Apemen , 1 ) else
18926: LD_STRING Apemen
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: CALL_OW 101
18936: GO 18985
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18938: LD_EXP 10
18942: NOT
18943: PUSH
18944: LD_INT 1
18946: PPUSH
18947: LD_INT 3
18949: PPUSH
18950: CALL_OW 321
18954: PUSH
18955: LD_INT 1
18957: EQUAL
18958: AND
18959: IFFALSE 18974
// AddMedal ( Apemen , - 1 ) else
18961: LD_STRING Apemen
18963: PPUSH
18964: LD_INT 1
18966: NEG
18967: PPUSH
18968: CALL_OW 101
18972: GO 18985
// AddMedal ( Apemen , - 2 ) ;
18974: LD_STRING Apemen
18976: PPUSH
18977: LD_INT 2
18979: NEG
18980: PPUSH
18981: CALL_OW 101
// if not omarStatus then
18985: LD_EXP 1
18989: NOT
18990: IFFALSE 19004
// AddMedal ( Abdul , 1 ) else
18992: LD_STRING Abdul
18994: PPUSH
18995: LD_INT 1
18997: PPUSH
18998: CALL_OW 101
19002: GO 19015
// AddMedal ( Abdul , - 1 ) ;
19004: LD_STRING Abdul
19006: PPUSH
19007: LD_INT 1
19009: NEG
19010: PPUSH
19011: CALL_OW 101
// GiveMedals ( Main ) ;
19015: LD_STRING Main
19017: PPUSH
19018: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19022: LD_INT 22
19024: PUSH
19025: LD_INT 3
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 21
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 23
19044: PUSH
19045: LD_INT 3
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 50
19054: PUSH
19055: EMPTY
19056: LIST
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: LD_INT 25
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 25
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 25
19083: PUSH
19084: LD_INT 3
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 25
19093: PUSH
19094: LD_INT 4
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: PPUSH
19115: CALL_OW 69
19119: PPUSH
19120: CALL_OW 43
// end ;
19124: LD_VAR 0 1
19128: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
19129: LD_INT 0
19131: PPUSH
19132: PPUSH
19133: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19134: LD_EXP 40
19138: PPUSH
19139: LD_STRING Burlak
19141: PPUSH
19142: LD_INT 3
19144: PPUSH
19145: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
19149: LD_EXP 41
19153: PPUSH
19154: CALL_OW 310
19158: PPUSH
19159: LD_INT 22
19161: PPUSH
19162: CALL_OW 308
19166: IFFALSE 19183
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
19168: LD_EXP 41
19172: PPUSH
19173: LD_STRING Karamazov
19175: PPUSH
19176: LD_INT 3
19178: PPUSH
19179: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
19183: LD_EXP 42
19187: PPUSH
19188: CALL_OW 310
19192: PPUSH
19193: LD_INT 22
19195: PPUSH
19196: CALL_OW 308
19200: IFFALSE 19217
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
19202: LD_EXP 42
19206: PPUSH
19207: LD_STRING Petrovova
19209: PPUSH
19210: LD_INT 3
19212: PPUSH
19213: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
19217: LD_EXP 43
19221: PPUSH
19222: CALL_OW 310
19226: PPUSH
19227: LD_INT 22
19229: PPUSH
19230: CALL_OW 308
19234: IFFALSE 19251
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
19236: LD_EXP 43
19240: PPUSH
19241: LD_STRING Gleb
19243: PPUSH
19244: LD_INT 3
19246: PPUSH
19247: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
19251: LD_EXP 44
19255: PPUSH
19256: CALL_OW 310
19260: PPUSH
19261: LD_INT 22
19263: PPUSH
19264: CALL_OW 308
19268: IFFALSE 19285
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
19270: LD_EXP 44
19274: PPUSH
19275: LD_STRING Petrosyan
19277: PPUSH
19278: LD_INT 3
19280: PPUSH
19281: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
19285: LD_EXP 46
19289: PPUSH
19290: CALL_OW 310
19294: PPUSH
19295: LD_INT 22
19297: PPUSH
19298: CALL_OW 308
19302: IFFALSE 19319
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
19304: LD_EXP 46
19308: PPUSH
19309: LD_STRING Dolgov
19311: PPUSH
19312: LD_INT 3
19314: PPUSH
19315: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
19319: LD_EXP 47
19323: PPUSH
19324: CALL_OW 310
19328: PPUSH
19329: LD_INT 22
19331: PPUSH
19332: CALL_OW 308
19336: IFFALSE 19353
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
19338: LD_EXP 47
19342: PPUSH
19343: LD_STRING Lipshchin
19345: PPUSH
19346: LD_INT 3
19348: PPUSH
19349: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
19353: LD_EXP 45
19357: PPUSH
19358: CALL_OW 310
19362: PPUSH
19363: LD_INT 22
19365: PPUSH
19366: CALL_OW 308
19370: IFFALSE 19387
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
19372: LD_EXP 45
19376: PPUSH
19377: LD_STRING Titov
19379: PPUSH
19380: LD_INT 3
19382: PPUSH
19383: CALL 8664 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
19387: LD_INT 22
19389: PPUSH
19390: LD_INT 22
19392: PUSH
19393: LD_INT 3
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 21
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: LD_INT 25
19415: PUSH
19416: LD_INT 12
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 25
19425: PUSH
19426: LD_INT 16
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 25
19435: PUSH
19436: LD_INT 15
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: PPUSH
19454: CALL_OW 70
19458: PPUSH
19459: LD_STRING other_apemans
19461: PPUSH
19462: LD_INT 3
19464: PPUSH
19465: CALL 8720 0 3
// end ;
19469: LD_VAR 0 1
19473: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
19474: LD_INT 0
19476: PPUSH
19477: PPUSH
19478: PPUSH
19479: PPUSH
19480: PPUSH
// resources = [ ] ;
19481: LD_ADDR_VAR 0 3
19485: PUSH
19486: EMPTY
19487: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19488: LD_ADDR_EXP 5
19492: PUSH
19493: EMPTY
19494: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19495: LD_EXP 2
19499: PPUSH
19500: LD_STRING 05_StevensStatus_1
19502: PPUSH
19503: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19507: LD_EXP 1
19511: PPUSH
19512: LD_STRING 05_OmarStatus_2
19514: PPUSH
19515: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
19519: LD_ADDR_VAR 0 2
19523: PUSH
19524: LD_INT 22
19526: PPUSH
19527: LD_INT 22
19529: PUSH
19530: LD_INT 3
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 59
19539: PUSH
19540: EMPTY
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: LD_INT 34
19548: PUSH
19549: LD_INT 51
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 34
19558: PUSH
19559: LD_INT 32
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 34
19568: PUSH
19569: LD_INT 89
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 70
19591: PUSH
19592: FOR_IN
19593: IFFALSE 19621
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19595: LD_ADDR_VAR 0 3
19599: PUSH
19600: LD_VAR 0 3
19604: PUSH
19605: LD_VAR 0 2
19609: PPUSH
19610: CALL 9850 0 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: ADD
19618: ST_TO_ADDR
19619: GO 19592
19621: POP
19622: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19623: LD_VAR 0 3
19627: PPUSH
19628: LD_STRING 05_ResourcesInCargo_3
19630: PPUSH
19631: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19635: LD_ADDR_VAR 0 2
19639: PUSH
19640: LD_INT 22
19642: PPUSH
19643: LD_INT 22
19645: PUSH
19646: LD_INT 3
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 21
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 59
19665: PUSH
19666: EMPTY
19667: LIST
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: LIST
19673: PPUSH
19674: CALL_OW 70
19678: PUSH
19679: FOR_IN
19680: IFFALSE 19940
// begin driver = UnitsInside ( i ) [ 1 ] ;
19682: LD_ADDR_VAR 0 4
19686: PUSH
19687: LD_VAR 0 2
19691: PPUSH
19692: CALL_OW 313
19696: PUSH
19697: LD_INT 1
19699: ARRAY
19700: ST_TO_ADDR
// if driver = Burlak then
19701: LD_VAR 0 4
19705: PUSH
19706: LD_EXP 40
19710: EQUAL
19711: IFFALSE 19721
// driverShortName = Bur ;
19713: LD_ADDR_VAR 0 5
19717: PUSH
19718: LD_STRING Bur
19720: ST_TO_ADDR
// if driver = Karamazov then
19721: LD_VAR 0 4
19725: PUSH
19726: LD_EXP 41
19730: EQUAL
19731: IFFALSE 19741
// driverShortName = Kar ;
19733: LD_ADDR_VAR 0 5
19737: PUSH
19738: LD_STRING Kar
19740: ST_TO_ADDR
// if driver = Petrovova then
19741: LD_VAR 0 4
19745: PUSH
19746: LD_EXP 42
19750: EQUAL
19751: IFFALSE 19761
// driverShortName = Ptr ;
19753: LD_ADDR_VAR 0 5
19757: PUSH
19758: LD_STRING Ptr
19760: ST_TO_ADDR
// if driver = Gleb then
19761: LD_VAR 0 4
19765: PUSH
19766: LD_EXP 43
19770: EQUAL
19771: IFFALSE 19781
// driverShortName = Glb ;
19773: LD_ADDR_VAR 0 5
19777: PUSH
19778: LD_STRING Glb
19780: ST_TO_ADDR
// if driver = Petrosyan then
19781: LD_VAR 0 4
19785: PUSH
19786: LD_EXP 44
19790: EQUAL
19791: IFFALSE 19801
// driverShortName = Pet ;
19793: LD_ADDR_VAR 0 5
19797: PUSH
19798: LD_STRING Pet
19800: ST_TO_ADDR
// if driver = Dolgov then
19801: LD_VAR 0 4
19805: PUSH
19806: LD_EXP 46
19810: EQUAL
19811: IFFALSE 19821
// driverShortName = Dol ;
19813: LD_ADDR_VAR 0 5
19817: PUSH
19818: LD_STRING Dol
19820: ST_TO_ADDR
// if driver = Lipshchin then
19821: LD_VAR 0 4
19825: PUSH
19826: LD_EXP 47
19830: EQUAL
19831: IFFALSE 19841
// driverShortName = Lip ;
19833: LD_ADDR_VAR 0 5
19837: PUSH
19838: LD_STRING Lip
19840: ST_TO_ADDR
// if driver = Titov then
19841: LD_VAR 0 4
19845: PUSH
19846: LD_EXP 45
19850: EQUAL
19851: IFFALSE 19861
// driverShortName = Tit ;
19853: LD_ADDR_VAR 0 5
19857: PUSH
19858: LD_STRING Tit
19860: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19861: LD_ADDR_EXP 5
19865: PUSH
19866: LD_EXP 5
19870: PUSH
19871: LD_VAR 0 2
19875: PPUSH
19876: CALL_OW 248
19880: PUSH
19881: LD_VAR 0 2
19885: PPUSH
19886: CALL_OW 265
19890: PUSH
19891: LD_VAR 0 2
19895: PPUSH
19896: CALL_OW 262
19900: PUSH
19901: LD_VAR 0 2
19905: PPUSH
19906: CALL_OW 263
19910: PUSH
19911: LD_VAR 0 2
19915: PPUSH
19916: CALL_OW 264
19920: PUSH
19921: LD_VAR 0 5
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: ADD
19937: ST_TO_ADDR
// end ;
19938: GO 19679
19940: POP
19941: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19942: LD_EXP 5
19946: PPUSH
19947: LD_STRING 05_Tanks_4
19949: PPUSH
19950: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19954: LD_INT 22
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 23
19966: PUSH
19967: LD_INT 3
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 21
19976: PUSH
19977: LD_INT 3
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: LD_INT 30
19989: PUSH
19990: LD_INT 6
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 30
19999: PUSH
20000: LD_INT 7
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: PPUSH
20018: CALL_OW 69
20022: NOT
20023: IFFALSE 20033
// labDestroyed = 1 ;
20025: LD_ADDR_EXP 3
20029: PUSH
20030: LD_INT 1
20032: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
20033: LD_EXP 3
20037: PPUSH
20038: LD_STRING 05_LabDestroyed_5
20040: PPUSH
20041: CALL_OW 39
// end ; end_of_file
20045: LD_VAR 0 1
20049: RET
// export function Nef_PrepareNature ; var i , un ; begin
20050: LD_INT 0
20052: PPUSH
20053: PPUSH
20054: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
20055: LD_ADDR_VAR 0 2
20059: PUSH
20060: DOUBLE
20061: LD_INT 1
20063: DEC
20064: ST_TO_ADDR
20065: LD_EXP 28
20069: PUSH
20070: LD_INT 1
20072: ARRAY
20073: PUSH
20074: FOR_TO
20075: IFFALSE 20185
// begin uc_side = 0 ;
20077: LD_ADDR_OWVAR 20
20081: PUSH
20082: LD_INT 0
20084: ST_TO_ADDR
// uc_nation = nation_nature ;
20085: LD_ADDR_OWVAR 21
20089: PUSH
20090: LD_INT 0
20092: ST_TO_ADDR
// hc_class = class_apeman ;
20093: LD_ADDR_OWVAR 28
20097: PUSH
20098: LD_INT 12
20100: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20101: LD_ADDR_OWVAR 31
20105: PUSH
20106: LD_EXP 29
20110: PUSH
20111: LD_INT 1
20113: ARRAY
20114: PUSH
20115: LD_EXP 29
20119: PUSH
20120: LD_INT 2
20122: ARRAY
20123: PUSH
20124: LD_EXP 29
20128: PUSH
20129: LD_INT 3
20131: ARRAY
20132: PUSH
20133: LD_EXP 29
20137: PUSH
20138: LD_INT 4
20140: ARRAY
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20148: LD_ADDR_OWVAR 35
20152: PUSH
20153: LD_EXP 30
20157: ST_TO_ADDR
// un = CreateHuman ;
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: CALL_OW 44
20167: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20168: LD_VAR 0 3
20172: PPUSH
20173: LD_INT 33
20175: PPUSH
20176: LD_INT 0
20178: PPUSH
20179: CALL_OW 49
// end ;
20183: GO 20074
20185: POP
20186: POP
// for i := 1 to animalsAmount [ 2 ] do
20187: LD_ADDR_VAR 0 2
20191: PUSH
20192: DOUBLE
20193: LD_INT 1
20195: DEC
20196: ST_TO_ADDR
20197: LD_EXP 28
20201: PUSH
20202: LD_INT 2
20204: ARRAY
20205: PUSH
20206: FOR_TO
20207: IFFALSE 20317
// begin uc_side = 0 ;
20209: LD_ADDR_OWVAR 20
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// uc_nation = nation_nature ;
20217: LD_ADDR_OWVAR 21
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// hc_class = class_phororhacos ;
20225: LD_ADDR_OWVAR 28
20229: PUSH
20230: LD_INT 18
20232: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20233: LD_ADDR_OWVAR 31
20237: PUSH
20238: LD_EXP 29
20242: PUSH
20243: LD_INT 1
20245: ARRAY
20246: PUSH
20247: LD_EXP 29
20251: PUSH
20252: LD_INT 2
20254: ARRAY
20255: PUSH
20256: LD_EXP 29
20260: PUSH
20261: LD_INT 3
20263: ARRAY
20264: PUSH
20265: LD_EXP 29
20269: PUSH
20270: LD_INT 4
20272: ARRAY
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20280: LD_ADDR_OWVAR 35
20284: PUSH
20285: LD_EXP 30
20289: ST_TO_ADDR
// un = CreateHuman ;
20290: LD_ADDR_VAR 0 3
20294: PUSH
20295: CALL_OW 44
20299: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20300: LD_VAR 0 3
20304: PPUSH
20305: LD_INT 33
20307: PPUSH
20308: LD_INT 0
20310: PPUSH
20311: CALL_OW 49
// end ;
20315: GO 20206
20317: POP
20318: POP
// for i := 1 to animalsAmount [ 3 ] do
20319: LD_ADDR_VAR 0 2
20323: PUSH
20324: DOUBLE
20325: LD_INT 1
20327: DEC
20328: ST_TO_ADDR
20329: LD_EXP 28
20333: PUSH
20334: LD_INT 3
20336: ARRAY
20337: PUSH
20338: FOR_TO
20339: IFFALSE 20449
// begin uc_side = 0 ;
20341: LD_ADDR_OWVAR 20
20345: PUSH
20346: LD_INT 0
20348: ST_TO_ADDR
// uc_nation = nation_nature ;
20349: LD_ADDR_OWVAR 21
20353: PUSH
20354: LD_INT 0
20356: ST_TO_ADDR
// hc_class = class_tiger ;
20357: LD_ADDR_OWVAR 28
20361: PUSH
20362: LD_INT 14
20364: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20365: LD_ADDR_OWVAR 31
20369: PUSH
20370: LD_EXP 29
20374: PUSH
20375: LD_INT 1
20377: ARRAY
20378: PUSH
20379: LD_EXP 29
20383: PUSH
20384: LD_INT 2
20386: ARRAY
20387: PUSH
20388: LD_EXP 29
20392: PUSH
20393: LD_INT 3
20395: ARRAY
20396: PUSH
20397: LD_EXP 29
20401: PUSH
20402: LD_INT 4
20404: ARRAY
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20412: LD_ADDR_OWVAR 35
20416: PUSH
20417: LD_EXP 30
20421: ST_TO_ADDR
// un = CreateHuman ;
20422: LD_ADDR_VAR 0 3
20426: PUSH
20427: CALL_OW 44
20431: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20432: LD_VAR 0 3
20436: PPUSH
20437: LD_INT 33
20439: PPUSH
20440: LD_INT 0
20442: PPUSH
20443: CALL_OW 49
// end ;
20447: GO 20338
20449: POP
20450: POP
// for i := 1 to animalsAmount [ 4 ] do
20451: LD_ADDR_VAR 0 2
20455: PUSH
20456: DOUBLE
20457: LD_INT 1
20459: DEC
20460: ST_TO_ADDR
20461: LD_EXP 28
20465: PUSH
20466: LD_INT 4
20468: ARRAY
20469: PUSH
20470: FOR_TO
20471: IFFALSE 20581
// begin uc_side = 0 ;
20473: LD_ADDR_OWVAR 20
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// uc_nation = nation_nature ;
20481: LD_ADDR_OWVAR 21
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// hc_class = 21 ;
20489: LD_ADDR_OWVAR 28
20493: PUSH
20494: LD_INT 21
20496: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20497: LD_ADDR_OWVAR 31
20501: PUSH
20502: LD_EXP 29
20506: PUSH
20507: LD_INT 1
20509: ARRAY
20510: PUSH
20511: LD_EXP 29
20515: PUSH
20516: LD_INT 2
20518: ARRAY
20519: PUSH
20520: LD_EXP 29
20524: PUSH
20525: LD_INT 3
20527: ARRAY
20528: PUSH
20529: LD_EXP 29
20533: PUSH
20534: LD_INT 4
20536: ARRAY
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20544: LD_ADDR_OWVAR 35
20548: PUSH
20549: LD_EXP 30
20553: ST_TO_ADDR
// un = CreateHuman ;
20554: LD_ADDR_VAR 0 3
20558: PUSH
20559: CALL_OW 44
20563: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20564: LD_VAR 0 3
20568: PPUSH
20569: LD_INT 33
20571: PPUSH
20572: LD_INT 0
20574: PPUSH
20575: CALL_OW 49
// end ;
20579: GO 20470
20581: POP
20582: POP
// for i := 1 to animalsAmount [ 5 ] do
20583: LD_ADDR_VAR 0 2
20587: PUSH
20588: DOUBLE
20589: LD_INT 1
20591: DEC
20592: ST_TO_ADDR
20593: LD_EXP 28
20597: PUSH
20598: LD_INT 5
20600: ARRAY
20601: PUSH
20602: FOR_TO
20603: IFFALSE 20664
// begin uc_side = 0 ;
20605: LD_ADDR_OWVAR 20
20609: PUSH
20610: LD_INT 0
20612: ST_TO_ADDR
// uc_nation = nation_nature ;
20613: LD_ADDR_OWVAR 21
20617: PUSH
20618: LD_INT 0
20620: ST_TO_ADDR
// vc_chassis := 31 ;
20621: LD_ADDR_OWVAR 37
20625: PUSH
20626: LD_INT 31
20628: ST_TO_ADDR
// vc_control := control_rider ;
20629: LD_ADDR_OWVAR 38
20633: PUSH
20634: LD_INT 4
20636: ST_TO_ADDR
// un := CreateVehicle ;
20637: LD_ADDR_VAR 0 3
20641: PUSH
20642: CALL_OW 45
20646: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20647: LD_VAR 0 3
20651: PPUSH
20652: LD_INT 33
20654: PPUSH
20655: LD_INT 0
20657: PPUSH
20658: CALL_OW 49
// end ;
20662: GO 20602
20664: POP
20665: POP
// end ; end_of_file
20666: LD_VAR 0 1
20670: RET
// every 0 0$1 do
20671: GO 20673
20673: DISABLE
// begin enable ;
20674: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20675: LD_ADDR_OWVAR 47
20679: PUSH
20680: LD_STRING #Am01-1
20682: PUSH
20683: LD_EXP 7
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20692: LD_ADDR_EXP 7
20696: PUSH
20697: LD_EXP 7
20701: PUSH
20702: LD_INT 35
20704: PLUS
20705: ST_TO_ADDR
// end ; end_of_file
20706: END
// every 0 0$01 do var timer ;
20707: GO 20709
20709: DISABLE
20710: LD_INT 0
20712: PPUSH
// begin timer := 0 0$30 ;
20713: LD_ADDR_VAR 0 1
20717: PUSH
20718: LD_INT 1050
20720: ST_TO_ADDR
// repeat wait ( timer ) ;
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20730: LD_EXP 22
20734: PUSH
20735: LD_INT 6
20737: GREATEREQUAL
20738: PUSH
20739: LD_EXP 22
20743: PUSH
20744: LD_INT 12
20746: LESS
20747: AND
20748: IFFALSE 20764
// timer := timer + 0 0$3 ;
20750: LD_ADDR_VAR 0 1
20754: PUSH
20755: LD_VAR 0 1
20759: PUSH
20760: LD_INT 105
20762: PLUS
20763: ST_TO_ADDR
// if cratesSpawned >= 12 then
20764: LD_EXP 22
20768: PUSH
20769: LD_INT 12
20771: GREATEREQUAL
20772: IFFALSE 20788
// timer := timer + 0 0$9 ;
20774: LD_ADDR_VAR 0 1
20778: PUSH
20779: LD_VAR 0 1
20783: PUSH
20784: LD_INT 315
20786: PLUS
20787: ST_TO_ADDR
// if timer > 3 3$00 then
20788: LD_VAR 0 1
20792: PUSH
20793: LD_INT 6300
20795: GREATER
20796: IFFALSE 20806
// timer := 0 0$50 ;
20798: LD_ADDR_VAR 0 1
20802: PUSH
20803: LD_INT 1750
20805: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20806: LD_INT 3
20808: PPUSH
20809: LD_INT 5
20811: PPUSH
20812: CALL_OW 12
20816: PPUSH
20817: LD_INT 46
20819: PPUSH
20820: LD_INT 1
20822: PPUSH
20823: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20827: LD_ADDR_EXP 22
20831: PUSH
20832: LD_EXP 22
20836: PUSH
20837: LD_INT 1
20839: PLUS
20840: ST_TO_ADDR
// until false ;
20841: LD_INT 0
20843: IFFALSE 20721
// end ;
20845: PPOPN 1
20847: END
// every 0 0$5 do
20848: GO 20850
20850: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20851: LD_INT 5
20853: PPUSH
20854: LD_INT 48
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL_OW 55
// wait ( 0 0$40 ) ;
20864: LD_INT 1400
20866: PPUSH
20867: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20871: LD_INT 5
20873: PPUSH
20874: LD_INT 48
20876: PPUSH
20877: LD_INT 1
20879: PPUSH
20880: CALL_OW 55
// end ;
20884: END
// every 10 10$0 do
20885: GO 20887
20887: DISABLE
// begin enable ;
20888: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20889: LD_INT 3
20891: PPUSH
20892: LD_INT 5
20894: PPUSH
20895: CALL_OW 12
20899: PPUSH
20900: LD_INT 48
20902: PPUSH
20903: LD_INT 1
20905: PPUSH
20906: CALL_OW 55
// end ; end_of_file
20910: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20911: LD_INT 0
20913: PPUSH
// uc_side = 1 ;
20914: LD_ADDR_OWVAR 20
20918: PUSH
20919: LD_INT 1
20921: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20922: LD_ADDR_EXP 58
20926: PUSH
20927: LD_STRING Stevens
20929: PPUSH
20930: LD_INT 0
20932: PPUSH
20933: LD_INT 0
20935: PPUSH
20936: CALL 8546 0 3
20940: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20941: LD_EXP 58
20945: PPUSH
20946: LD_VAR 0 1
20950: PPUSH
20951: LD_INT 1
20953: PPUSH
20954: CALL_OW 49
// end ; end_of_file
20958: LD_VAR 0 2
20962: RET
// every 1 trigger achievement_DestroyedHovercrafts >= 3 do
20963: LD_EXP 26
20967: PUSH
20968: LD_INT 3
20970: GREATEREQUAL
20971: IFFALSE 20983
20973: GO 20975
20975: DISABLE
// SetAchievement ( ACH_HOVER ) ;
20976: LD_STRING ACH_HOVER
20978: PPUSH
20979: CALL_OW 543
20983: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_nature ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) and not FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_class , class_apeman ] ] ) do
20984: LD_INT 22
20986: PUSH
20987: LD_INT 3
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 23
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: PUSH
21007: LD_INT 25
21009: PUSH
21010: LD_INT 12
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 25
21019: PUSH
21020: LD_INT 16
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 25
21029: PUSH
21030: LD_INT 15
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: LIST
21047: PPUSH
21048: CALL_OW 69
21052: PUSH
21053: LD_INT 22
21055: PUSH
21056: LD_INT 0
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 23
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 25
21075: PUSH
21076: LD_INT 12
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: LIST
21087: PPUSH
21088: CALL_OW 69
21092: NOT
21093: AND
21094: IFFALSE 21106
21096: GO 21098
21098: DISABLE
// SetAchievement ( ACH_REDARMY ) ;
21099: LD_STRING ACH_REDARMY
21101: PPUSH
21102: CALL_OW 543
21106: END
// every 1 trigger not achievement_CollectedCrates do var crates , depot ;
21107: LD_EXP 27
21111: NOT
21112: IFFALSE 21245
21114: GO 21116
21116: DISABLE
21117: LD_INT 0
21119: PPUSH
21120: PPUSH
// begin enable ;
21121: ENABLE
// crates = 0 ;
21122: LD_ADDR_VAR 0 1
21126: PUSH
21127: LD_INT 0
21129: ST_TO_ADDR
// for depot in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: LD_INT 22
21137: PUSH
21138: LD_INT 3
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 21
21147: PUSH
21148: LD_INT 3
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 30
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 50
21167: PUSH
21168: EMPTY
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: PPUSH
21177: CALL_OW 69
21181: PUSH
21182: FOR_IN
21183: IFFALSE 21216
// crates = crates + GetResourceType ( GetBase ( depot ) , mat_cans ) ;
21185: LD_ADDR_VAR 0 1
21189: PUSH
21190: LD_VAR 0 1
21194: PUSH
21195: LD_VAR 0 2
21199: PPUSH
21200: CALL_OW 274
21204: PPUSH
21205: LD_INT 1
21207: PPUSH
21208: CALL_OW 275
21212: PLUS
21213: ST_TO_ADDR
21214: GO 21182
21216: POP
21217: POP
// if crates >= 500 then
21218: LD_VAR 0 1
21222: PUSH
21223: LD_INT 500
21225: GREATEREQUAL
21226: IFFALSE 21245
// begin achievement_CollectedCrates = true ;
21228: LD_ADDR_EXP 27
21232: PUSH
21233: LD_INT 1
21235: ST_TO_ADDR
// SetAchievement ( ACH_CRATES ) ;
21236: LD_STRING ACH_CRATES
21238: PPUSH
21239: CALL_OW 543
// exit ;
21243: GO 21245
// end ; end ; end_of_file
21245: PPOPN 2
21247: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21248: LD_INT 0
21250: PPUSH
21251: PPUSH
// if exist_mode then
21252: LD_VAR 0 2
21256: IFFALSE 21281
// unit := CreateCharacter ( prefix & ident ) else
21258: LD_ADDR_VAR 0 5
21262: PUSH
21263: LD_VAR 0 3
21267: PUSH
21268: LD_VAR 0 1
21272: STR
21273: PPUSH
21274: CALL_OW 34
21278: ST_TO_ADDR
21279: GO 21296
// unit := NewCharacter ( ident ) ;
21281: LD_ADDR_VAR 0 5
21285: PUSH
21286: LD_VAR 0 1
21290: PPUSH
21291: CALL_OW 25
21295: ST_TO_ADDR
// result := unit ;
21296: LD_ADDR_VAR 0 4
21300: PUSH
21301: LD_VAR 0 5
21305: ST_TO_ADDR
// end ;
21306: LD_VAR 0 4
21310: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21311: LD_INT 0
21313: PPUSH
21314: PPUSH
// if not side or not nation then
21315: LD_VAR 0 1
21319: NOT
21320: PUSH
21321: LD_VAR 0 2
21325: NOT
21326: OR
21327: IFFALSE 21331
// exit ;
21329: GO 22099
// case nation of nation_american :
21331: LD_VAR 0 2
21335: PUSH
21336: LD_INT 1
21338: DOUBLE
21339: EQUAL
21340: IFTRUE 21344
21342: GO 21558
21344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21345: LD_ADDR_VAR 0 4
21349: PUSH
21350: LD_INT 35
21352: PUSH
21353: LD_INT 45
21355: PUSH
21356: LD_INT 46
21358: PUSH
21359: LD_INT 47
21361: PUSH
21362: LD_INT 82
21364: PUSH
21365: LD_INT 83
21367: PUSH
21368: LD_INT 84
21370: PUSH
21371: LD_INT 85
21373: PUSH
21374: LD_INT 86
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: LD_INT 6
21385: PUSH
21386: LD_INT 15
21388: PUSH
21389: LD_INT 16
21391: PUSH
21392: LD_INT 7
21394: PUSH
21395: LD_INT 12
21397: PUSH
21398: LD_INT 13
21400: PUSH
21401: LD_INT 10
21403: PUSH
21404: LD_INT 14
21406: PUSH
21407: LD_INT 20
21409: PUSH
21410: LD_INT 21
21412: PUSH
21413: LD_INT 22
21415: PUSH
21416: LD_INT 25
21418: PUSH
21419: LD_INT 32
21421: PUSH
21422: LD_INT 27
21424: PUSH
21425: LD_INT 36
21427: PUSH
21428: LD_INT 69
21430: PUSH
21431: LD_INT 39
21433: PUSH
21434: LD_INT 34
21436: PUSH
21437: LD_INT 40
21439: PUSH
21440: LD_INT 48
21442: PUSH
21443: LD_INT 49
21445: PUSH
21446: LD_INT 50
21448: PUSH
21449: LD_INT 51
21451: PUSH
21452: LD_INT 52
21454: PUSH
21455: LD_INT 53
21457: PUSH
21458: LD_INT 54
21460: PUSH
21461: LD_INT 55
21463: PUSH
21464: LD_INT 56
21466: PUSH
21467: LD_INT 57
21469: PUSH
21470: LD_INT 58
21472: PUSH
21473: LD_INT 59
21475: PUSH
21476: LD_INT 60
21478: PUSH
21479: LD_INT 61
21481: PUSH
21482: LD_INT 62
21484: PUSH
21485: LD_INT 80
21487: PUSH
21488: LD_INT 82
21490: PUSH
21491: LD_INT 83
21493: PUSH
21494: LD_INT 84
21496: PUSH
21497: LD_INT 85
21499: PUSH
21500: LD_INT 86
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: ST_TO_ADDR
21556: GO 22023
21558: LD_INT 2
21560: DOUBLE
21561: EQUAL
21562: IFTRUE 21566
21564: GO 21792
21566: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21567: LD_ADDR_VAR 0 4
21571: PUSH
21572: LD_INT 35
21574: PUSH
21575: LD_INT 45
21577: PUSH
21578: LD_INT 46
21580: PUSH
21581: LD_INT 47
21583: PUSH
21584: LD_INT 82
21586: PUSH
21587: LD_INT 83
21589: PUSH
21590: LD_INT 84
21592: PUSH
21593: LD_INT 85
21595: PUSH
21596: LD_INT 87
21598: PUSH
21599: LD_INT 70
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: LD_INT 11
21607: PUSH
21608: LD_INT 3
21610: PUSH
21611: LD_INT 4
21613: PUSH
21614: LD_INT 5
21616: PUSH
21617: LD_INT 6
21619: PUSH
21620: LD_INT 15
21622: PUSH
21623: LD_INT 18
21625: PUSH
21626: LD_INT 7
21628: PUSH
21629: LD_INT 17
21631: PUSH
21632: LD_INT 8
21634: PUSH
21635: LD_INT 20
21637: PUSH
21638: LD_INT 21
21640: PUSH
21641: LD_INT 22
21643: PUSH
21644: LD_INT 72
21646: PUSH
21647: LD_INT 26
21649: PUSH
21650: LD_INT 69
21652: PUSH
21653: LD_INT 39
21655: PUSH
21656: LD_INT 40
21658: PUSH
21659: LD_INT 41
21661: PUSH
21662: LD_INT 42
21664: PUSH
21665: LD_INT 43
21667: PUSH
21668: LD_INT 48
21670: PUSH
21671: LD_INT 49
21673: PUSH
21674: LD_INT 50
21676: PUSH
21677: LD_INT 51
21679: PUSH
21680: LD_INT 52
21682: PUSH
21683: LD_INT 53
21685: PUSH
21686: LD_INT 54
21688: PUSH
21689: LD_INT 55
21691: PUSH
21692: LD_INT 56
21694: PUSH
21695: LD_INT 60
21697: PUSH
21698: LD_INT 61
21700: PUSH
21701: LD_INT 62
21703: PUSH
21704: LD_INT 66
21706: PUSH
21707: LD_INT 67
21709: PUSH
21710: LD_INT 68
21712: PUSH
21713: LD_INT 81
21715: PUSH
21716: LD_INT 82
21718: PUSH
21719: LD_INT 83
21721: PUSH
21722: LD_INT 84
21724: PUSH
21725: LD_INT 85
21727: PUSH
21728: LD_INT 87
21730: PUSH
21731: LD_INT 88
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
21790: GO 22023
21792: LD_INT 3
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 22022
21800: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21801: LD_ADDR_VAR 0 4
21805: PUSH
21806: LD_INT 46
21808: PUSH
21809: LD_INT 47
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: LD_INT 2
21817: PUSH
21818: LD_INT 82
21820: PUSH
21821: LD_INT 83
21823: PUSH
21824: LD_INT 84
21826: PUSH
21827: LD_INT 85
21829: PUSH
21830: LD_INT 86
21832: PUSH
21833: LD_INT 11
21835: PUSH
21836: LD_INT 9
21838: PUSH
21839: LD_INT 20
21841: PUSH
21842: LD_INT 19
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 24
21850: PUSH
21851: LD_INT 22
21853: PUSH
21854: LD_INT 25
21856: PUSH
21857: LD_INT 28
21859: PUSH
21860: LD_INT 29
21862: PUSH
21863: LD_INT 30
21865: PUSH
21866: LD_INT 31
21868: PUSH
21869: LD_INT 37
21871: PUSH
21872: LD_INT 38
21874: PUSH
21875: LD_INT 32
21877: PUSH
21878: LD_INT 27
21880: PUSH
21881: LD_INT 33
21883: PUSH
21884: LD_INT 69
21886: PUSH
21887: LD_INT 39
21889: PUSH
21890: LD_INT 34
21892: PUSH
21893: LD_INT 40
21895: PUSH
21896: LD_INT 71
21898: PUSH
21899: LD_INT 23
21901: PUSH
21902: LD_INT 44
21904: PUSH
21905: LD_INT 48
21907: PUSH
21908: LD_INT 49
21910: PUSH
21911: LD_INT 50
21913: PUSH
21914: LD_INT 51
21916: PUSH
21917: LD_INT 52
21919: PUSH
21920: LD_INT 53
21922: PUSH
21923: LD_INT 54
21925: PUSH
21926: LD_INT 55
21928: PUSH
21929: LD_INT 56
21931: PUSH
21932: LD_INT 57
21934: PUSH
21935: LD_INT 58
21937: PUSH
21938: LD_INT 59
21940: PUSH
21941: LD_INT 63
21943: PUSH
21944: LD_INT 64
21946: PUSH
21947: LD_INT 65
21949: PUSH
21950: LD_INT 82
21952: PUSH
21953: LD_INT 83
21955: PUSH
21956: LD_INT 84
21958: PUSH
21959: LD_INT 85
21961: PUSH
21962: LD_INT 86
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: ST_TO_ADDR
22020: GO 22023
22022: POP
// if state > - 1 and state < 3 then
22023: LD_VAR 0 3
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: GREATER
22032: PUSH
22033: LD_VAR 0 3
22037: PUSH
22038: LD_INT 3
22040: LESS
22041: AND
22042: IFFALSE 22099
// for i in result do
22044: LD_ADDR_VAR 0 5
22048: PUSH
22049: LD_VAR 0 4
22053: PUSH
22054: FOR_IN
22055: IFFALSE 22097
// if GetTech ( i , side ) <> state then
22057: LD_VAR 0 5
22061: PPUSH
22062: LD_VAR 0 1
22066: PPUSH
22067: CALL_OW 321
22071: PUSH
22072: LD_VAR 0 3
22076: NONEQUAL
22077: IFFALSE 22095
// result := result diff i ;
22079: LD_ADDR_VAR 0 4
22083: PUSH
22084: LD_VAR 0 4
22088: PUSH
22089: LD_VAR 0 5
22093: DIFF
22094: ST_TO_ADDR
22095: GO 22054
22097: POP
22098: POP
// end ;
22099: LD_VAR 0 4
22103: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22104: LD_INT 0
22106: PPUSH
22107: PPUSH
22108: PPUSH
// result := true ;
22109: LD_ADDR_VAR 0 3
22113: PUSH
22114: LD_INT 1
22116: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22117: LD_ADDR_VAR 0 5
22121: PUSH
22122: LD_VAR 0 2
22126: PPUSH
22127: CALL_OW 480
22131: ST_TO_ADDR
// if not tmp then
22132: LD_VAR 0 5
22136: NOT
22137: IFFALSE 22141
// exit ;
22139: GO 22190
// for i in tmp do
22141: LD_ADDR_VAR 0 4
22145: PUSH
22146: LD_VAR 0 5
22150: PUSH
22151: FOR_IN
22152: IFFALSE 22188
// if GetTech ( i , side ) <> state_researched then
22154: LD_VAR 0 4
22158: PPUSH
22159: LD_VAR 0 1
22163: PPUSH
22164: CALL_OW 321
22168: PUSH
22169: LD_INT 2
22171: NONEQUAL
22172: IFFALSE 22186
// begin result := false ;
22174: LD_ADDR_VAR 0 3
22178: PUSH
22179: LD_INT 0
22181: ST_TO_ADDR
// exit ;
22182: POP
22183: POP
22184: GO 22190
// end ;
22186: GO 22151
22188: POP
22189: POP
// end ;
22190: LD_VAR 0 3
22194: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22195: LD_INT 0
22197: PPUSH
22198: PPUSH
22199: PPUSH
22200: PPUSH
22201: PPUSH
22202: PPUSH
22203: PPUSH
22204: PPUSH
22205: PPUSH
22206: PPUSH
22207: PPUSH
22208: PPUSH
22209: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22210: LD_VAR 0 1
22214: NOT
22215: PUSH
22216: LD_VAR 0 1
22220: PPUSH
22221: CALL_OW 257
22225: PUSH
22226: LD_INT 9
22228: NONEQUAL
22229: OR
22230: IFFALSE 22234
// exit ;
22232: GO 22807
// side := GetSide ( unit ) ;
22234: LD_ADDR_VAR 0 9
22238: PUSH
22239: LD_VAR 0 1
22243: PPUSH
22244: CALL_OW 255
22248: ST_TO_ADDR
// tech_space := tech_spacanom ;
22249: LD_ADDR_VAR 0 12
22253: PUSH
22254: LD_INT 29
22256: ST_TO_ADDR
// tech_time := tech_taurad ;
22257: LD_ADDR_VAR 0 13
22261: PUSH
22262: LD_INT 28
22264: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22265: LD_ADDR_VAR 0 11
22269: PUSH
22270: LD_VAR 0 1
22274: PPUSH
22275: CALL_OW 310
22279: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22280: LD_VAR 0 11
22284: PPUSH
22285: CALL_OW 247
22289: PUSH
22290: LD_INT 2
22292: EQUAL
22293: IFFALSE 22297
// exit ;
22295: GO 22807
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22297: LD_ADDR_VAR 0 8
22301: PUSH
22302: LD_INT 81
22304: PUSH
22305: LD_VAR 0 9
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 3
22316: PUSH
22317: LD_INT 21
22319: PUSH
22320: LD_INT 3
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PPUSH
22335: CALL_OW 69
22339: ST_TO_ADDR
// if not tmp then
22340: LD_VAR 0 8
22344: NOT
22345: IFFALSE 22349
// exit ;
22347: GO 22807
// if in_unit then
22349: LD_VAR 0 11
22353: IFFALSE 22377
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22355: LD_ADDR_VAR 0 10
22359: PUSH
22360: LD_VAR 0 8
22364: PPUSH
22365: LD_VAR 0 11
22369: PPUSH
22370: CALL_OW 74
22374: ST_TO_ADDR
22375: GO 22397
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22377: LD_ADDR_VAR 0 10
22381: PUSH
22382: LD_VAR 0 8
22386: PPUSH
22387: LD_VAR 0 1
22391: PPUSH
22392: CALL_OW 74
22396: ST_TO_ADDR
// if not enemy then
22397: LD_VAR 0 10
22401: NOT
22402: IFFALSE 22406
// exit ;
22404: GO 22807
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22406: LD_VAR 0 11
22410: PUSH
22411: LD_VAR 0 11
22415: PPUSH
22416: LD_VAR 0 10
22420: PPUSH
22421: CALL_OW 296
22425: PUSH
22426: LD_INT 13
22428: GREATER
22429: AND
22430: PUSH
22431: LD_VAR 0 1
22435: PPUSH
22436: LD_VAR 0 10
22440: PPUSH
22441: CALL_OW 296
22445: PUSH
22446: LD_INT 12
22448: GREATER
22449: OR
22450: IFFALSE 22454
// exit ;
22452: GO 22807
// missile := [ 1 ] ;
22454: LD_ADDR_VAR 0 14
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: EMPTY
22463: LIST
22464: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22465: LD_VAR 0 9
22469: PPUSH
22470: LD_VAR 0 12
22474: PPUSH
22475: CALL_OW 325
22479: IFFALSE 22508
// missile := Replace ( missile , missile + 1 , 2 ) ;
22481: LD_ADDR_VAR 0 14
22485: PUSH
22486: LD_VAR 0 14
22490: PPUSH
22491: LD_VAR 0 14
22495: PUSH
22496: LD_INT 1
22498: PLUS
22499: PPUSH
22500: LD_INT 2
22502: PPUSH
22503: CALL_OW 1
22507: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22508: LD_VAR 0 9
22512: PPUSH
22513: LD_VAR 0 13
22517: PPUSH
22518: CALL_OW 325
22522: PUSH
22523: LD_VAR 0 10
22527: PPUSH
22528: CALL_OW 255
22532: PPUSH
22533: LD_VAR 0 13
22537: PPUSH
22538: CALL_OW 325
22542: NOT
22543: AND
22544: IFFALSE 22573
// missile := Replace ( missile , missile + 1 , 3 ) ;
22546: LD_ADDR_VAR 0 14
22550: PUSH
22551: LD_VAR 0 14
22555: PPUSH
22556: LD_VAR 0 14
22560: PUSH
22561: LD_INT 1
22563: PLUS
22564: PPUSH
22565: LD_INT 3
22567: PPUSH
22568: CALL_OW 1
22572: ST_TO_ADDR
// if missile < 2 then
22573: LD_VAR 0 14
22577: PUSH
22578: LD_INT 2
22580: LESS
22581: IFFALSE 22585
// exit ;
22583: GO 22807
// x := GetX ( enemy ) ;
22585: LD_ADDR_VAR 0 4
22589: PUSH
22590: LD_VAR 0 10
22594: PPUSH
22595: CALL_OW 250
22599: ST_TO_ADDR
// y := GetY ( enemy ) ;
22600: LD_ADDR_VAR 0 5
22604: PUSH
22605: LD_VAR 0 10
22609: PPUSH
22610: CALL_OW 251
22614: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22615: LD_ADDR_VAR 0 6
22619: PUSH
22620: LD_VAR 0 4
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PPUSH
22629: LD_INT 1
22631: PPUSH
22632: CALL_OW 12
22636: PLUS
22637: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22638: LD_ADDR_VAR 0 7
22642: PUSH
22643: LD_VAR 0 5
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PPUSH
22652: LD_INT 1
22654: PPUSH
22655: CALL_OW 12
22659: PLUS
22660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22661: LD_VAR 0 6
22665: PPUSH
22666: LD_VAR 0 7
22670: PPUSH
22671: CALL_OW 488
22675: NOT
22676: IFFALSE 22698
// begin _x := x ;
22678: LD_ADDR_VAR 0 6
22682: PUSH
22683: LD_VAR 0 4
22687: ST_TO_ADDR
// _y := y ;
22688: LD_ADDR_VAR 0 7
22692: PUSH
22693: LD_VAR 0 5
22697: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: LD_INT 1
22705: PPUSH
22706: LD_VAR 0 14
22710: PPUSH
22711: CALL_OW 12
22715: ST_TO_ADDR
// case i of 1 :
22716: LD_VAR 0 3
22720: PUSH
22721: LD_INT 1
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22746
22729: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22730: LD_VAR 0 1
22734: PPUSH
22735: LD_VAR 0 10
22739: PPUSH
22740: CALL_OW 115
22744: GO 22807
22746: LD_INT 2
22748: DOUBLE
22749: EQUAL
22750: IFTRUE 22754
22752: GO 22776
22754: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_VAR 0 6
22764: PPUSH
22765: LD_VAR 0 7
22769: PPUSH
22770: CALL_OW 153
22774: GO 22807
22776: LD_INT 3
22778: DOUBLE
22779: EQUAL
22780: IFTRUE 22784
22782: GO 22806
22784: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22785: LD_VAR 0 1
22789: PPUSH
22790: LD_VAR 0 6
22794: PPUSH
22795: LD_VAR 0 7
22799: PPUSH
22800: CALL_OW 154
22804: GO 22807
22806: POP
// end ;
22807: LD_VAR 0 2
22811: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
22817: PPUSH
22818: PPUSH
22819: PPUSH
// if not unit or not building then
22820: LD_VAR 0 1
22824: NOT
22825: PUSH
22826: LD_VAR 0 2
22830: NOT
22831: OR
22832: IFFALSE 22836
// exit ;
22834: GO 22994
// x := GetX ( building ) ;
22836: LD_ADDR_VAR 0 5
22840: PUSH
22841: LD_VAR 0 2
22845: PPUSH
22846: CALL_OW 250
22850: ST_TO_ADDR
// y := GetY ( building ) ;
22851: LD_ADDR_VAR 0 6
22855: PUSH
22856: LD_VAR 0 2
22860: PPUSH
22861: CALL_OW 251
22865: ST_TO_ADDR
// for i = 0 to 5 do
22866: LD_ADDR_VAR 0 4
22870: PUSH
22871: DOUBLE
22872: LD_INT 0
22874: DEC
22875: ST_TO_ADDR
22876: LD_INT 5
22878: PUSH
22879: FOR_TO
22880: IFFALSE 22992
// begin _x := ShiftX ( x , i , 3 ) ;
22882: LD_ADDR_VAR 0 7
22886: PUSH
22887: LD_VAR 0 5
22891: PPUSH
22892: LD_VAR 0 4
22896: PPUSH
22897: LD_INT 3
22899: PPUSH
22900: CALL_OW 272
22904: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22905: LD_ADDR_VAR 0 8
22909: PUSH
22910: LD_VAR 0 6
22914: PPUSH
22915: LD_VAR 0 4
22919: PPUSH
22920: LD_INT 3
22922: PPUSH
22923: CALL_OW 273
22927: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22928: LD_VAR 0 7
22932: PPUSH
22933: LD_VAR 0 8
22937: PPUSH
22938: CALL_OW 488
22942: NOT
22943: IFFALSE 22947
// continue ;
22945: GO 22879
// if HexInfo ( _x , _y ) = 0 then
22947: LD_VAR 0 7
22951: PPUSH
22952: LD_VAR 0 8
22956: PPUSH
22957: CALL_OW 428
22961: PUSH
22962: LD_INT 0
22964: EQUAL
22965: IFFALSE 22990
// begin ComMoveXY ( unit , _x , _y ) ;
22967: LD_VAR 0 1
22971: PPUSH
22972: LD_VAR 0 7
22976: PPUSH
22977: LD_VAR 0 8
22981: PPUSH
22982: CALL_OW 111
// exit ;
22986: POP
22987: POP
22988: GO 22994
// end ; end ;
22990: GO 22879
22992: POP
22993: POP
// end ;
22994: LD_VAR 0 3
22998: RET
// export function ScanBase ( side , base_area ) ; begin
22999: LD_INT 0
23001: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23002: LD_ADDR_VAR 0 3
23006: PUSH
23007: LD_VAR 0 2
23011: PPUSH
23012: LD_INT 81
23014: PUSH
23015: LD_VAR 0 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PPUSH
23024: CALL_OW 70
23028: ST_TO_ADDR
// end ;
23029: LD_VAR 0 3
23033: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23034: LD_INT 0
23036: PPUSH
23037: PPUSH
23038: PPUSH
23039: PPUSH
// result := false ;
23040: LD_ADDR_VAR 0 2
23044: PUSH
23045: LD_INT 0
23047: ST_TO_ADDR
// side := GetSide ( unit ) ;
23048: LD_ADDR_VAR 0 3
23052: PUSH
23053: LD_VAR 0 1
23057: PPUSH
23058: CALL_OW 255
23062: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23063: LD_ADDR_VAR 0 4
23067: PUSH
23068: LD_VAR 0 1
23072: PPUSH
23073: CALL_OW 248
23077: ST_TO_ADDR
// case nat of 1 :
23078: LD_VAR 0 4
23082: PUSH
23083: LD_INT 1
23085: DOUBLE
23086: EQUAL
23087: IFTRUE 23091
23089: GO 23102
23091: POP
// tech := tech_lassight ; 2 :
23092: LD_ADDR_VAR 0 5
23096: PUSH
23097: LD_INT 12
23099: ST_TO_ADDR
23100: GO 23141
23102: LD_INT 2
23104: DOUBLE
23105: EQUAL
23106: IFTRUE 23110
23108: GO 23121
23110: POP
// tech := tech_mortar ; 3 :
23111: LD_ADDR_VAR 0 5
23115: PUSH
23116: LD_INT 41
23118: ST_TO_ADDR
23119: GO 23141
23121: LD_INT 3
23123: DOUBLE
23124: EQUAL
23125: IFTRUE 23129
23127: GO 23140
23129: POP
// tech := tech_bazooka ; end ;
23130: LD_ADDR_VAR 0 5
23134: PUSH
23135: LD_INT 44
23137: ST_TO_ADDR
23138: GO 23141
23140: POP
// if Researched ( side , tech ) then
23141: LD_VAR 0 3
23145: PPUSH
23146: LD_VAR 0 5
23150: PPUSH
23151: CALL_OW 325
23155: IFFALSE 23182
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23157: LD_ADDR_VAR 0 2
23161: PUSH
23162: LD_INT 5
23164: PUSH
23165: LD_INT 8
23167: PUSH
23168: LD_INT 9
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: PUSH
23176: LD_VAR 0 4
23180: ARRAY
23181: ST_TO_ADDR
// end ;
23182: LD_VAR 0 2
23186: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23187: LD_INT 0
23189: PPUSH
23190: PPUSH
23191: PPUSH
// if not mines then
23192: LD_VAR 0 2
23196: NOT
23197: IFFALSE 23201
// exit ;
23199: GO 23345
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23201: LD_ADDR_VAR 0 5
23205: PUSH
23206: LD_INT 81
23208: PUSH
23209: LD_VAR 0 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 3
23220: PUSH
23221: LD_INT 21
23223: PUSH
23224: LD_INT 3
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 69
23243: ST_TO_ADDR
// for i in mines do
23244: LD_ADDR_VAR 0 4
23248: PUSH
23249: LD_VAR 0 2
23253: PUSH
23254: FOR_IN
23255: IFFALSE 23343
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23257: LD_VAR 0 4
23261: PUSH
23262: LD_INT 1
23264: ARRAY
23265: PPUSH
23266: LD_VAR 0 4
23270: PUSH
23271: LD_INT 2
23273: ARRAY
23274: PPUSH
23275: CALL_OW 458
23279: NOT
23280: IFFALSE 23284
// continue ;
23282: GO 23254
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23284: LD_VAR 0 4
23288: PUSH
23289: LD_INT 1
23291: ARRAY
23292: PPUSH
23293: LD_VAR 0 4
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: CALL_OW 428
23306: PUSH
23307: LD_VAR 0 5
23311: IN
23312: IFFALSE 23341
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23314: LD_VAR 0 4
23318: PUSH
23319: LD_INT 1
23321: ARRAY
23322: PPUSH
23323: LD_VAR 0 4
23327: PUSH
23328: LD_INT 2
23330: ARRAY
23331: PPUSH
23332: LD_VAR 0 1
23336: PPUSH
23337: CALL_OW 456
// end ;
23341: GO 23254
23343: POP
23344: POP
// end ;
23345: LD_VAR 0 3
23349: RET
// export function Count ( array ) ; var i ; begin
23350: LD_INT 0
23352: PPUSH
23353: PPUSH
// result := 0 ;
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_INT 0
23361: ST_TO_ADDR
// for i in array do
23362: LD_ADDR_VAR 0 3
23366: PUSH
23367: LD_VAR 0 1
23371: PUSH
23372: FOR_IN
23373: IFFALSE 23397
// if i then
23375: LD_VAR 0 3
23379: IFFALSE 23395
// result := result + 1 ;
23381: LD_ADDR_VAR 0 2
23385: PUSH
23386: LD_VAR 0 2
23390: PUSH
23391: LD_INT 1
23393: PLUS
23394: ST_TO_ADDR
23395: GO 23372
23397: POP
23398: POP
// end ;
23399: LD_VAR 0 2
23403: RET
// export function IsEmpty ( building ) ; begin
23404: LD_INT 0
23406: PPUSH
// if not building then
23407: LD_VAR 0 1
23411: NOT
23412: IFFALSE 23416
// exit ;
23414: GO 23459
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23416: LD_ADDR_VAR 0 2
23420: PUSH
23421: LD_VAR 0 1
23425: PUSH
23426: LD_INT 22
23428: PUSH
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 255
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 58
23445: PUSH
23446: EMPTY
23447: LIST
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PPUSH
23453: CALL_OW 69
23457: IN
23458: ST_TO_ADDR
// end ;
23459: LD_VAR 0 2
23463: RET
// export function IsNotFull ( building ) ; var places ; begin
23464: LD_INT 0
23466: PPUSH
23467: PPUSH
// if not building then
23468: LD_VAR 0 1
23472: NOT
23473: IFFALSE 23477
// exit ;
23475: GO 23648
// result := false ;
23477: LD_ADDR_VAR 0 2
23481: PUSH
23482: LD_INT 0
23484: ST_TO_ADDR
// places := 0 ;
23485: LD_ADDR_VAR 0 3
23489: PUSH
23490: LD_INT 0
23492: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
23493: LD_VAR 0 1
23497: PPUSH
23498: CALL_OW 266
23502: PUSH
23503: LD_INT 0
23505: DOUBLE
23506: EQUAL
23507: IFTRUE 23565
23509: LD_INT 1
23511: DOUBLE
23512: EQUAL
23513: IFTRUE 23565
23515: LD_INT 6
23517: DOUBLE
23518: EQUAL
23519: IFTRUE 23565
23521: LD_INT 7
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23565
23527: LD_INT 8
23529: DOUBLE
23530: EQUAL
23531: IFTRUE 23565
23533: LD_INT 4
23535: DOUBLE
23536: EQUAL
23537: IFTRUE 23565
23539: LD_INT 5
23541: DOUBLE
23542: EQUAL
23543: IFTRUE 23565
23545: LD_INT 2
23547: DOUBLE
23548: EQUAL
23549: IFTRUE 23565
23551: LD_INT 3
23553: DOUBLE
23554: EQUAL
23555: IFTRUE 23565
23557: LD_INT 35
23559: DOUBLE
23560: EQUAL
23561: IFTRUE 23565
23563: GO 23576
23565: POP
// places := 6 ; b_bunker , b_breastwork :
23566: LD_ADDR_VAR 0 3
23570: PUSH
23571: LD_INT 6
23573: ST_TO_ADDR
23574: GO 23621
23576: LD_INT 32
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23590
23582: LD_INT 31
23584: DOUBLE
23585: EQUAL
23586: IFTRUE 23590
23588: GO 23601
23590: POP
// places := 1 ; b_control_tower :
23591: LD_ADDR_VAR 0 3
23595: PUSH
23596: LD_INT 1
23598: ST_TO_ADDR
23599: GO 23621
23601: LD_INT 36
23603: DOUBLE
23604: EQUAL
23605: IFTRUE 23609
23607: GO 23620
23609: POP
// places := 3 ; end ;
23610: LD_ADDR_VAR 0 3
23614: PUSH
23615: LD_INT 3
23617: ST_TO_ADDR
23618: GO 23621
23620: POP
// if places then
23621: LD_VAR 0 3
23625: IFFALSE 23648
// result := UnitsInside ( building ) < places ;
23627: LD_ADDR_VAR 0 2
23631: PUSH
23632: LD_VAR 0 1
23636: PPUSH
23637: CALL_OW 313
23641: PUSH
23642: LD_VAR 0 3
23646: LESS
23647: ST_TO_ADDR
// end ;
23648: LD_VAR 0 2
23652: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23653: LD_INT 0
23655: PPUSH
23656: PPUSH
23657: PPUSH
23658: PPUSH
// tmp := [ ] ;
23659: LD_ADDR_VAR 0 3
23663: PUSH
23664: EMPTY
23665: ST_TO_ADDR
// list := [ ] ;
23666: LD_ADDR_VAR 0 5
23670: PUSH
23671: EMPTY
23672: ST_TO_ADDR
// for i = 16 to 25 do
23673: LD_ADDR_VAR 0 4
23677: PUSH
23678: DOUBLE
23679: LD_INT 16
23681: DEC
23682: ST_TO_ADDR
23683: LD_INT 25
23685: PUSH
23686: FOR_TO
23687: IFFALSE 23760
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23689: LD_ADDR_VAR 0 3
23693: PUSH
23694: LD_VAR 0 3
23698: PUSH
23699: LD_INT 22
23701: PUSH
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 255
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 91
23718: PUSH
23719: LD_VAR 0 1
23723: PUSH
23724: LD_INT 6
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 30
23734: PUSH
23735: LD_VAR 0 4
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: PUSH
23749: EMPTY
23750: LIST
23751: PPUSH
23752: CALL_OW 69
23756: ADD
23757: ST_TO_ADDR
23758: GO 23686
23760: POP
23761: POP
// for i = 1 to tmp do
23762: LD_ADDR_VAR 0 4
23766: PUSH
23767: DOUBLE
23768: LD_INT 1
23770: DEC
23771: ST_TO_ADDR
23772: LD_VAR 0 3
23776: PUSH
23777: FOR_TO
23778: IFFALSE 23866
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23780: LD_ADDR_VAR 0 5
23784: PUSH
23785: LD_VAR 0 5
23789: PUSH
23790: LD_VAR 0 3
23794: PUSH
23795: LD_VAR 0 4
23799: ARRAY
23800: PPUSH
23801: CALL_OW 266
23805: PUSH
23806: LD_VAR 0 3
23810: PUSH
23811: LD_VAR 0 4
23815: ARRAY
23816: PPUSH
23817: CALL_OW 250
23821: PUSH
23822: LD_VAR 0 3
23826: PUSH
23827: LD_VAR 0 4
23831: ARRAY
23832: PPUSH
23833: CALL_OW 251
23837: PUSH
23838: LD_VAR 0 3
23842: PUSH
23843: LD_VAR 0 4
23847: ARRAY
23848: PPUSH
23849: CALL_OW 254
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: PUSH
23860: EMPTY
23861: LIST
23862: ADD
23863: ST_TO_ADDR
23864: GO 23777
23866: POP
23867: POP
// result := list ;
23868: LD_ADDR_VAR 0 2
23872: PUSH
23873: LD_VAR 0 5
23877: ST_TO_ADDR
// end ;
23878: LD_VAR 0 2
23882: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23883: LD_INT 0
23885: PPUSH
23886: PPUSH
23887: PPUSH
23888: PPUSH
23889: PPUSH
23890: PPUSH
23891: PPUSH
// if not factory then
23892: LD_VAR 0 1
23896: NOT
23897: IFFALSE 23901
// exit ;
23899: GO 24494
// if control = control_apeman then
23901: LD_VAR 0 4
23905: PUSH
23906: LD_INT 5
23908: EQUAL
23909: IFFALSE 24018
// begin tmp := UnitsInside ( factory ) ;
23911: LD_ADDR_VAR 0 8
23915: PUSH
23916: LD_VAR 0 1
23920: PPUSH
23921: CALL_OW 313
23925: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23926: LD_VAR 0 8
23930: PPUSH
23931: LD_INT 25
23933: PUSH
23934: LD_INT 12
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PPUSH
23941: CALL_OW 72
23945: NOT
23946: IFFALSE 23956
// control := control_manual ;
23948: LD_ADDR_VAR 0 4
23952: PUSH
23953: LD_INT 1
23955: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23956: LD_ADDR_VAR 0 8
23960: PUSH
23961: LD_VAR 0 1
23965: PPUSH
23966: CALL 23653 0 1
23970: ST_TO_ADDR
// if tmp then
23971: LD_VAR 0 8
23975: IFFALSE 24018
// begin for i in tmp do
23977: LD_ADDR_VAR 0 7
23981: PUSH
23982: LD_VAR 0 8
23986: PUSH
23987: FOR_IN
23988: IFFALSE 24016
// if i [ 1 ] = b_ext_radio then
23990: LD_VAR 0 7
23994: PUSH
23995: LD_INT 1
23997: ARRAY
23998: PUSH
23999: LD_INT 22
24001: EQUAL
24002: IFFALSE 24014
// begin control := control_remote ;
24004: LD_ADDR_VAR 0 4
24008: PUSH
24009: LD_INT 2
24011: ST_TO_ADDR
// break ;
24012: GO 24016
// end ;
24014: GO 23987
24016: POP
24017: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24018: LD_VAR 0 1
24022: PPUSH
24023: LD_VAR 0 2
24027: PPUSH
24028: LD_VAR 0 3
24032: PPUSH
24033: LD_VAR 0 4
24037: PPUSH
24038: LD_VAR 0 5
24042: PPUSH
24043: CALL_OW 448
24047: IFFALSE 24082
// begin result := [ chassis , engine , control , weapon ] ;
24049: LD_ADDR_VAR 0 6
24053: PUSH
24054: LD_VAR 0 2
24058: PUSH
24059: LD_VAR 0 3
24063: PUSH
24064: LD_VAR 0 4
24068: PUSH
24069: LD_VAR 0 5
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: ST_TO_ADDR
// exit ;
24080: GO 24494
// end ; _chassis := AvailableChassisList ( factory ) ;
24082: LD_ADDR_VAR 0 9
24086: PUSH
24087: LD_VAR 0 1
24091: PPUSH
24092: CALL_OW 475
24096: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24097: LD_ADDR_VAR 0 11
24101: PUSH
24102: LD_VAR 0 1
24106: PPUSH
24107: CALL_OW 476
24111: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24112: LD_ADDR_VAR 0 12
24116: PUSH
24117: LD_VAR 0 1
24121: PPUSH
24122: CALL_OW 477
24126: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24127: LD_ADDR_VAR 0 10
24131: PUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: CALL_OW 478
24141: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24142: LD_VAR 0 9
24146: NOT
24147: PUSH
24148: LD_VAR 0 11
24152: NOT
24153: OR
24154: PUSH
24155: LD_VAR 0 12
24159: NOT
24160: OR
24161: PUSH
24162: LD_VAR 0 10
24166: NOT
24167: OR
24168: IFFALSE 24203
// begin result := [ chassis , engine , control , weapon ] ;
24170: LD_ADDR_VAR 0 6
24174: PUSH
24175: LD_VAR 0 2
24179: PUSH
24180: LD_VAR 0 3
24184: PUSH
24185: LD_VAR 0 4
24189: PUSH
24190: LD_VAR 0 5
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: ST_TO_ADDR
// exit ;
24201: GO 24494
// end ; if not chassis in _chassis then
24203: LD_VAR 0 2
24207: PUSH
24208: LD_VAR 0 9
24212: IN
24213: NOT
24214: IFFALSE 24240
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24216: LD_ADDR_VAR 0 2
24220: PUSH
24221: LD_VAR 0 9
24225: PUSH
24226: LD_INT 1
24228: PPUSH
24229: LD_VAR 0 9
24233: PPUSH
24234: CALL_OW 12
24238: ARRAY
24239: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24240: LD_VAR 0 2
24244: PPUSH
24245: LD_VAR 0 3
24249: PPUSH
24250: CALL 24499 0 2
24254: NOT
24255: IFFALSE 24314
// repeat engine := _engine [ 1 ] ;
24257: LD_ADDR_VAR 0 3
24261: PUSH
24262: LD_VAR 0 11
24266: PUSH
24267: LD_INT 1
24269: ARRAY
24270: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24271: LD_ADDR_VAR 0 11
24275: PUSH
24276: LD_VAR 0 11
24280: PPUSH
24281: LD_INT 1
24283: PPUSH
24284: CALL_OW 3
24288: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24289: LD_VAR 0 2
24293: PPUSH
24294: LD_VAR 0 3
24298: PPUSH
24299: CALL 24499 0 2
24303: PUSH
24304: LD_VAR 0 11
24308: PUSH
24309: EMPTY
24310: EQUAL
24311: OR
24312: IFFALSE 24257
// if not control in _control then
24314: LD_VAR 0 4
24318: PUSH
24319: LD_VAR 0 12
24323: IN
24324: NOT
24325: IFFALSE 24351
// control := _control [ rand ( 1 , _control ) ] ;
24327: LD_ADDR_VAR 0 4
24331: PUSH
24332: LD_VAR 0 12
24336: PUSH
24337: LD_INT 1
24339: PPUSH
24340: LD_VAR 0 12
24344: PPUSH
24345: CALL_OW 12
24349: ARRAY
24350: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24351: LD_VAR 0 2
24355: PPUSH
24356: LD_VAR 0 5
24360: PPUSH
24361: CALL 24719 0 2
24365: NOT
24366: IFFALSE 24425
// repeat weapon := _weapon [ 1 ] ;
24368: LD_ADDR_VAR 0 5
24372: PUSH
24373: LD_VAR 0 10
24377: PUSH
24378: LD_INT 1
24380: ARRAY
24381: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24382: LD_ADDR_VAR 0 10
24386: PUSH
24387: LD_VAR 0 10
24391: PPUSH
24392: LD_INT 1
24394: PPUSH
24395: CALL_OW 3
24399: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24400: LD_VAR 0 2
24404: PPUSH
24405: LD_VAR 0 5
24409: PPUSH
24410: CALL 24719 0 2
24414: PUSH
24415: LD_VAR 0 10
24419: PUSH
24420: EMPTY
24421: EQUAL
24422: OR
24423: IFFALSE 24368
// result := [ ] ;
24425: LD_ADDR_VAR 0 6
24429: PUSH
24430: EMPTY
24431: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24432: LD_VAR 0 1
24436: PPUSH
24437: LD_VAR 0 2
24441: PPUSH
24442: LD_VAR 0 3
24446: PPUSH
24447: LD_VAR 0 4
24451: PPUSH
24452: LD_VAR 0 5
24456: PPUSH
24457: CALL_OW 448
24461: IFFALSE 24494
// result := [ chassis , engine , control , weapon ] ;
24463: LD_ADDR_VAR 0 6
24467: PUSH
24468: LD_VAR 0 2
24472: PUSH
24473: LD_VAR 0 3
24477: PUSH
24478: LD_VAR 0 4
24482: PUSH
24483: LD_VAR 0 5
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: ST_TO_ADDR
// end ;
24494: LD_VAR 0 6
24498: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24499: LD_INT 0
24501: PPUSH
// if not chassis or not engine then
24502: LD_VAR 0 1
24506: NOT
24507: PUSH
24508: LD_VAR 0 2
24512: NOT
24513: OR
24514: IFFALSE 24518
// exit ;
24516: GO 24714
// case engine of engine_solar :
24518: LD_VAR 0 2
24522: PUSH
24523: LD_INT 2
24525: DOUBLE
24526: EQUAL
24527: IFTRUE 24531
24529: GO 24569
24531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24532: LD_ADDR_VAR 0 3
24536: PUSH
24537: LD_INT 11
24539: PUSH
24540: LD_INT 12
24542: PUSH
24543: LD_INT 13
24545: PUSH
24546: LD_INT 14
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 2
24554: PUSH
24555: LD_INT 3
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: ST_TO_ADDR
24567: GO 24698
24569: LD_INT 1
24571: DOUBLE
24572: EQUAL
24573: IFTRUE 24577
24575: GO 24639
24577: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24578: LD_ADDR_VAR 0 3
24582: PUSH
24583: LD_INT 11
24585: PUSH
24586: LD_INT 12
24588: PUSH
24589: LD_INT 13
24591: PUSH
24592: LD_INT 14
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 3
24603: PUSH
24604: LD_INT 4
24606: PUSH
24607: LD_INT 5
24609: PUSH
24610: LD_INT 21
24612: PUSH
24613: LD_INT 23
24615: PUSH
24616: LD_INT 22
24618: PUSH
24619: LD_INT 24
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: ST_TO_ADDR
24637: GO 24698
24639: LD_INT 3
24641: DOUBLE
24642: EQUAL
24643: IFTRUE 24647
24645: GO 24697
24647: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24648: LD_ADDR_VAR 0 3
24652: PUSH
24653: LD_INT 13
24655: PUSH
24656: LD_INT 14
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: LD_INT 3
24664: PUSH
24665: LD_INT 4
24667: PUSH
24668: LD_INT 5
24670: PUSH
24671: LD_INT 21
24673: PUSH
24674: LD_INT 22
24676: PUSH
24677: LD_INT 23
24679: PUSH
24680: LD_INT 24
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: ST_TO_ADDR
24695: GO 24698
24697: POP
// result := ( chassis in result ) ;
24698: LD_ADDR_VAR 0 3
24702: PUSH
24703: LD_VAR 0 1
24707: PUSH
24708: LD_VAR 0 3
24712: IN
24713: ST_TO_ADDR
// end ;
24714: LD_VAR 0 3
24718: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24719: LD_INT 0
24721: PPUSH
// if not chassis or not weapon then
24722: LD_VAR 0 1
24726: NOT
24727: PUSH
24728: LD_VAR 0 2
24732: NOT
24733: OR
24734: IFFALSE 24738
// exit ;
24736: GO 25798
// case weapon of us_machine_gun :
24738: LD_VAR 0 2
24742: PUSH
24743: LD_INT 2
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24781
24751: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24752: LD_ADDR_VAR 0 3
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: LD_INT 2
24762: PUSH
24763: LD_INT 3
24765: PUSH
24766: LD_INT 4
24768: PUSH
24769: LD_INT 5
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: ST_TO_ADDR
24779: GO 25782
24781: LD_INT 3
24783: DOUBLE
24784: EQUAL
24785: IFTRUE 24789
24787: GO 24819
24789: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24790: LD_ADDR_VAR 0 3
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: LD_INT 3
24803: PUSH
24804: LD_INT 4
24806: PUSH
24807: LD_INT 5
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: ST_TO_ADDR
24817: GO 25782
24819: LD_INT 11
24821: DOUBLE
24822: EQUAL
24823: IFTRUE 24827
24825: GO 24857
24827: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24828: LD_ADDR_VAR 0 3
24832: PUSH
24833: LD_INT 1
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: LD_INT 3
24841: PUSH
24842: LD_INT 4
24844: PUSH
24845: LD_INT 5
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: ST_TO_ADDR
24855: GO 25782
24857: LD_INT 4
24859: DOUBLE
24860: EQUAL
24861: IFTRUE 24865
24863: GO 24891
24865: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: LD_INT 3
24876: PUSH
24877: LD_INT 4
24879: PUSH
24880: LD_INT 5
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: ST_TO_ADDR
24889: GO 25782
24891: LD_INT 5
24893: DOUBLE
24894: EQUAL
24895: IFTRUE 24899
24897: GO 24925
24899: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24900: LD_ADDR_VAR 0 3
24904: PUSH
24905: LD_INT 2
24907: PUSH
24908: LD_INT 3
24910: PUSH
24911: LD_INT 4
24913: PUSH
24914: LD_INT 5
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: ST_TO_ADDR
24923: GO 25782
24925: LD_INT 9
24927: DOUBLE
24928: EQUAL
24929: IFTRUE 24933
24931: GO 24959
24933: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24934: LD_ADDR_VAR 0 3
24938: PUSH
24939: LD_INT 2
24941: PUSH
24942: LD_INT 3
24944: PUSH
24945: LD_INT 4
24947: PUSH
24948: LD_INT 5
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: ST_TO_ADDR
24957: GO 25782
24959: LD_INT 7
24961: DOUBLE
24962: EQUAL
24963: IFTRUE 24967
24965: GO 24993
24967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24968: LD_ADDR_VAR 0 3
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: LD_INT 3
24978: PUSH
24979: LD_INT 4
24981: PUSH
24982: LD_INT 5
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: ST_TO_ADDR
24991: GO 25782
24993: LD_INT 12
24995: DOUBLE
24996: EQUAL
24997: IFTRUE 25001
24999: GO 25027
25001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25002: LD_ADDR_VAR 0 3
25006: PUSH
25007: LD_INT 2
25009: PUSH
25010: LD_INT 3
25012: PUSH
25013: LD_INT 4
25015: PUSH
25016: LD_INT 5
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: ST_TO_ADDR
25025: GO 25782
25027: LD_INT 13
25029: DOUBLE
25030: EQUAL
25031: IFTRUE 25035
25033: GO 25061
25035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25036: LD_ADDR_VAR 0 3
25040: PUSH
25041: LD_INT 2
25043: PUSH
25044: LD_INT 3
25046: PUSH
25047: LD_INT 4
25049: PUSH
25050: LD_INT 5
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: ST_TO_ADDR
25059: GO 25782
25061: LD_INT 14
25063: DOUBLE
25064: EQUAL
25065: IFTRUE 25069
25067: GO 25087
25069: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25070: LD_ADDR_VAR 0 3
25074: PUSH
25075: LD_INT 4
25077: PUSH
25078: LD_INT 5
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: ST_TO_ADDR
25085: GO 25782
25087: LD_INT 6
25089: DOUBLE
25090: EQUAL
25091: IFTRUE 25095
25093: GO 25113
25095: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25096: LD_ADDR_VAR 0 3
25100: PUSH
25101: LD_INT 4
25103: PUSH
25104: LD_INT 5
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: ST_TO_ADDR
25111: GO 25782
25113: LD_INT 10
25115: DOUBLE
25116: EQUAL
25117: IFTRUE 25121
25119: GO 25139
25121: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_INT 4
25129: PUSH
25130: LD_INT 5
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: ST_TO_ADDR
25137: GO 25782
25139: LD_INT 22
25141: DOUBLE
25142: EQUAL
25143: IFTRUE 25147
25145: GO 25173
25147: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25148: LD_ADDR_VAR 0 3
25152: PUSH
25153: LD_INT 11
25155: PUSH
25156: LD_INT 12
25158: PUSH
25159: LD_INT 13
25161: PUSH
25162: LD_INT 14
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: ST_TO_ADDR
25171: GO 25782
25173: LD_INT 23
25175: DOUBLE
25176: EQUAL
25177: IFTRUE 25181
25179: GO 25207
25181: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25182: LD_ADDR_VAR 0 3
25186: PUSH
25187: LD_INT 11
25189: PUSH
25190: LD_INT 12
25192: PUSH
25193: LD_INT 13
25195: PUSH
25196: LD_INT 14
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: ST_TO_ADDR
25205: GO 25782
25207: LD_INT 24
25209: DOUBLE
25210: EQUAL
25211: IFTRUE 25215
25213: GO 25241
25215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25216: LD_ADDR_VAR 0 3
25220: PUSH
25221: LD_INT 11
25223: PUSH
25224: LD_INT 12
25226: PUSH
25227: LD_INT 13
25229: PUSH
25230: LD_INT 14
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: ST_TO_ADDR
25239: GO 25782
25241: LD_INT 30
25243: DOUBLE
25244: EQUAL
25245: IFTRUE 25249
25247: GO 25275
25249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25250: LD_ADDR_VAR 0 3
25254: PUSH
25255: LD_INT 11
25257: PUSH
25258: LD_INT 12
25260: PUSH
25261: LD_INT 13
25263: PUSH
25264: LD_INT 14
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: ST_TO_ADDR
25273: GO 25782
25275: LD_INT 25
25277: DOUBLE
25278: EQUAL
25279: IFTRUE 25283
25281: GO 25301
25283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25284: LD_ADDR_VAR 0 3
25288: PUSH
25289: LD_INT 13
25291: PUSH
25292: LD_INT 14
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: ST_TO_ADDR
25299: GO 25782
25301: LD_INT 27
25303: DOUBLE
25304: EQUAL
25305: IFTRUE 25309
25307: GO 25327
25309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25310: LD_ADDR_VAR 0 3
25314: PUSH
25315: LD_INT 13
25317: PUSH
25318: LD_INT 14
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: ST_TO_ADDR
25325: GO 25782
25327: LD_INT 92
25329: DOUBLE
25330: EQUAL
25331: IFTRUE 25335
25333: GO 25361
25335: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25336: LD_ADDR_VAR 0 3
25340: PUSH
25341: LD_INT 11
25343: PUSH
25344: LD_INT 12
25346: PUSH
25347: LD_INT 13
25349: PUSH
25350: LD_INT 14
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: ST_TO_ADDR
25359: GO 25782
25361: LD_INT 28
25363: DOUBLE
25364: EQUAL
25365: IFTRUE 25369
25367: GO 25387
25369: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25370: LD_ADDR_VAR 0 3
25374: PUSH
25375: LD_INT 13
25377: PUSH
25378: LD_INT 14
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: ST_TO_ADDR
25385: GO 25782
25387: LD_INT 29
25389: DOUBLE
25390: EQUAL
25391: IFTRUE 25395
25393: GO 25413
25395: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25396: LD_ADDR_VAR 0 3
25400: PUSH
25401: LD_INT 13
25403: PUSH
25404: LD_INT 14
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: ST_TO_ADDR
25411: GO 25782
25413: LD_INT 31
25415: DOUBLE
25416: EQUAL
25417: IFTRUE 25421
25419: GO 25439
25421: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25422: LD_ADDR_VAR 0 3
25426: PUSH
25427: LD_INT 13
25429: PUSH
25430: LD_INT 14
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: ST_TO_ADDR
25437: GO 25782
25439: LD_INT 26
25441: DOUBLE
25442: EQUAL
25443: IFTRUE 25447
25445: GO 25465
25447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_INT 13
25455: PUSH
25456: LD_INT 14
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: ST_TO_ADDR
25463: GO 25782
25465: LD_INT 42
25467: DOUBLE
25468: EQUAL
25469: IFTRUE 25473
25471: GO 25499
25473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25474: LD_ADDR_VAR 0 3
25478: PUSH
25479: LD_INT 21
25481: PUSH
25482: LD_INT 22
25484: PUSH
25485: LD_INT 23
25487: PUSH
25488: LD_INT 24
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: ST_TO_ADDR
25497: GO 25782
25499: LD_INT 43
25501: DOUBLE
25502: EQUAL
25503: IFTRUE 25507
25505: GO 25533
25507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25508: LD_ADDR_VAR 0 3
25512: PUSH
25513: LD_INT 21
25515: PUSH
25516: LD_INT 22
25518: PUSH
25519: LD_INT 23
25521: PUSH
25522: LD_INT 24
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: ST_TO_ADDR
25531: GO 25782
25533: LD_INT 44
25535: DOUBLE
25536: EQUAL
25537: IFTRUE 25541
25539: GO 25567
25541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25542: LD_ADDR_VAR 0 3
25546: PUSH
25547: LD_INT 21
25549: PUSH
25550: LD_INT 22
25552: PUSH
25553: LD_INT 23
25555: PUSH
25556: LD_INT 24
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: ST_TO_ADDR
25565: GO 25782
25567: LD_INT 45
25569: DOUBLE
25570: EQUAL
25571: IFTRUE 25575
25573: GO 25601
25575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25576: LD_ADDR_VAR 0 3
25580: PUSH
25581: LD_INT 21
25583: PUSH
25584: LD_INT 22
25586: PUSH
25587: LD_INT 23
25589: PUSH
25590: LD_INT 24
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: ST_TO_ADDR
25599: GO 25782
25601: LD_INT 49
25603: DOUBLE
25604: EQUAL
25605: IFTRUE 25609
25607: GO 25635
25609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25610: LD_ADDR_VAR 0 3
25614: PUSH
25615: LD_INT 21
25617: PUSH
25618: LD_INT 22
25620: PUSH
25621: LD_INT 23
25623: PUSH
25624: LD_INT 24
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: ST_TO_ADDR
25633: GO 25782
25635: LD_INT 51
25637: DOUBLE
25638: EQUAL
25639: IFTRUE 25643
25641: GO 25669
25643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25644: LD_ADDR_VAR 0 3
25648: PUSH
25649: LD_INT 21
25651: PUSH
25652: LD_INT 22
25654: PUSH
25655: LD_INT 23
25657: PUSH
25658: LD_INT 24
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: ST_TO_ADDR
25667: GO 25782
25669: LD_INT 52
25671: DOUBLE
25672: EQUAL
25673: IFTRUE 25677
25675: GO 25703
25677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: LD_INT 21
25685: PUSH
25686: LD_INT 22
25688: PUSH
25689: LD_INT 23
25691: PUSH
25692: LD_INT 24
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: ST_TO_ADDR
25701: GO 25782
25703: LD_INT 53
25705: DOUBLE
25706: EQUAL
25707: IFTRUE 25711
25709: GO 25729
25711: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25712: LD_ADDR_VAR 0 3
25716: PUSH
25717: LD_INT 23
25719: PUSH
25720: LD_INT 24
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: ST_TO_ADDR
25727: GO 25782
25729: LD_INT 46
25731: DOUBLE
25732: EQUAL
25733: IFTRUE 25737
25735: GO 25755
25737: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25738: LD_ADDR_VAR 0 3
25742: PUSH
25743: LD_INT 23
25745: PUSH
25746: LD_INT 24
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: ST_TO_ADDR
25753: GO 25782
25755: LD_INT 47
25757: DOUBLE
25758: EQUAL
25759: IFTRUE 25763
25761: GO 25781
25763: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25764: LD_ADDR_VAR 0 3
25768: PUSH
25769: LD_INT 23
25771: PUSH
25772: LD_INT 24
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: ST_TO_ADDR
25779: GO 25782
25781: POP
// result := ( chassis in result ) ;
25782: LD_ADDR_VAR 0 3
25786: PUSH
25787: LD_VAR 0 1
25791: PUSH
25792: LD_VAR 0 3
25796: IN
25797: ST_TO_ADDR
// end ;
25798: LD_VAR 0 3
25802: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25803: LD_INT 0
25805: PPUSH
25806: PPUSH
25807: PPUSH
25808: PPUSH
25809: PPUSH
25810: PPUSH
25811: PPUSH
// result := array ;
25812: LD_ADDR_VAR 0 5
25816: PUSH
25817: LD_VAR 0 1
25821: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25822: LD_VAR 0 1
25826: NOT
25827: PUSH
25828: LD_VAR 0 2
25832: NOT
25833: OR
25834: PUSH
25835: LD_VAR 0 3
25839: NOT
25840: OR
25841: PUSH
25842: LD_VAR 0 2
25846: PUSH
25847: LD_VAR 0 1
25851: GREATER
25852: OR
25853: PUSH
25854: LD_VAR 0 3
25858: PUSH
25859: LD_VAR 0 1
25863: GREATER
25864: OR
25865: IFFALSE 25869
// exit ;
25867: GO 26165
// if direction then
25869: LD_VAR 0 4
25873: IFFALSE 25937
// begin d := 1 ;
25875: LD_ADDR_VAR 0 9
25879: PUSH
25880: LD_INT 1
25882: ST_TO_ADDR
// if i_from > i_to then
25883: LD_VAR 0 2
25887: PUSH
25888: LD_VAR 0 3
25892: GREATER
25893: IFFALSE 25919
// length := ( array - i_from ) + i_to else
25895: LD_ADDR_VAR 0 11
25899: PUSH
25900: LD_VAR 0 1
25904: PUSH
25905: LD_VAR 0 2
25909: MINUS
25910: PUSH
25911: LD_VAR 0 3
25915: PLUS
25916: ST_TO_ADDR
25917: GO 25935
// length := i_to - i_from ;
25919: LD_ADDR_VAR 0 11
25923: PUSH
25924: LD_VAR 0 3
25928: PUSH
25929: LD_VAR 0 2
25933: MINUS
25934: ST_TO_ADDR
// end else
25935: GO 25998
// begin d := - 1 ;
25937: LD_ADDR_VAR 0 9
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: ST_TO_ADDR
// if i_from > i_to then
25946: LD_VAR 0 2
25950: PUSH
25951: LD_VAR 0 3
25955: GREATER
25956: IFFALSE 25976
// length := i_from - i_to else
25958: LD_ADDR_VAR 0 11
25962: PUSH
25963: LD_VAR 0 2
25967: PUSH
25968: LD_VAR 0 3
25972: MINUS
25973: ST_TO_ADDR
25974: GO 25998
// length := ( array - i_to ) + i_from ;
25976: LD_ADDR_VAR 0 11
25980: PUSH
25981: LD_VAR 0 1
25985: PUSH
25986: LD_VAR 0 3
25990: MINUS
25991: PUSH
25992: LD_VAR 0 2
25996: PLUS
25997: ST_TO_ADDR
// end ; if not length then
25998: LD_VAR 0 11
26002: NOT
26003: IFFALSE 26007
// exit ;
26005: GO 26165
// tmp := array ;
26007: LD_ADDR_VAR 0 10
26011: PUSH
26012: LD_VAR 0 1
26016: ST_TO_ADDR
// for i = 1 to length do
26017: LD_ADDR_VAR 0 6
26021: PUSH
26022: DOUBLE
26023: LD_INT 1
26025: DEC
26026: ST_TO_ADDR
26027: LD_VAR 0 11
26031: PUSH
26032: FOR_TO
26033: IFFALSE 26153
// begin for j = 1 to array do
26035: LD_ADDR_VAR 0 7
26039: PUSH
26040: DOUBLE
26041: LD_INT 1
26043: DEC
26044: ST_TO_ADDR
26045: LD_VAR 0 1
26049: PUSH
26050: FOR_TO
26051: IFFALSE 26139
// begin k := j + d ;
26053: LD_ADDR_VAR 0 8
26057: PUSH
26058: LD_VAR 0 7
26062: PUSH
26063: LD_VAR 0 9
26067: PLUS
26068: ST_TO_ADDR
// if k > array then
26069: LD_VAR 0 8
26073: PUSH
26074: LD_VAR 0 1
26078: GREATER
26079: IFFALSE 26089
// k := 1 ;
26081: LD_ADDR_VAR 0 8
26085: PUSH
26086: LD_INT 1
26088: ST_TO_ADDR
// if not k then
26089: LD_VAR 0 8
26093: NOT
26094: IFFALSE 26106
// k := array ;
26096: LD_ADDR_VAR 0 8
26100: PUSH
26101: LD_VAR 0 1
26105: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26106: LD_ADDR_VAR 0 10
26110: PUSH
26111: LD_VAR 0 10
26115: PPUSH
26116: LD_VAR 0 8
26120: PPUSH
26121: LD_VAR 0 1
26125: PUSH
26126: LD_VAR 0 7
26130: ARRAY
26131: PPUSH
26132: CALL_OW 1
26136: ST_TO_ADDR
// end ;
26137: GO 26050
26139: POP
26140: POP
// array := tmp ;
26141: LD_ADDR_VAR 0 1
26145: PUSH
26146: LD_VAR 0 10
26150: ST_TO_ADDR
// end ;
26151: GO 26032
26153: POP
26154: POP
// result := array ;
26155: LD_ADDR_VAR 0 5
26159: PUSH
26160: LD_VAR 0 1
26164: ST_TO_ADDR
// end ;
26165: LD_VAR 0 5
26169: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26170: LD_INT 0
26172: PPUSH
26173: PPUSH
// result := 0 ;
26174: LD_ADDR_VAR 0 3
26178: PUSH
26179: LD_INT 0
26181: ST_TO_ADDR
// if not array or not value in array then
26182: LD_VAR 0 1
26186: NOT
26187: PUSH
26188: LD_VAR 0 2
26192: PUSH
26193: LD_VAR 0 1
26197: IN
26198: NOT
26199: OR
26200: IFFALSE 26204
// exit ;
26202: GO 26258
// for i = 1 to array do
26204: LD_ADDR_VAR 0 4
26208: PUSH
26209: DOUBLE
26210: LD_INT 1
26212: DEC
26213: ST_TO_ADDR
26214: LD_VAR 0 1
26218: PUSH
26219: FOR_TO
26220: IFFALSE 26256
// if value = array [ i ] then
26222: LD_VAR 0 2
26226: PUSH
26227: LD_VAR 0 1
26231: PUSH
26232: LD_VAR 0 4
26236: ARRAY
26237: EQUAL
26238: IFFALSE 26254
// begin result := i ;
26240: LD_ADDR_VAR 0 3
26244: PUSH
26245: LD_VAR 0 4
26249: ST_TO_ADDR
// exit ;
26250: POP
26251: POP
26252: GO 26258
// end ;
26254: GO 26219
26256: POP
26257: POP
// end ;
26258: LD_VAR 0 3
26262: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26263: LD_INT 0
26265: PPUSH
// vc_chassis := chassis ;
26266: LD_ADDR_OWVAR 37
26270: PUSH
26271: LD_VAR 0 1
26275: ST_TO_ADDR
// vc_engine := engine ;
26276: LD_ADDR_OWVAR 39
26280: PUSH
26281: LD_VAR 0 2
26285: ST_TO_ADDR
// vc_control := control ;
26286: LD_ADDR_OWVAR 38
26290: PUSH
26291: LD_VAR 0 3
26295: ST_TO_ADDR
// vc_weapon := weapon ;
26296: LD_ADDR_OWVAR 40
26300: PUSH
26301: LD_VAR 0 4
26305: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26306: LD_ADDR_OWVAR 41
26310: PUSH
26311: LD_VAR 0 5
26315: ST_TO_ADDR
// end ;
26316: LD_VAR 0 6
26320: RET
// export function WantPlant ( unit ) ; var task ; begin
26321: LD_INT 0
26323: PPUSH
26324: PPUSH
// result := false ;
26325: LD_ADDR_VAR 0 2
26329: PUSH
26330: LD_INT 0
26332: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26333: LD_ADDR_VAR 0 3
26337: PUSH
26338: LD_VAR 0 1
26342: PPUSH
26343: CALL_OW 437
26347: ST_TO_ADDR
// if task then
26348: LD_VAR 0 3
26352: IFFALSE 26380
// if task [ 1 ] [ 1 ] = p then
26354: LD_VAR 0 3
26358: PUSH
26359: LD_INT 1
26361: ARRAY
26362: PUSH
26363: LD_INT 1
26365: ARRAY
26366: PUSH
26367: LD_STRING p
26369: EQUAL
26370: IFFALSE 26380
// result := true ;
26372: LD_ADDR_VAR 0 2
26376: PUSH
26377: LD_INT 1
26379: ST_TO_ADDR
// end ;
26380: LD_VAR 0 2
26384: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26385: LD_INT 0
26387: PPUSH
26388: PPUSH
26389: PPUSH
26390: PPUSH
// if pos < 1 then
26391: LD_VAR 0 2
26395: PUSH
26396: LD_INT 1
26398: LESS
26399: IFFALSE 26403
// exit ;
26401: GO 26706
// if pos = 1 then
26403: LD_VAR 0 2
26407: PUSH
26408: LD_INT 1
26410: EQUAL
26411: IFFALSE 26444
// result := Replace ( arr , pos [ 1 ] , value ) else
26413: LD_ADDR_VAR 0 4
26417: PUSH
26418: LD_VAR 0 1
26422: PPUSH
26423: LD_VAR 0 2
26427: PUSH
26428: LD_INT 1
26430: ARRAY
26431: PPUSH
26432: LD_VAR 0 3
26436: PPUSH
26437: CALL_OW 1
26441: ST_TO_ADDR
26442: GO 26706
// begin tmp := arr ;
26444: LD_ADDR_VAR 0 6
26448: PUSH
26449: LD_VAR 0 1
26453: ST_TO_ADDR
// s_arr := [ tmp ] ;
26454: LD_ADDR_VAR 0 7
26458: PUSH
26459: LD_VAR 0 6
26463: PUSH
26464: EMPTY
26465: LIST
26466: ST_TO_ADDR
// for i = 1 to pos - 1 do
26467: LD_ADDR_VAR 0 5
26471: PUSH
26472: DOUBLE
26473: LD_INT 1
26475: DEC
26476: ST_TO_ADDR
26477: LD_VAR 0 2
26481: PUSH
26482: LD_INT 1
26484: MINUS
26485: PUSH
26486: FOR_TO
26487: IFFALSE 26532
// begin tmp := tmp [ pos [ i ] ] ;
26489: LD_ADDR_VAR 0 6
26493: PUSH
26494: LD_VAR 0 6
26498: PUSH
26499: LD_VAR 0 2
26503: PUSH
26504: LD_VAR 0 5
26508: ARRAY
26509: ARRAY
26510: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26511: LD_ADDR_VAR 0 7
26515: PUSH
26516: LD_VAR 0 7
26520: PUSH
26521: LD_VAR 0 6
26525: PUSH
26526: EMPTY
26527: LIST
26528: ADD
26529: ST_TO_ADDR
// end ;
26530: GO 26486
26532: POP
26533: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26534: LD_ADDR_VAR 0 6
26538: PUSH
26539: LD_VAR 0 6
26543: PPUSH
26544: LD_VAR 0 2
26548: PUSH
26549: LD_VAR 0 2
26553: ARRAY
26554: PPUSH
26555: LD_VAR 0 3
26559: PPUSH
26560: CALL_OW 1
26564: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26565: LD_ADDR_VAR 0 7
26569: PUSH
26570: LD_VAR 0 7
26574: PPUSH
26575: LD_VAR 0 7
26579: PPUSH
26580: LD_VAR 0 6
26584: PPUSH
26585: CALL_OW 1
26589: ST_TO_ADDR
// for i = s_arr downto 2 do
26590: LD_ADDR_VAR 0 5
26594: PUSH
26595: DOUBLE
26596: LD_VAR 0 7
26600: INC
26601: ST_TO_ADDR
26602: LD_INT 2
26604: PUSH
26605: FOR_DOWNTO
26606: IFFALSE 26690
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26608: LD_ADDR_VAR 0 6
26612: PUSH
26613: LD_VAR 0 7
26617: PUSH
26618: LD_VAR 0 5
26622: PUSH
26623: LD_INT 1
26625: MINUS
26626: ARRAY
26627: PPUSH
26628: LD_VAR 0 2
26632: PUSH
26633: LD_VAR 0 5
26637: PUSH
26638: LD_INT 1
26640: MINUS
26641: ARRAY
26642: PPUSH
26643: LD_VAR 0 7
26647: PUSH
26648: LD_VAR 0 5
26652: ARRAY
26653: PPUSH
26654: CALL_OW 1
26658: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26659: LD_ADDR_VAR 0 7
26663: PUSH
26664: LD_VAR 0 7
26668: PPUSH
26669: LD_VAR 0 5
26673: PUSH
26674: LD_INT 1
26676: MINUS
26677: PPUSH
26678: LD_VAR 0 6
26682: PPUSH
26683: CALL_OW 1
26687: ST_TO_ADDR
// end ;
26688: GO 26605
26690: POP
26691: POP
// result := s_arr [ 1 ] ;
26692: LD_ADDR_VAR 0 4
26696: PUSH
26697: LD_VAR 0 7
26701: PUSH
26702: LD_INT 1
26704: ARRAY
26705: ST_TO_ADDR
// end ; end ;
26706: LD_VAR 0 4
26710: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26711: LD_INT 0
26713: PPUSH
26714: PPUSH
// if not list then
26715: LD_VAR 0 1
26719: NOT
26720: IFFALSE 26724
// exit ;
26722: GO 26815
// i := list [ pos1 ] ;
26724: LD_ADDR_VAR 0 5
26728: PUSH
26729: LD_VAR 0 1
26733: PUSH
26734: LD_VAR 0 2
26738: ARRAY
26739: ST_TO_ADDR
// if not i then
26740: LD_VAR 0 5
26744: NOT
26745: IFFALSE 26749
// exit ;
26747: GO 26815
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26749: LD_ADDR_VAR 0 1
26753: PUSH
26754: LD_VAR 0 1
26758: PPUSH
26759: LD_VAR 0 2
26763: PPUSH
26764: LD_VAR 0 1
26768: PUSH
26769: LD_VAR 0 3
26773: ARRAY
26774: PPUSH
26775: CALL_OW 1
26779: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26780: LD_ADDR_VAR 0 1
26784: PUSH
26785: LD_VAR 0 1
26789: PPUSH
26790: LD_VAR 0 3
26794: PPUSH
26795: LD_VAR 0 5
26799: PPUSH
26800: CALL_OW 1
26804: ST_TO_ADDR
// result := list ;
26805: LD_ADDR_VAR 0 4
26809: PUSH
26810: LD_VAR 0 1
26814: ST_TO_ADDR
// end ;
26815: LD_VAR 0 4
26819: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26820: LD_INT 0
26822: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26823: LD_ADDR_VAR 0 5
26827: PUSH
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 250
26837: PPUSH
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 251
26847: PPUSH
26848: LD_VAR 0 2
26852: PPUSH
26853: LD_VAR 0 3
26857: PPUSH
26858: LD_VAR 0 4
26862: PPUSH
26863: CALL 26873 0 5
26867: ST_TO_ADDR
// end ;
26868: LD_VAR 0 5
26872: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26873: LD_INT 0
26875: PPUSH
26876: PPUSH
26877: PPUSH
26878: PPUSH
// if not list then
26879: LD_VAR 0 3
26883: NOT
26884: IFFALSE 26888
// exit ;
26886: GO 27276
// result := [ ] ;
26888: LD_ADDR_VAR 0 6
26892: PUSH
26893: EMPTY
26894: ST_TO_ADDR
// for i in list do
26895: LD_ADDR_VAR 0 7
26899: PUSH
26900: LD_VAR 0 3
26904: PUSH
26905: FOR_IN
26906: IFFALSE 27108
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26908: LD_ADDR_VAR 0 9
26912: PUSH
26913: LD_VAR 0 7
26917: PPUSH
26918: LD_VAR 0 1
26922: PPUSH
26923: LD_VAR 0 2
26927: PPUSH
26928: CALL_OW 297
26932: ST_TO_ADDR
// if not result then
26933: LD_VAR 0 6
26937: NOT
26938: IFFALSE 26964
// result := [ [ i , tmp ] ] else
26940: LD_ADDR_VAR 0 6
26944: PUSH
26945: LD_VAR 0 7
26949: PUSH
26950: LD_VAR 0 9
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: ST_TO_ADDR
26962: GO 27106
// begin if result [ result ] [ 2 ] < tmp then
26964: LD_VAR 0 6
26968: PUSH
26969: LD_VAR 0 6
26973: ARRAY
26974: PUSH
26975: LD_INT 2
26977: ARRAY
26978: PUSH
26979: LD_VAR 0 9
26983: LESS
26984: IFFALSE 27026
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26986: LD_ADDR_VAR 0 6
26990: PUSH
26991: LD_VAR 0 6
26995: PPUSH
26996: LD_VAR 0 6
27000: PUSH
27001: LD_INT 1
27003: PLUS
27004: PPUSH
27005: LD_VAR 0 7
27009: PUSH
27010: LD_VAR 0 9
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PPUSH
27019: CALL_OW 2
27023: ST_TO_ADDR
27024: GO 27106
// for j = 1 to result do
27026: LD_ADDR_VAR 0 8
27030: PUSH
27031: DOUBLE
27032: LD_INT 1
27034: DEC
27035: ST_TO_ADDR
27036: LD_VAR 0 6
27040: PUSH
27041: FOR_TO
27042: IFFALSE 27104
// begin if tmp < result [ j ] [ 2 ] then
27044: LD_VAR 0 9
27048: PUSH
27049: LD_VAR 0 6
27053: PUSH
27054: LD_VAR 0 8
27058: ARRAY
27059: PUSH
27060: LD_INT 2
27062: ARRAY
27063: LESS
27064: IFFALSE 27102
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27066: LD_ADDR_VAR 0 6
27070: PUSH
27071: LD_VAR 0 6
27075: PPUSH
27076: LD_VAR 0 8
27080: PPUSH
27081: LD_VAR 0 7
27085: PUSH
27086: LD_VAR 0 9
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PPUSH
27095: CALL_OW 2
27099: ST_TO_ADDR
// break ;
27100: GO 27104
// end ; end ;
27102: GO 27041
27104: POP
27105: POP
// end ; end ;
27106: GO 26905
27108: POP
27109: POP
// if result and not asc then
27110: LD_VAR 0 6
27114: PUSH
27115: LD_VAR 0 4
27119: NOT
27120: AND
27121: IFFALSE 27196
// begin tmp := result ;
27123: LD_ADDR_VAR 0 9
27127: PUSH
27128: LD_VAR 0 6
27132: ST_TO_ADDR
// for i = tmp downto 1 do
27133: LD_ADDR_VAR 0 7
27137: PUSH
27138: DOUBLE
27139: LD_VAR 0 9
27143: INC
27144: ST_TO_ADDR
27145: LD_INT 1
27147: PUSH
27148: FOR_DOWNTO
27149: IFFALSE 27194
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27151: LD_ADDR_VAR 0 6
27155: PUSH
27156: LD_VAR 0 6
27160: PPUSH
27161: LD_VAR 0 9
27165: PUSH
27166: LD_VAR 0 7
27170: MINUS
27171: PUSH
27172: LD_INT 1
27174: PLUS
27175: PPUSH
27176: LD_VAR 0 9
27180: PUSH
27181: LD_VAR 0 7
27185: ARRAY
27186: PPUSH
27187: CALL_OW 1
27191: ST_TO_ADDR
27192: GO 27148
27194: POP
27195: POP
// end ; tmp := [ ] ;
27196: LD_ADDR_VAR 0 9
27200: PUSH
27201: EMPTY
27202: ST_TO_ADDR
// if mode then
27203: LD_VAR 0 5
27207: IFFALSE 27276
// begin for i = 1 to result do
27209: LD_ADDR_VAR 0 7
27213: PUSH
27214: DOUBLE
27215: LD_INT 1
27217: DEC
27218: ST_TO_ADDR
27219: LD_VAR 0 6
27223: PUSH
27224: FOR_TO
27225: IFFALSE 27264
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27227: LD_ADDR_VAR 0 9
27231: PUSH
27232: LD_VAR 0 9
27236: PPUSH
27237: LD_VAR 0 7
27241: PPUSH
27242: LD_VAR 0 6
27246: PUSH
27247: LD_VAR 0 7
27251: ARRAY
27252: PUSH
27253: LD_INT 1
27255: ARRAY
27256: PPUSH
27257: CALL_OW 1
27261: ST_TO_ADDR
27262: GO 27224
27264: POP
27265: POP
// result := tmp ;
27266: LD_ADDR_VAR 0 6
27270: PUSH
27271: LD_VAR 0 9
27275: ST_TO_ADDR
// end ; end ;
27276: LD_VAR 0 6
27280: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27281: LD_INT 0
27283: PPUSH
27284: PPUSH
27285: PPUSH
27286: PPUSH
27287: PPUSH
27288: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27289: LD_ADDR_VAR 0 5
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: EMPTY
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: ST_TO_ADDR
// if not x or not y then
27311: LD_VAR 0 2
27315: NOT
27316: PUSH
27317: LD_VAR 0 3
27321: NOT
27322: OR
27323: IFFALSE 27327
// exit ;
27325: GO 28977
// if not range then
27327: LD_VAR 0 4
27331: NOT
27332: IFFALSE 27342
// range := 10 ;
27334: LD_ADDR_VAR 0 4
27338: PUSH
27339: LD_INT 10
27341: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27342: LD_ADDR_VAR 0 8
27346: PUSH
27347: LD_INT 81
27349: PUSH
27350: LD_VAR 0 1
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 92
27361: PUSH
27362: LD_VAR 0 2
27366: PUSH
27367: LD_VAR 0 3
27371: PUSH
27372: LD_VAR 0 4
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 3
27385: PUSH
27386: LD_INT 21
27388: PUSH
27389: LD_INT 3
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: PPUSH
27405: CALL_OW 69
27409: ST_TO_ADDR
// if not tmp then
27410: LD_VAR 0 8
27414: NOT
27415: IFFALSE 27419
// exit ;
27417: GO 28977
// for i in tmp do
27419: LD_ADDR_VAR 0 6
27423: PUSH
27424: LD_VAR 0 8
27428: PUSH
27429: FOR_IN
27430: IFFALSE 28952
// begin points := [ 0 , 0 , 0 ] ;
27432: LD_ADDR_VAR 0 9
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: ST_TO_ADDR
// bpoints := 1 ;
27451: LD_ADDR_VAR 0 10
27455: PUSH
27456: LD_INT 1
27458: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27459: LD_VAR 0 6
27463: PPUSH
27464: CALL_OW 247
27468: PUSH
27469: LD_INT 1
27471: DOUBLE
27472: EQUAL
27473: IFTRUE 27477
27475: GO 28055
27477: POP
// begin if GetClass ( i ) = 1 then
27478: LD_VAR 0 6
27482: PPUSH
27483: CALL_OW 257
27487: PUSH
27488: LD_INT 1
27490: EQUAL
27491: IFFALSE 27512
// points := [ 10 , 5 , 3 ] ;
27493: LD_ADDR_VAR 0 9
27497: PUSH
27498: LD_INT 10
27500: PUSH
27501: LD_INT 5
27503: PUSH
27504: LD_INT 3
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27512: LD_VAR 0 6
27516: PPUSH
27517: CALL_OW 257
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: LD_INT 3
27527: PUSH
27528: LD_INT 4
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: LIST
27535: IN
27536: IFFALSE 27557
// points := [ 3 , 2 , 1 ] ;
27538: LD_ADDR_VAR 0 9
27542: PUSH
27543: LD_INT 3
27545: PUSH
27546: LD_INT 2
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27557: LD_VAR 0 6
27561: PPUSH
27562: CALL_OW 257
27566: PUSH
27567: LD_INT 5
27569: EQUAL
27570: IFFALSE 27591
// points := [ 130 , 5 , 2 ] ;
27572: LD_ADDR_VAR 0 9
27576: PUSH
27577: LD_INT 130
27579: PUSH
27580: LD_INT 5
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27591: LD_VAR 0 6
27595: PPUSH
27596: CALL_OW 257
27600: PUSH
27601: LD_INT 8
27603: EQUAL
27604: IFFALSE 27625
// points := [ 35 , 35 , 30 ] ;
27606: LD_ADDR_VAR 0 9
27610: PUSH
27611: LD_INT 35
27613: PUSH
27614: LD_INT 35
27616: PUSH
27617: LD_INT 30
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27625: LD_VAR 0 6
27629: PPUSH
27630: CALL_OW 257
27634: PUSH
27635: LD_INT 9
27637: EQUAL
27638: IFFALSE 27659
// points := [ 20 , 55 , 40 ] ;
27640: LD_ADDR_VAR 0 9
27644: PUSH
27645: LD_INT 20
27647: PUSH
27648: LD_INT 55
27650: PUSH
27651: LD_INT 40
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27659: LD_VAR 0 6
27663: PPUSH
27664: CALL_OW 257
27668: PUSH
27669: LD_INT 12
27671: PUSH
27672: LD_INT 16
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: IN
27679: IFFALSE 27700
// points := [ 5 , 3 , 2 ] ;
27681: LD_ADDR_VAR 0 9
27685: PUSH
27686: LD_INT 5
27688: PUSH
27689: LD_INT 3
27691: PUSH
27692: LD_INT 2
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27700: LD_VAR 0 6
27704: PPUSH
27705: CALL_OW 257
27709: PUSH
27710: LD_INT 17
27712: EQUAL
27713: IFFALSE 27734
// points := [ 100 , 50 , 75 ] ;
27715: LD_ADDR_VAR 0 9
27719: PUSH
27720: LD_INT 100
27722: PUSH
27723: LD_INT 50
27725: PUSH
27726: LD_INT 75
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27734: LD_VAR 0 6
27738: PPUSH
27739: CALL_OW 257
27743: PUSH
27744: LD_INT 15
27746: EQUAL
27747: IFFALSE 27768
// points := [ 10 , 5 , 3 ] ;
27749: LD_ADDR_VAR 0 9
27753: PUSH
27754: LD_INT 10
27756: PUSH
27757: LD_INT 5
27759: PUSH
27760: LD_INT 3
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27768: LD_VAR 0 6
27772: PPUSH
27773: CALL_OW 257
27777: PUSH
27778: LD_INT 14
27780: EQUAL
27781: IFFALSE 27802
// points := [ 10 , 0 , 0 ] ;
27783: LD_ADDR_VAR 0 9
27787: PUSH
27788: LD_INT 10
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27802: LD_VAR 0 6
27806: PPUSH
27807: CALL_OW 257
27811: PUSH
27812: LD_INT 11
27814: EQUAL
27815: IFFALSE 27836
// points := [ 30 , 10 , 5 ] ;
27817: LD_ADDR_VAR 0 9
27821: PUSH
27822: LD_INT 30
27824: PUSH
27825: LD_INT 10
27827: PUSH
27828: LD_INT 5
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27836: LD_VAR 0 1
27840: PPUSH
27841: LD_INT 5
27843: PPUSH
27844: CALL_OW 321
27848: PUSH
27849: LD_INT 2
27851: EQUAL
27852: IFFALSE 27869
// bpoints := bpoints * 1.8 ;
27854: LD_ADDR_VAR 0 10
27858: PUSH
27859: LD_VAR 0 10
27863: PUSH
27864: LD_REAL  1.80000000000000E+0000
27867: MUL
27868: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27869: LD_VAR 0 6
27873: PPUSH
27874: CALL_OW 257
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 3
27887: PUSH
27888: LD_INT 4
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: IN
27897: PUSH
27898: LD_VAR 0 1
27902: PPUSH
27903: LD_INT 51
27905: PPUSH
27906: CALL_OW 321
27910: PUSH
27911: LD_INT 2
27913: EQUAL
27914: AND
27915: IFFALSE 27932
// bpoints := bpoints * 1.2 ;
27917: LD_ADDR_VAR 0 10
27921: PUSH
27922: LD_VAR 0 10
27926: PUSH
27927: LD_REAL  1.20000000000000E+0000
27930: MUL
27931: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27932: LD_VAR 0 6
27936: PPUSH
27937: CALL_OW 257
27941: PUSH
27942: LD_INT 5
27944: PUSH
27945: LD_INT 7
27947: PUSH
27948: LD_INT 9
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: IN
27956: PUSH
27957: LD_VAR 0 1
27961: PPUSH
27962: LD_INT 52
27964: PPUSH
27965: CALL_OW 321
27969: PUSH
27970: LD_INT 2
27972: EQUAL
27973: AND
27974: IFFALSE 27991
// bpoints := bpoints * 1.5 ;
27976: LD_ADDR_VAR 0 10
27980: PUSH
27981: LD_VAR 0 10
27985: PUSH
27986: LD_REAL  1.50000000000000E+0000
27989: MUL
27990: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27991: LD_VAR 0 1
27995: PPUSH
27996: LD_INT 66
27998: PPUSH
27999: CALL_OW 321
28003: PUSH
28004: LD_INT 2
28006: EQUAL
28007: IFFALSE 28024
// bpoints := bpoints * 1.1 ;
28009: LD_ADDR_VAR 0 10
28013: PUSH
28014: LD_VAR 0 10
28018: PUSH
28019: LD_REAL  1.10000000000000E+0000
28022: MUL
28023: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28024: LD_ADDR_VAR 0 10
28028: PUSH
28029: LD_VAR 0 10
28033: PUSH
28034: LD_VAR 0 6
28038: PPUSH
28039: LD_INT 1
28041: PPUSH
28042: CALL_OW 259
28046: PUSH
28047: LD_REAL  1.15000000000000E+0000
28050: MUL
28051: MUL
28052: ST_TO_ADDR
// end ; unit_vehicle :
28053: GO 28881
28055: LD_INT 2
28057: DOUBLE
28058: EQUAL
28059: IFTRUE 28063
28061: GO 28869
28063: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28064: LD_VAR 0 6
28068: PPUSH
28069: CALL_OW 264
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: LD_INT 42
28079: PUSH
28080: LD_INT 24
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: IN
28088: IFFALSE 28109
// points := [ 25 , 5 , 3 ] ;
28090: LD_ADDR_VAR 0 9
28094: PUSH
28095: LD_INT 25
28097: PUSH
28098: LD_INT 5
28100: PUSH
28101: LD_INT 3
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28109: LD_VAR 0 6
28113: PPUSH
28114: CALL_OW 264
28118: PUSH
28119: LD_INT 4
28121: PUSH
28122: LD_INT 43
28124: PUSH
28125: LD_INT 25
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: LIST
28132: IN
28133: IFFALSE 28154
// points := [ 40 , 15 , 5 ] ;
28135: LD_ADDR_VAR 0 9
28139: PUSH
28140: LD_INT 40
28142: PUSH
28143: LD_INT 15
28145: PUSH
28146: LD_INT 5
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28154: LD_VAR 0 6
28158: PPUSH
28159: CALL_OW 264
28163: PUSH
28164: LD_INT 3
28166: PUSH
28167: LD_INT 23
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: IN
28174: IFFALSE 28195
// points := [ 7 , 25 , 8 ] ;
28176: LD_ADDR_VAR 0 9
28180: PUSH
28181: LD_INT 7
28183: PUSH
28184: LD_INT 25
28186: PUSH
28187: LD_INT 8
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: LIST
28194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28195: LD_VAR 0 6
28199: PPUSH
28200: CALL_OW 264
28204: PUSH
28205: LD_INT 5
28207: PUSH
28208: LD_INT 27
28210: PUSH
28211: LD_INT 44
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: LIST
28218: IN
28219: IFFALSE 28240
// points := [ 14 , 50 , 16 ] ;
28221: LD_ADDR_VAR 0 9
28225: PUSH
28226: LD_INT 14
28228: PUSH
28229: LD_INT 50
28231: PUSH
28232: LD_INT 16
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28240: LD_VAR 0 6
28244: PPUSH
28245: CALL_OW 264
28249: PUSH
28250: LD_INT 6
28252: PUSH
28253: LD_INT 46
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: IN
28260: IFFALSE 28281
// points := [ 32 , 120 , 70 ] ;
28262: LD_ADDR_VAR 0 9
28266: PUSH
28267: LD_INT 32
28269: PUSH
28270: LD_INT 120
28272: PUSH
28273: LD_INT 70
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28281: LD_VAR 0 6
28285: PPUSH
28286: CALL_OW 264
28290: PUSH
28291: LD_INT 7
28293: PUSH
28294: LD_INT 28
28296: PUSH
28297: LD_INT 45
28299: PUSH
28300: LD_INT 92
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: IN
28309: IFFALSE 28330
// points := [ 35 , 20 , 45 ] ;
28311: LD_ADDR_VAR 0 9
28315: PUSH
28316: LD_INT 35
28318: PUSH
28319: LD_INT 20
28321: PUSH
28322: LD_INT 45
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: LIST
28329: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28330: LD_VAR 0 6
28334: PPUSH
28335: CALL_OW 264
28339: PUSH
28340: LD_INT 47
28342: PUSH
28343: EMPTY
28344: LIST
28345: IN
28346: IFFALSE 28367
// points := [ 67 , 45 , 75 ] ;
28348: LD_ADDR_VAR 0 9
28352: PUSH
28353: LD_INT 67
28355: PUSH
28356: LD_INT 45
28358: PUSH
28359: LD_INT 75
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28367: LD_VAR 0 6
28371: PPUSH
28372: CALL_OW 264
28376: PUSH
28377: LD_INT 26
28379: PUSH
28380: EMPTY
28381: LIST
28382: IN
28383: IFFALSE 28404
// points := [ 120 , 30 , 80 ] ;
28385: LD_ADDR_VAR 0 9
28389: PUSH
28390: LD_INT 120
28392: PUSH
28393: LD_INT 30
28395: PUSH
28396: LD_INT 80
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28404: LD_VAR 0 6
28408: PPUSH
28409: CALL_OW 264
28413: PUSH
28414: LD_INT 22
28416: PUSH
28417: EMPTY
28418: LIST
28419: IN
28420: IFFALSE 28441
// points := [ 40 , 1 , 1 ] ;
28422: LD_ADDR_VAR 0 9
28426: PUSH
28427: LD_INT 40
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28441: LD_VAR 0 6
28445: PPUSH
28446: CALL_OW 264
28450: PUSH
28451: LD_INT 29
28453: PUSH
28454: EMPTY
28455: LIST
28456: IN
28457: IFFALSE 28478
// points := [ 70 , 200 , 400 ] ;
28459: LD_ADDR_VAR 0 9
28463: PUSH
28464: LD_INT 70
28466: PUSH
28467: LD_INT 200
28469: PUSH
28470: LD_INT 400
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28478: LD_VAR 0 6
28482: PPUSH
28483: CALL_OW 264
28487: PUSH
28488: LD_INT 14
28490: PUSH
28491: LD_INT 53
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: IN
28498: IFFALSE 28519
// points := [ 40 , 10 , 20 ] ;
28500: LD_ADDR_VAR 0 9
28504: PUSH
28505: LD_INT 40
28507: PUSH
28508: LD_INT 10
28510: PUSH
28511: LD_INT 20
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28519: LD_VAR 0 6
28523: PPUSH
28524: CALL_OW 264
28528: PUSH
28529: LD_INT 9
28531: PUSH
28532: EMPTY
28533: LIST
28534: IN
28535: IFFALSE 28556
// points := [ 5 , 70 , 20 ] ;
28537: LD_ADDR_VAR 0 9
28541: PUSH
28542: LD_INT 5
28544: PUSH
28545: LD_INT 70
28547: PUSH
28548: LD_INT 20
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28556: LD_VAR 0 6
28560: PPUSH
28561: CALL_OW 264
28565: PUSH
28566: LD_INT 10
28568: PUSH
28569: EMPTY
28570: LIST
28571: IN
28572: IFFALSE 28593
// points := [ 35 , 110 , 70 ] ;
28574: LD_ADDR_VAR 0 9
28578: PUSH
28579: LD_INT 35
28581: PUSH
28582: LD_INT 110
28584: PUSH
28585: LD_INT 70
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: LIST
28592: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28593: LD_VAR 0 6
28597: PPUSH
28598: CALL_OW 265
28602: PUSH
28603: LD_INT 25
28605: EQUAL
28606: IFFALSE 28627
// points := [ 80 , 65 , 100 ] ;
28608: LD_ADDR_VAR 0 9
28612: PUSH
28613: LD_INT 80
28615: PUSH
28616: LD_INT 65
28618: PUSH
28619: LD_INT 100
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28627: LD_VAR 0 6
28631: PPUSH
28632: CALL_OW 263
28636: PUSH
28637: LD_INT 1
28639: EQUAL
28640: IFFALSE 28675
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28642: LD_ADDR_VAR 0 10
28646: PUSH
28647: LD_VAR 0 10
28651: PUSH
28652: LD_VAR 0 6
28656: PPUSH
28657: CALL_OW 311
28661: PPUSH
28662: LD_INT 3
28664: PPUSH
28665: CALL_OW 259
28669: PUSH
28670: LD_INT 4
28672: MUL
28673: MUL
28674: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28675: LD_VAR 0 6
28679: PPUSH
28680: CALL_OW 263
28684: PUSH
28685: LD_INT 2
28687: EQUAL
28688: IFFALSE 28739
// begin j := IsControledBy ( i ) ;
28690: LD_ADDR_VAR 0 7
28694: PUSH
28695: LD_VAR 0 6
28699: PPUSH
28700: CALL_OW 312
28704: ST_TO_ADDR
// if j then
28705: LD_VAR 0 7
28709: IFFALSE 28739
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28711: LD_ADDR_VAR 0 10
28715: PUSH
28716: LD_VAR 0 10
28720: PUSH
28721: LD_VAR 0 7
28725: PPUSH
28726: LD_INT 3
28728: PPUSH
28729: CALL_OW 259
28733: PUSH
28734: LD_INT 3
28736: MUL
28737: MUL
28738: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28739: LD_VAR 0 6
28743: PPUSH
28744: CALL_OW 264
28748: PUSH
28749: LD_INT 5
28751: PUSH
28752: LD_INT 6
28754: PUSH
28755: LD_INT 46
28757: PUSH
28758: LD_INT 44
28760: PUSH
28761: LD_INT 47
28763: PUSH
28764: LD_INT 45
28766: PUSH
28767: LD_INT 28
28769: PUSH
28770: LD_INT 7
28772: PUSH
28773: LD_INT 27
28775: PUSH
28776: LD_INT 29
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: IN
28791: PUSH
28792: LD_VAR 0 1
28796: PPUSH
28797: LD_INT 52
28799: PPUSH
28800: CALL_OW 321
28804: PUSH
28805: LD_INT 2
28807: EQUAL
28808: AND
28809: IFFALSE 28826
// bpoints := bpoints * 1.2 ;
28811: LD_ADDR_VAR 0 10
28815: PUSH
28816: LD_VAR 0 10
28820: PUSH
28821: LD_REAL  1.20000000000000E+0000
28824: MUL
28825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28826: LD_VAR 0 6
28830: PPUSH
28831: CALL_OW 264
28835: PUSH
28836: LD_INT 6
28838: PUSH
28839: LD_INT 46
28841: PUSH
28842: LD_INT 47
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: IN
28850: IFFALSE 28867
// bpoints := bpoints * 1.2 ;
28852: LD_ADDR_VAR 0 10
28856: PUSH
28857: LD_VAR 0 10
28861: PUSH
28862: LD_REAL  1.20000000000000E+0000
28865: MUL
28866: ST_TO_ADDR
// end ; unit_building :
28867: GO 28881
28869: LD_INT 3
28871: DOUBLE
28872: EQUAL
28873: IFTRUE 28877
28875: GO 28880
28877: POP
// ; end ;
28878: GO 28881
28880: POP
// for j = 1 to 3 do
28881: LD_ADDR_VAR 0 7
28885: PUSH
28886: DOUBLE
28887: LD_INT 1
28889: DEC
28890: ST_TO_ADDR
28891: LD_INT 3
28893: PUSH
28894: FOR_TO
28895: IFFALSE 28948
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28897: LD_ADDR_VAR 0 5
28901: PUSH
28902: LD_VAR 0 5
28906: PPUSH
28907: LD_VAR 0 7
28911: PPUSH
28912: LD_VAR 0 5
28916: PUSH
28917: LD_VAR 0 7
28921: ARRAY
28922: PUSH
28923: LD_VAR 0 9
28927: PUSH
28928: LD_VAR 0 7
28932: ARRAY
28933: PUSH
28934: LD_VAR 0 10
28938: MUL
28939: PLUS
28940: PPUSH
28941: CALL_OW 1
28945: ST_TO_ADDR
28946: GO 28894
28948: POP
28949: POP
// end ;
28950: GO 27429
28952: POP
28953: POP
// result := Replace ( result , 4 , tmp ) ;
28954: LD_ADDR_VAR 0 5
28958: PUSH
28959: LD_VAR 0 5
28963: PPUSH
28964: LD_INT 4
28966: PPUSH
28967: LD_VAR 0 8
28971: PPUSH
28972: CALL_OW 1
28976: ST_TO_ADDR
// end ;
28977: LD_VAR 0 5
28981: RET
// export function DangerAtRange ( unit , range ) ; begin
28982: LD_INT 0
28984: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28985: LD_ADDR_VAR 0 3
28989: PUSH
28990: LD_VAR 0 1
28994: PPUSH
28995: CALL_OW 255
28999: PPUSH
29000: LD_VAR 0 1
29004: PPUSH
29005: CALL_OW 250
29009: PPUSH
29010: LD_VAR 0 1
29014: PPUSH
29015: CALL_OW 251
29019: PPUSH
29020: LD_VAR 0 2
29024: PPUSH
29025: CALL 27281 0 4
29029: ST_TO_ADDR
// end ;
29030: LD_VAR 0 3
29034: RET
// export function DangerInArea ( side , area ) ; begin
29035: LD_INT 0
29037: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29038: LD_ADDR_VAR 0 3
29042: PUSH
29043: LD_VAR 0 2
29047: PPUSH
29048: LD_INT 81
29050: PUSH
29051: LD_VAR 0 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PPUSH
29060: CALL_OW 70
29064: ST_TO_ADDR
// end ;
29065: LD_VAR 0 3
29069: RET
// export function IsExtension ( b ) ; begin
29070: LD_INT 0
29072: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29073: LD_ADDR_VAR 0 2
29077: PUSH
29078: LD_VAR 0 1
29082: PUSH
29083: LD_INT 23
29085: PUSH
29086: LD_INT 20
29088: PUSH
29089: LD_INT 22
29091: PUSH
29092: LD_INT 17
29094: PUSH
29095: LD_INT 24
29097: PUSH
29098: LD_INT 21
29100: PUSH
29101: LD_INT 19
29103: PUSH
29104: LD_INT 16
29106: PUSH
29107: LD_INT 25
29109: PUSH
29110: LD_INT 18
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: IN
29125: ST_TO_ADDR
// end ;
29126: LD_VAR 0 2
29130: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29131: LD_INT 0
29133: PPUSH
29134: PPUSH
29135: PPUSH
// result := [ ] ;
29136: LD_ADDR_VAR 0 4
29140: PUSH
29141: EMPTY
29142: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29143: LD_ADDR_VAR 0 5
29147: PUSH
29148: LD_VAR 0 2
29152: PPUSH
29153: LD_INT 21
29155: PUSH
29156: LD_INT 3
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PPUSH
29163: CALL_OW 70
29167: ST_TO_ADDR
// if not tmp then
29168: LD_VAR 0 5
29172: NOT
29173: IFFALSE 29177
// exit ;
29175: GO 29241
// if checkLink then
29177: LD_VAR 0 3
29181: IFFALSE 29231
// begin for i in tmp do
29183: LD_ADDR_VAR 0 6
29187: PUSH
29188: LD_VAR 0 5
29192: PUSH
29193: FOR_IN
29194: IFFALSE 29229
// if GetBase ( i ) <> base then
29196: LD_VAR 0 6
29200: PPUSH
29201: CALL_OW 274
29205: PUSH
29206: LD_VAR 0 1
29210: NONEQUAL
29211: IFFALSE 29227
// ComLinkToBase ( base , i ) ;
29213: LD_VAR 0 1
29217: PPUSH
29218: LD_VAR 0 6
29222: PPUSH
29223: CALL_OW 169
29227: GO 29193
29229: POP
29230: POP
// end ; result := tmp ;
29231: LD_ADDR_VAR 0 4
29235: PUSH
29236: LD_VAR 0 5
29240: ST_TO_ADDR
// end ;
29241: LD_VAR 0 4
29245: RET
// export function ComComplete ( units , b ) ; var i ; begin
29246: LD_INT 0
29248: PPUSH
29249: PPUSH
// if not units then
29250: LD_VAR 0 1
29254: NOT
29255: IFFALSE 29259
// exit ;
29257: GO 29349
// for i in units do
29259: LD_ADDR_VAR 0 4
29263: PUSH
29264: LD_VAR 0 1
29268: PUSH
29269: FOR_IN
29270: IFFALSE 29347
// if BuildingStatus ( b ) = bs_build then
29272: LD_VAR 0 2
29276: PPUSH
29277: CALL_OW 461
29281: PUSH
29282: LD_INT 1
29284: EQUAL
29285: IFFALSE 29345
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29287: LD_VAR 0 4
29291: PPUSH
29292: LD_STRING h
29294: PUSH
29295: LD_VAR 0 2
29299: PPUSH
29300: CALL_OW 250
29304: PUSH
29305: LD_VAR 0 2
29309: PPUSH
29310: CALL_OW 251
29314: PUSH
29315: LD_VAR 0 2
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: PPUSH
29341: CALL_OW 446
29345: GO 29269
29347: POP
29348: POP
// end ;
29349: LD_VAR 0 3
29353: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29354: LD_INT 0
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29362: LD_VAR 0 1
29366: NOT
29367: PUSH
29368: LD_VAR 0 1
29372: PPUSH
29373: CALL_OW 263
29377: PUSH
29378: LD_INT 2
29380: NONEQUAL
29381: OR
29382: IFFALSE 29386
// exit ;
29384: GO 29702
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29386: LD_ADDR_VAR 0 6
29390: PUSH
29391: LD_INT 22
29393: PUSH
29394: LD_VAR 0 1
29398: PPUSH
29399: CALL_OW 255
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 2
29410: PUSH
29411: LD_INT 30
29413: PUSH
29414: LD_INT 36
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 34
29423: PUSH
29424: LD_INT 31
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PPUSH
29440: CALL_OW 69
29444: ST_TO_ADDR
// if not tmp then
29445: LD_VAR 0 6
29449: NOT
29450: IFFALSE 29454
// exit ;
29452: GO 29702
// result := [ ] ;
29454: LD_ADDR_VAR 0 2
29458: PUSH
29459: EMPTY
29460: ST_TO_ADDR
// for i in tmp do
29461: LD_ADDR_VAR 0 3
29465: PUSH
29466: LD_VAR 0 6
29470: PUSH
29471: FOR_IN
29472: IFFALSE 29543
// begin t := UnitsInside ( i ) ;
29474: LD_ADDR_VAR 0 4
29478: PUSH
29479: LD_VAR 0 3
29483: PPUSH
29484: CALL_OW 313
29488: ST_TO_ADDR
// if t then
29489: LD_VAR 0 4
29493: IFFALSE 29541
// for j in t do
29495: LD_ADDR_VAR 0 7
29499: PUSH
29500: LD_VAR 0 4
29504: PUSH
29505: FOR_IN
29506: IFFALSE 29539
// result := Replace ( result , result + 1 , j ) ;
29508: LD_ADDR_VAR 0 2
29512: PUSH
29513: LD_VAR 0 2
29517: PPUSH
29518: LD_VAR 0 2
29522: PUSH
29523: LD_INT 1
29525: PLUS
29526: PPUSH
29527: LD_VAR 0 7
29531: PPUSH
29532: CALL_OW 1
29536: ST_TO_ADDR
29537: GO 29505
29539: POP
29540: POP
// end ;
29541: GO 29471
29543: POP
29544: POP
// if not result then
29545: LD_VAR 0 2
29549: NOT
29550: IFFALSE 29554
// exit ;
29552: GO 29702
// mech := result [ 1 ] ;
29554: LD_ADDR_VAR 0 5
29558: PUSH
29559: LD_VAR 0 2
29563: PUSH
29564: LD_INT 1
29566: ARRAY
29567: ST_TO_ADDR
// if result > 1 then
29568: LD_VAR 0 2
29572: PUSH
29573: LD_INT 1
29575: GREATER
29576: IFFALSE 29688
// begin for i = 2 to result do
29578: LD_ADDR_VAR 0 3
29582: PUSH
29583: DOUBLE
29584: LD_INT 2
29586: DEC
29587: ST_TO_ADDR
29588: LD_VAR 0 2
29592: PUSH
29593: FOR_TO
29594: IFFALSE 29686
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29596: LD_ADDR_VAR 0 4
29600: PUSH
29601: LD_VAR 0 2
29605: PUSH
29606: LD_VAR 0 3
29610: ARRAY
29611: PPUSH
29612: LD_INT 3
29614: PPUSH
29615: CALL_OW 259
29619: PUSH
29620: LD_VAR 0 2
29624: PUSH
29625: LD_VAR 0 3
29629: ARRAY
29630: PPUSH
29631: CALL_OW 432
29635: MINUS
29636: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29637: LD_VAR 0 4
29641: PUSH
29642: LD_VAR 0 5
29646: PPUSH
29647: LD_INT 3
29649: PPUSH
29650: CALL_OW 259
29654: PUSH
29655: LD_VAR 0 5
29659: PPUSH
29660: CALL_OW 432
29664: MINUS
29665: GREATEREQUAL
29666: IFFALSE 29684
// mech := result [ i ] ;
29668: LD_ADDR_VAR 0 5
29672: PUSH
29673: LD_VAR 0 2
29677: PUSH
29678: LD_VAR 0 3
29682: ARRAY
29683: ST_TO_ADDR
// end ;
29684: GO 29593
29686: POP
29687: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29688: LD_VAR 0 1
29692: PPUSH
29693: LD_VAR 0 5
29697: PPUSH
29698: CALL_OW 135
// end ;
29702: LD_VAR 0 2
29706: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
29711: PPUSH
29712: PPUSH
29713: PPUSH
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
29721: PPUSH
// result := [ ] ;
29722: LD_ADDR_VAR 0 7
29726: PUSH
29727: EMPTY
29728: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29729: LD_VAR 0 1
29733: PPUSH
29734: CALL_OW 266
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: LD_INT 1
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: IN
29749: NOT
29750: IFFALSE 29754
// exit ;
29752: GO 31388
// if name then
29754: LD_VAR 0 3
29758: IFFALSE 29774
// SetBName ( base_dep , name ) ;
29760: LD_VAR 0 1
29764: PPUSH
29765: LD_VAR 0 3
29769: PPUSH
29770: CALL_OW 500
// base := GetBase ( base_dep ) ;
29774: LD_ADDR_VAR 0 15
29778: PUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 274
29788: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29789: LD_ADDR_VAR 0 16
29793: PUSH
29794: LD_VAR 0 1
29798: PPUSH
29799: CALL_OW 255
29803: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29804: LD_ADDR_VAR 0 17
29808: PUSH
29809: LD_VAR 0 1
29813: PPUSH
29814: CALL_OW 248
29818: ST_TO_ADDR
// if sources then
29819: LD_VAR 0 5
29823: IFFALSE 29870
// for i = 1 to 3 do
29825: LD_ADDR_VAR 0 8
29829: PUSH
29830: DOUBLE
29831: LD_INT 1
29833: DEC
29834: ST_TO_ADDR
29835: LD_INT 3
29837: PUSH
29838: FOR_TO
29839: IFFALSE 29868
// AddResourceType ( base , i , sources [ i ] ) ;
29841: LD_VAR 0 15
29845: PPUSH
29846: LD_VAR 0 8
29850: PPUSH
29851: LD_VAR 0 5
29855: PUSH
29856: LD_VAR 0 8
29860: ARRAY
29861: PPUSH
29862: CALL_OW 276
29866: GO 29838
29868: POP
29869: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29870: LD_ADDR_VAR 0 18
29874: PUSH
29875: LD_VAR 0 15
29879: PPUSH
29880: LD_VAR 0 2
29884: PPUSH
29885: LD_INT 1
29887: PPUSH
29888: CALL 29131 0 3
29892: ST_TO_ADDR
// InitHc ;
29893: CALL_OW 19
// InitUc ;
29897: CALL_OW 18
// uc_side := side ;
29901: LD_ADDR_OWVAR 20
29905: PUSH
29906: LD_VAR 0 16
29910: ST_TO_ADDR
// uc_nation := nation ;
29911: LD_ADDR_OWVAR 21
29915: PUSH
29916: LD_VAR 0 17
29920: ST_TO_ADDR
// if buildings then
29921: LD_VAR 0 18
29925: IFFALSE 31247
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29927: LD_ADDR_VAR 0 19
29931: PUSH
29932: LD_VAR 0 18
29936: PPUSH
29937: LD_INT 2
29939: PUSH
29940: LD_INT 30
29942: PUSH
29943: LD_INT 29
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 30
29952: PUSH
29953: LD_INT 30
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: LIST
29964: PPUSH
29965: CALL_OW 72
29969: ST_TO_ADDR
// if tmp then
29970: LD_VAR 0 19
29974: IFFALSE 30022
// for i in tmp do
29976: LD_ADDR_VAR 0 8
29980: PUSH
29981: LD_VAR 0 19
29985: PUSH
29986: FOR_IN
29987: IFFALSE 30020
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29989: LD_VAR 0 8
29993: PPUSH
29994: CALL_OW 250
29998: PPUSH
29999: LD_VAR 0 8
30003: PPUSH
30004: CALL_OW 251
30008: PPUSH
30009: LD_VAR 0 16
30013: PPUSH
30014: CALL_OW 441
30018: GO 29986
30020: POP
30021: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30022: LD_VAR 0 18
30026: PPUSH
30027: LD_INT 2
30029: PUSH
30030: LD_INT 30
30032: PUSH
30033: LD_INT 32
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 30
30042: PUSH
30043: LD_INT 33
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: LIST
30054: PPUSH
30055: CALL_OW 72
30059: IFFALSE 30147
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30061: LD_ADDR_VAR 0 8
30065: PUSH
30066: LD_VAR 0 18
30070: PPUSH
30071: LD_INT 2
30073: PUSH
30074: LD_INT 30
30076: PUSH
30077: LD_INT 32
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 30
30086: PUSH
30087: LD_INT 33
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 72
30103: PUSH
30104: FOR_IN
30105: IFFALSE 30145
// begin if not GetBWeapon ( i ) then
30107: LD_VAR 0 8
30111: PPUSH
30112: CALL_OW 269
30116: NOT
30117: IFFALSE 30143
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30119: LD_VAR 0 8
30123: PPUSH
30124: LD_VAR 0 8
30128: PPUSH
30129: LD_VAR 0 2
30133: PPUSH
30134: CALL 31393 0 2
30138: PPUSH
30139: CALL_OW 431
// end ;
30143: GO 30104
30145: POP
30146: POP
// end ; for i = 1 to personel do
30147: LD_ADDR_VAR 0 8
30151: PUSH
30152: DOUBLE
30153: LD_INT 1
30155: DEC
30156: ST_TO_ADDR
30157: LD_VAR 0 6
30161: PUSH
30162: FOR_TO
30163: IFFALSE 31227
// begin if i > 4 then
30165: LD_VAR 0 8
30169: PUSH
30170: LD_INT 4
30172: GREATER
30173: IFFALSE 30177
// break ;
30175: GO 31227
// case i of 1 :
30177: LD_VAR 0 8
30181: PUSH
30182: LD_INT 1
30184: DOUBLE
30185: EQUAL
30186: IFTRUE 30190
30188: GO 30270
30190: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30191: LD_ADDR_VAR 0 12
30195: PUSH
30196: LD_VAR 0 18
30200: PPUSH
30201: LD_INT 22
30203: PUSH
30204: LD_VAR 0 16
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 58
30215: PUSH
30216: EMPTY
30217: LIST
30218: PUSH
30219: LD_INT 2
30221: PUSH
30222: LD_INT 30
30224: PUSH
30225: LD_INT 32
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 30
30234: PUSH
30235: LD_INT 4
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 30
30244: PUSH
30245: LD_INT 5
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: PPUSH
30263: CALL_OW 72
30267: ST_TO_ADDR
30268: GO 30492
30270: LD_INT 2
30272: DOUBLE
30273: EQUAL
30274: IFTRUE 30278
30276: GO 30340
30278: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30279: LD_ADDR_VAR 0 12
30283: PUSH
30284: LD_VAR 0 18
30288: PPUSH
30289: LD_INT 22
30291: PUSH
30292: LD_VAR 0 16
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 2
30303: PUSH
30304: LD_INT 30
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 30
30316: PUSH
30317: LD_INT 1
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PPUSH
30333: CALL_OW 72
30337: ST_TO_ADDR
30338: GO 30492
30340: LD_INT 3
30342: DOUBLE
30343: EQUAL
30344: IFTRUE 30348
30346: GO 30410
30348: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30349: LD_ADDR_VAR 0 12
30353: PUSH
30354: LD_VAR 0 18
30358: PPUSH
30359: LD_INT 22
30361: PUSH
30362: LD_VAR 0 16
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 2
30373: PUSH
30374: LD_INT 30
30376: PUSH
30377: LD_INT 2
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 30
30386: PUSH
30387: LD_INT 3
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PPUSH
30403: CALL_OW 72
30407: ST_TO_ADDR
30408: GO 30492
30410: LD_INT 4
30412: DOUBLE
30413: EQUAL
30414: IFTRUE 30418
30416: GO 30491
30418: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30419: LD_ADDR_VAR 0 12
30423: PUSH
30424: LD_VAR 0 18
30428: PPUSH
30429: LD_INT 22
30431: PUSH
30432: LD_VAR 0 16
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 30
30446: PUSH
30447: LD_INT 6
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 30
30456: PUSH
30457: LD_INT 7
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 30
30466: PUSH
30467: LD_INT 8
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PPUSH
30484: CALL_OW 72
30488: ST_TO_ADDR
30489: GO 30492
30491: POP
// if i = 1 then
30492: LD_VAR 0 8
30496: PUSH
30497: LD_INT 1
30499: EQUAL
30500: IFFALSE 30611
// begin tmp := [ ] ;
30502: LD_ADDR_VAR 0 19
30506: PUSH
30507: EMPTY
30508: ST_TO_ADDR
// for j in f do
30509: LD_ADDR_VAR 0 9
30513: PUSH
30514: LD_VAR 0 12
30518: PUSH
30519: FOR_IN
30520: IFFALSE 30593
// if GetBType ( j ) = b_bunker then
30522: LD_VAR 0 9
30526: PPUSH
30527: CALL_OW 266
30531: PUSH
30532: LD_INT 32
30534: EQUAL
30535: IFFALSE 30562
// tmp := Insert ( tmp , 1 , j ) else
30537: LD_ADDR_VAR 0 19
30541: PUSH
30542: LD_VAR 0 19
30546: PPUSH
30547: LD_INT 1
30549: PPUSH
30550: LD_VAR 0 9
30554: PPUSH
30555: CALL_OW 2
30559: ST_TO_ADDR
30560: GO 30591
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30562: LD_ADDR_VAR 0 19
30566: PUSH
30567: LD_VAR 0 19
30571: PPUSH
30572: LD_VAR 0 19
30576: PUSH
30577: LD_INT 1
30579: PLUS
30580: PPUSH
30581: LD_VAR 0 9
30585: PPUSH
30586: CALL_OW 2
30590: ST_TO_ADDR
30591: GO 30519
30593: POP
30594: POP
// if tmp then
30595: LD_VAR 0 19
30599: IFFALSE 30611
// f := tmp ;
30601: LD_ADDR_VAR 0 12
30605: PUSH
30606: LD_VAR 0 19
30610: ST_TO_ADDR
// end ; x := personel [ i ] ;
30611: LD_ADDR_VAR 0 13
30615: PUSH
30616: LD_VAR 0 6
30620: PUSH
30621: LD_VAR 0 8
30625: ARRAY
30626: ST_TO_ADDR
// if x = - 1 then
30627: LD_VAR 0 13
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: EQUAL
30636: IFFALSE 30845
// begin for j in f do
30638: LD_ADDR_VAR 0 9
30642: PUSH
30643: LD_VAR 0 12
30647: PUSH
30648: FOR_IN
30649: IFFALSE 30841
// repeat InitHc ;
30651: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30655: LD_VAR 0 9
30659: PPUSH
30660: CALL_OW 266
30664: PUSH
30665: LD_INT 5
30667: EQUAL
30668: IFFALSE 30738
// begin if UnitsInside ( j ) < 3 then
30670: LD_VAR 0 9
30674: PPUSH
30675: CALL_OW 313
30679: PUSH
30680: LD_INT 3
30682: LESS
30683: IFFALSE 30719
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30685: LD_INT 0
30687: PPUSH
30688: LD_INT 5
30690: PUSH
30691: LD_INT 8
30693: PUSH
30694: LD_INT 9
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: PUSH
30702: LD_VAR 0 17
30706: ARRAY
30707: PPUSH
30708: LD_VAR 0 4
30712: PPUSH
30713: CALL_OW 380
30717: GO 30736
// PrepareHuman ( false , i , skill ) ;
30719: LD_INT 0
30721: PPUSH
30722: LD_VAR 0 8
30726: PPUSH
30727: LD_VAR 0 4
30731: PPUSH
30732: CALL_OW 380
// end else
30736: GO 30755
// PrepareHuman ( false , i , skill ) ;
30738: LD_INT 0
30740: PPUSH
30741: LD_VAR 0 8
30745: PPUSH
30746: LD_VAR 0 4
30750: PPUSH
30751: CALL_OW 380
// un := CreateHuman ;
30755: LD_ADDR_VAR 0 14
30759: PUSH
30760: CALL_OW 44
30764: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30765: LD_ADDR_VAR 0 7
30769: PUSH
30770: LD_VAR 0 7
30774: PPUSH
30775: LD_INT 1
30777: PPUSH
30778: LD_VAR 0 14
30782: PPUSH
30783: CALL_OW 2
30787: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30788: LD_VAR 0 14
30792: PPUSH
30793: LD_VAR 0 9
30797: PPUSH
30798: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30802: LD_VAR 0 9
30806: PPUSH
30807: CALL_OW 313
30811: PUSH
30812: LD_INT 6
30814: EQUAL
30815: PUSH
30816: LD_VAR 0 9
30820: PPUSH
30821: CALL_OW 266
30825: PUSH
30826: LD_INT 32
30828: PUSH
30829: LD_INT 31
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: IN
30836: OR
30837: IFFALSE 30651
30839: GO 30648
30841: POP
30842: POP
// end else
30843: GO 31225
// for j = 1 to x do
30845: LD_ADDR_VAR 0 9
30849: PUSH
30850: DOUBLE
30851: LD_INT 1
30853: DEC
30854: ST_TO_ADDR
30855: LD_VAR 0 13
30859: PUSH
30860: FOR_TO
30861: IFFALSE 31223
// begin InitHc ;
30863: CALL_OW 19
// if not f then
30867: LD_VAR 0 12
30871: NOT
30872: IFFALSE 30961
// begin PrepareHuman ( false , i , skill ) ;
30874: LD_INT 0
30876: PPUSH
30877: LD_VAR 0 8
30881: PPUSH
30882: LD_VAR 0 4
30886: PPUSH
30887: CALL_OW 380
// un := CreateHuman ;
30891: LD_ADDR_VAR 0 14
30895: PUSH
30896: CALL_OW 44
30900: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30901: LD_ADDR_VAR 0 7
30905: PUSH
30906: LD_VAR 0 7
30910: PPUSH
30911: LD_INT 1
30913: PPUSH
30914: LD_VAR 0 14
30918: PPUSH
30919: CALL_OW 2
30923: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30924: LD_VAR 0 14
30928: PPUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 250
30938: PPUSH
30939: LD_VAR 0 1
30943: PPUSH
30944: CALL_OW 251
30948: PPUSH
30949: LD_INT 10
30951: PPUSH
30952: LD_INT 0
30954: PPUSH
30955: CALL_OW 50
// continue ;
30959: GO 30860
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30961: LD_VAR 0 12
30965: PUSH
30966: LD_INT 1
30968: ARRAY
30969: PPUSH
30970: CALL_OW 313
30974: PUSH
30975: LD_VAR 0 12
30979: PUSH
30980: LD_INT 1
30982: ARRAY
30983: PPUSH
30984: CALL_OW 266
30988: PUSH
30989: LD_INT 32
30991: PUSH
30992: LD_INT 31
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: IN
30999: AND
31000: PUSH
31001: LD_VAR 0 12
31005: PUSH
31006: LD_INT 1
31008: ARRAY
31009: PPUSH
31010: CALL_OW 313
31014: PUSH
31015: LD_INT 6
31017: EQUAL
31018: OR
31019: IFFALSE 31039
// f := Delete ( f , 1 ) ;
31021: LD_ADDR_VAR 0 12
31025: PUSH
31026: LD_VAR 0 12
31030: PPUSH
31031: LD_INT 1
31033: PPUSH
31034: CALL_OW 3
31038: ST_TO_ADDR
// if not f then
31039: LD_VAR 0 12
31043: NOT
31044: IFFALSE 31062
// begin x := x + 2 ;
31046: LD_ADDR_VAR 0 13
31050: PUSH
31051: LD_VAR 0 13
31055: PUSH
31056: LD_INT 2
31058: PLUS
31059: ST_TO_ADDR
// continue ;
31060: GO 30860
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31062: LD_VAR 0 12
31066: PUSH
31067: LD_INT 1
31069: ARRAY
31070: PPUSH
31071: CALL_OW 266
31075: PUSH
31076: LD_INT 5
31078: EQUAL
31079: IFFALSE 31153
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31081: LD_VAR 0 12
31085: PUSH
31086: LD_INT 1
31088: ARRAY
31089: PPUSH
31090: CALL_OW 313
31094: PUSH
31095: LD_INT 3
31097: LESS
31098: IFFALSE 31134
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31100: LD_INT 0
31102: PPUSH
31103: LD_INT 5
31105: PUSH
31106: LD_INT 8
31108: PUSH
31109: LD_INT 9
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: PUSH
31117: LD_VAR 0 17
31121: ARRAY
31122: PPUSH
31123: LD_VAR 0 4
31127: PPUSH
31128: CALL_OW 380
31132: GO 31151
// PrepareHuman ( false , i , skill ) ;
31134: LD_INT 0
31136: PPUSH
31137: LD_VAR 0 8
31141: PPUSH
31142: LD_VAR 0 4
31146: PPUSH
31147: CALL_OW 380
// end else
31151: GO 31170
// PrepareHuman ( false , i , skill ) ;
31153: LD_INT 0
31155: PPUSH
31156: LD_VAR 0 8
31160: PPUSH
31161: LD_VAR 0 4
31165: PPUSH
31166: CALL_OW 380
// un := CreateHuman ;
31170: LD_ADDR_VAR 0 14
31174: PUSH
31175: CALL_OW 44
31179: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31180: LD_ADDR_VAR 0 7
31184: PUSH
31185: LD_VAR 0 7
31189: PPUSH
31190: LD_INT 1
31192: PPUSH
31193: LD_VAR 0 14
31197: PPUSH
31198: CALL_OW 2
31202: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31203: LD_VAR 0 14
31207: PPUSH
31208: LD_VAR 0 12
31212: PUSH
31213: LD_INT 1
31215: ARRAY
31216: PPUSH
31217: CALL_OW 52
// end ;
31221: GO 30860
31223: POP
31224: POP
// end ;
31225: GO 30162
31227: POP
31228: POP
// result := result ^ buildings ;
31229: LD_ADDR_VAR 0 7
31233: PUSH
31234: LD_VAR 0 7
31238: PUSH
31239: LD_VAR 0 18
31243: ADD
31244: ST_TO_ADDR
// end else
31245: GO 31388
// begin for i = 1 to personel do
31247: LD_ADDR_VAR 0 8
31251: PUSH
31252: DOUBLE
31253: LD_INT 1
31255: DEC
31256: ST_TO_ADDR
31257: LD_VAR 0 6
31261: PUSH
31262: FOR_TO
31263: IFFALSE 31386
// begin if i > 4 then
31265: LD_VAR 0 8
31269: PUSH
31270: LD_INT 4
31272: GREATER
31273: IFFALSE 31277
// break ;
31275: GO 31386
// x := personel [ i ] ;
31277: LD_ADDR_VAR 0 13
31281: PUSH
31282: LD_VAR 0 6
31286: PUSH
31287: LD_VAR 0 8
31291: ARRAY
31292: ST_TO_ADDR
// if x = - 1 then
31293: LD_VAR 0 13
31297: PUSH
31298: LD_INT 1
31300: NEG
31301: EQUAL
31302: IFFALSE 31306
// continue ;
31304: GO 31262
// PrepareHuman ( false , i , skill ) ;
31306: LD_INT 0
31308: PPUSH
31309: LD_VAR 0 8
31313: PPUSH
31314: LD_VAR 0 4
31318: PPUSH
31319: CALL_OW 380
// un := CreateHuman ;
31323: LD_ADDR_VAR 0 14
31327: PUSH
31328: CALL_OW 44
31332: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31333: LD_VAR 0 14
31337: PPUSH
31338: LD_VAR 0 1
31342: PPUSH
31343: CALL_OW 250
31347: PPUSH
31348: LD_VAR 0 1
31352: PPUSH
31353: CALL_OW 251
31357: PPUSH
31358: LD_INT 10
31360: PPUSH
31361: LD_INT 0
31363: PPUSH
31364: CALL_OW 50
// result := result ^ un ;
31368: LD_ADDR_VAR 0 7
31372: PUSH
31373: LD_VAR 0 7
31377: PUSH
31378: LD_VAR 0 14
31382: ADD
31383: ST_TO_ADDR
// end ;
31384: GO 31262
31386: POP
31387: POP
// end ; end ;
31388: LD_VAR 0 7
31392: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31393: LD_INT 0
31395: PPUSH
31396: PPUSH
31397: PPUSH
31398: PPUSH
31399: PPUSH
31400: PPUSH
31401: PPUSH
31402: PPUSH
31403: PPUSH
31404: PPUSH
31405: PPUSH
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
31410: PPUSH
// result := false ;
31411: LD_ADDR_VAR 0 3
31415: PUSH
31416: LD_INT 0
31418: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31419: LD_VAR 0 1
31423: NOT
31424: PUSH
31425: LD_VAR 0 1
31429: PPUSH
31430: CALL_OW 266
31434: PUSH
31435: LD_INT 32
31437: PUSH
31438: LD_INT 33
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: IN
31445: NOT
31446: OR
31447: IFFALSE 31451
// exit ;
31449: GO 32560
// nat := GetNation ( tower ) ;
31451: LD_ADDR_VAR 0 12
31455: PUSH
31456: LD_VAR 0 1
31460: PPUSH
31461: CALL_OW 248
31465: ST_TO_ADDR
// side := GetSide ( tower ) ;
31466: LD_ADDR_VAR 0 16
31470: PUSH
31471: LD_VAR 0 1
31475: PPUSH
31476: CALL_OW 255
31480: ST_TO_ADDR
// x := GetX ( tower ) ;
31481: LD_ADDR_VAR 0 10
31485: PUSH
31486: LD_VAR 0 1
31490: PPUSH
31491: CALL_OW 250
31495: ST_TO_ADDR
// y := GetY ( tower ) ;
31496: LD_ADDR_VAR 0 11
31500: PUSH
31501: LD_VAR 0 1
31505: PPUSH
31506: CALL_OW 251
31510: ST_TO_ADDR
// if not x or not y then
31511: LD_VAR 0 10
31515: NOT
31516: PUSH
31517: LD_VAR 0 11
31521: NOT
31522: OR
31523: IFFALSE 31527
// exit ;
31525: GO 32560
// weapon := 0 ;
31527: LD_ADDR_VAR 0 18
31531: PUSH
31532: LD_INT 0
31534: ST_TO_ADDR
// fac_list := [ ] ;
31535: LD_ADDR_VAR 0 17
31539: PUSH
31540: EMPTY
31541: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31542: LD_ADDR_VAR 0 6
31546: PUSH
31547: LD_VAR 0 1
31551: PPUSH
31552: CALL_OW 274
31556: PPUSH
31557: LD_VAR 0 2
31561: PPUSH
31562: LD_INT 0
31564: PPUSH
31565: CALL 29131 0 3
31569: PPUSH
31570: LD_INT 30
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PPUSH
31580: CALL_OW 72
31584: ST_TO_ADDR
// if not factories then
31585: LD_VAR 0 6
31589: NOT
31590: IFFALSE 31594
// exit ;
31592: GO 32560
// for i in factories do
31594: LD_ADDR_VAR 0 8
31598: PUSH
31599: LD_VAR 0 6
31603: PUSH
31604: FOR_IN
31605: IFFALSE 31630
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31607: LD_ADDR_VAR 0 17
31611: PUSH
31612: LD_VAR 0 17
31616: PUSH
31617: LD_VAR 0 8
31621: PPUSH
31622: CALL_OW 478
31626: UNION
31627: ST_TO_ADDR
31628: GO 31604
31630: POP
31631: POP
// if not fac_list then
31632: LD_VAR 0 17
31636: NOT
31637: IFFALSE 31641
// exit ;
31639: GO 32560
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31641: LD_ADDR_VAR 0 5
31645: PUSH
31646: LD_INT 4
31648: PUSH
31649: LD_INT 5
31651: PUSH
31652: LD_INT 9
31654: PUSH
31655: LD_INT 10
31657: PUSH
31658: LD_INT 6
31660: PUSH
31661: LD_INT 7
31663: PUSH
31664: LD_INT 11
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 27
31678: PUSH
31679: LD_INT 28
31681: PUSH
31682: LD_INT 26
31684: PUSH
31685: LD_INT 30
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 43
31696: PUSH
31697: LD_INT 44
31699: PUSH
31700: LD_INT 46
31702: PUSH
31703: LD_INT 45
31705: PUSH
31706: LD_INT 47
31708: PUSH
31709: LD_INT 49
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: LIST
31724: PUSH
31725: LD_VAR 0 12
31729: ARRAY
31730: ST_TO_ADDR
// list := list isect fac_list ;
31731: LD_ADDR_VAR 0 5
31735: PUSH
31736: LD_VAR 0 5
31740: PUSH
31741: LD_VAR 0 17
31745: ISECT
31746: ST_TO_ADDR
// if not list then
31747: LD_VAR 0 5
31751: NOT
31752: IFFALSE 31756
// exit ;
31754: GO 32560
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31756: LD_VAR 0 12
31760: PUSH
31761: LD_INT 3
31763: EQUAL
31764: PUSH
31765: LD_INT 49
31767: PUSH
31768: LD_VAR 0 5
31772: IN
31773: AND
31774: PUSH
31775: LD_INT 31
31777: PPUSH
31778: LD_VAR 0 16
31782: PPUSH
31783: CALL_OW 321
31787: PUSH
31788: LD_INT 2
31790: EQUAL
31791: AND
31792: IFFALSE 31852
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31794: LD_INT 22
31796: PUSH
31797: LD_VAR 0 16
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 35
31808: PUSH
31809: LD_INT 49
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 91
31818: PUSH
31819: LD_VAR 0 1
31823: PUSH
31824: LD_INT 10
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: LIST
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: PPUSH
31837: CALL_OW 69
31841: NOT
31842: IFFALSE 31852
// weapon := ru_time_lapser ;
31844: LD_ADDR_VAR 0 18
31848: PUSH
31849: LD_INT 49
31851: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31852: LD_VAR 0 12
31856: PUSH
31857: LD_INT 1
31859: PUSH
31860: LD_INT 2
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: IN
31867: PUSH
31868: LD_INT 11
31870: PUSH
31871: LD_VAR 0 5
31875: IN
31876: PUSH
31877: LD_INT 30
31879: PUSH
31880: LD_VAR 0 5
31884: IN
31885: OR
31886: AND
31887: PUSH
31888: LD_INT 6
31890: PPUSH
31891: LD_VAR 0 16
31895: PPUSH
31896: CALL_OW 321
31900: PUSH
31901: LD_INT 2
31903: EQUAL
31904: AND
31905: IFFALSE 32070
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31907: LD_INT 22
31909: PUSH
31910: LD_VAR 0 16
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: LD_INT 35
31924: PUSH
31925: LD_INT 11
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 35
31934: PUSH
31935: LD_INT 30
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 91
31949: PUSH
31950: LD_VAR 0 1
31954: PUSH
31955: LD_INT 18
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: PPUSH
31968: CALL_OW 69
31972: NOT
31973: PUSH
31974: LD_INT 22
31976: PUSH
31977: LD_VAR 0 16
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 30
31991: PUSH
31992: LD_INT 32
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 30
32001: PUSH
32002: LD_INT 33
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 91
32016: PUSH
32017: LD_VAR 0 1
32021: PUSH
32022: LD_INT 12
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: PPUSH
32038: CALL_OW 69
32042: PUSH
32043: LD_INT 2
32045: GREATER
32046: AND
32047: IFFALSE 32070
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32049: LD_ADDR_VAR 0 18
32053: PUSH
32054: LD_INT 11
32056: PUSH
32057: LD_INT 30
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_VAR 0 12
32068: ARRAY
32069: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32070: LD_VAR 0 18
32074: NOT
32075: PUSH
32076: LD_INT 40
32078: PPUSH
32079: LD_VAR 0 16
32083: PPUSH
32084: CALL_OW 321
32088: PUSH
32089: LD_INT 2
32091: EQUAL
32092: AND
32093: PUSH
32094: LD_INT 7
32096: PUSH
32097: LD_VAR 0 5
32101: IN
32102: PUSH
32103: LD_INT 28
32105: PUSH
32106: LD_VAR 0 5
32110: IN
32111: OR
32112: PUSH
32113: LD_INT 45
32115: PUSH
32116: LD_VAR 0 5
32120: IN
32121: OR
32122: AND
32123: IFFALSE 32377
// begin hex := GetHexInfo ( x , y ) ;
32125: LD_ADDR_VAR 0 4
32129: PUSH
32130: LD_VAR 0 10
32134: PPUSH
32135: LD_VAR 0 11
32139: PPUSH
32140: CALL_OW 546
32144: ST_TO_ADDR
// if hex [ 1 ] then
32145: LD_VAR 0 4
32149: PUSH
32150: LD_INT 1
32152: ARRAY
32153: IFFALSE 32157
// exit ;
32155: GO 32560
// height := hex [ 2 ] ;
32157: LD_ADDR_VAR 0 15
32161: PUSH
32162: LD_VAR 0 4
32166: PUSH
32167: LD_INT 2
32169: ARRAY
32170: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32171: LD_ADDR_VAR 0 14
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: LD_INT 2
32181: PUSH
32182: LD_INT 3
32184: PUSH
32185: LD_INT 5
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: ST_TO_ADDR
// for i in tmp do
32194: LD_ADDR_VAR 0 8
32198: PUSH
32199: LD_VAR 0 14
32203: PUSH
32204: FOR_IN
32205: IFFALSE 32375
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32207: LD_ADDR_VAR 0 9
32211: PUSH
32212: LD_VAR 0 10
32216: PPUSH
32217: LD_VAR 0 8
32221: PPUSH
32222: LD_INT 5
32224: PPUSH
32225: CALL_OW 272
32229: PUSH
32230: LD_VAR 0 11
32234: PPUSH
32235: LD_VAR 0 8
32239: PPUSH
32240: LD_INT 5
32242: PPUSH
32243: CALL_OW 273
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32252: LD_VAR 0 9
32256: PUSH
32257: LD_INT 1
32259: ARRAY
32260: PPUSH
32261: LD_VAR 0 9
32265: PUSH
32266: LD_INT 2
32268: ARRAY
32269: PPUSH
32270: CALL_OW 488
32274: IFFALSE 32373
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32276: LD_ADDR_VAR 0 4
32280: PUSH
32281: LD_VAR 0 9
32285: PUSH
32286: LD_INT 1
32288: ARRAY
32289: PPUSH
32290: LD_VAR 0 9
32294: PUSH
32295: LD_INT 2
32297: ARRAY
32298: PPUSH
32299: CALL_OW 546
32303: ST_TO_ADDR
// if hex [ 1 ] then
32304: LD_VAR 0 4
32308: PUSH
32309: LD_INT 1
32311: ARRAY
32312: IFFALSE 32316
// continue ;
32314: GO 32204
// h := hex [ 2 ] ;
32316: LD_ADDR_VAR 0 13
32320: PUSH
32321: LD_VAR 0 4
32325: PUSH
32326: LD_INT 2
32328: ARRAY
32329: ST_TO_ADDR
// if h + 7 < height then
32330: LD_VAR 0 13
32334: PUSH
32335: LD_INT 7
32337: PLUS
32338: PUSH
32339: LD_VAR 0 15
32343: LESS
32344: IFFALSE 32373
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32346: LD_ADDR_VAR 0 18
32350: PUSH
32351: LD_INT 7
32353: PUSH
32354: LD_INT 28
32356: PUSH
32357: LD_INT 45
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: PUSH
32365: LD_VAR 0 12
32369: ARRAY
32370: ST_TO_ADDR
// break ;
32371: GO 32375
// end ; end ; end ;
32373: GO 32204
32375: POP
32376: POP
// end ; if not weapon then
32377: LD_VAR 0 18
32381: NOT
32382: IFFALSE 32442
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32384: LD_ADDR_VAR 0 5
32388: PUSH
32389: LD_VAR 0 5
32393: PUSH
32394: LD_INT 11
32396: PUSH
32397: LD_INT 30
32399: PUSH
32400: LD_INT 49
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: DIFF
32408: ST_TO_ADDR
// if not list then
32409: LD_VAR 0 5
32413: NOT
32414: IFFALSE 32418
// exit ;
32416: GO 32560
// weapon := list [ rand ( 1 , list ) ] ;
32418: LD_ADDR_VAR 0 18
32422: PUSH
32423: LD_VAR 0 5
32427: PUSH
32428: LD_INT 1
32430: PPUSH
32431: LD_VAR 0 5
32435: PPUSH
32436: CALL_OW 12
32440: ARRAY
32441: ST_TO_ADDR
// end ; if weapon then
32442: LD_VAR 0 18
32446: IFFALSE 32560
// begin tmp := CostOfWeapon ( weapon ) ;
32448: LD_ADDR_VAR 0 14
32452: PUSH
32453: LD_VAR 0 18
32457: PPUSH
32458: CALL_OW 451
32462: ST_TO_ADDR
// j := GetBase ( tower ) ;
32463: LD_ADDR_VAR 0 9
32467: PUSH
32468: LD_VAR 0 1
32472: PPUSH
32473: CALL_OW 274
32477: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32478: LD_VAR 0 9
32482: PPUSH
32483: LD_INT 1
32485: PPUSH
32486: CALL_OW 275
32490: PUSH
32491: LD_VAR 0 14
32495: PUSH
32496: LD_INT 1
32498: ARRAY
32499: GREATEREQUAL
32500: PUSH
32501: LD_VAR 0 9
32505: PPUSH
32506: LD_INT 2
32508: PPUSH
32509: CALL_OW 275
32513: PUSH
32514: LD_VAR 0 14
32518: PUSH
32519: LD_INT 2
32521: ARRAY
32522: GREATEREQUAL
32523: AND
32524: PUSH
32525: LD_VAR 0 9
32529: PPUSH
32530: LD_INT 3
32532: PPUSH
32533: CALL_OW 275
32537: PUSH
32538: LD_VAR 0 14
32542: PUSH
32543: LD_INT 3
32545: ARRAY
32546: GREATEREQUAL
32547: AND
32548: IFFALSE 32560
// result := weapon ;
32550: LD_ADDR_VAR 0 3
32554: PUSH
32555: LD_VAR 0 18
32559: ST_TO_ADDR
// end ; end ;
32560: LD_VAR 0 3
32564: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32565: LD_INT 0
32567: PPUSH
32568: PPUSH
// result := true ;
32569: LD_ADDR_VAR 0 3
32573: PUSH
32574: LD_INT 1
32576: ST_TO_ADDR
// if array1 = array2 then
32577: LD_VAR 0 1
32581: PUSH
32582: LD_VAR 0 2
32586: EQUAL
32587: IFFALSE 32647
// begin for i = 1 to array1 do
32589: LD_ADDR_VAR 0 4
32593: PUSH
32594: DOUBLE
32595: LD_INT 1
32597: DEC
32598: ST_TO_ADDR
32599: LD_VAR 0 1
32603: PUSH
32604: FOR_TO
32605: IFFALSE 32643
// if array1 [ i ] <> array2 [ i ] then
32607: LD_VAR 0 1
32611: PUSH
32612: LD_VAR 0 4
32616: ARRAY
32617: PUSH
32618: LD_VAR 0 2
32622: PUSH
32623: LD_VAR 0 4
32627: ARRAY
32628: NONEQUAL
32629: IFFALSE 32641
// begin result := false ;
32631: LD_ADDR_VAR 0 3
32635: PUSH
32636: LD_INT 0
32638: ST_TO_ADDR
// break ;
32639: GO 32643
// end ;
32641: GO 32604
32643: POP
32644: POP
// end else
32645: GO 32655
// result := false ;
32647: LD_ADDR_VAR 0 3
32651: PUSH
32652: LD_INT 0
32654: ST_TO_ADDR
// end ;
32655: LD_VAR 0 3
32659: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32660: LD_INT 0
32662: PPUSH
32663: PPUSH
// if not array1 or not array2 then
32664: LD_VAR 0 1
32668: NOT
32669: PUSH
32670: LD_VAR 0 2
32674: NOT
32675: OR
32676: IFFALSE 32680
// exit ;
32678: GO 32744
// result := true ;
32680: LD_ADDR_VAR 0 3
32684: PUSH
32685: LD_INT 1
32687: ST_TO_ADDR
// for i = 1 to array1 do
32688: LD_ADDR_VAR 0 4
32692: PUSH
32693: DOUBLE
32694: LD_INT 1
32696: DEC
32697: ST_TO_ADDR
32698: LD_VAR 0 1
32702: PUSH
32703: FOR_TO
32704: IFFALSE 32742
// if array1 [ i ] <> array2 [ i ] then
32706: LD_VAR 0 1
32710: PUSH
32711: LD_VAR 0 4
32715: ARRAY
32716: PUSH
32717: LD_VAR 0 2
32721: PUSH
32722: LD_VAR 0 4
32726: ARRAY
32727: NONEQUAL
32728: IFFALSE 32740
// begin result := false ;
32730: LD_ADDR_VAR 0 3
32734: PUSH
32735: LD_INT 0
32737: ST_TO_ADDR
// break ;
32738: GO 32742
// end ;
32740: GO 32703
32742: POP
32743: POP
// end ;
32744: LD_VAR 0 3
32748: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32749: LD_INT 0
32751: PPUSH
32752: PPUSH
32753: PPUSH
// pom := GetBase ( fac ) ;
32754: LD_ADDR_VAR 0 5
32758: PUSH
32759: LD_VAR 0 1
32763: PPUSH
32764: CALL_OW 274
32768: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32769: LD_ADDR_VAR 0 4
32773: PUSH
32774: LD_VAR 0 2
32778: PUSH
32779: LD_INT 1
32781: ARRAY
32782: PPUSH
32783: LD_VAR 0 2
32787: PUSH
32788: LD_INT 2
32790: ARRAY
32791: PPUSH
32792: LD_VAR 0 2
32796: PUSH
32797: LD_INT 3
32799: ARRAY
32800: PPUSH
32801: LD_VAR 0 2
32805: PUSH
32806: LD_INT 4
32808: ARRAY
32809: PPUSH
32810: CALL_OW 449
32814: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32815: LD_ADDR_VAR 0 3
32819: PUSH
32820: LD_VAR 0 5
32824: PPUSH
32825: LD_INT 1
32827: PPUSH
32828: CALL_OW 275
32832: PUSH
32833: LD_VAR 0 4
32837: PUSH
32838: LD_INT 1
32840: ARRAY
32841: GREATEREQUAL
32842: PUSH
32843: LD_VAR 0 5
32847: PPUSH
32848: LD_INT 2
32850: PPUSH
32851: CALL_OW 275
32855: PUSH
32856: LD_VAR 0 4
32860: PUSH
32861: LD_INT 2
32863: ARRAY
32864: GREATEREQUAL
32865: AND
32866: PUSH
32867: LD_VAR 0 5
32871: PPUSH
32872: LD_INT 3
32874: PPUSH
32875: CALL_OW 275
32879: PUSH
32880: LD_VAR 0 4
32884: PUSH
32885: LD_INT 3
32887: ARRAY
32888: GREATEREQUAL
32889: AND
32890: ST_TO_ADDR
// end ;
32891: LD_VAR 0 3
32895: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32896: LD_INT 0
32898: PPUSH
32899: PPUSH
32900: PPUSH
32901: PPUSH
// pom := GetBase ( building ) ;
32902: LD_ADDR_VAR 0 3
32906: PUSH
32907: LD_VAR 0 1
32911: PPUSH
32912: CALL_OW 274
32916: ST_TO_ADDR
// if not pom then
32917: LD_VAR 0 3
32921: NOT
32922: IFFALSE 32926
// exit ;
32924: GO 33096
// btype := GetBType ( building ) ;
32926: LD_ADDR_VAR 0 5
32930: PUSH
32931: LD_VAR 0 1
32935: PPUSH
32936: CALL_OW 266
32940: ST_TO_ADDR
// if btype = b_armoury then
32941: LD_VAR 0 5
32945: PUSH
32946: LD_INT 4
32948: EQUAL
32949: IFFALSE 32959
// btype := b_barracks ;
32951: LD_ADDR_VAR 0 5
32955: PUSH
32956: LD_INT 5
32958: ST_TO_ADDR
// if btype = b_depot then
32959: LD_VAR 0 5
32963: PUSH
32964: LD_INT 0
32966: EQUAL
32967: IFFALSE 32977
// btype := b_warehouse ;
32969: LD_ADDR_VAR 0 5
32973: PUSH
32974: LD_INT 1
32976: ST_TO_ADDR
// if btype = b_workshop then
32977: LD_VAR 0 5
32981: PUSH
32982: LD_INT 2
32984: EQUAL
32985: IFFALSE 32995
// btype := b_factory ;
32987: LD_ADDR_VAR 0 5
32991: PUSH
32992: LD_INT 3
32994: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32995: LD_ADDR_VAR 0 4
32999: PUSH
33000: LD_VAR 0 5
33004: PPUSH
33005: LD_VAR 0 1
33009: PPUSH
33010: CALL_OW 248
33014: PPUSH
33015: CALL_OW 450
33019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33020: LD_ADDR_VAR 0 2
33024: PUSH
33025: LD_VAR 0 3
33029: PPUSH
33030: LD_INT 1
33032: PPUSH
33033: CALL_OW 275
33037: PUSH
33038: LD_VAR 0 4
33042: PUSH
33043: LD_INT 1
33045: ARRAY
33046: GREATEREQUAL
33047: PUSH
33048: LD_VAR 0 3
33052: PPUSH
33053: LD_INT 2
33055: PPUSH
33056: CALL_OW 275
33060: PUSH
33061: LD_VAR 0 4
33065: PUSH
33066: LD_INT 2
33068: ARRAY
33069: GREATEREQUAL
33070: AND
33071: PUSH
33072: LD_VAR 0 3
33076: PPUSH
33077: LD_INT 3
33079: PPUSH
33080: CALL_OW 275
33084: PUSH
33085: LD_VAR 0 4
33089: PUSH
33090: LD_INT 3
33092: ARRAY
33093: GREATEREQUAL
33094: AND
33095: ST_TO_ADDR
// end ;
33096: LD_VAR 0 2
33100: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33101: LD_INT 0
33103: PPUSH
33104: PPUSH
33105: PPUSH
// pom := GetBase ( building ) ;
33106: LD_ADDR_VAR 0 4
33110: PUSH
33111: LD_VAR 0 1
33115: PPUSH
33116: CALL_OW 274
33120: ST_TO_ADDR
// if not pom then
33121: LD_VAR 0 4
33125: NOT
33126: IFFALSE 33130
// exit ;
33128: GO 33231
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33130: LD_ADDR_VAR 0 5
33134: PUSH
33135: LD_VAR 0 2
33139: PPUSH
33140: LD_VAR 0 1
33144: PPUSH
33145: CALL_OW 248
33149: PPUSH
33150: CALL_OW 450
33154: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33155: LD_ADDR_VAR 0 3
33159: PUSH
33160: LD_VAR 0 4
33164: PPUSH
33165: LD_INT 1
33167: PPUSH
33168: CALL_OW 275
33172: PUSH
33173: LD_VAR 0 5
33177: PUSH
33178: LD_INT 1
33180: ARRAY
33181: GREATEREQUAL
33182: PUSH
33183: LD_VAR 0 4
33187: PPUSH
33188: LD_INT 2
33190: PPUSH
33191: CALL_OW 275
33195: PUSH
33196: LD_VAR 0 5
33200: PUSH
33201: LD_INT 2
33203: ARRAY
33204: GREATEREQUAL
33205: AND
33206: PUSH
33207: LD_VAR 0 4
33211: PPUSH
33212: LD_INT 3
33214: PPUSH
33215: CALL_OW 275
33219: PUSH
33220: LD_VAR 0 5
33224: PUSH
33225: LD_INT 3
33227: ARRAY
33228: GREATEREQUAL
33229: AND
33230: ST_TO_ADDR
// end ;
33231: LD_VAR 0 3
33235: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33236: LD_INT 0
33238: PPUSH
33239: PPUSH
33240: PPUSH
33241: PPUSH
33242: PPUSH
33243: PPUSH
33244: PPUSH
33245: PPUSH
33246: PPUSH
33247: PPUSH
33248: PPUSH
// result := false ;
33249: LD_ADDR_VAR 0 8
33253: PUSH
33254: LD_INT 0
33256: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33257: LD_VAR 0 5
33261: NOT
33262: PUSH
33263: LD_VAR 0 1
33267: NOT
33268: OR
33269: PUSH
33270: LD_VAR 0 2
33274: NOT
33275: OR
33276: PUSH
33277: LD_VAR 0 3
33281: NOT
33282: OR
33283: IFFALSE 33287
// exit ;
33285: GO 34101
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33287: LD_ADDR_VAR 0 14
33291: PUSH
33292: LD_VAR 0 1
33296: PPUSH
33297: LD_VAR 0 2
33301: PPUSH
33302: LD_VAR 0 3
33306: PPUSH
33307: LD_VAR 0 4
33311: PPUSH
33312: LD_VAR 0 5
33316: PUSH
33317: LD_INT 1
33319: ARRAY
33320: PPUSH
33321: CALL_OW 248
33325: PPUSH
33326: LD_INT 0
33328: PPUSH
33329: CALL 35334 0 6
33333: ST_TO_ADDR
// if not hexes then
33334: LD_VAR 0 14
33338: NOT
33339: IFFALSE 33343
// exit ;
33341: GO 34101
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33343: LD_ADDR_VAR 0 17
33347: PUSH
33348: LD_VAR 0 5
33352: PPUSH
33353: LD_INT 22
33355: PUSH
33356: LD_VAR 0 13
33360: PPUSH
33361: CALL_OW 255
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: LD_INT 30
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 30
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PPUSH
33402: CALL_OW 72
33406: ST_TO_ADDR
// for i = 1 to hexes do
33407: LD_ADDR_VAR 0 9
33411: PUSH
33412: DOUBLE
33413: LD_INT 1
33415: DEC
33416: ST_TO_ADDR
33417: LD_VAR 0 14
33421: PUSH
33422: FOR_TO
33423: IFFALSE 34099
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33425: LD_ADDR_VAR 0 13
33429: PUSH
33430: LD_VAR 0 14
33434: PUSH
33435: LD_VAR 0 9
33439: ARRAY
33440: PUSH
33441: LD_INT 1
33443: ARRAY
33444: PPUSH
33445: LD_VAR 0 14
33449: PUSH
33450: LD_VAR 0 9
33454: ARRAY
33455: PUSH
33456: LD_INT 2
33458: ARRAY
33459: PPUSH
33460: CALL_OW 428
33464: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33465: LD_VAR 0 14
33469: PUSH
33470: LD_VAR 0 9
33474: ARRAY
33475: PUSH
33476: LD_INT 1
33478: ARRAY
33479: PPUSH
33480: LD_VAR 0 14
33484: PUSH
33485: LD_VAR 0 9
33489: ARRAY
33490: PUSH
33491: LD_INT 2
33493: ARRAY
33494: PPUSH
33495: CALL_OW 351
33499: PUSH
33500: LD_VAR 0 14
33504: PUSH
33505: LD_VAR 0 9
33509: ARRAY
33510: PUSH
33511: LD_INT 1
33513: ARRAY
33514: PPUSH
33515: LD_VAR 0 14
33519: PUSH
33520: LD_VAR 0 9
33524: ARRAY
33525: PUSH
33526: LD_INT 2
33528: ARRAY
33529: PPUSH
33530: CALL_OW 488
33534: NOT
33535: OR
33536: PUSH
33537: LD_VAR 0 13
33541: PPUSH
33542: CALL_OW 247
33546: PUSH
33547: LD_INT 3
33549: EQUAL
33550: OR
33551: IFFALSE 33557
// exit ;
33553: POP
33554: POP
33555: GO 34101
// if not tmp then
33557: LD_VAR 0 13
33561: NOT
33562: IFFALSE 33566
// continue ;
33564: GO 33422
// result := true ;
33566: LD_ADDR_VAR 0 8
33570: PUSH
33571: LD_INT 1
33573: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33574: LD_VAR 0 6
33578: PUSH
33579: LD_VAR 0 13
33583: PPUSH
33584: CALL_OW 247
33588: PUSH
33589: LD_INT 2
33591: EQUAL
33592: AND
33593: PUSH
33594: LD_VAR 0 13
33598: PPUSH
33599: CALL_OW 263
33603: PUSH
33604: LD_INT 1
33606: EQUAL
33607: AND
33608: IFFALSE 33772
// begin if IsDrivenBy ( tmp ) then
33610: LD_VAR 0 13
33614: PPUSH
33615: CALL_OW 311
33619: IFFALSE 33623
// continue ;
33621: GO 33422
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33623: LD_VAR 0 6
33627: PPUSH
33628: LD_INT 3
33630: PUSH
33631: LD_INT 60
33633: PUSH
33634: EMPTY
33635: LIST
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 3
33643: PUSH
33644: LD_INT 55
33646: PUSH
33647: EMPTY
33648: LIST
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PPUSH
33658: CALL_OW 72
33662: IFFALSE 33770
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33664: LD_ADDR_VAR 0 18
33668: PUSH
33669: LD_VAR 0 6
33673: PPUSH
33674: LD_INT 3
33676: PUSH
33677: LD_INT 60
33679: PUSH
33680: EMPTY
33681: LIST
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 3
33689: PUSH
33690: LD_INT 55
33692: PUSH
33693: EMPTY
33694: LIST
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PPUSH
33704: CALL_OW 72
33708: PUSH
33709: LD_INT 1
33711: ARRAY
33712: ST_TO_ADDR
// if IsInUnit ( driver ) then
33713: LD_VAR 0 18
33717: PPUSH
33718: CALL_OW 310
33722: IFFALSE 33733
// ComExit ( driver ) ;
33724: LD_VAR 0 18
33728: PPUSH
33729: CALL 59114 0 1
// AddComEnterUnit ( driver , tmp ) ;
33733: LD_VAR 0 18
33737: PPUSH
33738: LD_VAR 0 13
33742: PPUSH
33743: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33747: LD_VAR 0 18
33751: PPUSH
33752: LD_VAR 0 7
33756: PPUSH
33757: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33761: LD_VAR 0 18
33765: PPUSH
33766: CALL_OW 181
// end ; continue ;
33770: GO 33422
// end ; if not cleaners or not tmp in cleaners then
33772: LD_VAR 0 6
33776: NOT
33777: PUSH
33778: LD_VAR 0 13
33782: PUSH
33783: LD_VAR 0 6
33787: IN
33788: NOT
33789: OR
33790: IFFALSE 34097
// begin if dep then
33792: LD_VAR 0 17
33796: IFFALSE 33932
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33798: LD_ADDR_VAR 0 16
33802: PUSH
33803: LD_VAR 0 17
33807: PUSH
33808: LD_INT 1
33810: ARRAY
33811: PPUSH
33812: CALL_OW 250
33816: PPUSH
33817: LD_VAR 0 17
33821: PUSH
33822: LD_INT 1
33824: ARRAY
33825: PPUSH
33826: CALL_OW 254
33830: PPUSH
33831: LD_INT 5
33833: PPUSH
33834: CALL_OW 272
33838: PUSH
33839: LD_VAR 0 17
33843: PUSH
33844: LD_INT 1
33846: ARRAY
33847: PPUSH
33848: CALL_OW 251
33852: PPUSH
33853: LD_VAR 0 17
33857: PUSH
33858: LD_INT 1
33860: ARRAY
33861: PPUSH
33862: CALL_OW 254
33866: PPUSH
33867: LD_INT 5
33869: PPUSH
33870: CALL_OW 273
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33879: LD_VAR 0 16
33883: PUSH
33884: LD_INT 1
33886: ARRAY
33887: PPUSH
33888: LD_VAR 0 16
33892: PUSH
33893: LD_INT 2
33895: ARRAY
33896: PPUSH
33897: CALL_OW 488
33901: IFFALSE 33932
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33903: LD_VAR 0 13
33907: PPUSH
33908: LD_VAR 0 16
33912: PUSH
33913: LD_INT 1
33915: ARRAY
33916: PPUSH
33917: LD_VAR 0 16
33921: PUSH
33922: LD_INT 2
33924: ARRAY
33925: PPUSH
33926: CALL_OW 111
// continue ;
33930: GO 33422
// end ; end ; r := GetDir ( tmp ) ;
33932: LD_ADDR_VAR 0 15
33936: PUSH
33937: LD_VAR 0 13
33941: PPUSH
33942: CALL_OW 254
33946: ST_TO_ADDR
// if r = 5 then
33947: LD_VAR 0 15
33951: PUSH
33952: LD_INT 5
33954: EQUAL
33955: IFFALSE 33965
// r := 0 ;
33957: LD_ADDR_VAR 0 15
33961: PUSH
33962: LD_INT 0
33964: ST_TO_ADDR
// for j = r to 5 do
33965: LD_ADDR_VAR 0 10
33969: PUSH
33970: DOUBLE
33971: LD_VAR 0 15
33975: DEC
33976: ST_TO_ADDR
33977: LD_INT 5
33979: PUSH
33980: FOR_TO
33981: IFFALSE 34095
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33983: LD_ADDR_VAR 0 11
33987: PUSH
33988: LD_VAR 0 13
33992: PPUSH
33993: CALL_OW 250
33997: PPUSH
33998: LD_VAR 0 10
34002: PPUSH
34003: LD_INT 2
34005: PPUSH
34006: CALL_OW 272
34010: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34011: LD_ADDR_VAR 0 12
34015: PUSH
34016: LD_VAR 0 13
34020: PPUSH
34021: CALL_OW 251
34025: PPUSH
34026: LD_VAR 0 10
34030: PPUSH
34031: LD_INT 2
34033: PPUSH
34034: CALL_OW 273
34038: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34039: LD_VAR 0 11
34043: PPUSH
34044: LD_VAR 0 12
34048: PPUSH
34049: CALL_OW 488
34053: PUSH
34054: LD_VAR 0 11
34058: PPUSH
34059: LD_VAR 0 12
34063: PPUSH
34064: CALL_OW 428
34068: NOT
34069: AND
34070: IFFALSE 34093
// begin ComMoveXY ( tmp , _x , _y ) ;
34072: LD_VAR 0 13
34076: PPUSH
34077: LD_VAR 0 11
34081: PPUSH
34082: LD_VAR 0 12
34086: PPUSH
34087: CALL_OW 111
// break ;
34091: GO 34095
// end ; end ;
34093: GO 33980
34095: POP
34096: POP
// end ; end ;
34097: GO 33422
34099: POP
34100: POP
// end ;
34101: LD_VAR 0 8
34105: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34106: LD_INT 0
34108: PPUSH
// result := true ;
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: LD_INT 1
34116: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34117: LD_VAR 0 2
34121: PUSH
34122: LD_INT 24
34124: DOUBLE
34125: EQUAL
34126: IFTRUE 34136
34128: LD_INT 33
34130: DOUBLE
34131: EQUAL
34132: IFTRUE 34136
34134: GO 34161
34136: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34137: LD_ADDR_VAR 0 3
34141: PUSH
34142: LD_INT 32
34144: PPUSH
34145: LD_VAR 0 1
34149: PPUSH
34150: CALL_OW 321
34154: PUSH
34155: LD_INT 2
34157: EQUAL
34158: ST_TO_ADDR
34159: GO 34477
34161: LD_INT 20
34163: DOUBLE
34164: EQUAL
34165: IFTRUE 34169
34167: GO 34194
34169: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34170: LD_ADDR_VAR 0 3
34174: PUSH
34175: LD_INT 6
34177: PPUSH
34178: LD_VAR 0 1
34182: PPUSH
34183: CALL_OW 321
34187: PUSH
34188: LD_INT 2
34190: EQUAL
34191: ST_TO_ADDR
34192: GO 34477
34194: LD_INT 22
34196: DOUBLE
34197: EQUAL
34198: IFTRUE 34208
34200: LD_INT 36
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34208
34206: GO 34233
34208: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_INT 15
34216: PPUSH
34217: LD_VAR 0 1
34221: PPUSH
34222: CALL_OW 321
34226: PUSH
34227: LD_INT 2
34229: EQUAL
34230: ST_TO_ADDR
34231: GO 34477
34233: LD_INT 30
34235: DOUBLE
34236: EQUAL
34237: IFTRUE 34241
34239: GO 34266
34241: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34242: LD_ADDR_VAR 0 3
34246: PUSH
34247: LD_INT 20
34249: PPUSH
34250: LD_VAR 0 1
34254: PPUSH
34255: CALL_OW 321
34259: PUSH
34260: LD_INT 2
34262: EQUAL
34263: ST_TO_ADDR
34264: GO 34477
34266: LD_INT 28
34268: DOUBLE
34269: EQUAL
34270: IFTRUE 34280
34272: LD_INT 21
34274: DOUBLE
34275: EQUAL
34276: IFTRUE 34280
34278: GO 34305
34280: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34281: LD_ADDR_VAR 0 3
34285: PUSH
34286: LD_INT 21
34288: PPUSH
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 321
34298: PUSH
34299: LD_INT 2
34301: EQUAL
34302: ST_TO_ADDR
34303: GO 34477
34305: LD_INT 16
34307: DOUBLE
34308: EQUAL
34309: IFTRUE 34313
34311: GO 34338
34313: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34314: LD_ADDR_VAR 0 3
34318: PUSH
34319: LD_INT 84
34321: PPUSH
34322: LD_VAR 0 1
34326: PPUSH
34327: CALL_OW 321
34331: PUSH
34332: LD_INT 2
34334: EQUAL
34335: ST_TO_ADDR
34336: GO 34477
34338: LD_INT 19
34340: DOUBLE
34341: EQUAL
34342: IFTRUE 34352
34344: LD_INT 23
34346: DOUBLE
34347: EQUAL
34348: IFTRUE 34352
34350: GO 34377
34352: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34353: LD_ADDR_VAR 0 3
34357: PUSH
34358: LD_INT 83
34360: PPUSH
34361: LD_VAR 0 1
34365: PPUSH
34366: CALL_OW 321
34370: PUSH
34371: LD_INT 2
34373: EQUAL
34374: ST_TO_ADDR
34375: GO 34477
34377: LD_INT 17
34379: DOUBLE
34380: EQUAL
34381: IFTRUE 34385
34383: GO 34410
34385: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34386: LD_ADDR_VAR 0 3
34390: PUSH
34391: LD_INT 39
34393: PPUSH
34394: LD_VAR 0 1
34398: PPUSH
34399: CALL_OW 321
34403: PUSH
34404: LD_INT 2
34406: EQUAL
34407: ST_TO_ADDR
34408: GO 34477
34410: LD_INT 18
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34418
34416: GO 34443
34418: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34419: LD_ADDR_VAR 0 3
34423: PUSH
34424: LD_INT 40
34426: PPUSH
34427: LD_VAR 0 1
34431: PPUSH
34432: CALL_OW 321
34436: PUSH
34437: LD_INT 2
34439: EQUAL
34440: ST_TO_ADDR
34441: GO 34477
34443: LD_INT 27
34445: DOUBLE
34446: EQUAL
34447: IFTRUE 34451
34449: GO 34476
34451: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_INT 35
34459: PPUSH
34460: LD_VAR 0 1
34464: PPUSH
34465: CALL_OW 321
34469: PUSH
34470: LD_INT 2
34472: EQUAL
34473: ST_TO_ADDR
34474: GO 34477
34476: POP
// end ;
34477: LD_VAR 0 3
34481: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34482: LD_INT 0
34484: PPUSH
34485: PPUSH
34486: PPUSH
34487: PPUSH
34488: PPUSH
34489: PPUSH
34490: PPUSH
34491: PPUSH
34492: PPUSH
34493: PPUSH
34494: PPUSH
// result := false ;
34495: LD_ADDR_VAR 0 6
34499: PUSH
34500: LD_INT 0
34502: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34503: LD_VAR 0 1
34507: NOT
34508: PUSH
34509: LD_VAR 0 1
34513: PPUSH
34514: CALL_OW 266
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: IN
34529: NOT
34530: OR
34531: PUSH
34532: LD_VAR 0 2
34536: NOT
34537: OR
34538: PUSH
34539: LD_VAR 0 5
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: LD_INT 4
34558: PUSH
34559: LD_INT 5
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: IN
34570: NOT
34571: OR
34572: PUSH
34573: LD_VAR 0 3
34577: PPUSH
34578: LD_VAR 0 4
34582: PPUSH
34583: CALL_OW 488
34587: NOT
34588: OR
34589: IFFALSE 34593
// exit ;
34591: GO 35329
// side := GetSide ( depot ) ;
34593: LD_ADDR_VAR 0 9
34597: PUSH
34598: LD_VAR 0 1
34602: PPUSH
34603: CALL_OW 255
34607: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34608: LD_VAR 0 9
34612: PPUSH
34613: LD_VAR 0 2
34617: PPUSH
34618: CALL 34106 0 2
34622: NOT
34623: IFFALSE 34627
// exit ;
34625: GO 35329
// pom := GetBase ( depot ) ;
34627: LD_ADDR_VAR 0 10
34631: PUSH
34632: LD_VAR 0 1
34636: PPUSH
34637: CALL_OW 274
34641: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34642: LD_ADDR_VAR 0 11
34646: PUSH
34647: LD_VAR 0 2
34651: PPUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: CALL_OW 248
34661: PPUSH
34662: CALL_OW 450
34666: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34667: LD_VAR 0 10
34671: PPUSH
34672: LD_INT 1
34674: PPUSH
34675: CALL_OW 275
34679: PUSH
34680: LD_VAR 0 11
34684: PUSH
34685: LD_INT 1
34687: ARRAY
34688: GREATEREQUAL
34689: PUSH
34690: LD_VAR 0 10
34694: PPUSH
34695: LD_INT 2
34697: PPUSH
34698: CALL_OW 275
34702: PUSH
34703: LD_VAR 0 11
34707: PUSH
34708: LD_INT 2
34710: ARRAY
34711: GREATEREQUAL
34712: AND
34713: PUSH
34714: LD_VAR 0 10
34718: PPUSH
34719: LD_INT 3
34721: PPUSH
34722: CALL_OW 275
34726: PUSH
34727: LD_VAR 0 11
34731: PUSH
34732: LD_INT 3
34734: ARRAY
34735: GREATEREQUAL
34736: AND
34737: NOT
34738: IFFALSE 34742
// exit ;
34740: GO 35329
// if GetBType ( depot ) = b_depot then
34742: LD_VAR 0 1
34746: PPUSH
34747: CALL_OW 266
34751: PUSH
34752: LD_INT 0
34754: EQUAL
34755: IFFALSE 34767
// dist := 28 else
34757: LD_ADDR_VAR 0 14
34761: PUSH
34762: LD_INT 28
34764: ST_TO_ADDR
34765: GO 34775
// dist := 36 ;
34767: LD_ADDR_VAR 0 14
34771: PUSH
34772: LD_INT 36
34774: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34775: LD_VAR 0 1
34779: PPUSH
34780: LD_VAR 0 3
34784: PPUSH
34785: LD_VAR 0 4
34789: PPUSH
34790: CALL_OW 297
34794: PUSH
34795: LD_VAR 0 14
34799: GREATER
34800: IFFALSE 34804
// exit ;
34802: GO 35329
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34804: LD_ADDR_VAR 0 12
34808: PUSH
34809: LD_VAR 0 2
34813: PPUSH
34814: LD_VAR 0 3
34818: PPUSH
34819: LD_VAR 0 4
34823: PPUSH
34824: LD_VAR 0 5
34828: PPUSH
34829: LD_VAR 0 1
34833: PPUSH
34834: CALL_OW 248
34838: PPUSH
34839: LD_INT 0
34841: PPUSH
34842: CALL 35334 0 6
34846: ST_TO_ADDR
// if not hexes then
34847: LD_VAR 0 12
34851: NOT
34852: IFFALSE 34856
// exit ;
34854: GO 35329
// hex := GetHexInfo ( x , y ) ;
34856: LD_ADDR_VAR 0 15
34860: PUSH
34861: LD_VAR 0 3
34865: PPUSH
34866: LD_VAR 0 4
34870: PPUSH
34871: CALL_OW 546
34875: ST_TO_ADDR
// if hex [ 1 ] then
34876: LD_VAR 0 15
34880: PUSH
34881: LD_INT 1
34883: ARRAY
34884: IFFALSE 34888
// exit ;
34886: GO 35329
// height := hex [ 2 ] ;
34888: LD_ADDR_VAR 0 13
34892: PUSH
34893: LD_VAR 0 15
34897: PUSH
34898: LD_INT 2
34900: ARRAY
34901: ST_TO_ADDR
// for i = 1 to hexes do
34902: LD_ADDR_VAR 0 7
34906: PUSH
34907: DOUBLE
34908: LD_INT 1
34910: DEC
34911: ST_TO_ADDR
34912: LD_VAR 0 12
34916: PUSH
34917: FOR_TO
34918: IFFALSE 35248
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34920: LD_VAR 0 12
34924: PUSH
34925: LD_VAR 0 7
34929: ARRAY
34930: PUSH
34931: LD_INT 1
34933: ARRAY
34934: PPUSH
34935: LD_VAR 0 12
34939: PUSH
34940: LD_VAR 0 7
34944: ARRAY
34945: PUSH
34946: LD_INT 2
34948: ARRAY
34949: PPUSH
34950: CALL_OW 488
34954: NOT
34955: PUSH
34956: LD_VAR 0 12
34960: PUSH
34961: LD_VAR 0 7
34965: ARRAY
34966: PUSH
34967: LD_INT 1
34969: ARRAY
34970: PPUSH
34971: LD_VAR 0 12
34975: PUSH
34976: LD_VAR 0 7
34980: ARRAY
34981: PUSH
34982: LD_INT 2
34984: ARRAY
34985: PPUSH
34986: CALL_OW 428
34990: PUSH
34991: LD_INT 0
34993: GREATER
34994: OR
34995: PUSH
34996: LD_VAR 0 12
35000: PUSH
35001: LD_VAR 0 7
35005: ARRAY
35006: PUSH
35007: LD_INT 1
35009: ARRAY
35010: PPUSH
35011: LD_VAR 0 12
35015: PUSH
35016: LD_VAR 0 7
35020: ARRAY
35021: PUSH
35022: LD_INT 2
35024: ARRAY
35025: PPUSH
35026: CALL_OW 351
35030: OR
35031: IFFALSE 35037
// exit ;
35033: POP
35034: POP
35035: GO 35329
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35037: LD_ADDR_VAR 0 8
35041: PUSH
35042: LD_VAR 0 12
35046: PUSH
35047: LD_VAR 0 7
35051: ARRAY
35052: PUSH
35053: LD_INT 1
35055: ARRAY
35056: PPUSH
35057: LD_VAR 0 12
35061: PUSH
35062: LD_VAR 0 7
35066: ARRAY
35067: PUSH
35068: LD_INT 2
35070: ARRAY
35071: PPUSH
35072: CALL_OW 546
35076: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35077: LD_VAR 0 8
35081: PUSH
35082: LD_INT 1
35084: ARRAY
35085: PUSH
35086: LD_VAR 0 8
35090: PUSH
35091: LD_INT 2
35093: ARRAY
35094: PUSH
35095: LD_VAR 0 13
35099: PUSH
35100: LD_INT 2
35102: PLUS
35103: GREATER
35104: OR
35105: PUSH
35106: LD_VAR 0 8
35110: PUSH
35111: LD_INT 2
35113: ARRAY
35114: PUSH
35115: LD_VAR 0 13
35119: PUSH
35120: LD_INT 2
35122: MINUS
35123: LESS
35124: OR
35125: PUSH
35126: LD_VAR 0 8
35130: PUSH
35131: LD_INT 3
35133: ARRAY
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: LD_INT 8
35140: PUSH
35141: LD_INT 9
35143: PUSH
35144: LD_INT 10
35146: PUSH
35147: LD_INT 11
35149: PUSH
35150: LD_INT 12
35152: PUSH
35153: LD_INT 13
35155: PUSH
35156: LD_INT 16
35158: PUSH
35159: LD_INT 17
35161: PUSH
35162: LD_INT 18
35164: PUSH
35165: LD_INT 19
35167: PUSH
35168: LD_INT 20
35170: PUSH
35171: LD_INT 21
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: IN
35189: NOT
35190: OR
35191: PUSH
35192: LD_VAR 0 8
35196: PUSH
35197: LD_INT 5
35199: ARRAY
35200: NOT
35201: OR
35202: PUSH
35203: LD_VAR 0 8
35207: PUSH
35208: LD_INT 6
35210: ARRAY
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: LD_INT 2
35217: PUSH
35218: LD_INT 7
35220: PUSH
35221: LD_INT 9
35223: PUSH
35224: LD_INT 10
35226: PUSH
35227: LD_INT 11
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: IN
35238: NOT
35239: OR
35240: IFFALSE 35246
// exit ;
35242: POP
35243: POP
35244: GO 35329
// end ;
35246: GO 34917
35248: POP
35249: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35250: LD_VAR 0 9
35254: PPUSH
35255: LD_VAR 0 3
35259: PPUSH
35260: LD_VAR 0 4
35264: PPUSH
35265: LD_INT 20
35267: PPUSH
35268: CALL 27281 0 4
35272: PUSH
35273: LD_INT 4
35275: ARRAY
35276: IFFALSE 35280
// exit ;
35278: GO 35329
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35280: LD_VAR 0 2
35284: PUSH
35285: LD_INT 29
35287: PUSH
35288: LD_INT 30
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: IN
35295: PUSH
35296: LD_VAR 0 3
35300: PPUSH
35301: LD_VAR 0 4
35305: PPUSH
35306: LD_VAR 0 9
35310: PPUSH
35311: CALL_OW 440
35315: NOT
35316: AND
35317: IFFALSE 35321
// exit ;
35319: GO 35329
// result := true ;
35321: LD_ADDR_VAR 0 6
35325: PUSH
35326: LD_INT 1
35328: ST_TO_ADDR
// end ;
35329: LD_VAR 0 6
35333: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35334: LD_INT 0
35336: PPUSH
35337: PPUSH
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
35379: PPUSH
35380: PPUSH
35381: PPUSH
35382: PPUSH
35383: PPUSH
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
35388: PPUSH
35389: PPUSH
35390: PPUSH
35391: PPUSH
35392: PPUSH
35393: PPUSH
// result = [ ] ;
35394: LD_ADDR_VAR 0 7
35398: PUSH
35399: EMPTY
35400: ST_TO_ADDR
// temp_list = [ ] ;
35401: LD_ADDR_VAR 0 9
35405: PUSH
35406: EMPTY
35407: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35408: LD_VAR 0 4
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: LD_INT 3
35424: PUSH
35425: LD_INT 4
35427: PUSH
35428: LD_INT 5
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: IN
35439: NOT
35440: PUSH
35441: LD_VAR 0 1
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: IN
35456: PUSH
35457: LD_VAR 0 5
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: LD_INT 3
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: IN
35476: NOT
35477: AND
35478: OR
35479: IFFALSE 35483
// exit ;
35481: GO 53874
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35483: LD_VAR 0 1
35487: PUSH
35488: LD_INT 6
35490: PUSH
35491: LD_INT 7
35493: PUSH
35494: LD_INT 8
35496: PUSH
35497: LD_INT 13
35499: PUSH
35500: LD_INT 12
35502: PUSH
35503: LD_INT 15
35505: PUSH
35506: LD_INT 11
35508: PUSH
35509: LD_INT 14
35511: PUSH
35512: LD_INT 10
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: IN
35526: IFFALSE 35536
// btype = b_lab ;
35528: LD_ADDR_VAR 0 1
35532: PUSH
35533: LD_INT 6
35535: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35536: LD_VAR 0 6
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 2
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: IN
35555: NOT
35556: PUSH
35557: LD_VAR 0 1
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: LD_INT 3
35573: PUSH
35574: LD_INT 6
35576: PUSH
35577: LD_INT 36
35579: PUSH
35580: LD_INT 4
35582: PUSH
35583: LD_INT 5
35585: PUSH
35586: LD_INT 31
35588: PUSH
35589: LD_INT 32
35591: PUSH
35592: LD_INT 33
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: IN
35608: NOT
35609: PUSH
35610: LD_VAR 0 6
35614: PUSH
35615: LD_INT 1
35617: EQUAL
35618: AND
35619: OR
35620: PUSH
35621: LD_VAR 0 1
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: LD_INT 3
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: IN
35636: NOT
35637: PUSH
35638: LD_VAR 0 6
35642: PUSH
35643: LD_INT 2
35645: EQUAL
35646: AND
35647: OR
35648: IFFALSE 35658
// mode = 0 ;
35650: LD_ADDR_VAR 0 6
35654: PUSH
35655: LD_INT 0
35657: ST_TO_ADDR
// case mode of 0 :
35658: LD_VAR 0 6
35662: PUSH
35663: LD_INT 0
35665: DOUBLE
35666: EQUAL
35667: IFTRUE 35671
35669: GO 47124
35671: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35672: LD_ADDR_VAR 0 11
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: LD_INT 1
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 3
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 3
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35865: LD_ADDR_VAR 0 12
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 2
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 2
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 2
35988: NEG
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: NEG
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 3
36022: NEG
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 3
36033: NEG
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36061: LD_ADDR_VAR 0 13
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: NEG
36143: PUSH
36144: LD_INT 2
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 2
36196: NEG
36197: PUSH
36198: LD_INT 2
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 2
36208: NEG
36209: PUSH
36210: LD_INT 3
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 3
36220: NEG
36221: PUSH
36222: LD_INT 2
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 3
36232: NEG
36233: PUSH
36234: LD_INT 3
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36260: LD_ADDR_VAR 0 14
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 0
36353: PUSH
36354: LD_INT 2
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 0
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 3
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: LD_INT 3
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36456: LD_ADDR_VAR 0 15
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 2
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: NEG
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 3
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 3
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36649: LD_ADDR_VAR 0 16
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 2
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 2
36772: NEG
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: NEG
36785: PUSH
36786: LD_INT 2
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 3
36796: PUSH
36797: LD_INT 2
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 3
36806: PUSH
36807: LD_INT 3
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: LD_INT 3
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36842: LD_ADDR_VAR 0 17
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: LD_INT 2
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 2
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: LD_INT 2
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 2
37029: NEG
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 2
37041: NEG
37042: PUSH
37043: LD_INT 2
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37072: LD_ADDR_VAR 0 18
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 2
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 2
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: LD_INT 2
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: LD_INT 1
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37302: LD_ADDR_VAR 0 19
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: LD_INT 2
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 2
37437: PUSH
37438: LD_INT 2
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 2
37478: NEG
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: NEG
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: NEG
37502: PUSH
37503: LD_INT 2
37505: NEG
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37532: LD_ADDR_VAR 0 20
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 2
37617: NEG
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: LD_INT 2
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 2
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: NEG
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37762: LD_ADDR_VAR 0 21
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: LD_INT 2
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 2
37938: NEG
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: NEG
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37992: LD_ADDR_VAR 0 22
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: NEG
38192: PUSH
38193: LD_INT 2
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38222: LD_ADDR_VAR 0 23
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 2
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: LD_INT 3
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 3
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: LD_INT 2
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38502: LD_ADDR_VAR 0 24
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 1
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: LD_INT 2
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 2
38678: NEG
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: LD_INT 2
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 3
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 3
38745: PUSH
38746: LD_INT 2
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38778: LD_ADDR_VAR 0 25
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: LD_INT 2
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: LD_INT 2
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: NEG
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: NEG
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 3
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: LD_INT 3
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39052: LD_ADDR_VAR 0 26
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 2
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: LD_INT 2
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: LD_INT 2
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 2
39228: NEG
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 2
39239: NEG
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: NEG
39252: PUSH
39253: LD_INT 2
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: LD_INT 3
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: LD_INT 3
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: NEG
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39328: LD_ADDR_VAR 0 27
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 3
39573: NEG
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39608: LD_ADDR_VAR 0 28
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: LD_INT 3
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: LD_INT 3
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 3
39843: NEG
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 3
39855: NEG
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39890: LD_ADDR_VAR 0 29
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: LD_INT 2
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: LD_INT 3
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 2
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 3
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 3
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 3
40134: NEG
40135: PUSH
40136: LD_INT 2
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40169: LD_ADDR_VAR 0 30
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 2
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 3
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 3
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: LD_INT 3
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 3
40412: NEG
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40447: LD_ADDR_VAR 0 31
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: LD_INT 3
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 3
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 3
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 3
40690: NEG
40691: PUSH
40692: LD_INT 2
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40725: LD_ADDR_VAR 0 32
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 2
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 2
40902: NEG
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: LD_INT 3
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 3
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: PUSH
40948: LD_INT 3
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 3
40968: NEG
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41003: LD_ADDR_VAR 0 33
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: LD_INT 3
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 3
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 3
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 3
41247: NEG
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41282: LD_ADDR_VAR 0 34
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: PUSH
41408: LD_INT 2
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 2
41438: NEG
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: NEG
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 3
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 3
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 3
41527: NEG
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41562: LD_ADDR_VAR 0 35
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41674: LD_ADDR_VAR 0 36
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41786: LD_ADDR_VAR 0 37
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41898: LD_ADDR_VAR 0 38
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42010: LD_ADDR_VAR 0 39
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42122: LD_ADDR_VAR 0 40
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42234: LD_ADDR_VAR 0 41
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: LD_INT 3
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 3
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 3
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 3
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: LD_INT 3
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 3
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: NEG
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: LD_INT 2
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 3
42543: NEG
42544: PUSH
42545: LD_INT 3
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42584: LD_ADDR_VAR 0 42
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: LD_INT 3
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 3
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 3
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 3
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: LD_INT 3
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 3
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 3
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 3
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 3
42881: NEG
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 3
42893: NEG
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42934: LD_ADDR_VAR 0 43
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 3
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 3
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 3
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 2
43219: NEG
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 3
43230: NEG
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 3
43241: NEG
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43282: LD_ADDR_VAR 0 44
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: LD_INT 3
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 3
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 3
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 3
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 3
43525: PUSH
43526: LD_INT 3
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 3
43556: NEG
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: NEG
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 3
43579: NEG
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: LD_INT 3
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43632: LD_ADDR_VAR 0 45
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: NEG
43811: PUSH
43812: LD_INT 2
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: LD_INT 3
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 3
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 3
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 3
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 3
43878: PUSH
43879: LD_INT 3
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: LD_INT 3
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 3
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 3
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 3
43929: NEG
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 3
43941: NEG
43942: PUSH
43943: LD_INT 3
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43982: LD_ADDR_VAR 0 46
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: NEG
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 3
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 3
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 3
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 3
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 3
44278: NEG
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 3
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44330: LD_ADDR_VAR 0 47
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 2
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: NEG
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44481: LD_ADDR_VAR 0 48
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44628: LD_ADDR_VAR 0 49
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44772: LD_ADDR_VAR 0 50
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44916: LD_ADDR_VAR 0 51
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45063: LD_ADDR_VAR 0 52
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45214: LD_ADDR_VAR 0 53
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45444: LD_ADDR_VAR 0 54
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45674: LD_ADDR_VAR 0 55
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45904: LD_ADDR_VAR 0 56
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46134: LD_ADDR_VAR 0 57
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46364: LD_ADDR_VAR 0 58
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46594: LD_ADDR_VAR 0 59
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46682: LD_ADDR_VAR 0 60
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46770: LD_ADDR_VAR 0 61
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46858: LD_ADDR_VAR 0 62
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46946: LD_ADDR_VAR 0 63
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47034: LD_ADDR_VAR 0 64
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: ST_TO_ADDR
// end ; 1 :
47122: GO 53019
47124: LD_INT 1
47126: DOUBLE
47127: EQUAL
47128: IFTRUE 47132
47130: GO 49755
47132: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47133: LD_ADDR_VAR 0 11
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 3
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47177: LD_ADDR_VAR 0 12
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47218: LD_ADDR_VAR 0 13
47222: PUSH
47223: LD_INT 3
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47258: LD_ADDR_VAR 0 14
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: LD_INT 3
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 3
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47299: LD_ADDR_VAR 0 15
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 3
47317: NEG
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47343: LD_ADDR_VAR 0 16
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: LD_INT 3
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 3
47362: NEG
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 3
47374: NEG
47375: PUSH
47376: LD_INT 3
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: LIST
47388: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47389: LD_ADDR_VAR 0 17
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 3
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 3
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: LIST
47432: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47433: LD_ADDR_VAR 0 18
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 3
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 3
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47474: LD_ADDR_VAR 0 19
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: LD_INT 3
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: LD_INT 3
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47514: LD_ADDR_VAR 0 20
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 3
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47555: LD_ADDR_VAR 0 21
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: NEG
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 3
47584: NEG
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: LIST
47598: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47599: LD_ADDR_VAR 0 22
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: LD_INT 3
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 3
47618: NEG
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: NEG
47631: PUSH
47632: LD_INT 3
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47645: LD_ADDR_VAR 0 23
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 3
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 4
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47689: LD_ADDR_VAR 0 24
47693: PUSH
47694: LD_INT 3
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 4
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47730: LD_ADDR_VAR 0 25
47734: PUSH
47735: LD_INT 3
47737: PUSH
47738: LD_INT 3
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 4
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: LD_INT 4
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: LIST
47769: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47770: LD_ADDR_VAR 0 26
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 3
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 4
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 3
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: LIST
47810: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47811: LD_ADDR_VAR 0 27
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 4
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47855: LD_ADDR_VAR 0 28
47859: PUSH
47860: LD_INT 3
47862: NEG
47863: PUSH
47864: LD_INT 3
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 3
47874: NEG
47875: PUSH
47876: LD_INT 4
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 4
47886: NEG
47887: PUSH
47888: LD_INT 3
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47901: LD_ADDR_VAR 0 29
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 3
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 3
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 4
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 4
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 3
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 5
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 5
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 4
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 6
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 6
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 5
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48056: LD_ADDR_VAR 0 30
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 3
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 3
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 4
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 4
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 4
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 5
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 5
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 5
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 6
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 6
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48199: LD_ADDR_VAR 0 31
48203: PUSH
48204: LD_INT 3
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: LD_INT 3
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 4
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 4
48246: PUSH
48247: LD_INT 4
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: LD_INT 4
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 5
48266: PUSH
48267: LD_INT 4
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 5
48276: PUSH
48277: LD_INT 5
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 4
48286: PUSH
48287: LD_INT 5
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 6
48296: PUSH
48297: LD_INT 5
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 6
48306: PUSH
48307: LD_INT 6
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 5
48316: PUSH
48317: LD_INT 6
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48338: LD_ADDR_VAR 0 32
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 3
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 4
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 4
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: LD_INT 5
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 5
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: LD_INT 4
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: LD_INT 6
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 6
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: LD_INT 5
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48481: LD_ADDR_VAR 0 33
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 4
48533: NEG
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 4
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 4
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 5
48567: NEG
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 5
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 5
48590: NEG
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 6
48601: NEG
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 6
48612: NEG
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48636: LD_ADDR_VAR 0 34
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 3
48655: NEG
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 3
48667: NEG
48668: PUSH
48669: LD_INT 3
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 3
48679: NEG
48680: PUSH
48681: LD_INT 4
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 4
48691: NEG
48692: PUSH
48693: LD_INT 3
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 4
48703: NEG
48704: PUSH
48705: LD_INT 4
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 4
48715: NEG
48716: PUSH
48717: LD_INT 5
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 5
48727: NEG
48728: PUSH
48729: LD_INT 4
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 5
48739: NEG
48740: PUSH
48741: LD_INT 5
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 5
48751: NEG
48752: PUSH
48753: LD_INT 6
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 6
48763: NEG
48764: PUSH
48765: LD_INT 5
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 6
48775: NEG
48776: PUSH
48777: LD_INT 6
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48799: LD_ADDR_VAR 0 41
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48843: LD_ADDR_VAR 0 42
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 3
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: LIST
48883: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48884: LD_ADDR_VAR 0 43
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: LIST
48923: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48924: LD_ADDR_VAR 0 44
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: LIST
48964: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48965: LD_ADDR_VAR 0 45
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49009: LD_ADDR_VAR 0 46
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 3
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 3
49040: NEG
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49055: LD_ADDR_VAR 0 47
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 3
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49088: LD_ADDR_VAR 0 48
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49119: LD_ADDR_VAR 0 49
49123: PUSH
49124: LD_INT 3
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49148: LD_ADDR_VAR 0 50
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: LD_INT 3
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 3
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49177: LD_ADDR_VAR 0 51
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: NEG
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49208: LD_ADDR_VAR 0 52
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 3
49227: NEG
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49241: LD_ADDR_VAR 0 53
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 3
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 3
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49285: LD_ADDR_VAR 0 54
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 3
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: LIST
49325: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49326: LD_ADDR_VAR 0 55
49330: PUSH
49331: LD_INT 3
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: LD_INT 3
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: LD_INT 3
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: LIST
49365: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49366: LD_ADDR_VAR 0 56
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 3
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: LIST
49406: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49407: LD_ADDR_VAR 0 57
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 3
49425: NEG
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 3
49436: NEG
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49451: LD_ADDR_VAR 0 58
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49497: LD_ADDR_VAR 0 59
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49541: LD_ADDR_VAR 0 60
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: LIST
49581: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49582: LD_ADDR_VAR 0 61
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49622: LD_ADDR_VAR 0 62
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49663: LD_ADDR_VAR 0 63
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49707: LD_ADDR_VAR 0 64
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: NEG
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: ST_TO_ADDR
// end ; 2 :
49753: GO 53019
49755: LD_INT 2
49757: DOUBLE
49758: EQUAL
49759: IFTRUE 49763
49761: GO 53018
49763: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49764: LD_ADDR_VAR 0 29
49768: PUSH
49769: LD_INT 4
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 4
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 5
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 5
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 4
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 3
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 3
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 5
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 3
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 4
49884: PUSH
49885: LD_INT 3
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 4
49894: PUSH
49895: LD_INT 4
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: LD_INT 4
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 3
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 4
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 4
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 4
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 5
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 5
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 4
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 5
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: LD_INT 3
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 3
50047: NEG
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 4
50103: NEG
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 4
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 4
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 4
50149: NEG
50150: PUSH
50151: LD_INT 4
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 4
50161: NEG
50162: PUSH
50163: LD_INT 5
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 3
50173: NEG
50174: PUSH
50175: LD_INT 4
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 3
50185: NEG
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 4
50197: NEG
50198: PUSH
50199: LD_INT 3
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 5
50209: NEG
50210: PUSH
50211: LD_INT 4
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 5
50221: NEG
50222: PUSH
50223: LD_INT 5
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 3
50233: NEG
50234: PUSH
50235: LD_INT 5
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 5
50245: NEG
50246: PUSH
50247: LD_INT 3
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50302: LD_ADDR_VAR 0 30
50306: PUSH
50307: LD_INT 4
50309: PUSH
50310: LD_INT 4
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 4
50319: PUSH
50320: LD_INT 3
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 5
50329: PUSH
50330: LD_INT 4
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 5
50339: PUSH
50340: LD_INT 5
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 4
50349: PUSH
50350: LD_INT 5
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: LD_INT 4
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 3
50369: PUSH
50370: LD_INT 3
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 5
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 3
50389: PUSH
50390: LD_INT 5
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 3
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 4
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: LD_INT 4
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 3
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: LD_INT 4
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 4
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 4
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: NEG
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 4
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 5
50548: NEG
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 5
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 5
50571: NEG
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 3
50583: NEG
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: NEG
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: NEG
50607: PUSH
50608: LD_INT 4
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 4
50654: NEG
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 4
50666: NEG
50667: PUSH
50668: LD_INT 4
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 4
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 4
50690: NEG
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 4
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 5
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 4
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 3
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 4
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 5
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 3
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: LD_INT 5
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50849: LD_ADDR_VAR 0 31
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 4
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 3
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 4
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 5
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 5
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 4
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 3
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 5
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 3
50949: NEG
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: NEG
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 4
51005: NEG
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 4
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 4
51028: NEG
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 4
51051: NEG
51052: PUSH
51053: LD_INT 4
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 4
51063: NEG
51064: PUSH
51065: LD_INT 5
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 3
51075: NEG
51076: PUSH
51077: LD_INT 4
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 3
51087: NEG
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 4
51099: NEG
51100: PUSH
51101: LD_INT 3
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 5
51111: NEG
51112: PUSH
51113: LD_INT 4
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 5
51123: NEG
51124: PUSH
51125: LD_INT 5
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 3
51135: NEG
51136: PUSH
51137: LD_INT 5
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 5
51147: NEG
51148: PUSH
51149: LD_INT 3
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 4
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 3
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: LD_INT 3
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 4
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 2
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 4
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 4
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 4
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 5
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 5
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 4
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 3
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 3
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 5
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51399: LD_ADDR_VAR 0 32
51403: PUSH
51404: LD_INT 4
51406: NEG
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 4
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 3
51429: NEG
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 4
51451: NEG
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 5
51462: NEG
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 5
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 5
51485: NEG
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 3
51520: NEG
51521: PUSH
51522: LD_INT 4
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: LD_INT 3
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: NEG
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 4
51568: NEG
51569: PUSH
51570: LD_INT 3
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 4
51580: NEG
51581: PUSH
51582: LD_INT 4
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: LD_INT 4
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 4
51604: NEG
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 4
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 5
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 4
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 3
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 4
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 5
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 3
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 5
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 4
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 4
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 4
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 4
51811: PUSH
51812: LD_INT 4
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 4
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 5
51831: PUSH
51832: LD_INT 4
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 5
51841: PUSH
51842: LD_INT 5
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 4
51851: PUSH
51852: LD_INT 5
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: LD_INT 4
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 3
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 5
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 5
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51946: LD_ADDR_VAR 0 33
51950: PUSH
51951: LD_INT 4
51953: NEG
51954: PUSH
51955: LD_INT 4
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 4
51965: NEG
51966: PUSH
51967: LD_INT 5
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 3
51977: NEG
51978: PUSH
51979: LD_INT 4
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: NEG
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 4
52001: NEG
52002: PUSH
52003: LD_INT 3
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 5
52013: NEG
52014: PUSH
52015: LD_INT 4
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 5
52025: NEG
52026: PUSH
52027: LD_INT 5
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: LD_INT 5
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 5
52049: NEG
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: LD_INT 4
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 3
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 4
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: LD_INT 4
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 4
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 4
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 5
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 5
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 4
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 3
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 5
52246: PUSH
52247: LD_INT 2
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 3
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 4
52276: PUSH
52277: LD_INT 3
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 4
52286: PUSH
52287: LD_INT 4
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: LD_INT 4
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 3
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 4
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 4
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 4
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 4
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 5
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 5
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: LD_INT 4
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 5
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: LD_INT 3
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52484: LD_ADDR_VAR 0 34
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 4
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 5
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 4
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 3
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 3
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 4
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 5
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 3
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 5
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 3
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 4
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 4
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 4
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 4
52686: PUSH
52687: LD_INT 4
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 4
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 5
52706: PUSH
52707: LD_INT 4
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 5
52716: PUSH
52717: LD_INT 5
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 4
52726: PUSH
52727: LD_INT 5
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: LD_INT 4
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 5
52756: PUSH
52757: LD_INT 3
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: PUSH
52767: LD_INT 5
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 4
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 3
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 4
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 4
52869: NEG
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 4
52880: NEG
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: NEG
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 3
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 4
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 5
52925: NEG
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 5
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 5
52948: NEG
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 3
52960: NEG
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: ST_TO_ADDR
// end ; end ;
53016: GO 53019
53018: POP
// case btype of b_depot , b_warehouse :
53019: LD_VAR 0 1
53023: PUSH
53024: LD_INT 0
53026: DOUBLE
53027: EQUAL
53028: IFTRUE 53038
53030: LD_INT 1
53032: DOUBLE
53033: EQUAL
53034: IFTRUE 53038
53036: GO 53239
53038: POP
// case nation of nation_american :
53039: LD_VAR 0 5
53043: PUSH
53044: LD_INT 1
53046: DOUBLE
53047: EQUAL
53048: IFTRUE 53052
53050: GO 53108
53052: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53053: LD_ADDR_VAR 0 9
53057: PUSH
53058: LD_VAR 0 11
53062: PUSH
53063: LD_VAR 0 12
53067: PUSH
53068: LD_VAR 0 13
53072: PUSH
53073: LD_VAR 0 14
53077: PUSH
53078: LD_VAR 0 15
53082: PUSH
53083: LD_VAR 0 16
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: PUSH
53096: LD_VAR 0 4
53100: PUSH
53101: LD_INT 1
53103: PLUS
53104: ARRAY
53105: ST_TO_ADDR
53106: GO 53237
53108: LD_INT 2
53110: DOUBLE
53111: EQUAL
53112: IFTRUE 53116
53114: GO 53172
53116: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53117: LD_ADDR_VAR 0 9
53121: PUSH
53122: LD_VAR 0 17
53126: PUSH
53127: LD_VAR 0 18
53131: PUSH
53132: LD_VAR 0 19
53136: PUSH
53137: LD_VAR 0 20
53141: PUSH
53142: LD_VAR 0 21
53146: PUSH
53147: LD_VAR 0 22
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: PUSH
53160: LD_VAR 0 4
53164: PUSH
53165: LD_INT 1
53167: PLUS
53168: ARRAY
53169: ST_TO_ADDR
53170: GO 53237
53172: LD_INT 3
53174: DOUBLE
53175: EQUAL
53176: IFTRUE 53180
53178: GO 53236
53180: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53181: LD_ADDR_VAR 0 9
53185: PUSH
53186: LD_VAR 0 23
53190: PUSH
53191: LD_VAR 0 24
53195: PUSH
53196: LD_VAR 0 25
53200: PUSH
53201: LD_VAR 0 26
53205: PUSH
53206: LD_VAR 0 27
53210: PUSH
53211: LD_VAR 0 28
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: PUSH
53224: LD_VAR 0 4
53228: PUSH
53229: LD_INT 1
53231: PLUS
53232: ARRAY
53233: ST_TO_ADDR
53234: GO 53237
53236: POP
53237: GO 53792
53239: LD_INT 2
53241: DOUBLE
53242: EQUAL
53243: IFTRUE 53253
53245: LD_INT 3
53247: DOUBLE
53248: EQUAL
53249: IFTRUE 53253
53251: GO 53309
53253: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53254: LD_ADDR_VAR 0 9
53258: PUSH
53259: LD_VAR 0 29
53263: PUSH
53264: LD_VAR 0 30
53268: PUSH
53269: LD_VAR 0 31
53273: PUSH
53274: LD_VAR 0 32
53278: PUSH
53279: LD_VAR 0 33
53283: PUSH
53284: LD_VAR 0 34
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: PUSH
53297: LD_VAR 0 4
53301: PUSH
53302: LD_INT 1
53304: PLUS
53305: ARRAY
53306: ST_TO_ADDR
53307: GO 53792
53309: LD_INT 16
53311: DOUBLE
53312: EQUAL
53313: IFTRUE 53371
53315: LD_INT 17
53317: DOUBLE
53318: EQUAL
53319: IFTRUE 53371
53321: LD_INT 18
53323: DOUBLE
53324: EQUAL
53325: IFTRUE 53371
53327: LD_INT 19
53329: DOUBLE
53330: EQUAL
53331: IFTRUE 53371
53333: LD_INT 22
53335: DOUBLE
53336: EQUAL
53337: IFTRUE 53371
53339: LD_INT 20
53341: DOUBLE
53342: EQUAL
53343: IFTRUE 53371
53345: LD_INT 21
53347: DOUBLE
53348: EQUAL
53349: IFTRUE 53371
53351: LD_INT 23
53353: DOUBLE
53354: EQUAL
53355: IFTRUE 53371
53357: LD_INT 24
53359: DOUBLE
53360: EQUAL
53361: IFTRUE 53371
53363: LD_INT 25
53365: DOUBLE
53366: EQUAL
53367: IFTRUE 53371
53369: GO 53427
53371: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53372: LD_ADDR_VAR 0 9
53376: PUSH
53377: LD_VAR 0 35
53381: PUSH
53382: LD_VAR 0 36
53386: PUSH
53387: LD_VAR 0 37
53391: PUSH
53392: LD_VAR 0 38
53396: PUSH
53397: LD_VAR 0 39
53401: PUSH
53402: LD_VAR 0 40
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: PUSH
53415: LD_VAR 0 4
53419: PUSH
53420: LD_INT 1
53422: PLUS
53423: ARRAY
53424: ST_TO_ADDR
53425: GO 53792
53427: LD_INT 6
53429: DOUBLE
53430: EQUAL
53431: IFTRUE 53483
53433: LD_INT 7
53435: DOUBLE
53436: EQUAL
53437: IFTRUE 53483
53439: LD_INT 8
53441: DOUBLE
53442: EQUAL
53443: IFTRUE 53483
53445: LD_INT 13
53447: DOUBLE
53448: EQUAL
53449: IFTRUE 53483
53451: LD_INT 12
53453: DOUBLE
53454: EQUAL
53455: IFTRUE 53483
53457: LD_INT 15
53459: DOUBLE
53460: EQUAL
53461: IFTRUE 53483
53463: LD_INT 11
53465: DOUBLE
53466: EQUAL
53467: IFTRUE 53483
53469: LD_INT 14
53471: DOUBLE
53472: EQUAL
53473: IFTRUE 53483
53475: LD_INT 10
53477: DOUBLE
53478: EQUAL
53479: IFTRUE 53483
53481: GO 53539
53483: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53484: LD_ADDR_VAR 0 9
53488: PUSH
53489: LD_VAR 0 41
53493: PUSH
53494: LD_VAR 0 42
53498: PUSH
53499: LD_VAR 0 43
53503: PUSH
53504: LD_VAR 0 44
53508: PUSH
53509: LD_VAR 0 45
53513: PUSH
53514: LD_VAR 0 46
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: PUSH
53527: LD_VAR 0 4
53531: PUSH
53532: LD_INT 1
53534: PLUS
53535: ARRAY
53536: ST_TO_ADDR
53537: GO 53792
53539: LD_INT 36
53541: DOUBLE
53542: EQUAL
53543: IFTRUE 53547
53545: GO 53603
53547: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53548: LD_ADDR_VAR 0 9
53552: PUSH
53553: LD_VAR 0 47
53557: PUSH
53558: LD_VAR 0 48
53562: PUSH
53563: LD_VAR 0 49
53567: PUSH
53568: LD_VAR 0 50
53572: PUSH
53573: LD_VAR 0 51
53577: PUSH
53578: LD_VAR 0 52
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: PUSH
53591: LD_VAR 0 4
53595: PUSH
53596: LD_INT 1
53598: PLUS
53599: ARRAY
53600: ST_TO_ADDR
53601: GO 53792
53603: LD_INT 4
53605: DOUBLE
53606: EQUAL
53607: IFTRUE 53629
53609: LD_INT 5
53611: DOUBLE
53612: EQUAL
53613: IFTRUE 53629
53615: LD_INT 34
53617: DOUBLE
53618: EQUAL
53619: IFTRUE 53629
53621: LD_INT 37
53623: DOUBLE
53624: EQUAL
53625: IFTRUE 53629
53627: GO 53685
53629: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53630: LD_ADDR_VAR 0 9
53634: PUSH
53635: LD_VAR 0 53
53639: PUSH
53640: LD_VAR 0 54
53644: PUSH
53645: LD_VAR 0 55
53649: PUSH
53650: LD_VAR 0 56
53654: PUSH
53655: LD_VAR 0 57
53659: PUSH
53660: LD_VAR 0 58
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: PUSH
53673: LD_VAR 0 4
53677: PUSH
53678: LD_INT 1
53680: PLUS
53681: ARRAY
53682: ST_TO_ADDR
53683: GO 53792
53685: LD_INT 31
53687: DOUBLE
53688: EQUAL
53689: IFTRUE 53735
53691: LD_INT 32
53693: DOUBLE
53694: EQUAL
53695: IFTRUE 53735
53697: LD_INT 33
53699: DOUBLE
53700: EQUAL
53701: IFTRUE 53735
53703: LD_INT 27
53705: DOUBLE
53706: EQUAL
53707: IFTRUE 53735
53709: LD_INT 26
53711: DOUBLE
53712: EQUAL
53713: IFTRUE 53735
53715: LD_INT 28
53717: DOUBLE
53718: EQUAL
53719: IFTRUE 53735
53721: LD_INT 29
53723: DOUBLE
53724: EQUAL
53725: IFTRUE 53735
53727: LD_INT 30
53729: DOUBLE
53730: EQUAL
53731: IFTRUE 53735
53733: GO 53791
53735: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53736: LD_ADDR_VAR 0 9
53740: PUSH
53741: LD_VAR 0 59
53745: PUSH
53746: LD_VAR 0 60
53750: PUSH
53751: LD_VAR 0 61
53755: PUSH
53756: LD_VAR 0 62
53760: PUSH
53761: LD_VAR 0 63
53765: PUSH
53766: LD_VAR 0 64
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: PUSH
53779: LD_VAR 0 4
53783: PUSH
53784: LD_INT 1
53786: PLUS
53787: ARRAY
53788: ST_TO_ADDR
53789: GO 53792
53791: POP
// temp_list2 = [ ] ;
53792: LD_ADDR_VAR 0 10
53796: PUSH
53797: EMPTY
53798: ST_TO_ADDR
// for i in temp_list do
53799: LD_ADDR_VAR 0 8
53803: PUSH
53804: LD_VAR 0 9
53808: PUSH
53809: FOR_IN
53810: IFFALSE 53862
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53812: LD_ADDR_VAR 0 10
53816: PUSH
53817: LD_VAR 0 10
53821: PUSH
53822: LD_VAR 0 8
53826: PUSH
53827: LD_INT 1
53829: ARRAY
53830: PUSH
53831: LD_VAR 0 2
53835: PLUS
53836: PUSH
53837: LD_VAR 0 8
53841: PUSH
53842: LD_INT 2
53844: ARRAY
53845: PUSH
53846: LD_VAR 0 3
53850: PLUS
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: EMPTY
53857: LIST
53858: ADD
53859: ST_TO_ADDR
53860: GO 53809
53862: POP
53863: POP
// result = temp_list2 ;
53864: LD_ADDR_VAR 0 7
53868: PUSH
53869: LD_VAR 0 10
53873: ST_TO_ADDR
// end ;
53874: LD_VAR 0 7
53878: RET
// export function EnemyInRange ( unit , dist ) ; begin
53879: LD_INT 0
53881: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53882: LD_ADDR_VAR 0 3
53886: PUSH
53887: LD_VAR 0 1
53891: PPUSH
53892: CALL_OW 255
53896: PPUSH
53897: LD_VAR 0 1
53901: PPUSH
53902: CALL_OW 250
53906: PPUSH
53907: LD_VAR 0 1
53911: PPUSH
53912: CALL_OW 251
53916: PPUSH
53917: LD_VAR 0 2
53921: PPUSH
53922: CALL 27281 0 4
53926: PUSH
53927: LD_INT 4
53929: ARRAY
53930: ST_TO_ADDR
// end ;
53931: LD_VAR 0 3
53935: RET
// export function PlayerSeeMe ( unit ) ; begin
53936: LD_INT 0
53938: PPUSH
// result := See ( your_side , unit ) ;
53939: LD_ADDR_VAR 0 2
53943: PUSH
53944: LD_OWVAR 2
53948: PPUSH
53949: LD_VAR 0 1
53953: PPUSH
53954: CALL_OW 292
53958: ST_TO_ADDR
// end ;
53959: LD_VAR 0 2
53963: RET
// export function ReverseDir ( unit ) ; begin
53964: LD_INT 0
53966: PPUSH
// if not unit then
53967: LD_VAR 0 1
53971: NOT
53972: IFFALSE 53976
// exit ;
53974: GO 53999
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53976: LD_ADDR_VAR 0 2
53980: PUSH
53981: LD_VAR 0 1
53985: PPUSH
53986: CALL_OW 254
53990: PUSH
53991: LD_INT 3
53993: PLUS
53994: PUSH
53995: LD_INT 6
53997: MOD
53998: ST_TO_ADDR
// end ;
53999: LD_VAR 0 2
54003: RET
// export function ReverseArray ( array ) ; var i ; begin
54004: LD_INT 0
54006: PPUSH
54007: PPUSH
// if not array then
54008: LD_VAR 0 1
54012: NOT
54013: IFFALSE 54017
// exit ;
54015: GO 54072
// result := [ ] ;
54017: LD_ADDR_VAR 0 2
54021: PUSH
54022: EMPTY
54023: ST_TO_ADDR
// for i := array downto 1 do
54024: LD_ADDR_VAR 0 3
54028: PUSH
54029: DOUBLE
54030: LD_VAR 0 1
54034: INC
54035: ST_TO_ADDR
54036: LD_INT 1
54038: PUSH
54039: FOR_DOWNTO
54040: IFFALSE 54070
// result := Join ( result , array [ i ] ) ;
54042: LD_ADDR_VAR 0 2
54046: PUSH
54047: LD_VAR 0 2
54051: PPUSH
54052: LD_VAR 0 1
54056: PUSH
54057: LD_VAR 0 3
54061: ARRAY
54062: PPUSH
54063: CALL 58716 0 2
54067: ST_TO_ADDR
54068: GO 54039
54070: POP
54071: POP
// end ;
54072: LD_VAR 0 2
54076: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54077: LD_INT 0
54079: PPUSH
54080: PPUSH
54081: PPUSH
54082: PPUSH
54083: PPUSH
54084: PPUSH
// if not unit or not hexes then
54085: LD_VAR 0 1
54089: NOT
54090: PUSH
54091: LD_VAR 0 2
54095: NOT
54096: OR
54097: IFFALSE 54101
// exit ;
54099: GO 54224
// dist := 9999 ;
54101: LD_ADDR_VAR 0 5
54105: PUSH
54106: LD_INT 9999
54108: ST_TO_ADDR
// for i = 1 to hexes do
54109: LD_ADDR_VAR 0 4
54113: PUSH
54114: DOUBLE
54115: LD_INT 1
54117: DEC
54118: ST_TO_ADDR
54119: LD_VAR 0 2
54123: PUSH
54124: FOR_TO
54125: IFFALSE 54212
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54127: LD_ADDR_VAR 0 6
54131: PUSH
54132: LD_VAR 0 1
54136: PPUSH
54137: LD_VAR 0 2
54141: PUSH
54142: LD_VAR 0 4
54146: ARRAY
54147: PUSH
54148: LD_INT 1
54150: ARRAY
54151: PPUSH
54152: LD_VAR 0 2
54156: PUSH
54157: LD_VAR 0 4
54161: ARRAY
54162: PUSH
54163: LD_INT 2
54165: ARRAY
54166: PPUSH
54167: CALL_OW 297
54171: ST_TO_ADDR
// if tdist < dist then
54172: LD_VAR 0 6
54176: PUSH
54177: LD_VAR 0 5
54181: LESS
54182: IFFALSE 54210
// begin hex := hexes [ i ] ;
54184: LD_ADDR_VAR 0 8
54188: PUSH
54189: LD_VAR 0 2
54193: PUSH
54194: LD_VAR 0 4
54198: ARRAY
54199: ST_TO_ADDR
// dist := tdist ;
54200: LD_ADDR_VAR 0 5
54204: PUSH
54205: LD_VAR 0 6
54209: ST_TO_ADDR
// end ; end ;
54210: GO 54124
54212: POP
54213: POP
// result := hex ;
54214: LD_ADDR_VAR 0 3
54218: PUSH
54219: LD_VAR 0 8
54223: ST_TO_ADDR
// end ;
54224: LD_VAR 0 3
54228: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54229: LD_INT 0
54231: PPUSH
54232: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54233: LD_VAR 0 1
54237: NOT
54238: PUSH
54239: LD_VAR 0 1
54243: PUSH
54244: LD_INT 21
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 23
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PPUSH
54268: CALL_OW 69
54272: IN
54273: NOT
54274: OR
54275: IFFALSE 54279
// exit ;
54277: GO 54326
// for i = 1 to 3 do
54279: LD_ADDR_VAR 0 3
54283: PUSH
54284: DOUBLE
54285: LD_INT 1
54287: DEC
54288: ST_TO_ADDR
54289: LD_INT 3
54291: PUSH
54292: FOR_TO
54293: IFFALSE 54324
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54295: LD_VAR 0 1
54299: PPUSH
54300: CALL_OW 250
54304: PPUSH
54305: LD_VAR 0 1
54309: PPUSH
54310: CALL_OW 251
54314: PPUSH
54315: LD_INT 1
54317: PPUSH
54318: CALL_OW 453
54322: GO 54292
54324: POP
54325: POP
// end ;
54326: LD_VAR 0 2
54330: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54331: LD_INT 0
54333: PPUSH
54334: PPUSH
54335: PPUSH
54336: PPUSH
54337: PPUSH
54338: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54339: LD_VAR 0 1
54343: NOT
54344: PUSH
54345: LD_VAR 0 2
54349: NOT
54350: OR
54351: PUSH
54352: LD_VAR 0 1
54356: PPUSH
54357: CALL_OW 314
54361: OR
54362: IFFALSE 54366
// exit ;
54364: GO 54833
// if GetLives ( i ) < 250 then
54366: LD_VAR 0 4
54370: PPUSH
54371: CALL_OW 256
54375: PUSH
54376: LD_INT 250
54378: LESS
54379: IFFALSE 54392
// begin ComAutodestruct ( i ) ;
54381: LD_VAR 0 4
54385: PPUSH
54386: CALL 54229 0 1
// exit ;
54390: GO 54833
// end ; x := GetX ( enemy_unit ) ;
54392: LD_ADDR_VAR 0 7
54396: PUSH
54397: LD_VAR 0 2
54401: PPUSH
54402: CALL_OW 250
54406: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54407: LD_ADDR_VAR 0 8
54411: PUSH
54412: LD_VAR 0 2
54416: PPUSH
54417: CALL_OW 251
54421: ST_TO_ADDR
// if not x or not y then
54422: LD_VAR 0 7
54426: NOT
54427: PUSH
54428: LD_VAR 0 8
54432: NOT
54433: OR
54434: IFFALSE 54438
// exit ;
54436: GO 54833
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54438: LD_ADDR_VAR 0 6
54442: PUSH
54443: LD_VAR 0 7
54447: PPUSH
54448: LD_INT 0
54450: PPUSH
54451: LD_INT 4
54453: PPUSH
54454: CALL_OW 272
54458: PUSH
54459: LD_VAR 0 8
54463: PPUSH
54464: LD_INT 0
54466: PPUSH
54467: LD_INT 4
54469: PPUSH
54470: CALL_OW 273
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_VAR 0 7
54483: PPUSH
54484: LD_INT 1
54486: PPUSH
54487: LD_INT 4
54489: PPUSH
54490: CALL_OW 272
54494: PUSH
54495: LD_VAR 0 8
54499: PPUSH
54500: LD_INT 1
54502: PPUSH
54503: LD_INT 4
54505: PPUSH
54506: CALL_OW 273
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_VAR 0 7
54519: PPUSH
54520: LD_INT 2
54522: PPUSH
54523: LD_INT 4
54525: PPUSH
54526: CALL_OW 272
54530: PUSH
54531: LD_VAR 0 8
54535: PPUSH
54536: LD_INT 2
54538: PPUSH
54539: LD_INT 4
54541: PPUSH
54542: CALL_OW 273
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_VAR 0 7
54555: PPUSH
54556: LD_INT 3
54558: PPUSH
54559: LD_INT 4
54561: PPUSH
54562: CALL_OW 272
54566: PUSH
54567: LD_VAR 0 8
54571: PPUSH
54572: LD_INT 3
54574: PPUSH
54575: LD_INT 4
54577: PPUSH
54578: CALL_OW 273
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_VAR 0 7
54591: PPUSH
54592: LD_INT 4
54594: PPUSH
54595: LD_INT 4
54597: PPUSH
54598: CALL_OW 272
54602: PUSH
54603: LD_VAR 0 8
54607: PPUSH
54608: LD_INT 4
54610: PPUSH
54611: LD_INT 4
54613: PPUSH
54614: CALL_OW 273
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_VAR 0 7
54627: PPUSH
54628: LD_INT 5
54630: PPUSH
54631: LD_INT 4
54633: PPUSH
54634: CALL_OW 272
54638: PUSH
54639: LD_VAR 0 8
54643: PPUSH
54644: LD_INT 5
54646: PPUSH
54647: LD_INT 4
54649: PPUSH
54650: CALL_OW 273
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: ST_TO_ADDR
// for i = tmp downto 1 do
54667: LD_ADDR_VAR 0 4
54671: PUSH
54672: DOUBLE
54673: LD_VAR 0 6
54677: INC
54678: ST_TO_ADDR
54679: LD_INT 1
54681: PUSH
54682: FOR_DOWNTO
54683: IFFALSE 54784
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54685: LD_VAR 0 6
54689: PUSH
54690: LD_VAR 0 4
54694: ARRAY
54695: PUSH
54696: LD_INT 1
54698: ARRAY
54699: PPUSH
54700: LD_VAR 0 6
54704: PUSH
54705: LD_VAR 0 4
54709: ARRAY
54710: PUSH
54711: LD_INT 2
54713: ARRAY
54714: PPUSH
54715: CALL_OW 488
54719: NOT
54720: PUSH
54721: LD_VAR 0 6
54725: PUSH
54726: LD_VAR 0 4
54730: ARRAY
54731: PUSH
54732: LD_INT 1
54734: ARRAY
54735: PPUSH
54736: LD_VAR 0 6
54740: PUSH
54741: LD_VAR 0 4
54745: ARRAY
54746: PUSH
54747: LD_INT 2
54749: ARRAY
54750: PPUSH
54751: CALL_OW 428
54755: PUSH
54756: LD_INT 0
54758: NONEQUAL
54759: OR
54760: IFFALSE 54782
// tmp := Delete ( tmp , i ) ;
54762: LD_ADDR_VAR 0 6
54766: PUSH
54767: LD_VAR 0 6
54771: PPUSH
54772: LD_VAR 0 4
54776: PPUSH
54777: CALL_OW 3
54781: ST_TO_ADDR
54782: GO 54682
54784: POP
54785: POP
// j := GetClosestHex ( unit , tmp ) ;
54786: LD_ADDR_VAR 0 5
54790: PUSH
54791: LD_VAR 0 1
54795: PPUSH
54796: LD_VAR 0 6
54800: PPUSH
54801: CALL 54077 0 2
54805: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54806: LD_VAR 0 1
54810: PPUSH
54811: LD_VAR 0 5
54815: PUSH
54816: LD_INT 1
54818: ARRAY
54819: PPUSH
54820: LD_VAR 0 5
54824: PUSH
54825: LD_INT 2
54827: ARRAY
54828: PPUSH
54829: CALL_OW 111
// end ;
54833: LD_VAR 0 3
54837: RET
// export function PrepareApemanSoldier ( ) ; begin
54838: LD_INT 0
54840: PPUSH
// uc_nation := 0 ;
54841: LD_ADDR_OWVAR 21
54845: PUSH
54846: LD_INT 0
54848: ST_TO_ADDR
// hc_sex := sex_male ;
54849: LD_ADDR_OWVAR 27
54853: PUSH
54854: LD_INT 1
54856: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54857: LD_ADDR_OWVAR 28
54861: PUSH
54862: LD_INT 15
54864: ST_TO_ADDR
// hc_gallery :=  ;
54865: LD_ADDR_OWVAR 33
54869: PUSH
54870: LD_STRING 
54872: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54873: LD_ADDR_OWVAR 31
54877: PUSH
54878: LD_INT 0
54880: PPUSH
54881: LD_INT 3
54883: PPUSH
54884: CALL_OW 12
54888: PUSH
54889: LD_INT 0
54891: PPUSH
54892: LD_INT 3
54894: PPUSH
54895: CALL_OW 12
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// end ;
54912: LD_VAR 0 1
54916: RET
// export function PrepareApemanEngineer ( ) ; begin
54917: LD_INT 0
54919: PPUSH
// uc_nation := 0 ;
54920: LD_ADDR_OWVAR 21
54924: PUSH
54925: LD_INT 0
54927: ST_TO_ADDR
// hc_sex := sex_male ;
54928: LD_ADDR_OWVAR 27
54932: PUSH
54933: LD_INT 1
54935: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54936: LD_ADDR_OWVAR 28
54940: PUSH
54941: LD_INT 16
54943: ST_TO_ADDR
// hc_gallery :=  ;
54944: LD_ADDR_OWVAR 33
54948: PUSH
54949: LD_STRING 
54951: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54952: LD_ADDR_OWVAR 31
54956: PUSH
54957: LD_INT 0
54959: PPUSH
54960: LD_INT 3
54962: PPUSH
54963: CALL_OW 12
54967: PUSH
54968: LD_INT 0
54970: PPUSH
54971: LD_INT 3
54973: PPUSH
54974: CALL_OW 12
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// end ;
54991: LD_VAR 0 1
54995: RET
// export function PrepareApeman ( agressivity ) ; begin
54996: LD_INT 0
54998: PPUSH
// uc_side := 0 ;
54999: LD_ADDR_OWVAR 20
55003: PUSH
55004: LD_INT 0
55006: ST_TO_ADDR
// uc_nation := 0 ;
55007: LD_ADDR_OWVAR 21
55011: PUSH
55012: LD_INT 0
55014: ST_TO_ADDR
// hc_sex := sex_male ;
55015: LD_ADDR_OWVAR 27
55019: PUSH
55020: LD_INT 1
55022: ST_TO_ADDR
// hc_class := class_apeman ;
55023: LD_ADDR_OWVAR 28
55027: PUSH
55028: LD_INT 12
55030: ST_TO_ADDR
// hc_gallery :=  ;
55031: LD_ADDR_OWVAR 33
55035: PUSH
55036: LD_STRING 
55038: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55039: LD_ADDR_OWVAR 35
55043: PUSH
55044: LD_VAR 0 1
55048: NEG
55049: PPUSH
55050: LD_VAR 0 1
55054: PPUSH
55055: CALL_OW 12
55059: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55060: LD_ADDR_OWVAR 31
55064: PUSH
55065: LD_INT 0
55067: PPUSH
55068: LD_INT 3
55070: PPUSH
55071: CALL_OW 12
55075: PUSH
55076: LD_INT 0
55078: PPUSH
55079: LD_INT 3
55081: PPUSH
55082: CALL_OW 12
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: ST_TO_ADDR
// end ;
55099: LD_VAR 0 2
55103: RET
// export function PrepareTiger ( agressivity ) ; begin
55104: LD_INT 0
55106: PPUSH
// uc_side := 0 ;
55107: LD_ADDR_OWVAR 20
55111: PUSH
55112: LD_INT 0
55114: ST_TO_ADDR
// uc_nation := 0 ;
55115: LD_ADDR_OWVAR 21
55119: PUSH
55120: LD_INT 0
55122: ST_TO_ADDR
// hc_class := class_tiger ;
55123: LD_ADDR_OWVAR 28
55127: PUSH
55128: LD_INT 14
55130: ST_TO_ADDR
// hc_gallery :=  ;
55131: LD_ADDR_OWVAR 33
55135: PUSH
55136: LD_STRING 
55138: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55139: LD_ADDR_OWVAR 35
55143: PUSH
55144: LD_VAR 0 1
55148: NEG
55149: PPUSH
55150: LD_VAR 0 1
55154: PPUSH
55155: CALL_OW 12
55159: ST_TO_ADDR
// end ;
55160: LD_VAR 0 2
55164: RET
// export function PrepareEnchidna ( ) ; begin
55165: LD_INT 0
55167: PPUSH
// uc_side := 0 ;
55168: LD_ADDR_OWVAR 20
55172: PUSH
55173: LD_INT 0
55175: ST_TO_ADDR
// uc_nation := 0 ;
55176: LD_ADDR_OWVAR 21
55180: PUSH
55181: LD_INT 0
55183: ST_TO_ADDR
// hc_class := class_baggie ;
55184: LD_ADDR_OWVAR 28
55188: PUSH
55189: LD_INT 13
55191: ST_TO_ADDR
// hc_gallery :=  ;
55192: LD_ADDR_OWVAR 33
55196: PUSH
55197: LD_STRING 
55199: ST_TO_ADDR
// end ;
55200: LD_VAR 0 1
55204: RET
// export function PrepareFrog ( ) ; begin
55205: LD_INT 0
55207: PPUSH
// uc_side := 0 ;
55208: LD_ADDR_OWVAR 20
55212: PUSH
55213: LD_INT 0
55215: ST_TO_ADDR
// uc_nation := 0 ;
55216: LD_ADDR_OWVAR 21
55220: PUSH
55221: LD_INT 0
55223: ST_TO_ADDR
// hc_class := class_frog ;
55224: LD_ADDR_OWVAR 28
55228: PUSH
55229: LD_INT 19
55231: ST_TO_ADDR
// hc_gallery :=  ;
55232: LD_ADDR_OWVAR 33
55236: PUSH
55237: LD_STRING 
55239: ST_TO_ADDR
// end ;
55240: LD_VAR 0 1
55244: RET
// export function PrepareFish ( ) ; begin
55245: LD_INT 0
55247: PPUSH
// uc_side := 0 ;
55248: LD_ADDR_OWVAR 20
55252: PUSH
55253: LD_INT 0
55255: ST_TO_ADDR
// uc_nation := 0 ;
55256: LD_ADDR_OWVAR 21
55260: PUSH
55261: LD_INT 0
55263: ST_TO_ADDR
// hc_class := class_fish ;
55264: LD_ADDR_OWVAR 28
55268: PUSH
55269: LD_INT 20
55271: ST_TO_ADDR
// hc_gallery :=  ;
55272: LD_ADDR_OWVAR 33
55276: PUSH
55277: LD_STRING 
55279: ST_TO_ADDR
// end ;
55280: LD_VAR 0 1
55284: RET
// export function PrepareBird ( ) ; begin
55285: LD_INT 0
55287: PPUSH
// uc_side := 0 ;
55288: LD_ADDR_OWVAR 20
55292: PUSH
55293: LD_INT 0
55295: ST_TO_ADDR
// uc_nation := 0 ;
55296: LD_ADDR_OWVAR 21
55300: PUSH
55301: LD_INT 0
55303: ST_TO_ADDR
// hc_class := class_phororhacos ;
55304: LD_ADDR_OWVAR 28
55308: PUSH
55309: LD_INT 18
55311: ST_TO_ADDR
// hc_gallery :=  ;
55312: LD_ADDR_OWVAR 33
55316: PUSH
55317: LD_STRING 
55319: ST_TO_ADDR
// end ;
55320: LD_VAR 0 1
55324: RET
// export function PrepareHorse ( ) ; begin
55325: LD_INT 0
55327: PPUSH
// uc_side := 0 ;
55328: LD_ADDR_OWVAR 20
55332: PUSH
55333: LD_INT 0
55335: ST_TO_ADDR
// uc_nation := 0 ;
55336: LD_ADDR_OWVAR 21
55340: PUSH
55341: LD_INT 0
55343: ST_TO_ADDR
// hc_class := class_horse ;
55344: LD_ADDR_OWVAR 28
55348: PUSH
55349: LD_INT 21
55351: ST_TO_ADDR
// hc_gallery :=  ;
55352: LD_ADDR_OWVAR 33
55356: PUSH
55357: LD_STRING 
55359: ST_TO_ADDR
// end ;
55360: LD_VAR 0 1
55364: RET
// export function PrepareMastodont ( ) ; begin
55365: LD_INT 0
55367: PPUSH
// uc_side := 0 ;
55368: LD_ADDR_OWVAR 20
55372: PUSH
55373: LD_INT 0
55375: ST_TO_ADDR
// uc_nation := 0 ;
55376: LD_ADDR_OWVAR 21
55380: PUSH
55381: LD_INT 0
55383: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55384: LD_ADDR_OWVAR 37
55388: PUSH
55389: LD_INT 31
55391: ST_TO_ADDR
// vc_control := control_rider ;
55392: LD_ADDR_OWVAR 38
55396: PUSH
55397: LD_INT 4
55399: ST_TO_ADDR
// end ;
55400: LD_VAR 0 1
55404: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55405: LD_INT 0
55407: PPUSH
55408: PPUSH
55409: PPUSH
// uc_side = 0 ;
55410: LD_ADDR_OWVAR 20
55414: PUSH
55415: LD_INT 0
55417: ST_TO_ADDR
// uc_nation = 0 ;
55418: LD_ADDR_OWVAR 21
55422: PUSH
55423: LD_INT 0
55425: ST_TO_ADDR
// InitHc_All ( ) ;
55426: CALL_OW 584
// InitVc ;
55430: CALL_OW 20
// if mastodonts then
55434: LD_VAR 0 6
55438: IFFALSE 55505
// for i = 1 to mastodonts do
55440: LD_ADDR_VAR 0 11
55444: PUSH
55445: DOUBLE
55446: LD_INT 1
55448: DEC
55449: ST_TO_ADDR
55450: LD_VAR 0 6
55454: PUSH
55455: FOR_TO
55456: IFFALSE 55503
// begin vc_chassis := 31 ;
55458: LD_ADDR_OWVAR 37
55462: PUSH
55463: LD_INT 31
55465: ST_TO_ADDR
// vc_control := control_rider ;
55466: LD_ADDR_OWVAR 38
55470: PUSH
55471: LD_INT 4
55473: ST_TO_ADDR
// animal := CreateVehicle ;
55474: LD_ADDR_VAR 0 12
55478: PUSH
55479: CALL_OW 45
55483: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55484: LD_VAR 0 12
55488: PPUSH
55489: LD_VAR 0 8
55493: PPUSH
55494: LD_INT 0
55496: PPUSH
55497: CALL 57633 0 3
// end ;
55501: GO 55455
55503: POP
55504: POP
// if horses then
55505: LD_VAR 0 5
55509: IFFALSE 55576
// for i = 1 to horses do
55511: LD_ADDR_VAR 0 11
55515: PUSH
55516: DOUBLE
55517: LD_INT 1
55519: DEC
55520: ST_TO_ADDR
55521: LD_VAR 0 5
55525: PUSH
55526: FOR_TO
55527: IFFALSE 55574
// begin hc_class := 21 ;
55529: LD_ADDR_OWVAR 28
55533: PUSH
55534: LD_INT 21
55536: ST_TO_ADDR
// hc_gallery :=  ;
55537: LD_ADDR_OWVAR 33
55541: PUSH
55542: LD_STRING 
55544: ST_TO_ADDR
// animal := CreateHuman ;
55545: LD_ADDR_VAR 0 12
55549: PUSH
55550: CALL_OW 44
55554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55555: LD_VAR 0 12
55559: PPUSH
55560: LD_VAR 0 8
55564: PPUSH
55565: LD_INT 0
55567: PPUSH
55568: CALL 57633 0 3
// end ;
55572: GO 55526
55574: POP
55575: POP
// if birds then
55576: LD_VAR 0 1
55580: IFFALSE 55647
// for i = 1 to birds do
55582: LD_ADDR_VAR 0 11
55586: PUSH
55587: DOUBLE
55588: LD_INT 1
55590: DEC
55591: ST_TO_ADDR
55592: LD_VAR 0 1
55596: PUSH
55597: FOR_TO
55598: IFFALSE 55645
// begin hc_class = 18 ;
55600: LD_ADDR_OWVAR 28
55604: PUSH
55605: LD_INT 18
55607: ST_TO_ADDR
// hc_gallery =  ;
55608: LD_ADDR_OWVAR 33
55612: PUSH
55613: LD_STRING 
55615: ST_TO_ADDR
// animal := CreateHuman ;
55616: LD_ADDR_VAR 0 12
55620: PUSH
55621: CALL_OW 44
55625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55626: LD_VAR 0 12
55630: PPUSH
55631: LD_VAR 0 8
55635: PPUSH
55636: LD_INT 0
55638: PPUSH
55639: CALL 57633 0 3
// end ;
55643: GO 55597
55645: POP
55646: POP
// if tigers then
55647: LD_VAR 0 2
55651: IFFALSE 55735
// for i = 1 to tigers do
55653: LD_ADDR_VAR 0 11
55657: PUSH
55658: DOUBLE
55659: LD_INT 1
55661: DEC
55662: ST_TO_ADDR
55663: LD_VAR 0 2
55667: PUSH
55668: FOR_TO
55669: IFFALSE 55733
// begin hc_class = class_tiger ;
55671: LD_ADDR_OWVAR 28
55675: PUSH
55676: LD_INT 14
55678: ST_TO_ADDR
// hc_gallery =  ;
55679: LD_ADDR_OWVAR 33
55683: PUSH
55684: LD_STRING 
55686: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55687: LD_ADDR_OWVAR 35
55691: PUSH
55692: LD_INT 7
55694: NEG
55695: PPUSH
55696: LD_INT 7
55698: PPUSH
55699: CALL_OW 12
55703: ST_TO_ADDR
// animal := CreateHuman ;
55704: LD_ADDR_VAR 0 12
55708: PUSH
55709: CALL_OW 44
55713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55714: LD_VAR 0 12
55718: PPUSH
55719: LD_VAR 0 8
55723: PPUSH
55724: LD_INT 0
55726: PPUSH
55727: CALL 57633 0 3
// end ;
55731: GO 55668
55733: POP
55734: POP
// if apemans then
55735: LD_VAR 0 3
55739: IFFALSE 55862
// for i = 1 to apemans do
55741: LD_ADDR_VAR 0 11
55745: PUSH
55746: DOUBLE
55747: LD_INT 1
55749: DEC
55750: ST_TO_ADDR
55751: LD_VAR 0 3
55755: PUSH
55756: FOR_TO
55757: IFFALSE 55860
// begin hc_class = class_apeman ;
55759: LD_ADDR_OWVAR 28
55763: PUSH
55764: LD_INT 12
55766: ST_TO_ADDR
// hc_gallery =  ;
55767: LD_ADDR_OWVAR 33
55771: PUSH
55772: LD_STRING 
55774: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55775: LD_ADDR_OWVAR 35
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PPUSH
55784: LD_INT 2
55786: PPUSH
55787: CALL_OW 12
55791: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55792: LD_ADDR_OWVAR 31
55796: PUSH
55797: LD_INT 1
55799: PPUSH
55800: LD_INT 3
55802: PPUSH
55803: CALL_OW 12
55807: PUSH
55808: LD_INT 1
55810: PPUSH
55811: LD_INT 3
55813: PPUSH
55814: CALL_OW 12
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// animal := CreateHuman ;
55831: LD_ADDR_VAR 0 12
55835: PUSH
55836: CALL_OW 44
55840: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55841: LD_VAR 0 12
55845: PPUSH
55846: LD_VAR 0 8
55850: PPUSH
55851: LD_INT 0
55853: PPUSH
55854: CALL 57633 0 3
// end ;
55858: GO 55756
55860: POP
55861: POP
// if enchidnas then
55862: LD_VAR 0 4
55866: IFFALSE 55933
// for i = 1 to enchidnas do
55868: LD_ADDR_VAR 0 11
55872: PUSH
55873: DOUBLE
55874: LD_INT 1
55876: DEC
55877: ST_TO_ADDR
55878: LD_VAR 0 4
55882: PUSH
55883: FOR_TO
55884: IFFALSE 55931
// begin hc_class = 13 ;
55886: LD_ADDR_OWVAR 28
55890: PUSH
55891: LD_INT 13
55893: ST_TO_ADDR
// hc_gallery =  ;
55894: LD_ADDR_OWVAR 33
55898: PUSH
55899: LD_STRING 
55901: ST_TO_ADDR
// animal := CreateHuman ;
55902: LD_ADDR_VAR 0 12
55906: PUSH
55907: CALL_OW 44
55911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55912: LD_VAR 0 12
55916: PPUSH
55917: LD_VAR 0 8
55921: PPUSH
55922: LD_INT 0
55924: PPUSH
55925: CALL 57633 0 3
// end ;
55929: GO 55883
55931: POP
55932: POP
// if fishes then
55933: LD_VAR 0 7
55937: IFFALSE 56004
// for i = 1 to fishes do
55939: LD_ADDR_VAR 0 11
55943: PUSH
55944: DOUBLE
55945: LD_INT 1
55947: DEC
55948: ST_TO_ADDR
55949: LD_VAR 0 7
55953: PUSH
55954: FOR_TO
55955: IFFALSE 56002
// begin hc_class = 20 ;
55957: LD_ADDR_OWVAR 28
55961: PUSH
55962: LD_INT 20
55964: ST_TO_ADDR
// hc_gallery =  ;
55965: LD_ADDR_OWVAR 33
55969: PUSH
55970: LD_STRING 
55972: ST_TO_ADDR
// animal := CreateHuman ;
55973: LD_ADDR_VAR 0 12
55977: PUSH
55978: CALL_OW 44
55982: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55983: LD_VAR 0 12
55987: PPUSH
55988: LD_VAR 0 9
55992: PPUSH
55993: LD_INT 0
55995: PPUSH
55996: CALL 57633 0 3
// end ;
56000: GO 55954
56002: POP
56003: POP
// end ;
56004: LD_VAR 0 10
56008: RET
// export function WantHeal ( sci , unit ) ; begin
56009: LD_INT 0
56011: PPUSH
// if GetTaskList ( sci ) > 0 then
56012: LD_VAR 0 1
56016: PPUSH
56017: CALL_OW 437
56021: PUSH
56022: LD_INT 0
56024: GREATER
56025: IFFALSE 56095
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56027: LD_VAR 0 1
56031: PPUSH
56032: CALL_OW 437
56036: PUSH
56037: LD_INT 1
56039: ARRAY
56040: PUSH
56041: LD_INT 1
56043: ARRAY
56044: PUSH
56045: LD_STRING l
56047: EQUAL
56048: PUSH
56049: LD_VAR 0 1
56053: PPUSH
56054: CALL_OW 437
56058: PUSH
56059: LD_INT 1
56061: ARRAY
56062: PUSH
56063: LD_INT 4
56065: ARRAY
56066: PUSH
56067: LD_VAR 0 2
56071: EQUAL
56072: AND
56073: IFFALSE 56085
// result := true else
56075: LD_ADDR_VAR 0 3
56079: PUSH
56080: LD_INT 1
56082: ST_TO_ADDR
56083: GO 56093
// result := false ;
56085: LD_ADDR_VAR 0 3
56089: PUSH
56090: LD_INT 0
56092: ST_TO_ADDR
// end else
56093: GO 56103
// result := false ;
56095: LD_ADDR_VAR 0 3
56099: PUSH
56100: LD_INT 0
56102: ST_TO_ADDR
// end ;
56103: LD_VAR 0 3
56107: RET
// export function HealTarget ( sci ) ; begin
56108: LD_INT 0
56110: PPUSH
// if not sci then
56111: LD_VAR 0 1
56115: NOT
56116: IFFALSE 56120
// exit ;
56118: GO 56185
// result := 0 ;
56120: LD_ADDR_VAR 0 2
56124: PUSH
56125: LD_INT 0
56127: ST_TO_ADDR
// if GetTaskList ( sci ) then
56128: LD_VAR 0 1
56132: PPUSH
56133: CALL_OW 437
56137: IFFALSE 56185
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56139: LD_VAR 0 1
56143: PPUSH
56144: CALL_OW 437
56148: PUSH
56149: LD_INT 1
56151: ARRAY
56152: PUSH
56153: LD_INT 1
56155: ARRAY
56156: PUSH
56157: LD_STRING l
56159: EQUAL
56160: IFFALSE 56185
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56162: LD_ADDR_VAR 0 2
56166: PUSH
56167: LD_VAR 0 1
56171: PPUSH
56172: CALL_OW 437
56176: PUSH
56177: LD_INT 1
56179: ARRAY
56180: PUSH
56181: LD_INT 4
56183: ARRAY
56184: ST_TO_ADDR
// end ;
56185: LD_VAR 0 2
56189: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56190: LD_INT 0
56192: PPUSH
56193: PPUSH
56194: PPUSH
56195: PPUSH
// if not base_units then
56196: LD_VAR 0 1
56200: NOT
56201: IFFALSE 56205
// exit ;
56203: GO 56292
// result := false ;
56205: LD_ADDR_VAR 0 2
56209: PUSH
56210: LD_INT 0
56212: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56213: LD_ADDR_VAR 0 5
56217: PUSH
56218: LD_VAR 0 1
56222: PPUSH
56223: LD_INT 21
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PPUSH
56233: CALL_OW 72
56237: ST_TO_ADDR
// if not tmp then
56238: LD_VAR 0 5
56242: NOT
56243: IFFALSE 56247
// exit ;
56245: GO 56292
// for i in tmp do
56247: LD_ADDR_VAR 0 3
56251: PUSH
56252: LD_VAR 0 5
56256: PUSH
56257: FOR_IN
56258: IFFALSE 56290
// begin result := EnemyInRange ( i , 22 ) ;
56260: LD_ADDR_VAR 0 2
56264: PUSH
56265: LD_VAR 0 3
56269: PPUSH
56270: LD_INT 22
56272: PPUSH
56273: CALL 53879 0 2
56277: ST_TO_ADDR
// if result then
56278: LD_VAR 0 2
56282: IFFALSE 56288
// exit ;
56284: POP
56285: POP
56286: GO 56292
// end ;
56288: GO 56257
56290: POP
56291: POP
// end ;
56292: LD_VAR 0 2
56296: RET
// export function FilterByTag ( units , tag ) ; begin
56297: LD_INT 0
56299: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56300: LD_ADDR_VAR 0 3
56304: PUSH
56305: LD_VAR 0 1
56309: PPUSH
56310: LD_INT 120
56312: PUSH
56313: LD_VAR 0 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PPUSH
56322: CALL_OW 72
56326: ST_TO_ADDR
// end ;
56327: LD_VAR 0 3
56331: RET
// export function IsDriver ( un ) ; begin
56332: LD_INT 0
56334: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56335: LD_ADDR_VAR 0 2
56339: PUSH
56340: LD_VAR 0 1
56344: PUSH
56345: LD_INT 55
56347: PUSH
56348: EMPTY
56349: LIST
56350: PPUSH
56351: CALL_OW 69
56355: IN
56356: ST_TO_ADDR
// end ;
56357: LD_VAR 0 2
56361: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56362: LD_INT 0
56364: PPUSH
56365: PPUSH
// list := [ ] ;
56366: LD_ADDR_VAR 0 5
56370: PUSH
56371: EMPTY
56372: ST_TO_ADDR
// case d of 0 :
56373: LD_VAR 0 3
56377: PUSH
56378: LD_INT 0
56380: DOUBLE
56381: EQUAL
56382: IFTRUE 56386
56384: GO 56519
56386: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56387: LD_ADDR_VAR 0 5
56391: PUSH
56392: LD_VAR 0 1
56396: PUSH
56397: LD_INT 4
56399: MINUS
56400: PUSH
56401: LD_VAR 0 2
56405: PUSH
56406: LD_INT 4
56408: MINUS
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: PUSH
56418: LD_VAR 0 1
56422: PUSH
56423: LD_INT 3
56425: MINUS
56426: PUSH
56427: LD_VAR 0 2
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: PUSH
56440: LD_VAR 0 1
56444: PUSH
56445: LD_INT 4
56447: PLUS
56448: PUSH
56449: LD_VAR 0 2
56453: PUSH
56454: LD_INT 4
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: LIST
56461: PUSH
56462: LD_VAR 0 1
56466: PUSH
56467: LD_INT 3
56469: PLUS
56470: PUSH
56471: LD_VAR 0 2
56475: PUSH
56476: LD_INT 3
56478: PLUS
56479: PUSH
56480: LD_INT 5
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: PUSH
56488: LD_VAR 0 1
56492: PUSH
56493: LD_VAR 0 2
56497: PUSH
56498: LD_INT 4
56500: PLUS
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: LIST
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: ST_TO_ADDR
// end ; 1 :
56517: GO 57217
56519: LD_INT 1
56521: DOUBLE
56522: EQUAL
56523: IFTRUE 56527
56525: GO 56660
56527: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56528: LD_ADDR_VAR 0 5
56532: PUSH
56533: LD_VAR 0 1
56537: PUSH
56538: LD_VAR 0 2
56542: PUSH
56543: LD_INT 4
56545: MINUS
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: LIST
56554: PUSH
56555: LD_VAR 0 1
56559: PUSH
56560: LD_INT 3
56562: MINUS
56563: PUSH
56564: LD_VAR 0 2
56568: PUSH
56569: LD_INT 3
56571: MINUS
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: PUSH
56581: LD_VAR 0 1
56585: PUSH
56586: LD_INT 4
56588: MINUS
56589: PUSH
56590: LD_VAR 0 2
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: PUSH
56603: LD_VAR 0 1
56607: PUSH
56608: LD_VAR 0 2
56612: PUSH
56613: LD_INT 3
56615: PLUS
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: PUSH
56625: LD_VAR 0 1
56629: PUSH
56630: LD_INT 4
56632: PLUS
56633: PUSH
56634: LD_VAR 0 2
56638: PUSH
56639: LD_INT 4
56641: PLUS
56642: PUSH
56643: LD_INT 5
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: LIST
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: ST_TO_ADDR
// end ; 2 :
56658: GO 57217
56660: LD_INT 2
56662: DOUBLE
56663: EQUAL
56664: IFTRUE 56668
56666: GO 56797
56668: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56669: LD_ADDR_VAR 0 5
56673: PUSH
56674: LD_VAR 0 1
56678: PUSH
56679: LD_VAR 0 2
56683: PUSH
56684: LD_INT 3
56686: MINUS
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: LIST
56695: PUSH
56696: LD_VAR 0 1
56700: PUSH
56701: LD_INT 4
56703: PLUS
56704: PUSH
56705: LD_VAR 0 2
56709: PUSH
56710: LD_INT 4
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: PUSH
56718: LD_VAR 0 1
56722: PUSH
56723: LD_VAR 0 2
56727: PUSH
56728: LD_INT 4
56730: PLUS
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: PUSH
56740: LD_VAR 0 1
56744: PUSH
56745: LD_INT 3
56747: MINUS
56748: PUSH
56749: LD_VAR 0 2
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: PUSH
56762: LD_VAR 0 1
56766: PUSH
56767: LD_INT 4
56769: MINUS
56770: PUSH
56771: LD_VAR 0 2
56775: PUSH
56776: LD_INT 4
56778: MINUS
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// end ; 3 :
56795: GO 57217
56797: LD_INT 3
56799: DOUBLE
56800: EQUAL
56801: IFTRUE 56805
56803: GO 56938
56805: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56806: LD_ADDR_VAR 0 5
56810: PUSH
56811: LD_VAR 0 1
56815: PUSH
56816: LD_INT 3
56818: PLUS
56819: PUSH
56820: LD_VAR 0 2
56824: PUSH
56825: LD_INT 4
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: PUSH
56833: LD_VAR 0 1
56837: PUSH
56838: LD_INT 4
56840: PLUS
56841: PUSH
56842: LD_VAR 0 2
56846: PUSH
56847: LD_INT 4
56849: PLUS
56850: PUSH
56851: LD_INT 5
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: LIST
56858: PUSH
56859: LD_VAR 0 1
56863: PUSH
56864: LD_INT 4
56866: MINUS
56867: PUSH
56868: LD_VAR 0 2
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: PUSH
56881: LD_VAR 0 1
56885: PUSH
56886: LD_VAR 0 2
56890: PUSH
56891: LD_INT 4
56893: MINUS
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: LIST
56902: PUSH
56903: LD_VAR 0 1
56907: PUSH
56908: LD_INT 3
56910: MINUS
56911: PUSH
56912: LD_VAR 0 2
56916: PUSH
56917: LD_INT 3
56919: MINUS
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: LIST
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: ST_TO_ADDR
// end ; 4 :
56936: GO 57217
56938: LD_INT 4
56940: DOUBLE
56941: EQUAL
56942: IFTRUE 56946
56944: GO 57079
56946: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56947: LD_ADDR_VAR 0 5
56951: PUSH
56952: LD_VAR 0 1
56956: PUSH
56957: LD_VAR 0 2
56961: PUSH
56962: LD_INT 4
56964: PLUS
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: PUSH
56974: LD_VAR 0 1
56978: PUSH
56979: LD_INT 3
56981: PLUS
56982: PUSH
56983: LD_VAR 0 2
56987: PUSH
56988: LD_INT 3
56990: PLUS
56991: PUSH
56992: LD_INT 5
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: LIST
56999: PUSH
57000: LD_VAR 0 1
57004: PUSH
57005: LD_INT 4
57007: PLUS
57008: PUSH
57009: LD_VAR 0 2
57013: PUSH
57014: LD_INT 4
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: LIST
57021: PUSH
57022: LD_VAR 0 1
57026: PUSH
57027: LD_VAR 0 2
57031: PUSH
57032: LD_INT 3
57034: MINUS
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: PUSH
57044: LD_VAR 0 1
57048: PUSH
57049: LD_INT 4
57051: MINUS
57052: PUSH
57053: LD_VAR 0 2
57057: PUSH
57058: LD_INT 4
57060: MINUS
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: LIST
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: ST_TO_ADDR
// end ; 5 :
57077: GO 57217
57079: LD_INT 5
57081: DOUBLE
57082: EQUAL
57083: IFTRUE 57087
57085: GO 57216
57087: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57088: LD_ADDR_VAR 0 5
57092: PUSH
57093: LD_VAR 0 1
57097: PUSH
57098: LD_INT 4
57100: MINUS
57101: PUSH
57102: LD_VAR 0 2
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: PUSH
57115: LD_VAR 0 1
57119: PUSH
57120: LD_VAR 0 2
57124: PUSH
57125: LD_INT 4
57127: MINUS
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: PUSH
57137: LD_VAR 0 1
57141: PUSH
57142: LD_INT 4
57144: PLUS
57145: PUSH
57146: LD_VAR 0 2
57150: PUSH
57151: LD_INT 4
57153: PLUS
57154: PUSH
57155: LD_INT 5
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: PUSH
57163: LD_VAR 0 1
57167: PUSH
57168: LD_INT 3
57170: PLUS
57171: PUSH
57172: LD_VAR 0 2
57176: PUSH
57177: LD_INT 4
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: LIST
57184: PUSH
57185: LD_VAR 0 1
57189: PUSH
57190: LD_VAR 0 2
57194: PUSH
57195: LD_INT 3
57197: PLUS
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// end ; end ;
57214: GO 57217
57216: POP
// result := list ;
57217: LD_ADDR_VAR 0 4
57221: PUSH
57222: LD_VAR 0 5
57226: ST_TO_ADDR
// end ;
57227: LD_VAR 0 4
57231: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57232: LD_INT 0
57234: PPUSH
57235: PPUSH
57236: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57237: LD_VAR 0 1
57241: NOT
57242: PUSH
57243: LD_VAR 0 2
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: LD_INT 4
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: IN
57266: NOT
57267: OR
57268: IFFALSE 57272
// exit ;
57270: GO 57355
// tmp := [ ] ;
57272: LD_ADDR_VAR 0 5
57276: PUSH
57277: EMPTY
57278: ST_TO_ADDR
// for i in units do
57279: LD_ADDR_VAR 0 4
57283: PUSH
57284: LD_VAR 0 1
57288: PUSH
57289: FOR_IN
57290: IFFALSE 57324
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57292: LD_ADDR_VAR 0 5
57296: PUSH
57297: LD_VAR 0 5
57301: PPUSH
57302: LD_VAR 0 4
57306: PPUSH
57307: LD_VAR 0 2
57311: PPUSH
57312: CALL_OW 259
57316: PPUSH
57317: CALL 58716 0 2
57321: ST_TO_ADDR
57322: GO 57289
57324: POP
57325: POP
// if not tmp then
57326: LD_VAR 0 5
57330: NOT
57331: IFFALSE 57335
// exit ;
57333: GO 57355
// result := SortListByListDesc ( units , tmp ) ;
57335: LD_ADDR_VAR 0 3
57339: PUSH
57340: LD_VAR 0 1
57344: PPUSH
57345: LD_VAR 0 5
57349: PPUSH
57350: CALL_OW 77
57354: ST_TO_ADDR
// end ;
57355: LD_VAR 0 3
57359: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57360: LD_INT 0
57362: PPUSH
57363: PPUSH
57364: PPUSH
// result := false ;
57365: LD_ADDR_VAR 0 3
57369: PUSH
57370: LD_INT 0
57372: ST_TO_ADDR
// if not building then
57373: LD_VAR 0 2
57377: NOT
57378: IFFALSE 57382
// exit ;
57380: GO 57520
// x := GetX ( building ) ;
57382: LD_ADDR_VAR 0 4
57386: PUSH
57387: LD_VAR 0 2
57391: PPUSH
57392: CALL_OW 250
57396: ST_TO_ADDR
// y := GetY ( building ) ;
57397: LD_ADDR_VAR 0 5
57401: PUSH
57402: LD_VAR 0 2
57406: PPUSH
57407: CALL_OW 251
57411: ST_TO_ADDR
// if not x or not y then
57412: LD_VAR 0 4
57416: NOT
57417: PUSH
57418: LD_VAR 0 5
57422: NOT
57423: OR
57424: IFFALSE 57428
// exit ;
57426: GO 57520
// if GetTaskList ( unit ) then
57428: LD_VAR 0 1
57432: PPUSH
57433: CALL_OW 437
57437: IFFALSE 57520
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57439: LD_STRING e
57441: PUSH
57442: LD_VAR 0 1
57446: PPUSH
57447: CALL_OW 437
57451: PUSH
57452: LD_INT 1
57454: ARRAY
57455: PUSH
57456: LD_INT 1
57458: ARRAY
57459: EQUAL
57460: PUSH
57461: LD_VAR 0 4
57465: PUSH
57466: LD_VAR 0 1
57470: PPUSH
57471: CALL_OW 437
57475: PUSH
57476: LD_INT 1
57478: ARRAY
57479: PUSH
57480: LD_INT 2
57482: ARRAY
57483: EQUAL
57484: AND
57485: PUSH
57486: LD_VAR 0 5
57490: PUSH
57491: LD_VAR 0 1
57495: PPUSH
57496: CALL_OW 437
57500: PUSH
57501: LD_INT 1
57503: ARRAY
57504: PUSH
57505: LD_INT 3
57507: ARRAY
57508: EQUAL
57509: AND
57510: IFFALSE 57520
// result := true end ;
57512: LD_ADDR_VAR 0 3
57516: PUSH
57517: LD_INT 1
57519: ST_TO_ADDR
// end ;
57520: LD_VAR 0 3
57524: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57525: LD_INT 0
57527: PPUSH
// result := false ;
57528: LD_ADDR_VAR 0 4
57532: PUSH
57533: LD_INT 0
57535: ST_TO_ADDR
// if GetTaskList ( unit ) then
57536: LD_VAR 0 1
57540: PPUSH
57541: CALL_OW 437
57545: IFFALSE 57628
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57547: LD_STRING M
57549: PUSH
57550: LD_VAR 0 1
57554: PPUSH
57555: CALL_OW 437
57559: PUSH
57560: LD_INT 1
57562: ARRAY
57563: PUSH
57564: LD_INT 1
57566: ARRAY
57567: EQUAL
57568: PUSH
57569: LD_VAR 0 2
57573: PUSH
57574: LD_VAR 0 1
57578: PPUSH
57579: CALL_OW 437
57583: PUSH
57584: LD_INT 1
57586: ARRAY
57587: PUSH
57588: LD_INT 2
57590: ARRAY
57591: EQUAL
57592: AND
57593: PUSH
57594: LD_VAR 0 3
57598: PUSH
57599: LD_VAR 0 1
57603: PPUSH
57604: CALL_OW 437
57608: PUSH
57609: LD_INT 1
57611: ARRAY
57612: PUSH
57613: LD_INT 3
57615: ARRAY
57616: EQUAL
57617: AND
57618: IFFALSE 57628
// result := true ;
57620: LD_ADDR_VAR 0 4
57624: PUSH
57625: LD_INT 1
57627: ST_TO_ADDR
// end ; end ;
57628: LD_VAR 0 4
57632: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57633: LD_INT 0
57635: PPUSH
57636: PPUSH
57637: PPUSH
57638: PPUSH
// if not unit or not area then
57639: LD_VAR 0 1
57643: NOT
57644: PUSH
57645: LD_VAR 0 2
57649: NOT
57650: OR
57651: IFFALSE 57655
// exit ;
57653: GO 57819
// tmp := AreaToList ( area , i ) ;
57655: LD_ADDR_VAR 0 6
57659: PUSH
57660: LD_VAR 0 2
57664: PPUSH
57665: LD_VAR 0 5
57669: PPUSH
57670: CALL_OW 517
57674: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57675: LD_ADDR_VAR 0 5
57679: PUSH
57680: DOUBLE
57681: LD_INT 1
57683: DEC
57684: ST_TO_ADDR
57685: LD_VAR 0 6
57689: PUSH
57690: LD_INT 1
57692: ARRAY
57693: PUSH
57694: FOR_TO
57695: IFFALSE 57817
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57697: LD_ADDR_VAR 0 7
57701: PUSH
57702: LD_VAR 0 6
57706: PUSH
57707: LD_INT 1
57709: ARRAY
57710: PUSH
57711: LD_VAR 0 5
57715: ARRAY
57716: PUSH
57717: LD_VAR 0 6
57721: PUSH
57722: LD_INT 2
57724: ARRAY
57725: PUSH
57726: LD_VAR 0 5
57730: ARRAY
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57736: LD_VAR 0 7
57740: PUSH
57741: LD_INT 1
57743: ARRAY
57744: PPUSH
57745: LD_VAR 0 7
57749: PUSH
57750: LD_INT 2
57752: ARRAY
57753: PPUSH
57754: CALL_OW 428
57758: PUSH
57759: LD_INT 0
57761: EQUAL
57762: IFFALSE 57815
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57764: LD_VAR 0 1
57768: PPUSH
57769: LD_VAR 0 7
57773: PUSH
57774: LD_INT 1
57776: ARRAY
57777: PPUSH
57778: LD_VAR 0 7
57782: PUSH
57783: LD_INT 2
57785: ARRAY
57786: PPUSH
57787: LD_VAR 0 3
57791: PPUSH
57792: CALL_OW 48
// result := IsPlaced ( unit ) ;
57796: LD_ADDR_VAR 0 4
57800: PUSH
57801: LD_VAR 0 1
57805: PPUSH
57806: CALL_OW 305
57810: ST_TO_ADDR
// exit ;
57811: POP
57812: POP
57813: GO 57819
// end ; end ;
57815: GO 57694
57817: POP
57818: POP
// end ;
57819: LD_VAR 0 4
57823: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57824: LD_INT 0
57826: PPUSH
57827: PPUSH
57828: PPUSH
// if not side or side > 8 then
57829: LD_VAR 0 1
57833: NOT
57834: PUSH
57835: LD_VAR 0 1
57839: PUSH
57840: LD_INT 8
57842: GREATER
57843: OR
57844: IFFALSE 57848
// exit ;
57846: GO 58035
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57848: LD_ADDR_VAR 0 4
57852: PUSH
57853: LD_INT 22
57855: PUSH
57856: LD_VAR 0 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 21
57867: PUSH
57868: LD_INT 3
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PPUSH
57879: CALL_OW 69
57883: ST_TO_ADDR
// if not tmp then
57884: LD_VAR 0 4
57888: NOT
57889: IFFALSE 57893
// exit ;
57891: GO 58035
// enable_addtolog := true ;
57893: LD_ADDR_OWVAR 81
57897: PUSH
57898: LD_INT 1
57900: ST_TO_ADDR
// AddToLog ( [ ) ;
57901: LD_STRING [
57903: PPUSH
57904: CALL_OW 561
// for i in tmp do
57908: LD_ADDR_VAR 0 3
57912: PUSH
57913: LD_VAR 0 4
57917: PUSH
57918: FOR_IN
57919: IFFALSE 58026
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57921: LD_STRING [
57923: PUSH
57924: LD_VAR 0 3
57928: PPUSH
57929: CALL_OW 266
57933: STR
57934: PUSH
57935: LD_STRING , 
57937: STR
57938: PUSH
57939: LD_VAR 0 3
57943: PPUSH
57944: CALL_OW 250
57948: STR
57949: PUSH
57950: LD_STRING , 
57952: STR
57953: PUSH
57954: LD_VAR 0 3
57958: PPUSH
57959: CALL_OW 251
57963: STR
57964: PUSH
57965: LD_STRING , 
57967: STR
57968: PUSH
57969: LD_VAR 0 3
57973: PPUSH
57974: CALL_OW 254
57978: STR
57979: PUSH
57980: LD_STRING , 
57982: STR
57983: PUSH
57984: LD_VAR 0 3
57988: PPUSH
57989: LD_INT 1
57991: PPUSH
57992: CALL_OW 268
57996: STR
57997: PUSH
57998: LD_STRING , 
58000: STR
58001: PUSH
58002: LD_VAR 0 3
58006: PPUSH
58007: LD_INT 2
58009: PPUSH
58010: CALL_OW 268
58014: STR
58015: PUSH
58016: LD_STRING ],
58018: STR
58019: PPUSH
58020: CALL_OW 561
// end ;
58024: GO 57918
58026: POP
58027: POP
// AddToLog ( ]; ) ;
58028: LD_STRING ];
58030: PPUSH
58031: CALL_OW 561
// end ;
58035: LD_VAR 0 2
58039: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58040: LD_INT 0
58042: PPUSH
58043: PPUSH
58044: PPUSH
58045: PPUSH
58046: PPUSH
// if not area or not rate or not max then
58047: LD_VAR 0 1
58051: NOT
58052: PUSH
58053: LD_VAR 0 2
58057: NOT
58058: OR
58059: PUSH
58060: LD_VAR 0 4
58064: NOT
58065: OR
58066: IFFALSE 58070
// exit ;
58068: GO 58259
// while 1 do
58070: LD_INT 1
58072: IFFALSE 58259
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58074: LD_ADDR_VAR 0 9
58078: PUSH
58079: LD_VAR 0 1
58083: PPUSH
58084: LD_INT 1
58086: PPUSH
58087: CALL_OW 287
58091: PUSH
58092: LD_INT 10
58094: MUL
58095: ST_TO_ADDR
// r := rate / 10 ;
58096: LD_ADDR_VAR 0 7
58100: PUSH
58101: LD_VAR 0 2
58105: PUSH
58106: LD_INT 10
58108: DIVREAL
58109: ST_TO_ADDR
// time := 1 1$00 ;
58110: LD_ADDR_VAR 0 8
58114: PUSH
58115: LD_INT 2100
58117: ST_TO_ADDR
// if amount < min then
58118: LD_VAR 0 9
58122: PUSH
58123: LD_VAR 0 3
58127: LESS
58128: IFFALSE 58146
// r := r * 2 else
58130: LD_ADDR_VAR 0 7
58134: PUSH
58135: LD_VAR 0 7
58139: PUSH
58140: LD_INT 2
58142: MUL
58143: ST_TO_ADDR
58144: GO 58172
// if amount > max then
58146: LD_VAR 0 9
58150: PUSH
58151: LD_VAR 0 4
58155: GREATER
58156: IFFALSE 58172
// r := r / 2 ;
58158: LD_ADDR_VAR 0 7
58162: PUSH
58163: LD_VAR 0 7
58167: PUSH
58168: LD_INT 2
58170: DIVREAL
58171: ST_TO_ADDR
// time := time / r ;
58172: LD_ADDR_VAR 0 8
58176: PUSH
58177: LD_VAR 0 8
58181: PUSH
58182: LD_VAR 0 7
58186: DIVREAL
58187: ST_TO_ADDR
// if time < 0 then
58188: LD_VAR 0 8
58192: PUSH
58193: LD_INT 0
58195: LESS
58196: IFFALSE 58213
// time := time * - 1 ;
58198: LD_ADDR_VAR 0 8
58202: PUSH
58203: LD_VAR 0 8
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: MUL
58212: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58213: LD_VAR 0 8
58217: PUSH
58218: LD_INT 35
58220: PPUSH
58221: LD_INT 875
58223: PPUSH
58224: CALL_OW 12
58228: PLUS
58229: PPUSH
58230: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58234: LD_INT 1
58236: PPUSH
58237: LD_INT 5
58239: PPUSH
58240: CALL_OW 12
58244: PPUSH
58245: LD_VAR 0 1
58249: PPUSH
58250: LD_INT 1
58252: PPUSH
58253: CALL_OW 55
// end ;
58257: GO 58070
// end ;
58259: LD_VAR 0 5
58263: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58264: LD_INT 0
58266: PPUSH
58267: PPUSH
58268: PPUSH
58269: PPUSH
58270: PPUSH
58271: PPUSH
58272: PPUSH
58273: PPUSH
// if not turrets or not factories then
58274: LD_VAR 0 1
58278: NOT
58279: PUSH
58280: LD_VAR 0 2
58284: NOT
58285: OR
58286: IFFALSE 58290
// exit ;
58288: GO 58597
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58290: LD_ADDR_VAR 0 10
58294: PUSH
58295: LD_INT 5
58297: PUSH
58298: LD_INT 6
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 2
58307: PUSH
58308: LD_INT 4
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: PUSH
58318: LD_INT 5
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 24
58332: PUSH
58333: LD_INT 25
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 23
58342: PUSH
58343: LD_INT 27
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 42
58356: PUSH
58357: LD_INT 43
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 44
58366: PUSH
58367: LD_INT 46
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 45
58376: PUSH
58377: LD_INT 47
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: LIST
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: ST_TO_ADDR
// result := [ ] ;
58394: LD_ADDR_VAR 0 3
58398: PUSH
58399: EMPTY
58400: ST_TO_ADDR
// for i in turrets do
58401: LD_ADDR_VAR 0 4
58405: PUSH
58406: LD_VAR 0 1
58410: PUSH
58411: FOR_IN
58412: IFFALSE 58595
// begin nat := GetNation ( i ) ;
58414: LD_ADDR_VAR 0 7
58418: PUSH
58419: LD_VAR 0 4
58423: PPUSH
58424: CALL_OW 248
58428: ST_TO_ADDR
// weapon := 0 ;
58429: LD_ADDR_VAR 0 8
58433: PUSH
58434: LD_INT 0
58436: ST_TO_ADDR
// if not nat then
58437: LD_VAR 0 7
58441: NOT
58442: IFFALSE 58446
// continue ;
58444: GO 58411
// for j in list [ nat ] do
58446: LD_ADDR_VAR 0 5
58450: PUSH
58451: LD_VAR 0 10
58455: PUSH
58456: LD_VAR 0 7
58460: ARRAY
58461: PUSH
58462: FOR_IN
58463: IFFALSE 58504
// if GetBWeapon ( i ) = j [ 1 ] then
58465: LD_VAR 0 4
58469: PPUSH
58470: CALL_OW 269
58474: PUSH
58475: LD_VAR 0 5
58479: PUSH
58480: LD_INT 1
58482: ARRAY
58483: EQUAL
58484: IFFALSE 58502
// begin weapon := j [ 2 ] ;
58486: LD_ADDR_VAR 0 8
58490: PUSH
58491: LD_VAR 0 5
58495: PUSH
58496: LD_INT 2
58498: ARRAY
58499: ST_TO_ADDR
// break ;
58500: GO 58504
// end ;
58502: GO 58462
58504: POP
58505: POP
// if not weapon then
58506: LD_VAR 0 8
58510: NOT
58511: IFFALSE 58515
// continue ;
58513: GO 58411
// for k in factories do
58515: LD_ADDR_VAR 0 6
58519: PUSH
58520: LD_VAR 0 2
58524: PUSH
58525: FOR_IN
58526: IFFALSE 58591
// begin weapons := AvailableWeaponList ( k ) ;
58528: LD_ADDR_VAR 0 9
58532: PUSH
58533: LD_VAR 0 6
58537: PPUSH
58538: CALL_OW 478
58542: ST_TO_ADDR
// if not weapons then
58543: LD_VAR 0 9
58547: NOT
58548: IFFALSE 58552
// continue ;
58550: GO 58525
// if weapon in weapons then
58552: LD_VAR 0 8
58556: PUSH
58557: LD_VAR 0 9
58561: IN
58562: IFFALSE 58589
// begin result := [ i , weapon ] ;
58564: LD_ADDR_VAR 0 3
58568: PUSH
58569: LD_VAR 0 4
58573: PUSH
58574: LD_VAR 0 8
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: ST_TO_ADDR
// exit ;
58583: POP
58584: POP
58585: POP
58586: POP
58587: GO 58597
// end ; end ;
58589: GO 58525
58591: POP
58592: POP
// end ;
58593: GO 58411
58595: POP
58596: POP
// end ;
58597: LD_VAR 0 3
58601: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58602: LD_INT 0
58604: PPUSH
// if not side or side > 8 then
58605: LD_VAR 0 3
58609: NOT
58610: PUSH
58611: LD_VAR 0 3
58615: PUSH
58616: LD_INT 8
58618: GREATER
58619: OR
58620: IFFALSE 58624
// exit ;
58622: GO 58683
// if not range then
58624: LD_VAR 0 4
58628: NOT
58629: IFFALSE 58640
// range := - 12 ;
58631: LD_ADDR_VAR 0 4
58635: PUSH
58636: LD_INT 12
58638: NEG
58639: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58640: LD_VAR 0 1
58644: PPUSH
58645: LD_VAR 0 2
58649: PPUSH
58650: LD_VAR 0 3
58654: PPUSH
58655: LD_VAR 0 4
58659: PPUSH
58660: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58664: LD_VAR 0 1
58668: PPUSH
58669: LD_VAR 0 2
58673: PPUSH
58674: LD_VAR 0 3
58678: PPUSH
58679: CALL_OW 331
// end ;
58683: LD_VAR 0 5
58687: RET
// export function Video ( mode ) ; begin
58688: LD_INT 0
58690: PPUSH
// ingame_video = mode ;
58691: LD_ADDR_OWVAR 52
58695: PUSH
58696: LD_VAR 0 1
58700: ST_TO_ADDR
// interface_hidden = mode ;
58701: LD_ADDR_OWVAR 54
58705: PUSH
58706: LD_VAR 0 1
58710: ST_TO_ADDR
// end ;
58711: LD_VAR 0 2
58715: RET
// export function Join ( array , element ) ; begin
58716: LD_INT 0
58718: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58719: LD_ADDR_VAR 0 3
58723: PUSH
58724: LD_VAR 0 1
58728: PPUSH
58729: LD_VAR 0 1
58733: PUSH
58734: LD_INT 1
58736: PLUS
58737: PPUSH
58738: LD_VAR 0 2
58742: PPUSH
58743: CALL_OW 1
58747: ST_TO_ADDR
// end ;
58748: LD_VAR 0 3
58752: RET
// export function JoinUnion ( array , element ) ; begin
58753: LD_INT 0
58755: PPUSH
// result := array union element ;
58756: LD_ADDR_VAR 0 3
58760: PUSH
58761: LD_VAR 0 1
58765: PUSH
58766: LD_VAR 0 2
58770: UNION
58771: ST_TO_ADDR
// end ;
58772: LD_VAR 0 3
58776: RET
// export function GetBehemoths ( side ) ; begin
58777: LD_INT 0
58779: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58780: LD_ADDR_VAR 0 2
58784: PUSH
58785: LD_INT 22
58787: PUSH
58788: LD_VAR 0 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 31
58799: PUSH
58800: LD_INT 25
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PPUSH
58811: CALL_OW 69
58815: ST_TO_ADDR
// end ;
58816: LD_VAR 0 2
58820: RET
// export function Shuffle ( array ) ; var i , index ; begin
58821: LD_INT 0
58823: PPUSH
58824: PPUSH
58825: PPUSH
// result := [ ] ;
58826: LD_ADDR_VAR 0 2
58830: PUSH
58831: EMPTY
58832: ST_TO_ADDR
// if not array then
58833: LD_VAR 0 1
58837: NOT
58838: IFFALSE 58842
// exit ;
58840: GO 58941
// Randomize ;
58842: CALL_OW 10
// for i = array downto 1 do
58846: LD_ADDR_VAR 0 3
58850: PUSH
58851: DOUBLE
58852: LD_VAR 0 1
58856: INC
58857: ST_TO_ADDR
58858: LD_INT 1
58860: PUSH
58861: FOR_DOWNTO
58862: IFFALSE 58939
// begin index := rand ( 1 , array ) ;
58864: LD_ADDR_VAR 0 4
58868: PUSH
58869: LD_INT 1
58871: PPUSH
58872: LD_VAR 0 1
58876: PPUSH
58877: CALL_OW 12
58881: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58882: LD_ADDR_VAR 0 2
58886: PUSH
58887: LD_VAR 0 2
58891: PPUSH
58892: LD_VAR 0 2
58896: PUSH
58897: LD_INT 1
58899: PLUS
58900: PPUSH
58901: LD_VAR 0 1
58905: PUSH
58906: LD_VAR 0 4
58910: ARRAY
58911: PPUSH
58912: CALL_OW 2
58916: ST_TO_ADDR
// array := Delete ( array , index ) ;
58917: LD_ADDR_VAR 0 1
58921: PUSH
58922: LD_VAR 0 1
58926: PPUSH
58927: LD_VAR 0 4
58931: PPUSH
58932: CALL_OW 3
58936: ST_TO_ADDR
// end ;
58937: GO 58861
58939: POP
58940: POP
// end ;
58941: LD_VAR 0 2
58945: RET
// export function GetBaseMaterials ( base ) ; begin
58946: LD_INT 0
58948: PPUSH
// result := [ 0 , 0 , 0 ] ;
58949: LD_ADDR_VAR 0 2
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: LIST
58967: ST_TO_ADDR
// if not base then
58968: LD_VAR 0 1
58972: NOT
58973: IFFALSE 58977
// exit ;
58975: GO 59026
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58977: LD_ADDR_VAR 0 2
58981: PUSH
58982: LD_VAR 0 1
58986: PPUSH
58987: LD_INT 1
58989: PPUSH
58990: CALL_OW 275
58994: PUSH
58995: LD_VAR 0 1
58999: PPUSH
59000: LD_INT 2
59002: PPUSH
59003: CALL_OW 275
59007: PUSH
59008: LD_VAR 0 1
59012: PPUSH
59013: LD_INT 3
59015: PPUSH
59016: CALL_OW 275
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: LIST
59025: ST_TO_ADDR
// end ;
59026: LD_VAR 0 2
59030: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59031: LD_INT 0
59033: PPUSH
59034: PPUSH
// result := array ;
59035: LD_ADDR_VAR 0 3
59039: PUSH
59040: LD_VAR 0 1
59044: ST_TO_ADDR
// if size >= result then
59045: LD_VAR 0 2
59049: PUSH
59050: LD_VAR 0 3
59054: GREATEREQUAL
59055: IFFALSE 59059
// exit ;
59057: GO 59109
// if size then
59059: LD_VAR 0 2
59063: IFFALSE 59109
// for i := array downto size do
59065: LD_ADDR_VAR 0 4
59069: PUSH
59070: DOUBLE
59071: LD_VAR 0 1
59075: INC
59076: ST_TO_ADDR
59077: LD_VAR 0 2
59081: PUSH
59082: FOR_DOWNTO
59083: IFFALSE 59107
// result := Delete ( result , result ) ;
59085: LD_ADDR_VAR 0 3
59089: PUSH
59090: LD_VAR 0 3
59094: PPUSH
59095: LD_VAR 0 3
59099: PPUSH
59100: CALL_OW 3
59104: ST_TO_ADDR
59105: GO 59082
59107: POP
59108: POP
// end ;
59109: LD_VAR 0 3
59113: RET
// export function ComExit ( unit ) ; var tmp ; begin
59114: LD_INT 0
59116: PPUSH
59117: PPUSH
// if not IsInUnit ( unit ) then
59118: LD_VAR 0 1
59122: PPUSH
59123: CALL_OW 310
59127: NOT
59128: IFFALSE 59132
// exit ;
59130: GO 59192
// tmp := IsInUnit ( unit ) ;
59132: LD_ADDR_VAR 0 3
59136: PUSH
59137: LD_VAR 0 1
59141: PPUSH
59142: CALL_OW 310
59146: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59147: LD_VAR 0 3
59151: PPUSH
59152: CALL_OW 247
59156: PUSH
59157: LD_INT 2
59159: EQUAL
59160: IFFALSE 59173
// ComExitVehicle ( unit ) else
59162: LD_VAR 0 1
59166: PPUSH
59167: CALL_OW 121
59171: GO 59182
// ComExitBuilding ( unit ) ;
59173: LD_VAR 0 1
59177: PPUSH
59178: CALL_OW 122
// result := tmp ;
59182: LD_ADDR_VAR 0 2
59186: PUSH
59187: LD_VAR 0 3
59191: ST_TO_ADDR
// end ;
59192: LD_VAR 0 2
59196: RET
// export function ComExitAll ( units ) ; var i ; begin
59197: LD_INT 0
59199: PPUSH
59200: PPUSH
// if not units then
59201: LD_VAR 0 1
59205: NOT
59206: IFFALSE 59210
// exit ;
59208: GO 59236
// for i in units do
59210: LD_ADDR_VAR 0 3
59214: PUSH
59215: LD_VAR 0 1
59219: PUSH
59220: FOR_IN
59221: IFFALSE 59234
// ComExit ( i ) ;
59223: LD_VAR 0 3
59227: PPUSH
59228: CALL 59114 0 1
59232: GO 59220
59234: POP
59235: POP
// end ;
59236: LD_VAR 0 2
59240: RET
// export function ResetHc ; begin
59241: LD_INT 0
59243: PPUSH
// InitHc ;
59244: CALL_OW 19
// hc_importance := 0 ;
59248: LD_ADDR_OWVAR 32
59252: PUSH
59253: LD_INT 0
59255: ST_TO_ADDR
// end ;
59256: LD_VAR 0 1
59260: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59261: LD_INT 0
59263: PPUSH
59264: PPUSH
59265: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59266: LD_ADDR_VAR 0 6
59270: PUSH
59271: LD_VAR 0 1
59275: PUSH
59276: LD_VAR 0 3
59280: PLUS
59281: PUSH
59282: LD_INT 2
59284: DIV
59285: ST_TO_ADDR
// if _x < 0 then
59286: LD_VAR 0 6
59290: PUSH
59291: LD_INT 0
59293: LESS
59294: IFFALSE 59311
// _x := _x * - 1 ;
59296: LD_ADDR_VAR 0 6
59300: PUSH
59301: LD_VAR 0 6
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: MUL
59310: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59311: LD_ADDR_VAR 0 7
59315: PUSH
59316: LD_VAR 0 2
59320: PUSH
59321: LD_VAR 0 4
59325: PLUS
59326: PUSH
59327: LD_INT 2
59329: DIV
59330: ST_TO_ADDR
// if _y < 0 then
59331: LD_VAR 0 7
59335: PUSH
59336: LD_INT 0
59338: LESS
59339: IFFALSE 59356
// _y := _y * - 1 ;
59341: LD_ADDR_VAR 0 7
59345: PUSH
59346: LD_VAR 0 7
59350: PUSH
59351: LD_INT 1
59353: NEG
59354: MUL
59355: ST_TO_ADDR
// result := [ _x , _y ] ;
59356: LD_ADDR_VAR 0 5
59360: PUSH
59361: LD_VAR 0 6
59365: PUSH
59366: LD_VAR 0 7
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: ST_TO_ADDR
// end ;
59375: LD_VAR 0 5
59379: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59380: LD_INT 0
59382: PPUSH
59383: PPUSH
59384: PPUSH
59385: PPUSH
// task := GetTaskList ( unit ) ;
59386: LD_ADDR_VAR 0 7
59390: PUSH
59391: LD_VAR 0 1
59395: PPUSH
59396: CALL_OW 437
59400: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59401: LD_VAR 0 7
59405: NOT
59406: PUSH
59407: LD_VAR 0 1
59411: PPUSH
59412: LD_VAR 0 2
59416: PPUSH
59417: CALL_OW 308
59421: NOT
59422: AND
59423: IFFALSE 59427
// exit ;
59425: GO 59545
// if IsInArea ( unit , area ) then
59427: LD_VAR 0 1
59431: PPUSH
59432: LD_VAR 0 2
59436: PPUSH
59437: CALL_OW 308
59441: IFFALSE 59459
// begin ComMoveToArea ( unit , goAway ) ;
59443: LD_VAR 0 1
59447: PPUSH
59448: LD_VAR 0 3
59452: PPUSH
59453: CALL_OW 113
// exit ;
59457: GO 59545
// end ; if task [ 1 ] [ 1 ] <> M then
59459: LD_VAR 0 7
59463: PUSH
59464: LD_INT 1
59466: ARRAY
59467: PUSH
59468: LD_INT 1
59470: ARRAY
59471: PUSH
59472: LD_STRING M
59474: NONEQUAL
59475: IFFALSE 59479
// exit ;
59477: GO 59545
// x := task [ 1 ] [ 2 ] ;
59479: LD_ADDR_VAR 0 5
59483: PUSH
59484: LD_VAR 0 7
59488: PUSH
59489: LD_INT 1
59491: ARRAY
59492: PUSH
59493: LD_INT 2
59495: ARRAY
59496: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59497: LD_ADDR_VAR 0 6
59501: PUSH
59502: LD_VAR 0 7
59506: PUSH
59507: LD_INT 1
59509: ARRAY
59510: PUSH
59511: LD_INT 3
59513: ARRAY
59514: ST_TO_ADDR
// if InArea ( x , y , area ) then
59515: LD_VAR 0 5
59519: PPUSH
59520: LD_VAR 0 6
59524: PPUSH
59525: LD_VAR 0 2
59529: PPUSH
59530: CALL_OW 309
59534: IFFALSE 59545
// ComStop ( unit ) ;
59536: LD_VAR 0 1
59540: PPUSH
59541: CALL_OW 141
// end ;
59545: LD_VAR 0 4
59549: RET
// export function Abs ( value ) ; begin
59550: LD_INT 0
59552: PPUSH
// result := value ;
59553: LD_ADDR_VAR 0 2
59557: PUSH
59558: LD_VAR 0 1
59562: ST_TO_ADDR
// if value < 0 then
59563: LD_VAR 0 1
59567: PUSH
59568: LD_INT 0
59570: LESS
59571: IFFALSE 59588
// result := value * - 1 ;
59573: LD_ADDR_VAR 0 2
59577: PUSH
59578: LD_VAR 0 1
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: MUL
59587: ST_TO_ADDR
// end ;
59588: LD_VAR 0 2
59592: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59593: LD_INT 0
59595: PPUSH
59596: PPUSH
59597: PPUSH
59598: PPUSH
59599: PPUSH
59600: PPUSH
59601: PPUSH
59602: PPUSH
// if not unit or not building then
59603: LD_VAR 0 1
59607: NOT
59608: PUSH
59609: LD_VAR 0 2
59613: NOT
59614: OR
59615: IFFALSE 59619
// exit ;
59617: GO 59845
// x := GetX ( building ) ;
59619: LD_ADDR_VAR 0 4
59623: PUSH
59624: LD_VAR 0 2
59628: PPUSH
59629: CALL_OW 250
59633: ST_TO_ADDR
// y := GetY ( building ) ;
59634: LD_ADDR_VAR 0 6
59638: PUSH
59639: LD_VAR 0 2
59643: PPUSH
59644: CALL_OW 251
59648: ST_TO_ADDR
// d := GetDir ( building ) ;
59649: LD_ADDR_VAR 0 8
59653: PUSH
59654: LD_VAR 0 2
59658: PPUSH
59659: CALL_OW 254
59663: ST_TO_ADDR
// r := 4 ;
59664: LD_ADDR_VAR 0 9
59668: PUSH
59669: LD_INT 4
59671: ST_TO_ADDR
// for i := 1 to 5 do
59672: LD_ADDR_VAR 0 10
59676: PUSH
59677: DOUBLE
59678: LD_INT 1
59680: DEC
59681: ST_TO_ADDR
59682: LD_INT 5
59684: PUSH
59685: FOR_TO
59686: IFFALSE 59843
// begin _x := ShiftX ( x , d , r + i ) ;
59688: LD_ADDR_VAR 0 5
59692: PUSH
59693: LD_VAR 0 4
59697: PPUSH
59698: LD_VAR 0 8
59702: PPUSH
59703: LD_VAR 0 9
59707: PUSH
59708: LD_VAR 0 10
59712: PLUS
59713: PPUSH
59714: CALL_OW 272
59718: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59719: LD_ADDR_VAR 0 7
59723: PUSH
59724: LD_VAR 0 6
59728: PPUSH
59729: LD_VAR 0 8
59733: PPUSH
59734: LD_VAR 0 9
59738: PUSH
59739: LD_VAR 0 10
59743: PLUS
59744: PPUSH
59745: CALL_OW 273
59749: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59750: LD_VAR 0 5
59754: PPUSH
59755: LD_VAR 0 7
59759: PPUSH
59760: CALL_OW 488
59764: PUSH
59765: LD_VAR 0 5
59769: PPUSH
59770: LD_VAR 0 7
59774: PPUSH
59775: CALL_OW 428
59779: PPUSH
59780: CALL_OW 247
59784: PUSH
59785: LD_INT 3
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: IN
59795: NOT
59796: AND
59797: IFFALSE 59841
// begin ComMoveXY ( unit , _x , _y ) ;
59799: LD_VAR 0 1
59803: PPUSH
59804: LD_VAR 0 5
59808: PPUSH
59809: LD_VAR 0 7
59813: PPUSH
59814: CALL_OW 111
// result := [ _x , _y ] ;
59818: LD_ADDR_VAR 0 3
59822: PUSH
59823: LD_VAR 0 5
59827: PUSH
59828: LD_VAR 0 7
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: ST_TO_ADDR
// exit ;
59837: POP
59838: POP
59839: GO 59845
// end ; end ;
59841: GO 59685
59843: POP
59844: POP
// end ;
59845: LD_VAR 0 3
59849: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59850: LD_INT 0
59852: PPUSH
59853: PPUSH
59854: PPUSH
// result := 0 ;
59855: LD_ADDR_VAR 0 3
59859: PUSH
59860: LD_INT 0
59862: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59863: LD_VAR 0 1
59867: PUSH
59868: LD_INT 0
59870: LESS
59871: PUSH
59872: LD_VAR 0 1
59876: PUSH
59877: LD_INT 8
59879: GREATER
59880: OR
59881: PUSH
59882: LD_VAR 0 2
59886: PUSH
59887: LD_INT 0
59889: LESS
59890: OR
59891: PUSH
59892: LD_VAR 0 2
59896: PUSH
59897: LD_INT 8
59899: GREATER
59900: OR
59901: IFFALSE 59905
// exit ;
59903: GO 59980
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59905: LD_ADDR_VAR 0 4
59909: PUSH
59910: LD_INT 22
59912: PUSH
59913: LD_VAR 0 2
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PPUSH
59922: CALL_OW 69
59926: PUSH
59927: FOR_IN
59928: IFFALSE 59978
// begin un := UnitShoot ( i ) ;
59930: LD_ADDR_VAR 0 5
59934: PUSH
59935: LD_VAR 0 4
59939: PPUSH
59940: CALL_OW 504
59944: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59945: LD_VAR 0 5
59949: PPUSH
59950: CALL_OW 255
59954: PUSH
59955: LD_VAR 0 1
59959: EQUAL
59960: IFFALSE 59976
// begin result := un ;
59962: LD_ADDR_VAR 0 3
59966: PUSH
59967: LD_VAR 0 5
59971: ST_TO_ADDR
// exit ;
59972: POP
59973: POP
59974: GO 59980
// end ; end ;
59976: GO 59927
59978: POP
59979: POP
// end ;
59980: LD_VAR 0 3
59984: RET
// export function GetCargoBay ( units ) ; begin
59985: LD_INT 0
59987: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59988: LD_ADDR_VAR 0 2
59992: PUSH
59993: LD_VAR 0 1
59997: PPUSH
59998: LD_INT 2
60000: PUSH
60001: LD_INT 34
60003: PUSH
60004: LD_INT 12
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 34
60013: PUSH
60014: LD_INT 51
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 34
60023: PUSH
60024: LD_INT 32
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 34
60033: PUSH
60034: LD_INT 89
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: PPUSH
60048: CALL_OW 72
60052: ST_TO_ADDR
// end ;
60053: LD_VAR 0 2
60057: RET
// export function Negate ( value ) ; begin
60058: LD_INT 0
60060: PPUSH
// result := not value ;
60061: LD_ADDR_VAR 0 2
60065: PUSH
60066: LD_VAR 0 1
60070: NOT
60071: ST_TO_ADDR
// end ;
60072: LD_VAR 0 2
60076: RET
// export function Inc ( value ) ; begin
60077: LD_INT 0
60079: PPUSH
// result := value + 1 ;
60080: LD_ADDR_VAR 0 2
60084: PUSH
60085: LD_VAR 0 1
60089: PUSH
60090: LD_INT 1
60092: PLUS
60093: ST_TO_ADDR
// end ;
60094: LD_VAR 0 2
60098: RET
// export function Dec ( value ) ; begin
60099: LD_INT 0
60101: PPUSH
// result := value - 1 ;
60102: LD_ADDR_VAR 0 2
60106: PUSH
60107: LD_VAR 0 1
60111: PUSH
60112: LD_INT 1
60114: MINUS
60115: ST_TO_ADDR
// end ;
60116: LD_VAR 0 2
60120: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60121: LD_INT 0
60123: PPUSH
60124: PPUSH
60125: PPUSH
60126: PPUSH
60127: PPUSH
60128: PPUSH
60129: PPUSH
60130: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60131: LD_VAR 0 1
60135: PPUSH
60136: LD_VAR 0 2
60140: PPUSH
60141: CALL_OW 488
60145: NOT
60146: PUSH
60147: LD_VAR 0 3
60151: PPUSH
60152: LD_VAR 0 4
60156: PPUSH
60157: CALL_OW 488
60161: NOT
60162: OR
60163: IFFALSE 60176
// begin result := - 1 ;
60165: LD_ADDR_VAR 0 5
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: ST_TO_ADDR
// exit ;
60174: GO 60411
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60176: LD_ADDR_VAR 0 12
60180: PUSH
60181: LD_VAR 0 1
60185: PPUSH
60186: LD_VAR 0 2
60190: PPUSH
60191: LD_VAR 0 3
60195: PPUSH
60196: LD_VAR 0 4
60200: PPUSH
60201: CALL 59261 0 4
60205: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60206: LD_ADDR_VAR 0 11
60210: PUSH
60211: LD_VAR 0 1
60215: PPUSH
60216: LD_VAR 0 2
60220: PPUSH
60221: LD_VAR 0 12
60225: PUSH
60226: LD_INT 1
60228: ARRAY
60229: PPUSH
60230: LD_VAR 0 12
60234: PUSH
60235: LD_INT 2
60237: ARRAY
60238: PPUSH
60239: CALL_OW 298
60243: ST_TO_ADDR
// distance := 9999 ;
60244: LD_ADDR_VAR 0 10
60248: PUSH
60249: LD_INT 9999
60251: ST_TO_ADDR
// for i := 0 to 5 do
60252: LD_ADDR_VAR 0 6
60256: PUSH
60257: DOUBLE
60258: LD_INT 0
60260: DEC
60261: ST_TO_ADDR
60262: LD_INT 5
60264: PUSH
60265: FOR_TO
60266: IFFALSE 60409
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60268: LD_ADDR_VAR 0 7
60272: PUSH
60273: LD_VAR 0 1
60277: PPUSH
60278: LD_VAR 0 6
60282: PPUSH
60283: LD_VAR 0 11
60287: PPUSH
60288: CALL_OW 272
60292: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60293: LD_ADDR_VAR 0 8
60297: PUSH
60298: LD_VAR 0 2
60302: PPUSH
60303: LD_VAR 0 6
60307: PPUSH
60308: LD_VAR 0 11
60312: PPUSH
60313: CALL_OW 273
60317: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60318: LD_VAR 0 7
60322: PPUSH
60323: LD_VAR 0 8
60327: PPUSH
60328: CALL_OW 488
60332: NOT
60333: IFFALSE 60337
// continue ;
60335: GO 60265
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60337: LD_ADDR_VAR 0 9
60341: PUSH
60342: LD_VAR 0 12
60346: PUSH
60347: LD_INT 1
60349: ARRAY
60350: PPUSH
60351: LD_VAR 0 12
60355: PUSH
60356: LD_INT 2
60358: ARRAY
60359: PPUSH
60360: LD_VAR 0 7
60364: PPUSH
60365: LD_VAR 0 8
60369: PPUSH
60370: CALL_OW 298
60374: ST_TO_ADDR
// if tmp < distance then
60375: LD_VAR 0 9
60379: PUSH
60380: LD_VAR 0 10
60384: LESS
60385: IFFALSE 60407
// begin result := i ;
60387: LD_ADDR_VAR 0 5
60391: PUSH
60392: LD_VAR 0 6
60396: ST_TO_ADDR
// distance := tmp ;
60397: LD_ADDR_VAR 0 10
60401: PUSH
60402: LD_VAR 0 9
60406: ST_TO_ADDR
// end ; end ;
60407: GO 60265
60409: POP
60410: POP
// end ;
60411: LD_VAR 0 5
60415: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60416: LD_INT 0
60418: PPUSH
60419: PPUSH
// if not driver or not IsInUnit ( driver ) then
60420: LD_VAR 0 1
60424: NOT
60425: PUSH
60426: LD_VAR 0 1
60430: PPUSH
60431: CALL_OW 310
60435: NOT
60436: OR
60437: IFFALSE 60441
// exit ;
60439: GO 60531
// vehicle := IsInUnit ( driver ) ;
60441: LD_ADDR_VAR 0 3
60445: PUSH
60446: LD_VAR 0 1
60450: PPUSH
60451: CALL_OW 310
60455: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60456: LD_VAR 0 1
60460: PPUSH
60461: LD_STRING \
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: PUSH
60491: LD_STRING E
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_VAR 0 3
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PPUSH
60527: CALL_OW 446
// end ;
60531: LD_VAR 0 2
60535: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60536: LD_INT 0
60538: PPUSH
60539: PPUSH
// if not driver or not IsInUnit ( driver ) then
60540: LD_VAR 0 1
60544: NOT
60545: PUSH
60546: LD_VAR 0 1
60550: PPUSH
60551: CALL_OW 310
60555: NOT
60556: OR
60557: IFFALSE 60561
// exit ;
60559: GO 60651
// vehicle := IsInUnit ( driver ) ;
60561: LD_ADDR_VAR 0 3
60565: PUSH
60566: LD_VAR 0 1
60570: PPUSH
60571: CALL_OW 310
60575: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60576: LD_VAR 0 1
60580: PPUSH
60581: LD_STRING \
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: PUSH
60611: LD_STRING E
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_VAR 0 3
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PPUSH
60647: CALL_OW 447
// end ;
60651: LD_VAR 0 2
60655: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60656: LD_INT 0
60658: PPUSH
60659: PPUSH
60660: PPUSH
// tmp := [ ] ;
60661: LD_ADDR_VAR 0 5
60665: PUSH
60666: EMPTY
60667: ST_TO_ADDR
// for i in units do
60668: LD_ADDR_VAR 0 4
60672: PUSH
60673: LD_VAR 0 1
60677: PUSH
60678: FOR_IN
60679: IFFALSE 60717
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60681: LD_ADDR_VAR 0 5
60685: PUSH
60686: LD_VAR 0 5
60690: PPUSH
60691: LD_VAR 0 5
60695: PUSH
60696: LD_INT 1
60698: PLUS
60699: PPUSH
60700: LD_VAR 0 4
60704: PPUSH
60705: CALL_OW 256
60709: PPUSH
60710: CALL_OW 2
60714: ST_TO_ADDR
60715: GO 60678
60717: POP
60718: POP
// if not tmp then
60719: LD_VAR 0 5
60723: NOT
60724: IFFALSE 60728
// exit ;
60726: GO 60776
// if asc then
60728: LD_VAR 0 2
60732: IFFALSE 60756
// result := SortListByListAsc ( units , tmp ) else
60734: LD_ADDR_VAR 0 3
60738: PUSH
60739: LD_VAR 0 1
60743: PPUSH
60744: LD_VAR 0 5
60748: PPUSH
60749: CALL_OW 76
60753: ST_TO_ADDR
60754: GO 60776
// result := SortListByListDesc ( units , tmp ) ;
60756: LD_ADDR_VAR 0 3
60760: PUSH
60761: LD_VAR 0 1
60765: PPUSH
60766: LD_VAR 0 5
60770: PPUSH
60771: CALL_OW 77
60775: ST_TO_ADDR
// end ;
60776: LD_VAR 0 3
60780: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60781: LD_INT 0
60783: PPUSH
60784: PPUSH
// task := GetTaskList ( mech ) ;
60785: LD_ADDR_VAR 0 4
60789: PUSH
60790: LD_VAR 0 1
60794: PPUSH
60795: CALL_OW 437
60799: ST_TO_ADDR
// if not task then
60800: LD_VAR 0 4
60804: NOT
60805: IFFALSE 60809
// exit ;
60807: GO 60851
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60809: LD_ADDR_VAR 0 3
60813: PUSH
60814: LD_VAR 0 4
60818: PUSH
60819: LD_INT 1
60821: ARRAY
60822: PUSH
60823: LD_INT 1
60825: ARRAY
60826: PUSH
60827: LD_STRING r
60829: EQUAL
60830: PUSH
60831: LD_VAR 0 4
60835: PUSH
60836: LD_INT 1
60838: ARRAY
60839: PUSH
60840: LD_INT 4
60842: ARRAY
60843: PUSH
60844: LD_VAR 0 2
60848: EQUAL
60849: AND
60850: ST_TO_ADDR
// end ;
60851: LD_VAR 0 3
60855: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60856: LD_INT 0
60858: PPUSH
// SetDir ( unit , d ) ;
60859: LD_VAR 0 1
60863: PPUSH
60864: LD_VAR 0 4
60868: PPUSH
60869: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60873: LD_VAR 0 1
60877: PPUSH
60878: LD_VAR 0 2
60882: PPUSH
60883: LD_VAR 0 3
60887: PPUSH
60888: LD_VAR 0 5
60892: PPUSH
60893: CALL_OW 48
// end ;
60897: LD_VAR 0 6
60901: RET
// export function ToNaturalNumber ( number ) ; begin
60902: LD_INT 0
60904: PPUSH
// result := number div 1 ;
60905: LD_ADDR_VAR 0 2
60909: PUSH
60910: LD_VAR 0 1
60914: PUSH
60915: LD_INT 1
60917: DIV
60918: ST_TO_ADDR
// if number < 0 then
60919: LD_VAR 0 1
60923: PUSH
60924: LD_INT 0
60926: LESS
60927: IFFALSE 60937
// result := 0 ;
60929: LD_ADDR_VAR 0 2
60933: PUSH
60934: LD_INT 0
60936: ST_TO_ADDR
// end ;
60937: LD_VAR 0 2
60941: RET
// export function SortByClass ( units , class ) ; var un ; begin
60942: LD_INT 0
60944: PPUSH
60945: PPUSH
// if not units or not class then
60946: LD_VAR 0 1
60950: NOT
60951: PUSH
60952: LD_VAR 0 2
60956: NOT
60957: OR
60958: IFFALSE 60962
// exit ;
60960: GO 61057
// result := [ ] ;
60962: LD_ADDR_VAR 0 3
60966: PUSH
60967: EMPTY
60968: ST_TO_ADDR
// for un in units do
60969: LD_ADDR_VAR 0 4
60973: PUSH
60974: LD_VAR 0 1
60978: PUSH
60979: FOR_IN
60980: IFFALSE 61055
// if GetClass ( un ) = class then
60982: LD_VAR 0 4
60986: PPUSH
60987: CALL_OW 257
60991: PUSH
60992: LD_VAR 0 2
60996: EQUAL
60997: IFFALSE 61024
// result := Insert ( result , 1 , un ) else
60999: LD_ADDR_VAR 0 3
61003: PUSH
61004: LD_VAR 0 3
61008: PPUSH
61009: LD_INT 1
61011: PPUSH
61012: LD_VAR 0 4
61016: PPUSH
61017: CALL_OW 2
61021: ST_TO_ADDR
61022: GO 61053
// result := Replace ( result , result + 1 , un ) ;
61024: LD_ADDR_VAR 0 3
61028: PUSH
61029: LD_VAR 0 3
61033: PPUSH
61034: LD_VAR 0 3
61038: PUSH
61039: LD_INT 1
61041: PLUS
61042: PPUSH
61043: LD_VAR 0 4
61047: PPUSH
61048: CALL_OW 1
61052: ST_TO_ADDR
61053: GO 60979
61055: POP
61056: POP
// end ;
61057: LD_VAR 0 3
61061: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61062: LD_INT 0
61064: PPUSH
61065: PPUSH
61066: PPUSH
61067: PPUSH
61068: PPUSH
61069: PPUSH
61070: PPUSH
// result := [ ] ;
61071: LD_ADDR_VAR 0 4
61075: PUSH
61076: EMPTY
61077: ST_TO_ADDR
// if x - r < 0 then
61078: LD_VAR 0 1
61082: PUSH
61083: LD_VAR 0 3
61087: MINUS
61088: PUSH
61089: LD_INT 0
61091: LESS
61092: IFFALSE 61104
// min_x := 0 else
61094: LD_ADDR_VAR 0 8
61098: PUSH
61099: LD_INT 0
61101: ST_TO_ADDR
61102: GO 61120
// min_x := x - r ;
61104: LD_ADDR_VAR 0 8
61108: PUSH
61109: LD_VAR 0 1
61113: PUSH
61114: LD_VAR 0 3
61118: MINUS
61119: ST_TO_ADDR
// if y - r < 0 then
61120: LD_VAR 0 2
61124: PUSH
61125: LD_VAR 0 3
61129: MINUS
61130: PUSH
61131: LD_INT 0
61133: LESS
61134: IFFALSE 61146
// min_y := 0 else
61136: LD_ADDR_VAR 0 7
61140: PUSH
61141: LD_INT 0
61143: ST_TO_ADDR
61144: GO 61162
// min_y := y - r ;
61146: LD_ADDR_VAR 0 7
61150: PUSH
61151: LD_VAR 0 2
61155: PUSH
61156: LD_VAR 0 3
61160: MINUS
61161: ST_TO_ADDR
// max_x := x + r ;
61162: LD_ADDR_VAR 0 9
61166: PUSH
61167: LD_VAR 0 1
61171: PUSH
61172: LD_VAR 0 3
61176: PLUS
61177: ST_TO_ADDR
// max_y := y + r ;
61178: LD_ADDR_VAR 0 10
61182: PUSH
61183: LD_VAR 0 2
61187: PUSH
61188: LD_VAR 0 3
61192: PLUS
61193: ST_TO_ADDR
// for _x = min_x to max_x do
61194: LD_ADDR_VAR 0 5
61198: PUSH
61199: DOUBLE
61200: LD_VAR 0 8
61204: DEC
61205: ST_TO_ADDR
61206: LD_VAR 0 9
61210: PUSH
61211: FOR_TO
61212: IFFALSE 61313
// for _y = min_y to max_y do
61214: LD_ADDR_VAR 0 6
61218: PUSH
61219: DOUBLE
61220: LD_VAR 0 7
61224: DEC
61225: ST_TO_ADDR
61226: LD_VAR 0 10
61230: PUSH
61231: FOR_TO
61232: IFFALSE 61309
// begin if not ValidHex ( _x , _y ) then
61234: LD_VAR 0 5
61238: PPUSH
61239: LD_VAR 0 6
61243: PPUSH
61244: CALL_OW 488
61248: NOT
61249: IFFALSE 61253
// continue ;
61251: GO 61231
// if GetResourceTypeXY ( _x , _y ) then
61253: LD_VAR 0 5
61257: PPUSH
61258: LD_VAR 0 6
61262: PPUSH
61263: CALL_OW 283
61267: IFFALSE 61307
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61269: LD_ADDR_VAR 0 4
61273: PUSH
61274: LD_VAR 0 4
61278: PPUSH
61279: LD_VAR 0 4
61283: PUSH
61284: LD_INT 1
61286: PLUS
61287: PPUSH
61288: LD_VAR 0 5
61292: PUSH
61293: LD_VAR 0 6
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PPUSH
61302: CALL_OW 1
61306: ST_TO_ADDR
// end ;
61307: GO 61231
61309: POP
61310: POP
61311: GO 61211
61313: POP
61314: POP
// end ;
61315: LD_VAR 0 4
61319: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61320: LD_INT 0
61322: PPUSH
61323: PPUSH
61324: PPUSH
61325: PPUSH
61326: PPUSH
61327: PPUSH
61328: PPUSH
61329: PPUSH
// if not units then
61330: LD_VAR 0 1
61334: NOT
61335: IFFALSE 61339
// exit ;
61337: GO 61863
// result := UnitFilter ( units , [ f_ok ] ) ;
61339: LD_ADDR_VAR 0 3
61343: PUSH
61344: LD_VAR 0 1
61348: PPUSH
61349: LD_INT 50
61351: PUSH
61352: EMPTY
61353: LIST
61354: PPUSH
61355: CALL_OW 72
61359: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61360: LD_ADDR_VAR 0 8
61364: PUSH
61365: LD_VAR 0 1
61369: PUSH
61370: LD_INT 1
61372: ARRAY
61373: PPUSH
61374: CALL_OW 255
61378: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61379: LD_ADDR_VAR 0 10
61383: PUSH
61384: LD_INT 29
61386: PUSH
61387: LD_INT 91
61389: PUSH
61390: LD_INT 49
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: LIST
61397: ST_TO_ADDR
// if not result then
61398: LD_VAR 0 3
61402: NOT
61403: IFFALSE 61407
// exit ;
61405: GO 61863
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61407: LD_ADDR_VAR 0 5
61411: PUSH
61412: LD_INT 81
61414: PUSH
61415: LD_VAR 0 8
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PPUSH
61424: CALL_OW 69
61428: ST_TO_ADDR
// for i in result do
61429: LD_ADDR_VAR 0 4
61433: PUSH
61434: LD_VAR 0 3
61438: PUSH
61439: FOR_IN
61440: IFFALSE 61861
// begin tag := GetTag ( i ) + 1 ;
61442: LD_ADDR_VAR 0 9
61446: PUSH
61447: LD_VAR 0 4
61451: PPUSH
61452: CALL_OW 110
61456: PUSH
61457: LD_INT 1
61459: PLUS
61460: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61461: LD_ADDR_VAR 0 7
61465: PUSH
61466: LD_VAR 0 4
61470: PPUSH
61471: CALL_OW 250
61475: PPUSH
61476: LD_VAR 0 4
61480: PPUSH
61481: CALL_OW 251
61485: PPUSH
61486: LD_INT 6
61488: PPUSH
61489: CALL 61062 0 3
61493: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61494: LD_VAR 0 4
61498: PPUSH
61499: CALL_OW 247
61503: PUSH
61504: LD_INT 2
61506: EQUAL
61507: PUSH
61508: LD_VAR 0 7
61512: AND
61513: PUSH
61514: LD_VAR 0 4
61518: PPUSH
61519: CALL_OW 264
61523: PUSH
61524: LD_VAR 0 10
61528: IN
61529: NOT
61530: AND
61531: IFFALSE 61570
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61533: LD_VAR 0 4
61537: PPUSH
61538: LD_VAR 0 7
61542: PUSH
61543: LD_INT 1
61545: ARRAY
61546: PUSH
61547: LD_INT 1
61549: ARRAY
61550: PPUSH
61551: LD_VAR 0 7
61555: PUSH
61556: LD_INT 1
61558: ARRAY
61559: PUSH
61560: LD_INT 2
61562: ARRAY
61563: PPUSH
61564: CALL_OW 116
61568: GO 61859
// if path > tag then
61570: LD_VAR 0 2
61574: PUSH
61575: LD_VAR 0 9
61579: GREATER
61580: IFFALSE 61788
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61582: LD_ADDR_VAR 0 6
61586: PUSH
61587: LD_VAR 0 5
61591: PPUSH
61592: LD_INT 91
61594: PUSH
61595: LD_VAR 0 4
61599: PUSH
61600: LD_INT 8
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: LIST
61607: PPUSH
61608: CALL_OW 72
61612: ST_TO_ADDR
// if nearEnemy then
61613: LD_VAR 0 6
61617: IFFALSE 61686
// begin if GetWeapon ( i ) = ru_time_lapser then
61619: LD_VAR 0 4
61623: PPUSH
61624: CALL_OW 264
61628: PUSH
61629: LD_INT 49
61631: EQUAL
61632: IFFALSE 61660
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61634: LD_VAR 0 4
61638: PPUSH
61639: LD_VAR 0 6
61643: PPUSH
61644: LD_VAR 0 4
61648: PPUSH
61649: CALL_OW 74
61653: PPUSH
61654: CALL_OW 112
61658: GO 61684
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61660: LD_VAR 0 4
61664: PPUSH
61665: LD_VAR 0 6
61669: PPUSH
61670: LD_VAR 0 4
61674: PPUSH
61675: CALL_OW 74
61679: PPUSH
61680: CALL_OW 115
// end else
61684: GO 61786
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61686: LD_VAR 0 4
61690: PPUSH
61691: LD_VAR 0 2
61695: PUSH
61696: LD_VAR 0 9
61700: ARRAY
61701: PUSH
61702: LD_INT 1
61704: ARRAY
61705: PPUSH
61706: LD_VAR 0 2
61710: PUSH
61711: LD_VAR 0 9
61715: ARRAY
61716: PUSH
61717: LD_INT 2
61719: ARRAY
61720: PPUSH
61721: CALL_OW 297
61725: PUSH
61726: LD_INT 6
61728: GREATER
61729: IFFALSE 61772
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61731: LD_VAR 0 4
61735: PPUSH
61736: LD_VAR 0 2
61740: PUSH
61741: LD_VAR 0 9
61745: ARRAY
61746: PUSH
61747: LD_INT 1
61749: ARRAY
61750: PPUSH
61751: LD_VAR 0 2
61755: PUSH
61756: LD_VAR 0 9
61760: ARRAY
61761: PUSH
61762: LD_INT 2
61764: ARRAY
61765: PPUSH
61766: CALL_OW 114
61770: GO 61786
// SetTag ( i , tag ) ;
61772: LD_VAR 0 4
61776: PPUSH
61777: LD_VAR 0 9
61781: PPUSH
61782: CALL_OW 109
// end else
61786: GO 61859
// if enemy then
61788: LD_VAR 0 5
61792: IFFALSE 61859
// begin if GetWeapon ( i ) = ru_time_lapser then
61794: LD_VAR 0 4
61798: PPUSH
61799: CALL_OW 264
61803: PUSH
61804: LD_INT 49
61806: EQUAL
61807: IFFALSE 61835
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61809: LD_VAR 0 4
61813: PPUSH
61814: LD_VAR 0 5
61818: PPUSH
61819: LD_VAR 0 4
61823: PPUSH
61824: CALL_OW 74
61828: PPUSH
61829: CALL_OW 112
61833: GO 61859
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61835: LD_VAR 0 4
61839: PPUSH
61840: LD_VAR 0 5
61844: PPUSH
61845: LD_VAR 0 4
61849: PPUSH
61850: CALL_OW 74
61854: PPUSH
61855: CALL_OW 115
// end ; end ;
61859: GO 61439
61861: POP
61862: POP
// end ;
61863: LD_VAR 0 3
61867: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61868: LD_INT 0
61870: PPUSH
61871: PPUSH
61872: PPUSH
// if not unit or IsInUnit ( unit ) then
61873: LD_VAR 0 1
61877: NOT
61878: PUSH
61879: LD_VAR 0 1
61883: PPUSH
61884: CALL_OW 310
61888: OR
61889: IFFALSE 61893
// exit ;
61891: GO 61984
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61893: LD_ADDR_VAR 0 4
61897: PUSH
61898: LD_VAR 0 1
61902: PPUSH
61903: CALL_OW 250
61907: PPUSH
61908: LD_VAR 0 2
61912: PPUSH
61913: LD_INT 1
61915: PPUSH
61916: CALL_OW 272
61920: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61921: LD_ADDR_VAR 0 5
61925: PUSH
61926: LD_VAR 0 1
61930: PPUSH
61931: CALL_OW 251
61935: PPUSH
61936: LD_VAR 0 2
61940: PPUSH
61941: LD_INT 1
61943: PPUSH
61944: CALL_OW 273
61948: ST_TO_ADDR
// if ValidHex ( x , y ) then
61949: LD_VAR 0 4
61953: PPUSH
61954: LD_VAR 0 5
61958: PPUSH
61959: CALL_OW 488
61963: IFFALSE 61984
// ComTurnXY ( unit , x , y ) ;
61965: LD_VAR 0 1
61969: PPUSH
61970: LD_VAR 0 4
61974: PPUSH
61975: LD_VAR 0 5
61979: PPUSH
61980: CALL_OW 118
// end ;
61984: LD_VAR 0 3
61988: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61989: LD_INT 0
61991: PPUSH
61992: PPUSH
// result := false ;
61993: LD_ADDR_VAR 0 3
61997: PUSH
61998: LD_INT 0
62000: ST_TO_ADDR
// if not units then
62001: LD_VAR 0 2
62005: NOT
62006: IFFALSE 62010
// exit ;
62008: GO 62055
// for i in units do
62010: LD_ADDR_VAR 0 4
62014: PUSH
62015: LD_VAR 0 2
62019: PUSH
62020: FOR_IN
62021: IFFALSE 62053
// if See ( side , i ) then
62023: LD_VAR 0 1
62027: PPUSH
62028: LD_VAR 0 4
62032: PPUSH
62033: CALL_OW 292
62037: IFFALSE 62051
// begin result := true ;
62039: LD_ADDR_VAR 0 3
62043: PUSH
62044: LD_INT 1
62046: ST_TO_ADDR
// exit ;
62047: POP
62048: POP
62049: GO 62055
// end ;
62051: GO 62020
62053: POP
62054: POP
// end ;
62055: LD_VAR 0 3
62059: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62060: LD_INT 0
62062: PPUSH
62063: PPUSH
62064: PPUSH
62065: PPUSH
// if not unit or not points then
62066: LD_VAR 0 1
62070: NOT
62071: PUSH
62072: LD_VAR 0 2
62076: NOT
62077: OR
62078: IFFALSE 62082
// exit ;
62080: GO 62172
// dist := 99999 ;
62082: LD_ADDR_VAR 0 5
62086: PUSH
62087: LD_INT 99999
62089: ST_TO_ADDR
// for i in points do
62090: LD_ADDR_VAR 0 4
62094: PUSH
62095: LD_VAR 0 2
62099: PUSH
62100: FOR_IN
62101: IFFALSE 62170
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62103: LD_ADDR_VAR 0 6
62107: PUSH
62108: LD_VAR 0 1
62112: PPUSH
62113: LD_VAR 0 4
62117: PUSH
62118: LD_INT 1
62120: ARRAY
62121: PPUSH
62122: LD_VAR 0 4
62126: PUSH
62127: LD_INT 2
62129: ARRAY
62130: PPUSH
62131: CALL_OW 297
62135: ST_TO_ADDR
// if tmpDist < dist then
62136: LD_VAR 0 6
62140: PUSH
62141: LD_VAR 0 5
62145: LESS
62146: IFFALSE 62168
// begin result := i ;
62148: LD_ADDR_VAR 0 3
62152: PUSH
62153: LD_VAR 0 4
62157: ST_TO_ADDR
// dist := tmpDist ;
62158: LD_ADDR_VAR 0 5
62162: PUSH
62163: LD_VAR 0 6
62167: ST_TO_ADDR
// end ; end ;
62168: GO 62100
62170: POP
62171: POP
// end ;
62172: LD_VAR 0 3
62176: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62177: LD_INT 0
62179: PPUSH
// uc_side := side ;
62180: LD_ADDR_OWVAR 20
62184: PUSH
62185: LD_VAR 0 1
62189: ST_TO_ADDR
// uc_nation := 3 ;
62190: LD_ADDR_OWVAR 21
62194: PUSH
62195: LD_INT 3
62197: ST_TO_ADDR
// vc_chassis := 25 ;
62198: LD_ADDR_OWVAR 37
62202: PUSH
62203: LD_INT 25
62205: ST_TO_ADDR
// vc_engine := engine_siberite ;
62206: LD_ADDR_OWVAR 39
62210: PUSH
62211: LD_INT 3
62213: ST_TO_ADDR
// vc_control := control_computer ;
62214: LD_ADDR_OWVAR 38
62218: PUSH
62219: LD_INT 3
62221: ST_TO_ADDR
// vc_weapon := 59 ;
62222: LD_ADDR_OWVAR 40
62226: PUSH
62227: LD_INT 59
62229: ST_TO_ADDR
// result := CreateVehicle ;
62230: LD_ADDR_VAR 0 5
62234: PUSH
62235: CALL_OW 45
62239: ST_TO_ADDR
// SetDir ( result , d ) ;
62240: LD_VAR 0 5
62244: PPUSH
62245: LD_VAR 0 4
62249: PPUSH
62250: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62254: LD_VAR 0 5
62258: PPUSH
62259: LD_VAR 0 2
62263: PPUSH
62264: LD_VAR 0 3
62268: PPUSH
62269: LD_INT 0
62271: PPUSH
62272: CALL_OW 48
// end ;
62276: LD_VAR 0 5
62280: RET
// export function GetMultiCargo ( export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
62281: LD_INT 0
62283: PPUSH
62284: PPUSH
62285: PPUSH
62286: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
62287: LD_VAR 0 1
62291: PPUSH
62292: CALL_OW 264
62296: PUSH
62297: LD_INT 91
62299: EQUAL
62300: IFFALSE 62372
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
62302: LD_INT 68
62304: PPUSH
62305: LD_VAR 0 1
62309: PPUSH
62310: CALL_OW 255
62314: PPUSH
62315: CALL_OW 321
62319: PUSH
62320: LD_INT 2
62322: EQUAL
62323: IFFALSE 62335
// eff := 70 else
62325: LD_ADDR_VAR 0 4
62329: PUSH
62330: LD_INT 70
62332: ST_TO_ADDR
62333: GO 62343
// eff := 30 ;
62335: LD_ADDR_VAR 0 4
62339: PUSH
62340: LD_INT 30
62342: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62343: LD_VAR 0 1
62347: PPUSH
62348: CALL_OW 250
62352: PPUSH
62353: LD_VAR 0 1
62357: PPUSH
62358: CALL_OW 251
62362: PPUSH
62363: LD_VAR 0 4
62367: PPUSH
62368: CALL_OW 495
// end ; end ;
62372: LD_VAR 0 2
62376: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
62377: LD_INT 0
62379: PPUSH
// end ;
62380: LD_VAR 0 4
62384: RET
// export function SOS_Command ( cmd ) ; begin
62385: LD_INT 0
62387: PPUSH
// end ;
62388: LD_VAR 0 2
62392: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62393: LD_INT 0
62395: PPUSH
// end ;
62396: LD_VAR 0 6
62400: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
62401: LD_INT 0
62403: PPUSH
62404: PPUSH
// if not vehicle or not factory then
62405: LD_VAR 0 1
62409: NOT
62410: PUSH
62411: LD_VAR 0 2
62415: NOT
62416: OR
62417: IFFALSE 62421
// exit ;
62419: GO 62652
// if factoryWaypoints >= factory then
62421: LD_EXP 128
62425: PUSH
62426: LD_VAR 0 2
62430: GREATEREQUAL
62431: IFFALSE 62652
// if factoryWaypoints [ factory ] then
62433: LD_EXP 128
62437: PUSH
62438: LD_VAR 0 2
62442: ARRAY
62443: IFFALSE 62652
// begin if GetControl ( vehicle ) = control_manual then
62445: LD_VAR 0 1
62449: PPUSH
62450: CALL_OW 263
62454: PUSH
62455: LD_INT 1
62457: EQUAL
62458: IFFALSE 62539
// begin driver := IsDrivenBy ( vehicle ) ;
62460: LD_ADDR_VAR 0 4
62464: PUSH
62465: LD_VAR 0 1
62469: PPUSH
62470: CALL_OW 311
62474: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62475: LD_VAR 0 4
62479: PPUSH
62480: LD_EXP 128
62484: PUSH
62485: LD_VAR 0 2
62489: ARRAY
62490: PUSH
62491: LD_INT 3
62493: ARRAY
62494: PPUSH
62495: LD_EXP 128
62499: PUSH
62500: LD_VAR 0 2
62504: ARRAY
62505: PUSH
62506: LD_INT 4
62508: ARRAY
62509: PPUSH
62510: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62514: LD_VAR 0 4
62518: PPUSH
62519: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62523: LD_VAR 0 4
62527: PPUSH
62528: LD_VAR 0 2
62532: PPUSH
62533: CALL_OW 180
// end else
62537: GO 62652
// if GetControl ( vehicle ) = control_remote then
62539: LD_VAR 0 1
62543: PPUSH
62544: CALL_OW 263
62548: PUSH
62549: LD_INT 2
62551: EQUAL
62552: IFFALSE 62613
// begin wait ( 0 0$2 ) ;
62554: LD_INT 70
62556: PPUSH
62557: CALL_OW 67
// if Connect ( vehicle ) then
62561: LD_VAR 0 1
62565: PPUSH
62566: CALL 29354 0 1
62570: IFFALSE 62611
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62572: LD_VAR 0 1
62576: PPUSH
62577: LD_EXP 128
62581: PUSH
62582: LD_VAR 0 2
62586: ARRAY
62587: PUSH
62588: LD_INT 3
62590: ARRAY
62591: PPUSH
62592: LD_EXP 128
62596: PUSH
62597: LD_VAR 0 2
62601: ARRAY
62602: PUSH
62603: LD_INT 4
62605: ARRAY
62606: PPUSH
62607: CALL_OW 171
// end else
62611: GO 62652
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62613: LD_VAR 0 1
62617: PPUSH
62618: LD_EXP 128
62622: PUSH
62623: LD_VAR 0 2
62627: ARRAY
62628: PUSH
62629: LD_INT 3
62631: ARRAY
62632: PPUSH
62633: LD_EXP 128
62637: PUSH
62638: LD_VAR 0 2
62642: ARRAY
62643: PUSH
62644: LD_INT 4
62646: ARRAY
62647: PPUSH
62648: CALL_OW 171
// end ; end ;
62652: LD_VAR 0 3
62656: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62657: LD_INT 0
62659: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62660: LD_VAR 0 1
62664: PUSH
62665: LD_INT 250
62667: EQUAL
62668: PUSH
62669: LD_VAR 0 2
62673: PPUSH
62674: CALL_OW 264
62678: PUSH
62679: LD_INT 81
62681: EQUAL
62682: AND
62683: IFFALSE 62704
// MinerPlaceMine ( unit , x , y ) ;
62685: LD_VAR 0 2
62689: PPUSH
62690: LD_VAR 0 4
62694: PPUSH
62695: LD_VAR 0 5
62699: PPUSH
62700: CALL 65089 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62704: LD_VAR 0 1
62708: PUSH
62709: LD_INT 251
62711: EQUAL
62712: PUSH
62713: LD_VAR 0 2
62717: PPUSH
62718: CALL_OW 264
62722: PUSH
62723: LD_INT 81
62725: EQUAL
62726: AND
62727: IFFALSE 62748
// MinerDetonateMine ( unit , x , y ) ;
62729: LD_VAR 0 2
62733: PPUSH
62734: LD_VAR 0 4
62738: PPUSH
62739: LD_VAR 0 5
62743: PPUSH
62744: CALL 65364 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62748: LD_VAR 0 1
62752: PUSH
62753: LD_INT 252
62755: EQUAL
62756: PUSH
62757: LD_VAR 0 2
62761: PPUSH
62762: CALL_OW 264
62766: PUSH
62767: LD_INT 81
62769: EQUAL
62770: AND
62771: IFFALSE 62792
// MinerCreateMinefield ( unit , x , y ) ;
62773: LD_VAR 0 2
62777: PPUSH
62778: LD_VAR 0 4
62782: PPUSH
62783: LD_VAR 0 5
62787: PPUSH
62788: CALL 65781 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62792: LD_VAR 0 1
62796: PUSH
62797: LD_INT 253
62799: EQUAL
62800: PUSH
62801: LD_VAR 0 2
62805: PPUSH
62806: CALL_OW 257
62810: PUSH
62811: LD_INT 5
62813: EQUAL
62814: AND
62815: IFFALSE 62836
// ComBinocular ( unit , x , y ) ;
62817: LD_VAR 0 2
62821: PPUSH
62822: LD_VAR 0 4
62826: PPUSH
62827: LD_VAR 0 5
62831: PPUSH
62832: CALL 66150 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62836: LD_VAR 0 1
62840: PUSH
62841: LD_INT 254
62843: EQUAL
62844: PUSH
62845: LD_VAR 0 2
62849: PPUSH
62850: CALL_OW 264
62854: PUSH
62855: LD_INT 99
62857: EQUAL
62858: AND
62859: PUSH
62860: LD_VAR 0 3
62864: PPUSH
62865: CALL_OW 263
62869: PUSH
62870: LD_INT 3
62872: EQUAL
62873: AND
62874: IFFALSE 62890
// HackDestroyVehicle ( unit , selectedUnit ) ;
62876: LD_VAR 0 2
62880: PPUSH
62881: LD_VAR 0 3
62885: PPUSH
62886: CALL 64453 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62890: LD_VAR 0 1
62894: PUSH
62895: LD_INT 255
62897: EQUAL
62898: PUSH
62899: LD_VAR 0 2
62903: PPUSH
62904: CALL_OW 264
62908: PUSH
62909: LD_INT 14
62911: PUSH
62912: LD_INT 53
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: IN
62919: AND
62920: PUSH
62921: LD_VAR 0 4
62925: PPUSH
62926: LD_VAR 0 5
62930: PPUSH
62931: CALL_OW 488
62935: AND
62936: IFFALSE 62960
// CutTreeXYR ( unit , x , y , 12 ) ;
62938: LD_VAR 0 2
62942: PPUSH
62943: LD_VAR 0 4
62947: PPUSH
62948: LD_VAR 0 5
62952: PPUSH
62953: LD_INT 12
62955: PPUSH
62956: CALL 63023 0 4
// if cmd = 256 then
62960: LD_VAR 0 1
62964: PUSH
62965: LD_INT 256
62967: EQUAL
62968: IFFALSE 62989
// SetFactoryWaypoint ( unit , x , y ) ;
62970: LD_VAR 0 2
62974: PPUSH
62975: LD_VAR 0 4
62979: PPUSH
62980: LD_VAR 0 5
62984: PPUSH
62985: CALL 81053 0 3
// if cmd = 257 then
62989: LD_VAR 0 1
62993: PUSH
62994: LD_INT 257
62996: EQUAL
62997: IFFALSE 63018
// SetWarehouseGatheringPoint ( unit , x , y ) ;
62999: LD_VAR 0 2
63003: PPUSH
63004: LD_VAR 0 4
63008: PPUSH
63009: LD_VAR 0 5
63013: PPUSH
63014: CALL 81415 0 3
// end ;
63018: LD_VAR 0 6
63022: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
63023: LD_INT 0
63025: PPUSH
63026: PPUSH
63027: PPUSH
63028: PPUSH
63029: PPUSH
63030: PPUSH
63031: PPUSH
63032: PPUSH
63033: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
63034: LD_VAR 0 1
63038: NOT
63039: PUSH
63040: LD_VAR 0 2
63044: PPUSH
63045: LD_VAR 0 3
63049: PPUSH
63050: CALL_OW 488
63054: NOT
63055: OR
63056: PUSH
63057: LD_VAR 0 4
63061: NOT
63062: OR
63063: IFFALSE 63067
// exit ;
63065: GO 63407
// list := [ ] ;
63067: LD_ADDR_VAR 0 13
63071: PUSH
63072: EMPTY
63073: ST_TO_ADDR
// if x - r < 0 then
63074: LD_VAR 0 2
63078: PUSH
63079: LD_VAR 0 4
63083: MINUS
63084: PUSH
63085: LD_INT 0
63087: LESS
63088: IFFALSE 63100
// min_x := 0 else
63090: LD_ADDR_VAR 0 7
63094: PUSH
63095: LD_INT 0
63097: ST_TO_ADDR
63098: GO 63116
// min_x := x - r ;
63100: LD_ADDR_VAR 0 7
63104: PUSH
63105: LD_VAR 0 2
63109: PUSH
63110: LD_VAR 0 4
63114: MINUS
63115: ST_TO_ADDR
// if y - r < 0 then
63116: LD_VAR 0 3
63120: PUSH
63121: LD_VAR 0 4
63125: MINUS
63126: PUSH
63127: LD_INT 0
63129: LESS
63130: IFFALSE 63142
// min_y := 0 else
63132: LD_ADDR_VAR 0 8
63136: PUSH
63137: LD_INT 0
63139: ST_TO_ADDR
63140: GO 63158
// min_y := y - r ;
63142: LD_ADDR_VAR 0 8
63146: PUSH
63147: LD_VAR 0 3
63151: PUSH
63152: LD_VAR 0 4
63156: MINUS
63157: ST_TO_ADDR
// max_x := x + r ;
63158: LD_ADDR_VAR 0 9
63162: PUSH
63163: LD_VAR 0 2
63167: PUSH
63168: LD_VAR 0 4
63172: PLUS
63173: ST_TO_ADDR
// max_y := y + r ;
63174: LD_ADDR_VAR 0 10
63178: PUSH
63179: LD_VAR 0 3
63183: PUSH
63184: LD_VAR 0 4
63188: PLUS
63189: ST_TO_ADDR
// for _x = min_x to max_x do
63190: LD_ADDR_VAR 0 11
63194: PUSH
63195: DOUBLE
63196: LD_VAR 0 7
63200: DEC
63201: ST_TO_ADDR
63202: LD_VAR 0 9
63206: PUSH
63207: FOR_TO
63208: IFFALSE 63325
// for _y = min_y to max_y do
63210: LD_ADDR_VAR 0 12
63214: PUSH
63215: DOUBLE
63216: LD_VAR 0 8
63220: DEC
63221: ST_TO_ADDR
63222: LD_VAR 0 10
63226: PUSH
63227: FOR_TO
63228: IFFALSE 63321
// begin if not ValidHex ( _x , _y ) then
63230: LD_VAR 0 11
63234: PPUSH
63235: LD_VAR 0 12
63239: PPUSH
63240: CALL_OW 488
63244: NOT
63245: IFFALSE 63249
// continue ;
63247: GO 63227
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63249: LD_VAR 0 11
63253: PPUSH
63254: LD_VAR 0 12
63258: PPUSH
63259: CALL_OW 351
63263: PUSH
63264: LD_VAR 0 11
63268: PPUSH
63269: LD_VAR 0 12
63273: PPUSH
63274: CALL_OW 554
63278: AND
63279: IFFALSE 63319
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63281: LD_ADDR_VAR 0 13
63285: PUSH
63286: LD_VAR 0 13
63290: PPUSH
63291: LD_VAR 0 13
63295: PUSH
63296: LD_INT 1
63298: PLUS
63299: PPUSH
63300: LD_VAR 0 11
63304: PUSH
63305: LD_VAR 0 12
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PPUSH
63314: CALL_OW 2
63318: ST_TO_ADDR
// end ;
63319: GO 63227
63321: POP
63322: POP
63323: GO 63207
63325: POP
63326: POP
// if not list then
63327: LD_VAR 0 13
63331: NOT
63332: IFFALSE 63336
// exit ;
63334: GO 63407
// for i in list do
63336: LD_ADDR_VAR 0 6
63340: PUSH
63341: LD_VAR 0 13
63345: PUSH
63346: FOR_IN
63347: IFFALSE 63405
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
63349: LD_VAR 0 1
63353: PPUSH
63354: LD_STRING M
63356: PUSH
63357: LD_VAR 0 6
63361: PUSH
63362: LD_INT 1
63364: ARRAY
63365: PUSH
63366: LD_VAR 0 6
63370: PUSH
63371: LD_INT 2
63373: ARRAY
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: PUSH
63396: EMPTY
63397: LIST
63398: PPUSH
63399: CALL_OW 447
63403: GO 63346
63405: POP
63406: POP
// end ;
63407: LD_VAR 0 5
63411: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
63412: LD_EXP 59
63416: NOT
63417: IFFALSE 63467
63419: GO 63421
63421: DISABLE
// begin initHack := true ;
63422: LD_ADDR_EXP 59
63426: PUSH
63427: LD_INT 1
63429: ST_TO_ADDR
// hackTanks := [ ] ;
63430: LD_ADDR_EXP 60
63434: PUSH
63435: EMPTY
63436: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63437: LD_ADDR_EXP 61
63441: PUSH
63442: EMPTY
63443: ST_TO_ADDR
// hackLimit := 3 ;
63444: LD_ADDR_EXP 62
63448: PUSH
63449: LD_INT 3
63451: ST_TO_ADDR
// hackDist := 12 ;
63452: LD_ADDR_EXP 63
63456: PUSH
63457: LD_INT 12
63459: ST_TO_ADDR
// hackCounter := [ ] ;
63460: LD_ADDR_EXP 64
63464: PUSH
63465: EMPTY
63466: ST_TO_ADDR
// end ;
63467: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63468: LD_EXP 59
63472: PUSH
63473: LD_INT 34
63475: PUSH
63476: LD_INT 99
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PPUSH
63483: CALL_OW 69
63487: AND
63488: IFFALSE 63741
63490: GO 63492
63492: DISABLE
63493: LD_INT 0
63495: PPUSH
63496: PPUSH
// begin enable ;
63497: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63498: LD_ADDR_VAR 0 1
63502: PUSH
63503: LD_INT 34
63505: PUSH
63506: LD_INT 99
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PPUSH
63513: CALL_OW 69
63517: PUSH
63518: FOR_IN
63519: IFFALSE 63739
// begin if not i in hackTanks then
63521: LD_VAR 0 1
63525: PUSH
63526: LD_EXP 60
63530: IN
63531: NOT
63532: IFFALSE 63615
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63534: LD_ADDR_EXP 60
63538: PUSH
63539: LD_EXP 60
63543: PPUSH
63544: LD_EXP 60
63548: PUSH
63549: LD_INT 1
63551: PLUS
63552: PPUSH
63553: LD_VAR 0 1
63557: PPUSH
63558: CALL_OW 1
63562: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63563: LD_ADDR_EXP 61
63567: PUSH
63568: LD_EXP 61
63572: PPUSH
63573: LD_EXP 61
63577: PUSH
63578: LD_INT 1
63580: PLUS
63581: PPUSH
63582: EMPTY
63583: PPUSH
63584: CALL_OW 1
63588: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63589: LD_ADDR_EXP 64
63593: PUSH
63594: LD_EXP 64
63598: PPUSH
63599: LD_EXP 64
63603: PUSH
63604: LD_INT 1
63606: PLUS
63607: PPUSH
63608: EMPTY
63609: PPUSH
63610: CALL_OW 1
63614: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63615: LD_VAR 0 1
63619: PPUSH
63620: CALL_OW 302
63624: NOT
63625: IFFALSE 63638
// begin HackUnlinkAll ( i ) ;
63627: LD_VAR 0 1
63631: PPUSH
63632: CALL 63744 0 1
// continue ;
63636: GO 63518
// end ; HackCheckCapturedStatus ( i ) ;
63638: LD_VAR 0 1
63642: PPUSH
63643: CALL 64187 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63647: LD_ADDR_VAR 0 2
63651: PUSH
63652: LD_INT 81
63654: PUSH
63655: LD_VAR 0 1
63659: PPUSH
63660: CALL_OW 255
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 33
63671: PUSH
63672: LD_INT 3
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 91
63681: PUSH
63682: LD_VAR 0 1
63686: PUSH
63687: LD_EXP 63
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 50
63699: PUSH
63700: EMPTY
63701: LIST
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: PPUSH
63709: CALL_OW 69
63713: ST_TO_ADDR
// if not tmp then
63714: LD_VAR 0 2
63718: NOT
63719: IFFALSE 63723
// continue ;
63721: GO 63518
// HackLink ( i , tmp ) ;
63723: LD_VAR 0 1
63727: PPUSH
63728: LD_VAR 0 2
63732: PPUSH
63733: CALL 63880 0 2
// end ;
63737: GO 63518
63739: POP
63740: POP
// end ;
63741: PPOPN 2
63743: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63744: LD_INT 0
63746: PPUSH
63747: PPUSH
63748: PPUSH
// if not hack in hackTanks then
63749: LD_VAR 0 1
63753: PUSH
63754: LD_EXP 60
63758: IN
63759: NOT
63760: IFFALSE 63764
// exit ;
63762: GO 63875
// index := GetElementIndex ( hackTanks , hack ) ;
63764: LD_ADDR_VAR 0 4
63768: PUSH
63769: LD_EXP 60
63773: PPUSH
63774: LD_VAR 0 1
63778: PPUSH
63779: CALL 26170 0 2
63783: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63784: LD_EXP 61
63788: PUSH
63789: LD_VAR 0 4
63793: ARRAY
63794: IFFALSE 63875
// begin for i in hackTanksCaptured [ index ] do
63796: LD_ADDR_VAR 0 3
63800: PUSH
63801: LD_EXP 61
63805: PUSH
63806: LD_VAR 0 4
63810: ARRAY
63811: PUSH
63812: FOR_IN
63813: IFFALSE 63839
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63815: LD_VAR 0 3
63819: PUSH
63820: LD_INT 1
63822: ARRAY
63823: PPUSH
63824: LD_VAR 0 3
63828: PUSH
63829: LD_INT 2
63831: ARRAY
63832: PPUSH
63833: CALL_OW 235
63837: GO 63812
63839: POP
63840: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63841: LD_ADDR_EXP 61
63845: PUSH
63846: LD_EXP 61
63850: PPUSH
63851: LD_VAR 0 4
63855: PPUSH
63856: EMPTY
63857: PPUSH
63858: CALL_OW 1
63862: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_INT 0
63870: PPUSH
63871: CALL_OW 505
// end ; end ;
63875: LD_VAR 0 2
63879: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63880: LD_INT 0
63882: PPUSH
63883: PPUSH
63884: PPUSH
// if not hack in hackTanks or not vehicles then
63885: LD_VAR 0 1
63889: PUSH
63890: LD_EXP 60
63894: IN
63895: NOT
63896: PUSH
63897: LD_VAR 0 2
63901: NOT
63902: OR
63903: IFFALSE 63907
// exit ;
63905: GO 64182
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63907: LD_ADDR_VAR 0 2
63911: PUSH
63912: LD_VAR 0 1
63916: PPUSH
63917: LD_VAR 0 2
63921: PPUSH
63922: LD_INT 1
63924: PPUSH
63925: LD_INT 1
63927: PPUSH
63928: CALL 26820 0 4
63932: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63933: LD_ADDR_VAR 0 5
63937: PUSH
63938: LD_EXP 60
63942: PPUSH
63943: LD_VAR 0 1
63947: PPUSH
63948: CALL 26170 0 2
63952: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63953: LD_EXP 61
63957: PUSH
63958: LD_VAR 0 5
63962: ARRAY
63963: PUSH
63964: LD_EXP 62
63968: LESS
63969: IFFALSE 64158
// begin for i := 1 to vehicles do
63971: LD_ADDR_VAR 0 4
63975: PUSH
63976: DOUBLE
63977: LD_INT 1
63979: DEC
63980: ST_TO_ADDR
63981: LD_VAR 0 2
63985: PUSH
63986: FOR_TO
63987: IFFALSE 64156
// begin if hackTanksCaptured [ index ] = hackLimit then
63989: LD_EXP 61
63993: PUSH
63994: LD_VAR 0 5
63998: ARRAY
63999: PUSH
64000: LD_EXP 62
64004: EQUAL
64005: IFFALSE 64009
// break ;
64007: GO 64156
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
64009: LD_ADDR_EXP 64
64013: PUSH
64014: LD_EXP 64
64018: PPUSH
64019: LD_VAR 0 5
64023: PPUSH
64024: LD_EXP 64
64028: PUSH
64029: LD_VAR 0 5
64033: ARRAY
64034: PUSH
64035: LD_INT 1
64037: PLUS
64038: PPUSH
64039: CALL_OW 1
64043: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
64044: LD_ADDR_EXP 61
64048: PUSH
64049: LD_EXP 61
64053: PPUSH
64054: LD_VAR 0 5
64058: PUSH
64059: LD_EXP 61
64063: PUSH
64064: LD_VAR 0 5
64068: ARRAY
64069: PUSH
64070: LD_INT 1
64072: PLUS
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PPUSH
64078: LD_VAR 0 2
64082: PUSH
64083: LD_VAR 0 4
64087: ARRAY
64088: PUSH
64089: LD_VAR 0 2
64093: PUSH
64094: LD_VAR 0 4
64098: ARRAY
64099: PPUSH
64100: CALL_OW 255
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PPUSH
64109: CALL 26385 0 3
64113: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
64114: LD_VAR 0 2
64118: PUSH
64119: LD_VAR 0 4
64123: ARRAY
64124: PPUSH
64125: LD_VAR 0 1
64129: PPUSH
64130: CALL_OW 255
64134: PPUSH
64135: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
64139: LD_VAR 0 2
64143: PUSH
64144: LD_VAR 0 4
64148: ARRAY
64149: PPUSH
64150: CALL_OW 141
// end ;
64154: GO 63986
64156: POP
64157: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64158: LD_VAR 0 1
64162: PPUSH
64163: LD_EXP 61
64167: PUSH
64168: LD_VAR 0 5
64172: ARRAY
64173: PUSH
64174: LD_INT 0
64176: PLUS
64177: PPUSH
64178: CALL_OW 505
// end ;
64182: LD_VAR 0 3
64186: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
64187: LD_INT 0
64189: PPUSH
64190: PPUSH
64191: PPUSH
64192: PPUSH
// if not hack in hackTanks then
64193: LD_VAR 0 1
64197: PUSH
64198: LD_EXP 60
64202: IN
64203: NOT
64204: IFFALSE 64208
// exit ;
64206: GO 64448
// index := GetElementIndex ( hackTanks , hack ) ;
64208: LD_ADDR_VAR 0 4
64212: PUSH
64213: LD_EXP 60
64217: PPUSH
64218: LD_VAR 0 1
64222: PPUSH
64223: CALL 26170 0 2
64227: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
64228: LD_ADDR_VAR 0 3
64232: PUSH
64233: DOUBLE
64234: LD_EXP 61
64238: PUSH
64239: LD_VAR 0 4
64243: ARRAY
64244: INC
64245: ST_TO_ADDR
64246: LD_INT 1
64248: PUSH
64249: FOR_DOWNTO
64250: IFFALSE 64422
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
64252: LD_ADDR_VAR 0 5
64256: PUSH
64257: LD_EXP 61
64261: PUSH
64262: LD_VAR 0 4
64266: ARRAY
64267: PUSH
64268: LD_VAR 0 3
64272: ARRAY
64273: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
64274: LD_VAR 0 5
64278: PUSH
64279: LD_INT 1
64281: ARRAY
64282: PPUSH
64283: CALL_OW 302
64287: NOT
64288: PUSH
64289: LD_VAR 0 5
64293: PUSH
64294: LD_INT 1
64296: ARRAY
64297: PPUSH
64298: CALL_OW 255
64302: PUSH
64303: LD_VAR 0 1
64307: PPUSH
64308: CALL_OW 255
64312: NONEQUAL
64313: OR
64314: IFFALSE 64420
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
64316: LD_VAR 0 5
64320: PUSH
64321: LD_INT 1
64323: ARRAY
64324: PPUSH
64325: CALL_OW 305
64329: PUSH
64330: LD_VAR 0 5
64334: PUSH
64335: LD_INT 1
64337: ARRAY
64338: PPUSH
64339: CALL_OW 255
64343: PUSH
64344: LD_VAR 0 1
64348: PPUSH
64349: CALL_OW 255
64353: EQUAL
64354: AND
64355: IFFALSE 64379
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
64357: LD_VAR 0 5
64361: PUSH
64362: LD_INT 1
64364: ARRAY
64365: PPUSH
64366: LD_VAR 0 5
64370: PUSH
64371: LD_INT 2
64373: ARRAY
64374: PPUSH
64375: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
64379: LD_ADDR_EXP 61
64383: PUSH
64384: LD_EXP 61
64388: PPUSH
64389: LD_VAR 0 4
64393: PPUSH
64394: LD_EXP 61
64398: PUSH
64399: LD_VAR 0 4
64403: ARRAY
64404: PPUSH
64405: LD_VAR 0 3
64409: PPUSH
64410: CALL_OW 3
64414: PPUSH
64415: CALL_OW 1
64419: ST_TO_ADDR
// end ; end ;
64420: GO 64249
64422: POP
64423: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64424: LD_VAR 0 1
64428: PPUSH
64429: LD_EXP 61
64433: PUSH
64434: LD_VAR 0 4
64438: ARRAY
64439: PUSH
64440: LD_INT 0
64442: PLUS
64443: PPUSH
64444: CALL_OW 505
// end ;
64448: LD_VAR 0 2
64452: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64453: LD_INT 0
64455: PPUSH
64456: PPUSH
64457: PPUSH
64458: PPUSH
// if not hack in hackTanks then
64459: LD_VAR 0 1
64463: PUSH
64464: LD_EXP 60
64468: IN
64469: NOT
64470: IFFALSE 64474
// exit ;
64472: GO 64559
// index := GetElementIndex ( hackTanks , hack ) ;
64474: LD_ADDR_VAR 0 5
64478: PUSH
64479: LD_EXP 60
64483: PPUSH
64484: LD_VAR 0 1
64488: PPUSH
64489: CALL 26170 0 2
64493: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64494: LD_ADDR_VAR 0 4
64498: PUSH
64499: DOUBLE
64500: LD_INT 1
64502: DEC
64503: ST_TO_ADDR
64504: LD_EXP 61
64508: PUSH
64509: LD_VAR 0 5
64513: ARRAY
64514: PUSH
64515: FOR_TO
64516: IFFALSE 64557
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64518: LD_EXP 61
64522: PUSH
64523: LD_VAR 0 5
64527: ARRAY
64528: PUSH
64529: LD_VAR 0 4
64533: ARRAY
64534: PUSH
64535: LD_INT 1
64537: ARRAY
64538: PUSH
64539: LD_VAR 0 2
64543: EQUAL
64544: IFFALSE 64555
// KillUnit ( vehicle ) ;
64546: LD_VAR 0 2
64550: PPUSH
64551: CALL_OW 66
64555: GO 64515
64557: POP
64558: POP
// end ;
64559: LD_VAR 0 3
64563: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
64564: LD_EXP 65
64568: NOT
64569: IFFALSE 64604
64571: GO 64573
64573: DISABLE
// begin initMiner := true ;
64574: LD_ADDR_EXP 65
64578: PUSH
64579: LD_INT 1
64581: ST_TO_ADDR
// minersList := [ ] ;
64582: LD_ADDR_EXP 66
64586: PUSH
64587: EMPTY
64588: ST_TO_ADDR
// minerMinesList := [ ] ;
64589: LD_ADDR_EXP 67
64593: PUSH
64594: EMPTY
64595: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
64596: LD_ADDR_EXP 68
64600: PUSH
64601: LD_INT 5
64603: ST_TO_ADDR
// end ;
64604: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
64605: LD_EXP 65
64609: PUSH
64610: LD_INT 34
64612: PUSH
64613: LD_INT 81
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PPUSH
64620: CALL_OW 69
64624: AND
64625: IFFALSE 65086
64627: GO 64629
64629: DISABLE
64630: LD_INT 0
64632: PPUSH
64633: PPUSH
64634: PPUSH
64635: PPUSH
// begin enable ;
64636: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64637: LD_ADDR_VAR 0 1
64641: PUSH
64642: LD_INT 34
64644: PUSH
64645: LD_INT 81
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PPUSH
64652: CALL_OW 69
64656: PUSH
64657: FOR_IN
64658: IFFALSE 64730
// begin if not i in minersList then
64660: LD_VAR 0 1
64664: PUSH
64665: LD_EXP 66
64669: IN
64670: NOT
64671: IFFALSE 64728
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64673: LD_ADDR_EXP 66
64677: PUSH
64678: LD_EXP 66
64682: PPUSH
64683: LD_EXP 66
64687: PUSH
64688: LD_INT 1
64690: PLUS
64691: PPUSH
64692: LD_VAR 0 1
64696: PPUSH
64697: CALL_OW 1
64701: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64702: LD_ADDR_EXP 67
64706: PUSH
64707: LD_EXP 67
64711: PPUSH
64712: LD_EXP 67
64716: PUSH
64717: LD_INT 1
64719: PLUS
64720: PPUSH
64721: EMPTY
64722: PPUSH
64723: CALL_OW 1
64727: ST_TO_ADDR
// end end ;
64728: GO 64657
64730: POP
64731: POP
// for i := minerMinesList downto 1 do
64732: LD_ADDR_VAR 0 1
64736: PUSH
64737: DOUBLE
64738: LD_EXP 67
64742: INC
64743: ST_TO_ADDR
64744: LD_INT 1
64746: PUSH
64747: FOR_DOWNTO
64748: IFFALSE 65084
// begin if IsLive ( minersList [ i ] ) then
64750: LD_EXP 66
64754: PUSH
64755: LD_VAR 0 1
64759: ARRAY
64760: PPUSH
64761: CALL_OW 300
64765: IFFALSE 64793
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64767: LD_EXP 66
64771: PUSH
64772: LD_VAR 0 1
64776: ARRAY
64777: PPUSH
64778: LD_EXP 67
64782: PUSH
64783: LD_VAR 0 1
64787: ARRAY
64788: PPUSH
64789: CALL_OW 505
// if not minerMinesList [ i ] then
64793: LD_EXP 67
64797: PUSH
64798: LD_VAR 0 1
64802: ARRAY
64803: NOT
64804: IFFALSE 64808
// continue ;
64806: GO 64747
// for j := minerMinesList [ i ] downto 1 do
64808: LD_ADDR_VAR 0 2
64812: PUSH
64813: DOUBLE
64814: LD_EXP 67
64818: PUSH
64819: LD_VAR 0 1
64823: ARRAY
64824: INC
64825: ST_TO_ADDR
64826: LD_INT 1
64828: PUSH
64829: FOR_DOWNTO
64830: IFFALSE 65080
// begin side := GetSide ( minersList [ i ] ) ;
64832: LD_ADDR_VAR 0 3
64836: PUSH
64837: LD_EXP 66
64841: PUSH
64842: LD_VAR 0 1
64846: ARRAY
64847: PPUSH
64848: CALL_OW 255
64852: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64853: LD_ADDR_VAR 0 4
64857: PUSH
64858: LD_EXP 67
64862: PUSH
64863: LD_VAR 0 1
64867: ARRAY
64868: PUSH
64869: LD_VAR 0 2
64873: ARRAY
64874: PUSH
64875: LD_INT 1
64877: ARRAY
64878: PPUSH
64879: LD_EXP 67
64883: PUSH
64884: LD_VAR 0 1
64888: ARRAY
64889: PUSH
64890: LD_VAR 0 2
64894: ARRAY
64895: PUSH
64896: LD_INT 2
64898: ARRAY
64899: PPUSH
64900: CALL_OW 428
64904: ST_TO_ADDR
// if not tmp then
64905: LD_VAR 0 4
64909: NOT
64910: IFFALSE 64914
// continue ;
64912: GO 64829
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64914: LD_VAR 0 4
64918: PUSH
64919: LD_INT 81
64921: PUSH
64922: LD_VAR 0 3
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PPUSH
64931: CALL_OW 69
64935: IN
64936: PUSH
64937: LD_EXP 67
64941: PUSH
64942: LD_VAR 0 1
64946: ARRAY
64947: PUSH
64948: LD_VAR 0 2
64952: ARRAY
64953: PUSH
64954: LD_INT 1
64956: ARRAY
64957: PPUSH
64958: LD_EXP 67
64962: PUSH
64963: LD_VAR 0 1
64967: ARRAY
64968: PUSH
64969: LD_VAR 0 2
64973: ARRAY
64974: PUSH
64975: LD_INT 2
64977: ARRAY
64978: PPUSH
64979: CALL_OW 458
64983: AND
64984: IFFALSE 65078
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64986: LD_EXP 67
64990: PUSH
64991: LD_VAR 0 1
64995: ARRAY
64996: PUSH
64997: LD_VAR 0 2
65001: ARRAY
65002: PUSH
65003: LD_INT 1
65005: ARRAY
65006: PPUSH
65007: LD_EXP 67
65011: PUSH
65012: LD_VAR 0 1
65016: ARRAY
65017: PUSH
65018: LD_VAR 0 2
65022: ARRAY
65023: PUSH
65024: LD_INT 2
65026: ARRAY
65027: PPUSH
65028: LD_VAR 0 3
65032: PPUSH
65033: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
65037: LD_ADDR_EXP 67
65041: PUSH
65042: LD_EXP 67
65046: PPUSH
65047: LD_VAR 0 1
65051: PPUSH
65052: LD_EXP 67
65056: PUSH
65057: LD_VAR 0 1
65061: ARRAY
65062: PPUSH
65063: LD_VAR 0 2
65067: PPUSH
65068: CALL_OW 3
65072: PPUSH
65073: CALL_OW 1
65077: ST_TO_ADDR
// end ; end ;
65078: GO 64829
65080: POP
65081: POP
// end ;
65082: GO 64747
65084: POP
65085: POP
// end ;
65086: PPOPN 4
65088: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
65089: LD_INT 0
65091: PPUSH
65092: PPUSH
// result := false ;
65093: LD_ADDR_VAR 0 4
65097: PUSH
65098: LD_INT 0
65100: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
65101: LD_VAR 0 1
65105: PPUSH
65106: CALL_OW 264
65110: PUSH
65111: LD_INT 81
65113: EQUAL
65114: NOT
65115: IFFALSE 65119
// exit ;
65117: GO 65359
// index := GetElementIndex ( minersList , unit ) ;
65119: LD_ADDR_VAR 0 5
65123: PUSH
65124: LD_EXP 66
65128: PPUSH
65129: LD_VAR 0 1
65133: PPUSH
65134: CALL 26170 0 2
65138: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
65139: LD_EXP 67
65143: PUSH
65144: LD_VAR 0 5
65148: ARRAY
65149: PUSH
65150: LD_EXP 68
65154: GREATEREQUAL
65155: IFFALSE 65159
// exit ;
65157: GO 65359
// ComMoveXY ( unit , x , y ) ;
65159: LD_VAR 0 1
65163: PPUSH
65164: LD_VAR 0 2
65168: PPUSH
65169: LD_VAR 0 3
65173: PPUSH
65174: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65178: LD_INT 35
65180: PPUSH
65181: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65185: LD_VAR 0 1
65189: PPUSH
65190: LD_VAR 0 2
65194: PPUSH
65195: LD_VAR 0 3
65199: PPUSH
65200: CALL 57525 0 3
65204: NOT
65205: PUSH
65206: LD_VAR 0 1
65210: PPUSH
65211: CALL_OW 314
65215: AND
65216: IFFALSE 65220
// exit ;
65218: GO 65359
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
65220: LD_VAR 0 2
65224: PPUSH
65225: LD_VAR 0 3
65229: PPUSH
65230: CALL_OW 428
65234: PUSH
65235: LD_VAR 0 1
65239: EQUAL
65240: PUSH
65241: LD_VAR 0 1
65245: PPUSH
65246: CALL_OW 314
65250: NOT
65251: AND
65252: IFFALSE 65178
// PlaySoundXY ( x , y , PlantMine ) ;
65254: LD_VAR 0 2
65258: PPUSH
65259: LD_VAR 0 3
65263: PPUSH
65264: LD_STRING PlantMine
65266: PPUSH
65267: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
65271: LD_VAR 0 2
65275: PPUSH
65276: LD_VAR 0 3
65280: PPUSH
65281: LD_VAR 0 1
65285: PPUSH
65286: CALL_OW 255
65290: PPUSH
65291: LD_INT 0
65293: PPUSH
65294: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65298: LD_ADDR_EXP 67
65302: PUSH
65303: LD_EXP 67
65307: PPUSH
65308: LD_VAR 0 5
65312: PUSH
65313: LD_EXP 67
65317: PUSH
65318: LD_VAR 0 5
65322: ARRAY
65323: PUSH
65324: LD_INT 1
65326: PLUS
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PPUSH
65332: LD_VAR 0 2
65336: PUSH
65337: LD_VAR 0 3
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PPUSH
65346: CALL 26385 0 3
65350: ST_TO_ADDR
// result := true ;
65351: LD_ADDR_VAR 0 4
65355: PUSH
65356: LD_INT 1
65358: ST_TO_ADDR
// end ;
65359: LD_VAR 0 4
65363: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65364: LD_INT 0
65366: PPUSH
65367: PPUSH
65368: PPUSH
// if not unit in minersList then
65369: LD_VAR 0 1
65373: PUSH
65374: LD_EXP 66
65378: IN
65379: NOT
65380: IFFALSE 65384
// exit ;
65382: GO 65776
// index := GetElementIndex ( minersList , unit ) ;
65384: LD_ADDR_VAR 0 6
65388: PUSH
65389: LD_EXP 66
65393: PPUSH
65394: LD_VAR 0 1
65398: PPUSH
65399: CALL 26170 0 2
65403: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65404: LD_ADDR_VAR 0 5
65408: PUSH
65409: DOUBLE
65410: LD_EXP 67
65414: PUSH
65415: LD_VAR 0 6
65419: ARRAY
65420: INC
65421: ST_TO_ADDR
65422: LD_INT 1
65424: PUSH
65425: FOR_DOWNTO
65426: IFFALSE 65587
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
65428: LD_EXP 67
65432: PUSH
65433: LD_VAR 0 6
65437: ARRAY
65438: PUSH
65439: LD_VAR 0 5
65443: ARRAY
65444: PUSH
65445: LD_INT 1
65447: ARRAY
65448: PUSH
65449: LD_VAR 0 2
65453: EQUAL
65454: PUSH
65455: LD_EXP 67
65459: PUSH
65460: LD_VAR 0 6
65464: ARRAY
65465: PUSH
65466: LD_VAR 0 5
65470: ARRAY
65471: PUSH
65472: LD_INT 2
65474: ARRAY
65475: PUSH
65476: LD_VAR 0 3
65480: EQUAL
65481: AND
65482: IFFALSE 65585
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65484: LD_EXP 67
65488: PUSH
65489: LD_VAR 0 6
65493: ARRAY
65494: PUSH
65495: LD_VAR 0 5
65499: ARRAY
65500: PUSH
65501: LD_INT 1
65503: ARRAY
65504: PPUSH
65505: LD_EXP 67
65509: PUSH
65510: LD_VAR 0 6
65514: ARRAY
65515: PUSH
65516: LD_VAR 0 5
65520: ARRAY
65521: PUSH
65522: LD_INT 2
65524: ARRAY
65525: PPUSH
65526: LD_VAR 0 1
65530: PPUSH
65531: CALL_OW 255
65535: PPUSH
65536: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65540: LD_ADDR_EXP 67
65544: PUSH
65545: LD_EXP 67
65549: PPUSH
65550: LD_VAR 0 6
65554: PPUSH
65555: LD_EXP 67
65559: PUSH
65560: LD_VAR 0 6
65564: ARRAY
65565: PPUSH
65566: LD_VAR 0 5
65570: PPUSH
65571: CALL_OW 3
65575: PPUSH
65576: CALL_OW 1
65580: ST_TO_ADDR
// exit ;
65581: POP
65582: POP
65583: GO 65776
// end ; end ;
65585: GO 65425
65587: POP
65588: POP
// for i := minerMinesList [ index ] downto 1 do
65589: LD_ADDR_VAR 0 5
65593: PUSH
65594: DOUBLE
65595: LD_EXP 67
65599: PUSH
65600: LD_VAR 0 6
65604: ARRAY
65605: INC
65606: ST_TO_ADDR
65607: LD_INT 1
65609: PUSH
65610: FOR_DOWNTO
65611: IFFALSE 65774
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65613: LD_EXP 67
65617: PUSH
65618: LD_VAR 0 6
65622: ARRAY
65623: PUSH
65624: LD_VAR 0 5
65628: ARRAY
65629: PUSH
65630: LD_INT 1
65632: ARRAY
65633: PPUSH
65634: LD_EXP 67
65638: PUSH
65639: LD_VAR 0 6
65643: ARRAY
65644: PUSH
65645: LD_VAR 0 5
65649: ARRAY
65650: PUSH
65651: LD_INT 2
65653: ARRAY
65654: PPUSH
65655: LD_VAR 0 2
65659: PPUSH
65660: LD_VAR 0 3
65664: PPUSH
65665: CALL_OW 298
65669: PUSH
65670: LD_INT 6
65672: LESS
65673: IFFALSE 65772
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65675: LD_EXP 67
65679: PUSH
65680: LD_VAR 0 6
65684: ARRAY
65685: PUSH
65686: LD_VAR 0 5
65690: ARRAY
65691: PUSH
65692: LD_INT 1
65694: ARRAY
65695: PPUSH
65696: LD_EXP 67
65700: PUSH
65701: LD_VAR 0 6
65705: ARRAY
65706: PUSH
65707: LD_VAR 0 5
65711: ARRAY
65712: PUSH
65713: LD_INT 2
65715: ARRAY
65716: PPUSH
65717: LD_VAR 0 1
65721: PPUSH
65722: CALL_OW 255
65726: PPUSH
65727: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65731: LD_ADDR_EXP 67
65735: PUSH
65736: LD_EXP 67
65740: PPUSH
65741: LD_VAR 0 6
65745: PPUSH
65746: LD_EXP 67
65750: PUSH
65751: LD_VAR 0 6
65755: ARRAY
65756: PPUSH
65757: LD_VAR 0 5
65761: PPUSH
65762: CALL_OW 3
65766: PPUSH
65767: CALL_OW 1
65771: ST_TO_ADDR
// end ; end ;
65772: GO 65610
65774: POP
65775: POP
// end ;
65776: LD_VAR 0 4
65780: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65781: LD_INT 0
65783: PPUSH
65784: PPUSH
65785: PPUSH
65786: PPUSH
65787: PPUSH
65788: PPUSH
65789: PPUSH
65790: PPUSH
65791: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65792: LD_VAR 0 1
65796: PPUSH
65797: CALL_OW 264
65801: PUSH
65802: LD_INT 81
65804: EQUAL
65805: NOT
65806: PUSH
65807: LD_VAR 0 1
65811: PUSH
65812: LD_EXP 66
65816: IN
65817: NOT
65818: OR
65819: IFFALSE 65823
// exit ;
65821: GO 66145
// index := GetElementIndex ( minersList , unit ) ;
65823: LD_ADDR_VAR 0 6
65827: PUSH
65828: LD_EXP 66
65832: PPUSH
65833: LD_VAR 0 1
65837: PPUSH
65838: CALL 26170 0 2
65842: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65843: LD_ADDR_VAR 0 8
65847: PUSH
65848: LD_EXP 68
65852: PUSH
65853: LD_EXP 67
65857: PUSH
65858: LD_VAR 0 6
65862: ARRAY
65863: MINUS
65864: ST_TO_ADDR
// if not minesFreeAmount then
65865: LD_VAR 0 8
65869: NOT
65870: IFFALSE 65874
// exit ;
65872: GO 66145
// tmp := [ ] ;
65874: LD_ADDR_VAR 0 7
65878: PUSH
65879: EMPTY
65880: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65881: LD_ADDR_VAR 0 5
65885: PUSH
65886: DOUBLE
65887: LD_INT 1
65889: DEC
65890: ST_TO_ADDR
65891: LD_VAR 0 8
65895: PUSH
65896: FOR_TO
65897: IFFALSE 66092
// begin _d := rand ( 0 , 5 ) ;
65899: LD_ADDR_VAR 0 11
65903: PUSH
65904: LD_INT 0
65906: PPUSH
65907: LD_INT 5
65909: PPUSH
65910: CALL_OW 12
65914: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65915: LD_ADDR_VAR 0 12
65919: PUSH
65920: LD_INT 2
65922: PPUSH
65923: LD_INT 6
65925: PPUSH
65926: CALL_OW 12
65930: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65931: LD_ADDR_VAR 0 9
65935: PUSH
65936: LD_VAR 0 2
65940: PPUSH
65941: LD_VAR 0 11
65945: PPUSH
65946: LD_VAR 0 12
65950: PPUSH
65951: CALL_OW 272
65955: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65956: LD_ADDR_VAR 0 10
65960: PUSH
65961: LD_VAR 0 3
65965: PPUSH
65966: LD_VAR 0 11
65970: PPUSH
65971: LD_VAR 0 12
65975: PPUSH
65976: CALL_OW 273
65980: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65981: LD_VAR 0 9
65985: PPUSH
65986: LD_VAR 0 10
65990: PPUSH
65991: CALL_OW 488
65995: PUSH
65996: LD_VAR 0 9
66000: PUSH
66001: LD_VAR 0 10
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_VAR 0 7
66014: IN
66015: NOT
66016: AND
66017: PUSH
66018: LD_VAR 0 9
66022: PPUSH
66023: LD_VAR 0 10
66027: PPUSH
66028: CALL_OW 458
66032: NOT
66033: AND
66034: IFFALSE 66076
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
66036: LD_ADDR_VAR 0 7
66040: PUSH
66041: LD_VAR 0 7
66045: PPUSH
66046: LD_VAR 0 7
66050: PUSH
66051: LD_INT 1
66053: PLUS
66054: PPUSH
66055: LD_VAR 0 9
66059: PUSH
66060: LD_VAR 0 10
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PPUSH
66069: CALL_OW 1
66073: ST_TO_ADDR
66074: GO 66090
// i := i - 1 ;
66076: LD_ADDR_VAR 0 5
66080: PUSH
66081: LD_VAR 0 5
66085: PUSH
66086: LD_INT 1
66088: MINUS
66089: ST_TO_ADDR
// end ;
66090: GO 65896
66092: POP
66093: POP
// for i in tmp do
66094: LD_ADDR_VAR 0 5
66098: PUSH
66099: LD_VAR 0 7
66103: PUSH
66104: FOR_IN
66105: IFFALSE 66143
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
66107: LD_VAR 0 1
66111: PPUSH
66112: LD_VAR 0 5
66116: PUSH
66117: LD_INT 1
66119: ARRAY
66120: PPUSH
66121: LD_VAR 0 5
66125: PUSH
66126: LD_INT 2
66128: ARRAY
66129: PPUSH
66130: CALL 65089 0 3
66134: NOT
66135: IFFALSE 66141
// exit ;
66137: POP
66138: POP
66139: GO 66145
66141: GO 66104
66143: POP
66144: POP
// end ;
66145: LD_VAR 0 4
66149: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
66150: LD_INT 0
66152: PPUSH
66153: PPUSH
66154: PPUSH
66155: PPUSH
66156: PPUSH
66157: PPUSH
66158: PPUSH
// if not GetClass ( unit ) = class_sniper then
66159: LD_VAR 0 1
66163: PPUSH
66164: CALL_OW 257
66168: PUSH
66169: LD_INT 5
66171: EQUAL
66172: NOT
66173: IFFALSE 66177
// exit ;
66175: GO 66565
// dist := 8 ;
66177: LD_ADDR_VAR 0 5
66181: PUSH
66182: LD_INT 8
66184: ST_TO_ADDR
// viewRange := 12 ;
66185: LD_ADDR_VAR 0 7
66189: PUSH
66190: LD_INT 12
66192: ST_TO_ADDR
// side := GetSide ( unit ) ;
66193: LD_ADDR_VAR 0 6
66197: PUSH
66198: LD_VAR 0 1
66202: PPUSH
66203: CALL_OW 255
66207: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
66208: LD_INT 61
66210: PPUSH
66211: LD_VAR 0 6
66215: PPUSH
66216: CALL_OW 321
66220: PUSH
66221: LD_INT 2
66223: EQUAL
66224: IFFALSE 66234
// viewRange := 16 ;
66226: LD_ADDR_VAR 0 7
66230: PUSH
66231: LD_INT 16
66233: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
66234: LD_VAR 0 1
66238: PPUSH
66239: LD_VAR 0 2
66243: PPUSH
66244: LD_VAR 0 3
66248: PPUSH
66249: CALL_OW 297
66253: PUSH
66254: LD_VAR 0 5
66258: GREATER
66259: IFFALSE 66338
// begin ComMoveXY ( unit , x , y ) ;
66261: LD_VAR 0 1
66265: PPUSH
66266: LD_VAR 0 2
66270: PPUSH
66271: LD_VAR 0 3
66275: PPUSH
66276: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66280: LD_INT 35
66282: PPUSH
66283: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
66287: LD_VAR 0 1
66291: PPUSH
66292: LD_VAR 0 2
66296: PPUSH
66297: LD_VAR 0 3
66301: PPUSH
66302: CALL 57525 0 3
66306: NOT
66307: IFFALSE 66311
// exit ;
66309: GO 66565
// until GetDistUnitXY ( unit , x , y ) < dist ;
66311: LD_VAR 0 1
66315: PPUSH
66316: LD_VAR 0 2
66320: PPUSH
66321: LD_VAR 0 3
66325: PPUSH
66326: CALL_OW 297
66330: PUSH
66331: LD_VAR 0 5
66335: LESS
66336: IFFALSE 66280
// end ; ComTurnXY ( unit , x , y ) ;
66338: LD_VAR 0 1
66342: PPUSH
66343: LD_VAR 0 2
66347: PPUSH
66348: LD_VAR 0 3
66352: PPUSH
66353: CALL_OW 118
// wait ( 5 ) ;
66357: LD_INT 5
66359: PPUSH
66360: CALL_OW 67
// _d := GetDir ( unit ) ;
66364: LD_ADDR_VAR 0 10
66368: PUSH
66369: LD_VAR 0 1
66373: PPUSH
66374: CALL_OW 254
66378: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
66379: LD_ADDR_VAR 0 8
66383: PUSH
66384: LD_VAR 0 1
66388: PPUSH
66389: CALL_OW 250
66393: PPUSH
66394: LD_VAR 0 10
66398: PPUSH
66399: LD_VAR 0 5
66403: PPUSH
66404: CALL_OW 272
66408: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
66409: LD_ADDR_VAR 0 9
66413: PUSH
66414: LD_VAR 0 1
66418: PPUSH
66419: CALL_OW 251
66423: PPUSH
66424: LD_VAR 0 10
66428: PPUSH
66429: LD_VAR 0 5
66433: PPUSH
66434: CALL_OW 273
66438: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66439: LD_VAR 0 8
66443: PPUSH
66444: LD_VAR 0 9
66448: PPUSH
66449: CALL_OW 488
66453: NOT
66454: IFFALSE 66458
// exit ;
66456: GO 66565
// ComAnimCustom ( unit , 1 ) ;
66458: LD_VAR 0 1
66462: PPUSH
66463: LD_INT 1
66465: PPUSH
66466: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66470: LD_VAR 0 8
66474: PPUSH
66475: LD_VAR 0 9
66479: PPUSH
66480: LD_VAR 0 6
66484: PPUSH
66485: LD_VAR 0 7
66489: PPUSH
66490: CALL_OW 330
// repeat wait ( 1 ) ;
66494: LD_INT 1
66496: PPUSH
66497: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
66501: LD_VAR 0 1
66505: PPUSH
66506: CALL_OW 316
66510: PUSH
66511: LD_VAR 0 1
66515: PPUSH
66516: CALL_OW 314
66520: OR
66521: PUSH
66522: LD_VAR 0 1
66526: PPUSH
66527: CALL_OW 302
66531: NOT
66532: OR
66533: PUSH
66534: LD_VAR 0 1
66538: PPUSH
66539: CALL_OW 301
66543: OR
66544: IFFALSE 66494
// RemoveSeeing ( _x , _y , side ) ;
66546: LD_VAR 0 8
66550: PPUSH
66551: LD_VAR 0 9
66555: PPUSH
66556: LD_VAR 0 6
66560: PPUSH
66561: CALL_OW 331
// end ; end_of_file
66565: LD_VAR 0 4
66569: RET
// export globalGameSaveCounter ; every 0 0$1 do
66570: GO 66572
66572: DISABLE
// begin enable ;
66573: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66574: LD_STRING updateTimer(
66576: PUSH
66577: LD_OWVAR 1
66581: STR
66582: PUSH
66583: LD_STRING );
66585: STR
66586: PPUSH
66587: CALL_OW 559
// end ;
66591: END
// every 0 0$1 do
66592: GO 66594
66594: DISABLE
// begin globalGameSaveCounter := 0 ;
66595: LD_ADDR_EXP 69
66599: PUSH
66600: LD_INT 0
66602: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
66603: LD_STRING setGameSaveCounter(0)
66605: PPUSH
66606: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
66610: LD_STRING initStreamRollete();
66612: PPUSH
66613: CALL_OW 559
// InitStreamMode ;
66617: CALL 67943 0 0
// DefineStreamItems ( false ) ;
66621: LD_INT 0
66623: PPUSH
66624: CALL 68407 0 1
// end ;
66628: END
// export function SOS_MapStart ( ) ; begin
66629: LD_INT 0
66631: PPUSH
// if streamModeActive then
66632: LD_EXP 70
66636: IFFALSE 66645
// DefineStreamItems ( true ) ;
66638: LD_INT 1
66640: PPUSH
66641: CALL 68407 0 1
// UpdateLuaVariables ( ) ;
66645: CALL 66662 0 0
// UpdateFactoryWaypoints ( ) ;
66649: CALL 81268 0 0
// UpdateWarehouseGatheringPoints ( ) ;
66653: CALL 81525 0 0
// end ;
66657: LD_VAR 0 1
66661: RET
// function UpdateLuaVariables ( ) ; begin
66662: LD_INT 0
66664: PPUSH
// if globalGameSaveCounter then
66665: LD_EXP 69
66669: IFFALSE 66703
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
66671: LD_ADDR_EXP 69
66675: PUSH
66676: LD_EXP 69
66680: PPUSH
66681: CALL 60077 0 1
66685: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
66686: LD_STRING setGameSaveCounter(
66688: PUSH
66689: LD_EXP 69
66693: STR
66694: PUSH
66695: LD_STRING )
66697: STR
66698: PPUSH
66699: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
66703: LD_STRING setGameDifficulty(
66705: PUSH
66706: LD_OWVAR 67
66710: STR
66711: PUSH
66712: LD_STRING )
66714: STR
66715: PPUSH
66716: CALL_OW 559
// end ;
66720: LD_VAR 0 1
66724: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66725: LD_INT 0
66727: PPUSH
// if p2 = stream_mode then
66728: LD_VAR 0 2
66732: PUSH
66733: LD_INT 100
66735: EQUAL
66736: IFFALSE 67739
// begin if not StreamModeActive then
66738: LD_EXP 70
66742: NOT
66743: IFFALSE 66753
// StreamModeActive := true ;
66745: LD_ADDR_EXP 70
66749: PUSH
66750: LD_INT 1
66752: ST_TO_ADDR
// if p3 = 0 then
66753: LD_VAR 0 3
66757: PUSH
66758: LD_INT 0
66760: EQUAL
66761: IFFALSE 66767
// InitStreamMode ;
66763: CALL 67943 0 0
// if p3 = 1 then
66767: LD_VAR 0 3
66771: PUSH
66772: LD_INT 1
66774: EQUAL
66775: IFFALSE 66785
// sRocket := true ;
66777: LD_ADDR_EXP 75
66781: PUSH
66782: LD_INT 1
66784: ST_TO_ADDR
// if p3 = 2 then
66785: LD_VAR 0 3
66789: PUSH
66790: LD_INT 2
66792: EQUAL
66793: IFFALSE 66803
// sSpeed := true ;
66795: LD_ADDR_EXP 74
66799: PUSH
66800: LD_INT 1
66802: ST_TO_ADDR
// if p3 = 3 then
66803: LD_VAR 0 3
66807: PUSH
66808: LD_INT 3
66810: EQUAL
66811: IFFALSE 66821
// sEngine := true ;
66813: LD_ADDR_EXP 76
66817: PUSH
66818: LD_INT 1
66820: ST_TO_ADDR
// if p3 = 4 then
66821: LD_VAR 0 3
66825: PUSH
66826: LD_INT 4
66828: EQUAL
66829: IFFALSE 66839
// sSpec := true ;
66831: LD_ADDR_EXP 73
66835: PUSH
66836: LD_INT 1
66838: ST_TO_ADDR
// if p3 = 5 then
66839: LD_VAR 0 3
66843: PUSH
66844: LD_INT 5
66846: EQUAL
66847: IFFALSE 66857
// sLevel := true ;
66849: LD_ADDR_EXP 77
66853: PUSH
66854: LD_INT 1
66856: ST_TO_ADDR
// if p3 = 6 then
66857: LD_VAR 0 3
66861: PUSH
66862: LD_INT 6
66864: EQUAL
66865: IFFALSE 66875
// sArmoury := true ;
66867: LD_ADDR_EXP 78
66871: PUSH
66872: LD_INT 1
66874: ST_TO_ADDR
// if p3 = 7 then
66875: LD_VAR 0 3
66879: PUSH
66880: LD_INT 7
66882: EQUAL
66883: IFFALSE 66893
// sRadar := true ;
66885: LD_ADDR_EXP 79
66889: PUSH
66890: LD_INT 1
66892: ST_TO_ADDR
// if p3 = 8 then
66893: LD_VAR 0 3
66897: PUSH
66898: LD_INT 8
66900: EQUAL
66901: IFFALSE 66911
// sBunker := true ;
66903: LD_ADDR_EXP 80
66907: PUSH
66908: LD_INT 1
66910: ST_TO_ADDR
// if p3 = 9 then
66911: LD_VAR 0 3
66915: PUSH
66916: LD_INT 9
66918: EQUAL
66919: IFFALSE 66929
// sHack := true ;
66921: LD_ADDR_EXP 81
66925: PUSH
66926: LD_INT 1
66928: ST_TO_ADDR
// if p3 = 10 then
66929: LD_VAR 0 3
66933: PUSH
66934: LD_INT 10
66936: EQUAL
66937: IFFALSE 66947
// sFire := true ;
66939: LD_ADDR_EXP 82
66943: PUSH
66944: LD_INT 1
66946: ST_TO_ADDR
// if p3 = 11 then
66947: LD_VAR 0 3
66951: PUSH
66952: LD_INT 11
66954: EQUAL
66955: IFFALSE 66965
// sRefresh := true ;
66957: LD_ADDR_EXP 83
66961: PUSH
66962: LD_INT 1
66964: ST_TO_ADDR
// if p3 = 12 then
66965: LD_VAR 0 3
66969: PUSH
66970: LD_INT 12
66972: EQUAL
66973: IFFALSE 66983
// sExp := true ;
66975: LD_ADDR_EXP 84
66979: PUSH
66980: LD_INT 1
66982: ST_TO_ADDR
// if p3 = 13 then
66983: LD_VAR 0 3
66987: PUSH
66988: LD_INT 13
66990: EQUAL
66991: IFFALSE 67001
// sDepot := true ;
66993: LD_ADDR_EXP 85
66997: PUSH
66998: LD_INT 1
67000: ST_TO_ADDR
// if p3 = 14 then
67001: LD_VAR 0 3
67005: PUSH
67006: LD_INT 14
67008: EQUAL
67009: IFFALSE 67019
// sFlag := true ;
67011: LD_ADDR_EXP 86
67015: PUSH
67016: LD_INT 1
67018: ST_TO_ADDR
// if p3 = 15 then
67019: LD_VAR 0 3
67023: PUSH
67024: LD_INT 15
67026: EQUAL
67027: IFFALSE 67037
// sKamikadze := true ;
67029: LD_ADDR_EXP 94
67033: PUSH
67034: LD_INT 1
67036: ST_TO_ADDR
// if p3 = 16 then
67037: LD_VAR 0 3
67041: PUSH
67042: LD_INT 16
67044: EQUAL
67045: IFFALSE 67055
// sTroll := true ;
67047: LD_ADDR_EXP 95
67051: PUSH
67052: LD_INT 1
67054: ST_TO_ADDR
// if p3 = 17 then
67055: LD_VAR 0 3
67059: PUSH
67060: LD_INT 17
67062: EQUAL
67063: IFFALSE 67073
// sSlow := true ;
67065: LD_ADDR_EXP 96
67069: PUSH
67070: LD_INT 1
67072: ST_TO_ADDR
// if p3 = 18 then
67073: LD_VAR 0 3
67077: PUSH
67078: LD_INT 18
67080: EQUAL
67081: IFFALSE 67091
// sLack := true ;
67083: LD_ADDR_EXP 97
67087: PUSH
67088: LD_INT 1
67090: ST_TO_ADDR
// if p3 = 19 then
67091: LD_VAR 0 3
67095: PUSH
67096: LD_INT 19
67098: EQUAL
67099: IFFALSE 67109
// sTank := true ;
67101: LD_ADDR_EXP 99
67105: PUSH
67106: LD_INT 1
67108: ST_TO_ADDR
// if p3 = 20 then
67109: LD_VAR 0 3
67113: PUSH
67114: LD_INT 20
67116: EQUAL
67117: IFFALSE 67127
// sRemote := true ;
67119: LD_ADDR_EXP 100
67123: PUSH
67124: LD_INT 1
67126: ST_TO_ADDR
// if p3 = 21 then
67127: LD_VAR 0 3
67131: PUSH
67132: LD_INT 21
67134: EQUAL
67135: IFFALSE 67145
// sPowell := true ;
67137: LD_ADDR_EXP 101
67141: PUSH
67142: LD_INT 1
67144: ST_TO_ADDR
// if p3 = 22 then
67145: LD_VAR 0 3
67149: PUSH
67150: LD_INT 22
67152: EQUAL
67153: IFFALSE 67163
// sTeleport := true ;
67155: LD_ADDR_EXP 104
67159: PUSH
67160: LD_INT 1
67162: ST_TO_ADDR
// if p3 = 23 then
67163: LD_VAR 0 3
67167: PUSH
67168: LD_INT 23
67170: EQUAL
67171: IFFALSE 67181
// sOilTower := true ;
67173: LD_ADDR_EXP 106
67177: PUSH
67178: LD_INT 1
67180: ST_TO_ADDR
// if p3 = 24 then
67181: LD_VAR 0 3
67185: PUSH
67186: LD_INT 24
67188: EQUAL
67189: IFFALSE 67199
// sShovel := true ;
67191: LD_ADDR_EXP 107
67195: PUSH
67196: LD_INT 1
67198: ST_TO_ADDR
// if p3 = 25 then
67199: LD_VAR 0 3
67203: PUSH
67204: LD_INT 25
67206: EQUAL
67207: IFFALSE 67217
// sSheik := true ;
67209: LD_ADDR_EXP 108
67213: PUSH
67214: LD_INT 1
67216: ST_TO_ADDR
// if p3 = 26 then
67217: LD_VAR 0 3
67221: PUSH
67222: LD_INT 26
67224: EQUAL
67225: IFFALSE 67235
// sEarthquake := true ;
67227: LD_ADDR_EXP 110
67231: PUSH
67232: LD_INT 1
67234: ST_TO_ADDR
// if p3 = 27 then
67235: LD_VAR 0 3
67239: PUSH
67240: LD_INT 27
67242: EQUAL
67243: IFFALSE 67253
// sAI := true ;
67245: LD_ADDR_EXP 111
67249: PUSH
67250: LD_INT 1
67252: ST_TO_ADDR
// if p3 = 28 then
67253: LD_VAR 0 3
67257: PUSH
67258: LD_INT 28
67260: EQUAL
67261: IFFALSE 67271
// sCargo := true ;
67263: LD_ADDR_EXP 114
67267: PUSH
67268: LD_INT 1
67270: ST_TO_ADDR
// if p3 = 29 then
67271: LD_VAR 0 3
67275: PUSH
67276: LD_INT 29
67278: EQUAL
67279: IFFALSE 67289
// sDLaser := true ;
67281: LD_ADDR_EXP 115
67285: PUSH
67286: LD_INT 1
67288: ST_TO_ADDR
// if p3 = 30 then
67289: LD_VAR 0 3
67293: PUSH
67294: LD_INT 30
67296: EQUAL
67297: IFFALSE 67307
// sExchange := true ;
67299: LD_ADDR_EXP 116
67303: PUSH
67304: LD_INT 1
67306: ST_TO_ADDR
// if p3 = 31 then
67307: LD_VAR 0 3
67311: PUSH
67312: LD_INT 31
67314: EQUAL
67315: IFFALSE 67325
// sFac := true ;
67317: LD_ADDR_EXP 117
67321: PUSH
67322: LD_INT 1
67324: ST_TO_ADDR
// if p3 = 32 then
67325: LD_VAR 0 3
67329: PUSH
67330: LD_INT 32
67332: EQUAL
67333: IFFALSE 67343
// sPower := true ;
67335: LD_ADDR_EXP 118
67339: PUSH
67340: LD_INT 1
67342: ST_TO_ADDR
// if p3 = 33 then
67343: LD_VAR 0 3
67347: PUSH
67348: LD_INT 33
67350: EQUAL
67351: IFFALSE 67361
// sRandom := true ;
67353: LD_ADDR_EXP 119
67357: PUSH
67358: LD_INT 1
67360: ST_TO_ADDR
// if p3 = 34 then
67361: LD_VAR 0 3
67365: PUSH
67366: LD_INT 34
67368: EQUAL
67369: IFFALSE 67379
// sShield := true ;
67371: LD_ADDR_EXP 120
67375: PUSH
67376: LD_INT 1
67378: ST_TO_ADDR
// if p3 = 35 then
67379: LD_VAR 0 3
67383: PUSH
67384: LD_INT 35
67386: EQUAL
67387: IFFALSE 67397
// sTime := true ;
67389: LD_ADDR_EXP 121
67393: PUSH
67394: LD_INT 1
67396: ST_TO_ADDR
// if p3 = 36 then
67397: LD_VAR 0 3
67401: PUSH
67402: LD_INT 36
67404: EQUAL
67405: IFFALSE 67415
// sTools := true ;
67407: LD_ADDR_EXP 122
67411: PUSH
67412: LD_INT 1
67414: ST_TO_ADDR
// if p3 = 101 then
67415: LD_VAR 0 3
67419: PUSH
67420: LD_INT 101
67422: EQUAL
67423: IFFALSE 67433
// sSold := true ;
67425: LD_ADDR_EXP 87
67429: PUSH
67430: LD_INT 1
67432: ST_TO_ADDR
// if p3 = 102 then
67433: LD_VAR 0 3
67437: PUSH
67438: LD_INT 102
67440: EQUAL
67441: IFFALSE 67451
// sDiff := true ;
67443: LD_ADDR_EXP 88
67447: PUSH
67448: LD_INT 1
67450: ST_TO_ADDR
// if p3 = 103 then
67451: LD_VAR 0 3
67455: PUSH
67456: LD_INT 103
67458: EQUAL
67459: IFFALSE 67469
// sFog := true ;
67461: LD_ADDR_EXP 91
67465: PUSH
67466: LD_INT 1
67468: ST_TO_ADDR
// if p3 = 104 then
67469: LD_VAR 0 3
67473: PUSH
67474: LD_INT 104
67476: EQUAL
67477: IFFALSE 67487
// sReset := true ;
67479: LD_ADDR_EXP 92
67483: PUSH
67484: LD_INT 1
67486: ST_TO_ADDR
// if p3 = 105 then
67487: LD_VAR 0 3
67491: PUSH
67492: LD_INT 105
67494: EQUAL
67495: IFFALSE 67505
// sSun := true ;
67497: LD_ADDR_EXP 93
67501: PUSH
67502: LD_INT 1
67504: ST_TO_ADDR
// if p3 = 106 then
67505: LD_VAR 0 3
67509: PUSH
67510: LD_INT 106
67512: EQUAL
67513: IFFALSE 67523
// sTiger := true ;
67515: LD_ADDR_EXP 89
67519: PUSH
67520: LD_INT 1
67522: ST_TO_ADDR
// if p3 = 107 then
67523: LD_VAR 0 3
67527: PUSH
67528: LD_INT 107
67530: EQUAL
67531: IFFALSE 67541
// sBomb := true ;
67533: LD_ADDR_EXP 90
67537: PUSH
67538: LD_INT 1
67540: ST_TO_ADDR
// if p3 = 108 then
67541: LD_VAR 0 3
67545: PUSH
67546: LD_INT 108
67548: EQUAL
67549: IFFALSE 67559
// sWound := true ;
67551: LD_ADDR_EXP 98
67555: PUSH
67556: LD_INT 1
67558: ST_TO_ADDR
// if p3 = 109 then
67559: LD_VAR 0 3
67563: PUSH
67564: LD_INT 109
67566: EQUAL
67567: IFFALSE 67577
// sBetray := true ;
67569: LD_ADDR_EXP 102
67573: PUSH
67574: LD_INT 1
67576: ST_TO_ADDR
// if p3 = 110 then
67577: LD_VAR 0 3
67581: PUSH
67582: LD_INT 110
67584: EQUAL
67585: IFFALSE 67595
// sContamin := true ;
67587: LD_ADDR_EXP 103
67591: PUSH
67592: LD_INT 1
67594: ST_TO_ADDR
// if p3 = 111 then
67595: LD_VAR 0 3
67599: PUSH
67600: LD_INT 111
67602: EQUAL
67603: IFFALSE 67613
// sOil := true ;
67605: LD_ADDR_EXP 105
67609: PUSH
67610: LD_INT 1
67612: ST_TO_ADDR
// if p3 = 112 then
67613: LD_VAR 0 3
67617: PUSH
67618: LD_INT 112
67620: EQUAL
67621: IFFALSE 67631
// sStu := true ;
67623: LD_ADDR_EXP 109
67627: PUSH
67628: LD_INT 1
67630: ST_TO_ADDR
// if p3 = 113 then
67631: LD_VAR 0 3
67635: PUSH
67636: LD_INT 113
67638: EQUAL
67639: IFFALSE 67649
// sBazooka := true ;
67641: LD_ADDR_EXP 112
67645: PUSH
67646: LD_INT 1
67648: ST_TO_ADDR
// if p3 = 114 then
67649: LD_VAR 0 3
67653: PUSH
67654: LD_INT 114
67656: EQUAL
67657: IFFALSE 67667
// sMortar := true ;
67659: LD_ADDR_EXP 113
67663: PUSH
67664: LD_INT 1
67666: ST_TO_ADDR
// if p3 = 115 then
67667: LD_VAR 0 3
67671: PUSH
67672: LD_INT 115
67674: EQUAL
67675: IFFALSE 67685
// sRanger := true ;
67677: LD_ADDR_EXP 123
67681: PUSH
67682: LD_INT 1
67684: ST_TO_ADDR
// if p3 = 116 then
67685: LD_VAR 0 3
67689: PUSH
67690: LD_INT 116
67692: EQUAL
67693: IFFALSE 67703
// sComputer := true ;
67695: LD_ADDR_EXP 124
67699: PUSH
67700: LD_INT 1
67702: ST_TO_ADDR
// if p3 = 117 then
67703: LD_VAR 0 3
67707: PUSH
67708: LD_INT 117
67710: EQUAL
67711: IFFALSE 67721
// s30 := true ;
67713: LD_ADDR_EXP 125
67717: PUSH
67718: LD_INT 1
67720: ST_TO_ADDR
// if p3 = 118 then
67721: LD_VAR 0 3
67725: PUSH
67726: LD_INT 118
67728: EQUAL
67729: IFFALSE 67739
// s60 := true ;
67731: LD_ADDR_EXP 126
67735: PUSH
67736: LD_INT 1
67738: ST_TO_ADDR
// end ; if p2 = hack_mode then
67739: LD_VAR 0 2
67743: PUSH
67744: LD_INT 101
67746: EQUAL
67747: IFFALSE 67875
// begin case p3 of 1 :
67749: LD_VAR 0 3
67753: PUSH
67754: LD_INT 1
67756: DOUBLE
67757: EQUAL
67758: IFTRUE 67762
67760: GO 67769
67762: POP
// hHackUnlimitedResources ; 2 :
67763: CALL 80014 0 0
67767: GO 67875
67769: LD_INT 2
67771: DOUBLE
67772: EQUAL
67773: IFTRUE 67777
67775: GO 67784
67777: POP
// hHackSetLevel10 ; 3 :
67778: CALL 80147 0 0
67782: GO 67875
67784: LD_INT 3
67786: DOUBLE
67787: EQUAL
67788: IFTRUE 67792
67790: GO 67799
67792: POP
// hHackSetLevel10YourUnits ; 4 :
67793: CALL 80232 0 0
67797: GO 67875
67799: LD_INT 4
67801: DOUBLE
67802: EQUAL
67803: IFTRUE 67807
67805: GO 67814
67807: POP
// hHackInvincible ; 5 :
67808: CALL 80680 0 0
67812: GO 67875
67814: LD_INT 5
67816: DOUBLE
67817: EQUAL
67818: IFTRUE 67822
67820: GO 67829
67822: POP
// hHackInvisible ; 6 :
67823: CALL 80791 0 0
67827: GO 67875
67829: LD_INT 6
67831: DOUBLE
67832: EQUAL
67833: IFTRUE 67837
67835: GO 67844
67837: POP
// hHackChangeYourSide ; 7 :
67838: CALL 80848 0 0
67842: GO 67875
67844: LD_INT 7
67846: DOUBLE
67847: EQUAL
67848: IFTRUE 67852
67850: GO 67859
67852: POP
// hHackChangeUnitSide ; 8 :
67853: CALL 80890 0 0
67857: GO 67875
67859: LD_INT 8
67861: DOUBLE
67862: EQUAL
67863: IFTRUE 67867
67865: GO 67874
67867: POP
// hHackFog ; end ;
67868: CALL 80991 0 0
67872: GO 67875
67874: POP
// end ; if p2 = game_save_mode then
67875: LD_VAR 0 2
67879: PUSH
67880: LD_INT 102
67882: EQUAL
67883: IFFALSE 67938
// begin if p3 = 1 then
67885: LD_VAR 0 3
67889: PUSH
67890: LD_INT 1
67892: EQUAL
67893: IFFALSE 67905
// globalGameSaveCounter := p4 ;
67895: LD_ADDR_EXP 69
67899: PUSH
67900: LD_VAR 0 4
67904: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
67905: LD_VAR 0 3
67909: PUSH
67910: LD_INT 2
67912: EQUAL
67913: PUSH
67914: LD_EXP 69
67918: AND
67919: IFFALSE 67938
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
67921: LD_STRING setGameSaveCounter(
67923: PUSH
67924: LD_EXP 69
67928: STR
67929: PUSH
67930: LD_STRING )
67932: STR
67933: PPUSH
67934: CALL_OW 559
// end ; end ;
67938: LD_VAR 0 7
67942: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
67943: LD_INT 0
67945: PPUSH
// streamModeActive := false ;
67946: LD_ADDR_EXP 70
67950: PUSH
67951: LD_INT 0
67953: ST_TO_ADDR
// normalCounter := 36 ;
67954: LD_ADDR_EXP 71
67958: PUSH
67959: LD_INT 36
67961: ST_TO_ADDR
// hardcoreCounter := 18 ;
67962: LD_ADDR_EXP 72
67966: PUSH
67967: LD_INT 18
67969: ST_TO_ADDR
// sRocket := false ;
67970: LD_ADDR_EXP 75
67974: PUSH
67975: LD_INT 0
67977: ST_TO_ADDR
// sSpeed := false ;
67978: LD_ADDR_EXP 74
67982: PUSH
67983: LD_INT 0
67985: ST_TO_ADDR
// sEngine := false ;
67986: LD_ADDR_EXP 76
67990: PUSH
67991: LD_INT 0
67993: ST_TO_ADDR
// sSpec := false ;
67994: LD_ADDR_EXP 73
67998: PUSH
67999: LD_INT 0
68001: ST_TO_ADDR
// sLevel := false ;
68002: LD_ADDR_EXP 77
68006: PUSH
68007: LD_INT 0
68009: ST_TO_ADDR
// sArmoury := false ;
68010: LD_ADDR_EXP 78
68014: PUSH
68015: LD_INT 0
68017: ST_TO_ADDR
// sRadar := false ;
68018: LD_ADDR_EXP 79
68022: PUSH
68023: LD_INT 0
68025: ST_TO_ADDR
// sBunker := false ;
68026: LD_ADDR_EXP 80
68030: PUSH
68031: LD_INT 0
68033: ST_TO_ADDR
// sHack := false ;
68034: LD_ADDR_EXP 81
68038: PUSH
68039: LD_INT 0
68041: ST_TO_ADDR
// sFire := false ;
68042: LD_ADDR_EXP 82
68046: PUSH
68047: LD_INT 0
68049: ST_TO_ADDR
// sRefresh := false ;
68050: LD_ADDR_EXP 83
68054: PUSH
68055: LD_INT 0
68057: ST_TO_ADDR
// sExp := false ;
68058: LD_ADDR_EXP 84
68062: PUSH
68063: LD_INT 0
68065: ST_TO_ADDR
// sDepot := false ;
68066: LD_ADDR_EXP 85
68070: PUSH
68071: LD_INT 0
68073: ST_TO_ADDR
// sFlag := false ;
68074: LD_ADDR_EXP 86
68078: PUSH
68079: LD_INT 0
68081: ST_TO_ADDR
// sKamikadze := false ;
68082: LD_ADDR_EXP 94
68086: PUSH
68087: LD_INT 0
68089: ST_TO_ADDR
// sTroll := false ;
68090: LD_ADDR_EXP 95
68094: PUSH
68095: LD_INT 0
68097: ST_TO_ADDR
// sSlow := false ;
68098: LD_ADDR_EXP 96
68102: PUSH
68103: LD_INT 0
68105: ST_TO_ADDR
// sLack := false ;
68106: LD_ADDR_EXP 97
68110: PUSH
68111: LD_INT 0
68113: ST_TO_ADDR
// sTank := false ;
68114: LD_ADDR_EXP 99
68118: PUSH
68119: LD_INT 0
68121: ST_TO_ADDR
// sRemote := false ;
68122: LD_ADDR_EXP 100
68126: PUSH
68127: LD_INT 0
68129: ST_TO_ADDR
// sPowell := false ;
68130: LD_ADDR_EXP 101
68134: PUSH
68135: LD_INT 0
68137: ST_TO_ADDR
// sTeleport := false ;
68138: LD_ADDR_EXP 104
68142: PUSH
68143: LD_INT 0
68145: ST_TO_ADDR
// sOilTower := false ;
68146: LD_ADDR_EXP 106
68150: PUSH
68151: LD_INT 0
68153: ST_TO_ADDR
// sShovel := false ;
68154: LD_ADDR_EXP 107
68158: PUSH
68159: LD_INT 0
68161: ST_TO_ADDR
// sSheik := false ;
68162: LD_ADDR_EXP 108
68166: PUSH
68167: LD_INT 0
68169: ST_TO_ADDR
// sEarthquake := false ;
68170: LD_ADDR_EXP 110
68174: PUSH
68175: LD_INT 0
68177: ST_TO_ADDR
// sAI := false ;
68178: LD_ADDR_EXP 111
68182: PUSH
68183: LD_INT 0
68185: ST_TO_ADDR
// sCargo := false ;
68186: LD_ADDR_EXP 114
68190: PUSH
68191: LD_INT 0
68193: ST_TO_ADDR
// sDLaser := false ;
68194: LD_ADDR_EXP 115
68198: PUSH
68199: LD_INT 0
68201: ST_TO_ADDR
// sExchange := false ;
68202: LD_ADDR_EXP 116
68206: PUSH
68207: LD_INT 0
68209: ST_TO_ADDR
// sFac := false ;
68210: LD_ADDR_EXP 117
68214: PUSH
68215: LD_INT 0
68217: ST_TO_ADDR
// sPower := false ;
68218: LD_ADDR_EXP 118
68222: PUSH
68223: LD_INT 0
68225: ST_TO_ADDR
// sRandom := false ;
68226: LD_ADDR_EXP 119
68230: PUSH
68231: LD_INT 0
68233: ST_TO_ADDR
// sShield := false ;
68234: LD_ADDR_EXP 120
68238: PUSH
68239: LD_INT 0
68241: ST_TO_ADDR
// sTime := false ;
68242: LD_ADDR_EXP 121
68246: PUSH
68247: LD_INT 0
68249: ST_TO_ADDR
// sTools := false ;
68250: LD_ADDR_EXP 122
68254: PUSH
68255: LD_INT 0
68257: ST_TO_ADDR
// sSold := false ;
68258: LD_ADDR_EXP 87
68262: PUSH
68263: LD_INT 0
68265: ST_TO_ADDR
// sDiff := false ;
68266: LD_ADDR_EXP 88
68270: PUSH
68271: LD_INT 0
68273: ST_TO_ADDR
// sFog := false ;
68274: LD_ADDR_EXP 91
68278: PUSH
68279: LD_INT 0
68281: ST_TO_ADDR
// sReset := false ;
68282: LD_ADDR_EXP 92
68286: PUSH
68287: LD_INT 0
68289: ST_TO_ADDR
// sSun := false ;
68290: LD_ADDR_EXP 93
68294: PUSH
68295: LD_INT 0
68297: ST_TO_ADDR
// sTiger := false ;
68298: LD_ADDR_EXP 89
68302: PUSH
68303: LD_INT 0
68305: ST_TO_ADDR
// sBomb := false ;
68306: LD_ADDR_EXP 90
68310: PUSH
68311: LD_INT 0
68313: ST_TO_ADDR
// sWound := false ;
68314: LD_ADDR_EXP 98
68318: PUSH
68319: LD_INT 0
68321: ST_TO_ADDR
// sBetray := false ;
68322: LD_ADDR_EXP 102
68326: PUSH
68327: LD_INT 0
68329: ST_TO_ADDR
// sContamin := false ;
68330: LD_ADDR_EXP 103
68334: PUSH
68335: LD_INT 0
68337: ST_TO_ADDR
// sOil := false ;
68338: LD_ADDR_EXP 105
68342: PUSH
68343: LD_INT 0
68345: ST_TO_ADDR
// sStu := false ;
68346: LD_ADDR_EXP 109
68350: PUSH
68351: LD_INT 0
68353: ST_TO_ADDR
// sBazooka := false ;
68354: LD_ADDR_EXP 112
68358: PUSH
68359: LD_INT 0
68361: ST_TO_ADDR
// sMortar := false ;
68362: LD_ADDR_EXP 113
68366: PUSH
68367: LD_INT 0
68369: ST_TO_ADDR
// sRanger := false ;
68370: LD_ADDR_EXP 123
68374: PUSH
68375: LD_INT 0
68377: ST_TO_ADDR
// sComputer := false ;
68378: LD_ADDR_EXP 124
68382: PUSH
68383: LD_INT 0
68385: ST_TO_ADDR
// s30 := false ;
68386: LD_ADDR_EXP 125
68390: PUSH
68391: LD_INT 0
68393: ST_TO_ADDR
// s60 := false ;
68394: LD_ADDR_EXP 126
68398: PUSH
68399: LD_INT 0
68401: ST_TO_ADDR
// end ;
68402: LD_VAR 0 1
68406: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
68407: LD_INT 0
68409: PPUSH
68410: PPUSH
68411: PPUSH
68412: PPUSH
68413: PPUSH
68414: PPUSH
68415: PPUSH
// result := [ ] ;
68416: LD_ADDR_VAR 0 2
68420: PUSH
68421: EMPTY
68422: ST_TO_ADDR
// if campaign_id = 1 then
68423: LD_OWVAR 69
68427: PUSH
68428: LD_INT 1
68430: EQUAL
68431: IFFALSE 71597
// begin case mission_number of 1 :
68433: LD_OWVAR 70
68437: PUSH
68438: LD_INT 1
68440: DOUBLE
68441: EQUAL
68442: IFTRUE 68446
68444: GO 68522
68446: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
68447: LD_ADDR_VAR 0 2
68451: PUSH
68452: LD_INT 2
68454: PUSH
68455: LD_INT 4
68457: PUSH
68458: LD_INT 11
68460: PUSH
68461: LD_INT 12
68463: PUSH
68464: LD_INT 15
68466: PUSH
68467: LD_INT 16
68469: PUSH
68470: LD_INT 22
68472: PUSH
68473: LD_INT 23
68475: PUSH
68476: LD_INT 26
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 101
68492: PUSH
68493: LD_INT 102
68495: PUSH
68496: LD_INT 106
68498: PUSH
68499: LD_INT 116
68501: PUSH
68502: LD_INT 117
68504: PUSH
68505: LD_INT 118
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: ST_TO_ADDR
68520: GO 71595
68522: LD_INT 2
68524: DOUBLE
68525: EQUAL
68526: IFTRUE 68530
68528: GO 68614
68530: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
68531: LD_ADDR_VAR 0 2
68535: PUSH
68536: LD_INT 2
68538: PUSH
68539: LD_INT 4
68541: PUSH
68542: LD_INT 11
68544: PUSH
68545: LD_INT 12
68547: PUSH
68548: LD_INT 15
68550: PUSH
68551: LD_INT 16
68553: PUSH
68554: LD_INT 22
68556: PUSH
68557: LD_INT 23
68559: PUSH
68560: LD_INT 26
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 101
68576: PUSH
68577: LD_INT 102
68579: PUSH
68580: LD_INT 105
68582: PUSH
68583: LD_INT 106
68585: PUSH
68586: LD_INT 108
68588: PUSH
68589: LD_INT 116
68591: PUSH
68592: LD_INT 117
68594: PUSH
68595: LD_INT 118
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: ST_TO_ADDR
68612: GO 71595
68614: LD_INT 3
68616: DOUBLE
68617: EQUAL
68618: IFTRUE 68622
68620: GO 68710
68622: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
68623: LD_ADDR_VAR 0 2
68627: PUSH
68628: LD_INT 2
68630: PUSH
68631: LD_INT 4
68633: PUSH
68634: LD_INT 5
68636: PUSH
68637: LD_INT 11
68639: PUSH
68640: LD_INT 12
68642: PUSH
68643: LD_INT 15
68645: PUSH
68646: LD_INT 16
68648: PUSH
68649: LD_INT 22
68651: PUSH
68652: LD_INT 26
68654: PUSH
68655: LD_INT 36
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 101
68672: PUSH
68673: LD_INT 102
68675: PUSH
68676: LD_INT 105
68678: PUSH
68679: LD_INT 106
68681: PUSH
68682: LD_INT 108
68684: PUSH
68685: LD_INT 116
68687: PUSH
68688: LD_INT 117
68690: PUSH
68691: LD_INT 118
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: ST_TO_ADDR
68708: GO 71595
68710: LD_INT 4
68712: DOUBLE
68713: EQUAL
68714: IFTRUE 68718
68716: GO 68814
68718: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
68719: LD_ADDR_VAR 0 2
68723: PUSH
68724: LD_INT 2
68726: PUSH
68727: LD_INT 4
68729: PUSH
68730: LD_INT 5
68732: PUSH
68733: LD_INT 8
68735: PUSH
68736: LD_INT 11
68738: PUSH
68739: LD_INT 12
68741: PUSH
68742: LD_INT 15
68744: PUSH
68745: LD_INT 16
68747: PUSH
68748: LD_INT 22
68750: PUSH
68751: LD_INT 23
68753: PUSH
68754: LD_INT 26
68756: PUSH
68757: LD_INT 36
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 101
68776: PUSH
68777: LD_INT 102
68779: PUSH
68780: LD_INT 105
68782: PUSH
68783: LD_INT 106
68785: PUSH
68786: LD_INT 108
68788: PUSH
68789: LD_INT 116
68791: PUSH
68792: LD_INT 117
68794: PUSH
68795: LD_INT 118
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: ST_TO_ADDR
68812: GO 71595
68814: LD_INT 5
68816: DOUBLE
68817: EQUAL
68818: IFTRUE 68822
68820: GO 68934
68822: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
68823: LD_ADDR_VAR 0 2
68827: PUSH
68828: LD_INT 2
68830: PUSH
68831: LD_INT 4
68833: PUSH
68834: LD_INT 5
68836: PUSH
68837: LD_INT 6
68839: PUSH
68840: LD_INT 8
68842: PUSH
68843: LD_INT 11
68845: PUSH
68846: LD_INT 12
68848: PUSH
68849: LD_INT 15
68851: PUSH
68852: LD_INT 16
68854: PUSH
68855: LD_INT 22
68857: PUSH
68858: LD_INT 23
68860: PUSH
68861: LD_INT 25
68863: PUSH
68864: LD_INT 26
68866: PUSH
68867: LD_INT 36
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 101
68888: PUSH
68889: LD_INT 102
68891: PUSH
68892: LD_INT 105
68894: PUSH
68895: LD_INT 106
68897: PUSH
68898: LD_INT 108
68900: PUSH
68901: LD_INT 109
68903: PUSH
68904: LD_INT 112
68906: PUSH
68907: LD_INT 116
68909: PUSH
68910: LD_INT 117
68912: PUSH
68913: LD_INT 118
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: ST_TO_ADDR
68932: GO 71595
68934: LD_INT 6
68936: DOUBLE
68937: EQUAL
68938: IFTRUE 68942
68940: GO 69074
68942: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
68943: LD_ADDR_VAR 0 2
68947: PUSH
68948: LD_INT 2
68950: PUSH
68951: LD_INT 4
68953: PUSH
68954: LD_INT 5
68956: PUSH
68957: LD_INT 6
68959: PUSH
68960: LD_INT 8
68962: PUSH
68963: LD_INT 11
68965: PUSH
68966: LD_INT 12
68968: PUSH
68969: LD_INT 15
68971: PUSH
68972: LD_INT 16
68974: PUSH
68975: LD_INT 20
68977: PUSH
68978: LD_INT 21
68980: PUSH
68981: LD_INT 22
68983: PUSH
68984: LD_INT 23
68986: PUSH
68987: LD_INT 25
68989: PUSH
68990: LD_INT 26
68992: PUSH
68993: LD_INT 30
68995: PUSH
68996: LD_INT 31
68998: PUSH
68999: LD_INT 32
69001: PUSH
69002: LD_INT 36
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 101
69028: PUSH
69029: LD_INT 102
69031: PUSH
69032: LD_INT 105
69034: PUSH
69035: LD_INT 106
69037: PUSH
69038: LD_INT 108
69040: PUSH
69041: LD_INT 109
69043: PUSH
69044: LD_INT 112
69046: PUSH
69047: LD_INT 116
69049: PUSH
69050: LD_INT 117
69052: PUSH
69053: LD_INT 118
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: ST_TO_ADDR
69072: GO 71595
69074: LD_INT 7
69076: DOUBLE
69077: EQUAL
69078: IFTRUE 69082
69080: GO 69194
69082: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
69083: LD_ADDR_VAR 0 2
69087: PUSH
69088: LD_INT 2
69090: PUSH
69091: LD_INT 4
69093: PUSH
69094: LD_INT 5
69096: PUSH
69097: LD_INT 7
69099: PUSH
69100: LD_INT 11
69102: PUSH
69103: LD_INT 12
69105: PUSH
69106: LD_INT 15
69108: PUSH
69109: LD_INT 16
69111: PUSH
69112: LD_INT 20
69114: PUSH
69115: LD_INT 21
69117: PUSH
69118: LD_INT 22
69120: PUSH
69121: LD_INT 23
69123: PUSH
69124: LD_INT 25
69126: PUSH
69127: LD_INT 26
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 101
69148: PUSH
69149: LD_INT 102
69151: PUSH
69152: LD_INT 103
69154: PUSH
69155: LD_INT 105
69157: PUSH
69158: LD_INT 106
69160: PUSH
69161: LD_INT 108
69163: PUSH
69164: LD_INT 112
69166: PUSH
69167: LD_INT 116
69169: PUSH
69170: LD_INT 117
69172: PUSH
69173: LD_INT 118
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: ST_TO_ADDR
69192: GO 71595
69194: LD_INT 8
69196: DOUBLE
69197: EQUAL
69198: IFTRUE 69202
69200: GO 69342
69202: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
69203: LD_ADDR_VAR 0 2
69207: PUSH
69208: LD_INT 2
69210: PUSH
69211: LD_INT 4
69213: PUSH
69214: LD_INT 5
69216: PUSH
69217: LD_INT 6
69219: PUSH
69220: LD_INT 7
69222: PUSH
69223: LD_INT 8
69225: PUSH
69226: LD_INT 11
69228: PUSH
69229: LD_INT 12
69231: PUSH
69232: LD_INT 15
69234: PUSH
69235: LD_INT 16
69237: PUSH
69238: LD_INT 20
69240: PUSH
69241: LD_INT 21
69243: PUSH
69244: LD_INT 22
69246: PUSH
69247: LD_INT 23
69249: PUSH
69250: LD_INT 25
69252: PUSH
69253: LD_INT 26
69255: PUSH
69256: LD_INT 30
69258: PUSH
69259: LD_INT 31
69261: PUSH
69262: LD_INT 32
69264: PUSH
69265: LD_INT 36
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 101
69292: PUSH
69293: LD_INT 102
69295: PUSH
69296: LD_INT 103
69298: PUSH
69299: LD_INT 105
69301: PUSH
69302: LD_INT 106
69304: PUSH
69305: LD_INT 108
69307: PUSH
69308: LD_INT 109
69310: PUSH
69311: LD_INT 112
69313: PUSH
69314: LD_INT 116
69316: PUSH
69317: LD_INT 117
69319: PUSH
69320: LD_INT 118
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: ST_TO_ADDR
69340: GO 71595
69342: LD_INT 9
69344: DOUBLE
69345: EQUAL
69346: IFTRUE 69350
69348: GO 69498
69350: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
69351: LD_ADDR_VAR 0 2
69355: PUSH
69356: LD_INT 2
69358: PUSH
69359: LD_INT 4
69361: PUSH
69362: LD_INT 5
69364: PUSH
69365: LD_INT 6
69367: PUSH
69368: LD_INT 7
69370: PUSH
69371: LD_INT 8
69373: PUSH
69374: LD_INT 11
69376: PUSH
69377: LD_INT 12
69379: PUSH
69380: LD_INT 15
69382: PUSH
69383: LD_INT 16
69385: PUSH
69386: LD_INT 20
69388: PUSH
69389: LD_INT 21
69391: PUSH
69392: LD_INT 22
69394: PUSH
69395: LD_INT 23
69397: PUSH
69398: LD_INT 25
69400: PUSH
69401: LD_INT 26
69403: PUSH
69404: LD_INT 28
69406: PUSH
69407: LD_INT 30
69409: PUSH
69410: LD_INT 31
69412: PUSH
69413: LD_INT 32
69415: PUSH
69416: LD_INT 36
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 101
69444: PUSH
69445: LD_INT 102
69447: PUSH
69448: LD_INT 103
69450: PUSH
69451: LD_INT 105
69453: PUSH
69454: LD_INT 106
69456: PUSH
69457: LD_INT 108
69459: PUSH
69460: LD_INT 109
69462: PUSH
69463: LD_INT 112
69465: PUSH
69466: LD_INT 114
69468: PUSH
69469: LD_INT 116
69471: PUSH
69472: LD_INT 117
69474: PUSH
69475: LD_INT 118
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: ST_TO_ADDR
69496: GO 71595
69498: LD_INT 10
69500: DOUBLE
69501: EQUAL
69502: IFTRUE 69506
69504: GO 69702
69506: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
69507: LD_ADDR_VAR 0 2
69511: PUSH
69512: LD_INT 2
69514: PUSH
69515: LD_INT 4
69517: PUSH
69518: LD_INT 5
69520: PUSH
69521: LD_INT 6
69523: PUSH
69524: LD_INT 7
69526: PUSH
69527: LD_INT 8
69529: PUSH
69530: LD_INT 9
69532: PUSH
69533: LD_INT 10
69535: PUSH
69536: LD_INT 11
69538: PUSH
69539: LD_INT 12
69541: PUSH
69542: LD_INT 13
69544: PUSH
69545: LD_INT 14
69547: PUSH
69548: LD_INT 15
69550: PUSH
69551: LD_INT 16
69553: PUSH
69554: LD_INT 17
69556: PUSH
69557: LD_INT 18
69559: PUSH
69560: LD_INT 19
69562: PUSH
69563: LD_INT 20
69565: PUSH
69566: LD_INT 21
69568: PUSH
69569: LD_INT 22
69571: PUSH
69572: LD_INT 23
69574: PUSH
69575: LD_INT 24
69577: PUSH
69578: LD_INT 25
69580: PUSH
69581: LD_INT 26
69583: PUSH
69584: LD_INT 28
69586: PUSH
69587: LD_INT 30
69589: PUSH
69590: LD_INT 31
69592: PUSH
69593: LD_INT 32
69595: PUSH
69596: LD_INT 36
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 101
69632: PUSH
69633: LD_INT 102
69635: PUSH
69636: LD_INT 103
69638: PUSH
69639: LD_INT 104
69641: PUSH
69642: LD_INT 105
69644: PUSH
69645: LD_INT 106
69647: PUSH
69648: LD_INT 107
69650: PUSH
69651: LD_INT 108
69653: PUSH
69654: LD_INT 109
69656: PUSH
69657: LD_INT 110
69659: PUSH
69660: LD_INT 111
69662: PUSH
69663: LD_INT 112
69665: PUSH
69666: LD_INT 114
69668: PUSH
69669: LD_INT 116
69671: PUSH
69672: LD_INT 117
69674: PUSH
69675: LD_INT 118
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: ST_TO_ADDR
69700: GO 71595
69702: LD_INT 11
69704: DOUBLE
69705: EQUAL
69706: IFTRUE 69710
69708: GO 69914
69710: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
69711: LD_ADDR_VAR 0 2
69715: PUSH
69716: LD_INT 2
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: LD_INT 4
69724: PUSH
69725: LD_INT 5
69727: PUSH
69728: LD_INT 6
69730: PUSH
69731: LD_INT 7
69733: PUSH
69734: LD_INT 8
69736: PUSH
69737: LD_INT 9
69739: PUSH
69740: LD_INT 10
69742: PUSH
69743: LD_INT 11
69745: PUSH
69746: LD_INT 12
69748: PUSH
69749: LD_INT 13
69751: PUSH
69752: LD_INT 14
69754: PUSH
69755: LD_INT 15
69757: PUSH
69758: LD_INT 16
69760: PUSH
69761: LD_INT 17
69763: PUSH
69764: LD_INT 18
69766: PUSH
69767: LD_INT 19
69769: PUSH
69770: LD_INT 20
69772: PUSH
69773: LD_INT 21
69775: PUSH
69776: LD_INT 22
69778: PUSH
69779: LD_INT 23
69781: PUSH
69782: LD_INT 24
69784: PUSH
69785: LD_INT 25
69787: PUSH
69788: LD_INT 26
69790: PUSH
69791: LD_INT 28
69793: PUSH
69794: LD_INT 30
69796: PUSH
69797: LD_INT 31
69799: PUSH
69800: LD_INT 32
69802: PUSH
69803: LD_INT 34
69805: PUSH
69806: LD_INT 36
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 101
69844: PUSH
69845: LD_INT 102
69847: PUSH
69848: LD_INT 103
69850: PUSH
69851: LD_INT 104
69853: PUSH
69854: LD_INT 105
69856: PUSH
69857: LD_INT 106
69859: PUSH
69860: LD_INT 107
69862: PUSH
69863: LD_INT 108
69865: PUSH
69866: LD_INT 109
69868: PUSH
69869: LD_INT 110
69871: PUSH
69872: LD_INT 111
69874: PUSH
69875: LD_INT 112
69877: PUSH
69878: LD_INT 114
69880: PUSH
69881: LD_INT 116
69883: PUSH
69884: LD_INT 117
69886: PUSH
69887: LD_INT 118
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: ST_TO_ADDR
69912: GO 71595
69914: LD_INT 12
69916: DOUBLE
69917: EQUAL
69918: IFTRUE 69922
69920: GO 70142
69922: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
69923: LD_ADDR_VAR 0 2
69927: PUSH
69928: LD_INT 1
69930: PUSH
69931: LD_INT 2
69933: PUSH
69934: LD_INT 3
69936: PUSH
69937: LD_INT 4
69939: PUSH
69940: LD_INT 5
69942: PUSH
69943: LD_INT 6
69945: PUSH
69946: LD_INT 7
69948: PUSH
69949: LD_INT 8
69951: PUSH
69952: LD_INT 9
69954: PUSH
69955: LD_INT 10
69957: PUSH
69958: LD_INT 11
69960: PUSH
69961: LD_INT 12
69963: PUSH
69964: LD_INT 13
69966: PUSH
69967: LD_INT 14
69969: PUSH
69970: LD_INT 15
69972: PUSH
69973: LD_INT 16
69975: PUSH
69976: LD_INT 17
69978: PUSH
69979: LD_INT 18
69981: PUSH
69982: LD_INT 19
69984: PUSH
69985: LD_INT 20
69987: PUSH
69988: LD_INT 21
69990: PUSH
69991: LD_INT 22
69993: PUSH
69994: LD_INT 23
69996: PUSH
69997: LD_INT 24
69999: PUSH
70000: LD_INT 25
70002: PUSH
70003: LD_INT 26
70005: PUSH
70006: LD_INT 27
70008: PUSH
70009: LD_INT 28
70011: PUSH
70012: LD_INT 30
70014: PUSH
70015: LD_INT 31
70017: PUSH
70018: LD_INT 32
70020: PUSH
70021: LD_INT 33
70023: PUSH
70024: LD_INT 34
70026: PUSH
70027: LD_INT 36
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 101
70068: PUSH
70069: LD_INT 102
70071: PUSH
70072: LD_INT 103
70074: PUSH
70075: LD_INT 104
70077: PUSH
70078: LD_INT 105
70080: PUSH
70081: LD_INT 106
70083: PUSH
70084: LD_INT 107
70086: PUSH
70087: LD_INT 108
70089: PUSH
70090: LD_INT 109
70092: PUSH
70093: LD_INT 110
70095: PUSH
70096: LD_INT 111
70098: PUSH
70099: LD_INT 112
70101: PUSH
70102: LD_INT 113
70104: PUSH
70105: LD_INT 114
70107: PUSH
70108: LD_INT 116
70110: PUSH
70111: LD_INT 117
70113: PUSH
70114: LD_INT 118
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: ST_TO_ADDR
70140: GO 71595
70142: LD_INT 13
70144: DOUBLE
70145: EQUAL
70146: IFTRUE 70150
70148: GO 70358
70150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
70151: LD_ADDR_VAR 0 2
70155: PUSH
70156: LD_INT 1
70158: PUSH
70159: LD_INT 2
70161: PUSH
70162: LD_INT 3
70164: PUSH
70165: LD_INT 4
70167: PUSH
70168: LD_INT 5
70170: PUSH
70171: LD_INT 8
70173: PUSH
70174: LD_INT 9
70176: PUSH
70177: LD_INT 10
70179: PUSH
70180: LD_INT 11
70182: PUSH
70183: LD_INT 12
70185: PUSH
70186: LD_INT 14
70188: PUSH
70189: LD_INT 15
70191: PUSH
70192: LD_INT 16
70194: PUSH
70195: LD_INT 17
70197: PUSH
70198: LD_INT 18
70200: PUSH
70201: LD_INT 19
70203: PUSH
70204: LD_INT 20
70206: PUSH
70207: LD_INT 21
70209: PUSH
70210: LD_INT 22
70212: PUSH
70213: LD_INT 23
70215: PUSH
70216: LD_INT 24
70218: PUSH
70219: LD_INT 25
70221: PUSH
70222: LD_INT 26
70224: PUSH
70225: LD_INT 27
70227: PUSH
70228: LD_INT 28
70230: PUSH
70231: LD_INT 30
70233: PUSH
70234: LD_INT 31
70236: PUSH
70237: LD_INT 32
70239: PUSH
70240: LD_INT 33
70242: PUSH
70243: LD_INT 34
70245: PUSH
70246: LD_INT 36
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 101
70284: PUSH
70285: LD_INT 102
70287: PUSH
70288: LD_INT 103
70290: PUSH
70291: LD_INT 104
70293: PUSH
70294: LD_INT 105
70296: PUSH
70297: LD_INT 106
70299: PUSH
70300: LD_INT 107
70302: PUSH
70303: LD_INT 108
70305: PUSH
70306: LD_INT 109
70308: PUSH
70309: LD_INT 110
70311: PUSH
70312: LD_INT 111
70314: PUSH
70315: LD_INT 112
70317: PUSH
70318: LD_INT 113
70320: PUSH
70321: LD_INT 114
70323: PUSH
70324: LD_INT 116
70326: PUSH
70327: LD_INT 117
70329: PUSH
70330: LD_INT 118
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: ST_TO_ADDR
70356: GO 71595
70358: LD_INT 14
70360: DOUBLE
70361: EQUAL
70362: IFTRUE 70366
70364: GO 70590
70366: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
70367: LD_ADDR_VAR 0 2
70371: PUSH
70372: LD_INT 1
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: LD_INT 3
70380: PUSH
70381: LD_INT 4
70383: PUSH
70384: LD_INT 5
70386: PUSH
70387: LD_INT 6
70389: PUSH
70390: LD_INT 7
70392: PUSH
70393: LD_INT 8
70395: PUSH
70396: LD_INT 9
70398: PUSH
70399: LD_INT 10
70401: PUSH
70402: LD_INT 11
70404: PUSH
70405: LD_INT 12
70407: PUSH
70408: LD_INT 13
70410: PUSH
70411: LD_INT 14
70413: PUSH
70414: LD_INT 15
70416: PUSH
70417: LD_INT 16
70419: PUSH
70420: LD_INT 17
70422: PUSH
70423: LD_INT 18
70425: PUSH
70426: LD_INT 19
70428: PUSH
70429: LD_INT 20
70431: PUSH
70432: LD_INT 21
70434: PUSH
70435: LD_INT 22
70437: PUSH
70438: LD_INT 23
70440: PUSH
70441: LD_INT 24
70443: PUSH
70444: LD_INT 25
70446: PUSH
70447: LD_INT 26
70449: PUSH
70450: LD_INT 27
70452: PUSH
70453: LD_INT 28
70455: PUSH
70456: LD_INT 29
70458: PUSH
70459: LD_INT 30
70461: PUSH
70462: LD_INT 31
70464: PUSH
70465: LD_INT 32
70467: PUSH
70468: LD_INT 33
70470: PUSH
70471: LD_INT 34
70473: PUSH
70474: LD_INT 36
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 101
70516: PUSH
70517: LD_INT 102
70519: PUSH
70520: LD_INT 103
70522: PUSH
70523: LD_INT 104
70525: PUSH
70526: LD_INT 105
70528: PUSH
70529: LD_INT 106
70531: PUSH
70532: LD_INT 107
70534: PUSH
70535: LD_INT 108
70537: PUSH
70538: LD_INT 109
70540: PUSH
70541: LD_INT 110
70543: PUSH
70544: LD_INT 111
70546: PUSH
70547: LD_INT 112
70549: PUSH
70550: LD_INT 113
70552: PUSH
70553: LD_INT 114
70555: PUSH
70556: LD_INT 116
70558: PUSH
70559: LD_INT 117
70561: PUSH
70562: LD_INT 118
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: ST_TO_ADDR
70588: GO 71595
70590: LD_INT 15
70592: DOUBLE
70593: EQUAL
70594: IFTRUE 70598
70596: GO 70822
70598: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
70599: LD_ADDR_VAR 0 2
70603: PUSH
70604: LD_INT 1
70606: PUSH
70607: LD_INT 2
70609: PUSH
70610: LD_INT 3
70612: PUSH
70613: LD_INT 4
70615: PUSH
70616: LD_INT 5
70618: PUSH
70619: LD_INT 6
70621: PUSH
70622: LD_INT 7
70624: PUSH
70625: LD_INT 8
70627: PUSH
70628: LD_INT 9
70630: PUSH
70631: LD_INT 10
70633: PUSH
70634: LD_INT 11
70636: PUSH
70637: LD_INT 12
70639: PUSH
70640: LD_INT 13
70642: PUSH
70643: LD_INT 14
70645: PUSH
70646: LD_INT 15
70648: PUSH
70649: LD_INT 16
70651: PUSH
70652: LD_INT 17
70654: PUSH
70655: LD_INT 18
70657: PUSH
70658: LD_INT 19
70660: PUSH
70661: LD_INT 20
70663: PUSH
70664: LD_INT 21
70666: PUSH
70667: LD_INT 22
70669: PUSH
70670: LD_INT 23
70672: PUSH
70673: LD_INT 24
70675: PUSH
70676: LD_INT 25
70678: PUSH
70679: LD_INT 26
70681: PUSH
70682: LD_INT 27
70684: PUSH
70685: LD_INT 28
70687: PUSH
70688: LD_INT 29
70690: PUSH
70691: LD_INT 30
70693: PUSH
70694: LD_INT 31
70696: PUSH
70697: LD_INT 32
70699: PUSH
70700: LD_INT 33
70702: PUSH
70703: LD_INT 34
70705: PUSH
70706: LD_INT 36
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 101
70748: PUSH
70749: LD_INT 102
70751: PUSH
70752: LD_INT 103
70754: PUSH
70755: LD_INT 104
70757: PUSH
70758: LD_INT 105
70760: PUSH
70761: LD_INT 106
70763: PUSH
70764: LD_INT 107
70766: PUSH
70767: LD_INT 108
70769: PUSH
70770: LD_INT 109
70772: PUSH
70773: LD_INT 110
70775: PUSH
70776: LD_INT 111
70778: PUSH
70779: LD_INT 112
70781: PUSH
70782: LD_INT 113
70784: PUSH
70785: LD_INT 114
70787: PUSH
70788: LD_INT 116
70790: PUSH
70791: LD_INT 117
70793: PUSH
70794: LD_INT 118
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: ST_TO_ADDR
70820: GO 71595
70822: LD_INT 16
70824: DOUBLE
70825: EQUAL
70826: IFTRUE 70830
70828: GO 70966
70830: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
70831: LD_ADDR_VAR 0 2
70835: PUSH
70836: LD_INT 2
70838: PUSH
70839: LD_INT 4
70841: PUSH
70842: LD_INT 5
70844: PUSH
70845: LD_INT 7
70847: PUSH
70848: LD_INT 11
70850: PUSH
70851: LD_INT 12
70853: PUSH
70854: LD_INT 15
70856: PUSH
70857: LD_INT 16
70859: PUSH
70860: LD_INT 20
70862: PUSH
70863: LD_INT 21
70865: PUSH
70866: LD_INT 22
70868: PUSH
70869: LD_INT 23
70871: PUSH
70872: LD_INT 25
70874: PUSH
70875: LD_INT 26
70877: PUSH
70878: LD_INT 30
70880: PUSH
70881: LD_INT 31
70883: PUSH
70884: LD_INT 32
70886: PUSH
70887: LD_INT 33
70889: PUSH
70890: LD_INT 34
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 101
70916: PUSH
70917: LD_INT 102
70919: PUSH
70920: LD_INT 103
70922: PUSH
70923: LD_INT 106
70925: PUSH
70926: LD_INT 108
70928: PUSH
70929: LD_INT 112
70931: PUSH
70932: LD_INT 113
70934: PUSH
70935: LD_INT 114
70937: PUSH
70938: LD_INT 116
70940: PUSH
70941: LD_INT 117
70943: PUSH
70944: LD_INT 118
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: ST_TO_ADDR
70964: GO 71595
70966: LD_INT 17
70968: DOUBLE
70969: EQUAL
70970: IFTRUE 70974
70972: GO 71198
70974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
70975: LD_ADDR_VAR 0 2
70979: PUSH
70980: LD_INT 1
70982: PUSH
70983: LD_INT 2
70985: PUSH
70986: LD_INT 3
70988: PUSH
70989: LD_INT 4
70991: PUSH
70992: LD_INT 5
70994: PUSH
70995: LD_INT 6
70997: PUSH
70998: LD_INT 7
71000: PUSH
71001: LD_INT 8
71003: PUSH
71004: LD_INT 9
71006: PUSH
71007: LD_INT 10
71009: PUSH
71010: LD_INT 11
71012: PUSH
71013: LD_INT 12
71015: PUSH
71016: LD_INT 13
71018: PUSH
71019: LD_INT 14
71021: PUSH
71022: LD_INT 15
71024: PUSH
71025: LD_INT 16
71027: PUSH
71028: LD_INT 17
71030: PUSH
71031: LD_INT 18
71033: PUSH
71034: LD_INT 19
71036: PUSH
71037: LD_INT 20
71039: PUSH
71040: LD_INT 21
71042: PUSH
71043: LD_INT 22
71045: PUSH
71046: LD_INT 23
71048: PUSH
71049: LD_INT 24
71051: PUSH
71052: LD_INT 25
71054: PUSH
71055: LD_INT 26
71057: PUSH
71058: LD_INT 27
71060: PUSH
71061: LD_INT 28
71063: PUSH
71064: LD_INT 29
71066: PUSH
71067: LD_INT 30
71069: PUSH
71070: LD_INT 31
71072: PUSH
71073: LD_INT 32
71075: PUSH
71076: LD_INT 33
71078: PUSH
71079: LD_INT 34
71081: PUSH
71082: LD_INT 36
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 101
71124: PUSH
71125: LD_INT 102
71127: PUSH
71128: LD_INT 103
71130: PUSH
71131: LD_INT 104
71133: PUSH
71134: LD_INT 105
71136: PUSH
71137: LD_INT 106
71139: PUSH
71140: LD_INT 107
71142: PUSH
71143: LD_INT 108
71145: PUSH
71146: LD_INT 109
71148: PUSH
71149: LD_INT 110
71151: PUSH
71152: LD_INT 111
71154: PUSH
71155: LD_INT 112
71157: PUSH
71158: LD_INT 113
71160: PUSH
71161: LD_INT 114
71163: PUSH
71164: LD_INT 116
71166: PUSH
71167: LD_INT 117
71169: PUSH
71170: LD_INT 118
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: ST_TO_ADDR
71196: GO 71595
71198: LD_INT 18
71200: DOUBLE
71201: EQUAL
71202: IFTRUE 71206
71204: GO 71354
71206: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
71207: LD_ADDR_VAR 0 2
71211: PUSH
71212: LD_INT 2
71214: PUSH
71215: LD_INT 4
71217: PUSH
71218: LD_INT 5
71220: PUSH
71221: LD_INT 7
71223: PUSH
71224: LD_INT 11
71226: PUSH
71227: LD_INT 12
71229: PUSH
71230: LD_INT 15
71232: PUSH
71233: LD_INT 16
71235: PUSH
71236: LD_INT 20
71238: PUSH
71239: LD_INT 21
71241: PUSH
71242: LD_INT 22
71244: PUSH
71245: LD_INT 23
71247: PUSH
71248: LD_INT 25
71250: PUSH
71251: LD_INT 26
71253: PUSH
71254: LD_INT 30
71256: PUSH
71257: LD_INT 31
71259: PUSH
71260: LD_INT 32
71262: PUSH
71263: LD_INT 33
71265: PUSH
71266: LD_INT 34
71268: PUSH
71269: LD_INT 35
71271: PUSH
71272: LD_INT 36
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 101
71300: PUSH
71301: LD_INT 102
71303: PUSH
71304: LD_INT 103
71306: PUSH
71307: LD_INT 106
71309: PUSH
71310: LD_INT 108
71312: PUSH
71313: LD_INT 112
71315: PUSH
71316: LD_INT 113
71318: PUSH
71319: LD_INT 114
71321: PUSH
71322: LD_INT 115
71324: PUSH
71325: LD_INT 116
71327: PUSH
71328: LD_INT 117
71330: PUSH
71331: LD_INT 118
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: ST_TO_ADDR
71352: GO 71595
71354: LD_INT 19
71356: DOUBLE
71357: EQUAL
71358: IFTRUE 71362
71360: GO 71594
71362: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
71363: LD_ADDR_VAR 0 2
71367: PUSH
71368: LD_INT 1
71370: PUSH
71371: LD_INT 2
71373: PUSH
71374: LD_INT 3
71376: PUSH
71377: LD_INT 4
71379: PUSH
71380: LD_INT 5
71382: PUSH
71383: LD_INT 6
71385: PUSH
71386: LD_INT 7
71388: PUSH
71389: LD_INT 8
71391: PUSH
71392: LD_INT 9
71394: PUSH
71395: LD_INT 10
71397: PUSH
71398: LD_INT 11
71400: PUSH
71401: LD_INT 12
71403: PUSH
71404: LD_INT 13
71406: PUSH
71407: LD_INT 14
71409: PUSH
71410: LD_INT 15
71412: PUSH
71413: LD_INT 16
71415: PUSH
71416: LD_INT 17
71418: PUSH
71419: LD_INT 18
71421: PUSH
71422: LD_INT 19
71424: PUSH
71425: LD_INT 20
71427: PUSH
71428: LD_INT 21
71430: PUSH
71431: LD_INT 22
71433: PUSH
71434: LD_INT 23
71436: PUSH
71437: LD_INT 24
71439: PUSH
71440: LD_INT 25
71442: PUSH
71443: LD_INT 26
71445: PUSH
71446: LD_INT 27
71448: PUSH
71449: LD_INT 28
71451: PUSH
71452: LD_INT 29
71454: PUSH
71455: LD_INT 30
71457: PUSH
71458: LD_INT 31
71460: PUSH
71461: LD_INT 32
71463: PUSH
71464: LD_INT 33
71466: PUSH
71467: LD_INT 34
71469: PUSH
71470: LD_INT 35
71472: PUSH
71473: LD_INT 36
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 101
71516: PUSH
71517: LD_INT 102
71519: PUSH
71520: LD_INT 103
71522: PUSH
71523: LD_INT 104
71525: PUSH
71526: LD_INT 105
71528: PUSH
71529: LD_INT 106
71531: PUSH
71532: LD_INT 107
71534: PUSH
71535: LD_INT 108
71537: PUSH
71538: LD_INT 109
71540: PUSH
71541: LD_INT 110
71543: PUSH
71544: LD_INT 111
71546: PUSH
71547: LD_INT 112
71549: PUSH
71550: LD_INT 113
71552: PUSH
71553: LD_INT 114
71555: PUSH
71556: LD_INT 115
71558: PUSH
71559: LD_INT 116
71561: PUSH
71562: LD_INT 117
71564: PUSH
71565: LD_INT 118
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: ST_TO_ADDR
71592: GO 71595
71594: POP
// end else
71595: GO 71826
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
71597: LD_ADDR_VAR 0 2
71601: PUSH
71602: LD_INT 1
71604: PUSH
71605: LD_INT 2
71607: PUSH
71608: LD_INT 3
71610: PUSH
71611: LD_INT 4
71613: PUSH
71614: LD_INT 5
71616: PUSH
71617: LD_INT 6
71619: PUSH
71620: LD_INT 7
71622: PUSH
71623: LD_INT 8
71625: PUSH
71626: LD_INT 9
71628: PUSH
71629: LD_INT 10
71631: PUSH
71632: LD_INT 11
71634: PUSH
71635: LD_INT 12
71637: PUSH
71638: LD_INT 13
71640: PUSH
71641: LD_INT 14
71643: PUSH
71644: LD_INT 15
71646: PUSH
71647: LD_INT 16
71649: PUSH
71650: LD_INT 17
71652: PUSH
71653: LD_INT 18
71655: PUSH
71656: LD_INT 19
71658: PUSH
71659: LD_INT 20
71661: PUSH
71662: LD_INT 21
71664: PUSH
71665: LD_INT 22
71667: PUSH
71668: LD_INT 23
71670: PUSH
71671: LD_INT 24
71673: PUSH
71674: LD_INT 25
71676: PUSH
71677: LD_INT 26
71679: PUSH
71680: LD_INT 27
71682: PUSH
71683: LD_INT 28
71685: PUSH
71686: LD_INT 29
71688: PUSH
71689: LD_INT 30
71691: PUSH
71692: LD_INT 31
71694: PUSH
71695: LD_INT 32
71697: PUSH
71698: LD_INT 33
71700: PUSH
71701: LD_INT 34
71703: PUSH
71704: LD_INT 35
71706: PUSH
71707: LD_INT 36
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 101
71750: PUSH
71751: LD_INT 102
71753: PUSH
71754: LD_INT 103
71756: PUSH
71757: LD_INT 104
71759: PUSH
71760: LD_INT 105
71762: PUSH
71763: LD_INT 106
71765: PUSH
71766: LD_INT 107
71768: PUSH
71769: LD_INT 108
71771: PUSH
71772: LD_INT 109
71774: PUSH
71775: LD_INT 110
71777: PUSH
71778: LD_INT 111
71780: PUSH
71781: LD_INT 112
71783: PUSH
71784: LD_INT 113
71786: PUSH
71787: LD_INT 114
71789: PUSH
71790: LD_INT 115
71792: PUSH
71793: LD_INT 116
71795: PUSH
71796: LD_INT 117
71798: PUSH
71799: LD_INT 118
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: ST_TO_ADDR
// if result then
71826: LD_VAR 0 2
71830: IFFALSE 72616
// begin normal :=  ;
71832: LD_ADDR_VAR 0 5
71836: PUSH
71837: LD_STRING 
71839: ST_TO_ADDR
// hardcore :=  ;
71840: LD_ADDR_VAR 0 6
71844: PUSH
71845: LD_STRING 
71847: ST_TO_ADDR
// active :=  ;
71848: LD_ADDR_VAR 0 7
71852: PUSH
71853: LD_STRING 
71855: ST_TO_ADDR
// for i = 1 to normalCounter do
71856: LD_ADDR_VAR 0 8
71860: PUSH
71861: DOUBLE
71862: LD_INT 1
71864: DEC
71865: ST_TO_ADDR
71866: LD_EXP 71
71870: PUSH
71871: FOR_TO
71872: IFFALSE 71973
// begin tmp := 0 ;
71874: LD_ADDR_VAR 0 3
71878: PUSH
71879: LD_STRING 0
71881: ST_TO_ADDR
// if result [ 1 ] then
71882: LD_VAR 0 2
71886: PUSH
71887: LD_INT 1
71889: ARRAY
71890: IFFALSE 71955
// if result [ 1 ] [ 1 ] = i then
71892: LD_VAR 0 2
71896: PUSH
71897: LD_INT 1
71899: ARRAY
71900: PUSH
71901: LD_INT 1
71903: ARRAY
71904: PUSH
71905: LD_VAR 0 8
71909: EQUAL
71910: IFFALSE 71955
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
71912: LD_ADDR_VAR 0 2
71916: PUSH
71917: LD_VAR 0 2
71921: PPUSH
71922: LD_INT 1
71924: PPUSH
71925: LD_VAR 0 2
71929: PUSH
71930: LD_INT 1
71932: ARRAY
71933: PPUSH
71934: LD_INT 1
71936: PPUSH
71937: CALL_OW 3
71941: PPUSH
71942: CALL_OW 1
71946: ST_TO_ADDR
// tmp := 1 ;
71947: LD_ADDR_VAR 0 3
71951: PUSH
71952: LD_STRING 1
71954: ST_TO_ADDR
// end ; normal := normal & tmp ;
71955: LD_ADDR_VAR 0 5
71959: PUSH
71960: LD_VAR 0 5
71964: PUSH
71965: LD_VAR 0 3
71969: STR
71970: ST_TO_ADDR
// end ;
71971: GO 71871
71973: POP
71974: POP
// for i = 1 to hardcoreCounter do
71975: LD_ADDR_VAR 0 8
71979: PUSH
71980: DOUBLE
71981: LD_INT 1
71983: DEC
71984: ST_TO_ADDR
71985: LD_EXP 72
71989: PUSH
71990: FOR_TO
71991: IFFALSE 72096
// begin tmp := 0 ;
71993: LD_ADDR_VAR 0 3
71997: PUSH
71998: LD_STRING 0
72000: ST_TO_ADDR
// if result [ 2 ] then
72001: LD_VAR 0 2
72005: PUSH
72006: LD_INT 2
72008: ARRAY
72009: IFFALSE 72078
// if result [ 2 ] [ 1 ] = 100 + i then
72011: LD_VAR 0 2
72015: PUSH
72016: LD_INT 2
72018: ARRAY
72019: PUSH
72020: LD_INT 1
72022: ARRAY
72023: PUSH
72024: LD_INT 100
72026: PUSH
72027: LD_VAR 0 8
72031: PLUS
72032: EQUAL
72033: IFFALSE 72078
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
72035: LD_ADDR_VAR 0 2
72039: PUSH
72040: LD_VAR 0 2
72044: PPUSH
72045: LD_INT 2
72047: PPUSH
72048: LD_VAR 0 2
72052: PUSH
72053: LD_INT 2
72055: ARRAY
72056: PPUSH
72057: LD_INT 1
72059: PPUSH
72060: CALL_OW 3
72064: PPUSH
72065: CALL_OW 1
72069: ST_TO_ADDR
// tmp := 1 ;
72070: LD_ADDR_VAR 0 3
72074: PUSH
72075: LD_STRING 1
72077: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
72078: LD_ADDR_VAR 0 6
72082: PUSH
72083: LD_VAR 0 6
72087: PUSH
72088: LD_VAR 0 3
72092: STR
72093: ST_TO_ADDR
// end ;
72094: GO 71990
72096: POP
72097: POP
// if isGameLoad then
72098: LD_VAR 0 1
72102: IFFALSE 72577
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
72104: LD_ADDR_VAR 0 4
72108: PUSH
72109: LD_EXP 75
72113: PUSH
72114: LD_EXP 74
72118: PUSH
72119: LD_EXP 76
72123: PUSH
72124: LD_EXP 73
72128: PUSH
72129: LD_EXP 77
72133: PUSH
72134: LD_EXP 78
72138: PUSH
72139: LD_EXP 79
72143: PUSH
72144: LD_EXP 80
72148: PUSH
72149: LD_EXP 81
72153: PUSH
72154: LD_EXP 82
72158: PUSH
72159: LD_EXP 83
72163: PUSH
72164: LD_EXP 84
72168: PUSH
72169: LD_EXP 85
72173: PUSH
72174: LD_EXP 86
72178: PUSH
72179: LD_EXP 94
72183: PUSH
72184: LD_EXP 95
72188: PUSH
72189: LD_EXP 96
72193: PUSH
72194: LD_EXP 97
72198: PUSH
72199: LD_EXP 99
72203: PUSH
72204: LD_EXP 100
72208: PUSH
72209: LD_EXP 101
72213: PUSH
72214: LD_EXP 104
72218: PUSH
72219: LD_EXP 106
72223: PUSH
72224: LD_EXP 107
72228: PUSH
72229: LD_EXP 108
72233: PUSH
72234: LD_EXP 110
72238: PUSH
72239: LD_EXP 111
72243: PUSH
72244: LD_EXP 114
72248: PUSH
72249: LD_EXP 115
72253: PUSH
72254: LD_EXP 116
72258: PUSH
72259: LD_EXP 117
72263: PUSH
72264: LD_EXP 118
72268: PUSH
72269: LD_EXP 119
72273: PUSH
72274: LD_EXP 120
72278: PUSH
72279: LD_EXP 121
72283: PUSH
72284: LD_EXP 122
72288: PUSH
72289: LD_EXP 87
72293: PUSH
72294: LD_EXP 88
72298: PUSH
72299: LD_EXP 91
72303: PUSH
72304: LD_EXP 92
72308: PUSH
72309: LD_EXP 93
72313: PUSH
72314: LD_EXP 89
72318: PUSH
72319: LD_EXP 90
72323: PUSH
72324: LD_EXP 98
72328: PUSH
72329: LD_EXP 102
72333: PUSH
72334: LD_EXP 103
72338: PUSH
72339: LD_EXP 105
72343: PUSH
72344: LD_EXP 109
72348: PUSH
72349: LD_EXP 112
72353: PUSH
72354: LD_EXP 113
72358: PUSH
72359: LD_EXP 123
72363: PUSH
72364: LD_EXP 124
72368: PUSH
72369: LD_EXP 125
72373: PUSH
72374: LD_EXP 126
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: ST_TO_ADDR
// tmp :=  ;
72435: LD_ADDR_VAR 0 3
72439: PUSH
72440: LD_STRING 
72442: ST_TO_ADDR
// for i = 1 to normalCounter do
72443: LD_ADDR_VAR 0 8
72447: PUSH
72448: DOUBLE
72449: LD_INT 1
72451: DEC
72452: ST_TO_ADDR
72453: LD_EXP 71
72457: PUSH
72458: FOR_TO
72459: IFFALSE 72495
// begin if flags [ i ] then
72461: LD_VAR 0 4
72465: PUSH
72466: LD_VAR 0 8
72470: ARRAY
72471: IFFALSE 72493
// tmp := tmp & i & ; ;
72473: LD_ADDR_VAR 0 3
72477: PUSH
72478: LD_VAR 0 3
72482: PUSH
72483: LD_VAR 0 8
72487: STR
72488: PUSH
72489: LD_STRING ;
72491: STR
72492: ST_TO_ADDR
// end ;
72493: GO 72458
72495: POP
72496: POP
// for i = 1 to hardcoreCounter do
72497: LD_ADDR_VAR 0 8
72501: PUSH
72502: DOUBLE
72503: LD_INT 1
72505: DEC
72506: ST_TO_ADDR
72507: LD_EXP 72
72511: PUSH
72512: FOR_TO
72513: IFFALSE 72559
// begin if flags [ normalCounter + i ] then
72515: LD_VAR 0 4
72519: PUSH
72520: LD_EXP 71
72524: PUSH
72525: LD_VAR 0 8
72529: PLUS
72530: ARRAY
72531: IFFALSE 72557
// tmp := tmp & ( 100 + i ) & ; ;
72533: LD_ADDR_VAR 0 3
72537: PUSH
72538: LD_VAR 0 3
72542: PUSH
72543: LD_INT 100
72545: PUSH
72546: LD_VAR 0 8
72550: PLUS
72551: STR
72552: PUSH
72553: LD_STRING ;
72555: STR
72556: ST_TO_ADDR
// end ;
72557: GO 72512
72559: POP
72560: POP
// if tmp then
72561: LD_VAR 0 3
72565: IFFALSE 72577
// active := tmp ;
72567: LD_ADDR_VAR 0 7
72571: PUSH
72572: LD_VAR 0 3
72576: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
72577: LD_STRING getStreamItemsFromMission("
72579: PUSH
72580: LD_VAR 0 5
72584: STR
72585: PUSH
72586: LD_STRING ","
72588: STR
72589: PUSH
72590: LD_VAR 0 6
72594: STR
72595: PUSH
72596: LD_STRING ","
72598: STR
72599: PUSH
72600: LD_VAR 0 7
72604: STR
72605: PUSH
72606: LD_STRING ")
72608: STR
72609: PPUSH
72610: CALL_OW 559
// end else
72614: GO 72623
// ToLua ( getStreamItemsFromMission("","","") ) ;
72616: LD_STRING getStreamItemsFromMission("","","")
72618: PPUSH
72619: CALL_OW 559
// end ;
72623: LD_VAR 0 2
72627: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
72628: LD_EXP 70
72632: PUSH
72633: LD_EXP 75
72637: AND
72638: IFFALSE 72762
72640: GO 72642
72642: DISABLE
72643: LD_INT 0
72645: PPUSH
72646: PPUSH
// begin enable ;
72647: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
72648: LD_ADDR_VAR 0 2
72652: PUSH
72653: LD_INT 22
72655: PUSH
72656: LD_OWVAR 2
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 2
72667: PUSH
72668: LD_INT 34
72670: PUSH
72671: LD_INT 7
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 34
72680: PUSH
72681: LD_INT 45
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 34
72690: PUSH
72691: LD_INT 28
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PUSH
72698: LD_INT 34
72700: PUSH
72701: LD_INT 47
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PPUSH
72719: CALL_OW 69
72723: ST_TO_ADDR
// if not tmp then
72724: LD_VAR 0 2
72728: NOT
72729: IFFALSE 72733
// exit ;
72731: GO 72762
// for i in tmp do
72733: LD_ADDR_VAR 0 1
72737: PUSH
72738: LD_VAR 0 2
72742: PUSH
72743: FOR_IN
72744: IFFALSE 72760
// begin SetLives ( i , 0 ) ;
72746: LD_VAR 0 1
72750: PPUSH
72751: LD_INT 0
72753: PPUSH
72754: CALL_OW 234
// end ;
72758: GO 72743
72760: POP
72761: POP
// end ;
72762: PPOPN 2
72764: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
72765: LD_EXP 70
72769: PUSH
72770: LD_EXP 76
72774: AND
72775: IFFALSE 72859
72777: GO 72779
72779: DISABLE
72780: LD_INT 0
72782: PPUSH
72783: PPUSH
// begin enable ;
72784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
72785: LD_ADDR_VAR 0 2
72789: PUSH
72790: LD_INT 22
72792: PUSH
72793: LD_OWVAR 2
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 32
72804: PUSH
72805: LD_INT 3
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PPUSH
72816: CALL_OW 69
72820: ST_TO_ADDR
// if not tmp then
72821: LD_VAR 0 2
72825: NOT
72826: IFFALSE 72830
// exit ;
72828: GO 72859
// for i in tmp do
72830: LD_ADDR_VAR 0 1
72834: PUSH
72835: LD_VAR 0 2
72839: PUSH
72840: FOR_IN
72841: IFFALSE 72857
// begin SetLives ( i , 0 ) ;
72843: LD_VAR 0 1
72847: PPUSH
72848: LD_INT 0
72850: PPUSH
72851: CALL_OW 234
// end ;
72855: GO 72840
72857: POP
72858: POP
// end ;
72859: PPOPN 2
72861: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
72862: LD_EXP 70
72866: PUSH
72867: LD_EXP 73
72871: AND
72872: IFFALSE 72965
72874: GO 72876
72876: DISABLE
72877: LD_INT 0
72879: PPUSH
// begin enable ;
72880: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
72881: LD_ADDR_VAR 0 1
72885: PUSH
72886: LD_INT 22
72888: PUSH
72889: LD_OWVAR 2
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PUSH
72898: LD_INT 2
72900: PUSH
72901: LD_INT 25
72903: PUSH
72904: LD_INT 5
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 25
72913: PUSH
72914: LD_INT 9
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 25
72923: PUSH
72924: LD_INT 8
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: LIST
72935: LIST
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PPUSH
72941: CALL_OW 69
72945: PUSH
72946: FOR_IN
72947: IFFALSE 72963
// begin SetClass ( i , 1 ) ;
72949: LD_VAR 0 1
72953: PPUSH
72954: LD_INT 1
72956: PPUSH
72957: CALL_OW 336
// end ;
72961: GO 72946
72963: POP
72964: POP
// end ;
72965: PPOPN 1
72967: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72968: LD_EXP 70
72972: PUSH
72973: LD_EXP 74
72977: AND
72978: PUSH
72979: LD_OWVAR 65
72983: PUSH
72984: LD_INT 7
72986: LESS
72987: AND
72988: IFFALSE 73002
72990: GO 72992
72992: DISABLE
// begin enable ;
72993: ENABLE
// game_speed := 7 ;
72994: LD_ADDR_OWVAR 65
72998: PUSH
72999: LD_INT 7
73001: ST_TO_ADDR
// end ;
73002: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
73003: LD_EXP 70
73007: PUSH
73008: LD_EXP 77
73012: AND
73013: IFFALSE 73215
73015: GO 73017
73017: DISABLE
73018: LD_INT 0
73020: PPUSH
73021: PPUSH
73022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73023: LD_ADDR_VAR 0 3
73027: PUSH
73028: LD_INT 81
73030: PUSH
73031: LD_OWVAR 2
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 21
73042: PUSH
73043: LD_INT 1
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PPUSH
73054: CALL_OW 69
73058: ST_TO_ADDR
// if not tmp then
73059: LD_VAR 0 3
73063: NOT
73064: IFFALSE 73068
// exit ;
73066: GO 73215
// if tmp > 5 then
73068: LD_VAR 0 3
73072: PUSH
73073: LD_INT 5
73075: GREATER
73076: IFFALSE 73088
// k := 5 else
73078: LD_ADDR_VAR 0 2
73082: PUSH
73083: LD_INT 5
73085: ST_TO_ADDR
73086: GO 73098
// k := tmp ;
73088: LD_ADDR_VAR 0 2
73092: PUSH
73093: LD_VAR 0 3
73097: ST_TO_ADDR
// for i := 1 to k do
73098: LD_ADDR_VAR 0 1
73102: PUSH
73103: DOUBLE
73104: LD_INT 1
73106: DEC
73107: ST_TO_ADDR
73108: LD_VAR 0 2
73112: PUSH
73113: FOR_TO
73114: IFFALSE 73213
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
73116: LD_VAR 0 3
73120: PUSH
73121: LD_VAR 0 1
73125: ARRAY
73126: PPUSH
73127: LD_VAR 0 1
73131: PUSH
73132: LD_INT 4
73134: MOD
73135: PUSH
73136: LD_INT 1
73138: PLUS
73139: PPUSH
73140: CALL_OW 259
73144: PUSH
73145: LD_INT 10
73147: LESS
73148: IFFALSE 73211
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73150: LD_VAR 0 3
73154: PUSH
73155: LD_VAR 0 1
73159: ARRAY
73160: PPUSH
73161: LD_VAR 0 1
73165: PUSH
73166: LD_INT 4
73168: MOD
73169: PUSH
73170: LD_INT 1
73172: PLUS
73173: PPUSH
73174: LD_VAR 0 3
73178: PUSH
73179: LD_VAR 0 1
73183: ARRAY
73184: PPUSH
73185: LD_VAR 0 1
73189: PUSH
73190: LD_INT 4
73192: MOD
73193: PUSH
73194: LD_INT 1
73196: PLUS
73197: PPUSH
73198: CALL_OW 259
73202: PUSH
73203: LD_INT 1
73205: PLUS
73206: PPUSH
73207: CALL_OW 237
73211: GO 73113
73213: POP
73214: POP
// end ;
73215: PPOPN 3
73217: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73218: LD_EXP 70
73222: PUSH
73223: LD_EXP 78
73227: AND
73228: IFFALSE 73248
73230: GO 73232
73232: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73233: LD_INT 4
73235: PPUSH
73236: LD_OWVAR 2
73240: PPUSH
73241: LD_INT 0
73243: PPUSH
73244: CALL_OW 324
73248: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73249: LD_EXP 70
73253: PUSH
73254: LD_EXP 107
73258: AND
73259: IFFALSE 73279
73261: GO 73263
73263: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73264: LD_INT 19
73266: PPUSH
73267: LD_OWVAR 2
73271: PPUSH
73272: LD_INT 0
73274: PPUSH
73275: CALL_OW 324
73279: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73280: LD_EXP 70
73284: PUSH
73285: LD_EXP 79
73289: AND
73290: IFFALSE 73392
73292: GO 73294
73294: DISABLE
73295: LD_INT 0
73297: PPUSH
73298: PPUSH
// begin enable ;
73299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73300: LD_ADDR_VAR 0 2
73304: PUSH
73305: LD_INT 22
73307: PUSH
73308: LD_OWVAR 2
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_INT 2
73319: PUSH
73320: LD_INT 34
73322: PUSH
73323: LD_INT 11
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 34
73332: PUSH
73333: LD_INT 30
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: LIST
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PPUSH
73349: CALL_OW 69
73353: ST_TO_ADDR
// if not tmp then
73354: LD_VAR 0 2
73358: NOT
73359: IFFALSE 73363
// exit ;
73361: GO 73392
// for i in tmp do
73363: LD_ADDR_VAR 0 1
73367: PUSH
73368: LD_VAR 0 2
73372: PUSH
73373: FOR_IN
73374: IFFALSE 73390
// begin SetLives ( i , 0 ) ;
73376: LD_VAR 0 1
73380: PPUSH
73381: LD_INT 0
73383: PPUSH
73384: CALL_OW 234
// end ;
73388: GO 73373
73390: POP
73391: POP
// end ;
73392: PPOPN 2
73394: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73395: LD_EXP 70
73399: PUSH
73400: LD_EXP 80
73404: AND
73405: IFFALSE 73425
73407: GO 73409
73409: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73410: LD_INT 32
73412: PPUSH
73413: LD_OWVAR 2
73417: PPUSH
73418: LD_INT 0
73420: PPUSH
73421: CALL_OW 324
73425: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73426: LD_EXP 70
73430: PUSH
73431: LD_EXP 81
73435: AND
73436: IFFALSE 73617
73438: GO 73440
73440: DISABLE
73441: LD_INT 0
73443: PPUSH
73444: PPUSH
73445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73446: LD_ADDR_VAR 0 2
73450: PUSH
73451: LD_INT 22
73453: PUSH
73454: LD_OWVAR 2
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: LD_INT 33
73465: PUSH
73466: LD_INT 3
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PPUSH
73477: CALL_OW 69
73481: ST_TO_ADDR
// if not tmp then
73482: LD_VAR 0 2
73486: NOT
73487: IFFALSE 73491
// exit ;
73489: GO 73617
// side := 0 ;
73491: LD_ADDR_VAR 0 3
73495: PUSH
73496: LD_INT 0
73498: ST_TO_ADDR
// for i := 1 to 8 do
73499: LD_ADDR_VAR 0 1
73503: PUSH
73504: DOUBLE
73505: LD_INT 1
73507: DEC
73508: ST_TO_ADDR
73509: LD_INT 8
73511: PUSH
73512: FOR_TO
73513: IFFALSE 73561
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73515: LD_OWVAR 2
73519: PUSH
73520: LD_VAR 0 1
73524: NONEQUAL
73525: PUSH
73526: LD_OWVAR 2
73530: PPUSH
73531: LD_VAR 0 1
73535: PPUSH
73536: CALL_OW 81
73540: PUSH
73541: LD_INT 2
73543: EQUAL
73544: AND
73545: IFFALSE 73559
// begin side := i ;
73547: LD_ADDR_VAR 0 3
73551: PUSH
73552: LD_VAR 0 1
73556: ST_TO_ADDR
// break ;
73557: GO 73561
// end ;
73559: GO 73512
73561: POP
73562: POP
// if not side then
73563: LD_VAR 0 3
73567: NOT
73568: IFFALSE 73572
// exit ;
73570: GO 73617
// for i := 1 to tmp do
73572: LD_ADDR_VAR 0 1
73576: PUSH
73577: DOUBLE
73578: LD_INT 1
73580: DEC
73581: ST_TO_ADDR
73582: LD_VAR 0 2
73586: PUSH
73587: FOR_TO
73588: IFFALSE 73615
// if Prob ( 60 ) then
73590: LD_INT 60
73592: PPUSH
73593: CALL_OW 13
73597: IFFALSE 73613
// SetSide ( i , side ) ;
73599: LD_VAR 0 1
73603: PPUSH
73604: LD_VAR 0 3
73608: PPUSH
73609: CALL_OW 235
73613: GO 73587
73615: POP
73616: POP
// end ;
73617: PPOPN 3
73619: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
73620: LD_EXP 70
73624: PUSH
73625: LD_EXP 83
73629: AND
73630: IFFALSE 73749
73632: GO 73634
73634: DISABLE
73635: LD_INT 0
73637: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
73638: LD_ADDR_VAR 0 1
73642: PUSH
73643: LD_INT 22
73645: PUSH
73646: LD_OWVAR 2
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 21
73657: PUSH
73658: LD_INT 1
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 3
73667: PUSH
73668: LD_INT 23
73670: PUSH
73671: LD_INT 0
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: LIST
73686: PPUSH
73687: CALL_OW 69
73691: PUSH
73692: FOR_IN
73693: IFFALSE 73747
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
73695: LD_VAR 0 1
73699: PPUSH
73700: CALL_OW 257
73704: PUSH
73705: LD_INT 1
73707: PUSH
73708: LD_INT 2
73710: PUSH
73711: LD_INT 3
73713: PUSH
73714: LD_INT 4
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: IN
73723: IFFALSE 73745
// SetClass ( un , rand ( 1 , 4 ) ) ;
73725: LD_VAR 0 1
73729: PPUSH
73730: LD_INT 1
73732: PPUSH
73733: LD_INT 4
73735: PPUSH
73736: CALL_OW 12
73740: PPUSH
73741: CALL_OW 336
73745: GO 73692
73747: POP
73748: POP
// end ;
73749: PPOPN 1
73751: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
73752: LD_EXP 70
73756: PUSH
73757: LD_EXP 82
73761: AND
73762: IFFALSE 73841
73764: GO 73766
73766: DISABLE
73767: LD_INT 0
73769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73770: LD_ADDR_VAR 0 1
73774: PUSH
73775: LD_INT 22
73777: PUSH
73778: LD_OWVAR 2
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PUSH
73787: LD_INT 21
73789: PUSH
73790: LD_INT 3
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PPUSH
73801: CALL_OW 69
73805: ST_TO_ADDR
// if not tmp then
73806: LD_VAR 0 1
73810: NOT
73811: IFFALSE 73815
// exit ;
73813: GO 73841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
73815: LD_VAR 0 1
73819: PUSH
73820: LD_INT 1
73822: PPUSH
73823: LD_VAR 0 1
73827: PPUSH
73828: CALL_OW 12
73832: ARRAY
73833: PPUSH
73834: LD_INT 100
73836: PPUSH
73837: CALL_OW 234
// end ;
73841: PPOPN 1
73843: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
73844: LD_EXP 70
73848: PUSH
73849: LD_EXP 84
73853: AND
73854: IFFALSE 73952
73856: GO 73858
73858: DISABLE
73859: LD_INT 0
73861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73862: LD_ADDR_VAR 0 1
73866: PUSH
73867: LD_INT 22
73869: PUSH
73870: LD_OWVAR 2
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 21
73881: PUSH
73882: LD_INT 1
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: PPUSH
73893: CALL_OW 69
73897: ST_TO_ADDR
// if not tmp then
73898: LD_VAR 0 1
73902: NOT
73903: IFFALSE 73907
// exit ;
73905: GO 73952
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
73907: LD_VAR 0 1
73911: PUSH
73912: LD_INT 1
73914: PPUSH
73915: LD_VAR 0 1
73919: PPUSH
73920: CALL_OW 12
73924: ARRAY
73925: PPUSH
73926: LD_INT 1
73928: PPUSH
73929: LD_INT 4
73931: PPUSH
73932: CALL_OW 12
73936: PPUSH
73937: LD_INT 3000
73939: PPUSH
73940: LD_INT 9000
73942: PPUSH
73943: CALL_OW 12
73947: PPUSH
73948: CALL_OW 492
// end ;
73952: PPOPN 1
73954: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73955: LD_EXP 70
73959: PUSH
73960: LD_EXP 85
73964: AND
73965: IFFALSE 73985
73967: GO 73969
73969: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
73970: LD_INT 1
73972: PPUSH
73973: LD_OWVAR 2
73977: PPUSH
73978: LD_INT 0
73980: PPUSH
73981: CALL_OW 324
73985: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
73986: LD_EXP 70
73990: PUSH
73991: LD_EXP 86
73995: AND
73996: IFFALSE 74079
73998: GO 74000
74000: DISABLE
74001: LD_INT 0
74003: PPUSH
74004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74005: LD_ADDR_VAR 0 2
74009: PUSH
74010: LD_INT 22
74012: PUSH
74013: LD_OWVAR 2
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PUSH
74022: LD_INT 21
74024: PUSH
74025: LD_INT 3
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PPUSH
74036: CALL_OW 69
74040: ST_TO_ADDR
// if not tmp then
74041: LD_VAR 0 2
74045: NOT
74046: IFFALSE 74050
// exit ;
74048: GO 74079
// for i in tmp do
74050: LD_ADDR_VAR 0 1
74054: PUSH
74055: LD_VAR 0 2
74059: PUSH
74060: FOR_IN
74061: IFFALSE 74077
// SetBLevel ( i , 10 ) ;
74063: LD_VAR 0 1
74067: PPUSH
74068: LD_INT 10
74070: PPUSH
74071: CALL_OW 241
74075: GO 74060
74077: POP
74078: POP
// end ;
74079: PPOPN 2
74081: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
74082: LD_EXP 70
74086: PUSH
74087: LD_EXP 87
74091: AND
74092: IFFALSE 74203
74094: GO 74096
74096: DISABLE
74097: LD_INT 0
74099: PPUSH
74100: PPUSH
74101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74102: LD_ADDR_VAR 0 3
74106: PUSH
74107: LD_INT 22
74109: PUSH
74110: LD_OWVAR 2
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PUSH
74119: LD_INT 25
74121: PUSH
74122: LD_INT 1
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PPUSH
74133: CALL_OW 69
74137: ST_TO_ADDR
// if not tmp then
74138: LD_VAR 0 3
74142: NOT
74143: IFFALSE 74147
// exit ;
74145: GO 74203
// un := tmp [ rand ( 1 , tmp ) ] ;
74147: LD_ADDR_VAR 0 2
74151: PUSH
74152: LD_VAR 0 3
74156: PUSH
74157: LD_INT 1
74159: PPUSH
74160: LD_VAR 0 3
74164: PPUSH
74165: CALL_OW 12
74169: ARRAY
74170: ST_TO_ADDR
// if Crawls ( un ) then
74171: LD_VAR 0 2
74175: PPUSH
74176: CALL_OW 318
74180: IFFALSE 74191
// ComWalk ( un ) ;
74182: LD_VAR 0 2
74186: PPUSH
74187: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74191: LD_VAR 0 2
74195: PPUSH
74196: LD_INT 5
74198: PPUSH
74199: CALL_OW 336
// end ;
74203: PPOPN 3
74205: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
74206: LD_EXP 70
74210: PUSH
74211: LD_EXP 88
74215: AND
74216: PUSH
74217: LD_OWVAR 67
74221: PUSH
74222: LD_INT 4
74224: LESS
74225: AND
74226: IFFALSE 74245
74228: GO 74230
74230: DISABLE
// begin Difficulty := Difficulty + 1 ;
74231: LD_ADDR_OWVAR 67
74235: PUSH
74236: LD_OWVAR 67
74240: PUSH
74241: LD_INT 1
74243: PLUS
74244: ST_TO_ADDR
// end ;
74245: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74246: LD_EXP 70
74250: PUSH
74251: LD_EXP 89
74255: AND
74256: IFFALSE 74359
74258: GO 74260
74260: DISABLE
74261: LD_INT 0
74263: PPUSH
// begin for i := 1 to 5 do
74264: LD_ADDR_VAR 0 1
74268: PUSH
74269: DOUBLE
74270: LD_INT 1
74272: DEC
74273: ST_TO_ADDR
74274: LD_INT 5
74276: PUSH
74277: FOR_TO
74278: IFFALSE 74357
// begin uc_nation := nation_nature ;
74280: LD_ADDR_OWVAR 21
74284: PUSH
74285: LD_INT 0
74287: ST_TO_ADDR
// uc_side := 0 ;
74288: LD_ADDR_OWVAR 20
74292: PUSH
74293: LD_INT 0
74295: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74296: LD_ADDR_OWVAR 29
74300: PUSH
74301: LD_INT 12
74303: PUSH
74304: LD_INT 12
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: ST_TO_ADDR
// hc_agressivity := 20 ;
74311: LD_ADDR_OWVAR 35
74315: PUSH
74316: LD_INT 20
74318: ST_TO_ADDR
// hc_class := class_tiger ;
74319: LD_ADDR_OWVAR 28
74323: PUSH
74324: LD_INT 14
74326: ST_TO_ADDR
// hc_gallery :=  ;
74327: LD_ADDR_OWVAR 33
74331: PUSH
74332: LD_STRING 
74334: ST_TO_ADDR
// hc_name :=  ;
74335: LD_ADDR_OWVAR 26
74339: PUSH
74340: LD_STRING 
74342: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74343: CALL_OW 44
74347: PPUSH
74348: LD_INT 0
74350: PPUSH
74351: CALL_OW 51
// end ;
74355: GO 74277
74357: POP
74358: POP
// end ;
74359: PPOPN 1
74361: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74362: LD_EXP 70
74366: PUSH
74367: LD_EXP 90
74371: AND
74372: IFFALSE 74381
74374: GO 74376
74376: DISABLE
// StreamSibBomb ;
74377: CALL 74382 0 0
74381: END
// export function StreamSibBomb ; var i , x , y ; begin
74382: LD_INT 0
74384: PPUSH
74385: PPUSH
74386: PPUSH
74387: PPUSH
// result := false ;
74388: LD_ADDR_VAR 0 1
74392: PUSH
74393: LD_INT 0
74395: ST_TO_ADDR
// for i := 1 to 16 do
74396: LD_ADDR_VAR 0 2
74400: PUSH
74401: DOUBLE
74402: LD_INT 1
74404: DEC
74405: ST_TO_ADDR
74406: LD_INT 16
74408: PUSH
74409: FOR_TO
74410: IFFALSE 74609
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74412: LD_ADDR_VAR 0 3
74416: PUSH
74417: LD_INT 10
74419: PUSH
74420: LD_INT 20
74422: PUSH
74423: LD_INT 30
74425: PUSH
74426: LD_INT 40
74428: PUSH
74429: LD_INT 50
74431: PUSH
74432: LD_INT 60
74434: PUSH
74435: LD_INT 70
74437: PUSH
74438: LD_INT 80
74440: PUSH
74441: LD_INT 90
74443: PUSH
74444: LD_INT 100
74446: PUSH
74447: LD_INT 110
74449: PUSH
74450: LD_INT 120
74452: PUSH
74453: LD_INT 130
74455: PUSH
74456: LD_INT 140
74458: PUSH
74459: LD_INT 150
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 1
74481: PPUSH
74482: LD_INT 15
74484: PPUSH
74485: CALL_OW 12
74489: ARRAY
74490: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74491: LD_ADDR_VAR 0 4
74495: PUSH
74496: LD_INT 10
74498: PUSH
74499: LD_INT 20
74501: PUSH
74502: LD_INT 30
74504: PUSH
74505: LD_INT 40
74507: PUSH
74508: LD_INT 50
74510: PUSH
74511: LD_INT 60
74513: PUSH
74514: LD_INT 70
74516: PUSH
74517: LD_INT 80
74519: PUSH
74520: LD_INT 90
74522: PUSH
74523: LD_INT 100
74525: PUSH
74526: LD_INT 110
74528: PUSH
74529: LD_INT 120
74531: PUSH
74532: LD_INT 130
74534: PUSH
74535: LD_INT 140
74537: PUSH
74538: LD_INT 150
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: PUSH
74558: LD_INT 1
74560: PPUSH
74561: LD_INT 15
74563: PPUSH
74564: CALL_OW 12
74568: ARRAY
74569: ST_TO_ADDR
// if ValidHex ( x , y ) then
74570: LD_VAR 0 3
74574: PPUSH
74575: LD_VAR 0 4
74579: PPUSH
74580: CALL_OW 488
74584: IFFALSE 74607
// begin result := [ x , y ] ;
74586: LD_ADDR_VAR 0 1
74590: PUSH
74591: LD_VAR 0 3
74595: PUSH
74596: LD_VAR 0 4
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: ST_TO_ADDR
// break ;
74605: GO 74609
// end ; end ;
74607: GO 74409
74609: POP
74610: POP
// if result then
74611: LD_VAR 0 1
74615: IFFALSE 74675
// begin ToLua ( playSibBomb() ) ;
74617: LD_STRING playSibBomb()
74619: PPUSH
74620: CALL_OW 559
// wait ( 0 0$14 ) ;
74624: LD_INT 490
74626: PPUSH
74627: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
74631: LD_VAR 0 1
74635: PUSH
74636: LD_INT 1
74638: ARRAY
74639: PPUSH
74640: LD_VAR 0 1
74644: PUSH
74645: LD_INT 2
74647: ARRAY
74648: PPUSH
74649: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
74653: LD_VAR 0 1
74657: PUSH
74658: LD_INT 1
74660: ARRAY
74661: PPUSH
74662: LD_VAR 0 1
74666: PUSH
74667: LD_INT 2
74669: ARRAY
74670: PPUSH
74671: CALL_OW 429
// end ; end ;
74675: LD_VAR 0 1
74679: RET
// every 0 0$1 trigger StreamModeActive and sReset do
74680: LD_EXP 70
74684: PUSH
74685: LD_EXP 92
74689: AND
74690: IFFALSE 74702
74692: GO 74694
74694: DISABLE
// YouLost (  ) ;
74695: LD_STRING 
74697: PPUSH
74698: CALL_OW 104
74702: END
// every 0 0$1 trigger StreamModeActive and sFog do
74703: LD_EXP 70
74707: PUSH
74708: LD_EXP 91
74712: AND
74713: IFFALSE 74727
74715: GO 74717
74717: DISABLE
// FogOff ( your_side ) ;
74718: LD_OWVAR 2
74722: PPUSH
74723: CALL_OW 344
74727: END
// every 0 0$1 trigger StreamModeActive and sSun do
74728: LD_EXP 70
74732: PUSH
74733: LD_EXP 93
74737: AND
74738: IFFALSE 74766
74740: GO 74742
74742: DISABLE
// begin solar_recharge_percent := 0 ;
74743: LD_ADDR_OWVAR 79
74747: PUSH
74748: LD_INT 0
74750: ST_TO_ADDR
// wait ( 5 5$00 ) ;
74751: LD_INT 10500
74753: PPUSH
74754: CALL_OW 67
// solar_recharge_percent := 100 ;
74758: LD_ADDR_OWVAR 79
74762: PUSH
74763: LD_INT 100
74765: ST_TO_ADDR
// end ;
74766: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
74767: LD_EXP 70
74771: PUSH
74772: LD_EXP 94
74776: AND
74777: IFFALSE 75016
74779: GO 74781
74781: DISABLE
74782: LD_INT 0
74784: PPUSH
74785: PPUSH
74786: PPUSH
// begin tmp := [ ] ;
74787: LD_ADDR_VAR 0 3
74791: PUSH
74792: EMPTY
74793: ST_TO_ADDR
// for i := 1 to 6 do
74794: LD_ADDR_VAR 0 1
74798: PUSH
74799: DOUBLE
74800: LD_INT 1
74802: DEC
74803: ST_TO_ADDR
74804: LD_INT 6
74806: PUSH
74807: FOR_TO
74808: IFFALSE 74913
// begin uc_nation := nation_nature ;
74810: LD_ADDR_OWVAR 21
74814: PUSH
74815: LD_INT 0
74817: ST_TO_ADDR
// uc_side := 0 ;
74818: LD_ADDR_OWVAR 20
74822: PUSH
74823: LD_INT 0
74825: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74826: LD_ADDR_OWVAR 29
74830: PUSH
74831: LD_INT 12
74833: PUSH
74834: LD_INT 12
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: ST_TO_ADDR
// hc_agressivity := 20 ;
74841: LD_ADDR_OWVAR 35
74845: PUSH
74846: LD_INT 20
74848: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
74849: LD_ADDR_OWVAR 28
74853: PUSH
74854: LD_INT 17
74856: ST_TO_ADDR
// hc_gallery :=  ;
74857: LD_ADDR_OWVAR 33
74861: PUSH
74862: LD_STRING 
74864: ST_TO_ADDR
// hc_name :=  ;
74865: LD_ADDR_OWVAR 26
74869: PUSH
74870: LD_STRING 
74872: ST_TO_ADDR
// un := CreateHuman ;
74873: LD_ADDR_VAR 0 2
74877: PUSH
74878: CALL_OW 44
74882: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
74883: LD_VAR 0 2
74887: PPUSH
74888: LD_INT 1
74890: PPUSH
74891: CALL_OW 51
// tmp := tmp ^ un ;
74895: LD_ADDR_VAR 0 3
74899: PUSH
74900: LD_VAR 0 3
74904: PUSH
74905: LD_VAR 0 2
74909: ADD
74910: ST_TO_ADDR
// end ;
74911: GO 74807
74913: POP
74914: POP
// repeat wait ( 0 0$1 ) ;
74915: LD_INT 35
74917: PPUSH
74918: CALL_OW 67
// for un in tmp do
74922: LD_ADDR_VAR 0 2
74926: PUSH
74927: LD_VAR 0 3
74931: PUSH
74932: FOR_IN
74933: IFFALSE 75007
// begin if IsDead ( un ) then
74935: LD_VAR 0 2
74939: PPUSH
74940: CALL_OW 301
74944: IFFALSE 74964
// begin tmp := tmp diff un ;
74946: LD_ADDR_VAR 0 3
74950: PUSH
74951: LD_VAR 0 3
74955: PUSH
74956: LD_VAR 0 2
74960: DIFF
74961: ST_TO_ADDR
// continue ;
74962: GO 74932
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
74964: LD_VAR 0 2
74968: PPUSH
74969: LD_INT 3
74971: PUSH
74972: LD_INT 22
74974: PUSH
74975: LD_INT 0
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: PPUSH
74986: CALL_OW 69
74990: PPUSH
74991: LD_VAR 0 2
74995: PPUSH
74996: CALL_OW 74
75000: PPUSH
75001: CALL_OW 115
// end ;
75005: GO 74932
75007: POP
75008: POP
// until not tmp ;
75009: LD_VAR 0 3
75013: NOT
75014: IFFALSE 74915
// end ;
75016: PPOPN 3
75018: END
// every 0 0$1 trigger StreamModeActive and sTroll do
75019: LD_EXP 70
75023: PUSH
75024: LD_EXP 95
75028: AND
75029: IFFALSE 75083
75031: GO 75033
75033: DISABLE
// begin ToLua ( displayTroll(); ) ;
75034: LD_STRING displayTroll();
75036: PPUSH
75037: CALL_OW 559
// wait ( 3 3$00 ) ;
75041: LD_INT 6300
75043: PPUSH
75044: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75048: LD_STRING hideTroll();
75050: PPUSH
75051: CALL_OW 559
// wait ( 1 1$00 ) ;
75055: LD_INT 2100
75057: PPUSH
75058: CALL_OW 67
// ToLua ( displayTroll(); ) ;
75062: LD_STRING displayTroll();
75064: PPUSH
75065: CALL_OW 559
// wait ( 1 1$00 ) ;
75069: LD_INT 2100
75071: PPUSH
75072: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75076: LD_STRING hideTroll();
75078: PPUSH
75079: CALL_OW 559
// end ;
75083: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
75084: LD_EXP 70
75088: PUSH
75089: LD_EXP 96
75093: AND
75094: IFFALSE 75157
75096: GO 75098
75098: DISABLE
75099: LD_INT 0
75101: PPUSH
// begin p := 0 ;
75102: LD_ADDR_VAR 0 1
75106: PUSH
75107: LD_INT 0
75109: ST_TO_ADDR
// repeat game_speed := 1 ;
75110: LD_ADDR_OWVAR 65
75114: PUSH
75115: LD_INT 1
75117: ST_TO_ADDR
// wait ( 0 0$1 ) ;
75118: LD_INT 35
75120: PPUSH
75121: CALL_OW 67
// p := p + 1 ;
75125: LD_ADDR_VAR 0 1
75129: PUSH
75130: LD_VAR 0 1
75134: PUSH
75135: LD_INT 1
75137: PLUS
75138: ST_TO_ADDR
// until p >= 60 ;
75139: LD_VAR 0 1
75143: PUSH
75144: LD_INT 60
75146: GREATEREQUAL
75147: IFFALSE 75110
// game_speed := 4 ;
75149: LD_ADDR_OWVAR 65
75153: PUSH
75154: LD_INT 4
75156: ST_TO_ADDR
// end ;
75157: PPOPN 1
75159: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75160: LD_EXP 70
75164: PUSH
75165: LD_EXP 97
75169: AND
75170: IFFALSE 75316
75172: GO 75174
75174: DISABLE
75175: LD_INT 0
75177: PPUSH
75178: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75179: LD_ADDR_VAR 0 1
75183: PUSH
75184: LD_INT 22
75186: PUSH
75187: LD_OWVAR 2
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: LD_INT 2
75198: PUSH
75199: LD_INT 30
75201: PUSH
75202: LD_INT 0
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: PUSH
75209: LD_INT 30
75211: PUSH
75212: LD_INT 1
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: LIST
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: PPUSH
75228: CALL_OW 69
75232: ST_TO_ADDR
// if not depot then
75233: LD_VAR 0 1
75237: NOT
75238: IFFALSE 75242
// exit ;
75240: GO 75316
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75242: LD_ADDR_VAR 0 2
75246: PUSH
75247: LD_VAR 0 1
75251: PUSH
75252: LD_INT 1
75254: PPUSH
75255: LD_VAR 0 1
75259: PPUSH
75260: CALL_OW 12
75264: ARRAY
75265: PPUSH
75266: CALL_OW 274
75270: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75271: LD_VAR 0 2
75275: PPUSH
75276: LD_INT 1
75278: PPUSH
75279: LD_INT 0
75281: PPUSH
75282: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75286: LD_VAR 0 2
75290: PPUSH
75291: LD_INT 2
75293: PPUSH
75294: LD_INT 0
75296: PPUSH
75297: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75301: LD_VAR 0 2
75305: PPUSH
75306: LD_INT 3
75308: PPUSH
75309: LD_INT 0
75311: PPUSH
75312: CALL_OW 277
// end ;
75316: PPOPN 2
75318: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75319: LD_EXP 70
75323: PUSH
75324: LD_EXP 98
75328: AND
75329: IFFALSE 75426
75331: GO 75333
75333: DISABLE
75334: LD_INT 0
75336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75337: LD_ADDR_VAR 0 1
75341: PUSH
75342: LD_INT 22
75344: PUSH
75345: LD_OWVAR 2
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: LD_INT 21
75356: PUSH
75357: LD_INT 1
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 3
75366: PUSH
75367: LD_INT 23
75369: PUSH
75370: LD_INT 0
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: LIST
75385: PPUSH
75386: CALL_OW 69
75390: ST_TO_ADDR
// if not tmp then
75391: LD_VAR 0 1
75395: NOT
75396: IFFALSE 75400
// exit ;
75398: GO 75426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75400: LD_VAR 0 1
75404: PUSH
75405: LD_INT 1
75407: PPUSH
75408: LD_VAR 0 1
75412: PPUSH
75413: CALL_OW 12
75417: ARRAY
75418: PPUSH
75419: LD_INT 200
75421: PPUSH
75422: CALL_OW 234
// end ;
75426: PPOPN 1
75428: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75429: LD_EXP 70
75433: PUSH
75434: LD_EXP 99
75438: AND
75439: IFFALSE 75518
75441: GO 75443
75443: DISABLE
75444: LD_INT 0
75446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75447: LD_ADDR_VAR 0 1
75451: PUSH
75452: LD_INT 22
75454: PUSH
75455: LD_OWVAR 2
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: PUSH
75464: LD_INT 21
75466: PUSH
75467: LD_INT 2
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: PPUSH
75478: CALL_OW 69
75482: ST_TO_ADDR
// if not tmp then
75483: LD_VAR 0 1
75487: NOT
75488: IFFALSE 75492
// exit ;
75490: GO 75518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75492: LD_VAR 0 1
75496: PUSH
75497: LD_INT 1
75499: PPUSH
75500: LD_VAR 0 1
75504: PPUSH
75505: CALL_OW 12
75509: ARRAY
75510: PPUSH
75511: LD_INT 60
75513: PPUSH
75514: CALL_OW 234
// end ;
75518: PPOPN 1
75520: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75521: LD_EXP 70
75525: PUSH
75526: LD_EXP 100
75530: AND
75531: IFFALSE 75630
75533: GO 75535
75535: DISABLE
75536: LD_INT 0
75538: PPUSH
75539: PPUSH
// begin enable ;
75540: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75541: LD_ADDR_VAR 0 1
75545: PUSH
75546: LD_INT 22
75548: PUSH
75549: LD_OWVAR 2
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PUSH
75558: LD_INT 61
75560: PUSH
75561: EMPTY
75562: LIST
75563: PUSH
75564: LD_INT 33
75566: PUSH
75567: LD_INT 2
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: LIST
75578: PPUSH
75579: CALL_OW 69
75583: ST_TO_ADDR
// if not tmp then
75584: LD_VAR 0 1
75588: NOT
75589: IFFALSE 75593
// exit ;
75591: GO 75630
// for i in tmp do
75593: LD_ADDR_VAR 0 2
75597: PUSH
75598: LD_VAR 0 1
75602: PUSH
75603: FOR_IN
75604: IFFALSE 75628
// if IsControledBy ( i ) then
75606: LD_VAR 0 2
75610: PPUSH
75611: CALL_OW 312
75615: IFFALSE 75626
// ComUnlink ( i ) ;
75617: LD_VAR 0 2
75621: PPUSH
75622: CALL_OW 136
75626: GO 75603
75628: POP
75629: POP
// end ;
75630: PPOPN 2
75632: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
75633: LD_EXP 70
75637: PUSH
75638: LD_EXP 101
75642: AND
75643: IFFALSE 75783
75645: GO 75647
75647: DISABLE
75648: LD_INT 0
75650: PPUSH
75651: PPUSH
// begin ToLua ( displayPowell(); ) ;
75652: LD_STRING displayPowell();
75654: PPUSH
75655: CALL_OW 559
// uc_side := 0 ;
75659: LD_ADDR_OWVAR 20
75663: PUSH
75664: LD_INT 0
75666: ST_TO_ADDR
// uc_nation := 2 ;
75667: LD_ADDR_OWVAR 21
75671: PUSH
75672: LD_INT 2
75674: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
75675: LD_ADDR_OWVAR 37
75679: PUSH
75680: LD_INT 14
75682: ST_TO_ADDR
// vc_engine := engine_siberite ;
75683: LD_ADDR_OWVAR 39
75687: PUSH
75688: LD_INT 3
75690: ST_TO_ADDR
// vc_control := control_apeman ;
75691: LD_ADDR_OWVAR 38
75695: PUSH
75696: LD_INT 5
75698: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
75699: LD_ADDR_OWVAR 40
75703: PUSH
75704: LD_INT 29
75706: ST_TO_ADDR
// un := CreateVehicle ;
75707: LD_ADDR_VAR 0 2
75711: PUSH
75712: CALL_OW 45
75716: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75717: LD_VAR 0 2
75721: PPUSH
75722: LD_INT 1
75724: PPUSH
75725: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75729: LD_INT 35
75731: PPUSH
75732: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75736: LD_VAR 0 2
75740: PPUSH
75741: LD_INT 22
75743: PUSH
75744: LD_OWVAR 2
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: PPUSH
75753: CALL_OW 69
75757: PPUSH
75758: LD_VAR 0 2
75762: PPUSH
75763: CALL_OW 74
75767: PPUSH
75768: CALL_OW 115
// until IsDead ( un ) ;
75772: LD_VAR 0 2
75776: PPUSH
75777: CALL_OW 301
75781: IFFALSE 75729
// end ;
75783: PPOPN 2
75785: END
// every 0 0$1 trigger StreamModeActive and sStu do
75786: LD_EXP 70
75790: PUSH
75791: LD_EXP 109
75795: AND
75796: IFFALSE 75812
75798: GO 75800
75800: DISABLE
// begin ToLua ( displayStucuk(); ) ;
75801: LD_STRING displayStucuk();
75803: PPUSH
75804: CALL_OW 559
// ResetFog ;
75808: CALL_OW 335
// end ;
75812: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
75813: LD_EXP 70
75817: PUSH
75818: LD_EXP 102
75822: AND
75823: IFFALSE 75964
75825: GO 75827
75827: DISABLE
75828: LD_INT 0
75830: PPUSH
75831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75832: LD_ADDR_VAR 0 2
75836: PUSH
75837: LD_INT 22
75839: PUSH
75840: LD_OWVAR 2
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: PUSH
75849: LD_INT 21
75851: PUSH
75852: LD_INT 1
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PPUSH
75863: CALL_OW 69
75867: ST_TO_ADDR
// if not tmp then
75868: LD_VAR 0 2
75872: NOT
75873: IFFALSE 75877
// exit ;
75875: GO 75964
// un := tmp [ rand ( 1 , tmp ) ] ;
75877: LD_ADDR_VAR 0 1
75881: PUSH
75882: LD_VAR 0 2
75886: PUSH
75887: LD_INT 1
75889: PPUSH
75890: LD_VAR 0 2
75894: PPUSH
75895: CALL_OW 12
75899: ARRAY
75900: ST_TO_ADDR
// SetSide ( un , 0 ) ;
75901: LD_VAR 0 1
75905: PPUSH
75906: LD_INT 0
75908: PPUSH
75909: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
75913: LD_VAR 0 1
75917: PPUSH
75918: LD_OWVAR 3
75922: PUSH
75923: LD_VAR 0 1
75927: DIFF
75928: PPUSH
75929: LD_VAR 0 1
75933: PPUSH
75934: CALL_OW 74
75938: PPUSH
75939: CALL_OW 115
// wait ( 0 0$20 ) ;
75943: LD_INT 700
75945: PPUSH
75946: CALL_OW 67
// SetSide ( un , your_side ) ;
75950: LD_VAR 0 1
75954: PPUSH
75955: LD_OWVAR 2
75959: PPUSH
75960: CALL_OW 235
// end ;
75964: PPOPN 2
75966: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
75967: LD_EXP 70
75971: PUSH
75972: LD_EXP 103
75976: AND
75977: IFFALSE 76083
75979: GO 75981
75981: DISABLE
75982: LD_INT 0
75984: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75985: LD_ADDR_VAR 0 1
75989: PUSH
75990: LD_INT 22
75992: PUSH
75993: LD_OWVAR 2
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: PUSH
76002: LD_INT 2
76004: PUSH
76005: LD_INT 30
76007: PUSH
76008: LD_INT 0
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: PUSH
76015: LD_INT 30
76017: PUSH
76018: LD_INT 1
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: PUSH
76025: EMPTY
76026: LIST
76027: LIST
76028: LIST
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PPUSH
76034: CALL_OW 69
76038: ST_TO_ADDR
// if not depot then
76039: LD_VAR 0 1
76043: NOT
76044: IFFALSE 76048
// exit ;
76046: GO 76083
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
76048: LD_VAR 0 1
76052: PUSH
76053: LD_INT 1
76055: ARRAY
76056: PPUSH
76057: CALL_OW 250
76061: PPUSH
76062: LD_VAR 0 1
76066: PUSH
76067: LD_INT 1
76069: ARRAY
76070: PPUSH
76071: CALL_OW 251
76075: PPUSH
76076: LD_INT 70
76078: PPUSH
76079: CALL_OW 495
// end ;
76083: PPOPN 1
76085: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
76086: LD_EXP 70
76090: PUSH
76091: LD_EXP 104
76095: AND
76096: IFFALSE 76307
76098: GO 76100
76100: DISABLE
76101: LD_INT 0
76103: PPUSH
76104: PPUSH
76105: PPUSH
76106: PPUSH
76107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76108: LD_ADDR_VAR 0 5
76112: PUSH
76113: LD_INT 22
76115: PUSH
76116: LD_OWVAR 2
76120: PUSH
76121: EMPTY
76122: LIST
76123: LIST
76124: PUSH
76125: LD_INT 21
76127: PUSH
76128: LD_INT 1
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: PUSH
76135: EMPTY
76136: LIST
76137: LIST
76138: PPUSH
76139: CALL_OW 69
76143: ST_TO_ADDR
// if not tmp then
76144: LD_VAR 0 5
76148: NOT
76149: IFFALSE 76153
// exit ;
76151: GO 76307
// for i in tmp do
76153: LD_ADDR_VAR 0 1
76157: PUSH
76158: LD_VAR 0 5
76162: PUSH
76163: FOR_IN
76164: IFFALSE 76305
// begin d := rand ( 0 , 5 ) ;
76166: LD_ADDR_VAR 0 4
76170: PUSH
76171: LD_INT 0
76173: PPUSH
76174: LD_INT 5
76176: PPUSH
76177: CALL_OW 12
76181: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76182: LD_ADDR_VAR 0 2
76186: PUSH
76187: LD_VAR 0 1
76191: PPUSH
76192: CALL_OW 250
76196: PPUSH
76197: LD_VAR 0 4
76201: PPUSH
76202: LD_INT 3
76204: PPUSH
76205: LD_INT 12
76207: PPUSH
76208: CALL_OW 12
76212: PPUSH
76213: CALL_OW 272
76217: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76218: LD_ADDR_VAR 0 3
76222: PUSH
76223: LD_VAR 0 1
76227: PPUSH
76228: CALL_OW 251
76232: PPUSH
76233: LD_VAR 0 4
76237: PPUSH
76238: LD_INT 3
76240: PPUSH
76241: LD_INT 12
76243: PPUSH
76244: CALL_OW 12
76248: PPUSH
76249: CALL_OW 273
76253: ST_TO_ADDR
// if ValidHex ( x , y ) then
76254: LD_VAR 0 2
76258: PPUSH
76259: LD_VAR 0 3
76263: PPUSH
76264: CALL_OW 488
76268: IFFALSE 76303
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76270: LD_VAR 0 1
76274: PPUSH
76275: LD_VAR 0 2
76279: PPUSH
76280: LD_VAR 0 3
76284: PPUSH
76285: LD_INT 3
76287: PPUSH
76288: LD_INT 6
76290: PPUSH
76291: CALL_OW 12
76295: PPUSH
76296: LD_INT 1
76298: PPUSH
76299: CALL_OW 483
// end ;
76303: GO 76163
76305: POP
76306: POP
// end ;
76307: PPOPN 5
76309: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76310: LD_EXP 70
76314: PUSH
76315: LD_EXP 105
76319: AND
76320: IFFALSE 76414
76322: GO 76324
76324: DISABLE
76325: LD_INT 0
76327: PPUSH
76328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76329: LD_ADDR_VAR 0 2
76333: PUSH
76334: LD_INT 22
76336: PUSH
76337: LD_OWVAR 2
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: LD_INT 32
76348: PUSH
76349: LD_INT 1
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: PUSH
76356: LD_INT 21
76358: PUSH
76359: LD_INT 2
76361: PUSH
76362: EMPTY
76363: LIST
76364: LIST
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: LIST
76370: PPUSH
76371: CALL_OW 69
76375: ST_TO_ADDR
// if not tmp then
76376: LD_VAR 0 2
76380: NOT
76381: IFFALSE 76385
// exit ;
76383: GO 76414
// for i in tmp do
76385: LD_ADDR_VAR 0 1
76389: PUSH
76390: LD_VAR 0 2
76394: PUSH
76395: FOR_IN
76396: IFFALSE 76412
// SetFuel ( i , 0 ) ;
76398: LD_VAR 0 1
76402: PPUSH
76403: LD_INT 0
76405: PPUSH
76406: CALL_OW 240
76410: GO 76395
76412: POP
76413: POP
// end ;
76414: PPOPN 2
76416: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76417: LD_EXP 70
76421: PUSH
76422: LD_EXP 106
76426: AND
76427: IFFALSE 76493
76429: GO 76431
76431: DISABLE
76432: LD_INT 0
76434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76435: LD_ADDR_VAR 0 1
76439: PUSH
76440: LD_INT 22
76442: PUSH
76443: LD_OWVAR 2
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: PUSH
76452: LD_INT 30
76454: PUSH
76455: LD_INT 29
76457: PUSH
76458: EMPTY
76459: LIST
76460: LIST
76461: PUSH
76462: EMPTY
76463: LIST
76464: LIST
76465: PPUSH
76466: CALL_OW 69
76470: ST_TO_ADDR
// if not tmp then
76471: LD_VAR 0 1
76475: NOT
76476: IFFALSE 76480
// exit ;
76478: GO 76493
// DestroyUnit ( tmp [ 1 ] ) ;
76480: LD_VAR 0 1
76484: PUSH
76485: LD_INT 1
76487: ARRAY
76488: PPUSH
76489: CALL_OW 65
// end ;
76493: PPOPN 1
76495: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76496: LD_EXP 70
76500: PUSH
76501: LD_EXP 108
76505: AND
76506: IFFALSE 76635
76508: GO 76510
76510: DISABLE
76511: LD_INT 0
76513: PPUSH
// begin uc_side := 0 ;
76514: LD_ADDR_OWVAR 20
76518: PUSH
76519: LD_INT 0
76521: ST_TO_ADDR
// uc_nation := nation_arabian ;
76522: LD_ADDR_OWVAR 21
76526: PUSH
76527: LD_INT 2
76529: ST_TO_ADDR
// hc_gallery :=  ;
76530: LD_ADDR_OWVAR 33
76534: PUSH
76535: LD_STRING 
76537: ST_TO_ADDR
// hc_name :=  ;
76538: LD_ADDR_OWVAR 26
76542: PUSH
76543: LD_STRING 
76545: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76546: LD_INT 1
76548: PPUSH
76549: LD_INT 11
76551: PPUSH
76552: LD_INT 10
76554: PPUSH
76555: CALL_OW 380
// un := CreateHuman ;
76559: LD_ADDR_VAR 0 1
76563: PUSH
76564: CALL_OW 44
76568: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76569: LD_VAR 0 1
76573: PPUSH
76574: LD_INT 1
76576: PPUSH
76577: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76581: LD_INT 35
76583: PPUSH
76584: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76588: LD_VAR 0 1
76592: PPUSH
76593: LD_INT 22
76595: PUSH
76596: LD_OWVAR 2
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PPUSH
76605: CALL_OW 69
76609: PPUSH
76610: LD_VAR 0 1
76614: PPUSH
76615: CALL_OW 74
76619: PPUSH
76620: CALL_OW 115
// until IsDead ( un ) ;
76624: LD_VAR 0 1
76628: PPUSH
76629: CALL_OW 301
76633: IFFALSE 76581
// end ;
76635: PPOPN 1
76637: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
76638: LD_EXP 70
76642: PUSH
76643: LD_EXP 110
76647: AND
76648: IFFALSE 76660
76650: GO 76652
76652: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
76653: LD_STRING earthquake(getX(game), 0, 32)
76655: PPUSH
76656: CALL_OW 559
76660: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
76661: LD_EXP 70
76665: PUSH
76666: LD_EXP 111
76670: AND
76671: IFFALSE 76762
76673: GO 76675
76675: DISABLE
76676: LD_INT 0
76678: PPUSH
// begin enable ;
76679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
76680: LD_ADDR_VAR 0 1
76684: PUSH
76685: LD_INT 22
76687: PUSH
76688: LD_OWVAR 2
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: PUSH
76697: LD_INT 21
76699: PUSH
76700: LD_INT 2
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PUSH
76707: LD_INT 33
76709: PUSH
76710: LD_INT 3
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: LIST
76721: PPUSH
76722: CALL_OW 69
76726: ST_TO_ADDR
// if not tmp then
76727: LD_VAR 0 1
76731: NOT
76732: IFFALSE 76736
// exit ;
76734: GO 76762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76736: LD_VAR 0 1
76740: PUSH
76741: LD_INT 1
76743: PPUSH
76744: LD_VAR 0 1
76748: PPUSH
76749: CALL_OW 12
76753: ARRAY
76754: PPUSH
76755: LD_INT 1
76757: PPUSH
76758: CALL_OW 234
// end ;
76762: PPOPN 1
76764: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
76765: LD_EXP 70
76769: PUSH
76770: LD_EXP 112
76774: AND
76775: IFFALSE 76916
76777: GO 76779
76779: DISABLE
76780: LD_INT 0
76782: PPUSH
76783: PPUSH
76784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76785: LD_ADDR_VAR 0 3
76789: PUSH
76790: LD_INT 22
76792: PUSH
76793: LD_OWVAR 2
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: PUSH
76802: LD_INT 25
76804: PUSH
76805: LD_INT 1
76807: PUSH
76808: EMPTY
76809: LIST
76810: LIST
76811: PUSH
76812: EMPTY
76813: LIST
76814: LIST
76815: PPUSH
76816: CALL_OW 69
76820: ST_TO_ADDR
// if not tmp then
76821: LD_VAR 0 3
76825: NOT
76826: IFFALSE 76830
// exit ;
76828: GO 76916
// un := tmp [ rand ( 1 , tmp ) ] ;
76830: LD_ADDR_VAR 0 2
76834: PUSH
76835: LD_VAR 0 3
76839: PUSH
76840: LD_INT 1
76842: PPUSH
76843: LD_VAR 0 3
76847: PPUSH
76848: CALL_OW 12
76852: ARRAY
76853: ST_TO_ADDR
// if Crawls ( un ) then
76854: LD_VAR 0 2
76858: PPUSH
76859: CALL_OW 318
76863: IFFALSE 76874
// ComWalk ( un ) ;
76865: LD_VAR 0 2
76869: PPUSH
76870: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
76874: LD_VAR 0 2
76878: PPUSH
76879: LD_INT 9
76881: PPUSH
76882: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
76886: LD_INT 28
76888: PPUSH
76889: LD_OWVAR 2
76893: PPUSH
76894: LD_INT 2
76896: PPUSH
76897: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
76901: LD_INT 29
76903: PPUSH
76904: LD_OWVAR 2
76908: PPUSH
76909: LD_INT 2
76911: PPUSH
76912: CALL_OW 322
// end ;
76916: PPOPN 3
76918: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
76919: LD_EXP 70
76923: PUSH
76924: LD_EXP 113
76928: AND
76929: IFFALSE 77040
76931: GO 76933
76933: DISABLE
76934: LD_INT 0
76936: PPUSH
76937: PPUSH
76938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76939: LD_ADDR_VAR 0 3
76943: PUSH
76944: LD_INT 22
76946: PUSH
76947: LD_OWVAR 2
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: PUSH
76956: LD_INT 25
76958: PUSH
76959: LD_INT 1
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: PUSH
76966: EMPTY
76967: LIST
76968: LIST
76969: PPUSH
76970: CALL_OW 69
76974: ST_TO_ADDR
// if not tmp then
76975: LD_VAR 0 3
76979: NOT
76980: IFFALSE 76984
// exit ;
76982: GO 77040
// un := tmp [ rand ( 1 , tmp ) ] ;
76984: LD_ADDR_VAR 0 2
76988: PUSH
76989: LD_VAR 0 3
76993: PUSH
76994: LD_INT 1
76996: PPUSH
76997: LD_VAR 0 3
77001: PPUSH
77002: CALL_OW 12
77006: ARRAY
77007: ST_TO_ADDR
// if Crawls ( un ) then
77008: LD_VAR 0 2
77012: PPUSH
77013: CALL_OW 318
77017: IFFALSE 77028
// ComWalk ( un ) ;
77019: LD_VAR 0 2
77023: PPUSH
77024: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77028: LD_VAR 0 2
77032: PPUSH
77033: LD_INT 8
77035: PPUSH
77036: CALL_OW 336
// end ;
77040: PPOPN 3
77042: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
77043: LD_EXP 70
77047: PUSH
77048: LD_EXP 114
77052: AND
77053: IFFALSE 77197
77055: GO 77057
77057: DISABLE
77058: LD_INT 0
77060: PPUSH
77061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
77062: LD_ADDR_VAR 0 2
77066: PUSH
77067: LD_INT 22
77069: PUSH
77070: LD_OWVAR 2
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: PUSH
77079: LD_INT 21
77081: PUSH
77082: LD_INT 2
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PUSH
77089: LD_INT 2
77091: PUSH
77092: LD_INT 34
77094: PUSH
77095: LD_INT 12
77097: PUSH
77098: EMPTY
77099: LIST
77100: LIST
77101: PUSH
77102: LD_INT 34
77104: PUSH
77105: LD_INT 51
77107: PUSH
77108: EMPTY
77109: LIST
77110: LIST
77111: PUSH
77112: LD_INT 34
77114: PUSH
77115: LD_INT 32
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: LIST
77126: LIST
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: LIST
77132: PPUSH
77133: CALL_OW 69
77137: ST_TO_ADDR
// if not tmp then
77138: LD_VAR 0 2
77142: NOT
77143: IFFALSE 77147
// exit ;
77145: GO 77197
// for i in tmp do
77147: LD_ADDR_VAR 0 1
77151: PUSH
77152: LD_VAR 0 2
77156: PUSH
77157: FOR_IN
77158: IFFALSE 77195
// if GetCargo ( i , mat_artifact ) = 0 then
77160: LD_VAR 0 1
77164: PPUSH
77165: LD_INT 4
77167: PPUSH
77168: CALL_OW 289
77172: PUSH
77173: LD_INT 0
77175: EQUAL
77176: IFFALSE 77193
// SetCargo ( i , mat_siberit , 100 ) ;
77178: LD_VAR 0 1
77182: PPUSH
77183: LD_INT 3
77185: PPUSH
77186: LD_INT 100
77188: PPUSH
77189: CALL_OW 290
77193: GO 77157
77195: POP
77196: POP
// end ;
77197: PPOPN 2
77199: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77200: LD_EXP 70
77204: PUSH
77205: LD_EXP 115
77209: AND
77210: IFFALSE 77393
77212: GO 77214
77214: DISABLE
77215: LD_INT 0
77217: PPUSH
77218: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77219: LD_ADDR_VAR 0 2
77223: PUSH
77224: LD_INT 22
77226: PUSH
77227: LD_OWVAR 2
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: PPUSH
77236: CALL_OW 69
77240: ST_TO_ADDR
// if not tmp then
77241: LD_VAR 0 2
77245: NOT
77246: IFFALSE 77250
// exit ;
77248: GO 77393
// for i := 1 to 2 do
77250: LD_ADDR_VAR 0 1
77254: PUSH
77255: DOUBLE
77256: LD_INT 1
77258: DEC
77259: ST_TO_ADDR
77260: LD_INT 2
77262: PUSH
77263: FOR_TO
77264: IFFALSE 77391
// begin uc_side := your_side ;
77266: LD_ADDR_OWVAR 20
77270: PUSH
77271: LD_OWVAR 2
77275: ST_TO_ADDR
// uc_nation := nation_american ;
77276: LD_ADDR_OWVAR 21
77280: PUSH
77281: LD_INT 1
77283: ST_TO_ADDR
// vc_chassis := us_morphling ;
77284: LD_ADDR_OWVAR 37
77288: PUSH
77289: LD_INT 5
77291: ST_TO_ADDR
// vc_engine := engine_siberite ;
77292: LD_ADDR_OWVAR 39
77296: PUSH
77297: LD_INT 3
77299: ST_TO_ADDR
// vc_control := control_computer ;
77300: LD_ADDR_OWVAR 38
77304: PUSH
77305: LD_INT 3
77307: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77308: LD_ADDR_OWVAR 40
77312: PUSH
77313: LD_INT 10
77315: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77316: LD_VAR 0 2
77320: PUSH
77321: LD_INT 1
77323: ARRAY
77324: PPUSH
77325: CALL_OW 310
77329: NOT
77330: IFFALSE 77377
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77332: CALL_OW 45
77336: PPUSH
77337: LD_VAR 0 2
77341: PUSH
77342: LD_INT 1
77344: ARRAY
77345: PPUSH
77346: CALL_OW 250
77350: PPUSH
77351: LD_VAR 0 2
77355: PUSH
77356: LD_INT 1
77358: ARRAY
77359: PPUSH
77360: CALL_OW 251
77364: PPUSH
77365: LD_INT 12
77367: PPUSH
77368: LD_INT 1
77370: PPUSH
77371: CALL_OW 50
77375: GO 77389
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77377: CALL_OW 45
77381: PPUSH
77382: LD_INT 1
77384: PPUSH
77385: CALL_OW 51
// end ;
77389: GO 77263
77391: POP
77392: POP
// end ;
77393: PPOPN 2
77395: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77396: LD_EXP 70
77400: PUSH
77401: LD_EXP 116
77405: AND
77406: IFFALSE 77628
77408: GO 77410
77410: DISABLE
77411: LD_INT 0
77413: PPUSH
77414: PPUSH
77415: PPUSH
77416: PPUSH
77417: PPUSH
77418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77419: LD_ADDR_VAR 0 6
77423: PUSH
77424: LD_INT 22
77426: PUSH
77427: LD_OWVAR 2
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: PUSH
77436: LD_INT 21
77438: PUSH
77439: LD_INT 1
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: PUSH
77446: LD_INT 3
77448: PUSH
77449: LD_INT 23
77451: PUSH
77452: LD_INT 0
77454: PUSH
77455: EMPTY
77456: LIST
77457: LIST
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: PUSH
77463: EMPTY
77464: LIST
77465: LIST
77466: LIST
77467: PPUSH
77468: CALL_OW 69
77472: ST_TO_ADDR
// if not tmp then
77473: LD_VAR 0 6
77477: NOT
77478: IFFALSE 77482
// exit ;
77480: GO 77628
// s1 := rand ( 1 , 4 ) ;
77482: LD_ADDR_VAR 0 2
77486: PUSH
77487: LD_INT 1
77489: PPUSH
77490: LD_INT 4
77492: PPUSH
77493: CALL_OW 12
77497: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77498: LD_ADDR_VAR 0 4
77502: PUSH
77503: LD_VAR 0 6
77507: PUSH
77508: LD_INT 1
77510: ARRAY
77511: PPUSH
77512: LD_VAR 0 2
77516: PPUSH
77517: CALL_OW 259
77521: ST_TO_ADDR
// if s1 = 1 then
77522: LD_VAR 0 2
77526: PUSH
77527: LD_INT 1
77529: EQUAL
77530: IFFALSE 77550
// s2 := rand ( 2 , 4 ) else
77532: LD_ADDR_VAR 0 3
77536: PUSH
77537: LD_INT 2
77539: PPUSH
77540: LD_INT 4
77542: PPUSH
77543: CALL_OW 12
77547: ST_TO_ADDR
77548: GO 77558
// s2 := 1 ;
77550: LD_ADDR_VAR 0 3
77554: PUSH
77555: LD_INT 1
77557: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77558: LD_ADDR_VAR 0 5
77562: PUSH
77563: LD_VAR 0 6
77567: PUSH
77568: LD_INT 1
77570: ARRAY
77571: PPUSH
77572: LD_VAR 0 3
77576: PPUSH
77577: CALL_OW 259
77581: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
77582: LD_VAR 0 6
77586: PUSH
77587: LD_INT 1
77589: ARRAY
77590: PPUSH
77591: LD_VAR 0 2
77595: PPUSH
77596: LD_VAR 0 5
77600: PPUSH
77601: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
77605: LD_VAR 0 6
77609: PUSH
77610: LD_INT 1
77612: ARRAY
77613: PPUSH
77614: LD_VAR 0 3
77618: PPUSH
77619: LD_VAR 0 4
77623: PPUSH
77624: CALL_OW 237
// end ;
77628: PPOPN 6
77630: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
77631: LD_EXP 70
77635: PUSH
77636: LD_EXP 117
77640: AND
77641: IFFALSE 77720
77643: GO 77645
77645: DISABLE
77646: LD_INT 0
77648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
77649: LD_ADDR_VAR 0 1
77653: PUSH
77654: LD_INT 22
77656: PUSH
77657: LD_OWVAR 2
77661: PUSH
77662: EMPTY
77663: LIST
77664: LIST
77665: PUSH
77666: LD_INT 30
77668: PUSH
77669: LD_INT 3
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PPUSH
77680: CALL_OW 69
77684: ST_TO_ADDR
// if not tmp then
77685: LD_VAR 0 1
77689: NOT
77690: IFFALSE 77694
// exit ;
77692: GO 77720
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77694: LD_VAR 0 1
77698: PUSH
77699: LD_INT 1
77701: PPUSH
77702: LD_VAR 0 1
77706: PPUSH
77707: CALL_OW 12
77711: ARRAY
77712: PPUSH
77713: LD_INT 1
77715: PPUSH
77716: CALL_OW 234
// end ;
77720: PPOPN 1
77722: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
77723: LD_EXP 70
77727: PUSH
77728: LD_EXP 118
77732: AND
77733: IFFALSE 77845
77735: GO 77737
77737: DISABLE
77738: LD_INT 0
77740: PPUSH
77741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
77742: LD_ADDR_VAR 0 2
77746: PUSH
77747: LD_INT 22
77749: PUSH
77750: LD_OWVAR 2
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: PUSH
77759: LD_INT 2
77761: PUSH
77762: LD_INT 30
77764: PUSH
77765: LD_INT 27
77767: PUSH
77768: EMPTY
77769: LIST
77770: LIST
77771: PUSH
77772: LD_INT 30
77774: PUSH
77775: LD_INT 26
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: PUSH
77782: LD_INT 30
77784: PUSH
77785: LD_INT 28
77787: PUSH
77788: EMPTY
77789: LIST
77790: LIST
77791: PUSH
77792: EMPTY
77793: LIST
77794: LIST
77795: LIST
77796: LIST
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: PPUSH
77802: CALL_OW 69
77806: ST_TO_ADDR
// if not tmp then
77807: LD_VAR 0 2
77811: NOT
77812: IFFALSE 77816
// exit ;
77814: GO 77845
// for i in tmp do
77816: LD_ADDR_VAR 0 1
77820: PUSH
77821: LD_VAR 0 2
77825: PUSH
77826: FOR_IN
77827: IFFALSE 77843
// SetLives ( i , 1 ) ;
77829: LD_VAR 0 1
77833: PPUSH
77834: LD_INT 1
77836: PPUSH
77837: CALL_OW 234
77841: GO 77826
77843: POP
77844: POP
// end ;
77845: PPOPN 2
77847: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
77848: LD_EXP 70
77852: PUSH
77853: LD_EXP 119
77857: AND
77858: IFFALSE 78145
77860: GO 77862
77862: DISABLE
77863: LD_INT 0
77865: PPUSH
77866: PPUSH
77867: PPUSH
// begin i := rand ( 1 , 7 ) ;
77868: LD_ADDR_VAR 0 1
77872: PUSH
77873: LD_INT 1
77875: PPUSH
77876: LD_INT 7
77878: PPUSH
77879: CALL_OW 12
77883: ST_TO_ADDR
// case i of 1 :
77884: LD_VAR 0 1
77888: PUSH
77889: LD_INT 1
77891: DOUBLE
77892: EQUAL
77893: IFTRUE 77897
77895: GO 77907
77897: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
77898: LD_STRING earthquake(getX(game), 0, 32)
77900: PPUSH
77901: CALL_OW 559
77905: GO 78145
77907: LD_INT 2
77909: DOUBLE
77910: EQUAL
77911: IFTRUE 77915
77913: GO 77929
77915: POP
// begin ToLua ( displayStucuk(); ) ;
77916: LD_STRING displayStucuk();
77918: PPUSH
77919: CALL_OW 559
// ResetFog ;
77923: CALL_OW 335
// end ; 3 :
77927: GO 78145
77929: LD_INT 3
77931: DOUBLE
77932: EQUAL
77933: IFTRUE 77937
77935: GO 78041
77937: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77938: LD_ADDR_VAR 0 2
77942: PUSH
77943: LD_INT 22
77945: PUSH
77946: LD_OWVAR 2
77950: PUSH
77951: EMPTY
77952: LIST
77953: LIST
77954: PUSH
77955: LD_INT 25
77957: PUSH
77958: LD_INT 1
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PPUSH
77969: CALL_OW 69
77973: ST_TO_ADDR
// if not tmp then
77974: LD_VAR 0 2
77978: NOT
77979: IFFALSE 77983
// exit ;
77981: GO 78145
// un := tmp [ rand ( 1 , tmp ) ] ;
77983: LD_ADDR_VAR 0 3
77987: PUSH
77988: LD_VAR 0 2
77992: PUSH
77993: LD_INT 1
77995: PPUSH
77996: LD_VAR 0 2
78000: PPUSH
78001: CALL_OW 12
78005: ARRAY
78006: ST_TO_ADDR
// if Crawls ( un ) then
78007: LD_VAR 0 3
78011: PPUSH
78012: CALL_OW 318
78016: IFFALSE 78027
// ComWalk ( un ) ;
78018: LD_VAR 0 3
78022: PPUSH
78023: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78027: LD_VAR 0 3
78031: PPUSH
78032: LD_INT 8
78034: PPUSH
78035: CALL_OW 336
// end ; 4 :
78039: GO 78145
78041: LD_INT 4
78043: DOUBLE
78044: EQUAL
78045: IFTRUE 78049
78047: GO 78123
78049: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78050: LD_ADDR_VAR 0 2
78054: PUSH
78055: LD_INT 22
78057: PUSH
78058: LD_OWVAR 2
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: PUSH
78067: LD_INT 30
78069: PUSH
78070: LD_INT 29
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: PUSH
78077: EMPTY
78078: LIST
78079: LIST
78080: PPUSH
78081: CALL_OW 69
78085: ST_TO_ADDR
// if not tmp then
78086: LD_VAR 0 2
78090: NOT
78091: IFFALSE 78095
// exit ;
78093: GO 78145
// CenterNowOnUnits ( tmp [ 1 ] ) ;
78095: LD_VAR 0 2
78099: PUSH
78100: LD_INT 1
78102: ARRAY
78103: PPUSH
78104: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
78108: LD_VAR 0 2
78112: PUSH
78113: LD_INT 1
78115: ARRAY
78116: PPUSH
78117: CALL_OW 65
// end ; 5 .. 7 :
78121: GO 78145
78123: LD_INT 5
78125: DOUBLE
78126: GREATEREQUAL
78127: IFFALSE 78135
78129: LD_INT 7
78131: DOUBLE
78132: LESSEQUAL
78133: IFTRUE 78137
78135: GO 78144
78137: POP
// StreamSibBomb ; end ;
78138: CALL 74382 0 0
78142: GO 78145
78144: POP
// end ;
78145: PPOPN 3
78147: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78148: LD_EXP 70
78152: PUSH
78153: LD_EXP 120
78157: AND
78158: IFFALSE 78314
78160: GO 78162
78162: DISABLE
78163: LD_INT 0
78165: PPUSH
78166: PPUSH
78167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78168: LD_ADDR_VAR 0 2
78172: PUSH
78173: LD_INT 81
78175: PUSH
78176: LD_OWVAR 2
78180: PUSH
78181: EMPTY
78182: LIST
78183: LIST
78184: PUSH
78185: LD_INT 2
78187: PUSH
78188: LD_INT 21
78190: PUSH
78191: LD_INT 1
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: PUSH
78198: LD_INT 21
78200: PUSH
78201: LD_INT 2
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: PUSH
78208: EMPTY
78209: LIST
78210: LIST
78211: LIST
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: PPUSH
78217: CALL_OW 69
78221: ST_TO_ADDR
// if not tmp then
78222: LD_VAR 0 2
78226: NOT
78227: IFFALSE 78231
// exit ;
78229: GO 78314
// p := 0 ;
78231: LD_ADDR_VAR 0 3
78235: PUSH
78236: LD_INT 0
78238: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78239: LD_INT 35
78241: PPUSH
78242: CALL_OW 67
// p := p + 1 ;
78246: LD_ADDR_VAR 0 3
78250: PUSH
78251: LD_VAR 0 3
78255: PUSH
78256: LD_INT 1
78258: PLUS
78259: ST_TO_ADDR
// for i in tmp do
78260: LD_ADDR_VAR 0 1
78264: PUSH
78265: LD_VAR 0 2
78269: PUSH
78270: FOR_IN
78271: IFFALSE 78302
// if GetLives ( i ) < 1000 then
78273: LD_VAR 0 1
78277: PPUSH
78278: CALL_OW 256
78282: PUSH
78283: LD_INT 1000
78285: LESS
78286: IFFALSE 78300
// SetLives ( i , 1000 ) ;
78288: LD_VAR 0 1
78292: PPUSH
78293: LD_INT 1000
78295: PPUSH
78296: CALL_OW 234
78300: GO 78270
78302: POP
78303: POP
// until p > 20 ;
78304: LD_VAR 0 3
78308: PUSH
78309: LD_INT 20
78311: GREATER
78312: IFFALSE 78239
// end ;
78314: PPOPN 3
78316: END
// every 0 0$1 trigger StreamModeActive and sTime do
78317: LD_EXP 70
78321: PUSH
78322: LD_EXP 121
78326: AND
78327: IFFALSE 78362
78329: GO 78331
78331: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78332: LD_INT 28
78334: PPUSH
78335: LD_OWVAR 2
78339: PPUSH
78340: LD_INT 2
78342: PPUSH
78343: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78347: LD_INT 30
78349: PPUSH
78350: LD_OWVAR 2
78354: PPUSH
78355: LD_INT 2
78357: PPUSH
78358: CALL_OW 322
// end ;
78362: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78363: LD_EXP 70
78367: PUSH
78368: LD_EXP 122
78372: AND
78373: IFFALSE 78494
78375: GO 78377
78377: DISABLE
78378: LD_INT 0
78380: PPUSH
78381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78382: LD_ADDR_VAR 0 2
78386: PUSH
78387: LD_INT 22
78389: PUSH
78390: LD_OWVAR 2
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: PUSH
78399: LD_INT 21
78401: PUSH
78402: LD_INT 1
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: PUSH
78409: LD_INT 3
78411: PUSH
78412: LD_INT 23
78414: PUSH
78415: LD_INT 0
78417: PUSH
78418: EMPTY
78419: LIST
78420: LIST
78421: PUSH
78422: EMPTY
78423: LIST
78424: LIST
78425: PUSH
78426: EMPTY
78427: LIST
78428: LIST
78429: LIST
78430: PPUSH
78431: CALL_OW 69
78435: ST_TO_ADDR
// if not tmp then
78436: LD_VAR 0 2
78440: NOT
78441: IFFALSE 78445
// exit ;
78443: GO 78494
// for i in tmp do
78445: LD_ADDR_VAR 0 1
78449: PUSH
78450: LD_VAR 0 2
78454: PUSH
78455: FOR_IN
78456: IFFALSE 78492
// begin if Crawls ( i ) then
78458: LD_VAR 0 1
78462: PPUSH
78463: CALL_OW 318
78467: IFFALSE 78478
// ComWalk ( i ) ;
78469: LD_VAR 0 1
78473: PPUSH
78474: CALL_OW 138
// SetClass ( i , 2 ) ;
78478: LD_VAR 0 1
78482: PPUSH
78483: LD_INT 2
78485: PPUSH
78486: CALL_OW 336
// end ;
78490: GO 78455
78492: POP
78493: POP
// end ;
78494: PPOPN 2
78496: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78497: LD_EXP 70
78501: PUSH
78502: LD_EXP 123
78506: AND
78507: IFFALSE 78795
78509: GO 78511
78511: DISABLE
78512: LD_INT 0
78514: PPUSH
78515: PPUSH
78516: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78517: LD_OWVAR 2
78521: PPUSH
78522: LD_INT 9
78524: PPUSH
78525: LD_INT 1
78527: PPUSH
78528: LD_INT 1
78530: PPUSH
78531: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78535: LD_INT 9
78537: PPUSH
78538: LD_OWVAR 2
78542: PPUSH
78543: CALL_OW 343
// uc_side := 9 ;
78547: LD_ADDR_OWVAR 20
78551: PUSH
78552: LD_INT 9
78554: ST_TO_ADDR
// uc_nation := 2 ;
78555: LD_ADDR_OWVAR 21
78559: PUSH
78560: LD_INT 2
78562: ST_TO_ADDR
// hc_name := Dark Warrior ;
78563: LD_ADDR_OWVAR 26
78567: PUSH
78568: LD_STRING Dark Warrior
78570: ST_TO_ADDR
// hc_gallery :=  ;
78571: LD_ADDR_OWVAR 33
78575: PUSH
78576: LD_STRING 
78578: ST_TO_ADDR
// hc_noskilllimit := true ;
78579: LD_ADDR_OWVAR 76
78583: PUSH
78584: LD_INT 1
78586: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
78587: LD_ADDR_OWVAR 31
78591: PUSH
78592: LD_INT 30
78594: PUSH
78595: LD_INT 30
78597: PUSH
78598: LD_INT 30
78600: PUSH
78601: LD_INT 30
78603: PUSH
78604: EMPTY
78605: LIST
78606: LIST
78607: LIST
78608: LIST
78609: ST_TO_ADDR
// un := CreateHuman ;
78610: LD_ADDR_VAR 0 3
78614: PUSH
78615: CALL_OW 44
78619: ST_TO_ADDR
// hc_noskilllimit := false ;
78620: LD_ADDR_OWVAR 76
78624: PUSH
78625: LD_INT 0
78627: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78628: LD_VAR 0 3
78632: PPUSH
78633: LD_INT 1
78635: PPUSH
78636: CALL_OW 51
// ToLua ( playRanger() ) ;
78640: LD_STRING playRanger()
78642: PPUSH
78643: CALL_OW 559
// p := 0 ;
78647: LD_ADDR_VAR 0 2
78651: PUSH
78652: LD_INT 0
78654: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78655: LD_INT 35
78657: PPUSH
78658: CALL_OW 67
// p := p + 1 ;
78662: LD_ADDR_VAR 0 2
78666: PUSH
78667: LD_VAR 0 2
78671: PUSH
78672: LD_INT 1
78674: PLUS
78675: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
78676: LD_VAR 0 3
78680: PPUSH
78681: CALL_OW 256
78685: PUSH
78686: LD_INT 1000
78688: LESS
78689: IFFALSE 78703
// SetLives ( un , 1000 ) ;
78691: LD_VAR 0 3
78695: PPUSH
78696: LD_INT 1000
78698: PPUSH
78699: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
78703: LD_VAR 0 3
78707: PPUSH
78708: LD_INT 81
78710: PUSH
78711: LD_OWVAR 2
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: PUSH
78720: LD_INT 91
78722: PUSH
78723: LD_VAR 0 3
78727: PUSH
78728: LD_INT 30
78730: PUSH
78731: EMPTY
78732: LIST
78733: LIST
78734: LIST
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PPUSH
78740: CALL_OW 69
78744: PPUSH
78745: LD_VAR 0 3
78749: PPUSH
78750: CALL_OW 74
78754: PPUSH
78755: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
78759: LD_VAR 0 2
78763: PUSH
78764: LD_INT 80
78766: GREATER
78767: PUSH
78768: LD_VAR 0 3
78772: PPUSH
78773: CALL_OW 301
78777: OR
78778: IFFALSE 78655
// if un then
78780: LD_VAR 0 3
78784: IFFALSE 78795
// RemoveUnit ( un ) ;
78786: LD_VAR 0 3
78790: PPUSH
78791: CALL_OW 64
// end ;
78795: PPOPN 3
78797: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
78798: LD_EXP 124
78802: IFFALSE 78918
78804: GO 78806
78806: DISABLE
78807: LD_INT 0
78809: PPUSH
78810: PPUSH
78811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78812: LD_ADDR_VAR 0 2
78816: PUSH
78817: LD_INT 81
78819: PUSH
78820: LD_OWVAR 2
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: LD_INT 21
78831: PUSH
78832: LD_INT 1
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: EMPTY
78840: LIST
78841: LIST
78842: PPUSH
78843: CALL_OW 69
78847: ST_TO_ADDR
// ToLua ( playComputer() ) ;
78848: LD_STRING playComputer()
78850: PPUSH
78851: CALL_OW 559
// if not tmp then
78855: LD_VAR 0 2
78859: NOT
78860: IFFALSE 78864
// exit ;
78862: GO 78918
// for i in tmp do
78864: LD_ADDR_VAR 0 1
78868: PUSH
78869: LD_VAR 0 2
78873: PUSH
78874: FOR_IN
78875: IFFALSE 78916
// for j := 1 to 4 do
78877: LD_ADDR_VAR 0 3
78881: PUSH
78882: DOUBLE
78883: LD_INT 1
78885: DEC
78886: ST_TO_ADDR
78887: LD_INT 4
78889: PUSH
78890: FOR_TO
78891: IFFALSE 78912
// SetSkill ( i , j , 10 ) ;
78893: LD_VAR 0 1
78897: PPUSH
78898: LD_VAR 0 3
78902: PPUSH
78903: LD_INT 10
78905: PPUSH
78906: CALL_OW 237
78910: GO 78890
78912: POP
78913: POP
78914: GO 78874
78916: POP
78917: POP
// end ;
78918: PPOPN 3
78920: END
// every 0 0$1 trigger s30 do var i , tmp ;
78921: LD_EXP 125
78925: IFFALSE 78994
78927: GO 78929
78929: DISABLE
78930: LD_INT 0
78932: PPUSH
78933: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78934: LD_ADDR_VAR 0 2
78938: PUSH
78939: LD_INT 22
78941: PUSH
78942: LD_OWVAR 2
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: PPUSH
78951: CALL_OW 69
78955: ST_TO_ADDR
// if not tmp then
78956: LD_VAR 0 2
78960: NOT
78961: IFFALSE 78965
// exit ;
78963: GO 78994
// for i in tmp do
78965: LD_ADDR_VAR 0 1
78969: PUSH
78970: LD_VAR 0 2
78974: PUSH
78975: FOR_IN
78976: IFFALSE 78992
// SetLives ( i , 300 ) ;
78978: LD_VAR 0 1
78982: PPUSH
78983: LD_INT 300
78985: PPUSH
78986: CALL_OW 234
78990: GO 78975
78992: POP
78993: POP
// end ;
78994: PPOPN 2
78996: END
// every 0 0$1 trigger s60 do var i , tmp ;
78997: LD_EXP 126
79001: IFFALSE 79070
79003: GO 79005
79005: DISABLE
79006: LD_INT 0
79008: PPUSH
79009: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79010: LD_ADDR_VAR 0 2
79014: PUSH
79015: LD_INT 22
79017: PUSH
79018: LD_OWVAR 2
79022: PUSH
79023: EMPTY
79024: LIST
79025: LIST
79026: PPUSH
79027: CALL_OW 69
79031: ST_TO_ADDR
// if not tmp then
79032: LD_VAR 0 2
79036: NOT
79037: IFFALSE 79041
// exit ;
79039: GO 79070
// for i in tmp do
79041: LD_ADDR_VAR 0 1
79045: PUSH
79046: LD_VAR 0 2
79050: PUSH
79051: FOR_IN
79052: IFFALSE 79068
// SetLives ( i , 600 ) ;
79054: LD_VAR 0 1
79058: PPUSH
79059: LD_INT 600
79061: PPUSH
79062: CALL_OW 234
79066: GO 79051
79068: POP
79069: POP
// end ;
79070: PPOPN 2
79072: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
79073: LD_INT 0
79075: PPUSH
// case cmd of 301 :
79076: LD_VAR 0 1
79080: PUSH
79081: LD_INT 301
79083: DOUBLE
79084: EQUAL
79085: IFTRUE 79089
79087: GO 79121
79089: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
79090: LD_VAR 0 6
79094: PPUSH
79095: LD_VAR 0 7
79099: PPUSH
79100: LD_VAR 0 8
79104: PPUSH
79105: LD_VAR 0 4
79109: PPUSH
79110: LD_VAR 0 5
79114: PPUSH
79115: CALL 80322 0 5
79119: GO 79242
79121: LD_INT 302
79123: DOUBLE
79124: EQUAL
79125: IFTRUE 79129
79127: GO 79166
79129: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
79130: LD_VAR 0 6
79134: PPUSH
79135: LD_VAR 0 7
79139: PPUSH
79140: LD_VAR 0 8
79144: PPUSH
79145: LD_VAR 0 9
79149: PPUSH
79150: LD_VAR 0 4
79154: PPUSH
79155: LD_VAR 0 5
79159: PPUSH
79160: CALL 80413 0 6
79164: GO 79242
79166: LD_INT 303
79168: DOUBLE
79169: EQUAL
79170: IFTRUE 79174
79172: GO 79211
79174: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
79175: LD_VAR 0 6
79179: PPUSH
79180: LD_VAR 0 7
79184: PPUSH
79185: LD_VAR 0 8
79189: PPUSH
79190: LD_VAR 0 9
79194: PPUSH
79195: LD_VAR 0 4
79199: PPUSH
79200: LD_VAR 0 5
79204: PPUSH
79205: CALL 79247 0 6
79209: GO 79242
79211: LD_INT 304
79213: DOUBLE
79214: EQUAL
79215: IFTRUE 79219
79217: GO 79241
79219: POP
// hHackTeleport ( unit , x , y ) ; end ;
79220: LD_VAR 0 2
79224: PPUSH
79225: LD_VAR 0 4
79229: PPUSH
79230: LD_VAR 0 5
79234: PPUSH
79235: CALL 81006 0 3
79239: GO 79242
79241: POP
// end ;
79242: LD_VAR 0 12
79246: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
79247: LD_INT 0
79249: PPUSH
79250: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
79251: LD_VAR 0 1
79255: PUSH
79256: LD_INT 1
79258: LESS
79259: PUSH
79260: LD_VAR 0 1
79264: PUSH
79265: LD_INT 3
79267: GREATER
79268: OR
79269: PUSH
79270: LD_VAR 0 5
79274: PPUSH
79275: LD_VAR 0 6
79279: PPUSH
79280: CALL_OW 428
79284: OR
79285: IFFALSE 79289
// exit ;
79287: GO 80009
// uc_side := your_side ;
79289: LD_ADDR_OWVAR 20
79293: PUSH
79294: LD_OWVAR 2
79298: ST_TO_ADDR
// uc_nation := nation ;
79299: LD_ADDR_OWVAR 21
79303: PUSH
79304: LD_VAR 0 1
79308: ST_TO_ADDR
// bc_level = 1 ;
79309: LD_ADDR_OWVAR 43
79313: PUSH
79314: LD_INT 1
79316: ST_TO_ADDR
// case btype of 1 :
79317: LD_VAR 0 2
79321: PUSH
79322: LD_INT 1
79324: DOUBLE
79325: EQUAL
79326: IFTRUE 79330
79328: GO 79341
79330: POP
// bc_type := b_depot ; 2 :
79331: LD_ADDR_OWVAR 42
79335: PUSH
79336: LD_INT 0
79338: ST_TO_ADDR
79339: GO 79953
79341: LD_INT 2
79343: DOUBLE
79344: EQUAL
79345: IFTRUE 79349
79347: GO 79360
79349: POP
// bc_type := b_warehouse ; 3 :
79350: LD_ADDR_OWVAR 42
79354: PUSH
79355: LD_INT 1
79357: ST_TO_ADDR
79358: GO 79953
79360: LD_INT 3
79362: DOUBLE
79363: EQUAL
79364: IFTRUE 79368
79366: GO 79379
79368: POP
// bc_type := b_lab ; 4 .. 9 :
79369: LD_ADDR_OWVAR 42
79373: PUSH
79374: LD_INT 6
79376: ST_TO_ADDR
79377: GO 79953
79379: LD_INT 4
79381: DOUBLE
79382: GREATEREQUAL
79383: IFFALSE 79391
79385: LD_INT 9
79387: DOUBLE
79388: LESSEQUAL
79389: IFTRUE 79393
79391: GO 79445
79393: POP
// begin bc_type := b_lab_half ;
79394: LD_ADDR_OWVAR 42
79398: PUSH
79399: LD_INT 7
79401: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
79402: LD_ADDR_OWVAR 44
79406: PUSH
79407: LD_INT 10
79409: PUSH
79410: LD_INT 11
79412: PUSH
79413: LD_INT 12
79415: PUSH
79416: LD_INT 15
79418: PUSH
79419: LD_INT 14
79421: PUSH
79422: LD_INT 13
79424: PUSH
79425: EMPTY
79426: LIST
79427: LIST
79428: LIST
79429: LIST
79430: LIST
79431: LIST
79432: PUSH
79433: LD_VAR 0 2
79437: PUSH
79438: LD_INT 3
79440: MINUS
79441: ARRAY
79442: ST_TO_ADDR
// end ; 10 .. 13 :
79443: GO 79953
79445: LD_INT 10
79447: DOUBLE
79448: GREATEREQUAL
79449: IFFALSE 79457
79451: LD_INT 13
79453: DOUBLE
79454: LESSEQUAL
79455: IFTRUE 79459
79457: GO 79536
79459: POP
// begin bc_type := b_lab_full ;
79460: LD_ADDR_OWVAR 42
79464: PUSH
79465: LD_INT 8
79467: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
79468: LD_ADDR_OWVAR 44
79472: PUSH
79473: LD_INT 10
79475: PUSH
79476: LD_INT 12
79478: PUSH
79479: LD_INT 14
79481: PUSH
79482: LD_INT 13
79484: PUSH
79485: EMPTY
79486: LIST
79487: LIST
79488: LIST
79489: LIST
79490: PUSH
79491: LD_VAR 0 2
79495: PUSH
79496: LD_INT 9
79498: MINUS
79499: ARRAY
79500: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
79501: LD_ADDR_OWVAR 45
79505: PUSH
79506: LD_INT 11
79508: PUSH
79509: LD_INT 15
79511: PUSH
79512: LD_INT 12
79514: PUSH
79515: LD_INT 15
79517: PUSH
79518: EMPTY
79519: LIST
79520: LIST
79521: LIST
79522: LIST
79523: PUSH
79524: LD_VAR 0 2
79528: PUSH
79529: LD_INT 9
79531: MINUS
79532: ARRAY
79533: ST_TO_ADDR
// end ; 14 :
79534: GO 79953
79536: LD_INT 14
79538: DOUBLE
79539: EQUAL
79540: IFTRUE 79544
79542: GO 79555
79544: POP
// bc_type := b_workshop ; 15 :
79545: LD_ADDR_OWVAR 42
79549: PUSH
79550: LD_INT 2
79552: ST_TO_ADDR
79553: GO 79953
79555: LD_INT 15
79557: DOUBLE
79558: EQUAL
79559: IFTRUE 79563
79561: GO 79574
79563: POP
// bc_type := b_factory ; 16 :
79564: LD_ADDR_OWVAR 42
79568: PUSH
79569: LD_INT 3
79571: ST_TO_ADDR
79572: GO 79953
79574: LD_INT 16
79576: DOUBLE
79577: EQUAL
79578: IFTRUE 79582
79580: GO 79593
79582: POP
// bc_type := b_ext_gun ; 17 :
79583: LD_ADDR_OWVAR 42
79587: PUSH
79588: LD_INT 17
79590: ST_TO_ADDR
79591: GO 79953
79593: LD_INT 17
79595: DOUBLE
79596: EQUAL
79597: IFTRUE 79601
79599: GO 79629
79601: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
79602: LD_ADDR_OWVAR 42
79606: PUSH
79607: LD_INT 19
79609: PUSH
79610: LD_INT 23
79612: PUSH
79613: LD_INT 19
79615: PUSH
79616: EMPTY
79617: LIST
79618: LIST
79619: LIST
79620: PUSH
79621: LD_VAR 0 1
79625: ARRAY
79626: ST_TO_ADDR
79627: GO 79953
79629: LD_INT 18
79631: DOUBLE
79632: EQUAL
79633: IFTRUE 79637
79635: GO 79648
79637: POP
// bc_type := b_ext_radar ; 19 :
79638: LD_ADDR_OWVAR 42
79642: PUSH
79643: LD_INT 20
79645: ST_TO_ADDR
79646: GO 79953
79648: LD_INT 19
79650: DOUBLE
79651: EQUAL
79652: IFTRUE 79656
79654: GO 79667
79656: POP
// bc_type := b_ext_radio ; 20 :
79657: LD_ADDR_OWVAR 42
79661: PUSH
79662: LD_INT 22
79664: ST_TO_ADDR
79665: GO 79953
79667: LD_INT 20
79669: DOUBLE
79670: EQUAL
79671: IFTRUE 79675
79673: GO 79686
79675: POP
// bc_type := b_ext_siberium ; 21 :
79676: LD_ADDR_OWVAR 42
79680: PUSH
79681: LD_INT 21
79683: ST_TO_ADDR
79684: GO 79953
79686: LD_INT 21
79688: DOUBLE
79689: EQUAL
79690: IFTRUE 79694
79692: GO 79705
79694: POP
// bc_type := b_ext_computer ; 22 :
79695: LD_ADDR_OWVAR 42
79699: PUSH
79700: LD_INT 24
79702: ST_TO_ADDR
79703: GO 79953
79705: LD_INT 22
79707: DOUBLE
79708: EQUAL
79709: IFTRUE 79713
79711: GO 79724
79713: POP
// bc_type := b_ext_track ; 23 :
79714: LD_ADDR_OWVAR 42
79718: PUSH
79719: LD_INT 16
79721: ST_TO_ADDR
79722: GO 79953
79724: LD_INT 23
79726: DOUBLE
79727: EQUAL
79728: IFTRUE 79732
79730: GO 79743
79732: POP
// bc_type := b_ext_laser ; 24 :
79733: LD_ADDR_OWVAR 42
79737: PUSH
79738: LD_INT 25
79740: ST_TO_ADDR
79741: GO 79953
79743: LD_INT 24
79745: DOUBLE
79746: EQUAL
79747: IFTRUE 79751
79749: GO 79762
79751: POP
// bc_type := b_control_tower ; 25 :
79752: LD_ADDR_OWVAR 42
79756: PUSH
79757: LD_INT 36
79759: ST_TO_ADDR
79760: GO 79953
79762: LD_INT 25
79764: DOUBLE
79765: EQUAL
79766: IFTRUE 79770
79768: GO 79781
79770: POP
// bc_type := b_breastwork ; 26 :
79771: LD_ADDR_OWVAR 42
79775: PUSH
79776: LD_INT 31
79778: ST_TO_ADDR
79779: GO 79953
79781: LD_INT 26
79783: DOUBLE
79784: EQUAL
79785: IFTRUE 79789
79787: GO 79800
79789: POP
// bc_type := b_bunker ; 27 :
79790: LD_ADDR_OWVAR 42
79794: PUSH
79795: LD_INT 32
79797: ST_TO_ADDR
79798: GO 79953
79800: LD_INT 27
79802: DOUBLE
79803: EQUAL
79804: IFTRUE 79808
79806: GO 79819
79808: POP
// bc_type := b_turret ; 28 :
79809: LD_ADDR_OWVAR 42
79813: PUSH
79814: LD_INT 33
79816: ST_TO_ADDR
79817: GO 79953
79819: LD_INT 28
79821: DOUBLE
79822: EQUAL
79823: IFTRUE 79827
79825: GO 79838
79827: POP
// bc_type := b_armoury ; 29 :
79828: LD_ADDR_OWVAR 42
79832: PUSH
79833: LD_INT 4
79835: ST_TO_ADDR
79836: GO 79953
79838: LD_INT 29
79840: DOUBLE
79841: EQUAL
79842: IFTRUE 79846
79844: GO 79857
79846: POP
// bc_type := b_barracks ; 30 :
79847: LD_ADDR_OWVAR 42
79851: PUSH
79852: LD_INT 5
79854: ST_TO_ADDR
79855: GO 79953
79857: LD_INT 30
79859: DOUBLE
79860: EQUAL
79861: IFTRUE 79865
79863: GO 79876
79865: POP
// bc_type := b_solar_power ; 31 :
79866: LD_ADDR_OWVAR 42
79870: PUSH
79871: LD_INT 27
79873: ST_TO_ADDR
79874: GO 79953
79876: LD_INT 31
79878: DOUBLE
79879: EQUAL
79880: IFTRUE 79884
79882: GO 79895
79884: POP
// bc_type := b_oil_power ; 32 :
79885: LD_ADDR_OWVAR 42
79889: PUSH
79890: LD_INT 26
79892: ST_TO_ADDR
79893: GO 79953
79895: LD_INT 32
79897: DOUBLE
79898: EQUAL
79899: IFTRUE 79903
79901: GO 79914
79903: POP
// bc_type := b_siberite_power ; 33 :
79904: LD_ADDR_OWVAR 42
79908: PUSH
79909: LD_INT 28
79911: ST_TO_ADDR
79912: GO 79953
79914: LD_INT 33
79916: DOUBLE
79917: EQUAL
79918: IFTRUE 79922
79920: GO 79933
79922: POP
// bc_type := b_oil_mine ; 34 :
79923: LD_ADDR_OWVAR 42
79927: PUSH
79928: LD_INT 29
79930: ST_TO_ADDR
79931: GO 79953
79933: LD_INT 34
79935: DOUBLE
79936: EQUAL
79937: IFTRUE 79941
79939: GO 79952
79941: POP
// bc_type := b_siberite_mine ; end ;
79942: LD_ADDR_OWVAR 42
79946: PUSH
79947: LD_INT 30
79949: ST_TO_ADDR
79950: GO 79953
79952: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
79953: LD_ADDR_VAR 0 8
79957: PUSH
79958: LD_VAR 0 5
79962: PPUSH
79963: LD_VAR 0 6
79967: PPUSH
79968: LD_VAR 0 3
79972: PPUSH
79973: CALL_OW 47
79977: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
79978: LD_OWVAR 42
79982: PUSH
79983: LD_INT 32
79985: PUSH
79986: LD_INT 33
79988: PUSH
79989: EMPTY
79990: LIST
79991: LIST
79992: IN
79993: IFFALSE 80009
// PlaceWeaponTurret ( b , weapon ) ;
79995: LD_VAR 0 8
79999: PPUSH
80000: LD_VAR 0 4
80004: PPUSH
80005: CALL_OW 431
// end ;
80009: LD_VAR 0 7
80013: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
80014: LD_INT 0
80016: PPUSH
80017: PPUSH
80018: PPUSH
80019: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80020: LD_ADDR_VAR 0 4
80024: PUSH
80025: LD_INT 22
80027: PUSH
80028: LD_OWVAR 2
80032: PUSH
80033: EMPTY
80034: LIST
80035: LIST
80036: PUSH
80037: LD_INT 2
80039: PUSH
80040: LD_INT 30
80042: PUSH
80043: LD_INT 0
80045: PUSH
80046: EMPTY
80047: LIST
80048: LIST
80049: PUSH
80050: LD_INT 30
80052: PUSH
80053: LD_INT 1
80055: PUSH
80056: EMPTY
80057: LIST
80058: LIST
80059: PUSH
80060: EMPTY
80061: LIST
80062: LIST
80063: LIST
80064: PUSH
80065: EMPTY
80066: LIST
80067: LIST
80068: PPUSH
80069: CALL_OW 69
80073: ST_TO_ADDR
// if not tmp then
80074: LD_VAR 0 4
80078: NOT
80079: IFFALSE 80083
// exit ;
80081: GO 80142
// for i in tmp do
80083: LD_ADDR_VAR 0 2
80087: PUSH
80088: LD_VAR 0 4
80092: PUSH
80093: FOR_IN
80094: IFFALSE 80140
// for j = 1 to 3 do
80096: LD_ADDR_VAR 0 3
80100: PUSH
80101: DOUBLE
80102: LD_INT 1
80104: DEC
80105: ST_TO_ADDR
80106: LD_INT 3
80108: PUSH
80109: FOR_TO
80110: IFFALSE 80136
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
80112: LD_VAR 0 2
80116: PPUSH
80117: CALL_OW 274
80121: PPUSH
80122: LD_VAR 0 3
80126: PPUSH
80127: LD_INT 99999
80129: PPUSH
80130: CALL_OW 277
80134: GO 80109
80136: POP
80137: POP
80138: GO 80093
80140: POP
80141: POP
// end ;
80142: LD_VAR 0 1
80146: RET
// export function hHackSetLevel10 ; var i , j ; begin
80147: LD_INT 0
80149: PPUSH
80150: PPUSH
80151: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80152: LD_ADDR_VAR 0 2
80156: PUSH
80157: LD_INT 21
80159: PUSH
80160: LD_INT 1
80162: PUSH
80163: EMPTY
80164: LIST
80165: LIST
80166: PPUSH
80167: CALL_OW 69
80171: PUSH
80172: FOR_IN
80173: IFFALSE 80225
// if IsSelected ( i ) then
80175: LD_VAR 0 2
80179: PPUSH
80180: CALL_OW 306
80184: IFFALSE 80223
// begin for j := 1 to 4 do
80186: LD_ADDR_VAR 0 3
80190: PUSH
80191: DOUBLE
80192: LD_INT 1
80194: DEC
80195: ST_TO_ADDR
80196: LD_INT 4
80198: PUSH
80199: FOR_TO
80200: IFFALSE 80221
// SetSkill ( i , j , 10 ) ;
80202: LD_VAR 0 2
80206: PPUSH
80207: LD_VAR 0 3
80211: PPUSH
80212: LD_INT 10
80214: PPUSH
80215: CALL_OW 237
80219: GO 80199
80221: POP
80222: POP
// end ;
80223: GO 80172
80225: POP
80226: POP
// end ;
80227: LD_VAR 0 1
80231: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
80232: LD_INT 0
80234: PPUSH
80235: PPUSH
80236: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
80237: LD_ADDR_VAR 0 2
80241: PUSH
80242: LD_INT 22
80244: PUSH
80245: LD_OWVAR 2
80249: PUSH
80250: EMPTY
80251: LIST
80252: LIST
80253: PUSH
80254: LD_INT 21
80256: PUSH
80257: LD_INT 1
80259: PUSH
80260: EMPTY
80261: LIST
80262: LIST
80263: PUSH
80264: EMPTY
80265: LIST
80266: LIST
80267: PPUSH
80268: CALL_OW 69
80272: PUSH
80273: FOR_IN
80274: IFFALSE 80315
// begin for j := 1 to 4 do
80276: LD_ADDR_VAR 0 3
80280: PUSH
80281: DOUBLE
80282: LD_INT 1
80284: DEC
80285: ST_TO_ADDR
80286: LD_INT 4
80288: PUSH
80289: FOR_TO
80290: IFFALSE 80311
// SetSkill ( i , j , 10 ) ;
80292: LD_VAR 0 2
80296: PPUSH
80297: LD_VAR 0 3
80301: PPUSH
80302: LD_INT 10
80304: PPUSH
80305: CALL_OW 237
80309: GO 80289
80311: POP
80312: POP
// end ;
80313: GO 80273
80315: POP
80316: POP
// end ;
80317: LD_VAR 0 1
80321: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
80322: LD_INT 0
80324: PPUSH
// uc_side := your_side ;
80325: LD_ADDR_OWVAR 20
80329: PUSH
80330: LD_OWVAR 2
80334: ST_TO_ADDR
// uc_nation := nation ;
80335: LD_ADDR_OWVAR 21
80339: PUSH
80340: LD_VAR 0 1
80344: ST_TO_ADDR
// InitHc ;
80345: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
80349: LD_INT 0
80351: PPUSH
80352: LD_VAR 0 2
80356: PPUSH
80357: LD_VAR 0 3
80361: PPUSH
80362: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
80366: LD_VAR 0 4
80370: PPUSH
80371: LD_VAR 0 5
80375: PPUSH
80376: CALL_OW 428
80380: PUSH
80381: LD_INT 0
80383: EQUAL
80384: IFFALSE 80408
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
80386: CALL_OW 44
80390: PPUSH
80391: LD_VAR 0 4
80395: PPUSH
80396: LD_VAR 0 5
80400: PPUSH
80401: LD_INT 1
80403: PPUSH
80404: CALL_OW 48
// end ;
80408: LD_VAR 0 6
80412: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
80413: LD_INT 0
80415: PPUSH
80416: PPUSH
// uc_side := your_side ;
80417: LD_ADDR_OWVAR 20
80421: PUSH
80422: LD_OWVAR 2
80426: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
80427: LD_VAR 0 1
80431: PUSH
80432: LD_INT 1
80434: PUSH
80435: LD_INT 2
80437: PUSH
80438: LD_INT 3
80440: PUSH
80441: LD_INT 4
80443: PUSH
80444: LD_INT 5
80446: PUSH
80447: EMPTY
80448: LIST
80449: LIST
80450: LIST
80451: LIST
80452: LIST
80453: IN
80454: IFFALSE 80466
// uc_nation := nation_american else
80456: LD_ADDR_OWVAR 21
80460: PUSH
80461: LD_INT 1
80463: ST_TO_ADDR
80464: GO 80509
// if chassis in [ 11 , 12 , 13 , 14 ] then
80466: LD_VAR 0 1
80470: PUSH
80471: LD_INT 11
80473: PUSH
80474: LD_INT 12
80476: PUSH
80477: LD_INT 13
80479: PUSH
80480: LD_INT 14
80482: PUSH
80483: EMPTY
80484: LIST
80485: LIST
80486: LIST
80487: LIST
80488: IN
80489: IFFALSE 80501
// uc_nation := nation_arabian else
80491: LD_ADDR_OWVAR 21
80495: PUSH
80496: LD_INT 2
80498: ST_TO_ADDR
80499: GO 80509
// uc_nation := nation_russian ;
80501: LD_ADDR_OWVAR 21
80505: PUSH
80506: LD_INT 3
80508: ST_TO_ADDR
// vc_chassis := chassis ;
80509: LD_ADDR_OWVAR 37
80513: PUSH
80514: LD_VAR 0 1
80518: ST_TO_ADDR
// vc_engine := engine ;
80519: LD_ADDR_OWVAR 39
80523: PUSH
80524: LD_VAR 0 2
80528: ST_TO_ADDR
// vc_control := control ;
80529: LD_ADDR_OWVAR 38
80533: PUSH
80534: LD_VAR 0 3
80538: ST_TO_ADDR
// vc_weapon := weapon ;
80539: LD_ADDR_OWVAR 40
80543: PUSH
80544: LD_VAR 0 4
80548: ST_TO_ADDR
// un := CreateVehicle ;
80549: LD_ADDR_VAR 0 8
80553: PUSH
80554: CALL_OW 45
80558: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
80559: LD_VAR 0 8
80563: PPUSH
80564: LD_INT 0
80566: PPUSH
80567: LD_INT 5
80569: PPUSH
80570: CALL_OW 12
80574: PPUSH
80575: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
80579: LD_VAR 0 8
80583: PPUSH
80584: LD_VAR 0 5
80588: PPUSH
80589: LD_VAR 0 6
80593: PPUSH
80594: LD_INT 1
80596: PPUSH
80597: CALL_OW 48
// end ;
80601: LD_VAR 0 7
80605: RET
// export hInvincible ; every 1 do
80606: GO 80608
80608: DISABLE
// hInvincible := [ ] ;
80609: LD_ADDR_EXP 127
80613: PUSH
80614: EMPTY
80615: ST_TO_ADDR
80616: END
// every 10 do var i ;
80617: GO 80619
80619: DISABLE
80620: LD_INT 0
80622: PPUSH
// begin enable ;
80623: ENABLE
// if not hInvincible then
80624: LD_EXP 127
80628: NOT
80629: IFFALSE 80633
// exit ;
80631: GO 80677
// for i in hInvincible do
80633: LD_ADDR_VAR 0 1
80637: PUSH
80638: LD_EXP 127
80642: PUSH
80643: FOR_IN
80644: IFFALSE 80675
// if GetLives ( i ) < 1000 then
80646: LD_VAR 0 1
80650: PPUSH
80651: CALL_OW 256
80655: PUSH
80656: LD_INT 1000
80658: LESS
80659: IFFALSE 80673
// SetLives ( i , 1000 ) ;
80661: LD_VAR 0 1
80665: PPUSH
80666: LD_INT 1000
80668: PPUSH
80669: CALL_OW 234
80673: GO 80643
80675: POP
80676: POP
// end ;
80677: PPOPN 1
80679: END
// export function hHackInvincible ; var i ; begin
80680: LD_INT 0
80682: PPUSH
80683: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80684: LD_ADDR_VAR 0 2
80688: PUSH
80689: LD_INT 2
80691: PUSH
80692: LD_INT 21
80694: PUSH
80695: LD_INT 1
80697: PUSH
80698: EMPTY
80699: LIST
80700: LIST
80701: PUSH
80702: LD_INT 21
80704: PUSH
80705: LD_INT 2
80707: PUSH
80708: EMPTY
80709: LIST
80710: LIST
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: LIST
80716: PPUSH
80717: CALL_OW 69
80721: PUSH
80722: FOR_IN
80723: IFFALSE 80784
// if IsSelected ( i ) then
80725: LD_VAR 0 2
80729: PPUSH
80730: CALL_OW 306
80734: IFFALSE 80782
// begin if i in hInvincible then
80736: LD_VAR 0 2
80740: PUSH
80741: LD_EXP 127
80745: IN
80746: IFFALSE 80766
// hInvincible := hInvincible diff i else
80748: LD_ADDR_EXP 127
80752: PUSH
80753: LD_EXP 127
80757: PUSH
80758: LD_VAR 0 2
80762: DIFF
80763: ST_TO_ADDR
80764: GO 80782
// hInvincible := hInvincible union i ;
80766: LD_ADDR_EXP 127
80770: PUSH
80771: LD_EXP 127
80775: PUSH
80776: LD_VAR 0 2
80780: UNION
80781: ST_TO_ADDR
// end ;
80782: GO 80722
80784: POP
80785: POP
// end ;
80786: LD_VAR 0 1
80790: RET
// export function hHackInvisible ; var i , j ; begin
80791: LD_INT 0
80793: PPUSH
80794: PPUSH
80795: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80796: LD_ADDR_VAR 0 2
80800: PUSH
80801: LD_INT 21
80803: PUSH
80804: LD_INT 1
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: PPUSH
80811: CALL_OW 69
80815: PUSH
80816: FOR_IN
80817: IFFALSE 80841
// if IsSelected ( i ) then
80819: LD_VAR 0 2
80823: PPUSH
80824: CALL_OW 306
80828: IFFALSE 80839
// ComForceInvisible ( i ) ;
80830: LD_VAR 0 2
80834: PPUSH
80835: CALL_OW 496
80839: GO 80816
80841: POP
80842: POP
// end ;
80843: LD_VAR 0 1
80847: RET
// export function hHackChangeYourSide ; begin
80848: LD_INT 0
80850: PPUSH
// if your_side = 8 then
80851: LD_OWVAR 2
80855: PUSH
80856: LD_INT 8
80858: EQUAL
80859: IFFALSE 80871
// your_side := 0 else
80861: LD_ADDR_OWVAR 2
80865: PUSH
80866: LD_INT 0
80868: ST_TO_ADDR
80869: GO 80885
// your_side := your_side + 1 ;
80871: LD_ADDR_OWVAR 2
80875: PUSH
80876: LD_OWVAR 2
80880: PUSH
80881: LD_INT 1
80883: PLUS
80884: ST_TO_ADDR
// end ;
80885: LD_VAR 0 1
80889: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80890: LD_INT 0
80892: PPUSH
80893: PPUSH
80894: PPUSH
// for i in all_units do
80895: LD_ADDR_VAR 0 2
80899: PUSH
80900: LD_OWVAR 3
80904: PUSH
80905: FOR_IN
80906: IFFALSE 80984
// if IsSelected ( i ) then
80908: LD_VAR 0 2
80912: PPUSH
80913: CALL_OW 306
80917: IFFALSE 80982
// begin j := GetSide ( i ) ;
80919: LD_ADDR_VAR 0 3
80923: PUSH
80924: LD_VAR 0 2
80928: PPUSH
80929: CALL_OW 255
80933: ST_TO_ADDR
// if j = 8 then
80934: LD_VAR 0 3
80938: PUSH
80939: LD_INT 8
80941: EQUAL
80942: IFFALSE 80954
// j := 0 else
80944: LD_ADDR_VAR 0 3
80948: PUSH
80949: LD_INT 0
80951: ST_TO_ADDR
80952: GO 80968
// j := j + 1 ;
80954: LD_ADDR_VAR 0 3
80958: PUSH
80959: LD_VAR 0 3
80963: PUSH
80964: LD_INT 1
80966: PLUS
80967: ST_TO_ADDR
// SetSide ( i , j ) ;
80968: LD_VAR 0 2
80972: PPUSH
80973: LD_VAR 0 3
80977: PPUSH
80978: CALL_OW 235
// end ;
80982: GO 80905
80984: POP
80985: POP
// end ;
80986: LD_VAR 0 1
80990: RET
// export function hHackFog ; begin
80991: LD_INT 0
80993: PPUSH
// FogOff ( true ) ;
80994: LD_INT 1
80996: PPUSH
80997: CALL_OW 344
// end ;
81001: LD_VAR 0 1
81005: RET
// export function hHackTeleport ( unit , x , y ) ; begin
81006: LD_INT 0
81008: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
81009: LD_VAR 0 1
81013: PPUSH
81014: LD_VAR 0 2
81018: PPUSH
81019: LD_VAR 0 3
81023: PPUSH
81024: LD_INT 1
81026: PPUSH
81027: LD_INT 1
81029: PPUSH
81030: CALL_OW 483
// CenterOnXY ( x , y ) ;
81034: LD_VAR 0 2
81038: PPUSH
81039: LD_VAR 0 3
81043: PPUSH
81044: CALL_OW 84
// end ;
81048: LD_VAR 0 4
81052: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
81053: LD_INT 0
81055: PPUSH
81056: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
81057: LD_VAR 0 1
81061: NOT
81062: PUSH
81063: LD_VAR 0 2
81067: PPUSH
81068: LD_VAR 0 3
81072: PPUSH
81073: CALL_OW 488
81077: NOT
81078: OR
81079: PUSH
81080: LD_VAR 0 1
81084: PPUSH
81085: CALL_OW 266
81089: PUSH
81090: LD_INT 3
81092: NONEQUAL
81093: PUSH
81094: LD_VAR 0 1
81098: PPUSH
81099: CALL_OW 247
81103: PUSH
81104: LD_INT 1
81106: EQUAL
81107: NOT
81108: AND
81109: OR
81110: IFFALSE 81114
// exit ;
81112: GO 81263
// if GetType ( factory ) = unit_human then
81114: LD_VAR 0 1
81118: PPUSH
81119: CALL_OW 247
81123: PUSH
81124: LD_INT 1
81126: EQUAL
81127: IFFALSE 81144
// factory := IsInUnit ( factory ) ;
81129: LD_ADDR_VAR 0 1
81133: PUSH
81134: LD_VAR 0 1
81138: PPUSH
81139: CALL_OW 310
81143: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81144: LD_VAR 0 1
81148: PPUSH
81149: CALL_OW 266
81153: PUSH
81154: LD_INT 3
81156: NONEQUAL
81157: IFFALSE 81161
// exit ;
81159: GO 81263
// if HexInfo ( x , y ) = factory then
81161: LD_VAR 0 2
81165: PPUSH
81166: LD_VAR 0 3
81170: PPUSH
81171: CALL_OW 428
81175: PUSH
81176: LD_VAR 0 1
81180: EQUAL
81181: IFFALSE 81208
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
81183: LD_ADDR_EXP 128
81187: PUSH
81188: LD_EXP 128
81192: PPUSH
81193: LD_VAR 0 1
81197: PPUSH
81198: LD_INT 0
81200: PPUSH
81201: CALL_OW 1
81205: ST_TO_ADDR
81206: GO 81259
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
81208: LD_ADDR_EXP 128
81212: PUSH
81213: LD_EXP 128
81217: PPUSH
81218: LD_VAR 0 1
81222: PPUSH
81223: LD_VAR 0 1
81227: PPUSH
81228: CALL_OW 255
81232: PUSH
81233: LD_VAR 0 1
81237: PUSH
81238: LD_VAR 0 2
81242: PUSH
81243: LD_VAR 0 3
81247: PUSH
81248: EMPTY
81249: LIST
81250: LIST
81251: LIST
81252: LIST
81253: PPUSH
81254: CALL_OW 1
81258: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81259: CALL 81268 0 0
// end ;
81263: LD_VAR 0 4
81267: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
81268: LD_INT 0
81270: PPUSH
81271: PPUSH
81272: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
81273: LD_STRING resetFactoryWaypoint();
81275: PPUSH
81276: CALL_OW 559
// if factoryWaypoints then
81280: LD_EXP 128
81284: IFFALSE 81410
// begin list := PrepareArray ( factoryWaypoints ) ;
81286: LD_ADDR_VAR 0 3
81290: PUSH
81291: LD_EXP 128
81295: PPUSH
81296: NOP4
81300: ST_TO_ADDR
// for i := 1 to list do
81301: LD_ADDR_VAR 0 2
81305: PUSH
81306: DOUBLE
81307: LD_INT 1
81309: DEC
81310: ST_TO_ADDR
81311: LD_VAR 0 3
81315: PUSH
81316: FOR_TO
81317: IFFALSE 81408
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81319: LD_STRING setFactoryWaypointXY(
81321: PUSH
81322: LD_VAR 0 3
81326: PUSH
81327: LD_VAR 0 2
81331: ARRAY
81332: PUSH
81333: LD_INT 1
81335: ARRAY
81336: STR
81337: PUSH
81338: LD_STRING ,
81340: STR
81341: PUSH
81342: LD_VAR 0 3
81346: PUSH
81347: LD_VAR 0 2
81351: ARRAY
81352: PUSH
81353: LD_INT 2
81355: ARRAY
81356: STR
81357: PUSH
81358: LD_STRING ,
81360: STR
81361: PUSH
81362: LD_VAR 0 3
81366: PUSH
81367: LD_VAR 0 2
81371: ARRAY
81372: PUSH
81373: LD_INT 3
81375: ARRAY
81376: STR
81377: PUSH
81378: LD_STRING ,
81380: STR
81381: PUSH
81382: LD_VAR 0 3
81386: PUSH
81387: LD_VAR 0 2
81391: ARRAY
81392: PUSH
81393: LD_INT 4
81395: ARRAY
81396: STR
81397: PUSH
81398: LD_STRING )
81400: STR
81401: PPUSH
81402: CALL_OW 559
81406: GO 81316
81408: POP
81409: POP
// end ; end ;
81410: LD_VAR 0 1
81414: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
81415: LD_INT 0
81417: PPUSH
// if HexInfo ( x , y ) = warehouse then
81418: LD_VAR 0 2
81422: PPUSH
81423: LD_VAR 0 3
81427: PPUSH
81428: CALL_OW 428
81432: PUSH
81433: LD_VAR 0 1
81437: EQUAL
81438: IFFALSE 81465
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
81440: LD_ADDR_EXP 129
81444: PUSH
81445: LD_EXP 129
81449: PPUSH
81450: LD_VAR 0 1
81454: PPUSH
81455: LD_INT 0
81457: PPUSH
81458: CALL_OW 1
81462: ST_TO_ADDR
81463: GO 81516
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
81465: LD_ADDR_EXP 129
81469: PUSH
81470: LD_EXP 129
81474: PPUSH
81475: LD_VAR 0 1
81479: PPUSH
81480: LD_VAR 0 1
81484: PPUSH
81485: CALL_OW 255
81489: PUSH
81490: LD_VAR 0 1
81494: PUSH
81495: LD_VAR 0 2
81499: PUSH
81500: LD_VAR 0 3
81504: PUSH
81505: EMPTY
81506: LIST
81507: LIST
81508: LIST
81509: LIST
81510: PPUSH
81511: CALL_OW 1
81515: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
81516: CALL 81525 0 0
// end ;
81520: LD_VAR 0 4
81524: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
81525: LD_INT 0
81527: PPUSH
81528: PPUSH
81529: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
81530: LD_STRING resetWarehouseGatheringPoints();
81532: PPUSH
81533: CALL_OW 559
// if warehouseGatheringPoints then
81537: LD_EXP 129
81541: IFFALSE 81667
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
81543: LD_ADDR_VAR 0 3
81547: PUSH
81548: LD_EXP 129
81552: PPUSH
81553: NOP4
81557: ST_TO_ADDR
// for i := 1 to list do
81558: LD_ADDR_VAR 0 2
81562: PUSH
81563: DOUBLE
81564: LD_INT 1
81566: DEC
81567: ST_TO_ADDR
81568: LD_VAR 0 3
81572: PUSH
81573: FOR_TO
81574: IFFALSE 81665
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81576: LD_STRING setWarehouseGatheringPointXY(
81578: PUSH
81579: LD_VAR 0 3
81583: PUSH
81584: LD_VAR 0 2
81588: ARRAY
81589: PUSH
81590: LD_INT 1
81592: ARRAY
81593: STR
81594: PUSH
81595: LD_STRING ,
81597: STR
81598: PUSH
81599: LD_VAR 0 3
81603: PUSH
81604: LD_VAR 0 2
81608: ARRAY
81609: PUSH
81610: LD_INT 2
81612: ARRAY
81613: STR
81614: PUSH
81615: LD_STRING ,
81617: STR
81618: PUSH
81619: LD_VAR 0 3
81623: PUSH
81624: LD_VAR 0 2
81628: ARRAY
81629: PUSH
81630: LD_INT 3
81632: ARRAY
81633: STR
81634: PUSH
81635: LD_STRING ,
81637: STR
81638: PUSH
81639: LD_VAR 0 3
81643: PUSH
81644: LD_VAR 0 2
81648: ARRAY
81649: PUSH
81650: LD_INT 4
81652: ARRAY
81653: STR
81654: PUSH
81655: LD_STRING )
81657: STR
81658: PPUSH
81659: CALL_OW 559
81663: GO 81573
81665: POP
81666: POP
// end ; end ;
81667: LD_VAR 0 1
81671: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
81672: LD_EXP 129
81676: IFFALSE 82361
81678: GO 81680
81680: DISABLE
81681: LD_INT 0
81683: PPUSH
81684: PPUSH
81685: PPUSH
81686: PPUSH
81687: PPUSH
81688: PPUSH
81689: PPUSH
81690: PPUSH
81691: PPUSH
// begin enable ;
81692: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
81693: LD_ADDR_VAR 0 3
81697: PUSH
81698: LD_EXP 129
81702: PPUSH
81703: NOP4
81707: ST_TO_ADDR
// if not list then
81708: LD_VAR 0 3
81712: NOT
81713: IFFALSE 81717
// exit ;
81715: GO 82361
// for i := 1 to list do
81717: LD_ADDR_VAR 0 1
81721: PUSH
81722: DOUBLE
81723: LD_INT 1
81725: DEC
81726: ST_TO_ADDR
81727: LD_VAR 0 3
81731: PUSH
81732: FOR_TO
81733: IFFALSE 82359
// begin depot := list [ i ] [ 2 ] ;
81735: LD_ADDR_VAR 0 8
81739: PUSH
81740: LD_VAR 0 3
81744: PUSH
81745: LD_VAR 0 1
81749: ARRAY
81750: PUSH
81751: LD_INT 2
81753: ARRAY
81754: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
81755: LD_ADDR_VAR 0 5
81759: PUSH
81760: LD_VAR 0 3
81764: PUSH
81765: LD_VAR 0 1
81769: ARRAY
81770: PUSH
81771: LD_INT 1
81773: ARRAY
81774: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
81775: LD_VAR 0 8
81779: PPUSH
81780: CALL_OW 301
81784: PUSH
81785: LD_VAR 0 5
81789: PUSH
81790: LD_VAR 0 8
81794: PPUSH
81795: CALL_OW 255
81799: NONEQUAL
81800: OR
81801: IFFALSE 81830
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
81803: LD_ADDR_EXP 129
81807: PUSH
81808: LD_EXP 129
81812: PPUSH
81813: LD_VAR 0 8
81817: PPUSH
81818: LD_INT 0
81820: PPUSH
81821: CALL_OW 1
81825: ST_TO_ADDR
// exit ;
81826: POP
81827: POP
81828: GO 82361
// end ; x := list [ i ] [ 3 ] ;
81830: LD_ADDR_VAR 0 6
81834: PUSH
81835: LD_VAR 0 3
81839: PUSH
81840: LD_VAR 0 1
81844: ARRAY
81845: PUSH
81846: LD_INT 3
81848: ARRAY
81849: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
81850: LD_ADDR_VAR 0 7
81854: PUSH
81855: LD_VAR 0 3
81859: PUSH
81860: LD_VAR 0 1
81864: ARRAY
81865: PUSH
81866: LD_INT 4
81868: ARRAY
81869: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
81870: LD_ADDR_VAR 0 9
81874: PUSH
81875: LD_VAR 0 6
81879: PPUSH
81880: LD_VAR 0 7
81884: PPUSH
81885: LD_INT 16
81887: PPUSH
81888: CALL 61062 0 3
81892: ST_TO_ADDR
// if not cratesNearbyPoint then
81893: LD_VAR 0 9
81897: NOT
81898: IFFALSE 81904
// exit ;
81900: POP
81901: POP
81902: GO 82361
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
81904: LD_ADDR_VAR 0 4
81908: PUSH
81909: LD_INT 22
81911: PUSH
81912: LD_VAR 0 5
81916: PUSH
81917: EMPTY
81918: LIST
81919: LIST
81920: PUSH
81921: LD_INT 3
81923: PUSH
81924: LD_INT 60
81926: PUSH
81927: EMPTY
81928: LIST
81929: PUSH
81930: EMPTY
81931: LIST
81932: LIST
81933: PUSH
81934: LD_INT 91
81936: PUSH
81937: LD_VAR 0 8
81941: PUSH
81942: LD_INT 6
81944: PUSH
81945: EMPTY
81946: LIST
81947: LIST
81948: LIST
81949: PUSH
81950: LD_INT 2
81952: PUSH
81953: LD_INT 25
81955: PUSH
81956: LD_INT 2
81958: PUSH
81959: EMPTY
81960: LIST
81961: LIST
81962: PUSH
81963: LD_INT 25
81965: PUSH
81966: LD_INT 16
81968: PUSH
81969: EMPTY
81970: LIST
81971: LIST
81972: PUSH
81973: EMPTY
81974: LIST
81975: LIST
81976: LIST
81977: PUSH
81978: EMPTY
81979: LIST
81980: LIST
81981: LIST
81982: LIST
81983: PPUSH
81984: CALL_OW 69
81988: PUSH
81989: LD_VAR 0 8
81993: PPUSH
81994: CALL_OW 313
81998: PPUSH
81999: LD_INT 3
82001: PUSH
82002: LD_INT 60
82004: PUSH
82005: EMPTY
82006: LIST
82007: PUSH
82008: EMPTY
82009: LIST
82010: LIST
82011: PUSH
82012: LD_INT 2
82014: PUSH
82015: LD_INT 25
82017: PUSH
82018: LD_INT 2
82020: PUSH
82021: EMPTY
82022: LIST
82023: LIST
82024: PUSH
82025: LD_INT 25
82027: PUSH
82028: LD_INT 16
82030: PUSH
82031: EMPTY
82032: LIST
82033: LIST
82034: PUSH
82035: EMPTY
82036: LIST
82037: LIST
82038: LIST
82039: PUSH
82040: EMPTY
82041: LIST
82042: LIST
82043: PPUSH
82044: CALL_OW 72
82048: UNION
82049: ST_TO_ADDR
// if tmp then
82050: LD_VAR 0 4
82054: IFFALSE 82134
// begin tmp := ShrinkArray ( tmp , 3 ) ;
82056: LD_ADDR_VAR 0 4
82060: PUSH
82061: LD_VAR 0 4
82065: PPUSH
82066: LD_INT 3
82068: PPUSH
82069: CALL 59031 0 2
82073: ST_TO_ADDR
// for j in tmp do
82074: LD_ADDR_VAR 0 2
82078: PUSH
82079: LD_VAR 0 4
82083: PUSH
82084: FOR_IN
82085: IFFALSE 82128
// begin if IsInUnit ( j ) then
82087: LD_VAR 0 2
82091: PPUSH
82092: CALL_OW 310
82096: IFFALSE 82107
// ComExit ( j ) ;
82098: LD_VAR 0 2
82102: PPUSH
82103: CALL 59114 0 1
// AddComCollect ( j , x , y ) ;
82107: LD_VAR 0 2
82111: PPUSH
82112: LD_VAR 0 6
82116: PPUSH
82117: LD_VAR 0 7
82121: PPUSH
82122: CALL_OW 177
// end ;
82126: GO 82084
82128: POP
82129: POP
// exit ;
82130: POP
82131: POP
82132: GO 82361
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
82134: LD_ADDR_VAR 0 4
82138: PUSH
82139: LD_INT 22
82141: PUSH
82142: LD_VAR 0 5
82146: PUSH
82147: EMPTY
82148: LIST
82149: LIST
82150: PUSH
82151: LD_INT 91
82153: PUSH
82154: LD_VAR 0 8
82158: PUSH
82159: LD_INT 8
82161: PUSH
82162: EMPTY
82163: LIST
82164: LIST
82165: LIST
82166: PUSH
82167: LD_INT 2
82169: PUSH
82170: LD_INT 34
82172: PUSH
82173: LD_INT 12
82175: PUSH
82176: EMPTY
82177: LIST
82178: LIST
82179: PUSH
82180: LD_INT 34
82182: PUSH
82183: LD_INT 51
82185: PUSH
82186: EMPTY
82187: LIST
82188: LIST
82189: PUSH
82190: LD_INT 34
82192: PUSH
82193: LD_INT 32
82195: PUSH
82196: EMPTY
82197: LIST
82198: LIST
82199: PUSH
82200: LD_INT 34
82202: PUSH
82203: LD_INT 89
82205: PUSH
82206: EMPTY
82207: LIST
82208: LIST
82209: PUSH
82210: EMPTY
82211: LIST
82212: LIST
82213: LIST
82214: LIST
82215: LIST
82216: PUSH
82217: EMPTY
82218: LIST
82219: LIST
82220: LIST
82221: PPUSH
82222: CALL_OW 69
82226: ST_TO_ADDR
// if tmp then
82227: LD_VAR 0 4
82231: IFFALSE 82357
// begin for j in tmp do
82233: LD_ADDR_VAR 0 2
82237: PUSH
82238: LD_VAR 0 4
82242: PUSH
82243: FOR_IN
82244: IFFALSE 82355
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
82246: LD_VAR 0 2
82250: PPUSH
82251: CALL_OW 262
82255: PUSH
82256: LD_INT 3
82258: EQUAL
82259: PUSH
82260: LD_VAR 0 2
82264: PPUSH
82265: CALL_OW 261
82269: PUSH
82270: LD_INT 20
82272: GREATER
82273: OR
82274: PUSH
82275: LD_VAR 0 2
82279: PPUSH
82280: CALL_OW 314
82284: NOT
82285: AND
82286: PUSH
82287: LD_VAR 0 2
82291: PPUSH
82292: CALL_OW 263
82296: PUSH
82297: LD_INT 1
82299: NONEQUAL
82300: PUSH
82301: LD_VAR 0 2
82305: PPUSH
82306: CALL_OW 311
82310: OR
82311: AND
82312: IFFALSE 82353
// begin ComCollect ( j , x , y ) ;
82314: LD_VAR 0 2
82318: PPUSH
82319: LD_VAR 0 6
82323: PPUSH
82324: LD_VAR 0 7
82328: PPUSH
82329: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
82333: LD_VAR 0 2
82337: PPUSH
82338: LD_VAR 0 8
82342: PPUSH
82343: CALL_OW 172
// exit ;
82347: POP
82348: POP
82349: POP
82350: POP
82351: GO 82361
// end ;
82353: GO 82243
82355: POP
82356: POP
// end ; end ;
82357: GO 81732
82359: POP
82360: POP
// end ; end_of_file
82361: PPOPN 9
82363: END
// export ru_radar on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82364: LD_VAR 0 1
82368: PUSH
82369: LD_INT 200
82371: DOUBLE
82372: GREATEREQUAL
82373: IFFALSE 82381
82375: LD_INT 299
82377: DOUBLE
82378: LESSEQUAL
82379: IFTRUE 82383
82381: GO 82415
82383: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82384: LD_VAR 0 1
82388: PPUSH
82389: LD_VAR 0 2
82393: PPUSH
82394: LD_VAR 0 3
82398: PPUSH
82399: LD_VAR 0 4
82403: PPUSH
82404: LD_VAR 0 5
82408: PPUSH
82409: CALL 62657 0 5
82413: GO 82492
82415: LD_INT 300
82417: DOUBLE
82418: GREATEREQUAL
82419: IFFALSE 82427
82421: LD_INT 399
82423: DOUBLE
82424: LESSEQUAL
82425: IFTRUE 82429
82427: GO 82491
82429: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82430: LD_VAR 0 1
82434: PPUSH
82435: LD_VAR 0 2
82439: PPUSH
82440: LD_VAR 0 3
82444: PPUSH
82445: LD_VAR 0 4
82449: PPUSH
82450: LD_VAR 0 5
82454: PPUSH
82455: LD_VAR 0 6
82459: PPUSH
82460: LD_VAR 0 7
82464: PPUSH
82465: LD_VAR 0 8
82469: PPUSH
82470: LD_VAR 0 9
82474: PPUSH
82475: LD_VAR 0 10
82479: PPUSH
82480: LD_VAR 0 11
82484: PPUSH
82485: CALL 79073 0 11
82489: GO 82492
82491: POP
// end ;
82492: PPOPN 11
82494: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82495: LD_VAR 0 1
82499: PPUSH
82500: LD_VAR 0 2
82504: PPUSH
82505: LD_VAR 0 3
82509: PPUSH
82510: LD_VAR 0 4
82514: PPUSH
82515: LD_VAR 0 5
82519: PPUSH
82520: CALL 62393 0 5
// end ;
82524: PPOPN 5
82526: END
